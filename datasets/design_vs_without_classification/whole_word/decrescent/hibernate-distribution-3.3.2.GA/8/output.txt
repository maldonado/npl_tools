//test out the optimizer:	WITHOUT_CLASSIFICATION	0.998489990237918	WITHOUT_CLASSIFICATION	0.0015100097620820816	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9997620242737679	WITHOUT_CLASSIFICATION	2.3797572623207976E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9997620242737679	WITHOUT_CLASSIFICATION	2.3797572623207976E-4	DESIGN
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9991889619976226	WITHOUT_CLASSIFICATION	8.11038002377411E-4	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9990683035260378	WITHOUT_CLASSIFICATION	9.31696473962254E-4	DESIGN
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999481070284847	WITHOUT_CLASSIFICATION	5.189297151526536E-5	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999960422226328	WITHOUT_CLASSIFICATION	3.957777367235687E-6	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999960422226328	WITHOUT_CLASSIFICATION	3.957777367235687E-6	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999924537459205	WITHOUT_CLASSIFICATION	7.546254079589434E-6	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998133942850906	WITHOUT_CLASSIFICATION	1.8660571490941387E-4	DESIGN
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9998659921423696	WITHOUT_CLASSIFICATION	1.3400785763034988E-4	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9988083980721792	WITHOUT_CLASSIFICATION	0.0011916019278207137	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999701658972511	WITHOUT_CLASSIFICATION	2.9834102748877006E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999701658972511	WITHOUT_CLASSIFICATION	2.9834102748877006E-5	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9995595879818757	WITHOUT_CLASSIFICATION	4.4041201812427736E-4	DESIGN
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9998847162005384	WITHOUT_CLASSIFICATION	1.1528379946147636E-4	DESIGN
// decode row selection...	WITHOUT_CLASSIFICATION	0.9996507490215089	WITHOUT_CLASSIFICATION	3.4925097849122723E-4	DESIGN
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9913507604230731	WITHOUT_CLASSIFICATION	0.008649239576926806	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.999602946423166	WITHOUT_CLASSIFICATION	3.970535768338777E-4	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9997012998072491	WITHOUT_CLASSIFICATION	2.9870019275085645E-4	DESIGN
// ROW ID	WITHOUT_CLASSIFICATION	0.9996621736002665	WITHOUT_CLASSIFICATION	3.378263997334906E-4	DESIGN
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9990683035260378	WITHOUT_CLASSIFICATION	9.31696473962254E-4	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9990683035260378	WITHOUT_CLASSIFICATION	9.31696473962254E-4	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9442088238777374	WITHOUT_CLASSIFICATION	0.05579117612226258	DESIGN
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9990900596715178	WITHOUT_CLASSIFICATION	9.099403284822553E-4	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9990683035260378	WITHOUT_CLASSIFICATION	9.31696473962254E-4	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9990839614430939	WITHOUT_CLASSIFICATION	9.16038556906074E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.99908192969449	WITHOUT_CLASSIFICATION	9.180703055099814E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.99908192969449	WITHOUT_CLASSIFICATION	9.180703055099814E-4	DESIGN
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.99931534626966	WITHOUT_CLASSIFICATION	6.846537303399806E-4	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9997894156299341	WITHOUT_CLASSIFICATION	2.105843700659155E-4	DESIGN
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9996523459844171	WITHOUT_CLASSIFICATION	3.4765401558291205E-4	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9973031887275321	WITHOUT_CLASSIFICATION	0.002696811272467847	DESIGN
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.7358088776662562	DESIGN	0.26419112233374376	WITHOUT_CLASSIFICATION
/**	WITHOUT_CLASSIFICATION	0.8480556639784362	DESIGN	0.15194433602156376	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
/**	WITHOUT_CLASSIFICATION	0.8480556639784362	DESIGN	0.15194433602156376	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999528870911996	WITHOUT_CLASSIFICATION	4.711290880040258E-5	DESIGN
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9495372931912304	WITHOUT_CLASSIFICATION	0.05046270680876966	DESIGN
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9319248208679173	WITHOUT_CLASSIFICATION	0.06807517913208273	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9921272714953856	WITHOUT_CLASSIFICATION	0.007872728504614407	DESIGN
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9996339384495999	WITHOUT_CLASSIFICATION	3.6606155040010325E-4	DESIGN
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995709066483893	WITHOUT_CLASSIFICATION	4.2909335161059965E-4	DESIGN
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997581488284513	WITHOUT_CLASSIFICATION	2.4185117154877308E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999393815944053	WITHOUT_CLASSIFICATION	6.061840559470112E-4	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9991897437067582	WITHOUT_CLASSIFICATION	8.102562932417271E-4	DESIGN
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9172464437007474	WITHOUT_CLASSIFICATION	0.08275355629925267	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9979100789576131	WITHOUT_CLASSIFICATION	0.0020899210423869843	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9991897437067582	WITHOUT_CLASSIFICATION	8.102562932417271E-4	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9979100789576131	WITHOUT_CLASSIFICATION	0.0020899210423869843	DESIGN
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9995111508537609	WITHOUT_CLASSIFICATION	4.888491462390331E-4	DESIGN
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9982916423146924	DESIGN	0.0017083576853076968	WITHOUT_CLASSIFICATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9988372916699935	WITHOUT_CLASSIFICATION	0.001162708330006535	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9998270293916672	WITHOUT_CLASSIFICATION	1.7297060833284736E-4	DESIGN
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.999971987987932	WITHOUT_CLASSIFICATION	2.8012012068117273E-5	DESIGN
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9998375493148561	WITHOUT_CLASSIFICATION	1.6245068514382095E-4	DESIGN
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.999862056456466	WITHOUT_CLASSIFICATION	1.3794354353409625E-4	DESIGN
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9965528727623384	WITHOUT_CLASSIFICATION	0.0034471272376616537	DESIGN
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9998911922676101	WITHOUT_CLASSIFICATION	1.0880773238991288E-4	DESIGN
// Never evict this node	WITHOUT_CLASSIFICATION	0.997394377883625	WITHOUT_CLASSIFICATION	0.0026056221163750512	DESIGN
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9981808758481574	WITHOUT_CLASSIFICATION	0.0018191241518425445	DESIGN
// 60 seconds	WITHOUT_CLASSIFICATION	0.9991933260636517	WITHOUT_CLASSIFICATION	8.0667393634836E-4	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999722467002444	WITHOUT_CLASSIFICATION	2.775329975558855E-5	DESIGN
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9599388527040582	WITHOUT_CLASSIFICATION	0.04006114729594179	DESIGN
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9807444611971242	WITHOUT_CLASSIFICATION	0.019255538802875796	DESIGN
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9998870430298042	WITHOUT_CLASSIFICATION	1.1295697019578555E-4	DESIGN
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9970685101638443	WITHOUT_CLASSIFICATION	0.002931489836155572	DESIGN
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999855710466233	WITHOUT_CLASSIFICATION	1.4428953376711034E-5	DESIGN
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.999851671060492	WITHOUT_CLASSIFICATION	1.4832893950803615E-4	DESIGN
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9998787511583206	WITHOUT_CLASSIFICATION	1.2124884167943656E-4	DESIGN
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9991095130459334	WITHOUT_CLASSIFICATION	8.904869540666261E-4	DESIGN
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999219209243616	WITHOUT_CLASSIFICATION	7.807907563848603E-5	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9987400544374907	WITHOUT_CLASSIFICATION	0.001259945562509314	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9993271182636294	WITHOUT_CLASSIFICATION	6.728817363706084E-4	DESIGN
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.6359714398654309	WITHOUT_CLASSIFICATION	0.364028560134569	DESIGN
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9888539436164767	WITHOUT_CLASSIFICATION	0.01114605638352339	DESIGN
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9995280246581777	WITHOUT_CLASSIFICATION	4.7197534182226577E-4	DESIGN
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9962953769016245	WITHOUT_CLASSIFICATION	0.003704623098375378	DESIGN
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9966152645463848	WITHOUT_CLASSIFICATION	0.0033847354536151605	DESIGN
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999989952479977	WITHOUT_CLASSIFICATION	1.0047520022615568E-6	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999995578523171	WITHOUT_CLASSIFICATION	4.421476828993599E-7	DESIGN
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999683735132738	WITHOUT_CLASSIFICATION	3.1626486726171044E-5	DESIGN
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9991072478681922	WITHOUT_CLASSIFICATION	8.92752131807925E-4	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9993737639141863	WITHOUT_CLASSIFICATION	6.262360858137058E-4	DESIGN
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9987369139173996	WITHOUT_CLASSIFICATION	0.001263086082600407	DESIGN
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999998416511197	WITHOUT_CLASSIFICATION	1.5834888028032582E-7	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9993737639141863	WITHOUT_CLASSIFICATION	6.262360858137058E-4	DESIGN
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.999994945015167	WITHOUT_CLASSIFICATION	5.0549848330499565E-6	DESIGN
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999367504272437	WITHOUT_CLASSIFICATION	6.32495727562461E-5	DESIGN
// ignore!	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9995610847484491	WITHOUT_CLASSIFICATION	4.389152515510245E-4	DESIGN
// construct the cache	WITHOUT_CLASSIFICATION	0.999205115841704	WITHOUT_CLASSIFICATION	7.94884158296057E-4	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9981649472480688	WITHOUT_CLASSIFICATION	0.0018350527519311597	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9981649472480688	WITHOUT_CLASSIFICATION	0.0018350527519311597	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9979128720309168	WITHOUT_CLASSIFICATION	0.0020871279690831386	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9996835949607874	WITHOUT_CLASSIFICATION	3.1640503921264774E-4	DESIGN
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.999553114959586	WITHOUT_CLASSIFICATION	4.468850404141035E-4	DESIGN
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9595248932316071	WITHOUT_CLASSIFICATION	0.04047510676839297	DESIGN
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9989543543686488	WITHOUT_CLASSIFICATION	0.0010456456313511536	DESIGN
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9998886798888401	WITHOUT_CLASSIFICATION	1.1132011115983886E-4	DESIGN
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.999752608387827	WITHOUT_CLASSIFICATION	2.473916121729917E-4	DESIGN
// return the connection	WITHOUT_CLASSIFICATION	0.9991541177776041	WITHOUT_CLASSIFICATION	8.458822223959344E-4	DESIGN
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999570546529712	WITHOUT_CLASSIFICATION	4.2945347028760474E-5	DESIGN
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999973604014522	WITHOUT_CLASSIFICATION	2.6395985478530037E-6	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999963343282015	WITHOUT_CLASSIFICATION	3.6656717985046555E-5	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999963343282015	WITHOUT_CLASSIFICATION	3.6656717985046555E-5	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999785673764331	WITHOUT_CLASSIFICATION	2.1432623566938588E-5	DESIGN
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9998427526875118	WITHOUT_CLASSIFICATION	1.572473124881968E-4	DESIGN
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9997866604449549	WITHOUT_CLASSIFICATION	2.133395550451815E-4	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999963343282015	WITHOUT_CLASSIFICATION	3.6656717985046555E-5	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999785673764331	WITHOUT_CLASSIFICATION	2.1432623566938588E-5	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999785673764331	WITHOUT_CLASSIFICATION	2.1432623566938588E-5	DESIGN
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9998883616713173	WITHOUT_CLASSIFICATION	1.1163832868270629E-4	DESIGN
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.8557295159700712	WITHOUT_CLASSIFICATION	0.14427048402992884	DESIGN
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999998705743802	WITHOUT_CLASSIFICATION	1.2942561987217368E-7	DESIGN
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999760990444974	WITHOUT_CLASSIFICATION	2.3900955502697738E-5	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9885113668437553	WITHOUT_CLASSIFICATION	0.01148863315624479	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9885113668437553	WITHOUT_CLASSIFICATION	0.01148863315624479	DESIGN
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9998920479093553	WITHOUT_CLASSIFICATION	1.079520906447949E-4	DESIGN
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.999130720185247	WITHOUT_CLASSIFICATION	8.692798147529577E-4	DESIGN
// default is POJO	WITHOUT_CLASSIFICATION	0.9994313352243238	WITHOUT_CLASSIFICATION	5.686647756762473E-4	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9996463775165341	WITHOUT_CLASSIFICATION	3.536224834659765E-4	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9996463775165341	WITHOUT_CLASSIFICATION	3.536224834659765E-4	DESIGN
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.998639877709481	WITHOUT_CLASSIFICATION	0.0013601222905189848	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999917508670924	WITHOUT_CLASSIFICATION	8.249132907652813E-6	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9937302887816235	WITHOUT_CLASSIFICATION	0.006269711218376541	DESIGN
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999959097990364	WITHOUT_CLASSIFICATION	4.09020096358074E-6	DESIGN
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9988614251549018	WITHOUT_CLASSIFICATION	0.0011385748450981087	DESIGN
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9998203426115123	WITHOUT_CLASSIFICATION	1.7965738848760442E-4	DESIGN
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.998533286502802	WITHOUT_CLASSIFICATION	0.0014667134971979852	DESIGN
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9985483840374667	WITHOUT_CLASSIFICATION	0.00145161596253339	DESIGN
//sort first by role name	WITHOUT_CLASSIFICATION	0.9991092151847643	WITHOUT_CLASSIFICATION	8.907848152357033E-4	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9937302887816235	WITHOUT_CLASSIFICATION	0.006269711218376541	DESIGN
//then by fk	WITHOUT_CLASSIFICATION	0.9990890786934175	WITHOUT_CLASSIFICATION	9.109213065824187E-4	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9993877986859502	WITHOUT_CLASSIFICATION	6.122013140497151E-4	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9993877986859502	WITHOUT_CLASSIFICATION	6.122013140497151E-4	DESIGN
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9984829180281792	WITHOUT_CLASSIFICATION	0.0015170819718207669	DESIGN
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9925009531556414	WITHOUT_CLASSIFICATION	0.007499046844358577	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9978959485564134	WITHOUT_CLASSIFICATION	0.002104051443586495	DESIGN
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9969157027698333	WITHOUT_CLASSIFICATION	0.0030842972301666034	DESIGN
//sort first by entity name	WITHOUT_CLASSIFICATION	0.998248634892464	WITHOUT_CLASSIFICATION	0.0017513651075360022	DESIGN
//then by id	WITHOUT_CLASSIFICATION	0.9988487115054971	WITHOUT_CLASSIFICATION	0.001151288494502929	DESIGN
// to be safe...	WITHOUT_CLASSIFICATION	0.997946710858672	WITHOUT_CLASSIFICATION	0.0020532891413279166	DESIGN
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.999729835287725	WITHOUT_CLASSIFICATION	2.701647122749925E-4	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999315362686512	WITHOUT_CLASSIFICATION	6.846373134876005E-5	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999315362686512	WITHOUT_CLASSIFICATION	6.846373134876005E-5	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9988538379982032	WITHOUT_CLASSIFICATION	0.001146162001796937	DESIGN
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.998489990237918	WITHOUT_CLASSIFICATION	0.0015100097620820816	DESIGN
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.999500135474599	WITHOUT_CLASSIFICATION	4.998645254010076E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// invokespecial	WITHOUT_CLASSIFICATION	0.9990683035260378	WITHOUT_CLASSIFICATION	9.31696473962254E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9997620242737679	WITHOUT_CLASSIFICATION	2.3797572623207976E-4	DESIGN
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9990775797942882	WITHOUT_CLASSIFICATION	9.224202057118795E-4	DESIGN
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9985368297547639	WITHOUT_CLASSIFICATION	0.001463170245236094	DESIGN
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9998148467590142	WITHOUT_CLASSIFICATION	1.8515324098586673E-4	DESIGN
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9989779680043906	WITHOUT_CLASSIFICATION	0.001022031995609293	DESIGN
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9998710997438196	WITHOUT_CLASSIFICATION	1.289002561803037E-4	DESIGN
// new	WITHOUT_CLASSIFICATION	0.9998315087733577	WITHOUT_CLASSIFICATION	1.6849122664229174E-4	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9997261424573455	WITHOUT_CLASSIFICATION	2.738575426545924E-4	DESIGN
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9998283168384509	WITHOUT_CLASSIFICATION	1.7168316154913968E-4	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9990683035260378	WITHOUT_CLASSIFICATION	9.31696473962254E-4	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9990683035260378	WITHOUT_CLASSIFICATION	9.31696473962254E-4	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9990683035260378	WITHOUT_CLASSIFICATION	9.31696473962254E-4	DESIGN
// aastore // args	WITHOUT_CLASSIFICATION	0.9989779680043906	WITHOUT_CLASSIFICATION	0.001022031995609293	DESIGN
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.998426370442809	WITHOUT_CLASSIFICATION	0.0015736295571909167	DESIGN
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.999775466864978	WITHOUT_CLASSIFICATION	2.2453313502195956E-4	DESIGN
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9998226842932562	WITHOUT_CLASSIFICATION	1.7731570674377496E-4	DESIGN
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9994675517783017	WITHOUT_CLASSIFICATION	5.324482216982978E-4	DESIGN
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9994541836036734	WITHOUT_CLASSIFICATION	5.458163963265392E-4	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999960422226328	WITHOUT_CLASSIFICATION	3.957777367235687E-6	DESIGN
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9976852103749606	WITHOUT_CLASSIFICATION	0.002314789625039323	DESIGN
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9994789279344157	WITHOUT_CLASSIFICATION	5.210720655843E-4	DESIGN
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9997413356457125	WITHOUT_CLASSIFICATION	2.586643542874813E-4	DESIGN
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9994256830810485	WITHOUT_CLASSIFICATION	5.743169189514579E-4	DESIGN
// iconst_i	WITHOUT_CLASSIFICATION	0.9990683035260378	WITHOUT_CLASSIFICATION	9.31696473962254E-4	DESIGN
// aaload	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9990692739959565	WITHOUT_CLASSIFICATION	9.30726004043489E-4	DESIGN
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9996971948937321	WITHOUT_CLASSIFICATION	3.028051062679675E-4	DESIGN
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9997353153161297	WITHOUT_CLASSIFICATION	2.646846838702914E-4	DESIGN
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999934886505831	WITHOUT_CLASSIFICATION	6.511349416818852E-6	DESIGN
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9948964814346103	WITHOUT_CLASSIFICATION	0.005103518565389747	DESIGN
// register in exception table	WITHOUT_CLASSIFICATION	0.9994648896166203	WITHOUT_CLASSIFICATION	5.351103833798313E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9997620242737679	WITHOUT_CLASSIFICATION	2.3797572623207976E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9997620242737679	WITHOUT_CLASSIFICATION	2.3797572623207976E-4	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9997261424573455	WITHOUT_CLASSIFICATION	2.738575426545924E-4	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9990683035260378	WITHOUT_CLASSIFICATION	9.31696473962254E-4	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9990692739959565	WITHOUT_CLASSIFICATION	9.30726004043489E-4	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999924537459205	WITHOUT_CLASSIFICATION	7.546254079589434E-6	DESIGN
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9997847351046585	WITHOUT_CLASSIFICATION	2.152648953414894E-4	DESIGN
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9996948409738586	WITHOUT_CLASSIFICATION	3.051590261414151E-4	DESIGN
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.998927694281563	WITHOUT_CLASSIFICATION	0.0010723057184369427	DESIGN
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9990925256607408	WITHOUT_CLASSIFICATION	9.074743392591352E-4	DESIGN
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9994333320915777	WITHOUT_CLASSIFICATION	5.66667908422279E-4	DESIGN
// athrow	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.99971770320894	WITHOUT_CLASSIFICATION	2.8229679106003125E-4	DESIGN
//swallow	WITHOUT_CLASSIFICATION	0.9991897437067582	WITHOUT_CLASSIFICATION	8.102562932417271E-4	DESIGN
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9946127921183863	WITHOUT_CLASSIFICATION	0.0053872078816136525	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9946419616328975	WITHOUT_CLASSIFICATION	0.00535803836710249	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9946419616328975	WITHOUT_CLASSIFICATION	0.00535803836710249	DESIGN
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9994239273262515	WITHOUT_CLASSIFICATION	5.760726737483822E-4	DESIGN
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9998107256296661	WITHOUT_CLASSIFICATION	1.8927437033382214E-4	DESIGN
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9964593730882826	WITHOUT_CLASSIFICATION	0.0035406269117174215	DESIGN
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9988519333438031	WITHOUT_CLASSIFICATION	0.0011480666561969853	DESIGN
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9986122542739747	WITHOUT_CLASSIFICATION	0.0013877457260252982	DESIGN
// case of non-static field	WITHOUT_CLASSIFICATION	0.9998110181384218	WITHOUT_CLASSIFICATION	1.8898186157826832E-4	DESIGN
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9996680755498222	WITHOUT_CLASSIFICATION	3.31924450177749E-4	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998133942850906	WITHOUT_CLASSIFICATION	1.8660571490941387E-4	DESIGN
// ifnonnull	WITHOUT_CLASSIFICATION	0.9990683035260378	WITHOUT_CLASSIFICATION	9.31696473962254E-4	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9993433175606858	WITHOUT_CLASSIFICATION	6.56682439314176E-4	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9993433175606858	WITHOUT_CLASSIFICATION	6.56682439314176E-4	DESIGN
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9993433175606858	WITHOUT_CLASSIFICATION	6.56682439314176E-4	DESIGN
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9991635273391434	WITHOUT_CLASSIFICATION	8.364726608566948E-4	DESIGN
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9993433175606858	WITHOUT_CLASSIFICATION	6.56682439314176E-4	DESIGN
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9998617045196988	WITHOUT_CLASSIFICATION	1.3829548030117354E-4	DESIGN
// int	WITHOUT_CLASSIFICATION	0.9998772269555216	WITHOUT_CLASSIFICATION	1.227730444783006E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9997620242737679	WITHOUT_CLASSIFICATION	2.3797572623207976E-4	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9997261424573455	WITHOUT_CLASSIFICATION	2.738575426545924E-4	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9990683035260378	WITHOUT_CLASSIFICATION	9.31696473962254E-4	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9990692739959565	WITHOUT_CLASSIFICATION	9.30726004043489E-4	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9990692739959565	WITHOUT_CLASSIFICATION	9.30726004043489E-4	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9994333320915777	WITHOUT_CLASSIFICATION	5.66667908422279E-4	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9994333320915777	WITHOUT_CLASSIFICATION	5.66667908422279E-4	DESIGN
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9991140816292988	WITHOUT_CLASSIFICATION	8.85918370701102E-4	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// putfield	WITHOUT_CLASSIFICATION	0.9990683035260378	WITHOUT_CLASSIFICATION	9.31696473962254E-4	DESIGN
// return ;	WITHOUT_CLASSIFICATION	0.9993241681633325	WITHOUT_CLASSIFICATION	6.758318366675782E-4	DESIGN
// ldc // field name	WITHOUT_CLASSIFICATION	0.9980573924850898	WITHOUT_CLASSIFICATION	0.00194260751491022	DESIGN
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9998537966577121	WITHOUT_CLASSIFICATION	1.462033422878566E-4	DESIGN
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9994333320915777	WITHOUT_CLASSIFICATION	5.66667908422279E-4	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9988083980721792	WITHOUT_CLASSIFICATION	0.0011916019278207137	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9988083980721792	WITHOUT_CLASSIFICATION	0.0011916019278207137	DESIGN
// not array	WITHOUT_CLASSIFICATION	0.9972493123210107	WITHOUT_CLASSIFICATION	0.0027506876789893534	DESIGN
// array of reference type	WITHOUT_CLASSIFICATION	0.9992533403705981	WITHOUT_CLASSIFICATION	7.466596294018634E-4	DESIGN
// boolean	WITHOUT_CLASSIFICATION	0.9998958836294347	WITHOUT_CLASSIFICATION	1.0411637056527831E-4	DESIGN
// byte	WITHOUT_CLASSIFICATION	0.9997607000583464	WITHOUT_CLASSIFICATION	2.392999416535793E-4	DESIGN
// char	WITHOUT_CLASSIFICATION	0.9998780409073466	WITHOUT_CLASSIFICATION	1.2195909265344177E-4	DESIGN
// short	WITHOUT_CLASSIFICATION	0.9994295381896576	WITHOUT_CLASSIFICATION	5.704618103423777E-4	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999701658972511	WITHOUT_CLASSIFICATION	2.9834102748877006E-5	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9997012115265708	WITHOUT_CLASSIFICATION	2.9878847342929596E-4	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9997012115265708	WITHOUT_CLASSIFICATION	2.9878847342929596E-4	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9995595879818757	WITHOUT_CLASSIFICATION	4.4041201812427736E-4	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9995595879818757	WITHOUT_CLASSIFICATION	4.4041201812427736E-4	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9948424134542642	WITHOUT_CLASSIFICATION	0.005157586545735947	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9948424134542642	WITHOUT_CLASSIFICATION	0.005157586545735947	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9988183681815758	WITHOUT_CLASSIFICATION	0.0011816318184241388	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9988183681815758	WITHOUT_CLASSIFICATION	0.0011816318184241388	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9988083980721792	WITHOUT_CLASSIFICATION	0.0011916019278207137	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999701658972511	WITHOUT_CLASSIFICATION	2.9834102748877006E-5	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9997012115265708	WITHOUT_CLASSIFICATION	2.9878847342929596E-4	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9997012115265708	WITHOUT_CLASSIFICATION	2.9878847342929596E-4	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9995595879818757	WITHOUT_CLASSIFICATION	4.4041201812427736E-4	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9948424134542642	WITHOUT_CLASSIFICATION	0.005157586545735947	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9948424134542642	WITHOUT_CLASSIFICATION	0.005157586545735947	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9988183681815758	WITHOUT_CLASSIFICATION	0.0011816318184241388	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9993373870280128	WITHOUT_CLASSIFICATION	6.626129719873013E-4	DESIGN
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9972548580605268	WITHOUT_CLASSIFICATION	0.0027451419394731295	DESIGN
//decrement the lock	WITHOUT_CLASSIFICATION	0.9987595963542587	WITHOUT_CLASSIFICATION	0.001240403645741279	DESIGN
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9997267529867042	WITHOUT_CLASSIFICATION	2.7324701329579324E-4	DESIGN
//recache the updated state	WITHOUT_CLASSIFICATION	0.9996643682929917	WITHOUT_CLASSIFICATION	3.356317070084029E-4	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9997306702808022	WITHOUT_CLASSIFICATION	2.6932971919781877E-4	DESIGN
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.999867989814933	WITHOUT_CLASSIFICATION	1.320101850669353E-4	DESIGN
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9442959102034764	WITHOUT_CLASSIFICATION	0.055704089796523554	DESIGN
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9997556134569001	WITHOUT_CLASSIFICATION	2.4438654309988513E-4	DESIGN
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9997224457325574	WITHOUT_CLASSIFICATION	2.775542674425438E-4	DESIGN
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999102882347619	WITHOUT_CLASSIFICATION	8.971176523813625E-5	DESIGN
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999357990382888	WITHOUT_CLASSIFICATION	6.420096171124306E-5	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9979128720309168	WITHOUT_CLASSIFICATION	0.0020871279690831386	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9997306702808022	WITHOUT_CLASSIFICATION	2.6932971919781877E-4	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9996806518282698	WITHOUT_CLASSIFICATION	3.193481717300906E-4	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9996806518282698	WITHOUT_CLASSIFICATION	3.193481717300906E-4	DESIGN
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9852756363175658	WITHOUT_CLASSIFICATION	0.014724363682434191	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.997363286856083	WITHOUT_CLASSIFICATION	0.002636713143917074	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.997363286856083	WITHOUT_CLASSIFICATION	0.002636713143917074	DESIGN
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.998671360882153	WITHOUT_CLASSIFICATION	0.0013286391178469602	DESIGN
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9917432498678449	WITHOUT_CLASSIFICATION	0.008256750132155074	DESIGN
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9958841442433353	WITHOUT_CLASSIFICATION	0.004115855756664681	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9989116573678067	WITHOUT_CLASSIFICATION	0.001088342632193335	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9989116573678067	WITHOUT_CLASSIFICATION	0.001088342632193335	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.999602946423166	WITHOUT_CLASSIFICATION	3.970535768338777E-4	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9997471084896954	WITHOUT_CLASSIFICATION	2.5289151030455847E-4	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9997471084896954	WITHOUT_CLASSIFICATION	2.5289151030455847E-4	DESIGN
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9932430144049249	WITHOUT_CLASSIFICATION	0.006756985595075086	DESIGN
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9994140596813733	WITHOUT_CLASSIFICATION	5.859403186267322E-4	DESIGN
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9990839614430939	WITHOUT_CLASSIFICATION	9.16038556906074E-4	DESIGN
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9990683035260378	WITHOUT_CLASSIFICATION	9.31696473962254E-4	DESIGN
// MUTABLE	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// WHERE	WITHOUT_CLASSIFICATION	0.9999310127562857	WITHOUT_CLASSIFICATION	6.898724371430332E-5	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9997012998072491	WITHOUT_CLASSIFICATION	2.9870019275085645E-4	DESIGN
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9990683035260378	WITHOUT_CLASSIFICATION	9.31696473962254E-4	DESIGN
// TODO:	WITHOUT_CLASSIFICATION	0.5611954752875626	WITHOUT_CLASSIFICATION	0.43880452471243736	DESIGN
// ID	WITHOUT_CLASSIFICATION	0.9996586429912171	WITHOUT_CLASSIFICATION	3.4135700878293275E-4	DESIGN
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.999588033698904	WITHOUT_CLASSIFICATION	4.1196630109599817E-4	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9990683035260378	WITHOUT_CLASSIFICATION	9.31696473962254E-4	DESIGN
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9990676906419903	WITHOUT_CLASSIFICATION	9.323093580096347E-4	DESIGN
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9996147700138336	WITHOUT_CLASSIFICATION	3.852299861664569E-4	DESIGN
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.998694635576378	WITHOUT_CLASSIFICATION	0.001305364423621933	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9990683035260378	WITHOUT_CLASSIFICATION	9.31696473962254E-4	DESIGN
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9973031887275321	WITHOUT_CLASSIFICATION	0.002696811272467847	DESIGN
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999839195684106	WITHOUT_CLASSIFICATION	1.6080431589445214E-5	DESIGN
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9990927865920769	WITHOUT_CLASSIFICATION	9.072134079230694E-4	DESIGN
// IMPORT	WITHOUT_CLASSIFICATION	0.9996954854310829	WITHOUT_CLASSIFICATION	3.045145689172075E-4	DESIGN
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9990741481836539	WITHOUT_CLASSIFICATION	9.258518163461058E-4	DESIGN
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9991728301223116	WITHOUT_CLASSIFICATION	8.271698776882494E-4	DESIGN
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.999122485630103	WITHOUT_CLASSIFICATION	8.775143698970774E-4	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9990683035260378	WITHOUT_CLASSIFICATION	9.31696473962254E-4	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9990490602186559	WITHOUT_CLASSIFICATION	9.509397813441463E-4	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9990839614430939	WITHOUT_CLASSIFICATION	9.16038556906074E-4	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9997524187852781	WITHOUT_CLASSIFICATION	2.475812147219599E-4	DESIGN
// joined subclasses	WITHOUT_CLASSIFICATION	0.999711441503983	WITHOUT_CLASSIFICATION	2.8855849601700374E-4	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9997165749689857	WITHOUT_CLASSIFICATION	2.8342503101424664E-4	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9997012998072491	WITHOUT_CLASSIFICATION	2.9870019275085645E-4	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9990490602186559	WITHOUT_CLASSIFICATION	9.509397813441463E-4	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9997524187852781	WITHOUT_CLASSIFICATION	2.475812147219599E-4	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9997165749689857	WITHOUT_CLASSIFICATION	2.8342503101424664E-4	DESIGN
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9990825314766504	WITHOUT_CLASSIFICATION	9.174685233496433E-4	DESIGN
// TABLENAME	WITHOUT_CLASSIFICATION	0.9990683035260378	WITHOUT_CLASSIFICATION	9.31696473962254E-4	DESIGN
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9990825314766504	WITHOUT_CLASSIFICATION	9.174685233496433E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.99908192969449	WITHOUT_CLASSIFICATION	9.180703055099814E-4	DESIGN
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9990683035260378	WITHOUT_CLASSIFICATION	9.31696473962254E-4	DESIGN
// column index	WITHOUT_CLASSIFICATION	0.9999758789047404	WITHOUT_CLASSIFICATION	2.4121095259584443E-5	DESIGN
//column unique-key	WITHOUT_CLASSIFICATION	0.997600543414131	WITHOUT_CLASSIFICATION	0.0023994565858690845	DESIGN
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9977132984890602	WITHOUT_CLASSIFICATION	0.002286701510939772	DESIGN
// for an any	WITHOUT_CLASSIFICATION	0.9994449388409886	WITHOUT_CLASSIFICATION	5.550611590113187E-4	DESIGN
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999904949610146	WITHOUT_CLASSIFICATION	9.505038985460859E-6	DESIGN
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999490757982344	WITHOUT_CLASSIFICATION	5.092420176558017E-5	DESIGN
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9996367837877641	WITHOUT_CLASSIFICATION	3.6321621223595806E-4	DESIGN
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999982578917703	WITHOUT_CLASSIFICATION	1.742108229597468E-6	DESIGN
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999490757982344	WITHOUT_CLASSIFICATION	5.092420176558017E-5	DESIGN
// ROLENAME	WITHOUT_CLASSIFICATION	0.9990683035260378	WITHOUT_CLASSIFICATION	9.31696473962254E-4	DESIGN
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9990683035260378	WITHOUT_CLASSIFICATION	9.31696473962254E-4	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9997894156299341	WITHOUT_CLASSIFICATION	2.105843700659155E-4	DESIGN
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999431057865295	WITHOUT_CLASSIFICATION	5.68942134705948E-5	DESIGN
// SORT	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9990490602186559	WITHOUT_CLASSIFICATION	9.509397813441463E-4	DESIGN
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9994333320915777	WITHOUT_CLASSIFICATION	5.66667908422279E-4	DESIGN
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9989563528496852	WITHOUT_CLASSIFICATION	0.001043647150314815	DESIGN
// set up second pass	WITHOUT_CLASSIFICATION	0.9999291121865708	WITHOUT_CLASSIFICATION	7.088781342921139E-5	DESIGN
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9974652958397482	WITHOUT_CLASSIFICATION	0.0025347041602517086	DESIGN
// a nested composite element	WITHOUT_CLASSIFICATION	0.990060514025484	WITHOUT_CLASSIFICATION	0.009939485974516004	DESIGN
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9979351820504558	WITHOUT_CLASSIFICATION	0.0020648179495441708	DESIGN
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999810129313016	WITHOUT_CLASSIFICATION	1.8987068698448985E-5	DESIGN
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.999803811449689	WITHOUT_CLASSIFICATION	1.9618855031096417E-4	DESIGN
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9992651897920922	WITHOUT_CLASSIFICATION	7.348102079077263E-4	DESIGN
// GENERATOR	WITHOUT_CLASSIFICATION	0.9992242774946392	WITHOUT_CLASSIFICATION	7.757225053609162E-4	DESIGN
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9989836851454419	WITHOUT_CLASSIFICATION	0.001016314854558143	DESIGN
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9991140816292988	WITHOUT_CLASSIFICATION	8.85918370701102E-4	DESIGN
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9955083204929909	WITHOUT_CLASSIFICATION	0.004491679507009152	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9973031887275321	WITHOUT_CLASSIFICATION	0.002696811272467847	DESIGN
// contained elements:	WITHOUT_CLASSIFICATION	0.9988848231951132	WITHOUT_CLASSIFICATION	0.0011151768048867827	DESIGN
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9985693688106921	WITHOUT_CLASSIFICATION	0.001430631189307859	DESIGN
// Bind the where	WITHOUT_CLASSIFICATION	0.9996374104856978	WITHOUT_CLASSIFICATION	3.6258951430227733E-4	DESIGN
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9994953111319393	WITHOUT_CLASSIFICATION	5.046888680606249E-4	DESIGN
// Bind the filters	WITHOUT_CLASSIFICATION	0.9994562047596132	WITHOUT_CLASSIFICATION	5.437952403868111E-4	DESIGN
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9981251634102326	WITHOUT_CLASSIFICATION	0.0018748365897673785	DESIGN
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999446855299	WITHOUT_CLASSIFICATION	5.5314470206580754E-8	DESIGN
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999335869966446	WITHOUT_CLASSIFICATION	6.641300335541996E-5	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.6253875982006065	WITHOUT_CLASSIFICATION	0.37461240179939354	DESIGN
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9986380860220174	WITHOUT_CLASSIFICATION	0.0013619139779826508	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9971544151012633	WITHOUT_CLASSIFICATION	0.0028455848987366376	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9971544151012633	WITHOUT_CLASSIFICATION	0.0028455848987366376	DESIGN
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9992603678143516	WITHOUT_CLASSIFICATION	7.396321856484546E-4	DESIGN
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.999983117830675	WITHOUT_CLASSIFICATION	1.6882169325006797E-5	DESIGN
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9995292368640311	WITHOUT_CLASSIFICATION	4.7076313596889605E-4	DESIGN
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9993026936024814	WITHOUT_CLASSIFICATION	6.973063975186997E-4	DESIGN
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9977583821932205	WITHOUT_CLASSIFICATION	0.0022416178067793738	DESIGN
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9956975004215907	WITHOUT_CLASSIFICATION	0.004302499578409436	DESIGN
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9997236798360316	WITHOUT_CLASSIFICATION	2.7632016396845794E-4	DESIGN
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999994702902429	WITHOUT_CLASSIFICATION	5.29709757168349E-7	DESIGN
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9972197778457929	WITHOUT_CLASSIFICATION	0.0027802221542070826	DESIGN
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9979410152528203	WITHOUT_CLASSIFICATION	0.0020589847471796626	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
//Schema export:	WITHOUT_CLASSIFICATION	0.9975898767217453	WITHOUT_CLASSIFICATION	0.0024101232782547037	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9986322889790848	WITHOUT_CLASSIFICATION	0.00136771102091516	DESIGN
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.988477106979656	WITHOUT_CLASSIFICATION	0.011522893020344012	DESIGN
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.998645998522595	WITHOUT_CLASSIFICATION	0.001354001477404968	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997405306400761	WITHOUT_CLASSIFICATION	2.594693599239372E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9867415447727769	WITHOUT_CLASSIFICATION	0.013258455227223215	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9960971223891146	WITHOUT_CLASSIFICATION	0.003902877610885445	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999886263697495	WITHOUT_CLASSIFICATION	1.1373630250542989E-5	DESIGN
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9982339251221338	WITHOUT_CLASSIFICATION	0.0017660748778661254	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9852776572428887	WITHOUT_CLASSIFICATION	0.014722342757111173	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9998392629849474	WITHOUT_CLASSIFICATION	1.6073701505270365E-4	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9998392629849474	WITHOUT_CLASSIFICATION	1.6073701505270365E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9976762953427655	WITHOUT_CLASSIFICATION	0.0023237046572346163	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9976762953427655	WITHOUT_CLASSIFICATION	0.0023237046572346163	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.6253875982006065	WITHOUT_CLASSIFICATION	0.37461240179939354	DESIGN
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9577194125849509	WITHOUT_CLASSIFICATION	0.04228058741504909	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9959020140316334	WITHOUT_CLASSIFICATION	0.004097985968366655	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9997956616764798	WITHOUT_CLASSIFICATION	2.0433832352010316E-4	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9988538379982032	WITHOUT_CLASSIFICATION	0.001146162001796937	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9959020140316334	WITHOUT_CLASSIFICATION	0.004097985968366655	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9997956616764798	WITHOUT_CLASSIFICATION	2.0433832352010316E-4	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9958942037172231	WITHOUT_CLASSIFICATION	0.004105796282776827	DESIGN
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9920367561363319	WITHOUT_CLASSIFICATION	0.007963243863668104	DESIGN
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9939846218166718	WITHOUT_CLASSIFICATION	0.006015378183328187	DESIGN
// the element has changed	WITHOUT_CLASSIFICATION	0.9999696035053794	WITHOUT_CLASSIFICATION	3.0396494620482106E-5	DESIGN
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9818700199418575	WITHOUT_CLASSIFICATION	0.018129980058142522	DESIGN
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.8709029286061564	WITHOUT_CLASSIFICATION	0.12909707139384355	DESIGN
// override on some subclasses	WITHOUT_CLASSIFICATION	0.999831327718724	WITHOUT_CLASSIFICATION	1.6867228127605277E-4	DESIGN
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9988027419457993	WITHOUT_CLASSIFICATION	0.001197258054200743	DESIGN
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9712357799474675	WITHOUT_CLASSIFICATION	0.028764220052532565	DESIGN
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999976595068863	WITHOUT_CLASSIFICATION	2.340493113689859E-6	DESIGN
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9991915731971034	WITHOUT_CLASSIFICATION	8.084268028966846E-4	DESIGN
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9997088494224572	WITHOUT_CLASSIFICATION	2.9115057754276866E-4	DESIGN
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9993550466444094	WITHOUT_CLASSIFICATION	6.449533555906419E-4	DESIGN
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9980338244280862	WITHOUT_CLASSIFICATION	0.0019661755719137092	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9988538379982032	WITHOUT_CLASSIFICATION	0.001146162001796937	DESIGN
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9980338244280862	WITHOUT_CLASSIFICATION	0.0019661755719137092	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9963671183484991	WITHOUT_CLASSIFICATION	0.0036328816515008738	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9963671183484991	WITHOUT_CLASSIFICATION	0.0036328816515008738	DESIGN
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9960604991823446	WITHOUT_CLASSIFICATION	0.003939500817655367	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9958942037172231	WITHOUT_CLASSIFICATION	0.004105796282776827	DESIGN
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9966350721379197	WITHOUT_CLASSIFICATION	0.003364927862080365	DESIGN
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.6714757609310208	DESIGN	0.32852423906897904	WITHOUT_CLASSIFICATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.5510891418727375	WITHOUT_CLASSIFICATION	0.4489108581272625	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999105748540836	WITHOUT_CLASSIFICATION	8.942514591634082E-5	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9694664158957975	WITHOUT_CLASSIFICATION	0.030533584104202552	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9958942037172231	WITHOUT_CLASSIFICATION	0.004105796282776827	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999105748540836	WITHOUT_CLASSIFICATION	8.942514591634082E-5	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9694664158957975	WITHOUT_CLASSIFICATION	0.030533584104202552	DESIGN
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9995847755364207	WITHOUT_CLASSIFICATION	4.152244635793224E-4	DESIGN
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9997120249223068	WITHOUT_CLASSIFICATION	2.8797507769322186E-4	DESIGN
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999841768375011	WITHOUT_CLASSIFICATION	1.5823162499004227E-5	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9958942037172231	WITHOUT_CLASSIFICATION	0.004105796282776827	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9958942037172231	WITHOUT_CLASSIFICATION	0.004105796282776827	DESIGN
// from Map	WITHOUT_CLASSIFICATION	0.9991628622325811	WITHOUT_CLASSIFICATION	8.371377674188223E-4	DESIGN
// from SortedMap	WITHOUT_CLASSIFICATION	0.9986592873144369	WITHOUT_CLASSIFICATION	0.0013407126855631045	DESIGN
//inject the data	WITHOUT_CLASSIFICATION	0.999322421809563	WITHOUT_CLASSIFICATION	6.775781904371038E-4	DESIGN
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998211833270545	WITHOUT_CLASSIFICATION	1.788166729454981E-4	DESIGN
//default pool size 20	WITHOUT_CLASSIFICATION	0.9994335087760055	WITHOUT_CLASSIFICATION	5.664912239944586E-4	DESIGN
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999962458035065	WITHOUT_CLASSIFICATION	3.754196493518466E-6	DESIGN
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999935710500295	WITHOUT_CLASSIFICATION	6.428949970592853E-6	DESIGN
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9997771803452608	WITHOUT_CLASSIFICATION	2.2281965473920412E-4	DESIGN
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.999612813249038	WITHOUT_CLASSIFICATION	3.871867509620129E-4	DESIGN
// then bind it	WITHOUT_CLASSIFICATION	0.999253448377807	WITHOUT_CLASSIFICATION	7.465516221929198E-4	DESIGN
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.964308910023979	WITHOUT_CLASSIFICATION	0.03569108997602108	DESIGN
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9720606765108126	WITHOUT_CLASSIFICATION	0.027939323489187363	DESIGN
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9996409960126577	WITHOUT_CLASSIFICATION	3.590039873422952E-4	DESIGN
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9971360534501083	WITHOUT_CLASSIFICATION	0.0028639465498916813	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994523697978075	WITHOUT_CLASSIFICATION	5.476302021925333E-4	DESIGN
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.999997266272274	WITHOUT_CLASSIFICATION	2.7337277258794305E-6	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9921272714953856	WITHOUT_CLASSIFICATION	0.007872728504614407	DESIGN
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9986362711119959	WITHOUT_CLASSIFICATION	0.0013637288880040661	DESIGN
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.99875283596658	WITHOUT_CLASSIFICATION	0.0012471640334199181	DESIGN
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9997956616764798	WITHOUT_CLASSIFICATION	2.0433832352010316E-4	DESIGN
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9998454964165632	WITHOUT_CLASSIFICATION	1.5450358343683436E-4	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9975898767217453	WITHOUT_CLASSIFICATION	0.0024101232782547037	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9975898767217453	WITHOUT_CLASSIFICATION	0.0024101232782547037	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9921272714953856	WITHOUT_CLASSIFICATION	0.007872728504614407	DESIGN
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9998343586769584	WITHOUT_CLASSIFICATION	1.6564132304176953E-4	DESIGN
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9984526933631498	WITHOUT_CLASSIFICATION	0.0015473066368501096	DESIGN
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9755970332178725	WITHOUT_CLASSIFICATION	0.02440296678212748	DESIGN
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9996680926701546	WITHOUT_CLASSIFICATION	3.3190732984540733E-4	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9977954939819255	WITHOUT_CLASSIFICATION	0.0022045060180744705	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9998434695964044	WITHOUT_CLASSIFICATION	1.5653040359572942E-4	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9981882143404708	WITHOUT_CLASSIFICATION	0.001811785659529244	DESIGN
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9994333320915777	WITHOUT_CLASSIFICATION	5.66667908422279E-4	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9998586872898791	WITHOUT_CLASSIFICATION	1.4131271012089887E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997108798720529	WITHOUT_CLASSIFICATION	2.891201279471982E-4	DESIGN
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999752088219587	WITHOUT_CLASSIFICATION	2.479117804129358E-5	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999719577253189	WITHOUT_CLASSIFICATION	2.804227468103588E-5	DESIGN
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9724433985822818	WITHOUT_CLASSIFICATION	0.02755660141771824	DESIGN
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9997781691279037	WITHOUT_CLASSIFICATION	2.2183087209618624E-4	DESIGN
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9997795465595898	WITHOUT_CLASSIFICATION	2.2045344041028358E-4	DESIGN
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999627372617178	WITHOUT_CLASSIFICATION	3.7262738282186474E-5	DESIGN
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9992707325144442	WITHOUT_CLASSIFICATION	7.292674855557768E-4	DESIGN
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9972796793352794	WITHOUT_CLASSIFICATION	0.0027203206647205733	DESIGN
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9994445090620543	WITHOUT_CLASSIFICATION	5.554909379457746E-4	DESIGN
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9835538468582775	WITHOUT_CLASSIFICATION	0.016446153141722476	DESIGN
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9991550620396312	WITHOUT_CLASSIFICATION	8.449379603687671E-4	DESIGN
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.999770683697185	WITHOUT_CLASSIFICATION	2.2931630281499833E-4	DESIGN
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9986947062832106	WITHOUT_CLASSIFICATION	0.0013052937167894903	DESIGN
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9974282314242595	WITHOUT_CLASSIFICATION	0.0025717685757405463	DESIGN
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983589626526994	WITHOUT_CLASSIFICATION	0.001641037347300561	DESIGN
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994437867215706	WITHOUT_CLASSIFICATION	5.562132784293417E-4	DESIGN
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996861808281212	WITHOUT_CLASSIFICATION	3.1381917187877387E-4	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989375559048569	WITHOUT_CLASSIFICATION	0.0010624440951431061	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991219117814609	WITHOUT_CLASSIFICATION	8.780882185390457E-4	DESIGN
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989375559048569	WITHOUT_CLASSIFICATION	0.0010624440951431061	DESIGN
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989375559048569	WITHOUT_CLASSIFICATION	0.0010624440951431061	DESIGN
// by default we report no support	WITHOUT_CLASSIFICATION	0.9456954597120245	WITHOUT_CLASSIFICATION	0.05430454028797554	DESIGN
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.6180466714817405	WITHOUT_CLASSIFICATION	0.3819533285182593	DESIGN
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996650744333895	WITHOUT_CLASSIFICATION	3.3492556661050436E-4	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.996252306804824	WITHOUT_CLASSIFICATION	0.0037476931951760757	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9922663321486166	WITHOUT_CLASSIFICATION	0.0077336678513834425	DESIGN
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998848669321501	WITHOUT_CLASSIFICATION	1.1513306784996632E-4	DESIGN
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993236805754505	WITHOUT_CLASSIFICATION	6.763194245494878E-4	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989375559048569	WITHOUT_CLASSIFICATION	0.0010624440951431061	DESIGN
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991075027349181	WITHOUT_CLASSIFICATION	8.924972650819065E-4	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989375559048569	WITHOUT_CLASSIFICATION	0.0010624440951431061	DESIGN
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9998519211372398	WITHOUT_CLASSIFICATION	1.4807886276026801E-4	DESIGN
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995053283392924	WITHOUT_CLASSIFICATION	4.946716607076081E-4	DESIGN
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9943726639707814	WITHOUT_CLASSIFICATION	0.005627336029218605	DESIGN
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9995335637578651	WITHOUT_CLASSIFICATION	4.664362421349045E-4	DESIGN
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9909127153577736	WITHOUT_CLASSIFICATION	0.009087284642226419	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9968728575276903	WITHOUT_CLASSIFICATION	0.0031271424723097315	DESIGN
//" cascade";	WITHOUT_CLASSIFICATION	0.997652930251448	WITHOUT_CLASSIFICATION	0.0023470697485521003	DESIGN
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9993864496824213	WITHOUT_CLASSIFICATION	6.135503175786446E-4	DESIGN
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9995847755364207	WITHOUT_CLASSIFICATION	4.152244635793224E-4	DESIGN
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9991106113225577	WITHOUT_CLASSIFICATION	8.893886774422287E-4	DESIGN
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9991048957320156	WITHOUT_CLASSIFICATION	8.951042679843317E-4	DESIGN
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9992403625905322	WITHOUT_CLASSIFICATION	7.596374094677928E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997108798720529	WITHOUT_CLASSIFICATION	2.891201279471982E-4	DESIGN
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9953500170255618	WITHOUT_CLASSIFICATION	0.0046499829744382345	DESIGN
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9990061942046613	WITHOUT_CLASSIFICATION	9.93805795338697E-4	DESIGN
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.991937110300555	WITHOUT_CLASSIFICATION	0.008062889699445101	DESIGN
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9903673265081013	WITHOUT_CLASSIFICATION	0.009632673491898685	DESIGN
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9990161718279508	WITHOUT_CLASSIFICATION	9.838281720492437E-4	DESIGN
// HHH-2300	WITHOUT_CLASSIFICATION	0.9990683035260378	WITHOUT_CLASSIFICATION	9.31696473962254E-4	DESIGN
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9988731752626056	WITHOUT_CLASSIFICATION	0.0011268247373945313	DESIGN
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994597655246873	WITHOUT_CLASSIFICATION	5.40234475312717E-4	DESIGN
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993777285896832	WITHOUT_CLASSIFICATION	6.222714103167118E-4	DESIGN
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997012424038199	WITHOUT_CLASSIFICATION	2.987575961801819E-4	DESIGN
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995323912248408	WITHOUT_CLASSIFICATION	4.6760877515921763E-4	DESIGN
// not null is implicit	WITHOUT_CLASSIFICATION	0.9980466966364142	WITHOUT_CLASSIFICATION	0.0019533033635858008	DESIGN
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999887399842248	WITHOUT_CLASSIFICATION	1.1260015775260457E-5	DESIGN
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9996980622048557	WITHOUT_CLASSIFICATION	3.0193779514428685E-4	DESIGN
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999995626336924	WITHOUT_CLASSIFICATION	4.3736630761292273E-7	DESIGN
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992734969679892	WITHOUT_CLASSIFICATION	7.265030320108024E-4	DESIGN
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.99923904014697	WITHOUT_CLASSIFICATION	7.609598530301411E-4	DESIGN
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9992885878331237	WITHOUT_CLASSIFICATION	7.114121668763221E-4	DESIGN
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9996975898635868	WITHOUT_CLASSIFICATION	3.0241013641315624E-4	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9655465969440641	WITHOUT_CLASSIFICATION	0.034453403055935916	DESIGN
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9400174311108301	WITHOUT_CLASSIFICATION	0.05998256888916985	DESIGN
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9914284168978896	WITHOUT_CLASSIFICATION	0.008571583102110267	DESIGN
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9980594848314169	WITHOUT_CLASSIFICATION	0.0019405151685830695	DESIGN
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9883380554554446	WITHOUT_CLASSIFICATION	0.01166194454455532	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997108798720529	WITHOUT_CLASSIFICATION	2.891201279471982E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9968728575276903	WITHOUT_CLASSIFICATION	0.0031271424723097315	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9951473993107444	WITHOUT_CLASSIFICATION	0.004852600689255655	DESIGN
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999482061021018	WITHOUT_CLASSIFICATION	5.179389789831788E-5	DESIGN
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9997499066463983	WITHOUT_CLASSIFICATION	2.5009335360178805E-4	DESIGN
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9995445893727888	WITHOUT_CLASSIFICATION	4.5541062721129305E-4	DESIGN
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9986588225833816	WITHOUT_CLASSIFICATION	0.00134117741661841	DESIGN
// function templates	WITHOUT_CLASSIFICATION	0.9998585758596584	WITHOUT_CLASSIFICATION	1.414241403415739E-4	DESIGN
//not null is implicit	WITHOUT_CLASSIFICATION	0.9988721223486113	WITHOUT_CLASSIFICATION	0.0011278776513886253	DESIGN
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999717623136354	WITHOUT_CLASSIFICATION	2.823768636461969E-5	DESIGN
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9995603884005393	WITHOUT_CLASSIFICATION	4.396115994607049E-4	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9992374394547698	WITHOUT_CLASSIFICATION	7.625605452301221E-4	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9992520820975032	WITHOUT_CLASSIFICATION	7.479179024969867E-4	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9991943757353918	WITHOUT_CLASSIFICATION	8.056242646081776E-4	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.999517868220997	WITHOUT_CLASSIFICATION	4.82131779003066E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997108798720529	WITHOUT_CLASSIFICATION	2.891201279471982E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997108798720529	WITHOUT_CLASSIFICATION	2.891201279471982E-4	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9939613784349048	WITHOUT_CLASSIFICATION	0.006038621565095082	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9984848414750903	WITHOUT_CLASSIFICATION	0.0015151585249097222	DESIGN
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9993171482975348	WITHOUT_CLASSIFICATION	6.828517024651599E-4	DESIGN
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9995847755364207	WITHOUT_CLASSIFICATION	4.152244635793224E-4	DESIGN
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9995529165074107	WITHOUT_CLASSIFICATION	4.470834925892807E-4	DESIGN
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9986338423847269	WITHOUT_CLASSIFICATION	0.0013661576152731694	DESIGN
// add new ordered map	WITHOUT_CLASSIFICATION	0.9996982264138102	WITHOUT_CLASSIFICATION	3.017735861897113E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997108798720529	WITHOUT_CLASSIFICATION	2.891201279471982E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9998080243688939	WITHOUT_CLASSIFICATION	1.9197563110604532E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9993353212239029	WITHOUT_CLASSIFICATION	6.646787760970704E-4	DESIGN
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9950195044445576	WITHOUT_CLASSIFICATION	0.00498049555544239	DESIGN
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9994200961879022	WITHOUT_CLASSIFICATION	5.799038120977953E-4	DESIGN
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.997105648085688	WITHOUT_CLASSIFICATION	0.0028943519143118817	DESIGN
// No batch statements	WITHOUT_CLASSIFICATION	0.9999132886434469	WITHOUT_CLASSIFICATION	8.671135655318397E-5	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9442088238777374	WITHOUT_CLASSIFICATION	0.05579117612226258	DESIGN
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9988372342348436	WITHOUT_CLASSIFICATION	0.0011627657651563372	DESIGN
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9990422884227158	WITHOUT_CLASSIFICATION	9.577115772840921E-4	DESIGN
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9989233053526732	WITHOUT_CLASSIFICATION	0.0010766946473267781	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9968728575276903	WITHOUT_CLASSIFICATION	0.0031271424723097315	DESIGN
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9698077016373642	WITHOUT_CLASSIFICATION	0.030192298362635848	DESIGN
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999848740363577	WITHOUT_CLASSIFICATION	1.5125963642290772E-5	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9829436456114787	WITHOUT_CLASSIFICATION	0.017056354388521294	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9968728575276903	WITHOUT_CLASSIFICATION	0.0031271424723097315	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9996555625604745	WITHOUT_CLASSIFICATION	3.4443743952557263E-4	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9998080243688939	WITHOUT_CLASSIFICATION	1.9197563110604532E-4	DESIGN
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9976844413584948	WITHOUT_CLASSIFICATION	0.0023155586415052453	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997108798720529	WITHOUT_CLASSIFICATION	2.891201279471982E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.996545622292098	WITHOUT_CLASSIFICATION	0.003454377707902004	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997108798720529	WITHOUT_CLASSIFICATION	2.891201279471982E-4	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999364324428346	WITHOUT_CLASSIFICATION	6.356755716546884E-5	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9992374394547698	WITHOUT_CLASSIFICATION	7.625605452301221E-4	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9992520820975032	WITHOUT_CLASSIFICATION	7.479179024969867E-4	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9991943757353918	WITHOUT_CLASSIFICATION	8.056242646081776E-4	DESIGN
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.99999430091985	WITHOUT_CLASSIFICATION	5.69908015000424E-6	DESIGN
// add the main query	WITHOUT_CLASSIFICATION	0.9996964282179925	WITHOUT_CLASSIFICATION	3.0357178200746143E-4	DESIGN
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999737239062697	WITHOUT_CLASSIFICATION	2.6276093730219567E-5	DESIGN
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9998376277988713	WITHOUT_CLASSIFICATION	1.623722011286018E-4	DESIGN
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999956859126812	WITHOUT_CLASSIFICATION	4.314087318810462E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997108798720529	WITHOUT_CLASSIFICATION	2.891201279471982E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9968728575276903	WITHOUT_CLASSIFICATION	0.0031271424723097315	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.999517868220997	WITHOUT_CLASSIFICATION	4.82131779003066E-4	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9939613784349048	WITHOUT_CLASSIFICATION	0.006038621565095082	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995992095858688	WITHOUT_CLASSIFICATION	4.0079041413114083E-4	DESIGN
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996127863044656	WITHOUT_CLASSIFICATION	3.872136955343768E-4	DESIGN
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999467965638462	WITHOUT_CLASSIFICATION	5.320343615390279E-5	DESIGN
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.998533286502802	WITHOUT_CLASSIFICATION	0.0014667134971979852	DESIGN
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.998806663800694	WITHOUT_CLASSIFICATION	0.0011933361993059202	DESIGN
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.6819764312363159	DESIGN	0.31802356876368404	WITHOUT_CLASSIFICATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989375559048569	WITHOUT_CLASSIFICATION	0.0010624440951431061	DESIGN
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9983858880153812	WITHOUT_CLASSIFICATION	0.0016141119846188174	DESIGN
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9749003978993472	WITHOUT_CLASSIFICATION	0.02509960210065277	DESIGN
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.973647677513362	WITHOUT_CLASSIFICATION	0.026352322486637967	DESIGN
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9911847133383399	WITHOUT_CLASSIFICATION	0.008815286661660116	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9991140816292988	WITHOUT_CLASSIFICATION	8.85918370701102E-4	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989375559048569	WITHOUT_CLASSIFICATION	0.0010624440951431061	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991219117814609	WITHOUT_CLASSIFICATION	8.780882185390457E-4	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.996252306804824	WITHOUT_CLASSIFICATION	0.0037476931951760757	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9991140816292988	WITHOUT_CLASSIFICATION	8.85918370701102E-4	DESIGN
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9989972600939737	WITHOUT_CLASSIFICATION	0.0010027399060262992	DESIGN
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9987047935666524	WITHOUT_CLASSIFICATION	0.0012952064333475526	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990289381103579	WITHOUT_CLASSIFICATION	9.710618896421598E-4	DESIGN
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989375559048569	WITHOUT_CLASSIFICATION	0.0010624440951431061	DESIGN
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.995621086193511	WITHOUT_CLASSIFICATION	0.00437891380648902	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997108798720529	WITHOUT_CLASSIFICATION	2.891201279471982E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997108798720529	WITHOUT_CLASSIFICATION	2.891201279471982E-4	DESIGN
/*<String>*/	WITHOUT_CLASSIFICATION	0.997688947097063	WITHOUT_CLASSIFICATION	0.002311052902936915	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9922663321486166	WITHOUT_CLASSIFICATION	0.0077336678513834425	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989375559048569	WITHOUT_CLASSIFICATION	0.0010624440951431061	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9655465969440641	WITHOUT_CLASSIFICATION	0.034453403055935916	DESIGN
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9756000126640486	WITHOUT_CLASSIFICATION	0.024399987335951348	DESIGN
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.995394646231612	WITHOUT_CLASSIFICATION	0.004605353768387965	DESIGN
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9998237361960034	WITHOUT_CLASSIFICATION	1.762638039966029E-4	DESIGN
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.998886427185012	WITHOUT_CLASSIFICATION	0.0011135728149880768	DESIGN
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9998391114662553	WITHOUT_CLASSIFICATION	1.60888533744705E-4	DESIGN
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9976266281161472	WITHOUT_CLASSIFICATION	0.002373371883852724	DESIGN
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9995670731127639	WITHOUT_CLASSIFICATION	4.3292688723608374E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9977782340280895	WITHOUT_CLASSIFICATION	0.0022217659719105235	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9998586872898791	WITHOUT_CLASSIFICATION	1.4131271012089887E-4	DESIGN
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9993549094736116	WITHOUT_CLASSIFICATION	6.450905263883768E-4	DESIGN
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9810611874279911	WITHOUT_CLASSIFICATION	0.018938812572008863	DESIGN
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9998978195834998	WITHOUT_CLASSIFICATION	1.0218041650027429E-4	DESIGN
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9998365985359631	WITHOUT_CLASSIFICATION	1.63401464036808E-4	DESIGN
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999740362095975	WITHOUT_CLASSIFICATION	2.596379040247076E-5	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.998946421756123	WITHOUT_CLASSIFICATION	0.001053578243877027	DESIGN
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996654305153296	WITHOUT_CLASSIFICATION	3.34569484670431E-4	DESIGN
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996775920556517	WITHOUT_CLASSIFICATION	3.2240794434834977E-4	DESIGN
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999266033962743	WITHOUT_CLASSIFICATION	7.339660372574939E-5	DESIGN
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9974913808730416	WITHOUT_CLASSIFICATION	0.0025086191269585037	DESIGN
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9977081294122975	WITHOUT_CLASSIFICATION	0.0022918705877024597	DESIGN
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999746404171043	WITHOUT_CLASSIFICATION	2.535958289570525E-4	DESIGN
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998506688640364	WITHOUT_CLASSIFICATION	1.4933113596348195E-4	DESIGN
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997136591880964	WITHOUT_CLASSIFICATION	2.863408119035492E-4	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998150054255303	WITHOUT_CLASSIFICATION	1.84994574469752E-4	DESIGN
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9974077348588919	WITHOUT_CLASSIFICATION	0.0025922651411081467	DESIGN
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9824117370399912	WITHOUT_CLASSIFICATION	0.01758826296000883	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997136591880964	WITHOUT_CLASSIFICATION	2.863408119035492E-4	DESIGN
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9997382391342142	WITHOUT_CLASSIFICATION	2.617608657856802E-4	DESIGN
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999241499259365	WITHOUT_CLASSIFICATION	7.5850074063621E-5	DESIGN
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994536604826033	WITHOUT_CLASSIFICATION	5.463395173966637E-4	DESIGN
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9997812763906546	WITHOUT_CLASSIFICATION	2.187236093453963E-4	DESIGN
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9677568698749188	WITHOUT_CLASSIFICATION	0.03224313012508118	DESIGN
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9987010616912702	WITHOUT_CLASSIFICATION	0.0012989383087298433	DESIGN
// continue loop	WITHOUT_CLASSIFICATION	0.9999292362080832	WITHOUT_CLASSIFICATION	7.076379191685547E-5	DESIGN
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9995262782688299	WITHOUT_CLASSIFICATION	4.7372173117008626E-4	DESIGN
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9995262782688299	WITHOUT_CLASSIFICATION	4.7372173117008626E-4	DESIGN
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999594624391895	WITHOUT_CLASSIFICATION	4.053756081057841E-5	DESIGN
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9997980023168652	WITHOUT_CLASSIFICATION	2.019976831348982E-4	DESIGN
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9948790711903852	WITHOUT_CLASSIFICATION	0.0051209288096147575	DESIGN
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.999962778608507	WITHOUT_CLASSIFICATION	3.722139149304567E-5	DESIGN
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9997462980159851	WITHOUT_CLASSIFICATION	2.5370198401489474E-4	DESIGN
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9994539938283441	WITHOUT_CLASSIFICATION	5.460061716559774E-4	DESIGN
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9990849579512618	WITHOUT_CLASSIFICATION	9.150420487382295E-4	DESIGN
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9997024276967881	WITHOUT_CLASSIFICATION	2.9757230321190444E-4	DESIGN
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9981454724950642	WITHOUT_CLASSIFICATION	0.0018545275049358363	DESIGN
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999726332708724	WITHOUT_CLASSIFICATION	2.736672912759822E-5	DESIGN
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999518736174224	WITHOUT_CLASSIFICATION	4.812638257760089E-5	DESIGN
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9998672497215874	WITHOUT_CLASSIFICATION	1.327502784126694E-4	DESIGN
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9994250043836965	WITHOUT_CLASSIFICATION	5.749956163034016E-4	DESIGN
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9907907031794648	WITHOUT_CLASSIFICATION	0.009209296820535257	DESIGN
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9997035904029268	WITHOUT_CLASSIFICATION	2.964095970732571E-4	DESIGN
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9591944016414893	WITHOUT_CLASSIFICATION	0.04080559835851069	DESIGN
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9995551145936168	WITHOUT_CLASSIFICATION	4.448854063832194E-4	DESIGN
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9982362677135097	WITHOUT_CLASSIFICATION	0.0017637322864902931	DESIGN
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.998501927230963	WITHOUT_CLASSIFICATION	0.001498072769037065	DESIGN
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9993636720738005	WITHOUT_CLASSIFICATION	6.363279261994761E-4	DESIGN
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9996848355988206	WITHOUT_CLASSIFICATION	3.1516440117944605E-4	DESIGN
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9996810535541791	WITHOUT_CLASSIFICATION	3.1894644582088316E-4	DESIGN
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999438940728382	WITHOUT_CLASSIFICATION	5.6105927161736775E-5	DESIGN
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999214002716704	WITHOUT_CLASSIFICATION	7.859972832967047E-5	DESIGN
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9997829007598437	WITHOUT_CLASSIFICATION	2.1709924015626936E-4	DESIGN
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9998481518341227	WITHOUT_CLASSIFICATION	1.5184816587738304E-4	DESIGN
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9996809475457296	WITHOUT_CLASSIFICATION	3.190524542705033E-4	DESIGN
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9988998073200277	WITHOUT_CLASSIFICATION	0.001100192679972327	DESIGN
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.849704462140892	WITHOUT_CLASSIFICATION	0.150295537859108	DESIGN
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9992826158003435	WITHOUT_CLASSIFICATION	7.173841996565081E-4	DESIGN
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9996978573268739	WITHOUT_CLASSIFICATION	3.0214267312616915E-4	DESIGN
//unwrap the object	WITHOUT_CLASSIFICATION	0.9971361299249586	WITHOUT_CLASSIFICATION	0.002863870075041381	DESIGN
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9997629329730464	WITHOUT_CLASSIFICATION	2.3706702695350723E-4	DESIGN
//return the proxied object	WITHOUT_CLASSIFICATION	0.9962100870154231	WITHOUT_CLASSIFICATION	0.0037899129845770183	DESIGN
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.999464517154027	WITHOUT_CLASSIFICATION	5.354828459730251E-4	DESIGN
// early exit...	WITHOUT_CLASSIFICATION	0.9994778096614557	WITHOUT_CLASSIFICATION	5.221903385442089E-4	DESIGN
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9965376587891183	WITHOUT_CLASSIFICATION	0.0034623412108817234	DESIGN
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.996899959073066	WITHOUT_CLASSIFICATION	0.0031000409269340097	DESIGN
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.7808828976995568	WITHOUT_CLASSIFICATION	0.21911710230044332	DESIGN
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999928838353483	WITHOUT_CLASSIFICATION	7.116164651546222E-6	DESIGN
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9864181979916696	WITHOUT_CLASSIFICATION	0.013581802008330424	DESIGN
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9995847755364207	WITHOUT_CLASSIFICATION	4.152244635793224E-4	DESIGN
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9995847755364207	WITHOUT_CLASSIFICATION	4.152244635793224E-4	DESIGN
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9912869303819157	WITHOUT_CLASSIFICATION	0.008713069618084344	DESIGN
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9979390393022733	WITHOUT_CLASSIFICATION	0.0020609606977267463	DESIGN
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9930974765311851	WITHOUT_CLASSIFICATION	0.0069025234688149415	DESIGN
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999937660169752	WITHOUT_CLASSIFICATION	6.233983024789806E-6	DESIGN
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9998710930685766	WITHOUT_CLASSIFICATION	1.28906931423329E-4	DESIGN
//bad cast	WITHOUT_CLASSIFICATION	0.998682743729588	WITHOUT_CLASSIFICATION	0.0013172562704119094	DESIGN
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.997919116460178	WITHOUT_CLASSIFICATION	0.002080883539822141	DESIGN
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9813614496310868	WITHOUT_CLASSIFICATION	0.0186385503689132	DESIGN
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999560065713402	WITHOUT_CLASSIFICATION	4.399342865982714E-5	DESIGN
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9957706126124042	WITHOUT_CLASSIFICATION	0.004229387387595816	DESIGN
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9977081294122975	WITHOUT_CLASSIFICATION	0.0022918705877024597	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9995193002866677	WITHOUT_CLASSIFICATION	4.8069971333241615E-4	DESIGN
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9898393283951864	WITHOUT_CLASSIFICATION	0.01016067160481365	DESIGN
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.999553114959586	WITHOUT_CLASSIFICATION	4.468850404141035E-4	DESIGN
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9994333320915777	WITHOUT_CLASSIFICATION	5.66667908422279E-4	DESIGN
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9964923935967887	WITHOUT_CLASSIFICATION	0.0035076064032113622	DESIGN
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9992670162549692	WITHOUT_CLASSIFICATION	7.32983745030871E-4	DESIGN
//take a snapshot	WITHOUT_CLASSIFICATION	0.9963349059771303	WITHOUT_CLASSIFICATION	0.003665094022869696	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9991985050472816	WITHOUT_CLASSIFICATION	8.014949527184095E-4	DESIGN
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9993316312994712	WITHOUT_CLASSIFICATION	6.683687005288202E-4	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9988003522410352	WITHOUT_CLASSIFICATION	0.0011996477589647997	DESIGN
// We've been here before	WITHOUT_CLASSIFICATION	0.9931408732779987	WITHOUT_CLASSIFICATION	0.006859126722001397	DESIGN
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999565405868732	WITHOUT_CLASSIFICATION	4.345941312678879E-5	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9988003522410352	WITHOUT_CLASSIFICATION	0.0011996477589647997	DESIGN
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999124160881168	WITHOUT_CLASSIFICATION	8.758391188315394E-5	DESIGN
// or its key changed	WITHOUT_CLASSIFICATION	0.999991975669126	WITHOUT_CLASSIFICATION	8.024330873894696E-6	DESIGN
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.999247652322494	WITHOUT_CLASSIFICATION	7.523476775060031E-4	DESIGN
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9957313891018109	WITHOUT_CLASSIFICATION	0.0042686108981890465	DESIGN
// force initialize!	WITHOUT_CLASSIFICATION	0.9979355442761778	WITHOUT_CLASSIFICATION	0.0020644557238222224	DESIGN
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999980598328914	WITHOUT_CLASSIFICATION	1.9401671085964435E-6	DESIGN
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9985771332670312	WITHOUT_CLASSIFICATION	0.0014228667329688155	DESIGN
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.99975825561978	WITHOUT_CLASSIFICATION	2.417443802199943E-4	DESIGN
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9974123290068662	WITHOUT_CLASSIFICATION	0.0025876709931339703	DESIGN
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9968320194886934	WITHOUT_CLASSIFICATION	0.0031679805113065925	DESIGN
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999784085601328	WITHOUT_CLASSIFICATION	2.1591439867281498E-5	DESIGN
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.999910439326025	WITHOUT_CLASSIFICATION	8.95606739750418E-5	DESIGN
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9888938897442355	WITHOUT_CLASSIFICATION	0.011106110255764471	DESIGN
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9998464796870294	WITHOUT_CLASSIFICATION	1.5352031297053098E-4	DESIGN
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9997273694886581	WITHOUT_CLASSIFICATION	2.726305113418921E-4	DESIGN
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.850681090930292	WITHOUT_CLASSIFICATION	0.14931890906970807	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9977081294122975	WITHOUT_CLASSIFICATION	0.0022918705877024597	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9977081294122975	WITHOUT_CLASSIFICATION	0.0022918705877024597	DESIGN
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999541732454768	WITHOUT_CLASSIFICATION	4.5826754523362434E-5	DESIGN
//optimization	WITHOUT_CLASSIFICATION	0.9975898767217453	WITHOUT_CLASSIFICATION	0.0024101232782547037	DESIGN
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9977081294122975	WITHOUT_CLASSIFICATION	0.0022918705877024597	DESIGN
//re-snapshot	WITHOUT_CLASSIFICATION	0.9975898767217453	WITHOUT_CLASSIFICATION	0.0024101232782547037	DESIGN
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9995751633147422	WITHOUT_CLASSIFICATION	4.24836685257743E-4	DESIGN
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9968679495155803	WITHOUT_CLASSIFICATION	0.0031320504844197117	DESIGN
//memory optimization	WITHOUT_CLASSIFICATION	0.9989254952153744	WITHOUT_CLASSIFICATION	0.001074504784625592	DESIGN
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9987655947310123	WITHOUT_CLASSIFICATION	0.0012344052689876768	DESIGN
// copied from Session:	WITHOUT_CLASSIFICATION	0.9884129723738956	WITHOUT_CLASSIFICATION	0.011587027626104385	DESIGN
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9992760040650023	WITHOUT_CLASSIFICATION	7.239959349976585E-4	DESIGN
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.999781998721546	WITHOUT_CLASSIFICATION	2.1800127845385717E-4	DESIGN
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999993079367355	WITHOUT_CLASSIFICATION	6.920632645692125E-7	DESIGN
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9995242291967059	WITHOUT_CLASSIFICATION	4.75770803294116E-4	DESIGN
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.981650584128546	WITHOUT_CLASSIFICATION	0.018349415871453986	DESIGN
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999033877854245	WITHOUT_CLASSIFICATION	9.66122145755107E-5	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.998946421756123	WITHOUT_CLASSIFICATION	0.001053578243877027	DESIGN
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9988694176707688	WITHOUT_CLASSIFICATION	0.0011305823292311842	DESIGN
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9997213354229931	WITHOUT_CLASSIFICATION	2.786645770068431E-4	DESIGN
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9873296165147685	WITHOUT_CLASSIFICATION	0.012670383485231546	DESIGN
//do the test	WITHOUT_CLASSIFICATION	0.999924180685917	WITHOUT_CLASSIFICATION	7.581931408299586E-5	DESIGN
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999740742474912	WITHOUT_CLASSIFICATION	2.5925752508910595E-5	DESIGN
//unwrap it	WITHOUT_CLASSIFICATION	0.9976227957456942	WITHOUT_CLASSIFICATION	0.0023772042543057552	DESIGN
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9136971855672926	WITHOUT_CLASSIFICATION	0.08630281443270732	DESIGN
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999657380463126	WITHOUT_CLASSIFICATION	3.426195368739387E-5	DESIGN
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9905588618332684	WITHOUT_CLASSIFICATION	0.00944113816673177	DESIGN
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.980051291858327	WITHOUT_CLASSIFICATION	0.01994870814167303	DESIGN
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.999926070985625	WITHOUT_CLASSIFICATION	7.392901437493766E-5	DESIGN
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.5758967369351524	WITHOUT_CLASSIFICATION	0.4241032630648476	DESIGN
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9995768764704039	WITHOUT_CLASSIFICATION	4.231235295959656E-4	DESIGN
//int count = 0;	WITHOUT_CLASSIFICATION	0.9997194431282211	WITHOUT_CLASSIFICATION	2.805568717788517E-4	DESIGN
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999861092905252	WITHOUT_CLASSIFICATION	1.3890709474664438E-5	DESIGN
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9990532151671893	WITHOUT_CLASSIFICATION	9.467848328107635E-4	DESIGN
//count++;	WITHOUT_CLASSIFICATION	0.9991897437067582	WITHOUT_CLASSIFICATION	8.102562932417271E-4	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999222484135996	WITHOUT_CLASSIFICATION	7.775158640053698E-5	DESIGN
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9997105075743947	WITHOUT_CLASSIFICATION	2.8949242560533957E-4	DESIGN
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9703740637124839	WITHOUT_CLASSIFICATION	0.029625936287516128	DESIGN
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999631234832194	WITHOUT_CLASSIFICATION	3.687651678055748E-5	DESIGN
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9998339198576689	WITHOUT_CLASSIFICATION	1.6608014233104548E-4	DESIGN
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9987010942974197	WITHOUT_CLASSIFICATION	0.0012989057025803092	DESIGN
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.999982104234423	WITHOUT_CLASSIFICATION	1.7895765576994537E-5	DESIGN
// initialize this collection	WITHOUT_CLASSIFICATION	0.9908853553045717	WITHOUT_CLASSIFICATION	0.009114644695428416	DESIGN
// create one	WITHOUT_CLASSIFICATION	0.999312924914004	WITHOUT_CLASSIFICATION	6.870750859959242E-4	DESIGN
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9951154042179776	WITHOUT_CLASSIFICATION	0.004884595782022413	DESIGN
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999345562310045	WITHOUT_CLASSIFICATION	6.5443768995566E-5	DESIGN
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.995920880816391	WITHOUT_CLASSIFICATION	0.004079119183609141	DESIGN
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9982355155519499	WITHOUT_CLASSIFICATION	0.001764484448050109	DESIGN
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997417344727794	WITHOUT_CLASSIFICATION	2.5826552722059415E-4	DESIGN
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996773201614106	WITHOUT_CLASSIFICATION	3.226798385893946E-4	DESIGN
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993433789719243	WITHOUT_CLASSIFICATION	6.566210280758118E-4	DESIGN
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9877843857505845	WITHOUT_CLASSIFICATION	0.012215614249415516	DESIGN
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9992794428859033	WITHOUT_CLASSIFICATION	7.20557114096726E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9977782340280895	WITHOUT_CLASSIFICATION	0.0022217659719105235	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9977782340280895	WITHOUT_CLASSIFICATION	0.0022217659719105235	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999997312401481	WITHOUT_CLASSIFICATION	2.687598518898827E-6	DESIGN
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9997756132841671	WITHOUT_CLASSIFICATION	2.243867158329777E-4	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9982397764456714	WITHOUT_CLASSIFICATION	0.0017602235543285683	DESIGN
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989939641925647	WITHOUT_CLASSIFICATION	0.0010060358074353024	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9982397764456714	WITHOUT_CLASSIFICATION	0.0017602235543285683	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9993260648447391	WITHOUT_CLASSIFICATION	6.739351552609937E-4	DESIGN
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9976163269969435	WITHOUT_CLASSIFICATION	0.0023836730030565158	DESIGN
// named parameter	WITHOUT_CLASSIFICATION	0.9978701025374369	WITHOUT_CLASSIFICATION	0.0021298974625631557	DESIGN
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9918900963093986	WITHOUT_CLASSIFICATION	0.008109903690601274	DESIGN
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9917877615232997	WITHOUT_CLASSIFICATION	0.008212238476700287	DESIGN
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9983729483674816	WITHOUT_CLASSIFICATION	0.0016270516325184064	DESIGN
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9991423090102295	WITHOUT_CLASSIFICATION	8.576909897705639E-4	DESIGN
// perform the actual work	WITHOUT_CLASSIFICATION	0.998715302377501	WITHOUT_CLASSIFICATION	0.0012846976224990545	DESIGN
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999862772914545	WITHOUT_CLASSIFICATION	1.3722708545537218E-5	DESIGN
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9988128040930385	WITHOUT_CLASSIFICATION	0.0011871959069614713	DESIGN
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9987399314747536	WITHOUT_CLASSIFICATION	0.0012600685252464067	DESIGN
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9781651874262227	WITHOUT_CLASSIFICATION	0.021834812573777247	DESIGN
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9991292518074684	WITHOUT_CLASSIFICATION	8.707481925317866E-4	DESIGN
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.804171072011744	WITHOUT_CLASSIFICATION	0.19582892798825602	DESIGN
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9727044289896201	WITHOUT_CLASSIFICATION	0.027295571010379854	DESIGN
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9958192558603096	WITHOUT_CLASSIFICATION	0.004180744139690409	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9996222160265587	WITHOUT_CLASSIFICATION	3.777839734413514E-4	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9996222160265587	WITHOUT_CLASSIFICATION	3.777839734413514E-4	DESIGN
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9955252650330603	WITHOUT_CLASSIFICATION	0.00447473496693973	DESIGN
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.999189782239031	WITHOUT_CLASSIFICATION	8.102177609690054E-4	DESIGN
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9996229003454664	WITHOUT_CLASSIFICATION	3.770996545336161E-4	DESIGN
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999793711164767	WITHOUT_CLASSIFICATION	2.0628883523259118E-5	DESIGN
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9993389224375423	WITHOUT_CLASSIFICATION	6.61077562457738E-4	DESIGN
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9760205622069759	WITHOUT_CLASSIFICATION	0.023979437793024222	DESIGN
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9464536545596816	WITHOUT_CLASSIFICATION	0.053546345440318534	DESIGN
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9982635903564986	WITHOUT_CLASSIFICATION	0.0017364096435014114	DESIGN
// grab its current state	WITHOUT_CLASSIFICATION	0.9999416123615481	WITHOUT_CLASSIFICATION	5.8387638451889794E-5	DESIGN
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9997114234673176	WITHOUT_CLASSIFICATION	2.885765326824775E-4	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9998943983339933	WITHOUT_CLASSIFICATION	1.056016660067934E-4	DESIGN
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.999944267693736	WITHOUT_CLASSIFICATION	5.573230626398768E-5	DESIGN
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999445383780461	WITHOUT_CLASSIFICATION	5.546162195398926E-5	DESIGN
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9998770316330368	WITHOUT_CLASSIFICATION	1.2296836696320472E-4	DESIGN
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9998892577946832	WITHOUT_CLASSIFICATION	1.1074220531691945E-4	DESIGN
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9978192227027561	WITHOUT_CLASSIFICATION	0.002180777297243849	DESIGN
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9949786360316192	WITHOUT_CLASSIFICATION	0.005021363968380737	DESIGN
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.969528615832716	WITHOUT_CLASSIFICATION	0.030471384167284076	DESIGN
//use the current version	WITHOUT_CLASSIFICATION	0.9998412779440782	WITHOUT_CLASSIFICATION	1.5872205592185038E-4	DESIGN
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999668111702367	WITHOUT_CLASSIFICATION	3.318882976338062E-5	DESIGN
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9995085916967845	WITHOUT_CLASSIFICATION	4.914083032154582E-4	DESIGN
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.999996006801729	WITHOUT_CLASSIFICATION	3.99319827106649E-6	DESIGN
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.999998029315734	WITHOUT_CLASSIFICATION	1.970684266108519E-6	DESIGN
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9472094022686268	WITHOUT_CLASSIFICATION	0.05279059773137325	DESIGN
//even process null collections	WITHOUT_CLASSIFICATION	0.9998453191307193	WITHOUT_CLASSIFICATION	1.54680869280763E-4	DESIGN
// get the id from the object	WITHOUT_CLASSIFICATION	0.9986239532702648	WITHOUT_CLASSIFICATION	0.0013760467297351932	DESIGN
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9989107573276366	WITHOUT_CLASSIFICATION	0.0010892426723634536	DESIGN
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9994493475995377	WITHOUT_CLASSIFICATION	5.506524004622642E-4	DESIGN
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9961421553291953	WITHOUT_CLASSIFICATION	0.003857844670804812	DESIGN
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9988213464710436	WITHOUT_CLASSIFICATION	0.0011786535289563113	DESIGN
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9989512163367488	WITHOUT_CLASSIFICATION	0.0010487836632511825	DESIGN
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9997007178598102	WITHOUT_CLASSIFICATION	2.9928214018985034E-4	DESIGN
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.99974001799554	WITHOUT_CLASSIFICATION	2.5998200446001956E-4	DESIGN
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.989153967439966	WITHOUT_CLASSIFICATION	0.010846032560034111	DESIGN
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9984770667086151	WITHOUT_CLASSIFICATION	0.0015229332913848466	DESIGN
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9993843967834617	WITHOUT_CLASSIFICATION	6.15603216538223E-4	DESIGN
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999678990203983	WITHOUT_CLASSIFICATION	3.2100979601727204E-5	DESIGN
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9968803751940327	WITHOUT_CLASSIFICATION	0.0031196248059673485	DESIGN
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9998028495761282	WITHOUT_CLASSIFICATION	1.9715042387193895E-4	DESIGN
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9998807312584096	WITHOUT_CLASSIFICATION	1.1926874159041051E-4	DESIGN
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999238889132851	WITHOUT_CLASSIFICATION	7.611108671485306E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993698697889526	WITHOUT_CLASSIFICATION	6.301302110473779E-4	DESIGN
//some statistics	WITHOUT_CLASSIFICATION	0.9984141223508328	WITHOUT_CLASSIFICATION	0.0015858776491671502	DESIGN
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9972329118926782	WITHOUT_CLASSIFICATION	0.0027670881073219417	DESIGN
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999792085170733	WITHOUT_CLASSIFICATION	2.0791482926669135E-5	DESIGN
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.942837332610438	WITHOUT_CLASSIFICATION	0.057162667389561925	DESIGN
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9689021162104037	WITHOUT_CLASSIFICATION	0.031097883789596326	DESIGN
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999821054492981	WITHOUT_CLASSIFICATION	1.7894550701944616E-5	DESIGN
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.999524217974143	WITHOUT_CLASSIFICATION	4.757820258569777E-4	DESIGN
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9662277548384735	WITHOUT_CLASSIFICATION	0.0337722451615266	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993698697889526	WITHOUT_CLASSIFICATION	6.301302110473779E-4	DESIGN
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9996446028466455	WITHOUT_CLASSIFICATION	3.5539715335454084E-4	DESIGN
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9930318070609235	WITHOUT_CLASSIFICATION	0.006968192939076503	DESIGN
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9995247632035238	WITHOUT_CLASSIFICATION	4.7523679647621026E-4	DESIGN
//get a snapshot	WITHOUT_CLASSIFICATION	0.9978288064391073	WITHOUT_CLASSIFICATION	0.002171193560892765	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9996555625604745	WITHOUT_CLASSIFICATION	3.4443743952557263E-4	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9996555625604745	WITHOUT_CLASSIFICATION	3.4443743952557263E-4	DESIGN
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999885704133417	WITHOUT_CLASSIFICATION	1.1429586658289578E-5	DESIGN
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9990683035260378	WITHOUT_CLASSIFICATION	9.31696473962254E-4	DESIGN
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9985864488100328	WITHOUT_CLASSIFICATION	0.0014135511899672128	DESIGN
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9998174069469239	WITHOUT_CLASSIFICATION	1.8259305307615978E-4	DESIGN
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999152045036814	WITHOUT_CLASSIFICATION	8.479549631857698E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9997693115051272	WITHOUT_CLASSIFICATION	2.3068849487278126E-4	DESIGN
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9992484241831938	WITHOUT_CLASSIFICATION	7.51575816806234E-4	DESIGN
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9843107531818921	WITHOUT_CLASSIFICATION	0.015689246818107877	DESIGN
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9998525207313647	WITHOUT_CLASSIFICATION	1.474792686353096E-4	DESIGN
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9998520037684469	WITHOUT_CLASSIFICATION	1.4799623155313467E-4	DESIGN
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9998787835530638	WITHOUT_CLASSIFICATION	1.2121644693624282E-4	DESIGN
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9933658367072402	WITHOUT_CLASSIFICATION	0.00663416329275975	DESIGN
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9991018685594242	WITHOUT_CLASSIFICATION	8.981314405758596E-4	DESIGN
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9922002163611778	WITHOUT_CLASSIFICATION	0.007799783638822164	DESIGN
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.8028990629597544	WITHOUT_CLASSIFICATION	0.1971009370402456	DESIGN
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9870960194367774	WITHOUT_CLASSIFICATION	0.01290398056322271	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9987446591702985	WITHOUT_CLASSIFICATION	0.001255340829701496	DESIGN
//cachedState,	WITHOUT_CLASSIFICATION	0.9975898767217453	WITHOUT_CLASSIFICATION	0.0024101232782547037	DESIGN
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9976397596083908	WITHOUT_CLASSIFICATION	0.0023602403916092984	DESIGN
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9978461401459977	WITHOUT_CLASSIFICATION	0.002153859854002235	DESIGN
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9927536340238509	WITHOUT_CLASSIFICATION	0.007246365976149113	DESIGN
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9993289732107297	WITHOUT_CLASSIFICATION	6.710267892703368E-4	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9975898767217453	WITHOUT_CLASSIFICATION	0.0024101232782547037	DESIGN
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9992308820705077	WITHOUT_CLASSIFICATION	7.691179294922403E-4	DESIGN
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.999912783871886	WITHOUT_CLASSIFICATION	8.721612811404453E-5	DESIGN
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.797143063065295	WITHOUT_CLASSIFICATION	0.20285693693470497	DESIGN
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999297906458985	WITHOUT_CLASSIFICATION	7.020935410146793E-5	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9975898767217453	WITHOUT_CLASSIFICATION	0.0024101232782547037	DESIGN
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.999380007117806	WITHOUT_CLASSIFICATION	6.199928821939846E-4	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9975898767217453	WITHOUT_CLASSIFICATION	0.0024101232782547037	DESIGN
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9833920191400515	WITHOUT_CLASSIFICATION	0.01660798085994843	DESIGN
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999860497039961	WITHOUT_CLASSIFICATION	1.3950296003906526E-5	DESIGN
//DELETED	WITHOUT_CLASSIFICATION	0.9991897437067582	WITHOUT_CLASSIFICATION	8.102562932417271E-4	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9975898767217453	WITHOUT_CLASSIFICATION	0.0024101232782547037	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999463452212115	WITHOUT_CLASSIFICATION	5.365477878849043E-5	DESIGN
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.8660269406352793	WITHOUT_CLASSIFICATION	0.13397305936472068	DESIGN
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9526364048870231	WITHOUT_CLASSIFICATION	0.047363595112976956	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.999944500193071	WITHOUT_CLASSIFICATION	5.5499806928978726E-5	DESIGN
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9998859529778735	WITHOUT_CLASSIFICATION	1.1404702212645654E-4	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9975898767217453	WITHOUT_CLASSIFICATION	0.0024101232782547037	DESIGN
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9991197187052755	WITHOUT_CLASSIFICATION	8.802812947244081E-4	DESIGN
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.999934710872014	WITHOUT_CLASSIFICATION	6.528912798605126E-5	DESIGN
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9867913134554971	WITHOUT_CLASSIFICATION	0.013208686544502888	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9975898767217453	WITHOUT_CLASSIFICATION	0.0024101232782547037	DESIGN
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9966598932985503	WITHOUT_CLASSIFICATION	0.003340106701449564	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9998943983339933	WITHOUT_CLASSIFICATION	1.056016660067934E-4	DESIGN
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.999274855459861	WITHOUT_CLASSIFICATION	7.251445401391752E-4	DESIGN
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9976266281161472	WITHOUT_CLASSIFICATION	0.002373371883852724	DESIGN
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.999875934875393	WITHOUT_CLASSIFICATION	1.2406512460703622E-4	DESIGN
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9965560653327986	WITHOUT_CLASSIFICATION	0.003443934667201281	DESIGN
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999772778876022	WITHOUT_CLASSIFICATION	2.2722112397868045E-5	DESIGN
// the object is persistent	WITHOUT_CLASSIFICATION	0.9992924944462266	WITHOUT_CLASSIFICATION	7.075055537733904E-4	DESIGN
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999269666715149	WITHOUT_CLASSIFICATION	7.30333284851474E-5	DESIGN
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.99989049355957	WITHOUT_CLASSIFICATION	1.0950644042997067E-4	DESIGN
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9977081294122975	WITHOUT_CLASSIFICATION	0.0022918705877024597	DESIGN
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9997745027686259	WITHOUT_CLASSIFICATION	2.2549723137399395E-4	DESIGN
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9975898767217453	WITHOUT_CLASSIFICATION	0.0024101232782547037	DESIGN
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9970561137004662	WITHOUT_CLASSIFICATION	0.0029438862995338445	DESIGN
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9977951580011755	WITHOUT_CLASSIFICATION	0.002204841998824572	DESIGN
// eat it and try next	WITHOUT_CLASSIFICATION	0.9943052657925963	WITHOUT_CLASSIFICATION	0.005694734207403697	DESIGN
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.999444649010094	WITHOUT_CLASSIFICATION	5.553509899060788E-4	DESIGN
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9992053601375845	WITHOUT_CLASSIFICATION	7.94639862415413E-4	DESIGN
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.998682340676085	WITHOUT_CLASSIFICATION	0.0013176593239151227	DESIGN
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9996448642882605	WITHOUT_CLASSIFICATION	3.5513571173947754E-4	DESIGN
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9996488511115564	WITHOUT_CLASSIFICATION	3.5114888844352493E-4	DESIGN
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9985793336848222	WITHOUT_CLASSIFICATION	0.0014206663151777386	DESIGN
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.998533286502802	WITHOUT_CLASSIFICATION	0.0014667134971979852	DESIGN
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.999494061201144	WITHOUT_CLASSIFICATION	5.059387988559346E-4	DESIGN
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9974094852777199	WITHOUT_CLASSIFICATION	0.002590514722280205	DESIGN
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9989911859060429	WITHOUT_CLASSIFICATION	0.0010088140939571203	DESIGN
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9991266879113964	WITHOUT_CLASSIFICATION	8.733120886036382E-4	DESIGN
// Note this!!	WITHOUT_CLASSIFICATION	0.9997321382180332	WITHOUT_CLASSIFICATION	2.678617819667988E-4	DESIGN
// Error message constants.	WITHOUT_CLASSIFICATION	0.9994164573789842	WITHOUT_CLASSIFICATION	5.835426210158592E-4	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984763570705601	WITHOUT_CLASSIFICATION	0.0015236429294398285	DESIGN
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983057624459181	WITHOUT_CLASSIFICATION	0.0016942375540819363	DESIGN
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9919476160630618	WITHOUT_CLASSIFICATION	0.008052383936938107	DESIGN
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999578430124182	WITHOUT_CLASSIFICATION	4.2156987581835294E-5	DESIGN
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9976469801557547	WITHOUT_CLASSIFICATION	0.002353019844245274	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9995046228578639	WITHOUT_CLASSIFICATION	4.953771421361177E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9995046228578639	WITHOUT_CLASSIFICATION	4.953771421361177E-4	DESIGN
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9977868593885445	WITHOUT_CLASSIFICATION	0.002213140611455519	DESIGN
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9995925590867238	WITHOUT_CLASSIFICATION	4.0744091327610363E-4	DESIGN
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999590869301612	WITHOUT_CLASSIFICATION	4.091306983872991E-5	DESIGN
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.999923000738241	WITHOUT_CLASSIFICATION	7.699926175900679E-5	DESIGN
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.99969288845547	WITHOUT_CLASSIFICATION	3.0711154452996663E-4	DESIGN
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9967164244188776	WITHOUT_CLASSIFICATION	0.0032835755811222796	DESIGN
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9976690463590699	WITHOUT_CLASSIFICATION	0.002330953640930011	DESIGN
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999768049782488	WITHOUT_CLASSIFICATION	2.319502175115104E-5	DESIGN
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9995093264321174	WITHOUT_CLASSIFICATION	4.90673567882548E-4	DESIGN
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999134901551652	WITHOUT_CLASSIFICATION	8.65098448348184E-5	DESIGN
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.999859095388168	WITHOUT_CLASSIFICATION	1.4090461183198267E-4	DESIGN
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999834333747538	WITHOUT_CLASSIFICATION	1.6566625246174713E-5	DESIGN
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.999646634630615	WITHOUT_CLASSIFICATION	3.5336536938507685E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9995046228578639	WITHOUT_CLASSIFICATION	4.953771421361177E-4	DESIGN
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9985178432237304	WITHOUT_CLASSIFICATION	0.001482156776269557	DESIGN
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9950696092662102	WITHOUT_CLASSIFICATION	0.0049303907337897605	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9652936781829975	WITHOUT_CLASSIFICATION	0.03470632181700259	DESIGN
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9980933488529455	WITHOUT_CLASSIFICATION	0.0019066511470544891	DESIGN
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999231373858704	WITHOUT_CLASSIFICATION	7.686261412972996E-5	DESIGN
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9997152371923875	WITHOUT_CLASSIFICATION	2.847628076124991E-4	DESIGN
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9998943907542924	WITHOUT_CLASSIFICATION	1.0560924570762501E-4	DESIGN
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9991866402982467	WITHOUT_CLASSIFICATION	8.133597017533409E-4	DESIGN
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9994136993025883	WITHOUT_CLASSIFICATION	5.863006974117366E-4	DESIGN
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9909616261923118	WITHOUT_CLASSIFICATION	0.009038373807688311	DESIGN
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9990253040171535	WITHOUT_CLASSIFICATION	9.746959828464897E-4	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984763570705601	WITHOUT_CLASSIFICATION	0.0015236429294398285	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9995046228578639	WITHOUT_CLASSIFICATION	4.953771421361177E-4	DESIGN
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9998533570583459	WITHOUT_CLASSIFICATION	1.466429416541306E-4	DESIGN
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9989465726613125	WITHOUT_CLASSIFICATION	0.0010534273386874147	DESIGN
// switch	WITHOUT_CLASSIFICATION	0.9998195755063926	WITHOUT_CLASSIFICATION	1.804244936075698E-4	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9989144750011479	WITHOUT_CLASSIFICATION	0.0010855249988520796	DESIGN
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9944699683439211	WITHOUT_CLASSIFICATION	0.005530031656078898	DESIGN
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9989670522219438	WITHOUT_CLASSIFICATION	0.0010329477780562331	DESIGN
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988783746149688	WITHOUT_CLASSIFICATION	0.001121625385031197	DESIGN
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999713088713077	WITHOUT_CLASSIFICATION	2.8691128692198957E-5	DESIGN
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999718637220928	WITHOUT_CLASSIFICATION	2.813627790725985E-5	DESIGN
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9995082230989893	WITHOUT_CLASSIFICATION	4.917769010106889E-4	DESIGN
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9997829744546891	WITHOUT_CLASSIFICATION	2.1702554531091115E-4	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.99855222462506	WITHOUT_CLASSIFICATION	0.0014477753749400292	DESIGN
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9991653775685491	WITHOUT_CLASSIFICATION	8.346224314510074E-4	DESIGN
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9984328002559671	WITHOUT_CLASSIFICATION	0.0015671997440327567	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9993260648447391	WITHOUT_CLASSIFICATION	6.739351552609937E-4	DESIGN
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9998867853630048	WITHOUT_CLASSIFICATION	1.1321463699517863E-4	DESIGN
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9997810724989404	WITHOUT_CLASSIFICATION	2.1892750105962126E-4	DESIGN
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9992673117922436	WITHOUT_CLASSIFICATION	7.32688207756462E-4	DESIGN
// all clear	WITHOUT_CLASSIFICATION	0.9996696563455415	WITHOUT_CLASSIFICATION	3.303436544584523E-4	DESIGN
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999475797870472	WITHOUT_CLASSIFICATION	5.242021295280184E-5	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9992384043150861	WITHOUT_CLASSIFICATION	7.61595684913944E-4	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9992384043150861	WITHOUT_CLASSIFICATION	7.61595684913944E-4	DESIGN
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999533250691156	WITHOUT_CLASSIFICATION	4.667493088450149E-5	DESIGN
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9979110116046759	WITHOUT_CLASSIFICATION	0.0020889883953240274	DESIGN
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.999958820046763	WITHOUT_CLASSIFICATION	4.1179953237049326E-5	DESIGN
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9896647802808052	WITHOUT_CLASSIFICATION	0.01033521971919472	DESIGN
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.999848353309156	WITHOUT_CLASSIFICATION	1.5164669084402114E-4	DESIGN
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999935256408273	WITHOUT_CLASSIFICATION	6.4743591727110595E-6	DESIGN
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9985722799225992	WITHOUT_CLASSIFICATION	0.0014277200774008368	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9996758176308079	WITHOUT_CLASSIFICATION	3.2418236919205714E-4	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9996758176308079	WITHOUT_CLASSIFICATION	3.2418236919205714E-4	DESIGN
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9995933973914771	WITHOUT_CLASSIFICATION	4.0660260852293993E-4	DESIGN
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9995332932927732	WITHOUT_CLASSIFICATION	4.667067072268422E-4	DESIGN
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999348359437176	WITHOUT_CLASSIFICATION	6.516405628244562E-5	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9996056562327335	WITHOUT_CLASSIFICATION	3.943437672666391E-4	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9996056562327335	WITHOUT_CLASSIFICATION	3.943437672666391E-4	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9996056562327335	WITHOUT_CLASSIFICATION	3.943437672666391E-4	DESIGN
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9967793234133349	WITHOUT_CLASSIFICATION	0.0032206765866650707	DESIGN
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9997989268364575	WITHOUT_CLASSIFICATION	2.0107316354238159E-4	DESIGN
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999821729602155	WITHOUT_CLASSIFICATION	1.782703978443953E-5	DESIGN
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9996092763302946	WITHOUT_CLASSIFICATION	3.907236697054102E-4	DESIGN
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9988372782263254	WITHOUT_CLASSIFICATION	0.0011627217736746665	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9995046228578639	WITHOUT_CLASSIFICATION	4.953771421361177E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9995046228578639	WITHOUT_CLASSIFICATION	4.953771421361177E-4	DESIGN
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9817667185943267	WITHOUT_CLASSIFICATION	0.01823328140567332	DESIGN
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9998636313376532	WITHOUT_CLASSIFICATION	1.3636866234679795E-4	DESIGN
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9335320454847185	WITHOUT_CLASSIFICATION	0.06646795451528141	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9933797206730205	WITHOUT_CLASSIFICATION	0.006620279326979412	DESIGN
// igndore it...	WITHOUT_CLASSIFICATION	0.9974977302140083	WITHOUT_CLASSIFICATION	0.0025022697859916647	DESIGN
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9946776202024719	WITHOUT_CLASSIFICATION	0.005322379797528209	DESIGN
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9907766906682084	WITHOUT_CLASSIFICATION	0.009223309331791637	DESIGN
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9996079108031258	WITHOUT_CLASSIFICATION	3.9208919687424887E-4	DESIGN
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999739175282245	WITHOUT_CLASSIFICATION	2.6082471775433483E-5	DESIGN
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999930583162949	WITHOUT_CLASSIFICATION	6.941683705096113E-6	DESIGN
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999505189816715	WITHOUT_CLASSIFICATION	4.94810183283349E-5	DESIGN
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9972669562321258	WITHOUT_CLASSIFICATION	0.002733043767874223	DESIGN
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9972669562321258	WITHOUT_CLASSIFICATION	0.002733043767874223	DESIGN
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9972669562321258	WITHOUT_CLASSIFICATION	0.002733043767874223	DESIGN
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9972669562321258	WITHOUT_CLASSIFICATION	0.002733043767874223	DESIGN
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9972669562321258	WITHOUT_CLASSIFICATION	0.002733043767874223	DESIGN
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9982506732766189	WITHOUT_CLASSIFICATION	0.0017493267233810522	DESIGN
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9982506732766189	WITHOUT_CLASSIFICATION	0.0017493267233810522	DESIGN
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9982506732766189	WITHOUT_CLASSIFICATION	0.0017493267233810522	DESIGN
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9982506732766189	WITHOUT_CLASSIFICATION	0.0017493267233810522	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9981432956705675	WITHOUT_CLASSIFICATION	0.0018567043294325665	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9992384043150861	WITHOUT_CLASSIFICATION	7.61595684913944E-4	DESIGN
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.999617690223994	WITHOUT_CLASSIFICATION	3.8230977600605076E-4	DESIGN
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9982506732766189	WITHOUT_CLASSIFICATION	0.0017493267233810522	DESIGN
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9916277784273532	WITHOUT_CLASSIFICATION	0.008372221572646861	DESIGN
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9984999975807564	WITHOUT_CLASSIFICATION	0.0015000024192435937	DESIGN
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9998351283925843	WITHOUT_CLASSIFICATION	1.6487160741571774E-4	DESIGN
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9995681180383391	WITHOUT_CLASSIFICATION	4.3188196166079885E-4	DESIGN
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9890716230127555	WITHOUT_CLASSIFICATION	0.010928376987244418	DESIGN
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9979341057534572	WITHOUT_CLASSIFICATION	0.002065894246542835	DESIGN
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999990638778733	WITHOUT_CLASSIFICATION	9.361221266284706E-7	DESIGN
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9834001949090788	WITHOUT_CLASSIFICATION	0.016599805090921214	DESIGN
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999980023823863	WITHOUT_CLASSIFICATION	1.997617613630682E-6	DESIGN
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9997331676615372	WITHOUT_CLASSIFICATION	2.668323384628617E-4	DESIGN
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999933945963492	WITHOUT_CLASSIFICATION	6.60540365079663E-6	DESIGN
// Set it!	WITHOUT_CLASSIFICATION	0.9999488109694669	WITHOUT_CLASSIFICATION	5.118903053298699E-5	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9998505896269032	WITHOUT_CLASSIFICATION	1.4941037309680418E-4	DESIGN
// strip the " where "	WITHOUT_CLASSIFICATION	0.9998433671668179	WITHOUT_CLASSIFICATION	1.5663283318203324E-4	DESIGN
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9261159276282438	WITHOUT_CLASSIFICATION	0.07388407237175616	DESIGN
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9974799814922373	WITHOUT_CLASSIFICATION	0.002520018507762739	DESIGN
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999724310369698	WITHOUT_CLASSIFICATION	2.7568963030198448E-5	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999205809368551	WITHOUT_CLASSIFICATION	7.941906314490237E-4	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999205809368551	WITHOUT_CLASSIFICATION	7.941906314490237E-4	DESIGN
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9998669378202607	WITHOUT_CLASSIFICATION	1.3306217973935101E-4	DESIGN
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9998280390872232	WITHOUT_CLASSIFICATION	1.719609127768421E-4	DESIGN
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9997862170285287	WITHOUT_CLASSIFICATION	2.1378297147130922E-4	DESIGN
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9993206596212263	WITHOUT_CLASSIFICATION	6.793403787737568E-4	DESIGN
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9996509217173888	WITHOUT_CLASSIFICATION	3.490782826112164E-4	DESIGN
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9788291182985601	WITHOUT_CLASSIFICATION	0.02117088170143984	DESIGN
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9982306457948558	WITHOUT_CLASSIFICATION	0.0017693542051443229	DESIGN
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.999624260199427	WITHOUT_CLASSIFICATION	3.757398005730183E-4	DESIGN
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9998303000102015	WITHOUT_CLASSIFICATION	1.696999897985869E-4	DESIGN
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999094024124046	WITHOUT_CLASSIFICATION	9.059758759546031E-5	DESIGN
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9981998194514633	WITHOUT_CLASSIFICATION	0.0018001805485366807	DESIGN
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9992103623612966	WITHOUT_CLASSIFICATION	7.896376387033802E-4	DESIGN
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999363678869195	WITHOUT_CLASSIFICATION	6.363211308050913E-5	DESIGN
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9998930563653814	WITHOUT_CLASSIFICATION	1.0694363461867873E-4	DESIGN
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9997076054271755	WITHOUT_CLASSIFICATION	2.923945728244775E-4	DESIGN
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999485416401717	WITHOUT_CLASSIFICATION	5.145835982844807E-5	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999991645362345	WITHOUT_CLASSIFICATION	8.354637654368421E-7	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999991645362345	WITHOUT_CLASSIFICATION	8.354637654368421E-7	DESIGN
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9996705500625489	WITHOUT_CLASSIFICATION	3.294499374511114E-4	DESIGN
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9934507393885685	WITHOUT_CLASSIFICATION	0.006549260611431459	DESIGN
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9996525833585976	WITHOUT_CLASSIFICATION	3.4741664140231583E-4	DESIGN
// The property is a component...	WITHOUT_CLASSIFICATION	0.999601329928284	WITHOUT_CLASSIFICATION	3.986700717159966E-4	DESIGN
// The property is another class..	WITHOUT_CLASSIFICATION	0.9995008539220303	WITHOUT_CLASSIFICATION	4.991460779697566E-4	DESIGN
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9950673644941899	WITHOUT_CLASSIFICATION	0.004932635505810146	DESIGN
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9647799658604029	WITHOUT_CLASSIFICATION	0.03522003413959709	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9994212892021247	WITHOUT_CLASSIFICATION	5.787107978753324E-4	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998569483827986	WITHOUT_CLASSIFICATION	1.430516172014789E-4	DESIGN
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9986101994354611	WITHOUT_CLASSIFICATION	0.0013898005645389022	DESIGN
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999283777603221	WITHOUT_CLASSIFICATION	7.162223967783141E-5	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9994212892021247	WITHOUT_CLASSIFICATION	5.787107978753324E-4	DESIGN
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.8127491071288785	WITHOUT_CLASSIFICATION	0.18725089287112157	DESIGN
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9994362649552383	WITHOUT_CLASSIFICATION	5.637350447616684E-4	DESIGN
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.7298991023375694	WITHOUT_CLASSIFICATION	0.2701008976624307	DESIGN
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999408579670157	WITHOUT_CLASSIFICATION	5.9142032984355824E-5	DESIGN
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9945002650848763	WITHOUT_CLASSIFICATION	0.005499734915123589	DESIGN
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9944276278841007	WITHOUT_CLASSIFICATION	0.0055723721158994054	DESIGN
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.999868351560526	WITHOUT_CLASSIFICATION	1.3164843947403014E-4	DESIGN
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999928365347109	WITHOUT_CLASSIFICATION	7.163465289083599E-6	DESIGN
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9988263611518318	WITHOUT_CLASSIFICATION	0.0011736388481682308	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9997987816366415	WITHOUT_CLASSIFICATION	2.0121836335857402E-4	DESIGN
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9998587449484996	WITHOUT_CLASSIFICATION	1.4125505150042064E-4	DESIGN
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9997389824056423	WITHOUT_CLASSIFICATION	2.6101759435768893E-4	DESIGN
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.999677392639421	WITHOUT_CLASSIFICATION	3.2260736057908415E-4	DESIGN
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9991829390603811	WITHOUT_CLASSIFICATION	8.170609396187672E-4	DESIGN
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.999433095756478	WITHOUT_CLASSIFICATION	5.669042435220914E-4	DESIGN
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9998513727580817	WITHOUT_CLASSIFICATION	1.4862724191842014E-4	DESIGN
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9997874754833952	WITHOUT_CLASSIFICATION	2.1252451660475964E-4	DESIGN
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9948394291076044	WITHOUT_CLASSIFICATION	0.005160570892395562	DESIGN
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9948394291076044	WITHOUT_CLASSIFICATION	0.005160570892395562	DESIGN
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.999868351560526	WITHOUT_CLASSIFICATION	1.3164843947403014E-4	DESIGN
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.998740537690507	WITHOUT_CLASSIFICATION	0.0012594623094929704	DESIGN
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9642279633749574	WITHOUT_CLASSIFICATION	0.035772036625042476	DESIGN
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9911163200948135	WITHOUT_CLASSIFICATION	0.008883679905186485	DESIGN
// #2	WITHOUT_CLASSIFICATION	0.9996959385370272	WITHOUT_CLASSIFICATION	3.0406146297271583E-4	DESIGN
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.999829918567421	WITHOUT_CLASSIFICATION	1.7008143257902963E-4	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9993877986859502	WITHOUT_CLASSIFICATION	6.122013140497151E-4	DESIGN
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999973321797407	WITHOUT_CLASSIFICATION	2.667820259230468E-6	DESIGN
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999450371048112	WITHOUT_CLASSIFICATION	5.4962895188782924E-5	DESIGN
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9994445736216081	WITHOUT_CLASSIFICATION	5.554263783919432E-4	DESIGN
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9680717968676913	WITHOUT_CLASSIFICATION	0.031928203132308666	DESIGN
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.999993181763143	WITHOUT_CLASSIFICATION	6.81823685704197E-6	DESIGN
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9963922761934633	WITHOUT_CLASSIFICATION	0.0036077238065367052	DESIGN
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9991791540718499	WITHOUT_CLASSIFICATION	8.208459281502179E-4	DESIGN
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9953206013157386	WITHOUT_CLASSIFICATION	0.00467939868426133	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9997172116532468	WITHOUT_CLASSIFICATION	2.827883467531597E-4	DESIGN
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9997474796764427	WITHOUT_CLASSIFICATION	2.5252032355724865E-4	DESIGN
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.999958872652836	WITHOUT_CLASSIFICATION	4.1127347164112475E-5	DESIGN
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.999976578145425	WITHOUT_CLASSIFICATION	2.3421854575150243E-5	DESIGN
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999620129476734	WITHOUT_CLASSIFICATION	3.798705232669522E-5	DESIGN
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9994603179875288	WITHOUT_CLASSIFICATION	5.396820124712252E-4	DESIGN
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999716421685474	WITHOUT_CLASSIFICATION	2.8357831452662636E-5	DESIGN
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9993480218850171	WITHOUT_CLASSIFICATION	6.519781149827577E-4	DESIGN
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9995974764643557	WITHOUT_CLASSIFICATION	4.0252353564429943E-4	DESIGN
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999958327573847	WITHOUT_CLASSIFICATION	4.167242615316195E-6	DESIGN
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9993851258663248	WITHOUT_CLASSIFICATION	6.14874133675127E-4	DESIGN
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.999600806836061	WITHOUT_CLASSIFICATION	3.991931639389392E-4	DESIGN
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9995212386446461	WITHOUT_CLASSIFICATION	4.78761355353762E-4	DESIGN
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999326579419464	WITHOUT_CLASSIFICATION	6.734205805355275E-5	DESIGN
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999095398676429	WITHOUT_CLASSIFICATION	9.046013235718429E-5	DESIGN
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9997757667560745	WITHOUT_CLASSIFICATION	2.242332439254626E-4	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995709066483893	WITHOUT_CLASSIFICATION	4.2909335161059965E-4	DESIGN
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9996776401401403	WITHOUT_CLASSIFICATION	3.2235985985963747E-4	DESIGN
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.999870539787652	WITHOUT_CLASSIFICATION	1.2946021234798812E-4	DESIGN
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.999993968210243	WITHOUT_CLASSIFICATION	6.031789756973979E-6	DESIGN
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9996623006827938	WITHOUT_CLASSIFICATION	3.37699317206162E-4	DESIGN
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9989351121440342	WITHOUT_CLASSIFICATION	0.0010648878559657519	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998144314873747	WITHOUT_CLASSIFICATION	1.8556851262524666E-4	DESIGN
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.999780975009769	WITHOUT_CLASSIFICATION	2.190249902309818E-4	DESIGN
// Collection of components.	WITHOUT_CLASSIFICATION	0.9996025003070718	WITHOUT_CLASSIFICATION	3.9749969292824695E-4	DESIGN
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9995710112701897	WITHOUT_CLASSIFICATION	4.289887298103221E-4	DESIGN
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9983047552272586	WITHOUT_CLASSIFICATION	0.0016952447727414167	DESIGN
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9998081104507653	WITHOUT_CLASSIFICATION	1.918895492346442E-4	DESIGN
// currently allowed...	WITHOUT_CLASSIFICATION	0.9954780593422798	WITHOUT_CLASSIFICATION	0.00452194065772026	DESIGN
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9440142221856337	DESIGN	0.055985777814366346	WITHOUT_CLASSIFICATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9913688246442124	WITHOUT_CLASSIFICATION	0.008631175355787607	DESIGN
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9980879414943252	WITHOUT_CLASSIFICATION	0.0019120585056747886	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995709066483893	WITHOUT_CLASSIFICATION	4.2909335161059965E-4	DESIGN
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9322834314708738	WITHOUT_CLASSIFICATION	0.0677165685291262	DESIGN
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999947298585479	WITHOUT_CLASSIFICATION	5.270141452140263E-6	DESIGN
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.999558812075936	WITHOUT_CLASSIFICATION	4.411879240639396E-4	DESIGN
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9993346133054827	WITHOUT_CLASSIFICATION	6.653866945172806E-4	DESIGN
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9960365602956395	WITHOUT_CLASSIFICATION	0.003963439704360441	DESIGN
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9972682622834269	WITHOUT_CLASSIFICATION	0.0027317377165730294	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998569483827986	WITHOUT_CLASSIFICATION	1.430516172014789E-4	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.8617010352350795	WITHOUT_CLASSIFICATION	0.13829896476492057	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9997172116532468	WITHOUT_CLASSIFICATION	2.827883467531597E-4	DESIGN
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9980855049182022	WITHOUT_CLASSIFICATION	0.0019144950817978044	DESIGN
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999281403898954	WITHOUT_CLASSIFICATION	7.185961010455816E-5	DESIGN
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999453862457245	WITHOUT_CLASSIFICATION	5.461375427550277E-4	DESIGN
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9989124866172869	WITHOUT_CLASSIFICATION	0.0010875133827130958	DESIGN
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9971364032957193	WITHOUT_CLASSIFICATION	0.0028635967042806697	DESIGN
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9869681179125402	WITHOUT_CLASSIFICATION	0.013031882087459673	DESIGN
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9990864390588892	WITHOUT_CLASSIFICATION	9.13560941110859E-4	DESIGN
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9994747863241688	WITHOUT_CLASSIFICATION	5.252136758312502E-4	DESIGN
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9767841008827017	WITHOUT_CLASSIFICATION	0.023215899117298336	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.999896664007616	WITHOUT_CLASSIFICATION	1.0333599238391334E-4	DESIGN
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.998633074570538	WITHOUT_CLASSIFICATION	0.0013669254294619696	DESIGN
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.7932855433702797	WITHOUT_CLASSIFICATION	0.20671445662972035	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9957535405250247	WITHOUT_CLASSIFICATION	0.00424645947497528	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9957535405250247	WITHOUT_CLASSIFICATION	0.00424645947497528	DESIGN
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9625130790255642	WITHOUT_CLASSIFICATION	0.03748692097443593	DESIGN
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9948487494912043	WITHOUT_CLASSIFICATION	0.005151250508795674	DESIGN
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9997410392657498	WITHOUT_CLASSIFICATION	2.589607342501856E-4	DESIGN
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999466634822045	WITHOUT_CLASSIFICATION	5.333651779541262E-5	DESIGN
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999322370295106	WITHOUT_CLASSIFICATION	6.776297048942735E-5	DESIGN
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9997391121698781	WITHOUT_CLASSIFICATION	2.6088783012187186E-4	DESIGN
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9990580167173726	WITHOUT_CLASSIFICATION	9.419832826274798E-4	DESIGN
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9974381924684075	WITHOUT_CLASSIFICATION	0.0025618075315925917	DESIGN
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999192548784395	WITHOUT_CLASSIFICATION	8.074512156045956E-5	DESIGN
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9994333320915777	WITHOUT_CLASSIFICATION	5.66667908422279E-4	DESIGN
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9982783303811952	WITHOUT_CLASSIFICATION	0.0017216696188048473	DESIGN
// A collection of components...	WITHOUT_CLASSIFICATION	0.998898420970316	WITHOUT_CLASSIFICATION	0.0011015790296839596	DESIGN
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.998898420970316	WITHOUT_CLASSIFICATION	0.0011015790296839596	DESIGN
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999996981447522	WITHOUT_CLASSIFICATION	3.018552477953108E-7	DESIGN
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9997179517539095	WITHOUT_CLASSIFICATION	2.820482460904813E-4	DESIGN
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9994710515492597	WITHOUT_CLASSIFICATION	5.289484507402264E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9275593825523086	WITHOUT_CLASSIFICATION	0.07244061744769134	DESIGN
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999968318906169	WITHOUT_CLASSIFICATION	3.168109383043293E-6	DESIGN
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999729007476522	WITHOUT_CLASSIFICATION	2.7099252347861377E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997108798720529	WITHOUT_CLASSIFICATION	2.891201279471982E-4	DESIGN
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9998640456314687	WITHOUT_CLASSIFICATION	1.3595436853140036E-4	DESIGN
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9992227074511378	WITHOUT_CLASSIFICATION	7.772925488622904E-4	DESIGN
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9998441859453723	WITHOUT_CLASSIFICATION	1.558140546278438E-4	DESIGN
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999639072597845	WITHOUT_CLASSIFICATION	3.60927402155572E-5	DESIGN
/*implied*/	WITHOUT_CLASSIFICATION	0.9975898767217453	WITHOUT_CLASSIFICATION	0.0024101232782547037	DESIGN
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999482853701378	WITHOUT_CLASSIFICATION	5.1714629862246656E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997108798720529	WITHOUT_CLASSIFICATION	2.891201279471982E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997108798720529	WITHOUT_CLASSIFICATION	2.891201279471982E-4	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999719577253189	WITHOUT_CLASSIFICATION	2.804227468103588E-5	DESIGN
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9969622425313677	WITHOUT_CLASSIFICATION	0.0030377574686322657	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9992425489312347	WITHOUT_CLASSIFICATION	7.574510687653373E-4	DESIGN
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9995695792766682	WITHOUT_CLASSIFICATION	4.304207233316735E-4	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9442088238777374	WITHOUT_CLASSIFICATION	0.05579117612226258	DESIGN
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.99875283596658	WITHOUT_CLASSIFICATION	0.0012471640334199181	DESIGN
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9992466206661512	WITHOUT_CLASSIFICATION	7.533793338487407E-4	DESIGN
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.8845334775484708	WITHOUT_CLASSIFICATION	0.11546652245152923	DESIGN
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9993289732107297	WITHOUT_CLASSIFICATION	6.710267892703368E-4	DESIGN
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9988646779864689	WITHOUT_CLASSIFICATION	0.0011353220135310186	DESIGN
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9985953564798848	WITHOUT_CLASSIFICATION	0.001404643520115193	DESIGN
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9988126962903353	WITHOUT_CLASSIFICATION	0.0011873037096646205	DESIGN
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9995100697678523	WITHOUT_CLASSIFICATION	4.89930232147663E-4	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998744223792498	WITHOUT_CLASSIFICATION	1.2557762075008483E-4	DESIGN
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997737487711569	WITHOUT_CLASSIFICATION	2.2625122884310455E-4	DESIGN
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.999997278437849	WITHOUT_CLASSIFICATION	2.721562150906311E-6	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9977081294122975	WITHOUT_CLASSIFICATION	0.0022918705877024597	DESIGN
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.998533286502802	WITHOUT_CLASSIFICATION	0.0014667134971979852	DESIGN
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9965584325504092	WITHOUT_CLASSIFICATION	0.0034415674495908537	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990289381103579	WITHOUT_CLASSIFICATION	9.710618896421598E-4	DESIGN
//TODO:	WITHOUT_CLASSIFICATION	0.896251193888408	WITHOUT_CLASSIFICATION	0.10374880611159198	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9998519492264311	WITHOUT_CLASSIFICATION	1.4805077356901773E-4	DESIGN
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999998177314781	WITHOUT_CLASSIFICATION	1.822685219228554E-7	DESIGN
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.999828353048315	WITHOUT_CLASSIFICATION	1.7164695168508896E-4	DESIGN
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9964049428487639	WITHOUT_CLASSIFICATION	0.0035950571512361074	DESIGN
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999791900082028	WITHOUT_CLASSIFICATION	2.0809991797224328E-5	DESIGN
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9998084353642132	WITHOUT_CLASSIFICATION	1.9156463578674863E-4	DESIGN
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9995662426235293	WITHOUT_CLASSIFICATION	4.337573764706544E-4	DESIGN
// Get the function name node.	WITHOUT_CLASSIFICATION	0.999936475392601	WITHOUT_CLASSIFICATION	6.352460739896504E-5	DESIGN
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.543741915726993	WITHOUT_CLASSIFICATION	0.4562580842730071	DESIGN
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9989349776366747	WITHOUT_CLASSIFICATION	0.0010650223633252949	DESIGN
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9796993079160826	WITHOUT_CLASSIFICATION	0.020300692083917427	DESIGN
// Dialect function	WITHOUT_CLASSIFICATION	0.9998031781403542	WITHOUT_CLASSIFICATION	1.9682185964577364E-4	DESIGN
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9993343481586197	WITHOUT_CLASSIFICATION	6.656518413803438E-4	DESIGN
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9992033539036216	WITHOUT_CLASSIFICATION	7.966460963784034E-4	DESIGN
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9998368058859359	WITHOUT_CLASSIFICATION	1.631941140640368E-4	DESIGN
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9988206803176994	WITHOUT_CLASSIFICATION	0.0011793196823006108	DESIGN
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9987282234900446	WITHOUT_CLASSIFICATION	0.0012717765099552777	DESIGN
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9991190326706854	WITHOUT_CLASSIFICATION	8.809673293147041E-4	DESIGN
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9994619432728111	WITHOUT_CLASSIFICATION	5.380567271887568E-4	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.999871614107295	WITHOUT_CLASSIFICATION	1.2838589270509549E-4	DESIGN
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.999976696165121	WITHOUT_CLASSIFICATION	2.3303834878971976E-5	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999785625265957	WITHOUT_CLASSIFICATION	2.1437473404387226E-5	DESIGN
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9996814929264176	WITHOUT_CLASSIFICATION	3.185070735824223E-4	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999785625265957	WITHOUT_CLASSIFICATION	2.1437473404387226E-5	DESIGN
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999920946088106	WITHOUT_CLASSIFICATION	7.905391189410295E-6	DESIGN
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.999916613158459	WITHOUT_CLASSIFICATION	8.338684154099934E-5	DESIGN
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9997836546977219	WITHOUT_CLASSIFICATION	2.1634530227804334E-4	DESIGN
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9998721006345309	WITHOUT_CLASSIFICATION	1.2789936546914757E-4	DESIGN
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.999954368528788	WITHOUT_CLASSIFICATION	4.563147121195181E-5	DESIGN
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9997836546977219	WITHOUT_CLASSIFICATION	2.1634530227804334E-4	DESIGN
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.999955439246205	WITHOUT_CLASSIFICATION	4.456075379500538E-5	DESIGN
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9979835950773625	WITHOUT_CLASSIFICATION	0.0020164049226375465	DESIGN
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.999897458392113	WITHOUT_CLASSIFICATION	1.0254160788704754E-4	DESIGN
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9997939347627984	WITHOUT_CLASSIFICATION	2.0606523720158488E-4	DESIGN
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999848221833093	WITHOUT_CLASSIFICATION	1.5177816690566088E-5	DESIGN
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9996241350624172	WITHOUT_CLASSIFICATION	3.7586493758282323E-4	DESIGN
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999866658668953	WITHOUT_CLASSIFICATION	1.3334133104661865E-5	DESIGN
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9989005133244054	DESIGN	0.0010994866755945916	WITHOUT_CLASSIFICATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999940732511381	WITHOUT_CLASSIFICATION	5.926748861890851E-6	DESIGN
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999728437486889	WITHOUT_CLASSIFICATION	2.715625131112263E-5	DESIGN
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.99998605429701	WITHOUT_CLASSIFICATION	1.3945702989941554E-5	DESIGN
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999819184805911	WITHOUT_CLASSIFICATION	1.8081519408798793E-5	DESIGN
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999036436058649	WITHOUT_CLASSIFICATION	9.635639413498203E-5	DESIGN
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.7760123076857148	WITHOUT_CLASSIFICATION	0.22398769231428514	DESIGN
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.999782776056121	WITHOUT_CLASSIFICATION	2.172239438790362E-4	DESIGN
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9985857020771804	WITHOUT_CLASSIFICATION	0.0014142979228195884	DESIGN
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.8427366637805275	WITHOUT_CLASSIFICATION	0.15726333621947242	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9911185494900839	WITHOUT_CLASSIFICATION	0.008881450509916011	DESIGN
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9985815695719356	WITHOUT_CLASSIFICATION	0.0014184304280645229	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9996949518463002	WITHOUT_CLASSIFICATION	3.0504815369982477E-4	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.995045579175219	WITHOUT_CLASSIFICATION	0.0049544208247810475	DESIGN
//default mode	WITHOUT_CLASSIFICATION	0.9952017755903865	WITHOUT_CLASSIFICATION	0.004798224409613487	DESIGN
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9998237801144774	WITHOUT_CLASSIFICATION	1.7621988552256185E-4	DESIGN
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9975247680996705	WITHOUT_CLASSIFICATION	0.002475231900329495	DESIGN
//after reset!	WITHOUT_CLASSIFICATION	0.9976097415463431	WITHOUT_CLASSIFICATION	0.002390258453656953	DESIGN
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9994297323645946	WITHOUT_CLASSIFICATION	5.70267635405446E-4	DESIGN
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9979447240502896	WITHOUT_CLASSIFICATION	0.0020552759497104336	DESIGN
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9990683035260378	WITHOUT_CLASSIFICATION	9.31696473962254E-4	DESIGN
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9992194660866468	WITHOUT_CLASSIFICATION	7.805339133532155E-4	DESIGN
//if its "id"	WITHOUT_CLASSIFICATION	0.9997379219855465	WITHOUT_CLASSIFICATION	2.620780144535303E-4	DESIGN
//or its the id property name	WITHOUT_CLASSIFICATION	0.9975857220996646	WITHOUT_CLASSIFICATION	0.0024142779003355017	DESIGN
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999553114959586	WITHOUT_CLASSIFICATION	4.468850404141035E-4	DESIGN
//important!!	WITHOUT_CLASSIFICATION	0.9975898767217453	WITHOUT_CLASSIFICATION	0.0024101232782547037	DESIGN
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.999553114959586	WITHOUT_CLASSIFICATION	4.468850404141035E-4	DESIGN
// an association	WITHOUT_CLASSIFICATION	0.9995068920699255	WITHOUT_CLASSIFICATION	4.931079300745786E-4	DESIGN
//allow index() function:	WITHOUT_CLASSIFICATION	0.9977317881433401	WITHOUT_CLASSIFICATION	0.0022682118566599084	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9829436456114787	WITHOUT_CLASSIFICATION	0.017056354388521294	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9996949518463002	WITHOUT_CLASSIFICATION	3.0504815369982477E-4	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9975898767217453	WITHOUT_CLASSIFICATION	0.0024101232782547037	DESIGN
// collections of values	WITHOUT_CLASSIFICATION	0.999842053784307	WITHOUT_CLASSIFICATION	1.5794621569300714E-4	DESIGN
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9271353638326056	WITHOUT_CLASSIFICATION	0.0728646361673943	DESIGN
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9989428086734566	WITHOUT_CLASSIFICATION	0.0010571913265434254	DESIGN
//special case	WITHOUT_CLASSIFICATION	0.9995680675969114	WITHOUT_CLASSIFICATION	4.31932403088546E-4	DESIGN
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999272346970688	WITHOUT_CLASSIFICATION	7.27653029312005E-5	DESIGN
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.995361955181027	WITHOUT_CLASSIFICATION	0.004638044818973043	DESIGN
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.7231280966932769	DESIGN	0.2768719033067231	WITHOUT_CLASSIFICATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9979742624943343	WITHOUT_CLASSIFICATION	0.0020257375056656752	DESIGN
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9983248400838874	WITHOUT_CLASSIFICATION	0.001675159916112647	DESIGN
//register collection role	WITHOUT_CLASSIFICATION	0.9952313399011263	WITHOUT_CLASSIFICATION	0.004768660098873608	DESIGN
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9984362915210779	WITHOUT_CLASSIFICATION	0.0015637084789220496	DESIGN
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.998533286502802	WITHOUT_CLASSIFICATION	0.0014667134971979852	DESIGN
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9977081294122975	WITHOUT_CLASSIFICATION	0.0022918705877024597	DESIGN
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9995279793788217	WITHOUT_CLASSIFICATION	4.720206211783498E-4	DESIGN
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.999786885267231	WITHOUT_CLASSIFICATION	2.131147327689901E-4	DESIGN
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9996157319550614	WITHOUT_CLASSIFICATION	3.842680449386835E-4	DESIGN
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9991585744254196	WITHOUT_CLASSIFICATION	8.414255745804699E-4	DESIGN
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9998176895380003	WITHOUT_CLASSIFICATION	1.8231046199967846E-4	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9975898767217453	WITHOUT_CLASSIFICATION	0.0024101232782547037	DESIGN
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.998533286502802	WITHOUT_CLASSIFICATION	0.0014667134971979852	DESIGN
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9976365311802474	WITHOUT_CLASSIFICATION	0.0023634688197525532	DESIGN
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9945753546014381	WITHOUT_CLASSIFICATION	0.0054246453985619236	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9869080501255809	WITHOUT_CLASSIFICATION	0.013091949874419095	DESIGN
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9975063796434658	WITHOUT_CLASSIFICATION	0.0024936203565342763	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9967279294628751	WITHOUT_CLASSIFICATION	0.0032720705371247216	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9967279294628751	WITHOUT_CLASSIFICATION	0.0032720705371247216	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998434695964044	WITHOUT_CLASSIFICATION	1.5653040359572942E-4	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9967279294628751	WITHOUT_CLASSIFICATION	0.0032720705371247216	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9967279294628751	WITHOUT_CLASSIFICATION	0.0032720705371247216	DESIGN
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9961458242524964	WITHOUT_CLASSIFICATION	0.0038541757475035188	DESIGN
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.999999855711438	WITHOUT_CLASSIFICATION	1.4428856201661408E-7	DESIGN
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9997322469918486	WITHOUT_CLASSIFICATION	2.677530081514285E-4	DESIGN
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9997322469918486	WITHOUT_CLASSIFICATION	2.677530081514285E-4	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9981882143404708	WITHOUT_CLASSIFICATION	0.001811785659529244	DESIGN
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9973972594715192	WITHOUT_CLASSIFICATION	0.0026027405284807206	DESIGN
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9983297932704408	WITHOUT_CLASSIFICATION	0.0016702067295591982	DESIGN
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999814846201551	WITHOUT_CLASSIFICATION	1.8515379844962506E-5	DESIGN
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9952949151430381	WITHOUT_CLASSIFICATION	0.004705084856961912	DESIGN
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9956641354548658	WITHOUT_CLASSIFICATION	0.00433586454513423	DESIGN
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9996447006569817	WITHOUT_CLASSIFICATION	3.5529934301835336E-4	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9989717792103304	WITHOUT_CLASSIFICATION	0.0010282207896696752	DESIGN
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9919631440147894	WITHOUT_CLASSIFICATION	0.008036855985210532	DESIGN
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999915842234937	WITHOUT_CLASSIFICATION	8.415776506349133E-6	DESIGN
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9987981103497193	WITHOUT_CLASSIFICATION	0.0012018896502806829	DESIGN
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9970083473440717	WITHOUT_CLASSIFICATION	0.002991652655928252	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999997312401481	WITHOUT_CLASSIFICATION	2.687598518898827E-6	DESIGN
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9995232830012122	WITHOUT_CLASSIFICATION	4.7671699878779994E-4	DESIGN
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9928226944142771	WITHOUT_CLASSIFICATION	0.007177305585722831	DESIGN
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9721395080780133	WITHOUT_CLASSIFICATION	0.027860491921986655	DESIGN
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9984891787979493	WITHOUT_CLASSIFICATION	0.001510821202050749	DESIGN
// Add any joins	WITHOUT_CLASSIFICATION	0.9995283349129129	WITHOUT_CLASSIFICATION	4.7166508708697106E-4	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999997312401481	WITHOUT_CLASSIFICATION	2.687598518898827E-6	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.995045579175219	WITHOUT_CLASSIFICATION	0.0049544208247810475	DESIGN
//path expression	WITHOUT_CLASSIFICATION	0.9993896305008566	WITHOUT_CLASSIFICATION	6.103694991433642E-4	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998150054255303	WITHOUT_CLASSIFICATION	1.84994574469752E-4	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997136591880964	WITHOUT_CLASSIFICATION	2.863408119035492E-4	DESIGN
//anything else	WITHOUT_CLASSIFICATION	0.9994736864826733	WITHOUT_CLASSIFICATION	5.263135173267355E-4	DESIGN
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.999985951538738	WITHOUT_CLASSIFICATION	1.4048461261959126E-5	DESIGN
// careful with this!	WITHOUT_CLASSIFICATION	0.9975735552115794	WITHOUT_CLASSIFICATION	0.0024264447884205093	DESIGN
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999039019939124	WITHOUT_CLASSIFICATION	9.609800608759766E-5	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9998875565991825	WITHOUT_CLASSIFICATION	1.1244340081760005E-4	DESIGN
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9996780348132068	WITHOUT_CLASSIFICATION	3.219651867931972E-4	DESIGN
//cannot instantiate	WITHOUT_CLASSIFICATION	0.995696013230766	WITHOUT_CLASSIFICATION	0.004303986769234032	DESIGN
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9998516036883516	WITHOUT_CLASSIFICATION	1.483963116484743E-4	DESIGN
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9980592936105521	WITHOUT_CLASSIFICATION	0.0019407063894479452	DESIGN
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9998250748809465	WITHOUT_CLASSIFICATION	1.7492511905349355E-4	DESIGN
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9997123671232357	WITHOUT_CLASSIFICATION	2.876328767643238E-4	DESIGN
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999045617782183	WITHOUT_CLASSIFICATION	9.543822178166326E-5	DESIGN
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9988390246717397	WITHOUT_CLASSIFICATION	0.0011609753282603348	DESIGN
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999473148309322	WITHOUT_CLASSIFICATION	5.268516906776305E-5	DESIGN
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9984077790087922	WITHOUT_CLASSIFICATION	0.001592220991207855	DESIGN
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999445758723638	WITHOUT_CLASSIFICATION	5.542412763611265E-5	DESIGN
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9992508430255259	WITHOUT_CLASSIFICATION	7.491569744741359E-4	DESIGN
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9977225801570078	WITHOUT_CLASSIFICATION	0.0022774198429922157	DESIGN
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999651878684465	WITHOUT_CLASSIFICATION	3.481213155353955E-5	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9998875565991825	WITHOUT_CLASSIFICATION	1.1244340081760005E-4	DESIGN
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9992102508250306	WITHOUT_CLASSIFICATION	7.897491749694334E-4	DESIGN
//do replacements	WITHOUT_CLASSIFICATION	0.9989262976700254	WITHOUT_CLASSIFICATION	0.0010737023299745867	DESIGN
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.997066572653269	WITHOUT_CLASSIFICATION	0.0029334273467310607	DESIGN
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.973647677513362	WITHOUT_CLASSIFICATION	0.026352322486637967	DESIGN
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995709066483893	WITHOUT_CLASSIFICATION	4.2909335161059965E-4	DESIGN
//hilo params	WITHOUT_CLASSIFICATION	0.9977795154909678	WITHOUT_CLASSIFICATION	0.0022204845090322304	DESIGN
//sql = query;	WITHOUT_CLASSIFICATION	0.9992726280343214	WITHOUT_CLASSIFICATION	7.273719656786023E-4	DESIGN
// performance opt	WITHOUT_CLASSIFICATION	0.9973948246862602	WITHOUT_CLASSIFICATION	0.002605175313739815	DESIGN
//sql = update;	WITHOUT_CLASSIFICATION	0.9992671282650859	WITHOUT_CLASSIFICATION	7.328717349142175E-4	DESIGN
//hilo config	WITHOUT_CLASSIFICATION	0.9974113295353841	WITHOUT_CLASSIFICATION	0.0025886704646158176	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999351880791674	WITHOUT_CLASSIFICATION	6.481192083264698E-5	DESIGN
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9965137379214111	WITHOUT_CLASSIFICATION	0.003486262078588982	DESIGN
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9959423590869342	WITHOUT_CLASSIFICATION	0.004057640913065849	DESIGN
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999125179921394	WITHOUT_CLASSIFICATION	8.748200786052197E-5	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9988538379982032	WITHOUT_CLASSIFICATION	0.001146162001796937	DESIGN
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9998643410590381	WITHOUT_CLASSIFICATION	1.356589409619001E-4	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9989848265775519	WITHOUT_CLASSIFICATION	0.0010151734224481289	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999351880791674	WITHOUT_CLASSIFICATION	6.481192083264698E-5	DESIGN
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9978641269283081	WITHOUT_CLASSIFICATION	0.002135873071691949	DESIGN
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.974337212007517	WITHOUT_CLASSIFICATION	0.025662787992483	DESIGN
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9993636720738005	WITHOUT_CLASSIFICATION	6.363279261994761E-4	DESIGN
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9982489863419374	WITHOUT_CLASSIFICATION	0.0017510136580626632	DESIGN
// the default...	WITHOUT_CLASSIFICATION	0.9994791710775945	WITHOUT_CLASSIFICATION	5.208289224054693E-4	DESIGN
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.999841682337962	WITHOUT_CLASSIFICATION	1.5831766203805304E-4	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9988538379982032	WITHOUT_CLASSIFICATION	0.001146162001796937	DESIGN
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999885032980116	WITHOUT_CLASSIFICATION	1.1496701988489613E-5	DESIGN
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999772573707789	WITHOUT_CLASSIFICATION	2.2742629221023175E-5	DESIGN
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999089502728669	WITHOUT_CLASSIFICATION	9.104972713315573E-5	DESIGN
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995874108025987	WITHOUT_CLASSIFICATION	4.1258919740131604E-4	DESIGN
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995874108025987	WITHOUT_CLASSIFICATION	4.1258919740131604E-4	DESIGN
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995874108025987	WITHOUT_CLASSIFICATION	4.1258919740131604E-4	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9998663508009564	WITHOUT_CLASSIFICATION	1.3364919904360753E-4	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9998663508009564	WITHOUT_CLASSIFICATION	1.3364919904360753E-4	DESIGN
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.995332940596305	WITHOUT_CLASSIFICATION	0.0046670594036950595	DESIGN
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9993043025590065	WITHOUT_CLASSIFICATION	6.956974409935024E-4	DESIGN
// scroll ahead	WITHOUT_CLASSIFICATION	0.9966333903625931	WITHOUT_CLASSIFICATION	0.003366609637406956	DESIGN
// scroll backward	WITHOUT_CLASSIFICATION	0.9991246052600268	WITHOUT_CLASSIFICATION	8.753947399731493E-4	DESIGN
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9951724737493309	WITHOUT_CLASSIFICATION	0.00482752625066911	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994773093850415	WITHOUT_CLASSIFICATION	5.226906149583792E-4	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996636962448701	WITHOUT_CLASSIFICATION	3.363037551298657E-4	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995709066483893	WITHOUT_CLASSIFICATION	4.2909335161059965E-4	DESIGN
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9996802505482969	WITHOUT_CLASSIFICATION	3.197494517031322E-4	DESIGN
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998813562055459	WITHOUT_CLASSIFICATION	1.1864379445404978E-4	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994773093850415	WITHOUT_CLASSIFICATION	5.226906149583792E-4	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996636962448701	WITHOUT_CLASSIFICATION	3.363037551298657E-4	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995709066483893	WITHOUT_CLASSIFICATION	4.2909335161059965E-4	DESIGN
// Caches	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
//Generators:	WITHOUT_CLASSIFICATION	0.9975898767217453	WITHOUT_CLASSIFICATION	0.0024101232782547037	DESIGN
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9994315862995505	WITHOUT_CLASSIFICATION	5.68413700449389E-4	DESIGN
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9978165311340733	WITHOUT_CLASSIFICATION	0.0021834688659267774	DESIGN
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9997634810999751	WITHOUT_CLASSIFICATION	2.3651890002471596E-4	DESIGN
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999867801592183	WITHOUT_CLASSIFICATION	1.321984078170225E-5	DESIGN
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9995934816065505	WITHOUT_CLASSIFICATION	4.0651839344956516E-4	DESIGN
//checking for named queries	WITHOUT_CLASSIFICATION	0.9987975050668157	WITHOUT_CLASSIFICATION	0.0012024949331842386	DESIGN
//stats	WITHOUT_CLASSIFICATION	0.9991897437067582	WITHOUT_CLASSIFICATION	8.102562932417271E-4	DESIGN
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9991140816292988	WITHOUT_CLASSIFICATION	8.85918370701102E-4	DESIGN
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9992417268470731	WITHOUT_CLASSIFICATION	7.58273152926964E-4	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.6975620646920319	DESIGN	0.30243793530796814	WITHOUT_CLASSIFICATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.973641410825565	WITHOUT_CLASSIFICATION	0.026358589174435003	DESIGN
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.999184433177154	WITHOUT_CLASSIFICATION	8.155668228459681E-4	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9990450911335578	WITHOUT_CLASSIFICATION	9.549088664422547E-4	DESIGN
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.996716974766793	WITHOUT_CLASSIFICATION	0.003283025233207088	DESIGN
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9680757585710713	WITHOUT_CLASSIFICATION	0.031924241428928614	DESIGN
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9975898767217453	WITHOUT_CLASSIFICATION	0.0024101232782547037	DESIGN
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9989907203847076	WITHOUT_CLASSIFICATION	0.0010092796152924176	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9963664350021164	WITHOUT_CLASSIFICATION	0.0036335649978835867	DESIGN
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9984133585345905	WITHOUT_CLASSIFICATION	0.0015866414654095934	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.718630994556859	WITHOUT_CLASSIFICATION	0.2813690054431409	DESIGN
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9988073015953927	WITHOUT_CLASSIFICATION	0.0011926984046072952	DESIGN
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.997306253834832	WITHOUT_CLASSIFICATION	0.0026937461651679933	DESIGN
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.999980037979754	WITHOUT_CLASSIFICATION	1.9962020246100474E-5	DESIGN
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9992709699753614	WITHOUT_CLASSIFICATION	7.290300246387806E-4	DESIGN
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994360251475272	WITHOUT_CLASSIFICATION	5.639748524727987E-4	DESIGN
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994151530515187	WITHOUT_CLASSIFICATION	5.848469484812759E-4	DESIGN
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.6170623498189578	WITHOUT_CLASSIFICATION	0.38293765018104226	DESIGN
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996359302314722	WITHOUT_CLASSIFICATION	3.6406976852774753E-4	DESIGN
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998619019931961	WITHOUT_CLASSIFICATION	1.3809800680389799E-4	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9995193002866677	WITHOUT_CLASSIFICATION	4.8069971333241615E-4	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9995193002866677	WITHOUT_CLASSIFICATION	4.8069971333241615E-4	DESIGN
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9997496568869163	WITHOUT_CLASSIFICATION	2.5034311308375285E-4	DESIGN
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999986106012523	WITHOUT_CLASSIFICATION	1.3893987476854443E-6	DESIGN
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9989164361538172	WITHOUT_CLASSIFICATION	0.0010835638461827988	DESIGN
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.998533286502802	WITHOUT_CLASSIFICATION	0.0014667134971979852	DESIGN
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9978234480938525	WITHOUT_CLASSIFICATION	0.0021765519061476423	DESIGN
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.999910966753312	WITHOUT_CLASSIFICATION	8.903324668807147E-5	DESIGN
//for EJB3	WITHOUT_CLASSIFICATION	0.9994061130509323	WITHOUT_CLASSIFICATION	5.938869490676986E-4	DESIGN
// just ignore	WITHOUT_CLASSIFICATION	0.9998045144153109	WITHOUT_CLASSIFICATION	1.9548558468920608E-4	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9991985050472816	WITHOUT_CLASSIFICATION	8.014949527184095E-4	DESIGN
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997986237802104	WITHOUT_CLASSIFICATION	2.013762197895323E-4	DESIGN
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998174714017356	WITHOUT_CLASSIFICATION	1.825285982643927E-4	DESIGN
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997986237802104	WITHOUT_CLASSIFICATION	2.013762197895323E-4	DESIGN
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997986237802104	WITHOUT_CLASSIFICATION	2.013762197895323E-4	DESIGN
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997986237802104	WITHOUT_CLASSIFICATION	2.013762197895323E-4	DESIGN
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998000072951382	WITHOUT_CLASSIFICATION	1.9999270486183315E-4	DESIGN
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997986237802104	WITHOUT_CLASSIFICATION	2.013762197895323E-4	DESIGN
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997626432571276	WITHOUT_CLASSIFICATION	2.3735674287234557E-4	DESIGN
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997986237802104	WITHOUT_CLASSIFICATION	2.013762197895323E-4	DESIGN
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997986237802104	WITHOUT_CLASSIFICATION	2.013762197895323E-4	DESIGN
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997986237802104	WITHOUT_CLASSIFICATION	2.013762197895323E-4	DESIGN
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9852798014264332	WITHOUT_CLASSIFICATION	0.014720198573566674	DESIGN
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9924987205677878	WITHOUT_CLASSIFICATION	0.007501279432212175	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9808028682237153	WITHOUT_CLASSIFICATION	0.019197131776284647	DESIGN
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999741557645546	WITHOUT_CLASSIFICATION	2.584423544532104E-5	DESIGN
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9998022048999059	WITHOUT_CLASSIFICATION	1.9779510009410012E-4	DESIGN
// not for internal use:	WITHOUT_CLASSIFICATION	0.9966423590263761	WITHOUT_CLASSIFICATION	0.0033576409736239344	DESIGN
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9989256996735978	WITHOUT_CLASSIFICATION	0.001074300326402233	DESIGN
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.992869630308241	WITHOUT_CLASSIFICATION	0.007130369691758873	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9808028682237153	WITHOUT_CLASSIFICATION	0.019197131776284647	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9808028682237153	WITHOUT_CLASSIFICATION	0.019197131776284647	DESIGN
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9993434416898933	WITHOUT_CLASSIFICATION	6.565583101068083E-4	DESIGN
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9994327341263044	WITHOUT_CLASSIFICATION	5.672658736955346E-4	DESIGN
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9973066475120055	WITHOUT_CLASSIFICATION	0.0026933524879944023	DESIGN
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9981503537528247	WITHOUT_CLASSIFICATION	0.0018496462471752778	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9998505896269032	WITHOUT_CLASSIFICATION	1.4941037309680418E-4	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9963664350021164	WITHOUT_CLASSIFICATION	0.0036335649978835867	DESIGN
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.998726472559769	WITHOUT_CLASSIFICATION	0.001273527440230977	DESIGN
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9994886296156483	WITHOUT_CLASSIFICATION	5.113703843515658E-4	DESIGN
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9979363316493661	WITHOUT_CLASSIFICATION	0.0020636683506338152	DESIGN
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9973366877379803	WITHOUT_CLASSIFICATION	0.0026633122620196028	DESIGN
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.999704163207485	WITHOUT_CLASSIFICATION	2.95836792514986E-4	DESIGN
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993502681376477	WITHOUT_CLASSIFICATION	6.497318623523295E-4	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9985429697877521	WITHOUT_CLASSIFICATION	0.0014570302122477717	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9985429697877521	WITHOUT_CLASSIFICATION	0.0014570302122477717	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9985429697877521	WITHOUT_CLASSIFICATION	0.0014570302122477717	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9985429697877521	WITHOUT_CLASSIFICATION	0.0014570302122477717	DESIGN
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995709066483893	WITHOUT_CLASSIFICATION	4.2909335161059965E-4	DESIGN
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998883568782307	WITHOUT_CLASSIFICATION	0.0011164312176929678	DESIGN
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999122493797309	WITHOUT_CLASSIFICATION	8.775062026913748E-5	DESIGN
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995709066483893	WITHOUT_CLASSIFICATION	4.2909335161059965E-4	DESIGN
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9860924536847526	WITHOUT_CLASSIFICATION	0.013907546315247288	DESIGN
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.956897706701592	WITHOUT_CLASSIFICATION	0.04310229329840797	DESIGN
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996475714693948	WITHOUT_CLASSIFICATION	3.524285306052283E-4	DESIGN
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996884649296482	WITHOUT_CLASSIFICATION	3.115350703517694E-4	DESIGN
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.5529268324188371	DESIGN	0.44707316758116283	WITHOUT_CLASSIFICATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.8892992236508723	WITHOUT_CLASSIFICATION	0.11070077634912771	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9995414736184762	WITHOUT_CLASSIFICATION	4.5852638152373167E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9977782340280895	WITHOUT_CLASSIFICATION	0.0022217659719105235	DESIGN
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.99955930485376	WITHOUT_CLASSIFICATION	4.406951462400584E-4	DESIGN
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.994972424469757	WITHOUT_CLASSIFICATION	0.005027575530243099	DESIGN
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9978872262806208	WITHOUT_CLASSIFICATION	0.002112773719379142	DESIGN
//no big deal	WITHOUT_CLASSIFICATION	0.9996799709932188	WITHOUT_CLASSIFICATION	3.200290067811952E-4	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9998172977646927	WITHOUT_CLASSIFICATION	1.8270223530725494E-4	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9998172977646927	WITHOUT_CLASSIFICATION	1.8270223530725494E-4	DESIGN
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9983551579814235	WITHOUT_CLASSIFICATION	0.0016448420185765787	DESIGN
// see explanation above...	WITHOUT_CLASSIFICATION	0.9995323319296164	WITHOUT_CLASSIFICATION	4.6766807038364376E-4	DESIGN
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9639450353686105	WITHOUT_CLASSIFICATION	0.03605496463138945	DESIGN
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9990683035260378	WITHOUT_CLASSIFICATION	9.31696473962254E-4	DESIGN
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994339961565749	WITHOUT_CLASSIFICATION	5.660038434251372E-4	DESIGN
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994339961565749	WITHOUT_CLASSIFICATION	5.660038434251372E-4	DESIGN
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999738208285789	WITHOUT_CLASSIFICATION	2.6179171421149622E-5	DESIGN
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995874108025987	WITHOUT_CLASSIFICATION	4.1258919740131604E-4	DESIGN
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999715854831764	WITHOUT_CLASSIFICATION	2.8414516823547852E-5	DESIGN
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9997705559797044	WITHOUT_CLASSIFICATION	2.294440202955589E-4	DESIGN
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9994879787786449	WITHOUT_CLASSIFICATION	5.120212213550931E-4	DESIGN
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9933025833202096	WITHOUT_CLASSIFICATION	0.00669741667979036	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994523697978075	WITHOUT_CLASSIFICATION	5.476302021925333E-4	DESIGN
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9996008469042567	WITHOUT_CLASSIFICATION	3.9915309574339365E-4	DESIGN
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9996802742703494	WITHOUT_CLASSIFICATION	3.1972572965057534E-4	DESIGN
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9994744729556775	WITHOUT_CLASSIFICATION	5.255270443226136E-4	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9974183381210538	WITHOUT_CLASSIFICATION	0.002581661878946089	DESIGN
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9973487831152941	WITHOUT_CLASSIFICATION	0.0026512168847059752	DESIGN
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9976422506240956	WITHOUT_CLASSIFICATION	0.0023577493759042623	DESIGN
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9998858536115195	WITHOUT_CLASSIFICATION	1.1414638848049475E-4	DESIGN
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999960330750475	WITHOUT_CLASSIFICATION	3.966924952416304E-6	DESIGN
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999997116970222	WITHOUT_CLASSIFICATION	2.883029777679078E-7	DESIGN
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999960830426472	WITHOUT_CLASSIFICATION	3.916957352832918E-6	DESIGN
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999977124826958	WITHOUT_CLASSIFICATION	2.2875173042578917E-6	DESIGN
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9966534128626569	WITHOUT_CLASSIFICATION	0.0033465871373430656	DESIGN
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9991898437736622	WITHOUT_CLASSIFICATION	8.101562263377851E-4	DESIGN
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9996655625906348	WITHOUT_CLASSIFICATION	3.344374093651976E-4	DESIGN
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9974022800599482	WITHOUT_CLASSIFICATION	0.0025977199400518433	DESIGN
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9998829542832877	WITHOUT_CLASSIFICATION	1.1704571671232157E-4	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999222484135996	WITHOUT_CLASSIFICATION	7.775158640053698E-5	DESIGN
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9992749867590708	WITHOUT_CLASSIFICATION	7.250132409291606E-4	DESIGN
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999375714703478	WITHOUT_CLASSIFICATION	6.242852965218528E-5	DESIGN
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9983769771439698	WITHOUT_CLASSIFICATION	0.0016230228560302328	DESIGN
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9946740087007033	WITHOUT_CLASSIFICATION	0.005325991299296654	DESIGN
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9977081294122975	WITHOUT_CLASSIFICATION	0.0022918705877024597	DESIGN
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9990995685426229	WITHOUT_CLASSIFICATION	9.004314573769356E-4	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9987446591702985	WITHOUT_CLASSIFICATION	0.001255340829701496	DESIGN
// handle empty collection	WITHOUT_CLASSIFICATION	0.994856842636235	WITHOUT_CLASSIFICATION	0.005143157363765128	DESIGN
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999172302807919	WITHOUT_CLASSIFICATION	8.276971920800652E-5	DESIGN
//handle empty collections	WITHOUT_CLASSIFICATION	0.9977459194600836	WITHOUT_CLASSIFICATION	0.0022540805399164725	DESIGN
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9956202337456759	WITHOUT_CLASSIFICATION	0.004379766254324091	DESIGN
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.999754180971915	WITHOUT_CLASSIFICATION	2.458190280849688E-4	DESIGN
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.8598899716987922	WITHOUT_CLASSIFICATION	0.14011002830120778	DESIGN
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9942577846865577	WITHOUT_CLASSIFICATION	0.005742215313442242	DESIGN
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999309055673182	WITHOUT_CLASSIFICATION	6.909443268179069E-5	DESIGN
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.998329186675408	WITHOUT_CLASSIFICATION	0.001670813324591909	DESIGN
//use the id passed in	WITHOUT_CLASSIFICATION	0.999557693161564	WITHOUT_CLASSIFICATION	4.4230683843601317E-4	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9996222160265587	WITHOUT_CLASSIFICATION	3.777839734413514E-4	DESIGN
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9995843880568921	WITHOUT_CLASSIFICATION	4.1561194310792924E-4	DESIGN
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999431203861824	WITHOUT_CLASSIFICATION	5.6879613817668774E-5	DESIGN
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9994369875951358	WITHOUT_CLASSIFICATION	5.630124048642712E-4	DESIGN
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9955407208335335	WITHOUT_CLASSIFICATION	0.004459279166466439	DESIGN
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9987073298232583	WITHOUT_CLASSIFICATION	0.0012926701767417912	DESIGN
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999578981175967	WITHOUT_CLASSIFICATION	4.2101882403303864E-5	DESIGN
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.999992740012761	WITHOUT_CLASSIFICATION	7.259987239067496E-6	DESIGN
// look for a proxy	WITHOUT_CLASSIFICATION	0.9990469399852671	WITHOUT_CLASSIFICATION	9.53060014732897E-4	DESIGN
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9993603087001173	WITHOUT_CLASSIFICATION	6.396912998827813E-4	DESIGN
//its the given optional object	WITHOUT_CLASSIFICATION	0.9990570090108851	WITHOUT_CLASSIFICATION	9.429909891148898E-4	DESIGN
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9980189920630177	WITHOUT_CLASSIFICATION	0.0019810079369822903	DESIGN
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9970295330261005	WITHOUT_CLASSIFICATION	0.0029704669738994972	DESIGN
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9987760103128626	WITHOUT_CLASSIFICATION	0.001223989687137545	DESIGN
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9980295841512928	WITHOUT_CLASSIFICATION	0.0019704158487070522	DESIGN
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999914010157372	WITHOUT_CLASSIFICATION	8.59898426273833E-6	DESIGN
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9529486889325132	WITHOUT_CLASSIFICATION	0.04705131106748683	DESIGN
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9996345036587818	WITHOUT_CLASSIFICATION	3.6549634121822185E-4	DESIGN
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9904591932148461	WITHOUT_CLASSIFICATION	0.00954080678515382	DESIGN
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9974479759914995	WITHOUT_CLASSIFICATION	0.0025520240085004516	DESIGN
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.998533286502802	WITHOUT_CLASSIFICATION	0.0014667134971979852	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9975898767217453	WITHOUT_CLASSIFICATION	0.0024101232782547037	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9975898767217453	WITHOUT_CLASSIFICATION	0.0024101232782547037	DESIGN
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999959353797024	WITHOUT_CLASSIFICATION	4.06462029756588E-6	DESIGN
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9237334339491649	WITHOUT_CLASSIFICATION	0.07626656605083515	DESIGN
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9987627959499065	WITHOUT_CLASSIFICATION	0.0012372040500935196	DESIGN
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9990736752040882	WITHOUT_CLASSIFICATION	9.263247959117733E-4	DESIGN
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.999915878172725	WITHOUT_CLASSIFICATION	8.412182727500636E-5	DESIGN
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.992802342262176	WITHOUT_CLASSIFICATION	0.00719765773782406	DESIGN
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999739345884361	WITHOUT_CLASSIFICATION	2.6065411563944277E-5	DESIGN
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9998824747599073	WITHOUT_CLASSIFICATION	1.175252400927947E-4	DESIGN
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9975920989635143	WITHOUT_CLASSIFICATION	0.0024079010364856926	DESIGN
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9994468434098221	WITHOUT_CLASSIFICATION	5.531565901778604E-4	DESIGN
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.999973546456032	WITHOUT_CLASSIFICATION	2.645354396792418E-5	DESIGN
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9990339747129482	WITHOUT_CLASSIFICATION	9.660252870519482E-4	DESIGN
//a composite key	WITHOUT_CLASSIFICATION	0.9984817247025042	WITHOUT_CLASSIFICATION	0.0015182752974957552	DESIGN
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9998926727724302	WITHOUT_CLASSIFICATION	1.0732722756974337E-4	DESIGN
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9293095245979034	WITHOUT_CLASSIFICATION	0.07069047540209665	DESIGN
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9971887926188499	WITHOUT_CLASSIFICATION	0.00281120738115014	DESIGN
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9985857020771804	WITHOUT_CLASSIFICATION	0.0014142979228195884	DESIGN
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.8611279447821931	WITHOUT_CLASSIFICATION	0.13887205521780677	DESIGN
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9185721114473466	WITHOUT_CLASSIFICATION	0.08142788855265333	DESIGN
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.994670094764065	WITHOUT_CLASSIFICATION	0.005329905235934951	DESIGN
// we found it	WITHOUT_CLASSIFICATION	0.9989999490084487	WITHOUT_CLASSIFICATION	0.0010000509915513878	DESIGN
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9997959273572913	WITHOUT_CLASSIFICATION	2.0407264270881655E-4	DESIGN
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9829727636807221	WITHOUT_CLASSIFICATION	0.017027236319277897	DESIGN
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9856805181937598	WITHOUT_CLASSIFICATION	0.014319481806240137	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999310249943696	WITHOUT_CLASSIFICATION	6.897500563041762E-5	DESIGN
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9953543383679585	WITHOUT_CLASSIFICATION	0.004645661632041488	DESIGN
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.99964999074402	WITHOUT_CLASSIFICATION	3.5000925598007533E-4	DESIGN
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9949419188056184	WITHOUT_CLASSIFICATION	0.005058081194381567	DESIGN
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9997219690811522	WITHOUT_CLASSIFICATION	2.7803091884780326E-4	DESIGN
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9978618651679975	WITHOUT_CLASSIFICATION	0.0021381348320025865	DESIGN
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9998009300636167	WITHOUT_CLASSIFICATION	1.990699363832991E-4	DESIGN
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9983544651708178	WITHOUT_CLASSIFICATION	0.0016455348291821372	DESIGN
//the criteria instance	WITHOUT_CLASSIFICATION	0.997062833740457	WITHOUT_CLASSIFICATION	0.0029371662595429698	DESIGN
// the entity name	WITHOUT_CLASSIFICATION	0.9984874741272866	WITHOUT_CLASSIFICATION	0.0015125258727133552	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.999968549374693	WITHOUT_CLASSIFICATION	3.145062530693491E-5	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.999968549374693	WITHOUT_CLASSIFICATION	3.145062530693491E-5	DESIGN
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9998019766378404	WITHOUT_CLASSIFICATION	1.980233621596293E-4	DESIGN
//should never happen, i think	WITHOUT_CLASSIFICATION	0.995413446162429	WITHOUT_CLASSIFICATION	0.004586553837570995	DESIGN
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9995218297682124	WITHOUT_CLASSIFICATION	4.7817023178772653E-4	DESIGN
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.998321555164907	WITHOUT_CLASSIFICATION	0.0016784448350931243	DESIGN
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9998411491788073	WITHOUT_CLASSIFICATION	1.58850821192637E-4	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9993412664712938	WITHOUT_CLASSIFICATION	6.587335287061521E-4	DESIGN
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9994341773898879	WITHOUT_CLASSIFICATION	5.658226101119652E-4	DESIGN
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999769620049977	WITHOUT_CLASSIFICATION	2.303799500229699E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9987889924072576	WITHOUT_CLASSIFICATION	0.0012110075927423826	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9998563981807236	WITHOUT_CLASSIFICATION	1.4360181927632702E-4	DESIGN
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.999976855635669	WITHOUT_CLASSIFICATION	2.3144364331047384E-5	DESIGN
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9997506084360206	WITHOUT_CLASSIFICATION	2.493915639794011E-4	DESIGN
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999921130541596	WITHOUT_CLASSIFICATION	7.886945840429608E-6	DESIGN
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9998022127131958	WITHOUT_CLASSIFICATION	1.9778728680433145E-4	DESIGN
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999856354478424	WITHOUT_CLASSIFICATION	1.4364552157747554E-5	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.973978214548668	WITHOUT_CLASSIFICATION	0.026021785451332054	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.973978214548668	WITHOUT_CLASSIFICATION	0.026021785451332054	DESIGN
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999881926674711	WITHOUT_CLASSIFICATION	1.1807332528896441E-5	DESIGN
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9985162660749426	WITHOUT_CLASSIFICATION	0.0014837339250573312	DESIGN
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999099592296521	WITHOUT_CLASSIFICATION	9.00407703478435E-5	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9998275436258275	WITHOUT_CLASSIFICATION	1.724563741724503E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9977782340280895	WITHOUT_CLASSIFICATION	0.0022217659719105235	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9975898767217453	WITHOUT_CLASSIFICATION	0.0024101232782547037	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// Now, process the returns	WITHOUT_CLASSIFICATION	0.999777177546142	WITHOUT_CLASSIFICATION	2.2282245385805565E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9983355826766438	WITHOUT_CLASSIFICATION	0.0016644173233562104	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9983355826766438	WITHOUT_CLASSIFICATION	0.0016644173233562104	DESIGN
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999653928583906	WITHOUT_CLASSIFICATION	3.4607141609485113E-5	DESIGN
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9995842255007489	WITHOUT_CLASSIFICATION	4.1577449925112736E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999841921299116	WITHOUT_CLASSIFICATION	1.5807870088412218E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999740148429	WITHOUT_CLASSIFICATION	2.5985157158054165E-8	DESIGN
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9765176719358075	WITHOUT_CLASSIFICATION	0.023482328064192533	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9975898767217453	WITHOUT_CLASSIFICATION	0.0024101232782547037	DESIGN
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9997399620784818	WITHOUT_CLASSIFICATION	2.6003792151817667E-4	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9981432956705675	WITHOUT_CLASSIFICATION	0.0018567043294325665	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9995046228578639	WITHOUT_CLASSIFICATION	4.953771421361177E-4	DESIGN
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9985153360298947	WITHOUT_CLASSIFICATION	0.0014846639701053485	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9652936781829975	WITHOUT_CLASSIFICATION	0.03470632181700259	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9989144750011479	WITHOUT_CLASSIFICATION	0.0010855249988520796	DESIGN
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9988307634649051	WITHOUT_CLASSIFICATION	0.001169236535094878	DESIGN
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9972669562321258	WITHOUT_CLASSIFICATION	0.002733043767874223	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9992425489312347	WITHOUT_CLASSIFICATION	7.574510687653373E-4	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9975066508913079	WITHOUT_CLASSIFICATION	0.0024933491086920443	DESIGN
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.999553114959586	WITHOUT_CLASSIFICATION	4.468850404141035E-4	DESIGN
//by default	WITHOUT_CLASSIFICATION	0.9986697501034142	WITHOUT_CLASSIFICATION	0.0013302498965858448	DESIGN
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9750668072066956	WITHOUT_CLASSIFICATION	0.024933192793304394	DESIGN
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9994411359190318	WITHOUT_CLASSIFICATION	5.58864080968214E-4	DESIGN
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9992579433064277	WITHOUT_CLASSIFICATION	7.420566935724398E-4	DESIGN
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9982506732766189	WITHOUT_CLASSIFICATION	0.0017493267233810522	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999151938107994	WITHOUT_CLASSIFICATION	8.480618920062969E-5	DESIGN
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9994316309453256	WITHOUT_CLASSIFICATION	5.683690546743421E-4	DESIGN
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9995827842956445	WITHOUT_CLASSIFICATION	4.172157043555454E-4	DESIGN
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9974644481132978	WITHOUT_CLASSIFICATION	0.0025355518867021874	DESIGN
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999985798699614	WITHOUT_CLASSIFICATION	1.4201300385071916E-6	DESIGN
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9972018225635367	WITHOUT_CLASSIFICATION	0.002798177436463171	DESIGN
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9989147359226576	WITHOUT_CLASSIFICATION	0.001085264077342455	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999991645362345	WITHOUT_CLASSIFICATION	8.354637654368421E-7	DESIGN
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9929741357872746	WITHOUT_CLASSIFICATION	0.007025864212725475	DESIGN
//usually useless	WITHOUT_CLASSIFICATION	0.9938448153734946	WITHOUT_CLASSIFICATION	0.006155184626505508	DESIGN
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9968273582937657	WITHOUT_CLASSIFICATION	0.0031726417062342012	DESIGN
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9981263330054855	WITHOUT_CLASSIFICATION	0.0018736669945144638	DESIGN
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999573107512008	WITHOUT_CLASSIFICATION	4.268924879926009E-5	DESIGN
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9991117601187566	WITHOUT_CLASSIFICATION	8.882398812434542E-4	DESIGN
//may be final	WITHOUT_CLASSIFICATION	0.9985398882419879	WITHOUT_CLASSIFICATION	0.0014601117580120206	DESIGN
// may be final	WITHOUT_CLASSIFICATION	0.9979710641208891	WITHOUT_CLASSIFICATION	0.0020289358791110213	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9990450572498236	WITHOUT_CLASSIFICATION	9.54942750176382E-4	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9974467441454983	WITHOUT_CLASSIFICATION	0.0025532558545017423	DESIGN
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.999948888497885	WITHOUT_CLASSIFICATION	5.111150211507081E-5	DESIGN
// ignore it...	WITHOUT_CLASSIFICATION	0.9988038611971795	WITHOUT_CLASSIFICATION	0.0011961388028205572	DESIGN
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9894722441344874	WITHOUT_CLASSIFICATION	0.010527755865512618	DESIGN
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9990332092778275	WITHOUT_CLASSIFICATION	9.667907221726626E-4	DESIGN
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9997059122497008	WITHOUT_CLASSIFICATION	2.9408775029914427E-4	DESIGN
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9973162192186886	WITHOUT_CLASSIFICATION	0.00268378078131131	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9990450572498236	WITHOUT_CLASSIFICATION	9.54942750176382E-4	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9974467441454983	WITHOUT_CLASSIFICATION	0.0025532558545017423	DESIGN
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9995627361464334	WITHOUT_CLASSIFICATION	4.372638535666457E-4	DESIGN
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9973580563121989	WITHOUT_CLASSIFICATION	0.002641943687801172	DESIGN
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9995954617304175	WITHOUT_CLASSIFICATION	4.045382695825781E-4	DESIGN
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999217137853484	WITHOUT_CLASSIFICATION	7.82862146515508E-5	DESIGN
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9994230228761563	WITHOUT_CLASSIFICATION	5.769771238437178E-4	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9966990499723054	WITHOUT_CLASSIFICATION	0.0033009500276945498	DESIGN
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999025031835042	WITHOUT_CLASSIFICATION	9.749681649584946E-5	DESIGN
// }	WITHOUT_CLASSIFICATION	0.999195410988994	WITHOUT_CLASSIFICATION	8.045890110060286E-4	DESIGN
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9996072961920631	WITHOUT_CLASSIFICATION	3.927038079369345E-4	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.7380752007780975	DESIGN	0.26192479922190254	WITHOUT_CLASSIFICATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9992360168197861	WITHOUT_CLASSIFICATION	7.639831802139297E-4	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.7380752007780975	DESIGN	0.26192479922190254	WITHOUT_CLASSIFICATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9998068008026703	WITHOUT_CLASSIFICATION	1.9319919732976225E-4	DESIGN
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9992652465423563	WITHOUT_CLASSIFICATION	7.347534576436788E-4	DESIGN
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9998068008026703	WITHOUT_CLASSIFICATION	1.9319919732976225E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99950661017115	WITHOUT_CLASSIFICATION	4.933898288500955E-4	DESIGN
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9996973003012718	WITHOUT_CLASSIFICATION	3.0269969872813375E-4	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9993163702637461	WITHOUT_CLASSIFICATION	6.836297362539007E-4	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9993163702637461	WITHOUT_CLASSIFICATION	6.836297362539007E-4	DESIGN
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.997919116460178	WITHOUT_CLASSIFICATION	0.002080883539822141	DESIGN
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9979321744138112	WITHOUT_CLASSIFICATION	0.002067825586188715	DESIGN
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.997919116460178	WITHOUT_CLASSIFICATION	0.002080883539822141	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9977899681536813	WITHOUT_CLASSIFICATION	0.002210031846318681	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9977081294122975	WITHOUT_CLASSIFICATION	0.0022918705877024597	DESIGN
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.5714838257938024	WITHOUT_CLASSIFICATION	0.4285161742061976	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9990183092198908	WITHOUT_CLASSIFICATION	9.816907801092991E-4	DESIGN
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9995923970070932	WITHOUT_CLASSIFICATION	4.0760299290685495E-4	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9997165749689857	WITHOUT_CLASSIFICATION	2.8342503101424664E-4	DESIGN
//columns	WITHOUT_CLASSIFICATION	0.9991897437067582	WITHOUT_CLASSIFICATION	8.102562932417271E-4	DESIGN
//SQL statements	WITHOUT_CLASSIFICATION	0.9986709275559381	WITHOUT_CLASSIFICATION	0.0013290724440618807	DESIGN
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9957164668132504	WITHOUT_CLASSIFICATION	0.004283533186749487	DESIGN
//types	WITHOUT_CLASSIFICATION	0.9991897437067582	WITHOUT_CLASSIFICATION	8.102562932417271E-4	DESIGN
// custom sql	WITHOUT_CLASSIFICATION	0.9999659343415236	WITHOUT_CLASSIFICATION	3.406565847635236E-5	DESIGN
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9996687768481249	WITHOUT_CLASSIFICATION	3.312231518750593E-4	DESIGN
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.999606579439393	WITHOUT_CLASSIFICATION	3.9342056060708344E-4	DESIGN
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9994532536601022	WITHOUT_CLASSIFICATION	5.467463398977844E-4	DESIGN
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999619310719083	WITHOUT_CLASSIFICATION	3.80689280916004E-5	DESIGN
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.999553114959586	WITHOUT_CLASSIFICATION	4.468850404141035E-4	DESIGN
//ELEMENT	WITHOUT_CLASSIFICATION	0.9991897437067582	WITHOUT_CLASSIFICATION	8.102562932417271E-4	DESIGN
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998905882836839	WITHOUT_CLASSIFICATION	1.0941171631611852E-4	DESIGN
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.999356850197826	WITHOUT_CLASSIFICATION	6.431498021739055E-4	DESIGN
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999900886438883	WITHOUT_CLASSIFICATION	9.911356111783093E-6	DESIGN
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.999553114959586	WITHOUT_CLASSIFICATION	4.468850404141035E-4	DESIGN
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9980916750218647	WITHOUT_CLASSIFICATION	0.00190832497813523	DESIGN
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9977195154113089	WITHOUT_CLASSIFICATION	0.002280484588691066	DESIGN
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9825357899003861	WITHOUT_CLASSIFICATION	0.017464210099613776	DESIGN
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9922179688869465	WITHOUT_CLASSIFICATION	0.007782031113053538	DESIGN
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9731071454496076	WITHOUT_CLASSIFICATION	0.02689285455039234	DESIGN
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9694730508778439	WITHOUT_CLASSIFICATION	0.030526949122156262	DESIGN
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9748658680190035	WITHOUT_CLASSIFICATION	0.025134131980996424	DESIGN
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9953421268252648	WITHOUT_CLASSIFICATION	0.004657873174735244	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9990183092198908	WITHOUT_CLASSIFICATION	9.816907801092991E-4	DESIGN
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9986607990227222	WITHOUT_CLASSIFICATION	0.0013392009772778028	DESIGN
//needed by arrays	WITHOUT_CLASSIFICATION	0.9981458887245078	WITHOUT_CLASSIFICATION	0.0018541112754922068	DESIGN
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.5120407768310993	DESIGN	0.4879592231689007	WITHOUT_CLASSIFICATION
//an assertion	WITHOUT_CLASSIFICATION	0.9969615226736022	WITHOUT_CLASSIFICATION	0.0030384773263978306	DESIGN
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9998787838957682	WITHOUT_CLASSIFICATION	1.2121610423184567E-4	DESIGN
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999408995560299	WITHOUT_CLASSIFICATION	5.91004439699765E-5	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9977899681536813	WITHOUT_CLASSIFICATION	0.002210031846318681	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9977899681536813	WITHOUT_CLASSIFICATION	0.002210031846318681	DESIGN
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999316690952968	WITHOUT_CLASSIFICATION	6.833090470309912E-5	DESIGN
//insert all the new entries	WITHOUT_CLASSIFICATION	0.999910887448596	WITHOUT_CLASSIFICATION	8.911255140393191E-5	DESIGN
//==elementType ??	WITHOUT_CLASSIFICATION	0.9984128783695221	WITHOUT_CLASSIFICATION	0.0015871216304779866	DESIGN
//update all the modified entries	WITHOUT_CLASSIFICATION	0.999974544629452	WITHOUT_CLASSIFICATION	2.545537054798071E-5	DESIGN
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9970072363503639	WITHOUT_CLASSIFICATION	0.0029927636496361277	DESIGN
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9782640538822415	WITHOUT_CLASSIFICATION	0.021735946117758587	DESIGN
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9302997429222932	WITHOUT_CLASSIFICATION	0.0697002570777068	DESIGN
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.999989367728992	WITHOUT_CLASSIFICATION	1.0632271008057627E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9995780325170252	WITHOUT_CLASSIFICATION	4.2196748297481236E-4	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9997633684213775	WITHOUT_CLASSIFICATION	2.366315786224817E-4	DESIGN
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9996687768481249	WITHOUT_CLASSIFICATION	3.312231518750593E-4	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9975898767217453	WITHOUT_CLASSIFICATION	0.0024101232782547037	DESIGN
//Custom SQL	WITHOUT_CLASSIFICATION	0.9975497471374337	WITHOUT_CLASSIFICATION	0.0024502528625662723	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9997633684213775	WITHOUT_CLASSIFICATION	2.366315786224817E-4	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9994525603159425	WITHOUT_CLASSIFICATION	5.474396840574171E-4	DESIGN
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9833833289396847	WITHOUT_CLASSIFICATION	0.016616671060315325	DESIGN
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9990731282262549	WITHOUT_CLASSIFICATION	9.268717737450358E-4	DESIGN
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9084475167079133	WITHOUT_CLASSIFICATION	0.09155248329208664	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9975898767217453	WITHOUT_CLASSIFICATION	0.0024101232782547037	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999078546321143	WITHOUT_CLASSIFICATION	9.214536788569337E-4	DESIGN
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999026196100551	WITHOUT_CLASSIFICATION	9.738038994492481E-5	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.992039610208435	WITHOUT_CLASSIFICATION	0.007960389791564989	DESIGN
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999658608096936	WITHOUT_CLASSIFICATION	3.4139190306484004E-5	DESIGN
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9975898767217453	WITHOUT_CLASSIFICATION	0.0024101232782547037	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9997543115385332	WITHOUT_CLASSIFICATION	2.456884614668442E-4	DESIGN
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9988122406498533	WITHOUT_CLASSIFICATION	0.0011877593501467536	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9990683035260378	WITHOUT_CLASSIFICATION	9.31696473962254E-4	DESIGN
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.998533286502802	WITHOUT_CLASSIFICATION	0.0014667134971979852	DESIGN
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.998533286502802	WITHOUT_CLASSIFICATION	0.0014667134971979852	DESIGN
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9610160030526438	WITHOUT_CLASSIFICATION	0.038983996947356284	DESIGN
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9981120229276748	WITHOUT_CLASSIFICATION	0.0018879770723252563	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9997633684213775	WITHOUT_CLASSIFICATION	2.366315786224817E-4	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999078546321143	WITHOUT_CLASSIFICATION	9.214536788569337E-4	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.992039610208435	WITHOUT_CLASSIFICATION	0.007960389791564989	DESIGN
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9995289928193125	WITHOUT_CLASSIFICATION	4.710071806874997E-4	DESIGN
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9997972262748612	WITHOUT_CLASSIFICATION	2.0277372513880537E-4	DESIGN
// discriminator column	WITHOUT_CLASSIFICATION	0.9998151063289875	WITHOUT_CLASSIFICATION	1.8489367101258162E-4	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9975898767217453	WITHOUT_CLASSIFICATION	0.0024101232782547037	DESIGN
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.999970586138778	WITHOUT_CLASSIFICATION	2.941386122207011E-5	DESIGN
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9998742035256748	WITHOUT_CLASSIFICATION	1.257964743251934E-4	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9990683035260378	WITHOUT_CLASSIFICATION	9.31696473962254E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.99908192969449	WITHOUT_CLASSIFICATION	9.180703055099814E-4	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9990683035260378	WITHOUT_CLASSIFICATION	9.31696473962254E-4	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9994525603159425	WITHOUT_CLASSIFICATION	5.474396840574171E-4	DESIGN
// JOINS	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9997353585025861	WITHOUT_CLASSIFICATION	2.646414974139639E-4	DESIGN
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9989289272427764	WITHOUT_CLASSIFICATION	0.0010710727572235776	DESIGN
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.993576735653488	WITHOUT_CLASSIFICATION	0.006423264346512068	DESIGN
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9996048679119514	WITHOUT_CLASSIFICATION	3.951320880486866E-4	DESIGN
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.999195591895214	WITHOUT_CLASSIFICATION	8.04408104785869E-4	DESIGN
//render the SQL	WITHOUT_CLASSIFICATION	0.9986274887088495	WITHOUT_CLASSIFICATION	0.0013725112911503665	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99950661017115	WITHOUT_CLASSIFICATION	4.933898288500955E-4	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9887507940395011	WITHOUT_CLASSIFICATION	0.011249205960499026	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994333320915777	WITHOUT_CLASSIFICATION	5.66667908422279E-4	DESIGN
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999951201724397	WITHOUT_CLASSIFICATION	4.879827560250814E-6	DESIGN
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9983018472291394	WITHOUT_CLASSIFICATION	0.00169815277086058	DESIGN
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9998278060160687	WITHOUT_CLASSIFICATION	1.7219398393135402E-4	DESIGN
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9993518653556487	WITHOUT_CLASSIFICATION	6.48134644351344E-4	DESIGN
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9997920538063565	WITHOUT_CLASSIFICATION	2.0794619364342828E-4	DESIGN
// SQL strings	WITHOUT_CLASSIFICATION	0.9989184149094227	WITHOUT_CLASSIFICATION	0.0010815850905772958	DESIGN
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999709562187471	WITHOUT_CLASSIFICATION	2.9043781252914967E-5	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.99908192969449	WITHOUT_CLASSIFICATION	9.180703055099814E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994333320915777	WITHOUT_CLASSIFICATION	5.66667908422279E-4	DESIGN
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9990683035260378	WITHOUT_CLASSIFICATION	9.31696473962254E-4	DESIGN
// VERSION	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9976597546908854	WITHOUT_CLASSIFICATION	0.0023402453091146405	DESIGN
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9991260248403582	WITHOUT_CLASSIFICATION	8.739751596417757E-4	DESIGN
//before add :-)	WITHOUT_CLASSIFICATION	0.9408301342030223	WITHOUT_CLASSIFICATION	0.059169865796977576	DESIGN
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9983715445264667	WITHOUT_CLASSIFICATION	0.0016284554735333172	DESIGN
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9998306181491662	WITHOUT_CLASSIFICATION	1.6938185083383904E-4	DESIGN
//note early exit here:	WITHOUT_CLASSIFICATION	0.9996759584600136	WITHOUT_CLASSIFICATION	3.2404153998642234E-4	DESIGN
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9992592053510788	WITHOUT_CLASSIFICATION	7.407946489211322E-4	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9997363606521502	WITHOUT_CLASSIFICATION	2.636393478498651E-4	DESIGN
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9994169229774427	WITHOUT_CLASSIFICATION	5.830770225573783E-4	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999636561979411	WITHOUT_CLASSIFICATION	3.634380205883277E-5	DESIGN
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.997653724661443	WITHOUT_CLASSIFICATION	0.0023462753385569135	DESIGN
//null owner ok??	WITHOUT_CLASSIFICATION	0.9988900269099963	WITHOUT_CLASSIFICATION	0.0011099730900037386	DESIGN
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999937384788218	WITHOUT_CLASSIFICATION	6.261521178223549E-6	DESIGN
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999547271110132	WITHOUT_CLASSIFICATION	4.52728889867605E-5	DESIGN
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.5238708596150718	DESIGN	0.4761291403849282	WITHOUT_CLASSIFICATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9993737160587253	WITHOUT_CLASSIFICATION	6.262839412746874E-4	DESIGN
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9957352147508521	WITHOUT_CLASSIFICATION	0.004264785249147871	DESIGN
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9962915659719433	WITHOUT_CLASSIFICATION	0.003708434028056753	DESIGN
// ALIASES	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9912890472367613	WITHOUT_CLASSIFICATION	0.00871095276323881	DESIGN
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9992172822510769	WITHOUT_CLASSIFICATION	7.827177489230006E-4	DESIGN
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.999763605495111	WITHOUT_CLASSIFICATION	2.3639450488894517E-4	DESIGN
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9310258354141286	WITHOUT_CLASSIFICATION	0.06897416458587129	DESIGN
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.5971997338298061	DESIGN	0.402800266170194	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9852475821514677	WITHOUT_CLASSIFICATION	0.014752417848532201	DESIGN
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9962631263828063	WITHOUT_CLASSIFICATION	0.0037368736171936472	DESIGN
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999228388281193	WITHOUT_CLASSIFICATION	7.716117188076527E-5	DESIGN
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.8199368488953198	WITHOUT_CLASSIFICATION	0.18006315110468019	DESIGN
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9761893159530569	WITHOUT_CLASSIFICATION	0.023810684046943097	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9997987816366415	WITHOUT_CLASSIFICATION	2.0121836335857402E-4	DESIGN
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9997615564365424	WITHOUT_CLASSIFICATION	2.3844356345758947E-4	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.8617010352350795	WITHOUT_CLASSIFICATION	0.13829896476492057	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9879898752745617	WITHOUT_CLASSIFICATION	0.012010124725438331	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9998518467398267	WITHOUT_CLASSIFICATION	1.4815326017323307E-4	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9996234521260443	WITHOUT_CLASSIFICATION	3.765478739556937E-4	DESIGN
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.975966634407776	WITHOUT_CLASSIFICATION	0.024033365592224007	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9998518467398267	WITHOUT_CLASSIFICATION	1.4815326017323307E-4	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9879898752745617	WITHOUT_CLASSIFICATION	0.012010124725438331	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9996234521260443	WITHOUT_CLASSIFICATION	3.765478739556937E-4	DESIGN
// add the primary key	WITHOUT_CLASSIFICATION	0.9998996633340931	WITHOUT_CLASSIFICATION	1.0033666590688231E-4	DESIGN
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999078450700574	WITHOUT_CLASSIFICATION	9.215492994263192E-5	DESIGN
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999424453263686	WITHOUT_CLASSIFICATION	5.755467363151062E-5	DESIGN
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9996502791888289	WITHOUT_CLASSIFICATION	3.4972081117107316E-4	DESIGN
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9996702226866503	WITHOUT_CLASSIFICATION	3.297773133496794E-4	DESIGN
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.5042482614613867	WITHOUT_CLASSIFICATION	0.49575173853861326	DESIGN
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9958364337092943	WITHOUT_CLASSIFICATION	0.004163566290705637	DESIGN
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9985212465250587	WITHOUT_CLASSIFICATION	0.0014787534749413334	DESIGN
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9922022336762611	WITHOUT_CLASSIFICATION	0.007797766323738878	DESIGN
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9976866665641585	WITHOUT_CLASSIFICATION	0.002313333435841423	DESIGN
// starting index	WITHOUT_CLASSIFICATION	0.9998246004170954	WITHOUT_CLASSIFICATION	1.7539958290466336E-4	DESIGN
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9995890021893872	WITHOUT_CLASSIFICATION	4.1099781061278997E-4	DESIGN
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9994899195443222	WITHOUT_CLASSIFICATION	5.100804556777739E-4	DESIGN
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9990945011418713	WITHOUT_CLASSIFICATION	9.054988581286532E-4	DESIGN
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9986842100335204	WITHOUT_CLASSIFICATION	0.0013157899664796502	DESIGN
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9992528302242659	WITHOUT_CLASSIFICATION	7.471697757341261E-4	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9908205933790543	WITHOUT_CLASSIFICATION	0.009179406620945784	DESIGN
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9998430380149912	WITHOUT_CLASSIFICATION	1.5696198500873853E-4	DESIGN
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9997585763098106	WITHOUT_CLASSIFICATION	2.4142369018951787E-4	DESIGN
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.999888732174936	WITHOUT_CLASSIFICATION	1.1126782506396942E-4	DESIGN
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.7190700832357771	WITHOUT_CLASSIFICATION	0.2809299167642228	DESIGN
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999067357755255	WITHOUT_CLASSIFICATION	9.326422447461287E-5	DESIGN
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9995508292936515	WITHOUT_CLASSIFICATION	4.491707063485601E-4	DESIGN
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999820307127009	WITHOUT_CLASSIFICATION	1.7969287299098906E-5	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9998883974565906	WITHOUT_CLASSIFICATION	1.1160254340937291E-4	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9998883974565906	WITHOUT_CLASSIFICATION	1.1160254340937291E-4	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9998177697317551	WITHOUT_CLASSIFICATION	1.8223026824487306E-4	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9998177697317551	WITHOUT_CLASSIFICATION	1.8223026824487306E-4	DESIGN
// not supported	WITHOUT_CLASSIFICATION	0.9976360829960784	WITHOUT_CLASSIFICATION	0.002363917003921666	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9908205933790543	WITHOUT_CLASSIFICATION	0.009179406620945784	DESIGN
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9981433459030628	WITHOUT_CLASSIFICATION	0.0018566540969373305	DESIGN
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9994515720473102	WITHOUT_CLASSIFICATION	5.484279526899128E-4	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.989468968566331	WITHOUT_CLASSIFICATION	0.010531031433668896	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.989468968566331	WITHOUT_CLASSIFICATION	0.010531031433668896	DESIGN
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999113209311786	WITHOUT_CLASSIFICATION	8.867906882136553E-5	DESIGN
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9994557787176149	WITHOUT_CLASSIFICATION	5.442212823850422E-4	DESIGN
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.999863047393462	WITHOUT_CLASSIFICATION	1.3695260653799921E-4	DESIGN
//skip the driving table	WITHOUT_CLASSIFICATION	0.9996800763175461	WITHOUT_CLASSIFICATION	3.1992368245398867E-4	DESIGN
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.8190417538223375	WITHOUT_CLASSIFICATION	0.18095824617766257	DESIGN
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9995444605686421	WITHOUT_CLASSIFICATION	4.555394313578728E-4	DESIGN
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9987685583767403	WITHOUT_CLASSIFICATION	0.0012314416232597817	DESIGN
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9994336172617864	WITHOUT_CLASSIFICATION	5.663827382136313E-4	DESIGN
//now render the joins	WITHOUT_CLASSIFICATION	0.9972826290012675	WITHOUT_CLASSIFICATION	0.0027173709987324515	DESIGN
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9978688992036734	WITHOUT_CLASSIFICATION	0.002131100796326601	DESIGN
//now render the select clause	WITHOUT_CLASSIFICATION	0.9992418722378553	WITHOUT_CLASSIFICATION	7.58127762144607E-4	DESIGN
//now tie it all together	WITHOUT_CLASSIFICATION	0.9991416728685257	WITHOUT_CLASSIFICATION	8.58327131474246E-4	DESIGN
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9976532181998016	WITHOUT_CLASSIFICATION	0.0023467818001984228	DESIGN
//select SQL	WITHOUT_CLASSIFICATION	0.9982645182698283	WITHOUT_CLASSIFICATION	0.0017354817301716246	DESIGN
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9510393101803496	WITHOUT_CLASSIFICATION	0.04896068981965041	DESIGN
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9997954877405719	WITHOUT_CLASSIFICATION	2.0451225942811472E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.993674138422209	WITHOUT_CLASSIFICATION	0.006325861577790935	DESIGN
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999758308375852	WITHOUT_CLASSIFICATION	2.416916241483483E-5	DESIGN
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9824097244974034	WITHOUT_CLASSIFICATION	0.017590275502596647	DESIGN
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9777148591827816	WITHOUT_CLASSIFICATION	0.022285140817218455	DESIGN
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999496347028495	WITHOUT_CLASSIFICATION	5.0365297150570395E-5	DESIGN
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9961306135806969	WITHOUT_CLASSIFICATION	0.0038693864193031203	DESIGN
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9998012605938392	WITHOUT_CLASSIFICATION	1.987394061607292E-4	DESIGN
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9997550528186406	WITHOUT_CLASSIFICATION	2.4494718135932174E-4	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.99855222462506	WITHOUT_CLASSIFICATION	0.0014477753749400292	DESIGN
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999195918956149	WITHOUT_CLASSIFICATION	8.040810438517515E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994333320915777	WITHOUT_CLASSIFICATION	5.66667908422279E-4	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999636561979411	WITHOUT_CLASSIFICATION	3.634380205883277E-5	DESIGN
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.999613415211292	WITHOUT_CLASSIFICATION	3.865847887081149E-4	DESIGN
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9992171476961298	WITHOUT_CLASSIFICATION	7.828523038703012E-4	DESIGN
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999170315851411	WITHOUT_CLASSIFICATION	8.296841485889764E-4	DESIGN
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995999261669564	WITHOUT_CLASSIFICATION	4.000738330435245E-4	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9913298318565106	WITHOUT_CLASSIFICATION	0.008670168143489412	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9913298318565106	WITHOUT_CLASSIFICATION	0.008670168143489412	DESIGN
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999979856971616	WITHOUT_CLASSIFICATION	2.014302838370215E-6	DESIGN
// try "get"	WITHOUT_CLASSIFICATION	0.9996927701933044	WITHOUT_CLASSIFICATION	3.072298066955475E-4	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9986678998885837	WITHOUT_CLASSIFICATION	0.0013321001114162331	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9986678998885837	WITHOUT_CLASSIFICATION	0.0013321001114162331	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998144314873747	WITHOUT_CLASSIFICATION	1.8556851262524666E-4	DESIGN
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.998314695242371	WITHOUT_CLASSIFICATION	0.001685304757628934	DESIGN
// do not do anything	WITHOUT_CLASSIFICATION	0.9986460478898469	WITHOUT_CLASSIFICATION	0.0013539521101531493	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9998505896269032	WITHOUT_CLASSIFICATION	1.4941037309680418E-4	DESIGN
//cant instantiate	WITHOUT_CLASSIFICATION	0.9987362010066372	WITHOUT_CLASSIFICATION	0.0012637989933627276	DESIGN
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9996272589502864	WITHOUT_CLASSIFICATION	3.727410497135983E-4	DESIGN
// otherwise:	WITHOUT_CLASSIFICATION	0.9990683035260378	WITHOUT_CLASSIFICATION	9.31696473962254E-4	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9993373870280128	WITHOUT_CLASSIFICATION	6.626129719873013E-4	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9997215487979694	WITHOUT_CLASSIFICATION	2.7845120203059476E-4	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9997215487979694	WITHOUT_CLASSIFICATION	2.7845120203059476E-4	DESIGN
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.8226201854894148	WITHOUT_CLASSIFICATION	0.17737981451058513	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9983395662834157	WITHOUT_CLASSIFICATION	0.0016604337165843218	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9983395662834157	WITHOUT_CLASSIFICATION	0.0016604337165843218	DESIGN
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9997526127708607	WITHOUT_CLASSIFICATION	2.4738722913930416E-4	DESIGN
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9991331704672042	WITHOUT_CLASSIFICATION	8.668295327957343E-4	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9991897437067582	WITHOUT_CLASSIFICATION	8.102562932417271E-4	DESIGN
// Get the caller	WITHOUT_CLASSIFICATION	0.9998875630482799	WITHOUT_CLASSIFICATION	1.1243695172012075E-4	DESIGN
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9998930918484507	WITHOUT_CLASSIFICATION	1.0690815154933329E-4	DESIGN
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.99987817549745	WITHOUT_CLASSIFICATION	1.2182450255003062E-4	DESIGN
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9089919905402625	WITHOUT_CLASSIFICATION	0.09100800945973754	DESIGN
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9993918597665353	WITHOUT_CLASSIFICATION	6.08140233464666E-4	DESIGN
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999282675449553	WITHOUT_CLASSIFICATION	7.173245504462532E-5	DESIGN
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9950098329684384	WITHOUT_CLASSIFICATION	0.004990167031561567	DESIGN
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9995876064245343	WITHOUT_CLASSIFICATION	4.1239357546568476E-4	DESIGN
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9967494290439327	WITHOUT_CLASSIFICATION	0.003250570956067386	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9977954939819255	WITHOUT_CLASSIFICATION	0.0022045060180744705	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9977954939819255	WITHOUT_CLASSIFICATION	0.0022045060180744705	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9977954939819255	WITHOUT_CLASSIFICATION	0.0022045060180744705	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9977954939819255	WITHOUT_CLASSIFICATION	0.0022045060180744705	DESIGN
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999756678587698	WITHOUT_CLASSIFICATION	2.4332141230222236E-5	DESIGN
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9991017899502498	WITHOUT_CLASSIFICATION	8.982100497503122E-4	DESIGN
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9977081294122975	WITHOUT_CLASSIFICATION	0.0022918705877024597	DESIGN
//for MySQL	WITHOUT_CLASSIFICATION	0.9984583421055679	WITHOUT_CLASSIFICATION	0.0015416578944320418	DESIGN
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.999759359124584	WITHOUT_CLASSIFICATION	2.4064087541604898E-4	DESIGN
//null caused some problems	WITHOUT_CLASSIFICATION	0.9947689010544942	WITHOUT_CLASSIFICATION	0.005231098945505836	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9977782340280895	WITHOUT_CLASSIFICATION	0.0022217659719105235	DESIGN
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9998798022050932	WITHOUT_CLASSIFICATION	1.2019779490679799E-4	DESIGN
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9975251205787815	WITHOUT_CLASSIFICATION	0.002474879421218499	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9977782340280895	WITHOUT_CLASSIFICATION	0.0022217659719105235	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9977782340280895	WITHOUT_CLASSIFICATION	0.0022217659719105235	DESIGN
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999850088856751	WITHOUT_CLASSIFICATION	1.4991114324768798E-5	DESIGN
// we only release the connection	WITHOUT_CLASSIFICATION	0.9982590750286381	WITHOUT_CLASSIFICATION	0.0017409249713619156	DESIGN
// deprecated option...	WITHOUT_CLASSIFICATION	0.9760161537400124	WITHOUT_CLASSIFICATION	0.02398384625998769	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.99927060327321	WITHOUT_CLASSIFICATION	7.293967267899087E-4	DESIGN
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9990575161855202	WITHOUT_CLASSIFICATION	9.424838144797944E-4	DESIGN
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9956677681674757	WITHOUT_CLASSIFICATION	0.0043322318325242385	DESIGN
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999194549965194	WITHOUT_CLASSIFICATION	8.054500348060228E-5	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.99927060327321	WITHOUT_CLASSIFICATION	7.293967267899087E-4	DESIGN
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.937627571106245	DESIGN	0.062372428893755	WITHOUT_CLASSIFICATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9946752458834694	WITHOUT_CLASSIFICATION	0.005324754116530595	DESIGN
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999426923396331	WITHOUT_CLASSIFICATION	5.7307660366890137E-5	DESIGN
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9983970716561117	WITHOUT_CLASSIFICATION	0.0016029283438882833	DESIGN
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9991842223163162	WITHOUT_CLASSIFICATION	8.157776836837861E-4	DESIGN
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9987151259667688	WITHOUT_CLASSIFICATION	0.0012848740332311816	DESIGN
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9994789725310107	WITHOUT_CLASSIFICATION	5.210274689892548E-4	DESIGN
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9994681147964039	WITHOUT_CLASSIFICATION	5.318852035961575E-4	DESIGN
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999690273860414	WITHOUT_CLASSIFICATION	3.097261395855097E-5	DESIGN
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9998715181112025	WITHOUT_CLASSIFICATION	1.284818887974431E-4	DESIGN
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999690273860414	WITHOUT_CLASSIFICATION	3.097261395855097E-5	DESIGN
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999729652805627	WITHOUT_CLASSIFICATION	2.7034719437211803E-5	DESIGN
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9953739467287096	WITHOUT_CLASSIFICATION	0.0046260532712904204	DESIGN
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9997142855510183	WITHOUT_CLASSIFICATION	2.8571444898178427E-4	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9997538087328061	WITHOUT_CLASSIFICATION	2.4619126719398833E-4	DESIGN
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.8729663433923778	WITHOUT_CLASSIFICATION	0.12703365660762223	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999198166503981	WITHOUT_CLASSIFICATION	8.018334960188752E-5	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999774002625356	WITHOUT_CLASSIFICATION	2.2599737464393686E-4	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9996861035886039	WITHOUT_CLASSIFICATION	3.1389641139617643E-4	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999774002625356	WITHOUT_CLASSIFICATION	2.2599737464393686E-4	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999233767610419	WITHOUT_CLASSIFICATION	7.66232389580341E-5	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999973367121237	WITHOUT_CLASSIFICATION	2.663287876307445E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9995623261867761	WITHOUT_CLASSIFICATION	4.376738132237987E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9997600362709709	WITHOUT_CLASSIFICATION	2.3996372902910105E-4	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999198166503981	WITHOUT_CLASSIFICATION	8.018334960188752E-5	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9996861035886039	WITHOUT_CLASSIFICATION	3.1389641139617643E-4	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999233767610419	WITHOUT_CLASSIFICATION	7.66232389580341E-5	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9990649167988699	WITHOUT_CLASSIFICATION	9.350832011301795E-4	DESIGN
//return currentId;	WITHOUT_CLASSIFICATION	0.9965820165071919	WITHOUT_CLASSIFICATION	0.003417983492808009	DESIGN
//reset the id	WITHOUT_CLASSIFICATION	0.9983602681276086	WITHOUT_CLASSIFICATION	0.0016397318723913009	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
//reset the version	WITHOUT_CLASSIFICATION	0.999298013013951	WITHOUT_CLASSIFICATION	7.01986986048929E-4	DESIGN
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9891502439434358	WITHOUT_CLASSIFICATION	0.010849756056564177	DESIGN
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9998696909653378	WITHOUT_CLASSIFICATION	1.3030903466209262E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.993674138422209	WITHOUT_CLASSIFICATION	0.006325861577790935	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999973367121237	WITHOUT_CLASSIFICATION	2.663287876307445E-5	DESIGN
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999345518512899	WITHOUT_CLASSIFICATION	6.544814871009505E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999002015159004	WITHOUT_CLASSIFICATION	9.97984840996627E-5	DESIGN
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9991794072776887	WITHOUT_CLASSIFICATION	8.205927223113716E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.993674138422209	WITHOUT_CLASSIFICATION	0.006325861577790935	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994333320915777	WITHOUT_CLASSIFICATION	5.66667908422279E-4	DESIGN
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.999595230146089	WITHOUT_CLASSIFICATION	4.04769853911091E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.993674138422209	WITHOUT_CLASSIFICATION	0.006325861577790935	DESIGN
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9995427308466769	WITHOUT_CLASSIFICATION	4.57269153323122E-4	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998744223792498	WITHOUT_CLASSIFICATION	1.2557762075008483E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994333320915777	WITHOUT_CLASSIFICATION	5.66667908422279E-4	DESIGN
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9976600518341685	WITHOUT_CLASSIFICATION	0.002339948165831398	DESIGN
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9997320208105082	WITHOUT_CLASSIFICATION	2.6797918949188985E-4	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9998519492264311	WITHOUT_CLASSIFICATION	1.4805077356901773E-4	DESIGN
// Collection Types:	WITHOUT_CLASSIFICATION	0.998905627264173	WITHOUT_CLASSIFICATION	0.0010943727358270652	DESIGN
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999164689575466	WITHOUT_CLASSIFICATION	8.353104245329153E-5	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9993792030082005	WITHOUT_CLASSIFICATION	6.207969917995368E-4	DESIGN
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9994915922878921	WITHOUT_CLASSIFICATION	5.08407712107872E-4	DESIGN
//value is the entity name	WITHOUT_CLASSIFICATION	0.9960257535181237	WITHOUT_CLASSIFICATION	0.003974246481876297	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9975898767217453	WITHOUT_CLASSIFICATION	0.0024101232782547037	DESIGN
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9997726481961944	WITHOUT_CLASSIFICATION	2.273518038057498E-4	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9991897437067582	WITHOUT_CLASSIFICATION	8.102562932417271E-4	DESIGN
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9959070020751115	WITHOUT_CLASSIFICATION	0.0040929979248885634	DESIGN
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9237830104361184	WITHOUT_CLASSIFICATION	0.07621698956388166	DESIGN
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9984145236253562	WITHOUT_CLASSIFICATION	0.001585476374643885	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9977081294122975	WITHOUT_CLASSIFICATION	0.0022918705877024597	DESIGN
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9981702941137895	WITHOUT_CLASSIFICATION	0.0018297058862104293	DESIGN
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9998594302285797	WITHOUT_CLASSIFICATION	1.405697714203478E-4	DESIGN
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9994451618964196	WITHOUT_CLASSIFICATION	5.548381035803909E-4	DESIGN
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.6522374974284774	WITHOUT_CLASSIFICATION	0.34776250257152264	DESIGN
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9945418510629646	WITHOUT_CLASSIFICATION	0.005458148937035377	DESIGN
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9897903828523708	WITHOUT_CLASSIFICATION	0.010209617147629309	DESIGN
//TODO!!!	WITHOUT_CLASSIFICATION	0.9991897437067582	WITHOUT_CLASSIFICATION	8.102562932417271E-4	DESIGN
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999056572865502	WITHOUT_CLASSIFICATION	9.434271344969121E-5	DESIGN
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999056572865502	WITHOUT_CLASSIFICATION	9.434271344969121E-5	DESIGN
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9982936146084243	WITHOUT_CLASSIFICATION	0.0017063853915757728	DESIGN
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9992470771647967	WITHOUT_CLASSIFICATION	7.529228352034091E-4	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9996806518282698	WITHOUT_CLASSIFICATION	3.193481717300906E-4	DESIGN
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999879371789854	WITHOUT_CLASSIFICATION	1.2062821014708747E-5	DESIGN
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9995067067153329	WITHOUT_CLASSIFICATION	4.93293284667005E-4	DESIGN
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.999837486743705	WITHOUT_CLASSIFICATION	1.6251325629491482E-4	DESIGN
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9977444782494428	WITHOUT_CLASSIFICATION	0.0022555217505572335	DESIGN
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9998858954895363	WITHOUT_CLASSIFICATION	1.1410451046368822E-4	DESIGN
//TODO	WITHOUT_CLASSIFICATION	0.5631123366291938	DESIGN	0.4368876633708063	WITHOUT_CLASSIFICATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.999871614107295	WITHOUT_CLASSIFICATION	1.2838589270509549E-4	DESIGN
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9991949054230947	WITHOUT_CLASSIFICATION	8.050945769053084E-4	DESIGN
//cache this	WITHOUT_CLASSIFICATION	0.9862987708443756	WITHOUT_CLASSIFICATION	0.013701229155624413	DESIGN
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9966218213313687	WITHOUT_CLASSIFICATION	0.003378178668631339	DESIGN
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9995752099855362	WITHOUT_CLASSIFICATION	4.247900144637805E-4	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9975898767217453	WITHOUT_CLASSIFICATION	0.0024101232782547037	DESIGN
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9998721006345309	WITHOUT_CLASSIFICATION	1.2789936546914757E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994333320915777	WITHOUT_CLASSIFICATION	5.66667908422279E-4	DESIGN
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9994387456449461	WITHOUT_CLASSIFICATION	5.612543550538924E-4	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9955038723740293	WITHOUT_CLASSIFICATION	0.004496127625970771	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9955038723740293	WITHOUT_CLASSIFICATION	0.004496127625970771	DESIGN
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999925003530383	WITHOUT_CLASSIFICATION	7.49964696167793E-6	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9993792030082005	WITHOUT_CLASSIFICATION	6.207969917995368E-4	DESIGN
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9857891608332604	WITHOUT_CLASSIFICATION	0.014210839166739509	DESIGN
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999623378963357	WITHOUT_CLASSIFICATION	3.7662103664221636E-5	DESIGN
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999576541150477	WITHOUT_CLASSIFICATION	4.234588495230934E-5	DESIGN
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9998917819643023	WITHOUT_CLASSIFICATION	1.082180356977082E-4	DESIGN
//remember the uk value	WITHOUT_CLASSIFICATION	0.9991277595469061	WITHOUT_CLASSIFICATION	8.722404530938302E-4	DESIGN
//NOOP	WITHOUT_CLASSIFICATION	0.9992391638691474	WITHOUT_CLASSIFICATION	7.608361308527775E-4	DESIGN
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.998533286502802	WITHOUT_CLASSIFICATION	0.0014667134971979852	DESIGN
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9998807091571654	WITHOUT_CLASSIFICATION	1.1929084283447206E-4	DESIGN
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9952827030043062	WITHOUT_CLASSIFICATION	0.004717296995693834	DESIGN
// return false;	WITHOUT_CLASSIFICATION	0.9990397143302606	WITHOUT_CLASSIFICATION	9.602856697393471E-4	DESIGN
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9974021418115986	WITHOUT_CLASSIFICATION	0.0025978581884014886	DESIGN
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999131460178062	WITHOUT_CLASSIFICATION	8.685398219375956E-5	DESIGN
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9997939221289692	WITHOUT_CLASSIFICATION	2.060778710308084E-4	DESIGN
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999864389543393	WITHOUT_CLASSIFICATION	1.3561045660715778E-5	DESIGN
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9986393734386685	WITHOUT_CLASSIFICATION	0.0013606265613314314	DESIGN
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999419357809051	WITHOUT_CLASSIFICATION	5.806421909498039E-5	DESIGN
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999808673611769	WITHOUT_CLASSIFICATION	1.9132638823126907E-5	DESIGN
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9997716420666893	WITHOUT_CLASSIFICATION	2.2835793331073132E-4	DESIGN
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999869562628041	WITHOUT_CLASSIFICATION	1.3043737196044281E-5	DESIGN
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9994882487127419	WITHOUT_CLASSIFICATION	5.11751287258232E-4	DESIGN
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9998929321765182	WITHOUT_CLASSIFICATION	1.0706782348176738E-4	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9419762499956397	WITHOUT_CLASSIFICATION	0.058023750004360324	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9975898767217453	WITHOUT_CLASSIFICATION	0.0024101232782547037	DESIGN
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9097166146261583	WITHOUT_CLASSIFICATION	0.0902833853738417	DESIGN
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9998821372166247	WITHOUT_CLASSIFICATION	1.178627833753408E-4	DESIGN
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999752885776112	WITHOUT_CLASSIFICATION	2.471142238877838E-5	DESIGN
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9966131413206002	WITHOUT_CLASSIFICATION	0.003386858679399682	DESIGN
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9977706686301506	WITHOUT_CLASSIFICATION	0.0022293313698493987	DESIGN
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9926156892687625	WITHOUT_CLASSIFICATION	0.007384310731237504	DESIGN
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9994353574071259	WITHOUT_CLASSIFICATION	5.646425928741116E-4	DESIGN
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9994791071989582	WITHOUT_CLASSIFICATION	5.208928010418428E-4	DESIGN
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999983107663982	WITHOUT_CLASSIFICATION	1.6892336018322851E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9992929894439747	WITHOUT_CLASSIFICATION	7.070105560253921E-4	DESIGN
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9986451532695941	WITHOUT_CLASSIFICATION	0.0013548467304059211	DESIGN
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9995878042840957	WITHOUT_CLASSIFICATION	4.121957159043809E-4	DESIGN
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9991901011071251	WITHOUT_CLASSIFICATION	8.09898892874858E-4	DESIGN
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999293054910048	WITHOUT_CLASSIFICATION	7.069450899526632E-5	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9978494780041539	WITHOUT_CLASSIFICATION	0.002150521995846025	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9978494780041539	WITHOUT_CLASSIFICATION	0.002150521995846025	DESIGN
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9996223249549028	WITHOUT_CLASSIFICATION	3.776750450971594E-4	DESIGN
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9997218591782578	WITHOUT_CLASSIFICATION	2.781408217420601E-4	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9967817256121873	WITHOUT_CLASSIFICATION	0.0032182743878127157	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9967817256121873	WITHOUT_CLASSIFICATION	0.0032182743878127157	DESIGN
// use default behavior	WITHOUT_CLASSIFICATION	0.9979877735610017	WITHOUT_CLASSIFICATION	0.002012226438998285	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9989717792103304	WITHOUT_CLASSIFICATION	0.0010282207896696752	DESIGN
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.6313564956692822	DESIGN	0.3686435043307178	WITHOUT_CLASSIFICATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9998663946377472	WITHOUT_CLASSIFICATION	1.3360536225283165E-4	DESIGN
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9983136184670545	WITHOUT_CLASSIFICATION	0.001686381532945491	DESIGN
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9994333320915777	WITHOUT_CLASSIFICATION	5.66667908422279E-4	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.999961278227439	WITHOUT_CLASSIFICATION	3.872177256102812E-5	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.999961278227439	WITHOUT_CLASSIFICATION	3.872177256102812E-5	DESIGN
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9994333320915777	WITHOUT_CLASSIFICATION	5.66667908422279E-4	DESIGN
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9959628638588977	WITHOUT_CLASSIFICATION	0.004037136141102302	DESIGN
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9977899681536813	WITHOUT_CLASSIFICATION	0.002210031846318681	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.999073072526171	WITHOUT_CLASSIFICATION	9.269274738291408E-4	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.999073072526171	WITHOUT_CLASSIFICATION	9.269274738291408E-4	DESIGN
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999094322487683	WITHOUT_CLASSIFICATION	9.056775123167709E-5	DESIGN
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9998472299405963	WITHOUT_CLASSIFICATION	1.527700594037137E-4	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9985230751599888	WITHOUT_CLASSIFICATION	0.001476924840011263	DESIGN
// first time we find match!	WITHOUT_CLASSIFICATION	0.9995291213861441	WITHOUT_CLASSIFICATION	4.708786138558949E-4	DESIGN
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9997928935605074	WITHOUT_CLASSIFICATION	2.0710643949264215E-4	DESIGN
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9932608001533915	WITHOUT_CLASSIFICATION	0.006739199846608501	DESIGN
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999579089748316	WITHOUT_CLASSIFICATION	4.209102516835693E-5	DESIGN
// the current iterator	WITHOUT_CLASSIFICATION	0.9999103989828649	WITHOUT_CLASSIFICATION	8.960101713504631E-5	DESIGN
// the last used iterator	WITHOUT_CLASSIFICATION	0.9755683196189445	WITHOUT_CLASSIFICATION	0.02443168038105543	DESIGN
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9998153106712515	WITHOUT_CLASSIFICATION	1.846893287486017E-4	DESIGN
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.994313984794388	WITHOUT_CLASSIFICATION	0.005686015205612004	DESIGN
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9959713561531902	WITHOUT_CLASSIFICATION	0.0040286438468097735	DESIGN
//doable if needed	WITHOUT_CLASSIFICATION	0.9990524485485348	WITHOUT_CLASSIFICATION	9.47551451465235E-4	DESIGN
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9843830214166767	WITHOUT_CLASSIFICATION	0.01561697858332326	DESIGN
// peek ahead	WITHOUT_CLASSIFICATION	0.9981291297361456	WITHOUT_CLASSIFICATION	0.0018708702638543689	DESIGN
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9998322764944626	WITHOUT_CLASSIFICATION	1.6772350553732692E-4	DESIGN
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9995260190133275	WITHOUT_CLASSIFICATION	4.739809866724844E-4	DESIGN
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9995763362182792	WITHOUT_CLASSIFICATION	4.236637817206569E-4	DESIGN
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9990552340517495	WITHOUT_CLASSIFICATION	9.447659482506351E-4	DESIGN
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9849381261484649	WITHOUT_CLASSIFICATION	0.01506187385153509	DESIGN
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9836658374295825	WITHOUT_CLASSIFICATION	0.01633416257041751	DESIGN
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9974712458372994	WITHOUT_CLASSIFICATION	0.0025287541627005846	DESIGN
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9983562066772086	WITHOUT_CLASSIFICATION	0.0016437933227914313	DESIGN
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9963531106095134	WITHOUT_CLASSIFICATION	0.0036468893904865875	DESIGN
//faster?	WITHOUT_CLASSIFICATION	0.9991897437067582	WITHOUT_CLASSIFICATION	8.102562932417271E-4	DESIGN
// the name of a class	WITHOUT_CLASSIFICATION	0.9985257261260125	WITHOUT_CLASSIFICATION	0.0014742738739873511	DESIGN
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9987382787453529	WITHOUT_CLASSIFICATION	0.0012617212546471414	DESIGN
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9977081294122975	WITHOUT_CLASSIFICATION	0.0022918705877024597	DESIGN
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9997899944140355	WITHOUT_CLASSIFICATION	2.1000558596453596E-4	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9990450911335578	WITHOUT_CLASSIFICATION	9.549088664422547E-4	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.718630994556859	WITHOUT_CLASSIFICATION	0.2813690054431409	DESIGN
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9998323672507331	WITHOUT_CLASSIFICATION	1.676327492668326E-4	DESIGN
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9996388956777663	WITHOUT_CLASSIFICATION	3.611043222337316E-4	DESIGN
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9977081294122975	WITHOUT_CLASSIFICATION	0.0022918705877024597	DESIGN
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9584391742698763	WITHOUT_CLASSIFICATION	0.04156082573012356	DESIGN
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9977081294122975	WITHOUT_CLASSIFICATION	0.0022918705877024597	DESIGN
//readResolveObject	WITHOUT_CLASSIFICATION	0.9975898767217453	WITHOUT_CLASSIFICATION	0.0024101232782547037	DESIGN
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.998533286502802	WITHOUT_CLASSIFICATION	0.0014667134971979852	DESIGN
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.999751697694954	WITHOUT_CLASSIFICATION	2.483023050460441E-4	DESIGN
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9997778534172467	WITHOUT_CLASSIFICATION	2.22146582753353E-4	DESIGN
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999106180620932	WITHOUT_CLASSIFICATION	8.938193790670485E-5	DESIGN
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9995143880075681	WITHOUT_CLASSIFICATION	4.8561199243186444E-4	DESIGN
// Write HTML header	WITHOUT_CLASSIFICATION	0.9982733013940325	WITHOUT_CLASSIFICATION	0.0017266986059674637	DESIGN
// Handle actions	WITHOUT_CLASSIFICATION	0.998677500651223	WITHOUT_CLASSIFICATION	0.0013224993487770409	DESIGN
// Print page	WITHOUT_CLASSIFICATION	0.998585988967629	WITHOUT_CLASSIFICATION	0.0014140110323710045	DESIGN
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9994588626805118	WITHOUT_CLASSIFICATION	5.4113731948822E-4	DESIGN
// End unit of work	WITHOUT_CLASSIFICATION	0.9991764407078673	WITHOUT_CLASSIFICATION	8.235592921327977E-4	DESIGN
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.7414049566346707	WITHOUT_CLASSIFICATION	0.2585950433653293	DESIGN
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9964221758614273	WITHOUT_CLASSIFICATION	0.0035778241385726194	DESIGN
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.999977395270219	WITHOUT_CLASSIFICATION	2.260472978096629E-5	DESIGN
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9945846272822514	WITHOUT_CLASSIFICATION	0.005415372717748611	DESIGN
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9959706808775001	WITHOUT_CLASSIFICATION	0.004029319122499956	DESIGN
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9332024615433531	WITHOUT_CLASSIFICATION	0.06679753845664693	DESIGN
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9958779506709131	WITHOUT_CLASSIFICATION	0.004122049329086829	DESIGN
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9996181961546857	WITHOUT_CLASSIFICATION	3.818038453142464E-4	DESIGN
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999253174930326	WITHOUT_CLASSIFICATION	7.468250696740527E-5	DESIGN
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9997297018584604	WITHOUT_CLASSIFICATION	2.7029814153955924E-4	DESIGN
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9993053212505705	WITHOUT_CLASSIFICATION	6.946787494296632E-4	DESIGN
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9968621104125507	WITHOUT_CLASSIFICATION	0.003137889587449262	DESIGN
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9997047792357776	WITHOUT_CLASSIFICATION	2.952207642224226E-4	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999569595511868	WITHOUT_CLASSIFICATION	4.3040448813286647E-5	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999569595511868	WITHOUT_CLASSIFICATION	4.3040448813286647E-5	DESIGN
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999631004504427	WITHOUT_CLASSIFICATION	3.6899549557306265E-5	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999527893881354	WITHOUT_CLASSIFICATION	4.7210611864641266E-5	DESIGN
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999462483989178	WITHOUT_CLASSIFICATION	5.375160108224723E-5	DESIGN
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9979566712529016	WITHOUT_CLASSIFICATION	0.002043328747098405	DESIGN
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999829026524049	WITHOUT_CLASSIFICATION	1.7097347595163423E-5	DESIGN
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9976971035932329	WITHOUT_CLASSIFICATION	0.002302896406767066	DESIGN
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999997604475386	WITHOUT_CLASSIFICATION	2.395524614868761E-7	DESIGN
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999982520167715	WITHOUT_CLASSIFICATION	1.7479832285103877E-6	DESIGN
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9982147331621177	WITHOUT_CLASSIFICATION	0.0017852668378822193	DESIGN
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9997253473059406	WITHOUT_CLASSIFICATION	2.7465269405934663E-4	DESIGN
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999954880112855	WITHOUT_CLASSIFICATION	4.5119887145592405E-6	DESIGN
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9872993176944049	WITHOUT_CLASSIFICATION	0.01270068230559509	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999997982605433	WITHOUT_CLASSIFICATION	2.017394566948046E-7	DESIGN
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9992916038728266	WITHOUT_CLASSIFICATION	7.083961271734426E-4	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9989848265775519	WITHOUT_CLASSIFICATION	0.0010151734224481289	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9989848265775519	WITHOUT_CLASSIFICATION	0.0010151734224481289	DESIGN
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9994140596813733	WITHOUT_CLASSIFICATION	5.859403186267322E-4	DESIGN
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9996610737259559	WITHOUT_CLASSIFICATION	3.3892627404407034E-4	DESIGN
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9980029630344314	WITHOUT_CLASSIFICATION	0.0019970369655685593	DESIGN
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.999927123947746	WITHOUT_CLASSIFICATION	7.28760522540205E-5	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999351880791674	WITHOUT_CLASSIFICATION	6.481192083264698E-5	DESIGN
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996036330028818	WITHOUT_CLASSIFICATION	3.963669971182791E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
//element //index -> id	WITHOUT_CLASSIFICATION	0.9993486588091537	WITHOUT_CLASSIFICATION	6.513411908462377E-4	DESIGN
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9171918343207021	WITHOUT_CLASSIFICATION	0.08280816567929798	DESIGN
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999732906345368	WITHOUT_CLASSIFICATION	2.670936546324359E-5	DESIGN
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999965991852974	WITHOUT_CLASSIFICATION	3.400814702566957E-6	DESIGN
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999476886237926	WITHOUT_CLASSIFICATION	5.231137620741194E-5	DESIGN
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9948099297924302	WITHOUT_CLASSIFICATION	0.005190070207569761	DESIGN
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999680333937186	WITHOUT_CLASSIFICATION	3.1966606281330456E-5	DESIGN
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9997965108885045	WITHOUT_CLASSIFICATION	2.0348911149546114E-4	DESIGN
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.93298904383477	WITHOUT_CLASSIFICATION	0.06701095616522997	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9951473993107444	WITHOUT_CLASSIFICATION	0.004852600689255655	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999364324428346	WITHOUT_CLASSIFICATION	6.356755716546884E-5	DESIGN
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999959766739129	WITHOUT_CLASSIFICATION	4.023326087129013E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9888391007358299	WITHOUT_CLASSIFICATION	0.011160899264170085	DESIGN
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.999987694236601	WITHOUT_CLASSIFICATION	1.230576339884068E-5	DESIGN
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9998858978811567	WITHOUT_CLASSIFICATION	1.1410211884332887E-4	DESIGN
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999997017952924	WITHOUT_CLASSIFICATION	2.982047076154119E-7	DESIGN
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9992228598940052	WITHOUT_CLASSIFICATION	7.771401059948219E-4	DESIGN
//Named Queries:	WITHOUT_CLASSIFICATION	0.9975898767217453	WITHOUT_CLASSIFICATION	0.0024101232782547037	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.6975620646920319	DESIGN	0.30243793530796814	WITHOUT_CLASSIFICATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9964120413692807	WITHOUT_CLASSIFICATION	0.0035879586307192273	DESIGN
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.999986980907524	WITHOUT_CLASSIFICATION	1.3019092475935611E-5	DESIGN
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.999993829628205	WITHOUT_CLASSIFICATION	6.170371794895058E-6	DESIGN
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9998873902316198	WITHOUT_CLASSIFICATION	1.1260976838027826E-4	DESIGN
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999694790351263	WITHOUT_CLASSIFICATION	3.052096487361862E-5	DESIGN
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9995325988808367	WITHOUT_CLASSIFICATION	4.674011191634013E-4	DESIGN
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999937099732966	WITHOUT_CLASSIFICATION	6.290026703457657E-6	DESIGN
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999484143454346	WITHOUT_CLASSIFICATION	5.158565456536232E-5	DESIGN
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999845493283604	WITHOUT_CLASSIFICATION	1.545067163960554E-4	DESIGN
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9562025138234892	WITHOUT_CLASSIFICATION	0.04379748617651075	DESIGN
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9995582986570706	WITHOUT_CLASSIFICATION	4.4170134292953597E-4	DESIGN
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999556527741059	WITHOUT_CLASSIFICATION	4.434722589408762E-5	DESIGN
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999358994974573	WITHOUT_CLASSIFICATION	6.410050254267247E-5	DESIGN
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9994410207536918	WITHOUT_CLASSIFICATION	5.589792463081228E-4	DESIGN
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999107092816197	WITHOUT_CLASSIFICATION	8.92907183802272E-5	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9509931106035463	WITHOUT_CLASSIFICATION	0.049006889396453646	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9509931106035463	WITHOUT_CLASSIFICATION	0.049006889396453646	DESIGN
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999931340049373	WITHOUT_CLASSIFICATION	6.8659950627412556E-6	DESIGN
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9210075625991886	WITHOUT_CLASSIFICATION	0.07899243740081141	DESIGN
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9237594308233145	WITHOUT_CLASSIFICATION	0.07624056917668554	DESIGN
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.99986822386555	WITHOUT_CLASSIFICATION	1.3177613445007765E-4	DESIGN
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.8674745463223047	WITHOUT_CLASSIFICATION	0.13252545367769525	DESIGN
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9989315778218691	WITHOUT_CLASSIFICATION	0.0010684221781308604	DESIGN
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9986175807198888	WITHOUT_CLASSIFICATION	0.0013824192801112835	DESIGN
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9991659274641843	WITHOUT_CLASSIFICATION	8.340725358158121E-4	DESIGN
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9972626118438305	WITHOUT_CLASSIFICATION	0.0027373881561694752	DESIGN
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998223984859519	WITHOUT_CLASSIFICATION	1.7760151404802173E-4	DESIGN
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997986237802104	WITHOUT_CLASSIFICATION	2.013762197895323E-4	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9808028682237153	WITHOUT_CLASSIFICATION	0.019197131776284647	DESIGN
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9994140915267207	WITHOUT_CLASSIFICATION	5.859084732794508E-4	DESIGN
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.999998743311189	WITHOUT_CLASSIFICATION	1.2566888110487988E-6	DESIGN
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9986240779479675	WITHOUT_CLASSIFICATION	0.0013759220520324245	DESIGN
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9954087402963653	WITHOUT_CLASSIFICATION	0.00459125970363467	DESIGN
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9785727011587654	WITHOUT_CLASSIFICATION	0.021427298841234652	DESIGN
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999543523097875	WITHOUT_CLASSIFICATION	4.564769021249492E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999453390272974	WITHOUT_CLASSIFICATION	5.466097270256328E-5	DESIGN
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999872944633017	WITHOUT_CLASSIFICATION	1.2705536698371508E-5	DESIGN
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9995561786312097	WITHOUT_CLASSIFICATION	4.43821368790345E-4	DESIGN
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9913400782905225	WITHOUT_CLASSIFICATION	0.008659921709477447	DESIGN
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999791929046637	WITHOUT_CLASSIFICATION	2.080709533624942E-5	DESIGN
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9996638076526986	WITHOUT_CLASSIFICATION	3.3619234730143644E-4	DESIGN
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9992357578655945	WITHOUT_CLASSIFICATION	7.64242134405577E-4	DESIGN
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9997740546997809	WITHOUT_CLASSIFICATION	2.2594530021905672E-4	DESIGN
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9997955005798808	WITHOUT_CLASSIFICATION	2.044994201192092E-4	DESIGN
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9989373512574763	WITHOUT_CLASSIFICATION	0.0010626487425237417	DESIGN
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.6073956101439674	WITHOUT_CLASSIFICATION	0.3926043898560326	DESIGN
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.8700193897080789	WITHOUT_CLASSIFICATION	0.129980610291921	DESIGN
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.966972434315476	WITHOUT_CLASSIFICATION	0.03302756568452406	DESIGN
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9994306118342384	WITHOUT_CLASSIFICATION	5.693881657615372E-4	DESIGN
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9911909460339812	WITHOUT_CLASSIFICATION	0.008809053966018771	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.999896664007616	WITHOUT_CLASSIFICATION	1.0333599238391334E-4	DESIGN
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999967120524299	WITHOUT_CLASSIFICATION	3.287947570138586E-6	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9911185494900839	WITHOUT_CLASSIFICATION	0.008881450509916011	DESIGN
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9996344407725214	WITHOUT_CLASSIFICATION	3.655592274786058E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999978290346913	WITHOUT_CLASSIFICATION	2.1709653087582465E-6	DESIGN
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.8683879885622631	WITHOUT_CLASSIFICATION	0.13161201143773685	DESIGN
//explicit = true;	WITHOUT_CLASSIFICATION	0.9998322044377992	WITHOUT_CLASSIFICATION	1.677955622007883E-4	DESIGN
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9998356260126315	WITHOUT_CLASSIFICATION	1.6437398736846826E-4	DESIGN
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9998206228660883	WITHOUT_CLASSIFICATION	1.7937713391175559E-4	DESIGN
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9903613448711827	WITHOUT_CLASSIFICATION	0.009638655128817298	DESIGN
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999312326835	WITHOUT_CLASSIFICATION	6.876731648870996E-8	DESIGN
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9988677493007782	WITHOUT_CLASSIFICATION	0.001132250699221866	DESIGN
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9971974120530673	WITHOUT_CLASSIFICATION	0.002802587946932746	DESIGN
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9979786650484594	WITHOUT_CLASSIFICATION	0.0020213349515404806	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999997982605433	WITHOUT_CLASSIFICATION	2.017394566948046E-7	DESIGN
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9995360708449579	WITHOUT_CLASSIFICATION	4.6392915504216094E-4	DESIGN
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9997352868020709	WITHOUT_CLASSIFICATION	2.6471319792902996E-4	DESIGN
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9993953533560361	WITHOUT_CLASSIFICATION	6.046466439638789E-4	DESIGN
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.999569298596025	WITHOUT_CLASSIFICATION	4.307014039750599E-4	DESIGN
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999997126147437	WITHOUT_CLASSIFICATION	2.8738525631148454E-7	DESIGN
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9993503047947295	WITHOUT_CLASSIFICATION	6.49695205270576E-4	DESIGN
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.992479886571339	WITHOUT_CLASSIFICATION	0.007520113428660982	DESIGN
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999490072902545	WITHOUT_CLASSIFICATION	5.099270974557974E-5	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9995414736184762	WITHOUT_CLASSIFICATION	4.5852638152373167E-4	DESIGN
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9998677951632371	WITHOUT_CLASSIFICATION	1.3220483676288795E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999722276888954	WITHOUT_CLASSIFICATION	2.7772311104634856E-5	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9869080501255809	WITHOUT_CLASSIFICATION	0.013091949874419095	DESIGN
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9990582756130671	WITHOUT_CLASSIFICATION	9.417243869329015E-4	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9984882968346798	WITHOUT_CLASSIFICATION	0.0015117031653202938	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993170883894338	WITHOUT_CLASSIFICATION	6.829116105663355E-4	DESIGN
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.999553114959586	WITHOUT_CLASSIFICATION	4.468850404141035E-4	DESIGN
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9980839420124321	WITHOUT_CLASSIFICATION	0.0019160579875678195	DESIGN
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9985285467157186	WITHOUT_CLASSIFICATION	0.001471453284281443	DESIGN
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999760614420329	WITHOUT_CLASSIFICATION	2.3938557967071625E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993170883894338	WITHOUT_CLASSIFICATION	6.829116105663355E-4	DESIGN
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9920593279901495	WITHOUT_CLASSIFICATION	0.007940672009850464	DESIGN
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9373854960207223	DESIGN	0.06261450397927765	WITHOUT_CLASSIFICATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999990831124475	WITHOUT_CLASSIFICATION	9.168875526839518E-7	DESIGN
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9917031166745689	WITHOUT_CLASSIFICATION	0.008296883325431098	DESIGN
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9997776128793736	WITHOUT_CLASSIFICATION	2.2238712062632766E-4	DESIGN
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.883650743275276	WITHOUT_CLASSIFICATION	0.11634925672472399	DESIGN
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9983043924118195	WITHOUT_CLASSIFICATION	0.0016956075881804874	DESIGN
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9977367851121127	WITHOUT_CLASSIFICATION	0.0022632148878872667	DESIGN
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9977905088785753	WITHOUT_CLASSIFICATION	0.002209491121424643	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.998895496274355	WITHOUT_CLASSIFICATION	0.001104503725644991	DESIGN
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9960918128365839	WITHOUT_CLASSIFICATION	0.003908187163416201	DESIGN
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9698169932062614	WITHOUT_CLASSIFICATION	0.030183006793738646	DESIGN
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.999877639061647	WITHOUT_CLASSIFICATION	1.2236093835307356E-4	DESIGN
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9998853136678315	WITHOUT_CLASSIFICATION	1.1468633216846417E-4	DESIGN
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9991566967972749	WITHOUT_CLASSIFICATION	8.43303202724956E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9419762499956397	WITHOUT_CLASSIFICATION	0.058023750004360324	DESIGN
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.999808579484188	WITHOUT_CLASSIFICATION	1.9142051581205855E-4	DESIGN
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999689632563878	WITHOUT_CLASSIFICATION	3.103674361208835E-5	DESIGN
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9990456195644384	WITHOUT_CLASSIFICATION	9.543804355615482E-4	DESIGN
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.7252904928895999	WITHOUT_CLASSIFICATION	0.27470950711040015	DESIGN
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9950628492186209	WITHOUT_CLASSIFICATION	0.004937150781379039	DESIGN
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999972839088189	WITHOUT_CLASSIFICATION	2.716091181064891E-6	DESIGN
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9890379668687133	WITHOUT_CLASSIFICATION	0.010962033131286793	DESIGN
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9995883376087236	WITHOUT_CLASSIFICATION	4.1166239127645853E-4	DESIGN
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999528517430057	WITHOUT_CLASSIFICATION	4.71482569942334E-5	DESIGN
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999931551876524	WITHOUT_CLASSIFICATION	6.844812347609398E-6	DESIGN
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9994558680661029	WITHOUT_CLASSIFICATION	5.441319338972112E-4	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9974183381210538	WITHOUT_CLASSIFICATION	0.002581661878946089	DESIGN
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.8141077684332401	WITHOUT_CLASSIFICATION	0.18589223156675994	DESIGN
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9976672689027537	WITHOUT_CLASSIFICATION	0.0023327310972462378	DESIGN
// and perform the load	WITHOUT_CLASSIFICATION	0.9989922712611881	WITHOUT_CLASSIFICATION	0.001007728738811866	DESIGN
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9992366275129334	WITHOUT_CLASSIFICATION	7.633724870665734E-4	DESIGN
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9973667293942104	WITHOUT_CLASSIFICATION	0.0026332706057894434	DESIGN
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9990038479733061	WITHOUT_CLASSIFICATION	9.961520266939853E-4	DESIGN
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.999949405231959	WITHOUT_CLASSIFICATION	5.059476804099253E-5	DESIGN
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9503327417653742	WITHOUT_CLASSIFICATION	0.04966725823462578	DESIGN
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9989903476483831	WITHOUT_CLASSIFICATION	0.001009652351616809	DESIGN
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9930695053319266	WITHOUT_CLASSIFICATION	0.006930494668073426	DESIGN
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9984745630724637	WITHOUT_CLASSIFICATION	0.001525436927536248	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999310249943696	WITHOUT_CLASSIFICATION	6.897500563041762E-5	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9995943682054033	WITHOUT_CLASSIFICATION	4.05631794596784E-4	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9995943682054033	WITHOUT_CLASSIFICATION	4.05631794596784E-4	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9993412664712938	WITHOUT_CLASSIFICATION	6.587335287061521E-4	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9998563981807236	WITHOUT_CLASSIFICATION	1.4360181927632702E-4	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9998275436258275	WITHOUT_CLASSIFICATION	1.724563741724503E-4	DESIGN
/**	WITHOUT_CLASSIFICATION	0.8480556639784362	DESIGN	0.15194433602156376	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9998505896269032	WITHOUT_CLASSIFICATION	1.4941037309680418E-4	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9998505896269032	WITHOUT_CLASSIFICATION	1.4941037309680418E-4	DESIGN
//        }	WITHOUT_CLASSIFICATION	0.9971857275059381	WITHOUT_CLASSIFICATION	0.0028142724940618652	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9975066508913079	WITHOUT_CLASSIFICATION	0.0024933491086920443	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999151938107994	WITHOUT_CLASSIFICATION	8.480618920062969E-5	DESIGN
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999986331803334	WITHOUT_CLASSIFICATION	1.3668196665539646E-6	DESIGN
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999348662480868	WITHOUT_CLASSIFICATION	6.513375191321763E-5	DESIGN
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9997242406531671	WITHOUT_CLASSIFICATION	2.7575934683292565E-4	DESIGN
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.998488395554218	WITHOUT_CLASSIFICATION	0.0015116044457820044	DESIGN
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.8787470682932204	WITHOUT_CLASSIFICATION	0.12125293170677971	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995836390476278	WITHOUT_CLASSIFICATION	4.1636095237211043E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995836390476278	WITHOUT_CLASSIFICATION	4.1636095237211043E-4	DESIGN
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.999553114959586	WITHOUT_CLASSIFICATION	4.468850404141035E-4	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9990683035260378	WITHOUT_CLASSIFICATION	9.31696473962254E-4	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9997543115385332	WITHOUT_CLASSIFICATION	2.456884614668442E-4	DESIGN
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.997587710740471	WITHOUT_CLASSIFICATION	0.0024122892595289883	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994333320915777	WITHOUT_CLASSIFICATION	5.66667908422279E-4	DESIGN
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9390103295813759	WITHOUT_CLASSIFICATION	0.060989670418624194	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9887507940395011	WITHOUT_CLASSIFICATION	0.011249205960499026	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994333320915777	WITHOUT_CLASSIFICATION	5.66667908422279E-4	DESIGN
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9985757885147735	WITHOUT_CLASSIFICATION	0.0014242114852266144	DESIGN
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9993575446966657	WITHOUT_CLASSIFICATION	6.424553033342238E-4	DESIGN
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9937863706750015	WITHOUT_CLASSIFICATION	0.006213629324998416	DESIGN
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9957536001995079	WITHOUT_CLASSIFICATION	0.004246399800492131	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.998895496274355	WITHOUT_CLASSIFICATION	0.001104503725644991	DESIGN
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.5118234307766721	DESIGN	0.48817656922332786	WITHOUT_CLASSIFICATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9891075681810598	WITHOUT_CLASSIFICATION	0.010892431818940148	DESIGN
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9997517768737433	WITHOUT_CLASSIFICATION	2.482231262566943E-4	DESIGN
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999546507174614	WITHOUT_CLASSIFICATION	4.534928253860333E-5	DESIGN
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999703122117077	WITHOUT_CLASSIFICATION	2.9687788292289455E-5	DESIGN
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.998533286502802	WITHOUT_CLASSIFICATION	0.0014667134971979852	DESIGN
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9621856420061229	WITHOUT_CLASSIFICATION	0.037814357993877105	DESIGN
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9997082646258564	WITHOUT_CLASSIFICATION	2.917353741435639E-4	DESIGN
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9987819146207486	WITHOUT_CLASSIFICATION	0.0012180853792514092	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9942078252593672	WITHOUT_CLASSIFICATION	0.005792174740632799	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9942078252593672	WITHOUT_CLASSIFICATION	0.005792174740632799	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.99927060327321	WITHOUT_CLASSIFICATION	7.293967267899087E-4	DESIGN
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999921241216815	WITHOUT_CLASSIFICATION	7.875878318644305E-6	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9977782340280895	WITHOUT_CLASSIFICATION	0.0022217659719105235	DESIGN
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9992911199998932	WITHOUT_CLASSIFICATION	7.088800001068587E-4	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9995610847484491	WITHOUT_CLASSIFICATION	4.389152515510245E-4	DESIGN
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.7591348843803856	WITHOUT_CLASSIFICATION	0.24086511561961443	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9997538087328061	WITHOUT_CLASSIFICATION	2.4619126719398833E-4	DESIGN
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999854590726999	WITHOUT_CLASSIFICATION	1.4540927300110958E-5	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9990649167988699	WITHOUT_CLASSIFICATION	9.350832011301795E-4	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9998270293916672	WITHOUT_CLASSIFICATION	1.7297060833284736E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.993674138422209	WITHOUT_CLASSIFICATION	0.006325861577790935	DESIGN
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.6519488446764391	DESIGN	0.34805115532356096	WITHOUT_CLASSIFICATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.999959346283617	WITHOUT_CLASSIFICATION	4.065371638305806E-5	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999722467002444	WITHOUT_CLASSIFICATION	2.775329975558855E-5	DESIGN
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.7384927615456698	WITHOUT_CLASSIFICATION	0.26150723845433016	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9987400544374907	WITHOUT_CLASSIFICATION	0.001259945562509314	DESIGN
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9864421901683701	WITHOUT_CLASSIFICATION	0.013557809831629948	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9993271182636294	WITHOUT_CLASSIFICATION	6.728817363706084E-4	DESIGN
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9978001790814784	WITHOUT_CLASSIFICATION	0.0021998209185215213	DESIGN
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9906866709875111	WITHOUT_CLASSIFICATION	0.009313329012488849	DESIGN
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9982020298646108	WITHOUT_CLASSIFICATION	0.001797970135389102	DESIGN
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999997648363786	WITHOUT_CLASSIFICATION	2.351636213814271E-7	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9985230751599888	WITHOUT_CLASSIFICATION	0.001476924840011263	DESIGN
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999590704485362	WITHOUT_CLASSIFICATION	4.092955146390744E-5	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9981649472480688	WITHOUT_CLASSIFICATION	0.0018350527519311597	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9981649472480688	WITHOUT_CLASSIFICATION	0.0018350527519311597	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999917508670924	WITHOUT_CLASSIFICATION	8.249132907652813E-6	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9978959485564134	WITHOUT_CLASSIFICATION	0.002104051443586495	DESIGN
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.8717599007689597	WITHOUT_CLASSIFICATION	0.12824009923104032	DESIGN
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9860334011917052	WITHOUT_CLASSIFICATION	0.013966598808294785	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9988538379982032	WITHOUT_CLASSIFICATION	0.001146162001796937	DESIGN
// todo : what else to do here?	DESIGN	0.9851091808952395	WITHOUT_CLASSIFICATION	0.014890819104760391	DESIGN
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.8597929033983156	WITHOUT_CLASSIFICATION	0.14020709660168434	DESIGN
// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. // The need for it is intended to be alleviated with future developement, thus it is // not defined as an Environment constant... // // it is used to control whether we should consult the JDBC metadata to determine // certain Settings default values; it is useful to *not* do this when the database // may not be available (mainly in tools usage).	DESIGN	0.9995856250699288	DESIGN	4.143749300712025E-4	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.6728274293021967	WITHOUT_CLASSIFICATION	0.32717257069780326	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.6728274293021967	WITHOUT_CLASSIFICATION	0.32717257069780326	DESIGN
// todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9990297966578077	WITHOUT_CLASSIFICATION	9.702033421923686E-4	DESIGN
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9999704141295616	WITHOUT_CLASSIFICATION	2.9585870438408335E-5	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction.  no idea...	DESIGN	0.8548715243481144	WITHOUT_CLASSIFICATION	0.14512847565188564	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9990771136504784	DESIGN	9.228863495217797E-4	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9990771136504784	DESIGN	9.228863495217797E-4	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.99910575368559	DESIGN	8.942463144099328E-4	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.99910575368559	DESIGN	8.942463144099328E-4	WITHOUT_CLASSIFICATION
// TODO: I considered validating TS cache config here, // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used	DESIGN	0.9999734903627145	DESIGN	2.650963728547117E-5	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.931351740995631	DESIGN	0.06864825900436898	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.931351740995631	DESIGN	0.06864825900436898	WITHOUT_CLASSIFICATION
// TODO Why not use the timestamp in a DataVersion?	DESIGN	0.9928928545437733	DESIGN	0.007107145456226703	WITHOUT_CLASSIFICATION
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9999704141295616	WITHOUT_CLASSIFICATION	2.9585870438408335E-5	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction. no idea...	DESIGN	0.8738886349794645	WITHOUT_CLASSIFICATION	0.1261113650205356	DESIGN
//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9993768243120336	WITHOUT_CLASSIFICATION	6.23175687966384E-4	DESIGN
// turn hibernate.c3p0.* into c3p0.*, so c3p0 // gets a chance to see all hibernate.c3p0.*	DESIGN	0.9845760248402583	WITHOUT_CLASSIFICATION	0.015423975159741678	DESIGN
//TODO: this bit actually has to be called after all cascades! //      but since identity insert is called *synchronously*, //      instead of asynchronously as other actions, it isn't	DESIGN	0.683955551298017	DESIGN	0.3160444487019831	WITHOUT_CLASSIFICATION
//TODO: reenable if we also fix the above todo	DESIGN	0.648324594036835	DESIGN	0.3516754059631649	WITHOUT_CLASSIFICATION
//TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.9860221705207144	WITHOUT_CLASSIFICATION	0.013977829479285659	DESIGN
// we may be screwed here since the collection action is about to execute // and we do not know the final owner key value	DESIGN	0.9991183909439113	WITHOUT_CLASSIFICATION	8.816090560886148E-4	DESIGN
/** Create an action that will evict collection and entity regions based on queryspaces (table names).	DESIGN	0.952116031228166	DESIGN	0.04788396877183404	WITHOUT_CLASSIFICATION
// todo : what else to do here?	DESIGN	0.9851091808952395	WITHOUT_CLASSIFICATION	0.014890819104760391	DESIGN
// todo : modify the class definition if not already transformed...	DESIGN	0.9989643813821157	WITHOUT_CLASSIFICATION	0.0010356186178841985	DESIGN
// todo : what else to do here?	DESIGN	0.9851091808952395	WITHOUT_CLASSIFICATION	0.014890819104760391	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call start	DESIGN	0.9948982688288309	WITHOUT_CLASSIFICATION	0.0051017311711690485	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.9871337839091845	WITHOUT_CLASSIFICATION	0.012866216090815554	DESIGN
//TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9317652781504018	DESIGN	0.06823472184959818	WITHOUT_CLASSIFICATION
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.8597929033983156	WITHOUT_CLASSIFICATION	0.14020709660168434	DESIGN
//TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.6100612174708149	WITHOUT_CLASSIFICATION	0.3899387825291851	DESIGN
//TODO: assumes all collections disassemble to an array!	DESIGN	0.998209945150003	WITHOUT_CLASSIFICATION	0.0017900548499969417	DESIGN
//TODO: reuse the PreLoadEvent	DESIGN	0.9080992028643134	WITHOUT_CLASSIFICATION	0.09190079713568658	DESIGN
// todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; // this should be refactored to instead expose a method to assemble a EntityEntry based on this // state for return.	DESIGN	0.7320535133739372	WITHOUT_CLASSIFICATION	0.26794648662606285	DESIGN
// todo : what is the implication of this?	DESIGN	0.9590520796683948	WITHOUT_CLASSIFICATION	0.04094792033160526	DESIGN
// use COUNT as the default.  This mimics the old behavior, although // NONE might be a better option moving forward in the case of callable	DESIGN	0.9335189790043171	WITHOUT_CLASSIFICATION	0.06648102099568279	DESIGN
/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a	DESIGN	0.9999225082619463	DESIGN	7.749173805375634E-5	WITHOUT_CLASSIFICATION
//TODO: suck this into initLaziness!	DESIGN	0.5602975173395055	DESIGN	0.43970248266049444	WITHOUT_CLASSIFICATION
// we have to set up the table later!! yuck	DESIGN	0.999865856353375	WITHOUT_CLASSIFICATION	1.3414364662505423E-4	DESIGN
//TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.7573376577845251	DESIGN	0.24266234221547495	WITHOUT_CLASSIFICATION
// todo : again, how *should* this work for non-pojo entities?	DESIGN	0.9990749725557565	WITHOUT_CLASSIFICATION	9.250274442434689E-4	DESIGN
// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.996588796735826	DESIGN	0.0034112032641740813	WITHOUT_CLASSIFICATION
// This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.726245182096578	WITHOUT_CLASSIFICATION	0.2737548179034221	DESIGN
//TODO: bad implementation, cos it depends upon ordering of mapping doc //      fixing this requires that Collection/PersistentClass gain access //      to the Mappings reference from Configuration (or the filterDefinitions //      map directly) sometime during Configuration.buildSessionFactory //      (after all the types/filter-defs are known and before building //      persisters).	DESIGN	0.5521104862209975	DESIGN	0.44788951377900266	WITHOUT_CLASSIFICATION
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.9818028341991659	DESIGN	0.018197165800834084	WITHOUT_CLASSIFICATION
// hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9996286145136443	WITHOUT_CLASSIFICATION	3.7138548635573174E-4	DESIGN
//FIXME: get the PersistentClass	DESIGN	0.9993915967023004	WITHOUT_CLASSIFICATION	6.084032976996535E-4	DESIGN
//FIXME: get the PersistentClass	DESIGN	0.9993915967023004	WITHOUT_CLASSIFICATION	6.084032976996535E-4	DESIGN
//Icky workaround for MySQL bug:	DESIGN	0.9506320153603001	DESIGN	0.04936798463969979	WITHOUT_CLASSIFICATION
//TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.5783117243519401	WITHOUT_CLASSIFICATION	0.42168827564805994	DESIGN
//TODO possibly relax that	DESIGN	0.7445061712833687	DESIGN	0.2554938287166313	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.7445061712833687	DESIGN	0.2554938287166313	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.7445061712833687	DESIGN	0.2554938287166313	WITHOUT_CLASSIFICATION
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.9818028341991659	DESIGN	0.018197165800834084	WITHOUT_CLASSIFICATION
//use a degenerated strategy for backward compatibility	DESIGN	0.9992737400817052	WITHOUT_CLASSIFICATION	7.262599182946871E-4	DESIGN
// Sets can be just a view of a part of another collection. // do we need to copy it to be sure it won't be changing // underneath us? // ie. this.set.addAll(set);	DESIGN	0.9096757215960596	WITHOUT_CLASSIFICATION	0.09032427840394042	DESIGN
//note that i parameter is now unused (delete it?)	DESIGN	0.8035767088028377	DESIGN	0.19642329119716231	WITHOUT_CLASSIFICATION
//just to help out during the load (ugly, i know)	DESIGN	0.9985482655223706	WITHOUT_CLASSIFICATION	0.0014517344776293606	DESIGN
// TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.8981067588203923	WITHOUT_CLASSIFICATION	0.10189324117960777	DESIGN
// yick!  need this for proper serialization/deserialization handling...	DESIGN	0.9302104472611413	WITHOUT_CLASSIFICATION	0.06978955273885873	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.6728274293021967	WITHOUT_CLASSIFICATION	0.32717257069780326	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.6728274293021967	WITHOUT_CLASSIFICATION	0.32717257069780326	DESIGN
//yuck!	DESIGN	0.9991897437067582	WITHOUT_CLASSIFICATION	8.102562932417271E-4	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.6728274293021967	WITHOUT_CLASSIFICATION	0.32717257069780326	DESIGN
// TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9998771061184774	DESIGN	1.228938815225961E-4	WITHOUT_CLASSIFICATION
//HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9967311949184863	WITHOUT_CLASSIFICATION	0.003268805081513652	DESIGN
// does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.9989177500712036	WITHOUT_CLASSIFICATION	0.001082249928796369	DESIGN
// sql-server, at least needed this dropped after use; strange!	DESIGN	0.9991220255899429	WITHOUT_CLASSIFICATION	8.779744100570477E-4	DESIGN
// todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.9994381562152194	WITHOUT_CLASSIFICATION	5.618437847806851E-4	DESIGN
// TBD should this be varbinary($1)? //	DESIGN	0.9493048257686864	WITHOUT_CLASSIFICATION	0.050695174231313665	DESIGN
// is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9990877831653528	WITHOUT_CLASSIFICATION	9.122168346470732E-4	DESIGN
// xmlforest requires a new kind of function constructor	DESIGN	0.9994310268565291	WITHOUT_CLASSIFICATION	5.689731434709627E-4	DESIGN
// Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9685655796486775	WITHOUT_CLASSIFICATION	0.031434420351322476	DESIGN
// Do we need to qualify index names with the schema name?	DESIGN	0.9993043552505365	WITHOUT_CLASSIFICATION	6.956447494635198E-4	DESIGN
// Does this dialect support the UNIQUE column syntax?	DESIGN	0.9894328353939211	WITHOUT_CLASSIFICATION	0.010567164606078918	DESIGN
// Does this dialect support check constraints?	DESIGN	0.9724034119173625	WITHOUT_CLASSIFICATION	0.027596588082637544	DESIGN
// Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.8917615556914396	WITHOUT_CLASSIFICATION	0.10823844430856049	DESIGN
// Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9497100695991655	WITHOUT_CLASSIFICATION	0.05028993040083446	DESIGN
// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9497100695991655	WITHOUT_CLASSIFICATION	0.05028993040083446	DESIGN
// Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.5773860400114621	WITHOUT_CLASSIFICATION	0.42261395998853807	DESIGN
//note there is a wierd implementation in the client side	DESIGN	0.9999197656397252	WITHOUT_CLASSIFICATION	8.023436027478474E-5	DESIGN
//TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.9880724795937148	WITHOUT_CLASSIFICATION	0.011927520406285204	DESIGN
// todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.9994253243278758	WITHOUT_CLASSIFICATION	5.746756721243031E-4	DESIGN
// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.9989796335026662	WITHOUT_CLASSIFICATION	0.001020366497333872	DESIGN
//TODO: should orphans really be deleted during lock???	DESIGN	0.7606871215710854	DESIGN	0.2393128784289145	WITHOUT_CLASSIFICATION
// orphans should not be deleted during merge??	DESIGN	0.9909339490840974	WITHOUT_CLASSIFICATION	0.009066050915902554	DESIGN
// orphans should not be deleted during copy??	DESIGN	0.9909339490840974	WITHOUT_CLASSIFICATION	0.009066050915902554	DESIGN
//I suppose?	DESIGN	0.9929827767865036	WITHOUT_CLASSIFICATION	0.007017223213496346	DESIGN
//TODO: suck this logic into the collection!	DESIGN	0.7260492665956619	WITHOUT_CLASSIFICATION	0.27395073340433806	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // get the ID from collection.getOwner()	DESIGN	0.9852280644763803	WITHOUT_CLASSIFICATION	0.014771935523619642	DESIGN
//TODO:refactor + make this method private	DESIGN	0.9844250210515014	WITHOUT_CLASSIFICATION	0.015574978948498608	DESIGN
// todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9976605096163746	WITHOUT_CLASSIFICATION	0.0023394903836253316	DESIGN
//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.9485602679033514	DESIGN	0.05143973209664874	WITHOUT_CLASSIFICATION
//TODO: better to pass the id in as an argument?	DESIGN	0.954657503949962	WITHOUT_CLASSIFICATION	0.045342496050038	DESIGN
// todo : potentially look at optimizing these two arrays	DESIGN	0.9902625528618132	WITHOUT_CLASSIFICATION	0.009737447138186838	DESIGN
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.9994883957906234	DESIGN	5.116042093765747E-4	WITHOUT_CLASSIFICATION
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.9994883957906234	DESIGN	5.116042093765747E-4	WITHOUT_CLASSIFICATION
//TODO: temporary	DESIGN	0.7947573906993387	DESIGN	0.20524260930066135	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.7312619493729413	DESIGN	0.2687380506270586	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.7312619493729413	DESIGN	0.2687380506270586	WITHOUT_CLASSIFICATION
//TODO: ugly here:	DESIGN	0.9620364248200478	DESIGN	0.03796357517995221	WITHOUT_CLASSIFICATION
//this is kinda the best we can do...	DESIGN	0.9890117889442369	WITHOUT_CLASSIFICATION	0.010988211055763097	DESIGN
//TODO: this needn't exclude subclasses...	DESIGN	0.6296548548164966	WITHOUT_CLASSIFICATION	0.3703451451835034	DESIGN
// todo : need map? the prob is a proper key, right?	DESIGN	0.5861032608338237	DESIGN	0.41389673916617636	WITHOUT_CLASSIFICATION
// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9917933296262106	WITHOUT_CLASSIFICATION	0.008206670373789452	DESIGN
// todo : hack!!! // NOTE : here we cleanup the load context when we have no more local // LCE entries.  This "works" for the time being because really // only the collection load contexts are implemented.  Long term, // this cleanup should become part of the "close result set" // processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9855442536603024	WITHOUT_CLASSIFICATION	0.014455746339697572	DESIGN
// todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.9761323591343215	DESIGN	0.02386764086567844	WITHOUT_CLASSIFICATION
// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.6453569019983222	DESIGN	0.3546430980016777	WITHOUT_CLASSIFICATION
// TODO : add this info to the translator and aggregate it here...	DESIGN	0.738419948272332	DESIGN	0.26158005172766796	WITHOUT_CLASSIFICATION
//TODO: move into collection type, so we can use polymorphism!	DESIGN	0.9122472495526169	DESIGN	0.08775275044738305	WITHOUT_CLASSIFICATION
// todo : should we check the current isolation mode explicitly?	DESIGN	0.9994253243278758	WITHOUT_CLASSIFICATION	5.746756721243041E-4	DESIGN
//TODO: suck into event class	DESIGN	0.5653519864959755	WITHOUT_CLASSIFICATION	0.43464801350402454	DESIGN
//do we even really need this? the update will fail anyway....	DESIGN	0.916547929113194	WITHOUT_CLASSIFICATION	0.08345207088680603	DESIGN
//hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.725081537067209	WITHOUT_CLASSIFICATION	0.274918462932791	DESIGN
//TODO: would it be better to do a refresh from db?	DESIGN	0.8968550591469183	DESIGN	0.10314494085308162	WITHOUT_CLASSIFICATION
//TODO: we use two visitors here, inefficient!	DESIGN	0.5938796805454545	DESIGN	0.4061203194545456	WITHOUT_CLASSIFICATION
// this class has no proxies (so do a shortcut)	DESIGN	0.9959957710283525	WITHOUT_CLASSIFICATION	0.004004228971647436	DESIGN
//PostLoad is needed for EJB3 //TODO: reuse the PostLoadEvent...	DESIGN	0.9353103621031886	WITHOUT_CLASSIFICATION	0.06468963789681142	DESIGN
//TODO: put this stuff back in to read snapshot from //      the second-level cache (needs some extra work)	DESIGN	0.7796057039575166	DESIGN	0.22039429604248345	WITHOUT_CLASSIFICATION
// null or brand new collection // this will also (inefficiently) handle arrays, which have // no snapshot, so we can't do any better	DESIGN	0.992229746383166	WITHOUT_CLASSIFICATION	0.007770253616834022	DESIGN
//TODO: is this 100% correct?	DESIGN	0.9861908536622117	DESIGN	0.013809146337788137	WITHOUT_CLASSIFICATION
// TODO: iteratively get transient entities and retry merge until one of the following conditions: //       1) transientCopyCache.size() == 0 //       2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing // TODO: find out if retrying can add entities to copyCache (don't think it can...) // For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.809116180095101	DESIGN	0.1908838199048991	WITHOUT_CLASSIFICATION
// entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9995699788294389	DESIGN	4.3002117056108776E-4	WITHOUT_CLASSIFICATION
//TODO: we should throw an exception if we really *know* for sure   //      that this is a detached instance, rather than just assuming //throw new StaleObjectStateException(entityName, id);	DESIGN	0.9362600082772807	DESIGN	0.06373999172271923	WITHOUT_CLASSIFICATION
// TODO : perhaps we should additionally require that the incoming entity // version be equivalent to the defined unsaved-value?	DESIGN	0.9913576459055276	DESIGN	0.008642354094472438	WITHOUT_CLASSIFICATION
// perhaps this should be an exception since it is only ever used // in the above method?	DESIGN	0.8771518400578788	DESIGN	0.12284815994212121	WITHOUT_CLASSIFICATION
// Put a placeholder in entries, so we don't recurse back and try to save() the // same object again. QUESTION: should this be done before onSave() is called? // likewise, should it be done before onUpdate()?	DESIGN	0.6694736851965003	WITHOUT_CLASSIFICATION	0.33052631480349964	DESIGN
//TODO: merge into one method!	DESIGN	0.7226322957419442	WITHOUT_CLASSIFICATION	0.27736770425805585	DESIGN
//TODO: refactor to .sql package	DESIGN	0.8757477497396874	DESIGN	0.1242522502603126	WITHOUT_CLASSIFICATION
/** * Provides query splitting methods, which were originally in QueryTranslator. * <br> * TODO: This will need to be refactored at some point. * * @author josh */	DESIGN	0.9998008820294716	DESIGN	1.991179705285159E-4	WITHOUT_CLASSIFICATION
//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.7693656949669396	DESIGN	0.23063430503306034	WITHOUT_CLASSIFICATION
// todo : temporary //      needed because currently persister is the one that //      creates and renders the join fragments for inheritence //      hierarchies...	DESIGN	0.9994331345749354	WITHOUT_CLASSIFICATION	5.668654250645832E-4	DESIGN
// TODO : better way?!?	DESIGN	0.9575653167731557	DESIGN	0.0424346832268443	WITHOUT_CLASSIFICATION
// Not possible to simply re-use the versionPropertyNode here as it causes // OOM errors due to circularity :(	DESIGN	0.994200206010699	WITHOUT_CLASSIFICATION	0.005799793989301001	DESIGN
//TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.998793980555028	WITHOUT_CLASSIFICATION	0.0012060194449719996	DESIGN
// TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9996365792567403	DESIGN	3.634207432596115E-4	WITHOUT_CLASSIFICATION
// even here, if only properties mapped to the "base table" are referenced // in the set and where clauses, this could be handled by the BasicDelegate. // TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9999892784423745	DESIGN	1.0721557625429406E-5	WITHOUT_CLASSIFICATION
//TODO: switch statements are always evil! We already had bugs because  //      of forgotten token types. Use polymorphism for this!	DESIGN	0.9936582672219344	WITHOUT_CLASSIFICATION	0.0063417327780656	DESIGN
// TODO : we really need to be able to deal with component paths here also; // this is difficult because the hql-sql grammar expects all those node types // to be FromReferenceNodes.  One potential fix here would be to convert the // IntoClause to just use a FromClause/FromElement combo (as a child of the // InsertStatement) and move all this logic into the InsertStatement.  That's // probably the easiest approach (read: least amount of changes to the grammar // and code), but just doesn't feel right as then an insert would contain // 2 from-clauses	DESIGN	0.9976389296849412	DESIGN	0.002361070315058808	WITHOUT_CLASSIFICATION
// really there are two situations where it should be ok to allow the insertion // into properties defined on a superclass: //      1) union-subclass with an abstract root entity //      2) discrim-subclass // // #1 is handled already because of the fact that // UnionSubclassPersister alreay always returns 0 // for this call... // // we may want to disallow it for discrim-subclass just for // consistency-sake (currently does not work anyway)...	DESIGN	0.629982426886442	DESIGN	0.3700175731135579	WITHOUT_CLASSIFICATION
//yuck!	DESIGN	0.9991897437067582	WITHOUT_CLASSIFICATION	8.102562932417271E-4	DESIGN
// implicit joins are always(?) ok to reuse	DESIGN	0.9997825526882393	WITHOUT_CLASSIFICATION	2.1744731176062058E-4	DESIGN
// TODO : we may also want to check that the types here map to exactly one column/JDBC-type //      can't think of a situation where arithmetic expression between multi-column mappings //      makes any sense.	DESIGN	0.7661374537048943	DESIGN	0.2338625462951058	WITHOUT_CLASSIFICATION
// we do not know either type //BLIND GUESS!	DESIGN	0.9936494362488597	WITHOUT_CLASSIFICATION	0.006350563751140376	DESIGN
//TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999989354856506	DESIGN	1.0645143494514088E-6	WITHOUT_CLASSIFICATION
// TODO: Replace this with a more elegant solution.	DESIGN	0.9995058097594602	DESIGN	4.941902405397741E-4	WITHOUT_CLASSIFICATION
// TODO: Should this really return null?  If not, figure out something better to do here.	DESIGN	0.9994555235451648	DESIGN	5.444764548353211E-4	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.6728274293021967	WITHOUT_CLASSIFICATION	0.32717257069780326	DESIGN
// yuck!	DESIGN	0.9996870819806605	WITHOUT_CLASSIFICATION	3.1291801933955494E-4	DESIGN
// ignore it; the incoming property could not be found so we // cannot be sure what to do here.  At the very least, the // safest is to simply not apply any dereference toggling...	DESIGN	0.9179252850347982	DESIGN	0.08207471496520179	WITHOUT_CLASSIFICATION
// TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.6411802093879518	DESIGN	0.3588197906120482	WITHOUT_CLASSIFICATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character // the trim-source	DESIGN	0.9966651808314319	WITHOUT_CLASSIFICATION	0.0033348191685681258	DESIGN
// todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.5660578520821422	WITHOUT_CLASSIFICATION	0.43394214791785773	DESIGN
//TODO: is this a bit ugly?	DESIGN	0.9813885562175275	DESIGN	0.01861144378247254	WITHOUT_CLASSIFICATION
// Need a better way to define the suffixes here...	DESIGN	0.8967102632601681	WITHOUT_CLASSIFICATION	0.10328973673983188	DESIGN
// TODO: something much better - look at the type of the other expression! // TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9970117111764162	DESIGN	0.0029882888235838534	WITHOUT_CLASSIFICATION
// TODO : what amount of significant digits need to be supported here? //      - from the DecimalFormat docs: //          [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9396074360719561	DESIGN	0.06039256392804377	WITHOUT_CLASSIFICATION
// Needed the "clazz_" check to work around union-subclasses // TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9965345884703816	DESIGN	0.0034654115296183516	WITHOUT_CLASSIFICATION
//We should actually rework this class to not implement Parser //and just process path expressions in the most convenient way.	DESIGN	0.9450140016578763	DESIGN	0.05498599834212376	WITHOUT_CLASSIFICATION
//The class is now way to complex!	DESIGN	0.9960536492274225	WITHOUT_CLASSIFICATION	0.003946350772577553	DESIGN
//TODO: get SQL rendering out of here	DESIGN	0.6145125558514516	WITHOUT_CLASSIFICATION	0.38548744414854835	DESIGN
//TODO: is there a better way?	DESIGN	0.9591088783955115	DESIGN	0.040891121604488614	WITHOUT_CLASSIFICATION
//Must be done here because of side-effect! yuck...	DESIGN	0.997775170794502	WITHOUT_CLASSIFICATION	0.0022248292054980116	DESIGN
//name from a super query (a bit inelegant that it shows up here)	DESIGN	0.949266747649667	WITHOUT_CLASSIFICATION	0.050733252350333054	DESIGN
// We should reengineer this class so that, rather than the current ad - // hoc linear approach to processing a stream of tokens, we instead // build up a tree of expressions.	DESIGN	0.8912387678824621	WITHOUT_CLASSIFICATION	0.10876123211753777	DESIGN
// this is ugly here, but needed because its a subquery	DESIGN	0.9581950908763838	WITHOUT_CLASSIFICATION	0.041804909123616174	DESIGN
// unhappy about this being public ... is there a better way?	DESIGN	0.5249406246177514	DESIGN	0.4750593753822486	WITHOUT_CLASSIFICATION
// Make sure this is a defined parameter and check the incoming value type // TODO: what should be the actual exception type here?	DESIGN	0.9999513688545664	DESIGN	4.8631145433591794E-5	WITHOUT_CLASSIFICATION
// TODO : this constructor form is *only* used from constructor directly below us; can it go away?	DESIGN	0.999849999762102	DESIGN	1.5000023789812008E-4	WITHOUT_CLASSIFICATION
//TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.8480893843190479	WITHOUT_CLASSIFICATION	0.15191061568095207	DESIGN
// TODO : should remove this exposure //  and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9859905299919588	DESIGN	0.014009470008041177	WITHOUT_CLASSIFICATION
// todo : should this get moved to PersistentContext? // logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.5998409034464408	WITHOUT_CLASSIFICATION	0.40015909655355925	DESIGN
// TODO: what type?	DESIGN	0.9765925753570058	DESIGN	0.023407424642994248	WITHOUT_CLASSIFICATION
// todo : should seriously consider not allowing a txn to begin from a child session //      can always route the request to the root session...	DESIGN	0.983946783681769	WITHOUT_CLASSIFICATION	0.016053216318231037	DESIGN
// short-circuit for performance...	DESIGN	0.9993552004523231	WITHOUT_CLASSIFICATION	6.447995476770248E-4	DESIGN
// not absolutely necessary, but does help with aggressive release	DESIGN	0.9868309956616066	WITHOUT_CLASSIFICATION	0.013169004338393386	DESIGN
// TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.6380301290112238	DESIGN	0.3619698709887762	WITHOUT_CLASSIFICATION
//work around a bug in all known connection pools....	DESIGN	0.6826180025389793	WITHOUT_CLASSIFICATION	0.31738199746102075	DESIGN
// TODO : make this the factory for "entity mode related" sessions; // also means making this the target of transaction-synch and the // thing that knows how to cascade things between related sessions // // At that point, perhaps this thing is a "SessionContext", and // ConnectionManager is a "JDBCContext"?  A "SessionContext" should // live in the impl package...	DESIGN	0.9999811487374751	DESIGN	1.8851262524903447E-5	WITHOUT_CLASSIFICATION
//TODO: does this really need to be here? //      does the collection already have //      it's own up-to-date snapshot?	DESIGN	0.998629649082714	DESIGN	0.0013703509172860878	WITHOUT_CLASSIFICATION
//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.980775176394606	DESIGN	0.01922482360539396	WITHOUT_CLASSIFICATION
/**	DESIGN	0.8480556639784362	DESIGN	0.15194433602156376	WITHOUT_CLASSIFICATION
// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; //      but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; //      currently this works in conjuction with the check on //      DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from //      cache with enabled filters). // EARLY EXIT!!!!!	DESIGN	0.7852690644568623	DESIGN	0.21473093554313757	WITHOUT_CLASSIFICATION
//for sets, we should end the collection load after resolving //the entities, since we might call hashCode() on the elements //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9883743723360535	DESIGN	0.011625627663946573	WITHOUT_CLASSIFICATION
//This is not very nice (and quite slow):	DESIGN	0.9475013694557685	DESIGN	0.05249863054423155	WITHOUT_CLASSIFICATION
//use of trim() here is ugly?	DESIGN	0.9948212240205646	WITHOUT_CLASSIFICATION	0.005178775979435405	DESIGN
//TODO: this is too conservative; if all preceding joins were  //      also inner joins, we could use an inner join here	DESIGN	0.9848984730179547	DESIGN	0.015101526982045206	WITHOUT_CLASSIFICATION
//TODO: look at the owning property and check that it  //      isn't lazy (by instrumentation)	DESIGN	0.7275748953456365	WITHOUT_CLASSIFICATION	0.27242510465436354	DESIGN
//TODO: inefficient	DESIGN	0.7469656662412055	WITHOUT_CLASSIFICATION	0.25303433375879436	DESIGN
// why does this matter?	DESIGN	0.9888836621539301	WITHOUT_CLASSIFICATION	0.01111633784606988	DESIGN
// from the collection of associations, locate OJA for the // ManyToOne corresponding to this persister to fully // define the many-to-many; we need that OJA so that we can // use its alias here // TODO : is there a better way here?	DESIGN	0.9999893604708311	DESIGN	1.0639529169016768E-5	WITHOUT_CLASSIFICATION
//TODO: this class depends directly upon CriteriaImpl,  //      in the impl package ... add a CriteriaImplementor  //      interface	DESIGN	0.9883626022469538	DESIGN	0.011637397753046117	WITHOUT_CLASSIFICATION
//TODO: add a CriteriaImplementor interface //      this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.8234401303364541	DESIGN	0.1765598696635459	WITHOUT_CLASSIFICATION
// TODO : not so sure this is needed...	DESIGN	0.8295099836823815	DESIGN	0.1704900163176185	WITHOUT_CLASSIFICATION
// meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9991819854438897	WITHOUT_CLASSIFICATION	8.180145561102392E-4	DESIGN
// TODO: The order in which entities are saved may matter (e.g., a particular transient entity //       may need to be saved before other transient entities can be saved; //       Keep retrying the batch of transient entities until either: //       1) there are no transient entities left in transientCopyCache //       or 2) no transient entities were saved in the last batch // For now, just run through the transient entities and retry the merge	DESIGN	0.9160314321991767	WITHOUT_CLASSIFICATION	0.08396856780082326	DESIGN
// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9907197719408277	DESIGN	0.009280228059172252	WITHOUT_CLASSIFICATION
// todo : currently expects that the individual with expressions apply to the same sql table join. //      This may not be the case for joined-subclass where the property values //      might be coming from different tables in the joined hierarchy.  At some //      point we should expand this to support that capability.  However, that has //      some difficulties: //          1) the biggest is how to handle ORs when the individual comparisons are //              linked to different sql joins. //          2) here we would need to track each comparison individually, along with //              the join alias to which it applies and then pass that information //              back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.997255454565026	WITHOUT_CLASSIFICATION	0.002744545434973925	DESIGN
// this function has a template -> restore output, apply the template and write the result out // TODO: Downcast to avoid using an interface?  Yuck.	DESIGN	0.982394378271857	WITHOUT_CLASSIFICATION	0.017605621728142975	DESIGN
// at some point the generate phase needs to be moved out of here, // because a single object-level DML might spawn multiple SQL DML // command executions. // // Possible to just move the sql generation for dml stuff, but for // consistency-sake probably best to just move responsiblity for // the generation phase completely into the delegates // (QueryLoader/StatementExecutor) themselves.  Also, not sure why // QueryLoader currently even has a dependency on this at all; does // it need it?  Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.999998471720941	DESIGN	1.5282790589167354E-6	WITHOUT_CLASSIFICATION
// get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.9989058242823636	WITHOUT_CLASSIFICATION	0.001094175717636389	DESIGN
// TODO should we just collect these like with the collections above?	DESIGN	0.994484290605207	DESIGN	0.005515709394792969	WITHOUT_CLASSIFICATION
// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification // see the discussion there in DynamicFilterParameterSpecification's javadocs as to why // it is currently not done that way.	DESIGN	0.8076937669998305	WITHOUT_CLASSIFICATION	0.19230623300016947	DESIGN
/////////////////////////////////////////////////////////////////////////// // USED ONLY FOR REGRESSION TESTING!!!! // // todo : obviously get rid of all this junk ;) ///////////////////////////////////////////////////////////////////////////	DESIGN	0.9985377431500496	WITHOUT_CLASSIFICATION	0.0014622568499504031	DESIGN
//create an index on the key columns??	DESIGN	0.9999789313500353	WITHOUT_CLASSIFICATION	2.106864996456543E-5	DESIGN
//TODO: deprecated, remove eventually	DESIGN	0.8966127112413182	WITHOUT_CLASSIFICATION	0.10338728875868175	DESIGN
//create an index on the key columns??	DESIGN	0.9999789313500353	WITHOUT_CLASSIFICATION	2.106864996456543E-5	DESIGN
//TODO: improve this hack!	DESIGN	0.9392448327207876	DESIGN	0.06075516727921237	WITHOUT_CLASSIFICATION
// inheritance cycle detection (paranoid check)	DESIGN	0.9986511624925404	WITHOUT_CLASSIFICATION	0.00134883750745966	DESIGN
//TODO: remove use of instanceof!	DESIGN	0.5964402692981114	DESIGN	0.4035597307018886	WITHOUT_CLASSIFICATION
//shortcut	DESIGN	0.9992190993725667	WITHOUT_CLASSIFICATION	7.809006274333265E-4	DESIGN
//TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.8084257439329082	WITHOUT_CLASSIFICATION	0.19157425606709175	DESIGN
// create an index on the key columns??	DESIGN	0.9999870238016213	WITHOUT_CLASSIFICATION	1.2976198378646947E-5	DESIGN
// todo : remove	DESIGN	0.9985053507780821	WITHOUT_CLASSIFICATION	0.001494649221917881	DESIGN
// todo : remove	DESIGN	0.9985053507780821	WITHOUT_CLASSIFICATION	0.001494649221917881	DESIGN
// todo : remove	DESIGN	0.9985053507780821	WITHOUT_CLASSIFICATION	0.001494649221917881	DESIGN
// todo : throw exception?	DESIGN	0.9992146582766597	WITHOUT_CLASSIFICATION	7.853417233402974E-4	DESIGN
// todo : throw exception?  maybe warn if not the same?	DESIGN	0.9968035032214857	WITHOUT_CLASSIFICATION	0.003196496778514241	DESIGN
//TODO: make EntityPersister *not* depend on SessionFactoryImplementor //interface, if possible	DESIGN	0.5712816404782108	DESIGN	0.4287183595217893	WITHOUT_CLASSIFICATION
//TODO: is there a more elegant way than downcasting?	DESIGN	0.9527265560860673	DESIGN	0.0472734439139328	WITHOUT_CLASSIFICATION
// TODO: encapsulate the protected instance variables!	DESIGN	0.8497287417457199	DESIGN	0.1502712582542802	WITHOUT_CLASSIFICATION
// should indicate that we are processing an INSERT/UPDATE/DELETE // query with a subquery implied via a collection property // function. Here, we need to use the table name itself as the // qualification alias. // TODO : verify this works for all databases... // TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9800623288558609	DESIGN	0.019937671144139097	WITHOUT_CLASSIFICATION
//TODO: copy/paste from insertRows()	DESIGN	0.7445543041104299	WITHOUT_CLASSIFICATION	0.25544569588957006	DESIGN
//TODO: copy/paste from recreate()	DESIGN	0.7445543041104299	WITHOUT_CLASSIFICATION	0.25544569588957006	DESIGN
//should this interface extend PropertyMapping?	DESIGN	0.9716739662227781	WITHOUT_CLASSIFICATION	0.028326033777221822	DESIGN
//ie. the subquery! yuck!	DESIGN	0.9986762974361791	WITHOUT_CLASSIFICATION	0.0013237025638208066	DESIGN
//TODO: move to .sql package!!	DESIGN	0.8634981683782926	DESIGN	0.13650183162170737	WITHOUT_CLASSIFICATION
//TODO: code duplication with SingleTableEntityPersister	DESIGN	0.5191992253545429	WITHOUT_CLASSIFICATION	0.4808007746454571	DESIGN
// TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9994915510244432	DESIGN	5.084489755567826E-4	WITHOUT_CLASSIFICATION
//TODO: *two* hashmap lookups here is one too many...	DESIGN	0.6391939202242636	DESIGN	0.36080607977573637	WITHOUT_CLASSIFICATION
//TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.5191992253545429	WITHOUT_CLASSIFICATION	0.4808007746454571	DESIGN
//perhaps not really necessary...	DESIGN	0.9831875004461972	WITHOUT_CLASSIFICATION	0.01681249955380283	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.9971041356983088	WITHOUT_CLASSIFICATION	0.0028958643016913145	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.9971041356983088	WITHOUT_CLASSIFICATION	0.0028958643016913145	DESIGN
//TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.9108506891993716	DESIGN	0.0891493108006284	WITHOUT_CLASSIFICATION
//TODO: optimize this better!	DESIGN	0.6316925641200539	WITHOUT_CLASSIFICATION	0.3683074358799461	DESIGN
//TODO: should we allow suffixes on these ?	DESIGN	0.9928040144291979	DESIGN	0.007195985570802177	WITHOUT_CLASSIFICATION
//This is really ugly, but necessary:	DESIGN	0.9927477053503632	WITHOUT_CLASSIFICATION	0.0072522946496368845	DESIGN
//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.7743141088330248	DESIGN	0.2256858911669753	WITHOUT_CLASSIFICATION
//TODO: disable batch loading if lockMode > READ?	DESIGN	0.997960869352305	WITHOUT_CLASSIFICATION	0.0020391306476950904	DESIGN
// append the SQL to return the generated identifier //TODO: suck into Insert	DESIGN	0.871940025344219	WITHOUT_CLASSIFICATION	0.128059974655781	DESIGN
//TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.9749559466059629	DESIGN	0.025044053394037175	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.8192402902645101	DESIGN	0.18075970973548997	WITHOUT_CLASSIFICATION
//TODO: move to .sql package, and refactor with similar things!	DESIGN	0.9230099248635341	DESIGN	0.07699007513646583	WITHOUT_CLASSIFICATION
//TODO: implement functionality //  this might be painful to do here, as the "join post processing" for //  the subquery has already been performed (meaning that for //  theta-join dialects, the join conditions have already been moved //  over to the where clause).  A "simple" solution here might to //  perform "join post processing" once for the entire query (including //  any subqueries) at one fell swoop	DESIGN	0.9992539505632467	DESIGN	7.460494367532476E-4	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.9242969498385478	WITHOUT_CLASSIFICATION	0.07570305016145225	DESIGN
//kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9989128417016827	WITHOUT_CLASSIFICATION	0.0010871582983172838	DESIGN
//is this ok?	DESIGN	0.9901954293294422	WITHOUT_CLASSIFICATION	0.009804570670557835	DESIGN
//TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9997822738369914	DESIGN	2.1772616300856393E-4	WITHOUT_CLASSIFICATION
//TODO: make this a bit nicer	DESIGN	0.969208873377324	DESIGN	0.03079112662267606	WITHOUT_CLASSIFICATION
//Yuck:	DESIGN	0.9991897437067582	WITHOUT_CLASSIFICATION	8.102562932417271E-4	DESIGN
//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.9999776202269808	DESIGN	2.237977301923785E-5	WITHOUT_CLASSIFICATION
/**	DESIGN	0.8480556639784362	DESIGN	0.15194433602156376	WITHOUT_CLASSIFICATION
// TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.9965260673626687	DESIGN	0.003473932637331297	WITHOUT_CLASSIFICATION
//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.7363667919357736	DESIGN	0.26363320806422647	WITHOUT_CLASSIFICATION
//TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.5752055737541514	WITHOUT_CLASSIFICATION	0.4247944262458486	DESIGN
// todo : YUCK!!!	DESIGN	0.9995387338639001	WITHOUT_CLASSIFICATION	4.612661360998715E-4	DESIGN
// TODO : YUCK!!!  fix after HHH-1907 is complete	DESIGN	0.980884282656486	DESIGN	0.019115717343513923	WITHOUT_CLASSIFICATION
//TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.5108412889738385	DESIGN	0.4891587110261614	WITHOUT_CLASSIFICATION
//TODO: design new lifecycle for ProxyFactory	DESIGN	0.900560212711796	WITHOUT_CLASSIFICATION	0.09943978728820398	DESIGN
//TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.5220662873942091	WITHOUT_CLASSIFICATION	0.4779337126057908	DESIGN
// TODO: copy/paste from ManyToOneType	DESIGN	0.6985614321719982	DESIGN	0.30143856782800177	WITHOUT_CLASSIFICATION
//TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9518051903556729	DESIGN	0.048194809644327014	WITHOUT_CLASSIFICATION
//TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.936697269388752	DESIGN	0.06330273061124811	WITHOUT_CLASSIFICATION
//TODO: implement caching?! proxies?!	DESIGN	0.6932108307233732	DESIGN	0.3067891692766268	WITHOUT_CLASSIFICATION
//TODO: is this right??	DESIGN	0.6818550707398564	DESIGN	0.3181449292601436	WITHOUT_CLASSIFICATION
// is this really necessary?	DESIGN	0.8943446286959547	WITHOUT_CLASSIFICATION	0.10565537130404533	DESIGN
//TODO: move these to a new JoinableType abstract class, //extended by EntityType and PersistentCollectionType:	DESIGN	0.9317823546247611	DESIGN	0.06821764537523893	WITHOUT_CLASSIFICATION
// TODO: this is very suboptimal for some subclasses (namely components), // since it does not take advantage of two-phase-load	DESIGN	0.9015478293469024	DESIGN	0.09845217065309764	WITHOUT_CLASSIFICATION
// worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.7949919821492301	DESIGN	0.2050080178507699	WITHOUT_CLASSIFICATION
// NOTE VERY HACKISH WORKAROUND!! // TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9936877819295694	DESIGN	0.006312218070430592	WITHOUT_CLASSIFICATION
// TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9945407083692281	DESIGN	0.005459291630771817	WITHOUT_CLASSIFICATION
// We would probably refactor to have LogicParser (builds a tree of simple // expressions connected by and, or, not), ExpressionParser (translates // from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like // FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much // the same thing it does now)	DESIGN	0.9980137727374948	WITHOUT_CLASSIFICATION	0.0019862272625052226	DESIGN
//TODO: this is a little inefficient, don't need to do a whole //      deep replaceElements() call	DESIGN	0.9910652390658312	DESIGN	0.008934760934168815	WITHOUT_CLASSIFICATION
//workaround for WebLogic	DESIGN	0.9973895054263978	WITHOUT_CLASSIFICATION	0.0026104945736021494	DESIGN
//TODO: this dependency is kinda Bad	DESIGN	0.9671301609985312	DESIGN	0.03286983900146874	WITHOUT_CLASSIFICATION
//ick!	DESIGN	0.9991897437067582	WITHOUT_CLASSIFICATION	8.102562932417271E-4	DESIGN
// short cut check...	DESIGN	0.9981056856288179	WITHOUT_CLASSIFICATION	0.0018943143711821707	DESIGN
// todo : move to StringHelper?	DESIGN	0.9946165511694299	WITHOUT_CLASSIFICATION	0.0053834488305700805	DESIGN
//yukky! Don't you have subclasses for that! //TODO race conditions can happen here	DESIGN	0.7422827112947505	DESIGN	0.2577172887052495	WITHOUT_CLASSIFICATION
//TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.9958022080949082	DESIGN	0.004197791905091896	WITHOUT_CLASSIFICATION
// FIXME hack to work around fact that calling // Node added = root.addChild( fqn ); doesn't  // properly set the version on the node	DESIGN	0.9999607763054811	DESIGN	3.922369451894359E-5	WITHOUT_CLASSIFICATION
// TODO: I considered validating the presence of the TS cache here, // but decided to defer unti getQueryCacheInstance() in case the  // cache is never actually used	DESIGN	0.9999623700462839	DESIGN	3.762995371603371E-5	WITHOUT_CLASSIFICATION
//need to do that here rather than in the save event listener to let //the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.8620431430746722	DESIGN	0.1379568569253279	WITHOUT_CLASSIFICATION
//TODO: simply remove this override //      if we fix the above todos	DESIGN	0.9790919298366673	DESIGN	0.020908070163332668	WITHOUT_CLASSIFICATION
// This, is used by SessionFactoryImpl to hand to the generated SessionImpl; // was the only reason I could see that we cannot just use null as // Settings.cacheProvider	DESIGN	0.950493070844416	WITHOUT_CLASSIFICATION	0.049506929155584106	DESIGN
// this is done here 'cos we might only know the type here (ugly!) // TODO: improve this a lot:	DESIGN	0.9997506126735938	DESIGN	2.4938732640619147E-4	WITHOUT_CLASSIFICATION
// todo : would love to have this work on a notification basis //    where the successful binding of an entity/subclass would //    emit a notification which the extendsQueue entries could //    react to...	DESIGN	0.9962559391295748	WITHOUT_CLASSIFICATION	0.0037440608704252805	DESIGN
// TODO : not sure the best way to handle this. // The non-performant way :	DESIGN	0.7997007154626916	DESIGN	0.20029928453730847	WITHOUT_CLASSIFICATION
// would be better to use the element-type to determine // whether the old and the new are equal here; the problem being // we do not necessarily have access to the element type in all // cases	DESIGN	0.7098562642905736	WITHOUT_CLASSIFICATION	0.29014373570942653	DESIGN
// This next bit is to allow for both unsaved-value="negative" // and for "older" behavior where version number did not get // seeded if it was already set in the object // TODO: shift it into unsaved-value strategy	DESIGN	0.9999267497009718	DESIGN	7.325029902816123E-5	WITHOUT_CLASSIFICATION
// merges don't cascade to uninitialized collections //	DESIGN	0.9997136591880964	WITHOUT_CLASSIFICATION	2.863408119035492E-4	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // return collection.getOwner()	DESIGN	0.9899935784930969	WITHOUT_CLASSIFICATION	0.010006421506903099	DESIGN
//it is possible that the tree-walking in OuterJoinLoader can get to //an association defined by a subclass, in which case the property-ref //might refer to a property defined on a subclass of the current class //in this case, the table name is not known - this temporary solution  //assumes that the property-ref refers to a property of the subclass //table that the association belongs to (a reasonable guess) //TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.999995832157477	DESIGN	4.1678425230885864E-6	WITHOUT_CLASSIFICATION
// this only works because collection entries are kept in a sequenced // map by persistence context (maybe we should do like entities and // keep a separate sequences set...) //TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.9492144033121513	DESIGN	0.05078559668784873	WITHOUT_CLASSIFICATION
// important, to account for newly saved entities in query // todo : some kind of check for new status...	DESIGN	0.9998557569320506	WITHOUT_CLASSIFICATION	1.4424306794944155E-4	DESIGN
// brand new collection //TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.9082613637522281	WITHOUT_CLASSIFICATION	0.09173863624777201	DESIGN
//TODO: if object was an uninitialized proxy, this is inefficient, //      resulting in two SQL selects	DESIGN	0.8857423084980196	WITHOUT_CLASSIFICATION	0.1142576915019804	DESIGN
//before cascade! //TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9518051903556729	DESIGN	0.048194809644327014	WITHOUT_CLASSIFICATION
// TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.7743718437828613	DESIGN	0.2256281562171387	WITHOUT_CLASSIFICATION
// todo : need to find a clean way to handle the "event source" role // a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... // passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.990952270020205	DESIGN	0.009047729979794897	WITHOUT_CLASSIFICATION
// todo : remove	DESIGN	0.9985053507780821	WITHOUT_CLASSIFICATION	0.001494649221917881	DESIGN
//aliasRefNode.resolve( false, false, aliasRefNode.getText() ); //TODO: is it kosher to do it here? //TODO: is it kosher to do it here?	DESIGN	0.6401126628026872	DESIGN	0.35988733719731286	WITHOUT_CLASSIFICATION
// No explicit select expression; render the id and properties // projection lists for every persister in the from clause into // a single 'token node'. //TODO: the only reason we need this stuff now is collection filters, //      we should get rid of derived select clause completely!	DESIGN	0.795644394520978	DESIGN	0.20435560547902198	WITHOUT_CLASSIFICATION
// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; //      the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> //          the table info gotten here should really be self-contained (i.e., a class representation //          defining all the needed attributes), then we could then get an array of those	DESIGN	0.9977726768888653	DESIGN	0.0022273231111347162	WITHOUT_CLASSIFICATION
// TODO: get SQL rendering out of here, create an AST for the join expressions. // Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9918908663332718	WITHOUT_CLASSIFICATION	0.00810913366672819	DESIGN
// TODO : this really needs to be delayed unitl after we definitively know all node types // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DESIGN	0.972417689283876	DESIGN	0.027582310716124072	WITHOUT_CLASSIFICATION
// TODO: Figure out a better way to get the FROM elements in a proper tree structure. // If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.9985362923288454	DESIGN	0.0014637076711546393	WITHOUT_CLASSIFICATION
// work around that crazy issue where the tree contains // "empty" FromElements (no text); afaict, this is caused // by FromElementFactory.createCollectionJoin()	DESIGN	0.7320453466159862	WITHOUT_CLASSIFICATION	0.26795465338401386	DESIGN
//TODO: this class does too many things! we need a different //kind of path expression parser for each of the diffferent //ways in which path expressions can occur	DESIGN	0.830255544083704	DESIGN	0.16974445591629617	WITHOUT_CLASSIFICATION
//real hacky... // used to count the nesting of parentheses	DESIGN	0.984639166798147	WITHOUT_CLASSIFICATION	0.015360833201853042	DESIGN
// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; // currently not doable though because of the resultset-ref stuff...	DESIGN	0.8973459321711311	DESIGN	0.1026540678288688	WITHOUT_CLASSIFICATION
//for arrays, we should end the collection load before resolving //the entities, since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9370796331821842	DESIGN	0.06292036681781571	WITHOUT_CLASSIFICATION
// polymorphism not really handled completely correctly, // perhaps...well, actually its ok, assuming that the // entity name used in the lookup is the same as the // the one used here, which it will be	DESIGN	0.8549813202289859	WITHOUT_CLASSIFICATION	0.1450186797710141	DESIGN
// TODO: should "record" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9994372511112612	DESIGN	5.627488887387856E-4	WITHOUT_CLASSIFICATION
// VERY IMPORTANT!!!! - This class needs to be free of any static references // to any CGLIB or Javassist classes.  Otherwise, users will always need both // on their classpaths no matter which (if either) they use. // // Another option here would be to remove the Hibernate.isPropertyInitialized() // method and have the users go through the SessionFactory to get this information.	DESIGN	0.9545636395348258	WITHOUT_CLASSIFICATION	0.045436360465174144	DESIGN
// TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).	DESIGN	0.9999999867658651	DESIGN	1.3234134767867125E-8	WITHOUT_CLASSIFICATION
//for backward compatibility, allow a set with no not-null  //element columns, using all columns in the row locater SQL //TODO: create an implicit not null constraint on all cols?	DESIGN	0.9789814563464686	WITHOUT_CLASSIFICATION	0.021018543653531348	DESIGN
//SPACES //TODO: i'm not sure, but perhaps we should exclude //      abstract denormalized tables?	DESIGN	0.9930928948769282	DESIGN	0.006907105123071837	WITHOUT_CLASSIFICATION
//workaround, for backward compatibility of sets with no //not-null columns, assume all columns are used in the //row locator SQL	DESIGN	0.9995670188451534	WITHOUT_CLASSIFICATION	4.3298115484651504E-4	DESIGN
//note that this method could easily be moved up to BasicEntityPersister, //if we ever needed to reuse it from other subclasses	DESIGN	0.7431713240105232	WITHOUT_CLASSIFICATION	0.25682867598947673	DESIGN
//index += getPropertyColumnSpan( i ); //TODO:  this is kinda slow...	DESIGN	0.595019726718949	WITHOUT_CLASSIFICATION	0.4049802732810511	DESIGN
//TODO: need some caching scheme? really comes down to decision  //      regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.8367288962661155	WITHOUT_CLASSIFICATION	0.1632711037338845	DESIGN
// TODO: here is why we need to make bytecode provider global :( // TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999997912609583	DESIGN	2.0873904168135668E-7	WITHOUT_CLASSIFICATION
//TODO: Yuck! This is not quite good enough, it's a quick //hack around the problem of having a to-one association //that refers to an embedded component:	DESIGN	0.9999551399642508	DESIGN	4.4860035749188014E-5	WITHOUT_CLASSIFICATION
// for DOM4J "collections" only // TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.9314757330079798	DESIGN	0.06852426699202023	WITHOUT_CLASSIFICATION
// would be great to move all this below here into another method that could also be used // from the new scrolling stuff. // // Would need to change the way the max-row stuff is handled (i.e. behind an interface) so // that I could do the control breaking at the means to know when to stop	DESIGN	0.9999999407630297	DESIGN	5.9236970293733735E-8	WITHOUT_CLASSIFICATION
//TODO: can we *always* use the "null property" approach for everything?	DESIGN	0.6875766867377379	DESIGN	0.3124233132622622	WITHOUT_CLASSIFICATION
//polymorphism comment above	DESIGN	0.9999472529678998	WITHOUT_CLASSIFICATION	5.2747032100258624E-5	DESIGN
// some messy, complex stuff here, since createCriteria() can take an // aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999970738824755	WITHOUT_CLASSIFICATION	2.9261175244391496E-6	DESIGN
//TODO: really bad, evil hack to fix!!!	DESIGN	0.9999975711212148	DESIGN	2.4288787853062098E-6	WITHOUT_CLASSIFICATION
// ugly hack for cases like "elements(foo.bar.collection)" // (multi-part path expression ending in elements or indices)	DESIGN	0.986342810328753	DESIGN	0.013657189671246999	WITHOUT_CLASSIFICATION
// try block is a hack around fact that currently tuplizers are not // given the opportunity to resolve a subclass entity name.  this // allows the (we assume custom) interceptor the ability to // influence this decision if we were not able to based on the // given entityName	DESIGN	0.999990875902199	DESIGN	9.124097800967634E-6	WITHOUT_CLASSIFICATION
/////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around "ghost" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially, look-ahead to the next FromElement that actually // writes something to the SQL	DESIGN	0.9461184340317934	DESIGN	0.05388156596820664	WITHOUT_CLASSIFICATION
//init the table here instead of earlier, so that we can get a quoted table name //TODO: would it be better to simply pass the qualified table name, instead of //      splitting it up into schema/catalog/table names	DESIGN	0.7108500065317909	WITHOUT_CLASSIFICATION	0.28914999346820924	DESIGN
// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method // I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so // if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.9708679293144622	DESIGN	0.029132070685537782	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.8192402902645101	DESIGN	0.18075970973548997	WITHOUT_CLASSIFICATION
//TODO: ideally we need the construction of PropertyAccessor to take the following: //      1) EntityMode //      2) EntityMode-specific data (i.e., the classname for pojo entities) //      3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) // The easiest way, with the introduction of the new runtime-metamodel classes, would be the // the following predicates: //      1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a //          org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property //      2) What is now termed a "PropertyAccessor" stores any values needed from those two //          pieces of information //      3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with //          PropertyAccessor.getSetter()	DESIGN	0.6425870158041205	DESIGN	0.35741298419587947	WITHOUT_CLASSIFICATION
//TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9835374421950729	DESIGN	0.016462557804927135	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.9242969498385478	WITHOUT_CLASSIFICATION	0.07570305016145225	DESIGN
//TODO: make this a bit nicer	DESIGN	0.969208873377324	DESIGN	0.03079112662267606	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8673094369466595	WITHOUT_CLASSIFICATION	0.1326905630533405	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8673094369466595	WITHOUT_CLASSIFICATION	0.1326905630533405	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8673094369466595	WITHOUT_CLASSIFICATION	0.1326905630533405	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8673094369466595	WITHOUT_CLASSIFICATION	0.1326905630533405	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8673094369466595	WITHOUT_CLASSIFICATION	0.1326905630533405	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8673094369466595	WITHOUT_CLASSIFICATION	0.1326905630533405	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8673094369466595	WITHOUT_CLASSIFICATION	0.1326905630533405	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8673094369466595	WITHOUT_CLASSIFICATION	0.1326905630533405	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9990771136504784	DESIGN	9.228863495217797E-4	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9990771136504784	DESIGN	9.228863495217797E-4	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9990771136504784	DESIGN	9.228863495217797E-4	WITHOUT_CLASSIFICATION
// TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9982187825254798	DESIGN	0.0017812174745203007	WITHOUT_CLASSIFICATION
