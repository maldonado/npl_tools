//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9978575282458947	WITHOUT_CLASSIFICATION	0.0021424717541054135	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9997362551628075	WITHOUT_CLASSIFICATION	2.6374483719244195E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9997362551628075	WITHOUT_CLASSIFICATION	2.6374483719244195E-4	DESIGN
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9989396249891648	WITHOUT_CLASSIFICATION	0.0010603750108352451	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9990396373559052	WITHOUT_CLASSIFICATION	9.603626440947607E-4	DESIGN
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999758573603609	WITHOUT_CLASSIFICATION	2.414263963924005E-5	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999967834370875	WITHOUT_CLASSIFICATION	3.2165629124152532E-6	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999967834370875	WITHOUT_CLASSIFICATION	3.2165629124152532E-6	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999844007378555	WITHOUT_CLASSIFICATION	1.5599262144440365E-5	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998810425191784	WITHOUT_CLASSIFICATION	1.1895748082160766E-4	DESIGN
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.999805227784769	WITHOUT_CLASSIFICATION	1.9477221523095107E-4	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.998772106643084	WITHOUT_CLASSIFICATION	0.0012278933569159968	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999655030732193	WITHOUT_CLASSIFICATION	3.4496926780616616E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999655030732193	WITHOUT_CLASSIFICATION	3.4496926780616616E-5	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9994776159832305	WITHOUT_CLASSIFICATION	5.223840167695022E-4	DESIGN
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9998615058894783	WITHOUT_CLASSIFICATION	1.384941105216976E-4	DESIGN
// decode row selection...	WITHOUT_CLASSIFICATION	0.9996626565795824	WITHOUT_CLASSIFICATION	3.3734342041762344E-4	DESIGN
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9968101732773273	WITHOUT_CLASSIFICATION	0.003189826722672639	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9972444246488659	WITHOUT_CLASSIFICATION	0.0027555753511340746	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.999679857511648	WITHOUT_CLASSIFICATION	3.2014248835203485E-4	DESIGN
// ROW ID	WITHOUT_CLASSIFICATION	0.9996586825701441	WITHOUT_CLASSIFICATION	3.413174298558472E-4	DESIGN
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9990396373559052	WITHOUT_CLASSIFICATION	9.603626440947607E-4	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9990396373559052	WITHOUT_CLASSIFICATION	9.603626440947607E-4	DESIGN
/*	WITHOUT_CLASSIFICATION	0.942601771585294	WITHOUT_CLASSIFICATION	0.057398228414705973	DESIGN
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.999064044708892	WITHOUT_CLASSIFICATION	9.359552911081005E-4	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9990396373559052	WITHOUT_CLASSIFICATION	9.603626440947607E-4	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9993451722651114	WITHOUT_CLASSIFICATION	6.548277348886416E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999054110676309	WITHOUT_CLASSIFICATION	9.458893236910214E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999054110676309	WITHOUT_CLASSIFICATION	9.458893236910214E-4	DESIGN
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9987075239992057	WITHOUT_CLASSIFICATION	0.0012924760007943068	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9997687571349195	WITHOUT_CLASSIFICATION	2.3124286508043092E-4	DESIGN
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9992208531577536	WITHOUT_CLASSIFICATION	7.79146842246299E-4	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9996617891512088	WITHOUT_CLASSIFICATION	3.382108487910775E-4	DESIGN
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.6542491645469469	DESIGN	0.3457508354530531	WITHOUT_CLASSIFICATION
/**	WITHOUT_CLASSIFICATION	0.853583738981781	DESIGN	0.14641626101821908	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
/**	WITHOUT_CLASSIFICATION	0.853583738981781	DESIGN	0.14641626101821908	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999596558650546	WITHOUT_CLASSIFICATION	4.0344134945304116E-5	DESIGN
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9442793625873672	WITHOUT_CLASSIFICATION	0.055720637412632903	DESIGN
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.8431145287333859	WITHOUT_CLASSIFICATION	0.15688547126661406	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9963945140494435	WITHOUT_CLASSIFICATION	0.0036054859505564433	DESIGN
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9990047383040891	WITHOUT_CLASSIFICATION	9.952616959108401E-4	DESIGN
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995379712749813	WITHOUT_CLASSIFICATION	4.6202872501855877E-4	DESIGN
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997113158304981	WITHOUT_CLASSIFICATION	2.886841695019915E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9998016606954174	WITHOUT_CLASSIFICATION	1.983393045826993E-4	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9990094494105661	WITHOUT_CLASSIFICATION	9.90550589433832E-4	DESIGN
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.5446918317382241	WITHOUT_CLASSIFICATION	0.4553081682617759	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9975049523510819	WITHOUT_CLASSIFICATION	0.0024950476489179582	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9990094494105661	WITHOUT_CLASSIFICATION	9.90550589433832E-4	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9975049523510819	WITHOUT_CLASSIFICATION	0.0024950476489179582	DESIGN
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9998266446078489	WITHOUT_CLASSIFICATION	1.7335539215124397E-4	DESIGN
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9996035946389581	DESIGN	3.964053610418786E-4	WITHOUT_CLASSIFICATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9972792975133765	WITHOUT_CLASSIFICATION	0.0027207024866234154	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999587653600798	WITHOUT_CLASSIFICATION	4.123463992028878E-5	DESIGN
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9997126777958668	WITHOUT_CLASSIFICATION	2.8732220413322314E-4	DESIGN
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999780971444789	WITHOUT_CLASSIFICATION	2.1902855521024118E-5	DESIGN
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999602889056693	WITHOUT_CLASSIFICATION	3.971109433062703E-5	DESIGN
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9953048839801153	WITHOUT_CLASSIFICATION	0.004695116019884731	DESIGN
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999010943440804	WITHOUT_CLASSIFICATION	9.890565591966652E-5	DESIGN
// Never evict this node	WITHOUT_CLASSIFICATION	0.9974459106318572	WITHOUT_CLASSIFICATION	0.0025540893681428177	DESIGN
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.99914270350439	WITHOUT_CLASSIFICATION	8.572964956100347E-4	DESIGN
// 60 seconds	WITHOUT_CLASSIFICATION	0.9991557981633278	WITHOUT_CLASSIFICATION	8.442018366721978E-4	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999898396494271	WITHOUT_CLASSIFICATION	1.0160350572927726E-5	DESIGN
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9770377332805127	WITHOUT_CLASSIFICATION	0.022962266719487236	DESIGN
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9812968170881764	WITHOUT_CLASSIFICATION	0.018703182911823532	DESIGN
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999398045868285	WITHOUT_CLASSIFICATION	6.019541317158324E-5	DESIGN
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9948113906555827	WITHOUT_CLASSIFICATION	0.005188609344417401	DESIGN
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999919647073727	WITHOUT_CLASSIFICATION	8.035292627235887E-6	DESIGN
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9997093827205135	WITHOUT_CLASSIFICATION	2.906172794864346E-4	DESIGN
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9997993134435573	WITHOUT_CLASSIFICATION	2.0068655644269145E-4	DESIGN
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9989940659006238	WITHOUT_CLASSIFICATION	0.0010059340993761631	DESIGN
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.999837137322204	WITHOUT_CLASSIFICATION	1.628626777959689E-4	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9982835185579974	WITHOUT_CLASSIFICATION	0.0017164814420026285	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9984314588007559	WITHOUT_CLASSIFICATION	0.0015685411992440448	DESIGN
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.6876687815010177	DESIGN	0.31233121849898227	WITHOUT_CLASSIFICATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9867619386361594	WITHOUT_CLASSIFICATION	0.013238061363840687	DESIGN
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9996159981031397	WITHOUT_CLASSIFICATION	3.8400189686031515E-4	DESIGN
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9971412016511221	WITHOUT_CLASSIFICATION	0.0028587983488779726	DESIGN
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9986498985556019	WITHOUT_CLASSIFICATION	0.001350101444398142	DESIGN
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999988967561622	WITHOUT_CLASSIFICATION	1.1032438378133297E-6	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999998397737203	WITHOUT_CLASSIFICATION	1.6022627965082285E-7	DESIGN
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999557294201687	WITHOUT_CLASSIFICATION	4.42705798312665E-5	DESIGN
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.999063700304372	WITHOUT_CLASSIFICATION	9.362996956278993E-4	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9996277444145141	WITHOUT_CLASSIFICATION	3.722555854859444E-4	DESIGN
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.99909613119388	WITHOUT_CLASSIFICATION	9.038688061199616E-4	DESIGN
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999997803979067	WITHOUT_CLASSIFICATION	2.196020932424865E-7	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9996277444145141	WITHOUT_CLASSIFICATION	3.722555854859444E-4	DESIGN
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999926100572424	WITHOUT_CLASSIFICATION	7.389942757509788E-6	DESIGN
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999704844041019	WITHOUT_CLASSIFICATION	2.951559589812667E-5	DESIGN
// ignore!	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9995960787777913	WITHOUT_CLASSIFICATION	4.039212222087382E-4	DESIGN
// construct the cache	WITHOUT_CLASSIFICATION	0.9989982343206083	WITHOUT_CLASSIFICATION	0.0010017656793916948	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9980094395429588	WITHOUT_CLASSIFICATION	0.0019905604570412167	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9980094395429588	WITHOUT_CLASSIFICATION	0.0019905604570412167	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.997509060498924	WITHOUT_CLASSIFICATION	0.0024909395010760385	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9995583075710617	WITHOUT_CLASSIFICATION	4.416924289383056E-4	DESIGN
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9994723554371711	WITHOUT_CLASSIFICATION	5.276445628289474E-4	DESIGN
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9607979628335285	WITHOUT_CLASSIFICATION	0.0392020371664715	DESIGN
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9988169479238982	WITHOUT_CLASSIFICATION	0.0011830520761018286	DESIGN
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9998989956895277	WITHOUT_CLASSIFICATION	1.0100431047228691E-4	DESIGN
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9998605639635538	WITHOUT_CLASSIFICATION	1.39436036446228E-4	DESIGN
// return the connection	WITHOUT_CLASSIFICATION	0.9988675006567487	WITHOUT_CLASSIFICATION	0.001132499343251302	DESIGN
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999240233783447	WITHOUT_CLASSIFICATION	7.597662165525671E-5	DESIGN
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999930526220301	WITHOUT_CLASSIFICATION	6.947377969863401E-6	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999330368442761	WITHOUT_CLASSIFICATION	6.696315572386816E-5	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999330368442761	WITHOUT_CLASSIFICATION	6.696315572386816E-5	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999413842908079	WITHOUT_CLASSIFICATION	5.861570919210064E-5	DESIGN
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9998284175008723	WITHOUT_CLASSIFICATION	1.7158249912777252E-4	DESIGN
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9998005824470877	WITHOUT_CLASSIFICATION	1.994175529123692E-4	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999330368442761	WITHOUT_CLASSIFICATION	6.696315572386816E-5	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999413842908079	WITHOUT_CLASSIFICATION	5.861570919210064E-5	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999413842908079	WITHOUT_CLASSIFICATION	5.861570919210064E-5	DESIGN
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9998449577751936	WITHOUT_CLASSIFICATION	1.550422248064241E-4	DESIGN
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.8427557226134441	WITHOUT_CLASSIFICATION	0.15724427738655583	DESIGN
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999998002538482	WITHOUT_CLASSIFICATION	1.9974615191633682E-7	DESIGN
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.999986756917909	WITHOUT_CLASSIFICATION	1.3243082091012988E-5	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.990811494571253	WITHOUT_CLASSIFICATION	0.00918850542874707	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.990811494571253	WITHOUT_CLASSIFICATION	0.00918850542874707	DESIGN
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9998948708412915	WITHOUT_CLASSIFICATION	1.0512915870845544E-4	DESIGN
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9989996384888146	WITHOUT_CLASSIFICATION	0.0010003615111854947	DESIGN
// default is POJO	WITHOUT_CLASSIFICATION	0.9993131813144293	WITHOUT_CLASSIFICATION	6.868186855707351E-4	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9995732573321744	WITHOUT_CLASSIFICATION	4.2674266782558935E-4	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9995732573321744	WITHOUT_CLASSIFICATION	4.2674266782558935E-4	DESIGN
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9984070073215616	WITHOUT_CLASSIFICATION	0.0015929926784383004	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999542998114563	WITHOUT_CLASSIFICATION	4.570018854360365E-5	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9926490823551242	WITHOUT_CLASSIFICATION	0.007350917644875851	DESIGN
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999882020556924	WITHOUT_CLASSIFICATION	1.179794430749252E-5	DESIGN
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9993709745117505	WITHOUT_CLASSIFICATION	6.290254882494803E-4	DESIGN
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9998197244295157	WITHOUT_CLASSIFICATION	1.8027557048422426E-4	DESIGN
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9984540760903412	WITHOUT_CLASSIFICATION	0.0015459239096588767	DESIGN
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9979308408949129	WITHOUT_CLASSIFICATION	0.002069159105087203	DESIGN
//sort first by role name	WITHOUT_CLASSIFICATION	0.9991993144651719	WITHOUT_CLASSIFICATION	8.00685534828192E-4	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9926490823551242	WITHOUT_CLASSIFICATION	0.007350917644875851	DESIGN
//then by fk	WITHOUT_CLASSIFICATION	0.9988642882593107	WITHOUT_CLASSIFICATION	0.0011357117406893002	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9995481472149141	WITHOUT_CLASSIFICATION	4.5185278508578705E-4	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9995481472149141	WITHOUT_CLASSIFICATION	4.5185278508578705E-4	DESIGN
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9965983514068986	WITHOUT_CLASSIFICATION	0.0034016485931014904	DESIGN
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9879565402005149	WITHOUT_CLASSIFICATION	0.012043459799485096	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9995692693109914	WITHOUT_CLASSIFICATION	4.3073068900853056E-4	DESIGN
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9973305828703829	WITHOUT_CLASSIFICATION	0.002669417129617049	DESIGN
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9985425675092735	WITHOUT_CLASSIFICATION	0.0014574324907265215	DESIGN
//then by id	WITHOUT_CLASSIFICATION	0.9993518955238014	WITHOUT_CLASSIFICATION	6.481044761985611E-4	DESIGN
// to be safe...	WITHOUT_CLASSIFICATION	0.9977762925241612	WITHOUT_CLASSIFICATION	0.0022237074758388667	DESIGN
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9995126981311242	WITHOUT_CLASSIFICATION	4.873018688758334E-4	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9997967224683597	WITHOUT_CLASSIFICATION	2.0327753164039555E-4	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9997967224683597	WITHOUT_CLASSIFICATION	2.0327753164039555E-4	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9989244443842024	WITHOUT_CLASSIFICATION	0.0010755556157976073	DESIGN
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9978575282458947	WITHOUT_CLASSIFICATION	0.0021424717541054135	DESIGN
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9995972817166776	WITHOUT_CLASSIFICATION	4.027182833223768E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// invokespecial	WITHOUT_CLASSIFICATION	0.9990396373559052	WITHOUT_CLASSIFICATION	9.603626440947607E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9997362551628075	WITHOUT_CLASSIFICATION	2.6374483719244195E-4	DESIGN
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9991966527086301	WITHOUT_CLASSIFICATION	8.03347291369939E-4	DESIGN
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9987520611584014	WITHOUT_CLASSIFICATION	0.0012479388415985095	DESIGN
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9998849490586295	WITHOUT_CLASSIFICATION	1.1505094137056962E-4	DESIGN
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9988526908609799	WITHOUT_CLASSIFICATION	0.001147309139020057	DESIGN
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999405435870706	WITHOUT_CLASSIFICATION	5.9456412929438934E-5	DESIGN
// new	WITHOUT_CLASSIFICATION	0.9997334561837409	WITHOUT_CLASSIFICATION	2.6654381625906056E-4	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.999674327115328	WITHOUT_CLASSIFICATION	3.2567288467191254E-4	DESIGN
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9998248776300656	WITHOUT_CLASSIFICATION	1.7512236993442125E-4	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9990396373559052	WITHOUT_CLASSIFICATION	9.603626440947607E-4	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9990396373559052	WITHOUT_CLASSIFICATION	9.603626440947607E-4	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9990396373559052	WITHOUT_CLASSIFICATION	9.603626440947607E-4	DESIGN
// aastore // args	WITHOUT_CLASSIFICATION	0.9988526908609799	WITHOUT_CLASSIFICATION	0.001147309139020057	DESIGN
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9972240489709511	WITHOUT_CLASSIFICATION	0.002775951029048868	DESIGN
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9996813361669629	WITHOUT_CLASSIFICATION	3.1866383303721664E-4	DESIGN
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9998670928981905	WITHOUT_CLASSIFICATION	1.329071018094439E-4	DESIGN
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9994845443375113	WITHOUT_CLASSIFICATION	5.154556624886646E-4	DESIGN
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9994308420354898	WITHOUT_CLASSIFICATION	5.691579645101056E-4	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999967834370875	WITHOUT_CLASSIFICATION	3.2165629124152532E-6	DESIGN
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9970716407624729	WITHOUT_CLASSIFICATION	0.0029283592375270793	DESIGN
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9995300938415461	WITHOUT_CLASSIFICATION	4.699061584538323E-4	DESIGN
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9998313314167657	WITHOUT_CLASSIFICATION	1.6866858323435314E-4	DESIGN
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9994014017971041	WITHOUT_CLASSIFICATION	5.985982028959027E-4	DESIGN
// iconst_i	WITHOUT_CLASSIFICATION	0.9990396373559052	WITHOUT_CLASSIFICATION	9.603626440947607E-4	DESIGN
// aaload	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9990406502387966	WITHOUT_CLASSIFICATION	9.593497612032569E-4	DESIGN
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9997881495645581	WITHOUT_CLASSIFICATION	2.1185043544193812E-4	DESIGN
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9997922859221438	WITHOUT_CLASSIFICATION	2.0771407785615415E-4	DESIGN
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.999994859495098	WITHOUT_CLASSIFICATION	5.140504901952984E-6	DESIGN
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9968419255483622	WITHOUT_CLASSIFICATION	0.0031580744516379014	DESIGN
// register in exception table	WITHOUT_CLASSIFICATION	0.9995260267977278	WITHOUT_CLASSIFICATION	4.7397320227218564E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9997362551628075	WITHOUT_CLASSIFICATION	2.6374483719244195E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9997362551628075	WITHOUT_CLASSIFICATION	2.6374483719244195E-4	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.999674327115328	WITHOUT_CLASSIFICATION	3.2567288467191254E-4	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9990396373559052	WITHOUT_CLASSIFICATION	9.603626440947607E-4	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9990406502387966	WITHOUT_CLASSIFICATION	9.593497612032569E-4	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999844007378555	WITHOUT_CLASSIFICATION	1.5599262144440365E-5	DESIGN
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.999875959353124	WITHOUT_CLASSIFICATION	1.2404064687599744E-4	DESIGN
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9995838436089506	WITHOUT_CLASSIFICATION	4.161563910493435E-4	DESIGN
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9991339283538657	WITHOUT_CLASSIFICATION	8.660716461342762E-4	DESIGN
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9988587819127289	WITHOUT_CLASSIFICATION	0.0011412180872711329	DESIGN
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9994764003916347	WITHOUT_CLASSIFICATION	5.235996083653435E-4	DESIGN
// athrow	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9997397400622773	WITHOUT_CLASSIFICATION	2.60259937722722E-4	DESIGN
//swallow	WITHOUT_CLASSIFICATION	0.9990094494105661	WITHOUT_CLASSIFICATION	9.90550589433832E-4	DESIGN
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9918866859377006	WITHOUT_CLASSIFICATION	0.008113314062299419	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9950597710772262	WITHOUT_CLASSIFICATION	0.004940228922773708	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9950597710772262	WITHOUT_CLASSIFICATION	0.004940228922773708	DESIGN
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.999439229494163	WITHOUT_CLASSIFICATION	5.60770505837122E-4	DESIGN
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9998072732348849	WITHOUT_CLASSIFICATION	1.9272676511506944E-4	DESIGN
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9942289409116398	WITHOUT_CLASSIFICATION	0.005771059088360196	DESIGN
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9989827973291848	WITHOUT_CLASSIFICATION	0.001017202670815211	DESIGN
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9995765841780251	WITHOUT_CLASSIFICATION	4.2341582197492276E-4	DESIGN
// case of non-static field	WITHOUT_CLASSIFICATION	0.9998190573025166	WITHOUT_CLASSIFICATION	1.809426974834529E-4	DESIGN
// getfield // get each field	WITHOUT_CLASSIFICATION	0.999550045925907	WITHOUT_CLASSIFICATION	4.4995407409287585E-4	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998810425191784	WITHOUT_CLASSIFICATION	1.1895748082160766E-4	DESIGN
// ifnonnull	WITHOUT_CLASSIFICATION	0.9990396373559052	WITHOUT_CLASSIFICATION	9.603626440947607E-4	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9990892313368761	WITHOUT_CLASSIFICATION	9.107686631237969E-4	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9990892313368761	WITHOUT_CLASSIFICATION	9.107686631237969E-4	DESIGN
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9990892313368761	WITHOUT_CLASSIFICATION	9.107686631237969E-4	DESIGN
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9992429648164899	WITHOUT_CLASSIFICATION	7.570351835101855E-4	DESIGN
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9990892313368761	WITHOUT_CLASSIFICATION	9.107686631237969E-4	DESIGN
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9998669921101818	WITHOUT_CLASSIFICATION	1.3300788981828054E-4	DESIGN
// int	WITHOUT_CLASSIFICATION	0.9998715875410003	WITHOUT_CLASSIFICATION	1.2841245899975918E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9997362551628075	WITHOUT_CLASSIFICATION	2.6374483719244195E-4	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.999674327115328	WITHOUT_CLASSIFICATION	3.2567288467191254E-4	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9990396373559052	WITHOUT_CLASSIFICATION	9.603626440947607E-4	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9990406502387966	WITHOUT_CLASSIFICATION	9.593497612032569E-4	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9990406502387966	WITHOUT_CLASSIFICATION	9.593497612032569E-4	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9994764003916347	WITHOUT_CLASSIFICATION	5.235996083653435E-4	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9994764003916347	WITHOUT_CLASSIFICATION	5.235996083653435E-4	DESIGN
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9991853742719914	WITHOUT_CLASSIFICATION	8.146257280086876E-4	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// putfield	WITHOUT_CLASSIFICATION	0.9990396373559052	WITHOUT_CLASSIFICATION	9.603626440947607E-4	DESIGN
// return ;	WITHOUT_CLASSIFICATION	0.9992754490152155	WITHOUT_CLASSIFICATION	7.24550984784511E-4	DESIGN
// ldc // field name	WITHOUT_CLASSIFICATION	0.998053835868097	WITHOUT_CLASSIFICATION	0.0019461641319029924	DESIGN
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9998961305270356	WITHOUT_CLASSIFICATION	1.0386947296435432E-4	DESIGN
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9994764003916347	WITHOUT_CLASSIFICATION	5.235996083653435E-4	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.998772106643084	WITHOUT_CLASSIFICATION	0.0012278933569159968	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.998772106643084	WITHOUT_CLASSIFICATION	0.0012278933569159968	DESIGN
// not array	WITHOUT_CLASSIFICATION	0.997625323384741	WITHOUT_CLASSIFICATION	0.0023746766152590087	DESIGN
// array of reference type	WITHOUT_CLASSIFICATION	0.9994809732932348	WITHOUT_CLASSIFICATION	5.190267067652642E-4	DESIGN
// boolean	WITHOUT_CLASSIFICATION	0.9998556325954372	WITHOUT_CLASSIFICATION	1.4436740456276568E-4	DESIGN
// byte	WITHOUT_CLASSIFICATION	0.9997303139006593	WITHOUT_CLASSIFICATION	2.6968609934081546E-4	DESIGN
// char	WITHOUT_CLASSIFICATION	0.9998638097471735	WITHOUT_CLASSIFICATION	1.3619025282658775E-4	DESIGN
// short	WITHOUT_CLASSIFICATION	0.9993652195512336	WITHOUT_CLASSIFICATION	6.347804487664291E-4	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999655030732193	WITHOUT_CLASSIFICATION	3.4496926780616616E-5	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9996800565236071	WITHOUT_CLASSIFICATION	3.199434763928196E-4	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9996800565236071	WITHOUT_CLASSIFICATION	3.199434763928196E-4	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9994776159832305	WITHOUT_CLASSIFICATION	5.223840167695022E-4	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9994776159832305	WITHOUT_CLASSIFICATION	5.223840167695022E-4	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9929904831680078	WITHOUT_CLASSIFICATION	0.0070095168319922714	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9929904831680078	WITHOUT_CLASSIFICATION	0.0070095168319922714	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9987322655003966	WITHOUT_CLASSIFICATION	0.0012677344996034502	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9987322655003966	WITHOUT_CLASSIFICATION	0.0012677344996034502	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.998772106643084	WITHOUT_CLASSIFICATION	0.0012278933569159968	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999655030732193	WITHOUT_CLASSIFICATION	3.4496926780616616E-5	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9996800565236071	WITHOUT_CLASSIFICATION	3.199434763928196E-4	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9996800565236071	WITHOUT_CLASSIFICATION	3.199434763928196E-4	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9994776159832305	WITHOUT_CLASSIFICATION	5.223840167695022E-4	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9929904831680078	WITHOUT_CLASSIFICATION	0.0070095168319922714	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9929904831680078	WITHOUT_CLASSIFICATION	0.0070095168319922714	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9987322655003966	WITHOUT_CLASSIFICATION	0.0012677344996034502	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9991603563456797	WITHOUT_CLASSIFICATION	8.396436543201838E-4	DESIGN
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9969227104803432	WITHOUT_CLASSIFICATION	0.0030772895196567625	DESIGN
//decrement the lock	WITHOUT_CLASSIFICATION	0.9984073925018607	WITHOUT_CLASSIFICATION	0.0015926074981393395	DESIGN
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9993119622345631	WITHOUT_CLASSIFICATION	6.880377654369149E-4	DESIGN
//recache the updated state	WITHOUT_CLASSIFICATION	0.9996195941746873	WITHOUT_CLASSIFICATION	3.8040582531266863E-4	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9997025540623975	WITHOUT_CLASSIFICATION	2.974459376024946E-4	DESIGN
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999198770672717	WITHOUT_CLASSIFICATION	8.012293272818977E-5	DESIGN
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9586198604484661	WITHOUT_CLASSIFICATION	0.041380139551533926	DESIGN
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9996548862568079	WITHOUT_CLASSIFICATION	3.4511374319219255E-4	DESIGN
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9993391891505621	WITHOUT_CLASSIFICATION	6.60810849437951E-4	DESIGN
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9998980727700162	WITHOUT_CLASSIFICATION	1.0192722998377253E-4	DESIGN
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999355911305984	WITHOUT_CLASSIFICATION	6.440886940162903E-5	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.997509060498924	WITHOUT_CLASSIFICATION	0.0024909395010760385	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9997025540623975	WITHOUT_CLASSIFICATION	2.974459376024946E-4	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9990094494105661	WITHOUT_CLASSIFICATION	9.90550589433832E-4	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9990094494105661	WITHOUT_CLASSIFICATION	9.90550589433832E-4	DESIGN
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9904233988463178	WITHOUT_CLASSIFICATION	0.00957660115368224	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9980313018687244	WITHOUT_CLASSIFICATION	0.0019686981312757334	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9980313018687244	WITHOUT_CLASSIFICATION	0.0019686981312757334	DESIGN
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9983324463790235	WITHOUT_CLASSIFICATION	0.001667553620976423	DESIGN
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9981408006312938	WITHOUT_CLASSIFICATION	0.0018591993687060967	DESIGN
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9957781164586997	WITHOUT_CLASSIFICATION	0.004221883541300281	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9989015105513979	WITHOUT_CLASSIFICATION	0.0010984894486021572	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9989015105513979	WITHOUT_CLASSIFICATION	0.0010984894486021572	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9972444246488659	WITHOUT_CLASSIFICATION	0.0027555753511340746	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9995823032068931	WITHOUT_CLASSIFICATION	4.176967931068148E-4	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9995823032068931	WITHOUT_CLASSIFICATION	4.176967931068148E-4	DESIGN
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9985553915509491	WITHOUT_CLASSIFICATION	0.0014446084490509698	DESIGN
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9995791343861729	WITHOUT_CLASSIFICATION	4.2086561382710544E-4	DESIGN
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9993451722651114	WITHOUT_CLASSIFICATION	6.548277348886416E-4	DESIGN
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9990396373559052	WITHOUT_CLASSIFICATION	9.603626440947607E-4	DESIGN
// MUTABLE	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// WHERE	WITHOUT_CLASSIFICATION	0.9999308116976836	WITHOUT_CLASSIFICATION	6.918830231634682E-5	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.999679857511648	WITHOUT_CLASSIFICATION	3.2014248835203485E-4	DESIGN
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9990396373559052	WITHOUT_CLASSIFICATION	9.603626440947607E-4	DESIGN
// TODO:	WITHOUT_CLASSIFICATION	0.547573188447211	WITHOUT_CLASSIFICATION	0.45242681155278897	DESIGN
// ID	WITHOUT_CLASSIFICATION	0.9996547882772332	WITHOUT_CLASSIFICATION	3.452117227668591E-4	DESIGN
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9995012634786592	WITHOUT_CLASSIFICATION	4.987365213408341E-4	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9990396373559052	WITHOUT_CLASSIFICATION	9.603626440947607E-4	DESIGN
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9991624590416893	WITHOUT_CLASSIFICATION	8.375409583107059E-4	DESIGN
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9993105419853631	WITHOUT_CLASSIFICATION	6.894580146370285E-4	DESIGN
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9996216722110786	WITHOUT_CLASSIFICATION	3.783277889214215E-4	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9990396373559052	WITHOUT_CLASSIFICATION	9.603626440947607E-4	DESIGN
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9996617891512088	WITHOUT_CLASSIFICATION	3.382108487910775E-4	DESIGN
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999570019764945	WITHOUT_CLASSIFICATION	4.299802350548821E-5	DESIGN
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9990817399561103	WITHOUT_CLASSIFICATION	9.182600438897074E-4	DESIGN
// IMPORT	WITHOUT_CLASSIFICATION	0.9996746266020716	WITHOUT_CLASSIFICATION	3.2537339792834425E-4	DESIGN
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9990454367741779	WITHOUT_CLASSIFICATION	9.545632258220341E-4	DESIGN
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9992462912496669	WITHOUT_CLASSIFICATION	7.537087503330598E-4	DESIGN
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9991853742719914	WITHOUT_CLASSIFICATION	8.146257280086876E-4	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9990396373559052	WITHOUT_CLASSIFICATION	9.603626440947607E-4	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.999079885580012	WITHOUT_CLASSIFICATION	9.201144199880471E-4	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9993451722651114	WITHOUT_CLASSIFICATION	6.548277348886416E-4	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.999688681232333	WITHOUT_CLASSIFICATION	3.1131876766700146E-4	DESIGN
// joined subclasses	WITHOUT_CLASSIFICATION	0.9996353284498164	WITHOUT_CLASSIFICATION	3.646715501836122E-4	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9996874331587313	WITHOUT_CLASSIFICATION	3.1256684126869936E-4	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.999679857511648	WITHOUT_CLASSIFICATION	3.2014248835203485E-4	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.999079885580012	WITHOUT_CLASSIFICATION	9.201144199880471E-4	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.999688681232333	WITHOUT_CLASSIFICATION	3.1131876766700146E-4	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9996874331587313	WITHOUT_CLASSIFICATION	3.1256684126869936E-4	DESIGN
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9997704180587113	WITHOUT_CLASSIFICATION	2.2958194128887407E-4	DESIGN
// TABLENAME	WITHOUT_CLASSIFICATION	0.9990396373559052	WITHOUT_CLASSIFICATION	9.603626440947607E-4	DESIGN
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9997704180587113	WITHOUT_CLASSIFICATION	2.2958194128887407E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999054110676309	WITHOUT_CLASSIFICATION	9.458893236910214E-4	DESIGN
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9990396373559052	WITHOUT_CLASSIFICATION	9.603626440947607E-4	DESIGN
// column index	WITHOUT_CLASSIFICATION	0.9999804924201475	WITHOUT_CLASSIFICATION	1.950757985240005E-5	DESIGN
//column unique-key	WITHOUT_CLASSIFICATION	0.9971837429447884	WITHOUT_CLASSIFICATION	0.0028162570552116863	DESIGN
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.997370981248981	WITHOUT_CLASSIFICATION	0.002629018751018967	DESIGN
// for an any	WITHOUT_CLASSIFICATION	0.9994089345887703	WITHOUT_CLASSIFICATION	5.910654112296389E-4	DESIGN
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999916839929788	WITHOUT_CLASSIFICATION	8.316007021252093E-6	DESIGN
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999833955424288	WITHOUT_CLASSIFICATION	1.660445757130847E-5	DESIGN
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9989007398550646	WITHOUT_CLASSIFICATION	0.001099260144935354	DESIGN
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999983610461437	WITHOUT_CLASSIFICATION	1.6389538563578922E-6	DESIGN
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999833955424288	WITHOUT_CLASSIFICATION	1.660445757130847E-5	DESIGN
// ROLENAME	WITHOUT_CLASSIFICATION	0.9990396373559052	WITHOUT_CLASSIFICATION	9.603626440947607E-4	DESIGN
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9990396373559052	WITHOUT_CLASSIFICATION	9.603626440947607E-4	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9997687571349195	WITHOUT_CLASSIFICATION	2.3124286508043092E-4	DESIGN
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9998795155548849	WITHOUT_CLASSIFICATION	1.2048444511512478E-4	DESIGN
// SORT	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.999079885580012	WITHOUT_CLASSIFICATION	9.201144199880471E-4	DESIGN
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9994764003916347	WITHOUT_CLASSIFICATION	5.235996083653435E-4	DESIGN
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9988632545622123	WITHOUT_CLASSIFICATION	0.0011367454377876685	DESIGN
// set up second pass	WITHOUT_CLASSIFICATION	0.9997772403264024	WITHOUT_CLASSIFICATION	2.227596735977256E-4	DESIGN
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9914979837616119	WITHOUT_CLASSIFICATION	0.00850201623838809	DESIGN
// a nested composite element	WITHOUT_CLASSIFICATION	0.9880761120244025	WITHOUT_CLASSIFICATION	0.011923887975597508	DESIGN
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9992647701812674	WITHOUT_CLASSIFICATION	7.352298187326273E-4	DESIGN
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.999981219755735	WITHOUT_CLASSIFICATION	1.8780244265094814E-5	DESIGN
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9998282080105636	WITHOUT_CLASSIFICATION	1.7179198943649733E-4	DESIGN
//lazy = !join;	WITHOUT_CLASSIFICATION	0.999032221551071	WITHOUT_CLASSIFICATION	9.67778448929153E-4	DESIGN
// GENERATOR	WITHOUT_CLASSIFICATION	0.9992037999937257	WITHOUT_CLASSIFICATION	7.96200006274475E-4	DESIGN
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9990114817543988	WITHOUT_CLASSIFICATION	9.885182456012003E-4	DESIGN
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9991853742719914	WITHOUT_CLASSIFICATION	8.146257280086876E-4	DESIGN
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9970886832810918	WITHOUT_CLASSIFICATION	0.002911316718908285	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9996617891512088	WITHOUT_CLASSIFICATION	3.382108487910775E-4	DESIGN
// contained elements:	WITHOUT_CLASSIFICATION	0.9990688196943308	WITHOUT_CLASSIFICATION	9.311803056692022E-4	DESIGN
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9990952236624359	WITHOUT_CLASSIFICATION	9.047763375641751E-4	DESIGN
// Bind the where	WITHOUT_CLASSIFICATION	0.9996110407983294	WITHOUT_CLASSIFICATION	3.889592016706071E-4	DESIGN
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9994402028373441	WITHOUT_CLASSIFICATION	5.597971626557924E-4	DESIGN
// Bind the filters	WITHOUT_CLASSIFICATION	0.9993286554960256	WITHOUT_CLASSIFICATION	6.713445039743492E-4	DESIGN
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9984810630512253	WITHOUT_CLASSIFICATION	0.0015189369487746125	DESIGN
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999996940138085	WITHOUT_CLASSIFICATION	3.0598619150275715E-7	DESIGN
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9998304733289912	WITHOUT_CLASSIFICATION	1.6952667100869878E-4	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.6936738785433083	DESIGN	0.3063261214566916	WITHOUT_CLASSIFICATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.998578660017486	WITHOUT_CLASSIFICATION	0.0014213399825140955	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9953631972739819	WITHOUT_CLASSIFICATION	0.004636802726018078	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9953631972739819	WITHOUT_CLASSIFICATION	0.004636802726018078	DESIGN
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9992742559121889	WITHOUT_CLASSIFICATION	7.257440878110077E-4	DESIGN
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999887244940402	WITHOUT_CLASSIFICATION	1.127550595983141E-5	DESIGN
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9991303430295543	WITHOUT_CLASSIFICATION	8.696569704457153E-4	DESIGN
// Transaction settings:	WITHOUT_CLASSIFICATION	0.999373002508236	WITHOUT_CLASSIFICATION	6.269974917639999E-4	DESIGN
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9976654067275764	WITHOUT_CLASSIFICATION	0.0023345932724236087	DESIGN
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9952524113388672	WITHOUT_CLASSIFICATION	0.004747588661132689	DESIGN
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9996132743771554	WITHOUT_CLASSIFICATION	3.8672562284451466E-4	DESIGN
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999993502887567	WITHOUT_CLASSIFICATION	6.49711243251538E-7	DESIGN
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9974714237117095	WITHOUT_CLASSIFICATION	0.0025285762882904877	DESIGN
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9973457522808156	WITHOUT_CLASSIFICATION	0.002654247719184478	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
//Schema export:	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9977759427644326	WITHOUT_CLASSIFICATION	0.002224057235567507	DESIGN
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9902705719310452	WITHOUT_CLASSIFICATION	0.00972942806895478	DESIGN
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9979782372375652	WITHOUT_CLASSIFICATION	0.002021762762434788	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999759631081685	WITHOUT_CLASSIFICATION	2.403689183157365E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9675039874273575	WITHOUT_CLASSIFICATION	0.032496012572642466	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9898190882265544	WITHOUT_CLASSIFICATION	0.01018091177344559	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999753209339942	WITHOUT_CLASSIFICATION	2.4679066005815727E-5	DESIGN
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9977167297523498	WITHOUT_CLASSIFICATION	0.002283270247650153	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9881658761871777	WITHOUT_CLASSIFICATION	0.011834123812822334	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9998440747280438	WITHOUT_CLASSIFICATION	1.559252719560927E-4	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9998440747280438	WITHOUT_CLASSIFICATION	1.559252719560927E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9972645168805084	WITHOUT_CLASSIFICATION	0.0027354831194915585	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9972645168805084	WITHOUT_CLASSIFICATION	0.0027354831194915585	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.6936738785433083	DESIGN	0.3063261214566916	WITHOUT_CLASSIFICATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9724087207983108	WITHOUT_CLASSIFICATION	0.027591279201689255	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.998547205774637	WITHOUT_CLASSIFICATION	0.001452794225363055	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9997155364337015	WITHOUT_CLASSIFICATION	2.844635662984421E-4	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9989244443842024	WITHOUT_CLASSIFICATION	0.0010755556157976073	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.998547205774637	WITHOUT_CLASSIFICATION	0.001452794225363055	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9997155364337015	WITHOUT_CLASSIFICATION	2.844635662984421E-4	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9942042020308802	WITHOUT_CLASSIFICATION	0.005795797969119736	DESIGN
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9957025791267093	WITHOUT_CLASSIFICATION	0.004297420873290728	DESIGN
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9969086597570609	WITHOUT_CLASSIFICATION	0.0030913402429392153	DESIGN
// the element has changed	WITHOUT_CLASSIFICATION	0.9999347424314387	WITHOUT_CLASSIFICATION	6.525756856138442E-5	DESIGN
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9711112404461593	WITHOUT_CLASSIFICATION	0.02888875955384065	DESIGN
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.8672316568789185	WITHOUT_CLASSIFICATION	0.13276834312108154	DESIGN
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9996272766698071	WITHOUT_CLASSIFICATION	3.727233301929401E-4	DESIGN
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9977614817161651	WITHOUT_CLASSIFICATION	0.00223851828383495	DESIGN
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.972944715548202	WITHOUT_CLASSIFICATION	0.027055284451797987	DESIGN
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999974532770406	WITHOUT_CLASSIFICATION	2.5467229594047327E-6	DESIGN
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9992663697507657	WITHOUT_CLASSIFICATION	7.336302492344385E-4	DESIGN
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9997663148700446	WITHOUT_CLASSIFICATION	2.3368512995532344E-4	DESIGN
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9990805162344589	WITHOUT_CLASSIFICATION	9.194837655411895E-4	DESIGN
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9976746205759324	WITHOUT_CLASSIFICATION	0.0023253794240677074	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9989244443842024	WITHOUT_CLASSIFICATION	0.0010755556157976073	DESIGN
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9976746205759324	WITHOUT_CLASSIFICATION	0.0023253794240677074	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.994730526520299	WITHOUT_CLASSIFICATION	0.005269473479701066	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.994730526520299	WITHOUT_CLASSIFICATION	0.005269473479701066	DESIGN
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9986365129206719	WITHOUT_CLASSIFICATION	0.0013634870793279923	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9942042020308802	WITHOUT_CLASSIFICATION	0.005795797969119736	DESIGN
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9980500652449681	WITHOUT_CLASSIFICATION	0.0019499347550319167	DESIGN
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.7587488146331561	DESIGN	0.24125118536684387	WITHOUT_CLASSIFICATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.5073679976058151	WITHOUT_CLASSIFICATION	0.49263200239418503	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.999908156761962	WITHOUT_CLASSIFICATION	9.184323803799308E-5	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.934829493302599	WITHOUT_CLASSIFICATION	0.06517050669740101	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9942042020308802	WITHOUT_CLASSIFICATION	0.005795797969119736	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.999908156761962	WITHOUT_CLASSIFICATION	9.184323803799308E-5	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.934829493302599	WITHOUT_CLASSIFICATION	0.06517050669740101	DESIGN
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.999169895303944	WITHOUT_CLASSIFICATION	8.301046960561102E-4	DESIGN
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9996637940370299	WITHOUT_CLASSIFICATION	3.3620596297022755E-4	DESIGN
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999630268599606	WITHOUT_CLASSIFICATION	3.6973140039319604E-5	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9942042020308802	WITHOUT_CLASSIFICATION	0.005795797969119736	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9942042020308802	WITHOUT_CLASSIFICATION	0.005795797969119736	DESIGN
// from Map	WITHOUT_CLASSIFICATION	0.9990440000091029	WITHOUT_CLASSIFICATION	9.559999908970967E-4	DESIGN
// from SortedMap	WITHOUT_CLASSIFICATION	0.9988517106613175	WITHOUT_CLASSIFICATION	0.0011482893386824612	DESIGN
//inject the data	WITHOUT_CLASSIFICATION	0.9993590891058608	WITHOUT_CLASSIFICATION	6.409108941391564E-4	DESIGN
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997798028207947	WITHOUT_CLASSIFICATION	2.2019717920522585E-4	DESIGN
//default pool size 20	WITHOUT_CLASSIFICATION	0.9990736840094618	WITHOUT_CLASSIFICATION	9.263159905381108E-4	DESIGN
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999883373793361	WITHOUT_CLASSIFICATION	1.166262066382003E-5	DESIGN
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999910830149268	WITHOUT_CLASSIFICATION	8.916985073208666E-6	DESIGN
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9998407330641094	WITHOUT_CLASSIFICATION	1.5926693589065954E-4	DESIGN
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9997234551278606	WITHOUT_CLASSIFICATION	2.7654487213941623E-4	DESIGN
// then bind it	WITHOUT_CLASSIFICATION	0.9988021288391186	WITHOUT_CLASSIFICATION	0.0011978711608813572	DESIGN
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.971416822161109	WITHOUT_CLASSIFICATION	0.02858317783889105	DESIGN
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9607345388706612	WITHOUT_CLASSIFICATION	0.03926546112933884	DESIGN
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9992638769639384	WITHOUT_CLASSIFICATION	7.361230360617325E-4	DESIGN
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9953256818016283	WITHOUT_CLASSIFICATION	0.004674318198371681	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994994619366309	WITHOUT_CLASSIFICATION	5.005380633691272E-4	DESIGN
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999971635344936	WITHOUT_CLASSIFICATION	2.836465506358121E-6	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9963945140494435	WITHOUT_CLASSIFICATION	0.0036054859505564433	DESIGN
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9978845803220647	WITHOUT_CLASSIFICATION	0.002115419677935256	DESIGN
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9980733715830039	WITHOUT_CLASSIFICATION	0.0019266284169960502	DESIGN
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9997155364337015	WITHOUT_CLASSIFICATION	2.844635662984421E-4	DESIGN
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9998136281276412	WITHOUT_CLASSIFICATION	1.8637187235872978E-4	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9963945140494435	WITHOUT_CLASSIFICATION	0.0036054859505564433	DESIGN
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9995846831322285	WITHOUT_CLASSIFICATION	4.153168677714561E-4	DESIGN
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.99548336143043	WITHOUT_CLASSIFICATION	0.004516638569569974	DESIGN
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9674494368676283	WITHOUT_CLASSIFICATION	0.032550563132371785	DESIGN
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9996303112535784	WITHOUT_CLASSIFICATION	3.696887464216171E-4	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9974286264839688	WITHOUT_CLASSIFICATION	0.0025713735160312174	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.999867429075271	WITHOUT_CLASSIFICATION	1.3257092472898936E-4	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9990418046757691	WITHOUT_CLASSIFICATION	9.581953242309387E-4	DESIGN
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9994764003916347	WITHOUT_CLASSIFICATION	5.235996083653435E-4	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9982388896719967	WITHOUT_CLASSIFICATION	0.0017611103280032968	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996112294626807	WITHOUT_CLASSIFICATION	3.8877053731928144E-4	DESIGN
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999787661052226	WITHOUT_CLASSIFICATION	2.1233894777420422E-5	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999757103042752	WITHOUT_CLASSIFICATION	2.4289695724743187E-5	DESIGN
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9726726790222353	WITHOUT_CLASSIFICATION	0.027327320977764732	DESIGN
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9997721905905674	WITHOUT_CLASSIFICATION	2.2780940943261407E-4	DESIGN
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9998367351395624	WITHOUT_CLASSIFICATION	1.6326486043749734E-4	DESIGN
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999419092519671	WITHOUT_CLASSIFICATION	5.8090748032800145E-5	DESIGN
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9992175646431644	WITHOUT_CLASSIFICATION	7.824353568356773E-4	DESIGN
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9947718640244906	WITHOUT_CLASSIFICATION	0.005228135975509365	DESIGN
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9990743128217603	WITHOUT_CLASSIFICATION	9.256871782397498E-4	DESIGN
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9797871313762682	WITHOUT_CLASSIFICATION	0.020212868623731894	DESIGN
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9990817658751752	WITHOUT_CLASSIFICATION	9.182341248247267E-4	DESIGN
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9995600477413218	WITHOUT_CLASSIFICATION	4.399522586782403E-4	DESIGN
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9979831115566616	WITHOUT_CLASSIFICATION	0.0020168884433383267	DESIGN
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9947160144992924	WITHOUT_CLASSIFICATION	0.005283985500707669	DESIGN
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9964147887056175	WITHOUT_CLASSIFICATION	0.003585211294382484	DESIGN
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992904022843486	WITHOUT_CLASSIFICATION	7.095977156513348E-4	DESIGN
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998214645392863	WITHOUT_CLASSIFICATION	1.7853546071371553E-4	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986290780567768	WITHOUT_CLASSIFICATION	0.0013709219432231445	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998850582838198	WITHOUT_CLASSIFICATION	0.001149417161801908	DESIGN
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986290780567768	WITHOUT_CLASSIFICATION	0.0013709219432231445	DESIGN
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986290780567768	WITHOUT_CLASSIFICATION	0.0013709219432231445	DESIGN
// by default we report no support	WITHOUT_CLASSIFICATION	0.9085293052547444	WITHOUT_CLASSIFICATION	0.09147069474525552	DESIGN
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.509914346386035	WITHOUT_CLASSIFICATION	0.4900856536139651	DESIGN
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999576462734575	WITHOUT_CLASSIFICATION	4.235372654251027E-4	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9945992170647422	WITHOUT_CLASSIFICATION	0.005400782935257869	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.990789659119125	WITHOUT_CLASSIFICATION	0.009210340880875089	DESIGN
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999687666904679	WITHOUT_CLASSIFICATION	3.123330953210365E-4	DESIGN
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998640433543647	WITHOUT_CLASSIFICATION	0.0013595664563530309	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986290780567768	WITHOUT_CLASSIFICATION	0.0013709219432231445	DESIGN
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989161947501703	WITHOUT_CLASSIFICATION	0.001083805249829724	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986290780567768	WITHOUT_CLASSIFICATION	0.0013709219432231445	DESIGN
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9998889095181215	WITHOUT_CLASSIFICATION	1.1109048187855261E-4	DESIGN
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99954362041912	WITHOUT_CLASSIFICATION	4.56379580879954E-4	DESIGN
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9881723805203945	WITHOUT_CLASSIFICATION	0.011827619479605592	DESIGN
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9996201988348699	WITHOUT_CLASSIFICATION	3.798011651301604E-4	DESIGN
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9897167535297652	WITHOUT_CLASSIFICATION	0.010283246470234736	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9964664335337166	WITHOUT_CLASSIFICATION	0.003533566466283428	DESIGN
//" cascade";	WITHOUT_CLASSIFICATION	0.9972188745473175	WITHOUT_CLASSIFICATION	0.0027811254526825726	DESIGN
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9992892070601691	WITHOUT_CLASSIFICATION	7.107929398309359E-4	DESIGN
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.999169895303944	WITHOUT_CLASSIFICATION	8.301046960561102E-4	DESIGN
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9990832249886732	WITHOUT_CLASSIFICATION	9.167750113266955E-4	DESIGN
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9990735631907204	WITHOUT_CLASSIFICATION	9.26436809279624E-4	DESIGN
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9992587888849321	WITHOUT_CLASSIFICATION	7.41211115067883E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996112294626807	WITHOUT_CLASSIFICATION	3.8877053731928144E-4	DESIGN
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9957390529464336	WITHOUT_CLASSIFICATION	0.004260947053566436	DESIGN
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9987895817169246	WITHOUT_CLASSIFICATION	0.0012104182830754739	DESIGN
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9898030887308531	WITHOUT_CLASSIFICATION	0.010196911269146906	DESIGN
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9889235218471866	WITHOUT_CLASSIFICATION	0.011076478152813487	DESIGN
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9990365801903547	WITHOUT_CLASSIFICATION	9.634198096452508E-4	DESIGN
// HHH-2300	WITHOUT_CLASSIFICATION	0.9990396373559052	WITHOUT_CLASSIFICATION	9.603626440947607E-4	DESIGN
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9989814385568662	WITHOUT_CLASSIFICATION	0.001018561443133844	DESIGN
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995021435045206	WITHOUT_CLASSIFICATION	4.978564954793527E-4	DESIGN
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991778265032277	WITHOUT_CLASSIFICATION	8.221734967723913E-4	DESIGN
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996768093959898	WITHOUT_CLASSIFICATION	3.231906040101509E-4	DESIGN
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995391216512285	WITHOUT_CLASSIFICATION	4.608783487714669E-4	DESIGN
// not null is implicit	WITHOUT_CLASSIFICATION	0.9980128137107036	WITHOUT_CLASSIFICATION	0.001987186289296511	DESIGN
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999874397582732	WITHOUT_CLASSIFICATION	1.2560241726753418E-5	DESIGN
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.999635835426392	WITHOUT_CLASSIFICATION	3.6416457360794607E-4	DESIGN
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999996514948527	WITHOUT_CLASSIFICATION	3.485051473227034E-7	DESIGN
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992560304049468	WITHOUT_CLASSIFICATION	7.439695950531613E-4	DESIGN
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9992758441134926	WITHOUT_CLASSIFICATION	7.241558865074005E-4	DESIGN
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9990506443596215	WITHOUT_CLASSIFICATION	9.493556403784523E-4	DESIGN
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.999738071360797	WITHOUT_CLASSIFICATION	2.619286392030779E-4	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9825202368730718	WITHOUT_CLASSIFICATION	0.017479763126928213	DESIGN
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9333494154667473	WITHOUT_CLASSIFICATION	0.06665058453325262	DESIGN
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.987030076827414	WITHOUT_CLASSIFICATION	0.012969923172586075	DESIGN
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9989355696729126	WITHOUT_CLASSIFICATION	0.001064430327087395	DESIGN
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9906330793706477	WITHOUT_CLASSIFICATION	0.009366920629352328	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996112294626807	WITHOUT_CLASSIFICATION	3.8877053731928144E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9964664335337166	WITHOUT_CLASSIFICATION	0.003533566466283428	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.996272475107127	WITHOUT_CLASSIFICATION	0.0037275248928730752	DESIGN
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999806810230468	WITHOUT_CLASSIFICATION	1.9318976953145298E-5	DESIGN
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9996939959480721	WITHOUT_CLASSIFICATION	3.0600405192798765E-4	DESIGN
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9996306184970352	WITHOUT_CLASSIFICATION	3.693815029648394E-4	DESIGN
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9986420459376063	WITHOUT_CLASSIFICATION	0.0013579540623937113	DESIGN
// function templates	WITHOUT_CLASSIFICATION	0.9998986538156774	WITHOUT_CLASSIFICATION	1.0134618432252835E-4	DESIGN
//not null is implicit	WITHOUT_CLASSIFICATION	0.9984441883287467	WITHOUT_CLASSIFICATION	0.0015558116712532663	DESIGN
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9997945601905448	WITHOUT_CLASSIFICATION	2.0543980945520807E-4	DESIGN
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9994277252302557	WITHOUT_CLASSIFICATION	5.722747697443082E-4	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9992068281417552	WITHOUT_CLASSIFICATION	7.931718582448707E-4	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9992380174752269	WITHOUT_CLASSIFICATION	7.619825247731349E-4	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9991661534778025	WITHOUT_CLASSIFICATION	8.338465221975075E-4	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9996138642494635	WITHOUT_CLASSIFICATION	3.8613575053642307E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996112294626807	WITHOUT_CLASSIFICATION	3.8877053731928144E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996112294626807	WITHOUT_CLASSIFICATION	3.8877053731928144E-4	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9943257128342232	WITHOUT_CLASSIFICATION	0.005674287165776787	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9994372001354462	WITHOUT_CLASSIFICATION	5.6279986455369E-4	DESIGN
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9988421728627984	WITHOUT_CLASSIFICATION	0.0011578271372014988	DESIGN
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.999169895303944	WITHOUT_CLASSIFICATION	8.301046960561102E-4	DESIGN
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9996385040953518	WITHOUT_CLASSIFICATION	3.614959046482389E-4	DESIGN
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9989908642136482	WITHOUT_CLASSIFICATION	0.0010091357863517673	DESIGN
// add new ordered map	WITHOUT_CLASSIFICATION	0.9996887724182859	WITHOUT_CLASSIFICATION	3.112275817140605E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996112294626807	WITHOUT_CLASSIFICATION	3.8877053731928144E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9997500618601972	WITHOUT_CLASSIFICATION	2.4993813980277553E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9994641452254512	WITHOUT_CLASSIFICATION	5.358547745488347E-4	DESIGN
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9930511141205255	WITHOUT_CLASSIFICATION	0.006948885879474563	DESIGN
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.999371760373518	WITHOUT_CLASSIFICATION	6.282396264819707E-4	DESIGN
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9963823310506457	WITHOUT_CLASSIFICATION	0.0036176689493543014	DESIGN
// No batch statements	WITHOUT_CLASSIFICATION	0.9999167633598147	WITHOUT_CLASSIFICATION	8.32366401853256E-5	DESIGN
/*	WITHOUT_CLASSIFICATION	0.942601771585294	WITHOUT_CLASSIFICATION	0.057398228414705973	DESIGN
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9980797793317525	WITHOUT_CLASSIFICATION	0.0019202206682475292	DESIGN
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9984460938622329	WITHOUT_CLASSIFICATION	0.0015539061377670218	DESIGN
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999158755393081	WITHOUT_CLASSIFICATION	8.412446069190421E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9964664335337166	WITHOUT_CLASSIFICATION	0.003533566466283428	DESIGN
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9891741563666687	WITHOUT_CLASSIFICATION	0.010825843633331361	DESIGN
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.99996980497646	WITHOUT_CLASSIFICATION	3.01950235399493E-5	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9776906120748443	WITHOUT_CLASSIFICATION	0.02230938792515563	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9964664335337166	WITHOUT_CLASSIFICATION	0.003533566466283428	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9996499581577295	WITHOUT_CLASSIFICATION	3.500418422705191E-4	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9997500618601972	WITHOUT_CLASSIFICATION	2.4993813980277553E-4	DESIGN
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9942299742623698	WITHOUT_CLASSIFICATION	0.005770025737630208	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996112294626807	WITHOUT_CLASSIFICATION	3.8877053731928144E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9963515233265036	WITHOUT_CLASSIFICATION	0.003648476673496484	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996112294626807	WITHOUT_CLASSIFICATION	3.8877053731928144E-4	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999507461346968	WITHOUT_CLASSIFICATION	4.925386530328722E-5	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9992068281417552	WITHOUT_CLASSIFICATION	7.931718582448707E-4	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9992380174752269	WITHOUT_CLASSIFICATION	7.619825247731349E-4	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9991661534778025	WITHOUT_CLASSIFICATION	8.338465221975075E-4	DESIGN
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999890027771843	WITHOUT_CLASSIFICATION	1.0997222815759302E-5	DESIGN
// add the main query	WITHOUT_CLASSIFICATION	0.9997213201434118	WITHOUT_CLASSIFICATION	2.7867985658825534E-4	DESIGN
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9998989444241073	WITHOUT_CLASSIFICATION	1.0105557589268257E-4	DESIGN
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.99980150159324	WITHOUT_CLASSIFICATION	1.9849840675993858E-4	DESIGN
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999914399075394	WITHOUT_CLASSIFICATION	8.560092460546665E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996112294626807	WITHOUT_CLASSIFICATION	3.8877053731928144E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9964664335337166	WITHOUT_CLASSIFICATION	0.003533566466283428	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9996138642494635	WITHOUT_CLASSIFICATION	3.8613575053642307E-4	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9943257128342232	WITHOUT_CLASSIFICATION	0.005674287165776787	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992900722385119	WITHOUT_CLASSIFICATION	7.0992776148814E-4	DESIGN
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999105035838343	WITHOUT_CLASSIFICATION	8.9496416165689E-5	DESIGN
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999424235112505	WITHOUT_CLASSIFICATION	5.757648874961516E-5	DESIGN
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9984540760903412	WITHOUT_CLASSIFICATION	0.0015459239096588767	DESIGN
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9987677107305342	WITHOUT_CLASSIFICATION	0.0012322892694659024	DESIGN
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.8031057188875435	DESIGN	0.19689428111245644	WITHOUT_CLASSIFICATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986290780567768	WITHOUT_CLASSIFICATION	0.0013709219432231445	DESIGN
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9990077770593668	WITHOUT_CLASSIFICATION	9.922229406331353E-4	DESIGN
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9894223282949312	WITHOUT_CLASSIFICATION	0.010577671705068886	DESIGN
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9910001254989329	WITHOUT_CLASSIFICATION	0.008999874501067127	DESIGN
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9968888415551931	WITHOUT_CLASSIFICATION	0.003111158444806976	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9991853742719914	WITHOUT_CLASSIFICATION	8.146257280086876E-4	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986290780567768	WITHOUT_CLASSIFICATION	0.0013709219432231445	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998850582838198	WITHOUT_CLASSIFICATION	0.001149417161801908	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9945992170647422	WITHOUT_CLASSIFICATION	0.005400782935257869	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9991853742719914	WITHOUT_CLASSIFICATION	8.146257280086876E-4	DESIGN
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9996734497161432	WITHOUT_CLASSIFICATION	3.2655028385675255E-4	DESIGN
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9986632121718525	WITHOUT_CLASSIFICATION	0.001336787828147594	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987567211075474	WITHOUT_CLASSIFICATION	0.0012432788924526693	DESIGN
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986290780567768	WITHOUT_CLASSIFICATION	0.0013709219432231445	DESIGN
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9937804826188507	WITHOUT_CLASSIFICATION	0.00621951738114933	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996112294626807	WITHOUT_CLASSIFICATION	3.8877053731928144E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996112294626807	WITHOUT_CLASSIFICATION	3.8877053731928144E-4	DESIGN
/*<String>*/	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.990789659119125	WITHOUT_CLASSIFICATION	0.009210340880875089	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986290780567768	WITHOUT_CLASSIFICATION	0.0013709219432231445	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9825202368730718	WITHOUT_CLASSIFICATION	0.017479763126928213	DESIGN
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9661739902296901	WITHOUT_CLASSIFICATION	0.03382600977030999	DESIGN
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9930733990279034	WITHOUT_CLASSIFICATION	0.00692660097209664	DESIGN
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999088206033127	WITHOUT_CLASSIFICATION	9.117939668725995E-5	DESIGN
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9990060891621775	WITHOUT_CLASSIFICATION	9.939108378225483E-4	DESIGN
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9998420870481405	WITHOUT_CLASSIFICATION	1.5791295185947437E-4	DESIGN
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9993217714905279	WITHOUT_CLASSIFICATION	6.782285094721391E-4	DESIGN
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.999420797280016	WITHOUT_CLASSIFICATION	5.79202719984105E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9982388896719967	WITHOUT_CLASSIFICATION	0.0017611103280032968	DESIGN
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9992761439683547	WITHOUT_CLASSIFICATION	7.238560316453779E-4	DESIGN
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9830744257034941	WITHOUT_CLASSIFICATION	0.016925574296505843	DESIGN
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9998176201867466	WITHOUT_CLASSIFICATION	1.8237981325332372E-4	DESIGN
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9998481403525302	WITHOUT_CLASSIFICATION	1.5185964746982766E-4	DESIGN
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999302778514977	WITHOUT_CLASSIFICATION	6.972214850232932E-5	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.998697390776864	WITHOUT_CLASSIFICATION	0.0013026092231358997	DESIGN
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996597089149976	WITHOUT_CLASSIFICATION	3.402910850023815E-4	DESIGN
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996123024604096	WITHOUT_CLASSIFICATION	3.8769753959042854E-4	DESIGN
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999636583495254	WITHOUT_CLASSIFICATION	3.6341650474597786E-5	DESIGN
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9982139696340193	WITHOUT_CLASSIFICATION	0.0017860303659807018	DESIGN
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9975961902821988	WITHOUT_CLASSIFICATION	0.002403809717801266	DESIGN
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997185061194729	WITHOUT_CLASSIFICATION	2.814938805271393E-4	DESIGN
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998517358336199	WITHOUT_CLASSIFICATION	1.4826416638003784E-4	DESIGN
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997724750780033	WITHOUT_CLASSIFICATION	2.2752492199675683E-4	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.99980231842467	WITHOUT_CLASSIFICATION	1.9768157532990487E-4	DESIGN
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9947442665309286	WITHOUT_CLASSIFICATION	0.0052557334690714035	DESIGN
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.994003829196093	WITHOUT_CLASSIFICATION	0.005996170803907004	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997724750780033	WITHOUT_CLASSIFICATION	2.2752492199675683E-4	DESIGN
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9995737700451733	WITHOUT_CLASSIFICATION	4.262299548267018E-4	DESIGN
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998926923910301	WITHOUT_CLASSIFICATION	1.073076089700187E-4	DESIGN
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988976927971085	WITHOUT_CLASSIFICATION	0.0011023072028915426	DESIGN
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9994424855240566	WITHOUT_CLASSIFICATION	5.575144759435058E-4	DESIGN
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.986703547709609	WITHOUT_CLASSIFICATION	0.013296452290391053	DESIGN
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9984760457983872	WITHOUT_CLASSIFICATION	0.001523954201612747	DESIGN
// continue loop	WITHOUT_CLASSIFICATION	0.9999041383535328	WITHOUT_CLASSIFICATION	9.586164646731105E-5	DESIGN
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9995144750604062	WITHOUT_CLASSIFICATION	4.8552493959374415E-4	DESIGN
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9995144750604062	WITHOUT_CLASSIFICATION	4.8552493959374415E-4	DESIGN
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999507316494843	WITHOUT_CLASSIFICATION	4.9268350515577375E-5	DESIGN
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9996868696475352	WITHOUT_CLASSIFICATION	3.1313035246484193E-4	DESIGN
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9943639760335882	WITHOUT_CLASSIFICATION	0.005636023966411785	DESIGN
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999696353213532	WITHOUT_CLASSIFICATION	3.0364678646717357E-5	DESIGN
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9995410835855602	WITHOUT_CLASSIFICATION	4.589164144398409E-4	DESIGN
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9994691076503909	WITHOUT_CLASSIFICATION	5.308923496091015E-4	DESIGN
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.999448413215242	WITHOUT_CLASSIFICATION	5.515867847580114E-4	DESIGN
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9998522117968893	WITHOUT_CLASSIFICATION	1.4778820311057666E-4	DESIGN
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9979795788024555	WITHOUT_CLASSIFICATION	0.0020204211975446145	DESIGN
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999487131259994	WITHOUT_CLASSIFICATION	5.1286874000692935E-5	DESIGN
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999421362739298	WITHOUT_CLASSIFICATION	5.786372607024187E-5	DESIGN
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9998325097637601	WITHOUT_CLASSIFICATION	1.674902362397403E-4	DESIGN
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9987893543084356	WITHOUT_CLASSIFICATION	0.0012106456915643691	DESIGN
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9867323943030811	WITHOUT_CLASSIFICATION	0.013267605696918839	DESIGN
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9996897443387948	WITHOUT_CLASSIFICATION	3.102556612052218E-4	DESIGN
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9786884991157953	WITHOUT_CLASSIFICATION	0.0213115008842047	DESIGN
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9995693127236522	WITHOUT_CLASSIFICATION	4.306872763478318E-4	DESIGN
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9980906952160973	WITHOUT_CLASSIFICATION	0.0019093047839026326	DESIGN
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9983199761857905	WITHOUT_CLASSIFICATION	0.001680023814209441	DESIGN
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9995163170977955	WITHOUT_CLASSIFICATION	4.8368290220452824E-4	DESIGN
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9997006636879212	WITHOUT_CLASSIFICATION	2.993363120787819E-4	DESIGN
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9997375966807376	WITHOUT_CLASSIFICATION	2.6240331926243477E-4	DESIGN
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999580815206347	WITHOUT_CLASSIFICATION	4.191847936528012E-5	DESIGN
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999407325017651	WITHOUT_CLASSIFICATION	5.9267498234859084E-5	DESIGN
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9998085888294628	WITHOUT_CLASSIFICATION	1.914111705373009E-4	DESIGN
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.999759315273951	WITHOUT_CLASSIFICATION	2.4068472604894713E-4	DESIGN
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9996651359026851	WITHOUT_CLASSIFICATION	3.348640973148269E-4	DESIGN
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9991610803164457	WITHOUT_CLASSIFICATION	8.389196835542187E-4	DESIGN
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.8999107732545777	WITHOUT_CLASSIFICATION	0.10008922674542234	DESIGN
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9991408990135681	WITHOUT_CLASSIFICATION	8.591009864320205E-4	DESIGN
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9997840152175308	WITHOUT_CLASSIFICATION	2.159847824692622E-4	DESIGN
//unwrap the object	WITHOUT_CLASSIFICATION	0.9963527285799416	WITHOUT_CLASSIFICATION	0.003647271420058476	DESIGN
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.999695741720847	WITHOUT_CLASSIFICATION	3.0425827915305214E-4	DESIGN
//return the proxied object	WITHOUT_CLASSIFICATION	0.9973492498968459	WITHOUT_CLASSIFICATION	0.0026507501031540954	DESIGN
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9996536899519373	WITHOUT_CLASSIFICATION	3.463100480626992E-4	DESIGN
// early exit...	WITHOUT_CLASSIFICATION	0.9993639979998737	WITHOUT_CLASSIFICATION	6.360020001262738E-4	DESIGN
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9964890630407354	WITHOUT_CLASSIFICATION	0.0035109369592645763	DESIGN
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.995105392854469	WITHOUT_CLASSIFICATION	0.004894607145531023	DESIGN
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.78009876490066	WITHOUT_CLASSIFICATION	0.21990123509933995	DESIGN
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999867821029673	WITHOUT_CLASSIFICATION	1.3217897032711538E-5	DESIGN
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.983278917677084	WITHOUT_CLASSIFICATION	0.016721082322916	DESIGN
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.999169895303944	WITHOUT_CLASSIFICATION	8.301046960561102E-4	DESIGN
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.999169895303944	WITHOUT_CLASSIFICATION	8.301046960561102E-4	DESIGN
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9963535546410287	WITHOUT_CLASSIFICATION	0.003646445358971159	DESIGN
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9967873526916119	WITHOUT_CLASSIFICATION	0.0032126473083881587	DESIGN
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9902335650881059	WITHOUT_CLASSIFICATION	0.009766434911894106	DESIGN
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999913376930999	WITHOUT_CLASSIFICATION	8.66230690008832E-6	DESIGN
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9998586866145633	WITHOUT_CLASSIFICATION	1.4131338543670174E-4	DESIGN
//bad cast	WITHOUT_CLASSIFICATION	0.9985236088212581	WITHOUT_CLASSIFICATION	0.00147639117874178	DESIGN
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9986523987033304	WITHOUT_CLASSIFICATION	0.0013476012966695593	DESIGN
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9847392047072103	WITHOUT_CLASSIFICATION	0.015260795292789694	DESIGN
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9998911606608212	WITHOUT_CLASSIFICATION	1.0883933917887512E-4	DESIGN
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9952628270451351	WITHOUT_CLASSIFICATION	0.004737172954864929	DESIGN
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9975961902821988	WITHOUT_CLASSIFICATION	0.002403809717801266	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9993488778914922	WITHOUT_CLASSIFICATION	6.511221085077807E-4	DESIGN
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.97091677695406	WITHOUT_CLASSIFICATION	0.02908322304594001	DESIGN
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9994723554371711	WITHOUT_CLASSIFICATION	5.276445628289474E-4	DESIGN
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9994764003916347	WITHOUT_CLASSIFICATION	5.235996083653435E-4	DESIGN
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9980128058030096	WITHOUT_CLASSIFICATION	0.0019871941969904754	DESIGN
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9986438491094967	WITHOUT_CLASSIFICATION	0.0013561508905033262	DESIGN
//take a snapshot	WITHOUT_CLASSIFICATION	0.9955956150513801	WITHOUT_CLASSIFICATION	0.004404384948619956	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.999098325336404	WITHOUT_CLASSIFICATION	9.01674663595996E-4	DESIGN
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9991791321230002	WITHOUT_CLASSIFICATION	8.208678769998189E-4	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.998613841562708	WITHOUT_CLASSIFICATION	0.0013861584372919517	DESIGN
// We've been here before	WITHOUT_CLASSIFICATION	0.9886568359390996	WITHOUT_CLASSIFICATION	0.011343164060900366	DESIGN
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999625529083361	WITHOUT_CLASSIFICATION	3.7447091663758475E-5	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.998613841562708	WITHOUT_CLASSIFICATION	0.0013861584372919517	DESIGN
// if either its role changed,	WITHOUT_CLASSIFICATION	0.999930309385285	WITHOUT_CLASSIFICATION	6.96906147149727E-5	DESIGN
// or its key changed	WITHOUT_CLASSIFICATION	0.9999872574959455	WITHOUT_CLASSIFICATION	1.2742504054480571E-5	DESIGN
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9993148270074835	WITHOUT_CLASSIFICATION	6.851729925165508E-4	DESIGN
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9969854519263832	WITHOUT_CLASSIFICATION	0.00301454807361677	DESIGN
// force initialize!	WITHOUT_CLASSIFICATION	0.9980842362737993	WITHOUT_CLASSIFICATION	0.0019157637262007187	DESIGN
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999961915205214	WITHOUT_CLASSIFICATION	3.8084794785771546E-6	DESIGN
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9984540760903412	WITHOUT_CLASSIFICATION	0.0015459239096588767	DESIGN
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9997538403210025	WITHOUT_CLASSIFICATION	2.4615967899747725E-4	DESIGN
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9967976610553319	WITHOUT_CLASSIFICATION	0.003202338944668223	DESIGN
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9969516707909671	WITHOUT_CLASSIFICATION	0.0030483292090329726	DESIGN
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999824320534643	WITHOUT_CLASSIFICATION	1.7567946535649417E-5	DESIGN
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999165537710817	WITHOUT_CLASSIFICATION	8.344622891830142E-5	DESIGN
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9891498273759325	WITHOUT_CLASSIFICATION	0.010850172624067587	DESIGN
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9998259378479613	WITHOUT_CLASSIFICATION	1.7406215203874897E-4	DESIGN
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9994327802086205	WITHOUT_CLASSIFICATION	5.672197913795651E-4	DESIGN
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9300135471608345	WITHOUT_CLASSIFICATION	0.0699864528391655	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9975961902821988	WITHOUT_CLASSIFICATION	0.002403809717801266	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9975961902821988	WITHOUT_CLASSIFICATION	0.002403809717801266	DESIGN
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999411375459625	WITHOUT_CLASSIFICATION	5.8862454037613327E-5	DESIGN
//optimization	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9975961902821988	WITHOUT_CLASSIFICATION	0.002403809717801266	DESIGN
//re-snapshot	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9997225736533336	WITHOUT_CLASSIFICATION	2.774263466663747E-4	DESIGN
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9968690028051718	WITHOUT_CLASSIFICATION	0.003130997194828157	DESIGN
//memory optimization	WITHOUT_CLASSIFICATION	0.9989124514151522	WITHOUT_CLASSIFICATION	0.0010875485848478744	DESIGN
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9991334316117625	WITHOUT_CLASSIFICATION	8.665683882375172E-4	DESIGN
// copied from Session:	WITHOUT_CLASSIFICATION	0.9963093712196933	WITHOUT_CLASSIFICATION	0.0036906287803066995	DESIGN
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.998539133738879	WITHOUT_CLASSIFICATION	0.0014608662611209665	DESIGN
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9998745199686078	WITHOUT_CLASSIFICATION	1.2548003139222023E-4	DESIGN
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999967095714727	WITHOUT_CLASSIFICATION	3.2904285272833064E-6	DESIGN
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9992984293254558	WITHOUT_CLASSIFICATION	7.015706745441663E-4	DESIGN
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9663404477518239	WITHOUT_CLASSIFICATION	0.033659552248176045	DESIGN
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9997024016995953	WITHOUT_CLASSIFICATION	2.975983004047533E-4	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.998697390776864	WITHOUT_CLASSIFICATION	0.0013026092231358997	DESIGN
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9985630096302864	WITHOUT_CLASSIFICATION	0.0014369903697135445	DESIGN
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9995561350429113	WITHOUT_CLASSIFICATION	4.438649570886734E-4	DESIGN
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9882441027283644	WITHOUT_CLASSIFICATION	0.011755897271635705	DESIGN
//do the test	WITHOUT_CLASSIFICATION	0.9999281660965094	WITHOUT_CLASSIFICATION	7.183390349064382E-5	DESIGN
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999732774785374	WITHOUT_CLASSIFICATION	2.6722521462699687E-5	DESIGN
//unwrap it	WITHOUT_CLASSIFICATION	0.9972789962676963	WITHOUT_CLASSIFICATION	0.0027210037323036978	DESIGN
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9113611982175459	WITHOUT_CLASSIFICATION	0.08863880178245413	DESIGN
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999723600334287	WITHOUT_CLASSIFICATION	2.76399665713535E-5	DESIGN
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9918465397409342	WITHOUT_CLASSIFICATION	0.008153460259065763	DESIGN
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9830629837935436	WITHOUT_CLASSIFICATION	0.0169370162064563	DESIGN
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.999863847271778	WITHOUT_CLASSIFICATION	1.3615272822193678E-4	DESIGN
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.5364265648940253	DESIGN	0.46357343510597476	WITHOUT_CLASSIFICATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9992529646449037	WITHOUT_CLASSIFICATION	7.470353550964563E-4	DESIGN
//int count = 0;	WITHOUT_CLASSIFICATION	0.9997046052650386	WITHOUT_CLASSIFICATION	2.953947349614268E-4	DESIGN
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999446439523585	WITHOUT_CLASSIFICATION	5.5356047641512964E-5	DESIGN
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9986964240000115	WITHOUT_CLASSIFICATION	0.0013035759999884657	DESIGN
//count++;	WITHOUT_CLASSIFICATION	0.9990094494105661	WITHOUT_CLASSIFICATION	9.90550589433832E-4	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9998914286451467	WITHOUT_CLASSIFICATION	1.0857135485334959E-4	DESIGN
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9985657519126946	WITHOUT_CLASSIFICATION	0.001434248087305349	DESIGN
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9736677275183665	WITHOUT_CLASSIFICATION	0.026332272481633518	DESIGN
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.999941145636432	WITHOUT_CLASSIFICATION	5.88543635680318E-5	DESIGN
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9994456984224662	WITHOUT_CLASSIFICATION	5.543015775337337E-4	DESIGN
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9984162323641624	WITHOUT_CLASSIFICATION	0.0015837676358376686	DESIGN
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999733797931215	WITHOUT_CLASSIFICATION	2.6620206878453763E-5	DESIGN
// initialize this collection	WITHOUT_CLASSIFICATION	0.9916555760071433	WITHOUT_CLASSIFICATION	0.008344423992856679	DESIGN
// create one	WITHOUT_CLASSIFICATION	0.9991325105249413	WITHOUT_CLASSIFICATION	8.6748947505858E-4	DESIGN
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9948489805197396	WITHOUT_CLASSIFICATION	0.0051510194802604015	DESIGN
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9998376579794502	WITHOUT_CLASSIFICATION	1.6234202054968912E-4	DESIGN
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.994983868595793	WITHOUT_CLASSIFICATION	0.005016131404206998	DESIGN
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9996229060023307	WITHOUT_CLASSIFICATION	3.7709399766927706E-4	DESIGN
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996123045294534	WITHOUT_CLASSIFICATION	3.8769547054661455E-4	DESIGN
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998336542008555	WITHOUT_CLASSIFICATION	1.663457991445476E-4	DESIGN
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994299215642651	WITHOUT_CLASSIFICATION	5.700784357348403E-4	DESIGN
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9813025246285978	WITHOUT_CLASSIFICATION	0.0186974753714022	DESIGN
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9993644567818762	WITHOUT_CLASSIFICATION	6.355432181237126E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999888009588941	WITHOUT_CLASSIFICATION	1.1199041105903646E-5	DESIGN
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9969586316753274	WITHOUT_CLASSIFICATION	0.003041368324672527	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9984519891012992	WITHOUT_CLASSIFICATION	0.0015480108987007853	DESIGN
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983038227118501	WITHOUT_CLASSIFICATION	0.0016961772881497752	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9984519891012992	WITHOUT_CLASSIFICATION	0.0015480108987007853	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9993575024694126	WITHOUT_CLASSIFICATION	6.42497530587556E-4	DESIGN
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9974212044746577	WITHOUT_CLASSIFICATION	0.002578795525342239	DESIGN
// named parameter	WITHOUT_CLASSIFICATION	0.9975932702772538	WITHOUT_CLASSIFICATION	0.002406729722746256	DESIGN
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9778363834096846	WITHOUT_CLASSIFICATION	0.022163616590315394	DESIGN
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9869301986397648	WITHOUT_CLASSIFICATION	0.013069801360235262	DESIGN
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9987049474722886	WITHOUT_CLASSIFICATION	0.0012950525277114777	DESIGN
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9988190693850357	WITHOUT_CLASSIFICATION	0.001180930614964244	DESIGN
// perform the actual work	WITHOUT_CLASSIFICATION	0.9984638752801552	WITHOUT_CLASSIFICATION	0.0015361247198447448	DESIGN
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999556527338552	WITHOUT_CLASSIFICATION	4.434726614470463E-5	DESIGN
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9968791208173126	WITHOUT_CLASSIFICATION	0.0031208791826875058	DESIGN
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9979409284213936	WITHOUT_CLASSIFICATION	0.0020590715786063954	DESIGN
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9850890396942246	WITHOUT_CLASSIFICATION	0.014910960305775364	DESIGN
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9990601892929825	WITHOUT_CLASSIFICATION	9.39810707017642E-4	DESIGN
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.8853374108194946	WITHOUT_CLASSIFICATION	0.11466258918050544	DESIGN
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.984980466032218	WITHOUT_CLASSIFICATION	0.015019533967782012	DESIGN
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9963354090086429	WITHOUT_CLASSIFICATION	0.0036645909913569264	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9996528884128107	WITHOUT_CLASSIFICATION	3.471115871892681E-4	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9996528884128107	WITHOUT_CLASSIFICATION	3.471115871892681E-4	DESIGN
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9952489580784993	WITHOUT_CLASSIFICATION	0.004751041921500729	DESIGN
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9996044945821871	WITHOUT_CLASSIFICATION	3.955054178129019E-4	DESIGN
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9994726880568559	WITHOUT_CLASSIFICATION	5.273119431441617E-4	DESIGN
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999015155471791	WITHOUT_CLASSIFICATION	9.848445282100121E-5	DESIGN
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9992413834489625	WITHOUT_CLASSIFICATION	7.58616551037529E-4	DESIGN
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9724467684042045	WITHOUT_CLASSIFICATION	0.027553231595795463	DESIGN
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9691954226731464	WITHOUT_CLASSIFICATION	0.03080457732685369	DESIGN
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9975273435894615	WITHOUT_CLASSIFICATION	0.002472656410538461	DESIGN
// grab its current state	WITHOUT_CLASSIFICATION	0.9999407917815635	WITHOUT_CLASSIFICATION	5.9208218436503755E-5	DESIGN
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.999681582000452	WITHOUT_CLASSIFICATION	3.1841799954808046E-4	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999089584290662	WITHOUT_CLASSIFICATION	9.104157093375417E-5	DESIGN
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999201801972453	WITHOUT_CLASSIFICATION	7.981980275474433E-5	DESIGN
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999103204265922	WITHOUT_CLASSIFICATION	8.96795734076954E-5	DESIGN
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9998998980479068	WITHOUT_CLASSIFICATION	1.0010195209319146E-4	DESIGN
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999366043912535	WITHOUT_CLASSIFICATION	6.339560874651057E-5	DESIGN
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9963997015495819	WITHOUT_CLASSIFICATION	0.003600298450418145	DESIGN
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9949837208523744	WITHOUT_CLASSIFICATION	0.005016279147625625	DESIGN
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9563506374663587	WITHOUT_CLASSIFICATION	0.04364936253364124	DESIGN
//use the current version	WITHOUT_CLASSIFICATION	0.9998943268584128	WITHOUT_CLASSIFICATION	1.0567314158710123E-4	DESIGN
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999748234116272	WITHOUT_CLASSIFICATION	2.5176588372734473E-5	DESIGN
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9997615960428595	WITHOUT_CLASSIFICATION	2.3840395714036785E-4	DESIGN
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999944698391562	WITHOUT_CLASSIFICATION	5.5301608437957616E-6	DESIGN
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999966383601112	WITHOUT_CLASSIFICATION	3.3616398886571476E-6	DESIGN
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9117146902879707	WITHOUT_CLASSIFICATION	0.0882853097120293	DESIGN
//even process null collections	WITHOUT_CLASSIFICATION	0.9996822531397889	WITHOUT_CLASSIFICATION	3.1774686021114796E-4	DESIGN
// get the id from the object	WITHOUT_CLASSIFICATION	0.9995186770268046	WITHOUT_CLASSIFICATION	4.813229731953741E-4	DESIGN
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9992001445338495	WITHOUT_CLASSIFICATION	7.998554661503625E-4	DESIGN
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9996273567710446	WITHOUT_CLASSIFICATION	3.7264322895539954E-4	DESIGN
/// HHH-2378	WITHOUT_CLASSIFICATION	0.996304574609736	WITHOUT_CLASSIFICATION	0.003695425390264051	DESIGN
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9987777140790945	WITHOUT_CLASSIFICATION	0.0012222859209054607	DESIGN
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9993158509628556	WITHOUT_CLASSIFICATION	6.841490371444245E-4	DESIGN
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9995856868240521	WITHOUT_CLASSIFICATION	4.143131759479375E-4	DESIGN
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9995844506666552	WITHOUT_CLASSIFICATION	4.1554933334471937E-4	DESIGN
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9976731421666024	WITHOUT_CLASSIFICATION	0.0023268578333974503	DESIGN
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.998917072955067	WITHOUT_CLASSIFICATION	0.0010829270449329638	DESIGN
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9992927930206075	WITHOUT_CLASSIFICATION	7.072069793925824E-4	DESIGN
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999645978412994	WITHOUT_CLASSIFICATION	3.540215870058588E-5	DESIGN
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9978964803545207	WITHOUT_CLASSIFICATION	0.0021035196454793864	DESIGN
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9998083212230364	WITHOUT_CLASSIFICATION	1.9167877696355892E-4	DESIGN
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9997764566188657	WITHOUT_CLASSIFICATION	2.2354338113427327E-4	DESIGN
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999322707887314	WITHOUT_CLASSIFICATION	6.772921126866675E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993856152495371	WITHOUT_CLASSIFICATION	6.143847504629635E-4	DESIGN
//some statistics	WITHOUT_CLASSIFICATION	0.9980917866157413	WITHOUT_CLASSIFICATION	0.0019082133842587504	DESIGN
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9968275581266578	WITHOUT_CLASSIFICATION	0.003172441873342271	DESIGN
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999674867976202	WITHOUT_CLASSIFICATION	3.251320237987946E-5	DESIGN
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9734804630065285	WITHOUT_CLASSIFICATION	0.02651953699347151	DESIGN
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.933193901269375	WITHOUT_CLASSIFICATION	0.06680609873062508	DESIGN
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999803845589246	WITHOUT_CLASSIFICATION	1.961544107547258E-5	DESIGN
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9996291135997636	WITHOUT_CLASSIFICATION	3.708864002364283E-4	DESIGN
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9697237181171839	WITHOUT_CLASSIFICATION	0.03027628188281603	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993856152495371	WITHOUT_CLASSIFICATION	6.143847504629635E-4	DESIGN
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9989781925717708	WITHOUT_CLASSIFICATION	0.0010218074282292617	DESIGN
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9835325297821835	WITHOUT_CLASSIFICATION	0.01646747021781642	DESIGN
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9993571074916868	WITHOUT_CLASSIFICATION	6.42892508313186E-4	DESIGN
//get a snapshot	WITHOUT_CLASSIFICATION	0.9970801386250878	WITHOUT_CLASSIFICATION	0.002919861374912128	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9996499581577295	WITHOUT_CLASSIFICATION	3.500418422705191E-4	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9996499581577295	WITHOUT_CLASSIFICATION	3.500418422705191E-4	DESIGN
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999722306988184	WITHOUT_CLASSIFICATION	2.776930118155658E-5	DESIGN
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9990396373559052	WITHOUT_CLASSIFICATION	9.603626440947607E-4	DESIGN
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.998685073320224	WITHOUT_CLASSIFICATION	0.0013149266797759169	DESIGN
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9997393539401958	WITHOUT_CLASSIFICATION	2.606460598043125E-4	DESIGN
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999074171547914	WITHOUT_CLASSIFICATION	9.258284520861286E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.999613503948062	WITHOUT_CLASSIFICATION	3.864960519379117E-4	DESIGN
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9985410815188395	WITHOUT_CLASSIFICATION	0.0014589184811605882	DESIGN
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9842739183547565	WITHOUT_CLASSIFICATION	0.015726081645243573	DESIGN
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999421866714601	WITHOUT_CLASSIFICATION	5.7813328539790097E-5	DESIGN
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9998650525335692	WITHOUT_CLASSIFICATION	1.349474664309581E-4	DESIGN
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.999840822487263	WITHOUT_CLASSIFICATION	1.591775127369893E-4	DESIGN
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9980327602008587	WITHOUT_CLASSIFICATION	0.0019672397991412583	DESIGN
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9989530300664433	WITHOUT_CLASSIFICATION	0.0010469699335567165	DESIGN
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9959639725096097	WITHOUT_CLASSIFICATION	0.004036027490390333	DESIGN
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.5737042037391532	WITHOUT_CLASSIFICATION	0.4262957962608467	DESIGN
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9895047292698476	WITHOUT_CLASSIFICATION	0.010495270730152467	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9988757249394392	WITHOUT_CLASSIFICATION	0.0011242750605607173	DESIGN
//cachedState,	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9935174062256623	WITHOUT_CLASSIFICATION	0.0064825937743377094	DESIGN
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9976019473254498	WITHOUT_CLASSIFICATION	0.002398052674550169	DESIGN
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9798169924384986	WITHOUT_CLASSIFICATION	0.020183007561501386	DESIGN
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9991661704742322	WITHOUT_CLASSIFICATION	8.338295257677931E-4	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9991218241935286	WITHOUT_CLASSIFICATION	8.78175806471352E-4	DESIGN
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999913747518371	WITHOUT_CLASSIFICATION	8.625248162887453E-6	DESIGN
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9989285236881738	WITHOUT_CLASSIFICATION	0.0010714763118262686	DESIGN
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9997725190084539	WITHOUT_CLASSIFICATION	2.2748099154601528E-4	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9987383698794171	WITHOUT_CLASSIFICATION	0.001261630120582951	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9839691671322413	WITHOUT_CLASSIFICATION	0.016030832867758738	DESIGN
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999871221948649	WITHOUT_CLASSIFICATION	1.2877805135012015E-5	DESIGN
//DELETED	WITHOUT_CLASSIFICATION	0.9990094494105661	WITHOUT_CLASSIFICATION	9.90550589433832E-4	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9998922186822948	WITHOUT_CLASSIFICATION	1.0778131770521514E-4	DESIGN
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.898096226881597	WITHOUT_CLASSIFICATION	0.10190377311840305	DESIGN
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9097769187742176	WITHOUT_CLASSIFICATION	0.09022308122578235	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.999888788999601	WITHOUT_CLASSIFICATION	1.112110003989412E-4	DESIGN
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999424187671067	WITHOUT_CLASSIFICATION	5.758123289330135E-5	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9993817156184157	WITHOUT_CLASSIFICATION	6.182843815843326E-4	DESIGN
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9998699247253421	WITHOUT_CLASSIFICATION	1.3007527465792507E-4	DESIGN
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9865942942922891	WITHOUT_CLASSIFICATION	0.013405705707710894	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9951399891997578	WITHOUT_CLASSIFICATION	0.004860010800242185	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999089584290662	WITHOUT_CLASSIFICATION	9.104157093375417E-5	DESIGN
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.998817332801506	WITHOUT_CLASSIFICATION	0.0011826671984940945	DESIGN
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9993217714905279	WITHOUT_CLASSIFICATION	6.782285094721391E-4	DESIGN
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999000576838709	WITHOUT_CLASSIFICATION	9.994231612909417E-5	DESIGN
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9955540058611114	WITHOUT_CLASSIFICATION	0.004445994138888563	DESIGN
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999739049445127	WITHOUT_CLASSIFICATION	2.6095055487440248E-5	DESIGN
// the object is persistent	WITHOUT_CLASSIFICATION	0.9992830144948641	WITHOUT_CLASSIFICATION	7.169855051358774E-4	DESIGN
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9998702685567821	WITHOUT_CLASSIFICATION	1.2973144321784348E-4	DESIGN
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999131037943125	WITHOUT_CLASSIFICATION	8.689620568746713E-5	DESIGN
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9975961902821988	WITHOUT_CLASSIFICATION	0.002403809717801266	DESIGN
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9997119630975644	WITHOUT_CLASSIFICATION	2.880369024355621E-4	DESIGN
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9974836043083136	WITHOUT_CLASSIFICATION	0.002516395691686274	DESIGN
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9974782272090684	WITHOUT_CLASSIFICATION	0.0025217727909315657	DESIGN
// eat it and try next	WITHOUT_CLASSIFICATION	0.9917105442209904	WITHOUT_CLASSIFICATION	0.008289455779009646	DESIGN
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9992898170168105	WITHOUT_CLASSIFICATION	7.101829831894248E-4	DESIGN
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9988199929272508	WITHOUT_CLASSIFICATION	0.0011800070727491895	DESIGN
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9975402205746846	WITHOUT_CLASSIFICATION	0.0024597794253153654	DESIGN
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9994898159940194	WITHOUT_CLASSIFICATION	5.101840059805626E-4	DESIGN
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9993781892259765	WITHOUT_CLASSIFICATION	6.218107740235716E-4	DESIGN
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9984540760903412	WITHOUT_CLASSIFICATION	0.0015459239096588767	DESIGN
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9984540760903412	WITHOUT_CLASSIFICATION	0.0015459239096588767	DESIGN
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9996142359340969	WITHOUT_CLASSIFICATION	3.8576406590313216E-4	DESIGN
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9967086237685017	WITHOUT_CLASSIFICATION	0.0032913762314983118	DESIGN
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9992258242767225	WITHOUT_CLASSIFICATION	7.741757232776083E-4	DESIGN
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9980301449699046	WITHOUT_CLASSIFICATION	0.001969855030095437	DESIGN
// Note this!!	WITHOUT_CLASSIFICATION	0.9997440598862155	WITHOUT_CLASSIFICATION	2.559401137845467E-4	DESIGN
// Error message constants.	WITHOUT_CLASSIFICATION	0.9994332422150788	WITHOUT_CLASSIFICATION	5.667577849212001E-4	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982269705441927	WITHOUT_CLASSIFICATION	0.0017730294558073749	DESIGN
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998265011610974	WITHOUT_CLASSIFICATION	0.0017349883890259144	DESIGN
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9950154779163491	WITHOUT_CLASSIFICATION	0.00498452208365085	DESIGN
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999406833152874	WITHOUT_CLASSIFICATION	5.931668471270217E-5	DESIGN
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9976821534011674	WITHOUT_CLASSIFICATION	0.0023178465988326342	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999469109399693	WITHOUT_CLASSIFICATION	5.308906003068933E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999469109399693	WITHOUT_CLASSIFICATION	5.308906003068933E-4	DESIGN
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9958729803057759	WITHOUT_CLASSIFICATION	0.00412701969422419	DESIGN
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9992506223775929	WITHOUT_CLASSIFICATION	7.493776224070753E-4	DESIGN
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999211888293973	WITHOUT_CLASSIFICATION	7.881117060280822E-5	DESIGN
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999585882040889	WITHOUT_CLASSIFICATION	4.1411795911055236E-5	DESIGN
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9996663806363503	WITHOUT_CLASSIFICATION	3.3361936364969885E-4	DESIGN
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9945674661575483	WITHOUT_CLASSIFICATION	0.005432533842451663	DESIGN
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.998722132792978	WITHOUT_CLASSIFICATION	0.0012778672070221455	DESIGN
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999737993007088	WITHOUT_CLASSIFICATION	2.620069929120661E-5	DESIGN
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9995103329883445	WITHOUT_CLASSIFICATION	4.896670116554635E-4	DESIGN
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999505902385734	WITHOUT_CLASSIFICATION	4.9409761426564785E-5	DESIGN
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9997702175476239	WITHOUT_CLASSIFICATION	2.297824523762743E-4	DESIGN
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999816259077479	WITHOUT_CLASSIFICATION	1.8374092252169243E-5	DESIGN
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9997973923264258	WITHOUT_CLASSIFICATION	2.0260767357412106E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999469109399693	WITHOUT_CLASSIFICATION	5.308906003068933E-4	DESIGN
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9994475077090086	WITHOUT_CLASSIFICATION	5.524922909913523E-4	DESIGN
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9944454717897564	WITHOUT_CLASSIFICATION	0.005554528210243628	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9054288108747078	WITHOUT_CLASSIFICATION	0.09457118912529212	DESIGN
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9980829638946186	WITHOUT_CLASSIFICATION	0.001917036105381343	DESIGN
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999000469455106	WITHOUT_CLASSIFICATION	9.995305448941588E-5	DESIGN
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9996521974672198	WITHOUT_CLASSIFICATION	3.478025327801779E-4	DESIGN
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.999858897848712	WITHOUT_CLASSIFICATION	1.4110215128801314E-4	DESIGN
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9989988477859073	WITHOUT_CLASSIFICATION	0.001001152214092776	DESIGN
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9991924065951044	WITHOUT_CLASSIFICATION	8.075934048956366E-4	DESIGN
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9959226471759609	WITHOUT_CLASSIFICATION	0.004077352824039138	DESIGN
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9990135394303522	WITHOUT_CLASSIFICATION	9.864605696478137E-4	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982269705441927	WITHOUT_CLASSIFICATION	0.0017730294558073749	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999469109399693	WITHOUT_CLASSIFICATION	5.308906003068933E-4	DESIGN
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9998593553195428	WITHOUT_CLASSIFICATION	1.4064468045711794E-4	DESIGN
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9984104294018749	WITHOUT_CLASSIFICATION	0.0015895705981251013	DESIGN
// switch	WITHOUT_CLASSIFICATION	0.9997828163041166	WITHOUT_CLASSIFICATION	2.171836958833641E-4	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9977284285776592	WITHOUT_CLASSIFICATION	0.0022715714223407553	DESIGN
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9973035646499093	WITHOUT_CLASSIFICATION	0.0026964353500906345	DESIGN
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9984680532370913	WITHOUT_CLASSIFICATION	0.0015319467629086629	DESIGN
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986978720979333	WITHOUT_CLASSIFICATION	0.0013021279020667292	DESIGN
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999780970862954	WITHOUT_CLASSIFICATION	2.1902913704675727E-5	DESIGN
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999788520777779	WITHOUT_CLASSIFICATION	2.1147922222032748E-5	DESIGN
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9993656100119046	WITHOUT_CLASSIFICATION	6.343899880953142E-4	DESIGN
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9997763999830204	WITHOUT_CLASSIFICATION	2.2360001697960914E-4	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9984842794669779	WITHOUT_CLASSIFICATION	0.0015157205330220398	DESIGN
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9993693813866185	WITHOUT_CLASSIFICATION	6.306186133815568E-4	DESIGN
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9878235424947776	WITHOUT_CLASSIFICATION	0.012176457505222452	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9993575024694126	WITHOUT_CLASSIFICATION	6.42497530587556E-4	DESIGN
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.999839517299215	WITHOUT_CLASSIFICATION	1.6048270078491028E-4	DESIGN
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9995499403992085	WITHOUT_CLASSIFICATION	4.500596007914777E-4	DESIGN
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9994037418890127	WITHOUT_CLASSIFICATION	5.962581109872833E-4	DESIGN
// all clear	WITHOUT_CLASSIFICATION	0.9995991593605408	WITHOUT_CLASSIFICATION	4.008406394592361E-4	DESIGN
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9998850654234722	WITHOUT_CLASSIFICATION	1.1493457652783603E-4	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9992596051648093	WITHOUT_CLASSIFICATION	7.403948351906426E-4	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9992596051648093	WITHOUT_CLASSIFICATION	7.403948351906426E-4	DESIGN
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999282825251304	WITHOUT_CLASSIFICATION	7.171747486958531E-5	DESIGN
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9960944529919876	WITHOUT_CLASSIFICATION	0.0039055470080123986	DESIGN
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999626558161098	WITHOUT_CLASSIFICATION	3.734418389028921E-5	DESIGN
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.986626552023691	WITHOUT_CLASSIFICATION	0.013373447976308992	DESIGN
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9998732349374234	WITHOUT_CLASSIFICATION	1.2676506257658357E-4	DESIGN
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999920062821781	WITHOUT_CLASSIFICATION	7.993717821829615E-6	DESIGN
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9985599515627751	WITHOUT_CLASSIFICATION	0.0014400484372249578	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9996847959931171	WITHOUT_CLASSIFICATION	3.1520400688283797E-4	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9996847959931171	WITHOUT_CLASSIFICATION	3.1520400688283797E-4	DESIGN
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9993489325262171	WITHOUT_CLASSIFICATION	6.510674737827319E-4	DESIGN
// Transform the tree.	WITHOUT_CLASSIFICATION	0.999494242850553	WITHOUT_CLASSIFICATION	5.057571494469946E-4	DESIGN
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999257903963398	WITHOUT_CLASSIFICATION	7.420960366022294E-5	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9996418001827597	WITHOUT_CLASSIFICATION	3.58199817240259E-4	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9996418001827597	WITHOUT_CLASSIFICATION	3.58199817240259E-4	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9996418001827597	WITHOUT_CLASSIFICATION	3.58199817240259E-4	DESIGN
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999621729119235	WITHOUT_CLASSIFICATION	3.782708807656681E-5	DESIGN
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9995349638358058	WITHOUT_CLASSIFICATION	4.6503616419420413E-4	DESIGN
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999755127548192	WITHOUT_CLASSIFICATION	2.4487245180859598E-5	DESIGN
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9992754941806629	WITHOUT_CLASSIFICATION	7.245058193371935E-4	DESIGN
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9992393395913476	WITHOUT_CLASSIFICATION	7.606604086524912E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999469109399693	WITHOUT_CLASSIFICATION	5.308906003068933E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999469109399693	WITHOUT_CLASSIFICATION	5.308906003068933E-4	DESIGN
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9916003469341304	WITHOUT_CLASSIFICATION	0.008399653065869614	DESIGN
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999604085338942	WITHOUT_CLASSIFICATION	3.9591466105797135E-5	DESIGN
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.942851153188257	WITHOUT_CLASSIFICATION	0.05714884681174312	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9941651915942579	WITHOUT_CLASSIFICATION	0.00583480840574203	DESIGN
// igndore it...	WITHOUT_CLASSIFICATION	0.9928875863741323	WITHOUT_CLASSIFICATION	0.007112413625867601	DESIGN
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9867757682589547	WITHOUT_CLASSIFICATION	0.013224231741045296	DESIGN
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.994523730559635	WITHOUT_CLASSIFICATION	0.005476269440364994	DESIGN
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9990355218061717	WITHOUT_CLASSIFICATION	9.644781938282097E-4	DESIGN
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.999935624798614	WITHOUT_CLASSIFICATION	6.437520138594971E-5	DESIGN
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999881147796302	WITHOUT_CLASSIFICATION	1.1885220369844985E-5	DESIGN
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999167053266186	WITHOUT_CLASSIFICATION	8.329467338142548E-5	DESIGN
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9996223438476036	WITHOUT_CLASSIFICATION	3.7765615239644174E-4	DESIGN
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9996223438476036	WITHOUT_CLASSIFICATION	3.7765615239644174E-4	DESIGN
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9996223438476036	WITHOUT_CLASSIFICATION	3.7765615239644174E-4	DESIGN
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9996223438476036	WITHOUT_CLASSIFICATION	3.7765615239644174E-4	DESIGN
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9996223438476036	WITHOUT_CLASSIFICATION	3.7765615239644174E-4	DESIGN
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9997572999262494	WITHOUT_CLASSIFICATION	2.4270007375053635E-4	DESIGN
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9997572999262494	WITHOUT_CLASSIFICATION	2.4270007375053635E-4	DESIGN
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9997572999262494	WITHOUT_CLASSIFICATION	2.4270007375053635E-4	DESIGN
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9997572999262494	WITHOUT_CLASSIFICATION	2.4270007375053635E-4	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9978222180274626	WITHOUT_CLASSIFICATION	0.002177781972537328	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9992596051648093	WITHOUT_CLASSIFICATION	7.403948351906426E-4	DESIGN
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9993696803964969	WITHOUT_CLASSIFICATION	6.303196035031484E-4	DESIGN
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9997572999262494	WITHOUT_CLASSIFICATION	2.4270007375053635E-4	DESIGN
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9909824511980841	WITHOUT_CLASSIFICATION	0.009017548801915866	DESIGN
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9989742530841458	WITHOUT_CLASSIFICATION	0.0010257469158541348	DESIGN
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9998504233175611	WITHOUT_CLASSIFICATION	1.495766824387685E-4	DESIGN
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9996037577878755	WITHOUT_CLASSIFICATION	3.96242212124553E-4	DESIGN
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9993277640724193	WITHOUT_CLASSIFICATION	6.722359275806965E-4	DESIGN
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9975853926779561	WITHOUT_CLASSIFICATION	0.0024146073220439462	DESIGN
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999986723394575	WITHOUT_CLASSIFICATION	1.3276605425716325E-6	DESIGN
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9990790326248232	WITHOUT_CLASSIFICATION	9.209673751768172E-4	DESIGN
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999956709727957	WITHOUT_CLASSIFICATION	4.329027204310241E-6	DESIGN
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9998125840346799	WITHOUT_CLASSIFICATION	1.8741596532007498E-4	DESIGN
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999585483071051	WITHOUT_CLASSIFICATION	4.145169289494068E-5	DESIGN
// Set it!	WITHOUT_CLASSIFICATION	0.9999462698608104	WITHOUT_CLASSIFICATION	5.373013918962185E-5	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9998531740034667	WITHOUT_CLASSIFICATION	1.468259965333366E-4	DESIGN
// strip the " where "	WITHOUT_CLASSIFICATION	0.9998345748589569	WITHOUT_CLASSIFICATION	1.6542514104309866E-4	DESIGN
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.7448491825133499	WITHOUT_CLASSIFICATION	0.25515081748665014	DESIGN
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9985958119847751	WITHOUT_CLASSIFICATION	0.0014041880152249225	DESIGN
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999771323176584	WITHOUT_CLASSIFICATION	2.2867682341606787E-5	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.99938119307288	WITHOUT_CLASSIFICATION	6.18806927120067E-4	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.99938119307288	WITHOUT_CLASSIFICATION	6.18806927120067E-4	DESIGN
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9998541030608826	WITHOUT_CLASSIFICATION	1.4589693911730295E-4	DESIGN
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9998191823593688	WITHOUT_CLASSIFICATION	1.8081764063126145E-4	DESIGN
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9997693221780094	WITHOUT_CLASSIFICATION	2.3067782199064202E-4	DESIGN
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9991989633037642	WITHOUT_CLASSIFICATION	8.010366962357835E-4	DESIGN
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9996026596694723	WITHOUT_CLASSIFICATION	3.9734033052774557E-4	DESIGN
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.977879394862695	WITHOUT_CLASSIFICATION	0.022120605137304964	DESIGN
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9977780474368191	WITHOUT_CLASSIFICATION	0.002221952563180935	DESIGN
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9997025163067838	WITHOUT_CLASSIFICATION	2.9748369321627407E-4	DESIGN
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9997335927607819	WITHOUT_CLASSIFICATION	2.6640723921803847E-4	DESIGN
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9998967100731013	WITHOUT_CLASSIFICATION	1.0328992689867124E-4	DESIGN
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9976455573603898	WITHOUT_CLASSIFICATION	0.0023544426396101474	DESIGN
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9993621654667373	WITHOUT_CLASSIFICATION	6.378345332626157E-4	DESIGN
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.999959275816537	WITHOUT_CLASSIFICATION	4.0724183462988343E-5	DESIGN
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999111578918078	WITHOUT_CLASSIFICATION	8.884210819210351E-5	DESIGN
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9997218452229459	WITHOUT_CLASSIFICATION	2.781547770540862E-4	DESIGN
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999569921587209	WITHOUT_CLASSIFICATION	4.300784127909149E-5	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999990588202282	WITHOUT_CLASSIFICATION	9.411797717851523E-7	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999990588202282	WITHOUT_CLASSIFICATION	9.411797717851523E-7	DESIGN
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9994704630639403	WITHOUT_CLASSIFICATION	5.295369360597775E-4	DESIGN
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9851103682218747	WITHOUT_CLASSIFICATION	0.014889631778125297	DESIGN
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9998373351311742	WITHOUT_CLASSIFICATION	1.6266486882579083E-4	DESIGN
// The property is a component...	WITHOUT_CLASSIFICATION	0.9998045396289035	WITHOUT_CLASSIFICATION	1.9546037109650926E-4	DESIGN
// The property is another class..	WITHOUT_CLASSIFICATION	0.9996679581926252	WITHOUT_CLASSIFICATION	3.3204180737480513E-4	DESIGN
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9958224364150179	WITHOUT_CLASSIFICATION	0.004177563584982068	DESIGN
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9935881385746365	WITHOUT_CLASSIFICATION	0.006411861425363554	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9994554681993925	WITHOUT_CLASSIFICATION	5.445318006075214E-4	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998838243335562	WITHOUT_CLASSIFICATION	1.1617566644379401E-4	DESIGN
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.998239942497609	WITHOUT_CLASSIFICATION	0.0017600575023909964	DESIGN
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.999960909344721	WITHOUT_CLASSIFICATION	3.90906552788571E-5	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9994554681993925	WITHOUT_CLASSIFICATION	5.445318006075214E-4	DESIGN
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.5809552915441271	WITHOUT_CLASSIFICATION	0.419044708455873	DESIGN
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9992304824454254	WITHOUT_CLASSIFICATION	7.695175545746391E-4	DESIGN
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9495483777070494	WITHOUT_CLASSIFICATION	0.05045162229295067	DESIGN
// again, null != null here	WITHOUT_CLASSIFICATION	0.9996831262909026	WITHOUT_CLASSIFICATION	3.168737090973722E-4	DESIGN
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9957197803737184	WITHOUT_CLASSIFICATION	0.004280219626281545	DESIGN
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9951245560801715	WITHOUT_CLASSIFICATION	0.004875443919828475	DESIGN
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9995762911164321	WITHOUT_CLASSIFICATION	4.23708883567844E-4	DESIGN
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999888057894264	WITHOUT_CLASSIFICATION	1.1194210573642326E-5	DESIGN
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9991035397978313	WITHOUT_CLASSIFICATION	8.964602021687623E-4	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9997665572362735	WITHOUT_CLASSIFICATION	2.3344276372653985E-4	DESIGN
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.99971575732043	WITHOUT_CLASSIFICATION	2.842426795699667E-4	DESIGN
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9997931986444941	WITHOUT_CLASSIFICATION	2.0680135550591784E-4	DESIGN
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9998463634326125	WITHOUT_CLASSIFICATION	1.5363656738751568E-4	DESIGN
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9979241427374976	WITHOUT_CLASSIFICATION	0.0020758572625023315	DESIGN
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9989316695663635	WITHOUT_CLASSIFICATION	0.0010683304336365704	DESIGN
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9992244751510468	WITHOUT_CLASSIFICATION	7.755248489531173E-4	DESIGN
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9993891739481147	WITHOUT_CLASSIFICATION	6.108260518853399E-4	DESIGN
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9960591535022693	WITHOUT_CLASSIFICATION	0.0039408464977306705	DESIGN
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9960591535022693	WITHOUT_CLASSIFICATION	0.0039408464977306705	DESIGN
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9995762911164321	WITHOUT_CLASSIFICATION	4.23708883567844E-4	DESIGN
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9975631267126875	WITHOUT_CLASSIFICATION	0.002436873287312422	DESIGN
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9334012325640434	WITHOUT_CLASSIFICATION	0.0665987674359567	DESIGN
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9946409804991588	WITHOUT_CLASSIFICATION	0.005359019500841176	DESIGN
// #2	WITHOUT_CLASSIFICATION	0.9996735267380363	WITHOUT_CLASSIFICATION	3.264732619637296E-4	DESIGN
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9996554091790832	WITHOUT_CLASSIFICATION	3.445908209167693E-4	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9995481472149141	WITHOUT_CLASSIFICATION	4.5185278508578705E-4	DESIGN
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999978857978995	WITHOUT_CLASSIFICATION	2.114202100547565E-6	DESIGN
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999580614123834	WITHOUT_CLASSIFICATION	4.193858761659704E-5	DESIGN
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9989539199047631	WITHOUT_CLASSIFICATION	0.0010460800952368718	DESIGN
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9376240835551343	WITHOUT_CLASSIFICATION	0.062375916444865606	DESIGN
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999735207533574	WITHOUT_CLASSIFICATION	2.6479246642588428E-5	DESIGN
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9991423892734822	WITHOUT_CLASSIFICATION	8.576107265178688E-4	DESIGN
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9985550118939646	WITHOUT_CLASSIFICATION	0.0014449881060354716	DESIGN
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.975549203093295	WITHOUT_CLASSIFICATION	0.024450796906705097	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9997412973190593	WITHOUT_CLASSIFICATION	2.5870268094075927E-4	DESIGN
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9998546235324467	WITHOUT_CLASSIFICATION	1.4537646755333506E-4	DESIGN
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999347500665409	WITHOUT_CLASSIFICATION	6.524993345913547E-5	DESIGN
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999796618639696	WITHOUT_CLASSIFICATION	2.0338136030428984E-5	DESIGN
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999468961552834	WITHOUT_CLASSIFICATION	5.310384471664017E-5	DESIGN
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9993245205942178	WITHOUT_CLASSIFICATION	6.754794057822637E-4	DESIGN
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999667429906764	WITHOUT_CLASSIFICATION	3.325700932357604E-5	DESIGN
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.999139768768842	WITHOUT_CLASSIFICATION	8.602312311580068E-4	DESIGN
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9992415422902953	WITHOUT_CLASSIFICATION	7.584577097047284E-4	DESIGN
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999962264892058	WITHOUT_CLASSIFICATION	3.7735107941003636E-6	DESIGN
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9995096007607396	WITHOUT_CLASSIFICATION	4.903992392604757E-4	DESIGN
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9995692773233855	WITHOUT_CLASSIFICATION	4.3072267661454274E-4	DESIGN
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9995255349073492	WITHOUT_CLASSIFICATION	4.74465092650801E-4	DESIGN
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9998874605819841	WITHOUT_CLASSIFICATION	1.1253941801593735E-4	DESIGN
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999329782388348	WITHOUT_CLASSIFICATION	6.702176116515895E-5	DESIGN
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9995929261992391	WITHOUT_CLASSIFICATION	4.070738007608345E-4	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995379712749813	WITHOUT_CLASSIFICATION	4.6202872501855877E-4	DESIGN
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9997412973190593	WITHOUT_CLASSIFICATION	2.5870268094075927E-4	DESIGN
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9998536854747517	WITHOUT_CLASSIFICATION	1.463145252482887E-4	DESIGN
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999923827847323	WITHOUT_CLASSIFICATION	7.61721526753934E-6	DESIGN
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9996723143217647	WITHOUT_CLASSIFICATION	3.2768567823523634E-4	DESIGN
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9990123844683633	WITHOUT_CLASSIFICATION	9.876155316366894E-4	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9987756247270436	WITHOUT_CLASSIFICATION	0.0012243752729563123	DESIGN
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9998369158713516	WITHOUT_CLASSIFICATION	1.6308412864831704E-4	DESIGN
// Collection of components.	WITHOUT_CLASSIFICATION	0.9997050453079049	WITHOUT_CLASSIFICATION	2.949546920950564E-4	DESIGN
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9995884254704154	WITHOUT_CLASSIFICATION	4.11574529584648E-4	DESIGN
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.999116515786686	WITHOUT_CLASSIFICATION	8.834842133139993E-4	DESIGN
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9996086108285906	WITHOUT_CLASSIFICATION	3.9138917140925524E-4	DESIGN
// currently allowed...	WITHOUT_CLASSIFICATION	0.9963179617890047	WITHOUT_CLASSIFICATION	0.003682038210995416	DESIGN
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.5153183937906534	DESIGN	0.4846816062093466	WITHOUT_CLASSIFICATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9923157945197018	WITHOUT_CLASSIFICATION	0.007684205480298221	DESIGN
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9983195823749854	WITHOUT_CLASSIFICATION	0.0016804176250145874	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995379712749813	WITHOUT_CLASSIFICATION	4.6202872501855877E-4	DESIGN
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9069200716180922	WITHOUT_CLASSIFICATION	0.09307992838190782	DESIGN
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999845798635244	WITHOUT_CLASSIFICATION	1.5420136475676353E-5	DESIGN
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9995577247920471	WITHOUT_CLASSIFICATION	4.422752079528557E-4	DESIGN
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9998743120446171	WITHOUT_CLASSIFICATION	1.256879553828854E-4	DESIGN
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9969415496723661	WITHOUT_CLASSIFICATION	0.003058450327633851	DESIGN
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9985750368666105	WITHOUT_CLASSIFICATION	0.0014249631333894423	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998838243335562	WITHOUT_CLASSIFICATION	1.1617566644379401E-4	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.8023355910649954	WITHOUT_CLASSIFICATION	0.19766440893500448	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9997412973190593	WITHOUT_CLASSIFICATION	2.5870268094075927E-4	DESIGN
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9983083960919474	WITHOUT_CLASSIFICATION	0.0016916039080525501	DESIGN
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999445585207071	WITHOUT_CLASSIFICATION	5.5441479292907005E-5	DESIGN
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9995051406681349	WITHOUT_CLASSIFICATION	4.948593318651242E-4	DESIGN
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9990384136353564	WITHOUT_CLASSIFICATION	9.615863646436311E-4	DESIGN
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9974400411592859	WITHOUT_CLASSIFICATION	0.0025599588407142176	DESIGN
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9965026123236813	WITHOUT_CLASSIFICATION	0.003497387676318746	DESIGN
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9970107837136599	WITHOUT_CLASSIFICATION	0.0029892162863401797	DESIGN
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9997624713412574	WITHOUT_CLASSIFICATION	2.3752865874267356E-4	DESIGN
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.988149166987265	WITHOUT_CLASSIFICATION	0.011850833012734908	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9998355410811148	WITHOUT_CLASSIFICATION	1.6445891888517295E-4	DESIGN
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9987350222037062	WITHOUT_CLASSIFICATION	0.0012649777962938024	DESIGN
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.7933304763790668	WITHOUT_CLASSIFICATION	0.20666952362093302	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9928476643356592	WITHOUT_CLASSIFICATION	0.007152335664340892	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9928476643356592	WITHOUT_CLASSIFICATION	0.007152335664340892	DESIGN
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9528848202994078	WITHOUT_CLASSIFICATION	0.04711517970059216	DESIGN
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.996720376918229	WITHOUT_CLASSIFICATION	0.0032796230817708745	DESIGN
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9995185818718542	WITHOUT_CLASSIFICATION	4.814181281457395E-4	DESIGN
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999257099603989	WITHOUT_CLASSIFICATION	7.42900396011389E-5	DESIGN
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.999940700537978	WITHOUT_CLASSIFICATION	5.929946202187159E-5	DESIGN
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9996929835492534	WITHOUT_CLASSIFICATION	3.070164507466036E-4	DESIGN
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9985721854072758	WITHOUT_CLASSIFICATION	0.0014278145927242435	DESIGN
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9985045789757063	WITHOUT_CLASSIFICATION	0.0014954210242936424	DESIGN
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999225448177822	WITHOUT_CLASSIFICATION	7.745518221786437E-5	DESIGN
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9994764003916347	WITHOUT_CLASSIFICATION	5.235996083653435E-4	DESIGN
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9986415842362212	WITHOUT_CLASSIFICATION	0.0013584157637789192	DESIGN
// A collection of components...	WITHOUT_CLASSIFICATION	0.9991267102738941	WITHOUT_CLASSIFICATION	8.732897261059135E-4	DESIGN
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9991267102738941	WITHOUT_CLASSIFICATION	8.732897261059135E-4	DESIGN
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999993111063608	WITHOUT_CLASSIFICATION	6.888936392680254E-7	DESIGN
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9996323330266023	WITHOUT_CLASSIFICATION	3.676669733977597E-4	DESIGN
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9997106028029397	WITHOUT_CLASSIFICATION	2.8939719706028237E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9439083744428536	WITHOUT_CLASSIFICATION	0.056091625557146536	DESIGN
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999951979041031	WITHOUT_CLASSIFICATION	4.802095896918559E-6	DESIGN
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999677836011694	WITHOUT_CLASSIFICATION	3.2216398830480046E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996112294626807	WITHOUT_CLASSIFICATION	3.8877053731928144E-4	DESIGN
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9998938390706422	WITHOUT_CLASSIFICATION	1.0616092935775465E-4	DESIGN
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9988587532186334	WITHOUT_CLASSIFICATION	0.001141246781366577	DESIGN
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9998361426345311	WITHOUT_CLASSIFICATION	1.6385736546883846E-4	DESIGN
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.999967834494583	WITHOUT_CLASSIFICATION	3.2165505416971426E-5	DESIGN
/*implied*/	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999773860374037	WITHOUT_CLASSIFICATION	2.2613962596311723E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996112294626807	WITHOUT_CLASSIFICATION	3.8877053731928144E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996112294626807	WITHOUT_CLASSIFICATION	3.8877053731928144E-4	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999757103042752	WITHOUT_CLASSIFICATION	2.4289695724743187E-5	DESIGN
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9974690673549182	WITHOUT_CLASSIFICATION	0.002530932645081799	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9991761033353065	WITHOUT_CLASSIFICATION	8.238966646935994E-4	DESIGN
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9996595417593592	WITHOUT_CLASSIFICATION	3.4045824064080017E-4	DESIGN
/*	WITHOUT_CLASSIFICATION	0.942601771585294	WITHOUT_CLASSIFICATION	0.057398228414705973	DESIGN
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9980733715830039	WITHOUT_CLASSIFICATION	0.0019266284169960502	DESIGN
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9992927957647494	WITHOUT_CLASSIFICATION	7.072042352505899E-4	DESIGN
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.8255924114489387	WITHOUT_CLASSIFICATION	0.17440758855106128	DESIGN
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9991661704742322	WITHOUT_CLASSIFICATION	8.338295257677931E-4	DESIGN
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9976893218414455	WITHOUT_CLASSIFICATION	0.0023106781585545294	DESIGN
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9981616730777203	WITHOUT_CLASSIFICATION	0.001838326922279711	DESIGN
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9997945710717782	WITHOUT_CLASSIFICATION	2.0542892822199367E-4	DESIGN
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9996790387733459	WITHOUT_CLASSIFICATION	3.209612266541576E-4	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998259158954972	WITHOUT_CLASSIFICATION	1.7408410450285214E-4	DESIGN
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997391945795728	WITHOUT_CLASSIFICATION	2.6080542042718885E-4	DESIGN
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999984538260573	WITHOUT_CLASSIFICATION	1.5461739425553993E-6	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9975961902821988	WITHOUT_CLASSIFICATION	0.002403809717801266	DESIGN
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9984540760903412	WITHOUT_CLASSIFICATION	0.0015459239096588767	DESIGN
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9998505747031874	WITHOUT_CLASSIFICATION	1.4942529681257516E-4	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987567211075474	WITHOUT_CLASSIFICATION	0.0012432788924526693	DESIGN
//TODO:	WITHOUT_CLASSIFICATION	0.9042698316951133	WITHOUT_CLASSIFICATION	0.09573016830488673	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9998500851708609	WITHOUT_CLASSIFICATION	1.4991482913916294E-4	DESIGN
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999996872566586	WITHOUT_CLASSIFICATION	3.127433414845518E-7	DESIGN
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.999802919432724	WITHOUT_CLASSIFICATION	1.9708056727594283E-4	DESIGN
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9955189944707428	WITHOUT_CLASSIFICATION	0.004481005529257148	DESIGN
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999788595160845	WITHOUT_CLASSIFICATION	2.1140483915502637E-5	DESIGN
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.999786877593259	WITHOUT_CLASSIFICATION	2.1312240674108073E-4	DESIGN
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9997209557922947	WITHOUT_CLASSIFICATION	2.790442077052044E-4	DESIGN
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999402856380786	WITHOUT_CLASSIFICATION	5.971436192150042E-5	DESIGN
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.539242881111982	DESIGN	0.460757118888018	WITHOUT_CLASSIFICATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9984715475558346	WITHOUT_CLASSIFICATION	0.0015284524441654573	DESIGN
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9775497087209413	WITHOUT_CLASSIFICATION	0.022450291279058808	DESIGN
// Dialect function	WITHOUT_CLASSIFICATION	0.999819237677678	WITHOUT_CLASSIFICATION	1.8076232232201527E-4	DESIGN
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9994092539850592	WITHOUT_CLASSIFICATION	5.907460149408956E-4	DESIGN
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9998497062918287	WITHOUT_CLASSIFICATION	1.5029370817126403E-4	DESIGN
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9997397030569567	WITHOUT_CLASSIFICATION	2.602969430432324E-4	DESIGN
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9992713180493921	WITHOUT_CLASSIFICATION	7.286819506078608E-4	DESIGN
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9985334045723998	WITHOUT_CLASSIFICATION	0.0014665954276002096	DESIGN
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9992270201903697	WITHOUT_CLASSIFICATION	7.729798096302872E-4	DESIGN
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9986407493062884	WITHOUT_CLASSIFICATION	0.0013592506937115819	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9998677764081291	WITHOUT_CLASSIFICATION	1.322235918709595E-4	DESIGN
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999588526213323	WITHOUT_CLASSIFICATION	4.1147378667632147E-5	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999828262750711	WITHOUT_CLASSIFICATION	1.7173724928935114E-5	DESIGN
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9996122538589366	WITHOUT_CLASSIFICATION	3.8774614106342284E-4	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999828262750711	WITHOUT_CLASSIFICATION	1.7173724928935114E-5	DESIGN
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999760383603684	WITHOUT_CLASSIFICATION	2.396163963160113E-5	DESIGN
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9998810802860764	WITHOUT_CLASSIFICATION	1.1891971392361646E-4	DESIGN
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9997738662828022	WITHOUT_CLASSIFICATION	2.2613371719781679E-4	DESIGN
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9997955802532755	WITHOUT_CLASSIFICATION	2.0441974672449437E-4	DESIGN
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999158377442156	WITHOUT_CLASSIFICATION	8.416225578449036E-5	DESIGN
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9997738662828022	WITHOUT_CLASSIFICATION	2.2613371719781679E-4	DESIGN
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999627201206246	WITHOUT_CLASSIFICATION	3.727987937537209E-5	DESIGN
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9987608820146534	WITHOUT_CLASSIFICATION	0.0012391179853466147	DESIGN
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999348885372569	WITHOUT_CLASSIFICATION	6.511146274312474E-5	DESIGN
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9996489138784673	WITHOUT_CLASSIFICATION	3.5108612153270054E-4	DESIGN
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999899813409804	WITHOUT_CLASSIFICATION	1.0018659019724804E-5	DESIGN
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9996172240628944	WITHOUT_CLASSIFICATION	3.8277593710553387E-4	DESIGN
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.999993131969731	WITHOUT_CLASSIFICATION	6.868030268937107E-6	DESIGN
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999480849105381	DESIGN	5.191508946186629E-5	WITHOUT_CLASSIFICATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999858089396555	WITHOUT_CLASSIFICATION	1.4191060344460023E-5	DESIGN
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999695523820815	WITHOUT_CLASSIFICATION	3.0447617918581942E-5	DESIGN
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999672387779547	WITHOUT_CLASSIFICATION	3.27612220453711E-5	DESIGN
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999587573574661	WITHOUT_CLASSIFICATION	4.124264253398344E-5	DESIGN
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999545043850195	WITHOUT_CLASSIFICATION	4.549561498044749E-5	DESIGN
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.7318151417793283	WITHOUT_CLASSIFICATION	0.26818485822067184	DESIGN
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9996892771779741	WITHOUT_CLASSIFICATION	3.1072282202593456E-4	DESIGN
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9985110838793617	WITHOUT_CLASSIFICATION	0.0014889161206383483	DESIGN
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.8793355249704937	WITHOUT_CLASSIFICATION	0.12066447502950635	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9977535698307598	WITHOUT_CLASSIFICATION	0.002246430169240237	DESIGN
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9984075179781082	WITHOUT_CLASSIFICATION	0.0015924820218918424	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9998886924157674	WITHOUT_CLASSIFICATION	1.1130758423255793E-4	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9925454329238468	WITHOUT_CLASSIFICATION	0.007454567076153188	DESIGN
//default mode	WITHOUT_CLASSIFICATION	0.9921389159883511	WITHOUT_CLASSIFICATION	0.007861084011648773	DESIGN
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9998000190769959	WITHOUT_CLASSIFICATION	1.9998092300421743E-4	DESIGN
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.997029519206072	WITHOUT_CLASSIFICATION	0.002970480793928036	DESIGN
//after reset!	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9961419890127864	WITHOUT_CLASSIFICATION	0.0038580109872135247	DESIGN
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9995791165524359	WITHOUT_CLASSIFICATION	4.2088344756404853E-4	DESIGN
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9990396373559052	WITHOUT_CLASSIFICATION	9.603626440947607E-4	DESIGN
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9995160824222815	WITHOUT_CLASSIFICATION	4.839175777183936E-4	DESIGN
//if its "id"	WITHOUT_CLASSIFICATION	0.9993739118148138	WITHOUT_CLASSIFICATION	6.260881851862142E-4	DESIGN
//or its the id property name	WITHOUT_CLASSIFICATION	0.999162979578441	WITHOUT_CLASSIFICATION	8.370204215590764E-4	DESIGN
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9994723554371711	WITHOUT_CLASSIFICATION	5.276445628289474E-4	DESIGN
//important!!	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9994723554371711	WITHOUT_CLASSIFICATION	5.276445628289474E-4	DESIGN
// an association	WITHOUT_CLASSIFICATION	0.9994762598721391	WITHOUT_CLASSIFICATION	5.237401278609985E-4	DESIGN
//allow index() function:	WITHOUT_CLASSIFICATION	0.997623252163573	WITHOUT_CLASSIFICATION	0.002376747836426957	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9776906120748443	WITHOUT_CLASSIFICATION	0.02230938792515563	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9998886924157674	WITHOUT_CLASSIFICATION	1.1130758423255793E-4	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
// collections of values	WITHOUT_CLASSIFICATION	0.9998237241737089	WITHOUT_CLASSIFICATION	1.7627582629113078E-4	DESIGN
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9981726565625219	WITHOUT_CLASSIFICATION	0.0018273434374781645	DESIGN
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9987557033431128	WITHOUT_CLASSIFICATION	0.0012442966568871998	DESIGN
//special case	WITHOUT_CLASSIFICATION	0.9994689496643754	WITHOUT_CLASSIFICATION	5.310503356245784E-4	DESIGN
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999494715681332	WITHOUT_CLASSIFICATION	5.052843186692164E-5	DESIGN
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9895473543610339	WITHOUT_CLASSIFICATION	0.010452645638966048	DESIGN
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.5597593283367557	DESIGN	0.4402406716632443	WITHOUT_CLASSIFICATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9978517128338458	WITHOUT_CLASSIFICATION	0.0021482871661542987	DESIGN
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9989371495581911	WITHOUT_CLASSIFICATION	0.0010628504418087909	DESIGN
//register collection role	WITHOUT_CLASSIFICATION	0.995728613610229	WITHOUT_CLASSIFICATION	0.004271386389770992	DESIGN
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9991284677299987	WITHOUT_CLASSIFICATION	8.715322700013033E-4	DESIGN
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9984540760903412	WITHOUT_CLASSIFICATION	0.0015459239096588767	DESIGN
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9975961902821988	WITHOUT_CLASSIFICATION	0.002403809717801266	DESIGN
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9995043553641656	WITHOUT_CLASSIFICATION	4.956446358343945E-4	DESIGN
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.999824606587284	WITHOUT_CLASSIFICATION	1.7539341271599767E-4	DESIGN
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9995943466492204	WITHOUT_CLASSIFICATION	4.0565335077954366E-4	DESIGN
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9988544479925245	WITHOUT_CLASSIFICATION	0.0011455520074754478	DESIGN
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9992786351332831	WITHOUT_CLASSIFICATION	7.213648667168091E-4	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9984540760903412	WITHOUT_CLASSIFICATION	0.0015459239096588767	DESIGN
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9954074305688999	WITHOUT_CLASSIFICATION	0.004592569431100114	DESIGN
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9969739539261364	WITHOUT_CLASSIFICATION	0.0030260460738635903	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.994374381990068	WITHOUT_CLASSIFICATION	0.005625618009932025	DESIGN
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9981803554778681	WITHOUT_CLASSIFICATION	0.001819644522131861	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.996598324876248	WITHOUT_CLASSIFICATION	0.0034016751237519256	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.996598324876248	WITHOUT_CLASSIFICATION	0.0034016751237519256	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999867429075271	WITHOUT_CLASSIFICATION	1.3257092472898936E-4	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.996598324876248	WITHOUT_CLASSIFICATION	0.0034016751237519256	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.996598324876248	WITHOUT_CLASSIFICATION	0.0034016751237519256	DESIGN
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9991120506911906	WITHOUT_CLASSIFICATION	8.879493088093468E-4	DESIGN
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999996482757755	WITHOUT_CLASSIFICATION	3.517242245186202E-7	DESIGN
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9997772876050358	WITHOUT_CLASSIFICATION	2.2271239496403746E-4	DESIGN
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9997772876050358	WITHOUT_CLASSIFICATION	2.2271239496403746E-4	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9990418046757691	WITHOUT_CLASSIFICATION	9.581953242309387E-4	DESIGN
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9970115259314511	WITHOUT_CLASSIFICATION	0.002988474068548847	DESIGN
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9987464933115288	WITHOUT_CLASSIFICATION	0.0012535066884712353	DESIGN
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999145912072088	WITHOUT_CLASSIFICATION	8.540879279119254E-5	DESIGN
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9944029393142313	WITHOUT_CLASSIFICATION	0.0055970606857686945	DESIGN
//Cope with [,]	WITHOUT_CLASSIFICATION	0.994756396747026	WITHOUT_CLASSIFICATION	0.005243603252973969	DESIGN
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9994249565082125	WITHOUT_CLASSIFICATION	5.750434917874227E-4	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.998523100782593	WITHOUT_CLASSIFICATION	0.001476899217407067	DESIGN
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.991220802235761	WITHOUT_CLASSIFICATION	0.008779197764238907	DESIGN
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999849719626055	WITHOUT_CLASSIFICATION	1.5028037394424157E-5	DESIGN
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9981266317672542	WITHOUT_CLASSIFICATION	0.0018733682327457435	DESIGN
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9954703382808554	WITHOUT_CLASSIFICATION	0.004529661719144544	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999888009588941	WITHOUT_CLASSIFICATION	1.1199041105903646E-5	DESIGN
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9991325198504303	WITHOUT_CLASSIFICATION	8.674801495696376E-4	DESIGN
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9884624964265044	WITHOUT_CLASSIFICATION	0.011537503573495566	DESIGN
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9935400296907807	WITHOUT_CLASSIFICATION	0.0064599703092192975	DESIGN
// the next one up must also be	WITHOUT_CLASSIFICATION	0.997541721028658	WITHOUT_CLASSIFICATION	0.00245827897134203	DESIGN
// Add any joins	WITHOUT_CLASSIFICATION	0.9994003849246006	WITHOUT_CLASSIFICATION	5.996150753993687E-4	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999888009588941	WITHOUT_CLASSIFICATION	1.1199041105903646E-5	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9925454329238468	WITHOUT_CLASSIFICATION	0.007454567076153188	DESIGN
//path expression	WITHOUT_CLASSIFICATION	0.9993034611186583	WITHOUT_CLASSIFICATION	6.965388813417646E-4	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.99980231842467	WITHOUT_CLASSIFICATION	1.9768157532990487E-4	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997724750780033	WITHOUT_CLASSIFICATION	2.2752492199675683E-4	DESIGN
//anything else	WITHOUT_CLASSIFICATION	0.9992876689265084	WITHOUT_CLASSIFICATION	7.123310734915838E-4	DESIGN
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999691703085992	WITHOUT_CLASSIFICATION	3.082969140076196E-5	DESIGN
// careful with this!	WITHOUT_CLASSIFICATION	0.9976461365814774	WITHOUT_CLASSIFICATION	0.0023538634185226535	DESIGN
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9998763270435043	WITHOUT_CLASSIFICATION	1.236729564957115E-4	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9998898775189735	WITHOUT_CLASSIFICATION	1.101224810265785E-4	DESIGN
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.999383555266139	WITHOUT_CLASSIFICATION	6.16444733860981E-4	DESIGN
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9985161299918728	WITHOUT_CLASSIFICATION	0.0014838700081271283	DESIGN
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9997983217496065	WITHOUT_CLASSIFICATION	2.0167825039357724E-4	DESIGN
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9974301820695545	WITHOUT_CLASSIFICATION	0.0025698179304454055	DESIGN
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9997478529603456	WITHOUT_CLASSIFICATION	2.5214703965434067E-4	DESIGN
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9994809364670626	WITHOUT_CLASSIFICATION	5.190635329373966E-4	DESIGN
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9998672671346814	WITHOUT_CLASSIFICATION	1.3273286531862333E-4	DESIGN
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9991842022819989	WITHOUT_CLASSIFICATION	8.15797718001038E-4	DESIGN
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999417316251697	WITHOUT_CLASSIFICATION	5.826837483016375E-5	DESIGN
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9993169767716794	WITHOUT_CLASSIFICATION	6.830232283205833E-4	DESIGN
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999058850105197	WITHOUT_CLASSIFICATION	9.411498948036188E-5	DESIGN
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9990989586522416	WITHOUT_CLASSIFICATION	9.010413477583218E-4	DESIGN
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9974827886999124	WITHOUT_CLASSIFICATION	0.0025172113000877334	DESIGN
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999560506697047	WITHOUT_CLASSIFICATION	4.3949330295234863E-5	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9998898775189735	WITHOUT_CLASSIFICATION	1.101224810265785E-4	DESIGN
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9987383568797555	WITHOUT_CLASSIFICATION	0.0012616431202444075	DESIGN
//do replacements	WITHOUT_CLASSIFICATION	0.9988562842844306	WITHOUT_CLASSIFICATION	0.0011437157155693007	DESIGN
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.997750590858612	WITHOUT_CLASSIFICATION	0.0022494091413880267	DESIGN
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9910001254989329	WITHOUT_CLASSIFICATION	0.008999874501067127	DESIGN
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995379712749813	WITHOUT_CLASSIFICATION	4.6202872501855877E-4	DESIGN
//hilo params	WITHOUT_CLASSIFICATION	0.9973695452289686	WITHOUT_CLASSIFICATION	0.0026304547710313208	DESIGN
//sql = query;	WITHOUT_CLASSIFICATION	0.9990412896589482	WITHOUT_CLASSIFICATION	9.587103410517759E-4	DESIGN
// performance opt	WITHOUT_CLASSIFICATION	0.9962732472900593	WITHOUT_CLASSIFICATION	0.0037267527099408386	DESIGN
//sql = update;	WITHOUT_CLASSIFICATION	0.9990345480854415	WITHOUT_CLASSIFICATION	9.654519145585226E-4	DESIGN
//hilo config	WITHOUT_CLASSIFICATION	0.996411507010604	WITHOUT_CLASSIFICATION	0.003588492989396113	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999406472626987	WITHOUT_CLASSIFICATION	5.935273730122643E-5	DESIGN
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9936816318301457	WITHOUT_CLASSIFICATION	0.006318368169854334	DESIGN
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.995686818632833	WITHOUT_CLASSIFICATION	0.004313181367167001	DESIGN
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9998644523451217	WITHOUT_CLASSIFICATION	1.3554765487830859E-4	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9989244443842024	WITHOUT_CLASSIFICATION	0.0010755556157976073	DESIGN
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999219069753638	WITHOUT_CLASSIFICATION	7.809302463626502E-5	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.998679792078499	WITHOUT_CLASSIFICATION	0.0013202079215010095	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999406472626987	WITHOUT_CLASSIFICATION	5.935273730122643E-5	DESIGN
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9993708217018756	WITHOUT_CLASSIFICATION	6.291782981243316E-4	DESIGN
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.995463024141658	WITHOUT_CLASSIFICATION	0.004536975858342034	DESIGN
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9995163170977955	WITHOUT_CLASSIFICATION	4.8368290220452824E-4	DESIGN
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9989610009869194	WITHOUT_CLASSIFICATION	0.0010389990130805964	DESIGN
// the default...	WITHOUT_CLASSIFICATION	0.9994059292564449	WITHOUT_CLASSIFICATION	5.9407074355515E-4	DESIGN
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9989369218979541	WITHOUT_CLASSIFICATION	0.0010630781020459234	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9989244443842024	WITHOUT_CLASSIFICATION	0.0010755556157976073	DESIGN
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999886997225648	WITHOUT_CLASSIFICATION	1.1300277435142626E-5	DESIGN
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999617887167639	WITHOUT_CLASSIFICATION	3.821128323601547E-5	DESIGN
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998965575318018	WITHOUT_CLASSIFICATION	1.0344246819812018E-4	DESIGN
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995347575928132	WITHOUT_CLASSIFICATION	4.6524240718679864E-4	DESIGN
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995347575928132	WITHOUT_CLASSIFICATION	4.6524240718679864E-4	DESIGN
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995347575928132	WITHOUT_CLASSIFICATION	4.6524240718679864E-4	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9997487256177114	WITHOUT_CLASSIFICATION	2.512743822885214E-4	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9997487256177114	WITHOUT_CLASSIFICATION	2.512743822885214E-4	DESIGN
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9965567303744148	WITHOUT_CLASSIFICATION	0.0034432696255850452	DESIGN
// we just hit the last position	WITHOUT_CLASSIFICATION	0.999319679157806	WITHOUT_CLASSIFICATION	6.803208421940452E-4	DESIGN
// scroll ahead	WITHOUT_CLASSIFICATION	0.9956157669437558	WITHOUT_CLASSIFICATION	0.004384233056244208	DESIGN
// scroll backward	WITHOUT_CLASSIFICATION	0.9985491538697054	WITHOUT_CLASSIFICATION	0.0014508461302944818	DESIGN
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.996677707208389	WITHOUT_CLASSIFICATION	0.0033222927916110186	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995112716389725	WITHOUT_CLASSIFICATION	4.887283610274873E-4	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996767158446738	WITHOUT_CLASSIFICATION	3.2328415532620694E-4	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995379712749813	WITHOUT_CLASSIFICATION	4.6202872501855877E-4	DESIGN
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9998228332228333	WITHOUT_CLASSIFICATION	1.7716677716675795E-4	DESIGN
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999840243743543	WITHOUT_CLASSIFICATION	1.5975625645700217E-4	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995112716389725	WITHOUT_CLASSIFICATION	4.887283610274873E-4	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996767158446738	WITHOUT_CLASSIFICATION	3.2328415532620694E-4	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995379712749813	WITHOUT_CLASSIFICATION	4.6202872501855877E-4	DESIGN
// Caches	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
//Generators:	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9994181147196113	WITHOUT_CLASSIFICATION	5.818852803888102E-4	DESIGN
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9958421828771925	WITHOUT_CLASSIFICATION	0.0041578171228074745	DESIGN
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9996812154643192	WITHOUT_CLASSIFICATION	3.187845356807887E-4	DESIGN
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999810676369468	WITHOUT_CLASSIFICATION	1.893236305306668E-5	DESIGN
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9995056260108325	WITHOUT_CLASSIFICATION	4.943739891675302E-4	DESIGN
//checking for named queries	WITHOUT_CLASSIFICATION	0.9989273699590244	WITHOUT_CLASSIFICATION	0.0010726300409756315	DESIGN
//stats	WITHOUT_CLASSIFICATION	0.9990094494105661	WITHOUT_CLASSIFICATION	9.90550589433832E-4	DESIGN
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9991853742719914	WITHOUT_CLASSIFICATION	8.146257280086876E-4	DESIGN
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9995918442787195	WITHOUT_CLASSIFICATION	4.0815572128060154E-4	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.7731771512295325	WITHOUT_CLASSIFICATION	0.22682284877046746	DESIGN
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9671836557144838	WITHOUT_CLASSIFICATION	0.032816344285516184	DESIGN
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9993738872580039	WITHOUT_CLASSIFICATION	6.261127419962122E-4	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9989205034227417	WITHOUT_CLASSIFICATION	0.001079496577258292	DESIGN
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9964717204439472	WITHOUT_CLASSIFICATION	0.003528279556052756	DESIGN
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9575436259552645	WITHOUT_CLASSIFICATION	0.042456374044735484	DESIGN
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9991149891270819	WITHOUT_CLASSIFICATION	8.850108729180684E-4	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9929237252185578	WITHOUT_CLASSIFICATION	0.007076274781442251	DESIGN
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9973539833300208	WITHOUT_CLASSIFICATION	0.0026460166699792224	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.6055510969399277	WITHOUT_CLASSIFICATION	0.3944489030600723	DESIGN
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9990981855718248	WITHOUT_CLASSIFICATION	9.018144281752934E-4	DESIGN
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9938080302641601	WITHOUT_CLASSIFICATION	0.006191969735839897	DESIGN
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999656608613708	WITHOUT_CLASSIFICATION	3.433913862925046E-5	DESIGN
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9951327478209318	WITHOUT_CLASSIFICATION	0.004867252179068289	DESIGN
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994798876008816	WITHOUT_CLASSIFICATION	5.201123991184178E-4	DESIGN
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994846722086322	WITHOUT_CLASSIFICATION	5.153277913677015E-4	DESIGN
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.559540247561254	DESIGN	0.44045975243874613	WITHOUT_CLASSIFICATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999674036216346	WITHOUT_CLASSIFICATION	3.259637836540212E-4	DESIGN
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999169782274441	WITHOUT_CLASSIFICATION	8.30217725559057E-5	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9993488778914922	WITHOUT_CLASSIFICATION	6.511221085077807E-4	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9993488778914922	WITHOUT_CLASSIFICATION	6.511221085077807E-4	DESIGN
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9998176266207707	WITHOUT_CLASSIFICATION	1.8237337922929168E-4	DESIGN
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999985089539062	WITHOUT_CLASSIFICATION	1.4910460938896228E-6	DESIGN
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9989589285700438	WITHOUT_CLASSIFICATION	0.0010410714299561735	DESIGN
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9984540760903412	WITHOUT_CLASSIFICATION	0.0015459239096588767	DESIGN
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.997539579342521	WITHOUT_CLASSIFICATION	0.00246042065747885	DESIGN
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999005979396349	WITHOUT_CLASSIFICATION	9.94020603650907E-5	DESIGN
//for EJB3	WITHOUT_CLASSIFICATION	0.9992650992962923	WITHOUT_CLASSIFICATION	7.349007037077063E-4	DESIGN
// just ignore	WITHOUT_CLASSIFICATION	0.9998257569992217	WITHOUT_CLASSIFICATION	1.7424300077824493E-4	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.999098325336404	WITHOUT_CLASSIFICATION	9.01674663595996E-4	DESIGN
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998258202235287	WITHOUT_CLASSIFICATION	1.7417977647126546E-4	DESIGN
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998409675128919	WITHOUT_CLASSIFICATION	1.5903248710807605E-4	DESIGN
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998258202235287	WITHOUT_CLASSIFICATION	1.7417977647126546E-4	DESIGN
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998258202235287	WITHOUT_CLASSIFICATION	1.7417977647126546E-4	DESIGN
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998258202235287	WITHOUT_CLASSIFICATION	1.7417977647126546E-4	DESIGN
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998270617519548	WITHOUT_CLASSIFICATION	1.7293824804519707E-4	DESIGN
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998258202235287	WITHOUT_CLASSIFICATION	1.7417977647126546E-4	DESIGN
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998005592903129	WITHOUT_CLASSIFICATION	1.9944070968703605E-4	DESIGN
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998258202235287	WITHOUT_CLASSIFICATION	1.7417977647126546E-4	DESIGN
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998258202235287	WITHOUT_CLASSIFICATION	1.7417977647126546E-4	DESIGN
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998258202235287	WITHOUT_CLASSIFICATION	1.7417977647126546E-4	DESIGN
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9851495181779705	WITHOUT_CLASSIFICATION	0.014850481822029462	DESIGN
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9899645049007412	WITHOUT_CLASSIFICATION	0.010035495099258865	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9654278050438695	WITHOUT_CLASSIFICATION	0.03457219495613059	DESIGN
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999724684290926	WITHOUT_CLASSIFICATION	2.7531570907423886E-5	DESIGN
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9995678118463222	WITHOUT_CLASSIFICATION	4.3218815367786467E-4	DESIGN
// not for internal use:	WITHOUT_CLASSIFICATION	0.996409936964277	WITHOUT_CLASSIFICATION	0.0035900630357230266	DESIGN
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.999146975571473	WITHOUT_CLASSIFICATION	8.530244285269938E-4	DESIGN
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9925314463510941	WITHOUT_CLASSIFICATION	0.007468553648905922	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9654278050438695	WITHOUT_CLASSIFICATION	0.03457219495613059	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9654278050438695	WITHOUT_CLASSIFICATION	0.03457219495613059	DESIGN
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9971828322829882	WITHOUT_CLASSIFICATION	0.002817167717011869	DESIGN
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9996122031918029	WITHOUT_CLASSIFICATION	3.8779680819718483E-4	DESIGN
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9975820870137203	WITHOUT_CLASSIFICATION	0.0024179129862797744	DESIGN
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9988889468329655	WITHOUT_CLASSIFICATION	0.0011110531670344987	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9998531740034667	WITHOUT_CLASSIFICATION	1.468259965333366E-4	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9929237252185578	WITHOUT_CLASSIFICATION	0.007076274781442251	DESIGN
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9978801759739401	WITHOUT_CLASSIFICATION	0.00211982402605999	DESIGN
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9994773055845732	WITHOUT_CLASSIFICATION	5.226944154268083E-4	DESIGN
// parameter bind values...	WITHOUT_CLASSIFICATION	0.997071265836542	WITHOUT_CLASSIFICATION	0.0029287341634579543	DESIGN
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9958755360817801	WITHOUT_CLASSIFICATION	0.004124463918219817	DESIGN
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9995525796344814	WITHOUT_CLASSIFICATION	4.474203655186484E-4	DESIGN
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992449115655391	WITHOUT_CLASSIFICATION	7.550884344610111E-4	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9988074729605089	WITHOUT_CLASSIFICATION	0.001192527039491176	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9988074729605089	WITHOUT_CLASSIFICATION	0.001192527039491176	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9988074729605089	WITHOUT_CLASSIFICATION	0.001192527039491176	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9988074729605089	WITHOUT_CLASSIFICATION	0.001192527039491176	DESIGN
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995379712749813	WITHOUT_CLASSIFICATION	4.6202872501855877E-4	DESIGN
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991192390268996	WITHOUT_CLASSIFICATION	8.807609731003266E-4	DESIGN
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.999822557643229	WITHOUT_CLASSIFICATION	1.7744235677093402E-4	DESIGN
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995379712749813	WITHOUT_CLASSIFICATION	4.6202872501855877E-4	DESIGN
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9755655926057256	WITHOUT_CLASSIFICATION	0.024434407394274372	DESIGN
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9482577658318755	WITHOUT_CLASSIFICATION	0.05174223416812445	DESIGN
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996737906617018	WITHOUT_CLASSIFICATION	3.2620933829814156E-4	DESIGN
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997022783013435	WITHOUT_CLASSIFICATION	2.9772169865644767E-4	DESIGN
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.7284149961055171	DESIGN	0.271585003894483	WITHOUT_CLASSIFICATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.9015409119424576	WITHOUT_CLASSIFICATION	0.09845908805754243	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9995164145179432	WITHOUT_CLASSIFICATION	4.8358548205681403E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9996361671212022	WITHOUT_CLASSIFICATION	3.6383287879778695E-4	DESIGN
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9919461752357364	WITHOUT_CLASSIFICATION	0.008053824764263617	DESIGN
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9963993980556844	WITHOUT_CLASSIFICATION	0.0036006019443156007	DESIGN
//no big deal	WITHOUT_CLASSIFICATION	0.9988150030110065	WITHOUT_CLASSIFICATION	0.0011849969889935524	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9995695740844355	WITHOUT_CLASSIFICATION	4.3042591556446264E-4	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9995695740844355	WITHOUT_CLASSIFICATION	4.3042591556446264E-4	DESIGN
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9993736526791984	WITHOUT_CLASSIFICATION	6.263473208014889E-4	DESIGN
// see explanation above...	WITHOUT_CLASSIFICATION	0.9993321573748295	WITHOUT_CLASSIFICATION	6.678426251704206E-4	DESIGN
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.967327211307283	WITHOUT_CLASSIFICATION	0.03267278869271689	DESIGN
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9990396373559052	WITHOUT_CLASSIFICATION	9.603626440947607E-4	DESIGN
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993888404069742	WITHOUT_CLASSIFICATION	6.111595930258689E-4	DESIGN
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993888404069742	WITHOUT_CLASSIFICATION	6.111595930258689E-4	DESIGN
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999475187713461	WITHOUT_CLASSIFICATION	5.248122865381226E-5	DESIGN
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995347575928132	WITHOUT_CLASSIFICATION	4.6524240718679864E-4	DESIGN
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999737222531362	WITHOUT_CLASSIFICATION	2.627774686374587E-5	DESIGN
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9995115377765622	WITHOUT_CLASSIFICATION	4.884622234377835E-4	DESIGN
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9993306083710045	WITHOUT_CLASSIFICATION	6.693916289954836E-4	DESIGN
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9948361969464826	WITHOUT_CLASSIFICATION	0.005163803053517448	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994994619366309	WITHOUT_CLASSIFICATION	5.005380633691272E-4	DESIGN
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9995315986557417	WITHOUT_CLASSIFICATION	4.684013442582829E-4	DESIGN
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9997969089055299	WITHOUT_CLASSIFICATION	2.0309109447018235E-4	DESIGN
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9995069713461017	WITHOUT_CLASSIFICATION	4.930286538982773E-4	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9952567209632963	WITHOUT_CLASSIFICATION	0.004743279036703773	DESIGN
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9985386939696513	WITHOUT_CLASSIFICATION	0.00146130603034874	DESIGN
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9986025135835941	WITHOUT_CLASSIFICATION	0.001397486416405911	DESIGN
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9998753907396916	WITHOUT_CLASSIFICATION	1.2460926030837224E-4	DESIGN
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.999997157315218	WITHOUT_CLASSIFICATION	2.8426847819211725E-6	DESIGN
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999998316928259	WITHOUT_CLASSIFICATION	1.6830717399103124E-7	DESIGN
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999971367229017	WITHOUT_CLASSIFICATION	2.8632770983798116E-6	DESIGN
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999940038276381	WITHOUT_CLASSIFICATION	5.996172361871498E-6	DESIGN
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9958393818181014	WITHOUT_CLASSIFICATION	0.0041606181818985835	DESIGN
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9995279918114245	WITHOUT_CLASSIFICATION	4.7200818857550764E-4	DESIGN
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9995931402733397	WITHOUT_CLASSIFICATION	4.0685972666024936E-4	DESIGN
//final String queryString, 	WITHOUT_CLASSIFICATION	0.996123089243296	WITHOUT_CLASSIFICATION	0.0038769107567039633	DESIGN
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999725829667211	WITHOUT_CLASSIFICATION	2.741703327891695E-5	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9998914286451467	WITHOUT_CLASSIFICATION	1.0857135485334959E-4	DESIGN
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9974507346423304	WITHOUT_CLASSIFICATION	0.0025492653576696172	DESIGN
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.99968242259243	WITHOUT_CLASSIFICATION	3.175774075700446E-4	DESIGN
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9981124757593658	WITHOUT_CLASSIFICATION	0.0018875242406341934	DESIGN
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9916986259386447	WITHOUT_CLASSIFICATION	0.008301374061355265	DESIGN
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9975961902821988	WITHOUT_CLASSIFICATION	0.002403809717801266	DESIGN
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9981779684877029	WITHOUT_CLASSIFICATION	0.0018220315122971249	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9988757249394392	WITHOUT_CLASSIFICATION	0.0011242750605607173	DESIGN
// handle empty collection	WITHOUT_CLASSIFICATION	0.9947130240748902	WITHOUT_CLASSIFICATION	0.005286975925109801	DESIGN
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999706218843866	WITHOUT_CLASSIFICATION	2.937811561336396E-5	DESIGN
//handle empty collections	WITHOUT_CLASSIFICATION	0.9964944398601172	WITHOUT_CLASSIFICATION	0.0035055601398827343	DESIGN
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9957121963221094	WITHOUT_CLASSIFICATION	0.004287803677890607	DESIGN
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9997873602106101	WITHOUT_CLASSIFICATION	2.126397893898564E-4	DESIGN
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.840530799084631	WITHOUT_CLASSIFICATION	0.15946920091536887	DESIGN
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.991461242715951	WITHOUT_CLASSIFICATION	0.008538757284048976	DESIGN
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999372737351448	WITHOUT_CLASSIFICATION	6.272626485510213E-5	DESIGN
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9983206116516156	WITHOUT_CLASSIFICATION	0.001679388348384372	DESIGN
//use the id passed in	WITHOUT_CLASSIFICATION	0.9997199453162394	WITHOUT_CLASSIFICATION	2.800546837605141E-4	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9996528884128107	WITHOUT_CLASSIFICATION	3.471115871892681E-4	DESIGN
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.999635927385273	WITHOUT_CLASSIFICATION	3.640726147270018E-4	DESIGN
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999290049948777	WITHOUT_CLASSIFICATION	7.099500512229288E-5	DESIGN
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9994465898441953	WITHOUT_CLASSIFICATION	5.534101558046422E-4	DESIGN
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9982303236454474	WITHOUT_CLASSIFICATION	0.0017696763545525002	DESIGN
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9988953225607818	WITHOUT_CLASSIFICATION	0.0011046774392181682	DESIGN
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998733229034308	WITHOUT_CLASSIFICATION	1.2667709656923382E-4	DESIGN
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999867712127889	WITHOUT_CLASSIFICATION	1.3228787211114076E-5	DESIGN
// look for a proxy	WITHOUT_CLASSIFICATION	0.9990722915100779	WITHOUT_CLASSIFICATION	9.27708489922025E-4	DESIGN
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.997441028871331	WITHOUT_CLASSIFICATION	0.002558971128668864	DESIGN
//its the given optional object	WITHOUT_CLASSIFICATION	0.9985460329746264	WITHOUT_CLASSIFICATION	0.001453967025373525	DESIGN
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9969364878617363	WITHOUT_CLASSIFICATION	0.0030635121382638288	DESIGN
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9981065090051423	WITHOUT_CLASSIFICATION	0.0018934909948576785	DESIGN
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9992467749988279	WITHOUT_CLASSIFICATION	7.532250011721989E-4	DESIGN
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9973667135094183	WITHOUT_CLASSIFICATION	0.002633286490581676	DESIGN
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999686311952121	WITHOUT_CLASSIFICATION	3.1368804787864546E-5	DESIGN
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9537724724490423	WITHOUT_CLASSIFICATION	0.04622752755095768	DESIGN
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9995898392784041	WITHOUT_CLASSIFICATION	4.101607215958676E-4	DESIGN
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9903929600194916	WITHOUT_CLASSIFICATION	0.009607039980508353	DESIGN
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9968061641523771	WITHOUT_CLASSIFICATION	0.0031938358476229483	DESIGN
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9984540760903412	WITHOUT_CLASSIFICATION	0.0015459239096588767	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999939992423783	WITHOUT_CLASSIFICATION	6.000757621646327E-6	DESIGN
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9025917759503842	WITHOUT_CLASSIFICATION	0.0974082240496158	DESIGN
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9987241620192362	WITHOUT_CLASSIFICATION	0.00127583798076379	DESIGN
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9978626614655524	WITHOUT_CLASSIFICATION	0.0021373385344476857	DESIGN
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.999863017391462	WITHOUT_CLASSIFICATION	1.369826085379826E-4	DESIGN
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9763246557098816	WITHOUT_CLASSIFICATION	0.023675344290118402	DESIGN
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999908677051976	WITHOUT_CLASSIFICATION	9.132294802424107E-6	DESIGN
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9998872009676278	WITHOUT_CLASSIFICATION	1.1279903237220254E-4	DESIGN
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9977310603832065	WITHOUT_CLASSIFICATION	0.002268939616793499	DESIGN
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9996133342173839	WITHOUT_CLASSIFICATION	3.8666578261606924E-4	DESIGN
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999864800272683	WITHOUT_CLASSIFICATION	1.3519972731773331E-5	DESIGN
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9995424959540482	WITHOUT_CLASSIFICATION	4.575040459517717E-4	DESIGN
//a composite key	WITHOUT_CLASSIFICATION	0.9976195271269552	WITHOUT_CLASSIFICATION	0.0023804728730448194	DESIGN
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9997815115564095	WITHOUT_CLASSIFICATION	2.184884435905298E-4	DESIGN
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9304266756034012	WITHOUT_CLASSIFICATION	0.06957332439659886	DESIGN
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9976107005730253	WITHOUT_CLASSIFICATION	0.0023892994269746723	DESIGN
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9985110838793617	WITHOUT_CLASSIFICATION	0.0014889161206383483	DESIGN
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.7097698276694324	WITHOUT_CLASSIFICATION	0.29023017233056747	DESIGN
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.933207635210976	WITHOUT_CLASSIFICATION	0.06679236478902391	DESIGN
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.994628877967907	WITHOUT_CLASSIFICATION	0.0053711220320930494	DESIGN
// we found it	WITHOUT_CLASSIFICATION	0.9990526120589666	WITHOUT_CLASSIFICATION	9.473879410334914E-4	DESIGN
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9989658042717169	WITHOUT_CLASSIFICATION	0.0010341957282831052	DESIGN
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9738214249366658	WITHOUT_CLASSIFICATION	0.026178575063334163	DESIGN
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.979760348037366	WITHOUT_CLASSIFICATION	0.020239651962633932	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999826431255443	WITHOUT_CLASSIFICATION	1.7356874455701275E-5	DESIGN
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9953153147281766	WITHOUT_CLASSIFICATION	0.004684685271823461	DESIGN
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.999655645074369	WITHOUT_CLASSIFICATION	3.4435492563109413E-4	DESIGN
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9938899989891801	WITHOUT_CLASSIFICATION	0.006110001010819892	DESIGN
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9996884077161271	WITHOUT_CLASSIFICATION	3.1159228387298466E-4	DESIGN
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9970129936790283	WITHOUT_CLASSIFICATION	0.002987006320971651	DESIGN
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9998807576006865	WITHOUT_CLASSIFICATION	1.1924239931345166E-4	DESIGN
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9984022677688514	WITHOUT_CLASSIFICATION	0.0015977322311486054	DESIGN
//the criteria instance	WITHOUT_CLASSIFICATION	0.992310335815968	WITHOUT_CLASSIFICATION	0.007689664184032014	DESIGN
// the entity name	WITHOUT_CLASSIFICATION	0.9985908751038971	WITHOUT_CLASSIFICATION	0.0014091248961028186	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.999947319976357	WITHOUT_CLASSIFICATION	5.268002364306491E-5	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.999947319976357	WITHOUT_CLASSIFICATION	5.268002364306491E-5	DESIGN
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9997731682385963	WITHOUT_CLASSIFICATION	2.2683176140360942E-4	DESIGN
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9973307674124802	WITHOUT_CLASSIFICATION	0.0026692325875199182	DESIGN
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9995484177900694	WITHOUT_CLASSIFICATION	4.515822099305453E-4	DESIGN
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9975940572824546	WITHOUT_CLASSIFICATION	0.002405942717545371	DESIGN
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9992658284074204	WITHOUT_CLASSIFICATION	7.341715925796888E-4	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9986297059758815	WITHOUT_CLASSIFICATION	0.0013702940241184314	DESIGN
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9993829928304612	WITHOUT_CLASSIFICATION	6.170071695387583E-4	DESIGN
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999772187560142	WITHOUT_CLASSIFICATION	2.2781243985840816E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9985960065349966	WITHOUT_CLASSIFICATION	0.001403993465003467	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9998764419638465	WITHOUT_CLASSIFICATION	1.235580361534712E-4	DESIGN
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.999970567931192	WITHOUT_CLASSIFICATION	2.9432068808045574E-5	DESIGN
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9998376021841421	WITHOUT_CLASSIFICATION	1.6239781585804483E-4	DESIGN
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999923226023304	WITHOUT_CLASSIFICATION	7.677397669612642E-6	DESIGN
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.999625508780037	WITHOUT_CLASSIFICATION	3.744912199631056E-4	DESIGN
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.999983038327486	WITHOUT_CLASSIFICATION	1.696167251391232E-5	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9556203519476263	WITHOUT_CLASSIFICATION	0.04437964805237381	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9556203519476263	WITHOUT_CLASSIFICATION	0.04437964805237381	DESIGN
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999886430922627	WITHOUT_CLASSIFICATION	1.1356907737297141E-5	DESIGN
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9991118353336705	WITHOUT_CLASSIFICATION	8.881646663294612E-4	DESIGN
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9998288005164467	WITHOUT_CLASSIFICATION	1.7119948355316542E-4	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9997490231916919	WITHOUT_CLASSIFICATION	2.509768083081378E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9996583425036207	WITHOUT_CLASSIFICATION	3.416574963792292E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9979075460310286	WITHOUT_CLASSIFICATION	0.0020924539689713786	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9979075460310286	WITHOUT_CLASSIFICATION	0.0020924539689713786	DESIGN
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999483460139614	WITHOUT_CLASSIFICATION	5.165398603860469E-5	DESIGN
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.99914881471428	WITHOUT_CLASSIFICATION	8.511852857199549E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999646808244197	WITHOUT_CLASSIFICATION	3.531917558019332E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999447405145	WITHOUT_CLASSIFICATION	5.525948549396515E-8	DESIGN
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.7855442227915983	WITHOUT_CLASSIFICATION	0.21445577720840164	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9995624509166582	WITHOUT_CLASSIFICATION	4.375490833418688E-4	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9978222180274626	WITHOUT_CLASSIFICATION	0.002177781972537328	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999469109399693	WITHOUT_CLASSIFICATION	5.308906003068933E-4	DESIGN
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.998491302116569	WITHOUT_CLASSIFICATION	0.0015086978834309992	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9054288108747078	WITHOUT_CLASSIFICATION	0.09457118912529212	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9977284285776592	WITHOUT_CLASSIFICATION	0.0022715714223407553	DESIGN
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9997888235270077	WITHOUT_CLASSIFICATION	2.111764729923002E-4	DESIGN
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9996223438476036	WITHOUT_CLASSIFICATION	3.7765615239644174E-4	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9991761033353065	WITHOUT_CLASSIFICATION	8.238966646935994E-4	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9974456402043763	WITHOUT_CLASSIFICATION	0.0025543597956236433	DESIGN
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9994723554371711	WITHOUT_CLASSIFICATION	5.276445628289474E-4	DESIGN
//by default	WITHOUT_CLASSIFICATION	0.9980710427928312	WITHOUT_CLASSIFICATION	0.001928957207168773	DESIGN
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9474028789545191	WITHOUT_CLASSIFICATION	0.05259712104548087	DESIGN
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9992768779606712	WITHOUT_CLASSIFICATION	7.231220393288233E-4	DESIGN
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9992006084484792	WITHOUT_CLASSIFICATION	7.993915515208248E-4	DESIGN
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9997572999262494	WITHOUT_CLASSIFICATION	2.4270007375053635E-4	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9998782212395166	WITHOUT_CLASSIFICATION	1.2177876048337423E-4	DESIGN
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9994519942727225	WITHOUT_CLASSIFICATION	5.480057272776082E-4	DESIGN
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9995379894426907	WITHOUT_CLASSIFICATION	4.620105573093414E-4	DESIGN
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9978266594046624	WITHOUT_CLASSIFICATION	0.002173340595337589	DESIGN
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999991497998532	WITHOUT_CLASSIFICATION	8.502001469268415E-7	DESIGN
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.995055119196179	WITHOUT_CLASSIFICATION	0.004944880803821066	DESIGN
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9978064634010813	WITHOUT_CLASSIFICATION	0.002193536598918784	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999990588202282	WITHOUT_CLASSIFICATION	9.411797717851523E-7	DESIGN
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9961271376571058	WITHOUT_CLASSIFICATION	0.00387286234289431	DESIGN
//usually useless	WITHOUT_CLASSIFICATION	0.9932101662492017	WITHOUT_CLASSIFICATION	0.00678983375079822	DESIGN
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9946527532129361	WITHOUT_CLASSIFICATION	0.005347246787063831	DESIGN
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.998564495713598	WITHOUT_CLASSIFICATION	0.0014355042864020898	DESIGN
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999151557127229	WITHOUT_CLASSIFICATION	8.484428727711958E-5	DESIGN
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.998768568299634	WITHOUT_CLASSIFICATION	0.0012314317003660185	DESIGN
//may be final	WITHOUT_CLASSIFICATION	0.9977426973527962	WITHOUT_CLASSIFICATION	0.0022573026472038063	DESIGN
// may be final	WITHOUT_CLASSIFICATION	0.9976015229776671	WITHOUT_CLASSIFICATION	0.0023984770223328283	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9990748407175085	WITHOUT_CLASSIFICATION	9.251592824915286E-4	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9973850059592523	WITHOUT_CLASSIFICATION	0.0026149940407478325	DESIGN
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999333968817016	WITHOUT_CLASSIFICATION	6.66031182984203E-5	DESIGN
// ignore it...	WITHOUT_CLASSIFICATION	0.9968742788691022	WITHOUT_CLASSIFICATION	0.0031257211308977056	DESIGN
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9867305899422282	WITHOUT_CLASSIFICATION	0.013269410057771852	DESIGN
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9987559670558223	WITHOUT_CLASSIFICATION	0.0012440329441776887	DESIGN
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9987273655616561	WITHOUT_CLASSIFICATION	0.0012726344383438958	DESIGN
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9968391598689275	WITHOUT_CLASSIFICATION	0.00316084013107243	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9990748407175085	WITHOUT_CLASSIFICATION	9.251592824915286E-4	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9973850059592523	WITHOUT_CLASSIFICATION	0.0026149940407478325	DESIGN
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9997432271433522	WITHOUT_CLASSIFICATION	2.567728566478219E-4	DESIGN
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9976735091643476	WITHOUT_CLASSIFICATION	0.0023264908356523516	DESIGN
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9996456778848718	WITHOUT_CLASSIFICATION	3.543221151282778E-4	DESIGN
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999268798254175	WITHOUT_CLASSIFICATION	7.312017458252795E-5	DESIGN
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9979825414972157	WITHOUT_CLASSIFICATION	0.002017458502784358	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9955429951090432	WITHOUT_CLASSIFICATION	0.004457004890956763	DESIGN
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9997943722131243	WITHOUT_CLASSIFICATION	2.0562778687569454E-4	DESIGN
// }	WITHOUT_CLASSIFICATION	0.9988966700446341	WITHOUT_CLASSIFICATION	0.0011033299553658115	DESIGN
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.999484668446339	WITHOUT_CLASSIFICATION	5.153315536609068E-4	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.7738955066976065	DESIGN	0.22610449330239335	WITHOUT_CLASSIFICATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9991981253869862	WITHOUT_CLASSIFICATION	8.018746130137594E-4	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.7738955066976065	DESIGN	0.22610449330239335	WITHOUT_CLASSIFICATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.999794577452616	WITHOUT_CLASSIFICATION	2.0542254738394137E-4	DESIGN
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9992502841593829	WITHOUT_CLASSIFICATION	7.497158406171326E-4	DESIGN
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.999794577452616	WITHOUT_CLASSIFICATION	2.0542254738394137E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998332797876445	WITHOUT_CLASSIFICATION	1.6672021235557676E-4	DESIGN
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.999669500393307	WITHOUT_CLASSIFICATION	3.3049960669296046E-4	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9991767256462813	WITHOUT_CLASSIFICATION	8.232743537186138E-4	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9991767256462813	WITHOUT_CLASSIFICATION	8.232743537186138E-4	DESIGN
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9986523987033304	WITHOUT_CLASSIFICATION	0.0013476012966695593	DESIGN
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9986657047916183	WITHOUT_CLASSIFICATION	0.001334295208381703	DESIGN
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9986523987033304	WITHOUT_CLASSIFICATION	0.0013476012966695593	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9976847602768488	WITHOUT_CLASSIFICATION	0.0023152397231512114	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9975961902821988	WITHOUT_CLASSIFICATION	0.002403809717801266	DESIGN
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.7125428734310102	WITHOUT_CLASSIFICATION	0.28745712656898975	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9990019781093483	WITHOUT_CLASSIFICATION	9.980218906516798E-4	DESIGN
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9994629306225574	WITHOUT_CLASSIFICATION	5.370693774425144E-4	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9996874331587313	WITHOUT_CLASSIFICATION	3.1256684126869936E-4	DESIGN
//columns	WITHOUT_CLASSIFICATION	0.9990094494105661	WITHOUT_CLASSIFICATION	9.90550589433832E-4	DESIGN
//SQL statements	WITHOUT_CLASSIFICATION	0.9982294233730179	WITHOUT_CLASSIFICATION	0.0017705766269821746	DESIGN
//extra information about the element type	WITHOUT_CLASSIFICATION	0.994630202562522	WITHOUT_CLASSIFICATION	0.005369797437478059	DESIGN
//types	WITHOUT_CLASSIFICATION	0.9990094494105661	WITHOUT_CLASSIFICATION	9.90550589433832E-4	DESIGN
// custom sql	WITHOUT_CLASSIFICATION	0.9999284798579117	WITHOUT_CLASSIFICATION	7.152014208837875E-5	DESIGN
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9993977801996315	WITHOUT_CLASSIFICATION	6.022198003685443E-4	DESIGN
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9996866664442932	WITHOUT_CLASSIFICATION	3.133335557068645E-4	DESIGN
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9994876113548278	WITHOUT_CLASSIFICATION	5.123886451721938E-4	DESIGN
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999579113411265	WITHOUT_CLASSIFICATION	4.2088658873455714E-5	DESIGN
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9994723554371711	WITHOUT_CLASSIFICATION	5.276445628289474E-4	DESIGN
//ELEMENT	WITHOUT_CLASSIFICATION	0.9990094494105661	WITHOUT_CLASSIFICATION	9.90550589433832E-4	DESIGN
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998630750282902	WITHOUT_CLASSIFICATION	1.3692497170981276E-4	DESIGN
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9994071056309789	WITHOUT_CLASSIFICATION	5.928943690211389E-4	DESIGN
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999911632793032	WITHOUT_CLASSIFICATION	8.836720696734734E-6	DESIGN
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9994723554371711	WITHOUT_CLASSIFICATION	5.276445628289474E-4	DESIGN
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.997923485053653	WITHOUT_CLASSIFICATION	0.0020765149463469377	DESIGN
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9971234152147276	WITHOUT_CLASSIFICATION	0.002876584785272486	DESIGN
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9720394549285277	WITHOUT_CLASSIFICATION	0.027960545071472265	DESIGN
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9882282188719155	WITHOUT_CLASSIFICATION	0.011771781128084568	DESIGN
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9747731910096241	WITHOUT_CLASSIFICATION	0.025226808990375927	DESIGN
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9726512813268753	WITHOUT_CLASSIFICATION	0.027348718673124755	DESIGN
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9592569012627868	WITHOUT_CLASSIFICATION	0.04074309873721319	DESIGN
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9940213655465486	WITHOUT_CLASSIFICATION	0.005978634453451284	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9990019781093483	WITHOUT_CLASSIFICATION	9.980218906516798E-4	DESIGN
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9980745966303208	WITHOUT_CLASSIFICATION	0.0019254033696791072	DESIGN
//needed by arrays	WITHOUT_CLASSIFICATION	0.9973379103400335	WITHOUT_CLASSIFICATION	0.0026620896599665257	DESIGN
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.6087037253655639	WITHOUT_CLASSIFICATION	0.39129627463443595	DESIGN
//an assertion	WITHOUT_CLASSIFICATION	0.9963022058352734	WITHOUT_CLASSIFICATION	0.0036977941647266753	DESIGN
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9998991938818614	WITHOUT_CLASSIFICATION	1.0080611813854351E-4	DESIGN
//create all the new entries	WITHOUT_CLASSIFICATION	0.9998787721862675	WITHOUT_CLASSIFICATION	1.2122781373236783E-4	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9976847602768488	WITHOUT_CLASSIFICATION	0.0023152397231512114	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9976847602768488	WITHOUT_CLASSIFICATION	0.0023152397231512114	DESIGN
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9998559325828065	WITHOUT_CLASSIFICATION	1.4406741719348465E-4	DESIGN
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9998275353346944	WITHOUT_CLASSIFICATION	1.7246466530554638E-4	DESIGN
//==elementType ??	WITHOUT_CLASSIFICATION	0.9980159158093028	WITHOUT_CLASSIFICATION	0.0019840841906972133	DESIGN
//update all the modified entries	WITHOUT_CLASSIFICATION	0.999968734702193	WITHOUT_CLASSIFICATION	3.1265297806978486E-5	DESIGN
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9960247229380262	WITHOUT_CLASSIFICATION	0.003975277061973763	DESIGN
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9914431686071538	WITHOUT_CLASSIFICATION	0.008556831392846246	DESIGN
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9221144504915845	WITHOUT_CLASSIFICATION	0.07788554950841546	DESIGN
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999674077422702	WITHOUT_CLASSIFICATION	3.2592257729693824E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.999435792419467	WITHOUT_CLASSIFICATION	5.642075805329439E-4	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9996816506350903	WITHOUT_CLASSIFICATION	3.1834936490969046E-4	DESIGN
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9993977801996315	WITHOUT_CLASSIFICATION	6.022198003685443E-4	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
//Custom SQL	WITHOUT_CLASSIFICATION	0.9972960617857335	WITHOUT_CLASSIFICATION	0.002703938214266514	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9996816506350903	WITHOUT_CLASSIFICATION	3.1834936490969046E-4	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9994019003551972	WITHOUT_CLASSIFICATION	5.980996448028675E-4	DESIGN
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9870819664738494	WITHOUT_CLASSIFICATION	0.012918033526150589	DESIGN
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9989582697654701	WITHOUT_CLASSIFICATION	0.0010417302345299782	DESIGN
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9179329214463037	WITHOUT_CLASSIFICATION	0.08206707855369637	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999390043391482	WITHOUT_CLASSIFICATION	6.099566085180114E-4	DESIGN
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9997992731887898	WITHOUT_CLASSIFICATION	2.0072681121013184E-4	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9849539403961753	WITHOUT_CLASSIFICATION	0.015046059603824675	DESIGN
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999672969630188	WITHOUT_CLASSIFICATION	3.270303698123648E-5	DESIGN
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.999680647323741	WITHOUT_CLASSIFICATION	3.19352676258975E-4	DESIGN
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9988415799001962	WITHOUT_CLASSIFICATION	0.001158420099803868	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9990396373559052	WITHOUT_CLASSIFICATION	9.603626440947607E-4	DESIGN
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9984540760903412	WITHOUT_CLASSIFICATION	0.0015459239096588767	DESIGN
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9984540760903412	WITHOUT_CLASSIFICATION	0.0015459239096588767	DESIGN
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9644663363089249	WITHOUT_CLASSIFICATION	0.035533663691075135	DESIGN
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9970296753440627	WITHOUT_CLASSIFICATION	0.0029703246559373044	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9996816506350903	WITHOUT_CLASSIFICATION	3.1834936490969046E-4	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999390043391482	WITHOUT_CLASSIFICATION	6.099566085180114E-4	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9849539403961753	WITHOUT_CLASSIFICATION	0.015046059603824675	DESIGN
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9980423869719737	WITHOUT_CLASSIFICATION	0.001957613028026404	DESIGN
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9994984895672948	WITHOUT_CLASSIFICATION	5.01510432705217E-4	DESIGN
// discriminator column	WITHOUT_CLASSIFICATION	0.9998532035971028	WITHOUT_CLASSIFICATION	1.4679640289703898E-4	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999177331490998	WITHOUT_CLASSIFICATION	8.226685090018797E-5	DESIGN
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9998467661295604	WITHOUT_CLASSIFICATION	1.5323387043960745E-4	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9990396373559052	WITHOUT_CLASSIFICATION	9.603626440947607E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999054110676309	WITHOUT_CLASSIFICATION	9.458893236910214E-4	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9990396373559052	WITHOUT_CLASSIFICATION	9.603626440947607E-4	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9994019003551972	WITHOUT_CLASSIFICATION	5.980996448028675E-4	DESIGN
// JOINS	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9996839127352929	WITHOUT_CLASSIFICATION	3.160872647069989E-4	DESIGN
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9987248151248681	WITHOUT_CLASSIFICATION	0.0012751848751318801	DESIGN
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9912610016995873	WITHOUT_CLASSIFICATION	0.008738998300412767	DESIGN
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9994491283876212	WITHOUT_CLASSIFICATION	5.508716123787805E-4	DESIGN
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9989722890381636	WITHOUT_CLASSIFICATION	0.0010277109618364536	DESIGN
//render the SQL	WITHOUT_CLASSIFICATION	0.998332684574157	WITHOUT_CLASSIFICATION	0.0016673154258428893	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998332797876445	WITHOUT_CLASSIFICATION	1.6672021235557676E-4	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9879649676961012	WITHOUT_CLASSIFICATION	0.012035032303898852	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994764003916347	WITHOUT_CLASSIFICATION	5.235996083653435E-4	DESIGN
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999917472241646	WITHOUT_CLASSIFICATION	8.252775835466285E-6	DESIGN
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9960812498254512	WITHOUT_CLASSIFICATION	0.003918750174548734	DESIGN
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9995332311357775	WITHOUT_CLASSIFICATION	4.667688642224483E-4	DESIGN
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9985605682920101	WITHOUT_CLASSIFICATION	0.0014394317079898902	DESIGN
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9997787969431404	WITHOUT_CLASSIFICATION	2.2120305685963544E-4	DESIGN
// SQL strings	WITHOUT_CLASSIFICATION	0.9989741078486734	WITHOUT_CLASSIFICATION	0.00102589215132662	DESIGN
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999439185017919	WITHOUT_CLASSIFICATION	5.60814982080756E-5	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999054110676309	WITHOUT_CLASSIFICATION	9.458893236910214E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994764003916347	WITHOUT_CLASSIFICATION	5.235996083653435E-4	DESIGN
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9990396373559052	WITHOUT_CLASSIFICATION	9.603626440947607E-4	DESIGN
// VERSION	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9972579999032636	WITHOUT_CLASSIFICATION	0.002742000096736425	DESIGN
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9991958286297145	WITHOUT_CLASSIFICATION	8.041713702854862E-4	DESIGN
//before add :-)	WITHOUT_CLASSIFICATION	0.9985876175766307	WITHOUT_CLASSIFICATION	0.0014123824233692977	DESIGN
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9976405670898335	WITHOUT_CLASSIFICATION	0.0023594329101663926	DESIGN
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9998477527049631	WITHOUT_CLASSIFICATION	1.5224729503699697E-4	DESIGN
//note early exit here:	WITHOUT_CLASSIFICATION	0.9993522598746046	WITHOUT_CLASSIFICATION	6.477401253953891E-4	DESIGN
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9995145462891274	WITHOUT_CLASSIFICATION	4.854537108725757E-4	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9978392398234268	WITHOUT_CLASSIFICATION	0.0021607601765731596	DESIGN
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9992926683693275	WITHOUT_CLASSIFICATION	7.07331630672523E-4	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9998963938983497	WITHOUT_CLASSIFICATION	1.0360610165028056E-4	DESIGN
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9978680718857383	WITHOUT_CLASSIFICATION	0.0021319281142616895	DESIGN
//null owner ok??	WITHOUT_CLASSIFICATION	0.9986035884262503	WITHOUT_CLASSIFICATION	0.0013964115737496953	DESIGN
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999939821791902	WITHOUT_CLASSIFICATION	6.017820809885716E-6	DESIGN
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999535337696651	WITHOUT_CLASSIFICATION	4.646623033484846E-5	DESIGN
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.7435483734952137	WITHOUT_CLASSIFICATION	0.2564516265047863	DESIGN
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9991765169662173	WITHOUT_CLASSIFICATION	8.234830337826819E-4	DESIGN
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9955402851912262	WITHOUT_CLASSIFICATION	0.00445971480877379	DESIGN
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9969159491576738	WITHOUT_CLASSIFICATION	0.0030840508423261213	DESIGN
// ALIASES	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9998496698502846	WITHOUT_CLASSIFICATION	1.5033014971552818E-4	DESIGN
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9992718385804531	WITHOUT_CLASSIFICATION	7.281614195468426E-4	DESIGN
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.999830498469846	WITHOUT_CLASSIFICATION	1.6950153015400367E-4	DESIGN
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9981119643375963	WITHOUT_CLASSIFICATION	0.0018880356624038238	DESIGN
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.5938237244882874	DESIGN	0.40617627551171265	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.980190409631025	WITHOUT_CLASSIFICATION	0.019809590368974967	DESIGN
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9978664866915072	WITHOUT_CLASSIFICATION	0.002133513308492785	DESIGN
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.99989621396451	WITHOUT_CLASSIFICATION	1.0378603549004582E-4	DESIGN
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.8508111183339078	WITHOUT_CLASSIFICATION	0.14918888166609226	DESIGN
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.988517883305083	WITHOUT_CLASSIFICATION	0.011482116694917017	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9997665572362735	WITHOUT_CLASSIFICATION	2.3344276372653985E-4	DESIGN
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9998265675712398	WITHOUT_CLASSIFICATION	1.7343242876025617E-4	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.8023355910649954	WITHOUT_CLASSIFICATION	0.19766440893500448	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9837046697583559	WITHOUT_CLASSIFICATION	0.016295330241644056	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9998849540512456	WITHOUT_CLASSIFICATION	1.1504594875438978E-4	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9997398573879888	WITHOUT_CLASSIFICATION	2.6014261201123075E-4	DESIGN
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9780187885240671	WITHOUT_CLASSIFICATION	0.021981211475932887	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9998849540512456	WITHOUT_CLASSIFICATION	1.1504594875438978E-4	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9837046697583559	WITHOUT_CLASSIFICATION	0.016295330241644056	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9997398573879888	WITHOUT_CLASSIFICATION	2.6014261201123075E-4	DESIGN
// add the primary key	WITHOUT_CLASSIFICATION	0.9998676792186354	WITHOUT_CLASSIFICATION	1.323207813645971E-4	DESIGN
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999067113506684	WITHOUT_CLASSIFICATION	9.328864933146886E-5	DESIGN
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999581254506443	WITHOUT_CLASSIFICATION	4.18745493555892E-5	DESIGN
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9996114621994524	WITHOUT_CLASSIFICATION	3.8853780054763035E-4	DESIGN
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9987139359464416	WITHOUT_CLASSIFICATION	0.0012860640535583274	DESIGN
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.5080230478346895	WITHOUT_CLASSIFICATION	0.49197695216531057	DESIGN
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9939624640944595	WITHOUT_CLASSIFICATION	0.006037535905540386	DESIGN
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9984603145335864	WITHOUT_CLASSIFICATION	0.0015396854664135487	DESIGN
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.978386262929746	WITHOUT_CLASSIFICATION	0.021613737070253953	DESIGN
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9976566199033076	WITHOUT_CLASSIFICATION	0.0023433800966924387	DESIGN
// starting index	WITHOUT_CLASSIFICATION	0.9998636810852518	WITHOUT_CLASSIFICATION	1.363189147482116E-4	DESIGN
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.999531167636224	WITHOUT_CLASSIFICATION	4.6883236377592147E-4	DESIGN
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9991099213898356	WITHOUT_CLASSIFICATION	8.900786101645381E-4	DESIGN
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9988525423118084	WITHOUT_CLASSIFICATION	0.0011474576881916744	DESIGN
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.999393715359463	WITHOUT_CLASSIFICATION	6.062846405369347E-4	DESIGN
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.999391724798155	WITHOUT_CLASSIFICATION	6.082752018450769E-4	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9949400567456316	WITHOUT_CLASSIFICATION	0.005059943254368491	DESIGN
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.999882606129058	WITHOUT_CLASSIFICATION	1.1739387094211566E-4	DESIGN
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9993166430047775	WITHOUT_CLASSIFICATION	6.833569952224938E-4	DESIGN
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.999925188635064	WITHOUT_CLASSIFICATION	7.4811364935998E-5	DESIGN
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.706421476896602	WITHOUT_CLASSIFICATION	0.293578523103398	DESIGN
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9998880606409336	WITHOUT_CLASSIFICATION	1.119393590664398E-4	DESIGN
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9994200169280515	WITHOUT_CLASSIFICATION	5.799830719485426E-4	DESIGN
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999876452661148	WITHOUT_CLASSIFICATION	1.2354733885220834E-5	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999237457488693	WITHOUT_CLASSIFICATION	7.625425113075315E-5	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999237457488693	WITHOUT_CLASSIFICATION	7.625425113075315E-5	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.99983191713842	WITHOUT_CLASSIFICATION	1.6808286158000873E-4	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.99983191713842	WITHOUT_CLASSIFICATION	1.6808286158000873E-4	DESIGN
// not supported	WITHOUT_CLASSIFICATION	0.9975509439611865	WITHOUT_CLASSIFICATION	0.002449056038813418	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9949400567456316	WITHOUT_CLASSIFICATION	0.005059943254368491	DESIGN
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9993016942680771	WITHOUT_CLASSIFICATION	6.983057319227687E-4	DESIGN
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9997907261541931	WITHOUT_CLASSIFICATION	2.0927384580692233E-4	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9830844418020879	WITHOUT_CLASSIFICATION	0.016915558197912187	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9830844418020879	WITHOUT_CLASSIFICATION	0.016915558197912187	DESIGN
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999101379525879	WITHOUT_CLASSIFICATION	8.986204741214153E-5	DESIGN
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9992492619465548	WITHOUT_CLASSIFICATION	7.507380534451998E-4	DESIGN
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9996095158433493	WITHOUT_CLASSIFICATION	3.904841566506884E-4	DESIGN
//skip the driving table	WITHOUT_CLASSIFICATION	0.9995951332934412	WITHOUT_CLASSIFICATION	4.048667065588443E-4	DESIGN
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.7502632827463063	WITHOUT_CLASSIFICATION	0.24973671725369362	DESIGN
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999907391675992	WITHOUT_CLASSIFICATION	9.26083240087192E-6	DESIGN
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9987226905198219	WITHOUT_CLASSIFICATION	0.0012773094801781595	DESIGN
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9971836669058068	WITHOUT_CLASSIFICATION	0.002816333094193192	DESIGN
//now render the joins	WITHOUT_CLASSIFICATION	0.9961586281491075	WITHOUT_CLASSIFICATION	0.0038413718508925943	DESIGN
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9990384970293327	WITHOUT_CLASSIFICATION	9.615029706672959E-4	DESIGN
//now render the select clause	WITHOUT_CLASSIFICATION	0.9990424128292273	WITHOUT_CLASSIFICATION	9.575871707726714E-4	DESIGN
//now tie it all together	WITHOUT_CLASSIFICATION	0.9987404793407616	WITHOUT_CLASSIFICATION	0.0012595206592384684	DESIGN
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9976893590337678	WITHOUT_CLASSIFICATION	0.002310640966232185	DESIGN
//select SQL	WITHOUT_CLASSIFICATION	0.9980864245414439	WITHOUT_CLASSIFICATION	0.0019135754585560842	DESIGN
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.896695551610422	WITHOUT_CLASSIFICATION	0.10330444838957792	DESIGN
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9994043204673745	WITHOUT_CLASSIFICATION	5.956795326254424E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9933311061118327	WITHOUT_CLASSIFICATION	0.006668893888167241	DESIGN
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999774137837598	WITHOUT_CLASSIFICATION	2.2586216240183264E-5	DESIGN
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9822830160274655	WITHOUT_CLASSIFICATION	0.01771698397253453	DESIGN
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9875161428990176	WITHOUT_CLASSIFICATION	0.01248385710098236	DESIGN
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999637376141428	WITHOUT_CLASSIFICATION	3.6262385857279775E-5	DESIGN
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9952512547548832	WITHOUT_CLASSIFICATION	0.004748745245116832	DESIGN
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9998963512986938	WITHOUT_CLASSIFICATION	1.0364870130621278E-4	DESIGN
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9996083344752242	WITHOUT_CLASSIFICATION	3.9166552477574225E-4	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9984842794669779	WITHOUT_CLASSIFICATION	0.0015157205330220398	DESIGN
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999534263554994	WITHOUT_CLASSIFICATION	4.657364450065005E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994764003916347	WITHOUT_CLASSIFICATION	5.235996083653435E-4	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9998963938983497	WITHOUT_CLASSIFICATION	1.0360610165028056E-4	DESIGN
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9997142221101889	WITHOUT_CLASSIFICATION	2.857778898110313E-4	DESIGN
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9991855134618758	WITHOUT_CLASSIFICATION	8.144865381241798E-4	DESIGN
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999284859147607	WITHOUT_CLASSIFICATION	7.151408523930049E-4	DESIGN
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995135697772922	WITHOUT_CLASSIFICATION	4.864302227077656E-4	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9963197556760948	WITHOUT_CLASSIFICATION	0.0036802443239052833	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9963197556760948	WITHOUT_CLASSIFICATION	0.0036802443239052833	DESIGN
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999921880334625	WITHOUT_CLASSIFICATION	7.811966537469482E-6	DESIGN
// try "get"	WITHOUT_CLASSIFICATION	0.9996602139405875	WITHOUT_CLASSIFICATION	3.397860594125597E-4	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9986908425858572	WITHOUT_CLASSIFICATION	0.0013091574141428737	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9986908425858572	WITHOUT_CLASSIFICATION	0.0013091574141428737	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9987756247270436	WITHOUT_CLASSIFICATION	0.0012243752729563123	DESIGN
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.998569564656521	WITHOUT_CLASSIFICATION	0.0014304353434790205	DESIGN
// do not do anything	WITHOUT_CLASSIFICATION	0.998693831165697	WITHOUT_CLASSIFICATION	0.0013061688343029058	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9998531740034667	WITHOUT_CLASSIFICATION	1.468259965333366E-4	DESIGN
//cant instantiate	WITHOUT_CLASSIFICATION	0.9985161299918728	WITHOUT_CLASSIFICATION	0.0014838700081271283	DESIGN
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.999452946254745	WITHOUT_CLASSIFICATION	5.4705374525496E-4	DESIGN
// otherwise:	WITHOUT_CLASSIFICATION	0.9990396373559052	WITHOUT_CLASSIFICATION	9.603626440947607E-4	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9991603563456797	WITHOUT_CLASSIFICATION	8.396436543201838E-4	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9997237489855593	WITHOUT_CLASSIFICATION	2.7625101444069526E-4	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9997237489855593	WITHOUT_CLASSIFICATION	2.7625101444069526E-4	DESIGN
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.8527067970003828	WITHOUT_CLASSIFICATION	0.14729320299961732	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9991467276747938	WITHOUT_CLASSIFICATION	8.532723252061449E-4	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9991467276747938	WITHOUT_CLASSIFICATION	8.532723252061449E-4	DESIGN
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9996695042012826	WITHOUT_CLASSIFICATION	3.3049579871742487E-4	DESIGN
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9994600080949396	WITHOUT_CLASSIFICATION	5.399919050603067E-4	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9990094494105661	WITHOUT_CLASSIFICATION	9.90550589433832E-4	DESIGN
// Get the caller	WITHOUT_CLASSIFICATION	0.9998518556464381	WITHOUT_CLASSIFICATION	1.4814435356190557E-4	DESIGN
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9998743523445243	WITHOUT_CLASSIFICATION	1.2564765547563994E-4	DESIGN
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9997616385670047	WITHOUT_CLASSIFICATION	2.383614329952099E-4	DESIGN
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9693012331160266	WITHOUT_CLASSIFICATION	0.030698766883973463	DESIGN
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9981818182550064	WITHOUT_CLASSIFICATION	0.0018181817449936053	DESIGN
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999165800793206	WITHOUT_CLASSIFICATION	8.341992067929877E-5	DESIGN
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9954952320459505	WITHOUT_CLASSIFICATION	0.004504767954049522	DESIGN
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999446067642845	WITHOUT_CLASSIFICATION	5.539323571549867E-4	DESIGN
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.996040421130372	WITHOUT_CLASSIFICATION	0.003959578869628119	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9974286264839688	WITHOUT_CLASSIFICATION	0.0025713735160312174	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9974286264839688	WITHOUT_CLASSIFICATION	0.0025713735160312174	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9974286264839688	WITHOUT_CLASSIFICATION	0.0025713735160312174	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9974286264839688	WITHOUT_CLASSIFICATION	0.0025713735160312174	DESIGN
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999574191062652	WITHOUT_CLASSIFICATION	4.258089373483162E-5	DESIGN
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9992088495983446	WITHOUT_CLASSIFICATION	7.911504016553567E-4	DESIGN
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9975961902821988	WITHOUT_CLASSIFICATION	0.002403809717801266	DESIGN
//for MySQL	WITHOUT_CLASSIFICATION	0.9982706920585533	WITHOUT_CLASSIFICATION	0.001729307941446606	DESIGN
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9995806283353327	WITHOUT_CLASSIFICATION	4.1937166466732837E-4	DESIGN
//null caused some problems	WITHOUT_CLASSIFICATION	0.993300339632551	WITHOUT_CLASSIFICATION	0.0066996603674490144	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9998044286011141	WITHOUT_CLASSIFICATION	1.9557139888598253E-4	DESIGN
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9967808959691704	WITHOUT_CLASSIFICATION	0.0032191040308296097	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999858696845836	WITHOUT_CLASSIFICATION	1.4130315416375403E-5	DESIGN
// we only release the connection	WITHOUT_CLASSIFICATION	0.9973717904154497	WITHOUT_CLASSIFICATION	0.002628209584550281	DESIGN
// deprecated option...	WITHOUT_CLASSIFICATION	0.9914332982789908	WITHOUT_CLASSIFICATION	0.008566701721009085	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9992312939198142	WITHOUT_CLASSIFICATION	7.687060801856939E-4	DESIGN
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9985796156043418	WITHOUT_CLASSIFICATION	0.001420384395658109	DESIGN
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9931721337516053	WITHOUT_CLASSIFICATION	0.006827866248394742	DESIGN
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9998808182500298	WITHOUT_CLASSIFICATION	1.1918174997017796E-4	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9992312939198142	WITHOUT_CLASSIFICATION	7.687060801856939E-4	DESIGN
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9674750783049901	DESIGN	0.03252492169500987	WITHOUT_CLASSIFICATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9859441338813307	WITHOUT_CLASSIFICATION	0.014055866118669196	DESIGN
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.999956282408541	WITHOUT_CLASSIFICATION	4.371759145902268E-5	DESIGN
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9982834972490253	WITHOUT_CLASSIFICATION	0.001716502750974692	DESIGN
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9991638677800472	WITHOUT_CLASSIFICATION	8.361322199528581E-4	DESIGN
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9989793086279175	WITHOUT_CLASSIFICATION	0.0010206913720825184	DESIGN
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9991666579870504	WITHOUT_CLASSIFICATION	8.333420129495738E-4	DESIGN
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9991139643037549	WITHOUT_CLASSIFICATION	8.860356962450005E-4	DESIGN
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999965668654918	WITHOUT_CLASSIFICATION	3.433134508209249E-5	DESIGN
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9998145747136067	WITHOUT_CLASSIFICATION	1.854252863933085E-4	DESIGN
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999965668654918	WITHOUT_CLASSIFICATION	3.433134508209249E-5	DESIGN
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.999979172456159	WITHOUT_CLASSIFICATION	2.082754384105534E-5	DESIGN
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9981616081761036	WITHOUT_CLASSIFICATION	0.0018383918238964502	DESIGN
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9997298257959372	WITHOUT_CLASSIFICATION	2.7017420406287806E-4	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9994948207002996	WITHOUT_CLASSIFICATION	5.051792997003021E-4	DESIGN
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.8807606681670874	WITHOUT_CLASSIFICATION	0.11923933183291252	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9998843182757033	WITHOUT_CLASSIFICATION	1.1568172429664538E-4	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998017043110398	WITHOUT_CLASSIFICATION	1.982956889602418E-4	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9995616106087329	WITHOUT_CLASSIFICATION	4.383893912669758E-4	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998017043110398	WITHOUT_CLASSIFICATION	1.982956889602418E-4	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999971902564913	WITHOUT_CLASSIFICATION	2.809743508709337E-5	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999806797620094	WITHOUT_CLASSIFICATION	1.9320237990643283E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.999585997471479	WITHOUT_CLASSIFICATION	4.140025285209308E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.999906265545987	WITHOUT_CLASSIFICATION	9.373445401294926E-5	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9998843182757033	WITHOUT_CLASSIFICATION	1.1568172429664538E-4	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9995616106087329	WITHOUT_CLASSIFICATION	4.383893912669758E-4	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999971902564913	WITHOUT_CLASSIFICATION	2.809743508709337E-5	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9986336741403204	WITHOUT_CLASSIFICATION	0.0013663258596795533	DESIGN
//return currentId;	WITHOUT_CLASSIFICATION	0.9975299894854331	WITHOUT_CLASSIFICATION	0.0024700105145667784	DESIGN
//reset the id	WITHOUT_CLASSIFICATION	0.9990401720648752	WITHOUT_CLASSIFICATION	9.598279351248695E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
//reset the version	WITHOUT_CLASSIFICATION	0.9995559783234607	WITHOUT_CLASSIFICATION	4.440216765393506E-4	DESIGN
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9839761202406478	WITHOUT_CLASSIFICATION	0.01602387975935224	DESIGN
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9998257953855352	WITHOUT_CLASSIFICATION	1.7420461446478918E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9933311061118327	WITHOUT_CLASSIFICATION	0.006668893888167241	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999806797620094	WITHOUT_CLASSIFICATION	1.9320237990643283E-5	DESIGN
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999786539566863	WITHOUT_CLASSIFICATION	2.1346043313719014E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9998873540831101	WITHOUT_CLASSIFICATION	1.1264591688986018E-4	DESIGN
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9995052301841191	WITHOUT_CLASSIFICATION	4.947698158808841E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9933311061118327	WITHOUT_CLASSIFICATION	0.006668893888167241	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994764003916347	WITHOUT_CLASSIFICATION	5.235996083653435E-4	DESIGN
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9993197731280797	WITHOUT_CLASSIFICATION	6.802268719202284E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9933311061118327	WITHOUT_CLASSIFICATION	0.006668893888167241	DESIGN
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9986327902970586	WITHOUT_CLASSIFICATION	0.001367209702941361	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998259158954972	WITHOUT_CLASSIFICATION	1.7408410450285214E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994764003916347	WITHOUT_CLASSIFICATION	5.235996083653435E-4	DESIGN
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9970244738886729	WITHOUT_CLASSIFICATION	0.0029755261113271637	DESIGN
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9997999464899506	WITHOUT_CLASSIFICATION	2.0005351004937841E-4	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9998500851708609	WITHOUT_CLASSIFICATION	1.4991482913916294E-4	DESIGN
// Collection Types:	WITHOUT_CLASSIFICATION	0.9989165411804807	WITHOUT_CLASSIFICATION	0.001083458819519294	DESIGN
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999193028511485	WITHOUT_CLASSIFICATION	8.069714885161779E-5	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9992115705639063	WITHOUT_CLASSIFICATION	7.884294360936803E-4	DESIGN
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9996067248016148	WITHOUT_CLASSIFICATION	3.9327519838506554E-4	DESIGN
//value is the entity name	WITHOUT_CLASSIFICATION	0.9962961302762058	WITHOUT_CLASSIFICATION	0.0037038697237941347	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9997601356413437	WITHOUT_CLASSIFICATION	2.3986435865634614E-4	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9990094494105661	WITHOUT_CLASSIFICATION	9.90550589433832E-4	DESIGN
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9962961302762058	WITHOUT_CLASSIFICATION	0.0037038697237941347	DESIGN
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9566298869424833	WITHOUT_CLASSIFICATION	0.04337011305751675	DESIGN
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9981974560716455	WITHOUT_CLASSIFICATION	0.0018025439283546418	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9975961902821988	WITHOUT_CLASSIFICATION	0.002403809717801266	DESIGN
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9976804939369129	WITHOUT_CLASSIFICATION	0.0023195060630871412	DESIGN
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9997980365056011	WITHOUT_CLASSIFICATION	2.0196349439894208E-4	DESIGN
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9992475895746805	WITHOUT_CLASSIFICATION	7.524104253195427E-4	DESIGN
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.857356146149545	WITHOUT_CLASSIFICATION	0.142643853850455	DESIGN
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9965034660067109	WITHOUT_CLASSIFICATION	0.0034965339932891814	DESIGN
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9894668607514111	WITHOUT_CLASSIFICATION	0.010533139248588841	DESIGN
//TODO!!!	WITHOUT_CLASSIFICATION	0.9990094494105661	WITHOUT_CLASSIFICATION	9.90550589433832E-4	DESIGN
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9997544460677593	WITHOUT_CLASSIFICATION	2.455539322406132E-4	DESIGN
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9997544460677593	WITHOUT_CLASSIFICATION	2.455539322406132E-4	DESIGN
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9986788935500623	WITHOUT_CLASSIFICATION	0.0013211064499375794	DESIGN
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9992963043886083	WITHOUT_CLASSIFICATION	7.036956113917161E-4	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9990094494105661	WITHOUT_CLASSIFICATION	9.90550589433832E-4	DESIGN
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999960796297112	WITHOUT_CLASSIFICATION	3.920370288828393E-6	DESIGN
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999236356152611	WITHOUT_CLASSIFICATION	7.636438473885879E-5	DESIGN
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9997947361271514	WITHOUT_CLASSIFICATION	2.0526387284865651E-4	DESIGN
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9976163302576497	WITHOUT_CLASSIFICATION	0.0023836697423503888	DESIGN
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9998804321377824	WITHOUT_CLASSIFICATION	1.1956786221750515E-4	DESIGN
//TODO	WITHOUT_CLASSIFICATION	0.6800953318814017	DESIGN	0.31990466811859825	WITHOUT_CLASSIFICATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9998677764081291	WITHOUT_CLASSIFICATION	1.322235918709595E-4	DESIGN
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9983351185451582	WITHOUT_CLASSIFICATION	0.0016648814548417211	DESIGN
//cache this	WITHOUT_CLASSIFICATION	0.9825573146598254	WITHOUT_CLASSIFICATION	0.017442685340174565	DESIGN
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9952067029491279	WITHOUT_CLASSIFICATION	0.004793297050872043	DESIGN
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9993143461557807	WITHOUT_CLASSIFICATION	6.856538442192012E-4	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9997955802532755	WITHOUT_CLASSIFICATION	2.0441974672449437E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994764003916347	WITHOUT_CLASSIFICATION	5.235996083653435E-4	DESIGN
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9992118253069608	WITHOUT_CLASSIFICATION	7.881746930390271E-4	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9956109070977655	WITHOUT_CLASSIFICATION	0.004389092902234576	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9956109070977655	WITHOUT_CLASSIFICATION	0.004389092902234576	DESIGN
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999932792783284	WITHOUT_CLASSIFICATION	6.720721671667391E-6	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9992115705639063	WITHOUT_CLASSIFICATION	7.884294360936803E-4	DESIGN
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9801147898776015	WITHOUT_CLASSIFICATION	0.01988521012239844	DESIGN
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999605442126277	WITHOUT_CLASSIFICATION	3.945578737227603E-5	DESIGN
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9998709448720002	WITHOUT_CLASSIFICATION	1.2905512799972653E-4	DESIGN
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9998406607672684	WITHOUT_CLASSIFICATION	1.5933923273162565E-4	DESIGN
//remember the uk value	WITHOUT_CLASSIFICATION	0.999027343667679	WITHOUT_CLASSIFICATION	9.726563323211126E-4	DESIGN
//NOOP	WITHOUT_CLASSIFICATION	0.999078264535553	WITHOUT_CLASSIFICATION	9.217354644468818E-4	DESIGN
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9984540760903412	WITHOUT_CLASSIFICATION	0.0015459239096588767	DESIGN
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9993493543532725	WITHOUT_CLASSIFICATION	6.506456467274903E-4	DESIGN
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9948993650893152	WITHOUT_CLASSIFICATION	0.0051006349106848545	DESIGN
// return false;	WITHOUT_CLASSIFICATION	0.9988004927031768	WITHOUT_CLASSIFICATION	0.001199507296823184	DESIGN
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9980889607708874	WITHOUT_CLASSIFICATION	0.001911039229112663	DESIGN
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999226922914728	WITHOUT_CLASSIFICATION	7.730770852715719E-5	DESIGN
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9998641417785045	WITHOUT_CLASSIFICATION	1.35858221495598E-4	DESIGN
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999963291634059	WITHOUT_CLASSIFICATION	3.670836594189859E-6	DESIGN
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9981266012598062	WITHOUT_CLASSIFICATION	0.0018733987401937614	DESIGN
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999178905073368	WITHOUT_CLASSIFICATION	8.210949266316624E-5	DESIGN
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999887011640959	WITHOUT_CLASSIFICATION	1.129883590417351E-5	DESIGN
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999488961233414	WITHOUT_CLASSIFICATION	5.1103876658612973E-5	DESIGN
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999713460505627	WITHOUT_CLASSIFICATION	2.865394943733473E-5	DESIGN
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9996710560157973	WITHOUT_CLASSIFICATION	3.289439842027432E-4	DESIGN
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999388460861653	WITHOUT_CLASSIFICATION	6.115391383466684E-5	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9654111582405441	WITHOUT_CLASSIFICATION	0.03458884175945581	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.8932990067833393	WITHOUT_CLASSIFICATION	0.10670099321666071	DESIGN
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.999828671503152	WITHOUT_CLASSIFICATION	1.7132849684787767E-4	DESIGN
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999670916454387	WITHOUT_CLASSIFICATION	3.290835456116788E-5	DESIGN
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9992477780967027	WITHOUT_CLASSIFICATION	7.522219032972149E-4	DESIGN
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9970758173818405	WITHOUT_CLASSIFICATION	0.0029241826181594243	DESIGN
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9923564177425085	WITHOUT_CLASSIFICATION	0.00764358225749146	DESIGN
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9993754411471646	WITHOUT_CLASSIFICATION	6.245588528353225E-4	DESIGN
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9995112716389725	WITHOUT_CLASSIFICATION	4.887283610274873E-4	DESIGN
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999975734211656	WITHOUT_CLASSIFICATION	2.4265788343687802E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9990555650729106	WITHOUT_CLASSIFICATION	9.444349270893779E-4	DESIGN
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9988666127574408	WITHOUT_CLASSIFICATION	0.001133387242559119	DESIGN
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.999895527598544	WITHOUT_CLASSIFICATION	1.0447240145592742E-4	DESIGN
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9993561764507333	WITHOUT_CLASSIFICATION	6.438235492668515E-4	DESIGN
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999919420636363	WITHOUT_CLASSIFICATION	8.057936363737623E-6	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9958059804971743	WITHOUT_CLASSIFICATION	0.004194019502825685	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9958059804971743	WITHOUT_CLASSIFICATION	0.004194019502825685	DESIGN
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9996850847979157	WITHOUT_CLASSIFICATION	3.149152020843068E-4	DESIGN
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9997815263841243	WITHOUT_CLASSIFICATION	2.1847361587573844E-4	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9971869012391825	WITHOUT_CLASSIFICATION	0.002813098760817519	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9971869012391825	WITHOUT_CLASSIFICATION	0.002813098760817519	DESIGN
// use default behavior	WITHOUT_CLASSIFICATION	0.9957670532383309	WITHOUT_CLASSIFICATION	0.004232946761669107	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.998523100782593	WITHOUT_CLASSIFICATION	0.001476899217407067	DESIGN
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.7763248076108221	DESIGN	0.22367519238917782	WITHOUT_CLASSIFICATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999201062036799	WITHOUT_CLASSIFICATION	7.989379632005374E-5	DESIGN
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9985107789750083	WITHOUT_CLASSIFICATION	0.0014892210249917665	DESIGN
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9994764003916347	WITHOUT_CLASSIFICATION	5.235996083653435E-4	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999430653016137	WITHOUT_CLASSIFICATION	5.6934698386282244E-5	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999430653016137	WITHOUT_CLASSIFICATION	5.6934698386282244E-5	DESIGN
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9994764003916347	WITHOUT_CLASSIFICATION	5.235996083653435E-4	DESIGN
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9927658193362172	WITHOUT_CLASSIFICATION	0.0072341806637827135	DESIGN
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9976847602768488	WITHOUT_CLASSIFICATION	0.0023152397231512114	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9990446982117557	WITHOUT_CLASSIFICATION	9.553017882442225E-4	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9990446982117557	WITHOUT_CLASSIFICATION	9.553017882442225E-4	DESIGN
// includes last '.'	WITHOUT_CLASSIFICATION	0.999900842566915	WITHOUT_CLASSIFICATION	9.915743308491323E-5	DESIGN
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9998015543675957	WITHOUT_CLASSIFICATION	1.9844563240442736E-4	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9994130435868116	WITHOUT_CLASSIFICATION	5.869564131884779E-4	DESIGN
// first time we find match!	WITHOUT_CLASSIFICATION	0.9991792403431107	WITHOUT_CLASSIFICATION	8.207596568893997E-4	DESIGN
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.999409746119711	WITHOUT_CLASSIFICATION	5.902538802891095E-4	DESIGN
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9924733203788385	WITHOUT_CLASSIFICATION	0.007526679621161465	DESIGN
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999592007057748	WITHOUT_CLASSIFICATION	4.079929422512567E-5	DESIGN
// the current iterator	WITHOUT_CLASSIFICATION	0.9998832949805091	WITHOUT_CLASSIFICATION	1.1670501949078273E-4	DESIGN
// the last used iterator	WITHOUT_CLASSIFICATION	0.9679949362150423	WITHOUT_CLASSIFICATION	0.032005063784957676	DESIGN
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9997216138527878	WITHOUT_CLASSIFICATION	2.7838614721212616E-4	DESIGN
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9915286214290613	WITHOUT_CLASSIFICATION	0.008471378570938734	DESIGN
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9973187598539418	WITHOUT_CLASSIFICATION	0.00268124014605805	DESIGN
//doable if needed	WITHOUT_CLASSIFICATION	0.9986053256493761	WITHOUT_CLASSIFICATION	0.0013946743506238503	DESIGN
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9305634702468943	WITHOUT_CLASSIFICATION	0.06943652975310567	DESIGN
// peek ahead	WITHOUT_CLASSIFICATION	0.9974492857416205	WITHOUT_CLASSIFICATION	0.002550714258379508	DESIGN
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9998451788040116	WITHOUT_CLASSIFICATION	1.548211959884798E-4	DESIGN
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.999611223429673	WITHOUT_CLASSIFICATION	3.8877657032704304E-4	DESIGN
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9998973570901794	WITHOUT_CLASSIFICATION	1.0264290982059446E-4	DESIGN
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.998184410761211	WITHOUT_CLASSIFICATION	0.0018155892387890908	DESIGN
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9901014844228025	WITHOUT_CLASSIFICATION	0.00989851557719751	DESIGN
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9893611566848021	WITHOUT_CLASSIFICATION	0.010638843315197974	DESIGN
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9971810112170849	WITHOUT_CLASSIFICATION	0.002818988782915092	DESIGN
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9969973180396747	WITHOUT_CLASSIFICATION	0.0030026819603252842	DESIGN
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.994916051049294	WITHOUT_CLASSIFICATION	0.005083948950705923	DESIGN
//faster?	WITHOUT_CLASSIFICATION	0.9990094494105661	WITHOUT_CLASSIFICATION	9.90550589433832E-4	DESIGN
// the name of a class	WITHOUT_CLASSIFICATION	0.998587306831169	WITHOUT_CLASSIFICATION	0.001412693168831022	DESIGN
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9986986228694129	WITHOUT_CLASSIFICATION	0.0013013771305871182	DESIGN
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9975961902821988	WITHOUT_CLASSIFICATION	0.002403809717801266	DESIGN
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9996833727887141	WITHOUT_CLASSIFICATION	3.16627211285993E-4	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9989205034227417	WITHOUT_CLASSIFICATION	0.001079496577258292	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.6055510969399277	WITHOUT_CLASSIFICATION	0.3944489030600723	DESIGN
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9998043139931322	WITHOUT_CLASSIFICATION	1.9568600686782736E-4	DESIGN
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9994698970185718	WITHOUT_CLASSIFICATION	5.301029814282004E-4	DESIGN
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9975961902821988	WITHOUT_CLASSIFICATION	0.002403809717801266	DESIGN
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9518986770786675	WITHOUT_CLASSIFICATION	0.04810132292133243	DESIGN
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9975961902821988	WITHOUT_CLASSIFICATION	0.002403809717801266	DESIGN
//readResolveObject	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9984540760903412	WITHOUT_CLASSIFICATION	0.0015459239096588767	DESIGN
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9997435865654496	WITHOUT_CLASSIFICATION	2.5641343455039793E-4	DESIGN
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9998200660678342	WITHOUT_CLASSIFICATION	1.799339321658284E-4	DESIGN
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999253078137676	WITHOUT_CLASSIFICATION	7.469218623240146E-5	DESIGN
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9995666509913296	WITHOUT_CLASSIFICATION	4.3334900867039093E-4	DESIGN
// Write HTML header	WITHOUT_CLASSIFICATION	0.9981394293634971	WITHOUT_CLASSIFICATION	0.0018605706365028888	DESIGN
// Handle actions	WITHOUT_CLASSIFICATION	0.9988100199945431	WITHOUT_CLASSIFICATION	0.0011899800054568606	DESIGN
// Print page	WITHOUT_CLASSIFICATION	0.998623555000355	WITHOUT_CLASSIFICATION	0.0013764449996450244	DESIGN
// Write HTML footer	WITHOUT_CLASSIFICATION	0.999431906777739	WITHOUT_CLASSIFICATION	5.680932222609926E-4	DESIGN
// End unit of work	WITHOUT_CLASSIFICATION	0.9993228463319858	WITHOUT_CLASSIFICATION	6.771536680143063E-4	DESIGN
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.6668108016368344	WITHOUT_CLASSIFICATION	0.3331891983631656	DESIGN
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9961836594126593	WITHOUT_CLASSIFICATION	0.0038163405873407256	DESIGN
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999777714712359	WITHOUT_CLASSIFICATION	2.222852876403987E-5	DESIGN
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9955691877995019	WITHOUT_CLASSIFICATION	0.00443081220049808	DESIGN
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9957626300966202	WITHOUT_CLASSIFICATION	0.004237369903379734	DESIGN
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9236982381936223	WITHOUT_CLASSIFICATION	0.0763017618063778	DESIGN
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9990985887530528	WITHOUT_CLASSIFICATION	9.014112469472592E-4	DESIGN
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9996988311313122	WITHOUT_CLASSIFICATION	3.0116886868785086E-4	DESIGN
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9998874999392313	WITHOUT_CLASSIFICATION	1.1250006076860735E-4	DESIGN
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9993802641346643	WITHOUT_CLASSIFICATION	6.197358653356538E-4	DESIGN
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9994180892975042	WITHOUT_CLASSIFICATION	5.819107024957728E-4	DESIGN
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9981115098401764	WITHOUT_CLASSIFICATION	0.001888490159823597	DESIGN
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9998202770497289	WITHOUT_CLASSIFICATION	1.797229502710887E-4	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999219438470552	WITHOUT_CLASSIFICATION	7.805615294472065E-5	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999219438470552	WITHOUT_CLASSIFICATION	7.805615294472065E-5	DESIGN
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999986956340124	WITHOUT_CLASSIFICATION	1.3043659875531664E-6	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9998828751403847	WITHOUT_CLASSIFICATION	1.1712485961528064E-4	DESIGN
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9997230169592644	WITHOUT_CLASSIFICATION	2.769830407356463E-4	DESIGN
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9953115814701459	WITHOUT_CLASSIFICATION	0.004688418529854084	DESIGN
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999695563368795	WITHOUT_CLASSIFICATION	3.044366312049454E-5	DESIGN
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9977868174662715	WITHOUT_CLASSIFICATION	0.002213182533728431	DESIGN
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999994059221372	WITHOUT_CLASSIFICATION	5.940778628336657E-7	DESIGN
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999989522253452	WITHOUT_CLASSIFICATION	1.0477746547508506E-6	DESIGN
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9985791748673081	WITHOUT_CLASSIFICATION	0.0014208251326919296	DESIGN
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9998593681576837	WITHOUT_CLASSIFICATION	1.4063184231618658E-4	DESIGN
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999715566162436	WITHOUT_CLASSIFICATION	2.8443383756342142E-5	DESIGN
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9850512852783472	WITHOUT_CLASSIFICATION	0.014948714721652894	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998413306762	WITHOUT_CLASSIFICATION	1.5866932384335726E-7	DESIGN
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9983051911708769	WITHOUT_CLASSIFICATION	0.0016948088291230835	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.998679792078499	WITHOUT_CLASSIFICATION	0.0013202079215010095	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.998679792078499	WITHOUT_CLASSIFICATION	0.0013202079215010095	DESIGN
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9995791343861729	WITHOUT_CLASSIFICATION	4.2086561382710544E-4	DESIGN
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9992929729199072	WITHOUT_CLASSIFICATION	7.070270800928535E-4	DESIGN
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9975501989241804	WITHOUT_CLASSIFICATION	0.0024498010758195695	DESIGN
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999172004573118	WITHOUT_CLASSIFICATION	8.279954268820762E-5	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999406472626987	WITHOUT_CLASSIFICATION	5.935273730122643E-5	DESIGN
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996212686243564	WITHOUT_CLASSIFICATION	3.7873137564352235E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
//element //index -> id	WITHOUT_CLASSIFICATION	0.9997430646361134	WITHOUT_CLASSIFICATION	2.5693536388658847E-4	DESIGN
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.8784408893102534	WITHOUT_CLASSIFICATION	0.12155911068974666	DESIGN
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999738251198872	WITHOUT_CLASSIFICATION	2.617488011287395E-5	DESIGN
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999930666720647	WITHOUT_CLASSIFICATION	6.933327935305425E-6	DESIGN
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9998204980430735	WITHOUT_CLASSIFICATION	1.795019569264529E-4	DESIGN
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9906054195169399	WITHOUT_CLASSIFICATION	0.009394580483060053	DESIGN
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999789287600045	WITHOUT_CLASSIFICATION	2.1071239995580225E-5	DESIGN
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9997762274620554	WITHOUT_CLASSIFICATION	2.2377253794454005E-4	DESIGN
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.7529765134162588	WITHOUT_CLASSIFICATION	0.24702348658374104	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.996272475107127	WITHOUT_CLASSIFICATION	0.0037275248928730752	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999507461346968	WITHOUT_CLASSIFICATION	4.925386530328722E-5	DESIGN
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999940569069786	WITHOUT_CLASSIFICATION	5.943093021356831E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9902527671510528	WITHOUT_CLASSIFICATION	0.00974723284894725	DESIGN
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.999946822106036	WITHOUT_CLASSIFICATION	5.317789396394236E-5	DESIGN
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999237840041474	WITHOUT_CLASSIFICATION	7.62159958525917E-5	DESIGN
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999991838908869	WITHOUT_CLASSIFICATION	8.161091130993384E-7	DESIGN
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9952894585568723	WITHOUT_CLASSIFICATION	0.004710541443127751	DESIGN
//Named Queries:	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.7731771512295325	WITHOUT_CLASSIFICATION	0.22682284877046746	DESIGN
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9808553975666143	WITHOUT_CLASSIFICATION	0.01914460243338566	DESIGN
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999889182518314	WITHOUT_CLASSIFICATION	1.108174816859421E-5	DESIGN
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999421070458836	WITHOUT_CLASSIFICATION	5.789295411637998E-5	DESIGN
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9998871666419091	WITHOUT_CLASSIFICATION	1.1283335809083308E-4	DESIGN
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999507617347686	WITHOUT_CLASSIFICATION	4.923826523143903E-5	DESIGN
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9994705261051959	WITHOUT_CLASSIFICATION	5.294738948040795E-4	DESIGN
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999993130718366	WITHOUT_CLASSIFICATION	6.869281634256907E-7	DESIGN
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999574510772278	WITHOUT_CLASSIFICATION	4.2548922772227865E-5	DESIGN
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9998670061201986	WITHOUT_CLASSIFICATION	1.3299387980135387E-4	DESIGN
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9755273237302884	WITHOUT_CLASSIFICATION	0.02447267626971167	DESIGN
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9996904007846135	WITHOUT_CLASSIFICATION	3.0959921538651567E-4	DESIGN
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999594801213046	WITHOUT_CLASSIFICATION	4.0519878695324906E-5	DESIGN
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9998990219741142	WITHOUT_CLASSIFICATION	1.0097802588584403E-4	DESIGN
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9994947200039944	WITHOUT_CLASSIFICATION	5.052799960055655E-4	DESIGN
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9996116243620247	WITHOUT_CLASSIFICATION	3.8837563797539923E-4	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9943235842928656	WITHOUT_CLASSIFICATION	0.005676415707134387	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9943235842928656	WITHOUT_CLASSIFICATION	0.005676415707134387	DESIGN
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.999976028406693	WITHOUT_CLASSIFICATION	2.3971593307084287E-5	DESIGN
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.8802570476597756	WITHOUT_CLASSIFICATION	0.11974295234022432	DESIGN
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9574260781860431	WITHOUT_CLASSIFICATION	0.042573921813956875	DESIGN
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9998664055967413	WITHOUT_CLASSIFICATION	1.3359440325868657E-4	DESIGN
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.8597368322534659	WITHOUT_CLASSIFICATION	0.14026316774653405	DESIGN
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9940375967490808	WITHOUT_CLASSIFICATION	0.005962403250919287	DESIGN
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9976090084067136	WITHOUT_CLASSIFICATION	0.002390991593286404	DESIGN
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9983895598307515	WITHOUT_CLASSIFICATION	0.0016104401692484008	DESIGN
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.996135074227954	WITHOUT_CLASSIFICATION	0.0038649257720460603	DESIGN
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998470513768	WITHOUT_CLASSIFICATION	1.5294862319990363E-4	DESIGN
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998258202235287	WITHOUT_CLASSIFICATION	1.7417977647126546E-4	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9654278050438695	WITHOUT_CLASSIFICATION	0.03457219495613059	DESIGN
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.998172735274717	WITHOUT_CLASSIFICATION	0.0018272647252830646	DESIGN
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999982771685646	WITHOUT_CLASSIFICATION	1.7228314353871839E-6	DESIGN
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.998615533276626	WITHOUT_CLASSIFICATION	0.0013844667233740852	DESIGN
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9966831696044712	WITHOUT_CLASSIFICATION	0.003316830395528778	DESIGN
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9342134322322546	WITHOUT_CLASSIFICATION	0.06578656776774537	DESIGN
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.999956042559077	WITHOUT_CLASSIFICATION	4.395744092306431E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9997391454520167	WITHOUT_CLASSIFICATION	2.6085454798336624E-4	DESIGN
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999795193017504	WITHOUT_CLASSIFICATION	2.0480698249613948E-5	DESIGN
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9988805388560424	WITHOUT_CLASSIFICATION	0.0011194611439575661	DESIGN
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.993079273052581	WITHOUT_CLASSIFICATION	0.006920726947418877	DESIGN
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9995854396529541	WITHOUT_CLASSIFICATION	4.145603470458364E-4	DESIGN
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9993156002413703	WITHOUT_CLASSIFICATION	6.843997586296641E-4	DESIGN
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9994367462245448	WITHOUT_CLASSIFICATION	5.632537754551582E-4	DESIGN
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9995488795631544	WITHOUT_CLASSIFICATION	4.511204368454991E-4	DESIGN
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9993795091328295	WITHOUT_CLASSIFICATION	6.204908671705179E-4	DESIGN
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.999969792949797	WITHOUT_CLASSIFICATION	3.0207050202890894E-5	DESIGN
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.7656003246248466	DESIGN	0.2343996753751534	WITHOUT_CLASSIFICATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.8972310343540945	WITHOUT_CLASSIFICATION	0.1027689656459055	DESIGN
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9728762341478696	WITHOUT_CLASSIFICATION	0.027123765852130447	DESIGN
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9998341144693199	WITHOUT_CLASSIFICATION	1.658855306800384E-4	DESIGN
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9570161639348786	WITHOUT_CLASSIFICATION	0.04298383606512145	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9998355410811148	WITHOUT_CLASSIFICATION	1.6445891888517295E-4	DESIGN
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999993540513058	WITHOUT_CLASSIFICATION	6.459486941171314E-7	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9977535698307598	WITHOUT_CLASSIFICATION	0.002246430169240237	DESIGN
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9991391759618349	WITHOUT_CLASSIFICATION	8.608240381650567E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999988714358272	WITHOUT_CLASSIFICATION	1.1285641727397718E-6	DESIGN
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.8129858854308329	WITHOUT_CLASSIFICATION	0.18701411456916706	DESIGN
//explicit = true;	WITHOUT_CLASSIFICATION	0.9998107233050655	WITHOUT_CLASSIFICATION	1.892766949344113E-4	DESIGN
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9997655828278005	WITHOUT_CLASSIFICATION	2.34417172199394E-4	DESIGN
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9995983788161205	WITHOUT_CLASSIFICATION	4.01621183879524E-4	DESIGN
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9970066820860872	WITHOUT_CLASSIFICATION	0.002993317913912833	DESIGN
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999385536518	WITHOUT_CLASSIFICATION	6.144634824246843E-8	DESIGN
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9994028950374234	WITHOUT_CLASSIFICATION	5.971049625765326E-4	DESIGN
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9971713162030108	WITHOUT_CLASSIFICATION	0.0028286837969890787	DESIGN
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9986701082249029	WITHOUT_CLASSIFICATION	0.0013298917750970652	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998413306762	WITHOUT_CLASSIFICATION	1.5866932384335726E-7	DESIGN
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.998677937002635	WITHOUT_CLASSIFICATION	0.0013220629973650494	DESIGN
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9997526856185179	WITHOUT_CLASSIFICATION	2.473143814820253E-4	DESIGN
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9990951900477731	WITHOUT_CLASSIFICATION	9.048099522267749E-4	DESIGN
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9994057949604432	WITHOUT_CLASSIFICATION	5.942050395568188E-4	DESIGN
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999991241840999	WITHOUT_CLASSIFICATION	8.758159000758058E-7	DESIGN
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9995889997480892	WITHOUT_CLASSIFICATION	4.110002519106818E-4	DESIGN
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9937569208454682	WITHOUT_CLASSIFICATION	0.0062430791545317965	DESIGN
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9998803557284982	WITHOUT_CLASSIFICATION	1.196442715018177E-4	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9995164145179432	WITHOUT_CLASSIFICATION	4.8358548205681403E-4	DESIGN
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9997214854322682	WITHOUT_CLASSIFICATION	2.7851456773179587E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9986951340681376	WITHOUT_CLASSIFICATION	0.001304865931862479	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.994374381990068	WITHOUT_CLASSIFICATION	0.005625618009932025	DESIGN
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9993298959923441	WITHOUT_CLASSIFICATION	6.701040076559791E-4	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9975927792691	WITHOUT_CLASSIFICATION	0.002407220730900053	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997904400832414	WITHOUT_CLASSIFICATION	2.095599167587389E-4	DESIGN
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9994723554371711	WITHOUT_CLASSIFICATION	5.276445628289474E-4	DESIGN
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9971958578595672	WITHOUT_CLASSIFICATION	0.0028041421404327973	DESIGN
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9978919279452294	WITHOUT_CLASSIFICATION	0.002108072054770602	DESIGN
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9997808579215106	WITHOUT_CLASSIFICATION	2.191420784895183E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997904400832414	WITHOUT_CLASSIFICATION	2.095599167587389E-4	DESIGN
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9899001931944578	WITHOUT_CLASSIFICATION	0.010099806805542216	DESIGN
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9437266028935477	DESIGN	0.05627339710645226	WITHOUT_CLASSIFICATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999912171872597	WITHOUT_CLASSIFICATION	8.782812740384163E-6	DESIGN
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.998768682486476	WITHOUT_CLASSIFICATION	0.0012313175135239198	DESIGN
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9993650537595485	WITHOUT_CLASSIFICATION	6.349462404513679E-4	DESIGN
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9405960712190877	WITHOUT_CLASSIFICATION	0.05940392878091228	DESIGN
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9962973812474508	WITHOUT_CLASSIFICATION	0.003702618752549048	DESIGN
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9915702304172536	WITHOUT_CLASSIFICATION	0.008429769582746506	DESIGN
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.997043066438964	WITHOUT_CLASSIFICATION	0.002956933561035994	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9970553688031853	WITHOUT_CLASSIFICATION	0.002944631196814593	DESIGN
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9965335174229586	WITHOUT_CLASSIFICATION	0.0034664825770414705	DESIGN
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9498934300920687	WITHOUT_CLASSIFICATION	0.05010656990793123	DESIGN
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9998932108655836	WITHOUT_CLASSIFICATION	1.0678913441649483E-4	DESIGN
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9998081799117774	WITHOUT_CLASSIFICATION	1.9182008822261939E-4	DESIGN
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9997527174197933	WITHOUT_CLASSIFICATION	2.472825802066354E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9654111582405441	WITHOUT_CLASSIFICATION	0.03458884175945581	DESIGN
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.999850774145858	WITHOUT_CLASSIFICATION	1.4922585414203575E-4	DESIGN
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999678361437643	WITHOUT_CLASSIFICATION	3.21638562356828E-5	DESIGN
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9989637798957234	WITHOUT_CLASSIFICATION	0.0010362201042766357	DESIGN
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.798973543445865	WITHOUT_CLASSIFICATION	0.20102645655413495	DESIGN
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9978721969375037	WITHOUT_CLASSIFICATION	0.002127803062496368	DESIGN
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999970669220171	WITHOUT_CLASSIFICATION	2.933077982976626E-6	DESIGN
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.967441785175236	WITHOUT_CLASSIFICATION	0.03255821482476402	DESIGN
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9988632023433709	WITHOUT_CLASSIFICATION	0.0011367976566291284	DESIGN
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999338947183368	WITHOUT_CLASSIFICATION	6.610528166317896E-5	DESIGN
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999900104476552	WITHOUT_CLASSIFICATION	9.989552344671854E-6	DESIGN
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9953324384043161	WITHOUT_CLASSIFICATION	0.004667561595683985	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9952567209632963	WITHOUT_CLASSIFICATION	0.004743279036703773	DESIGN
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.679037044790921	WITHOUT_CLASSIFICATION	0.320962955209079	DESIGN
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9856576157085156	WITHOUT_CLASSIFICATION	0.014342384291484336	DESIGN
// and perform the load	WITHOUT_CLASSIFICATION	0.9983727696304227	WITHOUT_CLASSIFICATION	0.0016272303695773801	DESIGN
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9990920224891741	WITHOUT_CLASSIFICATION	9.07977510825875E-4	DESIGN
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9986597347638908	WITHOUT_CLASSIFICATION	0.00134026523610926	DESIGN
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9989854673669271	WITHOUT_CLASSIFICATION	0.0010145326330729242	DESIGN
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999526942760215	WITHOUT_CLASSIFICATION	4.7305723978599634E-5	DESIGN
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9838955117857054	WITHOUT_CLASSIFICATION	0.016104488214294558	DESIGN
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9989508670361131	WITHOUT_CLASSIFICATION	0.0010491329638869075	DESIGN
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9931782407777683	WITHOUT_CLASSIFICATION	0.006821759222231772	DESIGN
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.997228808915407	WITHOUT_CLASSIFICATION	0.0027711910845930727	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999826431255443	WITHOUT_CLASSIFICATION	1.7356874455701275E-5	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9994362412387949	WITHOUT_CLASSIFICATION	5.637587612049927E-4	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9994362412387949	WITHOUT_CLASSIFICATION	5.637587612049927E-4	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9986297059758815	WITHOUT_CLASSIFICATION	0.0013702940241184314	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9998764419638465	WITHOUT_CLASSIFICATION	1.235580361534712E-4	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9997490231916919	WITHOUT_CLASSIFICATION	2.509768083081378E-4	DESIGN
/**	WITHOUT_CLASSIFICATION	0.853583738981781	DESIGN	0.14641626101821908	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9998531740034667	WITHOUT_CLASSIFICATION	1.468259965333366E-4	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9998531740034667	WITHOUT_CLASSIFICATION	1.468259965333366E-4	DESIGN
//        }	WITHOUT_CLASSIFICATION	0.9963118035721135	WITHOUT_CLASSIFICATION	0.0036881964278864727	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9974456402043763	WITHOUT_CLASSIFICATION	0.0025543597956236433	DESIGN
//	WITHOUT_CLASSIFICATION	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9998782212395166	WITHOUT_CLASSIFICATION	1.2177876048337423E-4	DESIGN
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999948322918119	WITHOUT_CLASSIFICATION	5.167708188164563E-6	DESIGN
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9998913218527999	WITHOUT_CLASSIFICATION	1.0867814720009347E-4	DESIGN
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999202696818595	WITHOUT_CLASSIFICATION	7.97303181404779E-5	DESIGN
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9984715973251898	WITHOUT_CLASSIFICATION	0.0015284026748102113	DESIGN
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.614691079098065	WITHOUT_CLASSIFICATION	0.3853089209019349	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999911660346078	WITHOUT_CLASSIFICATION	8.833965392195021E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999911660346078	WITHOUT_CLASSIFICATION	8.833965392195021E-5	DESIGN
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9994723554371711	WITHOUT_CLASSIFICATION	5.276445628289474E-4	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9990396373559052	WITHOUT_CLASSIFICATION	9.603626440947607E-4	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.999680647323741	WITHOUT_CLASSIFICATION	3.19352676258975E-4	DESIGN
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9978608777016109	WITHOUT_CLASSIFICATION	0.002139122298389153	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994764003916347	WITHOUT_CLASSIFICATION	5.235996083653435E-4	DESIGN
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.8266981753323975	WITHOUT_CLASSIFICATION	0.17330182466760247	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9879649676961012	WITHOUT_CLASSIFICATION	0.012035032303898852	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994764003916347	WITHOUT_CLASSIFICATION	5.235996083653435E-4	DESIGN
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999115666664665	WITHOUT_CLASSIFICATION	8.84333335334415E-5	DESIGN
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9995258796492433	WITHOUT_CLASSIFICATION	4.7412035075662277E-4	DESIGN
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9898400551174106	WITHOUT_CLASSIFICATION	0.010159944882589426	DESIGN
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9924545123684352	WITHOUT_CLASSIFICATION	0.007545487631564792	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9970553688031853	WITHOUT_CLASSIFICATION	0.002944631196814593	DESIGN
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.7642759873677003	DESIGN	0.23572401263229972	WITHOUT_CLASSIFICATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9890663790498122	WITHOUT_CLASSIFICATION	0.01093362095018784	DESIGN
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999580834318884	WITHOUT_CLASSIFICATION	4.191656811165988E-5	DESIGN
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999690846840381	WITHOUT_CLASSIFICATION	3.09153159619018E-5	DESIGN
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999360149467715	WITHOUT_CLASSIFICATION	6.398505322851421E-5	DESIGN
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9984540760903412	WITHOUT_CLASSIFICATION	0.0015459239096588767	DESIGN
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9374744925047703	WITHOUT_CLASSIFICATION	0.0625255074952296	DESIGN
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9992021802089512	WITHOUT_CLASSIFICATION	7.978197910487606E-4	DESIGN
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9984413021300771	WITHOUT_CLASSIFICATION	0.0015586978699228629	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9909722745884048	WITHOUT_CLASSIFICATION	0.009027725411595314	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9909722745884048	WITHOUT_CLASSIFICATION	0.009027725411595314	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9992312939198142	WITHOUT_CLASSIFICATION	7.687060801856939E-4	DESIGN
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999630527532755	WITHOUT_CLASSIFICATION	3.694724672454981E-5	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9991390912128632	WITHOUT_CLASSIFICATION	8.609087871369046E-4	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9995960787777913	WITHOUT_CLASSIFICATION	4.039212222087382E-4	DESIGN
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.638278661266318	WITHOUT_CLASSIFICATION	0.3617213387336819	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9994948207002996	WITHOUT_CLASSIFICATION	5.051792997003021E-4	DESIGN
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999685087901908	WITHOUT_CLASSIFICATION	3.1491209809097566E-5	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9986336741403204	WITHOUT_CLASSIFICATION	0.0013663258596795533	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999587653600798	WITHOUT_CLASSIFICATION	4.123463992028878E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9933311061118327	WITHOUT_CLASSIFICATION	0.006668893888167241	DESIGN
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9017519979376695	DESIGN	0.09824800206233052	WITHOUT_CLASSIFICATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999815267955796	WITHOUT_CLASSIFICATION	1.8473204420409847E-5	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999898396494271	WITHOUT_CLASSIFICATION	1.0160350572927726E-5	DESIGN
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.8664299938896644	WITHOUT_CLASSIFICATION	0.13357000611033573	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9982835185579974	WITHOUT_CLASSIFICATION	0.0017164814420026285	DESIGN
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9630452936218429	WITHOUT_CLASSIFICATION	0.03695470637815716	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9984314588007559	WITHOUT_CLASSIFICATION	0.0015685411992440448	DESIGN
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9973445811133275	WITHOUT_CLASSIFICATION	0.0026554188866725853	DESIGN
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9850711094043384	WITHOUT_CLASSIFICATION	0.01492889059566166	DESIGN
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9993556620656976	WITHOUT_CLASSIFICATION	6.443379343024465E-4	DESIGN
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999995328577891	WITHOUT_CLASSIFICATION	4.671422108293669E-7	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9994130435868116	WITHOUT_CLASSIFICATION	5.869564131884779E-4	DESIGN
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9984505275905862	WITHOUT_CLASSIFICATION	0.0015494724094138794	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9980094395429588	WITHOUT_CLASSIFICATION	0.0019905604570412167	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9980094395429588	WITHOUT_CLASSIFICATION	0.0019905604570412167	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999542998114563	WITHOUT_CLASSIFICATION	4.570018854360365E-5	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9995692693109914	WITHOUT_CLASSIFICATION	4.3073068900853056E-4	DESIGN
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9182960474906525	WITHOUT_CLASSIFICATION	0.08170395250934748	DESIGN
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9695753638096112	WITHOUT_CLASSIFICATION	0.030424636190388793	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9989244443842024	WITHOUT_CLASSIFICATION	0.0010755556157976073	DESIGN
// todo : what else to do here?	DESIGN	0.994999761968998	WITHOUT_CLASSIFICATION	0.005000238031002045	DESIGN
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.712445898813964	WITHOUT_CLASSIFICATION	0.28755410118603597	DESIGN
// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. // The need for it is intended to be alleviated with future developement, thus it is // not defined as an Environment constant... // // it is used to control whether we should consult the JDBC metadata to determine // certain Settings default values; it is useful to *not* do this when the database // may not be available (mainly in tools usage).	DESIGN	0.9997789233614148	DESIGN	2.210766385850831E-4	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.7290897591511045	WITHOUT_CLASSIFICATION	0.2709102408488954	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.7290897591511045	WITHOUT_CLASSIFICATION	0.2709102408488954	DESIGN
// todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9976354968494723	WITHOUT_CLASSIFICATION	0.0023645031505277595	DESIGN
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9999693237286104	WITHOUT_CLASSIFICATION	3.067627138963265E-5	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction.  no idea...	DESIGN	0.7532829759114872	WITHOUT_CLASSIFICATION	0.24671702408851287	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9990380310193083	DESIGN	9.619689806916204E-4	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9990380310193083	DESIGN	9.619689806916204E-4	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9986853773098326	DESIGN	0.0013146226901674014	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9986853773098326	DESIGN	0.0013146226901674014	WITHOUT_CLASSIFICATION
// TODO: I considered validating TS cache config here, // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used	DESIGN	0.9999877084832379	DESIGN	1.2291516761987163E-5	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9743332903695011	DESIGN	0.025666709630498833	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9743332903695011	DESIGN	0.025666709630498833	WITHOUT_CLASSIFICATION
// TODO Why not use the timestamp in a DataVersion?	DESIGN	0.9969663335713648	DESIGN	0.0030336664286351933	WITHOUT_CLASSIFICATION
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9999693237286104	WITHOUT_CLASSIFICATION	3.067627138963265E-5	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction. no idea...	DESIGN	0.7812390853575678	WITHOUT_CLASSIFICATION	0.21876091464243225	DESIGN
//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9987670657820741	WITHOUT_CLASSIFICATION	0.0012329342179258898	DESIGN
// turn hibernate.c3p0.* into c3p0.*, so c3p0 // gets a chance to see all hibernate.c3p0.*	DESIGN	0.9794360361581036	WITHOUT_CLASSIFICATION	0.020563963841896307	DESIGN
//TODO: this bit actually has to be called after all cascades! //      but since identity insert is called *synchronously*, //      instead of asynchronously as other actions, it isn't	DESIGN	0.8190901521479054	DESIGN	0.18090984785209455	WITHOUT_CLASSIFICATION
//TODO: reenable if we also fix the above todo	DESIGN	0.5020295252551188	DESIGN	0.4979704747448811	WITHOUT_CLASSIFICATION
//TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.9838183940221096	WITHOUT_CLASSIFICATION	0.016181605977890402	DESIGN
// we may be screwed here since the collection action is about to execute // and we do not know the final owner key value	DESIGN	0.9944035029829625	WITHOUT_CLASSIFICATION	0.005596497017037442	DESIGN
/** Create an action that will evict collection and entity regions based on queryspaces (table names).	DESIGN	0.9428682708747559	DESIGN	0.05713172912524411	WITHOUT_CLASSIFICATION
// todo : what else to do here?	DESIGN	0.994999761968998	WITHOUT_CLASSIFICATION	0.005000238031002045	DESIGN
// todo : modify the class definition if not already transformed...	DESIGN	0.998566070479384	WITHOUT_CLASSIFICATION	0.0014339295206160256	DESIGN
// todo : what else to do here?	DESIGN	0.994999761968998	WITHOUT_CLASSIFICATION	0.005000238031002045	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call start	DESIGN	0.9978394450937799	WITHOUT_CLASSIFICATION	0.0021605549062201587	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.9956399092367515	WITHOUT_CLASSIFICATION	0.004360090763248555	DESIGN
//TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.94008768102717	DESIGN	0.059912318972829906	WITHOUT_CLASSIFICATION
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.712445898813964	WITHOUT_CLASSIFICATION	0.28755410118603597	DESIGN
//TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.6067079157664471	WITHOUT_CLASSIFICATION	0.39329208423355294	DESIGN
//TODO: assumes all collections disassemble to an array!	DESIGN	0.9923546399581834	WITHOUT_CLASSIFICATION	0.007645360041816466	DESIGN
//TODO: reuse the PreLoadEvent	DESIGN	0.9185502683707328	WITHOUT_CLASSIFICATION	0.08144973162926715	DESIGN
// todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; // this should be refactored to instead expose a method to assemble a EntityEntry based on this // state for return.	DESIGN	0.8487338094224894	WITHOUT_CLASSIFICATION	0.15126619057751045	DESIGN
// todo : what is the implication of this?	DESIGN	0.9807832184781017	WITHOUT_CLASSIFICATION	0.019216781521898343	DESIGN
// use COUNT as the default.  This mimics the old behavior, although // NONE might be a better option moving forward in the case of callable	DESIGN	0.9237507356069709	WITHOUT_CLASSIFICATION	0.07624926439302918	DESIGN
/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a	DESIGN	0.9999459356719086	DESIGN	5.4064328091463695E-5	WITHOUT_CLASSIFICATION
//TODO: suck this into initLaziness!	DESIGN	0.5258595922028535	DESIGN	0.4741404077971465	WITHOUT_CLASSIFICATION
// we have to set up the table later!! yuck	DESIGN	0.9998583502669934	WITHOUT_CLASSIFICATION	1.4164973300655838E-4	DESIGN
//TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.6880801675596444	DESIGN	0.31191983244035554	WITHOUT_CLASSIFICATION
// todo : again, how *should* this work for non-pojo entities?	DESIGN	0.9918219237332552	WITHOUT_CLASSIFICATION	0.00817807626674484	DESIGN
// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.994894500260581	DESIGN	0.005105499739418895	WITHOUT_CLASSIFICATION
// This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.5954030142473695	WITHOUT_CLASSIFICATION	0.4045969857526304	DESIGN
//TODO: bad implementation, cos it depends upon ordering of mapping doc //      fixing this requires that Collection/PersistentClass gain access //      to the Mappings reference from Configuration (or the filterDefinitions //      map directly) sometime during Configuration.buildSessionFactory //      (after all the types/filter-defs are known and before building //      persisters).	DESIGN	0.5055878002120427	WITHOUT_CLASSIFICATION	0.4944121997879573	DESIGN
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.9907574646720171	DESIGN	0.009242535327983003	WITHOUT_CLASSIFICATION
// hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.999679099082753	WITHOUT_CLASSIFICATION	3.2090091724704817E-4	DESIGN
//FIXME: get the PersistentClass	DESIGN	0.9993329861850241	WITHOUT_CLASSIFICATION	6.670138149760315E-4	DESIGN
//FIXME: get the PersistentClass	DESIGN	0.9993329861850241	WITHOUT_CLASSIFICATION	6.670138149760315E-4	DESIGN
//Icky workaround for MySQL bug:	DESIGN	0.9458526994758654	DESIGN	0.054147300524134655	WITHOUT_CLASSIFICATION
//TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.6428326385225652	WITHOUT_CLASSIFICATION	0.3571673614774348	DESIGN
//TODO possibly relax that	DESIGN	0.7811653815126445	DESIGN	0.21883461848735558	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.7811653815126445	DESIGN	0.21883461848735558	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.7811653815126445	DESIGN	0.21883461848735558	WITHOUT_CLASSIFICATION
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.9907574646720171	DESIGN	0.009242535327983003	WITHOUT_CLASSIFICATION
//use a degenerated strategy for backward compatibility	DESIGN	0.9981321352565946	WITHOUT_CLASSIFICATION	0.0018678647434053495	DESIGN
// Sets can be just a view of a part of another collection. // do we need to copy it to be sure it won't be changing // underneath us? // ie. this.set.addAll(set);	DESIGN	0.8828856376559184	WITHOUT_CLASSIFICATION	0.11711436234408149	DESIGN
//note that i parameter is now unused (delete it?)	DESIGN	0.9143546204053693	DESIGN	0.08564537959463074	WITHOUT_CLASSIFICATION
//just to help out during the load (ugly, i know)	DESIGN	0.9979808581972162	WITHOUT_CLASSIFICATION	0.0020191418027837625	DESIGN
// TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.8594334353585353	WITHOUT_CLASSIFICATION	0.1405665646414647	DESIGN
// yick!  need this for proper serialization/deserialization handling...	DESIGN	0.9071697268100751	WITHOUT_CLASSIFICATION	0.09283027318992482	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.7290897591511045	WITHOUT_CLASSIFICATION	0.2709102408488954	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.7290897591511045	WITHOUT_CLASSIFICATION	0.2709102408488954	DESIGN
//yuck!	DESIGN	0.9990094494105661	WITHOUT_CLASSIFICATION	9.90550589433832E-4	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.7290897591511045	WITHOUT_CLASSIFICATION	0.2709102408488954	DESIGN
// TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9998647021017987	DESIGN	1.3529789820134646E-4	WITHOUT_CLASSIFICATION
//HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9982408973146669	WITHOUT_CLASSIFICATION	0.0017591026853330828	DESIGN
// does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.997773467865744	WITHOUT_CLASSIFICATION	0.0022265321342561074	DESIGN
// sql-server, at least needed this dropped after use; strange!	DESIGN	0.9980659294580542	WITHOUT_CLASSIFICATION	0.001934070541945729	DESIGN
// todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.99965439899126	WITHOUT_CLASSIFICATION	3.456010087400651E-4	DESIGN
// TBD should this be varbinary($1)? //	DESIGN	0.9379439865127709	WITHOUT_CLASSIFICATION	0.062056013487229215	DESIGN
// is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9987541269333641	WITHOUT_CLASSIFICATION	0.0012458730666359207	DESIGN
// xmlforest requires a new kind of function constructor	DESIGN	0.9991093269166442	WITHOUT_CLASSIFICATION	8.906730833558706E-4	DESIGN
// Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9419148367067078	WITHOUT_CLASSIFICATION	0.058085163293292164	DESIGN
// Do we need to qualify index names with the schema name?	DESIGN	0.9979458002775334	WITHOUT_CLASSIFICATION	0.002054199722466583	DESIGN
// Does this dialect support the UNIQUE column syntax?	DESIGN	0.9825986033052933	WITHOUT_CLASSIFICATION	0.01740139669470681	DESIGN
// Does this dialect support check constraints?	DESIGN	0.9476863474425139	WITHOUT_CLASSIFICATION	0.05231365255748606	DESIGN
// Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9292965457519069	WITHOUT_CLASSIFICATION	0.07070345424809317	DESIGN
// Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9096584700060689	WITHOUT_CLASSIFICATION	0.090341529993931	DESIGN
// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9096584700060689	WITHOUT_CLASSIFICATION	0.090341529993931	DESIGN
// Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.6525867531282552	DESIGN	0.34741324687174485	WITHOUT_CLASSIFICATION
//note there is a wierd implementation in the client side	DESIGN	0.9998758758831942	WITHOUT_CLASSIFICATION	1.2412411680582693E-4	DESIGN
//TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.9770705899331249	WITHOUT_CLASSIFICATION	0.022929410066875093	DESIGN
// todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.9991436250448729	WITHOUT_CLASSIFICATION	8.563749551271068E-4	DESIGN
// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.9983670683584689	WITHOUT_CLASSIFICATION	0.0016329316415310564	DESIGN
//TODO: should orphans really be deleted during lock???	DESIGN	0.8200685808604359	DESIGN	0.1799314191395642	WITHOUT_CLASSIFICATION
// orphans should not be deleted during merge??	DESIGN	0.981585074076192	WITHOUT_CLASSIFICATION	0.018414925923808053	DESIGN
// orphans should not be deleted during copy??	DESIGN	0.981585074076192	WITHOUT_CLASSIFICATION	0.018414925923808053	DESIGN
//I suppose?	DESIGN	0.9971669537300154	WITHOUT_CLASSIFICATION	0.002833046269984654	DESIGN
//TODO: suck this logic into the collection!	DESIGN	0.7387714695068939	WITHOUT_CLASSIFICATION	0.26122853049310624	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // get the ID from collection.getOwner()	DESIGN	0.9825494699645386	WITHOUT_CLASSIFICATION	0.01745053003546142	DESIGN
//TODO:refactor + make this method private	DESIGN	0.9836893949045769	WITHOUT_CLASSIFICATION	0.016310605095423158	DESIGN
// todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9966492711078672	WITHOUT_CLASSIFICATION	0.003350728892132913	DESIGN
//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.9464038296318277	DESIGN	0.05359617036817229	WITHOUT_CLASSIFICATION
//TODO: better to pass the id in as an argument?	DESIGN	0.9807725607961989	WITHOUT_CLASSIFICATION	0.01922743920380108	DESIGN
// todo : potentially look at optimizing these two arrays	DESIGN	0.990159754697282	WITHOUT_CLASSIFICATION	0.00984024530271803	DESIGN
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.9996801553747733	DESIGN	3.198446252267546E-4	WITHOUT_CLASSIFICATION
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.9996801553747733	DESIGN	3.198446252267546E-4	WITHOUT_CLASSIFICATION
//TODO: temporary	DESIGN	0.7953934614912914	DESIGN	0.2046065385087085	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.8286271681995849	DESIGN	0.17137283180041502	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.8286271681995849	DESIGN	0.17137283180041502	WITHOUT_CLASSIFICATION
//TODO: ugly here:	DESIGN	0.96488164428166	DESIGN	0.03511835571833999	WITHOUT_CLASSIFICATION
//this is kinda the best we can do...	DESIGN	0.9887808313182197	WITHOUT_CLASSIFICATION	0.011219168681780358	DESIGN
//TODO: this needn't exclude subclasses...	DESIGN	0.6532680844048104	WITHOUT_CLASSIFICATION	0.34673191559518957	DESIGN
// todo : need map? the prob is a proper key, right?	DESIGN	0.6479921393238359	DESIGN	0.35200786067616396	WITHOUT_CLASSIFICATION
// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9925088171396372	WITHOUT_CLASSIFICATION	0.007491182860362692	DESIGN
// todo : hack!!! // NOTE : here we cleanup the load context when we have no more local // LCE entries.  This "works" for the time being because really // only the collection load contexts are implemented.  Long term, // this cleanup should become part of the "close result set" // processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9925616868188079	WITHOUT_CLASSIFICATION	0.0074383131811920945	DESIGN
// todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.9634877799706718	DESIGN	0.03651222002932831	WITHOUT_CLASSIFICATION
// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.5181684945730793	WITHOUT_CLASSIFICATION	0.48183150542692055	DESIGN
// TODO : add this info to the translator and aggregate it here...	DESIGN	0.6676516032239549	DESIGN	0.33234839677604516	WITHOUT_CLASSIFICATION
//TODO: move into collection type, so we can use polymorphism!	DESIGN	0.9467763011582611	DESIGN	0.05322369884173904	WITHOUT_CLASSIFICATION
// todo : should we check the current isolation mode explicitly?	DESIGN	0.9991436250448729	WITHOUT_CLASSIFICATION	8.563749551271083E-4	DESIGN
//TODO: suck into event class	DESIGN	0.5983056880311317	WITHOUT_CLASSIFICATION	0.40169431196886835	DESIGN
//do we even really need this? the update will fail anyway....	DESIGN	0.9623804851031752	WITHOUT_CLASSIFICATION	0.037619514896824836	DESIGN
//hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.7446770735488668	WITHOUT_CLASSIFICATION	0.2553229264511333	DESIGN
//TODO: would it be better to do a refresh from db?	DESIGN	0.8988084106052758	DESIGN	0.10119158939472411	WITHOUT_CLASSIFICATION
//TODO: we use two visitors here, inefficient!	DESIGN	0.5524093204696722	DESIGN	0.4475906795303278	WITHOUT_CLASSIFICATION
// this class has no proxies (so do a shortcut)	DESIGN	0.9939736568160001	WITHOUT_CLASSIFICATION	0.006026343183999946	DESIGN
//PostLoad is needed for EJB3 //TODO: reuse the PostLoadEvent...	DESIGN	0.9341689031786629	WITHOUT_CLASSIFICATION	0.06583109682133705	DESIGN
//TODO: put this stuff back in to read snapshot from //      the second-level cache (needs some extra work)	DESIGN	0.7469960921221821	WITHOUT_CLASSIFICATION	0.25300390787781785	DESIGN
// null or brand new collection // this will also (inefficiently) handle arrays, which have // no snapshot, so we can't do any better	DESIGN	0.9953182203708406	WITHOUT_CLASSIFICATION	0.004681779629159395	DESIGN
//TODO: is this 100% correct?	DESIGN	0.9802596304445046	DESIGN	0.019740369555495376	WITHOUT_CLASSIFICATION
// TODO: iteratively get transient entities and retry merge until one of the following conditions: //       1) transientCopyCache.size() == 0 //       2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing // TODO: find out if retrying can add entities to copyCache (don't think it can...) // For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.5473480673332872	DESIGN	0.45265193266671266	WITHOUT_CLASSIFICATION
// entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9996269864436349	DESIGN	3.730135563651707E-4	WITHOUT_CLASSIFICATION
//TODO: we should throw an exception if we really *know* for sure   //      that this is a detached instance, rather than just assuming //throw new StaleObjectStateException(entityName, id);	DESIGN	0.9378112242674316	DESIGN	0.06218877573256844	WITHOUT_CLASSIFICATION
// TODO : perhaps we should additionally require that the incoming entity // version be equivalent to the defined unsaved-value?	DESIGN	0.988801242253154	DESIGN	0.011198757746845917	WITHOUT_CLASSIFICATION
// perhaps this should be an exception since it is only ever used // in the above method?	DESIGN	0.9685836539877611	DESIGN	0.0314163460122388	WITHOUT_CLASSIFICATION
// Put a placeholder in entries, so we don't recurse back and try to save() the // same object again. QUESTION: should this be done before onSave() is called? // likewise, should it be done before onUpdate()?	DESIGN	0.5875755104702339	DESIGN	0.41242448952976607	WITHOUT_CLASSIFICATION
//TODO: merge into one method!	DESIGN	0.5980744356413294	WITHOUT_CLASSIFICATION	0.40192556435867055	DESIGN
//TODO: refactor to .sql package	DESIGN	0.7965448814634956	DESIGN	0.20345511853650441	WITHOUT_CLASSIFICATION
/** * Provides query splitting methods, which were originally in QueryTranslator. * <br> * TODO: This will need to be refactored at some point. * * @author josh */	DESIGN	0.9998598185404148	DESIGN	1.401814595852147E-4	WITHOUT_CLASSIFICATION
//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.9205462171302276	DESIGN	0.07945378286977245	WITHOUT_CLASSIFICATION
// todo : temporary //      needed because currently persister is the one that //      creates and renders the join fragments for inheritence //      hierarchies...	DESIGN	0.9993073015318233	WITHOUT_CLASSIFICATION	6.926984681767241E-4	DESIGN
// TODO : better way?!?	DESIGN	0.9504816577423572	DESIGN	0.049518342257642935	WITHOUT_CLASSIFICATION
// Not possible to simply re-use the versionPropertyNode here as it causes // OOM errors due to circularity :(	DESIGN	0.9953053130735253	WITHOUT_CLASSIFICATION	0.004694686926474638	DESIGN
//TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.997350358045946	WITHOUT_CLASSIFICATION	0.0026496419540539633	DESIGN
// TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9997980108426283	DESIGN	2.0198915737159478E-4	WITHOUT_CLASSIFICATION
// even here, if only properties mapped to the "base table" are referenced // in the set and where clauses, this could be handled by the BasicDelegate. // TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9999830911264111	DESIGN	1.6908873588878077E-5	WITHOUT_CLASSIFICATION
//TODO: switch statements are always evil! We already had bugs because  //      of forgotten token types. Use polymorphism for this!	DESIGN	0.9951587779433185	WITHOUT_CLASSIFICATION	0.004841222056681514	DESIGN
// TODO : we really need to be able to deal with component paths here also; // this is difficult because the hql-sql grammar expects all those node types // to be FromReferenceNodes.  One potential fix here would be to convert the // IntoClause to just use a FromClause/FromElement combo (as a child of the // InsertStatement) and move all this logic into the InsertStatement.  That's // probably the easiest approach (read: least amount of changes to the grammar // and code), but just doesn't feel right as then an insert would contain // 2 from-clauses	DESIGN	0.9990179832710132	DESIGN	9.820167289868293E-4	WITHOUT_CLASSIFICATION
// really there are two situations where it should be ok to allow the insertion // into properties defined on a superclass: //      1) union-subclass with an abstract root entity //      2) discrim-subclass // // #1 is handled already because of the fact that // UnionSubclassPersister alreay always returns 0 // for this call... // // we may want to disallow it for discrim-subclass just for // consistency-sake (currently does not work anyway)...	DESIGN	0.6175564499789519	DESIGN	0.3824435500210481	WITHOUT_CLASSIFICATION
//yuck!	DESIGN	0.9990094494105661	WITHOUT_CLASSIFICATION	9.90550589433832E-4	DESIGN
// implicit joins are always(?) ok to reuse	DESIGN	0.9998585615059865	WITHOUT_CLASSIFICATION	1.4143849401349002E-4	DESIGN
// TODO : we may also want to check that the types here map to exactly one column/JDBC-type //      can't think of a situation where arithmetic expression between multi-column mappings //      makes any sense.	DESIGN	0.5490091151374368	WITHOUT_CLASSIFICATION	0.4509908848625633	DESIGN
// we do not know either type //BLIND GUESS!	DESIGN	0.9895071118915886	WITHOUT_CLASSIFICATION	0.010492888108411352	DESIGN
//TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999990726854099	DESIGN	9.273145901379013E-7	WITHOUT_CLASSIFICATION
// TODO: Replace this with a more elegant solution.	DESIGN	0.9991280464666398	DESIGN	8.719535333601592E-4	WITHOUT_CLASSIFICATION
// TODO: Should this really return null?  If not, figure out something better to do here.	DESIGN	0.9962243412968133	DESIGN	0.0037756587031866624	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.7290897591511045	WITHOUT_CLASSIFICATION	0.2709102408488954	DESIGN
// yuck!	DESIGN	0.9996646269668685	WITHOUT_CLASSIFICATION	3.3537303313144797E-4	DESIGN
// ignore it; the incoming property could not be found so we // cannot be sure what to do here.  At the very least, the // safest is to simply not apply any dereference toggling...	DESIGN	0.8526886675144617	DESIGN	0.14731133248553835	WITHOUT_CLASSIFICATION
// TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.6597705156347572	DESIGN	0.3402294843652428	WITHOUT_CLASSIFICATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character // the trim-source	DESIGN	0.9957407790943232	WITHOUT_CLASSIFICATION	0.00425922090567682	DESIGN
// todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.5861796322474934	WITHOUT_CLASSIFICATION	0.41382036775250675	DESIGN
//TODO: is this a bit ugly?	DESIGN	0.9769430277437298	DESIGN	0.02305697225627024	WITHOUT_CLASSIFICATION
// Need a better way to define the suffixes here...	DESIGN	0.9312497888569655	WITHOUT_CLASSIFICATION	0.06875021114303445	DESIGN
// TODO: something much better - look at the type of the other expression! // TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9990465232833102	DESIGN	9.534767166897063E-4	WITHOUT_CLASSIFICATION
// TODO : what amount of significant digits need to be supported here? //      - from the DecimalFormat docs: //          [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9032014592992723	DESIGN	0.0967985407007277	WITHOUT_CLASSIFICATION
// Needed the "clazz_" check to work around union-subclasses // TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9926936910253392	DESIGN	0.007306308974660763	WITHOUT_CLASSIFICATION
//We should actually rework this class to not implement Parser //and just process path expressions in the most convenient way.	DESIGN	0.8300091163226404	DESIGN	0.1699908836773596	WITHOUT_CLASSIFICATION
//The class is now way to complex!	DESIGN	0.9916555108389196	WITHOUT_CLASSIFICATION	0.008344489161080448	DESIGN
//TODO: get SQL rendering out of here	DESIGN	0.6733314818547376	WITHOUT_CLASSIFICATION	0.32666851814526254	DESIGN
//TODO: is there a better way?	DESIGN	0.9457980574096809	DESIGN	0.05420194259031898	WITHOUT_CLASSIFICATION
//Must be done here because of side-effect! yuck...	DESIGN	0.9974764407345914	WITHOUT_CLASSIFICATION	0.002523559265408548	DESIGN
//name from a super query (a bit inelegant that it shows up here)	DESIGN	0.9688132901968746	WITHOUT_CLASSIFICATION	0.031186709803125497	DESIGN
// We should reengineer this class so that, rather than the current ad - // hoc linear approach to processing a stream of tokens, we instead // build up a tree of expressions.	DESIGN	0.8178928751998904	WITHOUT_CLASSIFICATION	0.1821071248001096	DESIGN
// this is ugly here, but needed because its a subquery	DESIGN	0.9676634034336524	WITHOUT_CLASSIFICATION	0.03233659656634765	DESIGN
// unhappy about this being public ... is there a better way?	DESIGN	0.8307752991150683	WITHOUT_CLASSIFICATION	0.16922470088493166	DESIGN
// Make sure this is a defined parameter and check the incoming value type // TODO: what should be the actual exception type here?	DESIGN	0.9999529530227111	DESIGN	4.704697728879365E-5	WITHOUT_CLASSIFICATION
// TODO : this constructor form is *only* used from constructor directly below us; can it go away?	DESIGN	0.9998620144444513	DESIGN	1.379855555485538E-4	WITHOUT_CLASSIFICATION
//TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.8718384413321738	WITHOUT_CLASSIFICATION	0.1281615586678261	DESIGN
// TODO : should remove this exposure //  and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9916222209703457	DESIGN	0.008377779029654411	WITHOUT_CLASSIFICATION
// todo : should this get moved to PersistentContext? // logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.6436524250840733	WITHOUT_CLASSIFICATION	0.3563475749159267	DESIGN
// TODO: what type?	DESIGN	0.9538519980896103	DESIGN	0.046148001910389744	WITHOUT_CLASSIFICATION
// todo : should seriously consider not allowing a txn to begin from a child session //      can always route the request to the root session...	DESIGN	0.9870263945543569	WITHOUT_CLASSIFICATION	0.012973605445642982	DESIGN
// short-circuit for performance...	DESIGN	0.9994318204006194	WITHOUT_CLASSIFICATION	5.681795993805651E-4	DESIGN
// not absolutely necessary, but does help with aggressive release	DESIGN	0.9894781723042756	WITHOUT_CLASSIFICATION	0.010521827695724462	DESIGN
// TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.5452764163219654	DESIGN	0.45472358367803445	WITHOUT_CLASSIFICATION
//work around a bug in all known connection pools....	DESIGN	0.5964734477914345	WITHOUT_CLASSIFICATION	0.40352655220856537	DESIGN
// TODO : make this the factory for "entity mode related" sessions; // also means making this the target of transaction-synch and the // thing that knows how to cascade things between related sessions // // At that point, perhaps this thing is a "SessionContext", and // ConnectionManager is a "JDBCContext"?  A "SessionContext" should // live in the impl package...	DESIGN	0.9999835909610588	DESIGN	1.640903894120629E-5	WITHOUT_CLASSIFICATION
//TODO: does this really need to be here? //      does the collection already have //      it's own up-to-date snapshot?	DESIGN	0.9988381997243612	DESIGN	0.0011618002756388912	WITHOUT_CLASSIFICATION
//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9812551350248145	DESIGN	0.018744864975185405	WITHOUT_CLASSIFICATION
/**	DESIGN	0.853583738981781	DESIGN	0.14641626101821908	WITHOUT_CLASSIFICATION
// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; //      but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; //      currently this works in conjuction with the check on //      DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from //      cache with enabled filters). // EARLY EXIT!!!!!	DESIGN	0.5233703574954855	DESIGN	0.47662964250451445	WITHOUT_CLASSIFICATION
//for sets, we should end the collection load after resolving //the entities, since we might call hashCode() on the elements //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9959261987122796	DESIGN	0.004073801287720413	WITHOUT_CLASSIFICATION
//This is not very nice (and quite slow):	DESIGN	0.8468288682998608	DESIGN	0.1531711317001392	WITHOUT_CLASSIFICATION
//use of trim() here is ugly?	DESIGN	0.9934638419184583	WITHOUT_CLASSIFICATION	0.006536158081541683	DESIGN
//TODO: this is too conservative; if all preceding joins were  //      also inner joins, we could use an inner join here	DESIGN	0.9856268544253574	DESIGN	0.014373145574642561	WITHOUT_CLASSIFICATION
//TODO: look at the owning property and check that it  //      isn't lazy (by instrumentation)	DESIGN	0.6726231532087411	WITHOUT_CLASSIFICATION	0.3273768467912589	DESIGN
//TODO: inefficient	DESIGN	0.7701704861934823	WITHOUT_CLASSIFICATION	0.22982951380651767	DESIGN
// why does this matter?	DESIGN	0.9799092079307364	WITHOUT_CLASSIFICATION	0.02009079206926355	DESIGN
// from the collection of associations, locate OJA for the // ManyToOne corresponding to this persister to fully // define the many-to-many; we need that OJA so that we can // use its alias here // TODO : is there a better way here?	DESIGN	0.9999771467495299	DESIGN	2.285325047014864E-5	WITHOUT_CLASSIFICATION
//TODO: this class depends directly upon CriteriaImpl,  //      in the impl package ... add a CriteriaImplementor  //      interface	DESIGN	0.9864651657420004	DESIGN	0.013534834257999676	WITHOUT_CLASSIFICATION
//TODO: add a CriteriaImplementor interface //      this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.8450065141411126	DESIGN	0.1549934858588873	WITHOUT_CLASSIFICATION
// TODO : not so sure this is needed...	DESIGN	0.7255669309475548	DESIGN	0.27443306905244513	WITHOUT_CLASSIFICATION
// meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9993447059113811	WITHOUT_CLASSIFICATION	6.552940886188547E-4	DESIGN
// TODO: The order in which entities are saved may matter (e.g., a particular transient entity //       may need to be saved before other transient entities can be saved; //       Keep retrying the batch of transient entities until either: //       1) there are no transient entities left in transientCopyCache //       or 2) no transient entities were saved in the last batch // For now, just run through the transient entities and retry the merge	DESIGN	0.8545093824842656	WITHOUT_CLASSIFICATION	0.14549061751573453	DESIGN
// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9934751263897214	DESIGN	0.006524873610278639	WITHOUT_CLASSIFICATION
// todo : currently expects that the individual with expressions apply to the same sql table join. //      This may not be the case for joined-subclass where the property values //      might be coming from different tables in the joined hierarchy.  At some //      point we should expand this to support that capability.  However, that has //      some difficulties: //          1) the biggest is how to handle ORs when the individual comparisons are //              linked to different sql joins. //          2) here we would need to track each comparison individually, along with //              the join alias to which it applies and then pass that information //              back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.9550945017275988	WITHOUT_CLASSIFICATION	0.04490549827240121	DESIGN
// this function has a template -> restore output, apply the template and write the result out // TODO: Downcast to avoid using an interface?  Yuck.	DESIGN	0.9718511291675523	WITHOUT_CLASSIFICATION	0.02814887083244767	DESIGN
// at some point the generate phase needs to be moved out of here, // because a single object-level DML might spawn multiple SQL DML // command executions. // // Possible to just move the sql generation for dml stuff, but for // consistency-sake probably best to just move responsiblity for // the generation phase completely into the delegates // (QueryLoader/StatementExecutor) themselves.  Also, not sure why // QueryLoader currently even has a dependency on this at all; does // it need it?  Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9999998243780257	DESIGN	1.7562197438555785E-7	WITHOUT_CLASSIFICATION
// get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.9991483078161363	WITHOUT_CLASSIFICATION	8.516921838637721E-4	DESIGN
// TODO should we just collect these like with the collections above?	DESIGN	0.9973996424196953	DESIGN	0.0026003575803046934	WITHOUT_CLASSIFICATION
// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification // see the discussion there in DynamicFilterParameterSpecification's javadocs as to why // it is currently not done that way.	DESIGN	0.8089205620151757	WITHOUT_CLASSIFICATION	0.1910794379848243	DESIGN
/////////////////////////////////////////////////////////////////////////// // USED ONLY FOR REGRESSION TESTING!!!! // // todo : obviously get rid of all this junk ;) ///////////////////////////////////////////////////////////////////////////	DESIGN	0.9991596471592841	WITHOUT_CLASSIFICATION	8.403528407158012E-4	DESIGN
//create an index on the key columns??	DESIGN	0.9999665243087061	WITHOUT_CLASSIFICATION	3.347569129385813E-5	DESIGN
//TODO: deprecated, remove eventually	DESIGN	0.8487965417644525	WITHOUT_CLASSIFICATION	0.15120345823554746	DESIGN
//create an index on the key columns??	DESIGN	0.9999665243087061	WITHOUT_CLASSIFICATION	3.347569129385813E-5	DESIGN
//TODO: improve this hack!	DESIGN	0.9225539535297488	DESIGN	0.07744604647025125	WITHOUT_CLASSIFICATION
// inheritance cycle detection (paranoid check)	DESIGN	0.9987789543342764	WITHOUT_CLASSIFICATION	0.001221045665723541	DESIGN
//TODO: remove use of instanceof!	DESIGN	0.5971588994416263	DESIGN	0.40284110055837374	WITHOUT_CLASSIFICATION
//shortcut	DESIGN	0.9990545820474424	WITHOUT_CLASSIFICATION	9.454179525575966E-4	DESIGN
//TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.8294820016701285	WITHOUT_CLASSIFICATION	0.1705179983298714	DESIGN
// create an index on the key columns??	DESIGN	0.9999823807755172	WITHOUT_CLASSIFICATION	1.7619224482902433E-5	DESIGN
// todo : remove	DESIGN	0.998263319552178	WITHOUT_CLASSIFICATION	0.0017366804478220013	DESIGN
// todo : remove	DESIGN	0.998263319552178	WITHOUT_CLASSIFICATION	0.0017366804478220013	DESIGN
// todo : remove	DESIGN	0.998263319552178	WITHOUT_CLASSIFICATION	0.0017366804478220013	DESIGN
// todo : throw exception?	DESIGN	0.9994472412434267	WITHOUT_CLASSIFICATION	5.527587565733762E-4	DESIGN
// todo : throw exception?  maybe warn if not the same?	DESIGN	0.997494340601798	WITHOUT_CLASSIFICATION	0.002505659398202006	DESIGN
//TODO: make EntityPersister *not* depend on SessionFactoryImplementor //interface, if possible	DESIGN	0.5764210897779272	DESIGN	0.4235789102220728	WITHOUT_CLASSIFICATION
//TODO: is there a more elegant way than downcasting?	DESIGN	0.885466609481673	DESIGN	0.11453339051832707	WITHOUT_CLASSIFICATION
// TODO: encapsulate the protected instance variables!	DESIGN	0.9428661646432808	DESIGN	0.05713383535671919	WITHOUT_CLASSIFICATION
// should indicate that we are processing an INSERT/UPDATE/DELETE // query with a subquery implied via a collection property // function. Here, we need to use the table name itself as the // qualification alias. // TODO : verify this works for all databases... // TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.982718653237063	DESIGN	0.017281346762937015	WITHOUT_CLASSIFICATION
//TODO: copy/paste from insertRows()	DESIGN	0.8248921757998433	WITHOUT_CLASSIFICATION	0.17510782420015664	DESIGN
//TODO: copy/paste from recreate()	DESIGN	0.8248921757998433	WITHOUT_CLASSIFICATION	0.17510782420015664	DESIGN
//should this interface extend PropertyMapping?	DESIGN	0.9601932373830667	WITHOUT_CLASSIFICATION	0.0398067626169332	DESIGN
//ie. the subquery! yuck!	DESIGN	0.9984567459367422	WITHOUT_CLASSIFICATION	0.0015432540632579381	DESIGN
//TODO: move to .sql package!!	DESIGN	0.7939396499724422	DESIGN	0.20606035002755785	WITHOUT_CLASSIFICATION
//TODO: code duplication with SingleTableEntityPersister	DESIGN	0.5428632894689753	DESIGN	0.45713671053102467	WITHOUT_CLASSIFICATION
// TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9989222141423578	DESIGN	0.0010777858576420923	WITHOUT_CLASSIFICATION
//TODO: *two* hashmap lookups here is one too many...	DESIGN	0.6078071241639234	DESIGN	0.3921928758360767	WITHOUT_CLASSIFICATION
//TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.5428632894689753	DESIGN	0.45713671053102467	WITHOUT_CLASSIFICATION
//perhaps not really necessary...	DESIGN	0.9851937149091691	WITHOUT_CLASSIFICATION	0.014806285090830944	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.9883530425094919	WITHOUT_CLASSIFICATION	0.01164695749050817	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.9883530425094919	WITHOUT_CLASSIFICATION	0.01164695749050817	DESIGN
//TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.915923402192394	DESIGN	0.084076597807606	WITHOUT_CLASSIFICATION
//TODO: optimize this better!	DESIGN	0.5880146013742573	WITHOUT_CLASSIFICATION	0.4119853986257426	DESIGN
//TODO: should we allow suffixes on these ?	DESIGN	0.9951575996022232	DESIGN	0.004842400397776876	WITHOUT_CLASSIFICATION
//This is really ugly, but necessary:	DESIGN	0.9960561213328506	WITHOUT_CLASSIFICATION	0.003943878667149494	DESIGN
//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.6586441089901445	DESIGN	0.34135589100985547	WITHOUT_CLASSIFICATION
//TODO: disable batch loading if lockMode > READ?	DESIGN	0.9989689938479644	WITHOUT_CLASSIFICATION	0.0010310061520356225	DESIGN
// append the SQL to return the generated identifier //TODO: suck into Insert	DESIGN	0.9610760794150278	WITHOUT_CLASSIFICATION	0.03892392058497216	DESIGN
//TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.9859279528267931	DESIGN	0.014072047173206783	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.7510912063936789	DESIGN	0.24890879360632107	WITHOUT_CLASSIFICATION
//TODO: move to .sql package, and refactor with similar things!	DESIGN	0.8955278030338368	DESIGN	0.10447219696616325	WITHOUT_CLASSIFICATION
//TODO: implement functionality //  this might be painful to do here, as the "join post processing" for //  the subquery has already been performed (meaning that for //  theta-join dialects, the join conditions have already been moved //  over to the where clause).  A "simple" solution here might to //  perform "join post processing" once for the entire query (including //  any subqueries) at one fell swoop	DESIGN	0.999893138492194	DESIGN	1.0686150780605096E-4	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.9761008601205897	WITHOUT_CLASSIFICATION	0.023899139879410277	DESIGN
//kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9985482642675564	WITHOUT_CLASSIFICATION	0.0014517357324436192	DESIGN
//is this ok?	DESIGN	0.9774009503259418	WITHOUT_CLASSIFICATION	0.022599049674058277	DESIGN
//TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9998665347168059	DESIGN	1.3346528319421036E-4	WITHOUT_CLASSIFICATION
//TODO: make this a bit nicer	DESIGN	0.9629486599491436	DESIGN	0.03705134005085642	WITHOUT_CLASSIFICATION
//Yuck:	DESIGN	0.9990094494105661	WITHOUT_CLASSIFICATION	9.90550589433832E-4	DESIGN
//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.9993798045188976	DESIGN	6.201954811024418E-4	WITHOUT_CLASSIFICATION
/**	DESIGN	0.853583738981781	DESIGN	0.14641626101821908	WITHOUT_CLASSIFICATION
// TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.9933008655840995	DESIGN	0.006699134415900489	WITHOUT_CLASSIFICATION
//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.5932730503792768	DESIGN	0.40672694962072325	WITHOUT_CLASSIFICATION
//TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.596776237606687	WITHOUT_CLASSIFICATION	0.40322376239331303	DESIGN
// todo : YUCK!!!	DESIGN	0.9995461962027943	WITHOUT_CLASSIFICATION	4.5380379720563345E-4	DESIGN
// TODO : YUCK!!!  fix after HHH-1907 is complete	DESIGN	0.9830511774147873	DESIGN	0.016948822585212582	WITHOUT_CLASSIFICATION
//TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.8092990863959324	DESIGN	0.19070091360406755	WITHOUT_CLASSIFICATION
//TODO: design new lifecycle for ProxyFactory	DESIGN	0.8927678904940342	WITHOUT_CLASSIFICATION	0.1072321095059659	DESIGN
//TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.600321104708633	WITHOUT_CLASSIFICATION	0.399678895291367	DESIGN
// TODO: copy/paste from ManyToOneType	DESIGN	0.6236039207403609	DESIGN	0.37639607925963925	WITHOUT_CLASSIFICATION
//TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9542914849315434	DESIGN	0.04570851506845659	WITHOUT_CLASSIFICATION
//TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.9303751385193755	DESIGN	0.06962486148062456	WITHOUT_CLASSIFICATION
//TODO: implement caching?! proxies?!	DESIGN	0.6616040303614419	DESIGN	0.3383959696385582	WITHOUT_CLASSIFICATION
//TODO: is this right??	DESIGN	0.6320664828607755	DESIGN	0.3679335171392245	WITHOUT_CLASSIFICATION
// is this really necessary?	DESIGN	0.9611022041306623	WITHOUT_CLASSIFICATION	0.03889779586933761	DESIGN
//TODO: move these to a new JoinableType abstract class, //extended by EntityType and PersistentCollectionType:	DESIGN	0.9375140494262374	DESIGN	0.06248595057376256	WITHOUT_CLASSIFICATION
// TODO: this is very suboptimal for some subclasses (namely components), // since it does not take advantage of two-phase-load	DESIGN	0.9551777374292235	DESIGN	0.0448222625707765	WITHOUT_CLASSIFICATION
// worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.6980339961071281	DESIGN	0.30196600389287176	WITHOUT_CLASSIFICATION
// NOTE VERY HACKISH WORKAROUND!! // TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9602629695880017	DESIGN	0.03973703041199837	WITHOUT_CLASSIFICATION
// TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9605204343397261	DESIGN	0.0394795656602739	WITHOUT_CLASSIFICATION
// We would probably refactor to have LogicParser (builds a tree of simple // expressions connected by and, or, not), ExpressionParser (translates // from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like // FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much // the same thing it does now)	DESIGN	0.9969592410469487	WITHOUT_CLASSIFICATION	0.003040758953051376	DESIGN
//TODO: this is a little inefficient, don't need to do a whole //      deep replaceElements() call	DESIGN	0.9624289889744175	DESIGN	0.037571011025582496	WITHOUT_CLASSIFICATION
//workaround for WebLogic	DESIGN	0.9973888555737843	WITHOUT_CLASSIFICATION	0.00261114442621564	DESIGN
//TODO: this dependency is kinda Bad	DESIGN	0.9800382878221182	DESIGN	0.019961712177881747	WITHOUT_CLASSIFICATION
//ick!	DESIGN	0.9990094494105661	WITHOUT_CLASSIFICATION	9.90550589433832E-4	DESIGN
// short cut check...	DESIGN	0.9982638437980738	WITHOUT_CLASSIFICATION	0.001736156201926304	DESIGN
// todo : move to StringHelper?	DESIGN	0.9963082079464899	WITHOUT_CLASSIFICATION	0.0036917920535101656	DESIGN
//yukky! Don't you have subclasses for that! //TODO race conditions can happen here	DESIGN	0.833325482767374	DESIGN	0.1666745172326261	WITHOUT_CLASSIFICATION
//TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.9956559844402412	DESIGN	0.0043440155597588796	WITHOUT_CLASSIFICATION
// FIXME hack to work around fact that calling // Node added = root.addChild( fqn ); doesn't  // properly set the version on the node	DESIGN	0.9999375779732798	DESIGN	6.242202672025736E-5	WITHOUT_CLASSIFICATION
// TODO: I considered validating the presence of the TS cache here, // but decided to defer unti getQueryCacheInstance() in case the  // cache is never actually used	DESIGN	0.9999778361323277	DESIGN	2.2163867672368566E-5	WITHOUT_CLASSIFICATION
//need to do that here rather than in the save event listener to let //the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.934077077660317	DESIGN	0.0659229223396829	WITHOUT_CLASSIFICATION
//TODO: simply remove this override //      if we fix the above todos	DESIGN	0.9824588933200662	DESIGN	0.017541106679933808	WITHOUT_CLASSIFICATION
// This, is used by SessionFactoryImpl to hand to the generated SessionImpl; // was the only reason I could see that we cannot just use null as // Settings.cacheProvider	DESIGN	0.8288721036002344	WITHOUT_CLASSIFICATION	0.1711278963997656	DESIGN
// this is done here 'cos we might only know the type here (ugly!) // TODO: improve this a lot:	DESIGN	0.9998624458504752	DESIGN	1.375541495246597E-4	WITHOUT_CLASSIFICATION
// todo : would love to have this work on a notification basis //    where the successful binding of an entity/subclass would //    emit a notification which the extendsQueue entries could //    react to...	DESIGN	0.9936558653924054	WITHOUT_CLASSIFICATION	0.006344134607594639	DESIGN
// TODO : not sure the best way to handle this. // The non-performant way :	DESIGN	0.752919063506972	DESIGN	0.24708093649302804	WITHOUT_CLASSIFICATION
// would be better to use the element-type to determine // whether the old and the new are equal here; the problem being // we do not necessarily have access to the element type in all // cases	DESIGN	0.550259291857145	WITHOUT_CLASSIFICATION	0.4497407081428551	DESIGN
// This next bit is to allow for both unsaved-value="negative" // and for "older" behavior where version number did not get // seeded if it was already set in the object // TODO: shift it into unsaved-value strategy	DESIGN	0.9999258336631133	DESIGN	7.416633688672561E-5	WITHOUT_CLASSIFICATION
// merges don't cascade to uninitialized collections //	DESIGN	0.9997724750780033	WITHOUT_CLASSIFICATION	2.2752492199675683E-4	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // return collection.getOwner()	DESIGN	0.9833985016441692	WITHOUT_CLASSIFICATION	0.016601498355830867	DESIGN
//it is possible that the tree-walking in OuterJoinLoader can get to //an association defined by a subclass, in which case the property-ref //might refer to a property defined on a subclass of the current class //in this case, the table name is not known - this temporary solution  //assumes that the property-ref refers to a property of the subclass //table that the association belongs to (a reasonable guess) //TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.999986764458196	DESIGN	1.3235541804006588E-5	WITHOUT_CLASSIFICATION
// this only works because collection entries are kept in a sequenced // map by persistence context (maybe we should do like entities and // keep a separate sequences set...) //TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.9340969024861534	DESIGN	0.06590309751384661	WITHOUT_CLASSIFICATION
// important, to account for newly saved entities in query // todo : some kind of check for new status...	DESIGN	0.9996812690155193	WITHOUT_CLASSIFICATION	3.1873098448076474E-4	DESIGN
// brand new collection //TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.8575705099412723	WITHOUT_CLASSIFICATION	0.14242949005872774	DESIGN
//TODO: if object was an uninitialized proxy, this is inefficient, //      resulting in two SQL selects	DESIGN	0.9411049094350844	WITHOUT_CLASSIFICATION	0.058895090564915646	DESIGN
//before cascade! //TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9542914849315434	DESIGN	0.04570851506845659	WITHOUT_CLASSIFICATION
// TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.789755681931308	DESIGN	0.21024431806869204	WITHOUT_CLASSIFICATION
// todo : need to find a clean way to handle the "event source" role // a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... // passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.995580214809271	DESIGN	0.004419785190729119	WITHOUT_CLASSIFICATION
// todo : remove	DESIGN	0.998263319552178	WITHOUT_CLASSIFICATION	0.0017366804478220013	DESIGN
//aliasRefNode.resolve( false, false, aliasRefNode.getText() ); //TODO: is it kosher to do it here? //TODO: is it kosher to do it here?	DESIGN	0.5385108655408444	WITHOUT_CLASSIFICATION	0.4614891344591556	DESIGN
// No explicit select expression; render the id and properties // projection lists for every persister in the from clause into // a single 'token node'. //TODO: the only reason we need this stuff now is collection filters, //      we should get rid of derived select clause completely!	DESIGN	0.5810240066142106	WITHOUT_CLASSIFICATION	0.4189759933857894	DESIGN
// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; //      the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> //          the table info gotten here should really be self-contained (i.e., a class representation //          defining all the needed attributes), then we could then get an array of those	DESIGN	0.997919834556378	DESIGN	0.0020801654436220967	WITHOUT_CLASSIFICATION
// TODO: get SQL rendering out of here, create an AST for the join expressions. // Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9908922923678047	WITHOUT_CLASSIFICATION	0.009107707632195232	DESIGN
// TODO : this really needs to be delayed unitl after we definitively know all node types // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DESIGN	0.9913426002014382	DESIGN	0.0086573997985618	WITHOUT_CLASSIFICATION
// TODO: Figure out a better way to get the FROM elements in a proper tree structure. // If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.9952746132875568	DESIGN	0.004725386712443135	WITHOUT_CLASSIFICATION
// work around that crazy issue where the tree contains // "empty" FromElements (no text); afaict, this is caused // by FromElementFactory.createCollectionJoin()	DESIGN	0.7356393633023993	WITHOUT_CLASSIFICATION	0.26436063669760057	DESIGN
//TODO: this class does too many things! we need a different //kind of path expression parser for each of the diffferent //ways in which path expressions can occur	DESIGN	0.9592591001006932	DESIGN	0.0407408998993068	WITHOUT_CLASSIFICATION
//real hacky... // used to count the nesting of parentheses	DESIGN	0.988630596375024	WITHOUT_CLASSIFICATION	0.011369403624976014	DESIGN
// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; // currently not doable though because of the resultset-ref stuff...	DESIGN	0.7272149263578912	DESIGN	0.27278507364210874	WITHOUT_CLASSIFICATION
//for arrays, we should end the collection load before resolving //the entities, since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9402485885331319	DESIGN	0.05975141146686812	WITHOUT_CLASSIFICATION
// polymorphism not really handled completely correctly, // perhaps...well, actually its ok, assuming that the // entity name used in the lookup is the same as the // the one used here, which it will be	DESIGN	0.7823478597876493	WITHOUT_CLASSIFICATION	0.21765214021235066	DESIGN
// TODO: should "record" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9995711495213568	DESIGN	4.288504786431753E-4	WITHOUT_CLASSIFICATION
// VERY IMPORTANT!!!! - This class needs to be free of any static references // to any CGLIB or Javassist classes.  Otherwise, users will always need both // on their classpaths no matter which (if either) they use. // // Another option here would be to remove the Hibernate.isPropertyInitialized() // method and have the users go through the SessionFactory to get this information.	DESIGN	0.60936300493945	WITHOUT_CLASSIFICATION	0.39063699506055005	DESIGN
// TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).	DESIGN	0.9999999803522164	DESIGN	1.9647783588398367E-8	WITHOUT_CLASSIFICATION
//for backward compatibility, allow a set with no not-null  //element columns, using all columns in the row locater SQL //TODO: create an implicit not null constraint on all cols?	DESIGN	0.9501460573501173	WITHOUT_CLASSIFICATION	0.04985394264988282	DESIGN
//SPACES //TODO: i'm not sure, but perhaps we should exclude //      abstract denormalized tables?	DESIGN	0.9917708951557085	DESIGN	0.008229104844291514	WITHOUT_CLASSIFICATION
//workaround, for backward compatibility of sets with no //not-null columns, assume all columns are used in the //row locator SQL	DESIGN	0.9984285084623474	WITHOUT_CLASSIFICATION	0.001571491537652503	DESIGN
//note that this method could easily be moved up to BasicEntityPersister, //if we ever needed to reuse it from other subclasses	DESIGN	0.7385161439650187	DESIGN	0.2614838560349812	WITHOUT_CLASSIFICATION
//index += getPropertyColumnSpan( i ); //TODO:  this is kinda slow...	DESIGN	0.5633852866772958	WITHOUT_CLASSIFICATION	0.4366147133227041	DESIGN
//TODO: need some caching scheme? really comes down to decision  //      regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.8265101139741658	WITHOUT_CLASSIFICATION	0.17348988602583418	DESIGN
// TODO: here is why we need to make bytecode provider global :( // TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999999841639605	DESIGN	1.583603954535062E-8	WITHOUT_CLASSIFICATION
//TODO: Yuck! This is not quite good enough, it's a quick //hack around the problem of having a to-one association //that refers to an embedded component:	DESIGN	0.9997353835941054	DESIGN	2.646164058946682E-4	WITHOUT_CLASSIFICATION
// for DOM4J "collections" only // TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.9702198994223739	DESIGN	0.0297801005776262	WITHOUT_CLASSIFICATION
// would be great to move all this below here into another method that could also be used // from the new scrolling stuff. // // Would need to change the way the max-row stuff is handled (i.e. behind an interface) so // that I could do the control breaking at the means to know when to stop	DESIGN	0.9999999787398157	DESIGN	2.1260184262530396E-8	WITHOUT_CLASSIFICATION
//TODO: can we *always* use the "null property" approach for everything?	DESIGN	0.7382740981721708	DESIGN	0.2617259018278292	WITHOUT_CLASSIFICATION
//polymorphism comment above	DESIGN	0.9999103491603165	WITHOUT_CLASSIFICATION	8.965083968349508E-5	DESIGN
// some messy, complex stuff here, since createCriteria() can take an // aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999923874924567	WITHOUT_CLASSIFICATION	7.612507543290104E-6	DESIGN
//TODO: really bad, evil hack to fix!!!	DESIGN	0.9999952550617713	DESIGN	4.7449382286428636E-6	WITHOUT_CLASSIFICATION
// ugly hack for cases like "elements(foo.bar.collection)" // (multi-part path expression ending in elements or indices)	DESIGN	0.9933676634262922	DESIGN	0.006632336573707783	WITHOUT_CLASSIFICATION
// try block is a hack around fact that currently tuplizers are not // given the opportunity to resolve a subclass entity name.  this // allows the (we assume custom) interceptor the ability to // influence this decision if we were not able to based on the // given entityName	DESIGN	0.9999963823033259	DESIGN	3.617696673980324E-6	WITHOUT_CLASSIFICATION
/////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around "ghost" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially, look-ahead to the next FromElement that actually // writes something to the SQL	DESIGN	0.9754522710410076	DESIGN	0.024547728958992352	WITHOUT_CLASSIFICATION
//init the table here instead of earlier, so that we can get a quoted table name //TODO: would it be better to simply pass the qualified table name, instead of //      splitting it up into schema/catalog/table names	DESIGN	0.6598811990543889	WITHOUT_CLASSIFICATION	0.34011880094561103	DESIGN
// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method // I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so // if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.9547286655597225	DESIGN	0.045271334440277505	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.7510912063936789	DESIGN	0.24890879360632107	WITHOUT_CLASSIFICATION
//TODO: ideally we need the construction of PropertyAccessor to take the following: //      1) EntityMode //      2) EntityMode-specific data (i.e., the classname for pojo entities) //      3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) // The easiest way, with the introduction of the new runtime-metamodel classes, would be the // the following predicates: //      1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a //          org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property //      2) What is now termed a "PropertyAccessor" stores any values needed from those two //          pieces of information //      3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with //          PropertyAccessor.getSetter()	DESIGN	0.6702543264395392	DESIGN	0.3297456735604607	WITHOUT_CLASSIFICATION
//TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9831814009328714	DESIGN	0.016818599067128633	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.9761008601205897	WITHOUT_CLASSIFICATION	0.023899139879410277	DESIGN
//TODO: make this a bit nicer	DESIGN	0.9629486599491436	DESIGN	0.03705134005085642	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8335962383512557	WITHOUT_CLASSIFICATION	0.16640376164874424	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8335962383512557	WITHOUT_CLASSIFICATION	0.16640376164874424	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8335962383512557	WITHOUT_CLASSIFICATION	0.16640376164874424	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8335962383512557	WITHOUT_CLASSIFICATION	0.16640376164874424	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8335962383512557	WITHOUT_CLASSIFICATION	0.16640376164874424	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8335962383512557	WITHOUT_CLASSIFICATION	0.16640376164874424	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8335962383512557	WITHOUT_CLASSIFICATION	0.16640376164874424	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8335962383512557	WITHOUT_CLASSIFICATION	0.16640376164874424	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9990380310193083	DESIGN	9.619689806916204E-4	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9990380310193083	DESIGN	9.619689806916204E-4	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9990380310193083	DESIGN	9.619689806916204E-4	WITHOUT_CLASSIFICATION
// TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9981346756672694	DESIGN	0.0018653243327306074	WITHOUT_CLASSIFICATION
