//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9985981841366968	WITHOUT_CLASSIFICATION	0.0014018158633032189	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9998029501310098	WITHOUT_CLASSIFICATION	1.9704986899006228E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9998029501310098	WITHOUT_CLASSIFICATION	1.9704986899006228E-4	DESIGN
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9996734168570539	WITHOUT_CLASSIFICATION	3.265831429460365E-4	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999335678887987	WITHOUT_CLASSIFICATION	6.643211120127862E-5	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999986787787322	WITHOUT_CLASSIFICATION	1.3212212677779973E-6	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999986787787322	WITHOUT_CLASSIFICATION	1.3212212677779973E-6	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999713944071736	WITHOUT_CLASSIFICATION	2.8605592826328068E-5	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9994618992907308	WITHOUT_CLASSIFICATION	5.381007092692086E-4	DESIGN
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9998299348634048	WITHOUT_CLASSIFICATION	1.7006513659517097E-4	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9968590810766096	WITHOUT_CLASSIFICATION	0.003140918923390366	DESIGN
// double	WITHOUT_CLASSIFICATION	0.999980323868046	WITHOUT_CLASSIFICATION	1.9676131954047226E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.999980323868046	WITHOUT_CLASSIFICATION	1.9676131954047226E-5	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9996932166171972	WITHOUT_CLASSIFICATION	3.0678338280271957E-4	DESIGN
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9998593148791374	WITHOUT_CLASSIFICATION	1.4068512086266115E-4	DESIGN
// decode row selection...	WITHOUT_CLASSIFICATION	0.9998288974854415	WITHOUT_CLASSIFICATION	1.7110251455856803E-4	DESIGN
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9990646713361387	WITHOUT_CLASSIFICATION	9.353286638613397E-4	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9944123571106881	WITHOUT_CLASSIFICATION	0.005587642889311829	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// ROW ID	WITHOUT_CLASSIFICATION	0.9997509124947201	WITHOUT_CLASSIFICATION	2.4908750527979554E-4	DESIGN
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9977797730575928	WITHOUT_CLASSIFICATION	0.0022202269424073024	DESIGN
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999025334633638	WITHOUT_CLASSIFICATION	9.746653663619326E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9991885435659426	WITHOUT_CLASSIFICATION	8.114564340573454E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9991885435659426	WITHOUT_CLASSIFICATION	8.114564340573454E-4	DESIGN
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9981270288011042	WITHOUT_CLASSIFICATION	0.0018729711988957887	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9998239437267358	WITHOUT_CLASSIFICATION	1.7605627326414553E-4	DESIGN
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9981827323437904	WITHOUT_CLASSIFICATION	0.0018172676562095982	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.999246829205658	WITHOUT_CLASSIFICATION	7.531707943420147E-4	DESIGN
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.7987639753184103	DESIGN	0.20123602468158971	WITHOUT_CLASSIFICATION
/**	WITHOUT_CLASSIFICATION	0.5403020052265163	DESIGN	0.45969799477348366	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
/**	WITHOUT_CLASSIFICATION	0.5403020052265163	DESIGN	0.45969799477348366	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999448307056545	WITHOUT_CLASSIFICATION	5.516929434550171E-5	DESIGN
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9757276679795288	WITHOUT_CLASSIFICATION	0.024272332020471205	DESIGN
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9990742370081259	WITHOUT_CLASSIFICATION	9.25762991874114E-4	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9983388169891649	WITHOUT_CLASSIFICATION	0.0016611830108350428	DESIGN
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9997766636748242	WITHOUT_CLASSIFICATION	2.233363251758058E-4	DESIGN
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993327871956816	WITHOUT_CLASSIFICATION	6.67212804318324E-4	DESIGN
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995897187397381	WITHOUT_CLASSIFICATION	4.102812602618901E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9991237276807916	WITHOUT_CLASSIFICATION	8.762723192083751E-4	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9993675444271637	WITHOUT_CLASSIFICATION	6.324555728361998E-4	DESIGN
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9896357991323311	WITHOUT_CLASSIFICATION	0.010364200867668845	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9973334953925632	WITHOUT_CLASSIFICATION	0.0026665046074368015	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9993675444271637	WITHOUT_CLASSIFICATION	6.324555728361998E-4	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9973334953925632	WITHOUT_CLASSIFICATION	0.0026665046074368015	DESIGN
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9985521118533304	WITHOUT_CLASSIFICATION	0.0014478881466695904	DESIGN
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9928834515486478	DESIGN	0.007116548451352169	WITHOUT_CLASSIFICATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9914987911399094	WITHOUT_CLASSIFICATION	0.008501208860090698	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.998819588796854	WITHOUT_CLASSIFICATION	0.0011804112031459874	DESIGN
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9998269471541713	WITHOUT_CLASSIFICATION	1.730528458286841E-4	DESIGN
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9995162271785119	WITHOUT_CLASSIFICATION	4.8377282148822823E-4	DESIGN
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9981790996781676	WITHOUT_CLASSIFICATION	0.0018209003218323824	DESIGN
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9879514582043403	WITHOUT_CLASSIFICATION	0.012048541795659706	DESIGN
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9996630079641643	WITHOUT_CLASSIFICATION	3.3699203583569134E-4	DESIGN
// Never evict this node	WITHOUT_CLASSIFICATION	0.9983990775108676	WITHOUT_CLASSIFICATION	0.0016009224891323352	DESIGN
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.999538517858991	WITHOUT_CLASSIFICATION	4.61482141009104E-4	DESIGN
// 60 seconds	WITHOUT_CLASSIFICATION	0.9992510323942588	WITHOUT_CLASSIFICATION	7.489676057412612E-4	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9993777219605653	WITHOUT_CLASSIFICATION	6.222780394347599E-4	DESIGN
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9950583229667407	WITHOUT_CLASSIFICATION	0.004941677033259302	DESIGN
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9992730613480764	WITHOUT_CLASSIFICATION	7.269386519236379E-4	DESIGN
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999553849943456	WITHOUT_CLASSIFICATION	4.461500565434265E-5	DESIGN
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9981965400940853	WITHOUT_CLASSIFICATION	0.0018034599059146197	DESIGN
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999208786848808	WITHOUT_CLASSIFICATION	7.9121315119212E-5	DESIGN
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9997992923036209	WITHOUT_CLASSIFICATION	2.007076963791907E-4	DESIGN
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9998516689681196	WITHOUT_CLASSIFICATION	1.483310318803513E-4	DESIGN
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9978695885613432	WITHOUT_CLASSIFICATION	0.002130411438656782	DESIGN
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9993764881245438	WITHOUT_CLASSIFICATION	6.23511875456258E-4	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9988391290032682	WITHOUT_CLASSIFICATION	0.001160870996731882	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999791436609259	WITHOUT_CLASSIFICATION	2.085633907410756E-4	DESIGN
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9910095207855745	WITHOUT_CLASSIFICATION	0.008990479214425437	DESIGN
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9970473331178421	WITHOUT_CLASSIFICATION	0.00295266688215784	DESIGN
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9985824757095015	WITHOUT_CLASSIFICATION	0.00141752429049848	DESIGN
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9809541507274357	WITHOUT_CLASSIFICATION	0.019045849272564325	DESIGN
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9995974391784005	WITHOUT_CLASSIFICATION	4.0256082159951E-4	DESIGN
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999973293291732	WITHOUT_CLASSIFICATION	2.6706708268770073E-6	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.999996233077478	WITHOUT_CLASSIFICATION	3.7669225220245106E-6	DESIGN
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999561269759772	WITHOUT_CLASSIFICATION	4.387302402274749E-5	DESIGN
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9998062327653042	WITHOUT_CLASSIFICATION	1.937672346958928E-4	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9991663591784622	WITHOUT_CLASSIFICATION	8.336408215378602E-4	DESIGN
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9996725606127037	WITHOUT_CLASSIFICATION	3.2743938729621204E-4	DESIGN
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999928883343961	WITHOUT_CLASSIFICATION	7.111665603850072E-6	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9991663591784622	WITHOUT_CLASSIFICATION	8.336408215378602E-4	DESIGN
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999552290688154	WITHOUT_CLASSIFICATION	4.477093118455893E-5	DESIGN
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9991362491712263	WITHOUT_CLASSIFICATION	8.63750828773615E-4	DESIGN
// ignore!	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9988792680437971	WITHOUT_CLASSIFICATION	0.001120731956202952	DESIGN
// construct the cache	WITHOUT_CLASSIFICATION	0.9992895462690227	WITHOUT_CLASSIFICATION	7.104537309773277E-4	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.998745221298406	WITHOUT_CLASSIFICATION	0.0012547787015939878	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.998745221298406	WITHOUT_CLASSIFICATION	0.0012547787015939878	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.997339932432186	WITHOUT_CLASSIFICATION	0.0026600675678139524	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9998100122915847	WITHOUT_CLASSIFICATION	1.8998770841533732E-4	DESIGN
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9984859254587879	WITHOUT_CLASSIFICATION	0.001514074541212184	DESIGN
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.884780596012451	WITHOUT_CLASSIFICATION	0.11521940398754893	DESIGN
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9982963961822006	WITHOUT_CLASSIFICATION	0.001703603817799426	DESIGN
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9998632374631917	WITHOUT_CLASSIFICATION	1.3676253680825696E-4	DESIGN
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9996335926869652	WITHOUT_CLASSIFICATION	3.6640731303489696E-4	DESIGN
// return the connection	WITHOUT_CLASSIFICATION	0.9997157421598739	WITHOUT_CLASSIFICATION	2.8425784012606464E-4	DESIGN
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9998847618098882	WITHOUT_CLASSIFICATION	1.1523819011183826E-4	DESIGN
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999568716086034	WITHOUT_CLASSIFICATION	4.312839139664419E-5	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9995511905563631	WITHOUT_CLASSIFICATION	4.4880944363689566E-4	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9995511905563631	WITHOUT_CLASSIFICATION	4.4880944363689566E-4	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9993660951373096	WITHOUT_CLASSIFICATION	6.339048626905196E-4	DESIGN
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9994636265182358	WITHOUT_CLASSIFICATION	5.363734817642025E-4	DESIGN
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9997186452736204	WITHOUT_CLASSIFICATION	2.8135472637952385E-4	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9995511905563631	WITHOUT_CLASSIFICATION	4.4880944363689566E-4	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9993660951373096	WITHOUT_CLASSIFICATION	6.339048626905196E-4	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9993660951373096	WITHOUT_CLASSIFICATION	6.339048626905196E-4	DESIGN
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9992402379051488	WITHOUT_CLASSIFICATION	7.597620948512694E-4	DESIGN
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9753673766224971	WITHOUT_CLASSIFICATION	0.024632623377502903	DESIGN
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999996808044477	WITHOUT_CLASSIFICATION	3.1919555240410604E-7	DESIGN
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999628521551601	WITHOUT_CLASSIFICATION	3.714784483993561E-5	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.993098283226928	WITHOUT_CLASSIFICATION	0.006901716773072095	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.993098283226928	WITHOUT_CLASSIFICATION	0.006901716773072095	DESIGN
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9991272580137831	WITHOUT_CLASSIFICATION	8.727419862168618E-4	DESIGN
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9971269623421192	WITHOUT_CLASSIFICATION	0.002873037657880875	DESIGN
// default is POJO	WITHOUT_CLASSIFICATION	0.9993936814578566	WITHOUT_CLASSIFICATION	6.06318542143336E-4	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9995905665525295	WITHOUT_CLASSIFICATION	4.094334474704718E-4	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9995905665525295	WITHOUT_CLASSIFICATION	4.094334474704718E-4	DESIGN
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9973548098711726	WITHOUT_CLASSIFICATION	0.0026451901288273264	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9996712634436326	WITHOUT_CLASSIFICATION	3.287365563675101E-4	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9910272056502795	WITHOUT_CLASSIFICATION	0.008972794349720443	DESIGN
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.999997161235833	WITHOUT_CLASSIFICATION	2.838764167022282E-6	DESIGN
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9990641138500138	WITHOUT_CLASSIFICATION	9.358861499862821E-4	DESIGN
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9995714654756316	WITHOUT_CLASSIFICATION	4.285345243684488E-4	DESIGN
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9973675834603662	WITHOUT_CLASSIFICATION	0.002632416539633772	DESIGN
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9982140285557136	WITHOUT_CLASSIFICATION	0.0017859714442864	DESIGN
//sort first by role name	WITHOUT_CLASSIFICATION	0.9992219331670409	WITHOUT_CLASSIFICATION	7.780668329591194E-4	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9910272056502795	WITHOUT_CLASSIFICATION	0.008972794349720443	DESIGN
//then by fk	WITHOUT_CLASSIFICATION	0.9989964752331854	WITHOUT_CLASSIFICATION	0.0010035247668146359	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9990409973899548	WITHOUT_CLASSIFICATION	9.590026100452807E-4	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9990409973899548	WITHOUT_CLASSIFICATION	9.590026100452807E-4	DESIGN
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.7128783138734701	WITHOUT_CLASSIFICATION	0.28712168612652994	DESIGN
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9917693444494656	WITHOUT_CLASSIFICATION	0.008230655550534406	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9974839980632724	WITHOUT_CLASSIFICATION	0.0025160019367276433	DESIGN
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9907132149718102	WITHOUT_CLASSIFICATION	0.009286785028189803	DESIGN
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9994251431444073	WITHOUT_CLASSIFICATION	5.748568555926791E-4	DESIGN
//then by id	WITHOUT_CLASSIFICATION	0.9992825155977351	WITHOUT_CLASSIFICATION	7.174844022649332E-4	DESIGN
// to be safe...	WITHOUT_CLASSIFICATION	0.9981730132050963	WITHOUT_CLASSIFICATION	0.0018269867949036267	DESIGN
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9995691569800449	WITHOUT_CLASSIFICATION	4.308430199550728E-4	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999340301291176	WITHOUT_CLASSIFICATION	6.596987088234346E-5	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999340301291176	WITHOUT_CLASSIFICATION	6.596987088234346E-5	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9993813432229555	WITHOUT_CLASSIFICATION	6.186567770445241E-4	DESIGN
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9985981841366968	WITHOUT_CLASSIFICATION	0.0014018158633032189	DESIGN
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9995213485073438	WITHOUT_CLASSIFICATION	4.786514926561331E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// invokespecial	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9998029501310098	WITHOUT_CLASSIFICATION	1.9704986899006228E-4	DESIGN
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9997162190081395	WITHOUT_CLASSIFICATION	2.837809918606465E-4	DESIGN
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9995156425417033	WITHOUT_CLASSIFICATION	4.8435745829673594E-4	DESIGN
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9998694264627105	WITHOUT_CLASSIFICATION	1.30573537289619E-4	DESIGN
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9986220718691324	WITHOUT_CLASSIFICATION	0.0013779281308675744	DESIGN
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999198603133909	WITHOUT_CLASSIFICATION	8.013968660914417E-5	DESIGN
// new	WITHOUT_CLASSIFICATION	0.9998882172591461	WITHOUT_CLASSIFICATION	1.1178274085387274E-4	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9998464562537064	WITHOUT_CLASSIFICATION	1.5354374629365333E-4	DESIGN
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9998129838631887	WITHOUT_CLASSIFICATION	1.8701613681112005E-4	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
// aastore // args	WITHOUT_CLASSIFICATION	0.9986220718691324	WITHOUT_CLASSIFICATION	0.0013779281308675744	DESIGN
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9997998818526427	WITHOUT_CLASSIFICATION	2.0011814735735697E-4	DESIGN
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9998845939540961	WITHOUT_CLASSIFICATION	1.1540604590390935E-4	DESIGN
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999701299868243	WITHOUT_CLASSIFICATION	2.987001317571464E-5	DESIGN
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9997903825158433	WITHOUT_CLASSIFICATION	2.0961748415679565E-4	DESIGN
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9980243149317273	WITHOUT_CLASSIFICATION	0.0019756850682727074	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999986787787322	WITHOUT_CLASSIFICATION	1.3212212677779973E-6	DESIGN
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9939469413329214	WITHOUT_CLASSIFICATION	0.006053058667078582	DESIGN
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9995701913957015	WITHOUT_CLASSIFICATION	4.2980860429856676E-4	DESIGN
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.999855609414411	WITHOUT_CLASSIFICATION	1.4439058558904998E-4	DESIGN
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9996484830854496	WITHOUT_CLASSIFICATION	3.5151691455033684E-4	DESIGN
// iconst_i	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
// aaload	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9991789224275579	WITHOUT_CLASSIFICATION	8.21077572442026E-4	DESIGN
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9998565264397237	WITHOUT_CLASSIFICATION	1.4347356027626614E-4	DESIGN
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9995499978492793	WITHOUT_CLASSIFICATION	4.5000215072060783E-4	DESIGN
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999976273454128	WITHOUT_CLASSIFICATION	2.372654587270009E-6	DESIGN
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9827170885480659	WITHOUT_CLASSIFICATION	0.01728291145193413	DESIGN
// register in exception table	WITHOUT_CLASSIFICATION	0.9992188648117013	WITHOUT_CLASSIFICATION	7.811351882986115E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9998029501310098	WITHOUT_CLASSIFICATION	1.9704986899006228E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9998029501310098	WITHOUT_CLASSIFICATION	1.9704986899006228E-4	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9998464562537064	WITHOUT_CLASSIFICATION	1.5354374629365333E-4	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9991789224275579	WITHOUT_CLASSIFICATION	8.21077572442026E-4	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999713944071736	WITHOUT_CLASSIFICATION	2.8605592826328068E-5	DESIGN
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9998642259031058	WITHOUT_CLASSIFICATION	1.3577409689420177E-4	DESIGN
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9995339683192843	WITHOUT_CLASSIFICATION	4.6603168071573665E-4	DESIGN
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9997049182128016	WITHOUT_CLASSIFICATION	2.950817871982979E-4	DESIGN
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9998118519048326	WITHOUT_CLASSIFICATION	1.881480951675659E-4	DESIGN
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.999258832570182	WITHOUT_CLASSIFICATION	7.411674298179587E-4	DESIGN
// athrow	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9998348482924192	WITHOUT_CLASSIFICATION	1.6515170758069512E-4	DESIGN
//swallow	WITHOUT_CLASSIFICATION	0.9993675444271637	WITHOUT_CLASSIFICATION	6.324555728361998E-4	DESIGN
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9994607188389565	WITHOUT_CLASSIFICATION	5.392811610435552E-4	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9988999462741684	WITHOUT_CLASSIFICATION	0.0011000537258316157	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9988999462741684	WITHOUT_CLASSIFICATION	0.0011000537258316157	DESIGN
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9989259426955469	WITHOUT_CLASSIFICATION	0.001074057304453182	DESIGN
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9997002236418343	WITHOUT_CLASSIFICATION	2.997763581657518E-4	DESIGN
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9980271013097112	WITHOUT_CLASSIFICATION	0.0019728986902889183	DESIGN
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9996715991763341	WITHOUT_CLASSIFICATION	3.284008236658618E-4	DESIGN
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9994369494030138	WITHOUT_CLASSIFICATION	5.6305059698634E-4	DESIGN
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999505823338507	WITHOUT_CLASSIFICATION	4.941766614920852E-5	DESIGN
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9993960438358012	WITHOUT_CLASSIFICATION	6.03956164198924E-4	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9994618992907308	WITHOUT_CLASSIFICATION	5.381007092692086E-4	DESIGN
// ifnonnull	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.998850610401494	WITHOUT_CLASSIFICATION	0.0011493895985058922	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.998850610401494	WITHOUT_CLASSIFICATION	0.0011493895985058922	DESIGN
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.998850610401494	WITHOUT_CLASSIFICATION	0.0011493895985058922	DESIGN
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9996805632753814	WITHOUT_CLASSIFICATION	3.1943672461855796E-4	DESIGN
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.998850610401494	WITHOUT_CLASSIFICATION	0.0011493895985058922	DESIGN
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9986972836446305	WITHOUT_CLASSIFICATION	0.0013027163553694595	DESIGN
// int	WITHOUT_CLASSIFICATION	0.9999167221954652	WITHOUT_CLASSIFICATION	8.327780453468495E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9998029501310098	WITHOUT_CLASSIFICATION	1.9704986899006228E-4	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9998464562537064	WITHOUT_CLASSIFICATION	1.5354374629365333E-4	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9991789224275579	WITHOUT_CLASSIFICATION	8.21077572442026E-4	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9991789224275579	WITHOUT_CLASSIFICATION	8.21077572442026E-4	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999258832570182	WITHOUT_CLASSIFICATION	7.411674298179587E-4	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999258832570182	WITHOUT_CLASSIFICATION	7.411674298179587E-4	DESIGN
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.999525275300188	WITHOUT_CLASSIFICATION	4.747246998120599E-4	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// putfield	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
// return ;	WITHOUT_CLASSIFICATION	0.9990887800261763	WITHOUT_CLASSIFICATION	9.112199738237238E-4	DESIGN
// ldc // field name	WITHOUT_CLASSIFICATION	0.9987759062484729	WITHOUT_CLASSIFICATION	0.001224093751527103	DESIGN
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9997340798890222	WITHOUT_CLASSIFICATION	2.659201109778254E-4	DESIGN
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.999258832570182	WITHOUT_CLASSIFICATION	7.411674298179587E-4	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9968590810766096	WITHOUT_CLASSIFICATION	0.003140918923390366	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9968590810766096	WITHOUT_CLASSIFICATION	0.003140918923390366	DESIGN
// not array	WITHOUT_CLASSIFICATION	0.9978960252976551	WITHOUT_CLASSIFICATION	0.0021039747023449116	DESIGN
// array of reference type	WITHOUT_CLASSIFICATION	0.9993796498937639	WITHOUT_CLASSIFICATION	6.203501062360166E-4	DESIGN
// boolean	WITHOUT_CLASSIFICATION	0.9999210567914315	WITHOUT_CLASSIFICATION	7.894320856852146E-5	DESIGN
// byte	WITHOUT_CLASSIFICATION	0.9998808615381183	WITHOUT_CLASSIFICATION	1.1913846188171119E-4	DESIGN
// char	WITHOUT_CLASSIFICATION	0.9998980818203201	WITHOUT_CLASSIFICATION	1.0191817967984352E-4	DESIGN
// short	WITHOUT_CLASSIFICATION	0.9995962181814364	WITHOUT_CLASSIFICATION	4.037818185635871E-4	DESIGN
// double	WITHOUT_CLASSIFICATION	0.999980323868046	WITHOUT_CLASSIFICATION	1.9676131954047226E-5	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9998248108069223	WITHOUT_CLASSIFICATION	1.7518919307762395E-4	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9998248108069223	WITHOUT_CLASSIFICATION	1.7518919307762395E-4	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9996932166171972	WITHOUT_CLASSIFICATION	3.0678338280271957E-4	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9996932166171972	WITHOUT_CLASSIFICATION	3.0678338280271957E-4	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9971849826564538	WITHOUT_CLASSIFICATION	0.0028150173435462717	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9971849826564538	WITHOUT_CLASSIFICATION	0.0028150173435462717	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.998437753097842	WITHOUT_CLASSIFICATION	0.0015622469021579972	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.998437753097842	WITHOUT_CLASSIFICATION	0.0015622469021579972	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9968590810766096	WITHOUT_CLASSIFICATION	0.003140918923390366	DESIGN
// double	WITHOUT_CLASSIFICATION	0.999980323868046	WITHOUT_CLASSIFICATION	1.9676131954047226E-5	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9998248108069223	WITHOUT_CLASSIFICATION	1.7518919307762395E-4	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9998248108069223	WITHOUT_CLASSIFICATION	1.7518919307762395E-4	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9996932166171972	WITHOUT_CLASSIFICATION	3.0678338280271957E-4	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9971849826564538	WITHOUT_CLASSIFICATION	0.0028150173435462717	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9971849826564538	WITHOUT_CLASSIFICATION	0.0028150173435462717	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.998437753097842	WITHOUT_CLASSIFICATION	0.0015622469021579972	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9984900379361695	WITHOUT_CLASSIFICATION	0.001509962063830414	DESIGN
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.996639117806535	WITHOUT_CLASSIFICATION	0.00336088219346496	DESIGN
//decrement the lock	WITHOUT_CLASSIFICATION	0.997778379282975	WITHOUT_CLASSIFICATION	0.0022216207170250584	DESIGN
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.999766235496524	WITHOUT_CLASSIFICATION	2.3376450347605007E-4	DESIGN
//recache the updated state	WITHOUT_CLASSIFICATION	0.9993163762068491	WITHOUT_CLASSIFICATION	6.836237931507677E-4	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.999832766084922	WITHOUT_CLASSIFICATION	1.6723391507801488E-4	DESIGN
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999043298128822	WITHOUT_CLASSIFICATION	9.567018711765392E-5	DESIGN
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9894598689289086	WITHOUT_CLASSIFICATION	0.010540131071091302	DESIGN
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9997497126193953	WITHOUT_CLASSIFICATION	2.502873806047175E-4	DESIGN
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.991413176929203	WITHOUT_CLASSIFICATION	0.008586823070796931	DESIGN
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9998612914649575	WITHOUT_CLASSIFICATION	1.387085350425611E-4	DESIGN
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9998870095063213	WITHOUT_CLASSIFICATION	1.129904936787883E-4	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.997339932432186	WITHOUT_CLASSIFICATION	0.0026600675678139524	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.999832766084922	WITHOUT_CLASSIFICATION	1.6723391507801488E-4	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9993675444271637	WITHOUT_CLASSIFICATION	6.324555728361998E-4	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9993675444271637	WITHOUT_CLASSIFICATION	6.324555728361998E-4	DESIGN
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9935077201111387	WITHOUT_CLASSIFICATION	0.006492279888861271	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9991902351526366	WITHOUT_CLASSIFICATION	8.097648473633072E-4	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9991902351526366	WITHOUT_CLASSIFICATION	8.097648473633072E-4	DESIGN
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9956648142483582	WITHOUT_CLASSIFICATION	0.004335185751641744	DESIGN
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9995329155397984	WITHOUT_CLASSIFICATION	4.670844602015996E-4	DESIGN
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9909671680385392	WITHOUT_CLASSIFICATION	0.009032831961460836	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9991934597059633	WITHOUT_CLASSIFICATION	8.065402940367405E-4	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9991934597059633	WITHOUT_CLASSIFICATION	8.065402940367405E-4	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9944123571106881	WITHOUT_CLASSIFICATION	0.005587642889311829	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9991374867601951	WITHOUT_CLASSIFICATION	8.625132398048242E-4	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9991374867601951	WITHOUT_CLASSIFICATION	8.625132398048242E-4	DESIGN
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9957878469339929	WITHOUT_CLASSIFICATION	0.004212153066007128	DESIGN
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9984787235926629	WITHOUT_CLASSIFICATION	0.0015212764073370558	DESIGN
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.999025334633638	WITHOUT_CLASSIFICATION	9.746653663619326E-4	DESIGN
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
// MUTABLE	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// WHERE	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
// TODO:	WITHOUT_CLASSIFICATION	0.7402010157234482	WITHOUT_CLASSIFICATION	0.25979898427655185	DESIGN
// ID	WITHOUT_CLASSIFICATION	0.9997509124947201	WITHOUT_CLASSIFICATION	2.4908750527979554E-4	DESIGN
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9997670916423017	WITHOUT_CLASSIFICATION	2.3290835769815027E-4	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9998207555690843	WITHOUT_CLASSIFICATION	1.7924443091570338E-4	DESIGN
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9979404813072817	WITHOUT_CLASSIFICATION	0.0020595186927182857	DESIGN
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9963999235823504	WITHOUT_CLASSIFICATION	0.0036000764176495883	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.999246829205658	WITHOUT_CLASSIFICATION	7.531707943420147E-4	DESIGN
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9998909966080549	WITHOUT_CLASSIFICATION	1.0900339194507744E-4	DESIGN
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
// IMPORT	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.999525275300188	WITHOUT_CLASSIFICATION	4.747246998120599E-4	DESIGN
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.999525275300188	WITHOUT_CLASSIFICATION	4.747246998120599E-4	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9991839471049284	WITHOUT_CLASSIFICATION	8.16052895071653E-4	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999025334633638	WITHOUT_CLASSIFICATION	9.746653663619326E-4	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9996311316300986	WITHOUT_CLASSIFICATION	3.688683699013339E-4	DESIGN
// joined subclasses	WITHOUT_CLASSIFICATION	0.9994751709296282	WITHOUT_CLASSIFICATION	5.248290703718042E-4	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9998232954804697	WITHOUT_CLASSIFICATION	1.7670451953037745E-4	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9991839471049284	WITHOUT_CLASSIFICATION	8.16052895071653E-4	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9996311316300986	WITHOUT_CLASSIFICATION	3.688683699013339E-4	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9998232954804697	WITHOUT_CLASSIFICATION	1.7670451953037745E-4	DESIGN
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9991411677321783	WITHOUT_CLASSIFICATION	8.58832267821681E-4	DESIGN
// TABLENAME	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9991411677321783	WITHOUT_CLASSIFICATION	8.58832267821681E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9991885435659426	WITHOUT_CLASSIFICATION	8.114564340573454E-4	DESIGN
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
// column index	WITHOUT_CLASSIFICATION	0.9994416443726749	WITHOUT_CLASSIFICATION	5.583556273251254E-4	DESIGN
//column unique-key	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9988019585851821	WITHOUT_CLASSIFICATION	0.00119804141481788	DESIGN
// for an any	WITHOUT_CLASSIFICATION	0.9994452890589279	WITHOUT_CLASSIFICATION	5.547109410720963E-4	DESIGN
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999739202223881	WITHOUT_CLASSIFICATION	2.6079777611905306E-5	DESIGN
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999904943804159	WITHOUT_CLASSIFICATION	9.50561958410968E-5	DESIGN
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9997304738825077	WITHOUT_CLASSIFICATION	2.6952611749235934E-4	DESIGN
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999913979325638	WITHOUT_CLASSIFICATION	8.602067436219149E-6	DESIGN
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999904943804159	WITHOUT_CLASSIFICATION	9.50561958410968E-5	DESIGN
// ROLENAME	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9998239437267358	WITHOUT_CLASSIFICATION	1.7605627326414553E-4	DESIGN
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.999339715108932	WITHOUT_CLASSIFICATION	6.60284891068002E-4	DESIGN
// SORT	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9991839471049284	WITHOUT_CLASSIFICATION	8.16052895071653E-4	DESIGN
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.999258832570182	WITHOUT_CLASSIFICATION	7.411674298179587E-4	DESIGN
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9994679701472567	WITHOUT_CLASSIFICATION	5.320298527432234E-4	DESIGN
// set up second pass	WITHOUT_CLASSIFICATION	0.9999570507560122	WITHOUT_CLASSIFICATION	4.294924398777201E-5	DESIGN
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9505752728604371	WITHOUT_CLASSIFICATION	0.049424727139562974	DESIGN
// a nested composite element	WITHOUT_CLASSIFICATION	0.9945335011977414	WITHOUT_CLASSIFICATION	0.005466498802258549	DESIGN
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9988882490116939	WITHOUT_CLASSIFICATION	0.0011117509883060552	DESIGN
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9997296530713736	WITHOUT_CLASSIFICATION	2.7034692862636344E-4	DESIGN
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.999779190026707	WITHOUT_CLASSIFICATION	2.208099732929588E-4	DESIGN
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9983202755883487	WITHOUT_CLASSIFICATION	0.0016797244116513216	DESIGN
// GENERATOR	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9988483590296134	WITHOUT_CLASSIFICATION	0.0011516409703865615	DESIGN
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999525275300188	WITHOUT_CLASSIFICATION	4.747246998120599E-4	DESIGN
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9984745505609212	WITHOUT_CLASSIFICATION	0.0015254494390788476	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.999246829205658	WITHOUT_CLASSIFICATION	7.531707943420147E-4	DESIGN
// contained elements:	WITHOUT_CLASSIFICATION	0.9993894584294373	WITHOUT_CLASSIFICATION	6.105415705626829E-4	DESIGN
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9962103378587169	WITHOUT_CLASSIFICATION	0.0037896621412831116	DESIGN
// Bind the where	WITHOUT_CLASSIFICATION	0.9996749019842072	WITHOUT_CLASSIFICATION	3.2509801579285125E-4	DESIGN
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9994219626669258	WITHOUT_CLASSIFICATION	5.780373330741902E-4	DESIGN
// Bind the filters	WITHOUT_CLASSIFICATION	0.9994469998474135	WITHOUT_CLASSIFICATION	5.530001525865289E-4	DESIGN
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9987096308102014	WITHOUT_CLASSIFICATION	0.0012903691897987216	DESIGN
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999697358565753	WITHOUT_CLASSIFICATION	3.0264143424547253E-5	DESIGN
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9996798584879724	WITHOUT_CLASSIFICATION	3.201415120276933E-4	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.8395599601511482	DESIGN	0.1604400398488518	WITHOUT_CLASSIFICATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9993757921653117	WITHOUT_CLASSIFICATION	6.242078346883891E-4	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9980760383384923	WITHOUT_CLASSIFICATION	0.0019239616615077428	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9980760383384923	WITHOUT_CLASSIFICATION	0.0019239616615077428	DESIGN
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.998525190125926	WITHOUT_CLASSIFICATION	0.0014748098740740836	DESIGN
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9997901644686565	WITHOUT_CLASSIFICATION	2.0983553134345314E-4	DESIGN
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9990546368844242	WITHOUT_CLASSIFICATION	9.453631155757683E-4	DESIGN
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9995831002779126	WITHOUT_CLASSIFICATION	4.1689972208738254E-4	DESIGN
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9983174757873642	WITHOUT_CLASSIFICATION	0.0016825242126358294	DESIGN
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9952192350196885	WITHOUT_CLASSIFICATION	0.004780764980311445	DESIGN
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9997332651350177	WITHOUT_CLASSIFICATION	2.667348649822208E-4	DESIGN
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999867378177957	WITHOUT_CLASSIFICATION	1.3262182204398646E-5	DESIGN
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9985607722017611	WITHOUT_CLASSIFICATION	0.0014392277982389608	DESIGN
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9983128838662849	WITHOUT_CLASSIFICATION	0.0016871161337151694	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
//Schema export:	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9961553549009026	WITHOUT_CLASSIFICATION	0.003844645099097452	DESIGN
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9888834397672456	WITHOUT_CLASSIFICATION	0.011116560232754435	DESIGN
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9986957129945052	WITHOUT_CLASSIFICATION	0.001304287005494783	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997085015968991	WITHOUT_CLASSIFICATION	2.9149840310086183E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9729855221868081	WITHOUT_CLASSIFICATION	0.02701447781319181	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9697160710196585	WITHOUT_CLASSIFICATION	0.030283928980341438	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9998100154629228	WITHOUT_CLASSIFICATION	1.899845370772831E-4	DESIGN
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9936240225198198	WITHOUT_CLASSIFICATION	0.006375977480180207	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.994904392894183	WITHOUT_CLASSIFICATION	0.005095607105817053	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9998555684070534	WITHOUT_CLASSIFICATION	1.4443159294657326E-4	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9998555684070534	WITHOUT_CLASSIFICATION	1.4443159294657326E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9974552297743265	WITHOUT_CLASSIFICATION	0.0025447702256734712	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9974552297743265	WITHOUT_CLASSIFICATION	0.0025447702256734712	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.8395599601511482	DESIGN	0.1604400398488518	WITHOUT_CLASSIFICATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.7138921595486256	WITHOUT_CLASSIFICATION	0.28610784045137433	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9958795917021883	WITHOUT_CLASSIFICATION	0.004120408297811734	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9984947570974944	WITHOUT_CLASSIFICATION	0.0015052429025056299	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9993813432229555	WITHOUT_CLASSIFICATION	6.186567770445241E-4	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9958795917021883	WITHOUT_CLASSIFICATION	0.004120408297811734	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9984947570974944	WITHOUT_CLASSIFICATION	0.0015052429025056299	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9918400438125395	WITHOUT_CLASSIFICATION	0.00815995618746056	DESIGN
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9932006983817412	WITHOUT_CLASSIFICATION	0.006799301618258747	DESIGN
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9963562675759796	WITHOUT_CLASSIFICATION	0.00364373242402046	DESIGN
// the element has changed	WITHOUT_CLASSIFICATION	0.9997037606788521	WITHOUT_CLASSIFICATION	2.9623932114792163E-4	DESIGN
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9601281037854544	WITHOUT_CLASSIFICATION	0.039871896214545545	DESIGN
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.8317809930811939	WITHOUT_CLASSIFICATION	0.16821900691880617	DESIGN
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9996364338629975	WITHOUT_CLASSIFICATION	3.63566137002462E-4	DESIGN
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9979503835388748	WITHOUT_CLASSIFICATION	0.002049616461125244	DESIGN
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.999072282969788	WITHOUT_CLASSIFICATION	9.277170302120382E-4	DESIGN
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999929039511447	WITHOUT_CLASSIFICATION	7.096048855340073E-6	DESIGN
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9975720794114613	WITHOUT_CLASSIFICATION	0.002427920588538725	DESIGN
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9976800569554802	WITHOUT_CLASSIFICATION	0.0023199430445196493	DESIGN
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9997205477265192	WITHOUT_CLASSIFICATION	2.7945227348080475E-4	DESIGN
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9958652692167219	WITHOUT_CLASSIFICATION	0.004134730783278088	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9993813432229555	WITHOUT_CLASSIFICATION	6.186567770445241E-4	DESIGN
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9958652692167219	WITHOUT_CLASSIFICATION	0.004134730783278088	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9990394627761716	WITHOUT_CLASSIFICATION	9.605372238284336E-4	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9990394627761716	WITHOUT_CLASSIFICATION	9.605372238284336E-4	DESIGN
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.999919167258558	WITHOUT_CLASSIFICATION	8.083274144206932E-5	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9918400438125395	WITHOUT_CLASSIFICATION	0.00815995618746056	DESIGN
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9964528603392705	WITHOUT_CLASSIFICATION	0.003547139660729619	DESIGN
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.5929727489176135	DESIGN	0.4070272510823865	WITHOUT_CLASSIFICATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.5917710117362149	WITHOUT_CLASSIFICATION	0.40822898826378523	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9990100536435592	WITHOUT_CLASSIFICATION	9.899463564407237E-4	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.8726518290621859	WITHOUT_CLASSIFICATION	0.12734817093781414	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9918400438125395	WITHOUT_CLASSIFICATION	0.00815995618746056	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9990100536435592	WITHOUT_CLASSIFICATION	9.899463564407237E-4	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.8726518290621859	WITHOUT_CLASSIFICATION	0.12734817093781414	DESIGN
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9983968965592304	WITHOUT_CLASSIFICATION	0.0016031034407696359	DESIGN
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9995519982095838	WITHOUT_CLASSIFICATION	4.480017904161305E-4	DESIGN
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9989458133488613	WITHOUT_CLASSIFICATION	0.0010541866511386195	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9918400438125395	WITHOUT_CLASSIFICATION	0.00815995618746056	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9918400438125395	WITHOUT_CLASSIFICATION	0.00815995618746056	DESIGN
// from Map	WITHOUT_CLASSIFICATION	0.9991905574078971	WITHOUT_CLASSIFICATION	8.094425921028658E-4	DESIGN
// from SortedMap	WITHOUT_CLASSIFICATION	0.9990138162732011	WITHOUT_CLASSIFICATION	9.861837267988404E-4	DESIGN
//inject the data	WITHOUT_CLASSIFICATION	0.9969593595136367	WITHOUT_CLASSIFICATION	0.0030406404863633123	DESIGN
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997019992586781	WITHOUT_CLASSIFICATION	2.9800074132200805E-4	DESIGN
//default pool size 20	WITHOUT_CLASSIFICATION	0.9996207954574278	WITHOUT_CLASSIFICATION	3.792045425721455E-4	DESIGN
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999788047441899	WITHOUT_CLASSIFICATION	2.119525581014616E-5	DESIGN
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999704690953198	WITHOUT_CLASSIFICATION	2.9530904680105877E-5	DESIGN
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9987080342231048	WITHOUT_CLASSIFICATION	0.0012919657768950897	DESIGN
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9997709028114445	WITHOUT_CLASSIFICATION	2.2909718855538769E-4	DESIGN
// then bind it	WITHOUT_CLASSIFICATION	0.9994849565967898	WITHOUT_CLASSIFICATION	5.150434032101032E-4	DESIGN
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9698648293138017	WITHOUT_CLASSIFICATION	0.030135170686198365	DESIGN
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9905267532469524	WITHOUT_CLASSIFICATION	0.009473246753047627	DESIGN
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9996401185271108	WITHOUT_CLASSIFICATION	3.598814728891713E-4	DESIGN
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9981871310591683	WITHOUT_CLASSIFICATION	0.0018128689408316396	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992588732608839	WITHOUT_CLASSIFICATION	7.411267391160565E-4	DESIGN
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999602315879914	WITHOUT_CLASSIFICATION	3.9768412008652905E-5	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9983388169891649	WITHOUT_CLASSIFICATION	0.0016611830108350428	DESIGN
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9985022403715033	WITHOUT_CLASSIFICATION	0.0014977596284967462	DESIGN
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9963959982802201	WITHOUT_CLASSIFICATION	0.003604001719780045	DESIGN
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9984947570974944	WITHOUT_CLASSIFICATION	0.0015052429025056299	DESIGN
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9997795061399705	WITHOUT_CLASSIFICATION	2.204938600294532E-4	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9983388169891649	WITHOUT_CLASSIFICATION	0.0016611830108350428	DESIGN
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.999942714937965	WITHOUT_CLASSIFICATION	5.728506203490046E-5	DESIGN
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.8736366538567811	WITHOUT_CLASSIFICATION	0.12636334614321892	DESIGN
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9683983426361065	WITHOUT_CLASSIFICATION	0.0316016573638935	DESIGN
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9998737241464619	WITHOUT_CLASSIFICATION	1.2627585353805555E-4	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9973578499820122	WITHOUT_CLASSIFICATION	0.0026421500179878528	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9996953247529122	WITHOUT_CLASSIFICATION	3.0467524708780515E-4	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9958582669944055	WITHOUT_CLASSIFICATION	0.004141733005594586	DESIGN
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.999258832570182	WITHOUT_CLASSIFICATION	7.411674298179587E-4	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9989539497286252	WITHOUT_CLASSIFICATION	0.0010460502713748431	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993435798086892	WITHOUT_CLASSIFICATION	6.56420191310805E-4	DESIGN
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9993677196675894	WITHOUT_CLASSIFICATION	6.322803324105079E-4	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9997917697423344	WITHOUT_CLASSIFICATION	2.0823025766547682E-4	DESIGN
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9926392744994512	WITHOUT_CLASSIFICATION	0.007360725500548786	DESIGN
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9995406763358018	WITHOUT_CLASSIFICATION	4.5932366419823583E-4	DESIGN
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999075958732563	WITHOUT_CLASSIFICATION	9.240412674370321E-5	DESIGN
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978457355243873	WITHOUT_CLASSIFICATION	0.0021542644756126998	DESIGN
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9985331945363018	WITHOUT_CLASSIFICATION	0.0014668054636981164	DESIGN
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9991294186800044	WITHOUT_CLASSIFICATION	8.705813199955787E-4	DESIGN
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9973746649867555	WITHOUT_CLASSIFICATION	0.002625335013244431	DESIGN
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9939158820737546	WITHOUT_CLASSIFICATION	0.0060841179262454866	DESIGN
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9867642391539656	WITHOUT_CLASSIFICATION	0.013235760846034336	DESIGN
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9980310983106657	WITHOUT_CLASSIFICATION	0.001968901689334189	DESIGN
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9930817670747933	WITHOUT_CLASSIFICATION	0.006918232925206693	DESIGN
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9920264211902389	WITHOUT_CLASSIFICATION	0.007973578809761201	DESIGN
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9920264211902389	WITHOUT_CLASSIFICATION	0.007973578809761201	DESIGN
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986133752776684	WITHOUT_CLASSIFICATION	0.001386624722331656	DESIGN
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996171716884213	WITHOUT_CLASSIFICATION	3.828283115786225E-4	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979136849192128	WITHOUT_CLASSIFICATION	0.00208631508078725	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979136849192128	WITHOUT_CLASSIFICATION	0.00208631508078725	DESIGN
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979136849192128	WITHOUT_CLASSIFICATION	0.00208631508078725	DESIGN
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979136849192128	WITHOUT_CLASSIFICATION	0.00208631508078725	DESIGN
// by default we report no support	WITHOUT_CLASSIFICATION	0.9941927860867463	WITHOUT_CLASSIFICATION	0.005807213913253634	DESIGN
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9598135777095437	WITHOUT_CLASSIFICATION	0.040186422290456325	DESIGN
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994053880768998	WITHOUT_CLASSIFICATION	5.946119231002281E-4	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9873536705013568	WITHOUT_CLASSIFICATION	0.012646329498643305	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998078717884074	WITHOUT_CLASSIFICATION	0.001921282115925995	DESIGN
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991472499062581	WITHOUT_CLASSIFICATION	8.527500937419487E-4	DESIGN
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979136849192128	WITHOUT_CLASSIFICATION	0.00208631508078725	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979136849192128	WITHOUT_CLASSIFICATION	0.00208631508078725	DESIGN
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979763266724281	WITHOUT_CLASSIFICATION	0.0020236733275720052	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979136849192128	WITHOUT_CLASSIFICATION	0.00208631508078725	DESIGN
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.999831621052368	WITHOUT_CLASSIFICATION	1.6837894763188383E-4	DESIGN
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999258832570182	WITHOUT_CLASSIFICATION	7.411674298179587E-4	DESIGN
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.995694293861735	WITHOUT_CLASSIFICATION	0.00430570613826496	DESIGN
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9987873978627677	WITHOUT_CLASSIFICATION	0.0012126021372323547	DESIGN
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.7951701479299152	WITHOUT_CLASSIFICATION	0.20482985207008472	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9976346508867003	WITHOUT_CLASSIFICATION	0.0023653491132996085	DESIGN
//" cascade";	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9995038851547479	WITHOUT_CLASSIFICATION	4.961148452521521E-4	DESIGN
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9983968965592304	WITHOUT_CLASSIFICATION	0.0016031034407696359	DESIGN
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9995282371149612	WITHOUT_CLASSIFICATION	4.717628850388042E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993435798086892	WITHOUT_CLASSIFICATION	6.56420191310805E-4	DESIGN
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9994375335032247	WITHOUT_CLASSIFICATION	5.624664967753128E-4	DESIGN
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9992024979070372	WITHOUT_CLASSIFICATION	7.975020929627164E-4	DESIGN
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9820560840552154	WITHOUT_CLASSIFICATION	0.017943915944784613	DESIGN
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9952357516906654	WITHOUT_CLASSIFICATION	0.004764248309334564	DESIGN
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9987013739410658	WITHOUT_CLASSIFICATION	0.0012986260589341935	DESIGN
// HHH-2300	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9951025622896541	WITHOUT_CLASSIFICATION	0.004897437710345915	DESIGN
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992876776404892	WITHOUT_CLASSIFICATION	7.123223595107234E-4	DESIGN
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992661594829717	WITHOUT_CLASSIFICATION	7.338405170282626E-4	DESIGN
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993280620794126	WITHOUT_CLASSIFICATION	6.719379205874544E-4	DESIGN
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993128763188995	WITHOUT_CLASSIFICATION	6.871236811005035E-4	DESIGN
// not null is implicit	WITHOUT_CLASSIFICATION	0.9959329825392675	WITHOUT_CLASSIFICATION	0.004067017460732434	DESIGN
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9998706080936276	WITHOUT_CLASSIFICATION	1.2939190637239548E-4	DESIGN
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9997476700393025	WITHOUT_CLASSIFICATION	2.5232996069749E-4	DESIGN
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999994266463201	WITHOUT_CLASSIFICATION	5.733536799085588E-7	DESIGN
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999139280576259	WITHOUT_CLASSIFICATION	8.607194237411245E-4	DESIGN
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9991136246007006	WITHOUT_CLASSIFICATION	8.86375399299375E-4	DESIGN
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9988064572952194	WITHOUT_CLASSIFICATION	0.0011935427047805468	DESIGN
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9992701180695289	WITHOUT_CLASSIFICATION	7.298819304709486E-4	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9583415916544981	WITHOUT_CLASSIFICATION	0.04165840834550189	DESIGN
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9949924866126931	WITHOUT_CLASSIFICATION	0.005007513387306921	DESIGN
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9959634407680363	WITHOUT_CLASSIFICATION	0.004036559231963677	DESIGN
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999033733819326	WITHOUT_CLASSIFICATION	9.662661806734948E-5	DESIGN
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9968064559895609	WITHOUT_CLASSIFICATION	0.0031935440104391617	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993435798086892	WITHOUT_CLASSIFICATION	6.56420191310805E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9976346508867003	WITHOUT_CLASSIFICATION	0.0023653491132996085	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9941005647161267	WITHOUT_CLASSIFICATION	0.00589943528387322	DESIGN
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9998432657673815	WITHOUT_CLASSIFICATION	1.5673423261853542E-4	DESIGN
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9994632570543697	WITHOUT_CLASSIFICATION	5.367429456302682E-4	DESIGN
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9987873978627677	WITHOUT_CLASSIFICATION	0.0012126021372323547	DESIGN
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.999258832570182	WITHOUT_CLASSIFICATION	7.411674298179587E-4	DESIGN
// function templates	WITHOUT_CLASSIFICATION	0.9999367385901853	WITHOUT_CLASSIFICATION	6.326140981474112E-5	DESIGN
//not null is implicit	WITHOUT_CLASSIFICATION	0.9970525103097797	WITHOUT_CLASSIFICATION	0.002947489690220256	DESIGN
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999359641789732	WITHOUT_CLASSIFICATION	6.403582102672295E-5	DESIGN
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9995692372156239	WITHOUT_CLASSIFICATION	4.307627843761146E-4	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9997258548913499	WITHOUT_CLASSIFICATION	2.741451086501638E-4	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9991935525434517	WITHOUT_CLASSIFICATION	8.0644745654826E-4	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.999278571458989	WITHOUT_CLASSIFICATION	7.214285410110277E-4	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9996006110182458	WITHOUT_CLASSIFICATION	3.9938898175411776E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993435798086892	WITHOUT_CLASSIFICATION	6.56420191310805E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993435798086892	WITHOUT_CLASSIFICATION	6.56420191310805E-4	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9973237109288035	WITHOUT_CLASSIFICATION	0.0026762890711964464	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9997908581214897	WITHOUT_CLASSIFICATION	2.0914187851030027E-4	DESIGN
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9994496683057443	WITHOUT_CLASSIFICATION	5.503316942557094E-4	DESIGN
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9983968965592304	WITHOUT_CLASSIFICATION	0.0016031034407696359	DESIGN
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9987873978627677	WITHOUT_CLASSIFICATION	0.0012126021372323547	DESIGN
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9963290065839	WITHOUT_CLASSIFICATION	0.0036709934160999197	DESIGN
// add new ordered map	WITHOUT_CLASSIFICATION	0.9991122116693709	WITHOUT_CLASSIFICATION	8.877883306290017E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993435798086892	WITHOUT_CLASSIFICATION	6.56420191310805E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9995779772703555	WITHOUT_CLASSIFICATION	4.220227296444803E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.997083609931647	WITHOUT_CLASSIFICATION	0.00291639006835298	DESIGN
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9891416384936047	WITHOUT_CLASSIFICATION	0.010858361506395181	DESIGN
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9991467231020336	WITHOUT_CLASSIFICATION	8.532768979664665E-4	DESIGN
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.997407457532306	WITHOUT_CLASSIFICATION	0.002592542467693994	DESIGN
// No batch statements	WITHOUT_CLASSIFICATION	0.9999225169180057	WITHOUT_CLASSIFICATION	7.748308199431187E-5	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9977797730575928	WITHOUT_CLASSIFICATION	0.0022202269424073024	DESIGN
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9977913124735355	WITHOUT_CLASSIFICATION	0.002208687526464606	DESIGN
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9987241870316017	WITHOUT_CLASSIFICATION	0.0012758129683982935	DESIGN
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9987873978627677	WITHOUT_CLASSIFICATION	0.0012126021372323547	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9976346508867003	WITHOUT_CLASSIFICATION	0.0023653491132996085	DESIGN
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9850221090199449	WITHOUT_CLASSIFICATION	0.01497789098005505	DESIGN
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.999854987387507	WITHOUT_CLASSIFICATION	1.4501261249296775E-4	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9637999098468745	WITHOUT_CLASSIFICATION	0.036200090153125475	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9976346508867003	WITHOUT_CLASSIFICATION	0.0023653491132996085	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999379432055587	WITHOUT_CLASSIFICATION	6.20567944412543E-5	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9995779772703555	WITHOUT_CLASSIFICATION	4.220227296444803E-4	DESIGN
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9568963275691621	WITHOUT_CLASSIFICATION	0.043103672430837875	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993435798086892	WITHOUT_CLASSIFICATION	6.56420191310805E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9821780655748208	WITHOUT_CLASSIFICATION	0.017821934425179247	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993435798086892	WITHOUT_CLASSIFICATION	6.56420191310805E-4	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9987560257500089	WITHOUT_CLASSIFICATION	0.0012439742499911713	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9997258548913499	WITHOUT_CLASSIFICATION	2.741451086501638E-4	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9991935525434517	WITHOUT_CLASSIFICATION	8.0644745654826E-4	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.999278571458989	WITHOUT_CLASSIFICATION	7.214285410110277E-4	DESIGN
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.999993797278487	WITHOUT_CLASSIFICATION	6.202721512956653E-6	DESIGN
// add the main query	WITHOUT_CLASSIFICATION	0.9991455494369091	WITHOUT_CLASSIFICATION	8.544505630908677E-4	DESIGN
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9990499054545642	WITHOUT_CLASSIFICATION	9.500945454358389E-4	DESIGN
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9997116240353143	WITHOUT_CLASSIFICATION	2.883759646856449E-4	DESIGN
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9998744153726556	WITHOUT_CLASSIFICATION	1.25584627344377E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993435798086892	WITHOUT_CLASSIFICATION	6.56420191310805E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9976346508867003	WITHOUT_CLASSIFICATION	0.0023653491132996085	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9996006110182458	WITHOUT_CLASSIFICATION	3.9938898175411776E-4	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9973237109288035	WITHOUT_CLASSIFICATION	0.0026762890711964464	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999098766985317	WITHOUT_CLASSIFICATION	9.012330146831315E-4	DESIGN
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996304124840245	WITHOUT_CLASSIFICATION	3.6958751597546336E-4	DESIGN
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9997363664903081	WITHOUT_CLASSIFICATION	2.636335096919407E-4	DESIGN
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9973675834603662	WITHOUT_CLASSIFICATION	0.002632416539633772	DESIGN
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9991458207573162	WITHOUT_CLASSIFICATION	8.541792426837682E-4	DESIGN
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9934383664957516	WITHOUT_CLASSIFICATION	0.0065616335042484155	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979136849192128	WITHOUT_CLASSIFICATION	0.00208631508078725	DESIGN
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.992606964641129	WITHOUT_CLASSIFICATION	0.007393035358871051	DESIGN
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9782571463454689	WITHOUT_CLASSIFICATION	0.02174285365453106	DESIGN
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9965028048829756	WITHOUT_CLASSIFICATION	0.0034971951170243314	DESIGN
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9866423255075587	WITHOUT_CLASSIFICATION	0.013357674492441227	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.999525275300188	WITHOUT_CLASSIFICATION	4.747246998120599E-4	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979136849192128	WITHOUT_CLASSIFICATION	0.00208631508078725	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979136849192128	WITHOUT_CLASSIFICATION	0.00208631508078725	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9873536705013568	WITHOUT_CLASSIFICATION	0.012646329498643305	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.999525275300188	WITHOUT_CLASSIFICATION	4.747246998120599E-4	DESIGN
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.979566348978421	WITHOUT_CLASSIFICATION	0.020433651021578954	DESIGN
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9967553005614264	WITHOUT_CLASSIFICATION	0.0032446994385737626	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978525900788145	WITHOUT_CLASSIFICATION	0.002147409921185487	DESIGN
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979136849192128	WITHOUT_CLASSIFICATION	0.00208631508078725	DESIGN
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9473455371845589	WITHOUT_CLASSIFICATION	0.052654462815441026	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993435798086892	WITHOUT_CLASSIFICATION	6.56420191310805E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993435798086892	WITHOUT_CLASSIFICATION	6.56420191310805E-4	DESIGN
/*<String>*/	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998078717884074	WITHOUT_CLASSIFICATION	0.001921282115925995	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979136849192128	WITHOUT_CLASSIFICATION	0.00208631508078725	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9583415916544981	WITHOUT_CLASSIFICATION	0.04165840834550189	DESIGN
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9665827432366629	WITHOUT_CLASSIFICATION	0.03341725676333703	DESIGN
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9953567954921566	WITHOUT_CLASSIFICATION	0.004643204507843355	DESIGN
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.99990726845457	WITHOUT_CLASSIFICATION	9.273154543005852E-5	DESIGN
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9986189692637427	WITHOUT_CLASSIFICATION	0.0013810307362572636	DESIGN
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9987311205585676	WITHOUT_CLASSIFICATION	0.0012688794414323905	DESIGN
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9969505875786623	WITHOUT_CLASSIFICATION	0.0030494124213377542	DESIGN
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9986073299530354	WITHOUT_CLASSIFICATION	0.001392670046964644	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9989539497286252	WITHOUT_CLASSIFICATION	0.0010460502713748431	DESIGN
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9995401746306994	WITHOUT_CLASSIFICATION	4.5982536930048887E-4	DESIGN
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9982685721725065	WITHOUT_CLASSIFICATION	0.0017314278274934106	DESIGN
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9974683274825409	WITHOUT_CLASSIFICATION	0.002531672517459185	DESIGN
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999040292710989	WITHOUT_CLASSIFICATION	9.597072890120769E-5	DESIGN
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9998090236201875	WITHOUT_CLASSIFICATION	1.9097637981245908E-4	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9981154350068923	WITHOUT_CLASSIFICATION	0.001884564993107722	DESIGN
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994709161794867	WITHOUT_CLASSIFICATION	5.290838205132625E-4	DESIGN
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993268399146735	WITHOUT_CLASSIFICATION	6.73160085326421E-4	DESIGN
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9990319846938283	WITHOUT_CLASSIFICATION	9.680153061717686E-4	DESIGN
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9928300612823415	WITHOUT_CLASSIFICATION	0.007169938717658547	DESIGN
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9983127645036872	WITHOUT_CLASSIFICATION	0.0016872354963128357	DESIGN
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9992071321371291	WITHOUT_CLASSIFICATION	7.928678628709671E-4	DESIGN
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9993647132554168	WITHOUT_CLASSIFICATION	6.352867445831824E-4	DESIGN
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9990511937475309	WITHOUT_CLASSIFICATION	9.488062524690449E-4	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9993813061664425	WITHOUT_CLASSIFICATION	6.186938335575516E-4	DESIGN
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.992998616319392	WITHOUT_CLASSIFICATION	0.0070013836806080264	DESIGN
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9932011029702849	WITHOUT_CLASSIFICATION	0.006798897029715231	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9990511937475309	WITHOUT_CLASSIFICATION	9.488062524690449E-4	DESIGN
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9990512936630437	WITHOUT_CLASSIFICATION	9.487063369563827E-4	DESIGN
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999054880145646	WITHOUT_CLASSIFICATION	9.45119854354019E-4	DESIGN
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995919993040656	WITHOUT_CLASSIFICATION	4.080006959343022E-4	DESIGN
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9997281151524963	WITHOUT_CLASSIFICATION	2.718848475037234E-4	DESIGN
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9165588571011389	WITHOUT_CLASSIFICATION	0.08344114289886097	DESIGN
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9987101189775405	WITHOUT_CLASSIFICATION	0.0012898810224595196	DESIGN
// continue loop	WITHOUT_CLASSIFICATION	0.9998611265121052	WITHOUT_CLASSIFICATION	1.3887348789478685E-4	DESIGN
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.999739828613076	WITHOUT_CLASSIFICATION	2.601713869240571E-4	DESIGN
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.999739828613076	WITHOUT_CLASSIFICATION	2.601713869240571E-4	DESIGN
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9998930128167935	WITHOUT_CLASSIFICATION	1.0698718320649057E-4	DESIGN
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9998196446264372	WITHOUT_CLASSIFICATION	1.8035537356286845E-4	DESIGN
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9963571234225767	WITHOUT_CLASSIFICATION	0.0036428765774234213	DESIGN
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999942951653933	WITHOUT_CLASSIFICATION	5.704834606728023E-6	DESIGN
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999547725516513	WITHOUT_CLASSIFICATION	4.522744834871796E-5	DESIGN
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9991073695372645	WITHOUT_CLASSIFICATION	8.926304627353933E-4	DESIGN
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9988252995753737	WITHOUT_CLASSIFICATION	0.001174700424626229	DESIGN
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9995399762983547	WITHOUT_CLASSIFICATION	4.600237016453088E-4	DESIGN
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9997089234257417	WITHOUT_CLASSIFICATION	2.91076574258382E-4	DESIGN
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999128351331426	WITHOUT_CLASSIFICATION	8.71648668574764E-5	DESIGN
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999641074515588	WITHOUT_CLASSIFICATION	3.589254844119497E-5	DESIGN
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999569781162058	WITHOUT_CLASSIFICATION	4.3021883794274974E-5	DESIGN
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9986352634031116	WITHOUT_CLASSIFICATION	0.0013647365968884955	DESIGN
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9954398513666298	WITHOUT_CLASSIFICATION	0.0045601486333702096	DESIGN
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9966614780972556	WITHOUT_CLASSIFICATION	0.0033385219027444305	DESIGN
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9978794741892594	WITHOUT_CLASSIFICATION	0.00212052581074068	DESIGN
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9985750001005207	WITHOUT_CLASSIFICATION	0.0014249998994793278	DESIGN
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9881944707805599	WITHOUT_CLASSIFICATION	0.011805529219440069	DESIGN
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9989261122632838	WITHOUT_CLASSIFICATION	0.0010738877367161433	DESIGN
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.999751178335548	WITHOUT_CLASSIFICATION	2.4882166445196305E-4	DESIGN
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999415684275185	WITHOUT_CLASSIFICATION	5.8431572481389025E-5	DESIGN
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9997466687045893	WITHOUT_CLASSIFICATION	2.5333129541068314E-4	DESIGN
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999092491799261	WITHOUT_CLASSIFICATION	9.075082007391275E-5	DESIGN
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999787561246616	WITHOUT_CLASSIFICATION	2.1243875338382622E-5	DESIGN
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9997745466877315	WITHOUT_CLASSIFICATION	2.2545331226858013E-4	DESIGN
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9997468730045119	WITHOUT_CLASSIFICATION	2.531269954880538E-4	DESIGN
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9976630932285091	WITHOUT_CLASSIFICATION	0.0023369067714908705	DESIGN
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9986855329929443	WITHOUT_CLASSIFICATION	0.0013144670070557797	DESIGN
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9857589258275635	WITHOUT_CLASSIFICATION	0.014241074172436469	DESIGN
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9992050360323356	WITHOUT_CLASSIFICATION	7.9496396766439E-4	DESIGN
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999256668505634	WITHOUT_CLASSIFICATION	7.4333149436626E-5	DESIGN
//unwrap the object	WITHOUT_CLASSIFICATION	0.9979447825903263	WITHOUT_CLASSIFICATION	0.002055217409673808	DESIGN
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9996364767324545	WITHOUT_CLASSIFICATION	3.635232675456095E-4	DESIGN
//return the proxied object	WITHOUT_CLASSIFICATION	0.9989171838566324	WITHOUT_CLASSIFICATION	0.0010828161433675061	DESIGN
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9995470085437786	WITHOUT_CLASSIFICATION	4.529914562213844E-4	DESIGN
// early exit...	WITHOUT_CLASSIFICATION	0.9992663748414459	WITHOUT_CLASSIFICATION	7.336251585541633E-4	DESIGN
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.994755783008959	WITHOUT_CLASSIFICATION	0.005244216991041051	DESIGN
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9793472127433288	WITHOUT_CLASSIFICATION	0.020652787256671124	DESIGN
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.99718065365609	WITHOUT_CLASSIFICATION	0.0028193463439099057	DESIGN
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9998500570002695	WITHOUT_CLASSIFICATION	1.4994299973040411E-4	DESIGN
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9496047674112663	WITHOUT_CLASSIFICATION	0.050395232588733685	DESIGN
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9983968965592304	WITHOUT_CLASSIFICATION	0.0016031034407696359	DESIGN
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9983968965592304	WITHOUT_CLASSIFICATION	0.0016031034407696359	DESIGN
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.998150411637813	WITHOUT_CLASSIFICATION	0.001849588362187061	DESIGN
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9981702803941379	WITHOUT_CLASSIFICATION	0.0018297196058620752	DESIGN
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9982441285552619	WITHOUT_CLASSIFICATION	0.0017558714447380587	DESIGN
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999690378669	WITHOUT_CLASSIFICATION	3.096213310009371E-5	DESIGN
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.998892465318764	WITHOUT_CLASSIFICATION	0.0011075346812360904	DESIGN
//bad cast	WITHOUT_CLASSIFICATION	0.9993534998486356	WITHOUT_CLASSIFICATION	6.465001513644508E-4	DESIGN
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.997571986712653	WITHOUT_CLASSIFICATION	0.0024280132873470794	DESIGN
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9752966820873643	WITHOUT_CLASSIFICATION	0.02470331791263568	DESIGN
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9996561481983411	WITHOUT_CLASSIFICATION	3.4385180165887426E-4	DESIGN
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9965948454463037	WITHOUT_CLASSIFICATION	0.003405154553696168	DESIGN
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9983127645036872	WITHOUT_CLASSIFICATION	0.0016872354963128357	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9988399982307868	WITHOUT_CLASSIFICATION	0.0011600017692132683	DESIGN
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.8960323157807722	WITHOUT_CLASSIFICATION	0.10396768421922778	DESIGN
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9984859254587879	WITHOUT_CLASSIFICATION	0.001514074541212184	DESIGN
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.999258832570182	WITHOUT_CLASSIFICATION	7.411674298179587E-4	DESIGN
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9972313274803918	WITHOUT_CLASSIFICATION	0.0027686725196082204	DESIGN
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9863325841911459	WITHOUT_CLASSIFICATION	0.013667415808854102	DESIGN
//take a snapshot	WITHOUT_CLASSIFICATION	0.9949395427812814	WITHOUT_CLASSIFICATION	0.005060457218718564	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9991349433639374	WITHOUT_CLASSIFICATION	8.650566360626802E-4	DESIGN
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9995549253990879	WITHOUT_CLASSIFICATION	4.450746009121399E-4	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9996930234658481	WITHOUT_CLASSIFICATION	3.069765341518672E-4	DESIGN
// We've been here before	WITHOUT_CLASSIFICATION	0.9969806454681834	WITHOUT_CLASSIFICATION	0.00301935453181656	DESIGN
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9998747549629751	WITHOUT_CLASSIFICATION	1.2524503702501336E-4	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9996930234658481	WITHOUT_CLASSIFICATION	3.069765341518672E-4	DESIGN
// if either its role changed,	WITHOUT_CLASSIFICATION	0.999795008496172	WITHOUT_CLASSIFICATION	2.049915038280801E-4	DESIGN
// or its key changed	WITHOUT_CLASSIFICATION	0.999951119073608	WITHOUT_CLASSIFICATION	4.8880926392107624E-5	DESIGN
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9982770564731314	WITHOUT_CLASSIFICATION	0.0017229435268685778	DESIGN
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.991039894761569	WITHOUT_CLASSIFICATION	0.008960105238430981	DESIGN
// force initialize!	WITHOUT_CLASSIFICATION	0.9957169045995956	WITHOUT_CLASSIFICATION	0.0042830954004043935	DESIGN
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999515761185198	WITHOUT_CLASSIFICATION	4.842388148015699E-5	DESIGN
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9973675834603662	WITHOUT_CLASSIFICATION	0.002632416539633772	DESIGN
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9991967619204578	WITHOUT_CLASSIFICATION	8.03238079542148E-4	DESIGN
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9964457050318425	WITHOUT_CLASSIFICATION	0.003554294968157604	DESIGN
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9963650254400455	WITHOUT_CLASSIFICATION	0.003634974559954557	DESIGN
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9998098950730113	WITHOUT_CLASSIFICATION	1.9010492698856107E-4	DESIGN
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9996721330975438	WITHOUT_CLASSIFICATION	3.2786690245616796E-4	DESIGN
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9965900963487199	WITHOUT_CLASSIFICATION	0.0034099036512800847	DESIGN
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9980313368265308	WITHOUT_CLASSIFICATION	0.00196866317346911	DESIGN
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9968267004244654	WITHOUT_CLASSIFICATION	0.0031732995755345255	DESIGN
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.8075555324390141	WITHOUT_CLASSIFICATION	0.19244446756098596	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9983127645036872	WITHOUT_CLASSIFICATION	0.0016872354963128357	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9983127645036872	WITHOUT_CLASSIFICATION	0.0016872354963128357	DESIGN
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9997154268925034	WITHOUT_CLASSIFICATION	2.8457310749662113E-4	DESIGN
//optimization	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9983127645036872	WITHOUT_CLASSIFICATION	0.0016872354963128357	DESIGN
//re-snapshot	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9974612141379824	WITHOUT_CLASSIFICATION	0.0025387858620175177	DESIGN
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9879816189524019	WITHOUT_CLASSIFICATION	0.012018381047598043	DESIGN
//memory optimization	WITHOUT_CLASSIFICATION	0.9991627271728144	WITHOUT_CLASSIFICATION	8.372728271855744E-4	DESIGN
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9998688311078576	WITHOUT_CLASSIFICATION	1.3116889214233505E-4	DESIGN
// copied from Session:	WITHOUT_CLASSIFICATION	0.9894608715140435	WITHOUT_CLASSIFICATION	0.010539128485956558	DESIGN
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9953792711083205	WITHOUT_CLASSIFICATION	0.004620728891679546	DESIGN
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9988505080386372	WITHOUT_CLASSIFICATION	0.0011494919613628434	DESIGN
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999261217843072	WITHOUT_CLASSIFICATION	7.387821569280594E-5	DESIGN
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9980355837377822	WITHOUT_CLASSIFICATION	0.0019644162622177407	DESIGN
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9693332336412604	WITHOUT_CLASSIFICATION	0.03066676635873964	DESIGN
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9963299318141902	WITHOUT_CLASSIFICATION	0.0036700681858099038	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9981154350068923	WITHOUT_CLASSIFICATION	0.001884564993107722	DESIGN
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9981242772812681	WITHOUT_CLASSIFICATION	0.0018757227187319986	DESIGN
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9991337344301083	WITHOUT_CLASSIFICATION	8.662655698916598E-4	DESIGN
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9960565215196082	WITHOUT_CLASSIFICATION	0.003943478480391756	DESIGN
//do the test	WITHOUT_CLASSIFICATION	0.999742875256673	WITHOUT_CLASSIFICATION	2.5712474332688216E-4	DESIGN
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9998630471127218	WITHOUT_CLASSIFICATION	1.3695288727822992E-4	DESIGN
//unwrap it	WITHOUT_CLASSIFICATION	0.9977080784781553	WITHOUT_CLASSIFICATION	0.0022919215218445495	DESIGN
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9414251000552896	WITHOUT_CLASSIFICATION	0.05857489994471047	DESIGN
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9998657789886052	WITHOUT_CLASSIFICATION	1.3422101139485374E-4	DESIGN
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9975595821581048	WITHOUT_CLASSIFICATION	0.0024404178418950674	DESIGN
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9959049022449808	WITHOUT_CLASSIFICATION	0.004095097755019068	DESIGN
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9998541578968995	WITHOUT_CLASSIFICATION	1.4584210310047787E-4	DESIGN
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9784345519831048	WITHOUT_CLASSIFICATION	0.02156544801689522	DESIGN
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9899615772644126	WITHOUT_CLASSIFICATION	0.010038422735587402	DESIGN
//int count = 0;	WITHOUT_CLASSIFICATION	0.9985738124787964	WITHOUT_CLASSIFICATION	0.001426187521203677	DESIGN
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9997764223369139	WITHOUT_CLASSIFICATION	2.2357766308616505E-4	DESIGN
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9988364153039859	WITHOUT_CLASSIFICATION	0.0011635846960140032	DESIGN
//count++;	WITHOUT_CLASSIFICATION	0.9993675444271637	WITHOUT_CLASSIFICATION	6.324555728361998E-4	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9994970378950041	WITHOUT_CLASSIFICATION	5.029621049959025E-4	DESIGN
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9981941850391357	WITHOUT_CLASSIFICATION	0.0018058149608642406	DESIGN
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9978277252668222	WITHOUT_CLASSIFICATION	0.0021722747331777022	DESIGN
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9995957853429195	WITHOUT_CLASSIFICATION	4.0421465708053946E-4	DESIGN
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9996187691511492	WITHOUT_CLASSIFICATION	3.8123084885077063E-4	DESIGN
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9992553903011706	WITHOUT_CLASSIFICATION	7.446096988293719E-4	DESIGN
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9997888182532849	WITHOUT_CLASSIFICATION	2.111817467151087E-4	DESIGN
// initialize this collection	WITHOUT_CLASSIFICATION	0.9932105985025874	WITHOUT_CLASSIFICATION	0.006789401497412494	DESIGN
// create one	WITHOUT_CLASSIFICATION	0.9992913116950333	WITHOUT_CLASSIFICATION	7.086883049667171E-4	DESIGN
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9941279805367346	WITHOUT_CLASSIFICATION	0.005872019463265519	DESIGN
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9995313189184627	WITHOUT_CLASSIFICATION	4.686810815373322E-4	DESIGN
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9916555101928004	WITHOUT_CLASSIFICATION	0.00834448980719966	DESIGN
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.985640231951657	WITHOUT_CLASSIFICATION	0.014359768048343	DESIGN
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997608598499448	WITHOUT_CLASSIFICATION	0.0023914015005520144	DESIGN
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999059836671326	WITHOUT_CLASSIFICATION	9.401633286740047E-4	DESIGN
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991823660023317	WITHOUT_CLASSIFICATION	8.176339976683143E-4	DESIGN
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.6924155529501712	WITHOUT_CLASSIFICATION	0.30758444704982885	DESIGN
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9997710720882054	WITHOUT_CLASSIFICATION	2.2892791179475214E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999861978108632	WITHOUT_CLASSIFICATION	1.3802189136877873E-5	DESIGN
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9941861566305785	WITHOUT_CLASSIFICATION	0.005813843369421543	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9990401520581044	WITHOUT_CLASSIFICATION	9.598479418957254E-4	DESIGN
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9976080897950692	WITHOUT_CLASSIFICATION	0.00239191020493089	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9990401520581044	WITHOUT_CLASSIFICATION	9.598479418957254E-4	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9992603987182265	WITHOUT_CLASSIFICATION	7.396012817734636E-4	DESIGN
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9998814788646331	WITHOUT_CLASSIFICATION	1.1852113536682914E-4	DESIGN
// named parameter	WITHOUT_CLASSIFICATION	0.9982541719301277	WITHOUT_CLASSIFICATION	0.0017458280698724289	DESIGN
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9954036489812664	WITHOUT_CLASSIFICATION	0.0045963510187336225	DESIGN
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9974899219192171	WITHOUT_CLASSIFICATION	0.0025100780807828576	DESIGN
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9985281798601366	WITHOUT_CLASSIFICATION	0.0014718201398633904	DESIGN
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9990431618800173	WITHOUT_CLASSIFICATION	9.568381199826854E-4	DESIGN
// perform the actual work	WITHOUT_CLASSIFICATION	0.9998792173669379	WITHOUT_CLASSIFICATION	1.2078263306209582E-4	DESIGN
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.999972414864004	WITHOUT_CLASSIFICATION	2.758513599599555E-5	DESIGN
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9938275399528699	WITHOUT_CLASSIFICATION	0.006172460047130096	DESIGN
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9967327423341715	WITHOUT_CLASSIFICATION	0.0032672576658283412	DESIGN
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9783065232911092	WITHOUT_CLASSIFICATION	0.021693476708890828	DESIGN
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9975726778238923	WITHOUT_CLASSIFICATION	0.0024273221761076844	DESIGN
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.7366479088433526	WITHOUT_CLASSIFICATION	0.2633520911566474	DESIGN
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9769505555976071	WITHOUT_CLASSIFICATION	0.023049444402392854	DESIGN
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9878723453256829	WITHOUT_CLASSIFICATION	0.012127654674317048	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9989496095753615	WITHOUT_CLASSIFICATION	0.001050390424638485	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9989496095753615	WITHOUT_CLASSIFICATION	0.001050390424638485	DESIGN
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9965948454463037	WITHOUT_CLASSIFICATION	0.003405154553696168	DESIGN
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9986652051353282	WITHOUT_CLASSIFICATION	0.001334794864671825	DESIGN
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.999833741303474	WITHOUT_CLASSIFICATION	1.662586965258477E-4	DESIGN
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999639081278356	WITHOUT_CLASSIFICATION	3.609187216440719E-5	DESIGN
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9987523625034239	WITHOUT_CLASSIFICATION	0.0012476374965760706	DESIGN
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9793141526276089	WITHOUT_CLASSIFICATION	0.020685847372391125	DESIGN
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.7846549832135307	DESIGN	0.21534501678646933	WITHOUT_CLASSIFICATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9768380056615481	WITHOUT_CLASSIFICATION	0.02316199433845193	DESIGN
// grab its current state	WITHOUT_CLASSIFICATION	0.999839316171476	WITHOUT_CLASSIFICATION	1.606838285239765E-4	DESIGN
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9997183897859769	WITHOUT_CLASSIFICATION	2.816102140230726E-4	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9998928667607467	WITHOUT_CLASSIFICATION	1.0713323925332744E-4	DESIGN
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999979746369714	WITHOUT_CLASSIFICATION	2.0253630285523416E-6	DESIGN
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9988745580674618	WITHOUT_CLASSIFICATION	0.001125441932538114	DESIGN
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9997433235175922	WITHOUT_CLASSIFICATION	2.566764824078472E-4	DESIGN
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9998307201510297	WITHOUT_CLASSIFICATION	1.6927984897031846E-4	DESIGN
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9971621998145359	WITHOUT_CLASSIFICATION	0.002837800185464087	DESIGN
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9987166602852544	WITHOUT_CLASSIFICATION	0.0012833397147456202	DESIGN
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9377861762976034	WITHOUT_CLASSIFICATION	0.06221382370239663	DESIGN
//use the current version	WITHOUT_CLASSIFICATION	0.9996539296817116	WITHOUT_CLASSIFICATION	3.460703182883156E-4	DESIGN
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999047608817858	WITHOUT_CLASSIFICATION	9.523911821417432E-5	DESIGN
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999363500828168	WITHOUT_CLASSIFICATION	6.364991718322032E-5	DESIGN
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999090132330879	WITHOUT_CLASSIFICATION	9.098676691215338E-5	DESIGN
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999630156795685	WITHOUT_CLASSIFICATION	3.6984320431569466E-5	DESIGN
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.998306636060198	WITHOUT_CLASSIFICATION	0.0016933639398020973	DESIGN
//even process null collections	WITHOUT_CLASSIFICATION	0.9981273772644921	WITHOUT_CLASSIFICATION	0.0018726227355079432	DESIGN
// get the id from the object	WITHOUT_CLASSIFICATION	0.9995098655634573	WITHOUT_CLASSIFICATION	4.901344365427117E-4	DESIGN
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.999639803284766	WITHOUT_CLASSIFICATION	3.601967152340388E-4	DESIGN
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9985225962580474	WITHOUT_CLASSIFICATION	0.0014774037419525645	DESIGN
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9971060111851121	WITHOUT_CLASSIFICATION	0.002893988814887836	DESIGN
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.999373162419532	WITHOUT_CLASSIFICATION	6.268375804680179E-4	DESIGN
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9978559482540112	WITHOUT_CLASSIFICATION	0.0021440517459886976	DESIGN
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.999711399329529	WITHOUT_CLASSIFICATION	2.8860067047097124E-4	DESIGN
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9984230961090297	WITHOUT_CLASSIFICATION	0.0015769038909703302	DESIGN
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.994763876826819	WITHOUT_CLASSIFICATION	0.005236123173180948	DESIGN
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9983519222220996	WITHOUT_CLASSIFICATION	0.0016480777779003624	DESIGN
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9998850438501806	WITHOUT_CLASSIFICATION	1.1495614981933305E-4	DESIGN
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9998799385137643	WITHOUT_CLASSIFICATION	1.2006148623558962E-4	DESIGN
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9984471070962182	WITHOUT_CLASSIFICATION	0.0015528929037818787	DESIGN
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9993277318737189	WITHOUT_CLASSIFICATION	6.722681262810352E-4	DESIGN
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9983970481915391	WITHOUT_CLASSIFICATION	0.0016029518084609699	DESIGN
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999585815023859	WITHOUT_CLASSIFICATION	4.141849761397702E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998995990895614	WITHOUT_CLASSIFICATION	0.0010040091043860089	DESIGN
//some statistics	WITHOUT_CLASSIFICATION	0.9971411876603087	WITHOUT_CLASSIFICATION	0.0028588123396913064	DESIGN
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9993349957287323	WITHOUT_CLASSIFICATION	6.650042712676135E-4	DESIGN
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999027268273647	WITHOUT_CLASSIFICATION	9.72731726353031E-5	DESIGN
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9723482631085667	WITHOUT_CLASSIFICATION	0.027651736891433267	DESIGN
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9934696093142675	WITHOUT_CLASSIFICATION	0.00653039068573241	DESIGN
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999976459923368	WITHOUT_CLASSIFICATION	2.3540076633275013E-6	DESIGN
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9993200668245811	WITHOUT_CLASSIFICATION	6.799331754188954E-4	DESIGN
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9574361394560587	WITHOUT_CLASSIFICATION	0.042563860543941366	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998995990895614	WITHOUT_CLASSIFICATION	0.0010040091043860089	DESIGN
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9986916937598737	WITHOUT_CLASSIFICATION	0.001308306240126384	DESIGN
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9840973962894874	WITHOUT_CLASSIFICATION	0.015902603710512535	DESIGN
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.995845400280292	WITHOUT_CLASSIFICATION	0.004154599719708054	DESIGN
//get a snapshot	WITHOUT_CLASSIFICATION	0.9954721677971525	WITHOUT_CLASSIFICATION	0.0045278322028474635	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999379432055587	WITHOUT_CLASSIFICATION	6.20567944412543E-5	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999379432055587	WITHOUT_CLASSIFICATION	6.20567944412543E-5	DESIGN
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999913181380075	WITHOUT_CLASSIFICATION	8.681861992596273E-6	DESIGN
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9977538615217098	WITHOUT_CLASSIFICATION	0.002246138478290172	DESIGN
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9994002187176758	WITHOUT_CLASSIFICATION	5.997812823241466E-4	DESIGN
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9996768069133878	WITHOUT_CLASSIFICATION	3.231930866123009E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9984338397132347	WITHOUT_CLASSIFICATION	0.0015661602867652186	DESIGN
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.99907490870277	WITHOUT_CLASSIFICATION	9.250912972300777E-4	DESIGN
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9958377421209562	WITHOUT_CLASSIFICATION	0.004162257879043758	DESIGN
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9998095380363744	WITHOUT_CLASSIFICATION	1.904619636257323E-4	DESIGN
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9992832148189486	WITHOUT_CLASSIFICATION	7.16785181051408E-4	DESIGN
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9995469881079322	WITHOUT_CLASSIFICATION	4.5301189206785705E-4	DESIGN
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9986494503041565	WITHOUT_CLASSIFICATION	0.0013505496958434637	DESIGN
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9989539930155328	WITHOUT_CLASSIFICATION	0.0010460069844672583	DESIGN
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9989257055760749	WITHOUT_CLASSIFICATION	0.0010742944239251642	DESIGN
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.5082346221412848	WITHOUT_CLASSIFICATION	0.4917653778587153	DESIGN
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9935263594116301	WITHOUT_CLASSIFICATION	0.006473640588369854	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9946286470259106	WITHOUT_CLASSIFICATION	0.005371352974089367	DESIGN
//cachedState,	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9974620706381301	WITHOUT_CLASSIFICATION	0.0025379293618698184	DESIGN
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9983193803194639	WITHOUT_CLASSIFICATION	0.0016806196805361712	DESIGN
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9950352123320176	WITHOUT_CLASSIFICATION	0.004964787667982281	DESIGN
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9973829213209751	WITHOUT_CLASSIFICATION	0.0026170786790249163	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9971722927646591	WITHOUT_CLASSIFICATION	0.0028277072353408645	DESIGN
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.999893824573473	WITHOUT_CLASSIFICATION	1.0617542652693802E-4	DESIGN
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9831862289040548	WITHOUT_CLASSIFICATION	0.016813771095945125	DESIGN
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9979663329827096	WITHOUT_CLASSIFICATION	0.002033667017290303	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9726913385556188	WITHOUT_CLASSIFICATION	0.027308661444381255	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9927873277565505	WITHOUT_CLASSIFICATION	0.00721267224344944	DESIGN
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.999992999842034	WITHOUT_CLASSIFICATION	7.000157965881584E-6	DESIGN
//DELETED	WITHOUT_CLASSIFICATION	0.9993675444271637	WITHOUT_CLASSIFICATION	6.324555728361998E-4	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9998789841468739	WITHOUT_CLASSIFICATION	1.2101585312609506E-4	DESIGN
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9948111471622265	WITHOUT_CLASSIFICATION	0.005188852837773515	DESIGN
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.5759472403521301	WITHOUT_CLASSIFICATION	0.42405275964787004	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9998789841468739	WITHOUT_CLASSIFICATION	1.2101585312609506E-4	DESIGN
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9998520325547339	WITHOUT_CLASSIFICATION	1.4796744526607584E-4	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.99974384332954	WITHOUT_CLASSIFICATION	2.56156670459994E-4	DESIGN
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9998245486193191	WITHOUT_CLASSIFICATION	1.7545138068082185E-4	DESIGN
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9997403213220933	WITHOUT_CLASSIFICATION	2.596786779066305E-4	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9981904312160197	WITHOUT_CLASSIFICATION	0.00180956878398033	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9998928667607467	WITHOUT_CLASSIFICATION	1.0713323925332744E-4	DESIGN
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9896448545705316	WITHOUT_CLASSIFICATION	0.010355145429468443	DESIGN
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9969505875786623	WITHOUT_CLASSIFICATION	0.0030494124213377542	DESIGN
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999103049497705	WITHOUT_CLASSIFICATION	8.969505022939236E-5	DESIGN
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.996509983683552	WITHOUT_CLASSIFICATION	0.003490016316447944	DESIGN
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999902610280191	WITHOUT_CLASSIFICATION	9.738971980864771E-6	DESIGN
// the object is persistent	WITHOUT_CLASSIFICATION	0.9997050643597178	WITHOUT_CLASSIFICATION	2.949356402821448E-4	DESIGN
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.999834007658112	WITHOUT_CLASSIFICATION	1.6599234188800112E-4	DESIGN
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9996211350911198	WITHOUT_CLASSIFICATION	3.7886490888012743E-4	DESIGN
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9983127645036872	WITHOUT_CLASSIFICATION	0.0016872354963128357	DESIGN
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9997367313913348	WITHOUT_CLASSIFICATION	2.632686086652361E-4	DESIGN
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9995234933331508	WITHOUT_CLASSIFICATION	4.7650666684917085E-4	DESIGN
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9990412834413583	WITHOUT_CLASSIFICATION	9.587165586416201E-4	DESIGN
// eat it and try next	WITHOUT_CLASSIFICATION	0.9986461894863555	WITHOUT_CLASSIFICATION	0.0013538105136444863	DESIGN
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9998853084796775	WITHOUT_CLASSIFICATION	1.146915203225875E-4	DESIGN
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9973805483787502	WITHOUT_CLASSIFICATION	0.0026194516212497223	DESIGN
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9976337905129978	WITHOUT_CLASSIFICATION	0.002366209487002176	DESIGN
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9992336582396886	WITHOUT_CLASSIFICATION	7.66341760311432E-4	DESIGN
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9992029615875392	WITHOUT_CLASSIFICATION	7.970384124607095E-4	DESIGN
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9973675834603662	WITHOUT_CLASSIFICATION	0.002632416539633772	DESIGN
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9973675834603662	WITHOUT_CLASSIFICATION	0.002632416539633772	DESIGN
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.998497972106564	WITHOUT_CLASSIFICATION	0.0015020278934359942	DESIGN
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9922973018517368	WITHOUT_CLASSIFICATION	0.007702698148263205	DESIGN
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999480277978251	WITHOUT_CLASSIFICATION	5.197220217499853E-5	DESIGN
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9944859591183388	WITHOUT_CLASSIFICATION	0.0055140408816612705	DESIGN
// Note this!!	WITHOUT_CLASSIFICATION	0.9996820479215052	WITHOUT_CLASSIFICATION	3.179520784948594E-4	DESIGN
// Error message constants.	WITHOUT_CLASSIFICATION	0.9988718659212542	WITHOUT_CLASSIFICATION	0.0011281340787458122	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988494228931052	WITHOUT_CLASSIFICATION	0.001150577106894813	DESIGN
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982407620424861	WITHOUT_CLASSIFICATION	0.001759237957513789	DESIGN
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9885698435662857	WITHOUT_CLASSIFICATION	0.011430156433714197	DESIGN
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999573498873653	WITHOUT_CLASSIFICATION	4.265011263474923E-5	DESIGN
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9905545884858512	WITHOUT_CLASSIFICATION	0.009445411514148697	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9995646922445749	WITHOUT_CLASSIFICATION	4.353077554250918E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9995646922445749	WITHOUT_CLASSIFICATION	4.353077554250918E-4	DESIGN
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9845742301088085	WITHOUT_CLASSIFICATION	0.015425769891191503	DESIGN
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9994401320244033	WITHOUT_CLASSIFICATION	5.598679755967945E-4	DESIGN
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9993801746955846	WITHOUT_CLASSIFICATION	6.198253044154653E-4	DESIGN
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9997666976185151	WITHOUT_CLASSIFICATION	2.3330238148480342E-4	DESIGN
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9992153554301747	WITHOUT_CLASSIFICATION	7.846445698251789E-4	DESIGN
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9963749883982709	WITHOUT_CLASSIFICATION	0.0036250116017291587	DESIGN
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9994913559351658	WITHOUT_CLASSIFICATION	5.086440648343001E-4	DESIGN
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9998471717772667	WITHOUT_CLASSIFICATION	1.5282822273335174E-4	DESIGN
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9991868315275677	WITHOUT_CLASSIFICATION	8.13168472432157E-4	DESIGN
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999238085804537	WITHOUT_CLASSIFICATION	7.61914195461917E-5	DESIGN
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9996711662444744	WITHOUT_CLASSIFICATION	3.288337555256836E-4	DESIGN
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.999931699865979	WITHOUT_CLASSIFICATION	6.830013402111226E-5	DESIGN
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999512811521784	WITHOUT_CLASSIFICATION	4.871884782167648E-5	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9995646922445749	WITHOUT_CLASSIFICATION	4.353077554250918E-4	DESIGN
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9994312253493236	WITHOUT_CLASSIFICATION	5.687746506762885E-4	DESIGN
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9848863805520128	WITHOUT_CLASSIFICATION	0.015113619447987127	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9957325771718318	WITHOUT_CLASSIFICATION	0.004267422828168206	DESIGN
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.999767344155625	WITHOUT_CLASSIFICATION	2.3265584437498406E-4	DESIGN
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.999920802894126	WITHOUT_CLASSIFICATION	7.919710587401685E-5	DESIGN
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9998173952154481	WITHOUT_CLASSIFICATION	1.826047845519679E-4	DESIGN
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.999080166625081	WITHOUT_CLASSIFICATION	9.198333749189505E-4	DESIGN
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.999629245138351	WITHOUT_CLASSIFICATION	3.7075486164898626E-4	DESIGN
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9955196569069308	WITHOUT_CLASSIFICATION	0.004480343093069183	DESIGN
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9879329908905884	WITHOUT_CLASSIFICATION	0.01206700910941159	DESIGN
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.999217072292061	WITHOUT_CLASSIFICATION	7.829277079389557E-4	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988494228931052	WITHOUT_CLASSIFICATION	0.001150577106894813	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9995646922445749	WITHOUT_CLASSIFICATION	4.353077554250918E-4	DESIGN
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9998660376028191	WITHOUT_CLASSIFICATION	1.3396239718082737E-4	DESIGN
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.998253289602878	WITHOUT_CLASSIFICATION	0.0017467103971219682	DESIGN
// switch	WITHOUT_CLASSIFICATION	0.9999163292134728	WITHOUT_CLASSIFICATION	8.367078652704315E-5	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9962065765940368	WITHOUT_CLASSIFICATION	0.003793423405963141	DESIGN
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9982637788028467	WITHOUT_CLASSIFICATION	0.0017362211971532922	DESIGN
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9997336675797032	WITHOUT_CLASSIFICATION	2.663324202968988E-4	DESIGN
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991604525088463	WITHOUT_CLASSIFICATION	8.395474911536878E-4	DESIGN
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999695623888815	WITHOUT_CLASSIFICATION	3.0437611118546386E-5	DESIGN
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999565211899005	WITHOUT_CLASSIFICATION	4.347881009949891E-5	DESIGN
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9985106141412715	WITHOUT_CLASSIFICATION	0.0014893858587285563	DESIGN
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.999924285276029	WITHOUT_CLASSIFICATION	7.571472397096993E-5	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9974101200338992	WITHOUT_CLASSIFICATION	0.002589879966100875	DESIGN
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9998331055408842	WITHOUT_CLASSIFICATION	1.6689445911582381E-4	DESIGN
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9922304996153738	WITHOUT_CLASSIFICATION	0.007769500384626204	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9992603987182265	WITHOUT_CLASSIFICATION	7.396012817734636E-4	DESIGN
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9988493189010017	WITHOUT_CLASSIFICATION	0.001150681098998266	DESIGN
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9998027672865578	WITHOUT_CLASSIFICATION	1.9723271344222707E-4	DESIGN
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9985736489719821	WITHOUT_CLASSIFICATION	0.0014263510280179952	DESIGN
// all clear	WITHOUT_CLASSIFICATION	0.9994614188911884	WITHOUT_CLASSIFICATION	5.385811088114247E-4	DESIGN
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9992979964033958	WITHOUT_CLASSIFICATION	7.020035966042414E-4	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.99797408773876	WITHOUT_CLASSIFICATION	0.002025912261240105	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.99797408773876	WITHOUT_CLASSIFICATION	0.002025912261240105	DESIGN
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9997905896257989	WITHOUT_CLASSIFICATION	2.0941037420100876E-4	DESIGN
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9963533912208992	WITHOUT_CLASSIFICATION	0.0036466087791008047	DESIGN
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9997122680582592	WITHOUT_CLASSIFICATION	2.8773194174074057E-4	DESIGN
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9949678812185428	WITHOUT_CLASSIFICATION	0.005032118781457108	DESIGN
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9994800144155059	WITHOUT_CLASSIFICATION	5.199855844940687E-4	DESIGN
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999793271378076	WITHOUT_CLASSIFICATION	2.067286219241857E-5	DESIGN
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9990470916459432	WITHOUT_CLASSIFICATION	9.529083540568876E-4	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9965605041208782	WITHOUT_CLASSIFICATION	0.0034394958791218425	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9965605041208782	WITHOUT_CLASSIFICATION	0.0034394958791218425	DESIGN
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9986239109496496	WITHOUT_CLASSIFICATION	0.0013760890503504506	DESIGN
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9996523228856153	WITHOUT_CLASSIFICATION	3.4767711438467324E-4	DESIGN
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9996835861570842	WITHOUT_CLASSIFICATION	3.1641384291575145E-4	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999177785910301	WITHOUT_CLASSIFICATION	8.222140896989209E-4	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999177785910301	WITHOUT_CLASSIFICATION	8.222140896989209E-4	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999177785910301	WITHOUT_CLASSIFICATION	8.222140896989209E-4	DESIGN
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999622907079119	WITHOUT_CLASSIFICATION	3.770929208808649E-5	DESIGN
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9990498110467472	WITHOUT_CLASSIFICATION	9.501889532529428E-4	DESIGN
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.999859479886812	WITHOUT_CLASSIFICATION	1.4052011318803746E-4	DESIGN
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.999020367925892	WITHOUT_CLASSIFICATION	9.796320741080307E-4	DESIGN
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9973380388909723	WITHOUT_CLASSIFICATION	0.002661961109027695	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9995646922445749	WITHOUT_CLASSIFICATION	4.353077554250918E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9995646922445749	WITHOUT_CLASSIFICATION	4.353077554250918E-4	DESIGN
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9876262704994799	WITHOUT_CLASSIFICATION	0.012373729500520021	DESIGN
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9997794065005161	WITHOUT_CLASSIFICATION	2.2059349948375519E-4	DESIGN
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.6903853786551596	WITHOUT_CLASSIFICATION	0.30961462134484036	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9933131952542554	WITHOUT_CLASSIFICATION	0.006686804745744562	DESIGN
// igndore it...	WITHOUT_CLASSIFICATION	0.9970903552399327	WITHOUT_CLASSIFICATION	0.0029096447600672464	DESIGN
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.994434873368078	WITHOUT_CLASSIFICATION	0.005565126631921975	DESIGN
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9705224133703373	WITHOUT_CLASSIFICATION	0.029477586629662662	DESIGN
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9998409683397824	WITHOUT_CLASSIFICATION	1.5903166021750563E-4	DESIGN
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9985548337039242	WITHOUT_CLASSIFICATION	0.0014451662960758753	DESIGN
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999457308157186	WITHOUT_CLASSIFICATION	5.426918428142891E-5	DESIGN
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9998037553029936	WITHOUT_CLASSIFICATION	1.9624469700648802E-4	DESIGN
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9994946797143884	WITHOUT_CLASSIFICATION	5.053202856116415E-4	DESIGN
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9994946797143884	WITHOUT_CLASSIFICATION	5.053202856116415E-4	DESIGN
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9994946797143884	WITHOUT_CLASSIFICATION	5.053202856116415E-4	DESIGN
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9994946797143884	WITHOUT_CLASSIFICATION	5.053202856116415E-4	DESIGN
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9994946797143884	WITHOUT_CLASSIFICATION	5.053202856116415E-4	DESIGN
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9992110785405726	WITHOUT_CLASSIFICATION	7.889214594273637E-4	DESIGN
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9992110785405726	WITHOUT_CLASSIFICATION	7.889214594273637E-4	DESIGN
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9992110785405726	WITHOUT_CLASSIFICATION	7.889214594273637E-4	DESIGN
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9992110785405726	WITHOUT_CLASSIFICATION	7.889214594273637E-4	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9988411765143892	WITHOUT_CLASSIFICATION	0.0011588234856108864	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.99797408773876	WITHOUT_CLASSIFICATION	0.002025912261240105	DESIGN
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9995315154135859	WITHOUT_CLASSIFICATION	4.6848458641416925E-4	DESIGN
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9992110785405726	WITHOUT_CLASSIFICATION	7.889214594273637E-4	DESIGN
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.999031342087081	WITHOUT_CLASSIFICATION	9.686579129190683E-4	DESIGN
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9987573522742063	WITHOUT_CLASSIFICATION	0.0012426477257937614	DESIGN
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9998651625769303	WITHOUT_CLASSIFICATION	1.3483742306968232E-4	DESIGN
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9997163466611827	WITHOUT_CLASSIFICATION	2.8365333881723146E-4	DESIGN
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9985106658794298	WITHOUT_CLASSIFICATION	0.001489334120570239	DESIGN
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9996765710078063	WITHOUT_CLASSIFICATION	3.234289921937011E-4	DESIGN
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999885924811107	WITHOUT_CLASSIFICATION	1.1407518889298229E-5	DESIGN
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9963706985675727	WITHOUT_CLASSIFICATION	0.0036293014324272955	DESIGN
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999488779711426	WITHOUT_CLASSIFICATION	5.112202885734879E-5	DESIGN
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999972773546911	WITHOUT_CLASSIFICATION	2.72264530885138E-6	DESIGN
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9998436414243247	WITHOUT_CLASSIFICATION	1.5635857567522103E-4	DESIGN
// Set it!	WITHOUT_CLASSIFICATION	0.9999344561835333	WITHOUT_CLASSIFICATION	6.554381646677424E-5	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.999690996737037	WITHOUT_CLASSIFICATION	3.0900326296299797E-4	DESIGN
// strip the " where "	WITHOUT_CLASSIFICATION	0.9998884153991251	WITHOUT_CLASSIFICATION	1.1158460087486586E-4	DESIGN
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9798697802564847	WITHOUT_CLASSIFICATION	0.020130219743515233	DESIGN
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9984653639800535	WITHOUT_CLASSIFICATION	0.0015346360199465512	DESIGN
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999624410697773	WITHOUT_CLASSIFICATION	3.7558930222681525E-5	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9995542617397137	WITHOUT_CLASSIFICATION	4.457382602862249E-4	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9995542617397137	WITHOUT_CLASSIFICATION	4.457382602862249E-4	DESIGN
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9997270686379988	WITHOUT_CLASSIFICATION	2.7293136200116957E-4	DESIGN
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999709889279956	WITHOUT_CLASSIFICATION	2.9011072004268966E-5	DESIGN
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9994830717871778	WITHOUT_CLASSIFICATION	5.169282128222484E-4	DESIGN
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9994413426116214	WITHOUT_CLASSIFICATION	5.586573883786247E-4	DESIGN
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9994175227293995	WITHOUT_CLASSIFICATION	5.824772706004844E-4	DESIGN
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9977352385222426	WITHOUT_CLASSIFICATION	0.0022647614777573707	DESIGN
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9967384773859547	WITHOUT_CLASSIFICATION	0.0032615226140453486	DESIGN
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9997562245601266	WITHOUT_CLASSIFICATION	2.4377543987347966E-4	DESIGN
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9993022960236875	WITHOUT_CLASSIFICATION	6.977039763124931E-4	DESIGN
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9997408593837172	WITHOUT_CLASSIFICATION	2.591406162828602E-4	DESIGN
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9965990210747453	WITHOUT_CLASSIFICATION	0.003400978925254707	DESIGN
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9976231008634128	WITHOUT_CLASSIFICATION	0.0023768991365873487	DESIGN
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999227316556403	WITHOUT_CLASSIFICATION	7.726834435974105E-5	DESIGN
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999350063572432	WITHOUT_CLASSIFICATION	6.499364275680508E-5	DESIGN
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999435436590842	WITHOUT_CLASSIFICATION	5.6456340915663276E-5	DESIGN
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999773353911736	WITHOUT_CLASSIFICATION	2.2664608826424376E-5	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9998214085569559	WITHOUT_CLASSIFICATION	1.7859144304415247E-4	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9998214085569559	WITHOUT_CLASSIFICATION	1.7859144304415247E-4	DESIGN
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9996656891549088	WITHOUT_CLASSIFICATION	3.343108450911821E-4	DESIGN
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9620648677382416	WITHOUT_CLASSIFICATION	0.03793513226175835	DESIGN
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999294584571284	WITHOUT_CLASSIFICATION	7.054154287151655E-5	DESIGN
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999294584571284	WITHOUT_CLASSIFICATION	7.054154287151655E-5	DESIGN
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999702234661798	WITHOUT_CLASSIFICATION	2.9776533820160585E-5	DESIGN
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9982633159908323	WITHOUT_CLASSIFICATION	0.0017366840091676478	DESIGN
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9941934682485145	WITHOUT_CLASSIFICATION	0.0058065317514855	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9988564107754021	WITHOUT_CLASSIFICATION	0.0011435892245978956	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9991068116532665	WITHOUT_CLASSIFICATION	8.931883467335052E-4	DESIGN
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9972668647034183	WITHOUT_CLASSIFICATION	0.0027331352965816102	DESIGN
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.999877606009084	WITHOUT_CLASSIFICATION	1.2239399091594364E-4	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9988564107754021	WITHOUT_CLASSIFICATION	0.0011435892245978956	DESIGN
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9322553983875693	WITHOUT_CLASSIFICATION	0.0677446016124307	DESIGN
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9991099905369055	WITHOUT_CLASSIFICATION	8.900094630945601E-4	DESIGN
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9848809198479954	WITHOUT_CLASSIFICATION	0.015119080152004537	DESIGN
// again, null != null here	WITHOUT_CLASSIFICATION	0.9991451170376376	WITHOUT_CLASSIFICATION	8.548829623623334E-4	DESIGN
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9983667609588018	WITHOUT_CLASSIFICATION	0.001633239041198248	DESIGN
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9997599810992058	WITHOUT_CLASSIFICATION	2.4001890079417075E-4	DESIGN
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9998897686719944	WITHOUT_CLASSIFICATION	1.1023132800559386E-4	DESIGN
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999309698052801	WITHOUT_CLASSIFICATION	6.9030194719862E-5	DESIGN
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9995906146084579	WITHOUT_CLASSIFICATION	4.0938539154212583E-4	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9992892625623006	WITHOUT_CLASSIFICATION	7.107374376994372E-4	DESIGN
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9998599561727135	WITHOUT_CLASSIFICATION	1.4004382728642783E-4	DESIGN
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9997560488822929	WITHOUT_CLASSIFICATION	2.439511177071957E-4	DESIGN
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.999328397330963	WITHOUT_CLASSIFICATION	6.71602669037031E-4	DESIGN
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9899877045197951	WITHOUT_CLASSIFICATION	0.010012295480204783	DESIGN
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9991116836064876	WITHOUT_CLASSIFICATION	8.883163935124047E-4	DESIGN
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9985589622764938	WITHOUT_CLASSIFICATION	0.001441037723506134	DESIGN
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9995548886896314	WITHOUT_CLASSIFICATION	4.451113103686757E-4	DESIGN
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.999595498730769	WITHOUT_CLASSIFICATION	4.045012692309247E-4	DESIGN
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.999595498730769	WITHOUT_CLASSIFICATION	4.045012692309247E-4	DESIGN
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9998897686719944	WITHOUT_CLASSIFICATION	1.1023132800559386E-4	DESIGN
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9963648763849887	WITHOUT_CLASSIFICATION	0.003635123615011424	DESIGN
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.6358160406316603	WITHOUT_CLASSIFICATION	0.3641839593683397	DESIGN
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9873903927083626	WITHOUT_CLASSIFICATION	0.01260960729163726	DESIGN
// #2	WITHOUT_CLASSIFICATION	0.9998244022859074	WITHOUT_CLASSIFICATION	1.7559771409265452E-4	DESIGN
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9978453114951374	WITHOUT_CLASSIFICATION	0.002154688504862448	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9990409973899548	WITHOUT_CLASSIFICATION	9.590026100452807E-4	DESIGN
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999843043856196	WITHOUT_CLASSIFICATION	1.569561438041136E-5	DESIGN
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9998234478195026	WITHOUT_CLASSIFICATION	1.7655218049734045E-4	DESIGN
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9971557726368323	WITHOUT_CLASSIFICATION	0.0028442273631677484	DESIGN
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9787745759093691	WITHOUT_CLASSIFICATION	0.021225424090630857	DESIGN
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999266732898865	WITHOUT_CLASSIFICATION	7.332671011354576E-5	DESIGN
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9983600550574377	WITHOUT_CLASSIFICATION	0.0016399449425622574	DESIGN
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999090983087239	WITHOUT_CLASSIFICATION	9.090169127602063E-5	DESIGN
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.8556736168307183	WITHOUT_CLASSIFICATION	0.14432638316928167	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999361561696675	WITHOUT_CLASSIFICATION	6.384383033255223E-5	DESIGN
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9989593709343877	WITHOUT_CLASSIFICATION	0.0010406290656122966	DESIGN
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999652642694612	WITHOUT_CLASSIFICATION	3.473573053889445E-5	DESIGN
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9997896389861436	WITHOUT_CLASSIFICATION	2.1036101385647684E-4	DESIGN
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9997120924571021	WITHOUT_CLASSIFICATION	2.8790754289795896E-4	DESIGN
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9998808668683623	WITHOUT_CLASSIFICATION	1.1913313163767278E-4	DESIGN
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9998265278736426	WITHOUT_CLASSIFICATION	1.7347212635738683E-4	DESIGN
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9964190100052843	WITHOUT_CLASSIFICATION	0.003580989994715746	DESIGN
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9998248928184833	WITHOUT_CLASSIFICATION	1.7510718151678948E-4	DESIGN
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999545375422279	WITHOUT_CLASSIFICATION	4.5462457772124026E-5	DESIGN
// return an empty Type array	WITHOUT_CLASSIFICATION	0.999779096679908	WITHOUT_CLASSIFICATION	2.2090332009189895E-4	DESIGN
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9980055271109818	WITHOUT_CLASSIFICATION	0.0019944728890182116	DESIGN
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.999748362893778	WITHOUT_CLASSIFICATION	2.516371062220252E-4	DESIGN
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.999606413749073	WITHOUT_CLASSIFICATION	3.935862509270596E-4	DESIGN
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9997787204110951	WITHOUT_CLASSIFICATION	2.2127958890501062E-4	DESIGN
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9968701217141862	WITHOUT_CLASSIFICATION	0.0031298782858138934	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993327871956816	WITHOUT_CLASSIFICATION	6.67212804318324E-4	DESIGN
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999361561696675	WITHOUT_CLASSIFICATION	6.384383033255223E-5	DESIGN
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9995733624070055	WITHOUT_CLASSIFICATION	4.266375929944502E-4	DESIGN
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999399609520785	WITHOUT_CLASSIFICATION	6.0039047921586125E-5	DESIGN
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9987901444277563	WITHOUT_CLASSIFICATION	0.0012098555722437536	DESIGN
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9997293727697705	WITHOUT_CLASSIFICATION	2.70627230229616E-4	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9961300674476357	WITHOUT_CLASSIFICATION	0.003869932552364323	DESIGN
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9998952634039288	WITHOUT_CLASSIFICATION	1.0473659607113262E-4	DESIGN
// Collection of components.	WITHOUT_CLASSIFICATION	0.9997514784570476	WITHOUT_CLASSIFICATION	2.485215429524531E-4	DESIGN
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9985382207283289	WITHOUT_CLASSIFICATION	0.0014617792716711015	DESIGN
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.999667255961645	WITHOUT_CLASSIFICATION	3.327440383550847E-4	DESIGN
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9996030182194222	WITHOUT_CLASSIFICATION	3.969817805777186E-4	DESIGN
// currently allowed...	WITHOUT_CLASSIFICATION	0.9981632542336825	WITHOUT_CLASSIFICATION	0.0018367457663176305	DESIGN
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.6901137550097011	WITHOUT_CLASSIFICATION	0.3098862449902989	DESIGN
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9940443620667956	WITHOUT_CLASSIFICATION	0.00595563793320448	DESIGN
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9964272533042036	WITHOUT_CLASSIFICATION	0.00357274669579635	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993327871956816	WITHOUT_CLASSIFICATION	6.67212804318324E-4	DESIGN
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.8053714721093098	WITHOUT_CLASSIFICATION	0.1946285278906902	DESIGN
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999447004822659	WITHOUT_CLASSIFICATION	5.5299517734124575E-5	DESIGN
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9984310559156416	WITHOUT_CLASSIFICATION	0.0015689440843582507	DESIGN
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9997378770559073	WITHOUT_CLASSIFICATION	2.6212294409266385E-4	DESIGN
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.999651183275255	WITHOUT_CLASSIFICATION	3.4881672474500224E-4	DESIGN
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9996717039857204	WITHOUT_CLASSIFICATION	3.2829601427967076E-4	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9991068116532665	WITHOUT_CLASSIFICATION	8.931883467335052E-4	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9289518036670854	WITHOUT_CLASSIFICATION	0.07104819633291451	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999361561696675	WITHOUT_CLASSIFICATION	6.384383033255223E-5	DESIGN
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9961787158039076	WITHOUT_CLASSIFICATION	0.00382128419609226	DESIGN
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9992647161722072	WITHOUT_CLASSIFICATION	7.352838277928049E-4	DESIGN
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9988817282957129	WITHOUT_CLASSIFICATION	0.0011182717042870637	DESIGN
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9987189883698956	WITHOUT_CLASSIFICATION	0.0012810116301044457	DESIGN
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9964273684794723	WITHOUT_CLASSIFICATION	0.0035726315205275657	DESIGN
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.999470749466978	WITHOUT_CLASSIFICATION	5.292505330220033E-4	DESIGN
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9990006489062383	WITHOUT_CLASSIFICATION	9.993510937616747E-4	DESIGN
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9976703290902379	WITHOUT_CLASSIFICATION	0.0023296709097621795	DESIGN
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.8636162500864114	WITHOUT_CLASSIFICATION	0.13638374991358856	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9998808005191268	WITHOUT_CLASSIFICATION	1.1919948087318033E-4	DESIGN
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9987264838402805	WITHOUT_CLASSIFICATION	0.0012735161597195665	DESIGN
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.7619777458548544	WITHOUT_CLASSIFICATION	0.23802225414514552	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9990275620860272	WITHOUT_CLASSIFICATION	9.72437913972893E-4	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9990275620860272	WITHOUT_CLASSIFICATION	9.72437913972893E-4	DESIGN
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.8006076494280978	WITHOUT_CLASSIFICATION	0.1993923505719021	DESIGN
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9930985437098021	WITHOUT_CLASSIFICATION	0.006901456290197949	DESIGN
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9986871164710209	WITHOUT_CLASSIFICATION	0.0013128835289791636	DESIGN
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9997562992975104	WITHOUT_CLASSIFICATION	2.4370070248948449E-4	DESIGN
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999197282692927	WITHOUT_CLASSIFICATION	8.027173070733904E-5	DESIGN
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.999636352543999	WITHOUT_CLASSIFICATION	3.636474560011359E-4	DESIGN
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9979762294403011	WITHOUT_CLASSIFICATION	0.0020237705596989346	DESIGN
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9973264871671017	WITHOUT_CLASSIFICATION	0.0026735128328982476	DESIGN
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999090453908637	WITHOUT_CLASSIFICATION	9.095460913627703E-5	DESIGN
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.999258832570182	WITHOUT_CLASSIFICATION	7.411674298179587E-4	DESIGN
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9989377918395799	WITHOUT_CLASSIFICATION	0.0010622081604201466	DESIGN
// A collection of components...	WITHOUT_CLASSIFICATION	0.9983421665916428	WITHOUT_CLASSIFICATION	0.0016578334083572088	DESIGN
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9983421665916428	WITHOUT_CLASSIFICATION	0.0016578334083572088	DESIGN
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999964515573914	WITHOUT_CLASSIFICATION	3.5484426087435215E-6	DESIGN
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9961373757369639	WITHOUT_CLASSIFICATION	0.0038626242630359444	DESIGN
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9993415763603893	WITHOUT_CLASSIFICATION	6.584236396107045E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9329095155763198	WITHOUT_CLASSIFICATION	0.06709048442368014	DESIGN
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999409249596849	WITHOUT_CLASSIFICATION	5.907504031511157E-5	DESIGN
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9997874553958513	WITHOUT_CLASSIFICATION	2.1254460414855606E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993435798086892	WITHOUT_CLASSIFICATION	6.56420191310805E-4	DESIGN
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9993206126393981	WITHOUT_CLASSIFICATION	6.793873606019616E-4	DESIGN
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9941363958589391	WITHOUT_CLASSIFICATION	0.00586360414106092	DESIGN
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9998570053643169	WITHOUT_CLASSIFICATION	1.4299463568309952E-4	DESIGN
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9991909404366337	WITHOUT_CLASSIFICATION	8.090595633662213E-4	DESIGN
/*implied*/	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9996323492337613	WITHOUT_CLASSIFICATION	3.676507662387763E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993435798086892	WITHOUT_CLASSIFICATION	6.56420191310805E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993435798086892	WITHOUT_CLASSIFICATION	6.56420191310805E-4	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9997917697423344	WITHOUT_CLASSIFICATION	2.0823025766547682E-4	DESIGN
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9955572418193785	WITHOUT_CLASSIFICATION	0.004442758180621399	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9977313759725054	WITHOUT_CLASSIFICATION	0.0022686240274945764	DESIGN
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9987873978627677	WITHOUT_CLASSIFICATION	0.0012126021372323547	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9977797730575928	WITHOUT_CLASSIFICATION	0.0022202269424073024	DESIGN
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9963959982802201	WITHOUT_CLASSIFICATION	0.003604001719780045	DESIGN
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9858968939645991	WITHOUT_CLASSIFICATION	0.014103106035400843	DESIGN
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.8981099948205814	WITHOUT_CLASSIFICATION	0.1018900051794186	DESIGN
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9973829213209751	WITHOUT_CLASSIFICATION	0.0026170786790249163	DESIGN
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9957413011772026	WITHOUT_CLASSIFICATION	0.004258698822797398	DESIGN
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9899932053571984	WITHOUT_CLASSIFICATION	0.010006794642801643	DESIGN
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9950173956324843	WITHOUT_CLASSIFICATION	0.004982604367515767	DESIGN
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9995000937629522	WITHOUT_CLASSIFICATION	4.999062370477986E-4	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9997465502528239	WITHOUT_CLASSIFICATION	2.534497471760635E-4	DESIGN
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997174844788881	WITHOUT_CLASSIFICATION	2.8251552111192195E-4	DESIGN
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999412821048695	WITHOUT_CLASSIFICATION	5.871789513049288E-5	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9983127645036872	WITHOUT_CLASSIFICATION	0.0016872354963128357	DESIGN
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9973675834603662	WITHOUT_CLASSIFICATION	0.002632416539633772	DESIGN
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9982173915024605	WITHOUT_CLASSIFICATION	0.0017826084975395156	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978525900788145	WITHOUT_CLASSIFICATION	0.002147409921185487	DESIGN
//TODO:	WITHOUT_CLASSIFICATION	0.9848456624490459	WITHOUT_CLASSIFICATION	0.015154337550953951	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9992861887521542	WITHOUT_CLASSIFICATION	7.138112478457004E-4	DESIGN
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999987958188707	WITHOUT_CLASSIFICATION	1.2041811293271016E-6	DESIGN
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9992716267698594	WITHOUT_CLASSIFICATION	7.283732301405885E-4	DESIGN
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9975435471241435	WITHOUT_CLASSIFICATION	0.002456452875856573	DESIGN
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999452753145439	WITHOUT_CLASSIFICATION	5.472468545596955E-5	DESIGN
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.999849580157491	WITHOUT_CLASSIFICATION	1.5041984250900123E-4	DESIGN
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9998690226081393	WITHOUT_CLASSIFICATION	1.3097739186068838E-4	DESIGN
// Get the function name node.	WITHOUT_CLASSIFICATION	0.999977097214359	WITHOUT_CLASSIFICATION	2.2902785640982397E-5	DESIGN
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.6746283572130723	DESIGN	0.32537164278692765	WITHOUT_CLASSIFICATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9987609441849771	WITHOUT_CLASSIFICATION	0.001239055815022977	DESIGN
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9808375841933287	WITHOUT_CLASSIFICATION	0.019162415806671315	DESIGN
// Dialect function	WITHOUT_CLASSIFICATION	0.9998887676893744	WITHOUT_CLASSIFICATION	1.1123231062562315E-4	DESIGN
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9991106878625987	WITHOUT_CLASSIFICATION	8.893121374013202E-4	DESIGN
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9998762214425936	WITHOUT_CLASSIFICATION	1.2377855740648385E-4	DESIGN
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9988694862214862	WITHOUT_CLASSIFICATION	0.0011305137785137902	DESIGN
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9994085620235852	WITHOUT_CLASSIFICATION	5.914379764147616E-4	DESIGN
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9981289886144916	WITHOUT_CLASSIFICATION	0.00187101138550846	DESIGN
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9998150025953283	WITHOUT_CLASSIFICATION	1.8499740467180673E-4	DESIGN
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9977936745817241	WITHOUT_CLASSIFICATION	0.00220632541827597	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999147809700243	WITHOUT_CLASSIFICATION	8.521902997568083E-5	DESIGN
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999027963386632	WITHOUT_CLASSIFICATION	9.720366133680538E-5	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9996049837189672	WITHOUT_CLASSIFICATION	3.950162810327497E-4	DESIGN
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999022985864464	WITHOUT_CLASSIFICATION	9.770141355356839E-5	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9996049837189672	WITHOUT_CLASSIFICATION	3.950162810327497E-4	DESIGN
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9998718434027618	WITHOUT_CLASSIFICATION	1.2815659723830768E-4	DESIGN
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9996397828277863	WITHOUT_CLASSIFICATION	3.6021717221371727E-4	DESIGN
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9960697902441343	WITHOUT_CLASSIFICATION	0.003930209755865578	DESIGN
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999101193235937	WITHOUT_CLASSIFICATION	8.988067640624979E-5	DESIGN
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9991572673206345	WITHOUT_CLASSIFICATION	8.427326793654446E-4	DESIGN
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9960697902441343	WITHOUT_CLASSIFICATION	0.003930209755865578	DESIGN
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999410545463591	WITHOUT_CLASSIFICATION	5.894545364098328E-5	DESIGN
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9985465571113038	WITHOUT_CLASSIFICATION	0.0014534428886962191	DESIGN
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999630958009654	WITHOUT_CLASSIFICATION	3.6904199034585286E-5	DESIGN
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9990618936463782	WITHOUT_CLASSIFICATION	9.381063536218971E-4	DESIGN
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999920235967057	WITHOUT_CLASSIFICATION	7.976403294340424E-6	DESIGN
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9987641523758256	WITHOUT_CLASSIFICATION	0.0012358476241743908	DESIGN
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9998282069035073	WITHOUT_CLASSIFICATION	1.717930964926701E-4	DESIGN
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9830359949794598	DESIGN	0.016964005020540157	WITHOUT_CLASSIFICATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999267328748036	WITHOUT_CLASSIFICATION	7.326712519649393E-5	DESIGN
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9995721468801254	WITHOUT_CLASSIFICATION	4.278531198746295E-4	DESIGN
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.999947712257599	WITHOUT_CLASSIFICATION	5.2287742401062524E-5	DESIGN
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9998530741907923	WITHOUT_CLASSIFICATION	1.4692580920780076E-4	DESIGN
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9991862099661152	WITHOUT_CLASSIFICATION	8.137900338847775E-4	DESIGN
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.6066698166838247	WITHOUT_CLASSIFICATION	0.3933301833161752	DESIGN
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9984398117788162	WITHOUT_CLASSIFICATION	0.0015601882211837394	DESIGN
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.99747809756422	WITHOUT_CLASSIFICATION	0.002521902435779975	DESIGN
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9830731332518542	WITHOUT_CLASSIFICATION	0.016926866748145846	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9594078676832472	WITHOUT_CLASSIFICATION	0.040592132316752745	DESIGN
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9983606240196156	WITHOUT_CLASSIFICATION	0.001639375980384542	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999431862301876	WITHOUT_CLASSIFICATION	5.681376981238377E-5	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9949758493830944	WITHOUT_CLASSIFICATION	0.005024150616905655	DESIGN
//default mode	WITHOUT_CLASSIFICATION	0.9916705541702022	WITHOUT_CLASSIFICATION	0.008329445829797747	DESIGN
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9986865402785025	WITHOUT_CLASSIFICATION	0.001313459721497536	DESIGN
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9925421078199028	WITHOUT_CLASSIFICATION	0.007457892180097242	DESIGN
//after reset!	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.98746803037918	WITHOUT_CLASSIFICATION	0.012531969620820003	DESIGN
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999932719034605	WITHOUT_CLASSIFICATION	6.728096539368938E-6	DESIGN
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9998126658135988	WITHOUT_CLASSIFICATION	1.873341864010365E-4	DESIGN
//if its "id"	WITHOUT_CLASSIFICATION	0.9983512979015926	WITHOUT_CLASSIFICATION	0.001648702098407422	DESIGN
//or its the id property name	WITHOUT_CLASSIFICATION	0.999676831241122	WITHOUT_CLASSIFICATION	3.2316875887789697E-4	DESIGN
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9984859254587879	WITHOUT_CLASSIFICATION	0.001514074541212184	DESIGN
//important!!	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9984859254587879	WITHOUT_CLASSIFICATION	0.001514074541212184	DESIGN
// an association	WITHOUT_CLASSIFICATION	0.9995357296503675	WITHOUT_CLASSIFICATION	4.642703496324982E-4	DESIGN
//allow index() function:	WITHOUT_CLASSIFICATION	0.9983127645036872	WITHOUT_CLASSIFICATION	0.0016872354963128357	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9637999098468745	WITHOUT_CLASSIFICATION	0.036200090153125475	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999431862301876	WITHOUT_CLASSIFICATION	5.681376981238377E-5	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
// collections of values	WITHOUT_CLASSIFICATION	0.9999601242627155	WITHOUT_CLASSIFICATION	3.9875737284415005E-5	DESIGN
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.990269674009128	WITHOUT_CLASSIFICATION	0.009730325990872028	DESIGN
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9946244938782999	WITHOUT_CLASSIFICATION	0.00537550612170016	DESIGN
//special case	WITHOUT_CLASSIFICATION	0.9995662893932803	WITHOUT_CLASSIFICATION	4.3371060671969084E-4	DESIGN
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999804841296634	WITHOUT_CLASSIFICATION	1.9515870336480167E-5	DESIGN
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9858666742973375	WITHOUT_CLASSIFICATION	0.01413332570266251	DESIGN
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.6946847868652074	WITHOUT_CLASSIFICATION	0.30531521313479265	DESIGN
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9980179997940778	WITHOUT_CLASSIFICATION	0.0019820002059221663	DESIGN
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9989980351243233	WITHOUT_CLASSIFICATION	0.0010019648756766685	DESIGN
//register collection role	WITHOUT_CLASSIFICATION	0.991551154674528	WITHOUT_CLASSIFICATION	0.008448845325472019	DESIGN
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9926936585870499	WITHOUT_CLASSIFICATION	0.007306341412950074	DESIGN
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9973675834603662	WITHOUT_CLASSIFICATION	0.002632416539633772	DESIGN
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9983127645036872	WITHOUT_CLASSIFICATION	0.0016872354963128357	DESIGN
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9992543592146891	WITHOUT_CLASSIFICATION	7.456407853109954E-4	DESIGN
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9998177643461544	WITHOUT_CLASSIFICATION	1.8223565384550144E-4	DESIGN
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9993386532964221	WITHOUT_CLASSIFICATION	6.613467035778535E-4	DESIGN
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9978733678271053	WITHOUT_CLASSIFICATION	0.0021266321728947023	DESIGN
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9968199907494015	WITHOUT_CLASSIFICATION	0.0031800092505985204	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9973675834603662	WITHOUT_CLASSIFICATION	0.002632416539633772	DESIGN
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9695533518252941	WITHOUT_CLASSIFICATION	0.03044664817470586	DESIGN
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9952957431800212	WITHOUT_CLASSIFICATION	0.004704256819978711	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9971342990879535	WITHOUT_CLASSIFICATION	0.0028657009120464606	DESIGN
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9959568078084666	WITHOUT_CLASSIFICATION	0.004043192191533372	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9962364366832058	WITHOUT_CLASSIFICATION	0.0037635633167941804	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9962364366832058	WITHOUT_CLASSIFICATION	0.0037635633167941804	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9996953247529122	WITHOUT_CLASSIFICATION	3.0467524708780515E-4	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9962364366832058	WITHOUT_CLASSIFICATION	0.0037635633167941804	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9962364366832058	WITHOUT_CLASSIFICATION	0.0037635633167941804	DESIGN
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9968632785619818	WITHOUT_CLASSIFICATION	0.0031367214380183498	DESIGN
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999984557414424	WITHOUT_CLASSIFICATION	1.5442585575042045E-6	DESIGN
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9997194703764773	WITHOUT_CLASSIFICATION	2.8052962352266716E-4	DESIGN
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9997194703764773	WITHOUT_CLASSIFICATION	2.8052962352266716E-4	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9958582669944055	WITHOUT_CLASSIFICATION	0.004141733005594586	DESIGN
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9951963363486463	WITHOUT_CLASSIFICATION	0.00480366365135356	DESIGN
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9959679907788863	WITHOUT_CLASSIFICATION	0.00403200922111376	DESIGN
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999102355417576	WITHOUT_CLASSIFICATION	8.976445824236723E-5	DESIGN
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9941141719205314	WITHOUT_CLASSIFICATION	0.005885828079468626	DESIGN
//Cope with [,]	WITHOUT_CLASSIFICATION	0.995876844445554	WITHOUT_CLASSIFICATION	0.004123155554446047	DESIGN
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9990515493917491	WITHOUT_CLASSIFICATION	9.484506082508831E-4	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.997113201795974	WITHOUT_CLASSIFICATION	0.0028867982040259484	DESIGN
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9951928537960013	WITHOUT_CLASSIFICATION	0.004807146203998749	DESIGN
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.999893923464366	WITHOUT_CLASSIFICATION	1.0607653563392908E-4	DESIGN
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9936932930269581	WITHOUT_CLASSIFICATION	0.006306706973041916	DESIGN
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9883909583122094	WITHOUT_CLASSIFICATION	0.011609041687790676	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999861978108632	WITHOUT_CLASSIFICATION	1.3802189136877873E-5	DESIGN
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9949304749945052	WITHOUT_CLASSIFICATION	0.0050695250054948095	DESIGN
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9389517962627649	WITHOUT_CLASSIFICATION	0.06104820373723511	DESIGN
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9927875089445023	WITHOUT_CLASSIFICATION	0.007212491055497737	DESIGN
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9985688647314642	WITHOUT_CLASSIFICATION	0.0014311352685357798	DESIGN
// Add any joins	WITHOUT_CLASSIFICATION	0.9994585519929349	WITHOUT_CLASSIFICATION	5.414480070651061E-4	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999861978108632	WITHOUT_CLASSIFICATION	1.3802189136877873E-5	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9949758493830944	WITHOUT_CLASSIFICATION	0.005024150616905655	DESIGN
//path expression	WITHOUT_CLASSIFICATION	0.9991597738769683	WITHOUT_CLASSIFICATION	8.402261230315865E-4	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9993813061664425	WITHOUT_CLASSIFICATION	6.186938335575516E-4	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9990511937475309	WITHOUT_CLASSIFICATION	9.488062524690449E-4	DESIGN
//anything else	WITHOUT_CLASSIFICATION	0.9991560411351804	WITHOUT_CLASSIFICATION	8.439588648196018E-4	DESIGN
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9997773115067434	WITHOUT_CLASSIFICATION	2.2268849325665405E-4	DESIGN
// careful with this!	WITHOUT_CLASSIFICATION	0.9990737988177345	WITHOUT_CLASSIFICATION	9.262011822655515E-4	DESIGN
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9997935370166225	WITHOUT_CLASSIFICATION	2.064629833774054E-4	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9998122088405241	WITHOUT_CLASSIFICATION	1.8779115947577127E-4	DESIGN
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.999301801637946	WITHOUT_CLASSIFICATION	6.981983620540532E-4	DESIGN
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9981193845860786	WITHOUT_CLASSIFICATION	0.0018806154139213475	DESIGN
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.999812471249808	WITHOUT_CLASSIFICATION	1.8752875019208988E-4	DESIGN
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9986080218652466	WITHOUT_CLASSIFICATION	0.0013919781347534882	DESIGN
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9996304398545333	WITHOUT_CLASSIFICATION	3.695601454667217E-4	DESIGN
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9989646647477533	WITHOUT_CLASSIFICATION	0.0010353352522468463	DESIGN
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9997420847969808	WITHOUT_CLASSIFICATION	2.579152030191771E-4	DESIGN
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9998313545795148	WITHOUT_CLASSIFICATION	1.6864542048519778E-4	DESIGN
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999618439186863	WITHOUT_CLASSIFICATION	3.815608131375193E-5	DESIGN
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9984492138185163	WITHOUT_CLASSIFICATION	0.0015507861814836553	DESIGN
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9997366379283945	WITHOUT_CLASSIFICATION	2.633620716054794E-4	DESIGN
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9982308224851214	WITHOUT_CLASSIFICATION	0.0017691775148786092	DESIGN
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9964407424175046	WITHOUT_CLASSIFICATION	0.003559257582495533	DESIGN
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9997767746632649	WITHOUT_CLASSIFICATION	2.2322533673520113E-4	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9998122088405241	WITHOUT_CLASSIFICATION	1.8779115947577127E-4	DESIGN
//ignore whitespace	WITHOUT_CLASSIFICATION	0.997832896863542	WITHOUT_CLASSIFICATION	0.0021671031364580125	DESIGN
//do replacements	WITHOUT_CLASSIFICATION	0.9983042880968788	WITHOUT_CLASSIFICATION	0.001695711903121241	DESIGN
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9907244226635757	WITHOUT_CLASSIFICATION	0.009275577336424248	DESIGN
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9965028048829756	WITHOUT_CLASSIFICATION	0.0034971951170243314	DESIGN
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993327871956816	WITHOUT_CLASSIFICATION	6.67212804318324E-4	DESIGN
//hilo params	WITHOUT_CLASSIFICATION	0.9972101600425113	WITHOUT_CLASSIFICATION	0.0027898399574887225	DESIGN
//sql = query;	WITHOUT_CLASSIFICATION	0.9983202755883487	WITHOUT_CLASSIFICATION	0.0016797244116513216	DESIGN
// performance opt	WITHOUT_CLASSIFICATION	0.9957878533792022	WITHOUT_CLASSIFICATION	0.004212146620797742	DESIGN
//sql = update;	WITHOUT_CLASSIFICATION	0.9983202755883487	WITHOUT_CLASSIFICATION	0.0016797244116513216	DESIGN
//hilo config	WITHOUT_CLASSIFICATION	0.9981214423734899	WITHOUT_CLASSIFICATION	0.0018785576265101446	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9995323674160361	WITHOUT_CLASSIFICATION	4.6763258396381215E-4	DESIGN
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.999294193495369	WITHOUT_CLASSIFICATION	7.058065046311351E-4	DESIGN
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9805390950920646	WITHOUT_CLASSIFICATION	0.019460904907935384	DESIGN
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9998155826529347	WITHOUT_CLASSIFICATION	1.8441734706540488E-4	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9993813432229555	WITHOUT_CLASSIFICATION	6.186567770445241E-4	DESIGN
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9998708932012934	WITHOUT_CLASSIFICATION	1.2910679870660748E-4	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9941575636777051	WITHOUT_CLASSIFICATION	0.005842436322294758	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9995323674160361	WITHOUT_CLASSIFICATION	4.6763258396381215E-4	DESIGN
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9981853173147776	WITHOUT_CLASSIFICATION	0.0018146826852224922	DESIGN
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9994542492305594	WITHOUT_CLASSIFICATION	5.457507694406321E-4	DESIGN
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.999751178335548	WITHOUT_CLASSIFICATION	2.4882166445196305E-4	DESIGN
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9997956317777309	WITHOUT_CLASSIFICATION	2.0436822226915712E-4	DESIGN
// the default...	WITHOUT_CLASSIFICATION	0.999392495872879	WITHOUT_CLASSIFICATION	6.075041271208856E-4	DESIGN
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9920998464773321	WITHOUT_CLASSIFICATION	0.007900153522667881	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9993813432229555	WITHOUT_CLASSIFICATION	6.186567770445241E-4	DESIGN
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999463818667396	WITHOUT_CLASSIFICATION	5.3618133260355835E-5	DESIGN
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998014900502301	WITHOUT_CLASSIFICATION	1.9850994976980044E-4	DESIGN
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998612914649575	WITHOUT_CLASSIFICATION	1.387085350425611E-4	DESIGN
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992820882532607	WITHOUT_CLASSIFICATION	7.179117467392094E-4	DESIGN
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992820882532607	WITHOUT_CLASSIFICATION	7.179117467392094E-4	DESIGN
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992820882532607	WITHOUT_CLASSIFICATION	7.179117467392094E-4	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9996690079699776	WITHOUT_CLASSIFICATION	3.309920300224162E-4	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9996690079699776	WITHOUT_CLASSIFICATION	3.309920300224162E-4	DESIGN
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9749243726168191	WITHOUT_CLASSIFICATION	0.025075627383180955	DESIGN
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9969402176862963	WITHOUT_CLASSIFICATION	0.0030597823137037063	DESIGN
// scroll ahead	WITHOUT_CLASSIFICATION	0.9992640941906915	WITHOUT_CLASSIFICATION	7.359058093085302E-4	DESIGN
// scroll backward	WITHOUT_CLASSIFICATION	0.9992626446490355	WITHOUT_CLASSIFICATION	7.373553509645458E-4	DESIGN
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9957966419375573	WITHOUT_CLASSIFICATION	0.004203358062442642	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992927571339894	WITHOUT_CLASSIFICATION	7.072428660106077E-4	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999456805486253	WITHOUT_CLASSIFICATION	5.43194513746981E-4	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993327871956816	WITHOUT_CLASSIFICATION	6.67212804318324E-4	DESIGN
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9990958840470929	WITHOUT_CLASSIFICATION	9.041159529071138E-4	DESIGN
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996433003609564	WITHOUT_CLASSIFICATION	3.5669963904363434E-4	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992927571339894	WITHOUT_CLASSIFICATION	7.072428660106077E-4	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999456805486253	WITHOUT_CLASSIFICATION	5.43194513746981E-4	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993327871956816	WITHOUT_CLASSIFICATION	6.67212804318324E-4	DESIGN
// Caches	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
//Generators:	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9997705803205736	WITHOUT_CLASSIFICATION	2.2941967942648935E-4	DESIGN
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9997956191387382	WITHOUT_CLASSIFICATION	2.0438086126176052E-4	DESIGN
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9972427376216232	WITHOUT_CLASSIFICATION	0.0027572623783768332	DESIGN
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999724458634094	WITHOUT_CLASSIFICATION	2.7554136590674688E-5	DESIGN
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9994728418644014	WITHOUT_CLASSIFICATION	5.271581355985559E-4	DESIGN
//checking for named queries	WITHOUT_CLASSIFICATION	0.9984172880259293	WITHOUT_CLASSIFICATION	0.0015827119740706832	DESIGN
//stats	WITHOUT_CLASSIFICATION	0.9993675444271637	WITHOUT_CLASSIFICATION	6.324555728361998E-4	DESIGN
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.999525275300188	WITHOUT_CLASSIFICATION	4.747246998120599E-4	DESIGN
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9996107836381981	WITHOUT_CLASSIFICATION	3.892163618018218E-4	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9980133948705738	WITHOUT_CLASSIFICATION	0.0019866051294260773	DESIGN
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9652707548286192	WITHOUT_CLASSIFICATION	0.034729245171380846	DESIGN
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9991111319368885	WITHOUT_CLASSIFICATION	8.888680631114581E-4	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9998900847001163	WITHOUT_CLASSIFICATION	1.0991529988362971E-4	DESIGN
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.997883660592932	WITHOUT_CLASSIFICATION	0.002116339407067969	DESIGN
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9907759000786616	WITHOUT_CLASSIFICATION	0.0092240999213384	DESIGN
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
// for backward-compatability	WITHOUT_CLASSIFICATION	0.999453407376604	WITHOUT_CLASSIFICATION	5.465926233960059E-4	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9985344940558922	WITHOUT_CLASSIFICATION	0.001465505944107722	DESIGN
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.999349928743902	WITHOUT_CLASSIFICATION	6.500712560979802E-4	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9981416398082947	WITHOUT_CLASSIFICATION	0.0018583601917052314	DESIGN
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9952082478485841	WITHOUT_CLASSIFICATION	0.004791752151415903	DESIGN
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9960698981589938	WITHOUT_CLASSIFICATION	0.003930101841006215	DESIGN
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9998049793834508	WITHOUT_CLASSIFICATION	1.9502061654924085E-4	DESIGN
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.987460016848169	WITHOUT_CLASSIFICATION	0.012539983151831073	DESIGN
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999258832570182	WITHOUT_CLASSIFICATION	7.411674298179587E-4	DESIGN
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991467035855301	WITHOUT_CLASSIFICATION	8.532964144699165E-4	DESIGN
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.5960018036692312	DESIGN	0.4039981963307689	WITHOUT_CLASSIFICATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995493990306268	WITHOUT_CLASSIFICATION	4.506009693731702E-4	DESIGN
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999752865827586	WITHOUT_CLASSIFICATION	2.471341724140074E-4	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9988399982307868	WITHOUT_CLASSIFICATION	0.0011600017692132683	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9988399982307868	WITHOUT_CLASSIFICATION	0.0011600017692132683	DESIGN
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9998709965547079	WITHOUT_CLASSIFICATION	1.290034452921872E-4	DESIGN
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999783432598809	WITHOUT_CLASSIFICATION	2.165674011911788E-5	DESIGN
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999041822055007	WITHOUT_CLASSIFICATION	9.581779449940395E-5	DESIGN
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9973675834603662	WITHOUT_CLASSIFICATION	0.002632416539633772	DESIGN
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9979810533844936	WITHOUT_CLASSIFICATION	0.0020189466155063384	DESIGN
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999174788868066	WITHOUT_CLASSIFICATION	8.25211131934242E-5	DESIGN
//for EJB3	WITHOUT_CLASSIFICATION	0.9996073356871128	WITHOUT_CLASSIFICATION	3.9266431288712596E-4	DESIGN
// just ignore	WITHOUT_CLASSIFICATION	0.9987632761672249	WITHOUT_CLASSIFICATION	0.0012367238327750895	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9991349433639374	WITHOUT_CLASSIFICATION	8.650566360626802E-4	DESIGN
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993472475856581	WITHOUT_CLASSIFICATION	6.527524143418907E-4	DESIGN
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993472475856581	WITHOUT_CLASSIFICATION	6.527524143418907E-4	DESIGN
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993472475856581	WITHOUT_CLASSIFICATION	6.527524143418907E-4	DESIGN
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993472475856581	WITHOUT_CLASSIFICATION	6.527524143418907E-4	DESIGN
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993472475856581	WITHOUT_CLASSIFICATION	6.527524143418907E-4	DESIGN
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993472475856581	WITHOUT_CLASSIFICATION	6.527524143418907E-4	DESIGN
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993472475856581	WITHOUT_CLASSIFICATION	6.527524143418907E-4	DESIGN
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992484845822278	WITHOUT_CLASSIFICATION	7.51515417772143E-4	DESIGN
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993472475856581	WITHOUT_CLASSIFICATION	6.527524143418907E-4	DESIGN
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993472475856581	WITHOUT_CLASSIFICATION	6.527524143418907E-4	DESIGN
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993472475856581	WITHOUT_CLASSIFICATION	6.527524143418907E-4	DESIGN
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9919280038326362	WITHOUT_CLASSIFICATION	0.008071996167363763	DESIGN
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9986323050014009	WITHOUT_CLASSIFICATION	0.0013676949985991953	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9938348666475234	WITHOUT_CLASSIFICATION	0.00616513335247663	DESIGN
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9998030370999973	WITHOUT_CLASSIFICATION	1.9696290000279849E-4	DESIGN
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9726495959223853	WITHOUT_CLASSIFICATION	0.027350404077614684	DESIGN
// not for internal use:	WITHOUT_CLASSIFICATION	0.9967796372743895	WITHOUT_CLASSIFICATION	0.003220362725610498	DESIGN
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9919925414107172	WITHOUT_CLASSIFICATION	0.008007458589282757	DESIGN
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.882682103581593	WITHOUT_CLASSIFICATION	0.11731789641840695	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9938348666475234	WITHOUT_CLASSIFICATION	0.00616513335247663	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9938348666475234	WITHOUT_CLASSIFICATION	0.00616513335247663	DESIGN
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9884021639686491	WITHOUT_CLASSIFICATION	0.011597836031350879	DESIGN
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9997764946920721	WITHOUT_CLASSIFICATION	2.2350530792787697E-4	DESIGN
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9882092010065591	WITHOUT_CLASSIFICATION	0.011790798993440847	DESIGN
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9981563000486288	WITHOUT_CLASSIFICATION	0.0018436999513712319	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.999690996737037	WITHOUT_CLASSIFICATION	3.0900326296299797E-4	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9985344940558922	WITHOUT_CLASSIFICATION	0.001465505944107722	DESIGN
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9971473762408509	WITHOUT_CLASSIFICATION	0.002852623759149112	DESIGN
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9996493226556152	WITHOUT_CLASSIFICATION	3.506773443847263E-4	DESIGN
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9991052150810903	WITHOUT_CLASSIFICATION	8.947849189097861E-4	DESIGN
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.991450285754185	WITHOUT_CLASSIFICATION	0.008549714245815033	DESIGN
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9936640092654566	WITHOUT_CLASSIFICATION	0.006335990734543464	DESIGN
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987882566131742	WITHOUT_CLASSIFICATION	0.0012117433868258558	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9987439577221441	WITHOUT_CLASSIFICATION	0.0012560422778558798	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9987439577221441	WITHOUT_CLASSIFICATION	0.0012560422778558798	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9987439577221441	WITHOUT_CLASSIFICATION	0.0012560422778558798	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9987439577221441	WITHOUT_CLASSIFICATION	0.0012560422778558798	DESIGN
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993327871956816	WITHOUT_CLASSIFICATION	6.67212804318324E-4	DESIGN
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992647622026676	WITHOUT_CLASSIFICATION	7.352377973323756E-4	DESIGN
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9997306036121044	WITHOUT_CLASSIFICATION	2.693963878956176E-4	DESIGN
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993327871956816	WITHOUT_CLASSIFICATION	6.67212804318324E-4	DESIGN
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9979267792823879	WITHOUT_CLASSIFICATION	0.002073220717612091	DESIGN
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9940387629043415	WITHOUT_CLASSIFICATION	0.005961237095658548	DESIGN
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999291062813711	WITHOUT_CLASSIFICATION	7.089371862889257E-4	DESIGN
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995556691322997	WITHOUT_CLASSIFICATION	4.443308677002998E-4	DESIGN
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9981660463842484	WITHOUT_CLASSIFICATION	0.0018339536157515905	DESIGN
// used from testsuite	WITHOUT_CLASSIFICATION	0.9035170411124273	WITHOUT_CLASSIFICATION	0.09648295888757273	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9990936114551606	WITHOUT_CLASSIFICATION	9.063885448394701E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.998582117799449	WITHOUT_CLASSIFICATION	0.0014178822005510166	DESIGN
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.988047243986886	WITHOUT_CLASSIFICATION	0.01195275601311388	DESIGN
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9989633663396578	WITHOUT_CLASSIFICATION	0.0010366336603422068	DESIGN
//no big deal	WITHOUT_CLASSIFICATION	0.9990953367039576	WITHOUT_CLASSIFICATION	9.046632960424422E-4	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9997956706206707	WITHOUT_CLASSIFICATION	2.0432937932938382E-4	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9997956706206707	WITHOUT_CLASSIFICATION	2.0432937932938382E-4	DESIGN
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9981181055382532	WITHOUT_CLASSIFICATION	0.0018818944617467954	DESIGN
// see explanation above...	WITHOUT_CLASSIFICATION	0.9998343522568659	WITHOUT_CLASSIFICATION	1.6564774313404117E-4	DESIGN
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9997838776474528	WITHOUT_CLASSIFICATION	2.1612235254716265E-4	DESIGN
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993327871956816	WITHOUT_CLASSIFICATION	6.67212804318324E-4	DESIGN
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993327871956816	WITHOUT_CLASSIFICATION	6.67212804318324E-4	DESIGN
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9997969404370299	WITHOUT_CLASSIFICATION	2.0305956297016393E-4	DESIGN
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992820882532607	WITHOUT_CLASSIFICATION	7.179117467392094E-4	DESIGN
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999719457293078	WITHOUT_CLASSIFICATION	2.8054270692206886E-5	DESIGN
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9978020679161017	WITHOUT_CLASSIFICATION	0.0021979320838982487	DESIGN
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9989249885059688	WITHOUT_CLASSIFICATION	0.0010750114940312504	DESIGN
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.991420383328246	WITHOUT_CLASSIFICATION	0.008579616671754003	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992588732608839	WITHOUT_CLASSIFICATION	7.411267391160565E-4	DESIGN
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9989077594132029	WITHOUT_CLASSIFICATION	0.0010922405867970512	DESIGN
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9996600620243006	WITHOUT_CLASSIFICATION	3.3993797569932175E-4	DESIGN
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9995702703708004	WITHOUT_CLASSIFICATION	4.2972962919968856E-4	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9350119102342043	WITHOUT_CLASSIFICATION	0.06498808976579568	DESIGN
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9862605122474449	WITHOUT_CLASSIFICATION	0.013739487752555058	DESIGN
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9849448082508467	WITHOUT_CLASSIFICATION	0.015055191749153183	DESIGN
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9996861886007565	WITHOUT_CLASSIFICATION	3.138113992434522E-4	DESIGN
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999968698163696	WITHOUT_CLASSIFICATION	3.1301836303706043E-6	DESIGN
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999957686712241	WITHOUT_CLASSIFICATION	4.231328775876675E-6	DESIGN
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999899027753323	WITHOUT_CLASSIFICATION	1.0097224667763399E-5	DESIGN
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999751621492745	WITHOUT_CLASSIFICATION	2.4837850725401945E-5	DESIGN
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9994338825733263	WITHOUT_CLASSIFICATION	5.661174266737043E-4	DESIGN
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.998399997276314	WITHOUT_CLASSIFICATION	0.0016000027236860437	DESIGN
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.999487463695256	WITHOUT_CLASSIFICATION	5.125363047439378E-4	DESIGN
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9982771291712513	WITHOUT_CLASSIFICATION	0.0017228708287486156	DESIGN
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9998871392659399	WITHOUT_CLASSIFICATION	1.1286073406016304E-4	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9994970378950041	WITHOUT_CLASSIFICATION	5.029621049959025E-4	DESIGN
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9394214491900394	WITHOUT_CLASSIFICATION	0.060578550809960496	DESIGN
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9997108337368316	WITHOUT_CLASSIFICATION	2.891662631684346E-4	DESIGN
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9993028940734255	WITHOUT_CLASSIFICATION	6.971059265744038E-4	DESIGN
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9902726455044173	WITHOUT_CLASSIFICATION	0.009727354495582811	DESIGN
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9983127645036872	WITHOUT_CLASSIFICATION	0.0016872354963128357	DESIGN
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9953314899397223	WITHOUT_CLASSIFICATION	0.0046685100602776785	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9946286470259106	WITHOUT_CLASSIFICATION	0.005371352974089367	DESIGN
// handle empty collection	WITHOUT_CLASSIFICATION	0.9934531248959355	WITHOUT_CLASSIFICATION	0.006546875104064464	DESIGN
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9997917025263069	WITHOUT_CLASSIFICATION	2.0829747369304887E-4	DESIGN
//handle empty collections	WITHOUT_CLASSIFICATION	0.9972874006613537	WITHOUT_CLASSIFICATION	0.002712599338646252	DESIGN
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9804451656543042	WITHOUT_CLASSIFICATION	0.019554834345695805	DESIGN
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9997281686577613	WITHOUT_CLASSIFICATION	2.7183134223875155E-4	DESIGN
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9690050975400472	WITHOUT_CLASSIFICATION	0.030994902459952737	DESIGN
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9957174069373127	WITHOUT_CLASSIFICATION	0.004282593062687247	DESIGN
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999504683862735	WITHOUT_CLASSIFICATION	4.9531613726432716E-5	DESIGN
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9969700557191101	WITHOUT_CLASSIFICATION	0.0030299442808898514	DESIGN
//use the id passed in	WITHOUT_CLASSIFICATION	0.9995961148378594	WITHOUT_CLASSIFICATION	4.0388516214064335E-4	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9989496095753615	WITHOUT_CLASSIFICATION	0.001050390424638485	DESIGN
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9995396953737916	WITHOUT_CLASSIFICATION	4.603046262083638E-4	DESIGN
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9997573155083851	WITHOUT_CLASSIFICATION	2.4268449161487265E-4	DESIGN
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9991665944640726	WITHOUT_CLASSIFICATION	8.334055359272922E-4	DESIGN
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9964435510406578	WITHOUT_CLASSIFICATION	0.0035564489593422517	DESIGN
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9980381964621309	WITHOUT_CLASSIFICATION	0.001961803537869078	DESIGN
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9996762364298469	WITHOUT_CLASSIFICATION	3.2376357015312965E-4	DESIGN
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9998070566810116	WITHOUT_CLASSIFICATION	1.9294331898839914E-4	DESIGN
// look for a proxy	WITHOUT_CLASSIFICATION	0.9996436906235519	WITHOUT_CLASSIFICATION	3.5630937644815316E-4	DESIGN
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9851825185597424	WITHOUT_CLASSIFICATION	0.014817481440257676	DESIGN
//its the given optional object	WITHOUT_CLASSIFICATION	0.9993534363473772	WITHOUT_CLASSIFICATION	6.46563652622751E-4	DESIGN
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9997108195573469	WITHOUT_CLASSIFICATION	2.8918044265309294E-4	DESIGN
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9919329091696056	WITHOUT_CLASSIFICATION	0.008067090830394337	DESIGN
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9990748959088226	WITHOUT_CLASSIFICATION	9.251040911774578E-4	DESIGN
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9955189604845911	WITHOUT_CLASSIFICATION	0.004481039515408876	DESIGN
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999994624303907	WITHOUT_CLASSIFICATION	5.375696093593981E-7	DESIGN
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9205408328170044	WITHOUT_CLASSIFICATION	0.07945916718299555	DESIGN
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9996087429366183	WITHOUT_CLASSIFICATION	3.912570633817791E-4	DESIGN
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9879591194093413	WITHOUT_CLASSIFICATION	0.012040880590658679	DESIGN
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9961649567391895	WITHOUT_CLASSIFICATION	0.0038350432608104906	DESIGN
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9973675834603662	WITHOUT_CLASSIFICATION	0.002632416539633772	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999746713140416	WITHOUT_CLASSIFICATION	2.5328685958354167E-5	DESIGN
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.7932047074254556	WITHOUT_CLASSIFICATION	0.20679529257454443	DESIGN
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9972963319390077	WITHOUT_CLASSIFICATION	0.002703668060992415	DESIGN
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9998051023854747	WITHOUT_CLASSIFICATION	1.9489761452530326E-4	DESIGN
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9996695908078341	WITHOUT_CLASSIFICATION	3.3040919216577937E-4	DESIGN
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9991796755143921	WITHOUT_CLASSIFICATION	8.203244856078684E-4	DESIGN
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999893003862057	WITHOUT_CLASSIFICATION	1.0699613794210074E-5	DESIGN
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9998622548184091	WITHOUT_CLASSIFICATION	1.377451815909043E-4	DESIGN
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9966061527168356	WITHOUT_CLASSIFICATION	0.003393847283164299	DESIGN
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9997340915854435	WITHOUT_CLASSIFICATION	2.659084145564822E-4	DESIGN
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9997877319080545	WITHOUT_CLASSIFICATION	2.122680919454718E-4	DESIGN
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9958883404536477	WITHOUT_CLASSIFICATION	0.004111659546352338	DESIGN
//a composite key	WITHOUT_CLASSIFICATION	0.9984548735649443	WITHOUT_CLASSIFICATION	0.0015451264350556538	DESIGN
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9997937830798916	WITHOUT_CLASSIFICATION	2.0621692010829533E-4	DESIGN
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9323061430434542	WITHOUT_CLASSIFICATION	0.0676938569565458	DESIGN
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9945458240354218	WITHOUT_CLASSIFICATION	0.005454175964578299	DESIGN
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.99747809756422	WITHOUT_CLASSIFICATION	0.002521902435779975	DESIGN
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.8146039873596533	DESIGN	0.18539601264034658	WITHOUT_CLASSIFICATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9804711511311528	WITHOUT_CLASSIFICATION	0.019528848868847124	DESIGN
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9964040297314003	WITHOUT_CLASSIFICATION	0.0035959702685997635	DESIGN
// we found it	WITHOUT_CLASSIFICATION	0.9990632608833088	WITHOUT_CLASSIFICATION	9.367391166913333E-4	DESIGN
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9988071998414362	WITHOUT_CLASSIFICATION	0.0011928001585638235	DESIGN
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9733838043781528	WITHOUT_CLASSIFICATION	0.026616195621847343	DESIGN
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.995796109143755	WITHOUT_CLASSIFICATION	0.0042038908562450185	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9998963595518748	WITHOUT_CLASSIFICATION	1.0364044812522702E-4	DESIGN
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9983881915107126	WITHOUT_CLASSIFICATION	0.0016118084892874879	DESIGN
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9951022906160137	WITHOUT_CLASSIFICATION	0.004897709383986241	DESIGN
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9911628438522381	WITHOUT_CLASSIFICATION	0.008837156147761998	DESIGN
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9998508560529502	WITHOUT_CLASSIFICATION	1.4914394704990108E-4	DESIGN
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.999524527980276	WITHOUT_CLASSIFICATION	4.754720197239282E-4	DESIGN
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9988914791950706	WITHOUT_CLASSIFICATION	0.001108520804929383	DESIGN
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9995868920921283	WITHOUT_CLASSIFICATION	4.131079078717575E-4	DESIGN
//the criteria instance	WITHOUT_CLASSIFICATION	0.9988265075457503	WITHOUT_CLASSIFICATION	0.0011734924542497068	DESIGN
// the entity name	WITHOUT_CLASSIFICATION	0.9992509238338912	WITHOUT_CLASSIFICATION	7.49076166108757E-4	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9997842336158599	WITHOUT_CLASSIFICATION	2.1576638414011717E-4	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9997842336158599	WITHOUT_CLASSIFICATION	2.1576638414011717E-4	DESIGN
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9980990904032365	WITHOUT_CLASSIFICATION	0.0019009095967634135	DESIGN
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9993137217476646	WITHOUT_CLASSIFICATION	6.862782523354159E-4	DESIGN
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9993090862480022	WITHOUT_CLASSIFICATION	6.909137519978334E-4	DESIGN
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9956773094105071	WITHOUT_CLASSIFICATION	0.004322690589492827	DESIGN
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9975358393915091	WITHOUT_CLASSIFICATION	0.002464160608490797	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9948797453692189	WITHOUT_CLASSIFICATION	0.005120254630781149	DESIGN
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9995445584252719	WITHOUT_CLASSIFICATION	4.554415747280718E-4	DESIGN
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9998893478385681	WITHOUT_CLASSIFICATION	1.106521614318989E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9990626723250634	WITHOUT_CLASSIFICATION	9.373276749365518E-4	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9993651735410854	WITHOUT_CLASSIFICATION	6.348264589145728E-4	DESIGN
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999909782790921	WITHOUT_CLASSIFICATION	9.02172090787215E-6	DESIGN
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9982768790675828	WITHOUT_CLASSIFICATION	0.0017231209324171512	DESIGN
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999801242232782	WITHOUT_CLASSIFICATION	1.9875776721851006E-5	DESIGN
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9995957408598064	WITHOUT_CLASSIFICATION	4.0425914019363824E-4	DESIGN
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9998693882200318	WITHOUT_CLASSIFICATION	1.3061177996826954E-4	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9736276835554681	WITHOUT_CLASSIFICATION	0.026372316444531828	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9736276835554681	WITHOUT_CLASSIFICATION	0.026372316444531828	DESIGN
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9995709340804025	WITHOUT_CLASSIFICATION	4.290659195974192E-4	DESIGN
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9996680966844984	WITHOUT_CLASSIFICATION	3.319033155016273E-4	DESIGN
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9995191010336664	WITHOUT_CLASSIFICATION	4.808989663337392E-4	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9991239301863912	WITHOUT_CLASSIFICATION	8.760698136086955E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9998873570476448	WITHOUT_CLASSIFICATION	1.1264295235527702E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9993715096918081	WITHOUT_CLASSIFICATION	6.284903081919185E-4	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9993715096918081	WITHOUT_CLASSIFICATION	6.284903081919185E-4	DESIGN
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9998893244128997	WITHOUT_CLASSIFICATION	1.1067558710024627E-4	DESIGN
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9972819819709419	WITHOUT_CLASSIFICATION	0.0027180180290580086	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9995640232950309	WITHOUT_CLASSIFICATION	4.3597670496908775E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999998905347749	WITHOUT_CLASSIFICATION	1.0946522510149747E-7	DESIGN
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9107572400025193	WITHOUT_CLASSIFICATION	0.0892427599974806	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9932001105628735	WITHOUT_CLASSIFICATION	0.006799889437126479	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9988411765143892	WITHOUT_CLASSIFICATION	0.0011588234856108864	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9995646922445749	WITHOUT_CLASSIFICATION	4.353077554250918E-4	DESIGN
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9993102303407997	WITHOUT_CLASSIFICATION	6.897696592002929E-4	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9957325771718318	WITHOUT_CLASSIFICATION	0.004267422828168206	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9962065765940368	WITHOUT_CLASSIFICATION	0.003793423405963141	DESIGN
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999190550012049	WITHOUT_CLASSIFICATION	8.094499879503873E-5	DESIGN
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9994946797143884	WITHOUT_CLASSIFICATION	5.053202856116415E-4	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9977313759725054	WITHOUT_CLASSIFICATION	0.0022686240274945764	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9929478330278799	WITHOUT_CLASSIFICATION	0.007052166972120072	DESIGN
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9984859254587879	WITHOUT_CLASSIFICATION	0.001514074541212184	DESIGN
//by default	WITHOUT_CLASSIFICATION	0.9976637143385969	WITHOUT_CLASSIFICATION	0.0023362856614031675	DESIGN
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9938823411034013	WITHOUT_CLASSIFICATION	0.0061176588965987586	DESIGN
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9997238894241341	WITHOUT_CLASSIFICATION	2.761105758658208E-4	DESIGN
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9997221364526119	WITHOUT_CLASSIFICATION	2.778635473881167E-4	DESIGN
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9992110785405726	WITHOUT_CLASSIFICATION	7.889214594273637E-4	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9991717949534303	WITHOUT_CLASSIFICATION	8.28205046569659E-4	DESIGN
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9984034516578895	WITHOUT_CLASSIFICATION	0.0015965483421105419	DESIGN
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.998923853869751	WITHOUT_CLASSIFICATION	0.0010761461302489675	DESIGN
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9950363988661012	WITHOUT_CLASSIFICATION	0.004963601133898817	DESIGN
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999951674186798	WITHOUT_CLASSIFICATION	4.832581320204744E-6	DESIGN
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9853095753455882	WITHOUT_CLASSIFICATION	0.014690424654411982	DESIGN
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9690521518081647	WITHOUT_CLASSIFICATION	0.0309478481918352	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9998214085569559	WITHOUT_CLASSIFICATION	1.7859144304415247E-4	DESIGN
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9991405562947782	WITHOUT_CLASSIFICATION	8.594437052219267E-4	DESIGN
//usually useless	WITHOUT_CLASSIFICATION	0.9963233748959684	WITHOUT_CLASSIFICATION	0.003676625104031506	DESIGN
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9998705923854018	WITHOUT_CLASSIFICATION	1.294076145981455E-4	DESIGN
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9814219020740493	WITHOUT_CLASSIFICATION	0.01857809792595063	DESIGN
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9998197533985799	WITHOUT_CLASSIFICATION	1.8024660142017482E-4	DESIGN
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9971189434464752	WITHOUT_CLASSIFICATION	0.0028810565535247654	DESIGN
//may be final	WITHOUT_CLASSIFICATION	0.996804215287608	WITHOUT_CLASSIFICATION	0.003195784712392075	DESIGN
// may be final	WITHOUT_CLASSIFICATION	0.999037582977876	WITHOUT_CLASSIFICATION	9.624170221240023E-4	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9991618974781633	WITHOUT_CLASSIFICATION	8.381025218367579E-4	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9993624597826514	WITHOUT_CLASSIFICATION	6.375402173487282E-4	DESIGN
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999855865045412	WITHOUT_CLASSIFICATION	1.4413495458870968E-5	DESIGN
// ignore it...	WITHOUT_CLASSIFICATION	0.9949538295588565	WITHOUT_CLASSIFICATION	0.005046170441143532	DESIGN
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9900385896741076	WITHOUT_CLASSIFICATION	0.009961410325892402	DESIGN
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9983485977103592	WITHOUT_CLASSIFICATION	0.0016514022896408017	DESIGN
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9997049843449936	WITHOUT_CLASSIFICATION	2.9501565500647986E-4	DESIGN
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9913398707587529	WITHOUT_CLASSIFICATION	0.008660129241247113	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9991618974781633	WITHOUT_CLASSIFICATION	8.381025218367579E-4	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9993624597826514	WITHOUT_CLASSIFICATION	6.375402173487282E-4	DESIGN
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9938684265820094	WITHOUT_CLASSIFICATION	0.006131573417990594	DESIGN
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9975047123712462	WITHOUT_CLASSIFICATION	0.0024952876287539015	DESIGN
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9998416381176269	WITHOUT_CLASSIFICATION	1.5836188237312613E-4	DESIGN
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9974844435923311	WITHOUT_CLASSIFICATION	0.0025155564076689684	DESIGN
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9964772871998271	WITHOUT_CLASSIFICATION	0.003522712800172758	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.98688204724008	WITHOUT_CLASSIFICATION	0.013117952759919973	DESIGN
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9995751601797538	WITHOUT_CLASSIFICATION	4.248398202462958E-4	DESIGN
// }	WITHOUT_CLASSIFICATION	0.9995913394611201	WITHOUT_CLASSIFICATION	4.086605388799572E-4	DESIGN
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9994663466767795	WITHOUT_CLASSIFICATION	5.336533232205498E-4	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.6582501632785275	WITHOUT_CLASSIFICATION	0.3417498367214726	DESIGN
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999449260083267	WITHOUT_CLASSIFICATION	5.507399167323169E-5	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.6582501632785275	WITHOUT_CLASSIFICATION	0.3417498367214726	DESIGN
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9997898670234917	WITHOUT_CLASSIFICATION	2.1013297650840593E-4	DESIGN
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9978108436438579	WITHOUT_CLASSIFICATION	0.0021891563561421226	DESIGN
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9997898670234917	WITHOUT_CLASSIFICATION	2.1013297650840593E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994771148442293	WITHOUT_CLASSIFICATION	5.228851557706641E-4	DESIGN
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9983736474372359	WITHOUT_CLASSIFICATION	0.0016263525627641985	DESIGN
//}	WITHOUT_CLASSIFICATION	0.999404260442445	WITHOUT_CLASSIFICATION	5.957395575549622E-4	DESIGN
//}	WITHOUT_CLASSIFICATION	0.999404260442445	WITHOUT_CLASSIFICATION	5.957395575549622E-4	DESIGN
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.997571986712653	WITHOUT_CLASSIFICATION	0.0024280132873470794	DESIGN
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9976314997453386	WITHOUT_CLASSIFICATION	0.0023685002546613826	DESIGN
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.997571986712653	WITHOUT_CLASSIFICATION	0.0024280132873470794	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9983836623261167	WITHOUT_CLASSIFICATION	0.0016163376738832105	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9983127645036872	WITHOUT_CLASSIFICATION	0.0016872354963128357	DESIGN
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9805940653628022	WITHOUT_CLASSIFICATION	0.01940593463719772	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.997862643572947	WITHOUT_CLASSIFICATION	0.0021373564270529993	DESIGN
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9988830227273171	WITHOUT_CLASSIFICATION	0.0011169772726829406	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9998232954804697	WITHOUT_CLASSIFICATION	1.7670451953037745E-4	DESIGN
//columns	WITHOUT_CLASSIFICATION	0.9993675444271637	WITHOUT_CLASSIFICATION	6.324555728361998E-4	DESIGN
//SQL statements	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9660113271661007	WITHOUT_CLASSIFICATION	0.033988672833899274	DESIGN
//types	WITHOUT_CLASSIFICATION	0.9993675444271637	WITHOUT_CLASSIFICATION	6.324555728361998E-4	DESIGN
// custom sql	WITHOUT_CLASSIFICATION	0.9992525225838853	WITHOUT_CLASSIFICATION	7.474774161146523E-4	DESIGN
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9982626833045055	WITHOUT_CLASSIFICATION	0.0017373166954945058	DESIGN
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9964681501068273	WITHOUT_CLASSIFICATION	0.003531849893172704	DESIGN
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.998095104112531	WITHOUT_CLASSIFICATION	0.001904895887468988	DESIGN
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998385156602398	WITHOUT_CLASSIFICATION	1.6148433976010643E-4	DESIGN
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9984859254587879	WITHOUT_CLASSIFICATION	0.001514074541212184	DESIGN
//ELEMENT	WITHOUT_CLASSIFICATION	0.9993675444271637	WITHOUT_CLASSIFICATION	6.324555728361998E-4	DESIGN
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9991398574951276	WITHOUT_CLASSIFICATION	8.60142504872532E-4	DESIGN
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9995554668762308	WITHOUT_CLASSIFICATION	4.445331237692152E-4	DESIGN
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.999614029438233	WITHOUT_CLASSIFICATION	3.859705617670041E-4	DESIGN
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9984859254587879	WITHOUT_CLASSIFICATION	0.001514074541212184	DESIGN
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9957384647361274	WITHOUT_CLASSIFICATION	0.004261535263872668	DESIGN
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9970880597793038	WITHOUT_CLASSIFICATION	0.0029119402206962174	DESIGN
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9866074436150564	WITHOUT_CLASSIFICATION	0.01339255638494374	DESIGN
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9872062265140236	WITHOUT_CLASSIFICATION	0.012793773485976472	DESIGN
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9740768963599948	WITHOUT_CLASSIFICATION	0.02592310364000515	DESIGN
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9702670366048556	WITHOUT_CLASSIFICATION	0.02973296339514431	DESIGN
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9537827840619225	WITHOUT_CLASSIFICATION	0.04621721593807757	DESIGN
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9918276640047288	WITHOUT_CLASSIFICATION	0.008172335995271288	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.997862643572947	WITHOUT_CLASSIFICATION	0.0021373564270529993	DESIGN
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9992105417480822	WITHOUT_CLASSIFICATION	7.894582519178655E-4	DESIGN
//needed by arrays	WITHOUT_CLASSIFICATION	0.9982741808256547	WITHOUT_CLASSIFICATION	0.0017258191743454074	DESIGN
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9884419367713375	WITHOUT_CLASSIFICATION	0.011558063228662605	DESIGN
//an assertion	WITHOUT_CLASSIFICATION	0.9966971123040343	WITHOUT_CLASSIFICATION	0.003302887695965677	DESIGN
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9996940212499389	WITHOUT_CLASSIFICATION	3.0597875006111813E-4	DESIGN
//create all the new entries	WITHOUT_CLASSIFICATION	0.9997288177943644	WITHOUT_CLASSIFICATION	2.7118220563564444E-4	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9983836623261167	WITHOUT_CLASSIFICATION	0.0016163376738832105	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9983836623261167	WITHOUT_CLASSIFICATION	0.0016163376738832105	DESIGN
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9990354448116074	WITHOUT_CLASSIFICATION	9.645551883925262E-4	DESIGN
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9997288177943644	WITHOUT_CLASSIFICATION	2.7118220563564444E-4	DESIGN
//==elementType ??	WITHOUT_CLASSIFICATION	0.9997297720635298	WITHOUT_CLASSIFICATION	2.7022793647021957E-4	DESIGN
//update all the modified entries	WITHOUT_CLASSIFICATION	0.999887254561948	WITHOUT_CLASSIFICATION	1.127454380520188E-4	DESIGN
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9959788987221108	WITHOUT_CLASSIFICATION	0.004021101277889133	DESIGN
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9986916577401057	WITHOUT_CLASSIFICATION	0.0013083422598942818	DESIGN
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.660562724381881	DESIGN	0.33943727561811887	WITHOUT_CLASSIFICATION
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999990319650283	WITHOUT_CLASSIFICATION	9.680349717116635E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.998777328626854	WITHOUT_CLASSIFICATION	0.0012226713731460263	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999592500246064	WITHOUT_CLASSIFICATION	4.074997539359792E-4	DESIGN
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9982626833045055	WITHOUT_CLASSIFICATION	0.0017373166954945058	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
//Custom SQL	WITHOUT_CLASSIFICATION	0.9971395223436704	WITHOUT_CLASSIFICATION	0.0028604776563295534	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999592500246064	WITHOUT_CLASSIFICATION	4.074997539359792E-4	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9992875724982975	WITHOUT_CLASSIFICATION	7.124275017024548E-4	DESIGN
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9895399038926825	WITHOUT_CLASSIFICATION	0.01046009610731745	DESIGN
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9992975637553116	WITHOUT_CLASSIFICATION	7.024362446884398E-4	DESIGN
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9831807770811748	WITHOUT_CLASSIFICATION	0.016819222918825184	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9986182509224091	WITHOUT_CLASSIFICATION	0.0013817490775908945	DESIGN
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9983049458592169	WITHOUT_CLASSIFICATION	0.0016950541407830574	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.8856712474476883	WITHOUT_CLASSIFICATION	0.11432875255231165	DESIGN
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999833576802526	WITHOUT_CLASSIFICATION	1.664231974740694E-5	DESIGN
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9991618974781633	WITHOUT_CLASSIFICATION	8.381025218367579E-4	DESIGN
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9997444588760426	WITHOUT_CLASSIFICATION	2.555411239573857E-4	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9973675834603662	WITHOUT_CLASSIFICATION	0.002632416539633772	DESIGN
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9973675834603662	WITHOUT_CLASSIFICATION	0.002632416539633772	DESIGN
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9736169385414079	WITHOUT_CLASSIFICATION	0.026383061458592157	DESIGN
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9973752702854577	WITHOUT_CLASSIFICATION	0.0026247297145423894	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999592500246064	WITHOUT_CLASSIFICATION	4.074997539359792E-4	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9986182509224091	WITHOUT_CLASSIFICATION	0.0013817490775908945	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.8856712474476883	WITHOUT_CLASSIFICATION	0.11432875255231165	DESIGN
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9992959514448035	WITHOUT_CLASSIFICATION	7.040485551965661E-4	DESIGN
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9996367388273597	WITHOUT_CLASSIFICATION	3.632611726402611E-4	DESIGN
// discriminator column	WITHOUT_CLASSIFICATION	0.999659213566467	WITHOUT_CLASSIFICATION	3.4078643353291257E-4	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.999499597797375	WITHOUT_CLASSIFICATION	5.004022026249631E-4	DESIGN
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9997683990632336	WITHOUT_CLASSIFICATION	2.3160093676635605E-4	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9991885435659426	WITHOUT_CLASSIFICATION	8.114564340573454E-4	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9992875724982975	WITHOUT_CLASSIFICATION	7.124275017024548E-4	DESIGN
// JOINS	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9977293517935103	WITHOUT_CLASSIFICATION	0.0022706482064896636	DESIGN
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9978145161077301	WITHOUT_CLASSIFICATION	0.002185483892269872	DESIGN
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9892367529783819	WITHOUT_CLASSIFICATION	0.01076324702161815	DESIGN
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9993272405547735	WITHOUT_CLASSIFICATION	6.727594452264986E-4	DESIGN
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9988750943275766	WITHOUT_CLASSIFICATION	0.0011249056724233247	DESIGN
//render the SQL	WITHOUT_CLASSIFICATION	0.9978415808890977	WITHOUT_CLASSIFICATION	0.0021584191109023155	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994771148442293	WITHOUT_CLASSIFICATION	5.228851557706641E-4	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9943185293118921	WITHOUT_CLASSIFICATION	0.005681470688107878	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999258832570182	WITHOUT_CLASSIFICATION	7.411674298179587E-4	DESIGN
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999908728759156	WITHOUT_CLASSIFICATION	9.12712408445698E-6	DESIGN
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9942568364256799	WITHOUT_CLASSIFICATION	0.005743163574320029	DESIGN
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9987801051881229	WITHOUT_CLASSIFICATION	0.0012198948118771417	DESIGN
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9972833069560778	WITHOUT_CLASSIFICATION	0.0027166930439221832	DESIGN
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9994417190357089	WITHOUT_CLASSIFICATION	5.582809642911096E-4	DESIGN
// SQL strings	WITHOUT_CLASSIFICATION	0.9982448766747729	WITHOUT_CLASSIFICATION	0.0017551233252271355	DESIGN
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9998829857423702	WITHOUT_CLASSIFICATION	1.1701425762977648E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9991885435659426	WITHOUT_CLASSIFICATION	8.114564340573454E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999258832570182	WITHOUT_CLASSIFICATION	7.411674298179587E-4	DESIGN
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
// VERSION	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9995304764540959	WITHOUT_CLASSIFICATION	4.695235459041336E-4	DESIGN
//before add :-)	WITHOUT_CLASSIFICATION	0.9954566989110563	WITHOUT_CLASSIFICATION	0.004543301088943702	DESIGN
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9978902872038273	WITHOUT_CLASSIFICATION	0.0021097127961726635	DESIGN
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9997901547474365	WITHOUT_CLASSIFICATION	2.0984525256358057E-4	DESIGN
//note early exit here:	WITHOUT_CLASSIFICATION	0.9989281372452367	WITHOUT_CLASSIFICATION	0.0010718627547632968	DESIGN
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9996901192007918	WITHOUT_CLASSIFICATION	3.098807992083214E-4	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999860912134071	WITHOUT_CLASSIFICATION	1.3908786593002614E-5	DESIGN
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9984432932370543	WITHOUT_CLASSIFICATION	0.0015567067629456471	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9989327108726503	WITHOUT_CLASSIFICATION	0.0010672891273496154	DESIGN
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9898329180119324	WITHOUT_CLASSIFICATION	0.01016708198806769	DESIGN
//null owner ok??	WITHOUT_CLASSIFICATION	0.9988956753584396	WITHOUT_CLASSIFICATION	0.0011043246415604246	DESIGN
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999062242547052	WITHOUT_CLASSIFICATION	9.377574529482427E-5	DESIGN
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9996984902042934	WITHOUT_CLASSIFICATION	3.015097957066423E-4	DESIGN
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9525062732718051	WITHOUT_CLASSIFICATION	0.047493726728194866	DESIGN
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9978620095227103	WITHOUT_CLASSIFICATION	0.002137990477289722	DESIGN
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9988317980378855	WITHOUT_CLASSIFICATION	0.0011682019621145844	DESIGN
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9973408787016997	WITHOUT_CLASSIFICATION	0.002659121298300307	DESIGN
// ALIASES	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9990869605977337	WITHOUT_CLASSIFICATION	9.130394022663131E-4	DESIGN
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9995549316326173	WITHOUT_CLASSIFICATION	4.4506836738275477E-4	DESIGN
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9997755225015011	WITHOUT_CLASSIFICATION	2.2447749849877665E-4	DESIGN
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9978786563715861	WITHOUT_CLASSIFICATION	0.00212134362841386	DESIGN
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.6545887458563092	DESIGN	0.3454112541436909	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9955033945006148	WITHOUT_CLASSIFICATION	0.0044966054993851885	DESIGN
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9970037955766384	WITHOUT_CLASSIFICATION	0.0029962044233615703	DESIGN
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9998760779882269	WITHOUT_CLASSIFICATION	1.239220117731005E-4	DESIGN
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9396953974519224	WITHOUT_CLASSIFICATION	0.06030460254807745	DESIGN
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9996483192712738	WITHOUT_CLASSIFICATION	3.516807287261005E-4	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9992892625623006	WITHOUT_CLASSIFICATION	7.107374376994372E-4	DESIGN
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9996502579406654	WITHOUT_CLASSIFICATION	3.497420593345394E-4	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9289518036670854	WITHOUT_CLASSIFICATION	0.07104819633291451	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9974200160914299	WITHOUT_CLASSIFICATION	0.0025799839085700466	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9995071564998553	WITHOUT_CLASSIFICATION	4.928435001446981E-4	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9994540422908712	WITHOUT_CLASSIFICATION	5.459577091287641E-4	DESIGN
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9038896270162886	WITHOUT_CLASSIFICATION	0.09611037298371143	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9995071564998553	WITHOUT_CLASSIFICATION	4.928435001446981E-4	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9974200160914299	WITHOUT_CLASSIFICATION	0.0025799839085700466	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9994540422908712	WITHOUT_CLASSIFICATION	5.459577091287641E-4	DESIGN
// add the primary key	WITHOUT_CLASSIFICATION	0.9997984572891183	WITHOUT_CLASSIFICATION	2.0154271088174806E-4	DESIGN
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.999894098240883	WITHOUT_CLASSIFICATION	1.0590175911694262E-4	DESIGN
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9996444617632845	WITHOUT_CLASSIFICATION	3.5553823671545873E-4	DESIGN
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9995983988088946	WITHOUT_CLASSIFICATION	4.0160119110546204E-4	DESIGN
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.999980595366988	WITHOUT_CLASSIFICATION	1.9404633012004572E-5	DESIGN
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.8639803457306152	DESIGN	0.13601965426938475	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9961416064396275	WITHOUT_CLASSIFICATION	0.0038583935603725174	DESIGN
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9857630637347118	WITHOUT_CLASSIFICATION	0.01423693626528824	DESIGN
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9997977076282184	WITHOUT_CLASSIFICATION	2.0229237178165269E-4	DESIGN
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9949756548234837	WITHOUT_CLASSIFICATION	0.005024345176516315	DESIGN
// starting index	WITHOUT_CLASSIFICATION	0.9993034762392129	WITHOUT_CLASSIFICATION	6.965237607870346E-4	DESIGN
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999527296155302	WITHOUT_CLASSIFICATION	4.727038446985373E-5	DESIGN
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9992148270571544	WITHOUT_CLASSIFICATION	7.851729428457034E-4	DESIGN
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9985723885406473	WITHOUT_CLASSIFICATION	0.0014276114593526645	DESIGN
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9998912859950239	WITHOUT_CLASSIFICATION	1.0871400497617734E-4	DESIGN
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.997380579489568	WITHOUT_CLASSIFICATION	0.0026194205104320546	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.998774358670737	WITHOUT_CLASSIFICATION	0.0012256413292629823	DESIGN
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.999856230001544	WITHOUT_CLASSIFICATION	1.4376999845592902E-4	DESIGN
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.996299954782853	WITHOUT_CLASSIFICATION	0.003700045217146981	DESIGN
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9998866960085627	WITHOUT_CLASSIFICATION	1.1330399143727044E-4	DESIGN
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9947289636317408	WITHOUT_CLASSIFICATION	0.0052710363682592345	DESIGN
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.999990855451978	WITHOUT_CLASSIFICATION	9.14454802208603E-6	DESIGN
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9996982967111596	WITHOUT_CLASSIFICATION	3.0170328884041774E-4	DESIGN
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999848390655899	WITHOUT_CLASSIFICATION	1.5160934410060693E-5	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9998866960085627	WITHOUT_CLASSIFICATION	1.1330399143727044E-4	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9998866960085627	WITHOUT_CLASSIFICATION	1.1330399143727044E-4	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999864031562432	WITHOUT_CLASSIFICATION	1.3596843756805723E-5	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999864031562432	WITHOUT_CLASSIFICATION	1.3596843756805723E-5	DESIGN
// not supported	WITHOUT_CLASSIFICATION	0.9989072974633596	WITHOUT_CLASSIFICATION	0.0010927025366404526	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.998774358670737	WITHOUT_CLASSIFICATION	0.0012256413292629823	DESIGN
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9922236879826271	WITHOUT_CLASSIFICATION	0.007776312017372879	DESIGN
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9997759389489667	WITHOUT_CLASSIFICATION	2.2406105103332054E-4	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9815066288957423	WITHOUT_CLASSIFICATION	0.01849337110425776	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9815066288957423	WITHOUT_CLASSIFICATION	0.01849337110425776	DESIGN
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9995559850440434	WITHOUT_CLASSIFICATION	4.4401495595661016E-4	DESIGN
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9951315637991522	WITHOUT_CLASSIFICATION	0.004868436200847738	DESIGN
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9997556649614828	WITHOUT_CLASSIFICATION	2.4433503851721615E-4	DESIGN
//skip the driving table	WITHOUT_CLASSIFICATION	0.9996448827084186	WITHOUT_CLASSIFICATION	3.5511729158145674E-4	DESIGN
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.762432050839672	WITHOUT_CLASSIFICATION	0.23756794916032797	DESIGN
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.999994188932759	WITHOUT_CLASSIFICATION	5.811067240952862E-6	DESIGN
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9978184678570359	WITHOUT_CLASSIFICATION	0.002181532142964013	DESIGN
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9886391065105953	WITHOUT_CLASSIFICATION	0.011360893489404738	DESIGN
//now render the joins	WITHOUT_CLASSIFICATION	0.9971896168731278	WITHOUT_CLASSIFICATION	0.002810383126872164	DESIGN
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9941338083816211	WITHOUT_CLASSIFICATION	0.00586619161837877	DESIGN
//now render the select clause	WITHOUT_CLASSIFICATION	0.9981854308876154	WITHOUT_CLASSIFICATION	0.0018145691123845965	DESIGN
//now tie it all together	WITHOUT_CLASSIFICATION	0.9991755332599668	WITHOUT_CLASSIFICATION	8.244667400332706E-4	DESIGN
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9983127645036872	WITHOUT_CLASSIFICATION	0.0016872354963128357	DESIGN
//select SQL	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9968711437210062	WITHOUT_CLASSIFICATION	0.003128856278993869	DESIGN
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9994343058308928	WITHOUT_CLASSIFICATION	5.656941691071481E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9842834102460881	WITHOUT_CLASSIFICATION	0.015716589753912033	DESIGN
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9998958684163731	WITHOUT_CLASSIFICATION	1.0413158362687561E-4	DESIGN
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9519494520321437	WITHOUT_CLASSIFICATION	0.04805054796785636	DESIGN
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9988617851813661	WITHOUT_CLASSIFICATION	0.0011382148186338615	DESIGN
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9998125657671963	WITHOUT_CLASSIFICATION	1.8743423280364468E-4	DESIGN
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9960377224586955	WITHOUT_CLASSIFICATION	0.00396227754130456	DESIGN
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9998956303539821	WITHOUT_CLASSIFICATION	1.0436964601795808E-4	DESIGN
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9998513153883078	WITHOUT_CLASSIFICATION	1.486846116921384E-4	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9974101200338992	WITHOUT_CLASSIFICATION	0.002589879966100875	DESIGN
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999866260010856	WITHOUT_CLASSIFICATION	1.337399891453647E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999258832570182	WITHOUT_CLASSIFICATION	7.411674298179587E-4	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9989327108726503	WITHOUT_CLASSIFICATION	0.0010672891273496154	DESIGN
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9996322163737451	WITHOUT_CLASSIFICATION	3.677836262548713E-4	DESIGN
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9995549026934634	WITHOUT_CLASSIFICATION	4.450973065366802E-4	DESIGN
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999258832570182	WITHOUT_CLASSIFICATION	7.411674298179587E-4	DESIGN
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992592302426473	WITHOUT_CLASSIFICATION	7.407697573527007E-4	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9905214096334172	WITHOUT_CLASSIFICATION	0.009478590366582757	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9905214096334172	WITHOUT_CLASSIFICATION	0.009478590366582757	DESIGN
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999860419788483	WITHOUT_CLASSIFICATION	1.3958021151639104E-5	DESIGN
// try "get"	WITHOUT_CLASSIFICATION	0.9997732701730472	WITHOUT_CLASSIFICATION	2.2672982695279363E-4	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9989723025997906	WITHOUT_CLASSIFICATION	0.0010276974002093647	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9989723025997906	WITHOUT_CLASSIFICATION	0.0010276974002093647	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9961300674476357	WITHOUT_CLASSIFICATION	0.003869932552364323	DESIGN
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9980678474015531	WITHOUT_CLASSIFICATION	0.0019321525984469297	DESIGN
// do not do anything	WITHOUT_CLASSIFICATION	0.9988798211928014	WITHOUT_CLASSIFICATION	0.0011201788071986284	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.999690996737037	WITHOUT_CLASSIFICATION	3.0900326296299797E-4	DESIGN
//cant instantiate	WITHOUT_CLASSIFICATION	0.9981193845860786	WITHOUT_CLASSIFICATION	0.0018806154139213475	DESIGN
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9998177476531338	WITHOUT_CLASSIFICATION	1.82252346866231E-4	DESIGN
// otherwise:	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9984900379361695	WITHOUT_CLASSIFICATION	0.001509962063830414	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9996531001601437	WITHOUT_CLASSIFICATION	3.468998398562838E-4	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9996531001601437	WITHOUT_CLASSIFICATION	3.468998398562838E-4	DESIGN
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.999470582276885	WITHOUT_CLASSIFICATION	5.294177231149909E-4	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999493782929852	WITHOUT_CLASSIFICATION	5.062170701480341E-5	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999493782929852	WITHOUT_CLASSIFICATION	5.062170701480341E-5	DESIGN
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9996496837219062	WITHOUT_CLASSIFICATION	3.503162780937808E-4	DESIGN
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9997185682180116	WITHOUT_CLASSIFICATION	2.8143178198844086E-4	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9993675444271637	WITHOUT_CLASSIFICATION	6.324555728361998E-4	DESIGN
// Get the caller	WITHOUT_CLASSIFICATION	0.9998275261609763	WITHOUT_CLASSIFICATION	1.7247383902367158E-4	DESIGN
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999004590472232	WITHOUT_CLASSIFICATION	9.954095277681613E-5	DESIGN
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9997893843852437	WITHOUT_CLASSIFICATION	2.1061561475643322E-4	DESIGN
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9980123504117037	WITHOUT_CLASSIFICATION	0.0019876495882963315	DESIGN
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9963834425432171	WITHOUT_CLASSIFICATION	0.003616557456782895	DESIGN
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9989550102507453	WITHOUT_CLASSIFICATION	0.0010449897492547653	DESIGN
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9880947089824821	WITHOUT_CLASSIFICATION	0.01190529101751782	DESIGN
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9858400095400067	WITHOUT_CLASSIFICATION	0.014159990459993216	DESIGN
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.997819961723857	WITHOUT_CLASSIFICATION	0.0021800382761429523	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9973578499820122	WITHOUT_CLASSIFICATION	0.0026421500179878528	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9973578499820122	WITHOUT_CLASSIFICATION	0.0026421500179878528	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9973578499820122	WITHOUT_CLASSIFICATION	0.0026421500179878528	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9973578499820122	WITHOUT_CLASSIFICATION	0.0026421500179878528	DESIGN
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999185073576659	WITHOUT_CLASSIFICATION	8.149264233408792E-5	DESIGN
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.998871949982539	WITHOUT_CLASSIFICATION	0.0011280500174608696	DESIGN
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9983127645036872	WITHOUT_CLASSIFICATION	0.0016872354963128357	DESIGN
//for MySQL	WITHOUT_CLASSIFICATION	0.998185484591423	WITHOUT_CLASSIFICATION	0.0018145154085770726	DESIGN
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9990477059103169	WITHOUT_CLASSIFICATION	9.522940896830754E-4	DESIGN
//null caused some problems	WITHOUT_CLASSIFICATION	0.9951508256494804	WITHOUT_CLASSIFICATION	0.004849174350519516	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9984035436311481	WITHOUT_CLASSIFICATION	0.0015964563688518226	DESIGN
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9979225560732128	WITHOUT_CLASSIFICATION	0.0020774439267871258	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999904804637231	WITHOUT_CLASSIFICATION	9.519536276946497E-6	DESIGN
// we only release the connection	WITHOUT_CLASSIFICATION	0.9994049962292868	WITHOUT_CLASSIFICATION	5.950037707132523E-4	DESIGN
// deprecated option...	WITHOUT_CLASSIFICATION	0.9962076562396507	WITHOUT_CLASSIFICATION	0.0037923437603494137	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9991285973426187	WITHOUT_CLASSIFICATION	8.714026573811533E-4	DESIGN
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9971837612164424	WITHOUT_CLASSIFICATION	0.0028162387835577013	DESIGN
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.992758230067293	WITHOUT_CLASSIFICATION	0.007241769932706957	DESIGN
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9995642797148727	WITHOUT_CLASSIFICATION	4.3572028512723536E-4	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9991285973426187	WITHOUT_CLASSIFICATION	8.714026573811533E-4	DESIGN
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.8953063711580329	DESIGN	0.10469362884196715	WITHOUT_CLASSIFICATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9995930801920531	WITHOUT_CLASSIFICATION	4.069198079469494E-4	DESIGN
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999257616032801	WITHOUT_CLASSIFICATION	7.423839671998102E-5	DESIGN
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9985041888380736	WITHOUT_CLASSIFICATION	0.00149581116192643	DESIGN
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9993385465173331	WITHOUT_CLASSIFICATION	6.614534826667411E-4	DESIGN
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9936945006310425	WITHOUT_CLASSIFICATION	0.0063054993689575685	DESIGN
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.999331336650145	WITHOUT_CLASSIFICATION	6.686633498550631E-4	DESIGN
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.997797013015951	WITHOUT_CLASSIFICATION	0.0022029869840489765	DESIGN
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995849740920235	WITHOUT_CLASSIFICATION	4.1502590797650173E-4	DESIGN
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9976322930445374	WITHOUT_CLASSIFICATION	0.0023677069554626116	DESIGN
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995849740920235	WITHOUT_CLASSIFICATION	4.1502590797650173E-4	DESIGN
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999484881591243	WITHOUT_CLASSIFICATION	5.1511840875745E-5	DESIGN
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9962761055198747	WITHOUT_CLASSIFICATION	0.003723894480125285	DESIGN
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9995103722478857	WITHOUT_CLASSIFICATION	4.89627752114279E-4	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9998773847730794	WITHOUT_CLASSIFICATION	1.226152269204949E-4	DESIGN
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9919943483226923	WITHOUT_CLASSIFICATION	0.008005651677307699	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9997929533126713	WITHOUT_CLASSIFICATION	2.070466873287555E-4	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9995978740568017	WITHOUT_CLASSIFICATION	4.0212594319834736E-4	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9991017506325973	WITHOUT_CLASSIFICATION	8.982493674026039E-4	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9995978740568017	WITHOUT_CLASSIFICATION	4.0212594319834736E-4	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9991545882979976	WITHOUT_CLASSIFICATION	8.454117020023749E-4	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9996885571318314	WITHOUT_CLASSIFICATION	3.1144286816865116E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9995911545066871	WITHOUT_CLASSIFICATION	4.088454933128826E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9998720601342004	WITHOUT_CLASSIFICATION	1.2793986579972348E-4	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9997929533126713	WITHOUT_CLASSIFICATION	2.070466873287555E-4	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9991017506325973	WITHOUT_CLASSIFICATION	8.982493674026039E-4	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9991545882979976	WITHOUT_CLASSIFICATION	8.454117020023749E-4	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9980985207532608	WITHOUT_CLASSIFICATION	0.0019014792467391577	DESIGN
//return currentId;	WITHOUT_CLASSIFICATION	0.9973066155598993	WITHOUT_CLASSIFICATION	0.002693384440100707	DESIGN
//reset the id	WITHOUT_CLASSIFICATION	0.9985221986087125	WITHOUT_CLASSIFICATION	0.0014778013912874566	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
//reset the version	WITHOUT_CLASSIFICATION	0.9986179596411282	WITHOUT_CLASSIFICATION	0.0013820403588718601	DESIGN
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9967693066963003	WITHOUT_CLASSIFICATION	0.00323069330369967	DESIGN
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9998902533823171	WITHOUT_CLASSIFICATION	1.097466176829138E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9842834102460881	WITHOUT_CLASSIFICATION	0.015716589753912033	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9996885571318314	WITHOUT_CLASSIFICATION	3.1144286816865116E-4	DESIGN
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999652953742129	WITHOUT_CLASSIFICATION	3.4704625787057744E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9993813928887877	WITHOUT_CLASSIFICATION	6.186071112123968E-4	DESIGN
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9996883409657471	WITHOUT_CLASSIFICATION	3.1165903425298493E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9842834102460881	WITHOUT_CLASSIFICATION	0.015716589753912033	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999258832570182	WITHOUT_CLASSIFICATION	7.411674298179587E-4	DESIGN
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9968620761049306	WITHOUT_CLASSIFICATION	0.0031379238950694243	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9842834102460881	WITHOUT_CLASSIFICATION	0.015716589753912033	DESIGN
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9958973542506567	WITHOUT_CLASSIFICATION	0.004102645749343237	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9997465502528239	WITHOUT_CLASSIFICATION	2.534497471760635E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999258832570182	WITHOUT_CLASSIFICATION	7.411674298179587E-4	DESIGN
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9920798780140427	WITHOUT_CLASSIFICATION	0.007920121985957295	DESIGN
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9998037256294213	WITHOUT_CLASSIFICATION	1.9627437057872084E-4	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9992861887521542	WITHOUT_CLASSIFICATION	7.138112478457004E-4	DESIGN
// Collection Types:	WITHOUT_CLASSIFICATION	0.9990133236284783	WITHOUT_CLASSIFICATION	9.866763715217094E-4	DESIGN
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9976663279870198	WITHOUT_CLASSIFICATION	0.0023336720129802126	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9984236729130186	WITHOUT_CLASSIFICATION	0.0015763270869814418	DESIGN
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9997373952250842	WITHOUT_CLASSIFICATION	2.62604774915861E-4	DESIGN
//value is the entity name	WITHOUT_CLASSIFICATION	0.9985828137188487	WITHOUT_CLASSIFICATION	0.0014171862811513277	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9993832496964946	WITHOUT_CLASSIFICATION	6.1675030350546E-4	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9993675444271637	WITHOUT_CLASSIFICATION	6.324555728361998E-4	DESIGN
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9985828137188487	WITHOUT_CLASSIFICATION	0.0014171862811513277	DESIGN
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9906424069863841	WITHOUT_CLASSIFICATION	0.009357593013615877	DESIGN
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9983127645036872	WITHOUT_CLASSIFICATION	0.0016872354963128357	DESIGN
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.994582343685999	WITHOUT_CLASSIFICATION	0.005417656314001112	DESIGN
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9994378300467188	WITHOUT_CLASSIFICATION	5.621699532811127E-4	DESIGN
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9998843172168825	WITHOUT_CLASSIFICATION	1.1568278311748615E-4	DESIGN
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9774945142938892	WITHOUT_CLASSIFICATION	0.022505485706110828	DESIGN
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9991958358798995	WITHOUT_CLASSIFICATION	8.041641201004574E-4	DESIGN
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9909782846571137	WITHOUT_CLASSIFICATION	0.009021715342886358	DESIGN
//TODO!!!	WITHOUT_CLASSIFICATION	0.9993675444271637	WITHOUT_CLASSIFICATION	6.324555728361998E-4	DESIGN
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.99925573999031	WITHOUT_CLASSIFICATION	7.442600096899632E-4	DESIGN
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.99925573999031	WITHOUT_CLASSIFICATION	7.442600096899632E-4	DESIGN
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9991600328547801	WITHOUT_CLASSIFICATION	8.399671452200628E-4	DESIGN
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9985413518736043	WITHOUT_CLASSIFICATION	0.0014586481263958433	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9993675444271637	WITHOUT_CLASSIFICATION	6.324555728361998E-4	DESIGN
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.999986374413474	WITHOUT_CLASSIFICATION	1.3625586525957777E-5	DESIGN
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9991296475351209	WITHOUT_CLASSIFICATION	8.703524648790895E-4	DESIGN
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999172013606616	WITHOUT_CLASSIFICATION	8.279863933835978E-5	DESIGN
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.998338027925024	WITHOUT_CLASSIFICATION	0.0016619720749759064	DESIGN
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9985313956543417	WITHOUT_CLASSIFICATION	0.001468604345658271	DESIGN
//TODO	WITHOUT_CLASSIFICATION	0.7076947860783922	WITHOUT_CLASSIFICATION	0.2923052139216078	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999147809700243	WITHOUT_CLASSIFICATION	8.521902997568083E-5	DESIGN
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.997597266566382	WITHOUT_CLASSIFICATION	0.0024027334336179924	DESIGN
//cache this	WITHOUT_CLASSIFICATION	0.9887698226155205	WITHOUT_CLASSIFICATION	0.011230177384479472	DESIGN
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9970713837103241	WITHOUT_CLASSIFICATION	0.002928616289675954	DESIGN
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.998879874543228	WITHOUT_CLASSIFICATION	0.0011201254567719235	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999101193235937	WITHOUT_CLASSIFICATION	8.988067640624979E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999258832570182	WITHOUT_CLASSIFICATION	7.411674298179587E-4	DESIGN
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9977160369595561	WITHOUT_CLASSIFICATION	0.0022839630404439403	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9945051776616762	WITHOUT_CLASSIFICATION	0.0054948223383238445	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9945051776616762	WITHOUT_CLASSIFICATION	0.0054948223383238445	DESIGN
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999965380805353	WITHOUT_CLASSIFICATION	3.4619194646749812E-6	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9984236729130186	WITHOUT_CLASSIFICATION	0.0015763270869814418	DESIGN
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.99454541371918	WITHOUT_CLASSIFICATION	0.00545458628081987	DESIGN
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9998990064590361	WITHOUT_CLASSIFICATION	1.0099354096386166E-4	DESIGN
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9675262917311986	WITHOUT_CLASSIFICATION	0.03247370826880138	DESIGN
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9993079669849849	WITHOUT_CLASSIFICATION	6.920330150150556E-4	DESIGN
//remember the uk value	WITHOUT_CLASSIFICATION	0.9991474327461741	WITHOUT_CLASSIFICATION	8.525672538258356E-4	DESIGN
//NOOP	WITHOUT_CLASSIFICATION	0.9993996603018553	WITHOUT_CLASSIFICATION	6.003396981445674E-4	DESIGN
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9973675834603662	WITHOUT_CLASSIFICATION	0.002632416539633772	DESIGN
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9987627251917311	WITHOUT_CLASSIFICATION	0.0012372748082688533	DESIGN
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9996425734646694	WITHOUT_CLASSIFICATION	3.5742653533052176E-4	DESIGN
// return false;	WITHOUT_CLASSIFICATION	0.998906968197526	WITHOUT_CLASSIFICATION	0.0010930318024739572	DESIGN
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9538329085370781	WITHOUT_CLASSIFICATION	0.04616709146292187	DESIGN
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999477215919256	WITHOUT_CLASSIFICATION	5.227840807442235E-5	DESIGN
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.999679959901107	WITHOUT_CLASSIFICATION	3.200400988929951E-4	DESIGN
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999950747715018	WITHOUT_CLASSIFICATION	4.925228498167669E-6	DESIGN
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9984294550567134	WITHOUT_CLASSIFICATION	0.001570544943286543	DESIGN
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9997567147285369	WITHOUT_CLASSIFICATION	2.432852714630368E-4	DESIGN
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9994473724057298	WITHOUT_CLASSIFICATION	5.526275942701611E-4	DESIGN
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9998992726853717	WITHOUT_CLASSIFICATION	1.007273146283067E-4	DESIGN
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9995478393035886	WITHOUT_CLASSIFICATION	4.521606964114468E-4	DESIGN
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9994664551588182	WITHOUT_CLASSIFICATION	5.335448411818897E-4	DESIGN
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9998835751233944	WITHOUT_CLASSIFICATION	1.1642487660561176E-4	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9985160931343081	WITHOUT_CLASSIFICATION	0.0014839068656918267	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9453435008311805	WITHOUT_CLASSIFICATION	0.05465649916881942	DESIGN
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.995032933036301	WITHOUT_CLASSIFICATION	0.004967066963698867	DESIGN
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999285491742498	WITHOUT_CLASSIFICATION	7.14508257502477E-5	DESIGN
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9993077153886737	WITHOUT_CLASSIFICATION	6.922846113263383E-4	DESIGN
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9982529607315697	WITHOUT_CLASSIFICATION	0.0017470392684303397	DESIGN
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9986447463230927	WITHOUT_CLASSIFICATION	0.0013552536769072556	DESIGN
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.998653884826008	WITHOUT_CLASSIFICATION	0.0013461151739919352	DESIGN
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9992927571339894	WITHOUT_CLASSIFICATION	7.072428660106077E-4	DESIGN
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9994859368414407	WITHOUT_CLASSIFICATION	5.140631585594073E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9997060400590435	WITHOUT_CLASSIFICATION	2.9395994095644367E-4	DESIGN
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.999653834994972	WITHOUT_CLASSIFICATION	3.461650050280288E-4	DESIGN
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9994782106535497	WITHOUT_CLASSIFICATION	5.217893464502698E-4	DESIGN
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.998965766446351	WITHOUT_CLASSIFICATION	0.0010342335536489711	DESIGN
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9983834173980555	WITHOUT_CLASSIFICATION	0.0016165826019445126	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9952786125055126	WITHOUT_CLASSIFICATION	0.004721387494487295	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9952786125055126	WITHOUT_CLASSIFICATION	0.004721387494487295	DESIGN
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.999845084612101	WITHOUT_CLASSIFICATION	1.5491538789909445E-4	DESIGN
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9997451129817424	WITHOUT_CLASSIFICATION	2.5488701825760395E-4	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9995396558368218	WITHOUT_CLASSIFICATION	4.603441631781988E-4	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9995396558368218	WITHOUT_CLASSIFICATION	4.603441631781988E-4	DESIGN
// use default behavior	WITHOUT_CLASSIFICATION	0.9981119788821448	WITHOUT_CLASSIFICATION	0.001888021117855272	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.997113201795974	WITHOUT_CLASSIFICATION	0.0028867982040259484	DESIGN
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.5154124409699532	WITHOUT_CLASSIFICATION	0.48458755903004685	DESIGN
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9992568223656296	WITHOUT_CLASSIFICATION	7.431776343704447E-4	DESIGN
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9995448946734816	WITHOUT_CLASSIFICATION	4.5510532651833096E-4	DESIGN
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999258832570182	WITHOUT_CLASSIFICATION	7.411674298179587E-4	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9997299002967587	WITHOUT_CLASSIFICATION	2.700997032413296E-4	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9997299002967587	WITHOUT_CLASSIFICATION	2.700997032413296E-4	DESIGN
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999258832570182	WITHOUT_CLASSIFICATION	7.411674298179587E-4	DESIGN
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999578424866818	WITHOUT_CLASSIFICATION	4.215751331821232E-5	DESIGN
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9983836623261167	WITHOUT_CLASSIFICATION	0.0016163376738832105	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9991838677400607	WITHOUT_CLASSIFICATION	8.161322599393694E-4	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9991838677400607	WITHOUT_CLASSIFICATION	8.161322599393694E-4	DESIGN
// includes last '.'	WITHOUT_CLASSIFICATION	0.9997820081207262	WITHOUT_CLASSIFICATION	2.1799187927376475E-4	DESIGN
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9998212491303391	WITHOUT_CLASSIFICATION	1.787508696608478E-4	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999422290810233	WITHOUT_CLASSIFICATION	5.77709189766676E-5	DESIGN
// first time we find match!	WITHOUT_CLASSIFICATION	0.9996644002642218	WITHOUT_CLASSIFICATION	3.35599735778239E-4	DESIGN
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9998662696813957	WITHOUT_CLASSIFICATION	1.3373031860431313E-4	DESIGN
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9928412269270293	WITHOUT_CLASSIFICATION	0.0071587730729706705	DESIGN
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.999435839012294	WITHOUT_CLASSIFICATION	5.641609877060221E-4	DESIGN
// the current iterator	WITHOUT_CLASSIFICATION	0.9998865882265813	WITHOUT_CLASSIFICATION	1.1341177341881249E-4	DESIGN
// the last used iterator	WITHOUT_CLASSIFICATION	0.9723103453148774	WITHOUT_CLASSIFICATION	0.02768965468512267	DESIGN
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9995688650417197	WITHOUT_CLASSIFICATION	4.311349582803423E-4	DESIGN
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.998130038377291	WITHOUT_CLASSIFICATION	0.0018699616227090348	DESIGN
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.973742042222249	WITHOUT_CLASSIFICATION	0.02625795777775098	DESIGN
//doable if needed	WITHOUT_CLASSIFICATION	0.9987585075630049	WITHOUT_CLASSIFICATION	0.0012414924369950878	DESIGN
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9449505239361278	WITHOUT_CLASSIFICATION	0.055049476063872185	DESIGN
// peek ahead	WITHOUT_CLASSIFICATION	0.9992546067901936	WITHOUT_CLASSIFICATION	7.453932098062591E-4	DESIGN
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9997486177862893	WITHOUT_CLASSIFICATION	2.5138221371068747E-4	DESIGN
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9966931683554804	WITHOUT_CLASSIFICATION	0.003306831644519601	DESIGN
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9969283575060778	WITHOUT_CLASSIFICATION	0.003071642493922197	DESIGN
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9997220803684167	WITHOUT_CLASSIFICATION	2.779196315833576E-4	DESIGN
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9997151584778537	WITHOUT_CLASSIFICATION	2.8484152214620353E-4	DESIGN
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9996251699432895	WITHOUT_CLASSIFICATION	3.748300567105581E-4	DESIGN
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9976197353289551	WITHOUT_CLASSIFICATION	0.00238026467104503	DESIGN
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9961209575012498	WITHOUT_CLASSIFICATION	0.0038790424987500726	DESIGN
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9982986174880273	WITHOUT_CLASSIFICATION	0.001701382511972795	DESIGN
//faster?	WITHOUT_CLASSIFICATION	0.9993675444271637	WITHOUT_CLASSIFICATION	6.324555728361998E-4	DESIGN
// the name of a class	WITHOUT_CLASSIFICATION	0.9992841364945663	WITHOUT_CLASSIFICATION	7.158635054338201E-4	DESIGN
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9995280343546523	WITHOUT_CLASSIFICATION	4.7196564534769474E-4	DESIGN
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9983127645036872	WITHOUT_CLASSIFICATION	0.0016872354963128357	DESIGN
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9995967077108707	WITHOUT_CLASSIFICATION	4.032922891292302E-4	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9998900847001163	WITHOUT_CLASSIFICATION	1.0991529988362971E-4	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9981416398082947	WITHOUT_CLASSIFICATION	0.0018583601917052314	DESIGN
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9982295848313908	WITHOUT_CLASSIFICATION	0.0017704151686092355	DESIGN
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9997569657215851	WITHOUT_CLASSIFICATION	2.4303427841496946E-4	DESIGN
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9983127645036872	WITHOUT_CLASSIFICATION	0.0016872354963128357	DESIGN
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9977074293690941	WITHOUT_CLASSIFICATION	0.0022925706309059562	DESIGN
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9983127645036872	WITHOUT_CLASSIFICATION	0.0016872354963128357	DESIGN
//readResolveObject	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9973675834603662	WITHOUT_CLASSIFICATION	0.002632416539633772	DESIGN
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9988805377519996	WITHOUT_CLASSIFICATION	0.0011194622480004818	DESIGN
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.999486267238563	WITHOUT_CLASSIFICATION	5.137327614370092E-4	DESIGN
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9998270816694226	WITHOUT_CLASSIFICATION	1.729183305774821E-4	DESIGN
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999085511572715	WITHOUT_CLASSIFICATION	9.144884272850137E-5	DESIGN
// Write HTML header	WITHOUT_CLASSIFICATION	0.9968470119952838	WITHOUT_CLASSIFICATION	0.003152988004716173	DESIGN
// Handle actions	WITHOUT_CLASSIFICATION	0.9982728378265606	WITHOUT_CLASSIFICATION	0.0017271621734394015	DESIGN
// Print page	WITHOUT_CLASSIFICATION	0.9986583167338656	WITHOUT_CLASSIFICATION	0.0013416832661343845	DESIGN
// Write HTML footer	WITHOUT_CLASSIFICATION	0.999428899308537	WITHOUT_CLASSIFICATION	5.711006914630742E-4	DESIGN
// End unit of work	WITHOUT_CLASSIFICATION	0.9997847867746774	WITHOUT_CLASSIFICATION	2.1521322532249714E-4	DESIGN
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.5756664310406976	WITHOUT_CLASSIFICATION	0.4243335689593024	DESIGN
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9927432491932086	WITHOUT_CLASSIFICATION	0.0072567508067914385	DESIGN
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9998022970161811	WITHOUT_CLASSIFICATION	1.977029838188182E-4	DESIGN
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9969288786783439	WITHOUT_CLASSIFICATION	0.0030711213216561167	DESIGN
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9978042579839675	WITHOUT_CLASSIFICATION	0.002195742016032431	DESIGN
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9614337399295202	WITHOUT_CLASSIFICATION	0.03856626007047982	DESIGN
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999455677012724	WITHOUT_CLASSIFICATION	5.4432298727558644E-5	DESIGN
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999000630570197	WITHOUT_CLASSIFICATION	9.993694298016E-5	DESIGN
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9998326362689526	WITHOUT_CLASSIFICATION	1.6736373104748626E-4	DESIGN
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999531409508556	WITHOUT_CLASSIFICATION	4.6859049144312826E-5	DESIGN
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9997095709861772	WITHOUT_CLASSIFICATION	2.9042901382282215E-4	DESIGN
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9984745519761435	WITHOUT_CLASSIFICATION	0.0015254480238564116	DESIGN
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999134586845911	WITHOUT_CLASSIFICATION	8.654131540888561E-5	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9994314797268753	WITHOUT_CLASSIFICATION	5.68520273124595E-4	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9994314797268753	WITHOUT_CLASSIFICATION	5.68520273124595E-4	DESIGN
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999974105627709	WITHOUT_CLASSIFICATION	2.5894372290108005E-6	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9995527995488458	WITHOUT_CLASSIFICATION	4.472004511541349E-4	DESIGN
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9987303664696676	WITHOUT_CLASSIFICATION	0.0012696335303324037	DESIGN
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9865227057157613	WITHOUT_CLASSIFICATION	0.01347729428423866	DESIGN
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999017005710106	WITHOUT_CLASSIFICATION	9.829942898937849E-5	DESIGN
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9978697856553409	WITHOUT_CLASSIFICATION	0.0021302143446591264	DESIGN
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999955694830415	WITHOUT_CLASSIFICATION	4.4305169586031985E-6	DESIGN
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9998195530096116	WITHOUT_CLASSIFICATION	1.8044699038840148E-4	DESIGN
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9983159890878959	WITHOUT_CLASSIFICATION	0.0016840109121041673	DESIGN
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.999761285592818	WITHOUT_CLASSIFICATION	2.3871440718210675E-4	DESIGN
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9998478059116207	WITHOUT_CLASSIFICATION	1.5219408837920448E-4	DESIGN
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.977762677972578	WITHOUT_CLASSIFICATION	0.02223732202742201	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999991481356771	WITHOUT_CLASSIFICATION	8.518643228368658E-7	DESIGN
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9995525723126648	WITHOUT_CLASSIFICATION	4.474276873351663E-4	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9941575636777051	WITHOUT_CLASSIFICATION	0.005842436322294758	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9941575636777051	WITHOUT_CLASSIFICATION	0.005842436322294758	DESIGN
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9984787235926629	WITHOUT_CLASSIFICATION	0.0015212764073370558	DESIGN
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9998280513031284	WITHOUT_CLASSIFICATION	1.7194869687153826E-4	DESIGN
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9960892535425356	WITHOUT_CLASSIFICATION	0.003910746457464361	DESIGN
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9995963071675537	WITHOUT_CLASSIFICATION	4.036928324463364E-4	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9995323674160361	WITHOUT_CLASSIFICATION	4.6763258396381215E-4	DESIGN
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991617099406942	WITHOUT_CLASSIFICATION	8.382900593059032E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
//element //index -> id	WITHOUT_CLASSIFICATION	0.9998034320729092	WITHOUT_CLASSIFICATION	1.9656792709083184E-4	DESIGN
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9960113260921131	WITHOUT_CLASSIFICATION	0.003988673907886857	DESIGN
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9992694798751366	WITHOUT_CLASSIFICATION	7.30520124863477E-4	DESIGN
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999901605376441	WITHOUT_CLASSIFICATION	9.839462355825423E-6	DESIGN
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9976445167612852	WITHOUT_CLASSIFICATION	0.00235548323871484	DESIGN
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9679563336029096	WITHOUT_CLASSIFICATION	0.032043666397090435	DESIGN
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999577196729926	WITHOUT_CLASSIFICATION	4.228032700733082E-5	DESIGN
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9991381310698829	WITHOUT_CLASSIFICATION	8.6186893011715E-4	DESIGN
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9865552225413945	WITHOUT_CLASSIFICATION	0.013444777458605462	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9941005647161267	WITHOUT_CLASSIFICATION	0.00589943528387322	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9987560257500089	WITHOUT_CLASSIFICATION	0.0012439742499911713	DESIGN
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9998819880388241	WITHOUT_CLASSIFICATION	1.1801196117583451E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9995685166552303	WITHOUT_CLASSIFICATION	4.3148334476981434E-4	DESIGN
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9998767582660225	WITHOUT_CLASSIFICATION	1.2324173397753335E-4	DESIGN
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.999766935812985	WITHOUT_CLASSIFICATION	2.3306418701504617E-4	DESIGN
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999909911681153	WITHOUT_CLASSIFICATION	9.008831884745289E-6	DESIGN
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9977899291129741	WITHOUT_CLASSIFICATION	0.0022100708870258505	DESIGN
//Named Queries:	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9980133948705738	WITHOUT_CLASSIFICATION	0.0019866051294260773	DESIGN
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9189200722901124	WITHOUT_CLASSIFICATION	0.08107992770988763	DESIGN
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9998678176455895	WITHOUT_CLASSIFICATION	1.321823544104936E-4	DESIGN
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9994222762050157	WITHOUT_CLASSIFICATION	5.77723794984362E-4	DESIGN
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9995248354840626	WITHOUT_CLASSIFICATION	4.7516451593754007E-4	DESIGN
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9998056088671439	WITHOUT_CLASSIFICATION	1.9439113285615807E-4	DESIGN
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9942082351040429	WITHOUT_CLASSIFICATION	0.005791764895957091	DESIGN
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999589560847366	WITHOUT_CLASSIFICATION	4.104391526326119E-5	DESIGN
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999512554072526	WITHOUT_CLASSIFICATION	4.874459274734402E-5	DESIGN
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9989012957838705	WITHOUT_CLASSIFICATION	0.0010987042161294926	DESIGN
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9992877430063214	WITHOUT_CLASSIFICATION	7.122569936787074E-4	DESIGN
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9994389740460458	WITHOUT_CLASSIFICATION	5.610259539542215E-4	DESIGN
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9994786875846597	WITHOUT_CLASSIFICATION	5.21312415340377E-4	DESIGN
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9988805283788839	WITHOUT_CLASSIFICATION	0.0011194716211160877	DESIGN
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9993185784598897	WITHOUT_CLASSIFICATION	6.814215401103188E-4	DESIGN
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9885204039747507	WITHOUT_CLASSIFICATION	0.011479596025249336	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9956908821675221	WITHOUT_CLASSIFICATION	0.004309117832477985	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9956908821675221	WITHOUT_CLASSIFICATION	0.004309117832477985	DESIGN
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999598978691977	WITHOUT_CLASSIFICATION	4.010213080237424E-5	DESIGN
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.8222182912944862	WITHOUT_CLASSIFICATION	0.1777817087055138	DESIGN
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9715045694588362	WITHOUT_CLASSIFICATION	0.028495430541163727	DESIGN
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.99973160677534	WITHOUT_CLASSIFICATION	2.6839322466001115E-4	DESIGN
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.913917868516572	WITHOUT_CLASSIFICATION	0.08608213148342807	DESIGN
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9997542305834487	WITHOUT_CLASSIFICATION	2.4576941655132675E-4	DESIGN
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9942548384934862	WITHOUT_CLASSIFICATION	0.005745161506513815	DESIGN
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9975373091010918	WITHOUT_CLASSIFICATION	0.0024626908989081077	DESIGN
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9855194573038336	WITHOUT_CLASSIFICATION	0.014480542696166448	DESIGN
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993472475856581	WITHOUT_CLASSIFICATION	6.527524143418907E-4	DESIGN
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993472475856581	WITHOUT_CLASSIFICATION	6.527524143418907E-4	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9938348666475234	WITHOUT_CLASSIFICATION	0.00616513335247663	DESIGN
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9990687590953984	WITHOUT_CLASSIFICATION	9.312409046016648E-4	DESIGN
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999775733299446	WITHOUT_CLASSIFICATION	2.2426670055366513E-5	DESIGN
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9983115532512734	WITHOUT_CLASSIFICATION	0.0016884467487265282	DESIGN
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9968623921434829	WITHOUT_CLASSIFICATION	0.0031376078565171378	DESIGN
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9926142766345872	WITHOUT_CLASSIFICATION	0.007385723365412828	DESIGN
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9998349166120145	WITHOUT_CLASSIFICATION	1.6508338798548638E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9964717714871046	WITHOUT_CLASSIFICATION	0.0035282285128953534	DESIGN
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999797584058312	WITHOUT_CLASSIFICATION	2.0241594168878152E-5	DESIGN
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9992855647594686	WITHOUT_CLASSIFICATION	7.144352405313449E-4	DESIGN
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9793124618591079	WITHOUT_CLASSIFICATION	0.020687538140892168	DESIGN
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.999835268117042	WITHOUT_CLASSIFICATION	1.6473188295785144E-4	DESIGN
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9969356567946884	WITHOUT_CLASSIFICATION	0.0030643432053115193	DESIGN
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9998908753386838	WITHOUT_CLASSIFICATION	1.0912466131623752E-4	DESIGN
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.999421134792388	WITHOUT_CLASSIFICATION	5.788652076120061E-4	DESIGN
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9980246489834058	WITHOUT_CLASSIFICATION	0.001975351016594136	DESIGN
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999920397717603	WITHOUT_CLASSIFICATION	7.960228239671698E-6	DESIGN
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.8199861564399904	DESIGN	0.18001384356000963	WITHOUT_CLASSIFICATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9923854268167984	WITHOUT_CLASSIFICATION	0.00761457318320165	DESIGN
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.8704894606654733	WITHOUT_CLASSIFICATION	0.12951053933452683	DESIGN
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9996261635009632	WITHOUT_CLASSIFICATION	3.7383649903677783E-4	DESIGN
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9900183045298369	WITHOUT_CLASSIFICATION	0.009981695470163128	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9998808005191268	WITHOUT_CLASSIFICATION	1.1919948087318033E-4	DESIGN
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.999999463531084	WITHOUT_CLASSIFICATION	5.364689159562626E-7	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9594078676832472	WITHOUT_CLASSIFICATION	0.040592132316752745	DESIGN
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9987437686660627	WITHOUT_CLASSIFICATION	0.001256231333937236	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999693921760869	WITHOUT_CLASSIFICATION	3.060782391307473E-5	DESIGN
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9791959450944979	DESIGN	0.02080405490550203	WITHOUT_CLASSIFICATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.9988628235031671	WITHOUT_CLASSIFICATION	0.0011371764968328578	DESIGN
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9972162950780735	WITHOUT_CLASSIFICATION	0.002783704921926517	DESIGN
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.999124742120368	WITHOUT_CLASSIFICATION	8.752578796319867E-4	DESIGN
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9998037271893375	WITHOUT_CLASSIFICATION	1.9627281066247898E-4	DESIGN
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999892070607075	WITHOUT_CLASSIFICATION	1.0792939292466302E-5	DESIGN
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9997169509926004	WITHOUT_CLASSIFICATION	2.830490073995741E-4	DESIGN
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9749306439964748	WITHOUT_CLASSIFICATION	0.025069356003525126	DESIGN
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9996015131809516	WITHOUT_CLASSIFICATION	3.984868190484606E-4	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999991481356771	WITHOUT_CLASSIFICATION	8.518643228368658E-7	DESIGN
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9994785600483365	WITHOUT_CLASSIFICATION	5.21439951663583E-4	DESIGN
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9998307054358451	WITHOUT_CLASSIFICATION	1.6929456415493288E-4	DESIGN
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9869706464945047	WITHOUT_CLASSIFICATION	0.013029353505495226	DESIGN
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9993526643012507	WITHOUT_CLASSIFICATION	6.47335698749341E-4	DESIGN
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999716723220363	WITHOUT_CLASSIFICATION	2.8327677963689696E-5	DESIGN
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9985204939638809	WITHOUT_CLASSIFICATION	0.0014795060361191595	DESIGN
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9931168774560232	WITHOUT_CLASSIFICATION	0.006883122543976866	DESIGN
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9989605051230999	WITHOUT_CLASSIFICATION	0.0010394948769001289	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9990936114551606	WITHOUT_CLASSIFICATION	9.063885448394701E-4	DESIGN
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9994183427817772	WITHOUT_CLASSIFICATION	5.816572182227789E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9976804862993105	WITHOUT_CLASSIFICATION	0.0023195137006895234	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9971342990879535	WITHOUT_CLASSIFICATION	0.0028657009120464606	DESIGN
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9992292361567043	WITHOUT_CLASSIFICATION	7.707638432956213E-4	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9869576805039135	WITHOUT_CLASSIFICATION	0.01304231949608648	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993512500249306	WITHOUT_CLASSIFICATION	6.487499750692604E-4	DESIGN
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9984859254587879	WITHOUT_CLASSIFICATION	0.001514074541212184	DESIGN
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9955198231387229	WITHOUT_CLASSIFICATION	0.0044801768612770885	DESIGN
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.995848263128097	WITHOUT_CLASSIFICATION	0.004151736871903022	DESIGN
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9986795168800586	WITHOUT_CLASSIFICATION	0.0013204831199413447	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993512500249306	WITHOUT_CLASSIFICATION	6.487499750692604E-4	DESIGN
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9947848191749032	WITHOUT_CLASSIFICATION	0.005215180825096728	DESIGN
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9412848698383328	DESIGN	0.05871513016166725	WITHOUT_CLASSIFICATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9989265543219413	WITHOUT_CLASSIFICATION	0.0010734456780587052	DESIGN
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9988193933471681	WITHOUT_CLASSIFICATION	0.001180606652831971	DESIGN
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9992807585121104	WITHOUT_CLASSIFICATION	7.192414878895998E-4	DESIGN
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9968442714645102	WITHOUT_CLASSIFICATION	0.003155728535489934	DESIGN
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.999541803869095	WITHOUT_CLASSIFICATION	4.581961309051606E-4	DESIGN
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9616018427209345	WITHOUT_CLASSIFICATION	0.03839815727906551	DESIGN
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9996737104889246	WITHOUT_CLASSIFICATION	3.2628951107545513E-4	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9959997008402002	WITHOUT_CLASSIFICATION	0.004000299159799741	DESIGN
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9937855074066614	WITHOUT_CLASSIFICATION	0.006214492593338694	DESIGN
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9683710830175287	WITHOUT_CLASSIFICATION	0.03162891698247137	DESIGN
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9997114359886111	WITHOUT_CLASSIFICATION	2.8856401138893683E-4	DESIGN
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9993804068614123	WITHOUT_CLASSIFICATION	6.195931385876608E-4	DESIGN
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9997721508715611	WITHOUT_CLASSIFICATION	2.2784912843882356E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9985160931343081	WITHOUT_CLASSIFICATION	0.0014839068656918267	DESIGN
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999585622579369	WITHOUT_CLASSIFICATION	4.143774206319693E-5	DESIGN
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999561575805161	WITHOUT_CLASSIFICATION	4.384241948392163E-5	DESIGN
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9967897973750933	WITHOUT_CLASSIFICATION	0.0032102026249065697	DESIGN
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.7603734707920473	WITHOUT_CLASSIFICATION	0.23962652920795283	DESIGN
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9995725162008611	WITHOUT_CLASSIFICATION	4.27483799138973E-4	DESIGN
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9997542347965376	WITHOUT_CLASSIFICATION	2.4576520346238773E-4	DESIGN
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9855151641190041	WITHOUT_CLASSIFICATION	0.014484835880995854	DESIGN
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9741237500944215	WITHOUT_CLASSIFICATION	0.025876249905578522	DESIGN
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.998867041802239	WITHOUT_CLASSIFICATION	0.0011329581977610466	DESIGN
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999237977338912	WITHOUT_CLASSIFICATION	7.620226610878265E-5	DESIGN
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9922523953840494	WITHOUT_CLASSIFICATION	0.007747604615950607	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9350119102342043	WITHOUT_CLASSIFICATION	0.06498808976579568	DESIGN
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9726860031215012	WITHOUT_CLASSIFICATION	0.02731399687849873	DESIGN
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9962186673635519	WITHOUT_CLASSIFICATION	0.0037813326364480784	DESIGN
// and perform the load	WITHOUT_CLASSIFICATION	0.9994764629589696	WITHOUT_CLASSIFICATION	5.235370410303046E-4	DESIGN
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9985977458520313	WITHOUT_CLASSIFICATION	0.0014022541479687238	DESIGN
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.994947548751127	WITHOUT_CLASSIFICATION	0.005052451248873015	DESIGN
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9972915857004085	WITHOUT_CLASSIFICATION	0.0027084142995915223	DESIGN
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9994893103201694	WITHOUT_CLASSIFICATION	5.106896798305335E-4	DESIGN
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9975589722894563	WITHOUT_CLASSIFICATION	0.002441027710543742	DESIGN
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.998878006748119	WITHOUT_CLASSIFICATION	0.0011219932518810813	DESIGN
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.939647206898144	WITHOUT_CLASSIFICATION	0.060352793101856005	DESIGN
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9967284869597945	WITHOUT_CLASSIFICATION	0.0032715130402054446	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9998963595518748	WITHOUT_CLASSIFICATION	1.0364044812522702E-4	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9953051808414421	WITHOUT_CLASSIFICATION	0.004694819158557795	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9953051808414421	WITHOUT_CLASSIFICATION	0.004694819158557795	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9948797453692189	WITHOUT_CLASSIFICATION	0.005120254630781149	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9993651735410854	WITHOUT_CLASSIFICATION	6.348264589145728E-4	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9991239301863912	WITHOUT_CLASSIFICATION	8.760698136086955E-4	DESIGN
/**	WITHOUT_CLASSIFICATION	0.5403020052265163	DESIGN	0.45969799477348366	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.999690996737037	WITHOUT_CLASSIFICATION	3.0900326296299797E-4	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.999690996737037	WITHOUT_CLASSIFICATION	3.0900326296299797E-4	DESIGN
//        }	WITHOUT_CLASSIFICATION	0.997264440705053	WITHOUT_CLASSIFICATION	0.0027355592949468944	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9929478330278799	WITHOUT_CLASSIFICATION	0.007052166972120072	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9991717949534303	WITHOUT_CLASSIFICATION	8.28205046569659E-4	DESIGN
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9997924965898465	WITHOUT_CLASSIFICATION	2.075034101536184E-4	DESIGN
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9993265546565459	WITHOUT_CLASSIFICATION	6.734453434541621E-4	DESIGN
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999109149360039	WITHOUT_CLASSIFICATION	8.908506399608662E-5	DESIGN
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9991036817763935	WITHOUT_CLASSIFICATION	8.963182236065262E-4	DESIGN
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.8681800920320683	DESIGN	0.1318199079679318	WITHOUT_CLASSIFICATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996697381844178	WITHOUT_CLASSIFICATION	3.3026181558206373E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996697381844178	WITHOUT_CLASSIFICATION	3.3026181558206373E-4	DESIGN
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9984859254587879	WITHOUT_CLASSIFICATION	0.001514074541212184	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9991776742592756	WITHOUT_CLASSIFICATION	8.223257407244254E-4	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9991618974781633	WITHOUT_CLASSIFICATION	8.381025218367579E-4	DESIGN
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9956925277449803	WITHOUT_CLASSIFICATION	0.004307472255019715	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999258832570182	WITHOUT_CLASSIFICATION	7.411674298179587E-4	DESIGN
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9823298356508818	WITHOUT_CLASSIFICATION	0.01767016434911823	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9943185293118921	WITHOUT_CLASSIFICATION	0.005681470688107878	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999258832570182	WITHOUT_CLASSIFICATION	7.411674298179587E-4	DESIGN
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9997641924013808	WITHOUT_CLASSIFICATION	2.3580759861918082E-4	DESIGN
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9995530123804444	WITHOUT_CLASSIFICATION	4.4698761955562353E-4	DESIGN
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9900742789676197	WITHOUT_CLASSIFICATION	0.009925721032380456	DESIGN
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9943369330453189	WITHOUT_CLASSIFICATION	0.005663066954681094	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9959997008402002	WITHOUT_CLASSIFICATION	0.004000299159799741	DESIGN
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.8620353585588622	WITHOUT_CLASSIFICATION	0.1379646414411377	DESIGN
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9920002372170041	WITHOUT_CLASSIFICATION	0.007999762782995906	DESIGN
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.99889072708051	WITHOUT_CLASSIFICATION	0.0011092729194900198	DESIGN
//use the id column alias	WITHOUT_CLASSIFICATION	0.9995192484189289	WITHOUT_CLASSIFICATION	4.8075158107108656E-4	DESIGN
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9996360276933317	WITHOUT_CLASSIFICATION	3.6397230666834963E-4	DESIGN
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9973675834603662	WITHOUT_CLASSIFICATION	0.002632416539633772	DESIGN
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9592981112449991	WITHOUT_CLASSIFICATION	0.040701888755001026	DESIGN
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9997347172446635	WITHOUT_CLASSIFICATION	2.6528275533665E-4	DESIGN
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9970891316652638	WITHOUT_CLASSIFICATION	0.002910868334736047	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9939193757760861	WITHOUT_CLASSIFICATION	0.006080624223913789	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9939193757760861	WITHOUT_CLASSIFICATION	0.006080624223913789	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9991285973426187	WITHOUT_CLASSIFICATION	8.714026573811533E-4	DESIGN
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999210830385128	WITHOUT_CLASSIFICATION	7.8916961487165E-5	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9970208209419468	WITHOUT_CLASSIFICATION	0.0029791790580532326	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9988792680437971	WITHOUT_CLASSIFICATION	0.001120731956202952	DESIGN
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.7038874361699681	WITHOUT_CLASSIFICATION	0.296112563830032	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9998773847730794	WITHOUT_CLASSIFICATION	1.226152269204949E-4	DESIGN
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999763105877173	WITHOUT_CLASSIFICATION	2.3689412282774685E-5	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9980985207532608	WITHOUT_CLASSIFICATION	0.0019014792467391577	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.998819588796854	WITHOUT_CLASSIFICATION	0.0011804112031459874	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9842834102460881	WITHOUT_CLASSIFICATION	0.015716589753912033	DESIGN
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9839962000854934	DESIGN	0.016003799914506643	WITHOUT_CLASSIFICATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999171868280048	WITHOUT_CLASSIFICATION	8.281317199525367E-5	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9993777219605653	WITHOUT_CLASSIFICATION	6.222780394347599E-4	DESIGN
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.6916881188077111	WITHOUT_CLASSIFICATION	0.3083118811922888	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9988391290032682	WITHOUT_CLASSIFICATION	0.001160870996731882	DESIGN
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.5174738723824457	WITHOUT_CLASSIFICATION	0.48252612761755437	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999791436609259	WITHOUT_CLASSIFICATION	2.085633907410756E-4	DESIGN
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.994794445749387	WITHOUT_CLASSIFICATION	0.005205554250612978	DESIGN
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9997740552500572	WITHOUT_CLASSIFICATION	2.2594474994269538E-4	DESIGN
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999378822457862	WITHOUT_CLASSIFICATION	6.211775421384625E-5	DESIGN
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.999100517359171	WITHOUT_CLASSIFICATION	8.994826408288935E-4	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999422290810233	WITHOUT_CLASSIFICATION	5.77709189766676E-5	DESIGN
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9967237854651698	WITHOUT_CLASSIFICATION	0.0032762145348300986	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.998745221298406	WITHOUT_CLASSIFICATION	0.0012547787015939878	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.998745221298406	WITHOUT_CLASSIFICATION	0.0012547787015939878	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9996712634436326	WITHOUT_CLASSIFICATION	3.287365563675101E-4	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9974839980632724	WITHOUT_CLASSIFICATION	0.0025160019367276433	DESIGN
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9968144120611266	WITHOUT_CLASSIFICATION	0.003185587938873345	DESIGN
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.969149982838948	WITHOUT_CLASSIFICATION	0.030850017161051912	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9993813432229555	WITHOUT_CLASSIFICATION	6.186567770445241E-4	DESIGN
// todo : what else to do here?	DESIGN	0.9950274981292851	WITHOUT_CLASSIFICATION	0.004972501870714859	DESIGN
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.90593508205838	WITHOUT_CLASSIFICATION	0.09406491794161999	DESIGN
// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. // The need for it is intended to be alleviated with future developement, thus it is // not defined as an Environment constant... // // it is used to control whether we should consult the JDBC metadata to determine // certain Settings default values; it is useful to *not* do this when the database // may not be available (mainly in tools usage).	DESIGN	0.9995267220979182	DESIGN	4.7327790208191825E-4	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.7883522182966496	WITHOUT_CLASSIFICATION	0.21164778170335033	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.7883522182966496	WITHOUT_CLASSIFICATION	0.21164778170335033	DESIGN
// todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9952182719745727	WITHOUT_CLASSIFICATION	0.0047817280254273155	DESIGN
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9999808772388284	WITHOUT_CLASSIFICATION	1.9122761171504052E-5	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction.  no idea...	DESIGN	0.9965024411403093	WITHOUT_CLASSIFICATION	0.003497558859690666	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9088556688970211	DESIGN	0.09114433110297894	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9088556688970211	DESIGN	0.09114433110297894	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.7028916831253961	DESIGN	0.2971083168746039	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.7028916831253961	DESIGN	0.2971083168746039	WITHOUT_CLASSIFICATION
// TODO: I considered validating TS cache config here, // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used	DESIGN	0.990701700862745	DESIGN	0.009298299137255057	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9981093963356903	DESIGN	0.001890603664309674	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9981093963356903	DESIGN	0.001890603664309674	WITHOUT_CLASSIFICATION
// TODO Why not use the timestamp in a DataVersion?	DESIGN	0.9974480303708205	DESIGN	0.0025519696291795096	WITHOUT_CLASSIFICATION
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9999808772388284	WITHOUT_CLASSIFICATION	1.9122761171504052E-5	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction. no idea...	DESIGN	0.9975851038863639	WITHOUT_CLASSIFICATION	0.0024148961136360616	DESIGN
//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9921361164060436	WITHOUT_CLASSIFICATION	0.00786388359395632	DESIGN
// turn hibernate.c3p0.* into c3p0.*, so c3p0 // gets a chance to see all hibernate.c3p0.*	DESIGN	0.9974996959742534	WITHOUT_CLASSIFICATION	0.0025003040257466497	DESIGN
//TODO: this bit actually has to be called after all cascades! //      but since identity insert is called *synchronously*, //      instead of asynchronously as other actions, it isn't	DESIGN	0.6297615899337078	WITHOUT_CLASSIFICATION	0.37023841006629227	DESIGN
//TODO: reenable if we also fix the above todo	DESIGN	0.6466076212170946	DESIGN	0.3533923787829054	WITHOUT_CLASSIFICATION
//TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.9454254715058521	WITHOUT_CLASSIFICATION	0.05457452849414786	DESIGN
// we may be screwed here since the collection action is about to execute // and we do not know the final owner key value	DESIGN	0.9980898813712792	WITHOUT_CLASSIFICATION	0.0019101186287208748	DESIGN
/** Create an action that will evict collection and entity regions based on queryspaces (table names).	DESIGN	0.8919292810878047	DESIGN	0.10807071891219534	WITHOUT_CLASSIFICATION
// todo : what else to do here?	DESIGN	0.9950274981292851	WITHOUT_CLASSIFICATION	0.004972501870714859	DESIGN
// todo : modify the class definition if not already transformed...	DESIGN	0.9980605062999867	WITHOUT_CLASSIFICATION	0.0019394937000133659	DESIGN
// todo : what else to do here?	DESIGN	0.9950274981292851	WITHOUT_CLASSIFICATION	0.004972501870714859	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call start	DESIGN	0.9981985907069196	WITHOUT_CLASSIFICATION	0.0018014092930803676	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.9973708969642385	WITHOUT_CLASSIFICATION	0.002629103035761494	DESIGN
//TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.8625392196182337	DESIGN	0.13746078038176626	WITHOUT_CLASSIFICATION
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.90593508205838	WITHOUT_CLASSIFICATION	0.09406491794161999	DESIGN
//TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.7430803320538042	WITHOUT_CLASSIFICATION	0.2569196679461957	DESIGN
//TODO: assumes all collections disassemble to an array!	DESIGN	0.9964613631424551	WITHOUT_CLASSIFICATION	0.003538636857544885	DESIGN
//TODO: reuse the PreLoadEvent	DESIGN	0.9810299996255776	WITHOUT_CLASSIFICATION	0.018970000374422397	DESIGN
// todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; // this should be refactored to instead expose a method to assemble a EntityEntry based on this // state for return.	DESIGN	0.9290137045759692	WITHOUT_CLASSIFICATION	0.07098629542403077	DESIGN
// todo : what is the implication of this?	DESIGN	0.9982379939382762	WITHOUT_CLASSIFICATION	0.0017620060617237927	DESIGN
// use COUNT as the default.  This mimics the old behavior, although // NONE might be a better option moving forward in the case of callable	DESIGN	0.9818106343123103	WITHOUT_CLASSIFICATION	0.018189365687689616	DESIGN
/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a	DESIGN	0.9983295970918757	DESIGN	0.0016704029081242265	WITHOUT_CLASSIFICATION
//TODO: suck this into initLaziness!	DESIGN	0.5671554072885723	WITHOUT_CLASSIFICATION	0.43284459271142783	DESIGN
// we have to set up the table later!! yuck	DESIGN	0.9997177722190178	WITHOUT_CLASSIFICATION	2.8222778098209043E-4	DESIGN
//TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.7638195462674412	WITHOUT_CLASSIFICATION	0.23618045373255872	DESIGN
// todo : again, how *should* this work for non-pojo entities?	DESIGN	0.9990407870941548	WITHOUT_CLASSIFICATION	9.592129058453363E-4	DESIGN
// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9435894166343226	DESIGN	0.056410583365677384	WITHOUT_CLASSIFICATION
// This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.9902950845993881	WITHOUT_CLASSIFICATION	0.009704915400611861	DESIGN
//TODO: bad implementation, cos it depends upon ordering of mapping doc //      fixing this requires that Collection/PersistentClass gain access //      to the Mappings reference from Configuration (or the filterDefinitions //      map directly) sometime during Configuration.buildSessionFactory //      (after all the types/filter-defs are known and before building //      persisters).	DESIGN	0.9783078928566278	WITHOUT_CLASSIFICATION	0.021692107143372254	DESIGN
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.5495626841648349	WITHOUT_CLASSIFICATION	0.4504373158351651	DESIGN
// hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9997707539732823	WITHOUT_CLASSIFICATION	2.2924602671777419E-4	DESIGN
//FIXME: get the PersistentClass	DESIGN	0.9966725643794023	WITHOUT_CLASSIFICATION	0.0033274356205977166	DESIGN
//FIXME: get the PersistentClass	DESIGN	0.9966725643794023	WITHOUT_CLASSIFICATION	0.0033274356205977166	DESIGN
//Icky workaround for MySQL bug:	DESIGN	0.8070284476593359	WITHOUT_CLASSIFICATION	0.19297155234066413	DESIGN
//TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.7516170721318357	DESIGN	0.24838292786816427	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.6072435425357593	DESIGN	0.39275645746424076	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.6072435425357593	DESIGN	0.39275645746424076	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.6072435425357593	DESIGN	0.39275645746424076	WITHOUT_CLASSIFICATION
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.5495626841648349	WITHOUT_CLASSIFICATION	0.4504373158351651	DESIGN
//use a degenerated strategy for backward compatibility	DESIGN	0.9970396006705056	WITHOUT_CLASSIFICATION	0.002960399329494444	DESIGN
// Sets can be just a view of a part of another collection. // do we need to copy it to be sure it won't be changing // underneath us? // ie. this.set.addAll(set);	DESIGN	0.9915626358653425	WITHOUT_CLASSIFICATION	0.008437364134657508	DESIGN
//note that i parameter is now unused (delete it?)	DESIGN	0.998700546687283	WITHOUT_CLASSIFICATION	0.0012994533127169967	DESIGN
//just to help out during the load (ugly, i know)	DESIGN	0.99893323673179	WITHOUT_CLASSIFICATION	0.0010667632682099472	DESIGN
// TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.5609412069249542	WITHOUT_CLASSIFICATION	0.4390587930750457	DESIGN
// yick!  need this for proper serialization/deserialization handling...	DESIGN	0.8499069809098931	WITHOUT_CLASSIFICATION	0.15009301909010686	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.7883522182966496	WITHOUT_CLASSIFICATION	0.21164778170335033	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.7883522182966496	WITHOUT_CLASSIFICATION	0.21164778170335033	DESIGN
//yuck!	DESIGN	0.9993675444271637	WITHOUT_CLASSIFICATION	6.324555728361998E-4	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.7883522182966496	WITHOUT_CLASSIFICATION	0.21164778170335033	DESIGN
// TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9992425001492437	DESIGN	7.57499850756277E-4	WITHOUT_CLASSIFICATION
//HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9917726169681292	WITHOUT_CLASSIFICATION	0.008227383031870787	DESIGN
// does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.9932243889963187	WITHOUT_CLASSIFICATION	0.006775611003681244	DESIGN
// sql-server, at least needed this dropped after use; strange!	DESIGN	0.9917644734415617	WITHOUT_CLASSIFICATION	0.008235526558438367	DESIGN
// todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.9996350879863033	WITHOUT_CLASSIFICATION	3.649120136967042E-4	DESIGN
// TBD should this be varbinary($1)? //	DESIGN	0.9742440932096168	WITHOUT_CLASSIFICATION	0.025755906790383247	DESIGN
// is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9900413282165123	WITHOUT_CLASSIFICATION	0.009958671783487754	DESIGN
// xmlforest requires a new kind of function constructor	DESIGN	0.9999720470429896	WITHOUT_CLASSIFICATION	2.7952957010445875E-5	DESIGN
// Does this dialect support the ALTER TABLE syntax?	DESIGN	0.966764607438052	WITHOUT_CLASSIFICATION	0.03323539256194794	DESIGN
// Do we need to qualify index names with the schema name?	DESIGN	0.9873073820178055	WITHOUT_CLASSIFICATION	0.01269261798219452	DESIGN
// Does this dialect support the UNIQUE column syntax?	DESIGN	0.9756650923627477	WITHOUT_CLASSIFICATION	0.02433490763725231	DESIGN
// Does this dialect support check constraints?	DESIGN	0.9808059584520029	WITHOUT_CLASSIFICATION	0.01919404154799716	DESIGN
// Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9530161914919018	WITHOUT_CLASSIFICATION	0.04698380850809811	DESIGN
// Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9664438239371069	WITHOUT_CLASSIFICATION	0.033556176062893066	DESIGN
// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9664438239371069	WITHOUT_CLASSIFICATION	0.033556176062893066	DESIGN
// Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.9391769229761047	WITHOUT_CLASSIFICATION	0.06082307702389534	DESIGN
//note there is a wierd implementation in the client side	DESIGN	0.9990381605372489	WITHOUT_CLASSIFICATION	9.618394627511235E-4	DESIGN
//TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.9775671455571788	WITHOUT_CLASSIFICATION	0.022432854442821167	DESIGN
// todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.9985920238300937	WITHOUT_CLASSIFICATION	0.0014079761699062575	DESIGN
// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.9965472651529022	WITHOUT_CLASSIFICATION	0.00345273484709773	DESIGN
//TODO: should orphans really be deleted during lock???	DESIGN	0.6318940898570238	WITHOUT_CLASSIFICATION	0.3681059101429762	DESIGN
// orphans should not be deleted during merge??	DESIGN	0.9686499850361918	WITHOUT_CLASSIFICATION	0.03135001496380814	DESIGN
// orphans should not be deleted during copy??	DESIGN	0.9686499850361918	WITHOUT_CLASSIFICATION	0.03135001496380814	DESIGN
//I suppose?	DESIGN	0.9970799373269558	WITHOUT_CLASSIFICATION	0.0029200626730442034	DESIGN
//TODO: suck this logic into the collection!	DESIGN	0.8168796889661133	WITHOUT_CLASSIFICATION	0.1831203110338867	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // get the ID from collection.getOwner()	DESIGN	0.8896041372983441	WITHOUT_CLASSIFICATION	0.11039586270165581	DESIGN
//TODO:refactor + make this method private	DESIGN	0.879875155543344	WITHOUT_CLASSIFICATION	0.12012484445665604	DESIGN
// todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9905926590649798	WITHOUT_CLASSIFICATION	0.009407340935020107	DESIGN
//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.6744515613363299	DESIGN	0.3255484386636702	WITHOUT_CLASSIFICATION
//TODO: better to pass the id in as an argument?	DESIGN	0.9953127099337049	WITHOUT_CLASSIFICATION	0.0046872900662951284	DESIGN
// todo : potentially look at optimizing these two arrays	DESIGN	0.9995823601065381	WITHOUT_CLASSIFICATION	4.1763989346177866E-4	DESIGN
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.7446723594048975	WITHOUT_CLASSIFICATION	0.2553276405951024	DESIGN
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.7446723594048975	WITHOUT_CLASSIFICATION	0.2553276405951024	DESIGN
//TODO: temporary	DESIGN	0.6052023318655545	DESIGN	0.3947976681344455	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.5744430894386863	WITHOUT_CLASSIFICATION	0.4255569105613137	DESIGN
//TODO: not quite sure about the full implications of this!	DESIGN	0.5744430894386863	WITHOUT_CLASSIFICATION	0.4255569105613137	DESIGN
//TODO: ugly here:	DESIGN	0.7740860473239037	DESIGN	0.22591395267609635	WITHOUT_CLASSIFICATION
//this is kinda the best we can do...	DESIGN	0.9798228297996099	WITHOUT_CLASSIFICATION	0.02017717020039012	DESIGN
//TODO: this needn't exclude subclasses...	DESIGN	0.7596860187156572	WITHOUT_CLASSIFICATION	0.2403139812843429	DESIGN
// todo : need map? the prob is a proper key, right?	DESIGN	0.9799672846936011	WITHOUT_CLASSIFICATION	0.02003271530639887	DESIGN
// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9346137407258974	WITHOUT_CLASSIFICATION	0.06538625927410267	DESIGN
// todo : hack!!! // NOTE : here we cleanup the load context when we have no more local // LCE entries.  This "works" for the time being because really // only the collection load contexts are implemented.  Long term, // this cleanup should become part of the "close result set" // processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9971893566361281	WITHOUT_CLASSIFICATION	0.0028106433638718587	DESIGN
// todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.674449782956454	DESIGN	0.3255502170435459	WITHOUT_CLASSIFICATION
// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.7981067388210061	DESIGN	0.20189326117899392	WITHOUT_CLASSIFICATION
// TODO : add this info to the translator and aggregate it here...	DESIGN	0.9414698520522128	DESIGN	0.05853014794778726	WITHOUT_CLASSIFICATION
//TODO: move into collection type, so we can use polymorphism!	DESIGN	0.8838018972105494	DESIGN	0.1161981027894507	WITHOUT_CLASSIFICATION
// todo : should we check the current isolation mode explicitly?	DESIGN	0.9985920238300937	WITHOUT_CLASSIFICATION	0.0014079761699062568	DESIGN
//TODO: suck into event class	DESIGN	0.860703506276221	WITHOUT_CLASSIFICATION	0.13929649372377897	DESIGN
//do we even really need this? the update will fail anyway....	DESIGN	0.998381591480895	WITHOUT_CLASSIFICATION	0.001618408519104952	DESIGN
//hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.8971792171616794	WITHOUT_CLASSIFICATION	0.10282078283832062	DESIGN
//TODO: would it be better to do a refresh from db?	DESIGN	0.625900081741072	DESIGN	0.3740999182589281	WITHOUT_CLASSIFICATION
//TODO: we use two visitors here, inefficient!	DESIGN	0.9800606626668839	WITHOUT_CLASSIFICATION	0.01993933733311618	DESIGN
// this class has no proxies (so do a shortcut)	DESIGN	0.9928135667101394	WITHOUT_CLASSIFICATION	0.007186433289860523	DESIGN
//PostLoad is needed for EJB3 //TODO: reuse the PostLoadEvent...	DESIGN	0.9725956177498452	WITHOUT_CLASSIFICATION	0.027404382250154787	DESIGN
//TODO: put this stuff back in to read snapshot from //      the second-level cache (needs some extra work)	DESIGN	0.8534638346051522	WITHOUT_CLASSIFICATION	0.14653616539484776	DESIGN
// null or brand new collection // this will also (inefficiently) handle arrays, which have // no snapshot, so we can't do any better	DESIGN	0.9800484213725077	WITHOUT_CLASSIFICATION	0.01995157862749226	DESIGN
//TODO: is this 100% correct?	DESIGN	0.6080613920594622	WITHOUT_CLASSIFICATION	0.39193860794053775	DESIGN
// TODO: iteratively get transient entities and retry merge until one of the following conditions: //       1) transientCopyCache.size() == 0 //       2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing // TODO: find out if retrying can add entities to copyCache (don't think it can...) // For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.8262583178711586	DESIGN	0.17374168212884147	WITHOUT_CLASSIFICATION
// entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9980506654279904	DESIGN	0.0019493345720097129	WITHOUT_CLASSIFICATION
//TODO: we should throw an exception if we really *know* for sure   //      that this is a detached instance, rather than just assuming //throw new StaleObjectStateException(entityName, id);	DESIGN	0.533954074620571	WITHOUT_CLASSIFICATION	0.466045925379429	DESIGN
// TODO : perhaps we should additionally require that the incoming entity // version be equivalent to the defined unsaved-value?	DESIGN	0.999302803975524	DESIGN	6.971960244760791E-4	WITHOUT_CLASSIFICATION
// perhaps this should be an exception since it is only ever used // in the above method?	DESIGN	0.9066617401842801	DESIGN	0.09333825981571996	WITHOUT_CLASSIFICATION
// Put a placeholder in entries, so we don't recurse back and try to save() the // same object again. QUESTION: should this be done before onSave() is called? // likewise, should it be done before onUpdate()?	DESIGN	0.9756547927842475	WITHOUT_CLASSIFICATION	0.024345207215752507	DESIGN
//TODO: merge into one method!	DESIGN	0.8158431770185721	WITHOUT_CLASSIFICATION	0.18415682298142783	DESIGN
//TODO: refactor to .sql package	DESIGN	0.6617415110376188	WITHOUT_CLASSIFICATION	0.3382584889623813	DESIGN
/** * Provides query splitting methods, which were originally in QueryTranslator. * <br> * TODO: This will need to be refactored at some point. * * @author josh */	DESIGN	0.9993777655074371	DESIGN	6.222344925629098E-4	WITHOUT_CLASSIFICATION
//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.6158666293440694	DESIGN	0.38413337065593056	WITHOUT_CLASSIFICATION
// todo : temporary //      needed because currently persister is the one that //      creates and renders the join fragments for inheritence //      hierarchies...	DESIGN	0.9953293185247579	WITHOUT_CLASSIFICATION	0.004670681475242136	DESIGN
// TODO : better way?!?	DESIGN	0.948047950586567	DESIGN	0.0519520494134331	WITHOUT_CLASSIFICATION
// Not possible to simply re-use the versionPropertyNode here as it causes // OOM errors due to circularity :(	DESIGN	0.9948075871093002	WITHOUT_CLASSIFICATION	0.0051924128906998485	DESIGN
//TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9959812914758366	WITHOUT_CLASSIFICATION	0.004018708524163417	DESIGN
// TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9938369798339555	DESIGN	0.0061630201660445895	WITHOUT_CLASSIFICATION
// even here, if only properties mapped to the "base table" are referenced // in the set and where clauses, this could be handled by the BasicDelegate. // TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9984913838329222	DESIGN	0.0015086161670777502	WITHOUT_CLASSIFICATION
//TODO: switch statements are always evil! We already had bugs because  //      of forgotten token types. Use polymorphism for this!	DESIGN	0.9992625203737955	WITHOUT_CLASSIFICATION	7.37479626204574E-4	DESIGN
// TODO : we really need to be able to deal with component paths here also; // this is difficult because the hql-sql grammar expects all those node types // to be FromReferenceNodes.  One potential fix here would be to convert the // IntoClause to just use a FromClause/FromElement combo (as a child of the // InsertStatement) and move all this logic into the InsertStatement.  That's // probably the easiest approach (read: least amount of changes to the grammar // and code), but just doesn't feel right as then an insert would contain // 2 from-clauses	DESIGN	0.9999959310032946	DESIGN	4.068996705300598E-6	WITHOUT_CLASSIFICATION
// really there are two situations where it should be ok to allow the insertion // into properties defined on a superclass: //      1) union-subclass with an abstract root entity //      2) discrim-subclass // // #1 is handled already because of the fact that // UnionSubclassPersister alreay always returns 0 // for this call... // // we may want to disallow it for discrim-subclass just for // consistency-sake (currently does not work anyway)...	DESIGN	0.9406806137945857	WITHOUT_CLASSIFICATION	0.0593193862054143	DESIGN
//yuck!	DESIGN	0.9993675444271637	WITHOUT_CLASSIFICATION	6.324555728361998E-4	DESIGN
// implicit joins are always(?) ok to reuse	DESIGN	0.9994253586126323	WITHOUT_CLASSIFICATION	5.746413873676708E-4	DESIGN
// TODO : we may also want to check that the types here map to exactly one column/JDBC-type //      can't think of a situation where arithmetic expression between multi-column mappings //      makes any sense.	DESIGN	0.9601769448090979	DESIGN	0.0398230551909022	WITHOUT_CLASSIFICATION
// we do not know either type //BLIND GUESS!	DESIGN	0.9873086562369358	WITHOUT_CLASSIFICATION	0.012691343763064366	DESIGN
//TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999988993960678	DESIGN	1.1006039322992398E-6	WITHOUT_CLASSIFICATION
// TODO: Replace this with a more elegant solution.	DESIGN	0.9981999486504244	DESIGN	0.0018000513495756516	WITHOUT_CLASSIFICATION
// TODO: Should this really return null?  If not, figure out something better to do here.	DESIGN	0.664232934187204	DESIGN	0.33576706581279603	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.7883522182966496	WITHOUT_CLASSIFICATION	0.21164778170335033	DESIGN
// yuck!	DESIGN	0.9998221857672224	WITHOUT_CLASSIFICATION	1.7781423277767362E-4	DESIGN
// ignore it; the incoming property could not be found so we // cannot be sure what to do here.  At the very least, the // safest is to simply not apply any dereference toggling...	DESIGN	0.7656606307973276	WITHOUT_CLASSIFICATION	0.23433936920267245	DESIGN
// TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.9852860553439649	DESIGN	0.014713944656035155	WITHOUT_CLASSIFICATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character // the trim-source	DESIGN	0.9882679894225145	WITHOUT_CLASSIFICATION	0.011732010577485555	DESIGN
// todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.6801002258374529	WITHOUT_CLASSIFICATION	0.3198997741625472	DESIGN
//TODO: is this a bit ugly?	DESIGN	0.6648933063990051	WITHOUT_CLASSIFICATION	0.33510669360099493	DESIGN
// Need a better way to define the suffixes here...	DESIGN	0.9927868645386921	WITHOUT_CLASSIFICATION	0.0072131354613079075	DESIGN
// TODO: something much better - look at the type of the other expression! // TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9585925197242381	DESIGN	0.041407480275761896	WITHOUT_CLASSIFICATION
// TODO : what amount of significant digits need to be supported here? //      - from the DecimalFormat docs: //          [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9889257932109968	DESIGN	0.011074206789003166	WITHOUT_CLASSIFICATION
// Needed the "clazz_" check to work around union-subclasses // TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.6906637656657821	DESIGN	0.30933623433421786	WITHOUT_CLASSIFICATION
//We should actually rework this class to not implement Parser //and just process path expressions in the most convenient way.	DESIGN	0.8169925984855092	DESIGN	0.18300740151449071	WITHOUT_CLASSIFICATION
//The class is now way to complex!	DESIGN	0.9952433059078539	WITHOUT_CLASSIFICATION	0.004756694092145984	DESIGN
//TODO: get SQL rendering out of here	DESIGN	0.7531233785504842	WITHOUT_CLASSIFICATION	0.24687662144951592	DESIGN
//TODO: is there a better way?	DESIGN	0.5755952067454001	WITHOUT_CLASSIFICATION	0.42440479325459995	DESIGN
//Must be done here because of side-effect! yuck...	DESIGN	0.9926514442711194	WITHOUT_CLASSIFICATION	0.0073485557288806656	DESIGN
//name from a super query (a bit inelegant that it shows up here)	DESIGN	0.9874994342166881	WITHOUT_CLASSIFICATION	0.012500565783311806	DESIGN
// We should reengineer this class so that, rather than the current ad - // hoc linear approach to processing a stream of tokens, we instead // build up a tree of expressions.	DESIGN	0.59818541373975	WITHOUT_CLASSIFICATION	0.40181458626025	DESIGN
// this is ugly here, but needed because its a subquery	DESIGN	0.9892800825011022	WITHOUT_CLASSIFICATION	0.010719917498897728	DESIGN
// unhappy about this being public ... is there a better way?	DESIGN	0.8714906314918592	WITHOUT_CLASSIFICATION	0.12850936850814082	DESIGN
// Make sure this is a defined parameter and check the incoming value type // TODO: what should be the actual exception type here?	DESIGN	0.9994402617971905	DESIGN	5.597382028094353E-4	WITHOUT_CLASSIFICATION
// TODO : this constructor form is *only* used from constructor directly below us; can it go away?	DESIGN	0.999907906149833	DESIGN	9.209385016694429E-5	WITHOUT_CLASSIFICATION
//TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.9585560059218641	WITHOUT_CLASSIFICATION	0.04144399407813588	DESIGN
// TODO : should remove this exposure //  and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9983100955679595	DESIGN	0.0016899044320404595	WITHOUT_CLASSIFICATION
// todo : should this get moved to PersistentContext? // logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.9820134488574493	WITHOUT_CLASSIFICATION	0.017986551142550714	DESIGN
// TODO: what type?	DESIGN	0.8779567445721014	DESIGN	0.12204325542789861	WITHOUT_CLASSIFICATION
// todo : should seriously consider not allowing a txn to begin from a child session //      can always route the request to the root session...	DESIGN	0.9414089816332102	WITHOUT_CLASSIFICATION	0.05859101836678982	DESIGN
// short-circuit for performance...	DESIGN	0.9991484965197698	WITHOUT_CLASSIFICATION	8.515034802301511E-4	DESIGN
// not absolutely necessary, but does help with aggressive release	DESIGN	0.9748928712217925	WITHOUT_CLASSIFICATION	0.025107128778207467	DESIGN
// TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.9198796366833931	DESIGN	0.08012036331660678	WITHOUT_CLASSIFICATION
//work around a bug in all known connection pools....	DESIGN	0.9900849762171459	WITHOUT_CLASSIFICATION	0.009915023782854217	DESIGN
// TODO : make this the factory for "entity mode related" sessions; // also means making this the target of transaction-synch and the // thing that knows how to cascade things between related sessions // // At that point, perhaps this thing is a "SessionContext", and // ConnectionManager is a "JDBCContext"?  A "SessionContext" should // live in the impl package...	DESIGN	0.9999995756554924	DESIGN	4.24344507645098E-7	WITHOUT_CLASSIFICATION
//TODO: does this really need to be here? //      does the collection already have //      it's own up-to-date snapshot?	DESIGN	0.9938061535143408	DESIGN	0.0061938464856592336	WITHOUT_CLASSIFICATION
//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9018788860704782	WITHOUT_CLASSIFICATION	0.09812111392952177	DESIGN
/**	DESIGN	0.5403020052265163	DESIGN	0.45969799477348366	WITHOUT_CLASSIFICATION
// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; //      but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; //      currently this works in conjuction with the check on //      DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from //      cache with enabled filters). // EARLY EXIT!!!!!	DESIGN	0.5589811805556918	DESIGN	0.44101881944430826	WITHOUT_CLASSIFICATION
//for sets, we should end the collection load after resolving //the entities, since we might call hashCode() on the elements //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9155469246412796	DESIGN	0.08445307535872036	WITHOUT_CLASSIFICATION
//This is not very nice (and quite slow):	DESIGN	0.5840908978504532	DESIGN	0.4159091021495467	WITHOUT_CLASSIFICATION
//use of trim() here is ugly?	DESIGN	0.99668958551341	WITHOUT_CLASSIFICATION	0.0033104144865898602	DESIGN
//TODO: this is too conservative; if all preceding joins were  //      also inner joins, we could use an inner join here	DESIGN	0.9019725379072957	WITHOUT_CLASSIFICATION	0.0980274620927042	DESIGN
//TODO: look at the owning property and check that it  //      isn't lazy (by instrumentation)	DESIGN	0.9908042749333617	WITHOUT_CLASSIFICATION	0.009195725066638353	DESIGN
//TODO: inefficient	DESIGN	0.934320844765282	WITHOUT_CLASSIFICATION	0.06567915523471803	DESIGN
// why does this matter?	DESIGN	0.992883621966142	WITHOUT_CLASSIFICATION	0.007116378033858031	DESIGN
// from the collection of associations, locate OJA for the // ManyToOne corresponding to this persister to fully // define the many-to-many; we need that OJA so that we can // use its alias here // TODO : is there a better way here?	DESIGN	0.999976380989453	DESIGN	2.361901054698867E-5	WITHOUT_CLASSIFICATION
//TODO: this class depends directly upon CriteriaImpl,  //      in the impl package ... add a CriteriaImplementor  //      interface	DESIGN	0.7526988386016225	DESIGN	0.24730116139837757	WITHOUT_CLASSIFICATION
//TODO: add a CriteriaImplementor interface //      this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.8134661555931005	WITHOUT_CLASSIFICATION	0.18653384440689955	DESIGN
// TODO : not so sure this is needed...	DESIGN	0.9355751109518701	DESIGN	0.06442488904813005	WITHOUT_CLASSIFICATION
// meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9980856163773094	WITHOUT_CLASSIFICATION	0.0019143836226905779	DESIGN
// TODO: The order in which entities are saved may matter (e.g., a particular transient entity //       may need to be saved before other transient entities can be saved; //       Keep retrying the batch of transient entities until either: //       1) there are no transient entities left in transientCopyCache //       or 2) no transient entities were saved in the last batch // For now, just run through the transient entities and retry the merge	DESIGN	0.7056545205405348	WITHOUT_CLASSIFICATION	0.29434547945946515	DESIGN
// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.989603950981666	DESIGN	0.010396049018334044	WITHOUT_CLASSIFICATION
// todo : currently expects that the individual with expressions apply to the same sql table join. //      This may not be the case for joined-subclass where the property values //      might be coming from different tables in the joined hierarchy.  At some //      point we should expand this to support that capability.  However, that has //      some difficulties: //          1) the biggest is how to handle ORs when the individual comparisons are //              linked to different sql joins. //          2) here we would need to track each comparison individually, along with //              the join alias to which it applies and then pass that information //              back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.8360686397463638	WITHOUT_CLASSIFICATION	0.16393136025363628	DESIGN
// this function has a template -> restore output, apply the template and write the result out // TODO: Downcast to avoid using an interface?  Yuck.	DESIGN	0.9917413148553413	WITHOUT_CLASSIFICATION	0.008258685144658664	DESIGN
// at some point the generate phase needs to be moved out of here, // because a single object-level DML might spawn multiple SQL DML // command executions. // // Possible to just move the sql generation for dml stuff, but for // consistency-sake probably best to just move responsiblity for // the generation phase completely into the delegates // (QueryLoader/StatementExecutor) themselves.  Also, not sure why // QueryLoader currently even has a dependency on this at all; does // it need it?  Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9996258184156851	DESIGN	3.74181584314944E-4	WITHOUT_CLASSIFICATION
// get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.9990538360699682	WITHOUT_CLASSIFICATION	9.461639300317081E-4	DESIGN
// TODO should we just collect these like with the collections above?	DESIGN	0.9931910035636383	DESIGN	0.006808996436361665	WITHOUT_CLASSIFICATION
// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification // see the discussion there in DynamicFilterParameterSpecification's javadocs as to why // it is currently not done that way.	DESIGN	0.9496978515893238	WITHOUT_CLASSIFICATION	0.0503021484106761	DESIGN
/////////////////////////////////////////////////////////////////////////// // USED ONLY FOR REGRESSION TESTING!!!! // // todo : obviously get rid of all this junk ;) ///////////////////////////////////////////////////////////////////////////	DESIGN	0.9820717243088902	WITHOUT_CLASSIFICATION	0.017928275691109784	DESIGN
//create an index on the key columns??	DESIGN	0.9995214780414419	WITHOUT_CLASSIFICATION	4.785219585582106E-4	DESIGN
//TODO: deprecated, remove eventually	DESIGN	0.9310030649098938	WITHOUT_CLASSIFICATION	0.06899693509010621	DESIGN
//create an index on the key columns??	DESIGN	0.9995214780414419	WITHOUT_CLASSIFICATION	4.785219585582106E-4	DESIGN
//TODO: improve this hack!	DESIGN	0.5621667194443043	WITHOUT_CLASSIFICATION	0.4378332805556958	DESIGN
// inheritance cycle detection (paranoid check)	DESIGN	0.998129510397848	WITHOUT_CLASSIFICATION	0.0018704896021520066	DESIGN
//TODO: remove use of instanceof!	DESIGN	0.8088320271146964	WITHOUT_CLASSIFICATION	0.1911679728853035	DESIGN
//shortcut	DESIGN	0.9993675444271637	WITHOUT_CLASSIFICATION	6.324555728361998E-4	DESIGN
//TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.993213620534271	WITHOUT_CLASSIFICATION	0.006786379465729073	DESIGN
// create an index on the key columns??	DESIGN	0.9998489784240234	WITHOUT_CLASSIFICATION	1.510215759765977E-4	DESIGN
// todo : remove	DESIGN	0.9986216255212265	WITHOUT_CLASSIFICATION	0.0013783744787735513	DESIGN
// todo : remove	DESIGN	0.9986216255212265	WITHOUT_CLASSIFICATION	0.0013783744787735513	DESIGN
// todo : remove	DESIGN	0.9986216255212265	WITHOUT_CLASSIFICATION	0.0013783744787735513	DESIGN
// todo : throw exception?	DESIGN	0.9997179387757188	WITHOUT_CLASSIFICATION	2.820612242812602E-4	DESIGN
// todo : throw exception?  maybe warn if not the same?	DESIGN	0.9943224959481594	WITHOUT_CLASSIFICATION	0.005677504051840646	DESIGN
//TODO: make EntityPersister *not* depend on SessionFactoryImplementor //interface, if possible	DESIGN	0.77042391674214	WITHOUT_CLASSIFICATION	0.2295760832578601	DESIGN
//TODO: is there a more elegant way than downcasting?	DESIGN	0.8189345743999747	DESIGN	0.18106542560002525	WITHOUT_CLASSIFICATION
// TODO: encapsulate the protected instance variables!	DESIGN	0.8652489283939396	DESIGN	0.13475107160606034	WITHOUT_CLASSIFICATION
// should indicate that we are processing an INSERT/UPDATE/DELETE // query with a subquery implied via a collection property // function. Here, we need to use the table name itself as the // qualification alias. // TODO : verify this works for all databases... // TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.5986674245538901	WITHOUT_CLASSIFICATION	0.40133257544610995	DESIGN
//TODO: copy/paste from insertRows()	DESIGN	0.9109522549732635	WITHOUT_CLASSIFICATION	0.08904774502673644	DESIGN
//TODO: copy/paste from recreate()	DESIGN	0.9109522549732635	WITHOUT_CLASSIFICATION	0.08904774502673644	DESIGN
//should this interface extend PropertyMapping?	DESIGN	0.9564310608638033	WITHOUT_CLASSIFICATION	0.04356893913619678	DESIGN
//ie. the subquery! yuck!	DESIGN	0.9987532503057682	WITHOUT_CLASSIFICATION	0.0012467496942318336	DESIGN
//TODO: move to .sql package!!	DESIGN	0.6828985423807574	WITHOUT_CLASSIFICATION	0.3171014576192425	DESIGN
//TODO: code duplication with SingleTableEntityPersister	DESIGN	0.742332810502921	WITHOUT_CLASSIFICATION	0.2576671894970791	DESIGN
// TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9891007997704993	DESIGN	0.010899200229500762	WITHOUT_CLASSIFICATION
//TODO: *two* hashmap lookups here is one too many...	DESIGN	0.9300148914498849	WITHOUT_CLASSIFICATION	0.06998510855011512	DESIGN
//TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.742332810502921	WITHOUT_CLASSIFICATION	0.2576671894970791	DESIGN
//perhaps not really necessary...	DESIGN	0.9885631179942876	WITHOUT_CLASSIFICATION	0.01143688200571241	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.9993768939562894	WITHOUT_CLASSIFICATION	6.231060437106121E-4	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.9993768939562894	WITHOUT_CLASSIFICATION	6.231060437106121E-4	DESIGN
//TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.5436012352602877	DESIGN	0.45639876473971225	WITHOUT_CLASSIFICATION
//TODO: optimize this better!	DESIGN	0.912396125828668	WITHOUT_CLASSIFICATION	0.08760387417133203	DESIGN
//TODO: should we allow suffixes on these ?	DESIGN	0.897203398882937	DESIGN	0.10279660111706311	WITHOUT_CLASSIFICATION
//This is really ugly, but necessary:	DESIGN	0.9941081428903182	WITHOUT_CLASSIFICATION	0.00589185710968172	DESIGN
//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.7129847297594623	WITHOUT_CLASSIFICATION	0.28701527024053775	DESIGN
//TODO: disable batch loading if lockMode > READ?	DESIGN	0.9975501979579753	WITHOUT_CLASSIFICATION	0.002449802042024745	DESIGN
// append the SQL to return the generated identifier //TODO: suck into Insert	DESIGN	0.9099607998970269	WITHOUT_CLASSIFICATION	0.09003920010297309	DESIGN
//TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.906741717217116	DESIGN	0.09325828278288392	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.8202765922198091	WITHOUT_CLASSIFICATION	0.1797234077801909	DESIGN
//TODO: move to .sql package, and refactor with similar things!	DESIGN	0.5757438302123985	DESIGN	0.42425616978760144	WITHOUT_CLASSIFICATION
//TODO: implement functionality //  this might be painful to do here, as the "join post processing" for //  the subquery has already been performed (meaning that for //  theta-join dialects, the join conditions have already been moved //  over to the where clause).  A "simple" solution here might to //  perform "join post processing" once for the entire query (including //  any subqueries) at one fell swoop	DESIGN	0.999029328803049	DESIGN	9.706711969510551E-4	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.9912373633125581	WITHOUT_CLASSIFICATION	0.008762636687441927	DESIGN
//kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9949435980908647	WITHOUT_CLASSIFICATION	0.005056401909135227	DESIGN
//is this ok?	DESIGN	0.9947234288429677	WITHOUT_CLASSIFICATION	0.0052765711570322785	DESIGN
//TODO: perhaps this should be some other RuntimeException...	DESIGN	0.998576123331145	DESIGN	0.00142387666885508	WITHOUT_CLASSIFICATION
//TODO: make this a bit nicer	DESIGN	0.612286611884419	DESIGN	0.3877133881155811	WITHOUT_CLASSIFICATION
//Yuck:	DESIGN	0.9993675444271637	WITHOUT_CLASSIFICATION	6.324555728361998E-4	DESIGN
//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.9997639670535221	DESIGN	2.360329464779204E-4	WITHOUT_CLASSIFICATION
/**	DESIGN	0.5403020052265163	DESIGN	0.45969799477348366	WITHOUT_CLASSIFICATION
// TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.9925034284628488	DESIGN	0.007496571537151141	WITHOUT_CLASSIFICATION
//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.9837228102051508	WITHOUT_CLASSIFICATION	0.016277189794849135	DESIGN
//TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.8647866481955083	WITHOUT_CLASSIFICATION	0.1352133518044917	DESIGN
// todo : YUCK!!!	DESIGN	0.9996267784741321	WITHOUT_CLASSIFICATION	3.7322152586789423E-4	DESIGN
// TODO : YUCK!!!  fix after HHH-1907 is complete	DESIGN	0.999675679727809	DESIGN	3.2432027219100293E-4	WITHOUT_CLASSIFICATION
//TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9718345893001749	DESIGN	0.028165410699825102	WITHOUT_CLASSIFICATION
//TODO: design new lifecycle for ProxyFactory	DESIGN	0.9614264111955403	WITHOUT_CLASSIFICATION	0.038573588804459685	DESIGN
//TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.8503981910395587	WITHOUT_CLASSIFICATION	0.1496018089604413	DESIGN
// TODO: copy/paste from ManyToOneType	DESIGN	0.6903736545032628	DESIGN	0.3096263454967373	WITHOUT_CLASSIFICATION
//TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.6958043268185267	DESIGN	0.3041956731814732	WITHOUT_CLASSIFICATION
//TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.7049696918850371	WITHOUT_CLASSIFICATION	0.2950303081149629	DESIGN
//TODO: implement caching?! proxies?!	DESIGN	0.6994072053631013	WITHOUT_CLASSIFICATION	0.30059279463689875	DESIGN
//TODO: is this right??	DESIGN	0.871899136296018	WITHOUT_CLASSIFICATION	0.12810086370398197	DESIGN
// is this really necessary?	DESIGN	0.9965664953957415	WITHOUT_CLASSIFICATION	0.0034335046042584774	DESIGN
//TODO: move these to a new JoinableType abstract class, //extended by EntityType and PersistentCollectionType:	DESIGN	0.5118454349819858	WITHOUT_CLASSIFICATION	0.4881545650180143	DESIGN
// TODO: this is very suboptimal for some subclasses (namely components), // since it does not take advantage of two-phase-load	DESIGN	0.8823839073641535	DESIGN	0.11761609263584644	WITHOUT_CLASSIFICATION
// worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.7187780525516443	WITHOUT_CLASSIFICATION	0.2812219474483556	DESIGN
// NOTE VERY HACKISH WORKAROUND!! // TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.6964755610294915	DESIGN	0.30352443897050846	WITHOUT_CLASSIFICATION
// TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.6794597888079497	DESIGN	0.32054021119205034	WITHOUT_CLASSIFICATION
// We would probably refactor to have LogicParser (builds a tree of simple // expressions connected by and, or, not), ExpressionParser (translates // from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like // FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much // the same thing it does now)	DESIGN	0.9889349470921813	WITHOUT_CLASSIFICATION	0.011065052907818665	DESIGN
//TODO: this is a little inefficient, don't need to do a whole //      deep replaceElements() call	DESIGN	0.7914874307123868	DESIGN	0.20851256928761325	WITHOUT_CLASSIFICATION
//workaround for WebLogic	DESIGN	0.998057692927446	WITHOUT_CLASSIFICATION	0.0019423070725540007	DESIGN
//TODO: this dependency is kinda Bad	DESIGN	0.8468743090139818	DESIGN	0.15312569098601816	WITHOUT_CLASSIFICATION
//ick!	DESIGN	0.9993675444271637	WITHOUT_CLASSIFICATION	6.324555728361998E-4	DESIGN
// short cut check...	DESIGN	0.9985332260418258	WITHOUT_CLASSIFICATION	0.0014667739581741886	DESIGN
// todo : move to StringHelper?	DESIGN	0.9962122020734546	WITHOUT_CLASSIFICATION	0.003787797926545445	DESIGN
//yukky! Don't you have subclasses for that! //TODO race conditions can happen here	DESIGN	0.7383772439653701	DESIGN	0.26162275603463	WITHOUT_CLASSIFICATION
//TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.9253562407065152	DESIGN	0.07464375929348487	WITHOUT_CLASSIFICATION
// FIXME hack to work around fact that calling // Node added = root.addChild( fqn ); doesn't  // properly set the version on the node	DESIGN	0.9793210136550184	DESIGN	0.020678986344981623	WITHOUT_CLASSIFICATION
// TODO: I considered validating the presence of the TS cache here, // but decided to defer unti getQueryCacheInstance() in case the  // cache is never actually used	DESIGN	0.990409599732261	DESIGN	0.009590400267739019	WITHOUT_CLASSIFICATION
//need to do that here rather than in the save event listener to let //the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.9938882850451835	DESIGN	0.00611171495481647	WITHOUT_CLASSIFICATION
//TODO: simply remove this override //      if we fix the above todos	DESIGN	0.9683240888481919	DESIGN	0.03167591115180823	WITHOUT_CLASSIFICATION
// This, is used by SessionFactoryImpl to hand to the generated SessionImpl; // was the only reason I could see that we cannot just use null as // Settings.cacheProvider	DESIGN	0.604023200441613	WITHOUT_CLASSIFICATION	0.3959767995583871	DESIGN
// this is done here 'cos we might only know the type here (ugly!) // TODO: improve this a lot:	DESIGN	0.9996635497970091	DESIGN	3.364502029909387E-4	WITHOUT_CLASSIFICATION
// todo : would love to have this work on a notification basis //    where the successful binding of an entity/subclass would //    emit a notification which the extendsQueue entries could //    react to...	DESIGN	0.9997609941136251	WITHOUT_CLASSIFICATION	2.390058863749884E-4	DESIGN
// TODO : not sure the best way to handle this. // The non-performant way :	DESIGN	0.919207219307846	DESIGN	0.08079278069215409	WITHOUT_CLASSIFICATION
// would be better to use the element-type to determine // whether the old and the new are equal here; the problem being // we do not necessarily have access to the element type in all // cases	DESIGN	0.5451879185252152	WITHOUT_CLASSIFICATION	0.45481208147478464	DESIGN
// This next bit is to allow for both unsaved-value="negative" // and for "older" behavior where version number did not get // seeded if it was already set in the object // TODO: shift it into unsaved-value strategy	DESIGN	0.9972212234539926	DESIGN	0.002778776546007494	WITHOUT_CLASSIFICATION
// merges don't cascade to uninitialized collections //	DESIGN	0.9990511937475309	WITHOUT_CLASSIFICATION	9.488062524690449E-4	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // return collection.getOwner()	DESIGN	0.9543907587643835	WITHOUT_CLASSIFICATION	0.04560924123561646	DESIGN
//it is possible that the tree-walking in OuterJoinLoader can get to //an association defined by a subclass, in which case the property-ref //might refer to a property defined on a subclass of the current class //in this case, the table name is not known - this temporary solution  //assumes that the property-ref refers to a property of the subclass //table that the association belongs to (a reasonable guess) //TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9997353744680169	DESIGN	2.6462553198315723E-4	WITHOUT_CLASSIFICATION
// this only works because collection entries are kept in a sequenced // map by persistence context (maybe we should do like entities and // keep a separate sequences set...) //TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.5753496526939621	DESIGN	0.42465034730603785	WITHOUT_CLASSIFICATION
// important, to account for newly saved entities in query // todo : some kind of check for new status...	DESIGN	0.9983130765857905	WITHOUT_CLASSIFICATION	0.0016869234142095236	DESIGN
// brand new collection //TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.9423885305806505	WITHOUT_CLASSIFICATION	0.05761146941934949	DESIGN
//TODO: if object was an uninitialized proxy, this is inefficient, //      resulting in two SQL selects	DESIGN	0.992280031229674	WITHOUT_CLASSIFICATION	0.007719968770325949	DESIGN
//before cascade! //TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.6958043268185267	DESIGN	0.3041956731814732	WITHOUT_CLASSIFICATION
// TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.6638723987821301	DESIGN	0.33612760121786994	WITHOUT_CLASSIFICATION
// todo : need to find a clean way to handle the "event source" role // a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... // passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.9179157849081095	DESIGN	0.08208421509189051	WITHOUT_CLASSIFICATION
// todo : remove	DESIGN	0.9986216255212265	WITHOUT_CLASSIFICATION	0.0013783744787735513	DESIGN
//aliasRefNode.resolve( false, false, aliasRefNode.getText() ); //TODO: is it kosher to do it here? //TODO: is it kosher to do it here?	DESIGN	0.6505225058044684	WITHOUT_CLASSIFICATION	0.34947749419553165	DESIGN
// No explicit select expression; render the id and properties // projection lists for every persister in the from clause into // a single 'token node'. //TODO: the only reason we need this stuff now is collection filters, //      we should get rid of derived select clause completely!	DESIGN	0.9307005851145412	DESIGN	0.0692994148854588	WITHOUT_CLASSIFICATION
// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; //      the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> //          the table info gotten here should really be self-contained (i.e., a class representation //          defining all the needed attributes), then we could then get an array of those	DESIGN	0.99983177777591	DESIGN	1.682222240899558E-4	WITHOUT_CLASSIFICATION
// TODO: get SQL rendering out of here, create an AST for the join expressions. // Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9249699746829126	WITHOUT_CLASSIFICATION	0.07503002531708737	DESIGN
// TODO : this really needs to be delayed unitl after we definitively know all node types // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DESIGN	0.9951439922004066	DESIGN	0.004856007799593349	WITHOUT_CLASSIFICATION
// TODO: Figure out a better way to get the FROM elements in a proper tree structure. // If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.998263445676615	DESIGN	0.0017365543233850457	WITHOUT_CLASSIFICATION
// work around that crazy issue where the tree contains // "empty" FromElements (no text); afaict, this is caused // by FromElementFactory.createCollectionJoin()	DESIGN	0.9977330704733581	WITHOUT_CLASSIFICATION	0.0022669295266418577	DESIGN
//TODO: this class does too many things! we need a different //kind of path expression parser for each of the diffferent //ways in which path expressions can occur	DESIGN	0.6205351593362136	DESIGN	0.37946484066378633	WITHOUT_CLASSIFICATION
//real hacky... // used to count the nesting of parentheses	DESIGN	0.9385991083489948	WITHOUT_CLASSIFICATION	0.06140089165100527	DESIGN
// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; // currently not doable though because of the resultset-ref stuff...	DESIGN	0.7673407350434347	DESIGN	0.23265926495656536	WITHOUT_CLASSIFICATION
//for arrays, we should end the collection load before resolving //the entities, since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.7688946280553923	WITHOUT_CLASSIFICATION	0.23110537194460773	DESIGN
// polymorphism not really handled completely correctly, // perhaps...well, actually its ok, assuming that the // entity name used in the lookup is the same as the // the one used here, which it will be	DESIGN	0.9688328100202358	WITHOUT_CLASSIFICATION	0.031167189979764174	DESIGN
// TODO: should "record" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9955030148227171	DESIGN	0.004496985177282936	WITHOUT_CLASSIFICATION
// VERY IMPORTANT!!!! - This class needs to be free of any static references // to any CGLIB or Javassist classes.  Otherwise, users will always need both // on their classpaths no matter which (if either) they use. // // Another option here would be to remove the Hibernate.isPropertyInitialized() // method and have the users go through the SessionFactory to get this information.	DESIGN	0.8095181387729896	DESIGN	0.19048186122701027	WITHOUT_CLASSIFICATION
// TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).	DESIGN	0.9999976274843285	DESIGN	2.3725156714159236E-6	WITHOUT_CLASSIFICATION
//for backward compatibility, allow a set with no not-null  //element columns, using all columns in the row locater SQL //TODO: create an implicit not null constraint on all cols?	DESIGN	0.8723943122846755	WITHOUT_CLASSIFICATION	0.1276056877153246	DESIGN
//SPACES //TODO: i'm not sure, but perhaps we should exclude //      abstract denormalized tables?	DESIGN	0.9944304464737843	DESIGN	0.005569553526215687	WITHOUT_CLASSIFICATION
//workaround, for backward compatibility of sets with no //not-null columns, assume all columns are used in the //row locator SQL	DESIGN	0.9701927842058297	WITHOUT_CLASSIFICATION	0.02980721579417041	DESIGN
//note that this method could easily be moved up to BasicEntityPersister, //if we ever needed to reuse it from other subclasses	DESIGN	0.7569963269473756	WITHOUT_CLASSIFICATION	0.24300367305262446	DESIGN
//index += getPropertyColumnSpan( i ); //TODO:  this is kinda slow...	DESIGN	0.9074752462401117	WITHOUT_CLASSIFICATION	0.09252475375988833	DESIGN
//TODO: need some caching scheme? really comes down to decision  //      regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.8809085019271312	WITHOUT_CLASSIFICATION	0.11909149807286878	DESIGN
// TODO: here is why we need to make bytecode provider global :( // TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999999996603595	DESIGN	3.3964054195746916E-10	WITHOUT_CLASSIFICATION
//TODO: Yuck! This is not quite good enough, it's a quick //hack around the problem of having a to-one association //that refers to an embedded component:	DESIGN	0.8682892783460678	DESIGN	0.13171072165393213	WITHOUT_CLASSIFICATION
// for DOM4J "collections" only // TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.9306728626632665	DESIGN	0.06932713733673346	WITHOUT_CLASSIFICATION
// would be great to move all this below here into another method that could also be used // from the new scrolling stuff. // // Would need to change the way the max-row stuff is handled (i.e. behind an interface) so // that I could do the control breaking at the means to know when to stop	DESIGN	0.9999953379503826	DESIGN	4.662049617422082E-6	WITHOUT_CLASSIFICATION
//TODO: can we *always* use the "null property" approach for everything?	DESIGN	0.6355616351025	WITHOUT_CLASSIFICATION	0.3644383648975	DESIGN
//polymorphism comment above	DESIGN	0.9998664640543995	WITHOUT_CLASSIFICATION	1.3353594560054047E-4	DESIGN
// some messy, complex stuff here, since createCriteria() can take an // aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999958337102177	WITHOUT_CLASSIFICATION	4.166289782284078E-6	DESIGN
//TODO: really bad, evil hack to fix!!!	DESIGN	0.9988114761563192	DESIGN	0.001188523843680829	WITHOUT_CLASSIFICATION
// ugly hack for cases like "elements(foo.bar.collection)" // (multi-part path expression ending in elements or indices)	DESIGN	0.9871494998977532	DESIGN	0.012850500102246655	WITHOUT_CLASSIFICATION
// try block is a hack around fact that currently tuplizers are not // given the opportunity to resolve a subclass entity name.  this // allows the (we assume custom) interceptor the ability to // influence this decision if we were not able to based on the // given entityName	DESIGN	0.9994089627549428	DESIGN	5.910372450571547E-4	WITHOUT_CLASSIFICATION
/////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around "ghost" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially, look-ahead to the next FromElement that actually // writes something to the SQL	DESIGN	0.7368680566648284	DESIGN	0.2631319433351717	WITHOUT_CLASSIFICATION
//init the table here instead of earlier, so that we can get a quoted table name //TODO: would it be better to simply pass the qualified table name, instead of //      splitting it up into schema/catalog/table names	DESIGN	0.6140338992196622	WITHOUT_CLASSIFICATION	0.3859661007803377	DESIGN
// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method // I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so // if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.9552187721943849	DESIGN	0.04478122780561522	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.8202765922198091	WITHOUT_CLASSIFICATION	0.1797234077801909	DESIGN
//TODO: ideally we need the construction of PropertyAccessor to take the following: //      1) EntityMode //      2) EntityMode-specific data (i.e., the classname for pojo entities) //      3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) // The easiest way, with the introduction of the new runtime-metamodel classes, would be the // the following predicates: //      1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a //          org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property //      2) What is now termed a "PropertyAccessor" stores any values needed from those two //          pieces of information //      3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with //          PropertyAccessor.getSetter()	DESIGN	0.7528294864566574	WITHOUT_CLASSIFICATION	0.24717051354334255	DESIGN
//TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9614134021883368	DESIGN	0.03858659781166316	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.9912373633125581	WITHOUT_CLASSIFICATION	0.008762636687441927	DESIGN
//TODO: make this a bit nicer	DESIGN	0.612286611884419	DESIGN	0.3877133881155811	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9078957857199649	WITHOUT_CLASSIFICATION	0.09210421428003511	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9078957857199649	WITHOUT_CLASSIFICATION	0.09210421428003511	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9078957857199649	WITHOUT_CLASSIFICATION	0.09210421428003511	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9078957857199649	WITHOUT_CLASSIFICATION	0.09210421428003511	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9078957857199649	WITHOUT_CLASSIFICATION	0.09210421428003511	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9078957857199649	WITHOUT_CLASSIFICATION	0.09210421428003511	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9078957857199649	WITHOUT_CLASSIFICATION	0.09210421428003511	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9078957857199649	WITHOUT_CLASSIFICATION	0.09210421428003511	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9088556688970211	DESIGN	0.09114433110297894	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9088556688970211	DESIGN	0.09114433110297894	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9088556688970211	DESIGN	0.09114433110297894	WITHOUT_CLASSIFICATION
// TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9981808656319208	DESIGN	0.0018191343680791932	WITHOUT_CLASSIFICATION
