//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9986506382302165	WITHOUT_CLASSIFICATION	0.0013493617697835014	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9995546641363486	WITHOUT_CLASSIFICATION	4.4533586365140293E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9995546641363486	WITHOUT_CLASSIFICATION	4.4533586365140293E-4	DESIGN
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9992493666220075	WITHOUT_CLASSIFICATION	7.506333779924209E-4	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9987190787985143	WITHOUT_CLASSIFICATION	0.0012809212014856185	DESIGN
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999720562502465	WITHOUT_CLASSIFICATION	2.7943749753402517E-5	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999996700722786	WITHOUT_CLASSIFICATION	3.2992772138975387E-6	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999996700722786	WITHOUT_CLASSIFICATION	3.2992772138975387E-6	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999827958485169	WITHOUT_CLASSIFICATION	1.7204151483089154E-5	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998487612919388	WITHOUT_CLASSIFICATION	1.5123870806126987E-4	DESIGN
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9998143875113717	WITHOUT_CLASSIFICATION	1.8561248862816537E-4	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9983583965422045	WITHOUT_CLASSIFICATION	0.0016416034577954872	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999563971328578	WITHOUT_CLASSIFICATION	4.360286714215927E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999563971328578	WITHOUT_CLASSIFICATION	4.360286714215927E-5	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9991527900001833	WITHOUT_CLASSIFICATION	8.472099998166903E-4	DESIGN
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9998148441200457	WITHOUT_CLASSIFICATION	1.8515587995424348E-4	DESIGN
// decode row selection...	WITHOUT_CLASSIFICATION	0.9995238222096536	WITHOUT_CLASSIFICATION	4.761777903463508E-4	DESIGN
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9980928273179372	WITHOUT_CLASSIFICATION	0.0019071726820627764	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9981600272190861	WITHOUT_CLASSIFICATION	0.001839972780913824	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9995461509202707	WITHOUT_CLASSIFICATION	4.5384907972935743E-4	DESIGN
// ROW ID	WITHOUT_CLASSIFICATION	0.9993539003904367	WITHOUT_CLASSIFICATION	6.460996095632468E-4	DESIGN
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9987190787985143	WITHOUT_CLASSIFICATION	0.0012809212014856185	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9987190787985143	WITHOUT_CLASSIFICATION	0.0012809212014856185	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9008738953176386	WITHOUT_CLASSIFICATION	0.09912610468236142	DESIGN
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.998756459946358	WITHOUT_CLASSIFICATION	0.001243540053642123	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9987190787985143	WITHOUT_CLASSIFICATION	0.0012809212014856185	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9990829833763151	WITHOUT_CLASSIFICATION	9.170166236849926E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9987440822640996	WITHOUT_CLASSIFICATION	0.001255917735900351	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9987440822640996	WITHOUT_CLASSIFICATION	0.001255917735900351	DESIGN
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9960925451856878	WITHOUT_CLASSIFICATION	0.003907454814312204	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9996904915733146	WITHOUT_CLASSIFICATION	3.095084266853461E-4	DESIGN
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.999391763998294	WITHOUT_CLASSIFICATION	6.082360017059808E-4	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9994950201370237	WITHOUT_CLASSIFICATION	5.049798629763708E-4	DESIGN
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.824378659683121	DESIGN	0.17562134031687904	WITHOUT_CLASSIFICATION
/**	WITHOUT_CLASSIFICATION	0.8537885680653805	DESIGN	0.14621143193461958	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
/**	WITHOUT_CLASSIFICATION	0.8537885680653805	DESIGN	0.14621143193461958	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999550657313953	WITHOUT_CLASSIFICATION	4.493426860464777E-5	DESIGN
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9091939842583939	WITHOUT_CLASSIFICATION	0.09080601574160599	DESIGN
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.8355938920175312	WITHOUT_CLASSIFICATION	0.16440610798246877	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9962555053949906	WITHOUT_CLASSIFICATION	0.003744494605009409	DESIGN
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9989118032845523	WITHOUT_CLASSIFICATION	0.0010881967154477488	DESIGN
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999488355418203	WITHOUT_CLASSIFICATION	5.116445817970299E-4	DESIGN
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996154252843261	WITHOUT_CLASSIFICATION	3.845747156737639E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9997471540332961	WITHOUT_CLASSIFICATION	2.528459667039885E-4	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9989185733406403	WITHOUT_CLASSIFICATION	0.0010814266593598032	DESIGN
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9891671111077859	WITHOUT_CLASSIFICATION	0.01083288889221423	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9974604723026467	WITHOUT_CLASSIFICATION	0.002539527697353383	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9989185733406403	WITHOUT_CLASSIFICATION	0.0010814266593598032	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9974604723026467	WITHOUT_CLASSIFICATION	0.002539527697353383	DESIGN
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9998294413272725	WITHOUT_CLASSIFICATION	1.7055867272754347E-4	DESIGN
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9996016400705177	DESIGN	3.983599294823518E-4	WITHOUT_CLASSIFICATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9974265401729989	WITHOUT_CLASSIFICATION	0.0025734598270010537	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999548858235321	WITHOUT_CLASSIFICATION	4.5114176467829975E-5	DESIGN
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9996758392846563	WITHOUT_CLASSIFICATION	3.241607153437484E-4	DESIGN
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999855218910195	WITHOUT_CLASSIFICATION	1.4478108980443757E-5	DESIGN
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999200309581343	WITHOUT_CLASSIFICATION	7.996904186572384E-5	DESIGN
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9912911633403209	WITHOUT_CLASSIFICATION	0.008708836659679208	DESIGN
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9998540909192651	WITHOUT_CLASSIFICATION	1.4590908073480342E-4	DESIGN
// Never evict this node	WITHOUT_CLASSIFICATION	0.9959860170673411	WITHOUT_CLASSIFICATION	0.004013982932658913	DESIGN
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9996127839603285	WITHOUT_CLASSIFICATION	3.87216039671477E-4	DESIGN
// 60 seconds	WITHOUT_CLASSIFICATION	0.9988727958681993	WITHOUT_CLASSIFICATION	0.001127204131800659	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999771454533802	WITHOUT_CLASSIFICATION	2.2854546619744214E-5	DESIGN
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9982040237583197	WITHOUT_CLASSIFICATION	0.0017959762416801793	DESIGN
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9709152209672227	WITHOUT_CLASSIFICATION	0.029084779032777234	DESIGN
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999618248072969	WITHOUT_CLASSIFICATION	3.81751927031674E-5	DESIGN
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.996405419705597	WITHOUT_CLASSIFICATION	0.0035945802944028584	DESIGN
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999891601187468	WITHOUT_CLASSIFICATION	1.0839881253151528E-5	DESIGN
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.999876754153182	WITHOUT_CLASSIFICATION	1.2324584681803265E-4	DESIGN
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999140170432435	WITHOUT_CLASSIFICATION	8.598295675651993E-5	DESIGN
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9995265590502869	WITHOUT_CLASSIFICATION	4.7344094971321486E-4	DESIGN
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999257920305288	WITHOUT_CLASSIFICATION	7.420796947120083E-5	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9989765596909844	WITHOUT_CLASSIFICATION	0.0010234403090156395	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9982008202209284	WITHOUT_CLASSIFICATION	0.0017991797790717068	DESIGN
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.711526109304702	WITHOUT_CLASSIFICATION	0.2884738906952979	DESIGN
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9937354227281214	WITHOUT_CLASSIFICATION	0.00626457727187862	DESIGN
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9995318743260956	WITHOUT_CLASSIFICATION	4.6812567390444403E-4	DESIGN
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.995843201626202	WITHOUT_CLASSIFICATION	0.004156798373798072	DESIGN
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9995682486007716	WITHOUT_CLASSIFICATION	4.317513992283706E-4	DESIGN
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999997282728643	WITHOUT_CLASSIFICATION	2.7172713570806395E-7	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999997338640388	WITHOUT_CLASSIFICATION	2.6613596120555815E-7	DESIGN
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999762410094808	WITHOUT_CLASSIFICATION	2.3758990519189685E-5	DESIGN
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9970840897854848	WITHOUT_CLASSIFICATION	0.0029159102145152665	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.99969559235655	WITHOUT_CLASSIFICATION	3.044076434499588E-4	DESIGN
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9985356392286684	WITHOUT_CLASSIFICATION	0.0014643607713317101	DESIGN
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999997507073435	WITHOUT_CLASSIFICATION	2.4929265646367645E-7	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.99969559235655	WITHOUT_CLASSIFICATION	3.044076434499588E-4	DESIGN
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999952337834167	WITHOUT_CLASSIFICATION	4.766216583214046E-6	DESIGN
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999514807747386	WITHOUT_CLASSIFICATION	4.851922526126436E-5	DESIGN
// ignore!	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9990404271542462	WITHOUT_CLASSIFICATION	9.595728457538561E-4	DESIGN
// construct the cache	WITHOUT_CLASSIFICATION	0.9993723165639696	WITHOUT_CLASSIFICATION	6.27683436030293E-4	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9975902019897313	WITHOUT_CLASSIFICATION	0.002409798010268786	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9975902019897313	WITHOUT_CLASSIFICATION	0.002409798010268786	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9974651230464437	WITHOUT_CLASSIFICATION	0.002534876953556322	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9997168900794394	WITHOUT_CLASSIFICATION	2.831099205605609E-4	DESIGN
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9996467264916076	WITHOUT_CLASSIFICATION	3.532735083924755E-4	DESIGN
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9618288470312498	WITHOUT_CLASSIFICATION	0.038171152968750184	DESIGN
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9995138092023672	WITHOUT_CLASSIFICATION	4.861907976327653E-4	DESIGN
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9998609988564222	WITHOUT_CLASSIFICATION	1.3900114357774212E-4	DESIGN
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9998297927168855	WITHOUT_CLASSIFICATION	1.7020728311458613E-4	DESIGN
// return the connection	WITHOUT_CLASSIFICATION	0.9994872118629985	WITHOUT_CLASSIFICATION	5.127881370014756E-4	DESIGN
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999400707006296	WITHOUT_CLASSIFICATION	5.9929299370464625E-5	DESIGN
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999903507462659	WITHOUT_CLASSIFICATION	9.64925373412069E-6	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9998511271776239	WITHOUT_CLASSIFICATION	1.4887282237618357E-4	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9998511271776239	WITHOUT_CLASSIFICATION	1.4887282237618357E-4	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999242078662998	WITHOUT_CLASSIFICATION	7.57921337002818E-5	DESIGN
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.999865638594992	WITHOUT_CLASSIFICATION	1.3436140500797805E-4	DESIGN
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9997727984653534	WITHOUT_CLASSIFICATION	2.2720153464658943E-4	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9998511271776239	WITHOUT_CLASSIFICATION	1.4887282237618357E-4	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999242078662998	WITHOUT_CLASSIFICATION	7.57921337002818E-5	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999242078662998	WITHOUT_CLASSIFICATION	7.57921337002818E-5	DESIGN
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9998017062510938	WITHOUT_CLASSIFICATION	1.9829374890614515E-4	DESIGN
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.8291634155270305	WITHOUT_CLASSIFICATION	0.17083658447296943	DESIGN
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999997069558114	WITHOUT_CLASSIFICATION	2.9304418856863776E-7	DESIGN
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999873095799505	WITHOUT_CLASSIFICATION	1.2690420049585313E-5	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.987508086595053	WITHOUT_CLASSIFICATION	0.01249191340494704	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.987508086595053	WITHOUT_CLASSIFICATION	0.01249191340494704	DESIGN
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9998994457577789	WITHOUT_CLASSIFICATION	1.0055424222120121E-4	DESIGN
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.999133091135319	WITHOUT_CLASSIFICATION	8.66908864680976E-4	DESIGN
// default is POJO	WITHOUT_CLASSIFICATION	0.9990184835900642	WITHOUT_CLASSIFICATION	9.81516409935842E-4	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9996877514566058	WITHOUT_CLASSIFICATION	3.122485433941867E-4	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9996877514566058	WITHOUT_CLASSIFICATION	3.122485433941867E-4	DESIGN
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9986505018749752	WITHOUT_CLASSIFICATION	0.0013494981250249086	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999818843802945	WITHOUT_CLASSIFICATION	1.811561970551983E-5	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9940886801623655	WITHOUT_CLASSIFICATION	0.0059113198376343976	DESIGN
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999953114718054	WITHOUT_CLASSIFICATION	4.688528194560618E-6	DESIGN
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9991468110955102	WITHOUT_CLASSIFICATION	8.53188904489883E-4	DESIGN
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.999725865599245	WITHOUT_CLASSIFICATION	2.7413440075501445E-4	DESIGN
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9986603135773803	WITHOUT_CLASSIFICATION	0.001339686422619811	DESIGN
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9972493363904197	WITHOUT_CLASSIFICATION	0.0027506636095803415	DESIGN
//sort first by role name	WITHOUT_CLASSIFICATION	0.9988597510115772	WITHOUT_CLASSIFICATION	0.0011402489884227162	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9940886801623655	WITHOUT_CLASSIFICATION	0.0059113198376343976	DESIGN
//then by fk	WITHOUT_CLASSIFICATION	0.998973236421359	WITHOUT_CLASSIFICATION	0.001026763578640964	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9993774300227584	WITHOUT_CLASSIFICATION	6.225699772416759E-4	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9993774300227584	WITHOUT_CLASSIFICATION	6.225699772416759E-4	DESIGN
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9925882675513726	WITHOUT_CLASSIFICATION	0.007411732448627371	DESIGN
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9915734659721522	WITHOUT_CLASSIFICATION	0.008426534027847822	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9992168040725502	WITHOUT_CLASSIFICATION	7.831959274498333E-4	DESIGN
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9927945974316419	WITHOUT_CLASSIFICATION	0.00720540256835815	DESIGN
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9979859477001797	WITHOUT_CLASSIFICATION	0.002014052299820337	DESIGN
//then by id	WITHOUT_CLASSIFICATION	0.9993048884126883	WITHOUT_CLASSIFICATION	6.951115873116001E-4	DESIGN
// to be safe...	WITHOUT_CLASSIFICATION	0.9969327286559245	WITHOUT_CLASSIFICATION	0.0030672713440753957	DESIGN
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.999671701145161	WITHOUT_CLASSIFICATION	3.282988548390217E-4	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9998827713017235	WITHOUT_CLASSIFICATION	1.1722869827647177E-4	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9998827713017235	WITHOUT_CLASSIFICATION	1.1722869827647177E-4	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9985908858641959	WITHOUT_CLASSIFICATION	0.0014091141358041545	DESIGN
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9986506382302165	WITHOUT_CLASSIFICATION	0.0013493617697835014	DESIGN
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9994560459497884	WITHOUT_CLASSIFICATION	5.439540502116301E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// invokespecial	WITHOUT_CLASSIFICATION	0.9987190787985143	WITHOUT_CLASSIFICATION	0.0012809212014856185	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9995546641363486	WITHOUT_CLASSIFICATION	4.4533586365140293E-4	DESIGN
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.998846185794731	WITHOUT_CLASSIFICATION	0.0011538142052690908	DESIGN
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9976280148061768	WITHOUT_CLASSIFICATION	0.0023719851938230996	DESIGN
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9998306696196512	WITHOUT_CLASSIFICATION	1.6933038034885254E-4	DESIGN
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9985673291399685	WITHOUT_CLASSIFICATION	0.0014326708600314994	DESIGN
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9998568258789097	WITHOUT_CLASSIFICATION	1.431741210902611E-4	DESIGN
// new	WITHOUT_CLASSIFICATION	0.9996396887897011	WITHOUT_CLASSIFICATION	3.6031121029897337E-4	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9995373442134612	WITHOUT_CLASSIFICATION	4.626557865388225E-4	DESIGN
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9998067125090909	WITHOUT_CLASSIFICATION	1.9328749090901572E-4	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9987190787985143	WITHOUT_CLASSIFICATION	0.0012809212014856185	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9987190787985143	WITHOUT_CLASSIFICATION	0.0012809212014856185	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9987190787985143	WITHOUT_CLASSIFICATION	0.0012809212014856185	DESIGN
// aastore // args	WITHOUT_CLASSIFICATION	0.9985673291399685	WITHOUT_CLASSIFICATION	0.0014326708600314994	DESIGN
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9983739731221879	WITHOUT_CLASSIFICATION	0.0016260268778120913	DESIGN
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9996051951271147	WITHOUT_CLASSIFICATION	3.9480487288536377E-4	DESIGN
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9998383245566208	WITHOUT_CLASSIFICATION	1.616754433793064E-4	DESIGN
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9993058889223314	WITHOUT_CLASSIFICATION	6.941110776686327E-4	DESIGN
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9980462963340868	WITHOUT_CLASSIFICATION	0.0019537036659132037	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999996700722786	WITHOUT_CLASSIFICATION	3.2992772138975387E-6	DESIGN
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.998474568155591	WITHOUT_CLASSIFICATION	0.0015254318444091173	DESIGN
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9991398039363545	WITHOUT_CLASSIFICATION	8.601960636456589E-4	DESIGN
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.999809435110758	WITHOUT_CLASSIFICATION	1.9056488924189288E-4	DESIGN
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9992725338850751	WITHOUT_CLASSIFICATION	7.274661149249016E-4	DESIGN
// iconst_i	WITHOUT_CLASSIFICATION	0.9987190787985143	WITHOUT_CLASSIFICATION	0.0012809212014856185	DESIGN
// aaload	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9987202348819814	WITHOUT_CLASSIFICATION	0.001279765118018593	DESIGN
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9998391812854468	WITHOUT_CLASSIFICATION	1.6081871455323865E-4	DESIGN
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9998007812702823	WITHOUT_CLASSIFICATION	1.992187297176459E-4	DESIGN
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999940800863492	WITHOUT_CLASSIFICATION	5.919913650832393E-6	DESIGN
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.997024304181091	WITHOUT_CLASSIFICATION	0.0029756958189089576	DESIGN
// register in exception table	WITHOUT_CLASSIFICATION	0.9986756228118828	WITHOUT_CLASSIFICATION	0.001324377188117121	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9995546641363486	WITHOUT_CLASSIFICATION	4.4533586365140293E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9995546641363486	WITHOUT_CLASSIFICATION	4.4533586365140293E-4	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9995373442134612	WITHOUT_CLASSIFICATION	4.626557865388225E-4	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9987190787985143	WITHOUT_CLASSIFICATION	0.0012809212014856185	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9987202348819814	WITHOUT_CLASSIFICATION	0.001279765118018593	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999827958485169	WITHOUT_CLASSIFICATION	1.7204151483089154E-5	DESIGN
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9998551218398702	WITHOUT_CLASSIFICATION	1.4487816012969206E-4	DESIGN
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9995535644843307	WITHOUT_CLASSIFICATION	4.464355156692138E-4	DESIGN
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9990126624007609	WITHOUT_CLASSIFICATION	9.873375992390352E-4	DESIGN
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9986947028693335	WITHOUT_CLASSIFICATION	0.001305297130666579	DESIGN
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9994046669946032	WITHOUT_CLASSIFICATION	5.953330053968793E-4	DESIGN
// athrow	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9996341828410025	WITHOUT_CLASSIFICATION	3.65817158997528E-4	DESIGN
//swallow	WITHOUT_CLASSIFICATION	0.9989185733406403	WITHOUT_CLASSIFICATION	0.0010814266593598032	DESIGN
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9963692563531685	WITHOUT_CLASSIFICATION	0.003630743646831395	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9924178628014639	WITHOUT_CLASSIFICATION	0.007582137198535982	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9924178628014639	WITHOUT_CLASSIFICATION	0.007582137198535982	DESIGN
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9993051521811588	WITHOUT_CLASSIFICATION	6.94847818841238E-4	DESIGN
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9997705780321069	WITHOUT_CLASSIFICATION	2.2942196789298023E-4	DESIGN
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9950114261485901	WITHOUT_CLASSIFICATION	0.004988573851409908	DESIGN
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9986433814364944	WITHOUT_CLASSIFICATION	0.001356618563505559	DESIGN
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9993613638572083	WITHOUT_CLASSIFICATION	6.3863614279165E-4	DESIGN
// case of non-static field	WITHOUT_CLASSIFICATION	0.9998648437680252	WITHOUT_CLASSIFICATION	1.3515623197482302E-4	DESIGN
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9994658488578391	WITHOUT_CLASSIFICATION	5.341511421609468E-4	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998487612919388	WITHOUT_CLASSIFICATION	1.5123870806126987E-4	DESIGN
// ifnonnull	WITHOUT_CLASSIFICATION	0.9987190787985143	WITHOUT_CLASSIFICATION	0.0012809212014856185	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9986980637710843	WITHOUT_CLASSIFICATION	0.0013019362289157649	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9986980637710843	WITHOUT_CLASSIFICATION	0.0013019362289157649	DESIGN
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9986980637710843	WITHOUT_CLASSIFICATION	0.0013019362289157649	DESIGN
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9991425599331958	WITHOUT_CLASSIFICATION	8.574400668042328E-4	DESIGN
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9986980637710843	WITHOUT_CLASSIFICATION	0.0013019362289157649	DESIGN
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9998073085631163	WITHOUT_CLASSIFICATION	1.9269143688359716E-4	DESIGN
// int	WITHOUT_CLASSIFICATION	0.9997693732452541	WITHOUT_CLASSIFICATION	2.306267547458242E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9995546641363486	WITHOUT_CLASSIFICATION	4.4533586365140293E-4	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9995373442134612	WITHOUT_CLASSIFICATION	4.626557865388225E-4	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9987190787985143	WITHOUT_CLASSIFICATION	0.0012809212014856185	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9987202348819814	WITHOUT_CLASSIFICATION	0.001279765118018593	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9987202348819814	WITHOUT_CLASSIFICATION	0.001279765118018593	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9994046669946032	WITHOUT_CLASSIFICATION	5.953330053968793E-4	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9994046669946032	WITHOUT_CLASSIFICATION	5.953330053968793E-4	DESIGN
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9989778987434584	WITHOUT_CLASSIFICATION	0.0010221012565415238	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// putfield	WITHOUT_CLASSIFICATION	0.9987190787985143	WITHOUT_CLASSIFICATION	0.0012809212014856185	DESIGN
// return ;	WITHOUT_CLASSIFICATION	0.9988386497196862	WITHOUT_CLASSIFICATION	0.0011613502803138592	DESIGN
// ldc // field name	WITHOUT_CLASSIFICATION	0.9972089584222353	WITHOUT_CLASSIFICATION	0.00279104157776476	DESIGN
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999073965721498	WITHOUT_CLASSIFICATION	9.260342785024919E-5	DESIGN
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9994046669946032	WITHOUT_CLASSIFICATION	5.953330053968793E-4	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9983583965422045	WITHOUT_CLASSIFICATION	0.0016416034577954872	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9983583965422045	WITHOUT_CLASSIFICATION	0.0016416034577954872	DESIGN
// not array	WITHOUT_CLASSIFICATION	0.9971046812902671	WITHOUT_CLASSIFICATION	0.00289531870973284	DESIGN
// array of reference type	WITHOUT_CLASSIFICATION	0.9994121860981027	WITHOUT_CLASSIFICATION	5.878139018973592E-4	DESIGN
// boolean	WITHOUT_CLASSIFICATION	0.999726895047192	WITHOUT_CLASSIFICATION	2.7310495280794147E-4	DESIGN
// byte	WITHOUT_CLASSIFICATION	0.9995989301926821	WITHOUT_CLASSIFICATION	4.0106980731790414E-4	DESIGN
// char	WITHOUT_CLASSIFICATION	0.999807602465479	WITHOUT_CLASSIFICATION	1.92397534521055E-4	DESIGN
// short	WITHOUT_CLASSIFICATION	0.9988606984989792	WITHOUT_CLASSIFICATION	0.001139301501020881	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999563971328578	WITHOUT_CLASSIFICATION	4.360286714215927E-5	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9996197830232499	WITHOUT_CLASSIFICATION	3.802169767500233E-4	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9996197830232499	WITHOUT_CLASSIFICATION	3.802169767500233E-4	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9991527900001833	WITHOUT_CLASSIFICATION	8.472099998166903E-4	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9991527900001833	WITHOUT_CLASSIFICATION	8.472099998166903E-4	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9936437319949718	WITHOUT_CLASSIFICATION	0.006356268005028266	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9936437319949718	WITHOUT_CLASSIFICATION	0.006356268005028266	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9981680532878965	WITHOUT_CLASSIFICATION	0.0018319467121035474	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9981680532878965	WITHOUT_CLASSIFICATION	0.0018319467121035474	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9983583965422045	WITHOUT_CLASSIFICATION	0.0016416034577954872	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999563971328578	WITHOUT_CLASSIFICATION	4.360286714215927E-5	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9996197830232499	WITHOUT_CLASSIFICATION	3.802169767500233E-4	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9996197830232499	WITHOUT_CLASSIFICATION	3.802169767500233E-4	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9991527900001833	WITHOUT_CLASSIFICATION	8.472099998166903E-4	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9936437319949718	WITHOUT_CLASSIFICATION	0.006356268005028266	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9936437319949718	WITHOUT_CLASSIFICATION	0.006356268005028266	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9981680532878965	WITHOUT_CLASSIFICATION	0.0018319467121035474	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9988893110561531	WITHOUT_CLASSIFICATION	0.001110688943846813	DESIGN
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9967805682608054	WITHOUT_CLASSIFICATION	0.003219431739194628	DESIGN
//decrement the lock	WITHOUT_CLASSIFICATION	0.9982790036815609	WITHOUT_CLASSIFICATION	0.0017209963184391104	DESIGN
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9997934450722035	WITHOUT_CLASSIFICATION	2.0655492779647643E-4	DESIGN
//recache the updated state	WITHOUT_CLASSIFICATION	0.9994871859570646	WITHOUT_CLASSIFICATION	5.128140429353724E-4	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9995948631540114	WITHOUT_CLASSIFICATION	4.0513684598861234E-4	DESIGN
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999185204462623	WITHOUT_CLASSIFICATION	8.147955373774391E-5	DESIGN
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9757301319500389	WITHOUT_CLASSIFICATION	0.02426986804996109	DESIGN
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9998239840151709	WITHOUT_CLASSIFICATION	1.7601598482915395E-4	DESIGN
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9994970921782156	WITHOUT_CLASSIFICATION	5.029078217844221E-4	DESIGN
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9998926901846039	WITHOUT_CLASSIFICATION	1.0730981539606524E-4	DESIGN
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999095249001471	WITHOUT_CLASSIFICATION	9.047509985292547E-5	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9974651230464437	WITHOUT_CLASSIFICATION	0.002534876953556322	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9995948631540114	WITHOUT_CLASSIFICATION	4.0513684598861234E-4	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9989185733406403	WITHOUT_CLASSIFICATION	0.0010814266593598032	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9989185733406403	WITHOUT_CLASSIFICATION	0.0010814266593598032	DESIGN
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9868719945026575	WITHOUT_CLASSIFICATION	0.013128005497342379	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9974284462496579	WITHOUT_CLASSIFICATION	0.0025715537503421494	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9974284462496579	WITHOUT_CLASSIFICATION	0.0025715537503421494	DESIGN
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9985102962484603	WITHOUT_CLASSIFICATION	0.0014897037515397163	DESIGN
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9984819893202985	WITHOUT_CLASSIFICATION	0.0015180106797015019	DESIGN
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9954348194054146	WITHOUT_CLASSIFICATION	0.0045651805945854315	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9987683082084541	WITHOUT_CLASSIFICATION	0.0012316917915458857	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9987683082084541	WITHOUT_CLASSIFICATION	0.0012316917915458857	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9981600272190861	WITHOUT_CLASSIFICATION	0.001839972780913824	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9998070664670589	WITHOUT_CLASSIFICATION	1.9293353294114093E-4	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9998070664670589	WITHOUT_CLASSIFICATION	1.9293353294114093E-4	DESIGN
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9986025687782153	WITHOUT_CLASSIFICATION	0.0013974312217846835	DESIGN
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9994658980391419	WITHOUT_CLASSIFICATION	5.341019608580415E-4	DESIGN
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9990829833763151	WITHOUT_CLASSIFICATION	9.170166236849926E-4	DESIGN
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9987190787985143	WITHOUT_CLASSIFICATION	0.0012809212014856185	DESIGN
// MUTABLE	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// WHERE	WITHOUT_CLASSIFICATION	0.9999088928703054	WITHOUT_CLASSIFICATION	9.110712969460813E-5	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9995461509202707	WITHOUT_CLASSIFICATION	4.5384907972935743E-4	DESIGN
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9987190787985143	WITHOUT_CLASSIFICATION	0.0012809212014856185	DESIGN
// TODO:	WITHOUT_CLASSIFICATION	0.5110807944645023	WITHOUT_CLASSIFICATION	0.4889192055354977	DESIGN
// ID	WITHOUT_CLASSIFICATION	0.9993445682744546	WITHOUT_CLASSIFICATION	6.554317255454214E-4	DESIGN
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9995927735429453	WITHOUT_CLASSIFICATION	4.072264570546642E-4	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9987190787985143	WITHOUT_CLASSIFICATION	0.0012809212014856185	DESIGN
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9984575023122437	WITHOUT_CLASSIFICATION	0.0015424976877562136	DESIGN
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9988664570406612	WITHOUT_CLASSIFICATION	0.0011335429593387566	DESIGN
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.997955753894844	WITHOUT_CLASSIFICATION	0.002044246105156009	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9987190787985143	WITHOUT_CLASSIFICATION	0.0012809212014856185	DESIGN
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9994950201370237	WITHOUT_CLASSIFICATION	5.049798629763708E-4	DESIGN
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999746100410951	WITHOUT_CLASSIFICATION	2.538995890495013E-5	DESIGN
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9987704847900845	WITHOUT_CLASSIFICATION	0.0012295152099155145	DESIGN
// IMPORT	WITHOUT_CLASSIFICATION	0.9995358419919113	WITHOUT_CLASSIFICATION	4.641580080887268E-4	DESIGN
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.998727342089762	WITHOUT_CLASSIFICATION	0.0012726579102380316	DESIGN
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9990535412607175	WITHOUT_CLASSIFICATION	9.464587392824552E-4	DESIGN
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9989778987434584	WITHOUT_CLASSIFICATION	0.0010221012565415238	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9987190787985143	WITHOUT_CLASSIFICATION	0.0012809212014856185	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9987982805400171	WITHOUT_CLASSIFICATION	0.0012017194599829295	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9990829833763151	WITHOUT_CLASSIFICATION	9.170166236849926E-4	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9989018150070841	WITHOUT_CLASSIFICATION	0.0010981849929160062	DESIGN
// joined subclasses	WITHOUT_CLASSIFICATION	0.9995096611603624	WITHOUT_CLASSIFICATION	4.903388396374778E-4	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9995548912323523	WITHOUT_CLASSIFICATION	4.4510876764777027E-4	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9995461509202707	WITHOUT_CLASSIFICATION	4.5384907972935743E-4	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9987982805400171	WITHOUT_CLASSIFICATION	0.0012017194599829295	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9989018150070841	WITHOUT_CLASSIFICATION	0.0010981849929160062	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9995548912323523	WITHOUT_CLASSIFICATION	4.4510876764777027E-4	DESIGN
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9995462391492581	WITHOUT_CLASSIFICATION	4.537608507419305E-4	DESIGN
// TABLENAME	WITHOUT_CLASSIFICATION	0.9987190787985143	WITHOUT_CLASSIFICATION	0.0012809212014856185	DESIGN
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9995462391492581	WITHOUT_CLASSIFICATION	4.537608507419305E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9987440822640996	WITHOUT_CLASSIFICATION	0.001255917735900351	DESIGN
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9987190787985143	WITHOUT_CLASSIFICATION	0.0012809212014856185	DESIGN
// column index	WITHOUT_CLASSIFICATION	0.9999617036252221	WITHOUT_CLASSIFICATION	3.829637477796258E-5	DESIGN
//column unique-key	WITHOUT_CLASSIFICATION	0.9971351829801379	WITHOUT_CLASSIFICATION	0.002864817019861992	DESIGN
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9976762017775723	WITHOUT_CLASSIFICATION	0.0023237982224275874	DESIGN
// for an any	WITHOUT_CLASSIFICATION	0.9990848548835686	WITHOUT_CLASSIFICATION	9.151451164313385E-4	DESIGN
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.999996753337337	WITHOUT_CLASSIFICATION	3.246662663136539E-6	DESIGN
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.99997751191155	WITHOUT_CLASSIFICATION	2.248808844995639E-5	DESIGN
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9965058147502802	WITHOUT_CLASSIFICATION	0.003494185249719733	DESIGN
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999993197289334	WITHOUT_CLASSIFICATION	6.802710666724904E-7	DESIGN
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.99997751191155	WITHOUT_CLASSIFICATION	2.248808844995639E-5	DESIGN
// ROLENAME	WITHOUT_CLASSIFICATION	0.9987190787985143	WITHOUT_CLASSIFICATION	0.0012809212014856185	DESIGN
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9987190787985143	WITHOUT_CLASSIFICATION	0.0012809212014856185	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9996904915733146	WITHOUT_CLASSIFICATION	3.095084266853461E-4	DESIGN
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9998223436662617	WITHOUT_CLASSIFICATION	1.7765633373821162E-4	DESIGN
// SORT	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9987982805400171	WITHOUT_CLASSIFICATION	0.0012017194599829295	DESIGN
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9994046669946032	WITHOUT_CLASSIFICATION	5.953330053968793E-4	DESIGN
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9987439147870036	WITHOUT_CLASSIFICATION	0.0012560852129962924	DESIGN
// set up second pass	WITHOUT_CLASSIFICATION	0.9997120897503894	WITHOUT_CLASSIFICATION	2.879102496105187E-4	DESIGN
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9836591017378443	WITHOUT_CLASSIFICATION	0.01634089826215569	DESIGN
// a nested composite element	WITHOUT_CLASSIFICATION	0.987128599159777	WITHOUT_CLASSIFICATION	0.012871400840222971	DESIGN
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9992783340826527	WITHOUT_CLASSIFICATION	7.216659173472225E-4	DESIGN
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999678334826554	WITHOUT_CLASSIFICATION	3.216651734461929E-5	DESIGN
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9997840525722912	WITHOUT_CLASSIFICATION	2.1594742770873263E-4	DESIGN
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9992396830431648	WITHOUT_CLASSIFICATION	7.603169568352515E-4	DESIGN
// GENERATOR	WITHOUT_CLASSIFICATION	0.9989729149870646	WITHOUT_CLASSIFICATION	0.0010270850129353165	DESIGN
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9982532458043034	WITHOUT_CLASSIFICATION	0.001746754195696566	DESIGN
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9989778987434584	WITHOUT_CLASSIFICATION	0.0010221012565415238	DESIGN
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9974935821461407	WITHOUT_CLASSIFICATION	0.002506417853859298	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9994950201370237	WITHOUT_CLASSIFICATION	5.049798629763708E-4	DESIGN
// contained elements:	WITHOUT_CLASSIFICATION	0.9988193637665289	WITHOUT_CLASSIFICATION	0.0011806362334710729	DESIGN
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9989697533117615	WITHOUT_CLASSIFICATION	0.001030246688238503	DESIGN
// Bind the where	WITHOUT_CLASSIFICATION	0.9995397696925231	WITHOUT_CLASSIFICATION	4.602303074769643E-4	DESIGN
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9993055687366215	WITHOUT_CLASSIFICATION	6.944312633786315E-4	DESIGN
// Bind the filters	WITHOUT_CLASSIFICATION	0.9993449437282614	WITHOUT_CLASSIFICATION	6.550562717386139E-4	DESIGN
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9986273930158289	WITHOUT_CLASSIFICATION	0.0013726069841710335	DESIGN
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999991464595597	WITHOUT_CLASSIFICATION	8.535404402281165E-7	DESIGN
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.999772955819357	WITHOUT_CLASSIFICATION	2.270441806429024E-4	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.7021282237825468	DESIGN	0.29787177621745325	WITHOUT_CLASSIFICATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9987173664477137	WITHOUT_CLASSIFICATION	0.0012826335522862452	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9987593110959543	WITHOUT_CLASSIFICATION	0.0012406889040457389	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9987593110959543	WITHOUT_CLASSIFICATION	0.0012406889040457389	DESIGN
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9994126628192564	WITHOUT_CLASSIFICATION	5.873371807435341E-4	DESIGN
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999910987187669	WITHOUT_CLASSIFICATION	8.901281233136688E-6	DESIGN
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9977599751161315	WITHOUT_CLASSIFICATION	0.0022400248838686443	DESIGN
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9992175176175321	WITHOUT_CLASSIFICATION	7.824823824678466E-4	DESIGN
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9977422282495423	WITHOUT_CLASSIFICATION	0.002257771750457751	DESIGN
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9945773433890401	WITHOUT_CLASSIFICATION	0.005422656610959947	DESIGN
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9996699684575894	WITHOUT_CLASSIFICATION	3.300315424106073E-4	DESIGN
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999993911504513	WITHOUT_CLASSIFICATION	6.088495487812278E-7	DESIGN
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.997172423521688	WITHOUT_CLASSIFICATION	0.0028275764783120137	DESIGN
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9976129032581886	WITHOUT_CLASSIFICATION	0.0023870967418113654	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
//Schema export:	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9965026011745894	WITHOUT_CLASSIFICATION	0.003497398825410467	DESIGN
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9941295424768334	WITHOUT_CLASSIFICATION	0.00587045752316666	DESIGN
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9987209692030025	WITHOUT_CLASSIFICATION	0.001279030796997492	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999726058923822	WITHOUT_CLASSIFICATION	2.7394107617684755E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9695616003513946	WITHOUT_CLASSIFICATION	0.030438399648605435	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9792280580643364	WITHOUT_CLASSIFICATION	0.020771941935663573	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999791757882123	WITHOUT_CLASSIFICATION	2.082421178774897E-5	DESIGN
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9981582899717982	WITHOUT_CLASSIFICATION	0.0018417100282018175	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9881938355658563	WITHOUT_CLASSIFICATION	0.01180616443414377	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9996846883197792	WITHOUT_CLASSIFICATION	3.153116802207998E-4	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9996846883197792	WITHOUT_CLASSIFICATION	3.153116802207998E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9971786544989022	WITHOUT_CLASSIFICATION	0.0028213455010978462	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9971786544989022	WITHOUT_CLASSIFICATION	0.0028213455010978462	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.7021282237825468	DESIGN	0.29787177621745325	WITHOUT_CLASSIFICATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.977478529273724	WITHOUT_CLASSIFICATION	0.022521470726275944	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9989599895937077	WITHOUT_CLASSIFICATION	0.0010400104062923726	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9997154664151013	WITHOUT_CLASSIFICATION	2.8453358489868196E-4	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9985908858641959	WITHOUT_CLASSIFICATION	0.0014091141358041545	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9989599895937077	WITHOUT_CLASSIFICATION	0.0010400104062923726	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9997154664151013	WITHOUT_CLASSIFICATION	2.8453358489868196E-4	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9951580477399553	WITHOUT_CLASSIFICATION	0.004841952260044641	DESIGN
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.996476710929381	WITHOUT_CLASSIFICATION	0.003523289070618978	DESIGN
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9959256367057445	WITHOUT_CLASSIFICATION	0.004074363294255475	DESIGN
// the element has changed	WITHOUT_CLASSIFICATION	0.9997359834240405	WITHOUT_CLASSIFICATION	2.6401657595955777E-4	DESIGN
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9750545117878586	WITHOUT_CLASSIFICATION	0.024945488212141438	DESIGN
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.938258204135258	WITHOUT_CLASSIFICATION	0.06174179586474208	DESIGN
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9995447038610388	WITHOUT_CLASSIFICATION	4.5529613896121206E-4	DESIGN
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9978494753375492	WITHOUT_CLASSIFICATION	0.002150524662450835	DESIGN
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.966633193142631	WITHOUT_CLASSIFICATION	0.03336680685736902	DESIGN
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999978867077441	WITHOUT_CLASSIFICATION	2.113292255836842E-6	DESIGN
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9992323228234811	WITHOUT_CLASSIFICATION	7.676771765189352E-4	DESIGN
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9992763411502831	WITHOUT_CLASSIFICATION	7.236588497169802E-4	DESIGN
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9987287784892682	WITHOUT_CLASSIFICATION	0.0012712215107317459	DESIGN
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9974435421075726	WITHOUT_CLASSIFICATION	0.002556457892427301	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9985908858641959	WITHOUT_CLASSIFICATION	0.0014091141358041545	DESIGN
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9974435421075726	WITHOUT_CLASSIFICATION	0.002556457892427301	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9948681555073675	WITHOUT_CLASSIFICATION	0.005131844492632445	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9948681555073675	WITHOUT_CLASSIFICATION	0.005131844492632445	DESIGN
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9996443928760497	WITHOUT_CLASSIFICATION	3.556071239502975E-4	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9951580477399553	WITHOUT_CLASSIFICATION	0.004841952260044641	DESIGN
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9984787429047133	WITHOUT_CLASSIFICATION	0.0015212570952867284	DESIGN
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.6621241290198292	DESIGN	0.3378758709801707	WITHOUT_CLASSIFICATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.5835402273287926	DESIGN	0.4164597726712073	WITHOUT_CLASSIFICATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999216169034701	WITHOUT_CLASSIFICATION	7.838309652988486E-5	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9309032660472617	WITHOUT_CLASSIFICATION	0.06909673395273834	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9951580477399553	WITHOUT_CLASSIFICATION	0.004841952260044641	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999216169034701	WITHOUT_CLASSIFICATION	7.838309652988486E-5	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9309032660472617	WITHOUT_CLASSIFICATION	0.06909673395273834	DESIGN
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9990973077116105	WITHOUT_CLASSIFICATION	9.026922883894087E-4	DESIGN
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.999602218655527	WITHOUT_CLASSIFICATION	3.977813444730587E-4	DESIGN
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999291480292554	WITHOUT_CLASSIFICATION	7.085197074471404E-5	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9951580477399553	WITHOUT_CLASSIFICATION	0.004841952260044641	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9951580477399553	WITHOUT_CLASSIFICATION	0.004841952260044641	DESIGN
// from Map	WITHOUT_CLASSIFICATION	0.9985901724288198	WITHOUT_CLASSIFICATION	0.0014098275711802635	DESIGN
// from SortedMap	WITHOUT_CLASSIFICATION	0.9981873330840945	WITHOUT_CLASSIFICATION	0.001812666915905567	DESIGN
//inject the data	WITHOUT_CLASSIFICATION	0.9993885477145695	WITHOUT_CLASSIFICATION	6.114522854303976E-4	DESIGN
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9996636101897936	WITHOUT_CLASSIFICATION	3.363898102064146E-4	DESIGN
//default pool size 20	WITHOUT_CLASSIFICATION	0.999789634775503	WITHOUT_CLASSIFICATION	2.103652244970588E-4	DESIGN
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999808107802329	WITHOUT_CLASSIFICATION	1.9189219767030463E-5	DESIGN
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999899155234284	WITHOUT_CLASSIFICATION	1.0084476571563388E-5	DESIGN
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9992908783863582	WITHOUT_CLASSIFICATION	7.091216136418118E-4	DESIGN
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9997337309028447	WITHOUT_CLASSIFICATION	2.66269097155328E-4	DESIGN
// then bind it	WITHOUT_CLASSIFICATION	0.9980439134263615	WITHOUT_CLASSIFICATION	0.0019560865736384576	DESIGN
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9717471331491119	WITHOUT_CLASSIFICATION	0.028252866850888115	DESIGN
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9843236203691744	WITHOUT_CLASSIFICATION	0.01567637963082555	DESIGN
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9998111151090748	WITHOUT_CLASSIFICATION	1.888848909250811E-4	DESIGN
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9955108573032662	WITHOUT_CLASSIFICATION	0.004489142696733919	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994397897476158	WITHOUT_CLASSIFICATION	5.602102523841587E-4	DESIGN
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999963598904866	WITHOUT_CLASSIFICATION	3.6401095134018674E-6	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9962555053949906	WITHOUT_CLASSIFICATION	0.003744494605009409	DESIGN
//private String propertyName;	WITHOUT_CLASSIFICATION	0.997039645428446	WITHOUT_CLASSIFICATION	0.002960354571553974	DESIGN
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9984125721668382	WITHOUT_CLASSIFICATION	0.0015874278331617527	DESIGN
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9997154664151013	WITHOUT_CLASSIFICATION	2.8453358489868196E-4	DESIGN
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9997800036705653	WITHOUT_CLASSIFICATION	2.1999632943464506E-4	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9962555053949906	WITHOUT_CLASSIFICATION	0.003744494605009409	DESIGN
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9997344343541128	WITHOUT_CLASSIFICATION	2.655656458871838E-4	DESIGN
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9971658158958268	WITHOUT_CLASSIFICATION	0.0028341841041731528	DESIGN
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.974819221751349	WITHOUT_CLASSIFICATION	0.025180778248650944	DESIGN
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9995238372147577	WITHOUT_CLASSIFICATION	4.761627852423227E-4	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9973942661749204	WITHOUT_CLASSIFICATION	0.0026057338250796117	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.999891803348995	WITHOUT_CLASSIFICATION	1.0819665100497363E-4	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9991571146780062	WITHOUT_CLASSIFICATION	8.428853219939011E-4	DESIGN
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9994046669946032	WITHOUT_CLASSIFICATION	5.953330053968793E-4	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9973878557624668	WITHOUT_CLASSIFICATION	0.0026121442375333427	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995977582290013	WITHOUT_CLASSIFICATION	4.022417709986421E-4	DESIGN
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999642950608956	WITHOUT_CLASSIFICATION	3.5704939104418635E-5	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.99995952508277	WITHOUT_CLASSIFICATION	4.047491723004319E-5	DESIGN
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9684289469634764	WITHOUT_CLASSIFICATION	0.0315710530365236	DESIGN
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9997072791546645	WITHOUT_CLASSIFICATION	2.927208453354834E-4	DESIGN
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9998984478380195	WITHOUT_CLASSIFICATION	1.0155216198050886E-4	DESIGN
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999353158799381	WITHOUT_CLASSIFICATION	6.468412006195332E-5	DESIGN
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9994395885867239	WITHOUT_CLASSIFICATION	5.604114132761677E-4	DESIGN
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.998368349910869	WITHOUT_CLASSIFICATION	0.0016316500891311128	DESIGN
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9993994031435991	WITHOUT_CLASSIFICATION	6.005968564008802E-4	DESIGN
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9780509480737725	WITHOUT_CLASSIFICATION	0.02194905192622747	DESIGN
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9980650560599975	WITHOUT_CLASSIFICATION	0.0019349439400024573	DESIGN
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9996184029644406	WITHOUT_CLASSIFICATION	3.8159703555941697E-4	DESIGN
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9959724123804565	WITHOUT_CLASSIFICATION	0.004027587619543535	DESIGN
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978452991706535	WITHOUT_CLASSIFICATION	0.0021547008293466043	DESIGN
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9949973482117273	WITHOUT_CLASSIFICATION	0.00500265178827285	DESIGN
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990797676276763	WITHOUT_CLASSIFICATION	9.202323723236545E-4	DESIGN
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997830037870016	WITHOUT_CLASSIFICATION	2.1699621299834396E-4	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99812294438062	WITHOUT_CLASSIFICATION	0.0018770556193799374	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998441464592142	WITHOUT_CLASSIFICATION	0.0015585354078580182	DESIGN
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99812294438062	WITHOUT_CLASSIFICATION	0.0018770556193799374	DESIGN
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99812294438062	WITHOUT_CLASSIFICATION	0.0018770556193799374	DESIGN
// by default we report no support	WITHOUT_CLASSIFICATION	0.9042598574225095	WITHOUT_CLASSIFICATION	0.09574014257749053	DESIGN
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.5015903097955847	WITHOUT_CLASSIFICATION	0.4984096902044154	DESIGN
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992631533689678	WITHOUT_CLASSIFICATION	7.368466310322291E-4	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9857972397418309	WITHOUT_CLASSIFICATION	0.014202760258169016	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9892366271883289	WITHOUT_CLASSIFICATION	0.010763372811671135	DESIGN
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995269133383016	WITHOUT_CLASSIFICATION	4.7308666169849353E-4	DESIGN
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998141915672286	WITHOUT_CLASSIFICATION	0.0018580843277139303	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99812294438062	WITHOUT_CLASSIFICATION	0.0018770556193799374	DESIGN
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984263742462453	WITHOUT_CLASSIFICATION	0.0015736257537547471	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99812294438062	WITHOUT_CLASSIFICATION	0.0018770556193799374	DESIGN
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9998884824097917	WITHOUT_CLASSIFICATION	1.1151759020834483E-4	DESIGN
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994674201121095	WITHOUT_CLASSIFICATION	5.325798878904829E-4	DESIGN
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9880757092733317	WITHOUT_CLASSIFICATION	0.011924290726668339	DESIGN
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9996355005184611	WITHOUT_CLASSIFICATION	3.6449948153891303E-4	DESIGN
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9889949305819283	WITHOUT_CLASSIFICATION	0.011005069418071688	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9968641182344443	WITHOUT_CLASSIFICATION	0.0031358817655555847	DESIGN
//" cascade";	WITHOUT_CLASSIFICATION	0.997187495607451	WITHOUT_CLASSIFICATION	0.0028125043925489412	DESIGN
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9992717511131121	WITHOUT_CLASSIFICATION	7.282488868878134E-4	DESIGN
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9990973077116105	WITHOUT_CLASSIFICATION	9.026922883894087E-4	DESIGN
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.998790065992688	WITHOUT_CLASSIFICATION	0.0012099340073119234	DESIGN
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9987713081065248	WITHOUT_CLASSIFICATION	0.001228691893475175	DESIGN
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.999077380319986	WITHOUT_CLASSIFICATION	9.226196800139713E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995977582290013	WITHOUT_CLASSIFICATION	4.022417709986421E-4	DESIGN
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9941459523887651	WITHOUT_CLASSIFICATION	0.0058540476112348685	DESIGN
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9983694328910984	WITHOUT_CLASSIFICATION	0.0016305671089016634	DESIGN
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9926644963574307	WITHOUT_CLASSIFICATION	0.007335503642569387	DESIGN
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9907357674294466	WITHOUT_CLASSIFICATION	0.00926423257055335	DESIGN
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9991941080106801	WITHOUT_CLASSIFICATION	8.05891989319805E-4	DESIGN
// HHH-2300	WITHOUT_CLASSIFICATION	0.9987190787985143	WITHOUT_CLASSIFICATION	0.0012809212014856185	DESIGN
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9981173859699957	WITHOUT_CLASSIFICATION	0.0018826140300043218	DESIGN
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994335594409239	WITHOUT_CLASSIFICATION	5.66440559076157E-4	DESIGN
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988369899908367	WITHOUT_CLASSIFICATION	0.0011630100091632044	DESIGN
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994715884018619	WITHOUT_CLASSIFICATION	5.284115981381866E-4	DESIGN
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994807147744716	WITHOUT_CLASSIFICATION	5.192852255283578E-4	DESIGN
// not null is implicit	WITHOUT_CLASSIFICATION	0.9981995806904587	WITHOUT_CLASSIFICATION	0.0018004193095413287	DESIGN
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999708148808673	WITHOUT_CLASSIFICATION	2.9185119132654123E-5	DESIGN
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9996049762758485	WITHOUT_CLASSIFICATION	3.950237241514329E-4	DESIGN
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999996305415371	WITHOUT_CLASSIFICATION	3.694584628975783E-7	DESIGN
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993565768975698	WITHOUT_CLASSIFICATION	6.434231024301993E-4	DESIGN
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9989834622350248	WITHOUT_CLASSIFICATION	0.001016537764975287	DESIGN
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9991884404749569	WITHOUT_CLASSIFICATION	8.115595250431241E-4	DESIGN
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9995120861165024	WITHOUT_CLASSIFICATION	4.879138834975145E-4	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9785897654142471	WITHOUT_CLASSIFICATION	0.02141023458575291	DESIGN
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.8955879176228415	WITHOUT_CLASSIFICATION	0.10441208237715853	DESIGN
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9867258974191606	WITHOUT_CLASSIFICATION	0.01327410258083944	DESIGN
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9992352080440378	WITHOUT_CLASSIFICATION	7.647919559622082E-4	DESIGN
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9892262790109226	WITHOUT_CLASSIFICATION	0.010773720989077355	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995977582290013	WITHOUT_CLASSIFICATION	4.022417709986421E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9968641182344443	WITHOUT_CLASSIFICATION	0.0031358817655555847	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9936722360864014	WITHOUT_CLASSIFICATION	0.0063277639135984835	DESIGN
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999781793224533	WITHOUT_CLASSIFICATION	2.182067754677579E-5	DESIGN
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.999703951764305	WITHOUT_CLASSIFICATION	2.960482356949099E-4	DESIGN
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9996474305423553	WITHOUT_CLASSIFICATION	3.525694576447157E-4	DESIGN
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.998495303689917	WITHOUT_CLASSIFICATION	0.0015046963100829448	DESIGN
// function templates	WITHOUT_CLASSIFICATION	0.9998239062139581	WITHOUT_CLASSIFICATION	1.7609378604183324E-4	DESIGN
//not null is implicit	WITHOUT_CLASSIFICATION	0.9988292763514605	WITHOUT_CLASSIFICATION	0.001170723648539563	DESIGN
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9997387007251737	WITHOUT_CLASSIFICATION	2.612992748263133E-4	DESIGN
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9995519929161458	WITHOUT_CLASSIFICATION	4.4800708385414584E-4	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9992568539270731	WITHOUT_CLASSIFICATION	7.431460729269972E-4	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9992448186396893	WITHOUT_CLASSIFICATION	7.551813603107386E-4	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9985528905281805	WITHOUT_CLASSIFICATION	0.0014471094718194787	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9994769758908447	WITHOUT_CLASSIFICATION	5.23024109155202E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995977582290013	WITHOUT_CLASSIFICATION	4.022417709986421E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995977582290013	WITHOUT_CLASSIFICATION	4.022417709986421E-4	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.994602331069795	WITHOUT_CLASSIFICATION	0.005397668930204935	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9993927736562188	WITHOUT_CLASSIFICATION	6.072263437811366E-4	DESIGN
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9987507879026711	WITHOUT_CLASSIFICATION	0.001249212097328935	DESIGN
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9990973077116105	WITHOUT_CLASSIFICATION	9.026922883894087E-4	DESIGN
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9996489195791244	WITHOUT_CLASSIFICATION	3.510804208756034E-4	DESIGN
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9981863681512337	WITHOUT_CLASSIFICATION	0.0018136318487663246	DESIGN
// add new ordered map	WITHOUT_CLASSIFICATION	0.999658852349268	WITHOUT_CLASSIFICATION	3.411476507320213E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995977582290013	WITHOUT_CLASSIFICATION	4.022417709986421E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9997190316098272	WITHOUT_CLASSIFICATION	2.8096839017277125E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9995493183341849	WITHOUT_CLASSIFICATION	4.506816658150366E-4	DESIGN
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.988326589000664	WITHOUT_CLASSIFICATION	0.011673410999336118	DESIGN
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9993087180448608	WITHOUT_CLASSIFICATION	6.91281955139273E-4	DESIGN
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9960549071199242	WITHOUT_CLASSIFICATION	0.003945092880075823	DESIGN
// No batch statements	WITHOUT_CLASSIFICATION	0.999887722343702	WITHOUT_CLASSIFICATION	1.1227765629797881E-4	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9008738953176386	WITHOUT_CLASSIFICATION	0.09912610468236142	DESIGN
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9981345534340343	WITHOUT_CLASSIFICATION	0.001865446565965745	DESIGN
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9984700537581612	WITHOUT_CLASSIFICATION	0.0015299462418388718	DESIGN
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.99900911233324	WITHOUT_CLASSIFICATION	9.90887666760011E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9968641182344443	WITHOUT_CLASSIFICATION	0.0031358817655555847	DESIGN
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9887819742774309	WITHOUT_CLASSIFICATION	0.011218025722569138	DESIGN
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999571332599987	WITHOUT_CLASSIFICATION	4.2866740001269096E-5	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9666097481156748	WITHOUT_CLASSIFICATION	0.03339025188432514	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9968641182344443	WITHOUT_CLASSIFICATION	0.0031358817655555847	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9996867897767544	WITHOUT_CLASSIFICATION	3.1321022324565153E-4	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9997190316098272	WITHOUT_CLASSIFICATION	2.8096839017277125E-4	DESIGN
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9957714152505953	WITHOUT_CLASSIFICATION	0.004228584749404693	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995977582290013	WITHOUT_CLASSIFICATION	4.022417709986421E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.997501035037005	WITHOUT_CLASSIFICATION	0.002498964962994971	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995977582290013	WITHOUT_CLASSIFICATION	4.022417709986421E-4	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999485956581071	WITHOUT_CLASSIFICATION	5.1404341892965705E-5	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9992568539270731	WITHOUT_CLASSIFICATION	7.431460729269972E-4	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9992448186396893	WITHOUT_CLASSIFICATION	7.551813603107386E-4	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9985528905281805	WITHOUT_CLASSIFICATION	0.0014471094718194787	DESIGN
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.99997933449265	WITHOUT_CLASSIFICATION	2.0665507350011486E-5	DESIGN
// add the main query	WITHOUT_CLASSIFICATION	0.9997081543720344	WITHOUT_CLASSIFICATION	2.918456279655406E-4	DESIGN
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9998686981802276	WITHOUT_CLASSIFICATION	1.313018197723421E-4	DESIGN
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9995254296387771	WITHOUT_CLASSIFICATION	4.7457036122279186E-4	DESIGN
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999809936072854	WITHOUT_CLASSIFICATION	1.9006392714590533E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995977582290013	WITHOUT_CLASSIFICATION	4.022417709986421E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9968641182344443	WITHOUT_CLASSIFICATION	0.0031358817655555847	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9994769758908447	WITHOUT_CLASSIFICATION	5.23024109155202E-4	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.994602331069795	WITHOUT_CLASSIFICATION	0.005397668930204935	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984277893352589	WITHOUT_CLASSIFICATION	0.0015722106647411132	DESIGN
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997937286281398	WITHOUT_CLASSIFICATION	2.0627137186024895E-4	DESIGN
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999336346099569	WITHOUT_CLASSIFICATION	6.636539004310169E-5	DESIGN
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9986603135773803	WITHOUT_CLASSIFICATION	0.001339686422619811	DESIGN
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.998135998310578	WITHOUT_CLASSIFICATION	0.0018640016894220521	DESIGN
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.7980204751631826	DESIGN	0.20197952483681722	WITHOUT_CLASSIFICATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99812294438062	WITHOUT_CLASSIFICATION	0.0018770556193799374	DESIGN
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9982206411381391	WITHOUT_CLASSIFICATION	0.0017793588618608427	DESIGN
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.993885565340261	WITHOUT_CLASSIFICATION	0.006114434659739045	DESIGN
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.994696491723001	WITHOUT_CLASSIFICATION	0.005303508276998987	DESIGN
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.992840024388475	WITHOUT_CLASSIFICATION	0.007159975611524996	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9989778987434584	WITHOUT_CLASSIFICATION	0.0010221012565415238	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99812294438062	WITHOUT_CLASSIFICATION	0.0018770556193799374	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998441464592142	WITHOUT_CLASSIFICATION	0.0015585354078580182	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9857972397418309	WITHOUT_CLASSIFICATION	0.014202760258169016	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9989778987434584	WITHOUT_CLASSIFICATION	0.0010221012565415238	DESIGN
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9995996300404382	WITHOUT_CLASSIFICATION	4.0036995956179084E-4	DESIGN
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9986998769805017	WITHOUT_CLASSIFICATION	0.0013001230194983596	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980663459361756	WITHOUT_CLASSIFICATION	0.0019336540638244225	DESIGN
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99812294438062	WITHOUT_CLASSIFICATION	0.0018770556193799374	DESIGN
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9891638573425732	WITHOUT_CLASSIFICATION	0.010836142657426743	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995977582290013	WITHOUT_CLASSIFICATION	4.022417709986421E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995977582290013	WITHOUT_CLASSIFICATION	4.022417709986421E-4	DESIGN
/*<String>*/	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9892366271883289	WITHOUT_CLASSIFICATION	0.010763372811671135	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99812294438062	WITHOUT_CLASSIFICATION	0.0018770556193799374	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9785897654142471	WITHOUT_CLASSIFICATION	0.02141023458575291	DESIGN
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9893168929337204	WITHOUT_CLASSIFICATION	0.010683107066279637	DESIGN
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.993360141927182	WITHOUT_CLASSIFICATION	0.006639858072818078	DESIGN
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999122479291023	WITHOUT_CLASSIFICATION	8.775207089773275E-5	DESIGN
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9981881985920288	WITHOUT_CLASSIFICATION	0.0018118014079712154	DESIGN
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9997012814003238	WITHOUT_CLASSIFICATION	2.9871859967620616E-4	DESIGN
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9989787145476141	WITHOUT_CLASSIFICATION	0.0010212854523858597	DESIGN
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9995820001106784	WITHOUT_CLASSIFICATION	4.179998893215338E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9973878557624668	WITHOUT_CLASSIFICATION	0.0026121442375333427	DESIGN
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9991274439762371	WITHOUT_CLASSIFICATION	8.725560237629604E-4	DESIGN
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9851020444287129	WITHOUT_CLASSIFICATION	0.014897955571287192	DESIGN
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9994684111721078	WITHOUT_CLASSIFICATION	5.31588827892061E-4	DESIGN
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9996472487074579	WITHOUT_CLASSIFICATION	3.5275129254201936E-4	DESIGN
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999702094826453	WITHOUT_CLASSIFICATION	2.9790517354753047E-5	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.998711048018811	WITHOUT_CLASSIFICATION	0.0012889519811890148	DESIGN
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996436210149632	WITHOUT_CLASSIFICATION	3.563789850368158E-4	DESIGN
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995213068427616	WITHOUT_CLASSIFICATION	4.786931572383663E-4	DESIGN
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999520990261856	WITHOUT_CLASSIFICATION	4.79009738143318E-5	DESIGN
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9973988770698559	WITHOUT_CLASSIFICATION	0.0026011229301442034	DESIGN
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9977011782144379	WITHOUT_CLASSIFICATION	0.0022988217855620997	DESIGN
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996483401773688	WITHOUT_CLASSIFICATION	3.5165982263109285E-4	DESIGN
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999832031907343	WITHOUT_CLASSIFICATION	1.6796809265697397E-4	DESIGN
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997610670193394	WITHOUT_CLASSIFICATION	2.389329806605547E-4	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998571364852687	WITHOUT_CLASSIFICATION	1.428635147311978E-4	DESIGN
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9933759342510943	WITHOUT_CLASSIFICATION	0.006624065748905783	DESIGN
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9964595824019059	WITHOUT_CLASSIFICATION	0.003540417598094112	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997610670193394	WITHOUT_CLASSIFICATION	2.389329806605547E-4	DESIGN
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9994946396534689	WITHOUT_CLASSIFICATION	5.053603465312598E-4	DESIGN
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999877529651938	WITHOUT_CLASSIFICATION	1.2247034806194936E-4	DESIGN
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986597946646348	WITHOUT_CLASSIFICATION	0.0013402053353651108	DESIGN
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9994697749374738	WITHOUT_CLASSIFICATION	5.302250625261662E-4	DESIGN
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9845778467245969	WITHOUT_CLASSIFICATION	0.015422153275403156	DESIGN
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9982178396045108	WITHOUT_CLASSIFICATION	0.0017821603954891801	DESIGN
// continue loop	WITHOUT_CLASSIFICATION	0.99984503776802	WITHOUT_CLASSIFICATION	1.5496223197991355E-4	DESIGN
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9995824849846114	WITHOUT_CLASSIFICATION	4.175150153886024E-4	DESIGN
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9995824849846114	WITHOUT_CLASSIFICATION	4.175150153886024E-4	DESIGN
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999357473210378	WITHOUT_CLASSIFICATION	6.425267896212996E-5	DESIGN
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9997490607555345	WITHOUT_CLASSIFICATION	2.5093924446549883E-4	DESIGN
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9986507794168987	WITHOUT_CLASSIFICATION	0.0013492205831012911	DESIGN
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999817964164013	WITHOUT_CLASSIFICATION	1.820358359877157E-5	DESIGN
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9998728299393804	WITHOUT_CLASSIFICATION	1.2717006061958272E-4	DESIGN
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9996256644959952	WITHOUT_CLASSIFICATION	3.7433550400484713E-4	DESIGN
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9995718316796515	WITHOUT_CLASSIFICATION	4.281683203485496E-4	DESIGN
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9997595610616314	WITHOUT_CLASSIFICATION	2.404389383687071E-4	DESIGN
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9983302629610852	WITHOUT_CLASSIFICATION	0.0016697370389148545	DESIGN
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999773767083674	WITHOUT_CLASSIFICATION	2.2623291632530384E-5	DESIGN
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999727070232184	WITHOUT_CLASSIFICATION	2.729297678154237E-5	DESIGN
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9998835946639	WITHOUT_CLASSIFICATION	1.1640533609996563E-4	DESIGN
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9993776904808039	WITHOUT_CLASSIFICATION	6.223095191961571E-4	DESIGN
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9908414008903702	WITHOUT_CLASSIFICATION	0.009158599109629855	DESIGN
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9996482312481128	WITHOUT_CLASSIFICATION	3.5176875188728125E-4	DESIGN
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9715566068014123	WITHOUT_CLASSIFICATION	0.02844339319858771	DESIGN
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9997223877988052	WITHOUT_CLASSIFICATION	2.7761220119487115E-4	DESIGN
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9988876803884656	WITHOUT_CLASSIFICATION	0.0011123196115343597	DESIGN
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9977899706640609	WITHOUT_CLASSIFICATION	0.002210029335938986	DESIGN
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.999513712132419	WITHOUT_CLASSIFICATION	4.8628786758099984E-4	DESIGN
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9997446607740963	WITHOUT_CLASSIFICATION	2.553392259037426E-4	DESIGN
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9997231085388235	WITHOUT_CLASSIFICATION	2.768914611765223E-4	DESIGN
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999810311483872	WITHOUT_CLASSIFICATION	1.896885161273272E-5	DESIGN
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999422502710328	WITHOUT_CLASSIFICATION	5.7749728967191595E-5	DESIGN
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9998087197814969	WITHOUT_CLASSIFICATION	1.912802185031855E-4	DESIGN
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9997477055582658	WITHOUT_CLASSIFICATION	2.522944417342768E-4	DESIGN
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9997002322303649	WITHOUT_CLASSIFICATION	2.9976776963514624E-4	DESIGN
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9991555294885078	WITHOUT_CLASSIFICATION	8.44470511492147E-4	DESIGN
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9104160612482944	WITHOUT_CLASSIFICATION	0.08958393875170556	DESIGN
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9988119519313557	WITHOUT_CLASSIFICATION	0.0011880480686442877	DESIGN
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9997002362326479	WITHOUT_CLASSIFICATION	2.997637673519979E-4	DESIGN
//unwrap the object	WITHOUT_CLASSIFICATION	0.9965969384489424	WITHOUT_CLASSIFICATION	0.003403061551057643	DESIGN
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9997237384717563	WITHOUT_CLASSIFICATION	2.7626152824364374E-4	DESIGN
//return the proxied object	WITHOUT_CLASSIFICATION	0.997703707140808	WITHOUT_CLASSIFICATION	0.002296292859191939	DESIGN
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9996788445888055	WITHOUT_CLASSIFICATION	3.2115541119447983E-4	DESIGN
// early exit...	WITHOUT_CLASSIFICATION	0.9990245681829308	WITHOUT_CLASSIFICATION	9.754318170691041E-4	DESIGN
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9952726532153885	WITHOUT_CLASSIFICATION	0.004727346784611503	DESIGN
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9954325593977343	WITHOUT_CLASSIFICATION	0.004567440602265669	DESIGN
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9757359494684422	WITHOUT_CLASSIFICATION	0.024264050531557828	DESIGN
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.999986026142793	WITHOUT_CLASSIFICATION	1.3973857207074027E-5	DESIGN
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9850860737862933	WITHOUT_CLASSIFICATION	0.014913926213706742	DESIGN
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9990973077116105	WITHOUT_CLASSIFICATION	9.026922883894087E-4	DESIGN
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9990973077116105	WITHOUT_CLASSIFICATION	9.026922883894087E-4	DESIGN
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9982087600752277	WITHOUT_CLASSIFICATION	0.0017912399247721983	DESIGN
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9922933151349569	WITHOUT_CLASSIFICATION	0.00770668486504316	DESIGN
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9921483239187008	WITHOUT_CLASSIFICATION	0.007851676081299306	DESIGN
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999906973450923	WITHOUT_CLASSIFICATION	9.302654907770884E-6	DESIGN
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9998581934863175	WITHOUT_CLASSIFICATION	1.4180651368244875E-4	DESIGN
//bad cast	WITHOUT_CLASSIFICATION	0.997646307038823	WITHOUT_CLASSIFICATION	0.002353692961177058	DESIGN
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9988524645099282	WITHOUT_CLASSIFICATION	0.0011475354900718166	DESIGN
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9849894291873085	WITHOUT_CLASSIFICATION	0.015010570812691665	DESIGN
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9998894230657573	WITHOUT_CLASSIFICATION	1.1057693424257464E-4	DESIGN
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9954916560689916	WITHOUT_CLASSIFICATION	0.00450834393100839	DESIGN
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9977011782144379	WITHOUT_CLASSIFICATION	0.0022988217855620997	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9992537033014144	WITHOUT_CLASSIFICATION	7.462966985856283E-4	DESIGN
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9641686903070597	WITHOUT_CLASSIFICATION	0.035831309692940266	DESIGN
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9996467264916076	WITHOUT_CLASSIFICATION	3.532735083924755E-4	DESIGN
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9994046669946032	WITHOUT_CLASSIFICATION	5.953330053968793E-4	DESIGN
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9980571691950434	WITHOUT_CLASSIFICATION	0.0019428308049566606	DESIGN
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9968864860736851	WITHOUT_CLASSIFICATION	0.0031135139263149684	DESIGN
//take a snapshot	WITHOUT_CLASSIFICATION	0.9960151429330464	WITHOUT_CLASSIFICATION	0.003984857066953612	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9985818985734362	WITHOUT_CLASSIFICATION	0.001418101426563942	DESIGN
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9990393926732541	WITHOUT_CLASSIFICATION	9.606073267458044E-4	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9985817610169344	WITHOUT_CLASSIFICATION	0.0014182389830655817	DESIGN
// We've been here before	WITHOUT_CLASSIFICATION	0.9876402956969358	WITHOUT_CLASSIFICATION	0.012359704303064196	DESIGN
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999481090728759	WITHOUT_CLASSIFICATION	5.189092712410846E-5	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9985817610169344	WITHOUT_CLASSIFICATION	0.0014182389830655817	DESIGN
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999241135342521	WITHOUT_CLASSIFICATION	7.588646574779078E-5	DESIGN
// or its key changed	WITHOUT_CLASSIFICATION	0.9999413283329092	WITHOUT_CLASSIFICATION	5.8671667090786596E-5	DESIGN
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9991048000541456	WITHOUT_CLASSIFICATION	8.951999458543162E-4	DESIGN
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9969018326520597	WITHOUT_CLASSIFICATION	0.003098167347940475	DESIGN
// force initialize!	WITHOUT_CLASSIFICATION	0.9979069454503103	WITHOUT_CLASSIFICATION	0.002093054549689667	DESIGN
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999796094948284	WITHOUT_CLASSIFICATION	2.039050517148137E-5	DESIGN
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9986603135773803	WITHOUT_CLASSIFICATION	0.001339686422619811	DESIGN
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.999610290166263	WITHOUT_CLASSIFICATION	3.8970983373700827E-4	DESIGN
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.997369932222268	WITHOUT_CLASSIFICATION	0.0026300677777319776	DESIGN
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9966675429663563	WITHOUT_CLASSIFICATION	0.003332457033643594	DESIGN
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999408007361287	WITHOUT_CLASSIFICATION	5.919926387134232E-5	DESIGN
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999348934828037	WITHOUT_CLASSIFICATION	6.5106517196302E-5	DESIGN
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9951218654816738	WITHOUT_CLASSIFICATION	0.004878134518326298	DESIGN
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9998007144634412	WITHOUT_CLASSIFICATION	1.9928553655882325E-4	DESIGN
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999206290289454	WITHOUT_CLASSIFICATION	7.937097105460266E-4	DESIGN
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9221914716297959	WITHOUT_CLASSIFICATION	0.07780852837020415	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9977011782144379	WITHOUT_CLASSIFICATION	0.0022988217855620997	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9977011782144379	WITHOUT_CLASSIFICATION	0.0022988217855620997	DESIGN
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999076544005072	WITHOUT_CLASSIFICATION	9.234559949270881E-5	DESIGN
//optimization	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9977011782144379	WITHOUT_CLASSIFICATION	0.0022988217855620997	DESIGN
//re-snapshot	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9995281368908079	WITHOUT_CLASSIFICATION	4.718631091920568E-4	DESIGN
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9928954723892587	WITHOUT_CLASSIFICATION	0.007104527610741264	DESIGN
//memory optimization	WITHOUT_CLASSIFICATION	0.9989572960998944	WITHOUT_CLASSIFICATION	0.0010427039001055993	DESIGN
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9986900739862677	WITHOUT_CLASSIFICATION	0.0013099260137322778	DESIGN
// copied from Session:	WITHOUT_CLASSIFICATION	0.9858178907929089	WITHOUT_CLASSIFICATION	0.01418210920709107	DESIGN
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9980221523097835	WITHOUT_CLASSIFICATION	0.0019778476902164444	DESIGN
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9998147163033512	WITHOUT_CLASSIFICATION	1.852836966487775E-4	DESIGN
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999909219583684	WITHOUT_CLASSIFICATION	9.078041631719289E-6	DESIGN
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9990602884346904	WITHOUT_CLASSIFICATION	9.397115653094995E-4	DESIGN
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9871707366516875	WITHOUT_CLASSIFICATION	0.012829263348312466	DESIGN
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.999530516390726	WITHOUT_CLASSIFICATION	4.694836092739347E-4	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.998711048018811	WITHOUT_CLASSIFICATION	0.0012889519811890148	DESIGN
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9984696812484227	WITHOUT_CLASSIFICATION	0.0015303187515772476	DESIGN
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9996560494529546	WITHOUT_CLASSIFICATION	3.4395054704536787E-4	DESIGN
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9906985359645641	WITHOUT_CLASSIFICATION	0.00930146403543591	DESIGN
//do the test	WITHOUT_CLASSIFICATION	0.9999102296453342	WITHOUT_CLASSIFICATION	8.977035466579686E-5	DESIGN
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999883936027036	WITHOUT_CLASSIFICATION	1.1606397296238079E-5	DESIGN
//unwrap it	WITHOUT_CLASSIFICATION	0.9973445588128925	WITHOUT_CLASSIFICATION	0.002655441187107515	DESIGN
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9740521329825647	WITHOUT_CLASSIFICATION	0.02594786701743531	DESIGN
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999361976919603	WITHOUT_CLASSIFICATION	6.380230803972217E-5	DESIGN
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.990241515707481	WITHOUT_CLASSIFICATION	0.009758484292519055	DESIGN
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9681654224676614	WITHOUT_CLASSIFICATION	0.0318345775323387	DESIGN
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999725846974763	WITHOUT_CLASSIFICATION	2.7415302523643554E-5	DESIGN
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.6311339639996467	WITHOUT_CLASSIFICATION	0.3688660360003534	DESIGN
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9995831415607478	WITHOUT_CLASSIFICATION	4.168584392522628E-4	DESIGN
//int count = 0;	WITHOUT_CLASSIFICATION	0.9997525546504598	WITHOUT_CLASSIFICATION	2.4744534954020494E-4	DESIGN
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9998909654084762	WITHOUT_CLASSIFICATION	1.0903459152376401E-4	DESIGN
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.999201177841372	WITHOUT_CLASSIFICATION	7.988221586281084E-4	DESIGN
//count++;	WITHOUT_CLASSIFICATION	0.9989185733406403	WITHOUT_CLASSIFICATION	0.0010814266593598032	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.999940819856858	WITHOUT_CLASSIFICATION	5.9180143141945114E-5	DESIGN
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9991838248885506	WITHOUT_CLASSIFICATION	8.16175111449463E-4	DESIGN
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9792176251113069	WITHOUT_CLASSIFICATION	0.020782374888693042	DESIGN
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999032820601934	WITHOUT_CLASSIFICATION	9.671793980651911E-5	DESIGN
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9996752590842146	WITHOUT_CLASSIFICATION	3.2474091578541295E-4	DESIGN
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9986830426318493	WITHOUT_CLASSIFICATION	0.0013169573681507515	DESIGN
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999334468296622	WITHOUT_CLASSIFICATION	6.655317033782315E-5	DESIGN
// initialize this collection	WITHOUT_CLASSIFICATION	0.9877028257125521	WITHOUT_CLASSIFICATION	0.012297174287447922	DESIGN
// create one	WITHOUT_CLASSIFICATION	0.998826302819363	WITHOUT_CLASSIFICATION	0.001173697180636978	DESIGN
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9938419697568749	WITHOUT_CLASSIFICATION	0.006158030243125122	DESIGN
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9998897539005622	WITHOUT_CLASSIFICATION	1.1024609943785234E-4	DESIGN
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9946136679920178	WITHOUT_CLASSIFICATION	0.005386332007982177	DESIGN
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9988944465328603	WITHOUT_CLASSIFICATION	0.001105553467139669	DESIGN
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991788140029932	WITHOUT_CLASSIFICATION	8.211859970068188E-4	DESIGN
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998272859744699	WITHOUT_CLASSIFICATION	1.727140255301059E-4	DESIGN
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992720999712957	WITHOUT_CLASSIFICATION	7.279000287041964E-4	DESIGN
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9792246729252478	WITHOUT_CLASSIFICATION	0.020775327074752183	DESIGN
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9996222873621755	WITHOUT_CLASSIFICATION	3.7771263782443123E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999873237194967	WITHOUT_CLASSIFICATION	1.267628050329411E-5	DESIGN
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9976632529621533	WITHOUT_CLASSIFICATION	0.0023367470378467706	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9979769121147385	WITHOUT_CLASSIFICATION	0.002023087885261632	DESIGN
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980741590909283	WITHOUT_CLASSIFICATION	0.0019258409090717275	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9979769121147385	WITHOUT_CLASSIFICATION	0.002023087885261632	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9993157388137458	WITHOUT_CLASSIFICATION	6.842611862542027E-4	DESIGN
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9972602847964189	WITHOUT_CLASSIFICATION	0.0027397152035811834	DESIGN
// named parameter	WITHOUT_CLASSIFICATION	0.9955069487504413	WITHOUT_CLASSIFICATION	0.004493051249558739	DESIGN
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9661739621191158	WITHOUT_CLASSIFICATION	0.03382603788088427	DESIGN
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9819270902144214	WITHOUT_CLASSIFICATION	0.018072909785578677	DESIGN
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9981945374999593	WITHOUT_CLASSIFICATION	0.0018054625000407435	DESIGN
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9993437083099405	WITHOUT_CLASSIFICATION	6.562916900595007E-4	DESIGN
// perform the actual work	WITHOUT_CLASSIFICATION	0.998460952939481	WITHOUT_CLASSIFICATION	0.0015390470605190054	DESIGN
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999811498904764	WITHOUT_CLASSIFICATION	1.8850109523588543E-5	DESIGN
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9950309716268126	WITHOUT_CLASSIFICATION	0.004969028373187362	DESIGN
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9977707088643423	WITHOUT_CLASSIFICATION	0.0022292911356577407	DESIGN
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9851087833374754	WITHOUT_CLASSIFICATION	0.014891216662524588	DESIGN
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9992419322941012	WITHOUT_CLASSIFICATION	7.580677058988778E-4	DESIGN
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9289597001845215	WITHOUT_CLASSIFICATION	0.07104029981547855	DESIGN
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9952397122529605	WITHOUT_CLASSIFICATION	0.004760287747039469	DESIGN
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9967803241770888	WITHOUT_CLASSIFICATION	0.0032196758229111676	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9996245045635695	WITHOUT_CLASSIFICATION	3.754954364304401E-4	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9996245045635695	WITHOUT_CLASSIFICATION	3.754954364304401E-4	DESIGN
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9954829436410307	WITHOUT_CLASSIFICATION	0.004517056358969258	DESIGN
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9994023423191518	WITHOUT_CLASSIFICATION	5.976576808480829E-4	DESIGN
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9998728705055342	WITHOUT_CLASSIFICATION	1.271294944657581E-4	DESIGN
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999106047636569	WITHOUT_CLASSIFICATION	8.93952363432006E-5	DESIGN
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9989359599140568	WITHOUT_CLASSIFICATION	0.0010640400859431793	DESIGN
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9823489991730244	WITHOUT_CLASSIFICATION	0.01765100082697564	DESIGN
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9828067956777246	WITHOUT_CLASSIFICATION	0.01719320432227539	DESIGN
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9986887211609067	WITHOUT_CLASSIFICATION	0.0013112788390932158	DESIGN
// grab its current state	WITHOUT_CLASSIFICATION	0.9999159618840023	WITHOUT_CLASSIFICATION	8.403811599763528E-5	DESIGN
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9996158080020185	WITHOUT_CLASSIFICATION	3.841919979814427E-4	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9997954024587085	WITHOUT_CLASSIFICATION	2.045975412915941E-4	DESIGN
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999153931927987	WITHOUT_CLASSIFICATION	8.460680720128925E-5	DESIGN
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9998395466789626	WITHOUT_CLASSIFICATION	1.6045332103746602E-4	DESIGN
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9998979069265023	WITHOUT_CLASSIFICATION	1.0209307349773181E-4	DESIGN
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999507679924312	WITHOUT_CLASSIFICATION	4.923200756864094E-5	DESIGN
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9919196947677038	WITHOUT_CLASSIFICATION	0.008080305232296121	DESIGN
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9963737962508392	WITHOUT_CLASSIFICATION	0.003626203749160851	DESIGN
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9559022299211819	WITHOUT_CLASSIFICATION	0.044097770078818044	DESIGN
//use the current version	WITHOUT_CLASSIFICATION	0.9999082561939853	WITHOUT_CLASSIFICATION	9.174380601469289E-5	DESIGN
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999490873190894	WITHOUT_CLASSIFICATION	5.091268091068089E-5	DESIGN
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9996884866219811	WITHOUT_CLASSIFICATION	3.115133780189334E-4	DESIGN
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.999991922076508	WITHOUT_CLASSIFICATION	8.07792349194606E-6	DESIGN
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999984512691965	WITHOUT_CLASSIFICATION	1.5487308035189925E-6	DESIGN
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9069754169677055	WITHOUT_CLASSIFICATION	0.09302458303229452	DESIGN
//even process null collections	WITHOUT_CLASSIFICATION	0.9998106594919843	WITHOUT_CLASSIFICATION	1.8934050801578883E-4	DESIGN
// get the id from the object	WITHOUT_CLASSIFICATION	0.9992661603853388	WITHOUT_CLASSIFICATION	7.338396146611756E-4	DESIGN
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9993560591634121	WITHOUT_CLASSIFICATION	6.439408365879804E-4	DESIGN
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9997372317033983	WITHOUT_CLASSIFICATION	2.627682966015889E-4	DESIGN
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9959585666428488	WITHOUT_CLASSIFICATION	0.004041433357151234	DESIGN
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9990740559012805	WITHOUT_CLASSIFICATION	9.259440987195432E-4	DESIGN
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9991693174721077	WITHOUT_CLASSIFICATION	8.306825278923706E-4	DESIGN
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9994913799862621	WITHOUT_CLASSIFICATION	5.086200137379207E-4	DESIGN
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9996115774365459	WITHOUT_CLASSIFICATION	3.884225634541139E-4	DESIGN
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9992415596920808	WITHOUT_CLASSIFICATION	7.584403079191007E-4	DESIGN
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9993544967608244	WITHOUT_CLASSIFICATION	6.455032391755961E-4	DESIGN
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9987741722954344	WITHOUT_CLASSIFICATION	0.0012258277045655804	DESIGN
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999475937437795	WITHOUT_CLASSIFICATION	5.240625622044766E-5	DESIGN
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9968800944413398	WITHOUT_CLASSIFICATION	0.0031199055586600822	DESIGN
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9996961757666135	WITHOUT_CLASSIFICATION	3.038242333865326E-4	DESIGN
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9996614152561427	WITHOUT_CLASSIFICATION	3.385847438572422E-4	DESIGN
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.999938049541836	WITHOUT_CLASSIFICATION	6.195045816411326E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992878551364255	WITHOUT_CLASSIFICATION	7.121448635744648E-4	DESIGN
//some statistics	WITHOUT_CLASSIFICATION	0.9979946706337222	WITHOUT_CLASSIFICATION	0.0020053293662777734	DESIGN
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.998859416637088	WITHOUT_CLASSIFICATION	0.0011405833629120029	DESIGN
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999467896043717	WITHOUT_CLASSIFICATION	5.321039562831868E-5	DESIGN
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9714610692060383	WITHOUT_CLASSIFICATION	0.028538930793961692	DESIGN
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.963480564896449	WITHOUT_CLASSIFICATION	0.036519435103551	DESIGN
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999820187876114	WITHOUT_CLASSIFICATION	1.7981212388687647E-5	DESIGN
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.999570860531084	WITHOUT_CLASSIFICATION	4.2913946891593623E-4	DESIGN
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9620579461392127	WITHOUT_CLASSIFICATION	0.03794205386078727	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992878551364255	WITHOUT_CLASSIFICATION	7.121448635744648E-4	DESIGN
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9987748507792783	WITHOUT_CLASSIFICATION	0.001225149220721757	DESIGN
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9957559337540054	WITHOUT_CLASSIFICATION	0.004244066245994513	DESIGN
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9992907996695537	WITHOUT_CLASSIFICATION	7.092003304463334E-4	DESIGN
//get a snapshot	WITHOUT_CLASSIFICATION	0.9973869178662006	WITHOUT_CLASSIFICATION	0.002613082133799358	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9996867897767544	WITHOUT_CLASSIFICATION	3.1321022324565153E-4	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9996867897767544	WITHOUT_CLASSIFICATION	3.1321022324565153E-4	DESIGN
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999439240977184	WITHOUT_CLASSIFICATION	5.607590228166708E-5	DESIGN
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9987190787985143	WITHOUT_CLASSIFICATION	0.0012809212014856185	DESIGN
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.998692342166573	WITHOUT_CLASSIFICATION	0.0013076578334269538	DESIGN
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9994970730410919	WITHOUT_CLASSIFICATION	5.029269589080847E-4	DESIGN
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9998833175616734	WITHOUT_CLASSIFICATION	1.1668243832664678E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9996855798478087	WITHOUT_CLASSIFICATION	3.144201521912903E-4	DESIGN
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9980569704758281	WITHOUT_CLASSIFICATION	0.0019430295241718827	DESIGN
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9828148964729316	WITHOUT_CLASSIFICATION	0.017185103527068372	DESIGN
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999359368952793	WITHOUT_CLASSIFICATION	6.406310472073204E-5	DESIGN
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9997513679258648	WITHOUT_CLASSIFICATION	2.4863207413526275E-4	DESIGN
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9996797821949229	WITHOUT_CLASSIFICATION	3.202178050771194E-4	DESIGN
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9990877087901321	WITHOUT_CLASSIFICATION	9.122912098679743E-4	DESIGN
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9988687061265327	WITHOUT_CLASSIFICATION	0.001131293873467227	DESIGN
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9952623206818086	WITHOUT_CLASSIFICATION	0.004737679318191325	DESIGN
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.5500701752966757	DESIGN	0.44992982470332415	WITHOUT_CLASSIFICATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9870316424111463	WITHOUT_CLASSIFICATION	0.01296835758885373	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9983974358061515	WITHOUT_CLASSIFICATION	0.001602564193848501	DESIGN
//cachedState,	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9937502583998916	WITHOUT_CLASSIFICATION	0.006249741600108421	DESIGN
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9977024249177395	WITHOUT_CLASSIFICATION	0.0022975750822605287	DESIGN
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9842555164183947	WITHOUT_CLASSIFICATION	0.015744483581605337	DESIGN
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9989207824118042	WITHOUT_CLASSIFICATION	0.0010792175881958448	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9994960213310204	WITHOUT_CLASSIFICATION	5.039786689795269E-4	DESIGN
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999942379162158	WITHOUT_CLASSIFICATION	5.762083784263004E-6	DESIGN
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9989842591721153	WITHOUT_CLASSIFICATION	0.0010157408278846879	DESIGN
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9998903510169913	WITHOUT_CLASSIFICATION	1.0964898300863289E-4	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9981082252700167	WITHOUT_CLASSIFICATION	0.0018917747299832851	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9787981174170464	WITHOUT_CLASSIFICATION	0.02120188258295362	DESIGN
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.999984601467767	WITHOUT_CLASSIFICATION	1.5398532232901388E-5	DESIGN
//DELETED	WITHOUT_CLASSIFICATION	0.9989185733406403	WITHOUT_CLASSIFICATION	0.0010814266593598032	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.999930822917141	WITHOUT_CLASSIFICATION	6.917708285905618E-5	DESIGN
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.8410224763767192	WITHOUT_CLASSIFICATION	0.1589775236232808	DESIGN
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9614241655226631	WITHOUT_CLASSIFICATION	0.03857583447733688	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.999928815056055	WITHOUT_CLASSIFICATION	7.118494394496187E-5	DESIGN
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999318521793327	WITHOUT_CLASSIFICATION	6.814782066740148E-5	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9992468730575564	WITHOUT_CLASSIFICATION	7.531269424435765E-4	DESIGN
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999265203529274	WITHOUT_CLASSIFICATION	7.347964707265481E-5	DESIGN
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9921413697053745	WITHOUT_CLASSIFICATION	0.00785863029462544	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9971446201569485	WITHOUT_CLASSIFICATION	0.0028553798430514046	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9997954024587085	WITHOUT_CLASSIFICATION	2.045975412915941E-4	DESIGN
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9983850027762395	WITHOUT_CLASSIFICATION	0.0016149972237604615	DESIGN
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9989787145476141	WITHOUT_CLASSIFICATION	0.0010212854523858597	DESIGN
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999744117807379	WITHOUT_CLASSIFICATION	2.5588219262026846E-5	DESIGN
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9962904655335385	WITHOUT_CLASSIFICATION	0.003709534466461499	DESIGN
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999791751450832	WITHOUT_CLASSIFICATION	2.082485491677481E-5	DESIGN
// the object is persistent	WITHOUT_CLASSIFICATION	0.9992074696710016	WITHOUT_CLASSIFICATION	7.925303289983432E-4	DESIGN
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.999936733355623	WITHOUT_CLASSIFICATION	6.326664437694129E-5	DESIGN
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999052265338333	WITHOUT_CLASSIFICATION	9.477346616675966E-5	DESIGN
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9977011782144379	WITHOUT_CLASSIFICATION	0.0022988217855620997	DESIGN
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9996601954932642	WITHOUT_CLASSIFICATION	3.3980450673570296E-4	DESIGN
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9961507449842233	WITHOUT_CLASSIFICATION	0.00384925501577664	DESIGN
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9956705510053693	WITHOUT_CLASSIFICATION	0.004329448994630709	DESIGN
// eat it and try next	WITHOUT_CLASSIFICATION	0.9908854436477273	WITHOUT_CLASSIFICATION	0.009114556352272618	DESIGN
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9993902064317799	WITHOUT_CLASSIFICATION	6.097935682200405E-4	DESIGN
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9986447073167226	WITHOUT_CLASSIFICATION	0.001355292683277384	DESIGN
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9961737014849197	WITHOUT_CLASSIFICATION	0.003826298515080234	DESIGN
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9994781823880667	WITHOUT_CLASSIFICATION	5.218176119332946E-4	DESIGN
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9993938888282285	WITHOUT_CLASSIFICATION	6.06111171771494E-4	DESIGN
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9986603135773803	WITHOUT_CLASSIFICATION	0.001339686422619811	DESIGN
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9986603135773803	WITHOUT_CLASSIFICATION	0.001339686422619811	DESIGN
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9994901060011886	WITHOUT_CLASSIFICATION	5.098939988113657E-4	DESIGN
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9958555916792926	WITHOUT_CLASSIFICATION	0.004144408320707427	DESIGN
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9994218673677463	WITHOUT_CLASSIFICATION	5.781326322538177E-4	DESIGN
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9979050723715511	WITHOUT_CLASSIFICATION	0.002094927628448785	DESIGN
// Note this!!	WITHOUT_CLASSIFICATION	0.9996891752950643	WITHOUT_CLASSIFICATION	3.1082470493565934E-4	DESIGN
// Error message constants.	WITHOUT_CLASSIFICATION	0.9987988204132157	WITHOUT_CLASSIFICATION	0.001201179586784327	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990792665229108	WITHOUT_CLASSIFICATION	9.207334770893021E-4	DESIGN
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984846494852974	WITHOUT_CLASSIFICATION	0.0015153505147026357	DESIGN
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9954122148663554	WITHOUT_CLASSIFICATION	0.004587785133644491	DESIGN
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999564112291621	WITHOUT_CLASSIFICATION	4.3588770837777476E-5	DESIGN
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9958302683978538	WITHOUT_CLASSIFICATION	0.004169731602146117	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9991260450710998	WITHOUT_CLASSIFICATION	8.739549289002097E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9991260450710998	WITHOUT_CLASSIFICATION	8.739549289002097E-4	DESIGN
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9935241916070398	WITHOUT_CLASSIFICATION	0.00647580839296019	DESIGN
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9983823688471593	WITHOUT_CLASSIFICATION	0.0016176311528407574	DESIGN
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9998907099762585	WITHOUT_CLASSIFICATION	1.0929002374156598E-4	DESIGN
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999468453303416	WITHOUT_CLASSIFICATION	5.3154669658369894E-5	DESIGN
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9995865863753656	WITHOUT_CLASSIFICATION	4.1341362463438817E-4	DESIGN
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9930161318268499	WITHOUT_CLASSIFICATION	0.006983868173150213	DESIGN
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9977433183619738	WITHOUT_CLASSIFICATION	0.002256681638026263	DESIGN
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.999948112246361	WITHOUT_CLASSIFICATION	5.1887753638959086E-5	DESIGN
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9993538284900476	WITHOUT_CLASSIFICATION	6.461715099524562E-4	DESIGN
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999162045879305	WITHOUT_CLASSIFICATION	8.379541206952699E-5	DESIGN
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.999886613679766	WITHOUT_CLASSIFICATION	1.1338632023401137E-4	DESIGN
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.999974026943799	WITHOUT_CLASSIFICATION	2.5973056201020004E-5	DESIGN
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9997171167929446	WITHOUT_CLASSIFICATION	2.828832070554538E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9991260450710998	WITHOUT_CLASSIFICATION	8.739549289002097E-4	DESIGN
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9990788118534599	WITHOUT_CLASSIFICATION	9.211881465401781E-4	DESIGN
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9941219384567388	WITHOUT_CLASSIFICATION	0.005878061543261207	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9131193518720528	WITHOUT_CLASSIFICATION	0.08688064812794719	DESIGN
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9980498400597101	WITHOUT_CLASSIFICATION	0.0019501599402899073	DESIGN
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9998745154084777	WITHOUT_CLASSIFICATION	1.2548459152224414E-4	DESIGN
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.999589610501822	WITHOUT_CLASSIFICATION	4.1038949817790506E-4	DESIGN
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9997355864953004	WITHOUT_CLASSIFICATION	2.6441350469968283E-4	DESIGN
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9988023082842855	WITHOUT_CLASSIFICATION	0.0011976917157145123	DESIGN
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9978769747948044	WITHOUT_CLASSIFICATION	0.0021230252051956484	DESIGN
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9890524510071423	WITHOUT_CLASSIFICATION	0.010947548992857705	DESIGN
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9981778471055116	WITHOUT_CLASSIFICATION	0.0018221528944883767	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990792665229108	WITHOUT_CLASSIFICATION	9.207334770893021E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9991260450710998	WITHOUT_CLASSIFICATION	8.739549289002097E-4	DESIGN
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9998695781593718	WITHOUT_CLASSIFICATION	1.3042184062813696E-4	DESIGN
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9979567336160533	WITHOUT_CLASSIFICATION	0.0020432663839467335	DESIGN
// switch	WITHOUT_CLASSIFICATION	0.9996294624152714	WITHOUT_CLASSIFICATION	3.705375847286269E-4	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9967925507644688	WITHOUT_CLASSIFICATION	0.0032074492355312	DESIGN
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9984539396900014	WITHOUT_CLASSIFICATION	0.0015460603099986428	DESIGN
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9983527289128843	WITHOUT_CLASSIFICATION	0.0016472710871156854	DESIGN
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991284205001522	WITHOUT_CLASSIFICATION	8.715794998477455E-4	DESIGN
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999869197857033	WITHOUT_CLASSIFICATION	1.3080214296661677E-5	DESIGN
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999679102658466	WITHOUT_CLASSIFICATION	3.208973415346384E-5	DESIGN
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9992199511888477	WITHOUT_CLASSIFICATION	7.800488111522659E-4	DESIGN
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9996176800603966	WITHOUT_CLASSIFICATION	3.8231993960339416E-4	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9986809623147567	WITHOUT_CLASSIFICATION	0.0013190376852433865	DESIGN
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9990403084306947	WITHOUT_CLASSIFICATION	9.596915693052626E-4	DESIGN
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.976471808445571	WITHOUT_CLASSIFICATION	0.02352819155442908	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9993157388137458	WITHOUT_CLASSIFICATION	6.842611862542027E-4	DESIGN
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9997187640964481	WITHOUT_CLASSIFICATION	2.8123590355194514E-4	DESIGN
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9993385353722648	WITHOUT_CLASSIFICATION	6.6146462773515E-4	DESIGN
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9988943047097478	WITHOUT_CLASSIFICATION	0.0011056952902521408	DESIGN
// all clear	WITHOUT_CLASSIFICATION	0.9996039921332274	WITHOUT_CLASSIFICATION	3.9600786677261845E-4	DESIGN
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9997598070981347	WITHOUT_CLASSIFICATION	2.4019290186529134E-4	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9993739473183322	WITHOUT_CLASSIFICATION	6.260526816678459E-4	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9993739473183322	WITHOUT_CLASSIFICATION	6.260526816678459E-4	DESIGN
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999194157632502	WITHOUT_CLASSIFICATION	8.058423674989595E-5	DESIGN
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9971735004711951	WITHOUT_CLASSIFICATION	0.002826499528804984	DESIGN
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999602807170704	WITHOUT_CLASSIFICATION	3.971928292944365E-5	DESIGN
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9900621118629451	WITHOUT_CLASSIFICATION	0.009937888137054887	DESIGN
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9995930017669501	WITHOUT_CLASSIFICATION	4.0699823304997113E-4	DESIGN
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999919224832237	WITHOUT_CLASSIFICATION	8.077516776334642E-6	DESIGN
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.998396089155318	WITHOUT_CLASSIFICATION	0.001603910844682043	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9993188981963678	WITHOUT_CLASSIFICATION	6.811018036321551E-4	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9993188981963678	WITHOUT_CLASSIFICATION	6.811018036321551E-4	DESIGN
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9995388196863167	WITHOUT_CLASSIFICATION	4.611803136832493E-4	DESIGN
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9994057558798738	WITHOUT_CLASSIFICATION	5.942441201262007E-4	DESIGN
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9998454327273683	WITHOUT_CLASSIFICATION	1.5456727263169954E-4	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9996208662581323	WITHOUT_CLASSIFICATION	3.7913374186777693E-4	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9996208662581323	WITHOUT_CLASSIFICATION	3.7913374186777693E-4	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9996208662581323	WITHOUT_CLASSIFICATION	3.7913374186777693E-4	DESIGN
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999382292785628	WITHOUT_CLASSIFICATION	6.177072143720532E-5	DESIGN
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9993333803497634	WITHOUT_CLASSIFICATION	6.666196502366362E-4	DESIGN
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999839039618748	WITHOUT_CLASSIFICATION	1.6096038125212588E-5	DESIGN
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9988626106062458	WITHOUT_CLASSIFICATION	0.0011373893937541683	DESIGN
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9988037737456198	WITHOUT_CLASSIFICATION	0.0011962262543801967	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9991260450710998	WITHOUT_CLASSIFICATION	8.739549289002097E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9991260450710998	WITHOUT_CLASSIFICATION	8.739549289002097E-4	DESIGN
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9821696693487989	WITHOUT_CLASSIFICATION	0.017830330651201202	DESIGN
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9998943138945992	WITHOUT_CLASSIFICATION	1.0568610540091714E-4	DESIGN
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9496267193570223	WITHOUT_CLASSIFICATION	0.05037328064297764	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9946376021108743	WITHOUT_CLASSIFICATION	0.005362397889125725	DESIGN
// igndore it...	WITHOUT_CLASSIFICATION	0.991310469974304	WITHOUT_CLASSIFICATION	0.008689530025695912	DESIGN
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9816928294590584	WITHOUT_CLASSIFICATION	0.018307170540941543	DESIGN
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9939550260737049	WITHOUT_CLASSIFICATION	0.006044973926295106	DESIGN
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.999133810046397	WITHOUT_CLASSIFICATION	8.661899536029517E-4	DESIGN
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999368124675351	WITHOUT_CLASSIFICATION	6.318753246500703E-5	DESIGN
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999822544066991	WITHOUT_CLASSIFICATION	1.774559330090873E-5	DESIGN
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999024406597616	WITHOUT_CLASSIFICATION	9.755934023836449E-5	DESIGN
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.999255125540774	WITHOUT_CLASSIFICATION	7.448744592260881E-4	DESIGN
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.999255125540774	WITHOUT_CLASSIFICATION	7.448744592260881E-4	DESIGN
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.999255125540774	WITHOUT_CLASSIFICATION	7.448744592260881E-4	DESIGN
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.999255125540774	WITHOUT_CLASSIFICATION	7.448744592260881E-4	DESIGN
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.999255125540774	WITHOUT_CLASSIFICATION	7.448744592260881E-4	DESIGN
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9995661907561113	WITHOUT_CLASSIFICATION	4.3380924388872677E-4	DESIGN
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9995661907561113	WITHOUT_CLASSIFICATION	4.3380924388872677E-4	DESIGN
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9995661907561113	WITHOUT_CLASSIFICATION	4.3380924388872677E-4	DESIGN
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9995661907561113	WITHOUT_CLASSIFICATION	4.3380924388872677E-4	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9968364486735753	WITHOUT_CLASSIFICATION	0.00316355132642465	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9993739473183322	WITHOUT_CLASSIFICATION	6.260526816678459E-4	DESIGN
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9994715887974582	WITHOUT_CLASSIFICATION	5.284112025417525E-4	DESIGN
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9995661907561113	WITHOUT_CLASSIFICATION	4.3380924388872677E-4	DESIGN
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9890556432495189	WITHOUT_CLASSIFICATION	0.010944356750481206	DESIGN
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9987842476813666	WITHOUT_CLASSIFICATION	0.0012157523186333665	DESIGN
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9997633061511082	WITHOUT_CLASSIFICATION	2.366938488917239E-4	DESIGN
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9993692938704257	WITHOUT_CLASSIFICATION	6.307061295742591E-4	DESIGN
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9985677838030361	WITHOUT_CLASSIFICATION	0.001432216196963884	DESIGN
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9969643244344063	WITHOUT_CLASSIFICATION	0.00303567556559358	DESIGN
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999986250696765	WITHOUT_CLASSIFICATION	1.3749303234649855E-6	DESIGN
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9971723639250741	WITHOUT_CLASSIFICATION	0.0028276360749258356	DESIGN
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.99999657769907	WITHOUT_CLASSIFICATION	3.4223009298931875E-6	DESIGN
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999745428696514	WITHOUT_CLASSIFICATION	2.5457130348620068E-5	DESIGN
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999621666510465	WITHOUT_CLASSIFICATION	3.783334895346745E-5	DESIGN
// Set it!	WITHOUT_CLASSIFICATION	0.999796855959935	WITHOUT_CLASSIFICATION	2.0314404006497924E-4	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9996096080734347	WITHOUT_CLASSIFICATION	3.9039192656525125E-4	DESIGN
// strip the " where "	WITHOUT_CLASSIFICATION	0.9997955499064711	WITHOUT_CLASSIFICATION	2.0445009352874352E-4	DESIGN
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.7381444620748451	WITHOUT_CLASSIFICATION	0.261855537925155	DESIGN
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9997365742396941	WITHOUT_CLASSIFICATION	2.6342576030591867E-4	DESIGN
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999385422896249	WITHOUT_CLASSIFICATION	6.145771037510102E-5	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9992264657529862	WITHOUT_CLASSIFICATION	7.735342470138346E-4	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9992264657529862	WITHOUT_CLASSIFICATION	7.735342470138346E-4	DESIGN
// Start performing the updates	WITHOUT_CLASSIFICATION	0.999813892972496	WITHOUT_CLASSIFICATION	1.8610702750400883E-4	DESIGN
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9997078196276151	WITHOUT_CLASSIFICATION	2.921803723848736E-4	DESIGN
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.999728414673881	WITHOUT_CLASSIFICATION	2.715853261190716E-4	DESIGN
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9988395967320645	WITHOUT_CLASSIFICATION	0.001160403267935557	DESIGN
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9994187241778666	WITHOUT_CLASSIFICATION	5.812758221335184E-4	DESIGN
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.978976558854522	WITHOUT_CLASSIFICATION	0.021023441145477998	DESIGN
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9973948772106949	WITHOUT_CLASSIFICATION	0.002605122789305229	DESIGN
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9996741008932531	WITHOUT_CLASSIFICATION	3.258991067468447E-4	DESIGN
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9996881365137408	WITHOUT_CLASSIFICATION	3.118634862591587E-4	DESIGN
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9998145027998271	WITHOUT_CLASSIFICATION	1.8549720017293117E-4	DESIGN
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9968424768387745	WITHOUT_CLASSIFICATION	0.00315752316122565	DESIGN
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9995425355539904	WITHOUT_CLASSIFICATION	4.5746444600960255E-4	DESIGN
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999479366744698	WITHOUT_CLASSIFICATION	5.206332553013592E-5	DESIGN
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999036182633417	WITHOUT_CLASSIFICATION	9.63817366582142E-5	DESIGN
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9997090206225765	WITHOUT_CLASSIFICATION	2.909793774235534E-4	DESIGN
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999625625577865	WITHOUT_CLASSIFICATION	3.7437442213491785E-5	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999987493947534	WITHOUT_CLASSIFICATION	1.250605246577666E-6	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999987493947534	WITHOUT_CLASSIFICATION	1.250605246577666E-6	DESIGN
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9997329036736037	WITHOUT_CLASSIFICATION	2.6709632639629045E-4	DESIGN
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9797591513117282	WITHOUT_CLASSIFICATION	0.020240848688271758	DESIGN
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9998698147650183	WITHOUT_CLASSIFICATION	1.3018523498165653E-4	DESIGN
// The property is a component...	WITHOUT_CLASSIFICATION	0.9998283532049447	WITHOUT_CLASSIFICATION	1.716467950552424E-4	DESIGN
// The property is another class..	WITHOUT_CLASSIFICATION	0.9997239503944259	WITHOUT_CLASSIFICATION	2.7604960557419696E-4	DESIGN
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9964636061465785	WITHOUT_CLASSIFICATION	0.00353639385342164	DESIGN
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.995676262005094	WITHOUT_CLASSIFICATION	0.004323737994906049	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9989625624569209	WITHOUT_CLASSIFICATION	0.0010374375430791537	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998633627688559	WITHOUT_CLASSIFICATION	1.366372311441667E-4	DESIGN
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9989369788754165	WITHOUT_CLASSIFICATION	0.0010630211245833754	DESIGN
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999407085193158	WITHOUT_CLASSIFICATION	5.9291480684138034E-5	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9989625624569209	WITHOUT_CLASSIFICATION	0.0010374375430791537	DESIGN
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.7426500880240468	WITHOUT_CLASSIFICATION	0.25734991197595325	DESIGN
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9993879074207613	WITHOUT_CLASSIFICATION	6.120925792386012E-4	DESIGN
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9772837200499671	WITHOUT_CLASSIFICATION	0.02271627995003296	DESIGN
// again, null != null here	WITHOUT_CLASSIFICATION	0.9996194484697319	WITHOUT_CLASSIFICATION	3.8055153026803236E-4	DESIGN
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9914446244789488	WITHOUT_CLASSIFICATION	0.008555375521051317	DESIGN
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9997675053305324	WITHOUT_CLASSIFICATION	2.324946694675584E-4	DESIGN
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9993858491231554	WITHOUT_CLASSIFICATION	6.14150876844636E-4	DESIGN
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999829038970989	WITHOUT_CLASSIFICATION	1.709610290119475E-5	DESIGN
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9992468562197379	WITHOUT_CLASSIFICATION	7.53143780262132E-4	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9984848591111538	WITHOUT_CLASSIFICATION	0.0015151408888461754	DESIGN
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9996894854435675	WITHOUT_CLASSIFICATION	3.10514556432518E-4	DESIGN
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9998447476874157	WITHOUT_CLASSIFICATION	1.5525231258433514E-4	DESIGN
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9998315181712246	WITHOUT_CLASSIFICATION	1.684818287754751E-4	DESIGN
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9974352382692336	WITHOUT_CLASSIFICATION	0.002564761730766355	DESIGN
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9993602256389219	WITHOUT_CLASSIFICATION	6.39774361078112E-4	DESIGN
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9995740204664776	WITHOUT_CLASSIFICATION	4.259795335224223E-4	DESIGN
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9989040612830417	WITHOUT_CLASSIFICATION	0.0010959387169582864	DESIGN
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9992213579442855	WITHOUT_CLASSIFICATION	7.786420557145588E-4	DESIGN
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9992213579442855	WITHOUT_CLASSIFICATION	7.786420557145588E-4	DESIGN
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9993858491231554	WITHOUT_CLASSIFICATION	6.14150876844636E-4	DESIGN
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9965311839166784	WITHOUT_CLASSIFICATION	0.0034688160833216772	DESIGN
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.7872624586803101	WITHOUT_CLASSIFICATION	0.2127375413196899	DESIGN
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9947196690044673	WITHOUT_CLASSIFICATION	0.005280330995532704	DESIGN
// #2	WITHOUT_CLASSIFICATION	0.9995310234510371	WITHOUT_CLASSIFICATION	4.689765489629278E-4	DESIGN
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9994125349188726	WITHOUT_CLASSIFICATION	5.874650811273611E-4	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9993774300227584	WITHOUT_CLASSIFICATION	6.225699772416759E-4	DESIGN
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999973053656346	WITHOUT_CLASSIFICATION	2.6946343654093617E-6	DESIGN
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999552951172482	WITHOUT_CLASSIFICATION	4.47048827517729E-5	DESIGN
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9984250015390516	WITHOUT_CLASSIFICATION	0.0015749984609484608	DESIGN
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.8877812791449705	WITHOUT_CLASSIFICATION	0.1122187208550295	DESIGN
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999332879788337	WITHOUT_CLASSIFICATION	6.671202116627488E-5	DESIGN
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9990663757806231	WITHOUT_CLASSIFICATION	9.336242193768931E-4	DESIGN
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9985462225569057	WITHOUT_CLASSIFICATION	0.0014537774430942235	DESIGN
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9473737239824159	WITHOUT_CLASSIFICATION	0.05262627601758413	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9997414261080346	WITHOUT_CLASSIFICATION	2.5857389196541153E-4	DESIGN
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9997230687639094	WITHOUT_CLASSIFICATION	2.769312360906209E-4	DESIGN
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9998483844225619	WITHOUT_CLASSIFICATION	1.5161557743806136E-4	DESIGN
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999785210522222	WITHOUT_CLASSIFICATION	2.1478947777848313E-5	DESIGN
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999044217020605	WITHOUT_CLASSIFICATION	9.55782979394782E-5	DESIGN
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9991285603549682	WITHOUT_CLASSIFICATION	8.714396450316488E-4	DESIGN
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999669203763953	WITHOUT_CLASSIFICATION	3.3079623604607134E-5	DESIGN
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.99843042910906	WITHOUT_CLASSIFICATION	0.00156957089093998	DESIGN
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9990454820755218	WITHOUT_CLASSIFICATION	9.545179244781234E-4	DESIGN
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999961857219538	WITHOUT_CLASSIFICATION	3.814278046123708E-6	DESIGN
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9991977792013128	WITHOUT_CLASSIFICATION	8.022207986871538E-4	DESIGN
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.999425112435031	WITHOUT_CLASSIFICATION	5.748875649691128E-4	DESIGN
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9995240581723777	WITHOUT_CLASSIFICATION	4.759418276223543E-4	DESIGN
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999065879247879	WITHOUT_CLASSIFICATION	9.341207521196554E-5	DESIGN
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999380649700379	WITHOUT_CLASSIFICATION	6.193502996211788E-5	DESIGN
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.998026125194253	WITHOUT_CLASSIFICATION	0.0019738748057469163	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999488355418203	WITHOUT_CLASSIFICATION	5.116445817970299E-4	DESIGN
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9997414261080346	WITHOUT_CLASSIFICATION	2.5857389196541153E-4	DESIGN
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9996924842318231	WITHOUT_CLASSIFICATION	3.075157681768904E-4	DESIGN
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999945731026438	WITHOUT_CLASSIFICATION	5.426897356118407E-6	DESIGN
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9996847560121925	WITHOUT_CLASSIFICATION	3.152439878074785E-4	DESIGN
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.999277239735511	WITHOUT_CLASSIFICATION	7.227602644890328E-4	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9975275055139979	WITHOUT_CLASSIFICATION	0.0024724944860019787	DESIGN
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9998796296859412	WITHOUT_CLASSIFICATION	1.203703140588489E-4	DESIGN
// Collection of components.	WITHOUT_CLASSIFICATION	0.9996223146330483	WITHOUT_CLASSIFICATION	3.7768536695168475E-4	DESIGN
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9994991962004317	WITHOUT_CLASSIFICATION	5.008037995682359E-4	DESIGN
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9993506406542895	WITHOUT_CLASSIFICATION	6.493593457105742E-4	DESIGN
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9994963243805371	WITHOUT_CLASSIFICATION	5.036756194627902E-4	DESIGN
// currently allowed...	WITHOUT_CLASSIFICATION	0.995084595492872	WITHOUT_CLASSIFICATION	0.004915404507128069	DESIGN
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.5667489061516218	WITHOUT_CLASSIFICATION	0.43325109384837823	DESIGN
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9972341917014781	WITHOUT_CLASSIFICATION	0.00276580829852185	DESIGN
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9980426099655624	WITHOUT_CLASSIFICATION	0.0019573900344375945	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999488355418203	WITHOUT_CLASSIFICATION	5.116445817970299E-4	DESIGN
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9250379188103062	WITHOUT_CLASSIFICATION	0.0749620811896938	DESIGN
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999758856922638	WITHOUT_CLASSIFICATION	2.411430773625273E-5	DESIGN
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9998038637660185	WITHOUT_CLASSIFICATION	1.961362339814897E-4	DESIGN
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9998027275795599	WITHOUT_CLASSIFICATION	1.9727242044003396E-4	DESIGN
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9993895142737853	WITHOUT_CLASSIFICATION	6.104857262145827E-4	DESIGN
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9986467490048659	WITHOUT_CLASSIFICATION	0.0013532509951339601	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998633627688559	WITHOUT_CLASSIFICATION	1.366372311441667E-4	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.8972903306355339	WITHOUT_CLASSIFICATION	0.10270966936446609	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9997414261080346	WITHOUT_CLASSIFICATION	2.5857389196541153E-4	DESIGN
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9985507830028606	WITHOUT_CLASSIFICATION	0.0014492169971394055	DESIGN
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999255123364502	WITHOUT_CLASSIFICATION	7.448766354975829E-5	DESIGN
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9995098116315155	WITHOUT_CLASSIFICATION	4.901883684845118E-4	DESIGN
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9991646213074362	WITHOUT_CLASSIFICATION	8.353786925636856E-4	DESIGN
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9975547763894776	WITHOUT_CLASSIFICATION	0.002445223610522464	DESIGN
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9958872506716632	WITHOUT_CLASSIFICATION	0.00411274932833686	DESIGN
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9950786878676796	WITHOUT_CLASSIFICATION	0.004921312132320461	DESIGN
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.99944821266441	WITHOUT_CLASSIFICATION	5.517873355900666E-4	DESIGN
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9846727078424518	WITHOUT_CLASSIFICATION	0.015327292157548227	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9996200647101476	WITHOUT_CLASSIFICATION	3.7993528985246075E-4	DESIGN
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9976185984211174	WITHOUT_CLASSIFICATION	0.0023814015788826176	DESIGN
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.6859759849492109	WITHOUT_CLASSIFICATION	0.31402401505078903	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9929659550611372	WITHOUT_CLASSIFICATION	0.007034044938862797	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9929659550611372	WITHOUT_CLASSIFICATION	0.007034044938862797	DESIGN
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9212308918086193	WITHOUT_CLASSIFICATION	0.07876910819138067	DESIGN
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9941196399364962	WITHOUT_CLASSIFICATION	0.005880360063503806	DESIGN
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9995036338957988	WITHOUT_CLASSIFICATION	4.963661042011386E-4	DESIGN
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999794439558782	WITHOUT_CLASSIFICATION	2.055604412172931E-5	DESIGN
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9998998297385409	WITHOUT_CLASSIFICATION	1.0017026145918309E-4	DESIGN
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.999660701809079	WITHOUT_CLASSIFICATION	3.3929819092098646E-4	DESIGN
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9988383499845241	WITHOUT_CLASSIFICATION	0.0011616500154758495	DESIGN
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9979006699420473	WITHOUT_CLASSIFICATION	0.002099330057952661	DESIGN
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999757299634366	WITHOUT_CLASSIFICATION	2.4270036563388896E-5	DESIGN
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9994046669946032	WITHOUT_CLASSIFICATION	5.953330053968793E-4	DESIGN
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9985116597930755	WITHOUT_CLASSIFICATION	0.0014883402069245468	DESIGN
// A collection of components...	WITHOUT_CLASSIFICATION	0.9991329325300314	WITHOUT_CLASSIFICATION	8.670674699687078E-4	DESIGN
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9991329325300314	WITHOUT_CLASSIFICATION	8.670674699687078E-4	DESIGN
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999998564210613	WITHOUT_CLASSIFICATION	1.4357893872219943E-7	DESIGN
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9993456674186356	WITHOUT_CLASSIFICATION	6.543325813643299E-4	DESIGN
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9995252893304674	WITHOUT_CLASSIFICATION	4.747106695326939E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9101489155473433	WITHOUT_CLASSIFICATION	0.08985108445265662	DESIGN
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999917700094538	WITHOUT_CLASSIFICATION	8.229990546251646E-6	DESIGN
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999332038460237	WITHOUT_CLASSIFICATION	6.679615397630534E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995977582290013	WITHOUT_CLASSIFICATION	4.022417709986421E-4	DESIGN
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999211314809049	WITHOUT_CLASSIFICATION	7.886851909502153E-5	DESIGN
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9980332723575169	WITHOUT_CLASSIFICATION	0.0019667276424831215	DESIGN
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9998486526491754	WITHOUT_CLASSIFICATION	1.5134735082449342E-4	DESIGN
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999681013394333	WITHOUT_CLASSIFICATION	3.189866056670288E-5	DESIGN
/*implied*/	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999853813919919	WITHOUT_CLASSIFICATION	1.461860800813823E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995977582290013	WITHOUT_CLASSIFICATION	4.022417709986421E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995977582290013	WITHOUT_CLASSIFICATION	4.022417709986421E-4	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.99995952508277	WITHOUT_CLASSIFICATION	4.047491723004319E-5	DESIGN
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9964673767730983	WITHOUT_CLASSIFICATION	0.0035326232269017634	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9991592668948002	WITHOUT_CLASSIFICATION	8.407331051998451E-4	DESIGN
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9996784556805708	WITHOUT_CLASSIFICATION	3.215443194292201E-4	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9008738953176386	WITHOUT_CLASSIFICATION	0.09912610468236142	DESIGN
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9984125721668382	WITHOUT_CLASSIFICATION	0.0015874278331617527	DESIGN
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9994028701119452	WITHOUT_CLASSIFICATION	5.971298880547833E-4	DESIGN
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.8057403016777843	WITHOUT_CLASSIFICATION	0.19425969832221565	DESIGN
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9989207824118042	WITHOUT_CLASSIFICATION	0.0010792175881958448	DESIGN
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9973445815410932	WITHOUT_CLASSIFICATION	0.0026554184589067517	DESIGN
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9975107368094628	WITHOUT_CLASSIFICATION	0.00248926319053717	DESIGN
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9997405980573407	WITHOUT_CLASSIFICATION	2.594019426592293E-4	DESIGN
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9997216477925921	WITHOUT_CLASSIFICATION	2.7835220740789944E-4	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998756894452727	WITHOUT_CLASSIFICATION	1.2431055472729037E-4	DESIGN
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996343347567718	WITHOUT_CLASSIFICATION	3.6566524322830007E-4	DESIGN
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999981640447108	WITHOUT_CLASSIFICATION	1.8359552893050841E-6	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9977011782144379	WITHOUT_CLASSIFICATION	0.0022988217855620997	DESIGN
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9986603135773803	WITHOUT_CLASSIFICATION	0.001339686422619811	DESIGN
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9997716264961589	WITHOUT_CLASSIFICATION	2.2837350384116337E-4	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980663459361756	WITHOUT_CLASSIFICATION	0.0019336540638244225	DESIGN
//TODO:	WITHOUT_CLASSIFICATION	0.9137474499222618	WITHOUT_CLASSIFICATION	0.0862525500777383	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9998047090411826	WITHOUT_CLASSIFICATION	1.952909588174042E-4	DESIGN
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999997024446493	WITHOUT_CLASSIFICATION	2.975553506924572E-7	DESIGN
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.999549584652654	WITHOUT_CLASSIFICATION	4.504153473460419E-4	DESIGN
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9940073489055876	WITHOUT_CLASSIFICATION	0.005992651094412469	DESIGN
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999576207523384	WITHOUT_CLASSIFICATION	4.2379247661576294E-5	DESIGN
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9996330796529209	WITHOUT_CLASSIFICATION	3.6692034707912956E-4	DESIGN
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.999633674262676	WITHOUT_CLASSIFICATION	3.6632573732393934E-4	DESIGN
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999057800448641	WITHOUT_CLASSIFICATION	9.421995513594259E-5	DESIGN
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.6365832287385155	DESIGN	0.3634167712614845	WITHOUT_CLASSIFICATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9979382834718311	WITHOUT_CLASSIFICATION	0.002061716528168898	DESIGN
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9780998944040683	WITHOUT_CLASSIFICATION	0.02190010559593167	DESIGN
// Dialect function	WITHOUT_CLASSIFICATION	0.9997536246932972	WITHOUT_CLASSIFICATION	2.4637530670275625E-4	DESIGN
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.999320479333566	WITHOUT_CLASSIFICATION	6.795206664339877E-4	DESIGN
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9998839438711219	WITHOUT_CLASSIFICATION	1.1605612887810185E-4	DESIGN
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9997109750783849	WITHOUT_CLASSIFICATION	2.890249216150698E-4	DESIGN
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9991297340264492	WITHOUT_CLASSIFICATION	8.702659735507836E-4	DESIGN
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9980036794689191	WITHOUT_CLASSIFICATION	0.0019963205310807937	DESIGN
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9990937103053056	WITHOUT_CLASSIFICATION	9.062896946945062E-4	DESIGN
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9985965829677695	WITHOUT_CLASSIFICATION	0.0014034170322304394	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9998211589354381	WITHOUT_CLASSIFICATION	1.788410645619315E-4	DESIGN
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999547610533707	WITHOUT_CLASSIFICATION	4.523894662935823E-5	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999787273515568	WITHOUT_CLASSIFICATION	2.1272648443197045E-5	DESIGN
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.999819722204084	WITHOUT_CLASSIFICATION	1.8027779591600087E-4	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999787273515568	WITHOUT_CLASSIFICATION	2.1272648443197045E-5	DESIGN
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999900858644096	WITHOUT_CLASSIFICATION	9.914135590383792E-6	DESIGN
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9993974607716429	WITHOUT_CLASSIFICATION	6.025392283570351E-4	DESIGN
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9997521196825587	WITHOUT_CLASSIFICATION	2.4788031744129007E-4	DESIGN
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9997699813000586	WITHOUT_CLASSIFICATION	2.3001869994151425E-4	DESIGN
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9995380707655086	WITHOUT_CLASSIFICATION	4.6192923449138386E-4	DESIGN
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9997521196825587	WITHOUT_CLASSIFICATION	2.4788031744129007E-4	DESIGN
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999405238599763	WITHOUT_CLASSIFICATION	5.947614002368608E-5	DESIGN
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9983166287481381	WITHOUT_CLASSIFICATION	0.0016833712518618197	DESIGN
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999677486359543	WITHOUT_CLASSIFICATION	3.22513640456502E-5	DESIGN
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9997376397207819	WITHOUT_CLASSIFICATION	2.623602792181536E-4	DESIGN
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999901383156189	WITHOUT_CLASSIFICATION	9.861684381060462E-6	DESIGN
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9992450118142701	WITHOUT_CLASSIFICATION	7.549881857300887E-4	DESIGN
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999887061375731	WITHOUT_CLASSIFICATION	1.129386242699859E-5	DESIGN
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.99997673878976	DESIGN	2.3261210240021325E-5	WITHOUT_CLASSIFICATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999798387777843	WITHOUT_CLASSIFICATION	2.0161222215722615E-5	DESIGN
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9998806629891183	WITHOUT_CLASSIFICATION	1.1933701088165853E-4	DESIGN
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999347797543159	WITHOUT_CLASSIFICATION	6.522024568414832E-5	DESIGN
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999433651858831	WITHOUT_CLASSIFICATION	5.663481411688498E-5	DESIGN
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999530393574727	WITHOUT_CLASSIFICATION	4.696064252736128E-5	DESIGN
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.7265676848441186	WITHOUT_CLASSIFICATION	0.2734323151558815	DESIGN
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9996850958091522	WITHOUT_CLASSIFICATION	3.149041908476947E-4	DESIGN
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9987046682680515	WITHOUT_CLASSIFICATION	0.001295331731948599	DESIGN
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.8860446355104329	WITHOUT_CLASSIFICATION	0.11395536448956714	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9963418203276149	WITHOUT_CLASSIFICATION	0.0036581796723852557	DESIGN
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9981600814003175	WITHOUT_CLASSIFICATION	0.0018399185996824364	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9998636876331263	WITHOUT_CLASSIFICATION	1.3631236687375236E-4	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9921819111683311	WITHOUT_CLASSIFICATION	0.007818088831668981	DESIGN
//default mode	WITHOUT_CLASSIFICATION	0.9912063303291011	WITHOUT_CLASSIFICATION	0.00879366967089892	DESIGN
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9998467766253484	WITHOUT_CLASSIFICATION	1.532233746515295E-4	DESIGN
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9976515838193616	WITHOUT_CLASSIFICATION	0.0023484161806384286	DESIGN
//after reset!	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9982848818676986	WITHOUT_CLASSIFICATION	0.0017151181323013544	DESIGN
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9989465003704543	WITHOUT_CLASSIFICATION	0.0010534996295457402	DESIGN
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9987190787985143	WITHOUT_CLASSIFICATION	0.0012809212014856185	DESIGN
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9992289633651494	WITHOUT_CLASSIFICATION	7.710366348506426E-4	DESIGN
//if its "id"	WITHOUT_CLASSIFICATION	0.9995140911787397	WITHOUT_CLASSIFICATION	4.859088212603141E-4	DESIGN
//or its the id property name	WITHOUT_CLASSIFICATION	0.9993642527375449	WITHOUT_CLASSIFICATION	6.357472624550064E-4	DESIGN
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9996467264916076	WITHOUT_CLASSIFICATION	3.532735083924755E-4	DESIGN
//important!!	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9996467264916076	WITHOUT_CLASSIFICATION	3.532735083924755E-4	DESIGN
// an association	WITHOUT_CLASSIFICATION	0.9991620469680053	WITHOUT_CLASSIFICATION	8.379530319947432E-4	DESIGN
//allow index() function:	WITHOUT_CLASSIFICATION	0.9977338560565654	WITHOUT_CLASSIFICATION	0.0022661439434344863	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9666097481156748	WITHOUT_CLASSIFICATION	0.03339025188432514	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9998636876331263	WITHOUT_CLASSIFICATION	1.3631236687375236E-4	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
// collections of values	WITHOUT_CLASSIFICATION	0.9998343502703786	WITHOUT_CLASSIFICATION	1.6564972962140444E-4	DESIGN
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9977710569521284	WITHOUT_CLASSIFICATION	0.002228943047871557	DESIGN
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.998780427170275	WITHOUT_CLASSIFICATION	0.001219572829724918	DESIGN
//special case	WITHOUT_CLASSIFICATION	0.9996125431493507	WITHOUT_CLASSIFICATION	3.874568506492726E-4	DESIGN
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999394716234139	WITHOUT_CLASSIFICATION	6.0528376586176814E-5	DESIGN
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9740331095353665	WITHOUT_CLASSIFICATION	0.025966890464633546	DESIGN
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.5857292995923905	DESIGN	0.4142707004076095	WITHOUT_CLASSIFICATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.997709553685803	WITHOUT_CLASSIFICATION	0.002290446314196966	DESIGN
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9990418401837254	WITHOUT_CLASSIFICATION	9.581598162745631E-4	DESIGN
//register collection role	WITHOUT_CLASSIFICATION	0.9955559868024092	WITHOUT_CLASSIFICATION	0.004444013197590801	DESIGN
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9992733132598114	WITHOUT_CLASSIFICATION	7.26686740188533E-4	DESIGN
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9986603135773803	WITHOUT_CLASSIFICATION	0.001339686422619811	DESIGN
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9977011782144379	WITHOUT_CLASSIFICATION	0.0022988217855620997	DESIGN
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9994357574420561	WITHOUT_CLASSIFICATION	5.642425579438856E-4	DESIGN
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.999769705264111	WITHOUT_CLASSIFICATION	2.3029473588903867E-4	DESIGN
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9995033867950159	WITHOUT_CLASSIFICATION	4.96613204984108E-4	DESIGN
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9982824527966423	WITHOUT_CLASSIFICATION	0.0017175472033577697	DESIGN
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9985449890966962	WITHOUT_CLASSIFICATION	0.0014550109033038426	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9986603135773803	WITHOUT_CLASSIFICATION	0.001339686422619811	DESIGN
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9924509279152216	WITHOUT_CLASSIFICATION	0.0075490720847784555	DESIGN
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9980241883433382	WITHOUT_CLASSIFICATION	0.00197581165666185	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9975441609537213	WITHOUT_CLASSIFICATION	0.0024558390462785947	DESIGN
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.998203805807344	WITHOUT_CLASSIFICATION	0.0017961941926559525	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9958775910751563	WITHOUT_CLASSIFICATION	0.00412240892484382	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9958775910751563	WITHOUT_CLASSIFICATION	0.00412240892484382	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999891803348995	WITHOUT_CLASSIFICATION	1.0819665100497363E-4	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9958775910751563	WITHOUT_CLASSIFICATION	0.00412240892484382	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9958775910751563	WITHOUT_CLASSIFICATION	0.00412240892484382	DESIGN
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9992736095802992	WITHOUT_CLASSIFICATION	7.26390419700759E-4	DESIGN
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999992171660387	WITHOUT_CLASSIFICATION	7.828339614451553E-7	DESIGN
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.999832484736885	WITHOUT_CLASSIFICATION	1.67515263115007E-4	DESIGN
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.999832484736885	WITHOUT_CLASSIFICATION	1.67515263115007E-4	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9991571146780062	WITHOUT_CLASSIFICATION	8.428853219939011E-4	DESIGN
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.994548986584651	WITHOUT_CLASSIFICATION	0.005451013415349037	DESIGN
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9987152519608445	WITHOUT_CLASSIFICATION	0.0012847480391554816	DESIGN
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9998786699750831	WITHOUT_CLASSIFICATION	1.213300249168622E-4	DESIGN
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.994344129908827	WITHOUT_CLASSIFICATION	0.005655870091172963	DESIGN
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9945907960788296	WITHOUT_CLASSIFICATION	0.005409203921170429	DESIGN
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9990284620722291	WITHOUT_CLASSIFICATION	9.715379277710098E-4	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9979663120202231	WITHOUT_CLASSIFICATION	0.002033687979776884	DESIGN
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9915283134299027	WITHOUT_CLASSIFICATION	0.00847168657009729	DESIGN
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999836272376655	WITHOUT_CLASSIFICATION	1.637276233447412E-5	DESIGN
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9981057945274461	WITHOUT_CLASSIFICATION	0.0018942054725539768	DESIGN
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9935762722611237	WITHOUT_CLASSIFICATION	0.00642372773887641	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999873237194967	WITHOUT_CLASSIFICATION	1.267628050329411E-5	DESIGN
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.998529641047662	WITHOUT_CLASSIFICATION	0.0014703589523381482	DESIGN
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9735757857407673	WITHOUT_CLASSIFICATION	0.02642421425923274	DESIGN
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9946601050274456	WITHOUT_CLASSIFICATION	0.0053398949725543005	DESIGN
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9979322951307499	WITHOUT_CLASSIFICATION	0.0020677048692501923	DESIGN
// Add any joins	WITHOUT_CLASSIFICATION	0.9991503051407296	WITHOUT_CLASSIFICATION	8.496948592705306E-4	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999873237194967	WITHOUT_CLASSIFICATION	1.267628050329411E-5	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9921819111683311	WITHOUT_CLASSIFICATION	0.007818088831668981	DESIGN
//path expression	WITHOUT_CLASSIFICATION	0.9990769270055737	WITHOUT_CLASSIFICATION	9.230729944263143E-4	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998571364852687	WITHOUT_CLASSIFICATION	1.428635147311978E-4	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997610670193394	WITHOUT_CLASSIFICATION	2.389329806605547E-4	DESIGN
//anything else	WITHOUT_CLASSIFICATION	0.9991428129876943	WITHOUT_CLASSIFICATION	8.571870123057016E-4	DESIGN
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999361051598593	WITHOUT_CLASSIFICATION	6.389484014070028E-5	DESIGN
// careful with this!	WITHOUT_CLASSIFICATION	0.9965236762748678	WITHOUT_CLASSIFICATION	0.0034763237251322033	DESIGN
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9997482005542673	WITHOUT_CLASSIFICATION	2.5179944573272843E-4	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9998527890697526	WITHOUT_CLASSIFICATION	1.472109302473192E-4	DESIGN
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9995454654450149	WITHOUT_CLASSIFICATION	4.545345549850474E-4	DESIGN
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9984530217872316	WITHOUT_CLASSIFICATION	0.0015469782127684579	DESIGN
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999180293784047	WITHOUT_CLASSIFICATION	8.197062159540609E-5	DESIGN
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9973245856623866	WITHOUT_CLASSIFICATION	0.002675414337613464	DESIGN
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.999789960501583	WITHOUT_CLASSIFICATION	2.1003949841689836E-4	DESIGN
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9995587449147965	WITHOUT_CLASSIFICATION	4.412550852035775E-4	DESIGN
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9998664672690953	WITHOUT_CLASSIFICATION	1.3353273090464316E-4	DESIGN
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9991702695202871	WITHOUT_CLASSIFICATION	8.29730479712837E-4	DESIGN
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9998918731520898	WITHOUT_CLASSIFICATION	1.0812684791020447E-4	DESIGN
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9993731562491667	WITHOUT_CLASSIFICATION	6.268437508333813E-4	DESIGN
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.999815381132109	WITHOUT_CLASSIFICATION	1.8461886789106915E-4	DESIGN
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9990982329511451	WITHOUT_CLASSIFICATION	9.017670488548469E-4	DESIGN
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9964183277809964	WITHOUT_CLASSIFICATION	0.0035816722190036222	DESIGN
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999859084648133	WITHOUT_CLASSIFICATION	1.4091535186737657E-5	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9998527890697526	WITHOUT_CLASSIFICATION	1.472109302473192E-4	DESIGN
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9984585196335124	WITHOUT_CLASSIFICATION	0.0015414803664876475	DESIGN
//do replacements	WITHOUT_CLASSIFICATION	0.9987472831698797	WITHOUT_CLASSIFICATION	0.0012527168301202675	DESIGN
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9981382016059097	WITHOUT_CLASSIFICATION	0.0018617983940903764	DESIGN
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.994696491723001	WITHOUT_CLASSIFICATION	0.005303508276998987	DESIGN
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999488355418203	WITHOUT_CLASSIFICATION	5.116445817970299E-4	DESIGN
//hilo params	WITHOUT_CLASSIFICATION	0.9973533876530163	WITHOUT_CLASSIFICATION	0.0026466123469837295	DESIGN
//sql = query;	WITHOUT_CLASSIFICATION	0.9992475769872505	WITHOUT_CLASSIFICATION	7.524230127494455E-4	DESIGN
// performance opt	WITHOUT_CLASSIFICATION	0.9941889185248571	WITHOUT_CLASSIFICATION	0.005811081475142766	DESIGN
//sql = update;	WITHOUT_CLASSIFICATION	0.9992411149069428	WITHOUT_CLASSIFICATION	7.588850930573065E-4	DESIGN
//hilo config	WITHOUT_CLASSIFICATION	0.9982011677335484	WITHOUT_CLASSIFICATION	0.0017988322664515357	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999064820911308	WITHOUT_CLASSIFICATION	9.351790886921888E-5	DESIGN
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9910929215392424	WITHOUT_CLASSIFICATION	0.008907078460757625	DESIGN
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9973737985163995	WITHOUT_CLASSIFICATION	0.0026262014836004556	DESIGN
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.999907098998997	WITHOUT_CLASSIFICATION	9.290100100295638E-5	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9985908858641959	WITHOUT_CLASSIFICATION	0.0014091141358041545	DESIGN
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999384449940764	WITHOUT_CLASSIFICATION	6.155500592365301E-5	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.998291284135056	WITHOUT_CLASSIFICATION	0.001708715864943924	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999064820911308	WITHOUT_CLASSIFICATION	9.351790886921888E-5	DESIGN
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9989846006671416	WITHOUT_CLASSIFICATION	0.0010153993328584684	DESIGN
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9954715426451436	WITHOUT_CLASSIFICATION	0.004528457354856335	DESIGN
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.999513712132419	WITHOUT_CLASSIFICATION	4.8628786758099984E-4	DESIGN
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.999274102660018	WITHOUT_CLASSIFICATION	7.258973399819657E-4	DESIGN
// the default...	WITHOUT_CLASSIFICATION	0.9992508865920199	WITHOUT_CLASSIFICATION	7.491134079801963E-4	DESIGN
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9986892480734512	WITHOUT_CLASSIFICATION	0.0013107519265488535	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9985908858641959	WITHOUT_CLASSIFICATION	0.0014091141358041545	DESIGN
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.999991116137735	WITHOUT_CLASSIFICATION	8.883862265122933E-6	DESIGN
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999957069852456	WITHOUT_CLASSIFICATION	4.293014754402164E-5	DESIGN
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998911004771714	WITHOUT_CLASSIFICATION	1.0889952282855751E-4	DESIGN
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994918028622256	WITHOUT_CLASSIFICATION	5.081971377743119E-4	DESIGN
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994918028622256	WITHOUT_CLASSIFICATION	5.081971377743119E-4	DESIGN
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994918028622256	WITHOUT_CLASSIFICATION	5.081971377743119E-4	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9995486607599015	WITHOUT_CLASSIFICATION	4.513392400985672E-4	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9995486607599015	WITHOUT_CLASSIFICATION	4.513392400985672E-4	DESIGN
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.996552796062386	WITHOUT_CLASSIFICATION	0.0034472039376139633	DESIGN
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9986821394301022	WITHOUT_CLASSIFICATION	0.001317860569897739	DESIGN
// scroll ahead	WITHOUT_CLASSIFICATION	0.9938353717721184	WITHOUT_CLASSIFICATION	0.006164628227881583	DESIGN
// scroll backward	WITHOUT_CLASSIFICATION	0.9980850673046169	WITHOUT_CLASSIFICATION	0.0019149326953830726	DESIGN
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9963749967980754	WITHOUT_CLASSIFICATION	0.003625003201924698	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994489399540694	WITHOUT_CLASSIFICATION	5.51060045930526E-4	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995982345879839	WITHOUT_CLASSIFICATION	4.017654120160667E-4	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999488355418203	WITHOUT_CLASSIFICATION	5.116445817970299E-4	DESIGN
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9996032952838148	WITHOUT_CLASSIFICATION	3.967047161852475E-4	DESIGN
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998239852259553	WITHOUT_CLASSIFICATION	1.7601477404464479E-4	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994489399540694	WITHOUT_CLASSIFICATION	5.51060045930526E-4	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995982345879839	WITHOUT_CLASSIFICATION	4.017654120160667E-4	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999488355418203	WITHOUT_CLASSIFICATION	5.116445817970299E-4	DESIGN
// Caches	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
//Generators:	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.999664811629592	WITHOUT_CLASSIFICATION	3.3518837040804087E-4	DESIGN
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9962884192967121	WITHOUT_CLASSIFICATION	0.003711580703288032	DESIGN
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9995048423142456	WITHOUT_CLASSIFICATION	4.951576857544002E-4	DESIGN
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999912105011234	WITHOUT_CLASSIFICATION	8.789498876575551E-6	DESIGN
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.999441619652217	WITHOUT_CLASSIFICATION	5.583803477830162E-4	DESIGN
//checking for named queries	WITHOUT_CLASSIFICATION	0.9985749241771469	WITHOUT_CLASSIFICATION	0.0014250758228531708	DESIGN
//stats	WITHOUT_CLASSIFICATION	0.9989185733406403	WITHOUT_CLASSIFICATION	0.0010814266593598032	DESIGN
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9989778987434584	WITHOUT_CLASSIFICATION	0.0010221012565415238	DESIGN
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9993776341270767	WITHOUT_CLASSIFICATION	6.223658729232156E-4	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9757433880903157	WITHOUT_CLASSIFICATION	0.024256611909684343	DESIGN
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9791689490681647	WITHOUT_CLASSIFICATION	0.02083105093183539	DESIGN
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9991572876976281	WITHOUT_CLASSIFICATION	8.427123023719177E-4	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9989651144021459	WITHOUT_CLASSIFICATION	0.001034885597854115	DESIGN
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9970263156856699	WITHOUT_CLASSIFICATION	0.0029736843143301846	DESIGN
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9761857086324971	WITHOUT_CLASSIFICATION	0.023814291367502936	DESIGN
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9988571867830923	WITHOUT_CLASSIFICATION	0.0011428132169076497	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9811753847910042	WITHOUT_CLASSIFICATION	0.018824615208995893	DESIGN
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9990769336217598	WITHOUT_CLASSIFICATION	9.230663782402687E-4	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.6553802921298468	WITHOUT_CLASSIFICATION	0.3446197078701532	DESIGN
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.999692633471822	WITHOUT_CLASSIFICATION	3.0736652817799494E-4	DESIGN
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9897660923547975	WITHOUT_CLASSIFICATION	0.010233907645202574	DESIGN
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.999926951642767	WITHOUT_CLASSIFICATION	7.30483572330132E-5	DESIGN
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9945275365196198	WITHOUT_CLASSIFICATION	0.0054724634803802776	DESIGN
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994142153361664	WITHOUT_CLASSIFICATION	5.857846638335394E-4	DESIGN
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994401786763405	WITHOUT_CLASSIFICATION	5.598213236594059E-4	DESIGN
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.6638772475341366	WITHOUT_CLASSIFICATION	0.33612275246586354	DESIGN
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999616341062694	WITHOUT_CLASSIFICATION	3.8365893730588134E-4	DESIGN
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999119696320509	WITHOUT_CLASSIFICATION	8.803036794904403E-5	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9992537033014144	WITHOUT_CLASSIFICATION	7.462966985856283E-4	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9992537033014144	WITHOUT_CLASSIFICATION	7.462966985856283E-4	DESIGN
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.999814891003249	WITHOUT_CLASSIFICATION	1.8510899675096938E-4	DESIGN
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999983659584538	WITHOUT_CLASSIFICATION	1.6340415461459403E-6	DESIGN
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9997173601542613	WITHOUT_CLASSIFICATION	2.8263984573863104E-4	DESIGN
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9986603135773803	WITHOUT_CLASSIFICATION	0.001339686422619811	DESIGN
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9976491309664443	WITHOUT_CLASSIFICATION	0.002350869033555773	DESIGN
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999152386368992	WITHOUT_CLASSIFICATION	8.476136310085412E-5	DESIGN
//for EJB3	WITHOUT_CLASSIFICATION	0.9992889099433518	WITHOUT_CLASSIFICATION	7.110900566480367E-4	DESIGN
// just ignore	WITHOUT_CLASSIFICATION	0.9995281203631011	WITHOUT_CLASSIFICATION	4.718796368989149E-4	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9985818985734362	WITHOUT_CLASSIFICATION	0.001418101426563942	DESIGN
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997721357546552	WITHOUT_CLASSIFICATION	2.2786424534484246E-4	DESIGN
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997900375186914	WITHOUT_CLASSIFICATION	2.0996248130863353E-4	DESIGN
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997721357546552	WITHOUT_CLASSIFICATION	2.2786424534484246E-4	DESIGN
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997721357546552	WITHOUT_CLASSIFICATION	2.2786424534484246E-4	DESIGN
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997721357546552	WITHOUT_CLASSIFICATION	2.2786424534484246E-4	DESIGN
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997736823988695	WITHOUT_CLASSIFICATION	2.263176011303751E-4	DESIGN
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997721357546552	WITHOUT_CLASSIFICATION	2.2786424534484246E-4	DESIGN
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997414815420452	WITHOUT_CLASSIFICATION	2.5851845795475035E-4	DESIGN
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997721357546552	WITHOUT_CLASSIFICATION	2.2786424534484246E-4	DESIGN
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997721357546552	WITHOUT_CLASSIFICATION	2.2786424534484246E-4	DESIGN
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997721357546552	WITHOUT_CLASSIFICATION	2.2786424534484246E-4	DESIGN
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9876989148531218	WITHOUT_CLASSIFICATION	0.012301085146878176	DESIGN
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9941647331214615	WITHOUT_CLASSIFICATION	0.005835266878538589	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9727333526119334	WITHOUT_CLASSIFICATION	0.027266647388066615	DESIGN
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999873719864004	WITHOUT_CLASSIFICATION	1.2628013599585498E-5	DESIGN
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9994802150972111	WITHOUT_CLASSIFICATION	5.19784902788861E-4	DESIGN
// not for internal use:	WITHOUT_CLASSIFICATION	0.9973103369336154	WITHOUT_CLASSIFICATION	0.002689663066384632	DESIGN
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9988110356211312	WITHOUT_CLASSIFICATION	0.0011889643788687647	DESIGN
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9878148437686092	WITHOUT_CLASSIFICATION	0.01218515623139088	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9727333526119334	WITHOUT_CLASSIFICATION	0.027266647388066615	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9727333526119334	WITHOUT_CLASSIFICATION	0.027266647388066615	DESIGN
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9953731362102235	WITHOUT_CLASSIFICATION	0.00462686378977645	DESIGN
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.999660032434576	WITHOUT_CLASSIFICATION	3.399675654240194E-4	DESIGN
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9969371551146313	WITHOUT_CLASSIFICATION	0.0030628448853686156	DESIGN
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.998870791434714	WITHOUT_CLASSIFICATION	0.0011292085652859908	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9996096080734347	WITHOUT_CLASSIFICATION	3.9039192656525125E-4	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9811753847910042	WITHOUT_CLASSIFICATION	0.018824615208995893	DESIGN
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.996806294385468	WITHOUT_CLASSIFICATION	0.003193705614531943	DESIGN
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9993851570466159	WITHOUT_CLASSIFICATION	6.148429533840645E-4	DESIGN
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9956254235442727	WITHOUT_CLASSIFICATION	0.00437457645572726	DESIGN
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.994585096638836	WITHOUT_CLASSIFICATION	0.005414903361164072	DESIGN
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9993334435568845	WITHOUT_CLASSIFICATION	6.665564431155259E-4	DESIGN
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991605531571081	WITHOUT_CLASSIFICATION	8.394468428920526E-4	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9988240032058965	WITHOUT_CLASSIFICATION	0.001175996794103476	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9988240032058965	WITHOUT_CLASSIFICATION	0.001175996794103476	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9988240032058965	WITHOUT_CLASSIFICATION	0.001175996794103476	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9988240032058965	WITHOUT_CLASSIFICATION	0.001175996794103476	DESIGN
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999488355418203	WITHOUT_CLASSIFICATION	5.116445817970299E-4	DESIGN
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991228280083952	WITHOUT_CLASSIFICATION	8.771719916046239E-4	DESIGN
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999052543382898	WITHOUT_CLASSIFICATION	9.474566171009158E-5	DESIGN
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999488355418203	WITHOUT_CLASSIFICATION	5.116445817970299E-4	DESIGN
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9929799437755321	WITHOUT_CLASSIFICATION	0.007020056224467926	DESIGN
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9599636101691802	WITHOUT_CLASSIFICATION	0.040036389830819925	DESIGN
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996340938959651	WITHOUT_CLASSIFICATION	3.6590610403490844E-4	DESIGN
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997092393679825	WITHOUT_CLASSIFICATION	2.9076063201756734E-4	DESIGN
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.6791512281795753	DESIGN	0.3208487718204247	WITHOUT_CLASSIFICATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.8505636461725878	WITHOUT_CLASSIFICATION	0.1494363538274122	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9994058678894711	WITHOUT_CLASSIFICATION	5.941321105290037E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9991919432290912	WITHOUT_CLASSIFICATION	8.080567709088184E-4	DESIGN
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9933517269496023	WITHOUT_CLASSIFICATION	0.006648273050397651	DESIGN
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9957637447301996	WITHOUT_CLASSIFICATION	0.004236255269800441	DESIGN
//no big deal	WITHOUT_CLASSIFICATION	0.998710004995834	WITHOUT_CLASSIFICATION	0.0012899950041659525	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9995132915413175	WITHOUT_CLASSIFICATION	4.867084586825093E-4	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9995132915413175	WITHOUT_CLASSIFICATION	4.867084586825093E-4	DESIGN
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9997154404578129	WITHOUT_CLASSIFICATION	2.845595421871104E-4	DESIGN
// see explanation above...	WITHOUT_CLASSIFICATION	0.999227665274021	WITHOUT_CLASSIFICATION	7.723347259789593E-4	DESIGN
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9786948551981988	WITHOUT_CLASSIFICATION	0.021305144801801193	DESIGN
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9987190787985143	WITHOUT_CLASSIFICATION	0.0012809212014856185	DESIGN
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993602765275724	WITHOUT_CLASSIFICATION	6.397234724275506E-4	DESIGN
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993602765275724	WITHOUT_CLASSIFICATION	6.397234724275506E-4	DESIGN
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999566851442704	WITHOUT_CLASSIFICATION	4.3314855729557885E-5	DESIGN
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994918028622256	WITHOUT_CLASSIFICATION	5.081971377743119E-4	DESIGN
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999913810046123	WITHOUT_CLASSIFICATION	8.618995387709578E-6	DESIGN
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9994076573710439	WITHOUT_CLASSIFICATION	5.923426289561017E-4	DESIGN
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9985281122347496	WITHOUT_CLASSIFICATION	0.0014718877652504774	DESIGN
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9941104826288856	WITHOUT_CLASSIFICATION	0.005889517371114372	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994397897476158	WITHOUT_CLASSIFICATION	5.602102523841587E-4	DESIGN
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9995313637907449	WITHOUT_CLASSIFICATION	4.686362092551107E-4	DESIGN
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9997082041960351	WITHOUT_CLASSIFICATION	2.9179580396484307E-4	DESIGN
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9993179593615769	WITHOUT_CLASSIFICATION	6.820406384232221E-4	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9859591188340591	WITHOUT_CLASSIFICATION	0.014040881165940908	DESIGN
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9972598717259186	WITHOUT_CLASSIFICATION	0.0027401282740814026	DESIGN
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9969593404341194	WITHOUT_CLASSIFICATION	0.003040659565880694	DESIGN
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9997854389042165	WITHOUT_CLASSIFICATION	2.145610957834615E-4	DESIGN
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999937816795418	WITHOUT_CLASSIFICATION	6.218320458238047E-6	DESIGN
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999996648091493	WITHOUT_CLASSIFICATION	3.3519085075582326E-7	DESIGN
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999925238335154	WITHOUT_CLASSIFICATION	7.476166484557033E-6	DESIGN
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999917029297212	WITHOUT_CLASSIFICATION	8.297070278875725E-6	DESIGN
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9972358852567694	WITHOUT_CLASSIFICATION	0.0027641147432305732	DESIGN
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9995009910867908	WITHOUT_CLASSIFICATION	4.990089132092674E-4	DESIGN
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9994440880821748	WITHOUT_CLASSIFICATION	5.559119178252111E-4	DESIGN
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9953837832097296	WITHOUT_CLASSIFICATION	0.004616216790270375	DESIGN
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999693180850648	WITHOUT_CLASSIFICATION	3.068191493523383E-5	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.999940819856858	WITHOUT_CLASSIFICATION	5.9180143141945114E-5	DESIGN
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9981851854230192	WITHOUT_CLASSIFICATION	0.0018148145769807582	DESIGN
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.999686881816977	WITHOUT_CLASSIFICATION	3.131181830230143E-4	DESIGN
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9987070417465025	WITHOUT_CLASSIFICATION	0.001292958253497481	DESIGN
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9975235053871205	WITHOUT_CLASSIFICATION	0.002476494612879392	DESIGN
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9977011782144379	WITHOUT_CLASSIFICATION	0.0022988217855620997	DESIGN
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9945126897020009	WITHOUT_CLASSIFICATION	0.005487310297999075	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9983974358061515	WITHOUT_CLASSIFICATION	0.001602564193848501	DESIGN
// handle empty collection	WITHOUT_CLASSIFICATION	0.9919937620363241	WITHOUT_CLASSIFICATION	0.008006237963675925	DESIGN
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999634209091108	WITHOUT_CLASSIFICATION	3.657909088919352E-5	DESIGN
//handle empty collections	WITHOUT_CLASSIFICATION	0.9963325431983758	WITHOUT_CLASSIFICATION	0.003667456801624251	DESIGN
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9943183372111213	WITHOUT_CLASSIFICATION	0.005681662788878805	DESIGN
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9998141232338598	WITHOUT_CLASSIFICATION	1.8587676614017755E-4	DESIGN
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.7522112904118192	WITHOUT_CLASSIFICATION	0.2477887095881808	DESIGN
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9969046393666534	WITHOUT_CLASSIFICATION	0.003095360633346677	DESIGN
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999187617691626	WITHOUT_CLASSIFICATION	8.123823083742063E-5	DESIGN
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9985021504868701	WITHOUT_CLASSIFICATION	0.0014978495131299666	DESIGN
//use the id passed in	WITHOUT_CLASSIFICATION	0.9997139863903585	WITHOUT_CLASSIFICATION	2.860136096415595E-4	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9996245045635695	WITHOUT_CLASSIFICATION	3.754954364304401E-4	DESIGN
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9996047996316705	WITHOUT_CLASSIFICATION	3.952003683294891E-4	DESIGN
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999300400084743	WITHOUT_CLASSIFICATION	6.995999152572085E-5	DESIGN
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9994008265278718	WITHOUT_CLASSIFICATION	5.991734721282709E-4	DESIGN
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9978224853796946	WITHOUT_CLASSIFICATION	0.002177514620305285	DESIGN
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9987225474136211	WITHOUT_CLASSIFICATION	0.001277452586378829	DESIGN
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.999861282554861	WITHOUT_CLASSIFICATION	1.387174451389733E-4	DESIGN
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999858591876285	WITHOUT_CLASSIFICATION	1.4140812371506863E-5	DESIGN
// look for a proxy	WITHOUT_CLASSIFICATION	0.9987511791058403	WITHOUT_CLASSIFICATION	0.0012488208941596843	DESIGN
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9963175838816023	WITHOUT_CLASSIFICATION	0.003682416118397752	DESIGN
//its the given optional object	WITHOUT_CLASSIFICATION	0.9991272271111805	WITHOUT_CLASSIFICATION	8.727728888193814E-4	DESIGN
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9962422981809809	WITHOUT_CLASSIFICATION	0.003757701819019103	DESIGN
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9980695652762173	WITHOUT_CLASSIFICATION	0.0019304347237826367	DESIGN
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9985951986406557	WITHOUT_CLASSIFICATION	0.0014048013593442727	DESIGN
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9971103212751644	WITHOUT_CLASSIFICATION	0.002889678724835639	DESIGN
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999365365211589	WITHOUT_CLASSIFICATION	6.346347884114227E-5	DESIGN
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9619795858535023	WITHOUT_CLASSIFICATION	0.038020414146497636	DESIGN
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9992041783236234	WITHOUT_CLASSIFICATION	7.958216763764807E-4	DESIGN
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.992514458931216	WITHOUT_CLASSIFICATION	0.007485541068784062	DESIGN
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9984473160765459	WITHOUT_CLASSIFICATION	0.0015526839234540671	DESIGN
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9986603135773803	WITHOUT_CLASSIFICATION	0.001339686422619811	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999971529828838	WITHOUT_CLASSIFICATION	2.84701711606853E-6	DESIGN
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9102831108307836	WITHOUT_CLASSIFICATION	0.08971688916921644	DESIGN
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9985371435988899	WITHOUT_CLASSIFICATION	0.0014628564011100818	DESIGN
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9978880275887874	WITHOUT_CLASSIFICATION	0.0021119724112126175	DESIGN
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9998176133278246	WITHOUT_CLASSIFICATION	1.8238667217543476E-4	DESIGN
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9883929474598226	WITHOUT_CLASSIFICATION	0.011607052540177323	DESIGN
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999882668932204	WITHOUT_CLASSIFICATION	1.1733106779647996E-5	DESIGN
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9996395563092901	WITHOUT_CLASSIFICATION	3.6044369070980766E-4	DESIGN
//before adding to collection!	WITHOUT_CLASSIFICATION	0.997688637679712	WITHOUT_CLASSIFICATION	0.002311362320287892	DESIGN
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9994862127303563	WITHOUT_CLASSIFICATION	5.137872696435937E-4	DESIGN
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999849566663058	WITHOUT_CLASSIFICATION	1.504333369423743E-5	DESIGN
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9998401561353069	WITHOUT_CLASSIFICATION	1.5984386469311117E-4	DESIGN
//a composite key	WITHOUT_CLASSIFICATION	0.9969761605967777	WITHOUT_CLASSIFICATION	0.0030238394032222923	DESIGN
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9998907724197145	WITHOUT_CLASSIFICATION	1.0922758028555243E-4	DESIGN
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9706322047460487	WITHOUT_CLASSIFICATION	0.029367795253951223	DESIGN
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9973976636539029	WITHOUT_CLASSIFICATION	0.002602336346097037	DESIGN
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9987046682680515	WITHOUT_CLASSIFICATION	0.001295331731948599	DESIGN
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.5281760906782369	DESIGN	0.47182390932176316	WITHOUT_CLASSIFICATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9600630593680236	WITHOUT_CLASSIFICATION	0.0399369406319763	DESIGN
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9901103227456514	WITHOUT_CLASSIFICATION	0.009889677254348563	DESIGN
// we found it	WITHOUT_CLASSIFICATION	0.9984329196384251	WITHOUT_CLASSIFICATION	0.0015670803615749664	DESIGN
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9992999993045512	WITHOUT_CLASSIFICATION	7.000006954487736E-4	DESIGN
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9741272452174978	WITHOUT_CLASSIFICATION	0.025872754782502127	DESIGN
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9784085867971961	WITHOUT_CLASSIFICATION	0.0215914132028039	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999834382803047	WITHOUT_CLASSIFICATION	1.6561719695337908E-5	DESIGN
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9961824808062572	WITHOUT_CLASSIFICATION	0.003817519193742706	DESIGN
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9991734270305995	WITHOUT_CLASSIFICATION	8.265729694005778E-4	DESIGN
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9956694772427498	WITHOUT_CLASSIFICATION	0.004330522757250284	DESIGN
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9995592841223997	WITHOUT_CLASSIFICATION	4.407158776003401E-4	DESIGN
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9977617432673159	WITHOUT_CLASSIFICATION	0.0022382567326840867	DESIGN
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999159511958235	WITHOUT_CLASSIFICATION	8.404880417638432E-5	DESIGN
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9978257529482805	WITHOUT_CLASSIFICATION	0.00217424705171952	DESIGN
//the criteria instance	WITHOUT_CLASSIFICATION	0.9921354276807387	WITHOUT_CLASSIFICATION	0.007864572319261274	DESIGN
// the entity name	WITHOUT_CLASSIFICATION	0.998038269083893	WITHOUT_CLASSIFICATION	0.00196173091610688	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999424115117996	WITHOUT_CLASSIFICATION	5.758848820031791E-5	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999424115117996	WITHOUT_CLASSIFICATION	5.758848820031791E-5	DESIGN
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9998109190222677	WITHOUT_CLASSIFICATION	1.8908097773228565E-4	DESIGN
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9958787523507038	WITHOUT_CLASSIFICATION	0.004121247649296217	DESIGN
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9994586751050332	WITHOUT_CLASSIFICATION	5.413248949667434E-4	DESIGN
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9915941885094985	WITHOUT_CLASSIFICATION	0.00840581149050148	DESIGN
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9996405276307437	WITHOUT_CLASSIFICATION	3.5947236925627123E-4	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9991794752758053	WITHOUT_CLASSIFICATION	8.205247241947134E-4	DESIGN
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9993968594214236	WITHOUT_CLASSIFICATION	6.031405785763083E-4	DESIGN
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.999963097672013	WITHOUT_CLASSIFICATION	3.690232798711407E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.998267034635154	WITHOUT_CLASSIFICATION	0.0017329653648460624	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9998036964510062	WITHOUT_CLASSIFICATION	1.9630354899383194E-4	DESIGN
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999657994084369	WITHOUT_CLASSIFICATION	3.420059156303883E-5	DESIGN
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9998381700639145	WITHOUT_CLASSIFICATION	1.6182993608547413E-4	DESIGN
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999961186184434	WITHOUT_CLASSIFICATION	3.881381556587585E-6	DESIGN
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9995946337796615	WITHOUT_CLASSIFICATION	4.0536622033851446E-4	DESIGN
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999695257513115	WITHOUT_CLASSIFICATION	3.0474248688506078E-5	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9489901864086577	WITHOUT_CLASSIFICATION	0.05100981359134223	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9489901864086577	WITHOUT_CLASSIFICATION	0.05100981359134223	DESIGN
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999821048344298	WITHOUT_CLASSIFICATION	1.7895165570185506E-5	DESIGN
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9992577037388082	WITHOUT_CLASSIFICATION	7.422962611918352E-4	DESIGN
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9997562520790372	WITHOUT_CLASSIFICATION	2.4374792096295422E-4	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999665403403902	WITHOUT_CLASSIFICATION	3.3459659609800445E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9995751923290594	WITHOUT_CLASSIFICATION	4.248076709406692E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9968355613887973	WITHOUT_CLASSIFICATION	0.0031644386112027476	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9968355613887973	WITHOUT_CLASSIFICATION	0.0031644386112027476	DESIGN
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.999937738345527	WITHOUT_CLASSIFICATION	6.226165447301688E-5	DESIGN
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9948042581574288	WITHOUT_CLASSIFICATION	0.005195741842571267	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999417608217798	WITHOUT_CLASSIFICATION	5.82391782200821E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999805404414	WITHOUT_CLASSIFICATION	1.9459558668003562E-8	DESIGN
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.6436524114931934	WITHOUT_CLASSIFICATION	0.35634758850680653	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9997062969790996	WITHOUT_CLASSIFICATION	2.9370302090029314E-4	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9968364486735753	WITHOUT_CLASSIFICATION	0.00316355132642465	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9991260450710998	WITHOUT_CLASSIFICATION	8.739549289002097E-4	DESIGN
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9986805656513957	WITHOUT_CLASSIFICATION	0.001319434348604333	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9131193518720528	WITHOUT_CLASSIFICATION	0.08688064812794719	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9967925507644688	WITHOUT_CLASSIFICATION	0.0032074492355312	DESIGN
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9997096276016231	WITHOUT_CLASSIFICATION	2.9037239837695025E-4	DESIGN
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.999255125540774	WITHOUT_CLASSIFICATION	7.448744592260881E-4	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9991592668948002	WITHOUT_CLASSIFICATION	8.407331051998451E-4	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9983085700627294	WITHOUT_CLASSIFICATION	0.0016914299372705862	DESIGN
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9996467264916076	WITHOUT_CLASSIFICATION	3.532735083924755E-4	DESIGN
//by default	WITHOUT_CLASSIFICATION	0.9977404799975574	WITHOUT_CLASSIFICATION	0.002259520002442505	DESIGN
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9242010196720243	WITHOUT_CLASSIFICATION	0.0757989803279758	DESIGN
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9991350018065928	WITHOUT_CLASSIFICATION	8.649981934072272E-4	DESIGN
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9990083039123382	WITHOUT_CLASSIFICATION	9.916960876617748E-4	DESIGN
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9995661907561113	WITHOUT_CLASSIFICATION	4.3380924388872677E-4	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999639602354171	WITHOUT_CLASSIFICATION	3.6039764582840486E-5	DESIGN
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9994273999171477	WITHOUT_CLASSIFICATION	5.726000828522184E-4	DESIGN
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9993853965433248	WITHOUT_CLASSIFICATION	6.146034566751804E-4	DESIGN
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9974010262553251	WITHOUT_CLASSIFICATION	0.002598973744674888	DESIGN
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999985744085097	WITHOUT_CLASSIFICATION	1.4255914902960651E-6	DESIGN
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9947721092605936	WITHOUT_CLASSIFICATION	0.005227890739406401	DESIGN
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9971296793296794	WITHOUT_CLASSIFICATION	0.0028703206703206124	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999987493947534	WITHOUT_CLASSIFICATION	1.250605246577666E-6	DESIGN
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9976713007767833	WITHOUT_CLASSIFICATION	0.002328699223216568	DESIGN
//usually useless	WITHOUT_CLASSIFICATION	0.9914988136525669	WITHOUT_CLASSIFICATION	0.008501186347433102	DESIGN
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9945564511942298	WITHOUT_CLASSIFICATION	0.005443548805770223	DESIGN
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9983707514280139	WITHOUT_CLASSIFICATION	0.001629248571986122	DESIGN
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999092588406018	WITHOUT_CLASSIFICATION	9.074115939813182E-5	DESIGN
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9987644646250791	WITHOUT_CLASSIFICATION	0.0012355353749209186	DESIGN
//may be final	WITHOUT_CLASSIFICATION	0.9973435761107539	WITHOUT_CLASSIFICATION	0.002656423889246109	DESIGN
// may be final	WITHOUT_CLASSIFICATION	0.9966763128909614	WITHOUT_CLASSIFICATION	0.00332368710903856	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9987888675812077	WITHOUT_CLASSIFICATION	0.0012111324187923725	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9962792304324902	WITHOUT_CLASSIFICATION	0.0037207695675098764	DESIGN
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9997735657114437	WITHOUT_CLASSIFICATION	2.2643428855633252E-4	DESIGN
// ignore it...	WITHOUT_CLASSIFICATION	0.9929290945330355	WITHOUT_CLASSIFICATION	0.00707090546696462	DESIGN
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9869665313360733	WITHOUT_CLASSIFICATION	0.013033468663926686	DESIGN
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9982223912335356	WITHOUT_CLASSIFICATION	0.0017776087664644314	DESIGN
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9895994507857176	WITHOUT_CLASSIFICATION	0.010400549214282406	DESIGN
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9980213226667379	WITHOUT_CLASSIFICATION	0.0019786773332620493	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9987888675812077	WITHOUT_CLASSIFICATION	0.0012111324187923725	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9962792304324902	WITHOUT_CLASSIFICATION	0.0037207695675098764	DESIGN
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9997337685139978	WITHOUT_CLASSIFICATION	2.662314860022238E-4	DESIGN
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9978717425960733	WITHOUT_CLASSIFICATION	0.0021282574039267824	DESIGN
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9990184332112723	WITHOUT_CLASSIFICATION	9.815667887278022E-4	DESIGN
// index should be last column listed	WITHOUT_CLASSIFICATION	0.999817229955617	WITHOUT_CLASSIFICATION	1.8277004438302375E-4	DESIGN
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9986760189193197	WITHOUT_CLASSIFICATION	0.0013239810806803015	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9925993501672391	WITHOUT_CLASSIFICATION	0.007400649832760876	DESIGN
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998752114239168	WITHOUT_CLASSIFICATION	1.2478857608327115E-4	DESIGN
// }	WITHOUT_CLASSIFICATION	0.9984562005591903	WITHOUT_CLASSIFICATION	0.0015437994408098211	DESIGN
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9993708827246236	WITHOUT_CLASSIFICATION	6.291172753763965E-4	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.6749173955412427	DESIGN	0.3250826044587572	WITHOUT_CLASSIFICATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9998743170718339	WITHOUT_CLASSIFICATION	1.2568292816606146E-4	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.6749173955412427	DESIGN	0.3250826044587572	WITHOUT_CLASSIFICATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9998947207731288	WITHOUT_CLASSIFICATION	1.0527922687118207E-4	DESIGN
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9993349387919194	WITHOUT_CLASSIFICATION	6.650612080805874E-4	DESIGN
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9998947207731288	WITHOUT_CLASSIFICATION	1.0527922687118207E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997227296633927	WITHOUT_CLASSIFICATION	2.7727033660725057E-4	DESIGN
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9996518940546696	WITHOUT_CLASSIFICATION	3.4810594533039033E-4	DESIGN
//}	WITHOUT_CLASSIFICATION	0.999080972538689	WITHOUT_CLASSIFICATION	9.190274613110624E-4	DESIGN
//}	WITHOUT_CLASSIFICATION	0.999080972538689	WITHOUT_CLASSIFICATION	9.190274613110624E-4	DESIGN
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9988524645099282	WITHOUT_CLASSIFICATION	0.0011475354900718166	DESIGN
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9988595313390992	WITHOUT_CLASSIFICATION	0.001140468660900803	DESIGN
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9988524645099282	WITHOUT_CLASSIFICATION	0.0011475354900718166	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9977772175313133	WITHOUT_CLASSIFICATION	0.0022227824686867777	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9977011782144379	WITHOUT_CLASSIFICATION	0.0022988217855620997	DESIGN
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.5627206336213395	WITHOUT_CLASSIFICATION	0.4372793663786605	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9989897652220744	WITHOUT_CLASSIFICATION	0.0010102347779256699	DESIGN
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9993087398192917	WITHOUT_CLASSIFICATION	6.912601807083262E-4	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9995548912323523	WITHOUT_CLASSIFICATION	4.4510876764777027E-4	DESIGN
//columns	WITHOUT_CLASSIFICATION	0.9989185733406403	WITHOUT_CLASSIFICATION	0.0010814266593598032	DESIGN
//SQL statements	WITHOUT_CLASSIFICATION	0.9981245144351949	WITHOUT_CLASSIFICATION	0.0018754855648051726	DESIGN
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9947002122762264	WITHOUT_CLASSIFICATION	0.005299787723773583	DESIGN
//types	WITHOUT_CLASSIFICATION	0.9989185733406403	WITHOUT_CLASSIFICATION	0.0010814266593598032	DESIGN
// custom sql	WITHOUT_CLASSIFICATION	0.9999477672458499	WITHOUT_CLASSIFICATION	5.22327541501602E-5	DESIGN
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9991957308307666	WITHOUT_CLASSIFICATION	8.04269169233352E-4	DESIGN
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9996572271193565	WITHOUT_CLASSIFICATION	3.4277288064356824E-4	DESIGN
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9995555161306563	WITHOUT_CLASSIFICATION	4.444838693437938E-4	DESIGN
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999431871458347	WITHOUT_CLASSIFICATION	5.681285416522262E-5	DESIGN
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9996467264916076	WITHOUT_CLASSIFICATION	3.532735083924755E-4	DESIGN
//ELEMENT	WITHOUT_CLASSIFICATION	0.9989185733406403	WITHOUT_CLASSIFICATION	0.0010814266593598032	DESIGN
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.999867504928391	WITHOUT_CLASSIFICATION	1.3249507160899963E-4	DESIGN
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9993185715351385	WITHOUT_CLASSIFICATION	6.814284648614517E-4	DESIGN
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999852283148741	WITHOUT_CLASSIFICATION	1.4771685125916694E-5	DESIGN
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9996467264916076	WITHOUT_CLASSIFICATION	3.532735083924755E-4	DESIGN
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9981726457984554	WITHOUT_CLASSIFICATION	0.0018273542015445475	DESIGN
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.997046191346851	WITHOUT_CLASSIFICATION	0.0029538086531490054	DESIGN
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9532759574901174	WITHOUT_CLASSIFICATION	0.046724042509882636	DESIGN
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9875978426125636	WITHOUT_CLASSIFICATION	0.0124021573874365	DESIGN
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9839604898698433	WITHOUT_CLASSIFICATION	0.01603951013015672	DESIGN
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9820979786425419	WITHOUT_CLASSIFICATION	0.017902021357458064	DESIGN
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9649625568458887	WITHOUT_CLASSIFICATION	0.03503744315411121	DESIGN
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9934043093110956	WITHOUT_CLASSIFICATION	0.006595690688904467	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9989897652220744	WITHOUT_CLASSIFICATION	0.0010102347779256699	DESIGN
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9985935297488353	WITHOUT_CLASSIFICATION	0.0014064702511646838	DESIGN
//needed by arrays	WITHOUT_CLASSIFICATION	0.9979880758454149	WITHOUT_CLASSIFICATION	0.0020119241545850496	DESIGN
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9303566234823734	WITHOUT_CLASSIFICATION	0.06964337651762657	DESIGN
//an assertion	WITHOUT_CLASSIFICATION	0.9960645546802589	WITHOUT_CLASSIFICATION	0.00393544531974104	DESIGN
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999152995537609	WITHOUT_CLASSIFICATION	8.470044623909061E-5	DESIGN
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999205716303079	WITHOUT_CLASSIFICATION	7.942836969219918E-5	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9977772175313133	WITHOUT_CLASSIFICATION	0.0022227824686867777	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9977772175313133	WITHOUT_CLASSIFICATION	0.0022227824686867777	DESIGN
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999031528601271	WITHOUT_CLASSIFICATION	9.684713987288273E-5	DESIGN
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9998792046966334	WITHOUT_CLASSIFICATION	1.2079530336665138E-4	DESIGN
//==elementType ??	WITHOUT_CLASSIFICATION	0.9979016328000385	WITHOUT_CLASSIFICATION	0.002098367199961592	DESIGN
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999882168231533	WITHOUT_CLASSIFICATION	1.1783176846616333E-5	DESIGN
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.997710805839688	WITHOUT_CLASSIFICATION	0.0022891941603119773	DESIGN
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9936543479022301	WITHOUT_CLASSIFICATION	0.006345652097769936	DESIGN
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9065919612948681	WITHOUT_CLASSIFICATION	0.09340803870513187	DESIGN
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999219954029495	WITHOUT_CLASSIFICATION	7.800459705058022E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9994445467454398	WITHOUT_CLASSIFICATION	5.554532545602238E-4	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9995336477062678	WITHOUT_CLASSIFICATION	4.663522937321091E-4	DESIGN
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9991957308307666	WITHOUT_CLASSIFICATION	8.04269169233352E-4	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
//Custom SQL	WITHOUT_CLASSIFICATION	0.9973405779805291	WITHOUT_CLASSIFICATION	0.0026594220194708145	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9995336477062678	WITHOUT_CLASSIFICATION	4.663522937321091E-4	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9993158311103036	WITHOUT_CLASSIFICATION	6.841688896962365E-4	DESIGN
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9915755460975153	WITHOUT_CLASSIFICATION	0.008424453902484606	DESIGN
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9990130201977057	WITHOUT_CLASSIFICATION	9.869798022943928E-4	DESIGN
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9277584804554844	WITHOUT_CLASSIFICATION	0.07224151954451562	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9975729341314002	WITHOUT_CLASSIFICATION	0.0024270658685998014	DESIGN
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9992559034911592	WITHOUT_CLASSIFICATION	7.440965088407181E-4	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.97370517990416	WITHOUT_CLASSIFICATION	0.02629482009584001	DESIGN
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999845872148098	WITHOUT_CLASSIFICATION	1.5412785190264466E-5	DESIGN
//MULTITABLES	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9996239275791058	WITHOUT_CLASSIFICATION	3.7607242089425714E-4	DESIGN
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9959953584180148	WITHOUT_CLASSIFICATION	0.004004641581985195	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9987190787985143	WITHOUT_CLASSIFICATION	0.0012809212014856185	DESIGN
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9986603135773803	WITHOUT_CLASSIFICATION	0.001339686422619811	DESIGN
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9986603135773803	WITHOUT_CLASSIFICATION	0.001339686422619811	DESIGN
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9900312737872413	WITHOUT_CLASSIFICATION	0.009968726212758633	DESIGN
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.998540310133365	WITHOUT_CLASSIFICATION	0.0014596898666350635	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9995336477062678	WITHOUT_CLASSIFICATION	4.663522937321091E-4	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9975729341314002	WITHOUT_CLASSIFICATION	0.0024270658685998014	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.97370517990416	WITHOUT_CLASSIFICATION	0.02629482009584001	DESIGN
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9985954152058856	WITHOUT_CLASSIFICATION	0.0014045847941144395	DESIGN
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9976654893128425	WITHOUT_CLASSIFICATION	0.0023345106871574123	DESIGN
// discriminator column	WITHOUT_CLASSIFICATION	0.9998460883203897	WITHOUT_CLASSIFICATION	1.539116796104219E-4	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999398379957768	WITHOUT_CLASSIFICATION	6.0162004223121924E-5	DESIGN
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9997796390035237	WITHOUT_CLASSIFICATION	2.2036099647618074E-4	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9987190787985143	WITHOUT_CLASSIFICATION	0.0012809212014856185	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9987440822640996	WITHOUT_CLASSIFICATION	0.001255917735900351	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9987190787985143	WITHOUT_CLASSIFICATION	0.0012809212014856185	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9993158311103036	WITHOUT_CLASSIFICATION	6.841688896962365E-4	DESIGN
// JOINS	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9995317243258186	WITHOUT_CLASSIFICATION	4.682756741813565E-4	DESIGN
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9985318279710768	WITHOUT_CLASSIFICATION	0.0014681720289233344	DESIGN
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9915590300743723	WITHOUT_CLASSIFICATION	0.00844096992562766	DESIGN
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9995726598503686	WITHOUT_CLASSIFICATION	4.273401496314059E-4	DESIGN
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9993185120871442	WITHOUT_CLASSIFICATION	6.814879128557897E-4	DESIGN
//render the SQL	WITHOUT_CLASSIFICATION	0.9984337248841515	WITHOUT_CLASSIFICATION	0.0015662751158485593	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997227296633927	WITHOUT_CLASSIFICATION	2.7727033660725057E-4	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9845844731401434	WITHOUT_CLASSIFICATION	0.015415526859856683	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994046669946032	WITHOUT_CLASSIFICATION	5.953330053968793E-4	DESIGN
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999908036670714	WITHOUT_CLASSIFICATION	9.196332928605193E-6	DESIGN
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9902730922963865	WITHOUT_CLASSIFICATION	0.0097269077036135	DESIGN
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9991820766215737	WITHOUT_CLASSIFICATION	8.179233784264638E-4	DESIGN
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9990459309508565	WITHOUT_CLASSIFICATION	9.540690491434402E-4	DESIGN
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9998082331566135	WITHOUT_CLASSIFICATION	1.9176684338653504E-4	DESIGN
// SQL strings	WITHOUT_CLASSIFICATION	0.9979944827417732	WITHOUT_CLASSIFICATION	0.002005517258226844	DESIGN
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999244991613025	WITHOUT_CLASSIFICATION	7.55008386974396E-5	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9987440822640996	WITHOUT_CLASSIFICATION	0.001255917735900351	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994046669946032	WITHOUT_CLASSIFICATION	5.953330053968793E-4	DESIGN
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9987190787985143	WITHOUT_CLASSIFICATION	0.0012809212014856185	DESIGN
// VERSION	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9972104954479549	WITHOUT_CLASSIFICATION	0.002789504552045157	DESIGN
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9989931921092833	WITHOUT_CLASSIFICATION	0.0010068078907167093	DESIGN
//before add :-)	WITHOUT_CLASSIFICATION	0.9985352295953834	WITHOUT_CLASSIFICATION	0.0014647704046165555	DESIGN
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9984180590068416	WITHOUT_CLASSIFICATION	0.0015819409931583997	DESIGN
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9998129985137224	WITHOUT_CLASSIFICATION	1.8700148627770013E-4	DESIGN
//note early exit here:	WITHOUT_CLASSIFICATION	0.999095603629173	WITHOUT_CLASSIFICATION	9.043963708269292E-4	DESIGN
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9992403880884771	WITHOUT_CLASSIFICATION	7.596119115227302E-4	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.999470787153766	WITHOUT_CLASSIFICATION	5.292128462340655E-4	DESIGN
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9992759501332859	WITHOUT_CLASSIFICATION	7.240498667140893E-4	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999303450767209	WITHOUT_CLASSIFICATION	6.965492327917052E-5	DESIGN
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.99767455863861	WITHOUT_CLASSIFICATION	0.0023254413613899654	DESIGN
//null owner ok??	WITHOUT_CLASSIFICATION	0.9986638279223161	WITHOUT_CLASSIFICATION	0.001336172077683907	DESIGN
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999606773764534	WITHOUT_CLASSIFICATION	3.9322623546586015E-5	DESIGN
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9998827994462149	WITHOUT_CLASSIFICATION	1.1720055378506806E-4	DESIGN
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.847351291411942	WITHOUT_CLASSIFICATION	0.15264870858805793	DESIGN
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9986068343758318	WITHOUT_CLASSIFICATION	0.0013931656241682985	DESIGN
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9954085887106978	WITHOUT_CLASSIFICATION	0.004591411289302229	DESIGN
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9969569469196272	WITHOUT_CLASSIFICATION	0.0030430530803726877	DESIGN
// ALIASES	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9996008704073708	WITHOUT_CLASSIFICATION	3.9912959262914364E-4	DESIGN
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9990222572998736	WITHOUT_CLASSIFICATION	9.777427001264583E-4	DESIGN
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9996559117671191	WITHOUT_CLASSIFICATION	3.440882328809118E-4	DESIGN
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9959954163009506	WITHOUT_CLASSIFICATION	0.0040045836990494415	DESIGN
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.6181712092566273	DESIGN	0.3818287907433727	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9834345622393494	WITHOUT_CLASSIFICATION	0.01656543776065048	DESIGN
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9982466770226609	WITHOUT_CLASSIFICATION	0.0017533229773390592	DESIGN
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9997714480852116	WITHOUT_CLASSIFICATION	2.2855191478838186E-4	DESIGN
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.889412602179264	WITHOUT_CLASSIFICATION	0.11058739782073604	DESIGN
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9887595566881556	WITHOUT_CLASSIFICATION	0.011240443311844386	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9984848591111538	WITHOUT_CLASSIFICATION	0.0015151408888461754	DESIGN
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.999739002510253	WITHOUT_CLASSIFICATION	2.6099748974690444E-4	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.8972903306355339	WITHOUT_CLASSIFICATION	0.10270966936446609	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9812879273572108	WITHOUT_CLASSIFICATION	0.018712072642789186	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9996303390104846	WITHOUT_CLASSIFICATION	3.696609895154193E-4	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9996878028921591	WITHOUT_CLASSIFICATION	3.1219710784086515E-4	DESIGN
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9846366226023051	WITHOUT_CLASSIFICATION	0.01536337739769482	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9996303390104846	WITHOUT_CLASSIFICATION	3.696609895154193E-4	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9812879273572108	WITHOUT_CLASSIFICATION	0.018712072642789186	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9996878028921591	WITHOUT_CLASSIFICATION	3.1219710784086515E-4	DESIGN
// add the primary key	WITHOUT_CLASSIFICATION	0.9998105120227735	WITHOUT_CLASSIFICATION	1.8948797722664467E-4	DESIGN
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9998767128286555	WITHOUT_CLASSIFICATION	1.232871713444496E-4	DESIGN
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999826218548288	WITHOUT_CLASSIFICATION	1.737814517128904E-5	DESIGN
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9995323427788964	WITHOUT_CLASSIFICATION	4.676572211036039E-4	DESIGN
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9996384130107738	WITHOUT_CLASSIFICATION	3.6158698922620323E-4	DESIGN
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.5131657349547638	WITHOUT_CLASSIFICATION	0.48683426504523625	DESIGN
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9945969350520627	WITHOUT_CLASSIFICATION	0.005403064947937288	DESIGN
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9990050366213032	WITHOUT_CLASSIFICATION	9.949633786967846E-4	DESIGN
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9785129177711187	WITHOUT_CLASSIFICATION	0.02148708222888127	DESIGN
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9989125311025022	WITHOUT_CLASSIFICATION	0.001087468897497731	DESIGN
// starting index	WITHOUT_CLASSIFICATION	0.9998522010206669	WITHOUT_CLASSIFICATION	1.4779897933321485E-4	DESIGN
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9998172008643783	WITHOUT_CLASSIFICATION	1.827991356216373E-4	DESIGN
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9991574701479267	WITHOUT_CLASSIFICATION	8.425298520733268E-4	DESIGN
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9989474561078905	WITHOUT_CLASSIFICATION	0.001052543892109484	DESIGN
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9995242757663284	WITHOUT_CLASSIFICATION	4.75724233671575E-4	DESIGN
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9989193805139704	WITHOUT_CLASSIFICATION	0.0010806194860295258	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9926339522329667	WITHOUT_CLASSIFICATION	0.007366047767033235	DESIGN
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9996860676052959	WITHOUT_CLASSIFICATION	3.139323947041334E-4	DESIGN
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9989139795148355	WITHOUT_CLASSIFICATION	0.0010860204851644603	DESIGN
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.999946667145675	WITHOUT_CLASSIFICATION	5.333285432505503E-5	DESIGN
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.6445395803561491	WITHOUT_CLASSIFICATION	0.3554604196438509	DESIGN
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999611387825883	WITHOUT_CLASSIFICATION	3.886121741174288E-5	DESIGN
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9993375588679639	WITHOUT_CLASSIFICATION	6.624411320360953E-4	DESIGN
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999488597964113	WITHOUT_CLASSIFICATION	5.1140203588622545E-5	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999460580634524	WITHOUT_CLASSIFICATION	5.394193654764983E-5	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999460580634524	WITHOUT_CLASSIFICATION	5.394193654764983E-5	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999930795336738	WITHOUT_CLASSIFICATION	6.920466326192787E-5	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999930795336738	WITHOUT_CLASSIFICATION	6.920466326192787E-5	DESIGN
// not supported	WITHOUT_CLASSIFICATION	0.9977291881330859	WITHOUT_CLASSIFICATION	0.0022708118669140034	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9926339522329667	WITHOUT_CLASSIFICATION	0.007366047767033235	DESIGN
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9988675288157427	WITHOUT_CLASSIFICATION	0.0011324711842572504	DESIGN
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9997097778928873	WITHOUT_CLASSIFICATION	2.902221071127559E-4	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9817933018860768	WITHOUT_CLASSIFICATION	0.018206698113923097	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9817933018860768	WITHOUT_CLASSIFICATION	0.018206698113923097	DESIGN
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999102634756654	WITHOUT_CLASSIFICATION	8.973652433462301E-5	DESIGN
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9991865892595471	WITHOUT_CLASSIFICATION	8.134107404530531E-4	DESIGN
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9997565631026071	WITHOUT_CLASSIFICATION	2.434368973928509E-4	DESIGN
//skip the driving table	WITHOUT_CLASSIFICATION	0.9995278675272097	WITHOUT_CLASSIFICATION	4.7213247279032983E-4	DESIGN
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.7146362708948324	WITHOUT_CLASSIFICATION	0.2853637291051675	DESIGN
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999767787835214	WITHOUT_CLASSIFICATION	2.3221216478650872E-5	DESIGN
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9987834349617732	WITHOUT_CLASSIFICATION	0.0012165650382266679	DESIGN
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9966954248463017	WITHOUT_CLASSIFICATION	0.0033045751536983576	DESIGN
//now render the joins	WITHOUT_CLASSIFICATION	0.9972420085557282	WITHOUT_CLASSIFICATION	0.0027579914442717453	DESIGN
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9988028339868198	WITHOUT_CLASSIFICATION	0.001197166013180111	DESIGN
//now render the select clause	WITHOUT_CLASSIFICATION	0.9989209644858991	WITHOUT_CLASSIFICATION	0.0010790355141009893	DESIGN
//now tie it all together	WITHOUT_CLASSIFICATION	0.9991466356775321	WITHOUT_CLASSIFICATION	8.533643224679085E-4	DESIGN
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.997834385187786	WITHOUT_CLASSIFICATION	0.0021656148122139395	DESIGN
//select SQL	WITHOUT_CLASSIFICATION	0.9980791494419889	WITHOUT_CLASSIFICATION	0.0019208505580110577	DESIGN
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.8832244963697428	WITHOUT_CLASSIFICATION	0.11677550363025727	DESIGN
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9996108009892102	WITHOUT_CLASSIFICATION	3.8919901078987557E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9884951473971261	WITHOUT_CLASSIFICATION	0.011504852602873974	DESIGN
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999716167625861	WITHOUT_CLASSIFICATION	2.8383237413978284E-5	DESIGN
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9630286892257514	WITHOUT_CLASSIFICATION	0.03697131077424859	DESIGN
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9985591302795054	WITHOUT_CLASSIFICATION	0.0014408697204947075	DESIGN
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999749679982525	WITHOUT_CLASSIFICATION	2.5032001747498735E-5	DESIGN
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9968539417376228	WITHOUT_CLASSIFICATION	0.0031460582623772443	DESIGN
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9998386498111138	WITHOUT_CLASSIFICATION	1.6135018888620523E-4	DESIGN
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9998159014832451	WITHOUT_CLASSIFICATION	1.8409851675494832E-4	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9986809623147567	WITHOUT_CLASSIFICATION	0.0013190376852433865	DESIGN
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999555598668377	WITHOUT_CLASSIFICATION	4.4440133162252466E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994046669946032	WITHOUT_CLASSIFICATION	5.953330053968793E-4	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999303450767209	WITHOUT_CLASSIFICATION	6.965492327917052E-5	DESIGN
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.999707846106563	WITHOUT_CLASSIFICATION	2.9215389343691854E-4	DESIGN
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9981021127261737	WITHOUT_CLASSIFICATION	0.0018978872738264327	DESIGN
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994310039947335	WITHOUT_CLASSIFICATION	5.689960052665809E-4	DESIGN
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994868255484678	WITHOUT_CLASSIFICATION	5.131744515321661E-4	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9900154476153314	WITHOUT_CLASSIFICATION	0.009984552384668527	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9900154476153314	WITHOUT_CLASSIFICATION	0.009984552384668527	DESIGN
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999948737964195	WITHOUT_CLASSIFICATION	5.126203580445811E-6	DESIGN
// try "get"	WITHOUT_CLASSIFICATION	0.9995501145167356	WITHOUT_CLASSIFICATION	4.4988548326433585E-4	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.998142917790202	WITHOUT_CLASSIFICATION	0.0018570822097980055	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.998142917790202	WITHOUT_CLASSIFICATION	0.0018570822097980055	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9975275055139979	WITHOUT_CLASSIFICATION	0.0024724944860019787	DESIGN
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9979861431101404	WITHOUT_CLASSIFICATION	0.002013856889859555	DESIGN
// do not do anything	WITHOUT_CLASSIFICATION	0.9987134118963614	WITHOUT_CLASSIFICATION	0.0012865881036385007	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9996096080734347	WITHOUT_CLASSIFICATION	3.9039192656525125E-4	DESIGN
//cant instantiate	WITHOUT_CLASSIFICATION	0.9984530217872316	WITHOUT_CLASSIFICATION	0.0015469782127684579	DESIGN
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9995094310322342	WITHOUT_CLASSIFICATION	4.905689677656677E-4	DESIGN
// otherwise:	WITHOUT_CLASSIFICATION	0.9987190787985143	WITHOUT_CLASSIFICATION	0.0012809212014856185	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9988893110561531	WITHOUT_CLASSIFICATION	0.001110688943846813	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9996594827765554	WITHOUT_CLASSIFICATION	3.4051722344468434E-4	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9996594827765554	WITHOUT_CLASSIFICATION	3.4051722344468434E-4	DESIGN
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.8868724947222362	WITHOUT_CLASSIFICATION	0.11312750527776383	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9988683503337825	WITHOUT_CLASSIFICATION	0.001131649666217396	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9988683503337825	WITHOUT_CLASSIFICATION	0.001131649666217396	DESIGN
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9996001914926915	WITHOUT_CLASSIFICATION	3.998085073084389E-4	DESIGN
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9992702066385161	WITHOUT_CLASSIFICATION	7.297933614838323E-4	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9989185733406403	WITHOUT_CLASSIFICATION	0.0010814266593598032	DESIGN
// Get the caller	WITHOUT_CLASSIFICATION	0.9998110782765198	WITHOUT_CLASSIFICATION	1.8892172348014614E-4	DESIGN
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9998492846560469	WITHOUT_CLASSIFICATION	1.5071534395298092E-4	DESIGN
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9997965132487452	WITHOUT_CLASSIFICATION	2.0348675125492164E-4	DESIGN
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9354338082745792	WITHOUT_CLASSIFICATION	0.06456619172542082	DESIGN
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9989211832285216	WITHOUT_CLASSIFICATION	0.0010788167714783192	DESIGN
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9998301405912008	WITHOUT_CLASSIFICATION	1.6985940879919183E-4	DESIGN
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9964350309148161	WITHOUT_CLASSIFICATION	0.0035649690851838893	DESIGN
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9995634953136874	WITHOUT_CLASSIFICATION	4.365046863126846E-4	DESIGN
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9974191361812519	WITHOUT_CLASSIFICATION	0.0025808638187481275	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9973942661749204	WITHOUT_CLASSIFICATION	0.0026057338250796117	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9973942661749204	WITHOUT_CLASSIFICATION	0.0026057338250796117	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9973942661749204	WITHOUT_CLASSIFICATION	0.0026057338250796117	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9973942661749204	WITHOUT_CLASSIFICATION	0.0026057338250796117	DESIGN
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999334111261565	WITHOUT_CLASSIFICATION	6.658887384344385E-5	DESIGN
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9994131467765305	WITHOUT_CLASSIFICATION	5.868532234696114E-4	DESIGN
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9977011782144379	WITHOUT_CLASSIFICATION	0.0022988217855620997	DESIGN
//for MySQL	WITHOUT_CLASSIFICATION	0.9984818774310287	WITHOUT_CLASSIFICATION	0.0015181225689712367	DESIGN
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9997350990349935	WITHOUT_CLASSIFICATION	2.649009650065453E-4	DESIGN
//null caused some problems	WITHOUT_CLASSIFICATION	0.9942206610278127	WITHOUT_CLASSIFICATION	0.005779338972187317	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9997480163010295	WITHOUT_CLASSIFICATION	2.5198369897050447E-4	DESIGN
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.996790688165997	WITHOUT_CLASSIFICATION	0.003209311834002889	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.999975043098324	WITHOUT_CLASSIFICATION	2.495690167608078E-5	DESIGN
// we only release the connection	WITHOUT_CLASSIFICATION	0.9995791867670243	WITHOUT_CLASSIFICATION	4.2081323297575297E-4	DESIGN
// deprecated option...	WITHOUT_CLASSIFICATION	0.9945722879660077	WITHOUT_CLASSIFICATION	0.0054277120339923665	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9995668276492347	WITHOUT_CLASSIFICATION	4.3317235076535633E-4	DESIGN
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9983561446347388	WITHOUT_CLASSIFICATION	0.0016438553652611636	DESIGN
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9898875860778829	WITHOUT_CLASSIFICATION	0.010112413922117166	DESIGN
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9997694342296235	WITHOUT_CLASSIFICATION	2.3056577037643133E-4	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9995668276492347	WITHOUT_CLASSIFICATION	4.3317235076535633E-4	DESIGN
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9893811396186675	DESIGN	0.010618860381332517	WITHOUT_CLASSIFICATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.994508143440137	WITHOUT_CLASSIFICATION	0.005491856559862921	DESIGN
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999710051887938	WITHOUT_CLASSIFICATION	2.899481120624401E-5	DESIGN
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9987968475122334	WITHOUT_CLASSIFICATION	0.0012031524877665711	DESIGN
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9988610897773976	WITHOUT_CLASSIFICATION	0.001138910222602433	DESIGN
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9963145528232056	WITHOUT_CLASSIFICATION	0.003685447176794382	DESIGN
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9987603029281122	WITHOUT_CLASSIFICATION	0.0012396970718877456	DESIGN
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9993801805493603	WITHOUT_CLASSIFICATION	6.198194506396757E-4	DESIGN
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999671154678007	WITHOUT_CLASSIFICATION	3.2884532199346E-5	DESIGN
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.999553243253111	WITHOUT_CLASSIFICATION	4.4675674688903806E-4	DESIGN
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999671154678007	WITHOUT_CLASSIFICATION	3.2884532199346E-5	DESIGN
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999860608971002	WITHOUT_CLASSIFICATION	1.3939102899785335E-5	DESIGN
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9946542001194187	WITHOUT_CLASSIFICATION	0.00534579988058128	DESIGN
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9995176770210243	WITHOUT_CLASSIFICATION	4.8232297897561616E-4	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9997212584081213	WITHOUT_CLASSIFICATION	2.7874159187867074E-4	DESIGN
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9346009363098629	WITHOUT_CLASSIFICATION	0.0653990636901372	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9998994384368535	WITHOUT_CLASSIFICATION	1.0056156314661136E-4	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9997697045552937	WITHOUT_CLASSIFICATION	2.3029544470618053E-4	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9995332903078181	WITHOUT_CLASSIFICATION	4.6670969218185355E-4	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9997697045552937	WITHOUT_CLASSIFICATION	2.3029544470618053E-4	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9998877208661778	WITHOUT_CLASSIFICATION	1.1227913382210783E-4	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999622519542272	WITHOUT_CLASSIFICATION	3.774804577285812E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9993820481171068	WITHOUT_CLASSIFICATION	6.179518828930858E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999160286584672	WITHOUT_CLASSIFICATION	8.397134153285376E-5	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9998994384368535	WITHOUT_CLASSIFICATION	1.0056156314661136E-4	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9995332903078181	WITHOUT_CLASSIFICATION	4.6670969218185355E-4	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9998877208661778	WITHOUT_CLASSIFICATION	1.1227913382210783E-4	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9978347473424678	WITHOUT_CLASSIFICATION	0.002165252657532229	DESIGN
//return currentId;	WITHOUT_CLASSIFICATION	0.9975325274686353	WITHOUT_CLASSIFICATION	0.002467472531364787	DESIGN
//reset the id	WITHOUT_CLASSIFICATION	0.9988805937652988	WITHOUT_CLASSIFICATION	0.0011194062347011356	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
//reset the version	WITHOUT_CLASSIFICATION	0.9996103000186332	WITHOUT_CLASSIFICATION	3.896999813668074E-4	DESIGN
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9756601261765339	WITHOUT_CLASSIFICATION	0.024339873823466137	DESIGN
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9998001106764837	WITHOUT_CLASSIFICATION	1.9988932351634582E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9884951473971261	WITHOUT_CLASSIFICATION	0.011504852602873974	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999622519542272	WITHOUT_CLASSIFICATION	3.774804577285812E-5	DESIGN
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999721301087718	WITHOUT_CLASSIFICATION	2.7869891228214787E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999572344027747	WITHOUT_CLASSIFICATION	4.276559722531183E-5	DESIGN
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9993945407817119	WITHOUT_CLASSIFICATION	6.054592182881776E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9884951473971261	WITHOUT_CLASSIFICATION	0.011504852602873974	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994046669946032	WITHOUT_CLASSIFICATION	5.953330053968793E-4	DESIGN
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9994566068449954	WITHOUT_CLASSIFICATION	5.4339315500452E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9884951473971261	WITHOUT_CLASSIFICATION	0.011504852602873974	DESIGN
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9980521753464631	WITHOUT_CLASSIFICATION	0.0019478246535368695	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998756894452727	WITHOUT_CLASSIFICATION	1.2431055472729037E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994046669946032	WITHOUT_CLASSIFICATION	5.953330053968793E-4	DESIGN
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9960938969501615	WITHOUT_CLASSIFICATION	0.003906103049838599	DESIGN
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9997158618128608	WITHOUT_CLASSIFICATION	2.841381871391934E-4	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9998047090411826	WITHOUT_CLASSIFICATION	1.952909588174042E-4	DESIGN
// Collection Types:	WITHOUT_CLASSIFICATION	0.9985380820628915	WITHOUT_CLASSIFICATION	0.0014619179371084983	DESIGN
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999006735965058	WITHOUT_CLASSIFICATION	9.932640349411177E-5	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9990559430390833	WITHOUT_CLASSIFICATION	9.440569609166632E-4	DESIGN
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9996618435213309	WITHOUT_CLASSIFICATION	3.381564786691444E-4	DESIGN
//value is the entity name	WITHOUT_CLASSIFICATION	0.9965619316400643	WITHOUT_CLASSIFICATION	0.0034380683599356376	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9991688629701904	WITHOUT_CLASSIFICATION	8.311370298096557E-4	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9989185733406403	WITHOUT_CLASSIFICATION	0.0010814266593598032	DESIGN
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9965619316400643	WITHOUT_CLASSIFICATION	0.0034380683599356376	DESIGN
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9875036661019685	WITHOUT_CLASSIFICATION	0.012496333898031531	DESIGN
//tolerates nulls	WITHOUT_CLASSIFICATION	0.998008445189503	WITHOUT_CLASSIFICATION	0.0019915548104969564	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9977011782144379	WITHOUT_CLASSIFICATION	0.0022988217855620997	DESIGN
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9971838411001225	WITHOUT_CLASSIFICATION	0.00281615889987765	DESIGN
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9997793750927831	WITHOUT_CLASSIFICATION	2.206249072169144E-4	DESIGN
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9995961728586591	WITHOUT_CLASSIFICATION	4.038271413408935E-4	DESIGN
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.8329478573074733	WITHOUT_CLASSIFICATION	0.1670521426925267	DESIGN
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9972165523497697	WITHOUT_CLASSIFICATION	0.002783447650230402	DESIGN
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9824082794568075	WITHOUT_CLASSIFICATION	0.01759172054319251	DESIGN
//TODO!!!	WITHOUT_CLASSIFICATION	0.9989185733406403	WITHOUT_CLASSIFICATION	0.0010814266593598032	DESIGN
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9996993278137165	WITHOUT_CLASSIFICATION	3.0067218628360387E-4	DESIGN
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9996993278137165	WITHOUT_CLASSIFICATION	3.0067218628360387E-4	DESIGN
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9982204967555155	WITHOUT_CLASSIFICATION	0.0017795032444846038	DESIGN
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9989547658964233	WITHOUT_CLASSIFICATION	0.0010452341035767964	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9989185733406403	WITHOUT_CLASSIFICATION	0.0010814266593598032	DESIGN
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999928030214748	WITHOUT_CLASSIFICATION	7.196978525228033E-6	DESIGN
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999546727154586	WITHOUT_CLASSIFICATION	4.5327284541406016E-5	DESIGN
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999053914405384	WITHOUT_CLASSIFICATION	9.4608559461709E-5	DESIGN
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9977230191865112	WITHOUT_CLASSIFICATION	0.0022769808134887504	DESIGN
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9998996605460581	WITHOUT_CLASSIFICATION	1.003394539420089E-4	DESIGN
//TODO	WITHOUT_CLASSIFICATION	0.5400458007079267	WITHOUT_CLASSIFICATION	0.4599541992920732	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9998211589354381	WITHOUT_CLASSIFICATION	1.788410645619315E-4	DESIGN
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9982140355144993	WITHOUT_CLASSIFICATION	0.0017859644855007615	DESIGN
//cache this	WITHOUT_CLASSIFICATION	0.9800183399739247	WITHOUT_CLASSIFICATION	0.01998166002607524	DESIGN
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9950603213896584	WITHOUT_CLASSIFICATION	0.004939678610341593	DESIGN
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9996108866950495	WITHOUT_CLASSIFICATION	3.8911330495038744E-4	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9997699813000586	WITHOUT_CLASSIFICATION	2.3001869994151425E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994046669946032	WITHOUT_CLASSIFICATION	5.953330053968793E-4	DESIGN
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9993570434398347	WITHOUT_CLASSIFICATION	6.429565601653085E-4	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9953350459231897	WITHOUT_CLASSIFICATION	0.004664954076810384	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9953350459231897	WITHOUT_CLASSIFICATION	0.004664954076810384	DESIGN
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999960062371509	WITHOUT_CLASSIFICATION	3.993762849001293E-6	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9990559430390833	WITHOUT_CLASSIFICATION	9.440569609166632E-4	DESIGN
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.979346768517793	WITHOUT_CLASSIFICATION	0.020653231482206953	DESIGN
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999612353411772	WITHOUT_CLASSIFICATION	3.8764658822869716E-5	DESIGN
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9994177942228503	WITHOUT_CLASSIFICATION	5.822057771497816E-4	DESIGN
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.99978947674016	WITHOUT_CLASSIFICATION	2.1052325983992988E-4	DESIGN
//remember the uk value	WITHOUT_CLASSIFICATION	0.9989984892786102	WITHOUT_CLASSIFICATION	0.0010015107213897658	DESIGN
//NOOP	WITHOUT_CLASSIFICATION	0.9990042419245345	WITHOUT_CLASSIFICATION	9.957580754655058E-4	DESIGN
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9986603135773803	WITHOUT_CLASSIFICATION	0.001339686422619811	DESIGN
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9997548415374158	WITHOUT_CLASSIFICATION	2.4515846258422287E-4	DESIGN
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9938762680731188	WITHOUT_CLASSIFICATION	0.0061237319268812795	DESIGN
// return false;	WITHOUT_CLASSIFICATION	0.9984368747355465	WITHOUT_CLASSIFICATION	0.0015631252644535195	DESIGN
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9987524564898042	WITHOUT_CLASSIFICATION	0.0012475435101957815	DESIGN
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9998659521417963	WITHOUT_CLASSIFICATION	1.3404785820363295E-4	DESIGN
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9997425560508947	WITHOUT_CLASSIFICATION	2.5744394910529197E-4	DESIGN
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999985959545508	WITHOUT_CLASSIFICATION	1.4040454491781802E-6	DESIGN
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9980799268570169	WITHOUT_CLASSIFICATION	0.0019200731429831648	DESIGN
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9995572773528943	WITHOUT_CLASSIFICATION	4.42722647105725E-4	DESIGN
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999822395360355	WITHOUT_CLASSIFICATION	1.776046396456402E-5	DESIGN
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999513668427457	WITHOUT_CLASSIFICATION	4.86331572543648E-5	DESIGN
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9998919670737493	WITHOUT_CLASSIFICATION	1.080329262507579E-4	DESIGN
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9995445283414423	WITHOUT_CLASSIFICATION	4.5547165855778517E-4	DESIGN
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999217828987763	WITHOUT_CLASSIFICATION	7.821710122374933E-5	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9613041098650091	WITHOUT_CLASSIFICATION	0.03869589013499091	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.8628365946469769	WITHOUT_CLASSIFICATION	0.13716340535302318	DESIGN
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9997883076053019	WITHOUT_CLASSIFICATION	2.1169239469813592E-4	DESIGN
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.999979025192797	WITHOUT_CLASSIFICATION	2.097480720305991E-5	DESIGN
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9993693317455258	WITHOUT_CLASSIFICATION	6.306682544742852E-4	DESIGN
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9963929668844793	WITHOUT_CLASSIFICATION	0.003607033115520728	DESIGN
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9927020101815787	WITHOUT_CLASSIFICATION	0.007297989818421382	DESIGN
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9994668233325773	WITHOUT_CLASSIFICATION	5.331766674226875E-4	DESIGN
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9994489399540694	WITHOUT_CLASSIFICATION	5.51060045930526E-4	DESIGN
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999964908996142	WITHOUT_CLASSIFICATION	3.5091003858066553E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9991656484925295	WITHOUT_CLASSIFICATION	8.343515074705131E-4	DESIGN
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9987467317347625	WITHOUT_CLASSIFICATION	0.0012532682652374673	DESIGN
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9998751474148511	WITHOUT_CLASSIFICATION	1.2485258514890863E-4	DESIGN
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9995999367709393	WITHOUT_CLASSIFICATION	4.000632290607469E-4	DESIGN
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.99999125971225	WITHOUT_CLASSIFICATION	8.740287749961744E-6	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9988258229725187	WITHOUT_CLASSIFICATION	0.0011741770274813369	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9988258229725187	WITHOUT_CLASSIFICATION	0.0011741770274813369	DESIGN
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9996299042138328	WITHOUT_CLASSIFICATION	3.700957861672184E-4	DESIGN
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9996749012187215	WITHOUT_CLASSIFICATION	3.250987812785281E-4	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9985045173838685	WITHOUT_CLASSIFICATION	0.0014954826161315809	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9985045173838685	WITHOUT_CLASSIFICATION	0.0014954826161315809	DESIGN
// use default behavior	WITHOUT_CLASSIFICATION	0.9953057503735503	WITHOUT_CLASSIFICATION	0.004694249626449742	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9979663120202231	WITHOUT_CLASSIFICATION	0.002033687979776884	DESIGN
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.8259656081177507	DESIGN	0.17403439188224928	WITHOUT_CLASSIFICATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9998805613950056	WITHOUT_CLASSIFICATION	1.1943860499437624E-4	DESIGN
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9977728337268249	WITHOUT_CLASSIFICATION	0.002227166273175197	DESIGN
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9994046669946032	WITHOUT_CLASSIFICATION	5.953330053968793E-4	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999356103362607	WITHOUT_CLASSIFICATION	6.438966373940443E-5	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999356103362607	WITHOUT_CLASSIFICATION	6.438966373940443E-5	DESIGN
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9994046669946032	WITHOUT_CLASSIFICATION	5.953330053968793E-4	DESIGN
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9902917598243438	WITHOUT_CLASSIFICATION	0.00970824017565614	DESIGN
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9977772175313133	WITHOUT_CLASSIFICATION	0.0022227824686867777	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9987282637854231	WITHOUT_CLASSIFICATION	0.0012717362145769045	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9987282637854231	WITHOUT_CLASSIFICATION	0.0012717362145769045	DESIGN
// includes last '.'	WITHOUT_CLASSIFICATION	0.9998714742299096	WITHOUT_CLASSIFICATION	1.285257700902999E-4	DESIGN
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9996867405728507	WITHOUT_CLASSIFICATION	3.1325942714932094E-4	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9980670697527468	WITHOUT_CLASSIFICATION	0.0019329302472531713	DESIGN
// first time we find match!	WITHOUT_CLASSIFICATION	0.9994149602444962	WITHOUT_CLASSIFICATION	5.850397555038706E-4	DESIGN
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9990061726853369	WITHOUT_CLASSIFICATION	9.938273146631194E-4	DESIGN
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9902896505758689	WITHOUT_CLASSIFICATION	0.009710349424131048	DESIGN
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999321071592426	WITHOUT_CLASSIFICATION	6.789284075733821E-5	DESIGN
// the current iterator	WITHOUT_CLASSIFICATION	0.999850168082838	WITHOUT_CLASSIFICATION	1.4983191716187732E-4	DESIGN
// the last used iterator	WITHOUT_CLASSIFICATION	0.9574182595467112	WITHOUT_CLASSIFICATION	0.042581740453288754	DESIGN
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9995167928145678	WITHOUT_CLASSIFICATION	4.8320718543211973E-4	DESIGN
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9930338952436611	WITHOUT_CLASSIFICATION	0.006966104756338827	DESIGN
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9976245367727921	WITHOUT_CLASSIFICATION	0.0023754632272079686	DESIGN
//doable if needed	WITHOUT_CLASSIFICATION	0.998922846618282	WITHOUT_CLASSIFICATION	0.001077153381717989	DESIGN
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9800765574786369	WITHOUT_CLASSIFICATION	0.019923442521363067	DESIGN
// peek ahead	WITHOUT_CLASSIFICATION	0.9965133498597796	WITHOUT_CLASSIFICATION	0.0034866501402205305	DESIGN
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999111635494364	WITHOUT_CLASSIFICATION	8.883645056363583E-5	DESIGN
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9997088556751969	WITHOUT_CLASSIFICATION	2.911443248031009E-4	DESIGN
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999025123033198	WITHOUT_CLASSIFICATION	9.748769668018649E-5	DESIGN
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9998553435006303	WITHOUT_CLASSIFICATION	1.4465649936959267E-4	DESIGN
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.999551073543541	WITHOUT_CLASSIFICATION	4.489264564590181E-4	DESIGN
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9995254540181853	WITHOUT_CLASSIFICATION	4.7454598181475476E-4	DESIGN
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9958747728087816	WITHOUT_CLASSIFICATION	0.004125227191218444	DESIGN
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9943596749519267	WITHOUT_CLASSIFICATION	0.005640325048073358	DESIGN
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9970714602478605	WITHOUT_CLASSIFICATION	0.0029285397521394735	DESIGN
//faster?	WITHOUT_CLASSIFICATION	0.9989185733406403	WITHOUT_CLASSIFICATION	0.0010814266593598032	DESIGN
// the name of a class	WITHOUT_CLASSIFICATION	0.9982244419341437	WITHOUT_CLASSIFICATION	0.001775558065856202	DESIGN
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9987790975758746	WITHOUT_CLASSIFICATION	0.0012209024241253777	DESIGN
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9977011782144379	WITHOUT_CLASSIFICATION	0.0022988217855620997	DESIGN
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9995067730039727	WITHOUT_CLASSIFICATION	4.932269960272911E-4	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9989651144021459	WITHOUT_CLASSIFICATION	0.001034885597854115	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.6553802921298468	WITHOUT_CLASSIFICATION	0.3446197078701532	DESIGN
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9995029325448335	WITHOUT_CLASSIFICATION	4.970674551664332E-4	DESIGN
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9993475220554646	WITHOUT_CLASSIFICATION	6.524779445353933E-4	DESIGN
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9977011782144379	WITHOUT_CLASSIFICATION	0.0022988217855620997	DESIGN
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9739485206536014	WITHOUT_CLASSIFICATION	0.02605147934639862	DESIGN
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9977011782144379	WITHOUT_CLASSIFICATION	0.0022988217855620997	DESIGN
//readResolveObject	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9986603135773803	WITHOUT_CLASSIFICATION	0.001339686422619811	DESIGN
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9997001755638858	WITHOUT_CLASSIFICATION	2.998244361141795E-4	DESIGN
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9997025124597151	WITHOUT_CLASSIFICATION	2.974875402849212E-4	DESIGN
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9998667051530001	WITHOUT_CLASSIFICATION	1.3329484699977037E-4	DESIGN
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9995979857193656	WITHOUT_CLASSIFICATION	4.020142806343357E-4	DESIGN
// Write HTML header	WITHOUT_CLASSIFICATION	0.9915505351454024	WITHOUT_CLASSIFICATION	0.008449464854597669	DESIGN
// Handle actions	WITHOUT_CLASSIFICATION	0.9979918805995771	WITHOUT_CLASSIFICATION	0.002008119400422879	DESIGN
// Print page	WITHOUT_CLASSIFICATION	0.9982414383775808	WITHOUT_CLASSIFICATION	0.0017585616224191517	DESIGN
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9991528286883208	WITHOUT_CLASSIFICATION	8.471713116792138E-4	DESIGN
// End unit of work	WITHOUT_CLASSIFICATION	0.9993407489227291	WITHOUT_CLASSIFICATION	6.592510772709107E-4	DESIGN
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.5777816985848192	WITHOUT_CLASSIFICATION	0.4222183014151809	DESIGN
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9966132848168279	WITHOUT_CLASSIFICATION	0.003386715183172021	DESIGN
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999772591685385	WITHOUT_CLASSIFICATION	2.2740831461490247E-5	DESIGN
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9959142047508054	WITHOUT_CLASSIFICATION	0.0040857952491946655	DESIGN
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9978722783291266	WITHOUT_CLASSIFICATION	0.0021277216708733473	DESIGN
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9752446073946442	WITHOUT_CLASSIFICATION	0.02475539260535579	DESIGN
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.999658643266867	WITHOUT_CLASSIFICATION	3.4135673313299687E-4	DESIGN
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9996136437037529	WITHOUT_CLASSIFICATION	3.863562962470794E-4	DESIGN
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9997901834102998	WITHOUT_CLASSIFICATION	2.098165897002219E-4	DESIGN
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9995539978324923	WITHOUT_CLASSIFICATION	4.460021675075774E-4	DESIGN
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9993464210652863	WITHOUT_CLASSIFICATION	6.535789347137283E-4	DESIGN
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9982367254989502	WITHOUT_CLASSIFICATION	0.001763274501049835	DESIGN
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9998434158857119	WITHOUT_CLASSIFICATION	1.565841142880359E-4	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9998442847159106	WITHOUT_CLASSIFICATION	1.5571528408936492E-4	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9998442847159106	WITHOUT_CLASSIFICATION	1.5571528408936492E-4	DESIGN
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999998950201001	WITHOUT_CLASSIFICATION	1.0497989988347303E-7	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9997117512351659	WITHOUT_CLASSIFICATION	2.8824876483414427E-4	DESIGN
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9997915180656972	WITHOUT_CLASSIFICATION	2.084819343027277E-4	DESIGN
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9903725016053851	WITHOUT_CLASSIFICATION	0.009627498394614865	DESIGN
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999723505501026	WITHOUT_CLASSIFICATION	2.7649449897342348E-5	DESIGN
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9975091711093659	WITHOUT_CLASSIFICATION	0.0024908288906340488	DESIGN
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999975355230688	WITHOUT_CLASSIFICATION	2.4644769312187676E-6	DESIGN
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999987950219812	WITHOUT_CLASSIFICATION	1.2049780187984459E-6	DESIGN
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.998815308368692	WITHOUT_CLASSIFICATION	0.001184691631307929	DESIGN
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9998799892794276	WITHOUT_CLASSIFICATION	1.2001072057246519E-4	DESIGN
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999508067867523	WITHOUT_CLASSIFICATION	4.91932132477624E-5	DESIGN
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9894401396690773	WITHOUT_CLASSIFICATION	0.010559860330922755	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999994955819032	WITHOUT_CLASSIFICATION	5.044180968991536E-7	DESIGN
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9965406129616806	WITHOUT_CLASSIFICATION	0.003459387038319506	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.998291284135056	WITHOUT_CLASSIFICATION	0.001708715864943924	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.998291284135056	WITHOUT_CLASSIFICATION	0.001708715864943924	DESIGN
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9994658980391419	WITHOUT_CLASSIFICATION	5.341019608580415E-4	DESIGN
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9993277031657845	WITHOUT_CLASSIFICATION	6.722968342154773E-4	DESIGN
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9977343764281685	WITHOUT_CLASSIFICATION	0.0022656235718315045	DESIGN
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999019430706113	WITHOUT_CLASSIFICATION	9.805692938867789E-5	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999064820911308	WITHOUT_CLASSIFICATION	9.351790886921888E-5	DESIGN
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994194589924406	WITHOUT_CLASSIFICATION	5.805410075594081E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
//element //index -> id	WITHOUT_CLASSIFICATION	0.99980550444562	WITHOUT_CLASSIFICATION	1.944955543799874E-4	DESIGN
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9178720452232222	WITHOUT_CLASSIFICATION	0.08212795477677788	DESIGN
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999365771525378	WITHOUT_CLASSIFICATION	6.342284746215848E-5	DESIGN
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999982778398583	WITHOUT_CLASSIFICATION	1.7221601416901033E-6	DESIGN
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9998013114987179	WITHOUT_CLASSIFICATION	1.9868850128215476E-4	DESIGN
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9867837692011023	WITHOUT_CLASSIFICATION	0.013216230798897723	DESIGN
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.999973851423908	WITHOUT_CLASSIFICATION	2.6148576091938643E-5	DESIGN
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9997777423409561	WITHOUT_CLASSIFICATION	2.2225765904382942E-4	DESIGN
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9143853225407486	WITHOUT_CLASSIFICATION	0.08561467745925146	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9936722360864014	WITHOUT_CLASSIFICATION	0.0063277639135984835	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999485956581071	WITHOUT_CLASSIFICATION	5.1404341892965705E-5	DESIGN
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999821482107824	WITHOUT_CLASSIFICATION	1.7851789217624713E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.990340618074638	WITHOUT_CLASSIFICATION	0.009659381925361886	DESIGN
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999005051410511	WITHOUT_CLASSIFICATION	9.9494858948883E-5	DESIGN
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999405995355274	WITHOUT_CLASSIFICATION	5.940046447258066E-5	DESIGN
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999995738927683	WITHOUT_CLASSIFICATION	4.261072317218261E-7	DESIGN
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9962105869126773	WITHOUT_CLASSIFICATION	0.0037894130873226814	DESIGN
//Named Queries:	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9757433880903157	WITHOUT_CLASSIFICATION	0.024256611909684343	DESIGN
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9797007096736824	WITHOUT_CLASSIFICATION	0.020299290326317606	DESIGN
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999952079577774	WITHOUT_CLASSIFICATION	4.792042222681339E-6	DESIGN
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999473017199286	WITHOUT_CLASSIFICATION	5.2698280071470345E-5	DESIGN
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999111826410964	WITHOUT_CLASSIFICATION	8.881735890369892E-5	DESIGN
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999808328829347	WITHOUT_CLASSIFICATION	1.9167117065254142E-5	DESIGN
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9994015677639884	WITHOUT_CLASSIFICATION	5.984322360116539E-4	DESIGN
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999973632091552	WITHOUT_CLASSIFICATION	2.6367908447876667E-6	DESIGN
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9998775647740659	WITHOUT_CLASSIFICATION	1.224352259341731E-4	DESIGN
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9997787258183227	WITHOUT_CLASSIFICATION	2.2127418167718183E-4	DESIGN
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9613231452413791	WITHOUT_CLASSIFICATION	0.038676854758620996	DESIGN
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9997971680013179	WITHOUT_CLASSIFICATION	2.028319986820267E-4	DESIGN
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999756201896436	WITHOUT_CLASSIFICATION	2.4379810356398302E-5	DESIGN
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9997046801014067	WITHOUT_CLASSIFICATION	2.9531989859338524E-4	DESIGN
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9993622776579181	WITHOUT_CLASSIFICATION	6.377223420819731E-4	DESIGN
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9991418675122417	WITHOUT_CLASSIFICATION	8.581324877582833E-4	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9983378870630236	WITHOUT_CLASSIFICATION	0.0016621129369763313	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9983378870630236	WITHOUT_CLASSIFICATION	0.0016621129369763313	DESIGN
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999722809061111	WITHOUT_CLASSIFICATION	2.7719093888823697E-5	DESIGN
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9754009173066019	WITHOUT_CLASSIFICATION	0.02459908269339809	DESIGN
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9410635873871538	WITHOUT_CLASSIFICATION	0.058936412612846205	DESIGN
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9998638363410819	WITHOUT_CLASSIFICATION	1.3616365891803018E-4	DESIGN
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.7211155371812059	WITHOUT_CLASSIFICATION	0.27888446281879425	DESIGN
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9971526793939405	WITHOUT_CLASSIFICATION	0.002847320606059503	DESIGN
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9898608958014159	WITHOUT_CLASSIFICATION	0.01013910419858406	DESIGN
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9991495767264927	WITHOUT_CLASSIFICATION	8.504232735073616E-4	DESIGN
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.996113656198253	WITHOUT_CLASSIFICATION	0.0038863438017471136	DESIGN
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997988203859834	WITHOUT_CLASSIFICATION	2.0117961401647903E-4	DESIGN
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997721357546552	WITHOUT_CLASSIFICATION	2.2786424534484246E-4	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9727333526119334	WITHOUT_CLASSIFICATION	0.027266647388066615	DESIGN
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9976620050445348	WITHOUT_CLASSIFICATION	0.0023379949554651184	DESIGN
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999981628044327	WITHOUT_CLASSIFICATION	1.8371955674451093E-6	DESIGN
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9986969176087713	WITHOUT_CLASSIFICATION	0.0013030823912286594	DESIGN
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9974770082120631	WITHOUT_CLASSIFICATION	0.0025229917879368447	DESIGN
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9470409987501828	WITHOUT_CLASSIFICATION	0.05295900124981723	DESIGN
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.999927084578587	WITHOUT_CLASSIFICATION	7.291542141294324E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9996890442567382	WITHOUT_CLASSIFICATION	3.1095574326186836E-4	DESIGN
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999574421745672	WITHOUT_CLASSIFICATION	4.255782543280194E-5	DESIGN
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9997371832554426	WITHOUT_CLASSIFICATION	2.6281674455738826E-4	DESIGN
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9974365992012069	WITHOUT_CLASSIFICATION	0.002563400798793211	DESIGN
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9979393123997192	WITHOUT_CLASSIFICATION	0.00206068760028078	DESIGN
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9994725879119557	WITHOUT_CLASSIFICATION	5.274120880442238E-4	DESIGN
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9997550514311219	WITHOUT_CLASSIFICATION	2.44948568878105E-4	DESIGN
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9989490657973277	WITHOUT_CLASSIFICATION	0.0010509342026722818	DESIGN
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9973952067259513	WITHOUT_CLASSIFICATION	0.0026047932740488554	DESIGN
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999825429418833	WITHOUT_CLASSIFICATION	1.7457058116732153E-5	DESIGN
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.8883316587551616	DESIGN	0.11166834124483838	WITHOUT_CLASSIFICATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9575941315561196	WITHOUT_CLASSIFICATION	0.04240586844388032	DESIGN
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.972355251421898	WITHOUT_CLASSIFICATION	0.027644748578101962	DESIGN
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.999829711122295	WITHOUT_CLASSIFICATION	1.7028887770503603E-4	DESIGN
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.8635380298332622	WITHOUT_CLASSIFICATION	0.13646197016673772	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9996200647101476	WITHOUT_CLASSIFICATION	3.7993528985246075E-4	DESIGN
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999989438163862	WITHOUT_CLASSIFICATION	1.056183613763578E-6	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9963418203276149	WITHOUT_CLASSIFICATION	0.0036581796723852557	DESIGN
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9989730558954888	WITHOUT_CLASSIFICATION	0.0010269441045111804	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999979672232551	WITHOUT_CLASSIFICATION	2.032776744864567E-6	DESIGN
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9528554286525769	WITHOUT_CLASSIFICATION	0.04714457134742314	DESIGN
//explicit = true;	WITHOUT_CLASSIFICATION	0.9997808061518699	WITHOUT_CLASSIFICATION	2.1919384813021386E-4	DESIGN
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9991624460071757	WITHOUT_CLASSIFICATION	8.375539928242936E-4	DESIGN
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9991995232506308	WITHOUT_CLASSIFICATION	8.004767493692527E-4	DESIGN
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9963259220562166	WITHOUT_CLASSIFICATION	0.0036740779437833713	DESIGN
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999998843215004	WITHOUT_CLASSIFICATION	1.1567849964767131E-7	DESIGN
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9996945222508694	WITHOUT_CLASSIFICATION	3.054777491306466E-4	DESIGN
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9968980710981983	WITHOUT_CLASSIFICATION	0.0031019289018016922	DESIGN
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9981516553138438	WITHOUT_CLASSIFICATION	0.0018483446861563217	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999994955819032	WITHOUT_CLASSIFICATION	5.044180968991536E-7	DESIGN
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9970807060303825	WITHOUT_CLASSIFICATION	0.002919293969617499	DESIGN
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9997926621243356	WITHOUT_CLASSIFICATION	2.073378756645209E-4	DESIGN
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9992647771756199	WITHOUT_CLASSIFICATION	7.352228243801392E-4	DESIGN
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9992372520459907	WITHOUT_CLASSIFICATION	7.627479540093621E-4	DESIGN
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999975271448671	WITHOUT_CLASSIFICATION	2.4728551328614765E-6	DESIGN
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.999845822414909	WITHOUT_CLASSIFICATION	1.5417758509090587E-4	DESIGN
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9951646709752144	WITHOUT_CLASSIFICATION	0.004835329024785532	DESIGN
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999097160911271	WITHOUT_CLASSIFICATION	9.028390887292882E-5	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9994058678894711	WITHOUT_CLASSIFICATION	5.941321105290037E-4	DESIGN
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.999693088255654	WITHOUT_CLASSIFICATION	3.0691174434600203E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9997492181639936	WITHOUT_CLASSIFICATION	2.507818360063928E-4	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9975441609537213	WITHOUT_CLASSIFICATION	0.0024558390462785947	DESIGN
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9997614176559728	WITHOUT_CLASSIFICATION	2.385823440271652E-4	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9940311800597355	WITHOUT_CLASSIFICATION	0.005968819940264542	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996689160148938	WITHOUT_CLASSIFICATION	3.310839851062235E-4	DESIGN
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9996467264916076	WITHOUT_CLASSIFICATION	3.532735083924755E-4	DESIGN
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9980880031950375	WITHOUT_CLASSIFICATION	0.001911996804962516	DESIGN
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.998786337764546	WITHOUT_CLASSIFICATION	0.001213662235454092	DESIGN
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9997190548413237	WITHOUT_CLASSIFICATION	2.80945158676285E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996689160148938	WITHOUT_CLASSIFICATION	3.310839851062235E-4	DESIGN
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9814265523576735	WITHOUT_CLASSIFICATION	0.018573447642326487	DESIGN
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9790843056554941	DESIGN	0.020915694344505957	WITHOUT_CLASSIFICATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999805354950412	WITHOUT_CLASSIFICATION	1.9464504958857973E-5	DESIGN
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9991032245501423	WITHOUT_CLASSIFICATION	8.967754498576496E-4	DESIGN
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9992817393868694	WITHOUT_CLASSIFICATION	7.182606131306259E-4	DESIGN
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9384696167136755	WITHOUT_CLASSIFICATION	0.06153038328632461	DESIGN
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9992703243663306	WITHOUT_CLASSIFICATION	7.296756336693398E-4	DESIGN
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9857853945150445	WITHOUT_CLASSIFICATION	0.014214605484955347	DESIGN
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9981283267512837	WITHOUT_CLASSIFICATION	0.00187167324871629	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9970395137339797	WITHOUT_CLASSIFICATION	0.002960486266020218	DESIGN
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9954419723905337	WITHOUT_CLASSIFICATION	0.004558027609466332	DESIGN
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9172662293351057	WITHOUT_CLASSIFICATION	0.0827337706648943	DESIGN
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9998822190120784	WITHOUT_CLASSIFICATION	1.1778098792162808E-4	DESIGN
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9998172720497094	WITHOUT_CLASSIFICATION	1.827279502906079E-4	DESIGN
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9997732796746404	WITHOUT_CLASSIFICATION	2.267203253596323E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9613041098650091	WITHOUT_CLASSIFICATION	0.03869589013499091	DESIGN
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999128742920677	WITHOUT_CLASSIFICATION	8.712570793235985E-5	DESIGN
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999610955881418	WITHOUT_CLASSIFICATION	3.8904411858120625E-5	DESIGN
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9986299912145269	WITHOUT_CLASSIFICATION	0.0013700087854730772	DESIGN
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.8374830634207961	WITHOUT_CLASSIFICATION	0.1625169365792039	DESIGN
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9989420986665708	WITHOUT_CLASSIFICATION	0.0010579013334291168	DESIGN
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999985744897205	WITHOUT_CLASSIFICATION	1.4255102795256132E-6	DESIGN
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.978652079047936	WITHOUT_CLASSIFICATION	0.021347920952063965	DESIGN
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9981842753303394	WITHOUT_CLASSIFICATION	0.0018157246696605595	DESIGN
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9997121758877017	WITHOUT_CLASSIFICATION	2.878241122983104E-4	DESIGN
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999898151803188	WITHOUT_CLASSIFICATION	1.0184819681137426E-5	DESIGN
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9732505088290605	WITHOUT_CLASSIFICATION	0.026749491170939523	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9859591188340591	WITHOUT_CLASSIFICATION	0.014040881165940908	DESIGN
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.5563641618873457	DESIGN	0.4436358381126544	WITHOUT_CLASSIFICATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9949574178705883	WITHOUT_CLASSIFICATION	0.005042582129411664	DESIGN
// and perform the load	WITHOUT_CLASSIFICATION	0.9980835226843111	WITHOUT_CLASSIFICATION	0.0019164773156888134	DESIGN
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.999721628332404	WITHOUT_CLASSIFICATION	2.7837166759612093E-4	DESIGN
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9991571779893477	WITHOUT_CLASSIFICATION	8.428220106523162E-4	DESIGN
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9986422706719613	WITHOUT_CLASSIFICATION	0.0013577293280386555	DESIGN
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999767862295895	WITHOUT_CLASSIFICATION	2.3213770410489608E-5	DESIGN
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9864608815099147	WITHOUT_CLASSIFICATION	0.013539118490085211	DESIGN
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.998534599301834	WITHOUT_CLASSIFICATION	0.0014654006981659497	DESIGN
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9767938686868815	WITHOUT_CLASSIFICATION	0.023206131313118526	DESIGN
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9989924029152435	WITHOUT_CLASSIFICATION	0.001007597084756479	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999834382803047	WITHOUT_CLASSIFICATION	1.6561719695337908E-5	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9994959894570944	WITHOUT_CLASSIFICATION	5.040105429056402E-4	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9994959894570944	WITHOUT_CLASSIFICATION	5.040105429056402E-4	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9991794752758053	WITHOUT_CLASSIFICATION	8.205247241947134E-4	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9998036964510062	WITHOUT_CLASSIFICATION	1.9630354899383194E-4	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999665403403902	WITHOUT_CLASSIFICATION	3.3459659609800445E-4	DESIGN
/**	WITHOUT_CLASSIFICATION	0.8537885680653805	DESIGN	0.14621143193461958	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9996096080734347	WITHOUT_CLASSIFICATION	3.9039192656525125E-4	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9996096080734347	WITHOUT_CLASSIFICATION	3.9039192656525125E-4	DESIGN
//        }	WITHOUT_CLASSIFICATION	0.995759908100134	WITHOUT_CLASSIFICATION	0.004240091899865959	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9983085700627294	WITHOUT_CLASSIFICATION	0.0016914299372705862	DESIGN
//	WITHOUT_CLASSIFICATION	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999639602354171	WITHOUT_CLASSIFICATION	3.6039764582840486E-5	DESIGN
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999911468026595	WITHOUT_CLASSIFICATION	8.85319734041049E-6	DESIGN
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9998403723991972	WITHOUT_CLASSIFICATION	1.5962760080277298E-4	DESIGN
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999293234451198	WITHOUT_CLASSIFICATION	7.067655488024215E-5	DESIGN
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9981382628466736	WITHOUT_CLASSIFICATION	0.0018617371533263048	DESIGN
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9435371775769394	DESIGN	0.05646282242306053	WITHOUT_CLASSIFICATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998295412209259	WITHOUT_CLASSIFICATION	1.704587790739847E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998295412209259	WITHOUT_CLASSIFICATION	1.704587790739847E-4	DESIGN
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9996467264916076	WITHOUT_CLASSIFICATION	3.532735083924755E-4	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9987190787985143	WITHOUT_CLASSIFICATION	0.0012809212014856185	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9996239275791058	WITHOUT_CLASSIFICATION	3.7607242089425714E-4	DESIGN
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9983563256471273	WITHOUT_CLASSIFICATION	0.0016436743528726431	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994046669946032	WITHOUT_CLASSIFICATION	5.953330053968793E-4	DESIGN
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.8848920071611954	WITHOUT_CLASSIFICATION	0.11510799283880462	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9845844731401434	WITHOUT_CLASSIFICATION	0.015415526859856683	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994046669946032	WITHOUT_CLASSIFICATION	5.953330053968793E-4	DESIGN
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9997900409171877	WITHOUT_CLASSIFICATION	2.0995908281224148E-4	DESIGN
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9995922892588908	WITHOUT_CLASSIFICATION	4.077107411092651E-4	DESIGN
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9908761101785665	WITHOUT_CLASSIFICATION	0.00912388982143348	DESIGN
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9887306623148193	WITHOUT_CLASSIFICATION	0.011269337685180658	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9970395137339797	WITHOUT_CLASSIFICATION	0.002960486266020218	DESIGN
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.7775256738578873	DESIGN	0.22247432614211277	WITHOUT_CLASSIFICATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9917537831826104	WITHOUT_CLASSIFICATION	0.008246216817389464	DESIGN
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999627594216137	WITHOUT_CLASSIFICATION	3.724057838633802E-5	DESIGN
//use the id column alias	WITHOUT_CLASSIFICATION	0.999967624567819	WITHOUT_CLASSIFICATION	3.237543218109107E-5	DESIGN
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999560504232196	WITHOUT_CLASSIFICATION	4.3949576780453716E-5	DESIGN
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9986603135773803	WITHOUT_CLASSIFICATION	0.001339686422619811	DESIGN
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9632797556411515	WITHOUT_CLASSIFICATION	0.036720244358848464	DESIGN
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9989101523616049	WITHOUT_CLASSIFICATION	0.0010898476383950418	DESIGN
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.99866724534566	WITHOUT_CLASSIFICATION	0.0013327546543399672	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9964943811581664	WITHOUT_CLASSIFICATION	0.00350561884183373	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9964943811581664	WITHOUT_CLASSIFICATION	0.00350561884183373	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9995668276492347	WITHOUT_CLASSIFICATION	4.3317235076535633E-4	DESIGN
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999438505517041	WITHOUT_CLASSIFICATION	5.6149448295778314E-5	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9994376186845687	WITHOUT_CLASSIFICATION	5.62381315431379E-4	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9990404271542462	WITHOUT_CLASSIFICATION	9.595728457538561E-4	DESIGN
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.7760480271646416	WITHOUT_CLASSIFICATION	0.22395197283535836	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9997212584081213	WITHOUT_CLASSIFICATION	2.7874159187867074E-4	DESIGN
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999870910630059	WITHOUT_CLASSIFICATION	1.290893699419787E-5	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9978347473424678	WITHOUT_CLASSIFICATION	0.002165252657532229	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999548858235321	WITHOUT_CLASSIFICATION	4.5114176467829975E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9884951473971261	WITHOUT_CLASSIFICATION	0.011504852602873974	DESIGN
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9687493472372608	DESIGN	0.031250652762739244	WITHOUT_CLASSIFICATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.999976245684288	WITHOUT_CLASSIFICATION	2.3754315711933108E-5	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999771454533802	WITHOUT_CLASSIFICATION	2.2854546619744214E-5	DESIGN
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.8472287195297032	WITHOUT_CLASSIFICATION	0.1527712804702968	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9989765596909844	WITHOUT_CLASSIFICATION	0.0010234403090156395	DESIGN
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.96122435097742	WITHOUT_CLASSIFICATION	0.03877564902258009	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9982008202209284	WITHOUT_CLASSIFICATION	0.0017991797790717068	DESIGN
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9975554130937949	WITHOUT_CLASSIFICATION	0.0024445869062050714	DESIGN
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9951676031443846	WITHOUT_CLASSIFICATION	0.004832396855615496	DESIGN
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9982995236060369	WITHOUT_CLASSIFICATION	0.001700476393963036	DESIGN
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999995018011796	WITHOUT_CLASSIFICATION	4.981988203334387E-7	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9980670697527468	WITHOUT_CLASSIFICATION	0.0019329302472531713	DESIGN
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9068253241219367	WITHOUT_CLASSIFICATION	0.09317467587806327	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9975902019897313	WITHOUT_CLASSIFICATION	0.002409798010268786	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9975902019897313	WITHOUT_CLASSIFICATION	0.002409798010268786	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999818843802945	WITHOUT_CLASSIFICATION	1.811561970551983E-5	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9992168040725502	WITHOUT_CLASSIFICATION	7.831959274498333E-4	DESIGN
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9602582988149676	WITHOUT_CLASSIFICATION	0.03974170118503236	DESIGN
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9926677823036747	WITHOUT_CLASSIFICATION	0.007332217696325377	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9985908858641959	WITHOUT_CLASSIFICATION	0.0014091141358041545	DESIGN
// todo : what else to do here?	DESIGN	0.9953093526306969	WITHOUT_CLASSIFICATION	0.004690647369303226	DESIGN
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.63387144171951	WITHOUT_CLASSIFICATION	0.3661285582804899	DESIGN
// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. // The need for it is intended to be alleviated with future developement, thus it is // not defined as an Environment constant... // // it is used to control whether we should consult the JDBC metadata to determine // certain Settings default values; it is useful to *not* do this when the database // may not be available (mainly in tools usage).	DESIGN	0.9998294653355325	DESIGN	1.705346644675259E-4	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.8792493528736497	WITHOUT_CLASSIFICATION	0.12075064712635032	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.8792493528736497	WITHOUT_CLASSIFICATION	0.12075064712635032	DESIGN
// todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.995577281527728	WITHOUT_CLASSIFICATION	0.004422718472272098	DESIGN
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9999887823663016	WITHOUT_CLASSIFICATION	1.1217633698268604E-5	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction.  no idea...	DESIGN	0.9256278692400801	WITHOUT_CLASSIFICATION	0.07437213075991984	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9984016618215408	DESIGN	0.0015983381784591922	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9984016618215408	DESIGN	0.0015983381784591922	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9961176690176664	DESIGN	0.003882330982333495	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9961176690176664	DESIGN	0.003882330982333495	WITHOUT_CLASSIFICATION
// TODO: I considered validating TS cache config here, // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used	DESIGN	0.9998541527270086	DESIGN	1.4584727299136815E-4	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9773367190253989	DESIGN	0.022663280974601078	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9773367190253989	DESIGN	0.022663280974601078	WITHOUT_CLASSIFICATION
// TODO Why not use the timestamp in a DataVersion?	DESIGN	0.9949223176834099	DESIGN	0.005077682316590164	WITHOUT_CLASSIFICATION
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9999887823663016	WITHOUT_CLASSIFICATION	1.1217633698268604E-5	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction. no idea...	DESIGN	0.9277828675554084	WITHOUT_CLASSIFICATION	0.07221713244459162	DESIGN
//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9992398467234752	WITHOUT_CLASSIFICATION	7.601532765248864E-4	DESIGN
// turn hibernate.c3p0.* into c3p0.*, so c3p0 // gets a chance to see all hibernate.c3p0.*	DESIGN	0.9801589536746734	WITHOUT_CLASSIFICATION	0.019841046325326524	DESIGN
//TODO: this bit actually has to be called after all cascades! //      but since identity insert is called *synchronously*, //      instead of asynchronously as other actions, it isn't	DESIGN	0.8649955849444619	DESIGN	0.1350044150555381	WITHOUT_CLASSIFICATION
//TODO: reenable if we also fix the above todo	DESIGN	0.7261879674003834	WITHOUT_CLASSIFICATION	0.2738120325996166	DESIGN
//TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.9856016241467542	WITHOUT_CLASSIFICATION	0.014398375853245687	DESIGN
// we may be screwed here since the collection action is about to execute // and we do not know the final owner key value	DESIGN	0.9901417177468066	WITHOUT_CLASSIFICATION	0.009858282253193459	DESIGN
/** Create an action that will evict collection and entity regions based on queryspaces (table names).	DESIGN	0.923073948155085	DESIGN	0.07692605184491506	WITHOUT_CLASSIFICATION
// todo : what else to do here?	DESIGN	0.9953093526306969	WITHOUT_CLASSIFICATION	0.004690647369303226	DESIGN
// todo : modify the class definition if not already transformed...	DESIGN	0.9984918956875343	WITHOUT_CLASSIFICATION	0.0015081043124656962	DESIGN
// todo : what else to do here?	DESIGN	0.9953093526306969	WITHOUT_CLASSIFICATION	0.004690647369303226	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call start	DESIGN	0.9989909256901778	WITHOUT_CLASSIFICATION	0.0010090743098222833	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.9987422568087355	WITHOUT_CLASSIFICATION	0.001257743191264472	DESIGN
//TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9512404563019503	DESIGN	0.048759543698049725	WITHOUT_CLASSIFICATION
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.63387144171951	WITHOUT_CLASSIFICATION	0.3661285582804899	DESIGN
//TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.6034583778994557	WITHOUT_CLASSIFICATION	0.3965416221005444	DESIGN
//TODO: assumes all collections disassemble to an array!	DESIGN	0.9958214036794742	WITHOUT_CLASSIFICATION	0.004178596320525834	DESIGN
//TODO: reuse the PreLoadEvent	DESIGN	0.9410803677117998	WITHOUT_CLASSIFICATION	0.058919632288200276	DESIGN
// todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; // this should be refactored to instead expose a method to assemble a EntityEntry based on this // state for return.	DESIGN	0.7901315907947253	WITHOUT_CLASSIFICATION	0.20986840920527464	DESIGN
// todo : what is the implication of this?	DESIGN	0.9871297416261833	WITHOUT_CLASSIFICATION	0.012870258373816766	DESIGN
// use COUNT as the default.  This mimics the old behavior, although // NONE might be a better option moving forward in the case of callable	DESIGN	0.9853557071498521	WITHOUT_CLASSIFICATION	0.014644292850147829	DESIGN
/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a	DESIGN	0.9999725872800729	DESIGN	2.7412719927151972E-5	WITHOUT_CLASSIFICATION
//TODO: suck this into initLaziness!	DESIGN	0.6734790454304713	DESIGN	0.3265209545695287	WITHOUT_CLASSIFICATION
// we have to set up the table later!! yuck	DESIGN	0.9997992199981871	WITHOUT_CLASSIFICATION	2.007800018128811E-4	DESIGN
//TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.5529049749284538	WITHOUT_CLASSIFICATION	0.4470950250715463	DESIGN
// todo : again, how *should* this work for non-pojo entities?	DESIGN	0.9898570470963306	WITHOUT_CLASSIFICATION	0.010142952903669516	DESIGN
// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9948469987211206	DESIGN	0.005153001278879408	WITHOUT_CLASSIFICATION
// This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.6690635307813146	WITHOUT_CLASSIFICATION	0.33093646921868525	DESIGN
//TODO: bad implementation, cos it depends upon ordering of mapping doc //      fixing this requires that Collection/PersistentClass gain access //      to the Mappings reference from Configuration (or the filterDefinitions //      map directly) sometime during Configuration.buildSessionFactory //      (after all the types/filter-defs are known and before building //      persisters).	DESIGN	0.6591537706398677	WITHOUT_CLASSIFICATION	0.3408462293601323	DESIGN
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.9905692707331377	DESIGN	0.009430729266862191	WITHOUT_CLASSIFICATION
// hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9997166980633798	WITHOUT_CLASSIFICATION	2.8330193662017185E-4	DESIGN
//FIXME: get the PersistentClass	DESIGN	0.999489180529168	WITHOUT_CLASSIFICATION	5.108194708319085E-4	DESIGN
//FIXME: get the PersistentClass	DESIGN	0.999489180529168	WITHOUT_CLASSIFICATION	5.108194708319085E-4	DESIGN
//Icky workaround for MySQL bug:	DESIGN	0.9454794259201744	DESIGN	0.05452057407982565	WITHOUT_CLASSIFICATION
//TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.8368780943659082	WITHOUT_CLASSIFICATION	0.16312190563409176	DESIGN
//TODO possibly relax that	DESIGN	0.6520099934235403	DESIGN	0.34799000657645973	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.6520099934235403	DESIGN	0.34799000657645973	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.6520099934235403	DESIGN	0.34799000657645973	WITHOUT_CLASSIFICATION
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.9905692707331377	DESIGN	0.009430729266862191	WITHOUT_CLASSIFICATION
//use a degenerated strategy for backward compatibility	DESIGN	0.9982067704183717	WITHOUT_CLASSIFICATION	0.0017932295816282774	DESIGN
// Sets can be just a view of a part of another collection. // do we need to copy it to be sure it won't be changing // underneath us? // ie. this.set.addAll(set);	DESIGN	0.8037853305616345	WITHOUT_CLASSIFICATION	0.19621466943836555	DESIGN
//note that i parameter is now unused (delete it?)	DESIGN	0.8756967562421419	DESIGN	0.12430324375785805	WITHOUT_CLASSIFICATION
//just to help out during the load (ugly, i know)	DESIGN	0.9987798036140605	WITHOUT_CLASSIFICATION	0.001220196385939517	DESIGN
// TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.9270734970380066	WITHOUT_CLASSIFICATION	0.07292650296199336	DESIGN
// yick!  need this for proper serialization/deserialization handling...	DESIGN	0.8314881504821583	WITHOUT_CLASSIFICATION	0.1685118495178417	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.8792493528736497	WITHOUT_CLASSIFICATION	0.12075064712635032	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.8792493528736497	WITHOUT_CLASSIFICATION	0.12075064712635032	DESIGN
//yuck!	DESIGN	0.9989185733406403	WITHOUT_CLASSIFICATION	0.0010814266593598032	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.8792493528736497	WITHOUT_CLASSIFICATION	0.12075064712635032	DESIGN
// TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9998948447936876	DESIGN	1.051552063122794E-4	WITHOUT_CLASSIFICATION
//HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9976171024694096	WITHOUT_CLASSIFICATION	0.002382897530590406	DESIGN
// does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.9938244717210567	WITHOUT_CLASSIFICATION	0.006175528278943273	DESIGN
// sql-server, at least needed this dropped after use; strange!	DESIGN	0.9940684751387484	WITHOUT_CLASSIFICATION	0.005931524861251603	DESIGN
// todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.999496009148284	WITHOUT_CLASSIFICATION	5.039908517160159E-4	DESIGN
// TBD should this be varbinary($1)? //	DESIGN	0.9052783125498058	WITHOUT_CLASSIFICATION	0.09472168745019406	DESIGN
// is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9965905910633045	WITHOUT_CLASSIFICATION	0.003409408936695574	DESIGN
// xmlforest requires a new kind of function constructor	DESIGN	0.9987521464362977	WITHOUT_CLASSIFICATION	0.0012478535637022823	DESIGN
// Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9323035063190677	WITHOUT_CLASSIFICATION	0.06769649368093233	DESIGN
// Do we need to qualify index names with the schema name?	DESIGN	0.9910243176162299	WITHOUT_CLASSIFICATION	0.008975682383770197	DESIGN
// Does this dialect support the UNIQUE column syntax?	DESIGN	0.9813788666881492	WITHOUT_CLASSIFICATION	0.018621133311850755	DESIGN
// Does this dialect support check constraints?	DESIGN	0.9219079789801622	WITHOUT_CLASSIFICATION	0.07809202101983787	DESIGN
// Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9136805400384268	WITHOUT_CLASSIFICATION	0.08631945996157322	DESIGN
// Does this dialect support the FOR UPDATE syntax?	DESIGN	0.8908017906671417	WITHOUT_CLASSIFICATION	0.10919820933285829	DESIGN
// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.8908017906671417	WITHOUT_CLASSIFICATION	0.10919820933285829	DESIGN
// Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.7420438238824643	DESIGN	0.25795617611753574	WITHOUT_CLASSIFICATION
//note there is a wierd implementation in the client side	DESIGN	0.9999006726009495	WITHOUT_CLASSIFICATION	9.932739905057074E-5	DESIGN
//TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.9846347691434724	WITHOUT_CLASSIFICATION	0.015365230856527549	DESIGN
// todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.9986666952782649	WITHOUT_CLASSIFICATION	0.0013333047217350133	DESIGN
// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.9986704406275713	WITHOUT_CLASSIFICATION	0.0013295593724287947	DESIGN
//TODO: should orphans really be deleted during lock???	DESIGN	0.7937861155420307	DESIGN	0.20621388445796932	WITHOUT_CLASSIFICATION
// orphans should not be deleted during merge??	DESIGN	0.9789317028357305	WITHOUT_CLASSIFICATION	0.021068297164269546	DESIGN
// orphans should not be deleted during copy??	DESIGN	0.9789317028357305	WITHOUT_CLASSIFICATION	0.021068297164269546	DESIGN
//I suppose?	DESIGN	0.997119994814615	WITHOUT_CLASSIFICATION	0.0028800051853849185	DESIGN
//TODO: suck this logic into the collection!	DESIGN	0.605093539511914	WITHOUT_CLASSIFICATION	0.39490646048808603	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // get the ID from collection.getOwner()	DESIGN	0.9806382346562268	WITHOUT_CLASSIFICATION	0.019361765343773145	DESIGN
//TODO:refactor + make this method private	DESIGN	0.9831748023894006	WITHOUT_CLASSIFICATION	0.016825197610599404	DESIGN
// todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9938157816379973	WITHOUT_CLASSIFICATION	0.00618421836200272	DESIGN
//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.915208594761283	DESIGN	0.08479140523871698	WITHOUT_CLASSIFICATION
//TODO: better to pass the id in as an argument?	DESIGN	0.9894812569857426	WITHOUT_CLASSIFICATION	0.010518743014257377	DESIGN
// todo : potentially look at optimizing these two arrays	DESIGN	0.9929706138742568	WITHOUT_CLASSIFICATION	0.007029386125743178	DESIGN
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.999138414002014	DESIGN	8.615859979859933E-4	WITHOUT_CLASSIFICATION
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.999138414002014	DESIGN	8.615859979859933E-4	WITHOUT_CLASSIFICATION
//TODO: temporary	DESIGN	0.8310964201133781	DESIGN	0.16890357988662186	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.755409531282665	DESIGN	0.2445904687173351	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.755409531282665	DESIGN	0.2445904687173351	WITHOUT_CLASSIFICATION
//TODO: ugly here:	DESIGN	0.9515697236215392	DESIGN	0.0484302763784607	WITHOUT_CLASSIFICATION
//this is kinda the best we can do...	DESIGN	0.9846255353841081	WITHOUT_CLASSIFICATION	0.015374464615891906	DESIGN
//TODO: this needn't exclude subclasses...	DESIGN	0.742416893492064	WITHOUT_CLASSIFICATION	0.2575831065079361	DESIGN
// todo : need map? the prob is a proper key, right?	DESIGN	0.7051563746250364	DESIGN	0.2948436253749636	WITHOUT_CLASSIFICATION
// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9894542951004014	WITHOUT_CLASSIFICATION	0.010545704899598543	DESIGN
// todo : hack!!! // NOTE : here we cleanup the load context when we have no more local // LCE entries.  This "works" for the time being because really // only the collection load contexts are implemented.  Long term, // this cleanup should become part of the "close result set" // processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9974936816879432	WITHOUT_CLASSIFICATION	0.002506318312056729	DESIGN
// todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.963647053769891	DESIGN	0.03635294623010912	WITHOUT_CLASSIFICATION
// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.5694819920465701	WITHOUT_CLASSIFICATION	0.43051800795342987	DESIGN
// TODO : add this info to the translator and aggregate it here...	DESIGN	0.6583073526334395	DESIGN	0.34169264736656046	WITHOUT_CLASSIFICATION
//TODO: move into collection type, so we can use polymorphism!	DESIGN	0.9371997833176471	DESIGN	0.06280021668235287	WITHOUT_CLASSIFICATION
// todo : should we check the current isolation mode explicitly?	DESIGN	0.9986666952782649	WITHOUT_CLASSIFICATION	0.0013333047217350153	DESIGN
//TODO: suck into event class	DESIGN	0.5933928600121353	WITHOUT_CLASSIFICATION	0.4066071399878647	DESIGN
//do we even really need this? the update will fail anyway....	DESIGN	0.9502234694731776	WITHOUT_CLASSIFICATION	0.049776530526822425	DESIGN
//hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.7788167343186684	WITHOUT_CLASSIFICATION	0.22118326568133162	DESIGN
//TODO: would it be better to do a refresh from db?	DESIGN	0.8601186713357749	DESIGN	0.139881328664225	WITHOUT_CLASSIFICATION
//TODO: we use two visitors here, inefficient!	DESIGN	0.7781424090834872	WITHOUT_CLASSIFICATION	0.22185759091651286	DESIGN
// this class has no proxies (so do a shortcut)	DESIGN	0.9925196870517643	WITHOUT_CLASSIFICATION	0.007480312948235764	DESIGN
//PostLoad is needed for EJB3 //TODO: reuse the PostLoadEvent...	DESIGN	0.9629761513802834	WITHOUT_CLASSIFICATION	0.03702384861971658	DESIGN
//TODO: put this stuff back in to read snapshot from //      the second-level cache (needs some extra work)	DESIGN	0.5856822231625044	WITHOUT_CLASSIFICATION	0.4143177768374956	DESIGN
// null or brand new collection // this will also (inefficiently) handle arrays, which have // no snapshot, so we can't do any better	DESIGN	0.9980748201686633	WITHOUT_CLASSIFICATION	0.0019251798313367093	DESIGN
//TODO: is this 100% correct?	DESIGN	0.9783229176719256	DESIGN	0.021677082328074432	WITHOUT_CLASSIFICATION
// TODO: iteratively get transient entities and retry merge until one of the following conditions: //       1) transientCopyCache.size() == 0 //       2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing // TODO: find out if retrying can add entities to copyCache (don't think it can...) // For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.9080824772136138	WITHOUT_CLASSIFICATION	0.0919175227863862	DESIGN
// entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9986205513044423	DESIGN	0.0013794486955576756	WITHOUT_CLASSIFICATION
//TODO: we should throw an exception if we really *know* for sure   //      that this is a detached instance, rather than just assuming //throw new StaleObjectStateException(entityName, id);	DESIGN	0.9248402522450274	DESIGN	0.07515974775497258	WITHOUT_CLASSIFICATION
// TODO : perhaps we should additionally require that the incoming entity // version be equivalent to the defined unsaved-value?	DESIGN	0.9892328758635075	DESIGN	0.010767124136492365	WITHOUT_CLASSIFICATION
// perhaps this should be an exception since it is only ever used // in the above method?	DESIGN	0.9752878781442401	DESIGN	0.024712121855759907	WITHOUT_CLASSIFICATION
// Put a placeholder in entries, so we don't recurse back and try to save() the // same object again. QUESTION: should this be done before onSave() is called? // likewise, should it be done before onUpdate()?	DESIGN	0.7526499691508458	DESIGN	0.2473500308491542	WITHOUT_CLASSIFICATION
//TODO: merge into one method!	DESIGN	0.5879323237598808	DESIGN	0.41206767624011925	WITHOUT_CLASSIFICATION
//TODO: refactor to .sql package	DESIGN	0.691377516754566	DESIGN	0.30862248324543384	WITHOUT_CLASSIFICATION
/** * Provides query splitting methods, which were originally in QueryTranslator. * <br> * TODO: This will need to be refactored at some point. * * @author josh */	DESIGN	0.9995412512513913	DESIGN	4.587487486086143E-4	WITHOUT_CLASSIFICATION
//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.8858611211812167	DESIGN	0.1141388788187833	WITHOUT_CLASSIFICATION
// todo : temporary //      needed because currently persister is the one that //      creates and renders the join fragments for inheritence //      hierarchies...	DESIGN	0.9992319561525962	WITHOUT_CLASSIFICATION	7.680438474037204E-4	DESIGN
// TODO : better way?!?	DESIGN	0.9248531545284765	DESIGN	0.07514684547152345	WITHOUT_CLASSIFICATION
// Not possible to simply re-use the versionPropertyNode here as it causes // OOM errors due to circularity :(	DESIGN	0.9949462353516252	WITHOUT_CLASSIFICATION	0.005053764648374772	DESIGN
//TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9979246127081706	WITHOUT_CLASSIFICATION	0.0020753872918293993	DESIGN
// TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9995998640146627	DESIGN	4.0013598533722374E-4	WITHOUT_CLASSIFICATION
// even here, if only properties mapped to the "base table" are referenced // in the set and where clauses, this could be handled by the BasicDelegate. // TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9999744152138678	DESIGN	2.5584786132184748E-5	WITHOUT_CLASSIFICATION
//TODO: switch statements are always evil! We already had bugs because  //      of forgotten token types. Use polymorphism for this!	DESIGN	0.9969892524944322	WITHOUT_CLASSIFICATION	0.0030107475055679107	DESIGN
// TODO : we really need to be able to deal with component paths here also; // this is difficult because the hql-sql grammar expects all those node types // to be FromReferenceNodes.  One potential fix here would be to convert the // IntoClause to just use a FromClause/FromElement combo (as a child of the // InsertStatement) and move all this logic into the InsertStatement.  That's // probably the easiest approach (read: least amount of changes to the grammar // and code), but just doesn't feel right as then an insert would contain // 2 from-clauses	DESIGN	0.9997473903292313	DESIGN	2.526096707686782E-4	WITHOUT_CLASSIFICATION
// really there are two situations where it should be ok to allow the insertion // into properties defined on a superclass: //      1) union-subclass with an abstract root entity //      2) discrim-subclass // // #1 is handled already because of the fact that // UnionSubclassPersister alreay always returns 0 // for this call... // // we may want to disallow it for discrim-subclass just for // consistency-sake (currently does not work anyway)...	DESIGN	0.839091296686882	DESIGN	0.16090870331311802	WITHOUT_CLASSIFICATION
//yuck!	DESIGN	0.9989185733406403	WITHOUT_CLASSIFICATION	0.0010814266593598032	DESIGN
// implicit joins are always(?) ok to reuse	DESIGN	0.9998312302514839	WITHOUT_CLASSIFICATION	1.6876974851612542E-4	DESIGN
// TODO : we may also want to check that the types here map to exactly one column/JDBC-type //      can't think of a situation where arithmetic expression between multi-column mappings //      makes any sense.	DESIGN	0.7400350102367536	WITHOUT_CLASSIFICATION	0.2599649897632464	DESIGN
// we do not know either type //BLIND GUESS!	DESIGN	0.982369934743472	WITHOUT_CLASSIFICATION	0.017630065256527994	DESIGN
//TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999986896405704	DESIGN	1.3103594296007391E-6	WITHOUT_CLASSIFICATION
// TODO: Replace this with a more elegant solution.	DESIGN	0.9990076725584838	DESIGN	9.92327441516268E-4	WITHOUT_CLASSIFICATION
// TODO: Should this really return null?  If not, figure out something better to do here.	DESIGN	0.9631311069287117	DESIGN	0.036868893071288295	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.8792493528736497	WITHOUT_CLASSIFICATION	0.12075064712635032	DESIGN
// yuck!	DESIGN	0.999519502116911	WITHOUT_CLASSIFICATION	4.804978830890155E-4	DESIGN
// ignore it; the incoming property could not be found so we // cannot be sure what to do here.  At the very least, the // safest is to simply not apply any dereference toggling...	DESIGN	0.573510150714705	WITHOUT_CLASSIFICATION	0.426489849285295	DESIGN
// TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.8416051604003503	DESIGN	0.15839483959964976	WITHOUT_CLASSIFICATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character // the trim-source	DESIGN	0.9908954210963347	WITHOUT_CLASSIFICATION	0.009104578903665296	DESIGN
// todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.5682785514067498	DESIGN	0.43172144859325023	WITHOUT_CLASSIFICATION
//TODO: is this a bit ugly?	DESIGN	0.9697093313282827	DESIGN	0.03029066867171728	WITHOUT_CLASSIFICATION
// Need a better way to define the suffixes here...	DESIGN	0.9533844459378505	WITHOUT_CLASSIFICATION	0.046615554062149435	DESIGN
// TODO: something much better - look at the type of the other expression! // TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9929895293809998	DESIGN	0.007010470619000199	WITHOUT_CLASSIFICATION
// TODO : what amount of significant digits need to be supported here? //      - from the DecimalFormat docs: //          [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.841668779113646	DESIGN	0.158331220886354	WITHOUT_CLASSIFICATION
// Needed the "clazz_" check to work around union-subclasses // TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9939242618871611	DESIGN	0.006075738112838844	WITHOUT_CLASSIFICATION
//We should actually rework this class to not implement Parser //and just process path expressions in the most convenient way.	DESIGN	0.8933078657053557	DESIGN	0.10669213429464426	WITHOUT_CLASSIFICATION
//The class is now way to complex!	DESIGN	0.9927840920018118	WITHOUT_CLASSIFICATION	0.0072159079981881	DESIGN
//TODO: get SQL rendering out of here	DESIGN	0.8437598161074956	WITHOUT_CLASSIFICATION	0.15624018389250435	DESIGN
//TODO: is there a better way?	DESIGN	0.8700638649663165	DESIGN	0.12993613503368354	WITHOUT_CLASSIFICATION
//Must be done here because of side-effect! yuck...	DESIGN	0.9990366236340472	WITHOUT_CLASSIFICATION	9.633763659528321E-4	DESIGN
//name from a super query (a bit inelegant that it shows up here)	DESIGN	0.9607850119242393	WITHOUT_CLASSIFICATION	0.039214988075760716	DESIGN
// We should reengineer this class so that, rather than the current ad - // hoc linear approach to processing a stream of tokens, we instead // build up a tree of expressions.	DESIGN	0.6566410883380489	WITHOUT_CLASSIFICATION	0.343358911661951	DESIGN
// this is ugly here, but needed because its a subquery	DESIGN	0.9948566614010544	WITHOUT_CLASSIFICATION	0.005143338598945589	DESIGN
// unhappy about this being public ... is there a better way?	DESIGN	0.8760148509177473	WITHOUT_CLASSIFICATION	0.1239851490822527	DESIGN
// Make sure this is a defined parameter and check the incoming value type // TODO: what should be the actual exception type here?	DESIGN	0.9999616859183196	DESIGN	3.8314081680544496E-5	WITHOUT_CLASSIFICATION
// TODO : this constructor form is *only* used from constructor directly below us; can it go away?	DESIGN	0.9999135268395949	DESIGN	8.647316040502406E-5	WITHOUT_CLASSIFICATION
//TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.9047426523098444	WITHOUT_CLASSIFICATION	0.0952573476901556	DESIGN
// TODO : should remove this exposure //  and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9811058733240687	DESIGN	0.018894126675931263	WITHOUT_CLASSIFICATION
// todo : should this get moved to PersistentContext? // logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.5910153628644497	WITHOUT_CLASSIFICATION	0.40898463713555033	DESIGN
// TODO: what type?	DESIGN	0.9501919365819961	DESIGN	0.049808063418003985	WITHOUT_CLASSIFICATION
// todo : should seriously consider not allowing a txn to begin from a child session //      can always route the request to the root session...	DESIGN	0.9697136200617738	WITHOUT_CLASSIFICATION	0.030286379938226214	DESIGN
// short-circuit for performance...	DESIGN	0.9993351391432371	WITHOUT_CLASSIFICATION	6.648608567628008E-4	DESIGN
// not absolutely necessary, but does help with aggressive release	DESIGN	0.9906267534165427	WITHOUT_CLASSIFICATION	0.009373246583457373	DESIGN
// TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.6531062932060376	WITHOUT_CLASSIFICATION	0.3468937067939625	DESIGN
//work around a bug in all known connection pools....	DESIGN	0.8586767999253678	WITHOUT_CLASSIFICATION	0.14132320007463212	DESIGN
// TODO : make this the factory for "entity mode related" sessions; // also means making this the target of transaction-synch and the // thing that knows how to cascade things between related sessions // // At that point, perhaps this thing is a "SessionContext", and // ConnectionManager is a "JDBCContext"?  A "SessionContext" should // live in the impl package...	DESIGN	0.999996321869085	DESIGN	3.678130914935281E-6	WITHOUT_CLASSIFICATION
//TODO: does this really need to be here? //      does the collection already have //      it's own up-to-date snapshot?	DESIGN	0.9980554924161829	DESIGN	0.0019445075838171763	WITHOUT_CLASSIFICATION
//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9678548018551222	DESIGN	0.032145198144877846	WITHOUT_CLASSIFICATION
/**	DESIGN	0.8537885680653805	DESIGN	0.14621143193461958	WITHOUT_CLASSIFICATION
// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; //      but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; //      currently this works in conjuction with the check on //      DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from //      cache with enabled filters). // EARLY EXIT!!!!!	DESIGN	0.5703552024638952	DESIGN	0.42964479753610496	WITHOUT_CLASSIFICATION
//for sets, we should end the collection load after resolving //the entities, since we might call hashCode() on the elements //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9940763144705914	DESIGN	0.0059236855294085644	WITHOUT_CLASSIFICATION
//This is not very nice (and quite slow):	DESIGN	0.5807836598803379	WITHOUT_CLASSIFICATION	0.419216340119662	DESIGN
//use of trim() here is ugly?	DESIGN	0.9950251822819361	WITHOUT_CLASSIFICATION	0.004974817718063938	DESIGN
//TODO: this is too conservative; if all preceding joins were  //      also inner joins, we could use an inner join here	DESIGN	0.9673279012723318	DESIGN	0.03267209872766815	WITHOUT_CLASSIFICATION
//TODO: look at the owning property and check that it  //      isn't lazy (by instrumentation)	DESIGN	0.8094728178168021	WITHOUT_CLASSIFICATION	0.19052718218319795	DESIGN
//TODO: inefficient	DESIGN	0.8019490651190653	WITHOUT_CLASSIFICATION	0.19805093488093464	DESIGN
// why does this matter?	DESIGN	0.969337929850111	WITHOUT_CLASSIFICATION	0.0306620701498889	DESIGN
// from the collection of associations, locate OJA for the // ManyToOne corresponding to this persister to fully // define the many-to-many; we need that OJA so that we can // use its alias here // TODO : is there a better way here?	DESIGN	0.999974091296977	DESIGN	2.5908703022889286E-5	WITHOUT_CLASSIFICATION
//TODO: this class depends directly upon CriteriaImpl,  //      in the impl package ... add a CriteriaImplementor  //      interface	DESIGN	0.9777493540416009	DESIGN	0.022250645958399106	WITHOUT_CLASSIFICATION
//TODO: add a CriteriaImplementor interface //      this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.7888645291085864	DESIGN	0.21113547089141368	WITHOUT_CLASSIFICATION
// TODO : not so sure this is needed...	DESIGN	0.7313681635787217	DESIGN	0.26863183642127836	WITHOUT_CLASSIFICATION
// meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9991894591922488	WITHOUT_CLASSIFICATION	8.105408077512829E-4	DESIGN
// TODO: The order in which entities are saved may matter (e.g., a particular transient entity //       may need to be saved before other transient entities can be saved; //       Keep retrying the batch of transient entities until either: //       1) there are no transient entities left in transientCopyCache //       or 2) no transient entities were saved in the last batch // For now, just run through the transient entities and retry the merge	DESIGN	0.9534294622839333	WITHOUT_CLASSIFICATION	0.04657053771606662	DESIGN
// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9982319159550817	DESIGN	0.0017680840449183959	WITHOUT_CLASSIFICATION
// todo : currently expects that the individual with expressions apply to the same sql table join. //      This may not be the case for joined-subclass where the property values //      might be coming from different tables in the joined hierarchy.  At some //      point we should expand this to support that capability.  However, that has //      some difficulties: //          1) the biggest is how to handle ORs when the individual comparisons are //              linked to different sql joins. //          2) here we would need to track each comparison individually, along with //              the join alias to which it applies and then pass that information //              back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.9045794142922857	WITHOUT_CLASSIFICATION	0.0954205857077142	DESIGN
// this function has a template -> restore output, apply the template and write the result out // TODO: Downcast to avoid using an interface?  Yuck.	DESIGN	0.988183670565356	WITHOUT_CLASSIFICATION	0.01181632943464406	DESIGN
// at some point the generate phase needs to be moved out of here, // because a single object-level DML might spawn multiple SQL DML // command executions. // // Possible to just move the sql generation for dml stuff, but for // consistency-sake probably best to just move responsiblity for // the generation phase completely into the delegates // (QueryLoader/StatementExecutor) themselves.  Also, not sure why // QueryLoader currently even has a dependency on this at all; does // it need it?  Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9999997379347906	DESIGN	2.6206520941092957E-7	WITHOUT_CLASSIFICATION
// get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.9985428669823632	WITHOUT_CLASSIFICATION	0.0014571330176368393	DESIGN
// TODO should we just collect these like with the collections above?	DESIGN	0.9972707468478249	DESIGN	0.002729253152175072	WITHOUT_CLASSIFICATION
// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification // see the discussion there in DynamicFilterParameterSpecification's javadocs as to why // it is currently not done that way.	DESIGN	0.9204640347333006	WITHOUT_CLASSIFICATION	0.0795359652666993	DESIGN
/////////////////////////////////////////////////////////////////////////// // USED ONLY FOR REGRESSION TESTING!!!! // // todo : obviously get rid of all this junk ;) ///////////////////////////////////////////////////////////////////////////	DESIGN	0.9993085326212875	WITHOUT_CLASSIFICATION	6.914673787124876E-4	DESIGN
//create an index on the key columns??	DESIGN	0.9999354674989946	WITHOUT_CLASSIFICATION	6.45325010053486E-5	DESIGN
//TODO: deprecated, remove eventually	DESIGN	0.9005536826025252	WITHOUT_CLASSIFICATION	0.09944631739747478	DESIGN
//create an index on the key columns??	DESIGN	0.9999354674989946	WITHOUT_CLASSIFICATION	6.45325010053486E-5	DESIGN
//TODO: improve this hack!	DESIGN	0.9237998667817233	DESIGN	0.07620013321827669	WITHOUT_CLASSIFICATION
// inheritance cycle detection (paranoid check)	DESIGN	0.9987599975712599	WITHOUT_CLASSIFICATION	0.0012400024287401413	DESIGN
//TODO: remove use of instanceof!	DESIGN	0.6343504754615678	WITHOUT_CLASSIFICATION	0.3656495245384323	DESIGN
//shortcut	DESIGN	0.9989185733406403	WITHOUT_CLASSIFICATION	0.0010814266593598032	DESIGN
//TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.9777678623640063	WITHOUT_CLASSIFICATION	0.02223213763599374	DESIGN
// create an index on the key columns??	DESIGN	0.9999529801419899	WITHOUT_CLASSIFICATION	4.701985801008055E-5	DESIGN
// todo : remove	DESIGN	0.9982904695340298	WITHOUT_CLASSIFICATION	0.001709530465970223	DESIGN
// todo : remove	DESIGN	0.9982904695340298	WITHOUT_CLASSIFICATION	0.001709530465970223	DESIGN
// todo : remove	DESIGN	0.9982904695340298	WITHOUT_CLASSIFICATION	0.001709530465970223	DESIGN
// todo : throw exception?	DESIGN	0.9994197349102064	WITHOUT_CLASSIFICATION	5.802650897936244E-4	DESIGN
// todo : throw exception?  maybe warn if not the same?	DESIGN	0.9988646046146982	WITHOUT_CLASSIFICATION	0.0011353953853018145	DESIGN
//TODO: make EntityPersister *not* depend on SessionFactoryImplementor //interface, if possible	DESIGN	0.5665669866526378	WITHOUT_CLASSIFICATION	0.43343301334736223	DESIGN
//TODO: is there a more elegant way than downcasting?	DESIGN	0.8084084428543247	DESIGN	0.19159155714567536	WITHOUT_CLASSIFICATION
// TODO: encapsulate the protected instance variables!	DESIGN	0.9329781108634538	DESIGN	0.06702188913654618	WITHOUT_CLASSIFICATION
// should indicate that we are processing an INSERT/UPDATE/DELETE // query with a subquery implied via a collection property // function. Here, we need to use the table name itself as the // qualification alias. // TODO : verify this works for all databases... // TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9360753605679015	DESIGN	0.06392463943209846	WITHOUT_CLASSIFICATION
//TODO: copy/paste from insertRows()	DESIGN	0.8424417647008612	WITHOUT_CLASSIFICATION	0.15755823529913882	DESIGN
//TODO: copy/paste from recreate()	DESIGN	0.8424417647008612	WITHOUT_CLASSIFICATION	0.15755823529913882	DESIGN
//should this interface extend PropertyMapping?	DESIGN	0.9504669314003049	WITHOUT_CLASSIFICATION	0.04953306859969507	DESIGN
//ie. the subquery! yuck!	DESIGN	0.9986164438308583	WITHOUT_CLASSIFICATION	0.0013835561691415723	DESIGN
//TODO: move to .sql package!!	DESIGN	0.6451056618213744	DESIGN	0.3548943381786255	WITHOUT_CLASSIFICATION
//TODO: code duplication with SingleTableEntityPersister	DESIGN	0.536058722041223	WITHOUT_CLASSIFICATION	0.4639412779587771	DESIGN
// TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9990276899815799	DESIGN	9.723100184202292E-4	WITHOUT_CLASSIFICATION
//TODO: *two* hashmap lookups here is one too many...	DESIGN	0.5340488369187548	DESIGN	0.4659511630812452	WITHOUT_CLASSIFICATION
//TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.536058722041223	WITHOUT_CLASSIFICATION	0.4639412779587771	DESIGN
//perhaps not really necessary...	DESIGN	0.987431386557961	WITHOUT_CLASSIFICATION	0.01256861344203902	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.9964620804390716	WITHOUT_CLASSIFICATION	0.0035379195609284834	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.9964620804390716	WITHOUT_CLASSIFICATION	0.0035379195609284834	DESIGN
//TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.8730442697425895	DESIGN	0.12695573025741047	WITHOUT_CLASSIFICATION
//TODO: optimize this better!	DESIGN	0.6094427571306156	WITHOUT_CLASSIFICATION	0.3905572428693845	DESIGN
//TODO: should we allow suffixes on these ?	DESIGN	0.994512005090113	DESIGN	0.005487994909887015	WITHOUT_CLASSIFICATION
//This is really ugly, but necessary:	DESIGN	0.995119477794889	WITHOUT_CLASSIFICATION	0.004880522205111029	DESIGN
//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.8853795065227255	DESIGN	0.11462049347727443	WITHOUT_CLASSIFICATION
//TODO: disable batch loading if lockMode > READ?	DESIGN	0.9993555383166629	WITHOUT_CLASSIFICATION	6.44461683337175E-4	DESIGN
// append the SQL to return the generated identifier //TODO: suck into Insert	DESIGN	0.9289505390197731	WITHOUT_CLASSIFICATION	0.0710494609802269	DESIGN
//TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.983008989153374	DESIGN	0.016991010846626044	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.7034027399558941	DESIGN	0.29659726004410586	WITHOUT_CLASSIFICATION
//TODO: move to .sql package, and refactor with similar things!	DESIGN	0.808169851999436	DESIGN	0.19183014800056403	WITHOUT_CLASSIFICATION
//TODO: implement functionality //  this might be painful to do here, as the "join post processing" for //  the subquery has already been performed (meaning that for //  theta-join dialects, the join conditions have already been moved //  over to the where clause).  A "simple" solution here might to //  perform "join post processing" once for the entire query (including //  any subqueries) at one fell swoop	DESIGN	0.9999368013838916	DESIGN	6.319861610845971E-5	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.9734100103797776	WITHOUT_CLASSIFICATION	0.0265899896202224	DESIGN
//kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9985367709676289	WITHOUT_CLASSIFICATION	0.0014632290323710671	DESIGN
//is this ok?	DESIGN	0.975331334634993	WITHOUT_CLASSIFICATION	0.02466866536500705	DESIGN
//TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9998655163425317	DESIGN	1.3448365746831362E-4	WITHOUT_CLASSIFICATION
//TODO: make this a bit nicer	DESIGN	0.9607580692348148	DESIGN	0.039241930765185326	WITHOUT_CLASSIFICATION
//Yuck:	DESIGN	0.9989185733406403	WITHOUT_CLASSIFICATION	0.0010814266593598032	DESIGN
//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.9992758101840712	DESIGN	7.241898159287083E-4	WITHOUT_CLASSIFICATION
/**	DESIGN	0.8537885680653805	DESIGN	0.14621143193461958	WITHOUT_CLASSIFICATION
// TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.9950084730476833	DESIGN	0.004991526952316697	WITHOUT_CLASSIFICATION
//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.8461066147828885	WITHOUT_CLASSIFICATION	0.15389338521711154	DESIGN
//TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.6832586563518225	WITHOUT_CLASSIFICATION	0.3167413436481774	DESIGN
// todo : YUCK!!!	DESIGN	0.9993900310064013	WITHOUT_CLASSIFICATION	6.099689935987342E-4	DESIGN
// TODO : YUCK!!!  fix after HHH-1907 is complete	DESIGN	0.9760180131419404	DESIGN	0.023981986858059703	WITHOUT_CLASSIFICATION
//TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.903035109051195	DESIGN	0.09696489094880505	WITHOUT_CLASSIFICATION
//TODO: design new lifecycle for ProxyFactory	DESIGN	0.9301421947096626	WITHOUT_CLASSIFICATION	0.06985780529033743	DESIGN
//TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.5724380997292555	WITHOUT_CLASSIFICATION	0.42756190027074453	DESIGN
// TODO: copy/paste from ManyToOneType	DESIGN	0.654625676719948	DESIGN	0.345374323280052	WITHOUT_CLASSIFICATION
//TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9535862039503885	DESIGN	0.04641379604961157	WITHOUT_CLASSIFICATION
//TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.9077732019081568	DESIGN	0.09222679809184325	WITHOUT_CLASSIFICATION
//TODO: implement caching?! proxies?!	DESIGN	0.6828968608397669	DESIGN	0.3171031391602331	WITHOUT_CLASSIFICATION
//TODO: is this right??	DESIGN	0.5808123371253012	DESIGN	0.4191876628746987	WITHOUT_CLASSIFICATION
// is this really necessary?	DESIGN	0.9463282904944965	WITHOUT_CLASSIFICATION	0.0536717095055036	DESIGN
//TODO: move these to a new JoinableType abstract class, //extended by EntityType and PersistentCollectionType:	DESIGN	0.8660718822809201	DESIGN	0.13392811771907986	WITHOUT_CLASSIFICATION
// TODO: this is very suboptimal for some subclasses (namely components), // since it does not take advantage of two-phase-load	DESIGN	0.5129537298241488	WITHOUT_CLASSIFICATION	0.4870462701758513	DESIGN
// worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.6539651067438574	DESIGN	0.34603489325614256	WITHOUT_CLASSIFICATION
// NOTE VERY HACKISH WORKAROUND!! // TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.901750431696987	DESIGN	0.09824956830301293	WITHOUT_CLASSIFICATION
// TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9033009117691599	DESIGN	0.09669908823083999	WITHOUT_CLASSIFICATION
// We would probably refactor to have LogicParser (builds a tree of simple // expressions connected by and, or, not), ExpressionParser (translates // from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like // FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much // the same thing it does now)	DESIGN	0.9915580586365729	WITHOUT_CLASSIFICATION	0.008441941363427009	DESIGN
//TODO: this is a little inefficient, don't need to do a whole //      deep replaceElements() call	DESIGN	0.9265259230599572	DESIGN	0.07347407694004289	WITHOUT_CLASSIFICATION
//workaround for WebLogic	DESIGN	0.9974300712066348	WITHOUT_CLASSIFICATION	0.0025699287933652016	DESIGN
//TODO: this dependency is kinda Bad	DESIGN	0.9512425404109259	DESIGN	0.04875745958907408	WITHOUT_CLASSIFICATION
//ick!	DESIGN	0.9989185733406403	WITHOUT_CLASSIFICATION	0.0010814266593598032	DESIGN
// short cut check...	DESIGN	0.9971478954380956	WITHOUT_CLASSIFICATION	0.002852104561904512	DESIGN
// todo : move to StringHelper?	DESIGN	0.9974417205832886	WITHOUT_CLASSIFICATION	0.0025582794167114467	DESIGN
//yukky! Don't you have subclasses for that! //TODO race conditions can happen here	DESIGN	0.847607518451248	WITHOUT_CLASSIFICATION	0.1523924815487519	DESIGN
//TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.9962261129411112	DESIGN	0.0037738870588887533	WITHOUT_CLASSIFICATION
// FIXME hack to work around fact that calling // Node added = root.addChild( fqn ); doesn't  // properly set the version on the node	DESIGN	0.9997608042549313	DESIGN	2.3919574506882295E-4	WITHOUT_CLASSIFICATION
// TODO: I considered validating the presence of the TS cache here, // but decided to defer unti getQueryCacheInstance() in case the  // cache is never actually used	DESIGN	0.9998564683420241	DESIGN	1.4353165797593618E-4	WITHOUT_CLASSIFICATION
//need to do that here rather than in the save event listener to let //the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.9402444872987697	DESIGN	0.05975551270123033	WITHOUT_CLASSIFICATION
//TODO: simply remove this override //      if we fix the above todos	DESIGN	0.9557109311816767	DESIGN	0.04428906881832338	WITHOUT_CLASSIFICATION
// This, is used by SessionFactoryImpl to hand to the generated SessionImpl; // was the only reason I could see that we cannot just use null as // Settings.cacheProvider	DESIGN	0.8385725672804446	WITHOUT_CLASSIFICATION	0.16142743271955529	DESIGN
// this is done here 'cos we might only know the type here (ugly!) // TODO: improve this a lot:	DESIGN	0.999908614496018	DESIGN	9.138550398203657E-5	WITHOUT_CLASSIFICATION
// todo : would love to have this work on a notification basis //    where the successful binding of an entity/subclass would //    emit a notification which the extendsQueue entries could //    react to...	DESIGN	0.9946219960149485	WITHOUT_CLASSIFICATION	0.005378003985051585	DESIGN
// TODO : not sure the best way to handle this. // The non-performant way :	DESIGN	0.7069584724305348	DESIGN	0.2930415275694652	WITHOUT_CLASSIFICATION
// would be better to use the element-type to determine // whether the old and the new are equal here; the problem being // we do not necessarily have access to the element type in all // cases	DESIGN	0.5321024575566089	WITHOUT_CLASSIFICATION	0.46789754244339105	DESIGN
// This next bit is to allow for both unsaved-value="negative" // and for "older" behavior where version number did not get // seeded if it was already set in the object // TODO: shift it into unsaved-value strategy	DESIGN	0.9999150302968967	DESIGN	8.496970310332806E-5	WITHOUT_CLASSIFICATION
// merges don't cascade to uninitialized collections //	DESIGN	0.9997610670193394	WITHOUT_CLASSIFICATION	2.389329806605547E-4	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // return collection.getOwner()	DESIGN	0.9852693330941938	WITHOUT_CLASSIFICATION	0.014730666905806045	DESIGN
//it is possible that the tree-walking in OuterJoinLoader can get to //an association defined by a subclass, in which case the property-ref //might refer to a property defined on a subclass of the current class //in this case, the table name is not known - this temporary solution  //assumes that the property-ref refers to a property of the subclass //table that the association belongs to (a reasonable guess) //TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9999868149749255	DESIGN	1.318502507448248E-5	WITHOUT_CLASSIFICATION
// this only works because collection entries are kept in a sequenced // map by persistence context (maybe we should do like entities and // keep a separate sequences set...) //TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.867065716669953	DESIGN	0.13293428333004695	WITHOUT_CLASSIFICATION
// important, to account for newly saved entities in query // todo : some kind of check for new status...	DESIGN	0.9996556770267879	WITHOUT_CLASSIFICATION	3.443229732120215E-4	DESIGN
// brand new collection //TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.935104648085806	WITHOUT_CLASSIFICATION	0.06489535191419406	DESIGN
//TODO: if object was an uninitialized proxy, this is inefficient, //      resulting in two SQL selects	DESIGN	0.966227319977111	WITHOUT_CLASSIFICATION	0.033772680022889044	DESIGN
//before cascade! //TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9535862039503885	DESIGN	0.04641379604961157	WITHOUT_CLASSIFICATION
// TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.7229393944975235	DESIGN	0.2770606055024764	WITHOUT_CLASSIFICATION
// todo : need to find a clean way to handle the "event source" role // a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... // passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.9946384847974846	DESIGN	0.005361515202515328	WITHOUT_CLASSIFICATION
// todo : remove	DESIGN	0.9982904695340298	WITHOUT_CLASSIFICATION	0.001709530465970223	DESIGN
//aliasRefNode.resolve( false, false, aliasRefNode.getText() ); //TODO: is it kosher to do it here? //TODO: is it kosher to do it here?	DESIGN	0.6081956625624164	WITHOUT_CLASSIFICATION	0.3918043374375836	DESIGN
// No explicit select expression; render the id and properties // projection lists for every persister in the from clause into // a single 'token node'. //TODO: the only reason we need this stuff now is collection filters, //      we should get rid of derived select clause completely!	DESIGN	0.9641468495191502	DESIGN	0.03585315048084989	WITHOUT_CLASSIFICATION
// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; //      the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> //          the table info gotten here should really be self-contained (i.e., a class representation //          defining all the needed attributes), then we could then get an array of those	DESIGN	0.9982179221108093	DESIGN	0.0017820778891907121	WITHOUT_CLASSIFICATION
// TODO: get SQL rendering out of here, create an AST for the join expressions. // Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9890658176448394	WITHOUT_CLASSIFICATION	0.01093418235516056	DESIGN
// TODO : this really needs to be delayed unitl after we definitively know all node types // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DESIGN	0.9938162237795257	DESIGN	0.006183776220474283	WITHOUT_CLASSIFICATION
// TODO: Figure out a better way to get the FROM elements in a proper tree structure. // If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.9919660007064218	DESIGN	0.008033999293578164	WITHOUT_CLASSIFICATION
// work around that crazy issue where the tree contains // "empty" FromElements (no text); afaict, this is caused // by FromElementFactory.createCollectionJoin()	DESIGN	0.7525620014557908	WITHOUT_CLASSIFICATION	0.24743799854420925	DESIGN
//TODO: this class does too many things! we need a different //kind of path expression parser for each of the diffferent //ways in which path expressions can occur	DESIGN	0.9936270154091086	DESIGN	0.006372984590891443	WITHOUT_CLASSIFICATION
//real hacky... // used to count the nesting of parentheses	DESIGN	0.9897207011474205	WITHOUT_CLASSIFICATION	0.010279298852579449	DESIGN
// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; // currently not doable though because of the resultset-ref stuff...	DESIGN	0.6907615485302155	WITHOUT_CLASSIFICATION	0.3092384514697844	DESIGN
//for arrays, we should end the collection load before resolving //the entities, since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.865122040903626	DESIGN	0.1348779590963739	WITHOUT_CLASSIFICATION
// polymorphism not really handled completely correctly, // perhaps...well, actually its ok, assuming that the // entity name used in the lookup is the same as the // the one used here, which it will be	DESIGN	0.8045561420104231	WITHOUT_CLASSIFICATION	0.19544385798957686	DESIGN
// TODO: should "record" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9997039550831535	DESIGN	2.960449168466011E-4	WITHOUT_CLASSIFICATION
// VERY IMPORTANT!!!! - This class needs to be free of any static references // to any CGLIB or Javassist classes.  Otherwise, users will always need both // on their classpaths no matter which (if either) they use. // // Another option here would be to remove the Hibernate.isPropertyInitialized() // method and have the users go through the SessionFactory to get this information.	DESIGN	0.5052343078073229	DESIGN	0.494765692192677	WITHOUT_CLASSIFICATION
// TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).	DESIGN	0.9999999460576923	DESIGN	5.394230759110944E-8	WITHOUT_CLASSIFICATION
//for backward compatibility, allow a set with no not-null  //element columns, using all columns in the row locater SQL //TODO: create an implicit not null constraint on all cols?	DESIGN	0.9854903854871744	WITHOUT_CLASSIFICATION	0.014509614512825663	DESIGN
//SPACES //TODO: i'm not sure, but perhaps we should exclude //      abstract denormalized tables?	DESIGN	0.9921917566035157	DESIGN	0.007808243396484221	WITHOUT_CLASSIFICATION
//workaround, for backward compatibility of sets with no //not-null columns, assume all columns are used in the //row locator SQL	DESIGN	0.9992279167212068	WITHOUT_CLASSIFICATION	7.720832787932257E-4	DESIGN
//note that this method could easily be moved up to BasicEntityPersister, //if we ever needed to reuse it from other subclasses	DESIGN	0.7122615351219818	DESIGN	0.28773846487801813	WITHOUT_CLASSIFICATION
//index += getPropertyColumnSpan( i ); //TODO:  this is kinda slow...	DESIGN	0.6109369717592563	WITHOUT_CLASSIFICATION	0.3890630282407437	DESIGN
//TODO: need some caching scheme? really comes down to decision  //      regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.6183686958123706	WITHOUT_CLASSIFICATION	0.3816313041876293	DESIGN
// TODO: here is why we need to make bytecode provider global :( // TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999999884319216	DESIGN	1.1568078385976041E-8	WITHOUT_CLASSIFICATION
//TODO: Yuck! This is not quite good enough, it's a quick //hack around the problem of having a to-one association //that refers to an embedded component:	DESIGN	0.9997882047264366	DESIGN	2.1179527356342796E-4	WITHOUT_CLASSIFICATION
// for DOM4J "collections" only // TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.9685033699004599	DESIGN	0.03149663009954011	WITHOUT_CLASSIFICATION
// would be great to move all this below here into another method that could also be used // from the new scrolling stuff. // // Would need to change the way the max-row stuff is handled (i.e. behind an interface) so // that I could do the control breaking at the means to know when to stop	DESIGN	0.9999999882495113	DESIGN	1.175048863875857E-8	WITHOUT_CLASSIFICATION
//TODO: can we *always* use the "null property" approach for everything?	DESIGN	0.5972568162266806	DESIGN	0.40274318377331947	WITHOUT_CLASSIFICATION
//polymorphism comment above	DESIGN	0.9999257458701764	WITHOUT_CLASSIFICATION	7.425412982366314E-5	DESIGN
// some messy, complex stuff here, since createCriteria() can take an // aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999956474233086	WITHOUT_CLASSIFICATION	4.352576691407417E-6	DESIGN
//TODO: really bad, evil hack to fix!!!	DESIGN	0.9999923966916594	DESIGN	7.603308340606235E-6	WITHOUT_CLASSIFICATION
// ugly hack for cases like "elements(foo.bar.collection)" // (multi-part path expression ending in elements or indices)	DESIGN	0.9966853695287649	DESIGN	0.003314630471235113	WITHOUT_CLASSIFICATION
// try block is a hack around fact that currently tuplizers are not // given the opportunity to resolve a subclass entity name.  this // allows the (we assume custom) interceptor the ability to // influence this decision if we were not able to based on the // given entityName	DESIGN	0.9999946292197713	DESIGN	5.370780228609728E-6	WITHOUT_CLASSIFICATION
/////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around "ghost" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially, look-ahead to the next FromElement that actually // writes something to the SQL	DESIGN	0.9511199278918675	DESIGN	0.04888007210813247	WITHOUT_CLASSIFICATION
//init the table here instead of earlier, so that we can get a quoted table name //TODO: would it be better to simply pass the qualified table name, instead of //      splitting it up into schema/catalog/table names	DESIGN	0.5139736544027946	WITHOUT_CLASSIFICATION	0.48602634559720526	DESIGN
// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method // I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so // if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.971691655702644	DESIGN	0.02830834429735602	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.7034027399558941	DESIGN	0.29659726004410586	WITHOUT_CLASSIFICATION
//TODO: ideally we need the construction of PropertyAccessor to take the following: //      1) EntityMode //      2) EntityMode-specific data (i.e., the classname for pojo entities) //      3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) // The easiest way, with the introduction of the new runtime-metamodel classes, would be the // the following predicates: //      1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a //          org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property //      2) What is now termed a "PropertyAccessor" stores any values needed from those two //          pieces of information //      3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with //          PropertyAccessor.getSetter()	DESIGN	0.7060551465356203	DESIGN	0.29394485346437976	WITHOUT_CLASSIFICATION
//TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9660409819533172	DESIGN	0.03395901804668276	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.9734100103797776	WITHOUT_CLASSIFICATION	0.0265899896202224	DESIGN
//TODO: make this a bit nicer	DESIGN	0.9607580692348148	DESIGN	0.039241930765185326	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8999224170885483	WITHOUT_CLASSIFICATION	0.10007758291145177	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8999224170885483	WITHOUT_CLASSIFICATION	0.10007758291145177	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8999224170885483	WITHOUT_CLASSIFICATION	0.10007758291145177	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8999224170885483	WITHOUT_CLASSIFICATION	0.10007758291145177	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8999224170885483	WITHOUT_CLASSIFICATION	0.10007758291145177	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8999224170885483	WITHOUT_CLASSIFICATION	0.10007758291145177	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8999224170885483	WITHOUT_CLASSIFICATION	0.10007758291145177	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8999224170885483	WITHOUT_CLASSIFICATION	0.10007758291145177	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9984016618215408	DESIGN	0.0015983381784591922	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9984016618215408	DESIGN	0.0015983381784591922	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9984016618215408	DESIGN	0.0015983381784591922	WITHOUT_CLASSIFICATION
// TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.997364857060727	DESIGN	0.002635142939272975	WITHOUT_CLASSIFICATION
