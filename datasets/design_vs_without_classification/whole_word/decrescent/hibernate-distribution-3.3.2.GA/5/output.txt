//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9986903592234493	WITHOUT_CLASSIFICATION	0.0013096407765506343	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9994360552883843	WITHOUT_CLASSIFICATION	5.639447116157488E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9994360552883843	WITHOUT_CLASSIFICATION	5.639447116157488E-4	DESIGN
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9989451684213978	WITHOUT_CLASSIFICATION	0.0010548315786022165	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9986467293478192	WITHOUT_CLASSIFICATION	0.001353270652180833	DESIGN
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999585414295061	WITHOUT_CLASSIFICATION	4.145857049387553E-5	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999995221126517	WITHOUT_CLASSIFICATION	4.7788734830432696E-6	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999995221126517	WITHOUT_CLASSIFICATION	4.7788734830432696E-6	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.999966719147909	WITHOUT_CLASSIFICATION	3.3280852091007684E-5	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999790365680981	WITHOUT_CLASSIFICATION	2.0963431901902912E-4	DESIGN
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9998223635618726	WITHOUT_CLASSIFICATION	1.7763643812728267E-4	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9987325418632399	WITHOUT_CLASSIFICATION	0.001267458136760057	DESIGN
// double	WITHOUT_CLASSIFICATION	0.999943066570433	WITHOUT_CLASSIFICATION	5.693342956692418E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.999943066570433	WITHOUT_CLASSIFICATION	5.693342956692418E-5	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9990439547386455	WITHOUT_CLASSIFICATION	9.56045261354433E-4	DESIGN
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9997014515406053	WITHOUT_CLASSIFICATION	2.9854845939475833E-4	DESIGN
// decode row selection...	WITHOUT_CLASSIFICATION	0.9993758962639723	WITHOUT_CLASSIFICATION	6.241037360276854E-4	DESIGN
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9971928697911757	WITHOUT_CLASSIFICATION	0.0028071302088243694	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.996367227098297	WITHOUT_CLASSIFICATION	0.0036327729017030614	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9993957443975086	WITHOUT_CLASSIFICATION	6.042556024913969E-4	DESIGN
// ROW ID	WITHOUT_CLASSIFICATION	0.9991944644968163	WITHOUT_CLASSIFICATION	8.055355031835928E-4	DESIGN
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9986467293478192	WITHOUT_CLASSIFICATION	0.001353270652180833	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9986467293478192	WITHOUT_CLASSIFICATION	0.001353270652180833	DESIGN
/*	WITHOUT_CLASSIFICATION	0.8998848208396077	WITHOUT_CLASSIFICATION	0.10011517916039232	DESIGN
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9986887813791575	WITHOUT_CLASSIFICATION	0.0013112186208424708	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9986467293478192	WITHOUT_CLASSIFICATION	0.001353270652180833	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9985487392505541	WITHOUT_CLASSIFICATION	0.0014512607494458893	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9986749817689835	WITHOUT_CLASSIFICATION	0.0013250182310165597	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9986749817689835	WITHOUT_CLASSIFICATION	0.0013250182310165597	DESIGN
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9956056110870034	WITHOUT_CLASSIFICATION	0.004394388912996638	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9995758944046539	WITHOUT_CLASSIFICATION	4.24105595346032E-4	DESIGN
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9991426965148708	WITHOUT_CLASSIFICATION	8.57303485129158E-4	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9994686673298849	WITHOUT_CLASSIFICATION	5.31332670115069E-4	DESIGN
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.5822821401611359	DESIGN	0.4177178598388641	WITHOUT_CLASSIFICATION
/**	WITHOUT_CLASSIFICATION	0.8506841282293386	DESIGN	0.14931587177066127	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
/**	WITHOUT_CLASSIFICATION	0.8506841282293386	DESIGN	0.14931587177066127	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999428330581176	WITHOUT_CLASSIFICATION	5.716694188234263E-5	DESIGN
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9781493065042868	WITHOUT_CLASSIFICATION	0.02185069349571316	DESIGN
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.8184702161665806	WITHOUT_CLASSIFICATION	0.18152978383341933	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9972287085891993	WITHOUT_CLASSIFICATION	0.002771291410800601	DESIGN
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9984858767421748	WITHOUT_CLASSIFICATION	0.0015141232578251129	DESIGN
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994545676065509	WITHOUT_CLASSIFICATION	5.454323934491543E-4	DESIGN
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995986490718278	WITHOUT_CLASSIFICATION	4.0135092817221267E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9996378269666935	WITHOUT_CLASSIFICATION	3.621730333065069E-4	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9986726729315074	WITHOUT_CLASSIFICATION	0.0013273270684926075	DESIGN
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9901748516515646	WITHOUT_CLASSIFICATION	0.009825148348435524	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9974815249696247	WITHOUT_CLASSIFICATION	0.002518475030375193	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9986726729315074	WITHOUT_CLASSIFICATION	0.0013273270684926075	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9974815249696247	WITHOUT_CLASSIFICATION	0.002518475030375193	DESIGN
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9997637887275628	WITHOUT_CLASSIFICATION	2.3621127243711665E-4	DESIGN
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9955590241175207	DESIGN	0.004440975882479199	WITHOUT_CLASSIFICATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9970045711886825	WITHOUT_CLASSIFICATION	0.0029954288113176156	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9998743571467309	WITHOUT_CLASSIFICATION	1.256428532690032E-4	DESIGN
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9998022130489504	WITHOUT_CLASSIFICATION	1.9778695104962908E-4	DESIGN
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999832270591162	WITHOUT_CLASSIFICATION	1.6772940883833333E-5	DESIGN
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999120515691639	WITHOUT_CLASSIFICATION	8.79484308361463E-5	DESIGN
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9909821926649126	WITHOUT_CLASSIFICATION	0.009017807335087365	DESIGN
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9997583054357121	WITHOUT_CLASSIFICATION	2.416945642880484E-4	DESIGN
// Never evict this node	WITHOUT_CLASSIFICATION	0.9957440654454174	WITHOUT_CLASSIFICATION	0.004255934554582701	DESIGN
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9997054295703619	WITHOUT_CLASSIFICATION	2.945704296380886E-4	DESIGN
// 60 seconds	WITHOUT_CLASSIFICATION	0.9988147940313333	WITHOUT_CLASSIFICATION	0.0011852059686667425	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999205415779034	WITHOUT_CLASSIFICATION	7.945842209662886E-5	DESIGN
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9976481185339653	WITHOUT_CLASSIFICATION	0.0023518814660346008	DESIGN
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9709867519568949	WITHOUT_CLASSIFICATION	0.0290132480431051	DESIGN
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.999874779617019	WITHOUT_CLASSIFICATION	1.2522038298094738E-4	DESIGN
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9956937182581229	WITHOUT_CLASSIFICATION	0.0043062817418771295	DESIGN
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999859784970756	WITHOUT_CLASSIFICATION	1.4021502924437994E-5	DESIGN
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9998815956959775	WITHOUT_CLASSIFICATION	1.1840430402250425E-4	DESIGN
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999174045059831	WITHOUT_CLASSIFICATION	8.259549401696413E-5	DESIGN
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9992932934034765	WITHOUT_CLASSIFICATION	7.067065965233506E-4	DESIGN
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9998600767975818	WITHOUT_CLASSIFICATION	1.399232024182401E-4	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9989543175566346	WITHOUT_CLASSIFICATION	0.0010456824433654915	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9986258797415478	WITHOUT_CLASSIFICATION	0.0013741202584521067	DESIGN
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.965372504599037	WITHOUT_CLASSIFICATION	0.03462749540096291	DESIGN
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9928071480757363	WITHOUT_CLASSIFICATION	0.0071928519242637065	DESIGN
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9983201540842275	WITHOUT_CLASSIFICATION	0.0016798459157725963	DESIGN
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9933796357255623	WITHOUT_CLASSIFICATION	0.006620364274437671	DESIGN
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9996731441918264	WITHOUT_CLASSIFICATION	3.268558081736582E-4	DESIGN
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999991140789488	WITHOUT_CLASSIFICATION	8.859210512369373E-7	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999998910979024	WITHOUT_CLASSIFICATION	1.0890209753988624E-7	DESIGN
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999707998637689	WITHOUT_CLASSIFICATION	2.9200136231121285E-5	DESIGN
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9997917843911399	WITHOUT_CLASSIFICATION	2.0821560886012314E-4	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9995491205060119	WITHOUT_CLASSIFICATION	4.50879493988112E-4	DESIGN
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9988271489030969	WITHOUT_CLASSIFICATION	0.0011728510969031406	DESIGN
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999996161910456	WITHOUT_CLASSIFICATION	3.8380895439692383E-7	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9995491205060119	WITHOUT_CLASSIFICATION	4.50879493988112E-4	DESIGN
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999830808935244	WITHOUT_CLASSIFICATION	1.6919106475600298E-5	DESIGN
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999175031361602	WITHOUT_CLASSIFICATION	8.249686383973304E-5	DESIGN
// ignore!	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9985234343494912	WITHOUT_CLASSIFICATION	0.0014765656505087753	DESIGN
// construct the cache	WITHOUT_CLASSIFICATION	0.9992998370087809	WITHOUT_CLASSIFICATION	7.001629912191111E-4	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9985139628985055	WITHOUT_CLASSIFICATION	0.0014860371014944875	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9985139628985055	WITHOUT_CLASSIFICATION	0.0014860371014944875	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9974874567846537	WITHOUT_CLASSIFICATION	0.00251254321534631	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9995131950016808	WITHOUT_CLASSIFICATION	4.868049983191662E-4	DESIGN
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9995361330207223	WITHOUT_CLASSIFICATION	4.638669792777248E-4	DESIGN
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9619996756685067	WITHOUT_CLASSIFICATION	0.03800032433149335	DESIGN
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9992208726983814	WITHOUT_CLASSIFICATION	7.791273016185871E-4	DESIGN
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9998190867583014	WITHOUT_CLASSIFICATION	1.8091324169856228E-4	DESIGN
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9997540295431155	WITHOUT_CLASSIFICATION	2.4597045688452113E-4	DESIGN
// return the connection	WITHOUT_CLASSIFICATION	0.9995283742488769	WITHOUT_CLASSIFICATION	4.7162575112304173E-4	DESIGN
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999171363916339	WITHOUT_CLASSIFICATION	8.286360836610502E-5	DESIGN
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999895197907306	WITHOUT_CLASSIFICATION	1.0480209269383695E-5	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999064863453787	WITHOUT_CLASSIFICATION	9.351365462139966E-5	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999064863453787	WITHOUT_CLASSIFICATION	9.351365462139966E-5	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999278777298809	WITHOUT_CLASSIFICATION	7.212227011907224E-5	DESIGN
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9998888445275479	WITHOUT_CLASSIFICATION	1.1115547245214853E-4	DESIGN
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9997142629617607	WITHOUT_CLASSIFICATION	2.8573703823932457E-4	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999064863453787	WITHOUT_CLASSIFICATION	9.351365462139966E-5	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999278777298809	WITHOUT_CLASSIFICATION	7.212227011907224E-5	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999278777298809	WITHOUT_CLASSIFICATION	7.212227011907224E-5	DESIGN
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9996217421831735	WITHOUT_CLASSIFICATION	3.782578168265656E-4	DESIGN
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.8550230031338375	WITHOUT_CLASSIFICATION	0.14497699686616256	DESIGN
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999989936797667	WITHOUT_CLASSIFICATION	1.0063202332708043E-6	DESIGN
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999959916395502	WITHOUT_CLASSIFICATION	4.008360449841982E-6	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9890934192879869	WITHOUT_CLASSIFICATION	0.010906580712013152	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9890934192879869	WITHOUT_CLASSIFICATION	0.010906580712013152	DESIGN
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9998268620889491	WITHOUT_CLASSIFICATION	1.7313791105097372E-4	DESIGN
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9990610611677306	WITHOUT_CLASSIFICATION	9.389388322693449E-4	DESIGN
// default is POJO	WITHOUT_CLASSIFICATION	0.9989267124280141	WITHOUT_CLASSIFICATION	0.0010732875719858652	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9992038126684987	WITHOUT_CLASSIFICATION	7.961873315013667E-4	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9992038126684987	WITHOUT_CLASSIFICATION	7.961873315013667E-4	DESIGN
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.998233333707882	WITHOUT_CLASSIFICATION	0.0017666662921179545	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999468876013884	WITHOUT_CLASSIFICATION	5.311239861151189E-5	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9933842807209954	WITHOUT_CLASSIFICATION	0.006615719279004656	DESIGN
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999937801214653	WITHOUT_CLASSIFICATION	6.219878534664917E-6	DESIGN
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9983418385370613	WITHOUT_CLASSIFICATION	0.0016581614629386948	DESIGN
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999162951255135	WITHOUT_CLASSIFICATION	8.37048744865383E-5	DESIGN
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9985795622542714	WITHOUT_CLASSIFICATION	0.0014204377457286209	DESIGN
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.994528546495264	WITHOUT_CLASSIFICATION	0.005471453504735977	DESIGN
//sort first by role name	WITHOUT_CLASSIFICATION	0.9993503069088032	WITHOUT_CLASSIFICATION	6.496930911967508E-4	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9933842807209954	WITHOUT_CLASSIFICATION	0.006615719279004656	DESIGN
//then by fk	WITHOUT_CLASSIFICATION	0.9991222075696404	WITHOUT_CLASSIFICATION	8.777924303596697E-4	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9993367366751756	WITHOUT_CLASSIFICATION	6.63263324824365E-4	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9993367366751756	WITHOUT_CLASSIFICATION	6.63263324824365E-4	DESIGN
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.7213826725368928	WITHOUT_CLASSIFICATION	0.27861732746310713	DESIGN
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9892992041311772	WITHOUT_CLASSIFICATION	0.010700795868822792	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9996742524427933	WITHOUT_CLASSIFICATION	3.257475572066724E-4	DESIGN
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9985726609767114	WITHOUT_CLASSIFICATION	0.001427339023288617	DESIGN
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9987596184582861	WITHOUT_CLASSIFICATION	0.0012403815417138993	DESIGN
//then by id	WITHOUT_CLASSIFICATION	0.9993855656015035	WITHOUT_CLASSIFICATION	6.144343984965644E-4	DESIGN
// to be safe...	WITHOUT_CLASSIFICATION	0.9973374742879344	WITHOUT_CLASSIFICATION	0.0026625257120656055	DESIGN
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9994537210190627	WITHOUT_CLASSIFICATION	5.462789809373073E-4	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9998282294219386	WITHOUT_CLASSIFICATION	1.7177057806142294E-4	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9998282294219386	WITHOUT_CLASSIFICATION	1.7177057806142294E-4	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9986576044603137	WITHOUT_CLASSIFICATION	0.0013423955396863214	DESIGN
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9986903592234493	WITHOUT_CLASSIFICATION	0.0013096407765506343	DESIGN
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9993700165002785	WITHOUT_CLASSIFICATION	6.299834997215196E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// invokespecial	WITHOUT_CLASSIFICATION	0.9986467293478192	WITHOUT_CLASSIFICATION	0.001353270652180833	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9994360552883843	WITHOUT_CLASSIFICATION	5.639447116157488E-4	DESIGN
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9991043216159543	WITHOUT_CLASSIFICATION	8.956783840456724E-4	DESIGN
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9977490231287353	WITHOUT_CLASSIFICATION	0.0022509768712646837	DESIGN
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.999806855467199	WITHOUT_CLASSIFICATION	1.931445328009993E-4	DESIGN
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9982622063213898	WITHOUT_CLASSIFICATION	0.0017377936786101972	DESIGN
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9998535628406551	WITHOUT_CLASSIFICATION	1.4643715934495503E-4	DESIGN
// new	WITHOUT_CLASSIFICATION	0.9995222471392684	WITHOUT_CLASSIFICATION	4.7775286073158753E-4	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.99940344767757	WITHOUT_CLASSIFICATION	5.965523224299619E-4	DESIGN
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9998401332718448	WITHOUT_CLASSIFICATION	1.5986672815518233E-4	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9986467293478192	WITHOUT_CLASSIFICATION	0.001353270652180833	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9986467293478192	WITHOUT_CLASSIFICATION	0.001353270652180833	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9986467293478192	WITHOUT_CLASSIFICATION	0.001353270652180833	DESIGN
// aastore // args	WITHOUT_CLASSIFICATION	0.9982622063213898	WITHOUT_CLASSIFICATION	0.0017377936786101972	DESIGN
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.99743638371176	WITHOUT_CLASSIFICATION	0.002563616288240037	DESIGN
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9995336412058364	WITHOUT_CLASSIFICATION	4.6635879416367145E-4	DESIGN
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9998150327892248	WITHOUT_CLASSIFICATION	1.8496721077515036E-4	DESIGN
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9994448180148711	WITHOUT_CLASSIFICATION	5.551819851289956E-4	DESIGN
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9978343080107347	WITHOUT_CLASSIFICATION	0.002165691989265281	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999995221126517	WITHOUT_CLASSIFICATION	4.7788734830432696E-6	DESIGN
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9978202844254105	WITHOUT_CLASSIFICATION	0.0021797155745894546	DESIGN
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9990891487533454	WITHOUT_CLASSIFICATION	9.108512466546048E-4	DESIGN
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9998076360328686	WITHOUT_CLASSIFICATION	1.923639671312902E-4	DESIGN
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9993468611364834	WITHOUT_CLASSIFICATION	6.531388635166374E-4	DESIGN
// iconst_i	WITHOUT_CLASSIFICATION	0.9986467293478192	WITHOUT_CLASSIFICATION	0.001353270652180833	DESIGN
// aaload	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9986483818078055	WITHOUT_CLASSIFICATION	0.0013516181921945942	DESIGN
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9998447474522849	WITHOUT_CLASSIFICATION	1.5525254771500357E-4	DESIGN
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9998327971342732	WITHOUT_CLASSIFICATION	1.6720286572687683E-4	DESIGN
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999911114956614	WITHOUT_CLASSIFICATION	8.88850433853835E-6	DESIGN
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9974354311406992	WITHOUT_CLASSIFICATION	0.002564568859300768	DESIGN
// register in exception table	WITHOUT_CLASSIFICATION	0.9983561184000873	WITHOUT_CLASSIFICATION	0.001643881599912665	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9994360552883843	WITHOUT_CLASSIFICATION	5.639447116157488E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9994360552883843	WITHOUT_CLASSIFICATION	5.639447116157488E-4	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.99940344767757	WITHOUT_CLASSIFICATION	5.965523224299619E-4	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9986467293478192	WITHOUT_CLASSIFICATION	0.001353270652180833	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9986483818078055	WITHOUT_CLASSIFICATION	0.0013516181921945942	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.999966719147909	WITHOUT_CLASSIFICATION	3.3280852091007684E-5	DESIGN
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9998230012389373	WITHOUT_CLASSIFICATION	1.7699876106273395E-4	DESIGN
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9994887027378125	WITHOUT_CLASSIFICATION	5.112972621875108E-4	DESIGN
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9991791469596254	WITHOUT_CLASSIFICATION	8.208530403745981E-4	DESIGN
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9985850708290677	WITHOUT_CLASSIFICATION	0.0014149291709323367	DESIGN
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9993303446039619	WITHOUT_CLASSIFICATION	6.696553960381075E-4	DESIGN
// athrow	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9996940764965473	WITHOUT_CLASSIFICATION	3.059235034527028E-4	DESIGN
//swallow	WITHOUT_CLASSIFICATION	0.9986726729315074	WITHOUT_CLASSIFICATION	0.0013273270684926075	DESIGN
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9956502922299016	WITHOUT_CLASSIFICATION	0.004349707770098399	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9947462790225874	WITHOUT_CLASSIFICATION	0.005253720977412623	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9947462790225874	WITHOUT_CLASSIFICATION	0.005253720977412623	DESIGN
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9991753271367034	WITHOUT_CLASSIFICATION	8.246728632965043E-4	DESIGN
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9997903046428126	WITHOUT_CLASSIFICATION	2.096953571873161E-4	DESIGN
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9931899602535366	WITHOUT_CLASSIFICATION	0.006810039746463348	DESIGN
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9989670371928477	WITHOUT_CLASSIFICATION	0.0010329628071522943	DESIGN
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9995600331735347	WITHOUT_CLASSIFICATION	4.3996682646531824E-4	DESIGN
// case of non-static field	WITHOUT_CLASSIFICATION	0.9998449358773553	WITHOUT_CLASSIFICATION	1.550641226446771E-4	DESIGN
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9992253462658072	WITHOUT_CLASSIFICATION	7.746537341927179E-4	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999790365680981	WITHOUT_CLASSIFICATION	2.0963431901902912E-4	DESIGN
// ifnonnull	WITHOUT_CLASSIFICATION	0.9986467293478192	WITHOUT_CLASSIFICATION	0.001353270652180833	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9987752721954708	WITHOUT_CLASSIFICATION	0.0012247278045292528	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9987752721954708	WITHOUT_CLASSIFICATION	0.0012247278045292528	DESIGN
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9987752721954708	WITHOUT_CLASSIFICATION	0.0012247278045292528	DESIGN
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9991197582581219	WITHOUT_CLASSIFICATION	8.802417418781117E-4	DESIGN
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9987752721954708	WITHOUT_CLASSIFICATION	0.0012247278045292528	DESIGN
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9997561751457151	WITHOUT_CLASSIFICATION	2.4382485428496556E-4	DESIGN
// int	WITHOUT_CLASSIFICATION	0.9997403757609625	WITHOUT_CLASSIFICATION	2.5962423903745234E-4	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9994360552883843	WITHOUT_CLASSIFICATION	5.639447116157488E-4	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.99940344767757	WITHOUT_CLASSIFICATION	5.965523224299619E-4	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9986467293478192	WITHOUT_CLASSIFICATION	0.001353270652180833	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9986483818078055	WITHOUT_CLASSIFICATION	0.0013516181921945942	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9986483818078055	WITHOUT_CLASSIFICATION	0.0013516181921945942	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9993303446039619	WITHOUT_CLASSIFICATION	6.696553960381075E-4	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9993303446039619	WITHOUT_CLASSIFICATION	6.696553960381075E-4	DESIGN
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.998946865739978	WITHOUT_CLASSIFICATION	0.0010531342600219743	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// putfield	WITHOUT_CLASSIFICATION	0.9986467293478192	WITHOUT_CLASSIFICATION	0.001353270652180833	DESIGN
// return ;	WITHOUT_CLASSIFICATION	0.998818384530994	WITHOUT_CLASSIFICATION	0.0011816154690059155	DESIGN
// ldc // field name	WITHOUT_CLASSIFICATION	0.9970695865553112	WITHOUT_CLASSIFICATION	0.002930413444688749	DESIGN
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999090913743764	WITHOUT_CLASSIFICATION	9.090862562357678E-5	DESIGN
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9993303446039619	WITHOUT_CLASSIFICATION	6.696553960381075E-4	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9987325418632399	WITHOUT_CLASSIFICATION	0.001267458136760057	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9987325418632399	WITHOUT_CLASSIFICATION	0.001267458136760057	DESIGN
// not array	WITHOUT_CLASSIFICATION	0.997189655845456	WITHOUT_CLASSIFICATION	0.0028103441545439325	DESIGN
// array of reference type	WITHOUT_CLASSIFICATION	0.9996109457492095	WITHOUT_CLASSIFICATION	3.890542507905306E-4	DESIGN
// boolean	WITHOUT_CLASSIFICATION	0.9994639456347287	WITHOUT_CLASSIFICATION	5.360543652712095E-4	DESIGN
// byte	WITHOUT_CLASSIFICATION	0.9994785807720126	WITHOUT_CLASSIFICATION	5.214192279874211E-4	DESIGN
// char	WITHOUT_CLASSIFICATION	0.9997358436947412	WITHOUT_CLASSIFICATION	2.6415630525879327E-4	DESIGN
// short	WITHOUT_CLASSIFICATION	0.9985720453880236	WITHOUT_CLASSIFICATION	0.0014279546119763873	DESIGN
// double	WITHOUT_CLASSIFICATION	0.999943066570433	WITHOUT_CLASSIFICATION	5.693342956692418E-5	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9994903025731698	WITHOUT_CLASSIFICATION	5.096974268301654E-4	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9994903025731698	WITHOUT_CLASSIFICATION	5.096974268301654E-4	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9990439547386455	WITHOUT_CLASSIFICATION	9.56045261354433E-4	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9990439547386455	WITHOUT_CLASSIFICATION	9.56045261354433E-4	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9971853896067765	WITHOUT_CLASSIFICATION	0.0028146103932233622	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9971853896067765	WITHOUT_CLASSIFICATION	0.0028146103932233622	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9980727981927373	WITHOUT_CLASSIFICATION	0.0019272018072626395	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9980727981927373	WITHOUT_CLASSIFICATION	0.0019272018072626395	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9987325418632399	WITHOUT_CLASSIFICATION	0.001267458136760057	DESIGN
// double	WITHOUT_CLASSIFICATION	0.999943066570433	WITHOUT_CLASSIFICATION	5.693342956692418E-5	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9994903025731698	WITHOUT_CLASSIFICATION	5.096974268301654E-4	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9994903025731698	WITHOUT_CLASSIFICATION	5.096974268301654E-4	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9990439547386455	WITHOUT_CLASSIFICATION	9.56045261354433E-4	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9971853896067765	WITHOUT_CLASSIFICATION	0.0028146103932233622	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9971853896067765	WITHOUT_CLASSIFICATION	0.0028146103932233622	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9980727981927373	WITHOUT_CLASSIFICATION	0.0019272018072626395	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.998644020867572	WITHOUT_CLASSIFICATION	0.00135597913242796	DESIGN
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9968258404315534	WITHOUT_CLASSIFICATION	0.0031741595684465075	DESIGN
//decrement the lock	WITHOUT_CLASSIFICATION	0.998176414348946	WITHOUT_CLASSIFICATION	0.001823585651054006	DESIGN
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.999826452358866	WITHOUT_CLASSIFICATION	1.735476411338569E-4	DESIGN
//recache the updated state	WITHOUT_CLASSIFICATION	0.9991074560476719	WITHOUT_CLASSIFICATION	8.925439523280032E-4	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9994728134412236	WITHOUT_CLASSIFICATION	5.271865587764288E-4	DESIGN
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999261172634766	WITHOUT_CLASSIFICATION	7.388273652351492E-5	DESIGN
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9697055252929543	WITHOUT_CLASSIFICATION	0.030294474707045736	DESIGN
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9998689184913181	WITHOUT_CLASSIFICATION	1.3108150868192478E-4	DESIGN
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9993312347712797	WITHOUT_CLASSIFICATION	6.687652287203082E-4	DESIGN
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9998857429479794	WITHOUT_CLASSIFICATION	1.1425705202063403E-4	DESIGN
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9998966292883165	WITHOUT_CLASSIFICATION	1.033707116836037E-4	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9974874567846537	WITHOUT_CLASSIFICATION	0.00251254321534631	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9994728134412236	WITHOUT_CLASSIFICATION	5.271865587764288E-4	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9986726729315074	WITHOUT_CLASSIFICATION	0.0013273270684926075	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9986726729315074	WITHOUT_CLASSIFICATION	0.0013273270684926075	DESIGN
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9828374642585217	WITHOUT_CLASSIFICATION	0.017162535741478212	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9983308364514862	WITHOUT_CLASSIFICATION	0.001669163548513783	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9983308364514862	WITHOUT_CLASSIFICATION	0.001669163548513783	DESIGN
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9977252087000215	WITHOUT_CLASSIFICATION	0.0022747912999785116	DESIGN
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9983048906145855	WITHOUT_CLASSIFICATION	0.0016951093854144321	DESIGN
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.992196729441619	WITHOUT_CLASSIFICATION	0.007803270558380974	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9988083811868733	WITHOUT_CLASSIFICATION	0.001191618813126667	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9988083811868733	WITHOUT_CLASSIFICATION	0.001191618813126667	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.996367227098297	WITHOUT_CLASSIFICATION	0.0036327729017030614	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9995976670579151	WITHOUT_CLASSIFICATION	4.023329420849047E-4	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9995976670579151	WITHOUT_CLASSIFICATION	4.023329420849047E-4	DESIGN
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9981630047041836	WITHOUT_CLASSIFICATION	0.0018369952958164056	DESIGN
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9990770543829618	WITHOUT_CLASSIFICATION	9.229456170382403E-4	DESIGN
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9985487392505541	WITHOUT_CLASSIFICATION	0.0014512607494458893	DESIGN
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9986467293478192	WITHOUT_CLASSIFICATION	0.001353270652180833	DESIGN
// MUTABLE	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// WHERE	WITHOUT_CLASSIFICATION	0.9998536102157837	WITHOUT_CLASSIFICATION	1.463897842163733E-4	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9993957443975086	WITHOUT_CLASSIFICATION	6.042556024913969E-4	DESIGN
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9986467293478192	WITHOUT_CLASSIFICATION	0.001353270652180833	DESIGN
// TODO:	WITHOUT_CLASSIFICATION	0.5220686221227984	WITHOUT_CLASSIFICATION	0.4779313778772017	DESIGN
// ID	WITHOUT_CLASSIFICATION	0.9991862750388042	WITHOUT_CLASSIFICATION	8.137249611958228E-4	DESIGN
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9993505305873949	WITHOUT_CLASSIFICATION	6.494694126049875E-4	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9986467293478192	WITHOUT_CLASSIFICATION	0.001353270652180833	DESIGN
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9998076064075662	WITHOUT_CLASSIFICATION	1.9239359243382437E-4	DESIGN
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9981006407449914	WITHOUT_CLASSIFICATION	0.0018993592550086346	DESIGN
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9977249010796597	WITHOUT_CLASSIFICATION	0.002275098920340323	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9986467293478192	WITHOUT_CLASSIFICATION	0.001353270652180833	DESIGN
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9994686673298849	WITHOUT_CLASSIFICATION	5.31332670115069E-4	DESIGN
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999733362795172	WITHOUT_CLASSIFICATION	2.6663720482742984E-5	DESIGN
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9986910730586953	WITHOUT_CLASSIFICATION	0.0013089269413047438	DESIGN
// IMPORT	WITHOUT_CLASSIFICATION	0.9993911384312926	WITHOUT_CLASSIFICATION	6.088615687074397E-4	DESIGN
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9986561308232818	WITHOUT_CLASSIFICATION	0.0013438691767182316	DESIGN
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9990240214186787	WITHOUT_CLASSIFICATION	9.759785813212309E-4	DESIGN
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.998946865739978	WITHOUT_CLASSIFICATION	0.0010531342600219743	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9986467293478192	WITHOUT_CLASSIFICATION	0.001353270652180833	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9988996876141706	WITHOUT_CLASSIFICATION	0.0011003123858294183	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9985487392505541	WITHOUT_CLASSIFICATION	0.0014512607494458893	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9988216798805288	WITHOUT_CLASSIFICATION	0.0011783201194712084	DESIGN
// joined subclasses	WITHOUT_CLASSIFICATION	0.9993586061678005	WITHOUT_CLASSIFICATION	6.413938321994616E-4	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9994066036030074	WITHOUT_CLASSIFICATION	5.933963969925656E-4	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9993957443975086	WITHOUT_CLASSIFICATION	6.042556024913969E-4	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9988996876141706	WITHOUT_CLASSIFICATION	0.0011003123858294183	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9988216798805288	WITHOUT_CLASSIFICATION	0.0011783201194712084	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9994066036030074	WITHOUT_CLASSIFICATION	5.933963969925656E-4	DESIGN
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9994350919574388	WITHOUT_CLASSIFICATION	5.649080425611009E-4	DESIGN
// TABLENAME	WITHOUT_CLASSIFICATION	0.9986467293478192	WITHOUT_CLASSIFICATION	0.001353270652180833	DESIGN
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9994350919574388	WITHOUT_CLASSIFICATION	5.649080425611009E-4	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9986749817689835	WITHOUT_CLASSIFICATION	0.0013250182310165597	DESIGN
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9986467293478192	WITHOUT_CLASSIFICATION	0.001353270652180833	DESIGN
// column index	WITHOUT_CLASSIFICATION	0.9998775755618367	WITHOUT_CLASSIFICATION	1.224244381632422E-4	DESIGN
//column unique-key	WITHOUT_CLASSIFICATION	0.9971379190238052	WITHOUT_CLASSIFICATION	0.0028620809761947838	DESIGN
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9966512255256178	WITHOUT_CLASSIFICATION	0.003348774474382062	DESIGN
// for an any	WITHOUT_CLASSIFICATION	0.9986899543375876	WITHOUT_CLASSIFICATION	0.001310045662412499	DESIGN
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999961718464216	WITHOUT_CLASSIFICATION	3.82815357834416E-6	DESIGN
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999609523851634	WITHOUT_CLASSIFICATION	3.9047614836623055E-5	DESIGN
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9995715881616793	WITHOUT_CLASSIFICATION	4.284118383206121E-4	DESIGN
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999993847691858	WITHOUT_CLASSIFICATION	6.152308141341896E-7	DESIGN
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999609523851634	WITHOUT_CLASSIFICATION	3.9047614836623055E-5	DESIGN
// ROLENAME	WITHOUT_CLASSIFICATION	0.9986467293478192	WITHOUT_CLASSIFICATION	0.001353270652180833	DESIGN
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9986467293478192	WITHOUT_CLASSIFICATION	0.001353270652180833	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9995758944046539	WITHOUT_CLASSIFICATION	4.24105595346032E-4	DESIGN
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9997961828399103	WITHOUT_CLASSIFICATION	2.0381716008976145E-4	DESIGN
// SORT	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9988996876141706	WITHOUT_CLASSIFICATION	0.0011003123858294183	DESIGN
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9993303446039619	WITHOUT_CLASSIFICATION	6.696553960381075E-4	DESIGN
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9980139344554073	WITHOUT_CLASSIFICATION	0.0019860655445926704	DESIGN
// set up second pass	WITHOUT_CLASSIFICATION	0.9994338256880486	WITHOUT_CLASSIFICATION	5.661743119514903E-4	DESIGN
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9702377311264822	WITHOUT_CLASSIFICATION	0.029762268873517937	DESIGN
// a nested composite element	WITHOUT_CLASSIFICATION	0.9836814344247257	WITHOUT_CLASSIFICATION	0.016318565575274377	DESIGN
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9990649337556936	WITHOUT_CLASSIFICATION	9.350662443064062E-4	DESIGN
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.999967396019531	WITHOUT_CLASSIFICATION	3.2603980468905534E-5	DESIGN
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999005741902581	WITHOUT_CLASSIFICATION	9.942580974187428E-5	DESIGN
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9990623990137666	WITHOUT_CLASSIFICATION	9.376009862335131E-4	DESIGN
// GENERATOR	WITHOUT_CLASSIFICATION	0.99868551916512	WITHOUT_CLASSIFICATION	0.0013144808348799527	DESIGN
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9982405310548627	WITHOUT_CLASSIFICATION	0.0017594689451373687	DESIGN
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.998946865739978	WITHOUT_CLASSIFICATION	0.0010531342600219743	DESIGN
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.997280035984325	WITHOUT_CLASSIFICATION	0.0027199640156749627	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9994686673298849	WITHOUT_CLASSIFICATION	5.31332670115069E-4	DESIGN
// contained elements:	WITHOUT_CLASSIFICATION	0.9989067439631933	WITHOUT_CLASSIFICATION	0.0010932560368065508	DESIGN
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9972174720525809	WITHOUT_CLASSIFICATION	0.0027825279474191214	DESIGN
// Bind the where	WITHOUT_CLASSIFICATION	0.9995135882371303	WITHOUT_CLASSIFICATION	4.864117628696448E-4	DESIGN
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9992863200433773	WITHOUT_CLASSIFICATION	7.136799566227185E-4	DESIGN
// Bind the filters	WITHOUT_CLASSIFICATION	0.9993255769887947	WITHOUT_CLASSIFICATION	6.744230112053117E-4	DESIGN
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9984770973049131	WITHOUT_CLASSIFICATION	0.0015229026950869075	DESIGN
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.999999329033099	WITHOUT_CLASSIFICATION	6.709669009949104E-7	DESIGN
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9996820540868095	WITHOUT_CLASSIFICATION	3.1794591319044414E-4	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.7115759455654584	DESIGN	0.28842405443454155	WITHOUT_CLASSIFICATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9987309223317364	WITHOUT_CLASSIFICATION	0.001269077668263589	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9987189753624812	WITHOUT_CLASSIFICATION	0.0012810246375187639	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9987189753624812	WITHOUT_CLASSIFICATION	0.0012810246375187639	DESIGN
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9994393422212516	WITHOUT_CLASSIFICATION	5.60657778748473E-4	DESIGN
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999895163562784	WITHOUT_CLASSIFICATION	1.048364372148769E-5	DESIGN
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9972429250119975	WITHOUT_CLASSIFICATION	0.0027570749880023626	DESIGN
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9990978915039707	WITHOUT_CLASSIFICATION	9.021084960293527E-4	DESIGN
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9978144875124316	WITHOUT_CLASSIFICATION	0.002185512487568287	DESIGN
//Query parser settings:	WITHOUT_CLASSIFICATION	0.994741825124282	WITHOUT_CLASSIFICATION	0.00525817487571803	DESIGN
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9995160211120289	WITHOUT_CLASSIFICATION	4.8397888797118197E-4	DESIGN
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999992785042979	WITHOUT_CLASSIFICATION	7.214957021159112E-7	DESIGN
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9971319240238687	WITHOUT_CLASSIFICATION	0.0028680759761312816	DESIGN
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9974589887375278	WITHOUT_CLASSIFICATION	0.002541011262472179	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
//Schema export:	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9941358930980405	WITHOUT_CLASSIFICATION	0.005864106901959475	DESIGN
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9893716454533897	WITHOUT_CLASSIFICATION	0.010628354546610362	DESIGN
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9983444509333725	WITHOUT_CLASSIFICATION	0.0016555490666273899	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999944982766368	WITHOUT_CLASSIFICATION	5.501723363199053E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9712107551010719	WITHOUT_CLASSIFICATION	0.028789244898928132	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9618850214479261	WITHOUT_CLASSIFICATION	0.03811497855207395	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999703483056026	WITHOUT_CLASSIFICATION	2.9651694397477437E-5	DESIGN
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9964592595371388	WITHOUT_CLASSIFICATION	0.0035407404628611484	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9963978936573563	WITHOUT_CLASSIFICATION	0.003602106342643624	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9995965629756759	WITHOUT_CLASSIFICATION	4.0343702432405805E-4	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9995965629756759	WITHOUT_CLASSIFICATION	4.0343702432405805E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9972801130667105	WITHOUT_CLASSIFICATION	0.0027198869332894517	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9972801130667105	WITHOUT_CLASSIFICATION	0.0027198869332894517	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.7115759455654584	DESIGN	0.28842405443454155	WITHOUT_CLASSIFICATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9650993007891929	WITHOUT_CLASSIFICATION	0.03490069921080708	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9989308812201639	WITHOUT_CLASSIFICATION	0.0010691187798360512	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999623527797662	WITHOUT_CLASSIFICATION	3.764722023380141E-4	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9986576044603137	WITHOUT_CLASSIFICATION	0.0013423955396863214	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9989308812201639	WITHOUT_CLASSIFICATION	0.0010691187798360512	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999623527797662	WITHOUT_CLASSIFICATION	3.764722023380141E-4	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9948527850333533	WITHOUT_CLASSIFICATION	0.005147214966646755	DESIGN
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.995733193575948	WITHOUT_CLASSIFICATION	0.004266806424052047	DESIGN
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9930633485728344	WITHOUT_CLASSIFICATION	0.006936651427165647	DESIGN
// the element has changed	WITHOUT_CLASSIFICATION	0.9995979507989455	WITHOUT_CLASSIFICATION	4.0204920105444244E-4	DESIGN
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9737764654108978	WITHOUT_CLASSIFICATION	0.026223534589102135	DESIGN
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9129698721074231	WITHOUT_CLASSIFICATION	0.08703012789257687	DESIGN
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9995901127782748	WITHOUT_CLASSIFICATION	4.09887221725114E-4	DESIGN
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9980903885854181	WITHOUT_CLASSIFICATION	0.0019096114145818273	DESIGN
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9682163192859468	WITHOUT_CLASSIFICATION	0.03178368071405328	DESIGN
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999973321722471	WITHOUT_CLASSIFICATION	2.667827752955537E-6	DESIGN
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9985520162338934	WITHOUT_CLASSIFICATION	0.0014479837661065015	DESIGN
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9976704142607802	WITHOUT_CLASSIFICATION	0.0023295857392196975	DESIGN
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9991732569364591	WITHOUT_CLASSIFICATION	8.267430635408726E-4	DESIGN
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9966759341901072	WITHOUT_CLASSIFICATION	0.0033240658098928834	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9986576044603137	WITHOUT_CLASSIFICATION	0.0013423955396863214	DESIGN
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9966759341901072	WITHOUT_CLASSIFICATION	0.0033240658098928834	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9971260954897959	WITHOUT_CLASSIFICATION	0.002873904510204119	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9971260954897959	WITHOUT_CLASSIFICATION	0.002873904510204119	DESIGN
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9992603396328642	WITHOUT_CLASSIFICATION	7.396603671357867E-4	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9948527850333533	WITHOUT_CLASSIFICATION	0.005147214966646755	DESIGN
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9969938571158836	WITHOUT_CLASSIFICATION	0.003006142884116405	DESIGN
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.6998226205101458	DESIGN	0.3001773794898543	WITHOUT_CLASSIFICATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.5012126594461621	DESIGN	0.4987873405538378	WITHOUT_CLASSIFICATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999379141619398	WITHOUT_CLASSIFICATION	6.20858380601883E-5	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9097550652646051	WITHOUT_CLASSIFICATION	0.09024493473539484	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9948527850333533	WITHOUT_CLASSIFICATION	0.005147214966646755	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999379141619398	WITHOUT_CLASSIFICATION	6.20858380601883E-5	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9097550652646051	WITHOUT_CLASSIFICATION	0.09024493473539484	DESIGN
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9986943340242485	WITHOUT_CLASSIFICATION	0.0013056659757516133	DESIGN
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9995607474407396	WITHOUT_CLASSIFICATION	4.3925255926032653E-4	DESIGN
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.999786629892825	WITHOUT_CLASSIFICATION	2.1337010717504E-4	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9948527850333533	WITHOUT_CLASSIFICATION	0.005147214966646755	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9948527850333533	WITHOUT_CLASSIFICATION	0.005147214966646755	DESIGN
// from Map	WITHOUT_CLASSIFICATION	0.9984387212230441	WITHOUT_CLASSIFICATION	0.0015612787769557809	DESIGN
// from SortedMap	WITHOUT_CLASSIFICATION	0.9979745914434682	WITHOUT_CLASSIFICATION	0.002025408556531661	DESIGN
//inject the data	WITHOUT_CLASSIFICATION	0.9991121269069466	WITHOUT_CLASSIFICATION	8.878730930533894E-4	DESIGN
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997712389688107	WITHOUT_CLASSIFICATION	2.2876103118927717E-4	DESIGN
//default pool size 20	WITHOUT_CLASSIFICATION	0.9997894293774492	WITHOUT_CLASSIFICATION	2.1057062255077193E-4	DESIGN
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999864425896722	WITHOUT_CLASSIFICATION	1.3557410327863942E-5	DESIGN
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999837426286567	WITHOUT_CLASSIFICATION	1.6257371343276672E-5	DESIGN
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9988889448121702	WITHOUT_CLASSIFICATION	0.0011110551878298666	DESIGN
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9997317374205651	WITHOUT_CLASSIFICATION	2.682625794349176E-4	DESIGN
// then bind it	WITHOUT_CLASSIFICATION	0.9979746871178095	WITHOUT_CLASSIFICATION	0.0020253128821904353	DESIGN
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.960065715483315	WITHOUT_CLASSIFICATION	0.03993428451668501	DESIGN
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.955028786765674	WITHOUT_CLASSIFICATION	0.04497121323432586	DESIGN
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9996673233878556	WITHOUT_CLASSIFICATION	3.326766121444215E-4	DESIGN
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9927166046263911	WITHOUT_CLASSIFICATION	0.007283395373608995	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993420841719683	WITHOUT_CLASSIFICATION	6.579158280316975E-4	DESIGN
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999982179984657	WITHOUT_CLASSIFICATION	1.782001534369489E-6	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9972287085891993	WITHOUT_CLASSIFICATION	0.002771291410800601	DESIGN
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9967579191408314	WITHOUT_CLASSIFICATION	0.003242080859168475	DESIGN
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9984761120787902	WITHOUT_CLASSIFICATION	0.0015238879212098187	DESIGN
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.999623527797662	WITHOUT_CLASSIFICATION	3.764722023380141E-4	DESIGN
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9997335177901909	WITHOUT_CLASSIFICATION	2.6648220980910343E-4	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9972287085891993	WITHOUT_CLASSIFICATION	0.002771291410800601	DESIGN
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9993171008859064	WITHOUT_CLASSIFICATION	6.828991140935764E-4	DESIGN
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9986559664119034	WITHOUT_CLASSIFICATION	0.0013440335880967515	DESIGN
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9691706435027282	WITHOUT_CLASSIFICATION	0.030829356497271764	DESIGN
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9993522440909549	WITHOUT_CLASSIFICATION	6.477559090451865E-4	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9974034098423366	WITHOUT_CLASSIFICATION	0.0025965901576634246	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999111263395813	WITHOUT_CLASSIFICATION	8.887366041855036E-5	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9989121766027917	WITHOUT_CLASSIFICATION	0.0010878233972082085	DESIGN
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9993303446039619	WITHOUT_CLASSIFICATION	6.696553960381075E-4	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9942552023686088	WITHOUT_CLASSIFICATION	0.005744797631391244	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994841191779691	WITHOUT_CLASSIFICATION	5.158808220308495E-4	DESIGN
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9998702560436322	WITHOUT_CLASSIFICATION	1.2974395636771883E-4	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999591303900421	WITHOUT_CLASSIFICATION	4.086960995792594E-5	DESIGN
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9835399923472181	WITHOUT_CLASSIFICATION	0.01646000765278199	DESIGN
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9996547803566559	WITHOUT_CLASSIFICATION	3.4521964334413617E-4	DESIGN
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999614035869672	WITHOUT_CLASSIFICATION	3.859641303283795E-5	DESIGN
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999942482780467	WITHOUT_CLASSIFICATION	5.751721953289059E-5	DESIGN
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9991767189034434	WITHOUT_CLASSIFICATION	8.232810965566425E-4	DESIGN
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9990466336689985	WITHOUT_CLASSIFICATION	9.533663310015278E-4	DESIGN
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.999354744863632	WITHOUT_CLASSIFICATION	6.452551363680158E-4	DESIGN
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9769205060925965	WITHOUT_CLASSIFICATION	0.023079493907403412	DESIGN
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9978676646511179	WITHOUT_CLASSIFICATION	0.0021323353488821003	DESIGN
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9996205028218166	WITHOUT_CLASSIFICATION	3.7949717818350773E-4	DESIGN
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9957053862888651	WITHOUT_CLASSIFICATION	0.004294613711134924	DESIGN
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9976775382767346	WITHOUT_CLASSIFICATION	0.002322461723265381	DESIGN
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.993889440432945	WITHOUT_CLASSIFICATION	0.006110559567054918	DESIGN
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998883823976944	WITHOUT_CLASSIFICATION	0.0011161760230560644	DESIGN
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996787780603403	WITHOUT_CLASSIFICATION	3.212219396597353E-4	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978481411403699	WITHOUT_CLASSIFICATION	0.002151858859630113	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981851658195688	WITHOUT_CLASSIFICATION	0.001814834180431221	DESIGN
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978481411403699	WITHOUT_CLASSIFICATION	0.002151858859630113	DESIGN
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978481411403699	WITHOUT_CLASSIFICATION	0.002151858859630113	DESIGN
// by default we report no support	WITHOUT_CLASSIFICATION	0.9935061501367913	WITHOUT_CLASSIFICATION	0.006493849863208638	DESIGN
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9449959053901299	WITHOUT_CLASSIFICATION	0.05500409460987009	DESIGN
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992328028640959	WITHOUT_CLASSIFICATION	7.671971359040727E-4	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9819529439442686	WITHOUT_CLASSIFICATION	0.018047056055731505	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9895445208781063	WITHOUT_CLASSIFICATION	0.010455479121893771	DESIGN
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994909210967854	WITHOUT_CLASSIFICATION	5.090789032145166E-4	DESIGN
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978765201109662	WITHOUT_CLASSIFICATION	0.002123479889033864	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978481411403699	WITHOUT_CLASSIFICATION	0.002151858859630113	DESIGN
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998223221920077	WITHOUT_CLASSIFICATION	0.0017767780799231058	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978481411403699	WITHOUT_CLASSIFICATION	0.002151858859630113	DESIGN
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9998843729559175	WITHOUT_CLASSIFICATION	1.1562704408258167E-4	DESIGN
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993613294882746	WITHOUT_CLASSIFICATION	6.386705117254887E-4	DESIGN
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.995012305646632	WITHOUT_CLASSIFICATION	0.004987694353367977	DESIGN
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9994042870489402	WITHOUT_CLASSIFICATION	5.957129510598317E-4	DESIGN
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9857540398893907	WITHOUT_CLASSIFICATION	0.014245960110609189	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.996711099345361	WITHOUT_CLASSIFICATION	0.0032889006546391432	DESIGN
//" cascade";	WITHOUT_CLASSIFICATION	0.9972049323126357	WITHOUT_CLASSIFICATION	0.002795067687364199	DESIGN
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9990305107937898	WITHOUT_CLASSIFICATION	9.694892062101161E-4	DESIGN
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9986943340242485	WITHOUT_CLASSIFICATION	0.0013056659757516133	DESIGN
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9986931357343024	WITHOUT_CLASSIFICATION	0.0013068642656975115	DESIGN
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9987114311861671	WITHOUT_CLASSIFICATION	0.0012885688138329005	DESIGN
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9990327961891425	WITHOUT_CLASSIFICATION	9.67203810857368E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994841191779691	WITHOUT_CLASSIFICATION	5.158808220308495E-4	DESIGN
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9988920676442272	WITHOUT_CLASSIFICATION	0.0011079323557728609	DESIGN
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9986227174505474	WITHOUT_CLASSIFICATION	0.0013772825494525534	DESIGN
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9912675312757235	WITHOUT_CLASSIFICATION	0.008732468724276424	DESIGN
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9898473648817251	WITHOUT_CLASSIFICATION	0.010152635118275006	DESIGN
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9990381102336303	WITHOUT_CLASSIFICATION	9.618897663697034E-4	DESIGN
// HHH-2300	WITHOUT_CLASSIFICATION	0.9986467293478192	WITHOUT_CLASSIFICATION	0.001353270652180833	DESIGN
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9973628076452374	WITHOUT_CLASSIFICATION	0.0026371923547626715	DESIGN
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993653005157503	WITHOUT_CLASSIFICATION	6.346994842497782E-4	DESIGN
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988971224479785	WITHOUT_CLASSIFICATION	0.0011028775520215974	DESIGN
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993623120568832	WITHOUT_CLASSIFICATION	6.376879431167645E-4	DESIGN
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994231409038914	WITHOUT_CLASSIFICATION	5.768590961086973E-4	DESIGN
// not null is implicit	WITHOUT_CLASSIFICATION	0.9961493059853618	WITHOUT_CLASSIFICATION	0.003850694014638367	DESIGN
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999930124326111	WITHOUT_CLASSIFICATION	6.987567388970502E-6	DESIGN
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.999509564032697	WITHOUT_CLASSIFICATION	4.904359673030014E-4	DESIGN
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999995390830496	WITHOUT_CLASSIFICATION	4.6091695040863053E-7	DESIGN
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994672057308661	WITHOUT_CLASSIFICATION	5.327942691339405E-4	DESIGN
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9989936984528471	WITHOUT_CLASSIFICATION	0.001006301547152797	DESIGN
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9995788137458482	WITHOUT_CLASSIFICATION	4.2118625415175367E-4	DESIGN
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9990367899681196	WITHOUT_CLASSIFICATION	9.632100318803952E-4	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9772101354848548	WITHOUT_CLASSIFICATION	0.02278986451514524	DESIGN
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.8912243430338257	WITHOUT_CLASSIFICATION	0.10877565696617436	DESIGN
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9982106146112525	WITHOUT_CLASSIFICATION	0.0017893853887475395	DESIGN
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9984714865985147	WITHOUT_CLASSIFICATION	0.0015285134014854087	DESIGN
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9913744419329439	WITHOUT_CLASSIFICATION	0.008625558067056251	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994841191779691	WITHOUT_CLASSIFICATION	5.158808220308495E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.996711099345361	WITHOUT_CLASSIFICATION	0.0032889006546391432	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9925023530128408	WITHOUT_CLASSIFICATION	0.007497646987159163	DESIGN
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999735485089759	WITHOUT_CLASSIFICATION	2.645149102421544E-5	DESIGN
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9996363915053278	WITHOUT_CLASSIFICATION	3.636084946721653E-4	DESIGN
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9994493696573025	WITHOUT_CLASSIFICATION	5.506303426975855E-4	DESIGN
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.998156524806541	WITHOUT_CLASSIFICATION	0.0018434751934590836	DESIGN
// function templates	WITHOUT_CLASSIFICATION	0.9998215094006003	WITHOUT_CLASSIFICATION	1.784905993997435E-4	DESIGN
//not null is implicit	WITHOUT_CLASSIFICATION	0.9976314551583066	WITHOUT_CLASSIFICATION	0.002368544841693305	DESIGN
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9993404553806287	WITHOUT_CLASSIFICATION	6.595446193712891E-4	DESIGN
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9996649469297315	WITHOUT_CLASSIFICATION	3.350530702685783E-4	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9993677973659547	WITHOUT_CLASSIFICATION	6.322026340453234E-4	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9990300192351131	WITHOUT_CLASSIFICATION	9.699807648867607E-4	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9989199138217668	WITHOUT_CLASSIFICATION	0.001080086178233199	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9997909094774564	WITHOUT_CLASSIFICATION	2.090905225436511E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994841191779691	WITHOUT_CLASSIFICATION	5.158808220308495E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994841191779691	WITHOUT_CLASSIFICATION	5.158808220308495E-4	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9922333334846963	WITHOUT_CLASSIFICATION	0.007766666515303709	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9996982281014674	WITHOUT_CLASSIFICATION	3.017718985325602E-4	DESIGN
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9987171678651073	WITHOUT_CLASSIFICATION	0.0012828321348925915	DESIGN
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9986943340242485	WITHOUT_CLASSIFICATION	0.0013056659757516133	DESIGN
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9994519272195297	WITHOUT_CLASSIFICATION	5.480727804702735E-4	DESIGN
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9984184095426586	WITHOUT_CLASSIFICATION	0.0015815904573414127	DESIGN
// add new ordered map	WITHOUT_CLASSIFICATION	0.9992906873300396	WITHOUT_CLASSIFICATION	7.093126699604917E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994841191779691	WITHOUT_CLASSIFICATION	5.158808220308495E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9997483317226681	WITHOUT_CLASSIFICATION	2.5166827733190503E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9992792421985681	WITHOUT_CLASSIFICATION	7.207578014318088E-4	DESIGN
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9812110583631465	WITHOUT_CLASSIFICATION	0.018788941636853507	DESIGN
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9991562998252288	WITHOUT_CLASSIFICATION	8.437001747711345E-4	DESIGN
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9968365751010232	WITHOUT_CLASSIFICATION	0.0031634248989768133	DESIGN
// No batch statements	WITHOUT_CLASSIFICATION	0.9998840894882003	WITHOUT_CLASSIFICATION	1.1591051179975582E-4	DESIGN
/*	WITHOUT_CLASSIFICATION	0.8998848208396077	WITHOUT_CLASSIFICATION	0.10011517916039232	DESIGN
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9983078408988031	WITHOUT_CLASSIFICATION	0.0016921591011968828	DESIGN
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9986241180908604	WITHOUT_CLASSIFICATION	0.0013758819091395384	DESIGN
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9985524228499131	WITHOUT_CLASSIFICATION	0.0014475771500868974	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.996711099345361	WITHOUT_CLASSIFICATION	0.0032889006546391432	DESIGN
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.990787692401265	WITHOUT_CLASSIFICATION	0.009212307598734938	DESIGN
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9998669100339168	WITHOUT_CLASSIFICATION	1.33089966083173E-4	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9665306487168542	WITHOUT_CLASSIFICATION	0.033469351283145723	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.996711099345361	WITHOUT_CLASSIFICATION	0.0032889006546391432	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9996279698663633	WITHOUT_CLASSIFICATION	3.7203013363679437E-4	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9997483317226681	WITHOUT_CLASSIFICATION	2.5166827733190503E-4	DESIGN
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9885064725412767	WITHOUT_CLASSIFICATION	0.011493527458723394	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994841191779691	WITHOUT_CLASSIFICATION	5.158808220308495E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9937077112668741	WITHOUT_CLASSIFICATION	0.006292288733125835	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994841191779691	WITHOUT_CLASSIFICATION	5.158808220308495E-4	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999782580248844	WITHOUT_CLASSIFICATION	2.1741975115555292E-5	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9993677973659547	WITHOUT_CLASSIFICATION	6.322026340453234E-4	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9990300192351131	WITHOUT_CLASSIFICATION	9.699807648867607E-4	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9989199138217668	WITHOUT_CLASSIFICATION	0.001080086178233199	DESIGN
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.999974430838748	WITHOUT_CLASSIFICATION	2.5569161251946144E-5	DESIGN
// add the main query	WITHOUT_CLASSIFICATION	0.999480970458852	WITHOUT_CLASSIFICATION	5.190295411480393E-4	DESIGN
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9998400801416983	WITHOUT_CLASSIFICATION	1.5991985830170167E-4	DESIGN
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9998575824596752	WITHOUT_CLASSIFICATION	1.42417540324922E-4	DESIGN
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999981885381211	WITHOUT_CLASSIFICATION	1.8114618790539103E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994841191779691	WITHOUT_CLASSIFICATION	5.158808220308495E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.996711099345361	WITHOUT_CLASSIFICATION	0.0032889006546391432	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9997909094774564	WITHOUT_CLASSIFICATION	2.090905225436511E-4	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9922333334846963	WITHOUT_CLASSIFICATION	0.007766666515303709	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981270474194741	WITHOUT_CLASSIFICATION	0.0018729525805258442	DESIGN
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995600349084808	WITHOUT_CLASSIFICATION	4.3996509151925046E-4	DESIGN
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999290308108341	WITHOUT_CLASSIFICATION	7.096918916600323E-5	DESIGN
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9985795622542714	WITHOUT_CLASSIFICATION	0.0014204377457286209	DESIGN
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9982582929743117	WITHOUT_CLASSIFICATION	0.0017417070256883298	DESIGN
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.7161138263159491	DESIGN	0.28388617368405095	WITHOUT_CLASSIFICATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978481411403699	WITHOUT_CLASSIFICATION	0.002151858859630113	DESIGN
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9963387591829791	WITHOUT_CLASSIFICATION	0.00366124081702086	DESIGN
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9889603882216141	WITHOUT_CLASSIFICATION	0.011039611778385874	DESIGN
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9926079637325124	WITHOUT_CLASSIFICATION	0.007392036267487714	DESIGN
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9982077897540322	WITHOUT_CLASSIFICATION	0.001792210245967738	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.998946865739978	WITHOUT_CLASSIFICATION	0.0010531342600219743	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978481411403699	WITHOUT_CLASSIFICATION	0.002151858859630113	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981851658195688	WITHOUT_CLASSIFICATION	0.001814834180431221	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9819529439442686	WITHOUT_CLASSIFICATION	0.018047056055731505	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.998946865739978	WITHOUT_CLASSIFICATION	0.0010531342600219743	DESIGN
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9990955695698862	WITHOUT_CLASSIFICATION	9.044304301137544E-4	DESIGN
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9981093382229707	WITHOUT_CLASSIFICATION	0.0018906617770292576	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977945155366799	WITHOUT_CLASSIFICATION	0.002205484463320183	DESIGN
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978481411403699	WITHOUT_CLASSIFICATION	0.002151858859630113	DESIGN
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9909543686693886	WITHOUT_CLASSIFICATION	0.00904563133061136	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994841191779691	WITHOUT_CLASSIFICATION	5.158808220308495E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994841191779691	WITHOUT_CLASSIFICATION	5.158808220308495E-4	DESIGN
/*<String>*/	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9895445208781063	WITHOUT_CLASSIFICATION	0.010455479121893771	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978481411403699	WITHOUT_CLASSIFICATION	0.002151858859630113	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9772101354848548	WITHOUT_CLASSIFICATION	0.02278986451514524	DESIGN
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9910218644185902	WITHOUT_CLASSIFICATION	0.008978135581409882	DESIGN
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9918998112269116	WITHOUT_CLASSIFICATION	0.008100188773088463	DESIGN
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999417126589452	WITHOUT_CLASSIFICATION	5.828734105489953E-5	DESIGN
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9981349943713478	WITHOUT_CLASSIFICATION	0.001865005628652213	DESIGN
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9991840270925849	WITHOUT_CLASSIFICATION	8.159729074151801E-4	DESIGN
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9988016059915608	WITHOUT_CLASSIFICATION	0.0011983940084392187	DESIGN
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9995647190381536	WITHOUT_CLASSIFICATION	4.35280961846401E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9942552023686088	WITHOUT_CLASSIFICATION	0.005744797631391244	DESIGN
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.998835890639774	WITHOUT_CLASSIFICATION	0.0011641093602261197	DESIGN
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9678096927305864	WITHOUT_CLASSIFICATION	0.03219030726941358	DESIGN
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9990412573109504	WITHOUT_CLASSIFICATION	9.587426890495793E-4	DESIGN
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.999382980680159	WITHOUT_CLASSIFICATION	6.17019319840974E-4	DESIGN
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999534934100259	WITHOUT_CLASSIFICATION	4.650658997395937E-5	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.998777216778866	WITHOUT_CLASSIFICATION	0.0012227832211340473	DESIGN
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995821830586326	WITHOUT_CLASSIFICATION	4.1781694136739837E-4	DESIGN
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993637369663212	WITHOUT_CLASSIFICATION	6.362630336788308E-4	DESIGN
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998771052936801	WITHOUT_CLASSIFICATION	1.2289470631989525E-4	DESIGN
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9974440862704682	WITHOUT_CLASSIFICATION	0.002555913729531708	DESIGN
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9977671077360536	WITHOUT_CLASSIFICATION	0.002232892263946405	DESIGN
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9994051310787135	WITHOUT_CLASSIFICATION	5.948689212864173E-4	DESIGN
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997245825992579	WITHOUT_CLASSIFICATION	2.7541740074202254E-4	DESIGN
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9991008073032559	WITHOUT_CLASSIFICATION	8.991926967441905E-4	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9990390927487175	WITHOUT_CLASSIFICATION	9.609072512825187E-4	DESIGN
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9935751850236044	WITHOUT_CLASSIFICATION	0.006424814976395562	DESIGN
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9946751486684463	WITHOUT_CLASSIFICATION	0.005324851331553652	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9991008073032559	WITHOUT_CLASSIFICATION	8.991926967441905E-4	DESIGN
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9994193505640112	WITHOUT_CLASSIFICATION	5.806494359888355E-4	DESIGN
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996899340126782	WITHOUT_CLASSIFICATION	3.1006598732177245E-4	DESIGN
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982627191205142	WITHOUT_CLASSIFICATION	0.0017372808794857081	DESIGN
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9994435486161725	WITHOUT_CLASSIFICATION	5.564513838275377E-4	DESIGN
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9807706419708654	WITHOUT_CLASSIFICATION	0.019229358029134645	DESIGN
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9977782416809629	WITHOUT_CLASSIFICATION	0.002221758319037143	DESIGN
// continue loop	WITHOUT_CLASSIFICATION	0.9998414307183427	WITHOUT_CLASSIFICATION	1.5856928165730258E-4	DESIGN
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9995888541846185	WITHOUT_CLASSIFICATION	4.1114581538148783E-4	DESIGN
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9995888541846185	WITHOUT_CLASSIFICATION	4.1114581538148783E-4	DESIGN
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.999903158608054	WITHOUT_CLASSIFICATION	9.684139194596653E-5	DESIGN
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9995915708066088	WITHOUT_CLASSIFICATION	4.0842919339121946E-4	DESIGN
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9978979989062727	WITHOUT_CLASSIFICATION	0.0021020010937272443	DESIGN
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.999969939084905	WITHOUT_CLASSIFICATION	3.0060915095043185E-5	DESIGN
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.999833626359242	WITHOUT_CLASSIFICATION	1.6637364075808994E-4	DESIGN
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9996265875151519	WITHOUT_CLASSIFICATION	3.7341248484806073E-4	DESIGN
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9994901782403681	WITHOUT_CLASSIFICATION	5.098217596318082E-4	DESIGN
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9997114166333566	WITHOUT_CLASSIFICATION	2.8858336664344507E-4	DESIGN
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9979982563019857	WITHOUT_CLASSIFICATION	0.0020017436980142023	DESIGN
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999552896571006	WITHOUT_CLASSIFICATION	4.4710342899521166E-5	DESIGN
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999759976634015	WITHOUT_CLASSIFICATION	2.400233659853352E-5	DESIGN
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9998678032959912	WITHOUT_CLASSIFICATION	1.3219670400889974E-4	DESIGN
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9990989313112039	WITHOUT_CLASSIFICATION	9.010686887960796E-4	DESIGN
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9952792145304349	WITHOUT_CLASSIFICATION	0.0047207854695650794	DESIGN
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9994068784067767	WITHOUT_CLASSIFICATION	5.931215932232849E-4	DESIGN
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9879717640722274	WITHOUT_CLASSIFICATION	0.012028235927772541	DESIGN
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9996763751241277	WITHOUT_CLASSIFICATION	3.236248758724279E-4	DESIGN
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9978548679275463	WITHOUT_CLASSIFICATION	0.0021451320724537076	DESIGN
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9969754339014684	WITHOUT_CLASSIFICATION	0.0030245660985315868	DESIGN
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.999469235443193	WITHOUT_CLASSIFICATION	5.307645568069128E-4	DESIGN
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9996679015162035	WITHOUT_CLASSIFICATION	3.3209848379644503E-4	DESIGN
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9997244763807661	WITHOUT_CLASSIFICATION	2.755236192339069E-4	DESIGN
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999809624980769	WITHOUT_CLASSIFICATION	1.903750192309152E-5	DESIGN
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999304114329719	WITHOUT_CLASSIFICATION	6.958856702802497E-5	DESIGN
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.999782433245141	WITHOUT_CLASSIFICATION	2.1756675485896864E-4	DESIGN
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9997579728713025	WITHOUT_CLASSIFICATION	2.4202712869753843E-4	DESIGN
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9997503732169313	WITHOUT_CLASSIFICATION	2.496267830686442E-4	DESIGN
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9995229852795217	WITHOUT_CLASSIFICATION	4.770147204782892E-4	DESIGN
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9723349339191429	WITHOUT_CLASSIFICATION	0.027665066080857045	DESIGN
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9987730590269439	WITHOUT_CLASSIFICATION	0.0012269409730560398	DESIGN
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9994697056337493	WITHOUT_CLASSIFICATION	5.302943662507631E-4	DESIGN
//unwrap the object	WITHOUT_CLASSIFICATION	0.996758208625596	WITHOUT_CLASSIFICATION	0.0032417913744040017	DESIGN
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9997086070050698	WITHOUT_CLASSIFICATION	2.91392994930263E-4	DESIGN
//return the proxied object	WITHOUT_CLASSIFICATION	0.9979245152732074	WITHOUT_CLASSIFICATION	0.0020754847267926433	DESIGN
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9995974853268602	WITHOUT_CLASSIFICATION	4.025146731398301E-4	DESIGN
// early exit...	WITHOUT_CLASSIFICATION	0.9989650491546808	WITHOUT_CLASSIFICATION	0.0010349508453192033	DESIGN
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.991314472092895	WITHOUT_CLASSIFICATION	0.008685527907104878	DESIGN
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.991971003072842	WITHOUT_CLASSIFICATION	0.008028996927157996	DESIGN
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9907078023915453	WITHOUT_CLASSIFICATION	0.009292197608454731	DESIGN
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.999989166514294	WITHOUT_CLASSIFICATION	1.0833485705925611E-5	DESIGN
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9845209703210915	WITHOUT_CLASSIFICATION	0.015479029678908483	DESIGN
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9986943340242485	WITHOUT_CLASSIFICATION	0.0013056659757516133	DESIGN
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9986943340242485	WITHOUT_CLASSIFICATION	0.0013056659757516133	DESIGN
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9978964482773125	WITHOUT_CLASSIFICATION	0.002103551722687508	DESIGN
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9949532881393411	WITHOUT_CLASSIFICATION	0.005046711860658853	DESIGN
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9981788008035282	WITHOUT_CLASSIFICATION	0.001821199196471812	DESIGN
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.999986682646266	WITHOUT_CLASSIFICATION	1.3317353734113786E-5	DESIGN
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9998123867295318	WITHOUT_CLASSIFICATION	1.8761327046814847E-4	DESIGN
//bad cast	WITHOUT_CLASSIFICATION	0.997398671392625	WITHOUT_CLASSIFICATION	0.002601328607374979	DESIGN
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9988169243599446	WITHOUT_CLASSIFICATION	0.0011830756400554399	DESIGN
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9858545802281943	WITHOUT_CLASSIFICATION	0.014145419771805643	DESIGN
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9998981117948399	WITHOUT_CLASSIFICATION	1.0188820516015991E-4	DESIGN
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9953467500210434	WITHOUT_CLASSIFICATION	0.0046532499789565165	DESIGN
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9977671077360536	WITHOUT_CLASSIFICATION	0.002232892263946405	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9988089828565329	WITHOUT_CLASSIFICATION	0.0011910171434672146	DESIGN
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9500579226117088	WITHOUT_CLASSIFICATION	0.049942077388291074	DESIGN
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9995361330207223	WITHOUT_CLASSIFICATION	4.638669792777248E-4	DESIGN
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9993303446039619	WITHOUT_CLASSIFICATION	6.696553960381075E-4	DESIGN
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9978911422495017	WITHOUT_CLASSIFICATION	0.002108857750498214	DESIGN
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9973101222703525	WITHOUT_CLASSIFICATION	0.0026898777296475245	DESIGN
//take a snapshot	WITHOUT_CLASSIFICATION	0.9959400942845686	WITHOUT_CLASSIFICATION	0.004059905715431306	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9981929643804656	WITHOUT_CLASSIFICATION	0.001807035619534526	DESIGN
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9982134127906737	WITHOUT_CLASSIFICATION	0.0017865872093263953	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9985269765720843	WITHOUT_CLASSIFICATION	0.0014730234279156577	DESIGN
// We've been here before	WITHOUT_CLASSIFICATION	0.989361679017694	WITHOUT_CLASSIFICATION	0.010638320982305965	DESIGN
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999321192220667	WITHOUT_CLASSIFICATION	6.788077793336408E-5	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9985269765720843	WITHOUT_CLASSIFICATION	0.0014730234279156577	DESIGN
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9998285958143077	WITHOUT_CLASSIFICATION	1.714041856923486E-4	DESIGN
// or its key changed	WITHOUT_CLASSIFICATION	0.9999477535751543	WITHOUT_CLASSIFICATION	5.2246424845590004E-5	DESIGN
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9985643230075077	WITHOUT_CLASSIFICATION	0.0014356769924922042	DESIGN
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9939688579915827	WITHOUT_CLASSIFICATION	0.006031142008417206	DESIGN
// force initialize!	WITHOUT_CLASSIFICATION	0.9965398364269129	WITHOUT_CLASSIFICATION	0.0034601635730870145	DESIGN
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999547236229647	WITHOUT_CLASSIFICATION	4.52763770354222E-5	DESIGN
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9985795622542714	WITHOUT_CLASSIFICATION	0.0014204377457286209	DESIGN
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9995297837197427	WITHOUT_CLASSIFICATION	4.7021628025724826E-4	DESIGN
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9970661035422894	WITHOUT_CLASSIFICATION	0.002933896457710485	DESIGN
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9945857458063442	WITHOUT_CLASSIFICATION	0.005414254193655852	DESIGN
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999381978394187	WITHOUT_CLASSIFICATION	6.180216058127452E-5	DESIGN
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.999929001525869	WITHOUT_CLASSIFICATION	7.099847413093497E-5	DESIGN
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9963874675249662	WITHOUT_CLASSIFICATION	0.003612532475033867	DESIGN
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9992741455356937	WITHOUT_CLASSIFICATION	7.258544643061806E-4	DESIGN
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9982513775094503	WITHOUT_CLASSIFICATION	0.001748622490549726	DESIGN
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.977969038635378	WITHOUT_CLASSIFICATION	0.02203096136462199	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9977671077360536	WITHOUT_CLASSIFICATION	0.002232892263946405	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9977671077360536	WITHOUT_CLASSIFICATION	0.002232892263946405	DESIGN
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9998012167887513	WITHOUT_CLASSIFICATION	1.9878321124869108E-4	DESIGN
//optimization	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9977671077360536	WITHOUT_CLASSIFICATION	0.002232892263946405	DESIGN
//re-snapshot	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9993792566014079	WITHOUT_CLASSIFICATION	6.207433985920977E-4	DESIGN
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.987539922848649	WITHOUT_CLASSIFICATION	0.01246007715135094	DESIGN
//memory optimization	WITHOUT_CLASSIFICATION	0.9991022749019872	WITHOUT_CLASSIFICATION	8.977250980127311E-4	DESIGN
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9988613660916065	WITHOUT_CLASSIFICATION	0.0011386339083934735	DESIGN
// copied from Session:	WITHOUT_CLASSIFICATION	0.9870532826500401	WITHOUT_CLASSIFICATION	0.01294671734995998	DESIGN
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9976253591675697	WITHOUT_CLASSIFICATION	0.0023746408324304196	DESIGN
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9998397947497252	WITHOUT_CLASSIFICATION	1.6020525027477374E-4	DESIGN
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999749641131226	WITHOUT_CLASSIFICATION	2.5035886877412665E-5	DESIGN
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9992692449129382	WITHOUT_CLASSIFICATION	7.307550870618473E-4	DESIGN
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9823049238064027	WITHOUT_CLASSIFICATION	0.017695076193597403	DESIGN
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.998562357491725	WITHOUT_CLASSIFICATION	0.001437642508274991	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.998777216778866	WITHOUT_CLASSIFICATION	0.0012227832211340473	DESIGN
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9994062971476522	WITHOUT_CLASSIFICATION	5.937028523478109E-4	DESIGN
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9992247203952661	WITHOUT_CLASSIFICATION	7.752796047338563E-4	DESIGN
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9747475121601482	WITHOUT_CLASSIFICATION	0.025252487839851772	DESIGN
//do the test	WITHOUT_CLASSIFICATION	0.9998934801981039	WITHOUT_CLASSIFICATION	1.0651980189620749E-4	DESIGN
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999076462844181	WITHOUT_CLASSIFICATION	9.23537155819306E-5	DESIGN
//unwrap it	WITHOUT_CLASSIFICATION	0.9973676957258033	WITHOUT_CLASSIFICATION	0.002632304274196711	DESIGN
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9447097961873574	WITHOUT_CLASSIFICATION	0.055290203812642644	DESIGN
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9998872920610578	WITHOUT_CLASSIFICATION	1.1270793894225854E-4	DESIGN
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9845624988744278	WITHOUT_CLASSIFICATION	0.015437501125572179	DESIGN
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9595716687989554	WITHOUT_CLASSIFICATION	0.040428331201044596	DESIGN
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999767541868478	WITHOUT_CLASSIFICATION	2.3245813152213182E-5	DESIGN
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9892779919212217	WITHOUT_CLASSIFICATION	0.010722008078778352	DESIGN
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9877227896829609	WITHOUT_CLASSIFICATION	0.01227721031703903	DESIGN
//int count = 0;	WITHOUT_CLASSIFICATION	0.9995840911841858	WITHOUT_CLASSIFICATION	4.159088158141651E-4	DESIGN
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999718341798998	WITHOUT_CLASSIFICATION	2.8165820100249167E-5	DESIGN
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9991747809209734	WITHOUT_CLASSIFICATION	8.252190790265629E-4	DESIGN
//count++;	WITHOUT_CLASSIFICATION	0.9986726729315074	WITHOUT_CLASSIFICATION	0.0013273270684926075	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9998681820452265	WITHOUT_CLASSIFICATION	1.3181795477345388E-4	DESIGN
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9982032767876983	WITHOUT_CLASSIFICATION	0.0017967232123017732	DESIGN
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9830228256874454	WITHOUT_CLASSIFICATION	0.01697717431255467	DESIGN
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999358660901833	WITHOUT_CLASSIFICATION	6.413390981674632E-5	DESIGN
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9994583079540266	WITHOUT_CLASSIFICATION	5.416920459733987E-4	DESIGN
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9967786888761199	WITHOUT_CLASSIFICATION	0.0032213111238800596	DESIGN
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9998561301612423	WITHOUT_CLASSIFICATION	1.4386983875774813E-4	DESIGN
// initialize this collection	WITHOUT_CLASSIFICATION	0.9824141384320844	WITHOUT_CLASSIFICATION	0.017585861567915584	DESIGN
// create one	WITHOUT_CLASSIFICATION	0.9991497951047954	WITHOUT_CLASSIFICATION	8.502048952047402E-4	DESIGN
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9913744696846372	WITHOUT_CLASSIFICATION	0.00862553031536287	DESIGN
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9997964099086701	WITHOUT_CLASSIFICATION	2.0359009132976655E-4	DESIGN
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9931059263808285	WITHOUT_CLASSIFICATION	0.006894073619171398	DESIGN
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.998430338203485	WITHOUT_CLASSIFICATION	0.0015696617965149024	DESIGN
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991426177336785	WITHOUT_CLASSIFICATION	8.57382266321451E-4	DESIGN
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996172428332702	WITHOUT_CLASSIFICATION	3.8275716672981676E-4	DESIGN
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993771856380504	WITHOUT_CLASSIFICATION	6.228143619495586E-4	DESIGN
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9734489593310829	WITHOUT_CLASSIFICATION	0.026551040668917145	DESIGN
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9996432832200249	WITHOUT_CLASSIFICATION	3.567167799750586E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999802432293189	WITHOUT_CLASSIFICATION	1.975677068102515E-5	DESIGN
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9849785488892292	WITHOUT_CLASSIFICATION	0.01502145111077093	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9970907910801435	WITHOUT_CLASSIFICATION	0.002909208919856477	DESIGN
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980260814287569	WITHOUT_CLASSIFICATION	0.0019739185712430688	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9970907910801435	WITHOUT_CLASSIFICATION	0.002909208919856477	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9994451610463226	WITHOUT_CLASSIFICATION	5.548389536773314E-4	DESIGN
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9998676944621323	WITHOUT_CLASSIFICATION	1.3230553786763158E-4	DESIGN
// named parameter	WITHOUT_CLASSIFICATION	0.9948372134506462	WITHOUT_CLASSIFICATION	0.005162786549353741	DESIGN
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9590764708978915	WITHOUT_CLASSIFICATION	0.04092352910210853	DESIGN
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9813062012770044	WITHOUT_CLASSIFICATION	0.018693798722995612	DESIGN
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9980403057671589	WITHOUT_CLASSIFICATION	0.001959694232841122	DESIGN
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9992858950118428	WITHOUT_CLASSIFICATION	7.141049881572177E-4	DESIGN
// perform the actual work	WITHOUT_CLASSIFICATION	0.9988966486701516	WITHOUT_CLASSIFICATION	0.0011033513298484077	DESIGN
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999832657144626	WITHOUT_CLASSIFICATION	1.6734285537302115E-5	DESIGN
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.982889063783365	WITHOUT_CLASSIFICATION	0.01711093621663493	DESIGN
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9963156318334968	WITHOUT_CLASSIFICATION	0.003684368166503271	DESIGN
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9640175040434452	WITHOUT_CLASSIFICATION	0.0359824959565548	DESIGN
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9992445038903569	WITHOUT_CLASSIFICATION	7.554961096431291E-4	DESIGN
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.7762772976180314	WITHOUT_CLASSIFICATION	0.2237227023819685	DESIGN
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9637391384166638	WITHOUT_CLASSIFICATION	0.03626086158333622	DESIGN
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9928893489124463	WITHOUT_CLASSIFICATION	0.007110651087553665	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9996240353905913	WITHOUT_CLASSIFICATION	3.7596460940868406E-4	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9996240353905913	WITHOUT_CLASSIFICATION	3.7596460940868406E-4	DESIGN
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9953467500210434	WITHOUT_CLASSIFICATION	0.0046532499789565165	DESIGN
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9992557420310009	WITHOUT_CLASSIFICATION	7.44257968999154E-4	DESIGN
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.999901784077303	WITHOUT_CLASSIFICATION	9.821592269703119E-5	DESIGN
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999943138414101	WITHOUT_CLASSIFICATION	5.686158589780108E-6	DESIGN
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9988046481568567	WITHOUT_CLASSIFICATION	0.0011953518431433356	DESIGN
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9951914712304957	WITHOUT_CLASSIFICATION	0.004808528769504239	DESIGN
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9412812058520422	WITHOUT_CLASSIFICATION	0.05871879414795771	DESIGN
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9976099193229012	WITHOUT_CLASSIFICATION	0.0023900806770987596	DESIGN
// grab its current state	WITHOUT_CLASSIFICATION	0.999867569744694	WITHOUT_CLASSIFICATION	1.3243025530605506E-4	DESIGN
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999293753442899	WITHOUT_CLASSIFICATION	7.062465571004971E-5	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9997065927995827	WITHOUT_CLASSIFICATION	2.934072004172187E-4	DESIGN
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9998847335313037	WITHOUT_CLASSIFICATION	1.1526646869631909E-4	DESIGN
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9996948164739639	WITHOUT_CLASSIFICATION	3.051835260361841E-4	DESIGN
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9998356387367409	WITHOUT_CLASSIFICATION	1.643612632591736E-4	DESIGN
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9998535943465883	WITHOUT_CLASSIFICATION	1.464056534116892E-4	DESIGN
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9959111418993487	WITHOUT_CLASSIFICATION	0.00408885810065124	DESIGN
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9902439039240081	WITHOUT_CLASSIFICATION	0.009756096075991894	DESIGN
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9602599124872132	WITHOUT_CLASSIFICATION	0.03974008751278677	DESIGN
//use the current version	WITHOUT_CLASSIFICATION	0.9998836418298941	WITHOUT_CLASSIFICATION	1.163581701058786E-4	DESIGN
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999569477776423	WITHOUT_CLASSIFICATION	4.305222235777546E-5	DESIGN
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9997465526541125	WITHOUT_CLASSIFICATION	2.5344734588746907E-4	DESIGN
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.999986026461546	WITHOUT_CLASSIFICATION	1.3973538454010283E-5	DESIGN
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.999997224230969	WITHOUT_CLASSIFICATION	2.7757690310618806E-6	DESIGN
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9976695888735252	WITHOUT_CLASSIFICATION	0.0023304111264749396	DESIGN
//even process null collections	WITHOUT_CLASSIFICATION	0.9995712520582706	WITHOUT_CLASSIFICATION	4.287479417294199E-4	DESIGN
// get the id from the object	WITHOUT_CLASSIFICATION	0.9988513928394672	WITHOUT_CLASSIFICATION	0.0011486071605327855	DESIGN
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9997586720394914	WITHOUT_CLASSIFICATION	2.413279605085531E-4	DESIGN
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9997034932069881	WITHOUT_CLASSIFICATION	2.9650679301183104E-4	DESIGN
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9971712515656277	WITHOUT_CLASSIFICATION	0.0028287484343723366	DESIGN
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9993531689729118	WITHOUT_CLASSIFICATION	6.468310270881135E-4	DESIGN
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9996009892076004	WITHOUT_CLASSIFICATION	3.9901079239958507E-4	DESIGN
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9989078505190685	WITHOUT_CLASSIFICATION	0.0010921494809314396	DESIGN
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9994969305307352	WITHOUT_CLASSIFICATION	5.030694692647578E-4	DESIGN
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9991835147724871	WITHOUT_CLASSIFICATION	8.164852275127333E-4	DESIGN
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9986249899995527	WITHOUT_CLASSIFICATION	0.0013750100004472207	DESIGN
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.997906160065652	WITHOUT_CLASSIFICATION	0.002093839934347926	DESIGN
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9998293376155403	WITHOUT_CLASSIFICATION	1.7066238445973973E-4	DESIGN
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9974458996954451	WITHOUT_CLASSIFICATION	0.0025541003045549417	DESIGN
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9996930194755119	WITHOUT_CLASSIFICATION	3.069805244879985E-4	DESIGN
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9995983077969173	WITHOUT_CLASSIFICATION	4.016922030827685E-4	DESIGN
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999458384332262	WITHOUT_CLASSIFICATION	5.416156677383695E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999137575247246	WITHOUT_CLASSIFICATION	8.624247527540081E-4	DESIGN
//some statistics	WITHOUT_CLASSIFICATION	0.9980279841479784	WITHOUT_CLASSIFICATION	0.0019720158520215355	DESIGN
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9997762409957354	WITHOUT_CLASSIFICATION	2.2375900426465606E-4	DESIGN
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9998969191589171	WITHOUT_CLASSIFICATION	1.0308084108289629E-4	DESIGN
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.966114271234004	WITHOUT_CLASSIFICATION	0.03388572876599594	DESIGN
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9666512407738644	WITHOUT_CLASSIFICATION	0.03334875922613551	DESIGN
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999985183856247	WITHOUT_CLASSIFICATION	1.48161437539668E-6	DESIGN
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9994540603261851	WITHOUT_CLASSIFICATION	5.459396738148554E-4	DESIGN
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9419433920908103	WITHOUT_CLASSIFICATION	0.058056607909189706	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999137575247246	WITHOUT_CLASSIFICATION	8.624247527540081E-4	DESIGN
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9986764458447709	WITHOUT_CLASSIFICATION	0.0013235541552290876	DESIGN
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9926085152532047	WITHOUT_CLASSIFICATION	0.007391484746795307	DESIGN
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9989233954429361	WITHOUT_CLASSIFICATION	0.0010766045570639279	DESIGN
//get a snapshot	WITHOUT_CLASSIFICATION	0.9963629202682426	WITHOUT_CLASSIFICATION	0.003637079731757545	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9996279698663633	WITHOUT_CLASSIFICATION	3.7203013363679437E-4	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9996279698663633	WITHOUT_CLASSIFICATION	3.7203013363679437E-4	DESIGN
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999739506068537	WITHOUT_CLASSIFICATION	2.604939314623845E-5	DESIGN
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9986467293478192	WITHOUT_CLASSIFICATION	0.001353270652180833	DESIGN
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9985685589558179	WITHOUT_CLASSIFICATION	0.0014314410441820522	DESIGN
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9996284961499118	WITHOUT_CLASSIFICATION	3.715038500881267E-4	DESIGN
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9998930482398911	WITHOUT_CLASSIFICATION	1.0695176010896668E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9994539595682111	WITHOUT_CLASSIFICATION	5.460404317888254E-4	DESIGN
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9996395073097921	WITHOUT_CLASSIFICATION	3.6049269020790284E-4	DESIGN
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.962531961614932	WITHOUT_CLASSIFICATION	0.03746803838506797	DESIGN
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999136244087227	WITHOUT_CLASSIFICATION	8.63755912773321E-5	DESIGN
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9994523939444382	WITHOUT_CLASSIFICATION	5.476060555617164E-4	DESIGN
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9996565683406401	WITHOUT_CLASSIFICATION	3.434316593599349E-4	DESIGN
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9996153104367863	WITHOUT_CLASSIFICATION	3.8468956321372687E-4	DESIGN
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.998848030029201	WITHOUT_CLASSIFICATION	0.001151969970799052	DESIGN
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9933333566167571	WITHOUT_CLASSIFICATION	0.006666643383242972	DESIGN
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.6585763890857527	DESIGN	0.34142361091424733	WITHOUT_CLASSIFICATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9855291750936237	WITHOUT_CLASSIFICATION	0.014470824906376321	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9968859947417599	WITHOUT_CLASSIFICATION	0.0031140052582400435	DESIGN
//cachedState,	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9896245472400009	WITHOUT_CLASSIFICATION	0.010375452759998951	DESIGN
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9977688339635197	WITHOUT_CLASSIFICATION	0.002231166036480285	DESIGN
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9541571897234269	WITHOUT_CLASSIFICATION	0.045842810276572984	DESIGN
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9988469716806903	WITHOUT_CLASSIFICATION	0.0011530283193097624	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9986917928447356	WITHOUT_CLASSIFICATION	0.0013082071552642824	DESIGN
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999910721671553	WITHOUT_CLASSIFICATION	8.927832844720368E-6	DESIGN
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.998494904679995	WITHOUT_CLASSIFICATION	0.0015050953200050848	DESIGN
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9998726744738687	WITHOUT_CLASSIFICATION	1.2732552613129095E-4	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9973658753434894	WITHOUT_CLASSIFICATION	0.002634124656510517	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9881394551297887	WITHOUT_CLASSIFICATION	0.011860544870211362	DESIGN
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999670434020205	WITHOUT_CLASSIFICATION	3.2956597979612754E-5	DESIGN
//DELETED	WITHOUT_CLASSIFICATION	0.9986726729315074	WITHOUT_CLASSIFICATION	0.0013273270684926075	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999123204018796	WITHOUT_CLASSIFICATION	8.76795981203517E-5	DESIGN
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.8784753412381023	WITHOUT_CLASSIFICATION	0.12152465876189754	DESIGN
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9759060784917537	WITHOUT_CLASSIFICATION	0.024093921508246286	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999123204018796	WITHOUT_CLASSIFICATION	8.76795981203517E-5	DESIGN
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9998744713784435	WITHOUT_CLASSIFICATION	1.255286215563792E-4	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.999021057938481	WITHOUT_CLASSIFICATION	9.789420615190635E-4	DESIGN
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999006994348246	WITHOUT_CLASSIFICATION	9.930056517543387E-5	DESIGN
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9903005890990977	WITHOUT_CLASSIFICATION	0.009699410900902348	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9974178118147897	WITHOUT_CLASSIFICATION	0.0025821881852102365	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9997065927995827	WITHOUT_CLASSIFICATION	2.934072004172187E-4	DESIGN
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9978253005967306	WITHOUT_CLASSIFICATION	0.0021746994032694044	DESIGN
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9988016059915608	WITHOUT_CLASSIFICATION	0.0011983940084392187	DESIGN
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999493598888138	WITHOUT_CLASSIFICATION	5.0640111186131445E-5	DESIGN
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9991831926756867	WITHOUT_CLASSIFICATION	8.168073243133861E-4	DESIGN
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999975425946303	WITHOUT_CLASSIFICATION	2.457405369666246E-6	DESIGN
// the object is persistent	WITHOUT_CLASSIFICATION	0.9991463981710708	WITHOUT_CLASSIFICATION	8.536018289293421E-4	DESIGN
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999009752686957	WITHOUT_CLASSIFICATION	9.90247313042839E-5	DESIGN
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9998969036976202	WITHOUT_CLASSIFICATION	1.0309630237986354E-4	DESIGN
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9977671077360536	WITHOUT_CLASSIFICATION	0.002232892263946405	DESIGN
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9996124956279885	WITHOUT_CLASSIFICATION	3.8750437201153534E-4	DESIGN
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9958308851206912	WITHOUT_CLASSIFICATION	0.0041691148793088295	DESIGN
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9939156336447229	WITHOUT_CLASSIFICATION	0.0060843663552770395	DESIGN
// eat it and try next	WITHOUT_CLASSIFICATION	0.9861322878093162	WITHOUT_CLASSIFICATION	0.013867712190683907	DESIGN
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9990266110360688	WITHOUT_CLASSIFICATION	9.733889639311142E-4	DESIGN
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9986282004872301	WITHOUT_CLASSIFICATION	0.0013717995127699376	DESIGN
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9981089180608064	WITHOUT_CLASSIFICATION	0.0018910819391936581	DESIGN
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9991171967492105	WITHOUT_CLASSIFICATION	8.828032507895879E-4	DESIGN
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9988752499390127	WITHOUT_CLASSIFICATION	0.0011247500609872319	DESIGN
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9985795622542714	WITHOUT_CLASSIFICATION	0.0014204377457286209	DESIGN
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9985795622542714	WITHOUT_CLASSIFICATION	0.0014204377457286209	DESIGN
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.998962717670833	WITHOUT_CLASSIFICATION	0.0010372823291670268	DESIGN
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9951500984651295	WITHOUT_CLASSIFICATION	0.004849901534870554	DESIGN
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9994087365670165	WITHOUT_CLASSIFICATION	5.912634329835051E-4	DESIGN
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9979343632207478	WITHOUT_CLASSIFICATION	0.002065636779252161	DESIGN
// Note this!!	WITHOUT_CLASSIFICATION	0.9996107957546156	WITHOUT_CLASSIFICATION	3.892042453843828E-4	DESIGN
// Error message constants.	WITHOUT_CLASSIFICATION	0.9980607208485794	WITHOUT_CLASSIFICATION	0.0019392791514205975	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985807278235702	WITHOUT_CLASSIFICATION	0.0014192721764297981	DESIGN
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977180505024307	WITHOUT_CLASSIFICATION	0.002281949497569364	DESIGN
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9951147609996247	WITHOUT_CLASSIFICATION	0.00488523900037526	DESIGN
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999591832719612	WITHOUT_CLASSIFICATION	4.081672803876778E-5	DESIGN
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9920004758112376	WITHOUT_CLASSIFICATION	0.007999524188762265	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9990369367956632	WITHOUT_CLASSIFICATION	9.630632043367838E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9990369367956632	WITHOUT_CLASSIFICATION	9.630632043367838E-4	DESIGN
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9908349285764683	WITHOUT_CLASSIFICATION	0.009165071423531677	DESIGN
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9977516695631042	WITHOUT_CLASSIFICATION	0.002248330436895675	DESIGN
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9998567226046539	WITHOUT_CLASSIFICATION	1.4327739534612238E-4	DESIGN
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999181251512681	WITHOUT_CLASSIFICATION	8.187484873198093E-5	DESIGN
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9993079458330042	WITHOUT_CLASSIFICATION	6.920541669957503E-4	DESIGN
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9940304570843194	WITHOUT_CLASSIFICATION	0.005969542915680623	DESIGN
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9954129570970386	WITHOUT_CLASSIFICATION	0.004587042902961371	DESIGN
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999325156109141	WITHOUT_CLASSIFICATION	6.74843890858685E-5	DESIGN
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9990582490729107	WITHOUT_CLASSIFICATION	9.417509270892655E-4	DESIGN
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.999928080260764	WITHOUT_CLASSIFICATION	7.191973923601958E-5	DESIGN
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9995882190393109	WITHOUT_CLASSIFICATION	4.1178096068902355E-4	DESIGN
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999542649582002	WITHOUT_CLASSIFICATION	4.573504179988556E-5	DESIGN
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.999652440441286	WITHOUT_CLASSIFICATION	3.475595587140612E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9990369367956632	WITHOUT_CLASSIFICATION	9.630632043367838E-4	DESIGN
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9990707580568027	WITHOUT_CLASSIFICATION	9.292419431973242E-4	DESIGN
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9944398262974309	WITHOUT_CLASSIFICATION	0.005560173702569109	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9203490152945721	WITHOUT_CLASSIFICATION	0.07965098470542785	DESIGN
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.998629341783236	WITHOUT_CLASSIFICATION	0.0013706582167640534	DESIGN
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9998348416815152	WITHOUT_CLASSIFICATION	1.6515831848474348E-4	DESIGN
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9995242074254295	WITHOUT_CLASSIFICATION	4.757925745706361E-4	DESIGN
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9996499503865552	WITHOUT_CLASSIFICATION	3.5004961344479E-4	DESIGN
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9986372682181329	WITHOUT_CLASSIFICATION	0.0013627317818669794	DESIGN
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9961168565503472	WITHOUT_CLASSIFICATION	0.003883143449652951	DESIGN
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.970720298318508	WITHOUT_CLASSIFICATION	0.029279701681492028	DESIGN
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9980169080081386	WITHOUT_CLASSIFICATION	0.001983091991861343	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985807278235702	WITHOUT_CLASSIFICATION	0.0014192721764297981	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9990369367956632	WITHOUT_CLASSIFICATION	9.630632043367838E-4	DESIGN
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9998899482063577	WITHOUT_CLASSIFICATION	1.1005179364232976E-4	DESIGN
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9977621833056408	WITHOUT_CLASSIFICATION	0.0022378166943592672	DESIGN
// switch	WITHOUT_CLASSIFICATION	0.999537821747292	WITHOUT_CLASSIFICATION	4.6217825270797764E-4	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9973786012631052	WITHOUT_CLASSIFICATION	0.0026213987368947796	DESIGN
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9985842627996728	WITHOUT_CLASSIFICATION	0.0014157372003272021	DESIGN
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9985892756731274	WITHOUT_CLASSIFICATION	0.0014107243268726291	DESIGN
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987055551714977	WITHOUT_CLASSIFICATION	0.0012944448285023406	DESIGN
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999715924845574	WITHOUT_CLASSIFICATION	2.8407515442648352E-5	DESIGN
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999577790761895	WITHOUT_CLASSIFICATION	4.222092381054385E-5	DESIGN
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9988670379238648	WITHOUT_CLASSIFICATION	0.0011329620761352634	DESIGN
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9995155128303993	WITHOUT_CLASSIFICATION	4.8448716960079123E-4	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9986013327949514	WITHOUT_CLASSIFICATION	0.0013986672050485679	DESIGN
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.99914769994672	WITHOUT_CLASSIFICATION	8.523000532799236E-4	DESIGN
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9709083071776182	WITHOUT_CLASSIFICATION	0.029091692822381873	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9994451610463226	WITHOUT_CLASSIFICATION	5.548389536773314E-4	DESIGN
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9994128855697423	WITHOUT_CLASSIFICATION	5.871144302577508E-4	DESIGN
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9996001209939415	WITHOUT_CLASSIFICATION	3.9987900605851226E-4	DESIGN
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9983623974409587	WITHOUT_CLASSIFICATION	0.00163760255904133	DESIGN
// all clear	WITHOUT_CLASSIFICATION	0.9989587357612837	WITHOUT_CLASSIFICATION	0.00104126423871636	DESIGN
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9995772243205705	WITHOUT_CLASSIFICATION	4.227756794295852E-4	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9992616757251721	WITHOUT_CLASSIFICATION	7.383242748279942E-4	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9992616757251721	WITHOUT_CLASSIFICATION	7.383242748279942E-4	DESIGN
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9998609533940795	WITHOUT_CLASSIFICATION	1.390466059204877E-4	DESIGN
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9912314946740219	WITHOUT_CLASSIFICATION	0.00876850532597815	DESIGN
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999537398337569	WITHOUT_CLASSIFICATION	4.626016624308293E-5	DESIGN
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.991753244271082	WITHOUT_CLASSIFICATION	0.008246755728918049	DESIGN
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9996553654219819	WITHOUT_CLASSIFICATION	3.4463457801811354E-4	DESIGN
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999886584261508	WITHOUT_CLASSIFICATION	1.134157384908506E-5	DESIGN
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9990204934640428	WITHOUT_CLASSIFICATION	9.795065359572467E-4	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9991769387305283	WITHOUT_CLASSIFICATION	8.230612694716724E-4	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9991769387305283	WITHOUT_CLASSIFICATION	8.230612694716724E-4	DESIGN
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9994832269882256	WITHOUT_CLASSIFICATION	5.167730117744793E-4	DESIGN
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9993826481282112	WITHOUT_CLASSIFICATION	6.173518717888153E-4	DESIGN
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9998891618939987	WITHOUT_CLASSIFICATION	1.1083810600129014E-4	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9995470420772036	WITHOUT_CLASSIFICATION	4.5295792279637423E-4	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9995470420772036	WITHOUT_CLASSIFICATION	4.5295792279637423E-4	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9995470420772036	WITHOUT_CLASSIFICATION	4.5295792279637423E-4	DESIGN
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999731181127745	WITHOUT_CLASSIFICATION	2.6881887225557788E-5	DESIGN
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9984978729989701	WITHOUT_CLASSIFICATION	0.001502127001029939	DESIGN
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9998470953479169	WITHOUT_CLASSIFICATION	1.5290465208307025E-4	DESIGN
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9987784572862374	WITHOUT_CLASSIFICATION	0.0012215427137626488	DESIGN
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9983875839784108	WITHOUT_CLASSIFICATION	0.0016124160215892692	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9990369367956632	WITHOUT_CLASSIFICATION	9.630632043367838E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9990369367956632	WITHOUT_CLASSIFICATION	9.630632043367838E-4	DESIGN
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9796644389658314	WITHOUT_CLASSIFICATION	0.02033556103416856	DESIGN
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9998622029354226	WITHOUT_CLASSIFICATION	1.3779706457738938E-4	DESIGN
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9676124992652363	WITHOUT_CLASSIFICATION	0.032387500734763666	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9952147134431983	WITHOUT_CLASSIFICATION	0.004785286556801628	DESIGN
// igndore it...	WITHOUT_CLASSIFICATION	0.9943551895514346	WITHOUT_CLASSIFICATION	0.005644810448565361	DESIGN
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9894502139967697	WITHOUT_CLASSIFICATION	0.010549786003230371	DESIGN
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.991206773708491	WITHOUT_CLASSIFICATION	0.008793226291509056	DESIGN
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9985582460502075	WITHOUT_CLASSIFICATION	0.0014417539497925283	DESIGN
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9998983594202399	WITHOUT_CLASSIFICATION	1.0164057976013963E-4	DESIGN
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999738570616792	WITHOUT_CLASSIFICATION	2.6142938320836366E-5	DESIGN
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999084975096771	WITHOUT_CLASSIFICATION	9.150249032287495E-5	DESIGN
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9991343377917015	WITHOUT_CLASSIFICATION	8.656622082985015E-4	DESIGN
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9991343377917015	WITHOUT_CLASSIFICATION	8.656622082985015E-4	DESIGN
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9991343377917015	WITHOUT_CLASSIFICATION	8.656622082985015E-4	DESIGN
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9991343377917015	WITHOUT_CLASSIFICATION	8.656622082985015E-4	DESIGN
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9991343377917015	WITHOUT_CLASSIFICATION	8.656622082985015E-4	DESIGN
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9994495898772133	WITHOUT_CLASSIFICATION	5.504101227866349E-4	DESIGN
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9994495898772133	WITHOUT_CLASSIFICATION	5.504101227866349E-4	DESIGN
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9994495898772133	WITHOUT_CLASSIFICATION	5.504101227866349E-4	DESIGN
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9994495898772133	WITHOUT_CLASSIFICATION	5.504101227866349E-4	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9964196928079119	WITHOUT_CLASSIFICATION	0.003580307192088152	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9992616757251721	WITHOUT_CLASSIFICATION	7.383242748279942E-4	DESIGN
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9989312101322998	WITHOUT_CLASSIFICATION	0.0010687898677001495	DESIGN
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9994495898772133	WITHOUT_CLASSIFICATION	5.504101227866349E-4	DESIGN
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9591224054136536	WITHOUT_CLASSIFICATION	0.04087759458634643	DESIGN
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9960877636941867	WITHOUT_CLASSIFICATION	0.003912236305813314	DESIGN
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9997382746755276	WITHOUT_CLASSIFICATION	2.617253244724968E-4	DESIGN
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9993308862212512	WITHOUT_CLASSIFICATION	6.691137787487447E-4	DESIGN
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9992765749835123	WITHOUT_CLASSIFICATION	7.234250164878289E-4	DESIGN
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9993447021258829	WITHOUT_CLASSIFICATION	6.552978741171371E-4	DESIGN
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999983266940597	WITHOUT_CLASSIFICATION	1.6733059402895314E-6	DESIGN
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9972802058339094	WITHOUT_CLASSIFICATION	0.0027197941660905816	DESIGN
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999961920434889	WITHOUT_CLASSIFICATION	3.807956511247777E-6	DESIGN
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999635522861929	WITHOUT_CLASSIFICATION	3.6447713807040824E-5	DESIGN
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999288541535606	WITHOUT_CLASSIFICATION	7.114584643932381E-5	DESIGN
// Set it!	WITHOUT_CLASSIFICATION	0.999687087330214	WITHOUT_CLASSIFICATION	3.129126697859159E-4	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9992558761855076	WITHOUT_CLASSIFICATION	7.441238144923979E-4	DESIGN
// strip the " where "	WITHOUT_CLASSIFICATION	0.9997714132491017	WITHOUT_CLASSIFICATION	2.285867508982649E-4	DESIGN
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.845372910634442	WITHOUT_CLASSIFICATION	0.15462708936555802	DESIGN
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9996532936933475	WITHOUT_CLASSIFICATION	3.4670630665249404E-4	DESIGN
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999175299331735	WITHOUT_CLASSIFICATION	8.247006682651579E-5	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9991087535456906	WITHOUT_CLASSIFICATION	8.912464543092938E-4	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9991087535456906	WITHOUT_CLASSIFICATION	8.912464543092938E-4	DESIGN
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9997521315639493	WITHOUT_CLASSIFICATION	2.4786843605075344E-4	DESIGN
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9995737988249083	WITHOUT_CLASSIFICATION	4.262011750916858E-4	DESIGN
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9996585470784628	WITHOUT_CLASSIFICATION	3.4145292153719633E-4	DESIGN
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9992610537182333	WITHOUT_CLASSIFICATION	7.389462817667364E-4	DESIGN
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9991918919984696	WITHOUT_CLASSIFICATION	8.081080015303639E-4	DESIGN
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.997964961231038	WITHOUT_CLASSIFICATION	0.0020350387689621434	DESIGN
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.99737531839247	WITHOUT_CLASSIFICATION	0.0026246816075300165	DESIGN
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9994963315482651	WITHOUT_CLASSIFICATION	5.03668451734839E-4	DESIGN
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999184647181225	WITHOUT_CLASSIFICATION	8.153528187746938E-5	DESIGN
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9997378268040563	WITHOUT_CLASSIFICATION	2.621731959436766E-4	DESIGN
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.995524549413109	WITHOUT_CLASSIFICATION	0.004475450586890927	DESIGN
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9994482840131088	WITHOUT_CLASSIFICATION	5.517159868911901E-4	DESIGN
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999069469879799	WITHOUT_CLASSIFICATION	9.305301202014571E-5	DESIGN
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999140735023422	WITHOUT_CLASSIFICATION	8.592649765787861E-5	DESIGN
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.999886321409955	WITHOUT_CLASSIFICATION	1.1367859004499933E-4	DESIGN
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999476466244503	WITHOUT_CLASSIFICATION	5.235337554963437E-5	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999947430799587	WITHOUT_CLASSIFICATION	5.256920041271761E-6	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999947430799587	WITHOUT_CLASSIFICATION	5.256920041271761E-6	DESIGN
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9996802993233477	WITHOUT_CLASSIFICATION	3.1970067665224136E-4	DESIGN
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9830829778211264	WITHOUT_CLASSIFICATION	0.016917022178873566	DESIGN
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9997657223667875	WITHOUT_CLASSIFICATION	2.3427763321258067E-4	DESIGN
// The property is a component...	WITHOUT_CLASSIFICATION	0.9997657223667875	WITHOUT_CLASSIFICATION	2.3427763321258067E-4	DESIGN
// The property is another class..	WITHOUT_CLASSIFICATION	0.999869906640332	WITHOUT_CLASSIFICATION	1.3009335966803303E-4	DESIGN
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9968814018572848	WITHOUT_CLASSIFICATION	0.0031185981427152556	DESIGN
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9942749888468114	WITHOUT_CLASSIFICATION	0.005725011153188594	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999146835215237	WITHOUT_CLASSIFICATION	8.531647847629055E-4	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9997159143062628	WITHOUT_CLASSIFICATION	2.840856937371044E-4	DESIGN
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9986916555005334	WITHOUT_CLASSIFICATION	0.0013083444994665134	DESIGN
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9998974818154004	WITHOUT_CLASSIFICATION	1.0251818459966731E-4	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999146835215237	WITHOUT_CLASSIFICATION	8.531647847629055E-4	DESIGN
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9956059219676059	WITHOUT_CLASSIFICATION	0.004394078032394102	DESIGN
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9990206871180205	WITHOUT_CLASSIFICATION	9.793128819795113E-4	DESIGN
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9922817867186275	WITHOUT_CLASSIFICATION	0.00771821328137248	DESIGN
// again, null != null here	WITHOUT_CLASSIFICATION	0.9986662604563822	WITHOUT_CLASSIFICATION	0.0013337395436177307	DESIGN
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9937242227326665	WITHOUT_CLASSIFICATION	0.006275777267333512	DESIGN
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9997244090327199	WITHOUT_CLASSIFICATION	2.7559096728015016E-4	DESIGN
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9997722320955186	WITHOUT_CLASSIFICATION	2.27767904481549E-4	DESIGN
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999772076349353	WITHOUT_CLASSIFICATION	2.2792365064705345E-5	DESIGN
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9995310831440829	WITHOUT_CLASSIFICATION	4.689168559171898E-4	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9993110296626977	WITHOUT_CLASSIFICATION	6.889703373022852E-4	DESIGN
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9995319826878393	WITHOUT_CLASSIFICATION	4.680173121608213E-4	DESIGN
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9998214588378038	WITHOUT_CLASSIFICATION	1.7854116219629377E-4	DESIGN
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9998052176659135	WITHOUT_CLASSIFICATION	1.9478233408658978E-4	DESIGN
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9954522140503053	WITHOUT_CLASSIFICATION	0.004547785949694665	DESIGN
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9992320663262936	WITHOUT_CLASSIFICATION	7.679336737063383E-4	DESIGN
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9995399284463691	WITHOUT_CLASSIFICATION	4.60071553630968E-4	DESIGN
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9989579758566838	WITHOUT_CLASSIFICATION	0.0010420241433162856	DESIGN
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9994111150393996	WITHOUT_CLASSIFICATION	5.888849606003851E-4	DESIGN
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9994111150393996	WITHOUT_CLASSIFICATION	5.888849606003851E-4	DESIGN
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9997722320955186	WITHOUT_CLASSIFICATION	2.27767904481549E-4	DESIGN
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9954640321377698	WITHOUT_CLASSIFICATION	0.004535967862230282	DESIGN
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9188767648667342	WITHOUT_CLASSIFICATION	0.0811232351332659	DESIGN
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9926427774346466	WITHOUT_CLASSIFICATION	0.00735722256535346	DESIGN
// #2	WITHOUT_CLASSIFICATION	0.9993893521255327	WITHOUT_CLASSIFICATION	6.106478744672683E-4	DESIGN
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9988313409637536	WITHOUT_CLASSIFICATION	0.0011686590362464503	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9993367366751756	WITHOUT_CLASSIFICATION	6.63263324824365E-4	DESIGN
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999958654835431	WITHOUT_CLASSIFICATION	4.134516456861237E-6	DESIGN
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999432016171903	WITHOUT_CLASSIFICATION	5.6798382809680914E-5	DESIGN
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9986503973693415	WITHOUT_CLASSIFICATION	0.0013496026306586276	DESIGN
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.8806446520793756	WITHOUT_CLASSIFICATION	0.1193553479206244	DESIGN
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.999970837597858	WITHOUT_CLASSIFICATION	2.916240214192611E-5	DESIGN
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9984413398799683	WITHOUT_CLASSIFICATION	0.0015586601200316967	DESIGN
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9986106380125459	WITHOUT_CLASSIFICATION	0.0013893619874541172	DESIGN
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.8989132870805788	WITHOUT_CLASSIFICATION	0.10108671291942121	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9997633810932341	WITHOUT_CLASSIFICATION	2.366189067657234E-4	DESIGN
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9996534546233498	WITHOUT_CLASSIFICATION	3.465453766502646E-4	DESIGN
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999956346417413	WITHOUT_CLASSIFICATION	4.365358258630239E-6	DESIGN
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999767212231399	WITHOUT_CLASSIFICATION	2.327877686013943E-5	DESIGN
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999166487371273	WITHOUT_CLASSIFICATION	8.335126287282128E-5	DESIGN
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9997377526914846	WITHOUT_CLASSIFICATION	2.622473085153873E-4	DESIGN
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.999959991456195	WITHOUT_CLASSIFICATION	4.0008543805004113E-5	DESIGN
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9972170972625269	WITHOUT_CLASSIFICATION	0.0027829027374730057	DESIGN
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9991594446037276	WITHOUT_CLASSIFICATION	8.405553962723038E-4	DESIGN
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999927381456599	WITHOUT_CLASSIFICATION	7.261854340048362E-6	DESIGN
// return an empty Type array	WITHOUT_CLASSIFICATION	0.999303812114727	WITHOUT_CLASSIFICATION	6.961878852730073E-4	DESIGN
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9980267663192166	WITHOUT_CLASSIFICATION	0.0019732336807835034	DESIGN
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9995078464804916	WITHOUT_CLASSIFICATION	4.921535195083085E-4	DESIGN
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9998479679993968	WITHOUT_CLASSIFICATION	1.5203200060319203E-4	DESIGN
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999244218587054	WITHOUT_CLASSIFICATION	7.557814129451309E-5	DESIGN
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9983669788164252	WITHOUT_CLASSIFICATION	0.0016330211835747686	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994545676065509	WITHOUT_CLASSIFICATION	5.454323934491543E-4	DESIGN
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9997633810932341	WITHOUT_CLASSIFICATION	2.366189067657234E-4	DESIGN
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9996307430303225	WITHOUT_CLASSIFICATION	3.692569696775245E-4	DESIGN
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999934252322806	WITHOUT_CLASSIFICATION	6.5747677193666615E-6	DESIGN
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9992367337194576	WITHOUT_CLASSIFICATION	7.63266280542312E-4	DESIGN
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9991746401914109	WITHOUT_CLASSIFICATION	8.253598085891618E-4	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9968213393715957	WITHOUT_CLASSIFICATION	0.0031786606284043874	DESIGN
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9997354771356537	WITHOUT_CLASSIFICATION	2.645228643462694E-4	DESIGN
// Collection of components.	WITHOUT_CLASSIFICATION	0.9995601444801004	WITHOUT_CLASSIFICATION	4.398555198996491E-4	DESIGN
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9993967741396621	WITHOUT_CLASSIFICATION	6.032258603378349E-4	DESIGN
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9987267667457849	WITHOUT_CLASSIFICATION	0.0012732332542152378	DESIGN
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9995911298944042	WITHOUT_CLASSIFICATION	4.0887010559583083E-4	DESIGN
// currently allowed...	WITHOUT_CLASSIFICATION	0.9945632855076437	WITHOUT_CLASSIFICATION	0.0054367144923562856	DESIGN
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.5067450933137053	WITHOUT_CLASSIFICATION	0.4932549066862947	DESIGN
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9950539350064035	WITHOUT_CLASSIFICATION	0.004946064993596495	DESIGN
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9977465404319839	WITHOUT_CLASSIFICATION	0.0022534595680162067	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994545676065509	WITHOUT_CLASSIFICATION	5.454323934491543E-4	DESIGN
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9101048559580784	WITHOUT_CLASSIFICATION	0.08989514404192159	DESIGN
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999570141471943	WITHOUT_CLASSIFICATION	4.298585280567653E-5	DESIGN
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9997041581551831	WITHOUT_CLASSIFICATION	2.958418448169084E-4	DESIGN
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9995980346820907	WITHOUT_CLASSIFICATION	4.01965317909287E-4	DESIGN
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9991682164249759	WITHOUT_CLASSIFICATION	8.317835750240884E-4	DESIGN
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.99823846871403	WITHOUT_CLASSIFICATION	0.001761531285969929	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9997159143062628	WITHOUT_CLASSIFICATION	2.840856937371044E-4	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.8888260782004641	WITHOUT_CLASSIFICATION	0.11117392179953593	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9997633810932341	WITHOUT_CLASSIFICATION	2.366189067657234E-4	DESIGN
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9965183160788559	WITHOUT_CLASSIFICATION	0.00348168392114411	DESIGN
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999124160727809	WITHOUT_CLASSIFICATION	8.758392721905314E-5	DESIGN
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9995328569466188	WITHOUT_CLASSIFICATION	4.671430533812457E-4	DESIGN
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9991813521586286	WITHOUT_CLASSIFICATION	8.186478413713607E-4	DESIGN
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9976477154115717	WITHOUT_CLASSIFICATION	0.0023522845884282905	DESIGN
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9933045220641435	WITHOUT_CLASSIFICATION	0.006695477935856447	DESIGN
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9975290801845496	WITHOUT_CLASSIFICATION	0.002470919815450351	DESIGN
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9987557327643873	WITHOUT_CLASSIFICATION	0.0012442672356126627	DESIGN
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9819385988677803	WITHOUT_CLASSIFICATION	0.018061401132219584	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9993263747769152	WITHOUT_CLASSIFICATION	6.736252230847969E-4	DESIGN
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9974772391023178	WITHOUT_CLASSIFICATION	0.0025227608976823366	DESIGN
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9162523075223886	WITHOUT_CLASSIFICATION	0.08374769247761144	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9969051275056198	WITHOUT_CLASSIFICATION	0.0030948724943802353	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9969051275056198	WITHOUT_CLASSIFICATION	0.0030948724943802353	DESIGN
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9286003485684885	WITHOUT_CLASSIFICATION	0.07139965143151158	DESIGN
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9931983686417862	WITHOUT_CLASSIFICATION	0.0068016313582137545	DESIGN
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9994430763837625	WITHOUT_CLASSIFICATION	5.56923616237462E-4	DESIGN
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999811009350128	WITHOUT_CLASSIFICATION	1.889906498715068E-5	DESIGN
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9998976062872482	WITHOUT_CLASSIFICATION	1.0239371275188093E-4	DESIGN
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9996963171511131	WITHOUT_CLASSIFICATION	3.036828488869056E-4	DESIGN
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.999371137126611	WITHOUT_CLASSIFICATION	6.28862873388945E-4	DESIGN
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9975366450294142	WITHOUT_CLASSIFICATION	0.0024633549705858604	DESIGN
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999535434182655	WITHOUT_CLASSIFICATION	4.645658173451087E-5	DESIGN
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9993303446039619	WITHOUT_CLASSIFICATION	6.696553960381075E-4	DESIGN
// A collection of entities...	WITHOUT_CLASSIFICATION	0.998051878725455	WITHOUT_CLASSIFICATION	0.001948121274544939	DESIGN
// A collection of components...	WITHOUT_CLASSIFICATION	0.9987608458770275	WITHOUT_CLASSIFICATION	0.0012391541229724561	DESIGN
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9987608458770275	WITHOUT_CLASSIFICATION	0.0012391541229724561	DESIGN
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999995837490481	WITHOUT_CLASSIFICATION	4.16250951887025E-7	DESIGN
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9985675111045449	WITHOUT_CLASSIFICATION	0.0014324888954551315	DESIGN
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9995061643567686	WITHOUT_CLASSIFICATION	4.93835643231302E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9023422939200308	WITHOUT_CLASSIFICATION	0.09765770607996914	DESIGN
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999838756240831	WITHOUT_CLASSIFICATION	1.6124375916944105E-5	DESIGN
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9998926872209006	WITHOUT_CLASSIFICATION	1.0731277909939136E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994841191779691	WITHOUT_CLASSIFICATION	5.158808220308495E-4	DESIGN
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9998672536768629	WITHOUT_CLASSIFICATION	1.3274632313722067E-4	DESIGN
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9963424944562793	WITHOUT_CLASSIFICATION	0.003657505543720746	DESIGN
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.999851214740267	WITHOUT_CLASSIFICATION	1.4878525973304501E-4	DESIGN
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999534267537922	WITHOUT_CLASSIFICATION	4.6573246207803E-5	DESIGN
/*implied*/	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999712260937962	WITHOUT_CLASSIFICATION	2.8773906203754343E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994841191779691	WITHOUT_CLASSIFICATION	5.158808220308495E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994841191779691	WITHOUT_CLASSIFICATION	5.158808220308495E-4	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999591303900421	WITHOUT_CLASSIFICATION	4.086960995792594E-5	DESIGN
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9931864800825893	WITHOUT_CLASSIFICATION	0.006813519917410668	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9988121646115166	WITHOUT_CLASSIFICATION	0.00118783538848338	DESIGN
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9995022220490427	WITHOUT_CLASSIFICATION	4.977779509572666E-4	DESIGN
/*	WITHOUT_CLASSIFICATION	0.8998848208396077	WITHOUT_CLASSIFICATION	0.10011517916039232	DESIGN
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9984761120787902	WITHOUT_CLASSIFICATION	0.0015238879212098187	DESIGN
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9982790598375335	WITHOUT_CLASSIFICATION	0.0017209401624664275	DESIGN
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.6874706929402784	WITHOUT_CLASSIFICATION	0.3125293070597216	DESIGN
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9988469716806903	WITHOUT_CLASSIFICATION	0.0011530283193097624	DESIGN
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.992172283447191	WITHOUT_CLASSIFICATION	0.007827716552808995	DESIGN
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9974727233141831	WITHOUT_CLASSIFICATION	0.002527276685816814	DESIGN
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.999230357402975	WITHOUT_CLASSIFICATION	7.696425970249849E-4	DESIGN
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9993894708378287	WITHOUT_CLASSIFICATION	6.105291621712415E-4	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9997444823394906	WITHOUT_CLASSIFICATION	2.5551766050935487E-4	DESIGN
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995906678301332	WITHOUT_CLASSIFICATION	4.0933216986685527E-4	DESIGN
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999954670598201	WITHOUT_CLASSIFICATION	4.532940179898008E-6	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9977671077360536	WITHOUT_CLASSIFICATION	0.002232892263946405	DESIGN
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9985795622542714	WITHOUT_CLASSIFICATION	0.0014204377457286209	DESIGN
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9996895468897841	WITHOUT_CLASSIFICATION	3.104531102159509E-4	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977945155366799	WITHOUT_CLASSIFICATION	0.002205484463320183	DESIGN
//TODO:	WITHOUT_CLASSIFICATION	0.944098442689183	WITHOUT_CLASSIFICATION	0.055901557310817154	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9998601749981992	WITHOUT_CLASSIFICATION	1.3982500180080587E-4	DESIGN
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999994880892003	WITHOUT_CLASSIFICATION	5.1191079971241E-7	DESIGN
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9994928380400864	WITHOUT_CLASSIFICATION	5.071619599136233E-4	DESIGN
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9962726758171576	WITHOUT_CLASSIFICATION	0.0037273241828423716	DESIGN
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999676715086397	WITHOUT_CLASSIFICATION	3.232849136033227E-5	DESIGN
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9996018562076152	WITHOUT_CLASSIFICATION	3.981437923848109E-4	DESIGN
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9995333398165248	WITHOUT_CLASSIFICATION	4.6666018347517535E-4	DESIGN
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999011568146468	WITHOUT_CLASSIFICATION	9.884318535320661E-5	DESIGN
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.815624202446825	DESIGN	0.18437579755317496	WITHOUT_CLASSIFICATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9976166605911475	WITHOUT_CLASSIFICATION	0.002383339408852383	DESIGN
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9768568608725549	WITHOUT_CLASSIFICATION	0.02314313912744512	DESIGN
// Dialect function	WITHOUT_CLASSIFICATION	0.9997466500109472	WITHOUT_CLASSIFICATION	2.5334998905280004E-4	DESIGN
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9991620213662108	WITHOUT_CLASSIFICATION	8.379786337892474E-4	DESIGN
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.999871522534028	WITHOUT_CLASSIFICATION	1.2847746597206277E-4	DESIGN
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.999691218533105	WITHOUT_CLASSIFICATION	3.087814668949524E-4	DESIGN
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.998743077867524	WITHOUT_CLASSIFICATION	0.0012569221324759852	DESIGN
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9971539505019543	WITHOUT_CLASSIFICATION	0.0028460494980457438	DESIGN
// the name of an entity class	WITHOUT_CLASSIFICATION	0.998831007125794	WITHOUT_CLASSIFICATION	0.0011689928742060697	DESIGN
//the class discriminator value	WITHOUT_CLASSIFICATION	0.998652910209288	WITHOUT_CLASSIFICATION	0.0013470897907119615	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9997501461123658	WITHOUT_CLASSIFICATION	2.498538876342825E-4	DESIGN
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999463521329256	WITHOUT_CLASSIFICATION	5.364786707431252E-5	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999676954771289	WITHOUT_CLASSIFICATION	3.2304522870979465E-5	DESIGN
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9997224386111222	WITHOUT_CLASSIFICATION	2.7756138887774355E-4	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999676954771289	WITHOUT_CLASSIFICATION	3.2304522870979465E-5	DESIGN
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999806091412011	WITHOUT_CLASSIFICATION	1.9390858798832076E-5	DESIGN
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9992471508884304	WITHOUT_CLASSIFICATION	7.528491115694407E-4	DESIGN
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.999365614421908	WITHOUT_CLASSIFICATION	6.343855780920159E-4	DESIGN
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999409248172311	WITHOUT_CLASSIFICATION	5.907518276896774E-5	DESIGN
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9994114147955234	WITHOUT_CLASSIFICATION	5.885852044765872E-4	DESIGN
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.999365614421908	WITHOUT_CLASSIFICATION	6.343855780920159E-4	DESIGN
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9998911958104262	WITHOUT_CLASSIFICATION	1.0880418957378462E-4	DESIGN
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9974932565630223	WITHOUT_CLASSIFICATION	0.002506743436977747	DESIGN
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999743026058329	WITHOUT_CLASSIFICATION	2.5697394167112332E-5	DESIGN
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9997272213195969	WITHOUT_CLASSIFICATION	2.7277868040303713E-4	DESIGN
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999902332180829	WITHOUT_CLASSIFICATION	9.766781917129273E-6	DESIGN
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9996618030429556	WITHOUT_CLASSIFICATION	3.3819695704444757E-4	DESIGN
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999888730165999	WITHOUT_CLASSIFICATION	1.1126983400039033E-5	DESIGN
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999701262902322	DESIGN	2.987370976780826E-5	WITHOUT_CLASSIFICATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999791457018747	WITHOUT_CLASSIFICATION	2.085429812520501E-5	DESIGN
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.999858877726448	WITHOUT_CLASSIFICATION	1.4112227355202878E-4	DESIGN
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9997988082048166	WITHOUT_CLASSIFICATION	2.0119179518347495E-4	DESIGN
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9998733825917238	WITHOUT_CLASSIFICATION	1.266174082762483E-4	DESIGN
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9998473352185809	WITHOUT_CLASSIFICATION	1.526647814191053E-4	DESIGN
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.7400168812400201	WITHOUT_CLASSIFICATION	0.2599831187599799	DESIGN
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9987316587127392	WITHOUT_CLASSIFICATION	0.0012683412872607337	DESIGN
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9986136433664274	WITHOUT_CLASSIFICATION	0.001386356633572526	DESIGN
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.8607376925863145	WITHOUT_CLASSIFICATION	0.1392623074136855	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9922277191706491	WITHOUT_CLASSIFICATION	0.0077722808293508175	DESIGN
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9976438391249123	WITHOUT_CLASSIFICATION	0.002356160875087692	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999226201791339	WITHOUT_CLASSIFICATION	7.737982086601342E-5	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.992882429715502	WITHOUT_CLASSIFICATION	0.007117570284497971	DESIGN
//default mode	WITHOUT_CLASSIFICATION	0.9916090076706313	WITHOUT_CLASSIFICATION	0.008390992329368716	DESIGN
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9997748986279403	WITHOUT_CLASSIFICATION	2.2510137205969895E-4	DESIGN
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9972538147403783	WITHOUT_CLASSIFICATION	0.00274618525962172	DESIGN
//after reset!	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9976034011822694	WITHOUT_CLASSIFICATION	0.0023965988177305263	DESIGN
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9993781406936365	WITHOUT_CLASSIFICATION	6.218593063634265E-4	DESIGN
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9986467293478192	WITHOUT_CLASSIFICATION	0.001353270652180833	DESIGN
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9989931410006481	WITHOUT_CLASSIFICATION	0.0010068589993519035	DESIGN
//if its "id"	WITHOUT_CLASSIFICATION	0.9991909455699434	WITHOUT_CLASSIFICATION	8.090544300567843E-4	DESIGN
//or its the id property name	WITHOUT_CLASSIFICATION	0.9988250232379305	WITHOUT_CLASSIFICATION	0.0011749767620694083	DESIGN
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9995361330207223	WITHOUT_CLASSIFICATION	4.638669792777248E-4	DESIGN
//important!!	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9995361330207223	WITHOUT_CLASSIFICATION	4.638669792777248E-4	DESIGN
// an association	WITHOUT_CLASSIFICATION	0.9989707296993484	WITHOUT_CLASSIFICATION	0.0010292703006514893	DESIGN
//allow index() function:	WITHOUT_CLASSIFICATION	0.9977895483235426	WITHOUT_CLASSIFICATION	0.0022104516764574556	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9665306487168542	WITHOUT_CLASSIFICATION	0.033469351283145723	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999226201791339	WITHOUT_CLASSIFICATION	7.737982086601342E-5	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
// collections of values	WITHOUT_CLASSIFICATION	0.9997641584419888	WITHOUT_CLASSIFICATION	2.3584155801126996E-4	DESIGN
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.997538133008234	WITHOUT_CLASSIFICATION	0.0024618669917660365	DESIGN
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9986179213513706	WITHOUT_CLASSIFICATION	0.0013820786486293747	DESIGN
//special case	WITHOUT_CLASSIFICATION	0.9995594568228142	WITHOUT_CLASSIFICATION	4.4054317718587237E-4	DESIGN
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999446311595046	WITHOUT_CLASSIFICATION	5.536884049542698E-5	DESIGN
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9543050356253338	WITHOUT_CLASSIFICATION	0.04569496437466629	DESIGN
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.7632272070851996	DESIGN	0.23677279291480036	WITHOUT_CLASSIFICATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9969380566327485	WITHOUT_CLASSIFICATION	0.0030619433672514785	DESIGN
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9991076616870836	WITHOUT_CLASSIFICATION	8.923383129164817E-4	DESIGN
//register collection role	WITHOUT_CLASSIFICATION	0.9928524737850563	WITHOUT_CLASSIFICATION	0.007147526214943711	DESIGN
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9995457011972095	WITHOUT_CLASSIFICATION	4.5429880279055626E-4	DESIGN
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9985795622542714	WITHOUT_CLASSIFICATION	0.0014204377457286209	DESIGN
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9977671077360536	WITHOUT_CLASSIFICATION	0.002232892263946405	DESIGN
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9993484133475818	WITHOUT_CLASSIFICATION	6.515866524181917E-4	DESIGN
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9998106627292811	WITHOUT_CLASSIFICATION	1.8933727071879258E-4	DESIGN
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9993513593147286	WITHOUT_CLASSIFICATION	6.486406852713271E-4	DESIGN
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9980770804856566	WITHOUT_CLASSIFICATION	0.0019229195143434642	DESIGN
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9990625693549614	WITHOUT_CLASSIFICATION	9.37430645038608E-4	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9985795622542714	WITHOUT_CLASSIFICATION	0.0014204377457286209	DESIGN
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9903827567741801	WITHOUT_CLASSIFICATION	0.00961724322581997	DESIGN
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9974464015910983	WITHOUT_CLASSIFICATION	0.0025535984089016966	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9954086141345159	WITHOUT_CLASSIFICATION	0.004591385865484155	DESIGN
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9974009175186039	WITHOUT_CLASSIFICATION	0.0025990824813961603	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9955740524175579	WITHOUT_CLASSIFICATION	0.004425947582442105	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9955740524175579	WITHOUT_CLASSIFICATION	0.004425947582442105	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999111263395813	WITHOUT_CLASSIFICATION	8.887366041855036E-5	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9955740524175579	WITHOUT_CLASSIFICATION	0.004425947582442105	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9955740524175579	WITHOUT_CLASSIFICATION	0.004425947582442105	DESIGN
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9988609063291978	WITHOUT_CLASSIFICATION	0.0011390936708022535	DESIGN
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999978363370103	WITHOUT_CLASSIFICATION	2.163662989654811E-6	DESIGN
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9998019023303512	WITHOUT_CLASSIFICATION	1.9809766964888953E-4	DESIGN
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9998019023303512	WITHOUT_CLASSIFICATION	1.9809766964888953E-4	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9989121766027917	WITHOUT_CLASSIFICATION	0.0010878233972082085	DESIGN
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9843254355177034	WITHOUT_CLASSIFICATION	0.015674564482296795	DESIGN
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.998476301275382	WITHOUT_CLASSIFICATION	0.0015236987246180715	DESIGN
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999457443588372	WITHOUT_CLASSIFICATION	5.425564116291466E-5	DESIGN
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9940267392238843	WITHOUT_CLASSIFICATION	0.005973260776115696	DESIGN
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9944436424545537	WITHOUT_CLASSIFICATION	0.005556357545446335	DESIGN
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9990715667348119	WITHOUT_CLASSIFICATION	9.284332651880727E-4	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9980219797497413	WITHOUT_CLASSIFICATION	0.001978020250258755	DESIGN
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9910009626705727	WITHOUT_CLASSIFICATION	0.008999037329427358	DESIGN
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.999984881523531	WITHOUT_CLASSIFICATION	1.5118476468970959E-5	DESIGN
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9986621455197866	WITHOUT_CLASSIFICATION	0.0013378544802133529	DESIGN
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9905216040118698	WITHOUT_CLASSIFICATION	0.009478395988130064	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999802432293189	WITHOUT_CLASSIFICATION	1.975677068102515E-5	DESIGN
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9986194245376008	WITHOUT_CLASSIFICATION	0.0013805754623992985	DESIGN
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9727539423940615	WITHOUT_CLASSIFICATION	0.027246057605938467	DESIGN
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9959679848858279	WITHOUT_CLASSIFICATION	0.004032015114172049	DESIGN
// the next one up must also be	WITHOUT_CLASSIFICATION	0.998380980986334	WITHOUT_CLASSIFICATION	0.0016190190136659358	DESIGN
// Add any joins	WITHOUT_CLASSIFICATION	0.9989659767990605	WITHOUT_CLASSIFICATION	0.0010340232009395114	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999802432293189	WITHOUT_CLASSIFICATION	1.975677068102515E-5	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.992882429715502	WITHOUT_CLASSIFICATION	0.007117570284497971	DESIGN
//path expression	WITHOUT_CLASSIFICATION	0.9991339623787134	WITHOUT_CLASSIFICATION	8.660376212866459E-4	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9990390927487175	WITHOUT_CLASSIFICATION	9.609072512825187E-4	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9991008073032559	WITHOUT_CLASSIFICATION	8.991926967441905E-4	DESIGN
//anything else	WITHOUT_CLASSIFICATION	0.999067000935769	WITHOUT_CLASSIFICATION	9.329990642310218E-4	DESIGN
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.999933975618949	WITHOUT_CLASSIFICATION	6.602438105102095E-5	DESIGN
// careful with this!	WITHOUT_CLASSIFICATION	0.9962995346456905	WITHOUT_CLASSIFICATION	0.0037004653543093575	DESIGN
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9998043253818747	WITHOUT_CLASSIFICATION	1.9567461812521875E-4	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.999821414035116	WITHOUT_CLASSIFICATION	1.7858596488395232E-4	DESIGN
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9994597459854969	WITHOUT_CLASSIFICATION	5.402540145030874E-4	DESIGN
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9979781778847668	WITHOUT_CLASSIFICATION	0.002021822115233261	DESIGN
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999217193794703	WITHOUT_CLASSIFICATION	7.828062052967674E-5	DESIGN
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9968106630583018	WITHOUT_CLASSIFICATION	0.003189336941698302	DESIGN
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9996971493299613	WITHOUT_CLASSIFICATION	3.028506700386998E-4	DESIGN
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.999568677178347	WITHOUT_CLASSIFICATION	4.313228216530645E-4	DESIGN
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9997352991906536	WITHOUT_CLASSIFICATION	2.647008093464339E-4	DESIGN
// treat it as a classname	WITHOUT_CLASSIFICATION	0.999160586528983	WITHOUT_CLASSIFICATION	8.394134710170222E-4	DESIGN
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999035817130453	WITHOUT_CLASSIFICATION	9.64182869546332E-5	DESIGN
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9983781252135381	WITHOUT_CLASSIFICATION	0.0016218747864619033	DESIGN
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9997211915742326	WITHOUT_CLASSIFICATION	2.7880842576741396E-4	DESIGN
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9990021719170619	WITHOUT_CLASSIFICATION	9.9782808293809E-4	DESIGN
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9963838564373072	WITHOUT_CLASSIFICATION	0.003616143562692774	DESIGN
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999634203335076	WITHOUT_CLASSIFICATION	3.657966649238519E-5	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.999821414035116	WITHOUT_CLASSIFICATION	1.7858596488395232E-4	DESIGN
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9984860182524838	WITHOUT_CLASSIFICATION	0.0015139817475161622	DESIGN
//do replacements	WITHOUT_CLASSIFICATION	0.9987252010678946	WITHOUT_CLASSIFICATION	0.0012747989321052957	DESIGN
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9968934036828486	WITHOUT_CLASSIFICATION	0.0031065963171512997	DESIGN
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9926079637325124	WITHOUT_CLASSIFICATION	0.007392036267487714	DESIGN
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994545676065509	WITHOUT_CLASSIFICATION	5.454323934491543E-4	DESIGN
//hilo params	WITHOUT_CLASSIFICATION	0.9973761899809643	WITHOUT_CLASSIFICATION	0.0026238100190357	DESIGN
//sql = query;	WITHOUT_CLASSIFICATION	0.9990731885168211	WITHOUT_CLASSIFICATION	9.268114831788154E-4	DESIGN
// performance opt	WITHOUT_CLASSIFICATION	0.9932540287447762	WITHOUT_CLASSIFICATION	0.00674597125522382	DESIGN
//sql = update;	WITHOUT_CLASSIFICATION	0.9990631651226088	WITHOUT_CLASSIFICATION	9.368348773910963E-4	DESIGN
//hilo config	WITHOUT_CLASSIFICATION	0.9981777235332415	WITHOUT_CLASSIFICATION	0.0018222764667583948	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999535538560647	WITHOUT_CLASSIFICATION	4.6446143935344494E-5	DESIGN
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9911592676704282	WITHOUT_CLASSIFICATION	0.008840732329571811	DESIGN
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9954290905136742	WITHOUT_CLASSIFICATION	0.004570909486325824	DESIGN
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999210596871403	WITHOUT_CLASSIFICATION	7.894031285972387E-5	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9986576044603137	WITHOUT_CLASSIFICATION	0.0013423955396863214	DESIGN
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999122715783331	WITHOUT_CLASSIFICATION	8.77284216669215E-5	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9988837526561699	WITHOUT_CLASSIFICATION	0.0011162473438301786	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999535538560647	WITHOUT_CLASSIFICATION	4.6446143935344494E-5	DESIGN
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9989063130177462	WITHOUT_CLASSIFICATION	0.001093686982253755	DESIGN
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9928497446531348	WITHOUT_CLASSIFICATION	0.0071502553468651775	DESIGN
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.999469235443193	WITHOUT_CLASSIFICATION	5.307645568069128E-4	DESIGN
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.999782869702967	WITHOUT_CLASSIFICATION	2.1713029703292E-4	DESIGN
// the default...	WITHOUT_CLASSIFICATION	0.9991830905984418	WITHOUT_CLASSIFICATION	8.169094015580959E-4	DESIGN
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.998990990161442	WITHOUT_CLASSIFICATION	0.001009009838558017	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9986576044603137	WITHOUT_CLASSIFICATION	0.0013423955396863214	DESIGN
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999869970978084	WITHOUT_CLASSIFICATION	1.3002902191674484E-5	DESIGN
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998714998029681	WITHOUT_CLASSIFICATION	1.285001970319654E-4	DESIGN
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998838150446013	WITHOUT_CLASSIFICATION	1.1618495539867792E-4	DESIGN
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992597490367304	WITHOUT_CLASSIFICATION	7.402509632695286E-4	DESIGN
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992597490367304	WITHOUT_CLASSIFICATION	7.402509632695286E-4	DESIGN
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992597490367304	WITHOUT_CLASSIFICATION	7.402509632695286E-4	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9995313809296998	WITHOUT_CLASSIFICATION	4.686190703002084E-4	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9995313809296998	WITHOUT_CLASSIFICATION	4.686190703002084E-4	DESIGN
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.996234533766176	WITHOUT_CLASSIFICATION	0.00376546623382412	DESIGN
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9989546847607967	WITHOUT_CLASSIFICATION	0.0010453152392032878	DESIGN
// scroll ahead	WITHOUT_CLASSIFICATION	0.9959025606863279	WITHOUT_CLASSIFICATION	0.0040974393136721295	DESIGN
// scroll backward	WITHOUT_CLASSIFICATION	0.9984024502069336	WITHOUT_CLASSIFICATION	0.001597549793066342	DESIGN
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9980736858977424	WITHOUT_CLASSIFICATION	0.0019263141022577137	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993786203749158	WITHOUT_CLASSIFICATION	6.213796250843436E-4	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995506454883537	WITHOUT_CLASSIFICATION	4.4935451164635523E-4	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994545676065509	WITHOUT_CLASSIFICATION	5.454323934491543E-4	DESIGN
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9995483366580956	WITHOUT_CLASSIFICATION	4.516633419043482E-4	DESIGN
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997950768450033	WITHOUT_CLASSIFICATION	2.0492315499671843E-4	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993786203749158	WITHOUT_CLASSIFICATION	6.213796250843436E-4	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995506454883537	WITHOUT_CLASSIFICATION	4.4935451164635523E-4	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994545676065509	WITHOUT_CLASSIFICATION	5.454323934491543E-4	DESIGN
// Caches	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
//Generators:	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.999749619455653	WITHOUT_CLASSIFICATION	2.50380544346962E-4	DESIGN
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9993090796804431	WITHOUT_CLASSIFICATION	6.909203195568717E-4	DESIGN
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9992396762379397	WITHOUT_CLASSIFICATION	7.603237620602323E-4	DESIGN
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999896197528843	WITHOUT_CLASSIFICATION	1.038024711573875E-5	DESIGN
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9993679499032428	WITHOUT_CLASSIFICATION	6.320500967572062E-4	DESIGN
//checking for named queries	WITHOUT_CLASSIFICATION	0.9985379428051472	WITHOUT_CLASSIFICATION	0.0014620571948528469	DESIGN
//stats	WITHOUT_CLASSIFICATION	0.9986726729315074	WITHOUT_CLASSIFICATION	0.0013273270684926075	DESIGN
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.998946865739978	WITHOUT_CLASSIFICATION	0.0010531342600219743	DESIGN
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9995220455047082	WITHOUT_CLASSIFICATION	4.779544952918102E-4	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9510801056984374	WITHOUT_CLASSIFICATION	0.048919894301562614	DESIGN
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.961349007081748	WITHOUT_CLASSIFICATION	0.038650992918252046	DESIGN
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9989974015406169	WITHOUT_CLASSIFICATION	0.0010025984593832029	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.998266853897005	WITHOUT_CLASSIFICATION	0.0017331461029949868	DESIGN
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9971431041507093	WITHOUT_CLASSIFICATION	0.002856895849290688	DESIGN
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9819337482773172	WITHOUT_CLASSIFICATION	0.01806625172268276	DESIGN
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9988343336228626	WITHOUT_CLASSIFICATION	0.0011656663771373995	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.981018479557457	WITHOUT_CLASSIFICATION	0.01898152044254299	DESIGN
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9989251397552511	WITHOUT_CLASSIFICATION	0.0010748602447488704	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.5224119482514613	WITHOUT_CLASSIFICATION	0.4775880517485387	DESIGN
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9988731831146046	WITHOUT_CLASSIFICATION	0.0011268168853954532	DESIGN
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9845318436076335	WITHOUT_CLASSIFICATION	0.01546815639236646	DESIGN
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9998955268816551	WITHOUT_CLASSIFICATION	1.0447311834490282E-4	DESIGN
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9916691431089987	WITHOUT_CLASSIFICATION	0.0083308568910013	DESIGN
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993530576912174	WITHOUT_CLASSIFICATION	6.469423087825669E-4	DESIGN
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993464865536524	WITHOUT_CLASSIFICATION	6.535134463475596E-4	DESIGN
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.7409039506165757	WITHOUT_CLASSIFICATION	0.2590960493834244	DESIGN
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995255591445238	WITHOUT_CLASSIFICATION	4.744408554760932E-4	DESIGN
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998820935447884	WITHOUT_CLASSIFICATION	1.179064552116517E-4	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9988089828565329	WITHOUT_CLASSIFICATION	0.0011910171434672146	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9988089828565329	WITHOUT_CLASSIFICATION	0.0011910171434672146	DESIGN
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9997886294143938	WITHOUT_CLASSIFICATION	2.1137058560617586E-4	DESIGN
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.999996719357942	WITHOUT_CLASSIFICATION	3.280642057867692E-6	DESIGN
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9997092371115813	WITHOUT_CLASSIFICATION	2.90762888418663E-4	DESIGN
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9985795622542714	WITHOUT_CLASSIFICATION	0.0014204377457286209	DESIGN
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9975540029786273	WITHOUT_CLASSIFICATION	0.0024459970213726616	DESIGN
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9998669648549475	WITHOUT_CLASSIFICATION	1.3303514505247864E-4	DESIGN
//for EJB3	WITHOUT_CLASSIFICATION	0.9991861279814398	WITHOUT_CLASSIFICATION	8.138720185601157E-4	DESIGN
// just ignore	WITHOUT_CLASSIFICATION	0.9992921714649796	WITHOUT_CLASSIFICATION	7.07828535020452E-4	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9981929643804656	WITHOUT_CLASSIFICATION	0.001807035619534526	DESIGN
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997271672423366	WITHOUT_CLASSIFICATION	2.728327576634118E-4	DESIGN
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997452858147965	WITHOUT_CLASSIFICATION	2.547141852034663E-4	DESIGN
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997271672423366	WITHOUT_CLASSIFICATION	2.728327576634118E-4	DESIGN
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997271672423366	WITHOUT_CLASSIFICATION	2.728327576634118E-4	DESIGN
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997271672423366	WITHOUT_CLASSIFICATION	2.728327576634118E-4	DESIGN
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997287439347031	WITHOUT_CLASSIFICATION	2.7125606529696547E-4	DESIGN
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997271672423366	WITHOUT_CLASSIFICATION	2.728327576634118E-4	DESIGN
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999683620414625	WITHOUT_CLASSIFICATION	3.163795853750142E-4	DESIGN
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997271672423366	WITHOUT_CLASSIFICATION	2.728327576634118E-4	DESIGN
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997271672423366	WITHOUT_CLASSIFICATION	2.728327576634118E-4	DESIGN
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997271672423366	WITHOUT_CLASSIFICATION	2.728327576634118E-4	DESIGN
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9912954575148855	WITHOUT_CLASSIFICATION	0.008704542485114507	DESIGN
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9935734872445263	WITHOUT_CLASSIFICATION	0.006426512755473688	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.981943597723972	WITHOUT_CLASSIFICATION	0.018056402276028005	DESIGN
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999905063780223	WITHOUT_CLASSIFICATION	9.493621977610668E-6	DESIGN
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9985435003549744	WITHOUT_CLASSIFICATION	0.0014564996450255622	DESIGN
// not for internal use:	WITHOUT_CLASSIFICATION	0.9970050258100321	WITHOUT_CLASSIFICATION	0.0029949741899678805	DESIGN
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9987477466441002	WITHOUT_CLASSIFICATION	0.001252253355899882	DESIGN
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9760031099757046	WITHOUT_CLASSIFICATION	0.023996890024295392	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.981943597723972	WITHOUT_CLASSIFICATION	0.018056402276028005	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.981943597723972	WITHOUT_CLASSIFICATION	0.018056402276028005	DESIGN
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9936734315021621	WITHOUT_CLASSIFICATION	0.006326568497837893	DESIGN
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9993406935747186	WITHOUT_CLASSIFICATION	6.593064252815056E-4	DESIGN
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9967969995190143	WITHOUT_CLASSIFICATION	0.0032030004809856477	DESIGN
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9990158350531542	WITHOUT_CLASSIFICATION	9.841649468458344E-4	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9992558761855076	WITHOUT_CLASSIFICATION	7.441238144923979E-4	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.981018479557457	WITHOUT_CLASSIFICATION	0.01898152044254299	DESIGN
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9981201703563697	WITHOUT_CLASSIFICATION	0.0018798296436302836	DESIGN
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.999347180628017	WITHOUT_CLASSIFICATION	6.528193719831427E-4	DESIGN
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9953955191768873	WITHOUT_CLASSIFICATION	0.0046044808231127015	DESIGN
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9942448913455769	WITHOUT_CLASSIFICATION	0.005755108654423105	DESIGN
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9982500447072459	WITHOUT_CLASSIFICATION	0.0017499552927541298	DESIGN
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989566975073978	WITHOUT_CLASSIFICATION	0.0010433024926022499	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9987283575932692	WITHOUT_CLASSIFICATION	0.0012716424067308336	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9987283575932692	WITHOUT_CLASSIFICATION	0.0012716424067308336	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9987283575932692	WITHOUT_CLASSIFICATION	0.0012716424067308336	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9987283575932692	WITHOUT_CLASSIFICATION	0.0012716424067308336	DESIGN
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994545676065509	WITHOUT_CLASSIFICATION	5.454323934491543E-4	DESIGN
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994982941224364	WITHOUT_CLASSIFICATION	5.017058775635916E-4	DESIGN
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999589476498644	WITHOUT_CLASSIFICATION	4.1052350135670524E-5	DESIGN
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994545676065509	WITHOUT_CLASSIFICATION	5.454323934491543E-4	DESIGN
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.98943070659147	WITHOUT_CLASSIFICATION	0.010569293408529863	DESIGN
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.963305538221035	WITHOUT_CLASSIFICATION	0.036694461778964946	DESIGN
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999572134189815	WITHOUT_CLASSIFICATION	4.278658101849031E-4	DESIGN
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999701219802302	WITHOUT_CLASSIFICATION	2.9878019769807824E-4	DESIGN
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9942044324373475	WITHOUT_CLASSIFICATION	0.005795567562652577	DESIGN
// used from testsuite	WITHOUT_CLASSIFICATION	0.8536989249760314	WITHOUT_CLASSIFICATION	0.14630107502396866	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9995848507439913	WITHOUT_CLASSIFICATION	4.151492560086683E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9987546741967795	WITHOUT_CLASSIFICATION	0.0012453258032204836	DESIGN
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9908383740856723	WITHOUT_CLASSIFICATION	0.009161625914327657	DESIGN
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9955389286860818	WITHOUT_CLASSIFICATION	0.004461071313918055	DESIGN
//no big deal	WITHOUT_CLASSIFICATION	0.9988625827270954	WITHOUT_CLASSIFICATION	0.0011374172729046493	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9994011966224728	WITHOUT_CLASSIFICATION	5.988033775271281E-4	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9994011966224728	WITHOUT_CLASSIFICATION	5.988033775271281E-4	DESIGN
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9996834594883318	WITHOUT_CLASSIFICATION	3.165405116681085E-4	DESIGN
// see explanation above...	WITHOUT_CLASSIFICATION	0.9994171758690759	WITHOUT_CLASSIFICATION	5.828241309241764E-4	DESIGN
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9995254022482205	WITHOUT_CLASSIFICATION	4.7459775177957636E-4	DESIGN
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9986467293478192	WITHOUT_CLASSIFICATION	0.001353270652180833	DESIGN
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993588881432678	WITHOUT_CLASSIFICATION	6.411118567321176E-4	DESIGN
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993588881432678	WITHOUT_CLASSIFICATION	6.411118567321176E-4	DESIGN
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.999955136797565	WITHOUT_CLASSIFICATION	4.486320243491848E-5	DESIGN
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992597490367304	WITHOUT_CLASSIFICATION	7.402509632695286E-4	DESIGN
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999843103628636	WITHOUT_CLASSIFICATION	1.5689637136412977E-5	DESIGN
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9996167211693282	WITHOUT_CLASSIFICATION	3.8327883067180676E-4	DESIGN
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9971183941351113	WITHOUT_CLASSIFICATION	0.002881605864888613	DESIGN
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9935409588488989	WITHOUT_CLASSIFICATION	0.006459041151101173	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993420841719683	WITHOUT_CLASSIFICATION	6.579158280316975E-4	DESIGN
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9994501199111728	WITHOUT_CLASSIFICATION	5.498800888271891E-4	DESIGN
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9996499380168054	WITHOUT_CLASSIFICATION	3.5006198319469746E-4	DESIGN
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9994235997706071	WITHOUT_CLASSIFICATION	5.764002293929768E-4	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9893952933636462	WITHOUT_CLASSIFICATION	0.010604706636353779	DESIGN
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9959209100796349	WITHOUT_CLASSIFICATION	0.004079089920365114	DESIGN
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9941711258402415	WITHOUT_CLASSIFICATION	0.0058288741597585314	DESIGN
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9997072919598029	WITHOUT_CLASSIFICATION	2.9270804019703773E-4	DESIGN
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999944600851594	WITHOUT_CLASSIFICATION	5.539914840594621E-6	DESIGN
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999998140207645	WITHOUT_CLASSIFICATION	1.8597923552202286E-7	DESIGN
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999971047509686	WITHOUT_CLASSIFICATION	2.895249031521347E-6	DESIGN
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999622841122504	WITHOUT_CLASSIFICATION	3.771588774949007E-5	DESIGN
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9951867345026796	WITHOUT_CLASSIFICATION	0.004813265497320416	DESIGN
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9993203929627725	WITHOUT_CLASSIFICATION	6.796070372273958E-4	DESIGN
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.999408932787048	WITHOUT_CLASSIFICATION	5.910672129518606E-4	DESIGN
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9962071750802448	WITHOUT_CLASSIFICATION	0.0037928249197552257	DESIGN
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999095760787897	WITHOUT_CLASSIFICATION	9.042392121021995E-5	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9998681820452265	WITHOUT_CLASSIFICATION	1.3181795477345388E-4	DESIGN
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9844958489391311	WITHOUT_CLASSIFICATION	0.015504151060868856	DESIGN
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9995261802163178	WITHOUT_CLASSIFICATION	4.7381978368216565E-4	DESIGN
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9988907658319398	WITHOUT_CLASSIFICATION	0.001109234168060249	DESIGN
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9978939074028718	WITHOUT_CLASSIFICATION	0.0021060925971282964	DESIGN
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9977671077360536	WITHOUT_CLASSIFICATION	0.002232892263946405	DESIGN
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9993936204850769	WITHOUT_CLASSIFICATION	6.063795149231846E-4	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9968859947417599	WITHOUT_CLASSIFICATION	0.0031140052582400435	DESIGN
// handle empty collection	WITHOUT_CLASSIFICATION	0.9835228462110064	WITHOUT_CLASSIFICATION	0.016477153788993563	DESIGN
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9998809199180194	WITHOUT_CLASSIFICATION	1.1908008198063012E-4	DESIGN
//handle empty collections	WITHOUT_CLASSIFICATION	0.9966305959182523	WITHOUT_CLASSIFICATION	0.003369404081747601	DESIGN
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9927192977741534	WITHOUT_CLASSIFICATION	0.007280702225846761	DESIGN
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9998141861835065	WITHOUT_CLASSIFICATION	1.858138164935119E-4	DESIGN
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.6928391258080716	WITHOUT_CLASSIFICATION	0.30716087419192833	DESIGN
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9948177664086857	WITHOUT_CLASSIFICATION	0.005182233591314308	DESIGN
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9998955779515155	WITHOUT_CLASSIFICATION	1.0442204848454548E-4	DESIGN
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9984278438820785	WITHOUT_CLASSIFICATION	0.0015721561179215505	DESIGN
//use the id passed in	WITHOUT_CLASSIFICATION	0.9996185882197738	WITHOUT_CLASSIFICATION	3.814117802261996E-4	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9996240353905913	WITHOUT_CLASSIFICATION	3.7596460940868406E-4	DESIGN
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9995491798725954	WITHOUT_CLASSIFICATION	4.5082012740461794E-4	DESIGN
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9998649849579762	WITHOUT_CLASSIFICATION	1.3501504202380782E-4	DESIGN
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9996485241110913	WITHOUT_CLASSIFICATION	3.5147588890870523E-4	DESIGN
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9970563656785059	WITHOUT_CLASSIFICATION	0.002943634321494146	DESIGN
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9982567835163845	WITHOUT_CLASSIFICATION	0.0017432164836155679	DESIGN
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.999800590750923	WITHOUT_CLASSIFICATION	1.9940924907704632E-4	DESIGN
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999827451858231	WITHOUT_CLASSIFICATION	1.72548141768943E-5	DESIGN
// look for a proxy	WITHOUT_CLASSIFICATION	0.9978138274958329	WITHOUT_CLASSIFICATION	0.0021861725041669756	DESIGN
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9953987690053644	WITHOUT_CLASSIFICATION	0.004601230994635619	DESIGN
//its the given optional object	WITHOUT_CLASSIFICATION	0.9992294760659313	WITHOUT_CLASSIFICATION	7.70523934068617E-4	DESIGN
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9930126657825122	WITHOUT_CLASSIFICATION	0.006987334217487746	DESIGN
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9980436085466222	WITHOUT_CLASSIFICATION	0.0019563914533777312	DESIGN
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9988440275720922	WITHOUT_CLASSIFICATION	0.001155972427907823	DESIGN
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9973418485076396	WITHOUT_CLASSIFICATION	0.0026581514923604424	DESIGN
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999701618757736	WITHOUT_CLASSIFICATION	2.983812422645972E-5	DESIGN
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9578545726453737	WITHOUT_CLASSIFICATION	0.042145427354626376	DESIGN
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9992732061973073	WITHOUT_CLASSIFICATION	7.267938026927251E-4	DESIGN
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9828789600211206	WITHOUT_CLASSIFICATION	0.01712103997887934	DESIGN
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.997885655028242	WITHOUT_CLASSIFICATION	0.002114344971757932	DESIGN
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9985795622542714	WITHOUT_CLASSIFICATION	0.0014204377457286209	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999959925356029	WITHOUT_CLASSIFICATION	4.007464397040244E-6	DESIGN
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.836730511156607	WITHOUT_CLASSIFICATION	0.163269488843393	DESIGN
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.997350566970965	WITHOUT_CLASSIFICATION	0.002649433029034995	DESIGN
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9989525875248185	WITHOUT_CLASSIFICATION	0.0010474124751814746	DESIGN
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9998688973669406	WITHOUT_CLASSIFICATION	1.3110263305938653E-4	DESIGN
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9907894204470097	WITHOUT_CLASSIFICATION	0.00921057955299025	DESIGN
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999894247031005	WITHOUT_CLASSIFICATION	1.0575296899617072E-5	DESIGN
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9995630233338817	WITHOUT_CLASSIFICATION	4.36976666118303E-4	DESIGN
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9960228197112011	WITHOUT_CLASSIFICATION	0.0039771802887988315	DESIGN
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9987813806965787	WITHOUT_CLASSIFICATION	0.0012186193034213492	DESIGN
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999540910443524	WITHOUT_CLASSIFICATION	4.590895564755764E-5	DESIGN
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9998071117177962	WITHOUT_CLASSIFICATION	1.928882822036951E-4	DESIGN
//a composite key	WITHOUT_CLASSIFICATION	0.9987419375765285	WITHOUT_CLASSIFICATION	0.001258062423471512	DESIGN
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.999386538914532	WITHOUT_CLASSIFICATION	6.134610854680626E-4	DESIGN
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9613237751270362	WITHOUT_CLASSIFICATION	0.03867622487296397	DESIGN
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9959715039118608	WITHOUT_CLASSIFICATION	0.004028496088139193	DESIGN
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9986136433664274	WITHOUT_CLASSIFICATION	0.001386356633572526	DESIGN
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.6924935133705626	DESIGN	0.30750648662943736	WITHOUT_CLASSIFICATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9022857976806309	WITHOUT_CLASSIFICATION	0.09771420231936911	DESIGN
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.989394188931643	WITHOUT_CLASSIFICATION	0.010605811068356966	DESIGN
// we found it	WITHOUT_CLASSIFICATION	0.9988076245322048	WITHOUT_CLASSIFICATION	0.0011923754677950749	DESIGN
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9989527411750624	WITHOUT_CLASSIFICATION	0.0010472588249376494	DESIGN
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9614071089005586	WITHOUT_CLASSIFICATION	0.038592891099441355	DESIGN
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9966524129884964	WITHOUT_CLASSIFICATION	0.0033475870115035767	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999631724271976	WITHOUT_CLASSIFICATION	3.682757280246786E-5	DESIGN
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9963429457032925	WITHOUT_CLASSIFICATION	0.0036570542967075985	DESIGN
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9987501550848046	WITHOUT_CLASSIFICATION	0.0012498449151953643	DESIGN
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9971055378456408	WITHOUT_CLASSIFICATION	0.002894462154359092	DESIGN
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9994800037777588	WITHOUT_CLASSIFICATION	5.199962222411694E-4	DESIGN
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9994774897727791	WITHOUT_CLASSIFICATION	5.2251022722095E-4	DESIGN
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9998095913489826	WITHOUT_CLASSIFICATION	1.904086510174984E-4	DESIGN
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9978127384305863	WITHOUT_CLASSIFICATION	0.0021872615694138024	DESIGN
//the criteria instance	WITHOUT_CLASSIFICATION	0.988280802782883	WITHOUT_CLASSIFICATION	0.01171919721711692	DESIGN
// the entity name	WITHOUT_CLASSIFICATION	0.9977190604115813	WITHOUT_CLASSIFICATION	0.002280939588418742	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999099529145493	WITHOUT_CLASSIFICATION	9.004708545069439E-5	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999099529145493	WITHOUT_CLASSIFICATION	9.004708545069439E-5	DESIGN
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9998214753235036	WITHOUT_CLASSIFICATION	1.7852467649637246E-4	DESIGN
//should never happen, i think	WITHOUT_CLASSIFICATION	0.996685742731069	WITHOUT_CLASSIFICATION	0.0033142572689310885	DESIGN
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9993584238664639	WITHOUT_CLASSIFICATION	6.415761335359985E-4	DESIGN
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9954870821348168	WITHOUT_CLASSIFICATION	0.004512917865183136	DESIGN
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9992903588150597	WITHOUT_CLASSIFICATION	7.096411849403053E-4	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9991544577810839	WITHOUT_CLASSIFICATION	8.455422189160937E-4	DESIGN
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9992421694191749	WITHOUT_CLASSIFICATION	7.578305808250407E-4	DESIGN
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.999966531698035	WITHOUT_CLASSIFICATION	3.346830196498231E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9985758257847829	WITHOUT_CLASSIFICATION	0.001424174215217053	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9997029876259572	WITHOUT_CLASSIFICATION	2.970123740428039E-4	DESIGN
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999361682473232	WITHOUT_CLASSIFICATION	6.383175267682858E-5	DESIGN
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9998046046901851	WITHOUT_CLASSIFICATION	1.9539530981493926E-4	DESIGN
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999955116357394	WITHOUT_CLASSIFICATION	4.4883642605800715E-6	DESIGN
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9995349064543313	WITHOUT_CLASSIFICATION	4.650935456687864E-4	DESIGN
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999634470529551	WITHOUT_CLASSIFICATION	3.6552947044961467E-5	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.971681748809019	WITHOUT_CLASSIFICATION	0.028318251190981025	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.971681748809019	WITHOUT_CLASSIFICATION	0.028318251190981025	DESIGN
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999779759953269	WITHOUT_CLASSIFICATION	2.2024004673067195E-5	DESIGN
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.999228397889374	WITHOUT_CLASSIFICATION	7.716021106259838E-4	DESIGN
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9996028091612794	WITHOUT_CLASSIFICATION	3.971908387205822E-4	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9997263882904148	WITHOUT_CLASSIFICATION	2.7361170958512427E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9996469760131365	WITHOUT_CLASSIFICATION	3.530239868636171E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9968225254550847	WITHOUT_CLASSIFICATION	0.0031774745449154205	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9968225254550847	WITHOUT_CLASSIFICATION	0.0031774745449154205	DESIGN
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999302551813497	WITHOUT_CLASSIFICATION	6.974481865030862E-5	DESIGN
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9989645004406205	WITHOUT_CLASSIFICATION	0.0010354995593795924	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.999940724070223	WITHOUT_CLASSIFICATION	5.927592977692592E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999398708498	WITHOUT_CLASSIFICATION	6.012915017377717E-8	DESIGN
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.8007348651205963	WITHOUT_CLASSIFICATION	0.19926513487940364	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9993508061699299	WITHOUT_CLASSIFICATION	6.491938300701023E-4	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9964196928079119	WITHOUT_CLASSIFICATION	0.003580307192088152	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9990369367956632	WITHOUT_CLASSIFICATION	9.630632043367838E-4	DESIGN
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.998760837517964	WITHOUT_CLASSIFICATION	0.0012391624820359984	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9203490152945721	WITHOUT_CLASSIFICATION	0.07965098470542785	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9973786012631052	WITHOUT_CLASSIFICATION	0.0026213987368947796	DESIGN
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9996800939493589	WITHOUT_CLASSIFICATION	3.199060506412017E-4	DESIGN
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9991343377917015	WITHOUT_CLASSIFICATION	8.656622082985015E-4	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9988121646115166	WITHOUT_CLASSIFICATION	0.00118783538848338	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9976575834425013	WITHOUT_CLASSIFICATION	0.0023424165574987637	DESIGN
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9995361330207223	WITHOUT_CLASSIFICATION	4.638669792777248E-4	DESIGN
//by default	WITHOUT_CLASSIFICATION	0.9976752920025569	WITHOUT_CLASSIFICATION	0.0023247079974432353	DESIGN
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9295749441891674	WITHOUT_CLASSIFICATION	0.07042505581083255	DESIGN
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9989207445998268	WITHOUT_CLASSIFICATION	0.0010792554001731935	DESIGN
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9990436566958235	WITHOUT_CLASSIFICATION	9.563433041765545E-4	DESIGN
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9994495898772133	WITHOUT_CLASSIFICATION	5.504101227866349E-4	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999263828389675	WITHOUT_CLASSIFICATION	7.36171610325197E-5	DESIGN
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9990518435090928	WITHOUT_CLASSIFICATION	9.48156490907151E-4	DESIGN
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9990449438332184	WITHOUT_CLASSIFICATION	9.550561667815426E-4	DESIGN
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9963607540266067	WITHOUT_CLASSIFICATION	0.003639245973393262	DESIGN
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999978339581772	WITHOUT_CLASSIFICATION	2.1660418228642984E-6	DESIGN
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9981585141525493	WITHOUT_CLASSIFICATION	0.0018414858474506393	DESIGN
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9949020497993356	WITHOUT_CLASSIFICATION	0.005097950200664429	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999947430799587	WITHOUT_CLASSIFICATION	5.256920041271761E-6	DESIGN
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9970783365953039	WITHOUT_CLASSIFICATION	0.0029216634046960403	DESIGN
//usually useless	WITHOUT_CLASSIFICATION	0.9920058947218486	WITHOUT_CLASSIFICATION	0.007994105278151309	DESIGN
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9964472390090596	WITHOUT_CLASSIFICATION	0.0035527609909404546	DESIGN
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9988130567450042	WITHOUT_CLASSIFICATION	0.001186943254995735	DESIGN
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999136493548806	WITHOUT_CLASSIFICATION	8.635064511937514E-5	DESIGN
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9988799845286561	WITHOUT_CLASSIFICATION	0.0011200154713438724	DESIGN
//may be final	WITHOUT_CLASSIFICATION	0.9977376616441125	WITHOUT_CLASSIFICATION	0.0022623383558875013	DESIGN
// may be final	WITHOUT_CLASSIFICATION	0.9988950180664324	WITHOUT_CLASSIFICATION	0.0011049819335676454	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9988723991601278	WITHOUT_CLASSIFICATION	0.0011276008398722482	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.999560205708384	WITHOUT_CLASSIFICATION	4.397942916160065E-4	DESIGN
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9997856243064474	WITHOUT_CLASSIFICATION	2.143756935525141E-4	DESIGN
// ignore it...	WITHOUT_CLASSIFICATION	0.9932934934913169	WITHOUT_CLASSIFICATION	0.006706506508683123	DESIGN
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9827592644450236	WITHOUT_CLASSIFICATION	0.017240735554976388	DESIGN
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9984659157571297	WITHOUT_CLASSIFICATION	0.0015340842428703079	DESIGN
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.99334692875797	WITHOUT_CLASSIFICATION	0.006653071242030045	DESIGN
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9972474734948977	WITHOUT_CLASSIFICATION	0.0027525265051022985	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9988723991601278	WITHOUT_CLASSIFICATION	0.0011276008398722482	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.999560205708384	WITHOUT_CLASSIFICATION	4.397942916160065E-4	DESIGN
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9994703631842345	WITHOUT_CLASSIFICATION	5.296368157655033E-4	DESIGN
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9979842634898319	WITHOUT_CLASSIFICATION	0.0020157365101681497	DESIGN
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9988549829233392	WITHOUT_CLASSIFICATION	0.0011450170766608768	DESIGN
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9993792315392006	WITHOUT_CLASSIFICATION	6.207684607993148E-4	DESIGN
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9989128557865933	WITHOUT_CLASSIFICATION	0.0010871442134067343	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9900963481889407	WITHOUT_CLASSIFICATION	0.009903651811059414	DESIGN
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998041176237111	WITHOUT_CLASSIFICATION	1.9588237628884116E-4	DESIGN
// }	WITHOUT_CLASSIFICATION	0.9981215038184842	WITHOUT_CLASSIFICATION	0.0018784961815158814	DESIGN
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9996027564789677	WITHOUT_CLASSIFICATION	3.972435210322932E-4	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.5009343401976121	WITHOUT_CLASSIFICATION	0.49906565980238804	DESIGN
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9998866532261721	WITHOUT_CLASSIFICATION	1.133467738279228E-4	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.5009343401976121	WITHOUT_CLASSIFICATION	0.49906565980238804	DESIGN
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9997885627474208	WITHOUT_CLASSIFICATION	2.1143725257924848E-4	DESIGN
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.999300668856049	WITHOUT_CLASSIFICATION	6.993311439509084E-4	DESIGN
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9997885627474208	WITHOUT_CLASSIFICATION	2.1143725257924848E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997117973235227	WITHOUT_CLASSIFICATION	2.882026764773892E-4	DESIGN
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9996080697545294	WITHOUT_CLASSIFICATION	3.9193024547056556E-4	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9988167527446737	WITHOUT_CLASSIFICATION	0.001183247255326325	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9988167527446737	WITHOUT_CLASSIFICATION	0.001183247255326325	DESIGN
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9988169243599446	WITHOUT_CLASSIFICATION	0.0011830756400554399	DESIGN
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.998826504735256	WITHOUT_CLASSIFICATION	0.0011734952647440488	DESIGN
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9988169243599446	WITHOUT_CLASSIFICATION	0.0011830756400554399	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9978206398397985	WITHOUT_CLASSIFICATION	0.002179360160201389	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9977671077360536	WITHOUT_CLASSIFICATION	0.002232892263946405	DESIGN
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.5269210000799311	WITHOUT_CLASSIFICATION	0.47307899992006874	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.998865440786142	WITHOUT_CLASSIFICATION	0.001134559213857917	DESIGN
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.998879268261722	WITHOUT_CLASSIFICATION	0.001120731738278074	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9994066036030074	WITHOUT_CLASSIFICATION	5.933963969925656E-4	DESIGN
//columns	WITHOUT_CLASSIFICATION	0.9986726729315074	WITHOUT_CLASSIFICATION	0.0013273270684926075	DESIGN
//SQL statements	WITHOUT_CLASSIFICATION	0.9977667679203278	WITHOUT_CLASSIFICATION	0.002233232079672098	DESIGN
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9921667529206859	WITHOUT_CLASSIFICATION	0.007833247079314033	DESIGN
//types	WITHOUT_CLASSIFICATION	0.9986726729315074	WITHOUT_CLASSIFICATION	0.0013273270684926075	DESIGN
// custom sql	WITHOUT_CLASSIFICATION	0.9999124351508609	WITHOUT_CLASSIFICATION	8.75648491391315E-5	DESIGN
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9989870089934707	WITHOUT_CLASSIFICATION	0.0010129910065293912	DESIGN
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9992955868642552	WITHOUT_CLASSIFICATION	7.044131357446713E-4	DESIGN
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9990782577779798	WITHOUT_CLASSIFICATION	9.217422220202153E-4	DESIGN
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999551677406315	WITHOUT_CLASSIFICATION	4.483225936842255E-5	DESIGN
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9995361330207223	WITHOUT_CLASSIFICATION	4.638669792777248E-4	DESIGN
//ELEMENT	WITHOUT_CLASSIFICATION	0.9986726729315074	WITHOUT_CLASSIFICATION	0.0013273270684926075	DESIGN
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9997104838035612	WITHOUT_CLASSIFICATION	2.8951619643879353E-4	DESIGN
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9993111039784287	WITHOUT_CLASSIFICATION	6.888960215711992E-4	DESIGN
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999270076336867	WITHOUT_CLASSIFICATION	7.29923663133062E-5	DESIGN
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9995361330207223	WITHOUT_CLASSIFICATION	4.638669792777248E-4	DESIGN
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9979177039760766	WITHOUT_CLASSIFICATION	0.002082296023923317	DESIGN
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9964009553949981	WITHOUT_CLASSIFICATION	0.0035990446050019717	DESIGN
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9468843418503223	WITHOUT_CLASSIFICATION	0.053115658149677655	DESIGN
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9907124543272471	WITHOUT_CLASSIFICATION	0.00928754567275292	DESIGN
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9587891361589748	WITHOUT_CLASSIFICATION	0.041210863841025264	DESIGN
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9545806719237719	WITHOUT_CLASSIFICATION	0.045419328076227984	DESIGN
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9772956113230389	WITHOUT_CLASSIFICATION	0.022704388676961066	DESIGN
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9872414474898407	WITHOUT_CLASSIFICATION	0.012758552510159369	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.998865440786142	WITHOUT_CLASSIFICATION	0.001134559213857917	DESIGN
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.998427685902269	WITHOUT_CLASSIFICATION	0.0015723140977309626	DESIGN
//needed by arrays	WITHOUT_CLASSIFICATION	0.9982138927114773	WITHOUT_CLASSIFICATION	0.0017861072885226104	DESIGN
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9477067154060993	WITHOUT_CLASSIFICATION	0.05229328459390066	DESIGN
//an assertion	WITHOUT_CLASSIFICATION	0.9961371830586209	WITHOUT_CLASSIFICATION	0.00386281694137923	DESIGN
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9998538333650776	WITHOUT_CLASSIFICATION	1.4616663492247355E-4	DESIGN
//create all the new entries	WITHOUT_CLASSIFICATION	0.9998075671501409	WITHOUT_CLASSIFICATION	1.924328498591329E-4	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9978206398397985	WITHOUT_CLASSIFICATION	0.002179360160201389	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9978206398397985	WITHOUT_CLASSIFICATION	0.002179360160201389	DESIGN
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9998501088176655	WITHOUT_CLASSIFICATION	1.4989118233450882E-4	DESIGN
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9998037933908492	WITHOUT_CLASSIFICATION	1.962066091508351E-4	DESIGN
//==elementType ??	WITHOUT_CLASSIFICATION	0.997727442138605	WITHOUT_CLASSIFICATION	0.002272557861395116	DESIGN
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999796891913952	WITHOUT_CLASSIFICATION	2.0310808604751116E-5	DESIGN
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9976066067045481	WITHOUT_CLASSIFICATION	0.0023933932954518537	DESIGN
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9980296728944428	WITHOUT_CLASSIFICATION	0.0019703271055572825	DESIGN
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.8497054227773783	WITHOUT_CLASSIFICATION	0.15029457722262177	DESIGN
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999886420500217	WITHOUT_CLASSIFICATION	1.135794997834393E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9991188525014305	WITHOUT_CLASSIFICATION	8.811474985694405E-4	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9993789911752667	WITHOUT_CLASSIFICATION	6.21008824733254E-4	DESIGN
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9989870089934707	WITHOUT_CLASSIFICATION	0.0010129910065293912	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
//Custom SQL	WITHOUT_CLASSIFICATION	0.99770033520035	WITHOUT_CLASSIFICATION	0.0022996647996500305	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9993789911752667	WITHOUT_CLASSIFICATION	6.21008824733254E-4	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9991724786882433	WITHOUT_CLASSIFICATION	8.275213117566777E-4	DESIGN
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9883760138143216	WITHOUT_CLASSIFICATION	0.011623986185678425	DESIGN
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9989330068282036	WITHOUT_CLASSIFICATION	0.0010669931717963758	DESIGN
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9577539431400864	WITHOUT_CLASSIFICATION	0.042246056859913506	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9970132501766067	WITHOUT_CLASSIFICATION	0.0029867498233932996	DESIGN
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9983488147195423	WITHOUT_CLASSIFICATION	0.001651185280457647	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9511171160531433	WITHOUT_CLASSIFICATION	0.04888288394685666	DESIGN
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999947975122537	WITHOUT_CLASSIFICATION	5.20248774629005E-6	DESIGN
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9993986759851293	WITHOUT_CLASSIFICATION	6.013240148706723E-4	DESIGN
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9977007952043009	WITHOUT_CLASSIFICATION	0.0022992047956990618	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9986467293478192	WITHOUT_CLASSIFICATION	0.001353270652180833	DESIGN
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9985795622542714	WITHOUT_CLASSIFICATION	0.0014204377457286209	DESIGN
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9985795622542714	WITHOUT_CLASSIFICATION	0.0014204377457286209	DESIGN
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9838265911084115	WITHOUT_CLASSIFICATION	0.01617340889158844	DESIGN
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9986262848115788	WITHOUT_CLASSIFICATION	0.0013737151884212827	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9993789911752667	WITHOUT_CLASSIFICATION	6.21008824733254E-4	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9970132501766067	WITHOUT_CLASSIFICATION	0.0029867498233932996	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9511171160531433	WITHOUT_CLASSIFICATION	0.04888288394685666	DESIGN
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9980036566594558	WITHOUT_CLASSIFICATION	0.0019963433405441595	DESIGN
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9952430428314047	WITHOUT_CLASSIFICATION	0.004756957168595191	DESIGN
// discriminator column	WITHOUT_CLASSIFICATION	0.9998098003285798	WITHOUT_CLASSIFICATION	1.9019967142015347E-4	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9998880796454789	WITHOUT_CLASSIFICATION	1.1192035452104739E-4	DESIGN
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9997180066856942	WITHOUT_CLASSIFICATION	2.8199331430577376E-4	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9986467293478192	WITHOUT_CLASSIFICATION	0.001353270652180833	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9986749817689835	WITHOUT_CLASSIFICATION	0.0013250182310165597	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9986467293478192	WITHOUT_CLASSIFICATION	0.001353270652180833	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9991724786882433	WITHOUT_CLASSIFICATION	8.275213117566777E-4	DESIGN
// JOINS	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9994402697032605	WITHOUT_CLASSIFICATION	5.597302967395107E-4	DESIGN
//Access cached SQL	WITHOUT_CLASSIFICATION	0.998538297057738	WITHOUT_CLASSIFICATION	0.0014617029422619937	DESIGN
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9910292345705808	WITHOUT_CLASSIFICATION	0.008970765429419303	DESIGN
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9994214504604825	WITHOUT_CLASSIFICATION	5.785495395175708E-4	DESIGN
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9990406489423036	WITHOUT_CLASSIFICATION	9.593510576963993E-4	DESIGN
//render the SQL	WITHOUT_CLASSIFICATION	0.9985462676134245	WITHOUT_CLASSIFICATION	0.001453732386575576	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997117973235227	WITHOUT_CLASSIFICATION	2.882026764773892E-4	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9825865943013501	WITHOUT_CLASSIFICATION	0.01741340569864994	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993303446039619	WITHOUT_CLASSIFICATION	6.696553960381075E-4	DESIGN
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.999994553912209	WITHOUT_CLASSIFICATION	5.446087791025252E-6	DESIGN
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9897909523250208	WITHOUT_CLASSIFICATION	0.01020904767497916	DESIGN
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9990651425878524	WITHOUT_CLASSIFICATION	9.348574121476336E-4	DESIGN
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.998926301209722	WITHOUT_CLASSIFICATION	0.001073698790277895	DESIGN
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9997471315972417	WITHOUT_CLASSIFICATION	2.5286840275820873E-4	DESIGN
// SQL strings	WITHOUT_CLASSIFICATION	0.9981260739003028	WITHOUT_CLASSIFICATION	0.001873926099697187	DESIGN
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999273037879829	WITHOUT_CLASSIFICATION	7.269621201708329E-5	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9986749817689835	WITHOUT_CLASSIFICATION	0.0013250182310165597	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993303446039619	WITHOUT_CLASSIFICATION	6.696553960381075E-4	DESIGN
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9986467293478192	WITHOUT_CLASSIFICATION	0.001353270652180833	DESIGN
// VERSION	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
//WHERE STRING	WITHOUT_CLASSIFICATION	0.997246224934815	WITHOUT_CLASSIFICATION	0.0027537750651850344	DESIGN
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9989643215981752	WITHOUT_CLASSIFICATION	0.0010356784018248151	DESIGN
//before add :-)	WITHOUT_CLASSIFICATION	0.997118219590992	WITHOUT_CLASSIFICATION	0.0028817804090079486	DESIGN
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9967113353588892	WITHOUT_CLASSIFICATION	0.0032886646411109054	DESIGN
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9998386328514146	WITHOUT_CLASSIFICATION	1.6136714858543572E-4	DESIGN
//note early exit here:	WITHOUT_CLASSIFICATION	0.9991634602740082	WITHOUT_CLASSIFICATION	8.365397259918789E-4	DESIGN
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9991450043874789	WITHOUT_CLASSIFICATION	8.549956125210718E-4	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9998875560819461	WITHOUT_CLASSIFICATION	1.1244391805386457E-4	DESIGN
//strip leading ", "	WITHOUT_CLASSIFICATION	0.999164904488852	WITHOUT_CLASSIFICATION	8.350955111479738E-4	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9997969403448053	WITHOUT_CLASSIFICATION	2.0305965519485912E-4	DESIGN
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9971103593590948	WITHOUT_CLASSIFICATION	0.002889640640905236	DESIGN
//null owner ok??	WITHOUT_CLASSIFICATION	0.9987193034838487	WITHOUT_CLASSIFICATION	0.0012806965161512006	DESIGN
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9998710746888119	WITHOUT_CLASSIFICATION	1.289253111880479E-4	DESIGN
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9998260074946604	WITHOUT_CLASSIFICATION	1.739925053395802E-4	DESIGN
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9466292531902949	WITHOUT_CLASSIFICATION	0.05337074680970509	DESIGN
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9982384190082594	WITHOUT_CLASSIFICATION	0.0017615809917406263	DESIGN
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9980518753766635	WITHOUT_CLASSIFICATION	0.001948124623336402	DESIGN
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9963060867037498	WITHOUT_CLASSIFICATION	0.0036939132962503325	DESIGN
// ALIASES	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9995280559187331	WITHOUT_CLASSIFICATION	4.719440812669272E-4	DESIGN
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9990074204159096	WITHOUT_CLASSIFICATION	9.92579584090483E-4	DESIGN
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.999584215632334	WITHOUT_CLASSIFICATION	4.15784367666002E-4	DESIGN
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.995692353490293	WITHOUT_CLASSIFICATION	0.004307646509706982	DESIGN
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.5689230207289652	DESIGN	0.4310769792710347	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9793651749476453	WITHOUT_CLASSIFICATION	0.020634825052354776	DESIGN
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9969607210715508	WITHOUT_CLASSIFICATION	0.003039278928449288	DESIGN
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9996557472686943	WITHOUT_CLASSIFICATION	3.442527313056425E-4	DESIGN
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9366954342407645	WITHOUT_CLASSIFICATION	0.06330456575923546	DESIGN
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9879210513041987	WITHOUT_CLASSIFICATION	0.01207894869580125	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9993110296626977	WITHOUT_CLASSIFICATION	6.889703373022852E-4	DESIGN
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9997562872645143	WITHOUT_CLASSIFICATION	2.4371273548575968E-4	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.8888260782004641	WITHOUT_CLASSIFICATION	0.11117392179953593	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9802007413530857	WITHOUT_CLASSIFICATION	0.019799258646914335	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9989310246926235	WITHOUT_CLASSIFICATION	0.0010689753073765355	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9993445705260827	WITHOUT_CLASSIFICATION	6.554294739172155E-4	DESIGN
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9895068772753768	WITHOUT_CLASSIFICATION	0.01049312272462328	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9989310246926235	WITHOUT_CLASSIFICATION	0.0010689753073765355	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9802007413530857	WITHOUT_CLASSIFICATION	0.019799258646914335	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9993445705260827	WITHOUT_CLASSIFICATION	6.554294739172155E-4	DESIGN
// add the primary key	WITHOUT_CLASSIFICATION	0.9998441930762898	WITHOUT_CLASSIFICATION	1.5580692371014739E-4	DESIGN
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9997556512839448	WITHOUT_CLASSIFICATION	2.4434871605515075E-4	DESIGN
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999684697672103	WITHOUT_CLASSIFICATION	3.153023278967437E-5	DESIGN
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9996030889113661	WITHOUT_CLASSIFICATION	3.9691108863403404E-4	DESIGN
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9998865623083554	WITHOUT_CLASSIFICATION	1.1343769164460118E-4	DESIGN
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.6859065153000176	WITHOUT_CLASSIFICATION	0.3140934846999824	DESIGN
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9948579179357644	WITHOUT_CLASSIFICATION	0.005142082064235542	DESIGN
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9979927541021829	WITHOUT_CLASSIFICATION	0.002007245897817126	DESIGN
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9969640578560337	WITHOUT_CLASSIFICATION	0.0030359421439663035	DESIGN
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9986131415917784	WITHOUT_CLASSIFICATION	0.0013868584082215249	DESIGN
// starting index	WITHOUT_CLASSIFICATION	0.999555262184286	WITHOUT_CLASSIFICATION	4.4473781571397066E-4	DESIGN
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.999727703481352	WITHOUT_CLASSIFICATION	2.722965186480627E-4	DESIGN
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9984600767672718	WITHOUT_CLASSIFICATION	0.0015399232327281773	DESIGN
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9991578354146167	WITHOUT_CLASSIFICATION	8.421645853832898E-4	DESIGN
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9998157369186141	WITHOUT_CLASSIFICATION	1.8426308138592195E-4	DESIGN
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9982410108170241	WITHOUT_CLASSIFICATION	0.0017589891829759606	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.989899964377315	WITHOUT_CLASSIFICATION	0.01010003562268504	DESIGN
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9994365377102389	WITHOUT_CLASSIFICATION	5.63462289761221E-4	DESIGN
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9998686042042894	WITHOUT_CLASSIFICATION	1.3139579571057731E-4	DESIGN
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999056040830017	WITHOUT_CLASSIFICATION	9.439591699831586E-5	DESIGN
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9766250817230249	WITHOUT_CLASSIFICATION	0.02337491827697511	DESIGN
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999529808204015	WITHOUT_CLASSIFICATION	4.701917959848387E-5	DESIGN
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9986947508318319	WITHOUT_CLASSIFICATION	0.00130524916816804	DESIGN
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999919475022415	WITHOUT_CLASSIFICATION	8.052497758455532E-6	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999054386125512	WITHOUT_CLASSIFICATION	9.456138744877543E-5	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999054386125512	WITHOUT_CLASSIFICATION	9.456138744877543E-5	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999109300125727	WITHOUT_CLASSIFICATION	8.906998742730318E-5	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999109300125727	WITHOUT_CLASSIFICATION	8.906998742730318E-5	DESIGN
// not supported	WITHOUT_CLASSIFICATION	0.9976811197370705	WITHOUT_CLASSIFICATION	0.002318880262929427	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.989899964377315	WITHOUT_CLASSIFICATION	0.01010003562268504	DESIGN
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9985560806501858	WITHOUT_CLASSIFICATION	0.00144391934981423	DESIGN
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.999602405123505	WITHOUT_CLASSIFICATION	3.9759487649503446E-4	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9786076658690409	WITHOUT_CLASSIFICATION	0.02139233413095902	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9786076658690409	WITHOUT_CLASSIFICATION	0.02139233413095902	DESIGN
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.999897091456888	WITHOUT_CLASSIFICATION	1.0290854311209955E-4	DESIGN
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9995188345653595	WITHOUT_CLASSIFICATION	4.811654346405076E-4	DESIGN
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9994218547674221	WITHOUT_CLASSIFICATION	5.781452325779858E-4	DESIGN
//skip the driving table	WITHOUT_CLASSIFICATION	0.9995590332134382	WITHOUT_CLASSIFICATION	4.4096678656191607E-4	DESIGN
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.7482884570414147	WITHOUT_CLASSIFICATION	0.2517115429585854	DESIGN
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999716199093643	WITHOUT_CLASSIFICATION	2.838009063567663E-5	DESIGN
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9982278952051667	WITHOUT_CLASSIFICATION	0.0017721047948332355	DESIGN
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9958183643943755	WITHOUT_CLASSIFICATION	0.004181635605624424	DESIGN
//now render the joins	WITHOUT_CLASSIFICATION	0.9973885605321514	WITHOUT_CLASSIFICATION	0.0026114394678485534	DESIGN
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9957286081541095	WITHOUT_CLASSIFICATION	0.004271391845890571	DESIGN
//now render the select clause	WITHOUT_CLASSIFICATION	0.998877492378954	WITHOUT_CLASSIFICATION	0.0011225076210459868	DESIGN
//now tie it all together	WITHOUT_CLASSIFICATION	0.9990976618856369	WITHOUT_CLASSIFICATION	9.023381143632393E-4	DESIGN
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9981754471816074	WITHOUT_CLASSIFICATION	0.0018245528183925698	DESIGN
//select SQL	WITHOUT_CLASSIFICATION	0.9983773784195094	WITHOUT_CLASSIFICATION	0.0016226215804906147	DESIGN
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9961748458076902	WITHOUT_CLASSIFICATION	0.003825154192309876	DESIGN
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9996712536258647	WITHOUT_CLASSIFICATION	3.287463741352388E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9842127428867233	WITHOUT_CLASSIFICATION	0.01578725711327663	DESIGN
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999484370194073	WITHOUT_CLASSIFICATION	5.156298059285894E-5	DESIGN
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9518612605838083	WITHOUT_CLASSIFICATION	0.048138739416191775	DESIGN
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9993474383541175	WITHOUT_CLASSIFICATION	6.525616458823947E-4	DESIGN
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999301551497916	WITHOUT_CLASSIFICATION	6.984485020842382E-5	DESIGN
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9954198744664802	WITHOUT_CLASSIFICATION	0.004580125533519856	DESIGN
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9997977912948468	WITHOUT_CLASSIFICATION	2.022087051532622E-4	DESIGN
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9997915441237276	WITHOUT_CLASSIFICATION	2.0845587627225305E-4	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9986013327949514	WITHOUT_CLASSIFICATION	0.0013986672050485679	DESIGN
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.999891150387069	WITHOUT_CLASSIFICATION	1.08849612931036E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993303446039619	WITHOUT_CLASSIFICATION	6.696553960381075E-4	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9997969403448053	WITHOUT_CLASSIFICATION	2.0305965519485912E-4	DESIGN
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9997455131021621	WITHOUT_CLASSIFICATION	2.544868978379538E-4	DESIGN
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9927765021483906	WITHOUT_CLASSIFICATION	0.0072234978516094095	DESIGN
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993433937227817	WITHOUT_CLASSIFICATION	6.566062772182972E-4	DESIGN
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994050974444965	WITHOUT_CLASSIFICATION	5.949025555034455E-4	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9924986347035427	WITHOUT_CLASSIFICATION	0.007501365296457237	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9924986347035427	WITHOUT_CLASSIFICATION	0.007501365296457237	DESIGN
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999965623913918	WITHOUT_CLASSIFICATION	3.4376086082322956E-6	DESIGN
// try "get"	WITHOUT_CLASSIFICATION	0.9992700335649285	WITHOUT_CLASSIFICATION	7.299664350713769E-4	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9980451331101805	WITHOUT_CLASSIFICATION	0.0019548668898194286	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9980451331101805	WITHOUT_CLASSIFICATION	0.0019548668898194286	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9968213393715957	WITHOUT_CLASSIFICATION	0.0031786606284043874	DESIGN
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9974560448649762	WITHOUT_CLASSIFICATION	0.002543955135023877	DESIGN
// do not do anything	WITHOUT_CLASSIFICATION	0.998653507946064	WITHOUT_CLASSIFICATION	0.001346492053936083	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9992558761855076	WITHOUT_CLASSIFICATION	7.441238144923979E-4	DESIGN
//cant instantiate	WITHOUT_CLASSIFICATION	0.9979781778847668	WITHOUT_CLASSIFICATION	0.002021822115233261	DESIGN
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9993931732066661	WITHOUT_CLASSIFICATION	6.068267933338206E-4	DESIGN
// otherwise:	WITHOUT_CLASSIFICATION	0.9986467293478192	WITHOUT_CLASSIFICATION	0.001353270652180833	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.998644020867572	WITHOUT_CLASSIFICATION	0.00135597913242796	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9997688269078735	WITHOUT_CLASSIFICATION	2.3117309212658708E-4	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9997688269078735	WITHOUT_CLASSIFICATION	2.3117309212658708E-4	DESIGN
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.8110125519913937	WITHOUT_CLASSIFICATION	0.18898744800860642	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9993682353438973	WITHOUT_CLASSIFICATION	6.3176465610272E-4	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9993682353438973	WITHOUT_CLASSIFICATION	6.3176465610272E-4	DESIGN
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9997552985239757	WITHOUT_CLASSIFICATION	2.447014760243102E-4	DESIGN
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9993876926411609	WITHOUT_CLASSIFICATION	6.123073588391558E-4	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9986726729315074	WITHOUT_CLASSIFICATION	0.0013273270684926075	DESIGN
// Get the caller	WITHOUT_CLASSIFICATION	0.9997938175887225	WITHOUT_CLASSIFICATION	2.061824112773532E-4	DESIGN
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9998395868125717	WITHOUT_CLASSIFICATION	1.6041318742830252E-4	DESIGN
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9996149980064188	WITHOUT_CLASSIFICATION	3.850019935810821E-4	DESIGN
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9676456310983801	WITHOUT_CLASSIFICATION	0.032354368901619975	DESIGN
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9985667085332127	WITHOUT_CLASSIFICATION	0.0014332914667873947	DESIGN
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9997712229174628	WITHOUT_CLASSIFICATION	2.2877708253707464E-4	DESIGN
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9957121151741074	WITHOUT_CLASSIFICATION	0.004287884825892541	DESIGN
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9975182472074067	WITHOUT_CLASSIFICATION	0.0024817527925932604	DESIGN
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.999182315595734	WITHOUT_CLASSIFICATION	8.176844042659559E-4	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9974034098423366	WITHOUT_CLASSIFICATION	0.0025965901576634246	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9974034098423366	WITHOUT_CLASSIFICATION	0.0025965901576634246	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9974034098423366	WITHOUT_CLASSIFICATION	0.0025965901576634246	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9974034098423366	WITHOUT_CLASSIFICATION	0.0025965901576634246	DESIGN
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9998664980499777	WITHOUT_CLASSIFICATION	1.3350195002225968E-4	DESIGN
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9993131661774435	WITHOUT_CLASSIFICATION	6.868338225565723E-4	DESIGN
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9977671077360536	WITHOUT_CLASSIFICATION	0.002232892263946405	DESIGN
//for MySQL	WITHOUT_CLASSIFICATION	0.998651376522265	WITHOUT_CLASSIFICATION	0.0013486234777350806	DESIGN
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9996458441627332	WITHOUT_CLASSIFICATION	3.541558372667599E-4	DESIGN
//null caused some problems	WITHOUT_CLASSIFICATION	0.9928727770320509	WITHOUT_CLASSIFICATION	0.007127222967949102	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9991584600964912	WITHOUT_CLASSIFICATION	8.41539903508732E-4	DESIGN
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9975970828188679	WITHOUT_CLASSIFICATION	0.0024029171811320387	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999475771134768	WITHOUT_CLASSIFICATION	5.24228865231222E-5	DESIGN
// we only release the connection	WITHOUT_CLASSIFICATION	0.9998131263272305	WITHOUT_CLASSIFICATION	1.8687367276952525E-4	DESIGN
// deprecated option...	WITHOUT_CLASSIFICATION	0.9924491803589228	WITHOUT_CLASSIFICATION	0.007550819641077276	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9992586429242328	WITHOUT_CLASSIFICATION	7.413570757671282E-4	DESIGN
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9981980668039144	WITHOUT_CLASSIFICATION	0.0018019331960855045	DESIGN
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9909220981248673	WITHOUT_CLASSIFICATION	0.009077901875132612	DESIGN
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9998147858712192	WITHOUT_CLASSIFICATION	1.852141287808314E-4	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9992586429242328	WITHOUT_CLASSIFICATION	7.413570757671282E-4	DESIGN
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9914639822230223	DESIGN	0.008536017776977677	WITHOUT_CLASSIFICATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.989334926556086	WITHOUT_CLASSIFICATION	0.010665073443914028	DESIGN
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999771563910531	WITHOUT_CLASSIFICATION	2.284360894687105E-5	DESIGN
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.998808083820063	WITHOUT_CLASSIFICATION	0.0011919161799369576	DESIGN
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9984235919154584	WITHOUT_CLASSIFICATION	0.0015764080845416745	DESIGN
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9955249460858746	WITHOUT_CLASSIFICATION	0.004475053914125341	DESIGN
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9981236588690416	WITHOUT_CLASSIFICATION	0.0018763411309584007	DESIGN
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9994861507031155	WITHOUT_CLASSIFICATION	5.138492968844933E-4	DESIGN
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997452437136736	WITHOUT_CLASSIFICATION	2.5475628632646777E-4	DESIGN
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9994850549867801	WITHOUT_CLASSIFICATION	5.149450132199234E-4	DESIGN
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997452437136736	WITHOUT_CLASSIFICATION	2.5475628632646777E-4	DESIGN
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999800892171844	WITHOUT_CLASSIFICATION	1.991078281561399E-5	DESIGN
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9940281315850364	WITHOUT_CLASSIFICATION	0.005971868414963602	DESIGN
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9997100432285226	WITHOUT_CLASSIFICATION	2.899567714773476E-4	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9997205119103866	WITHOUT_CLASSIFICATION	2.794880896134101E-4	DESIGN
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9640264511818248	WITHOUT_CLASSIFICATION	0.0359735488181752	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999676156768655	WITHOUT_CLASSIFICATION	3.2384323134502244E-4	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9997497500998979	WITHOUT_CLASSIFICATION	2.5024990010207227E-4	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9988967354276377	WITHOUT_CLASSIFICATION	0.0011032645723622477	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9997497500998979	WITHOUT_CLASSIFICATION	2.5024990010207227E-4	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999300166744487	WITHOUT_CLASSIFICATION	6.998332555130375E-5	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999113922789729	WITHOUT_CLASSIFICATION	8.86077210271666E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9992734281667749	WITHOUT_CLASSIFICATION	7.265718332250919E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999876201523917	WITHOUT_CLASSIFICATION	1.237984760820733E-5	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999676156768655	WITHOUT_CLASSIFICATION	3.2384323134502244E-4	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9988967354276377	WITHOUT_CLASSIFICATION	0.0011032645723622477	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999300166744487	WITHOUT_CLASSIFICATION	6.998332555130375E-5	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9952530607068919	WITHOUT_CLASSIFICATION	0.0047469392931081	DESIGN
//return currentId;	WITHOUT_CLASSIFICATION	0.997610439193303	WITHOUT_CLASSIFICATION	0.0023895608066969946	DESIGN
//reset the id	WITHOUT_CLASSIFICATION	0.9988106864640199	WITHOUT_CLASSIFICATION	0.0011893135359801006	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
//reset the version	WITHOUT_CLASSIFICATION	0.9994647549152268	WITHOUT_CLASSIFICATION	5.352450847731883E-4	DESIGN
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9740942046524262	WITHOUT_CLASSIFICATION	0.025905795347573715	DESIGN
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9998482155381029	WITHOUT_CLASSIFICATION	1.5178446189704887E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9842127428867233	WITHOUT_CLASSIFICATION	0.01578725711327663	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999113922789729	WITHOUT_CLASSIFICATION	8.86077210271666E-5	DESIGN
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999553653280444	WITHOUT_CLASSIFICATION	4.463467195560658E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999110983502895	WITHOUT_CLASSIFICATION	8.890164971059299E-5	DESIGN
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9992664503585977	WITHOUT_CLASSIFICATION	7.335496414023929E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9842127428867233	WITHOUT_CLASSIFICATION	0.01578725711327663	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993303446039619	WITHOUT_CLASSIFICATION	6.696553960381075E-4	DESIGN
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9993567799846214	WITHOUT_CLASSIFICATION	6.432200153786074E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9842127428867233	WITHOUT_CLASSIFICATION	0.01578725711327663	DESIGN
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.996034256186268	WITHOUT_CLASSIFICATION	0.00396574381373212	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9997444823394906	WITHOUT_CLASSIFICATION	2.5551766050935487E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993303446039619	WITHOUT_CLASSIFICATION	6.696553960381075E-4	DESIGN
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.996019981943688	WITHOUT_CLASSIFICATION	0.0039800180563119075	DESIGN
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9995966135487708	WITHOUT_CLASSIFICATION	4.033864512291594E-4	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9998601749981992	WITHOUT_CLASSIFICATION	1.3982500180080587E-4	DESIGN
// Collection Types:	WITHOUT_CLASSIFICATION	0.9983068650798568	WITHOUT_CLASSIFICATION	0.0016931349201431798	DESIGN
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9998004401581961	WITHOUT_CLASSIFICATION	1.9955984180384923E-4	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9993791836335396	WITHOUT_CLASSIFICATION	6.208163664603776E-4	DESIGN
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9996333961292719	WITHOUT_CLASSIFICATION	3.666038707280665E-4	DESIGN
//value is the entity name	WITHOUT_CLASSIFICATION	0.9963181180249485	WITHOUT_CLASSIFICATION	0.0036818819750515422	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9985573906934273	WITHOUT_CLASSIFICATION	0.0014426093065727761	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9986726729315074	WITHOUT_CLASSIFICATION	0.0013273270684926075	DESIGN
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9963181180249485	WITHOUT_CLASSIFICATION	0.0036818819750515422	DESIGN
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9979468739252304	WITHOUT_CLASSIFICATION	0.002053126074769527	DESIGN
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9984485346095973	WITHOUT_CLASSIFICATION	0.0015514653904027398	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9977671077360536	WITHOUT_CLASSIFICATION	0.002232892263946405	DESIGN
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9977310364954531	WITHOUT_CLASSIFICATION	0.0022689635045468185	DESIGN
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9997619792242086	WITHOUT_CLASSIFICATION	2.3802077579139974E-4	DESIGN
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9992357899298869	WITHOUT_CLASSIFICATION	7.642100701129996E-4	DESIGN
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.8919108864565937	WITHOUT_CLASSIFICATION	0.10808911354340632	DESIGN
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9953280288178025	WITHOUT_CLASSIFICATION	0.004671971182197574	DESIGN
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9817970224262417	WITHOUT_CLASSIFICATION	0.018202977573758324	DESIGN
//TODO!!!	WITHOUT_CLASSIFICATION	0.9986726729315074	WITHOUT_CLASSIFICATION	0.0013273270684926075	DESIGN
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9997333722295811	WITHOUT_CLASSIFICATION	2.6662777041885937E-4	DESIGN
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9997333722295811	WITHOUT_CLASSIFICATION	2.6662777041885937E-4	DESIGN
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9977311803388674	WITHOUT_CLASSIFICATION	0.002268819661132614	DESIGN
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9996429724122213	WITHOUT_CLASSIFICATION	3.570275877786712E-4	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9986726729315074	WITHOUT_CLASSIFICATION	0.0013273270684926075	DESIGN
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999968288366232	WITHOUT_CLASSIFICATION	3.171163376897001E-6	DESIGN
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999553627298144	WITHOUT_CLASSIFICATION	4.463727018560836E-5	DESIGN
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999090918520975	WITHOUT_CLASSIFICATION	9.090814790245041E-5	DESIGN
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9977784979329929	WITHOUT_CLASSIFICATION	0.0022215020670070746	DESIGN
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9992137268571222	WITHOUT_CLASSIFICATION	7.862731428777773E-4	DESIGN
//TODO	WITHOUT_CLASSIFICATION	0.5258224337827423	WITHOUT_CLASSIFICATION	0.4741775662172577	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9997501461123658	WITHOUT_CLASSIFICATION	2.498538876342825E-4	DESIGN
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9981493852184645	WITHOUT_CLASSIFICATION	0.001850614781535519	DESIGN
//cache this	WITHOUT_CLASSIFICATION	0.9818327567642666	WITHOUT_CLASSIFICATION	0.01816724323573333	DESIGN
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9964498341940025	WITHOUT_CLASSIFICATION	0.0035501658059975158	DESIGN
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9984470912208749	WITHOUT_CLASSIFICATION	0.001552908779125163	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999409248172311	WITHOUT_CLASSIFICATION	5.907518276896774E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993303446039619	WITHOUT_CLASSIFICATION	6.696553960381075E-4	DESIGN
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9988121151373902	WITHOUT_CLASSIFICATION	0.0011878848626097683	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.995238049707736	WITHOUT_CLASSIFICATION	0.004761950292264018	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.995238049707736	WITHOUT_CLASSIFICATION	0.004761950292264018	DESIGN
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999952370403663	WITHOUT_CLASSIFICATION	4.762959633654834E-6	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9993791836335396	WITHOUT_CLASSIFICATION	6.208163664603776E-4	DESIGN
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9963007224152407	WITHOUT_CLASSIFICATION	0.0036992775847593377	DESIGN
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999621629036134	WITHOUT_CLASSIFICATION	3.783709638665171E-5	DESIGN
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9990836489671834	WITHOUT_CLASSIFICATION	9.163510328166243E-4	DESIGN
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9998347936285787	WITHOUT_CLASSIFICATION	1.652063714212659E-4	DESIGN
//remember the uk value	WITHOUT_CLASSIFICATION	0.9991715877742752	WITHOUT_CLASSIFICATION	8.28412225724761E-4	DESIGN
//NOOP	WITHOUT_CLASSIFICATION	0.9987922082662937	WITHOUT_CLASSIFICATION	0.0012077917337063142	DESIGN
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9985795622542714	WITHOUT_CLASSIFICATION	0.0014204377457286209	DESIGN
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9996476919976515	WITHOUT_CLASSIFICATION	3.5230800234851924E-4	DESIGN
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9980129448095681	WITHOUT_CLASSIFICATION	0.0019870551904318653	DESIGN
// return false;	WITHOUT_CLASSIFICATION	0.9986204705065068	WITHOUT_CLASSIFICATION	0.0013795294934932437	DESIGN
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9964135032043143	WITHOUT_CLASSIFICATION	0.003586496795685617	DESIGN
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999541737429481	WITHOUT_CLASSIFICATION	4.582625705184165E-5	DESIGN
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9998224337926117	WITHOUT_CLASSIFICATION	1.7756620738824643E-4	DESIGN
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999946945761545	WITHOUT_CLASSIFICATION	5.305423845504317E-6	DESIGN
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9982130466720069	WITHOUT_CLASSIFICATION	0.0017869533279930975	DESIGN
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9994445275960117	WITHOUT_CLASSIFICATION	5.554724039882399E-4	DESIGN
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999383094368497	WITHOUT_CLASSIFICATION	6.169056315025702E-5	DESIGN
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9998748293463513	WITHOUT_CLASSIFICATION	1.2517065364877003E-4	DESIGN
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9997351643197139	WITHOUT_CLASSIFICATION	2.648356802861461E-4	DESIGN
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.998823159331728	WITHOUT_CLASSIFICATION	0.0011768406682719195	DESIGN
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9998769946065167	WITHOUT_CLASSIFICATION	1.2300539348334338E-4	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9695363126186717	WITHOUT_CLASSIFICATION	0.03046368738132831	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.7454619433218459	WITHOUT_CLASSIFICATION	0.25453805667815416	DESIGN
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9994779424679807	WITHOUT_CLASSIFICATION	5.220575320193516E-4	DESIGN
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999700063004314	WITHOUT_CLASSIFICATION	2.9993699568605175E-5	DESIGN
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9996784537828173	WITHOUT_CLASSIFICATION	3.215462171827568E-4	DESIGN
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9981914662842897	WITHOUT_CLASSIFICATION	0.0018085337157102898	DESIGN
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9895050718754795	WITHOUT_CLASSIFICATION	0.010494928124520424	DESIGN
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9993742543582769	WITHOUT_CLASSIFICATION	6.25745641723099E-4	DESIGN
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9993786203749158	WITHOUT_CLASSIFICATION	6.213796250843436E-4	DESIGN
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.999993371902078	WITHOUT_CLASSIFICATION	6.62809792196583E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9987789783328385	WITHOUT_CLASSIFICATION	0.001221021667161513	DESIGN
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9983158434907033	WITHOUT_CLASSIFICATION	0.0016841565092965572	DESIGN
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9997773643310449	WITHOUT_CLASSIFICATION	2.2263566895522384E-4	DESIGN
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9995159457136282	WITHOUT_CLASSIFICATION	4.840542863717901E-4	DESIGN
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9998578750145345	WITHOUT_CLASSIFICATION	1.421249854654199E-4	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9986030026284279	WITHOUT_CLASSIFICATION	0.0013969973715720068	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9986030026284279	WITHOUT_CLASSIFICATION	0.0013969973715720068	DESIGN
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.999400302141297	WITHOUT_CLASSIFICATION	5.996978587029957E-4	DESIGN
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9996806627788289	WITHOUT_CLASSIFICATION	3.1933722117116536E-4	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9991716603348963	WITHOUT_CLASSIFICATION	8.283396651036589E-4	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9991716603348963	WITHOUT_CLASSIFICATION	8.283396651036589E-4	DESIGN
// use default behavior	WITHOUT_CLASSIFICATION	0.9958183306915228	WITHOUT_CLASSIFICATION	0.0041816693084771525	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9980219797497413	WITHOUT_CLASSIFICATION	0.001978020250258755	DESIGN
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.8272149793957665	DESIGN	0.17278502060423354	WITHOUT_CLASSIFICATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9998759628366116	WITHOUT_CLASSIFICATION	1.2403716338841897E-4	DESIGN
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9995647567376725	WITHOUT_CLASSIFICATION	4.3524326232737427E-4	DESIGN
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9993303446039619	WITHOUT_CLASSIFICATION	6.696553960381075E-4	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999397951418773	WITHOUT_CLASSIFICATION	6.020485812269241E-5	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999397951418773	WITHOUT_CLASSIFICATION	6.020485812269241E-5	DESIGN
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9993303446039619	WITHOUT_CLASSIFICATION	6.696553960381075E-4	DESIGN
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9897856627890766	WITHOUT_CLASSIFICATION	0.010214337210923324	DESIGN
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9978206398397985	WITHOUT_CLASSIFICATION	0.002179360160201389	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.998653686335811	WITHOUT_CLASSIFICATION	0.0013463136641889929	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.998653686335811	WITHOUT_CLASSIFICATION	0.0013463136641889929	DESIGN
// includes last '.'	WITHOUT_CLASSIFICATION	0.999862433299635	WITHOUT_CLASSIFICATION	1.3756670036502787E-4	DESIGN
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9995177606597664	WITHOUT_CLASSIFICATION	4.822393402336413E-4	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9984865489099659	WITHOUT_CLASSIFICATION	0.0015134510900341538	DESIGN
// first time we find match!	WITHOUT_CLASSIFICATION	0.9998197939860758	WITHOUT_CLASSIFICATION	1.802060139241572E-4	DESIGN
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9996607447499086	WITHOUT_CLASSIFICATION	3.392552500912939E-4	DESIGN
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9906136506329071	WITHOUT_CLASSIFICATION	0.009386349367092867	DESIGN
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.999875432727535	WITHOUT_CLASSIFICATION	1.2456727246506515E-4	DESIGN
// the current iterator	WITHOUT_CLASSIFICATION	0.9998597051706962	WITHOUT_CLASSIFICATION	1.402948293037818E-4	DESIGN
// the last used iterator	WITHOUT_CLASSIFICATION	0.958988973891789	WITHOUT_CLASSIFICATION	0.04101102610821086	DESIGN
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9993127669791766	WITHOUT_CLASSIFICATION	6.872330208233303E-4	DESIGN
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9930500295579927	WITHOUT_CLASSIFICATION	0.0069499704420073315	DESIGN
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9972363348395363	WITHOUT_CLASSIFICATION	0.0027636651604637315	DESIGN
//doable if needed	WITHOUT_CLASSIFICATION	0.9986342732507777	WITHOUT_CLASSIFICATION	0.001365726749222247	DESIGN
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9594387855634441	WITHOUT_CLASSIFICATION	0.040561214436556046	DESIGN
// peek ahead	WITHOUT_CLASSIFICATION	0.9970126095772961	WITHOUT_CLASSIFICATION	0.0029873904227039018	DESIGN
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999596109357357	WITHOUT_CLASSIFICATION	4.038906426434936E-5	DESIGN
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.999835361243131	WITHOUT_CLASSIFICATION	1.646387568690886E-4	DESIGN
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999354783986335	WITHOUT_CLASSIFICATION	6.452160136649053E-5	DESIGN
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.999745178053343	WITHOUT_CLASSIFICATION	2.548219466570853E-4	DESIGN
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9990731893177274	WITHOUT_CLASSIFICATION	9.268106822725501E-4	DESIGN
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9988452450529707	WITHOUT_CLASSIFICATION	0.0011547549470293462	DESIGN
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9953968880933	WITHOUT_CLASSIFICATION	0.004603111906699974	DESIGN
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9917794394917308	WITHOUT_CLASSIFICATION	0.008220560508269291	DESIGN
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9983217975353913	WITHOUT_CLASSIFICATION	0.0016782024646087303	DESIGN
//faster?	WITHOUT_CLASSIFICATION	0.9986726729315074	WITHOUT_CLASSIFICATION	0.0013273270684926075	DESIGN
// the name of a class	WITHOUT_CLASSIFICATION	0.997889662652824	WITHOUT_CLASSIFICATION	0.002110337347176093	DESIGN
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9984009281913563	WITHOUT_CLASSIFICATION	0.001599071808643684	DESIGN
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9977671077360536	WITHOUT_CLASSIFICATION	0.002232892263946405	DESIGN
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9995507099851545	WITHOUT_CLASSIFICATION	4.492900148455326E-4	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.998266853897005	WITHOUT_CLASSIFICATION	0.0017331461029949868	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.5224119482514613	WITHOUT_CLASSIFICATION	0.4775880517485387	DESIGN
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9990983186292729	WITHOUT_CLASSIFICATION	9.01681370727092E-4	DESIGN
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9990302331409091	WITHOUT_CLASSIFICATION	9.69766859090868E-4	DESIGN
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9977671077360536	WITHOUT_CLASSIFICATION	0.002232892263946405	DESIGN
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9804305301399453	WITHOUT_CLASSIFICATION	0.01956946986005472	DESIGN
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9977671077360536	WITHOUT_CLASSIFICATION	0.002232892263946405	DESIGN
//readResolveObject	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9985795622542714	WITHOUT_CLASSIFICATION	0.0014204377457286209	DESIGN
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9995780451960327	WITHOUT_CLASSIFICATION	4.2195480396739395E-4	DESIGN
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9996693538440143	WITHOUT_CLASSIFICATION	3.3064615598567916E-4	DESIGN
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.999833190762353	WITHOUT_CLASSIFICATION	1.6680923764696615E-4	DESIGN
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9996523801649672	WITHOUT_CLASSIFICATION	3.47619835032792E-4	DESIGN
// Write HTML header	WITHOUT_CLASSIFICATION	0.9911614989223858	WITHOUT_CLASSIFICATION	0.008838501077614207	DESIGN
// Handle actions	WITHOUT_CLASSIFICATION	0.9982311194354095	WITHOUT_CLASSIFICATION	0.0017688805645904428	DESIGN
// Print page	WITHOUT_CLASSIFICATION	0.998100746318767	WITHOUT_CLASSIFICATION	0.0018992536812329542	DESIGN
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9990930455598831	WITHOUT_CLASSIFICATION	9.0695444011689E-4	DESIGN
// End unit of work	WITHOUT_CLASSIFICATION	0.9992737266076055	WITHOUT_CLASSIFICATION	7.262733923946329E-4	DESIGN
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.6775248279377679	WITHOUT_CLASSIFICATION	0.32247517206223214	DESIGN
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9960751157815636	WITHOUT_CLASSIFICATION	0.0039248842184363775	DESIGN
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.999951299016226	WITHOUT_CLASSIFICATION	4.870098377385969E-5	DESIGN
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9951661836288898	WITHOUT_CLASSIFICATION	0.004833816371110244	DESIGN
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9976251521132541	WITHOUT_CLASSIFICATION	0.0023748478867457947	DESIGN
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9621284951519616	WITHOUT_CLASSIFICATION	0.03787150484803834	DESIGN
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9997049337055086	WITHOUT_CLASSIFICATION	2.950662944913689E-4	DESIGN
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9997248507719722	WITHOUT_CLASSIFICATION	2.751492280279042E-4	DESIGN
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9997822414617359	WITHOUT_CLASSIFICATION	2.1775853826410833E-4	DESIGN
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9994798109345813	WITHOUT_CLASSIFICATION	5.201890654187854E-4	DESIGN
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9993448603919199	WITHOUT_CLASSIFICATION	6.551396080801338E-4	DESIGN
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.999617790620154	WITHOUT_CLASSIFICATION	3.822093798460579E-4	DESIGN
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9996185893770682	WITHOUT_CLASSIFICATION	3.8141062293183106E-4	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9997586972600456	WITHOUT_CLASSIFICATION	2.4130273995423443E-4	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9997586972600456	WITHOUT_CLASSIFICATION	2.4130273995423443E-4	DESIGN
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999993695663982	WITHOUT_CLASSIFICATION	6.304336018357901E-7	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9997245527873061	WITHOUT_CLASSIFICATION	2.754472126939067E-4	DESIGN
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9997405604594995	WITHOUT_CLASSIFICATION	2.5943954050037615E-4	DESIGN
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9935402810593378	WITHOUT_CLASSIFICATION	0.006459718940662191	DESIGN
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999936953688764	WITHOUT_CLASSIFICATION	6.3046311236817185E-6	DESIGN
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9970693040141743	WITHOUT_CLASSIFICATION	0.002930695985825751	DESIGN
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999961764862934	WITHOUT_CLASSIFICATION	3.8235137065845775E-6	DESIGN
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.99996804823383	WITHOUT_CLASSIFICATION	3.1951766170056496E-5	DESIGN
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9988099354108799	WITHOUT_CLASSIFICATION	0.00119006458912006	DESIGN
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999022458537147	WITHOUT_CLASSIFICATION	9.775414628535884E-5	DESIGN
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999442912419202	WITHOUT_CLASSIFICATION	5.570875807974126E-5	DESIGN
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9914222824399848	WITHOUT_CLASSIFICATION	0.008577717560015304	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999550183324	WITHOUT_CLASSIFICATION	4.498166763678761E-8	DESIGN
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9940680024470113	WITHOUT_CLASSIFICATION	0.005931997552988694	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9988837526561699	WITHOUT_CLASSIFICATION	0.0011162473438301786	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9988837526561699	WITHOUT_CLASSIFICATION	0.0011162473438301786	DESIGN
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9990770543829618	WITHOUT_CLASSIFICATION	9.229456170382403E-4	DESIGN
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9992732085979464	WITHOUT_CLASSIFICATION	7.26791402053646E-4	DESIGN
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9977869556097921	WITHOUT_CLASSIFICATION	0.002213044390207964	DESIGN
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9998528748244135	WITHOUT_CLASSIFICATION	1.4712517558650347E-4	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999535538560647	WITHOUT_CLASSIFICATION	4.6446143935344494E-5	DESIGN
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993579573443819	WITHOUT_CLASSIFICATION	6.420426556180499E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
//element //index -> id	WITHOUT_CLASSIFICATION	0.9997261788382545	WITHOUT_CLASSIFICATION	2.738211617453802E-4	DESIGN
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9615846447229884	WITHOUT_CLASSIFICATION	0.03841535527701157	DESIGN
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999159089160033	WITHOUT_CLASSIFICATION	8.409108399667895E-5	DESIGN
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999968882239229	WITHOUT_CLASSIFICATION	3.111776077171197E-6	DESIGN
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9998917626913609	WITHOUT_CLASSIFICATION	1.0823730863903855E-4	DESIGN
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9845710061044424	WITHOUT_CLASSIFICATION	0.015428993895557607	DESIGN
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999339067622075	WITHOUT_CLASSIFICATION	6.609323779253027E-5	DESIGN
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9996062612222035	WITHOUT_CLASSIFICATION	3.9373877779655896E-4	DESIGN
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9839885454794056	WITHOUT_CLASSIFICATION	0.01601145452059435	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9925023530128408	WITHOUT_CLASSIFICATION	0.007497646987159163	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999782580248844	WITHOUT_CLASSIFICATION	2.1741975115555292E-5	DESIGN
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999652862623257	WITHOUT_CLASSIFICATION	3.471373767432894E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9895822031030754	WITHOUT_CLASSIFICATION	0.010417796896924606	DESIGN
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999258000153103	WITHOUT_CLASSIFICATION	7.419998468970785E-5	DESIGN
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9998921998601961	WITHOUT_CLASSIFICATION	1.0780013980392625E-4	DESIGN
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999994523169621	WITHOUT_CLASSIFICATION	5.476830378768555E-7	DESIGN
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9953398383258194	WITHOUT_CLASSIFICATION	0.004660161674180513	DESIGN
//Named Queries:	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9510801056984374	WITHOUT_CLASSIFICATION	0.048919894301562614	DESIGN
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9804899517985739	WITHOUT_CLASSIFICATION	0.01951004820142612	DESIGN
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999793940068841	WITHOUT_CLASSIFICATION	2.0605993115889208E-5	DESIGN
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9998933506916491	WITHOUT_CLASSIFICATION	1.0664930835087886E-4	DESIGN
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9998140530379239	WITHOUT_CLASSIFICATION	1.8594696207621284E-4	DESIGN
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.999969205130611	WITHOUT_CLASSIFICATION	3.0794869388886806E-5	DESIGN
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9990544617032029	WITHOUT_CLASSIFICATION	9.45538296797037E-4	DESIGN
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999963295726767	WITHOUT_CLASSIFICATION	3.67042732330706E-6	DESIGN
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9998161817864508	WITHOUT_CLASSIFICATION	1.8381821354915845E-4	DESIGN
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9992495015734387	WITHOUT_CLASSIFICATION	7.504984265612559E-4	DESIGN
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.990216445449853	WITHOUT_CLASSIFICATION	0.00978355455014695	DESIGN
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9997514068777755	WITHOUT_CLASSIFICATION	2.485931222244514E-4	DESIGN
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9998970908893513	WITHOUT_CLASSIFICATION	1.0290911064872749E-4	DESIGN
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9994304401683778	WITHOUT_CLASSIFICATION	5.69559831622265E-4	DESIGN
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9995023107494735	WITHOUT_CLASSIFICATION	4.976892505264245E-4	DESIGN
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9967087475182816	WITHOUT_CLASSIFICATION	0.0032912524817182817	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9959156743208757	WITHOUT_CLASSIFICATION	0.004084325679124305	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9959156743208757	WITHOUT_CLASSIFICATION	0.004084325679124305	DESIGN
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999238411353936	WITHOUT_CLASSIFICATION	7.615886460647485E-5	DESIGN
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9417853311776326	WITHOUT_CLASSIFICATION	0.058214668822367345	DESIGN
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.7817834573769737	WITHOUT_CLASSIFICATION	0.21821654262302626	DESIGN
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9998169241705442	WITHOUT_CLASSIFICATION	1.8307582945570016E-4	DESIGN
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.6366663179265636	WITHOUT_CLASSIFICATION	0.3633336820734363	DESIGN
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9975672991481775	WITHOUT_CLASSIFICATION	0.002432700851822474	DESIGN
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9930998381446997	WITHOUT_CLASSIFICATION	0.006900161855300302	DESIGN
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9991660486593799	WITHOUT_CLASSIFICATION	8.339513406200171E-4	DESIGN
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9967121477034223	WITHOUT_CLASSIFICATION	0.003287852296577664	DESIGN
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997548321286464	WITHOUT_CLASSIFICATION	2.4516787135365944E-4	DESIGN
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997271672423366	WITHOUT_CLASSIFICATION	2.728327576634118E-4	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.981943597723972	WITHOUT_CLASSIFICATION	0.018056402276028005	DESIGN
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9944197968630266	WITHOUT_CLASSIFICATION	0.005580203136973318	DESIGN
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999961645187755	WITHOUT_CLASSIFICATION	3.835481224429614E-6	DESIGN
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9981877923451291	WITHOUT_CLASSIFICATION	0.0018122076548708994	DESIGN
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9949802586045914	WITHOUT_CLASSIFICATION	0.005019741395408691	DESIGN
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9178185753877834	WITHOUT_CLASSIFICATION	0.08218142461221663	DESIGN
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999773841930775	WITHOUT_CLASSIFICATION	2.261580692248299E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9992891186541248	WITHOUT_CLASSIFICATION	7.108813458750631E-4	DESIGN
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999710269688854	WITHOUT_CLASSIFICATION	2.8973031114525665E-5	DESIGN
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9995831783531703	WITHOUT_CLASSIFICATION	4.1682164682965993E-4	DESIGN
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9907290580126505	WITHOUT_CLASSIFICATION	0.009270941987349419	DESIGN
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.999834340156023	WITHOUT_CLASSIFICATION	1.6565984397700693E-4	DESIGN
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9994631739884122	WITHOUT_CLASSIFICATION	5.368260115877137E-4	DESIGN
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9997970782778308	WITHOUT_CLASSIFICATION	2.029217221692017E-4	DESIGN
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9986521055912715	WITHOUT_CLASSIFICATION	0.0013478944087284548	DESIGN
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9987337438468777	WITHOUT_CLASSIFICATION	0.0012662561531222184	DESIGN
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999076079023884	WITHOUT_CLASSIFICATION	9.239209761154311E-5	DESIGN
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.788078972796249	DESIGN	0.21192102720375106	WITHOUT_CLASSIFICATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9443293001596774	WITHOUT_CLASSIFICATION	0.05567069984032261	DESIGN
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9458289928508758	WITHOUT_CLASSIFICATION	0.05417100714912415	DESIGN
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9997330271176447	WITHOUT_CLASSIFICATION	2.6697288235530306E-4	DESIGN
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9074386070972585	WITHOUT_CLASSIFICATION	0.09256139290274142	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9993263747769152	WITHOUT_CLASSIFICATION	6.736252230847969E-4	DESIGN
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999850443411457	WITHOUT_CLASSIFICATION	1.4955658854303077E-5	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9922277191706491	WITHOUT_CLASSIFICATION	0.0077722808293508175	DESIGN
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9991884609481938	WITHOUT_CLASSIFICATION	8.115390518061323E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999893997505639	WITHOUT_CLASSIFICATION	1.0600249436143746E-5	DESIGN
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.7964942617671813	WITHOUT_CLASSIFICATION	0.2035057382328187	DESIGN
//explicit = true;	WITHOUT_CLASSIFICATION	0.9994008164359764	WITHOUT_CLASSIFICATION	5.991835640235649E-4	DESIGN
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9990970018260379	WITHOUT_CLASSIFICATION	9.029981739621709E-4	DESIGN
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9986265856522044	WITHOUT_CLASSIFICATION	0.0013734143477956043	DESIGN
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.999193709000994	WITHOUT_CLASSIFICATION	8.062909990059445E-4	DESIGN
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999998877876813	WITHOUT_CLASSIFICATION	1.1221231873085653E-7	DESIGN
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.999693343280764	WITHOUT_CLASSIFICATION	3.0665671923610366E-4	DESIGN
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9945661461626916	WITHOUT_CLASSIFICATION	0.0054338538373083466	DESIGN
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9964271398472561	WITHOUT_CLASSIFICATION	0.003572860152744026	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999550183324	WITHOUT_CLASSIFICATION	4.498166763678761E-8	DESIGN
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.994199193292841	WITHOUT_CLASSIFICATION	0.00580080670715902	DESIGN
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9997956244782807	WITHOUT_CLASSIFICATION	2.0437552171919396E-4	DESIGN
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9988656391836492	WITHOUT_CLASSIFICATION	0.001134360816350757	DESIGN
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9989614893547449	WITHOUT_CLASSIFICATION	0.0010385106452550222	DESIGN
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999990048717267	WITHOUT_CLASSIFICATION	9.951282734134823E-7	DESIGN
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9996916558936362	WITHOUT_CLASSIFICATION	3.083441063637988E-4	DESIGN
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9977206580954373	WITHOUT_CLASSIFICATION	0.0022793419045628108	DESIGN
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9996728302103568	WITHOUT_CLASSIFICATION	3.271697896431803E-4	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9995848507439913	WITHOUT_CLASSIFICATION	4.151492560086683E-4	DESIGN
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9996728419265432	WITHOUT_CLASSIFICATION	3.271580734568735E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999701410419728	WITHOUT_CLASSIFICATION	2.985895802712933E-5	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9954086141345159	WITHOUT_CLASSIFICATION	0.004591385865484155	DESIGN
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9997294860850963	WITHOUT_CLASSIFICATION	2.7051391490372895E-4	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9919479166885906	WITHOUT_CLASSIFICATION	0.008052083311409408	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996248057762411	WITHOUT_CLASSIFICATION	3.7519422375877597E-4	DESIGN
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9995361330207223	WITHOUT_CLASSIFICATION	4.638669792777248E-4	DESIGN
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9979786137856758	WITHOUT_CLASSIFICATION	0.002021386214324311	DESIGN
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.999316180709711	WITHOUT_CLASSIFICATION	6.838192902890183E-4	DESIGN
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999890891265948	WITHOUT_CLASSIFICATION	1.0910873405193081E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996248057762411	WITHOUT_CLASSIFICATION	3.7519422375877597E-4	DESIGN
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9862216047150806	WITHOUT_CLASSIFICATION	0.013778395284919495	DESIGN
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9383476064599698	DESIGN	0.0616523935400301	WITHOUT_CLASSIFICATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.999959572301926	WITHOUT_CLASSIFICATION	4.0427698074013936E-5	DESIGN
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9972226909282046	WITHOUT_CLASSIFICATION	0.0027773090717953842	DESIGN
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9993228245436956	WITHOUT_CLASSIFICATION	6.771754563043777E-4	DESIGN
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9231519127422791	WITHOUT_CLASSIFICATION	0.0768480872577209	DESIGN
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9991203354168817	WITHOUT_CLASSIFICATION	8.796645831183658E-4	DESIGN
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9902445213492471	WITHOUT_CLASSIFICATION	0.009755478650752823	DESIGN
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9943745701354793	WITHOUT_CLASSIFICATION	0.00562542986452065	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9961032677557347	WITHOUT_CLASSIFICATION	0.0038967322442653232	DESIGN
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9936515814978387	WITHOUT_CLASSIFICATION	0.006348418502161293	DESIGN
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9321035961350419	WITHOUT_CLASSIFICATION	0.06789640386495807	DESIGN
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9998819983656131	WITHOUT_CLASSIFICATION	1.1800163438684237E-4	DESIGN
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9996841752309361	WITHOUT_CLASSIFICATION	3.158247690639951E-4	DESIGN
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9998088469041964	WITHOUT_CLASSIFICATION	1.9115309580372403E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9695363126186717	WITHOUT_CLASSIFICATION	0.03046368738132831	DESIGN
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999034425675752	WITHOUT_CLASSIFICATION	9.655743242480181E-5	DESIGN
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999606339234559	WITHOUT_CLASSIFICATION	3.936607654398805E-5	DESIGN
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9991468476463589	WITHOUT_CLASSIFICATION	8.531523536411432E-4	DESIGN
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.8429719903184076	WITHOUT_CLASSIFICATION	0.1570280096815923	DESIGN
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9993464917985173	WITHOUT_CLASSIFICATION	6.535082014826196E-4	DESIGN
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999954669235497	WITHOUT_CLASSIFICATION	4.533076450224665E-6	DESIGN
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9872577051918787	WITHOUT_CLASSIFICATION	0.012742294808121328	DESIGN
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9951375352955186	WITHOUT_CLASSIFICATION	0.0048624647044813295	DESIGN
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9997822076562891	WITHOUT_CLASSIFICATION	2.1779234371097184E-4	DESIGN
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999863830370748	WITHOUT_CLASSIFICATION	1.3616962925274663E-5	DESIGN
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.937754421529899	WITHOUT_CLASSIFICATION	0.06224557847010097	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9893952933636462	WITHOUT_CLASSIFICATION	0.010604706636353779	DESIGN
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.5684470259873448	DESIGN	0.4315529740126552	WITHOUT_CLASSIFICATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.982638806997698	WITHOUT_CLASSIFICATION	0.01736119300230193	DESIGN
// and perform the load	WITHOUT_CLASSIFICATION	0.9987185075822599	WITHOUT_CLASSIFICATION	0.0012814924177401044	DESIGN
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.999883242840011	WITHOUT_CLASSIFICATION	1.1675715998905708E-4	DESIGN
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9991104941068124	WITHOUT_CLASSIFICATION	8.895058931876448E-4	DESIGN
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9982127304488891	WITHOUT_CLASSIFICATION	0.0017872695511108266	DESIGN
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999465722742976	WITHOUT_CLASSIFICATION	5.3427725702434074E-5	DESIGN
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9834509935435033	WITHOUT_CLASSIFICATION	0.01654900645649671	DESIGN
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9986755217991073	WITHOUT_CLASSIFICATION	0.0013244782008926808	DESIGN
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9548241075367824	WITHOUT_CLASSIFICATION	0.04517589246321766	DESIGN
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9981613310144589	WITHOUT_CLASSIFICATION	0.001838668985541144	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999631724271976	WITHOUT_CLASSIFICATION	3.682757280246786E-5	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9994918658553242	WITHOUT_CLASSIFICATION	5.081341446757468E-4	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9994918658553242	WITHOUT_CLASSIFICATION	5.081341446757468E-4	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9991544577810839	WITHOUT_CLASSIFICATION	8.455422189160937E-4	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9997029876259572	WITHOUT_CLASSIFICATION	2.970123740428039E-4	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9997263882904148	WITHOUT_CLASSIFICATION	2.7361170958512427E-4	DESIGN
/**	WITHOUT_CLASSIFICATION	0.8506841282293386	DESIGN	0.14931587177066127	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9992558761855076	WITHOUT_CLASSIFICATION	7.441238144923979E-4	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9992558761855076	WITHOUT_CLASSIFICATION	7.441238144923979E-4	DESIGN
//        }	WITHOUT_CLASSIFICATION	0.9954080042408641	WITHOUT_CLASSIFICATION	0.00459199575913593	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9976575834425013	WITHOUT_CLASSIFICATION	0.0023424165574987637	DESIGN
//	WITHOUT_CLASSIFICATION	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999263828389675	WITHOUT_CLASSIFICATION	7.36171610325197E-5	DESIGN
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999974241039123	WITHOUT_CLASSIFICATION	2.5758960875935995E-6	DESIGN
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9998386254223685	WITHOUT_CLASSIFICATION	1.6137457763157838E-4	DESIGN
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9998850891795081	WITHOUT_CLASSIFICATION	1.1491082049186779E-4	DESIGN
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9984603771072708	WITHOUT_CLASSIFICATION	0.0015396228927292489	DESIGN
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.8176969466677981	DESIGN	0.18230305333220195	WITHOUT_CLASSIFICATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999749496712067	WITHOUT_CLASSIFICATION	2.50503287932993E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999749496712067	WITHOUT_CLASSIFICATION	2.50503287932993E-4	DESIGN
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9995361330207223	WITHOUT_CLASSIFICATION	4.638669792777248E-4	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9986467293478192	WITHOUT_CLASSIFICATION	0.001353270652180833	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9993986759851293	WITHOUT_CLASSIFICATION	6.013240148706723E-4	DESIGN
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9984115808640963	WITHOUT_CLASSIFICATION	0.0015884191359036332	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993303446039619	WITHOUT_CLASSIFICATION	6.696553960381075E-4	DESIGN
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9599049082916393	WITHOUT_CLASSIFICATION	0.04009509170836077	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9825865943013501	WITHOUT_CLASSIFICATION	0.01741340569864994	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993303446039619	WITHOUT_CLASSIFICATION	6.696553960381075E-4	DESIGN
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9995884917841764	WITHOUT_CLASSIFICATION	4.1150821582361125E-4	DESIGN
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9993326450615637	WITHOUT_CLASSIFICATION	6.673549384362363E-4	DESIGN
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9792340403022454	WITHOUT_CLASSIFICATION	0.020765959697754542	DESIGN
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9855160976241876	WITHOUT_CLASSIFICATION	0.014483902375812456	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9961032677557347	WITHOUT_CLASSIFICATION	0.0038967322442653232	DESIGN
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.5188715283369135	WITHOUT_CLASSIFICATION	0.48112847166308653	DESIGN
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9927744486762787	WITHOUT_CLASSIFICATION	0.00722555132372126	DESIGN
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999511686804666	WITHOUT_CLASSIFICATION	4.883131953337837E-5	DESIGN
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999636653702202	WITHOUT_CLASSIFICATION	3.6334629779779096E-5	DESIGN
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999182300417903	WITHOUT_CLASSIFICATION	8.176995820979219E-5	DESIGN
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9985795622542714	WITHOUT_CLASSIFICATION	0.0014204377457286209	DESIGN
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9687984091227406	WITHOUT_CLASSIFICATION	0.031201590877259402	DESIGN
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9991198634649886	WITHOUT_CLASSIFICATION	8.801365350113462E-4	DESIGN
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9989033680970731	WITHOUT_CLASSIFICATION	0.001096631902926875	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9955054762112279	WITHOUT_CLASSIFICATION	0.004494523788772076	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9955054762112279	WITHOUT_CLASSIFICATION	0.004494523788772076	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9992586429242328	WITHOUT_CLASSIFICATION	7.413570757671282E-4	DESIGN
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999579916703893	WITHOUT_CLASSIFICATION	4.200832961054772E-5	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9991627424363918	WITHOUT_CLASSIFICATION	8.3725756360811E-4	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9985234343494912	WITHOUT_CLASSIFICATION	0.0014765656505087753	DESIGN
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.8768970028030758	WITHOUT_CLASSIFICATION	0.12310299719692416	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9997205119103866	WITHOUT_CLASSIFICATION	2.794880896134101E-4	DESIGN
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999819293551746	WITHOUT_CLASSIFICATION	1.8070644825399404E-5	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9952530607068919	WITHOUT_CLASSIFICATION	0.0047469392931081	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9998743571467309	WITHOUT_CLASSIFICATION	1.256428532690032E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9842127428867233	WITHOUT_CLASSIFICATION	0.01578725711327663	DESIGN
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9679911663090661	DESIGN	0.032008833690933956	WITHOUT_CLASSIFICATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9998941856182144	WITHOUT_CLASSIFICATION	1.0581438178568526E-4	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999205415779034	WITHOUT_CLASSIFICATION	7.945842209662886E-5	DESIGN
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.8563971605936274	WITHOUT_CLASSIFICATION	0.14360283940637264	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9989543175566346	WITHOUT_CLASSIFICATION	0.0010456824433654915	DESIGN
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.7815916067313491	WITHOUT_CLASSIFICATION	0.21840839326865102	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9986258797415478	WITHOUT_CLASSIFICATION	0.0013741202584521067	DESIGN
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9969339202525193	WITHOUT_CLASSIFICATION	0.0030660797474807234	DESIGN
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9877111340824409	WITHOUT_CLASSIFICATION	0.012288865917559124	DESIGN
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9983139171051835	WITHOUT_CLASSIFICATION	0.0016860828948164338	DESIGN
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999921143186834	WITHOUT_CLASSIFICATION	7.885681316478148E-6	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9984865489099659	WITHOUT_CLASSIFICATION	0.0015134510900341538	DESIGN
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.991796876937688	WITHOUT_CLASSIFICATION	0.008203123062311893	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9985139628985055	WITHOUT_CLASSIFICATION	0.0014860371014944875	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9985139628985055	WITHOUT_CLASSIFICATION	0.0014860371014944875	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999468876013884	WITHOUT_CLASSIFICATION	5.311239861151189E-5	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9996742524427933	WITHOUT_CLASSIFICATION	3.257475572066724E-4	DESIGN
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9788607835534487	WITHOUT_CLASSIFICATION	0.021139216446551333	DESIGN
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9743371341651871	WITHOUT_CLASSIFICATION	0.02566286583481292	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9986576044603137	WITHOUT_CLASSIFICATION	0.0013423955396863214	DESIGN
// todo : what else to do here?	DESIGN	0.9951881542050086	WITHOUT_CLASSIFICATION	0.0048118457949913205	DESIGN
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.8544560656936557	WITHOUT_CLASSIFICATION	0.1455439343063443	DESIGN
// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. // The need for it is intended to be alleviated with future developement, thus it is // not defined as an Environment constant... // // it is used to control whether we should consult the JDBC metadata to determine // certain Settings default values; it is useful to *not* do this when the database // may not be available (mainly in tools usage).	DESIGN	0.9994188970148672	DESIGN	5.811029851328233E-4	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.9191362530508392	WITHOUT_CLASSIFICATION	0.0808637469491608	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.9191362530508392	WITHOUT_CLASSIFICATION	0.0808637469491608	DESIGN
// todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9935796738736123	WITHOUT_CLASSIFICATION	0.006420326126387637	DESIGN
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9999896227417717	WITHOUT_CLASSIFICATION	1.037725822837208E-5	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction.  no idea...	DESIGN	0.8616761876618686	WITHOUT_CLASSIFICATION	0.1383238123381314	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9980726456250287	DESIGN	0.001927354374971291	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9980726456250287	DESIGN	0.001927354374971291	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9885439292032412	DESIGN	0.011456070796758701	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9885439292032412	DESIGN	0.011456070796758701	WITHOUT_CLASSIFICATION
// TODO: I considered validating TS cache config here, // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used	DESIGN	0.9752858334451068	DESIGN	0.024714166554893263	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9721254946773363	DESIGN	0.027874505322663695	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9721254946773363	DESIGN	0.027874505322663695	WITHOUT_CLASSIFICATION
// TODO Why not use the timestamp in a DataVersion?	DESIGN	0.9939921723118015	DESIGN	0.0060078276881984785	WITHOUT_CLASSIFICATION
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9999896227417717	WITHOUT_CLASSIFICATION	1.037725822837208E-5	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction. no idea...	DESIGN	0.8758555953269863	WITHOUT_CLASSIFICATION	0.1241444046730137	DESIGN
//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9935109208507612	WITHOUT_CLASSIFICATION	0.0064890791492386996	DESIGN
// turn hibernate.c3p0.* into c3p0.*, so c3p0 // gets a chance to see all hibernate.c3p0.*	DESIGN	0.9718139427973844	WITHOUT_CLASSIFICATION	0.0281860572026156	DESIGN
//TODO: this bit actually has to be called after all cascades! //      but since identity insert is called *synchronously*, //      instead of asynchronously as other actions, it isn't	DESIGN	0.5407432082129359	DESIGN	0.4592567917870642	WITHOUT_CLASSIFICATION
//TODO: reenable if we also fix the above todo	DESIGN	0.7402291358146246	WITHOUT_CLASSIFICATION	0.25977086418537537	DESIGN
//TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.9783009833179472	WITHOUT_CLASSIFICATION	0.021699016682052683	DESIGN
// we may be screwed here since the collection action is about to execute // and we do not know the final owner key value	DESIGN	0.9985079194713842	WITHOUT_CLASSIFICATION	0.0014920805286158289	DESIGN
/** Create an action that will evict collection and entity regions based on queryspaces (table names).	DESIGN	0.9583353533390336	DESIGN	0.04166464666096641	WITHOUT_CLASSIFICATION
// todo : what else to do here?	DESIGN	0.9951881542050086	WITHOUT_CLASSIFICATION	0.0048118457949913205	DESIGN
// todo : modify the class definition if not already transformed...	DESIGN	0.99753395576597	WITHOUT_CLASSIFICATION	0.0024660442340299583	DESIGN
// todo : what else to do here?	DESIGN	0.9951881542050086	WITHOUT_CLASSIFICATION	0.0048118457949913205	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call start	DESIGN	0.9976547356655024	WITHOUT_CLASSIFICATION	0.0023452643344976203	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.9972072862205665	WITHOUT_CLASSIFICATION	0.002792713779433573	DESIGN
//TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9424947089914115	DESIGN	0.05750529100858847	WITHOUT_CLASSIFICATION
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.8544560656936557	WITHOUT_CLASSIFICATION	0.1455439343063443	DESIGN
//TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.5947642516306695	WITHOUT_CLASSIFICATION	0.40523574836933046	DESIGN
//TODO: assumes all collections disassemble to an array!	DESIGN	0.9969645710234658	WITHOUT_CLASSIFICATION	0.00303542897653426	DESIGN
//TODO: reuse the PreLoadEvent	DESIGN	0.9702050151139108	WITHOUT_CLASSIFICATION	0.02979498488608925	DESIGN
// todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; // this should be refactored to instead expose a method to assemble a EntityEntry based on this // state for return.	DESIGN	0.8719090703860156	WITHOUT_CLASSIFICATION	0.12809092961398436	DESIGN
// todo : what is the implication of this?	DESIGN	0.9982203680992533	WITHOUT_CLASSIFICATION	0.0017796319007467077	DESIGN
// use COUNT as the default.  This mimics the old behavior, although // NONE might be a better option moving forward in the case of callable	DESIGN	0.9855503082887913	WITHOUT_CLASSIFICATION	0.014449691711208556	DESIGN
/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a	DESIGN	0.9999686695184111	DESIGN	3.1330481588790703E-5	WITHOUT_CLASSIFICATION
//TODO: suck this into initLaziness!	DESIGN	0.5127948289816372	DESIGN	0.4872051710183628	WITHOUT_CLASSIFICATION
// we have to set up the table later!! yuck	DESIGN	0.9998140720044674	WITHOUT_CLASSIFICATION	1.8592799553263415E-4	DESIGN
//TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.8016925211906993	WITHOUT_CLASSIFICATION	0.19830747880930072	DESIGN
// todo : again, how *should* this work for non-pojo entities?	DESIGN	0.9906470982236503	WITHOUT_CLASSIFICATION	0.009352901776349832	DESIGN
// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9921660155892986	DESIGN	0.007833984410701319	WITHOUT_CLASSIFICATION
// This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.5744461793967852	WITHOUT_CLASSIFICATION	0.42555382060321467	DESIGN
//TODO: bad implementation, cos it depends upon ordering of mapping doc //      fixing this requires that Collection/PersistentClass gain access //      to the Mappings reference from Configuration (or the filterDefinitions //      map directly) sometime during Configuration.buildSessionFactory //      (after all the types/filter-defs are known and before building //      persisters).	DESIGN	0.9094710001236843	WITHOUT_CLASSIFICATION	0.09052899987631575	DESIGN
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.9781694191937738	DESIGN	0.021830580806226234	WITHOUT_CLASSIFICATION
// hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.999602644969209	WITHOUT_CLASSIFICATION	3.9735503079087707E-4	DESIGN
//FIXME: get the PersistentClass	DESIGN	0.9991893431319953	WITHOUT_CLASSIFICATION	8.10656868004772E-4	DESIGN
//FIXME: get the PersistentClass	DESIGN	0.9991893431319953	WITHOUT_CLASSIFICATION	8.10656868004772E-4	DESIGN
//Icky workaround for MySQL bug:	DESIGN	0.8513236607383237	DESIGN	0.1486763392616763	WITHOUT_CLASSIFICATION
//TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.6902429513357297	WITHOUT_CLASSIFICATION	0.3097570486642704	DESIGN
//TODO possibly relax that	DESIGN	0.6065192121828695	DESIGN	0.3934807878171304	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.6065192121828695	DESIGN	0.3934807878171304	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.6065192121828695	DESIGN	0.3934807878171304	WITHOUT_CLASSIFICATION
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.9781694191937738	DESIGN	0.021830580806226234	WITHOUT_CLASSIFICATION
//use a degenerated strategy for backward compatibility	DESIGN	0.9969925394337837	WITHOUT_CLASSIFICATION	0.0030074605662162813	DESIGN
// Sets can be just a view of a part of another collection. // do we need to copy it to be sure it won't be changing // underneath us? // ie. this.set.addAll(set);	DESIGN	0.9329315588653264	WITHOUT_CLASSIFICATION	0.06706844113467363	DESIGN
//note that i parameter is now unused (delete it?)	DESIGN	0.987765570457148	WITHOUT_CLASSIFICATION	0.01223442954285196	DESIGN
//just to help out during the load (ugly, i know)	DESIGN	0.9989767853569723	WITHOUT_CLASSIFICATION	0.0010232146430276833	DESIGN
// TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.9500191444368294	WITHOUT_CLASSIFICATION	0.04998085556317046	DESIGN
// yick!  need this for proper serialization/deserialization handling...	DESIGN	0.7973489385398327	WITHOUT_CLASSIFICATION	0.2026510614601673	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.9191362530508392	WITHOUT_CLASSIFICATION	0.0808637469491608	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.9191362530508392	WITHOUT_CLASSIFICATION	0.0808637469491608	DESIGN
//yuck!	DESIGN	0.9986726729315074	WITHOUT_CLASSIFICATION	0.0013273270684926075	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.9191362530508392	WITHOUT_CLASSIFICATION	0.0808637469491608	DESIGN
// TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.99968130424244	DESIGN	3.186957575600322E-4	WITHOUT_CLASSIFICATION
//HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.997470302392883	WITHOUT_CLASSIFICATION	0.002529697607116839	DESIGN
// does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.9942964233656617	WITHOUT_CLASSIFICATION	0.005703576634338183	DESIGN
// sql-server, at least needed this dropped after use; strange!	DESIGN	0.9921147073320632	WITHOUT_CLASSIFICATION	0.007885292667936836	DESIGN
// todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.9995808196123408	WITHOUT_CLASSIFICATION	4.1918038765922786E-4	DESIGN
// TBD should this be varbinary($1)? //	DESIGN	0.9045937827170125	WITHOUT_CLASSIFICATION	0.09540621728298745	DESIGN
// is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9947381435338687	WITHOUT_CLASSIFICATION	0.005261856466131313	DESIGN
// xmlforest requires a new kind of function constructor	DESIGN	0.998622454205657	WITHOUT_CLASSIFICATION	0.0013775457943430243	DESIGN
// Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9050194077456636	WITHOUT_CLASSIFICATION	0.09498059225433646	DESIGN
// Do we need to qualify index names with the schema name?	DESIGN	0.9687231729048082	WITHOUT_CLASSIFICATION	0.03127682709519164	DESIGN
// Does this dialect support the UNIQUE column syntax?	DESIGN	0.9705715526338389	WITHOUT_CLASSIFICATION	0.029428447366161074	DESIGN
// Does this dialect support check constraints?	DESIGN	0.8881635748028418	WITHOUT_CLASSIFICATION	0.1118364251971582	DESIGN
// Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9161599778880589	WITHOUT_CLASSIFICATION	0.08384002211194108	DESIGN
// Does this dialect support the FOR UPDATE syntax?	DESIGN	0.8556760320254225	WITHOUT_CLASSIFICATION	0.14432396797457736	DESIGN
// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.8556760320254225	WITHOUT_CLASSIFICATION	0.14432396797457736	DESIGN
// Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.7256304621338395	DESIGN	0.27436953786616053	WITHOUT_CLASSIFICATION
//note there is a wierd implementation in the client side	DESIGN	0.9998345851634579	WITHOUT_CLASSIFICATION	1.654148365420887E-4	DESIGN
//TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.9898501372797609	WITHOUT_CLASSIFICATION	0.010149862720239223	DESIGN
// todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.9988493748182089	WITHOUT_CLASSIFICATION	0.0011506251817910865	DESIGN
// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.9985928561624386	WITHOUT_CLASSIFICATION	0.001407143837561325	DESIGN
//TODO: should orphans really be deleted during lock???	DESIGN	0.5412198922484868	DESIGN	0.4587801077515133	WITHOUT_CLASSIFICATION
// orphans should not be deleted during merge??	DESIGN	0.9792268142841998	WITHOUT_CLASSIFICATION	0.020773185715800228	DESIGN
// orphans should not be deleted during copy??	DESIGN	0.9792268142841998	WITHOUT_CLASSIFICATION	0.020773185715800228	DESIGN
//I suppose?	DESIGN	0.9971317134125468	WITHOUT_CLASSIFICATION	0.0028682865874530925	DESIGN
//TODO: suck this logic into the collection!	DESIGN	0.7159650698658432	WITHOUT_CLASSIFICATION	0.28403493013415676	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // get the ID from collection.getOwner()	DESIGN	0.9511048040380502	WITHOUT_CLASSIFICATION	0.04889519596194976	DESIGN
//TODO:refactor + make this method private	DESIGN	0.9823251594942473	WITHOUT_CLASSIFICATION	0.01767484050575277	DESIGN
// todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9948108947371341	WITHOUT_CLASSIFICATION	0.00518910526286587	DESIGN
//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.8505290161748035	DESIGN	0.14947098382519652	WITHOUT_CLASSIFICATION
//TODO: better to pass the id in as an argument?	DESIGN	0.9965213489444534	WITHOUT_CLASSIFICATION	0.0034786510555465467	DESIGN
// todo : potentially look at optimizing these two arrays	DESIGN	0.9930118619646725	WITHOUT_CLASSIFICATION	0.006988138035327447	DESIGN
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.9983433459895983	DESIGN	0.0016566540104017223	WITHOUT_CLASSIFICATION
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.9983433459895983	DESIGN	0.0016566540104017223	WITHOUT_CLASSIFICATION
//TODO: temporary	DESIGN	0.7541541544683045	DESIGN	0.24584584553169567	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.6249524382522953	DESIGN	0.3750475617477047	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.6249524382522953	DESIGN	0.3750475617477047	WITHOUT_CLASSIFICATION
//TODO: ugly here:	DESIGN	0.8906276903430699	DESIGN	0.10937230965693012	WITHOUT_CLASSIFICATION
//this is kinda the best we can do...	DESIGN	0.9704329778167412	WITHOUT_CLASSIFICATION	0.029567022183258677	DESIGN
//TODO: this needn't exclude subclasses...	DESIGN	0.8515819405464975	WITHOUT_CLASSIFICATION	0.1484180594535024	DESIGN
// todo : need map? the prob is a proper key, right?	DESIGN	0.7397142359866482	DESIGN	0.2602857640133519	WITHOUT_CLASSIFICATION
// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.989303326153684	WITHOUT_CLASSIFICATION	0.01069667384631587	DESIGN
// todo : hack!!! // NOTE : here we cleanup the load context when we have no more local // LCE entries.  This "works" for the time being because really // only the collection load contexts are implemented.  Long term, // this cleanup should become part of the "close result set" // processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9975950975246748	WITHOUT_CLASSIFICATION	0.002404902475325153	DESIGN
// todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.927993642841434	DESIGN	0.07200635715856588	WITHOUT_CLASSIFICATION
// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.642813094510405	WITHOUT_CLASSIFICATION	0.35718690548959486	DESIGN
// TODO : add this info to the translator and aggregate it here...	DESIGN	0.7368234895958811	DESIGN	0.26317651040411894	WITHOUT_CLASSIFICATION
//TODO: move into collection type, so we can use polymorphism!	DESIGN	0.9017722808600837	DESIGN	0.09822771913991636	WITHOUT_CLASSIFICATION
// todo : should we check the current isolation mode explicitly?	DESIGN	0.9988493748182089	WITHOUT_CLASSIFICATION	0.001150625181791086	DESIGN
//TODO: suck into event class	DESIGN	0.8468846183084965	WITHOUT_CLASSIFICATION	0.1531153816915036	DESIGN
//do we even really need this? the update will fail anyway....	DESIGN	0.9995592970745086	WITHOUT_CLASSIFICATION	4.407029254913395E-4	DESIGN
//hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.7611455520254123	WITHOUT_CLASSIFICATION	0.23885444797458763	DESIGN
//TODO: would it be better to do a refresh from db?	DESIGN	0.58862571419948	DESIGN	0.41137428580052	WITHOUT_CLASSIFICATION
//TODO: we use two visitors here, inefficient!	DESIGN	0.9183857033557636	WITHOUT_CLASSIFICATION	0.08161429664423635	DESIGN
// this class has no proxies (so do a shortcut)	DESIGN	0.989313277247023	WITHOUT_CLASSIFICATION	0.010686722752976878	DESIGN
//PostLoad is needed for EJB3 //TODO: reuse the PostLoadEvent...	DESIGN	0.9784670429380312	WITHOUT_CLASSIFICATION	0.021532957061968675	DESIGN
//TODO: put this stuff back in to read snapshot from //      the second-level cache (needs some extra work)	DESIGN	0.7549922660872915	WITHOUT_CLASSIFICATION	0.24500773391270836	DESIGN
// null or brand new collection // this will also (inefficiently) handle arrays, which have // no snapshot, so we can't do any better	DESIGN	0.986994100168595	WITHOUT_CLASSIFICATION	0.013005899831405054	DESIGN
//TODO: is this 100% correct?	DESIGN	0.9448101391020133	DESIGN	0.05518986089798673	WITHOUT_CLASSIFICATION
// TODO: iteratively get transient entities and retry merge until one of the following conditions: //       1) transientCopyCache.size() == 0 //       2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing // TODO: find out if retrying can add entities to copyCache (don't think it can...) // For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.6016713591923382	WITHOUT_CLASSIFICATION	0.3983286408076619	DESIGN
// entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9986182912182086	DESIGN	0.0013817087817915403	WITHOUT_CLASSIFICATION
//TODO: we should throw an exception if we really *know* for sure   //      that this is a detached instance, rather than just assuming //throw new StaleObjectStateException(entityName, id);	DESIGN	0.8718960231978454	DESIGN	0.12810397680215455	WITHOUT_CLASSIFICATION
// TODO : perhaps we should additionally require that the incoming entity // version be equivalent to the defined unsaved-value?	DESIGN	0.987256667435025	DESIGN	0.012743332564975039	WITHOUT_CLASSIFICATION
// perhaps this should be an exception since it is only ever used // in the above method?	DESIGN	0.9431558395504235	DESIGN	0.056844160449576416	WITHOUT_CLASSIFICATION
// Put a placeholder in entries, so we don't recurse back and try to save() the // same object again. QUESTION: should this be done before onSave() is called? // likewise, should it be done before onUpdate()?	DESIGN	0.880514928356148	DESIGN	0.11948507164385196	WITHOUT_CLASSIFICATION
//TODO: merge into one method!	DESIGN	0.6994122168460756	WITHOUT_CLASSIFICATION	0.3005877831539244	DESIGN
//TODO: refactor to .sql package	DESIGN	0.5813078475383685	DESIGN	0.4186921524616316	WITHOUT_CLASSIFICATION
/** * Provides query splitting methods, which were originally in QueryTranslator. * <br> * TODO: This will need to be refactored at some point. * * @author josh */	DESIGN	0.9994571036833569	DESIGN	5.428963166430248E-4	WITHOUT_CLASSIFICATION
//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.738639553747537	DESIGN	0.2613604462524629	WITHOUT_CLASSIFICATION
// todo : temporary //      needed because currently persister is the one that //      creates and renders the join fragments for inheritence //      hierarchies...	DESIGN	0.9988904414425234	WITHOUT_CLASSIFICATION	0.0011095585574765372	DESIGN
// TODO : better way?!?	DESIGN	0.7635206128646007	DESIGN	0.2364793871353992	WITHOUT_CLASSIFICATION
// Not possible to simply re-use the versionPropertyNode here as it causes // OOM errors due to circularity :(	DESIGN	0.9934325326419204	WITHOUT_CLASSIFICATION	0.006567467358079657	DESIGN
//TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.997743059043859	WITHOUT_CLASSIFICATION	0.002256940956141019	DESIGN
// TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9983713400195153	DESIGN	0.0016286599804846364	WITHOUT_CLASSIFICATION
// even here, if only properties mapped to the "base table" are referenced // in the set and where clauses, this could be handled by the BasicDelegate. // TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9997160000763569	DESIGN	2.83999923643118E-4	WITHOUT_CLASSIFICATION
//TODO: switch statements are always evil! We already had bugs because  //      of forgotten token types. Use polymorphism for this!	DESIGN	0.9965040813880993	WITHOUT_CLASSIFICATION	0.0034959186119007824	DESIGN
// TODO : we really need to be able to deal with component paths here also; // this is difficult because the hql-sql grammar expects all those node types // to be FromReferenceNodes.  One potential fix here would be to convert the // IntoClause to just use a FromClause/FromElement combo (as a child of the // InsertStatement) and move all this logic into the InsertStatement.  That's // probably the easiest approach (read: least amount of changes to the grammar // and code), but just doesn't feel right as then an insert would contain // 2 from-clauses	DESIGN	0.9998713101874914	DESIGN	1.2868981250863736E-4	WITHOUT_CLASSIFICATION
// really there are two situations where it should be ok to allow the insertion // into properties defined on a superclass: //      1) union-subclass with an abstract root entity //      2) discrim-subclass // // #1 is handled already because of the fact that // UnionSubclassPersister alreay always returns 0 // for this call... // // we may want to disallow it for discrim-subclass just for // consistency-sake (currently does not work anyway)...	DESIGN	0.5216017622426098	WITHOUT_CLASSIFICATION	0.4783982377573903	DESIGN
//yuck!	DESIGN	0.9986726729315074	WITHOUT_CLASSIFICATION	0.0013273270684926075	DESIGN
// implicit joins are always(?) ok to reuse	DESIGN	0.9998073198571595	WITHOUT_CLASSIFICATION	1.926801428404392E-4	DESIGN
// TODO : we may also want to check that the types here map to exactly one column/JDBC-type //      can't think of a situation where arithmetic expression between multi-column mappings //      makes any sense.	DESIGN	0.8949380365186738	WITHOUT_CLASSIFICATION	0.10506196348132629	DESIGN
// we do not know either type //BLIND GUESS!	DESIGN	0.9892543750193843	WITHOUT_CLASSIFICATION	0.010745624980615757	DESIGN
//TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999958161467932	DESIGN	4.1838532066793185E-6	WITHOUT_CLASSIFICATION
// TODO: Replace this with a more elegant solution.	DESIGN	0.9992337199959351	DESIGN	7.662800040649397E-4	WITHOUT_CLASSIFICATION
// TODO: Should this really return null?  If not, figure out something better to do here.	DESIGN	0.9186023274085898	DESIGN	0.08139767259141029	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.9191362530508392	WITHOUT_CLASSIFICATION	0.0808637469491608	DESIGN
// yuck!	DESIGN	0.9993742718171827	WITHOUT_CLASSIFICATION	6.257281828172989E-4	DESIGN
// ignore it; the incoming property could not be found so we // cannot be sure what to do here.  At the very least, the // safest is to simply not apply any dereference toggling...	DESIGN	0.6838929907541806	DESIGN	0.3161070092458194	WITHOUT_CLASSIFICATION
// TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.9288237170777406	DESIGN	0.07117628292225936	WITHOUT_CLASSIFICATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character // the trim-source	DESIGN	0.9746275693111305	WITHOUT_CLASSIFICATION	0.025372430688869588	DESIGN
// todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.5006254543653262	WITHOUT_CLASSIFICATION	0.4993745456346738	DESIGN
//TODO: is this a bit ugly?	DESIGN	0.9170935105871703	DESIGN	0.08290648941282977	WITHOUT_CLASSIFICATION
// Need a better way to define the suffixes here...	DESIGN	0.9602349542958021	WITHOUT_CLASSIFICATION	0.039765045704197866	DESIGN
// TODO: something much better - look at the type of the other expression! // TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9866334449089555	DESIGN	0.013366555091044405	WITHOUT_CLASSIFICATION
// TODO : what amount of significant digits need to be supported here? //      - from the DecimalFormat docs: //          [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.8365661274726045	DESIGN	0.16343387252739552	WITHOUT_CLASSIFICATION
// Needed the "clazz_" check to work around union-subclasses // TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9943421518181459	DESIGN	0.005657848181854116	WITHOUT_CLASSIFICATION
//We should actually rework this class to not implement Parser //and just process path expressions in the most convenient way.	DESIGN	0.8719335222720086	DESIGN	0.12806647772799146	WITHOUT_CLASSIFICATION
//The class is now way to complex!	DESIGN	0.9920704224799515	WITHOUT_CLASSIFICATION	0.007929577520048563	DESIGN
//TODO: get SQL rendering out of here	DESIGN	0.896170150552118	WITHOUT_CLASSIFICATION	0.10382984944788202	DESIGN
//TODO: is there a better way?	DESIGN	0.7036575937468342	DESIGN	0.29634240625316577	WITHOUT_CLASSIFICATION
//Must be done here because of side-effect! yuck...	DESIGN	0.9985463966118547	WITHOUT_CLASSIFICATION	0.0014536033881453127	DESIGN
//name from a super query (a bit inelegant that it shows up here)	DESIGN	0.963824916051907	WITHOUT_CLASSIFICATION	0.036175083948092907	DESIGN
// We should reengineer this class so that, rather than the current ad - // hoc linear approach to processing a stream of tokens, we instead // build up a tree of expressions.	DESIGN	0.6081650148904337	WITHOUT_CLASSIFICATION	0.39183498510956627	DESIGN
// this is ugly here, but needed because its a subquery	DESIGN	0.9883067465522974	WITHOUT_CLASSIFICATION	0.011693253447702607	DESIGN
// unhappy about this being public ... is there a better way?	DESIGN	0.8717371897435264	WITHOUT_CLASSIFICATION	0.12826281025647354	DESIGN
// Make sure this is a defined parameter and check the incoming value type // TODO: what should be the actual exception type here?	DESIGN	0.999964975508982	DESIGN	3.502449101791255E-5	WITHOUT_CLASSIFICATION
// TODO : this constructor form is *only* used from constructor directly below us; can it go away?	DESIGN	0.9998819369910223	DESIGN	1.1806300897769532E-4	WITHOUT_CLASSIFICATION
//TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.9481275560890379	WITHOUT_CLASSIFICATION	0.05187244391096208	DESIGN
// TODO : should remove this exposure //  and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.977988511366765	DESIGN	0.02201148863323503	WITHOUT_CLASSIFICATION
// todo : should this get moved to PersistentContext? // logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.530010597628895	DESIGN	0.4699894023711051	WITHOUT_CLASSIFICATION
// TODO: what type?	DESIGN	0.9272680480594475	DESIGN	0.07273195194055251	WITHOUT_CLASSIFICATION
// todo : should seriously consider not allowing a txn to begin from a child session //      can always route the request to the root session...	DESIGN	0.9154467600117717	WITHOUT_CLASSIFICATION	0.08455323998822838	DESIGN
// short-circuit for performance...	DESIGN	0.9992596476219797	WITHOUT_CLASSIFICATION	7.403523780202587E-4	DESIGN
// not absolutely necessary, but does help with aggressive release	DESIGN	0.9965620233428897	WITHOUT_CLASSIFICATION	0.0034379766571102648	DESIGN
// TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.5029446628006206	WITHOUT_CLASSIFICATION	0.4970553371993794	DESIGN
//work around a bug in all known connection pools....	DESIGN	0.8267376618652359	WITHOUT_CLASSIFICATION	0.1732623381347641	DESIGN
// TODO : make this the factory for "entity mode related" sessions; // also means making this the target of transaction-synch and the // thing that knows how to cascade things between related sessions // // At that point, perhaps this thing is a "SessionContext", and // ConnectionManager is a "JDBCContext"?  A "SessionContext" should // live in the impl package...	DESIGN	0.9999941599031041	DESIGN	5.840096895804367E-6	WITHOUT_CLASSIFICATION
//TODO: does this really need to be here? //      does the collection already have //      it's own up-to-date snapshot?	DESIGN	0.9972802421397119	DESIGN	0.0027197578602882184	WITHOUT_CLASSIFICATION
//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.8963835933556857	DESIGN	0.10361640664431425	WITHOUT_CLASSIFICATION
/**	DESIGN	0.8506841282293386	DESIGN	0.14931587177066127	WITHOUT_CLASSIFICATION
// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; //      but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; //      currently this works in conjuction with the check on //      DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from //      cache with enabled filters). // EARLY EXIT!!!!!	DESIGN	0.7931373611930305	DESIGN	0.20686263880696956	WITHOUT_CLASSIFICATION
//for sets, we should end the collection load after resolving //the entities, since we might call hashCode() on the elements //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9280271504185581	DESIGN	0.071972849581442	WITHOUT_CLASSIFICATION
//This is not very nice (and quite slow):	DESIGN	0.8016367582738274	WITHOUT_CLASSIFICATION	0.19836324172617265	DESIGN
//use of trim() here is ugly?	DESIGN	0.995030846178539	WITHOUT_CLASSIFICATION	0.0049691538214609665	DESIGN
//TODO: this is too conservative; if all preceding joins were  //      also inner joins, we could use an inner join here	DESIGN	0.9512705434590467	DESIGN	0.04872945654095324	WITHOUT_CLASSIFICATION
//TODO: look at the owning property and check that it  //      isn't lazy (by instrumentation)	DESIGN	0.9083421676206861	WITHOUT_CLASSIFICATION	0.09165783237931398	DESIGN
//TODO: inefficient	DESIGN	0.888568298253718	WITHOUT_CLASSIFICATION	0.11143170174628202	DESIGN
// why does this matter?	DESIGN	0.9725555971373099	WITHOUT_CLASSIFICATION	0.02744440286269004	DESIGN
// from the collection of associations, locate OJA for the // ManyToOne corresponding to this persister to fully // define the many-to-many; we need that OJA so that we can // use its alias here // TODO : is there a better way here?	DESIGN	0.9999735787313607	DESIGN	2.6421268639329586E-5	WITHOUT_CLASSIFICATION
//TODO: this class depends directly upon CriteriaImpl,  //      in the impl package ... add a CriteriaImplementor  //      interface	DESIGN	0.9826242526301694	DESIGN	0.017375747369830642	WITHOUT_CLASSIFICATION
//TODO: add a CriteriaImplementor interface //      this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.813760094457056	DESIGN	0.18623990554294403	WITHOUT_CLASSIFICATION
// TODO : not so sure this is needed...	DESIGN	0.6200084312000326	DESIGN	0.37999156879996754	WITHOUT_CLASSIFICATION
// meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.998580630360918	WITHOUT_CLASSIFICATION	0.001419369639081975	DESIGN
// TODO: The order in which entities are saved may matter (e.g., a particular transient entity //       may need to be saved before other transient entities can be saved; //       Keep retrying the batch of transient entities until either: //       1) there are no transient entities left in transientCopyCache //       or 2) no transient entities were saved in the last batch // For now, just run through the transient entities and retry the merge	DESIGN	0.654104868921545	WITHOUT_CLASSIFICATION	0.345895131078455	DESIGN
// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9969700726156886	DESIGN	0.0030299273843112746	WITHOUT_CLASSIFICATION
// todo : currently expects that the individual with expressions apply to the same sql table join. //      This may not be the case for joined-subclass where the property values //      might be coming from different tables in the joined hierarchy.  At some //      point we should expand this to support that capability.  However, that has //      some difficulties: //          1) the biggest is how to handle ORs when the individual comparisons are //              linked to different sql joins. //          2) here we would need to track each comparison individually, along with //              the join alias to which it applies and then pass that information //              back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.6006417532082308	DESIGN	0.3993582467917693	WITHOUT_CLASSIFICATION
// this function has a template -> restore output, apply the template and write the result out // TODO: Downcast to avoid using an interface?  Yuck.	DESIGN	0.9670149651760503	WITHOUT_CLASSIFICATION	0.03298503482394974	DESIGN
// at some point the generate phase needs to be moved out of here, // because a single object-level DML might spawn multiple SQL DML // command executions. // // Possible to just move the sql generation for dml stuff, but for // consistency-sake probably best to just move responsiblity for // the generation phase completely into the delegates // (QueryLoader/StatementExecutor) themselves.  Also, not sure why // QueryLoader currently even has a dependency on this at all; does // it need it?  Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9999996854150093	DESIGN	3.145849907197509E-7	WITHOUT_CLASSIFICATION
// get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.9969002159752104	WITHOUT_CLASSIFICATION	0.003099784024789678	DESIGN
// TODO should we just collect these like with the collections above?	DESIGN	0.9974853116955568	DESIGN	0.002514688304443161	WITHOUT_CLASSIFICATION
// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification // see the discussion there in DynamicFilterParameterSpecification's javadocs as to why // it is currently not done that way.	DESIGN	0.9183559610827589	WITHOUT_CLASSIFICATION	0.0816440389172412	DESIGN
/////////////////////////////////////////////////////////////////////////// // USED ONLY FOR REGRESSION TESTING!!!! // // todo : obviously get rid of all this junk ;) ///////////////////////////////////////////////////////////////////////////	DESIGN	0.9983513650111195	WITHOUT_CLASSIFICATION	0.001648634988880494	DESIGN
//create an index on the key columns??	DESIGN	0.9999126063466688	WITHOUT_CLASSIFICATION	8.739365333113272E-5	DESIGN
//TODO: deprecated, remove eventually	DESIGN	0.929001641835695	WITHOUT_CLASSIFICATION	0.07099835816430496	DESIGN
//create an index on the key columns??	DESIGN	0.9999126063466688	WITHOUT_CLASSIFICATION	8.739365333113272E-5	DESIGN
//TODO: improve this hack!	DESIGN	0.8652450125297153	DESIGN	0.1347549874702847	WITHOUT_CLASSIFICATION
// inheritance cycle detection (paranoid check)	DESIGN	0.9986586244274682	WITHOUT_CLASSIFICATION	0.0013413755725317676	DESIGN
//TODO: remove use of instanceof!	DESIGN	0.7747452460870501	WITHOUT_CLASSIFICATION	0.22525475391294988	DESIGN
//shortcut	DESIGN	0.9986726729315074	WITHOUT_CLASSIFICATION	0.0013273270684926075	DESIGN
//TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.985019607961828	WITHOUT_CLASSIFICATION	0.014980392038172072	DESIGN
// create an index on the key columns??	DESIGN	0.999955548872684	WITHOUT_CLASSIFICATION	4.445112731593434E-5	DESIGN
// todo : remove	DESIGN	0.9982257752299833	WITHOUT_CLASSIFICATION	0.0017742247700166759	DESIGN
// todo : remove	DESIGN	0.9982257752299833	WITHOUT_CLASSIFICATION	0.0017742247700166759	DESIGN
// todo : remove	DESIGN	0.9982257752299833	WITHOUT_CLASSIFICATION	0.0017742247700166759	DESIGN
// todo : throw exception?	DESIGN	0.999520438899429	WITHOUT_CLASSIFICATION	4.7956110057089215E-4	DESIGN
// todo : throw exception?  maybe warn if not the same?	DESIGN	0.9984143596420836	WITHOUT_CLASSIFICATION	0.0015856403579164477	DESIGN
//TODO: make EntityPersister *not* depend on SessionFactoryImplementor //interface, if possible	DESIGN	0.6972549152442611	WITHOUT_CLASSIFICATION	0.3027450847557388	DESIGN
//TODO: is there a more elegant way than downcasting?	DESIGN	0.8668104322424587	DESIGN	0.13318956775754134	WITHOUT_CLASSIFICATION
// TODO: encapsulate the protected instance variables!	DESIGN	0.9345631324773942	DESIGN	0.06543686752260586	WITHOUT_CLASSIFICATION
// should indicate that we are processing an INSERT/UPDATE/DELETE // query with a subquery implied via a collection property // function. Here, we need to use the table name itself as the // qualification alias. // TODO : verify this works for all databases... // TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9534822608225941	DESIGN	0.04651773917740587	WITHOUT_CLASSIFICATION
//TODO: copy/paste from insertRows()	DESIGN	0.8938711520950708	WITHOUT_CLASSIFICATION	0.10612884790492909	DESIGN
//TODO: copy/paste from recreate()	DESIGN	0.8938711520950708	WITHOUT_CLASSIFICATION	0.10612884790492909	DESIGN
//should this interface extend PropertyMapping?	DESIGN	0.9515949664635969	WITHOUT_CLASSIFICATION	0.04840503353640309	DESIGN
//ie. the subquery! yuck!	DESIGN	0.9986152477858705	WITHOUT_CLASSIFICATION	0.001384752214129551	DESIGN
//TODO: move to .sql package!!	DESIGN	0.538332069476685	WITHOUT_CLASSIFICATION	0.461667930523315	DESIGN
//TODO: code duplication with SingleTableEntityPersister	DESIGN	0.6960893014037768	WITHOUT_CLASSIFICATION	0.30391069859622316	DESIGN
// TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9906378735477341	DESIGN	0.00936212645226595	WITHOUT_CLASSIFICATION
//TODO: *two* hashmap lookups here is one too many...	DESIGN	0.7208189436496872	WITHOUT_CLASSIFICATION	0.2791810563503127	DESIGN
//TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.6960893014037768	WITHOUT_CLASSIFICATION	0.30391069859622316	DESIGN
//perhaps not really necessary...	DESIGN	0.9910778926180774	WITHOUT_CLASSIFICATION	0.008922107381922607	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.9988325309340266	WITHOUT_CLASSIFICATION	0.0011674690659735183	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.9988325309340266	WITHOUT_CLASSIFICATION	0.0011674690659735183	DESIGN
//TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.7410307581153281	DESIGN	0.258969241884672	WITHOUT_CLASSIFICATION
//TODO: optimize this better!	DESIGN	0.7594094666241609	WITHOUT_CLASSIFICATION	0.24059053337583913	DESIGN
//TODO: should we allow suffixes on these ?	DESIGN	0.9857598830296552	DESIGN	0.014240116970344809	WITHOUT_CLASSIFICATION
//This is really ugly, but necessary:	DESIGN	0.9964004412279643	WITHOUT_CLASSIFICATION	0.003599558772035714	DESIGN
//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.7676542496156468	DESIGN	0.23234575038435334	WITHOUT_CLASSIFICATION
//TODO: disable batch loading if lockMode > READ?	DESIGN	0.9987392864989656	WITHOUT_CLASSIFICATION	0.0012607135010344796	DESIGN
// append the SQL to return the generated identifier //TODO: suck into Insert	DESIGN	0.9578960703918078	WITHOUT_CLASSIFICATION	0.04210392960819226	DESIGN
//TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.9577924286905335	DESIGN	0.042207571309466424	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.5650606733974369	WITHOUT_CLASSIFICATION	0.43493932660256296	DESIGN
//TODO: move to .sql package, and refactor with similar things!	DESIGN	0.7616199631504539	DESIGN	0.2383800368495461	WITHOUT_CLASSIFICATION
//TODO: implement functionality //  this might be painful to do here, as the "join post processing" for //  the subquery has already been performed (meaning that for //  theta-join dialects, the join conditions have already been moved //  over to the where clause).  A "simple" solution here might to //  perform "join post processing" once for the entire query (including //  any subqueries) at one fell swoop	DESIGN	0.9995502415934191	DESIGN	4.497584065808333E-4	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.9841274612444473	WITHOUT_CLASSIFICATION	0.015872538755552838	DESIGN
//kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9972659520472421	WITHOUT_CLASSIFICATION	0.002734047952757796	DESIGN
//is this ok?	DESIGN	0.9764412278434176	WITHOUT_CLASSIFICATION	0.023558772156582468	DESIGN
//TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9996470950315167	DESIGN	3.5290496848325184E-4	WITHOUT_CLASSIFICATION
//TODO: make this a bit nicer	DESIGN	0.8966924546618984	DESIGN	0.10330754533810159	WITHOUT_CLASSIFICATION
//Yuck:	DESIGN	0.9986726729315074	WITHOUT_CLASSIFICATION	0.0013273270684926075	DESIGN
//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.9996945057274392	DESIGN	3.054942725608115E-4	WITHOUT_CLASSIFICATION
/**	DESIGN	0.8506841282293386	DESIGN	0.14931587177066127	WITHOUT_CLASSIFICATION
// TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.9793327869991122	DESIGN	0.020667213000887825	WITHOUT_CLASSIFICATION
//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.9716316627602438	WITHOUT_CLASSIFICATION	0.02836833723975611	DESIGN
//TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.7565338186479573	WITHOUT_CLASSIFICATION	0.2434661813520426	DESIGN
// todo : YUCK!!!	DESIGN	0.9994792744556734	WITHOUT_CLASSIFICATION	5.207255443265711E-4	DESIGN
// TODO : YUCK!!!  fix after HHH-1907 is complete	DESIGN	0.9414822918320346	DESIGN	0.05851770816796537	WITHOUT_CLASSIFICATION
//TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.8251068981203418	DESIGN	0.17489310187965823	WITHOUT_CLASSIFICATION
//TODO: design new lifecycle for ProxyFactory	DESIGN	0.9504211014338482	WITHOUT_CLASSIFICATION	0.04957889856615189	DESIGN
//TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.8296086654103045	WITHOUT_CLASSIFICATION	0.17039133458969558	DESIGN
// TODO: copy/paste from ManyToOneType	DESIGN	0.6473471569716261	DESIGN	0.35265284302837374	WITHOUT_CLASSIFICATION
//TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9088760557681226	DESIGN	0.09112394423187732	WITHOUT_CLASSIFICATION
//TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.7930883004463577	DESIGN	0.20691169955364228	WITHOUT_CLASSIFICATION
//TODO: implement caching?! proxies?!	DESIGN	0.5767001789331389	WITHOUT_CLASSIFICATION	0.4232998210668611	DESIGN
//TODO: is this right??	DESIGN	0.6143527449270686	WITHOUT_CLASSIFICATION	0.38564725507293146	DESIGN
// is this really necessary?	DESIGN	0.9524038318681831	WITHOUT_CLASSIFICATION	0.047596168131816934	DESIGN
//TODO: move these to a new JoinableType abstract class, //extended by EntityType and PersistentCollectionType:	DESIGN	0.7869033390399395	DESIGN	0.21309666096006044	WITHOUT_CLASSIFICATION
// TODO: this is very suboptimal for some subclasses (namely components), // since it does not take advantage of two-phase-load	DESIGN	0.5465885533820473	WITHOUT_CLASSIFICATION	0.4534114466179527	DESIGN
// worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.537803486446476	WITHOUT_CLASSIFICATION	0.46219651355352404	DESIGN
// NOTE VERY HACKISH WORKAROUND!! // TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.888262973574193	DESIGN	0.11173702642580699	WITHOUT_CLASSIFICATION
// TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.8850226196856	DESIGN	0.11497738031439995	WITHOUT_CLASSIFICATION
// We would probably refactor to have LogicParser (builds a tree of simple // expressions connected by and, or, not), ExpressionParser (translates // from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like // FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much // the same thing it does now)	DESIGN	0.9945700338340195	WITHOUT_CLASSIFICATION	0.00542996616598055	DESIGN
//TODO: this is a little inefficient, don't need to do a whole //      deep replaceElements() call	DESIGN	0.9058627191749075	DESIGN	0.09413728082509264	WITHOUT_CLASSIFICATION
//workaround for WebLogic	DESIGN	0.9975288250378507	WITHOUT_CLASSIFICATION	0.0024711749621493554	DESIGN
//TODO: this dependency is kinda Bad	DESIGN	0.9124306552234722	DESIGN	0.08756934477652786	WITHOUT_CLASSIFICATION
//ick!	DESIGN	0.9986726729315074	WITHOUT_CLASSIFICATION	0.0013273270684926075	DESIGN
// short cut check...	DESIGN	0.9962408809202372	WITHOUT_CLASSIFICATION	0.0037591190797628318	DESIGN
// todo : move to StringHelper?	DESIGN	0.9977887784819955	WITHOUT_CLASSIFICATION	0.002211221518004433	DESIGN
//yukky! Don't you have subclasses for that! //TODO race conditions can happen here	DESIGN	0.7954154484856508	WITHOUT_CLASSIFICATION	0.2045845515143491	DESIGN
//TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.9929638325719993	DESIGN	0.007036167428000728	WITHOUT_CLASSIFICATION
// FIXME hack to work around fact that calling // Node added = root.addChild( fqn ); doesn't  // properly set the version on the node	DESIGN	0.99970671055168	DESIGN	2.9328944831995783E-4	WITHOUT_CLASSIFICATION
// TODO: I considered validating the presence of the TS cache here, // but decided to defer unti getQueryCacheInstance() in case the  // cache is never actually used	DESIGN	0.9747666355547238	DESIGN	0.025233364445276227	WITHOUT_CLASSIFICATION
//need to do that here rather than in the save event listener to let //the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.9162743142088493	DESIGN	0.0837256857911507	WITHOUT_CLASSIFICATION
//TODO: simply remove this override //      if we fix the above todos	DESIGN	0.9497078088052395	DESIGN	0.05029219119476047	WITHOUT_CLASSIFICATION
// This, is used by SessionFactoryImpl to hand to the generated SessionImpl; // was the only reason I could see that we cannot just use null as // Settings.cacheProvider	DESIGN	0.866690059349975	WITHOUT_CLASSIFICATION	0.13330994065002508	DESIGN
// this is done here 'cos we might only know the type here (ugly!) // TODO: improve this a lot:	DESIGN	0.9998300910995022	DESIGN	1.6990890049777737E-4	WITHOUT_CLASSIFICATION
// todo : would love to have this work on a notification basis //    where the successful binding of an entity/subclass would //    emit a notification which the extendsQueue entries could //    react to...	DESIGN	0.9984472503815492	WITHOUT_CLASSIFICATION	0.001552749618450732	DESIGN
// TODO : not sure the best way to handle this. // The non-performant way :	DESIGN	0.814213465943424	DESIGN	0.185786534056576	WITHOUT_CLASSIFICATION
// would be better to use the element-type to determine // whether the old and the new are equal here; the problem being // we do not necessarily have access to the element type in all // cases	DESIGN	0.7292142609521968	WITHOUT_CLASSIFICATION	0.2707857390478031	DESIGN
// This next bit is to allow for both unsaved-value="negative" // and for "older" behavior where version number did not get // seeded if it was already set in the object // TODO: shift it into unsaved-value strategy	DESIGN	0.998836887936205	DESIGN	0.0011631120637951129	WITHOUT_CLASSIFICATION
// merges don't cascade to uninitialized collections //	DESIGN	0.9991008073032559	WITHOUT_CLASSIFICATION	8.991926967441905E-4	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // return collection.getOwner()	DESIGN	0.9748131021152736	WITHOUT_CLASSIFICATION	0.02518689788472642	DESIGN
//it is possible that the tree-walking in OuterJoinLoader can get to //an association defined by a subclass, in which case the property-ref //might refer to a property defined on a subclass of the current class //in this case, the table name is not known - this temporary solution  //assumes that the property-ref refers to a property of the subclass //table that the association belongs to (a reasonable guess) //TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9999793855819478	DESIGN	2.061441805223694E-5	WITHOUT_CLASSIFICATION
// this only works because collection entries are kept in a sequenced // map by persistence context (maybe we should do like entities and // keep a separate sequences set...) //TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.9005171385355994	DESIGN	0.09948286146440045	WITHOUT_CLASSIFICATION
// important, to account for newly saved entities in query // todo : some kind of check for new status...	DESIGN	0.9997408555920763	WITHOUT_CLASSIFICATION	2.591444079236729E-4	DESIGN
// brand new collection //TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.9271209182992761	WITHOUT_CLASSIFICATION	0.0728790817007239	DESIGN
//TODO: if object was an uninitialized proxy, this is inefficient, //      resulting in two SQL selects	DESIGN	0.9546644527732193	WITHOUT_CLASSIFICATION	0.045335547226780785	DESIGN
//before cascade! //TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9088760557681226	DESIGN	0.09112394423187732	WITHOUT_CLASSIFICATION
// TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.6362315528020537	DESIGN	0.36376844719794627	WITHOUT_CLASSIFICATION
// todo : need to find a clean way to handle the "event source" role // a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... // passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.9978017374591749	DESIGN	0.0021982625408250595	WITHOUT_CLASSIFICATION
// todo : remove	DESIGN	0.9982257752299833	WITHOUT_CLASSIFICATION	0.0017742247700166759	DESIGN
//aliasRefNode.resolve( false, false, aliasRefNode.getText() ); //TODO: is it kosher to do it here? //TODO: is it kosher to do it here?	DESIGN	0.675978254711036	WITHOUT_CLASSIFICATION	0.324021745288964	DESIGN
// No explicit select expression; render the id and properties // projection lists for every persister in the from clause into // a single 'token node'. //TODO: the only reason we need this stuff now is collection filters, //      we should get rid of derived select clause completely!	DESIGN	0.9512721659318458	DESIGN	0.04872783406815418	WITHOUT_CLASSIFICATION
// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; //      the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> //          the table info gotten here should really be self-contained (i.e., a class representation //          defining all the needed attributes), then we could then get an array of those	DESIGN	0.9994308432646382	DESIGN	5.691567353617767E-4	WITHOUT_CLASSIFICATION
// TODO: get SQL rendering out of here, create an AST for the join expressions. // Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9939519205937019	WITHOUT_CLASSIFICATION	0.006048079406298105	DESIGN
// TODO : this really needs to be delayed unitl after we definitively know all node types // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DESIGN	0.9603904489728021	DESIGN	0.03960955102719786	WITHOUT_CLASSIFICATION
// TODO: Figure out a better way to get the FROM elements in a proper tree structure. // If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.995637506292241	DESIGN	0.004362493707759018	WITHOUT_CLASSIFICATION
// work around that crazy issue where the tree contains // "empty" FromElements (no text); afaict, this is caused // by FromElementFactory.createCollectionJoin()	DESIGN	0.7239338681127249	WITHOUT_CLASSIFICATION	0.2760661318872752	DESIGN
//TODO: this class does too many things! we need a different //kind of path expression parser for each of the diffferent //ways in which path expressions can occur	DESIGN	0.9799434075404655	DESIGN	0.02005659245953444	WITHOUT_CLASSIFICATION
//real hacky... // used to count the nesting of parentheses	DESIGN	0.9881859420769347	WITHOUT_CLASSIFICATION	0.011814057923065266	DESIGN
// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; // currently not doable though because of the resultset-ref stuff...	DESIGN	0.9851061278452246	WITHOUT_CLASSIFICATION	0.014893872154775504	DESIGN
//for arrays, we should end the collection load before resolving //the entities, since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.683568889793337	WITHOUT_CLASSIFICATION	0.31643111020666304	DESIGN
// polymorphism not really handled completely correctly, // perhaps...well, actually its ok, assuming that the // entity name used in the lookup is the same as the // the one used here, which it will be	DESIGN	0.8007702567847221	WITHOUT_CLASSIFICATION	0.19922974321527778	DESIGN
// TODO: should "record" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9997980889995188	DESIGN	2.01911000481287E-4	WITHOUT_CLASSIFICATION
// VERY IMPORTANT!!!! - This class needs to be free of any static references // to any CGLIB or Javassist classes.  Otherwise, users will always need both // on their classpaths no matter which (if either) they use. // // Another option here would be to remove the Hibernate.isPropertyInitialized() // method and have the users go through the SessionFactory to get this information.	DESIGN	0.9707931698131026	DESIGN	0.02920683018689729	WITHOUT_CLASSIFICATION
// TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).	DESIGN	0.9999999857504636	DESIGN	1.424953632560914E-8	WITHOUT_CLASSIFICATION
//for backward compatibility, allow a set with no not-null  //element columns, using all columns in the row locater SQL //TODO: create an implicit not null constraint on all cols?	DESIGN	0.9920276796142469	WITHOUT_CLASSIFICATION	0.007972320385753151	DESIGN
//SPACES //TODO: i'm not sure, but perhaps we should exclude //      abstract denormalized tables?	DESIGN	0.9877227932155206	DESIGN	0.012277206784479472	WITHOUT_CLASSIFICATION
//workaround, for backward compatibility of sets with no //not-null columns, assume all columns are used in the //row locator SQL	DESIGN	0.9988020293804933	WITHOUT_CLASSIFICATION	0.001197970619506602	DESIGN
//note that this method could easily be moved up to BasicEntityPersister, //if we ever needed to reuse it from other subclasses	DESIGN	0.7030222638557769	DESIGN	0.29697773614422307	WITHOUT_CLASSIFICATION
//index += getPropertyColumnSpan( i ); //TODO:  this is kinda slow...	DESIGN	0.7458563351312107	WITHOUT_CLASSIFICATION	0.2541436648687892	DESIGN
//TODO: need some caching scheme? really comes down to decision  //      regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.9319244965927802	WITHOUT_CLASSIFICATION	0.06807550340721984	DESIGN
// TODO: here is why we need to make bytecode provider global :( // TODO : again, fix this after HHH-1907 is complete	DESIGN	0.999999957834454	DESIGN	4.216554604902505E-8	WITHOUT_CLASSIFICATION
//TODO: Yuck! This is not quite good enough, it's a quick //hack around the problem of having a to-one association //that refers to an embedded component:	DESIGN	0.9998756262371521	DESIGN	1.2437376284788398E-4	WITHOUT_CLASSIFICATION
// for DOM4J "collections" only // TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.8996046629485603	DESIGN	0.10039533705143963	WITHOUT_CLASSIFICATION
// would be great to move all this below here into another method that could also be used // from the new scrolling stuff. // // Would need to change the way the max-row stuff is handled (i.e. behind an interface) so // that I could do the control breaking at the means to know when to stop	DESIGN	0.9999999369431644	DESIGN	6.305683566762591E-8	WITHOUT_CLASSIFICATION
//TODO: can we *always* use the "null property" approach for everything?	DESIGN	0.6212502263208581	WITHOUT_CLASSIFICATION	0.37874977367914203	DESIGN
//polymorphism comment above	DESIGN	0.9999203632236305	WITHOUT_CLASSIFICATION	7.963677636949229E-5	DESIGN
// some messy, complex stuff here, since createCriteria() can take an // aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999924185184752	WITHOUT_CLASSIFICATION	7.5814815248038144E-6	DESIGN
//TODO: really bad, evil hack to fix!!!	DESIGN	0.9999772538239007	DESIGN	2.2746176099321783E-5	WITHOUT_CLASSIFICATION
// ugly hack for cases like "elements(foo.bar.collection)" // (multi-part path expression ending in elements or indices)	DESIGN	0.9927424782309993	DESIGN	0.007257521769000688	WITHOUT_CLASSIFICATION
// try block is a hack around fact that currently tuplizers are not // given the opportunity to resolve a subclass entity name.  this // allows the (we assume custom) interceptor the ability to // influence this decision if we were not able to based on the // given entityName	DESIGN	0.9999846596391021	DESIGN	1.534036089792941E-5	WITHOUT_CLASSIFICATION
/////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around "ghost" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially, look-ahead to the next FromElement that actually // writes something to the SQL	DESIGN	0.9963838967458037	DESIGN	0.003616103254196389	WITHOUT_CLASSIFICATION
//init the table here instead of earlier, so that we can get a quoted table name //TODO: would it be better to simply pass the qualified table name, instead of //      splitting it up into schema/catalog/table names	DESIGN	0.7543135733694871	WITHOUT_CLASSIFICATION	0.24568642663051285	DESIGN
// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method // I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so // if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.9401732618135796	DESIGN	0.059826738186420404	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.5650606733974369	WITHOUT_CLASSIFICATION	0.43493932660256296	DESIGN
//TODO: ideally we need the construction of PropertyAccessor to take the following: //      1) EntityMode //      2) EntityMode-specific data (i.e., the classname for pojo entities) //      3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) // The easiest way, with the introduction of the new runtime-metamodel classes, would be the // the following predicates: //      1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a //          org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property //      2) What is now termed a "PropertyAccessor" stores any values needed from those two //          pieces of information //      3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with //          PropertyAccessor.getSetter()	DESIGN	0.9210758472822962	DESIGN	0.07892415271770388	WITHOUT_CLASSIFICATION
//TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.8833342056828606	DESIGN	0.11666579431713936	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.9841274612444473	WITHOUT_CLASSIFICATION	0.015872538755552838	DESIGN
//TODO: make this a bit nicer	DESIGN	0.8966924546618984	DESIGN	0.10330754533810159	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8909309739103688	WITHOUT_CLASSIFICATION	0.10906902608963115	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8909309739103688	WITHOUT_CLASSIFICATION	0.10906902608963115	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8909309739103688	WITHOUT_CLASSIFICATION	0.10906902608963115	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8909309739103688	WITHOUT_CLASSIFICATION	0.10906902608963115	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8909309739103688	WITHOUT_CLASSIFICATION	0.10906902608963115	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8909309739103688	WITHOUT_CLASSIFICATION	0.10906902608963115	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8909309739103688	WITHOUT_CLASSIFICATION	0.10906902608963115	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8909309739103688	WITHOUT_CLASSIFICATION	0.10906902608963115	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9980726456250287	DESIGN	0.001927354374971291	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9980726456250287	DESIGN	0.001927354374971291	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9980726456250287	DESIGN	0.001927354374971291	WITHOUT_CLASSIFICATION
// TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9977489300924319	DESIGN	0.002251069907568088	WITHOUT_CLASSIFICATION
