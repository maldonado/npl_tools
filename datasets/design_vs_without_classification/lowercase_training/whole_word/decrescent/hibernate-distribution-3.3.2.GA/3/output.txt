test out the optimizer	WITHOUT_CLASSIFICATION	0.9999849126168192	WITHOUT_CLASSIFICATION	1.5087383180720379E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9993668494664871	WITHOUT_CLASSIFICATION	6.331505335129252E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9993668494664871	WITHOUT_CLASSIFICATION	6.331505335129252E-4	DESIGN
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9993610673063507	WITHOUT_CLASSIFICATION	6.389326936493253E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9998085459853474	WITHOUT_CLASSIFICATION	1.9145401465259115E-4	DESIGN
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999713405276239	WITHOUT_CLASSIFICATION	2.8659472376046774E-5	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999763766761568	WITHOUT_CLASSIFICATION	2.3623323843296073E-5	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999763766761568	WITHOUT_CLASSIFICATION	2.3623323843296073E-5	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.999974745680527	WITHOUT_CLASSIFICATION	2.5254319472893007E-5	DESIGN
invokeinterface invoke enabled.getinterceptfieldcallback()	WITHOUT_CLASSIFICATION	0.9997655206019567	WITHOUT_CLASSIFICATION	2.3447939804325537E-4	DESIGN
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999025026805796	WITHOUT_CLASSIFICATION	9.749731942048032E-5	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9981718363317754	WITHOUT_CLASSIFICATION	0.0018281636682246276	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999924577920797	WITHOUT_CLASSIFICATION	7.542207920438271E-6	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999924577920797	WITHOUT_CLASSIFICATION	7.542207920438271E-6	DESIGN
long	WITHOUT_CLASSIFICATION	0.9990539503564148	WITHOUT_CLASSIFICATION	9.460496435853197E-4	DESIGN
just decrement the lock don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.999844756996029	WITHOUT_CLASSIFICATION	1.5524300397092345E-4	DESIGN
decode row selection	WITHOUT_CLASSIFICATION	0.9999067325990968	WITHOUT_CLASSIFICATION	9.326740090314732E-5	DESIGN
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999550155253736	WITHOUT_CLASSIFICATION	4.4984474626318304E-5	DESIGN
again ccs did not have such a concept but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not jta aware.	WITHOUT_CLASSIFICATION	0.9998471054681877	WITHOUT_CLASSIFICATION	1.528945318122907E-4	DESIGN
check	WITHOUT_CLASSIFICATION	0.9972067311054827	WITHOUT_CLASSIFICATION	0.002793268894517324	DESIGN
row id	WITHOUT_CLASSIFICATION	0.9996301691350646	WITHOUT_CLASSIFICATION	3.698308649353399E-4	DESIGN
composite-id	WITHOUT_CLASSIFICATION	0.9998085459853474	WITHOUT_CLASSIFICATION	1.9145401465259115E-4	DESIGN
discriminator	WITHOUT_CLASSIFICATION	0.999808650942001	WITHOUT_CLASSIFICATION	1.9134905799908142E-4	DESIGN
property prop = new property() prop.setname("id") prop.setpropertyaccessorname("embedded") prop.setvalue(id) entity.setidentifierproperty(prop)	WITHOUT_CLASSIFICATION	0.9999849257192892	WITHOUT_CLASSIFICATION	1.5074280710842946E-5	DESIGN
dynamic insert	WITHOUT_CLASSIFICATION	0.9998762097376189	WITHOUT_CLASSIFICATION	1.237902623810868E-4	DESIGN
persister	WITHOUT_CLASSIFICATION	0.9980134926450611	WITHOUT_CLASSIFICATION	0.001986507354938772	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9995553015663783	WITHOUT_CLASSIFICATION	4.446984336216364E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9989222331714319	WITHOUT_CLASSIFICATION	0.0010777668285681663	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9989222331714319	WITHOUT_CLASSIFICATION	0.0010777668285681663	DESIGN
generated properties can never be insertable	WITHOUT_CLASSIFICATION	0.9968591116013766	WITHOUT_CLASSIFICATION	0.0031408883986233874	DESIGN
table	WITHOUT_CLASSIFICATION	0.9997871604819755	WITHOUT_CLASSIFICATION	2.1283951802448652E-4	DESIGN
by default natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999192920198796	WITHOUT_CLASSIFICATION	8.070798012048367E-5	DESIGN
( (column) ( (simplevalue) ic.getindex() ).getcolumniterator().next() ).setnullable(false)	WITHOUT_CLASSIFICATION	0.999857639291681	WITHOUT_CLASSIFICATION	1.4236070831905034E-4	DESIGN
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9675734423863854	WITHOUT_CLASSIFICATION	0.032426557613614564	DESIGN
build a resultsetmappingdefinition given a containing element for the "return-xxx" elements @param resultsetelem the element containing the return definitions. @param path no clue @param mappings the current processing state. @return the description of the mappings	WITHOUT_CLASSIFICATION	0.9998128054454314	WITHOUT_CLASSIFICATION	1.8719455456850934E-4	DESIGN
private boolean showsql private boolean formatsql	WITHOUT_CLASSIFICATION	0.9982826599716146	WITHOUT_CLASSIFICATION	0.0017173400283853743	DESIGN
public boolean isshowsqlenabled() { return showsql } public boolean isformatsqlenabled() { return formatsql }	WITHOUT_CLASSIFICATION	0.9997868020504084	WITHOUT_CLASSIFICATION	2.1319794959170254E-4	DESIGN
set a custom entity resolver. this entity resolver must be set before addxxx(misc) call. default value is {@link org.hibernate.util.dtdentityresolver} @param entityresolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9896631691941937	WITHOUT_CLASSIFICATION	0.01033683080580628	DESIGN
final list extendsqueue	WITHOUT_CLASSIFICATION	0.9998718923499097	WITHOUT_CLASSIFICATION	1.281076500902166E-4	DESIGN
if close() is called guarantee unbind()	WITHOUT_CLASSIFICATION	0.9998126299236024	WITHOUT_CLASSIFICATION	1.8737007639764352E-4	DESIGN
if a threadlocalsessioncontext-bound session happens to get serialized to be completely correct we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.982857106222498	WITHOUT_CLASSIFICATION	0.01714289377750192	DESIGN
on the inverse it makes sense that if a threadlocalsessioncontext- bound session then gets deserialized to go ahead and re-bind it to the threadlocalsessioncontext session map.	WITHOUT_CLASSIFICATION	0.9990931443898401	WITHOUT_CLASSIFICATION	9.068556101600114E-4	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998165568388883	WITHOUT_CLASSIFICATION	1.8344316111179715E-4	DESIGN
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999125029587852	WITHOUT_CLASSIFICATION	8.749704121488577E-5	DESIGN
optimisticcache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999080379689105	WITHOUT_CLASSIFICATION	9.196203108948667E-5	DESIGN
cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999114216163175	WITHOUT_CLASSIFICATION	8.85783836824643E-5	DESIGN
option.setdataversion( nonlockingdataversion.instance )	WITHOUT_CLASSIFICATION	0.9991451090639453	WITHOUT_CLASSIFICATION	8.548909360547195E-4	DESIGN
do the put outside the scope of the jta txn	WITHOUT_CLASSIFICATION	0.9998545996230527	WITHOUT_CLASSIFICATION	1.4540037694738453E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (npes)	WITHOUT_CLASSIFICATION	0.9873979121150047	WITHOUT_CLASSIFICATION	0.012602087884995256	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9993631823501373	WITHOUT_CLASSIFICATION	6.368176498625603E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9993631823501373	WITHOUT_CLASSIFICATION	6.368176498625603E-4	DESIGN
do the failfast put outside the scope of the jta txn	WITHOUT_CLASSIFICATION	0.9998545996230527	WITHOUT_CLASSIFICATION	1.4540037694738453E-4	DESIGN
note evict() operates locally only (i.e. does not propogate to any other nodes in the potential cluster). this is exactly what is needed when we destroy() here destroy() is used as part of the process of shutting down a sessionfactory thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9953039269886627	DESIGN	0.004696073011337378	WITHOUT_CLASSIFICATION
protected regionrootlistener listener	WITHOUT_CLASSIFICATION	0.9987900204240013	WITHOUT_CLASSIFICATION	0.0012099795759986556	DESIGN
establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9988086917897311	WITHOUT_CLASSIFICATION	0.0011913082102688723	DESIGN
if we've been blocking for the mutex perhaps another thread has already reestablished the root. in case the node was reestablised via replication confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.991394977542394	WITHOUT_CLASSIFICATION	0.00860502245760602	DESIGN
for pessimistic locking we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999195259443443	WITHOUT_CLASSIFICATION	8.047405565574359E-5	DESIGN
the rest only matters for optimistic locking where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9951384078561655	WITHOUT_CLASSIFICATION	0.004861592143834595	DESIGN
don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9890170110729134	WITHOUT_CLASSIFICATION	0.010982988927086604	DESIGN
make sure the root node for the region exists and has a dataversion that never complains	WITHOUT_CLASSIFICATION	0.9998292683076702	WITHOUT_CLASSIFICATION	1.7073169232982265E-4	DESIGN
never evict this node	WITHOUT_CLASSIFICATION	0.9990561513277004	WITHOUT_CLASSIFICATION	9.438486722996836E-4	DESIGN
fix up the resident flag	WITHOUT_CLASSIFICATION	0.9728697666283725	WITHOUT_CLASSIFICATION	0.027130233371627517	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9993631823501373	WITHOUT_CLASSIFICATION	6.368176498625603E-4	DESIGN
we ignore minimalputoverride. jbosscache putforexternalread is already about as minimal as we can get it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999171598376396	WITHOUT_CLASSIFICATION	8.284016236029773E-5	DESIGN
no-op. we don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9995722095831648	WITHOUT_CLASSIFICATION	4.2779041683506597E-4	DESIGN
this should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.999102786636608	WITHOUT_CLASSIFICATION	8.972133633919283E-4	DESIGN
we only build caches if none were passed in. passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9897030216936694	WITHOUT_CLASSIFICATION	0.010296978306330593	DESIGN
set up the cache factory	WITHOUT_CLASSIFICATION	0.9988362113008176	WITHOUT_CLASSIFICATION	0.001163788699182508	DESIGN
see if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999557482938595	WITHOUT_CLASSIFICATION	4.425170614048327E-5	DESIGN
default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999741854972403	WITHOUT_CLASSIFICATION	2.5814502759666503E-5	DESIGN
default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.999985069114425	WITHOUT_CLASSIFICATION	1.4930885575011527E-5	DESIGN
for timestamps we default to a separate config	WITHOUT_CLASSIFICATION	0.9993022014230067	WITHOUT_CLASSIFICATION	6.977985769932609E-4	DESIGN
we can't change the tm on a running cache just check if the cache has no tm and we're ok with that	WITHOUT_CLASSIFICATION	0.9945355326481676	WITHOUT_CLASSIFICATION	0.005464467351832425	DESIGN
configure the cache to use our tm	WITHOUT_CLASSIFICATION	0.999506344443149	WITHOUT_CLASSIFICATION	4.936555568509534E-4	DESIGN
make sure jbc doesn't look one up	WITHOUT_CLASSIFICATION	0.9999116451599859	WITHOUT_CLASSIFICATION	8.835484001404324E-5	DESIGN
this method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.996775897124727	WITHOUT_CLASSIFICATION	0.0032241028752730046	DESIGN
make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9982715330572188	WITHOUT_CLASSIFICATION	0.0017284669427812007	DESIGN
we use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9987871420304242	WITHOUT_CLASSIFICATION	0.0012128579695757742	DESIGN
following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.999242409013363	WITHOUT_CLASSIFICATION	7.575909866369321E-4	DESIGN
if jbc is using invalidation we don't want to propagate changes. we use the timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9997651427255583	WITHOUT_CLASSIFICATION	2.348572744417864E-4	DESIGN
we don't want to waste effort setting an option if jbc is already in local mode. if jbc is repl_(a)sync then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9969916531107813	WITHOUT_CLASSIFICATION	0.003008346889218655	DESIGN
don't hold the jbc node lock throughout the tx as that prevents updates add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999994469751851	WITHOUT_CLASSIFICATION	5.530248148469224E-7	DESIGN
double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999905764750905	WITHOUT_CLASSIFICATION	9.423524909541022E-6	DESIGN
get an exclusive right to update jbc for this key from this node.	WITHOUT_CLASSIFICATION	0.9998565442216557	WITHOUT_CLASSIFICATION	1.4345577834432786E-4	DESIGN
we ensure async semantics (jbcache-1175)	WITHOUT_CLASSIFICATION	0.9991328128399326	WITHOUT_CLASSIFICATION	8.671871600673972E-4	DESIGN
initial load from jbc	WITHOUT_CLASSIFICATION	0.9998195975220203	WITHOUT_CLASSIFICATION	1.804024779795531E-4	DESIGN
see if we had a 2nd invalidation from the same initial preinvalidation timestamp. if so only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.999997957482295	WITHOUT_CLASSIFICATION	2.0425177050233113E-6	DESIGN
we ensure async semantics (jbcache-1175)	WITHOUT_CLASSIFICATION	0.9991328128399326	WITHOUT_CLASSIFICATION	8.671871600673972E-4	DESIGN
if the workspace node has null as well ok if not we've been modified in a non-comparable manner which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999779444835898	WITHOUT_CLASSIFICATION	2.2055516410264E-5	DESIGN
the standard comparator types are not serializable but are singletons	WITHOUT_CLASSIFICATION	0.9975420094254587	WITHOUT_CLASSIFICATION	0.00245799057454132	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9995863648122943	WITHOUT_CLASSIFICATION	4.136351877056238E-4	DESIGN
construct the cache	WITHOUT_CLASSIFICATION	0.9998968118494311	WITHOUT_CLASSIFICATION	1.0318815056883448E-4	DESIGN
local cache so we use synchronization	WITHOUT_CLASSIFICATION	0.9993099099196018	WITHOUT_CLASSIFICATION	6.900900803981631E-4	DESIGN
local cache so we use synchronization	WITHOUT_CLASSIFICATION	0.9993099099196018	WITHOUT_CLASSIFICATION	6.900900803981631E-4	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9998285205310983	WITHOUT_CLASSIFICATION	1.714794689018097E-4	DESIGN
swaldman 2006-08-28 define c3p0-style configuration parameters for initialpoolsize which hibernate sensibly lets default to minpoolsize but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999961991743825	WITHOUT_CLASSIFICATION	3.8008256173415213E-6	DESIGN
datasource unpooled = datasources.unpooleddatasource(jdbcurl props.getproperty(environment.user) props.getproperty(environment.pass))	WITHOUT_CLASSIFICATION	0.9999519277438449	WITHOUT_CLASSIFICATION	4.807225615502439E-5	DESIGN
true if the pool is borrowed from the outside false if we used to create it	WITHOUT_CLASSIFICATION	0.9798711857534573	WITHOUT_CLASSIFICATION	0.02012881424654266	DESIGN
get a connection from the pool (thru drivermanager cfr. proxool doc)	WITHOUT_CLASSIFICATION	0.9994400963697015	WITHOUT_CLASSIFICATION	5.599036302985112E-4	DESIGN
set the transaction isolation if defined	WITHOUT_CLASSIFICATION	0.9999488049236872	WITHOUT_CLASSIFICATION	5.1195076312910107E-5	DESIGN
toggle autocommit to false if set	WITHOUT_CLASSIFICATION	0.9997796678949654	WITHOUT_CLASSIFICATION	2.2033210503473542E-4	DESIGN
return the connection	WITHOUT_CLASSIFICATION	0.9998327838402945	WITHOUT_CLASSIFICATION	1.6721615970557107E-4	DESIGN
get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999634246362824	WITHOUT_CLASSIFICATION	3.6575363717636014E-5	DESIGN
default the proxool alias setting	WITHOUT_CLASSIFICATION	0.9999661837690578	WITHOUT_CLASSIFICATION	3.381623094227839E-5	DESIGN
validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9998914985710744	WITHOUT_CLASSIFICATION	1.0850142892560403E-4	DESIGN
validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9998914985710744	WITHOUT_CLASSIFICATION	1.0850142892560403E-4	DESIGN
append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998444679711227	WITHOUT_CLASSIFICATION	1.5553202887724483E-4	DESIGN
set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9998749209006124	WITHOUT_CLASSIFICATION	1.250790993877292E-4	DESIGN
configured using the jaxp configurator	WITHOUT_CLASSIFICATION	0.9998490201259264	WITHOUT_CLASSIFICATION	1.5097987407366014E-4	DESIGN
validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9998914985710744	WITHOUT_CLASSIFICATION	1.0850142892560403E-4	DESIGN
append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998444679711227	WITHOUT_CLASSIFICATION	1.5553202887724483E-4	DESIGN
append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998444679711227	WITHOUT_CLASSIFICATION	1.5553202887724483E-4	DESIGN
configured using the properties file configurator	WITHOUT_CLASSIFICATION	0.9999206557308843	WITHOUT_CLASSIFICATION	7.934426911569947E-5	DESIGN
remember isolation level	WITHOUT_CLASSIFICATION	0.9519374537914054	WITHOUT_CLASSIFICATION	0.04806254620859462	DESIGN
if the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999998078446448	WITHOUT_CLASSIFICATION	1.9215535510560707E-7	DESIGN
we have created the pool ourselves so shut it down	WITHOUT_CLASSIFICATION	0.9999902972306316	WITHOUT_CLASSIFICATION	9.702769368376868E-6	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9932875609276655	WITHOUT_CLASSIFICATION	0.0067124390723345955	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9932875609276655	WITHOUT_CLASSIFICATION	0.0067124390723345955	DESIGN
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9995156492935824	WITHOUT_CLASSIFICATION	4.8435070641763336E-4	DESIGN
public currency getcurrency(int col) throws hibernateexception	WITHOUT_CLASSIFICATION	0.9998720437228736	WITHOUT_CLASSIFICATION	1.2795627712632106E-4	DESIGN
default is pojo	WITHOUT_CLASSIFICATION	0.9999187860943176	WITHOUT_CLASSIFICATION	8.121390568233346E-5	DESIGN
use setparameter for null values	WITHOUT_CLASSIFICATION	0.9996769866264735	WITHOUT_CLASSIFICATION	3.2301337352649997E-4	DESIGN
use setparameter for null values	WITHOUT_CLASSIFICATION	0.9996769866264735	WITHOUT_CLASSIFICATION	3.2301337352649997E-4	DESIGN
private cacheentry cacheentry	WITHOUT_CLASSIFICATION	0.9956042886883089	WITHOUT_CLASSIFICATION	0.004395711311691165	DESIGN
don't need to lock the cache here since if someone else inserted the same pk first the insert would fail	WITHOUT_CLASSIFICATION	0.999712132818247	WITHOUT_CLASSIFICATION	2.878671817530603E-4	DESIGN
make 100% certain that this is called before any subsequent scheduledupdate.aftertransactioncompletion()!!	WITHOUT_CLASSIFICATION	0.9962067810428192	WITHOUT_CLASSIFICATION	0.003793218957180757	DESIGN
get the updated snapshot of the entity state by cloning current state it is safe to copy in place since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999977855995922	WITHOUT_CLASSIFICATION	2.214400407794476E-6	DESIGN
this entity defines proeprty generation so process those generated values	WITHOUT_CLASSIFICATION	0.9998689961176191	WITHOUT_CLASSIFICATION	1.3100388238087928E-4	DESIGN
have the entity entry perform post-update processing passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9998764938466059	WITHOUT_CLASSIFICATION	1.2350615339413507E-4	DESIGN
!persister.iscacheinvalidationrequired()	WITHOUT_CLASSIFICATION	0.9995795657065736	WITHOUT_CLASSIFICATION	4.204342934264473E-4	DESIGN
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9994350804595316	WITHOUT_CLASSIFICATION	5.649195404684859E-4	DESIGN
sort first by role name	WITHOUT_CLASSIFICATION	0.9998941813720732	WITHOUT_CLASSIFICATION	1.0581862792687376E-4	DESIGN
make 100% certain that this is called before any subsequent scheduledupdate.aftertransactioncompletion()!!	WITHOUT_CLASSIFICATION	0.9962067810428192	WITHOUT_CLASSIFICATION	0.003793218957180757	DESIGN
then by fk	WITHOUT_CLASSIFICATION	0.9997894532497996	WITHOUT_CLASSIFICATION	2.105467502003703E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9998491722214495	WITHOUT_CLASSIFICATION	1.5082777855044213E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9998491722214495	WITHOUT_CLASSIFICATION	1.5082777855044213E-4	DESIGN
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.8455056230588117	WITHOUT_CLASSIFICATION	0.1544943769411883	DESIGN
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9978728493178999	WITHOUT_CLASSIFICATION	0.002127150682100094	DESIGN
boolean put = persister.getcache().insert(ck cacheentry)	WITHOUT_CLASSIFICATION	0.9999689388790097	WITHOUT_CLASSIFICATION	3.1061120990372194E-5	DESIGN
we need to grab the version value from the entity otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9978705110189154	WITHOUT_CLASSIFICATION	0.002129488981084521	DESIGN
do nothing - we only need to notify the cache	WITHOUT_CLASSIFICATION	0.9967206798715379	WITHOUT_CLASSIFICATION	0.003279320128462032	DESIGN
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999641614979703	WITHOUT_CLASSIFICATION	3.5838502029665016E-5	DESIGN
then by id	WITHOUT_CLASSIFICATION	0.9997451231431971	WITHOUT_CLASSIFICATION	2.5487685680292604E-4	DESIGN
to be safe	WITHOUT_CLASSIFICATION	0.9989701737695006	WITHOUT_CLASSIFICATION	0.0010298262304994402	DESIGN
no transformations took place so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.999354138268661	WITHOUT_CLASSIFICATION	6.458617313389135E-4	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999230052279247	WITHOUT_CLASSIFICATION	7.699477207539223E-5	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999230052279247	WITHOUT_CLASSIFICATION	7.699477207539223E-5	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.999777365586636	WITHOUT_CLASSIFICATION	2.226344133639222E-4	DESIGN
test out the optimizer	WITHOUT_CLASSIFICATION	0.9999849126168192	WITHOUT_CLASSIFICATION	1.5087383180720379E-5	DESIGN
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9997935911835174	WITHOUT_CLASSIFICATION	2.0640881648268622E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
invokespecial	WITHOUT_CLASSIFICATION	0.9998085459853474	WITHOUT_CLASSIFICATION	1.9145401465259115E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9993668494664871	WITHOUT_CLASSIFICATION	6.331505335129252E-4	DESIGN
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9998904212982617	WITHOUT_CLASSIFICATION	1.0957870173825064E-4	DESIGN
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9998544873853947	WITHOUT_CLASSIFICATION	1.4551261460536818E-4	DESIGN
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999468614462869	WITHOUT_CLASSIFICATION	5.3138553713110334E-5	DESIGN
aload_2 args	WITHOUT_CLASSIFICATION	0.9995571559041556	WITHOUT_CLASSIFICATION	4.4284409584445256E-4	DESIGN
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9998985780359961	WITHOUT_CLASSIFICATION	1.0142196400390623E-4	DESIGN
new	WITHOUT_CLASSIFICATION	0.9995356561444769	WITHOUT_CLASSIFICATION	4.643438555231258E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9993794111123314	WITHOUT_CLASSIFICATION	6.205888876686473E-4	DESIGN
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999378578526783	WITHOUT_CLASSIFICATION	6.214214732174092E-5	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9998085459853474	WITHOUT_CLASSIFICATION	1.9145401465259115E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9998085459853474	WITHOUT_CLASSIFICATION	1.9145401465259115E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9998085459853474	WITHOUT_CLASSIFICATION	1.9145401465259115E-4	DESIGN
aastore args	WITHOUT_CLASSIFICATION	0.9995571559041556	WITHOUT_CLASSIFICATION	4.4284409584445256E-4	DESIGN
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9968662328595624	WITHOUT_CLASSIFICATION	0.0031337671404375357	DESIGN
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9996190822624214	WITHOUT_CLASSIFICATION	3.8091773757869006E-4	DESIGN
istore_3 store i	WITHOUT_CLASSIFICATION	0.999876158846189	WITHOUT_CLASSIFICATION	1.2384115381098632E-4	DESIGN
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.999867535558894	WITHOUT_CLASSIFICATION	1.324644411060885E-4	DESIGN
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9991554526702608	WITHOUT_CLASSIFICATION	8.445473297391945E-4	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999763766761568	WITHOUT_CLASSIFICATION	2.3623323843296073E-5	DESIGN
start region to handling exception (bulkaccessorexception)	WITHOUT_CLASSIFICATION	0.9970682278125402	WITHOUT_CLASSIFICATION	0.002931772187459707	DESIGN
iinc 3 1	WITHOUT_CLASSIFICATION	0.9989901664670587	WITHOUT_CLASSIFICATION	0.0010098335329413238	DESIGN
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999408988537573	WITHOUT_CLASSIFICATION	5.910114624279433E-5	DESIGN
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9996934638152125	WITHOUT_CLASSIFICATION	3.065361847875371E-4	DESIGN
iconst_i	WITHOUT_CLASSIFICATION	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
aaload	WITHOUT_CLASSIFICATION	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9992894635717203	WITHOUT_CLASSIFICATION	7.105364282796235E-4	DESIGN
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999182589899602	WITHOUT_CLASSIFICATION	8.174101003974531E-5	DESIGN
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9992947634649986	WITHOUT_CLASSIFICATION	7.052365350014054E-4	DESIGN
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999721575383684	WITHOUT_CLASSIFICATION	2.7842461631618493E-5	DESIGN
end region to handling exception (bulkaccessorexception)	WITHOUT_CLASSIFICATION	0.9938623576883281	WITHOUT_CLASSIFICATION	0.00613764231167189	DESIGN
register in exception table	WITHOUT_CLASSIFICATION	0.9995363597919584	WITHOUT_CLASSIFICATION	4.636402080414693E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9993668494664871	WITHOUT_CLASSIFICATION	6.331505335129252E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9993668494664871	WITHOUT_CLASSIFICATION	6.331505335129252E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9993794111123314	WITHOUT_CLASSIFICATION	6.205888876686473E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9998085459853474	WITHOUT_CLASSIFICATION	1.9145401465259115E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9992894635717203	WITHOUT_CLASSIFICATION	7.105364282796235E-4	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.999974745680527	WITHOUT_CLASSIFICATION	2.5254319472893007E-5	DESIGN
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999119046542281	WITHOUT_CLASSIFICATION	8.809534577181773E-5	DESIGN
new bulkaccessorexception	WITHOUT_CLASSIFICATION	0.9997288520060464	WITHOUT_CLASSIFICATION	2.7114799395348523E-4	DESIGN
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9998183425305884	WITHOUT_CLASSIFICATION	1.8165746941143152E-4	DESIGN
iload_3 i	WITHOUT_CLASSIFICATION	0.9983451562438233	WITHOUT_CLASSIFICATION	0.0016548437561767337	DESIGN
invokespecial bulkaccessorexception.<init>	WITHOUT_CLASSIFICATION	0.9995795657065736	WITHOUT_CLASSIFICATION	4.204342934264473E-4	DESIGN
athrow	WITHOUT_CLASSIFICATION	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
warning classfile only	WITHOUT_CLASSIFICATION	0.9999798562381709	WITHOUT_CLASSIFICATION	2.014376182908907E-5	DESIGN
swallow	WITHOUT_CLASSIFICATION	0.9993049147492249	WITHOUT_CLASSIFICATION	6.950852507751177E-4	DESIGN
local variable | this |	WITHOUT_CLASSIFICATION	0.9992003181524586	WITHOUT_CLASSIFICATION	7.996818475414289E-4	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9994833012606473	WITHOUT_CLASSIFICATION	5.166987393526727E-4	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9994833012606473	WITHOUT_CLASSIFICATION	5.166987393526727E-4	DESIGN
getfield get field "$javassist_callback" defined already	WITHOUT_CLASSIFICATION	0.9993034537926253	WITHOUT_CLASSIFICATION	6.965462073747601E-4	DESIGN
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9998670409513571	WITHOUT_CLASSIFICATION	1.3295904864285815E-4	DESIGN
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9968220308882502	WITHOUT_CLASSIFICATION	0.003177969111749782	DESIGN
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9997310545653726	WITHOUT_CLASSIFICATION	2.689454346274692E-4	DESIGN
putfield put field "$javassist_callback" defined already	WITHOUT_CLASSIFICATION	0.9994310693619716	WITHOUT_CLASSIFICATION	5.689306380283138E-4	DESIGN
case of non-static field	WITHOUT_CLASSIFICATION	0.9982811055031122	WITHOUT_CLASSIFICATION	0.001718894496887716	DESIGN
getfield get each field	WITHOUT_CLASSIFICATION	0.9997088421897099	WITHOUT_CLASSIFICATION	2.911578102901774E-4	DESIGN
invokeinterface invoke enabled.getinterceptfieldcallback()	WITHOUT_CLASSIFICATION	0.9997655206019567	WITHOUT_CLASSIFICATION	2.3447939804325537E-4	DESIGN
ifnonnull	WITHOUT_CLASSIFICATION	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9996618891646462	WITHOUT_CLASSIFICATION	3.381108353538952E-4	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9996618891646462	WITHOUT_CLASSIFICATION	3.381108353538952E-4	DESIGN
store_1 each type	WITHOUT_CLASSIFICATION	0.9996203252080424	WITHOUT_CLASSIFICATION	3.7967479195762663E-4	DESIGN
ldc name of the field	WITHOUT_CLASSIFICATION	0.9997329815267492	WITHOUT_CLASSIFICATION	2.6701847325087143E-4	DESIGN
load_1 each type	WITHOUT_CLASSIFICATION	0.9996203252080424	WITHOUT_CLASSIFICATION	3.7967479195762663E-4	DESIGN
invokeinterface invoke callback.read() each type	WITHOUT_CLASSIFICATION	0.9995350207172067	WITHOUT_CLASSIFICATION	4.649792827933446E-4	DESIGN
int	WITHOUT_CLASSIFICATION	0.9995048967570798	WITHOUT_CLASSIFICATION	4.951032429202354E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9993668494664871	WITHOUT_CLASSIFICATION	6.331505335129252E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9993794111123314	WITHOUT_CLASSIFICATION	6.205888876686473E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9998085459853474	WITHOUT_CLASSIFICATION	1.9145401465259115E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9992894635717203	WITHOUT_CLASSIFICATION	7.105364282796235E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9992894635717203	WITHOUT_CLASSIFICATION	7.105364282796235E-4	DESIGN
invokeinterface enabled.getinterceptfieldcallback()	WITHOUT_CLASSIFICATION	0.9995795657065736	WITHOUT_CLASSIFICATION	4.204342934264473E-4	DESIGN
invokeinterface enabled.getinterceptfieldcallback()	WITHOUT_CLASSIFICATION	0.9995795657065736	WITHOUT_CLASSIFICATION	4.204342934264473E-4	DESIGN
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9998085459853474	WITHOUT_CLASSIFICATION	1.9145401465259115E-4	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
putfield	WITHOUT_CLASSIFICATION	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9993668494664871	WITHOUT_CLASSIFICATION	6.331505335129252E-4	DESIGN
ldc field name	WITHOUT_CLASSIFICATION	0.9996690665367874	WITHOUT_CLASSIFICATION	3.309334632126535E-4	DESIGN
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999661690961764	WITHOUT_CLASSIFICATION	3.383090382358614E-5	DESIGN
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9995795657065736	WITHOUT_CLASSIFICATION	4.204342934264473E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9981718363317754	WITHOUT_CLASSIFICATION	0.0018281636682246276	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9981718363317754	WITHOUT_CLASSIFICATION	0.0018281636682246276	DESIGN
not array	WITHOUT_CLASSIFICATION	0.998191788023605	WITHOUT_CLASSIFICATION	0.0018082119763950454	DESIGN
array of reference type	WITHOUT_CLASSIFICATION	0.9987459595585837	WITHOUT_CLASSIFICATION	0.0012540404414163387	DESIGN
boolean	WITHOUT_CLASSIFICATION	0.9996710489606346	WITHOUT_CLASSIFICATION	3.2895103936533956E-4	DESIGN
byte	WITHOUT_CLASSIFICATION	0.9994297969385845	WITHOUT_CLASSIFICATION	5.702030614155287E-4	DESIGN
char	WITHOUT_CLASSIFICATION	0.9995410284958401	WITHOUT_CLASSIFICATION	4.5897150415990455E-4	DESIGN
short	WITHOUT_CLASSIFICATION	0.9984503390313612	WITHOUT_CLASSIFICATION	0.0015496609686387593	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999924577920797	WITHOUT_CLASSIFICATION	7.542207920438271E-6	DESIGN
float	WITHOUT_CLASSIFICATION	0.9993460518076173	WITHOUT_CLASSIFICATION	6.53948192382672E-4	DESIGN
float	WITHOUT_CLASSIFICATION	0.9993460518076173	WITHOUT_CLASSIFICATION	6.53948192382672E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9990539503564148	WITHOUT_CLASSIFICATION	9.460496435853197E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9990539503564148	WITHOUT_CLASSIFICATION	9.460496435853197E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9960442581689654	WITHOUT_CLASSIFICATION	0.003955741831034667	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9960442581689654	WITHOUT_CLASSIFICATION	0.003955741831034667	DESIGN
boolean byte char int short	WITHOUT_CLASSIFICATION	0.9998490046191092	WITHOUT_CLASSIFICATION	1.5099538089072257E-4	DESIGN
boolean byte char int short	WITHOUT_CLASSIFICATION	0.9998490046191092	WITHOUT_CLASSIFICATION	1.5099538089072257E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9981718363317754	WITHOUT_CLASSIFICATION	0.0018281636682246276	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999924577920797	WITHOUT_CLASSIFICATION	7.542207920438271E-6	DESIGN
float	WITHOUT_CLASSIFICATION	0.9993460518076173	WITHOUT_CLASSIFICATION	6.53948192382672E-4	DESIGN
float	WITHOUT_CLASSIFICATION	0.9993460518076173	WITHOUT_CLASSIFICATION	6.53948192382672E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9990539503564148	WITHOUT_CLASSIFICATION	9.460496435853197E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9960442581689654	WITHOUT_CLASSIFICATION	0.003955741831034667	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9960442581689654	WITHOUT_CLASSIFICATION	0.003955741831034667	DESIGN
boolean byte char int short	WITHOUT_CLASSIFICATION	0.9998490046191092	WITHOUT_CLASSIFICATION	1.5099538089072257E-4	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9994391919367656	WITHOUT_CLASSIFICATION	5.608080632344678E-4	DESIGN
mainly for oscache	WITHOUT_CLASSIFICATION	0.9998371992866831	WITHOUT_CLASSIFICATION	1.628007133168282E-4	DESIGN
decrement the lock	WITHOUT_CLASSIFICATION	0.999909971219852	WITHOUT_CLASSIFICATION	9.002878014794649E-5	DESIGN
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.999923791869865	WITHOUT_CLASSIFICATION	7.620813013506504E-5	DESIGN
recache the updated state	WITHOUT_CLASSIFICATION	0.999953947041865	WITHOUT_CLASSIFICATION	4.605295813510369E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9995572377752248	WITHOUT_CLASSIFICATION	4.427622247751266E-4	DESIGN
null clientlock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.999987602650424	WITHOUT_CLASSIFICATION	1.2397349576064061E-5	DESIGN
we really could refresh the item if it is not a lock but it might be slower return freshtimestamp < txtimestamp	WITHOUT_CLASSIFICATION	0.994430771902692	WITHOUT_CLASSIFICATION	0.005569228097308022	DESIGN
by requiring < we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9998122765622908	WITHOUT_CLASSIFICATION	1.8772343770922368E-4	DESIGN
the user provided resulttransformer not the one used with "select new". here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9884434055227781	WITHOUT_CLASSIFICATION	0.011556594477221844	DESIGN
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999319454175983	WITHOUT_CLASSIFICATION	6.805458240173849E-5	DESIGN
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999366931202992	WITHOUT_CLASSIFICATION	6.330687970083362E-5	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9998285205310983	WITHOUT_CLASSIFICATION	1.714794689018097E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9995572377752248	WITHOUT_CLASSIFICATION	4.427622247751266E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9995572377752248	WITHOUT_CLASSIFICATION	4.427622247751266E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9995572377752248	WITHOUT_CLASSIFICATION	4.427622247751266E-4	DESIGN
this is called from settingsfactory irregardless trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9937854126603135	WITHOUT_CLASSIFICATION	0.006214587339686483	DESIGN
do nothing subclasses may override.	WITHOUT_CLASSIFICATION	0.9988662352398323	WITHOUT_CLASSIFICATION	0.0011337647601676628	DESIGN
do nothing subclasses may override.	WITHOUT_CLASSIFICATION	0.9988662352398323	WITHOUT_CLASSIFICATION	0.0011337647601676628	DESIGN
throw new unsupportedoperationexception("can't write to a readonly object")	WITHOUT_CLASSIFICATION	0.9982587719481463	WITHOUT_CLASSIFICATION	0.0017412280518536655	DESIGN
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999749301281352	WITHOUT_CLASSIFICATION	2.5069871864812117E-5	DESIGN
persister.setidentifier(result id) before calling interceptor for consistency with normal load	WITHOUT_CLASSIFICATION	0.9998275317050875	WITHOUT_CLASSIFICATION	1.724682949125156E-4	DESIGN
no-op ccs did not have such a concept	WITHOUT_CLASSIFICATION	0.9995579809802505	WITHOUT_CLASSIFICATION	4.420190197495314E-4	DESIGN
no-op ccs did not have such a concept	WITHOUT_CLASSIFICATION	0.9995579809802505	WITHOUT_CLASSIFICATION	4.420190197495314E-4	DESIGN
again ccs did not have such a concept but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not jta aware.	WITHOUT_CLASSIFICATION	0.9998471054681877	WITHOUT_CLASSIFICATION	1.528945318122907E-4	DESIGN
again ccs did not have such a concept however a reasonable proximity is to clear the cache. for non-transaction aware caches we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9997409645557174	WITHOUT_CLASSIFICATION	2.5903544428268867E-4	DESIGN
again ccs did not have such a concept however a reasonable proximity is to clear the cache. for non-transaction aware caches we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9997409645557174	WITHOUT_CLASSIFICATION	2.5903544428268867E-4	DESIGN
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9963491005582156	WITHOUT_CLASSIFICATION	0.003650899441784464	DESIGN
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9995496933110437	WITHOUT_CLASSIFICATION	4.50306688956313E-4	DESIGN
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9995553015663783	WITHOUT_CLASSIFICATION	4.446984336216364E-4	DESIGN
db-objectname	WITHOUT_CLASSIFICATION	0.9998085459853474	WITHOUT_CLASSIFICATION	1.9145401465259115E-4	DESIGN
mutable	WITHOUT_CLASSIFICATION	0.9995618930755782	WITHOUT_CLASSIFICATION	4.38106924421817E-4	DESIGN
where	WITHOUT_CLASSIFICATION	0.9997171252859158	WITHOUT_CLASSIFICATION	2.8287471408414974E-4	DESIGN
check	WITHOUT_CLASSIFICATION	0.9972067311054827	WITHOUT_CLASSIFICATION	0.002793268894517324	DESIGN
polymorphism	WITHOUT_CLASSIFICATION	0.9998085459853474	WITHOUT_CLASSIFICATION	1.9145401465259115E-4	DESIGN
todo	WITHOUT_CLASSIFICATION	0.627967009601584	DESIGN	0.37203299039841603	WITHOUT_CLASSIFICATION
id	WITHOUT_CLASSIFICATION	0.9991394423074907	WITHOUT_CLASSIFICATION	8.605576925092761E-4	DESIGN
version / timestamp	WITHOUT_CLASSIFICATION	0.9999607337277497	WITHOUT_CLASSIFICATION	3.9266272250258016E-5	DESIGN
discriminator	WITHOUT_CLASSIFICATION	0.999808650942001	WITHOUT_CLASSIFICATION	1.9134905799908142E-4	DESIGN
primary key constraint	WITHOUT_CLASSIFICATION	0.9998761282083553	WITHOUT_CLASSIFICATION	1.2387179164481785E-4	DESIGN
this is either a <version/> tag with no type attribute or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9996176956533189	WITHOUT_CLASSIFICATION	3.8230434668104366E-4	DESIGN
for version properties marked as being generated make sure they are "always" generated aka "insert" is invalid this is dis-allowed by the dtd but just to make sure	WITHOUT_CLASSIFICATION	0.9974780659826569	WITHOUT_CLASSIFICATION	0.002521934017343172	DESIGN
discriminator	WITHOUT_CLASSIFICATION	0.999808650942001	WITHOUT_CLASSIFICATION	1.9134905799908142E-4	DESIGN
( (column) discrim.getcolumniterator().next() ).settype(type)	WITHOUT_CLASSIFICATION	0.999857639291681	WITHOUT_CLASSIFICATION	1.4236070831905034E-4	DESIGN
go ahead and set the lazy here since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9998882064133006	WITHOUT_CLASSIFICATION	1.117935866994946E-4	DESIGN
dynamic update	WITHOUT_CLASSIFICATION	0.9999852401808976	WITHOUT_CLASSIFICATION	1.4759819102456681E-5	DESIGN
import	WITHOUT_CLASSIFICATION	0.9985779510583778	WITHOUT_CLASSIFICATION	0.0014220489416222892	DESIGN
batch size	WITHOUT_CLASSIFICATION	0.9999254686510384	WITHOUT_CLASSIFICATION	7.45313489616473E-5	DESIGN
select before update	WITHOUT_CLASSIFICATION	0.9999832306136308	WITHOUT_CLASSIFICATION	1.6769386369195645E-5	DESIGN
optimistic lock mode	WITHOUT_CLASSIFICATION	0.9996357961739986	WITHOUT_CLASSIFICATION	3.642038260014021E-4	DESIGN
persister	WITHOUT_CLASSIFICATION	0.9980134926450611	WITHOUT_CLASSIFICATION	0.001986507354938772	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9991733944785416	WITHOUT_CLASSIFICATION	8.26605521458523E-4	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9995553015663783	WITHOUT_CLASSIFICATION	4.446984336216364E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9989222331714319	WITHOUT_CLASSIFICATION	0.0010777668285681663	DESIGN
joined subclasses	WITHOUT_CLASSIFICATION	0.9997497672839251	WITHOUT_CLASSIFICATION	2.5023271607499365E-4	DESIGN
key	WITHOUT_CLASSIFICATION	0.9997018968399325	WITHOUT_CLASSIFICATION	2.981031600675152E-4	DESIGN
check	WITHOUT_CLASSIFICATION	0.9972067311054827	WITHOUT_CLASSIFICATION	0.002793268894517324	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9991733944785416	WITHOUT_CLASSIFICATION	8.26605521458523E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9989222331714319	WITHOUT_CLASSIFICATION	0.0010777668285681663	DESIGN
key	WITHOUT_CLASSIFICATION	0.9997018968399325	WITHOUT_CLASSIFICATION	2.981031600675152E-4	DESIGN
model.getkey().settype( new type( model.getidentifier() ) )	WITHOUT_CLASSIFICATION	0.9994416221026271	WITHOUT_CLASSIFICATION	5.58377897372907E-4	DESIGN
tablename	WITHOUT_CLASSIFICATION	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
join.getkey().settype( new type( lazz.getidentifier() ) )	WITHOUT_CLASSIFICATION	0.9994416221026271	WITHOUT_CLASSIFICATION	5.58377897372907E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9989222331714319	WITHOUT_CLASSIFICATION	0.0010777668285681663	DESIGN
column(s)	WITHOUT_CLASSIFICATION	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
column index	WITHOUT_CLASSIFICATION	0.9996210714239713	WITHOUT_CLASSIFICATION	3.789285760287436E-4	DESIGN
column unique-key	WITHOUT_CLASSIFICATION	0.9996154142360234	WITHOUT_CLASSIFICATION	3.845857639766365E-4	DESIGN
automatically makes a column with the default name if none is specifed by xml	WITHOUT_CLASSIFICATION	0.9989838154134948	WITHOUT_CLASSIFICATION	0.0010161845865051978	DESIGN
for an any	WITHOUT_CLASSIFICATION	0.9996761943693346	WITHOUT_CLASSIFICATION	3.238056306653718E-4	DESIGN
insertable simply because that is the user did not specify anything just override it	WITHOUT_CLASSIFICATION	0.999926571471542	WITHOUT_CLASSIFICATION	7.342852845803696E-5	DESIGN
the user specifically supplied insert="true" which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999900514272277	WITHOUT_CLASSIFICATION	9.948572772328915E-6	DESIGN
properties generated on update can never be updateable	WITHOUT_CLASSIFICATION	0.9996046885239173	WITHOUT_CLASSIFICATION	3.95311476082686E-4	DESIGN
updateable only because the user did not specify anything just override it	WITHOUT_CLASSIFICATION	0.9999781077395804	WITHOUT_CLASSIFICATION	2.189226041966975E-5	DESIGN
the user specifically supplied update="true" which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999900514272277	WITHOUT_CLASSIFICATION	9.948572772328915E-6	DESIGN
rolename	WITHOUT_CLASSIFICATION	0.9993766260246493	WITHOUT_CLASSIFICATION	6.233739753507904E-4	DESIGN
fetch strategy	WITHOUT_CLASSIFICATION	0.9997085671986831	WITHOUT_CLASSIFICATION	2.9143280131695165E-4	DESIGN
table	WITHOUT_CLASSIFICATION	0.9997871604819755	WITHOUT_CLASSIFICATION	2.1283951802448652E-4	DESIGN
tablename = mappings.getnamingstrategy().propertytotablename( classname path )	WITHOUT_CLASSIFICATION	0.9999287251579896	WITHOUT_CLASSIFICATION	7.127484201035132E-5	DESIGN
sort	WITHOUT_CLASSIFICATION	0.9995726778047667	WITHOUT_CLASSIFICATION	4.2732219523329177E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9991733944785416	WITHOUT_CLASSIFICATION	8.26605521458523E-4	DESIGN
unsorted natural comparator.class.name	WITHOUT_CLASSIFICATION	0.9995809026555055	WITHOUT_CLASSIFICATION	4.1909734449456157E-4	DESIGN
orphan delete (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9989230654328797	WITHOUT_CLASSIFICATION	0.0010769345671202569	DESIGN
set up second pass	WITHOUT_CLASSIFICATION	0.9999741847916254	WITHOUT_CLASSIFICATION	2.581520837468821E-5	DESIGN
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9791605875637881	WITHOUT_CLASSIFICATION	0.0208394124362118	DESIGN
a nested composite element	WITHOUT_CLASSIFICATION	0.9963412540293446	WITHOUT_CLASSIFICATION	0.0036587459706553787	DESIGN
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9997019601476729	WITHOUT_CLASSIFICATION	2.9803985232714007E-4	DESIGN
note special case one-to-one constrained=false cannot be proxied so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999711457383323	WITHOUT_CLASSIFICATION	2.885426166768281E-5	DESIGN
use old (hb 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999859865423326	WITHOUT_CLASSIFICATION	1.4013457667498447E-5	DESIGN
lazy = !join	WITHOUT_CLASSIFICATION	0.9999478640082611	WITHOUT_CLASSIFICATION	5.213599173898845E-5	DESIGN
generator	WITHOUT_CLASSIFICATION	0.999574965603817	WITHOUT_CLASSIFICATION	4.2503439618303264E-4	DESIGN
id unsaved-value	WITHOUT_CLASSIFICATION	0.9997682348759414	WITHOUT_CLASSIFICATION	2.317651240586065E-4	DESIGN
version unsaved-value	WITHOUT_CLASSIFICATION	0.9997188295054973	WITHOUT_CLASSIFICATION	2.811704945026854E-4	DESIGN
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9939100279194938	WITHOUT_CLASSIFICATION	0.006089972080506326	DESIGN
( (column) ( (simplevalue) ic.getindex() ).getcolumniterator().next() ).setnullable(false)	WITHOUT_CLASSIFICATION	0.999857639291681	WITHOUT_CLASSIFICATION	1.4236070831905034E-4	DESIGN
contained elements	WITHOUT_CLASSIFICATION	0.9998960083578659	WITHOUT_CLASSIFICATION	1.0399164213413632E-4	DESIGN
for non-inverse one-to-many with a not-null fk add a backref!	WITHOUT_CLASSIFICATION	0.9983697805368112	WITHOUT_CLASSIFICATION	0.0016302194631887354	DESIGN
bind the where	WITHOUT_CLASSIFICATION	0.9999738430919561	WITHOUT_CLASSIFICATION	2.6156908043905572E-5	DESIGN
bind the order-by	WITHOUT_CLASSIFICATION	0.9999342334626322	WITHOUT_CLASSIFICATION	6.576653736778641E-5	DESIGN
bind the filters	WITHOUT_CLASSIFICATION	0.9999662742806685	WITHOUT_CLASSIFICATION	3.372571933152143E-5	DESIGN
overriding inherited meta attribute. hbx-621 & hbx-793	WITHOUT_CLASSIFICATION	0.99938339907275	WITHOUT_CLASSIFICATION	6.166009272500464E-4	DESIGN
first iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999946074606855	WITHOUT_CLASSIFICATION	5.392539314560129E-6	DESIGN
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a fqn (in the case of a pojo mapping).	WITHOUT_CLASSIFICATION	0.9984473870959428	WITHOUT_CLASSIFICATION	0.001552612904057089	DESIGN
+ "_" + referencedcolumnname not used for backward compatibility	WITHOUT_CLASSIFICATION	0.6974090566053581	DESIGN	0.30259094339464193	WITHOUT_CLASSIFICATION
sessionfactory name	WITHOUT_CLASSIFICATION	0.9998264833738241	WITHOUT_CLASSIFICATION	1.7351662617592616E-4	DESIGN
jdbc and connection settings	WITHOUT_CLASSIFICATION	0.999950296526462	WITHOUT_CLASSIFICATION	4.970347353812338E-5	DESIGN
jdbc and connection settings	WITHOUT_CLASSIFICATION	0.999950296526462	WITHOUT_CLASSIFICATION	4.970347353812338E-5	DESIGN
interrogate jdbc metadata	WITHOUT_CLASSIFICATION	0.9994251810801665	WITHOUT_CLASSIFICATION	5.74818919833437E-4	DESIGN
user supplied jdbc connections	WITHOUT_CLASSIFICATION	0.9998887211349877	WITHOUT_CLASSIFICATION	1.1127886501222324E-4	DESIGN
use dialect default properties	WITHOUT_CLASSIFICATION	0.9995400110276412	WITHOUT_CLASSIFICATION	4.599889723587929E-4	DESIGN
transaction settings	WITHOUT_CLASSIFICATION	0.9999846947396409	WITHOUT_CLASSIFICATION	1.5305260359102323E-5	DESIGN
sql generation settings	WITHOUT_CLASSIFICATION	0.9999513972296261	WITHOUT_CLASSIFICATION	4.860277037383155E-5	DESIGN
query parser settings	WITHOUT_CLASSIFICATION	0.9996504861196363	WITHOUT_CLASSIFICATION	3.495138803636611E-4	DESIGN
second-level / query cache	WITHOUT_CLASSIFICATION	0.9998247296436934	WITHOUT_CLASSIFICATION	1.752703563066755E-4	DESIGN
the cache provider is needed when we either have second-level cache enabled or query cache enabled. note that usesecondlevelcache is enabled by default	WITHOUT_CLASSIFICATION	0.999992703202783	WITHOUT_CLASSIFICATION	7.296797216971939E-6	DESIGN
sql exception converter	WITHOUT_CLASSIFICATION	0.9990470841874425	WITHOUT_CLASSIFICATION	9.529158125575022E-4	DESIGN
statistics and logging	WITHOUT_CLASSIFICATION	0.9998013889490517	WITHOUT_CLASSIFICATION	1.9861105094841548E-4	DESIGN
settings.setshowsqlenabled(showsql)	WITHOUT_CLASSIFICATION	0.9995795657065736	WITHOUT_CLASSIFICATION	4.204342934264473E-4	DESIGN
settings.setformatsqlenabled(formatsql)	WITHOUT_CLASSIFICATION	0.9995795657065736	WITHOUT_CLASSIFICATION	4.204342934264473E-4	DESIGN
schema export	WITHOUT_CLASSIFICATION	0.9998100485318024	WITHOUT_CLASSIFICATION	1.8995146819750743E-4	DESIGN
string provider = properties.getproperty( environment.bytecode_provider ) log.info( "bytecode provider name " + provider ) bytecodeprovider bytecodeprovider = buildbytecodeprovider( provider ) settings.setbytecodeprovider( bytecodeprovider )	WITHOUT_CLASSIFICATION	0.9999522035508167	WITHOUT_CLASSIFICATION	4.779644918333575E-5	DESIGN
legacy behavior apply the bridge	WITHOUT_CLASSIFICATION	0.9982822235204291	WITHOUT_CLASSIFICATION	0.0017177764795708332	DESIGN
maybe a concrete sqlpropertyresult type but map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.5795779034186804	WITHOUT_CLASSIFICATION	0.4204220965813195	DESIGN
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9998639045174158	WITHOUT_CLASSIFICATION	1.3609548258427073E-4	DESIGN
private componenttuplizerfactory componenttuplizerfactory todo hhh-3517 and hhh-1907 private bytecodeprovider bytecodeprovider	WITHOUT_CLASSIFICATION	0.8901290018219827	DESIGN	0.10987099817801736	WITHOUT_CLASSIFICATION
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998702006697556	WITHOUT_CLASSIFICATION	1.2979933024443848E-4	DESIGN
public componenttuplizerfactory getcomponenttuplizerfactory() { return componenttuplizerfactory }	WITHOUT_CLASSIFICATION	0.9995391558718079	WITHOUT_CLASSIFICATION	4.6084412819218974E-4	DESIGN
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9860670931053145	WITHOUT_CLASSIFICATION	0.013932906894685475	DESIGN
void setshowsqlenabled(boolean b) { showsql = b } void setformatsqlenabled(boolean b) { formatsql = b }	WITHOUT_CLASSIFICATION	0.9999326482760621	WITHOUT_CLASSIFICATION	6.735172393791031E-5	DESIGN
public bytecodeprovider getbytecodeprovider() { return bytecodeprovider } void setbytecodeprovider(bytecodeprovider bytecodeprovider) { this.bytecodeprovider = bytecodeprovider }	WITHOUT_CLASSIFICATION	0.9998880056904834	WITHOUT_CLASSIFICATION	1.1199430951658253E-4	DESIGN
using local since the inheritedmetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9523840542605114	WITHOUT_CLASSIFICATION	0.04761594573948858	DESIGN
private componenttuplizerfactory componenttuplizerfactory todo hhh-3517 and hhh-1907	WITHOUT_CLASSIFICATION	0.8901290018219827	DESIGN	0.10987099817801736	WITHOUT_CLASSIFICATION
protected list extendsqueue	WITHOUT_CLASSIFICATION	0.9985866884806981	WITHOUT_CLASSIFICATION	0.0014133115193019957	DESIGN
extendsqueue = new arraylist()	WITHOUT_CLASSIFICATION	0.9999246228675756	WITHOUT_CLASSIFICATION	7.537713242441903E-5	DESIGN
componenttuplizerfactory = new componenttuplizerfactory()	WITHOUT_CLASSIFICATION	0.9999236719031965	WITHOUT_CLASSIFICATION	7.632809680347776E-5	DESIGN
if doc is null then for whatever reason the cached file cannot be used	WITHOUT_CLASSIFICATION	0.9971782305224409	WITHOUT_CLASSIFICATION	0.002821769477559155	DESIGN
drop them in reverse order in case db needs it done that way	WITHOUT_CLASSIFICATION	0.7297436103815408	WITHOUT_CLASSIFICATION	0.2702563896184592	DESIGN
public componenttuplizerfactory getcomponenttuplizerfactory() { return componenttuplizerfactory }	WITHOUT_CLASSIFICATION	0.9995391558718079	WITHOUT_CLASSIFICATION	4.6084412819218974E-4	DESIGN
this method may be called many times!!	WITHOUT_CLASSIFICATION	0.9898244475251338	WITHOUT_CLASSIFICATION	0.010175552474866248	DESIGN
iterator iterator = extendsqueue.iterator()	WITHOUT_CLASSIFICATION	0.9999021935364729	WITHOUT_CLASSIFICATION	9.78064635269912E-5	DESIGN
iterator iter = extendsqueue.iterator()	WITHOUT_CLASSIFICATION	0.9998083894405047	WITHOUT_CLASSIFICATION	1.916105594953041E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.9993887615547047	WITHOUT_CLASSIFICATION	6.112384452954491E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.9993887615547047	WITHOUT_CLASSIFICATION	6.112384452954491E-4	DESIGN
settings.setcomponenttuplizerfactory( this.getcomponenttuplizerfactory() )	WITHOUT_CLASSIFICATION	0.9991451090639453	WITHOUT_CLASSIFICATION	8.548909360547195E-4	DESIGN
private final list extendsqueue	WITHOUT_CLASSIFICATION	0.9988540159207251	WITHOUT_CLASSIFICATION	0.0011459840792748908	DESIGN
<string string>	WITHOUT_CLASSIFICATION	0.999814871874451	WITHOUT_CLASSIFICATION	1.851281255491303E-4	DESIGN
<string string>	WITHOUT_CLASSIFICATION	0.999814871874451	WITHOUT_CLASSIFICATION	1.851281255491303E-4	DESIGN
+ "_" + referencedcolumnname not used for backward compatibility	WITHOUT_CLASSIFICATION	0.6974090566053581	DESIGN	0.30259094339464193	WITHOUT_CLASSIFICATION
set use_reflection_optimizer to false to fix hhh-227	WITHOUT_CLASSIFICATION	0.9353202633487944	WITHOUT_CLASSIFICATION	0.06467973665120572	DESIGN
orphan delete not supported for entitymode.dom4j	WITHOUT_CLASSIFICATION	0.9993393199105994	WITHOUT_CLASSIFICATION	6.606800894004933E-4	DESIGN
element = xmlhelper.generatedom4jelement( persister.getnodename() )	WITHOUT_CLASSIFICATION	0.9997771247541581	WITHOUT_CLASSIFICATION	2.2287524584179916E-4	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.999777365586636	WITHOUT_CLASSIFICATION	2.226344133639222E-4	DESIGN
orphan delete not supported for entitymode.dom4j	WITHOUT_CLASSIFICATION	0.9993393199105994	WITHOUT_CLASSIFICATION	6.606800894004933E-4	DESIGN
element = xmlhelper.generatedom4jelement( persister.getnodename() )	WITHOUT_CLASSIFICATION	0.9997771247541581	WITHOUT_CLASSIFICATION	2.2287524584179916E-4	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.9992656998012222	WITHOUT_CLASSIFICATION	7.343001987777407E-4	DESIGN
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.998022387721718	WITHOUT_CLASSIFICATION	0.001977612278281894	DESIGN
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9996374004930062	WITHOUT_CLASSIFICATION	3.6259950699376524E-4	DESIGN
the element has changed	WITHOUT_CLASSIFICATION	0.9999022927724127	WITHOUT_CLASSIFICATION	9.770722758728987E-5	DESIGN
careful these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9967567601473849	WITHOUT_CLASSIFICATION	0.003243239852614997	DESIGN
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9806194740456059	WITHOUT_CLASSIFICATION	0.01938052595439416	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9991249206514125	WITHOUT_CLASSIFICATION	8.750793485876198E-4	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9991249206514125	WITHOUT_CLASSIFICATION	8.750793485876198E-4	DESIGN
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9991037166151228	WITHOUT_CLASSIFICATION	8.96283384877205E-4	DESIGN
short-circuit(s) no new elements the old list contains only orphans no old elements so no orphans neither	WITHOUT_CLASSIFICATION	0.99999928301624	WITHOUT_CLASSIFICATION	7.169837601632572E-7	DESIGN
create the collection holding the orphans	WITHOUT_CLASSIFICATION	0.9989670691453201	WITHOUT_CLASSIFICATION	0.0010329308546798768	DESIGN
collect entityidentifier(s) of the current elements - add them into a hashset for fast access	WITHOUT_CLASSIFICATION	0.996500939998159	WITHOUT_CLASSIFICATION	0.0034990600018409207	DESIGN
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999470011643318	WITHOUT_CLASSIFICATION	5.299883566827411E-5	DESIGN
(array==null) ? templist.size()	WITHOUT_CLASSIFICATION	0.9987132631626658	WITHOUT_CLASSIFICATION	0.0012867368373342004	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.999777365586636	WITHOUT_CLASSIFICATION	2.226344133639222E-4	DESIGN
(array==null) ? templist.get(i)	WITHOUT_CLASSIFICATION	0.9987132631626658	WITHOUT_CLASSIFICATION	0.0012867368373342004	DESIGN
write() -- doesn't	WITHOUT_CLASSIFICATION	0.9998641605945673	WITHOUT_CLASSIFICATION	1.3583940543259547E-4	DESIGN
write() -- doesn't	WITHOUT_CLASSIFICATION	0.9998641605945673	WITHOUT_CLASSIFICATION	1.3583940543259547E-4	DESIGN
amazingly these two will work because abstractcollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999553920884192	WITHOUT_CLASSIFICATION	4.4607911580643545E-5	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.9992656998012222	WITHOUT_CLASSIFICATION	7.343001987777407E-4	DESIGN
finally what it's all about	WITHOUT_CLASSIFICATION	0.9832328110457176	WITHOUT_CLASSIFICATION	0.016767188954282433	DESIGN
note that if we load this collection from a cartesian product the multiplicity would be broken so use an idbag instead	WITHOUT_CLASSIFICATION	0.6914041962149997	DESIGN	0.3085958037850002	WITHOUT_CLASSIFICATION
anyway here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.8028531748235755	DESIGN	0.19714682517642443	WITHOUT_CLASSIFICATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9997700167796074	WITHOUT_CLASSIFICATION	2.2998322039258134E-4	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9820744642766274	WITHOUT_CLASSIFICATION	0.01792553572337265	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.9992656998012222	WITHOUT_CLASSIFICATION	7.343001987777407E-4	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9997700167796074	WITHOUT_CLASSIFICATION	2.2998322039258134E-4	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9820744642766274	WITHOUT_CLASSIFICATION	0.01792553572337265	DESIGN
public boolean equals(object other) {read()return bag.equals(other)}public int hashcode(object other) {read()return bag.hashcode()}	WITHOUT_CLASSIFICATION	0.9998854458997453	WITHOUT_CLASSIFICATION	1.1455410025476829E-4	DESIGN
list operations	WITHOUT_CLASSIFICATION	0.9999206065760503	WITHOUT_CLASSIFICATION	7.939342394971308E-5	DESIGN
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999070552242164	WITHOUT_CLASSIFICATION	9.294477578364729E-5	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.9992656998012222	WITHOUT_CLASSIFICATION	7.343001987777407E-4	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.9992656998012222	WITHOUT_CLASSIFICATION	7.343001987777407E-4	DESIGN
from map	WITHOUT_CLASSIFICATION	0.9991902894768687	WITHOUT_CLASSIFICATION	8.097105231313033E-4	DESIGN
from sortedmap	WITHOUT_CLASSIFICATION	0.999708513862605	WITHOUT_CLASSIFICATION	2.914861373950667E-4	DESIGN
inject the data	WITHOUT_CLASSIFICATION	0.9997742003480857	WITHOUT_CLASSIFICATION	2.2579965191430671E-4	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998165568388883	WITHOUT_CLASSIFICATION	1.8344316111179715E-4	DESIGN
default pool size 20	WITHOUT_CLASSIFICATION	0.9999804484461667	WITHOUT_CLASSIFICATION	1.9551553833269413E-5	DESIGN
trying via forname() first to be as close to drivermanager's semantics	WITHOUT_CLASSIFICATION	0.9999917083925115	WITHOUT_CLASSIFICATION	8.29160748842275E-6	DESIGN
if debug level is enabled then log the password otherwise mask it	WITHOUT_CLASSIFICATION	0.9999659725357178	WITHOUT_CLASSIFICATION	3.4027464282165E-5	DESIGN
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9990158263274657	WITHOUT_CLASSIFICATION	9.841736725343738E-4	DESIGN
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9998295091311811	WITHOUT_CLASSIFICATION	1.704908688188641E-4	DESIGN
then bind it	WITHOUT_CLASSIFICATION	0.9998923443990095	WITHOUT_CLASSIFICATION	1.0765560099052185E-4	DESIGN
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.969150983659133	WITHOUT_CLASSIFICATION	0.030849016340866946	DESIGN
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9926654436535776	WITHOUT_CLASSIFICATION	0.007334556346422333	DESIGN
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999475635592068	WITHOUT_CLASSIFICATION	5.2436440793312255E-5	DESIGN
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9993569378615333	WITHOUT_CLASSIFICATION	6.430621384666313E-4	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995799572346159	WITHOUT_CLASSIFICATION	4.2004276538410053E-4	DESIGN
we could register the session against the transaction even though it is not started but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999976627663358	WITHOUT_CLASSIFICATION	2.3372336641667943E-6	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998165568388883	WITHOUT_CLASSIFICATION	1.8344316111179715E-4	DESIGN
private string propertyname	WITHOUT_CLASSIFICATION	0.9970007609575954	WITHOUT_CLASSIFICATION	0.00299923904240471	DESIGN
public propertyprojection project() {return projections.property(getpropertyname())}	WITHOUT_CLASSIFICATION	0.9996443470183201	WITHOUT_CLASSIFICATION	3.5565298167990596E-4	DESIGN
string[] fk = stringhelper.qualify( "collection_" cp.getkeycolumnnames() )	WITHOUT_CLASSIFICATION	0.9997974331839902	WITHOUT_CLASSIFICATION	2.0256681600989385E-4	DESIGN
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999338969930346	WITHOUT_CLASSIFICATION	6.610300696543244E-5	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.999808851081209	WITHOUT_CLASSIFICATION	1.9114891879095698E-4	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.999808851081209	WITHOUT_CLASSIFICATION	1.9114891879095698E-4	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998165568388883	WITHOUT_CLASSIFICATION	1.8344316111179715E-4	DESIGN
the following two lines were added to ensure that this.params is not null which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999925979628572	WITHOUT_CLASSIFICATION	7.402037142792149E-6	DESIGN
with two-deep subqueries the same alias would get generated for both using the old method (criteriaquery.generatesqlalias()) so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9515876475065886	WITHOUT_CLASSIFICATION	0.048412352493411366	DESIGN
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9892337218721533	WITHOUT_CLASSIFICATION	0.010766278127846706	DESIGN
pull off the last " "	WITHOUT_CLASSIFICATION	0.9999797796149494	WITHOUT_CLASSIFICATION	2.0220385050662785E-5	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.9993102836587924	WITHOUT_CLASSIFICATION	6.897163412077128E-4	DESIGN
we have the form trim(trimsource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999246200577878	WITHOUT_CLASSIFICATION	7.537994221212474E-5	DESIGN
we have the form trim(from trimsource). this is functionally equivalent to trim(trimsource)	WITHOUT_CLASSIFICATION	0.9977309924778605	WITHOUT_CLASSIFICATION	0.0022690075221395017	DESIGN
not_supported_should_use_jdbc3_preparedstatement.getgeneratedkeys_method	WITHOUT_CLASSIFICATION	0.9995795657065736	WITHOUT_CLASSIFICATION	4.204342934264473E-4	DESIGN
potentialtrimcharacterargindex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9996943102488502	WITHOUT_CLASSIFICATION	3.0568975114976727E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994412691106829	WITHOUT_CLASSIFICATION	5.587308893171643E-4	DESIGN
oracle did add support for ansi case statements in 9i	WITHOUT_CLASSIFICATION	0.9980911599265972	WITHOUT_CLASSIFICATION	0.0019088400734027658	DESIGN
the standard sql function name is current_timestamp	WITHOUT_CLASSIFICATION	0.9998892847312482	WITHOUT_CLASSIFICATION	1.107152687519523E-4	DESIGN
informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9961243437893523	WITHOUT_CLASSIFICATION	0.0038756562106477066	DESIGN
or byte or text? or money	WITHOUT_CLASSIFICATION	0.99987495494265	WITHOUT_CLASSIFICATION	1.2504505734990988E-4	DESIGN
strip table-owner because informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999642453660813	WITHOUT_CLASSIFICATION	3.575463391872208E-5	DESIGN
build the map of standard ansi sql aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993967517689015	WITHOUT_CLASSIFICATION	6.032482310985017E-4	DESIGN
pre h3.2 behavior super.getreturntype(ct m)	WITHOUT_CLASSIFICATION	0.999342908076952	WITHOUT_CLASSIFICATION	6.57091923047939E-4	DESIGN
finally use the sqltype if == on hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9990716328805791	WITHOUT_CLASSIFICATION	9.283671194210284E-4	DESIGN
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9997997512677858	WITHOUT_CLASSIFICATION	2.0024873221423535E-4	DESIGN
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9959985914423609	WITHOUT_CLASSIFICATION	0.004001408557639086	DESIGN
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.987310276658273	WITHOUT_CLASSIFICATION	0.012689723341727107	DESIGN
map second/minute/hour/day/month/year to ansi extract() override on subclasses	WITHOUT_CLASSIFICATION	0.9994893462639066	WITHOUT_CLASSIFICATION	5.106537360933636E-4	DESIGN
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9990419731398297	WITHOUT_CLASSIFICATION	9.580268601702967E-4	DESIGN
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9943685844485972	WITHOUT_CLASSIFICATION	0.005631415551402851	DESIGN
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9917596333498085	WITHOUT_CLASSIFICATION	0.008240366650191443	DESIGN
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987954325687599	WITHOUT_CLASSIFICATION	0.0012045674312400562	DESIGN
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998676779322773	WITHOUT_CLASSIFICATION	1.323220677227023E-4	DESIGN
identity support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980744933156982	WITHOUT_CLASSIFICATION	0.001925506684301861	DESIGN
sequence support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991393859450405	WITHOUT_CLASSIFICATION	8.6061405495952E-4	DESIGN
guid support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977962142767172	WITHOUT_CLASSIFICATION	0.0022037857232828978	DESIGN
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977962142767172	WITHOUT_CLASSIFICATION	0.0022037857232828978	DESIGN
by default we report no support	WITHOUT_CLASSIFICATION	0.9976345489332259	WITHOUT_CLASSIFICATION	0.002365451066774103	DESIGN
by default we report no support for nowait lock semantics	WITHOUT_CLASSIFICATION	0.9867389365882748	WITHOUT_CLASSIFICATION	0.01326106341172512	DESIGN
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993395612679101	WITHOUT_CLASSIFICATION	6.604387320899602E-4	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9694938317897318	WITHOUT_CLASSIFICATION	0.030506168210268178	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997843766556662	WITHOUT_CLASSIFICATION	0.0021562334433379553	DESIGN
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989203653140146	WITHOUT_CLASSIFICATION	0.0010796346859853652	DESIGN
sqlexception support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977962142767172	WITHOUT_CLASSIFICATION	0.0022037857232828978	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977962142767172	WITHOUT_CLASSIFICATION	0.0022037857232828978	DESIGN
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978319496208455	WITHOUT_CLASSIFICATION	0.002168050379154343	DESIGN
ddl support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977962142767172	WITHOUT_CLASSIFICATION	0.0022037857232828978	DESIGN
grrr for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9998605785170568	WITHOUT_CLASSIFICATION	1.3942148294318434E-4	DESIGN
informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993678315385909	WITHOUT_CLASSIFICATION	6.32168461409095E-4	DESIGN
return false here as most databases do not properly support this construct	WITHOUT_CLASSIFICATION	0.984567750972315	WITHOUT_CLASSIFICATION	0.0154322490276851	DESIGN
mckoi has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9998019969315894	WITHOUT_CLASSIFICATION	1.980030684104944E-4	DESIGN
oracle8 and previous define only a "date" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.7403828459076645	WITHOUT_CLASSIFICATION	0.2596171540923355	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9996769691303174	WITHOUT_CLASSIFICATION	3.230308696826184E-4	DESIGN
" cascade"	WITHOUT_CLASSIFICATION	0.9993032709382472	WITHOUT_CLASSIFICATION	6.967290617528293E-4	DESIGN
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999527601027164	WITHOUT_CLASSIFICATION	4.7239897283571994E-5	DESIGN
public boolean droptemporarytableafteruse() {we have to because postgres sets current txto rollback only after a failed create tablereturn true}	WITHOUT_CLASSIFICATION	0.9999075691302486	WITHOUT_CLASSIFICATION	9.243086975141091E-5	DESIGN
check violation	WITHOUT_CLASSIFICATION	0.9992524235660867	WITHOUT_CLASSIFICATION	7.475764339132488E-4	DESIGN
unique violation	WITHOUT_CLASSIFICATION	0.9995897970988795	WITHOUT_CLASSIFICATION	4.102029011204604E-4	DESIGN
foreign key violation	WITHOUT_CLASSIFICATION	0.9998272723810554	WITHOUT_CLASSIFICATION	1.727276189446193E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994412691106829	WITHOUT_CLASSIFICATION	5.587308893171643E-4	DESIGN
not null violation	WITHOUT_CLASSIFICATION	0.9980704285506776	WITHOUT_CLASSIFICATION	0.0019295714493223228	DESIGN
all other	WITHOUT_CLASSIFICATION	0.9989153325466646	WITHOUT_CLASSIFICATION	0.001084667453335334	DESIGN
register the type of the out param - postgresql uses types.other	WITHOUT_CLASSIFICATION	0.9950708949608352	WITHOUT_CLASSIFICATION	0.0049291050391647995	DESIGN
seems to not really public boolean supportsrowvalueconstructorsyntax() { return true }	WITHOUT_CLASSIFICATION	0.9990986847716194	WITHOUT_CLASSIFICATION	9.01315228380527E-4	DESIGN
seems to have spotty lob suppport	WITHOUT_CLASSIFICATION	0.9996547218354468	WITHOUT_CLASSIFICATION	3.4527816455318073E-4	DESIGN
hhh-2300	WITHOUT_CLASSIFICATION	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
ignore (probably h2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9989260736883009	WITHOUT_CLASSIFICATION	0.0010739263116992042	DESIGN
numeric functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985070101491808	WITHOUT_CLASSIFICATION	0.0014929898508192982	DESIGN
string functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993291428004343	WITHOUT_CLASSIFICATION	6.708571995657084E-4	DESIGN
time and date functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997683779044807	WITHOUT_CLASSIFICATION	2.3162209551934727E-4	DESIGN
system functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986239871995883	WITHOUT_CLASSIFICATION	0.0013760128004116465	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9979594988202807	WITHOUT_CLASSIFICATION	0.002040501179719316	DESIGN
23000 check constraint violation {0} 23001 unique index or primary key violation {0}	WITHOUT_CLASSIFICATION	0.9994517398056064	WITHOUT_CLASSIFICATION	5.482601943935929E-4	DESIGN
display the dialect version.	WITHOUT_CLASSIFICATION	0.9998233450020567	WITHOUT_CLASSIFICATION	1.7665499794338187E-4	DESIGN
the rdms concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999953126507667	WITHOUT_CLASSIFICATION	4.687349233344381E-6	DESIGN
dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992874079996795	WITHOUT_CLASSIFICATION	7.125920003203793E-4	DESIGN
original dialect.java returns " for update"	WITHOUT_CLASSIFICATION	0.9996254622010117	WITHOUT_CLASSIFICATION	3.745377989883217E-4	DESIGN
verify the state of this new method in hibernate 3.0 dialect.java	WITHOUT_CLASSIFICATION	0.9995037072395618	WITHOUT_CLASSIFICATION	4.962927604382526E-4	DESIGN
origial dialect.java returns true	WITHOUT_CLASSIFICATION	0.9997580753576081	WITHOUT_CLASSIFICATION	2.4192464239204908E-4	DESIGN
the keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.8571815968696918	WITHOUT_CLASSIFICATION	0.14281840313030822	DESIGN
sequence methods - start. the rdms dialect needs these	WITHOUT_CLASSIFICATION	0.9968612410312382	WITHOUT_CLASSIFICATION	0.003138758968761853	DESIGN
methods to make it possible to use the native id generator	WITHOUT_CLASSIFICATION	0.9995045992383879	WITHOUT_CLASSIFICATION	4.954007616120988E-4	DESIGN
the where clause was added to eliminate this statement from brute force searches.	WITHOUT_CLASSIFICATION	0.9996804933720036	WITHOUT_CLASSIFICATION	3.1950662799644147E-4	DESIGN
sequence methods - end	WITHOUT_CLASSIFICATION	0.9988201485756699	WITHOUT_CLASSIFICATION	0.0011798514243300427	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994412691106829	WITHOUT_CLASSIFICATION	5.587308893171643E-4	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9996769691303174	WITHOUT_CLASSIFICATION	3.230308696826184E-4	DESIGN
we must return a valid rdms/rsa command from this method to prevent rdms/rsa from issuing error 400	WITHOUT_CLASSIFICATION	0.9522271763152425	WITHOUT_CLASSIFICATION	0.047772823684757604	DESIGN
used with drop table to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9416031368505354	WITHOUT_CLASSIFICATION	0.05839686314946463	DESIGN
rdms supports the union all clause.	WITHOUT_CLASSIFICATION	0.999635516335127	WITHOUT_CLASSIFICATION	3.6448366487295116E-4	DESIGN
rdms has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9998019969315894	WITHOUT_CLASSIFICATION	1.980030684104944E-4	DESIGN
multi-param dialect functions	WITHOUT_CLASSIFICATION	0.998881284147141	WITHOUT_CLASSIFICATION	0.0011187158528591402	DESIGN
function templates	WITHOUT_CLASSIFICATION	0.9999613883293873	WITHOUT_CLASSIFICATION	3.861167061265929E-5	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9979594988202807	WITHOUT_CLASSIFICATION	0.002040501179719316	DESIGN
this assumes schema support which is present in 1.8.0 and later	WITHOUT_CLASSIFICATION	0.9900590266220058	WITHOUT_CLASSIFICATION	0.00994097337799414	DESIGN
hsqldb only supports read_uncommitted transaction isolation	WITHOUT_CLASSIFICATION	0.9998290836237581	WITHOUT_CLASSIFICATION	1.7091637624184377E-4	DESIGN
multi-param string dialect functions	WITHOUT_CLASSIFICATION	0.9993291428004343	WITHOUT_CLASSIFICATION	6.708571995657084E-4	DESIGN
multi-param numeric dialect functions	WITHOUT_CLASSIFICATION	0.9985070101491808	WITHOUT_CLASSIFICATION	0.0014929898508192982	DESIGN
multi-param date dialect functions	WITHOUT_CLASSIFICATION	0.9989294104992349	WITHOUT_CLASSIFICATION	0.0010705895007650788	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9998332299936852	WITHOUT_CLASSIFICATION	1.6677000631484603E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994412691106829	WITHOUT_CLASSIFICATION	5.587308893171643E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994412691106829	WITHOUT_CLASSIFICATION	5.587308893171643E-4	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9976635896814392	WITHOUT_CLASSIFICATION	0.002336410318560735	DESIGN
register the type of the out param - an oracle specific type	WITHOUT_CLASSIFICATION	0.9985448820521254	WITHOUT_CLASSIFICATION	0.0014551179478745832	DESIGN
timesten has no blob/clob support but these types may be suitable for some applications. the length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9994583265179737	WITHOUT_CLASSIFICATION	5.416734820261919E-4	DESIGN
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9992447608380063	WITHOUT_CLASSIFICATION	7.552391619937683E-4	DESIGN
public boolean supportsforupdatenowait() {return false}	WITHOUT_CLASSIFICATION	0.999835581070573	WITHOUT_CLASSIFICATION	1.6441892942697115E-4	DESIGN
timesten has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9998019969315894	WITHOUT_CLASSIFICATION	1.980030684104944E-4	DESIGN
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9971560034094595	WITHOUT_CLASSIFICATION	0.002843996590540577	DESIGN
add new ordered map	WITHOUT_CLASSIFICATION	0.9996204777171847	WITHOUT_CLASSIFICATION	3.795222828153588E-4	DESIGN
registercolumntype( types.varchar 16777215 "mediumtext" )	WITHOUT_CLASSIFICATION	0.9991451090639453	WITHOUT_CLASSIFICATION	8.548909360547195E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994412691106829	WITHOUT_CLASSIFICATION	5.587308893171643E-4	DESIGN
this assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999873036538203	WITHOUT_CLASSIFICATION	1.2696346179680506E-5	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9985024995461382	WITHOUT_CLASSIFICATION	0.001497500453861747	DESIGN
return "select current_timestamp from rdb$database"	WITHOUT_CLASSIFICATION	0.9994300204121133	WITHOUT_CLASSIFICATION	5.699795878867635E-4	DESIGN
registercolumntype data types	WITHOUT_CLASSIFICATION	0.9992749633170933	WITHOUT_CLASSIFICATION	7.250366829067627E-4	DESIGN
hibernate seems to ignore this type	WITHOUT_CLASSIFICATION	0.995341815645689	WITHOUT_CLASSIFICATION	0.004658184354311003	DESIGN
ibid for current_time and current_date	WITHOUT_CLASSIFICATION	0.9996650680716666	WITHOUT_CLASSIFICATION	3.3493192833342246E-4	DESIGN
tell hibernate to use getbytes instead of getbinarystream	WITHOUT_CLASSIFICATION	0.9984201443383613	WITHOUT_CLASSIFICATION	0.0015798556616386551	DESIGN
no batch statements	WITHOUT_CLASSIFICATION	0.9999464539753459	WITHOUT_CLASSIFICATION	5.3546024654271184E-5	DESIGN
we might want a special case for 192. this is very common for money types and here it is converted to 181	WITHOUT_CLASSIFICATION	0.7560048089619107	DESIGN	0.24399519103808928	WITHOUT_CLASSIFICATION
no pointbase bit	WITHOUT_CLASSIFICATION	0.9998818893737899	WITHOUT_CLASSIFICATION	1.1811062621008894E-4	DESIGN
no pointbase tinyint	WITHOUT_CLASSIFICATION	0.9999095718001625	WITHOUT_CLASSIFICATION	9.042819983746653E-5	DESIGN
pointbase has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9998019969315894	WITHOUT_CLASSIFICATION	1.980030684104944E-4	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9996769691303174	WITHOUT_CLASSIFICATION	3.230308696826184E-4	DESIGN
the current_timestamp is more accurate but only known to be supported in sql server 7.0 and later (i.e. sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.7248642486066115	WITHOUT_CLASSIFICATION	0.2751357513933887	DESIGN
sql server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999131968661323	WITHOUT_CLASSIFICATION	8.680313386773626E-5	DESIGN
here assume sqlserver2005 using snapshot isolation which does not have this problem	WITHOUT_CLASSIFICATION	0.9933232017326817	WITHOUT_CLASSIFICATION	0.00667679826731823	DESIGN
registercolumntype( types.blob 16777215 "mediumblob" ) registercolumntype( types.blob 65535 "blob" )	WITHOUT_CLASSIFICATION	0.9991451090639453	WITHOUT_CLASSIFICATION	8.548909360547195E-4	DESIGN
registercolumntype( types.clob 16777215 "mediumtext" ) registercolumntype( types.clob 65535 "text" )	WITHOUT_CLASSIFICATION	0.9991538008502692	WITHOUT_CLASSIFICATION	8.461991497308944E-4	DESIGN
registercolumntype( types.varchar 16777215 "mediumtext" ) registercolumntype( types.varchar 65535 "text" )	WITHOUT_CLASSIFICATION	0.9991538008502692	WITHOUT_CLASSIFICATION	8.461991497308944E-4	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9996769691303174	WITHOUT_CLASSIFICATION	3.230308696826184E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9998091452464233	WITHOUT_CLASSIFICATION	1.9085475357671393E-4	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9985024995461382	WITHOUT_CLASSIFICATION	0.001497500453861747	DESIGN
sybase bit type does not support null values	WITHOUT_CLASSIFICATION	0.9574232321658277	WITHOUT_CLASSIFICATION	0.042576767834172385	DESIGN
this assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999873036538203	WITHOUT_CLASSIFICATION	1.2696346179680506E-5	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994412691106829	WITHOUT_CLASSIFICATION	5.587308893171643E-4	DESIGN
you may still have other resultsets or update counts left to process here but you can't do it now or the resultset you just got will be closed	WITHOUT_CLASSIFICATION	0.9999996303722669	WITHOUT_CLASSIFICATION	3.6962773317068766E-7	DESIGN
not null (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9949590270594694	WITHOUT_CLASSIFICATION	0.005040972940530627	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994412691106829	WITHOUT_CLASSIFICATION	5.587308893171643E-4	DESIGN
oracle driver reports to support getgeneratedkeys() but they only support the version taking an array of the names of the columns to be returned (via its returning clause). no other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.999645939838863	WITHOUT_CLASSIFICATION	3.540601611370272E-4	DESIGN
multi-param string dialect functions	WITHOUT_CLASSIFICATION	0.9993291428004343	WITHOUT_CLASSIFICATION	6.708571995657084E-4	DESIGN
multi-param numeric dialect functions	WITHOUT_CLASSIFICATION	0.9985070101491808	WITHOUT_CLASSIFICATION	0.0014929898508192982	DESIGN
multi-param date dialect functions	WITHOUT_CLASSIFICATION	0.9989294104992349	WITHOUT_CLASSIFICATION	0.0010705895007650788	DESIGN
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999950821366939	WITHOUT_CLASSIFICATION	4.917863306087352E-6	DESIGN
add the main query	WITHOUT_CLASSIFICATION	0.9997462299026204	WITHOUT_CLASSIFICATION	2.537700973795994E-4	DESIGN
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9996782583686076	WITHOUT_CLASSIFICATION	3.2174163139239107E-4	DESIGN
this assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999873036538203	WITHOUT_CLASSIFICATION	1.2696346179680506E-5	DESIGN
you may still have other resultsets or update counts left to process here but you can't do it now or the resultset you just got will be closed	WITHOUT_CLASSIFICATION	0.9999996303722669	WITHOUT_CLASSIFICATION	3.6962773317068766E-7	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994412691106829	WITHOUT_CLASSIFICATION	5.587308893171643E-4	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9996769691303174	WITHOUT_CLASSIFICATION	3.230308696826184E-4	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9998332299936852	WITHOUT_CLASSIFICATION	1.6677000631484603E-4	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9976635896814392	WITHOUT_CLASSIFICATION	0.002336410318560735	DESIGN
register the type of the out param - an oracle specific type	WITHOUT_CLASSIFICATION	0.9985448820521254	WITHOUT_CLASSIFICATION	0.0014551179478745832	DESIGN
features which change between 8i 9i and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992381186938656	WITHOUT_CLASSIFICATION	7.618813061344672E-4	DESIGN
features which remain constant across 8i 9i and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999009251238227	WITHOUT_CLASSIFICATION	9.907487617734852E-5	DESIGN
binary %stream character %stream	WITHOUT_CLASSIFICATION	0.9998426112479741	WITHOUT_CLASSIFICATION	1.573887520258665E-4	DESIGN
getdefaultproperties().setproperty(environment.statement_batch_size no_batch)	WITHOUT_CLASSIFICATION	0.9995795657065736	WITHOUT_CLASSIFICATION	4.204342934264473E-4	DESIGN
hibernate impelemnts cast in dialect.java	WITHOUT_CLASSIFICATION	0.9994682160437766	WITHOUT_CLASSIFICATION	5.31783956223526E-4	DESIGN
aggregate functions shouldn't be registered right? registerfunction( "list" new standardsqlfunction("list"hibernate.string) ) stopped on $list	WITHOUT_CLASSIFICATION	0.9939951230887663	WITHOUT_CLASSIFICATION	0.006004876911233801	DESIGN
ddl support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977962142767172	WITHOUT_CLASSIFICATION	0.0022037857232828978	DESIGN
below is for cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9987061101316934	WITHOUT_CLASSIFICATION	0.0012938898683066123	DESIGN
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9987126251375713	WITHOUT_CLASSIFICATION	0.0012873748624287354	DESIGN
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9992346014016241	WITHOUT_CLASSIFICATION	7.653985983758674E-4	DESIGN
the syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9589469490855084	WITHOUT_CLASSIFICATION	0.04105305091449166	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9998085459853474	WITHOUT_CLASSIFICATION	1.9145401465259115E-4	DESIGN
identity support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980744933156982	WITHOUT_CLASSIFICATION	0.001925506684301861	DESIGN
sequence support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991393859450405	WITHOUT_CLASSIFICATION	8.6061405495952E-4	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9694938317897318	WITHOUT_CLASSIFICATION	0.030506168210268178	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9998085459853474	WITHOUT_CLASSIFICATION	1.9145401465259115E-4	DESIGN
the syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.8752035907786929	WITHOUT_CLASSIFICATION	0.124796409221307	DESIGN
completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9975452702192851	WITHOUT_CLASSIFICATION	0.002454729780714959	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979521975568224	WITHOUT_CLASSIFICATION	0.002047802443177698	DESIGN
limit support (ala top) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979299747941441	WITHOUT_CLASSIFICATION	0.00207002520585578	DESIGN
intersystems cache' does not current support "select for update" syntax set your transaction mode to read_committed before using	WITHOUT_CLASSIFICATION	0.9885217390019216	WITHOUT_CLASSIFICATION	0.011478260998078279	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994412691106829	WITHOUT_CLASSIFICATION	5.587308893171643E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994412691106829	WITHOUT_CLASSIFICATION	5.587308893171643E-4	DESIGN
<string>	WITHOUT_CLASSIFICATION	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997843766556662	WITHOUT_CLASSIFICATION	0.0021562334433379553	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977962142767172	WITHOUT_CLASSIFICATION	0.0022037857232828978	DESIGN
the keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.8571815968696918	WITHOUT_CLASSIFICATION	0.14281840313030822	DESIGN
does the limit clause come at the start of the select statement rather than at the end?	WITHOUT_CLASSIFICATION	0.9876350411852077	WITHOUT_CLASSIFICATION	0.012364958814792335	DESIGN
does the limit clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9995232399147856	WITHOUT_CLASSIFICATION	4.7676008521433516E-4	DESIGN
the name of the sql function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9992447083638591	WITHOUT_CLASSIFICATION	7.552916361409171E-4	DESIGN
create an outerjoingenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9984639749666175	WITHOUT_CLASSIFICATION	0.0015360250333824425	DESIGN
the keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9803128878957593	WITHOUT_CLASSIFICATION	0.019687112104240685	DESIGN
registerfunction( "trim" new standardsqlfunction( "trim" hibernate.string ) )	WITHOUT_CLASSIFICATION	0.9994416221026271	WITHOUT_CLASSIFICATION	5.58377897372907E-4	DESIGN
skip the from keyword in params	WITHOUT_CLASSIFICATION	0.9997318503219589	WITHOUT_CLASSIFICATION	2.6814967804114165E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9960778072837705	WITHOUT_CLASSIFICATION	0.003922192716229619	DESIGN
potentialtrimcharacterargindex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9996943102488502	WITHOUT_CLASSIFICATION	3.0568975114976727E-4	DESIGN
sqlfunction implementation	WITHOUT_CLASSIFICATION	0.9997311053726106	WITHOUT_CLASSIFICATION	2.6889462738941835E-4	DESIGN
conceivable that the dialect ctor could throw hibernateexceptions so don't re-wrap	WITHOUT_CLASSIFICATION	0.9989960533459195	WITHOUT_CLASSIFICATION	0.0010039466540805037	DESIGN
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9994373656704877	WITHOUT_CLASSIFICATION	5.626343295123594E-4	DESIGN
register resolvers set via environment property	WITHOUT_CLASSIFICATION	0.9999778514021761	WITHOUT_CLASSIFICATION	2.2148597823911975E-5	DESIGN
kept for backward compatibility until after the 3.1beta5 release of ha	WITHOUT_CLASSIFICATION	0.9999363343688903	WITHOUT_CLASSIFICATION	6.366563110967848E-5	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999151998542324	WITHOUT_CLASSIFICATION	8.480014576755775E-5	DESIGN
the cascadingaction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997771267719965	WITHOUT_CLASSIFICATION	2.228732280035463E-4	DESIGN
the cascadingaction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997250017072967	WITHOUT_CLASSIFICATION	2.749982927033441E-4	DESIGN
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9994657751595517	WITHOUT_CLASSIFICATION	5.342248404482274E-4	DESIGN
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9978526127678518	WITHOUT_CLASSIFICATION	0.0021473872321482734	DESIGN
(lockmode) anything	WITHOUT_CLASSIFICATION	0.9999224294914849	WITHOUT_CLASSIFICATION	7.757050851509448E-5	DESIGN
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997358064808501	WITHOUT_CLASSIFICATION	2.6419351914985046E-4	DESIGN
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997744979240245	WITHOUT_CLASSIFICATION	2.255020759755489E-4	DESIGN
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9995307259766266	WITHOUT_CLASSIFICATION	4.692740233733301E-4	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998798006185747	WITHOUT_CLASSIFICATION	1.2019938142537961E-4	DESIGN
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9976937126532828	WITHOUT_CLASSIFICATION	0.002306287346717244	DESIGN
for deprecated saveorupdatecopy()	WITHOUT_CLASSIFICATION	0.9987097535082774	WITHOUT_CLASSIFICATION	0.0012902464917225842	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9995307259766266	WITHOUT_CLASSIFICATION	4.692740233733301E-4	DESIGN
a proxy cannot be transient and it breaks foreignkeys.istransient	WITHOUT_CLASSIFICATION	0.9994474469641835	WITHOUT_CLASSIFICATION	5.525530358164068E-4	DESIGN
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9994261755042034	WITHOUT_CLASSIFICATION	5.738244957965975E-4	DESIGN
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998948815754793	WITHOUT_CLASSIFICATION	1.051184245206986E-4	DESIGN
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9996234093668928	WITHOUT_CLASSIFICATION	3.7659063310721823E-4	DESIGN
actually the semantics of the next three are really "bag" note that unlike objects collection insertions updates deletions are not really remembered between flushes. we just re-use the same lists for convenience.	WITHOUT_CLASSIFICATION	0.611338331653553	DESIGN	0.38866166834644694	WITHOUT_CLASSIFICATION
add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9993512761809101	WITHOUT_CLASSIFICATION	6.487238190899894E-4	DESIGN
continue loop	WITHOUT_CLASSIFICATION	0.9999594248293205	WITHOUT_CLASSIFICATION	4.05751706794928E-5	DESIGN
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999687403531359	WITHOUT_CLASSIFICATION	3.125964686421746E-5	DESIGN
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999687403531359	WITHOUT_CLASSIFICATION	3.125964686421746E-5	DESIGN
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999501388569455	WITHOUT_CLASSIFICATION	4.98611430545183E-5	DESIGN
the map of batch numbers to entityinsertaction lists	WITHOUT_CLASSIFICATION	0.9999235065967594	WITHOUT_CLASSIFICATION	7.649340324060483E-5	DESIGN
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9996324781522725	WITHOUT_CLASSIFICATION	3.6752184772746683E-4	DESIGN
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999976212130418	WITHOUT_CLASSIFICATION	2.3787869581516556E-6	DESIGN
remove the current element from insertions. it will be added back later.	WITHOUT_CLASSIFICATION	0.9998555851885217	WITHOUT_CLASSIFICATION	1.4441481147822865E-4	DESIGN
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9994564745275002	WITHOUT_CLASSIFICATION	5.435254724997645E-4	DESIGN
there is already an existing batch for this type of entity. check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9991386026899992	WITHOUT_CLASSIFICATION	8.613973100008408E-4	DESIGN
now rebuild the insertions list. there is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9997654933696714	WITHOUT_CLASSIFICATION	2.3450663032867957E-4	DESIGN
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9998496779132136	WITHOUT_CLASSIFICATION	1.5032208678655382E-4	DESIGN
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999786113011747	WITHOUT_CLASSIFICATION	2.1388698825203203E-5	DESIGN
find the batch number associated with the current association if any.	WITHOUT_CLASSIFICATION	0.9999927550526622	WITHOUT_CLASSIFICATION	7.244947337723421E-6	DESIGN
create a new batch for this type. the batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9996629702632011	WITHOUT_CLASSIFICATION	3.37029736798925E-4	DESIGN
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9998166653020785	WITHOUT_CLASSIFICATION	1.8333469792156682E-4	DESIGN
since this entity will now be processed in the latest possible batch we can be assured that it will come after all other associations there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9985038322825308	WITHOUT_CLASSIFICATION	0.0014961677174692221	DESIGN
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.999459474511182	WITHOUT_CLASSIFICATION	5.405254888181007E-4	DESIGN
not really necessary but good for consistency	WITHOUT_CLASSIFICATION	0.9953890151632102	WITHOUT_CLASSIFICATION	0.004610984836789715	DESIGN
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9994592201486824	WITHOUT_CLASSIFICATION	5.407798513176714E-4	DESIGN
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9935416728697365	WITHOUT_CLASSIFICATION	0.006458327130263524	DESIGN
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9987344504124402	WITHOUT_CLASSIFICATION	0.00126554958755977	DESIGN
loaded entity instances by entityuniquekey	WITHOUT_CLASSIFICATION	0.9999638515413208	WITHOUT_CLASSIFICATION	3.61484586790995E-5	DESIGN
identity map of entityentry instances by the entity instance	WITHOUT_CLASSIFICATION	0.9999789869246385	WITHOUT_CLASSIFICATION	2.1013075361491153E-5	DESIGN
entity proxies by entitykey	WITHOUT_CLASSIFICATION	0.9997795084433364	WITHOUT_CLASSIFICATION	2.204915566636565E-4	DESIGN
snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999236210924471	WITHOUT_CLASSIFICATION	7.637890755277174E-5	DESIGN
identity map of array holder arrayholder instances by the array instance	WITHOUT_CLASSIFICATION	0.999986284635068	WITHOUT_CLASSIFICATION	1.3715364932002362E-5	DESIGN
collection wrappers by the collectionkey key=collectionkey value=persistentcollection	WITHOUT_CLASSIFICATION	0.9997462114217449	WITHOUT_CLASSIFICATION	2.5378857825506494E-4	DESIGN
set of entitykeys of deleted objects	WITHOUT_CLASSIFICATION	0.999784172216659	WITHOUT_CLASSIFICATION	2.1582778334103687E-4	DESIGN
properties that we have tried to load and not found in the database	WITHOUT_CLASSIFICATION	0.9991381218117594	WITHOUT_CLASSIFICATION	8.618781882405062E-4	DESIGN
a list of collection wrappers that were instantiating during result set processing that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9985178763931157	WITHOUT_CLASSIFICATION	0.001482123606884225	DESIGN
a container for collections we load up when the owning entity is not yet loaded for now this is purely transient!	WITHOUT_CLASSIFICATION	0.9974906313396772	WITHOUT_CLASSIFICATION	0.00250936866032277	DESIGN
downgrade locks	WITHOUT_CLASSIFICATION	0.9998140798595851	WITHOUT_CLASSIFICATION	1.8592014041480403E-4	DESIGN
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999271957261029	WITHOUT_CLASSIFICATION	7.280427389717204E-5	DESIGN
unwrap the object	WITHOUT_CLASSIFICATION	0.9999735217376644	WITHOUT_CLASSIFICATION	2.6478262335561876E-5	DESIGN
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999725082076565	WITHOUT_CLASSIFICATION	2.7491792343486112E-5	DESIGN
return the proxied object	WITHOUT_CLASSIFICATION	0.9998625408983929	WITHOUT_CLASSIFICATION	1.3745910160710897E-4	DESIGN
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999943651371336	WITHOUT_CLASSIFICATION	5.634862866441108E-6	DESIGN
early exit	WITHOUT_CLASSIFICATION	0.999638873378648	WITHOUT_CLASSIFICATION	3.611266213520033E-4	DESIGN
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9955117208512264	WITHOUT_CLASSIFICATION	0.004488279148773642	DESIGN
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9736072062873566	WITHOUT_CLASSIFICATION	0.026392793712643463	DESIGN
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.8471030362154907	WITHOUT_CLASSIFICATION	0.15289696378450932	DESIGN
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999724722128241	WITHOUT_CLASSIFICATION	2.7527787175917148E-5	DESIGN
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9943248379128938	WITHOUT_CLASSIFICATION	0.00567516208710613	DESIGN
public boolean isnonexistant(entitykey key) {return nonexistantentitykeys.contains(key)}	WITHOUT_CLASSIFICATION	0.999835475394066	WITHOUT_CLASSIFICATION	1.645246059339477E-4	DESIGN
public boolean isnonexistant(entityuniquekey key) {return nonexistententityuniquekeys.contains(key)}	WITHOUT_CLASSIFICATION	0.999835475394066	WITHOUT_CLASSIFICATION	1.645246059339477E-4	DESIGN
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9985413401589825	WITHOUT_CLASSIFICATION	0.0014586598410174423	DESIGN
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9915324093735524	WITHOUT_CLASSIFICATION	0.008467590626447708	DESIGN
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9990643656549615	WITHOUT_CLASSIFICATION	9.356343450384602E-4	DESIGN
otherwise the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999965453349892	WITHOUT_CLASSIFICATION	3.454665010784053E-6	DESIGN
adds remove as a sort-of alias for delete	WITHOUT_CLASSIFICATION	0.9988426737710627	WITHOUT_CLASSIFICATION	0.0011573262289372246	DESIGN
bad cast	WITHOUT_CLASSIFICATION	0.9992046905140095	WITHOUT_CLASSIFICATION	7.953094859905857E-4	DESIGN
return lhspersister.getsubclasspropertycolumnnames(property)	WITHOUT_CLASSIFICATION	0.9996255900372856	WITHOUT_CLASSIFICATION	3.7440996271444015E-4	DESIGN
property-refs for associations defined on a component are not supported so no need to slice	WITHOUT_CLASSIFICATION	0.9970192822813834	WITHOUT_CLASSIFICATION	0.002980717718616576	DESIGN
if there is no property-ref assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999541128876056	WITHOUT_CLASSIFICATION	4.588711239441432E-5	DESIGN
handle a property-ref	WITHOUT_CLASSIFICATION	0.9957820542605597	WITHOUT_CLASSIFICATION	0.004217945739440261	DESIGN
nativesqlqueryreturn	WITHOUT_CLASSIFICATION	0.9998085459853474	WITHOUT_CLASSIFICATION	1.9145401465259115E-4	DESIGN
final boolean forcecacherefresh	WITHOUT_CLASSIFICATION	0.9998930169376076	WITHOUT_CLASSIFICATION	1.0698306239246273E-4	DESIGN
why is all others non final ?	WITHOUT_CLASSIFICATION	0.6235980566484852	WITHOUT_CLASSIFICATION	0.3764019433515149	DESIGN
this.forcecacherefresh = forcecacherefresh	WITHOUT_CLASSIFICATION	0.9998831097803876	WITHOUT_CLASSIFICATION	1.1689021961233574E-4	DESIGN
hella important optimization!!!	WITHOUT_CLASSIFICATION	0.9996704369283597	WITHOUT_CLASSIFICATION	3.295630716402338E-4	DESIGN
return that.type.equals(type) && equalshelper.equals(that.value value)	WITHOUT_CLASSIFICATION	0.9995905445561124	WITHOUT_CLASSIFICATION	4.0945544388758747E-4	DESIGN
must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.998695091587089	WITHOUT_CLASSIFICATION	0.0013049084129110099	DESIGN
take a snapshot	WITHOUT_CLASSIFICATION	0.9989821030773035	WITHOUT_CLASSIFICATION	0.0010178969226964302	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.98693317633636	WITHOUT_CLASSIFICATION	0.01306682366364002	DESIGN
the owning entity may have been deleted and its identifier unset due to identifier-rollback in which case try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9990730930563372	WITHOUT_CLASSIFICATION	9.26906943662869E-4	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9998473414255076	WITHOUT_CLASSIFICATION	1.526585744924411E-4	DESIGN
we've been here before	WITHOUT_CLASSIFICATION	0.9999403459797082	WITHOUT_CLASSIFICATION	5.9654020291845476E-5	DESIGN
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999514936689313	WITHOUT_CLASSIFICATION	4.850633106859785E-5	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9998473414255076	WITHOUT_CLASSIFICATION	1.526585744924411E-4	DESIGN
if either its role changed	WITHOUT_CLASSIFICATION	0.9998199044873732	WITHOUT_CLASSIFICATION	1.8009551262678286E-4	DESIGN
or its key changed	WITHOUT_CLASSIFICATION	0.9999796977934112	WITHOUT_CLASSIFICATION	2.0302206588685547E-5	DESIGN
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9990165598792597	WITHOUT_CLASSIFICATION	9.834401207402949E-4	DESIGN
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9928529046839617	WITHOUT_CLASSIFICATION	0.007147095316038207	DESIGN
force initialize!	WITHOUT_CLASSIFICATION	0.9998050232197961	WITHOUT_CLASSIFICATION	1.9497678020391466E-4	DESIGN
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999551169695541	WITHOUT_CLASSIFICATION	4.488303044595274E-5	DESIGN
attributes maintained between flush cycles	WITHOUT_CLASSIFICATION	0.9991648519505802	WITHOUT_CLASSIFICATION	8.351480494198151E-4	DESIGN
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9997790312268527	WITHOUT_CLASSIFICATION	2.2096877314730162E-4	DESIGN
allow the collectionsnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9991598768936537	WITHOUT_CLASSIFICATION	8.40123106346269E-4	DESIGN
attributes used only during flush cycle	WITHOUT_CLASSIFICATION	0.9788609494810887	WITHOUT_CLASSIFICATION	0.02113905051891123	DESIGN
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9997090901643808	WITHOUT_CLASSIFICATION	2.9090983561912403E-4	DESIGN
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9997726608807614	WITHOUT_CLASSIFICATION	2.2733911923854215E-4	DESIGN
during flush we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9979707796780488	WITHOUT_CLASSIFICATION	0.0020292203219511988	DESIGN
if we instantiate a collection during the flush() process we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9998578669267497	WITHOUT_CLASSIFICATION	1.4213307325033238E-4	DESIGN
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9995991888466739	WITHOUT_CLASSIFICATION	4.0081115332616496E-4	DESIGN
a newly wrapped collection is not dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.674545943819718	WITHOUT_CLASSIFICATION	0.32545405618028206	DESIGN
collection.cleardirty()	WITHOUT_CLASSIFICATION	0.9995848020766234	WITHOUT_CLASSIFICATION	4.1519792337664973E-4	DESIGN
collection.cleardirty()	WITHOUT_CLASSIFICATION	0.9995848020766234	WITHOUT_CLASSIFICATION	4.1519792337664973E-4	DESIGN
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999838823274713	WITHOUT_CLASSIFICATION	1.6117672528700978E-5	DESIGN
optimization	WITHOUT_CLASSIFICATION	0.9999357782574231	WITHOUT_CLASSIFICATION	6.422174257692026E-5	DESIGN
optimization optimization	WITHOUT_CLASSIFICATION	0.999860704408048	WITHOUT_CLASSIFICATION	1.392955919520339E-4	DESIGN
re-snapshot	WITHOUT_CLASSIFICATION	0.9998085459853474	WITHOUT_CLASSIFICATION	1.9145401465259115E-4	DESIGN
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9987602940280652	WITHOUT_CLASSIFICATION	0.0012397059719347471	DESIGN
note this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9914637772574727	WITHOUT_CLASSIFICATION	0.008536222742527319	DESIGN
memory optimization	WITHOUT_CLASSIFICATION	0.9999665115226134	WITHOUT_CLASSIFICATION	3.348847738663233E-5	DESIGN
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9998106763883424	WITHOUT_CLASSIFICATION	1.8932361165757737E-4	DESIGN
copied from session	WITHOUT_CLASSIFICATION	0.9959477610686943	WITHOUT_CLASSIFICATION	0.004052238931305783	DESIGN
this should not happen since the dtd prevents it	WITHOUT_CLASSIFICATION	0.9977079518364419	WITHOUT_CLASSIFICATION	0.0022920481635580058	DESIGN
joinprocessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the sql ast. 'hasfiltercondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9963838754141183	WITHOUT_CLASSIFICATION	0.003616124585881641	DESIGN
the current join represents the join between a many-to-many association table and its "target" table. here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.999725083658276	WITHOUT_CLASSIFICATION	2.7491634172400776E-4	DESIGN
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9984883779435638	WITHOUT_CLASSIFICATION	0.001511622056436175	DESIGN
values is not null and is checkable we'll look deeper	WITHOUT_CLASSIFICATION	0.9996112907477009	WITHOUT_CLASSIFICATION	3.887092522991076E-4	DESIGN
for non null args check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9975219962395437	WITHOUT_CLASSIFICATION	0.002478003760456255	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999151998542324	WITHOUT_CLASSIFICATION	8.480014576755775E-5	DESIGN
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9994886440852699	WITHOUT_CLASSIFICATION	5.113559147301006E-4	DESIGN
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9995026815578593	WITHOUT_CLASSIFICATION	4.973184421408581E-4	DESIGN
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9921322055713532	WITHOUT_CLASSIFICATION	0.00786779442864675	DESIGN
do the test	WITHOUT_CLASSIFICATION	0.999987752992987	WITHOUT_CLASSIFICATION	1.2247007013083017E-5	DESIGN
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9998991321702042	WITHOUT_CLASSIFICATION	1.0086782979577568E-4	DESIGN
unwrap it	WITHOUT_CLASSIFICATION	0.9997058329349804	WITHOUT_CLASSIFICATION	2.94167065019565E-4	DESIGN
see if the entity is already bound to this session if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9939216044721845	WITHOUT_CLASSIFICATION	0.006078395527815528	DESIGN
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9998907264022049	WITHOUT_CLASSIFICATION	1.0927359779517344E-4	DESIGN
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9987948362443033	WITHOUT_CLASSIFICATION	0.0012051637556966426	DESIGN
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9966356035532301	WITHOUT_CLASSIFICATION	0.0033643964467700133	DESIGN
we use the assumed value if there is one to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999550082188086	WITHOUT_CLASSIFICATION	4.4991781191329E-5	DESIGN
hit the database after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9967350665369855	WITHOUT_CLASSIFICATION	0.0032649334630145137	DESIGN
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context so make some deeper checks	WITHOUT_CLASSIFICATION	0.9945061376652188	WITHOUT_CLASSIFICATION	0.005493862334781175	DESIGN
int count = 0	WITHOUT_CLASSIFICATION	0.9999783346821747	WITHOUT_CLASSIFICATION	2.1665317825363683E-5	DESIGN
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999775838331705	WITHOUT_CLASSIFICATION	2.241616682957179E-5	DESIGN
checkforend = false	WITHOUT_CLASSIFICATION	0.9999717752501615	WITHOUT_CLASSIFICATION	2.8224749838611327E-5	DESIGN
count++	WITHOUT_CLASSIFICATION	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
end of array start filling again from start	WITHOUT_CLASSIFICATION	0.9998158337305565	WITHOUT_CLASSIFICATION	1.8416626944346194E-4	DESIGN
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9990541117368906	WITHOUT_CLASSIFICATION	9.458882631094324E-4	DESIGN
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999804514117611	WITHOUT_CLASSIFICATION	1.9548588238878594E-5	DESIGN
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999352558117283	WITHOUT_CLASSIFICATION	6.474418827173017E-5	DESIGN
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9997576803047067	WITHOUT_CLASSIFICATION	2.423196952933384E-4	DESIGN
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999899869528335	WITHOUT_CLASSIFICATION	1.0013047166595625E-5	DESIGN
ignore this row of results! note the early exit	WITHOUT_CLASSIFICATION	0.999942880492586	WITHOUT_CLASSIFICATION	5.711950741397709E-5	DESIGN
initialize this collection	WITHOUT_CLASSIFICATION	0.9934300315768748	WITHOUT_CLASSIFICATION	0.0065699684231251155	DESIGN
create one	WITHOUT_CLASSIFICATION	0.9992889989559426	WITHOUT_CLASSIFICATION	7.110010440573879E-4	DESIGN
warning can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9996319714696512	WITHOUT_CLASSIFICATION	3.680285303488891E-4	DESIGN
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9998759901496309	WITHOUT_CLASSIFICATION	1.2400985036907682E-4	DESIGN
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9971460895720732	WITHOUT_CLASSIFICATION	0.0028539104279268015	DESIGN
some filters affecting the collection are enabled on the session so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9932389413066183	WITHOUT_CLASSIFICATION	0.006761058693381775	DESIGN
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998689071528283	WITHOUT_CLASSIFICATION	0.001310928471717092	DESIGN
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996207574331852	WITHOUT_CLASSIFICATION	3.792425668147622E-4	DESIGN
collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987753021560781	WITHOUT_CLASSIFICATION	0.0012246978439219118	DESIGN
simple cache of param metadata based on query string. ideally the original "user-supplied query" string should be used to retreive this metadata (i.e. not the para-list-expanded query string) to avoid unnecessary cache entries. used solely for caching param metadata for native-sql queries see getsqlparametermetadata() for a discussion as to why	WITHOUT_CLASSIFICATION	0.889343554032862	DESIGN	0.11065644596713797	WITHOUT_CLASSIFICATION
the cache of the actual plans	WITHOUT_CLASSIFICATION	0.999970258579723	WITHOUT_CLASSIFICATION	2.9741420276960107E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9960778072837705	WITHOUT_CLASSIFICATION	0.003922192716229619	DESIGN
package	WITHOUT_CLASSIFICATION	0.9960778072837705	WITHOUT_CLASSIFICATION	0.003922192716229619	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.99997009984181	WITHOUT_CLASSIFICATION	2.990015819009051E-5	DESIGN
for native-sql queries the param metadata is determined outside any relation to a query plan because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.5758863734026068	DESIGN	0.4241136265973931	WITHOUT_CLASSIFICATION
don't care	WITHOUT_CLASSIFICATION	0.9965156903979193	WITHOUT_CLASSIFICATION	0.0034843096020806246	DESIGN
recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986773933578036	WITHOUT_CLASSIFICATION	0.0013226066421963463	DESIGN
don't care	WITHOUT_CLASSIFICATION	0.9965156903979193	WITHOUT_CLASSIFICATION	0.0034843096020806246	DESIGN
note firstrow is zero-based	WITHOUT_CLASSIFICATION	0.9996757315065393	WITHOUT_CLASSIFICATION	3.2426849346067315E-4	DESIGN
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9998419581813649	WITHOUT_CLASSIFICATION	1.5804181863505665E-4	DESIGN
named parameter	WITHOUT_CLASSIFICATION	0.9995793657928939	WITHOUT_CLASSIFICATION	4.20634207106087E-4	DESIGN
could be either an ordinal or jpa-positional parameter	WITHOUT_CLASSIFICATION	0.9978764022497891	WITHOUT_CLASSIFICATION	0.0021235977502108098	DESIGN
a peek ahead showed this as an jpa-positional parameter	WITHOUT_CLASSIFICATION	0.9978029721642896	WITHOUT_CLASSIFICATION	0.002197027835710425	DESIGN
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9992719350334792	WITHOUT_CLASSIFICATION	7.280649665206402E-4	DESIGN
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9998290070598184	WITHOUT_CLASSIFICATION	1.7099294018172736E-4	DESIGN
perform the actual work	WITHOUT_CLASSIFICATION	0.9998431976123646	WITHOUT_CLASSIFICATION	1.5680238763528392E-4	DESIGN
if everything went ok commit the transaction and close the obtained connection handle	WITHOUT_CLASSIFICATION	0.9999935471991661	WITHOUT_CLASSIFICATION	6.452800833901196E-6	DESIGN
at some point the processing went bad so we need to 1) make sure the connection handle gets released 2) try to cleanup the jta context as much as possible	WITHOUT_CLASSIFICATION	0.9985662566816904	WITHOUT_CLASSIFICATION	0.0014337433183096017	DESIGN
finally handle the exception	WITHOUT_CLASSIFICATION	0.9985168871931571	WITHOUT_CLASSIFICATION	0.001483112806842841	DESIGN
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9847788746303446	WITHOUT_CLASSIFICATION	0.015221125369655336	DESIGN
saveorupdatecopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9993771086996349	WITHOUT_CLASSIFICATION	6.228913003651056E-4	DESIGN
collectionpersister should not be null but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.8950354074376412	WITHOUT_CLASSIFICATION	0.10496459256235874	DESIGN
otherwise a null or brand new collection this will also (inefficiently) handle arrays which have no snapshot so we can't do any better processarrayornewcollection(collection type)	WITHOUT_CLASSIFICATION	0.9935303963552039	WITHOUT_CLASSIFICATION	0.006469603644796009	DESIGN
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9925803152937206	WITHOUT_CLASSIFICATION	0.007419684706279304	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.999635857863973	WITHOUT_CLASSIFICATION	3.641421360269457E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.999635857863973	WITHOUT_CLASSIFICATION	3.641421360269457E-4	DESIGN
force a substitution!	WITHOUT_CLASSIFICATION	0.9985879523423177	WITHOUT_CLASSIFICATION	0.0014120476576823249	DESIGN
the user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9956766382479539	WITHOUT_CLASSIFICATION	0.0043233617520460725	DESIGN
the database now holds a lock + the object is flushed from the cache so release the soft lock	WITHOUT_CLASSIFICATION	0.9999016302389354	WITHOUT_CLASSIFICATION	9.83697610645206E-5	DESIGN
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999987190691485	WITHOUT_CLASSIFICATION	1.2809308515113196E-6	DESIGN
search for collections by reachability updating their role. we don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9985038750553991	WITHOUT_CLASSIFICATION	0.0014961249446009944	DESIGN
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9988936612285698	WITHOUT_CLASSIFICATION	0.0011063387714302223	DESIGN
note we need to do the wrap here even if its not "dirty" because collections need wrapping but changes to _them_ don't dirty the container. also for versioned data we need to wrap before calling searchfordirtycollections	WITHOUT_CLASSIFICATION	0.9681314172318907	WITHOUT_CLASSIFICATION	0.031868582768109215	DESIGN
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9985764670754972	WITHOUT_CLASSIFICATION	0.0014235329245028813	DESIGN
grab its current state	WITHOUT_CLASSIFICATION	0.9998730299891615	WITHOUT_CLASSIFICATION	1.2697001083845677E-4	DESIGN
schedule the update note that we intentionally do _not_ pass in currentpersistentstate!	WITHOUT_CLASSIFICATION	0.9999923419927392	WITHOUT_CLASSIFICATION	7.658007260766898E-6	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999267272687249	WITHOUT_CLASSIFICATION	7.327273127506112E-5	DESIGN
give the interceptor a chance to process property values if the properties were modified by the interceptor we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999999604940717	WITHOUT_CLASSIFICATION	3.9505928323205525E-8	DESIGN
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9997312154972309	WITHOUT_CLASSIFICATION	2.6878450276909653E-4	DESIGN
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9997190107060054	WITHOUT_CLASSIFICATION	2.8098929399450565E-4	DESIGN
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999734706472756	WITHOUT_CLASSIFICATION	2.6529352724458693E-5	DESIGN
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9925094367806044	WITHOUT_CLASSIFICATION	0.007490563219395647	DESIGN
give the interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999860708263584	WITHOUT_CLASSIFICATION	1.3929173641598494E-5	DESIGN
now we might need to recalculate the dirtyproperties array	WITHOUT_CLASSIFICATION	0.9976287338961339	WITHOUT_CLASSIFICATION	0.0023712661038659934	DESIGN
use the current version	WITHOUT_CLASSIFICATION	0.9997694001804385	WITHOUT_CLASSIFICATION	2.3059981956161725E-4	DESIGN
interceptor returned null so do the dirtycheck ourself if possible	WITHOUT_CLASSIFICATION	0.9999620557902994	WITHOUT_CLASSIFICATION	3.79442097004981E-5	DESIGN
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999664303115902	WITHOUT_CLASSIFICATION	3.3569688409895424E-5	DESIGN
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9998085930204539	WITHOUT_CLASSIFICATION	1.9140697954619042E-4	DESIGN
dirty check against the database snapshot if possible/necessary	WITHOUT_CLASSIFICATION	0.9999242712188877	WITHOUT_CLASSIFICATION	7.572878111228538E-5	DESIGN
the interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9995430379762532	WITHOUT_CLASSIFICATION	4.569620237467792E-4	DESIGN
even process null collections	WITHOUT_CLASSIFICATION	0.9998607054465802	WITHOUT_CLASSIFICATION	1.3929455341974928E-4	DESIGN
get the id from the object	WITHOUT_CLASSIFICATION	0.9997961501371297	WITHOUT_CLASSIFICATION	2.0384986287037173E-4	DESIGN
always do an insert and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9997977651030657	WITHOUT_CLASSIFICATION	2.0223489693423923E-4	DESIGN
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9978465902354838	WITHOUT_CLASSIFICATION	0.002153409764516109	DESIGN
/ hhh-2378	WITHOUT_CLASSIFICATION	0.9996671979949383	WITHOUT_CLASSIFICATION	3.3280200506170273E-4	DESIGN
will result in a sql update	WITHOUT_CLASSIFICATION	0.9999788304396258	WITHOUT_CLASSIFICATION	2.1169560374201455E-5	DESIGN
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999436044402591	WITHOUT_CLASSIFICATION	5.6395559740981794E-5	DESIGN
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999065880767721	WITHOUT_CLASSIFICATION	9.341192322786172E-5	DESIGN
refresh() does not pass an entityname	WITHOUT_CLASSIFICATION	0.9995338297193469	WITHOUT_CLASSIFICATION	4.661702806530705E-4	DESIGN
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9948982440741813	WITHOUT_CLASSIFICATION	0.005101755925818705	DESIGN
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9985246430978313	WITHOUT_CLASSIFICATION	0.0014753569021687572	DESIGN
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999668588833021	WITHOUT_CLASSIFICATION	3.314111669800454E-5	DESIGN
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999270450448411	WITHOUT_CLASSIFICATION	7.295495515885694E-5	DESIGN
this object was already loaded	WITHOUT_CLASSIFICATION	0.9994605771440185	WITHOUT_CLASSIFICATION	5.394228559815051E-4	DESIGN
entity was found in second-level cache	WITHOUT_CLASSIFICATION	0.9995417862021152	WITHOUT_CLASSIFICATION	4.582137978848463E-4	DESIGN
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.998996896944874	WITHOUT_CLASSIFICATION	0.0010031030551260161	DESIGN
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.999981389970831	WITHOUT_CLASSIFICATION	1.8610029169015747E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994822937104669	WITHOUT_CLASSIFICATION	5.177062895329938E-4	DESIGN
some statistics	WITHOUT_CLASSIFICATION	0.9996388956265979	WITHOUT_CLASSIFICATION	3.6110437340208004E-4	DESIGN
safe from concurrent modification because of how entrylist() is implemented on identitymap	WITHOUT_CLASSIFICATION	0.9997127876000337	WITHOUT_CLASSIFICATION	2.8721239996628797E-4	DESIGN
initialize dirty flags for arrays + collections with composite elements and reset reached doupdate etc.	WITHOUT_CLASSIFICATION	0.9999415800992264	WITHOUT_CLASSIFICATION	5.841990077359554E-5	DESIGN
among other things updatereachables() will recursively load all collections that are moving roles. this might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.994152824137063	WITHOUT_CLASSIFICATION	0.005847175862937114	DESIGN
so this needs to be safe from concurrent modification problems. it is safe because of how identitymap implements entryset()	WITHOUT_CLASSIFICATION	0.9851101277508408	WITHOUT_CLASSIFICATION	0.014889872249159242	DESIGN
update the status of the object and if necessary schedule an update	WITHOUT_CLASSIFICATION	0.9999859136156442	WITHOUT_CLASSIFICATION	1.4086384355787766E-5	DESIGN
schedule updates to collections	WITHOUT_CLASSIFICATION	0.9996268189906675	WITHOUT_CLASSIFICATION	3.7318100933251045E-4	DESIGN
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9974350964195228	WITHOUT_CLASSIFICATION	0.00256490358047723	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994822937104669	WITHOUT_CLASSIFICATION	5.177062895329938E-4	DESIGN
the database has changed now so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999542890868759	WITHOUT_CLASSIFICATION	4.571091312420858E-5	DESIGN
if the collection is dereferenced remove from the session cache iter.remove() does not work since the entryset is not backed by the set	WITHOUT_CLASSIFICATION	0.9986649822992438	WITHOUT_CLASSIFICATION	0.0013350177007561634	DESIGN
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9998483628362556	WITHOUT_CLASSIFICATION	1.5163716374438395E-4	DESIGN
get a snapshot	WITHOUT_CLASSIFICATION	0.9995569545299562	WITHOUT_CLASSIFICATION	4.4304547004386406E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9998091452464233	WITHOUT_CLASSIFICATION	1.9085475357671393E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9998091452464233	WITHOUT_CLASSIFICATION	1.9085475357671393E-4	DESIGN
key is an entity involved with the operation performed by the listener value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.999999286950633	WITHOUT_CLASSIFICATION	7.130493670623393E-7	DESIGN
early exit!!!	WITHOUT_CLASSIFICATION	0.999835915497579	WITHOUT_CLASSIFICATION	1.6408450242095846E-4	DESIGN
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.999473479135546	WITHOUT_CLASSIFICATION	5.265208644540354E-4	DESIGN
before any callbacks etc so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9996745838097842	WITHOUT_CLASSIFICATION	3.254161902158487E-4	DESIGN
ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999126597835488	WITHOUT_CLASSIFICATION	8.734021645113486E-5	DESIGN
typefactory.deepcopy( currentstate proptypes persister.getpropertyupdateability() deletedstate session )	WITHOUT_CLASSIFICATION	0.9991912925043533	WITHOUT_CLASSIFICATION	8.087074956466095E-4	DESIGN
cascade-delete to collections before the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9998825845682036	WITHOUT_CLASSIFICATION	1.1741543179635072E-4	DESIGN
cascade-delete to many-to-one after the parent was deleted	WITHOUT_CLASSIFICATION	0.9997790872819303	WITHOUT_CLASSIFICATION	2.2091271806963934E-4	DESIGN
if it is an initialized proxy let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9906511110168342	WITHOUT_CLASSIFICATION	0.009348888983165776	DESIGN
assign the requested id to the proxy before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999514541523709	WITHOUT_CLASSIFICATION	4.8545847629218954E-5	DESIGN
an uninitialized proxy noop don't even need to return an id since it is never a save()	WITHOUT_CLASSIFICATION	0.9998059679712504	WITHOUT_CLASSIFICATION	1.9403202874958213E-4	DESIGN
initialize properties of the event	WITHOUT_CLASSIFICATION	0.9997944221918212	WITHOUT_CLASSIFICATION	2.0557780817873775E-4	DESIGN
return the id in the event object	WITHOUT_CLASSIFICATION	0.9997890025072003	WITHOUT_CLASSIFICATION	2.1099749279969774E-4	DESIGN
transient or deleted	WITHOUT_CLASSIFICATION	0.9998929571025595	WITHOUT_CLASSIFICATION	1.0704289744051048E-4	DESIGN
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.999348133505955	WITHOUT_CLASSIFICATION	6.518664940450631E-4	DESIGN
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.5156834688858131	WITHOUT_CLASSIFICATION	0.4843165311141871	DESIGN
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9991842937626411	WITHOUT_CLASSIFICATION	8.157062373589674E-4	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.989909074793441	WITHOUT_CLASSIFICATION	0.010090925206558977	DESIGN
cachedstate	WITHOUT_CLASSIFICATION	0.9998085459853474	WITHOUT_CLASSIFICATION	1.9145401465259115E-4	DESIGN
assume true since we don't really know and it doesn't matter	WITHOUT_CLASSIFICATION	0.999950806666627	WITHOUT_CLASSIFICATION	4.919333337312928E-5	DESIGN
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9986134341809332	WITHOUT_CLASSIFICATION	0.0013865658190668315	DESIGN
if the collection belonged to a different entity clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9995621359174165	WITHOUT_CLASSIFICATION	4.3786408258352687E-4	DESIGN
log.debug( "calling onload()" )	WITHOUT_CLASSIFICATION	0.9991451090639453	WITHOUT_CLASSIFICATION	8.548909360547195E-4	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9998505138422801	WITHOUT_CLASSIFICATION	1.4948615771986608E-4	DESIGN
note performexecutions() clears all collectionxxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9988229821423255	WITHOUT_CLASSIFICATION	0.001177017857674619	DESIGN
if no array holder we found an unwrappered array (this can't occur because we now always call wrap() before getting to here) return (ah==null) ? true searchfordirtycollections(ah type)	WITHOUT_CLASSIFICATION	0.999976229592825	WITHOUT_CLASSIFICATION	2.3770407174980393E-5	DESIGN
if not wrappered yet its dirty (this can't occur because we now always call wrap() before getting to here) return ( ! (obj instanceof persistentcollection) ) ? true searchfordirtycollections( (persistentcollection) obj type )	WITHOUT_CLASSIFICATION	0.9992075966363038	WITHOUT_CLASSIFICATION	7.924033636961893E-4	DESIGN
we need to check even if it was not initialized because of delayed adds!	WITHOUT_CLASSIFICATION	0.9893297217024	WITHOUT_CLASSIFICATION	0.01067027829759999	DESIGN
note early exit!	WITHOUT_CLASSIFICATION	0.9998966820466907	WITHOUT_CLASSIFICATION	1.0331795330933977E-4	DESIGN
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9933306095530933	WITHOUT_CLASSIFICATION	0.006669390446906721	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9998505138422801	WITHOUT_CLASSIFICATION	1.4948615771986608E-4	DESIGN
check the persistence context for an entry relating to this entity to be merged	WITHOUT_CLASSIFICATION	0.981088317422906	WITHOUT_CLASSIFICATION	0.018911682577093927	DESIGN
we have specialized case of a detached entity from the perspective of the merge operation. specifically we have an incoming entity instance which has a corresponding entry in the current persistence context but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.999398712422998	WITHOUT_CLASSIFICATION	6.012875770019141E-4	DESIGN
deleted	WITHOUT_CLASSIFICATION	0.9994502514099034	WITHOUT_CLASSIFICATION	5.497485900965846E-4	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9998809633594647	WITHOUT_CLASSIFICATION	1.1903664053519966E-4	DESIGN
cascade first so that all unsaved objects get their copy created before we actually copy cascadeonmerge(event persister entity copycache cascades.cascade_before_merge)	WITHOUT_CLASSIFICATION	0.9999931918383833	WITHOUT_CLASSIFICATION	6.808161616598545E-6	DESIGN
this bit is only really absolutely necessary for handling requestedid but is also good if we merge multiple object graphs since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9986900642995095	WITHOUT_CLASSIFICATION	0.0013099357004904978	DESIGN
continue we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.8993590729578674	WITHOUT_CLASSIFICATION	0.10064092704213266	DESIGN
cascade first so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999975353505083	WITHOUT_CLASSIFICATION	2.464649491819156E-6	DESIGN
check that entity id = requestedid	WITHOUT_CLASSIFICATION	0.9993905023598165	WITHOUT_CLASSIFICATION	6.094976401834199E-4	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9998809633594647	WITHOUT_CLASSIFICATION	1.1903664053519966E-4	DESIGN
we got here because we assumed that an instance with an assigned id was detached when it was really persistent	WITHOUT_CLASSIFICATION	0.9999804576644892	WITHOUT_CLASSIFICATION	1.9542335510863118E-5	DESIGN
cascade first so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999975353505083	WITHOUT_CLASSIFICATION	2.464649491819156E-6	DESIGN
copyvalues works by reflection so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999222807545526	WITHOUT_CLASSIFICATION	7.771924544740644E-5	DESIGN
early exit	WITHOUT_CLASSIFICATION	0.999638873378648	WITHOUT_CLASSIFICATION	3.611266213520033E-4	DESIGN
source.getbatcher().executebatch() found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9998271893285217	WITHOUT_CLASSIFICATION	1.7281067147832254E-4	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999267272687249	WITHOUT_CLASSIFICATION	7.327273127506112E-5	DESIGN
now done in entityidentityinsertaction persister.setidentifier( entity id source.getentitymode() )	WITHOUT_CLASSIFICATION	0.99805417106543	WITHOUT_CLASSIFICATION	0.0019458289345699736	DESIGN
source.getpersistencecontext().removenonexist( new entitykey( id persister source.getentitymode() ) )	WITHOUT_CLASSIFICATION	0.9981113482224041	WITHOUT_CLASSIFICATION	0.001888651777595814	DESIGN
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999628056345958	WITHOUT_CLASSIFICATION	3.719436540410653E-5	DESIGN
cascade-save to many-to-one before the parent is saved	WITHOUT_CLASSIFICATION	0.9992026681009706	WITHOUT_CLASSIFICATION	7.973318990294998E-4	DESIGN
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999997892841619	WITHOUT_CLASSIFICATION	2.107158381363697E-7	DESIGN
the object is persistent	WITHOUT_CLASSIFICATION	0.9998232369523236	WITHOUT_CLASSIFICATION	1.7676304767638273E-4	DESIGN
the entity is associated with the session so check its status	WITHOUT_CLASSIFICATION	0.9998550585136942	WITHOUT_CLASSIFICATION	1.4494148630595887E-4	DESIGN
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9998640001601481	WITHOUT_CLASSIFICATION	1.3599983985189824E-4	DESIGN
ie. e.status==deleted	WITHOUT_CLASSIFICATION	0.9995848020766234	WITHOUT_CLASSIFICATION	4.1519792337664973E-4	DESIGN
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999363527156918	WITHOUT_CLASSIFICATION	6.364728430815565E-5	DESIGN
note early exit!	WITHOUT_CLASSIFICATION	0.9998966820466907	WITHOUT_CLASSIFICATION	1.0331795330933977E-4	DESIGN
private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9910887959343783	WITHOUT_CLASSIFICATION	0.00891120406562171	DESIGN
first try to find a matching constructor accepting a violatedconstraintnameextracter param	WITHOUT_CLASSIFICATION	0.9993959901442158	WITHOUT_CLASSIFICATION	6.040098557842379E-4	DESIGN
eat it and try next	WITHOUT_CLASSIFICATION	0.999219754790095	WITHOUT_CLASSIFICATION	7.802452099051575E-4	DESIGN
otherwise try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999447371703801	WITHOUT_CLASSIFICATION	5.526282961978817E-5	DESIGN
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9989060514284308	WITHOUT_CLASSIFICATION	0.0010939485715691349	DESIGN
collectionpropertymapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9981656332707816	WITHOUT_CLASSIFICATION	0.001834366729218457	DESIGN
remove initial " "	WITHOUT_CLASSIFICATION	0.9993218262778729	WITHOUT_CLASSIFICATION	6.781737221270291E-4	DESIGN
remove initial " and "	WITHOUT_CLASSIFICATION	0.9986503448228725	WITHOUT_CLASSIFICATION	0.001349655177127407	DESIGN
beforeclasstokens.add("new") definitely don't have this!!	WITHOUT_CLASSIFICATION	0.9996013906207569	WITHOUT_CLASSIFICATION	3.986093792430999E-4	DESIGN
notafterclasstokens.add("")	WITHOUT_CLASSIFICATION	0.9995848020766234	WITHOUT_CLASSIFICATION	4.1519792337664973E-4	DESIGN
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.998809096329743	WITHOUT_CLASSIFICATION	0.0011909036702569462	DESIGN
update last non-whitespace token if necessary	WITHOUT_CLASSIFICATION	0.9999297892657257	WITHOUT_CLASSIFICATION	7.021073427434419E-5	DESIGN
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999606756785935	WITHOUT_CLASSIFICATION	3.9324321406633626E-5	DESIGN
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9995681707525478	WITHOUT_CLASSIFICATION	4.318292474522809E-4	DESIGN
note this!!	WITHOUT_CLASSIFICATION	0.9998676740798015	WITHOUT_CLASSIFICATION	1.3232592019857362E-4	DESIGN
error message constants.	WITHOUT_CLASSIFICATION	0.9979125355475175	WITHOUT_CLASSIFICATION	0.0020874644524824545	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995629684629148	WITHOUT_CLASSIFICATION	4.3703153708522194E-4	DESIGN
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995919836430306	WITHOUT_CLASSIFICATION	4.0801635696943576E-4	DESIGN
handle collection-fiter compilation. important note this is modifying the input (hql) tree not the output tree!	WITHOUT_CLASSIFICATION	0.9883426506055345	WITHOUT_CLASSIFICATION	0.011657349394465612	DESIGN
show the modified ast.	WITHOUT_CLASSIFICATION	0.9999880779015631	WITHOUT_CLASSIFICATION	1.1922098436911873E-5	DESIGN
create a parameter specification for the collection filter	WITHOUT_CLASSIFICATION	0.9965931676917424	WITHOUT_CLASSIFICATION	0.0034068323082574944	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9998834939706333	WITHOUT_CLASSIFICATION	1.1650602936672144E-4	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9998834939706333	WITHOUT_CLASSIFICATION	1.1650602936672144E-4	DESIGN
get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9966915596037313	WITHOUT_CLASSIFICATION	0.003308440396268546	DESIGN
the path ast should be a dotnode and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9983672028793659	WITHOUT_CLASSIFICATION	0.0016327971206341507	DESIGN
tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9998281142524224	WITHOUT_CLASSIFICATION	1.7188574757759592E-4	DESIGN
re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999554660538843	WITHOUT_CLASSIFICATION	4.4533946115702054E-5	DESIGN
don't forget to resolve the argument! resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9996769697620083	WITHOUT_CLASSIFICATION	3.2303023799170564E-4	DESIGN
resolve everything up to this dot but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9994941871018926	WITHOUT_CLASSIFICATION	5.058128981073314E-4	DESIGN
should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9998946634776683	WITHOUT_CLASSIFICATION	1.0533652233168048E-4	DESIGN
was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9998244146678029	WITHOUT_CLASSIFICATION	1.755853321971758E-4	DESIGN
attach any mapping-defined "order by" fragments	WITHOUT_CLASSIFICATION	0.9995690814182715	WITHOUT_CLASSIFICATION	4.3091858172852616E-4	DESIGN
use the explicitly declared select expression determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999327889227919	WITHOUT_CLASSIFICATION	6.721107720813166E-5	DESIGN
after that process the joins. invoke a delegate to do the work as this is farily complex.	WITHOUT_CLASSIFICATION	0.9996757339234188	WITHOUT_CLASSIFICATION	3.242660765812777E-4	DESIGN
make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999552766681432	WITHOUT_CLASSIFICATION	4.47233318568513E-5	DESIGN
we need to generate ids as part of this bulk insert. note that this is only supported for sequence-style generators and post-insert-style generators basically only in-db generators	WITHOUT_CLASSIFICATION	0.9992133379837453	WITHOUT_CLASSIFICATION	7.866620162547382E-4	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9998834939706333	WITHOUT_CLASSIFICATION	1.1650602936672144E-4	DESIGN
we need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.999828002415361	WITHOUT_CLASSIFICATION	1.7199758463897578E-4	DESIGN
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9881636549244815	WITHOUT_CLASSIFICATION	0.011836345075518498	DESIGN
this is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9933605353910483	WITHOUT_CLASSIFICATION	0.006639464608951739	DESIGN
generate implicit joins only if necessary.	WITHOUT_CLASSIFICATION	0.9998936534591895	WITHOUT_CLASSIFICATION	1.0634654081047174E-4	DESIGN
notify the from element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999662832462389	WITHOUT_CLASSIFICATION	3.371675376111433E-5	DESIGN
turn off includesubclasses on all fromelements.	WITHOUT_CLASSIFICATION	0.9992525123797628	WITHOUT_CLASSIFICATION	7.474876202372891E-4	DESIGN
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9993686659471989	WITHOUT_CLASSIFICATION	6.313340528011842E-4	DESIGN
use the delegate resolve identifiers as from element aliases.	WITHOUT_CLASSIFICATION	0.9998403660128657	WITHOUT_CLASSIFICATION	1.5963398713417435E-4	DESIGN
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9959735043189335	WITHOUT_CLASSIFICATION	0.004026495681066462	DESIGN
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.995057856293585	WITHOUT_CLASSIFICATION	0.004942143706414897	DESIGN
make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9984999636879246	WITHOUT_CLASSIFICATION	0.0015000363120754446	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995629684629148	WITHOUT_CLASSIFICATION	4.3703153708522194E-4	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9998834939706333	WITHOUT_CLASSIFICATION	1.1650602936672144E-4	DESIGN
--commented out by inspection (12/11/04 1056 am) int getwarningcount()	WITHOUT_CLASSIFICATION	0.9999211071098888	WITHOUT_CLASSIFICATION	7.889289011120408E-5	DESIGN
alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9994789368689664	WITHOUT_CLASSIFICATION	5.210631310335859E-4	DESIGN
switch	WITHOUT_CLASSIFICATION	0.9997233859681813	WITHOUT_CLASSIFICATION	2.766140318187107E-4	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9991939468057656	WITHOUT_CLASSIFICATION	8.060531942345143E-4	DESIGN
just do the regular thing if you can't find the ctor your ast must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9994685076082374	WITHOUT_CLASSIFICATION	5.314923917625377E-4	DESIGN
initialize sql nodes here.	WITHOUT_CLASSIFICATION	0.9988830450004941	WITHOUT_CLASSIFICATION	0.0011169549995059245	DESIGN
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998282069525288	WITHOUT_CLASSIFICATION	1.7179304747118977E-4	DESIGN
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9998493510783216	WITHOUT_CLASSIFICATION	1.5064892167843474E-4	DESIGN
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9998825107188948	WITHOUT_CLASSIFICATION	1.1748928110527313E-4	DESIGN
--- inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9998156557721158	WITHOUT_CLASSIFICATION	1.8434422788410833E-4	DESIGN
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9995546250658145	WITHOUT_CLASSIFICATION	4.453749341853915E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9996671979949383	WITHOUT_CLASSIFICATION	3.3280200506170273E-4	DESIGN
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9996582384699371	WITHOUT_CLASSIFICATION	3.417615300629731E-4	DESIGN
again both should be fromelements	WITHOUT_CLASSIFICATION	0.9911256329164382	WITHOUT_CLASSIFICATION	0.008874367083561752	DESIGN
note firstrow is zero-based	WITHOUT_CLASSIFICATION	0.9996757315065393	WITHOUT_CLASSIFICATION	3.2426849346067315E-4	DESIGN
right represents a joins originating from left or both right and left reprersent joins originating from the same fromelement	WITHOUT_CLASSIFICATION	0.9996600302430327	WITHOUT_CLASSIFICATION	3.3996975696733687E-4	DESIGN
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9983421123098236	WITHOUT_CLASSIFICATION	0.0016578876901763547	DESIGN
right represents a joins originating from left	WITHOUT_CLASSIFICATION	0.9995039356969815	WITHOUT_CLASSIFICATION	4.960643030185168E-4	DESIGN
all clear	WITHOUT_CLASSIFICATION	0.9993483940188627	WITHOUT_CLASSIFICATION	6.516059811373415E-4	DESIGN
ignore the token class name parameter and use a specific token class.	WITHOUT_CLASSIFICATION	0.9971267304951137	WITHOUT_CLASSIFICATION	0.0028732695048863536	DESIGN
overriden to avoid system.exit	WITHOUT_CLASSIFICATION	0.9993726846847731	WITHOUT_CLASSIFICATION	6.273153152267593E-4	DESIGN
overriden to avoid system.exit	WITHOUT_CLASSIFICATION	0.9993726846847731	WITHOUT_CLASSIFICATION	6.273153152267593E-4	DESIGN
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9901412247123274	WITHOUT_CLASSIFICATION	0.009858775287672674	DESIGN
don't care about other param types here just those explicitly user-defined	WITHOUT_CLASSIFICATION	0.9348952740351496	WITHOUT_CLASSIFICATION	0.06510472596485047	DESIGN
if the query is already compiled skip the compilation.	WITHOUT_CLASSIFICATION	0.9998812101223604	WITHOUT_CLASSIFICATION	1.1878987763964864E-4	DESIGN
remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9976388488019398	WITHOUT_CLASSIFICATION	0.0023611511980602363	DESIGN
phase 1 parse the hql into an ast.	WITHOUT_CLASSIFICATION	0.999697380715788	WITHOUT_CLASSIFICATION	3.026192842119969E-4	DESIGN
phase 2 analyze the hql ast and produce an sql ast.	WITHOUT_CLASSIFICATION	0.999993588714722	WITHOUT_CLASSIFICATION	6.4112852779851745E-6	DESIGN
phase 3 generate the sql.	WITHOUT_CLASSIFICATION	0.9997851775881298	WITHOUT_CLASSIFICATION	2.1482241187020394E-4	DESIGN
we do not actually propogate antlrexceptions as a cause so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9995611890256563	WITHOUT_CLASSIFICATION	4.388109743437414E-4	DESIGN
we do not actually propogate antlrexceptions as a cause so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9995611890256563	WITHOUT_CLASSIFICATION	4.388109743437414E-4	DESIGN
only needed during compilation phase	WITHOUT_CLASSIFICATION	0.9999054774790725	WITHOUT_CLASSIFICATION	9.452252092744736E-5	DESIGN
transform the tree.	WITHOUT_CLASSIFICATION	0.9998803773185545	WITHOUT_CLASSIFICATION	1.1962268144546279E-4	DESIGN
parse the query string into an hql ast.	WITHOUT_CLASSIFICATION	0.9996655341759563	WITHOUT_CLASSIFICATION	3.344658240437097E-4	DESIGN
delegate to the queryloader	WITHOUT_CLASSIFICATION	0.9997347937810982	WITHOUT_CLASSIFICATION	2.6520621890180937E-4	DESIGN
delegate to the queryloader	WITHOUT_CLASSIFICATION	0.9997347937810982	WITHOUT_CLASSIFICATION	2.6520621890180937E-4	DESIGN
delegate to the queryloader	WITHOUT_CLASSIFICATION	0.9997347937810982	WITHOUT_CLASSIFICATION	2.6520621890180937E-4	DESIGN
note ( max - 1 ) because first is zero-based while max is not	WITHOUT_CLASSIFICATION	0.9999569468663891	WITHOUT_CLASSIFICATION	4.305313361079515E-5	DESIGN
-- package local methods for the queryloader delegate --	WITHOUT_CLASSIFICATION	0.9969332281768225	WITHOUT_CLASSIFICATION	0.0030667718231775186	DESIGN
if there are no collection fetches then no further checks are needed	WITHOUT_CLASSIFICATION	0.9997225577932219	WITHOUT_CLASSIFICATION	2.774422067779861E-4	DESIGN
a shallow query is ok (although technically there should be no fetching here)	WITHOUT_CLASSIFICATION	0.9989455705659903	WITHOUT_CLASSIFICATION	0.0010544294340095947	DESIGN
should be the first but just to be safe	WITHOUT_CLASSIFICATION	0.9976899983967997	WITHOUT_CLASSIFICATION	0.00231000160320019	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9998834939706333	WITHOUT_CLASSIFICATION	1.1650602936672144E-4	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9998834939706333	WITHOUT_CLASSIFICATION	1.1650602936672144E-4	DESIGN
impl note allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9985727614687034	WITHOUT_CLASSIFICATION	0.00142723853129649	DESIGN
otherwise we have a non-scalar select with defined collection fetch(es). make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9997463573567051	WITHOUT_CLASSIFICATION	2.5364264329491755E-4	DESIGN
this is not strictly true. we actually just need to make sure that it is ordered by root-entity pk and that that order-by comes before any non-root-entity ordering	WITHOUT_CLASSIFICATION	0.8934359015993218	DESIGN	0.10656409840067808	WITHOUT_CLASSIFICATION
paramtranslations = new parametertranslationsimpl( collectedparameterspecifications )	WITHOUT_CLASSIFICATION	0.9998447428772435	WITHOUT_CLASSIFICATION	1.5525712275644675E-4	DESIGN
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9941281006601577	WITHOUT_CLASSIFICATION	0.005871899339842274	DESIGN
igndore it	WITHOUT_CLASSIFICATION	0.9991950705249308	WITHOUT_CLASSIFICATION	8.049294750692947E-4	DESIGN
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9951150027164906	WITHOUT_CLASSIFICATION	0.004884997283509351	DESIGN
[jsd] the fix for hhh-558	WITHOUT_CLASSIFICATION	0.9740286018757347	WITHOUT_CLASSIFICATION	0.02597139812426525	DESIGN
if the token can tell us if it could be an identifier	WITHOUT_CLASSIFICATION	0.9978258314610333	WITHOUT_CLASSIFICATION	0.0021741685389665773	DESIGN
and the expected token type was an identifier then	WITHOUT_CLASSIFICATION	0.9998603072908113	WITHOUT_CLASSIFICATION	1.3969270918861603E-4	DESIGN
use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999445390006592	WITHOUT_CLASSIFICATION	5.5460999340864415E-5	DESIGN
add the token to the ast.	WITHOUT_CLASSIFICATION	0.9996482729268601	WITHOUT_CLASSIFICATION	3.517270731398528E-4	DESIGN
(not (eq a b) ) => (ne a b)	WITHOUT_CLASSIFICATION	0.9561236301224629	WITHOUT_CLASSIFICATION	0.04387636987753696	DESIGN
(not (ne a b) ) => (eq a b)	WITHOUT_CLASSIFICATION	0.9561236301224629	WITHOUT_CLASSIFICATION	0.04387636987753696	DESIGN
(not (lt a b) ) => (ge a b)	WITHOUT_CLASSIFICATION	0.9561236301224629	WITHOUT_CLASSIFICATION	0.04387636987753696	DESIGN
(not (ge a b) ) => (lt a b)	WITHOUT_CLASSIFICATION	0.9561236301224629	WITHOUT_CLASSIFICATION	0.04387636987753696	DESIGN
(not (le a b) ) => (gt a b)	WITHOUT_CLASSIFICATION	0.9561236301224629	WITHOUT_CLASSIFICATION	0.04387636987753696	DESIGN
(not (like a b) ) => (not_like a b)	WITHOUT_CLASSIFICATION	0.9458245386058153	WITHOUT_CLASSIFICATION	0.05417546139418471	DESIGN
(not (not_like a b) ) => (like a b)	WITHOUT_CLASSIFICATION	0.9458245386058153	WITHOUT_CLASSIFICATION	0.05417546139418471	DESIGN
(not (is_not_null a b) ) => (is_null a b)	WITHOUT_CLASSIFICATION	0.9555946222024572	WITHOUT_CLASSIFICATION	0.04440537779754282	DESIGN
(not (between a b) ) => (not_between a b)	WITHOUT_CLASSIFICATION	0.9555946222024572	WITHOUT_CLASSIFICATION	0.04440537779754282	DESIGN
initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9982622807384389	WITHOUT_CLASSIFICATION	0.0017377192615609745	DESIGN
overriden to avoid system.exit	WITHOUT_CLASSIFICATION	0.9993726846847731	WITHOUT_CLASSIFICATION	6.273153152267593E-4	DESIGN
if if otherwise handle the error normally.	WITHOUT_CLASSIFICATION	0.9996671460486699	WITHOUT_CLASSIFICATION	3.328539513301123E-4	DESIGN
(not (not_between a b) ) => (between a b)	WITHOUT_CLASSIFICATION	0.9555946222024572	WITHOUT_CLASSIFICATION	0.04440537779754282	DESIGN
this can never happen because this rule will always eliminate the child not.case notreturn x.getfirstchild() (not (not x) ) => (x)	WITHOUT_CLASSIFICATION	0.9998461450752579	WITHOUT_CLASSIFICATION	1.538549247420996E-4	DESIGN
just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9911619001988957	WITHOUT_CLASSIFICATION	0.008838099801104258	DESIGN
(eq null b) => (is_null b)	WITHOUT_CLASSIFICATION	0.9997793972427148	WITHOUT_CLASSIFICATION	2.2060275728511206E-4	DESIGN
(eq a null) => (is_null a)	WITHOUT_CLASSIFICATION	0.9997505005020716	WITHOUT_CLASSIFICATION	2.4949949792837744E-4	DESIGN
note because we're using astutil.createparent() the tree must be created from the bottom up. is empty x => (exists (query (select_from (from x) ) ) )	WITHOUT_CLASSIFICATION	0.9998947784316949	WITHOUT_CLASSIFICATION	1.0522156830496705E-4	DESIGN
add not if it's negated.	WITHOUT_CLASSIFICATION	0.9969683606924123	WITHOUT_CLASSIFICATION	0.0030316393075876095	DESIGN
create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999508172661421	WITHOUT_CLASSIFICATION	4.9182733857844716E-5	DESIGN
case 1 multi token keywords group by and order by the next token ( lt(2) ) should be 'by' otherwise this is just an ident.	WITHOUT_CLASSIFICATION	0.98813711567376	WITHOUT_CLASSIFICATION	0.011862884326239963	DESIGN
case 2 the current token is after from and before '.'.	WITHOUT_CLASSIFICATION	0.9994464758290842	WITHOUT_CLASSIFICATION	5.53524170915869E-4	DESIGN
this handles hhh-354 where there is a strange property name in a where clause. if the lookahead contains a dot then something that isn't an ident	WITHOUT_CLASSIFICATION	0.9999960362105905	WITHOUT_CLASSIFICATION	3.9637894094910225E-6	DESIGN
see if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999470824202916	WITHOUT_CLASSIFICATION	5.291757970835077E-5	DESIGN
set it!	WITHOUT_CLASSIFICATION	0.9993951084077962	WITHOUT_CLASSIFICATION	6.048915922037708E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.999634671388069	WITHOUT_CLASSIFICATION	3.6532861193094417E-4	DESIGN
strip the " where "	WITHOUT_CLASSIFICATION	0.9999661297389911	WITHOUT_CLASSIFICATION	3.3870261008822146E-5	DESIGN
don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9941274007188248	WITHOUT_CLASSIFICATION	0.0058725992811752325	DESIGN
at the very least cleanup the data )	WITHOUT_CLASSIFICATION	0.9730766296968647	WITHOUT_CLASSIFICATION	0.02692337030313535	DESIGN
first save off the pertinent ids as the return value	WITHOUT_CLASSIFICATION	0.9999977262246355	WITHOUT_CLASSIFICATION	2.273775364652932E-6	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999482106158751	WITHOUT_CLASSIFICATION	5.178938412490177E-4	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999482106158751	WITHOUT_CLASSIFICATION	5.178938412490177E-4	DESIGN
start performing the updates	WITHOUT_CLASSIFICATION	0.9999041763720159	WITHOUT_CLASSIFICATION	9.582362798412804E-5	DESIGN
first save off the pertinent ids saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999983809218566	WITHOUT_CLASSIFICATION	1.6190781434054233E-6	DESIGN
start performing the deletes	WITHOUT_CLASSIFICATION	0.9998247196639157	WITHOUT_CLASSIFICATION	1.7528033608421134E-4	DESIGN
otherwise everything ok.	WITHOUT_CLASSIFICATION	0.999761647079287	WITHOUT_CLASSIFICATION	2.383529207130316E-4	DESIGN
visit width-first then depth	WITHOUT_CLASSIFICATION	0.999772283298146	WITHOUT_CLASSIFICATION	2.2771670185397185E-4	DESIGN
if the types report logical equivalence return true	WITHOUT_CLASSIFICATION	0.9996250721278528	WITHOUT_CLASSIFICATION	3.749278721471591E-4	DESIGN
otherwise perform a "deep equivalence" check	WITHOUT_CLASSIFICATION	0.9941377095726696	WITHOUT_CLASSIFICATION	0.005862290427330378	DESIGN
if there is no where node make one.	WITHOUT_CLASSIFICATION	0.9999777694143371	WITHOUT_CLASSIFICATION	2.2230585662801542E-5	DESIGN
inject the where after the parent	WITHOUT_CLASSIFICATION	0.999907860211214	WITHOUT_CLASSIFICATION	9.213978878599485E-5	DESIGN
never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999219399395998	WITHOUT_CLASSIFICATION	7.806006040025046E-5	DESIGN
moved here from selectclause [jsd]	WITHOUT_CLASSIFICATION	0.9949853666935993	WITHOUT_CLASSIFICATION	0.005014633306400781	DESIGN
/	WITHOUT_CLASSIFICATION	0.9996671979949383	WITHOUT_CLASSIFICATION	3.3280200506170273E-4	DESIGN
use the table fromelement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999417346249949	WITHOUT_CLASSIFICATION	5.8265375005114315E-5	DESIGN
set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9998909135565603	WITHOUT_CLASSIFICATION	1.0908644343964383E-4	DESIGN
if the uresolved property path isn't set yet just use the property name.	WITHOUT_CLASSIFICATION	0.999923430763484	WITHOUT_CLASSIFICATION	7.656923651601731E-5	DESIGN
the 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999548972233869	WITHOUT_CLASSIFICATION	4.5102776613150446E-5	DESIGN
prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999652857265966	WITHOUT_CLASSIFICATION	3.471427340331897E-5	DESIGN
prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999652857265966	WITHOUT_CLASSIFICATION	3.471427340331897E-5	DESIGN
if this dot has already been resolved stop now.	WITHOUT_CLASSIFICATION	0.998671258387736	WITHOUT_CLASSIFICATION	0.0013287416122640002	DESIGN
if there is no data type for this node and we're at the end of the path (top most dot node) then this might be a java constant.	WITHOUT_CLASSIFICATION	0.9609179361567495	WITHOUT_CLASSIFICATION	0.03908206384325047	DESIGN
the property is a collection	WITHOUT_CLASSIFICATION	0.9995047301657912	WITHOUT_CLASSIFICATION	4.952698342087509E-4	DESIGN
the property is a component	WITHOUT_CLASSIFICATION	0.9998173813643649	WITHOUT_CLASSIFICATION	1.826186356351285E-4	DESIGN
the property is another class..	WITHOUT_CLASSIFICATION	0.9999641012790165	WITHOUT_CLASSIFICATION	3.589872098343323E-5	DESIGN
otherwise this is a primitive type.	WITHOUT_CLASSIFICATION	0.9992911104768244	WITHOUT_CLASSIFICATION	7.088895231756775E-4	DESIGN
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9998387099004205	WITHOUT_CLASSIFICATION	1.6129009957954412E-4	DESIGN
this 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9990492627792206	WITHOUT_CLASSIFICATION	9.507372207793647E-4	DESIGN
always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9995049188735261	WITHOUT_CLASSIFICATION	4.950811264739172E-4	DESIGN
in non-select queries the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9907426334804734	WITHOUT_CLASSIFICATION	0.009257366519526588	DESIGN
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999271257507397	WITHOUT_CLASSIFICATION	7.287424926025848E-5	DESIGN
this 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9990492627792206	WITHOUT_CLASSIFICATION	9.507372207793647E-4	DESIGN
even though we might find a pre-existing element by join path we may not be able to reuse it	WITHOUT_CLASSIFICATION	0.9979332318190262	WITHOUT_CLASSIFICATION	0.0020667681809737933	DESIGN
note addduplicatealias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9993818505842931	WITHOUT_CLASSIFICATION	6.181494157069606E-4	DESIGN
if the from-clauses are the same we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9301640530977828	WITHOUT_CLASSIFICATION	0.06983594690221712	DESIGN
again null != null here	WITHOUT_CLASSIFICATION	0.999682666455886	WITHOUT_CLASSIFICATION	3.1733354411398064E-4	DESIGN
if this is an implied join in a from element then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9995211966084214	WITHOUT_CLASSIFICATION	4.7880339157859223E-4	DESIGN
otherwise (subquery case) dont reuse the fromelement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999677753142988	WITHOUT_CLASSIFICATION	3.222468570121562E-5	DESIGN
we know only the lhs-hand type so use that	WITHOUT_CLASSIFICATION	0.9997888333314663	WITHOUT_CLASSIFICATION	2.1116666853375707E-4	DESIGN
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.99998968064011	WITHOUT_CLASSIFICATION	1.0319359890150417E-5	DESIGN
only the identifier property field name can be a reference to the associated entity's pk	WITHOUT_CLASSIFICATION	0.9992885363976803	WITHOUT_CLASSIFICATION	7.114636023197304E-4	DESIGN
special shortcut for id properties skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999734647286554	WITHOUT_CLASSIFICATION	2.6535271344593065E-4	DESIGN
append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999715422507199	WITHOUT_CLASSIFICATION	2.8457749280121146E-5	DESIGN
if the lhs is a collection use collectionpropertymapping	WITHOUT_CLASSIFICATION	0.9982047002202821	WITHOUT_CLASSIFICATION	0.0017952997797178708	DESIGN
tell the destination fromelement to 'includesubclasses'.	WITHOUT_CLASSIFICATION	0.9998241058442483	WITHOUT_CLASSIFICATION	1.7589415575162894E-4	DESIGN
use theta style (for regression) move the node up after the origin node.	WITHOUT_CLASSIFICATION	0.9830198915104139	WITHOUT_CLASSIFICATION	0.016980108489586043	DESIGN
don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9997463083147812	WITHOUT_CLASSIFICATION	2.5369168521885475E-4	DESIGN
for expected parameter type injection we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9997931165767457	WITHOUT_CLASSIFICATION	2.0688342325411905E-4	DESIGN
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999916441134894	WITHOUT_CLASSIFICATION	8.355886510587878E-6	DESIGN
we have something like "? [op] rhs"	WITHOUT_CLASSIFICATION	0.999873947025737	WITHOUT_CLASSIFICATION	1.2605297426309693E-4	DESIGN
we have something like "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.999873947025737	WITHOUT_CLASSIFICATION	1.2605297426309693E-4	DESIGN
we know only the rhs-hand type so use that	WITHOUT_CLASSIFICATION	0.9997888333314663	WITHOUT_CLASSIFICATION	2.1116666853375707E-4	DESIGN
handle the (assumed) valid cases #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9936258290762575	WITHOUT_CLASSIFICATION	0.006374170923742556	DESIGN
one or the other needs to be a datetime for us to get into this method in the first place	WITHOUT_CLASSIFICATION	0.8836368074564649	WITHOUT_CLASSIFICATION	0.1163631925435352	DESIGN
#3 - note that this is also true of "datetime - param"	WITHOUT_CLASSIFICATION	0.998867775473823	WITHOUT_CLASSIFICATION	0.0011322245261769985	DESIGN
#2	WITHOUT_CLASSIFICATION	0.9992953932350294	WITHOUT_CLASSIFICATION	7.046067649706496E-4	DESIGN
generate the inner join -- the elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9975398728551049	WITHOUT_CLASSIFICATION	0.002460127144895099	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9998491722214495	WITHOUT_CLASSIFICATION	1.5082777855044213E-4	DESIGN
the 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999669436838293	WITHOUT_CLASSIFICATION	3.305631617067433E-5	DESIGN
add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999057038587267	WITHOUT_CLASSIFICATION	9.429614127338888E-5	DESIGN
sometimes use the element table alias sometimes use the umm collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9993740764275966	WITHOUT_CLASSIFICATION	6.259235724034477E-4	DESIGN
now set the text for this node. it should be the element columns.	WITHOUT_CLASSIFICATION	0.9961464499915863	WITHOUT_CLASSIFICATION	0.0038535500084138047	DESIGN
get the function return value type based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999723568336769	WITHOUT_CLASSIFICATION	2.7643166323090862E-5	DESIGN
this will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9994859059065905	WITHOUT_CLASSIFICATION	5.140940934095309E-4	DESIGN
mutation depends on the types of nodes invloved	WITHOUT_CLASSIFICATION	0.9999098757546433	WITHOUT_CLASSIFICATION	9.01242453567286E-5	DESIGN
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding	WITHOUT_CLASSIFICATION	0.9082517264689107	WITHOUT_CLASSIFICATION	0.0917482735310892	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999592313049336	WITHOUT_CLASSIFICATION	4.076869506638696E-5	DESIGN
generated select expressions are already resolved nothing to do.	WITHOUT_CLASSIFICATION	0.9765299629234682	WITHOUT_CLASSIFICATION	0.02347003707653186	DESIGN
the path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9985186963023507	WITHOUT_CLASSIFICATION	0.001481303697649327	DESIGN
the hql class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9998069315785019	WITHOUT_CLASSIFICATION	1.930684214980612E-4	DESIGN
associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999068347830954	WITHOUT_CLASSIFICATION	9.316521690450483E-5	DESIGN
try the parent fromclause	WITHOUT_CLASSIFICATION	0.9999188290329831	WITHOUT_CLASSIFICATION	8.11709670168762E-5	DESIGN
add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9997538651942652	WITHOUT_CLASSIFICATION	2.46134805734775E-4	DESIGN
make sure that all from elements registered with this from clause are actually in the ast.	WITHOUT_CLASSIFICATION	0.9920450265634847	WITHOUT_CLASSIFICATION	0.007954973436515385	DESIGN
invoke setscalarcolumntext on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999251985022031	WITHOUT_CLASSIFICATION	7.480149779689594E-5	DESIGN
collect the select expressions skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999935982714714	WITHOUT_CLASSIFICATION	6.401728528624296E-6	DESIGN
return an empty type array	WITHOUT_CLASSIFICATION	0.9991045701560709	WITHOUT_CLASSIFICATION	8.954298439291532E-4	DESIGN
constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9983924716692508	WITHOUT_CLASSIFICATION	0.0016075283307492667	DESIGN
this is the exception returned by reflecthelper.getconstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.99973519953812	WITHOUT_CLASSIFICATION	2.648004618800504E-4	DESIGN
if there is no order by make one	WITHOUT_CLASSIFICATION	0.9999830224102293	WITHOUT_CLASSIFICATION	1.6977589770649334E-5	DESIGN
find the where if there is no where find the from	WITHOUT_CLASSIFICATION	0.999972345836233	WITHOUT_CLASSIFICATION	2.7654163767036993E-5	DESIGN
now inject the newly built order by into the tree	WITHOUT_CLASSIFICATION	0.9998075523594622	WITHOUT_CLASSIFICATION	1.9244764053785005E-4	DESIGN
parametercontainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999080379689105	WITHOUT_CLASSIFICATION	9.196203108948667E-5	DESIGN
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999592313049336	WITHOUT_CLASSIFICATION	4.076869506638696E-5	DESIGN
render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.993836797155994	WITHOUT_CLASSIFICATION	0.006163202844006024	DESIGN
class names in the from clause result in a joinsequence (the old fromparser does this).	WITHOUT_CLASSIFICATION	0.9998651028470772	WITHOUT_CLASSIFICATION	1.348971529228604E-4	DESIGN
for many-to-many joins use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9992847233798369	WITHOUT_CLASSIFICATION	7.152766201632528E-4	DESIGN
otherwise use the property mapping.	WITHOUT_CLASSIFICATION	0.999970234638976	WITHOUT_CLASSIFICATION	2.9765361024002215E-5	DESIGN
should be safe to only ever expect entitypersister references here	WITHOUT_CLASSIFICATION	0.9993137979466111	WITHOUT_CLASSIFICATION	6.862020533889644E-4	DESIGN
if the property is a special collection property name return a collectionpropertymapping.	WITHOUT_CLASSIFICATION	0.9999310987283142	WITHOUT_CLASSIFICATION	6.89012716858522E-5	DESIGN
collection of components.	WITHOUT_CLASSIFICATION	0.9994460656859196	WITHOUT_CLASSIFICATION	5.53934314080311E-4	DESIGN
make sure the lhs is "assignable"	WITHOUT_CLASSIFICATION	0.9995647346932297	WITHOUT_CLASSIFICATION	4.3526530677020256E-4	DESIGN
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9996317858344945	WITHOUT_CLASSIFICATION	3.6821416550546405E-4	DESIGN
register the fromelement with the from clause now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9998937336249245	WITHOUT_CLASSIFICATION	1.0626637507552233E-4	DESIGN
currently allowed	WITHOUT_CLASSIFICATION	0.9992930618789915	WITHOUT_CLASSIFICATION	7.069381210085933E-4	DESIGN
hhh-276 implied joins in a subselect where clause - the destination needs to be added to the destination's from clause. not sure if this is will fix everything but it works.	WITHOUT_CLASSIFICATION	0.556738390973779	DESIGN	0.44326160902622097	WITHOUT_CLASSIFICATION
return classalias == null ? classname classalias	WITHOUT_CLASSIFICATION	0.9982155461309131	WITHOUT_CLASSIFICATION	0.0017844538690868974	DESIGN
this is an explicit from element.	WITHOUT_CLASSIFICATION	0.9957759038267582	WITHOUT_CLASSIFICATION	0.004224096173241817	DESIGN
parametercontainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999080379689105	WITHOUT_CLASSIFICATION	9.196203108948667E-5	DESIGN
fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.8978530815193237	WITHOUT_CLASSIFICATION	0.10214691848067625	DESIGN
if it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999249452154843	WITHOUT_CLASSIFICATION	7.50547845158055E-5	DESIGN
since this is an explicit from element it can't be implied in the from clause.	WITHOUT_CLASSIFICATION	0.998934730792323	WITHOUT_CLASSIFICATION	0.0010652692076771125	DESIGN
do nothing eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9996588344845283	WITHOUT_CLASSIFICATION	3.41165515471712E-4	DESIGN
propertyname refers to something like collection.size	WITHOUT_CLASSIFICATION	0.9997330385715733	WITHOUT_CLASSIFICATION	2.669614284267582E-4	DESIGN
property name is a sub-path of a component	WITHOUT_CLASSIFICATION	0.9997993007027745	WITHOUT_CLASSIFICATION	2.0069929722560755E-4	DESIGN
always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9995049188735261	WITHOUT_CLASSIFICATION	4.950811264739172E-4	DESIGN
nothing to do even if the operand is a parameter no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.7795814831759004	WITHOUT_CLASSIFICATION	0.22041851682409966	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999592313049336	WITHOUT_CLASSIFICATION	4.076869506638696E-5	DESIGN
dotnode uses null here	WITHOUT_CLASSIFICATION	0.9979251385241886	WITHOUT_CLASSIFICATION	0.002074861475811486	DESIGN
we represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9980916115476499	WITHOUT_CLASSIFICATION	0.0019083884523500622	DESIGN
we are the lhs of the dot representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9991261398293405	WITHOUT_CLASSIFICATION	8.738601706595391E-4	DESIGN
we are the rhs of the dot representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9990280308041044	WITHOUT_CLASSIFICATION	9.719691958956713E-4	DESIGN
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9971924231642065	WITHOUT_CLASSIFICATION	0.0028075768357934566	DESIGN
early exit!!! return so the resolve call explicitly coming from dotnode can resolve this	WITHOUT_CLASSIFICATION	0.9990075858596669	WITHOUT_CLASSIFICATION	9.924141403332154E-4	DESIGN
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.994651108362757	WITHOUT_CLASSIFICATION	0.0053488916372429925	DESIGN
just ignore it for now it'll get resolved later	WITHOUT_CLASSIFICATION	0.9857009355457288	WITHOUT_CLASSIFICATION	0.01429906445427123	DESIGN
this is not actually a constant but a reference to from element.	WITHOUT_CLASSIFICATION	0.6711158115376753	WITHOUT_CLASSIFICATION	0.32888418846232464	DESIGN
check to see if our "proppath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9991220909808634	WITHOUT_CLASSIFICATION	8.779090191365894E-4	DESIGN
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9989645113557466	WITHOUT_CLASSIFICATION	0.0010354886442534611	DESIGN
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.8692340511710566	WITHOUT_CLASSIFICATION	0.13076594882894343	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9960751742873541	WITHOUT_CLASSIFICATION	0.003924825712645868	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9960751742873541	WITHOUT_CLASSIFICATION	0.003924825712645868	DESIGN
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.965638989780368	WITHOUT_CLASSIFICATION	0.03436101021963196	DESIGN
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9837821320132468	WITHOUT_CLASSIFICATION	0.01621786798675313	DESIGN
do not over-write the column text as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.999739573797226	WITHOUT_CLASSIFICATION	2.6042620277397775E-4	DESIGN
for some reason the antlr.commonast initialization routines force this method to get called twice. the first time with an empty string	WITHOUT_CLASSIFICATION	0.9999791296605041	WITHOUT_CLASSIFICATION	2.087033949598568E-5	DESIGN
look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999815949175566	WITHOUT_CLASSIFICATION	1.840508244343438E-5	DESIGN
add to the query spaces.	WITHOUT_CLASSIFICATION	0.9995957736562836	WITHOUT_CLASSIFICATION	4.042263437164556E-4	DESIGN
if the from element isn't in the same clause create a new from element.	WITHOUT_CLASSIFICATION	0.996102787191641	WITHOUT_CLASSIFICATION	0.0038972128083590756	DESIGN
this is the root level node. generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9964556165798828	WITHOUT_CLASSIFICATION	0.003544383420117197	DESIGN
correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ansi-style join	WITHOUT_CLASSIFICATION	0.9997396698185176	WITHOUT_CLASSIFICATION	2.603301814824394E-4	DESIGN
super-duper-classic-parser-regression-testing-mojo-magic	WITHOUT_CLASSIFICATION	0.9995795657065736	WITHOUT_CLASSIFICATION	4.204342934264473E-4	DESIGN
a collection of entities	WITHOUT_CLASSIFICATION	0.997337742173516	WITHOUT_CLASSIFICATION	0.0026622578264840287	DESIGN
a collection of components	WITHOUT_CLASSIFICATION	0.9983829287369231	WITHOUT_CLASSIFICATION	0.0016170712630768744	DESIGN
a collection of scalar elements	WITHOUT_CLASSIFICATION	0.9987292130883765	WITHOUT_CLASSIFICATION	0.0012707869116234398	DESIGN
according to both the ansi-sql and ejb3 specs trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the sql spec <trim function> = trim <left paren> <trim operands> <right paren> <trim operands> = [ [ <trim specification> ] [ <trim character> ] from ] <trim source> <trim specification> = leading | trailing | both if only <trim specification> is omitted both is assumed if <trim character> is omitted space is assumed	WITHOUT_CLASSIFICATION	0.9999999895408502	WITHOUT_CLASSIFICATION	1.0459149651255053E-8	DESIGN
don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9996159906670709	WITHOUT_CLASSIFICATION	3.840093329291417E-4	DESIGN
treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9993798664755642	WITHOUT_CLASSIFICATION	6.201335244358599E-4	DESIGN
( implied && dotnode.usethetastyleimplicitjoins ) ) {	WITHOUT_CLASSIFICATION	0.999514985455502	WITHOUT_CLASSIFICATION	4.8501454449804916E-4	DESIGN
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9320409529861092	WITHOUT_CLASSIFICATION	0.0679590470138907	DESIGN
create the from element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999810095867566	WITHOUT_CLASSIFICATION	1.8990413243347554E-5	DESIGN
if the join is implied then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9998544317411197	WITHOUT_CLASSIFICATION	1.4556825888025173E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994412691106829	WITHOUT_CLASSIFICATION	5.587308893171643E-4	DESIGN
the associated entity is implied but it must be included in the from. the collection alias is the role.	WITHOUT_CLASSIFICATION	0.9984147248384027	WITHOUT_CLASSIFICATION	0.0015852751615973765	DESIGN
tag this node as a join. don't include subclasses in the join. this is a clollection join.	WITHOUT_CLASSIFICATION	0.9997600932927744	WITHOUT_CLASSIFICATION	2.3990670722572415E-4	DESIGN
get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.999937817680302	WITHOUT_CLASSIFICATION	6.218231969801064E-5	DESIGN
origin path implied columns classalias	WITHOUT_CLASSIFICATION	0.9998915864748558	WITHOUT_CLASSIFICATION	1.084135251442069E-4	DESIGN
implied	WITHOUT_CLASSIFICATION	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
for implied many-to-many just add the end join.	WITHOUT_CLASSIFICATION	0.9984060199848678	WITHOUT_CLASSIFICATION	0.00159398001513224	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994412691106829	WITHOUT_CLASSIFICATION	5.587308893171643E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994412691106829	WITHOUT_CLASSIFICATION	5.587308893171643E-4	DESIGN
the standard sql function name is current_timestamp	WITHOUT_CLASSIFICATION	0.9998892847312482	WITHOUT_CLASSIFICATION	1.107152687519523E-4	DESIGN
this causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9975618614654539	WITHOUT_CLASSIFICATION	0.0024381385345461897	DESIGN
private type[] sqlresulttypes	WITHOUT_CLASSIFICATION	0.9963403137404714	WITHOUT_CLASSIFICATION	0.0036596862595285754	DESIGN
frontbase has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9998019969315894	WITHOUT_CLASSIFICATION	1.980030684104944E-4	DESIGN
the types represented in the sql result set. @return the types represented in the sql result set.	WITHOUT_CLASSIFICATION	0.9999394846529401	WITHOUT_CLASSIFICATION	6.051534705982382E-5	DESIGN
public type[] getsqlresulttypes() {return sqlresulttypes}	WITHOUT_CLASSIFICATION	0.9996443470183201	WITHOUT_CLASSIFICATION	3.5565298167990596E-4	DESIGN
first collect all of the select expressions. note this must be done before invoking setscalarcolumntext() because setscalarcolumntext() changes the ast!!!	WITHOUT_CLASSIFICATION	0.9949789624814785	WITHOUT_CLASSIFICATION	0.005021037518521401	DESIGN
first allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.989566993686056	WITHOUT_CLASSIFICATION	0.010433006313943925	DESIGN
sqlresulttypelist.addall( constructorargumenttypelist )	WITHOUT_CLASSIFICATION	0.9991451090639453	WITHOUT_CLASSIFICATION	8.548909360547195E-4	DESIGN
if the data type is not an association type it could not have been in the from clause.	WITHOUT_CLASSIFICATION	0.959893923704205	WITHOUT_CLASSIFICATION	0.040106076295794976	DESIGN
sqlresulttypelist.add( type )	WITHOUT_CLASSIFICATION	0.9968029441192128	WITHOUT_CLASSIFICATION	0.0031970558807872178	DESIGN
always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9974721114893891	WITHOUT_CLASSIFICATION	0.002527888510610847	DESIGN
add the fetched entities	WITHOUT_CLASSIFICATION	0.9997728853144097	WITHOUT_CLASSIFICATION	2.2711468559032805E-4	DESIGN
get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998965454323145	WITHOUT_CLASSIFICATION	1.0345456768543081E-4	DESIGN
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995490537827196	WITHOUT_CLASSIFICATION	4.509462172804564E-4	DESIGN
if there are any scalars (non-entities) selected render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999703807381761	WITHOUT_CLASSIFICATION	2.9619261823855215E-5	DESIGN
sqlresulttypelist	WITHOUT_CLASSIFICATION	0.9998085459853474	WITHOUT_CLASSIFICATION	1.9145401465259115E-4	DESIGN
arraylist sqlresulttypelist	WITHOUT_CLASSIFICATION	0.9996137637315039	WITHOUT_CLASSIFICATION	3.862362684961766E-4	DESIGN
sqlresulttypes = ( type[] ) sqlresulttypelist.toarray( new type[sqlresulttypelist.size()] )	WITHOUT_CLASSIFICATION	0.9999474385489815	WITHOUT_CLASSIFICATION	5.2561451018444306E-5	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979521975568224	WITHOUT_CLASSIFICATION	0.002047802443177698	DESIGN
todo	WITHOUT_CLASSIFICATION	0.627967009601584	DESIGN	0.37203299039841603	WITHOUT_CLASSIFICATION
add the type to the list of returned sqlresulttypes.	WITHOUT_CLASSIFICATION	0.9994512653595001	WITHOUT_CLASSIFICATION	5.487346404999371E-4	DESIGN
generate an 2d array of column names the first dimension is parallel with the return types array. the second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999989660616493	WITHOUT_CLASSIFICATION	1.0339383507557577E-6	DESIGN
generate the select expression.	WITHOUT_CLASSIFICATION	0.9995749911012357	WITHOUT_CLASSIFICATION	4.2500889876428077E-4	DESIGN
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9933012460647459	WITHOUT_CLASSIFICATION	0.006698753935254055	DESIGN
skip 'distinct' and 'all' so we return the first expression node.	WITHOUT_CLASSIFICATION	0.999985443992838	WITHOUT_CLASSIFICATION	1.4556007162113353E-5	DESIGN
create sql_token nodes for the columns.	WITHOUT_CLASSIFICATION	0.9998418252502529	WITHOUT_CLASSIFICATION	1.5817474974700742E-4	DESIGN
generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999472793103987	WITHOUT_CLASSIFICATION	5.272068960121808E-5	DESIGN
get the function name node.	WITHOUT_CLASSIFICATION	0.9999648318219851	WITHOUT_CLASSIFICATION	3.516817801480688E-5	DESIGN
method expressions in a select should always be considered scalar.	WITHOUT_CLASSIFICATION	0.790443024295017	WITHOUT_CLASSIFICATION	0.20955697570498297	DESIGN
if this is 'elements' then create a new from element.	WITHOUT_CLASSIFICATION	0.9934691954748561	WITHOUT_CLASSIFICATION	0.006530804525143874	DESIGN
not elements(x)	WITHOUT_CLASSIFICATION	0.9989714765297084	WITHOUT_CLASSIFICATION	0.0010285234702915337	DESIGN
dialect function	WITHOUT_CLASSIFICATION	0.9999608867621945	WITHOUT_CLASSIFICATION	3.9113237805454266E-5	DESIGN
collection 'property function'	WITHOUT_CLASSIFICATION	0.9988049358355217	WITHOUT_CLASSIFICATION	0.0011950641644782993	DESIGN
if the constant is an ident figure out what it means	WITHOUT_CLASSIFICATION	0.9994394244500836	WITHOUT_CLASSIFICATION	5.605755499164415E-4	DESIGN
ident is a class alias in the from.	WITHOUT_CLASSIFICATION	0.9978781886518318	WITHOUT_CLASSIFICATION	0.002121811348168331	DESIGN
resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9995798600175622	WITHOUT_CLASSIFICATION	4.2013998243780834E-4	DESIGN
otherwise it's a literal.	WITHOUT_CLASSIFICATION	0.9987919287984657	WITHOUT_CLASSIFICATION	0.0012080712015342234	DESIGN
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999090305847892	WITHOUT_CLASSIFICATION	9.096941521081558E-5	DESIGN
the class discriminator value	WITHOUT_CLASSIFICATION	0.9998704876897616	WITHOUT_CLASSIFICATION	1.2951231023845174E-4	DESIGN
chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999500575229104	WITHOUT_CLASSIFICATION	4.994247708951002E-5	DESIGN
add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999517577530559	WITHOUT_CLASSIFICATION	4.824224694415254E-5	DESIGN
find or create the where clause	WITHOUT_CLASSIFICATION	0.9998938784242071	WITHOUT_CLASSIFICATION	1.0612157579285931E-4	DESIGN
child == parent.getfirstchild()	WITHOUT_CLASSIFICATION	0.9999504491196024	WITHOUT_CLASSIFICATION	4.9550880397540045E-5	DESIGN
find or create the where clause	WITHOUT_CLASSIFICATION	0.9998938784242071	WITHOUT_CLASSIFICATION	1.0612157579285931E-4	DESIGN
filter conditions need to be inserted before the hql where condition and the theta join node. this is because org.hibernate.loader.loader binds the filter parameters first then it binds all the hql query parameters see org.hibernate.loader.loader.processfilterparameters().	WITHOUT_CLASSIFICATION	0.9999896529094169	WITHOUT_CLASSIFICATION	1.0347090583048184E-5	DESIGN
put the filters node before the hql condition and theta joins	WITHOUT_CLASSIFICATION	0.9999863629451191	WITHOUT_CLASSIFICATION	1.363705488082899E-5	DESIGN
add the current fragment to the filters node	WITHOUT_CLASSIFICATION	0.9938019581331656	WITHOUT_CLASSIFICATION	0.006198041866834381	DESIGN
create a new theta_joins node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999275578229753	WITHOUT_CLASSIFICATION	7.244217702472541E-5	DESIGN
put the theta_joins node before the hql condition after the filters.	WITHOUT_CLASSIFICATION	0.9999564660712341	WITHOUT_CLASSIFICATION	4.3533928765947334E-5	DESIGN
add the current fragment to the theta_joins node	WITHOUT_CLASSIFICATION	0.9879839365752773	WITHOUT_CLASSIFICATION	0.012016063424722754	DESIGN
first try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999875476437307	WITHOUT_CLASSIFICATION	1.2452356269300388E-5	DESIGN
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9986957611703281	WITHOUT_CLASSIFICATION	0.0013042388296718472	DESIGN
if that didn't work try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999470495387897	WITHOUT_CLASSIFICATION	5.2950461210294354E-5	DESIGN
implicit joins use theta style (where pk = fk) explicit joins use join (after from)	WITHOUT_CLASSIFICATION	0.999677944443575	WITHOUT_CLASSIFICATION	3.2205555642492785E-4	DESIGN
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999942970392214	WITHOUT_CLASSIFICATION	5.70296077865468E-6	DESIGN
determine the type of the first argument	WITHOUT_CLASSIFICATION	0.9999706541491526	WITHOUT_CLASSIFICATION	2.9345850847365255E-5	DESIGN
use the dot node to emit the first column name. create the column names folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9998833840476639	WITHOUT_CLASSIFICATION	1.1661595233609832E-4	DESIGN
note this simply constructs a "raw" sql_token representing the where fragment and injects this into the tree. this "works" however it is probably not the best long-term solution. at some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9666605110073262	DESIGN	0.03333948899267374	WITHOUT_CLASSIFICATION
append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999628201458693	WITHOUT_CLASSIFICATION	3.717985413062169E-5	DESIGN
if the node has a first child recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999669666176398	WITHOUT_CLASSIFICATION	3.303338236013394E-5	DESIGN
if there is a second child (rhs) recurse into that child.	WITHOUT_CLASSIFICATION	0.9999280016514615	WITHOUT_CLASSIFICATION	7.199834853855851E-5	DESIGN
iterate through the aliasjoinsequence pairs and generate sql token nodes.	WITHOUT_CLASSIFICATION	0.9996195447756941	WITHOUT_CLASSIFICATION	3.804552243058154E-4	DESIGN
if the from element represents a join_fragment and it is a theta-style join convert its type from join_fragment to from_fragment	WITHOUT_CLASSIFICATION	0.9993766138810584	WITHOUT_CLASSIFICATION	6.233861189417385E-4	DESIGN
this is used during sqlgenerator processing	WITHOUT_CLASSIFICATION	0.7428426688094037	WITHOUT_CLASSIFICATION	0.2571573311905963	DESIGN
if there is a from fragment and the from element is an explicit then add the from part.	WITHOUT_CLASSIFICATION	0.994399961186746	WITHOUT_CLASSIFICATION	0.005600038813254016	DESIGN
&& stringhelper.isnotempty( frag )	WITHOUT_CLASSIFICATION	0.9990643947859433	WITHOUT_CLASSIFICATION	9.356052140567215E-4	DESIGN
the from fragment will probably begin with ' '. remove this if it is present.	WITHOUT_CLASSIFICATION	0.8571645070822661	WITHOUT_CLASSIFICATION	0.14283549291773384	DESIGN
this uses a pathexpressionparser but notice that compound paths are not valid only bare names and simple paths	WITHOUT_CLASSIFICATION	0.9977113152545037	WITHOUT_CLASSIFICATION	0.002288684745496169	DESIGN
select p from p in class eg.person order by p.name p.address p	WITHOUT_CLASSIFICATION	0.9996486486336017	WITHOUT_CLASSIFICATION	3.513513663983409E-4	DESIGN
the reason for this is sql doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9995184381598324	WITHOUT_CLASSIFICATION	4.815618401676255E-4	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9991460001926926	WITHOUT_CLASSIFICATION	8.539998073073576E-4	DESIGN
default mode	WITHOUT_CLASSIFICATION	0.9998489022947395	WITHOUT_CLASSIFICATION	1.5109770526049878E-4	DESIGN
queryjoinfragment join = q.createjoinfragment(usethetastylejoin)	WITHOUT_CLASSIFICATION	0.9999059600010836	WITHOUT_CLASSIFICATION	9.403999891641424E-5	DESIGN
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9995583972622764	WITHOUT_CLASSIFICATION	4.4160273772357876E-4	DESIGN
after reset!	WITHOUT_CLASSIFICATION	0.9997134037498662	WITHOUT_CLASSIFICATION	2.865962501337961E-4	DESIGN
we don't need to worry about any condition in the on clause here (tofromfragmentstring) since anything in the on condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9987395882247604	WITHOUT_CLASSIFICATION	0.001260411775239503	DESIGN
bit_length feels a bit broken to me. we have to cast to char in order to pass when a numeric value is supplied. but of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. jay nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999948487768658	WITHOUT_CLASSIFICATION	5.1512231340882305E-6	DESIGN
dotcount>=2	WITHOUT_CLASSIFICATION	0.9998085459853474	WITHOUT_CLASSIFICATION	1.9145401465259115E-4	DESIGN
do the corresponding rhs	WITHOUT_CLASSIFICATION	0.9997937757009004	WITHOUT_CLASSIFICATION	2.062242990996153E-4	DESIGN
if its "id"	WITHOUT_CLASSIFICATION	0.9999333018546153	WITHOUT_CLASSIFICATION	6.669814538474645E-5	DESIGN
or its the id property name	WITHOUT_CLASSIFICATION	0.9999816034863419	WITHOUT_CLASSIFICATION	1.839651365808706E-5	DESIGN
join = q.createjoinfragment(usethetastylejoin)	WITHOUT_CLASSIFICATION	0.9999059600010836	WITHOUT_CLASSIFICATION	9.403999891641424E-5	DESIGN
important!!	WITHOUT_CLASSIFICATION	0.9998085459853474	WITHOUT_CLASSIFICATION	1.9145401465259115E-4	DESIGN
string[] keycols = collpersister.getkeycolumnnames()	WITHOUT_CLASSIFICATION	0.9999004109363802	WITHOUT_CLASSIFICATION	9.958906361994052E-5	DESIGN
an association	WITHOUT_CLASSIFICATION	0.9999046211809345	WITHOUT_CLASSIFICATION	9.537881906551139E-5	DESIGN
allow index() function	WITHOUT_CLASSIFICATION	0.9998490537228966	WITHOUT_CLASSIFICATION	1.509462771035492E-4	DESIGN
here assume sqlserver2005 using snapshot isolation which does not have this problem	WITHOUT_CLASSIFICATION	0.9933232017326817	WITHOUT_CLASSIFICATION	0.00667679826731823	DESIGN
the reason for this is sql doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9995184381598324	WITHOUT_CLASSIFICATION	4.815618401676255E-4	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9998085459853474	WITHOUT_CLASSIFICATION	1.9145401465259115E-4	DESIGN
collections of values	WITHOUT_CLASSIFICATION	0.9999357858121409	WITHOUT_CLASSIFICATION	6.421418785907276E-5	DESIGN
opening paren in new foo ( )	WITHOUT_CLASSIFICATION	0.9997031276456988	WITHOUT_CLASSIFICATION	2.968723543011474E-4	DESIGN
if we are inside a new result() but not inside a nested function	WITHOUT_CLASSIFICATION	0.9993171926034692	WITHOUT_CLASSIFICATION	6.828073965308621E-4	DESIGN
special case	WITHOUT_CLASSIFICATION	0.9997150398656056	WITHOUT_CLASSIFICATION	2.8496013439432516E-4	DESIGN
the name of an sql function	WITHOUT_CLASSIFICATION	0.9999831777894478	WITHOUT_CLASSIFICATION	1.682221055227016E-5	DESIGN
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9973668100275463	WITHOUT_CLASSIFICATION	0.0026331899724535645	DESIGN
this is basically a copy/paste of orderbyparser might be worth refactoring	WITHOUT_CLASSIFICATION	0.7329260778067777	WITHOUT_CLASSIFICATION	0.26707392219322246	DESIGN
select p from p in class eg.person group by p.name p.address p	WITHOUT_CLASSIFICATION	0.998751701715244	WITHOUT_CLASSIFICATION	0.001248298284756054	DESIGN
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.998972427618655	WITHOUT_CLASSIFICATION	0.0010275723813450328	DESIGN
register collection role	WITHOUT_CLASSIFICATION	0.9963038218218483	WITHOUT_CLASSIFICATION	0.0036961781781517677	DESIGN
the keyword used to specify an identity column if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9934276987251354	WITHOUT_CLASSIFICATION	0.006572301274864591	DESIGN
.getelementpropertymapping()	WITHOUT_CLASSIFICATION	0.9995848020766234	WITHOUT_CLASSIFICATION	4.1519792337664973E-4	DESIGN
crossjoins.add(name)	WITHOUT_CLASSIFICATION	0.9998085459853474	WITHOUT_CLASSIFICATION	1.9145401465259115E-4	DESIGN
ie no select clause in hql	WITHOUT_CLASSIFICATION	0.9995051345638488	WITHOUT_CLASSIFICATION	4.948654361511851E-4	DESIGN
initialize the set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9997870639612714	WITHOUT_CLASSIFICATION	2.1293603872860251E-4	DESIGN
ie. no select clause	WITHOUT_CLASSIFICATION	0.9998685114337545	WITHOUT_CLASSIFICATION	1.3148856624546263E-4	DESIGN
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9990183685089876	WITHOUT_CLASSIFICATION	9.816314910123655E-4	DESIGN
return the concrete type or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9991490193886241	WITHOUT_CLASSIFICATION	8.509806113758807E-4	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9998085459853474	WITHOUT_CLASSIFICATION	1.9145401465259115E-4	DESIGN
q.addcollection(collectionname collectionrole)	WITHOUT_CLASSIFICATION	0.9995795657065736	WITHOUT_CLASSIFICATION	4.204342934264473E-4	DESIGN
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9111112119057201	WITHOUT_CLASSIFICATION	0.08888878809427993	DESIGN
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9994828740021618	WITHOUT_CLASSIFICATION	5.171259978380333E-4	DESIGN
unfortunately this stuff can't be cached because it is per-invocation not constant for the querytranslator instance	WITHOUT_CLASSIFICATION	0.9994482169999768	WITHOUT_CLASSIFICATION	5.517830000232317E-4	DESIGN
this is the legacy behaviour for hql queries	WITHOUT_CLASSIFICATION	0.9986245312711198	WITHOUT_CLASSIFICATION	0.0013754687288801326	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9961892705551555	WITHOUT_CLASSIFICATION	0.0038107294448444253	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9961892705551555	WITHOUT_CLASSIFICATION	0.0038107294448444253	DESIGN
we have the form trim(trimsource) so we trim leading and trailing spaces early exit!!!!	WITHOUT_CLASSIFICATION	0.9999353971497681	WITHOUT_CLASSIFICATION	6.46028502319099E-5	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9961892705551555	WITHOUT_CLASSIFICATION	0.0038107294448444253	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9961892705551555	WITHOUT_CLASSIFICATION	0.0038107294448444253	DESIGN
need this since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9903828259615585	WITHOUT_CLASSIFICATION	0.009617174038441478	DESIGN
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.999993651455319	WITHOUT_CLASSIFICATION	6.348544681025365E-6	DESIGN
expressionterminators.add("") deliberately excluded	WITHOUT_CLASSIFICATION	0.9996315617468319	WITHOUT_CLASSIFICATION	3.684382531681878E-4	DESIGN
expressionopeners.add("") deliberately excluded	WITHOUT_CLASSIFICATION	0.9996315617468319	WITHOUT_CLASSIFICATION	3.684382531681878E-4	DESIGN
we have the form trim(from trimsource). this is functionally equivalent to trim(trimsource) early exit!!!!	WITHOUT_CLASSIFICATION	0.9980547830228769	WITHOUT_CLASSIFICATION	0.0019452169771232105	DESIGN
otherwise a trim-specification and/or a trim-character have been specified we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9988914790429532	WITHOUT_CLASSIFICATION	0.0011085209570468383	DESIGN
inside a between and expression	WITHOUT_CLASSIFICATION	0.9982714310092701	WITHOUT_CLASSIFICATION	0.0017285689907298872	DESIGN
were an odd or even number of nots encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999910650797825	WITHOUT_CLASSIFICATION	8.934920217393475E-6	DESIGN
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9993602986271637	WITHOUT_CLASSIFICATION	6.397013728362028E-4	DESIGN
cope with []	WITHOUT_CLASSIFICATION	0.9997836288093727	WITHOUT_CLASSIFICATION	2.1637119062733155E-4	DESIGN
cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.999785102989364	WITHOUT_CLASSIFICATION	2.1489701063599388E-4	DESIGN
note early return	WITHOUT_CLASSIFICATION	0.9998990098542095	WITHOUT_CLASSIFICATION	1.0099014579043377E-4	DESIGN
cope with a subselect	WITHOUT_CLASSIFICATION	0.9984695615020084	WITHOUT_CLASSIFICATION	0.0015304384979915524	DESIGN
cope with special cases of and not ()	WITHOUT_CLASSIFICATION	0.9999936757996009	WITHOUT_CLASSIFICATION	6.324200399163792E-6	DESIGN
close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999787676647459	WITHOUT_CLASSIFICATION	2.1232335254080366E-5	DESIGN
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.997536607864889	WITHOUT_CLASSIFICATION	0.002463392135111104	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.99997009984181	WITHOUT_CLASSIFICATION	2.990015819009051E-5	DESIGN
process a token mapping oo path expressions to sql expressions	WITHOUT_CLASSIFICATION	0.9998085583629509	WITHOUT_CLASSIFICATION	1.91441637049022E-4	DESIGN
open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9962093936421452	WITHOUT_CLASSIFICATION	0.0037906063578548293	DESIGN
cope with special cases of and not )	WITHOUT_CLASSIFICATION	0.9981743829896261	WITHOUT_CLASSIFICATION	0.001825617010373798	DESIGN
the next one up must also be	WITHOUT_CLASSIFICATION	0.999819827618257	WITHOUT_CLASSIFICATION	1.8017238174283584E-4	DESIGN
add any joins	WITHOUT_CLASSIFICATION	0.9997929002268596	WITHOUT_CLASSIFICATION	2.0709977314031376E-4	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.99997009984181	WITHOUT_CLASSIFICATION	2.990015819009051E-5	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9991460001926926	WITHOUT_CLASSIFICATION	8.539998073073576E-4	DESIGN
path expression	WITHOUT_CLASSIFICATION	0.9999734824410974	WITHOUT_CLASSIFICATION	2.6517558902539687E-5	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998798006185747	WITHOUT_CLASSIFICATION	1.2019938142537961E-4	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9995307259766266	WITHOUT_CLASSIFICATION	4.692740233733301E-4	DESIGN
anything else	WITHOUT_CLASSIFICATION	0.999976919049054	WITHOUT_CLASSIFICATION	2.3080950946057273E-5	DESIGN
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9998386094311754	WITHOUT_CLASSIFICATION	1.6139056882453728E-4	DESIGN
careful with this!	WITHOUT_CLASSIFICATION	0.999734887491856	WITHOUT_CLASSIFICATION	2.651125081440959E-4	DESIGN
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9998408648801532	WITHOUT_CLASSIFICATION	1.5913511984681997E-4	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9998708006035855	WITHOUT_CLASSIFICATION	1.2919939641461604E-4	DESIGN
notice no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999864439707937	WITHOUT_CLASSIFICATION	1.3556029206222602E-5	DESIGN
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999023521506594	WITHOUT_CLASSIFICATION	9.76478493406786E-5	DESIGN
start by looking for hql keywords	WITHOUT_CLASSIFICATION	0.9997070556331188	WITHOUT_CLASSIFICATION	2.9294436688128697E-4	DESIGN
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9989029395930508	WITHOUT_CLASSIFICATION	0.0010970604069492711	DESIGN
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9998027886601635	WITHOUT_CLASSIFICATION	1.9721133983655644E-4	DESIGN
now anything that is not a hql keyword	WITHOUT_CLASSIFICATION	0.9988609308497387	WITHOUT_CLASSIFICATION	0.001139069150261266	DESIGN
process the "old" hql style where aliases appear _first_ ie. using the in or in class constructions	WITHOUT_CLASSIFICATION	0.9999251493628307	WITHOUT_CLASSIFICATION	7.48506371692158E-5	DESIGN
treat it as a classname	WITHOUT_CLASSIFICATION	0.9996759948395024	WITHOUT_CLASSIFICATION	3.2400516049747386E-4	DESIGN
treat it as a path expression	WITHOUT_CLASSIFICATION	0.999947754531576	WITHOUT_CLASSIFICATION	5.2245468423878725E-5	DESIGN
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9994854639919811	WITHOUT_CLASSIFICATION	5.14536008018927E-4	DESIGN
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9998031993507281	WITHOUT_CLASSIFICATION	1.968006492719903E-4	DESIGN
allow odmg oql style from person p p.cars c	WITHOUT_CLASSIFICATION	0.9993318604703497	WITHOUT_CLASSIFICATION	6.681395296501713E-4	DESIGN
handle quoted strings	WITHOUT_CLASSIFICATION	0.9969930737367345	WITHOUT_CLASSIFICATION	0.0030069262632654694	DESIGN
object insertions updates and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999890929377566	WITHOUT_CLASSIFICATION	1.0907062243422702E-5	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9998708006035855	WITHOUT_CLASSIFICATION	1.2919939641461604E-4	DESIGN
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999210323268102	WITHOUT_CLASSIFICATION	7.896767318987371E-5	DESIGN
do replacements	WITHOUT_CLASSIFICATION	0.9997294873816186	WITHOUT_CLASSIFICATION	2.705126183814256E-4	DESIGN
handle hql2 collection syntax	WITHOUT_CLASSIFICATION	0.9967179823481122	WITHOUT_CLASSIFICATION	0.0032820176518879303	DESIGN
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9983412264594121	WITHOUT_CLASSIFICATION	0.0016587735405878973	DESIGN
abstractselectingdelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999080379689105	WITHOUT_CLASSIFICATION	9.196203108948667E-5	DESIGN
hilo params	WITHOUT_CLASSIFICATION	0.9998125554808717	WITHOUT_CLASSIFICATION	1.874445191283218E-4	DESIGN
sql = query	WITHOUT_CLASSIFICATION	0.9999501657660687	WITHOUT_CLASSIFICATION	4.983423393125817E-5	DESIGN
performance opt	WITHOUT_CLASSIFICATION	0.9990673626837648	WITHOUT_CLASSIFICATION	9.326373162350608E-4	DESIGN
sql = update	WITHOUT_CLASSIFICATION	0.9999951296150117	WITHOUT_CLASSIFICATION	4.870384988298115E-6	DESIGN
hilo config	WITHOUT_CLASSIFICATION	0.9998539495134069	WITHOUT_CLASSIFICATION	1.4605048659307426E-4	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999077553599094	WITHOUT_CLASSIFICATION	9.224464009056633E-5	DESIGN
don't allow comments on these insert statements as comments totally blow up the oracle getgeneratedkeys "support" (	WITHOUT_CLASSIFICATION	0.9999600072966797	WITHOUT_CLASSIFICATION	3.999270332044191E-5	DESIGN
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9958960796406532	WITHOUT_CLASSIFICATION	0.00410392035934681	DESIGN
throw new identifiergenerationexception("save associated object first or disable cascade for inverse association")	WITHOUT_CLASSIFICATION	0.9999883301642433	WITHOUT_CLASSIFICATION	1.166983575677214E-5	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.999777365586636	WITHOUT_CLASSIFICATION	2.226344133639222E-4	DESIGN
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999684342707876	WITHOUT_CLASSIFICATION	3.156572921230761E-5	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999177750034396	WITHOUT_CLASSIFICATION	8.222499656034597E-5	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999077553599094	WITHOUT_CLASSIFICATION	9.224464009056633E-5	DESIGN
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9987275438061901	WITHOUT_CLASSIFICATION	0.0012724561938098808	DESIGN
column and table should be renamed but it would break the public api	WITHOUT_CLASSIFICATION	0.9985745878309095	WITHOUT_CLASSIFICATION	0.0014254121690905428	DESIGN
loaded entity instances by entitykey	WITHOUT_CLASSIFICATION	0.9999638515413208	WITHOUT_CLASSIFICATION	3.61484586790995E-5	DESIGN
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9997016170292161	WITHOUT_CLASSIFICATION	2.9838297078388755E-4	DESIGN
the default	WITHOUT_CLASSIFICATION	0.9999599421013823	WITHOUT_CLASSIFICATION	4.005789861771721E-5	DESIGN
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence	WITHOUT_CLASSIFICATION	0.9838411854793505	WITHOUT_CLASSIFICATION	0.01615881452064951	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.999777365586636	WITHOUT_CLASSIFICATION	2.226344133639222E-4	DESIGN
identity map of collectionentry instances by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999860338987187	WITHOUT_CLASSIFICATION	1.39661012812798E-5	DESIGN
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999317299731019	WITHOUT_CLASSIFICATION	6.827002689809971E-5	DESIGN
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999319454175983	WITHOUT_CLASSIFICATION	6.805458240173849E-5	DESIGN
configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999664562023157	WITHOUT_CLASSIFICATION	3.354379768429751E-4	DESIGN
identifiergenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997277136397071	WITHOUT_CLASSIFICATION	2.722863602928392E-4	DESIGN
persistentidentifiergenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997277136397071	WITHOUT_CLASSIFICATION	2.722863602928392E-4	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9998412900221871	WITHOUT_CLASSIFICATION	1.5870997781280795E-4	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9998412900221871	WITHOUT_CLASSIFICATION	1.5870997781280795E-4	DESIGN
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9909586220354241	WITHOUT_CLASSIFICATION	0.009041377964575954	DESIGN
we just hit the last position	WITHOUT_CLASSIFICATION	0.9896628042785194	WITHOUT_CLASSIFICATION	0.010337195721480591	DESIGN
scroll ahead	WITHOUT_CLASSIFICATION	0.9998231278659264	WITHOUT_CLASSIFICATION	1.7687213407361878E-4	DESIGN
scroll backward	WITHOUT_CLASSIFICATION	0.9998401746129124	WITHOUT_CLASSIFICATION	1.5982538708752753E-4	DESIGN
we have not yet hit the last result	WITHOUT_CLASSIFICATION	0.9996746422434819	WITHOUT_CLASSIFICATION	3.253577565180531E-4	DESIGN
constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999442117863592	WITHOUT_CLASSIFICATION	5.578821364079768E-4	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997779288778254	WITHOUT_CLASSIFICATION	2.220711221745956E-4	DESIGN
criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999090457463612	WITHOUT_CLASSIFICATION	9.095425363874505E-5	DESIGN
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9976105617103804	WITHOUT_CLASSIFICATION	0.0023894382896195937	DESIGN
inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998737833318037	WITHOUT_CLASSIFICATION	1.2621666819639937E-4	DESIGN
constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999442117863592	WITHOUT_CLASSIFICATION	5.578821364079768E-4	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997779288778254	WITHOUT_CLASSIFICATION	2.220711221745956E-4	DESIGN
criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999090457463612	WITHOUT_CLASSIFICATION	9.095425363874505E-5	DESIGN
caches	WITHOUT_CLASSIFICATION	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
generators	WITHOUT_CLASSIFICATION	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
cache region is defined by the root-class in the hierarchy	WITHOUT_CLASSIFICATION	0.999957938720975	WITHOUT_CLASSIFICATION	4.20612790249031E-5	DESIGN
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999637598622242	WITHOUT_CLASSIFICATION	3.624013777586054E-5	DESIGN
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9972401510486752	WITHOUT_CLASSIFICATION	0.0027598489513247708	DESIGN
if we get here it is possible that we have a proxy 'in the way' of the merge map resolution note decided to put this here rather than in the above loop as i was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9924516380259909	WITHOUT_CLASSIFICATION	0.007548361974009172	DESIGN
jndi + serialization	WITHOUT_CLASSIFICATION	0.999921883057629	WITHOUT_CLASSIFICATION	7.811694237099161E-5	DESIGN
checking for named queries	WITHOUT_CLASSIFICATION	0.9994209768999336	WITHOUT_CLASSIFICATION	5.790231000663596E-4	DESIGN
stats	WITHOUT_CLASSIFICATION	0.9993101742843477	WITHOUT_CLASSIFICATION	6.898257156522587E-4	DESIGN
entitynotfounddelegate	WITHOUT_CLASSIFICATION	0.9995848020766234	WITHOUT_CLASSIFICATION	4.1519792337664973E-4	DESIGN
check named hql queries	WITHOUT_CLASSIFICATION	0.9984619214466657	WITHOUT_CLASSIFICATION	0.0015380785533343662	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.877097267151809	WITHOUT_CLASSIFICATION	0.12290273284819098	DESIGN
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9980354553111247	WITHOUT_CLASSIFICATION	0.0019645446888752233	DESIGN
from javax.naming.referenceable	WITHOUT_CLASSIFICATION	0.999359971084823	WITHOUT_CLASSIFICATION	6.400289151769346E-4	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999835795851271	WITHOUT_CLASSIFICATION	1.6420414872967742E-5	DESIGN
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9994449278470953	WITHOUT_CLASSIFICATION	5.550721529047692E-4	DESIGN
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9998236521415419	WITHOUT_CLASSIFICATION	1.763478584580448E-4	DESIGN
note early exit	WITHOUT_CLASSIFICATION	0.9999328050230188	WITHOUT_CLASSIFICATION	6.719497698112986E-5	DESIGN
for backward-compatability	WITHOUT_CLASSIFICATION	0.9996397413451621	WITHOUT_CLASSIFICATION	3.6025865483784277E-4	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.998347204501172	WITHOUT_CLASSIFICATION	0.0016527954988280358	DESIGN
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9998400459809597	WITHOUT_CLASSIFICATION	1.5995401904028464E-4	DESIGN
in case we were deserialized in a different jvm look for an instance with the same name (alternatively we could do an actual jndi lookup here.)	WITHOUT_CLASSIFICATION	0.9937647911539977	WITHOUT_CLASSIFICATION	0.006235208846002274	DESIGN
must add to jndi _after_ adding to hashmaps because some jndi servers use serialization	WITHOUT_CLASSIFICATION	0.99922672778585	WITHOUT_CLASSIFICATION	7.732722141499815E-4	DESIGN
make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9336965220661305	WITHOUT_CLASSIFICATION	0.06630347793386954	DESIGN
for each of the defined parameters make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999937203854082	WITHOUT_CLASSIFICATION	6.279614591700333E-6	DESIGN
we never need to apply locks to the sql	WITHOUT_CLASSIFICATION	0.9979561474241976	WITHOUT_CLASSIFICATION	0.002043852575802453	DESIGN
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995795657065736	WITHOUT_CLASSIFICATION	4.204342934264473E-4	DESIGN
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995295070255761	WITHOUT_CLASSIFICATION	4.704929744239035E-4	DESIGN
during deserialization we need to reconnect all proxies and collections to this session as well as the entityentry and collectionentry instances these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.7600761063285618	WITHOUT_CLASSIFICATION	0.23992389367143813	DESIGN
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999742752781248	WITHOUT_CLASSIFICATION	2.5724721875207277E-4	DESIGN
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998683109694956	WITHOUT_CLASSIFICATION	1.316890305045095E-4	DESIGN
final boolean forcecacherefresh	WITHOUT_CLASSIFICATION	0.9998930169376076	WITHOUT_CLASSIFICATION	1.0698306239246273E-4	DESIGN
final boolean forcecacherefresh	WITHOUT_CLASSIFICATION	0.9998930169376076	WITHOUT_CLASSIFICATION	1.0698306239246273E-4	DESIGN
first try to load it from the temp pc associated to this ss	WITHOUT_CLASSIFICATION	0.9998282147044412	WITHOUT_CLASSIFICATION	1.7178529555878926E-4	DESIGN
if the metadata allowed proxy creation and caller did not request forceful eager loading generate a proxy	WITHOUT_CLASSIFICATION	0.9999742049301702	WITHOUT_CLASSIFICATION	2.579506982983115E-5	DESIGN
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999739941384189	WITHOUT_CLASSIFICATION	2.6005861581093758E-5	DESIGN
/	WITHOUT_CLASSIFICATION	0.9996671979949383	WITHOUT_CLASSIFICATION	3.3280200506170273E-4	DESIGN
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.997481970995161	WITHOUT_CLASSIFICATION	0.0025180290048389207	DESIGN
after setting values to object entitymode	WITHOUT_CLASSIFICATION	0.9999104699255641	WITHOUT_CLASSIFICATION	8.953007443596768E-5	DESIGN
for ejb3	WITHOUT_CLASSIFICATION	0.9993830923589431	WITHOUT_CLASSIFICATION	6.169076410569137E-4	DESIGN
just ignore	WITHOUT_CLASSIFICATION	0.9994741591564849	WITHOUT_CLASSIFICATION	5.258408435150987E-4	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.98693317633636	WITHOUT_CLASSIFICATION	0.01306682366364002	DESIGN
saveorupdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996891282304118	WITHOUT_CLASSIFICATION	3.1087176958824236E-4	DESIGN
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996891282304118	WITHOUT_CLASSIFICATION	3.1087176958824236E-4	DESIGN
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996891282304118	WITHOUT_CLASSIFICATION	3.1087176958824236E-4	DESIGN
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996891282304118	WITHOUT_CLASSIFICATION	3.1087176958824236E-4	DESIGN
persistonflush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996891282304118	WITHOUT_CLASSIFICATION	3.1087176958824236E-4	DESIGN
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996891282304118	WITHOUT_CLASSIFICATION	3.1087176958824236E-4	DESIGN
saveorupdatecopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996891282304118	WITHOUT_CLASSIFICATION	3.1087176958824236E-4	DESIGN
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996521099856756	WITHOUT_CLASSIFICATION	3.47890014324403E-4	DESIGN
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996891282304118	WITHOUT_CLASSIFICATION	3.1087176958824236E-4	DESIGN
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996891282304118	WITHOUT_CLASSIFICATION	3.1087176958824236E-4	DESIGN
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996891282304118	WITHOUT_CLASSIFICATION	3.1087176958824236E-4	DESIGN
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9992172581905162	WITHOUT_CLASSIFICATION	7.827418094838733E-4	DESIGN
this is an internal error of some sort	WITHOUT_CLASSIFICATION	0.9935539820055611	WITHOUT_CLASSIFICATION	0.006446017994438842	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9987755913675898	WITHOUT_CLASSIFICATION	0.0012244086324101964	DESIGN
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9995169775718287	WITHOUT_CLASSIFICATION	4.830224281713736E-4	DESIGN
if it was previously unreferenced we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9995688457127546	WITHOUT_CLASSIFICATION	4.311542872453137E-4	DESIGN
not for internal use	WITHOUT_CLASSIFICATION	0.9969435371120655	WITHOUT_CLASSIFICATION	0.0030564628879344666	DESIGN
otherwise we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9978074104122704	WITHOUT_CLASSIFICATION	0.002192589587729512	DESIGN
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.6242207468803903	WITHOUT_CLASSIFICATION	0.3757792531196097	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9987755913675898	WITHOUT_CLASSIFICATION	0.0012244086324101964	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9987755913675898	WITHOUT_CLASSIFICATION	0.0012244086324101964	DESIGN
if it is initialized see if the underlying instance is contained since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9889697774878098	WITHOUT_CLASSIFICATION	0.011030222512190262	DESIGN
basically just an adapted copy of find(criteriaimpl)	WITHOUT_CLASSIFICATION	0.9988078255263074	WITHOUT_CLASSIFICATION	0.0011921744736926223	DESIGN
it is possible for this method to be called during flush processing so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9949009181240687	WITHOUT_CLASSIFICATION	0.005099081875931381	DESIGN
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9982608328453707	WITHOUT_CLASSIFICATION	0.0017391671546292786	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.999634671388069	WITHOUT_CLASSIFICATION	3.6532861193094417E-4	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.998347204501172	WITHOUT_CLASSIFICATION	0.0016527954988280358	DESIGN
we need to writeobject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.998385773375586	WITHOUT_CLASSIFICATION	0.001614226624414085	DESIGN
the old-time stand-by	WITHOUT_CLASSIFICATION	0.9997685643748293	WITHOUT_CLASSIFICATION	2.314356251706415E-4	DESIGN
parameter bind values	WITHOUT_CLASSIFICATION	0.9998564436816925	WITHOUT_CLASSIFICATION	1.4355631830755277E-4	DESIGN
parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9900831844655006	WITHOUT_CLASSIFICATION	0.009916815534499388	DESIGN
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9996062529819632	WITHOUT_CLASSIFICATION	3.9374701803690407E-4	DESIGN
execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995541028773657	WITHOUT_CLASSIFICATION	4.4589712263439526E-4	DESIGN
we have a cglib enhanced entity	WITHOUT_CLASSIFICATION	0.9991159848268004	WITHOUT_CLASSIFICATION	8.840151731996852E-4	DESIGN
we have a cglib enhanced entity	WITHOUT_CLASSIFICATION	0.9991159848268004	WITHOUT_CLASSIFICATION	8.840151731996852E-4	DESIGN
we have a javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9991159848268004	WITHOUT_CLASSIFICATION	8.840151731996852E-4	DESIGN
we have a javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9991159848268004	WITHOUT_CLASSIFICATION	8.840151731996852E-4	DESIGN
fieldinterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999080379689105	WITHOUT_CLASSIFICATION	9.196203108948667E-5	DESIGN
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988607620591234	WITHOUT_CLASSIFICATION	0.001139237940876474	DESIGN
let's assume that there is only one lazy fetch group for now!	WITHOUT_CLASSIFICATION	0.9999949000871827	WITHOUT_CLASSIFICATION	5.099912817193187E-6	DESIGN
fieldhandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999080379689105	WITHOUT_CLASSIFICATION	9.196203108948667E-5	DESIGN
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9957499340153577	WITHOUT_CLASSIFICATION	0.004250065984642245	DESIGN
should probably no-op commit/rollback here at least in jta scenarios	WITHOUT_CLASSIFICATION	0.9788548663228351	WITHOUT_CLASSIFICATION	0.02114513367716488	DESIGN
base expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996195358614866	WITHOUT_CLASSIFICATION	3.804641385134233E-4	DESIGN
various expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995232112156006	WITHOUT_CLASSIFICATION	4.7678878439935235E-4	DESIGN
explicitly perform no checking	WITHOUT_CLASSIFICATION	0.9982127351624909	WITHOUT_CLASSIFICATION	0.0017872648375090892	DESIGN
used from testsuite	WITHOUT_CLASSIFICATION	0.9640921539144598	WITHOUT_CLASSIFICATION	0.035907846085540256	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9997554382802449	WITHOUT_CLASSIFICATION	2.4456171975511506E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9960778072837705	WITHOUT_CLASSIFICATION	0.003922192716229619	DESIGN
register synch stats.connect()	WITHOUT_CLASSIFICATION	0.999702751626552	WITHOUT_CLASSIFICATION	2.9724837344800555E-4	DESIGN
noncritical swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9986933628363606	WITHOUT_CLASSIFICATION	0.001306637163639411	DESIGN
calls executebatch()	WITHOUT_CLASSIFICATION	0.9996527812699705	WITHOUT_CLASSIFICATION	3.472187300295235E-4	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999874414581579	WITHOUT_CLASSIFICATION	1.2558541842195619E-5	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999874414581579	WITHOUT_CLASSIFICATION	1.2558541842195619E-5	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999874414581579	WITHOUT_CLASSIFICATION	1.2558541842195619E-5	DESIGN
sybase driver (jconnect) throwing npe here in certain cases but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.993019421436007	WITHOUT_CLASSIFICATION	0.0069805785639929716	DESIGN
see explanation above	WITHOUT_CLASSIFICATION	0.9997766522695778	WITHOUT_CLASSIFICATION	2.2334773042224912E-4	DESIGN
if we are in the process of releasing no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.999883893941949	WITHOUT_CLASSIFICATION	1.1610605805109838E-4	DESIGN
early exit!!!!	WITHOUT_CLASSIFICATION	0.999835915497579	WITHOUT_CLASSIFICATION	1.6408450242095846E-4	DESIGN
resultset impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999080379689105	WITHOUT_CLASSIFICATION	9.196203108948667E-5	DESIGN
resultset impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999080379689105	WITHOUT_CLASSIFICATION	9.196203108948667E-5	DESIGN
refer to comment in statefulpersistencecontext.addcollection()	WITHOUT_CLASSIFICATION	0.9998115184429734	WITHOUT_CLASSIFICATION	1.8848155702653444E-4	DESIGN
connectionmanager.callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997277136397071	WITHOUT_CLASSIFICATION	2.722863602928392E-4	DESIGN
note success = false because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999980133343707	WITHOUT_CLASSIFICATION	1.9866656292645865E-6	DESIGN
we already have a callback registered either a local (org.hibernate.transaction) transaction has accepted callback responsibilities or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9997555436829095	WITHOUT_CLASSIFICATION	2.444563170904848E-4	DESIGN
the configured transaction-factory says it only supports local callback mode so no sense attempting to register a jta synchronization	WITHOUT_CLASSIFICATION	0.9953101458367068	WITHOUT_CLASSIFICATION	0.00468985416329319	DESIGN
transactions marked for rollback-only cause some tm impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9981961798488412	WITHOUT_CLASSIFICATION	0.0018038201511587455	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995799572346159	WITHOUT_CLASSIFICATION	4.2004276538410053E-4	DESIGN
postinitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999419696558868	WITHOUT_CLASSIFICATION	5.8030344113236575E-5	DESIGN
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9998466991300966	WITHOUT_CLASSIFICATION	1.5330086990335786E-4	DESIGN
todo for 4.0 private static final logger log = loggerfactory.getlogger( sqlstatementlogger.class ) this is the legacy logging 'category'	WITHOUT_CLASSIFICATION	0.6412653900794323	WITHOUT_CLASSIFICATION	0.3587346099205676	DESIGN
note that for sequential scrolling we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.998839660889899	WITHOUT_CLASSIFICATION	0.001160339110101013	DESIGN
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9930456733117317	WITHOUT_CLASSIFICATION	0.006954326688268418	DESIGN
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9937911672610737	WITHOUT_CLASSIFICATION	0.006208832738926196	DESIGN
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9997146806613507	WITHOUT_CLASSIFICATION	2.8531933864934275E-4	DESIGN
sequentially read the result set in reverse until we recognize a change in the key value. at that point we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999992809455783	WITHOUT_CLASSIFICATION	7.190544215708341E-7	DESIGN
read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999994151167291	WITHOUT_CLASSIFICATION	5.848832709824994E-7	DESIGN
finally read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999943576109636	WITHOUT_CLASSIFICATION	5.642389036466415E-6	DESIGN
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999981956383972	WITHOUT_CLASSIFICATION	1.804361602799272E-6	DESIGN
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9998748782499843	WITHOUT_CLASSIFICATION	1.251217500156353E-4	DESIGN
this is equivalent to the old behavior	WITHOUT_CLASSIFICATION	0.9994402693920591	WITHOUT_CLASSIFICATION	5.597306079408407E-4	DESIGN
if null owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999366467026259	WITHOUT_CLASSIFICATION	6.335329737404332E-5	DESIGN
final string querystring	WITHOUT_CLASSIFICATION	0.999864884817184	WITHOUT_CLASSIFICATION	1.3511518281590176E-4	DESIGN
if it was a reference to self don't need to nullify unless we are using native id generation in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9879203921649333	WITHOUT_CLASSIFICATION	0.012079607835066687	DESIGN
end of array start filling again from start	WITHOUT_CLASSIFICATION	0.9998158337305565	WITHOUT_CLASSIFICATION	1.8416626944346194E-4	DESIGN
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to persistentcollection#endread) we scan the internal loadingcollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endread processing.	WITHOUT_CLASSIFICATION	0.9724740156945224	WITHOUT_CLASSIFICATION	0.027525984305477615	DESIGN
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999035473529865	WITHOUT_CLASSIFICATION	9.645264701354526E-5	DESIGN
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9929263624784574	WITHOUT_CLASSIFICATION	0.00707363752154256	DESIGN
first we need to suspend any current jta transaction and obtain a jdbc connection	WITHOUT_CLASSIFICATION	0.9986831796406754	WITHOUT_CLASSIFICATION	0.0013168203593246185	DESIGN
getresultlist(results)	WITHOUT_CLASSIFICATION	0.9995848020766234	WITHOUT_CLASSIFICATION	4.1519792337664973E-4	DESIGN
if we only returned one entity query by key is more efficient	WITHOUT_CLASSIFICATION	0.9995062657199998	WITHOUT_CLASSIFICATION	4.937342800002298E-4	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.989909074793441	WITHOUT_CLASSIFICATION	0.010090925206558977	DESIGN
handle empty collection	WITHOUT_CLASSIFICATION	0.9917041464780304	WITHOUT_CLASSIFICATION	0.008295853521969583	DESIGN
else no collection element but also no owner	WITHOUT_CLASSIFICATION	0.9999926873980273	WITHOUT_CLASSIFICATION	7.312601972805057E-6	DESIGN
handle empty collections	WITHOUT_CLASSIFICATION	0.9972095868812864	WITHOUT_CLASSIFICATION	0.0027904131187136585	DESIGN
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9397631635574563	WITHOUT_CLASSIFICATION	0.060236836442543816	DESIGN
validate() instances of validatable	WITHOUT_CLASSIFICATION	0.9997946720924072	WITHOUT_CLASSIFICATION	2.0532790759279624E-4	DESIGN
if we know there is exactly 1 row we can skip. it would be great if we could _always_ skip this it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9222582618170142	WITHOUT_CLASSIFICATION	0.07774173818298577	DESIGN
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9981718157509273	WITHOUT_CLASSIFICATION	0.001828184249072667	DESIGN
null version means the object is in the process of being loaded somewhere else in the resultset	WITHOUT_CLASSIFICATION	0.9999880681494113	WITHOUT_CLASSIFICATION	1.1931850588601298E-5	DESIGN
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9996351976022507	WITHOUT_CLASSIFICATION	3.648023977492479E-4	DESIGN
use the id passed in	WITHOUT_CLASSIFICATION	0.9998293771056076	WITHOUT_CLASSIFICATION	1.7062289439246219E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.999635857863973	WITHOUT_CLASSIFICATION	3.641421360269457E-4	DESIGN
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9997192299074941	WITHOUT_CLASSIFICATION	2.807700925059697E-4	DESIGN
no point doing this if none was requested	WITHOUT_CLASSIFICATION	0.9999225452651316	WITHOUT_CLASSIFICATION	7.745473486840672E-5	DESIGN
if the object is already loaded return the loaded one	WITHOUT_CLASSIFICATION	0.9999785023309253	WITHOUT_CLASSIFICATION	2.1497669074640483E-5	DESIGN
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.999415847760478	WITHOUT_CLASSIFICATION	5.841522395219858E-4	DESIGN
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9989587727898149	WITHOUT_CLASSIFICATION	0.0010412272101850287	DESIGN
the load() which takes an entity does not pass an entityname	WITHOUT_CLASSIFICATION	0.9998812962140753	WITHOUT_CLASSIFICATION	1.1870378592483792E-4	DESIGN
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9994214829967542	WITHOUT_CLASSIFICATION	5.785170032458402E-4	DESIGN
look for a proxy	WITHOUT_CLASSIFICATION	0.9999288866656224	WITHOUT_CLASSIFICATION	7.111333437753993E-5	DESIGN
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9985297508985941	WITHOUT_CLASSIFICATION	0.001470249101405908	DESIGN
its the given optional object	WITHOUT_CLASSIFICATION	0.9999271946404311	WITHOUT_CLASSIFICATION	7.280535956886185E-5	DESIGN
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9990762163614143	WITHOUT_CLASSIFICATION	9.237836385856802E-4	DESIGN
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9981010638812564	WITHOUT_CLASSIFICATION	0.0018989361187435646	DESIGN
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9995197992044186	WITHOUT_CLASSIFICATION	4.8020079558136437E-4	DESIGN
will be ignored using the existing entry instead	WITHOUT_CLASSIFICATION	0.999845460107991	WITHOUT_CLASSIFICATION	1.5453989200888684E-4	DESIGN
key is an entity involved with the operation performed by the listener value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999868910687	WITHOUT_CLASSIFICATION	1.310893138903656E-8	DESIGN
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9861497278936425	WITHOUT_CLASSIFICATION	0.013850272106357498	DESIGN
get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9995999033518751	WITHOUT_CLASSIFICATION	4.0009664812485214E-4	DESIGN
ok in normal hibernate usage to delete a detached entity jpa however forbids it thus this is a hook for hem to affect this behavior	WITHOUT_CLASSIFICATION	0.996919288725408	WITHOUT_CLASSIFICATION	0.003080711274591893	DESIGN
the entry will be removed after the flush and will no longer override the stale snapshot this is now handled by removeentity() in entitydeleteaction persistencecontext.removedatabasesnapshot(key)	WITHOUT_CLASSIFICATION	0.9983357502132627	WITHOUT_CLASSIFICATION	0.001664249786737258	DESIGN
addinitializedcollection(collection persister id)	WITHOUT_CLASSIFICATION	0.9988246397341806	WITHOUT_CLASSIFICATION	0.0011753602658194217	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9998505138422801	WITHOUT_CLASSIFICATION	1.4948615771986608E-4	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9998505138422801	WITHOUT_CLASSIFICATION	1.4948615771986608E-4	DESIGN
|| oj.getjoinable().consumescollectionalias()	WITHOUT_CLASSIFICATION	0.9995723722552471	WITHOUT_CLASSIFICATION	4.276277447528883E-4	DESIGN
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9699963449336608	WITHOUT_CLASSIFICATION	0.030003655066339178	DESIGN
code to handle subclasses of topclass	WITHOUT_CLASSIFICATION	0.9946065312312274	WITHOUT_CLASSIFICATION	0.005393468768772511	DESIGN
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999943777096897	WITHOUT_CLASSIFICATION	5.6222903102814955E-6	DESIGN
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999277763615889	WITHOUT_CLASSIFICATION	7.222363841108096E-5	DESIGN
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.998646722363865	WITHOUT_CLASSIFICATION	0.0013532776361350786	DESIGN
synchronized to avoid multi-thread access issues defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999493041349569	WITHOUT_CLASSIFICATION	5.0695865043111356E-5	DESIGN
allows various loaders (ok mainly the queryloader ) to check whether scrolling of their result set should be allowed. by default it is allowed.	WITHOUT_CLASSIFICATION	0.9986653044241136	WITHOUT_CLASSIFICATION	0.0013346955758863322	DESIGN
before adding to collection!	WITHOUT_CLASSIFICATION	0.9997991089869986	WITHOUT_CLASSIFICATION	2.0089101300135918E-4	DESIGN
if the current depth is 0 the root thing being loaded is the many-to-many collection itself. here it is alright to use an inner join	WITHOUT_CLASSIFICATION	0.9999514601463244	WITHOUT_CLASSIFICATION	4.853985367561417E-5	DESIGN
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999941263968027	WITHOUT_CLASSIFICATION	5.873603197281244E-6	DESIGN
simple because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element	WITHOUT_CLASSIFICATION	0.9993663172384203	WITHOUT_CLASSIFICATION	6.336827615797531E-4	DESIGN
a composite key	WITHOUT_CLASSIFICATION	0.9995184792327685	WITHOUT_CLASSIFICATION	4.815207672314424E-4	DESIGN
if no batch use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999350377752458	WITHOUT_CLASSIFICATION	6.496222475412229E-5	DESIGN
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9871280063480906	WITHOUT_CLASSIFICATION	0.012871993651909365	DESIGN
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9957844736765272	WITHOUT_CLASSIFICATION	0.004215526323472763	DESIGN
&& etype.isreferencetoprimarykey()	WITHOUT_CLASSIFICATION	0.9995398516345543	WITHOUT_CLASSIFICATION	4.6014836544576513E-4	DESIGN
it might still need to apply a collection ordering based on a many-to-many defined order-by	WITHOUT_CLASSIFICATION	0.7557977133639175	DESIGN	0.2442022866360824	WITHOUT_CLASSIFICATION
if a composite key use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching todo unnecessary for databases with ansi-style joins	WITHOUT_CLASSIFICATION	0.6692709647629688	WITHOUT_CLASSIFICATION	0.33072903523703123	DESIGN
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9978452785418	WITHOUT_CLASSIFICATION	0.0021547214581998375	DESIGN
we found it	WITHOUT_CLASSIFICATION	0.9997361372299968	WITHOUT_CLASSIFICATION	2.638627700031673E-4	DESIGN
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9996565812802853	WITHOUT_CLASSIFICATION	3.4341871971463984E-4	DESIGN
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9950337812735726	WITHOUT_CLASSIFICATION	0.00496621872642735	DESIGN
note unlike all other loaders this one is not multithreaded or cacheable!!	WITHOUT_CLASSIFICATION	0.9966678453637581	WITHOUT_CLASSIFICATION	0.003332154636241896	DESIGN
the user visible aliases which are unknown to the superclass these are not the actual "physical" sql aliases	WITHOUT_CLASSIFICATION	0.9999911221391319	WITHOUT_CLASSIFICATION	8.877860868200444E-6	DESIGN
root entity comes last	WITHOUT_CLASSIFICATION	0.9998113981184173	WITHOUT_CLASSIFICATION	1.8860188158278146E-4	DESIGN
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9998380045092936	WITHOUT_CLASSIFICATION	1.619954907063268E-4	DESIGN
alias may be null early exit	WITHOUT_CLASSIFICATION	0.9989069794635831	WITHOUT_CLASSIFICATION	0.0010930205364170142	DESIGN
if it is a compound path	WITHOUT_CLASSIFICATION	0.999764634384639	WITHOUT_CLASSIFICATION	2.3536561536089196E-4	DESIGN
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.999953746518384	WITHOUT_CLASSIFICATION	4.625348161609295E-5	DESIGN
if its the root criteria we are done	WITHOUT_CLASSIFICATION	0.9997129049623097	WITHOUT_CLASSIFICATION	2.8709503769035633E-4	DESIGN
otherwise recurse	WITHOUT_CLASSIFICATION	0.9999373995311367	WITHOUT_CLASSIFICATION	6.260046886329024E-5	DESIGN
the criteria instance	WITHOUT_CLASSIFICATION	0.9998226729066738	WITHOUT_CLASSIFICATION	1.773270933262082E-4	DESIGN
the entity name	WITHOUT_CLASSIFICATION	0.9999045126641143	WITHOUT_CLASSIFICATION	9.548733588582268E-5	DESIGN
not found in inner query try the outer query	WITHOUT_CLASSIFICATION	0.9994965727074985	WITHOUT_CLASSIFICATION	5.03427292501489E-4	DESIGN
not found in inner query try the outer query	WITHOUT_CLASSIFICATION	0.9994965727074985	WITHOUT_CLASSIFICATION	5.03427292501489E-4	DESIGN
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9993760901685227	WITHOUT_CLASSIFICATION	6.239098314772433E-4	DESIGN
should never happen i think	WITHOUT_CLASSIFICATION	0.9990961568385069	WITHOUT_CLASSIFICATION	9.03843161493197E-4	DESIGN
detect discriminator values	WITHOUT_CLASSIFICATION	0.9999246205337677	WITHOUT_CLASSIFICATION	7.5379466232228E-5	DESIGN
convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9986498421592475	WITHOUT_CLASSIFICATION	0.001350157840752509	DESIGN
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.992651438167538	WITHOUT_CLASSIFICATION	0.0073485618324620776	DESIGN
it does not refer to an alias of a projection look for a property	WITHOUT_CLASSIFICATION	0.9995026906916347	WITHOUT_CLASSIFICATION	4.97309308365356E-4	DESIGN
otherwise this is an ordinary value.	WITHOUT_CLASSIFICATION	0.999801122846956	WITHOUT_CLASSIFICATION	1.9887715304397598E-4	DESIGN
currently not cachable if autodiscover types is in effect (e.g. "select ")	WITHOUT_CLASSIFICATION	0.9989124665078697	WITHOUT_CLASSIFICATION	0.0010875334921303268	DESIGN
private final string[] sqlaliases private final string[] sqlaliassuffixes	WITHOUT_CLASSIFICATION	0.9982601555049263	WITHOUT_CLASSIFICATION	0.0017398444950736938	DESIGN
this is only needed (afaict) for resulttransformer processing	WITHOUT_CLASSIFICATION	0.998380100179957	WITHOUT_CLASSIFICATION	0.0016198998200430016	DESIGN
determine if the collection elements are entities	WITHOUT_CLASSIFICATION	0.9998090999839947	WITHOUT_CLASSIFICATION	1.9090001600527486E-4	DESIGN
build an array with indices equal to the total number of actual returns in the result hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.999998946972004	WITHOUT_CLASSIFICATION	1.0530279960191663E-6	DESIGN
replace {.} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9987760951987963	WITHOUT_CLASSIFICATION	0.0012239048012036883	DESIGN
no additional open braces found in the string append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9998678253084753	WITHOUT_CLASSIFICATION	1.3217469152469597E-4	DESIGN
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999258812821834	WITHOUT_CLASSIFICATION	7.41187178166522E-5	DESIGN
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9998446947065119	WITHOUT_CLASSIFICATION	1.553052934880434E-4	DESIGN
passing through anything we do not know to support jdbc escape sequences hb-898	WITHOUT_CLASSIFICATION	0.9694433630634888	WITHOUT_CLASSIFICATION	0.030556636936511183	DESIGN
passing through anything we do not know to support jdbc escape sequences hb-898	WITHOUT_CLASSIFICATION	0.9694433630634888	WITHOUT_CLASSIFICATION	0.030556636936511183	DESIGN
the current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9983203489780064	WITHOUT_CLASSIFICATION	0.0016796510219937424	DESIGN
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.999109040777948	WITHOUT_CLASSIFICATION	8.90959222051841E-4	DESIGN
possibly handle something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999281514843997	WITHOUT_CLASSIFICATION	7.184851560032994E-5	DESIGN
let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9991113476882284	WITHOUT_CLASSIFICATION	8.886523117716663E-4	DESIGN
private final list persisters = new arraylist()	WITHOUT_CLASSIFICATION	0.9990395458597946	WITHOUT_CLASSIFICATION	9.604541402053649E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9960778072837705	WITHOUT_CLASSIFICATION	0.003922192716229619	DESIGN
note early exit!	WITHOUT_CLASSIFICATION	0.9998966820466907	WITHOUT_CLASSIFICATION	1.0331795330933977E-4	DESIGN
private final list scalartypes = new arraylist() private final list scalarcolumnaliases = new arraylist()	WITHOUT_CLASSIFICATION	0.9997918276873395	WITHOUT_CLASSIFICATION	2.0817231266039355E-4	DESIGN
now process the returns	WITHOUT_CLASSIFICATION	0.9999691341573966	WITHOUT_CLASSIFICATION	3.086584260327756E-5	DESIGN
private list collectionowneraliases = new arraylist() private list collectionaliases = new arraylist() private list collectionpersisters = new arraylist() private list collectionresults = new arraylist()	WITHOUT_CLASSIFICATION	0.999621566431719	WITHOUT_CLASSIFICATION	3.7843356828103265E-4	DESIGN
already been processed	WITHOUT_CLASSIFICATION	0.9997395383593959	WITHOUT_CLASSIFICATION	2.604616406040451E-4	DESIGN
already been processed	WITHOUT_CLASSIFICATION	0.9997395383593959	WITHOUT_CLASSIFICATION	2.604616406040451E-4	DESIGN
make sure the owner alias is known	WITHOUT_CLASSIFICATION	0.9999371033781738	WITHOUT_CLASSIFICATION	6.289662182629223E-5	DESIGN
first break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9900880834057885	WITHOUT_CLASSIFICATION	0.009911916594211602	DESIGN
scalarcolumnaliases.add( typereturn.getcolumnalias() ) scalartypes.add( typereturn.gettype() )	WITHOUT_CLASSIFICATION	0.9991451090639453	WITHOUT_CLASSIFICATION	8.548909360547195E-4	DESIGN
if this return's alias has not been processed yet do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9997979296587406	WITHOUT_CLASSIFICATION	2.0207034125948705E-4	DESIGN
collectionowneraliases.add( owneralias )	WITHOUT_CLASSIFICATION	0.9991451090639453	WITHOUT_CLASSIFICATION	8.548909360547195E-4	DESIGN
for merging of versioned entities we consider the version having been changed only when 1) the two version values are different and 2) the target actually represents database state! this second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999631289764624	WITHOUT_CLASSIFICATION	3.6871023537537465E-5	DESIGN
this is the second pass through on a merge op so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9564579734312326	WITHOUT_CLASSIFICATION	0.04354202656876749	DESIGN
early exit	WITHOUT_CLASSIFICATION	0.999638873378648	WITHOUT_CLASSIFICATION	3.611266213520033E-4	DESIGN
cascade-save to collections after the collection owner was saved	WITHOUT_CLASSIFICATION	0.9987635868071008	WITHOUT_CLASSIFICATION	0.0012364131928992506	DESIGN
initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9982622807384389	WITHOUT_CLASSIFICATION	0.0017377192615609745	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9998834939706333	WITHOUT_CLASSIFICATION	1.1650602936672144E-4	DESIGN
currently only the hibernate-supplied dbtimestamptype is supported here	WITHOUT_CLASSIFICATION	0.9996656709286674	WITHOUT_CLASSIFICATION	3.3432907133253733E-4	DESIGN
this is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9933605353910483	WITHOUT_CLASSIFICATION	0.006639464608951739	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9991939468057656	WITHOUT_CLASSIFICATION	8.060531942345143E-4	DESIGN
not so sure this is even valid subtree. but if it was it'd represent two unrelated table references	WITHOUT_CLASSIFICATION	0.9999870599322945	WITHOUT_CLASSIFICATION	1.2940067705491824E-5	DESIGN
(not (gt a b) ) => (le a b)	WITHOUT_CLASSIFICATION	0.9561236301224629	WITHOUT_CLASSIFICATION	0.04387636987753696	DESIGN
private type[] sqlresulttypes	WITHOUT_CLASSIFICATION	0.9963403137404714	WITHOUT_CLASSIFICATION	0.0036596862595285754	DESIGN
include the discriminator and class-level where but not filters	WITHOUT_CLASSIFICATION	0.9999568496219953	WITHOUT_CLASSIFICATION	4.315037800484063E-5	DESIGN
sqlresulttypes = selectclause.getsqlresulttypes()	WITHOUT_CLASSIFICATION	0.9998831097803876	WITHOUT_CLASSIFICATION	1.1689021961233574E-4	DESIGN
by default	WITHOUT_CLASSIFICATION	0.9999018998138675	WITHOUT_CLASSIFICATION	9.810018613251616E-5	DESIGN
this is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9988822133306661	WITHOUT_CLASSIFICATION	0.0011177866693340187	DESIGN
-- loader implementation --	WITHOUT_CLASSIFICATION	0.9997695526634067	WITHOUT_CLASSIFICATION	2.3044733659317033E-4	DESIGN
-- loader overrides --	WITHOUT_CLASSIFICATION	0.999675508001866	WITHOUT_CLASSIFICATION	3.2449199813399857E-4	DESIGN
(not (is_null a b) ) => (is_not_null a b)	WITHOUT_CLASSIFICATION	0.9555946222024572	WITHOUT_CLASSIFICATION	0.04440537779754282	DESIGN
none because its the requested lock mode not the actual!	WITHOUT_CLASSIFICATION	0.997749676835678	WITHOUT_CLASSIFICATION	0.0022503231643220753	DESIGN
meant to handle dynamic instantiation queries	WITHOUT_CLASSIFICATION	0.9985692599494363	WITHOUT_CLASSIFICATION	0.0014307400505636763	DESIGN
--- query translator methods ---	WITHOUT_CLASSIFICATION	0.9993641560974916	WITHOUT_CLASSIFICATION	6.358439025083346E-4	DESIGN
-- implementation private methods --	WITHOUT_CLASSIFICATION	0.9965305264753559	WITHOUT_CLASSIFICATION	0.00346947352464424	DESIGN
deduplicate unique constraints sharing the same columns this is needed by hibernate annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999863630794009	WITHOUT_CLASSIFICATION	1.3636920599219978E-5	DESIGN
try to find out the name of the primary key to create it as identity if the identitygenerator is used	WITHOUT_CLASSIFICATION	0.9982671816117148	WITHOUT_CLASSIFICATION	0.0017328183882851622	DESIGN
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9620523179952694	WITHOUT_CLASSIFICATION	0.03794768200473063	DESIGN
prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999652857265966	WITHOUT_CLASSIFICATION	3.471427340331897E-5	DESIGN
used also for generation of fk names!	WITHOUT_CLASSIFICATION	0.9821155745414907	WITHOUT_CLASSIFICATION	0.017884425458509306	DESIGN
usually useless	WITHOUT_CLASSIFICATION	0.9998049537148231	WITHOUT_CLASSIFICATION	1.9504628517692725E-4	DESIGN
added this caching as i noticed that gettype() is being called multiple times	WITHOUT_CLASSIFICATION	0.9997872328927431	WITHOUT_CLASSIFICATION	2.1276710725703107E-4	DESIGN
do not add unique constraint on db not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9926920460011063	WITHOUT_CLASSIFICATION	0.007307953998893789	DESIGN
for backward compatibility disable this	WITHOUT_CLASSIFICATION	0.9994690059777444	WITHOUT_CLASSIFICATION	5.309940222555836E-4	DESIGN
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9990669292443417	WITHOUT_CLASSIFICATION	9.330707556582375E-4	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9995749869706633	WITHOUT_CLASSIFICATION	4.2501302933680167E-4	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9995749869706633	WITHOUT_CLASSIFICATION	4.2501302933680167E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9991733944785416	WITHOUT_CLASSIFICATION	8.26605521458523E-4	DESIGN
primary key constraint	WITHOUT_CLASSIFICATION	0.9998761282083553	WITHOUT_CLASSIFICATION	1.2387179164481785E-4	DESIGN
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999889192147564	WITHOUT_CLASSIFICATION	1.1080785243503713E-5	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9995863648122943	WITHOUT_CLASSIFICATION	4.136351877056238E-4	DESIGN
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9966259586300611	WITHOUT_CLASSIFICATION	0.003374041369938837	DESIGN
an identifier mapper => getkey will be included in the getnonduplicatedpropertyiterator() and checked later so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9977439603304528	WITHOUT_CLASSIFICATION	0.0022560396695471877	DESIGN
if the hibernate-mapping did not specify a schema/catalog use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping or as params they will already be initialized and will override the values set here (they are in identifiergeneratorproperties)	WITHOUT_CLASSIFICATION	0.9999942833345509	WITHOUT_CLASSIFICATION	5.716665449206374E-6	DESIGN
pass the entity-name if not a collection-id	WITHOUT_CLASSIFICATION	0.9996415375015343	WITHOUT_CLASSIFICATION	3.5846249846576534E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9991733944785416	WITHOUT_CLASSIFICATION	8.26605521458523E-4	DESIGN
primary key constraint	WITHOUT_CLASSIFICATION	0.9998761282083553	WITHOUT_CLASSIFICATION	1.2387179164481785E-4	DESIGN
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9992981934938959	WITHOUT_CLASSIFICATION	7.018065061041967E-4	DESIGN
needed to satisfy keyvalue	WITHOUT_CLASSIFICATION	0.9992835280546785	WITHOUT_CLASSIFICATION	7.164719453215443E-4	DESIGN
empty means no scoping	WITHOUT_CLASSIFICATION	0.9997364073490773	WITHOUT_CLASSIFICATION	2.635926509226809E-4	DESIGN
index should be last column listed	WITHOUT_CLASSIFICATION	0.9954086667460159	WITHOUT_CLASSIFICATION	0.004591333253984026	DESIGN
if it is a formula index use the element columns in the pk	WITHOUT_CLASSIFICATION	0.9991339431468673	WITHOUT_CLASSIFICATION	8.660568531326432E-4	DESIGN
don't create a unique key 'cos some databases don't like a uk on nullable columns	WITHOUT_CLASSIFICATION	0.9904420544325256	WITHOUT_CLASSIFICATION	0.00955794556747431	DESIGN
arraylist list = new arraylist()list.addall( getkey().getconstraintcolumns() )list.addall( getindex().getconstraintcolumns() )getcollectiontable().createuniquekey(list)	WITHOUT_CLASSIFICATION	0.9999601781516989	WITHOUT_CLASSIFICATION	3.982184830104609E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.9993240601353868	WITHOUT_CLASSIFICATION	6.759398646132469E-4	DESIGN
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9998489519964244	WITHOUT_CLASSIFICATION	1.5104800357559588E-4	DESIGN
todo we could just return all false	WITHOUT_CLASSIFICATION	0.9712152746584325	DESIGN	0.02878472534156752	WITHOUT_CLASSIFICATION
the case of a foreign key to something other than the pk is handled in createpropertyrefconstraints	WITHOUT_CLASSIFICATION	0.9987181109258759	WITHOUT_CLASSIFICATION	0.0012818890741241695	DESIGN
todo we could just return all false	WITHOUT_CLASSIFICATION	0.9712152746584325	DESIGN	0.02878472534156752	WITHOUT_CLASSIFICATION
if the property mapping consists of all formulas make it non-updateable	WITHOUT_CLASSIFICATION	0.9999645365555451	WITHOUT_CLASSIFICATION	3.546344445486956E-5	DESIGN
columnupdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9995723722552471	WITHOUT_CLASSIFICATION	4.276277447528883E-4	DESIGN
if the property mapping consists of all formulas make it insertable	WITHOUT_CLASSIFICATION	0.9999645365555451	WITHOUT_CLASSIFICATION	3.546344445486956E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999850815735944	WITHOUT_CLASSIFICATION	1.4918426405605324E-4	DESIGN
expected type is intrinsic here	WITHOUT_CLASSIFICATION	0.9991239482750782	WITHOUT_CLASSIFICATION	8.760517249217827E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9993240601353868	WITHOUT_CLASSIFICATION	6.759398646132469E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9993240601353868	WITHOUT_CLASSIFICATION	6.759398646132469E-4	DESIGN
return memberpersister.getpropertytype(propertyname)	WITHOUT_CLASSIFICATION	0.9996255900372856	WITHOUT_CLASSIFICATION	3.7440996271444015E-4	DESIGN
return memberpersister.tocolumns(alias propertyname)	WITHOUT_CLASSIFICATION	0.9996262660174824	WITHOUT_CLASSIFICATION	3.7373398251761117E-4	DESIGN
return memberpersister.gettype()	WITHOUT_CLASSIFICATION	0.9996255900372856	WITHOUT_CLASSIFICATION	3.7440996271444015E-4	DESIGN
&& !indexisformula	WITHOUT_CLASSIFICATION	0.9997904567738388	WITHOUT_CLASSIFICATION	2.0954322616118055E-4	DESIGN
return !isonetomany()	WITHOUT_CLASSIFICATION	0.9996302534015552	WITHOUT_CLASSIFICATION	3.697465984448577E-4	DESIGN
instanceof associationtype	WITHOUT_CLASSIFICATION	0.999475517702523	WITHOUT_CLASSIFICATION	5.244822974769484E-4	DESIGN
we need to determine the best way to know that two joinables represent a single many-to-many	WITHOUT_CLASSIFICATION	0.9880210495917859	WITHOUT_CLASSIFICATION	0.011978950408214178	DESIGN
strip leading ''	WITHOUT_CLASSIFICATION	0.9999623987037117	WITHOUT_CLASSIFICATION	3.760129628835981E-5	DESIGN
public boolean issubselectloadable()	WITHOUT_CLASSIFICATION	0.999835475394066	WITHOUT_CLASSIFICATION	1.645246059339477E-4	DESIGN
key	WITHOUT_CLASSIFICATION	0.9997018968399325	WITHOUT_CLASSIFICATION	2.981031600675152E-4	DESIGN
columns	WITHOUT_CLASSIFICATION	0.9994746409521573	WITHOUT_CLASSIFICATION	5.25359047842664E-4	DESIGN
sql statements	WITHOUT_CLASSIFICATION	0.9998107083443569	WITHOUT_CLASSIFICATION	1.8929165564315447E-4	DESIGN
extra information about the element type	WITHOUT_CLASSIFICATION	0.9961837075162281	WITHOUT_CLASSIFICATION	0.0038162924837720435	DESIGN
types	WITHOUT_CLASSIFICATION	0.9994131072389931	WITHOUT_CLASSIFICATION	5.86892761006923E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9991733944785416	WITHOUT_CLASSIFICATION	8.26605521458523E-4	DESIGN
private final string unquotedidentifiercolumnname	WITHOUT_CLASSIFICATION	0.9987905566113777	WITHOUT_CLASSIFICATION	0.0012094433886222083	DESIGN
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9995828599017111	WITHOUT_CLASSIFICATION	4.171400982888731E-4	DESIGN
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9997470183452299	WITHOUT_CLASSIFICATION	2.529816547701274E-4	DESIGN
nativesql collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9997728664423334	WITHOUT_CLASSIFICATION	2.2713355766655028E-4	DESIGN
unquotedkeycolumnnames = stringhelper.unquote(keycolumnaliases)	WITHOUT_CLASSIFICATION	0.9998831097803876	WITHOUT_CLASSIFICATION	1.1689021961233574E-4	DESIGN
element	WITHOUT_CLASSIFICATION	0.9993335132232826	WITHOUT_CLASSIFICATION	6.664867767174756E-4	DESIGN
nativesql collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9994921395862396	WITHOUT_CLASSIFICATION	5.078604137603908E-4	DESIGN
index and row select	WITHOUT_CLASSIFICATION	0.9998854809102606	WITHOUT_CLASSIFICATION	1.1451908973946328E-4	DESIGN
nativesql collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9994662148612715	WITHOUT_CLASSIFICATION	5.337851387284137E-4	DESIGN
unquotedidentifiercolumnname = identifiercolumnalias	WITHOUT_CLASSIFICATION	0.9998831097803876	WITHOUT_CLASSIFICATION	1.1689021961233574E-4	DESIGN
unquotedidentifiercolumnname = null	WITHOUT_CLASSIFICATION	0.999778836500295	WITHOUT_CLASSIFICATION	2.2116349970496038E-4	DESIGN
generate the sql	WITHOUT_CLASSIFICATION	0.9999207452082737	WITHOUT_CLASSIFICATION	7.925479172638618E-5	DESIGN
for non-arrays we don't need to know the element class elementtype.returnedclass()	WITHOUT_CLASSIFICATION	0.9987055385818143	WITHOUT_CLASSIFICATION	0.0012944614181857113	DESIGN
not all classpersisters implement propertymapping!	WITHOUT_CLASSIFICATION	0.9833826451617574	WITHOUT_CLASSIFICATION	0.01661735483824255	DESIGN
handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9916065026153981	WITHOUT_CLASSIFICATION	0.00839349738460191	DESIGN
handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9927094360346905	WITHOUT_CLASSIFICATION	0.00729056396530955	DESIGN
if there is a user-specified loader return that todo filters!?	WITHOUT_CLASSIFICATION	0.5800102169474528	WITHOUT_CLASSIFICATION	0.41998978305254714	DESIGN
take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9941971666411924	WITHOUT_CLASSIFICATION	0.005802833358807517	DESIGN
strip leading ''	WITHOUT_CLASSIFICATION	0.9999623987037117	WITHOUT_CLASSIFICATION	3.760129628835981E-5	DESIGN
run a subquery loader	WITHOUT_CLASSIFICATION	0.9979396075319081	WITHOUT_CLASSIFICATION	0.002060392468091741	DESIGN
needed by arrays	WITHOUT_CLASSIFICATION	0.9998245836932853	WITHOUT_CLASSIFICATION	1.7541630671458135E-4	DESIGN
todo something with formulas	WITHOUT_CLASSIFICATION	0.8427823682858282	WITHOUT_CLASSIFICATION	0.15721763171417186	DESIGN
an assertion	WITHOUT_CLASSIFICATION	0.9998554047303612	WITHOUT_CLASSIFICATION	1.4459526963879154E-4	DESIGN
remove all the old entries	WITHOUT_CLASSIFICATION	0.9998422846915255	WITHOUT_CLASSIFICATION	1.5771530847451284E-4	DESIGN
create all the new entries	WITHOUT_CLASSIFICATION	0.9999047972137957	WITHOUT_CLASSIFICATION	9.520278620423083E-5	DESIGN
&& !indexisformula	WITHOUT_CLASSIFICATION	0.9997904567738388	WITHOUT_CLASSIFICATION	2.0954322616118055E-4	DESIGN
&& !indexisformula	WITHOUT_CLASSIFICATION	0.9997904567738388	WITHOUT_CLASSIFICATION	2.0954322616118055E-4	DESIGN
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999309546909236	WITHOUT_CLASSIFICATION	6.904530907642521E-5	DESIGN
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999519186819708	WITHOUT_CLASSIFICATION	4.808131802916389E-5	DESIGN
==elementtype ??	WITHOUT_CLASSIFICATION	0.99998386611879	WITHOUT_CLASSIFICATION	1.6133881210039688E-5	DESIGN
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999978254164318	WITHOUT_CLASSIFICATION	2.1745835682472256E-6	DESIGN
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9993224879725061	WITHOUT_CLASSIFICATION	6.775120274939476E-4	DESIGN
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.999871965256999	WITHOUT_CLASSIFICATION	1.2803474300094412E-4	DESIGN
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.5795367480123712	WITHOUT_CLASSIFICATION	0.4204632519876289	DESIGN
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999990790150635	WITHOUT_CLASSIFICATION	9.209849366128719E-7	DESIGN
buf.append( selectfragment( lhsalias "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9951462976160997	WITHOUT_CLASSIFICATION	0.004853702383900225	DESIGN
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.999717997699007	WITHOUT_CLASSIFICATION	2.820023009929531E-4	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999259333083655	WITHOUT_CLASSIFICATION	7.406669163444638E-5	DESIGN
private final string roottablename	WITHOUT_CLASSIFICATION	0.9987905566113777	WITHOUT_CLASSIFICATION	0.0012094433886222083	DESIGN
initialization	WITHOUT_CLASSIFICATION	0.9999711713550403	WITHOUT_CLASSIFICATION	2.8828644959750258E-5	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9991733944785416	WITHOUT_CLASSIFICATION	8.26605521458523E-4	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999259333083655	WITHOUT_CLASSIFICATION	7.406669163444638E-5	DESIGN
execute the sql	WITHOUT_CLASSIFICATION	0.9998754075943266	WITHOUT_CLASSIFICATION	1.2459240567342918E-4	DESIGN
this could also just be true all the time	WITHOUT_CLASSIFICATION	0.9949852576163736	WITHOUT_CLASSIFICATION	0.005014742383626446	DESIGN
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9998534925914409	WITHOUT_CLASSIFICATION	1.465074085591922E-4	DESIGN
todo check this.	WITHOUT_CLASSIFICATION	0.5304870185563287	WITHOUT_CLASSIFICATION	0.46951298144367126	DESIGN
initialization	WITHOUT_CLASSIFICATION	0.9999711713550403	WITHOUT_CLASSIFICATION	2.8828644959750258E-5	DESIGN
properties of this class including inherited properties	WITHOUT_CLASSIFICATION	0.993095690179751	WITHOUT_CLASSIFICATION	0.0069043098202489946	DESIGN
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9961193584274018	WITHOUT_CLASSIFICATION	0.0038806415725980347	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9298738581475741	WITHOUT_CLASSIFICATION	0.07012614185242591	DESIGN
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an sql case	WITHOUT_CLASSIFICATION	0.9996535818575275	WITHOUT_CLASSIFICATION	3.46418142472497E-4	DESIGN
multitables	WITHOUT_CLASSIFICATION	0.9998085459853474	WITHOUT_CLASSIFICATION	1.9145401465259115E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9991733944785416	WITHOUT_CLASSIFICATION	8.26605521458523E-4	DESIGN
subclass closure properties	WITHOUT_CLASSIFICATION	0.9983716634066384	WITHOUT_CLASSIFICATION	0.0016283365933616176	DESIGN
subclasses	WITHOUT_CLASSIFICATION	0.9990709176009972	WITHOUT_CLASSIFICATION	9.290823990027294E-4	DESIGN
( (column) model.gettable().getprimarykey().getcolumniterator().next() ).getname()	WITHOUT_CLASSIFICATION	0.999857639291681	WITHOUT_CLASSIFICATION	1.4236070831905034E-4	DESIGN
( (column) sc.gettable().getprimarykey().getcolumniterator().next() ).getname()	WITHOUT_CLASSIFICATION	0.999857639291681	WITHOUT_CLASSIFICATION	1.4236070831905034E-4	DESIGN
don't need subclass tables because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9226308649390929	WITHOUT_CLASSIFICATION	0.07736913506090709	DESIGN
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9936385654591652	WITHOUT_CLASSIFICATION	0.006361434540834867	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999259333083655	WITHOUT_CLASSIFICATION	7.406669163444638E-5	DESIGN
properties of this class including inherited properties	WITHOUT_CLASSIFICATION	0.993095690179751	WITHOUT_CLASSIFICATION	0.0069043098202489946	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9298738581475741	WITHOUT_CLASSIFICATION	0.07012614185242591	DESIGN
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9998723790192077	WITHOUT_CLASSIFICATION	1.2762098079230314E-4	DESIGN
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999415019481739	WITHOUT_CLASSIFICATION	5.8498051826132776E-5	DESIGN
discriminator column	WITHOUT_CLASSIFICATION	0.9996156250283742	WITHOUT_CLASSIFICATION	3.8437497162580763E-4	DESIGN
initialization	WITHOUT_CLASSIFICATION	0.9999711713550403	WITHOUT_CLASSIFICATION	2.8828644959750258E-5	DESIGN
private final map propertytablenumbersbyname = new hashmap()	WITHOUT_CLASSIFICATION	0.9997223556197115	WITHOUT_CLASSIFICATION	2.776443802884994E-4	DESIGN
class + table	WITHOUT_CLASSIFICATION	0.9999738225939413	WITHOUT_CLASSIFICATION	2.617740605871853E-5	DESIGN
discriminator	WITHOUT_CLASSIFICATION	0.999808650942001	WITHOUT_CLASSIFICATION	1.9134905799908142E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9989222331714319	WITHOUT_CLASSIFICATION	0.0010777668285681663	DESIGN
subclasses	WITHOUT_CLASSIFICATION	0.9990709176009972	WITHOUT_CLASSIFICATION	9.290823990027294E-4	DESIGN
execute the sql	WITHOUT_CLASSIFICATION	0.9998754075943266	WITHOUT_CLASSIFICATION	1.2459240567342918E-4	DESIGN
joins	WITHOUT_CLASSIFICATION	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
propertytablenumbersbyname.put( prop.getname() join )	WITHOUT_CLASSIFICATION	0.9993121277020164	WITHOUT_CLASSIFICATION	6.878722979835035E-4	DESIGN
access cached sql	WITHOUT_CLASSIFICATION	0.9998927171532285	WITHOUT_CLASSIFICATION	1.0728284677150221E-4	DESIGN
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9990154378013519	WITHOUT_CLASSIFICATION	9.845621986479746E-4	DESIGN
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9998040650799201	WITHOUT_CLASSIFICATION	1.9593492007982872E-4	DESIGN
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9997348143033905	WITHOUT_CLASSIFICATION	2.651856966094843E-4	DESIGN
render the sql	WITHOUT_CLASSIFICATION	0.9997203179118129	WITHOUT_CLASSIFICATION	2.796820881871073E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999850815735944	WITHOUT_CLASSIFICATION	1.4918426405605324E-4	DESIGN
moved up from abstractentitypersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9961479473692867	WITHOUT_CLASSIFICATION	0.0038520526307131713	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995795657065736	WITHOUT_CLASSIFICATION	4.204342934264473E-4	DESIGN
the optional sql string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999330968993123	WITHOUT_CLASSIFICATION	6.690310068770174E-5	DESIGN
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9944625636457552	WITHOUT_CLASSIFICATION	0.005537436354244764	DESIGN
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9992093080122667	WITHOUT_CLASSIFICATION	7.906919877332592E-4	DESIGN
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9994784644165035	WITHOUT_CLASSIFICATION	5.215355834965416E-4	DESIGN
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9998420238239695	WITHOUT_CLASSIFICATION	1.5797617603050053E-4	DESIGN
sql strings	WITHOUT_CLASSIFICATION	0.9995196597368453	WITHOUT_CLASSIFICATION	4.803402631546992E-4	DESIGN
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999276213784226	WITHOUT_CLASSIFICATION	7.237862157746313E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9989222331714319	WITHOUT_CLASSIFICATION	0.0010777668285681663	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995795657065736	WITHOUT_CLASSIFICATION	4.204342934264473E-4	DESIGN
identifier	WITHOUT_CLASSIFICATION	0.9992955835306199	WITHOUT_CLASSIFICATION	7.04416469380171E-4	DESIGN
version	WITHOUT_CLASSIFICATION	0.9995184959439263	WITHOUT_CLASSIFICATION	4.8150405607364866E-4	DESIGN
where string	WITHOUT_CLASSIFICATION	0.9999549222052133	WITHOUT_CLASSIFICATION	4.50777947866394E-5	DESIGN
subclass property closure	WITHOUT_CLASSIFICATION	0.999788452405254	WITHOUT_CLASSIFICATION	2.1154759474602543E-4	DESIGN
before add -)	WITHOUT_CLASSIFICATION	0.9998556679921854	WITHOUT_CLASSIFICATION	1.443320078146488E-4	DESIGN
handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9993419008412469	WITHOUT_CLASSIFICATION	6.580991587531423E-4	DESIGN
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9998054800000574	WITHOUT_CLASSIFICATION	1.9451999994250855E-4	DESIGN
note early exit here	WITHOUT_CLASSIFICATION	0.9999355416481204	WITHOUT_CLASSIFICATION	6.445835187957642E-5	DESIGN
object have been loaded with setreadonly(true) hhh-2236	WITHOUT_CLASSIFICATION	0.9999390230529707	WITHOUT_CLASSIFICATION	6.0976947029356824E-5	DESIGN
note this assumes something about how propertyselectfragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.999980534834483	WITHOUT_CLASSIFICATION	1.9465165517036608E-5	DESIGN
strip leading " "	WITHOUT_CLASSIFICATION	0.9999087565438972	WITHOUT_CLASSIFICATION	9.124345610273644E-5	DESIGN
if there is no resulting row return null	WITHOUT_CLASSIFICATION	0.9999682986095186	WITHOUT_CLASSIFICATION	3.170139048144337E-5	DESIGN
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9997811468280776	WITHOUT_CLASSIFICATION	2.1885317192241898E-4	DESIGN
null owner ok??	WITHOUT_CLASSIFICATION	0.999921742099751	WITHOUT_CLASSIFICATION	7.82579002489422E-5	DESIGN
null sql means that the only lazy properties are shared pk one-to-one associations which are handled differently in the type#nullsafeget code	WITHOUT_CLASSIFICATION	0.9968031119406052	WITHOUT_CLASSIFICATION	0.0031968880593949097	DESIGN
create a new from node for the referenced class.	WITHOUT_CLASSIFICATION	0.9996281584948381	WITHOUT_CLASSIFICATION	3.718415051617964E-4	DESIGN
the difficulty here is exactly what do we update in order to force the version to be incremented in the db	WITHOUT_CLASSIFICATION	0.9990988080199193	WITHOUT_CLASSIFICATION	9.011919800807648E-4	DESIGN
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9984312198877613	WITHOUT_CLASSIFICATION	0.0015687801122386605	DESIGN
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9994001279218996	WITHOUT_CLASSIFICATION	5.998720781004384E-4	DESIGN
enable for hhh-440 which we don't like	WITHOUT_CLASSIFICATION	0.9996662728210959	WITHOUT_CLASSIFICATION	3.3372717890403446E-4	DESIGN
aliases	WITHOUT_CLASSIFICATION	0.9993965294152564	WITHOUT_CLASSIFICATION	6.034705847436126E-4	DESIGN
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9997706289003359	WITHOUT_CLASSIFICATION	2.2937109966412032E-4	DESIGN
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9996942238621315	WITHOUT_CLASSIFICATION	3.057761378685358E-4	DESIGN
fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9995413947047479	WITHOUT_CLASSIFICATION	4.586052952520356E-4	DESIGN
embedded composite ids ( alias.idname1 alias.idname2 )	WITHOUT_CLASSIFICATION	0.9995374456499084	WITHOUT_CLASSIFICATION	4.6255435009154517E-4	DESIGN
todo skip formulas?	WITHOUT_CLASSIFICATION	0.7225169238340567	WITHOUT_CLASSIFICATION	0.2774830761659433	DESIGN
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9998215592428229	WITHOUT_CLASSIFICATION	1.7844075717722614E-4	DESIGN
do two passes for collection property-ref!	WITHOUT_CLASSIFICATION	0.9996020259515134	WITHOUT_CLASSIFICATION	3.979740484865961E-4	DESIGN
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999200379034433	WITHOUT_CLASSIFICATION	7.99620965566935E-5	DESIGN
todo eventually rowidname[j]	WITHOUT_CLASSIFICATION	0.7210441332610679	WITHOUT_CLASSIFICATION	0.2789558667389322	DESIGN
this is a property of the table which we are updating	WITHOUT_CLASSIFICATION	0.9998496679215391	WITHOUT_CLASSIFICATION	1.5033207846095205E-4	DESIGN
special shortcut for id properties skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999734647286554	WITHOUT_CLASSIFICATION	2.6535271344593065E-4	DESIGN
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9998626348495662	WITHOUT_CLASSIFICATION	1.3736515043376142E-4	DESIGN
nothing to do even if the operand is a parameter no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.7795814831759004	WITHOUT_CLASSIFICATION	0.22041851682409966	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9986860550698693	WITHOUT_CLASSIFICATION	0.0013139449301307097	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.998760734948505	WITHOUT_CLASSIFICATION	0.0012392650514949732	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9997195446682999	WITHOUT_CLASSIFICATION	2.804553317000101E-4	DESIGN
more specifically "? [op] datetime" 1) if the operator is minus the param needs to be of some datetime type 2) if the operator is plus the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9411352108926353	WITHOUT_CLASSIFICATION	0.058864789107364646	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.998760734948505	WITHOUT_CLASSIFICATION	0.0012392650514949732	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9986860550698693	WITHOUT_CLASSIFICATION	0.0013139449301307097	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9997195446682999	WITHOUT_CLASSIFICATION	2.804553317000101E-4	DESIGN
add the primary key	WITHOUT_CLASSIFICATION	0.9999591611423004	WITHOUT_CLASSIFICATION	4.0838857699571804E-5	DESIGN
delegate already handles pk columns	WITHOUT_CLASSIFICATION	0.9998869171655876	WITHOUT_CLASSIFICATION	1.1308283441241693E-4	DESIGN
we can't batch joined inserts especially not if it is an identity insert nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9998746492212567	WITHOUT_CLASSIFICATION	1.2535077874330604E-4	DESIGN
render the sql query	WITHOUT_CLASSIFICATION	0.9997381057287246	WITHOUT_CLASSIFICATION	2.6189427127543434E-4	DESIGN
write the values of fields onto the prepared statement - we must use the state at the time the insert was issued (cos of foreign key constraints). not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999826301201169	WITHOUT_CLASSIFICATION	1.7369879883115135E-5	DESIGN
todo shouldnt inserts be expectations.none?	WITHOUT_CLASSIFICATION	0.5666257229099814	DESIGN	0.4333742770900186	WITHOUT_CLASSIFICATION
don't bother trying to update we know there is no row there yet	WITHOUT_CLASSIFICATION	0.999907204319811	WITHOUT_CLASSIFICATION	9.279568018908569E-5	DESIGN
if all fields are null we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9983529009607388	WITHOUT_CLASSIFICATION	0.0016470990392612249	DESIGN
there is probably a row there so try to update if no rows were updated we will find out	WITHOUT_CLASSIFICATION	0.9999993020523757	WITHOUT_CLASSIFICATION	6.979476242562661E-7	DESIGN
note updates to joined tables can't be batched	WITHOUT_CLASSIFICATION	0.9995168162035875	WITHOUT_CLASSIFICATION	4.8318379641260604E-4	DESIGN
starting index	WITHOUT_CLASSIFICATION	0.9998318882088141	WITHOUT_CLASSIFICATION	1.6811179118600715E-4	DESIGN
now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999952029901713	WITHOUT_CLASSIFICATION	4.797009828633962E-6	DESIGN
write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9993779118368394	WITHOUT_CLASSIFICATION	6.220881631605104E-4	DESIGN
render the sql query	WITHOUT_CLASSIFICATION	0.9997381057287246	WITHOUT_CLASSIFICATION	2.6189427127543434E-4	DESIGN
do the key. the key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9998207163174542	WITHOUT_CLASSIFICATION	1.7928368254580863E-4	DESIGN
we should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.998887789964644	WITHOUT_CLASSIFICATION	0.0011122100353560351	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9990003875201681	WITHOUT_CLASSIFICATION	9.996124798318702E-4	DESIGN
note dirtyfields==null means we had no snapshot and we couldn't get one using select-before-update oldfields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyfields)	WITHOUT_CLASSIFICATION	0.914530804159061	WITHOUT_CLASSIFICATION	0.0854691958409391	DESIGN
more specifically "datetime [op] ?" 1) if the operator is minus we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is plus the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9990321061859126	WITHOUT_CLASSIFICATION	9.678938140872371E-4	DESIGN
for the case of dynamic-update="true" we need to generate the update sql	WITHOUT_CLASSIFICATION	0.999696600797483	WITHOUT_CLASSIFICATION	3.0339920251691756E-4	DESIGN
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9590541227390741	WITHOUT_CLASSIFICATION	0.04094587726092587	DESIGN
for the case of dynamic-update="false" or no snapshot we use the static sql	WITHOUT_CLASSIFICATION	0.9999231285438067	WITHOUT_CLASSIFICATION	7.687145619331143E-5	DESIGN
if not "get" then try "is"	WITHOUT_CLASSIFICATION	0.9996149424186958	WITHOUT_CLASSIFICATION	3.8505758130420124E-4	DESIGN
now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999867164569523	WITHOUT_CLASSIFICATION	1.3283543047664465E-5	DESIGN
for the case of dynamic-insert="true" we need to generate the insert sql	WITHOUT_CLASSIFICATION	0.9974608119530658	WITHOUT_CLASSIFICATION	0.0025391880469340933	DESIGN
for the case of dynamic-insert="true" we need to generate the insert sql	WITHOUT_CLASSIFICATION	0.9974608119530658	WITHOUT_CLASSIFICATION	0.0025391880469340933	DESIGN
for the case of dynamic-insert="false" use the static sql	WITHOUT_CLASSIFICATION	0.9997259370021833	WITHOUT_CLASSIFICATION	2.7406299781668306E-4	DESIGN
for the case of dynamic-insert="false" use the static sql	WITHOUT_CLASSIFICATION	0.9997259370021833	WITHOUT_CLASSIFICATION	2.7406299781668306E-4	DESIGN
not supported	WITHOUT_CLASSIFICATION	0.9996275052618393	WITHOUT_CLASSIFICATION	3.7249473816066694E-4	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9990003875201681	WITHOUT_CLASSIFICATION	9.996124798318702E-4	DESIGN
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9969665817302491	WITHOUT_CLASSIFICATION	0.003033418269750864	DESIGN
otherwise utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999789418635513	WITHOUT_CLASSIFICATION	2.1058136448699776E-5	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9472004772520777	WITHOUT_CLASSIFICATION	0.052799522747922364	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9472004772520777	WITHOUT_CLASSIFICATION	0.052799522747922364	DESIGN
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999484719824229	WITHOUT_CLASSIFICATION	5.152801757704809E-5	DESIGN
notice that we skip the first table it is the driving table!	WITHOUT_CLASSIFICATION	0.9999527400392748	WITHOUT_CLASSIFICATION	4.7259960725105674E-5	DESIGN
we can inner join to superclass tables (the row must be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9991656484609456	WITHOUT_CLASSIFICATION	8.343515390544082E-4	DESIGN
skip the driving table	WITHOUT_CLASSIFICATION	0.9999414488426073	WITHOUT_CLASSIFICATION	5.8551157392862E-5	DESIGN
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9710936280339645	WITHOUT_CLASSIFICATION	0.028906371966035564	DESIGN
here we work under the following assumptions ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime always results in a double 3) datetime - {something other than datetime} always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.999999991228388	WITHOUT_CLASSIFICATION	8.771611983159357E-9	DESIGN
render the where and from parts	WITHOUT_CLASSIFICATION	0.9994013283936644	WITHOUT_CLASSIFICATION	5.98671606335702E-4	DESIGN
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9674633366264378	WITHOUT_CLASSIFICATION	0.03253666337356221	DESIGN
now render the joins	WITHOUT_CLASSIFICATION	0.9998477203768256	WITHOUT_CLASSIFICATION	1.522796231745645E-4	DESIGN
this will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9989587214117261	WITHOUT_CLASSIFICATION	0.0010412785882738692	DESIGN
now render the select clause	WITHOUT_CLASSIFICATION	0.9995198364551894	WITHOUT_CLASSIFICATION	4.8016354481049823E-4	DESIGN
now tie it all together	WITHOUT_CLASSIFICATION	0.9998138183343269	WITHOUT_CLASSIFICATION	1.861816656729462E-4	DESIGN
insert/update/delete sql	WITHOUT_CLASSIFICATION	0.9995848020766234	WITHOUT_CLASSIFICATION	4.1519792337664973E-4	DESIGN
select sql	WITHOUT_CLASSIFICATION	0.9989060438652823	WITHOUT_CLASSIFICATION	0.0010939561347178021	DESIGN
no need to check laziness dirty checking handles that	WITHOUT_CLASSIFICATION	0.9954273048108876	WITHOUT_CLASSIFICATION	0.004572695189112347	DESIGN
fully resolve the map reference create implicit joins.	WITHOUT_CLASSIFICATION	0.9992809494636054	WITHOUT_CLASSIFICATION	7.190505363946544E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9803667368915496	WITHOUT_CLASSIFICATION	0.019633263108450302	DESIGN
the basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9998277593267337	WITHOUT_CLASSIFICATION	1.7224067326633368E-4	DESIGN
for dialects which are known to not support ansi-sql row-value-constructor syntax we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9312073318028383	WITHOUT_CLASSIFICATION	0.0687926681971617	DESIGN
due to the complexity in initializing the selectclause do not generate one here. if it is not found simply return null also do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9830037121119705	WITHOUT_CLASSIFICATION	0.01699628788802954	DESIGN
check the version unsaved-value if appropriate	WITHOUT_CLASSIFICATION	0.9983210829715071	WITHOUT_CLASSIFICATION	0.0016789170284929038	DESIGN
let this take precedence if defined since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9977375428366462	WITHOUT_CLASSIFICATION	0.0022624571633538355	DESIGN
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9988978829598039	WITHOUT_CLASSIFICATION	0.0011021170401962206	DESIGN
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9989920761848641	WITHOUT_CLASSIFICATION	0.0010079238151359565	DESIGN
/	WITHOUT_CLASSIFICATION	0.9996671979949383	WITHOUT_CLASSIFICATION	3.3280200506170273E-4	DESIGN
for property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999915363173725	WITHOUT_CLASSIFICATION	8.463682627506885E-6	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995795657065736	WITHOUT_CLASSIFICATION	4.204342934264473E-4	DESIGN
if there is no resulting row return null	WITHOUT_CLASSIFICATION	0.9999682986095186	WITHOUT_CLASSIFICATION	3.170139048144337E-5	DESIGN
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999278548378479	WITHOUT_CLASSIFICATION	7.214516215216726E-5	DESIGN
if this from element is a collection and the path is a collection property (maxindex etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9997544742178536	WITHOUT_CLASSIFICATION	2.455257821464174E-4	DESIGN
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995795657065736	WITHOUT_CLASSIFICATION	4.204342934264473E-4	DESIGN
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995948807162667	WITHOUT_CLASSIFICATION	4.0511928373340863E-4	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9998885031666718	WITHOUT_CLASSIFICATION	1.1149683332820477E-4	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9998885031666718	WITHOUT_CLASSIFICATION	1.1149683332820477E-4	DESIGN
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999937519508558	WITHOUT_CLASSIFICATION	6.248049144233163E-6	DESIGN
try "get"	WITHOUT_CLASSIFICATION	0.9996222588930179	WITHOUT_CLASSIFICATION	3.7774110698199175E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.999635857863973	WITHOUT_CLASSIFICATION	3.641421360269457E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.999635857863973	WITHOUT_CLASSIFICATION	3.641421360269457E-4	DESIGN
should be safe to only ever expect entitypersister references here	WITHOUT_CLASSIFICATION	0.9993137979466111	WITHOUT_CLASSIFICATION	6.862020533889644E-4	DESIGN
this page intentionally left blank )	WITHOUT_CLASSIFICATION	0.9985155490356059	WITHOUT_CLASSIFICATION	0.0014844509643941342	DESIGN
do not do anything	WITHOUT_CLASSIFICATION	0.9994105663422865	WITHOUT_CLASSIFICATION	5.894336577135299E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.999634671388069	WITHOUT_CLASSIFICATION	3.6532861193094417E-4	DESIGN
cant instantiate	WITHOUT_CLASSIFICATION	0.9997479592753479	WITHOUT_CLASSIFICATION	2.520407246520945E-4	DESIGN
if it is a property of an embedded component invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999760357338959	WITHOUT_CLASSIFICATION	2.3964266104087112E-5	DESIGN
otherwise	WITHOUT_CLASSIFICATION	0.9997641144153255	WITHOUT_CLASSIFICATION	2.3588558467432238E-4	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9994391919367656	WITHOUT_CLASSIFICATION	5.608080632344678E-4	DESIGN
note interfaces is assumed to already contain hibernateproxy.class	WITHOUT_CLASSIFICATION	0.9996154862269564	WITHOUT_CLASSIFICATION	3.845137730436338E-4	DESIGN
note interfaces is assumed to already contain hibernateproxy.class	WITHOUT_CLASSIFICATION	0.9996154862269564	WITHOUT_CLASSIFICATION	3.845137730436338E-4	DESIGN
hhh-2481 make sure the callback gets cleared otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9998446105521205	WITHOUT_CLASSIFICATION	1.5538944787939576E-4	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9999669930139291	WITHOUT_CLASSIFICATION	3.3006986070940025E-5	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9999669930139291	WITHOUT_CLASSIFICATION	3.3006986070940025E-5	DESIGN
note interface is assumed to already contain hibernateproxy.class	WITHOUT_CLASSIFICATION	0.9996821195406833	WITHOUT_CLASSIFICATION	3.178804593166005E-4	DESIGN
interfaces arguments	WITHOUT_CLASSIFICATION	0.9998540291357835	WITHOUT_CLASSIFICATION	1.4597086421652683E-4	DESIGN
todo!	WITHOUT_CLASSIFICATION	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
get the caller	WITHOUT_CLASSIFICATION	0.9999386981293769	WITHOUT_CLASSIFICATION	6.13018706232508E-5	DESIGN
get the caller principals	WITHOUT_CLASSIFICATION	0.9998670370942653	WITHOUT_CLASSIFICATION	1.3296290573472754E-4	DESIGN
private static final alias default_alias = new alias(10 null)	WITHOUT_CLASSIFICATION	0.9999539447266088	WITHOUT_CLASSIFICATION	4.605527339120777E-5	DESIGN
needed to bump this up to dotnode because that is the only thing which currently knows about the property-ref path in the correct format it is either this or recurse over the dotnodes constructing the property path just like dotnode does internally	WITHOUT_CLASSIFICATION	0.9950969860156349	WITHOUT_CLASSIFICATION	0.004903013984365029	DESIGN
if the identifier is quoted remove the quotes	WITHOUT_CLASSIFICATION	0.9993758448541976	WITHOUT_CLASSIFICATION	6.241551458023037E-4	DESIGN
truncate the identifier to the max alias length less the suffix length	WITHOUT_CLASSIFICATION	0.9999386122100825	WITHOUT_CLASSIFICATION	6.138778991749979E-5	DESIGN
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9953829949181997	WITHOUT_CLASSIFICATION	0.00461700508180021	DESIGN
null is not considered the same type as integer. $non-nls-1 $non-nls-1	WITHOUT_CLASSIFICATION	0.9927347851821873	WITHOUT_CLASSIFICATION	0.007265214817812683	DESIGN
the outerjoinsafterwhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9996856282408897	WITHOUT_CLASSIFICATION	3.143717591102414E-4	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.9993102836587924	WITHOUT_CLASSIFICATION	6.897163412077128E-4	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.9993102836587924	WITHOUT_CLASSIFICATION	6.897163412077128E-4	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.9993102836587924	WITHOUT_CLASSIFICATION	6.897163412077128E-4	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.9993102836587924	WITHOUT_CLASSIFICATION	6.897163412077128E-4	DESIGN
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999661823987659	WITHOUT_CLASSIFICATION	3.381760123415405E-5	DESIGN
if the condition is not already there	WITHOUT_CLASSIFICATION	0.9998487087017476	WITHOUT_CLASSIFICATION	1.5129129825246226E-4	DESIGN
dontspace.add("'")	WITHOUT_CLASSIFICATION	0.9998085459853474	WITHOUT_CLASSIFICATION	1.9145401465259115E-4	DESIGN
for mysql	WITHOUT_CLASSIFICATION	0.9993830923589431	WITHOUT_CLASSIFICATION	6.169076410569137E-4	DESIGN
hashmap columnsunique = new hashmap()	WITHOUT_CLASSIFICATION	0.9999547139808099	WITHOUT_CLASSIFICATION	4.528601919018607E-5	DESIGN
null caused some problems	WITHOUT_CLASSIFICATION	0.9975024042107765	WITHOUT_CLASSIFICATION	0.002497595789223441	DESIGN
package	WITHOUT_CLASSIFICATION	0.9960778072837705	WITHOUT_CLASSIFICATION	0.003922192716229619	DESIGN
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.999182074680228	WITHOUT_CLASSIFICATION	8.179253197718681E-4	DESIGN
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9994724333740059	WITHOUT_CLASSIFICATION	5.275666259941032E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9960778072837705	WITHOUT_CLASSIFICATION	0.003922192716229619	DESIGN
package	WITHOUT_CLASSIFICATION	0.9960778072837705	WITHOUT_CLASSIFICATION	0.003922192716229619	DESIGN
if true then execute db updates otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999353406540616	WITHOUT_CLASSIFICATION	6.465934593841323E-5	DESIGN
we only release the connection	WITHOUT_CLASSIFICATION	0.9996619011381348	WITHOUT_CLASSIFICATION	3.380988618651865E-4	DESIGN
deprecated option	WITHOUT_CLASSIFICATION	0.999360746992401	WITHOUT_CLASSIFICATION	6.392530075990217E-4	DESIGN
if an exception occurs during flush user must call rollback()	WITHOUT_CLASSIFICATION	0.9999704661441959	WITHOUT_CLASSIFICATION	2.95338558040731E-5	DESIGN
actually this last test is probably unnecessary since beforecompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999419969316434	WITHOUT_CLASSIFICATION	5.800306835647317E-5	DESIGN
this one only really needed for badly-behaved applications! (if the transactionmanager has a sychronization registered its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9922664386222176	WITHOUT_CLASSIFICATION	0.007733561377782431	DESIGN
create an dotnode ast for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9998848375238027	WITHOUT_CLASSIFICATION	1.1516247619728761E-4	DESIGN
if an exception occurs during flush user must call rollback()	WITHOUT_CLASSIFICATION	0.9999704661441959	WITHOUT_CLASSIFICATION	2.95338558040731E-5	DESIGN
if we could not register a synchronization do the before/after completion callbacks ourself (but we need to let jdbccontext know that this is what we are going to do so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9146928548510748	DESIGN	0.08530714514892522	WITHOUT_CLASSIFICATION
swallow it and continue to roll back jta transaction	WITHOUT_CLASSIFICATION	0.9999331467210557	WITHOUT_CLASSIFICATION	6.685327894426006E-5	DESIGN
so the transaction is already rolled back by jta spec	WITHOUT_CLASSIFICATION	0.9999962678528057	WITHOUT_CLASSIFICATION	3.732147194328701E-6	DESIGN
this method is a noop if there is a synchronization!	WITHOUT_CLASSIFICATION	0.9983019415873204	WITHOUT_CLASSIFICATION	0.0016980584126794918	DESIGN
two conditions where we need to transform this to a theta-join syntax 1) 'elem' is the "root from-element" in correlated subqueries 2) the dotnode.usethetastyleimplicitjoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9992675643749006	WITHOUT_CLASSIFICATION	7.324356250994354E-4	DESIGN
websphere however is not a sane jee/jta container	WITHOUT_CLASSIFICATION	0.997678601806986	WITHOUT_CLASSIFICATION	0.0023213981930140888	DESIGN
for sane jee/jta containers the transaction itself functions as its identifier	WITHOUT_CLASSIFICATION	0.9999746289120303	WITHOUT_CLASSIFICATION	2.537108796984222E-5	DESIGN
swallow the transaction was finished	WITHOUT_CLASSIFICATION	0.9999435945445472	WITHOUT_CLASSIFICATION	5.640545545277021E-5	DESIGN
all aliastoentitymapresulttransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995518743133802	WITHOUT_CLASSIFICATION	4.481256866197897E-4	DESIGN
create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9986104194874796	WITHOUT_CLASSIFICATION	0.0013895805125203526	DESIGN
all distinctrootentityresulttransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995518743133802	WITHOUT_CLASSIFICATION	4.481256866197897E-4	DESIGN
map of entitymode -> tuplizer	WITHOUT_CLASSIFICATION	0.999950672566515	WITHOUT_CLASSIFICATION	4.932743348488196E-5	DESIGN
this is a virtual id property	WITHOUT_CLASSIFICATION	0.9982603688925887	WITHOUT_CLASSIFICATION	0.0017396311074111838	DESIGN
this one needed only for guessentitymode()	WITHOUT_CLASSIFICATION	0.9993081227486037	WITHOUT_CLASSIFICATION	6.918772513963761E-4	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999856067198293	WITHOUT_CLASSIFICATION	1.4393280170684857E-5	DESIGN
todo move this to sf per hhh-3517 also see hhh-1907 and componentmetamodel	WITHOUT_CLASSIFICATION	0.9916482012383823	DESIGN	0.00835179876161773	WITHOUT_CLASSIFICATION
then the pojo tuplizer using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999497807856489	WITHOUT_CLASSIFICATION	5.021921435102179E-5	DESIGN
build the dynamic-map tuplizer	WITHOUT_CLASSIFICATION	0.9997077683769876	WITHOUT_CLASSIFICATION	2.922316230123108E-4	DESIGN
then dom4j tuplizer if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9996832683036178	WITHOUT_CLASSIFICATION	3.167316963823063E-4	DESIGN
build the dynamic-map tuplizer	WITHOUT_CLASSIFICATION	0.9997077683769876	WITHOUT_CLASSIFICATION	2.922316230123108E-4	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9998668732319456	WITHOUT_CLASSIFICATION	1.3312676805448428E-4	DESIGN
found a ctor but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9997965383161075	WITHOUT_CLASSIFICATION	2.0346168389255746E-4	DESIGN
private final sessionfactoryimplementor sessionfactory	WITHOUT_CLASSIFICATION	0.9979584820147974	WITHOUT_CLASSIFICATION	0.0020415179852025195	DESIGN
cached for efficiency	WITHOUT_CLASSIFICATION	0.9997611114053505	WITHOUT_CLASSIFICATION	2.3888859464960544E-4	DESIGN
public componentmetamodel(component component sessionfactoryimplementor sessionfactory) {	WITHOUT_CLASSIFICATION	0.9994220804625751	WITHOUT_CLASSIFICATION	5.779195374249113E-4	DESIGN
this.sessionfactory = sessionfactory	WITHOUT_CLASSIFICATION	0.9998831097803876	WITHOUT_CLASSIFICATION	1.1689021961233574E-4	DESIGN
it was not embedded so the argument is just an id	WITHOUT_CLASSIFICATION	0.9998457330648507	WITHOUT_CLASSIFICATION	1.5426693514920502E-4	DESIGN
then the pojo tuplizer using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999497807856489	WITHOUT_CLASSIFICATION	5.021921435102179E-5	DESIGN
then dom4j tuplizer if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9996832683036178	WITHOUT_CLASSIFICATION	3.167316963823063E-4	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9998668732319456	WITHOUT_CLASSIFICATION	1.3312676805448428E-4	DESIGN
then handle any user-defined entity modes	WITHOUT_CLASSIFICATION	0.9991955017610458	WITHOUT_CLASSIFICATION	8.044982389541871E-4	DESIGN
return currentid	WITHOUT_CLASSIFICATION	0.999829508453284	WITHOUT_CLASSIFICATION	1.7049154671602333E-4	DESIGN
reset the id	WITHOUT_CLASSIFICATION	0.9999483532197889	WITHOUT_CLASSIFICATION	5.1646780211148624E-5	DESIGN
origin.adddestination( destination ) this was the cause of hhh-242 origin.settype( from_fragment ) set the parent node type so that the ast is properly formed. the destination node will have all the from text. the parent node is a collection join too (voodoo - see joinprocessor)	WITHOUT_CLASSIFICATION	0.9972561920027162	WITHOUT_CLASSIFICATION	0.0027438079972838237	DESIGN
reset the version	WITHOUT_CLASSIFICATION	0.9999711126060791	WITHOUT_CLASSIFICATION	2.888739392088794E-5	DESIGN
the default is to simply not lazy fetch properties for now	WITHOUT_CLASSIFICATION	0.9987358476299235	WITHOUT_CLASSIFICATION	0.001264152370076485	DESIGN
add the second join the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9998503278298122	WITHOUT_CLASSIFICATION	1.4967217018793034E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9803667368915496	WITHOUT_CLASSIFICATION	0.019633263108450302	DESIGN
found a ctor but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9997965383161075	WITHOUT_CLASSIFICATION	2.0346168389255746E-4	DESIGN
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999369472052566	WITHOUT_CLASSIFICATION	6.305279474342911E-5	DESIGN
return getfactory().getsettings().getbytecodeprovider().getproxyfactoryfactory().buildproxyfactory()	WITHOUT_CLASSIFICATION	0.9996255900372856	WITHOUT_CLASSIFICATION	3.7440996271444015E-4	DESIGN
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9985879158318841	WITHOUT_CLASSIFICATION	0.001412084168115823	DESIGN
superclass entity-name	WITHOUT_CLASSIFICATION	0.9997845915143486	WITHOUT_CLASSIFICATION	2.154084856513975E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9803667368915496	WITHOUT_CLASSIFICATION	0.019633263108450302	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995795657065736	WITHOUT_CLASSIFICATION	4.204342934264473E-4	DESIGN
init the aliases after initing the constructornode	WITHOUT_CLASSIFICATION	0.9997483955900958	WITHOUT_CLASSIFICATION	2.5160440990419956E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9803667368915496	WITHOUT_CLASSIFICATION	0.019633263108450302	DESIGN
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9992004224315539	WITHOUT_CLASSIFICATION	7.995775684460175E-4	DESIGN
get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998965454323145	WITHOUT_CLASSIFICATION	1.0345456768543081E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995795657065736	WITHOUT_CLASSIFICATION	4.204342934264473E-4	DESIGN
note this affects the return value!	WITHOUT_CLASSIFICATION	0.9994535598999205	WITHOUT_CLASSIFICATION	5.464401000794474E-4	DESIGN
need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9993364668742131	WITHOUT_CLASSIFICATION	6.635331257869146E-4	DESIGN
add the type to the list of returned sqlresulttypes.	WITHOUT_CLASSIFICATION	0.9994512653595001	WITHOUT_CLASSIFICATION	5.487346404999371E-4	DESIGN
collection types	WITHOUT_CLASSIFICATION	0.9995449219304755	WITHOUT_CLASSIFICATION	4.550780695245238E-4	DESIGN
convenience methods relating to operations across arrays of types	WITHOUT_CLASSIFICATION	0.9992041429756034	WITHOUT_CLASSIFICATION	7.958570243965133E-4	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9997987577919918	WITHOUT_CLASSIFICATION	2.0124220800810008E-4	DESIGN
blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999272865064327	WITHOUT_CLASSIFICATION	7.271349356732658E-5	DESIGN
value is the entity name	WITHOUT_CLASSIFICATION	0.9998828904598976	WITHOUT_CLASSIFICATION	1.1710954010226549E-4	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9998505138422801	WITHOUT_CLASSIFICATION	1.4948615771986608E-4	DESIGN
generate id select fragment and then property select fragment for each expression just like generateselectfragments().	WITHOUT_CLASSIFICATION	0.9945828378271114	WITHOUT_CLASSIFICATION	0.0054171621728886	DESIGN
todo!	WITHOUT_CLASSIFICATION	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
xml is the entity name	WITHOUT_CLASSIFICATION	0.9994634599004325	WITHOUT_CLASSIFICATION	5.365400995675364E-4	DESIGN
special case this is the leaf of the containment graph even though not immutable	WITHOUT_CLASSIFICATION	0.9983989485207125	WITHOUT_CLASSIFICATION	0.0016010514792875125	DESIGN
tolerates nulls	WITHOUT_CLASSIFICATION	0.9998490052331063	WITHOUT_CLASSIFICATION	1.5099476689371715E-4	DESIGN
sqlresulttypelist	WITHOUT_CLASSIFICATION	0.9998085459853474	WITHOUT_CLASSIFICATION	1.9145401465259115E-4	DESIGN
metatype is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9976528633538627	WITHOUT_CLASSIFICATION	0.002347136646137292	DESIGN
get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9942944862645655	WITHOUT_CLASSIFICATION	0.005705513735434495	DESIGN
look through the fromelement's children to find any collections of values that should be fetched	WITHOUT_CLASSIFICATION	0.9998734993051581	WITHOUT_CLASSIFICATION	1.2650069484186047E-4	DESIGN
return associationtype.foreign_key_to_parent this is better but causes a transient object exception	WITHOUT_CLASSIFICATION	0.9840303187697865	WITHOUT_CLASSIFICATION	0.015969681230213504	DESIGN
use the lower case function name. remember whether we're in a select clause or not.	WITHOUT_CLASSIFICATION	0.9645130115856221	WITHOUT_CLASSIFICATION	0.03548698841437782	DESIGN
ident might be the name of a class.	WITHOUT_CLASSIFICATION	0.9949094075709076	WITHOUT_CLASSIFICATION	0.005090592429092403	DESIGN
todo!!!	WITHOUT_CLASSIFICATION	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
st.settimestamp( index new timestamp( cal.gettimeinmillis() ) cal ) jdk 1.5 only	WITHOUT_CLASSIFICATION	0.9995883987786133	WITHOUT_CLASSIFICATION	4.116012213867082E-4	DESIGN
st.setdate( index new date( cal.gettimeinmillis() ) cal ) jdk 1.5 only	WITHOUT_CLASSIFICATION	0.9995883987786133	WITHOUT_CLASSIFICATION	4.116012213867082E-4	DESIGN
both are timestamps	WITHOUT_CLASSIFICATION	0.9996160773477583	WITHOUT_CLASSIFICATION	3.839226522417726E-4	DESIGN
at least one is a plain old date	WITHOUT_CLASSIFICATION	0.9995823301284458	WITHOUT_CLASSIFICATION	4.1766987155429994E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9995572377752248	WITHOUT_CLASSIFICATION	4.427622247751266E-4	DESIGN
if the corresponding sql value is null the reader we got is null as well	WITHOUT_CLASSIFICATION	0.9999957485887809	WITHOUT_CLASSIFICATION	4.251411219129899E-6	DESIGN
fetch reader content up to the end - and put characters in a stringbuffer	WITHOUT_CLASSIFICATION	0.9982384224044261	WITHOUT_CLASSIFICATION	0.0017615775955740435	DESIGN
return stringbuffer content as a large string	WITHOUT_CLASSIFICATION	0.9999723849681473	WITHOUT_CLASSIFICATION	2.7615031852689705E-5	DESIGN
or types.longvarchar?	WITHOUT_CLASSIFICATION	0.9998230844023065	WITHOUT_CLASSIFICATION	1.769155976934927E-4	DESIGN
not called at runtime so doesn't matter if its slow )	WITHOUT_CLASSIFICATION	0.9987595594965728	WITHOUT_CLASSIFICATION	0.001240440503427268	DESIGN
todo	WITHOUT_CLASSIFICATION	0.627967009601584	DESIGN	0.37203299039841603	WITHOUT_CLASSIFICATION
chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999500575229104	WITHOUT_CLASSIFICATION	4.994247708951002E-5	DESIGN
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9992598255969198	WITHOUT_CLASSIFICATION	7.40174403080231E-4	DESIGN
cache this	WITHOUT_CLASSIFICATION	0.9967789681300739	WITHOUT_CLASSIFICATION	0.0032210318699261277	DESIGN
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9997477161279884	WITHOUT_CLASSIFICATION	2.5228387201160096E-4	DESIGN
forcefully remove leading ands from where fragments the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9997811454934314	WITHOUT_CLASSIFICATION	2.1885450656862845E-4	DESIGN
todo!!!!!!!	WITHOUT_CLASSIFICATION	0.9998085459853474	WITHOUT_CLASSIFICATION	1.9145401465259115E-4	DESIGN
create a new filters node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999275578229753	WITHOUT_CLASSIFICATION	7.244217702472541E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995795657065736	WITHOUT_CLASSIFICATION	4.204342934264473E-4	DESIGN
public object instantiate(object parent sessionimplementor session) throws hibernateexception	WITHOUT_CLASSIFICATION	0.9999426100571266	WITHOUT_CLASSIFICATION	5.7389942873411504E-5	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9998491722214495	WITHOUT_CLASSIFICATION	1.5082777855044213E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9998491722214495	WITHOUT_CLASSIFICATION	1.5082777855044213E-4	DESIGN
versiontype impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ note simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the timestamp datatype supported by sybase and sql server which are completely db-generated values	WITHOUT_CLASSIFICATION	0.9999999380096793	WITHOUT_CLASSIFICATION	6.19903206666482E-8	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9997987577919918	WITHOUT_CLASSIFICATION	2.0124220800810008E-4	DESIGN
not really necessary i guess	WITHOUT_CLASSIFICATION	0.9531186826534268	WITHOUT_CLASSIFICATION	0.046881317346573144	DESIGN
clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999957123692585	WITHOUT_CLASSIFICATION	4.2876307414163724E-6	DESIGN
we do not have to worry about queued additions to uninitialized collections since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9962961636817823	WITHOUT_CLASSIFICATION	0.003703836318217798	DESIGN
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9998060899188679	WITHOUT_CLASSIFICATION	1.9391008113205275E-4	DESIGN
remember the uk value	WITHOUT_CLASSIFICATION	0.99164461725101	WITHOUT_CLASSIFICATION	0.008355382748989917	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9995572377752248	WITHOUT_CLASSIFICATION	4.427622247751266E-4	DESIGN
processcollectionproperty(token q.getcollectionpersister(collectionrole) collectionname)	WITHOUT_CLASSIFICATION	0.9995795657065736	WITHOUT_CLASSIFICATION	4.204342934264473E-4	DESIGN
we must use the "remembered" uk value since it is not available from the entityentry during assembly	WITHOUT_CLASSIFICATION	0.9988586987524719	WITHOUT_CLASSIFICATION	0.00114130124752805	DESIGN
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9997887401562853	WITHOUT_CLASSIFICATION	2.112598437147056E-4	DESIGN
return false	WITHOUT_CLASSIFICATION	0.9999095759040033	WITHOUT_CLASSIFICATION	9.042409599674091E-5	DESIGN
this just handles a particular case of component projection perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.973814988687161	DESIGN	0.02618501131283905	WITHOUT_CLASSIFICATION
note we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999862191543739	WITHOUT_CLASSIFICATION	1.3780845626233818E-5	DESIGN
the key is the owning entity itself so get the id from the key	WITHOUT_CLASSIFICATION	0.9999413763405595	WITHOUT_CLASSIFICATION	5.8623659440542595E-5	DESIGN
if the original is a persistentcollection and that original was not flagged as dirty then reset the target's dirty flag here after the copy operation. </p> one thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know	WITHOUT_CLASSIFICATION	0.9999975878577575	WITHOUT_CLASSIFICATION	2.4121422424885642E-6	DESIGN
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9997868362831048	WITHOUT_CLASSIFICATION	2.1316371689507547E-4	DESIGN
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999296183848893	WITHOUT_CLASSIFICATION	7.038161511083461E-5	DESIGN
for a null target or a target which is the same as the original we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999076343332419	WITHOUT_CLASSIFICATION	9.236566675800748E-5	DESIGN
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here	WITHOUT_CLASSIFICATION	0.9997939515291943	WITHOUT_CLASSIFICATION	2.060484708057066E-4	DESIGN
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999170867805188	WITHOUT_CLASSIFICATION	8.291321948117607E-5	DESIGN
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9977948757975762	WITHOUT_CLASSIFICATION	0.0022051242024237207	DESIGN
check if it is already completely loaded but unowned	WITHOUT_CLASSIFICATION	0.9998597448015957	WITHOUT_CLASSIFICATION	1.402551984044011E-4	DESIGN
cache the actual id of the object not the value of the property-ref which might not be initialized	WITHOUT_CLASSIFICATION	0.99946864465627	WITHOUT_CLASSIFICATION	5.313553437300077E-4	DESIGN
todo!!!!!!!	WITHOUT_CLASSIFICATION	0.9998085459853474	WITHOUT_CLASSIFICATION	1.9145401465259115E-4	DESIGN
create a new collection wrapper to be initialized later	WITHOUT_CLASSIFICATION	0.9810876872858938	WITHOUT_CLASSIFICATION	0.018912312714106237	DESIGN
some jdbc drivers erroneously return an empty array here for a null db value /	WITHOUT_CLASSIFICATION	0.9994581495352162	WITHOUT_CLASSIFICATION	5.41850464783767E-4	DESIGN
our column span is the number of columns in the pk	WITHOUT_CLASSIFICATION	0.9998761649992498	WITHOUT_CLASSIFICATION	1.2383500075019424E-4	DESIGN
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.999948538837825	WITHOUT_CLASSIFICATION	5.14611621750149E-5	DESIGN
we already know current is not null	WITHOUT_CLASSIFICATION	0.996135602363823	WITHOUT_CLASSIFICATION	0.003864397636177026	DESIGN
the ids are fully resolved so compare them with isdirty() not ismodified()	WITHOUT_CLASSIFICATION	0.9981185780254676	WITHOUT_CLASSIFICATION	0.0018814219745324143	DESIGN
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9997895659477103	WITHOUT_CLASSIFICATION	2.1043405228979775E-4	DESIGN
----------------------------------------------------------- constructors	WITHOUT_CLASSIFICATION	0.999442117863592	WITHOUT_CLASSIFICATION	5.578821364079768E-4	DESIGN
----------------------------------------------------- instance variables	WITHOUT_CLASSIFICATION	0.9993865121898987	WITHOUT_CLASSIFICATION	6.134878101011913E-4	DESIGN
public static jdbcexception newjdbcexception(string string sqlexception root string sql) { string = string + " [" + sql + ']' log.error(string root) logexceptions(root) return new jdbcexception(string root sql) } public static jdbcexception newjdbcexception(string string sqlexception root) { log.error(string root) logexceptions(root) return new jdbcexception(string root) }	WITHOUT_CLASSIFICATION	0.999995000988545	WITHOUT_CLASSIFICATION	4.999011454975044E-6	DESIGN
--------------------------------------------------------- public methods	WITHOUT_CLASSIFICATION	0.999404116382579	WITHOUT_CLASSIFICATION	5.958836174209866E-4	DESIGN
compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9998082480369933	WITHOUT_CLASSIFICATION	1.9175196300678574E-4	DESIGN
simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999296510458676	WITHOUT_CLASSIFICATION	7.034895413228707E-5	DESIGN
sybase fail if we don't do that sigh	WITHOUT_CLASSIFICATION	0.9998409712726498	WITHOUT_CLASSIFICATION	1.5902872735011975E-4	DESIGN
handles things like a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a b c ) (overloaded brackets) not not a a is not null (overloaded "not") etc and expressions like foo = bar (maps to foo.id = bar.id) foo.bar = 'foo' (maps to foo.bar = 'foo') foo.bar.baz = 1.0 (maps to foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.bar.baz (maps to bar.baz = 1.0 and foo.bar = bar.id) foo.bar.baz = a.b.c (maps to bar.baz = b.c and foo.bar = bar.id and a.b = b.id) foo.bar.baz + a.b.c (maps to bar.baz + b.c and foo.bar = bar.id and a.b = b.id) ( foo.bar.baz + 1.0 ) < 2.0 (maps to ( bar.baz + 1.0 ) < 2.0 and foo.bar = bar.id)	WITHOUT_CLASSIFICATION	0.9996232049432335	WITHOUT_CLASSIFICATION	3.767950567663641E-4	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.997229936419605	WITHOUT_CLASSIFICATION	0.0027700635803949675	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.997229936419605	WITHOUT_CLASSIFICATION	0.0027700635803949675	DESIGN
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9996158048734225	WITHOUT_CLASSIFICATION	3.8419512657747386E-4	DESIGN
otherwise just dump it	WITHOUT_CLASSIFICATION	0.9992083796929939	WITHOUT_CLASSIFICATION	7.916203070061563E-4	DESIGN
its an interface so we can't really tell anything	WITHOUT_CLASSIFICATION	0.9999682346104973	WITHOUT_CLASSIFICATION	3.176538950270666E-5	DESIGN
its an interface so we can't really tell anything	WITHOUT_CLASSIFICATION	0.9999682346104973	WITHOUT_CLASSIFICATION	3.176538950270666E-5	DESIGN
use default behavior	WITHOUT_CLASSIFICATION	0.9995969101282044	WITHOUT_CLASSIFICATION	4.0308987179555006E-4	DESIGN
note early return	WITHOUT_CLASSIFICATION	0.9998990098542095	WITHOUT_CLASSIFICATION	1.0099014579043377E-4	DESIGN
the mru cache used to keep hard references to the most recently used query plans note lru here is a bit of a misnomer it indicates that lru entries are removed the actual kept entries are the mru entries	WITHOUT_CLASSIFICATION	0.99139059420328	WITHOUT_CLASSIFICATION	0.008609405796719916	DESIGN
we want to be able to just use the defaults if jndi environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9987999048261225	WITHOUT_CLASSIFICATION	0.0012000951738775673	DESIGN
clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999287052210032	WITHOUT_CLASSIFICATION	7.129477899675817E-5	DESIGN
serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9995891000780495	WITHOUT_CLASSIFICATION	4.108999219504969E-4	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999844921851359	WITHOUT_CLASSIFICATION	1.5507814864062717E-5	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999844921851359	WITHOUT_CLASSIFICATION	1.5507814864062717E-5	DESIGN
deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9995885912658555	WITHOUT_CLASSIFICATION	4.1140873414444797E-4	DESIGN
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9996922054540074	WITHOUT_CLASSIFICATION	3.077945459925923E-4	DESIGN
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9997904567738388	WITHOUT_CLASSIFICATION	2.0954322616118055E-4	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9998093415359076	WITHOUT_CLASSIFICATION	1.9065846409238425E-4	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9998093415359076	WITHOUT_CLASSIFICATION	1.9065846409238425E-4	DESIGN
includes last '.'	WITHOUT_CLASSIFICATION	0.9999227069035406	WITHOUT_CLASSIFICATION	7.729309645948506E-5	DESIGN
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999759978815769	WITHOUT_CLASSIFICATION	2.4002118423121405E-5	DESIGN
impl note takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method	WITHOUT_CLASSIFICATION	0.9998704269994725	WITHOUT_CLASSIFICATION	1.2957300052749232E-4	DESIGN
first time we find match!	WITHOUT_CLASSIFICATION	0.9998874185562338	WITHOUT_CLASSIFICATION	1.1258144376617414E-4	DESIGN
entitynames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999114196856047	WITHOUT_CLASSIFICATION	8.8580314395203E-5	DESIGN
wrapped iterators	WITHOUT_CLASSIFICATION	0.9964433428351471	WITHOUT_CLASSIFICATION	0.0035566571648528622	DESIGN
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.998570741754509	WITHOUT_CLASSIFICATION	0.0014292582454911006	DESIGN
the current iterator	WITHOUT_CLASSIFICATION	0.999932491566216	WITHOUT_CLASSIFICATION	6.750843378401753E-5	DESIGN
the last used iterator	WITHOUT_CLASSIFICATION	0.9773936152016565	WITHOUT_CLASSIFICATION	0.02260638479834359	DESIGN
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9997686770652571	WITHOUT_CLASSIFICATION	2.313229347430038E-4	DESIGN
public static object[] clone(class elementclass object[] array) {object[] result = (object[]) array.newinstance( elementclass array.length )system.arraycopy(array 0 result 0 array.length)return result}	WITHOUT_CLASSIFICATION	0.9999960665613173	WITHOUT_CLASSIFICATION	3.933438682626463E-6	DESIGN
call this before any iterator method to make sure that the current iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9935084386889712	WITHOUT_CLASSIFICATION	0.006491561311028832	DESIGN
doable if needed	WITHOUT_CLASSIFICATION	0.9999086085412667	WITHOUT_CLASSIFICATION	9.139145873322714E-5	DESIGN
set last used iterator here in case the user calls remove before calling hasnext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.589930065227577	DESIGN	0.41006993477242315	WITHOUT_CLASSIFICATION
peek ahead	WITHOUT_CLASSIFICATION	0.9993328161049768	WITHOUT_CLASSIFICATION	6.671838950231156E-4	DESIGN
if we reach the end of the string w/o finding the matching end that is an exception	WITHOUT_CLASSIFICATION	0.9998305013540828	WITHOUT_CLASSIFICATION	1.6949864591719337E-4	DESIGN
we have a placeholder spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9975961146233623	WITHOUT_CLASSIFICATION	0.002403885376637641	DESIGN
make sure spinning forward did not put us past the end of the buffer	WITHOUT_CLASSIFICATION	0.9987691524841064	WITHOUT_CLASSIFICATION	0.001230847515893676	DESIGN
first try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9996748157906543	WITHOUT_CLASSIFICATION	3.251842093457363E-4	DESIGN
next try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.998896516786098	WITHOUT_CLASSIFICATION	0.001103483213902016	DESIGN
next try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9992475799398486	WITHOUT_CLASSIFICATION	7.524200601514033E-4	DESIGN
anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9996158208034207	WITHOUT_CLASSIFICATION	3.8417919657936E-4	DESIGN
would need an identityset for this!	WITHOUT_CLASSIFICATION	0.9953362328478892	WITHOUT_CLASSIFICATION	0.0046637671521107425	DESIGN
arrays.aslist doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9996993992074812	WITHOUT_CLASSIFICATION	3.0060079251886443E-4	DESIGN
faster?	WITHOUT_CLASSIFICATION	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
the name of a class	WITHOUT_CLASSIFICATION	0.9997586394843769	WITHOUT_CLASSIFICATION	2.4136051562301654E-4	DESIGN
its the listener class name	WITHOUT_CLASSIFICATION	0.9999038367375206	WITHOUT_CLASSIFICATION	9.616326247931634E-5	DESIGN
allow 987654321	WITHOUT_CLASSIFICATION	0.9996593887424864	WITHOUT_CLASSIFICATION	3.4061125751355903E-4	DESIGN
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999690380605175	WITHOUT_CLASSIFICATION	3.0961939482473815E-5	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999835795851271	WITHOUT_CLASSIFICATION	1.6420414872967742E-5	DESIGN
in case we were deserialized in a different jvm look for an instance with the same name (alternatively we could do an actual jndi lookup here.)	WITHOUT_CLASSIFICATION	0.9937647911539977	WITHOUT_CLASSIFICATION	0.006235208846002274	DESIGN
first lets determine whether to apply cglib or javassist based instrumentation	WITHOUT_CLASSIFICATION	0.9998209926773518	WITHOUT_CLASSIFICATION	1.7900732264815273E-4	DESIGN
make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9990844356373614	WITHOUT_CLASSIFICATION	9.155643626385788E-4	DESIGN
entirely optional!!	WITHOUT_CLASSIFICATION	0.999644527790314	WITHOUT_CLASSIFICATION	3.5547220968598566E-4	DESIGN
its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9996093703850635	WITHOUT_CLASSIFICATION	3.906296149364905E-4	DESIGN
context.unbind(boundname)	WITHOUT_CLASSIFICATION	0.9995848020766234	WITHOUT_CLASSIFICATION	4.1519792337664973E-4	DESIGN
readresolveobject	WITHOUT_CLASSIFICATION	0.9998085459853474	WITHOUT_CLASSIFICATION	1.9145401465259115E-4	DESIGN
cfg.setproperty("hibernate.show_sql" "true")	WITHOUT_CLASSIFICATION	0.999586005161102	WITHOUT_CLASSIFICATION	4.1399483889800715E-4	DESIGN
defensive convenience methods	WITHOUT_CLASSIFICATION	0.999326462796325	WITHOUT_CLASSIFICATION	6.735372036749966E-4	DESIGN
create the sessionfactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9994578075386422	WITHOUT_CLASSIFICATION	5.421924613577939E-4	DESIGN
make sure you log the exception as it might be swallowed	WITHOUT_CLASSIFICATION	0.9995715675286008	WITHOUT_CLASSIFICATION	4.284324713991605E-4	DESIGN
begin unit of work	WITHOUT_CLASSIFICATION	0.9999515523396978	WITHOUT_CLASSIFICATION	4.844766030231077E-5	DESIGN
write html header	WITHOUT_CLASSIFICATION	0.9995145732993956	WITHOUT_CLASSIFICATION	4.854267006043805E-4	DESIGN
handle actions	WITHOUT_CLASSIFICATION	0.9993605335553847	WITHOUT_CLASSIFICATION	6.394664446153354E-4	DESIGN
print page	WITHOUT_CLASSIFICATION	0.9988741834134804	WITHOUT_CLASSIFICATION	0.0011258165865194964	DESIGN
write html footer	WITHOUT_CLASSIFICATION	0.9998712220204664	WITHOUT_CLASSIFICATION	1.2877797953358253E-4	DESIGN
end unit of work	WITHOUT_CLASSIFICATION	0.9998771526434312	WITHOUT_CLASSIFICATION	1.2284735656884995E-4	DESIGN
start the session to be used for this request	WITHOUT_CLASSIFICATION	0.8859174234619361	WITHOUT_CLASSIFICATION	0.11408257653806386	DESIGN
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9982943680881611	WITHOUT_CLASSIFICATION	0.0017056319118389817	DESIGN
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.999925446525931	WITHOUT_CLASSIFICATION	7.455347406897406E-5	DESIGN
remove session from "current context"	WITHOUT_CLASSIFICATION	0.995622689624449	WITHOUT_CLASSIFICATION	0.0043773103755510145	DESIGN
eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9990546186416905	WITHOUT_CLASSIFICATION	9.453813583095658E-4	DESIGN
if we want to handle it bidirectional and detached we also need to load this collection with an eager outer-join fetch this time with criteria and not hql	WITHOUT_CLASSIFICATION	0.9631123840815758	WITHOUT_CLASSIFICATION	0.03688761591842418	DESIGN
event anevent = (event) session .createcriteria(event.class).setfetchmode("participants" fetchmode.join) .add( expression.eq("id" eventid) ) .uniqueresult() eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9998701128298854	WITHOUT_CLASSIFICATION	1.2988717011466758E-4	DESIGN
end of first unit of work	WITHOUT_CLASSIFICATION	0.9998835989930465	WITHOUT_CLASSIFICATION	1.1640100695346127E-4	DESIGN
or bidirectional safety method setting both sides aperson.addtoevent(anevent)	WITHOUT_CLASSIFICATION	0.9997345467612039	WITHOUT_CLASSIFICATION	2.654532387961211E-4	DESIGN
begin second unit of work	WITHOUT_CLASSIFICATION	0.9999399444357179	WITHOUT_CLASSIFICATION	6.005556428213023E-5	DESIGN
reattachment of aperson	WITHOUT_CLASSIFICATION	0.9997228563664761	WITHOUT_CLASSIFICATION	2.771436335239314E-4	DESIGN
the getemailaddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9961174946496273	WITHOUT_CLASSIFICATION	0.0038825053503727387	DESIGN
we need our tm so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9998265491562204	WITHOUT_CLASSIFICATION	1.7345084377954478E-4	DESIGN
don't hold the jbc node lock throughout the tx as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9998742441408716	WITHOUT_CLASSIFICATION	1.25755859128385E-4	DESIGN
don't hold the jbc node lock throughout the tx as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9998742441408716	WITHOUT_CLASSIFICATION	1.25755859128385E-4	DESIGN
jbc put a version in the node when it created as part of some internal operation. we are always newer but if the jbc version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999990139035486	WITHOUT_CLASSIFICATION	9.860964514019494E-7	DESIGN
swaldman 2006-08-28 define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9997726655430854	WITHOUT_CLASSIFICATION	2.2733445691446754E-4	DESIGN
not null if the isolation level has been specified in the configuration file. otherwise it is left to the driver's default value.	WITHOUT_CLASSIFICATION	0.9999677574799813	WITHOUT_CLASSIFICATION	3.224252001867197E-5	DESIGN
configured outside of hibernate (i.e. servlet container or java bean container already has proxool pools running and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9900702943892405	WITHOUT_CLASSIFICATION	0.009929705610759391	DESIGN
if you're closing down the connectionprovider chances are an is not a real big deal just warn	WITHOUT_CLASSIFICATION	0.9993545039531554	WITHOUT_CLASSIFICATION	6.454960468445208E-4	DESIGN
(as is always optional for consistency with sql/oql)	WITHOUT_CLASSIFICATION	0.9997972874535139	WITHOUT_CLASSIFICATION	2.027125464860839E-4	DESIGN
process the "new" hql style where aliases are assigned _after_ the class name or path expression ie. using the as construction	WITHOUT_CLASSIFICATION	0.9999998253710913	WITHOUT_CLASSIFICATION	1.746289085925193E-7	DESIGN
the loaded owner will be set to null after the collection is removed so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999770431894371	WITHOUT_CLASSIFICATION	2.2956810562870454E-5	DESIGN
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9982429814807744	WITHOUT_CLASSIFICATION	0.0017570185192256592	DESIGN
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999245985595536	WITHOUT_CLASSIFICATION	7.540144044643887E-5	DESIGN
handle a path expression or class name that appears at the start in the "new" hql style or an alias that appears at the start in the "old" hql style	WITHOUT_CLASSIFICATION	0.9996906238353839	WITHOUT_CLASSIFICATION	3.0937616461616997E-4	DESIGN
handle <= >= != is not not between not in	WITHOUT_CLASSIFICATION	0.9913469309621573	WITHOUT_CLASSIFICATION	0.008653069037842655	DESIGN
the loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.999999736263377	WITHOUT_CLASSIFICATION	2.6373662303249243E-7	DESIGN
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9997799173115283	WITHOUT_CLASSIFICATION	2.200826884716818E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999177750034396	WITHOUT_CLASSIFICATION	8.222499656034597E-5	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999177750034396	WITHOUT_CLASSIFICATION	8.222499656034597E-5	DESIGN
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9995496933110437	WITHOUT_CLASSIFICATION	4.50306688956313E-4	DESIGN
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999144074669841	WITHOUT_CLASSIFICATION	8.559253301588714E-5	DESIGN
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9997835030616462	WITHOUT_CLASSIFICATION	2.1649693835389924E-4	DESIGN
note special case default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999404356720529	WITHOUT_CLASSIFICATION	5.956432794716781E-5	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999077553599094	WITHOUT_CLASSIFICATION	9.224464009056633E-5	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997779288778254	WITHOUT_CLASSIFICATION	2.220711221745956E-4	DESIGN
void setcomponenttuplizerfactory(componenttuplizerfactory componenttuplizerfactory) { this.componenttuplizerfactory = componenttuplizerfactory }	WITHOUT_CLASSIFICATION	0.9998513206757449	WITHOUT_CLASSIFICATION	1.4867932425514626E-4	DESIGN
element index -> id	WITHOUT_CLASSIFICATION	0.9999490705046696	WITHOUT_CLASSIFICATION	5.092949533045186E-5	DESIGN
note that it might be better to iterate the snapshot but this is safe assuming the user implements equals() properly as required by the set contract!	WITHOUT_CLASSIFICATION	0.999981892799916	WITHOUT_CLASSIFICATION	1.8107200083925175E-5	DESIGN
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9990430349029887	WITHOUT_CLASSIFICATION	9.569650970113295E-4	DESIGN
essentially if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception note that allowing close() above has the same basic effect but we capture that there simply to perform the unbind	WITHOUT_CLASSIFICATION	0.9999990870661071	WITHOUT_CLASSIFICATION	9.129338928874164E-7	DESIGN
the default sqlexceptionconverter for all dialects is based on sqlstate since sqlerrorcode is extremely vendor-specific. specific dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9976023517110599	WITHOUT_CLASSIFICATION	0.0023976482889400655	DESIGN
only necessary for postgre < 7.4 httpanoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9985797306173491	WITHOUT_CLASSIFICATION	0.0014202693826509659	DESIGN
select topic syntax from information_schema.help where section like 'function%' order by section topic see also -> httpwww.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999796924931735	WITHOUT_CLASSIFICATION	2.0307506826438322E-5	DESIGN
registercolumntype(types.varbinary "character($l)") registercolumntype(types.blob "character($l)" ) for use prior to cp 11.0 registercolumntype(types.clob "character($l)" )	WITHOUT_CLASSIFICATION	0.9978682908314939	WITHOUT_CLASSIFICATION	0.0021317091685061702	DESIGN
the blob type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include k - kilobyte m - megabyte g - gigabyte. refer to the pbdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9949365321833726	WITHOUT_CLASSIFICATION	0.005063467816627354	DESIGN
we must return a valid rdms/rsa command from this method to prevent rdms/rsa from issuing error 400	WITHOUT_CLASSIFICATION	0.9522271763152425	WITHOUT_CLASSIFICATION	0.047772823684757604	DESIGN
oracle driver reports to support getgeneratedkeys() but they only support the version taking an array of the names of the columns to be returned (via its returning clause). no other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.999645939838863	WITHOUT_CLASSIFICATION	3.540601611370272E-4	DESIGN
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.999849785539587	WITHOUT_CLASSIFICATION	1.5021446041296271E-4	DESIGN
you may still have other resultsets or update counts left to process here but you can't do it now or the resultset you just got will be closed	WITHOUT_CLASSIFICATION	0.9999996303722669	WITHOUT_CLASSIFICATION	3.6962773317068766E-7	DESIGN
note for object <-> sql datatype mappings see configuration manager | advanced | sql | system ddl datatype mappings tbdregistercolumntype(types.binary "binary($1)") changed 08-11-2005 jsl	WITHOUT_CLASSIFICATION	0.9999927877094693	WITHOUT_CLASSIFICATION	7.212290530712857E-6	DESIGN
trim(end_keyword string-expression-1 from string-expression-2) use hibernate implementation "from" is one of the parameters they pass in position ?3 registerfunction( "trim" new sqlfunctiontemplate(hibernate.string "trim(?1 ?2 from ?3)") )	WITHOUT_CLASSIFICATION	0.9998716728833602	WITHOUT_CLASSIFICATION	1.2832711663977547E-4	DESIGN
whether this dialect has an identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9995753245234785	WITHOUT_CLASSIFICATION	4.246754765215228E-4	DESIGN
according to both the ansi-sql and jpa specs trim takes a variable number of parameters between 1 and 4. at least one paramer (trimsource) is required. from the sql spec <trim function> = trim <left paren> <trim operands> <right paren> <trim operands> = [ [ <trim specification> ] [ <trim character> ] from ] <trim source> <trim specification> = leading | trailing | both if <trim specification> is omitted both is assumed. if <trim character> is omitted space is assumed	WITHOUT_CLASSIFICATION	0.99999999161471	WITHOUT_CLASSIFICATION	8.385290009023935E-9	DESIGN
/ prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9998321527322549	WITHOUT_CLASSIFICATION	1.678472677451772E-4	DESIGN
named queries	WITHOUT_CLASSIFICATION	0.9998196542090864	WITHOUT_CLASSIFICATION	1.8034579091360763E-4	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.877097267151809	WITHOUT_CLASSIFICATION	0.12290273284819098	DESIGN
does not handle arrays (thats ok cos they can't be lazy) or newly instantiated collections so we can do the cast	WITHOUT_CLASSIFICATION	0.9831559415266146	WITHOUT_CLASSIFICATION	0.016844058473385423	DESIGN
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9990256751542722	WITHOUT_CLASSIFICATION	9.743248457278364E-4	DESIGN
we can do the cast since orphan-delete does not apply to 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9995762308416027	WITHOUT_CLASSIFICATION	4.2376915839726904E-4	DESIGN
if the natural-id is marked as non-mutable it is not retrieved during a normal database-snapshot operation	WITHOUT_CLASSIFICATION	0.9999768595272038	WITHOUT_CLASSIFICATION	2.314047279622977E-5	DESIGN
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.999904200252669	WITHOUT_CLASSIFICATION	9.57997473310131E-5	DESIGN
slice to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9998388555897888	WITHOUT_CLASSIFICATION	1.6114441021126464E-4	DESIGN
int result = 17 result = 37 result + type.hashcode() result = 37 result + ( value==null ? 0 value.hashcode() ) return result	WITHOUT_CLASSIFICATION	0.999993277955917	WITHOUT_CLASSIFICATION	6.722044083013791E-6	DESIGN
the collectionentry.isreached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9998127480383119	WITHOUT_CLASSIFICATION	1.8725196168812284E-4	DESIGN
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999506917971394	WITHOUT_CLASSIFICATION	4.930820286061496E-5	DESIGN
the unique property value represented here may or may not be serializable so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9447040156250449	WITHOUT_CLASSIFICATION	0.055295984374955164	DESIGN
if the version of a newly instantiated object is not the same as the version seed value use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9994504496523923	WITHOUT_CLASSIFICATION	5.495503476078343E-4	DESIGN
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9993195475661499	WITHOUT_CLASSIFICATION	6.804524338501474E-4	DESIGN
ignore this row the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999442290397862	WITHOUT_CLASSIFICATION	5.577096021379377E-5	DESIGN
entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently not yet used	WITHOUT_CLASSIFICATION	0.6703419836086241	DESIGN	0.32965801639137593	WITHOUT_CLASSIFICATION
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. besides it makes the code much easier to read than the old transactionhelper stuff	WITHOUT_CLASSIFICATION	0.9999643413160108	WITHOUT_CLASSIFICATION	3.565868398924526E-5	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9991923086786415	WITHOUT_CLASSIFICATION	8.076913213585585E-4	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9991923086786415	WITHOUT_CLASSIFICATION	8.076913213585585E-4	DESIGN
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999976519484798	WITHOUT_CLASSIFICATION	2.348051520192641E-6	DESIGN
remove any snapshot not really for memory management purposes but rather because it might now be stale and there is no longer any entityentry to take precedence this is now handled by removeentity() session.getpersistencecontext().removedatabasesnapshot(key)	WITHOUT_CLASSIFICATION	0.8886819317217617	WITHOUT_CLASSIFICATION	0.11131806827823833	DESIGN
skip this check for composite-ids relating to dom4j entity-mode alternatively we could add a check to make sure the incoming id value is an instance of element	WITHOUT_CLASSIFICATION	0.9805915141975752	WITHOUT_CLASSIFICATION	0.01940848580242482	DESIGN
upgrade the lock if necessary lock(result lockmode)	WITHOUT_CLASSIFICATION	0.9993690619904445	WITHOUT_CLASSIFICATION	6.309380095555295E-4	DESIGN
now any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9990816026689295	WITHOUT_CLASSIFICATION	9.183973310705351E-4	DESIGN
we must clone embedded composite identifiers or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999915269230679	WITHOUT_CLASSIFICATION	8.473076932051665E-6	DESIGN
sub-insertions should occur before containing insertion so try to do the callback now	WITHOUT_CLASSIFICATION	0.9994113137993275	WITHOUT_CLASSIFICATION	5.886862006724796E-4	DESIGN
the entity is not associated with the session so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9998748434082527	WITHOUT_CLASSIFICATION	1.2515659174730967E-4	DESIGN
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9875211634273703	WITHOUT_CLASSIFICATION	0.012478836572629692	DESIGN
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996891282304118	WITHOUT_CLASSIFICATION	3.1087176958824236E-4	DESIGN
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996891282304118	WITHOUT_CLASSIFICATION	3.1087176958824236E-4	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9987755913675898	WITHOUT_CLASSIFICATION	0.0012244086324101964	DESIGN
if it is an uninitialized proxy pointing with this session then when it is accessed the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999433653063601	WITHOUT_CLASSIFICATION	5.663469363999465E-5	DESIGN
generate an explicit join for the root dot node. the implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999780262645145	WITHOUT_CLASSIFICATION	2.1973735485578732E-5	DESIGN
a session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9960102394651654	WITHOUT_CLASSIFICATION	0.0039897605348345536	DESIGN
does the collection referenced by this fromelement specify an order-by attribute? if so attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9998921572999707	WITHOUT_CLASSIFICATION	1.078427000292359E-4	DESIGN
and the token could be an identifer and the error is a mismatched token error	WITHOUT_CLASSIFICATION	0.9796928030301918	WITHOUT_CLASSIFICATION	0.02030719696980814	DESIGN
if a where clause was specified in the update/delete query use it to limit the returned ids here	WITHOUT_CLASSIFICATION	0.9998229856044458	WITHOUT_CLASSIFICATION	1.7701439555406668E-4	DESIGN
int parameterstart = getwalker().getnumberofparametersinsetclause() list allparams = getidselectparameterspecifications() iterator whereparams = allparams.sublist( parameterstart allparams.size() ).iterator()	WITHOUT_CLASSIFICATION	0.9999618066854663	WITHOUT_CLASSIFICATION	3.8193314533671425E-5	DESIGN
default implementation if this node has a data type and that data type is not an association then this is scalar.	WITHOUT_CLASSIFICATION	0.9915705577225292	WITHOUT_CLASSIFICATION	0.00842944227747079	DESIGN
resolve the lhs fully generate implicit joins. pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999984015029287	WITHOUT_CLASSIFICATION	1.5984970712933352E-6	DESIGN
if the propertytype is null and there isn't a parent just stop now there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9989981797682875	WITHOUT_CLASSIFICATION	0.0010018202317125327	DESIGN
we do not look for an existing join on the same path because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9980808077823455	WITHOUT_CLASSIFICATION	0.0019191922176544896	DESIGN
our parent is another dot node meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's pk (because 'our' table would know the fk).	WITHOUT_CLASSIFICATION	0.9998316868818619	WITHOUT_CLASSIFICATION	1.6831311813811478E-4	DESIGN
public final currency getcurrency(int col) throws hibernateexception {return (currency) get(col)}	WITHOUT_CLASSIFICATION	0.9999296205363858	WITHOUT_CLASSIFICATION	7.037946361421417E-5	DESIGN
here we have two possibilities 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999856690158203	WITHOUT_CLASSIFICATION	1.4330984179605493E-5	DESIGN
set the unresolved path in this node and the parent. set the text for the parent.	WITHOUT_CLASSIFICATION	0.9995494757473302	WITHOUT_CLASSIFICATION	4.505242526697479E-4	DESIGN
get the first child to be considered. sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. distinct).	WITHOUT_CLASSIFICATION	0.9984052172295331	WITHOUT_CLASSIFICATION	0.0015947827704669547	DESIGN
if this is an entity and the property is the identifier property then use getidentifiertype(). note that the propertyname.equals( propertypath ) checks whether we have a component key reference where the component class property name is the same as the entity id property name if the two are not equal this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9955093862282537	WITHOUT_CLASSIFICATION	0.004490613771746334	DESIGN
for a subquery the alias to use depends on a few things (we already know this is not an overall select) 1) if this from_element represents a correlation to the outer-most query a) if the outer query represents a multi-table persister we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) b) otherwise we need to use the persister's table name as the column qualification 2) otherwise (not correlated) use the given alias	WITHOUT_CLASSIFICATION	0.5190805839307173	WITHOUT_CLASSIFICATION	0.4809194160692827	DESIGN
not a collection? return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9992717610898306	WITHOUT_CLASSIFICATION	7.282389101694336E-4	DESIGN
collection of <many-to-any/> mappings used to circumvent the component-collection check below	WITHOUT_CLASSIFICATION	0.6126385075168355	WITHOUT_CLASSIFICATION	0.38736149248316454	DESIGN
otherwise the destination node was implied by the from clause and the from clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999067249682124	WITHOUT_CLASSIFICATION	9.327503178757937E-5	DESIGN
if the first identifier in the path referrs to the class alias (not the class name) then this is a correlated subselect. if it's a correlated sub-select use the existing table alias. otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9968687506754735	WITHOUT_CLASSIFICATION	0.0031312493245264678	DESIGN
check to see if our "proppath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9991220909808634	WITHOUT_CLASSIFICATION	8.779090191365894E-4	DESIGN
an ident node can represent an index expression if the ident represents a naked property ref note this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrexpr -> resolve()). the other option if that changes is to call resolve from here but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9984317080199673	WITHOUT_CLASSIFICATION	0.0015682919800326786	DESIGN
this uses a pathexpressionparser but notice that compound paths are not valid only bare names and simple paths	WITHOUT_CLASSIFICATION	0.9977113152545037	WITHOUT_CLASSIFICATION	0.002288684745496169	DESIGN
if this is an implied join in a from clause then use ansi-style joining and set the flag on the fromelement that indicates that it was implied in the from clause itself.	WITHOUT_CLASSIFICATION	0.9904673114495277	WITHOUT_CLASSIFICATION	0.0095326885504724	DESIGN
origin.adddestination(destination) add the query spaces.	WITHOUT_CLASSIFICATION	0.9997339232086763	WITHOUT_CLASSIFICATION	2.660767913237214E-4	DESIGN
for an explicit many-to-many relationship add a second join from the intermediate (many-to-many) table to the destination table. also make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999601792284672	WITHOUT_CLASSIFICATION	3.982077153271327E-5	DESIGN
reset the node type because the rest of the system is expecting from_fragment all we wanted was for the factory to create the right sub-class. this might get reset again later on anyway to make the sql generation simpler.	WITHOUT_CLASSIFICATION	0.9894254809324573	DESIGN	0.010574519067542774	WITHOUT_CLASSIFICATION
explicit = true this is an explict select. arraylist sqlresulttypelist = new arraylist()	WITHOUT_CLASSIFICATION	0.9998773524475929	WITHOUT_CLASSIFICATION	1.2264755240712463E-4	DESIGN
sqlresulttypelist.add( type ) generate the select expression.	WITHOUT_CLASSIFICATION	0.9967276140529433	WITHOUT_CLASSIFICATION	0.0032723859470566437	DESIGN
if the expression list has exactly one expression and the type of the expression is a collection then this might be a collection function such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9998742127081446	WITHOUT_CLASSIFICATION	1.2578729185540362E-4	DESIGN
need to parse off the column qualifiers this is assuming (which is true as of now) that this is only used from update and delete hql statement parsing	WITHOUT_CLASSIFICATION	0.99996171464754	WITHOUT_CLASSIFICATION	3.828535246000879E-5	DESIGN
for regression testing against output from the old parser found it easiest to simply reorder the fromelements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser this is definitely another of those "only needed for regression purposes". the syntheticandfactory then simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999937270949121	WITHOUT_CLASSIFICATION	6.272905087869097E-6	DESIGN
the uber-rule here is that we need to include subclass joins if the fromelement is in any way dereferenced by a property from the subclass table otherwise we end up with column references qualified by a non-existent table reference in the resulting sql	WITHOUT_CLASSIFICATION	0.9979725956788627	WITHOUT_CLASSIFICATION	0.0020274043211373385	DESIGN
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9486398086909428	WITHOUT_CLASSIFICATION	0.05136019130905719	DESIGN
the following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9992585716530227	WITHOUT_CLASSIFICATION	7.414283469773669E-4	DESIGN
the loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.999999736263377	WITHOUT_CLASSIFICATION	2.6373662303249243E-7	DESIGN
should not be able to reach last without maxposition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9991511029327257	WITHOUT_CLASSIFICATION	8.488970672743681E-4	DESIGN
we found it in the temp pc. should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9996028932338453	WITHOUT_CLASSIFICATION	3.971067661547245E-4	DESIGN
do not use proxiesbykey since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9871745882954478	WITHOUT_CLASSIFICATION	0.012825411704552205	DESIGN
if there is no tm configured we will not be able to access the javax.transaction.transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999145167012711	WITHOUT_CLASSIFICATION	8.548329872889593E-5	DESIGN
since the result set cursor is always left at the first physical row after the "last processed" we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.999996864931024	WITHOUT_CLASSIFICATION	3.135068975945759E-6	DESIGN
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a collectioninitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9998782897082107	WITHOUT_CLASSIFICATION	1.2171029178941171E-4	DESIGN
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode none)	WITHOUT_CLASSIFICATION	0.9991019348371163	WITHOUT_CLASSIFICATION	8.980651628837966E-4	DESIGN
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9970616622490036	WITHOUT_CLASSIFICATION	0.0029383377509963502	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9997554382802449	WITHOUT_CLASSIFICATION	2.4456171975511506E-4	DESIGN
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.997126728974551	WITHOUT_CLASSIFICATION	0.0028732710254489742	DESIGN
ps.close() just close it do not try to return it to the pool! note early exit!	WITHOUT_CLASSIFICATION	0.999845429158034	WITHOUT_CLASSIFICATION	1.5457084196595958E-4	DESIGN
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through hibernate's registered transaction synchronization on a separate "reaping" thread. in cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these cmes occur. and though it is not "allowed" per-se the end result without handling it specifically is infinite looping. so here we simply break the loop	WITHOUT_CLASSIFICATION	0.9999921572285401	WITHOUT_CLASSIFICATION	7.842771459822812E-6	DESIGN
unfortunately this stuff can't be cached because it is per-invocation not constant for the querytranslator instance	WITHOUT_CLASSIFICATION	0.9994482169999768	WITHOUT_CLASSIFICATION	5.517830000232317E-4	DESIGN
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9996816592375494	WITHOUT_CLASSIFICATION	3.1834076245069434E-4	DESIGN
don't create a unique key 'cos some databases don't like a uk on nullable columns getcollectiontable().createuniquekey( getidentifier().getconstraintcolumns() )	WITHOUT_CLASSIFICATION	0.9807471982441663	WITHOUT_CLASSIFICATION	0.019252801755833597	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or entityinfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997767540141191	WITHOUT_CLASSIFICATION	2.232459858807514E-4	DESIGN
isset = collection.isset() issorted = collection.issorted()	WITHOUT_CLASSIFICATION	0.9998831097803876	WITHOUT_CLASSIFICATION	1.1689021961233574E-4	DESIGN
lists arrays sets maps bags	WITHOUT_CLASSIFICATION	0.9994844800019382	WITHOUT_CLASSIFICATION	5.155199980617543E-4	DESIGN
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9995604184648674	WITHOUT_CLASSIFICATION	4.3958153513257896E-4	DESIGN
use a combination of foreign key columns and pk columns since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9995510083463905	WITHOUT_CLASSIFICATION	4.4899165360943034E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or entityinfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997767540141191	WITHOUT_CLASSIFICATION	2.232459858807514E-4	DESIGN
information about properties of this class including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9815608456489385	WITHOUT_CLASSIFICATION	0.018439154351061405	DESIGN
all this only really needs to consider properties of this class not its subclasses but since we are reusing code used for sequential selects we use the subclass closure	WITHOUT_CLASSIFICATION	0.9971041867802853	DESIGN	0.0028958132197146034	WITHOUT_CLASSIFICATION
here we render the select column list based on the properties defined as being generated. for partial component generation we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9063319510424562	DESIGN	0.09366804895754376	WITHOUT_CLASSIFICATION
this is the root (versioned) table and we are using version-based optimistic locking if we are not updating the version also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9970843051209017	WITHOUT_CLASSIFICATION	0.002915694879098168	DESIGN
optimistic-lock="all" include all updatable properties optimistic-lock="dirty" include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9994979529899929	WITHOUT_CLASSIFICATION	5.020470100071058E-4	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9990003875201681	WITHOUT_CLASSIFICATION	9.996124798318702E-4	DESIGN
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a jta transaction context so must be autocommit mode)	WITHOUT_CLASSIFICATION	0.9933577572697803	WITHOUT_CLASSIFICATION	0.00664224273021969	DESIGN
need to treat this as if it where optimistic-lock="all" (dirty does not make sense) first we need to locate the "loaded" state note it potentially could be a proxy so perform the location the safe way	WITHOUT_CLASSIFICATION	0.9762489697941563	WITHOUT_CLASSIFICATION	0.02375103020584369	DESIGN
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999115648124767	WITHOUT_CLASSIFICATION	8.843518752325401E-5	DESIGN
need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. using the collection's key type causes problems with property-ref keys	WITHOUT_CLASSIFICATION	0.9974532122343035	WITHOUT_CLASSIFICATION	0.002546787765696575	DESIGN
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9989199437140244	WITHOUT_CLASSIFICATION	0.0010800562859756488	DESIGN
following doesn't handle (null not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9996189145377218	WITHOUT_CLASSIFICATION	3.810854622782504E-4	DESIGN
impl note due to the delayed population of setters (setters cached for performance) we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999742186860193	WITHOUT_CLASSIFICATION	2.5781313980708386E-5	DESIGN
we need to dirty check collections since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9998769141928076	WITHOUT_CLASSIFICATION	1.230858071923636E-4	DESIGN
return the id so we can use it to reset the proxy id return result	WITHOUT_CLASSIFICATION	0.9999769737235524	WITHOUT_CLASSIFICATION	2.3026276447599824E-5	DESIGN
optimizer = getfactory().getsettings().getbytecodeprovider().getreflectionoptimizer( mappedclass getternames setternames proptypes )	WITHOUT_CLASSIFICATION	0.9997622464242876	WITHOUT_CLASSIFICATION	2.3775357571236775E-4	DESIGN
cache the actual id of the object not the value of the property-ref which might not be initialized	WITHOUT_CLASSIFICATION	0.99946864465627	WITHOUT_CLASSIFICATION	5.313553437300077E-4	DESIGN
we now have the value of the property-ref we reference. however we need to dig a little deeper as that property might also be an entity type in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9993210751896849	WITHOUT_CLASSIFICATION	6.789248103150303E-4	DESIGN
retrieve the value of the designated column in the current row of this resultset object as a java.io.reader object	WITHOUT_CLASSIFICATION	0.9998555708380374	WITHOUT_CLASSIFICATION	1.4442916196256972E-4	DESIGN
not absolutely necessary but helps for some equals()/hashcode() implementations	WITHOUT_CLASSIFICATION	0.9885973266836652	WITHOUT_CLASSIFICATION	0.011402673316334884	DESIGN
this should be a call to resolve() not resolveidentifier() 'cos it might be a property-ref and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9743252929758256	WITHOUT_CLASSIFICATION	0.025674707024174438	DESIGN
if we have <tt>not-found="ignore"</tt> association mapped to a formula we always need to dirty check it so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9993308599812111	WITHOUT_CLASSIFICATION	6.691400187889316E-4	DESIGN
can't just return null here since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9927833092760563	WITHOUT_CLASSIFICATION	0.007216690723943727	DESIGN
for arrays replaceelements() may return a different reference since the array length might not match	WITHOUT_CLASSIFICATION	0.9734387597173283	WITHOUT_CLASSIFICATION	0.026561240282671626	DESIGN
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the mru entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9910379438047354	WITHOUT_CLASSIFICATION	0.008962056195264467	DESIGN
as soon as we encounter our first letter return the substring from that position	WITHOUT_CLASSIFICATION	0.9997890980741166	WITHOUT_CLASSIFICATION	2.1090192588341255E-4	DESIGN
note expected in the syntax type=listenerclass ({sep}type=listenerclass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999832936667337	WITHOUT_CLASSIFICATION	1.670633326643321E-5	DESIGN
istransactioncallbackregistered denotes whether any hibernate transaction has registered as a callback against this jdbccontext only one such callback is allowed. directly serializing this value causes problems with jdbctransaction or really any transaction impl where the callback is local to the transaction instance itself since that transaction is not serialized along with the jdbccontext. thus we handle that fact here explicitly	WITHOUT_CLASSIFICATION	0.9999330220074156	WITHOUT_CLASSIFICATION	6.697799258446175E-5	DESIGN
note that for sequential scrolling we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.998839660889899	WITHOUT_CLASSIFICATION	0.001160339110101013	DESIGN
we call getkeyfromresultset() here so that we can know the key value upon which to perform the breaking logic. however it is also then called from getrowfromresultset() which is certainly not the most efficient. but the call here is needed and there currently is no other way without refactoring of the doquery()/getrowfromresultset() methods	WITHOUT_CLASSIFICATION	0.9965862120588874	WITHOUT_CLASSIFICATION	0.0034137879411126034	DESIGN
this check is needed since processing leaves the cursor after the last physical row for the current logical row thus if we are after the last physical row this might be caused by either 1) scrolling to the last logical row 2) scrolling past the last logical row in the latter scenario the previous logical row really is the last logical row. in all other cases we should process back two logical records (the current logic row plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9967924969766818	WITHOUT_CLASSIFICATION	0.0032075030233182215	DESIGN
and perform the load	WITHOUT_CLASSIFICATION	0.9998198452781388	WITHOUT_CLASSIFICATION	1.8015472186107943E-4	DESIGN
important reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999241775527196	WITHOUT_CLASSIFICATION	7.582244728040185E-5	DESIGN
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9722300402000063	WITHOUT_CLASSIFICATION	0.027769959799993724	DESIGN
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9988005657723611	WITHOUT_CLASSIFICATION	0.001199434227638888	DESIGN
we did not find a collection element in the result set so we ensure that a collection is created with the owner's identifier since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9998440842778438	WITHOUT_CLASSIFICATION	1.5591572215631434E-4	DESIGN
this is a collection initializer so we must create a collection for each of the passed-in keys to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9942156610949667	WITHOUT_CLASSIFICATION	0.005784338905033234	DESIGN
grab its state from the resultset and keep it in the session (but don't yet initialize the object itself) note that we acquire lockmode.read even if it was not requested	WITHOUT_CLASSIFICATION	0.9999735263727069	WITHOUT_CLASSIFICATION	2.6473627293192415E-5	DESIGN
a many-to-many decrement currentdepth here to allow join across the association table without exceeding max_fetch_depth (i.e. the "currentdepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9932332573031916	WITHOUT_CLASSIFICATION	0.006766742696808466	DESIGN
if not a composite key use "foo in (? ? ?)" for batching if no batch and not a composite key use "foo = ?"	WITHOUT_CLASSIFICATION	0.9985785445913951	WITHOUT_CLASSIFICATION	0.0014214554086049362	DESIGN
the user visible aliases which are unknown to the superclass these are not the actual "physical" sql aliases	WITHOUT_CLASSIFICATION	0.9999911221391319	WITHOUT_CLASSIFICATION	8.877860868200444E-6	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999595563590546	WITHOUT_CLASSIFICATION	4.04436409454008E-4	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999595563590546	WITHOUT_CLASSIFICATION	4.04436409454008E-4	DESIGN
it does not refer to an alias of a projection look for a property	WITHOUT_CLASSIFICATION	0.9995026906916347	WITHOUT_CLASSIFICATION	4.97309308365356E-4	DESIGN
determine if the collection elements are entities	WITHOUT_CLASSIFICATION	0.9998090999839947	WITHOUT_CLASSIFICATION	1.9090001600527486E-4	DESIGN
let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9991113476882284	WITHOUT_CLASSIFICATION	8.886523117716663E-4	DESIGN
translates an ast join type (i.e. the token type) into a joinfragment.xxx join type. @param astjointype the ast join type (from hqlsqltokentypes or sqltokentypes) @return a joinfragment.xxx join type. @see joinfragment @see sqltokentypes	WITHOUT_CLASSIFICATION	0.9890783602193454	WITHOUT_CLASSIFICATION	0.010921639780654564	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.999634671388069	WITHOUT_CLASSIFICATION	3.6532861193094417E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.999634671388069	WITHOUT_CLASSIFICATION	3.6532861193094417E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9993240601353868	WITHOUT_CLASSIFICATION	6.759398646132469E-4	DESIGN
public list getcollectionaliases() { return collectionaliases } public list getcollectionowners() { return collectionowners } public list getcollectionowneraliases() { return collectionowneraliases } public list getcollectionpersisters() { return collectionpersisters } public map getalias2persister() { return alias2persister } public boolean iscollectioninitializer() { return iscollectioninitializer } public list getpersisters() { return persisters } public map getalias2owneralias() { return alias2owneralias } public list getscalartypes() { return scalartypes } public list getscalarcolumnaliases() { return scalarcolumnaliases } public list getpropertyresults() { return propertyresults } public list getcollectionpropertyresults() { return collectionresults } public map getalias2return() { return alias2return }	WITHOUT_CLASSIFICATION	0.9995871002781433	WITHOUT_CLASSIFICATION	4.1289972185664704E-4	DESIGN
sqlqueryparser parser = new sqlqueryparser( sqlquery processor.getalias2persister() processor.getalias2return() aliases collaliases collpersisters suffixes collsuffixes ) sql = parser.process() namedparameterbindpoints = parser.getnamedparameters()	WITHOUT_CLASSIFICATION	0.9993215164761211	WITHOUT_CLASSIFICATION	6.784835238788501E-4	DESIGN
include the discriminator and class-level where but not filters	WITHOUT_CLASSIFICATION	0.9999568496219953	WITHOUT_CLASSIFICATION	4.315037800484063E-5	DESIGN
sqlaliassuffixes[i] = element.getcolumnaliassuffix()	WITHOUT_CLASSIFICATION	0.9998831097803876	WITHOUT_CLASSIFICATION	1.1689021961233574E-4	DESIGN
none because its the requested lock mode not the actual!	WITHOUT_CLASSIFICATION	0.997749676835678	WITHOUT_CLASSIFICATION	0.0022503231643220753	DESIGN
at this point we have (drivingsqlalias) the sql alias of the driving table corresponding to the given user alias. however the driving table is not (necessarily) the table against which we want to apply locks. mainly the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9979966474365913	WITHOUT_CLASSIFICATION	0.002003352563408684	DESIGN
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9990810986409194	WITHOUT_CLASSIFICATION	9.18901359080437E-4	DESIGN
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999794716559143	WITHOUT_CLASSIFICATION	2.0528344085744547E-5	DESIGN
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9996002024992029	WITHOUT_CLASSIFICATION	3.997975007971755E-4	DESIGN
both many-to-one and one-to-one are represented as a property. entitypersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. so we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. the other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. if that assertion changes then this check needs to change as well. partially this is an issue with the overloading of the term "lazy" here	WITHOUT_CLASSIFICATION	0.9746290014706658	DESIGN	0.02537099852933421	WITHOUT_CLASSIFICATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999348316696637	WITHOUT_CLASSIFICATION	6.51683303362321E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999348316696637	WITHOUT_CLASSIFICATION	6.51683303362321E-5	DESIGN
roottablename = persistentclass.getroottable().getqualifiedname( factory.getdialect() factory.getdefaultcatalog() factory.getdefaultschema() )	WITHOUT_CLASSIFICATION	0.9997622464242876	WITHOUT_CLASSIFICATION	2.3775357571236775E-4	DESIGN
subclasses	WITHOUT_CLASSIFICATION	0.9990709176009972	WITHOUT_CLASSIFICATION	9.290823990027294E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9991733944785416	WITHOUT_CLASSIFICATION	8.26605521458523E-4	DESIGN
protected void initpropertypaths(final string pathfinal type typefinal string[] columnsfinal string[] formulatemplatesfinal mapping factory)throws mappingexception {addformulapropertypath(path type formulatemplates)initpropertypaths(path type columns formulatemplates factory)}	WITHOUT_CLASSIFICATION	0.9968790502451517	WITHOUT_CLASSIFICATION	0.0031209497548484364	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995795657065736	WITHOUT_CLASSIFICATION	4.204342934264473E-4	DESIGN
custom sql (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9993437542511988	WITHOUT_CLASSIFICATION	6.562457488011925E-4	DESIGN
moved up from abstractentitypersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9961479473692867	WITHOUT_CLASSIFICATION	0.0038520526307131713	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995795657065736	WITHOUT_CLASSIFICATION	4.204342934264473E-4	DESIGN
aliases for identifier ( alias.id ) skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999730859767125	WITHOUT_CLASSIFICATION	2.691402328747756E-5	DESIGN
decide which resultset to get the property value from	WITHOUT_CLASSIFICATION	0.9999764361571178	WITHOUT_CLASSIFICATION	2.356384288207662E-5	DESIGN
note it is conceptually possible that a usertype could map null to a non-null value so the following is arguable	WITHOUT_CLASSIFICATION	0.9999472951376636	WITHOUT_CLASSIFICATION	5.270486233658206E-5	DESIGN
the contract of entitytuplizer.determineconcretesubclassentityname says that returning null is an indication that the specified entity-name (this.getentityname) should be used.	WITHOUT_CLASSIFICATION	0.9931982235274449	WITHOUT_CLASSIFICATION	0.00680177647255506	DESIGN
need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. using the collection's key type causes problems with property-ref keys	WITHOUT_CLASSIFICATION	0.9974532122343035	WITHOUT_CLASSIFICATION	0.002546787765696575	DESIGN
cache these since they are stateless this one could even be static	WITHOUT_CLASSIFICATION	0.9962516563584832	WITHOUT_CLASSIFICATION	0.0037483436415166787	DESIGN
"as" is not in keywords	WITHOUT_CLASSIFICATION	0.9958244189698828	WITHOUT_CLASSIFICATION	0.004175581030117115	DESIGN
--commented out by inspection (12/4/04 910 am) public abstract void addcondition(string alias string[] columns string condition)	WITHOUT_CLASSIFICATION	0.9999666292739864	WITHOUT_CLASSIFICATION	3.3370726013619165E-5	DESIGN
use the id column alias	WITHOUT_CLASSIFICATION	0.9992563412220494	WITHOUT_CLASSIFICATION	7.436587779505533E-4	DESIGN
private list aliases = new arraylist()	WITHOUT_CLASSIFICATION	0.9996787966879634	WITHOUT_CLASSIFICATION	3.212033120365729E-4	DESIGN
columns.add(columnname) aliases.add(tablealias)	WITHOUT_CLASSIFICATION	0.9995795657065736	WITHOUT_CLASSIFICATION	4.204342934264473E-4	DESIGN
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9891081273341028	WITHOUT_CLASSIFICATION	0.010891872665897166	DESIGN
revert to traditional hibernate behavior of setting initialpoolsize to minpoolsize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9997117895678692	WITHOUT_CLASSIFICATION	2.882104321307477E-4	DESIGN
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9997979995153303	WITHOUT_CLASSIFICATION	2.0200048466975827E-4	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9932391635094552	WITHOUT_CLASSIFICATION	0.006760836490544837	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9932391635094552	WITHOUT_CLASSIFICATION	0.006760836490544837	DESIGN
if an exception occurs during flush user must call rollback()	WITHOUT_CLASSIFICATION	0.9999704661441959	WITHOUT_CLASSIFICATION	2.95338558040731E-5	DESIGN
essentially 1) if we have a local (hibernate) transaction in progress and it already has the usertransaction cached use that usertransaction to determine the status. 2) if a transaction manager has been located use that transaction manager to determine the status. 3) finally as the last resort try to lookup the usertransaction via jndi and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999986960565456	WITHOUT_CLASSIFICATION	1.3039434544886938E-6	DESIGN
package	WITHOUT_CLASSIFICATION	0.9960778072837705	WITHOUT_CLASSIFICATION	0.003922192716229619	DESIGN
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9998186388349832	WITHOUT_CLASSIFICATION	1.8136116501678518E-4	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9995863648122943	WITHOUT_CLASSIFICATION	4.136351877056238E-4	DESIGN
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database) since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.869211455690011	DESIGN	0.1307885443099889	WITHOUT_CLASSIFICATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999856067198293	WITHOUT_CLASSIFICATION	1.4393280170684857E-5	DESIGN
regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed) so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999941114720313	WITHOUT_CLASSIFICATION	5.888527968735597E-6	DESIGN
then handle any user-defined entity modes	WITHOUT_CLASSIFICATION	0.9991955017610458	WITHOUT_CLASSIFICATION	8.044982389541871E-4	DESIGN
establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9988086917897311	WITHOUT_CLASSIFICATION	0.0011913082102688723	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9803667368915496	WITHOUT_CLASSIFICATION	0.019633263108450302	DESIGN
note this is being used from the process of shutting down a sessionfactory. specific things to consider (1) this clearing of the region should not propagate to other nodes on the cluster (if any) this is the cache-mode-local option bit (2) really just trying a best effort to cleanup after ourselves lock failures etc are not critical here this is the fail-silently option bit	WITHOUT_CLASSIFICATION	0.9997594952108034	DESIGN	2.4050478919659306E-4	WITHOUT_CLASSIFICATION
need to extract the component values and check for subtype replacements	WITHOUT_CLASSIFICATION	0.99906809856659	WITHOUT_CLASSIFICATION	9.319014334100962E-4	DESIGN
we ignore minimalputoverride. jbosscache putforexternalread is already about as minimal as we can get it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999171598376396	WITHOUT_CLASSIFICATION	8.284016236029773E-5	DESIGN
for now just "re-flatten" the metamodel since this is temporary stuff anyway (hhh-1907)	WITHOUT_CLASSIFICATION	0.6439451268078976	WITHOUT_CLASSIFICATION	0.35605487319210244	DESIGN
configure the cache to use our tm	WITHOUT_CLASSIFICATION	0.999506344443149	WITHOUT_CLASSIFICATION	4.936555568509534E-4	DESIGN
this solution would allow us to eliminate the owner arg to disassemble() but what if the collection was null and then later had elements added? seems unsafe session.getpersistencecontext().getcollectionentry( (persistentcollection) value ).getkey()	WITHOUT_CLASSIFICATION	0.7522267360474774	WITHOUT_CLASSIFICATION	0.24777326395252258	DESIGN
make sure jbc doesn't look one up	WITHOUT_CLASSIFICATION	0.9999116451599859	WITHOUT_CLASSIFICATION	8.835484001404324E-5	DESIGN
some collections are not lazy	WITHOUT_CLASSIFICATION	0.9941730134467924	WITHOUT_CLASSIFICATION	0.005826986553207537	DESIGN
here we don't want to suspend the tx. if we do 1) we might be caching query results that reflect uncommitted changes. no tx == no wl on cache node so other threads can prematurely see those query results 2) no tx == immediate replication. more overhead plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.971023434106932	WITHOUT_CLASSIFICATION	0.028976565893068077	DESIGN
return the (fully resolved) identifier value but do not resolve to the actual referenced entity instance note the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999970529847279	WITHOUT_CLASSIFICATION	2.9470152722268463E-6	DESIGN
add a zero (or quite low) timeout option so we don't block. ignore any timeoutexception. basically we forego caching the query result in order to avoid blocking. reads are done with suspended tx so they should not hold the lock for long. not caching the query result is ok since any subsequent read will just see the old result with its out-of-date timestamp that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999612658081265	WITHOUT_CLASSIFICATION	3.873419187346469E-5	DESIGN
impl note takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method	WITHOUT_CLASSIFICATION	0.9998704269994725	WITHOUT_CLASSIFICATION	1.2957300052749232E-4	DESIGN
we have the jbcwritemutex so no other local thread will be trying to write this key. it's possible here some remote thread has come in and changed the values again but since we are reading the values to write to jbc right now we know we are writing the latest values i.e. we don't assume that what we cached in entry.update() above is what we should write to jbc now. our write could be redundant i.e. we are writing what some remote thread just came in an wrote. there is a chance that yet another remote thread will update us and we'll then overwrite that later data in jbc. but all remote nodes will ignore that change in their localcache the only place it will live will be in jbc where it can only effect the initial state transfer values on newly joined nodes (i.e. populatelocalcache()).	WITHOUT_CLASSIFICATION	0.9983537284210797	WITHOUT_CLASSIFICATION	0.0016462715789203348	DESIGN
local cache so we use synchronization	WITHOUT_CLASSIFICATION	0.9993099099196018	WITHOUT_CLASSIFICATION	6.900900803981631E-4	DESIGN
local cache so we use synchronization	WITHOUT_CLASSIFICATION	0.9993099099196018	WITHOUT_CLASSIFICATION	6.900900803981631E-4	DESIGN
don't need to lock the cache here since if someone else inserted the same pk first the insert would fail	WITHOUT_CLASSIFICATION	0.999712132818247	WITHOUT_CLASSIFICATION	2.878671817530603E-4	DESIGN
we need to grab the version value from the entity otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9978705110189154	WITHOUT_CLASSIFICATION	0.002129488981084521	DESIGN
we need to obtain the lock before any actions are executed since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9998919273440735	WITHOUT_CLASSIFICATION	1.080726559265529E-4	DESIGN
postdelete after actually deleting a row record the fact that the instance no longer exists on the database (needed for identity-column key generation) and remove it from the session cache	WITHOUT_CLASSIFICATION	0.94531255792502	WITHOUT_CLASSIFICATION	0.05468744207498007	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.999777365586636	WITHOUT_CLASSIFICATION	2.226344133639222E-4	DESIGN
todo what else to do here?	DESIGN	0.9765398897406928	DESIGN	0.02346011025930708	WITHOUT_CLASSIFICATION
put() has nowait semantics is this really appropriate? note that it needs to be async replication never local or sync	DESIGN	0.6930027322639577	DESIGN	0.30699726773604225	WITHOUT_CLASSIFICATION
'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. the need for it is intended to be alleviated with future developement thus it is not defined as an environment constant it is used to control whether we should consult the jdbc metadata to determine certain settings default values it is useful to not do this when the database may not be available (mainly in tools usage).	DESIGN	0.9997552065153587	DESIGN	2.4479348464143846E-4	WITHOUT_CLASSIFICATION
todo get sql rendering out of this package!	DESIGN	0.7501805245104886	DESIGN	0.24981947548951144	WITHOUT_CLASSIFICATION
todo get sql rendering out of this package!	DESIGN	0.7501805245104886	DESIGN	0.24981947548951144	WITHOUT_CLASSIFICATION
todo eventually merge this with treecache and just add optional opt-lock support there.	DESIGN	0.9943525214385057	DESIGN	0.005647478561494259	WITHOUT_CLASSIFICATION
can happen because of the multiple ways cache.remove() can be invoked (	DESIGN	0.9999965624140734	WITHOUT_CLASSIFICATION	3.4375859265436146E-6	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea	DESIGN	0.9998049348796166	WITHOUT_CLASSIFICATION	1.9506512038336676E-4	DESIGN
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9995892020554652	DESIGN	4.1079794453486565E-4	WITHOUT_CLASSIFICATION
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9995892020554652	DESIGN	4.1079794453486565E-4	WITHOUT_CLASSIFICATION
fixme hacky workaround to jbcache-1202	DESIGN	0.9999022216678096	DESIGN	9.77783321903891E-5	WITHOUT_CLASSIFICATION
fixme hacky workaround to jbcache-1202	DESIGN	0.9999022216678096	DESIGN	9.77783321903891E-5	WITHOUT_CLASSIFICATION
todo i considered validating ts cache config here but decided to defer unti gettimestampscacheinstance() in case the cache is never actually used	DESIGN	0.9909919444045092	DESIGN	0.00900805559549068	WITHOUT_CLASSIFICATION
todo is this a valid operation on a timestamps cache?	DESIGN	0.9161919886668354	DESIGN	0.08380801133316462	WITHOUT_CLASSIFICATION
todo is this a valid operation on a timestamps cache?	DESIGN	0.9161919886668354	DESIGN	0.08380801133316462	WITHOUT_CLASSIFICATION
todo why not use the timestamp in a dataversion?	DESIGN	0.99267601496491	DESIGN	0.0073239850350899915	WITHOUT_CLASSIFICATION
can happen because of the multiple ways cache.remove() can be invoked (	DESIGN	0.9999965624140734	WITHOUT_CLASSIFICATION	3.4375859265436146E-6	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea	DESIGN	0.9998049348796166	WITHOUT_CLASSIFICATION	1.9506512038336676E-4	DESIGN
swaldman 2004-02-07 modify to allow null values to signify fall through to c3p0 poolconfig defaults	DESIGN	0.9990887970507271	WITHOUT_CLASSIFICATION	9.112029492728957E-4	DESIGN
turn hibernate.c3p0. into c3p0. so c3p0 gets a chance to see all hibernate.c3p0.	DESIGN	0.9925340668494868	WITHOUT_CLASSIFICATION	0.007465933150513337	DESIGN
todo this bit actually has to be called after all cascades! but since identity insert is called synchronously instead of asynchronously as other actions it isn't	DESIGN	0.7402830475185345	DESIGN	0.25971695248146554	WITHOUT_CLASSIFICATION
todo reenable if we also fix the above todo	DESIGN	0.9560430846006431	DESIGN	0.043956915399356866	WITHOUT_CLASSIFICATION
todo inefficient if that cache is just going to ignore the updated state!	DESIGN	0.6193840957940702	WITHOUT_CLASSIFICATION	0.38061590420593	DESIGN
we may be screwed here since the collection action is about to execute and we do not know the final owner key value	DESIGN	0.9999188995753816	WITHOUT_CLASSIFICATION	8.110042461835039E-5	DESIGN
create an action that will evict collection and entity regions based on queryspaces (table names). todo cache the autodetected information and pass it in instead.	DESIGN	0.6934307816363059	WITHOUT_CLASSIFICATION	0.30656921836369405	DESIGN
todo what else to do here?	DESIGN	0.9765398897406928	DESIGN	0.02346011025930708	WITHOUT_CLASSIFICATION
todo modify the class definition if not already transformed	DESIGN	0.8451880210438373	DESIGN	0.15481197895616264	WITHOUT_CLASSIFICATION
todo what else to do here?	DESIGN	0.9765398897406928	DESIGN	0.02346011025930708	WITHOUT_CLASSIFICATION
this is called by sessionfactory irregardless we just disregard here could also add a check to sessionfactory to only conditionally call start	DESIGN	0.8929100179526259	WITHOUT_CLASSIFICATION	0.10708998204737402	DESIGN
this is called by sessionfactory irregardless we just disregard here could also add a check to sessionfactory to only conditionally call stop	DESIGN	0.8916537052974662	WITHOUT_CLASSIFICATION	0.10834629470253375	DESIGN
todo to handle concurrent writes correctly this should return a lock to the client	DESIGN	0.9986832046460105	DESIGN	0.0013167953539895965	WITHOUT_CLASSIFICATION
put() has nowait semantics is this really appropriate? note that it needs to be async replication never local or sync	DESIGN	0.6930027322639577	DESIGN	0.30699726773604225	WITHOUT_CLASSIFICATION
todo to handle concurrent writes correctly the client should pass in a lock	DESIGN	0.9844779862640319	DESIGN	0.015522013735968003	WITHOUT_CLASSIFICATION
todo assumes all collections disassemble to an array!	DESIGN	0.8896922743784196	WITHOUT_CLASSIFICATION	0.11030772562158042	DESIGN
todo reuse the preloadevent	DESIGN	0.8187176670854057	WITHOUT_CLASSIFICATION	0.18128233291459417	DESIGN
todo this was added to support initializing an entity's entityentry snapshot during reattach this should be refactored to instead expose a method to assemble a entityentry based on this state for return.	DESIGN	0.9981965578252823	DESIGN	0.0018034421747177127	WITHOUT_CLASSIFICATION
todo what is the implication of this?	DESIGN	0.9450572710356171	DESIGN	0.054942728964382986	WITHOUT_CLASSIFICATION
use count as the default. this mimics the old behavior although none might be a better option moving forward in the case of callable	DESIGN	0.5419140132081374	WITHOUT_CLASSIFICATION	0.45808598679186274	DESIGN
todo joinkeycolumnname & foreignkeycolumnname should be called either here or at a slightly higer level in the stack (to get all the information we need) right now hbmbinder does not support the	DESIGN	0.9991463385693202	DESIGN	8.536614306797999E-4	WITHOUT_CLASSIFICATION
todo suck this into initlaziness!	DESIGN	0.9343738598315118	DESIGN	0.06562614016848828	WITHOUT_CLASSIFICATION
we have to set up the table later!! yuck	DESIGN	0.9994163673890448	WITHOUT_CLASSIFICATION	5.836326109552275E-4	DESIGN
todo better to degrade to lazy="false" if uninstrumented	DESIGN	0.7662256311817245	DESIGN	0.23377436881827554	WITHOUT_CLASSIFICATION
todo again how should this work for non-pojo entities?	DESIGN	0.9953295735530979	DESIGN	0.004670426446902114	WITHOUT_CLASSIFICATION
todo this is a bit of copy/paste from indexedcollection.createprimarykey()	DESIGN	0.9446629710323582	DESIGN	0.0553370289676418	WITHOUT_CLASSIFICATION
this inner class implements a case statement.perhaps im being a bit over-clever here	DESIGN	0.9887904878167111	WITHOUT_CLASSIFICATION	0.011209512183288946	DESIGN
todo bad implementation cos it depends upon ordering of mapping doc fixing this requires that collection/persistentclass gain access to the mappings reference from configuration (or the filterdefinitions map directly) sometime during configuration.buildsessionfactory (after all the types/filter-defs are known and before building persisters).	DESIGN	0.868993977139862	DESIGN	0.13100602286013793	WITHOUT_CLASSIFICATION
use of a stringbuffer to workaround a jdk bug	DESIGN	0.8800639715277419	DESIGN	0.11993602847225822	WITHOUT_CLASSIFICATION
hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9998186125369517	WITHOUT_CLASSIFICATION	1.8138746304831907E-4	DESIGN
fixme get the persistentclass	DESIGN	0.5149310514901431	WITHOUT_CLASSIFICATION	0.4850689485098568	DESIGN
fixme get the persistentclass	DESIGN	0.5149310514901431	WITHOUT_CLASSIFICATION	0.4850689485098568	DESIGN
icky workaround for mysql bug	DESIGN	0.6052816277691714	WITHOUT_CLASSIFICATION	0.3947183722308287	DESIGN
todo somehow add the newly created foreign keys to the internal collection	DESIGN	0.8870346975064173	DESIGN	0.1129653024935828	WITHOUT_CLASSIFICATION
todo possibly relax that	DESIGN	0.61384711034629	DESIGN	0.3861528896537101	WITHOUT_CLASSIFICATION
todo possibly relax that	DESIGN	0.61384711034629	DESIGN	0.3861528896537101	WITHOUT_CLASSIFICATION
todo possibly relax that	DESIGN	0.61384711034629	DESIGN	0.3861528896537101	WITHOUT_CLASSIFICATION
use of a stringbuffer to workaround a jdk bug	DESIGN	0.8800639715277419	DESIGN	0.11993602847225822	WITHOUT_CLASSIFICATION
use a degenerated strategy for backward compatibility	DESIGN	0.998743719112712	WITHOUT_CLASSIFICATION	0.0012562808872880204	DESIGN
sets can be just a view of a part of another collection. do we need to copy it to be sure it won't be changing underneath us? ie. this.set.addall(set)	DESIGN	0.9882319145240714	WITHOUT_CLASSIFICATION	0.011768085475928548	DESIGN
note that i parameter is now unused (delete it?)	DESIGN	0.9975361077739953	WITHOUT_CLASSIFICATION	0.0024638922260047185	DESIGN
just to help out during the load (ugly i know)	DESIGN	0.998212943936308	WITHOUT_CLASSIFICATION	0.001787056063691996	DESIGN
todo safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.799894543692134	WITHOUT_CLASSIFICATION	0.20010545630786608	DESIGN
yick! need this for proper serialization/deserialization handling	DESIGN	0.8705420915579106	WITHOUT_CLASSIFICATION	0.12945790844208938	DESIGN
todo get sql rendering out of this package!	DESIGN	0.7501805245104886	DESIGN	0.24981947548951144	WITHOUT_CLASSIFICATION
todo get sql rendering out of this package!	DESIGN	0.7501805245104886	DESIGN	0.24981947548951144	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
todo get sql rendering out of this package!	DESIGN	0.7501805245104886	DESIGN	0.24981947548951144	WITHOUT_CLASSIFICATION
todo not sure this is correct could not find docs on how to do this.	DESIGN	0.9999208972476675	DESIGN	7.910275233253014E-5	WITHOUT_CLASSIFICATION
hsql has no blob/clob support . but just put these here for now!	DESIGN	0.9998040437663528	WITHOUT_CLASSIFICATION	1.959562336472672E-4	DESIGN
does this need holdlock also? return tablename + " with (updlock rowlock holdlock)"	DESIGN	0.9944826727891377	WITHOUT_CLASSIFICATION	0.0055173272108623075	DESIGN
sql-server at least needed this dropped after use strange!	DESIGN	0.9803064254450706	WITHOUT_CLASSIFICATION	0.019693574554929337	DESIGN
todo is there really any reason to kkeep trying if this fails once?	DESIGN	0.6865627808863337	DESIGN	0.31343721911366623	WITHOUT_CLASSIFICATION
tbd should this be varbinary($1)? registercolumntype(types.varbinary "binary($1)")	DESIGN	0.9780885266133749	WITHOUT_CLASSIFICATION	0.02191147338662525	DESIGN
is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9808111559756418	WITHOUT_CLASSIFICATION	0.019188844024358172	DESIGN
xmlforest requires a new kind of function constructor	DESIGN	0.9998839091592451	WITHOUT_CLASSIFICATION	1.1609084075481402E-4	DESIGN
does this dialect support the alter table syntax?	DESIGN	0.9972648419172814	WITHOUT_CLASSIFICATION	0.0027351580827186706	DESIGN
do we need to qualify index names with the schema name?	DESIGN	0.9978524543829345	WITHOUT_CLASSIFICATION	0.002147545617065546	DESIGN
does this dialect support the unique column syntax?	DESIGN	0.9598641341473086	WITHOUT_CLASSIFICATION	0.040135865852691265	DESIGN
does this dialect support check constraints?	DESIGN	0.9362595974989932	WITHOUT_CLASSIFICATION	0.06374040250100668	DESIGN
do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9869538084001771	WITHOUT_CLASSIFICATION	0.013046191599822848	DESIGN
does this dialect support the for update syntax?	DESIGN	0.9992354396765255	WITHOUT_CLASSIFICATION	7.645603234745527E-4	DESIGN
does this dialect support the oracle-style for update nowait syntax?	DESIGN	0.9992354396765255	WITHOUT_CLASSIFICATION	7.645603234745527E-4	DESIGN
does this dialect support for update of allowing particular rows to be locked?	DESIGN	0.9986930351896014	WITHOUT_CLASSIFICATION	0.0013069648103985966	DESIGN
note there is a wierd implementation in the client side	DESIGN	0.9997722626596781	WITHOUT_CLASSIFICATION	2.2773734032185522E-4	DESIGN
todo never reached since gettypename() actually throws an exception!	DESIGN	0.9586182388067224	WITHOUT_CLASSIFICATION	0.041381761193277695	DESIGN
todo should we additionally check the current isolation mode explicitly?	DESIGN	0.9765601673506683	DESIGN	0.023439832649331645	WITHOUT_CLASSIFICATION
todo remove this and just have subclasses use isolater/isolatedwork directly	DESIGN	0.9978214076271822	DESIGN	0.002178592372817745	WITHOUT_CLASSIFICATION
todo should orphans really be deleted during lock???	DESIGN	0.8843399656700108	DESIGN	0.11566003432998909	WITHOUT_CLASSIFICATION
orphans should not be deleted during merge??	DESIGN	0.9877237656665906	WITHOUT_CLASSIFICATION	0.012276234333409465	DESIGN
orphans should not be deleted during copy??	DESIGN	0.9877237656665906	WITHOUT_CLASSIFICATION	0.012276234333409465	DESIGN
i suppose?	DESIGN	0.9983451562438233	WITHOUT_CLASSIFICATION	0.0016548437561767337	DESIGN
todo suck this logic into the collection!	DESIGN	0.6484887401803482	DESIGN	0.35151125981965187	WITHOUT_CLASSIFICATION
todo an alternative is to check if the owner has changed if it hasn't then get the id from collection.getowner()	DESIGN	0.9079619480417693	WITHOUT_CLASSIFICATION	0.09203805195823067	DESIGN
todorefactor + make this method private	DESIGN	0.9624079786470864	WITHOUT_CLASSIFICATION	0.03759202135291358	DESIGN
todo we can actually just determine this from the incoming entityentry-s	DESIGN	0.992147659469161	DESIGN	0.00785234053083912	WITHOUT_CLASSIFICATION
todo should this be an initializeentityeventlistener??? (watch out for performance!)	DESIGN	0.9561043498152813	DESIGN	0.04389565018471885	WITHOUT_CLASSIFICATION
todo better to pass the id in as an argument?	DESIGN	0.926353562412454	WITHOUT_CLASSIFICATION	0.07364643758754598	DESIGN
todo potentially look at optimizing these two arrays	DESIGN	0.7985476235962479	WITHOUT_CLASSIFICATION	0.2014523764037521	DESIGN
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.9770060803716089	DESIGN	0.02299391962839122	WITHOUT_CLASSIFICATION
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.9770060803716089	DESIGN	0.02299391962839122	WITHOUT_CLASSIFICATION
todo temporary	DESIGN	0.9558125115725831	DESIGN	0.04418748842741687	WITHOUT_CLASSIFICATION
todo not quite sure about the full implications of this!	DESIGN	0.8915665519825535	DESIGN	0.10843344801744648	WITHOUT_CLASSIFICATION
todo not quite sure about the full implications of this!	DESIGN	0.8915665519825535	DESIGN	0.10843344801744648	WITHOUT_CLASSIFICATION
todo ugly here	DESIGN	0.9604281222264742	DESIGN	0.03957187777352587	WITHOUT_CLASSIFICATION
this is kinda the best we can do	DESIGN	0.9848680214090537	WITHOUT_CLASSIFICATION	0.01513197859094623	DESIGN
todo this needn't exclude subclasses	DESIGN	0.866768080510574	DESIGN	0.13323191948942614	WITHOUT_CLASSIFICATION
todo need map? the prob is a proper key right?	DESIGN	0.970542559078448	DESIGN	0.029457440921551944	WITHOUT_CLASSIFICATION
todo i'd much rather have this done from #endloadingcollection(collectionpersisterloadingcollectionentry)	DESIGN	0.9937085978543008	DESIGN	0.006291402145699289	WITHOUT_CLASSIFICATION
todo hack!!! note here we cleanup the load context when we have no more local lce entries. this "works" for the time being because really only the collection load contexts are implemented. long term this cleanup should become part of the "close result set" processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.8412688314520249	WITHOUT_CLASSIFICATION	0.15873116854797503	DESIGN
todo should really move this log statement to collectiontype where this is used from	DESIGN	0.9999856943731854	DESIGN	1.4305626814617872E-5	WITHOUT_CLASSIFICATION
todo keep seperate notions of qt[] here for shallow/non-shallow queries	DESIGN	0.8492294539924526	WITHOUT_CLASSIFICATION	0.15077054600754736	DESIGN
todo add this info to the translator and aggregate it here	DESIGN	0.8749930261750217	DESIGN	0.1250069738249782	WITHOUT_CLASSIFICATION
todo move into collection type so we can use polymorphism!	DESIGN	0.9990073221903649	DESIGN	9.926778096350738E-4	WITHOUT_CLASSIFICATION
todo should we check the current isolation mode explicitly?	DESIGN	0.9766846763132663	DESIGN	0.023315323686733686	WITHOUT_CLASSIFICATION
todo suck into event class	DESIGN	0.7115357099230784	DESIGN	0.2884642900769216	WITHOUT_CLASSIFICATION
do we even really need this? the update will fail anyway.	DESIGN	0.9998266725231011	WITHOUT_CLASSIFICATION	1.7332747689885987E-4	DESIGN
hum should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9927568243921355	WITHOUT_CLASSIFICATION	0.007243175607864543	DESIGN
todo would it be better to do a refresh from db?	DESIGN	0.9938369797689031	DESIGN	0.006163020231096926	WITHOUT_CLASSIFICATION
todo we use two visitors here inefficient!	DESIGN	0.5886799894621929	DESIGN	0.4113200105378071	WITHOUT_CLASSIFICATION
this class has no proxies (so do a shortcut)	DESIGN	0.9952942457679758	WITHOUT_CLASSIFICATION	0.004705754232024316	DESIGN
postload is needed for ejb3 todo reuse the postloadevent	DESIGN	0.7941279614880393	WITHOUT_CLASSIFICATION	0.2058720385119606	DESIGN
todo put this stuff back in to read snapshot from the second-level cache (needs some extra work)	DESIGN	0.5635481300233822	DESIGN	0.43645186997661795	WITHOUT_CLASSIFICATION
null or brand new collection this will also (inefficiently) handle arrays which have no snapshot so we can't do any better	DESIGN	0.9941602498499458	WITHOUT_CLASSIFICATION	0.005839750150054293	DESIGN
todo is this 100% correct?	DESIGN	0.9895003997621917	DESIGN	0.010499600237808234	WITHOUT_CLASSIFICATION
todo iteratively get transient entities and retry merge until one of the following conditions 1) transientcopycache.size() == 0 2) transientcopycache.size() is not decreasing and copycache.size() is not increasing todo find out if retrying can add entities to copycache (don't think it can) for now just retry once throw transientobjectexception if there are still any transient entities	DESIGN	0.7731853821382112	DESIGN	0.22681461786178875	WITHOUT_CLASSIFICATION
entity name will not be available for non-pojo entities todo cache the entity name somewhere so that it is available to this exception	DESIGN	0.9879315438143089	DESIGN	0.012068456185691072	WITHOUT_CLASSIFICATION
todo we should throw an exception if we really know for sure that this is a detached instance rather than just assuming throw new staleobjectstateexception(entityname id)	DESIGN	0.9889661141693462	DESIGN	0.011033885830653819	WITHOUT_CLASSIFICATION
todo perhaps we should additionally require that the incoming entity version be equivalent to the defined unsaved-value?	DESIGN	0.9982171983624146	DESIGN	0.0017828016375853475	WITHOUT_CLASSIFICATION
perhaps this should be an exception since it is only ever used in the above method?	DESIGN	0.9730920629398959	DESIGN	0.02690793706010418	WITHOUT_CLASSIFICATION
put a placeholder in entries so we don't recurse back and try to save() the same object again. question should this be done before onsave() is called? likewise should it be done before onupdate()?	DESIGN	0.9908418963539577	WITHOUT_CLASSIFICATION	0.009158103646042257	DESIGN
todo merge into one method!	DESIGN	0.8397014962855586	DESIGN	0.16029850371444157	WITHOUT_CLASSIFICATION
todo refactor to .sql package	DESIGN	0.9116354844463166	DESIGN	0.08836451555368338	WITHOUT_CLASSIFICATION
provides query splitting methods which were originally in querytranslator. <br> todo this will need to be refactored at some point. @author josh	DESIGN	0.983419143078655	DESIGN	0.016580856921345002	WITHOUT_CLASSIFICATION
todo this is one of the ugliest and most fragile pieces of code in hibernate.	DESIGN	0.9761152808138415	DESIGN	0.023884719186158528	WITHOUT_CLASSIFICATION
todo temporary needed because currently persister is the one that creates and renders the join fragments for inheritence hierarchies	DESIGN	0.9899016218841346	DESIGN	0.010098378115865399	WITHOUT_CLASSIFICATION
todo better way?!?	DESIGN	0.7064291542941387	DESIGN	0.2935708457058614	WITHOUT_CLASSIFICATION
not possible to simply re-use the versionpropertynode here as it causes oom errors due to circularity (	DESIGN	0.9999774522950805	WITHOUT_CLASSIFICATION	2.254770491952543E-5	DESIGN
todothis is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9994740994787211	WITHOUT_CLASSIFICATION	5.259005212788395E-4	DESIGN
todo this is a bit dodgy come up with a better way to check this (plus see above comment)	DESIGN	0.9992860988533057	DESIGN	7.139011466944519E-4	WITHOUT_CLASSIFICATION
even here if only properties mapped to the "base table" are referenced in the set and where clauses this could be handled by the basicdelegate. todo decide if it is better performance-wise to perform that check or to simply use the multitableupdatedelegate	DESIGN	0.9958634857543661	DESIGN	0.00413651424563385	WITHOUT_CLASSIFICATION
todo switch statements are always evil! we already had bugs because of forgotten token types. use polymorphism for this!	DESIGN	0.602134561904553	DESIGN	0.39786543809544705	WITHOUT_CLASSIFICATION
todo we really need to be able to deal with component paths here also this is difficult because the hql-sql grammar expects all those node types to be fromreferencenodes. one potential fix here would be to convert the intoclause to just use a fromclause/fromelement combo (as a child of the insertstatement) and move all this logic into the insertstatement. that's probably the easiest approach (read least amount of changes to the grammar and code) but just doesn't feel right as then an insert would contain 2 from-clauses	DESIGN	0.9999930902766107	DESIGN	6.909723389318506E-6	WITHOUT_CLASSIFICATION
really there are two situations where it should be ok to allow the insertion into properties defined on a superclass 1) union-subclass with an abstract root entity 2) discrim-subclass #1 is handled already because of the fact that unionsubclasspersister alreay always returns 0 for this call we may want to disallow it for discrim-subclass just for consistency-sake (currently does not work anyway)	DESIGN	0.929149519499359	DESIGN	0.07085048050064104	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
implicit joins are always(?) ok to reuse	DESIGN	0.9998323464349075	WITHOUT_CLASSIFICATION	1.6765356509247997E-4	DESIGN
todo we may also want to check that the types here map to exactly one column/jdbc-type can't think of a situation where arithmetic expression between multi-column mappings makes any sense.	DESIGN	0.8664716298205436	DESIGN	0.13352837017945637	WITHOUT_CLASSIFICATION
we do not know either type blind guess!	DESIGN	0.9949023644998395	WITHOUT_CLASSIFICATION	0.005097635500160503	DESIGN
todo used to be exprnoparens! was this needed?	DESIGN	0.9999998416432865	DESIGN	1.5835671360969782E-7	WITHOUT_CLASSIFICATION
todo replace this with a more elegant solution.	DESIGN	0.9993364903589464	DESIGN	6.635096410536311E-4	WITHOUT_CLASSIFICATION
todo should this really return null? if not figure out something better to do here.	DESIGN	0.9669358580157918	DESIGN	0.03306414198420818	WITHOUT_CLASSIFICATION
todo get sql rendering out of this package!	DESIGN	0.7501805245104886	DESIGN	0.24981947548951144	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
ignore it the incoming property could not be found so we cannot be sure what to do here. at the very least the safest is to simply not apply any dereference toggling	DESIGN	0.5266499604328525	WITHOUT_CLASSIFICATION	0.47335003956714744	DESIGN
todo most of below was taken verbatim from dotnode should either delegate this logic or super-type it	DESIGN	0.8987614853074074	DESIGN	0.1012385146925925	WITHOUT_CLASSIFICATION
otherwise a trim-specification and/or a trim-character have been specified we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character the trim-source	DESIGN	0.9977630970639875	WITHOUT_CLASSIFICATION	0.002236902936012562	DESIGN
todo we should really just collect these from the various selectexpressions rather than regenerating here	DESIGN	0.9988740063626089	DESIGN	0.0011259936373910367	WITHOUT_CLASSIFICATION
todo is this a bit ugly?	DESIGN	0.9582040474913416	DESIGN	0.04179595250865842	WITHOUT_CLASSIFICATION
need a better way to define the suffixes here	DESIGN	0.9597244325134409	WITHOUT_CLASSIFICATION	0.04027556748655918	DESIGN
todo something much better - look at the type of the other expression! todo have comparisonexpression and/or arithmeticexpression rules complete the resolution of boolean nodes.	DESIGN	0.9149889944072709	DESIGN	0.08501100559272912	WITHOUT_CLASSIFICATION
todo what amount of significant digits need to be supported here? - from the decimalformat docs [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9590607679546674	DESIGN	0.04093923204533255	WITHOUT_CLASSIFICATION
needed the "clazz_" check to work around union-subclasses todo is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9827824632837209	DESIGN	0.017217536716279184	WITHOUT_CLASSIFICATION
we should actually rework this class to not implement parser and just process path expressions in the most convenient way.	DESIGN	0.9692919316258138	DESIGN	0.03070806837418611	WITHOUT_CLASSIFICATION
the class is now way to complex!	DESIGN	0.998892473993267	WITHOUT_CLASSIFICATION	0.0011075260067330342	DESIGN
todo get sql rendering out of here	DESIGN	0.5733920094817719	WITHOUT_CLASSIFICATION	0.42660799051822806	DESIGN
todo is there a better way?	DESIGN	0.9841820795885486	DESIGN	0.01581792041145136	WITHOUT_CLASSIFICATION
must be done here because of side-effect! yuck	DESIGN	0.9980894404470383	WITHOUT_CLASSIFICATION	0.0019105595529616958	DESIGN
name from a super query (a bit inelegant that it shows up here)	DESIGN	0.9969617720350687	WITHOUT_CLASSIFICATION	0.003038227964931173	DESIGN
we should reengineer this class so that rather than the current ad - hoc linear approach to processing a stream of tokens we instead build up a tree of expressions.	DESIGN	0.7391836060858353	WITHOUT_CLASSIFICATION	0.26081639391416456	DESIGN
this is ugly here but needed because its a subquery	DESIGN	0.951350127032974	WITHOUT_CLASSIFICATION	0.04864987296702608	DESIGN
unhappy about this being public is there a better way?	DESIGN	0.9178991322513884	WITHOUT_CLASSIFICATION	0.08210086774861158	DESIGN
make sure this is a defined parameter and check the incoming value type todo what should be the actual exception type here?	DESIGN	0.9999816939802647	DESIGN	1.8306019735395776E-5	WITHOUT_CLASSIFICATION
todo this constructor form is only used from constructor directly below us can it go away?	DESIGN	0.9999352983899936	DESIGN	6.470161000635057E-5	WITHOUT_CLASSIFICATION
todo copy/paste from sessionimpl pull up!	DESIGN	0.5833825347744034	WITHOUT_CLASSIFICATION	0.41661746522559656	DESIGN
todo should remove this exposure and have all references to the session's batcher use the connectionmanager.	DESIGN	0.9940657039547449	DESIGN	0.005934296045254982	WITHOUT_CLASSIFICATION
todo should this get moved to persistentcontext? logically is persistentcontext the "thing" to which an interceptor gets attached?	DESIGN	0.9827587571302551	DESIGN	0.017241242869744936	WITHOUT_CLASSIFICATION
todo what type?	DESIGN	0.8707957993815768	DESIGN	0.12920420061842325	WITHOUT_CLASSIFICATION
todo should seriously consider not allowing a txn to begin from a child session can always route the request to the root session	DESIGN	0.9957825345859694	DESIGN	0.004217465414030567	WITHOUT_CLASSIFICATION
short-circuit for performance	DESIGN	0.997977726605401	WITHOUT_CLASSIFICATION	0.002022273394599067	DESIGN
not absolutely necessary but does help with aggressive release	DESIGN	0.965015036072587	WITHOUT_CLASSIFICATION	0.03498496392741294	DESIGN
todo remove these last two as batcher is no longer managing connections	DESIGN	0.8758401475734702	DESIGN	0.12415985242652985	WITHOUT_CLASSIFICATION
work around a bug in all known connection pools.	DESIGN	0.9961023528350651	WITHOUT_CLASSIFICATION	0.0038976471649349678	DESIGN
todo make this the factory for "entity mode related" sessions also means making this the target of transaction-synch and the thing that knows how to cascade things between related sessions at that point perhaps this thing is a "sessioncontext" and connectionmanager is a "jdbccontext"? a "sessioncontext" should live in the impl package	DESIGN	0.9999985797129577	DESIGN	1.4202870422491922E-6	WITHOUT_CLASSIFICATION
todo does this really need to be here? does the collection already have it's own up-to-date snapshot?	DESIGN	0.999900869165776	DESIGN	9.913083422406028E-5	WITHOUT_CLASSIFICATION
todo the i==entityspan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.5858793062473587	DESIGN	0.4141206937526413	WITHOUT_CLASSIFICATION
this form used from annotations (?). essentially the same as the above using a resultset-mapping reference but without cachemode readonly and comment. fixme annotations do not use it so it can be remove from my pov @deprecated @param query the sql query string @param resultsetref the result-set-mapping name @param queryspaces any specified query spaces (used for auto-flushing) @param cacheable whether the query results are cacheable @param cacheregion if cacheable the region into which to store the results @param timeout a jdbc-level timeout to be applied @param fetchsize a jdbc-level fetch-size to be applied @param flushmode the flush mode to use for this query @param parametertypes parameter type map @param callable does the query string represent a callable object (i.e. proc)	DESIGN	0.9999981034841587	DESIGN	1.8965158411648747E-6	WITHOUT_CLASSIFICATION
todo add the notion of enabled filters to the cachekey to differentiate filtered collections from non-filtered but cachekey is currently used for both collections and entities would ideally need to define two seperate ones currently this works in conjuction with the check on defaultinitializecollectioneventhandler.initializecollectionfromcache() (which makes sure to not read from cache with enabled filters). early exit!!!!!	DESIGN	0.9998930223593709	DESIGN	1.0697764062906179E-4	WITHOUT_CLASSIFICATION
for sets we should end the collection load after resolving the entities since we might call hashcode() on the elements todo or we could do this polymorphically and have two different operations implemented differently for arrays	DESIGN	0.9949460648778821	DESIGN	0.00505393512211801	WITHOUT_CLASSIFICATION
this is not very nice (and quite slow)	DESIGN	0.9201496848965286	DESIGN	0.07985031510347143	WITHOUT_CLASSIFICATION
use of trim() here is ugly?	DESIGN	0.99941551077723	WITHOUT_CLASSIFICATION	5.844892227700311E-4	DESIGN
todo this is too conservative if all preceding joins were also inner joins we could use an inner join here	DESIGN	0.6634103413292247	DESIGN	0.33658965867077517	WITHOUT_CLASSIFICATION
todo look at the owning property and check that it isn't lazy (by instrumentation)	DESIGN	0.5123091537302431	WITHOUT_CLASSIFICATION	0.48769084626975684	DESIGN
todo inefficient	DESIGN	0.6488603841153954	WITHOUT_CLASSIFICATION	0.35113961588460463	DESIGN
why does this matter?	DESIGN	0.9794747173446254	WITHOUT_CLASSIFICATION	0.020525282655374528	DESIGN
from the collection of associations locate oja for the manytoone corresponding to this persister to fully define the many-to-many we need that oja so that we can use its alias here todo is there a better way here?	DESIGN	0.9998425172129604	DESIGN	1.5748278703955445E-4	WITHOUT_CLASSIFICATION
todo this class depends directly upon criteriaimpl in the impl package add a criteriaimplementor interface	DESIGN	0.9427366810904936	DESIGN	0.057263318909506394	WITHOUT_CLASSIFICATION
todo add a criteriaimplementor interface this class depends directly upon criteriaimpl in the impl package	DESIGN	0.9427366810904936	DESIGN	0.057263318909506394	WITHOUT_CLASSIFICATION
todo not so sure this is needed	DESIGN	0.8687929938568134	DESIGN	0.1312070061431866	WITHOUT_CLASSIFICATION
meant to handle dynamic instantiation queries(copy from queryloader)	DESIGN	0.9978231275191136	WITHOUT_CLASSIFICATION	0.002176872480886416	DESIGN
todo the order in which entities are saved may matter (e.g. a particular transient entity may need to be saved before other transient entities can be saved keep retrying the batch of transient entities until either 1) there are no transient entities left in transientcopycache or 2) no transient entities were saved in the last batch for now just run through the transient entities and retry the merge	DESIGN	0.6129901976753255	WITHOUT_CLASSIFICATION	0.3870098023246745	DESIGN
todo this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.999993772207277	DESIGN	6.2277927229132374E-6	WITHOUT_CLASSIFICATION
todo currently expects that the individual with expressions apply to the same sql table join. this may not be the case for joined-subclass where the property values might be coming from different tables in the joined hierarchy. at some point we should expand this to support that capability. however that has some difficulties 1) the biggest is how to handle ors when the individual comparisons are linked to different sql joins. 2) here we would need to track each comparison individually along with the join alias to which it applies and then pass that information back to the fromelement so it can pass it along to the joinsequence	DESIGN	0.9998738689162934	DESIGN	1.2613108370653338E-4	WITHOUT_CLASSIFICATION
this function has a template -> restore output apply the template and write the result out todo downcast to avoid using an interface? yuck.	DESIGN	0.9859003728019474	WITHOUT_CLASSIFICATION	0.014099627198052597	DESIGN
at some point the generate phase needs to be moved out of here because a single object-level dml might spawn multiple sql dml command executions. possible to just move the sql generation for dml stuff but for consistency-sake probably best to just move responsiblity for the generation phase completely into the delegates (queryloader/statementexecutor) themselves. also not sure why queryloader currently even has a dependency on this at all does it need it? ideally like to see the walker itself given to the delegates directly	DESIGN	0.9999581070154535	DESIGN	4.1892984546474964E-5	WITHOUT_CLASSIFICATION
get the right object from the list would it be easier to just call getentity() ??	DESIGN	0.9994257183151624	WITHOUT_CLASSIFICATION	5.742816848375668E-4	DESIGN
todo should we just collect these like with the collections above?	DESIGN	0.9838553964071131	DESIGN	0.01614460359288699	WITHOUT_CLASSIFICATION
todo better to handle dynamic filters through implicit dynamicfilterparameterspecification see the discussion there in dynamicfilterparameterspecification's javadocs as to why it is currently not done that way.	DESIGN	0.9988014876664734	DESIGN	0.0011985123335266023	WITHOUT_CLASSIFICATION
/ used only for regression testing!!!! todo obviously get rid of all this junk ) /	DESIGN	0.9981565918060649	DESIGN	0.0018434081939351715	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9998813203317594	WITHOUT_CLASSIFICATION	1.1867966824064441E-4	DESIGN
todo deprecated remove eventually	DESIGN	0.9096242976438663	DESIGN	0.09037570235613367	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9998813203317594	WITHOUT_CLASSIFICATION	1.1867966824064441E-4	DESIGN
todo improve this hack!	DESIGN	0.978282263751895	DESIGN	0.021717736248104955	WITHOUT_CLASSIFICATION
inheritance cycle detection (paranoid check)	DESIGN	0.9994347317778937	WITHOUT_CLASSIFICATION	5.652682221063909E-4	DESIGN
todo remove use of instanceof!	DESIGN	0.9028172659891732	DESIGN	0.09718273401082671	WITHOUT_CLASSIFICATION
shortcut	DESIGN	0.9995809822334746	WITHOUT_CLASSIFICATION	4.190177665254036E-4	DESIGN
todo handle the case of a foreign key to something other than the pk	DESIGN	0.8124959527037462	DESIGN	0.18750404729625383	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9998813203317594	WITHOUT_CLASSIFICATION	1.1867966824064441E-4	DESIGN
todo remove	DESIGN	0.7672817669408148	DESIGN	0.23271823305918515	WITHOUT_CLASSIFICATION
todo remove	DESIGN	0.7672817669408148	DESIGN	0.23271823305918515	WITHOUT_CLASSIFICATION
todo remove	DESIGN	0.7672817669408148	DESIGN	0.23271823305918515	WITHOUT_CLASSIFICATION
todo throw exception?	DESIGN	0.6000395805661541	DESIGN	0.39996041943384575	WITHOUT_CLASSIFICATION
todo throw exception? maybe warn if not the same?	DESIGN	0.995745249309033	DESIGN	0.004254750690967085	WITHOUT_CLASSIFICATION
todo make entitypersister not depend on sessionfactoryimplementor interface if possible	DESIGN	0.960713197726613	DESIGN	0.0392868022733869	WITHOUT_CLASSIFICATION
todo is there a more elegant way than downcasting?	DESIGN	0.9974017091700442	DESIGN	0.0025982908299557153	WITHOUT_CLASSIFICATION
todo encapsulate the protected instance variables!	DESIGN	0.7235567930558316	DESIGN	0.2764432069441684	WITHOUT_CLASSIFICATION
should indicate that we are processing an insert/update/delete query with a subquery implied via a collection property function. here we need to use the table name itself as the qualification alias. todo verify this works for all databases todo is this also the case in non-"indexed" scenarios?	DESIGN	0.9075866818270599	DESIGN	0.09241331817294014	WITHOUT_CLASSIFICATION
todo copy/paste from insertrows()	DESIGN	0.5236906174087332	DESIGN	0.4763093825912667	WITHOUT_CLASSIFICATION
todo copy/paste from recreate()	DESIGN	0.5236906174087332	DESIGN	0.4763093825912667	WITHOUT_CLASSIFICATION
should this interface extend propertymapping?	DESIGN	0.9827028891833649	WITHOUT_CLASSIFICATION	0.0172971108166351	DESIGN
ie. the subquery! yuck!	DESIGN	0.9997685643748293	WITHOUT_CLASSIFICATION	2.314356251706415E-4	DESIGN
todo move to .sql package!!	DESIGN	0.9666431716483116	DESIGN	0.033356828351688385	WITHOUT_CLASSIFICATION
todo code duplication with singletableentitypersister	DESIGN	0.8506949307280839	DESIGN	0.14930506927191617	WITHOUT_CLASSIFICATION
todo it would be really really nice to use this to also model components!	DESIGN	0.9988291227167652	DESIGN	0.0011708772832349113	WITHOUT_CLASSIFICATION
todo two hashmap lookups here is one too many	DESIGN	0.9210209978141944	WITHOUT_CLASSIFICATION	0.07897900218580564	DESIGN
todo code duplication with joinedsubclassentitypersister	DESIGN	0.8506949307280839	DESIGN	0.14930506927191617	WITHOUT_CLASSIFICATION
perhaps not really necessary	DESIGN	0.8356961850655001	DESIGN	0.16430381493449986	WITHOUT_CLASSIFICATION
note this assumes something about how propertyselectfragment is implemented by the subclass! was tounqotedaliasstrings( getidentifercolumnnames() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.9990939980435478	WITHOUT_CLASSIFICATION	9.060019564522365E-4	DESIGN
note this assumes something about how propertyselectfragment is implemented by the subclass! was tounqotedaliasstrings( getdiscriminatorcolumnname() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.9990939980435478	WITHOUT_CLASSIFICATION	9.060019564522365E-4	DESIGN
todo should we use select .. for update?	DESIGN	0.9695831698882214	DESIGN	0.0304168301117786	WITHOUT_CLASSIFICATION
todo optimize this better!	DESIGN	0.8312632247807539	DESIGN	0.1687367752192461	WITHOUT_CLASSIFICATION
todo should we allow suffixes on these ?	DESIGN	0.9900542754080561	DESIGN	0.009945724591943822	WITHOUT_CLASSIFICATION
this is really ugly but necessary	DESIGN	0.6902030027177554	WITHOUT_CLASSIFICATION	0.3097969972822447	DESIGN
ugly little workaround for fact that createuniquekeyloaders() does not handle component properties	DESIGN	0.9997509573204665	DESIGN	2.4904267953353967E-4	WITHOUT_CLASSIFICATION
todo disable batch loading if lockmode > read?	DESIGN	0.9782406898722832	WITHOUT_CLASSIFICATION	0.02175931012771676	DESIGN
append the sql to return the generated identifier todo suck into insert	DESIGN	0.8517352458149111	DESIGN	0.1482647541850889	WITHOUT_CLASSIFICATION
todo i am not so sure about the exception handling in this bit!	DESIGN	0.9945328631104838	DESIGN	0.00546713688951622	WITHOUT_CLASSIFICATION
todo is this really necessary????	DESIGN	0.8811333198533828	DESIGN	0.11886668014661705	WITHOUT_CLASSIFICATION
todo move to .sql package and refactor with similar things!	DESIGN	0.9938670187310451	DESIGN	0.006132981268954864	WITHOUT_CLASSIFICATION
todo implement functionality this might be painful to do here as the "join post processing" for the subquery has already been performed (meaning that for theta-join dialects the join conditions have already been moved over to the where clause). a "simple" solution here might to perform "join post processing" once for the entire query (including any subqueries) at one fell swoop	DESIGN	0.9999594490866925	DESIGN	4.0550913307570966E-5	WITHOUT_CLASSIFICATION
todo this eventually needs to be removed	DESIGN	0.9601009144002561	DESIGN	0.039899085599743825	WITHOUT_CLASSIFICATION
kinda ugly but needed for collections with a "." node mapping	DESIGN	0.9671118494016849	WITHOUT_CLASSIFICATION	0.03288815059831503	DESIGN
is this ok?	DESIGN	0.9993897728783753	WITHOUT_CLASSIFICATION	6.102271216247385E-4	DESIGN
todo perhaps this should be some other runtimeexception	DESIGN	0.9999658250580383	DESIGN	3.417494196165978E-5	WITHOUT_CLASSIFICATION
todo make this a bit nicer	DESIGN	0.9543202779250657	DESIGN	0.04567972207493426	WITHOUT_CLASSIFICATION
yuck	DESIGN	0.996426020762867	WITHOUT_CLASSIFICATION	0.0035739792371328755	DESIGN
todo we should provide some way to get keys of collection of statistics to make it easier to retrieve from a gui perspective	DESIGN	0.9999726769182371	DESIGN	2.7323081763008147E-5	WITHOUT_CLASSIFICATION
@return collection removal fixme even if isinverse="true"?	DESIGN	0.8908165645244497	DESIGN	0.10918343547555043	WITHOUT_CLASSIFICATION
todo will need reference to session factory to fully complete hhh-1907	DESIGN	0.9808385844691377	DESIGN	0.01916141553086224	WITHOUT_CLASSIFICATION
todo currently keeps getters and setters (instead of propertyaccessors) because of the way getgetter() and getsetter() are implemented currently yuck!	DESIGN	0.6864533653499806	WITHOUT_CLASSIFICATION	0.3135466346500194	DESIGN
todo redesign how propertyaccessors are acquired	DESIGN	0.8640437581807096	DESIGN	0.13595624181929042	WITHOUT_CLASSIFICATION
todo yuck!!!	DESIGN	0.6876123251156446	WITHOUT_CLASSIFICATION	0.31238767488435537	DESIGN
todo yuck!!! fix after hhh-1907 is complete	DESIGN	0.9969002039882455	DESIGN	0.0030997960117545285	WITHOUT_CLASSIFICATION
todo need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9945733555600477	DESIGN	0.005426644439952262	WITHOUT_CLASSIFICATION
todo design new lifecycle for proxyfactory	DESIGN	0.6313545737412523	WITHOUT_CLASSIFICATION	0.36864542625874774	DESIGN
todo would be nice to handle proxy classes elegantly!	DESIGN	0.9621559307799679	DESIGN	0.03784406922003215	WITHOUT_CLASSIFICATION
todo copy/paste from manytoonetype	DESIGN	0.5236906174087332	DESIGN	0.4763093825912667	WITHOUT_CLASSIFICATION
todo should this be session.instantiate(persister )?	DESIGN	0.9815324768615404	DESIGN	0.01846752313845956	WITHOUT_CLASSIFICATION
todo this is a bit arbitrary expose a switch to the user?	DESIGN	0.7456343158007555	DESIGN	0.2543656841992445	WITHOUT_CLASSIFICATION
todo implement caching?! proxies?!	DESIGN	0.8934392404129254	DESIGN	0.10656075958707456	WITHOUT_CLASSIFICATION
todo is this right??	DESIGN	0.7076575255698423	DESIGN	0.2923424744301576	WITHOUT_CLASSIFICATION
is this really necessary?	DESIGN	0.9909865169513665	WITHOUT_CLASSIFICATION	0.009013483048633402	DESIGN
todo move these to a new joinabletype abstract class extended by entitytype and persistentcollectiontype	DESIGN	0.9815687374435975	DESIGN	0.0184312625564025	WITHOUT_CLASSIFICATION
todo this is very suboptimal for some subclasses (namely components) since it does not take advantage of two-phase-load	DESIGN	0.9975353833410416	DESIGN	0.0024646166589582957	WITHOUT_CLASSIFICATION
worrying about proxies is perhaps a little bit of overkill here	DESIGN	0.5401757222224841	DESIGN	0.4598242777775158	WITHOUT_CLASSIFICATION
note very hackish workaround!! todo fix this so it will work for non-pojo entity mode	DESIGN	0.9995244933161059	DESIGN	4.755066838940359E-4	WITHOUT_CLASSIFICATION
todo fix this so it will work for non-pojo entity mode	DESIGN	0.9954609336142104	DESIGN	0.00453906638578964	WITHOUT_CLASSIFICATION
we would probably refactor to have logicparser (builds a tree of simple expressions connected by and or not) expressionparser (translates from oo terms like foo foo.bar foo.bar.baz to sql terms like foos.id foos.bar_id etc) and pathexpressionparser (which does much the same thing it does now)	DESIGN	0.9964960488153074	WITHOUT_CLASSIFICATION	0.0035039511846925112	DESIGN
todo this is a little inefficient don't need to do a whole deep replaceelements() call	DESIGN	0.9978156922879753	DESIGN	0.002184307712024716	WITHOUT_CLASSIFICATION
workaround for weblogic	DESIGN	0.8432924005152741	WITHOUT_CLASSIFICATION	0.15670759948472585	DESIGN
todo this dependency is kinda bad	DESIGN	0.9935994242914044	DESIGN	0.006400575708595635	WITHOUT_CLASSIFICATION
ick!	DESIGN	0.9992890420817192	WITHOUT_CLASSIFICATION	7.109579182807762E-4	DESIGN
short cut check	DESIGN	0.9982757363433644	WITHOUT_CLASSIFICATION	0.0017242636566355263	DESIGN
todo move to stringhelper?	DESIGN	0.9666431716483116	DESIGN	0.033356828351688385	WITHOUT_CLASSIFICATION
yukky! don't you have subclasses for that! todo race conditions can happen here	DESIGN	0.8374264753267743	WITHOUT_CLASSIFICATION	0.16257352467322575	DESIGN
todo we probably should have a statisticsnotpublishedexception to make it clean	DESIGN	0.9976439169133697	DESIGN	0.002356083086630383	WITHOUT_CLASSIFICATION
fixme hack to work around fact that calling node added = root.addchild( fqn ) doesn't properly set the version on the node	DESIGN	0.9999967172229655	DESIGN	3.2827770345647305E-6	WITHOUT_CLASSIFICATION
todo i considered validating the presence of the ts cache here but decided to defer unti getquerycacheinstance() in case the cache is never actually used	DESIGN	0.9899910152271401	DESIGN	0.01000898477285986	WITHOUT_CLASSIFICATION
need to do that here rather than in the save event listener to let the post insert events to have a id-filled entity when identity is used (ejb3)	DESIGN	0.9814993467254154	DESIGN	0.018500653274584607	WITHOUT_CLASSIFICATION
todo simply remove this override if we fix the above todos	DESIGN	0.9984052340566218	DESIGN	0.001594765943378197	WITHOUT_CLASSIFICATION
this is used by sessionfactoryimpl to hand to the generated sessionimpl was the only reason i could see that we cannot just use null as settings.cacheprovider	DESIGN	0.9262348414910344	DESIGN	0.07376515850896564	WITHOUT_CLASSIFICATION
this is done here 'cos we might only know the type here (ugly!) todo improve this a lot	DESIGN	0.9989916363912648	DESIGN	0.001008363608735249	WITHOUT_CLASSIFICATION
todo would love to have this work on a notification basis where the successful binding of an entity/subclass would emit a notification which the extendsqueue entries could react to	DESIGN	0.8827277677216597	DESIGN	0.11727223227834026	WITHOUT_CLASSIFICATION
todo not sure the best way to handle this. the non-performant way	DESIGN	0.9783234304643346	DESIGN	0.02167656953566536	WITHOUT_CLASSIFICATION
would be better to use the element-type to determine whether the old and the new are equal here the problem being we do not necessarily have access to the element type in all cases	DESIGN	0.9710896928504825	WITHOUT_CLASSIFICATION	0.028910307149517405	DESIGN
this next bit is to allow for both unsaved-value="negative" and for "older" behavior where version number did not get seeded if it was already set in the object todo shift it into unsaved-value strategy	DESIGN	0.8609293077610738	DESIGN	0.1390706922389262	WITHOUT_CLASSIFICATION
merges don't cascade to uninitialized collections todo perhaps this does need to cascade after all.	DESIGN	0.9998820177355097	DESIGN	1.1798226449023863E-4	WITHOUT_CLASSIFICATION
todo an alternative is to check if the owner has changed if it hasn't then return collection.getowner()	DESIGN	0.934915575186642	WITHOUT_CLASSIFICATION	0.0650844248133579	DESIGN
it is possible that the tree-walking in outerjoinloader can get to an association defined by a subclass in which case the property-ref might refer to a property defined on a subclass of the current class in this case the table name is not known - this temporary solution assumes that the property-ref refers to a property of the subclass table that the association belongs to (a reasonable guess) todo fix this add outerjoinloadable.getsubclasspropertytablename(string propertyname)	DESIGN	0.999999852038795	DESIGN	1.4796120487562463E-7	WITHOUT_CLASSIFICATION
this only works because collection entries are kept in a sequenced map by persistence context (maybe we should do like entities and keep a separate sequences set) todo calling entryset on an identitymap is slow!!	DESIGN	0.9975264824332265	DESIGN	0.0024735175667734183	WITHOUT_CLASSIFICATION
important to account for newly saved entities in query todo some kind of check for new status	DESIGN	0.9864202713919658	DESIGN	0.013579728608034188	WITHOUT_CLASSIFICATION
brand new collection todo or an array!! we can't lock objects with arrays now??	DESIGN	0.5917148925037387	DESIGN	0.40828510749626135	WITHOUT_CLASSIFICATION
todo if object was an uninitialized proxy this is inefficient resulting in two sql selects	DESIGN	0.8132531258979513	WITHOUT_CLASSIFICATION	0.18674687410204863	DESIGN
before cascade! todo should this be session.instantiate(persister )?	DESIGN	0.9706254696114981	DESIGN	0.02937453038850194	WITHOUT_CLASSIFICATION
todo absolutely no usages of this constructor form can it go away?	DESIGN	0.7956560119155807	DESIGN	0.2043439880844193	WITHOUT_CLASSIFICATION
todo need to find a clean way to handle the "event source" role a seperate classs responsible for generating/dispatching events just duplicates most of the session methods passing around seperate reto interceptor factory actionqueue and persistentcontext is not manageable	DESIGN	0.9999998959903369	DESIGN	1.0400966310519822E-7	WITHOUT_CLASSIFICATION
todo remove	DESIGN	0.7672817669408148	DESIGN	0.23271823305918515	WITHOUT_CLASSIFICATION
aliasrefnode.resolve( false false aliasrefnode.gettext() ) todo is it kosher to do it here? todo is it kosher to do it here?	DESIGN	0.9570600212181345	DESIGN	0.04293997878186543	WITHOUT_CLASSIFICATION
no explicit select expression render the id and properties projection lists for every persister in the from clause into a single 'token node'. todo the only reason we need this stuff now is collection filters we should get rid of derived select clause completely!	DESIGN	0.9992930683096849	DESIGN	7.06931690315066E-4	WITHOUT_CLASSIFICATION
todo an optimization here would be to consider cascade deletes and not gen those delete statements the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> the table info gotten here should really be self-contained (i.e. a class representation defining all the needed attributes) then we could then get an array of those	DESIGN	0.9998958186105934	DESIGN	1.0418138940650162E-4	WITHOUT_CLASSIFICATION
todo get sql rendering out of here create an ast for the join expressions. use the sql generator grammar to generate the sql text for the index expression.	DESIGN	0.8992784054650543	WITHOUT_CLASSIFICATION	0.10072159453494561	DESIGN
todo this really needs to be delayed unitl after we definitively know all node types where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DESIGN	0.9868563641085244	DESIGN	0.013143635891475627	WITHOUT_CLASSIFICATION
todo figure out a better way to get the from elements in a proper tree structure. if this is not the destination of a many-to-many add it as a child of the origin.	DESIGN	0.9900880509168287	DESIGN	0.00991194908317128	WITHOUT_CLASSIFICATION
work around that crazy issue where the tree contains "empty" fromelements (no text) afaict this is caused by fromelementfactory.createcollectionjoin()	DESIGN	0.9985717319003957	WITHOUT_CLASSIFICATION	0.0014282680996043039	DESIGN
todo this class does too many things! we need a different kind of path expression parser for each of the diffferent ways in which path expressions can occur	DESIGN	0.9897997709222035	DESIGN	0.01020022907779647	WITHOUT_CLASSIFICATION
real hacky used to count the nesting of parentheses	DESIGN	0.8356425409965734	WITHOUT_CLASSIFICATION	0.1643574590034266	DESIGN
todo would be really nice to cache the spec on the query-def so as to not have to re-calc the hash currently not doable though because of the resultset-ref stuff	DESIGN	0.7822526895603931	WITHOUT_CLASSIFICATION	0.21774731043960702	DESIGN
for arrays we should end the collection load before resolving the entities since the actual array instances are not instantiated during loading todo or we could do this polymorphically and have two different operations implemented differently for arrays	DESIGN	0.812325760627941	DESIGN	0.18767423937205888	WITHOUT_CLASSIFICATION
polymorphism not really handled completely correctly perhapswell actually its ok assuming that the entity name used in the lookup is the same as the the one used here which it will be	DESIGN	0.9797078330404175	WITHOUT_CLASSIFICATION	0.020292166959582462	DESIGN
todo should "record" how many properties we have reffered to - and if we don't get'em'all we throw an exception! way better than trial and error )	DESIGN	0.9999625220827082	DESIGN	3.747791729174571E-5	WITHOUT_CLASSIFICATION
very important!!!! - this class needs to be free of any static references to any cglib or javassist classes. otherwise users will always need both on their classpaths no matter which (if either) they use. another option here would be to remove the hibernate.ispropertyinitialized() method and have the users go through the sessionfactory to get this information.	DESIGN	0.8434317706695513	WITHOUT_CLASSIFICATION	0.1565682293304487	DESIGN
todo is it really neceassry to provide configuration to collectionpersisters ? should it not be enough with associated class ? or why does entitypersister's not get access to configuration ? the only reason i could see that configuration gets passed to collection persisters is so that they can look up the dom4j node name of the entity element in case no explicit node name was applied at the collection element level. are you kidding me? trivial to fix then. just store and expose the node name on the entity persister (which the collection persister looks up anyway via other means).	DESIGN	0.9999999784271458	DESIGN	2.1572854244504028E-8	WITHOUT_CLASSIFICATION
for backward compatibility allow a set with no not-null element columns using all columns in the row locater sql todo create an implicit not null constraint on all cols?	DESIGN	0.7843247792386223	DESIGN	0.21567522076137755	WITHOUT_CLASSIFICATION
spaces todo i'm not sure but perhaps we should exclude abstract denormalized tables?	DESIGN	0.9993834732096072	DESIGN	6.165267903928447E-4	WITHOUT_CLASSIFICATION
workaround for backward compatibility of sets with no not-null columns assume all columns are used in the row locator sql	DESIGN	0.5610295407937238	DESIGN	0.43897045920627614	WITHOUT_CLASSIFICATION
note that this method could easily be moved up to basicentitypersister if we ever needed to reuse it from other subclasses	DESIGN	0.9053510305683349	WITHOUT_CLASSIFICATION	0.09464896943166516	DESIGN
index += getpropertycolumnspan( i ) todo this is kinda slow	DESIGN	0.942832848664876	DESIGN	0.05716715133512406	WITHOUT_CLASSIFICATION
todo need some caching scheme? really comes down to decision regarding amount of state (if any) kept on propertyaccessors	DESIGN	0.708544545299906	DESIGN	0.2914554547000941	WITHOUT_CLASSIFICATION
todo here is why we need to make bytecode provider global ( todo again fix this after hhh-1907 is complete	DESIGN	0.999982771236468	DESIGN	1.7228763532000556E-5	WITHOUT_CLASSIFICATION
todo yuck! this is not quite good enough it's a quick hack around the problem of having a to-one association that refers to an embedded component	DESIGN	0.999999982182311	DESIGN	1.7817688907508235E-8	WITHOUT_CLASSIFICATION
for dom4j "collections" only todo it would be better if this was done at the higher level by printer	DESIGN	0.9521061639849054	DESIGN	0.04789383601509451	WITHOUT_CLASSIFICATION
would be great to move all this below here into another method that could also be used from the new scrolling stuff. would need to change the way the max-row stuff is handled (i.e. behind an interface) so that i could do the control breaking at the means to know when to stop	DESIGN	0.9999932547034039	DESIGN	6.7452965961108245E-6	WITHOUT_CLASSIFICATION
todo can we always use the "null property" approach for everything?	DESIGN	0.9606470354212796	DESIGN	0.03935296457872047	WITHOUT_CLASSIFICATION
polymorphism comment above	DESIGN	0.999965441205516	WITHOUT_CLASSIFICATION	3.455879448399941E-5	DESIGN
some messy complex stuff here since createcriteria() can take an aliased path or a path rooted at the creating criteria instance	DESIGN	0.9999941463688858	WITHOUT_CLASSIFICATION	5.853631114208729E-6	DESIGN
todo really bad evil hack to fix!!!	DESIGN	0.9999937468377159	DESIGN	6.2531622840649315E-6	WITHOUT_CLASSIFICATION
ugly hack for cases like "elements(foo.bar.collection)" (multi-part path expression ending in elements or indices)	DESIGN	0.9902222001601128	DESIGN	0.00977779983988738	WITHOUT_CLASSIFICATION
try block is a hack around fact that currently tuplizers are not given the opportunity to resolve a subclass entity name. this allows the (we assume custom) interceptor the ability to influence this decision if we were not able to based on the given entityname	DESIGN	0.9999805537402116	DESIGN	1.9446259788517104E-5	WITHOUT_CLASSIFICATION
/ hack alert !!!!!!!!!!!!!!!!!!!!!!!!!!!! attempt to work around "ghost" impliedfromelements that occasionally show up between the actual things being joined. this consistently occurs from index nodes (at least against many-to-many). not sure if there are other conditions essentially look-ahead to the next fromelement that actually writes something to the sql	DESIGN	0.5315891025848178	DESIGN	0.4684108974151821	WITHOUT_CLASSIFICATION
init the table here instead of earlier so that we can get a quoted table name todo would it be better to simply pass the qualified table name instead of splitting it up into schema/catalog/table names	DESIGN	0.8538647671858953	DESIGN	0.14613523281410473	WITHOUT_CLASSIFICATION
todo would be great to have a mapping#hasnonidentifierpropertynamedid method i don't believe that mapping#getreferencedpropertytype accounts for the identifier property so if it returns for a property named 'id' then we should have a non-id field named id	DESIGN	0.9815877728133565	DESIGN	0.018412227186643475	WITHOUT_CLASSIFICATION
todo is this really necessary????	DESIGN	0.8811333198533828	DESIGN	0.11886668014661705	WITHOUT_CLASSIFICATION
todo ideally we need the construction of propertyaccessor to take the following 1) entitymode 2) entitymode-specific data (i.e. the classname for pojo entities) 3) property-specific data based on the entitymode (i.e. property-name or dom4j-node-name) the easiest way with the introduction of the new runtime-metamodel classes would be the the following predicates 1) propertyaccessorfactory.getpropertyaccessor() takes references to both a org.hibernate.metadata.entitymodemetadata and org.hibernate.metadata.property 2) what is now termed a "propertyaccessor" stores any values needed from those two pieces of information 3) code can then simply call propertyaccess.getgetter() with no parameters likewise with propertyaccessor.getsetter()	DESIGN	0.9335541729898946	DESIGN	0.0664458270101053	WITHOUT_CLASSIFICATION
todo this is temporary in that the end result will probably not take a property reference per-se.	DESIGN	0.999181679510663	DESIGN	8.183204893370678E-4	WITHOUT_CLASSIFICATION
todo this eventually needs to be removed	DESIGN	0.9601009144002561	DESIGN	0.039899085599743825	WITHOUT_CLASSIFICATION
todo make this a bit nicer	DESIGN	0.9543202779250657	DESIGN	0.04567972207493426	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9994990537831938	DESIGN	5.009462168061626E-4	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9994990537831938	DESIGN	5.009462168061626E-4	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9994990537831938	DESIGN	5.009462168061626E-4	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9994990537831938	DESIGN	5.009462168061626E-4	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9994990537831938	DESIGN	5.009462168061626E-4	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9994990537831938	DESIGN	5.009462168061626E-4	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9994990537831938	DESIGN	5.009462168061626E-4	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9994990537831938	DESIGN	5.009462168061626E-4	WITHOUT_CLASSIFICATION
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9995892020554652	DESIGN	4.1079794453486565E-4	WITHOUT_CLASSIFICATION
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9995892020554652	DESIGN	4.1079794453486565E-4	WITHOUT_CLASSIFICATION
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9995892020554652	DESIGN	4.1079794453486565E-4	WITHOUT_CLASSIFICATION
todo probably better to calculate these and pass them in as it'll be more performant	DESIGN	0.9763926119301104	DESIGN	0.02360738806988966	WITHOUT_CLASSIFICATION
