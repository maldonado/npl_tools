test out the optimizer	WITHOUT_CLASSIFICATION	0.999991110259138	WITHOUT_CLASSIFICATION	8.889740862062212E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997580331562604	WITHOUT_CLASSIFICATION	2.4196684373946567E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997580331562604	WITHOUT_CLASSIFICATION	2.4196684373946567E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997580331562604	WITHOUT_CLASSIFICATION	2.4196684373946567E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997580331562604	WITHOUT_CLASSIFICATION	2.4196684373946567E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997580331562604	WITHOUT_CLASSIFICATION	2.4196684373946567E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997580331562604	WITHOUT_CLASSIFICATION	2.4196684373946567E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997580331562604	WITHOUT_CLASSIFICATION	2.4196684373946567E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9996837564947995	WITHOUT_CLASSIFICATION	3.1624350520061996E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9996837564947995	WITHOUT_CLASSIFICATION	3.1624350520061996E-4	DESIGN
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9996946778105622	WITHOUT_CLASSIFICATION	3.0532218943773494E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9996068946777141	WITHOUT_CLASSIFICATION	3.931053222858822E-4	DESIGN
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999648480358556	WITHOUT_CLASSIFICATION	3.515196414449279E-5	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999896938658204	WITHOUT_CLASSIFICATION	1.0306134179698474E-5	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999896938658204	WITHOUT_CLASSIFICATION	1.0306134179698474E-5	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999996687572945	WITHOUT_CLASSIFICATION	3.3124270553951595E-7	DESIGN
invokeinterface invoke enabled.getinterceptfieldcallback()	WITHOUT_CLASSIFICATION	0.9999357549556599	WITHOUT_CLASSIFICATION	6.424504434007047E-5	DESIGN
putfield new value of the field	WITHOUT_CLASSIFICATION	0.999841099597507	WITHOUT_CLASSIFICATION	1.589004024930721E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9990346154946106	WITHOUT_CLASSIFICATION	9.65384505389467E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999930256094438	WITHOUT_CLASSIFICATION	6.974390556148746E-6	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999930256094438	WITHOUT_CLASSIFICATION	6.974390556148746E-6	DESIGN
long	WITHOUT_CLASSIFICATION	0.9997851706770645	WITHOUT_CLASSIFICATION	2.1482932293535422E-4	DESIGN
just decrement the lock don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999599371302699	WITHOUT_CLASSIFICATION	4.006286973014239E-5	DESIGN
decode row selection	WITHOUT_CLASSIFICATION	0.9999479529740285	WITHOUT_CLASSIFICATION	5.20470259715895E-5	DESIGN
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9997847428699578	WITHOUT_CLASSIFICATION	2.1525713004220926E-4	DESIGN
again ccs did not have such a concept but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not jta aware.	WITHOUT_CLASSIFICATION	0.9999064054335495	WITHOUT_CLASSIFICATION	9.359456645058446E-5	DESIGN
check	WITHOUT_CLASSIFICATION	0.9994618431283165	WITHOUT_CLASSIFICATION	5.381568716834208E-4	DESIGN
row id	WITHOUT_CLASSIFICATION	0.9999230033549922	WITHOUT_CLASSIFICATION	7.699664500787722E-5	DESIGN
composite-id	WITHOUT_CLASSIFICATION	0.9996068946777141	WITHOUT_CLASSIFICATION	3.931053222858822E-4	DESIGN
discriminator	WITHOUT_CLASSIFICATION	0.9996070754991574	WITHOUT_CLASSIFICATION	3.929245008426112E-4	DESIGN
property prop = new property() prop.setname("id") prop.setpropertyaccessorname("embedded") prop.setvalue(id) entity.setidentifierproperty(prop)	WITHOUT_CLASSIFICATION	0.9998250084202304	WITHOUT_CLASSIFICATION	1.7499157976967448E-4	DESIGN
dynamic insert	WITHOUT_CLASSIFICATION	0.9998001643431585	WITHOUT_CLASSIFICATION	1.9983565684145006E-4	DESIGN
persister	WITHOUT_CLASSIFICATION	0.9993359648834447	WITHOUT_CLASSIFICATION	6.640351165553799E-4	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9991503711895766	WITHOUT_CLASSIFICATION	8.496288104233353E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9998574896175293	WITHOUT_CLASSIFICATION	1.4251038247074037E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9998574896175293	WITHOUT_CLASSIFICATION	1.4251038247074037E-4	DESIGN
generated properties can never be insertable	WITHOUT_CLASSIFICATION	0.9973236597115462	WITHOUT_CLASSIFICATION	0.0026763402884537966	DESIGN
table	WITHOUT_CLASSIFICATION	0.9999094602433615	WITHOUT_CLASSIFICATION	9.05397566384285E-5	DESIGN
by default natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999280117551327	WITHOUT_CLASSIFICATION	7.198824486729916E-5	DESIGN
( (column) ( (simplevalue) ic.getindex() ).getcolumniterator().next() ).setnullable(false)	WITHOUT_CLASSIFICATION	0.999888676797541	WITHOUT_CLASSIFICATION	1.1132320245890116E-4	DESIGN
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.8807098360705072	WITHOUT_CLASSIFICATION	0.1192901639294927	DESIGN
build a resultsetmappingdefinition given a containing element for the "return-xxx" elements @param resultsetelem the element containing the return definitions. @param path no clue @param mappings the current processing state. @return the description of the mappings	WITHOUT_CLASSIFICATION	0.9999001876341321	WITHOUT_CLASSIFICATION	9.98123658678025E-5	DESIGN
private boolean showsql private boolean formatsql	WITHOUT_CLASSIFICATION	0.9994223985196482	WITHOUT_CLASSIFICATION	5.776014803518626E-4	DESIGN
public boolean isshowsqlenabled() { return showsql } public boolean isformatsqlenabled() { return formatsql }	WITHOUT_CLASSIFICATION	0.9989087111677881	WITHOUT_CLASSIFICATION	0.0010912888322119328	DESIGN
set a custom entity resolver. this entity resolver must be set before addxxx(misc) call. default value is {@link org.hibernate.util.dtdentityresolver} @param entityresolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9973572639265817	WITHOUT_CLASSIFICATION	0.0026427360734182265	DESIGN
final list extendsqueue	WITHOUT_CLASSIFICATION	0.9999086656805874	WITHOUT_CLASSIFICATION	9.133431941252763E-5	DESIGN
if close() is called guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999128671827345	WITHOUT_CLASSIFICATION	8.713281726549004E-5	DESIGN
if a threadlocalsessioncontext-bound session happens to get serialized to be completely correct we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9828960088191474	WITHOUT_CLASSIFICATION	0.01710399118085267	DESIGN
on the inverse it makes sense that if a threadlocalsessioncontext- bound session then gets deserialized to go ahead and re-bind it to the threadlocalsessioncontext session map.	WITHOUT_CLASSIFICATION	0.9451699955973432	WITHOUT_CLASSIFICATION	0.05483000440265674	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997728430769162	WITHOUT_CLASSIFICATION	2.2715692308383832E-4	DESIGN
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9997933468435605	WITHOUT_CLASSIFICATION	2.0665315643943058E-4	DESIGN
optimisticcache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998893986686817	WITHOUT_CLASSIFICATION	1.1060133131837324E-4	DESIGN
cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996999855321618	WITHOUT_CLASSIFICATION	3.0001446783819503E-4	DESIGN
option.setdataversion( nonlockingdataversion.instance )	WITHOUT_CLASSIFICATION	0.9995634240702479	WITHOUT_CLASSIFICATION	4.3657592975215767E-4	DESIGN
do the put outside the scope of the jta txn	WITHOUT_CLASSIFICATION	0.9999251476698104	WITHOUT_CLASSIFICATION	7.485233018953525E-5	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9997513558113361	WITHOUT_CLASSIFICATION	2.486441886638397E-4	DESIGN
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (npes)	WITHOUT_CLASSIFICATION	0.8187765568724817	WITHOUT_CLASSIFICATION	0.18122344312751823	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9997825112938006	WITHOUT_CLASSIFICATION	2.1748870619931824E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9997513558113361	WITHOUT_CLASSIFICATION	2.486441886638397E-4	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9997825112938006	WITHOUT_CLASSIFICATION	2.1748870619931824E-4	DESIGN
do the failfast put outside the scope of the jta txn	WITHOUT_CLASSIFICATION	0.9999251476698104	WITHOUT_CLASSIFICATION	7.485233018953525E-5	DESIGN
note evict() operates locally only (i.e. does not propogate to any other nodes in the potential cluster). this is exactly what is needed when we destroy() here destroy() is used as part of the process of shutting down a sessionfactory thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.999979808576685	DESIGN	2.0191423315024347E-5	WITHOUT_CLASSIFICATION
protected regionrootlistener listener	WITHOUT_CLASSIFICATION	0.9995444368352557	WITHOUT_CLASSIFICATION	4.5556316474437523E-4	DESIGN
establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9994989861702915	WITHOUT_CLASSIFICATION	5.010138297085625E-4	DESIGN
if we've been blocking for the mutex perhaps another thread has already reestablished the root. in case the node was reestablised via replication confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9911666251012438	WITHOUT_CLASSIFICATION	0.008833374898756227	DESIGN
for pessimistic locking we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999882078336304	WITHOUT_CLASSIFICATION	1.1792166369537252E-5	DESIGN
the rest only matters for optimistic locking where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9981870906147696	WITHOUT_CLASSIFICATION	0.0018129093852303272	DESIGN
don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9948684707442582	WITHOUT_CLASSIFICATION	0.005131529255741735	DESIGN
make sure the root node for the region exists and has a dataversion that never complains	WITHOUT_CLASSIFICATION	0.9999745411620127	WITHOUT_CLASSIFICATION	2.545883798736042E-5	DESIGN
never evict this node	WITHOUT_CLASSIFICATION	0.9986759836726424	WITHOUT_CLASSIFICATION	0.0013240163273575303	DESIGN
fix up the resident flag	WITHOUT_CLASSIFICATION	0.9740409005288635	WITHOUT_CLASSIFICATION	0.02595909947113653	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9997825112938006	WITHOUT_CLASSIFICATION	2.1748870619931824E-4	DESIGN
we ignore minimalputoverride. jbosscache putforexternalread is already about as minimal as we can get it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999954000572433	WITHOUT_CLASSIFICATION	4.5999427566938465E-6	DESIGN
no-op. we don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9876459154339567	WITHOUT_CLASSIFICATION	0.01235408456604327	DESIGN
this should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9639165458021842	WITHOUT_CLASSIFICATION	0.03608345419781574	DESIGN
we only build caches if none were passed in. passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9998223922497158	WITHOUT_CLASSIFICATION	1.776077502841437E-4	DESIGN
set up the cache factory	WITHOUT_CLASSIFICATION	0.995156607390711	WITHOUT_CLASSIFICATION	0.004843392609288985	DESIGN
see if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999911556794349	WITHOUT_CLASSIFICATION	8.844320565190754E-6	DESIGN
default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999380344719639	WITHOUT_CLASSIFICATION	6.196552803612865E-5	DESIGN
default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999616538148935	WITHOUT_CLASSIFICATION	3.8346185106458605E-5	DESIGN
for timestamps we default to a separate config	WITHOUT_CLASSIFICATION	0.9996109367329782	WITHOUT_CLASSIFICATION	3.890632670218744E-4	DESIGN
we can't change the tm on a running cache just check if the cache has no tm and we're ok with that	WITHOUT_CLASSIFICATION	0.9995133610737833	WITHOUT_CLASSIFICATION	4.866389262167681E-4	DESIGN
configure the cache to use our tm	WITHOUT_CLASSIFICATION	0.9993853653824435	WITHOUT_CLASSIFICATION	6.146346175565469E-4	DESIGN
make sure jbc doesn't look one up	WITHOUT_CLASSIFICATION	0.9997230057192387	WITHOUT_CLASSIFICATION	2.769942807613206E-4	DESIGN
this method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.641422114918115	DESIGN	0.358577885081885	WITHOUT_CLASSIFICATION
make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9970350085612247	WITHOUT_CLASSIFICATION	0.0029649914387753205	DESIGN
we use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9998156758031123	WITHOUT_CLASSIFICATION	1.843241968877457E-4	DESIGN
following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9582590731985972	WITHOUT_CLASSIFICATION	0.041740926801402886	DESIGN
if jbc is using invalidation we don't want to propagate changes. we use the timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9986633951078844	WITHOUT_CLASSIFICATION	0.0013366048921156799	DESIGN
we don't want to waste effort setting an option if jbc is already in local mode. if jbc is repl_(a)sync then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9992130784426173	WITHOUT_CLASSIFICATION	7.869215573826192E-4	DESIGN
don't hold the jbc node lock throughout the tx as that prevents updates add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999975201314	WITHOUT_CLASSIFICATION	2.4798686285285718E-9	DESIGN
double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999606223471579	WITHOUT_CLASSIFICATION	3.9377652842059024E-5	DESIGN
get an exclusive right to update jbc for this key from this node.	WITHOUT_CLASSIFICATION	0.9992148402754013	WITHOUT_CLASSIFICATION	7.851597245987162E-4	DESIGN
we ensure async semantics (jbcache-1175)	WITHOUT_CLASSIFICATION	0.9992104751738169	WITHOUT_CLASSIFICATION	7.895248261830946E-4	DESIGN
initial load from jbc	WITHOUT_CLASSIFICATION	0.9994647945719691	WITHOUT_CLASSIFICATION	5.352054280308652E-4	DESIGN
see if we had a 2nd invalidation from the same initial preinvalidation timestamp. if so only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999997608062734	WITHOUT_CLASSIFICATION	2.3919372650523766E-7	DESIGN
we ensure async semantics (jbcache-1175)	WITHOUT_CLASSIFICATION	0.9992104751738169	WITHOUT_CLASSIFICATION	7.895248261830946E-4	DESIGN
if the workspace node has null as well ok if not we've been modified in a non-comparable manner which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999985645535033	WITHOUT_CLASSIFICATION	1.435446496648875E-6	DESIGN
the standard comparator types are not serializable but are singletons	WITHOUT_CLASSIFICATION	0.9994989095020341	WITHOUT_CLASSIFICATION	5.010904979658304E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9997513558113361	WITHOUT_CLASSIFICATION	2.486441886638397E-4	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9999401475077712	WITHOUT_CLASSIFICATION	5.985249222884945E-5	DESIGN
construct the cache	WITHOUT_CLASSIFICATION	0.9996939164141464	WITHOUT_CLASSIFICATION	3.060835858536054E-4	DESIGN
local cache so we use synchronization	WITHOUT_CLASSIFICATION	0.9891248335591765	WITHOUT_CLASSIFICATION	0.010875166440823505	DESIGN
local cache so we use synchronization	WITHOUT_CLASSIFICATION	0.9891248335591765	WITHOUT_CLASSIFICATION	0.010875166440823505	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9996561451269166	WITHOUT_CLASSIFICATION	3.438548730833347E-4	DESIGN
swaldman 2006-08-28 define c3p0-style configuration parameters for initialpoolsize which hibernate sensibly lets default to minpoolsize but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.999989525332354	WITHOUT_CLASSIFICATION	1.0474667645987268E-5	DESIGN
datasource unpooled = datasources.unpooleddatasource(jdbcurl props.getproperty(environment.user) props.getproperty(environment.pass))	WITHOUT_CLASSIFICATION	0.9999398811647591	WITHOUT_CLASSIFICATION	6.011883524085792E-5	DESIGN
true if the pool is borrowed from the outside false if we used to create it	WITHOUT_CLASSIFICATION	0.9971966050943282	WITHOUT_CLASSIFICATION	0.0028033949056718733	DESIGN
get a connection from the pool (thru drivermanager cfr. proxool doc)	WITHOUT_CLASSIFICATION	0.9981556963582928	WITHOUT_CLASSIFICATION	0.0018443036417071837	DESIGN
set the transaction isolation if defined	WITHOUT_CLASSIFICATION	0.9998952702118146	WITHOUT_CLASSIFICATION	1.0472978818543068E-4	DESIGN
toggle autocommit to false if set	WITHOUT_CLASSIFICATION	0.9999149093120165	WITHOUT_CLASSIFICATION	8.509068798349473E-5	DESIGN
return the connection	WITHOUT_CLASSIFICATION	0.9975365112020326	WITHOUT_CLASSIFICATION	0.0024634887979674966	DESIGN
get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999838436030213	WITHOUT_CLASSIFICATION	1.6156396978706078E-5	DESIGN
default the proxool alias setting	WITHOUT_CLASSIFICATION	0.9999967142660754	WITHOUT_CLASSIFICATION	3.285733924549101E-6	DESIGN
validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999821269127095	WITHOUT_CLASSIFICATION	1.7873087290455425E-5	DESIGN
validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999821269127095	WITHOUT_CLASSIFICATION	1.7873087290455425E-5	DESIGN
append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999863946637003	WITHOUT_CLASSIFICATION	1.3605336299680284E-5	DESIGN
set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9996063434237106	WITHOUT_CLASSIFICATION	3.936565762894257E-4	DESIGN
configured using the jaxp configurator	WITHOUT_CLASSIFICATION	0.9999207200612007	WITHOUT_CLASSIFICATION	7.927993879925078E-5	DESIGN
validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999821269127095	WITHOUT_CLASSIFICATION	1.7873087290455425E-5	DESIGN
append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999863946637003	WITHOUT_CLASSIFICATION	1.3605336299680284E-5	DESIGN
append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999863946637003	WITHOUT_CLASSIFICATION	1.3605336299680284E-5	DESIGN
configured using the properties file configurator	WITHOUT_CLASSIFICATION	0.9999726305106287	WITHOUT_CLASSIFICATION	2.7369489371411956E-5	DESIGN
remember isolation level	WITHOUT_CLASSIFICATION	0.9644154971097679	WITHOUT_CLASSIFICATION	0.03558450289023208	DESIGN
if the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999996356770791	WITHOUT_CLASSIFICATION	3.643229209938779E-7	DESIGN
we have created the pool ourselves so shut it down	WITHOUT_CLASSIFICATION	0.9999487795410819	WITHOUT_CLASSIFICATION	5.1220458918015135E-5	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9757736101284208	WITHOUT_CLASSIFICATION	0.0242263898715793	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9757736101284208	WITHOUT_CLASSIFICATION	0.0242263898715793	DESIGN
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999191506471583	WITHOUT_CLASSIFICATION	8.084935284164625E-5	DESIGN
public currency getcurrency(int col) throws hibernateexception	WITHOUT_CLASSIFICATION	0.9995393903812373	WITHOUT_CLASSIFICATION	4.606096187626686E-4	DESIGN
default is pojo	WITHOUT_CLASSIFICATION	0.9998450645180145	WITHOUT_CLASSIFICATION	1.5493548198556304E-4	DESIGN
use setparameter for null values	WITHOUT_CLASSIFICATION	0.9993833998258194	WITHOUT_CLASSIFICATION	6.166001741806718E-4	DESIGN
use setparameter for null values	WITHOUT_CLASSIFICATION	0.9993833998258194	WITHOUT_CLASSIFICATION	6.166001741806718E-4	DESIGN
private cacheentry cacheentry	WITHOUT_CLASSIFICATION	0.9955787735956382	WITHOUT_CLASSIFICATION	0.004421226404361826	DESIGN
don't need to lock the cache here since if someone else inserted the same pk first the insert would fail	WITHOUT_CLASSIFICATION	0.9999961952795324	WITHOUT_CLASSIFICATION	3.804720467517422E-6	DESIGN
make 100% certain that this is called before any subsequent scheduledupdate.aftertransactioncompletion()!!	WITHOUT_CLASSIFICATION	0.9969764633480274	WITHOUT_CLASSIFICATION	0.0030235366519726294	DESIGN
get the updated snapshot of the entity state by cloning current state it is safe to copy in place since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999997413200937	WITHOUT_CLASSIFICATION	2.586799061935362E-7	DESIGN
this entity defines proeprty generation so process those generated values	WITHOUT_CLASSIFICATION	0.9997717379226193	WITHOUT_CLASSIFICATION	2.282620773807029E-4	DESIGN
have the entity entry perform post-update processing passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999015440881034	WITHOUT_CLASSIFICATION	9.845591189656526E-5	DESIGN
!persister.iscacheinvalidationrequired()	WITHOUT_CLASSIFICATION	0.9995899993364952	WITHOUT_CLASSIFICATION	4.100006635047861E-4	DESIGN
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.99958924842168	WITHOUT_CLASSIFICATION	4.1075157831997394E-4	DESIGN
sort first by role name	WITHOUT_CLASSIFICATION	0.9997488427231102	WITHOUT_CLASSIFICATION	2.511572768897643E-4	DESIGN
make 100% certain that this is called before any subsequent scheduledupdate.aftertransactioncompletion()!!	WITHOUT_CLASSIFICATION	0.9969764633480274	WITHOUT_CLASSIFICATION	0.0030235366519726294	DESIGN
then by fk	WITHOUT_CLASSIFICATION	0.9976336912870082	WITHOUT_CLASSIFICATION	0.0023663087129917443	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9997504492493128	WITHOUT_CLASSIFICATION	2.4955075068721386E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9997504492493128	WITHOUT_CLASSIFICATION	2.4955075068721386E-4	DESIGN
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9988852898823573	WITHOUT_CLASSIFICATION	0.0011147101176427502	DESIGN
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9969285453816125	WITHOUT_CLASSIFICATION	0.00307145461838756	DESIGN
boolean put = persister.getcache().insert(ck cacheentry)	WITHOUT_CLASSIFICATION	0.9999752637858654	WITHOUT_CLASSIFICATION	2.473621413456161E-5	DESIGN
we need to grab the version value from the entity otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9725520146085188	WITHOUT_CLASSIFICATION	0.02744798539148115	DESIGN
do nothing - we only need to notify the cache	WITHOUT_CLASSIFICATION	0.9936303344537283	WITHOUT_CLASSIFICATION	0.006369665546271648	DESIGN
sort first by entity name	WITHOUT_CLASSIFICATION	0.9998484630231017	WITHOUT_CLASSIFICATION	1.5153697689832693E-4	DESIGN
then by id	WITHOUT_CLASSIFICATION	0.9998116094289061	WITHOUT_CLASSIFICATION	1.8839057109388413E-4	DESIGN
to be safe	WITHOUT_CLASSIFICATION	0.9997529870428143	WITHOUT_CLASSIFICATION	2.4701295718566175E-4	DESIGN
no transformations took place so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9998491459831221	WITHOUT_CLASSIFICATION	1.5085401687790472E-4	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999355281908883	WITHOUT_CLASSIFICATION	6.44718091117527E-5	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999355281908883	WITHOUT_CLASSIFICATION	6.44718091117527E-5	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9995534802404356	WITHOUT_CLASSIFICATION	4.4651975956443564E-4	DESIGN
test out the optimizer	WITHOUT_CLASSIFICATION	0.999991110259138	WITHOUT_CLASSIFICATION	8.889740862062212E-6	DESIGN
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9990568762263551	WITHOUT_CLASSIFICATION	9.431237736449162E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997580331562604	WITHOUT_CLASSIFICATION	2.4196684373946567E-4	DESIGN
invokespecial	WITHOUT_CLASSIFICATION	0.9996068946777141	WITHOUT_CLASSIFICATION	3.931053222858822E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9996837564947995	WITHOUT_CLASSIFICATION	3.1624350520061996E-4	DESIGN
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9995238534626799	WITHOUT_CLASSIFICATION	4.761465373201479E-4	DESIGN
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9971125248988038	WITHOUT_CLASSIFICATION	0.0028874751011962545	DESIGN
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999452355101723	WITHOUT_CLASSIFICATION	5.476448982780852E-5	DESIGN
aload_2 args	WITHOUT_CLASSIFICATION	0.9993820103925815	WITHOUT_CLASSIFICATION	6.179896074185662E-4	DESIGN
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999411986903621	WITHOUT_CLASSIFICATION	5.880130963786082E-5	DESIGN
new	WITHOUT_CLASSIFICATION	0.9996970925789093	WITHOUT_CLASSIFICATION	3.0290742109068196E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9997611763223248	WITHOUT_CLASSIFICATION	2.388236776752117E-4	DESIGN
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9997358912046375	WITHOUT_CLASSIFICATION	2.641087953625355E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9996068946777141	WITHOUT_CLASSIFICATION	3.931053222858822E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9996068946777141	WITHOUT_CLASSIFICATION	3.931053222858822E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9996068946777141	WITHOUT_CLASSIFICATION	3.931053222858822E-4	DESIGN
aastore args	WITHOUT_CLASSIFICATION	0.9993649628713337	WITHOUT_CLASSIFICATION	6.3503712866628E-4	DESIGN
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9962151130004089	WITHOUT_CLASSIFICATION	0.003784886999591185	DESIGN
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9973792389172556	WITHOUT_CLASSIFICATION	0.002620761082744459	DESIGN
istore_3 store i	WITHOUT_CLASSIFICATION	0.9996740137319076	WITHOUT_CLASSIFICATION	3.2598626809233724E-4	DESIGN
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9994751630465202	WITHOUT_CLASSIFICATION	5.248369534797796E-4	DESIGN
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9963156165024859	WITHOUT_CLASSIFICATION	0.0036843834975142206	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999896938658204	WITHOUT_CLASSIFICATION	1.0306134179698474E-5	DESIGN
start region to handling exception (bulkaccessorexception)	WITHOUT_CLASSIFICATION	0.9985466045053569	WITHOUT_CLASSIFICATION	0.0014533954946431339	DESIGN
iinc 3 1	WITHOUT_CLASSIFICATION	0.9996703100214958	WITHOUT_CLASSIFICATION	3.296899785041964E-4	DESIGN
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9996943272476387	WITHOUT_CLASSIFICATION	3.0567275236127197E-4	DESIGN
aload_2 load the args	WITHOUT_CLASSIFICATION	0.999485751459851	WITHOUT_CLASSIFICATION	5.142485401490769E-4	DESIGN
iconst_i	WITHOUT_CLASSIFICATION	0.9997513558113361	WITHOUT_CLASSIFICATION	2.486441886638397E-4	DESIGN
aaload	WITHOUT_CLASSIFICATION	0.9997513558113361	WITHOUT_CLASSIFICATION	2.486441886638397E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9997514523340005	WITHOUT_CLASSIFICATION	2.4854766599950354E-4	DESIGN
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9996995215069541	WITHOUT_CLASSIFICATION	3.004784930459065E-4	DESIGN
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9997253029627398	WITHOUT_CLASSIFICATION	2.746970372601393E-4	DESIGN
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999902802630146	WITHOUT_CLASSIFICATION	9.719736985401918E-6	DESIGN
end region to handling exception (bulkaccessorexception)	WITHOUT_CLASSIFICATION	0.9986305564346031	WITHOUT_CLASSIFICATION	0.0013694435653969822	DESIGN
register in exception table	WITHOUT_CLASSIFICATION	0.9994895379147678	WITHOUT_CLASSIFICATION	5.104620852322357E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997580331562604	WITHOUT_CLASSIFICATION	2.4196684373946567E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997580331562604	WITHOUT_CLASSIFICATION	2.4196684373946567E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9996837564947995	WITHOUT_CLASSIFICATION	3.1624350520061996E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9996837564947995	WITHOUT_CLASSIFICATION	3.1624350520061996E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9997611763223248	WITHOUT_CLASSIFICATION	2.388236776752117E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9996068946777141	WITHOUT_CLASSIFICATION	3.931053222858822E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9997514523340005	WITHOUT_CLASSIFICATION	2.4854766599950354E-4	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999996687572945	WITHOUT_CLASSIFICATION	3.3124270553951595E-7	DESIGN
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999659684545413	WITHOUT_CLASSIFICATION	3.403154545858733E-5	DESIGN
new bulkaccessorexception	WITHOUT_CLASSIFICATION	0.9990478051968311	WITHOUT_CLASSIFICATION	9.521948031689482E-4	DESIGN
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9997040675785875	WITHOUT_CLASSIFICATION	2.959324214124124E-4	DESIGN
iload_3 i	WITHOUT_CLASSIFICATION	0.9976291753827063	WITHOUT_CLASSIFICATION	0.0023708246172936555	DESIGN
invokespecial bulkaccessorexception.<init>	WITHOUT_CLASSIFICATION	0.9995899993364952	WITHOUT_CLASSIFICATION	4.100006635047861E-4	DESIGN
athrow	WITHOUT_CLASSIFICATION	0.9997514604046401	WITHOUT_CLASSIFICATION	2.4853959535985494E-4	DESIGN
warning classfile only	WITHOUT_CLASSIFICATION	0.9999422154250975	WITHOUT_CLASSIFICATION	5.778457490244061E-5	DESIGN
swallow	WITHOUT_CLASSIFICATION	0.9997529926029086	WITHOUT_CLASSIFICATION	2.4700739709136E-4	DESIGN
local variable | this |	WITHOUT_CLASSIFICATION	0.9984858446728936	WITHOUT_CLASSIFICATION	0.0015141553271064631	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9980465981381125	WITHOUT_CLASSIFICATION	0.001953401861887569	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9980465981381125	WITHOUT_CLASSIFICATION	0.001953401861887569	DESIGN
getfield get field "$javassist_callback" defined already	WITHOUT_CLASSIFICATION	0.9970113945601551	WITHOUT_CLASSIFICATION	0.002988605439844975	DESIGN
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9998341026483208	WITHOUT_CLASSIFICATION	1.6589735167910785E-4	DESIGN
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9997956918777597	WITHOUT_CLASSIFICATION	2.0430812224016208E-4	DESIGN
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9991803301231327	WITHOUT_CLASSIFICATION	8.196698768672815E-4	DESIGN
putfield put field "$javassist_callback" defined already	WITHOUT_CLASSIFICATION	0.9980730266727803	WITHOUT_CLASSIFICATION	0.0019269733272197476	DESIGN
case of non-static field	WITHOUT_CLASSIFICATION	0.9984266720470469	WITHOUT_CLASSIFICATION	0.0015733279529530025	DESIGN
getfield get each field	WITHOUT_CLASSIFICATION	0.9993693674970118	WITHOUT_CLASSIFICATION	6.306325029882396E-4	DESIGN
invokeinterface invoke enabled.getinterceptfieldcallback()	WITHOUT_CLASSIFICATION	0.9999357549556599	WITHOUT_CLASSIFICATION	6.424504434007047E-5	DESIGN
ifnonnull	WITHOUT_CLASSIFICATION	0.9998074086501442	WITHOUT_CLASSIFICATION	1.925913498557718E-4	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9994046152439544	WITHOUT_CLASSIFICATION	5.953847560455438E-4	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9994046152439544	WITHOUT_CLASSIFICATION	5.953847560455438E-4	DESIGN
store_1 each type	WITHOUT_CLASSIFICATION	0.9995318550618393	WITHOUT_CLASSIFICATION	4.6814493816067256E-4	DESIGN
ldc name of the field	WITHOUT_CLASSIFICATION	0.9988347076809618	WITHOUT_CLASSIFICATION	0.0011652923190382332	DESIGN
load_1 each type	WITHOUT_CLASSIFICATION	0.9995318550618393	WITHOUT_CLASSIFICATION	4.6814493816067256E-4	DESIGN
invokeinterface invoke callback.read() each type	WITHOUT_CLASSIFICATION	0.9999234864563927	WITHOUT_CLASSIFICATION	7.651354360726462E-5	DESIGN
int	WITHOUT_CLASSIFICATION	0.999850586096686	WITHOUT_CLASSIFICATION	1.4941390331402003E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9996837564947995	WITHOUT_CLASSIFICATION	3.1624350520061996E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9997611763223248	WITHOUT_CLASSIFICATION	2.388236776752117E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9996068946777141	WITHOUT_CLASSIFICATION	3.931053222858822E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9997514523340005	WITHOUT_CLASSIFICATION	2.4854766599950354E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9997514523340005	WITHOUT_CLASSIFICATION	2.4854766599950354E-4	DESIGN
invokeinterface enabled.getinterceptfieldcallback()	WITHOUT_CLASSIFICATION	0.9995899993364952	WITHOUT_CLASSIFICATION	4.100006635047861E-4	DESIGN
invokeinterface enabled.getinterceptfieldcallback()	WITHOUT_CLASSIFICATION	0.9995899993364952	WITHOUT_CLASSIFICATION	4.100006635047861E-4	DESIGN
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9996955040400605	WITHOUT_CLASSIFICATION	3.044959599395173E-4	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9997513558113361	WITHOUT_CLASSIFICATION	2.486441886638397E-4	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9997513558113361	WITHOUT_CLASSIFICATION	2.486441886638397E-4	DESIGN
putfield	WITHOUT_CLASSIFICATION	0.9997513558113361	WITHOUT_CLASSIFICATION	2.486441886638397E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9996837564947995	WITHOUT_CLASSIFICATION	3.1624350520061996E-4	DESIGN
ldc field name	WITHOUT_CLASSIFICATION	0.9986316451781782	WITHOUT_CLASSIFICATION	0.0013683548218218877	DESIGN
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999863986734744	WITHOUT_CLASSIFICATION	1.3601326525593455E-5	DESIGN
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9995899993364952	WITHOUT_CLASSIFICATION	4.100006635047861E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9990346154946106	WITHOUT_CLASSIFICATION	9.65384505389467E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9990346154946106	WITHOUT_CLASSIFICATION	9.65384505389467E-4	DESIGN
not array	WITHOUT_CLASSIFICATION	0.9993182783413724	WITHOUT_CLASSIFICATION	6.817216586276056E-4	DESIGN
array of reference type	WITHOUT_CLASSIFICATION	0.999103153219363	WITHOUT_CLASSIFICATION	8.9684678063689E-4	DESIGN
boolean	WITHOUT_CLASSIFICATION	0.9998735654271077	WITHOUT_CLASSIFICATION	1.264345728923137E-4	DESIGN
byte	WITHOUT_CLASSIFICATION	0.9996770766443076	WITHOUT_CLASSIFICATION	3.2292335569244975E-4	DESIGN
char	WITHOUT_CLASSIFICATION	0.9998977349761118	WITHOUT_CLASSIFICATION	1.0226502388824175E-4	DESIGN
short	WITHOUT_CLASSIFICATION	0.9996804753722086	WITHOUT_CLASSIFICATION	3.1952462779129894E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999930256094438	WITHOUT_CLASSIFICATION	6.974390556148746E-6	DESIGN
float	WITHOUT_CLASSIFICATION	0.9997808840008751	WITHOUT_CLASSIFICATION	2.1911599912500217E-4	DESIGN
float	WITHOUT_CLASSIFICATION	0.9997808840008751	WITHOUT_CLASSIFICATION	2.1911599912500217E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9997851706770645	WITHOUT_CLASSIFICATION	2.1482932293535422E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9997851706770645	WITHOUT_CLASSIFICATION	2.1482932293535422E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9994109674762824	WITHOUT_CLASSIFICATION	5.890325237174873E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9994109674762824	WITHOUT_CLASSIFICATION	5.890325237174873E-4	DESIGN
boolean byte char int short	WITHOUT_CLASSIFICATION	0.9998359740278714	WITHOUT_CLASSIFICATION	1.6402597212859308E-4	DESIGN
boolean byte char int short	WITHOUT_CLASSIFICATION	0.9998359740278714	WITHOUT_CLASSIFICATION	1.6402597212859308E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9990346154946106	WITHOUT_CLASSIFICATION	9.65384505389467E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999930256094438	WITHOUT_CLASSIFICATION	6.974390556148746E-6	DESIGN
float	WITHOUT_CLASSIFICATION	0.9997808840008751	WITHOUT_CLASSIFICATION	2.1911599912500217E-4	DESIGN
float	WITHOUT_CLASSIFICATION	0.9997808840008751	WITHOUT_CLASSIFICATION	2.1911599912500217E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9997851706770645	WITHOUT_CLASSIFICATION	2.1482932293535422E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9994109674762824	WITHOUT_CLASSIFICATION	5.890325237174873E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9994109674762824	WITHOUT_CLASSIFICATION	5.890325237174873E-4	DESIGN
boolean byte char int short	WITHOUT_CLASSIFICATION	0.9998359740278714	WITHOUT_CLASSIFICATION	1.6402597212859308E-4	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9981801281645577	WITHOUT_CLASSIFICATION	0.0018198718354423616	DESIGN
mainly for oscache	WITHOUT_CLASSIFICATION	0.9996903270107249	WITHOUT_CLASSIFICATION	3.0967298927507856E-4	DESIGN
decrement the lock	WITHOUT_CLASSIFICATION	0.9998574215419569	WITHOUT_CLASSIFICATION	1.425784580430821E-4	DESIGN
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9994697693076833	WITHOUT_CLASSIFICATION	5.302306923167455E-4	DESIGN
recache the updated state	WITHOUT_CLASSIFICATION	0.999975326597431	WITHOUT_CLASSIFICATION	2.4673402569072955E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9998619950620453	WITHOUT_CLASSIFICATION	1.3800493795467647E-4	DESIGN
null clientlock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999909402923894	WITHOUT_CLASSIFICATION	9.05970761053119E-6	DESIGN
we really could refresh the item if it is not a lock but it might be slower return freshtimestamp < txtimestamp	WITHOUT_CLASSIFICATION	0.9872435765930944	WITHOUT_CLASSIFICATION	0.012756423406905654	DESIGN
by requiring < we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999612387809519	WITHOUT_CLASSIFICATION	3.876121904822058E-5	DESIGN
the user provided resulttransformer not the one used with "select new". here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9595007269414798	WITHOUT_CLASSIFICATION	0.04049927305852015	DESIGN
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999654790615009	WITHOUT_CLASSIFICATION	3.452093849913025E-5	DESIGN
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999454652076811	WITHOUT_CLASSIFICATION	5.4534792318985096E-5	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9996561451269166	WITHOUT_CLASSIFICATION	3.438548730833347E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9998619950620453	WITHOUT_CLASSIFICATION	1.3800493795467647E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9998619950620453	WITHOUT_CLASSIFICATION	1.3800493795467647E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9998619950620453	WITHOUT_CLASSIFICATION	1.3800493795467647E-4	DESIGN
this is called from settingsfactory irregardless trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9962985780598576	WITHOUT_CLASSIFICATION	0.0037014219401423835	DESIGN
do nothing subclasses may override.	WITHOUT_CLASSIFICATION	0.9990282817863347	WITHOUT_CLASSIFICATION	9.717182136653155E-4	DESIGN
do nothing subclasses may override.	WITHOUT_CLASSIFICATION	0.9990282817863347	WITHOUT_CLASSIFICATION	9.717182136653155E-4	DESIGN
throw new unsupportedoperationexception("can't write to a readonly object")	WITHOUT_CLASSIFICATION	0.9985856723563806	WITHOUT_CLASSIFICATION	0.0014143276436193928	DESIGN
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9997639031395901	WITHOUT_CLASSIFICATION	2.360968604099035E-4	DESIGN
persister.setidentifier(result id) before calling interceptor for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999392610799984	WITHOUT_CLASSIFICATION	6.0738920001584795E-5	DESIGN
no-op ccs did not have such a concept	WITHOUT_CLASSIFICATION	0.9978841096924268	WITHOUT_CLASSIFICATION	0.0021158903075731055	DESIGN
no-op ccs did not have such a concept	WITHOUT_CLASSIFICATION	0.9978841096924268	WITHOUT_CLASSIFICATION	0.0021158903075731055	DESIGN
again ccs did not have such a concept but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not jta aware.	WITHOUT_CLASSIFICATION	0.9999064054335495	WITHOUT_CLASSIFICATION	9.359456645058446E-5	DESIGN
again ccs did not have such a concept however a reasonable proximity is to clear the cache. for non-transaction aware caches we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999319599712536	WITHOUT_CLASSIFICATION	6.804002874645525E-5	DESIGN
again ccs did not have such a concept however a reasonable proximity is to clear the cache. for non-transaction aware caches we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999319599712536	WITHOUT_CLASSIFICATION	6.804002874645525E-5	DESIGN
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9987985348175397	WITHOUT_CLASSIFICATION	0.0012014651824602787	DESIGN
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9995543611056183	WITHOUT_CLASSIFICATION	4.456388943815709E-4	DESIGN
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9991503711895766	WITHOUT_CLASSIFICATION	8.496288104233353E-4	DESIGN
db-objectname	WITHOUT_CLASSIFICATION	0.9996068946777141	WITHOUT_CLASSIFICATION	3.931053222858822E-4	DESIGN
mutable	WITHOUT_CLASSIFICATION	0.9998528858930114	WITHOUT_CLASSIFICATION	1.4711410698874051E-4	DESIGN
where	WITHOUT_CLASSIFICATION	0.9999183270010811	WITHOUT_CLASSIFICATION	8.167299891895686E-5	DESIGN
check	WITHOUT_CLASSIFICATION	0.9994618431283165	WITHOUT_CLASSIFICATION	5.381568716834208E-4	DESIGN
polymorphism	WITHOUT_CLASSIFICATION	0.9996068946777141	WITHOUT_CLASSIFICATION	3.931053222858822E-4	DESIGN
todo	WITHOUT_CLASSIFICATION	0.7081495804253074	WITHOUT_CLASSIFICATION	0.2918504195746925	DESIGN
id	WITHOUT_CLASSIFICATION	0.9997701868169154	WITHOUT_CLASSIFICATION	2.298131830845779E-4	DESIGN
version / timestamp	WITHOUT_CLASSIFICATION	0.9998005061214982	WITHOUT_CLASSIFICATION	1.9949387850188595E-4	DESIGN
discriminator	WITHOUT_CLASSIFICATION	0.9996070754991574	WITHOUT_CLASSIFICATION	3.929245008426112E-4	DESIGN
primary key constraint	WITHOUT_CLASSIFICATION	0.9974274864617433	WITHOUT_CLASSIFICATION	0.0025725135382566166	DESIGN
this is either a <version/> tag with no type attribute or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9998664934465548	WITHOUT_CLASSIFICATION	1.3350655344519666E-4	DESIGN
for version properties marked as being generated make sure they are "always" generated aka "insert" is invalid this is dis-allowed by the dtd but just to make sure	WITHOUT_CLASSIFICATION	0.9995922501180629	WITHOUT_CLASSIFICATION	4.0774988193704027E-4	DESIGN
discriminator	WITHOUT_CLASSIFICATION	0.9996070754991574	WITHOUT_CLASSIFICATION	3.929245008426112E-4	DESIGN
( (column) discrim.getcolumniterator().next() ).settype(type)	WITHOUT_CLASSIFICATION	0.999888676797541	WITHOUT_CLASSIFICATION	1.1132320245890116E-4	DESIGN
go ahead and set the lazy here since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.999992317302028	WITHOUT_CLASSIFICATION	7.682697972059742E-6	DESIGN
dynamic update	WITHOUT_CLASSIFICATION	0.9998152840651416	WITHOUT_CLASSIFICATION	1.8471593485847043E-4	DESIGN
import	WITHOUT_CLASSIFICATION	0.9996489336443221	WITHOUT_CLASSIFICATION	3.510663556779767E-4	DESIGN
batch size	WITHOUT_CLASSIFICATION	0.9997359830775189	WITHOUT_CLASSIFICATION	2.64016922481167E-4	DESIGN
select before update	WITHOUT_CLASSIFICATION	0.9999379858622764	WITHOUT_CLASSIFICATION	6.20141377235468E-5	DESIGN
optimistic lock mode	WITHOUT_CLASSIFICATION	0.9995242681683534	WITHOUT_CLASSIFICATION	4.757318316466376E-4	DESIGN
persister	WITHOUT_CLASSIFICATION	0.9993359648834447	WITHOUT_CLASSIFICATION	6.640351165553799E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999718376777476	WITHOUT_CLASSIFICATION	2.816232225247621E-5	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9991503711895766	WITHOUT_CLASSIFICATION	8.496288104233353E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9998574896175293	WITHOUT_CLASSIFICATION	1.4251038247074037E-4	DESIGN
joined subclasses	WITHOUT_CLASSIFICATION	0.9997453666036908	WITHOUT_CLASSIFICATION	2.546333963090821E-4	DESIGN
key	WITHOUT_CLASSIFICATION	0.999856724672637	WITHOUT_CLASSIFICATION	1.432753273629742E-4	DESIGN
check	WITHOUT_CLASSIFICATION	0.9994618431283165	WITHOUT_CLASSIFICATION	5.381568716834208E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999718376777476	WITHOUT_CLASSIFICATION	2.816232225247621E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9998574896175293	WITHOUT_CLASSIFICATION	1.4251038247074037E-4	DESIGN
key	WITHOUT_CLASSIFICATION	0.999856724672637	WITHOUT_CLASSIFICATION	1.432753273629742E-4	DESIGN
model.getkey().settype( new type( model.getidentifier() ) )	WITHOUT_CLASSIFICATION	0.9994681690939302	WITHOUT_CLASSIFICATION	5.318309060697447E-4	DESIGN
tablename	WITHOUT_CLASSIFICATION	0.9998036971123239	WITHOUT_CLASSIFICATION	1.9630288767619026E-4	DESIGN
join.getkey().settype( new type( lazz.getidentifier() ) )	WITHOUT_CLASSIFICATION	0.9994681690939302	WITHOUT_CLASSIFICATION	5.318309060697447E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9998574896175293	WITHOUT_CLASSIFICATION	1.4251038247074037E-4	DESIGN
column(s)	WITHOUT_CLASSIFICATION	0.9997685342570438	WITHOUT_CLASSIFICATION	2.3146574295625523E-4	DESIGN
column index	WITHOUT_CLASSIFICATION	0.9999761753249499	WITHOUT_CLASSIFICATION	2.382467505013406E-5	DESIGN
column unique-key	WITHOUT_CLASSIFICATION	0.9998379001818578	WITHOUT_CLASSIFICATION	1.6209981814212075E-4	DESIGN
automatically makes a column with the default name if none is specifed by xml	WITHOUT_CLASSIFICATION	0.9972229149674767	WITHOUT_CLASSIFICATION	0.0027770850325232787	DESIGN
for an any	WITHOUT_CLASSIFICATION	0.9998863593683704	WITHOUT_CLASSIFICATION	1.1364063162956827E-4	DESIGN
insertable simply because that is the user did not specify anything just override it	WITHOUT_CLASSIFICATION	0.9999952193722725	WITHOUT_CLASSIFICATION	4.780627727425372E-6	DESIGN
the user specifically supplied insert="true" which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999960734851331	WITHOUT_CLASSIFICATION	3.926514866919127E-6	DESIGN
properties generated on update can never be updateable	WITHOUT_CLASSIFICATION	0.9982612198813348	WITHOUT_CLASSIFICATION	0.0017387801186652466	DESIGN
updateable only because the user did not specify anything just override it	WITHOUT_CLASSIFICATION	0.9999987168299048	WITHOUT_CLASSIFICATION	1.2831700952727754E-6	DESIGN
the user specifically supplied update="true" which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999960734851331	WITHOUT_CLASSIFICATION	3.926514866919127E-6	DESIGN
rolename	WITHOUT_CLASSIFICATION	0.9997704594089541	WITHOUT_CLASSIFICATION	2.2954059104586294E-4	DESIGN
fetch strategy	WITHOUT_CLASSIFICATION	0.9990914022655701	WITHOUT_CLASSIFICATION	9.085977344299209E-4	DESIGN
table	WITHOUT_CLASSIFICATION	0.9999094602433615	WITHOUT_CLASSIFICATION	9.05397566384285E-5	DESIGN
tablename = mappings.getnamingstrategy().propertytotablename( classname path )	WITHOUT_CLASSIFICATION	0.9999849417323076	WITHOUT_CLASSIFICATION	1.5058267692361124E-5	DESIGN
sort	WITHOUT_CLASSIFICATION	0.9998433008981681	WITHOUT_CLASSIFICATION	1.5669910183193706E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999718376777476	WITHOUT_CLASSIFICATION	2.816232225247621E-5	DESIGN
unsorted natural comparator.class.name	WITHOUT_CLASSIFICATION	0.9995943569641949	WITHOUT_CLASSIFICATION	4.056430358051406E-4	DESIGN
orphan delete (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9994599055249114	WITHOUT_CLASSIFICATION	5.400944750886441E-4	DESIGN
set up second pass	WITHOUT_CLASSIFICATION	0.999921709774506	WITHOUT_CLASSIFICATION	7.82902254940993E-5	DESIGN
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9673308832794182	WITHOUT_CLASSIFICATION	0.032669116720581835	DESIGN
a nested composite element	WITHOUT_CLASSIFICATION	0.9946419357455677	WITHOUT_CLASSIFICATION	0.005358064254432242	DESIGN
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9998622902880684	WITHOUT_CLASSIFICATION	1.377097119317041E-4	DESIGN
note special case one-to-one constrained=false cannot be proxied so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999934025893504	WITHOUT_CLASSIFICATION	6.59741064960416E-6	DESIGN
use old (hb 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999860047225503	WITHOUT_CLASSIFICATION	1.3995277449691613E-5	DESIGN
lazy = !join	WITHOUT_CLASSIFICATION	0.9999069295229305	WITHOUT_CLASSIFICATION	9.307047706951874E-5	DESIGN
generator	WITHOUT_CLASSIFICATION	0.9993393508519928	WITHOUT_CLASSIFICATION	6.606491480072054E-4	DESIGN
id unsaved-value	WITHOUT_CLASSIFICATION	0.9996366624350319	WITHOUT_CLASSIFICATION	3.6333756496813877E-4	DESIGN
version unsaved-value	WITHOUT_CLASSIFICATION	0.9979416453333855	WITHOUT_CLASSIFICATION	0.002058354666614519	DESIGN
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.984782174351871	WITHOUT_CLASSIFICATION	0.015217825648128987	DESIGN
( (column) ( (simplevalue) ic.getindex() ).getcolumniterator().next() ).setnullable(false)	WITHOUT_CLASSIFICATION	0.999888676797541	WITHOUT_CLASSIFICATION	1.1132320245890116E-4	DESIGN
contained elements	WITHOUT_CLASSIFICATION	0.9998720149505943	WITHOUT_CLASSIFICATION	1.2798504940570476E-4	DESIGN
for non-inverse one-to-many with a not-null fk add a backref!	WITHOUT_CLASSIFICATION	0.9901724507330806	WITHOUT_CLASSIFICATION	0.009827549266919363	DESIGN
bind the where	WITHOUT_CLASSIFICATION	0.9999356830898674	WITHOUT_CLASSIFICATION	6.43169101326403E-5	DESIGN
bind the order-by	WITHOUT_CLASSIFICATION	0.9998041875080698	WITHOUT_CLASSIFICATION	1.958124919303371E-4	DESIGN
bind the filters	WITHOUT_CLASSIFICATION	0.9998253514470463	WITHOUT_CLASSIFICATION	1.7464855295365036E-4	DESIGN
overriding inherited meta attribute. hbx-621 & hbx-793	WITHOUT_CLASSIFICATION	0.9994701618281551	WITHOUT_CLASSIFICATION	5.298381718449859E-4	DESIGN
first iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999997530422039	WITHOUT_CLASSIFICATION	2.469577961406132E-7	DESIGN
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a fqn (in the case of a pojo mapping).	WITHOUT_CLASSIFICATION	0.9998441028351177	WITHOUT_CLASSIFICATION	1.558971648822211E-4	DESIGN
+ "_" + referencedcolumnname not used for backward compatibility	WITHOUT_CLASSIFICATION	0.5081519626545956	DESIGN	0.49184803734540444	WITHOUT_CLASSIFICATION
sessionfactory name	WITHOUT_CLASSIFICATION	0.9994545719728095	WITHOUT_CLASSIFICATION	5.454280271903933E-4	DESIGN
jdbc and connection settings	WITHOUT_CLASSIFICATION	0.9989152641182283	WITHOUT_CLASSIFICATION	0.001084735881771741	DESIGN
jdbc and connection settings	WITHOUT_CLASSIFICATION	0.9989152641182283	WITHOUT_CLASSIFICATION	0.001084735881771741	DESIGN
interrogate jdbc metadata	WITHOUT_CLASSIFICATION	0.9997968342073759	WITHOUT_CLASSIFICATION	2.0316579262421864E-4	DESIGN
user supplied jdbc connections	WITHOUT_CLASSIFICATION	0.9999716553082336	WITHOUT_CLASSIFICATION	2.834469176637318E-5	DESIGN
use dialect default properties	WITHOUT_CLASSIFICATION	0.9974150142214376	WITHOUT_CLASSIFICATION	0.002584985778562461	DESIGN
transaction settings	WITHOUT_CLASSIFICATION	0.9994724838681862	WITHOUT_CLASSIFICATION	5.275161318137128E-4	DESIGN
sql generation settings	WITHOUT_CLASSIFICATION	0.9994981842678764	WITHOUT_CLASSIFICATION	5.018157321236442E-4	DESIGN
query parser settings	WITHOUT_CLASSIFICATION	0.996586343843015	WITHOUT_CLASSIFICATION	0.0034136561569850514	DESIGN
second-level / query cache	WITHOUT_CLASSIFICATION	0.9997160442674013	WITHOUT_CLASSIFICATION	2.8395573259870665E-4	DESIGN
the cache provider is needed when we either have second-level cache enabled or query cache enabled. note that usesecondlevelcache is enabled by default	WITHOUT_CLASSIFICATION	0.9999960248962814	WITHOUT_CLASSIFICATION	3.975103718637761E-6	DESIGN
sql exception converter	WITHOUT_CLASSIFICATION	0.9995803505762868	WITHOUT_CLASSIFICATION	4.196494237132493E-4	DESIGN
statistics and logging	WITHOUT_CLASSIFICATION	0.9988873050532409	WITHOUT_CLASSIFICATION	0.0011126949467592298	DESIGN
settings.setshowsqlenabled(showsql)	WITHOUT_CLASSIFICATION	0.9995899993364952	WITHOUT_CLASSIFICATION	4.100006635047861E-4	DESIGN
settings.setformatsqlenabled(formatsql)	WITHOUT_CLASSIFICATION	0.9995899993364952	WITHOUT_CLASSIFICATION	4.100006635047861E-4	DESIGN
schema export	WITHOUT_CLASSIFICATION	0.999442082267101	WITHOUT_CLASSIFICATION	5.579177328989701E-4	DESIGN
string provider = properties.getproperty( environment.bytecode_provider ) log.info( "bytecode provider name " + provider ) bytecodeprovider bytecodeprovider = buildbytecodeprovider( provider ) settings.setbytecodeprovider( bytecodeprovider )	WITHOUT_CLASSIFICATION	0.9999912760528019	WITHOUT_CLASSIFICATION	8.723947198060606E-6	DESIGN
legacy behavior apply the bridge	WITHOUT_CLASSIFICATION	0.9986329705144072	WITHOUT_CLASSIFICATION	0.001367029485592791	DESIGN
maybe a concrete sqlpropertyresult type but map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9521412135195455	WITHOUT_CLASSIFICATION	0.0478587864804546	DESIGN
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9979370116830263	WITHOUT_CLASSIFICATION	0.002062988316973784	DESIGN
private componenttuplizerfactory componenttuplizerfactory todo hhh-3517 and hhh-1907 private bytecodeprovider bytecodeprovider	WITHOUT_CLASSIFICATION	0.6831310502457087	DESIGN	0.3168689497542913	WITHOUT_CLASSIFICATION
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997047223797022	WITHOUT_CLASSIFICATION	2.9527762029773005E-4	DESIGN
public componenttuplizerfactory getcomponenttuplizerfactory() { return componenttuplizerfactory }	WITHOUT_CLASSIFICATION	0.9978558888886903	WITHOUT_CLASSIFICATION	0.0021441111113097754	DESIGN
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9896911316707594	WITHOUT_CLASSIFICATION	0.010308868329240689	DESIGN
void setshowsqlenabled(boolean b) { showsql = b } void setformatsqlenabled(boolean b) { formatsql = b }	WITHOUT_CLASSIFICATION	0.9999632078609567	WITHOUT_CLASSIFICATION	3.679213904335541E-5	DESIGN
public bytecodeprovider getbytecodeprovider() { return bytecodeprovider } void setbytecodeprovider(bytecodeprovider bytecodeprovider) { this.bytecodeprovider = bytecodeprovider }	WITHOUT_CLASSIFICATION	0.9995799658211715	WITHOUT_CLASSIFICATION	4.200341788284793E-4	DESIGN
using local since the inheritedmetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9820460077879976	WITHOUT_CLASSIFICATION	0.017953992212002435	DESIGN
private componenttuplizerfactory componenttuplizerfactory todo hhh-3517 and hhh-1907	WITHOUT_CLASSIFICATION	0.6831310502457087	DESIGN	0.3168689497542913	WITHOUT_CLASSIFICATION
protected list extendsqueue	WITHOUT_CLASSIFICATION	0.9992298604298152	WITHOUT_CLASSIFICATION	7.701395701848145E-4	DESIGN
extendsqueue = new arraylist()	WITHOUT_CLASSIFICATION	0.9997681850242806	WITHOUT_CLASSIFICATION	2.3181497571936633E-4	DESIGN
componenttuplizerfactory = new componenttuplizerfactory()	WITHOUT_CLASSIFICATION	0.999876643078696	WITHOUT_CLASSIFICATION	1.2335692130400507E-4	DESIGN
if doc is null then for whatever reason the cached file cannot be used	WITHOUT_CLASSIFICATION	0.998763200429447	WITHOUT_CLASSIFICATION	0.00123679957055302	DESIGN
drop them in reverse order in case db needs it done that way	WITHOUT_CLASSIFICATION	0.887516832635859	WITHOUT_CLASSIFICATION	0.11248316736414103	DESIGN
public componenttuplizerfactory getcomponenttuplizerfactory() { return componenttuplizerfactory }	WITHOUT_CLASSIFICATION	0.9978558888886903	WITHOUT_CLASSIFICATION	0.0021441111113097754	DESIGN
this method may be called many times!!	WITHOUT_CLASSIFICATION	0.9745665707903524	WITHOUT_CLASSIFICATION	0.025433429209647643	DESIGN
iterator iterator = extendsqueue.iterator()	WITHOUT_CLASSIFICATION	0.9999307366200697	WITHOUT_CLASSIFICATION	6.926337993025653E-5	DESIGN
iterator iter = extendsqueue.iterator()	WITHOUT_CLASSIFICATION	0.9998869690704039	WITHOUT_CLASSIFICATION	1.1303092959616057E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.9998803189613812	WITHOUT_CLASSIFICATION	1.19681038618821E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.9998803189613812	WITHOUT_CLASSIFICATION	1.19681038618821E-4	DESIGN
settings.setcomponenttuplizerfactory( this.getcomponenttuplizerfactory() )	WITHOUT_CLASSIFICATION	0.9995634240702479	WITHOUT_CLASSIFICATION	4.3657592975215767E-4	DESIGN
private final list extendsqueue	WITHOUT_CLASSIFICATION	0.9998672983151251	WITHOUT_CLASSIFICATION	1.3270168487490984E-4	DESIGN
<string string>	WITHOUT_CLASSIFICATION	0.9996104397048109	WITHOUT_CLASSIFICATION	3.8956029518918733E-4	DESIGN
<string string>	WITHOUT_CLASSIFICATION	0.9996104397048109	WITHOUT_CLASSIFICATION	3.8956029518918733E-4	DESIGN
+ "_" + referencedcolumnname not used for backward compatibility	WITHOUT_CLASSIFICATION	0.5081519626545956	DESIGN	0.49184803734540444	WITHOUT_CLASSIFICATION
set use_reflection_optimizer to false to fix hhh-227	WITHOUT_CLASSIFICATION	0.9834883430170416	WITHOUT_CLASSIFICATION	0.0165116569829584	DESIGN
orphan delete not supported for entitymode.dom4j	WITHOUT_CLASSIFICATION	0.999069789769068	WITHOUT_CLASSIFICATION	9.302102309319891E-4	DESIGN
element = xmlhelper.generatedom4jelement( persister.getnodename() )	WITHOUT_CLASSIFICATION	0.999899456910764	WITHOUT_CLASSIFICATION	1.0054308923592775E-4	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9995534802404356	WITHOUT_CLASSIFICATION	4.4651975956443564E-4	DESIGN
orphan delete not supported for entitymode.dom4j	WITHOUT_CLASSIFICATION	0.999069789769068	WITHOUT_CLASSIFICATION	9.302102309319891E-4	DESIGN
element = xmlhelper.generatedom4jelement( persister.getnodename() )	WITHOUT_CLASSIFICATION	0.999899456910764	WITHOUT_CLASSIFICATION	1.0054308923592775E-4	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.9993249504829596	WITHOUT_CLASSIFICATION	6.750495170404981E-4	DESIGN
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9993882764273994	WITHOUT_CLASSIFICATION	6.117235726007023E-4	DESIGN
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9992004587325318	WITHOUT_CLASSIFICATION	7.995412674682702E-4	DESIGN
the element has changed	WITHOUT_CLASSIFICATION	0.99996348719317	WITHOUT_CLASSIFICATION	3.6512806830064E-5	DESIGN
careful these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9964716919026186	WITHOUT_CLASSIFICATION	0.0035283080973812666	DESIGN
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9317417419410104	WITHOUT_CLASSIFICATION	0.06825825805898957	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9992010351068896	WITHOUT_CLASSIFICATION	7.989648931105201E-4	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9992010351068896	WITHOUT_CLASSIFICATION	7.989648931105201E-4	DESIGN
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9925454294646024	WITHOUT_CLASSIFICATION	0.007454570535397546	DESIGN
short-circuit(s) no new elements the old list contains only orphans no old elements so no orphans neither	WITHOUT_CLASSIFICATION	0.9999995877895486	WITHOUT_CLASSIFICATION	4.1221045151553666E-7	DESIGN
create the collection holding the orphans	WITHOUT_CLASSIFICATION	0.9995977133001722	WITHOUT_CLASSIFICATION	4.022866998277703E-4	DESIGN
collect entityidentifier(s) of the current elements - add them into a hashset for fast access	WITHOUT_CLASSIFICATION	0.9998301644964422	WITHOUT_CLASSIFICATION	1.6983550355775318E-4	DESIGN
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999534768008834	WITHOUT_CLASSIFICATION	4.652319911657481E-5	DESIGN
(array==null) ? templist.size()	WITHOUT_CLASSIFICATION	0.9991205183998267	WITHOUT_CLASSIFICATION	8.794816001733189E-4	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9995534802404356	WITHOUT_CLASSIFICATION	4.4651975956443564E-4	DESIGN
(array==null) ? templist.get(i)	WITHOUT_CLASSIFICATION	0.9991205183998267	WITHOUT_CLASSIFICATION	8.794816001733189E-4	DESIGN
write() -- doesn't	WITHOUT_CLASSIFICATION	0.9990086649600115	WITHOUT_CLASSIFICATION	9.913350399885193E-4	DESIGN
write() -- doesn't	WITHOUT_CLASSIFICATION	0.9990086649600115	WITHOUT_CLASSIFICATION	9.913350399885193E-4	DESIGN
amazingly these two will work because abstractcollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.999939733138411	WITHOUT_CLASSIFICATION	6.026686158897241E-5	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.9993249504829596	WITHOUT_CLASSIFICATION	6.750495170404981E-4	DESIGN
finally what it's all about	WITHOUT_CLASSIFICATION	0.9974712089835933	WITHOUT_CLASSIFICATION	0.0025287910164066545	DESIGN
note that if we load this collection from a cartesian product the multiplicity would be broken so use an idbag instead	WITHOUT_CLASSIFICATION	0.9624434374390357	DESIGN	0.03755656256096432	WITHOUT_CLASSIFICATION
anyway here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9171827991762682	DESIGN	0.0828172008237317	WITHOUT_CLASSIFICATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999560396969287	WITHOUT_CLASSIFICATION	4.3960303071329114E-5	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9532735679131525	WITHOUT_CLASSIFICATION	0.046726432086847396	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.9993249504829596	WITHOUT_CLASSIFICATION	6.750495170404981E-4	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999560396969287	WITHOUT_CLASSIFICATION	4.3960303071329114E-5	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9532735679131525	WITHOUT_CLASSIFICATION	0.046726432086847396	DESIGN
public boolean equals(object other) {read()return bag.equals(other)}public int hashcode(object other) {read()return bag.hashcode()}	WITHOUT_CLASSIFICATION	0.9995779362911843	WITHOUT_CLASSIFICATION	4.220637088156133E-4	DESIGN
list operations	WITHOUT_CLASSIFICATION	0.999958749154294	WITHOUT_CLASSIFICATION	4.125084570603575E-5	DESIGN
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999912671113278	WITHOUT_CLASSIFICATION	8.732888672226385E-6	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.9993249504829596	WITHOUT_CLASSIFICATION	6.750495170404981E-4	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.9993249504829596	WITHOUT_CLASSIFICATION	6.750495170404981E-4	DESIGN
from map	WITHOUT_CLASSIFICATION	0.9997858778099041	WITHOUT_CLASSIFICATION	2.1412219009588426E-4	DESIGN
from sortedmap	WITHOUT_CLASSIFICATION	0.9994272801769705	WITHOUT_CLASSIFICATION	5.727198230295622E-4	DESIGN
inject the data	WITHOUT_CLASSIFICATION	0.9999123156487512	WITHOUT_CLASSIFICATION	8.768435124885018E-5	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997728430769162	WITHOUT_CLASSIFICATION	2.2715692308383832E-4	DESIGN
default pool size 20	WITHOUT_CLASSIFICATION	0.9998902477996332	WITHOUT_CLASSIFICATION	1.097522003668576E-4	DESIGN
trying via forname() first to be as close to drivermanager's semantics	WITHOUT_CLASSIFICATION	0.9999979702401459	WITHOUT_CLASSIFICATION	2.0297598540137773E-6	DESIGN
if debug level is enabled then log the password otherwise mask it	WITHOUT_CLASSIFICATION	0.9999802298800564	WITHOUT_CLASSIFICATION	1.9770119943501368E-5	DESIGN
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9929796375805527	WITHOUT_CLASSIFICATION	0.007020362419447219	DESIGN
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9997856440945351	WITHOUT_CLASSIFICATION	2.143559054648267E-4	DESIGN
then bind it	WITHOUT_CLASSIFICATION	0.9992247479517774	WITHOUT_CLASSIFICATION	7.752520482226781E-4	DESIGN
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9818152688834304	WITHOUT_CLASSIFICATION	0.018184731116569517	DESIGN
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9984913494740085	WITHOUT_CLASSIFICATION	0.0015086505259914599	DESIGN
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999779692043389	WITHOUT_CLASSIFICATION	2.2030795661159772E-5	DESIGN
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9976472925845449	WITHOUT_CLASSIFICATION	0.002352707415455133	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997278346794565	WITHOUT_CLASSIFICATION	2.7216532054357876E-4	DESIGN
we could register the session against the transaction even though it is not started but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999989896739165	WITHOUT_CLASSIFICATION	1.0103260834364313E-6	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997728430769162	WITHOUT_CLASSIFICATION	2.2715692308383832E-4	DESIGN
private string propertyname	WITHOUT_CLASSIFICATION	0.9982025850944737	WITHOUT_CLASSIFICATION	0.0017974149055263598	DESIGN
public propertyprojection project() {return projections.property(getpropertyname())}	WITHOUT_CLASSIFICATION	0.9986480370876676	WITHOUT_CLASSIFICATION	0.0013519629123324357	DESIGN
string[] fk = stringhelper.qualify( "collection_" cp.getkeycolumnnames() )	WITHOUT_CLASSIFICATION	0.999016009362922	WITHOUT_CLASSIFICATION	9.83990637078001E-4	DESIGN
" collection_ where " +	WITHOUT_CLASSIFICATION	0.99996796623685	WITHOUT_CLASSIFICATION	3.2033763149990037E-5	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9996071288646099	WITHOUT_CLASSIFICATION	3.9287113539014786E-4	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9996071288646099	WITHOUT_CLASSIFICATION	3.9287113539014786E-4	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997728430769162	WITHOUT_CLASSIFICATION	2.2715692308383832E-4	DESIGN
the following two lines were added to ensure that this.params is not null which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999917391496028	WITHOUT_CLASSIFICATION	8.260850397215685E-6	DESIGN
with two-deep subqueries the same alias would get generated for both using the old method (criteriaquery.generatesqlalias()) so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9971024743096806	WITHOUT_CLASSIFICATION	0.002897525690319404	DESIGN
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9884665294396154	WITHOUT_CLASSIFICATION	0.01153347056038453	DESIGN
pull off the last " "	WITHOUT_CLASSIFICATION	0.999923775333309	WITHOUT_CLASSIFICATION	7.622466669105339E-5	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.9997550865754945	WITHOUT_CLASSIFICATION	2.4491342450547686E-4	DESIGN
we have the form trim(trimsource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9998434854108936	WITHOUT_CLASSIFICATION	1.5651458910642533E-4	DESIGN
we have the form trim(from trimsource). this is functionally equivalent to trim(trimsource)	WITHOUT_CLASSIFICATION	0.998073619521416	WITHOUT_CLASSIFICATION	0.001926380478583944	DESIGN
not_supported_should_use_jdbc3_preparedstatement.getgeneratedkeys_method	WITHOUT_CLASSIFICATION	0.9995899993364952	WITHOUT_CLASSIFICATION	4.100006635047861E-4	DESIGN
potentialtrimcharacterargindex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9998861302793075	WITHOUT_CLASSIFICATION	1.138697206924723E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997027570555822	WITHOUT_CLASSIFICATION	2.972429444177272E-4	DESIGN
oracle did add support for ansi case statements in 9i	WITHOUT_CLASSIFICATION	0.9999869781304965	WITHOUT_CLASSIFICATION	1.3021869503568085E-5	DESIGN
the standard sql function name is current_timestamp	WITHOUT_CLASSIFICATION	0.9999940970387223	WITHOUT_CLASSIFICATION	5.902961277682815E-6	DESIGN
informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9805012901473809	WITHOUT_CLASSIFICATION	0.01949870985261913	DESIGN
or byte or text? or money	WITHOUT_CLASSIFICATION	0.9997756222306609	WITHOUT_CLASSIFICATION	2.2437776933907923E-4	DESIGN
strip table-owner because informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9998173219304687	WITHOUT_CLASSIFICATION	1.8267806953139505E-4	DESIGN
build the map of standard ansi sql aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999444317826268	WITHOUT_CLASSIFICATION	5.556821737316835E-5	DESIGN
pre h3.2 behavior super.getreturntype(ct m)	WITHOUT_CLASSIFICATION	0.9996178125926733	WITHOUT_CLASSIFICATION	3.8218740732657067E-4	DESIGN
finally use the sqltype if == on hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9991145355194991	WITHOUT_CLASSIFICATION	8.854644805009215E-4	DESIGN
because numeric can be anything	WITHOUT_CLASSIFICATION	0.999878770200907	WITHOUT_CLASSIFICATION	1.2122979909295174E-4	DESIGN
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9812537804134455	WITHOUT_CLASSIFICATION	0.018746219586554532	DESIGN
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9981268669395092	WITHOUT_CLASSIFICATION	0.0018731330604907779	DESIGN
map second/minute/hour/day/month/year to ansi extract() override on subclasses	WITHOUT_CLASSIFICATION	0.9998891625756701	WITHOUT_CLASSIFICATION	1.1083742432983931E-4	DESIGN
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9983134349901946	WITHOUT_CLASSIFICATION	0.001686565009805352	DESIGN
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9949220563736157	WITHOUT_CLASSIFICATION	0.005077943626384223	DESIGN
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9969799432241093	WITHOUT_CLASSIFICATION	0.0030200567758906947	DESIGN
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995939616079037	WITHOUT_CLASSIFICATION	4.0603839209627326E-4	DESIGN
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999159741084217	WITHOUT_CLASSIFICATION	8.402589157823635E-5	DESIGN
identity support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990416679364079	WITHOUT_CLASSIFICATION	9.583320635921292E-4	DESIGN
sequence support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997547448107401	WITHOUT_CLASSIFICATION	2.452551892599394E-4	DESIGN
guid support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988403415880751	WITHOUT_CLASSIFICATION	0.001159658411924856	DESIGN
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988403415880751	WITHOUT_CLASSIFICATION	0.001159658411924856	DESIGN
by default we report no support	WITHOUT_CLASSIFICATION	0.9591452743904008	WITHOUT_CLASSIFICATION	0.040854725609599164	DESIGN
by default we report no support for nowait lock semantics	WITHOUT_CLASSIFICATION	0.760015743081191	WITHOUT_CLASSIFICATION	0.23998425691880892	DESIGN
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995774843429667	WITHOUT_CLASSIFICATION	4.225156570333662E-4	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9820303579916863	WITHOUT_CLASSIFICATION	0.017969642008313795	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.993105477387855	WITHOUT_CLASSIFICATION	0.006894522612145016	DESIGN
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997363048227741	WITHOUT_CLASSIFICATION	2.6369517722585795E-4	DESIGN
sqlexception support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989965810833936	WITHOUT_CLASSIFICATION	0.0010034189166064733	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99886177353954	WITHOUT_CLASSIFICATION	0.0011382264604600984	DESIGN
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990483262412156	WITHOUT_CLASSIFICATION	9.516737587844394E-4	DESIGN
ddl support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988403415880751	WITHOUT_CLASSIFICATION	0.001159658411924856	DESIGN
grrr for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999226465719474	WITHOUT_CLASSIFICATION	7.735342805259451E-5	DESIGN
informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991499510633907	WITHOUT_CLASSIFICATION	8.500489366093562E-4	DESIGN
return false here as most databases do not properly support this construct	WITHOUT_CLASSIFICATION	0.9943730846145543	WITHOUT_CLASSIFICATION	0.0056269153854457184	DESIGN
mckoi has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9998308474578916	WITHOUT_CLASSIFICATION	1.691525421083739E-4	DESIGN
oracle8 and previous define only a "date" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9660555963334787	WITHOUT_CLASSIFICATION	0.03394440366652127	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9993230936286703	WITHOUT_CLASSIFICATION	6.769063713296922E-4	DESIGN
" cascade"	WITHOUT_CLASSIFICATION	0.9998527564717145	WITHOUT_CLASSIFICATION	1.4724352828545949E-4	DESIGN
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9997255642148154	WITHOUT_CLASSIFICATION	2.74435785184648E-4	DESIGN
public boolean droptemporarytableafteruse() {we have to because postgres sets current txto rollback only after a failed create tablereturn true}	WITHOUT_CLASSIFICATION	0.9999918000822042	WITHOUT_CLASSIFICATION	8.199917795787126E-6	DESIGN
check violation	WITHOUT_CLASSIFICATION	0.9991531245149888	WITHOUT_CLASSIFICATION	8.468754850112705E-4	DESIGN
unique violation	WITHOUT_CLASSIFICATION	0.999030878273547	WITHOUT_CLASSIFICATION	9.691217264530714E-4	DESIGN
foreign key violation	WITHOUT_CLASSIFICATION	0.9995793532878996	WITHOUT_CLASSIFICATION	4.206467121004189E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997027570555822	WITHOUT_CLASSIFICATION	2.972429444177272E-4	DESIGN
not null violation	WITHOUT_CLASSIFICATION	0.9984310214819986	WITHOUT_CLASSIFICATION	0.0015689785180013605	DESIGN
all other	WITHOUT_CLASSIFICATION	0.9996742673207337	WITHOUT_CLASSIFICATION	3.257326792662244E-4	DESIGN
register the type of the out param - postgresql uses types.other	WITHOUT_CLASSIFICATION	0.999206559013203	WITHOUT_CLASSIFICATION	7.934409867969048E-4	DESIGN
seems to not really public boolean supportsrowvalueconstructorsyntax() { return true }	WITHOUT_CLASSIFICATION	0.8944607418794284	WITHOUT_CLASSIFICATION	0.10553925812057165	DESIGN
seems to have spotty lob suppport	WITHOUT_CLASSIFICATION	0.9991691909325943	WITHOUT_CLASSIFICATION	8.308090674056719E-4	DESIGN
hhh-2300	WITHOUT_CLASSIFICATION	0.9997513558113361	WITHOUT_CLASSIFICATION	2.486441886638397E-4	DESIGN
ignore (probably h2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9995023127546411	WITHOUT_CLASSIFICATION	4.976872453589038E-4	DESIGN
numeric functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992661117077708	WITHOUT_CLASSIFICATION	7.338882922291276E-4	DESIGN
string functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993335241163801	WITHOUT_CLASSIFICATION	6.664758836198753E-4	DESIGN
time and date functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999852661385273	WITHOUT_CLASSIFICATION	1.4733861472703794E-4	DESIGN
system functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987845482055656	WITHOUT_CLASSIFICATION	0.0012154517944343636	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9985926613119238	WITHOUT_CLASSIFICATION	0.0014073386880763003	DESIGN
23000 check constraint violation {0} 23001 unique index or primary key violation {0}	WITHOUT_CLASSIFICATION	0.9998852258153552	WITHOUT_CLASSIFICATION	1.147741846448439E-4	DESIGN
display the dialect version.	WITHOUT_CLASSIFICATION	0.9984069480457723	WITHOUT_CLASSIFICATION	0.001593051954227731	DESIGN
the rdms concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999993013149114	WITHOUT_CLASSIFICATION	6.986850884436564E-7	DESIGN
dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972984218733207	WITHOUT_CLASSIFICATION	0.0027015781266792557	DESIGN
original dialect.java returns " for update"	WITHOUT_CLASSIFICATION	0.9998831761899419	WITHOUT_CLASSIFICATION	1.1682381005812865E-4	DESIGN
verify the state of this new method in hibernate 3.0 dialect.java	WITHOUT_CLASSIFICATION	0.998622263980574	WITHOUT_CLASSIFICATION	0.0013777360194259694	DESIGN
origial dialect.java returns true	WITHOUT_CLASSIFICATION	0.9992225150276002	WITHOUT_CLASSIFICATION	7.774849723997833E-4	DESIGN
the keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.8658378936406907	WITHOUT_CLASSIFICATION	0.1341621063593092	DESIGN
sequence methods - start. the rdms dialect needs these	WITHOUT_CLASSIFICATION	0.9930522951689886	WITHOUT_CLASSIFICATION	0.006947704831011327	DESIGN
methods to make it possible to use the native id generator	WITHOUT_CLASSIFICATION	0.9939017535693097	WITHOUT_CLASSIFICATION	0.006098246430690297	DESIGN
the where clause was added to eliminate this statement from brute force searches.	WITHOUT_CLASSIFICATION	0.9987891099644063	WITHOUT_CLASSIFICATION	0.0012108900355936425	DESIGN
sequence methods - end	WITHOUT_CLASSIFICATION	0.9991104154007354	WITHOUT_CLASSIFICATION	8.895845992644703E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997027570555822	WITHOUT_CLASSIFICATION	2.972429444177272E-4	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9993230936286703	WITHOUT_CLASSIFICATION	6.769063713296922E-4	DESIGN
we must return a valid rdms/rsa command from this method to prevent rdms/rsa from issuing error 400	WITHOUT_CLASSIFICATION	0.785086133590051	WITHOUT_CLASSIFICATION	0.2149138664099489	DESIGN
used with drop table to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9284129478823299	WITHOUT_CLASSIFICATION	0.07158705211767008	DESIGN
rdms supports the union all clause.	WITHOUT_CLASSIFICATION	0.9997151677761846	WITHOUT_CLASSIFICATION	2.8483222381532787E-4	DESIGN
rdms has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9998332658240271	WITHOUT_CLASSIFICATION	1.667341759729521E-4	DESIGN
multi-param dialect functions	WITHOUT_CLASSIFICATION	0.9935096382823171	WITHOUT_CLASSIFICATION	0.0064903617176829504	DESIGN
function templates	WITHOUT_CLASSIFICATION	0.999966376038211	WITHOUT_CLASSIFICATION	3.3623961789001624E-5	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9985926613119238	WITHOUT_CLASSIFICATION	0.0014073386880763003	DESIGN
this assumes schema support which is present in 1.8.0 and later	WITHOUT_CLASSIFICATION	0.9975150399337652	WITHOUT_CLASSIFICATION	0.002484960066234762	DESIGN
hsqldb only supports read_uncommitted transaction isolation	WITHOUT_CLASSIFICATION	0.9997592799216569	WITHOUT_CLASSIFICATION	2.4072007834300958E-4	DESIGN
multi-param string dialect functions	WITHOUT_CLASSIFICATION	0.9976580439002307	WITHOUT_CLASSIFICATION	0.0023419560997693695	DESIGN
multi-param numeric dialect functions	WITHOUT_CLASSIFICATION	0.9974215980130817	WITHOUT_CLASSIFICATION	0.0025784019869183527	DESIGN
multi-param date dialect functions	WITHOUT_CLASSIFICATION	0.9984335823844623	WITHOUT_CLASSIFICATION	0.001566417615537614	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9996013692671628	WITHOUT_CLASSIFICATION	3.986307328371591E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997027570555822	WITHOUT_CLASSIFICATION	2.972429444177272E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997027570555822	WITHOUT_CLASSIFICATION	2.972429444177272E-4	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9932654840601232	WITHOUT_CLASSIFICATION	0.006734515939876902	DESIGN
register the type of the out param - an oracle specific type	WITHOUT_CLASSIFICATION	0.9999211094068581	WITHOUT_CLASSIFICATION	7.88905931418915E-5	DESIGN
timesten has no blob/clob support but these types may be suitable for some applications. the length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9988778369540378	WITHOUT_CLASSIFICATION	0.001122163045962183	DESIGN
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9947946658404019	WITHOUT_CLASSIFICATION	0.005205334159598137	DESIGN
public boolean supportsforupdatenowait() {return false}	WITHOUT_CLASSIFICATION	0.999312432937343	WITHOUT_CLASSIFICATION	6.875670626570582E-4	DESIGN
timesten has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9998480329259988	WITHOUT_CLASSIFICATION	1.5196707400117474E-4	DESIGN
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9995838157375653	WITHOUT_CLASSIFICATION	4.1618426243469154E-4	DESIGN
add new ordered map	WITHOUT_CLASSIFICATION	0.9992129350944768	WITHOUT_CLASSIFICATION	7.870649055232285E-4	DESIGN
registercolumntype( types.varchar 16777215 "mediumtext" )	WITHOUT_CLASSIFICATION	0.9995706525786909	WITHOUT_CLASSIFICATION	4.293474213091074E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997027570555822	WITHOUT_CLASSIFICATION	2.972429444177272E-4	DESIGN
this assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999827354796182	WITHOUT_CLASSIFICATION	1.7264520381759266E-5	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9975034624953091	WITHOUT_CLASSIFICATION	0.002496537504690956	DESIGN
return "select current_timestamp from rdb$database"	WITHOUT_CLASSIFICATION	0.9985165764943918	WITHOUT_CLASSIFICATION	0.0014834235056081467	DESIGN
registercolumntype data types	WITHOUT_CLASSIFICATION	0.9996535858836515	WITHOUT_CLASSIFICATION	3.4641411634849856E-4	DESIGN
hibernate seems to ignore this type	WITHOUT_CLASSIFICATION	0.992592634946622	WITHOUT_CLASSIFICATION	0.007407365053378086	DESIGN
ibid for current_time and current_date	WITHOUT_CLASSIFICATION	0.9996148222902257	WITHOUT_CLASSIFICATION	3.8517770977425456E-4	DESIGN
tell hibernate to use getbytes instead of getbinarystream	WITHOUT_CLASSIFICATION	0.9896172301312466	WITHOUT_CLASSIFICATION	0.010382769868753416	DESIGN
no batch statements	WITHOUT_CLASSIFICATION	0.9998870793161004	WITHOUT_CLASSIFICATION	1.129206838995677E-4	DESIGN
we might want a special case for 192. this is very common for money types and here it is converted to 181	WITHOUT_CLASSIFICATION	0.9671636172229914	DESIGN	0.032836382777008545	WITHOUT_CLASSIFICATION
no pointbase bit	WITHOUT_CLASSIFICATION	0.9944979969851463	WITHOUT_CLASSIFICATION	0.005502003014853652	DESIGN
no pointbase tinyint	WITHOUT_CLASSIFICATION	0.9993535450533143	WITHOUT_CLASSIFICATION	6.464549466857094E-4	DESIGN
pointbase has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9995560157721554	WITHOUT_CLASSIFICATION	4.439842278445249E-4	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9993230936286703	WITHOUT_CLASSIFICATION	6.769063713296922E-4	DESIGN
the current_timestamp is more accurate but only known to be supported in sql server 7.0 and later (i.e. sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.7702253496251249	WITHOUT_CLASSIFICATION	0.22977465037487513	DESIGN
sql server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999903321076874	WITHOUT_CLASSIFICATION	9.667892312671629E-6	DESIGN
here assume sqlserver2005 using snapshot isolation which does not have this problem	WITHOUT_CLASSIFICATION	0.9918455505213971	WITHOUT_CLASSIFICATION	0.008154449478602926	DESIGN
registercolumntype( types.blob 16777215 "mediumblob" ) registercolumntype( types.blob 65535 "blob" )	WITHOUT_CLASSIFICATION	0.9988594190218947	WITHOUT_CLASSIFICATION	0.001140580978105321	DESIGN
registercolumntype( types.clob 16777215 "mediumtext" ) registercolumntype( types.clob 65535 "text" )	WITHOUT_CLASSIFICATION	0.9997325491374497	WITHOUT_CLASSIFICATION	2.674508625502337E-4	DESIGN
registercolumntype( types.varchar 16777215 "mediumtext" ) registercolumntype( types.varchar 65535 "text" )	WITHOUT_CLASSIFICATION	0.9997325491374497	WITHOUT_CLASSIFICATION	2.674508625502337E-4	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9993230936286703	WITHOUT_CLASSIFICATION	6.769063713296922E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9996854356540394	WITHOUT_CLASSIFICATION	3.145643459604935E-4	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9975034624953091	WITHOUT_CLASSIFICATION	0.002496537504690956	DESIGN
sybase bit type does not support null values	WITHOUT_CLASSIFICATION	0.9331612563857217	WITHOUT_CLASSIFICATION	0.06683874361427836	DESIGN
this assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999827354796182	WITHOUT_CLASSIFICATION	1.7264520381759266E-5	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997027570555822	WITHOUT_CLASSIFICATION	2.972429444177272E-4	DESIGN
you may still have other resultsets or update counts left to process here but you can't do it now or the resultset you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999827525459	WITHOUT_CLASSIFICATION	1.724745421171966E-8	DESIGN
not null (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9971919974558117	WITHOUT_CLASSIFICATION	0.002808002544188321	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997027570555822	WITHOUT_CLASSIFICATION	2.972429444177272E-4	DESIGN
oracle driver reports to support getgeneratedkeys() but they only support the version taking an array of the names of the columns to be returned (via its returning clause). no other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.99992428388783	WITHOUT_CLASSIFICATION	7.571611217003508E-5	DESIGN
multi-param string dialect functions	WITHOUT_CLASSIFICATION	0.9976580439002307	WITHOUT_CLASSIFICATION	0.0023419560997693695	DESIGN
multi-param numeric dialect functions	WITHOUT_CLASSIFICATION	0.9974215980130817	WITHOUT_CLASSIFICATION	0.0025784019869183527	DESIGN
multi-param date dialect functions	WITHOUT_CLASSIFICATION	0.9984335823844623	WITHOUT_CLASSIFICATION	0.001566417615537614	DESIGN
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999899243509692	WITHOUT_CLASSIFICATION	1.0075649030877674E-5	DESIGN
add the main query	WITHOUT_CLASSIFICATION	0.9999146558405111	WITHOUT_CLASSIFICATION	8.534415948888303E-5	DESIGN
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999858419469807	WITHOUT_CLASSIFICATION	1.415805301929151E-5	DESIGN
this assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999827354796182	WITHOUT_CLASSIFICATION	1.7264520381759266E-5	DESIGN
you may still have other resultsets or update counts left to process here but you can't do it now or the resultset you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999827525459	WITHOUT_CLASSIFICATION	1.724745421171966E-8	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997027570555822	WITHOUT_CLASSIFICATION	2.972429444177272E-4	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9993230936286703	WITHOUT_CLASSIFICATION	6.769063713296922E-4	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9996013692671628	WITHOUT_CLASSIFICATION	3.986307328371591E-4	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9932654840601232	WITHOUT_CLASSIFICATION	0.006734515939876902	DESIGN
register the type of the out param - an oracle specific type	WITHOUT_CLASSIFICATION	0.9999211094068581	WITHOUT_CLASSIFICATION	7.88905931418915E-5	DESIGN
features which change between 8i 9i and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996264051181343	WITHOUT_CLASSIFICATION	3.7359488186568805E-4	DESIGN
features which remain constant across 8i 9i and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999914148320527	WITHOUT_CLASSIFICATION	8.585167947289075E-6	DESIGN
binary %stream character %stream	WITHOUT_CLASSIFICATION	0.9999151431707705	WITHOUT_CLASSIFICATION	8.485682922957784E-5	DESIGN
getdefaultproperties().setproperty(environment.statement_batch_size no_batch)	WITHOUT_CLASSIFICATION	0.9995899993364952	WITHOUT_CLASSIFICATION	4.100006635047861E-4	DESIGN
hibernate impelemnts cast in dialect.java	WITHOUT_CLASSIFICATION	0.9965229165260683	WITHOUT_CLASSIFICATION	0.0034770834739317907	DESIGN
aggregate functions shouldn't be registered right? registerfunction( "list" new standardsqlfunction("list"hibernate.string) ) stopped on $list	WITHOUT_CLASSIFICATION	0.9530698211566317	DESIGN	0.046930178843368156	WITHOUT_CLASSIFICATION
ddl support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988403415880751	WITHOUT_CLASSIFICATION	0.001159658411924856	DESIGN
below is for cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9996815668701688	WITHOUT_CLASSIFICATION	3.1843312983114233E-4	DESIGN
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9924428716913052	WITHOUT_CLASSIFICATION	0.007557128308694738	DESIGN
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9985618471525782	WITHOUT_CLASSIFICATION	0.0014381528474218324	DESIGN
the syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9782667907183911	WITHOUT_CLASSIFICATION	0.021733209281608983	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9996068946777141	WITHOUT_CLASSIFICATION	3.931053222858822E-4	DESIGN
identity support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990416679364079	WITHOUT_CLASSIFICATION	9.583320635921292E-4	DESIGN
sequence support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997547448107401	WITHOUT_CLASSIFICATION	2.452551892599394E-4	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9820303579916863	WITHOUT_CLASSIFICATION	0.017969642008313795	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9996068946777141	WITHOUT_CLASSIFICATION	3.931053222858822E-4	DESIGN
the syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9935527045249898	WITHOUT_CLASSIFICATION	0.006447295475010284	DESIGN
completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9994623084708867	WITHOUT_CLASSIFICATION	5.37691529113377E-4	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992103183505826	WITHOUT_CLASSIFICATION	7.896816494173635E-4	DESIGN
limit support (ala top) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999044548322065	WITHOUT_CLASSIFICATION	9.554516779359397E-5	DESIGN
intersystems cache' does not current support "select for update" syntax set your transaction mode to read_committed before using	WITHOUT_CLASSIFICATION	0.9981471308713362	WITHOUT_CLASSIFICATION	0.001852869128663832	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997027570555822	WITHOUT_CLASSIFICATION	2.972429444177272E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997027570555822	WITHOUT_CLASSIFICATION	2.972429444177272E-4	DESIGN
<string>	WITHOUT_CLASSIFICATION	0.9997513558113361	WITHOUT_CLASSIFICATION	2.486441886638397E-4	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.993105477387855	WITHOUT_CLASSIFICATION	0.006894522612145016	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99886177353954	WITHOUT_CLASSIFICATION	0.0011382264604600984	DESIGN
the keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.8658378936406907	WITHOUT_CLASSIFICATION	0.1341621063593092	DESIGN
does the limit clause come at the start of the select statement rather than at the end?	WITHOUT_CLASSIFICATION	0.9994887160332379	WITHOUT_CLASSIFICATION	5.112839667621436E-4	DESIGN
does the limit clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9997859174429984	WITHOUT_CLASSIFICATION	2.1408255700167543E-4	DESIGN
the name of the sql function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9997303698714678	WITHOUT_CLASSIFICATION	2.6963012853222613E-4	DESIGN
create an outerjoingenerator for this dialect.	WITHOUT_CLASSIFICATION	0.998490895317874	WITHOUT_CLASSIFICATION	0.001509104682125879	DESIGN
the keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9985989973667253	WITHOUT_CLASSIFICATION	0.0014010026332746518	DESIGN
registerfunction( "trim" new standardsqlfunction( "trim" hibernate.string ) )	WITHOUT_CLASSIFICATION	0.9994681690939302	WITHOUT_CLASSIFICATION	5.318309060697447E-4	DESIGN
skip the from keyword in params	WITHOUT_CLASSIFICATION	0.9998453930788915	WITHOUT_CLASSIFICATION	1.546069211084128E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9990930432808648	WITHOUT_CLASSIFICATION	9.069567191352288E-4	DESIGN
potentialtrimcharacterargindex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9998861302793075	WITHOUT_CLASSIFICATION	1.138697206924723E-4	DESIGN
sqlfunction implementation	WITHOUT_CLASSIFICATION	0.999558406986136	WITHOUT_CLASSIFICATION	4.4159301386408815E-4	DESIGN
conceivable that the dialect ctor could throw hibernateexceptions so don't re-wrap	WITHOUT_CLASSIFICATION	0.9838909347496204	WITHOUT_CLASSIFICATION	0.016109065250379636	DESIGN
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9997391990400539	WITHOUT_CLASSIFICATION	2.608009599460855E-4	DESIGN
register resolvers set via environment property	WITHOUT_CLASSIFICATION	0.9896485701273464	WITHOUT_CLASSIFICATION	0.010351429872653549	DESIGN
kept for backward compatibility until after the 3.1beta5 release of ha	WITHOUT_CLASSIFICATION	0.9999624608962098	WITHOUT_CLASSIFICATION	3.7539103790320116E-5	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9996405402664161	WITHOUT_CLASSIFICATION	3.59459733583903E-4	DESIGN
the cascadingaction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997741008587708	WITHOUT_CLASSIFICATION	2.2589914122928486E-4	DESIGN
the cascadingaction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998119258308134	WITHOUT_CLASSIFICATION	1.8807416918664545E-4	DESIGN
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999525708451952	WITHOUT_CLASSIFICATION	4.742915480485945E-5	DESIGN
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.998776420100536	WITHOUT_CLASSIFICATION	0.0012235798994639081	DESIGN
(lockmode) anything	WITHOUT_CLASSIFICATION	0.9998120809500871	WITHOUT_CLASSIFICATION	1.879190499129429E-4	DESIGN
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999031482998508	WITHOUT_CLASSIFICATION	9.685170014920372E-5	DESIGN
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999382496709035	WITHOUT_CLASSIFICATION	6.175032909658353E-5	DESIGN
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999193939749061	WITHOUT_CLASSIFICATION	8.060602509384422E-5	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999986414186751	WITHOUT_CLASSIFICATION	1.358581324891014E-5	DESIGN
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.998009729605601	WITHOUT_CLASSIFICATION	0.001990270394399066	DESIGN
for deprecated saveorupdatecopy()	WITHOUT_CLASSIFICATION	0.9987219871816059	WITHOUT_CLASSIFICATION	0.0012780128183940758	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999195214879024	WITHOUT_CLASSIFICATION	8.047851209757703E-5	DESIGN
a proxy cannot be transient and it breaks foreignkeys.istransient	WITHOUT_CLASSIFICATION	0.9983954605268142	WITHOUT_CLASSIFICATION	0.0016045394731858192	DESIGN
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999227949501874	WITHOUT_CLASSIFICATION	7.720504981253935E-5	DESIGN
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994062630729955	WITHOUT_CLASSIFICATION	5.937369270044329E-4	DESIGN
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9986749461137211	WITHOUT_CLASSIFICATION	0.0013250538862788984	DESIGN
actually the semantics of the next three are really "bag" note that unlike objects collection insertions updates deletions are not really remembered between flushes. we just re-use the same lists for convenience.	WITHOUT_CLASSIFICATION	0.9696059110797604	DESIGN	0.03039408892023972	WITHOUT_CLASSIFICATION
add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.999681896558692	WITHOUT_CLASSIFICATION	3.1810344130801614E-4	DESIGN
continue loop	WITHOUT_CLASSIFICATION	0.9999512655299609	WITHOUT_CLASSIFICATION	4.8734470039047355E-5	DESIGN
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9992313931168835	WITHOUT_CLASSIFICATION	7.686068831166072E-4	DESIGN
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999382094830049	WITHOUT_CLASSIFICATION	6.179051699503327E-5	DESIGN
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999539877726329	WITHOUT_CLASSIFICATION	4.601222736704256E-5	DESIGN
the map of batch numbers to entityinsertaction lists	WITHOUT_CLASSIFICATION	0.9992484063069941	WITHOUT_CLASSIFICATION	7.51593693005882E-4	DESIGN
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9988242909372073	WITHOUT_CLASSIFICATION	0.0011757090627926975	DESIGN
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999511940322232	WITHOUT_CLASSIFICATION	4.880596777687315E-5	DESIGN
remove the current element from insertions. it will be added back later.	WITHOUT_CLASSIFICATION	0.9999925873109978	WITHOUT_CLASSIFICATION	7.412689002208086E-6	DESIGN
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9993878625919168	WITHOUT_CLASSIFICATION	6.121374080830849E-4	DESIGN
there is already an existing batch for this type of entity. check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9988038358521414	WITHOUT_CLASSIFICATION	0.0011961641478586442	DESIGN
now rebuild the insertions list. there is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9997189988534774	WITHOUT_CLASSIFICATION	2.810011465226184E-4	DESIGN
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9941410459124054	WITHOUT_CLASSIFICATION	0.005858954087594631	DESIGN
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9998715449216394	WITHOUT_CLASSIFICATION	1.2845507836062965E-4	DESIGN
find the batch number associated with the current association if any.	WITHOUT_CLASSIFICATION	0.9999378910166706	WITHOUT_CLASSIFICATION	6.21089833293284E-5	DESIGN
create a new batch for this type. the batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9915896506850531	WITHOUT_CLASSIFICATION	0.008410349314946858	DESIGN
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9986701277451236	WITHOUT_CLASSIFICATION	0.0013298722548764183	DESIGN
since this entity will now be processed in the latest possible batch we can be assured that it will come after all other associations there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9942922693331482	WITHOUT_CLASSIFICATION	0.005707730666851875	DESIGN
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999482357684162	WITHOUT_CLASSIFICATION	5.17642315838656E-5	DESIGN
not really necessary but good for consistency	WITHOUT_CLASSIFICATION	0.9625990362862031	WITHOUT_CLASSIFICATION	0.03740096371379678	DESIGN
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999198778145225	WITHOUT_CLASSIFICATION	8.012218547758162E-5	DESIGN
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9992016788094942	WITHOUT_CLASSIFICATION	7.983211905057259E-4	DESIGN
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9979243233145223	WITHOUT_CLASSIFICATION	0.002075676685477708	DESIGN
loaded entity instances by entityuniquekey	WITHOUT_CLASSIFICATION	0.999914613353831	WITHOUT_CLASSIFICATION	8.538664616897035E-5	DESIGN
identity map of entityentry instances by the entity instance	WITHOUT_CLASSIFICATION	0.999974878002583	WITHOUT_CLASSIFICATION	2.512199741696013E-5	DESIGN
entity proxies by entitykey	WITHOUT_CLASSIFICATION	0.9992271661265814	WITHOUT_CLASSIFICATION	7.728338734187255E-4	DESIGN
snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9998779714676429	WITHOUT_CLASSIFICATION	1.2202853235704574E-4	DESIGN
identity map of array holder arrayholder instances by the array instance	WITHOUT_CLASSIFICATION	0.9999873834758067	WITHOUT_CLASSIFICATION	1.2616524193207901E-5	DESIGN
collection wrappers by the collectionkey key=collectionkey value=persistentcollection	WITHOUT_CLASSIFICATION	0.9998250657041555	WITHOUT_CLASSIFICATION	1.74934295844513E-4	DESIGN
set of entitykeys of deleted objects	WITHOUT_CLASSIFICATION	0.9996741022305521	WITHOUT_CLASSIFICATION	3.2589776944792076E-4	DESIGN
properties that we have tried to load and not found in the database	WITHOUT_CLASSIFICATION	0.9994256112624812	WITHOUT_CLASSIFICATION	5.743887375189114E-4	DESIGN
a list of collection wrappers that were instantiating during result set processing that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999300759768602	WITHOUT_CLASSIFICATION	6.992402313976792E-5	DESIGN
a container for collections we load up when the owning entity is not yet loaded for now this is purely transient!	WITHOUT_CLASSIFICATION	0.9886516697550983	WITHOUT_CLASSIFICATION	0.011348330244901714	DESIGN
downgrade locks	WITHOUT_CLASSIFICATION	0.9996183478047208	WITHOUT_CLASSIFICATION	3.816521952791826E-4	DESIGN
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9997455488190249	WITHOUT_CLASSIFICATION	2.544511809751296E-4	DESIGN
unwrap the object	WITHOUT_CLASSIFICATION	0.999859614221157	WITHOUT_CLASSIFICATION	1.4038577884292904E-4	DESIGN
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999529912081463	WITHOUT_CLASSIFICATION	4.700879185373177E-5	DESIGN
return the proxied object	WITHOUT_CLASSIFICATION	0.9992489210105927	WITHOUT_CLASSIFICATION	7.51078989407303E-4	DESIGN
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999943975579837	WITHOUT_CLASSIFICATION	5.602442016323752E-6	DESIGN
early exit	WITHOUT_CLASSIFICATION	0.9999432874518815	WITHOUT_CLASSIFICATION	5.671254811838867E-5	DESIGN
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9980346953156298	WITHOUT_CLASSIFICATION	0.001965304684370104	DESIGN
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9828701362273231	WITHOUT_CLASSIFICATION	0.017129863772676834	DESIGN
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.7365424897217968	DESIGN	0.2634575102782032	WITHOUT_CLASSIFICATION
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.999953539974838	WITHOUT_CLASSIFICATION	4.646002516203227E-5	DESIGN
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9976338520537792	WITHOUT_CLASSIFICATION	0.0023661479462208966	DESIGN
public boolean isnonexistant(entitykey key) {return nonexistantentitykeys.contains(key)}	WITHOUT_CLASSIFICATION	0.9993121591814178	WITHOUT_CLASSIFICATION	6.878408185822291E-4	DESIGN
public boolean isnonexistant(entityuniquekey key) {return nonexistententityuniquekeys.contains(key)}	WITHOUT_CLASSIFICATION	0.9993121591814178	WITHOUT_CLASSIFICATION	6.878408185822291E-4	DESIGN
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9987086013302765	WITHOUT_CLASSIFICATION	0.0012913986697235351	DESIGN
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9952037185517114	WITHOUT_CLASSIFICATION	0.004796281448288641	DESIGN
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9943996105776104	WITHOUT_CLASSIFICATION	0.005600389422389569	DESIGN
otherwise the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999952974376818	WITHOUT_CLASSIFICATION	4.702562318278859E-6	DESIGN
adds remove as a sort-of alias for delete	WITHOUT_CLASSIFICATION	0.9999198185415183	WITHOUT_CLASSIFICATION	8.01814584816542E-5	DESIGN
bad cast	WITHOUT_CLASSIFICATION	0.9990488829651837	WITHOUT_CLASSIFICATION	9.51117034816217E-4	DESIGN
return lhspersister.getsubclasspropertycolumnnames(property)	WITHOUT_CLASSIFICATION	0.999478554642549	WITHOUT_CLASSIFICATION	5.214453574510628E-4	DESIGN
property-refs for associations defined on a component are not supported so no need to slice	WITHOUT_CLASSIFICATION	0.9981612871270407	WITHOUT_CLASSIFICATION	0.0018387128729594178	DESIGN
if there is no property-ref assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999904407646921	WITHOUT_CLASSIFICATION	9.559235307763616E-6	DESIGN
handle a property-ref	WITHOUT_CLASSIFICATION	0.995376341987122	WITHOUT_CLASSIFICATION	0.004623658012878028	DESIGN
nativesqlqueryreturn	WITHOUT_CLASSIFICATION	0.9996068946777141	WITHOUT_CLASSIFICATION	3.931053222858822E-4	DESIGN
final boolean forcecacherefresh	WITHOUT_CLASSIFICATION	0.9999284872284753	WITHOUT_CLASSIFICATION	7.151277152473467E-5	DESIGN
why is all others non final ?	WITHOUT_CLASSIFICATION	0.734494751123799	WITHOUT_CLASSIFICATION	0.26550524887620097	DESIGN
this.forcecacherefresh = forcecacherefresh	WITHOUT_CLASSIFICATION	0.9998987446571149	WITHOUT_CLASSIFICATION	1.0125534288497884E-4	DESIGN
hella important optimization!!!	WITHOUT_CLASSIFICATION	0.9989257965380071	WITHOUT_CLASSIFICATION	0.001074203461992986	DESIGN
return that.type.equals(type) && equalshelper.equals(that.value value)	WITHOUT_CLASSIFICATION	0.9990176733991617	WITHOUT_CLASSIFICATION	9.823266008383176E-4	DESIGN
must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9995612218851324	WITHOUT_CLASSIFICATION	4.387781148675544E-4	DESIGN
take a snapshot	WITHOUT_CLASSIFICATION	0.9990949087134434	WITHOUT_CLASSIFICATION	9.05091286556645E-4	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9979117745790067	WITHOUT_CLASSIFICATION	0.00208822542099326	DESIGN
the owning entity may have been deleted and its identifier unset due to identifier-rollback in which case try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9997080910983844	WITHOUT_CLASSIFICATION	2.9190890161555984E-4	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9991807274979121	WITHOUT_CLASSIFICATION	8.192725020878131E-4	DESIGN
we've been here before	WITHOUT_CLASSIFICATION	0.9993196139613357	WITHOUT_CLASSIFICATION	6.803860386642699E-4	DESIGN
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.999984171241491	WITHOUT_CLASSIFICATION	1.582875850904961E-5	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9991807274979121	WITHOUT_CLASSIFICATION	8.192725020878131E-4	DESIGN
if either its role changed	WITHOUT_CLASSIFICATION	0.9999692911044665	WITHOUT_CLASSIFICATION	3.0708895533567195E-5	DESIGN
or its key changed	WITHOUT_CLASSIFICATION	0.9999940406778908	WITHOUT_CLASSIFICATION	5.959322109261648E-6	DESIGN
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9997658160419212	WITHOUT_CLASSIFICATION	2.3418395807897217E-4	DESIGN
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9980812854922615	WITHOUT_CLASSIFICATION	0.0019187145077385489	DESIGN
force initialize!	WITHOUT_CLASSIFICATION	0.9997808245788603	WITHOUT_CLASSIFICATION	2.191754211397139E-4	DESIGN
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999965620654928	WITHOUT_CLASSIFICATION	3.4379345071379593E-6	DESIGN
attributes maintained between flush cycles	WITHOUT_CLASSIFICATION	0.9983313665583999	WITHOUT_CLASSIFICATION	0.0016686334415999824	DESIGN
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999244567844364	WITHOUT_CLASSIFICATION	7.554321556361953E-5	DESIGN
allow the collectionsnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9984438638251735	WITHOUT_CLASSIFICATION	0.0015561361748264706	DESIGN
attributes used only during flush cycle	WITHOUT_CLASSIFICATION	0.9739265584541008	WITHOUT_CLASSIFICATION	0.026073441545899176	DESIGN
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999714200875025	WITHOUT_CLASSIFICATION	2.8579912497549603E-5	DESIGN
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999119619785296	WITHOUT_CLASSIFICATION	8.803802147041075E-5	DESIGN
during flush we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9663262653845678	WITHOUT_CLASSIFICATION	0.033673734615432264	DESIGN
if we instantiate a collection during the flush() process we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999856648692862	WITHOUT_CLASSIFICATION	1.4335130713785586E-5	DESIGN
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9922097779180268	WITHOUT_CLASSIFICATION	0.00779022208197323	DESIGN
a newly wrapped collection is not dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.8281616239557456	WITHOUT_CLASSIFICATION	0.1718383760442545	DESIGN
collection.cleardirty()	WITHOUT_CLASSIFICATION	0.9992182916705639	WITHOUT_CLASSIFICATION	7.817083294360349E-4	DESIGN
collection.cleardirty()	WITHOUT_CLASSIFICATION	0.9992182916705639	WITHOUT_CLASSIFICATION	7.817083294360349E-4	DESIGN
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.99969309280236	WITHOUT_CLASSIFICATION	3.069071976399991E-4	DESIGN
optimization	WITHOUT_CLASSIFICATION	0.9999055307208723	WITHOUT_CLASSIFICATION	9.446927912774272E-5	DESIGN
optimization optimization	WITHOUT_CLASSIFICATION	0.9998120879211821	WITHOUT_CLASSIFICATION	1.8791207881788626E-4	DESIGN
re-snapshot	WITHOUT_CLASSIFICATION	0.9996068946777141	WITHOUT_CLASSIFICATION	3.931053222858822E-4	DESIGN
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9997282829922381	WITHOUT_CLASSIFICATION	2.717170077618464E-4	DESIGN
note this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9896016670908859	WITHOUT_CLASSIFICATION	0.010398332909114094	DESIGN
memory optimization	WITHOUT_CLASSIFICATION	0.9999567194107385	WITHOUT_CLASSIFICATION	4.3280589261550435E-5	DESIGN
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999352297328068	WITHOUT_CLASSIFICATION	6.477026719324824E-5	DESIGN
copied from session	WITHOUT_CLASSIFICATION	0.9976419530604755	WITHOUT_CLASSIFICATION	0.002358046939524384	DESIGN
this should not happen since the dtd prevents it	WITHOUT_CLASSIFICATION	0.9993288041148308	WITHOUT_CLASSIFICATION	6.711958851692393E-4	DESIGN
joinprocessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the sql ast. 'hasfiltercondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999378588114598	WITHOUT_CLASSIFICATION	6.214118854019492E-5	DESIGN
the current join represents the join between a many-to-many association table and its "target" table. here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999366166240922	WITHOUT_CLASSIFICATION	6.338337590779162E-5	DESIGN
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9993187922109724	WITHOUT_CLASSIFICATION	6.812077890275906E-4	DESIGN
values is not null and is checkable we'll look deeper	WITHOUT_CLASSIFICATION	0.999356137920301	WITHOUT_CLASSIFICATION	6.438620796989267E-4	DESIGN
for non null args check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9998539120744458	WITHOUT_CLASSIFICATION	1.460879255541042E-4	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9996405402664161	WITHOUT_CLASSIFICATION	3.59459733583903E-4	DESIGN
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9997605915159259	WITHOUT_CLASSIFICATION	2.3940848407403979E-4	DESIGN
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9997770978608105	WITHOUT_CLASSIFICATION	2.229021391894441E-4	DESIGN
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9997053331145966	WITHOUT_CLASSIFICATION	2.946668854034187E-4	DESIGN
do the test	WITHOUT_CLASSIFICATION	0.9999911419056537	WITHOUT_CLASSIFICATION	8.858094346211281E-6	DESIGN
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.999948936345791	WITHOUT_CLASSIFICATION	5.1063654209098057E-5	DESIGN
unwrap it	WITHOUT_CLASSIFICATION	0.9998644461760855	WITHOUT_CLASSIFICATION	1.355538239144915E-4	DESIGN
see if the entity is already bound to this session if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.8868711590898883	WITHOUT_CLASSIFICATION	0.11312884091011167	DESIGN
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999483400515877	WITHOUT_CLASSIFICATION	5.1659948412281884E-5	DESIGN
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9991657282600691	WITHOUT_CLASSIFICATION	8.342717399308036E-4	DESIGN
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9977741521694244	WITHOUT_CLASSIFICATION	0.002225847830575428	DESIGN
we use the assumed value if there is one to avoid hitting the database	WITHOUT_CLASSIFICATION	0.999900664520866	WITHOUT_CLASSIFICATION	9.933547913393031E-5	DESIGN
hit the database after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.6336280733086356	DESIGN	0.3663719266913644	WITHOUT_CLASSIFICATION
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context so make some deeper checks	WITHOUT_CLASSIFICATION	0.9971610542921654	WITHOUT_CLASSIFICATION	0.002838945707834658	DESIGN
int count = 0	WITHOUT_CLASSIFICATION	0.999993697480861	WITHOUT_CLASSIFICATION	6.302519138962377E-6	DESIGN
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999818800518735	WITHOUT_CLASSIFICATION	1.8119948126445292E-5	DESIGN
checkforend = false	WITHOUT_CLASSIFICATION	0.9999779345688912	WITHOUT_CLASSIFICATION	2.206543110883735E-5	DESIGN
count++	WITHOUT_CLASSIFICATION	0.9997513558113361	WITHOUT_CLASSIFICATION	2.486441886638397E-4	DESIGN
end of array start filling again from start	WITHOUT_CLASSIFICATION	0.9999511255012973	WITHOUT_CLASSIFICATION	4.8874498702763926E-5	DESIGN
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9991514083207745	WITHOUT_CLASSIFICATION	8.485916792255822E-4	DESIGN
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999725084855282	WITHOUT_CLASSIFICATION	2.7491514471855483E-5	DESIGN
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999709334615502	WITHOUT_CLASSIFICATION	2.906653844977339E-5	DESIGN
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9996366855395467	WITHOUT_CLASSIFICATION	3.633144604532612E-4	DESIGN
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9998758243349931	WITHOUT_CLASSIFICATION	1.2417566500697464E-4	DESIGN
ignore this row of results! note the early exit	WITHOUT_CLASSIFICATION	0.999917535706034	WITHOUT_CLASSIFICATION	8.246429396598059E-5	DESIGN
initialize this collection	WITHOUT_CLASSIFICATION	0.9929549593947742	WITHOUT_CLASSIFICATION	0.0070450406052258415	DESIGN
create one	WITHOUT_CLASSIFICATION	0.9997516050665824	WITHOUT_CLASSIFICATION	2.4839493341755395E-4	DESIGN
warning can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9992125276769142	WITHOUT_CLASSIFICATION	7.874723230858753E-4	DESIGN
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9998077514218752	WITHOUT_CLASSIFICATION	1.9224857812475988E-4	DESIGN
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9959890544951897	WITHOUT_CLASSIFICATION	0.004010945504810339	DESIGN
some filters affecting the collection are enabled on the session so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.996164950812724	WITHOUT_CLASSIFICATION	0.0038350491872759106	DESIGN
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9896748502376486	WITHOUT_CLASSIFICATION	0.01032514976235148	DESIGN
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99991700509033	WITHOUT_CLASSIFICATION	8.299490967003568E-5	DESIGN
collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994281744734718	WITHOUT_CLASSIFICATION	5.718255265281761E-4	DESIGN
simple cache of param metadata based on query string. ideally the original "user-supplied query" string should be used to retreive this metadata (i.e. not the para-list-expanded query string) to avoid unnecessary cache entries. used solely for caching param metadata for native-sql queries see getsqlparametermetadata() for a discussion as to why	WITHOUT_CLASSIFICATION	0.862698948734017	WITHOUT_CLASSIFICATION	0.13730105126598297	DESIGN
the cache of the actual plans	WITHOUT_CLASSIFICATION	0.9996818481979399	WITHOUT_CLASSIFICATION	3.181518020601135E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9990930432808648	WITHOUT_CLASSIFICATION	9.069567191352288E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9990930432808648	WITHOUT_CLASSIFICATION	9.069567191352288E-4	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999912836058009	WITHOUT_CLASSIFICATION	8.716394199140941E-6	DESIGN
for native-sql queries the param metadata is determined outside any relation to a query plan because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9538483166047634	WITHOUT_CLASSIFICATION	0.04615168339523651	DESIGN
don't care	WITHOUT_CLASSIFICATION	0.9992105240277617	WITHOUT_CLASSIFICATION	7.894759722383855E-4	DESIGN
recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989266046351865	WITHOUT_CLASSIFICATION	0.0010733953648135448	DESIGN
don't care	WITHOUT_CLASSIFICATION	0.9992105240277617	WITHOUT_CLASSIFICATION	7.894759722383855E-4	DESIGN
note firstrow is zero-based	WITHOUT_CLASSIFICATION	0.9966778623765506	WITHOUT_CLASSIFICATION	0.003322137623449493	DESIGN
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9971188140124437	WITHOUT_CLASSIFICATION	0.002881185987556193	DESIGN
named parameter	WITHOUT_CLASSIFICATION	0.9993299146757976	WITHOUT_CLASSIFICATION	6.70085324202482E-4	DESIGN
could be either an ordinal or jpa-positional parameter	WITHOUT_CLASSIFICATION	0.9938266477235771	WITHOUT_CLASSIFICATION	0.0061733522764229045	DESIGN
a peek ahead showed this as an jpa-positional parameter	WITHOUT_CLASSIFICATION	0.9983229547175845	WITHOUT_CLASSIFICATION	0.0016770452824155172	DESIGN
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9992557494587025	WITHOUT_CLASSIFICATION	7.442505412974436E-4	DESIGN
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.999570924675038	WITHOUT_CLASSIFICATION	4.290753249620187E-4	DESIGN
perform the actual work	WITHOUT_CLASSIFICATION	0.9989290463769187	WITHOUT_CLASSIFICATION	0.0010709536230813384	DESIGN
if everything went ok commit the transaction and close the obtained connection handle	WITHOUT_CLASSIFICATION	0.9999988069532797	WITHOUT_CLASSIFICATION	1.193046720365225E-6	DESIGN
at some point the processing went bad so we need to 1) make sure the connection handle gets released 2) try to cleanup the jta context as much as possible	WITHOUT_CLASSIFICATION	0.9714141852320769	WITHOUT_CLASSIFICATION	0.028585814767923157	DESIGN
finally handle the exception	WITHOUT_CLASSIFICATION	0.9993195325241431	WITHOUT_CLASSIFICATION	6.804674758570168E-4	DESIGN
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9904325130954389	WITHOUT_CLASSIFICATION	0.009567486904561162	DESIGN
saveorupdatecopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9996218393608111	WITHOUT_CLASSIFICATION	3.7816063918888834E-4	DESIGN
collectionpersister should not be null but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9137905833898929	WITHOUT_CLASSIFICATION	0.08620941661010703	DESIGN
otherwise a null or brand new collection this will also (inefficiently) handle arrays which have no snapshot so we can't do any better processarrayornewcollection(collection type)	WITHOUT_CLASSIFICATION	0.9909680504512871	WITHOUT_CLASSIFICATION	0.009031949548712857	DESIGN
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9965642011848296	WITHOUT_CLASSIFICATION	0.003435798815170368	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9998583814615153	WITHOUT_CLASSIFICATION	1.4161853848462604E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9998583814615153	WITHOUT_CLASSIFICATION	1.4161853848462604E-4	DESIGN
force a substitution!	WITHOUT_CLASSIFICATION	0.9990270169963672	WITHOUT_CLASSIFICATION	9.729830036329119E-4	DESIGN
the user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9988555710901499	WITHOUT_CLASSIFICATION	0.0011444289098501508	DESIGN
the database now holds a lock + the object is flushed from the cache so release the soft lock	WITHOUT_CLASSIFICATION	0.9991072846601888	WITHOUT_CLASSIFICATION	8.927153398111963E-4	DESIGN
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999892354635894	WITHOUT_CLASSIFICATION	1.0764536410513656E-5	DESIGN
search for collections by reachability updating their role. we don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.999545352693043	WITHOUT_CLASSIFICATION	4.546473069568901E-4	DESIGN
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9990385409389824	WITHOUT_CLASSIFICATION	9.614590610174915E-4	DESIGN
note we need to do the wrap here even if its not "dirty" because collections need wrapping but changes to _them_ don't dirty the container. also for versioned data we need to wrap before calling searchfordirtycollections	WITHOUT_CLASSIFICATION	0.996361882553398	WITHOUT_CLASSIFICATION	0.003638117446602036	DESIGN
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9997341547196921	WITHOUT_CLASSIFICATION	2.6584528030791036E-4	DESIGN
grab its current state	WITHOUT_CLASSIFICATION	0.9999588889860161	WITHOUT_CLASSIFICATION	4.1111013983837695E-5	DESIGN
schedule the update note that we intentionally do _not_ pass in currentpersistentstate!	WITHOUT_CLASSIFICATION	0.9998409140810958	WITHOUT_CLASSIFICATION	1.5908591890430765E-4	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9998817628874037	WITHOUT_CLASSIFICATION	1.1823711259619014E-4	DESIGN
give the interceptor a chance to process property values if the properties were modified by the interceptor we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999978973662115	WITHOUT_CLASSIFICATION	2.102633788614151E-6	DESIGN
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999829093890245	WITHOUT_CLASSIFICATION	1.709061097555485E-5	DESIGN
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999252651880937	WITHOUT_CLASSIFICATION	7.473481190635212E-5	DESIGN
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.999707835029866	WITHOUT_CLASSIFICATION	2.92164970133932E-4	DESIGN
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9953019954802159	WITHOUT_CLASSIFICATION	0.004698004519784085	DESIGN
give the interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9998811292402481	WITHOUT_CLASSIFICATION	1.1887075975195675E-4	DESIGN
now we might need to recalculate the dirtyproperties array	WITHOUT_CLASSIFICATION	0.9974943671455906	WITHOUT_CLASSIFICATION	0.0025056328544093703	DESIGN
use the current version	WITHOUT_CLASSIFICATION	0.9978898417952117	WITHOUT_CLASSIFICATION	0.002110158204788353	DESIGN
interceptor returned null so do the dirtycheck ourself if possible	WITHOUT_CLASSIFICATION	0.9999517428588	WITHOUT_CLASSIFICATION	4.8257141200041685E-5	DESIGN
object loaded by update()	WITHOUT_CLASSIFICATION	0.9998203847963731	WITHOUT_CLASSIFICATION	1.7961520362681283E-4	DESIGN
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999782682658335	WITHOUT_CLASSIFICATION	2.1731734166506484E-5	DESIGN
dirty check against the database snapshot if possible/necessary	WITHOUT_CLASSIFICATION	0.9999900069675282	WITHOUT_CLASSIFICATION	9.993032471844115E-6	DESIGN
the interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.8780513471490161	WITHOUT_CLASSIFICATION	0.12194865285098394	DESIGN
even process null collections	WITHOUT_CLASSIFICATION	0.9996749833884407	WITHOUT_CLASSIFICATION	3.250166115592151E-4	DESIGN
get the id from the object	WITHOUT_CLASSIFICATION	0.9993964310744801	WITHOUT_CLASSIFICATION	6.035689255198985E-4	DESIGN
always do an insert and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9997863094693547	WITHOUT_CLASSIFICATION	2.1369053064535483E-4	DESIGN
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9949007397700526	WITHOUT_CLASSIFICATION	0.0050992602299474	DESIGN
/ hhh-2378	WITHOUT_CLASSIFICATION	0.999902946220599	WITHOUT_CLASSIFICATION	9.705377940090824E-5	DESIGN
will result in a sql update	WITHOUT_CLASSIFICATION	0.9999415125215626	WITHOUT_CLASSIFICATION	5.8487478437320067E-5	DESIGN
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9998675123117976	WITHOUT_CLASSIFICATION	1.3248768820232876E-4	DESIGN
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9998298436380336	WITHOUT_CLASSIFICATION	1.7015636196626808E-4	DESIGN
refresh() does not pass an entityname	WITHOUT_CLASSIFICATION	0.9998604244700119	WITHOUT_CLASSIFICATION	1.395755299880596E-4	DESIGN
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9984455221842935	WITHOUT_CLASSIFICATION	0.001554477815706522	DESIGN
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9979591962871704	WITHOUT_CLASSIFICATION	0.0020408037128294802	DESIGN
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9994861123282858	WITHOUT_CLASSIFICATION	5.138876717143326E-4	DESIGN
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9998262541941931	WITHOUT_CLASSIFICATION	1.7374580580686044E-4	DESIGN
this object was already loaded	WITHOUT_CLASSIFICATION	0.993911404053164	WITHOUT_CLASSIFICATION	0.0060885959468360345	DESIGN
entity was found in second-level cache	WITHOUT_CLASSIFICATION	0.9990886623252587	WITHOUT_CLASSIFICATION	9.113376747411961E-4	DESIGN
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9996305080377706	WITHOUT_CLASSIFICATION	3.6949196222930633E-4	DESIGN
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999750112085695	WITHOUT_CLASSIFICATION	2.4988791430454936E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994456517578062	WITHOUT_CLASSIFICATION	5.543482421937466E-4	DESIGN
some statistics	WITHOUT_CLASSIFICATION	0.9992894448003334	WITHOUT_CLASSIFICATION	7.105551996665609E-4	DESIGN
safe from concurrent modification because of how entrylist() is implemented on identitymap	WITHOUT_CLASSIFICATION	0.9994120448521948	WITHOUT_CLASSIFICATION	5.879551478051293E-4	DESIGN
initialize dirty flags for arrays + collections with composite elements and reset reached doupdate etc.	WITHOUT_CLASSIFICATION	0.999989369171123	WITHOUT_CLASSIFICATION	1.0630828877024014E-5	DESIGN
among other things updatereachables() will recursively load all collections that are moving roles. this might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9935177605959499	WITHOUT_CLASSIFICATION	0.006482239404050197	DESIGN
so this needs to be safe from concurrent modification problems. it is safe because of how identitymap implements entryset()	WITHOUT_CLASSIFICATION	0.9679708101567138	WITHOUT_CLASSIFICATION	0.03202918984328624	DESIGN
update the status of the object and if necessary schedule an update	WITHOUT_CLASSIFICATION	0.9996745565080581	WITHOUT_CLASSIFICATION	3.2544349194182844E-4	DESIGN
schedule updates to collections	WITHOUT_CLASSIFICATION	0.9997905692400656	WITHOUT_CLASSIFICATION	2.0943075993432882E-4	DESIGN
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.998346991888	WITHOUT_CLASSIFICATION	0.001653008111999922	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994456517578062	WITHOUT_CLASSIFICATION	5.543482421937466E-4	DESIGN
the database has changed now so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9998893169855921	WITHOUT_CLASSIFICATION	1.1068301440789245E-4	DESIGN
if the collection is dereferenced remove from the session cache iter.remove() does not work since the entryset is not backed by the set	WITHOUT_CLASSIFICATION	0.9969584369408677	WITHOUT_CLASSIFICATION	0.0030415630591323056	DESIGN
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9998123391733652	WITHOUT_CLASSIFICATION	1.8766082663491758E-4	DESIGN
get a snapshot	WITHOUT_CLASSIFICATION	0.9993795323301836	WITHOUT_CLASSIFICATION	6.204676698164379E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9996854356540394	WITHOUT_CLASSIFICATION	3.145643459604935E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9996854356540394	WITHOUT_CLASSIFICATION	3.145643459604935E-4	DESIGN
key is an entity involved with the operation performed by the listener value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999993369342102	WITHOUT_CLASSIFICATION	6.630657898173483E-7	DESIGN
early exit!!!	WITHOUT_CLASSIFICATION	0.9997812213208523	WITHOUT_CLASSIFICATION	2.1877867914760912E-4	DESIGN
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9994470612807875	WITHOUT_CLASSIFICATION	5.52938719212489E-4	DESIGN
before any callbacks etc so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9998302038500541	WITHOUT_CLASSIFICATION	1.6979614994604443E-4	DESIGN
ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999607584337712	WITHOUT_CLASSIFICATION	3.924156622877188E-5	DESIGN
typefactory.deepcopy( currentstate proptypes persister.getpropertyupdateability() deletedstate session )	WITHOUT_CLASSIFICATION	0.9994778651224764	WITHOUT_CLASSIFICATION	5.221348775235588E-4	DESIGN
cascade-delete to collections before the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999780448149396	WITHOUT_CLASSIFICATION	2.195518506034554E-5	DESIGN
cascade-delete to many-to-one after the parent was deleted	WITHOUT_CLASSIFICATION	0.9996933212625017	WITHOUT_CLASSIFICATION	3.066787374983466E-4	DESIGN
if it is an initialized proxy let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9917506892819851	WITHOUT_CLASSIFICATION	0.00824931071801491	DESIGN
assign the requested id to the proxy before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999843270417643	WITHOUT_CLASSIFICATION	1.56729582356082E-5	DESIGN
an uninitialized proxy noop don't even need to return an id since it is never a save()	WITHOUT_CLASSIFICATION	0.9999605187981361	WITHOUT_CLASSIFICATION	3.9481201863891336E-5	DESIGN
initialize properties of the event	WITHOUT_CLASSIFICATION	0.9999460438051614	WITHOUT_CLASSIFICATION	5.395619483855124E-5	DESIGN
return the id in the event object	WITHOUT_CLASSIFICATION	0.9995582774997155	WITHOUT_CLASSIFICATION	4.417225002845687E-4	DESIGN
transient or deleted	WITHOUT_CLASSIFICATION	0.999790325757355	WITHOUT_CLASSIFICATION	2.0967424264486278E-4	DESIGN
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9995397188615487	WITHOUT_CLASSIFICATION	4.6028113845131963E-4	DESIGN
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.6260128764158627	WITHOUT_CLASSIFICATION	0.3739871235841375	DESIGN
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.994145100279195	WITHOUT_CLASSIFICATION	0.0058548997208048995	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9995205038745207	WITHOUT_CLASSIFICATION	4.79496125479241E-4	DESIGN
cachedstate	WITHOUT_CLASSIFICATION	0.9996068946777141	WITHOUT_CLASSIFICATION	3.931053222858822E-4	DESIGN
assume true since we don't really know and it doesn't matter	WITHOUT_CLASSIFICATION	0.9994475018915058	WITHOUT_CLASSIFICATION	5.524981084942512E-4	DESIGN
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9982559354449378	WITHOUT_CLASSIFICATION	0.001744064555062098	DESIGN
if the collection belonged to a different entity clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9960923732705483	WITHOUT_CLASSIFICATION	0.003907626729451718	DESIGN
log.debug( "calling onload()" )	WITHOUT_CLASSIFICATION	0.9995634240702479	WITHOUT_CLASSIFICATION	4.3657592975215767E-4	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9997960099380166	WITHOUT_CLASSIFICATION	2.0399006198337514E-4	DESIGN
note performexecutions() clears all collectionxxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9976767986438184	WITHOUT_CLASSIFICATION	0.0023232013561816367	DESIGN
if no array holder we found an unwrappered array (this can't occur because we now always call wrap() before getting to here) return (ah==null) ? true searchfordirtycollections(ah type)	WITHOUT_CLASSIFICATION	0.9999982435801412	WITHOUT_CLASSIFICATION	1.7564198586820547E-6	DESIGN
if not wrappered yet its dirty (this can't occur because we now always call wrap() before getting to here) return ( ! (obj instanceof persistentcollection) ) ? true searchfordirtycollections( (persistentcollection) obj type )	WITHOUT_CLASSIFICATION	0.9998909860394245	WITHOUT_CLASSIFICATION	1.0901396057552388E-4	DESIGN
we need to check even if it was not initialized because of delayed adds!	WITHOUT_CLASSIFICATION	0.9892813555053446	WITHOUT_CLASSIFICATION	0.0107186444946553	DESIGN
note early exit!	WITHOUT_CLASSIFICATION	0.9990980771440015	WITHOUT_CLASSIFICATION	9.01922855998544E-4	DESIGN
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9993346032054621	WITHOUT_CLASSIFICATION	6.653967945380273E-4	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9997960099380166	WITHOUT_CLASSIFICATION	2.0399006198337514E-4	DESIGN
check the persistence context for an entry relating to this entity to be merged	WITHOUT_CLASSIFICATION	0.9787268116606164	WITHOUT_CLASSIFICATION	0.021273188339383704	DESIGN
we have specialized case of a detached entity from the perspective of the merge operation. specifically we have an incoming entity instance which has a corresponding entry in the current persistence context but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999542806623286	WITHOUT_CLASSIFICATION	4.571933767135359E-5	DESIGN
deleted	WITHOUT_CLASSIFICATION	0.9998891974820258	WITHOUT_CLASSIFICATION	1.1080251797420757E-4	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9997438498304769	WITHOUT_CLASSIFICATION	2.561501695231432E-4	DESIGN
cascade first so that all unsaved objects get their copy created before we actually copy cascadeonmerge(event persister entity copycache cascades.cascade_before_merge)	WITHOUT_CLASSIFICATION	0.9999340489962771	WITHOUT_CLASSIFICATION	6.595100372278547E-5	DESIGN
this bit is only really absolutely necessary for handling requestedid but is also good if we merge multiple object graphs since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9399969544314837	WITHOUT_CLASSIFICATION	0.06000304556851625	DESIGN
continue we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.992143300907238	WITHOUT_CLASSIFICATION	0.007856699092762045	DESIGN
cascade first so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999841826800817	WITHOUT_CLASSIFICATION	1.5817319918341487E-5	DESIGN
check that entity id = requestedid	WITHOUT_CLASSIFICATION	0.999637806179271	WITHOUT_CLASSIFICATION	3.621938207289681E-4	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9997438498304769	WITHOUT_CLASSIFICATION	2.561501695231432E-4	DESIGN
we got here because we assumed that an instance with an assigned id was detached when it was really persistent	WITHOUT_CLASSIFICATION	0.9999400937636538	WITHOUT_CLASSIFICATION	5.990623634627048E-5	DESIGN
cascade first so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999841826800817	WITHOUT_CLASSIFICATION	1.5817319918341487E-5	DESIGN
copyvalues works by reflection so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.999920395059104	WITHOUT_CLASSIFICATION	7.960494089597137E-5	DESIGN
early exit	WITHOUT_CLASSIFICATION	0.9999432874518815	WITHOUT_CLASSIFICATION	5.671254811838867E-5	DESIGN
source.getbatcher().executebatch() found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9995689536012593	WITHOUT_CLASSIFICATION	4.310463987407129E-4	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9998817628874037	WITHOUT_CLASSIFICATION	1.1823711259619014E-4	DESIGN
now done in entityidentityinsertaction persister.setidentifier( entity id source.getentitymode() )	WITHOUT_CLASSIFICATION	0.998995480117	WITHOUT_CLASSIFICATION	0.0010045198829999786	DESIGN
source.getpersistencecontext().removenonexist( new entitykey( id persister source.getentitymode() ) )	WITHOUT_CLASSIFICATION	0.9986877517851463	WITHOUT_CLASSIFICATION	0.0013122482148536813	DESIGN
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9963045723795406	WITHOUT_CLASSIFICATION	0.0036954276204593283	DESIGN
cascade-save to many-to-one before the parent is saved	WITHOUT_CLASSIFICATION	0.99725764749737	WITHOUT_CLASSIFICATION	0.002742352502630089	DESIGN
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999991850694874	WITHOUT_CLASSIFICATION	8.149305125015394E-7	DESIGN
the object is persistent	WITHOUT_CLASSIFICATION	0.9996425850675787	WITHOUT_CLASSIFICATION	3.574149324212562E-4	DESIGN
the entity is associated with the session so check its status	WITHOUT_CLASSIFICATION	0.999619518620952	WITHOUT_CLASSIFICATION	3.8048137904791735E-4	DESIGN
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999096550252954	WITHOUT_CLASSIFICATION	9.034497470458351E-5	DESIGN
ie. e.status==deleted	WITHOUT_CLASSIFICATION	0.9992182916705639	WITHOUT_CLASSIFICATION	7.817083294360349E-4	DESIGN
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9997758141504319	WITHOUT_CLASSIFICATION	2.2418584956805738E-4	DESIGN
note early exit!	WITHOUT_CLASSIFICATION	0.9990980771440015	WITHOUT_CLASSIFICATION	9.01922855998544E-4	DESIGN
private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9914106881762027	WITHOUT_CLASSIFICATION	0.008589311823797192	DESIGN
first try to find a matching constructor accepting a violatedconstraintnameextracter param	WITHOUT_CLASSIFICATION	0.9996048046156972	WITHOUT_CLASSIFICATION	3.95195384302763E-4	DESIGN
eat it and try next	WITHOUT_CLASSIFICATION	0.9914575800345748	WITHOUT_CLASSIFICATION	0.008542419965425152	DESIGN
otherwise try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.998890553983964	WITHOUT_CLASSIFICATION	0.001109446016036113	DESIGN
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9996703215434545	WITHOUT_CLASSIFICATION	3.2967845654560424E-4	DESIGN
collectionpropertymapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9950562471437348	WITHOUT_CLASSIFICATION	0.00494375285626519	DESIGN
remove initial " "	WITHOUT_CLASSIFICATION	0.9984580788212591	WITHOUT_CLASSIFICATION	0.0015419211787408014	DESIGN
remove initial " and "	WITHOUT_CLASSIFICATION	0.9964961684738558	WITHOUT_CLASSIFICATION	0.0035038315261442486	DESIGN
beforeclasstokens.add("new") definitely don't have this!!	WITHOUT_CLASSIFICATION	0.9997356559595425	WITHOUT_CLASSIFICATION	2.6434404045749197E-4	DESIGN
notafterclasstokens.add("")	WITHOUT_CLASSIFICATION	0.9992182916705639	WITHOUT_CLASSIFICATION	7.817083294360349E-4	DESIGN
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9996826164489709	WITHOUT_CLASSIFICATION	3.1738355102904934E-4	DESIGN
update last non-whitespace token if necessary	WITHOUT_CLASSIFICATION	0.999894510738752	WITHOUT_CLASSIFICATION	1.0548926124802051E-4	DESIGN
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9987781153007431	WITHOUT_CLASSIFICATION	0.001221884699256914	DESIGN
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9995479905873571	WITHOUT_CLASSIFICATION	4.5200941264281804E-4	DESIGN
note this!!	WITHOUT_CLASSIFICATION	0.9982840086830288	WITHOUT_CLASSIFICATION	0.0017159913169711792	DESIGN
error message constants.	WITHOUT_CLASSIFICATION	0.9984330455831805	WITHOUT_CLASSIFICATION	0.0015669544168194463	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992326054467152	WITHOUT_CLASSIFICATION	7.673945532848034E-4	DESIGN
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992196393396318	WITHOUT_CLASSIFICATION	7.803606603683432E-4	DESIGN
handle collection-fiter compilation. important note this is modifying the input (hql) tree not the output tree!	WITHOUT_CLASSIFICATION	0.7945024646338732	WITHOUT_CLASSIFICATION	0.2054975353661268	DESIGN
show the modified ast.	WITHOUT_CLASSIFICATION	0.9999593595447889	WITHOUT_CLASSIFICATION	4.064045521110967E-5	DESIGN
create a parameter specification for the collection filter	WITHOUT_CLASSIFICATION	0.9995741884160119	WITHOUT_CLASSIFICATION	4.258115839880527E-4	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9993542051769105	WITHOUT_CLASSIFICATION	6.457948230894941E-4	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9993542051769105	WITHOUT_CLASSIFICATION	6.457948230894941E-4	DESIGN
get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9992201142357947	WITHOUT_CLASSIFICATION	7.798857642052228E-4	DESIGN
the path ast should be a dotnode and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9979106058404834	WITHOUT_CLASSIFICATION	0.002089394159516499	DESIGN
tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999689489929653	WITHOUT_CLASSIFICATION	3.105100703463287E-5	DESIGN
re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999879168700416	WITHOUT_CLASSIFICATION	1.2083129958289069E-5	DESIGN
don't forget to resolve the argument! resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9997203050598517	WITHOUT_CLASSIFICATION	2.796949401482883E-4	DESIGN
resolve everything up to this dot but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9957542512323282	WITHOUT_CLASSIFICATION	0.004245748767671745	DESIGN
should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9962150893791741	WITHOUT_CLASSIFICATION	0.0037849106208257635	DESIGN
was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999676344023282	WITHOUT_CLASSIFICATION	3.236559767180258E-5	DESIGN
attach any mapping-defined "order by" fragments	WITHOUT_CLASSIFICATION	0.9994455062658699	WITHOUT_CLASSIFICATION	5.544937341301275E-4	DESIGN
use the explicitly declared select expression determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999479924676561	WITHOUT_CLASSIFICATION	5.200753234387298E-5	DESIGN
after that process the joins. invoke a delegate to do the work as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999754210899786	WITHOUT_CLASSIFICATION	2.457891002129629E-5	DESIGN
make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999943042912386	WITHOUT_CLASSIFICATION	5.695708761401279E-6	DESIGN
we need to generate ids as part of this bulk insert. note that this is only supported for sequence-style generators and post-insert-style generators basically only in-db generators	WITHOUT_CLASSIFICATION	0.8877798324662091	WITHOUT_CLASSIFICATION	0.11222016753379083	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9993542051769105	WITHOUT_CLASSIFICATION	6.457948230894941E-4	DESIGN
we need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9984541314652541	WITHOUT_CLASSIFICATION	0.0015458685347458346	DESIGN
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9977517138935879	WITHOUT_CLASSIFICATION	0.0022482861064122774	DESIGN
this is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9203692830394398	WITHOUT_CLASSIFICATION	0.0796307169605602	DESIGN
generate implicit joins only if necessary.	WITHOUT_CLASSIFICATION	0.9982572616098365	WITHOUT_CLASSIFICATION	0.0017427383901635358	DESIGN
notify the from element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999340668773943	WITHOUT_CLASSIFICATION	6.593312260569532E-5	DESIGN
turn off includesubclasses on all fromelements.	WITHOUT_CLASSIFICATION	0.9963154213299021	WITHOUT_CLASSIFICATION	0.0036845786700978327	DESIGN
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9998291927889676	WITHOUT_CLASSIFICATION	1.7080721103240404E-4	DESIGN
use the delegate resolve identifiers as from element aliases.	WITHOUT_CLASSIFICATION	0.9987807351382815	WITHOUT_CLASSIFICATION	0.001219264861718422	DESIGN
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9997278371618956	WITHOUT_CLASSIFICATION	2.721628381044305E-4	DESIGN
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9987187627549339	WITHOUT_CLASSIFICATION	0.0012812372450660592	DESIGN
make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9993340547694565	WITHOUT_CLASSIFICATION	6.659452305435479E-4	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992326054467152	WITHOUT_CLASSIFICATION	7.673945532848034E-4	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9993542051769105	WITHOUT_CLASSIFICATION	6.457948230894941E-4	DESIGN
--commented out by inspection (12/11/04 1056 am) int getwarningcount()	WITHOUT_CLASSIFICATION	0.9999064307511486	WITHOUT_CLASSIFICATION	9.35692488514443E-5	DESIGN
alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9995569726604128	WITHOUT_CLASSIFICATION	4.430273395872867E-4	DESIGN
switch	WITHOUT_CLASSIFICATION	0.9998615106176177	WITHOUT_CLASSIFICATION	1.3848938238226964E-4	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9980374667165514	WITHOUT_CLASSIFICATION	0.0019625332834485713	DESIGN
just do the regular thing if you can't find the ctor your ast must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9998644309555744	WITHOUT_CLASSIFICATION	1.3556904442561552E-4	DESIGN
initialize sql nodes here.	WITHOUT_CLASSIFICATION	0.9995310498707831	WITHOUT_CLASSIFICATION	4.6895012921686327E-4	DESIGN
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996493182264089	WITHOUT_CLASSIFICATION	3.5068177359109205E-4	DESIGN
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999888491321018	WITHOUT_CLASSIFICATION	1.1150867898224667E-5	DESIGN
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999808817614874	WITHOUT_CLASSIFICATION	1.911823851265915E-5	DESIGN
--- inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9990613638321999	WITHOUT_CLASSIFICATION	9.38636167800115E-4	DESIGN
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9995257911909387	WITHOUT_CLASSIFICATION	4.7420880906132683E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.999902946220599	WITHOUT_CLASSIFICATION	9.705377940090824E-5	DESIGN
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9990316938871953	WITHOUT_CLASSIFICATION	9.683061128046809E-4	DESIGN
again both should be fromelements	WITHOUT_CLASSIFICATION	0.9939232878329954	WITHOUT_CLASSIFICATION	0.006076712167004531	DESIGN
note firstrow is zero-based	WITHOUT_CLASSIFICATION	0.9966778623765506	WITHOUT_CLASSIFICATION	0.003322137623449493	DESIGN
right represents a joins originating from left or both right and left reprersent joins originating from the same fromelement	WITHOUT_CLASSIFICATION	0.9999533825179032	WITHOUT_CLASSIFICATION	4.661748209673981E-5	DESIGN
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9976093799900683	WITHOUT_CLASSIFICATION	0.0023906200099317546	DESIGN
right represents a joins originating from left	WITHOUT_CLASSIFICATION	0.9999465537482771	WITHOUT_CLASSIFICATION	5.344625172285497E-5	DESIGN
all clear	WITHOUT_CLASSIFICATION	0.9998862842460009	WITHOUT_CLASSIFICATION	1.1371575399913386E-4	DESIGN
ignore the token class name parameter and use a specific token class.	WITHOUT_CLASSIFICATION	0.9979441756913664	WITHOUT_CLASSIFICATION	0.002055824308633535	DESIGN
overriden to avoid system.exit	WITHOUT_CLASSIFICATION	0.9992393670575909	WITHOUT_CLASSIFICATION	7.606329424090829E-4	DESIGN
overriden to avoid system.exit	WITHOUT_CLASSIFICATION	0.9992393670575909	WITHOUT_CLASSIFICATION	7.606329424090829E-4	DESIGN
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9960589311529301	WITHOUT_CLASSIFICATION	0.00394106884706985	DESIGN
don't care about other param types here just those explicitly user-defined	WITHOUT_CLASSIFICATION	0.9932781798475203	WITHOUT_CLASSIFICATION	0.006721820152479662	DESIGN
if the query is already compiled skip the compilation.	WITHOUT_CLASSIFICATION	0.9999516854068927	WITHOUT_CLASSIFICATION	4.831459310725899E-5	DESIGN
remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9994845142111921	WITHOUT_CLASSIFICATION	5.154857888078724E-4	DESIGN
phase 1 parse the hql into an ast.	WITHOUT_CLASSIFICATION	0.9996178858897592	WITHOUT_CLASSIFICATION	3.82114110240756E-4	DESIGN
phase 2 analyze the hql ast and produce an sql ast.	WITHOUT_CLASSIFICATION	0.9999987299949172	WITHOUT_CLASSIFICATION	1.2700050826686786E-6	DESIGN
phase 3 generate the sql.	WITHOUT_CLASSIFICATION	0.9992558720273609	WITHOUT_CLASSIFICATION	7.441279726391679E-4	DESIGN
we do not actually propogate antlrexceptions as a cause so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9998971773635796	WITHOUT_CLASSIFICATION	1.0282263642034661E-4	DESIGN
we do not actually propogate antlrexceptions as a cause so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9998971773635796	WITHOUT_CLASSIFICATION	1.0282263642034661E-4	DESIGN
only needed during compilation phase	WITHOUT_CLASSIFICATION	0.9999462903738966	WITHOUT_CLASSIFICATION	5.370962610337801E-5	DESIGN
transform the tree.	WITHOUT_CLASSIFICATION	0.9997647091406958	WITHOUT_CLASSIFICATION	2.3529085930428165E-4	DESIGN
parse the query string into an hql ast.	WITHOUT_CLASSIFICATION	0.9998384275011255	WITHOUT_CLASSIFICATION	1.615724988743941E-4	DESIGN
delegate to the queryloader	WITHOUT_CLASSIFICATION	0.9998381037904506	WITHOUT_CLASSIFICATION	1.6189620954935098E-4	DESIGN
delegate to the queryloader	WITHOUT_CLASSIFICATION	0.9998381037904506	WITHOUT_CLASSIFICATION	1.6189620954935098E-4	DESIGN
delegate to the queryloader	WITHOUT_CLASSIFICATION	0.9998381037904506	WITHOUT_CLASSIFICATION	1.6189620954935098E-4	DESIGN
note ( max - 1 ) because first is zero-based while max is not	WITHOUT_CLASSIFICATION	0.9998698032984815	WITHOUT_CLASSIFICATION	1.3019670151841943E-4	DESIGN
-- package local methods for the queryloader delegate --	WITHOUT_CLASSIFICATION	0.9938207734653046	WITHOUT_CLASSIFICATION	0.006179226534695363	DESIGN
if there are no collection fetches then no further checks are needed	WITHOUT_CLASSIFICATION	0.999960715295929	WITHOUT_CLASSIFICATION	3.92847040709842E-5	DESIGN
a shallow query is ok (although technically there should be no fetching here)	WITHOUT_CLASSIFICATION	0.9999677370764884	WITHOUT_CLASSIFICATION	3.226292351150924E-5	DESIGN
should be the first but just to be safe	WITHOUT_CLASSIFICATION	0.9996037403895288	WITHOUT_CLASSIFICATION	3.9625961047107624E-4	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9993542051769105	WITHOUT_CLASSIFICATION	6.457948230894941E-4	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9993542051769105	WITHOUT_CLASSIFICATION	6.457948230894941E-4	DESIGN
impl note allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9992856939405903	WITHOUT_CLASSIFICATION	7.143060594096457E-4	DESIGN
otherwise we have a non-scalar select with defined collection fetch(es). make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.999784999396186	WITHOUT_CLASSIFICATION	2.1500060381409082E-4	DESIGN
this is not strictly true. we actually just need to make sure that it is ordered by root-entity pk and that that order-by comes before any non-root-entity ordering	WITHOUT_CLASSIFICATION	0.5152049381795218	WITHOUT_CLASSIFICATION	0.48479506182047827	DESIGN
paramtranslations = new parametertranslationsimpl( collectedparameterspecifications )	WITHOUT_CLASSIFICATION	0.9998686449354143	WITHOUT_CLASSIFICATION	1.3135506458571272E-4	DESIGN
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9944976054883488	WITHOUT_CLASSIFICATION	0.0055023945116513175	DESIGN
igndore it	WITHOUT_CLASSIFICATION	0.9997082963974523	WITHOUT_CLASSIFICATION	2.9170360254778086E-4	DESIGN
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9778853363260659	WITHOUT_CLASSIFICATION	0.02211466367393411	DESIGN
[jsd] the fix for hhh-558	WITHOUT_CLASSIFICATION	0.9730173493629745	WITHOUT_CLASSIFICATION	0.02698265063702551	DESIGN
if the token can tell us if it could be an identifier	WITHOUT_CLASSIFICATION	0.9872721266120742	WITHOUT_CLASSIFICATION	0.012727873387925755	DESIGN
and the expected token type was an identifier then	WITHOUT_CLASSIFICATION	0.999915709803838	WITHOUT_CLASSIFICATION	8.429019616193375E-5	DESIGN
use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999714605309687	WITHOUT_CLASSIFICATION	2.853946903119367E-5	DESIGN
add the token to the ast.	WITHOUT_CLASSIFICATION	0.9998755933516512	WITHOUT_CLASSIFICATION	1.244066483487036E-4	DESIGN
(not (eq a b) ) => (ne a b)	WITHOUT_CLASSIFICATION	0.9657914902527437	WITHOUT_CLASSIFICATION	0.03420850974725631	DESIGN
(not (ne a b) ) => (eq a b)	WITHOUT_CLASSIFICATION	0.9657914902527437	WITHOUT_CLASSIFICATION	0.03420850974725631	DESIGN
(not (lt a b) ) => (ge a b)	WITHOUT_CLASSIFICATION	0.9657914902527437	WITHOUT_CLASSIFICATION	0.03420850974725631	DESIGN
(not (ge a b) ) => (lt a b)	WITHOUT_CLASSIFICATION	0.9657914902527437	WITHOUT_CLASSIFICATION	0.03420850974725631	DESIGN
(not (le a b) ) => (gt a b)	WITHOUT_CLASSIFICATION	0.9657914902527437	WITHOUT_CLASSIFICATION	0.03420850974725631	DESIGN
(not (like a b) ) => (not_like a b)	WITHOUT_CLASSIFICATION	0.9755328222216064	WITHOUT_CLASSIFICATION	0.024467177778393502	DESIGN
(not (not_like a b) ) => (like a b)	WITHOUT_CLASSIFICATION	0.9755328222216064	WITHOUT_CLASSIFICATION	0.024467177778393502	DESIGN
(not (is_not_null a b) ) => (is_null a b)	WITHOUT_CLASSIFICATION	0.9817678502195147	WITHOUT_CLASSIFICATION	0.018232149780485207	DESIGN
(not (between a b) ) => (not_between a b)	WITHOUT_CLASSIFICATION	0.9817678502195147	WITHOUT_CLASSIFICATION	0.018232149780485207	DESIGN
initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9982090364310406	WITHOUT_CLASSIFICATION	0.0017909635689592875	DESIGN
overriden to avoid system.exit	WITHOUT_CLASSIFICATION	0.9992393670575909	WITHOUT_CLASSIFICATION	7.606329424090829E-4	DESIGN
if if otherwise handle the error normally.	WITHOUT_CLASSIFICATION	0.9991474327078587	WITHOUT_CLASSIFICATION	8.525672921414343E-4	DESIGN
(not (not_between a b) ) => (between a b)	WITHOUT_CLASSIFICATION	0.9817678502195147	WITHOUT_CLASSIFICATION	0.018232149780485207	DESIGN
this can never happen because this rule will always eliminate the child not.case notreturn x.getfirstchild() (not (not x) ) => (x)	WITHOUT_CLASSIFICATION	0.9998054126596703	WITHOUT_CLASSIFICATION	1.945873403298349E-4	DESIGN
just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9956242297270682	WITHOUT_CLASSIFICATION	0.0043757702729317815	DESIGN
(eq null b) => (is_null b)	WITHOUT_CLASSIFICATION	0.9998927276026187	WITHOUT_CLASSIFICATION	1.072723973812581E-4	DESIGN
(eq a null) => (is_null a)	WITHOUT_CLASSIFICATION	0.9998547986812264	WITHOUT_CLASSIFICATION	1.4520131877359112E-4	DESIGN
note because we're using astutil.createparent() the tree must be created from the bottom up. is empty x => (exists (query (select_from (from x) ) ) )	WITHOUT_CLASSIFICATION	0.9982813592479346	WITHOUT_CLASSIFICATION	0.0017186407520654635	DESIGN
add not if it's negated.	WITHOUT_CLASSIFICATION	0.9992374479267419	WITHOUT_CLASSIFICATION	7.62552073258132E-4	DESIGN
create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999958530705929	WITHOUT_CLASSIFICATION	4.146929407038454E-6	DESIGN
case 1 multi token keywords group by and order by the next token ( lt(2) ) should be 'by' otherwise this is just an ident.	WITHOUT_CLASSIFICATION	0.9917764823866156	WITHOUT_CLASSIFICATION	0.008223517613384416	DESIGN
case 2 the current token is after from and before '.'.	WITHOUT_CLASSIFICATION	0.9999870584677129	WITHOUT_CLASSIFICATION	1.2941532287166599E-5	DESIGN
this handles hhh-354 where there is a strange property name in a where clause. if the lookahead contains a dot then something that isn't an ident	WITHOUT_CLASSIFICATION	0.9981282579354044	WITHOUT_CLASSIFICATION	0.0018717420645955954	DESIGN
see if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999554946131861	WITHOUT_CLASSIFICATION	4.450538681378927E-5	DESIGN
set it!	WITHOUT_CLASSIFICATION	0.9998705059813418	WITHOUT_CLASSIFICATION	1.2949401865822627E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999489842950777	WITHOUT_CLASSIFICATION	5.1015704922245364E-5	DESIGN
strip the " where "	WITHOUT_CLASSIFICATION	0.9999334118478029	WITHOUT_CLASSIFICATION	6.65881521970168E-5	DESIGN
don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9830943107409724	WITHOUT_CLASSIFICATION	0.016905689259027554	DESIGN
at the very least cleanup the data )	WITHOUT_CLASSIFICATION	0.9314275097070323	WITHOUT_CLASSIFICATION	0.0685724902929678	DESIGN
first save off the pertinent ids as the return value	WITHOUT_CLASSIFICATION	0.9999939609572664	WITHOUT_CLASSIFICATION	6.0390427335735404E-6	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999138864663069	WITHOUT_CLASSIFICATION	8.61135336930889E-5	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999138864663069	WITHOUT_CLASSIFICATION	8.61135336930889E-5	DESIGN
start performing the updates	WITHOUT_CLASSIFICATION	0.9997933861675641	WITHOUT_CLASSIFICATION	2.0661383243588357E-4	DESIGN
first save off the pertinent ids saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9997602271827769	WITHOUT_CLASSIFICATION	2.3977281722308295E-4	DESIGN
start performing the deletes	WITHOUT_CLASSIFICATION	0.9997238446835855	WITHOUT_CLASSIFICATION	2.7615531641444905E-4	DESIGN
otherwise everything ok.	WITHOUT_CLASSIFICATION	0.9987366905230781	WITHOUT_CLASSIFICATION	0.001263309476921852	DESIGN
visit width-first then depth	WITHOUT_CLASSIFICATION	0.9991930646468069	WITHOUT_CLASSIFICATION	8.069353531931558E-4	DESIGN
if the types report logical equivalence return true	WITHOUT_CLASSIFICATION	0.9679757248128028	WITHOUT_CLASSIFICATION	0.032024275187197256	DESIGN
otherwise perform a "deep equivalence" check	WITHOUT_CLASSIFICATION	0.9943542693548607	WITHOUT_CLASSIFICATION	0.0056457306451393975	DESIGN
if there is no where node make one.	WITHOUT_CLASSIFICATION	0.9999945459348225	WITHOUT_CLASSIFICATION	5.454065177539001E-6	DESIGN
inject the where after the parent	WITHOUT_CLASSIFICATION	0.9996709411115141	WITHOUT_CLASSIFICATION	3.290588884859791E-4	DESIGN
never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999770854345184	WITHOUT_CLASSIFICATION	2.2914565481652112E-5	DESIGN
moved here from selectclause [jsd]	WITHOUT_CLASSIFICATION	0.9774664576503186	WITHOUT_CLASSIFICATION	0.022533542349681385	DESIGN
/	WITHOUT_CLASSIFICATION	0.999902946220599	WITHOUT_CLASSIFICATION	9.705377940090824E-5	DESIGN
use the table fromelement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9994776254034757	WITHOUT_CLASSIFICATION	5.223745965241692E-4	DESIGN
set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9996844822502342	WITHOUT_CLASSIFICATION	3.1551774976586926E-4	DESIGN
if the uresolved property path isn't set yet just use the property name.	WITHOUT_CLASSIFICATION	0.999758558402294	WITHOUT_CLASSIFICATION	2.414415977060488E-4	DESIGN
the 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9997321102266675	WITHOUT_CLASSIFICATION	2.6788977333240896E-4	DESIGN
prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999995793873356	WITHOUT_CLASSIFICATION	4.206126643059195E-7	DESIGN
prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999995793873356	WITHOUT_CLASSIFICATION	4.206126643059195E-7	DESIGN
if this dot has already been resolved stop now.	WITHOUT_CLASSIFICATION	0.9975755719114651	WITHOUT_CLASSIFICATION	0.0024244280885349617	DESIGN
if there is no data type for this node and we're at the end of the path (top most dot node) then this might be a java constant.	WITHOUT_CLASSIFICATION	0.9974652286160044	WITHOUT_CLASSIFICATION	0.002534771383995641	DESIGN
the property is a collection	WITHOUT_CLASSIFICATION	0.9975183119489212	WITHOUT_CLASSIFICATION	0.0024816880510788197	DESIGN
the property is a component	WITHOUT_CLASSIFICATION	0.9995097899504539	WITHOUT_CLASSIFICATION	4.902100495460962E-4	DESIGN
the property is another class..	WITHOUT_CLASSIFICATION	0.9984088256208903	WITHOUT_CLASSIFICATION	0.001591174379109728	DESIGN
otherwise this is a primitive type.	WITHOUT_CLASSIFICATION	0.9879448602792354	WITHOUT_CLASSIFICATION	0.01205513972076446	DESIGN
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9994126874750434	WITHOUT_CLASSIFICATION	5.873125249565874E-4	DESIGN
this 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9987324451166129	WITHOUT_CLASSIFICATION	0.0012675548833871201	DESIGN
always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998992492514364	WITHOUT_CLASSIFICATION	1.007507485636641E-4	DESIGN
in non-select queries the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999519842136805	WITHOUT_CLASSIFICATION	4.801578631952038E-5	DESIGN
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999886963262977	WITHOUT_CLASSIFICATION	1.1303673702339243E-5	DESIGN
this 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9987324451166129	WITHOUT_CLASSIFICATION	0.0012675548833871201	DESIGN
even though we might find a pre-existing element by join path we may not be able to reuse it	WITHOUT_CLASSIFICATION	0.9997899679071015	WITHOUT_CLASSIFICATION	2.1003209289845761E-4	DESIGN
note addduplicatealias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9956092468653285	WITHOUT_CLASSIFICATION	0.00439075313467153	DESIGN
if the from-clauses are the same we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.826340681610633	WITHOUT_CLASSIFICATION	0.1736593183893671	DESIGN
again null != null here	WITHOUT_CLASSIFICATION	0.9999025214569268	WITHOUT_CLASSIFICATION	9.747854307317466E-5	DESIGN
if this is an implied join in a from element then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9995146948223574	WITHOUT_CLASSIFICATION	4.8530517764256765E-4	DESIGN
otherwise (subquery case) dont reuse the fromelement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9996769014459903	WITHOUT_CLASSIFICATION	3.2309855400969897E-4	DESIGN
we know only the lhs-hand type so use that	WITHOUT_CLASSIFICATION	0.9982907045374454	WITHOUT_CLASSIFICATION	0.0017092954625546578	DESIGN
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999974886244059	WITHOUT_CLASSIFICATION	2.5113755941648957E-6	DESIGN
only the identifier property field name can be a reference to the associated entity's pk	WITHOUT_CLASSIFICATION	0.9979922425446042	WITHOUT_CLASSIFICATION	0.002007757455395842	DESIGN
special shortcut for id properties skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999135219480679	WITHOUT_CLASSIFICATION	8.647805193214032E-5	DESIGN
append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9995687915022817	WITHOUT_CLASSIFICATION	4.312084977182743E-4	DESIGN
if the lhs is a collection use collectionpropertymapping	WITHOUT_CLASSIFICATION	0.99959312923133	WITHOUT_CLASSIFICATION	4.0687076866987215E-4	DESIGN
tell the destination fromelement to 'includesubclasses'.	WITHOUT_CLASSIFICATION	0.9997639064570156	WITHOUT_CLASSIFICATION	2.36093542984462E-4	DESIGN
use theta style (for regression) move the node up after the origin node.	WITHOUT_CLASSIFICATION	0.9899400047885762	WITHOUT_CLASSIFICATION	0.0100599952114237	DESIGN
don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9948341879860395	WITHOUT_CLASSIFICATION	0.005165812013960483	DESIGN
for expected parameter type injection we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9991353511846003	WITHOUT_CLASSIFICATION	8.646488153997672E-4	DESIGN
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9995019987594082	WITHOUT_CLASSIFICATION	4.980012405919272E-4	DESIGN
we have something like "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9979897915067051	WITHOUT_CLASSIFICATION	0.00201020849329498	DESIGN
we have something like "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9979897915067051	WITHOUT_CLASSIFICATION	0.00201020849329498	DESIGN
we know only the rhs-hand type so use that	WITHOUT_CLASSIFICATION	0.9982907045374454	WITHOUT_CLASSIFICATION	0.0017092954625546578	DESIGN
handle the (assumed) valid cases #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9962146214497242	WITHOUT_CLASSIFICATION	0.0037853785502758846	DESIGN
one or the other needs to be a datetime for us to get into this method in the first place	WITHOUT_CLASSIFICATION	0.976391955343819	WITHOUT_CLASSIFICATION	0.023608044656181052	DESIGN
#3 - note that this is also true of "datetime - param"	WITHOUT_CLASSIFICATION	0.9906942432211606	WITHOUT_CLASSIFICATION	0.009305756778839408	DESIGN
#2	WITHOUT_CLASSIFICATION	0.9997616492639625	WITHOUT_CLASSIFICATION	2.3835073603750278E-4	DESIGN
generate the inner join -- the elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9997748619670234	WITHOUT_CLASSIFICATION	2.2513803297660647E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9997504492493128	WITHOUT_CLASSIFICATION	2.4955075068721386E-4	DESIGN
the 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999913399801756	WITHOUT_CLASSIFICATION	8.660019824374622E-6	DESIGN
add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999970397786861	WITHOUT_CLASSIFICATION	2.960221313784362E-6	DESIGN
sometimes use the element table alias sometimes use the umm collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.999790990314421	WITHOUT_CLASSIFICATION	2.090096855789185E-4	DESIGN
now set the text for this node. it should be the element columns.	WITHOUT_CLASSIFICATION	0.9181092941605927	WITHOUT_CLASSIFICATION	0.08189070583940723	DESIGN
get the function return value type based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999956936561133	WITHOUT_CLASSIFICATION	4.306343886615223E-6	DESIGN
this will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9995991899715359	WITHOUT_CLASSIFICATION	4.008100284642457E-4	DESIGN
mutation depends on the types of nodes invloved	WITHOUT_CLASSIFICATION	0.998708830035789	WITHOUT_CLASSIFICATION	0.001291169964210946	DESIGN
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding	WITHOUT_CLASSIFICATION	0.9543207477679554	WITHOUT_CLASSIFICATION	0.04567925223204471	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9995084575910039	WITHOUT_CLASSIFICATION	4.915424089959586E-4	DESIGN
generated select expressions are already resolved nothing to do.	WITHOUT_CLASSIFICATION	0.9927679058129637	WITHOUT_CLASSIFICATION	0.007232094187036266	DESIGN
the path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9991812886936765	WITHOUT_CLASSIFICATION	8.187113063233924E-4	DESIGN
the hql class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.999961438155215	WITHOUT_CLASSIFICATION	3.8561844785017316E-5	DESIGN
associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9998602651187735	WITHOUT_CLASSIFICATION	1.3973488122647122E-4	DESIGN
try the parent fromclause	WITHOUT_CLASSIFICATION	0.9987382040131222	WITHOUT_CLASSIFICATION	0.0012617959868777846	DESIGN
add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.999950283446966	WITHOUT_CLASSIFICATION	4.971655303410082E-5	DESIGN
make sure that all from elements registered with this from clause are actually in the ast.	WITHOUT_CLASSIFICATION	0.9997978369143292	WITHOUT_CLASSIFICATION	2.021630856708779E-4	DESIGN
invoke setscalarcolumntext on each constructor argument.	WITHOUT_CLASSIFICATION	0.9998964339859568	WITHOUT_CLASSIFICATION	1.035660140431617E-4	DESIGN
collect the select expressions skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999970496765946	WITHOUT_CLASSIFICATION	2.9503234053269878E-6	DESIGN
return an empty type array	WITHOUT_CLASSIFICATION	0.9977933624955831	WITHOUT_CLASSIFICATION	0.0022066375044169357	DESIGN
constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9985787635378294	WITHOUT_CLASSIFICATION	0.0014212364621705585	DESIGN
this is the exception returned by reflecthelper.getconstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9997778846614528	WITHOUT_CLASSIFICATION	2.2211533854706497E-4	DESIGN
if there is no order by make one	WITHOUT_CLASSIFICATION	0.9999731118433464	WITHOUT_CLASSIFICATION	2.6888156653542908E-5	DESIGN
find the where if there is no where find the from	WITHOUT_CLASSIFICATION	0.99998753525993	WITHOUT_CLASSIFICATION	1.24647400699783E-5	DESIGN
now inject the newly built order by into the tree	WITHOUT_CLASSIFICATION	0.999680213564645	WITHOUT_CLASSIFICATION	3.197864353550187E-4	DESIGN
parametercontainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998893986686817	WITHOUT_CLASSIFICATION	1.1060133131837324E-4	DESIGN
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9996612031398066	WITHOUT_CLASSIFICATION	3.387968601934333E-4	DESIGN
render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.997043035381587	WITHOUT_CLASSIFICATION	0.002956964618413053	DESIGN
class names in the from clause result in a joinsequence (the old fromparser does this).	WITHOUT_CLASSIFICATION	0.9999836121594428	WITHOUT_CLASSIFICATION	1.6387840557220057E-5	DESIGN
for many-to-many joins use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9995178036902592	WITHOUT_CLASSIFICATION	4.821963097408893E-4	DESIGN
otherwise use the property mapping.	WITHOUT_CLASSIFICATION	0.9986751296317271	WITHOUT_CLASSIFICATION	0.0013248703682728878	DESIGN
should be safe to only ever expect entitypersister references here	WITHOUT_CLASSIFICATION	0.9982324307601134	WITHOUT_CLASSIFICATION	0.0017675692398865506	DESIGN
if the property is a special collection property name return a collectionpropertymapping.	WITHOUT_CLASSIFICATION	0.9993999353979327	WITHOUT_CLASSIFICATION	6.000646020673802E-4	DESIGN
collection of components.	WITHOUT_CLASSIFICATION	0.9995975141994472	WITHOUT_CLASSIFICATION	4.024858005527886E-4	DESIGN
make sure the lhs is "assignable"	WITHOUT_CLASSIFICATION	0.9999146865819546	WITHOUT_CLASSIFICATION	8.531341804538733E-5	DESIGN
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9978814073927077	WITHOUT_CLASSIFICATION	0.0021185926072923166	DESIGN
register the fromelement with the from clause now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9998877775341886	WITHOUT_CLASSIFICATION	1.1222246581142319E-4	DESIGN
currently allowed	WITHOUT_CLASSIFICATION	0.9997977350969758	WITHOUT_CLASSIFICATION	2.022649030241796E-4	DESIGN
hhh-276 implied joins in a subselect where clause - the destination needs to be added to the destination's from clause. not sure if this is will fix everything but it works.	WITHOUT_CLASSIFICATION	0.9541690209395858	WITHOUT_CLASSIFICATION	0.045830979060414216	DESIGN
return classalias == null ? classname classalias	WITHOUT_CLASSIFICATION	0.9976091549838635	WITHOUT_CLASSIFICATION	0.002390845016136541	DESIGN
this is an explicit from element.	WITHOUT_CLASSIFICATION	0.9967422038453584	WITHOUT_CLASSIFICATION	0.0032577961546416618	DESIGN
parametercontainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998893986686817	WITHOUT_CLASSIFICATION	1.1060133131837324E-4	DESIGN
fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.797297732839595	WITHOUT_CLASSIFICATION	0.20270226716040504	DESIGN
if it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.999999234101472	WITHOUT_CLASSIFICATION	7.658985280014941E-7	DESIGN
since this is an explicit from element it can't be implied in the from clause.	WITHOUT_CLASSIFICATION	0.9996473925094237	WITHOUT_CLASSIFICATION	3.526074905762859E-4	DESIGN
do nothing eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9998796809171643	WITHOUT_CLASSIFICATION	1.2031908283573446E-4	DESIGN
propertyname refers to something like collection.size	WITHOUT_CLASSIFICATION	0.9962090396414046	WITHOUT_CLASSIFICATION	0.003790960358595398	DESIGN
property name is a sub-path of a component	WITHOUT_CLASSIFICATION	0.9995028414987023	WITHOUT_CLASSIFICATION	4.971585012976279E-4	DESIGN
always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998992492514364	WITHOUT_CLASSIFICATION	1.007507485636641E-4	DESIGN
nothing to do even if the operand is a parameter no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.7550435672914858	DESIGN	0.2449564327085141	WITHOUT_CLASSIFICATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9995084575910039	WITHOUT_CLASSIFICATION	4.915424089959586E-4	DESIGN
dotnode uses null here	WITHOUT_CLASSIFICATION	0.9971129526615408	WITHOUT_CLASSIFICATION	0.0028870473384592396	DESIGN
we represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9997870769890579	WITHOUT_CLASSIFICATION	2.1292301094217445E-4	DESIGN
we are the lhs of the dot representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9997969946271527	WITHOUT_CLASSIFICATION	2.030053728473244E-4	DESIGN
we are the rhs of the dot representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999484352183845	WITHOUT_CLASSIFICATION	5.156478161550355E-4	DESIGN
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9980376679585888	WITHOUT_CLASSIFICATION	0.0019623320414111803	DESIGN
early exit!!! return so the resolve call explicitly coming from dotnode can resolve this	WITHOUT_CLASSIFICATION	0.9914875686286909	WITHOUT_CLASSIFICATION	0.008512431371309127	DESIGN
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9788769414692524	WITHOUT_CLASSIFICATION	0.021123058530747602	DESIGN
just ignore it for now it'll get resolved later	WITHOUT_CLASSIFICATION	0.998607318076527	WITHOUT_CLASSIFICATION	0.00139268192347306	DESIGN
this is not actually a constant but a reference to from element.	WITHOUT_CLASSIFICATION	0.9698810960865284	WITHOUT_CLASSIFICATION	0.0301189039134716	DESIGN
check to see if our "proppath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9996698112632394	WITHOUT_CLASSIFICATION	3.3018873676058974E-4	DESIGN
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9997795965793362	WITHOUT_CLASSIFICATION	2.2040342066385305E-4	DESIGN
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.7298334556026856	WITHOUT_CLASSIFICATION	0.27016654439731436	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9704546669492006	WITHOUT_CLASSIFICATION	0.029545333050799476	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9704546669492006	WITHOUT_CLASSIFICATION	0.029545333050799476	DESIGN
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9675832103145157	WITHOUT_CLASSIFICATION	0.03241678968548423	DESIGN
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9982456292279641	WITHOUT_CLASSIFICATION	0.0017543707720359158	DESIGN
do not over-write the column text as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9995563353902928	WITHOUT_CLASSIFICATION	4.436646097072265E-4	DESIGN
for some reason the antlr.commonast initialization routines force this method to get called twice. the first time with an empty string	WITHOUT_CLASSIFICATION	0.9999768483544418	WITHOUT_CLASSIFICATION	2.3151645558225727E-5	DESIGN
look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999608778679466	WITHOUT_CLASSIFICATION	3.912213205327461E-5	DESIGN
add to the query spaces.	WITHOUT_CLASSIFICATION	0.9998911533246779	WITHOUT_CLASSIFICATION	1.0884667532204776E-4	DESIGN
if the from element isn't in the same clause create a new from element.	WITHOUT_CLASSIFICATION	0.9990674308784752	WITHOUT_CLASSIFICATION	9.325691215247162E-4	DESIGN
this is the root level node. generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9956558779889839	WITHOUT_CLASSIFICATION	0.004344122011016075	DESIGN
correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ansi-style join	WITHOUT_CLASSIFICATION	0.9999916748417852	WITHOUT_CLASSIFICATION	8.32515821480211E-6	DESIGN
super-duper-classic-parser-regression-testing-mojo-magic	WITHOUT_CLASSIFICATION	0.9995899993364952	WITHOUT_CLASSIFICATION	4.100006635047861E-4	DESIGN
a collection of entities	WITHOUT_CLASSIFICATION	0.9971631844363932	WITHOUT_CLASSIFICATION	0.0028368155636068803	DESIGN
a collection of components	WITHOUT_CLASSIFICATION	0.9988931765138821	WITHOUT_CLASSIFICATION	0.0011068234861178552	DESIGN
a collection of scalar elements	WITHOUT_CLASSIFICATION	0.9996964480671616	WITHOUT_CLASSIFICATION	3.035519328384221E-4	DESIGN
according to both the ansi-sql and ejb3 specs trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the sql spec <trim function> = trim <left paren> <trim operands> <right paren> <trim operands> = [ [ <trim specification> ] [ <trim character> ] from ] <trim source> <trim specification> = leading | trailing | both if only <trim specification> is omitted both is assumed if <trim character> is omitted space is assumed	WITHOUT_CLASSIFICATION	0.9999999999197086	WITHOUT_CLASSIFICATION	8.029146876610444E-11	DESIGN
don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999681012915691	WITHOUT_CLASSIFICATION	3.1898708430881624E-5	DESIGN
treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.999170945259236	WITHOUT_CLASSIFICATION	8.290547407639526E-4	DESIGN
( implied && dotnode.usethetastyleimplicitjoins ) ) {	WITHOUT_CLASSIFICATION	0.999698998051157	WITHOUT_CLASSIFICATION	3.0100194884299014E-4	DESIGN
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9254900571021654	WITHOUT_CLASSIFICATION	0.07450994289783455	DESIGN
create the from element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999976523887645	WITHOUT_CLASSIFICATION	2.347611235639527E-6	DESIGN
if the join is implied then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999954508255288	WITHOUT_CLASSIFICATION	4.549174471252514E-6	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997027570555822	WITHOUT_CLASSIFICATION	2.972429444177272E-4	DESIGN
the associated entity is implied but it must be included in the from. the collection alias is the role.	WITHOUT_CLASSIFICATION	0.9998447469099586	WITHOUT_CLASSIFICATION	1.5525309004143213E-4	DESIGN
tag this node as a join. don't include subclasses in the join. this is a clollection join.	WITHOUT_CLASSIFICATION	0.9999927601421851	WITHOUT_CLASSIFICATION	7.239857814926143E-6	DESIGN
get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9998429452136702	WITHOUT_CLASSIFICATION	1.5705478632986922E-4	DESIGN
origin path implied columns classalias	WITHOUT_CLASSIFICATION	0.9999814170344345	WITHOUT_CLASSIFICATION	1.8582965565456965E-5	DESIGN
implied	WITHOUT_CLASSIFICATION	0.9997390445639882	WITHOUT_CLASSIFICATION	2.609554360116966E-4	DESIGN
for implied many-to-many just add the end join.	WITHOUT_CLASSIFICATION	0.9998712954209544	WITHOUT_CLASSIFICATION	1.2870457904546505E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997027570555822	WITHOUT_CLASSIFICATION	2.972429444177272E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997027570555822	WITHOUT_CLASSIFICATION	2.972429444177272E-4	DESIGN
the standard sql function name is current_timestamp	WITHOUT_CLASSIFICATION	0.9999940970387223	WITHOUT_CLASSIFICATION	5.902961277682815E-6	DESIGN
this causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9473083476114925	WITHOUT_CLASSIFICATION	0.05269165238850742	DESIGN
private type[] sqlresulttypes	WITHOUT_CLASSIFICATION	0.9978366542652578	WITHOUT_CLASSIFICATION	0.0021633457347422177	DESIGN
frontbase has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9998461669675557	WITHOUT_CLASSIFICATION	1.5383303244423418E-4	DESIGN
the types represented in the sql result set. @return the types represented in the sql result set.	WITHOUT_CLASSIFICATION	0.9997984934782288	WITHOUT_CLASSIFICATION	2.0150652177126436E-4	DESIGN
public type[] getsqlresulttypes() {return sqlresulttypes}	WITHOUT_CLASSIFICATION	0.9986480370876676	WITHOUT_CLASSIFICATION	0.0013519629123324357	DESIGN
first collect all of the select expressions. note this must be done before invoking setscalarcolumntext() because setscalarcolumntext() changes the ast!!!	WITHOUT_CLASSIFICATION	0.996899471863961	WITHOUT_CLASSIFICATION	0.0031005281360391313	DESIGN
first allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.907379020389551	WITHOUT_CLASSIFICATION	0.09262097961044904	DESIGN
sqlresulttypelist.addall( constructorargumenttypelist )	WITHOUT_CLASSIFICATION	0.9995634240702479	WITHOUT_CLASSIFICATION	4.3657592975215767E-4	DESIGN
if the data type is not an association type it could not have been in the from clause.	WITHOUT_CLASSIFICATION	0.980336314465063	WITHOUT_CLASSIFICATION	0.019663685534937074	DESIGN
sqlresulttypelist.add( type )	WITHOUT_CLASSIFICATION	0.9977015686292994	WITHOUT_CLASSIFICATION	0.0022984313707006287	DESIGN
always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9991636110901236	WITHOUT_CLASSIFICATION	8.36388909876377E-4	DESIGN
add the fetched entities	WITHOUT_CLASSIFICATION	0.9996862405784045	WITHOUT_CLASSIFICATION	3.1375942159548E-4	DESIGN
get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998215005545671	WITHOUT_CLASSIFICATION	1.7849944543277293E-4	DESIGN
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998808278334776	WITHOUT_CLASSIFICATION	1.1917216652227157E-4	DESIGN
if there are any scalars (non-entities) selected render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999996671964322	WITHOUT_CLASSIFICATION	3.328035677292742E-7	DESIGN
sqlresulttypelist	WITHOUT_CLASSIFICATION	0.9996068946777141	WITHOUT_CLASSIFICATION	3.931053222858822E-4	DESIGN
arraylist sqlresulttypelist	WITHOUT_CLASSIFICATION	0.9993068636712215	WITHOUT_CLASSIFICATION	6.931363287784782E-4	DESIGN
sqlresulttypes = ( type[] ) sqlresulttypelist.toarray( new type[sqlresulttypelist.size()] )	WITHOUT_CLASSIFICATION	0.9999643417709502	WITHOUT_CLASSIFICATION	3.565822904978226E-5	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992103183505826	WITHOUT_CLASSIFICATION	7.896816494173635E-4	DESIGN
todo	WITHOUT_CLASSIFICATION	0.7081495804253074	WITHOUT_CLASSIFICATION	0.2918504195746925	DESIGN
add the type to the list of returned sqlresulttypes.	WITHOUT_CLASSIFICATION	0.9999108024741686	WITHOUT_CLASSIFICATION	8.919752583129716E-5	DESIGN
generate an 2d array of column names the first dimension is parallel with the return types array. the second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999987506125189	WITHOUT_CLASSIFICATION	1.249387481187679E-6	DESIGN
generate the select expression.	WITHOUT_CLASSIFICATION	0.9997598292902734	WITHOUT_CLASSIFICATION	2.4017070972653514E-4	DESIGN
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.984411525760182	WITHOUT_CLASSIFICATION	0.015588474239818075	DESIGN
skip 'distinct' and 'all' so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999818235117152	WITHOUT_CLASSIFICATION	1.8176488284849908E-5	DESIGN
create sql_token nodes for the columns.	WITHOUT_CLASSIFICATION	0.9996152676977174	WITHOUT_CLASSIFICATION	3.847323022826595E-4	DESIGN
generate the property select tokens.	WITHOUT_CLASSIFICATION	0.999549107973738	WITHOUT_CLASSIFICATION	4.508920262620837E-4	DESIGN
get the function name node.	WITHOUT_CLASSIFICATION	0.9999492754152085	WITHOUT_CLASSIFICATION	5.072458479140185E-5	DESIGN
method expressions in a select should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9282133464292609	WITHOUT_CLASSIFICATION	0.07178665357073903	DESIGN
if this is 'elements' then create a new from element.	WITHOUT_CLASSIFICATION	0.9896539322538369	WITHOUT_CLASSIFICATION	0.010346067746163024	DESIGN
not elements(x)	WITHOUT_CLASSIFICATION	0.9982189262579001	WITHOUT_CLASSIFICATION	0.0017810737420999058	DESIGN
dialect function	WITHOUT_CLASSIFICATION	0.9998579197814907	WITHOUT_CLASSIFICATION	1.420802185092142E-4	DESIGN
collection 'property function'	WITHOUT_CLASSIFICATION	0.9986916436240421	WITHOUT_CLASSIFICATION	0.0013083563759579253	DESIGN
if the constant is an ident figure out what it means	WITHOUT_CLASSIFICATION	0.9998350150483442	WITHOUT_CLASSIFICATION	1.6498495165581634E-4	DESIGN
ident is a class alias in the from.	WITHOUT_CLASSIFICATION	0.9998010156113967	WITHOUT_CLASSIFICATION	1.989843886032448E-4	DESIGN
resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9539448940857922	WITHOUT_CLASSIFICATION	0.046055105914207736	DESIGN
otherwise it's a literal.	WITHOUT_CLASSIFICATION	0.9985433349113662	WITHOUT_CLASSIFICATION	0.0014566650886338108	DESIGN
the name of an entity class	WITHOUT_CLASSIFICATION	0.9992469678000557	WITHOUT_CLASSIFICATION	7.530321999443243E-4	DESIGN
the class discriminator value	WITHOUT_CLASSIFICATION	0.9997790847152139	WITHOUT_CLASSIFICATION	2.2091528478616017E-4	DESIGN
chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9996992590816468	WITHOUT_CLASSIFICATION	3.007409183531468E-4	DESIGN
add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999758552153636	WITHOUT_CLASSIFICATION	2.414478463643312E-5	DESIGN
find or create the where clause	WITHOUT_CLASSIFICATION	0.9999907886969412	WITHOUT_CLASSIFICATION	9.211303058669055E-6	DESIGN
child == parent.getfirstchild()	WITHOUT_CLASSIFICATION	0.9997480086812579	WITHOUT_CLASSIFICATION	2.519913187420493E-4	DESIGN
find or create the where clause	WITHOUT_CLASSIFICATION	0.9999907886969412	WITHOUT_CLASSIFICATION	9.211303058669055E-6	DESIGN
filter conditions need to be inserted before the hql where condition and the theta join node. this is because org.hibernate.loader.loader binds the filter parameters first then it binds all the hql query parameters see org.hibernate.loader.loader.processfilterparameters().	WITHOUT_CLASSIFICATION	0.9999998833084219	WITHOUT_CLASSIFICATION	1.1669157814495851E-7	DESIGN
put the filters node before the hql condition and theta joins	WITHOUT_CLASSIFICATION	0.9999825977419625	WITHOUT_CLASSIFICATION	1.7402258037541486E-5	DESIGN
add the current fragment to the filters node	WITHOUT_CLASSIFICATION	0.9990756608488857	WITHOUT_CLASSIFICATION	9.24339151114338E-4	DESIGN
create a new theta_joins node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9997493188249664	WITHOUT_CLASSIFICATION	2.50681175033548E-4	DESIGN
put the theta_joins node before the hql condition after the filters.	WITHOUT_CLASSIFICATION	0.9999888072824434	WITHOUT_CLASSIFICATION	1.1192717556490843E-5	DESIGN
add the current fragment to the theta_joins node	WITHOUT_CLASSIFICATION	0.9989637434437996	WITHOUT_CLASSIFICATION	0.00103625655620045	DESIGN
first try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999146385119392	WITHOUT_CLASSIFICATION	8.536148806072223E-5	DESIGN
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9988015530696884	WITHOUT_CLASSIFICATION	0.0011984469303115476	DESIGN
if that didn't work try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9997617825095597	WITHOUT_CLASSIFICATION	2.3821749044033988E-4	DESIGN
implicit joins use theta style (where pk = fk) explicit joins use join (after from)	WITHOUT_CLASSIFICATION	0.9999810191958909	WITHOUT_CLASSIFICATION	1.8980804109100212E-5	DESIGN
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999951620295925	WITHOUT_CLASSIFICATION	4.837970407484106E-6	DESIGN
determine the type of the first argument	WITHOUT_CLASSIFICATION	0.9998113835971008	WITHOUT_CLASSIFICATION	1.8861640289919335E-4	DESIGN
use the dot node to emit the first column name. create the column names folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999886922342961	WITHOUT_CLASSIFICATION	1.1307765703973046E-5	DESIGN
note this simply constructs a "raw" sql_token representing the where fragment and injects this into the tree. this "works" however it is probably not the best long-term solution. at some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999112894755339	DESIGN	8.871052446608186E-5	WITHOUT_CLASSIFICATION
append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999874485171213	WITHOUT_CLASSIFICATION	1.2551482878720263E-5	DESIGN
if the node has a first child recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999968427519381	WITHOUT_CLASSIFICATION	3.157248061833237E-6	DESIGN
if there is a second child (rhs) recurse into that child.	WITHOUT_CLASSIFICATION	0.9998996915825299	WITHOUT_CLASSIFICATION	1.0030841747016913E-4	DESIGN
iterate through the aliasjoinsequence pairs and generate sql token nodes.	WITHOUT_CLASSIFICATION	0.9996707055062964	WITHOUT_CLASSIFICATION	3.292944937035677E-4	DESIGN
if the from element represents a join_fragment and it is a theta-style join convert its type from join_fragment to from_fragment	WITHOUT_CLASSIFICATION	0.9999950309449107	WITHOUT_CLASSIFICATION	4.969055089272232E-6	DESIGN
this is used during sqlgenerator processing	WITHOUT_CLASSIFICATION	0.8156427399730531	WITHOUT_CLASSIFICATION	0.18435726002694686	DESIGN
if there is a from fragment and the from element is an explicit then add the from part.	WITHOUT_CLASSIFICATION	0.9966449273078561	WITHOUT_CLASSIFICATION	0.0033550726921438767	DESIGN
&& stringhelper.isnotempty( frag )	WITHOUT_CLASSIFICATION	0.9991674958096382	WITHOUT_CLASSIFICATION	8.325041903618787E-4	DESIGN
the from fragment will probably begin with ' '. remove this if it is present.	WITHOUT_CLASSIFICATION	0.6652675848306595	WITHOUT_CLASSIFICATION	0.33473241516934066	DESIGN
this uses a pathexpressionparser but notice that compound paths are not valid only bare names and simple paths	WITHOUT_CLASSIFICATION	0.9995089596934088	WITHOUT_CLASSIFICATION	4.910403065911563E-4	DESIGN
select p from p in class eg.person order by p.name p.address p	WITHOUT_CLASSIFICATION	0.9996936277637355	WITHOUT_CLASSIFICATION	3.063722362644142E-4	DESIGN
the reason for this is sql doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9990652008584547	WITHOUT_CLASSIFICATION	9.347991415451572E-4	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9995428228595368	WITHOUT_CLASSIFICATION	4.571771404632258E-4	DESIGN
default mode	WITHOUT_CLASSIFICATION	0.9997131308156897	WITHOUT_CLASSIFICATION	2.86869184310265E-4	DESIGN
queryjoinfragment join = q.createjoinfragment(usethetastylejoin)	WITHOUT_CLASSIFICATION	0.9999936712175514	WITHOUT_CLASSIFICATION	6.328782448544907E-6	DESIGN
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9992572069810916	WITHOUT_CLASSIFICATION	7.427930189085444E-4	DESIGN
after reset!	WITHOUT_CLASSIFICATION	0.9997435353986479	WITHOUT_CLASSIFICATION	2.5646460135200566E-4	DESIGN
we don't need to worry about any condition in the on clause here (tofromfragmentstring) since anything in the on condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.99894447619713	WITHOUT_CLASSIFICATION	0.0010555238028700294	DESIGN
bit_length feels a bit broken to me. we have to cast to char in order to pass when a numeric value is supplied. but of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. jay nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9995117943175464	WITHOUT_CLASSIFICATION	4.8820568245358574E-4	DESIGN
dotcount>=2	WITHOUT_CLASSIFICATION	0.9996068946777141	WITHOUT_CLASSIFICATION	3.931053222858822E-4	DESIGN
do the corresponding rhs	WITHOUT_CLASSIFICATION	0.9996841652660571	WITHOUT_CLASSIFICATION	3.158347339429489E-4	DESIGN
if its "id"	WITHOUT_CLASSIFICATION	0.9999399424861551	WITHOUT_CLASSIFICATION	6.005751384482639E-5	DESIGN
or its the id property name	WITHOUT_CLASSIFICATION	0.9998827388361817	WITHOUT_CLASSIFICATION	1.1726116381836457E-4	DESIGN
join = q.createjoinfragment(usethetastylejoin)	WITHOUT_CLASSIFICATION	0.9999936712175514	WITHOUT_CLASSIFICATION	6.328782448544907E-6	DESIGN
important!!	WITHOUT_CLASSIFICATION	0.9996078250486868	WITHOUT_CLASSIFICATION	3.921749513131687E-4	DESIGN
string[] keycols = collpersister.getkeycolumnnames()	WITHOUT_CLASSIFICATION	0.9999205032334401	WITHOUT_CLASSIFICATION	7.949676655997655E-5	DESIGN
an association	WITHOUT_CLASSIFICATION	0.9997636078022524	WITHOUT_CLASSIFICATION	2.3639219774753765E-4	DESIGN
allow index() function	WITHOUT_CLASSIFICATION	0.9997392003917712	WITHOUT_CLASSIFICATION	2.6079960822884563E-4	DESIGN
here assume sqlserver2005 using snapshot isolation which does not have this problem	WITHOUT_CLASSIFICATION	0.9918455505213971	WITHOUT_CLASSIFICATION	0.008154449478602926	DESIGN
the reason for this is sql doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9990652008584547	WITHOUT_CLASSIFICATION	9.347991415451572E-4	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9996068946777141	WITHOUT_CLASSIFICATION	3.931053222858822E-4	DESIGN
collections of values	WITHOUT_CLASSIFICATION	0.9997209674293915	WITHOUT_CLASSIFICATION	2.7903257060847016E-4	DESIGN
opening paren in new foo ( )	WITHOUT_CLASSIFICATION	0.9996235110180204	WITHOUT_CLASSIFICATION	3.764889819797311E-4	DESIGN
if we are inside a new result() but not inside a nested function	WITHOUT_CLASSIFICATION	0.9998664092613744	WITHOUT_CLASSIFICATION	1.3359073862556588E-4	DESIGN
special case	WITHOUT_CLASSIFICATION	0.999661067195231	WITHOUT_CLASSIFICATION	3.389328047690598E-4	DESIGN
the name of an sql function	WITHOUT_CLASSIFICATION	0.9999867079694856	WITHOUT_CLASSIFICATION	1.3292030514244295E-5	DESIGN
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9989712968962626	WITHOUT_CLASSIFICATION	0.0010287031037373674	DESIGN
this is basically a copy/paste of orderbyparser might be worth refactoring	WITHOUT_CLASSIFICATION	0.8210797051807693	DESIGN	0.1789202948192307	WITHOUT_CLASSIFICATION
select p from p in class eg.person group by p.name p.address p	WITHOUT_CLASSIFICATION	0.9994129401287039	WITHOUT_CLASSIFICATION	5.870598712961286E-4	DESIGN
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9967950511421514	WITHOUT_CLASSIFICATION	0.0032049488578486246	DESIGN
register collection role	WITHOUT_CLASSIFICATION	0.997308543043759	WITHOUT_CLASSIFICATION	0.002691456956240983	DESIGN
the keyword used to specify an identity column if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9995014230165612	WITHOUT_CLASSIFICATION	4.985769834388082E-4	DESIGN
.getelementpropertymapping()	WITHOUT_CLASSIFICATION	0.9992182916705639	WITHOUT_CLASSIFICATION	7.817083294360349E-4	DESIGN
crossjoins.add(name)	WITHOUT_CLASSIFICATION	0.9996068946777141	WITHOUT_CLASSIFICATION	3.931053222858822E-4	DESIGN
ie no select clause in hql	WITHOUT_CLASSIFICATION	0.9998851834020557	WITHOUT_CLASSIFICATION	1.1481659794432659E-4	DESIGN
initialize the set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.999581477802954	WITHOUT_CLASSIFICATION	4.18522197045964E-4	DESIGN
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999624683375631	WITHOUT_CLASSIFICATION	3.7531662436878684E-5	DESIGN
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9998578417341567	WITHOUT_CLASSIFICATION	1.421582658432695E-4	DESIGN
return the concrete type or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9995077829988661	WITHOUT_CLASSIFICATION	4.922170011339021E-4	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9996068946777141	WITHOUT_CLASSIFICATION	3.931053222858822E-4	DESIGN
q.addcollection(collectionname collectionrole)	WITHOUT_CLASSIFICATION	0.9995899993364952	WITHOUT_CLASSIFICATION	4.100006635047861E-4	DESIGN
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.987854508867243	WITHOUT_CLASSIFICATION	0.012145491132756949	DESIGN
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.999022913425347	WITHOUT_CLASSIFICATION	9.77086574652972E-4	DESIGN
unfortunately this stuff can't be cached because it is per-invocation not constant for the querytranslator instance	WITHOUT_CLASSIFICATION	0.9998729986812817	WITHOUT_CLASSIFICATION	1.2700131871834616E-4	DESIGN
this is the legacy behaviour for hql queries	WITHOUT_CLASSIFICATION	0.9991774875697351	WITHOUT_CLASSIFICATION	8.225124302649359E-4	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9988728727474052	WITHOUT_CLASSIFICATION	0.001127127252594851	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9988728727474052	WITHOUT_CLASSIFICATION	0.001127127252594851	DESIGN
we have the form trim(trimsource) so we trim leading and trailing spaces early exit!!!!	WITHOUT_CLASSIFICATION	0.9999129025747906	WITHOUT_CLASSIFICATION	8.709742520934611E-5	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9988728727474052	WITHOUT_CLASSIFICATION	0.001127127252594851	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9988728727474052	WITHOUT_CLASSIFICATION	0.001127127252594851	DESIGN
need this since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9998076297584141	WITHOUT_CLASSIFICATION	1.9237024158587517E-4	DESIGN
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.999999643875691	WITHOUT_CLASSIFICATION	3.561243090688665E-7	DESIGN
expressionterminators.add("") deliberately excluded	WITHOUT_CLASSIFICATION	0.999739289668612	WITHOUT_CLASSIFICATION	2.607103313879604E-4	DESIGN
expressionopeners.add("") deliberately excluded	WITHOUT_CLASSIFICATION	0.999739289668612	WITHOUT_CLASSIFICATION	2.607103313879604E-4	DESIGN
we have the form trim(from trimsource). this is functionally equivalent to trim(trimsource) early exit!!!!	WITHOUT_CLASSIFICATION	0.9989271632185873	WITHOUT_CLASSIFICATION	0.0010728367814126555	DESIGN
otherwise a trim-specification and/or a trim-character have been specified we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9986267833434878	WITHOUT_CLASSIFICATION	0.0013732166565123087	DESIGN
inside a between and expression	WITHOUT_CLASSIFICATION	0.9993171643469757	WITHOUT_CLASSIFICATION	6.82835653024199E-4	DESIGN
were an odd or even number of nots encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999941835266511	WITHOUT_CLASSIFICATION	5.8164733488061556E-6	DESIGN
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.999122525060603	WITHOUT_CLASSIFICATION	8.774749393969839E-4	DESIGN
cope with []	WITHOUT_CLASSIFICATION	0.9984454570918164	WITHOUT_CLASSIFICATION	0.0015545429081835727	DESIGN
cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9998729564656088	WITHOUT_CLASSIFICATION	1.2704353439116716E-4	DESIGN
note early return	WITHOUT_CLASSIFICATION	0.9987700092634119	WITHOUT_CLASSIFICATION	0.001229990736588233	DESIGN
cope with a subselect	WITHOUT_CLASSIFICATION	0.9962548663868109	WITHOUT_CLASSIFICATION	0.0037451336131889474	DESIGN
cope with special cases of and not ()	WITHOUT_CLASSIFICATION	0.9999897780110841	WITHOUT_CLASSIFICATION	1.0221988915881503E-5	DESIGN
close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999923786265544	WITHOUT_CLASSIFICATION	7.621373445535378E-6	DESIGN
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9903075389260363	WITHOUT_CLASSIFICATION	0.009692461073963777	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999912836058009	WITHOUT_CLASSIFICATION	8.716394199140941E-6	DESIGN
process a token mapping oo path expressions to sql expressions	WITHOUT_CLASSIFICATION	0.9999837476511947	WITHOUT_CLASSIFICATION	1.6252348805237653E-5	DESIGN
open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9989304883201935	WITHOUT_CLASSIFICATION	0.0010695116798065043	DESIGN
cope with special cases of and not )	WITHOUT_CLASSIFICATION	0.993433562890078	WITHOUT_CLASSIFICATION	0.006566437109921985	DESIGN
the next one up must also be	WITHOUT_CLASSIFICATION	0.9973797416779429	WITHOUT_CLASSIFICATION	0.002620258322057061	DESIGN
add any joins	WITHOUT_CLASSIFICATION	0.9997631263421097	WITHOUT_CLASSIFICATION	2.3687365789034894E-4	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999912836058009	WITHOUT_CLASSIFICATION	8.716394199140941E-6	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9995428228595368	WITHOUT_CLASSIFICATION	4.571771404632258E-4	DESIGN
path expression	WITHOUT_CLASSIFICATION	0.9999745506676005	WITHOUT_CLASSIFICATION	2.5449332399524833E-5	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999986414186751	WITHOUT_CLASSIFICATION	1.358581324891014E-5	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999195214879024	WITHOUT_CLASSIFICATION	8.047851209757703E-5	DESIGN
anything else	WITHOUT_CLASSIFICATION	0.9999504037645869	WITHOUT_CLASSIFICATION	4.9596235413198894E-5	DESIGN
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999838230145045	WITHOUT_CLASSIFICATION	1.6176985495455392E-5	DESIGN
careful with this!	WITHOUT_CLASSIFICATION	0.9991082634466549	WITHOUT_CLASSIFICATION	8.917365533450645E-4	DESIGN
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999252316909975	WITHOUT_CLASSIFICATION	7.476830900251162E-5	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999828523452995	WITHOUT_CLASSIFICATION	1.7147654700457656E-5	DESIGN
notice no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999832662215544	WITHOUT_CLASSIFICATION	1.6733778445601244E-5	DESIGN
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999154128533725	WITHOUT_CLASSIFICATION	8.458714662751946E-5	DESIGN
start by looking for hql keywords	WITHOUT_CLASSIFICATION	0.9998242511818197	WITHOUT_CLASSIFICATION	1.7574881818018616E-4	DESIGN
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9973625798931028	WITHOUT_CLASSIFICATION	0.0026374201068971458	DESIGN
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.999914034522793	WITHOUT_CLASSIFICATION	8.596547720694428E-5	DESIGN
now anything that is not a hql keyword	WITHOUT_CLASSIFICATION	0.9991860272489221	WITHOUT_CLASSIFICATION	8.13972751077855E-4	DESIGN
process the "old" hql style where aliases appear _first_ ie. using the in or in class constructions	WITHOUT_CLASSIFICATION	0.9999758025565085	WITHOUT_CLASSIFICATION	2.4197443491451034E-5	DESIGN
treat it as a classname	WITHOUT_CLASSIFICATION	0.9990139501704007	WITHOUT_CLASSIFICATION	9.860498295992245E-4	DESIGN
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999270949941146	WITHOUT_CLASSIFICATION	7.290500588541991E-5	DESIGN
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9994447668288297	WITHOUT_CLASSIFICATION	5.552331711703733E-4	DESIGN
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999466245936514	WITHOUT_CLASSIFICATION	5.337540634871035E-5	DESIGN
allow odmg oql style from person p p.cars c	WITHOUT_CLASSIFICATION	0.9996855951175775	WITHOUT_CLASSIFICATION	3.14404882422455E-4	DESIGN
handle quoted strings	WITHOUT_CLASSIFICATION	0.9966751540224735	WITHOUT_CLASSIFICATION	0.003324845977526528	DESIGN
object insertions updates and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999923076854441	WITHOUT_CLASSIFICATION	7.692314555825821E-6	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999828523452995	WITHOUT_CLASSIFICATION	1.7147654700457656E-5	DESIGN
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999490486216027	WITHOUT_CLASSIFICATION	5.095137839724891E-5	DESIGN
do replacements	WITHOUT_CLASSIFICATION	0.999316272280005	WITHOUT_CLASSIFICATION	6.837277199951081E-4	DESIGN
handle hql2 collection syntax	WITHOUT_CLASSIFICATION	0.9974877236302655	WITHOUT_CLASSIFICATION	0.0025122763697344535	DESIGN
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.997143118305336	WITHOUT_CLASSIFICATION	0.002856881694663913	DESIGN
abstractselectingdelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998893986686817	WITHOUT_CLASSIFICATION	1.1060133131837324E-4	DESIGN
hilo params	WITHOUT_CLASSIFICATION	0.9996298481355325	WITHOUT_CLASSIFICATION	3.7015186446756783E-4	DESIGN
sql = query	WITHOUT_CLASSIFICATION	0.9999846172726256	WITHOUT_CLASSIFICATION	1.538272737451153E-5	DESIGN
performance opt	WITHOUT_CLASSIFICATION	0.9990743792262999	WITHOUT_CLASSIFICATION	9.256207737000583E-4	DESIGN
sql = update	WITHOUT_CLASSIFICATION	0.9999770293463222	WITHOUT_CLASSIFICATION	2.2970653677903393E-5	DESIGN
hilo config	WITHOUT_CLASSIFICATION	0.9994814101793218	WITHOUT_CLASSIFICATION	5.185898206782501E-4	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999800801655989	WITHOUT_CLASSIFICATION	1.991983440102352E-5	DESIGN
don't allow comments on these insert statements as comments totally blow up the oracle getgeneratedkeys "support" (	WITHOUT_CLASSIFICATION	0.9999701303143075	WITHOUT_CLASSIFICATION	2.986968569259638E-5	DESIGN
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9979784132165656	WITHOUT_CLASSIFICATION	0.0020215867834343366	DESIGN
throw new identifiergenerationexception("save associated object first or disable cascade for inverse association")	WITHOUT_CLASSIFICATION	0.9999896544471557	WITHOUT_CLASSIFICATION	1.034555284420373E-5	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9995534802404356	WITHOUT_CLASSIFICATION	4.4651975956443564E-4	DESIGN
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.999866793571295	WITHOUT_CLASSIFICATION	1.3320642870488583E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999675484191655	WITHOUT_CLASSIFICATION	3.2451580834496724E-4	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999800801655989	WITHOUT_CLASSIFICATION	1.991983440102352E-5	DESIGN
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9990602651613524	WITHOUT_CLASSIFICATION	9.397348386475677E-4	DESIGN
column and table should be renamed but it would break the public api	WITHOUT_CLASSIFICATION	0.9865507237624517	WITHOUT_CLASSIFICATION	0.01344927623754821	DESIGN
loaded entity instances by entitykey	WITHOUT_CLASSIFICATION	0.999914613353831	WITHOUT_CLASSIFICATION	8.538664616897035E-5	DESIGN
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9988240918975171	WITHOUT_CLASSIFICATION	0.001175908102482881	DESIGN
the default	WITHOUT_CLASSIFICATION	0.9999108909050586	WITHOUT_CLASSIFICATION	8.910909494143059E-5	DESIGN
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence	WITHOUT_CLASSIFICATION	0.9989119361958525	WITHOUT_CLASSIFICATION	0.0010880638041474492	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9995534802404356	WITHOUT_CLASSIFICATION	4.4651975956443564E-4	DESIGN
identity map of collectionentry instances by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999858362123011	WITHOUT_CLASSIFICATION	1.4163787698867351E-5	DESIGN
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999940504376835	WITHOUT_CLASSIFICATION	5.949562316513444E-6	DESIGN
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999653518746214	WITHOUT_CLASSIFICATION	3.4648125378485776E-5	DESIGN
configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996035680327385	WITHOUT_CLASSIFICATION	3.964319672615435E-4	DESIGN
identifiergenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997684249707413	WITHOUT_CLASSIFICATION	2.315750292587581E-4	DESIGN
persistentidentifiergenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997684249707413	WITHOUT_CLASSIFICATION	2.315750292587581E-4	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999290664752455	WITHOUT_CLASSIFICATION	7.093352475460332E-5	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999290664752455	WITHOUT_CLASSIFICATION	7.093352475460332E-5	DESIGN
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9967588336667679	WITHOUT_CLASSIFICATION	0.0032411663332320437	DESIGN
we just hit the last position	WITHOUT_CLASSIFICATION	0.9995799985743148	WITHOUT_CLASSIFICATION	4.2000142568516597E-4	DESIGN
scroll ahead	WITHOUT_CLASSIFICATION	0.9956279048184757	WITHOUT_CLASSIFICATION	0.004372095181524241	DESIGN
scroll backward	WITHOUT_CLASSIFICATION	0.997424764225555	WITHOUT_CLASSIFICATION	0.0025752357744448953	DESIGN
we have not yet hit the last result	WITHOUT_CLASSIFICATION	0.9998948206277949	WITHOUT_CLASSIFICATION	1.0517937220501311E-4	DESIGN
constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982276327617221	WITHOUT_CLASSIFICATION	0.0017723672382778564	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998776253399233	WITHOUT_CLASSIFICATION	1.2237466007665234E-4	DESIGN
criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999175824435271	WITHOUT_CLASSIFICATION	8.241755647285661E-5	DESIGN
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9995859896572568	WITHOUT_CLASSIFICATION	4.140103427432078E-4	DESIGN
inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999583807941123	WITHOUT_CLASSIFICATION	4.161920588769723E-4	DESIGN
constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982276327617221	WITHOUT_CLASSIFICATION	0.0017723672382778564	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998776253399233	WITHOUT_CLASSIFICATION	1.2237466007665234E-4	DESIGN
criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999175824435271	WITHOUT_CLASSIFICATION	8.241755647285661E-5	DESIGN
caches	WITHOUT_CLASSIFICATION	0.9997741563435107	WITHOUT_CLASSIFICATION	2.2584365648929084E-4	DESIGN
generators	WITHOUT_CLASSIFICATION	0.9997513558113361	WITHOUT_CLASSIFICATION	2.486441886638397E-4	DESIGN
cache region is defined by the root-class in the hierarchy	WITHOUT_CLASSIFICATION	0.9997470849913757	WITHOUT_CLASSIFICATION	2.529150086243914E-4	DESIGN
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9996124129781299	WITHOUT_CLASSIFICATION	3.875870218701272E-4	DESIGN
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999045676915131	WITHOUT_CLASSIFICATION	9.543230848691593E-5	DESIGN
if we get here it is possible that we have a proxy 'in the way' of the merge map resolution note decided to put this here rather than in the above loop as i was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9406446942871632	WITHOUT_CLASSIFICATION	0.05935530571283675	DESIGN
jndi + serialization	WITHOUT_CLASSIFICATION	0.9999450408323045	WITHOUT_CLASSIFICATION	5.495916769557709E-5	DESIGN
checking for named queries	WITHOUT_CLASSIFICATION	0.7745723695119494	WITHOUT_CLASSIFICATION	0.22542763048805045	DESIGN
stats	WITHOUT_CLASSIFICATION	0.9997627379045236	WITHOUT_CLASSIFICATION	2.3726209547639515E-4	DESIGN
entitynotfounddelegate	WITHOUT_CLASSIFICATION	0.9992182916705639	WITHOUT_CLASSIFICATION	7.817083294360349E-4	DESIGN
check named hql queries	WITHOUT_CLASSIFICATION	0.9989887665285825	WITHOUT_CLASSIFICATION	0.0010112334714175136	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.5507742440527952	DESIGN	0.4492257559472049	WITHOUT_CLASSIFICATION
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9855627355717121	WITHOUT_CLASSIFICATION	0.014437264428287815	DESIGN
from javax.naming.referenceable	WITHOUT_CLASSIFICATION	0.9994026697662626	WITHOUT_CLASSIFICATION	5.973302337373997E-4	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999610716983414	WITHOUT_CLASSIFICATION	3.8928301658574636E-5	DESIGN
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9992796587922076	WITHOUT_CLASSIFICATION	7.203412077923975E-4	DESIGN
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999643148508495	WITHOUT_CLASSIFICATION	3.568514915056859E-5	DESIGN
note early exit	WITHOUT_CLASSIFICATION	0.9996033672875285	WITHOUT_CLASSIFICATION	3.9663271247147305E-4	DESIGN
for backward-compatability	WITHOUT_CLASSIFICATION	0.9993582870213129	WITHOUT_CLASSIFICATION	6.417129786872052E-4	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9953631933979177	WITHOUT_CLASSIFICATION	0.00463680660208238	DESIGN
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9997480841766773	WITHOUT_CLASSIFICATION	2.5191582332276697E-4	DESIGN
in case we were deserialized in a different jvm look for an instance with the same name (alternatively we could do an actual jndi lookup here.)	WITHOUT_CLASSIFICATION	0.9250410204803855	WITHOUT_CLASSIFICATION	0.07495897951961444	DESIGN
must add to jndi _after_ adding to hashmaps because some jndi servers use serialization	WITHOUT_CLASSIFICATION	0.9991201921944424	WITHOUT_CLASSIFICATION	8.798078055575026E-4	DESIGN
make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9889835737145722	WITHOUT_CLASSIFICATION	0.011016426285427766	DESIGN
for each of the defined parameters make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999987135766655	WITHOUT_CLASSIFICATION	1.2864233345346434E-6	DESIGN
we never need to apply locks to the sql	WITHOUT_CLASSIFICATION	0.9987382760192113	WITHOUT_CLASSIFICATION	0.001261723980788694	DESIGN
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996001581790974	WITHOUT_CLASSIFICATION	3.9984182090262155E-4	DESIGN
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996972256520252	WITHOUT_CLASSIFICATION	3.02774347974704E-4	DESIGN
during deserialization we need to reconnect all proxies and collections to this session as well as the entityentry and collectionentry instances these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.6147582553579183	WITHOUT_CLASSIFICATION	0.3852417446420818	DESIGN
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997734688266575	WITHOUT_CLASSIFICATION	2.265311733424664E-4	DESIGN
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999504372150294	WITHOUT_CLASSIFICATION	4.9562784970607975E-5	DESIGN
final boolean forcecacherefresh	WITHOUT_CLASSIFICATION	0.9999284872284753	WITHOUT_CLASSIFICATION	7.151277152473467E-5	DESIGN
final boolean forcecacherefresh	WITHOUT_CLASSIFICATION	0.9999284872284753	WITHOUT_CLASSIFICATION	7.151277152473467E-5	DESIGN
first try to load it from the temp pc associated to this ss	WITHOUT_CLASSIFICATION	0.9998731155972063	WITHOUT_CLASSIFICATION	1.2688440279371468E-4	DESIGN
if the metadata allowed proxy creation and caller did not request forceful eager loading generate a proxy	WITHOUT_CLASSIFICATION	0.9999989002670817	WITHOUT_CLASSIFICATION	1.0997329182416132E-6	DESIGN
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9997065011686542	WITHOUT_CLASSIFICATION	2.934988313457519E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.999902946220599	WITHOUT_CLASSIFICATION	9.705377940090824E-5	DESIGN
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.998365173465303	WITHOUT_CLASSIFICATION	0.0016348265346970304	DESIGN
after setting values to object entitymode	WITHOUT_CLASSIFICATION	0.9999303859715243	WITHOUT_CLASSIFICATION	6.961402847574974E-5	DESIGN
for ejb3	WITHOUT_CLASSIFICATION	0.9997959047459228	WITHOUT_CLASSIFICATION	2.040952540772277E-4	DESIGN
just ignore	WITHOUT_CLASSIFICATION	0.9999006686466068	WITHOUT_CLASSIFICATION	9.933135339323708E-5	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9979117745790067	WITHOUT_CLASSIFICATION	0.00208822542099326	DESIGN
saveorupdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998736407234639	WITHOUT_CLASSIFICATION	1.263592765360648E-4	DESIGN
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998802532238327	WITHOUT_CLASSIFICATION	1.1974677616735504E-4	DESIGN
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998736407234639	WITHOUT_CLASSIFICATION	1.263592765360648E-4	DESIGN
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998736407234639	WITHOUT_CLASSIFICATION	1.263592765360648E-4	DESIGN
persistonflush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998736407234639	WITHOUT_CLASSIFICATION	1.263592765360648E-4	DESIGN
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999874077471818	WITHOUT_CLASSIFICATION	1.2592252818201282E-4	DESIGN
saveorupdatecopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998736407234639	WITHOUT_CLASSIFICATION	1.263592765360648E-4	DESIGN
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998693566961699	WITHOUT_CLASSIFICATION	1.3064330383009656E-4	DESIGN
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998736407234639	WITHOUT_CLASSIFICATION	1.263592765360648E-4	DESIGN
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998736407234639	WITHOUT_CLASSIFICATION	1.263592765360648E-4	DESIGN
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998736407234639	WITHOUT_CLASSIFICATION	1.263592765360648E-4	DESIGN
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9977990054797575	WITHOUT_CLASSIFICATION	0.0022009945202424424	DESIGN
this is an internal error of some sort	WITHOUT_CLASSIFICATION	0.9934710921810528	WITHOUT_CLASSIFICATION	0.006528907818947242	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9718033838364903	WITHOUT_CLASSIFICATION	0.02819661616350966	DESIGN
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999828545739927	WITHOUT_CLASSIFICATION	1.7145426007232446E-5	DESIGN
if it was previously unreferenced we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999149923040053	WITHOUT_CLASSIFICATION	8.500769599470792E-5	DESIGN
not for internal use	WITHOUT_CLASSIFICATION	0.9959501556635709	WITHOUT_CLASSIFICATION	0.004049844336429049	DESIGN
otherwise we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9977868118622653	WITHOUT_CLASSIFICATION	0.0022131881377348466	DESIGN
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9373216796313802	WITHOUT_CLASSIFICATION	0.06267832036861962	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9718033838364903	WITHOUT_CLASSIFICATION	0.02819661616350966	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9718033838364903	WITHOUT_CLASSIFICATION	0.02819661616350966	DESIGN
if it is initialized see if the underlying instance is contained since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.997043133770459	WITHOUT_CLASSIFICATION	0.00295686622954114	DESIGN
basically just an adapted copy of find(criteriaimpl)	WITHOUT_CLASSIFICATION	0.996153412798478	WITHOUT_CLASSIFICATION	0.00384658720152196	DESIGN
it is possible for this method to be called during flush processing so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9846962398820819	WITHOUT_CLASSIFICATION	0.015303760117918197	DESIGN
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9987654649050125	WITHOUT_CLASSIFICATION	0.0012345350949875375	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999489842950777	WITHOUT_CLASSIFICATION	5.1015704922245364E-5	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9953631933979177	WITHOUT_CLASSIFICATION	0.00463680660208238	DESIGN
we need to writeobject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9991085690507576	WITHOUT_CLASSIFICATION	8.914309492423399E-4	DESIGN
the old-time stand-by	WITHOUT_CLASSIFICATION	0.9995666923175818	WITHOUT_CLASSIFICATION	4.333076824182568E-4	DESIGN
parameter bind values	WITHOUT_CLASSIFICATION	0.9992511832545524	WITHOUT_CLASSIFICATION	7.488167454476209E-4	DESIGN
parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9939765473270904	WITHOUT_CLASSIFICATION	0.0060234526729096025	DESIGN
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999510698614884	WITHOUT_CLASSIFICATION	4.893013851154372E-5	DESIGN
execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992499356052537	WITHOUT_CLASSIFICATION	7.500643947462792E-4	DESIGN
we have a cglib enhanced entity	WITHOUT_CLASSIFICATION	0.9993495678746782	WITHOUT_CLASSIFICATION	6.504321253217792E-4	DESIGN
we have a cglib enhanced entity	WITHOUT_CLASSIFICATION	0.9993495678746782	WITHOUT_CLASSIFICATION	6.504321253217792E-4	DESIGN
we have a javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9993495678746782	WITHOUT_CLASSIFICATION	6.504321253217792E-4	DESIGN
we have a javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9993495678746782	WITHOUT_CLASSIFICATION	6.504321253217792E-4	DESIGN
fieldinterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998893986686817	WITHOUT_CLASSIFICATION	1.1060133131837324E-4	DESIGN
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9951421085524154	WITHOUT_CLASSIFICATION	0.004857891447584676	DESIGN
let's assume that there is only one lazy fetch group for now!	WITHOUT_CLASSIFICATION	0.9999955405774732	WITHOUT_CLASSIFICATION	4.459422526734345E-6	DESIGN
fieldhandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998893986686817	WITHOUT_CLASSIFICATION	1.1060133131837324E-4	DESIGN
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.785883609849868	WITHOUT_CLASSIFICATION	0.21411639015013184	DESIGN
should probably no-op commit/rollback here at least in jta scenarios	WITHOUT_CLASSIFICATION	0.8533946337171335	WITHOUT_CLASSIFICATION	0.14660536628286658	DESIGN
base expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999817263658297	WITHOUT_CLASSIFICATION	1.8273634170309818E-4	DESIGN
various expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999038402514523	WITHOUT_CLASSIFICATION	9.61597485478078E-5	DESIGN
explicitly perform no checking	WITHOUT_CLASSIFICATION	0.752691158385184	DESIGN	0.24730884161481595	WITHOUT_CLASSIFICATION
used from testsuite	WITHOUT_CLASSIFICATION	0.9273478079947846	WITHOUT_CLASSIFICATION	0.07265219200521546	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999222492645086	WITHOUT_CLASSIFICATION	7.775073549136667E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9990930432808648	WITHOUT_CLASSIFICATION	9.069567191352288E-4	DESIGN
register synch stats.connect()	WITHOUT_CLASSIFICATION	0.9996740405145064	WITHOUT_CLASSIFICATION	3.2595948549362275E-4	DESIGN
noncritical swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9989242096685853	WITHOUT_CLASSIFICATION	0.0010757903314146955	DESIGN
calls executebatch()	WITHOUT_CLASSIFICATION	0.9989968274852877	WITHOUT_CLASSIFICATION	0.0010031725147122649	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999811151049757	WITHOUT_CLASSIFICATION	1.888489502435074E-5	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999811151049757	WITHOUT_CLASSIFICATION	1.888489502435074E-5	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999811151049757	WITHOUT_CLASSIFICATION	1.888489502435074E-5	DESIGN
sybase driver (jconnect) throwing npe here in certain cases but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.999672001866153	WITHOUT_CLASSIFICATION	3.2799813384700414E-4	DESIGN
see explanation above	WITHOUT_CLASSIFICATION	0.9996342676831287	WITHOUT_CLASSIFICATION	3.6573231687130064E-4	DESIGN
if we are in the process of releasing no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.8360934449043615	WITHOUT_CLASSIFICATION	0.1639065550956384	DESIGN
early exit!!!!	WITHOUT_CLASSIFICATION	0.9997812213208523	WITHOUT_CLASSIFICATION	2.1877867914760912E-4	DESIGN
resultset impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999189350669359	WITHOUT_CLASSIFICATION	8.106493306418701E-5	DESIGN
resultset impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999189350669359	WITHOUT_CLASSIFICATION	8.106493306418701E-5	DESIGN
refer to comment in statefulpersistencecontext.addcollection()	WITHOUT_CLASSIFICATION	0.9999457973056962	WITHOUT_CLASSIFICATION	5.42026943036849E-5	DESIGN
connectionmanager.callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997684249707413	WITHOUT_CLASSIFICATION	2.315750292587581E-4	DESIGN
note success = false because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999902988080686	WITHOUT_CLASSIFICATION	9.701191931549105E-6	DESIGN
we already have a callback registered either a local (org.hibernate.transaction) transaction has accepted callback responsibilities or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999080001514468	WITHOUT_CLASSIFICATION	9.199984855325495E-5	DESIGN
the configured transaction-factory says it only supports local callback mode so no sense attempting to register a jta synchronization	WITHOUT_CLASSIFICATION	0.9915692589489925	WITHOUT_CLASSIFICATION	0.00843074105100748	DESIGN
transactions marked for rollback-only cause some tm impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9968588410588983	WITHOUT_CLASSIFICATION	0.0031411589411015793	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997278346794565	WITHOUT_CLASSIFICATION	2.7216532054357876E-4	DESIGN
postinitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.99997238527816	WITHOUT_CLASSIFICATION	2.7614721839938703E-5	DESIGN
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9998515894648409	WITHOUT_CLASSIFICATION	1.4841053515912375E-4	DESIGN
todo for 4.0 private static final logger log = loggerfactory.getlogger( sqlstatementlogger.class ) this is the legacy logging 'category'	WITHOUT_CLASSIFICATION	0.8654649710669381	WITHOUT_CLASSIFICATION	0.13453502893306182	DESIGN
note that for sequential scrolling we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9976869857472175	WITHOUT_CLASSIFICATION	0.00231301425278247	DESIGN
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9990788014545507	WITHOUT_CLASSIFICATION	9.211985454492731E-4	DESIGN
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9991495142741801	WITHOUT_CLASSIFICATION	8.504857258198231E-4	DESIGN
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999799324121852	WITHOUT_CLASSIFICATION	2.006758781485031E-5	DESIGN
sequentially read the result set in reverse until we recognize a change in the key value. at that point we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999299520138	WITHOUT_CLASSIFICATION	7.004798618142001E-8	DESIGN
read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999549486948	WITHOUT_CLASSIFICATION	4.505130519158585E-8	DESIGN
finally read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.999999941227941	WITHOUT_CLASSIFICATION	5.8772059087597375E-8	DESIGN
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999986470308103	WITHOUT_CLASSIFICATION	1.3529691896735286E-6	DESIGN
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9950976653285416	WITHOUT_CLASSIFICATION	0.0049023346714584986	DESIGN
this is equivalent to the old behavior	WITHOUT_CLASSIFICATION	0.9999056729922218	WITHOUT_CLASSIFICATION	9.43270077783113E-5	DESIGN
if null owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999664026581784	WITHOUT_CLASSIFICATION	3.3597341821637425E-5	DESIGN
final string querystring	WITHOUT_CLASSIFICATION	0.9998164060775419	WITHOUT_CLASSIFICATION	1.8359392245821982E-4	DESIGN
if it was a reference to self don't need to nullify unless we are using native id generation in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999698751420937	WITHOUT_CLASSIFICATION	3.0124857906288227E-5	DESIGN
end of array start filling again from start	WITHOUT_CLASSIFICATION	0.9999511255012973	WITHOUT_CLASSIFICATION	4.8874498702763926E-5	DESIGN
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to persistentcollection#endread) we scan the internal loadingcollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endread processing.	WITHOUT_CLASSIFICATION	0.9992978454692035	WITHOUT_CLASSIFICATION	7.021545307964456E-4	DESIGN
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999569226945088	WITHOUT_CLASSIFICATION	4.307730549122559E-5	DESIGN
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9984733047038137	WITHOUT_CLASSIFICATION	0.0015266952961863387	DESIGN
first we need to suspend any current jta transaction and obtain a jdbc connection	WITHOUT_CLASSIFICATION	0.9997077050002966	WITHOUT_CLASSIFICATION	2.9229499970332985E-4	DESIGN
getresultlist(results)	WITHOUT_CLASSIFICATION	0.9992182916705639	WITHOUT_CLASSIFICATION	7.817083294360349E-4	DESIGN
if we only returned one entity query by key is more efficient	WITHOUT_CLASSIFICATION	0.9993692022475018	WITHOUT_CLASSIFICATION	6.307977524982918E-4	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9995205038745207	WITHOUT_CLASSIFICATION	4.79496125479241E-4	DESIGN
handle empty collection	WITHOUT_CLASSIFICATION	0.9923808690229987	WITHOUT_CLASSIFICATION	0.0076191309770013635	DESIGN
else no collection element but also no owner	WITHOUT_CLASSIFICATION	0.9999961788462288	WITHOUT_CLASSIFICATION	3.821153771075502E-6	DESIGN
handle empty collections	WITHOUT_CLASSIFICATION	0.9959113872686908	WITHOUT_CLASSIFICATION	0.004088612731309189	DESIGN
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9971302754786315	WITHOUT_CLASSIFICATION	0.002869724521368473	DESIGN
validate() instances of validatable	WITHOUT_CLASSIFICATION	0.9997581940622137	WITHOUT_CLASSIFICATION	2.4180593778645124E-4	DESIGN
if we know there is exactly 1 row we can skip. it would be great if we could _always_ skip this it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.7281124579862003	WITHOUT_CLASSIFICATION	0.2718875420137996	DESIGN
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.992010382997648	WITHOUT_CLASSIFICATION	0.007989617002351991	DESIGN
null version means the object is in the process of being loaded somewhere else in the resultset	WITHOUT_CLASSIFICATION	0.999927280813027	WITHOUT_CLASSIFICATION	7.271918697300199E-5	DESIGN
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9826684037948888	WITHOUT_CLASSIFICATION	0.017331596205111204	DESIGN
use the id passed in	WITHOUT_CLASSIFICATION	0.9998284466065943	WITHOUT_CLASSIFICATION	1.7155339340578268E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9998583814615153	WITHOUT_CLASSIFICATION	1.4161853848462604E-4	DESIGN
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.999680750143671	WITHOUT_CLASSIFICATION	3.1924985632906193E-4	DESIGN
no point doing this if none was requested	WITHOUT_CLASSIFICATION	0.9999507885756537	WITHOUT_CLASSIFICATION	4.92114243463869E-5	DESIGN
if the object is already loaded return the loaded one	WITHOUT_CLASSIFICATION	0.9998448325056492	WITHOUT_CLASSIFICATION	1.5516749435095367E-4	DESIGN
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9994210382248235	WITHOUT_CLASSIFICATION	5.789617751764043E-4	DESIGN
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9996205685825649	WITHOUT_CLASSIFICATION	3.794314174351557E-4	DESIGN
the load() which takes an entity does not pass an entityname	WITHOUT_CLASSIFICATION	0.9999569901180482	WITHOUT_CLASSIFICATION	4.300988195189647E-5	DESIGN
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9989456869655665	WITHOUT_CLASSIFICATION	0.0010543130344334909	DESIGN
look for a proxy	WITHOUT_CLASSIFICATION	0.9998118284725425	WITHOUT_CLASSIFICATION	1.8817152745756268E-4	DESIGN
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9997217946966529	WITHOUT_CLASSIFICATION	2.7820530334715323E-4	DESIGN
its the given optional object	WITHOUT_CLASSIFICATION	0.9997793994301147	WITHOUT_CLASSIFICATION	2.2060056988532905E-4	DESIGN
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9981906184337953	WITHOUT_CLASSIFICATION	0.001809381566204695	DESIGN
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9994470224064743	WITHOUT_CLASSIFICATION	5.529775935256466E-4	DESIGN
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9980890574304268	WITHOUT_CLASSIFICATION	0.0019109425695733085	DESIGN
will be ignored using the existing entry instead	WITHOUT_CLASSIFICATION	0.9996668295986239	WITHOUT_CLASSIFICATION	3.3317040137603813E-4	DESIGN
key is an entity involved with the operation performed by the listener value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999990541708543	WITHOUT_CLASSIFICATION	9.458291456001835E-7	DESIGN
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9968081867183836	WITHOUT_CLASSIFICATION	0.0031918132816163474	DESIGN
get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.999628351308519	WITHOUT_CLASSIFICATION	3.7164869148100026E-4	DESIGN
ok in normal hibernate usage to delete a detached entity jpa however forbids it thus this is a hook for hem to affect this behavior	WITHOUT_CLASSIFICATION	0.9999318194475527	WITHOUT_CLASSIFICATION	6.818055244727323E-5	DESIGN
the entry will be removed after the flush and will no longer override the stale snapshot this is now handled by removeentity() in entitydeleteaction persistencecontext.removedatabasesnapshot(key)	WITHOUT_CLASSIFICATION	0.9964387409763431	WITHOUT_CLASSIFICATION	0.003561259023657015	DESIGN
addinitializedcollection(collection persister id)	WITHOUT_CLASSIFICATION	0.9989133605400607	WITHOUT_CLASSIFICATION	0.0010866394599392953	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9997960099380166	WITHOUT_CLASSIFICATION	2.0399006198337514E-4	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9997960099380166	WITHOUT_CLASSIFICATION	2.0399006198337514E-4	DESIGN
|| oj.getjoinable().consumescollectionalias()	WITHOUT_CLASSIFICATION	0.9997413476459135	WITHOUT_CLASSIFICATION	2.5865235408656064E-4	DESIGN
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9721714553517882	WITHOUT_CLASSIFICATION	0.02782854464821184	DESIGN
code to handle subclasses of topclass	WITHOUT_CLASSIFICATION	0.9983987438578714	WITHOUT_CLASSIFICATION	0.001601256142128647	DESIGN
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999620352889284	WITHOUT_CLASSIFICATION	3.796471107170939E-5	DESIGN
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999771941420352	WITHOUT_CLASSIFICATION	2.2805857964724964E-5	DESIGN
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9867502964324167	WITHOUT_CLASSIFICATION	0.013249703567583336	DESIGN
synchronized to avoid multi-thread access issues defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999286164675436	WITHOUT_CLASSIFICATION	7.138353245635108E-5	DESIGN
allows various loaders (ok mainly the queryloader ) to check whether scrolling of their result set should be allowed. by default it is allowed.	WITHOUT_CLASSIFICATION	0.9999583158509033	WITHOUT_CLASSIFICATION	4.1684149096723394E-5	DESIGN
before adding to collection!	WITHOUT_CLASSIFICATION	0.9994638766514253	WITHOUT_CLASSIFICATION	5.361233485746477E-4	DESIGN
if the current depth is 0 the root thing being loaded is the many-to-many collection itself. here it is alright to use an inner join	WITHOUT_CLASSIFICATION	0.9999862591976707	WITHOUT_CLASSIFICATION	1.3740802329225113E-5	DESIGN
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999998817477653	WITHOUT_CLASSIFICATION	1.1825223475385266E-7	DESIGN
simple because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element	WITHOUT_CLASSIFICATION	0.9999691151199149	WITHOUT_CLASSIFICATION	3.08848800851506E-5	DESIGN
a composite key	WITHOUT_CLASSIFICATION	0.9988395079671033	WITHOUT_CLASSIFICATION	0.0011604920328967014	DESIGN
if no batch use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9998020445385171	WITHOUT_CLASSIFICATION	1.979554614829705E-4	DESIGN
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9386245465467571	WITHOUT_CLASSIFICATION	0.061375453453242856	DESIGN
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9992839690170159	WITHOUT_CLASSIFICATION	7.160309829841211E-4	DESIGN
&& etype.isreferencetoprimarykey()	WITHOUT_CLASSIFICATION	0.9992181531842149	WITHOUT_CLASSIFICATION	7.818468157850773E-4	DESIGN
it might still need to apply a collection ordering based on a many-to-many defined order-by	WITHOUT_CLASSIFICATION	0.9099970960265371	WITHOUT_CLASSIFICATION	0.09000290397346293	DESIGN
if a composite key use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching todo unnecessary for databases with ansi-style joins	WITHOUT_CLASSIFICATION	0.5699149380853471	WITHOUT_CLASSIFICATION	0.4300850619146528	DESIGN
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9976556589186283	WITHOUT_CLASSIFICATION	0.0023443410813717216	DESIGN
we found it	WITHOUT_CLASSIFICATION	0.9996719908914292	WITHOUT_CLASSIFICATION	3.280091085708107E-4	DESIGN
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9998932086232281	WITHOUT_CLASSIFICATION	1.0679137677190803E-4	DESIGN
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9994547458313646	WITHOUT_CLASSIFICATION	5.452541686353053E-4	DESIGN
note unlike all other loaders this one is not multithreaded or cacheable!!	WITHOUT_CLASSIFICATION	0.9855958332473082	WITHOUT_CLASSIFICATION	0.014404166752691861	DESIGN
the user visible aliases which are unknown to the superclass these are not the actual "physical" sql aliases	WITHOUT_CLASSIFICATION	0.9999999114095609	WITHOUT_CLASSIFICATION	8.859043900676953E-8	DESIGN
root entity comes last	WITHOUT_CLASSIFICATION	0.9989147894268529	WITHOUT_CLASSIFICATION	0.001085210573147119	DESIGN
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.999954956567052	WITHOUT_CLASSIFICATION	4.504343294806026E-5	DESIGN
alias may be null early exit	WITHOUT_CLASSIFICATION	0.9998177506276763	WITHOUT_CLASSIFICATION	1.8224937232376445E-4	DESIGN
if it is a compound path	WITHOUT_CLASSIFICATION	0.9997023224385329	WITHOUT_CLASSIFICATION	2.9767756146710267E-4	DESIGN
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9989629193527336	WITHOUT_CLASSIFICATION	0.0010370806472663617	DESIGN
if its the root criteria we are done	WITHOUT_CLASSIFICATION	0.9999534999279435	WITHOUT_CLASSIFICATION	4.6500072056493556E-5	DESIGN
otherwise recurse	WITHOUT_CLASSIFICATION	0.9996505070286108	WITHOUT_CLASSIFICATION	3.494929713892714E-4	DESIGN
the criteria instance	WITHOUT_CLASSIFICATION	0.9998186659113908	WITHOUT_CLASSIFICATION	1.8133408860925514E-4	DESIGN
the entity name	WITHOUT_CLASSIFICATION	0.9995282772819465	WITHOUT_CLASSIFICATION	4.717227180536079E-4	DESIGN
not found in inner query try the outer query	WITHOUT_CLASSIFICATION	0.999920368242285	WITHOUT_CLASSIFICATION	7.963175771492854E-5	DESIGN
not found in inner query try the outer query	WITHOUT_CLASSIFICATION	0.999920368242285	WITHOUT_CLASSIFICATION	7.963175771492854E-5	DESIGN
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.999942582937732	WITHOUT_CLASSIFICATION	5.7417062267945645E-5	DESIGN
should never happen i think	WITHOUT_CLASSIFICATION	0.9926436057109558	WITHOUT_CLASSIFICATION	0.007356394289044194	DESIGN
detect discriminator values	WITHOUT_CLASSIFICATION	0.9998225708819507	WITHOUT_CLASSIFICATION	1.7742911804933883E-4	DESIGN
convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9984780010579071	WITHOUT_CLASSIFICATION	0.0015219989420928995	DESIGN
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9995772511835962	WITHOUT_CLASSIFICATION	4.2274881640385936E-4	DESIGN
it does not refer to an alias of a projection look for a property	WITHOUT_CLASSIFICATION	0.9997580482395277	WITHOUT_CLASSIFICATION	2.419517604723317E-4	DESIGN
otherwise this is an ordinary value.	WITHOUT_CLASSIFICATION	0.998571382941005	WITHOUT_CLASSIFICATION	0.0014286170589950852	DESIGN
currently not cachable if autodiscover types is in effect (e.g. "select ")	WITHOUT_CLASSIFICATION	0.9988415838804885	WITHOUT_CLASSIFICATION	0.0011584161195115274	DESIGN
private final string[] sqlaliases private final string[] sqlaliassuffixes	WITHOUT_CLASSIFICATION	0.9996940492600835	WITHOUT_CLASSIFICATION	3.0595073991649985E-4	DESIGN
this is only needed (afaict) for resulttransformer processing	WITHOUT_CLASSIFICATION	0.9987146778301652	WITHOUT_CLASSIFICATION	0.0012853221698348335	DESIGN
determine if the collection elements are entities	WITHOUT_CLASSIFICATION	0.9999644528039617	WITHOUT_CLASSIFICATION	3.554719603829877E-5	DESIGN
build an array with indices equal to the total number of actual returns in the result hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999699608452518	WITHOUT_CLASSIFICATION	3.0039154748166794E-5	DESIGN
replace {.} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9995784141240633	WITHOUT_CLASSIFICATION	4.215858759366392E-4	DESIGN
no additional open braces found in the string append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999409692907614	WITHOUT_CLASSIFICATION	5.9030709238724854E-5	DESIGN
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9995321684925027	WITHOUT_CLASSIFICATION	4.6783150749730664E-4	DESIGN
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999933216733072	WITHOUT_CLASSIFICATION	6.678326692777991E-6	DESIGN
passing through anything we do not know to support jdbc escape sequences hb-898	WITHOUT_CLASSIFICATION	0.9983055131799669	WITHOUT_CLASSIFICATION	0.0016944868200330278	DESIGN
passing through anything we do not know to support jdbc escape sequences hb-898	WITHOUT_CLASSIFICATION	0.9983055131799669	WITHOUT_CLASSIFICATION	0.0016944868200330278	DESIGN
the current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999530153933645	WITHOUT_CLASSIFICATION	4.698460663554774E-5	DESIGN
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9985367427782461	WITHOUT_CLASSIFICATION	0.0014632572217538567	DESIGN
possibly handle something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999493343879158	WITHOUT_CLASSIFICATION	5.066561208421207E-5	DESIGN
let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9997711648244456	WITHOUT_CLASSIFICATION	2.2883517555425734E-4	DESIGN
private final list persisters = new arraylist()	WITHOUT_CLASSIFICATION	0.9999125707933445	WITHOUT_CLASSIFICATION	8.742920665550486E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9990930432808648	WITHOUT_CLASSIFICATION	9.069567191352288E-4	DESIGN
note early exit!	WITHOUT_CLASSIFICATION	0.9990980771440015	WITHOUT_CLASSIFICATION	9.01922855998544E-4	DESIGN
private final list scalartypes = new arraylist() private final list scalarcolumnaliases = new arraylist()	WITHOUT_CLASSIFICATION	0.9999606653942289	WITHOUT_CLASSIFICATION	3.933460577102595E-5	DESIGN
now process the returns	WITHOUT_CLASSIFICATION	0.9997832804856776	WITHOUT_CLASSIFICATION	2.1671951432240512E-4	DESIGN
private list collectionowneraliases = new arraylist() private list collectionaliases = new arraylist() private list collectionpersisters = new arraylist() private list collectionresults = new arraylist()	WITHOUT_CLASSIFICATION	0.9998853102755793	WITHOUT_CLASSIFICATION	1.146897244206959E-4	DESIGN
already been processed	WITHOUT_CLASSIFICATION	0.9979334752789967	WITHOUT_CLASSIFICATION	0.002066524721003415	DESIGN
already been processed	WITHOUT_CLASSIFICATION	0.9979334752789967	WITHOUT_CLASSIFICATION	0.002066524721003415	DESIGN
make sure the owner alias is known	WITHOUT_CLASSIFICATION	0.999996036355899	WITHOUT_CLASSIFICATION	3.963644101024991E-6	DESIGN
first break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9964626596772738	WITHOUT_CLASSIFICATION	0.003537340322726363	DESIGN
scalarcolumnaliases.add( typereturn.getcolumnalias() ) scalartypes.add( typereturn.gettype() )	WITHOUT_CLASSIFICATION	0.9995634240702479	WITHOUT_CLASSIFICATION	4.3657592975215767E-4	DESIGN
if this return's alias has not been processed yet do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999416350734617	WITHOUT_CLASSIFICATION	5.8364926538304656E-5	DESIGN
collectionowneraliases.add( owneralias )	WITHOUT_CLASSIFICATION	0.9995634240702479	WITHOUT_CLASSIFICATION	4.3657592975215767E-4	DESIGN
for merging of versioned entities we consider the version having been changed only when 1) the two version values are different and 2) the target actually represents database state! this second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9991485022766057	WITHOUT_CLASSIFICATION	8.514977233942667E-4	DESIGN
this is the second pass through on a merge op so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9770109550881807	WITHOUT_CLASSIFICATION	0.022989044911819342	DESIGN
early exit	WITHOUT_CLASSIFICATION	0.9999432874518815	WITHOUT_CLASSIFICATION	5.671254811838867E-5	DESIGN
cascade-save to collections after the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999198957425548	WITHOUT_CLASSIFICATION	8.010425744520719E-5	DESIGN
initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9982090364310406	WITHOUT_CLASSIFICATION	0.0017909635689592875	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9993542051769105	WITHOUT_CLASSIFICATION	6.457948230894941E-4	DESIGN
currently only the hibernate-supplied dbtimestamptype is supported here	WITHOUT_CLASSIFICATION	0.999209955083578	WITHOUT_CLASSIFICATION	7.900449164220052E-4	DESIGN
this is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9203692830394398	WITHOUT_CLASSIFICATION	0.0796307169605602	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9980374667165514	WITHOUT_CLASSIFICATION	0.0019625332834485713	DESIGN
not so sure this is even valid subtree. but if it was it'd represent two unrelated table references	WITHOUT_CLASSIFICATION	0.9997414845832515	WITHOUT_CLASSIFICATION	2.585154167483895E-4	DESIGN
(not (gt a b) ) => (le a b)	WITHOUT_CLASSIFICATION	0.9657914902527437	WITHOUT_CLASSIFICATION	0.03420850974725631	DESIGN
private type[] sqlresulttypes	WITHOUT_CLASSIFICATION	0.9978366542652578	WITHOUT_CLASSIFICATION	0.0021633457347422177	DESIGN
include the discriminator and class-level where but not filters	WITHOUT_CLASSIFICATION	0.9999742887606001	WITHOUT_CLASSIFICATION	2.571123939981113E-5	DESIGN
sqlresulttypes = selectclause.getsqlresulttypes()	WITHOUT_CLASSIFICATION	0.9998987446571149	WITHOUT_CLASSIFICATION	1.0125534288497884E-4	DESIGN
by default	WITHOUT_CLASSIFICATION	0.9999554403641815	WITHOUT_CLASSIFICATION	4.455963581848901E-5	DESIGN
this is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9980424486469686	WITHOUT_CLASSIFICATION	0.001957551353031407	DESIGN
-- loader implementation --	WITHOUT_CLASSIFICATION	0.9994192784629897	WITHOUT_CLASSIFICATION	5.807215370103111E-4	DESIGN
-- loader overrides --	WITHOUT_CLASSIFICATION	0.9990685652300223	WITHOUT_CLASSIFICATION	9.314347699778529E-4	DESIGN
(not (is_null a b) ) => (is_not_null a b)	WITHOUT_CLASSIFICATION	0.9817678502195147	WITHOUT_CLASSIFICATION	0.018232149780485207	DESIGN
none because its the requested lock mode not the actual!	WITHOUT_CLASSIFICATION	0.9996583120401034	WITHOUT_CLASSIFICATION	3.4168795989660493E-4	DESIGN
meant to handle dynamic instantiation queries	WITHOUT_CLASSIFICATION	0.9993696945398786	WITHOUT_CLASSIFICATION	6.303054601214616E-4	DESIGN
--- query translator methods ---	WITHOUT_CLASSIFICATION	0.9996810507242243	WITHOUT_CLASSIFICATION	3.189492757756486E-4	DESIGN
-- implementation private methods --	WITHOUT_CLASSIFICATION	0.996935514378639	WITHOUT_CLASSIFICATION	0.0030644856213609553	DESIGN
deduplicate unique constraints sharing the same columns this is needed by hibernate annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999970955853974	WITHOUT_CLASSIFICATION	2.9044146025453756E-6	DESIGN
try to find out the name of the primary key to create it as identity if the identitygenerator is used	WITHOUT_CLASSIFICATION	0.9984135171124657	WITHOUT_CLASSIFICATION	0.0015864828875342565	DESIGN
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.998422926408416	WITHOUT_CLASSIFICATION	0.0015770735915839995	DESIGN
prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999995793873356	WITHOUT_CLASSIFICATION	4.206126643059195E-7	DESIGN
used also for generation of fk names!	WITHOUT_CLASSIFICATION	0.8729967078437674	WITHOUT_CLASSIFICATION	0.12700329215623266	DESIGN
usually useless	WITHOUT_CLASSIFICATION	0.9992507892382196	WITHOUT_CLASSIFICATION	7.492107617804387E-4	DESIGN
added this caching as i noticed that gettype() is being called multiple times	WITHOUT_CLASSIFICATION	0.9948982064972931	WITHOUT_CLASSIFICATION	0.005101793502706882	DESIGN
do not add unique constraint on db not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9970079868789604	WITHOUT_CLASSIFICATION	0.0029920131210395538	DESIGN
for backward compatibility disable this	WITHOUT_CLASSIFICATION	0.9992509940089246	WITHOUT_CLASSIFICATION	7.490059910753578E-4	DESIGN
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.998502413844969	WITHOUT_CLASSIFICATION	0.001497586155030946	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9985640621177132	WITHOUT_CLASSIFICATION	0.0014359378822867044	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9985640621177132	WITHOUT_CLASSIFICATION	0.0014359378822867044	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999718376777476	WITHOUT_CLASSIFICATION	2.816232225247621E-5	DESIGN
primary key constraint	WITHOUT_CLASSIFICATION	0.9974274864617433	WITHOUT_CLASSIFICATION	0.0025725135382566166	DESIGN
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.999736204456513	WITHOUT_CLASSIFICATION	2.637955434869246E-4	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9999401475077712	WITHOUT_CLASSIFICATION	5.985249222884945E-5	DESIGN
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9935831816569923	WITHOUT_CLASSIFICATION	0.006416818343007645	DESIGN
an identifier mapper => getkey will be included in the getnonduplicatedpropertyiterator() and checked later so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9993494411230105	WITHOUT_CLASSIFICATION	6.505588769894568E-4	DESIGN
if the hibernate-mapping did not specify a schema/catalog use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping or as params they will already be initialized and will override the values set here (they are in identifiergeneratorproperties)	WITHOUT_CLASSIFICATION	0.9997617988636751	WITHOUT_CLASSIFICATION	2.3820113632482727E-4	DESIGN
pass the entity-name if not a collection-id	WITHOUT_CLASSIFICATION	0.999928548063056	WITHOUT_CLASSIFICATION	7.145193694407926E-5	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999718376777476	WITHOUT_CLASSIFICATION	2.816232225247621E-5	DESIGN
primary key constraint	WITHOUT_CLASSIFICATION	0.9974274864617433	WITHOUT_CLASSIFICATION	0.0025725135382566166	DESIGN
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999739208716554	WITHOUT_CLASSIFICATION	2.6079128344642015E-5	DESIGN
needed to satisfy keyvalue	WITHOUT_CLASSIFICATION	0.9993992255421004	WITHOUT_CLASSIFICATION	6.007744578996903E-4	DESIGN
empty means no scoping	WITHOUT_CLASSIFICATION	0.9997058147296476	WITHOUT_CLASSIFICATION	2.941852703524352E-4	DESIGN
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999515340224926	WITHOUT_CLASSIFICATION	4.846597750736764E-5	DESIGN
if it is a formula index use the element columns in the pk	WITHOUT_CLASSIFICATION	0.9999650961722284	WITHOUT_CLASSIFICATION	3.490382777162292E-5	DESIGN
don't create a unique key 'cos some databases don't like a uk on nullable columns	WITHOUT_CLASSIFICATION	0.998439010204173	WITHOUT_CLASSIFICATION	0.0015609897958270918	DESIGN
arraylist list = new arraylist()list.addall( getkey().getconstraintcolumns() )list.addall( getindex().getconstraintcolumns() )getcollectiontable().createuniquekey(list)	WITHOUT_CLASSIFICATION	0.9999627601357226	WITHOUT_CLASSIFICATION	3.723986427739923E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.9997604232956353	WITHOUT_CLASSIFICATION	2.3957670436473624E-4	DESIGN
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.999825853146187	WITHOUT_CLASSIFICATION	1.7414685381312282E-4	DESIGN
todo we could just return all false	WITHOUT_CLASSIFICATION	0.9276433946116488	DESIGN	0.07235660538835124	WITHOUT_CLASSIFICATION
the case of a foreign key to something other than the pk is handled in createpropertyrefconstraints	WITHOUT_CLASSIFICATION	0.9985217884892946	WITHOUT_CLASSIFICATION	0.0014782115107054065	DESIGN
todo we could just return all false	WITHOUT_CLASSIFICATION	0.9276433946116488	DESIGN	0.07235660538835124	WITHOUT_CLASSIFICATION
if the property mapping consists of all formulas make it non-updateable	WITHOUT_CLASSIFICATION	0.9998748542647682	WITHOUT_CLASSIFICATION	1.2514573523191152E-4	DESIGN
columnupdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9997413476459135	WITHOUT_CLASSIFICATION	2.5865235408656064E-4	DESIGN
if the property mapping consists of all formulas make it insertable	WITHOUT_CLASSIFICATION	0.9998748542647682	WITHOUT_CLASSIFICATION	1.2514573523191152E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998547609496687	WITHOUT_CLASSIFICATION	1.4523905033117108E-4	DESIGN
expected type is intrinsic here	WITHOUT_CLASSIFICATION	0.9991177052184411	WITHOUT_CLASSIFICATION	8.822947815588032E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9997604232956353	WITHOUT_CLASSIFICATION	2.3957670436473624E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9997604232956353	WITHOUT_CLASSIFICATION	2.3957670436473624E-4	DESIGN
return memberpersister.getpropertytype(propertyname)	WITHOUT_CLASSIFICATION	0.999478554642549	WITHOUT_CLASSIFICATION	5.214453574510628E-4	DESIGN
return memberpersister.tocolumns(alias propertyname)	WITHOUT_CLASSIFICATION	0.9994797297541924	WITHOUT_CLASSIFICATION	5.202702458076084E-4	DESIGN
return memberpersister.gettype()	WITHOUT_CLASSIFICATION	0.999478554642549	WITHOUT_CLASSIFICATION	5.214453574510628E-4	DESIGN
&& !indexisformula	WITHOUT_CLASSIFICATION	0.9992503601009077	WITHOUT_CLASSIFICATION	7.496398990923036E-4	DESIGN
return !isonetomany()	WITHOUT_CLASSIFICATION	0.9990059114077462	WITHOUT_CLASSIFICATION	9.940885922538121E-4	DESIGN
instanceof associationtype	WITHOUT_CLASSIFICATION	0.9937547359743528	WITHOUT_CLASSIFICATION	0.0062452640256472625	DESIGN
we need to determine the best way to know that two joinables represent a single many-to-many	WITHOUT_CLASSIFICATION	0.6999909145212136	WITHOUT_CLASSIFICATION	0.3000090854787864	DESIGN
strip leading ''	WITHOUT_CLASSIFICATION	0.9998329732617954	WITHOUT_CLASSIFICATION	1.6702673820460402E-4	DESIGN
public boolean issubselectloadable()	WITHOUT_CLASSIFICATION	0.9992977582136461	WITHOUT_CLASSIFICATION	7.02241786353861E-4	DESIGN
key	WITHOUT_CLASSIFICATION	0.999856724672637	WITHOUT_CLASSIFICATION	1.432753273629742E-4	DESIGN
columns	WITHOUT_CLASSIFICATION	0.9999447883800747	WITHOUT_CLASSIFICATION	5.521161992533778E-5	DESIGN
sql statements	WITHOUT_CLASSIFICATION	0.9998930446733271	WITHOUT_CLASSIFICATION	1.0695532667298842E-4	DESIGN
extra information about the element type	WITHOUT_CLASSIFICATION	0.9995105562000028	WITHOUT_CLASSIFICATION	4.894437999972103E-4	DESIGN
types	WITHOUT_CLASSIFICATION	0.9997273708907358	WITHOUT_CLASSIFICATION	2.726291092641785E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999718376777476	WITHOUT_CLASSIFICATION	2.816232225247621E-5	DESIGN
private final string unquotedidentifiercolumnname	WITHOUT_CLASSIFICATION	0.999732903465649	WITHOUT_CLASSIFICATION	2.6709653435099957E-4	DESIGN
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9997193531584332	WITHOUT_CLASSIFICATION	2.806468415667912E-4	DESIGN
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9997444256759285	WITHOUT_CLASSIFICATION	2.555743240714335E-4	DESIGN
nativesql collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999389129764454	WITHOUT_CLASSIFICATION	6.10870235545055E-5	DESIGN
unquotedkeycolumnnames = stringhelper.unquote(keycolumnaliases)	WITHOUT_CLASSIFICATION	0.9998987446571149	WITHOUT_CLASSIFICATION	1.0125534288497884E-4	DESIGN
element	WITHOUT_CLASSIFICATION	0.9997681362821693	WITHOUT_CLASSIFICATION	2.3186371783062438E-4	DESIGN
nativesql collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999011373097609	WITHOUT_CLASSIFICATION	9.886269023904442E-5	DESIGN
index and row select	WITHOUT_CLASSIFICATION	0.9999895255359769	WITHOUT_CLASSIFICATION	1.0474464023178732E-5	DESIGN
nativesql collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999844186241748	WITHOUT_CLASSIFICATION	1.5581375825284412E-5	DESIGN
unquotedidentifiercolumnname = identifiercolumnalias	WITHOUT_CLASSIFICATION	0.9998987446571149	WITHOUT_CLASSIFICATION	1.0125534288497884E-4	DESIGN
unquotedidentifiercolumnname = null	WITHOUT_CLASSIFICATION	0.9999104193148279	WITHOUT_CLASSIFICATION	8.958068517201203E-5	DESIGN
generate the sql	WITHOUT_CLASSIFICATION	0.9998665715691691	WITHOUT_CLASSIFICATION	1.334284308308345E-4	DESIGN
for non-arrays we don't need to know the element class elementtype.returnedclass()	WITHOUT_CLASSIFICATION	0.9960112892265368	WITHOUT_CLASSIFICATION	0.003988710773463192	DESIGN
not all classpersisters implement propertymapping!	WITHOUT_CLASSIFICATION	0.9806702594199009	WITHOUT_CLASSIFICATION	0.019329740580099068	DESIGN
handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.991883562480908	WITHOUT_CLASSIFICATION	0.008116437519092018	DESIGN
handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9933283565110583	WITHOUT_CLASSIFICATION	0.00667164348894169	DESIGN
if there is a user-specified loader return that todo filters!?	WITHOUT_CLASSIFICATION	0.7759724468294183	WITHOUT_CLASSIFICATION	0.22402755317058162	DESIGN
take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9956043269148428	WITHOUT_CLASSIFICATION	0.004395673085157123	DESIGN
strip leading ''	WITHOUT_CLASSIFICATION	0.9998329732617954	WITHOUT_CLASSIFICATION	1.6702673820460402E-4	DESIGN
run a subquery loader	WITHOUT_CLASSIFICATION	0.9970515974931363	WITHOUT_CLASSIFICATION	0.002948402506863647	DESIGN
needed by arrays	WITHOUT_CLASSIFICATION	0.9995183679249797	WITHOUT_CLASSIFICATION	4.816320750202352E-4	DESIGN
todo something with formulas	WITHOUT_CLASSIFICATION	0.8891390293321756	DESIGN	0.11086097066782435	WITHOUT_CLASSIFICATION
an assertion	WITHOUT_CLASSIFICATION	0.9996589960001308	WITHOUT_CLASSIFICATION	3.4100399986926067E-4	DESIGN
remove all the old entries	WITHOUT_CLASSIFICATION	0.9999168245670192	WITHOUT_CLASSIFICATION	8.317543298077373E-5	DESIGN
create all the new entries	WITHOUT_CLASSIFICATION	0.9999028025083203	WITHOUT_CLASSIFICATION	9.719749167966592E-5	DESIGN
&& !indexisformula	WITHOUT_CLASSIFICATION	0.9992503601009077	WITHOUT_CLASSIFICATION	7.496398990923036E-4	DESIGN
&& !indexisformula	WITHOUT_CLASSIFICATION	0.9992503601009077	WITHOUT_CLASSIFICATION	7.496398990923036E-4	DESIGN
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999795096784955	WITHOUT_CLASSIFICATION	2.0490321504582392E-5	DESIGN
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999494794104136	WITHOUT_CLASSIFICATION	5.052058958640097E-5	DESIGN
==elementtype ??	WITHOUT_CLASSIFICATION	0.9977005746118542	WITHOUT_CLASSIFICATION	0.0022994253881457568	DESIGN
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999920680107296	WITHOUT_CLASSIFICATION	7.931989270466685E-6	DESIGN
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9987769320682984	WITHOUT_CLASSIFICATION	0.0012230679317016694	DESIGN
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9980609052533568	WITHOUT_CLASSIFICATION	0.0019390947466432064	DESIGN
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.95335666048807	WITHOUT_CLASSIFICATION	0.04664333951192999	DESIGN
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999850312938984	WITHOUT_CLASSIFICATION	1.4968706101505595E-5	DESIGN
buf.append( selectfragment( lhsalias "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9997255892043453	WITHOUT_CLASSIFICATION	2.7441079565471236E-4	DESIGN
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9998620191968927	WITHOUT_CLASSIFICATION	1.379808031073081E-4	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999674112250622	WITHOUT_CLASSIFICATION	3.2588774937804255E-4	DESIGN
private final string roottablename	WITHOUT_CLASSIFICATION	0.999732903465649	WITHOUT_CLASSIFICATION	2.6709653435099957E-4	DESIGN
initialization	WITHOUT_CLASSIFICATION	0.9999324061740652	WITHOUT_CLASSIFICATION	6.75938259348007E-5	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999718376777476	WITHOUT_CLASSIFICATION	2.816232225247621E-5	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999674112250622	WITHOUT_CLASSIFICATION	3.2588774937804255E-4	DESIGN
execute the sql	WITHOUT_CLASSIFICATION	0.9999282846691744	WITHOUT_CLASSIFICATION	7.171533082561626E-5	DESIGN
this could also just be true all the time	WITHOUT_CLASSIFICATION	0.980448968101015	WITHOUT_CLASSIFICATION	0.019551031898984977	DESIGN
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9998002211497866	WITHOUT_CLASSIFICATION	1.9977885021331182E-4	DESIGN
todo check this.	WITHOUT_CLASSIFICATION	0.5535689667223102	WITHOUT_CLASSIFICATION	0.4464310332776898	DESIGN
initialization	WITHOUT_CLASSIFICATION	0.9999324061740652	WITHOUT_CLASSIFICATION	6.75938259348007E-5	DESIGN
properties of this class including inherited properties	WITHOUT_CLASSIFICATION	0.9986569624790814	WITHOUT_CLASSIFICATION	0.0013430375209184998	DESIGN
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9998148149900332	WITHOUT_CLASSIFICATION	1.8518500996691104E-4	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9971633028858391	WITHOUT_CLASSIFICATION	0.0028366971141609585	DESIGN
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an sql case	WITHOUT_CLASSIFICATION	0.9999277704609589	WITHOUT_CLASSIFICATION	7.222953904110861E-5	DESIGN
multitables	WITHOUT_CLASSIFICATION	0.9996068946777141	WITHOUT_CLASSIFICATION	3.931053222858822E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999718376777476	WITHOUT_CLASSIFICATION	2.816232225247621E-5	DESIGN
subclass closure properties	WITHOUT_CLASSIFICATION	0.9950554688582804	WITHOUT_CLASSIFICATION	0.004944531141719645	DESIGN
subclasses	WITHOUT_CLASSIFICATION	0.9998378437906592	WITHOUT_CLASSIFICATION	1.6215620934077055E-4	DESIGN
( (column) model.gettable().getprimarykey().getcolumniterator().next() ).getname()	WITHOUT_CLASSIFICATION	0.999888676797541	WITHOUT_CLASSIFICATION	1.1132320245890116E-4	DESIGN
( (column) sc.gettable().getprimarykey().getcolumniterator().next() ).getname()	WITHOUT_CLASSIFICATION	0.999888676797541	WITHOUT_CLASSIFICATION	1.1132320245890116E-4	DESIGN
don't need subclass tables because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9613119441628827	WITHOUT_CLASSIFICATION	0.0386880558371173	DESIGN
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9967524335084559	WITHOUT_CLASSIFICATION	0.0032475664915440575	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999674112250622	WITHOUT_CLASSIFICATION	3.2588774937804255E-4	DESIGN
properties of this class including inherited properties	WITHOUT_CLASSIFICATION	0.9986569624790814	WITHOUT_CLASSIFICATION	0.0013430375209184998	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9971633028858391	WITHOUT_CLASSIFICATION	0.0028366971141609585	DESIGN
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9991673726907352	WITHOUT_CLASSIFICATION	8.326273092648366E-4	DESIGN
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9998693646684057	WITHOUT_CLASSIFICATION	1.306353315943015E-4	DESIGN
discriminator column	WITHOUT_CLASSIFICATION	0.999837974762109	WITHOUT_CLASSIFICATION	1.6202523789101396E-4	DESIGN
initialization	WITHOUT_CLASSIFICATION	0.9999324061740652	WITHOUT_CLASSIFICATION	6.75938259348007E-5	DESIGN
private final map propertytablenumbersbyname = new hashmap()	WITHOUT_CLASSIFICATION	0.9999281111099854	WITHOUT_CLASSIFICATION	7.188889001460992E-5	DESIGN
class + table	WITHOUT_CLASSIFICATION	0.9999480520465459	WITHOUT_CLASSIFICATION	5.194795345396835E-5	DESIGN
discriminator	WITHOUT_CLASSIFICATION	0.9996070754991574	WITHOUT_CLASSIFICATION	3.929245008426112E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9998574896175293	WITHOUT_CLASSIFICATION	1.4251038247074037E-4	DESIGN
subclasses	WITHOUT_CLASSIFICATION	0.9998378437906592	WITHOUT_CLASSIFICATION	1.6215620934077055E-4	DESIGN
execute the sql	WITHOUT_CLASSIFICATION	0.9999282846691744	WITHOUT_CLASSIFICATION	7.171533082561626E-5	DESIGN
joins	WITHOUT_CLASSIFICATION	0.99975305079621	WITHOUT_CLASSIFICATION	2.46949203790053E-4	DESIGN
propertytablenumbersbyname.put( prop.getname() join )	WITHOUT_CLASSIFICATION	0.9999727040278137	WITHOUT_CLASSIFICATION	2.7295972186340043E-5	DESIGN
access cached sql	WITHOUT_CLASSIFICATION	0.9999566134315546	WITHOUT_CLASSIFICATION	4.3386568445376024E-5	DESIGN
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9992055833930562	WITHOUT_CLASSIFICATION	7.944166069438087E-4	DESIGN
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999718570184176	WITHOUT_CLASSIFICATION	2.814298158234038E-5	DESIGN
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9998732467451104	WITHOUT_CLASSIFICATION	1.2675325488959436E-4	DESIGN
render the sql	WITHOUT_CLASSIFICATION	0.9997186700027032	WITHOUT_CLASSIFICATION	2.8132999729677313E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998547609496687	WITHOUT_CLASSIFICATION	1.4523905033117108E-4	DESIGN
moved up from abstractentitypersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9926154050367616	WITHOUT_CLASSIFICATION	0.007384594963238378	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995899993364952	WITHOUT_CLASSIFICATION	4.100006635047861E-4	DESIGN
the optional sql string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999886816652511	WITHOUT_CLASSIFICATION	1.1318334748841658E-5	DESIGN
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9968315976503627	WITHOUT_CLASSIFICATION	0.0031684023496373346	DESIGN
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9996313294755577	WITHOUT_CLASSIFICATION	3.686705244423419E-4	DESIGN
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9993568725134009	WITHOUT_CLASSIFICATION	6.431274865991994E-4	DESIGN
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9998412355174746	WITHOUT_CLASSIFICATION	1.587644825253718E-4	DESIGN
sql strings	WITHOUT_CLASSIFICATION	0.9996635816097211	WITHOUT_CLASSIFICATION	3.3641839027881594E-4	DESIGN
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999329004202255	WITHOUT_CLASSIFICATION	6.709957977444176E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9998574896175293	WITHOUT_CLASSIFICATION	1.4251038247074037E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995899993364952	WITHOUT_CLASSIFICATION	4.100006635047861E-4	DESIGN
identifier	WITHOUT_CLASSIFICATION	0.9997756459550702	WITHOUT_CLASSIFICATION	2.2435404492975982E-4	DESIGN
version	WITHOUT_CLASSIFICATION	0.9993447118294934	WITHOUT_CLASSIFICATION	6.55288170506699E-4	DESIGN
where string	WITHOUT_CLASSIFICATION	0.9999114903070682	WITHOUT_CLASSIFICATION	8.850969293181505E-5	DESIGN
subclass property closure	WITHOUT_CLASSIFICATION	0.9863781338032159	WITHOUT_CLASSIFICATION	0.013621866196784127	DESIGN
before add -)	WITHOUT_CLASSIFICATION	0.9998991267271755	WITHOUT_CLASSIFICATION	1.0087327282442152E-4	DESIGN
handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9990101057947784	WITHOUT_CLASSIFICATION	9.89894205221603E-4	DESIGN
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9998379027382868	WITHOUT_CLASSIFICATION	1.6209726171334884E-4	DESIGN
note early exit here	WITHOUT_CLASSIFICATION	0.9991943848117223	WITHOUT_CLASSIFICATION	8.056151882777264E-4	DESIGN
object have been loaded with setreadonly(true) hhh-2236	WITHOUT_CLASSIFICATION	0.9996806779708411	WITHOUT_CLASSIFICATION	3.1932202915875514E-4	DESIGN
note this assumes something about how propertyselectfragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9738732370276983	WITHOUT_CLASSIFICATION	0.02612676297230173	DESIGN
strip leading " "	WITHOUT_CLASSIFICATION	0.9998691556713144	WITHOUT_CLASSIFICATION	1.308443286856404E-4	DESIGN
if there is no resulting row return null	WITHOUT_CLASSIFICATION	0.9999857816411963	WITHOUT_CLASSIFICATION	1.4218358803599736E-5	DESIGN
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9996429134397402	WITHOUT_CLASSIFICATION	3.570865602598279E-4	DESIGN
null owner ok??	WITHOUT_CLASSIFICATION	0.999928106913989	WITHOUT_CLASSIFICATION	7.189308601097399E-5	DESIGN
null sql means that the only lazy properties are shared pk one-to-one associations which are handled differently in the type#nullsafeget code	WITHOUT_CLASSIFICATION	0.9999215037474598	WITHOUT_CLASSIFICATION	7.849625254012878E-5	DESIGN
create a new from node for the referenced class.	WITHOUT_CLASSIFICATION	0.9998962004531483	WITHOUT_CLASSIFICATION	1.0379954685170135E-4	DESIGN
the difficulty here is exactly what do we update in order to force the version to be incremented in the db	WITHOUT_CLASSIFICATION	0.908013010598801	WITHOUT_CLASSIFICATION	0.09198698940119897	DESIGN
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9992736763771476	WITHOUT_CLASSIFICATION	7.263236228523793E-4	DESIGN
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9984734348541524	WITHOUT_CLASSIFICATION	0.0015265651458475737	DESIGN
enable for hhh-440 which we don't like	WITHOUT_CLASSIFICATION	0.9996445917890537	WITHOUT_CLASSIFICATION	3.554082109463513E-4	DESIGN
aliases	WITHOUT_CLASSIFICATION	0.999808491036809	WITHOUT_CLASSIFICATION	1.9150896319095057E-4	DESIGN
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999320165574068	WITHOUT_CLASSIFICATION	6.798344259313292E-5	DESIGN
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9995056997243005	WITHOUT_CLASSIFICATION	4.943002756994388E-4	DESIGN
fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9979653626197472	WITHOUT_CLASSIFICATION	0.0020346373802528238	DESIGN
embedded composite ids ( alias.idname1 alias.idname2 )	WITHOUT_CLASSIFICATION	0.998840312469662	WITHOUT_CLASSIFICATION	0.0011596875303380657	DESIGN
todo skip formulas?	WITHOUT_CLASSIFICATION	0.6580588020808096	WITHOUT_CLASSIFICATION	0.3419411979191905	DESIGN
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.998832427407721	WITHOUT_CLASSIFICATION	0.0011675725922790099	DESIGN
do two passes for collection property-ref!	WITHOUT_CLASSIFICATION	0.9916916735420677	WITHOUT_CLASSIFICATION	0.008308326457932273	DESIGN
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999663428369749	WITHOUT_CLASSIFICATION	3.365716302506695E-5	DESIGN
todo eventually rowidname[j]	WITHOUT_CLASSIFICATION	0.6981423308629222	WITHOUT_CLASSIFICATION	0.3018576691370778	DESIGN
this is a property of the table which we are updating	WITHOUT_CLASSIFICATION	0.9994186057872725	WITHOUT_CLASSIFICATION	5.81394212727443E-4	DESIGN
special shortcut for id properties skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999135219480679	WITHOUT_CLASSIFICATION	8.647805193214032E-5	DESIGN
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999392436117925	WITHOUT_CLASSIFICATION	6.075638820754992E-5	DESIGN
nothing to do even if the operand is a parameter no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.7550435672914858	DESIGN	0.2449564327085141	WITHOUT_CLASSIFICATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9835883195504896	WITHOUT_CLASSIFICATION	0.016411680449510364	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9998346503333079	WITHOUT_CLASSIFICATION	1.6534966669206803E-4	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9997153642608689	WITHOUT_CLASSIFICATION	2.846357391310978E-4	DESIGN
more specifically "? [op] datetime" 1) if the operator is minus the param needs to be of some datetime type 2) if the operator is plus the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9938972714953525	WITHOUT_CLASSIFICATION	0.0061027285046475884	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9998346503333079	WITHOUT_CLASSIFICATION	1.6534966669206803E-4	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9835883195504896	WITHOUT_CLASSIFICATION	0.016411680449510364	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9997153642608689	WITHOUT_CLASSIFICATION	2.846357391310978E-4	DESIGN
add the primary key	WITHOUT_CLASSIFICATION	0.9998154965919551	WITHOUT_CLASSIFICATION	1.8450340804474874E-4	DESIGN
delegate already handles pk columns	WITHOUT_CLASSIFICATION	0.9999236680466026	WITHOUT_CLASSIFICATION	7.633195339735747E-5	DESIGN
we can't batch joined inserts especially not if it is an identity insert nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.999990712272532	WITHOUT_CLASSIFICATION	9.287727467990369E-6	DESIGN
render the sql query	WITHOUT_CLASSIFICATION	0.999903516392032	WITHOUT_CLASSIFICATION	9.648360796794688E-5	DESIGN
write the values of fields onto the prepared statement - we must use the state at the time the insert was issued (cos of foreign key constraints). not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9997256973667936	WITHOUT_CLASSIFICATION	2.7430263320644396E-4	DESIGN
todo shouldnt inserts be expectations.none?	WITHOUT_CLASSIFICATION	0.6013061051979566	DESIGN	0.39869389480204354	WITHOUT_CLASSIFICATION
don't bother trying to update we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9997876726761786	WITHOUT_CLASSIFICATION	2.1232732382144319E-4	DESIGN
if all fields are null we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9997009726501349	WITHOUT_CLASSIFICATION	2.9902734986508904E-4	DESIGN
there is probably a row there so try to update if no rows were updated we will find out	WITHOUT_CLASSIFICATION	0.9999927060634954	WITHOUT_CLASSIFICATION	7.293936504582743E-6	DESIGN
note updates to joined tables can't be batched	WITHOUT_CLASSIFICATION	0.9981961697468266	WITHOUT_CLASSIFICATION	0.0018038302531734683	DESIGN
starting index	WITHOUT_CLASSIFICATION	0.9998272957622261	WITHOUT_CLASSIFICATION	1.727042377738949E-4	DESIGN
now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9998487582342135	WITHOUT_CLASSIFICATION	1.5124176578647287E-4	DESIGN
write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9996528066424036	WITHOUT_CLASSIFICATION	3.4719335759643487E-4	DESIGN
render the sql query	WITHOUT_CLASSIFICATION	0.999903516392032	WITHOUT_CLASSIFICATION	9.648360796794688E-5	DESIGN
do the key. the key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9996677391303269	WITHOUT_CLASSIFICATION	3.3226086967303684E-4	DESIGN
we should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9990299200543414	WITHOUT_CLASSIFICATION	9.700799456586414E-4	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.993321031223808	WITHOUT_CLASSIFICATION	0.006678968776191967	DESIGN
note dirtyfields==null means we had no snapshot and we couldn't get one using select-before-update oldfields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyfields)	WITHOUT_CLASSIFICATION	0.9453714635091214	WITHOUT_CLASSIFICATION	0.05462853649087856	DESIGN
more specifically "datetime [op] ?" 1) if the operator is minus we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is plus the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9998933927842681	WITHOUT_CLASSIFICATION	1.0660721573186013E-4	DESIGN
for the case of dynamic-update="true" we need to generate the update sql	WITHOUT_CLASSIFICATION	0.9997628515363285	WITHOUT_CLASSIFICATION	2.3714846367138556E-4	DESIGN
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.8765199419277023	DESIGN	0.12348005807229757	WITHOUT_CLASSIFICATION
for the case of dynamic-update="false" or no snapshot we use the static sql	WITHOUT_CLASSIFICATION	0.9998890888310077	WITHOUT_CLASSIFICATION	1.1091116899229142E-4	DESIGN
if not "get" then try "is"	WITHOUT_CLASSIFICATION	0.9991001899058051	WITHOUT_CLASSIFICATION	8.998100941950044E-4	DESIGN
now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9997169626007999	WITHOUT_CLASSIFICATION	2.8303739920014216E-4	DESIGN
for the case of dynamic-insert="true" we need to generate the insert sql	WITHOUT_CLASSIFICATION	0.9997434411080209	WITHOUT_CLASSIFICATION	2.565588919790269E-4	DESIGN
for the case of dynamic-insert="true" we need to generate the insert sql	WITHOUT_CLASSIFICATION	0.9997434411080209	WITHOUT_CLASSIFICATION	2.565588919790269E-4	DESIGN
for the case of dynamic-insert="false" use the static sql	WITHOUT_CLASSIFICATION	0.9995142884892965	WITHOUT_CLASSIFICATION	4.8571151070360056E-4	DESIGN
for the case of dynamic-insert="false" use the static sql	WITHOUT_CLASSIFICATION	0.9995142884892965	WITHOUT_CLASSIFICATION	4.8571151070360056E-4	DESIGN
not supported	WITHOUT_CLASSIFICATION	0.9982326925377868	WITHOUT_CLASSIFICATION	0.0017673074622131554	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.993321031223808	WITHOUT_CLASSIFICATION	0.006678968776191967	DESIGN
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9993161148865969	WITHOUT_CLASSIFICATION	6.838851134032104E-4	DESIGN
otherwise utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9998694390114724	WITHOUT_CLASSIFICATION	1.3056098852755544E-4	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9923042531773089	WITHOUT_CLASSIFICATION	0.007695746822691178	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9923042531773089	WITHOUT_CLASSIFICATION	0.007695746822691178	DESIGN
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.999996969640707	WITHOUT_CLASSIFICATION	3.030359292929431E-6	DESIGN
notice that we skip the first table it is the driving table!	WITHOUT_CLASSIFICATION	0.9999642961074069	WITHOUT_CLASSIFICATION	3.5703892593079365E-5	DESIGN
we can inner join to superclass tables (the row must be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.999652126714091	WITHOUT_CLASSIFICATION	3.478732859090087E-4	DESIGN
skip the driving table	WITHOUT_CLASSIFICATION	0.9998741711191764	WITHOUT_CLASSIFICATION	1.2582888082350246E-4	DESIGN
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.7320733163571187	WITHOUT_CLASSIFICATION	0.2679266836428814	DESIGN
here we work under the following assumptions ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime always results in a double 3) datetime - {something other than datetime} always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999850874343	WITHOUT_CLASSIFICATION	1.4912565760074122E-8	DESIGN
render the where and from parts	WITHOUT_CLASSIFICATION	0.9993167909335694	WITHOUT_CLASSIFICATION	6.832090664305792E-4	DESIGN
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9039916692401907	WITHOUT_CLASSIFICATION	0.09600833075980934	DESIGN
now render the joins	WITHOUT_CLASSIFICATION	0.9993560756001999	WITHOUT_CLASSIFICATION	6.43924399800191E-4	DESIGN
this will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9993071800000292	WITHOUT_CLASSIFICATION	6.928199999708946E-4	DESIGN
now render the select clause	WITHOUT_CLASSIFICATION	0.9997931132333466	WITHOUT_CLASSIFICATION	2.068867666534185E-4	DESIGN
now tie it all together	WITHOUT_CLASSIFICATION	0.9996430297872044	WITHOUT_CLASSIFICATION	3.569702127955839E-4	DESIGN
insert/update/delete sql	WITHOUT_CLASSIFICATION	0.9996386473231382	WITHOUT_CLASSIFICATION	3.6135267686180375E-4	DESIGN
select sql	WITHOUT_CLASSIFICATION	0.9999456777409121	WITHOUT_CLASSIFICATION	5.432225908776904E-5	DESIGN
no need to check laziness dirty checking handles that	WITHOUT_CLASSIFICATION	0.6550137620221561	DESIGN	0.344986237977844	WITHOUT_CLASSIFICATION
fully resolve the map reference create implicit joins.	WITHOUT_CLASSIFICATION	0.9899750105266809	WITHOUT_CLASSIFICATION	0.01002498947331917	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.982553550569534	WITHOUT_CLASSIFICATION	0.01744644943046611	DESIGN
the basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999510355455183	WITHOUT_CLASSIFICATION	4.896445448174244E-5	DESIGN
for dialects which are known to not support ansi-sql row-value-constructor syntax we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9924513531369089	WITHOUT_CLASSIFICATION	0.007548646863091077	DESIGN
due to the complexity in initializing the selectclause do not generate one here. if it is not found simply return null also do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9307747089872394	WITHOUT_CLASSIFICATION	0.06922529101276056	DESIGN
check the version unsaved-value if appropriate	WITHOUT_CLASSIFICATION	0.9978377729329657	WITHOUT_CLASSIFICATION	0.0021622270670342138	DESIGN
let this take precedence if defined since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9993172152386649	WITHOUT_CLASSIFICATION	6.827847613351749E-4	DESIGN
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9991333317928824	WITHOUT_CLASSIFICATION	8.666682071176061E-4	DESIGN
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9992440577736731	WITHOUT_CLASSIFICATION	7.559422263268046E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.999902946220599	WITHOUT_CLASSIFICATION	9.705377940090824E-5	DESIGN
for property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9997404241089929	WITHOUT_CLASSIFICATION	2.595758910071532E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995899993364952	WITHOUT_CLASSIFICATION	4.100006635047861E-4	DESIGN
if there is no resulting row return null	WITHOUT_CLASSIFICATION	0.9999857816411963	WITHOUT_CLASSIFICATION	1.4218358803599736E-5	DESIGN
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999755936156005	WITHOUT_CLASSIFICATION	2.440638439946998E-5	DESIGN
if this from element is a collection and the path is a collection property (maxindex etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.99881390896647	WITHOUT_CLASSIFICATION	0.0011860910335298924	DESIGN
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999483905212119	WITHOUT_CLASSIFICATION	5.160947878810014E-4	DESIGN
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996328515703571	WITHOUT_CLASSIFICATION	3.6714842964292283E-4	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9999537044893967	WITHOUT_CLASSIFICATION	4.629551060339713E-5	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9999537044893967	WITHOUT_CLASSIFICATION	4.629551060339713E-5	DESIGN
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999969577882147	WITHOUT_CLASSIFICATION	3.0422117853048596E-6	DESIGN
try "get"	WITHOUT_CLASSIFICATION	0.9998932055122788	WITHOUT_CLASSIFICATION	1.0679448772116672E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9998583814615153	WITHOUT_CLASSIFICATION	1.4161853848462604E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9998583814615153	WITHOUT_CLASSIFICATION	1.4161853848462604E-4	DESIGN
should be safe to only ever expect entitypersister references here	WITHOUT_CLASSIFICATION	0.9982324307601134	WITHOUT_CLASSIFICATION	0.0017675692398865506	DESIGN
this page intentionally left blank )	WITHOUT_CLASSIFICATION	0.9997585555612202	WITHOUT_CLASSIFICATION	2.4144443877979153E-4	DESIGN
do not do anything	WITHOUT_CLASSIFICATION	0.9985181948492546	WITHOUT_CLASSIFICATION	0.0014818051507453317	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999489842950777	WITHOUT_CLASSIFICATION	5.1015704922245364E-5	DESIGN
cant instantiate	WITHOUT_CLASSIFICATION	0.9994038780696078	WITHOUT_CLASSIFICATION	5.961219303920665E-4	DESIGN
if it is a property of an embedded component invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999474551014229	WITHOUT_CLASSIFICATION	5.2544898577050486E-5	DESIGN
otherwise	WITHOUT_CLASSIFICATION	0.999773084260716	WITHOUT_CLASSIFICATION	2.2691573928413492E-4	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9981801281645577	WITHOUT_CLASSIFICATION	0.0018198718354423616	DESIGN
note interfaces is assumed to already contain hibernateproxy.class	WITHOUT_CLASSIFICATION	0.9965538841792061	WITHOUT_CLASSIFICATION	0.0034461158207938925	DESIGN
note interfaces is assumed to already contain hibernateproxy.class	WITHOUT_CLASSIFICATION	0.9965538841792061	WITHOUT_CLASSIFICATION	0.0034461158207938925	DESIGN
hhh-2481 make sure the callback gets cleared otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9966296840548422	WITHOUT_CLASSIFICATION	0.0033703159451578335	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9987248134031623	WITHOUT_CLASSIFICATION	0.0012751865968376034	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9987248134031623	WITHOUT_CLASSIFICATION	0.0012751865968376034	DESIGN
note interface is assumed to already contain hibernateproxy.class	WITHOUT_CLASSIFICATION	0.9785083667111151	WITHOUT_CLASSIFICATION	0.021491633288884846	DESIGN
interfaces arguments	WITHOUT_CLASSIFICATION	0.9998261267780437	WITHOUT_CLASSIFICATION	1.7387322195636554E-4	DESIGN
todo!	WITHOUT_CLASSIFICATION	0.9997513558113361	WITHOUT_CLASSIFICATION	2.486441886638397E-4	DESIGN
get the caller	WITHOUT_CLASSIFICATION	0.99985317462364	WITHOUT_CLASSIFICATION	1.4682537635997184E-4	DESIGN
get the caller principals	WITHOUT_CLASSIFICATION	0.9997079597402868	WITHOUT_CLASSIFICATION	2.920402597131835E-4	DESIGN
private static final alias default_alias = new alias(10 null)	WITHOUT_CLASSIFICATION	0.9999891469808353	WITHOUT_CLASSIFICATION	1.085301916472958E-5	DESIGN
needed to bump this up to dotnode because that is the only thing which currently knows about the property-ref path in the correct format it is either this or recurse over the dotnodes constructing the property path just like dotnode does internally	WITHOUT_CLASSIFICATION	0.9993176653047606	WITHOUT_CLASSIFICATION	6.823346952393127E-4	DESIGN
if the identifier is quoted remove the quotes	WITHOUT_CLASSIFICATION	0.9993045462956431	WITHOUT_CLASSIFICATION	6.954537043568172E-4	DESIGN
truncate the identifier to the max alias length less the suffix length	WITHOUT_CLASSIFICATION	0.9999985624431637	WITHOUT_CLASSIFICATION	1.4375568364140156E-6	DESIGN
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9957416668647459	WITHOUT_CLASSIFICATION	0.004258333135254095	DESIGN
null is not considered the same type as integer. $non-nls-1 $non-nls-1	WITHOUT_CLASSIFICATION	0.9994540558669915	WITHOUT_CLASSIFICATION	5.459441330085327E-4	DESIGN
the outerjoinsafterwhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9998240541807237	WITHOUT_CLASSIFICATION	1.7594581927630389E-4	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.9997550865754945	WITHOUT_CLASSIFICATION	2.4491342450547686E-4	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.9997550865754945	WITHOUT_CLASSIFICATION	2.4491342450547686E-4	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.9997550865754945	WITHOUT_CLASSIFICATION	2.4491342450547686E-4	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.9997550865754945	WITHOUT_CLASSIFICATION	2.4491342450547686E-4	DESIGN
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9998755545514555	WITHOUT_CLASSIFICATION	1.244454485444278E-4	DESIGN
if the condition is not already there	WITHOUT_CLASSIFICATION	0.9995921047622436	WITHOUT_CLASSIFICATION	4.0789523775644715E-4	DESIGN
dontspace.add("'")	WITHOUT_CLASSIFICATION	0.9996068946777141	WITHOUT_CLASSIFICATION	3.931053222858822E-4	DESIGN
for mysql	WITHOUT_CLASSIFICATION	0.9998436081629888	WITHOUT_CLASSIFICATION	1.563918370112483E-4	DESIGN
hashmap columnsunique = new hashmap()	WITHOUT_CLASSIFICATION	0.9999678611361837	WITHOUT_CLASSIFICATION	3.2138863816263835E-5	DESIGN
null caused some problems	WITHOUT_CLASSIFICATION	0.997208845759276	WITHOUT_CLASSIFICATION	0.00279115424072405	DESIGN
package	WITHOUT_CLASSIFICATION	0.9990930432808648	WITHOUT_CLASSIFICATION	9.069567191352288E-4	DESIGN
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999005540523184	WITHOUT_CLASSIFICATION	9.944594768166548E-5	DESIGN
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9970010454604775	WITHOUT_CLASSIFICATION	0.002998954539522527	DESIGN
package	WITHOUT_CLASSIFICATION	0.9990930432808648	WITHOUT_CLASSIFICATION	9.069567191352288E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9990930432808648	WITHOUT_CLASSIFICATION	9.069567191352288E-4	DESIGN
if true then execute db updates otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9994448238205685	WITHOUT_CLASSIFICATION	5.55176179431452E-4	DESIGN
we only release the connection	WITHOUT_CLASSIFICATION	0.9964898539133932	WITHOUT_CLASSIFICATION	0.003510146086606923	DESIGN
deprecated option	WITHOUT_CLASSIFICATION	0.9989463687751149	WITHOUT_CLASSIFICATION	0.001053631224885165	DESIGN
if an exception occurs during flush user must call rollback()	WITHOUT_CLASSIFICATION	0.9999722818860384	WITHOUT_CLASSIFICATION	2.7718113961598467E-5	DESIGN
actually this last test is probably unnecessary since beforecompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.99998891182155	WITHOUT_CLASSIFICATION	1.1088178449962168E-5	DESIGN
this one only really needed for badly-behaved applications! (if the transactionmanager has a sychronization registered its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9987525782249635	WITHOUT_CLASSIFICATION	0.0012474217750363785	DESIGN
create an dotnode ast for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9998388503835408	WITHOUT_CLASSIFICATION	1.611496164591018E-4	DESIGN
if an exception occurs during flush user must call rollback()	WITHOUT_CLASSIFICATION	0.9999722818860384	WITHOUT_CLASSIFICATION	2.7718113961598467E-5	DESIGN
if we could not register a synchronization do the before/after completion callbacks ourself (but we need to let jdbccontext know that this is what we are going to do so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9816067189515171	DESIGN	0.018393281048482996	WITHOUT_CLASSIFICATION
swallow it and continue to roll back jta transaction	WITHOUT_CLASSIFICATION	0.9997680336770313	WITHOUT_CLASSIFICATION	2.3196632296877296E-4	DESIGN
so the transaction is already rolled back by jta spec	WITHOUT_CLASSIFICATION	0.9999643852647747	WITHOUT_CLASSIFICATION	3.5614735225364885E-5	DESIGN
this method is a noop if there is a synchronization!	WITHOUT_CLASSIFICATION	0.998899696331387	WITHOUT_CLASSIFICATION	0.0011003036686129304	DESIGN
two conditions where we need to transform this to a theta-join syntax 1) 'elem' is the "root from-element" in correlated subqueries 2) the dotnode.usethetastyleimplicitjoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.999894049501456	WITHOUT_CLASSIFICATION	1.0595049854398744E-4	DESIGN
websphere however is not a sane jee/jta container	WITHOUT_CLASSIFICATION	0.9995465384738298	WITHOUT_CLASSIFICATION	4.534615261702044E-4	DESIGN
for sane jee/jta containers the transaction itself functions as its identifier	WITHOUT_CLASSIFICATION	0.9999710051954864	WITHOUT_CLASSIFICATION	2.89948045135903E-5	DESIGN
swallow the transaction was finished	WITHOUT_CLASSIFICATION	0.9999693547206219	WITHOUT_CLASSIFICATION	3.064527937814458E-5	DESIGN
all aliastoentitymapresulttransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999685080670462	WITHOUT_CLASSIFICATION	3.149193295391395E-5	DESIGN
create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999275168160044	WITHOUT_CLASSIFICATION	7.248318399565192E-5	DESIGN
all distinctrootentityresulttransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999685080670462	WITHOUT_CLASSIFICATION	3.149193295391395E-5	DESIGN
map of entitymode -> tuplizer	WITHOUT_CLASSIFICATION	0.9999568376101481	WITHOUT_CLASSIFICATION	4.3162389851855955E-5	DESIGN
this is a virtual id property	WITHOUT_CLASSIFICATION	0.9883468994481065	WITHOUT_CLASSIFICATION	0.011653100551893444	DESIGN
this one needed only for guessentitymode()	WITHOUT_CLASSIFICATION	0.9989799119378291	WITHOUT_CLASSIFICATION	0.001020088062170915	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999797647425338	WITHOUT_CLASSIFICATION	2.0235257466196714E-4	DESIGN
todo move this to sf per hhh-3517 also see hhh-1907 and componentmetamodel	WITHOUT_CLASSIFICATION	0.999283542884687	DESIGN	7.164571153129923E-4	WITHOUT_CLASSIFICATION
then the pojo tuplizer using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999556722452254	WITHOUT_CLASSIFICATION	4.432775477457258E-5	DESIGN
build the dynamic-map tuplizer	WITHOUT_CLASSIFICATION	0.9993689976284629	WITHOUT_CLASSIFICATION	6.310023715371861E-4	DESIGN
then dom4j tuplizer if dom4j representation is available	WITHOUT_CLASSIFICATION	0.999762178711706	WITHOUT_CLASSIFICATION	2.3782128829401885E-4	DESIGN
build the dynamic-map tuplizer	WITHOUT_CLASSIFICATION	0.9993689976284629	WITHOUT_CLASSIFICATION	6.310023715371861E-4	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999588826638381	WITHOUT_CLASSIFICATION	4.1117336161959285E-5	DESIGN
found a ctor but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999618562064001	WITHOUT_CLASSIFICATION	3.814379359988556E-5	DESIGN
private final sessionfactoryimplementor sessionfactory	WITHOUT_CLASSIFICATION	0.9996103334984056	WITHOUT_CLASSIFICATION	3.896665015944758E-4	DESIGN
cached for efficiency	WITHOUT_CLASSIFICATION	0.9998394585010038	WITHOUT_CLASSIFICATION	1.605414989962778E-4	DESIGN
public componentmetamodel(component component sessionfactoryimplementor sessionfactory) {	WITHOUT_CLASSIFICATION	0.9994215413935083	WITHOUT_CLASSIFICATION	5.784586064916847E-4	DESIGN
this.sessionfactory = sessionfactory	WITHOUT_CLASSIFICATION	0.9998987446571149	WITHOUT_CLASSIFICATION	1.0125534288497884E-4	DESIGN
it was not embedded so the argument is just an id	WITHOUT_CLASSIFICATION	0.9988791141230212	WITHOUT_CLASSIFICATION	0.00112088587697886	DESIGN
then the pojo tuplizer using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999556722452254	WITHOUT_CLASSIFICATION	4.432775477457258E-5	DESIGN
then dom4j tuplizer if dom4j representation is available	WITHOUT_CLASSIFICATION	0.999762178711706	WITHOUT_CLASSIFICATION	2.3782128829401885E-4	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999588826638381	WITHOUT_CLASSIFICATION	4.1117336161959285E-5	DESIGN
then handle any user-defined entity modes	WITHOUT_CLASSIFICATION	0.9973884445798731	WITHOUT_CLASSIFICATION	0.002611555420126825	DESIGN
return currentid	WITHOUT_CLASSIFICATION	0.9995000401089557	WITHOUT_CLASSIFICATION	4.999598910442994E-4	DESIGN
reset the id	WITHOUT_CLASSIFICATION	0.9997280656910852	WITHOUT_CLASSIFICATION	2.7193430891481315E-4	DESIGN
origin.adddestination( destination ) this was the cause of hhh-242 origin.settype( from_fragment ) set the parent node type so that the ast is properly formed. the destination node will have all the from text. the parent node is a collection join too (voodoo - see joinprocessor)	WITHOUT_CLASSIFICATION	0.9994100773884764	WITHOUT_CLASSIFICATION	5.899226115234964E-4	DESIGN
reset the version	WITHOUT_CLASSIFICATION	0.9992246683366635	WITHOUT_CLASSIFICATION	7.753316633365482E-4	DESIGN
the default is to simply not lazy fetch properties for now	WITHOUT_CLASSIFICATION	0.9989524437790115	WITHOUT_CLASSIFICATION	0.0010475562209885758	DESIGN
add the second join the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999902241188595	WITHOUT_CLASSIFICATION	9.775881140598764E-6	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.982553550569534	WITHOUT_CLASSIFICATION	0.01744644943046611	DESIGN
found a ctor but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999618562064001	WITHOUT_CLASSIFICATION	3.814379359988556E-5	DESIGN
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9998769389369034	WITHOUT_CLASSIFICATION	1.230610630965541E-4	DESIGN
return getfactory().getsettings().getbytecodeprovider().getproxyfactoryfactory().buildproxyfactory()	WITHOUT_CLASSIFICATION	0.999478554642549	WITHOUT_CLASSIFICATION	5.214453574510628E-4	DESIGN
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.99993520161176	WITHOUT_CLASSIFICATION	6.479838824002568E-5	DESIGN
superclass entity-name	WITHOUT_CLASSIFICATION	0.9998491017660294	WITHOUT_CLASSIFICATION	1.5089823397060082E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.982553550569534	WITHOUT_CLASSIFICATION	0.01744644943046611	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995899993364952	WITHOUT_CLASSIFICATION	4.100006635047861E-4	DESIGN
init the aliases after initing the constructornode	WITHOUT_CLASSIFICATION	0.9998877811220704	WITHOUT_CLASSIFICATION	1.12218877929517E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.982553550569534	WITHOUT_CLASSIFICATION	0.01744644943046611	DESIGN
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9998167864754556	WITHOUT_CLASSIFICATION	1.83213524544373E-4	DESIGN
get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998215005545671	WITHOUT_CLASSIFICATION	1.7849944543277293E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995899993364952	WITHOUT_CLASSIFICATION	4.100006635047861E-4	DESIGN
note this affects the return value!	WITHOUT_CLASSIFICATION	0.9967070969289016	WITHOUT_CLASSIFICATION	0.003292903071098356	DESIGN
need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9998873415661662	WITHOUT_CLASSIFICATION	1.1265843383376374E-4	DESIGN
add the type to the list of returned sqlresulttypes.	WITHOUT_CLASSIFICATION	0.9999108024741686	WITHOUT_CLASSIFICATION	8.919752583129716E-5	DESIGN
collection types	WITHOUT_CLASSIFICATION	0.999278426129953	WITHOUT_CLASSIFICATION	7.21573870046969E-4	DESIGN
convenience methods relating to operations across arrays of types	WITHOUT_CLASSIFICATION	0.9998849533735058	WITHOUT_CLASSIFICATION	1.1504662649428272E-4	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9997814787234975	WITHOUT_CLASSIFICATION	2.1852127650236617E-4	DESIGN
blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9998996072804857	WITHOUT_CLASSIFICATION	1.0039271951425616E-4	DESIGN
value is the entity name	WITHOUT_CLASSIFICATION	0.999732359499412	WITHOUT_CLASSIFICATION	2.676405005879883E-4	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9997960099380166	WITHOUT_CLASSIFICATION	2.0399006198337514E-4	DESIGN
generate id select fragment and then property select fragment for each expression just like generateselectfragments().	WITHOUT_CLASSIFICATION	0.9894520782020575	WITHOUT_CLASSIFICATION	0.010547921797942525	DESIGN
todo!	WITHOUT_CLASSIFICATION	0.9997513558113361	WITHOUT_CLASSIFICATION	2.486441886638397E-4	DESIGN
xml is the entity name	WITHOUT_CLASSIFICATION	0.9983103634496291	WITHOUT_CLASSIFICATION	0.0016896365503710161	DESIGN
special case this is the leaf of the containment graph even though not immutable	WITHOUT_CLASSIFICATION	0.996548940312681	WITHOUT_CLASSIFICATION	0.0034510596873190053	DESIGN
tolerates nulls	WITHOUT_CLASSIFICATION	0.9997974909629525	WITHOUT_CLASSIFICATION	2.0250903704754488E-4	DESIGN
sqlresulttypelist	WITHOUT_CLASSIFICATION	0.9996068946777141	WITHOUT_CLASSIFICATION	3.931053222858822E-4	DESIGN
metatype is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.997734711350862	WITHOUT_CLASSIFICATION	0.00226528864913799	DESIGN
get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9995001246777739	WITHOUT_CLASSIFICATION	4.998753222261009E-4	DESIGN
look through the fromelement's children to find any collections of values that should be fetched	WITHOUT_CLASSIFICATION	0.9973784965260121	WITHOUT_CLASSIFICATION	0.002621503473987929	DESIGN
return associationtype.foreign_key_to_parent this is better but causes a transient object exception	WITHOUT_CLASSIFICATION	0.5720295558225342	WITHOUT_CLASSIFICATION	0.42797044417746577	DESIGN
use the lower case function name. remember whether we're in a select clause or not.	WITHOUT_CLASSIFICATION	0.9997629017347708	WITHOUT_CLASSIFICATION	2.3709826522919715E-4	DESIGN
ident might be the name of a class.	WITHOUT_CLASSIFICATION	0.9865727266160675	WITHOUT_CLASSIFICATION	0.013427273383932604	DESIGN
todo!!!	WITHOUT_CLASSIFICATION	0.9997513558113361	WITHOUT_CLASSIFICATION	2.486441886638397E-4	DESIGN
st.settimestamp( index new timestamp( cal.gettimeinmillis() ) cal ) jdk 1.5 only	WITHOUT_CLASSIFICATION	0.999919428057471	WITHOUT_CLASSIFICATION	8.05719425289772E-5	DESIGN
st.setdate( index new date( cal.gettimeinmillis() ) cal ) jdk 1.5 only	WITHOUT_CLASSIFICATION	0.999919428057471	WITHOUT_CLASSIFICATION	8.05719425289772E-5	DESIGN
both are timestamps	WITHOUT_CLASSIFICATION	0.9992644917089799	WITHOUT_CLASSIFICATION	7.355082910201486E-4	DESIGN
at least one is a plain old date	WITHOUT_CLASSIFICATION	0.9998480091271752	WITHOUT_CLASSIFICATION	1.5199087282480238E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9998619950620453	WITHOUT_CLASSIFICATION	1.3800493795467647E-4	DESIGN
if the corresponding sql value is null the reader we got is null as well	WITHOUT_CLASSIFICATION	0.9999996895639339	WITHOUT_CLASSIFICATION	3.104360659825123E-7	DESIGN
fetch reader content up to the end - and put characters in a stringbuffer	WITHOUT_CLASSIFICATION	0.9990506915278362	WITHOUT_CLASSIFICATION	9.493084721637462E-4	DESIGN
return stringbuffer content as a large string	WITHOUT_CLASSIFICATION	0.9999549043853229	WITHOUT_CLASSIFICATION	4.509561467718926E-5	DESIGN
or types.longvarchar?	WITHOUT_CLASSIFICATION	0.9997858208097816	WITHOUT_CLASSIFICATION	2.1417919021824932E-4	DESIGN
not called at runtime so doesn't matter if its slow )	WITHOUT_CLASSIFICATION	0.9998977029961416	WITHOUT_CLASSIFICATION	1.0229700385838942E-4	DESIGN
todo	WITHOUT_CLASSIFICATION	0.7081495804253074	WITHOUT_CLASSIFICATION	0.2918504195746925	DESIGN
chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9996992590816468	WITHOUT_CLASSIFICATION	3.007409183531468E-4	DESIGN
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9993167898091699	WITHOUT_CLASSIFICATION	6.832101908300488E-4	DESIGN
cache this	WITHOUT_CLASSIFICATION	0.9954489250932961	WITHOUT_CLASSIFICATION	0.004551074906703912	DESIGN
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9989103051879953	WITHOUT_CLASSIFICATION	0.0010896948120047193	DESIGN
forcefully remove leading ands from where fragments the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9996033785422785	WITHOUT_CLASSIFICATION	3.9662145772144353E-4	DESIGN
todo!!!!!!!	WITHOUT_CLASSIFICATION	0.9996068946777141	WITHOUT_CLASSIFICATION	3.931053222858822E-4	DESIGN
create a new filters node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9997493188249664	WITHOUT_CLASSIFICATION	2.50681175033548E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995899993364952	WITHOUT_CLASSIFICATION	4.100006635047861E-4	DESIGN
public object instantiate(object parent sessionimplementor session) throws hibernateexception	WITHOUT_CLASSIFICATION	0.9957134545526299	WITHOUT_CLASSIFICATION	0.0042865454473700266	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9997504492493128	WITHOUT_CLASSIFICATION	2.4955075068721386E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9997504492493128	WITHOUT_CLASSIFICATION	2.4955075068721386E-4	DESIGN
versiontype impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ note simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the timestamp datatype supported by sybase and sql server which are completely db-generated values	WITHOUT_CLASSIFICATION	0.9999975111133076	WITHOUT_CLASSIFICATION	2.488886692391378E-6	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9997814787234975	WITHOUT_CLASSIFICATION	2.1852127650236617E-4	DESIGN
not really necessary i guess	WITHOUT_CLASSIFICATION	0.560410209072069	WITHOUT_CLASSIFICATION	0.439589790927931	DESIGN
clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999952119404014	WITHOUT_CLASSIFICATION	4.788059598569413E-6	DESIGN
we do not have to worry about queued additions to uninitialized collections since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999658629570809	WITHOUT_CLASSIFICATION	3.4137042919080774E-5	DESIGN
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9998043219331256	WITHOUT_CLASSIFICATION	1.956780668742852E-4	DESIGN
remember the uk value	WITHOUT_CLASSIFICATION	0.9957664773655197	WITHOUT_CLASSIFICATION	0.004233522634480269	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9998619950620453	WITHOUT_CLASSIFICATION	1.3800493795467647E-4	DESIGN
processcollectionproperty(token q.getcollectionpersister(collectionrole) collectionname)	WITHOUT_CLASSIFICATION	0.9995899993364952	WITHOUT_CLASSIFICATION	4.100006635047861E-4	DESIGN
we must use the "remembered" uk value since it is not available from the entityentry during assembly	WITHOUT_CLASSIFICATION	0.9993994337969061	WITHOUT_CLASSIFICATION	6.005662030938459E-4	DESIGN
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9971910410158968	WITHOUT_CLASSIFICATION	0.00280895898410313	DESIGN
return false	WITHOUT_CLASSIFICATION	0.9998863299553772	WITHOUT_CLASSIFICATION	1.1367004462287076E-4	DESIGN
this just handles a particular case of component projection perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.5390391783951409	DESIGN	0.4609608216048591	WITHOUT_CLASSIFICATION
note we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.99981965829554	WITHOUT_CLASSIFICATION	1.8034170446007094E-4	DESIGN
the key is the owning entity itself so get the id from the key	WITHOUT_CLASSIFICATION	0.999214084350876	WITHOUT_CLASSIFICATION	7.859156491240598E-4	DESIGN
if the original is a persistentcollection and that original was not flagged as dirty then reset the target's dirty flag here after the copy operation. </p> one thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know	WITHOUT_CLASSIFICATION	0.9999786812314206	WITHOUT_CLASSIFICATION	2.1318768579409502E-5	DESIGN
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9998531416145798	WITHOUT_CLASSIFICATION	1.4685838542019298E-4	DESIGN
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999249054119284	WITHOUT_CLASSIFICATION	7.50945880717094E-5	DESIGN
for a null target or a target which is the same as the original we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999995817756855	WITHOUT_CLASSIFICATION	4.1822431442040244E-7	DESIGN
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here	WITHOUT_CLASSIFICATION	0.9988686431463343	WITHOUT_CLASSIFICATION	0.0011313568536656532	DESIGN
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999898488231428	WITHOUT_CLASSIFICATION	1.0151176857120908E-5	DESIGN
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9995331762478794	WITHOUT_CLASSIFICATION	4.6682375212053035E-4	DESIGN
check if it is already completely loaded but unowned	WITHOUT_CLASSIFICATION	0.9998739396032337	WITHOUT_CLASSIFICATION	1.2606039676629115E-4	DESIGN
cache the actual id of the object not the value of the property-ref which might not be initialized	WITHOUT_CLASSIFICATION	0.9865709466339749	WITHOUT_CLASSIFICATION	0.01342905336602503	DESIGN
todo!!!!!!!	WITHOUT_CLASSIFICATION	0.9996068946777141	WITHOUT_CLASSIFICATION	3.931053222858822E-4	DESIGN
create a new collection wrapper to be initialized later	WITHOUT_CLASSIFICATION	0.960166360441197	WITHOUT_CLASSIFICATION	0.039833639558803	DESIGN
some jdbc drivers erroneously return an empty array here for a null db value /	WITHOUT_CLASSIFICATION	0.9999502774841629	WITHOUT_CLASSIFICATION	4.9722515837039684E-5	DESIGN
our column span is the number of columns in the pk	WITHOUT_CLASSIFICATION	0.9999510335207648	WITHOUT_CLASSIFICATION	4.8966479235293165E-5	DESIGN
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9998811821523331	WITHOUT_CLASSIFICATION	1.1881784766688908E-4	DESIGN
we already know current is not null	WITHOUT_CLASSIFICATION	0.9926658633184111	WITHOUT_CLASSIFICATION	0.00733413668158883	DESIGN
the ids are fully resolved so compare them with isdirty() not ismodified()	WITHOUT_CLASSIFICATION	0.9626583676846502	WITHOUT_CLASSIFICATION	0.03734163231534985	DESIGN
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9998538866234908	WITHOUT_CLASSIFICATION	1.4611337650918832E-4	DESIGN
----------------------------------------------------------- constructors	WITHOUT_CLASSIFICATION	0.9982276327617221	WITHOUT_CLASSIFICATION	0.0017723672382778564	DESIGN
----------------------------------------------------- instance variables	WITHOUT_CLASSIFICATION	0.9999745685210736	WITHOUT_CLASSIFICATION	2.5431478926400834E-5	DESIGN
public static jdbcexception newjdbcexception(string string sqlexception root string sql) { string = string + " [" + sql + ']' log.error(string root) logexceptions(root) return new jdbcexception(string root sql) } public static jdbcexception newjdbcexception(string string sqlexception root) { log.error(string root) logexceptions(root) return new jdbcexception(string root) }	WITHOUT_CLASSIFICATION	0.9999509611541272	WITHOUT_CLASSIFICATION	4.903884587277848E-5	DESIGN
--------------------------------------------------------- public methods	WITHOUT_CLASSIFICATION	0.9958976794087915	WITHOUT_CLASSIFICATION	0.004102320591208522	DESIGN
compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9994609803146297	WITHOUT_CLASSIFICATION	5.390196853702864E-4	DESIGN
simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999937428808628	WITHOUT_CLASSIFICATION	6.257119137143187E-6	DESIGN
sybase fail if we don't do that sigh	WITHOUT_CLASSIFICATION	0.9999370851618005	WITHOUT_CLASSIFICATION	6.291483819954324E-5	DESIGN
handles things like a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a b c ) (overloaded brackets) not not a a is not null (overloaded "not") etc and expressions like foo = bar (maps to foo.id = bar.id) foo.bar = 'foo' (maps to foo.bar = 'foo') foo.bar.baz = 1.0 (maps to foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.bar.baz (maps to bar.baz = 1.0 and foo.bar = bar.id) foo.bar.baz = a.b.c (maps to bar.baz = b.c and foo.bar = bar.id and a.b = b.id) foo.bar.baz + a.b.c (maps to bar.baz + b.c and foo.bar = bar.id and a.b = b.id) ( foo.bar.baz + 1.0 ) < 2.0 (maps to ( bar.baz + 1.0 ) < 2.0 and foo.bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999745496373668	WITHOUT_CLASSIFICATION	2.5450362633189355E-5	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9988600082151528	WITHOUT_CLASSIFICATION	0.0011399917848472728	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9988600082151528	WITHOUT_CLASSIFICATION	0.0011399917848472728	DESIGN
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9995608862897697	WITHOUT_CLASSIFICATION	4.3911371023031904E-4	DESIGN
otherwise just dump it	WITHOUT_CLASSIFICATION	0.9993408986314803	WITHOUT_CLASSIFICATION	6.59101368519762E-4	DESIGN
its an interface so we can't really tell anything	WITHOUT_CLASSIFICATION	0.9987544121274493	WITHOUT_CLASSIFICATION	0.0012455878725507058	DESIGN
its an interface so we can't really tell anything	WITHOUT_CLASSIFICATION	0.9987544121274493	WITHOUT_CLASSIFICATION	0.0012455878725507058	DESIGN
use default behavior	WITHOUT_CLASSIFICATION	0.9991350578612359	WITHOUT_CLASSIFICATION	8.649421387641818E-4	DESIGN
note early return	WITHOUT_CLASSIFICATION	0.9987700092634119	WITHOUT_CLASSIFICATION	0.001229990736588233	DESIGN
the mru cache used to keep hard references to the most recently used query plans note lru here is a bit of a misnomer it indicates that lru entries are removed the actual kept entries are the mru entries	WITHOUT_CLASSIFICATION	0.6687248776286498	DESIGN	0.3312751223713502	WITHOUT_CLASSIFICATION
we want to be able to just use the defaults if jndi environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999470598335077	WITHOUT_CLASSIFICATION	5.294016649221158E-5	DESIGN
clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9996325411286798	WITHOUT_CLASSIFICATION	3.674588713201766E-4	DESIGN
serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9996244182795833	WITHOUT_CLASSIFICATION	3.755817204167322E-4	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999786444001141	WITHOUT_CLASSIFICATION	2.1355599885913443E-5	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999786444001141	WITHOUT_CLASSIFICATION	2.1355599885913443E-5	DESIGN
deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9996229205414481	WITHOUT_CLASSIFICATION	3.770794585518903E-4	DESIGN
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9952846636577041	WITHOUT_CLASSIFICATION	0.004715336342295963	DESIGN
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9992503601009077	WITHOUT_CLASSIFICATION	7.496398990923036E-4	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9996087614967409	WITHOUT_CLASSIFICATION	3.912385032589833E-4	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9996087614967409	WITHOUT_CLASSIFICATION	3.912385032589833E-4	DESIGN
includes last '.'	WITHOUT_CLASSIFICATION	0.9998800859070329	WITHOUT_CLASSIFICATION	1.1991409296719467E-4	DESIGN
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999823506590739	WITHOUT_CLASSIFICATION	1.764934092611234E-5	DESIGN
impl note takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method	WITHOUT_CLASSIFICATION	0.9809261633563728	WITHOUT_CLASSIFICATION	0.019073836643627183	DESIGN
first time we find match!	WITHOUT_CLASSIFICATION	0.9998664263485267	WITHOUT_CLASSIFICATION	1.3357365147326618E-4	DESIGN
entitynames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9997668777391868	WITHOUT_CLASSIFICATION	2.3312226081312896E-4	DESIGN
wrapped iterators	WITHOUT_CLASSIFICATION	0.9949874101070787	WITHOUT_CLASSIFICATION	0.005012589892921217	DESIGN
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9998880929732396	WITHOUT_CLASSIFICATION	1.1190702676053174E-4	DESIGN
the current iterator	WITHOUT_CLASSIFICATION	0.9999313299905158	WITHOUT_CLASSIFICATION	6.867000948420622E-5	DESIGN
the last used iterator	WITHOUT_CLASSIFICATION	0.9744609705118773	WITHOUT_CLASSIFICATION	0.025539029488122755	DESIGN
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9997949583997007	WITHOUT_CLASSIFICATION	2.0504160029920484E-4	DESIGN
public static object[] clone(class elementclass object[] array) {object[] result = (object[]) array.newinstance( elementclass array.length )system.arraycopy(array 0 result 0 array.length)return result}	WITHOUT_CLASSIFICATION	0.9999341526823927	WITHOUT_CLASSIFICATION	6.584731760724807E-5	DESIGN
call this before any iterator method to make sure that the current iterator is not exhausted	WITHOUT_CLASSIFICATION	0.998698409236216	WITHOUT_CLASSIFICATION	0.0013015907637839584	DESIGN
doable if needed	WITHOUT_CLASSIFICATION	0.9998787001432791	WITHOUT_CLASSIFICATION	1.2129985672102461E-4	DESIGN
set last used iterator here in case the user calls remove before calling hasnext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.5858585421126776	WITHOUT_CLASSIFICATION	0.4141414578873223	DESIGN
peek ahead	WITHOUT_CLASSIFICATION	0.9997173572099335	WITHOUT_CLASSIFICATION	2.8264279006651714E-4	DESIGN
if we reach the end of the string w/o finding the matching end that is an exception	WITHOUT_CLASSIFICATION	0.9999352054587654	WITHOUT_CLASSIFICATION	6.479454123470155E-5	DESIGN
we have a placeholder spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9996399321488741	WITHOUT_CLASSIFICATION	3.6006785112585203E-4	DESIGN
make sure spinning forward did not put us past the end of the buffer	WITHOUT_CLASSIFICATION	0.9998750094277814	WITHOUT_CLASSIFICATION	1.2499057221863191E-4	DESIGN
first try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.999465599152874	WITHOUT_CLASSIFICATION	5.34400847125895E-4	DESIGN
next try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9612034169194983	WITHOUT_CLASSIFICATION	0.038796583080501754	DESIGN
next try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9688580466656037	WITHOUT_CLASSIFICATION	0.031141953334396247	DESIGN
anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9993413381294813	WITHOUT_CLASSIFICATION	6.586618705185902E-4	DESIGN
would need an identityset for this!	WITHOUT_CLASSIFICATION	0.998508596901155	WITHOUT_CLASSIFICATION	0.0014914030988449278	DESIGN
arrays.aslist doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9953876587990658	WITHOUT_CLASSIFICATION	0.004612341200934238	DESIGN
faster?	WITHOUT_CLASSIFICATION	0.9997513558113361	WITHOUT_CLASSIFICATION	2.486441886638397E-4	DESIGN
the name of a class	WITHOUT_CLASSIFICATION	0.9991019786255803	WITHOUT_CLASSIFICATION	8.980213744198144E-4	DESIGN
its the listener class name	WITHOUT_CLASSIFICATION	0.9998075275312888	WITHOUT_CLASSIFICATION	1.924724687112152E-4	DESIGN
allow 987654321	WITHOUT_CLASSIFICATION	0.9987242413081038	WITHOUT_CLASSIFICATION	0.0012757586918962624	DESIGN
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999191934234833	WITHOUT_CLASSIFICATION	8.08065765166457E-5	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999610716983414	WITHOUT_CLASSIFICATION	3.8928301658574636E-5	DESIGN
in case we were deserialized in a different jvm look for an instance with the same name (alternatively we could do an actual jndi lookup here.)	WITHOUT_CLASSIFICATION	0.9250410204803855	WITHOUT_CLASSIFICATION	0.07495897951961444	DESIGN
first lets determine whether to apply cglib or javassist based instrumentation	WITHOUT_CLASSIFICATION	0.9999888869665587	WITHOUT_CLASSIFICATION	1.11130334413736E-5	DESIGN
make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9995382532480976	WITHOUT_CLASSIFICATION	4.6174675190240624E-4	DESIGN
entirely optional!!	WITHOUT_CLASSIFICATION	0.998659122054414	WITHOUT_CLASSIFICATION	0.0013408779455860347	DESIGN
its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.999572269748482	WITHOUT_CLASSIFICATION	4.277302515179195E-4	DESIGN
context.unbind(boundname)	WITHOUT_CLASSIFICATION	0.9992182916705639	WITHOUT_CLASSIFICATION	7.817083294360349E-4	DESIGN
readresolveobject	WITHOUT_CLASSIFICATION	0.9996068946777141	WITHOUT_CLASSIFICATION	3.931053222858822E-4	DESIGN
cfg.setproperty("hibernate.show_sql" "true")	WITHOUT_CLASSIFICATION	0.999617579429069	WITHOUT_CLASSIFICATION	3.8242057093087047E-4	DESIGN
defensive convenience methods	WITHOUT_CLASSIFICATION	0.9995207980261902	WITHOUT_CLASSIFICATION	4.792019738097607E-4	DESIGN
create the sessionfactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9996471390630546	WITHOUT_CLASSIFICATION	3.5286093694535787E-4	DESIGN
make sure you log the exception as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999369964873825	WITHOUT_CLASSIFICATION	6.300351261735742E-5	DESIGN
begin unit of work	WITHOUT_CLASSIFICATION	0.9997607577159963	WITHOUT_CLASSIFICATION	2.392422840038324E-4	DESIGN
write html header	WITHOUT_CLASSIFICATION	0.9995773491684602	WITHOUT_CLASSIFICATION	4.226508315398096E-4	DESIGN
handle actions	WITHOUT_CLASSIFICATION	0.999657921075544	WITHOUT_CLASSIFICATION	3.4207892445607354E-4	DESIGN
print page	WITHOUT_CLASSIFICATION	0.9998580134917661	WITHOUT_CLASSIFICATION	1.4198650823391847E-4	DESIGN
write html footer	WITHOUT_CLASSIFICATION	0.9998266212656812	WITHOUT_CLASSIFICATION	1.7337873431873374E-4	DESIGN
end unit of work	WITHOUT_CLASSIFICATION	0.9994576610140455	WITHOUT_CLASSIFICATION	5.423389859544261E-4	DESIGN
start the session to be used for this request	WITHOUT_CLASSIFICATION	0.805642470553818	WITHOUT_CLASSIFICATION	0.1943575294461819	DESIGN
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9985695537492554	WITHOUT_CLASSIFICATION	0.0014304462507445286	DESIGN
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.999995442340027	WITHOUT_CLASSIFICATION	4.557659973075046E-6	DESIGN
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9924393102369719	WITHOUT_CLASSIFICATION	0.007560689763028045	DESIGN
eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9963096742128054	WITHOUT_CLASSIFICATION	0.0036903257871947373	DESIGN
if we want to handle it bidirectional and detached we also need to load this collection with an eager outer-join fetch this time with criteria and not hql	WITHOUT_CLASSIFICATION	0.8664086586054733	WITHOUT_CLASSIFICATION	0.13359134139452655	DESIGN
event anevent = (event) session .createcriteria(event.class).setfetchmode("participants" fetchmode.join) .add( expression.eq("id" eventid) ) .uniqueresult() eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9995335279029083	WITHOUT_CLASSIFICATION	4.664720970918471E-4	DESIGN
end of first unit of work	WITHOUT_CLASSIFICATION	0.9996503726414092	WITHOUT_CLASSIFICATION	3.4962735859073044E-4	DESIGN
or bidirectional safety method setting both sides aperson.addtoevent(anevent)	WITHOUT_CLASSIFICATION	0.9998582380803418	WITHOUT_CLASSIFICATION	1.4176191965831628E-4	DESIGN
begin second unit of work	WITHOUT_CLASSIFICATION	0.9992910484344679	WITHOUT_CLASSIFICATION	7.08951565532059E-4	DESIGN
reattachment of aperson	WITHOUT_CLASSIFICATION	0.9993961001268242	WITHOUT_CLASSIFICATION	6.038998731758691E-4	DESIGN
the getemailaddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.992554924378556	WITHOUT_CLASSIFICATION	0.007445075621444037	DESIGN
we need our tm so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9985511913482011	WITHOUT_CLASSIFICATION	0.0014488086517988662	DESIGN
don't hold the jbc node lock throughout the tx as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999827137790617	WITHOUT_CLASSIFICATION	1.7286220938261742E-5	DESIGN
don't hold the jbc node lock throughout the tx as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999827137790617	WITHOUT_CLASSIFICATION	1.7286220938261742E-5	DESIGN
jbc put a version in the node when it created as part of some internal operation. we are always newer but if the jbc version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999707551138448	WITHOUT_CLASSIFICATION	2.9244886155162887E-5	DESIGN
swaldman 2006-08-28 define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999591671872559	WITHOUT_CLASSIFICATION	4.083281274412524E-5	DESIGN
not null if the isolation level has been specified in the configuration file. otherwise it is left to the driver's default value.	WITHOUT_CLASSIFICATION	0.999933208259318	WITHOUT_CLASSIFICATION	6.679174068202208E-5	DESIGN
configured outside of hibernate (i.e. servlet container or java bean container already has proxool pools running and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9986741706711699	WITHOUT_CLASSIFICATION	0.0013258293288300512	DESIGN
if you're closing down the connectionprovider chances are an is not a real big deal just warn	WITHOUT_CLASSIFICATION	0.9999725544003306	WITHOUT_CLASSIFICATION	2.744559966939335E-5	DESIGN
(as is always optional for consistency with sql/oql)	WITHOUT_CLASSIFICATION	0.9999599666083747	WITHOUT_CLASSIFICATION	4.003339162522095E-5	DESIGN
process the "new" hql style where aliases are assigned _after_ the class name or path expression ie. using the as construction	WITHOUT_CLASSIFICATION	0.9999999697367655	WITHOUT_CLASSIFICATION	3.0263234545123306E-8	DESIGN
the loaded owner will be set to null after the collection is removed so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999990917838284	WITHOUT_CLASSIFICATION	9.082161715839224E-7	DESIGN
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9976333266745236	WITHOUT_CLASSIFICATION	0.002366673325476375	DESIGN
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9997068939207056	WITHOUT_CLASSIFICATION	2.931060792943886E-4	DESIGN
handle a path expression or class name that appears at the start in the "new" hql style or an alias that appears at the start in the "old" hql style	WITHOUT_CLASSIFICATION	0.9999698446921982	WITHOUT_CLASSIFICATION	3.0155307801855678E-5	DESIGN
handle <= >= != is not not between not in	WITHOUT_CLASSIFICATION	0.9967584796292734	WITHOUT_CLASSIFICATION	0.003241520370726562	DESIGN
the loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998065188891	WITHOUT_CLASSIFICATION	1.9348111085894492E-7	DESIGN
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9993927051121695	WITHOUT_CLASSIFICATION	6.07294887830554E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999675484191655	WITHOUT_CLASSIFICATION	3.2451580834496724E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999675484191655	WITHOUT_CLASSIFICATION	3.2451580834496724E-4	DESIGN
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9995543611056183	WITHOUT_CLASSIFICATION	4.456388943815709E-4	DESIGN
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9996595258734742	WITHOUT_CLASSIFICATION	3.4047412652573776E-4	DESIGN
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9997408027056527	WITHOUT_CLASSIFICATION	2.591972943473753E-4	DESIGN
note special case default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999820798048069	WITHOUT_CLASSIFICATION	1.7920195193011617E-5	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999800801655989	WITHOUT_CLASSIFICATION	1.991983440102352E-5	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998776253399233	WITHOUT_CLASSIFICATION	1.2237466007665234E-4	DESIGN
void setcomponenttuplizerfactory(componenttuplizerfactory componenttuplizerfactory) { this.componenttuplizerfactory = componenttuplizerfactory }	WITHOUT_CLASSIFICATION	0.9999019704083362	WITHOUT_CLASSIFICATION	9.80295916638792E-5	DESIGN
element index -> id	WITHOUT_CLASSIFICATION	0.999993979438294	WITHOUT_CLASSIFICATION	6.020561705916202E-6	DESIGN
note that it might be better to iterate the snapshot but this is safe assuming the user implements equals() properly as required by the set contract!	WITHOUT_CLASSIFICATION	0.9760087017357889	WITHOUT_CLASSIFICATION	0.0239912982642111	DESIGN
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9998671443250116	WITHOUT_CLASSIFICATION	1.328556749883254E-4	DESIGN
essentially if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception note that allowing close() above has the same basic effect but we capture that there simply to perform the unbind	WITHOUT_CLASSIFICATION	0.9999996099390998	WITHOUT_CLASSIFICATION	3.9006090020760515E-7	DESIGN
the default sqlexceptionconverter for all dialects is based on sqlstate since sqlerrorcode is extremely vendor-specific. specific dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999041622230324	WITHOUT_CLASSIFICATION	9.583777696759978E-5	DESIGN
only necessary for postgre < 7.4 httpanoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9991206663930335	WITHOUT_CLASSIFICATION	8.793336069664166E-4	DESIGN
select topic syntax from information_schema.help where section like 'function%' order by section topic see also -> httpwww.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999964627948544	WITHOUT_CLASSIFICATION	3.53720514561368E-6	DESIGN
registercolumntype(types.varbinary "character($l)") registercolumntype(types.blob "character($l)" ) for use prior to cp 11.0 registercolumntype(types.clob "character($l)" )	WITHOUT_CLASSIFICATION	0.9991809640734448	WITHOUT_CLASSIFICATION	8.190359265551715E-4	DESIGN
the blob type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include k - kilobyte m - megabyte g - gigabyte. refer to the pbdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9811231121735664	WITHOUT_CLASSIFICATION	0.018876887826433562	DESIGN
we must return a valid rdms/rsa command from this method to prevent rdms/rsa from issuing error 400	WITHOUT_CLASSIFICATION	0.785086133590051	WITHOUT_CLASSIFICATION	0.2149138664099489	DESIGN
oracle driver reports to support getgeneratedkeys() but they only support the version taking an array of the names of the columns to be returned (via its returning clause). no other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.99992428388783	WITHOUT_CLASSIFICATION	7.571611217003508E-5	DESIGN
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999946993982411	WITHOUT_CLASSIFICATION	5.300601758875949E-6	DESIGN
you may still have other resultsets or update counts left to process here but you can't do it now or the resultset you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999827525459	WITHOUT_CLASSIFICATION	1.724745421171966E-8	DESIGN
note for object <-> sql datatype mappings see configuration manager | advanced | sql | system ddl datatype mappings tbdregistercolumntype(types.binary "binary($1)") changed 08-11-2005 jsl	WITHOUT_CLASSIFICATION	0.9999841552788018	WITHOUT_CLASSIFICATION	1.584472119822797E-5	DESIGN
trim(end_keyword string-expression-1 from string-expression-2) use hibernate implementation "from" is one of the parameters they pass in position ?3 registerfunction( "trim" new sqlfunctiontemplate(hibernate.string "trim(?1 ?2 from ?3)") )	WITHOUT_CLASSIFICATION	0.9999843008574429	WITHOUT_CLASSIFICATION	1.5699142557084582E-5	DESIGN
whether this dialect has an identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999832154665927	WITHOUT_CLASSIFICATION	1.6784533407258115E-5	DESIGN
according to both the ansi-sql and jpa specs trim takes a variable number of parameters between 1 and 4. at least one paramer (trimsource) is required. from the sql spec <trim function> = trim <left paren> <trim operands> <right paren> <trim operands> = [ [ <trim specification> ] [ <trim character> ] from ] <trim source> <trim specification> = leading | trailing | both if <trim specification> is omitted both is assumed. if <trim character> is omitted space is assumed	WITHOUT_CLASSIFICATION	0.9999999996186874	WITHOUT_CLASSIFICATION	3.813127071263781E-10	DESIGN
/ prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9998016615536197	WITHOUT_CLASSIFICATION	1.9833844638024662E-4	DESIGN
named queries	WITHOUT_CLASSIFICATION	0.9997642751260973	WITHOUT_CLASSIFICATION	2.357248739026451E-4	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.5507742440527952	DESIGN	0.4492257559472049	WITHOUT_CLASSIFICATION
does not handle arrays (thats ok cos they can't be lazy) or newly instantiated collections so we can do the cast	WITHOUT_CLASSIFICATION	0.9961313206094472	WITHOUT_CLASSIFICATION	0.0038686793905527554	DESIGN
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999655683329483	WITHOUT_CLASSIFICATION	3.443166705171587E-5	DESIGN
we can do the cast since orphan-delete does not apply to 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9998536184190121	WITHOUT_CLASSIFICATION	1.4638158098785213E-4	DESIGN
if the natural-id is marked as non-mutable it is not retrieved during a normal database-snapshot operation	WITHOUT_CLASSIFICATION	0.999997041825685	WITHOUT_CLASSIFICATION	2.9581743149797386E-6	DESIGN
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.999997552264562	WITHOUT_CLASSIFICATION	2.4477354380433265E-6	DESIGN
slice to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9998770125615045	WITHOUT_CLASSIFICATION	1.2298743849553984E-4	DESIGN
int result = 17 result = 37 result + type.hashcode() result = 37 result + ( value==null ? 0 value.hashcode() ) return result	WITHOUT_CLASSIFICATION	0.9999991813106243	WITHOUT_CLASSIFICATION	8.186893758300327E-7	DESIGN
the collectionentry.isreached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9998368278572893	WITHOUT_CLASSIFICATION	1.6317214271065092E-4	DESIGN
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9993979473075787	WITHOUT_CLASSIFICATION	6.020526924212977E-4	DESIGN
the unique property value represented here may or may not be serializable so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.8828240720127528	DESIGN	0.11717592798724714	WITHOUT_CLASSIFICATION
if the version of a newly instantiated object is not the same as the version seed value use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9982101482274834	WITHOUT_CLASSIFICATION	0.0017898517725165666	DESIGN
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999678479273827	WITHOUT_CLASSIFICATION	3.215207261737783E-5	DESIGN
ignore this row the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999876338503608	WITHOUT_CLASSIFICATION	1.2366149639247848E-5	DESIGN
entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently not yet used	WITHOUT_CLASSIFICATION	0.5451042950206337	DESIGN	0.45489570497936627	WITHOUT_CLASSIFICATION
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. besides it makes the code much easier to read than the old transactionhelper stuff	WITHOUT_CLASSIFICATION	0.9999992031288587	WITHOUT_CLASSIFICATION	7.968711412867356E-7	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9994730810321599	WITHOUT_CLASSIFICATION	5.269189678401642E-4	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9994730810321599	WITHOUT_CLASSIFICATION	5.269189678401642E-4	DESIGN
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999981337078163	WITHOUT_CLASSIFICATION	1.8662921836974634E-6	DESIGN
remove any snapshot not really for memory management purposes but rather because it might now be stale and there is no longer any entityentry to take precedence this is now handled by removeentity() session.getpersistencecontext().removedatabasesnapshot(key)	WITHOUT_CLASSIFICATION	0.8077564455447493	WITHOUT_CLASSIFICATION	0.19224355445525057	DESIGN
skip this check for composite-ids relating to dom4j entity-mode alternatively we could add a check to make sure the incoming id value is an instance of element	WITHOUT_CLASSIFICATION	0.9984884606811992	WITHOUT_CLASSIFICATION	0.0015115393188006722	DESIGN
upgrade the lock if necessary lock(result lockmode)	WITHOUT_CLASSIFICATION	0.9997623218010572	WITHOUT_CLASSIFICATION	2.3767819894280901E-4	DESIGN
now any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9824983991445472	WITHOUT_CLASSIFICATION	0.017501600855452895	DESIGN
we must clone embedded composite identifiers or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9997656883668952	WITHOUT_CLASSIFICATION	2.3431163310497094E-4	DESIGN
sub-insertions should occur before containing insertion so try to do the callback now	WITHOUT_CLASSIFICATION	0.9989546605854585	WITHOUT_CLASSIFICATION	0.0010453394145415213	DESIGN
the entity is not associated with the session so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.999606688243251	WITHOUT_CLASSIFICATION	3.933117567489581E-4	DESIGN
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9980569544100916	WITHOUT_CLASSIFICATION	0.0019430455899083047	DESIGN
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998816954684018	WITHOUT_CLASSIFICATION	1.1830453159811912E-4	DESIGN
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998736407234639	WITHOUT_CLASSIFICATION	1.263592765360648E-4	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9718033838364903	WITHOUT_CLASSIFICATION	0.02819661616350966	DESIGN
if it is an uninitialized proxy pointing with this session then when it is accessed the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9998403253575424	WITHOUT_CLASSIFICATION	1.596746424576276E-4	DESIGN
generate an explicit join for the root dot node. the implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999991886368518	WITHOUT_CLASSIFICATION	8.113631481431651E-7	DESIGN
a session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9979091922418104	WITHOUT_CLASSIFICATION	0.0020908077581894766	DESIGN
does the collection referenced by this fromelement specify an order-by attribute? if so attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999340856992069	WITHOUT_CLASSIFICATION	6.591430079302042E-5	DESIGN
and the token could be an identifer and the error is a mismatched token error	WITHOUT_CLASSIFICATION	0.9204015591565653	WITHOUT_CLASSIFICATION	0.0795984408434347	DESIGN
if a where clause was specified in the update/delete query use it to limit the returned ids here	WITHOUT_CLASSIFICATION	0.9999940813966274	WITHOUT_CLASSIFICATION	5.918603372640948E-6	DESIGN
int parameterstart = getwalker().getnumberofparametersinsetclause() list allparams = getidselectparameterspecifications() iterator whereparams = allparams.sublist( parameterstart allparams.size() ).iterator()	WITHOUT_CLASSIFICATION	0.999985830029709	WITHOUT_CLASSIFICATION	1.4169970291143843E-5	DESIGN
default implementation if this node has a data type and that data type is not an association then this is scalar.	WITHOUT_CLASSIFICATION	0.9995229040792076	WITHOUT_CLASSIFICATION	4.770959207924658E-4	DESIGN
resolve the lhs fully generate implicit joins. pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9990562155160151	WITHOUT_CLASSIFICATION	9.437844839848769E-4	DESIGN
if the propertytype is null and there isn't a parent just stop now there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9996511619411607	WITHOUT_CLASSIFICATION	3.4883805883935724E-4	DESIGN
we do not look for an existing join on the same path because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9993653484759843	WITHOUT_CLASSIFICATION	6.346515240157049E-4	DESIGN
our parent is another dot node meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's pk (because 'our' table would know the fk).	WITHOUT_CLASSIFICATION	0.999869349415446	WITHOUT_CLASSIFICATION	1.306505845539044E-4	DESIGN
public final currency getcurrency(int col) throws hibernateexception {return (currency) get(col)}	WITHOUT_CLASSIFICATION	0.9998452329690638	WITHOUT_CLASSIFICATION	1.5476703093616673E-4	DESIGN
here we have two possibilities 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.999833655568274	WITHOUT_CLASSIFICATION	1.6634443172594475E-4	DESIGN
set the unresolved path in this node and the parent. set the text for the parent.	WITHOUT_CLASSIFICATION	0.9995859158281918	WITHOUT_CLASSIFICATION	4.140841718082015E-4	DESIGN
get the first child to be considered. sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. distinct).	WITHOUT_CLASSIFICATION	0.9983787454822131	WITHOUT_CLASSIFICATION	0.0016212545177869792	DESIGN
if this is an entity and the property is the identifier property then use getidentifiertype(). note that the propertyname.equals( propertypath ) checks whether we have a component key reference where the component class property name is the same as the entity id property name if the two are not equal this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9989761496456013	WITHOUT_CLASSIFICATION	0.0010238503543986133	DESIGN
for a subquery the alias to use depends on a few things (we already know this is not an overall select) 1) if this from_element represents a correlation to the outer-most query a) if the outer query represents a multi-table persister we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) b) otherwise we need to use the persister's table name as the column qualification 2) otherwise (not correlated) use the given alias	WITHOUT_CLASSIFICATION	0.5929990622085949	WITHOUT_CLASSIFICATION	0.40700093779140506	DESIGN
not a collection? return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9927714354601782	WITHOUT_CLASSIFICATION	0.007228564539821833	DESIGN
collection of <many-to-any/> mappings used to circumvent the component-collection check below	WITHOUT_CLASSIFICATION	0.950869169294243	WITHOUT_CLASSIFICATION	0.049130830705756946	DESIGN
otherwise the destination node was implied by the from clause and the from clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999642245160412	WITHOUT_CLASSIFICATION	3.577548395890093E-5	DESIGN
if the first identifier in the path referrs to the class alias (not the class name) then this is a correlated subselect. if it's a correlated sub-select use the existing table alias. otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9836781993634321	WITHOUT_CLASSIFICATION	0.016321800636567893	DESIGN
check to see if our "proppath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9996698112632394	WITHOUT_CLASSIFICATION	3.3018873676058974E-4	DESIGN
an ident node can represent an index expression if the ident represents a naked property ref note this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrexpr -> resolve()). the other option if that changes is to call resolve from here but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9934170355588977	WITHOUT_CLASSIFICATION	0.006582964441102282	DESIGN
this uses a pathexpressionparser but notice that compound paths are not valid only bare names and simple paths	WITHOUT_CLASSIFICATION	0.9995089596934088	WITHOUT_CLASSIFICATION	4.910403065911563E-4	DESIGN
if this is an implied join in a from clause then use ansi-style joining and set the flag on the fromelement that indicates that it was implied in the from clause itself.	WITHOUT_CLASSIFICATION	0.9988887299041048	WITHOUT_CLASSIFICATION	0.0011112700958952123	DESIGN
origin.adddestination(destination) add the query spaces.	WITHOUT_CLASSIFICATION	0.9999487933683143	WITHOUT_CLASSIFICATION	5.120663168580387E-5	DESIGN
for an explicit many-to-many relationship add a second join from the intermediate (many-to-many) table to the destination table. also make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999995531468724	WITHOUT_CLASSIFICATION	4.468531275841983E-7	DESIGN
reset the node type because the rest of the system is expecting from_fragment all we wanted was for the factory to create the right sub-class. this might get reset again later on anyway to make the sql generation simpler.	WITHOUT_CLASSIFICATION	0.8778521795183907	WITHOUT_CLASSIFICATION	0.12214782048160923	DESIGN
explicit = true this is an explict select. arraylist sqlresulttypelist = new arraylist()	WITHOUT_CLASSIFICATION	0.9997276295142337	WITHOUT_CLASSIFICATION	2.7237048576626296E-4	DESIGN
sqlresulttypelist.add( type ) generate the select expression.	WITHOUT_CLASSIFICATION	0.9992930905864356	WITHOUT_CLASSIFICATION	7.069094135645134E-4	DESIGN
if the expression list has exactly one expression and the type of the expression is a collection then this might be a collection function such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9998514713530594	WITHOUT_CLASSIFICATION	1.4852864694065598E-4	DESIGN
need to parse off the column qualifiers this is assuming (which is true as of now) that this is only used from update and delete hql statement parsing	WITHOUT_CLASSIFICATION	0.9940266195824378	WITHOUT_CLASSIFICATION	0.005973380417562269	DESIGN
for regression testing against output from the old parser found it easiest to simply reorder the fromelements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser this is definitely another of those "only needed for regression purposes". the syntheticandfactory then simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999986610604565	WITHOUT_CLASSIFICATION	1.3389395434944233E-6	DESIGN
the uber-rule here is that we need to include subclass joins if the fromelement is in any way dereferenced by a property from the subclass table otherwise we end up with column references qualified by a non-existent table reference in the resulting sql	WITHOUT_CLASSIFICATION	0.9962439954248424	WITHOUT_CLASSIFICATION	0.0037560045751576037	DESIGN
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9932189248135527	WITHOUT_CLASSIFICATION	0.006781075186447406	DESIGN
the following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9998958790860424	WITHOUT_CLASSIFICATION	1.0412091395764261E-4	DESIGN
the loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998065188891	WITHOUT_CLASSIFICATION	1.9348111085894492E-7	DESIGN
should not be able to reach last without maxposition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9983564130170318	WITHOUT_CLASSIFICATION	0.0016435869829681316	DESIGN
we found it in the temp pc. should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999642022348261	WITHOUT_CLASSIFICATION	3.579776517396892E-5	DESIGN
do not use proxiesbykey since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9983328432405844	WITHOUT_CLASSIFICATION	0.0016671567594156384	DESIGN
if there is no tm configured we will not be able to access the javax.transaction.transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.999972656019923	WITHOUT_CLASSIFICATION	2.7343980076907227E-5	DESIGN
since the result set cursor is always left at the first physical row after the "last processed" we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999999750594901	WITHOUT_CLASSIFICATION	2.494050983621928E-8	DESIGN
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a collectioninitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9998699167547291	WITHOUT_CLASSIFICATION	1.3008324527085316E-4	DESIGN
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode none)	WITHOUT_CLASSIFICATION	0.9995657264854015	WITHOUT_CLASSIFICATION	4.3427351459848713E-4	DESIGN
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9986580392793176	WITHOUT_CLASSIFICATION	0.001341960720682387	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999222492645086	WITHOUT_CLASSIFICATION	7.775073549136667E-5	DESIGN
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9983950184138335	WITHOUT_CLASSIFICATION	0.0016049815861664432	DESIGN
ps.close() just close it do not try to return it to the pool! note early exit!	WITHOUT_CLASSIFICATION	0.9999421175536354	WITHOUT_CLASSIFICATION	5.788244636459734E-5	DESIGN
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through hibernate's registered transaction synchronization on a separate "reaping" thread. in cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these cmes occur. and though it is not "allowed" per-se the end result without handling it specifically is infinite looping. so here we simply break the loop	WITHOUT_CLASSIFICATION	0.9999995500382916	WITHOUT_CLASSIFICATION	4.4996170839761965E-7	DESIGN
unfortunately this stuff can't be cached because it is per-invocation not constant for the querytranslator instance	WITHOUT_CLASSIFICATION	0.9998729986812817	WITHOUT_CLASSIFICATION	1.2700131871834616E-4	DESIGN
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9996258829954932	WITHOUT_CLASSIFICATION	3.741170045069289E-4	DESIGN
don't create a unique key 'cos some databases don't like a uk on nullable columns getcollectiontable().createuniquekey( getidentifier().getconstraintcolumns() )	WITHOUT_CLASSIFICATION	0.9983379546111302	WITHOUT_CLASSIFICATION	0.0016620453888698493	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or entityinfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997992553673958	WITHOUT_CLASSIFICATION	2.0074463260414007E-4	DESIGN
isset = collection.isset() issorted = collection.issorted()	WITHOUT_CLASSIFICATION	0.9998987446571149	WITHOUT_CLASSIFICATION	1.0125534288497884E-4	DESIGN
lists arrays sets maps bags	WITHOUT_CLASSIFICATION	0.9915412078258661	WITHOUT_CLASSIFICATION	0.008458792174133848	DESIGN
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9986463677211296	WITHOUT_CLASSIFICATION	0.0013536322788703311	DESIGN
use a combination of foreign key columns and pk columns since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9976490835831713	WITHOUT_CLASSIFICATION	0.00235091641682871	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or entityinfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997992553673958	WITHOUT_CLASSIFICATION	2.0074463260414007E-4	DESIGN
information about properties of this class including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9920755736755268	WITHOUT_CLASSIFICATION	0.00792442632447331	DESIGN
all this only really needs to consider properties of this class not its subclasses but since we are reusing code used for sequential selects we use the subclass closure	WITHOUT_CLASSIFICATION	0.996303058374624	DESIGN	0.0036969416253759433	WITHOUT_CLASSIFICATION
here we render the select column list based on the properties defined as being generated. for partial component generation we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9875888714792295	WITHOUT_CLASSIFICATION	0.01241112852077057	DESIGN
this is the root (versioned) table and we are using version-based optimistic locking if we are not updating the version also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9973885179861247	WITHOUT_CLASSIFICATION	0.002611482013875219	DESIGN
optimistic-lock="all" include all updatable properties optimistic-lock="dirty" include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999545521163912	WITHOUT_CLASSIFICATION	4.544788360886084E-5	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.993321031223808	WITHOUT_CLASSIFICATION	0.006678968776191967	DESIGN
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a jta transaction context so must be autocommit mode)	WITHOUT_CLASSIFICATION	0.9879763103109191	WITHOUT_CLASSIFICATION	0.012023689689080757	DESIGN
need to treat this as if it where optimistic-lock="all" (dirty does not make sense) first we need to locate the "loaded" state note it potentially could be a proxy so perform the location the safe way	WITHOUT_CLASSIFICATION	0.9265564945277085	WITHOUT_CLASSIFICATION	0.07344350547229156	DESIGN
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.999858978823685	WITHOUT_CLASSIFICATION	1.4102117631502306E-4	DESIGN
need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. using the collection's key type causes problems with property-ref keys	WITHOUT_CLASSIFICATION	0.9996128640270027	WITHOUT_CLASSIFICATION	3.871359729973167E-4	DESIGN
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9984699332922795	WITHOUT_CLASSIFICATION	0.001530066707720496	DESIGN
following doesn't handle (null not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9982621089745113	WITHOUT_CLASSIFICATION	0.0017378910254886159	DESIGN
impl note due to the delayed population of setters (setters cached for performance) we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9998919840767206	WITHOUT_CLASSIFICATION	1.0801592327925835E-4	DESIGN
we need to dirty check collections since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9995964005959471	WITHOUT_CLASSIFICATION	4.035994040528972E-4	DESIGN
return the id so we can use it to reset the proxy id return result	WITHOUT_CLASSIFICATION	0.9998119979472592	WITHOUT_CLASSIFICATION	1.880020527408276E-4	DESIGN
optimizer = getfactory().getsettings().getbytecodeprovider().getreflectionoptimizer( mappedclass getternames setternames proptypes )	WITHOUT_CLASSIFICATION	0.9998921793684077	WITHOUT_CLASSIFICATION	1.0782063159231147E-4	DESIGN
cache the actual id of the object not the value of the property-ref which might not be initialized	WITHOUT_CLASSIFICATION	0.9865709466339749	WITHOUT_CLASSIFICATION	0.01342905336602503	DESIGN
we now have the value of the property-ref we reference. however we need to dig a little deeper as that property might also be an entity type in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9874168863810059	WITHOUT_CLASSIFICATION	0.012583113618994233	DESIGN
retrieve the value of the designated column in the current row of this resultset object as a java.io.reader object	WITHOUT_CLASSIFICATION	0.999988459978466	WITHOUT_CLASSIFICATION	1.1540021534076485E-5	DESIGN
not absolutely necessary but helps for some equals()/hashcode() implementations	WITHOUT_CLASSIFICATION	0.9970423352673288	WITHOUT_CLASSIFICATION	0.002957664732671255	DESIGN
this should be a call to resolve() not resolveidentifier() 'cos it might be a property-ref and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9713036432996245	WITHOUT_CLASSIFICATION	0.02869635670037547	DESIGN
if we have <tt>not-found="ignore"</tt> association mapped to a formula we always need to dirty check it so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9991731676740512	WITHOUT_CLASSIFICATION	8.268323259489451E-4	DESIGN
can't just return null here since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999496692436795	WITHOUT_CLASSIFICATION	5.0330756320660384E-5	DESIGN
for arrays replaceelements() may return a different reference since the array length might not match	WITHOUT_CLASSIFICATION	0.9919573382618921	WITHOUT_CLASSIFICATION	0.00804266173810783	DESIGN
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the mru entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9890320791228651	WITHOUT_CLASSIFICATION	0.010967920877134968	DESIGN
as soon as we encounter our first letter return the substring from that position	WITHOUT_CLASSIFICATION	0.9999774782198738	WITHOUT_CLASSIFICATION	2.2521780126178795E-5	DESIGN
note expected in the syntax type=listenerclass ({sep}type=listenerclass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999763365665088	WITHOUT_CLASSIFICATION	2.3663433491166784E-5	DESIGN
istransactioncallbackregistered denotes whether any hibernate transaction has registered as a callback against this jdbccontext only one such callback is allowed. directly serializing this value causes problems with jdbctransaction or really any transaction impl where the callback is local to the transaction instance itself since that transaction is not serialized along with the jdbccontext. thus we handle that fact here explicitly	WITHOUT_CLASSIFICATION	0.9993745759224503	WITHOUT_CLASSIFICATION	6.254240775498003E-4	DESIGN
note that for sequential scrolling we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9976869857472175	WITHOUT_CLASSIFICATION	0.00231301425278247	DESIGN
we call getkeyfromresultset() here so that we can know the key value upon which to perform the breaking logic. however it is also then called from getrowfromresultset() which is certainly not the most efficient. but the call here is needed and there currently is no other way without refactoring of the doquery()/getrowfromresultset() methods	WITHOUT_CLASSIFICATION	0.7367301156278593	WITHOUT_CLASSIFICATION	0.26326988437214077	DESIGN
this check is needed since processing leaves the cursor after the last physical row for the current logical row thus if we are after the last physical row this might be caused by either 1) scrolling to the last logical row 2) scrolling past the last logical row in the latter scenario the previous logical row really is the last logical row. in all other cases we should process back two logical records (the current logic row plus the previous logical row).	WITHOUT_CLASSIFICATION	0.995688410643217	WITHOUT_CLASSIFICATION	0.004311589356782993	DESIGN
and perform the load	WITHOUT_CLASSIFICATION	0.9994097407679701	WITHOUT_CLASSIFICATION	5.902592320299084E-4	DESIGN
important reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9998803054051324	WITHOUT_CLASSIFICATION	1.1969459486763343E-4	DESIGN
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.992331520323974	WITHOUT_CLASSIFICATION	0.007668479676026064	DESIGN
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9995548639693735	WITHOUT_CLASSIFICATION	4.451360306265129E-4	DESIGN
we did not find a collection element in the result set so we ensure that a collection is created with the owner's identifier since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999887858593449	WITHOUT_CLASSIFICATION	1.121414065513233E-5	DESIGN
this is a collection initializer so we must create a collection for each of the passed-in keys to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9890040568825517	WITHOUT_CLASSIFICATION	0.010995943117448274	DESIGN
grab its state from the resultset and keep it in the session (but don't yet initialize the object itself) note that we acquire lockmode.read even if it was not requested	WITHOUT_CLASSIFICATION	0.9991816983834599	WITHOUT_CLASSIFICATION	8.183016165400617E-4	DESIGN
a many-to-many decrement currentdepth here to allow join across the association table without exceeding max_fetch_depth (i.e. the "currentdepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9997489393783701	WITHOUT_CLASSIFICATION	2.510606216300007E-4	DESIGN
if not a composite key use "foo in (? ? ?)" for batching if no batch and not a composite key use "foo = ?"	WITHOUT_CLASSIFICATION	0.9970096625936604	WITHOUT_CLASSIFICATION	0.002990337406339671	DESIGN
the user visible aliases which are unknown to the superclass these are not the actual "physical" sql aliases	WITHOUT_CLASSIFICATION	0.9999999114095609	WITHOUT_CLASSIFICATION	8.859043900676953E-8	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999987617229041	WITHOUT_CLASSIFICATION	1.2382770959053306E-5	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999987617229041	WITHOUT_CLASSIFICATION	1.2382770959053306E-5	DESIGN
it does not refer to an alias of a projection look for a property	WITHOUT_CLASSIFICATION	0.9997580482395277	WITHOUT_CLASSIFICATION	2.419517604723317E-4	DESIGN
determine if the collection elements are entities	WITHOUT_CLASSIFICATION	0.9999644528039617	WITHOUT_CLASSIFICATION	3.554719603829877E-5	DESIGN
let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9997711648244456	WITHOUT_CLASSIFICATION	2.2883517555425734E-4	DESIGN
translates an ast join type (i.e. the token type) into a joinfragment.xxx join type. @param astjointype the ast join type (from hqlsqltokentypes or sqltokentypes) @return a joinfragment.xxx join type. @see joinfragment @see sqltokentypes	WITHOUT_CLASSIFICATION	0.9998481241849378	WITHOUT_CLASSIFICATION	1.5187581506221563E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999489842950777	WITHOUT_CLASSIFICATION	5.1015704922245364E-5	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999489842950777	WITHOUT_CLASSIFICATION	5.1015704922245364E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.9997604232956353	WITHOUT_CLASSIFICATION	2.3957670436473624E-4	DESIGN
public list getcollectionaliases() { return collectionaliases } public list getcollectionowners() { return collectionowners } public list getcollectionowneraliases() { return collectionowneraliases } public list getcollectionpersisters() { return collectionpersisters } public map getalias2persister() { return alias2persister } public boolean iscollectioninitializer() { return iscollectioninitializer } public list getpersisters() { return persisters } public map getalias2owneralias() { return alias2owneralias } public list getscalartypes() { return scalartypes } public list getscalarcolumnaliases() { return scalarcolumnaliases } public list getpropertyresults() { return propertyresults } public list getcollectionpropertyresults() { return collectionresults } public map getalias2return() { return alias2return }	WITHOUT_CLASSIFICATION	0.9995116477828746	WITHOUT_CLASSIFICATION	4.883522171255138E-4	DESIGN
sqlqueryparser parser = new sqlqueryparser( sqlquery processor.getalias2persister() processor.getalias2return() aliases collaliases collpersisters suffixes collsuffixes ) sql = parser.process() namedparameterbindpoints = parser.getnamedparameters()	WITHOUT_CLASSIFICATION	0.9997259108323746	WITHOUT_CLASSIFICATION	2.740891676253172E-4	DESIGN
include the discriminator and class-level where but not filters	WITHOUT_CLASSIFICATION	0.9999742887606001	WITHOUT_CLASSIFICATION	2.571123939981113E-5	DESIGN
sqlaliassuffixes[i] = element.getcolumnaliassuffix()	WITHOUT_CLASSIFICATION	0.9998987446571149	WITHOUT_CLASSIFICATION	1.0125534288497884E-4	DESIGN
none because its the requested lock mode not the actual!	WITHOUT_CLASSIFICATION	0.9996583120401034	WITHOUT_CLASSIFICATION	3.4168795989660493E-4	DESIGN
at this point we have (drivingsqlalias) the sql alias of the driving table corresponding to the given user alias. however the driving table is not (necessarily) the table against which we want to apply locks. mainly the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999924875272137	WITHOUT_CLASSIFICATION	7.512472786291989E-6	DESIGN
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.999924838134692	WITHOUT_CLASSIFICATION	7.516186530789823E-5	DESIGN
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999359359306563	WITHOUT_CLASSIFICATION	6.406406934366525E-5	DESIGN
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.998480624931089	WITHOUT_CLASSIFICATION	0.001519375068911015	DESIGN
both many-to-one and one-to-one are represented as a property. entitypersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. so we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. the other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. if that assertion changes then this check needs to change as well. partially this is an issue with the overloading of the term "lazy" here	WITHOUT_CLASSIFICATION	0.9993432625186899	DESIGN	6.567374813100558E-4	WITHOUT_CLASSIFICATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999981812329241	WITHOUT_CLASSIFICATION	1.818767075897574E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999981812329241	WITHOUT_CLASSIFICATION	1.818767075897574E-5	DESIGN
roottablename = persistentclass.getroottable().getqualifiedname( factory.getdialect() factory.getdefaultcatalog() factory.getdefaultschema() )	WITHOUT_CLASSIFICATION	0.9998921793684077	WITHOUT_CLASSIFICATION	1.0782063159231147E-4	DESIGN
subclasses	WITHOUT_CLASSIFICATION	0.9998378437906592	WITHOUT_CLASSIFICATION	1.6215620934077055E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999718376777476	WITHOUT_CLASSIFICATION	2.816232225247621E-5	DESIGN
protected void initpropertypaths(final string pathfinal type typefinal string[] columnsfinal string[] formulatemplatesfinal mapping factory)throws mappingexception {addformulapropertypath(path type formulatemplates)initpropertypaths(path type columns formulatemplates factory)}	WITHOUT_CLASSIFICATION	0.9997265820985181	WITHOUT_CLASSIFICATION	2.734179014819843E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995899993364952	WITHOUT_CLASSIFICATION	4.100006635047861E-4	DESIGN
custom sql (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9991333880253431	WITHOUT_CLASSIFICATION	8.666119746569422E-4	DESIGN
moved up from abstractentitypersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9926154050367616	WITHOUT_CLASSIFICATION	0.007384594963238378	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995899993364952	WITHOUT_CLASSIFICATION	4.100006635047861E-4	DESIGN
aliases for identifier ( alias.id ) skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999595071574154	WITHOUT_CLASSIFICATION	4.049284258452906E-5	DESIGN
decide which resultset to get the property value from	WITHOUT_CLASSIFICATION	0.9999262268493352	WITHOUT_CLASSIFICATION	7.377315066482335E-5	DESIGN
note it is conceptually possible that a usertype could map null to a non-null value so the following is arguable	WITHOUT_CLASSIFICATION	0.9982698118348107	WITHOUT_CLASSIFICATION	0.0017301881651893944	DESIGN
the contract of entitytuplizer.determineconcretesubclassentityname says that returning null is an indication that the specified entity-name (this.getentityname) should be used.	WITHOUT_CLASSIFICATION	0.9681102100387233	WITHOUT_CLASSIFICATION	0.03188978996127665	DESIGN
need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. using the collection's key type causes problems with property-ref keys	WITHOUT_CLASSIFICATION	0.9996128640270027	WITHOUT_CLASSIFICATION	3.871359729973167E-4	DESIGN
cache these since they are stateless this one could even be static	WITHOUT_CLASSIFICATION	0.5096301297497063	DESIGN	0.49036987025029355	WITHOUT_CLASSIFICATION
"as" is not in keywords	WITHOUT_CLASSIFICATION	0.9944672545286922	WITHOUT_CLASSIFICATION	0.005532745471307872	DESIGN
--commented out by inspection (12/4/04 910 am) public abstract void addcondition(string alias string[] columns string condition)	WITHOUT_CLASSIFICATION	0.9999938437677831	WITHOUT_CLASSIFICATION	6.156232216918199E-6	DESIGN
use the id column alias	WITHOUT_CLASSIFICATION	0.9999281583059172	WITHOUT_CLASSIFICATION	7.1841694082779E-5	DESIGN
private list aliases = new arraylist()	WITHOUT_CLASSIFICATION	0.999911667213677	WITHOUT_CLASSIFICATION	8.833278632303812E-5	DESIGN
columns.add(columnname) aliases.add(tablealias)	WITHOUT_CLASSIFICATION	0.9995899993364952	WITHOUT_CLASSIFICATION	4.100006635047861E-4	DESIGN
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9509121283990657	WITHOUT_CLASSIFICATION	0.049087871600934335	DESIGN
revert to traditional hibernate behavior of setting initialpoolsize to minpoolsize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9996081364092732	WITHOUT_CLASSIFICATION	3.918635907268882E-4	DESIGN
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999158323811084	WITHOUT_CLASSIFICATION	8.416761889158064E-5	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9844491941744761	WITHOUT_CLASSIFICATION	0.015550805825523956	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9844491941744761	WITHOUT_CLASSIFICATION	0.015550805825523956	DESIGN
if an exception occurs during flush user must call rollback()	WITHOUT_CLASSIFICATION	0.9999722818860384	WITHOUT_CLASSIFICATION	2.7718113961598467E-5	DESIGN
essentially 1) if we have a local (hibernate) transaction in progress and it already has the usertransaction cached use that usertransaction to determine the status. 2) if a transaction manager has been located use that transaction manager to determine the status. 3) finally as the last resort try to lookup the usertransaction via jndi and use that to determine the status.	WITHOUT_CLASSIFICATION	0.999999950128676	WITHOUT_CLASSIFICATION	4.987132392644195E-8	DESIGN
package	WITHOUT_CLASSIFICATION	0.9990930432808648	WITHOUT_CLASSIFICATION	9.069567191352288E-4	DESIGN
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9997059719327098	WITHOUT_CLASSIFICATION	2.940280672902403E-4	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9999401475077712	WITHOUT_CLASSIFICATION	5.985249222884945E-5	DESIGN
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database) since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.7228925475354505	DESIGN	0.27710745246454943	WITHOUT_CLASSIFICATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999797647425338	WITHOUT_CLASSIFICATION	2.0235257466196714E-4	DESIGN
regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed) so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999953117787473	WITHOUT_CLASSIFICATION	4.68822125272567E-6	DESIGN
then handle any user-defined entity modes	WITHOUT_CLASSIFICATION	0.9973884445798731	WITHOUT_CLASSIFICATION	0.002611555420126825	DESIGN
establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9994989861702915	WITHOUT_CLASSIFICATION	5.010138297085625E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.982553550569534	WITHOUT_CLASSIFICATION	0.01744644943046611	DESIGN
note this is being used from the process of shutting down a sessionfactory. specific things to consider (1) this clearing of the region should not propagate to other nodes on the cluster (if any) this is the cache-mode-local option bit (2) really just trying a best effort to cleanup after ourselves lock failures etc are not critical here this is the fail-silently option bit	WITHOUT_CLASSIFICATION	0.9999920073659565	DESIGN	7.992634043447456E-6	WITHOUT_CLASSIFICATION
need to extract the component values and check for subtype replacements	WITHOUT_CLASSIFICATION	0.9996114250389475	WITHOUT_CLASSIFICATION	3.885749610523922E-4	DESIGN
we ignore minimalputoverride. jbosscache putforexternalread is already about as minimal as we can get it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999954000572433	WITHOUT_CLASSIFICATION	4.5999427566938465E-6	DESIGN
for now just "re-flatten" the metamodel since this is temporary stuff anyway (hhh-1907)	WITHOUT_CLASSIFICATION	0.9506987596566063	WITHOUT_CLASSIFICATION	0.049301240343393775	DESIGN
configure the cache to use our tm	WITHOUT_CLASSIFICATION	0.9993853653824435	WITHOUT_CLASSIFICATION	6.146346175565469E-4	DESIGN
this solution would allow us to eliminate the owner arg to disassemble() but what if the collection was null and then later had elements added? seems unsafe session.getpersistencecontext().getcollectionentry( (persistentcollection) value ).getkey()	WITHOUT_CLASSIFICATION	0.8403479032981086	WITHOUT_CLASSIFICATION	0.1596520967018914	DESIGN
make sure jbc doesn't look one up	WITHOUT_CLASSIFICATION	0.9997230057192387	WITHOUT_CLASSIFICATION	2.769942807613206E-4	DESIGN
some collections are not lazy	WITHOUT_CLASSIFICATION	0.9926873924259229	WITHOUT_CLASSIFICATION	0.00731260757407719	DESIGN
here we don't want to suspend the tx. if we do 1) we might be caching query results that reflect uncommitted changes. no tx == no wl on cache node so other threads can prematurely see those query results 2) no tx == immediate replication. more overhead plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.7222589168986268	WITHOUT_CLASSIFICATION	0.2777410831013733	DESIGN
return the (fully resolved) identifier value but do not resolve to the actual referenced entity instance note the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9991909638113222	WITHOUT_CLASSIFICATION	8.09036188677814E-4	DESIGN
add a zero (or quite low) timeout option so we don't block. ignore any timeoutexception. basically we forego caching the query result in order to avoid blocking. reads are done with suspended tx so they should not hold the lock for long. not caching the query result is ok since any subsequent read will just see the old result with its out-of-date timestamp that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999999996542812	WITHOUT_CLASSIFICATION	3.457187653919552E-10	DESIGN
impl note takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method	WITHOUT_CLASSIFICATION	0.9809261633563728	WITHOUT_CLASSIFICATION	0.019073836643627183	DESIGN
we have the jbcwritemutex so no other local thread will be trying to write this key. it's possible here some remote thread has come in and changed the values again but since we are reading the values to write to jbc right now we know we are writing the latest values i.e. we don't assume that what we cached in entry.update() above is what we should write to jbc now. our write could be redundant i.e. we are writing what some remote thread just came in an wrote. there is a chance that yet another remote thread will update us and we'll then overwrite that later data in jbc. but all remote nodes will ignore that change in their localcache the only place it will live will be in jbc where it can only effect the initial state transfer values on newly joined nodes (i.e. populatelocalcache()).	WITHOUT_CLASSIFICATION	0.9977024087932597	WITHOUT_CLASSIFICATION	0.0022975912067403556	DESIGN
local cache so we use synchronization	WITHOUT_CLASSIFICATION	0.9891248335591765	WITHOUT_CLASSIFICATION	0.010875166440823505	DESIGN
local cache so we use synchronization	WITHOUT_CLASSIFICATION	0.9891248335591765	WITHOUT_CLASSIFICATION	0.010875166440823505	DESIGN
don't need to lock the cache here since if someone else inserted the same pk first the insert would fail	WITHOUT_CLASSIFICATION	0.9999961952795324	WITHOUT_CLASSIFICATION	3.804720467517422E-6	DESIGN
we need to grab the version value from the entity otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9725520146085188	WITHOUT_CLASSIFICATION	0.02744798539148115	DESIGN
we need to obtain the lock before any actions are executed since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9994981379390072	WITHOUT_CLASSIFICATION	5.018620609928079E-4	DESIGN
postdelete after actually deleting a row record the fact that the instance no longer exists on the database (needed for identity-column key generation) and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9909181545385898	WITHOUT_CLASSIFICATION	0.009081845461410184	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9995534802404356	WITHOUT_CLASSIFICATION	4.4651975956443564E-4	DESIGN
todo what else to do here?	DESIGN	0.9640840841874305	DESIGN	0.035915915812569504	WITHOUT_CLASSIFICATION
put() has nowait semantics is this really appropriate? note that it needs to be async replication never local or sync	DESIGN	0.9789009232147072	DESIGN	0.02109907678529276	WITHOUT_CLASSIFICATION
'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. the need for it is intended to be alleviated with future developement thus it is not defined as an environment constant it is used to control whether we should consult the jdbc metadata to determine certain settings default values it is useful to not do this when the database may not be available (mainly in tools usage).	DESIGN	0.9999964952436377	DESIGN	3.504756362340792E-6	WITHOUT_CLASSIFICATION
todo get sql rendering out of this package!	DESIGN	0.5835625313845384	WITHOUT_CLASSIFICATION	0.41643746861546177	DESIGN
todo get sql rendering out of this package!	DESIGN	0.5835625313845384	WITHOUT_CLASSIFICATION	0.41643746861546177	DESIGN
todo eventually merge this with treecache and just add optional opt-lock support there.	DESIGN	0.9504421122628137	DESIGN	0.04955788773718634	WITHOUT_CLASSIFICATION
can happen because of the multiple ways cache.remove() can be invoked (	DESIGN	0.999992511373174	WITHOUT_CLASSIFICATION	7.488626826038406E-6	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea	DESIGN	0.9828023320051912	WITHOUT_CLASSIFICATION	0.017197667994808832	DESIGN
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9999999124622398	DESIGN	8.753776011269523E-8	WITHOUT_CLASSIFICATION
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9999999124622398	DESIGN	8.753776011269523E-8	WITHOUT_CLASSIFICATION
fixme hacky workaround to jbcache-1202	DESIGN	0.9999907659867399	DESIGN	9.234013260079978E-6	WITHOUT_CLASSIFICATION
fixme hacky workaround to jbcache-1202	DESIGN	0.9999907659867399	DESIGN	9.234013260079978E-6	WITHOUT_CLASSIFICATION
todo i considered validating ts cache config here but decided to defer unti gettimestampscacheinstance() in case the cache is never actually used	DESIGN	0.9999813539120336	DESIGN	1.8646087966447102E-5	WITHOUT_CLASSIFICATION
todo is this a valid operation on a timestamps cache?	DESIGN	0.8979940105062503	DESIGN	0.10200598949374971	WITHOUT_CLASSIFICATION
todo is this a valid operation on a timestamps cache?	DESIGN	0.8979940105062503	DESIGN	0.10200598949374971	WITHOUT_CLASSIFICATION
todo why not use the timestamp in a dataversion?	DESIGN	0.9953665470116699	DESIGN	0.004633452988330076	WITHOUT_CLASSIFICATION
can happen because of the multiple ways cache.remove() can be invoked (	DESIGN	0.999992511373174	WITHOUT_CLASSIFICATION	7.488626826038406E-6	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea	DESIGN	0.9828023320051912	WITHOUT_CLASSIFICATION	0.017197667994808832	DESIGN
swaldman 2004-02-07 modify to allow null values to signify fall through to c3p0 poolconfig defaults	DESIGN	0.9992383888961376	WITHOUT_CLASSIFICATION	7.616111038623417E-4	DESIGN
turn hibernate.c3p0. into c3p0. so c3p0 gets a chance to see all hibernate.c3p0.	DESIGN	0.9812531914164498	WITHOUT_CLASSIFICATION	0.01874680858355019	DESIGN
todo this bit actually has to be called after all cascades! but since identity insert is called synchronously instead of asynchronously as other actions it isn't	DESIGN	0.8823597044736707	WITHOUT_CLASSIFICATION	0.11764029552632933	DESIGN
todo reenable if we also fix the above todo	DESIGN	0.8471532207098552	DESIGN	0.15284677929014476	WITHOUT_CLASSIFICATION
todo inefficient if that cache is just going to ignore the updated state!	DESIGN	0.9668986879092736	WITHOUT_CLASSIFICATION	0.03310131209072632	DESIGN
we may be screwed here since the collection action is about to execute and we do not know the final owner key value	DESIGN	0.9997567758913165	WITHOUT_CLASSIFICATION	2.4322410868358362E-4	DESIGN
create an action that will evict collection and entity regions based on queryspaces (table names). todo cache the autodetected information and pass it in instead.	DESIGN	0.8497173127777791	WITHOUT_CLASSIFICATION	0.150282687222221	DESIGN
todo what else to do here?	DESIGN	0.9640840841874305	DESIGN	0.035915915812569504	WITHOUT_CLASSIFICATION
todo modify the class definition if not already transformed	DESIGN	0.944131255236076	DESIGN	0.055868744763923985	WITHOUT_CLASSIFICATION
todo what else to do here?	DESIGN	0.9640840841874305	DESIGN	0.035915915812569504	WITHOUT_CLASSIFICATION
this is called by sessionfactory irregardless we just disregard here could also add a check to sessionfactory to only conditionally call start	DESIGN	0.9606909992790593	WITHOUT_CLASSIFICATION	0.03930900072094065	DESIGN
this is called by sessionfactory irregardless we just disregard here could also add a check to sessionfactory to only conditionally call stop	DESIGN	0.9740872470122908	WITHOUT_CLASSIFICATION	0.025912752987709255	DESIGN
todo to handle concurrent writes correctly this should return a lock to the client	DESIGN	0.9951868752232512	DESIGN	0.004813124776748757	WITHOUT_CLASSIFICATION
put() has nowait semantics is this really appropriate? note that it needs to be async replication never local or sync	DESIGN	0.9789009232147072	DESIGN	0.02109907678529276	WITHOUT_CLASSIFICATION
todo to handle concurrent writes correctly the client should pass in a lock	DESIGN	0.8073250705001502	DESIGN	0.1926749294998497	WITHOUT_CLASSIFICATION
todo assumes all collections disassemble to an array!	DESIGN	0.9871829973155641	WITHOUT_CLASSIFICATION	0.01281700268443582	DESIGN
todo reuse the preloadevent	DESIGN	0.8786023728153166	WITHOUT_CLASSIFICATION	0.1213976271846834	DESIGN
todo this was added to support initializing an entity's entityentry snapshot during reattach this should be refactored to instead expose a method to assemble a entityentry based on this state for return.	DESIGN	0.992606730746102	DESIGN	0.007393269253898085	WITHOUT_CLASSIFICATION
todo what is the implication of this?	DESIGN	0.9797152993330618	DESIGN	0.020284700666938302	WITHOUT_CLASSIFICATION
use count as the default. this mimics the old behavior although none might be a better option moving forward in the case of callable	DESIGN	0.9489518134319257	WITHOUT_CLASSIFICATION	0.05104818656807434	DESIGN
todo joinkeycolumnname & foreignkeycolumnname should be called either here or at a slightly higer level in the stack (to get all the information we need) right now hbmbinder does not support the	DESIGN	0.9861789159535195	DESIGN	0.01382108404648046	WITHOUT_CLASSIFICATION
todo suck this into initlaziness!	DESIGN	0.9005669721367078	DESIGN	0.09943302786329233	WITHOUT_CLASSIFICATION
we have to set up the table later!! yuck	DESIGN	0.9997711100466635	WITHOUT_CLASSIFICATION	2.288899533365273E-4	DESIGN
todo better to degrade to lazy="false" if uninstrumented	DESIGN	0.8445115757721965	DESIGN	0.1554884242278034	WITHOUT_CLASSIFICATION
todo again how should this work for non-pojo entities?	DESIGN	0.9970938004772895	DESIGN	0.0029061995227104872	WITHOUT_CLASSIFICATION
todo this is a bit of copy/paste from indexedcollection.createprimarykey()	DESIGN	0.9863481957369906	DESIGN	0.013651804263009373	WITHOUT_CLASSIFICATION
this inner class implements a case statement.perhaps im being a bit over-clever here	DESIGN	0.5732225131984048	DESIGN	0.4267774868015953	WITHOUT_CLASSIFICATION
todo bad implementation cos it depends upon ordering of mapping doc fixing this requires that collection/persistentclass gain access to the mappings reference from configuration (or the filterdefinitions map directly) sometime during configuration.buildsessionfactory (after all the types/filter-defs are known and before building persisters).	DESIGN	0.967911313735951	DESIGN	0.032088686264049	WITHOUT_CLASSIFICATION
use of a stringbuffer to workaround a jdk bug	DESIGN	0.9920055010625087	DESIGN	0.00799449893749119	WITHOUT_CLASSIFICATION
hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9998440597630136	WITHOUT_CLASSIFICATION	1.5594023698646518E-4	DESIGN
fixme get the persistentclass	DESIGN	0.5814196635276918	WITHOUT_CLASSIFICATION	0.41858033647230813	DESIGN
fixme get the persistentclass	DESIGN	0.5814196635276918	WITHOUT_CLASSIFICATION	0.41858033647230813	DESIGN
icky workaround for mysql bug	DESIGN	0.8986434878636612	DESIGN	0.10135651213633885	WITHOUT_CLASSIFICATION
todo somehow add the newly created foreign keys to the internal collection	DESIGN	0.6971554397533538	DESIGN	0.30284456024664624	WITHOUT_CLASSIFICATION
todo possibly relax that	DESIGN	0.5689518121905708	WITHOUT_CLASSIFICATION	0.43104818780942916	DESIGN
todo possibly relax that	DESIGN	0.5689518121905708	WITHOUT_CLASSIFICATION	0.43104818780942916	DESIGN
todo possibly relax that	DESIGN	0.5689518121905708	WITHOUT_CLASSIFICATION	0.43104818780942916	DESIGN
use of a stringbuffer to workaround a jdk bug	DESIGN	0.9920055010625087	DESIGN	0.00799449893749119	WITHOUT_CLASSIFICATION
use a degenerated strategy for backward compatibility	DESIGN	0.9985766214939065	WITHOUT_CLASSIFICATION	0.001423378506093614	DESIGN
sets can be just a view of a part of another collection. do we need to copy it to be sure it won't be changing underneath us? ie. this.set.addall(set)	DESIGN	0.9542761820323579	WITHOUT_CLASSIFICATION	0.04572381796764219	DESIGN
note that i parameter is now unused (delete it?)	DESIGN	0.9914535730700542	DESIGN	0.008546426929945804	WITHOUT_CLASSIFICATION
just to help out during the load (ugly i know)	DESIGN	0.9988577284499423	WITHOUT_CLASSIFICATION	0.0011422715500577438	DESIGN
todo safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.887636868554076	WITHOUT_CLASSIFICATION	0.11236313144592405	DESIGN
yick! need this for proper serialization/deserialization handling	DESIGN	0.8795894817788319	WITHOUT_CLASSIFICATION	0.12041051822116808	DESIGN
todo get sql rendering out of this package!	DESIGN	0.5835625313845384	WITHOUT_CLASSIFICATION	0.41643746861546177	DESIGN
todo get sql rendering out of this package!	DESIGN	0.5835625313845384	WITHOUT_CLASSIFICATION	0.41643746861546177	DESIGN
yuck!	DESIGN	0.9997513558113361	WITHOUT_CLASSIFICATION	2.486441886638397E-4	DESIGN
todo get sql rendering out of this package!	DESIGN	0.5835625313845384	WITHOUT_CLASSIFICATION	0.41643746861546177	DESIGN
todo not sure this is correct could not find docs on how to do this.	DESIGN	0.9999891269128153	DESIGN	1.0873087184712074E-5	WITHOUT_CLASSIFICATION
hsql has no blob/clob support . but just put these here for now!	DESIGN	0.9999476136446448	WITHOUT_CLASSIFICATION	5.2386355355210694E-5	DESIGN
does this need holdlock also? return tablename + " with (updlock rowlock holdlock)"	DESIGN	0.9974239903537778	WITHOUT_CLASSIFICATION	0.0025760096462222083	DESIGN
sql-server at least needed this dropped after use strange!	DESIGN	0.9930755993425622	WITHOUT_CLASSIFICATION	0.006924400657437816	DESIGN
todo is there really any reason to kkeep trying if this fails once?	DESIGN	0.5514402880117456	DESIGN	0.4485597119882545	WITHOUT_CLASSIFICATION
tbd should this be varbinary($1)? registercolumntype(types.varbinary "binary($1)")	DESIGN	0.9377045320074927	WITHOUT_CLASSIFICATION	0.062295467992507327	DESIGN
is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9992026996147991	WITHOUT_CLASSIFICATION	7.973003852008336E-4	DESIGN
xmlforest requires a new kind of function constructor	DESIGN	0.998658362111515	WITHOUT_CLASSIFICATION	0.0013416378884849485	DESIGN
does this dialect support the alter table syntax?	DESIGN	0.9957766624541251	WITHOUT_CLASSIFICATION	0.0042233375458749205	DESIGN
do we need to qualify index names with the schema name?	DESIGN	0.9984904366028603	WITHOUT_CLASSIFICATION	0.0015095633971397569	DESIGN
does this dialect support the unique column syntax?	DESIGN	0.9805466481538049	WITHOUT_CLASSIFICATION	0.01945335184619516	DESIGN
does this dialect support check constraints?	DESIGN	0.9294696578040763	WITHOUT_CLASSIFICATION	0.07053034219592368	DESIGN
do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9913373577242345	WITHOUT_CLASSIFICATION	0.008662642275765497	DESIGN
does this dialect support the for update syntax?	DESIGN	0.991903638445241	WITHOUT_CLASSIFICATION	0.008096361554759096	DESIGN
does this dialect support the oracle-style for update nowait syntax?	DESIGN	0.991903638445241	WITHOUT_CLASSIFICATION	0.008096361554759096	DESIGN
does this dialect support for update of allowing particular rows to be locked?	DESIGN	0.9250504330562491	WITHOUT_CLASSIFICATION	0.07494956694375086	DESIGN
note there is a wierd implementation in the client side	DESIGN	0.999678880235764	WITHOUT_CLASSIFICATION	3.2111976423591373E-4	DESIGN
todo never reached since gettypename() actually throws an exception!	DESIGN	0.9957326770009238	WITHOUT_CLASSIFICATION	0.0042673229990760776	DESIGN
todo should we additionally check the current isolation mode explicitly?	DESIGN	0.9240965891498069	DESIGN	0.07590341085019321	WITHOUT_CLASSIFICATION
todo remove this and just have subclasses use isolater/isolatedwork directly	DESIGN	0.9938064733379788	DESIGN	0.006193526662021329	WITHOUT_CLASSIFICATION
todo should orphans really be deleted during lock???	DESIGN	0.9491742166121326	DESIGN	0.05082578338786739	WITHOUT_CLASSIFICATION
orphans should not be deleted during merge??	DESIGN	0.9910331089750185	WITHOUT_CLASSIFICATION	0.008966891024981423	DESIGN
orphans should not be deleted during copy??	DESIGN	0.9910331089750185	WITHOUT_CLASSIFICATION	0.008966891024981423	DESIGN
i suppose?	DESIGN	0.9975638929847063	WITHOUT_CLASSIFICATION	0.002436107015293676	DESIGN
todo suck this logic into the collection!	DESIGN	0.6167633893676867	DESIGN	0.38323661063231323	WITHOUT_CLASSIFICATION
todo an alternative is to check if the owner has changed if it hasn't then get the id from collection.getowner()	DESIGN	0.9956041942905123	WITHOUT_CLASSIFICATION	0.00439580570948768	DESIGN
todorefactor + make this method private	DESIGN	0.9934582733375427	WITHOUT_CLASSIFICATION	0.006541726662457348	DESIGN
todo we can actually just determine this from the incoming entityentry-s	DESIGN	0.8950160618394603	DESIGN	0.10498393816053975	WITHOUT_CLASSIFICATION
todo should this be an initializeentityeventlistener??? (watch out for performance!)	DESIGN	0.9807772800739984	DESIGN	0.019222719926001528	WITHOUT_CLASSIFICATION
todo better to pass the id in as an argument?	DESIGN	0.9475125827209029	WITHOUT_CLASSIFICATION	0.052487417279097164	DESIGN
todo potentially look at optimizing these two arrays	DESIGN	0.7819059234489345	DESIGN	0.2180940765510656	WITHOUT_CLASSIFICATION
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.9997702274797744	DESIGN	2.2977252022555582E-4	WITHOUT_CLASSIFICATION
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.9997702274797744	DESIGN	2.2977252022555582E-4	WITHOUT_CLASSIFICATION
todo temporary	DESIGN	0.9657661974063458	DESIGN	0.03423380259365422	WITHOUT_CLASSIFICATION
todo not quite sure about the full implications of this!	DESIGN	0.8956350359554612	DESIGN	0.10436496404453877	WITHOUT_CLASSIFICATION
todo not quite sure about the full implications of this!	DESIGN	0.8956350359554612	DESIGN	0.10436496404453877	WITHOUT_CLASSIFICATION
todo ugly here	DESIGN	0.9962557193566461	DESIGN	0.003744280643353924	WITHOUT_CLASSIFICATION
this is kinda the best we can do	DESIGN	0.947990489987598	WITHOUT_CLASSIFICATION	0.05200951001240185	DESIGN
todo this needn't exclude subclasses	DESIGN	0.5375717699423959	WITHOUT_CLASSIFICATION	0.46242823005760414	DESIGN
todo need map? the prob is a proper key right?	DESIGN	0.9998024888942401	DESIGN	1.9751110575995243E-4	WITHOUT_CLASSIFICATION
todo i'd much rather have this done from #endloadingcollection(collectionpersisterloadingcollectionentry)	DESIGN	0.9615935081774226	DESIGN	0.03840649182257738	WITHOUT_CLASSIFICATION
todo hack!!! note here we cleanup the load context when we have no more local lce entries. this "works" for the time being because really only the collection load contexts are implemented. long term this cleanup should become part of the "close result set" processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9994952660649843	DESIGN	5.047339350157141E-4	WITHOUT_CLASSIFICATION
todo should really move this log statement to collectiontype where this is used from	DESIGN	0.9999984829890425	DESIGN	1.5170109574290856E-6	WITHOUT_CLASSIFICATION
todo keep seperate notions of qt[] here for shallow/non-shallow queries	DESIGN	0.563545782620302	DESIGN	0.436454217379698	WITHOUT_CLASSIFICATION
todo add this info to the translator and aggregate it here	DESIGN	0.945149564030213	DESIGN	0.054850435969786976	WITHOUT_CLASSIFICATION
todo move into collection type so we can use polymorphism!	DESIGN	0.9986363280064956	DESIGN	0.0013636719935043288	WITHOUT_CLASSIFICATION
todo should we check the current isolation mode explicitly?	DESIGN	0.9165003481061476	DESIGN	0.08349965189385242	WITHOUT_CLASSIFICATION
todo suck into event class	DESIGN	0.7466985239886018	DESIGN	0.25330147601139813	WITHOUT_CLASSIFICATION
do we even really need this? the update will fail anyway.	DESIGN	0.9863761169103805	WITHOUT_CLASSIFICATION	0.013623883089619584	DESIGN
hum should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9838254159737925	WITHOUT_CLASSIFICATION	0.01617458402620747	DESIGN
todo would it be better to do a refresh from db?	DESIGN	0.9906067519471311	DESIGN	0.009393248052868782	WITHOUT_CLASSIFICATION
todo we use two visitors here inefficient!	DESIGN	0.9225914542934863	DESIGN	0.07740854570651368	WITHOUT_CLASSIFICATION
this class has no proxies (so do a shortcut)	DESIGN	0.9928269444123184	WITHOUT_CLASSIFICATION	0.007173055587681653	DESIGN
postload is needed for ejb3 todo reuse the postloadevent	DESIGN	0.947433973665891	WITHOUT_CLASSIFICATION	0.05256602633410914	DESIGN
todo put this stuff back in to read snapshot from the second-level cache (needs some extra work)	DESIGN	0.7787521728436285	DESIGN	0.22124782715637137	WITHOUT_CLASSIFICATION
null or brand new collection this will also (inefficiently) handle arrays which have no snapshot so we can't do any better	DESIGN	0.9954101380015281	WITHOUT_CLASSIFICATION	0.004589861998471845	DESIGN
todo is this 100% correct?	DESIGN	0.9962537765524915	DESIGN	0.003746223447508652	WITHOUT_CLASSIFICATION
todo iteratively get transient entities and retry merge until one of the following conditions 1) transientcopycache.size() == 0 2) transientcopycache.size() is not decreasing and copycache.size() is not increasing todo find out if retrying can add entities to copycache (don't think it can) for now just retry once throw transientobjectexception if there are still any transient entities	DESIGN	0.6703755556619028	WITHOUT_CLASSIFICATION	0.3296244443380973	DESIGN
entity name will not be available for non-pojo entities todo cache the entity name somewhere so that it is available to this exception	DESIGN	0.998055755344744	DESIGN	0.001944244655256034	WITHOUT_CLASSIFICATION
todo we should throw an exception if we really know for sure that this is a detached instance rather than just assuming throw new staleobjectstateexception(entityname id)	DESIGN	0.9948511828196513	DESIGN	0.005148817180348588	WITHOUT_CLASSIFICATION
todo perhaps we should additionally require that the incoming entity version be equivalent to the defined unsaved-value?	DESIGN	0.9996944645329757	DESIGN	3.055354670243239E-4	WITHOUT_CLASSIFICATION
perhaps this should be an exception since it is only ever used in the above method?	DESIGN	0.9779892249194546	DESIGN	0.02201077508054536	WITHOUT_CLASSIFICATION
put a placeholder in entries so we don't recurse back and try to save() the same object again. question should this be done before onsave() is called? likewise should it be done before onupdate()?	DESIGN	0.9178619968255096	WITHOUT_CLASSIFICATION	0.08213800317449034	DESIGN
todo merge into one method!	DESIGN	0.9177202478092845	DESIGN	0.0822797521907155	WITHOUT_CLASSIFICATION
todo refactor to .sql package	DESIGN	0.9703381572796274	DESIGN	0.029661842720372616	WITHOUT_CLASSIFICATION
provides query splitting methods which were originally in querytranslator. <br> todo this will need to be refactored at some point. @author josh	DESIGN	0.9904438996609894	DESIGN	0.009556100339010488	WITHOUT_CLASSIFICATION
todo this is one of the ugliest and most fragile pieces of code in hibernate.	DESIGN	0.9616273142291677	DESIGN	0.038372685770832256	WITHOUT_CLASSIFICATION
todo temporary needed because currently persister is the one that creates and renders the join fragments for inheritence hierarchies	DESIGN	0.5001684614937671	WITHOUT_CLASSIFICATION	0.4998315385062329	DESIGN
todo better way?!?	DESIGN	0.9366912215468113	DESIGN	0.06330877845318876	WITHOUT_CLASSIFICATION
not possible to simply re-use the versionpropertynode here as it causes oom errors due to circularity (	DESIGN	0.9999158598699571	WITHOUT_CLASSIFICATION	8.414013004296959E-5	DESIGN
todothis is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9994773557355535	WITHOUT_CLASSIFICATION	5.226442644464419E-4	DESIGN
todo this is a bit dodgy come up with a better way to check this (plus see above comment)	DESIGN	0.999975188771345	DESIGN	2.48112286550714E-5	WITHOUT_CLASSIFICATION
even here if only properties mapped to the "base table" are referenced in the set and where clauses this could be handled by the basicdelegate. todo decide if it is better performance-wise to perform that check or to simply use the multitableupdatedelegate	DESIGN	0.9994763244149533	DESIGN	5.236755850467305E-4	WITHOUT_CLASSIFICATION
todo switch statements are always evil! we already had bugs because of forgotten token types. use polymorphism for this!	DESIGN	0.9049436250464303	DESIGN	0.09505637495356967	WITHOUT_CLASSIFICATION
todo we really need to be able to deal with component paths here also this is difficult because the hql-sql grammar expects all those node types to be fromreferencenodes. one potential fix here would be to convert the intoclause to just use a fromclause/fromelement combo (as a child of the insertstatement) and move all this logic into the insertstatement. that's probably the easiest approach (read least amount of changes to the grammar and code) but just doesn't feel right as then an insert would contain 2 from-clauses	DESIGN	0.993582871553028	DESIGN	0.006417128446971958	WITHOUT_CLASSIFICATION
really there are two situations where it should be ok to allow the insertion into properties defined on a superclass 1) union-subclass with an abstract root entity 2) discrim-subclass #1 is handled already because of the fact that unionsubclasspersister alreay always returns 0 for this call we may want to disallow it for discrim-subclass just for consistency-sake (currently does not work anyway)	DESIGN	0.7388421353780359	DESIGN	0.26115786462196405	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9997513558113361	WITHOUT_CLASSIFICATION	2.486441886638397E-4	DESIGN
implicit joins are always(?) ok to reuse	DESIGN	0.9999953758189952	WITHOUT_CLASSIFICATION	4.624181004690436E-6	DESIGN
todo we may also want to check that the types here map to exactly one column/jdbc-type can't think of a situation where arithmetic expression between multi-column mappings makes any sense.	DESIGN	0.771358777889998	DESIGN	0.22864122211000204	WITHOUT_CLASSIFICATION
we do not know either type blind guess!	DESIGN	0.9871294108788335	WITHOUT_CLASSIFICATION	0.012870589121166358	DESIGN
todo used to be exprnoparens! was this needed?	DESIGN	0.9999999242682653	DESIGN	7.573173455690577E-8	WITHOUT_CLASSIFICATION
todo replace this with a more elegant solution.	DESIGN	0.9986083015045873	DESIGN	0.0013916984954125847	WITHOUT_CLASSIFICATION
todo should this really return null? if not figure out something better to do here.	DESIGN	0.9998300861273804	DESIGN	1.6991387261958398E-4	WITHOUT_CLASSIFICATION
todo get sql rendering out of this package!	DESIGN	0.5835625313845384	WITHOUT_CLASSIFICATION	0.41643746861546177	DESIGN
yuck!	DESIGN	0.9997513558113361	WITHOUT_CLASSIFICATION	2.486441886638397E-4	DESIGN
ignore it the incoming property could not be found so we cannot be sure what to do here. at the very least the safest is to simply not apply any dereference toggling	DESIGN	0.8729239753964014	DESIGN	0.12707602460359857	WITHOUT_CLASSIFICATION
todo most of below was taken verbatim from dotnode should either delegate this logic or super-type it	DESIGN	0.7341020587725331	WITHOUT_CLASSIFICATION	0.26589794122746685	DESIGN
otherwise a trim-specification and/or a trim-character have been specified we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character the trim-source	DESIGN	0.9962518888406683	WITHOUT_CLASSIFICATION	0.003748111159331625	DESIGN
todo we should really just collect these from the various selectexpressions rather than regenerating here	DESIGN	0.9962953738716361	DESIGN	0.003704626128363773	WITHOUT_CLASSIFICATION
todo is this a bit ugly?	DESIGN	0.9940724555465843	DESIGN	0.005927544453415794	WITHOUT_CLASSIFICATION
need a better way to define the suffixes here	DESIGN	0.8178412721698247	WITHOUT_CLASSIFICATION	0.18215872783017525	DESIGN
todo something much better - look at the type of the other expression! todo have comparisonexpression and/or arithmeticexpression rules complete the resolution of boolean nodes.	DESIGN	0.9932230886343126	DESIGN	0.0067769113656873815	WITHOUT_CLASSIFICATION
todo what amount of significant digits need to be supported here? - from the decimalformat docs [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.8053498421453662	DESIGN	0.19465015785463383	WITHOUT_CLASSIFICATION
needed the "clazz_" check to work around union-subclasses todo is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9990124259340272	DESIGN	9.875740659728172E-4	WITHOUT_CLASSIFICATION
we should actually rework this class to not implement parser and just process path expressions in the most convenient way.	DESIGN	0.831638366092136	DESIGN	0.16836163390786402	WITHOUT_CLASSIFICATION
the class is now way to complex!	DESIGN	0.9948521847507494	WITHOUT_CLASSIFICATION	0.005147815249250567	DESIGN
todo get sql rendering out of here	DESIGN	0.7032664974461427	WITHOUT_CLASSIFICATION	0.2967335025538574	DESIGN
todo is there a better way?	DESIGN	0.9931813750779359	DESIGN	0.006818624922064134	WITHOUT_CLASSIFICATION
must be done here because of side-effect! yuck	DESIGN	0.9982024809362118	WITHOUT_CLASSIFICATION	0.0017975190637881631	DESIGN
name from a super query (a bit inelegant that it shows up here)	DESIGN	0.9965692731551455	WITHOUT_CLASSIFICATION	0.0034307268448544423	DESIGN
we should reengineer this class so that rather than the current ad - hoc linear approach to processing a stream of tokens we instead build up a tree of expressions.	DESIGN	0.7121590280490099	WITHOUT_CLASSIFICATION	0.2878409719509901	DESIGN
this is ugly here but needed because its a subquery	DESIGN	0.8952568155783529	WITHOUT_CLASSIFICATION	0.10474318442164715	DESIGN
unhappy about this being public is there a better way?	DESIGN	0.5731841882393913	DESIGN	0.42681581176060884	WITHOUT_CLASSIFICATION
make sure this is a defined parameter and check the incoming value type todo what should be the actual exception type here?	DESIGN	0.9998862921289853	DESIGN	1.137078710146308E-4	WITHOUT_CLASSIFICATION
todo this constructor form is only used from constructor directly below us can it go away?	DESIGN	0.9998803787745933	DESIGN	1.1962122540670129E-4	WITHOUT_CLASSIFICATION
todo copy/paste from sessionimpl pull up!	DESIGN	0.7604764960736865	WITHOUT_CLASSIFICATION	0.23952350392631352	DESIGN
todo should remove this exposure and have all references to the session's batcher use the connectionmanager.	DESIGN	0.9989637715708711	DESIGN	0.0010362284291288188	WITHOUT_CLASSIFICATION
todo should this get moved to persistentcontext? logically is persistentcontext the "thing" to which an interceptor gets attached?	DESIGN	0.9991509033528648	DESIGN	8.4909664713514E-4	WITHOUT_CLASSIFICATION
todo what type?	DESIGN	0.8682004511602357	DESIGN	0.1317995488397643	WITHOUT_CLASSIFICATION
todo should seriously consider not allowing a txn to begin from a child session can always route the request to the root session	DESIGN	0.986994852736205	DESIGN	0.013005147263794906	WITHOUT_CLASSIFICATION
short-circuit for performance	DESIGN	0.9980046373844077	WITHOUT_CLASSIFICATION	0.0019953626155923125	DESIGN
not absolutely necessary but does help with aggressive release	DESIGN	0.9644417424470948	WITHOUT_CLASSIFICATION	0.03555825755290521	DESIGN
todo remove these last two as batcher is no longer managing connections	DESIGN	0.8857248233458148	DESIGN	0.11427517665418521	WITHOUT_CLASSIFICATION
work around a bug in all known connection pools.	DESIGN	0.5994835165550783	WITHOUT_CLASSIFICATION	0.40051648344492186	DESIGN
todo make this the factory for "entity mode related" sessions also means making this the target of transaction-synch and the thing that knows how to cascade things between related sessions at that point perhaps this thing is a "sessioncontext" and connectionmanager is a "jdbccontext"? a "sessioncontext" should live in the impl package	DESIGN	0.9999646712953214	DESIGN	3.53287046786609E-5	WITHOUT_CLASSIFICATION
todo does this really need to be here? does the collection already have it's own up-to-date snapshot?	DESIGN	0.9999566576810224	DESIGN	4.3342318977651746E-5	WITHOUT_CLASSIFICATION
todo the i==entityspan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9963081657718718	DESIGN	0.003691834228128254	WITHOUT_CLASSIFICATION
this form used from annotations (?). essentially the same as the above using a resultset-mapping reference but without cachemode readonly and comment. fixme annotations do not use it so it can be remove from my pov @deprecated @param query the sql query string @param resultsetref the result-set-mapping name @param queryspaces any specified query spaces (used for auto-flushing) @param cacheable whether the query results are cacheable @param cacheregion if cacheable the region into which to store the results @param timeout a jdbc-level timeout to be applied @param fetchsize a jdbc-level fetch-size to be applied @param flushmode the flush mode to use for this query @param parametertypes parameter type map @param callable does the query string represent a callable object (i.e. proc)	DESIGN	0.9999684113920578	DESIGN	3.158860794219085E-5	WITHOUT_CLASSIFICATION
todo add the notion of enabled filters to the cachekey to differentiate filtered collections from non-filtered but cachekey is currently used for both collections and entities would ideally need to define two seperate ones currently this works in conjuction with the check on defaultinitializecollectioneventhandler.initializecollectionfromcache() (which makes sure to not read from cache with enabled filters). early exit!!!!!	DESIGN	0.9999143687954362	DESIGN	8.563120456392315E-5	WITHOUT_CLASSIFICATION
for sets we should end the collection load after resolving the entities since we might call hashcode() on the elements todo or we could do this polymorphically and have two different operations implemented differently for arrays	DESIGN	0.9979881112304057	DESIGN	0.0020118887695943703	WITHOUT_CLASSIFICATION
this is not very nice (and quite slow)	DESIGN	0.9684153460451763	DESIGN	0.03158465395482377	WITHOUT_CLASSIFICATION
use of trim() here is ugly?	DESIGN	0.9955618370977549	WITHOUT_CLASSIFICATION	0.004438162902245135	DESIGN
todo this is too conservative if all preceding joins were also inner joins we could use an inner join here	DESIGN	0.9768655419270623	DESIGN	0.023134458072937764	WITHOUT_CLASSIFICATION
todo look at the owning property and check that it isn't lazy (by instrumentation)	DESIGN	0.8962144173846541	DESIGN	0.103785582615346	WITHOUT_CLASSIFICATION
todo inefficient	DESIGN	0.54747502468766	DESIGN	0.4525249753123401	WITHOUT_CLASSIFICATION
why does this matter?	DESIGN	0.9038888450242147	WITHOUT_CLASSIFICATION	0.09611115497578528	DESIGN
from the collection of associations locate oja for the manytoone corresponding to this persister to fully define the many-to-many we need that oja so that we can use its alias here todo is there a better way here?	DESIGN	0.9999481537907546	DESIGN	5.1846209245285315E-5	WITHOUT_CLASSIFICATION
todo this class depends directly upon criteriaimpl in the impl package add a criteriaimplementor interface	DESIGN	0.9983663565339216	DESIGN	0.001633643466078444	WITHOUT_CLASSIFICATION
todo add a criteriaimplementor interface this class depends directly upon criteriaimpl in the impl package	DESIGN	0.9983663565339216	DESIGN	0.001633643466078444	WITHOUT_CLASSIFICATION
todo not so sure this is needed	DESIGN	0.8025830140321266	DESIGN	0.1974169859678733	WITHOUT_CLASSIFICATION
meant to handle dynamic instantiation queries(copy from queryloader)	DESIGN	0.9987366027441054	WITHOUT_CLASSIFICATION	0.0012633972558946998	DESIGN
todo the order in which entities are saved may matter (e.g. a particular transient entity may need to be saved before other transient entities can be saved keep retrying the batch of transient entities until either 1) there are no transient entities left in transientcopycache or 2) no transient entities were saved in the last batch for now just run through the transient entities and retry the merge	DESIGN	0.6086343871743778	WITHOUT_CLASSIFICATION	0.39136561282562227	DESIGN
todo this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9999993893435901	DESIGN	6.106564099533287E-7	WITHOUT_CLASSIFICATION
todo currently expects that the individual with expressions apply to the same sql table join. this may not be the case for joined-subclass where the property values might be coming from different tables in the joined hierarchy. at some point we should expand this to support that capability. however that has some difficulties 1) the biggest is how to handle ors when the individual comparisons are linked to different sql joins. 2) here we would need to track each comparison individually along with the join alias to which it applies and then pass that information back to the fromelement so it can pass it along to the joinsequence	DESIGN	0.8184339751652561	DESIGN	0.18156602483474396	WITHOUT_CLASSIFICATION
this function has a template -> restore output apply the template and write the result out todo downcast to avoid using an interface? yuck.	DESIGN	0.9947231513623609	WITHOUT_CLASSIFICATION	0.005276848637639107	DESIGN
at some point the generate phase needs to be moved out of here because a single object-level dml might spawn multiple sql dml command executions. possible to just move the sql generation for dml stuff but for consistency-sake probably best to just move responsiblity for the generation phase completely into the delegates (queryloader/statementexecutor) themselves. also not sure why queryloader currently even has a dependency on this at all does it need it? ideally like to see the walker itself given to the delegates directly	DESIGN	0.9999999942497315	DESIGN	5.750268534764957E-9	WITHOUT_CLASSIFICATION
get the right object from the list would it be easier to just call getentity() ??	DESIGN	0.9931518383300991	WITHOUT_CLASSIFICATION	0.006848161669900804	DESIGN
todo should we just collect these like with the collections above?	DESIGN	0.9982762756467093	DESIGN	0.0017237243532907823	WITHOUT_CLASSIFICATION
todo better to handle dynamic filters through implicit dynamicfilterparameterspecification see the discussion there in dynamicfilterparameterspecification's javadocs as to why it is currently not done that way.	DESIGN	0.9990201187741373	DESIGN	9.7988122586274E-4	WITHOUT_CLASSIFICATION
/ used only for regression testing!!!! todo obviously get rid of all this junk ) /	DESIGN	0.9925251091803926	DESIGN	0.007474890819607428	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9999786108543675	WITHOUT_CLASSIFICATION	2.138914563259633E-5	DESIGN
todo deprecated remove eventually	DESIGN	0.9017905930753278	DESIGN	0.09820940692467227	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9999786108543675	WITHOUT_CLASSIFICATION	2.138914563259633E-5	DESIGN
todo improve this hack!	DESIGN	0.9981070102338763	DESIGN	0.0018929897661236336	WITHOUT_CLASSIFICATION
inheritance cycle detection (paranoid check)	DESIGN	0.9993651670436541	WITHOUT_CLASSIFICATION	6.348329563460275E-4	DESIGN
todo remove use of instanceof!	DESIGN	0.9771960494439682	DESIGN	0.02280395055603185	WITHOUT_CLASSIFICATION
shortcut	DESIGN	0.9998589763429879	WITHOUT_CLASSIFICATION	1.4102365701204334E-4	DESIGN
todo handle the case of a foreign key to something other than the pk	DESIGN	0.8106183123706006	DESIGN	0.18938168762939944	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9999786108543675	WITHOUT_CLASSIFICATION	2.138914563259633E-5	DESIGN
todo remove	DESIGN	0.8741295621782836	DESIGN	0.1258704378217164	WITHOUT_CLASSIFICATION
todo remove	DESIGN	0.8741295621782836	DESIGN	0.1258704378217164	WITHOUT_CLASSIFICATION
todo remove	DESIGN	0.8741295621782836	DESIGN	0.1258704378217164	WITHOUT_CLASSIFICATION
todo throw exception?	DESIGN	0.6763989241872359	DESIGN	0.323601075812764	WITHOUT_CLASSIFICATION
todo throw exception? maybe warn if not the same?	DESIGN	0.9585176021343221	DESIGN	0.04148239786567788	WITHOUT_CLASSIFICATION
todo make entitypersister not depend on sessionfactoryimplementor interface if possible	DESIGN	0.9954166198536983	DESIGN	0.00458338014630165	WITHOUT_CLASSIFICATION
todo is there a more elegant way than downcasting?	DESIGN	0.9790388713431986	DESIGN	0.02096112865680152	WITHOUT_CLASSIFICATION
todo encapsulate the protected instance variables!	DESIGN	0.6320546297817541	WITHOUT_CLASSIFICATION	0.36794537021824586	DESIGN
should indicate that we are processing an insert/update/delete query with a subquery implied via a collection property function. here we need to use the table name itself as the qualification alias. todo verify this works for all databases todo is this also the case in non-"indexed" scenarios?	DESIGN	0.9868532924059362	DESIGN	0.013146707594063672	WITHOUT_CLASSIFICATION
todo copy/paste from insertrows()	DESIGN	0.5803555009162119	WITHOUT_CLASSIFICATION	0.41964449908378815	DESIGN
todo copy/paste from recreate()	DESIGN	0.5803555009162119	WITHOUT_CLASSIFICATION	0.41964449908378815	DESIGN
should this interface extend propertymapping?	DESIGN	0.831843431064272	WITHOUT_CLASSIFICATION	0.16815656893572792	DESIGN
ie. the subquery! yuck!	DESIGN	0.9995666923175818	WITHOUT_CLASSIFICATION	4.333076824182568E-4	DESIGN
todo move to .sql package!!	DESIGN	0.9806430655374714	DESIGN	0.01935693446252862	WITHOUT_CLASSIFICATION
todo code duplication with singletableentitypersister	DESIGN	0.8210402165671273	DESIGN	0.1789597834328727	WITHOUT_CLASSIFICATION
todo it would be really really nice to use this to also model components!	DESIGN	0.9998155340692475	DESIGN	1.8446593075261957E-4	WITHOUT_CLASSIFICATION
todo two hashmap lookups here is one too many	DESIGN	0.6055904942666611	DESIGN	0.3944095057333389	WITHOUT_CLASSIFICATION
todo code duplication with joinedsubclassentitypersister	DESIGN	0.8210402165671273	DESIGN	0.1789597834328727	WITHOUT_CLASSIFICATION
perhaps not really necessary	DESIGN	0.9644172628816503	DESIGN	0.03558273711834972	WITHOUT_CLASSIFICATION
note this assumes something about how propertyselectfragment is implemented by the subclass! was tounqotedaliasstrings( getidentifercolumnnames() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.7086018301825888	WITHOUT_CLASSIFICATION	0.29139816981741107	DESIGN
note this assumes something about how propertyselectfragment is implemented by the subclass! was tounqotedaliasstrings( getdiscriminatorcolumnname() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.7086018301825888	WITHOUT_CLASSIFICATION	0.29139816981741107	DESIGN
todo should we use select .. for update?	DESIGN	0.9496293403778232	DESIGN	0.05037065962217683	WITHOUT_CLASSIFICATION
todo optimize this better!	DESIGN	0.8379756970089112	DESIGN	0.16202430299108878	WITHOUT_CLASSIFICATION
todo should we allow suffixes on these ?	DESIGN	0.9961779946816852	DESIGN	0.0038220053183147303	WITHOUT_CLASSIFICATION
this is really ugly but necessary	DESIGN	0.8823020569126658	DESIGN	0.11769794308733422	WITHOUT_CLASSIFICATION
ugly little workaround for fact that createuniquekeyloaders() does not handle component properties	DESIGN	0.999989592597238	DESIGN	1.0407402762076876E-5	WITHOUT_CLASSIFICATION
todo disable batch loading if lockmode > read?	DESIGN	0.9968722540152458	WITHOUT_CLASSIFICATION	0.0031277459847541076	DESIGN
append the sql to return the generated identifier todo suck into insert	DESIGN	0.573228959419585	WITHOUT_CLASSIFICATION	0.42677104058041504	DESIGN
todo i am not so sure about the exception handling in this bit!	DESIGN	0.9984962930132093	DESIGN	0.001503706986790631	WITHOUT_CLASSIFICATION
todo is this really necessary????	DESIGN	0.9616498129043263	DESIGN	0.03835018709567367	WITHOUT_CLASSIFICATION
todo move to .sql package and refactor with similar things!	DESIGN	0.9985862404986208	DESIGN	0.001413759501379206	WITHOUT_CLASSIFICATION
todo implement functionality this might be painful to do here as the "join post processing" for the subquery has already been performed (meaning that for theta-join dialects the join conditions have already been moved over to the where clause). a "simple" solution here might to perform "join post processing" once for the entire query (including any subqueries) at one fell swoop	DESIGN	0.9997237094450662	DESIGN	2.762905549338271E-4	WITHOUT_CLASSIFICATION
todo this eventually needs to be removed	DESIGN	0.9603733449163729	DESIGN	0.03962665508362709	WITHOUT_CLASSIFICATION
kinda ugly but needed for collections with a "." node mapping	DESIGN	0.9612852952976136	WITHOUT_CLASSIFICATION	0.03871470470238639	DESIGN
is this ok?	DESIGN	0.9948080968542469	WITHOUT_CLASSIFICATION	0.00519190314575313	DESIGN
todo perhaps this should be some other runtimeexception	DESIGN	0.9999882579772486	DESIGN	1.1742022751452119E-5	WITHOUT_CLASSIFICATION
todo make this a bit nicer	DESIGN	0.9894060464464561	DESIGN	0.010593953553543983	WITHOUT_CLASSIFICATION
yuck	DESIGN	0.9993319190317783	WITHOUT_CLASSIFICATION	6.680809682216969E-4	DESIGN
todo we should provide some way to get keys of collection of statistics to make it easier to retrieve from a gui perspective	DESIGN	0.9998987868943361	DESIGN	1.0121310566395722E-4	WITHOUT_CLASSIFICATION
@return collection removal fixme even if isinverse="true"?	DESIGN	0.7799806284320985	DESIGN	0.2200193715679015	WITHOUT_CLASSIFICATION
todo will need reference to session factory to fully complete hhh-1907	DESIGN	0.9814983422448134	DESIGN	0.01850165775518662	WITHOUT_CLASSIFICATION
todo currently keeps getters and setters (instead of propertyaccessors) because of the way getgetter() and getsetter() are implemented currently yuck!	DESIGN	0.8615004346721035	DESIGN	0.13849956532789662	WITHOUT_CLASSIFICATION
todo redesign how propertyaccessors are acquired	DESIGN	0.8961184449848565	DESIGN	0.10388155501514344	WITHOUT_CLASSIFICATION
todo yuck!!!	DESIGN	0.6054472910647092	WITHOUT_CLASSIFICATION	0.3945527089352907	DESIGN
todo yuck!!! fix after hhh-1907 is complete	DESIGN	0.9890454633922198	DESIGN	0.010954536607780178	WITHOUT_CLASSIFICATION
todo need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9395719169933058	DESIGN	0.060428083006694173	WITHOUT_CLASSIFICATION
todo design new lifecycle for proxyfactory	DESIGN	0.7050963482585877	WITHOUT_CLASSIFICATION	0.29490365174141236	DESIGN
todo would be nice to handle proxy classes elegantly!	DESIGN	0.9485086353188085	DESIGN	0.05149136468119162	WITHOUT_CLASSIFICATION
todo copy/paste from manytoonetype	DESIGN	0.5803555009162119	WITHOUT_CLASSIFICATION	0.41964449908378815	DESIGN
todo should this be session.instantiate(persister )?	DESIGN	0.9915545057820098	DESIGN	0.008445494217990342	WITHOUT_CLASSIFICATION
todo this is a bit arbitrary expose a switch to the user?	DESIGN	0.9138814622843857	DESIGN	0.08611853771561435	WITHOUT_CLASSIFICATION
todo implement caching?! proxies?!	DESIGN	0.9075605794268332	DESIGN	0.09243942057316686	WITHOUT_CLASSIFICATION
todo is this right??	DESIGN	0.8096806989857649	DESIGN	0.1903193010142351	WITHOUT_CLASSIFICATION
is this really necessary?	DESIGN	0.9562776393212414	WITHOUT_CLASSIFICATION	0.04372236067875854	DESIGN
todo move these to a new joinabletype abstract class extended by entitytype and persistentcollectiontype	DESIGN	0.9943203813617462	DESIGN	0.005679618638253908	WITHOUT_CLASSIFICATION
todo this is very suboptimal for some subclasses (namely components) since it does not take advantage of two-phase-load	DESIGN	0.9908085478355199	DESIGN	0.00919145216448018	WITHOUT_CLASSIFICATION
worrying about proxies is perhaps a little bit of overkill here	DESIGN	0.997420434302333	DESIGN	0.0025795656976670095	WITHOUT_CLASSIFICATION
note very hackish workaround!! todo fix this so it will work for non-pojo entity mode	DESIGN	0.9999957738331815	DESIGN	4.2261668184730315E-6	WITHOUT_CLASSIFICATION
todo fix this so it will work for non-pojo entity mode	DESIGN	0.9968362388558133	DESIGN	0.003163761144186798	WITHOUT_CLASSIFICATION
we would probably refactor to have logicparser (builds a tree of simple expressions connected by and or not) expressionparser (translates from oo terms like foo foo.bar foo.bar.baz to sql terms like foos.id foos.bar_id etc) and pathexpressionparser (which does much the same thing it does now)	DESIGN	0.9993449707974422	WITHOUT_CLASSIFICATION	6.550292025576341E-4	DESIGN
todo this is a little inefficient don't need to do a whole deep replaceelements() call	DESIGN	0.999865214258009	DESIGN	1.347857419910115E-4	WITHOUT_CLASSIFICATION
workaround for weblogic	DESIGN	0.8800317565294213	DESIGN	0.11996824347057854	WITHOUT_CLASSIFICATION
todo this dependency is kinda bad	DESIGN	0.99225239137784	DESIGN	0.007747608622160048	WITHOUT_CLASSIFICATION
ick!	DESIGN	0.9997513558113361	WITHOUT_CLASSIFICATION	2.486441886638397E-4	DESIGN
short cut check	DESIGN	0.998806335047916	WITHOUT_CLASSIFICATION	0.001193664952083982	DESIGN
todo move to stringhelper?	DESIGN	0.9806430655374714	DESIGN	0.01935693446252862	WITHOUT_CLASSIFICATION
yukky! don't you have subclasses for that! todo race conditions can happen here	DESIGN	0.6269070066437668	DESIGN	0.37309299335623314	WITHOUT_CLASSIFICATION
todo we probably should have a statisticsnotpublishedexception to make it clean	DESIGN	0.9997258026073643	DESIGN	2.741973926357505E-4	WITHOUT_CLASSIFICATION
fixme hack to work around fact that calling node added = root.addchild( fqn ) doesn't properly set the version on the node	DESIGN	0.9999999499249209	DESIGN	5.0075079140521143E-8	WITHOUT_CLASSIFICATION
todo i considered validating the presence of the ts cache here but decided to defer unti getquerycacheinstance() in case the cache is never actually used	DESIGN	0.9999678070002911	DESIGN	3.219299970887162E-5	WITHOUT_CLASSIFICATION
need to do that here rather than in the save event listener to let the post insert events to have a id-filled entity when identity is used (ejb3)	DESIGN	0.7905217151570811	DESIGN	0.2094782848429189	WITHOUT_CLASSIFICATION
todo simply remove this override if we fix the above todos	DESIGN	0.9952104166664664	DESIGN	0.004789583333533611	WITHOUT_CLASSIFICATION
this is used by sessionfactoryimpl to hand to the generated sessionimpl was the only reason i could see that we cannot just use null as settings.cacheprovider	DESIGN	0.7720422384108622	DESIGN	0.2279577615891378	WITHOUT_CLASSIFICATION
this is done here 'cos we might only know the type here (ugly!) todo improve this a lot	DESIGN	0.9981641432685376	DESIGN	0.0018358567314623717	WITHOUT_CLASSIFICATION
todo would love to have this work on a notification basis where the successful binding of an entity/subclass would emit a notification which the extendsqueue entries could react to	DESIGN	0.9727806608014783	DESIGN	0.02721933919852182	WITHOUT_CLASSIFICATION
todo not sure the best way to handle this. the non-performant way	DESIGN	0.9923659372870454	DESIGN	0.007634062712954638	WITHOUT_CLASSIFICATION
would be better to use the element-type to determine whether the old and the new are equal here the problem being we do not necessarily have access to the element type in all cases	DESIGN	0.9449157620437233	WITHOUT_CLASSIFICATION	0.05508423795627661	DESIGN
this next bit is to allow for both unsaved-value="negative" and for "older" behavior where version number did not get seeded if it was already set in the object todo shift it into unsaved-value strategy	DESIGN	0.999983624295203	DESIGN	1.6375704796981724E-5	WITHOUT_CLASSIFICATION
merges don't cascade to uninitialized collections todo perhaps this does need to cascade after all.	DESIGN	0.9960784412184052	DESIGN	0.003921558781594903	WITHOUT_CLASSIFICATION
todo an alternative is to check if the owner has changed if it hasn't then return collection.getowner()	DESIGN	0.9944409448893855	WITHOUT_CLASSIFICATION	0.005559055110614474	DESIGN
it is possible that the tree-walking in outerjoinloader can get to an association defined by a subclass in which case the property-ref might refer to a property defined on a subclass of the current class in this case the table name is not known - this temporary solution assumes that the property-ref refers to a property of the subclass table that the association belongs to (a reasonable guess) todo fix this add outerjoinloadable.getsubclasspropertytablename(string propertyname)	DESIGN	0.9999998517507841	DESIGN	1.4824921599516975E-7	WITHOUT_CLASSIFICATION
this only works because collection entries are kept in a sequenced map by persistence context (maybe we should do like entities and keep a separate sequences set) todo calling entryset on an identitymap is slow!!	DESIGN	0.9982607102201525	DESIGN	0.0017392897798474403	WITHOUT_CLASSIFICATION
important to account for newly saved entities in query todo some kind of check for new status	DESIGN	0.9842872558825685	DESIGN	0.015712744117431458	WITHOUT_CLASSIFICATION
brand new collection todo or an array!! we can't lock objects with arrays now??	DESIGN	0.5326512640964152	DESIGN	0.4673487359035848	WITHOUT_CLASSIFICATION
todo if object was an uninitialized proxy this is inefficient resulting in two sql selects	DESIGN	0.8003769356444596	WITHOUT_CLASSIFICATION	0.19962306435554045	DESIGN
before cascade! todo should this be session.instantiate(persister )?	DESIGN	0.9870954929316884	DESIGN	0.012904507068311538	WITHOUT_CLASSIFICATION
todo absolutely no usages of this constructor form can it go away?	DESIGN	0.9306267207363296	DESIGN	0.06937327926367047	WITHOUT_CLASSIFICATION
todo need to find a clean way to handle the "event source" role a seperate classs responsible for generating/dispatching events just duplicates most of the session methods passing around seperate reto interceptor factory actionqueue and persistentcontext is not manageable	DESIGN	0.9999999580013186	DESIGN	4.199868143910723E-8	WITHOUT_CLASSIFICATION
todo remove	DESIGN	0.8741295621782836	DESIGN	0.1258704378217164	WITHOUT_CLASSIFICATION
aliasrefnode.resolve( false false aliasrefnode.gettext() ) todo is it kosher to do it here? todo is it kosher to do it here?	DESIGN	0.7427720693388734	DESIGN	0.25722793066112665	WITHOUT_CLASSIFICATION
no explicit select expression render the id and properties projection lists for every persister in the from clause into a single 'token node'. todo the only reason we need this stuff now is collection filters we should get rid of derived select clause completely!	DESIGN	0.973650677846914	DESIGN	0.026349322153086073	WITHOUT_CLASSIFICATION
todo an optimization here would be to consider cascade deletes and not gen those delete statements the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> the table info gotten here should really be self-contained (i.e. a class representation defining all the needed attributes) then we could then get an array of those	DESIGN	0.9989624528908182	DESIGN	0.0010375471091818396	WITHOUT_CLASSIFICATION
todo get sql rendering out of here create an ast for the join expressions. use the sql generator grammar to generate the sql text for the index expression.	DESIGN	0.9961352251001137	WITHOUT_CLASSIFICATION	0.0038647748998863573	DESIGN
todo this really needs to be delayed unitl after we definitively know all node types where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DESIGN	0.980337446000466	DESIGN	0.019662553999533903	WITHOUT_CLASSIFICATION
todo figure out a better way to get the from elements in a proper tree structure. if this is not the destination of a many-to-many add it as a child of the origin.	DESIGN	0.9852480294595429	DESIGN	0.014751970540457224	WITHOUT_CLASSIFICATION
work around that crazy issue where the tree contains "empty" fromelements (no text) afaict this is caused by fromelementfactory.createcollectionjoin()	DESIGN	0.9270858262100982	WITHOUT_CLASSIFICATION	0.07291417378990186	DESIGN
todo this class does too many things! we need a different kind of path expression parser for each of the diffferent ways in which path expressions can occur	DESIGN	0.9938983346065191	DESIGN	0.0061016653934808755	WITHOUT_CLASSIFICATION
real hacky used to count the nesting of parentheses	DESIGN	0.9665485328354876	WITHOUT_CLASSIFICATION	0.033451467164512375	DESIGN
todo would be really nice to cache the spec on the query-def so as to not have to re-calc the hash currently not doable though because of the resultset-ref stuff	DESIGN	0.770091259926026	WITHOUT_CLASSIFICATION	0.22990874007397397	DESIGN
for arrays we should end the collection load before resolving the entities since the actual array instances are not instantiated during loading todo or we could do this polymorphically and have two different operations implemented differently for arrays	DESIGN	0.9668506259311203	DESIGN	0.033149374068879744	WITHOUT_CLASSIFICATION
polymorphism not really handled completely correctly perhapswell actually its ok assuming that the entity name used in the lookup is the same as the the one used here which it will be	DESIGN	0.9874797396712707	WITHOUT_CLASSIFICATION	0.012520260328729313	DESIGN
todo should "record" how many properties we have reffered to - and if we don't get'em'all we throw an exception! way better than trial and error )	DESIGN	0.9999624218150781	DESIGN	3.757818492193315E-5	WITHOUT_CLASSIFICATION
very important!!!! - this class needs to be free of any static references to any cglib or javassist classes. otherwise users will always need both on their classpaths no matter which (if either) they use. another option here would be to remove the hibernate.ispropertyinitialized() method and have the users go through the sessionfactory to get this information.	DESIGN	0.6359108215204087	WITHOUT_CLASSIFICATION	0.3640891784795914	DESIGN
todo is it really neceassry to provide configuration to collectionpersisters ? should it not be enough with associated class ? or why does entitypersister's not get access to configuration ? the only reason i could see that configuration gets passed to collection persisters is so that they can look up the dom4j node name of the entity element in case no explicit node name was applied at the collection element level. are you kidding me? trivial to fix then. just store and expose the node name on the entity persister (which the collection persister looks up anyway via other means).	DESIGN	0.9999999947199292	DESIGN	5.280070801628531E-9	WITHOUT_CLASSIFICATION
for backward compatibility allow a set with no not-null element columns using all columns in the row locater sql todo create an implicit not null constraint on all cols?	DESIGN	0.5075674541545666	WITHOUT_CLASSIFICATION	0.49243254584543344	DESIGN
spaces todo i'm not sure but perhaps we should exclude abstract denormalized tables?	DESIGN	0.9995753063392634	DESIGN	4.246936607367212E-4	WITHOUT_CLASSIFICATION
workaround for backward compatibility of sets with no not-null columns assume all columns are used in the row locator sql	DESIGN	0.7187968775310309	DESIGN	0.28120312246896906	WITHOUT_CLASSIFICATION
note that this method could easily be moved up to basicentitypersister if we ever needed to reuse it from other subclasses	DESIGN	0.563875317765681	WITHOUT_CLASSIFICATION	0.43612468223431894	DESIGN
index += getpropertycolumnspan( i ) todo this is kinda slow	DESIGN	0.8017633945443404	DESIGN	0.19823660545565946	WITHOUT_CLASSIFICATION
todo need some caching scheme? really comes down to decision regarding amount of state (if any) kept on propertyaccessors	DESIGN	0.6154058033550338	DESIGN	0.3845941966449662	WITHOUT_CLASSIFICATION
todo here is why we need to make bytecode provider global ( todo again fix this after hhh-1907 is complete	DESIGN	0.9997997285932165	DESIGN	2.0027140678333176E-4	WITHOUT_CLASSIFICATION
todo yuck! this is not quite good enough it's a quick hack around the problem of having a to-one association that refers to an embedded component	DESIGN	0.9999999994114693	DESIGN	5.88530623135906E-10	WITHOUT_CLASSIFICATION
for dom4j "collections" only todo it would be better if this was done at the higher level by printer	DESIGN	0.9547460522001954	DESIGN	0.045253947799804656	WITHOUT_CLASSIFICATION
would be great to move all this below here into another method that could also be used from the new scrolling stuff. would need to change the way the max-row stuff is handled (i.e. behind an interface) so that i could do the control breaking at the means to know when to stop	DESIGN	0.9999999953737041	DESIGN	4.6262958956128205E-9	WITHOUT_CLASSIFICATION
todo can we always use the "null property" approach for everything?	DESIGN	0.9700218763956497	DESIGN	0.029978123604350232	WITHOUT_CLASSIFICATION
polymorphism comment above	DESIGN	0.999959666565906	WITHOUT_CLASSIFICATION	4.0333434094129134E-5	DESIGN
some messy complex stuff here since createcriteria() can take an aliased path or a path rooted at the creating criteria instance	DESIGN	0.9999988980727685	WITHOUT_CLASSIFICATION	1.1019272314281315E-6	DESIGN
todo really bad evil hack to fix!!!	DESIGN	0.9999999387104243	DESIGN	6.12895757918426E-8	WITHOUT_CLASSIFICATION
ugly hack for cases like "elements(foo.bar.collection)" (multi-part path expression ending in elements or indices)	DESIGN	0.9906027080495017	DESIGN	0.00939729195049832	WITHOUT_CLASSIFICATION
try block is a hack around fact that currently tuplizers are not given the opportunity to resolve a subclass entity name. this allows the (we assume custom) interceptor the ability to influence this decision if we were not able to based on the given entityname	DESIGN	0.999999243690124	DESIGN	7.563098759748974E-7	WITHOUT_CLASSIFICATION
/ hack alert !!!!!!!!!!!!!!!!!!!!!!!!!!!! attempt to work around "ghost" impliedfromelements that occasionally show up between the actual things being joined. this consistently occurs from index nodes (at least against many-to-many). not sure if there are other conditions essentially look-ahead to the next fromelement that actually writes something to the sql	DESIGN	0.810230116691517	DESIGN	0.18976988330848302	WITHOUT_CLASSIFICATION
init the table here instead of earlier so that we can get a quoted table name todo would it be better to simply pass the qualified table name instead of splitting it up into schema/catalog/table names	DESIGN	0.9470167155924503	DESIGN	0.05298328440754963	WITHOUT_CLASSIFICATION
todo would be great to have a mapping#hasnonidentifierpropertynamedid method i don't believe that mapping#getreferencedpropertytype accounts for the identifier property so if it returns for a property named 'id' then we should have a non-id field named id	DESIGN	0.9991558090182237	DESIGN	8.441909817763232E-4	WITHOUT_CLASSIFICATION
todo is this really necessary????	DESIGN	0.9616498129043263	DESIGN	0.03835018709567367	WITHOUT_CLASSIFICATION
todo ideally we need the construction of propertyaccessor to take the following 1) entitymode 2) entitymode-specific data (i.e. the classname for pojo entities) 3) property-specific data based on the entitymode (i.e. property-name or dom4j-node-name) the easiest way with the introduction of the new runtime-metamodel classes would be the the following predicates 1) propertyaccessorfactory.getpropertyaccessor() takes references to both a org.hibernate.metadata.entitymodemetadata and org.hibernate.metadata.property 2) what is now termed a "propertyaccessor" stores any values needed from those two pieces of information 3) code can then simply call propertyaccess.getgetter() with no parameters likewise with propertyaccessor.getsetter()	DESIGN	0.8414271657042289	DESIGN	0.15857283429577113	WITHOUT_CLASSIFICATION
todo this is temporary in that the end result will probably not take a property reference per-se.	DESIGN	0.9992534885223237	DESIGN	7.465114776763851E-4	WITHOUT_CLASSIFICATION
todo this eventually needs to be removed	DESIGN	0.9603733449163729	DESIGN	0.03962665508362709	WITHOUT_CLASSIFICATION
todo make this a bit nicer	DESIGN	0.9894060464464561	DESIGN	0.010593953553543983	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9967440454700076	DESIGN	0.003255954529992424	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9967440454700076	DESIGN	0.003255954529992424	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9967440454700076	DESIGN	0.003255954529992424	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9967440454700076	DESIGN	0.003255954529992424	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9967440454700076	DESIGN	0.003255954529992424	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9967440454700076	DESIGN	0.003255954529992424	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9967440454700076	DESIGN	0.003255954529992424	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9967440454700076	DESIGN	0.003255954529992424	WITHOUT_CLASSIFICATION
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9999999124622398	DESIGN	8.753776011269523E-8	WITHOUT_CLASSIFICATION
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9999999124622398	DESIGN	8.753776011269523E-8	WITHOUT_CLASSIFICATION
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9999999124622398	DESIGN	8.753776011269523E-8	WITHOUT_CLASSIFICATION
todo probably better to calculate these and pass them in as it'll be more performant	DESIGN	0.9926331806096444	DESIGN	0.00736681939035552	WITHOUT_CLASSIFICATION
