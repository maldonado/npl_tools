test out the optimizer	WITHOUT_CLASSIFICATION	0.9999858576348042	WITHOUT_CLASSIFICATION	1.4142365195828344E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997747026556831	WITHOUT_CLASSIFICATION	2.2529734431684588E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997747026556831	WITHOUT_CLASSIFICATION	2.2529734431684588E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997747026556831	WITHOUT_CLASSIFICATION	2.2529734431684588E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997747026556831	WITHOUT_CLASSIFICATION	2.2529734431684588E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997747026556831	WITHOUT_CLASSIFICATION	2.2529734431684588E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997747026556831	WITHOUT_CLASSIFICATION	2.2529734431684588E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997747026556831	WITHOUT_CLASSIFICATION	2.2529734431684588E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.999710326523647	WITHOUT_CLASSIFICATION	2.8967347635302766E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.999710326523647	WITHOUT_CLASSIFICATION	2.8967347635302766E-4	DESIGN
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9997806838745505	WITHOUT_CLASSIFICATION	2.193161254494652E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9996356951231448	WITHOUT_CLASSIFICATION	3.643048768552535E-4	DESIGN
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999316949165727	WITHOUT_CLASSIFICATION	6.830508342728563E-5	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999816781399035	WITHOUT_CLASSIFICATION	1.832186009655945E-5	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999816781399035	WITHOUT_CLASSIFICATION	1.832186009655945E-5	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999997246644107	WITHOUT_CLASSIFICATION	2.75335589292459E-7	DESIGN
invokeinterface invoke enabled.getinterceptfieldcallback()	WITHOUT_CLASSIFICATION	0.9998916557272278	WITHOUT_CLASSIFICATION	1.0834427277214319E-4	DESIGN
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9998767141022666	WITHOUT_CLASSIFICATION	1.232858977333314E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9994321532477958	WITHOUT_CLASSIFICATION	5.678467522042193E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999943905307621	WITHOUT_CLASSIFICATION	5.609469237937018E-6	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999943905307621	WITHOUT_CLASSIFICATION	5.609469237937018E-6	DESIGN
long	WITHOUT_CLASSIFICATION	0.9998329712398283	WITHOUT_CLASSIFICATION	1.6702876017175315E-4	DESIGN
just decrement the lock don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999633857057653	WITHOUT_CLASSIFICATION	3.6614294234770194E-5	DESIGN
decode row selection	WITHOUT_CLASSIFICATION	0.9999404829864277	WITHOUT_CLASSIFICATION	5.9517013572354496E-5	DESIGN
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9996384177192575	WITHOUT_CLASSIFICATION	3.615822807424557E-4	DESIGN
again ccs did not have such a concept but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not jta aware.	WITHOUT_CLASSIFICATION	0.9999278339147348	WITHOUT_CLASSIFICATION	7.216608526514584E-5	DESIGN
check	WITHOUT_CLASSIFICATION	0.999573304600411	WITHOUT_CLASSIFICATION	4.2669539958904555E-4	DESIGN
row id	WITHOUT_CLASSIFICATION	0.9998499715269233	WITHOUT_CLASSIFICATION	1.5002847307661013E-4	DESIGN
composite-id	WITHOUT_CLASSIFICATION	0.9996356951231448	WITHOUT_CLASSIFICATION	3.643048768552535E-4	DESIGN
discriminator	WITHOUT_CLASSIFICATION	0.99963595098556	WITHOUT_CLASSIFICATION	3.640490144399524E-4	DESIGN
property prop = new property() prop.setname("id") prop.setpropertyaccessorname("embedded") prop.setvalue(id) entity.setidentifierproperty(prop)	WITHOUT_CLASSIFICATION	0.9998497303885864	WITHOUT_CLASSIFICATION	1.5026961141365887E-4	DESIGN
dynamic insert	WITHOUT_CLASSIFICATION	0.9998971751815469	WITHOUT_CLASSIFICATION	1.0282481845317146E-4	DESIGN
persister	WITHOUT_CLASSIFICATION	0.999370314912928	WITHOUT_CLASSIFICATION	6.296850870719542E-4	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9990987737644973	WITHOUT_CLASSIFICATION	9.012262355027709E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.999908675660686	WITHOUT_CLASSIFICATION	9.132433931406237E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.999908675660686	WITHOUT_CLASSIFICATION	9.132433931406237E-5	DESIGN
generated properties can never be insertable	WITHOUT_CLASSIFICATION	0.9988751955793286	WITHOUT_CLASSIFICATION	0.0011248044206713546	DESIGN
table	WITHOUT_CLASSIFICATION	0.9999151083816523	WITHOUT_CLASSIFICATION	8.489161834767933E-5	DESIGN
by default natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999001666408454	WITHOUT_CLASSIFICATION	9.983335915458207E-5	DESIGN
( (column) ( (simplevalue) ic.getindex() ).getcolumniterator().next() ).setnullable(false)	WITHOUT_CLASSIFICATION	0.9985324829399607	WITHOUT_CLASSIFICATION	0.0014675170600392492	DESIGN
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.8988582827211701	WITHOUT_CLASSIFICATION	0.10114171727882998	DESIGN
build a resultsetmappingdefinition given a containing element for the "return-xxx" elements @param resultsetelem the element containing the return definitions. @param path no clue @param mappings the current processing state. @return the description of the mappings	WITHOUT_CLASSIFICATION	0.9998978316665055	WITHOUT_CLASSIFICATION	1.0216833349454078E-4	DESIGN
private boolean showsql private boolean formatsql	WITHOUT_CLASSIFICATION	0.9992331218926243	WITHOUT_CLASSIFICATION	7.668781073758252E-4	DESIGN
public boolean isshowsqlenabled() { return showsql } public boolean isformatsqlenabled() { return formatsql }	WITHOUT_CLASSIFICATION	0.9984888017773357	WITHOUT_CLASSIFICATION	0.0015111982226644056	DESIGN
set a custom entity resolver. this entity resolver must be set before addxxx(misc) call. default value is {@link org.hibernate.util.dtdentityresolver} @param entityresolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9996246019498748	WITHOUT_CLASSIFICATION	3.753980501252572E-4	DESIGN
final list extendsqueue	WITHOUT_CLASSIFICATION	0.9999288870551685	WITHOUT_CLASSIFICATION	7.111294483154627E-5	DESIGN
if close() is called guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999190914198496	WITHOUT_CLASSIFICATION	8.090858015039676E-5	DESIGN
if a threadlocalsessioncontext-bound session happens to get serialized to be completely correct we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9954651374381358	WITHOUT_CLASSIFICATION	0.004534862561864129	DESIGN
on the inverse it makes sense that if a threadlocalsessioncontext- bound session then gets deserialized to go ahead and re-bind it to the threadlocalsessioncontext session map.	WITHOUT_CLASSIFICATION	0.9874905501339598	WITHOUT_CLASSIFICATION	0.012509449866040304	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9996447841908213	WITHOUT_CLASSIFICATION	3.5521580917874455E-4	DESIGN
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9998140657452095	WITHOUT_CLASSIFICATION	1.8593425479044055E-4	DESIGN
optimisticcache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998322418794735	WITHOUT_CLASSIFICATION	1.6775812052643053E-4	DESIGN
cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996626672004709	WITHOUT_CLASSIFICATION	3.373327995290558E-4	DESIGN
option.setdataversion( nonlockingdataversion.instance )	WITHOUT_CLASSIFICATION	0.9981620324198082	WITHOUT_CLASSIFICATION	0.0018379675801917853	DESIGN
do the put outside the scope of the jta txn	WITHOUT_CLASSIFICATION	0.9997119264354732	WITHOUT_CLASSIFICATION	2.88073564526778E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9997699770785218	WITHOUT_CLASSIFICATION	2.300229214783216E-4	DESIGN
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (npes)	WITHOUT_CLASSIFICATION	0.9580462461520787	WITHOUT_CLASSIFICATION	0.04195375384792134	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.999810131796263	WITHOUT_CLASSIFICATION	1.8986820373699997E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9997699770785218	WITHOUT_CLASSIFICATION	2.300229214783216E-4	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.999810131796263	WITHOUT_CLASSIFICATION	1.8986820373699997E-4	DESIGN
do the failfast put outside the scope of the jta txn	WITHOUT_CLASSIFICATION	0.9997119264354732	WITHOUT_CLASSIFICATION	2.88073564526778E-4	DESIGN
note evict() operates locally only (i.e. does not propogate to any other nodes in the potential cluster). this is exactly what is needed when we destroy() here destroy() is used as part of the process of shutting down a sessionfactory thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999929862132076	DESIGN	7.0137867923880665E-6	WITHOUT_CLASSIFICATION
protected regionrootlistener listener	WITHOUT_CLASSIFICATION	0.9995456177990683	WITHOUT_CLASSIFICATION	4.543822009317225E-4	DESIGN
establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9997406054796414	WITHOUT_CLASSIFICATION	2.5939452035852637E-4	DESIGN
if we've been blocking for the mutex perhaps another thread has already reestablished the root. in case the node was reestablised via replication confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.999114634841541	WITHOUT_CLASSIFICATION	8.853651584591806E-4	DESIGN
for pessimistic locking we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.999982056000495	WITHOUT_CLASSIFICATION	1.7943999505044313E-5	DESIGN
the rest only matters for optimistic locking where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9993562136760012	WITHOUT_CLASSIFICATION	6.437863239988397E-4	DESIGN
don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9897183344745428	WITHOUT_CLASSIFICATION	0.01028166552545721	DESIGN
make sure the root node for the region exists and has a dataversion that never complains	WITHOUT_CLASSIFICATION	0.999989317311581	WITHOUT_CLASSIFICATION	1.0682688418980767E-5	DESIGN
never evict this node	WITHOUT_CLASSIFICATION	0.9984955389069466	WITHOUT_CLASSIFICATION	0.001504461093053267	DESIGN
fix up the resident flag	WITHOUT_CLASSIFICATION	0.9654180134407093	WITHOUT_CLASSIFICATION	0.03458198655929072	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.999810131796263	WITHOUT_CLASSIFICATION	1.8986820373699997E-4	DESIGN
we ignore minimalputoverride. jbosscache putforexternalread is already about as minimal as we can get it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999973042177979	WITHOUT_CLASSIFICATION	2.6957822021738354E-6	DESIGN
no-op. we don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9924090479630064	WITHOUT_CLASSIFICATION	0.007590952036993564	DESIGN
this should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9656964884564012	WITHOUT_CLASSIFICATION	0.03430351154359877	DESIGN
we only build caches if none were passed in. passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.999571207747388	WITHOUT_CLASSIFICATION	4.287922526120432E-4	DESIGN
set up the cache factory	WITHOUT_CLASSIFICATION	0.9981345017699004	WITHOUT_CLASSIFICATION	0.0018654982300997402	DESIGN
see if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999931813568491	WITHOUT_CLASSIFICATION	6.818643150786213E-6	DESIGN
default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999359859414931	WITHOUT_CLASSIFICATION	6.401405850689978E-5	DESIGN
default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999567853960338	WITHOUT_CLASSIFICATION	4.3214603966172725E-5	DESIGN
for timestamps we default to a separate config	WITHOUT_CLASSIFICATION	0.9992220468952727	WITHOUT_CLASSIFICATION	7.779531047273108E-4	DESIGN
we can't change the tm on a running cache just check if the cache has no tm and we're ok with that	WITHOUT_CLASSIFICATION	0.9998205288946276	WITHOUT_CLASSIFICATION	1.7947110537239462E-4	DESIGN
configure the cache to use our tm	WITHOUT_CLASSIFICATION	0.9994030067607257	WITHOUT_CLASSIFICATION	5.969932392743835E-4	DESIGN
make sure jbc doesn't look one up	WITHOUT_CLASSIFICATION	0.9998085518519428	WITHOUT_CLASSIFICATION	1.9144814805713224E-4	DESIGN
this method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.5127021471133609	WITHOUT_CLASSIFICATION	0.48729785288663907	DESIGN
make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9981469944083293	WITHOUT_CLASSIFICATION	0.001853005591670683	DESIGN
we use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9994358506024713	WITHOUT_CLASSIFICATION	5.641493975286145E-4	DESIGN
following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9345044518710726	WITHOUT_CLASSIFICATION	0.0654955481289275	DESIGN
if jbc is using invalidation we don't want to propagate changes. we use the timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9992745210634143	WITHOUT_CLASSIFICATION	7.254789365857137E-4	DESIGN
we don't want to waste effort setting an option if jbc is already in local mode. if jbc is repl_(a)sync then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999398482464672	WITHOUT_CLASSIFICATION	6.015175353277504E-5	DESIGN
don't hold the jbc node lock throughout the tx as that prevents updates add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999964804476	WITHOUT_CLASSIFICATION	3.519552570061439E-9	DESIGN
double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999778497919432	WITHOUT_CLASSIFICATION	2.2150208056870536E-5	DESIGN
get an exclusive right to update jbc for this key from this node.	WITHOUT_CLASSIFICATION	0.9988706854581437	WITHOUT_CLASSIFICATION	0.001129314541856339	DESIGN
we ensure async semantics (jbcache-1175)	WITHOUT_CLASSIFICATION	0.998831582738123	WITHOUT_CLASSIFICATION	0.0011684172618769773	DESIGN
initial load from jbc	WITHOUT_CLASSIFICATION	0.9993334229904347	WITHOUT_CLASSIFICATION	6.665770095652285E-4	DESIGN
see if we had a 2nd invalidation from the same initial preinvalidation timestamp. if so only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999998142269838	WITHOUT_CLASSIFICATION	1.85773016151833E-7	DESIGN
we ensure async semantics (jbcache-1175)	WITHOUT_CLASSIFICATION	0.998831582738123	WITHOUT_CLASSIFICATION	0.0011684172618769773	DESIGN
if the workspace node has null as well ok if not we've been modified in a non-comparable manner which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999986078465837	WITHOUT_CLASSIFICATION	1.3921534163219218E-6	DESIGN
the standard comparator types are not serializable but are singletons	WITHOUT_CLASSIFICATION	0.999336789260985	WITHOUT_CLASSIFICATION	6.632107390150063E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9997699770785218	WITHOUT_CLASSIFICATION	2.300229214783216E-4	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9999722213505767	WITHOUT_CLASSIFICATION	2.7778649423150443E-5	DESIGN
construct the cache	WITHOUT_CLASSIFICATION	0.9998027288450864	WITHOUT_CLASSIFICATION	1.9727115491366488E-4	DESIGN
local cache so we use synchronization	WITHOUT_CLASSIFICATION	0.9960941190986442	WITHOUT_CLASSIFICATION	0.0039058809013556776	DESIGN
local cache so we use synchronization	WITHOUT_CLASSIFICATION	0.9960941190986442	WITHOUT_CLASSIFICATION	0.0039058809013556776	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9996992841670489	WITHOUT_CLASSIFICATION	3.0071583295116156E-4	DESIGN
swaldman 2006-08-28 define c3p0-style configuration parameters for initialpoolsize which hibernate sensibly lets default to minpoolsize but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999927744562793	WITHOUT_CLASSIFICATION	7.225543720611714E-6	DESIGN
datasource unpooled = datasources.unpooleddatasource(jdbcurl props.getproperty(environment.user) props.getproperty(environment.pass))	WITHOUT_CLASSIFICATION	0.9999115854486872	WITHOUT_CLASSIFICATION	8.841455131288158E-5	DESIGN
true if the pool is borrowed from the outside false if we used to create it	WITHOUT_CLASSIFICATION	0.9303352519024253	WITHOUT_CLASSIFICATION	0.06966474809757468	DESIGN
get a connection from the pool (thru drivermanager cfr. proxool doc)	WITHOUT_CLASSIFICATION	0.9989107003112518	WITHOUT_CLASSIFICATION	0.0010892996887481125	DESIGN
set the transaction isolation if defined	WITHOUT_CLASSIFICATION	0.9998562835378748	WITHOUT_CLASSIFICATION	1.4371646212511596E-4	DESIGN
toggle autocommit to false if set	WITHOUT_CLASSIFICATION	0.9998993003110844	WITHOUT_CLASSIFICATION	1.0069968891560187E-4	DESIGN
return the connection	WITHOUT_CLASSIFICATION	0.9978310831432644	WITHOUT_CLASSIFICATION	0.0021689168567354993	DESIGN
get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999873141101416	WITHOUT_CLASSIFICATION	1.26858898584603E-5	DESIGN
default the proxool alias setting	WITHOUT_CLASSIFICATION	0.9999985382667874	WITHOUT_CLASSIFICATION	1.461733212516115E-6	DESIGN
validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999960234329703	WITHOUT_CLASSIFICATION	3.976567029720406E-6	DESIGN
validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999960234329703	WITHOUT_CLASSIFICATION	3.976567029720406E-6	DESIGN
append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999843733589199	WITHOUT_CLASSIFICATION	1.5626641080206186E-5	DESIGN
set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9996882075944371	WITHOUT_CLASSIFICATION	3.117924055629037E-4	DESIGN
configured using the jaxp configurator	WITHOUT_CLASSIFICATION	0.9999355405272541	WITHOUT_CLASSIFICATION	6.445947274591555E-5	DESIGN
validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999960234329703	WITHOUT_CLASSIFICATION	3.976567029720406E-6	DESIGN
append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999843733589199	WITHOUT_CLASSIFICATION	1.5626641080206186E-5	DESIGN
append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999843733589199	WITHOUT_CLASSIFICATION	1.5626641080206186E-5	DESIGN
configured using the properties file configurator	WITHOUT_CLASSIFICATION	0.9999871718773622	WITHOUT_CLASSIFICATION	1.2828122637758335E-5	DESIGN
remember isolation level	WITHOUT_CLASSIFICATION	0.9688913866804023	WITHOUT_CLASSIFICATION	0.03110861331959766	DESIGN
if the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999998933073989	WITHOUT_CLASSIFICATION	1.0669260113756414E-7	DESIGN
we have created the pool ourselves so shut it down	WITHOUT_CLASSIFICATION	0.9999625891855534	WITHOUT_CLASSIFICATION	3.741081444660145E-5	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9689161437872368	WITHOUT_CLASSIFICATION	0.03108385621276329	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9689161437872368	WITHOUT_CLASSIFICATION	0.03108385621276329	DESIGN
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999502748752955	WITHOUT_CLASSIFICATION	4.972512470457757E-5	DESIGN
public currency getcurrency(int col) throws hibernateexception	WITHOUT_CLASSIFICATION	0.9984181522629153	WITHOUT_CLASSIFICATION	0.0015818477370846116	DESIGN
default is pojo	WITHOUT_CLASSIFICATION	0.9998589236306218	WITHOUT_CLASSIFICATION	1.4107636937816983E-4	DESIGN
use setparameter for null values	WITHOUT_CLASSIFICATION	0.9995229318095165	WITHOUT_CLASSIFICATION	4.770681904835685E-4	DESIGN
use setparameter for null values	WITHOUT_CLASSIFICATION	0.9995229318095165	WITHOUT_CLASSIFICATION	4.770681904835685E-4	DESIGN
private cacheentry cacheentry	WITHOUT_CLASSIFICATION	0.9937148133749036	WITHOUT_CLASSIFICATION	0.0062851866250963695	DESIGN
don't need to lock the cache here since if someone else inserted the same pk first the insert would fail	WITHOUT_CLASSIFICATION	0.9999993744558404	WITHOUT_CLASSIFICATION	6.255441596390504E-7	DESIGN
make 100% certain that this is called before any subsequent scheduledupdate.aftertransactioncompletion()!!	WITHOUT_CLASSIFICATION	0.9975106323189585	WITHOUT_CLASSIFICATION	0.002489367681041423	DESIGN
get the updated snapshot of the entity state by cloning current state it is safe to copy in place since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.999998799881832	WITHOUT_CLASSIFICATION	1.2001181679854831E-6	DESIGN
this entity defines proeprty generation so process those generated values	WITHOUT_CLASSIFICATION	0.9991342298907928	WITHOUT_CLASSIFICATION	8.657701092071579E-4	DESIGN
have the entity entry perform post-update processing passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9998536332154491	WITHOUT_CLASSIFICATION	1.4636678455105004E-4	DESIGN
!persister.iscacheinvalidationrequired()	WITHOUT_CLASSIFICATION	0.9995689692001622	WITHOUT_CLASSIFICATION	4.310307998376784E-4	DESIGN
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9997023553188573	WITHOUT_CLASSIFICATION	2.976446811426294E-4	DESIGN
sort first by role name	WITHOUT_CLASSIFICATION	0.9989840244578228	WITHOUT_CLASSIFICATION	0.0010159755421771828	DESIGN
make 100% certain that this is called before any subsequent scheduledupdate.aftertransactioncompletion()!!	WITHOUT_CLASSIFICATION	0.9975106323189585	WITHOUT_CLASSIFICATION	0.002489367681041423	DESIGN
then by fk	WITHOUT_CLASSIFICATION	0.9984434469163048	WITHOUT_CLASSIFICATION	0.0015565530836951587	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9996819260184943	WITHOUT_CLASSIFICATION	3.180739815057325E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9996819260184943	WITHOUT_CLASSIFICATION	3.180739815057325E-4	DESIGN
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9993994575901194	WITHOUT_CLASSIFICATION	6.005424098806555E-4	DESIGN
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9978427662723554	WITHOUT_CLASSIFICATION	0.0021572337276447124	DESIGN
boolean put = persister.getcache().insert(ck cacheentry)	WITHOUT_CLASSIFICATION	0.9999577930476428	WITHOUT_CLASSIFICATION	4.2206952357133525E-5	DESIGN
we need to grab the version value from the entity otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.8978373407170648	WITHOUT_CLASSIFICATION	0.10216265928293518	DESIGN
do nothing - we only need to notify the cache	WITHOUT_CLASSIFICATION	0.9938259890977712	WITHOUT_CLASSIFICATION	0.006174010902228767	DESIGN
sort first by entity name	WITHOUT_CLASSIFICATION	0.9990991515572181	WITHOUT_CLASSIFICATION	9.008484427818953E-4	DESIGN
then by id	WITHOUT_CLASSIFICATION	0.9998018476852861	WITHOUT_CLASSIFICATION	1.9815231471376923E-4	DESIGN
to be safe	WITHOUT_CLASSIFICATION	0.9998201224506533	WITHOUT_CLASSIFICATION	1.7987754934678497E-4	DESIGN
no transformations took place so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9998699596751803	WITHOUT_CLASSIFICATION	1.3004032481977367E-4	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999730894910911	WITHOUT_CLASSIFICATION	2.6910508908891497E-5	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999730894910911	WITHOUT_CLASSIFICATION	2.6910508908891497E-5	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9996912100243233	WITHOUT_CLASSIFICATION	3.087899756766436E-4	DESIGN
test out the optimizer	WITHOUT_CLASSIFICATION	0.9999858576348042	WITHOUT_CLASSIFICATION	1.4142365195828344E-5	DESIGN
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9988714198866397	WITHOUT_CLASSIFICATION	0.0011285801133603067	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997747026556831	WITHOUT_CLASSIFICATION	2.2529734431684588E-4	DESIGN
invokespecial	WITHOUT_CLASSIFICATION	0.9996356951231448	WITHOUT_CLASSIFICATION	3.643048768552535E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.999710326523647	WITHOUT_CLASSIFICATION	2.8967347635302766E-4	DESIGN
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9994764855682154	WITHOUT_CLASSIFICATION	5.23514431784541E-4	DESIGN
checkcast cast bean	WITHOUT_CLASSIFICATION	0.995688665256598	WITHOUT_CLASSIFICATION	0.004311334743401865	DESIGN
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999081631843172	WITHOUT_CLASSIFICATION	9.183681568276835E-5	DESIGN
aload_2 args	WITHOUT_CLASSIFICATION	0.9994266010391495	WITHOUT_CLASSIFICATION	5.733989608505378E-4	DESIGN
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999517338676236	WITHOUT_CLASSIFICATION	4.8266132376366625E-5	DESIGN
new	WITHOUT_CLASSIFICATION	0.9998022843715624	WITHOUT_CLASSIFICATION	1.9771562843753785E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9998594656009449	WITHOUT_CLASSIFICATION	1.4053439905520402E-4	DESIGN
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9997383108693081	WITHOUT_CLASSIFICATION	2.616891306919014E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9996356951231448	WITHOUT_CLASSIFICATION	3.643048768552535E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9996356951231448	WITHOUT_CLASSIFICATION	3.643048768552535E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9996356951231448	WITHOUT_CLASSIFICATION	3.643048768552535E-4	DESIGN
aastore args	WITHOUT_CLASSIFICATION	0.9994145783594436	WITHOUT_CLASSIFICATION	5.854216405563555E-4	DESIGN
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9972821714547736	WITHOUT_CLASSIFICATION	0.002717828545226385	DESIGN
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9977631847476283	WITHOUT_CLASSIFICATION	0.0022368152523716987	DESIGN
istore_3 store i	WITHOUT_CLASSIFICATION	0.9994522233316578	WITHOUT_CLASSIFICATION	5.477766683421295E-4	DESIGN
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9992725334212301	WITHOUT_CLASSIFICATION	7.274665787699257E-4	DESIGN
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9926787806587045	WITHOUT_CLASSIFICATION	0.007321219341295397	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999816781399035	WITHOUT_CLASSIFICATION	1.832186009655945E-5	DESIGN
start region to handling exception (bulkaccessorexception)	WITHOUT_CLASSIFICATION	0.998403807719273	WITHOUT_CLASSIFICATION	0.0015961922807270696	DESIGN
iinc 3 1	WITHOUT_CLASSIFICATION	0.9998311800583515	WITHOUT_CLASSIFICATION	1.688199416484978E-4	DESIGN
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9996105847882124	WITHOUT_CLASSIFICATION	3.8941521178764433E-4	DESIGN
aload_2 load the args	WITHOUT_CLASSIFICATION	0.999303849807925	WITHOUT_CLASSIFICATION	6.961501920750847E-4	DESIGN
iconst_i	WITHOUT_CLASSIFICATION	0.9997699770785218	WITHOUT_CLASSIFICATION	2.300229214783216E-4	DESIGN
aaload	WITHOUT_CLASSIFICATION	0.9997699770785218	WITHOUT_CLASSIFICATION	2.300229214783216E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.999770059407185	WITHOUT_CLASSIFICATION	2.2994059281501736E-4	DESIGN
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9996474560593548	WITHOUT_CLASSIFICATION	3.525439406452419E-4	DESIGN
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.999710698574056	WITHOUT_CLASSIFICATION	2.893014259439641E-4	DESIGN
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999866644847182	WITHOUT_CLASSIFICATION	1.3335515281702693E-5	DESIGN
end region to handling exception (bulkaccessorexception)	WITHOUT_CLASSIFICATION	0.9982023387692431	WITHOUT_CLASSIFICATION	0.0017976612307568066	DESIGN
register in exception table	WITHOUT_CLASSIFICATION	0.9994050981704851	WITHOUT_CLASSIFICATION	5.949018295148241E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997747026556831	WITHOUT_CLASSIFICATION	2.2529734431684588E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997747026556831	WITHOUT_CLASSIFICATION	2.2529734431684588E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.999710326523647	WITHOUT_CLASSIFICATION	2.8967347635302766E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.999710326523647	WITHOUT_CLASSIFICATION	2.8967347635302766E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9998594656009449	WITHOUT_CLASSIFICATION	1.4053439905520402E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9996356951231448	WITHOUT_CLASSIFICATION	3.643048768552535E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.999770059407185	WITHOUT_CLASSIFICATION	2.2994059281501736E-4	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999997246644107	WITHOUT_CLASSIFICATION	2.75335589292459E-7	DESIGN
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999247482659539	WITHOUT_CLASSIFICATION	7.525173404616718E-5	DESIGN
new bulkaccessorexception	WITHOUT_CLASSIFICATION	0.9992253615896478	WITHOUT_CLASSIFICATION	7.746384103520894E-4	DESIGN
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9995709951374051	WITHOUT_CLASSIFICATION	4.2900486259488135E-4	DESIGN
iload_3 i	WITHOUT_CLASSIFICATION	0.9977463708773165	WITHOUT_CLASSIFICATION	0.0022536291226833848	DESIGN
invokespecial bulkaccessorexception.<init>	WITHOUT_CLASSIFICATION	0.9995689692001622	WITHOUT_CLASSIFICATION	4.310307998376784E-4	DESIGN
athrow	WITHOUT_CLASSIFICATION	0.9997700650846022	WITHOUT_CLASSIFICATION	2.2993491539779958E-4	DESIGN
warning classfile only	WITHOUT_CLASSIFICATION	0.9999335100621127	WITHOUT_CLASSIFICATION	6.648993788722458E-5	DESIGN
swallow	WITHOUT_CLASSIFICATION	0.9997893816299197	WITHOUT_CLASSIFICATION	2.1061837008036762E-4	DESIGN
local variable | this |	WITHOUT_CLASSIFICATION	0.9989351812726599	WITHOUT_CLASSIFICATION	0.0010648187273401169	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9977850415676557	WITHOUT_CLASSIFICATION	0.002214958432344317	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9977850415676557	WITHOUT_CLASSIFICATION	0.002214958432344317	DESIGN
getfield get field "$javassist_callback" defined already	WITHOUT_CLASSIFICATION	0.9986865825497744	WITHOUT_CLASSIFICATION	0.0013134174502256242	DESIGN
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9998193673842077	WITHOUT_CLASSIFICATION	1.8063261579231939E-4	DESIGN
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9997629147790079	WITHOUT_CLASSIFICATION	2.3708522099204007E-4	DESIGN
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9988416020842878	WITHOUT_CLASSIFICATION	0.0011583979157120887	DESIGN
putfield put field "$javassist_callback" defined already	WITHOUT_CLASSIFICATION	0.998409087404436	WITHOUT_CLASSIFICATION	0.0015909125955640305	DESIGN
case of non-static field	WITHOUT_CLASSIFICATION	0.9988149841588948	WITHOUT_CLASSIFICATION	0.0011850158411051686	DESIGN
getfield get each field	WITHOUT_CLASSIFICATION	0.9995455623931782	WITHOUT_CLASSIFICATION	4.544376068219328E-4	DESIGN
invokeinterface invoke enabled.getinterceptfieldcallback()	WITHOUT_CLASSIFICATION	0.9998916557272278	WITHOUT_CLASSIFICATION	1.0834427277214319E-4	DESIGN
ifnonnull	WITHOUT_CLASSIFICATION	0.9998241474592321	WITHOUT_CLASSIFICATION	1.758525407679262E-4	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9996221963918337	WITHOUT_CLASSIFICATION	3.778036081663627E-4	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9996221963918337	WITHOUT_CLASSIFICATION	3.778036081663627E-4	DESIGN
store_1 each type	WITHOUT_CLASSIFICATION	0.9996999895592622	WITHOUT_CLASSIFICATION	3.000104407378509E-4	DESIGN
ldc name of the field	WITHOUT_CLASSIFICATION	0.9989417990377936	WITHOUT_CLASSIFICATION	0.001058200962206482	DESIGN
load_1 each type	WITHOUT_CLASSIFICATION	0.9996999895592622	WITHOUT_CLASSIFICATION	3.000104407378509E-4	DESIGN
invokeinterface invoke callback.read() each type	WITHOUT_CLASSIFICATION	0.9999107809247381	WITHOUT_CLASSIFICATION	8.921907526186616E-5	DESIGN
int	WITHOUT_CLASSIFICATION	0.9998871140211244	WITHOUT_CLASSIFICATION	1.1288597887564799E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.999710326523647	WITHOUT_CLASSIFICATION	2.8967347635302766E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9998594656009449	WITHOUT_CLASSIFICATION	1.4053439905520402E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9996356951231448	WITHOUT_CLASSIFICATION	3.643048768552535E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.999770059407185	WITHOUT_CLASSIFICATION	2.2994059281501736E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.999770059407185	WITHOUT_CLASSIFICATION	2.2994059281501736E-4	DESIGN
invokeinterface enabled.getinterceptfieldcallback()	WITHOUT_CLASSIFICATION	0.9995689692001622	WITHOUT_CLASSIFICATION	4.310307998376784E-4	DESIGN
invokeinterface enabled.getinterceptfieldcallback()	WITHOUT_CLASSIFICATION	0.9995689692001622	WITHOUT_CLASSIFICATION	4.310307998376784E-4	DESIGN
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9997214800844779	WITHOUT_CLASSIFICATION	2.7851991552207825E-4	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9997699770785218	WITHOUT_CLASSIFICATION	2.300229214783216E-4	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9997699770785218	WITHOUT_CLASSIFICATION	2.300229214783216E-4	DESIGN
putfield	WITHOUT_CLASSIFICATION	0.9997699770785218	WITHOUT_CLASSIFICATION	2.300229214783216E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.999710326523647	WITHOUT_CLASSIFICATION	2.8967347635302766E-4	DESIGN
ldc field name	WITHOUT_CLASSIFICATION	0.9991557991441236	WITHOUT_CLASSIFICATION	8.442008558764583E-4	DESIGN
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999648268422712	WITHOUT_CLASSIFICATION	3.517315772875779E-5	DESIGN
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9995689692001622	WITHOUT_CLASSIFICATION	4.310307998376784E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9994321532477958	WITHOUT_CLASSIFICATION	5.678467522042193E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9994321532477958	WITHOUT_CLASSIFICATION	5.678467522042193E-4	DESIGN
not array	WITHOUT_CLASSIFICATION	0.9990708715786137	WITHOUT_CLASSIFICATION	9.291284213861578E-4	DESIGN
array of reference type	WITHOUT_CLASSIFICATION	0.9988830302330961	WITHOUT_CLASSIFICATION	0.0011169697669038505	DESIGN
boolean	WITHOUT_CLASSIFICATION	0.9998942778262387	WITHOUT_CLASSIFICATION	1.0572217376133154E-4	DESIGN
byte	WITHOUT_CLASSIFICATION	0.9996763640484756	WITHOUT_CLASSIFICATION	3.236359515244472E-4	DESIGN
char	WITHOUT_CLASSIFICATION	0.9999195559013038	WITHOUT_CLASSIFICATION	8.044409869622494E-5	DESIGN
short	WITHOUT_CLASSIFICATION	0.9997006891862449	WITHOUT_CLASSIFICATION	2.993108137550711E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999943905307621	WITHOUT_CLASSIFICATION	5.609469237937018E-6	DESIGN
float	WITHOUT_CLASSIFICATION	0.999797775383519	WITHOUT_CLASSIFICATION	2.0222461648102902E-4	DESIGN
float	WITHOUT_CLASSIFICATION	0.999797775383519	WITHOUT_CLASSIFICATION	2.0222461648102902E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9998329712398283	WITHOUT_CLASSIFICATION	1.6702876017175315E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9998329712398283	WITHOUT_CLASSIFICATION	1.6702876017175315E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9996436840261846	WITHOUT_CLASSIFICATION	3.5631597381533485E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9996436840261846	WITHOUT_CLASSIFICATION	3.5631597381533485E-4	DESIGN
boolean byte char int short	WITHOUT_CLASSIFICATION	0.9998697889122837	WITHOUT_CLASSIFICATION	1.3021108771622426E-4	DESIGN
boolean byte char int short	WITHOUT_CLASSIFICATION	0.9998697889122837	WITHOUT_CLASSIFICATION	1.3021108771622426E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9994321532477958	WITHOUT_CLASSIFICATION	5.678467522042193E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999943905307621	WITHOUT_CLASSIFICATION	5.609469237937018E-6	DESIGN
float	WITHOUT_CLASSIFICATION	0.999797775383519	WITHOUT_CLASSIFICATION	2.0222461648102902E-4	DESIGN
float	WITHOUT_CLASSIFICATION	0.999797775383519	WITHOUT_CLASSIFICATION	2.0222461648102902E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9998329712398283	WITHOUT_CLASSIFICATION	1.6702876017175315E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9996436840261846	WITHOUT_CLASSIFICATION	3.5631597381533485E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9996436840261846	WITHOUT_CLASSIFICATION	3.5631597381533485E-4	DESIGN
boolean byte char int short	WITHOUT_CLASSIFICATION	0.9998697889122837	WITHOUT_CLASSIFICATION	1.3021108771622426E-4	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9990762239821408	WITHOUT_CLASSIFICATION	9.237760178593034E-4	DESIGN
mainly for oscache	WITHOUT_CLASSIFICATION	0.9996980689199658	WITHOUT_CLASSIFICATION	3.019310800341974E-4	DESIGN
decrement the lock	WITHOUT_CLASSIFICATION	0.9998608135024912	WITHOUT_CLASSIFICATION	1.3918649750879885E-4	DESIGN
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9998197669753266	WITHOUT_CLASSIFICATION	1.802330246732991E-4	DESIGN
recache the updated state	WITHOUT_CLASSIFICATION	0.9999573011554418	WITHOUT_CLASSIFICATION	4.269884455817202E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.999919309542945	WITHOUT_CLASSIFICATION	8.06904570551578E-5	DESIGN
null clientlock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999836313114462	WITHOUT_CLASSIFICATION	1.6368688553817017E-5	DESIGN
we really could refresh the item if it is not a lock but it might be slower return freshtimestamp < txtimestamp	WITHOUT_CLASSIFICATION	0.9514840619374281	WITHOUT_CLASSIFICATION	0.048515938062572025	DESIGN
by requiring < we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.999977281745707	WITHOUT_CLASSIFICATION	2.2718254292920032E-5	DESIGN
the user provided resulttransformer not the one used with "select new". here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9816158855785168	WITHOUT_CLASSIFICATION	0.018384114421483248	DESIGN
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999624057250088	WITHOUT_CLASSIFICATION	3.759427499127339E-5	DESIGN
disassemble named parameters	WITHOUT_CLASSIFICATION	0.999933346825683	WITHOUT_CLASSIFICATION	6.665317431704233E-5	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9996992841670489	WITHOUT_CLASSIFICATION	3.0071583295116156E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.999919309542945	WITHOUT_CLASSIFICATION	8.06904570551578E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.999919309542945	WITHOUT_CLASSIFICATION	8.06904570551578E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.999919309542945	WITHOUT_CLASSIFICATION	8.06904570551578E-5	DESIGN
this is called from settingsfactory irregardless trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9952289077396199	WITHOUT_CLASSIFICATION	0.004771092260380056	DESIGN
do nothing subclasses may override.	WITHOUT_CLASSIFICATION	0.999160790182669	WITHOUT_CLASSIFICATION	8.392098173309475E-4	DESIGN
do nothing subclasses may override.	WITHOUT_CLASSIFICATION	0.999160790182669	WITHOUT_CLASSIFICATION	8.392098173309475E-4	DESIGN
throw new unsupportedoperationexception("can't write to a readonly object")	WITHOUT_CLASSIFICATION	0.9991202986297931	WITHOUT_CLASSIFICATION	8.797013702068622E-4	DESIGN
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9996337788761872	WITHOUT_CLASSIFICATION	3.662211238128497E-4	DESIGN
persister.setidentifier(result id) before calling interceptor for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999714951524782	WITHOUT_CLASSIFICATION	2.8504847521832276E-5	DESIGN
no-op ccs did not have such a concept	WITHOUT_CLASSIFICATION	0.9976930314759197	WITHOUT_CLASSIFICATION	0.002306968524080301	DESIGN
no-op ccs did not have such a concept	WITHOUT_CLASSIFICATION	0.9976930314759197	WITHOUT_CLASSIFICATION	0.002306968524080301	DESIGN
again ccs did not have such a concept but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not jta aware.	WITHOUT_CLASSIFICATION	0.9999278339147348	WITHOUT_CLASSIFICATION	7.216608526514584E-5	DESIGN
again ccs did not have such a concept however a reasonable proximity is to clear the cache. for non-transaction aware caches we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9985791653868404	WITHOUT_CLASSIFICATION	0.001420834613159544	DESIGN
again ccs did not have such a concept however a reasonable proximity is to clear the cache. for non-transaction aware caches we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9985791653868404	WITHOUT_CLASSIFICATION	0.001420834613159544	DESIGN
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9941498676879397	WITHOUT_CLASSIFICATION	0.005850132312060281	DESIGN
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9995689238891551	WITHOUT_CLASSIFICATION	4.31076110845014E-4	DESIGN
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9990987737644973	WITHOUT_CLASSIFICATION	9.012262355027709E-4	DESIGN
db-objectname	WITHOUT_CLASSIFICATION	0.9996356951231448	WITHOUT_CLASSIFICATION	3.643048768552535E-4	DESIGN
mutable	WITHOUT_CLASSIFICATION	0.9998475000699993	WITHOUT_CLASSIFICATION	1.5249993000066296E-4	DESIGN
where	WITHOUT_CLASSIFICATION	0.9999004474908627	WITHOUT_CLASSIFICATION	9.955250913730306E-5	DESIGN
check	WITHOUT_CLASSIFICATION	0.999573304600411	WITHOUT_CLASSIFICATION	4.2669539958904555E-4	DESIGN
polymorphism	WITHOUT_CLASSIFICATION	0.9996356951231448	WITHOUT_CLASSIFICATION	3.643048768552535E-4	DESIGN
todo	WITHOUT_CLASSIFICATION	0.7142003075800946	WITHOUT_CLASSIFICATION	0.28579969241990555	DESIGN
id	WITHOUT_CLASSIFICATION	0.9996345923748658	WITHOUT_CLASSIFICATION	3.654076251341149E-4	DESIGN
version / timestamp	WITHOUT_CLASSIFICATION	0.9998721879904692	WITHOUT_CLASSIFICATION	1.2781200953080956E-4	DESIGN
discriminator	WITHOUT_CLASSIFICATION	0.99963595098556	WITHOUT_CLASSIFICATION	3.640490144399524E-4	DESIGN
primary key constraint	WITHOUT_CLASSIFICATION	0.9969290430566624	WITHOUT_CLASSIFICATION	0.003070956943337491	DESIGN
this is either a <version/> tag with no type attribute or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9998901679828378	WITHOUT_CLASSIFICATION	1.0983201716214935E-4	DESIGN
for version properties marked as being generated make sure they are "always" generated aka "insert" is invalid this is dis-allowed by the dtd but just to make sure	WITHOUT_CLASSIFICATION	0.9986196289249769	WITHOUT_CLASSIFICATION	0.0013803710750230995	DESIGN
discriminator	WITHOUT_CLASSIFICATION	0.99963595098556	WITHOUT_CLASSIFICATION	3.640490144399524E-4	DESIGN
( (column) discrim.getcolumniterator().next() ).settype(type)	WITHOUT_CLASSIFICATION	0.9985324829399607	WITHOUT_CLASSIFICATION	0.0014675170600392492	DESIGN
go ahead and set the lazy here since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999948823444186	WITHOUT_CLASSIFICATION	5.117655581421725E-6	DESIGN
dynamic update	WITHOUT_CLASSIFICATION	0.9998282787134447	WITHOUT_CLASSIFICATION	1.7172128655529233E-4	DESIGN
import	WITHOUT_CLASSIFICATION	0.9997374558211906	WITHOUT_CLASSIFICATION	2.625441788094483E-4	DESIGN
batch size	WITHOUT_CLASSIFICATION	0.9997581410843784	WITHOUT_CLASSIFICATION	2.4185891562163031E-4	DESIGN
select before update	WITHOUT_CLASSIFICATION	0.9999093245766519	WITHOUT_CLASSIFICATION	9.067542334808896E-5	DESIGN
optimistic lock mode	WITHOUT_CLASSIFICATION	0.999506477392987	WITHOUT_CLASSIFICATION	4.935226070129568E-4	DESIGN
persister	WITHOUT_CLASSIFICATION	0.999370314912928	WITHOUT_CLASSIFICATION	6.296850870719542E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999739397927501	WITHOUT_CLASSIFICATION	2.606020724999143E-5	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9990987737644973	WITHOUT_CLASSIFICATION	9.012262355027709E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.999908675660686	WITHOUT_CLASSIFICATION	9.132433931406237E-5	DESIGN
joined subclasses	WITHOUT_CLASSIFICATION	0.9998710102987677	WITHOUT_CLASSIFICATION	1.2898970123226513E-4	DESIGN
key	WITHOUT_CLASSIFICATION	0.999869421354832	WITHOUT_CLASSIFICATION	1.3057864516801627E-4	DESIGN
check	WITHOUT_CLASSIFICATION	0.999573304600411	WITHOUT_CLASSIFICATION	4.2669539958904555E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999739397927501	WITHOUT_CLASSIFICATION	2.606020724999143E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.999908675660686	WITHOUT_CLASSIFICATION	9.132433931406237E-5	DESIGN
key	WITHOUT_CLASSIFICATION	0.999869421354832	WITHOUT_CLASSIFICATION	1.3057864516801627E-4	DESIGN
model.getkey().settype( new type( model.getidentifier() ) )	WITHOUT_CLASSIFICATION	0.9984198226015588	WITHOUT_CLASSIFICATION	0.0015801773984410847	DESIGN
tablename	WITHOUT_CLASSIFICATION	0.9998221897880534	WITHOUT_CLASSIFICATION	1.778102119466192E-4	DESIGN
join.getkey().settype( new type( lazz.getidentifier() ) )	WITHOUT_CLASSIFICATION	0.9984198226015588	WITHOUT_CLASSIFICATION	0.0015801773984410847	DESIGN
properties	WITHOUT_CLASSIFICATION	0.999908675660686	WITHOUT_CLASSIFICATION	9.132433931406237E-5	DESIGN
column(s)	WITHOUT_CLASSIFICATION	0.9997750296375595	WITHOUT_CLASSIFICATION	2.2497036244038156E-4	DESIGN
column index	WITHOUT_CLASSIFICATION	0.9999730250168879	WITHOUT_CLASSIFICATION	2.6974983112110383E-5	DESIGN
column unique-key	WITHOUT_CLASSIFICATION	0.9998216562837781	WITHOUT_CLASSIFICATION	1.783437162219565E-4	DESIGN
automatically makes a column with the default name if none is specifed by xml	WITHOUT_CLASSIFICATION	0.9983082667046683	WITHOUT_CLASSIFICATION	0.0016917332953317805	DESIGN
for an any	WITHOUT_CLASSIFICATION	0.9999094742756093	WITHOUT_CLASSIFICATION	9.052572439072147E-5	DESIGN
insertable simply because that is the user did not specify anything just override it	WITHOUT_CLASSIFICATION	0.9999959695448533	WITHOUT_CLASSIFICATION	4.030455146769216E-6	DESIGN
the user specifically supplied insert="true" which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999940472443	WITHOUT_CLASSIFICATION	5.952755700025643E-6	DESIGN
properties generated on update can never be updateable	WITHOUT_CLASSIFICATION	0.9994495550171272	WITHOUT_CLASSIFICATION	5.504449828728565E-4	DESIGN
updateable only because the user did not specify anything just override it	WITHOUT_CLASSIFICATION	0.9999987087030716	WITHOUT_CLASSIFICATION	1.2912969284790392E-6	DESIGN
the user specifically supplied update="true" which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999940472443	WITHOUT_CLASSIFICATION	5.952755700025643E-6	DESIGN
rolename	WITHOUT_CLASSIFICATION	0.9997760656164725	WITHOUT_CLASSIFICATION	2.2393438352747818E-4	DESIGN
fetch strategy	WITHOUT_CLASSIFICATION	0.9990914881412664	WITHOUT_CLASSIFICATION	9.085118587336314E-4	DESIGN
table	WITHOUT_CLASSIFICATION	0.9999151083816523	WITHOUT_CLASSIFICATION	8.489161834767933E-5	DESIGN
tablename = mappings.getnamingstrategy().propertytotablename( classname path )	WITHOUT_CLASSIFICATION	0.9999352331037776	WITHOUT_CLASSIFICATION	6.476689622240319E-5	DESIGN
sort	WITHOUT_CLASSIFICATION	0.999508107903528	WITHOUT_CLASSIFICATION	4.918920964720099E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999739397927501	WITHOUT_CLASSIFICATION	2.606020724999143E-5	DESIGN
unsorted natural comparator.class.name	WITHOUT_CLASSIFICATION	0.9995814502254384	WITHOUT_CLASSIFICATION	4.1854977456158446E-4	DESIGN
orphan delete (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9991157348700388	WITHOUT_CLASSIFICATION	8.842651299612331E-4	DESIGN
set up second pass	WITHOUT_CLASSIFICATION	0.9999475309207486	WITHOUT_CLASSIFICATION	5.246907925136166E-5	DESIGN
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9680055647347836	WITHOUT_CLASSIFICATION	0.031994435265216385	DESIGN
a nested composite element	WITHOUT_CLASSIFICATION	0.9928658758289186	WITHOUT_CLASSIFICATION	0.00713412417108145	DESIGN
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9996107080831956	WITHOUT_CLASSIFICATION	3.892919168043939E-4	DESIGN
note special case one-to-one constrained=false cannot be proxied so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999968764826576	WITHOUT_CLASSIFICATION	3.123517342500541E-6	DESIGN
use old (hb 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999756918835125	WITHOUT_CLASSIFICATION	2.4308116487573458E-5	DESIGN
lazy = !join	WITHOUT_CLASSIFICATION	0.9999167149763548	WITHOUT_CLASSIFICATION	8.3285023645199E-5	DESIGN
generator	WITHOUT_CLASSIFICATION	0.9992831640771922	WITHOUT_CLASSIFICATION	7.168359228076918E-4	DESIGN
id unsaved-value	WITHOUT_CLASSIFICATION	0.9994213217691925	WITHOUT_CLASSIFICATION	5.786782308073768E-4	DESIGN
version unsaved-value	WITHOUT_CLASSIFICATION	0.9976977949575895	WITHOUT_CLASSIFICATION	0.0023022050424104097	DESIGN
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9879877744854864	WITHOUT_CLASSIFICATION	0.012012225514513723	DESIGN
( (column) ( (simplevalue) ic.getindex() ).getcolumniterator().next() ).setnullable(false)	WITHOUT_CLASSIFICATION	0.9985324829399607	WITHOUT_CLASSIFICATION	0.0014675170600392492	DESIGN
contained elements	WITHOUT_CLASSIFICATION	0.9999060772369968	WITHOUT_CLASSIFICATION	9.392276300317999E-5	DESIGN
for non-inverse one-to-many with a not-null fk add a backref!	WITHOUT_CLASSIFICATION	0.9879643856343463	WITHOUT_CLASSIFICATION	0.01203561436565378	DESIGN
bind the where	WITHOUT_CLASSIFICATION	0.9999393919454286	WITHOUT_CLASSIFICATION	6.06080545714834E-5	DESIGN
bind the order-by	WITHOUT_CLASSIFICATION	0.9998599537715516	WITHOUT_CLASSIFICATION	1.4004622844841194E-4	DESIGN
bind the filters	WITHOUT_CLASSIFICATION	0.9999241586772445	WITHOUT_CLASSIFICATION	7.584132275550123E-5	DESIGN
overriding inherited meta attribute. hbx-621 & hbx-793	WITHOUT_CLASSIFICATION	0.999291714892224	WITHOUT_CLASSIFICATION	7.082851077759379E-4	DESIGN
first iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999799778787	WITHOUT_CLASSIFICATION	2.0022121375849583E-8	DESIGN
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a fqn (in the case of a pojo mapping).	WITHOUT_CLASSIFICATION	0.9997130533737352	WITHOUT_CLASSIFICATION	2.8694662626480466E-4	DESIGN
+ "_" + referencedcolumnname not used for backward compatibility	WITHOUT_CLASSIFICATION	0.6452127057913003	WITHOUT_CLASSIFICATION	0.3547872942086997	DESIGN
sessionfactory name	WITHOUT_CLASSIFICATION	0.9994871910027007	WITHOUT_CLASSIFICATION	5.128089972992989E-4	DESIGN
jdbc and connection settings	WITHOUT_CLASSIFICATION	0.9991429790355798	WITHOUT_CLASSIFICATION	8.570209644202616E-4	DESIGN
jdbc and connection settings	WITHOUT_CLASSIFICATION	0.9991429790355798	WITHOUT_CLASSIFICATION	8.570209644202616E-4	DESIGN
interrogate jdbc metadata	WITHOUT_CLASSIFICATION	0.9995850532000833	WITHOUT_CLASSIFICATION	4.149467999167706E-4	DESIGN
user supplied jdbc connections	WITHOUT_CLASSIFICATION	0.9999685021908619	WITHOUT_CLASSIFICATION	3.149780913808193E-5	DESIGN
use dialect default properties	WITHOUT_CLASSIFICATION	0.99874194026311	WITHOUT_CLASSIFICATION	0.0012580597368899863	DESIGN
transaction settings	WITHOUT_CLASSIFICATION	0.9992946114205367	WITHOUT_CLASSIFICATION	7.053885794632544E-4	DESIGN
sql generation settings	WITHOUT_CLASSIFICATION	0.9990240995848738	WITHOUT_CLASSIFICATION	9.75900415126255E-4	DESIGN
query parser settings	WITHOUT_CLASSIFICATION	0.996127046579508	WITHOUT_CLASSIFICATION	0.003872953420491865	DESIGN
second-level / query cache	WITHOUT_CLASSIFICATION	0.9996867420518993	WITHOUT_CLASSIFICATION	3.1325794810068124E-4	DESIGN
the cache provider is needed when we either have second-level cache enabled or query cache enabled. note that usesecondlevelcache is enabled by default	WITHOUT_CLASSIFICATION	0.9999978003191504	WITHOUT_CLASSIFICATION	2.199680849677621E-6	DESIGN
sql exception converter	WITHOUT_CLASSIFICATION	0.9994636769456811	WITHOUT_CLASSIFICATION	5.363230543190411E-4	DESIGN
statistics and logging	WITHOUT_CLASSIFICATION	0.9992395526129261	WITHOUT_CLASSIFICATION	7.604473870739943E-4	DESIGN
settings.setshowsqlenabled(showsql)	WITHOUT_CLASSIFICATION	0.9995689692001622	WITHOUT_CLASSIFICATION	4.310307998376784E-4	DESIGN
settings.setformatsqlenabled(formatsql)	WITHOUT_CLASSIFICATION	0.9995689692001622	WITHOUT_CLASSIFICATION	4.310307998376784E-4	DESIGN
schema export	WITHOUT_CLASSIFICATION	0.9996445591529375	WITHOUT_CLASSIFICATION	3.5544084706248753E-4	DESIGN
string provider = properties.getproperty( environment.bytecode_provider ) log.info( "bytecode provider name " + provider ) bytecodeprovider bytecodeprovider = buildbytecodeprovider( provider ) settings.setbytecodeprovider( bytecodeprovider )	WITHOUT_CLASSIFICATION	0.9999004516323168	WITHOUT_CLASSIFICATION	9.954836768316342E-5	DESIGN
legacy behavior apply the bridge	WITHOUT_CLASSIFICATION	0.9995061794311083	WITHOUT_CLASSIFICATION	4.938205688915943E-4	DESIGN
maybe a concrete sqlpropertyresult type but map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.8973198922510369	WITHOUT_CLASSIFICATION	0.10268010774896313	DESIGN
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9963580779766567	WITHOUT_CLASSIFICATION	0.0036419220233433005	DESIGN
private componenttuplizerfactory componenttuplizerfactory todo hhh-3517 and hhh-1907 private bytecodeprovider bytecodeprovider	WITHOUT_CLASSIFICATION	0.7290086586699698	DESIGN	0.2709913413300302	WITHOUT_CLASSIFICATION
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992629134536876	WITHOUT_CLASSIFICATION	7.370865463125004E-4	DESIGN
public componenttuplizerfactory getcomponenttuplizerfactory() { return componenttuplizerfactory }	WITHOUT_CLASSIFICATION	0.9967174652898547	WITHOUT_CLASSIFICATION	0.003282534710145199	DESIGN
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99481989719162	WITHOUT_CLASSIFICATION	0.005180102808380047	DESIGN
void setshowsqlenabled(boolean b) { showsql = b } void setformatsqlenabled(boolean b) { formatsql = b }	WITHOUT_CLASSIFICATION	0.9999707823199189	WITHOUT_CLASSIFICATION	2.921768008115809E-5	DESIGN
public bytecodeprovider getbytecodeprovider() { return bytecodeprovider } void setbytecodeprovider(bytecodeprovider bytecodeprovider) { this.bytecodeprovider = bytecodeprovider }	WITHOUT_CLASSIFICATION	0.9993103006381169	WITHOUT_CLASSIFICATION	6.896993618831276E-4	DESIGN
using local since the inheritedmetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9988000004859616	WITHOUT_CLASSIFICATION	0.001199999514038314	DESIGN
private componenttuplizerfactory componenttuplizerfactory todo hhh-3517 and hhh-1907	WITHOUT_CLASSIFICATION	0.7290086586699698	DESIGN	0.2709913413300302	WITHOUT_CLASSIFICATION
protected list extendsqueue	WITHOUT_CLASSIFICATION	0.9995127488276065	WITHOUT_CLASSIFICATION	4.872511723934365E-4	DESIGN
extendsqueue = new arraylist()	WITHOUT_CLASSIFICATION	0.9998157048781628	WITHOUT_CLASSIFICATION	1.8429512183716084E-4	DESIGN
componenttuplizerfactory = new componenttuplizerfactory()	WITHOUT_CLASSIFICATION	0.9999108848667022	WITHOUT_CLASSIFICATION	8.911513329780608E-5	DESIGN
if doc is null then for whatever reason the cached file cannot be used	WITHOUT_CLASSIFICATION	0.9996369954859355	WITHOUT_CLASSIFICATION	3.6300451406441815E-4	DESIGN
drop them in reverse order in case db needs it done that way	WITHOUT_CLASSIFICATION	0.9617081399397598	WITHOUT_CLASSIFICATION	0.038291860060240275	DESIGN
public componenttuplizerfactory getcomponenttuplizerfactory() { return componenttuplizerfactory }	WITHOUT_CLASSIFICATION	0.9967174652898547	WITHOUT_CLASSIFICATION	0.003282534710145199	DESIGN
this method may be called many times!!	WITHOUT_CLASSIFICATION	0.9306609719984704	WITHOUT_CLASSIFICATION	0.06933902800152959	DESIGN
iterator iterator = extendsqueue.iterator()	WITHOUT_CLASSIFICATION	0.9998808201913415	WITHOUT_CLASSIFICATION	1.1917980865846627E-4	DESIGN
iterator iter = extendsqueue.iterator()	WITHOUT_CLASSIFICATION	0.9997872034638714	WITHOUT_CLASSIFICATION	2.1279653612866898E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.9998933701219733	WITHOUT_CLASSIFICATION	1.066298780267427E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.9998933701219733	WITHOUT_CLASSIFICATION	1.066298780267427E-4	DESIGN
settings.setcomponenttuplizerfactory( this.getcomponenttuplizerfactory() )	WITHOUT_CLASSIFICATION	0.9981620324198082	WITHOUT_CLASSIFICATION	0.0018379675801917853	DESIGN
private final list extendsqueue	WITHOUT_CLASSIFICATION	0.999868337778795	WITHOUT_CLASSIFICATION	1.3166222120490818E-4	DESIGN
<string string>	WITHOUT_CLASSIFICATION	0.9996378639018595	WITHOUT_CLASSIFICATION	3.6213609814043945E-4	DESIGN
<string string>	WITHOUT_CLASSIFICATION	0.9996378639018595	WITHOUT_CLASSIFICATION	3.6213609814043945E-4	DESIGN
+ "_" + referencedcolumnname not used for backward compatibility	WITHOUT_CLASSIFICATION	0.6452127057913003	WITHOUT_CLASSIFICATION	0.3547872942086997	DESIGN
set use_reflection_optimizer to false to fix hhh-227	WITHOUT_CLASSIFICATION	0.9739177130139656	WITHOUT_CLASSIFICATION	0.02608228698603444	DESIGN
orphan delete not supported for entitymode.dom4j	WITHOUT_CLASSIFICATION	0.9975515694856127	WITHOUT_CLASSIFICATION	0.0024484305143871975	DESIGN
element = xmlhelper.generatedom4jelement( persister.getnodename() )	WITHOUT_CLASSIFICATION	0.9996541244113067	WITHOUT_CLASSIFICATION	3.458755886932417E-4	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9996912100243233	WITHOUT_CLASSIFICATION	3.087899756766436E-4	DESIGN
orphan delete not supported for entitymode.dom4j	WITHOUT_CLASSIFICATION	0.9975515694856127	WITHOUT_CLASSIFICATION	0.0024484305143871975	DESIGN
element = xmlhelper.generatedom4jelement( persister.getnodename() )	WITHOUT_CLASSIFICATION	0.9996541244113067	WITHOUT_CLASSIFICATION	3.458755886932417E-4	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.999546418886652	WITHOUT_CLASSIFICATION	4.5358111334804963E-4	DESIGN
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9968856933276531	WITHOUT_CLASSIFICATION	0.003114306672347051	DESIGN
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9991466845161591	WITHOUT_CLASSIFICATION	8.53315483841036E-4	DESIGN
the element has changed	WITHOUT_CLASSIFICATION	0.999954506879821	WITHOUT_CLASSIFICATION	4.5493120178993045E-5	DESIGN
careful these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9976619027243263	WITHOUT_CLASSIFICATION	0.002338097275673732	DESIGN
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9690889319735022	WITHOUT_CLASSIFICATION	0.030911068026497734	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9998579358663521	WITHOUT_CLASSIFICATION	1.4206413364791474E-4	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9998579358663521	WITHOUT_CLASSIFICATION	1.4206413364791474E-4	DESIGN
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9925546891529655	WITHOUT_CLASSIFICATION	0.007445310847034458	DESIGN
short-circuit(s) no new elements the old list contains only orphans no old elements so no orphans neither	WITHOUT_CLASSIFICATION	0.9999996648133551	WITHOUT_CLASSIFICATION	3.351866448047543E-7	DESIGN
create the collection holding the orphans	WITHOUT_CLASSIFICATION	0.9998494405735071	WITHOUT_CLASSIFICATION	1.5055942649293364E-4	DESIGN
collect entityidentifier(s) of the current elements - add them into a hashset for fast access	WITHOUT_CLASSIFICATION	0.9993803376800503	WITHOUT_CLASSIFICATION	6.196623199497934E-4	DESIGN
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999215265428646	WITHOUT_CLASSIFICATION	7.847345713540405E-5	DESIGN
(array==null) ? templist.size()	WITHOUT_CLASSIFICATION	0.9991721558656044	WITHOUT_CLASSIFICATION	8.278441343956003E-4	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9996912100243233	WITHOUT_CLASSIFICATION	3.087899756766436E-4	DESIGN
(array==null) ? templist.get(i)	WITHOUT_CLASSIFICATION	0.9991721558656044	WITHOUT_CLASSIFICATION	8.278441343956003E-4	DESIGN
write() -- doesn't	WITHOUT_CLASSIFICATION	0.9989382796140801	WITHOUT_CLASSIFICATION	0.0010617203859199032	DESIGN
write() -- doesn't	WITHOUT_CLASSIFICATION	0.9989382796140801	WITHOUT_CLASSIFICATION	0.0010617203859199032	DESIGN
amazingly these two will work because abstractcollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.999750033396479	WITHOUT_CLASSIFICATION	2.499666035209417E-4	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.999546418886652	WITHOUT_CLASSIFICATION	4.5358111334804963E-4	DESIGN
finally what it's all about	WITHOUT_CLASSIFICATION	0.9983906990470142	WITHOUT_CLASSIFICATION	0.001609300952985889	DESIGN
note that if we load this collection from a cartesian product the multiplicity would be broken so use an idbag instead	WITHOUT_CLASSIFICATION	0.9508243905383879	DESIGN	0.04917560946161219	WITHOUT_CLASSIFICATION
anyway here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.8891635363410026	DESIGN	0.11083646365899727	WITHOUT_CLASSIFICATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999421298261034	WITHOUT_CLASSIFICATION	5.787017389655002E-5	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9748585613876826	WITHOUT_CLASSIFICATION	0.025141438612317445	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.999546418886652	WITHOUT_CLASSIFICATION	4.5358111334804963E-4	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999421298261034	WITHOUT_CLASSIFICATION	5.787017389655002E-5	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9748585613876826	WITHOUT_CLASSIFICATION	0.025141438612317445	DESIGN
public boolean equals(object other) {read()return bag.equals(other)}public int hashcode(object other) {read()return bag.hashcode()}	WITHOUT_CLASSIFICATION	0.9992808456908281	WITHOUT_CLASSIFICATION	7.191543091718799E-4	DESIGN
list operations	WITHOUT_CLASSIFICATION	0.999972183707677	WITHOUT_CLASSIFICATION	2.7816292322915395E-5	DESIGN
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999984656535623	WITHOUT_CLASSIFICATION	1.5343464377246393E-6	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.999546418886652	WITHOUT_CLASSIFICATION	4.5358111334804963E-4	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.999546418886652	WITHOUT_CLASSIFICATION	4.5358111334804963E-4	DESIGN
from map	WITHOUT_CLASSIFICATION	0.9999230695423076	WITHOUT_CLASSIFICATION	7.69304576923147E-5	DESIGN
from sortedmap	WITHOUT_CLASSIFICATION	0.9995017014387869	WITHOUT_CLASSIFICATION	4.982985612130942E-4	DESIGN
inject the data	WITHOUT_CLASSIFICATION	0.9998802815977084	WITHOUT_CLASSIFICATION	1.1971840229169125E-4	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9996447841908213	WITHOUT_CLASSIFICATION	3.5521580917874455E-4	DESIGN
default pool size 20	WITHOUT_CLASSIFICATION	0.9999406244407848	WITHOUT_CLASSIFICATION	5.937555921521811E-5	DESIGN
trying via forname() first to be as close to drivermanager's semantics	WITHOUT_CLASSIFICATION	0.999999429276729	WITHOUT_CLASSIFICATION	5.707232709933852E-7	DESIGN
if debug level is enabled then log the password otherwise mask it	WITHOUT_CLASSIFICATION	0.9999872566698421	WITHOUT_CLASSIFICATION	1.2743330157817265E-5	DESIGN
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9929279978148042	WITHOUT_CLASSIFICATION	0.0070720021851957	DESIGN
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999252270697594	WITHOUT_CLASSIFICATION	7.477293024065254E-5	DESIGN
then bind it	WITHOUT_CLASSIFICATION	0.9996466415587459	WITHOUT_CLASSIFICATION	3.5335844125400774E-4	DESIGN
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9944615854667931	WITHOUT_CLASSIFICATION	0.0055384145332069475	DESIGN
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9960827306626755	WITHOUT_CLASSIFICATION	0.0039172693373243726	DESIGN
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999861201022858	WITHOUT_CLASSIFICATION	1.3879897714150116E-5	DESIGN
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9983515455817985	WITHOUT_CLASSIFICATION	0.0016484544182014775	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997086037672483	WITHOUT_CLASSIFICATION	2.9139623275174526E-4	DESIGN
we could register the session against the transaction even though it is not started but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999997872524063	WITHOUT_CLASSIFICATION	2.1274759358064953E-7	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9996447841908213	WITHOUT_CLASSIFICATION	3.5521580917874455E-4	DESIGN
private string propertyname	WITHOUT_CLASSIFICATION	0.9975287822372814	WITHOUT_CLASSIFICATION	0.002471217762718653	DESIGN
public propertyprojection project() {return projections.property(getpropertyname())}	WITHOUT_CLASSIFICATION	0.9969576892276397	WITHOUT_CLASSIFICATION	0.0030423107723603513	DESIGN
string[] fk = stringhelper.qualify( "collection_" cp.getkeycolumnnames() )	WITHOUT_CLASSIFICATION	0.995619931669316	WITHOUT_CLASSIFICATION	0.004380068330684063	DESIGN
" collection_ where " +	WITHOUT_CLASSIFICATION	0.999870266143029	WITHOUT_CLASSIFICATION	1.2973385697103473E-4	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9996359622366918	WITHOUT_CLASSIFICATION	3.640377633081632E-4	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9996359622366918	WITHOUT_CLASSIFICATION	3.640377633081632E-4	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9996447841908213	WITHOUT_CLASSIFICATION	3.5521580917874455E-4	DESIGN
the following two lines were added to ensure that this.params is not null which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999902367900484	WITHOUT_CLASSIFICATION	9.763209951586977E-6	DESIGN
with two-deep subqueries the same alias would get generated for both using the old method (criteriaquery.generatesqlalias()) so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9996197990748242	WITHOUT_CLASSIFICATION	3.8020092517579565E-4	DESIGN
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9889032493056459	WITHOUT_CLASSIFICATION	0.011096750694354162	DESIGN
pull off the last " "	WITHOUT_CLASSIFICATION	0.9999357363999715	WITHOUT_CLASSIFICATION	6.426360002856239E-5	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.9997736265536866	WITHOUT_CLASSIFICATION	2.2637344631337738E-4	DESIGN
we have the form trim(trimsource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9998158995472263	WITHOUT_CLASSIFICATION	1.8410045277373946E-4	DESIGN
we have the form trim(from trimsource). this is functionally equivalent to trim(trimsource)	WITHOUT_CLASSIFICATION	0.9975854219737341	WITHOUT_CLASSIFICATION	0.002414578026265892	DESIGN
not_supported_should_use_jdbc3_preparedstatement.getgeneratedkeys_method	WITHOUT_CLASSIFICATION	0.9995689692001622	WITHOUT_CLASSIFICATION	4.310307998376784E-4	DESIGN
potentialtrimcharacterargindex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999895763247706	WITHOUT_CLASSIFICATION	1.042367522944371E-5	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996373865783718	WITHOUT_CLASSIFICATION	3.6261342162824086E-4	DESIGN
oracle did add support for ansi case statements in 9i	WITHOUT_CLASSIFICATION	0.9999871891926906	WITHOUT_CLASSIFICATION	1.281080730947966E-5	DESIGN
the standard sql function name is current_timestamp	WITHOUT_CLASSIFICATION	0.9999917812122876	WITHOUT_CLASSIFICATION	8.218787712273928E-6	DESIGN
informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9820716482431588	WITHOUT_CLASSIFICATION	0.017928351756841095	DESIGN
or byte or text? or money	WITHOUT_CLASSIFICATION	0.9996194580925801	WITHOUT_CLASSIFICATION	3.805419074198426E-4	DESIGN
strip table-owner because informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9996564264035843	WITHOUT_CLASSIFICATION	3.435735964156949E-4	DESIGN
build the map of standard ansi sql aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999872557610485	WITHOUT_CLASSIFICATION	1.2744238951401673E-5	DESIGN
pre h3.2 behavior super.getreturntype(ct m)	WITHOUT_CLASSIFICATION	0.9998306647546445	WITHOUT_CLASSIFICATION	1.693352453553661E-4	DESIGN
finally use the sqltype if == on hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9997773330468452	WITHOUT_CLASSIFICATION	2.226669531548879E-4	DESIGN
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999183465035187	WITHOUT_CLASSIFICATION	8.165349648130566E-5	DESIGN
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.991723746316683	WITHOUT_CLASSIFICATION	0.008276253683316909	DESIGN
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9983904512851124	WITHOUT_CLASSIFICATION	0.0016095487148876414	DESIGN
map second/minute/hour/day/month/year to ansi extract() override on subclasses	WITHOUT_CLASSIFICATION	0.9999888954404874	WITHOUT_CLASSIFICATION	1.110455951264599E-5	DESIGN
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9993150221040603	WITHOUT_CLASSIFICATION	6.849778959398E-4	DESIGN
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998566346694526	WITHOUT_CLASSIFICATION	1.4336533054727952E-4	DESIGN
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999192273205513	WITHOUT_CLASSIFICATION	8.077267944869829E-5	DESIGN
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997510817088584	WITHOUT_CLASSIFICATION	2.489182911416693E-4	DESIGN
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998886572289633	WITHOUT_CLASSIFICATION	1.1134277103672576E-4	DESIGN
identity support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994258933728275	WITHOUT_CLASSIFICATION	5.741066271725456E-4	DESIGN
sequence support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998434119220354	WITHOUT_CLASSIFICATION	1.5658807796465108E-4	DESIGN
guid support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991566115133599	WITHOUT_CLASSIFICATION	8.433884866401984E-4	DESIGN
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991566115133599	WITHOUT_CLASSIFICATION	8.433884866401984E-4	DESIGN
by default we report no support	WITHOUT_CLASSIFICATION	0.9759556557734825	WITHOUT_CLASSIFICATION	0.024044344226517533	DESIGN
by default we report no support for nowait lock semantics	WITHOUT_CLASSIFICATION	0.8614623456588617	WITHOUT_CLASSIFICATION	0.13853765434113824	DESIGN
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996886208645603	WITHOUT_CLASSIFICATION	3.113791354397454E-4	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9849309588825195	WITHOUT_CLASSIFICATION	0.0150690411174806	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9954670213852339	WITHOUT_CLASSIFICATION	0.004532978614766089	DESIGN
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998711730571771	WITHOUT_CLASSIFICATION	1.2882694282284333E-4	DESIGN
sqlexception support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996826593298084	WITHOUT_CLASSIFICATION	3.1734067019166263E-4	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999238431468733	WITHOUT_CLASSIFICATION	7.61568531267073E-4	DESIGN
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994966452669501	WITHOUT_CLASSIFICATION	5.033547330498515E-4	DESIGN
ddl support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991566115133599	WITHOUT_CLASSIFICATION	8.433884866401984E-4	DESIGN
grrr for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9998697677054373	WITHOUT_CLASSIFICATION	1.3023229456265067E-4	DESIGN
informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989835495853394	WITHOUT_CLASSIFICATION	0.0010164504146605974	DESIGN
return false here as most databases do not properly support this construct	WITHOUT_CLASSIFICATION	0.9978714155268839	WITHOUT_CLASSIFICATION	0.002128584473116181	DESIGN
mckoi has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9997784795311735	WITHOUT_CLASSIFICATION	2.215204688263841E-4	DESIGN
oracle8 and previous define only a "date" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9893090805301347	WITHOUT_CLASSIFICATION	0.010690919469865338	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9997908774958251	WITHOUT_CLASSIFICATION	2.0912250417500714E-4	DESIGN
" cascade"	WITHOUT_CLASSIFICATION	0.9998933589501497	WITHOUT_CLASSIFICATION	1.0664104985026375E-4	DESIGN
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9998206829689813	WITHOUT_CLASSIFICATION	1.7931703101859342E-4	DESIGN
public boolean droptemporarytableafteruse() {we have to because postgres sets current txto rollback only after a failed create tablereturn true}	WITHOUT_CLASSIFICATION	0.9999666358367464	WITHOUT_CLASSIFICATION	3.336416325368646E-5	DESIGN
check violation	WITHOUT_CLASSIFICATION	0.999326778428788	WITHOUT_CLASSIFICATION	6.732215712120698E-4	DESIGN
unique violation	WITHOUT_CLASSIFICATION	0.9993861616765293	WITHOUT_CLASSIFICATION	6.138383234707892E-4	DESIGN
foreign key violation	WITHOUT_CLASSIFICATION	0.9996721040485299	WITHOUT_CLASSIFICATION	3.278959514701291E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996373865783718	WITHOUT_CLASSIFICATION	3.6261342162824086E-4	DESIGN
not null violation	WITHOUT_CLASSIFICATION	0.9987510891493739	WITHOUT_CLASSIFICATION	0.0012489108506260384	DESIGN
all other	WITHOUT_CLASSIFICATION	0.9997287313158155	WITHOUT_CLASSIFICATION	2.712686841845372E-4	DESIGN
register the type of the out param - postgresql uses types.other	WITHOUT_CLASSIFICATION	0.99926009414308	WITHOUT_CLASSIFICATION	7.399058569199187E-4	DESIGN
seems to not really public boolean supportsrowvalueconstructorsyntax() { return true }	WITHOUT_CLASSIFICATION	0.8314897832019083	WITHOUT_CLASSIFICATION	0.16851021679809167	DESIGN
seems to have spotty lob suppport	WITHOUT_CLASSIFICATION	0.9989332067834179	WITHOUT_CLASSIFICATION	0.0010667932165821297	DESIGN
hhh-2300	WITHOUT_CLASSIFICATION	0.9997699770785218	WITHOUT_CLASSIFICATION	2.300229214783216E-4	DESIGN
ignore (probably h2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9996671068775385	WITHOUT_CLASSIFICATION	3.328931224614674E-4	DESIGN
numeric functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994084311130489	WITHOUT_CLASSIFICATION	5.91568886951203E-4	DESIGN
string functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994410859961779	WITHOUT_CLASSIFICATION	5.589140038222104E-4	DESIGN
time and date functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99990047106971	WITHOUT_CLASSIFICATION	9.952893028988733E-5	DESIGN
system functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988794848059304	WITHOUT_CLASSIFICATION	0.0011205151940696866	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.998810474737562	WITHOUT_CLASSIFICATION	0.0011895252624379616	DESIGN
23000 check constraint violation {0} 23001 unique index or primary key violation {0}	WITHOUT_CLASSIFICATION	0.9998936003376262	WITHOUT_CLASSIFICATION	1.0639966237385062E-4	DESIGN
display the dialect version.	WITHOUT_CLASSIFICATION	0.9980845577891738	WITHOUT_CLASSIFICATION	0.0019154422108261814	DESIGN
the rdms concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999991464541553	WITHOUT_CLASSIFICATION	8.535458447356757E-7	DESIGN
dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979244847202192	WITHOUT_CLASSIFICATION	0.002075515279780698	DESIGN
original dialect.java returns " for update"	WITHOUT_CLASSIFICATION	0.9998123207975828	WITHOUT_CLASSIFICATION	1.876792024173124E-4	DESIGN
verify the state of this new method in hibernate 3.0 dialect.java	WITHOUT_CLASSIFICATION	0.9986815764467106	WITHOUT_CLASSIFICATION	0.001318423553289303	DESIGN
origial dialect.java returns true	WITHOUT_CLASSIFICATION	0.9991050603332842	WITHOUT_CLASSIFICATION	8.949396667158569E-4	DESIGN
the keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.8571598249131727	WITHOUT_CLASSIFICATION	0.14284017508682725	DESIGN
sequence methods - start. the rdms dialect needs these	WITHOUT_CLASSIFICATION	0.9964779857658348	WITHOUT_CLASSIFICATION	0.0035220142341651803	DESIGN
methods to make it possible to use the native id generator	WITHOUT_CLASSIFICATION	0.9925277270742848	WITHOUT_CLASSIFICATION	0.007472272925715107	DESIGN
the where clause was added to eliminate this statement from brute force searches.	WITHOUT_CLASSIFICATION	0.9983702572180102	WITHOUT_CLASSIFICATION	0.0016297427819897874	DESIGN
sequence methods - end	WITHOUT_CLASSIFICATION	0.9995051149844347	WITHOUT_CLASSIFICATION	4.94885015565317E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996373865783718	WITHOUT_CLASSIFICATION	3.6261342162824086E-4	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9997908774958251	WITHOUT_CLASSIFICATION	2.0912250417500714E-4	DESIGN
we must return a valid rdms/rsa command from this method to prevent rdms/rsa from issuing error 400	WITHOUT_CLASSIFICATION	0.941350481927761	WITHOUT_CLASSIFICATION	0.05864951807223888	DESIGN
used with drop table to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9147338007834392	WITHOUT_CLASSIFICATION	0.08526619921656083	DESIGN
rdms supports the union all clause.	WITHOUT_CLASSIFICATION	0.9996397796445254	WITHOUT_CLASSIFICATION	3.6022035547453725E-4	DESIGN
rdms has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9997333338854499	WITHOUT_CLASSIFICATION	2.666661145500115E-4	DESIGN
multi-param dialect functions	WITHOUT_CLASSIFICATION	0.9946201297691238	WITHOUT_CLASSIFICATION	0.005379870230876058	DESIGN
function templates	WITHOUT_CLASSIFICATION	0.9999594127138747	WITHOUT_CLASSIFICATION	4.058728612538714E-5	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.998810474737562	WITHOUT_CLASSIFICATION	0.0011895252624379616	DESIGN
this assumes schema support which is present in 1.8.0 and later	WITHOUT_CLASSIFICATION	0.999001707105182	WITHOUT_CLASSIFICATION	9.98292894817956E-4	DESIGN
hsqldb only supports read_uncommitted transaction isolation	WITHOUT_CLASSIFICATION	0.9996645446006949	WITHOUT_CLASSIFICATION	3.3545539930505714E-4	DESIGN
multi-param string dialect functions	WITHOUT_CLASSIFICATION	0.9983817084971683	WITHOUT_CLASSIFICATION	0.0016182915028316472	DESIGN
multi-param numeric dialect functions	WITHOUT_CLASSIFICATION	0.9982872649221268	WITHOUT_CLASSIFICATION	0.0017127350778731215	DESIGN
multi-param date dialect functions	WITHOUT_CLASSIFICATION	0.9987651493508609	WITHOUT_CLASSIFICATION	0.0012348506491391094	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.999191030870568	WITHOUT_CLASSIFICATION	8.08969129431926E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996373865783718	WITHOUT_CLASSIFICATION	3.6261342162824086E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996373865783718	WITHOUT_CLASSIFICATION	3.6261342162824086E-4	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9933113114849479	WITHOUT_CLASSIFICATION	0.00668868851505217	DESIGN
register the type of the out param - an oracle specific type	WITHOUT_CLASSIFICATION	0.9998976623822429	WITHOUT_CLASSIFICATION	1.0233761775714002E-4	DESIGN
timesten has no blob/clob support but these types may be suitable for some applications. the length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9991301527373799	WITHOUT_CLASSIFICATION	8.698472626200624E-4	DESIGN
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9971223726075286	WITHOUT_CLASSIFICATION	0.002877627392471373	DESIGN
public boolean supportsforupdatenowait() {return false}	WITHOUT_CLASSIFICATION	0.9986000581842287	WITHOUT_CLASSIFICATION	0.0013999418157712527	DESIGN
timesten has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9997568157214276	WITHOUT_CLASSIFICATION	2.4318427857246576E-4	DESIGN
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9997304825414028	WITHOUT_CLASSIFICATION	2.695174585970796E-4	DESIGN
add new ordered map	WITHOUT_CLASSIFICATION	0.9997859724595015	WITHOUT_CLASSIFICATION	2.140275404985738E-4	DESIGN
registercolumntype( types.varchar 16777215 "mediumtext" )	WITHOUT_CLASSIFICATION	0.9981954107186963	WITHOUT_CLASSIFICATION	0.0018045892813035734	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996373865783718	WITHOUT_CLASSIFICATION	3.6261342162824086E-4	DESIGN
this assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999988495628624	WITHOUT_CLASSIFICATION	1.1504371375953644E-5	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9976913364788574	WITHOUT_CLASSIFICATION	0.002308663521142521	DESIGN
return "select current_timestamp from rdb$database"	WITHOUT_CLASSIFICATION	0.9987243663797234	WITHOUT_CLASSIFICATION	0.0012756336202766469	DESIGN
registercolumntype data types	WITHOUT_CLASSIFICATION	0.9995531762378276	WITHOUT_CLASSIFICATION	4.4682376217240565E-4	DESIGN
hibernate seems to ignore this type	WITHOUT_CLASSIFICATION	0.997915010708663	WITHOUT_CLASSIFICATION	0.0020849892913369864	DESIGN
ibid for current_time and current_date	WITHOUT_CLASSIFICATION	0.9996567950313044	WITHOUT_CLASSIFICATION	3.4320496869554587E-4	DESIGN
tell hibernate to use getbytes instead of getbinarystream	WITHOUT_CLASSIFICATION	0.9909105968499194	WITHOUT_CLASSIFICATION	0.009089403150080489	DESIGN
no batch statements	WITHOUT_CLASSIFICATION	0.9999238687575258	WITHOUT_CLASSIFICATION	7.61312424741812E-5	DESIGN
we might want a special case for 192. this is very common for money types and here it is converted to 181	WITHOUT_CLASSIFICATION	0.9401822518127891	DESIGN	0.05981774818721082	WITHOUT_CLASSIFICATION
no pointbase bit	WITHOUT_CLASSIFICATION	0.9966000653139514	WITHOUT_CLASSIFICATION	0.003399934686048587	DESIGN
no pointbase tinyint	WITHOUT_CLASSIFICATION	0.9994857421119422	WITHOUT_CLASSIFICATION	5.142578880577558E-4	DESIGN
pointbase has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.999247887158923	WITHOUT_CLASSIFICATION	7.521128410770996E-4	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9997908774958251	WITHOUT_CLASSIFICATION	2.0912250417500714E-4	DESIGN
the current_timestamp is more accurate but only known to be supported in sql server 7.0 and later (i.e. sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.5941178391182668	WITHOUT_CLASSIFICATION	0.4058821608817332	DESIGN
sql server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999964096563602	WITHOUT_CLASSIFICATION	3.5903436398456846E-6	DESIGN
here assume sqlserver2005 using snapshot isolation which does not have this problem	WITHOUT_CLASSIFICATION	0.9863917297278131	WITHOUT_CLASSIFICATION	0.01360827027218699	DESIGN
registercolumntype( types.blob 16777215 "mediumblob" ) registercolumntype( types.blob 65535 "blob" )	WITHOUT_CLASSIFICATION	0.9941077376669225	WITHOUT_CLASSIFICATION	0.0058922623330774845	DESIGN
registercolumntype( types.clob 16777215 "mediumtext" ) registercolumntype( types.clob 65535 "text" )	WITHOUT_CLASSIFICATION	0.9988020965137264	WITHOUT_CLASSIFICATION	0.0011979034862735606	DESIGN
registercolumntype( types.varchar 16777215 "mediumtext" ) registercolumntype( types.varchar 65535 "text" )	WITHOUT_CLASSIFICATION	0.9988020965137264	WITHOUT_CLASSIFICATION	0.0011979034862735606	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9997908774958251	WITHOUT_CLASSIFICATION	2.0912250417500714E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9997316722023998	WITHOUT_CLASSIFICATION	2.6832779760027723E-4	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9976913364788574	WITHOUT_CLASSIFICATION	0.002308663521142521	DESIGN
sybase bit type does not support null values	WITHOUT_CLASSIFICATION	0.9805027355599152	WITHOUT_CLASSIFICATION	0.019497264440084802	DESIGN
this assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999988495628624	WITHOUT_CLASSIFICATION	1.1504371375953644E-5	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996373865783718	WITHOUT_CLASSIFICATION	3.6261342162824086E-4	DESIGN
you may still have other resultsets or update counts left to process here but you can't do it now or the resultset you just got will be closed	WITHOUT_CLASSIFICATION	0.9999998620640076	WITHOUT_CLASSIFICATION	1.3793599239885243E-7	DESIGN
not null (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9974643355004161	WITHOUT_CLASSIFICATION	0.0025356644995838252	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996373865783718	WITHOUT_CLASSIFICATION	3.6261342162824086E-4	DESIGN
oracle driver reports to support getgeneratedkeys() but they only support the version taking an array of the names of the columns to be returned (via its returning clause). no other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999531374071574	WITHOUT_CLASSIFICATION	4.6862592842628436E-5	DESIGN
multi-param string dialect functions	WITHOUT_CLASSIFICATION	0.9983817084971683	WITHOUT_CLASSIFICATION	0.0016182915028316472	DESIGN
multi-param numeric dialect functions	WITHOUT_CLASSIFICATION	0.9982872649221268	WITHOUT_CLASSIFICATION	0.0017127350778731215	DESIGN
multi-param date dialect functions	WITHOUT_CLASSIFICATION	0.9987651493508609	WITHOUT_CLASSIFICATION	0.0012348506491391094	DESIGN
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999916952048944	WITHOUT_CLASSIFICATION	8.30479510559482E-6	DESIGN
add the main query	WITHOUT_CLASSIFICATION	0.9999371004199646	WITHOUT_CLASSIFICATION	6.289958003535094E-5	DESIGN
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.999983376392329	WITHOUT_CLASSIFICATION	1.6623607670984963E-5	DESIGN
this assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999988495628624	WITHOUT_CLASSIFICATION	1.1504371375953644E-5	DESIGN
you may still have other resultsets or update counts left to process here but you can't do it now or the resultset you just got will be closed	WITHOUT_CLASSIFICATION	0.9999998620640076	WITHOUT_CLASSIFICATION	1.3793599239885243E-7	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996373865783718	WITHOUT_CLASSIFICATION	3.6261342162824086E-4	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9997908774958251	WITHOUT_CLASSIFICATION	2.0912250417500714E-4	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.999191030870568	WITHOUT_CLASSIFICATION	8.08969129431926E-4	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9933113114849479	WITHOUT_CLASSIFICATION	0.00668868851505217	DESIGN
register the type of the out param - an oracle specific type	WITHOUT_CLASSIFICATION	0.9998976623822429	WITHOUT_CLASSIFICATION	1.0233761775714002E-4	DESIGN
features which change between 8i 9i and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999306852911185	WITHOUT_CLASSIFICATION	6.931470888155359E-5	DESIGN
features which remain constant across 8i 9i and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941707168125	WITHOUT_CLASSIFICATION	5.82928318741878E-6	DESIGN
binary %stream character %stream	WITHOUT_CLASSIFICATION	0.9999496697777978	WITHOUT_CLASSIFICATION	5.03302222023053E-5	DESIGN
getdefaultproperties().setproperty(environment.statement_batch_size no_batch)	WITHOUT_CLASSIFICATION	0.9995689692001622	WITHOUT_CLASSIFICATION	4.310307998376784E-4	DESIGN
hibernate impelemnts cast in dialect.java	WITHOUT_CLASSIFICATION	0.9944329350347784	WITHOUT_CLASSIFICATION	0.005567064965221565	DESIGN
aggregate functions shouldn't be registered right? registerfunction( "list" new standardsqlfunction("list"hibernate.string) ) stopped on $list	WITHOUT_CLASSIFICATION	0.9551274668651825	DESIGN	0.04487253313481754	WITHOUT_CLASSIFICATION
ddl support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991566115133599	WITHOUT_CLASSIFICATION	8.433884866401984E-4	DESIGN
below is for cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9997765252795225	WITHOUT_CLASSIFICATION	2.234747204773575E-4	DESIGN
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9663682303765723	WITHOUT_CLASSIFICATION	0.033631769623427815	DESIGN
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9932425937426835	WITHOUT_CLASSIFICATION	0.006757406257316449	DESIGN
the syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9802613450896666	WITHOUT_CLASSIFICATION	0.01973865491033343	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9996356951231448	WITHOUT_CLASSIFICATION	3.643048768552535E-4	DESIGN
identity support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994258933728275	WITHOUT_CLASSIFICATION	5.741066271725456E-4	DESIGN
sequence support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998434119220354	WITHOUT_CLASSIFICATION	1.5658807796465108E-4	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9849309588825195	WITHOUT_CLASSIFICATION	0.0150690411174806	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9996356951231448	WITHOUT_CLASSIFICATION	3.643048768552535E-4	DESIGN
the syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9906723452612461	WITHOUT_CLASSIFICATION	0.009327654738753743	DESIGN
completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9993802396322259	WITHOUT_CLASSIFICATION	6.197603677742204E-4	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994125199435533	WITHOUT_CLASSIFICATION	5.87480056446703E-4	DESIGN
limit support (ala top) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999462283215451	WITHOUT_CLASSIFICATION	5.3771678454880564E-5	DESIGN
intersystems cache' does not current support "select for update" syntax set your transaction mode to read_committed before using	WITHOUT_CLASSIFICATION	0.9985286917978882	WITHOUT_CLASSIFICATION	0.001471308202111774	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996373865783718	WITHOUT_CLASSIFICATION	3.6261342162824086E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996373865783718	WITHOUT_CLASSIFICATION	3.6261342162824086E-4	DESIGN
<string>	WITHOUT_CLASSIFICATION	0.9997708817632719	WITHOUT_CLASSIFICATION	2.2911823672806778E-4	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9954670213852339	WITHOUT_CLASSIFICATION	0.004532978614766089	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999238431468733	WITHOUT_CLASSIFICATION	7.61568531267073E-4	DESIGN
the keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.8571598249131727	WITHOUT_CLASSIFICATION	0.14284017508682725	DESIGN
does the limit clause come at the start of the select statement rather than at the end?	WITHOUT_CLASSIFICATION	0.9993661234474034	WITHOUT_CLASSIFICATION	6.338765525966228E-4	DESIGN
does the limit clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9998923726169209	WITHOUT_CLASSIFICATION	1.0762738307907925E-4	DESIGN
the name of the sql function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.999481342703095	WITHOUT_CLASSIFICATION	5.186572969050461E-4	DESIGN
create an outerjoingenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9983511288476301	WITHOUT_CLASSIFICATION	0.0016488711523698321	DESIGN
the keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9994888693257382	WITHOUT_CLASSIFICATION	5.111306742617526E-4	DESIGN
registerfunction( "trim" new standardsqlfunction( "trim" hibernate.string ) )	WITHOUT_CLASSIFICATION	0.9984198226015588	WITHOUT_CLASSIFICATION	0.0015801773984410847	DESIGN
skip the from keyword in params	WITHOUT_CLASSIFICATION	0.9998950675384917	WITHOUT_CLASSIFICATION	1.049324615083538E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9994785270872577	WITHOUT_CLASSIFICATION	5.214729127423224E-4	DESIGN
potentialtrimcharacterargindex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999895763247706	WITHOUT_CLASSIFICATION	1.042367522944371E-5	DESIGN
sqlfunction implementation	WITHOUT_CLASSIFICATION	0.9997083784363144	WITHOUT_CLASSIFICATION	2.9162156368556973E-4	DESIGN
conceivable that the dialect ctor could throw hibernateexceptions so don't re-wrap	WITHOUT_CLASSIFICATION	0.9921272744439591	WITHOUT_CLASSIFICATION	0.007872725556040872	DESIGN
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.999880504941314	WITHOUT_CLASSIFICATION	1.194950586860473E-4	DESIGN
register resolvers set via environment property	WITHOUT_CLASSIFICATION	0.9914719870592732	WITHOUT_CLASSIFICATION	0.008528012940726687	DESIGN
kept for backward compatibility until after the 3.1beta5 release of ha	WITHOUT_CLASSIFICATION	0.9999919923582083	WITHOUT_CLASSIFICATION	8.007641791646003E-6	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9996893260933928	WITHOUT_CLASSIFICATION	3.1067390660722373E-4	DESIGN
the cascadingaction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997593371993875	WITHOUT_CLASSIFICATION	2.4066280061239538E-4	DESIGN
the cascadingaction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998281735377549	WITHOUT_CLASSIFICATION	1.7182646224518842E-4	DESIGN
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999032037171074	WITHOUT_CLASSIFICATION	9.679628289266169E-5	DESIGN
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9987782625721691	WITHOUT_CLASSIFICATION	0.0012217374278309199	DESIGN
(lockmode) anything	WITHOUT_CLASSIFICATION	0.9998809976186388	WITHOUT_CLASSIFICATION	1.1900238136128012E-4	DESIGN
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998575126122612	WITHOUT_CLASSIFICATION	1.424873877387682E-4	DESIGN
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999053566504089	WITHOUT_CLASSIFICATION	9.464334959103392E-5	DESIGN
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998786959114575	WITHOUT_CLASSIFICATION	1.21304088542424E-4	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999887695595717	WITHOUT_CLASSIFICATION	1.1230440428276016E-5	DESIGN
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9990527194006603	WITHOUT_CLASSIFICATION	9.472805993397149E-4	DESIGN
for deprecated saveorupdatecopy()	WITHOUT_CLASSIFICATION	0.9934208730121551	WITHOUT_CLASSIFICATION	0.00657912698784484	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998789501794403	WITHOUT_CLASSIFICATION	1.2104982055979633E-4	DESIGN
a proxy cannot be transient and it breaks foreignkeys.istransient	WITHOUT_CLASSIFICATION	0.9994969140574493	WITHOUT_CLASSIFICATION	5.030859425507148E-4	DESIGN
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999249674731079	WITHOUT_CLASSIFICATION	7.503252689213486E-5	DESIGN
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997570353647415	WITHOUT_CLASSIFICATION	2.4296463525851054E-4	DESIGN
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9993348409112571	WITHOUT_CLASSIFICATION	6.651590887427621E-4	DESIGN
actually the semantics of the next three are really "bag" note that unlike objects collection insertions updates deletions are not really remembered between flushes. we just re-use the same lists for convenience.	WITHOUT_CLASSIFICATION	0.7165222319532122	DESIGN	0.28347776804678776	WITHOUT_CLASSIFICATION
add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9998183686390897	WITHOUT_CLASSIFICATION	1.8163136091028413E-4	DESIGN
continue loop	WITHOUT_CLASSIFICATION	0.9999657562274776	WITHOUT_CLASSIFICATION	3.42437725224049E-5	DESIGN
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9987216058148116	WITHOUT_CLASSIFICATION	0.0012783941851882922	DESIGN
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9998990773909257	WITHOUT_CLASSIFICATION	1.0092260907431875E-4	DESIGN
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999943755666537	WITHOUT_CLASSIFICATION	5.624433346323774E-6	DESIGN
the map of batch numbers to entityinsertaction lists	WITHOUT_CLASSIFICATION	0.9997636284971558	WITHOUT_CLASSIFICATION	2.3637150284417489E-4	DESIGN
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9993536247707286	WITHOUT_CLASSIFICATION	6.463752292713299E-4	DESIGN
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999451173648212	WITHOUT_CLASSIFICATION	5.4882635178886593E-5	DESIGN
remove the current element from insertions. it will be added back later.	WITHOUT_CLASSIFICATION	0.9999937185566631	WITHOUT_CLASSIFICATION	6.281443336859312E-6	DESIGN
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9995250019327329	WITHOUT_CLASSIFICATION	4.749980672671215E-4	DESIGN
there is already an existing batch for this type of entity. check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9994978830378367	WITHOUT_CLASSIFICATION	5.021169621633195E-4	DESIGN
now rebuild the insertions list. there is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9996246418295099	WITHOUT_CLASSIFICATION	3.7535817049012463E-4	DESIGN
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9922543141710959	WITHOUT_CLASSIFICATION	0.007745685828904037	DESIGN
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9998912976505544	WITHOUT_CLASSIFICATION	1.0870234944559794E-4	DESIGN
find the batch number associated with the current association if any.	WITHOUT_CLASSIFICATION	0.9999576852750406	WITHOUT_CLASSIFICATION	4.231472495939009E-5	DESIGN
create a new batch for this type. the batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9948363556346204	WITHOUT_CLASSIFICATION	0.0051636443653796165	DESIGN
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9997743740248806	WITHOUT_CLASSIFICATION	2.2562597511938657E-4	DESIGN
since this entity will now be processed in the latest possible batch we can be assured that it will come after all other associations there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9836116284288854	WITHOUT_CLASSIFICATION	0.016388371571114647	DESIGN
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999268307142423	WITHOUT_CLASSIFICATION	7.31692857577829E-5	DESIGN
not really necessary but good for consistency	WITHOUT_CLASSIFICATION	0.9540640785294228	WITHOUT_CLASSIFICATION	0.04593592147057717	DESIGN
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999032440630243	WITHOUT_CLASSIFICATION	9.675593697568446E-5	DESIGN
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9982665527883574	WITHOUT_CLASSIFICATION	0.0017334472116426536	DESIGN
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9974522099258547	WITHOUT_CLASSIFICATION	0.0025477900741452332	DESIGN
loaded entity instances by entityuniquekey	WITHOUT_CLASSIFICATION	0.9994595344802726	WITHOUT_CLASSIFICATION	5.404655197274599E-4	DESIGN
identity map of entityentry instances by the entity instance	WITHOUT_CLASSIFICATION	0.9999883693659232	WITHOUT_CLASSIFICATION	1.1630634076736358E-5	DESIGN
entity proxies by entitykey	WITHOUT_CLASSIFICATION	0.9985814196995317	WITHOUT_CLASSIFICATION	0.001418580300468276	DESIGN
snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9994213983475134	WITHOUT_CLASSIFICATION	5.786016524864727E-4	DESIGN
identity map of array holder arrayholder instances by the array instance	WITHOUT_CLASSIFICATION	0.9999963702686074	WITHOUT_CLASSIFICATION	3.629731392570121E-6	DESIGN
collection wrappers by the collectionkey key=collectionkey value=persistentcollection	WITHOUT_CLASSIFICATION	0.9998117486331457	WITHOUT_CLASSIFICATION	1.8825136685417154E-4	DESIGN
set of entitykeys of deleted objects	WITHOUT_CLASSIFICATION	0.9998840045745385	WITHOUT_CLASSIFICATION	1.1599542546141991E-4	DESIGN
properties that we have tried to load and not found in the database	WITHOUT_CLASSIFICATION	0.999577533540149	WITHOUT_CLASSIFICATION	4.224664598509952E-4	DESIGN
a list of collection wrappers that were instantiating during result set processing that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999438560989043	WITHOUT_CLASSIFICATION	5.614390109572876E-5	DESIGN
a container for collections we load up when the owning entity is not yet loaded for now this is purely transient!	WITHOUT_CLASSIFICATION	0.98318339588853	WITHOUT_CLASSIFICATION	0.01681660411147007	DESIGN
downgrade locks	WITHOUT_CLASSIFICATION	0.9996523175406852	WITHOUT_CLASSIFICATION	3.476824593148832E-4	DESIGN
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999519026543328	WITHOUT_CLASSIFICATION	4.8097345667367665E-5	DESIGN
unwrap the object	WITHOUT_CLASSIFICATION	0.9999036388836208	WITHOUT_CLASSIFICATION	9.636111637921239E-5	DESIGN
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9998643495056381	WITHOUT_CLASSIFICATION	1.356504943618106E-4	DESIGN
return the proxied object	WITHOUT_CLASSIFICATION	0.9992525093667494	WITHOUT_CLASSIFICATION	7.474906332506615E-4	DESIGN
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999978037181373	WITHOUT_CLASSIFICATION	2.1962818626774757E-6	DESIGN
early exit	WITHOUT_CLASSIFICATION	0.9999583108493363	WITHOUT_CLASSIFICATION	4.168915066369202E-5	DESIGN
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9980663519097901	WITHOUT_CLASSIFICATION	0.0019336480902100027	DESIGN
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9922378942718276	WITHOUT_CLASSIFICATION	0.007762105728172391	DESIGN
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.8323522294073152	DESIGN	0.16764777059268465	WITHOUT_CLASSIFICATION
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999723390525841	WITHOUT_CLASSIFICATION	2.7660947415941407E-5	DESIGN
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9957613566574339	WITHOUT_CLASSIFICATION	0.004238643342566065	DESIGN
public boolean isnonexistant(entitykey key) {return nonexistantentitykeys.contains(key)}	WITHOUT_CLASSIFICATION	0.9985995771039645	WITHOUT_CLASSIFICATION	0.0014004228960355454	DESIGN
public boolean isnonexistant(entityuniquekey key) {return nonexistententityuniquekeys.contains(key)}	WITHOUT_CLASSIFICATION	0.9985995771039645	WITHOUT_CLASSIFICATION	0.0014004228960355454	DESIGN
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9971763252793117	WITHOUT_CLASSIFICATION	0.002823674720688378	DESIGN
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9928680504219524	WITHOUT_CLASSIFICATION	0.007131949578047648	DESIGN
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9956883576373621	WITHOUT_CLASSIFICATION	0.004311642362637924	DESIGN
otherwise the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999988427433336	WITHOUT_CLASSIFICATION	1.157256666408333E-6	DESIGN
adds remove as a sort-of alias for delete	WITHOUT_CLASSIFICATION	0.9998486804260529	WITHOUT_CLASSIFICATION	1.5131957394722858E-4	DESIGN
bad cast	WITHOUT_CLASSIFICATION	0.998719198404582	WITHOUT_CLASSIFICATION	0.0012808015954180166	DESIGN
return lhspersister.getsubclasspropertycolumnnames(property)	WITHOUT_CLASSIFICATION	0.9994572206984634	WITHOUT_CLASSIFICATION	5.427793015365254E-4	DESIGN
property-refs for associations defined on a component are not supported so no need to slice	WITHOUT_CLASSIFICATION	0.9977876509520748	WITHOUT_CLASSIFICATION	0.0022123490479252703	DESIGN
if there is no property-ref assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999885081203653	WITHOUT_CLASSIFICATION	1.1491879634642012E-5	DESIGN
handle a property-ref	WITHOUT_CLASSIFICATION	0.9945345884403914	WITHOUT_CLASSIFICATION	0.005465411559608532	DESIGN
nativesqlqueryreturn	WITHOUT_CLASSIFICATION	0.9996356951231448	WITHOUT_CLASSIFICATION	3.643048768552535E-4	DESIGN
final boolean forcecacherefresh	WITHOUT_CLASSIFICATION	0.9999325177084407	WITHOUT_CLASSIFICATION	6.74822915592257E-5	DESIGN
why is all others non final ?	WITHOUT_CLASSIFICATION	0.8541570805879384	WITHOUT_CLASSIFICATION	0.14584291941206165	DESIGN
this.forcecacherefresh = forcecacherefresh	WITHOUT_CLASSIFICATION	0.9998963213616008	WITHOUT_CLASSIFICATION	1.0367863839925279E-4	DESIGN
hella important optimization!!!	WITHOUT_CLASSIFICATION	0.9988467218279949	WITHOUT_CLASSIFICATION	0.0011532781720050562	DESIGN
return that.type.equals(type) && equalshelper.equals(that.value value)	WITHOUT_CLASSIFICATION	0.9987852040540002	WITHOUT_CLASSIFICATION	0.0012147959459998456	DESIGN
must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9998037433294262	WITHOUT_CLASSIFICATION	1.9625667057382063E-4	DESIGN
take a snapshot	WITHOUT_CLASSIFICATION	0.9994320774350939	WITHOUT_CLASSIFICATION	5.679225649060873E-4	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9982843281505541	WITHOUT_CLASSIFICATION	0.0017156718494459329	DESIGN
the owning entity may have been deleted and its identifier unset due to identifier-rollback in which case try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.99994864189009	WITHOUT_CLASSIFICATION	5.135810990987281E-5	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9990296959881277	WITHOUT_CLASSIFICATION	9.703040118722531E-4	DESIGN
we've been here before	WITHOUT_CLASSIFICATION	0.9997494367252724	WITHOUT_CLASSIFICATION	2.505632747276189E-4	DESIGN
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999104378637543	WITHOUT_CLASSIFICATION	8.956213624569673E-5	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9990296959881277	WITHOUT_CLASSIFICATION	9.703040118722531E-4	DESIGN
if either its role changed	WITHOUT_CLASSIFICATION	0.99997394210255	WITHOUT_CLASSIFICATION	2.6057897450080797E-5	DESIGN
or its key changed	WITHOUT_CLASSIFICATION	0.9999933235376232	WITHOUT_CLASSIFICATION	6.676462376872188E-6	DESIGN
we will need to create new entries	WITHOUT_CLASSIFICATION	0.999776490540822	WITHOUT_CLASSIFICATION	2.235094591781023E-4	DESIGN
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9970536557080337	WITHOUT_CLASSIFICATION	0.0029463442919662308	DESIGN
force initialize!	WITHOUT_CLASSIFICATION	0.999780320631575	WITHOUT_CLASSIFICATION	2.1967936842492967E-4	DESIGN
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999966856657457	WITHOUT_CLASSIFICATION	3.314334254251011E-6	DESIGN
attributes maintained between flush cycles	WITHOUT_CLASSIFICATION	0.995607704284918	WITHOUT_CLASSIFICATION	0.004392295715082012	DESIGN
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999067685907732	WITHOUT_CLASSIFICATION	9.323140922682115E-5	DESIGN
allow the collectionsnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9986712203742257	WITHOUT_CLASSIFICATION	0.0013287796257743013	DESIGN
attributes used only during flush cycle	WITHOUT_CLASSIFICATION	0.9647082042888608	WITHOUT_CLASSIFICATION	0.035291795711139204	DESIGN
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999879388693165	WITHOUT_CLASSIFICATION	1.2061130683489865E-5	DESIGN
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999517074595409	WITHOUT_CLASSIFICATION	4.8292540459089176E-5	DESIGN
during flush we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9387672037225518	WITHOUT_CLASSIFICATION	0.0612327962774482	DESIGN
if we instantiate a collection during the flush() process we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999950115888346	WITHOUT_CLASSIFICATION	4.988411165447507E-6	DESIGN
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.992600785024045	WITHOUT_CLASSIFICATION	0.007399214975954982	DESIGN
a newly wrapped collection is not dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.6027398092347778	DESIGN	0.3972601907652222	WITHOUT_CLASSIFICATION
collection.cleardirty()	WITHOUT_CLASSIFICATION	0.9990988684490842	WITHOUT_CLASSIFICATION	9.011315509158068E-4	DESIGN
collection.cleardirty()	WITHOUT_CLASSIFICATION	0.9990988684490842	WITHOUT_CLASSIFICATION	9.011315509158068E-4	DESIGN
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999273093624207	WITHOUT_CLASSIFICATION	7.269063757930424E-4	DESIGN
optimization	WITHOUT_CLASSIFICATION	0.9999170701856772	WITHOUT_CLASSIFICATION	8.29298143228018E-5	DESIGN
optimization optimization	WITHOUT_CLASSIFICATION	0.9997947826497775	WITHOUT_CLASSIFICATION	2.052173502225044E-4	DESIGN
re-snapshot	WITHOUT_CLASSIFICATION	0.9996356951231448	WITHOUT_CLASSIFICATION	3.643048768552535E-4	DESIGN
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9997798124422372	WITHOUT_CLASSIFICATION	2.2018755776289956E-4	DESIGN
note this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.989177054323973	WITHOUT_CLASSIFICATION	0.010822945676027112	DESIGN
memory optimization	WITHOUT_CLASSIFICATION	0.9999601497491136	WITHOUT_CLASSIFICATION	3.9850250886448775E-5	DESIGN
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9998703595739853	WITHOUT_CLASSIFICATION	1.2964042601464182E-4	DESIGN
copied from session	WITHOUT_CLASSIFICATION	0.9950288383288118	WITHOUT_CLASSIFICATION	0.004971161671188121	DESIGN
this should not happen since the dtd prevents it	WITHOUT_CLASSIFICATION	0.9995360496282567	WITHOUT_CLASSIFICATION	4.6395037174334984E-4	DESIGN
joinprocessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the sql ast. 'hasfiltercondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999740999923941	WITHOUT_CLASSIFICATION	2.590000760598472E-5	DESIGN
the current join represents the join between a many-to-many association table and its "target" table. here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999973590769933	WITHOUT_CLASSIFICATION	2.6409230067790245E-6	DESIGN
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9994941560377162	WITHOUT_CLASSIFICATION	5.058439622837223E-4	DESIGN
values is not null and is checkable we'll look deeper	WITHOUT_CLASSIFICATION	0.9992492088089668	WITHOUT_CLASSIFICATION	7.507911910330585E-4	DESIGN
for non null args check for components and elements containing components	WITHOUT_CLASSIFICATION	0.99991345396935	WITHOUT_CLASSIFICATION	8.654603064995009E-5	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9996893260933928	WITHOUT_CLASSIFICATION	3.1067390660722373E-4	DESIGN
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9997513011282736	WITHOUT_CLASSIFICATION	2.486988717263663E-4	DESIGN
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.999785505848341	WITHOUT_CLASSIFICATION	2.1449415165897455E-4	DESIGN
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9994237917753717	WITHOUT_CLASSIFICATION	5.762082246284167E-4	DESIGN
do the test	WITHOUT_CLASSIFICATION	0.9999894685381897	WITHOUT_CLASSIFICATION	1.0531461810375163E-5	DESIGN
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999787881261937	WITHOUT_CLASSIFICATION	2.12118738063163E-5	DESIGN
unwrap it	WITHOUT_CLASSIFICATION	0.9998869035583747	WITHOUT_CLASSIFICATION	1.130964416252126E-4	DESIGN
see if the entity is already bound to this session if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9777213936792603	WITHOUT_CLASSIFICATION	0.022278606320739736	DESIGN
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999409850317186	WITHOUT_CLASSIFICATION	5.901496828131053E-5	DESIGN
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9993292656185303	WITHOUT_CLASSIFICATION	6.707343814695994E-4	DESIGN
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9981652776156865	WITHOUT_CLASSIFICATION	0.0018347223843134652	DESIGN
we use the assumed value if there is one to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999032411139576	WITHOUT_CLASSIFICATION	9.675888604242207E-5	DESIGN
hit the database after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.6762644240150237	WITHOUT_CLASSIFICATION	0.3237355759849762	DESIGN
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context so make some deeper checks	WITHOUT_CLASSIFICATION	0.9991974469723568	WITHOUT_CLASSIFICATION	8.025530276432358E-4	DESIGN
int count = 0	WITHOUT_CLASSIFICATION	0.9999932158416898	WITHOUT_CLASSIFICATION	6.784158310267181E-6	DESIGN
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999930205881097	WITHOUT_CLASSIFICATION	6.979411890407568E-6	DESIGN
checkforend = false	WITHOUT_CLASSIFICATION	0.9999805943951638	WITHOUT_CLASSIFICATION	1.940560483623782E-5	DESIGN
count++	WITHOUT_CLASSIFICATION	0.9997699770785218	WITHOUT_CLASSIFICATION	2.300229214783216E-4	DESIGN
end of array start filling again from start	WITHOUT_CLASSIFICATION	0.9999622738580113	WITHOUT_CLASSIFICATION	3.772614198870163E-5	DESIGN
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9996595859248814	WITHOUT_CLASSIFICATION	3.4041407511861677E-4	DESIGN
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999611580385196	WITHOUT_CLASSIFICATION	3.884196148048241E-5	DESIGN
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999804646663218	WITHOUT_CLASSIFICATION	1.9535333678170488E-5	DESIGN
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9996661239108842	WITHOUT_CLASSIFICATION	3.3387608911586046E-4	DESIGN
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9998703043508492	WITHOUT_CLASSIFICATION	1.2969564915073388E-4	DESIGN
ignore this row of results! note the early exit	WITHOUT_CLASSIFICATION	0.9999522309982833	WITHOUT_CLASSIFICATION	4.776900171664236E-5	DESIGN
initialize this collection	WITHOUT_CLASSIFICATION	0.9895026219131277	WITHOUT_CLASSIFICATION	0.010497378086872365	DESIGN
create one	WITHOUT_CLASSIFICATION	0.9998438616689621	WITHOUT_CLASSIFICATION	1.5613833103788398E-4	DESIGN
warning can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.999283106500394	WITHOUT_CLASSIFICATION	7.168934996059992E-4	DESIGN
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.999941032568161	WITHOUT_CLASSIFICATION	5.8967431838908585E-5	DESIGN
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.993992871973164	WITHOUT_CLASSIFICATION	0.006007128026835952	DESIGN
some filters affecting the collection are enabled on the session so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9937927999172114	WITHOUT_CLASSIFICATION	0.006207200082788659	DESIGN
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9949615610367565	WITHOUT_CLASSIFICATION	0.005038438963243501	DESIGN
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998392673445196	WITHOUT_CLASSIFICATION	1.6073265548052825E-4	DESIGN
collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999107618765292	WITHOUT_CLASSIFICATION	8.923812347080001E-4	DESIGN
simple cache of param metadata based on query string. ideally the original "user-supplied query" string should be used to retreive this metadata (i.e. not the para-list-expanded query string) to avoid unnecessary cache entries. used solely for caching param metadata for native-sql queries see getsqlparametermetadata() for a discussion as to why	WITHOUT_CLASSIFICATION	0.7470723540846917	WITHOUT_CLASSIFICATION	0.25292764591530825	DESIGN
the cache of the actual plans	WITHOUT_CLASSIFICATION	0.9996419943401705	WITHOUT_CLASSIFICATION	3.5800565982950966E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9994785270872577	WITHOUT_CLASSIFICATION	5.214729127423224E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9994785270872577	WITHOUT_CLASSIFICATION	5.214729127423224E-4	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999982873409439	WITHOUT_CLASSIFICATION	1.7126590561372103E-6	DESIGN
for native-sql queries the param metadata is determined outside any relation to a query plan because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9948312816369246	WITHOUT_CLASSIFICATION	0.005168718363075448	DESIGN
don't care	WITHOUT_CLASSIFICATION	0.9991886711998975	WITHOUT_CLASSIFICATION	8.113288001025108E-4	DESIGN
recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995002909711166	WITHOUT_CLASSIFICATION	4.997090288834156E-4	DESIGN
don't care	WITHOUT_CLASSIFICATION	0.9991886711998975	WITHOUT_CLASSIFICATION	8.113288001025108E-4	DESIGN
note firstrow is zero-based	WITHOUT_CLASSIFICATION	0.9960277466469003	WITHOUT_CLASSIFICATION	0.0039722533530996895	DESIGN
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9970697004701983	WITHOUT_CLASSIFICATION	0.0029302995298017874	DESIGN
named parameter	WITHOUT_CLASSIFICATION	0.9994410761065486	WITHOUT_CLASSIFICATION	5.589238934513644E-4	DESIGN
could be either an ordinal or jpa-positional parameter	WITHOUT_CLASSIFICATION	0.9958839818469545	WITHOUT_CLASSIFICATION	0.004116018153045569	DESIGN
a peek ahead showed this as an jpa-positional parameter	WITHOUT_CLASSIFICATION	0.9982516348910989	WITHOUT_CLASSIFICATION	0.001748365108901051	DESIGN
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9988734415105873	WITHOUT_CLASSIFICATION	0.0011265584894126499	DESIGN
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9996595509058088	WITHOUT_CLASSIFICATION	3.4044909419122583E-4	DESIGN
perform the actual work	WITHOUT_CLASSIFICATION	0.9993090045682267	WITHOUT_CLASSIFICATION	6.909954317732318E-4	DESIGN
if everything went ok commit the transaction and close the obtained connection handle	WITHOUT_CLASSIFICATION	0.9999997378181749	WITHOUT_CLASSIFICATION	2.621818250442436E-7	DESIGN
at some point the processing went bad so we need to 1) make sure the connection handle gets released 2) try to cleanup the jta context as much as possible	WITHOUT_CLASSIFICATION	0.9937638907212915	WITHOUT_CLASSIFICATION	0.006236109278708495	DESIGN
finally handle the exception	WITHOUT_CLASSIFICATION	0.9992700889121392	WITHOUT_CLASSIFICATION	7.299110878608271E-4	DESIGN
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9835024942057392	WITHOUT_CLASSIFICATION	0.016497505794260747	DESIGN
saveorupdatecopy() is deprecated!	WITHOUT_CLASSIFICATION	0.999661783669572	WITHOUT_CLASSIFICATION	3.382163304279418E-4	DESIGN
collectionpersister should not be null but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.8732120355170823	WITHOUT_CLASSIFICATION	0.12678796448291763	DESIGN
otherwise a null or brand new collection this will also (inefficiently) handle arrays which have no snapshot so we can't do any better processarrayornewcollection(collection type)	WITHOUT_CLASSIFICATION	0.9762038568852737	WITHOUT_CLASSIFICATION	0.023796143114726352	DESIGN
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9961061773908597	WITHOUT_CLASSIFICATION	0.0038938226091402247	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9998284956419117	WITHOUT_CLASSIFICATION	1.7150435808827556E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9998284956419117	WITHOUT_CLASSIFICATION	1.7150435808827556E-4	DESIGN
force a substitution!	WITHOUT_CLASSIFICATION	0.9988314028868469	WITHOUT_CLASSIFICATION	0.0011685971131530865	DESIGN
the user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9983442258739055	WITHOUT_CLASSIFICATION	0.001655774126094579	DESIGN
the database now holds a lock + the object is flushed from the cache so release the soft lock	WITHOUT_CLASSIFICATION	0.9992632909000072	WITHOUT_CLASSIFICATION	7.367090999927795E-4	DESIGN
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999879064211588	WITHOUT_CLASSIFICATION	1.209357884133777E-5	DESIGN
search for collections by reachability updating their role. we don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9997382786851545	WITHOUT_CLASSIFICATION	2.617213148454017E-4	DESIGN
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9970916414548587	WITHOUT_CLASSIFICATION	0.0029083585451412782	DESIGN
note we need to do the wrap here even if its not "dirty" because collections need wrapping but changes to _them_ don't dirty the container. also for versioned data we need to wrap before calling searchfordirtycollections	WITHOUT_CLASSIFICATION	0.9239244188578927	WITHOUT_CLASSIFICATION	0.07607558114210723	DESIGN
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.999686873418839	WITHOUT_CLASSIFICATION	3.131265811610438E-4	DESIGN
grab its current state	WITHOUT_CLASSIFICATION	0.9999459036857459	WITHOUT_CLASSIFICATION	5.4096314254193867E-5	DESIGN
schedule the update note that we intentionally do _not_ pass in currentpersistentstate!	WITHOUT_CLASSIFICATION	0.9997571391188781	WITHOUT_CLASSIFICATION	2.428608811217985E-4	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9997632330273258	WITHOUT_CLASSIFICATION	2.367669726741846E-4	DESIGN
give the interceptor a chance to process property values if the properties were modified by the interceptor we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999726967105016	WITHOUT_CLASSIFICATION	2.730328949836274E-5	DESIGN
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999896233016228	WITHOUT_CLASSIFICATION	1.0376698377206543E-5	DESIGN
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999039248695192	WITHOUT_CLASSIFICATION	9.60751304807619E-5	DESIGN
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.99970613360429	WITHOUT_CLASSIFICATION	2.9386639571011306E-4	DESIGN
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.999415600838201	WITHOUT_CLASSIFICATION	5.843991617988878E-4	DESIGN
give the interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9974775145801758	WITHOUT_CLASSIFICATION	0.002522485419824166	DESIGN
now we might need to recalculate the dirtyproperties array	WITHOUT_CLASSIFICATION	0.9955393107672632	WITHOUT_CLASSIFICATION	0.004460689232736757	DESIGN
use the current version	WITHOUT_CLASSIFICATION	0.9978411589782229	WITHOUT_CLASSIFICATION	0.0021588410217771425	DESIGN
interceptor returned null so do the dirtycheck ourself if possible	WITHOUT_CLASSIFICATION	0.9999591221271784	WITHOUT_CLASSIFICATION	4.0877872821645304E-5	DESIGN
object loaded by update()	WITHOUT_CLASSIFICATION	0.9992786535825382	WITHOUT_CLASSIFICATION	7.213464174617743E-4	DESIGN
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9998295818054825	WITHOUT_CLASSIFICATION	1.7041819451748562E-4	DESIGN
dirty check against the database snapshot if possible/necessary	WITHOUT_CLASSIFICATION	0.9999433044753469	WITHOUT_CLASSIFICATION	5.669552465304485E-5	DESIGN
the interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.5929396408102156	WITHOUT_CLASSIFICATION	0.4070603591897844	DESIGN
even process null collections	WITHOUT_CLASSIFICATION	0.9994423267517331	WITHOUT_CLASSIFICATION	5.576732482669601E-4	DESIGN
get the id from the object	WITHOUT_CLASSIFICATION	0.9990465679597383	WITHOUT_CLASSIFICATION	9.534320402615928E-4	DESIGN
always do an insert and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9998414686370142	WITHOUT_CLASSIFICATION	1.5853136298584345E-4	DESIGN
what is the version on the database?	WITHOUT_CLASSIFICATION	0.994001992034091	WITHOUT_CLASSIFICATION	0.005998007965908994	DESIGN
/ hhh-2378	WITHOUT_CLASSIFICATION	0.9998946914420034	WITHOUT_CLASSIFICATION	1.0530855799670046E-4	DESIGN
will result in a sql update	WITHOUT_CLASSIFICATION	0.9997886519937073	WITHOUT_CLASSIFICATION	2.113480062928023E-4	DESIGN
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9997454599256725	WITHOUT_CLASSIFICATION	2.545400743274337E-4	DESIGN
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9998674956186402	WITHOUT_CLASSIFICATION	1.325043813598382E-4	DESIGN
refresh() does not pass an entityname	WITHOUT_CLASSIFICATION	0.9998583890367131	WITHOUT_CLASSIFICATION	1.4161096328700886E-4	DESIGN
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9740858888092346	WITHOUT_CLASSIFICATION	0.02591411119076535	DESIGN
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9994031135363404	WITHOUT_CLASSIFICATION	5.968864636597015E-4	DESIGN
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9998057060059109	WITHOUT_CLASSIFICATION	1.942939940891259E-4	DESIGN
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999410254130364	WITHOUT_CLASSIFICATION	5.8974586963526836E-5	DESIGN
this object was already loaded	WITHOUT_CLASSIFICATION	0.9873035904066331	WITHOUT_CLASSIFICATION	0.01269640959336693	DESIGN
entity was found in second-level cache	WITHOUT_CLASSIFICATION	0.9991817537974457	WITHOUT_CLASSIFICATION	8.182462025543031E-4	DESIGN
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9996914830836092	WITHOUT_CLASSIFICATION	3.0851691639079116E-4	DESIGN
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999659102443988	WITHOUT_CLASSIFICATION	3.408975560125401E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998156984352404	WITHOUT_CLASSIFICATION	1.8430156475962033E-4	DESIGN
some statistics	WITHOUT_CLASSIFICATION	0.9995092202528618	WITHOUT_CLASSIFICATION	4.90779747138146E-4	DESIGN
safe from concurrent modification because of how entrylist() is implemented on identitymap	WITHOUT_CLASSIFICATION	0.9995968990304176	WITHOUT_CLASSIFICATION	4.031009695823439E-4	DESIGN
initialize dirty flags for arrays + collections with composite elements and reset reached doupdate etc.	WITHOUT_CLASSIFICATION	0.9998777490639373	WITHOUT_CLASSIFICATION	1.2225093606266875E-4	DESIGN
among other things updatereachables() will recursively load all collections that are moving roles. this might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9884275894606568	WITHOUT_CLASSIFICATION	0.011572410539343101	DESIGN
so this needs to be safe from concurrent modification problems. it is safe because of how identitymap implements entryset()	WITHOUT_CLASSIFICATION	0.9880871338993256	WITHOUT_CLASSIFICATION	0.01191286610067436	DESIGN
update the status of the object and if necessary schedule an update	WITHOUT_CLASSIFICATION	0.9996440494508508	WITHOUT_CLASSIFICATION	3.559505491491841E-4	DESIGN
schedule updates to collections	WITHOUT_CLASSIFICATION	0.999918503501543	WITHOUT_CLASSIFICATION	8.149649845708649E-5	DESIGN
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9974650893177299	WITHOUT_CLASSIFICATION	0.002534910682269972	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998156984352404	WITHOUT_CLASSIFICATION	1.8430156475962033E-4	DESIGN
the database has changed now so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999174586394107	WITHOUT_CLASSIFICATION	8.254136058931201E-5	DESIGN
if the collection is dereferenced remove from the session cache iter.remove() does not work since the entryset is not backed by the set	WITHOUT_CLASSIFICATION	0.9970181626364063	WITHOUT_CLASSIFICATION	0.0029818373635936996	DESIGN
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999896237667132	WITHOUT_CLASSIFICATION	1.0376233286780969E-5	DESIGN
get a snapshot	WITHOUT_CLASSIFICATION	0.9994466444166435	WITHOUT_CLASSIFICATION	5.533555833564819E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9997316722023998	WITHOUT_CLASSIFICATION	2.6832779760027723E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9997316722023998	WITHOUT_CLASSIFICATION	2.6832779760027723E-4	DESIGN
key is an entity involved with the operation performed by the listener value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999994194189957	WITHOUT_CLASSIFICATION	5.805810043775517E-7	DESIGN
early exit!!!	WITHOUT_CLASSIFICATION	0.9997768558489954	WITHOUT_CLASSIFICATION	2.2314415100446982E-4	DESIGN
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9993704257067368	WITHOUT_CLASSIFICATION	6.29574293263149E-4	DESIGN
before any callbacks etc so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999526759314495	WITHOUT_CLASSIFICATION	4.7324068550588636E-5	DESIGN
ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999761538439148	WITHOUT_CLASSIFICATION	2.3846156085158773E-5	DESIGN
typefactory.deepcopy( currentstate proptypes persister.getpropertyupdateability() deletedstate session )	WITHOUT_CLASSIFICATION	0.9980715147432614	WITHOUT_CLASSIFICATION	0.0019284852567385297	DESIGN
cascade-delete to collections before the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999837543908253	WITHOUT_CLASSIFICATION	1.6245609174742813E-5	DESIGN
cascade-delete to many-to-one after the parent was deleted	WITHOUT_CLASSIFICATION	0.9999054947210873	WITHOUT_CLASSIFICATION	9.450527891272311E-5	DESIGN
if it is an initialized proxy let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9964245196649878	WITHOUT_CLASSIFICATION	0.0035754803350120617	DESIGN
assign the requested id to the proxy before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999933038925827	WITHOUT_CLASSIFICATION	6.696107417321352E-6	DESIGN
an uninitialized proxy noop don't even need to return an id since it is never a save()	WITHOUT_CLASSIFICATION	0.9999574782683982	WITHOUT_CLASSIFICATION	4.252173160181353E-5	DESIGN
initialize properties of the event	WITHOUT_CLASSIFICATION	0.9999544818435512	WITHOUT_CLASSIFICATION	4.55181564488425E-5	DESIGN
return the id in the event object	WITHOUT_CLASSIFICATION	0.9992461698545997	WITHOUT_CLASSIFICATION	7.538301454003232E-4	DESIGN
transient or deleted	WITHOUT_CLASSIFICATION	0.9998289957676427	WITHOUT_CLASSIFICATION	1.7100423235729144E-4	DESIGN
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9995113264039442	WITHOUT_CLASSIFICATION	4.88673596055867E-4	DESIGN
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.5019512214737158	WITHOUT_CLASSIFICATION	0.4980487785262841	DESIGN
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9843184644640399	WITHOUT_CLASSIFICATION	0.01568153553596005	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9984805306127964	WITHOUT_CLASSIFICATION	0.0015194693872035531	DESIGN
cachedstate	WITHOUT_CLASSIFICATION	0.9996356951231448	WITHOUT_CLASSIFICATION	3.643048768552535E-4	DESIGN
assume true since we don't really know and it doesn't matter	WITHOUT_CLASSIFICATION	0.9978999065831774	WITHOUT_CLASSIFICATION	0.0021000934168225833	DESIGN
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9980632693021616	WITHOUT_CLASSIFICATION	0.0019367306978384678	DESIGN
if the collection belonged to a different entity clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9933107768784296	WITHOUT_CLASSIFICATION	0.006689223121570392	DESIGN
log.debug( "calling onload()" )	WITHOUT_CLASSIFICATION	0.9981620324198082	WITHOUT_CLASSIFICATION	0.0018379675801917853	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9997941099815382	WITHOUT_CLASSIFICATION	2.0589001846191445E-4	DESIGN
note performexecutions() clears all collectionxxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9975841169682373	WITHOUT_CLASSIFICATION	0.00241588303176254	DESIGN
if no array holder we found an unwrappered array (this can't occur because we now always call wrap() before getting to here) return (ah==null) ? true searchfordirtycollections(ah type)	WITHOUT_CLASSIFICATION	0.999965712958653	WITHOUT_CLASSIFICATION	3.4287041346949504E-5	DESIGN
if not wrappered yet its dirty (this can't occur because we now always call wrap() before getting to here) return ( ! (obj instanceof persistentcollection) ) ? true searchfordirtycollections( (persistentcollection) obj type )	WITHOUT_CLASSIFICATION	0.7931913492089266	WITHOUT_CLASSIFICATION	0.20680865079107333	DESIGN
we need to check even if it was not initialized because of delayed adds!	WITHOUT_CLASSIFICATION	0.9836386224281888	WITHOUT_CLASSIFICATION	0.016361377571811286	DESIGN
note early exit!	WITHOUT_CLASSIFICATION	0.9991287202173869	WITHOUT_CLASSIFICATION	8.712797826130906E-4	DESIGN
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9996932988454558	WITHOUT_CLASSIFICATION	3.06701154544191E-4	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9997941099815382	WITHOUT_CLASSIFICATION	2.0589001846191445E-4	DESIGN
check the persistence context for an entry relating to this entity to be merged	WITHOUT_CLASSIFICATION	0.9779781035970009	WITHOUT_CLASSIFICATION	0.022021896402999078	DESIGN
we have specialized case of a detached entity from the perspective of the merge operation. specifically we have an incoming entity instance which has a corresponding entry in the current persistence context but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999181117844498	WITHOUT_CLASSIFICATION	8.18882155502838E-5	DESIGN
deleted	WITHOUT_CLASSIFICATION	0.9999173618615967	WITHOUT_CLASSIFICATION	8.263813840324139E-5	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9998368910865065	WITHOUT_CLASSIFICATION	1.6310891349354299E-4	DESIGN
cascade first so that all unsaved objects get their copy created before we actually copy cascadeonmerge(event persister entity copycache cascades.cascade_before_merge)	WITHOUT_CLASSIFICATION	0.9999918537346504	WITHOUT_CLASSIFICATION	8.146265349572247E-6	DESIGN
this bit is only really absolutely necessary for handling requestedid but is also good if we merge multiple object graphs since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.8377390349709533	WITHOUT_CLASSIFICATION	0.16226096502904666	DESIGN
continue we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9949196246849094	WITHOUT_CLASSIFICATION	0.005080375315090584	DESIGN
cascade first so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999986543348454	WITHOUT_CLASSIFICATION	1.3456651546882766E-6	DESIGN
check that entity id = requestedid	WITHOUT_CLASSIFICATION	0.9993106661790523	WITHOUT_CLASSIFICATION	6.893338209476357E-4	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9998368910865065	WITHOUT_CLASSIFICATION	1.6310891349354299E-4	DESIGN
we got here because we assumed that an instance with an assigned id was detached when it was really persistent	WITHOUT_CLASSIFICATION	0.9999594154915059	WITHOUT_CLASSIFICATION	4.058450849408761E-5	DESIGN
cascade first so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999986543348454	WITHOUT_CLASSIFICATION	1.3456651546882766E-6	DESIGN
copyvalues works by reflection so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9994458513357264	WITHOUT_CLASSIFICATION	5.54148664273653E-4	DESIGN
early exit	WITHOUT_CLASSIFICATION	0.9999583108493363	WITHOUT_CLASSIFICATION	4.168915066369202E-5	DESIGN
source.getbatcher().executebatch() found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9995521126953485	WITHOUT_CLASSIFICATION	4.47887304651493E-4	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9997632330273258	WITHOUT_CLASSIFICATION	2.367669726741846E-4	DESIGN
now done in entityidentityinsertaction persister.setidentifier( entity id source.getentitymode() )	WITHOUT_CLASSIFICATION	0.990993834994021	WITHOUT_CLASSIFICATION	0.009006165005978927	DESIGN
source.getpersistencecontext().removenonexist( new entitykey( id persister source.getentitymode() ) )	WITHOUT_CLASSIFICATION	0.9931608287768144	WITHOUT_CLASSIFICATION	0.006839171223185451	DESIGN
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9973509032960917	WITHOUT_CLASSIFICATION	0.0026490967039084026	DESIGN
cascade-save to many-to-one before the parent is saved	WITHOUT_CLASSIFICATION	0.9976603536301369	WITHOUT_CLASSIFICATION	0.002339646369863114	DESIGN
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999974453505283	WITHOUT_CLASSIFICATION	2.5546494717609795E-6	DESIGN
the object is persistent	WITHOUT_CLASSIFICATION	0.9996430939568592	WITHOUT_CLASSIFICATION	3.569060431407828E-4	DESIGN
the entity is associated with the session so check its status	WITHOUT_CLASSIFICATION	0.9997579267690087	WITHOUT_CLASSIFICATION	2.4207323099143105E-4	DESIGN
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9998737105629298	WITHOUT_CLASSIFICATION	1.2628943707026767E-4	DESIGN
ie. e.status==deleted	WITHOUT_CLASSIFICATION	0.9990988684490842	WITHOUT_CLASSIFICATION	9.011315509158068E-4	DESIGN
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9997126733038176	WITHOUT_CLASSIFICATION	2.8732669618238113E-4	DESIGN
note early exit!	WITHOUT_CLASSIFICATION	0.9991287202173869	WITHOUT_CLASSIFICATION	8.712797826130906E-4	DESIGN
private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9983380813129342	WITHOUT_CLASSIFICATION	0.0016619186870657748	DESIGN
first try to find a matching constructor accepting a violatedconstraintnameextracter param	WITHOUT_CLASSIFICATION	0.9997512207751361	WITHOUT_CLASSIFICATION	2.4877922486388074E-4	DESIGN
eat it and try next	WITHOUT_CLASSIFICATION	0.9957372952418932	WITHOUT_CLASSIFICATION	0.004262704758106819	DESIGN
otherwise try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.999281570284017	WITHOUT_CLASSIFICATION	7.184297159830497E-4	DESIGN
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9998089341656253	WITHOUT_CLASSIFICATION	1.9106583437470572E-4	DESIGN
collectionpropertymapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9969016583758812	WITHOUT_CLASSIFICATION	0.0030983416241188045	DESIGN
remove initial " "	WITHOUT_CLASSIFICATION	0.998956829415586	WITHOUT_CLASSIFICATION	0.0010431705844139967	DESIGN
remove initial " and "	WITHOUT_CLASSIFICATION	0.9976121070543036	WITHOUT_CLASSIFICATION	0.0023878929456964517	DESIGN
beforeclasstokens.add("new") definitely don't have this!!	WITHOUT_CLASSIFICATION	0.9995387875725478	WITHOUT_CLASSIFICATION	4.612124274522248E-4	DESIGN
notafterclasstokens.add("")	WITHOUT_CLASSIFICATION	0.9990988684490842	WITHOUT_CLASSIFICATION	9.011315509158068E-4	DESIGN
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9995084400035171	WITHOUT_CLASSIFICATION	4.915599964829204E-4	DESIGN
update last non-whitespace token if necessary	WITHOUT_CLASSIFICATION	0.9999591051415904	WITHOUT_CLASSIFICATION	4.08948584096502E-5	DESIGN
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9990696973021432	WITHOUT_CLASSIFICATION	9.303026978567199E-4	DESIGN
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.999865421819462	WITHOUT_CLASSIFICATION	1.3457818053796663E-4	DESIGN
note this!!	WITHOUT_CLASSIFICATION	0.998480635255882	WITHOUT_CLASSIFICATION	0.0015193647441179429	DESIGN
error message constants.	WITHOUT_CLASSIFICATION	0.9989342744653031	WITHOUT_CLASSIFICATION	0.0010657255346969408	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994519644934706	WITHOUT_CLASSIFICATION	5.480355065293028E-4	DESIGN
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991110029078195	WITHOUT_CLASSIFICATION	8.889970921805613E-4	DESIGN
handle collection-fiter compilation. important note this is modifying the input (hql) tree not the output tree!	WITHOUT_CLASSIFICATION	0.738001262570402	WITHOUT_CLASSIFICATION	0.26199873742959795	DESIGN
show the modified ast.	WITHOUT_CLASSIFICATION	0.9999268869862019	WITHOUT_CLASSIFICATION	7.311301379817612E-5	DESIGN
create a parameter specification for the collection filter	WITHOUT_CLASSIFICATION	0.9997328939270124	WITHOUT_CLASSIFICATION	2.6710607298760004E-4	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.999512876614409	WITHOUT_CLASSIFICATION	4.8712338559104803E-4	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.999512876614409	WITHOUT_CLASSIFICATION	4.8712338559104803E-4	DESIGN
get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9974951614698354	WITHOUT_CLASSIFICATION	0.0025048385301646107	DESIGN
the path ast should be a dotnode and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9988500094516823	WITHOUT_CLASSIFICATION	0.001149990548317705	DESIGN
tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999919866265462	WITHOUT_CLASSIFICATION	8.013373453756264E-6	DESIGN
re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999941563199234	WITHOUT_CLASSIFICATION	5.843680076605875E-6	DESIGN
don't forget to resolve the argument! resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9994984247733906	WITHOUT_CLASSIFICATION	5.015752266093449E-4	DESIGN
resolve everything up to this dot but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9976518685996113	WITHOUT_CLASSIFICATION	0.0023481314003887988	DESIGN
should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9978185260183218	WITHOUT_CLASSIFICATION	0.002181473981678334	DESIGN
was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999719301634427	WITHOUT_CLASSIFICATION	2.8069836557384307E-5	DESIGN
attach any mapping-defined "order by" fragments	WITHOUT_CLASSIFICATION	0.999740731695692	WITHOUT_CLASSIFICATION	2.5926830430806274E-4	DESIGN
use the explicitly declared select expression determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9998954484725688	WITHOUT_CLASSIFICATION	1.0455152743107006E-4	DESIGN
after that process the joins. invoke a delegate to do the work as this is farily complex.	WITHOUT_CLASSIFICATION	0.9998797871100501	WITHOUT_CLASSIFICATION	1.2021288994993375E-4	DESIGN
make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999973679444247	WITHOUT_CLASSIFICATION	2.6320555751828986E-6	DESIGN
we need to generate ids as part of this bulk insert. note that this is only supported for sequence-style generators and post-insert-style generators basically only in-db generators	WITHOUT_CLASSIFICATION	0.918660531183117	WITHOUT_CLASSIFICATION	0.081339468816883	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.999512876614409	WITHOUT_CLASSIFICATION	4.8712338559104803E-4	DESIGN
we need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9985044505108946	WITHOUT_CLASSIFICATION	0.0014955494891053076	DESIGN
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.997213441204606	WITHOUT_CLASSIFICATION	0.002786558795393986	DESIGN
this is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9789717285893724	WITHOUT_CLASSIFICATION	0.021028271410627547	DESIGN
generate implicit joins only if necessary.	WITHOUT_CLASSIFICATION	0.9994505661218048	WITHOUT_CLASSIFICATION	5.494338781951275E-4	DESIGN
notify the from element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9996856351491286	WITHOUT_CLASSIFICATION	3.14364850871463E-4	DESIGN
turn off includesubclasses on all fromelements.	WITHOUT_CLASSIFICATION	0.9988611734875682	WITHOUT_CLASSIFICATION	0.001138826512431809	DESIGN
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9995268890399102	WITHOUT_CLASSIFICATION	4.7311096008979857E-4	DESIGN
use the delegate resolve identifiers as from element aliases.	WITHOUT_CLASSIFICATION	0.9983159200621443	WITHOUT_CLASSIFICATION	0.0016840799378556614	DESIGN
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9997148347951131	WITHOUT_CLASSIFICATION	2.8516520488688045E-4	DESIGN
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9970319565278583	WITHOUT_CLASSIFICATION	0.0029680434721417958	DESIGN
make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9993367832705805	WITHOUT_CLASSIFICATION	6.632167294195136E-4	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994519644934706	WITHOUT_CLASSIFICATION	5.480355065293028E-4	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.999512876614409	WITHOUT_CLASSIFICATION	4.8712338559104803E-4	DESIGN
--commented out by inspection (12/11/04 1056 am) int getwarningcount()	WITHOUT_CLASSIFICATION	0.9998992804577221	WITHOUT_CLASSIFICATION	1.0071954227783214E-4	DESIGN
alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999505896065819	WITHOUT_CLASSIFICATION	4.941039341822206E-5	DESIGN
switch	WITHOUT_CLASSIFICATION	0.9998818376774313	WITHOUT_CLASSIFICATION	1.1816232256864647E-4	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.999150087783826	WITHOUT_CLASSIFICATION	8.499122161740837E-4	DESIGN
just do the regular thing if you can't find the ctor your ast must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.999434370452919	WITHOUT_CLASSIFICATION	5.656295470809728E-4	DESIGN
initialize sql nodes here.	WITHOUT_CLASSIFICATION	0.9996091446961124	WITHOUT_CLASSIFICATION	3.9085530388751727E-4	DESIGN
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994482755537121	WITHOUT_CLASSIFICATION	5.51724446287846E-4	DESIGN
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999643238322317	WITHOUT_CLASSIFICATION	3.567616776837506E-5	DESIGN
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999839040296779	WITHOUT_CLASSIFICATION	1.609597032212744E-5	DESIGN
--- inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9988608924178504	WITHOUT_CLASSIFICATION	0.0011391075821495908	DESIGN
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9997458481037711	WITHOUT_CLASSIFICATION	2.541518962289087E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9998946914420034	WITHOUT_CLASSIFICATION	1.0530855799670046E-4	DESIGN
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9989097064462243	WITHOUT_CLASSIFICATION	0.0010902935537756562	DESIGN
again both should be fromelements	WITHOUT_CLASSIFICATION	0.9980271732241193	WITHOUT_CLASSIFICATION	0.0019728267758807347	DESIGN
note firstrow is zero-based	WITHOUT_CLASSIFICATION	0.9960277466469003	WITHOUT_CLASSIFICATION	0.0039722533530996895	DESIGN
right represents a joins originating from left or both right and left reprersent joins originating from the same fromelement	WITHOUT_CLASSIFICATION	0.9999714890826198	WITHOUT_CLASSIFICATION	2.8510917380239766E-5	DESIGN
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9987708297680252	WITHOUT_CLASSIFICATION	0.0012291702319747182	DESIGN
right represents a joins originating from left	WITHOUT_CLASSIFICATION	0.9999371884501643	WITHOUT_CLASSIFICATION	6.281154983571563E-5	DESIGN
all clear	WITHOUT_CLASSIFICATION	0.9999011822591808	WITHOUT_CLASSIFICATION	9.881774081926494E-5	DESIGN
ignore the token class name parameter and use a specific token class.	WITHOUT_CLASSIFICATION	0.9998528972192073	WITHOUT_CLASSIFICATION	1.4710278079268667E-4	DESIGN
overriden to avoid system.exit	WITHOUT_CLASSIFICATION	0.9988244065090875	WITHOUT_CLASSIFICATION	0.001175593490912363	DESIGN
overriden to avoid system.exit	WITHOUT_CLASSIFICATION	0.9988244065090875	WITHOUT_CLASSIFICATION	0.001175593490912363	DESIGN
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9971926980527009	WITHOUT_CLASSIFICATION	0.0028073019472990776	DESIGN
don't care about other param types here just those explicitly user-defined	WITHOUT_CLASSIFICATION	0.9984319811577531	WITHOUT_CLASSIFICATION	0.0015680188422468374	DESIGN
if the query is already compiled skip the compilation.	WITHOUT_CLASSIFICATION	0.9999590603468979	WITHOUT_CLASSIFICATION	4.093965310220568E-5	DESIGN
remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9996296418134009	WITHOUT_CLASSIFICATION	3.703581865990619E-4	DESIGN
phase 1 parse the hql into an ast.	WITHOUT_CLASSIFICATION	0.9998276163517854	WITHOUT_CLASSIFICATION	1.723836482144543E-4	DESIGN
phase 2 analyze the hql ast and produce an sql ast.	WITHOUT_CLASSIFICATION	0.9999988669406461	WITHOUT_CLASSIFICATION	1.1330593538783082E-6	DESIGN
phase 3 generate the sql.	WITHOUT_CLASSIFICATION	0.9994268968201504	WITHOUT_CLASSIFICATION	5.731031798495254E-4	DESIGN
we do not actually propogate antlrexceptions as a cause so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999434566375411	WITHOUT_CLASSIFICATION	5.654336245878625E-5	DESIGN
we do not actually propogate antlrexceptions as a cause so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999434566375411	WITHOUT_CLASSIFICATION	5.654336245878625E-5	DESIGN
only needed during compilation phase	WITHOUT_CLASSIFICATION	0.9999849550661141	WITHOUT_CLASSIFICATION	1.5044933885865455E-5	DESIGN
transform the tree.	WITHOUT_CLASSIFICATION	0.9998015723654576	WITHOUT_CLASSIFICATION	1.9842763454244725E-4	DESIGN
parse the query string into an hql ast.	WITHOUT_CLASSIFICATION	0.9998345555919901	WITHOUT_CLASSIFICATION	1.6544440800993714E-4	DESIGN
delegate to the queryloader	WITHOUT_CLASSIFICATION	0.9994297917390621	WITHOUT_CLASSIFICATION	5.70208260937958E-4	DESIGN
delegate to the queryloader	WITHOUT_CLASSIFICATION	0.9994297917390621	WITHOUT_CLASSIFICATION	5.70208260937958E-4	DESIGN
delegate to the queryloader	WITHOUT_CLASSIFICATION	0.9994297917390621	WITHOUT_CLASSIFICATION	5.70208260937958E-4	DESIGN
note ( max - 1 ) because first is zero-based while max is not	WITHOUT_CLASSIFICATION	0.9959894970688944	WITHOUT_CLASSIFICATION	0.004010502931105559	DESIGN
-- package local methods for the queryloader delegate --	WITHOUT_CLASSIFICATION	0.9971838454771821	WITHOUT_CLASSIFICATION	0.002816154522817962	DESIGN
if there are no collection fetches then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999798149703171	WITHOUT_CLASSIFICATION	2.0185029682879578E-5	DESIGN
a shallow query is ok (although technically there should be no fetching here)	WITHOUT_CLASSIFICATION	0.9999210692605439	WITHOUT_CLASSIFICATION	7.893073945606558E-5	DESIGN
should be the first but just to be safe	WITHOUT_CLASSIFICATION	0.9995719965278722	WITHOUT_CLASSIFICATION	4.2800347212783795E-4	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.999512876614409	WITHOUT_CLASSIFICATION	4.8712338559104803E-4	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.999512876614409	WITHOUT_CLASSIFICATION	4.8712338559104803E-4	DESIGN
impl note allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9967109736291072	WITHOUT_CLASSIFICATION	0.003289026370892737	DESIGN
otherwise we have a non-scalar select with defined collection fetch(es). make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9994101540350568	WITHOUT_CLASSIFICATION	5.898459649431901E-4	DESIGN
this is not strictly true. we actually just need to make sure that it is ordered by root-entity pk and that that order-by comes before any non-root-entity ordering	WITHOUT_CLASSIFICATION	0.7768222677878326	WITHOUT_CLASSIFICATION	0.22317773221216733	DESIGN
paramtranslations = new parametertranslationsimpl( collectedparameterspecifications )	WITHOUT_CLASSIFICATION	0.9996195775138653	WITHOUT_CLASSIFICATION	3.804224861346722E-4	DESIGN
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9915187939420148	WITHOUT_CLASSIFICATION	0.008481206057985214	DESIGN
igndore it	WITHOUT_CLASSIFICATION	0.9997152477020433	WITHOUT_CLASSIFICATION	2.8475229795658967E-4	DESIGN
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9826122635783984	WITHOUT_CLASSIFICATION	0.017387736421601598	DESIGN
[jsd] the fix for hhh-558	WITHOUT_CLASSIFICATION	0.9473143526648673	WITHOUT_CLASSIFICATION	0.05268564733513283	DESIGN
if the token can tell us if it could be an identifier	WITHOUT_CLASSIFICATION	0.9962452446459547	WITHOUT_CLASSIFICATION	0.0037547553540453237	DESIGN
and the expected token type was an identifier then	WITHOUT_CLASSIFICATION	0.9999942067983826	WITHOUT_CLASSIFICATION	5.793201617472991E-6	DESIGN
use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999808380964882	WITHOUT_CLASSIFICATION	1.9161903511810566E-5	DESIGN
add the token to the ast.	WITHOUT_CLASSIFICATION	0.9999054124041131	WITHOUT_CLASSIFICATION	9.458759588689918E-5	DESIGN
(not (eq a b) ) => (ne a b)	WITHOUT_CLASSIFICATION	0.8783472772970674	WITHOUT_CLASSIFICATION	0.12165272270293255	DESIGN
(not (ne a b) ) => (eq a b)	WITHOUT_CLASSIFICATION	0.8783472772970674	WITHOUT_CLASSIFICATION	0.12165272270293255	DESIGN
(not (lt a b) ) => (ge a b)	WITHOUT_CLASSIFICATION	0.8783472772970674	WITHOUT_CLASSIFICATION	0.12165272270293255	DESIGN
(not (ge a b) ) => (lt a b)	WITHOUT_CLASSIFICATION	0.8783472772970674	WITHOUT_CLASSIFICATION	0.12165272270293255	DESIGN
(not (le a b) ) => (gt a b)	WITHOUT_CLASSIFICATION	0.8783472772970674	WITHOUT_CLASSIFICATION	0.12165272270293255	DESIGN
(not (like a b) ) => (not_like a b)	WITHOUT_CLASSIFICATION	0.9318034052916416	WITHOUT_CLASSIFICATION	0.06819659470835845	DESIGN
(not (not_like a b) ) => (like a b)	WITHOUT_CLASSIFICATION	0.9318034052916416	WITHOUT_CLASSIFICATION	0.06819659470835845	DESIGN
(not (is_not_null a b) ) => (is_null a b)	WITHOUT_CLASSIFICATION	0.9378951289259424	WITHOUT_CLASSIFICATION	0.06210487107405767	DESIGN
(not (between a b) ) => (not_between a b)	WITHOUT_CLASSIFICATION	0.9378951289259424	WITHOUT_CLASSIFICATION	0.06210487107405767	DESIGN
initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9985004250709919	WITHOUT_CLASSIFICATION	0.0014995749290080372	DESIGN
overriden to avoid system.exit	WITHOUT_CLASSIFICATION	0.9988244065090875	WITHOUT_CLASSIFICATION	0.001175593490912363	DESIGN
if if otherwise handle the error normally.	WITHOUT_CLASSIFICATION	0.9991064199532531	WITHOUT_CLASSIFICATION	8.935800467468198E-4	DESIGN
(not (not_between a b) ) => (between a b)	WITHOUT_CLASSIFICATION	0.9378951289259424	WITHOUT_CLASSIFICATION	0.06210487107405767	DESIGN
this can never happen because this rule will always eliminate the child not.case notreturn x.getfirstchild() (not (not x) ) => (x)	WITHOUT_CLASSIFICATION	0.999397427473858	WITHOUT_CLASSIFICATION	6.025725261419714E-4	DESIGN
just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9953512651355673	WITHOUT_CLASSIFICATION	0.004648734864432807	DESIGN
(eq null b) => (is_null b)	WITHOUT_CLASSIFICATION	0.9998838856929675	WITHOUT_CLASSIFICATION	1.1611430703247382E-4	DESIGN
(eq a null) => (is_null a)	WITHOUT_CLASSIFICATION	0.999920935776308	WITHOUT_CLASSIFICATION	7.906422369193427E-5	DESIGN
note because we're using astutil.createparent() the tree must be created from the bottom up. is empty x => (exists (query (select_from (from x) ) ) )	WITHOUT_CLASSIFICATION	0.9892934472401728	WITHOUT_CLASSIFICATION	0.010706552759827242	DESIGN
add not if it's negated.	WITHOUT_CLASSIFICATION	0.999084374031999	WITHOUT_CLASSIFICATION	9.156259680010344E-4	DESIGN
create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999976813991946	WITHOUT_CLASSIFICATION	2.3186008053652626E-6	DESIGN
case 1 multi token keywords group by and order by the next token ( lt(2) ) should be 'by' otherwise this is just an ident.	WITHOUT_CLASSIFICATION	0.9404516258974981	WITHOUT_CLASSIFICATION	0.059548374102501925	DESIGN
case 2 the current token is after from and before '.'.	WITHOUT_CLASSIFICATION	0.9999982684399732	WITHOUT_CLASSIFICATION	1.7315600268198075E-6	DESIGN
this handles hhh-354 where there is a strange property name in a where clause. if the lookahead contains a dot then something that isn't an ident	WITHOUT_CLASSIFICATION	0.9971902107346684	WITHOUT_CLASSIFICATION	0.0028097892653315437	DESIGN
see if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.999984073480431	WITHOUT_CLASSIFICATION	1.5926519568999508E-5	DESIGN
set it!	WITHOUT_CLASSIFICATION	0.9998785022133991	WITHOUT_CLASSIFICATION	1.2149778660093285E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.999977561514074	WITHOUT_CLASSIFICATION	2.2438485926063745E-5	DESIGN
strip the " where "	WITHOUT_CLASSIFICATION	0.9999426824380759	WITHOUT_CLASSIFICATION	5.731756192412664E-5	DESIGN
don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9956805031339949	WITHOUT_CLASSIFICATION	0.004319496866005125	DESIGN
at the very least cleanup the data )	WITHOUT_CLASSIFICATION	0.817547482032601	WITHOUT_CLASSIFICATION	0.18245251796739909	DESIGN
first save off the pertinent ids as the return value	WITHOUT_CLASSIFICATION	0.999993192252684	WITHOUT_CLASSIFICATION	6.807747316034332E-6	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9998620773806848	WITHOUT_CLASSIFICATION	1.3792261931530982E-4	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9998620773806848	WITHOUT_CLASSIFICATION	1.3792261931530982E-4	DESIGN
start performing the updates	WITHOUT_CLASSIFICATION	0.9999272045856258	WITHOUT_CLASSIFICATION	7.279541437431861E-5	DESIGN
first save off the pertinent ids saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9998250627352409	WITHOUT_CLASSIFICATION	1.749372647591355E-4	DESIGN
start performing the deletes	WITHOUT_CLASSIFICATION	0.9996998259442516	WITHOUT_CLASSIFICATION	3.001740557485346E-4	DESIGN
otherwise everything ok.	WITHOUT_CLASSIFICATION	0.9988348746589372	WITHOUT_CLASSIFICATION	0.0011651253410627418	DESIGN
visit width-first then depth	WITHOUT_CLASSIFICATION	0.9996191345985771	WITHOUT_CLASSIFICATION	3.8086540142292326E-4	DESIGN
if the types report logical equivalence return true	WITHOUT_CLASSIFICATION	0.9673469749159831	WITHOUT_CLASSIFICATION	0.03265302508401687	DESIGN
otherwise perform a "deep equivalence" check	WITHOUT_CLASSIFICATION	0.9976943474698526	WITHOUT_CLASSIFICATION	0.002305652530147354	DESIGN
if there is no where node make one.	WITHOUT_CLASSIFICATION	0.9999951743458384	WITHOUT_CLASSIFICATION	4.825654161608145E-6	DESIGN
inject the where after the parent	WITHOUT_CLASSIFICATION	0.99979172079325	WITHOUT_CLASSIFICATION	2.0827920674998824E-4	DESIGN
never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999578911639423	WITHOUT_CLASSIFICATION	4.210883605778033E-5	DESIGN
moved here from selectclause [jsd]	WITHOUT_CLASSIFICATION	0.9884984718508601	WITHOUT_CLASSIFICATION	0.011501528149139833	DESIGN
/	WITHOUT_CLASSIFICATION	0.9998946914420034	WITHOUT_CLASSIFICATION	1.0530855799670046E-4	DESIGN
use the table fromelement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9996229267208773	WITHOUT_CLASSIFICATION	3.770732791228295E-4	DESIGN
set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9990614927237735	WITHOUT_CLASSIFICATION	9.38507276226439E-4	DESIGN
if the uresolved property path isn't set yet just use the property name.	WITHOUT_CLASSIFICATION	0.9998253975238188	WITHOUT_CLASSIFICATION	1.746024761812731E-4	DESIGN
the 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9997732921625447	WITHOUT_CLASSIFICATION	2.2670783745525118E-4	DESIGN
prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999994609478312	WITHOUT_CLASSIFICATION	5.390521688581315E-7	DESIGN
prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999994609478312	WITHOUT_CLASSIFICATION	5.390521688581315E-7	DESIGN
if this dot has already been resolved stop now.	WITHOUT_CLASSIFICATION	0.9993182398249195	WITHOUT_CLASSIFICATION	6.817601750804583E-4	DESIGN
if there is no data type for this node and we're at the end of the path (top most dot node) then this might be a java constant.	WITHOUT_CLASSIFICATION	0.9992841746323118	WITHOUT_CLASSIFICATION	7.158253676881162E-4	DESIGN
the property is a collection	WITHOUT_CLASSIFICATION	0.9958129069144843	WITHOUT_CLASSIFICATION	0.004187093085515773	DESIGN
the property is a component	WITHOUT_CLASSIFICATION	0.9992903028822685	WITHOUT_CLASSIFICATION	7.096971177314726E-4	DESIGN
the property is another class..	WITHOUT_CLASSIFICATION	0.9980207310801306	WITHOUT_CLASSIFICATION	0.0019792689198695084	DESIGN
otherwise this is a primitive type.	WITHOUT_CLASSIFICATION	0.9888610474320398	WITHOUT_CLASSIFICATION	0.011138952567960218	DESIGN
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9966802264071611	WITHOUT_CLASSIFICATION	0.0033197735928389596	DESIGN
this 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9995545157256885	WITHOUT_CLASSIFICATION	4.454842743114525E-4	DESIGN
always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998970400834911	WITHOUT_CLASSIFICATION	1.0295991650888512E-4	DESIGN
in non-select queries the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999490898091083	WITHOUT_CLASSIFICATION	5.09101908916513E-5	DESIGN
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999837886483506	WITHOUT_CLASSIFICATION	1.6211351649402435E-5	DESIGN
this 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9995545157256885	WITHOUT_CLASSIFICATION	4.454842743114525E-4	DESIGN
even though we might find a pre-existing element by join path we may not be able to reuse it	WITHOUT_CLASSIFICATION	0.9997433056830268	WITHOUT_CLASSIFICATION	2.5669431697315797E-4	DESIGN
note addduplicatealias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9984988036075413	WITHOUT_CLASSIFICATION	0.0015011963924587088	DESIGN
if the from-clauses are the same we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.5901944722463807	WITHOUT_CLASSIFICATION	0.40980552775361945	DESIGN
again null != null here	WITHOUT_CLASSIFICATION	0.9999395166038917	WITHOUT_CLASSIFICATION	6.048339610825586E-5	DESIGN
if this is an implied join in a from element then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9998084561769844	WITHOUT_CLASSIFICATION	1.9154382301555183E-4	DESIGN
otherwise (subquery case) dont reuse the fromelement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9992040090744521	WITHOUT_CLASSIFICATION	7.959909255480084E-4	DESIGN
we know only the lhs-hand type so use that	WITHOUT_CLASSIFICATION	0.9993253853175189	WITHOUT_CLASSIFICATION	6.746146824812085E-4	DESIGN
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999943976761382	WITHOUT_CLASSIFICATION	5.6023238618051325E-6	DESIGN
only the identifier property field name can be a reference to the associated entity's pk	WITHOUT_CLASSIFICATION	0.9993319518997563	WITHOUT_CLASSIFICATION	6.680481002437009E-4	DESIGN
special shortcut for id properties skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999597923633858	WITHOUT_CLASSIFICATION	4.020763661421643E-5	DESIGN
append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9990487479900861	WITHOUT_CLASSIFICATION	9.512520099137793E-4	DESIGN
if the lhs is a collection use collectionpropertymapping	WITHOUT_CLASSIFICATION	0.9994537805679438	WITHOUT_CLASSIFICATION	5.462194320563603E-4	DESIGN
tell the destination fromelement to 'includesubclasses'.	WITHOUT_CLASSIFICATION	0.999733767259235	WITHOUT_CLASSIFICATION	2.662327407650182E-4	DESIGN
use theta style (for regression) move the node up after the origin node.	WITHOUT_CLASSIFICATION	0.99897386982029	WITHOUT_CLASSIFICATION	0.001026130179709952	DESIGN
don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9981172813095451	WITHOUT_CLASSIFICATION	0.0018827186904549027	DESIGN
for expected parameter type injection we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999443110657277	WITHOUT_CLASSIFICATION	5.568893427238031E-5	DESIGN
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9998400190120408	WITHOUT_CLASSIFICATION	1.5998098795927783E-4	DESIGN
we have something like "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9976745588484442	WITHOUT_CLASSIFICATION	0.002325441151555766	DESIGN
we have something like "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9976745588484442	WITHOUT_CLASSIFICATION	0.002325441151555766	DESIGN
we know only the rhs-hand type so use that	WITHOUT_CLASSIFICATION	0.9993253853175189	WITHOUT_CLASSIFICATION	6.746146824812085E-4	DESIGN
handle the (assumed) valid cases #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9892048185100188	WITHOUT_CLASSIFICATION	0.010795181489981225	DESIGN
one or the other needs to be a datetime for us to get into this method in the first place	WITHOUT_CLASSIFICATION	0.9644741681293169	WITHOUT_CLASSIFICATION	0.03552583187068312	DESIGN
#3 - note that this is also true of "datetime - param"	WITHOUT_CLASSIFICATION	0.9813481206572705	WITHOUT_CLASSIFICATION	0.018651879342729504	DESIGN
#2	WITHOUT_CLASSIFICATION	0.9997862580666442	WITHOUT_CLASSIFICATION	2.1374193335573586E-4	DESIGN
generate the inner join -- the elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9998458331954306	WITHOUT_CLASSIFICATION	1.5416680456936105E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9996819260184943	WITHOUT_CLASSIFICATION	3.180739815057325E-4	DESIGN
the 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999912062195003	WITHOUT_CLASSIFICATION	8.79378049971016E-6	DESIGN
add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999911419806554	WITHOUT_CLASSIFICATION	8.858019344613761E-6	DESIGN
sometimes use the element table alias sometimes use the umm collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9998697814890375	WITHOUT_CLASSIFICATION	1.3021851096247625E-4	DESIGN
now set the text for this node. it should be the element columns.	WITHOUT_CLASSIFICATION	0.9610412466091056	WITHOUT_CLASSIFICATION	0.03895875339089438	DESIGN
get the function return value type based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999936642343829	WITHOUT_CLASSIFICATION	6.335765617244686E-6	DESIGN
this will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9976592606936664	WITHOUT_CLASSIFICATION	0.0023407393063336096	DESIGN
mutation depends on the types of nodes invloved	WITHOUT_CLASSIFICATION	0.9994399865705059	WITHOUT_CLASSIFICATION	5.600134294941223E-4	DESIGN
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding	WITHOUT_CLASSIFICATION	0.9771532091373728	WITHOUT_CLASSIFICATION	0.02284679086262726	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9997001902426815	WITHOUT_CLASSIFICATION	2.998097573185168E-4	DESIGN
generated select expressions are already resolved nothing to do.	WITHOUT_CLASSIFICATION	0.9965217424098715	WITHOUT_CLASSIFICATION	0.0034782575901284923	DESIGN
the path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9995911439643976	WITHOUT_CLASSIFICATION	4.0885603560229973E-4	DESIGN
the hql class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999900168489716	WITHOUT_CLASSIFICATION	9.983151028304879E-6	DESIGN
associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999069379378934	WITHOUT_CLASSIFICATION	9.306206210666147E-5	DESIGN
try the parent fromclause	WITHOUT_CLASSIFICATION	0.9991084947595804	WITHOUT_CLASSIFICATION	8.915052404194913E-4	DESIGN
add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999864401223809	WITHOUT_CLASSIFICATION	1.3559877618981689E-5	DESIGN
make sure that all from elements registered with this from clause are actually in the ast.	WITHOUT_CLASSIFICATION	0.9998584742983511	WITHOUT_CLASSIFICATION	1.415257016489698E-4	DESIGN
invoke setscalarcolumntext on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999127530121371	WITHOUT_CLASSIFICATION	8.72469878628011E-5	DESIGN
collect the select expressions skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999958817100392	WITHOUT_CLASSIFICATION	4.11828996080154E-6	DESIGN
return an empty type array	WITHOUT_CLASSIFICATION	0.9976006050371253	WITHOUT_CLASSIFICATION	0.002399394962874623	DESIGN
constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9988836997721645	WITHOUT_CLASSIFICATION	0.001116300227835496	DESIGN
this is the exception returned by reflecthelper.getconstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9996293292684911	WITHOUT_CLASSIFICATION	3.70670731508953E-4	DESIGN
if there is no order by make one	WITHOUT_CLASSIFICATION	0.9999842587241256	WITHOUT_CLASSIFICATION	1.5741275874428184E-5	DESIGN
find the where if there is no where find the from	WITHOUT_CLASSIFICATION	0.9999825796913575	WITHOUT_CLASSIFICATION	1.7420308642392605E-5	DESIGN
now inject the newly built order by into the tree	WITHOUT_CLASSIFICATION	0.9997330555707615	WITHOUT_CLASSIFICATION	2.669444292384369E-4	DESIGN
parametercontainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998322418794735	WITHOUT_CLASSIFICATION	1.6775812052643053E-4	DESIGN
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9998149629825439	WITHOUT_CLASSIFICATION	1.8503701745609984E-4	DESIGN
render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9984399578809744	WITHOUT_CLASSIFICATION	0.0015600421190255964	DESIGN
class names in the from clause result in a joinsequence (the old fromparser does this).	WITHOUT_CLASSIFICATION	0.99996307224629	WITHOUT_CLASSIFICATION	3.692775370998609E-5	DESIGN
for many-to-many joins use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9995102939525478	WITHOUT_CLASSIFICATION	4.897060474521834E-4	DESIGN
otherwise use the property mapping.	WITHOUT_CLASSIFICATION	0.9989103894582999	WITHOUT_CLASSIFICATION	0.0010896105417000917	DESIGN
should be safe to only ever expect entitypersister references here	WITHOUT_CLASSIFICATION	0.9995148076869029	WITHOUT_CLASSIFICATION	4.851923130971312E-4	DESIGN
if the property is a special collection property name return a collectionpropertymapping.	WITHOUT_CLASSIFICATION	0.9994080707072673	WITHOUT_CLASSIFICATION	5.919292927326881E-4	DESIGN
collection of components.	WITHOUT_CLASSIFICATION	0.9994976809135198	WITHOUT_CLASSIFICATION	5.023190864801737E-4	DESIGN
make sure the lhs is "assignable"	WITHOUT_CLASSIFICATION	0.9999071241620955	WITHOUT_CLASSIFICATION	9.28758379044984E-5	DESIGN
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9979646929986843	WITHOUT_CLASSIFICATION	0.0020353070013156673	DESIGN
register the fromelement with the from clause now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999251310296312	WITHOUT_CLASSIFICATION	7.486897036877939E-5	DESIGN
currently allowed	WITHOUT_CLASSIFICATION	0.999818589545208	WITHOUT_CLASSIFICATION	1.814104547920226E-4	DESIGN
hhh-276 implied joins in a subselect where clause - the destination needs to be added to the destination's from clause. not sure if this is will fix everything but it works.	WITHOUT_CLASSIFICATION	0.7414757808521437	WITHOUT_CLASSIFICATION	0.25852421914785634	DESIGN
return classalias == null ? classname classalias	WITHOUT_CLASSIFICATION	0.9983464764184347	WITHOUT_CLASSIFICATION	0.0016535235815653719	DESIGN
this is an explicit from element.	WITHOUT_CLASSIFICATION	0.998125965527588	WITHOUT_CLASSIFICATION	0.0018740344724119627	DESIGN
parametercontainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998322418794735	WITHOUT_CLASSIFICATION	1.6775812052643053E-4	DESIGN
fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.8226952224446404	WITHOUT_CLASSIFICATION	0.17730477755535962	DESIGN
if it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999997155369573	WITHOUT_CLASSIFICATION	2.844630427389529E-7	DESIGN
since this is an explicit from element it can't be implied in the from clause.	WITHOUT_CLASSIFICATION	0.9997974611420855	WITHOUT_CLASSIFICATION	2.0253885791453262E-4	DESIGN
do nothing eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9997309786241679	WITHOUT_CLASSIFICATION	2.6902137583212013E-4	DESIGN
propertyname refers to something like collection.size	WITHOUT_CLASSIFICATION	0.998610545317492	WITHOUT_CLASSIFICATION	0.0013894546825080187	DESIGN
property name is a sub-path of a component	WITHOUT_CLASSIFICATION	0.9992327359306096	WITHOUT_CLASSIFICATION	7.6726406939051E-4	DESIGN
always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998970400834911	WITHOUT_CLASSIFICATION	1.0295991650888512E-4	DESIGN
nothing to do even if the operand is a parameter no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.5483093201418724	DESIGN	0.45169067985812755	WITHOUT_CLASSIFICATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9997001902426815	WITHOUT_CLASSIFICATION	2.998097573185168E-4	DESIGN
dotnode uses null here	WITHOUT_CLASSIFICATION	0.9982486047300665	WITHOUT_CLASSIFICATION	0.0017513952699334955	DESIGN
we represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9998277391332192	WITHOUT_CLASSIFICATION	1.7226086678084695E-4	DESIGN
we are the lhs of the dot representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9997613505987374	WITHOUT_CLASSIFICATION	2.3864940126255252E-4	DESIGN
we are the rhs of the dot representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9993922196476998	WITHOUT_CLASSIFICATION	6.077803523002242E-4	DESIGN
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9979409275617994	WITHOUT_CLASSIFICATION	0.002059072438200586	DESIGN
early exit!!! return so the resolve call explicitly coming from dotnode can resolve this	WITHOUT_CLASSIFICATION	0.9894600627341872	WITHOUT_CLASSIFICATION	0.010539937265812803	DESIGN
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9838747003307898	WITHOUT_CLASSIFICATION	0.016125299669210214	DESIGN
just ignore it for now it'll get resolved later	WITHOUT_CLASSIFICATION	0.9998060855687032	WITHOUT_CLASSIFICATION	1.9391443129678203E-4	DESIGN
this is not actually a constant but a reference to from element.	WITHOUT_CLASSIFICATION	0.9645304555565429	WITHOUT_CLASSIFICATION	0.03546954444345699	DESIGN
check to see if our "proppath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9998541954743227	WITHOUT_CLASSIFICATION	1.4580452567716405E-4	DESIGN
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9996600650200191	WITHOUT_CLASSIFICATION	3.399349799808379E-4	DESIGN
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.8704563186510976	WITHOUT_CLASSIFICATION	0.1295436813489023	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.968432711700841	WITHOUT_CLASSIFICATION	0.031567288299159044	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.968432711700841	WITHOUT_CLASSIFICATION	0.031567288299159044	DESIGN
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9708216586665973	WITHOUT_CLASSIFICATION	0.02917834133340269	DESIGN
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.997414212693491	WITHOUT_CLASSIFICATION	0.0025857873065091184	DESIGN
do not over-write the column text as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9998991659295773	WITHOUT_CLASSIFICATION	1.0083407042274454E-4	DESIGN
for some reason the antlr.commonast initialization routines force this method to get called twice. the first time with an empty string	WITHOUT_CLASSIFICATION	0.9999792505553888	WITHOUT_CLASSIFICATION	2.0749444611225126E-5	DESIGN
look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999808524875745	WITHOUT_CLASSIFICATION	1.9147512425503957E-5	DESIGN
add to the query spaces.	WITHOUT_CLASSIFICATION	0.9998367605046923	WITHOUT_CLASSIFICATION	1.632394953077669E-4	DESIGN
if the from element isn't in the same clause create a new from element.	WITHOUT_CLASSIFICATION	0.9996960501993983	WITHOUT_CLASSIFICATION	3.03949800601626E-4	DESIGN
this is the root level node. generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9992449073541088	WITHOUT_CLASSIFICATION	7.55092645891242E-4	DESIGN
correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ansi-style join	WITHOUT_CLASSIFICATION	0.9999945440118	WITHOUT_CLASSIFICATION	5.455988199998595E-6	DESIGN
super-duper-classic-parser-regression-testing-mojo-magic	WITHOUT_CLASSIFICATION	0.9995689692001622	WITHOUT_CLASSIFICATION	4.310307998376784E-4	DESIGN
a collection of entities	WITHOUT_CLASSIFICATION	0.994989680117377	WITHOUT_CLASSIFICATION	0.005010319882622994	DESIGN
a collection of components	WITHOUT_CLASSIFICATION	0.9986038907262376	WITHOUT_CLASSIFICATION	0.001396109273762458	DESIGN
a collection of scalar elements	WITHOUT_CLASSIFICATION	0.9995862929522207	WITHOUT_CLASSIFICATION	4.137070477792513E-4	DESIGN
according to both the ansi-sql and ejb3 specs trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the sql spec <trim function> = trim <left paren> <trim operands> <right paren> <trim operands> = [ [ <trim specification> ] [ <trim character> ] from ] <trim source> <trim specification> = leading | trailing | both if only <trim specification> is omitted both is assumed if <trim character> is omitted space is assumed	WITHOUT_CLASSIFICATION	0.9999999999608656	WITHOUT_CLASSIFICATION	3.913425202391918E-11	DESIGN
don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999474433517435	WITHOUT_CLASSIFICATION	5.255664825647211E-5	DESIGN
treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9977841680571503	WITHOUT_CLASSIFICATION	0.002215831942849614	DESIGN
( implied && dotnode.usethetastyleimplicitjoins ) ) {	WITHOUT_CLASSIFICATION	0.9837254820760517	WITHOUT_CLASSIFICATION	0.016274517923948364	DESIGN
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.8927873900811827	WITHOUT_CLASSIFICATION	0.10721260991881737	DESIGN
create the from element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999987711511983	WITHOUT_CLASSIFICATION	1.2288488016829124E-6	DESIGN
if the join is implied then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999982493199606	WITHOUT_CLASSIFICATION	1.7506800393739802E-6	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996373865783718	WITHOUT_CLASSIFICATION	3.6261342162824086E-4	DESIGN
the associated entity is implied but it must be included in the from. the collection alias is the role.	WITHOUT_CLASSIFICATION	0.999953905867313	WITHOUT_CLASSIFICATION	4.609413268695329E-5	DESIGN
tag this node as a join. don't include subclasses in the join. this is a clollection join.	WITHOUT_CLASSIFICATION	0.9999927894045522	WITHOUT_CLASSIFICATION	7.210595447939982E-6	DESIGN
get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9998796571578541	WITHOUT_CLASSIFICATION	1.2034284214590482E-4	DESIGN
origin path implied columns classalias	WITHOUT_CLASSIFICATION	0.9999872032883412	WITHOUT_CLASSIFICATION	1.2796711658881389E-5	DESIGN
implied	WITHOUT_CLASSIFICATION	0.9998137770446063	WITHOUT_CLASSIFICATION	1.8622295539373208E-4	DESIGN
for implied many-to-many just add the end join.	WITHOUT_CLASSIFICATION	0.9998909024468459	WITHOUT_CLASSIFICATION	1.0909755315412453E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996373865783718	WITHOUT_CLASSIFICATION	3.6261342162824086E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996373865783718	WITHOUT_CLASSIFICATION	3.6261342162824086E-4	DESIGN
the standard sql function name is current_timestamp	WITHOUT_CLASSIFICATION	0.9999917812122876	WITHOUT_CLASSIFICATION	8.218787712273928E-6	DESIGN
this causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9870736076850678	WITHOUT_CLASSIFICATION	0.012926392314932181	DESIGN
private type[] sqlresulttypes	WITHOUT_CLASSIFICATION	0.9965191254674375	WITHOUT_CLASSIFICATION	0.003480874532562505	DESIGN
frontbase has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9997438386345633	WITHOUT_CLASSIFICATION	2.561613654367192E-4	DESIGN
the types represented in the sql result set. @return the types represented in the sql result set.	WITHOUT_CLASSIFICATION	0.9999184673156384	WITHOUT_CLASSIFICATION	8.15326843616697E-5	DESIGN
public type[] getsqlresulttypes() {return sqlresulttypes}	WITHOUT_CLASSIFICATION	0.9969576892276397	WITHOUT_CLASSIFICATION	0.0030423107723603513	DESIGN
first collect all of the select expressions. note this must be done before invoking setscalarcolumntext() because setscalarcolumntext() changes the ast!!!	WITHOUT_CLASSIFICATION	0.9925040606970503	WITHOUT_CLASSIFICATION	0.007495939302949606	DESIGN
first allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9778626939526158	WITHOUT_CLASSIFICATION	0.02213730604738413	DESIGN
sqlresulttypelist.addall( constructorargumenttypelist )	WITHOUT_CLASSIFICATION	0.9981620324198082	WITHOUT_CLASSIFICATION	0.0018379675801917853	DESIGN
if the data type is not an association type it could not have been in the from clause.	WITHOUT_CLASSIFICATION	0.977021757340451	WITHOUT_CLASSIFICATION	0.022978242659548988	DESIGN
sqlresulttypelist.add( type )	WITHOUT_CLASSIFICATION	0.9924821753107499	WITHOUT_CLASSIFICATION	0.0075178246892501615	DESIGN
always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9991026461185029	WITHOUT_CLASSIFICATION	8.973538814971171E-4	DESIGN
add the fetched entities	WITHOUT_CLASSIFICATION	0.9995650634313563	WITHOUT_CLASSIFICATION	4.3493656864371997E-4	DESIGN
get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998460213122266	WITHOUT_CLASSIFICATION	1.539786877735345E-4	DESIGN
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998903715696323	WITHOUT_CLASSIFICATION	1.0962843036764114E-4	DESIGN
if there are any scalars (non-entities) selected render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999984913114355	WITHOUT_CLASSIFICATION	1.5086885644975388E-6	DESIGN
sqlresulttypelist	WITHOUT_CLASSIFICATION	0.9996356951231448	WITHOUT_CLASSIFICATION	3.643048768552535E-4	DESIGN
arraylist sqlresulttypelist	WITHOUT_CLASSIFICATION	0.9991836854988274	WITHOUT_CLASSIFICATION	8.163145011725868E-4	DESIGN
sqlresulttypes = ( type[] ) sqlresulttypelist.toarray( new type[sqlresulttypelist.size()] )	WITHOUT_CLASSIFICATION	0.9987046297704236	WITHOUT_CLASSIFICATION	0.0012953702295763914	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994125199435533	WITHOUT_CLASSIFICATION	5.87480056446703E-4	DESIGN
todo	WITHOUT_CLASSIFICATION	0.7142003075800946	WITHOUT_CLASSIFICATION	0.28579969241990555	DESIGN
add the type to the list of returned sqlresulttypes.	WITHOUT_CLASSIFICATION	0.9999359500045253	WITHOUT_CLASSIFICATION	6.404999547467148E-5	DESIGN
generate an 2d array of column names the first dimension is parallel with the return types array. the second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999982889919605	WITHOUT_CLASSIFICATION	1.711008039392286E-6	DESIGN
generate the select expression.	WITHOUT_CLASSIFICATION	0.9995498713201918	WITHOUT_CLASSIFICATION	4.5012867980822593E-4	DESIGN
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.991294291410245	WITHOUT_CLASSIFICATION	0.008705708589754902	DESIGN
skip 'distinct' and 'all' so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999881666178017	WITHOUT_CLASSIFICATION	1.1833382198335807E-5	DESIGN
create sql_token nodes for the columns.	WITHOUT_CLASSIFICATION	0.9997455616794308	WITHOUT_CLASSIFICATION	2.5443832056908913E-4	DESIGN
generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9986658777813836	WITHOUT_CLASSIFICATION	0.0013341222186164794	DESIGN
get the function name node.	WITHOUT_CLASSIFICATION	0.999931979372815	WITHOUT_CLASSIFICATION	6.802062718510628E-5	DESIGN
method expressions in a select should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9523209574495872	WITHOUT_CLASSIFICATION	0.047679042550412706	DESIGN
if this is 'elements' then create a new from element.	WITHOUT_CLASSIFICATION	0.9960703143248592	WITHOUT_CLASSIFICATION	0.0039296856751408924	DESIGN
not elements(x)	WITHOUT_CLASSIFICATION	0.9983317679420798	WITHOUT_CLASSIFICATION	0.0016682320579202796	DESIGN
dialect function	WITHOUT_CLASSIFICATION	0.9998628130818833	WITHOUT_CLASSIFICATION	1.3718691811669508E-4	DESIGN
collection 'property function'	WITHOUT_CLASSIFICATION	0.9981246674587867	WITHOUT_CLASSIFICATION	0.0018753325412133415	DESIGN
if the constant is an ident figure out what it means	WITHOUT_CLASSIFICATION	0.9981261117839684	WITHOUT_CLASSIFICATION	0.0018738882160315808	DESIGN
ident is a class alias in the from.	WITHOUT_CLASSIFICATION	0.9998539236888108	WITHOUT_CLASSIFICATION	1.4607631118921405E-4	DESIGN
resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9660794623551735	WITHOUT_CLASSIFICATION	0.03392053764482644	DESIGN
otherwise it's a literal.	WITHOUT_CLASSIFICATION	0.9985835843810569	WITHOUT_CLASSIFICATION	0.0014164156189431613	DESIGN
the name of an entity class	WITHOUT_CLASSIFICATION	0.9983913336750732	WITHOUT_CLASSIFICATION	0.001608666324926936	DESIGN
the class discriminator value	WITHOUT_CLASSIFICATION	0.9996652701106155	WITHOUT_CLASSIFICATION	3.3472988938447825E-4	DESIGN
chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9997767619399914	WITHOUT_CLASSIFICATION	2.2323806000856973E-4	DESIGN
add a space before the display text.	WITHOUT_CLASSIFICATION	0.999975185604812	WITHOUT_CLASSIFICATION	2.4814395187936923E-5	DESIGN
find or create the where clause	WITHOUT_CLASSIFICATION	0.9999878952615155	WITHOUT_CLASSIFICATION	1.2104738484534533E-5	DESIGN
child == parent.getfirstchild()	WITHOUT_CLASSIFICATION	0.9998140818604171	WITHOUT_CLASSIFICATION	1.859181395828313E-4	DESIGN
find or create the where clause	WITHOUT_CLASSIFICATION	0.9999878952615155	WITHOUT_CLASSIFICATION	1.2104738484534533E-5	DESIGN
filter conditions need to be inserted before the hql where condition and the theta join node. this is because org.hibernate.loader.loader binds the filter parameters first then it binds all the hql query parameters see org.hibernate.loader.loader.processfilterparameters().	WITHOUT_CLASSIFICATION	0.9999999324677933	WITHOUT_CLASSIFICATION	6.753220669501222E-8	DESIGN
put the filters node before the hql condition and theta joins	WITHOUT_CLASSIFICATION	0.9999645584853167	WITHOUT_CLASSIFICATION	3.5441514683305423E-5	DESIGN
add the current fragment to the filters node	WITHOUT_CLASSIFICATION	0.9997546331652609	WITHOUT_CLASSIFICATION	2.453668347390911E-4	DESIGN
create a new theta_joins node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999167407225953	WITHOUT_CLASSIFICATION	8.325927740471503E-5	DESIGN
put the theta_joins node before the hql condition after the filters.	WITHOUT_CLASSIFICATION	0.9999747190052972	WITHOUT_CLASSIFICATION	2.528099470285749E-5	DESIGN
add the current fragment to the theta_joins node	WITHOUT_CLASSIFICATION	0.9995469782525785	WITHOUT_CLASSIFICATION	4.5302174742141606E-4	DESIGN
first try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999782132660543	WITHOUT_CLASSIFICATION	2.1786733945715873E-5	DESIGN
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9988973564938854	WITHOUT_CLASSIFICATION	0.0011026435061145823	DESIGN
if that didn't work try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9998738834221199	WITHOUT_CLASSIFICATION	1.2611657788010562E-4	DESIGN
implicit joins use theta style (where pk = fk) explicit joins use join (after from)	WITHOUT_CLASSIFICATION	0.9999913185374142	WITHOUT_CLASSIFICATION	8.681462585781734E-6	DESIGN
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999953209465448	WITHOUT_CLASSIFICATION	4.679053455227636E-6	DESIGN
determine the type of the first argument	WITHOUT_CLASSIFICATION	0.9997635194086211	WITHOUT_CLASSIFICATION	2.3648059137881182E-4	DESIGN
use the dot node to emit the first column name. create the column names folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999921357536331	WITHOUT_CLASSIFICATION	7.864246366940765E-6	DESIGN
note this simply constructs a "raw" sql_token representing the where fragment and injects this into the tree. this "works" however it is probably not the best long-term solution. at some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9966945600896052	DESIGN	0.0033054399103947378	WITHOUT_CLASSIFICATION
append the text of the current node.	WITHOUT_CLASSIFICATION	0.999976571934051	WITHOUT_CLASSIFICATION	2.3428065948958886E-5	DESIGN
if the node has a first child recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999940732091038	WITHOUT_CLASSIFICATION	5.926790896085167E-6	DESIGN
if there is a second child (rhs) recurse into that child.	WITHOUT_CLASSIFICATION	0.9997934309623142	WITHOUT_CLASSIFICATION	2.0656903768588152E-4	DESIGN
iterate through the aliasjoinsequence pairs and generate sql token nodes.	WITHOUT_CLASSIFICATION	0.9998846567309351	WITHOUT_CLASSIFICATION	1.1534326906496426E-4	DESIGN
if the from element represents a join_fragment and it is a theta-style join convert its type from join_fragment to from_fragment	WITHOUT_CLASSIFICATION	0.9999971020393957	WITHOUT_CLASSIFICATION	2.8979606041432073E-6	DESIGN
this is used during sqlgenerator processing	WITHOUT_CLASSIFICATION	0.8243948737936072	WITHOUT_CLASSIFICATION	0.17560512620639282	DESIGN
if there is a from fragment and the from element is an explicit then add the from part.	WITHOUT_CLASSIFICATION	0.9995661435065197	WITHOUT_CLASSIFICATION	4.338564934802386E-4	DESIGN
&& stringhelper.isnotempty( frag )	WITHOUT_CLASSIFICATION	0.9936883614837884	WITHOUT_CLASSIFICATION	0.0063116385162116685	DESIGN
the from fragment will probably begin with ' '. remove this if it is present.	WITHOUT_CLASSIFICATION	0.7260564778578674	WITHOUT_CLASSIFICATION	0.2739435221421326	DESIGN
this uses a pathexpressionparser but notice that compound paths are not valid only bare names and simple paths	WITHOUT_CLASSIFICATION	0.9966650948888489	WITHOUT_CLASSIFICATION	0.0033349051111510922	DESIGN
select p from p in class eg.person order by p.name p.address p	WITHOUT_CLASSIFICATION	0.9995582100714347	WITHOUT_CLASSIFICATION	4.4178992856517955E-4	DESIGN
the reason for this is sql doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.994634374412131	WITHOUT_CLASSIFICATION	0.005365625587869016	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9994779686536764	WITHOUT_CLASSIFICATION	5.220313463236383E-4	DESIGN
default mode	WITHOUT_CLASSIFICATION	0.9997367073524709	WITHOUT_CLASSIFICATION	2.632926475290553E-4	DESIGN
queryjoinfragment join = q.createjoinfragment(usethetastylejoin)	WITHOUT_CLASSIFICATION	0.9999934147814795	WITHOUT_CLASSIFICATION	6.585218520522957E-6	DESIGN
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9996094739810262	WITHOUT_CLASSIFICATION	3.90526018973924E-4	DESIGN
after reset!	WITHOUT_CLASSIFICATION	0.9998705087138358	WITHOUT_CLASSIFICATION	1.2949128616432707E-4	DESIGN
we don't need to worry about any condition in the on clause here (tofromfragmentstring) since anything in the on condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999604113343795	WITHOUT_CLASSIFICATION	3.958866562045858E-5	DESIGN
bit_length feels a bit broken to me. we have to cast to char in order to pass when a numeric value is supplied. but of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. jay nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9994592362911793	WITHOUT_CLASSIFICATION	5.407637088207832E-4	DESIGN
dotcount>=2	WITHOUT_CLASSIFICATION	0.9996356951231448	WITHOUT_CLASSIFICATION	3.643048768552535E-4	DESIGN
do the corresponding rhs	WITHOUT_CLASSIFICATION	0.9995755639073615	WITHOUT_CLASSIFICATION	4.2443609263860885E-4	DESIGN
if its "id"	WITHOUT_CLASSIFICATION	0.9999461986049087	WITHOUT_CLASSIFICATION	5.380139509122761E-5	DESIGN
or its the id property name	WITHOUT_CLASSIFICATION	0.9997147926798904	WITHOUT_CLASSIFICATION	2.8520732010962804E-4	DESIGN
join = q.createjoinfragment(usethetastylejoin)	WITHOUT_CLASSIFICATION	0.9999934147814795	WITHOUT_CLASSIFICATION	6.585218520522957E-6	DESIGN
important!!	WITHOUT_CLASSIFICATION	0.9996362440754538	WITHOUT_CLASSIFICATION	3.6375592454613583E-4	DESIGN
string[] keycols = collpersister.getkeycolumnnames()	WITHOUT_CLASSIFICATION	0.9999175691674979	WITHOUT_CLASSIFICATION	8.243083250221038E-5	DESIGN
an association	WITHOUT_CLASSIFICATION	0.9997821357557954	WITHOUT_CLASSIFICATION	2.1786424420447122E-4	DESIGN
allow index() function	WITHOUT_CLASSIFICATION	0.9996228627467012	WITHOUT_CLASSIFICATION	3.7713725329875994E-4	DESIGN
here assume sqlserver2005 using snapshot isolation which does not have this problem	WITHOUT_CLASSIFICATION	0.9863917297278131	WITHOUT_CLASSIFICATION	0.01360827027218699	DESIGN
the reason for this is sql doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.994634374412131	WITHOUT_CLASSIFICATION	0.005365625587869016	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9996358585841519	WITHOUT_CLASSIFICATION	3.64141415848051E-4	DESIGN
collections of values	WITHOUT_CLASSIFICATION	0.9996459336519	WITHOUT_CLASSIFICATION	3.540663480999608E-4	DESIGN
opening paren in new foo ( )	WITHOUT_CLASSIFICATION	0.9845275786635327	WITHOUT_CLASSIFICATION	0.015472421336467191	DESIGN
if we are inside a new result() but not inside a nested function	WITHOUT_CLASSIFICATION	0.9995960672331214	WITHOUT_CLASSIFICATION	4.0393276687852853E-4	DESIGN
special case	WITHOUT_CLASSIFICATION	0.9998675396615699	WITHOUT_CLASSIFICATION	1.3246033843012866E-4	DESIGN
the name of an sql function	WITHOUT_CLASSIFICATION	0.9999702726487633	WITHOUT_CLASSIFICATION	2.9727351236808903E-5	DESIGN
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9995878065457625	WITHOUT_CLASSIFICATION	4.1219345423741053E-4	DESIGN
this is basically a copy/paste of orderbyparser might be worth refactoring	WITHOUT_CLASSIFICATION	0.9317582017986139	DESIGN	0.06824179820138605	WITHOUT_CLASSIFICATION
select p from p in class eg.person group by p.name p.address p	WITHOUT_CLASSIFICATION	0.9986355485516611	WITHOUT_CLASSIFICATION	0.001364451448338871	DESIGN
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9961108455416109	WITHOUT_CLASSIFICATION	0.0038891544583890963	DESIGN
register collection role	WITHOUT_CLASSIFICATION	0.9966043950606851	WITHOUT_CLASSIFICATION	0.003395604939314957	DESIGN
the keyword used to specify an identity column if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9991881096209037	WITHOUT_CLASSIFICATION	8.118903790963536E-4	DESIGN
.getelementpropertymapping()	WITHOUT_CLASSIFICATION	0.9990988684490842	WITHOUT_CLASSIFICATION	9.011315509158068E-4	DESIGN
crossjoins.add(name)	WITHOUT_CLASSIFICATION	0.9996356951231448	WITHOUT_CLASSIFICATION	3.643048768552535E-4	DESIGN
ie no select clause in hql	WITHOUT_CLASSIFICATION	0.9998582933941006	WITHOUT_CLASSIFICATION	1.4170660589935054E-4	DESIGN
initialize the set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9995288027779707	WITHOUT_CLASSIFICATION	4.711972220292167E-4	DESIGN
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999578142631605	WITHOUT_CLASSIFICATION	4.2185736839409444E-5	DESIGN
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9997696389976382	WITHOUT_CLASSIFICATION	2.3036100236193367E-4	DESIGN
return the concrete type or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9997660506654736	WITHOUT_CLASSIFICATION	2.3394933452645442E-4	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9996358585841519	WITHOUT_CLASSIFICATION	3.64141415848051E-4	DESIGN
q.addcollection(collectionname collectionrole)	WITHOUT_CLASSIFICATION	0.9995689692001622	WITHOUT_CLASSIFICATION	4.310307998376784E-4	DESIGN
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9956157485785032	WITHOUT_CLASSIFICATION	0.004384251421496746	DESIGN
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9987924093297595	WITHOUT_CLASSIFICATION	0.001207590670240351	DESIGN
unfortunately this stuff can't be cached because it is per-invocation not constant for the querytranslator instance	WITHOUT_CLASSIFICATION	0.9997867961578364	WITHOUT_CLASSIFICATION	2.1320384216372103E-4	DESIGN
this is the legacy behaviour for hql queries	WITHOUT_CLASSIFICATION	0.9993091566157818	WITHOUT_CLASSIFICATION	6.90843384218203E-4	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9989461678311804	WITHOUT_CLASSIFICATION	0.0010538321688197013	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9989461678311804	WITHOUT_CLASSIFICATION	0.0010538321688197013	DESIGN
we have the form trim(trimsource) so we trim leading and trailing spaces early exit!!!!	WITHOUT_CLASSIFICATION	0.9998872426022832	WITHOUT_CLASSIFICATION	1.1275739771674696E-4	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9989461678311804	WITHOUT_CLASSIFICATION	0.0010538321688197013	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9989461678311804	WITHOUT_CLASSIFICATION	0.0010538321688197013	DESIGN
need this since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9994166105199634	WITHOUT_CLASSIFICATION	5.833894800365873E-4	DESIGN
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999998788098794	WITHOUT_CLASSIFICATION	1.2119012058995072E-7	DESIGN
expressionterminators.add("") deliberately excluded	WITHOUT_CLASSIFICATION	0.9997413268032456	WITHOUT_CLASSIFICATION	2.58673196754496E-4	DESIGN
expressionopeners.add("") deliberately excluded	WITHOUT_CLASSIFICATION	0.9997413268032456	WITHOUT_CLASSIFICATION	2.58673196754496E-4	DESIGN
we have the form trim(from trimsource). this is functionally equivalent to trim(trimsource) early exit!!!!	WITHOUT_CLASSIFICATION	0.9985198454989065	WITHOUT_CLASSIFICATION	0.0014801545010935256	DESIGN
otherwise a trim-specification and/or a trim-character have been specified we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9989767241757072	WITHOUT_CLASSIFICATION	0.0010232758242928425	DESIGN
inside a between and expression	WITHOUT_CLASSIFICATION	0.999532712301733	WITHOUT_CLASSIFICATION	4.672876982669143E-4	DESIGN
were an odd or even number of nots encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999825630158659	WITHOUT_CLASSIFICATION	1.7436984134079392E-5	DESIGN
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9992168959795567	WITHOUT_CLASSIFICATION	7.831040204433055E-4	DESIGN
cope with []	WITHOUT_CLASSIFICATION	0.9984879502143538	WITHOUT_CLASSIFICATION	0.001512049785646233	DESIGN
cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9998815759616261	WITHOUT_CLASSIFICATION	1.1842403837381564E-4	DESIGN
note early return	WITHOUT_CLASSIFICATION	0.9988111123979538	WITHOUT_CLASSIFICATION	0.0011888876020461597	DESIGN
cope with a subselect	WITHOUT_CLASSIFICATION	0.9963159556779015	WITHOUT_CLASSIFICATION	0.0036840443220984382	DESIGN
cope with special cases of and not ()	WITHOUT_CLASSIFICATION	0.9999909936664321	WITHOUT_CLASSIFICATION	9.00633356791919E-6	DESIGN
close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999964152432663	WITHOUT_CLASSIFICATION	3.5847567335601836E-6	DESIGN
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9931513689542103	WITHOUT_CLASSIFICATION	0.006848631045789673	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999982873409439	WITHOUT_CLASSIFICATION	1.7126590561372103E-6	DESIGN
process a token mapping oo path expressions to sql expressions	WITHOUT_CLASSIFICATION	0.9999993733416316	WITHOUT_CLASSIFICATION	6.266583684970885E-7	DESIGN
open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.998648050613913	WITHOUT_CLASSIFICATION	0.001351949386086946	DESIGN
cope with special cases of and not )	WITHOUT_CLASSIFICATION	0.972727087089535	WITHOUT_CLASSIFICATION	0.027272912910464922	DESIGN
the next one up must also be	WITHOUT_CLASSIFICATION	0.998419047199727	WITHOUT_CLASSIFICATION	0.0015809528002730228	DESIGN
add any joins	WITHOUT_CLASSIFICATION	0.9998229928470755	WITHOUT_CLASSIFICATION	1.7700715292447985E-4	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999982873409439	WITHOUT_CLASSIFICATION	1.7126590561372103E-6	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9994779686536764	WITHOUT_CLASSIFICATION	5.220313463236383E-4	DESIGN
path expression	WITHOUT_CLASSIFICATION	0.9999754993989578	WITHOUT_CLASSIFICATION	2.4500601042138835E-5	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999887695595717	WITHOUT_CLASSIFICATION	1.1230440428276016E-5	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998789501794403	WITHOUT_CLASSIFICATION	1.2104982055979633E-4	DESIGN
anything else	WITHOUT_CLASSIFICATION	0.9999733131241412	WITHOUT_CLASSIFICATION	2.668687585880216E-5	DESIGN
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999907422948169	WITHOUT_CLASSIFICATION	9.257705183096553E-6	DESIGN
careful with this!	WITHOUT_CLASSIFICATION	0.9993595982611503	WITHOUT_CLASSIFICATION	6.404017388498229E-4	DESIGN
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999577231988117	WITHOUT_CLASSIFICATION	4.227680118825472E-5	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999788215370583	WITHOUT_CLASSIFICATION	2.1178462941674015E-5	DESIGN
notice no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999960211893703	WITHOUT_CLASSIFICATION	3.9788106297004076E-6	DESIGN
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999088196513336	WITHOUT_CLASSIFICATION	9.118034866639012E-5	DESIGN
start by looking for hql keywords	WITHOUT_CLASSIFICATION	0.9998328765087532	WITHOUT_CLASSIFICATION	1.671234912468268E-4	DESIGN
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9969150043185119	WITHOUT_CLASSIFICATION	0.003084995681488132	DESIGN
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999214388153621	WITHOUT_CLASSIFICATION	7.85611846379453E-5	DESIGN
now anything that is not a hql keyword	WITHOUT_CLASSIFICATION	0.9996669481951643	WITHOUT_CLASSIFICATION	3.3305180483573355E-4	DESIGN
process the "old" hql style where aliases appear _first_ ie. using the in or in class constructions	WITHOUT_CLASSIFICATION	0.9999582324346631	WITHOUT_CLASSIFICATION	4.1767565336943907E-5	DESIGN
treat it as a classname	WITHOUT_CLASSIFICATION	0.9980924322776338	WITHOUT_CLASSIFICATION	0.0019075677223661437	DESIGN
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9998817498608433	WITHOUT_CLASSIFICATION	1.1825013915676132E-4	DESIGN
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9983491040511724	WITHOUT_CLASSIFICATION	0.001650895948827527	DESIGN
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999586075387571	WITHOUT_CLASSIFICATION	4.1392461242899715E-5	DESIGN
allow odmg oql style from person p p.cars c	WITHOUT_CLASSIFICATION	0.9997873800912168	WITHOUT_CLASSIFICATION	2.1261990878316812E-4	DESIGN
handle quoted strings	WITHOUT_CLASSIFICATION	0.9967115852300305	WITHOUT_CLASSIFICATION	0.003288414769969578	DESIGN
object insertions updates and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999992683246088	WITHOUT_CLASSIFICATION	7.316753912275978E-7	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999788215370583	WITHOUT_CLASSIFICATION	2.1178462941674015E-5	DESIGN
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999749673180464	WITHOUT_CLASSIFICATION	2.5032681953600835E-5	DESIGN
do replacements	WITHOUT_CLASSIFICATION	0.9993236465653488	WITHOUT_CLASSIFICATION	6.763534346513158E-4	DESIGN
handle hql2 collection syntax	WITHOUT_CLASSIFICATION	0.9946715371341694	WITHOUT_CLASSIFICATION	0.005328462865830536	DESIGN
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9834411725811328	WITHOUT_CLASSIFICATION	0.01655882741886718	DESIGN
abstractselectingdelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998322418794735	WITHOUT_CLASSIFICATION	1.6775812052643053E-4	DESIGN
hilo params	WITHOUT_CLASSIFICATION	0.9996599260855971	WITHOUT_CLASSIFICATION	3.4007391440298306E-4	DESIGN
sql = query	WITHOUT_CLASSIFICATION	0.9999827742518439	WITHOUT_CLASSIFICATION	1.7225748156096827E-5	DESIGN
performance opt	WITHOUT_CLASSIFICATION	0.9993868282150185	WITHOUT_CLASSIFICATION	6.131717849815511E-4	DESIGN
sql = update	WITHOUT_CLASSIFICATION	0.9999700625796505	WITHOUT_CLASSIFICATION	2.9937420349474488E-5	DESIGN
hilo config	WITHOUT_CLASSIFICATION	0.9996275581484915	WITHOUT_CLASSIFICATION	3.724418515085076E-4	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999792115520669	WITHOUT_CLASSIFICATION	2.078844793312395E-5	DESIGN
don't allow comments on these insert statements as comments totally blow up the oracle getgeneratedkeys "support" (	WITHOUT_CLASSIFICATION	0.9995228926584628	WITHOUT_CLASSIFICATION	4.771073415371428E-4	DESIGN
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9982784606305937	WITHOUT_CLASSIFICATION	0.0017215393694063731	DESIGN
throw new identifiergenerationexception("save associated object first or disable cascade for inverse association")	WITHOUT_CLASSIFICATION	0.9999955735865932	WITHOUT_CLASSIFICATION	4.426413406752293E-6	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9996912100243233	WITHOUT_CLASSIFICATION	3.087899756766436E-4	DESIGN
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9997366277762569	WITHOUT_CLASSIFICATION	2.6337222374304736E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9998361941578463	WITHOUT_CLASSIFICATION	1.6380584215357932E-4	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999792115520669	WITHOUT_CLASSIFICATION	2.078844793312395E-5	DESIGN
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.996811413891246	WITHOUT_CLASSIFICATION	0.0031885861087540346	DESIGN
column and table should be renamed but it would break the public api	WITHOUT_CLASSIFICATION	0.9387482664017334	WITHOUT_CLASSIFICATION	0.061251733598266696	DESIGN
loaded entity instances by entitykey	WITHOUT_CLASSIFICATION	0.9994595344802726	WITHOUT_CLASSIFICATION	5.404655197274599E-4	DESIGN
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9987645062080072	WITHOUT_CLASSIFICATION	0.0012354937919927846	DESIGN
the default	WITHOUT_CLASSIFICATION	0.9999241740178941	WITHOUT_CLASSIFICATION	7.582598210594819E-5	DESIGN
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence	WITHOUT_CLASSIFICATION	0.9997427701042726	WITHOUT_CLASSIFICATION	2.572298957274116E-4	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9996912100243233	WITHOUT_CLASSIFICATION	3.087899756766436E-4	DESIGN
identity map of collectionentry instances by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999908778534844	WITHOUT_CLASSIFICATION	9.122146515661264E-6	DESIGN
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999940849909692	WITHOUT_CLASSIFICATION	5.915009030802366E-6	DESIGN
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999622472302003	WITHOUT_CLASSIFICATION	3.7752769799671206E-5	DESIGN
configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997857888940542	WITHOUT_CLASSIFICATION	2.1421110594582266E-4	DESIGN
identifiergenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998605554488919	WITHOUT_CLASSIFICATION	1.394445511082462E-4	DESIGN
persistentidentifiergenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998605554488919	WITHOUT_CLASSIFICATION	1.394445511082462E-4	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999507522498202	WITHOUT_CLASSIFICATION	4.924775017974852E-5	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999507522498202	WITHOUT_CLASSIFICATION	4.924775017974852E-5	DESIGN
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9825684519454218	WITHOUT_CLASSIFICATION	0.017431548054578274	DESIGN
we just hit the last position	WITHOUT_CLASSIFICATION	0.999659394560938	WITHOUT_CLASSIFICATION	3.4060543906194013E-4	DESIGN
scroll ahead	WITHOUT_CLASSIFICATION	0.9963887692653909	WITHOUT_CLASSIFICATION	0.0036112307346092267	DESIGN
scroll backward	WITHOUT_CLASSIFICATION	0.9988215547987611	WITHOUT_CLASSIFICATION	0.0011784452012388955	DESIGN
we have not yet hit the last result	WITHOUT_CLASSIFICATION	0.9998304805435225	WITHOUT_CLASSIFICATION	1.6951945647757858E-4	DESIGN
constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977609038201232	WITHOUT_CLASSIFICATION	0.002239096179876718	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998361310164067	WITHOUT_CLASSIFICATION	1.6386898359333458E-4	DESIGN
criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999030700008962	WITHOUT_CLASSIFICATION	9.69299991039125E-5	DESIGN
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9994020903150098	WITHOUT_CLASSIFICATION	5.979096849901646E-4	DESIGN
inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992375327191468	WITHOUT_CLASSIFICATION	7.624672808531654E-4	DESIGN
constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977609038201232	WITHOUT_CLASSIFICATION	0.002239096179876718	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998361310164067	WITHOUT_CLASSIFICATION	1.6386898359333458E-4	DESIGN
criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999030700008962	WITHOUT_CLASSIFICATION	9.69299991039125E-5	DESIGN
caches	WITHOUT_CLASSIFICATION	0.9997945271089493	WITHOUT_CLASSIFICATION	2.054728910507201E-4	DESIGN
generators	WITHOUT_CLASSIFICATION	0.9997699770785218	WITHOUT_CLASSIFICATION	2.300229214783216E-4	DESIGN
cache region is defined by the root-class in the hierarchy	WITHOUT_CLASSIFICATION	0.9996887249262304	WITHOUT_CLASSIFICATION	3.112750737695353E-4	DESIGN
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9995403433287066	WITHOUT_CLASSIFICATION	4.5965667129349433E-4	DESIGN
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999393043999523	WITHOUT_CLASSIFICATION	6.0695600047778894E-5	DESIGN
if we get here it is possible that we have a proxy 'in the way' of the merge map resolution note decided to put this here rather than in the above loop as i was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9928303330132516	WITHOUT_CLASSIFICATION	0.007169666986748371	DESIGN
jndi + serialization	WITHOUT_CLASSIFICATION	0.9998233688498075	WITHOUT_CLASSIFICATION	1.7663115019259443E-4	DESIGN
checking for named queries	WITHOUT_CLASSIFICATION	0.8412444171794836	WITHOUT_CLASSIFICATION	0.15875558282051638	DESIGN
stats	WITHOUT_CLASSIFICATION	0.9997789134075558	WITHOUT_CLASSIFICATION	2.2108659244427477E-4	DESIGN
entitynotfounddelegate	WITHOUT_CLASSIFICATION	0.9990988684490842	WITHOUT_CLASSIFICATION	9.011315509158068E-4	DESIGN
check named hql queries	WITHOUT_CLASSIFICATION	0.9991497434021909	WITHOUT_CLASSIFICATION	8.502565978092439E-4	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.8692254904128	DESIGN	0.13077450958720008	WITHOUT_CLASSIFICATION
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9928612840349137	WITHOUT_CLASSIFICATION	0.007138715965086342	DESIGN
from javax.naming.referenceable	WITHOUT_CLASSIFICATION	0.9994104477649841	WITHOUT_CLASSIFICATION	5.895522350159443E-4	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999661266670165	WITHOUT_CLASSIFICATION	3.387333298346248E-5	DESIGN
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9993264325157545	WITHOUT_CLASSIFICATION	6.735674842454715E-4	DESIGN
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999607001741398	WITHOUT_CLASSIFICATION	3.929982586007648E-5	DESIGN
note early exit	WITHOUT_CLASSIFICATION	0.9997204346115759	WITHOUT_CLASSIFICATION	2.7956538842409634E-4	DESIGN
for backward-compatability	WITHOUT_CLASSIFICATION	0.9992252488974505	WITHOUT_CLASSIFICATION	7.747511025495638E-4	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.99859103841424	WITHOUT_CLASSIFICATION	0.0014089615857598803	DESIGN
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9997558753808619	WITHOUT_CLASSIFICATION	2.441246191382173E-4	DESIGN
in case we were deserialized in a different jvm look for an instance with the same name (alternatively we could do an actual jndi lookup here.)	WITHOUT_CLASSIFICATION	0.9801222411619923	WITHOUT_CLASSIFICATION	0.019877758838007666	DESIGN
must add to jndi _after_ adding to hashmaps because some jndi servers use serialization	WITHOUT_CLASSIFICATION	0.9992582955558575	WITHOUT_CLASSIFICATION	7.417044441424213E-4	DESIGN
make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9937545482181306	WITHOUT_CLASSIFICATION	0.006245451781869337	DESIGN
for each of the defined parameters make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999991010306217	WITHOUT_CLASSIFICATION	8.989693782910296E-7	DESIGN
we never need to apply locks to the sql	WITHOUT_CLASSIFICATION	0.9988938586451156	WITHOUT_CLASSIFICATION	0.0011061413548844252	DESIGN
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995912240320872	WITHOUT_CLASSIFICATION	4.087759679127373E-4	DESIGN
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996451173413314	WITHOUT_CLASSIFICATION	3.54882658668574E-4	DESIGN
during deserialization we need to reconnect all proxies and collections to this session as well as the entityentry and collectionentry instances these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.6146486030565771	WITHOUT_CLASSIFICATION	0.385351396943423	DESIGN
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999139335973659	WITHOUT_CLASSIFICATION	8.60664026340908E-5	DESIGN
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999228338834919	WITHOUT_CLASSIFICATION	7.716611650813398E-5	DESIGN
final boolean forcecacherefresh	WITHOUT_CLASSIFICATION	0.9999325177084407	WITHOUT_CLASSIFICATION	6.74822915592257E-5	DESIGN
final boolean forcecacherefresh	WITHOUT_CLASSIFICATION	0.9999325177084407	WITHOUT_CLASSIFICATION	6.74822915592257E-5	DESIGN
first try to load it from the temp pc associated to this ss	WITHOUT_CLASSIFICATION	0.9999230595038001	WITHOUT_CLASSIFICATION	7.694049619986048E-5	DESIGN
if the metadata allowed proxy creation and caller did not request forceful eager loading generate a proxy	WITHOUT_CLASSIFICATION	0.9999993291198903	WITHOUT_CLASSIFICATION	6.708801097966735E-7	DESIGN
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9997545807424582	WITHOUT_CLASSIFICATION	2.454192575418498E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9998946914420034	WITHOUT_CLASSIFICATION	1.0530855799670046E-4	DESIGN
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9990087923604757	WITHOUT_CLASSIFICATION	9.91207639524374E-4	DESIGN
after setting values to object entitymode	WITHOUT_CLASSIFICATION	0.9999782771064876	WITHOUT_CLASSIFICATION	2.1722893512494824E-5	DESIGN
for ejb3	WITHOUT_CLASSIFICATION	0.9998022555918447	WITHOUT_CLASSIFICATION	1.9774440815540997E-4	DESIGN
just ignore	WITHOUT_CLASSIFICATION	0.9999602862300568	WITHOUT_CLASSIFICATION	3.9713769943139604E-5	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9982843281505541	WITHOUT_CLASSIFICATION	0.0017156718494459329	DESIGN
saveorupdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998578638024812	WITHOUT_CLASSIFICATION	1.421361975187262E-4	DESIGN
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998641457188947	WITHOUT_CLASSIFICATION	1.3585428110523748E-4	DESIGN
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998578638024812	WITHOUT_CLASSIFICATION	1.421361975187262E-4	DESIGN
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998578638024812	WITHOUT_CLASSIFICATION	1.421361975187262E-4	DESIGN
persistonflush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998578638024812	WITHOUT_CLASSIFICATION	1.421361975187262E-4	DESIGN
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998582751453994	WITHOUT_CLASSIFICATION	1.4172485460070615E-4	DESIGN
saveorupdatecopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998578638024812	WITHOUT_CLASSIFICATION	1.421361975187262E-4	DESIGN
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998467008941134	WITHOUT_CLASSIFICATION	1.532991058865335E-4	DESIGN
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998578638024812	WITHOUT_CLASSIFICATION	1.421361975187262E-4	DESIGN
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998578638024812	WITHOUT_CLASSIFICATION	1.421361975187262E-4	DESIGN
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998578638024812	WITHOUT_CLASSIFICATION	1.421361975187262E-4	DESIGN
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9978825415022163	WITHOUT_CLASSIFICATION	0.0021174584977835765	DESIGN
this is an internal error of some sort	WITHOUT_CLASSIFICATION	0.9861673423862277	WITHOUT_CLASSIFICATION	0.01383265761377238	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9453281627181077	WITHOUT_CLASSIFICATION	0.05467183728189225	DESIGN
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999858902759217	WITHOUT_CLASSIFICATION	1.4109724078412976E-5	DESIGN
if it was previously unreferenced we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.999845622437583	WITHOUT_CLASSIFICATION	1.5437756241699555E-4	DESIGN
not for internal use	WITHOUT_CLASSIFICATION	0.9973240766586778	WITHOUT_CLASSIFICATION	0.0026759233413221574	DESIGN
otherwise we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9929988014440189	WITHOUT_CLASSIFICATION	0.0070011985559811024	DESIGN
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.7295507686797034	WITHOUT_CLASSIFICATION	0.27044923132029675	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9453281627181077	WITHOUT_CLASSIFICATION	0.05467183728189225	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9453281627181077	WITHOUT_CLASSIFICATION	0.05467183728189225	DESIGN
if it is initialized see if the underlying instance is contained since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9986947307570183	WITHOUT_CLASSIFICATION	0.001305269242981666	DESIGN
basically just an adapted copy of find(criteriaimpl)	WITHOUT_CLASSIFICATION	0.9960077211088008	WITHOUT_CLASSIFICATION	0.003992278891199178	DESIGN
it is possible for this method to be called during flush processing so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9886163672230807	WITHOUT_CLASSIFICATION	0.011383632776919356	DESIGN
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9983165547561389	WITHOUT_CLASSIFICATION	0.0016834452438610936	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.999977561514074	WITHOUT_CLASSIFICATION	2.2438485926063745E-5	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.99859103841424	WITHOUT_CLASSIFICATION	0.0014089615857598803	DESIGN
we need to writeobject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9995571005232268	WITHOUT_CLASSIFICATION	4.4289947677325365E-4	DESIGN
the old-time stand-by	WITHOUT_CLASSIFICATION	0.9994937368411425	WITHOUT_CLASSIFICATION	5.062631588575204E-4	DESIGN
parameter bind values	WITHOUT_CLASSIFICATION	0.9994131391773245	WITHOUT_CLASSIFICATION	5.868608226753791E-4	DESIGN
parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9971491656980063	WITHOUT_CLASSIFICATION	0.002850834301993858	DESIGN
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999792698692017	WITHOUT_CLASSIFICATION	2.0730130798273095E-5	DESIGN
execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999654838184381	WITHOUT_CLASSIFICATION	3.4516181561898714E-4	DESIGN
we have a cglib enhanced entity	WITHOUT_CLASSIFICATION	0.9988119480104393	WITHOUT_CLASSIFICATION	0.001188051989560808	DESIGN
we have a cglib enhanced entity	WITHOUT_CLASSIFICATION	0.9988119480104393	WITHOUT_CLASSIFICATION	0.001188051989560808	DESIGN
we have a javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9988119480104393	WITHOUT_CLASSIFICATION	0.001188051989560808	DESIGN
we have a javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9988119480104393	WITHOUT_CLASSIFICATION	0.001188051989560808	DESIGN
fieldinterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998322418794735	WITHOUT_CLASSIFICATION	1.6775812052643053E-4	DESIGN
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9958263241748518	WITHOUT_CLASSIFICATION	0.004173675825148146	DESIGN
let's assume that there is only one lazy fetch group for now!	WITHOUT_CLASSIFICATION	0.9999938324426785	WITHOUT_CLASSIFICATION	6.1675573215459844E-6	DESIGN
fieldhandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998322418794735	WITHOUT_CLASSIFICATION	1.6775812052643053E-4	DESIGN
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.835708452091042	WITHOUT_CLASSIFICATION	0.1642915479089579	DESIGN
should probably no-op commit/rollback here at least in jta scenarios	WITHOUT_CLASSIFICATION	0.9267542691885357	WITHOUT_CLASSIFICATION	0.07324573081146438	DESIGN
base expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998973004812228	WITHOUT_CLASSIFICATION	1.0269951877716031E-4	DESIGN
various expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998285769991396	WITHOUT_CLASSIFICATION	1.7142300086024805E-4	DESIGN
explicitly perform no checking	WITHOUT_CLASSIFICATION	0.6847308216334594	WITHOUT_CLASSIFICATION	0.3152691783665405	DESIGN
used from testsuite	WITHOUT_CLASSIFICATION	0.969892168914809	WITHOUT_CLASSIFICATION	0.030107831085190922	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9996529230191676	WITHOUT_CLASSIFICATION	3.470769808323535E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9994785270872577	WITHOUT_CLASSIFICATION	5.214729127423224E-4	DESIGN
register synch stats.connect()	WITHOUT_CLASSIFICATION	0.9996732648600939	WITHOUT_CLASSIFICATION	3.2673513990610296E-4	DESIGN
noncritical swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9990983106371134	WITHOUT_CLASSIFICATION	9.016893628866313E-4	DESIGN
calls executebatch()	WITHOUT_CLASSIFICATION	0.9994830267435905	WITHOUT_CLASSIFICATION	5.169732564095349E-4	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999789595170674	WITHOUT_CLASSIFICATION	2.1040482932692824E-5	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999789595170674	WITHOUT_CLASSIFICATION	2.1040482932692824E-5	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999789595170674	WITHOUT_CLASSIFICATION	2.1040482932692824E-5	DESIGN
sybase driver (jconnect) throwing npe here in certain cases but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9965957717139676	WITHOUT_CLASSIFICATION	0.0034042282860323883	DESIGN
see explanation above	WITHOUT_CLASSIFICATION	0.9995838735479745	WITHOUT_CLASSIFICATION	4.16126452025509E-4	DESIGN
if we are in the process of releasing no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.7981169413302862	WITHOUT_CLASSIFICATION	0.2018830586697138	DESIGN
early exit!!!!	WITHOUT_CLASSIFICATION	0.9997768558489954	WITHOUT_CLASSIFICATION	2.2314415100446982E-4	DESIGN
resultset impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998585259291605	WITHOUT_CLASSIFICATION	1.4147407083942934E-4	DESIGN
resultset impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998585259291605	WITHOUT_CLASSIFICATION	1.4147407083942934E-4	DESIGN
refer to comment in statefulpersistencecontext.addcollection()	WITHOUT_CLASSIFICATION	0.999961794249419	WITHOUT_CLASSIFICATION	3.820575058097864E-5	DESIGN
connectionmanager.callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998605554488919	WITHOUT_CLASSIFICATION	1.394445511082462E-4	DESIGN
note success = false because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999819056006973	WITHOUT_CLASSIFICATION	1.809439930270822E-5	DESIGN
we already have a callback registered either a local (org.hibernate.transaction) transaction has accepted callback responsibilities or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999465749217606	WITHOUT_CLASSIFICATION	5.3425078239438214E-5	DESIGN
the configured transaction-factory says it only supports local callback mode so no sense attempting to register a jta synchronization	WITHOUT_CLASSIFICATION	0.9938188449347913	WITHOUT_CLASSIFICATION	0.006181155065208682	DESIGN
transactions marked for rollback-only cause some tm impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9989835300793882	WITHOUT_CLASSIFICATION	0.001016469920611764	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997086037672483	WITHOUT_CLASSIFICATION	2.9139623275174526E-4	DESIGN
postinitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999701552950423	WITHOUT_CLASSIFICATION	2.9844704957670107E-5	DESIGN
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9996204609574071	WITHOUT_CLASSIFICATION	3.795390425928614E-4	DESIGN
todo for 4.0 private static final logger log = loggerfactory.getlogger( sqlstatementlogger.class ) this is the legacy logging 'category'	WITHOUT_CLASSIFICATION	0.675934662827906	WITHOUT_CLASSIFICATION	0.32406533717209396	DESIGN
note that for sequential scrolling we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9982559965165558	WITHOUT_CLASSIFICATION	0.001744003483444206	DESIGN
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9979717218311854	WITHOUT_CLASSIFICATION	0.002028278168814592	DESIGN
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9986398307179587	WITHOUT_CLASSIFICATION	0.0013601692820411875	DESIGN
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999807031715158	WITHOUT_CLASSIFICATION	1.9296828484236144E-5	DESIGN
sequentially read the result set in reverse until we recognize a change in the key value. at that point we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999382945164	WITHOUT_CLASSIFICATION	6.170548367587373E-8	DESIGN
read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999229554445	WITHOUT_CLASSIFICATION	7.70445555720548E-8	DESIGN
finally read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999998943415359	WITHOUT_CLASSIFICATION	1.0565846408907064E-7	DESIGN
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999995554768566	WITHOUT_CLASSIFICATION	4.4452314332651895E-7	DESIGN
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9993869300156865	WITHOUT_CLASSIFICATION	6.130699843135201E-4	DESIGN
this is equivalent to the old behavior	WITHOUT_CLASSIFICATION	0.9998397544028945	WITHOUT_CLASSIFICATION	1.6024559710548351E-4	DESIGN
if null owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999553548914715	WITHOUT_CLASSIFICATION	4.4645108528593085E-5	DESIGN
final string querystring	WITHOUT_CLASSIFICATION	0.9998076744013239	WITHOUT_CLASSIFICATION	1.9232559867608735E-4	DESIGN
if it was a reference to self don't need to nullify unless we are using native id generation in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999377327925583	WITHOUT_CLASSIFICATION	6.226720744168504E-5	DESIGN
end of array start filling again from start	WITHOUT_CLASSIFICATION	0.9999622738580113	WITHOUT_CLASSIFICATION	3.772614198870163E-5	DESIGN
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to persistentcollection#endread) we scan the internal loadingcollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endread processing.	WITHOUT_CLASSIFICATION	0.9996183265715353	WITHOUT_CLASSIFICATION	3.8167342846479784E-4	DESIGN
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999308005901723	WITHOUT_CLASSIFICATION	6.919940982773026E-5	DESIGN
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9979580228417242	WITHOUT_CLASSIFICATION	0.002041977158275753	DESIGN
first we need to suspend any current jta transaction and obtain a jdbc connection	WITHOUT_CLASSIFICATION	0.9998497473712846	WITHOUT_CLASSIFICATION	1.5025262871542125E-4	DESIGN
getresultlist(results)	WITHOUT_CLASSIFICATION	0.9990988684490842	WITHOUT_CLASSIFICATION	9.011315509158068E-4	DESIGN
if we only returned one entity query by key is more efficient	WITHOUT_CLASSIFICATION	0.9992528468953358	WITHOUT_CLASSIFICATION	7.471531046641893E-4	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9984805306127964	WITHOUT_CLASSIFICATION	0.0015194693872035531	DESIGN
handle empty collection	WITHOUT_CLASSIFICATION	0.9905761155603763	WITHOUT_CLASSIFICATION	0.00942388443962372	DESIGN
else no collection element but also no owner	WITHOUT_CLASSIFICATION	0.999993167809377	WITHOUT_CLASSIFICATION	6.832190623013226E-6	DESIGN
handle empty collections	WITHOUT_CLASSIFICATION	0.9962151224366644	WITHOUT_CLASSIFICATION	0.0037848775633356215	DESIGN
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9927834320513875	WITHOUT_CLASSIFICATION	0.007216567948612433	DESIGN
validate() instances of validatable	WITHOUT_CLASSIFICATION	0.9996876107698441	WITHOUT_CLASSIFICATION	3.123892301558503E-4	DESIGN
if we know there is exactly 1 row we can skip. it would be great if we could _always_ skip this it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.7043199126133165	WITHOUT_CLASSIFICATION	0.2956800873866835	DESIGN
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9930015786912374	WITHOUT_CLASSIFICATION	0.006998421308762533	DESIGN
null version means the object is in the process of being loaded somewhere else in the resultset	WITHOUT_CLASSIFICATION	0.9997242611253898	WITHOUT_CLASSIFICATION	2.7573887461022776E-4	DESIGN
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.975851062276273	WITHOUT_CLASSIFICATION	0.024148937723726876	DESIGN
use the id passed in	WITHOUT_CLASSIFICATION	0.9997300907857515	WITHOUT_CLASSIFICATION	2.6990921424851984E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9998284956419117	WITHOUT_CLASSIFICATION	1.7150435808827556E-4	DESIGN
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9998296277550537	WITHOUT_CLASSIFICATION	1.70372244946381E-4	DESIGN
no point doing this if none was requested	WITHOUT_CLASSIFICATION	0.9999434495597385	WITHOUT_CLASSIFICATION	5.6550440261532396E-5	DESIGN
if the object is already loaded return the loaded one	WITHOUT_CLASSIFICATION	0.9996013881573124	WITHOUT_CLASSIFICATION	3.986118426875659E-4	DESIGN
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9984245317722297	WITHOUT_CLASSIFICATION	0.0015754682277703224	DESIGN
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9996951532033254	WITHOUT_CLASSIFICATION	3.048467966746821E-4	DESIGN
the load() which takes an entity does not pass an entityname	WITHOUT_CLASSIFICATION	0.999938390270691	WITHOUT_CLASSIFICATION	6.160972930901579E-5	DESIGN
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9992293602115777	WITHOUT_CLASSIFICATION	7.706397884222838E-4	DESIGN
look for a proxy	WITHOUT_CLASSIFICATION	0.9999355573863136	WITHOUT_CLASSIFICATION	6.444261368649061E-5	DESIGN
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9996325212238244	WITHOUT_CLASSIFICATION	3.6747877617561274E-4	DESIGN
its the given optional object	WITHOUT_CLASSIFICATION	0.9998720152555123	WITHOUT_CLASSIFICATION	1.2798474448774013E-4	DESIGN
instantiate a new instance	WITHOUT_CLASSIFICATION	0.999357040725263	WITHOUT_CLASSIFICATION	6.429592747370566E-4	DESIGN
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9991206889165094	WITHOUT_CLASSIFICATION	8.793110834905727E-4	DESIGN
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9926191906148584	WITHOUT_CLASSIFICATION	0.0073808093851415344	DESIGN
will be ignored using the existing entry instead	WITHOUT_CLASSIFICATION	0.9996520443085137	WITHOUT_CLASSIFICATION	3.479556914862409E-4	DESIGN
key is an entity involved with the operation performed by the listener value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999991794758171	WITHOUT_CLASSIFICATION	8.205241830418931E-7	DESIGN
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9938963263309952	WITHOUT_CLASSIFICATION	0.006103673669004769	DESIGN
get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9995833811613881	WITHOUT_CLASSIFICATION	4.166188386119883E-4	DESIGN
ok in normal hibernate usage to delete a detached entity jpa however forbids it thus this is a hook for hem to affect this behavior	WITHOUT_CLASSIFICATION	0.9998113709426059	WITHOUT_CLASSIFICATION	1.886290573941939E-4	DESIGN
the entry will be removed after the flush and will no longer override the stale snapshot this is now handled by removeentity() in entitydeleteaction persistencecontext.removedatabasesnapshot(key)	WITHOUT_CLASSIFICATION	0.994284694873919	WITHOUT_CLASSIFICATION	0.0057153051260808736	DESIGN
addinitializedcollection(collection persister id)	WITHOUT_CLASSIFICATION	0.9988317667420288	WITHOUT_CLASSIFICATION	0.0011682332579711927	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9997941099815382	WITHOUT_CLASSIFICATION	2.0589001846191445E-4	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9997941099815382	WITHOUT_CLASSIFICATION	2.0589001846191445E-4	DESIGN
|| oj.getjoinable().consumescollectionalias()	WITHOUT_CLASSIFICATION	0.9997088403104988	WITHOUT_CLASSIFICATION	2.911596895011638E-4	DESIGN
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9828014297496961	WITHOUT_CLASSIFICATION	0.017198570250303857	DESIGN
code to handle subclasses of topclass	WITHOUT_CLASSIFICATION	0.9994675438628172	WITHOUT_CLASSIFICATION	5.324561371827132E-4	DESIGN
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999612900341102	WITHOUT_CLASSIFICATION	3.870996588989753E-5	DESIGN
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999682510230162	WITHOUT_CLASSIFICATION	3.174897698376272E-5	DESIGN
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9926504242425439	WITHOUT_CLASSIFICATION	0.007349575757456118	DESIGN
synchronized to avoid multi-thread access issues defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.992078172717914	WITHOUT_CLASSIFICATION	0.007921827282085956	DESIGN
allows various loaders (ok mainly the queryloader ) to check whether scrolling of their result set should be allowed. by default it is allowed.	WITHOUT_CLASSIFICATION	0.9996036740016664	WITHOUT_CLASSIFICATION	3.96325998333651E-4	DESIGN
before adding to collection!	WITHOUT_CLASSIFICATION	0.9995261007242617	WITHOUT_CLASSIFICATION	4.7389927573825163E-4	DESIGN
if the current depth is 0 the root thing being loaded is the many-to-many collection itself. here it is alright to use an inner join	WITHOUT_CLASSIFICATION	0.9999452297055719	WITHOUT_CLASSIFICATION	5.4770294428103845E-5	DESIGN
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999995852627769	WITHOUT_CLASSIFICATION	4.1473722315707337E-7	DESIGN
simple because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element	WITHOUT_CLASSIFICATION	0.9996454537596212	WITHOUT_CLASSIFICATION	3.5454624037878135E-4	DESIGN
a composite key	WITHOUT_CLASSIFICATION	0.9991238690982416	WITHOUT_CLASSIFICATION	8.761309017584291E-4	DESIGN
if no batch use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9998847531947294	WITHOUT_CLASSIFICATION	1.1524680527068794E-4	DESIGN
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9437260922285479	WITHOUT_CLASSIFICATION	0.05627390777145222	DESIGN
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9995019402358809	WITHOUT_CLASSIFICATION	4.980597641189742E-4	DESIGN
&& etype.isreferencetoprimarykey()	WITHOUT_CLASSIFICATION	0.9985147309558656	WITHOUT_CLASSIFICATION	0.0014852690441344047	DESIGN
it might still need to apply a collection ordering based on a many-to-many defined order-by	WITHOUT_CLASSIFICATION	0.8742378396170515	WITHOUT_CLASSIFICATION	0.12576216038294843	DESIGN
if a composite key use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching todo unnecessary for databases with ansi-style joins	WITHOUT_CLASSIFICATION	0.5405314566603746	WITHOUT_CLASSIFICATION	0.45946854333962545	DESIGN
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9971617886579489	WITHOUT_CLASSIFICATION	0.0028382113420511138	DESIGN
we found it	WITHOUT_CLASSIFICATION	0.9996930572649727	WITHOUT_CLASSIFICATION	3.069427350273897E-4	DESIGN
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9998582712390779	WITHOUT_CLASSIFICATION	1.4172876092205717E-4	DESIGN
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9997216692102194	WITHOUT_CLASSIFICATION	2.7833078978057864E-4	DESIGN
note unlike all other loaders this one is not multithreaded or cacheable!!	WITHOUT_CLASSIFICATION	0.9843505584706417	WITHOUT_CLASSIFICATION	0.01564944152935838	DESIGN
the user visible aliases which are unknown to the superclass these are not the actual "physical" sql aliases	WITHOUT_CLASSIFICATION	0.9999998405388021	WITHOUT_CLASSIFICATION	1.5946119793618287E-7	DESIGN
root entity comes last	WITHOUT_CLASSIFICATION	0.9994500029303893	WITHOUT_CLASSIFICATION	5.49997069610669E-4	DESIGN
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999757187629174	WITHOUT_CLASSIFICATION	2.4281237082625874E-5	DESIGN
alias may be null early exit	WITHOUT_CLASSIFICATION	0.9999047593019905	WITHOUT_CLASSIFICATION	9.524069800948458E-5	DESIGN
if it is a compound path	WITHOUT_CLASSIFICATION	0.9994008490212121	WITHOUT_CLASSIFICATION	5.991509787879013E-4	DESIGN
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9988727101620553	WITHOUT_CLASSIFICATION	0.0011272898379447451	DESIGN
if its the root criteria we are done	WITHOUT_CLASSIFICATION	0.9999771953365848	WITHOUT_CLASSIFICATION	2.2804663415222253E-5	DESIGN
otherwise recurse	WITHOUT_CLASSIFICATION	0.9996113511312319	WITHOUT_CLASSIFICATION	3.8864886876811285E-4	DESIGN
the criteria instance	WITHOUT_CLASSIFICATION	0.9998886443774906	WITHOUT_CLASSIFICATION	1.1135562250943589E-4	DESIGN
the entity name	WITHOUT_CLASSIFICATION	0.9993634728174217	WITHOUT_CLASSIFICATION	6.365271825784004E-4	DESIGN
not found in inner query try the outer query	WITHOUT_CLASSIFICATION	0.9999086965998418	WITHOUT_CLASSIFICATION	9.130340015820706E-5	DESIGN
not found in inner query try the outer query	WITHOUT_CLASSIFICATION	0.9999086965998418	WITHOUT_CLASSIFICATION	9.130340015820706E-5	DESIGN
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999704235891502	WITHOUT_CLASSIFICATION	2.957641084975388E-5	DESIGN
should never happen i think	WITHOUT_CLASSIFICATION	0.9891213706157165	WITHOUT_CLASSIFICATION	0.010878629384283604	DESIGN
detect discriminator values	WITHOUT_CLASSIFICATION	0.9997825853862211	WITHOUT_CLASSIFICATION	2.174146137787825E-4	DESIGN
convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9986954567083042	WITHOUT_CLASSIFICATION	0.0013045432916959363	DESIGN
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999414353467307	WITHOUT_CLASSIFICATION	5.85646532692272E-5	DESIGN
it does not refer to an alias of a projection look for a property	WITHOUT_CLASSIFICATION	0.9997455689998969	WITHOUT_CLASSIFICATION	2.544310001031342E-4	DESIGN
otherwise this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9982756694329663	WITHOUT_CLASSIFICATION	0.0017243305670336599	DESIGN
currently not cachable if autodiscover types is in effect (e.g. "select ")	WITHOUT_CLASSIFICATION	0.9989455785152744	WITHOUT_CLASSIFICATION	0.0010544214847255557	DESIGN
private final string[] sqlaliases private final string[] sqlaliassuffixes	WITHOUT_CLASSIFICATION	0.9995480441606879	WITHOUT_CLASSIFICATION	4.519558393121348E-4	DESIGN
this is only needed (afaict) for resulttransformer processing	WITHOUT_CLASSIFICATION	0.9985943053619786	WITHOUT_CLASSIFICATION	0.0014056946380213424	DESIGN
determine if the collection elements are entities	WITHOUT_CLASSIFICATION	0.9999294098379832	WITHOUT_CLASSIFICATION	7.059016201684044E-5	DESIGN
build an array with indices equal to the total number of actual returns in the result hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9997872732761037	WITHOUT_CLASSIFICATION	2.1272672389629962E-4	DESIGN
replace {.} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9994270017944369	WITHOUT_CLASSIFICATION	5.729982055630448E-4	DESIGN
no additional open braces found in the string append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999635849866119	WITHOUT_CLASSIFICATION	3.641501338816559E-5	DESIGN
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9997106170301832	WITHOUT_CLASSIFICATION	2.89382969816859E-4	DESIGN
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999916360144718	WITHOUT_CLASSIFICATION	8.363985528163592E-6	DESIGN
passing through anything we do not know to support jdbc escape sequences hb-898	WITHOUT_CLASSIFICATION	0.9994225544006626	WITHOUT_CLASSIFICATION	5.774455993373308E-4	DESIGN
passing through anything we do not know to support jdbc escape sequences hb-898	WITHOUT_CLASSIFICATION	0.9994225544006626	WITHOUT_CLASSIFICATION	5.774455993373308E-4	DESIGN
the current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999508549811702	WITHOUT_CLASSIFICATION	4.914501882981604E-5	DESIGN
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9983164941143475	WITHOUT_CLASSIFICATION	0.0016835058856524744	DESIGN
possibly handle something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999062341662218	WITHOUT_CLASSIFICATION	9.376583377811391E-5	DESIGN
let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9998765165209247	WITHOUT_CLASSIFICATION	1.234834790752382E-4	DESIGN
private final list persisters = new arraylist()	WITHOUT_CLASSIFICATION	0.9999206847562917	WITHOUT_CLASSIFICATION	7.9315243708384E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9994785270872577	WITHOUT_CLASSIFICATION	5.214729127423224E-4	DESIGN
note early exit!	WITHOUT_CLASSIFICATION	0.9991287202173869	WITHOUT_CLASSIFICATION	8.712797826130906E-4	DESIGN
private final list scalartypes = new arraylist() private final list scalarcolumnaliases = new arraylist()	WITHOUT_CLASSIFICATION	0.9999730895579829	WITHOUT_CLASSIFICATION	2.6910442017085814E-5	DESIGN
now process the returns	WITHOUT_CLASSIFICATION	0.9997987968017292	WITHOUT_CLASSIFICATION	2.0120319827075195E-4	DESIGN
private list collectionowneraliases = new arraylist() private list collectionaliases = new arraylist() private list collectionpersisters = new arraylist() private list collectionresults = new arraylist()	WITHOUT_CLASSIFICATION	0.9999209839006742	WITHOUT_CLASSIFICATION	7.901609932585214E-5	DESIGN
already been processed	WITHOUT_CLASSIFICATION	0.9990026965688145	WITHOUT_CLASSIFICATION	9.973034311854373E-4	DESIGN
already been processed	WITHOUT_CLASSIFICATION	0.9990026965688145	WITHOUT_CLASSIFICATION	9.973034311854373E-4	DESIGN
make sure the owner alias is known	WITHOUT_CLASSIFICATION	0.9999963756353323	WITHOUT_CLASSIFICATION	3.6243646677868388E-6	DESIGN
first break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9990621887915597	WITHOUT_CLASSIFICATION	9.378112084401941E-4	DESIGN
scalarcolumnaliases.add( typereturn.getcolumnalias() ) scalartypes.add( typereturn.gettype() )	WITHOUT_CLASSIFICATION	0.9981620324198082	WITHOUT_CLASSIFICATION	0.0018379675801917853	DESIGN
if this return's alias has not been processed yet do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.999909687325394	WITHOUT_CLASSIFICATION	9.031267460603905E-5	DESIGN
collectionowneraliases.add( owneralias )	WITHOUT_CLASSIFICATION	0.9981620324198082	WITHOUT_CLASSIFICATION	0.0018379675801917853	DESIGN
for merging of versioned entities we consider the version having been changed only when 1) the two version values are different and 2) the target actually represents database state! this second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9993037758674731	WITHOUT_CLASSIFICATION	6.962241325268304E-4	DESIGN
this is the second pass through on a merge op so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.99907640424029	WITHOUT_CLASSIFICATION	9.235957597099213E-4	DESIGN
early exit	WITHOUT_CLASSIFICATION	0.9999583108493363	WITHOUT_CLASSIFICATION	4.168915066369202E-5	DESIGN
cascade-save to collections after the collection owner was saved	WITHOUT_CLASSIFICATION	0.999949797495561	WITHOUT_CLASSIFICATION	5.0202504438990414E-5	DESIGN
initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9985004250709919	WITHOUT_CLASSIFICATION	0.0014995749290080372	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.999512876614409	WITHOUT_CLASSIFICATION	4.8712338559104803E-4	DESIGN
currently only the hibernate-supplied dbtimestamptype is supported here	WITHOUT_CLASSIFICATION	0.9990117772673638	WITHOUT_CLASSIFICATION	9.882227326362023E-4	DESIGN
this is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9789717285893724	WITHOUT_CLASSIFICATION	0.021028271410627547	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.999150087783826	WITHOUT_CLASSIFICATION	8.499122161740837E-4	DESIGN
not so sure this is even valid subtree. but if it was it'd represent two unrelated table references	WITHOUT_CLASSIFICATION	0.9993302984176459	WITHOUT_CLASSIFICATION	6.697015823540815E-4	DESIGN
(not (gt a b) ) => (le a b)	WITHOUT_CLASSIFICATION	0.8783472772970674	WITHOUT_CLASSIFICATION	0.12165272270293255	DESIGN
private type[] sqlresulttypes	WITHOUT_CLASSIFICATION	0.9965191254674375	WITHOUT_CLASSIFICATION	0.003480874532562505	DESIGN
include the discriminator and class-level where but not filters	WITHOUT_CLASSIFICATION	0.9999748691312081	WITHOUT_CLASSIFICATION	2.5130868791791992E-5	DESIGN
sqlresulttypes = selectclause.getsqlresulttypes()	WITHOUT_CLASSIFICATION	0.9998963213616008	WITHOUT_CLASSIFICATION	1.0367863839925279E-4	DESIGN
by default	WITHOUT_CLASSIFICATION	0.9999596279998786	WITHOUT_CLASSIFICATION	4.037200012143197E-5	DESIGN
this is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9978867909159328	WITHOUT_CLASSIFICATION	0.002113209084067307	DESIGN
-- loader implementation --	WITHOUT_CLASSIFICATION	0.9998176343710443	WITHOUT_CLASSIFICATION	1.823656289557239E-4	DESIGN
-- loader overrides --	WITHOUT_CLASSIFICATION	0.9995235858738448	WITHOUT_CLASSIFICATION	4.7641412615523137E-4	DESIGN
(not (is_null a b) ) => (is_not_null a b)	WITHOUT_CLASSIFICATION	0.9378951289259424	WITHOUT_CLASSIFICATION	0.06210487107405767	DESIGN
none because its the requested lock mode not the actual!	WITHOUT_CLASSIFICATION	0.999692835761412	WITHOUT_CLASSIFICATION	3.071642385880134E-4	DESIGN
meant to handle dynamic instantiation queries	WITHOUT_CLASSIFICATION	0.9996172739166275	WITHOUT_CLASSIFICATION	3.8272608337250005E-4	DESIGN
--- query translator methods ---	WITHOUT_CLASSIFICATION	0.999801091280793	WITHOUT_CLASSIFICATION	1.989087192069772E-4	DESIGN
-- implementation private methods --	WITHOUT_CLASSIFICATION	0.9984832863064899	WITHOUT_CLASSIFICATION	0.0015167136935101493	DESIGN
deduplicate unique constraints sharing the same columns this is needed by hibernate annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999996313578815	WITHOUT_CLASSIFICATION	3.686421185117055E-7	DESIGN
try to find out the name of the primary key to create it as identity if the identitygenerator is used	WITHOUT_CLASSIFICATION	0.9986765267605913	WITHOUT_CLASSIFICATION	0.001323473239408742	DESIGN
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9992082587835164	WITHOUT_CLASSIFICATION	7.917412164835595E-4	DESIGN
prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999994609478312	WITHOUT_CLASSIFICATION	5.390521688581315E-7	DESIGN
used also for generation of fk names!	WITHOUT_CLASSIFICATION	0.7491950010446333	WITHOUT_CLASSIFICATION	0.25080499895536673	DESIGN
usually useless	WITHOUT_CLASSIFICATION	0.9991945543121408	WITHOUT_CLASSIFICATION	8.054456878591474E-4	DESIGN
added this caching as i noticed that gettype() is being called multiple times	WITHOUT_CLASSIFICATION	0.9819505181899296	WITHOUT_CLASSIFICATION	0.01804948181007028	DESIGN
do not add unique constraint on db not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9985694680587397	WITHOUT_CLASSIFICATION	0.0014305319412602898	DESIGN
for backward compatibility disable this	WITHOUT_CLASSIFICATION	0.9998205070661289	WITHOUT_CLASSIFICATION	1.794929338711957E-4	DESIGN
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9986372765561915	WITHOUT_CLASSIFICATION	0.0013627234438085341	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9988480673750944	WITHOUT_CLASSIFICATION	0.0011519326249056527	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9988480673750944	WITHOUT_CLASSIFICATION	0.0011519326249056527	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999739397927501	WITHOUT_CLASSIFICATION	2.606020724999143E-5	DESIGN
primary key constraint	WITHOUT_CLASSIFICATION	0.9969290430566624	WITHOUT_CLASSIFICATION	0.003070956943337491	DESIGN
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999487387833532	WITHOUT_CLASSIFICATION	5.126121664679656E-5	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9999722213505767	WITHOUT_CLASSIFICATION	2.7778649423150443E-5	DESIGN
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9910299841091783	WITHOUT_CLASSIFICATION	0.008970015890821732	DESIGN
an identifier mapper => getkey will be included in the getnonduplicatedpropertyiterator() and checked later so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9997412447188171	WITHOUT_CLASSIFICATION	2.587552811829068E-4	DESIGN
if the hibernate-mapping did not specify a schema/catalog use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping or as params they will already be initialized and will override the values set here (they are in identifiergeneratorproperties)	WITHOUT_CLASSIFICATION	0.999884191430913	WITHOUT_CLASSIFICATION	1.158085690869855E-4	DESIGN
pass the entity-name if not a collection-id	WITHOUT_CLASSIFICATION	0.9999053898796629	WITHOUT_CLASSIFICATION	9.461012033708473E-5	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999739397927501	WITHOUT_CLASSIFICATION	2.606020724999143E-5	DESIGN
primary key constraint	WITHOUT_CLASSIFICATION	0.9969290430566624	WITHOUT_CLASSIFICATION	0.003070956943337491	DESIGN
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999675660288501	WITHOUT_CLASSIFICATION	3.243397114991492E-5	DESIGN
needed to satisfy keyvalue	WITHOUT_CLASSIFICATION	0.9995601285825596	WITHOUT_CLASSIFICATION	4.3987141744035685E-4	DESIGN
empty means no scoping	WITHOUT_CLASSIFICATION	0.9997252302089513	WITHOUT_CLASSIFICATION	2.7476979104868203E-4	DESIGN
index should be last column listed	WITHOUT_CLASSIFICATION	0.999957168014281	WITHOUT_CLASSIFICATION	4.283198571899979E-5	DESIGN
if it is a formula index use the element columns in the pk	WITHOUT_CLASSIFICATION	0.9999671189840138	WITHOUT_CLASSIFICATION	3.288101598626808E-5	DESIGN
don't create a unique key 'cos some databases don't like a uk on nullable columns	WITHOUT_CLASSIFICATION	0.9997631905455574	WITHOUT_CLASSIFICATION	2.3680945444261317E-4	DESIGN
arraylist list = new arraylist()list.addall( getkey().getconstraintcolumns() )list.addall( getindex().getconstraintcolumns() )getcollectiontable().createuniquekey(list)	WITHOUT_CLASSIFICATION	0.9999813090359719	WITHOUT_CLASSIFICATION	1.8690964028092365E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.9998003318979424	WITHOUT_CLASSIFICATION	1.9966810205768084E-4	DESIGN
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999006811717839	WITHOUT_CLASSIFICATION	9.93188282161443E-5	DESIGN
todo we could just return all false	WITHOUT_CLASSIFICATION	0.8886447214510527	DESIGN	0.11135527854894735	WITHOUT_CLASSIFICATION
the case of a foreign key to something other than the pk is handled in createpropertyrefconstraints	WITHOUT_CLASSIFICATION	0.9977559146189254	WITHOUT_CLASSIFICATION	0.0022440853810746673	DESIGN
todo we could just return all false	WITHOUT_CLASSIFICATION	0.8886447214510527	DESIGN	0.11135527854894735	WITHOUT_CLASSIFICATION
if the property mapping consists of all formulas make it non-updateable	WITHOUT_CLASSIFICATION	0.9999901283663472	WITHOUT_CLASSIFICATION	9.871633652930734E-6	DESIGN
columnupdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9997088403104988	WITHOUT_CLASSIFICATION	2.911596895011638E-4	DESIGN
if the property mapping consists of all formulas make it insertable	WITHOUT_CLASSIFICATION	0.9999901283663472	WITHOUT_CLASSIFICATION	9.871633652930734E-6	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997273353361796	WITHOUT_CLASSIFICATION	2.726646638203707E-4	DESIGN
expected type is intrinsic here	WITHOUT_CLASSIFICATION	0.9996984035376488	WITHOUT_CLASSIFICATION	3.015964623511995E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9998003318979424	WITHOUT_CLASSIFICATION	1.9966810205768084E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9998003318979424	WITHOUT_CLASSIFICATION	1.9966810205768084E-4	DESIGN
return memberpersister.getpropertytype(propertyname)	WITHOUT_CLASSIFICATION	0.9994572206984634	WITHOUT_CLASSIFICATION	5.427793015365254E-4	DESIGN
return memberpersister.tocolumns(alias propertyname)	WITHOUT_CLASSIFICATION	0.9994581814313408	WITHOUT_CLASSIFICATION	5.418185686590988E-4	DESIGN
return memberpersister.gettype()	WITHOUT_CLASSIFICATION	0.9994572206984634	WITHOUT_CLASSIFICATION	5.427793015365254E-4	DESIGN
&& !indexisformula	WITHOUT_CLASSIFICATION	0.9987444537236375	WITHOUT_CLASSIFICATION	0.0012555462763625405	DESIGN
return !isonetomany()	WITHOUT_CLASSIFICATION	0.9988653805638592	WITHOUT_CLASSIFICATION	0.0011346194361408358	DESIGN
instanceof associationtype	WITHOUT_CLASSIFICATION	0.9959001158842381	WITHOUT_CLASSIFICATION	0.004099884115761893	DESIGN
we need to determine the best way to know that two joinables represent a single many-to-many	WITHOUT_CLASSIFICATION	0.7301454392799219	WITHOUT_CLASSIFICATION	0.2698545607200781	DESIGN
strip leading ''	WITHOUT_CLASSIFICATION	0.9997184281725926	WITHOUT_CLASSIFICATION	2.815718274073333E-4	DESIGN
public boolean issubselectloadable()	WITHOUT_CLASSIFICATION	0.9985355314824292	WITHOUT_CLASSIFICATION	0.0014644685175707502	DESIGN
key	WITHOUT_CLASSIFICATION	0.999869421354832	WITHOUT_CLASSIFICATION	1.3057864516801627E-4	DESIGN
columns	WITHOUT_CLASSIFICATION	0.9999500622707317	WITHOUT_CLASSIFICATION	4.99377292682186E-5	DESIGN
sql statements	WITHOUT_CLASSIFICATION	0.9999096872918573	WITHOUT_CLASSIFICATION	9.031270814274994E-5	DESIGN
extra information about the element type	WITHOUT_CLASSIFICATION	0.9997779710113256	WITHOUT_CLASSIFICATION	2.220289886743118E-4	DESIGN
types	WITHOUT_CLASSIFICATION	0.9998060505071542	WITHOUT_CLASSIFICATION	1.9394949284584937E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999739397927501	WITHOUT_CLASSIFICATION	2.606020724999143E-5	DESIGN
private final string unquotedidentifiercolumnname	WITHOUT_CLASSIFICATION	0.999643650511356	WITHOUT_CLASSIFICATION	3.5634948864398714E-4	DESIGN
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9998473350972052	WITHOUT_CLASSIFICATION	1.5266490279469715E-4	DESIGN
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9998312901134961	WITHOUT_CLASSIFICATION	1.687098865039982E-4	DESIGN
nativesql collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.999930115024077	WITHOUT_CLASSIFICATION	6.988497592295272E-5	DESIGN
unquotedkeycolumnnames = stringhelper.unquote(keycolumnaliases)	WITHOUT_CLASSIFICATION	0.9998963213616008	WITHOUT_CLASSIFICATION	1.0367863839925279E-4	DESIGN
element	WITHOUT_CLASSIFICATION	0.9998202422916159	WITHOUT_CLASSIFICATION	1.7975770838398695E-4	DESIGN
nativesql collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999037924592528	WITHOUT_CLASSIFICATION	9.620754074715931E-5	DESIGN
index and row select	WITHOUT_CLASSIFICATION	0.9999822413090311	WITHOUT_CLASSIFICATION	1.775869096881606E-5	DESIGN
nativesql collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999813797348199	WITHOUT_CLASSIFICATION	1.862026518001991E-5	DESIGN
unquotedidentifiercolumnname = identifiercolumnalias	WITHOUT_CLASSIFICATION	0.9998963213616008	WITHOUT_CLASSIFICATION	1.0367863839925279E-4	DESIGN
unquotedidentifiercolumnname = null	WITHOUT_CLASSIFICATION	0.9999221249905212	WITHOUT_CLASSIFICATION	7.787500947880593E-5	DESIGN
generate the sql	WITHOUT_CLASSIFICATION	0.9998782821319009	WITHOUT_CLASSIFICATION	1.2171786809900852E-4	DESIGN
for non-arrays we don't need to know the element class elementtype.returnedclass()	WITHOUT_CLASSIFICATION	0.9969657070181326	WITHOUT_CLASSIFICATION	0.0030342929818673293	DESIGN
not all classpersisters implement propertymapping!	WITHOUT_CLASSIFICATION	0.9793056011180395	WITHOUT_CLASSIFICATION	0.020694398881960424	DESIGN
handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.996541540434644	WITHOUT_CLASSIFICATION	0.003458459565355885	DESIGN
handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9970268402774157	WITHOUT_CLASSIFICATION	0.002973159722584214	DESIGN
if there is a user-specified loader return that todo filters!?	WITHOUT_CLASSIFICATION	0.8560122591851973	WITHOUT_CLASSIFICATION	0.14398774081480264	DESIGN
take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9966032884795205	WITHOUT_CLASSIFICATION	0.0033967115204795225	DESIGN
strip leading ''	WITHOUT_CLASSIFICATION	0.9997184281725926	WITHOUT_CLASSIFICATION	2.815718274073333E-4	DESIGN
run a subquery loader	WITHOUT_CLASSIFICATION	0.9971156277578438	WITHOUT_CLASSIFICATION	0.002884372242156213	DESIGN
needed by arrays	WITHOUT_CLASSIFICATION	0.9998537249440969	WITHOUT_CLASSIFICATION	1.4627505590312752E-4	DESIGN
todo something with formulas	WITHOUT_CLASSIFICATION	0.9337002041094482	DESIGN	0.06629979589055174	WITHOUT_CLASSIFICATION
an assertion	WITHOUT_CLASSIFICATION	0.9996504695102808	WITHOUT_CLASSIFICATION	3.4953048971920016E-4	DESIGN
remove all the old entries	WITHOUT_CLASSIFICATION	0.9998123790203717	WITHOUT_CLASSIFICATION	1.8762097962842067E-4	DESIGN
create all the new entries	WITHOUT_CLASSIFICATION	0.9999421037773563	WITHOUT_CLASSIFICATION	5.789622264370037E-5	DESIGN
&& !indexisformula	WITHOUT_CLASSIFICATION	0.9987444537236375	WITHOUT_CLASSIFICATION	0.0012555462763625405	DESIGN
&& !indexisformula	WITHOUT_CLASSIFICATION	0.9987444537236375	WITHOUT_CLASSIFICATION	0.0012555462763625405	DESIGN
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999644973184074	WITHOUT_CLASSIFICATION	3.5502681592667404E-5	DESIGN
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999741408458382	WITHOUT_CLASSIFICATION	2.585915416167809E-5	DESIGN
==elementtype ??	WITHOUT_CLASSIFICATION	0.9977052379030499	WITHOUT_CLASSIFICATION	0.0022947620969500653	DESIGN
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999886183223241	WITHOUT_CLASSIFICATION	1.1381677676021871E-5	DESIGN
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9989336399100034	WITHOUT_CLASSIFICATION	0.0010663600899966479	DESIGN
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9956530260161423	WITHOUT_CLASSIFICATION	0.00434697398385771	DESIGN
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.958987735373113	WITHOUT_CLASSIFICATION	0.04101226462688705	DESIGN
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999772262858293	WITHOUT_CLASSIFICATION	2.2773714170608624E-5	DESIGN
buf.append( selectfragment( lhsalias "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9985826037567704	WITHOUT_CLASSIFICATION	0.0014173962432295103	DESIGN
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9998848427557833	WITHOUT_CLASSIFICATION	1.1515724421676982E-4	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9989236872500432	WITHOUT_CLASSIFICATION	0.0010763127499568072	DESIGN
private final string roottablename	WITHOUT_CLASSIFICATION	0.999643650511356	WITHOUT_CLASSIFICATION	3.5634948864398714E-4	DESIGN
initialization	WITHOUT_CLASSIFICATION	0.9999368704228419	WITHOUT_CLASSIFICATION	6.312957715820111E-5	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999739397927501	WITHOUT_CLASSIFICATION	2.606020724999143E-5	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9989236872500432	WITHOUT_CLASSIFICATION	0.0010763127499568072	DESIGN
execute the sql	WITHOUT_CLASSIFICATION	0.9999287541090466	WITHOUT_CLASSIFICATION	7.124589095350622E-5	DESIGN
this could also just be true all the time	WITHOUT_CLASSIFICATION	0.9823947542273712	WITHOUT_CLASSIFICATION	0.0176052457726288	DESIGN
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9998614856153277	WITHOUT_CLASSIFICATION	1.3851438467233254E-4	DESIGN
todo check this.	WITHOUT_CLASSIFICATION	0.6614247143035097	WITHOUT_CLASSIFICATION	0.33857528569649026	DESIGN
initialization	WITHOUT_CLASSIFICATION	0.9999368704228419	WITHOUT_CLASSIFICATION	6.312957715820111E-5	DESIGN
properties of this class including inherited properties	WITHOUT_CLASSIFICATION	0.9992293701591736	WITHOUT_CLASSIFICATION	7.70629840826378E-4	DESIGN
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999384547786206	WITHOUT_CLASSIFICATION	6.154522137937128E-5	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9990660941966634	WITHOUT_CLASSIFICATION	9.339058033366047E-4	DESIGN
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an sql case	WITHOUT_CLASSIFICATION	0.9999385035287297	WITHOUT_CLASSIFICATION	6.149647127029812E-5	DESIGN
multitables	WITHOUT_CLASSIFICATION	0.9996356951231448	WITHOUT_CLASSIFICATION	3.643048768552535E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999739397927501	WITHOUT_CLASSIFICATION	2.606020724999143E-5	DESIGN
subclass closure properties	WITHOUT_CLASSIFICATION	0.997729689265906	WITHOUT_CLASSIFICATION	0.0022703107340940982	DESIGN
subclasses	WITHOUT_CLASSIFICATION	0.999918055904475	WITHOUT_CLASSIFICATION	8.194409552501135E-5	DESIGN
( (column) model.gettable().getprimarykey().getcolumniterator().next() ).getname()	WITHOUT_CLASSIFICATION	0.9985324829399607	WITHOUT_CLASSIFICATION	0.0014675170600392492	DESIGN
( (column) sc.gettable().getprimarykey().getcolumniterator().next() ).getname()	WITHOUT_CLASSIFICATION	0.9985324829399607	WITHOUT_CLASSIFICATION	0.0014675170600392492	DESIGN
don't need subclass tables because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9551386367396586	WITHOUT_CLASSIFICATION	0.0448613632603414	DESIGN
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9986272223981857	WITHOUT_CLASSIFICATION	0.0013727776018143136	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9989236872500432	WITHOUT_CLASSIFICATION	0.0010763127499568072	DESIGN
properties of this class including inherited properties	WITHOUT_CLASSIFICATION	0.9992293701591736	WITHOUT_CLASSIFICATION	7.70629840826378E-4	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9990660941966634	WITHOUT_CLASSIFICATION	9.339058033366047E-4	DESIGN
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9993862565543248	WITHOUT_CLASSIFICATION	6.137434456752458E-4	DESIGN
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9998141547478351	WITHOUT_CLASSIFICATION	1.8584525216496357E-4	DESIGN
discriminator column	WITHOUT_CLASSIFICATION	0.9998217815632889	WITHOUT_CLASSIFICATION	1.7821843671104808E-4	DESIGN
initialization	WITHOUT_CLASSIFICATION	0.9999368704228419	WITHOUT_CLASSIFICATION	6.312957715820111E-5	DESIGN
private final map propertytablenumbersbyname = new hashmap()	WITHOUT_CLASSIFICATION	0.9999649839396042	WITHOUT_CLASSIFICATION	3.5016060395750404E-5	DESIGN
class + table	WITHOUT_CLASSIFICATION	0.9998400380771805	WITHOUT_CLASSIFICATION	1.5996192281948274E-4	DESIGN
discriminator	WITHOUT_CLASSIFICATION	0.99963595098556	WITHOUT_CLASSIFICATION	3.640490144399524E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.999908675660686	WITHOUT_CLASSIFICATION	9.132433931406237E-5	DESIGN
subclasses	WITHOUT_CLASSIFICATION	0.999918055904475	WITHOUT_CLASSIFICATION	8.194409552501135E-5	DESIGN
execute the sql	WITHOUT_CLASSIFICATION	0.9999287541090466	WITHOUT_CLASSIFICATION	7.124589095350622E-5	DESIGN
joins	WITHOUT_CLASSIFICATION	0.999771399417716	WITHOUT_CLASSIFICATION	2.2860058228399367E-4	DESIGN
propertytablenumbersbyname.put( prop.getname() join )	WITHOUT_CLASSIFICATION	0.999883070322511	WITHOUT_CLASSIFICATION	1.1692967748901428E-4	DESIGN
access cached sql	WITHOUT_CLASSIFICATION	0.9999652567216915	WITHOUT_CLASSIFICATION	3.474327830857261E-5	DESIGN
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9981159340364107	WITHOUT_CLASSIFICATION	0.0018840659635893779	DESIGN
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.999936541369222	WITHOUT_CLASSIFICATION	6.345863077793814E-5	DESIGN
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9997077114212979	WITHOUT_CLASSIFICATION	2.9228857870209767E-4	DESIGN
render the sql	WITHOUT_CLASSIFICATION	0.9996461478656868	WITHOUT_CLASSIFICATION	3.5385213431321245E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997273353361796	WITHOUT_CLASSIFICATION	2.726646638203707E-4	DESIGN
moved up from abstractentitypersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9967027171605315	WITHOUT_CLASSIFICATION	0.0032972828394684122	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995689692001622	WITHOUT_CLASSIFICATION	4.310307998376784E-4	DESIGN
the optional sql string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999785903749734	WITHOUT_CLASSIFICATION	2.140962502659095E-5	DESIGN
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9974705251847753	WITHOUT_CLASSIFICATION	0.0025294748152247535	DESIGN
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9996993742644993	WITHOUT_CLASSIFICATION	3.0062573550069215E-4	DESIGN
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9992430404197474	WITHOUT_CLASSIFICATION	7.56959580252565E-4	DESIGN
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999169091463953	WITHOUT_CLASSIFICATION	8.309085360465962E-5	DESIGN
sql strings	WITHOUT_CLASSIFICATION	0.9997076184509189	WITHOUT_CLASSIFICATION	2.923815490811252E-4	DESIGN
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999882712736244	WITHOUT_CLASSIFICATION	1.172872637566811E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.999908675660686	WITHOUT_CLASSIFICATION	9.132433931406237E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995689692001622	WITHOUT_CLASSIFICATION	4.310307998376784E-4	DESIGN
identifier	WITHOUT_CLASSIFICATION	0.999844578204878	WITHOUT_CLASSIFICATION	1.5542179512199986E-4	DESIGN
version	WITHOUT_CLASSIFICATION	0.9994117245508795	WITHOUT_CLASSIFICATION	5.882754491204855E-4	DESIGN
where string	WITHOUT_CLASSIFICATION	0.9999011595993076	WITHOUT_CLASSIFICATION	9.884040069237928E-5	DESIGN
subclass property closure	WITHOUT_CLASSIFICATION	0.9899413656548729	WITHOUT_CLASSIFICATION	0.010058634345127123	DESIGN
before add -)	WITHOUT_CLASSIFICATION	0.9974647242170053	WITHOUT_CLASSIFICATION	0.0025352757829948036	DESIGN
handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9996180563073537	WITHOUT_CLASSIFICATION	3.8194369264622617E-4	DESIGN
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9998226709432187	WITHOUT_CLASSIFICATION	1.7732905678120487E-4	DESIGN
note early exit here	WITHOUT_CLASSIFICATION	0.9995504775501765	WITHOUT_CLASSIFICATION	4.495224498235171E-4	DESIGN
object have been loaded with setreadonly(true) hhh-2236	WITHOUT_CLASSIFICATION	0.9992185384444876	WITHOUT_CLASSIFICATION	7.81461555512346E-4	DESIGN
note this assumes something about how propertyselectfragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9882576655755523	WITHOUT_CLASSIFICATION	0.01174233442444763	DESIGN
strip leading " "	WITHOUT_CLASSIFICATION	0.9999202754924116	WITHOUT_CLASSIFICATION	7.972450758837754E-5	DESIGN
if there is no resulting row return null	WITHOUT_CLASSIFICATION	0.9999842994721343	WITHOUT_CLASSIFICATION	1.5700527865779616E-5	DESIGN
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9987751473970704	WITHOUT_CLASSIFICATION	0.001224852602929604	DESIGN
null owner ok??	WITHOUT_CLASSIFICATION	0.9999461447472416	WITHOUT_CLASSIFICATION	5.385525275842615E-5	DESIGN
null sql means that the only lazy properties are shared pk one-to-one associations which are handled differently in the type#nullsafeget code	WITHOUT_CLASSIFICATION	0.9999470609413035	WITHOUT_CLASSIFICATION	5.293905869651205E-5	DESIGN
create a new from node for the referenced class.	WITHOUT_CLASSIFICATION	0.9998772596191512	WITHOUT_CLASSIFICATION	1.2274038084882425E-4	DESIGN
the difficulty here is exactly what do we update in order to force the version to be incremented in the db	WITHOUT_CLASSIFICATION	0.69518815328626	WITHOUT_CLASSIFICATION	0.3048118467137399	DESIGN
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9992059625435372	WITHOUT_CLASSIFICATION	7.940374564626608E-4	DESIGN
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9977271154903129	WITHOUT_CLASSIFICATION	0.002272884509687031	DESIGN
enable for hhh-440 which we don't like	WITHOUT_CLASSIFICATION	0.9999259672235997	WITHOUT_CLASSIFICATION	7.403277640033996E-5	DESIGN
aliases	WITHOUT_CLASSIFICATION	0.9998431035200003	WITHOUT_CLASSIFICATION	1.5689647999975753E-4	DESIGN
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9975648682149888	WITHOUT_CLASSIFICATION	0.002435131785011143	DESIGN
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9994714579795391	WITHOUT_CLASSIFICATION	5.285420204609857E-4	DESIGN
fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9980132604543702	WITHOUT_CLASSIFICATION	0.0019867395456297306	DESIGN
embedded composite ids ( alias.idname1 alias.idname2 )	WITHOUT_CLASSIFICATION	0.9445701901817138	WITHOUT_CLASSIFICATION	0.0554298098182862	DESIGN
todo skip formulas?	WITHOUT_CLASSIFICATION	0.7312226671270127	WITHOUT_CLASSIFICATION	0.2687773328729874	DESIGN
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9993519406445086	WITHOUT_CLASSIFICATION	6.480593554912937E-4	DESIGN
do two passes for collection property-ref!	WITHOUT_CLASSIFICATION	0.977202042129236	WITHOUT_CLASSIFICATION	0.02279795787076398	DESIGN
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999289027879681	WITHOUT_CLASSIFICATION	7.109721203190819E-5	DESIGN
todo eventually rowidname[j]	WITHOUT_CLASSIFICATION	0.5703897290604322	WITHOUT_CLASSIFICATION	0.42961027093956794	DESIGN
this is a property of the table which we are updating	WITHOUT_CLASSIFICATION	0.998783426887646	WITHOUT_CLASSIFICATION	0.001216573112354075	DESIGN
special shortcut for id properties skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999597923633858	WITHOUT_CLASSIFICATION	4.020763661421643E-5	DESIGN
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9998904318267925	WITHOUT_CLASSIFICATION	1.0956817320743225E-4	DESIGN
nothing to do even if the operand is a parameter no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.5483093201418724	DESIGN	0.45169067985812755	WITHOUT_CLASSIFICATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9955613149983856	WITHOUT_CLASSIFICATION	0.004438685001614428	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9998953116200048	WITHOUT_CLASSIFICATION	1.0468837999514272E-4	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9996309418745802	WITHOUT_CLASSIFICATION	3.6905812541972573E-4	DESIGN
more specifically "? [op] datetime" 1) if the operator is minus the param needs to be of some datetime type 2) if the operator is plus the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.995552071072131	WITHOUT_CLASSIFICATION	0.004447928927869058	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9998953116200048	WITHOUT_CLASSIFICATION	1.0468837999514272E-4	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9955613149983856	WITHOUT_CLASSIFICATION	0.004438685001614428	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9996309418745802	WITHOUT_CLASSIFICATION	3.6905812541972573E-4	DESIGN
add the primary key	WITHOUT_CLASSIFICATION	0.999835122358154	WITHOUT_CLASSIFICATION	1.6487764184597035E-4	DESIGN
delegate already handles pk columns	WITHOUT_CLASSIFICATION	0.9998105847134398	WITHOUT_CLASSIFICATION	1.8941528656032998E-4	DESIGN
we can't batch joined inserts especially not if it is an identity insert nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999706879137154	WITHOUT_CLASSIFICATION	2.9312086284640667E-5	DESIGN
render the sql query	WITHOUT_CLASSIFICATION	0.9998664361623938	WITHOUT_CLASSIFICATION	1.335638376062447E-4	DESIGN
write the values of fields onto the prepared statement - we must use the state at the time the insert was issued (cos of foreign key constraints). not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999408826370342	WITHOUT_CLASSIFICATION	5.911736296579634E-5	DESIGN
todo shouldnt inserts be expectations.none?	WITHOUT_CLASSIFICATION	0.5732604493012132	DESIGN	0.4267395506987869	WITHOUT_CLASSIFICATION
don't bother trying to update we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9996947672294766	WITHOUT_CLASSIFICATION	3.05232770523401E-4	DESIGN
if all fields are null we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9990844440081059	WITHOUT_CLASSIFICATION	9.155559918940055E-4	DESIGN
there is probably a row there so try to update if no rows were updated we will find out	WITHOUT_CLASSIFICATION	0.9999882400644562	WITHOUT_CLASSIFICATION	1.175993554369897E-5	DESIGN
note updates to joined tables can't be batched	WITHOUT_CLASSIFICATION	0.9993213067868105	WITHOUT_CLASSIFICATION	6.786932131896E-4	DESIGN
starting index	WITHOUT_CLASSIFICATION	0.999869016710386	WITHOUT_CLASSIFICATION	1.3098328961408834E-4	DESIGN
now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9998934169957675	WITHOUT_CLASSIFICATION	1.0658300423247866E-4	DESIGN
write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9997921810654268	WITHOUT_CLASSIFICATION	2.0781893457318197E-4	DESIGN
render the sql query	WITHOUT_CLASSIFICATION	0.9998664361623938	WITHOUT_CLASSIFICATION	1.335638376062447E-4	DESIGN
do the key. the key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.999508702344872	WITHOUT_CLASSIFICATION	4.912976551279193E-4	DESIGN
we should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9997906724661549	WITHOUT_CLASSIFICATION	2.0932753384505593E-4	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9932170583159149	WITHOUT_CLASSIFICATION	0.006782941684085094	DESIGN
note dirtyfields==null means we had no snapshot and we couldn't get one using select-before-update oldfields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyfields)	WITHOUT_CLASSIFICATION	0.9498275327781056	WITHOUT_CLASSIFICATION	0.05017246722189437	DESIGN
more specifically "datetime [op] ?" 1) if the operator is minus we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is plus the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.999920782879146	WITHOUT_CLASSIFICATION	7.921712085401658E-5	DESIGN
for the case of dynamic-update="true" we need to generate the update sql	WITHOUT_CLASSIFICATION	0.9997158196650435	WITHOUT_CLASSIFICATION	2.841803349565108E-4	DESIGN
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.8911906880028527	DESIGN	0.10880931199714733	WITHOUT_CLASSIFICATION
for the case of dynamic-update="false" or no snapshot we use the static sql	WITHOUT_CLASSIFICATION	0.999914775457925	WITHOUT_CLASSIFICATION	8.522454207500508E-5	DESIGN
if not "get" then try "is"	WITHOUT_CLASSIFICATION	0.9994916409116735	WITHOUT_CLASSIFICATION	5.083590883264087E-4	DESIGN
now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9988631860923955	WITHOUT_CLASSIFICATION	0.0011368139076044362	DESIGN
for the case of dynamic-insert="true" we need to generate the insert sql	WITHOUT_CLASSIFICATION	0.9998298282603254	WITHOUT_CLASSIFICATION	1.7017173967458934E-4	DESIGN
for the case of dynamic-insert="true" we need to generate the insert sql	WITHOUT_CLASSIFICATION	0.9998298282603254	WITHOUT_CLASSIFICATION	1.7017173967458934E-4	DESIGN
for the case of dynamic-insert="false" use the static sql	WITHOUT_CLASSIFICATION	0.9996568612807831	WITHOUT_CLASSIFICATION	3.431387192169111E-4	DESIGN
for the case of dynamic-insert="false" use the static sql	WITHOUT_CLASSIFICATION	0.9996568612807831	WITHOUT_CLASSIFICATION	3.431387192169111E-4	DESIGN
not supported	WITHOUT_CLASSIFICATION	0.9981330575876217	WITHOUT_CLASSIFICATION	0.0018669424123783187	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9932170583159149	WITHOUT_CLASSIFICATION	0.006782941684085094	DESIGN
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9991034227414358	WITHOUT_CLASSIFICATION	8.965772585640727E-4	DESIGN
otherwise utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9998036164026591	WITHOUT_CLASSIFICATION	1.9638359734099156E-4	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9947148506296872	WITHOUT_CLASSIFICATION	0.005285149370312837	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9947148506296872	WITHOUT_CLASSIFICATION	0.005285149370312837	DESIGN
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999960671400517	WITHOUT_CLASSIFICATION	3.932859948201786E-6	DESIGN
notice that we skip the first table it is the driving table!	WITHOUT_CLASSIFICATION	0.9999714220302778	WITHOUT_CLASSIFICATION	2.8577969722260622E-5	DESIGN
we can inner join to superclass tables (the row must be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9995172112406024	WITHOUT_CLASSIFICATION	4.827887593975307E-4	DESIGN
skip the driving table	WITHOUT_CLASSIFICATION	0.9998916250521254	WITHOUT_CLASSIFICATION	1.0837494787468231E-4	DESIGN
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.771873926527167	WITHOUT_CLASSIFICATION	0.2281260734728329	DESIGN
here we work under the following assumptions ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime always results in a double 3) datetime - {something other than datetime} always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999620571376914	WITHOUT_CLASSIFICATION	3.794286230868521E-5	DESIGN
render the where and from parts	WITHOUT_CLASSIFICATION	0.999066933463259	WITHOUT_CLASSIFICATION	9.330665367409881E-4	DESIGN
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9374904159908125	WITHOUT_CLASSIFICATION	0.0625095840091875	DESIGN
now render the joins	WITHOUT_CLASSIFICATION	0.9994825814709165	WITHOUT_CLASSIFICATION	5.174185290835122E-4	DESIGN
this will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9991296263936421	WITHOUT_CLASSIFICATION	8.70373606357826E-4	DESIGN
now render the select clause	WITHOUT_CLASSIFICATION	0.9996917830314763	WITHOUT_CLASSIFICATION	3.0821696852368036E-4	DESIGN
now tie it all together	WITHOUT_CLASSIFICATION	0.9998014477239372	WITHOUT_CLASSIFICATION	1.9855227606288027E-4	DESIGN
insert/update/delete sql	WITHOUT_CLASSIFICATION	0.999530400171506	WITHOUT_CLASSIFICATION	4.695998284940452E-4	DESIGN
select sql	WITHOUT_CLASSIFICATION	0.9998984344643881	WITHOUT_CLASSIFICATION	1.0156553561184799E-4	DESIGN
no need to check laziness dirty checking handles that	WITHOUT_CLASSIFICATION	0.8328599945112987	DESIGN	0.1671400054887013	WITHOUT_CLASSIFICATION
fully resolve the map reference create implicit joins.	WITHOUT_CLASSIFICATION	0.9991093988268313	WITHOUT_CLASSIFICATION	8.906011731688898E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9792581353171538	WITHOUT_CLASSIFICATION	0.02074186468284625	DESIGN
the basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9998530560596294	WITHOUT_CLASSIFICATION	1.4694394037064457E-4	DESIGN
for dialects which are known to not support ansi-sql row-value-constructor syntax we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9857222876287727	WITHOUT_CLASSIFICATION	0.014277712371227365	DESIGN
due to the complexity in initializing the selectclause do not generate one here. if it is not found simply return null also do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.851882142531322	WITHOUT_CLASSIFICATION	0.14811785746867792	DESIGN
check the version unsaved-value if appropriate	WITHOUT_CLASSIFICATION	0.9985505824003256	WITHOUT_CLASSIFICATION	0.0014494175996743667	DESIGN
let this take precedence if defined since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9994574231598002	WITHOUT_CLASSIFICATION	5.425768401998166E-4	DESIGN
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9985091090754054	WITHOUT_CLASSIFICATION	0.0014908909245946842	DESIGN
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9995783794320143	WITHOUT_CLASSIFICATION	4.216205679857493E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9998946914420034	WITHOUT_CLASSIFICATION	1.0530855799670046E-4	DESIGN
for property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9997783050238517	WITHOUT_CLASSIFICATION	2.2169497614837267E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995689692001622	WITHOUT_CLASSIFICATION	4.310307998376784E-4	DESIGN
if there is no resulting row return null	WITHOUT_CLASSIFICATION	0.9999842994721343	WITHOUT_CLASSIFICATION	1.5700527865779616E-5	DESIGN
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999827774994451	WITHOUT_CLASSIFICATION	1.722250055493804E-5	DESIGN
if this from element is a collection and the path is a collection property (maxindex etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9994419918020766	WITHOUT_CLASSIFICATION	5.580081979235036E-4	DESIGN
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994048635277122	WITHOUT_CLASSIFICATION	5.95136472287769E-4	DESIGN
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996414001110434	WITHOUT_CLASSIFICATION	3.5859988895653954E-4	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.999926540391311	WITHOUT_CLASSIFICATION	7.345960868897721E-5	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.999926540391311	WITHOUT_CLASSIFICATION	7.345960868897721E-5	DESIGN
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999988411650161	WITHOUT_CLASSIFICATION	1.1588349838414563E-6	DESIGN
try "get"	WITHOUT_CLASSIFICATION	0.9999340912290109	WITHOUT_CLASSIFICATION	6.590877098914032E-5	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9998284956419117	WITHOUT_CLASSIFICATION	1.7150435808827556E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9998284956419117	WITHOUT_CLASSIFICATION	1.7150435808827556E-4	DESIGN
should be safe to only ever expect entitypersister references here	WITHOUT_CLASSIFICATION	0.9995148076869029	WITHOUT_CLASSIFICATION	4.851923130971312E-4	DESIGN
this page intentionally left blank )	WITHOUT_CLASSIFICATION	0.9991824039208995	WITHOUT_CLASSIFICATION	8.175960791005735E-4	DESIGN
do not do anything	WITHOUT_CLASSIFICATION	0.9989798415527043	WITHOUT_CLASSIFICATION	0.0010201584472956788	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.999977561514074	WITHOUT_CLASSIFICATION	2.2438485926063745E-5	DESIGN
cant instantiate	WITHOUT_CLASSIFICATION	0.999630734927434	WITHOUT_CLASSIFICATION	3.6926507256601285E-4	DESIGN
if it is a property of an embedded component invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9998713365700701	WITHOUT_CLASSIFICATION	1.2866342992991008E-4	DESIGN
otherwise	WITHOUT_CLASSIFICATION	0.9997666389174579	WITHOUT_CLASSIFICATION	2.3336108254209126E-4	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9990762239821408	WITHOUT_CLASSIFICATION	9.237760178593034E-4	DESIGN
note interfaces is assumed to already contain hibernateproxy.class	WITHOUT_CLASSIFICATION	0.9964721472087545	WITHOUT_CLASSIFICATION	0.003527852791245449	DESIGN
note interfaces is assumed to already contain hibernateproxy.class	WITHOUT_CLASSIFICATION	0.9964721472087545	WITHOUT_CLASSIFICATION	0.003527852791245449	DESIGN
hhh-2481 make sure the callback gets cleared otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.996203524732485	WITHOUT_CLASSIFICATION	0.00379647526751512	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9981575942525451	WITHOUT_CLASSIFICATION	0.0018424057474549014	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9981575942525451	WITHOUT_CLASSIFICATION	0.0018424057474549014	DESIGN
note interface is assumed to already contain hibernateproxy.class	WITHOUT_CLASSIFICATION	0.9901666405110882	WITHOUT_CLASSIFICATION	0.009833359488911907	DESIGN
interfaces arguments	WITHOUT_CLASSIFICATION	0.9998309673733257	WITHOUT_CLASSIFICATION	1.6903262667443644E-4	DESIGN
todo!	WITHOUT_CLASSIFICATION	0.9997699770785218	WITHOUT_CLASSIFICATION	2.300229214783216E-4	DESIGN
get the caller	WITHOUT_CLASSIFICATION	0.9998611112803816	WITHOUT_CLASSIFICATION	1.3888871961845834E-4	DESIGN
get the caller principals	WITHOUT_CLASSIFICATION	0.9996563356214904	WITHOUT_CLASSIFICATION	3.436643785097146E-4	DESIGN
private static final alias default_alias = new alias(10 null)	WITHOUT_CLASSIFICATION	0.9999972096041233	WITHOUT_CLASSIFICATION	2.7903958766899654E-6	DESIGN
needed to bump this up to dotnode because that is the only thing which currently knows about the property-ref path in the correct format it is either this or recurse over the dotnodes constructing the property path just like dotnode does internally	WITHOUT_CLASSIFICATION	0.9990178319029348	WITHOUT_CLASSIFICATION	9.82168097065204E-4	DESIGN
if the identifier is quoted remove the quotes	WITHOUT_CLASSIFICATION	0.9995263369406799	WITHOUT_CLASSIFICATION	4.736630593200193E-4	DESIGN
truncate the identifier to the max alias length less the suffix length	WITHOUT_CLASSIFICATION	0.9999996878657639	WITHOUT_CLASSIFICATION	3.1213423617676523E-7	DESIGN
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9940910563452583	WITHOUT_CLASSIFICATION	0.0059089436547417286	DESIGN
null is not considered the same type as integer. $non-nls-1 $non-nls-1	WITHOUT_CLASSIFICATION	0.9993943158100005	WITHOUT_CLASSIFICATION	6.056841899995883E-4	DESIGN
the outerjoinsafterwhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999127696324258	WITHOUT_CLASSIFICATION	8.723036757412111E-5	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.9997736265536866	WITHOUT_CLASSIFICATION	2.2637344631337738E-4	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.9997736265536866	WITHOUT_CLASSIFICATION	2.2637344631337738E-4	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.9997736265536866	WITHOUT_CLASSIFICATION	2.2637344631337738E-4	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.9997736265536866	WITHOUT_CLASSIFICATION	2.2637344631337738E-4	DESIGN
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.999973365347944	WITHOUT_CLASSIFICATION	2.6634652055934633E-5	DESIGN
if the condition is not already there	WITHOUT_CLASSIFICATION	0.9985370229352809	WITHOUT_CLASSIFICATION	0.0014629770647190303	DESIGN
dontspace.add("'")	WITHOUT_CLASSIFICATION	0.9996356951231448	WITHOUT_CLASSIFICATION	3.643048768552535E-4	DESIGN
for mysql	WITHOUT_CLASSIFICATION	0.9998485971292969	WITHOUT_CLASSIFICATION	1.5140287070324873E-4	DESIGN
hashmap columnsunique = new hashmap()	WITHOUT_CLASSIFICATION	0.9999675595799705	WITHOUT_CLASSIFICATION	3.244042002955545E-5	DESIGN
null caused some problems	WITHOUT_CLASSIFICATION	0.9987281098441051	WITHOUT_CLASSIFICATION	0.0012718901558949585	DESIGN
package	WITHOUT_CLASSIFICATION	0.9994785270872577	WITHOUT_CLASSIFICATION	5.214729127423224E-4	DESIGN
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9998532717128061	WITHOUT_CLASSIFICATION	1.4672828719385374E-4	DESIGN
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9965067872870335	WITHOUT_CLASSIFICATION	0.003493212712966532	DESIGN
package	WITHOUT_CLASSIFICATION	0.9994785270872577	WITHOUT_CLASSIFICATION	5.214729127423224E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9994785270872577	WITHOUT_CLASSIFICATION	5.214729127423224E-4	DESIGN
if true then execute db updates otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9998693431435888	WITHOUT_CLASSIFICATION	1.3065685641116525E-4	DESIGN
we only release the connection	WITHOUT_CLASSIFICATION	0.997137066731335	WITHOUT_CLASSIFICATION	0.0028629332686650574	DESIGN
deprecated option	WITHOUT_CLASSIFICATION	0.9961342343666293	WITHOUT_CLASSIFICATION	0.0038657656333708065	DESIGN
if an exception occurs during flush user must call rollback()	WITHOUT_CLASSIFICATION	0.9999361463966226	WITHOUT_CLASSIFICATION	6.385360337734116E-5	DESIGN
actually this last test is probably unnecessary since beforecompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999926768753046	WITHOUT_CLASSIFICATION	7.323124695473982E-6	DESIGN
this one only really needed for badly-behaved applications! (if the transactionmanager has a sychronization registered its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9991300655736209	WITHOUT_CLASSIFICATION	8.699344263789864E-4	DESIGN
create an dotnode ast for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9998946679382332	WITHOUT_CLASSIFICATION	1.0533206176680252E-4	DESIGN
if an exception occurs during flush user must call rollback()	WITHOUT_CLASSIFICATION	0.9999361463966226	WITHOUT_CLASSIFICATION	6.385360337734116E-5	DESIGN
if we could not register a synchronization do the before/after completion callbacks ourself (but we need to let jdbccontext know that this is what we are going to do so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9943961283908388	DESIGN	0.005603871609161161	WITHOUT_CLASSIFICATION
swallow it and continue to roll back jta transaction	WITHOUT_CLASSIFICATION	0.9997959368277791	WITHOUT_CLASSIFICATION	2.040631722208201E-4	DESIGN
so the transaction is already rolled back by jta spec	WITHOUT_CLASSIFICATION	0.9999537102028229	WITHOUT_CLASSIFICATION	4.6289797177091384E-5	DESIGN
this method is a noop if there is a synchronization!	WITHOUT_CLASSIFICATION	0.9991112773333749	WITHOUT_CLASSIFICATION	8.887226666250947E-4	DESIGN
two conditions where we need to transform this to a theta-join syntax 1) 'elem' is the "root from-element" in correlated subqueries 2) the dotnode.usethetastyleimplicitjoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9998092935922636	WITHOUT_CLASSIFICATION	1.907064077364659E-4	DESIGN
websphere however is not a sane jee/jta container	WITHOUT_CLASSIFICATION	0.9985907007342085	WITHOUT_CLASSIFICATION	0.0014092992657915688	DESIGN
for sane jee/jta containers the transaction itself functions as its identifier	WITHOUT_CLASSIFICATION	0.9999834571609508	WITHOUT_CLASSIFICATION	1.6542839049146786E-5	DESIGN
swallow the transaction was finished	WITHOUT_CLASSIFICATION	0.9999752627599352	WITHOUT_CLASSIFICATION	2.4737240064804407E-5	DESIGN
all aliastoentitymapresulttransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999973327912646	WITHOUT_CLASSIFICATION	2.6672087354025067E-5	DESIGN
create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999616801391094	WITHOUT_CLASSIFICATION	3.831986089059551E-5	DESIGN
all distinctrootentityresulttransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999973327912646	WITHOUT_CLASSIFICATION	2.6672087354025067E-5	DESIGN
map of entitymode -> tuplizer	WITHOUT_CLASSIFICATION	0.9999745477894926	WITHOUT_CLASSIFICATION	2.5452210507428105E-5	DESIGN
this is a virtual id property	WITHOUT_CLASSIFICATION	0.9716956811677699	WITHOUT_CLASSIFICATION	0.028304318832230065	DESIGN
this one needed only for guessentitymode()	WITHOUT_CLASSIFICATION	0.9994673917871503	WITHOUT_CLASSIFICATION	5.326082128496854E-4	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9998903961243867	WITHOUT_CLASSIFICATION	1.0960387561338677E-4	DESIGN
todo move this to sf per hhh-3517 also see hhh-1907 and componentmetamodel	WITHOUT_CLASSIFICATION	0.9991893713710235	DESIGN	8.106286289765458E-4	WITHOUT_CLASSIFICATION
then the pojo tuplizer using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999830487704265	WITHOUT_CLASSIFICATION	1.695122957343523E-5	DESIGN
build the dynamic-map tuplizer	WITHOUT_CLASSIFICATION	0.9996012780589066	WITHOUT_CLASSIFICATION	3.9872194109338556E-4	DESIGN
then dom4j tuplizer if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9998645686826758	WITHOUT_CLASSIFICATION	1.3543131732418558E-4	DESIGN
build the dynamic-map tuplizer	WITHOUT_CLASSIFICATION	0.9996012780589066	WITHOUT_CLASSIFICATION	3.9872194109338556E-4	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999449102733403	WITHOUT_CLASSIFICATION	5.50897266597472E-5	DESIGN
found a ctor but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999752500897497	WITHOUT_CLASSIFICATION	2.4749910250233555E-5	DESIGN
private final sessionfactoryimplementor sessionfactory	WITHOUT_CLASSIFICATION	0.9994315997861761	WITHOUT_CLASSIFICATION	5.68400213823899E-4	DESIGN
cached for efficiency	WITHOUT_CLASSIFICATION	0.9998659806004011	WITHOUT_CLASSIFICATION	1.3401939959896742E-4	DESIGN
public componentmetamodel(component component sessionfactoryimplementor sessionfactory) {	WITHOUT_CLASSIFICATION	0.998941113273969	WITHOUT_CLASSIFICATION	0.0010588867260310545	DESIGN
this.sessionfactory = sessionfactory	WITHOUT_CLASSIFICATION	0.9998963213616008	WITHOUT_CLASSIFICATION	1.0367863839925279E-4	DESIGN
it was not embedded so the argument is just an id	WITHOUT_CLASSIFICATION	0.996708288526397	WITHOUT_CLASSIFICATION	0.003291711473602964	DESIGN
then the pojo tuplizer using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999830487704265	WITHOUT_CLASSIFICATION	1.695122957343523E-5	DESIGN
then dom4j tuplizer if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9998645686826758	WITHOUT_CLASSIFICATION	1.3543131732418558E-4	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999449102733403	WITHOUT_CLASSIFICATION	5.50897266597472E-5	DESIGN
then handle any user-defined entity modes	WITHOUT_CLASSIFICATION	0.9984277783127671	WITHOUT_CLASSIFICATION	0.0015722216872329604	DESIGN
return currentid	WITHOUT_CLASSIFICATION	0.999541237960432	WITHOUT_CLASSIFICATION	4.587620395679544E-4	DESIGN
reset the id	WITHOUT_CLASSIFICATION	0.9996761017498387	WITHOUT_CLASSIFICATION	3.238982501612723E-4	DESIGN
origin.adddestination( destination ) this was the cause of hhh-242 origin.settype( from_fragment ) set the parent node type so that the ast is properly formed. the destination node will have all the from text. the parent node is a collection join too (voodoo - see joinprocessor)	WITHOUT_CLASSIFICATION	0.9990090728203231	WITHOUT_CLASSIFICATION	9.90927179676832E-4	DESIGN
reset the version	WITHOUT_CLASSIFICATION	0.999478537935884	WITHOUT_CLASSIFICATION	5.214620641160937E-4	DESIGN
the default is to simply not lazy fetch properties for now	WITHOUT_CLASSIFICATION	0.9995239526754791	WITHOUT_CLASSIFICATION	4.7604732452080476E-4	DESIGN
add the second join the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999934186687367	WITHOUT_CLASSIFICATION	6.581331263309376E-6	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9792581353171538	WITHOUT_CLASSIFICATION	0.02074186468284625	DESIGN
found a ctor but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999752500897497	WITHOUT_CLASSIFICATION	2.4749910250233555E-5	DESIGN
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999821130919893	WITHOUT_CLASSIFICATION	1.788690801079718E-5	DESIGN
return getfactory().getsettings().getbytecodeprovider().getproxyfactoryfactory().buildproxyfactory()	WITHOUT_CLASSIFICATION	0.9994572206984634	WITHOUT_CLASSIFICATION	5.427793015365254E-4	DESIGN
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999830545531211	WITHOUT_CLASSIFICATION	1.6945446878902987E-5	DESIGN
superclass entity-name	WITHOUT_CLASSIFICATION	0.9997337053838958	WITHOUT_CLASSIFICATION	2.6629461610414766E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9792581353171538	WITHOUT_CLASSIFICATION	0.02074186468284625	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995689692001622	WITHOUT_CLASSIFICATION	4.310307998376784E-4	DESIGN
init the aliases after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999419928384986	WITHOUT_CLASSIFICATION	5.8007161501418896E-5	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9792581353171538	WITHOUT_CLASSIFICATION	0.02074186468284625	DESIGN
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999280557159175	WITHOUT_CLASSIFICATION	7.194428408252659E-5	DESIGN
get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998460213122266	WITHOUT_CLASSIFICATION	1.539786877735345E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995689692001622	WITHOUT_CLASSIFICATION	4.310307998376784E-4	DESIGN
note this affects the return value!	WITHOUT_CLASSIFICATION	0.9960800653072863	WITHOUT_CLASSIFICATION	0.003919934692713701	DESIGN
need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9998977986521893	WITHOUT_CLASSIFICATION	1.0220134781071016E-4	DESIGN
add the type to the list of returned sqlresulttypes.	WITHOUT_CLASSIFICATION	0.9999359500045253	WITHOUT_CLASSIFICATION	6.404999547467148E-5	DESIGN
collection types	WITHOUT_CLASSIFICATION	0.9993603226578077	WITHOUT_CLASSIFICATION	6.39677342192213E-4	DESIGN
convenience methods relating to operations across arrays of types	WITHOUT_CLASSIFICATION	0.9999533096961749	WITHOUT_CLASSIFICATION	4.66903038250946E-5	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9996981629646764	WITHOUT_CLASSIFICATION	3.018370353235998E-4	DESIGN
blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9998200241649674	WITHOUT_CLASSIFICATION	1.799758350326295E-4	DESIGN
value is the entity name	WITHOUT_CLASSIFICATION	0.9993436002566244	WITHOUT_CLASSIFICATION	6.563997433756476E-4	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9997941099815382	WITHOUT_CLASSIFICATION	2.0589001846191445E-4	DESIGN
generate id select fragment and then property select fragment for each expression just like generateselectfragments().	WITHOUT_CLASSIFICATION	0.9965573391828876	WITHOUT_CLASSIFICATION	0.0034426608171124144	DESIGN
todo!	WITHOUT_CLASSIFICATION	0.9997699770785218	WITHOUT_CLASSIFICATION	2.300229214783216E-4	DESIGN
xml is the entity name	WITHOUT_CLASSIFICATION	0.9970502425583473	WITHOUT_CLASSIFICATION	0.0029497574416527555	DESIGN
special case this is the leaf of the containment graph even though not immutable	WITHOUT_CLASSIFICATION	0.9881621251014282	WITHOUT_CLASSIFICATION	0.011837874898571835	DESIGN
tolerates nulls	WITHOUT_CLASSIFICATION	0.9998776526301425	WITHOUT_CLASSIFICATION	1.2234736985740314E-4	DESIGN
sqlresulttypelist	WITHOUT_CLASSIFICATION	0.9996356951231448	WITHOUT_CLASSIFICATION	3.643048768552535E-4	DESIGN
metatype is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9989342675740528	WITHOUT_CLASSIFICATION	0.0010657324259471964	DESIGN
get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9993827007590892	WITHOUT_CLASSIFICATION	6.172992409107601E-4	DESIGN
look through the fromelement's children to find any collections of values that should be fetched	WITHOUT_CLASSIFICATION	0.9990195288753602	WITHOUT_CLASSIFICATION	9.804711246398918E-4	DESIGN
return associationtype.foreign_key_to_parent this is better but causes a transient object exception	WITHOUT_CLASSIFICATION	0.5048360390169372	WITHOUT_CLASSIFICATION	0.4951639609830627	DESIGN
use the lower case function name. remember whether we're in a select clause or not.	WITHOUT_CLASSIFICATION	0.9997975565289977	WITHOUT_CLASSIFICATION	2.0244347100219917E-4	DESIGN
ident might be the name of a class.	WITHOUT_CLASSIFICATION	0.9876866738800983	WITHOUT_CLASSIFICATION	0.012313326119901609	DESIGN
todo!!!	WITHOUT_CLASSIFICATION	0.9997699770785218	WITHOUT_CLASSIFICATION	2.300229214783216E-4	DESIGN
st.settimestamp( index new timestamp( cal.gettimeinmillis() ) cal ) jdk 1.5 only	WITHOUT_CLASSIFICATION	0.9999360539177377	WITHOUT_CLASSIFICATION	6.394608226238881E-5	DESIGN
st.setdate( index new date( cal.gettimeinmillis() ) cal ) jdk 1.5 only	WITHOUT_CLASSIFICATION	0.9999360539177377	WITHOUT_CLASSIFICATION	6.394608226238881E-5	DESIGN
both are timestamps	WITHOUT_CLASSIFICATION	0.9996235814965538	WITHOUT_CLASSIFICATION	3.7641850344625897E-4	DESIGN
at least one is a plain old date	WITHOUT_CLASSIFICATION	0.9998431658665109	WITHOUT_CLASSIFICATION	1.5683413348911878E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.999919309542945	WITHOUT_CLASSIFICATION	8.06904570551578E-5	DESIGN
if the corresponding sql value is null the reader we got is null as well	WITHOUT_CLASSIFICATION	0.9999978963678419	WITHOUT_CLASSIFICATION	2.103632158152902E-6	DESIGN
fetch reader content up to the end - and put characters in a stringbuffer	WITHOUT_CLASSIFICATION	0.9941464476275671	WITHOUT_CLASSIFICATION	0.005853552372432862	DESIGN
return stringbuffer content as a large string	WITHOUT_CLASSIFICATION	0.9999493176931818	WITHOUT_CLASSIFICATION	5.068230681824719E-5	DESIGN
or types.longvarchar?	WITHOUT_CLASSIFICATION	0.9996738537022005	WITHOUT_CLASSIFICATION	3.2614629779957415E-4	DESIGN
not called at runtime so doesn't matter if its slow )	WITHOUT_CLASSIFICATION	0.9988010983496182	WITHOUT_CLASSIFICATION	0.0011989016503817767	DESIGN
todo	WITHOUT_CLASSIFICATION	0.7142003075800946	WITHOUT_CLASSIFICATION	0.28579969241990555	DESIGN
chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9997767619399914	WITHOUT_CLASSIFICATION	2.2323806000856973E-4	DESIGN
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9995880083897947	WITHOUT_CLASSIFICATION	4.119916102053618E-4	DESIGN
cache this	WITHOUT_CLASSIFICATION	0.9967168736029779	WITHOUT_CLASSIFICATION	0.003283126397022101	DESIGN
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9990885260907515	WITHOUT_CLASSIFICATION	9.114739092484926E-4	DESIGN
forcefully remove leading ands from where fragments the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9997831090805237	WITHOUT_CLASSIFICATION	2.1689091947633537E-4	DESIGN
todo!!!!!!!	WITHOUT_CLASSIFICATION	0.9996356951231448	WITHOUT_CLASSIFICATION	3.643048768552535E-4	DESIGN
create a new filters node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999167407225953	WITHOUT_CLASSIFICATION	8.325927740471503E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995689692001622	WITHOUT_CLASSIFICATION	4.310307998376784E-4	DESIGN
public object instantiate(object parent sessionimplementor session) throws hibernateexception	WITHOUT_CLASSIFICATION	0.9896316523926134	WITHOUT_CLASSIFICATION	0.010368347607386677	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9996819260184943	WITHOUT_CLASSIFICATION	3.180739815057325E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9996819260184943	WITHOUT_CLASSIFICATION	3.180739815057325E-4	DESIGN
versiontype impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ note simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the timestamp datatype supported by sybase and sql server which are completely db-generated values	WITHOUT_CLASSIFICATION	0.9999964369741626	WITHOUT_CLASSIFICATION	3.563025837464728E-6	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9996981629646764	WITHOUT_CLASSIFICATION	3.018370353235998E-4	DESIGN
not really necessary i guess	WITHOUT_CLASSIFICATION	0.5731693742201682	WITHOUT_CLASSIFICATION	0.42683062577983183	DESIGN
clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999906500706401	WITHOUT_CLASSIFICATION	9.349929359932884E-6	DESIGN
we do not have to worry about queued additions to uninitialized collections since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999842450676665	WITHOUT_CLASSIFICATION	1.5754932333556236E-5	DESIGN
collections cannot be compared	WITHOUT_CLASSIFICATION	0.999748889460846	WITHOUT_CLASSIFICATION	2.5111053915401454E-4	DESIGN
remember the uk value	WITHOUT_CLASSIFICATION	0.9958508524456697	WITHOUT_CLASSIFICATION	0.004149147554330319	DESIGN
noop	WITHOUT_CLASSIFICATION	0.999919309542945	WITHOUT_CLASSIFICATION	8.06904570551578E-5	DESIGN
processcollectionproperty(token q.getcollectionpersister(collectionrole) collectionname)	WITHOUT_CLASSIFICATION	0.9995689692001622	WITHOUT_CLASSIFICATION	4.310307998376784E-4	DESIGN
we must use the "remembered" uk value since it is not available from the entityentry during assembly	WITHOUT_CLASSIFICATION	0.9997516124267218	WITHOUT_CLASSIFICATION	2.483875732781684E-4	DESIGN
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9750044179518225	WITHOUT_CLASSIFICATION	0.024995582048177634	DESIGN
return false	WITHOUT_CLASSIFICATION	0.9998983713338278	WITHOUT_CLASSIFICATION	1.0162866617222906E-4	DESIGN
this just handles a particular case of component projection perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.5879661829412598	WITHOUT_CLASSIFICATION	0.41203381705874026	DESIGN
note we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9997574773228359	WITHOUT_CLASSIFICATION	2.4252267716413602E-4	DESIGN
the key is the owning entity itself so get the id from the key	WITHOUT_CLASSIFICATION	0.9991757928478276	WITHOUT_CLASSIFICATION	8.242071521722823E-4	DESIGN
if the original is a persistentcollection and that original was not flagged as dirty then reset the target's dirty flag here after the copy operation. </p> one thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know	WITHOUT_CLASSIFICATION	0.9999679303782255	WITHOUT_CLASSIFICATION	3.2069621774432736E-5	DESIGN
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999227095414872	WITHOUT_CLASSIFICATION	7.729045851277487E-5	DESIGN
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999122434734714	WITHOUT_CLASSIFICATION	8.775652652869668E-5	DESIGN
for a null target or a target which is the same as the original we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999988939967975	WITHOUT_CLASSIFICATION	1.1060032024408002E-6	DESIGN
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here	WITHOUT_CLASSIFICATION	0.9992882218716111	WITHOUT_CLASSIFICATION	7.117781283887949E-4	DESIGN
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999435362263168	WITHOUT_CLASSIFICATION	5.646377368324511E-5	DESIGN
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9965592113262033	WITHOUT_CLASSIFICATION	0.003440788673796682	DESIGN
check if it is already completely loaded but unowned	WITHOUT_CLASSIFICATION	0.9994534184365564	WITHOUT_CLASSIFICATION	5.465815634436256E-4	DESIGN
cache the actual id of the object not the value of the property-ref which might not be initialized	WITHOUT_CLASSIFICATION	0.9578930888447915	WITHOUT_CLASSIFICATION	0.04210691115520854	DESIGN
todo!!!!!!!	WITHOUT_CLASSIFICATION	0.9996356951231448	WITHOUT_CLASSIFICATION	3.643048768552535E-4	DESIGN
create a new collection wrapper to be initialized later	WITHOUT_CLASSIFICATION	0.9696334771759617	WITHOUT_CLASSIFICATION	0.030366522824038365	DESIGN
some jdbc drivers erroneously return an empty array here for a null db value /	WITHOUT_CLASSIFICATION	0.9999477290548945	WITHOUT_CLASSIFICATION	5.2270945105406966E-5	DESIGN
our column span is the number of columns in the pk	WITHOUT_CLASSIFICATION	0.9999451541385391	WITHOUT_CLASSIFICATION	5.484586146086109E-5	DESIGN
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9998359339270447	WITHOUT_CLASSIFICATION	1.6406607295534197E-4	DESIGN
we already know current is not null	WITHOUT_CLASSIFICATION	0.9958118009313432	WITHOUT_CLASSIFICATION	0.004188199068656702	DESIGN
the ids are fully resolved so compare them with isdirty() not ismodified()	WITHOUT_CLASSIFICATION	0.9902989559769997	WITHOUT_CLASSIFICATION	0.009701044023000252	DESIGN
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9997136637486341	WITHOUT_CLASSIFICATION	2.863362513658507E-4	DESIGN
----------------------------------------------------------- constructors	WITHOUT_CLASSIFICATION	0.9977766083878841	WITHOUT_CLASSIFICATION	0.002223391612115926	DESIGN
----------------------------------------------------- instance variables	WITHOUT_CLASSIFICATION	0.9999591705788993	WITHOUT_CLASSIFICATION	4.0829421100834146E-5	DESIGN
public static jdbcexception newjdbcexception(string string sqlexception root string sql) { string = string + " [" + sql + ']' log.error(string root) logexceptions(root) return new jdbcexception(string root sql) } public static jdbcexception newjdbcexception(string string sqlexception root) { log.error(string root) logexceptions(root) return new jdbcexception(string root) }	WITHOUT_CLASSIFICATION	0.9999828817939369	WITHOUT_CLASSIFICATION	1.711820606310963E-5	DESIGN
--------------------------------------------------------- public methods	WITHOUT_CLASSIFICATION	0.994193940357893	WITHOUT_CLASSIFICATION	0.005806059642107054	DESIGN
compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9991513865019345	WITHOUT_CLASSIFICATION	8.48613498065497E-4	DESIGN
simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.99995542138986	WITHOUT_CLASSIFICATION	4.45786101400182E-5	DESIGN
sybase fail if we don't do that sigh	WITHOUT_CLASSIFICATION	0.9999193308014159	WITHOUT_CLASSIFICATION	8.066919858406987E-5	DESIGN
handles things like a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a b c ) (overloaded brackets) not not a a is not null (overloaded "not") etc and expressions like foo = bar (maps to foo.id = bar.id) foo.bar = 'foo' (maps to foo.bar = 'foo') foo.bar.baz = 1.0 (maps to foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.bar.baz (maps to bar.baz = 1.0 and foo.bar = bar.id) foo.bar.baz = a.b.c (maps to bar.baz = b.c and foo.bar = bar.id and a.b = b.id) foo.bar.baz + a.b.c (maps to bar.baz + b.c and foo.bar = bar.id and a.b = b.id) ( foo.bar.baz + 1.0 ) < 2.0 (maps to ( bar.baz + 1.0 ) < 2.0 and foo.bar = bar.id)	WITHOUT_CLASSIFICATION	0.9988352057765995	WITHOUT_CLASSIFICATION	0.0011647942234005474	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.999463328154152	WITHOUT_CLASSIFICATION	5.366718458479731E-4	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.999463328154152	WITHOUT_CLASSIFICATION	5.366718458479731E-4	DESIGN
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.999590362987187	WITHOUT_CLASSIFICATION	4.0963701281304947E-4	DESIGN
otherwise just dump it	WITHOUT_CLASSIFICATION	0.9990439158885517	WITHOUT_CLASSIFICATION	9.560841114483487E-4	DESIGN
its an interface so we can't really tell anything	WITHOUT_CLASSIFICATION	0.9994668198458104	WITHOUT_CLASSIFICATION	5.331801541895227E-4	DESIGN
its an interface so we can't really tell anything	WITHOUT_CLASSIFICATION	0.9994668198458104	WITHOUT_CLASSIFICATION	5.331801541895227E-4	DESIGN
use default behavior	WITHOUT_CLASSIFICATION	0.9996370208236103	WITHOUT_CLASSIFICATION	3.6297917638975256E-4	DESIGN
note early return	WITHOUT_CLASSIFICATION	0.9988111123979538	WITHOUT_CLASSIFICATION	0.0011888876020461597	DESIGN
the mru cache used to keep hard references to the most recently used query plans note lru here is a bit of a misnomer it indicates that lru entries are removed the actual kept entries are the mru entries	WITHOUT_CLASSIFICATION	0.5863956968006205	DESIGN	0.4136043031993795	WITHOUT_CLASSIFICATION
we want to be able to just use the defaults if jndi environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999464348849758	WITHOUT_CLASSIFICATION	5.356511502418987E-5	DESIGN
clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9997022427353351	WITHOUT_CLASSIFICATION	2.9775726466494567E-4	DESIGN
serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9997484161427053	WITHOUT_CLASSIFICATION	2.515838572947287E-4	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.999974453016217	WITHOUT_CLASSIFICATION	2.5546983783007178E-5	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.999974453016217	WITHOUT_CLASSIFICATION	2.5546983783007178E-5	DESIGN
deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9995921600281832	WITHOUT_CLASSIFICATION	4.0783997181681415E-4	DESIGN
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9983991249793553	WITHOUT_CLASSIFICATION	0.0016008750206445701	DESIGN
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9987444537236375	WITHOUT_CLASSIFICATION	0.0012555462763625405	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9996382962332545	WITHOUT_CLASSIFICATION	3.617037667454912E-4	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9996382962332545	WITHOUT_CLASSIFICATION	3.617037667454912E-4	DESIGN
includes last '.'	WITHOUT_CLASSIFICATION	0.9999320100312157	WITHOUT_CLASSIFICATION	6.79899687843374E-5	DESIGN
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999847004228989	WITHOUT_CLASSIFICATION	1.529957710112686E-5	DESIGN
impl note takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method	WITHOUT_CLASSIFICATION	0.943523962410178	WITHOUT_CLASSIFICATION	0.05647603758982203	DESIGN
first time we find match!	WITHOUT_CLASSIFICATION	0.9998652795327719	WITHOUT_CLASSIFICATION	1.3472046722796594E-4	DESIGN
entitynames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9996931395586022	WITHOUT_CLASSIFICATION	3.0686044139781814E-4	DESIGN
wrapped iterators	WITHOUT_CLASSIFICATION	0.9968561652089541	WITHOUT_CLASSIFICATION	0.00314383479104571	DESIGN
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9997071467089752	WITHOUT_CLASSIFICATION	2.92853291024846E-4	DESIGN
the current iterator	WITHOUT_CLASSIFICATION	0.9998801119060682	WITHOUT_CLASSIFICATION	1.1988809393180447E-4	DESIGN
the last used iterator	WITHOUT_CLASSIFICATION	0.9768178078564567	WITHOUT_CLASSIFICATION	0.023182192143543414	DESIGN
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9998021083153026	WITHOUT_CLASSIFICATION	1.9789168469750126E-4	DESIGN
public static object[] clone(class elementclass object[] array) {object[] result = (object[]) array.newinstance( elementclass array.length )system.arraycopy(array 0 result 0 array.length)return result}	WITHOUT_CLASSIFICATION	0.9998513408794064	WITHOUT_CLASSIFICATION	1.486591205935451E-4	DESIGN
call this before any iterator method to make sure that the current iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9967864462964938	WITHOUT_CLASSIFICATION	0.0032135537035061696	DESIGN
doable if needed	WITHOUT_CLASSIFICATION	0.9999261979204424	WITHOUT_CLASSIFICATION	7.380207955768175E-5	DESIGN
set last used iterator here in case the user calls remove before calling hasnext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9080847005855933	WITHOUT_CLASSIFICATION	0.09191529941440668	DESIGN
peek ahead	WITHOUT_CLASSIFICATION	0.999795459449313	WITHOUT_CLASSIFICATION	2.0454055068701754E-4	DESIGN
if we reach the end of the string w/o finding the matching end that is an exception	WITHOUT_CLASSIFICATION	0.9999263117865275	WITHOUT_CLASSIFICATION	7.368821347249545E-5	DESIGN
we have a placeholder spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9995558834579356	WITHOUT_CLASSIFICATION	4.4411654206450807E-4	DESIGN
make sure spinning forward did not put us past the end of the buffer	WITHOUT_CLASSIFICATION	0.999757564357359	WITHOUT_CLASSIFICATION	2.4243564264097577E-4	DESIGN
first try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9998079105294173	WITHOUT_CLASSIFICATION	1.9208947058268805E-4	DESIGN
next try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9763558607992584	WITHOUT_CLASSIFICATION	0.023644139200741696	DESIGN
next try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9791917263113914	WITHOUT_CLASSIFICATION	0.02080827368860859	DESIGN
anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9994178456764957	WITHOUT_CLASSIFICATION	5.821543235042213E-4	DESIGN
would need an identityset for this!	WITHOUT_CLASSIFICATION	0.9986397215067412	WITHOUT_CLASSIFICATION	0.0013602784932587404	DESIGN
arrays.aslist doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9966816716049958	WITHOUT_CLASSIFICATION	0.0033183283950041016	DESIGN
faster?	WITHOUT_CLASSIFICATION	0.9997699770785218	WITHOUT_CLASSIFICATION	2.300229214783216E-4	DESIGN
the name of a class	WITHOUT_CLASSIFICATION	0.9990731863568758	WITHOUT_CLASSIFICATION	9.268136431242252E-4	DESIGN
its the listener class name	WITHOUT_CLASSIFICATION	0.9997902396775595	WITHOUT_CLASSIFICATION	2.0976032244043736E-4	DESIGN
allow 987654321	WITHOUT_CLASSIFICATION	0.9988277489100058	WITHOUT_CLASSIFICATION	0.0011722510899941597	DESIGN
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999688835234379	WITHOUT_CLASSIFICATION	3.111647656204472E-5	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999661266670165	WITHOUT_CLASSIFICATION	3.387333298346248E-5	DESIGN
in case we were deserialized in a different jvm look for an instance with the same name (alternatively we could do an actual jndi lookup here.)	WITHOUT_CLASSIFICATION	0.9801222411619923	WITHOUT_CLASSIFICATION	0.019877758838007666	DESIGN
first lets determine whether to apply cglib or javassist based instrumentation	WITHOUT_CLASSIFICATION	0.999983624530912	WITHOUT_CLASSIFICATION	1.6375469088005715E-5	DESIGN
make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9998097120691837	WITHOUT_CLASSIFICATION	1.902879308162371E-4	DESIGN
entirely optional!!	WITHOUT_CLASSIFICATION	0.9988450011208396	WITHOUT_CLASSIFICATION	0.0011549988791602875	DESIGN
its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9995174435285189	WITHOUT_CLASSIFICATION	4.825564714811044E-4	DESIGN
context.unbind(boundname)	WITHOUT_CLASSIFICATION	0.9990988684490842	WITHOUT_CLASSIFICATION	9.011315509158068E-4	DESIGN
readresolveobject	WITHOUT_CLASSIFICATION	0.9996356951231448	WITHOUT_CLASSIFICATION	3.643048768552535E-4	DESIGN
cfg.setproperty("hibernate.show_sql" "true")	WITHOUT_CLASSIFICATION	0.9995878471695502	WITHOUT_CLASSIFICATION	4.121528304497652E-4	DESIGN
defensive convenience methods	WITHOUT_CLASSIFICATION	0.9997188354709002	WITHOUT_CLASSIFICATION	2.811645290996987E-4	DESIGN
create the sessionfactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9997088107464263	WITHOUT_CLASSIFICATION	2.91189253573742E-4	DESIGN
make sure you log the exception as it might be swallowed	WITHOUT_CLASSIFICATION	0.999832991538814	WITHOUT_CLASSIFICATION	1.6700846118603127E-4	DESIGN
begin unit of work	WITHOUT_CLASSIFICATION	0.999720001367181	WITHOUT_CLASSIFICATION	2.7999863281911097E-4	DESIGN
write html header	WITHOUT_CLASSIFICATION	0.9996191605231359	WITHOUT_CLASSIFICATION	3.8083947686401865E-4	DESIGN
handle actions	WITHOUT_CLASSIFICATION	0.9995512772358492	WITHOUT_CLASSIFICATION	4.487227641507716E-4	DESIGN
print page	WITHOUT_CLASSIFICATION	0.9998905464032667	WITHOUT_CLASSIFICATION	1.0945359673337338E-4	DESIGN
write html footer	WITHOUT_CLASSIFICATION	0.999820596534808	WITHOUT_CLASSIFICATION	1.7940346519184535E-4	DESIGN
end unit of work	WITHOUT_CLASSIFICATION	0.9993407560404481	WITHOUT_CLASSIFICATION	6.592439595518781E-4	DESIGN
start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9100270793979715	WITHOUT_CLASSIFICATION	0.08997292060202852	DESIGN
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.999060985190608	WITHOUT_CLASSIFICATION	9.390148093918963E-4	DESIGN
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.999996106856294	WITHOUT_CLASSIFICATION	3.8931437059372255E-6	DESIGN
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9938545481072026	WITHOUT_CLASSIFICATION	0.006145451892797341	DESIGN
eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9954142938759512	WITHOUT_CLASSIFICATION	0.004585706124048884	DESIGN
if we want to handle it bidirectional and detached we also need to load this collection with an eager outer-join fetch this time with criteria and not hql	WITHOUT_CLASSIFICATION	0.9057084709320892	WITHOUT_CLASSIFICATION	0.09429152906791083	DESIGN
event anevent = (event) session .createcriteria(event.class).setfetchmode("participants" fetchmode.join) .add( expression.eq("id" eventid) ) .uniqueresult() eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9984255724218286	WITHOUT_CLASSIFICATION	0.0015744275781714057	DESIGN
end of first unit of work	WITHOUT_CLASSIFICATION	0.999482576774712	WITHOUT_CLASSIFICATION	5.174232252879856E-4	DESIGN
or bidirectional safety method setting both sides aperson.addtoevent(anevent)	WITHOUT_CLASSIFICATION	0.9999753818116679	WITHOUT_CLASSIFICATION	2.461818833211486E-5	DESIGN
begin second unit of work	WITHOUT_CLASSIFICATION	0.998896344837027	WITHOUT_CLASSIFICATION	0.0011036551629729793	DESIGN
reattachment of aperson	WITHOUT_CLASSIFICATION	0.9991870405295904	WITHOUT_CLASSIFICATION	8.129594704094872E-4	DESIGN
the getemailaddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9821496353726759	WITHOUT_CLASSIFICATION	0.017850364627324155	DESIGN
we need our tm so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9953768981251738	WITHOUT_CLASSIFICATION	0.004623101874826226	DESIGN
don't hold the jbc node lock throughout the tx as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999919077099972	WITHOUT_CLASSIFICATION	8.092290002693673E-6	DESIGN
don't hold the jbc node lock throughout the tx as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999919077099972	WITHOUT_CLASSIFICATION	8.092290002693673E-6	DESIGN
jbc put a version in the node when it created as part of some internal operation. we are always newer but if the jbc version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999675460721965	WITHOUT_CLASSIFICATION	3.245392780345702E-5	DESIGN
swaldman 2006-08-28 define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999950996315645	WITHOUT_CLASSIFICATION	4.900368435537861E-6	DESIGN
not null if the isolation level has been specified in the configuration file. otherwise it is left to the driver's default value.	WITHOUT_CLASSIFICATION	0.9999842216717315	WITHOUT_CLASSIFICATION	1.5778328268468476E-5	DESIGN
configured outside of hibernate (i.e. servlet container or java bean container already has proxool pools running and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9991107807441437	WITHOUT_CLASSIFICATION	8.892192558563829E-4	DESIGN
if you're closing down the connectionprovider chances are an is not a real big deal just warn	WITHOUT_CLASSIFICATION	0.9999629989479487	WITHOUT_CLASSIFICATION	3.700105205130014E-5	DESIGN
(as is always optional for consistency with sql/oql)	WITHOUT_CLASSIFICATION	0.9999535652140026	WITHOUT_CLASSIFICATION	4.6434785997321675E-5	DESIGN
process the "new" hql style where aliases are assigned _after_ the class name or path expression ie. using the as construction	WITHOUT_CLASSIFICATION	0.9999999416242354	WITHOUT_CLASSIFICATION	5.8375764551265914E-8	DESIGN
the loaded owner will be set to null after the collection is removed so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999929001709874	WITHOUT_CLASSIFICATION	7.099829012578355E-6	DESIGN
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9981615422584962	WITHOUT_CLASSIFICATION	0.0018384577415038635	DESIGN
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9995144874417423	WITHOUT_CLASSIFICATION	4.855125582575989E-4	DESIGN
handle a path expression or class name that appears at the start in the "new" hql style or an alias that appears at the start in the "old" hql style	WITHOUT_CLASSIFICATION	0.9999684145264102	WITHOUT_CLASSIFICATION	3.158547358987193E-5	DESIGN
handle <= >= != is not not between not in	WITHOUT_CLASSIFICATION	0.9952403362173121	WITHOUT_CLASSIFICATION	0.004759663782687826	DESIGN
the loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999961495919658	WITHOUT_CLASSIFICATION	3.850408034190563E-6	DESIGN
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9994179020791912	WITHOUT_CLASSIFICATION	5.82097920808738E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9998361941578463	WITHOUT_CLASSIFICATION	1.6380584215357932E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9998361941578463	WITHOUT_CLASSIFICATION	1.6380584215357932E-4	DESIGN
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9995689238891551	WITHOUT_CLASSIFICATION	4.31076110845014E-4	DESIGN
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999887003044631	WITHOUT_CLASSIFICATION	1.1299695536884206E-5	DESIGN
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9997571681850111	WITHOUT_CLASSIFICATION	2.428318149887052E-4	DESIGN
note special case default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999926320263036	WITHOUT_CLASSIFICATION	7.367973696430151E-6	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999792115520669	WITHOUT_CLASSIFICATION	2.078844793312395E-5	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998361310164067	WITHOUT_CLASSIFICATION	1.6386898359333458E-4	DESIGN
void setcomponenttuplizerfactory(componenttuplizerfactory componenttuplizerfactory) { this.componenttuplizerfactory = componenttuplizerfactory }	WITHOUT_CLASSIFICATION	0.9999259570398821	WITHOUT_CLASSIFICATION	7.40429601178744E-5	DESIGN
element index -> id	WITHOUT_CLASSIFICATION	0.9999912430362983	WITHOUT_CLASSIFICATION	8.756963701672066E-6	DESIGN
note that it might be better to iterate the snapshot but this is safe assuming the user implements equals() properly as required by the set contract!	WITHOUT_CLASSIFICATION	0.9786797961131962	WITHOUT_CLASSIFICATION	0.02132020388680369	DESIGN
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9996578642323213	WITHOUT_CLASSIFICATION	3.4213576767876775E-4	DESIGN
essentially if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception note that allowing close() above has the same basic effect but we capture that there simply to perform the unbind	WITHOUT_CLASSIFICATION	0.99999878928674	WITHOUT_CLASSIFICATION	1.210713259988925E-6	DESIGN
the default sqlexceptionconverter for all dialects is based on sqlstate since sqlerrorcode is extremely vendor-specific. specific dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999868806993365	WITHOUT_CLASSIFICATION	1.3119300663401869E-5	DESIGN
only necessary for postgre < 7.4 httpanoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.999381779178339	WITHOUT_CLASSIFICATION	6.182208216609431E-4	DESIGN
select topic syntax from information_schema.help where section like 'function%' order by section topic see also -> httpwww.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999986874679209	WITHOUT_CLASSIFICATION	1.3125320791029343E-6	DESIGN
registercolumntype(types.varbinary "character($l)") registercolumntype(types.blob "character($l)" ) for use prior to cp 11.0 registercolumntype(types.clob "character($l)" )	WITHOUT_CLASSIFICATION	0.9967926015955911	WITHOUT_CLASSIFICATION	0.0032073984044089683	DESIGN
the blob type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include k - kilobyte m - megabyte g - gigabyte. refer to the pbdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9958852559946584	WITHOUT_CLASSIFICATION	0.004114744005341654	DESIGN
we must return a valid rdms/rsa command from this method to prevent rdms/rsa from issuing error 400	WITHOUT_CLASSIFICATION	0.941350481927761	WITHOUT_CLASSIFICATION	0.05864951807223888	DESIGN
oracle driver reports to support getgeneratedkeys() but they only support the version taking an array of the names of the columns to be returned (via its returning clause). no other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999531374071574	WITHOUT_CLASSIFICATION	4.6862592842628436E-5	DESIGN
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999948160363549	WITHOUT_CLASSIFICATION	5.183963645217737E-6	DESIGN
you may still have other resultsets or update counts left to process here but you can't do it now or the resultset you just got will be closed	WITHOUT_CLASSIFICATION	0.9999998620640076	WITHOUT_CLASSIFICATION	1.3793599239885243E-7	DESIGN
note for object <-> sql datatype mappings see configuration manager | advanced | sql | system ddl datatype mappings tbdregistercolumntype(types.binary "binary($1)") changed 08-11-2005 jsl	WITHOUT_CLASSIFICATION	0.9998702256199191	WITHOUT_CLASSIFICATION	1.2977438008086571E-4	DESIGN
trim(end_keyword string-expression-1 from string-expression-2) use hibernate implementation "from" is one of the parameters they pass in position ?3 registerfunction( "trim" new sqlfunctiontemplate(hibernate.string "trim(?1 ?2 from ?3)") )	WITHOUT_CLASSIFICATION	0.9999929536871957	WITHOUT_CLASSIFICATION	7.046312804352136E-6	DESIGN
whether this dialect has an identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999604067430622	WITHOUT_CLASSIFICATION	3.959325693784373E-5	DESIGN
according to both the ansi-sql and jpa specs trim takes a variable number of parameters between 1 and 4. at least one paramer (trimsource) is required. from the sql spec <trim function> = trim <left paren> <trim operands> <right paren> <trim operands> = [ [ <trim specification> ] [ <trim character> ] from ] <trim source> <trim specification> = leading | trailing | both if <trim specification> is omitted both is assumed. if <trim character> is omitted space is assumed	WITHOUT_CLASSIFICATION	0.9999999999564333	WITHOUT_CLASSIFICATION	4.35666816498084E-11	DESIGN
/ prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999139298684375	WITHOUT_CLASSIFICATION	8.607013156246233E-5	DESIGN
named queries	WITHOUT_CLASSIFICATION	0.9998136407308508	WITHOUT_CLASSIFICATION	1.8635926914931398E-4	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.8692254904128	DESIGN	0.13077450958720008	WITHOUT_CLASSIFICATION
does not handle arrays (thats ok cos they can't be lazy) or newly instantiated collections so we can do the cast	WITHOUT_CLASSIFICATION	0.9976843994856237	WITHOUT_CLASSIFICATION	0.0023156005143762978	DESIGN
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9998840840551203	WITHOUT_CLASSIFICATION	1.1591594487967547E-4	DESIGN
we can do the cast since orphan-delete does not apply to 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999218771960859	WITHOUT_CLASSIFICATION	7.812280391404633E-5	DESIGN
if the natural-id is marked as non-mutable it is not retrieved during a normal database-snapshot operation	WITHOUT_CLASSIFICATION	0.9999971870282118	WITHOUT_CLASSIFICATION	2.812971788269749E-6	DESIGN
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999721344349649	WITHOUT_CLASSIFICATION	2.78655650351824E-5	DESIGN
slice to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9998278416290587	WITHOUT_CLASSIFICATION	1.7215837094126954E-4	DESIGN
int result = 17 result = 37 result + type.hashcode() result = 37 result + ( value==null ? 0 value.hashcode() ) return result	WITHOUT_CLASSIFICATION	0.9998630249578822	WITHOUT_CLASSIFICATION	1.3697504211793334E-4	DESIGN
the collectionentry.isreached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9996260589314917	WITHOUT_CLASSIFICATION	3.739410685082377E-4	DESIGN
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9985665148372965	WITHOUT_CLASSIFICATION	0.0014334851627035203	DESIGN
the unique property value represented here may or may not be serializable so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.5384457587288025	DESIGN	0.46155424127119754	WITHOUT_CLASSIFICATION
if the version of a newly instantiated object is not the same as the version seed value use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9979469777944043	WITHOUT_CLASSIFICATION	0.002053022205595708	DESIGN
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999775578542507	WITHOUT_CLASSIFICATION	2.2442145749306195E-5	DESIGN
ignore this row the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.999937853556334	WITHOUT_CLASSIFICATION	6.214644366592976E-5	DESIGN
entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently not yet used	WITHOUT_CLASSIFICATION	0.6878630925525452	DESIGN	0.31213690744745465	WITHOUT_CLASSIFICATION
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. besides it makes the code much easier to read than the old transactionhelper stuff	WITHOUT_CLASSIFICATION	0.9999987928897676	WITHOUT_CLASSIFICATION	1.207110232409287E-6	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9839329827449826	WITHOUT_CLASSIFICATION	0.01606701725501736	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9839329827449826	WITHOUT_CLASSIFICATION	0.01606701725501736	DESIGN
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999988962766899	WITHOUT_CLASSIFICATION	1.1037233100669588E-6	DESIGN
remove any snapshot not really for memory management purposes but rather because it might now be stale and there is no longer any entityentry to take precedence this is now handled by removeentity() session.getpersistencecontext().removedatabasesnapshot(key)	WITHOUT_CLASSIFICATION	0.8245818878632316	WITHOUT_CLASSIFICATION	0.1754181121367683	DESIGN
skip this check for composite-ids relating to dom4j entity-mode alternatively we could add a check to make sure the incoming id value is an instance of element	WITHOUT_CLASSIFICATION	0.9985391108228977	WITHOUT_CLASSIFICATION	0.0014608891771022584	DESIGN
upgrade the lock if necessary lock(result lockmode)	WITHOUT_CLASSIFICATION	0.9997543368014268	WITHOUT_CLASSIFICATION	2.4566319857317437E-4	DESIGN
now any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9845805661335946	WITHOUT_CLASSIFICATION	0.01541943386640538	DESIGN
we must clone embedded composite identifiers or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9998553010504703	WITHOUT_CLASSIFICATION	1.4469894952983195E-4	DESIGN
sub-insertions should occur before containing insertion so try to do the callback now	WITHOUT_CLASSIFICATION	0.9993137422377161	WITHOUT_CLASSIFICATION	6.862577622839446E-4	DESIGN
the entity is not associated with the session so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9997833845512504	WITHOUT_CLASSIFICATION	2.166154487496893E-4	DESIGN
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9978930948398996	WITHOUT_CLASSIFICATION	0.0021069051601002703	DESIGN
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999865531598582	WITHOUT_CLASSIFICATION	1.3446840141803353E-4	DESIGN
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998578638024812	WITHOUT_CLASSIFICATION	1.421361975187262E-4	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9453281627181077	WITHOUT_CLASSIFICATION	0.05467183728189225	DESIGN
if it is an uninitialized proxy pointing with this session then when it is accessed the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999441288152139	WITHOUT_CLASSIFICATION	5.587118478616481E-5	DESIGN
generate an explicit join for the root dot node. the implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999305426456	WITHOUT_CLASSIFICATION	6.945735436396609E-8	DESIGN
a session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9976260397131261	WITHOUT_CLASSIFICATION	0.002373960286873892	DESIGN
does the collection referenced by this fromelement specify an order-by attribute? if so attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9993506418393094	WITHOUT_CLASSIFICATION	6.493581606906411E-4	DESIGN
and the token could be an identifer and the error is a mismatched token error	WITHOUT_CLASSIFICATION	0.9808883964688546	WITHOUT_CLASSIFICATION	0.01911160353114547	DESIGN
if a where clause was specified in the update/delete query use it to limit the returned ids here	WITHOUT_CLASSIFICATION	0.9999977673142528	WITHOUT_CLASSIFICATION	2.2326857471617696E-6	DESIGN
int parameterstart = getwalker().getnumberofparametersinsetclause() list allparams = getidselectparameterspecifications() iterator whereparams = allparams.sublist( parameterstart allparams.size() ).iterator()	WITHOUT_CLASSIFICATION	0.9999864579698	WITHOUT_CLASSIFICATION	1.354203019995772E-5	DESIGN
default implementation if this node has a data type and that data type is not an association then this is scalar.	WITHOUT_CLASSIFICATION	0.9998549501697996	WITHOUT_CLASSIFICATION	1.4504983020047563E-4	DESIGN
resolve the lhs fully generate implicit joins. pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.999946718756607	WITHOUT_CLASSIFICATION	5.3281243392981686E-5	DESIGN
if the propertytype is null and there isn't a parent just stop now there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9998993289023186	WITHOUT_CLASSIFICATION	1.0067109768138942E-4	DESIGN
we do not look for an existing join on the same path because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9995730462622094	WITHOUT_CLASSIFICATION	4.269537377906104E-4	DESIGN
our parent is another dot node meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's pk (because 'our' table would know the fk).	WITHOUT_CLASSIFICATION	0.9999924372961262	WITHOUT_CLASSIFICATION	7.562703873788586E-6	DESIGN
public final currency getcurrency(int col) throws hibernateexception {return (currency) get(col)}	WITHOUT_CLASSIFICATION	0.9994843415649358	WITHOUT_CLASSIFICATION	5.156584350641229E-4	DESIGN
here we have two possibilities 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9998585842473733	WITHOUT_CLASSIFICATION	1.4141575262662057E-4	DESIGN
set the unresolved path in this node and the parent. set the text for the parent.	WITHOUT_CLASSIFICATION	0.9997368542299471	WITHOUT_CLASSIFICATION	2.63145770052926E-4	DESIGN
get the first child to be considered. sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. distinct).	WITHOUT_CLASSIFICATION	0.9993805275945962	WITHOUT_CLASSIFICATION	6.194724054038627E-4	DESIGN
if this is an entity and the property is the identifier property then use getidentifiertype(). note that the propertyname.equals( propertypath ) checks whether we have a component key reference where the component class property name is the same as the entity id property name if the two are not equal this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9945591715904651	WITHOUT_CLASSIFICATION	0.005440828409534793	DESIGN
for a subquery the alias to use depends on a few things (we already know this is not an overall select) 1) if this from_element represents a correlation to the outer-most query a) if the outer query represents a multi-table persister we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) b) otherwise we need to use the persister's table name as the column qualification 2) otherwise (not correlated) use the given alias	WITHOUT_CLASSIFICATION	0.7402025941624647	WITHOUT_CLASSIFICATION	0.25979740583753536	DESIGN
not a collection? return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9910667135297192	WITHOUT_CLASSIFICATION	0.008933286470280738	DESIGN
collection of <many-to-any/> mappings used to circumvent the component-collection check below	WITHOUT_CLASSIFICATION	0.9460713365258326	WITHOUT_CLASSIFICATION	0.0539286634741674	DESIGN
otherwise the destination node was implied by the from clause and the from clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.999966876669984	WITHOUT_CLASSIFICATION	3.3123330016112895E-5	DESIGN
if the first identifier in the path referrs to the class alias (not the class name) then this is a correlated subselect. if it's a correlated sub-select use the existing table alias. otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9978358406513582	WITHOUT_CLASSIFICATION	0.002164159348641848	DESIGN
check to see if our "proppath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9998541954743227	WITHOUT_CLASSIFICATION	1.4580452567716405E-4	DESIGN
an ident node can represent an index expression if the ident represents a naked property ref note this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrexpr -> resolve()). the other option if that changes is to call resolve from here but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9955963161887547	WITHOUT_CLASSIFICATION	0.004403683811245427	DESIGN
this uses a pathexpressionparser but notice that compound paths are not valid only bare names and simple paths	WITHOUT_CLASSIFICATION	0.9966650948888489	WITHOUT_CLASSIFICATION	0.0033349051111510922	DESIGN
if this is an implied join in a from clause then use ansi-style joining and set the flag on the fromelement that indicates that it was implied in the from clause itself.	WITHOUT_CLASSIFICATION	0.9999344151934482	WITHOUT_CLASSIFICATION	6.55848065518841E-5	DESIGN
origin.adddestination(destination) add the query spaces.	WITHOUT_CLASSIFICATION	0.9999333471757856	WITHOUT_CLASSIFICATION	6.665282421434917E-5	DESIGN
for an explicit many-to-many relationship add a second join from the intermediate (many-to-many) table to the destination table. also make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999990308810347	WITHOUT_CLASSIFICATION	9.691189653068792E-7	DESIGN
reset the node type because the rest of the system is expecting from_fragment all we wanted was for the factory to create the right sub-class. this might get reset again later on anyway to make the sql generation simpler.	WITHOUT_CLASSIFICATION	0.9811694333695242	WITHOUT_CLASSIFICATION	0.018830566630475803	DESIGN
explicit = true this is an explict select. arraylist sqlresulttypelist = new arraylist()	WITHOUT_CLASSIFICATION	0.9998566030494304	WITHOUT_CLASSIFICATION	1.4339695056963403E-4	DESIGN
sqlresulttypelist.add( type ) generate the select expression.	WITHOUT_CLASSIFICATION	0.9962322458084709	WITHOUT_CLASSIFICATION	0.003767754191528956	DESIGN
if the expression list has exactly one expression and the type of the expression is a collection then this might be a collection function such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9992499117513924	WITHOUT_CLASSIFICATION	7.500882486076159E-4	DESIGN
need to parse off the column qualifiers this is assuming (which is true as of now) that this is only used from update and delete hql statement parsing	WITHOUT_CLASSIFICATION	0.9828878433820942	WITHOUT_CLASSIFICATION	0.017112156617905775	DESIGN
for regression testing against output from the old parser found it easiest to simply reorder the fromelements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser this is definitely another of those "only needed for regression purposes". the syntheticandfactory then simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999991758620509	WITHOUT_CLASSIFICATION	8.241379490671154E-7	DESIGN
the uber-rule here is that we need to include subclass joins if the fromelement is in any way dereferenced by a property from the subclass table otherwise we end up with column references qualified by a non-existent table reference in the resulting sql	WITHOUT_CLASSIFICATION	0.9993367426759496	WITHOUT_CLASSIFICATION	6.632573240503456E-4	DESIGN
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.986248357360525	WITHOUT_CLASSIFICATION	0.013751642639474964	DESIGN
the following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9992160974894827	WITHOUT_CLASSIFICATION	7.839025105173084E-4	DESIGN
the loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999961495919658	WITHOUT_CLASSIFICATION	3.850408034190563E-6	DESIGN
should not be able to reach last without maxposition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9995594335453649	WITHOUT_CLASSIFICATION	4.405664546351659E-4	DESIGN
we found it in the temp pc. should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999342993326672	WITHOUT_CLASSIFICATION	6.570066733284516E-5	DESIGN
do not use proxiesbykey since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9983418764135752	WITHOUT_CLASSIFICATION	0.001658123586424817	DESIGN
if there is no tm configured we will not be able to access the javax.transaction.transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999784056940074	WITHOUT_CLASSIFICATION	2.1594305992544617E-5	DESIGN
since the result set cursor is always left at the first physical row after the "last processed" we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999999764005388	WITHOUT_CLASSIFICATION	2.3599461114836866E-8	DESIGN
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a collectioninitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9990551670688685	WITHOUT_CLASSIFICATION	9.448329311314516E-4	DESIGN
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode none)	WITHOUT_CLASSIFICATION	0.998736223859075	WITHOUT_CLASSIFICATION	0.0012637761409250892	DESIGN
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9998682687447591	WITHOUT_CLASSIFICATION	1.317312552409346E-4	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9996529230191676	WITHOUT_CLASSIFICATION	3.470769808323535E-4	DESIGN
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.999351006388882	WITHOUT_CLASSIFICATION	6.489936111179813E-4	DESIGN
ps.close() just close it do not try to return it to the pool! note early exit!	WITHOUT_CLASSIFICATION	0.9999781763346892	WITHOUT_CLASSIFICATION	2.1823665310826357E-5	DESIGN
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through hibernate's registered transaction synchronization on a separate "reaping" thread. in cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these cmes occur. and though it is not "allowed" per-se the end result without handling it specifically is infinite looping. so here we simply break the loop	WITHOUT_CLASSIFICATION	0.9999988079458606	WITHOUT_CLASSIFICATION	1.1920541393853258E-6	DESIGN
unfortunately this stuff can't be cached because it is per-invocation not constant for the querytranslator instance	WITHOUT_CLASSIFICATION	0.9997867961578364	WITHOUT_CLASSIFICATION	2.1320384216372103E-4	DESIGN
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9998581140352497	WITHOUT_CLASSIFICATION	1.4188596475030884E-4	DESIGN
don't create a unique key 'cos some databases don't like a uk on nullable columns getcollectiontable().createuniquekey( getidentifier().getconstraintcolumns() )	WITHOUT_CLASSIFICATION	0.9989895749328065	WITHOUT_CLASSIFICATION	0.0010104250671934773	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or entityinfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996459399024182	WITHOUT_CLASSIFICATION	3.540600975817833E-4	DESIGN
isset = collection.isset() issorted = collection.issorted()	WITHOUT_CLASSIFICATION	0.9999138296682717	WITHOUT_CLASSIFICATION	8.617033172830342E-5	DESIGN
lists arrays sets maps bags	WITHOUT_CLASSIFICATION	0.9950135803443869	WITHOUT_CLASSIFICATION	0.004986419655613102	DESIGN
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9995565030781618	WITHOUT_CLASSIFICATION	4.43496921838245E-4	DESIGN
use a combination of foreign key columns and pk columns since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9992477816214487	WITHOUT_CLASSIFICATION	7.522183785512103E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or entityinfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996459399024182	WITHOUT_CLASSIFICATION	3.540600975817833E-4	DESIGN
information about properties of this class including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9967720629446464	WITHOUT_CLASSIFICATION	0.003227937055353684	DESIGN
all this only really needs to consider properties of this class not its subclasses but since we are reusing code used for sequential selects we use the subclass closure	WITHOUT_CLASSIFICATION	0.9781858855493539	DESIGN	0.021814114450646172	WITHOUT_CLASSIFICATION
here we render the select column list based on the properties defined as being generated. for partial component generation we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9986414176241957	WITHOUT_CLASSIFICATION	0.0013585823758043476	DESIGN
this is the root (versioned) table and we are using version-based optimistic locking if we are not updating the version also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.99696087689406	WITHOUT_CLASSIFICATION	0.0030391231059399876	DESIGN
optimistic-lock="all" include all updatable properties optimistic-lock="dirty" include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999630115869989	WITHOUT_CLASSIFICATION	3.6988413001100406E-5	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9932170583159149	WITHOUT_CLASSIFICATION	0.006782941684085094	DESIGN
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a jta transaction context so must be autocommit mode)	WITHOUT_CLASSIFICATION	0.9961842764344052	WITHOUT_CLASSIFICATION	0.0038157235655946987	DESIGN
need to treat this as if it where optimistic-lock="all" (dirty does not make sense) first we need to locate the "loaded" state note it potentially could be a proxy so perform the location the safe way	WITHOUT_CLASSIFICATION	0.9865008732712013	WITHOUT_CLASSIFICATION	0.013499126728798825	DESIGN
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9998728498422698	WITHOUT_CLASSIFICATION	1.2715015773019536E-4	DESIGN
need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. using the collection's key type causes problems with property-ref keys	WITHOUT_CLASSIFICATION	0.9999583796003454	WITHOUT_CLASSIFICATION	4.1620399654624476E-5	DESIGN
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9985633397776156	WITHOUT_CLASSIFICATION	0.0014366602223844372	DESIGN
following doesn't handle (null not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9989664542708	WITHOUT_CLASSIFICATION	0.001033545729199947	DESIGN
impl note due to the delayed population of setters (setters cached for performance) we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9994660054758816	WITHOUT_CLASSIFICATION	5.339945241182987E-4	DESIGN
we need to dirty check collections since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9991361459275833	WITHOUT_CLASSIFICATION	8.638540724168429E-4	DESIGN
return the id so we can use it to reset the proxy id return result	WITHOUT_CLASSIFICATION	0.999908966112911	WITHOUT_CLASSIFICATION	9.10338870888995E-5	DESIGN
optimizer = getfactory().getsettings().getbytecodeprovider().getreflectionoptimizer( mappedclass getternames setternames proptypes )	WITHOUT_CLASSIFICATION	0.9995574286188845	WITHOUT_CLASSIFICATION	4.4257138111548856E-4	DESIGN
cache the actual id of the object not the value of the property-ref which might not be initialized	WITHOUT_CLASSIFICATION	0.9578930888447915	WITHOUT_CLASSIFICATION	0.04210691115520854	DESIGN
we now have the value of the property-ref we reference. however we need to dig a little deeper as that property might also be an entity type in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9777128686603327	WITHOUT_CLASSIFICATION	0.02228713133966742	DESIGN
retrieve the value of the designated column in the current row of this resultset object as a java.io.reader object	WITHOUT_CLASSIFICATION	0.9999463359992412	WITHOUT_CLASSIFICATION	5.366400075878973E-5	DESIGN
not absolutely necessary but helps for some equals()/hashcode() implementations	WITHOUT_CLASSIFICATION	0.9984483176405275	WITHOUT_CLASSIFICATION	0.0015516823594724951	DESIGN
this should be a call to resolve() not resolveidentifier() 'cos it might be a property-ref and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.5451779604015445	WITHOUT_CLASSIFICATION	0.4548220395984556	DESIGN
if we have <tt>not-found="ignore"</tt> association mapped to a formula we always need to dirty check it so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.987312152142387	WITHOUT_CLASSIFICATION	0.012687847857612962	DESIGN
can't just return null here since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9998327583078124	WITHOUT_CLASSIFICATION	1.6724169218765942E-4	DESIGN
for arrays replaceelements() may return a different reference since the array length might not match	WITHOUT_CLASSIFICATION	0.9916405186538706	WITHOUT_CLASSIFICATION	0.008359481346129401	DESIGN
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the mru entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9986722151062126	WITHOUT_CLASSIFICATION	0.0013277848937874287	DESIGN
as soon as we encounter our first letter return the substring from that position	WITHOUT_CLASSIFICATION	0.9999634249677138	WITHOUT_CLASSIFICATION	3.6575032286271483E-5	DESIGN
note expected in the syntax type=listenerclass ({sep}type=listenerclass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999698170844133	WITHOUT_CLASSIFICATION	3.018291558666279E-5	DESIGN
istransactioncallbackregistered denotes whether any hibernate transaction has registered as a callback against this jdbccontext only one such callback is allowed. directly serializing this value causes problems with jdbctransaction or really any transaction impl where the callback is local to the transaction instance itself since that transaction is not serialized along with the jdbccontext. thus we handle that fact here explicitly	WITHOUT_CLASSIFICATION	0.9999849320790171	WITHOUT_CLASSIFICATION	1.506792098282219E-5	DESIGN
note that for sequential scrolling we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9982559965165558	WITHOUT_CLASSIFICATION	0.001744003483444206	DESIGN
we call getkeyfromresultset() here so that we can know the key value upon which to perform the breaking logic. however it is also then called from getrowfromresultset() which is certainly not the most efficient. but the call here is needed and there currently is no other way without refactoring of the doquery()/getrowfromresultset() methods	WITHOUT_CLASSIFICATION	0.6654474763691732	DESIGN	0.3345525236308267	WITHOUT_CLASSIFICATION
this check is needed since processing leaves the cursor after the last physical row for the current logical row thus if we are after the last physical row this might be caused by either 1) scrolling to the last logical row 2) scrolling past the last logical row in the latter scenario the previous logical row really is the last logical row. in all other cases we should process back two logical records (the current logic row plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9988721184636394	WITHOUT_CLASSIFICATION	0.0011278815363605617	DESIGN
and perform the load	WITHOUT_CLASSIFICATION	0.999780902558059	WITHOUT_CLASSIFICATION	2.1909744194109106E-4	DESIGN
important reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9998959122618276	WITHOUT_CLASSIFICATION	1.0408773817241703E-4	DESIGN
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9777578184291189	WITHOUT_CLASSIFICATION	0.022242181570881193	DESIGN
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9994643598421891	WITHOUT_CLASSIFICATION	5.356401578108586E-4	DESIGN
we did not find a collection element in the result set so we ensure that a collection is created with the owner's identifier since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999689191308879	WITHOUT_CLASSIFICATION	3.108086911212025E-5	DESIGN
this is a collection initializer so we must create a collection for each of the passed-in keys to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9915424210002804	WITHOUT_CLASSIFICATION	0.008457578999719542	DESIGN
grab its state from the resultset and keep it in the session (but don't yet initialize the object itself) note that we acquire lockmode.read even if it was not requested	WITHOUT_CLASSIFICATION	0.9985865347378354	WITHOUT_CLASSIFICATION	0.0014134652621645661	DESIGN
a many-to-many decrement currentdepth here to allow join across the association table without exceeding max_fetch_depth (i.e. the "currentdepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9997478113191031	WITHOUT_CLASSIFICATION	2.5218868089692286E-4	DESIGN
if not a composite key use "foo in (? ? ?)" for batching if no batch and not a composite key use "foo = ?"	WITHOUT_CLASSIFICATION	0.9981313208206175	WITHOUT_CLASSIFICATION	0.0018686791793824495	DESIGN
the user visible aliases which are unknown to the superclass these are not the actual "physical" sql aliases	WITHOUT_CLASSIFICATION	0.9999998405388021	WITHOUT_CLASSIFICATION	1.5946119793618287E-7	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999990316026266	WITHOUT_CLASSIFICATION	9.683973734057375E-6	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999990316026266	WITHOUT_CLASSIFICATION	9.683973734057375E-6	DESIGN
it does not refer to an alias of a projection look for a property	WITHOUT_CLASSIFICATION	0.9997455689998969	WITHOUT_CLASSIFICATION	2.544310001031342E-4	DESIGN
determine if the collection elements are entities	WITHOUT_CLASSIFICATION	0.9999294098379832	WITHOUT_CLASSIFICATION	7.059016201684044E-5	DESIGN
let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9998765165209247	WITHOUT_CLASSIFICATION	1.234834790752382E-4	DESIGN
translates an ast join type (i.e. the token type) into a joinfragment.xxx join type. @param astjointype the ast join type (from hqlsqltokentypes or sqltokentypes) @return a joinfragment.xxx join type. @see joinfragment @see sqltokentypes	WITHOUT_CLASSIFICATION	0.9997880120812382	WITHOUT_CLASSIFICATION	2.119879187617268E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.999977561514074	WITHOUT_CLASSIFICATION	2.2438485926063745E-5	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.999977561514074	WITHOUT_CLASSIFICATION	2.2438485926063745E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.9998003318979424	WITHOUT_CLASSIFICATION	1.9966810205768084E-4	DESIGN
public list getcollectionaliases() { return collectionaliases } public list getcollectionowners() { return collectionowners } public list getcollectionowneraliases() { return collectionowneraliases } public list getcollectionpersisters() { return collectionpersisters } public map getalias2persister() { return alias2persister } public boolean iscollectioninitializer() { return iscollectioninitializer } public list getpersisters() { return persisters } public map getalias2owneralias() { return alias2owneralias } public list getscalartypes() { return scalartypes } public list getscalarcolumnaliases() { return scalarcolumnaliases } public list getpropertyresults() { return propertyresults } public list getcollectionpropertyresults() { return collectionresults } public map getalias2return() { return alias2return }	WITHOUT_CLASSIFICATION	0.9997475808889134	WITHOUT_CLASSIFICATION	2.524191110867239E-4	DESIGN
sqlqueryparser parser = new sqlqueryparser( sqlquery processor.getalias2persister() processor.getalias2return() aliases collaliases collpersisters suffixes collsuffixes ) sql = parser.process() namedparameterbindpoints = parser.getnamedparameters()	WITHOUT_CLASSIFICATION	0.9993480635159612	WITHOUT_CLASSIFICATION	6.51936484038811E-4	DESIGN
include the discriminator and class-level where but not filters	WITHOUT_CLASSIFICATION	0.9999748691312081	WITHOUT_CLASSIFICATION	2.5130868791791992E-5	DESIGN
sqlaliassuffixes[i] = element.getcolumnaliassuffix()	WITHOUT_CLASSIFICATION	0.9998963213616008	WITHOUT_CLASSIFICATION	1.0367863839925279E-4	DESIGN
none because its the requested lock mode not the actual!	WITHOUT_CLASSIFICATION	0.999692835761412	WITHOUT_CLASSIFICATION	3.071642385880134E-4	DESIGN
at this point we have (drivingsqlalias) the sql alias of the driving table corresponding to the given user alias. however the driving table is not (necessarily) the table against which we want to apply locks. mainly the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999981449691395	WITHOUT_CLASSIFICATION	1.8550308604222383E-6	DESIGN
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999648498165269	WITHOUT_CLASSIFICATION	3.5150183473178904E-5	DESIGN
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999264204799476	WITHOUT_CLASSIFICATION	7.357952005240635E-5	DESIGN
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9981231027151499	WITHOUT_CLASSIFICATION	0.001876897284850012	DESIGN
both many-to-one and one-to-one are represented as a property. entitypersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. so we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. the other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. if that assertion changes then this check needs to change as well. partially this is an issue with the overloading of the term "lazy" here	WITHOUT_CLASSIFICATION	0.9990006348910712	DESIGN	9.9936510892877E-4	WITHOUT_CLASSIFICATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999547049582346	WITHOUT_CLASSIFICATION	4.529504176535924E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999547049582346	WITHOUT_CLASSIFICATION	4.529504176535924E-5	DESIGN
roottablename = persistentclass.getroottable().getqualifiedname( factory.getdialect() factory.getdefaultcatalog() factory.getdefaultschema() )	WITHOUT_CLASSIFICATION	0.9995574286188845	WITHOUT_CLASSIFICATION	4.4257138111548856E-4	DESIGN
subclasses	WITHOUT_CLASSIFICATION	0.999918055904475	WITHOUT_CLASSIFICATION	8.194409552501135E-5	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999739397927501	WITHOUT_CLASSIFICATION	2.606020724999143E-5	DESIGN
protected void initpropertypaths(final string pathfinal type typefinal string[] columnsfinal string[] formulatemplatesfinal mapping factory)throws mappingexception {addformulapropertypath(path type formulatemplates)initpropertypaths(path type columns formulatemplates factory)}	WITHOUT_CLASSIFICATION	0.99999017952188	WITHOUT_CLASSIFICATION	9.820478120070801E-6	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995689692001622	WITHOUT_CLASSIFICATION	4.310307998376784E-4	DESIGN
custom sql (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9996328065896262	WITHOUT_CLASSIFICATION	3.6719341037384307E-4	DESIGN
moved up from abstractentitypersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9967027171605315	WITHOUT_CLASSIFICATION	0.0032972828394684122	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995689692001622	WITHOUT_CLASSIFICATION	4.310307998376784E-4	DESIGN
aliases for identifier ( alias.id ) skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9955508735219578	WITHOUT_CLASSIFICATION	0.0044491264780422025	DESIGN
decide which resultset to get the property value from	WITHOUT_CLASSIFICATION	0.9998695667233424	WITHOUT_CLASSIFICATION	1.3043327665769488E-4	DESIGN
note it is conceptually possible that a usertype could map null to a non-null value so the following is arguable	WITHOUT_CLASSIFICATION	0.9996373631456602	WITHOUT_CLASSIFICATION	3.626368543398777E-4	DESIGN
the contract of entitytuplizer.determineconcretesubclassentityname says that returning null is an indication that the specified entity-name (this.getentityname) should be used.	WITHOUT_CLASSIFICATION	0.8193700982348145	WITHOUT_CLASSIFICATION	0.18062990176518548	DESIGN
need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. using the collection's key type causes problems with property-ref keys	WITHOUT_CLASSIFICATION	0.9999583796003454	WITHOUT_CLASSIFICATION	4.1620399654624476E-5	DESIGN
cache these since they are stateless this one could even be static	WITHOUT_CLASSIFICATION	0.705360431636023	WITHOUT_CLASSIFICATION	0.2946395683639771	DESIGN
"as" is not in keywords	WITHOUT_CLASSIFICATION	0.9925226133880769	WITHOUT_CLASSIFICATION	0.007477386611923023	DESIGN
--commented out by inspection (12/4/04 910 am) public abstract void addcondition(string alias string[] columns string condition)	WITHOUT_CLASSIFICATION	0.9999907802594759	WITHOUT_CLASSIFICATION	9.219740524209113E-6	DESIGN
use the id column alias	WITHOUT_CLASSIFICATION	0.9998922664536872	WITHOUT_CLASSIFICATION	1.0773354631277779E-4	DESIGN
private list aliases = new arraylist()	WITHOUT_CLASSIFICATION	0.9999461064466687	WITHOUT_CLASSIFICATION	5.38935533313176E-5	DESIGN
columns.add(columnname) aliases.add(tablealias)	WITHOUT_CLASSIFICATION	0.9995689692001622	WITHOUT_CLASSIFICATION	4.310307998376784E-4	DESIGN
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9804847934039019	WITHOUT_CLASSIFICATION	0.019515206596098057	DESIGN
revert to traditional hibernate behavior of setting initialpoolsize to minpoolsize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999699773347264	WITHOUT_CLASSIFICATION	3.0022665273682363E-5	DESIGN
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999490053392515	WITHOUT_CLASSIFICATION	5.099466074850452E-5	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9864721890286203	WITHOUT_CLASSIFICATION	0.01352781097137967	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9864721890286203	WITHOUT_CLASSIFICATION	0.01352781097137967	DESIGN
if an exception occurs during flush user must call rollback()	WITHOUT_CLASSIFICATION	0.9999361463966226	WITHOUT_CLASSIFICATION	6.385360337734116E-5	DESIGN
essentially 1) if we have a local (hibernate) transaction in progress and it already has the usertransaction cached use that usertransaction to determine the status. 2) if a transaction manager has been located use that transaction manager to determine the status. 3) finally as the last resort try to lookup the usertransaction via jndi and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999999980328372	WITHOUT_CLASSIFICATION	1.9671627768357108E-9	DESIGN
package	WITHOUT_CLASSIFICATION	0.9994785270872577	WITHOUT_CLASSIFICATION	5.214729127423224E-4	DESIGN
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.999512010072066	WITHOUT_CLASSIFICATION	4.8798992793400907E-4	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9999722213505767	WITHOUT_CLASSIFICATION	2.7778649423150443E-5	DESIGN
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database) since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9097116289433599	DESIGN	0.09028837105664013	WITHOUT_CLASSIFICATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9998903961243867	WITHOUT_CLASSIFICATION	1.0960387561338677E-4	DESIGN
regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed) so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999978066654509	WITHOUT_CLASSIFICATION	2.1933345490668577E-6	DESIGN
then handle any user-defined entity modes	WITHOUT_CLASSIFICATION	0.9984277783127671	WITHOUT_CLASSIFICATION	0.0015722216872329604	DESIGN
establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9997406054796414	WITHOUT_CLASSIFICATION	2.5939452035852637E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9792581353171538	WITHOUT_CLASSIFICATION	0.02074186468284625	DESIGN
note this is being used from the process of shutting down a sessionfactory. specific things to consider (1) this clearing of the region should not propagate to other nodes on the cluster (if any) this is the cache-mode-local option bit (2) really just trying a best effort to cleanup after ourselves lock failures etc are not critical here this is the fail-silently option bit	WITHOUT_CLASSIFICATION	0.9999741429344445	DESIGN	2.5857065555527115E-5	WITHOUT_CLASSIFICATION
need to extract the component values and check for subtype replacements	WITHOUT_CLASSIFICATION	0.9996664593048042	WITHOUT_CLASSIFICATION	3.335406951957687E-4	DESIGN
we ignore minimalputoverride. jbosscache putforexternalread is already about as minimal as we can get it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999973042177979	WITHOUT_CLASSIFICATION	2.6957822021738354E-6	DESIGN
for now just "re-flatten" the metamodel since this is temporary stuff anyway (hhh-1907)	WITHOUT_CLASSIFICATION	0.9220523657932698	WITHOUT_CLASSIFICATION	0.07794763420673029	DESIGN
configure the cache to use our tm	WITHOUT_CLASSIFICATION	0.9994030067607257	WITHOUT_CLASSIFICATION	5.969932392743835E-4	DESIGN
this solution would allow us to eliminate the owner arg to disassemble() but what if the collection was null and then later had elements added? seems unsafe session.getpersistencecontext().getcollectionentry( (persistentcollection) value ).getkey()	WITHOUT_CLASSIFICATION	0.7090323175482914	WITHOUT_CLASSIFICATION	0.29096768245170845	DESIGN
make sure jbc doesn't look one up	WITHOUT_CLASSIFICATION	0.9998085518519428	WITHOUT_CLASSIFICATION	1.9144814805713224E-4	DESIGN
some collections are not lazy	WITHOUT_CLASSIFICATION	0.9927105267420337	WITHOUT_CLASSIFICATION	0.007289473257966312	DESIGN
here we don't want to suspend the tx. if we do 1) we might be caching query results that reflect uncommitted changes. no tx == no wl on cache node so other threads can prematurely see those query results 2) no tx == immediate replication. more overhead plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.8772244012903924	WITHOUT_CLASSIFICATION	0.12277559870960775	DESIGN
return the (fully resolved) identifier value but do not resolve to the actual referenced entity instance note the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9951441409859013	WITHOUT_CLASSIFICATION	0.004855859014098589	DESIGN
add a zero (or quite low) timeout option so we don't block. ignore any timeoutexception. basically we forego caching the query result in order to avoid blocking. reads are done with suspended tx so they should not hold the lock for long. not caching the query result is ok since any subsequent read will just see the old result with its out-of-date timestamp that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999999998863075	WITHOUT_CLASSIFICATION	1.1369243418519861E-10	DESIGN
impl note takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method	WITHOUT_CLASSIFICATION	0.943523962410178	WITHOUT_CLASSIFICATION	0.05647603758982203	DESIGN
we have the jbcwritemutex so no other local thread will be trying to write this key. it's possible here some remote thread has come in and changed the values again but since we are reading the values to write to jbc right now we know we are writing the latest values i.e. we don't assume that what we cached in entry.update() above is what we should write to jbc now. our write could be redundant i.e. we are writing what some remote thread just came in an wrote. there is a chance that yet another remote thread will update us and we'll then overwrite that later data in jbc. but all remote nodes will ignore that change in their localcache the only place it will live will be in jbc where it can only effect the initial state transfer values on newly joined nodes (i.e. populatelocalcache()).	WITHOUT_CLASSIFICATION	0.9977815402297239	WITHOUT_CLASSIFICATION	0.002218459770276054	DESIGN
local cache so we use synchronization	WITHOUT_CLASSIFICATION	0.9960941190986442	WITHOUT_CLASSIFICATION	0.0039058809013556776	DESIGN
local cache so we use synchronization	WITHOUT_CLASSIFICATION	0.9960941190986442	WITHOUT_CLASSIFICATION	0.0039058809013556776	DESIGN
don't need to lock the cache here since if someone else inserted the same pk first the insert would fail	WITHOUT_CLASSIFICATION	0.9999993744558404	WITHOUT_CLASSIFICATION	6.255441596390504E-7	DESIGN
we need to grab the version value from the entity otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.8978373407170648	WITHOUT_CLASSIFICATION	0.10216265928293518	DESIGN
we need to obtain the lock before any actions are executed since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999543925589953	WITHOUT_CLASSIFICATION	4.560744100474612E-5	DESIGN
postdelete after actually deleting a row record the fact that the instance no longer exists on the database (needed for identity-column key generation) and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9992703839982905	WITHOUT_CLASSIFICATION	7.296160017095213E-4	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9996912100243233	WITHOUT_CLASSIFICATION	3.087899756766436E-4	DESIGN
todo what else to do here?	DESIGN	0.9835538849643207	DESIGN	0.01644611503567933	WITHOUT_CLASSIFICATION
put() has nowait semantics is this really appropriate? note that it needs to be async replication never local or sync	DESIGN	0.9671607224269463	DESIGN	0.03283927757305369	WITHOUT_CLASSIFICATION
'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. the need for it is intended to be alleviated with future developement thus it is not defined as an environment constant it is used to control whether we should consult the jdbc metadata to determine certain settings default values it is useful to not do this when the database may not be available (mainly in tools usage).	DESIGN	0.9999922130976289	DESIGN	7.786902371134603E-6	WITHOUT_CLASSIFICATION
todo get sql rendering out of this package!	DESIGN	0.5860658149768219	DESIGN	0.4139341850231782	WITHOUT_CLASSIFICATION
todo get sql rendering out of this package!	DESIGN	0.5860658149768219	DESIGN	0.4139341850231782	WITHOUT_CLASSIFICATION
todo eventually merge this with treecache and just add optional opt-lock support there.	DESIGN	0.9212732078866804	DESIGN	0.07872679211331958	WITHOUT_CLASSIFICATION
can happen because of the multiple ways cache.remove() can be invoked (	DESIGN	0.9999092776888738	WITHOUT_CLASSIFICATION	9.072231112609796E-5	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea	DESIGN	0.995228336917835	WITHOUT_CLASSIFICATION	0.0047716630821650835	DESIGN
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9999856173975994	DESIGN	1.4382602400611118E-5	WITHOUT_CLASSIFICATION
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9999856173975994	DESIGN	1.4382602400611118E-5	WITHOUT_CLASSIFICATION
fixme hacky workaround to jbcache-1202	DESIGN	0.9999972322855493	DESIGN	2.7677144508415093E-6	WITHOUT_CLASSIFICATION
fixme hacky workaround to jbcache-1202	DESIGN	0.9999972322855493	DESIGN	2.7677144508415093E-6	WITHOUT_CLASSIFICATION
todo i considered validating ts cache config here but decided to defer unti gettimestampscacheinstance() in case the cache is never actually used	DESIGN	0.9999205245317332	DESIGN	7.947546826688665E-5	WITHOUT_CLASSIFICATION
todo is this a valid operation on a timestamps cache?	DESIGN	0.8211086489078337	DESIGN	0.17889135109216622	WITHOUT_CLASSIFICATION
todo is this a valid operation on a timestamps cache?	DESIGN	0.8211086489078337	DESIGN	0.17889135109216622	WITHOUT_CLASSIFICATION
todo why not use the timestamp in a dataversion?	DESIGN	0.9926115843802735	DESIGN	0.0073884156197264956	WITHOUT_CLASSIFICATION
can happen because of the multiple ways cache.remove() can be invoked (	DESIGN	0.9999092776888738	WITHOUT_CLASSIFICATION	9.072231112609796E-5	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea	DESIGN	0.995228336917835	WITHOUT_CLASSIFICATION	0.0047716630821650835	DESIGN
swaldman 2004-02-07 modify to allow null values to signify fall through to c3p0 poolconfig defaults	DESIGN	0.9996006185663543	WITHOUT_CLASSIFICATION	3.993814336457146E-4	DESIGN
turn hibernate.c3p0. into c3p0. so c3p0 gets a chance to see all hibernate.c3p0.	DESIGN	0.906113371458336	WITHOUT_CLASSIFICATION	0.093886628541664	DESIGN
todo this bit actually has to be called after all cascades! but since identity insert is called synchronously instead of asynchronously as other actions it isn't	DESIGN	0.9123635245358974	WITHOUT_CLASSIFICATION	0.08763647546410262	DESIGN
todo reenable if we also fix the above todo	DESIGN	0.9735854743410257	DESIGN	0.02641452565897418	WITHOUT_CLASSIFICATION
todo inefficient if that cache is just going to ignore the updated state!	DESIGN	0.9855853315874149	WITHOUT_CLASSIFICATION	0.014414668412585133	DESIGN
we may be screwed here since the collection action is about to execute and we do not know the final owner key value	DESIGN	0.9999235740859523	WITHOUT_CLASSIFICATION	7.642591404761838E-5	DESIGN
create an action that will evict collection and entity regions based on queryspaces (table names). todo cache the autodetected information and pass it in instead.	DESIGN	0.5717688251566363	WITHOUT_CLASSIFICATION	0.4282311748433637	DESIGN
todo what else to do here?	DESIGN	0.9835538849643207	DESIGN	0.01644611503567933	WITHOUT_CLASSIFICATION
todo modify the class definition if not already transformed	DESIGN	0.9072758291274163	DESIGN	0.09272417087258365	WITHOUT_CLASSIFICATION
todo what else to do here?	DESIGN	0.9835538849643207	DESIGN	0.01644611503567933	WITHOUT_CLASSIFICATION
this is called by sessionfactory irregardless we just disregard here could also add a check to sessionfactory to only conditionally call start	DESIGN	0.8793411511171461	WITHOUT_CLASSIFICATION	0.12065884888285398	DESIGN
this is called by sessionfactory irregardless we just disregard here could also add a check to sessionfactory to only conditionally call stop	DESIGN	0.9146530785426233	WITHOUT_CLASSIFICATION	0.08534692145737666	DESIGN
todo to handle concurrent writes correctly this should return a lock to the client	DESIGN	0.9961123524219111	DESIGN	0.0038876475780888235	WITHOUT_CLASSIFICATION
put() has nowait semantics is this really appropriate? note that it needs to be async replication never local or sync	DESIGN	0.9671607224269463	DESIGN	0.03283927757305369	WITHOUT_CLASSIFICATION
todo to handle concurrent writes correctly the client should pass in a lock	DESIGN	0.8566113141975632	DESIGN	0.14338868580243683	WITHOUT_CLASSIFICATION
todo assumes all collections disassemble to an array!	DESIGN	0.990794394044533	WITHOUT_CLASSIFICATION	0.009205605955467008	DESIGN
todo reuse the preloadevent	DESIGN	0.8474898944789364	WITHOUT_CLASSIFICATION	0.1525101055210636	DESIGN
todo this was added to support initializing an entity's entityentry snapshot during reattach this should be refactored to instead expose a method to assemble a entityentry based on this state for return.	DESIGN	0.9984505028109105	DESIGN	0.0015494971890895146	WITHOUT_CLASSIFICATION
todo what is the implication of this?	DESIGN	0.9916281057950388	DESIGN	0.008371894204961169	WITHOUT_CLASSIFICATION
use count as the default. this mimics the old behavior although none might be a better option moving forward in the case of callable	DESIGN	0.9683831777387919	WITHOUT_CLASSIFICATION	0.03161682226120808	DESIGN
todo joinkeycolumnname & foreignkeycolumnname should be called either here or at a slightly higer level in the stack (to get all the information we need) right now hbmbinder does not support the	DESIGN	0.9938029517098284	DESIGN	0.006197048290171626	WITHOUT_CLASSIFICATION
todo suck this into initlaziness!	DESIGN	0.94649900541851	DESIGN	0.053500994581490005	WITHOUT_CLASSIFICATION
we have to set up the table later!! yuck	DESIGN	0.9997118955235355	WITHOUT_CLASSIFICATION	2.881044764646109E-4	DESIGN
todo better to degrade to lazy="false" if uninstrumented	DESIGN	0.9078187518011329	DESIGN	0.09218124819886707	WITHOUT_CLASSIFICATION
todo again how should this work for non-pojo entities?	DESIGN	0.9945389994317686	DESIGN	0.005461000568231397	WITHOUT_CLASSIFICATION
todo this is a bit of copy/paste from indexedcollection.createprimarykey()	DESIGN	0.9846775739612995	DESIGN	0.015322426038700387	WITHOUT_CLASSIFICATION
this inner class implements a case statement.perhaps im being a bit over-clever here	DESIGN	0.6742525337014644	WITHOUT_CLASSIFICATION	0.3257474662985356	DESIGN
todo bad implementation cos it depends upon ordering of mapping doc fixing this requires that collection/persistentclass gain access to the mappings reference from configuration (or the filterdefinitions map directly) sometime during configuration.buildsessionfactory (after all the types/filter-defs are known and before building persisters).	DESIGN	0.7488930985667654	WITHOUT_CLASSIFICATION	0.25110690143323466	DESIGN
use of a stringbuffer to workaround a jdk bug	DESIGN	0.9860560783078619	DESIGN	0.01394392169213808	WITHOUT_CLASSIFICATION
hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9998333919527588	WITHOUT_CLASSIFICATION	1.6660804724122816E-4	DESIGN
fixme get the persistentclass	DESIGN	0.5269466355168684	WITHOUT_CLASSIFICATION	0.4730533644831315	DESIGN
fixme get the persistentclass	DESIGN	0.5269466355168684	WITHOUT_CLASSIFICATION	0.4730533644831315	DESIGN
icky workaround for mysql bug	DESIGN	0.9476127439893351	DESIGN	0.052387256010664816	WITHOUT_CLASSIFICATION
todo somehow add the newly created foreign keys to the internal collection	DESIGN	0.6088874584087703	WITHOUT_CLASSIFICATION	0.3911125415912297	DESIGN
todo possibly relax that	DESIGN	0.5597381753862458	WITHOUT_CLASSIFICATION	0.4402618246137543	DESIGN
todo possibly relax that	DESIGN	0.5597381753862458	WITHOUT_CLASSIFICATION	0.4402618246137543	DESIGN
todo possibly relax that	DESIGN	0.5597381753862458	WITHOUT_CLASSIFICATION	0.4402618246137543	DESIGN
use of a stringbuffer to workaround a jdk bug	DESIGN	0.9860560783078619	DESIGN	0.01394392169213808	WITHOUT_CLASSIFICATION
use a degenerated strategy for backward compatibility	DESIGN	0.9996797753432106	WITHOUT_CLASSIFICATION	3.202246567894121E-4	DESIGN
sets can be just a view of a part of another collection. do we need to copy it to be sure it won't be changing underneath us? ie. this.set.addall(set)	DESIGN	0.9778091417589797	WITHOUT_CLASSIFICATION	0.02219085824102028	DESIGN
note that i parameter is now unused (delete it?)	DESIGN	0.9827457672117585	DESIGN	0.017254232788241543	WITHOUT_CLASSIFICATION
just to help out during the load (ugly i know)	DESIGN	0.9988983430457092	WITHOUT_CLASSIFICATION	0.0011016569542906941	DESIGN
todo safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.8995280587800122	WITHOUT_CLASSIFICATION	0.1004719412199878	DESIGN
yick! need this for proper serialization/deserialization handling	DESIGN	0.9215002385535385	WITHOUT_CLASSIFICATION	0.07849976144646154	DESIGN
todo get sql rendering out of this package!	DESIGN	0.5860658149768219	DESIGN	0.4139341850231782	WITHOUT_CLASSIFICATION
todo get sql rendering out of this package!	DESIGN	0.5860658149768219	DESIGN	0.4139341850231782	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9997699770785218	WITHOUT_CLASSIFICATION	2.300229214783216E-4	DESIGN
todo get sql rendering out of this package!	DESIGN	0.5860658149768219	DESIGN	0.4139341850231782	WITHOUT_CLASSIFICATION
todo not sure this is correct could not find docs on how to do this.	DESIGN	0.9999876831931602	DESIGN	1.2316806839780844E-5	WITHOUT_CLASSIFICATION
hsql has no blob/clob support . but just put these here for now!	DESIGN	0.9999728055231004	WITHOUT_CLASSIFICATION	2.7194476899600123E-5	DESIGN
does this need holdlock also? return tablename + " with (updlock rowlock holdlock)"	DESIGN	0.9952478266207059	WITHOUT_CLASSIFICATION	0.004752173379294123	DESIGN
sql-server at least needed this dropped after use strange!	DESIGN	0.9992217219990004	WITHOUT_CLASSIFICATION	7.782780009996462E-4	DESIGN
todo is there really any reason to kkeep trying if this fails once?	DESIGN	0.6817799654918764	DESIGN	0.3182200345081237	WITHOUT_CLASSIFICATION
tbd should this be varbinary($1)? registercolumntype(types.varbinary "binary($1)")	DESIGN	0.817837403596721	DESIGN	0.18216259640327906	WITHOUT_CLASSIFICATION
is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9991183494274192	WITHOUT_CLASSIFICATION	8.816505725809249E-4	DESIGN
xmlforest requires a new kind of function constructor	DESIGN	0.9948426654242197	WITHOUT_CLASSIFICATION	0.0051573345757803275	DESIGN
does this dialect support the alter table syntax?	DESIGN	0.997906303516847	WITHOUT_CLASSIFICATION	0.002093696483153031	DESIGN
do we need to qualify index names with the schema name?	DESIGN	0.9997528726342273	WITHOUT_CLASSIFICATION	2.471273657727978E-4	DESIGN
does this dialect support the unique column syntax?	DESIGN	0.9920034890551439	WITHOUT_CLASSIFICATION	0.00799651094485607	DESIGN
does this dialect support check constraints?	DESIGN	0.9688369957375575	WITHOUT_CLASSIFICATION	0.031163004262442433	DESIGN
do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9921906733958571	WITHOUT_CLASSIFICATION	0.007809326604142936	DESIGN
does this dialect support the for update syntax?	DESIGN	0.9945408163880696	WITHOUT_CLASSIFICATION	0.005459183611930394	DESIGN
does this dialect support the oracle-style for update nowait syntax?	DESIGN	0.9945408163880696	WITHOUT_CLASSIFICATION	0.005459183611930394	DESIGN
does this dialect support for update of allowing particular rows to be locked?	DESIGN	0.9563345880484995	WITHOUT_CLASSIFICATION	0.04366541195150054	DESIGN
note there is a wierd implementation in the client side	DESIGN	0.9997508354793571	WITHOUT_CLASSIFICATION	2.491645206429585E-4	DESIGN
todo never reached since gettypename() actually throws an exception!	DESIGN	0.9925736967515548	WITHOUT_CLASSIFICATION	0.007426303248445244	DESIGN
todo should we additionally check the current isolation mode explicitly?	DESIGN	0.9296789701826902	DESIGN	0.07032102981730975	WITHOUT_CLASSIFICATION
todo remove this and just have subclasses use isolater/isolatedwork directly	DESIGN	0.9747759117850167	DESIGN	0.025224088214983308	WITHOUT_CLASSIFICATION
todo should orphans really be deleted during lock???	DESIGN	0.9219687584482006	DESIGN	0.07803124155179945	WITHOUT_CLASSIFICATION
orphans should not be deleted during merge??	DESIGN	0.9956712297424886	WITHOUT_CLASSIFICATION	0.004328770257511435	DESIGN
orphans should not be deleted during copy??	DESIGN	0.9956712297424886	WITHOUT_CLASSIFICATION	0.004328770257511435	DESIGN
i suppose?	DESIGN	0.9976991992601283	WITHOUT_CLASSIFICATION	0.0023008007398716704	DESIGN
todo suck this logic into the collection!	DESIGN	0.7642741714600955	DESIGN	0.23572582853990445	WITHOUT_CLASSIFICATION
todo an alternative is to check if the owner has changed if it hasn't then get the id from collection.getowner()	DESIGN	0.8961094913109809	WITHOUT_CLASSIFICATION	0.10389050868901899	DESIGN
todorefactor + make this method private	DESIGN	0.9732872084463935	WITHOUT_CLASSIFICATION	0.026712791553606494	DESIGN
todo we can actually just determine this from the incoming entityentry-s	DESIGN	0.8573317984119319	DESIGN	0.14266820158806817	WITHOUT_CLASSIFICATION
todo should this be an initializeentityeventlistener??? (watch out for performance!)	DESIGN	0.985212776818289	DESIGN	0.014787223181710904	WITHOUT_CLASSIFICATION
todo better to pass the id in as an argument?	DESIGN	0.8563393905239234	WITHOUT_CLASSIFICATION	0.1436606094760767	DESIGN
todo potentially look at optimizing these two arrays	DESIGN	0.735409844444884	DESIGN	0.26459015555511606	WITHOUT_CLASSIFICATION
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.9998736780666015	DESIGN	1.2632193339847102E-4	WITHOUT_CLASSIFICATION
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.9998736780666015	DESIGN	1.2632193339847102E-4	WITHOUT_CLASSIFICATION
todo temporary	DESIGN	0.9688812910385719	DESIGN	0.031118708961428047	WITHOUT_CLASSIFICATION
todo not quite sure about the full implications of this!	DESIGN	0.9436966448013835	DESIGN	0.05630335519861657	WITHOUT_CLASSIFICATION
todo not quite sure about the full implications of this!	DESIGN	0.9436966448013835	DESIGN	0.05630335519861657	WITHOUT_CLASSIFICATION
todo ugly here	DESIGN	0.9955172265111579	DESIGN	0.004482773488842018	WITHOUT_CLASSIFICATION
this is kinda the best we can do	DESIGN	0.9502247351841729	WITHOUT_CLASSIFICATION	0.049775264815826954	DESIGN
todo this needn't exclude subclasses	DESIGN	0.6050668198985495	WITHOUT_CLASSIFICATION	0.39493318010145056	DESIGN
todo need map? the prob is a proper key right?	DESIGN	0.9996251809554567	DESIGN	3.748190445432437E-4	WITHOUT_CLASSIFICATION
todo i'd much rather have this done from #endloadingcollection(collectionpersisterloadingcollectionentry)	DESIGN	0.9809957625170412	DESIGN	0.019004237482958673	WITHOUT_CLASSIFICATION
todo hack!!! note here we cleanup the load context when we have no more local lce entries. this "works" for the time being because really only the collection load contexts are implemented. long term this cleanup should become part of the "close result set" processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9999965817287632	DESIGN	3.4182712368759564E-6	WITHOUT_CLASSIFICATION
todo should really move this log statement to collectiontype where this is used from	DESIGN	0.9999991070869374	DESIGN	8.929130626813088E-7	WITHOUT_CLASSIFICATION
todo keep seperate notions of qt[] here for shallow/non-shallow queries	DESIGN	0.5590029979543741	DESIGN	0.4409970020456259	WITHOUT_CLASSIFICATION
todo add this info to the translator and aggregate it here	DESIGN	0.931143285407024	DESIGN	0.06885671459297611	WITHOUT_CLASSIFICATION
todo move into collection type so we can use polymorphism!	DESIGN	0.9990791644799007	DESIGN	9.208355200991898E-4	WITHOUT_CLASSIFICATION
todo should we check the current isolation mode explicitly?	DESIGN	0.9256343042350853	DESIGN	0.07436569576491472	WITHOUT_CLASSIFICATION
todo suck into event class	DESIGN	0.8508977897056583	DESIGN	0.1491022102943416	WITHOUT_CLASSIFICATION
do we even really need this? the update will fail anyway.	DESIGN	0.9483527318315216	WITHOUT_CLASSIFICATION	0.05164726816847845	DESIGN
hum should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9919658361696871	WITHOUT_CLASSIFICATION	0.008034163830312961	DESIGN
todo would it be better to do a refresh from db?	DESIGN	0.9921814484152193	DESIGN	0.007818551584780786	WITHOUT_CLASSIFICATION
todo we use two visitors here inefficient!	DESIGN	0.9119935630932102	DESIGN	0.08800643690678984	WITHOUT_CLASSIFICATION
this class has no proxies (so do a shortcut)	DESIGN	0.9926348558686936	WITHOUT_CLASSIFICATION	0.00736514413130639	DESIGN
postload is needed for ejb3 todo reuse the postloadevent	DESIGN	0.9603395033848783	WITHOUT_CLASSIFICATION	0.03966049661512172	DESIGN
todo put this stuff back in to read snapshot from the second-level cache (needs some extra work)	DESIGN	0.8598852179523997	DESIGN	0.14011478204760028	WITHOUT_CLASSIFICATION
null or brand new collection this will also (inefficiently) handle arrays which have no snapshot so we can't do any better	DESIGN	0.9885786251029399	WITHOUT_CLASSIFICATION	0.01142137489706004	DESIGN
todo is this 100% correct?	DESIGN	0.9982038155603951	DESIGN	0.001796184439604933	WITHOUT_CLASSIFICATION
todo iteratively get transient entities and retry merge until one of the following conditions 1) transientcopycache.size() == 0 2) transientcopycache.size() is not decreasing and copycache.size() is not increasing todo find out if retrying can add entities to copycache (don't think it can) for now just retry once throw transientobjectexception if there are still any transient entities	DESIGN	0.6129896874595316	WITHOUT_CLASSIFICATION	0.3870103125404683	DESIGN
entity name will not be available for non-pojo entities todo cache the entity name somewhere so that it is available to this exception	DESIGN	0.9984184778035495	DESIGN	0.0015815221964504713	WITHOUT_CLASSIFICATION
todo we should throw an exception if we really know for sure that this is a detached instance rather than just assuming throw new staleobjectstateexception(entityname id)	DESIGN	0.9924805488726548	DESIGN	0.00751945112734525	WITHOUT_CLASSIFICATION
todo perhaps we should additionally require that the incoming entity version be equivalent to the defined unsaved-value?	DESIGN	0.9997213026258064	DESIGN	2.7869737419359273E-4	WITHOUT_CLASSIFICATION
perhaps this should be an exception since it is only ever used in the above method?	DESIGN	0.9849172023517613	DESIGN	0.015082797648238703	WITHOUT_CLASSIFICATION
put a placeholder in entries so we don't recurse back and try to save() the same object again. question should this be done before onsave() is called? likewise should it be done before onupdate()?	DESIGN	0.9693197268882254	WITHOUT_CLASSIFICATION	0.030680273111774556	DESIGN
todo merge into one method!	DESIGN	0.9177837899265406	DESIGN	0.08221621007345936	WITHOUT_CLASSIFICATION
todo refactor to .sql package	DESIGN	0.9727335830465899	DESIGN	0.027266416953410186	WITHOUT_CLASSIFICATION
provides query splitting methods which were originally in querytranslator. <br> todo this will need to be refactored at some point. @author josh	DESIGN	0.9143276812440522	DESIGN	0.08567231875594787	WITHOUT_CLASSIFICATION
todo this is one of the ugliest and most fragile pieces of code in hibernate.	DESIGN	0.885942908996569	DESIGN	0.11405709100343102	WITHOUT_CLASSIFICATION
todo temporary needed because currently persister is the one that creates and renders the join fragments for inheritence hierarchies	DESIGN	0.6693973873426695	WITHOUT_CLASSIFICATION	0.33060261265733054	DESIGN
todo better way?!?	DESIGN	0.949764724103075	DESIGN	0.05023527589692495	WITHOUT_CLASSIFICATION
not possible to simply re-use the versionpropertynode here as it causes oom errors due to circularity (	DESIGN	0.9983717894116195	WITHOUT_CLASSIFICATION	0.0016282105883804322	DESIGN
todothis is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9997500608086758	WITHOUT_CLASSIFICATION	2.499391913242514E-4	DESIGN
todo this is a bit dodgy come up with a better way to check this (plus see above comment)	DESIGN	0.9999726932298629	DESIGN	2.7306770137063784E-5	WITHOUT_CLASSIFICATION
even here if only properties mapped to the "base table" are referenced in the set and where clauses this could be handled by the basicdelegate. todo decide if it is better performance-wise to perform that check or to simply use the multitableupdatedelegate	DESIGN	0.9999526726752599	DESIGN	4.7327324740058563E-5	WITHOUT_CLASSIFICATION
todo switch statements are always evil! we already had bugs because of forgotten token types. use polymorphism for this!	DESIGN	0.7095249911435614	DESIGN	0.29047500885643873	WITHOUT_CLASSIFICATION
todo we really need to be able to deal with component paths here also this is difficult because the hql-sql grammar expects all those node types to be fromreferencenodes. one potential fix here would be to convert the intoclause to just use a fromclause/fromelement combo (as a child of the insertstatement) and move all this logic into the insertstatement. that's probably the easiest approach (read least amount of changes to the grammar and code) but just doesn't feel right as then an insert would contain 2 from-clauses	DESIGN	0.9987370531170773	DESIGN	0.0012629468829227664	WITHOUT_CLASSIFICATION
really there are two situations where it should be ok to allow the insertion into properties defined on a superclass 1) union-subclass with an abstract root entity 2) discrim-subclass #1 is handled already because of the fact that unionsubclasspersister alreay always returns 0 for this call we may want to disallow it for discrim-subclass just for consistency-sake (currently does not work anyway)	DESIGN	0.8827562668154905	DESIGN	0.11724373318450947	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9997699770785218	WITHOUT_CLASSIFICATION	2.300229214783216E-4	DESIGN
implicit joins are always(?) ok to reuse	DESIGN	0.9999939217482813	WITHOUT_CLASSIFICATION	6.0782517187512186E-6	DESIGN
todo we may also want to check that the types here map to exactly one column/jdbc-type can't think of a situation where arithmetic expression between multi-column mappings makes any sense.	DESIGN	0.8873095240003052	DESIGN	0.11269047599969487	WITHOUT_CLASSIFICATION
we do not know either type blind guess!	DESIGN	0.994661142349835	WITHOUT_CLASSIFICATION	0.005338857650164933	DESIGN
todo used to be exprnoparens! was this needed?	DESIGN	0.9999998712793744	DESIGN	1.287206255566469E-7	WITHOUT_CLASSIFICATION
todo replace this with a more elegant solution.	DESIGN	0.9990327804738118	DESIGN	9.672195261881517E-4	WITHOUT_CLASSIFICATION
todo should this really return null? if not figure out something better to do here.	DESIGN	0.9999884251157135	DESIGN	1.1574884286508865E-5	WITHOUT_CLASSIFICATION
todo get sql rendering out of this package!	DESIGN	0.5860658149768219	DESIGN	0.4139341850231782	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9997699770785218	WITHOUT_CLASSIFICATION	2.300229214783216E-4	DESIGN
ignore it the incoming property could not be found so we cannot be sure what to do here. at the very least the safest is to simply not apply any dereference toggling	DESIGN	0.6217393600436874	DESIGN	0.37826063995631265	WITHOUT_CLASSIFICATION
todo most of below was taken verbatim from dotnode should either delegate this logic or super-type it	DESIGN	0.5824209113106138	WITHOUT_CLASSIFICATION	0.4175790886893862	DESIGN
otherwise a trim-specification and/or a trim-character have been specified we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character the trim-source	DESIGN	0.9981537987866205	WITHOUT_CLASSIFICATION	0.0018462012133794027	DESIGN
todo we should really just collect these from the various selectexpressions rather than regenerating here	DESIGN	0.997944944740054	DESIGN	0.0020550552599460288	WITHOUT_CLASSIFICATION
todo is this a bit ugly?	DESIGN	0.9942215447005109	DESIGN	0.005778455299489122	WITHOUT_CLASSIFICATION
need a better way to define the suffixes here	DESIGN	0.8067713214425145	WITHOUT_CLASSIFICATION	0.1932286785574854	DESIGN
todo something much better - look at the type of the other expression! todo have comparisonexpression and/or arithmeticexpression rules complete the resolution of boolean nodes.	DESIGN	0.9895360545465818	DESIGN	0.010463945453418288	WITHOUT_CLASSIFICATION
todo what amount of significant digits need to be supported here? - from the decimalformat docs [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9830030579312301	DESIGN	0.016996942068769918	WITHOUT_CLASSIFICATION
needed the "clazz_" check to work around union-subclasses todo is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9990956573203188	DESIGN	9.043426796811232E-4	WITHOUT_CLASSIFICATION
we should actually rework this class to not implement parser and just process path expressions in the most convenient way.	DESIGN	0.9615987836739883	DESIGN	0.03840121632601172	WITHOUT_CLASSIFICATION
the class is now way to complex!	DESIGN	0.9962358612791633	WITHOUT_CLASSIFICATION	0.0037641387208366883	DESIGN
todo get sql rendering out of here	DESIGN	0.6399423251097504	WITHOUT_CLASSIFICATION	0.3600576748902497	DESIGN
todo is there a better way?	DESIGN	0.9963533000973456	DESIGN	0.003646699902654386	WITHOUT_CLASSIFICATION
must be done here because of side-effect! yuck	DESIGN	0.9979394290914696	WITHOUT_CLASSIFICATION	0.002060570908530323	DESIGN
name from a super query (a bit inelegant that it shows up here)	DESIGN	0.9775340009702409	WITHOUT_CLASSIFICATION	0.022465999029759112	DESIGN
we should reengineer this class so that rather than the current ad - hoc linear approach to processing a stream of tokens we instead build up a tree of expressions.	DESIGN	0.6841363551695637	WITHOUT_CLASSIFICATION	0.31586364483043616	DESIGN
this is ugly here but needed because its a subquery	DESIGN	0.9111962419724811	WITHOUT_CLASSIFICATION	0.08880375802751889	DESIGN
unhappy about this being public is there a better way?	DESIGN	0.740402469718837	DESIGN	0.2595975302811629	WITHOUT_CLASSIFICATION
make sure this is a defined parameter and check the incoming value type todo what should be the actual exception type here?	DESIGN	0.9998882763182717	DESIGN	1.1172368172830591E-4	WITHOUT_CLASSIFICATION
todo this constructor form is only used from constructor directly below us can it go away?	DESIGN	0.9997181019605322	DESIGN	2.818980394678354E-4	WITHOUT_CLASSIFICATION
todo copy/paste from sessionimpl pull up!	DESIGN	0.6035308876970797	WITHOUT_CLASSIFICATION	0.3964691123029202	DESIGN
todo should remove this exposure and have all references to the session's batcher use the connectionmanager.	DESIGN	0.998251899392384	DESIGN	0.0017481006076160502	WITHOUT_CLASSIFICATION
todo should this get moved to persistentcontext? logically is persistentcontext the "thing" to which an interceptor gets attached?	DESIGN	0.9989832971566976	DESIGN	0.0010167028433023504	WITHOUT_CLASSIFICATION
todo what type?	DESIGN	0.9137400226182206	DESIGN	0.08625997738177937	WITHOUT_CLASSIFICATION
todo should seriously consider not allowing a txn to begin from a child session can always route the request to the root session	DESIGN	0.9496863577591638	DESIGN	0.05031364224083618	WITHOUT_CLASSIFICATION
short-circuit for performance	DESIGN	0.9983444595510741	WITHOUT_CLASSIFICATION	0.0016555404489259442	DESIGN
not absolutely necessary but does help with aggressive release	DESIGN	0.9765753122487533	WITHOUT_CLASSIFICATION	0.023424687751246683	DESIGN
todo remove these last two as batcher is no longer managing connections	DESIGN	0.9075633853834877	DESIGN	0.09243661461651237	WITHOUT_CLASSIFICATION
work around a bug in all known connection pools.	DESIGN	0.6384761009291041	WITHOUT_CLASSIFICATION	0.361523899070896	DESIGN
todo make this the factory for "entity mode related" sessions also means making this the target of transaction-synch and the thing that knows how to cascade things between related sessions at that point perhaps this thing is a "sessioncontext" and connectionmanager is a "jdbccontext"? a "sessioncontext" should live in the impl package	DESIGN	0.9999741481556977	DESIGN	2.585184430237311E-5	WITHOUT_CLASSIFICATION
todo does this really need to be here? does the collection already have it's own up-to-date snapshot?	DESIGN	0.9999321416535216	DESIGN	6.7858346478324E-5	WITHOUT_CLASSIFICATION
todo the i==entityspan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9904879550942883	DESIGN	0.009512044905711647	WITHOUT_CLASSIFICATION
this form used from annotations (?). essentially the same as the above using a resultset-mapping reference but without cachemode readonly and comment. fixme annotations do not use it so it can be remove from my pov @deprecated @param query the sql query string @param resultsetref the result-set-mapping name @param queryspaces any specified query spaces (used for auto-flushing) @param cacheable whether the query results are cacheable @param cacheregion if cacheable the region into which to store the results @param timeout a jdbc-level timeout to be applied @param fetchsize a jdbc-level fetch-size to be applied @param flushmode the flush mode to use for this query @param parametertypes parameter type map @param callable does the query string represent a callable object (i.e. proc)	DESIGN	0.9999404853652518	DESIGN	5.951463474811145E-5	WITHOUT_CLASSIFICATION
todo add the notion of enabled filters to the cachekey to differentiate filtered collections from non-filtered but cachekey is currently used for both collections and entities would ideally need to define two seperate ones currently this works in conjuction with the check on defaultinitializecollectioneventhandler.initializecollectionfromcache() (which makes sure to not read from cache with enabled filters). early exit!!!!!	DESIGN	0.9998485890627794	DESIGN	1.5141093722057124E-4	WITHOUT_CLASSIFICATION
for sets we should end the collection load after resolving the entities since we might call hashcode() on the elements todo or we could do this polymorphically and have two different operations implemented differently for arrays	DESIGN	0.998573749508214	DESIGN	0.001426250491786031	WITHOUT_CLASSIFICATION
this is not very nice (and quite slow)	DESIGN	0.9958102386843326	DESIGN	0.0041897613156673735	WITHOUT_CLASSIFICATION
use of trim() here is ugly?	DESIGN	0.9963416456168441	WITHOUT_CLASSIFICATION	0.0036583543831557935	DESIGN
todo this is too conservative if all preceding joins were also inner joins we could use an inner join here	DESIGN	0.9683282784546491	DESIGN	0.03167172154535089	WITHOUT_CLASSIFICATION
todo look at the owning property and check that it isn't lazy (by instrumentation)	DESIGN	0.8001044350103551	DESIGN	0.19989556498964492	WITHOUT_CLASSIFICATION
todo inefficient	DESIGN	0.5393700185744656	DESIGN	0.46062998142553435	WITHOUT_CLASSIFICATION
why does this matter?	DESIGN	0.9045975400389977	WITHOUT_CLASSIFICATION	0.09540245996100237	DESIGN
from the collection of associations locate oja for the manytoone corresponding to this persister to fully define the many-to-many we need that oja so that we can use its alias here todo is there a better way here?	DESIGN	0.9999352910980874	DESIGN	6.470890191262289E-5	WITHOUT_CLASSIFICATION
todo this class depends directly upon criteriaimpl in the impl package add a criteriaimplementor interface	DESIGN	0.9937453106433444	DESIGN	0.006254689356655645	WITHOUT_CLASSIFICATION
todo add a criteriaimplementor interface this class depends directly upon criteriaimpl in the impl package	DESIGN	0.9937453106433444	DESIGN	0.006254689356655645	WITHOUT_CLASSIFICATION
todo not so sure this is needed	DESIGN	0.7598580786511453	DESIGN	0.24014192134885465	WITHOUT_CLASSIFICATION
meant to handle dynamic instantiation queries(copy from queryloader)	DESIGN	0.9991363185565859	WITHOUT_CLASSIFICATION	8.636814434140455E-4	DESIGN
todo the order in which entities are saved may matter (e.g. a particular transient entity may need to be saved before other transient entities can be saved keep retrying the batch of transient entities until either 1) there are no transient entities left in transientcopycache or 2) no transient entities were saved in the last batch for now just run through the transient entities and retry the merge	DESIGN	0.7480533400447241	WITHOUT_CLASSIFICATION	0.2519466599552759	DESIGN
todo this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9999996766484364	DESIGN	3.2335156369485363E-7	WITHOUT_CLASSIFICATION
todo currently expects that the individual with expressions apply to the same sql table join. this may not be the case for joined-subclass where the property values might be coming from different tables in the joined hierarchy. at some point we should expand this to support that capability. however that has some difficulties 1) the biggest is how to handle ors when the individual comparisons are linked to different sql joins. 2) here we would need to track each comparison individually along with the join alias to which it applies and then pass that information back to the fromelement so it can pass it along to the joinsequence	DESIGN	0.7742171959003029	DESIGN	0.22578280409969698	WITHOUT_CLASSIFICATION
this function has a template -> restore output apply the template and write the result out todo downcast to avoid using an interface? yuck.	DESIGN	0.9802148855280218	WITHOUT_CLASSIFICATION	0.019785114471978265	DESIGN
at some point the generate phase needs to be moved out of here because a single object-level dml might spawn multiple sql dml command executions. possible to just move the sql generation for dml stuff but for consistency-sake probably best to just move responsiblity for the generation phase completely into the delegates (queryloader/statementexecutor) themselves. also not sure why queryloader currently even has a dependency on this at all does it need it? ideally like to see the walker itself given to the delegates directly	DESIGN	0.9999999563642347	DESIGN	4.3635765302572486E-8	WITHOUT_CLASSIFICATION
get the right object from the list would it be easier to just call getentity() ??	DESIGN	0.9913091897202153	WITHOUT_CLASSIFICATION	0.008690810279784652	DESIGN
todo should we just collect these like with the collections above?	DESIGN	0.9950066807449938	DESIGN	0.00499331925500626	WITHOUT_CLASSIFICATION
todo better to handle dynamic filters through implicit dynamicfilterparameterspecification see the discussion there in dynamicfilterparameterspecification's javadocs as to why it is currently not done that way.	DESIGN	0.9988807295050678	DESIGN	0.0011192704949322045	WITHOUT_CLASSIFICATION
/ used only for regression testing!!!! todo obviously get rid of all this junk ) /	DESIGN	0.9981047832592559	DESIGN	0.0018952167407441107	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9999870111497101	WITHOUT_CLASSIFICATION	1.2988850289864699E-5	DESIGN
todo deprecated remove eventually	DESIGN	0.9846778295660752	DESIGN	0.015322170433924734	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9999870111497101	WITHOUT_CLASSIFICATION	1.2988850289864699E-5	DESIGN
todo improve this hack!	DESIGN	0.9987070265472077	DESIGN	0.0012929734527924053	WITHOUT_CLASSIFICATION
inheritance cycle detection (paranoid check)	DESIGN	0.9994492374858429	WITHOUT_CLASSIFICATION	5.507625141571307E-4	DESIGN
todo remove use of instanceof!	DESIGN	0.9788619737341268	DESIGN	0.021138026265873338	WITHOUT_CLASSIFICATION
shortcut	DESIGN	0.9998677073363192	WITHOUT_CLASSIFICATION	1.3229266368083232E-4	DESIGN
todo handle the case of a foreign key to something other than the pk	DESIGN	0.8243691004719825	DESIGN	0.17563089952801747	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9999870111497101	WITHOUT_CLASSIFICATION	1.2988850289864699E-5	DESIGN
todo remove	DESIGN	0.8636082434057453	DESIGN	0.13639175659425465	WITHOUT_CLASSIFICATION
todo remove	DESIGN	0.8636082434057453	DESIGN	0.13639175659425465	WITHOUT_CLASSIFICATION
todo remove	DESIGN	0.8636082434057453	DESIGN	0.13639175659425465	WITHOUT_CLASSIFICATION
todo throw exception?	DESIGN	0.6556026320720035	DESIGN	0.3443973679279965	WITHOUT_CLASSIFICATION
todo throw exception? maybe warn if not the same?	DESIGN	0.9353035720833363	DESIGN	0.0646964279166639	WITHOUT_CLASSIFICATION
todo make entitypersister not depend on sessionfactoryimplementor interface if possible	DESIGN	0.989975908834343	DESIGN	0.010024091165656949	WITHOUT_CLASSIFICATION
todo is there a more elegant way than downcasting?	DESIGN	0.9808374555344586	DESIGN	0.019162544465541435	WITHOUT_CLASSIFICATION
todo encapsulate the protected instance variables!	DESIGN	0.7363295505680826	WITHOUT_CLASSIFICATION	0.2636704494319173	DESIGN
should indicate that we are processing an insert/update/delete query with a subquery implied via a collection property function. here we need to use the table name itself as the qualification alias. todo verify this works for all databases todo is this also the case in non-"indexed" scenarios?	DESIGN	0.9852591667156043	DESIGN	0.014740833284395632	WITHOUT_CLASSIFICATION
todo copy/paste from insertrows()	DESIGN	0.6062311241064153	WITHOUT_CLASSIFICATION	0.39376887589358467	DESIGN
todo copy/paste from recreate()	DESIGN	0.6062311241064153	WITHOUT_CLASSIFICATION	0.39376887589358467	DESIGN
should this interface extend propertymapping?	DESIGN	0.8681440447678614	WITHOUT_CLASSIFICATION	0.13185595523213847	DESIGN
ie. the subquery! yuck!	DESIGN	0.9994937368411425	WITHOUT_CLASSIFICATION	5.062631588575204E-4	DESIGN
todo move to .sql package!!	DESIGN	0.9864320905024441	DESIGN	0.013567909497556013	WITHOUT_CLASSIFICATION
todo code duplication with singletableentitypersister	DESIGN	0.7029008155165993	DESIGN	0.29709918448340067	WITHOUT_CLASSIFICATION
todo it would be really really nice to use this to also model components!	DESIGN	0.9999400288214564	DESIGN	5.99711785436342E-5	WITHOUT_CLASSIFICATION
todo two hashmap lookups here is one too many	DESIGN	0.7779719675894275	DESIGN	0.2220280324105724	WITHOUT_CLASSIFICATION
todo code duplication with joinedsubclassentitypersister	DESIGN	0.7029008155165993	DESIGN	0.29709918448340067	WITHOUT_CLASSIFICATION
perhaps not really necessary	DESIGN	0.96444502418881	DESIGN	0.035554975811190034	WITHOUT_CLASSIFICATION
note this assumes something about how propertyselectfragment is implemented by the subclass! was tounqotedaliasstrings( getidentifercolumnnames() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.9196806973923043	WITHOUT_CLASSIFICATION	0.08031930260769567	DESIGN
note this assumes something about how propertyselectfragment is implemented by the subclass! was tounqotedaliasstrings( getdiscriminatorcolumnname() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.9196806973923043	WITHOUT_CLASSIFICATION	0.08031930260769567	DESIGN
todo should we use select .. for update?	DESIGN	0.9685691199075098	DESIGN	0.03143088009249024	WITHOUT_CLASSIFICATION
todo optimize this better!	DESIGN	0.7883807333476538	DESIGN	0.21161926665234626	WITHOUT_CLASSIFICATION
todo should we allow suffixes on these ?	DESIGN	0.9939867252229576	DESIGN	0.006013274777042369	WITHOUT_CLASSIFICATION
this is really ugly but necessary	DESIGN	0.9275643693449661	DESIGN	0.07243563065503388	WITHOUT_CLASSIFICATION
ugly little workaround for fact that createuniquekeyloaders() does not handle component properties	DESIGN	0.9999937454346588	DESIGN	6.2545653411801094E-6	WITHOUT_CLASSIFICATION
todo disable batch loading if lockmode > read?	DESIGN	0.9937334408271024	WITHOUT_CLASSIFICATION	0.006266559172897666	DESIGN
append the sql to return the generated identifier todo suck into insert	DESIGN	0.5342055692361195	WITHOUT_CLASSIFICATION	0.46579443076388055	DESIGN
todo i am not so sure about the exception handling in this bit!	DESIGN	0.9964351698385943	DESIGN	0.0035648301614056624	WITHOUT_CLASSIFICATION
todo is this really necessary????	DESIGN	0.9755916781730269	DESIGN	0.02440832182697303	WITHOUT_CLASSIFICATION
todo move to .sql package and refactor with similar things!	DESIGN	0.9979469979473129	DESIGN	0.0020530020526869958	WITHOUT_CLASSIFICATION
todo implement functionality this might be painful to do here as the "join post processing" for the subquery has already been performed (meaning that for theta-join dialects the join conditions have already been moved over to the where clause). a "simple" solution here might to perform "join post processing" once for the entire query (including any subqueries) at one fell swoop	DESIGN	0.9986973988444263	DESIGN	0.0013026011555736607	WITHOUT_CLASSIFICATION
todo this eventually needs to be removed	DESIGN	0.9866737727152968	DESIGN	0.013326227284703234	WITHOUT_CLASSIFICATION
kinda ugly but needed for collections with a "." node mapping	DESIGN	0.9989271726674479	WITHOUT_CLASSIFICATION	0.0010728273325521106	DESIGN
is this ok?	DESIGN	0.9975775286464923	WITHOUT_CLASSIFICATION	0.002422471353507618	DESIGN
todo perhaps this should be some other runtimeexception	DESIGN	0.9999808217994998	DESIGN	1.917820050021474E-5	WITHOUT_CLASSIFICATION
todo make this a bit nicer	DESIGN	0.9894850433890696	DESIGN	0.01051495661093028	WITHOUT_CLASSIFICATION
yuck	DESIGN	0.9992216198030917	WITHOUT_CLASSIFICATION	7.783801969082983E-4	DESIGN
todo we should provide some way to get keys of collection of statistics to make it easier to retrieve from a gui perspective	DESIGN	0.9999889456130323	DESIGN	1.1054386967642623E-5	WITHOUT_CLASSIFICATION
@return collection removal fixme even if isinverse="true"?	DESIGN	0.9583880994342365	DESIGN	0.04161190056576343	WITHOUT_CLASSIFICATION
todo will need reference to session factory to fully complete hhh-1907	DESIGN	0.9635262259685238	DESIGN	0.03647377403147616	WITHOUT_CLASSIFICATION
todo currently keeps getters and setters (instead of propertyaccessors) because of the way getgetter() and getsetter() are implemented currently yuck!	DESIGN	0.936150368663606	DESIGN	0.06384963133639399	WITHOUT_CLASSIFICATION
todo redesign how propertyaccessors are acquired	DESIGN	0.8994940461956256	DESIGN	0.10050595380437442	WITHOUT_CLASSIFICATION
todo yuck!!!	DESIGN	0.6120472250257635	WITHOUT_CLASSIFICATION	0.3879527749742366	DESIGN
todo yuck!!! fix after hhh-1907 is complete	DESIGN	0.9891419733329914	DESIGN	0.01085802666700857	WITHOUT_CLASSIFICATION
todo need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9737368303936087	DESIGN	0.026263169606391315	WITHOUT_CLASSIFICATION
todo design new lifecycle for proxyfactory	DESIGN	0.7236302602731707	WITHOUT_CLASSIFICATION	0.27636973972682916	DESIGN
todo would be nice to handle proxy classes elegantly!	DESIGN	0.9432430150897978	DESIGN	0.05675698491020219	WITHOUT_CLASSIFICATION
todo copy/paste from manytoonetype	DESIGN	0.6062311241064153	WITHOUT_CLASSIFICATION	0.39376887589358467	DESIGN
todo should this be session.instantiate(persister )?	DESIGN	0.9911309557521153	DESIGN	0.008869044247884707	WITHOUT_CLASSIFICATION
todo this is a bit arbitrary expose a switch to the user?	DESIGN	0.906602621702193	DESIGN	0.09339737829780699	WITHOUT_CLASSIFICATION
todo implement caching?! proxies?!	DESIGN	0.9228775292052196	DESIGN	0.07712247079478046	WITHOUT_CLASSIFICATION
todo is this right??	DESIGN	0.8250183515219867	DESIGN	0.17498164847801334	WITHOUT_CLASSIFICATION
is this really necessary?	DESIGN	0.7773223158463626	WITHOUT_CLASSIFICATION	0.22267768415363742	DESIGN
todo move these to a new joinabletype abstract class extended by entitytype and persistentcollectiontype	DESIGN	0.9903751827929042	DESIGN	0.009624817207095729	WITHOUT_CLASSIFICATION
todo this is very suboptimal for some subclasses (namely components) since it does not take advantage of two-phase-load	DESIGN	0.965405992459298	DESIGN	0.03459400754070208	WITHOUT_CLASSIFICATION
worrying about proxies is perhaps a little bit of overkill here	DESIGN	0.9953103559425813	DESIGN	0.004689644057418636	WITHOUT_CLASSIFICATION
note very hackish workaround!! todo fix this so it will work for non-pojo entity mode	DESIGN	0.999999243731585	DESIGN	7.562684151450514E-7	WITHOUT_CLASSIFICATION
todo fix this so it will work for non-pojo entity mode	DESIGN	0.9995112097378629	DESIGN	4.887902621370864E-4	WITHOUT_CLASSIFICATION
we would probably refactor to have logicparser (builds a tree of simple expressions connected by and or not) expressionparser (translates from oo terms like foo foo.bar foo.bar.baz to sql terms like foos.id foos.bar_id etc) and pathexpressionparser (which does much the same thing it does now)	DESIGN	0.9986532725462923	WITHOUT_CLASSIFICATION	0.0013467274537077281	DESIGN
todo this is a little inefficient don't need to do a whole deep replaceelements() call	DESIGN	0.9998369078893538	DESIGN	1.6309211064620852E-4	WITHOUT_CLASSIFICATION
workaround for weblogic	DESIGN	0.9518638164654997	DESIGN	0.04813618353450025	WITHOUT_CLASSIFICATION
todo this dependency is kinda bad	DESIGN	0.9880826902001673	DESIGN	0.011917309799832637	WITHOUT_CLASSIFICATION
ick!	DESIGN	0.9997699770785218	WITHOUT_CLASSIFICATION	2.300229214783216E-4	DESIGN
short cut check	DESIGN	0.9987160161747984	WITHOUT_CLASSIFICATION	0.0012839838252015523	DESIGN
todo move to stringhelper?	DESIGN	0.9864320905024441	DESIGN	0.013567909497556013	WITHOUT_CLASSIFICATION
yukky! don't you have subclasses for that! todo race conditions can happen here	DESIGN	0.9623181401592429	DESIGN	0.037681859840757066	WITHOUT_CLASSIFICATION
todo we probably should have a statisticsnotpublishedexception to make it clean	DESIGN	0.9997778671112927	DESIGN	2.221328887073014E-4	WITHOUT_CLASSIFICATION
fixme hack to work around fact that calling node added = root.addchild( fqn ) doesn't properly set the version on the node	DESIGN	0.9999999717435278	DESIGN	2.825647224910226E-8	WITHOUT_CLASSIFICATION
todo i considered validating the presence of the ts cache here but decided to defer unti getquerycacheinstance() in case the cache is never actually used	DESIGN	0.9999028023552308	DESIGN	9.719764476930373E-5	WITHOUT_CLASSIFICATION
need to do that here rather than in the save event listener to let the post insert events to have a id-filled entity when identity is used (ejb3)	DESIGN	0.7766805438413741	DESIGN	0.22331945615862586	WITHOUT_CLASSIFICATION
todo simply remove this override if we fix the above todos	DESIGN	0.9980473571948676	DESIGN	0.0019526428051323665	WITHOUT_CLASSIFICATION
this is used by sessionfactoryimpl to hand to the generated sessionimpl was the only reason i could see that we cannot just use null as settings.cacheprovider	DESIGN	0.5069041195685985	WITHOUT_CLASSIFICATION	0.49309588043140146	DESIGN
this is done here 'cos we might only know the type here (ugly!) todo improve this a lot	DESIGN	0.9973707791093785	DESIGN	0.0026292208906214787	WITHOUT_CLASSIFICATION
todo would love to have this work on a notification basis where the successful binding of an entity/subclass would emit a notification which the extendsqueue entries could react to	DESIGN	0.9859646045184817	DESIGN	0.01403539548151836	WITHOUT_CLASSIFICATION
todo not sure the best way to handle this. the non-performant way	DESIGN	0.9900614171704661	DESIGN	0.00993858282953386	WITHOUT_CLASSIFICATION
would be better to use the element-type to determine whether the old and the new are equal here the problem being we do not necessarily have access to the element type in all cases	DESIGN	0.7335510162329698	WITHOUT_CLASSIFICATION	0.2664489837670302	DESIGN
this next bit is to allow for both unsaved-value="negative" and for "older" behavior where version number did not get seeded if it was already set in the object todo shift it into unsaved-value strategy	DESIGN	0.9999622351754188	DESIGN	3.776482458116902E-5	WITHOUT_CLASSIFICATION
merges don't cascade to uninitialized collections todo perhaps this does need to cascade after all.	DESIGN	0.9879521825690949	DESIGN	0.012047817430905083	WITHOUT_CLASSIFICATION
todo an alternative is to check if the owner has changed if it hasn't then return collection.getowner()	DESIGN	0.9158433313681649	WITHOUT_CLASSIFICATION	0.08415666863183517	DESIGN
it is possible that the tree-walking in outerjoinloader can get to an association defined by a subclass in which case the property-ref might refer to a property defined on a subclass of the current class in this case the table name is not known - this temporary solution assumes that the property-ref refers to a property of the subclass table that the association belongs to (a reasonable guess) todo fix this add outerjoinloadable.getsubclasspropertytablename(string propertyname)	DESIGN	0.9999994901252545	DESIGN	5.098747454556125E-7	WITHOUT_CLASSIFICATION
this only works because collection entries are kept in a sequenced map by persistence context (maybe we should do like entities and keep a separate sequences set) todo calling entryset on an identitymap is slow!!	DESIGN	0.9987758050398003	DESIGN	0.0012241949601996553	WITHOUT_CLASSIFICATION
important to account for newly saved entities in query todo some kind of check for new status	DESIGN	0.996557999707378	DESIGN	0.0034420002926219785	WITHOUT_CLASSIFICATION
brand new collection todo or an array!! we can't lock objects with arrays now??	DESIGN	0.7155304504982863	WITHOUT_CLASSIFICATION	0.28446954950171355	DESIGN
todo if object was an uninitialized proxy this is inefficient resulting in two sql selects	DESIGN	0.8318640454566063	WITHOUT_CLASSIFICATION	0.1681359545433936	DESIGN
before cascade! todo should this be session.instantiate(persister )?	DESIGN	0.9804014289261029	DESIGN	0.019598571073897012	WITHOUT_CLASSIFICATION
todo absolutely no usages of this constructor form can it go away?	DESIGN	0.9246506464907873	DESIGN	0.07534935350921279	WITHOUT_CLASSIFICATION
todo need to find a clean way to handle the "event source" role a seperate classs responsible for generating/dispatching events just duplicates most of the session methods passing around seperate reto interceptor factory actionqueue and persistentcontext is not manageable	DESIGN	0.9999997793883939	DESIGN	2.2061160594992338E-7	WITHOUT_CLASSIFICATION
todo remove	DESIGN	0.8636082434057453	DESIGN	0.13639175659425465	WITHOUT_CLASSIFICATION
aliasrefnode.resolve( false false aliasrefnode.gettext() ) todo is it kosher to do it here? todo is it kosher to do it here?	DESIGN	0.946634842963936	DESIGN	0.05336515703606406	WITHOUT_CLASSIFICATION
no explicit select expression render the id and properties projection lists for every persister in the from clause into a single 'token node'. todo the only reason we need this stuff now is collection filters we should get rid of derived select clause completely!	DESIGN	0.992197827059992	DESIGN	0.007802172940007919	WITHOUT_CLASSIFICATION
todo an optimization here would be to consider cascade deletes and not gen those delete statements the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> the table info gotten here should really be self-contained (i.e. a class representation defining all the needed attributes) then we could then get an array of those	DESIGN	0.9990669656575918	DESIGN	9.330343424081286E-4	WITHOUT_CLASSIFICATION
todo get sql rendering out of here create an ast for the join expressions. use the sql generator grammar to generate the sql text for the index expression.	DESIGN	0.9981475269818942	WITHOUT_CLASSIFICATION	0.0018524730181057065	DESIGN
todo this really needs to be delayed unitl after we definitively know all node types where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DESIGN	0.878744636581125	DESIGN	0.12125536341887494	WITHOUT_CLASSIFICATION
todo figure out a better way to get the from elements in a proper tree structure. if this is not the destination of a many-to-many add it as a child of the origin.	DESIGN	0.9960182547783285	DESIGN	0.003981745221671544	WITHOUT_CLASSIFICATION
work around that crazy issue where the tree contains "empty" fromelements (no text) afaict this is caused by fromelementfactory.createcollectionjoin()	DESIGN	0.9424111480913567	WITHOUT_CLASSIFICATION	0.05758885190864335	DESIGN
todo this class does too many things! we need a different kind of path expression parser for each of the diffferent ways in which path expressions can occur	DESIGN	0.9989494194732614	DESIGN	0.001050580526738551	WITHOUT_CLASSIFICATION
real hacky used to count the nesting of parentheses	DESIGN	0.967932852675635	WITHOUT_CLASSIFICATION	0.03206714732436501	DESIGN
todo would be really nice to cache the spec on the query-def so as to not have to re-calc the hash currently not doable though because of the resultset-ref stuff	DESIGN	0.513305020885564	DESIGN	0.486694979114436	WITHOUT_CLASSIFICATION
for arrays we should end the collection load before resolving the entities since the actual array instances are not instantiated during loading todo or we could do this polymorphically and have two different operations implemented differently for arrays	DESIGN	0.9696111725584164	DESIGN	0.030388827441583558	WITHOUT_CLASSIFICATION
polymorphism not really handled completely correctly perhapswell actually its ok assuming that the entity name used in the lookup is the same as the the one used here which it will be	DESIGN	0.9877648716890838	WITHOUT_CLASSIFICATION	0.012235128310916197	DESIGN
todo should "record" how many properties we have reffered to - and if we don't get'em'all we throw an exception! way better than trial and error )	DESIGN	0.9999907035401017	DESIGN	9.296459898283041E-6	WITHOUT_CLASSIFICATION
very important!!!! - this class needs to be free of any static references to any cglib or javassist classes. otherwise users will always need both on their classpaths no matter which (if either) they use. another option here would be to remove the hibernate.ispropertyinitialized() method and have the users go through the sessionfactory to get this information.	DESIGN	0.9497995528963564	WITHOUT_CLASSIFICATION	0.05020044710364352	DESIGN
todo is it really neceassry to provide configuration to collectionpersisters ? should it not be enough with associated class ? or why does entitypersister's not get access to configuration ? the only reason i could see that configuration gets passed to collection persisters is so that they can look up the dom4j node name of the entity element in case no explicit node name was applied at the collection element level. are you kidding me? trivial to fix then. just store and expose the node name on the entity persister (which the collection persister looks up anyway via other means).	DESIGN	0.9999999893827124	DESIGN	1.0617287561815617E-8	WITHOUT_CLASSIFICATION
for backward compatibility allow a set with no not-null element columns using all columns in the row locater sql todo create an implicit not null constraint on all cols?	DESIGN	0.9141381199533473	WITHOUT_CLASSIFICATION	0.08586188004665277	DESIGN
spaces todo i'm not sure but perhaps we should exclude abstract denormalized tables?	DESIGN	0.9997621983397009	DESIGN	2.378016602990251E-4	WITHOUT_CLASSIFICATION
workaround for backward compatibility of sets with no not-null columns assume all columns are used in the row locator sql	DESIGN	0.8795995002143089	DESIGN	0.12040049978569116	WITHOUT_CLASSIFICATION
note that this method could easily be moved up to basicentitypersister if we ever needed to reuse it from other subclasses	DESIGN	0.9280572789227765	WITHOUT_CLASSIFICATION	0.07194272107722359	DESIGN
index += getpropertycolumnspan( i ) todo this is kinda slow	DESIGN	0.9562764690413093	DESIGN	0.04372353095869075	WITHOUT_CLASSIFICATION
todo need some caching scheme? really comes down to decision regarding amount of state (if any) kept on propertyaccessors	DESIGN	0.588856485519817	DESIGN	0.41114351448018316	WITHOUT_CLASSIFICATION
todo here is why we need to make bytecode provider global ( todo again fix this after hhh-1907 is complete	DESIGN	0.9999622926193789	DESIGN	3.770738062105578E-5	WITHOUT_CLASSIFICATION
todo yuck! this is not quite good enough it's a quick hack around the problem of having a to-one association that refers to an embedded component	DESIGN	0.9999999999333097	DESIGN	6.669030238696792E-11	WITHOUT_CLASSIFICATION
for dom4j "collections" only todo it would be better if this was done at the higher level by printer	DESIGN	0.969322067903809	DESIGN	0.030677932096190866	WITHOUT_CLASSIFICATION
would be great to move all this below here into another method that could also be used from the new scrolling stuff. would need to change the way the max-row stuff is handled (i.e. behind an interface) so that i could do the control breaking at the means to know when to stop	DESIGN	0.9999999964810058	DESIGN	3.5189941521860205E-9	WITHOUT_CLASSIFICATION
todo can we always use the "null property" approach for everything?	DESIGN	0.9732067011860437	DESIGN	0.02679329881395638	WITHOUT_CLASSIFICATION
polymorphism comment above	DESIGN	0.9999492747421082	WITHOUT_CLASSIFICATION	5.072525789183168E-5	DESIGN
some messy complex stuff here since createcriteria() can take an aliased path or a path rooted at the creating criteria instance	DESIGN	0.9999997593632475	WITHOUT_CLASSIFICATION	2.4063675254884504E-7	DESIGN
todo really bad evil hack to fix!!!	DESIGN	0.9999999662358016	DESIGN	3.3764198304620974E-8	WITHOUT_CLASSIFICATION
ugly hack for cases like "elements(foo.bar.collection)" (multi-part path expression ending in elements or indices)	DESIGN	0.9946659971667381	DESIGN	0.005334002833261825	WITHOUT_CLASSIFICATION
try block is a hack around fact that currently tuplizers are not given the opportunity to resolve a subclass entity name. this allows the (we assume custom) interceptor the ability to influence this decision if we were not able to based on the given entityname	DESIGN	0.9999964108727261	DESIGN	3.5891272739711455E-6	WITHOUT_CLASSIFICATION
/ hack alert !!!!!!!!!!!!!!!!!!!!!!!!!!!! attempt to work around "ghost" impliedfromelements that occasionally show up between the actual things being joined. this consistently occurs from index nodes (at least against many-to-many). not sure if there are other conditions essentially look-ahead to the next fromelement that actually writes something to the sql	DESIGN	0.5409953734732187	WITHOUT_CLASSIFICATION	0.4590046265267814	DESIGN
init the table here instead of earlier so that we can get a quoted table name todo would it be better to simply pass the qualified table name instead of splitting it up into schema/catalog/table names	DESIGN	0.94321597276332	DESIGN	0.05678402723668009	WITHOUT_CLASSIFICATION
todo would be great to have a mapping#hasnonidentifierpropertynamedid method i don't believe that mapping#getreferencedpropertytype accounts for the identifier property so if it returns for a property named 'id' then we should have a non-id field named id	DESIGN	0.9990169181952159	DESIGN	9.830818047841642E-4	WITHOUT_CLASSIFICATION
todo is this really necessary????	DESIGN	0.9755916781730269	DESIGN	0.02440832182697303	WITHOUT_CLASSIFICATION
todo ideally we need the construction of propertyaccessor to take the following 1) entitymode 2) entitymode-specific data (i.e. the classname for pojo entities) 3) property-specific data based on the entitymode (i.e. property-name or dom4j-node-name) the easiest way with the introduction of the new runtime-metamodel classes would be the the following predicates 1) propertyaccessorfactory.getpropertyaccessor() takes references to both a org.hibernate.metadata.entitymodemetadata and org.hibernate.metadata.property 2) what is now termed a "propertyaccessor" stores any values needed from those two pieces of information 3) code can then simply call propertyaccess.getgetter() with no parameters likewise with propertyaccessor.getsetter()	DESIGN	0.6823443605266939	DESIGN	0.31765563947330605	WITHOUT_CLASSIFICATION
todo this is temporary in that the end result will probably not take a property reference per-se.	DESIGN	0.9996402402546698	DESIGN	3.5975974533024676E-4	WITHOUT_CLASSIFICATION
todo this eventually needs to be removed	DESIGN	0.9866737727152968	DESIGN	0.013326227284703234	WITHOUT_CLASSIFICATION
todo make this a bit nicer	DESIGN	0.9894850433890696	DESIGN	0.01051495661093028	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9992742293182576	DESIGN	7.257706817424455E-4	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9992742293182576	DESIGN	7.257706817424455E-4	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9992742293182576	DESIGN	7.257706817424455E-4	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9992742293182576	DESIGN	7.257706817424455E-4	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9992742293182576	DESIGN	7.257706817424455E-4	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9992742293182576	DESIGN	7.257706817424455E-4	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9992742293182576	DESIGN	7.257706817424455E-4	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9992742293182576	DESIGN	7.257706817424455E-4	WITHOUT_CLASSIFICATION
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9999856173975994	DESIGN	1.4382602400611118E-5	WITHOUT_CLASSIFICATION
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9999856173975994	DESIGN	1.4382602400611118E-5	WITHOUT_CLASSIFICATION
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9999856173975994	DESIGN	1.4382602400611118E-5	WITHOUT_CLASSIFICATION
todo probably better to calculate these and pass them in as it'll be more performant	DESIGN	0.9975577968949693	DESIGN	0.002442203105030719	WITHOUT_CLASSIFICATION
