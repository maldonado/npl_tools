test out the optimizer	WITHOUT_CLASSIFICATION	0.9999987640173434	WITHOUT_CLASSIFICATION	1.235982656521063E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999696978083693	WITHOUT_CLASSIFICATION	3.0302191630657925E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999696978083693	WITHOUT_CLASSIFICATION	3.0302191630657925E-5	DESIGN
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.998613162595832	WITHOUT_CLASSIFICATION	0.0013868374041679904	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999663033302874	WITHOUT_CLASSIFICATION	3.369666971269921E-5	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999969677168171	WITHOUT_CLASSIFICATION	3.0322831829762588E-6	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999969677168171	WITHOUT_CLASSIFICATION	3.0322831829762588E-6	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9996572665635465	WITHOUT_CLASSIFICATION	3.4273343645343916E-4	DESIGN
invokeinterface invoke enabled.getinterceptfieldcallback()	WITHOUT_CLASSIFICATION	0.9995915967090323	WITHOUT_CLASSIFICATION	4.084032909676288E-4	DESIGN
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9997198197550305	WITHOUT_CLASSIFICATION	2.801802449693827E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999593736622304	WITHOUT_CLASSIFICATION	4.0626337769590794E-5	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999884446012633	WITHOUT_CLASSIFICATION	1.155539873664822E-5	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999884446012633	WITHOUT_CLASSIFICATION	1.155539873664822E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.9999302987116978	WITHOUT_CLASSIFICATION	6.970128830222875E-5	DESIGN
just decrement the lock don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9998465890546844	WITHOUT_CLASSIFICATION	1.5341094531561304E-4	DESIGN
decode row selection	WITHOUT_CLASSIFICATION	0.9999638144694176	WITHOUT_CLASSIFICATION	3.6185530582266314E-5	DESIGN
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9981769781326155	WITHOUT_CLASSIFICATION	0.0018230218673845411	DESIGN
again ccs did not have such a concept but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not jta aware.	WITHOUT_CLASSIFICATION	0.9999624435963402	WITHOUT_CLASSIFICATION	3.755640365984975E-5	DESIGN
check	WITHOUT_CLASSIFICATION	0.9999706625587673	WITHOUT_CLASSIFICATION	2.9337441232696898E-5	DESIGN
row id	WITHOUT_CLASSIFICATION	0.9999429515163486	WITHOUT_CLASSIFICATION	5.704848365130615E-5	DESIGN
composite-id	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
discriminator	WITHOUT_CLASSIFICATION	0.9999672261672361	WITHOUT_CLASSIFICATION	3.2773832763990036E-5	DESIGN
property prop = new property() prop.setname("id") prop.setpropertyaccessorname("embedded") prop.setvalue(id) entity.setidentifierproperty(prop)	WITHOUT_CLASSIFICATION	0.9999731285095732	WITHOUT_CLASSIFICATION	2.687149042688932E-5	DESIGN
dynamic insert	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
persister	WITHOUT_CLASSIFICATION	0.9999087764243557	WITHOUT_CLASSIFICATION	9.122357564427067E-5	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999959680339207	WITHOUT_CLASSIFICATION	4.031966079308681E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9998313088695376	WITHOUT_CLASSIFICATION	1.6869113046233064E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9998313088695376	WITHOUT_CLASSIFICATION	1.6869113046233064E-4	DESIGN
generated properties can never be insertable	WITHOUT_CLASSIFICATION	0.9991077916434321	WITHOUT_CLASSIFICATION	8.922083565678908E-4	DESIGN
table	WITHOUT_CLASSIFICATION	0.9999793001513554	WITHOUT_CLASSIFICATION	2.0699848644577794E-5	DESIGN
by default natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9984957471194069	WITHOUT_CLASSIFICATION	0.0015042528805930446	DESIGN
( (column) ( (simplevalue) ic.getindex() ).getcolumniterator().next() ).setnullable(false)	WITHOUT_CLASSIFICATION	0.9996063429564355	WITHOUT_CLASSIFICATION	3.936570435645544E-4	DESIGN
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9965315505056624	WITHOUT_CLASSIFICATION	0.0034684494943376253	DESIGN
build a resultsetmappingdefinition given a containing element for the "return-xxx" elements @param resultsetelem the element containing the return definitions. @param path no clue @param mappings the current processing state. @return the description of the mappings	WITHOUT_CLASSIFICATION	0.9983217044704862	WITHOUT_CLASSIFICATION	0.0016782955295138134	DESIGN
private boolean showsql private boolean formatsql	WITHOUT_CLASSIFICATION	0.9998671095420886	WITHOUT_CLASSIFICATION	1.3289045791141266E-4	DESIGN
public boolean isshowsqlenabled() { return showsql } public boolean isformatsqlenabled() { return formatsql }	WITHOUT_CLASSIFICATION	0.9999207964054572	WITHOUT_CLASSIFICATION	7.920359454283106E-5	DESIGN
set a custom entity resolver. this entity resolver must be set before addxxx(misc) call. default value is {@link org.hibernate.util.dtdentityresolver} @param entityresolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9616290618885177	WITHOUT_CLASSIFICATION	0.038370938111482365	DESIGN
final list extendsqueue	WITHOUT_CLASSIFICATION	0.9999380265081332	WITHOUT_CLASSIFICATION	6.197349186675366E-5	DESIGN
if close() is called guarantee unbind()	WITHOUT_CLASSIFICATION	0.9997044024144478	WITHOUT_CLASSIFICATION	2.9559758555221385E-4	DESIGN
if a threadlocalsessioncontext-bound session happens to get serialized to be completely correct we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9814697796138881	WITHOUT_CLASSIFICATION	0.018530220386111813	DESIGN
on the inverse it makes sense that if a threadlocalsessioncontext- bound session then gets deserialized to go ahead and re-bind it to the threadlocalsessioncontext session map.	WITHOUT_CLASSIFICATION	0.9951499406367303	WITHOUT_CLASSIFICATION	0.0048500593632696265	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999588399476885	WITHOUT_CLASSIFICATION	4.116005231144454E-5	DESIGN
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999579407813644	WITHOUT_CLASSIFICATION	4.205921863565982E-5	DESIGN
optimisticcache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
option.setdataversion( nonlockingdataversion.instance )	WITHOUT_CLASSIFICATION	0.9993677354379846	WITHOUT_CLASSIFICATION	6.322645620153196E-4	DESIGN
do the put outside the scope of the jta txn	WITHOUT_CLASSIFICATION	0.9994649548493315	WITHOUT_CLASSIFICATION	5.350451506684888E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (npes)	WITHOUT_CLASSIFICATION	0.9995924317499741	WITHOUT_CLASSIFICATION	4.0756825002577306E-4	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
do the failfast put outside the scope of the jta txn	WITHOUT_CLASSIFICATION	0.9994649548493315	WITHOUT_CLASSIFICATION	5.350451506684888E-4	DESIGN
note evict() operates locally only (i.e. does not propogate to any other nodes in the potential cluster). this is exactly what is needed when we destroy() here destroy() is used as part of the process of shutting down a sessionfactory thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.734740825475993	WITHOUT_CLASSIFICATION	0.26525917452400716	DESIGN
protected regionrootlistener listener	WITHOUT_CLASSIFICATION	0.9988578548394389	WITHOUT_CLASSIFICATION	0.0011421451605611568	DESIGN
establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9994997078676445	WITHOUT_CLASSIFICATION	5.002921323554843E-4	DESIGN
if we've been blocking for the mutex perhaps another thread has already reestablished the root. in case the node was reestablised via replication confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999752041556095	WITHOUT_CLASSIFICATION	2.479584439061091E-5	DESIGN
for pessimistic locking we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.999144487205495	WITHOUT_CLASSIFICATION	8.555127945050127E-4	DESIGN
the rest only matters for optimistic locking where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.984143624551213	WITHOUT_CLASSIFICATION	0.015856375448787177	DESIGN
don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9388786893674181	WITHOUT_CLASSIFICATION	0.06112131063258188	DESIGN
make sure the root node for the region exists and has a dataversion that never complains	WITHOUT_CLASSIFICATION	0.9991088802608746	WITHOUT_CLASSIFICATION	8.911197391253069E-4	DESIGN
never evict this node	WITHOUT_CLASSIFICATION	0.9999348206844388	WITHOUT_CLASSIFICATION	6.517931556115102E-5	DESIGN
fix up the resident flag	WITHOUT_CLASSIFICATION	0.9998676798816319	WITHOUT_CLASSIFICATION	1.3232011836809555E-4	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
we ignore minimalputoverride. jbosscache putforexternalread is already about as minimal as we can get it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9993731355975306	WITHOUT_CLASSIFICATION	6.268644024695353E-4	DESIGN
no-op. we don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9986962563103133	WITHOUT_CLASSIFICATION	0.0013037436896867274	DESIGN
this should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9991749690873659	WITHOUT_CLASSIFICATION	8.250309126340092E-4	DESIGN
we only build caches if none were passed in. passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9873705421276522	WITHOUT_CLASSIFICATION	0.012629457872347835	DESIGN
set up the cache factory	WITHOUT_CLASSIFICATION	0.9999358174124703	WITHOUT_CLASSIFICATION	6.418258752969943E-5	DESIGN
see if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9998973768092864	WITHOUT_CLASSIFICATION	1.0262319071361077E-4	DESIGN
default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.999590345054505	WITHOUT_CLASSIFICATION	4.0965494549510893E-4	DESIGN
default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.999848957582057	WITHOUT_CLASSIFICATION	1.5104241794294416E-4	DESIGN
for timestamps we default to a separate config	WITHOUT_CLASSIFICATION	0.9824649188797879	WITHOUT_CLASSIFICATION	0.017535081120212022	DESIGN
we can't change the tm on a running cache just check if the cache has no tm and we're ok with that	WITHOUT_CLASSIFICATION	0.9995707310875284	WITHOUT_CLASSIFICATION	4.292689124715788E-4	DESIGN
configure the cache to use our tm	WITHOUT_CLASSIFICATION	0.9994903126020915	WITHOUT_CLASSIFICATION	5.096873979083948E-4	DESIGN
make sure jbc doesn't look one up	WITHOUT_CLASSIFICATION	0.9998398459920769	WITHOUT_CLASSIFICATION	1.6015400792315817E-4	DESIGN
this method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.8384506485661246	WITHOUT_CLASSIFICATION	0.1615493514338754	DESIGN
make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9966560485625583	WITHOUT_CLASSIFICATION	0.0033439514374417312	DESIGN
we use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9987539164258205	WITHOUT_CLASSIFICATION	0.0012460835741795566	DESIGN
following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9967357536758523	WITHOUT_CLASSIFICATION	0.0032642463241477886	DESIGN
if jbc is using invalidation we don't want to propagate changes. we use the timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9961594984431422	WITHOUT_CLASSIFICATION	0.003840501556857657	DESIGN
we don't want to waste effort setting an option if jbc is already in local mode. if jbc is repl_(a)sync then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9454555460236562	WITHOUT_CLASSIFICATION	0.05454445397634368	DESIGN
don't hold the jbc node lock throughout the tx as that prevents updates add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9997155063719372	WITHOUT_CLASSIFICATION	2.8449362806287257E-4	DESIGN
double check the distributed cache	WITHOUT_CLASSIFICATION	0.99998533572411	WITHOUT_CLASSIFICATION	1.466427588989929E-5	DESIGN
get an exclusive right to update jbc for this key from this node.	WITHOUT_CLASSIFICATION	0.9931956193866212	WITHOUT_CLASSIFICATION	0.006804380613378789	DESIGN
we ensure async semantics (jbcache-1175)	WITHOUT_CLASSIFICATION	0.9969441562847239	WITHOUT_CLASSIFICATION	0.0030558437152759907	DESIGN
initial load from jbc	WITHOUT_CLASSIFICATION	0.9999572910792225	WITHOUT_CLASSIFICATION	4.2708920777491056E-5	DESIGN
see if we had a 2nd invalidation from the same initial preinvalidation timestamp. if so only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.999853170636555	WITHOUT_CLASSIFICATION	1.4682936344499043E-4	DESIGN
we ensure async semantics (jbcache-1175)	WITHOUT_CLASSIFICATION	0.9969441562847239	WITHOUT_CLASSIFICATION	0.0030558437152759907	DESIGN
if the workspace node has null as well ok if not we've been modified in a non-comparable manner which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999728506855827	WITHOUT_CLASSIFICATION	2.714931441725612E-5	DESIGN
the standard comparator types are not serializable but are singletons	WITHOUT_CLASSIFICATION	0.9998411137933277	WITHOUT_CLASSIFICATION	1.588862066723244E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9999370949212393	WITHOUT_CLASSIFICATION	6.29050787607799E-5	DESIGN
construct the cache	WITHOUT_CLASSIFICATION	0.9999885008440541	WITHOUT_CLASSIFICATION	1.149915594579618E-5	DESIGN
local cache so we use synchronization	WITHOUT_CLASSIFICATION	0.9959245772122601	WITHOUT_CLASSIFICATION	0.0040754227877399345	DESIGN
local cache so we use synchronization	WITHOUT_CLASSIFICATION	0.9959245772122601	WITHOUT_CLASSIFICATION	0.0040754227877399345	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
swaldman 2006-08-28 define c3p0-style configuration parameters for initialpoolsize which hibernate sensibly lets default to minpoolsize but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.999542035540444	WITHOUT_CLASSIFICATION	4.57964459555968E-4	DESIGN
datasource unpooled = datasources.unpooleddatasource(jdbcurl props.getproperty(environment.user) props.getproperty(environment.pass))	WITHOUT_CLASSIFICATION	0.9999477159006084	WITHOUT_CLASSIFICATION	5.228409939150192E-5	DESIGN
true if the pool is borrowed from the outside false if we used to create it	WITHOUT_CLASSIFICATION	0.9809899185329946	WITHOUT_CLASSIFICATION	0.019010081467005478	DESIGN
get a connection from the pool (thru drivermanager cfr. proxool doc)	WITHOUT_CLASSIFICATION	0.9997568986173186	WITHOUT_CLASSIFICATION	2.4310138268132848E-4	DESIGN
set the transaction isolation if defined	WITHOUT_CLASSIFICATION	0.9999084635175174	WITHOUT_CLASSIFICATION	9.15364824825647E-5	DESIGN
toggle autocommit to false if set	WITHOUT_CLASSIFICATION	0.9978416900322515	WITHOUT_CLASSIFICATION	0.002158309967748428	DESIGN
return the connection	WITHOUT_CLASSIFICATION	0.9999956575623891	WITHOUT_CLASSIFICATION	4.342437610897284E-6	DESIGN
get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999549135471913	WITHOUT_CLASSIFICATION	4.508645280870616E-5	DESIGN
default the proxool alias setting	WITHOUT_CLASSIFICATION	0.9998880097994491	WITHOUT_CLASSIFICATION	1.119902005508243E-4	DESIGN
validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9886315353037828	WITHOUT_CLASSIFICATION	0.011368464696217176	DESIGN
validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9886315353037828	WITHOUT_CLASSIFICATION	0.011368464696217176	DESIGN
append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9995262308406143	WITHOUT_CLASSIFICATION	4.7376915938566447E-4	DESIGN
set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9997617034075936	WITHOUT_CLASSIFICATION	2.3829659240638025E-4	DESIGN
configured using the jaxp configurator	WITHOUT_CLASSIFICATION	0.9999058591516472	WITHOUT_CLASSIFICATION	9.414084835279062E-5	DESIGN
validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9886315353037828	WITHOUT_CLASSIFICATION	0.011368464696217176	DESIGN
append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9995262308406143	WITHOUT_CLASSIFICATION	4.7376915938566447E-4	DESIGN
append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9995262308406143	WITHOUT_CLASSIFICATION	4.7376915938566447E-4	DESIGN
configured using the properties file configurator	WITHOUT_CLASSIFICATION	0.9997651121640536	WITHOUT_CLASSIFICATION	2.3488783594649185E-4	DESIGN
remember isolation level	WITHOUT_CLASSIFICATION	0.9999621288951002	WITHOUT_CLASSIFICATION	3.7871104899809776E-5	DESIGN
if the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999855280523376	WITHOUT_CLASSIFICATION	1.4471947662257328E-5	DESIGN
we have created the pool ourselves so shut it down	WITHOUT_CLASSIFICATION	0.9999571191646295	WITHOUT_CLASSIFICATION	4.288083537050833E-5	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.999675585686972	WITHOUT_CLASSIFICATION	3.2441431302791796E-4	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.999675585686972	WITHOUT_CLASSIFICATION	3.2441431302791796E-4	DESIGN
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9997149169535662	WITHOUT_CLASSIFICATION	2.850830464338558E-4	DESIGN
public currency getcurrency(int col) throws hibernateexception	WITHOUT_CLASSIFICATION	0.9996393271497608	WITHOUT_CLASSIFICATION	3.6067285023927084E-4	DESIGN
default is pojo	WITHOUT_CLASSIFICATION	0.9999530497915604	WITHOUT_CLASSIFICATION	4.6950208439586185E-5	DESIGN
use setparameter for null values	WITHOUT_CLASSIFICATION	0.9996706641367801	WITHOUT_CLASSIFICATION	3.293358632198459E-4	DESIGN
use setparameter for null values	WITHOUT_CLASSIFICATION	0.9996706641367801	WITHOUT_CLASSIFICATION	3.293358632198459E-4	DESIGN
private cacheentry cacheentry	WITHOUT_CLASSIFICATION	0.999961883450218	WITHOUT_CLASSIFICATION	3.811654978198989E-5	DESIGN
don't need to lock the cache here since if someone else inserted the same pk first the insert would fail	WITHOUT_CLASSIFICATION	0.9993994891709284	WITHOUT_CLASSIFICATION	6.005108290717008E-4	DESIGN
make 100% certain that this is called before any subsequent scheduledupdate.aftertransactioncompletion()!!	WITHOUT_CLASSIFICATION	0.9946080415120105	WITHOUT_CLASSIFICATION	0.005391958487989439	DESIGN
get the updated snapshot of the entity state by cloning current state it is safe to copy in place since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999326427899937	WITHOUT_CLASSIFICATION	6.73572100062644E-5	DESIGN
this entity defines proeprty generation so process those generated values	WITHOUT_CLASSIFICATION	0.9998830272840926	WITHOUT_CLASSIFICATION	1.1697271590745803E-4	DESIGN
have the entity entry perform post-update processing passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999741061890547	WITHOUT_CLASSIFICATION	2.58938109454136E-5	DESIGN
!persister.iscacheinvalidationrequired()	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9993034665577053	WITHOUT_CLASSIFICATION	6.96533442294765E-4	DESIGN
sort first by role name	WITHOUT_CLASSIFICATION	0.9996515546356681	WITHOUT_CLASSIFICATION	3.48445364331837E-4	DESIGN
make 100% certain that this is called before any subsequent scheduledupdate.aftertransactioncompletion()!!	WITHOUT_CLASSIFICATION	0.9946080415120105	WITHOUT_CLASSIFICATION	0.005391958487989439	DESIGN
then by fk	WITHOUT_CLASSIFICATION	0.9998790539766607	WITHOUT_CLASSIFICATION	1.2094602333929772E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999919583008653	WITHOUT_CLASSIFICATION	8.041699134791978E-6	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999919583008653	WITHOUT_CLASSIFICATION	8.041699134791978E-6	DESIGN
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9319681940738103	WITHOUT_CLASSIFICATION	0.06803180592618971	DESIGN
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9678729235484012	WITHOUT_CLASSIFICATION	0.03212707645159891	DESIGN
boolean put = persister.getcache().insert(ck cacheentry)	WITHOUT_CLASSIFICATION	0.9999878425098856	WITHOUT_CLASSIFICATION	1.215749011443024E-5	DESIGN
we need to grab the version value from the entity otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9488564729298796	WITHOUT_CLASSIFICATION	0.05114352707012049	DESIGN
do nothing - we only need to notify the cache	WITHOUT_CLASSIFICATION	0.9995253538762495	WITHOUT_CLASSIFICATION	4.7464612375044E-4	DESIGN
sort first by entity name	WITHOUT_CLASSIFICATION	0.9998098885908497	WITHOUT_CLASSIFICATION	1.9011140915014171E-4	DESIGN
then by id	WITHOUT_CLASSIFICATION	0.9998524453187446	WITHOUT_CLASSIFICATION	1.4755468125542617E-4	DESIGN
to be safe	WITHOUT_CLASSIFICATION	0.9998914361446165	WITHOUT_CLASSIFICATION	1.0856385538351657E-4	DESIGN
no transformations took place so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9973013051239388	WITHOUT_CLASSIFICATION	0.002698694876061229	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999543018441892	WITHOUT_CLASSIFICATION	4.569815581076974E-5	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999543018441892	WITHOUT_CLASSIFICATION	4.569815581076974E-5	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999383277826038	WITHOUT_CLASSIFICATION	6.167221739618467E-5	DESIGN
test out the optimizer	WITHOUT_CLASSIFICATION	0.9999987640173434	WITHOUT_CLASSIFICATION	1.235982656521063E-6	DESIGN
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999054141792835	WITHOUT_CLASSIFICATION	9.458582071648573E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
invokespecial	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999696978083693	WITHOUT_CLASSIFICATION	3.0302191630657925E-5	DESIGN
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999744328096944	WITHOUT_CLASSIFICATION	2.5567190305565263E-5	DESIGN
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999672258176261	WITHOUT_CLASSIFICATION	3.277418237380786E-5	DESIGN
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999690929435028	WITHOUT_CLASSIFICATION	3.0907056497229855E-5	DESIGN
aload_2 args	WITHOUT_CLASSIFICATION	0.9999601926195554	WITHOUT_CLASSIFICATION	3.9807380444630274E-5	DESIGN
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9986903775309646	WITHOUT_CLASSIFICATION	0.001309622469035386	DESIGN
new	WITHOUT_CLASSIFICATION	0.9999461399053716	WITHOUT_CLASSIFICATION	5.386009462837155E-5	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999893082005954	WITHOUT_CLASSIFICATION	1.0691799404600321E-5	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
aastore args	WITHOUT_CLASSIFICATION	0.9999601926195554	WITHOUT_CLASSIFICATION	3.9807380444630274E-5	DESIGN
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9984109565116727	WITHOUT_CLASSIFICATION	0.0015890434883273224	DESIGN
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9998003113462942	WITHOUT_CLASSIFICATION	1.9968865370572684E-4	DESIGN
istore_3 store i	WITHOUT_CLASSIFICATION	0.9998773522692546	WITHOUT_CLASSIFICATION	1.226477307454127E-4	DESIGN
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999893082005954	WITHOUT_CLASSIFICATION	1.0691799404600321E-5	DESIGN
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9983944295135382	WITHOUT_CLASSIFICATION	0.0016055704864617888	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999969677168171	WITHOUT_CLASSIFICATION	3.0322831829762588E-6	DESIGN
start region to handling exception (bulkaccessorexception)	WITHOUT_CLASSIFICATION	0.9996079124761152	WITHOUT_CLASSIFICATION	3.9208752388477345E-4	DESIGN
iinc 3 1	WITHOUT_CLASSIFICATION	0.9998387503723328	WITHOUT_CLASSIFICATION	1.612496276671607E-4	DESIGN
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999721251493967	WITHOUT_CLASSIFICATION	2.7874850603346193E-5	DESIGN
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999870177937986	WITHOUT_CLASSIFICATION	1.2982206201409778E-5	DESIGN
iconst_i	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
aaload	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9996295063915757	WITHOUT_CLASSIFICATION	3.7049360842431034E-4	DESIGN
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9998544475014864	WITHOUT_CLASSIFICATION	1.4555249851366892E-4	DESIGN
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999948461191283	WITHOUT_CLASSIFICATION	5.1538808717855075E-6	DESIGN
end region to handling exception (bulkaccessorexception)	WITHOUT_CLASSIFICATION	0.999676387914449	WITHOUT_CLASSIFICATION	3.2361208555088954E-4	DESIGN
register in exception table	WITHOUT_CLASSIFICATION	0.9999923582884187	WITHOUT_CLASSIFICATION	7.641711581265598E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999696978083693	WITHOUT_CLASSIFICATION	3.0302191630657925E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999696978083693	WITHOUT_CLASSIFICATION	3.0302191630657925E-5	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9996572665635465	WITHOUT_CLASSIFICATION	3.4273343645343916E-4	DESIGN
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999917205538561	WITHOUT_CLASSIFICATION	8.279446143933934E-6	DESIGN
new bulkaccessorexception	WITHOUT_CLASSIFICATION	0.9999592785439861	WITHOUT_CLASSIFICATION	4.072145601380121E-5	DESIGN
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999931510350191	WITHOUT_CLASSIFICATION	6.848964980876543E-6	DESIGN
iload_3 i	WITHOUT_CLASSIFICATION	0.9997779999150413	WITHOUT_CLASSIFICATION	2.2200008495871913E-4	DESIGN
invokespecial bulkaccessorexception.<init>	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
athrow	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
warning classfile only	WITHOUT_CLASSIFICATION	0.9999267185654436	WITHOUT_CLASSIFICATION	7.32814345563582E-5	DESIGN
swallow	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
local variable | this |	WITHOUT_CLASSIFICATION	0.9992116484055414	WITHOUT_CLASSIFICATION	7.883515944586167E-4	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9998741449047901	WITHOUT_CLASSIFICATION	1.2585509520984467E-4	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9998741449047901	WITHOUT_CLASSIFICATION	1.2585509520984467E-4	DESIGN
getfield get field "$javassist_callback" defined already	WITHOUT_CLASSIFICATION	0.9998134045197626	WITHOUT_CLASSIFICATION	1.8659548023741628E-4	DESIGN
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9998423523743031	WITHOUT_CLASSIFICATION	1.5764762569699806E-4	DESIGN
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.979019530633146	WITHOUT_CLASSIFICATION	0.020980469366853993	DESIGN
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999670120052759	WITHOUT_CLASSIFICATION	3.298799472410876E-5	DESIGN
putfield put field "$javassist_callback" defined already	WITHOUT_CLASSIFICATION	0.9996921667294487	WITHOUT_CLASSIFICATION	3.078332705512197E-4	DESIGN
case of non-static field	WITHOUT_CLASSIFICATION	0.9999795294651438	WITHOUT_CLASSIFICATION	2.0470534856195736E-5	DESIGN
getfield get each field	WITHOUT_CLASSIFICATION	0.9999786064171865	WITHOUT_CLASSIFICATION	2.1393582813458542E-5	DESIGN
invokeinterface invoke enabled.getinterceptfieldcallback()	WITHOUT_CLASSIFICATION	0.9995915967090323	WITHOUT_CLASSIFICATION	4.084032909676288E-4	DESIGN
ifnonnull	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9999677449756877	WITHOUT_CLASSIFICATION	3.22550243122143E-5	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9999677449756877	WITHOUT_CLASSIFICATION	3.22550243122143E-5	DESIGN
store_1 each type	WITHOUT_CLASSIFICATION	0.9999404466543204	WITHOUT_CLASSIFICATION	5.955334567976317E-5	DESIGN
ldc name of the field	WITHOUT_CLASSIFICATION	0.9998994389923782	WITHOUT_CLASSIFICATION	1.0056100762181354E-4	DESIGN
load_1 each type	WITHOUT_CLASSIFICATION	0.9999404466543204	WITHOUT_CLASSIFICATION	5.955334567976317E-5	DESIGN
invokeinterface invoke callback.read() each type	WITHOUT_CLASSIFICATION	0.9992583580909749	WITHOUT_CLASSIFICATION	7.41641909025214E-4	DESIGN
int	WITHOUT_CLASSIFICATION	0.9999522490919854	WITHOUT_CLASSIFICATION	4.7750908014438557E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999696978083693	WITHOUT_CLASSIFICATION	3.0302191630657925E-5	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
invokeinterface enabled.getinterceptfieldcallback()	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
invokeinterface enabled.getinterceptfieldcallback()	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
putfield	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999696978083693	WITHOUT_CLASSIFICATION	3.0302191630657925E-5	DESIGN
ldc field name	WITHOUT_CLASSIFICATION	0.9997378424928043	WITHOUT_CLASSIFICATION	2.621575071956642E-4	DESIGN
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9997665712668625	WITHOUT_CLASSIFICATION	2.3342873313746942E-4	DESIGN
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999593736622304	WITHOUT_CLASSIFICATION	4.0626337769590794E-5	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999593736622304	WITHOUT_CLASSIFICATION	4.0626337769590794E-5	DESIGN
not array	WITHOUT_CLASSIFICATION	0.999974105443353	WITHOUT_CLASSIFICATION	2.5894556646944037E-5	DESIGN
array of reference type	WITHOUT_CLASSIFICATION	0.9999588326089837	WITHOUT_CLASSIFICATION	4.1167391016313235E-5	DESIGN
boolean	WITHOUT_CLASSIFICATION	0.9999802482118181	WITHOUT_CLASSIFICATION	1.9751788181953814E-5	DESIGN
byte	WITHOUT_CLASSIFICATION	0.9999409704296829	WITHOUT_CLASSIFICATION	5.9029570317202623E-5	DESIGN
char	WITHOUT_CLASSIFICATION	0.9999447038712721	WITHOUT_CLASSIFICATION	5.529612872797133E-5	DESIGN
short	WITHOUT_CLASSIFICATION	0.9999462836303391	WITHOUT_CLASSIFICATION	5.3716369660821815E-5	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999884446012633	WITHOUT_CLASSIFICATION	1.155539873664822E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999441678136837	WITHOUT_CLASSIFICATION	5.5832186316334604E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999441678136837	WITHOUT_CLASSIFICATION	5.5832186316334604E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.9999302987116978	WITHOUT_CLASSIFICATION	6.970128830222875E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.9999302987116978	WITHOUT_CLASSIFICATION	6.970128830222875E-5	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9997806446246627	WITHOUT_CLASSIFICATION	2.1935537533737684E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9997806446246627	WITHOUT_CLASSIFICATION	2.1935537533737684E-4	DESIGN
boolean byte char int short	WITHOUT_CLASSIFICATION	0.9999872392881753	WITHOUT_CLASSIFICATION	1.276071182461137E-5	DESIGN
boolean byte char int short	WITHOUT_CLASSIFICATION	0.9999872392881753	WITHOUT_CLASSIFICATION	1.276071182461137E-5	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999593736622304	WITHOUT_CLASSIFICATION	4.0626337769590794E-5	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999884446012633	WITHOUT_CLASSIFICATION	1.155539873664822E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999441678136837	WITHOUT_CLASSIFICATION	5.5832186316334604E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999441678136837	WITHOUT_CLASSIFICATION	5.5832186316334604E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.9999302987116978	WITHOUT_CLASSIFICATION	6.970128830222875E-5	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9997806446246627	WITHOUT_CLASSIFICATION	2.1935537533737684E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9997806446246627	WITHOUT_CLASSIFICATION	2.1935537533737684E-4	DESIGN
boolean byte char int short	WITHOUT_CLASSIFICATION	0.9999872392881753	WITHOUT_CLASSIFICATION	1.276071182461137E-5	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999631382779999	WITHOUT_CLASSIFICATION	3.68617220001962E-5	DESIGN
mainly for oscache	WITHOUT_CLASSIFICATION	0.999939995675289	WITHOUT_CLASSIFICATION	6.000432471104392E-5	DESIGN
decrement the lock	WITHOUT_CLASSIFICATION	0.9999846350707946	WITHOUT_CLASSIFICATION	1.5364929205474264E-5	DESIGN
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9998191104005635	WITHOUT_CLASSIFICATION	1.8088959943645465E-4	DESIGN
recache the updated state	WITHOUT_CLASSIFICATION	0.999993841505264	WITHOUT_CLASSIFICATION	6.158494736005287E-6	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999446263305777	WITHOUT_CLASSIFICATION	5.537366942240866E-5	DESIGN
null clientlock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.999934683351573	WITHOUT_CLASSIFICATION	6.531664842702859E-5	DESIGN
we really could refresh the item if it is not a lock but it might be slower return freshtimestamp < txtimestamp	WITHOUT_CLASSIFICATION	0.9999772337638657	WITHOUT_CLASSIFICATION	2.276623613425442E-5	DESIGN
by requiring < we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.999698780740081	WITHOUT_CLASSIFICATION	3.0121925991893124E-4	DESIGN
the user provided resulttransformer not the one used with "select new". here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9996829044022553	WITHOUT_CLASSIFICATION	3.17095597744695E-4	DESIGN
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9996950147885272	WITHOUT_CLASSIFICATION	3.049852114728861E-4	DESIGN
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999715450725664	WITHOUT_CLASSIFICATION	2.8454927433663398E-5	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999446263305777	WITHOUT_CLASSIFICATION	5.537366942240866E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999446263305777	WITHOUT_CLASSIFICATION	5.537366942240866E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999446263305777	WITHOUT_CLASSIFICATION	5.537366942240866E-5	DESIGN
this is called from settingsfactory irregardless trivial to simply disregard	WITHOUT_CLASSIFICATION	0.988897198436139	WITHOUT_CLASSIFICATION	0.011102801563861031	DESIGN
do nothing subclasses may override.	WITHOUT_CLASSIFICATION	0.9999617258636402	WITHOUT_CLASSIFICATION	3.827413635970437E-5	DESIGN
do nothing subclasses may override.	WITHOUT_CLASSIFICATION	0.9999617258636402	WITHOUT_CLASSIFICATION	3.827413635970437E-5	DESIGN
throw new unsupportedoperationexception("can't write to a readonly object")	WITHOUT_CLASSIFICATION	0.9928190684580926	WITHOUT_CLASSIFICATION	0.007180931541907229	DESIGN
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9984273946844006	WITHOUT_CLASSIFICATION	0.0015726053155994118	DESIGN
persister.setidentifier(result id) before calling interceptor for consistency with normal load	WITHOUT_CLASSIFICATION	0.9998411907969809	WITHOUT_CLASSIFICATION	1.5880920301916836E-4	DESIGN
no-op ccs did not have such a concept	WITHOUT_CLASSIFICATION	0.9994051419616218	WITHOUT_CLASSIFICATION	5.948580383781865E-4	DESIGN
no-op ccs did not have such a concept	WITHOUT_CLASSIFICATION	0.9994051419616218	WITHOUT_CLASSIFICATION	5.948580383781865E-4	DESIGN
again ccs did not have such a concept but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not jta aware.	WITHOUT_CLASSIFICATION	0.9999624435963402	WITHOUT_CLASSIFICATION	3.755640365984975E-5	DESIGN
again ccs did not have such a concept however a reasonable proximity is to clear the cache. for non-transaction aware caches we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9996243989586785	WITHOUT_CLASSIFICATION	3.7560104132153065E-4	DESIGN
again ccs did not have such a concept however a reasonable proximity is to clear the cache. for non-transaction aware caches we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9996243989586785	WITHOUT_CLASSIFICATION	3.7560104132153065E-4	DESIGN
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9994985871279436	WITHOUT_CLASSIFICATION	5.014128720564491E-4	DESIGN
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9996019151138603	WITHOUT_CLASSIFICATION	3.9808488613970544E-4	DESIGN
get meta's from <class>	WITHOUT_CLASSIFICATION	0.999959680339207	WITHOUT_CLASSIFICATION	4.031966079308681E-5	DESIGN
db-objectname	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
mutable	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
where	WITHOUT_CLASSIFICATION	0.9998200169455349	WITHOUT_CLASSIFICATION	1.799830544651572E-4	DESIGN
check	WITHOUT_CLASSIFICATION	0.9999706625587673	WITHOUT_CLASSIFICATION	2.9337441232696898E-5	DESIGN
polymorphism	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
todo	WITHOUT_CLASSIFICATION	0.8685420110260232	WITHOUT_CLASSIFICATION	0.1314579889739768	DESIGN
id	WITHOUT_CLASSIFICATION	0.999931742377137	WITHOUT_CLASSIFICATION	6.82576228629156E-5	DESIGN
version / timestamp	WITHOUT_CLASSIFICATION	0.9999800089245248	WITHOUT_CLASSIFICATION	1.9991075475274768E-5	DESIGN
discriminator	WITHOUT_CLASSIFICATION	0.9999672261672361	WITHOUT_CLASSIFICATION	3.2773832763990036E-5	DESIGN
primary key constraint	WITHOUT_CLASSIFICATION	0.9999643248343574	WITHOUT_CLASSIFICATION	3.5675165642506764E-5	DESIGN
this is either a <version/> tag with no type attribute or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.997880896527055	WITHOUT_CLASSIFICATION	0.002119103472944876	DESIGN
for version properties marked as being generated make sure they are "always" generated aka "insert" is invalid this is dis-allowed by the dtd but just to make sure	WITHOUT_CLASSIFICATION	0.9521174907504136	WITHOUT_CLASSIFICATION	0.04788250924958644	DESIGN
discriminator	WITHOUT_CLASSIFICATION	0.9999672261672361	WITHOUT_CLASSIFICATION	3.2773832763990036E-5	DESIGN
( (column) discrim.getcolumniterator().next() ).settype(type)	WITHOUT_CLASSIFICATION	0.9996063429564355	WITHOUT_CLASSIFICATION	3.936570435645544E-4	DESIGN
go ahead and set the lazy here since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9997737068706626	WITHOUT_CLASSIFICATION	2.26293129337312E-4	DESIGN
dynamic update	WITHOUT_CLASSIFICATION	0.999994023526803	WITHOUT_CLASSIFICATION	5.976473196961955E-6	DESIGN
import	WITHOUT_CLASSIFICATION	0.9999364810439165	WITHOUT_CLASSIFICATION	6.351895608339224E-5	DESIGN
batch size	WITHOUT_CLASSIFICATION	0.99998916207196	WITHOUT_CLASSIFICATION	1.0837928040065892E-5	DESIGN
select before update	WITHOUT_CLASSIFICATION	0.9999966417842711	WITHOUT_CLASSIFICATION	3.3582157289550336E-6	DESIGN
optimistic lock mode	WITHOUT_CLASSIFICATION	0.9999387006867314	WITHOUT_CLASSIFICATION	6.129931326859166E-5	DESIGN
persister	WITHOUT_CLASSIFICATION	0.9999087764243557	WITHOUT_CLASSIFICATION	9.122357564427067E-5	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.99994565011453	WITHOUT_CLASSIFICATION	5.434988546996638E-5	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999959680339207	WITHOUT_CLASSIFICATION	4.031966079308681E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9998313088695376	WITHOUT_CLASSIFICATION	1.6869113046233064E-4	DESIGN
joined subclasses	WITHOUT_CLASSIFICATION	0.999956940292514	WITHOUT_CLASSIFICATION	4.305970748602802E-5	DESIGN
key	WITHOUT_CLASSIFICATION	0.9999445486742331	WITHOUT_CLASSIFICATION	5.545132576677958E-5	DESIGN
check	WITHOUT_CLASSIFICATION	0.9999706625587673	WITHOUT_CLASSIFICATION	2.9337441232696898E-5	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.99994565011453	WITHOUT_CLASSIFICATION	5.434988546996638E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9998313088695376	WITHOUT_CLASSIFICATION	1.6869113046233064E-4	DESIGN
key	WITHOUT_CLASSIFICATION	0.9999445486742331	WITHOUT_CLASSIFICATION	5.545132576677958E-5	DESIGN
model.getkey().settype( new type( model.getidentifier() ) )	WITHOUT_CLASSIFICATION	0.9993913161992756	WITHOUT_CLASSIFICATION	6.086838007244117E-4	DESIGN
tablename	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
join.getkey().settype( new type( lazz.getidentifier() ) )	WITHOUT_CLASSIFICATION	0.9993913161992756	WITHOUT_CLASSIFICATION	6.086838007244117E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9998313088695376	WITHOUT_CLASSIFICATION	1.6869113046233064E-4	DESIGN
column(s)	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
column index	WITHOUT_CLASSIFICATION	0.9999042040191646	WITHOUT_CLASSIFICATION	9.579598083545534E-5	DESIGN
column unique-key	WITHOUT_CLASSIFICATION	0.9998819187861024	WITHOUT_CLASSIFICATION	1.1808121389757806E-4	DESIGN
automatically makes a column with the default name if none is specifed by xml	WITHOUT_CLASSIFICATION	0.9908739438807571	WITHOUT_CLASSIFICATION	0.00912605611924287	DESIGN
for an any	WITHOUT_CLASSIFICATION	0.9999501417931299	WITHOUT_CLASSIFICATION	4.9858206870067506E-5	DESIGN
insertable simply because that is the user did not specify anything just override it	WITHOUT_CLASSIFICATION	0.9999713235183584	WITHOUT_CLASSIFICATION	2.867648164165527E-5	DESIGN
the user specifically supplied insert="true" which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999226995931284	WITHOUT_CLASSIFICATION	7.730040687165312E-5	DESIGN
properties generated on update can never be updateable	WITHOUT_CLASSIFICATION	0.9997968734254634	WITHOUT_CLASSIFICATION	2.031265745365162E-4	DESIGN
updateable only because the user did not specify anything just override it	WITHOUT_CLASSIFICATION	0.999994620390745	WITHOUT_CLASSIFICATION	5.3796092549644055E-6	DESIGN
the user specifically supplied update="true" which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999226995931284	WITHOUT_CLASSIFICATION	7.730040687165312E-5	DESIGN
rolename	WITHOUT_CLASSIFICATION	0.9999581465896983	WITHOUT_CLASSIFICATION	4.1853410301781585E-5	DESIGN
fetch strategy	WITHOUT_CLASSIFICATION	0.9999268796080485	WITHOUT_CLASSIFICATION	7.312039195146489E-5	DESIGN
table	WITHOUT_CLASSIFICATION	0.9999793001513554	WITHOUT_CLASSIFICATION	2.0699848644577794E-5	DESIGN
tablename = mappings.getnamingstrategy().propertytotablename( classname path )	WITHOUT_CLASSIFICATION	0.9999588242477461	WITHOUT_CLASSIFICATION	4.117575225397645E-5	DESIGN
sort	WITHOUT_CLASSIFICATION	0.9999477133135759	WITHOUT_CLASSIFICATION	5.228668642411141E-5	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.99994565011453	WITHOUT_CLASSIFICATION	5.434988546996638E-5	DESIGN
unsorted natural comparator.class.name	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
orphan delete (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9993583423407157	WITHOUT_CLASSIFICATION	6.41657659284208E-4	DESIGN
set up second pass	WITHOUT_CLASSIFICATION	0.9999904804510932	WITHOUT_CLASSIFICATION	9.519548906765572E-6	DESIGN
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9949439828678514	WITHOUT_CLASSIFICATION	0.005056017132148565	DESIGN
a nested composite element	WITHOUT_CLASSIFICATION	0.9996662737662794	WITHOUT_CLASSIFICATION	3.337262337206133E-4	DESIGN
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9992758314609886	WITHOUT_CLASSIFICATION	7.241685390112816E-4	DESIGN
note special case one-to-one constrained=false cannot be proxied so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999796918680794	WITHOUT_CLASSIFICATION	2.0308131920567612E-5	DESIGN
use old (hb 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9996289260441599	WITHOUT_CLASSIFICATION	3.7107395584015695E-4	DESIGN
lazy = !join	WITHOUT_CLASSIFICATION	0.999996015774821	WITHOUT_CLASSIFICATION	3.984225178915481E-6	DESIGN
generator	WITHOUT_CLASSIFICATION	0.9999666825164557	WITHOUT_CLASSIFICATION	3.331748354425832E-5	DESIGN
id unsaved-value	WITHOUT_CLASSIFICATION	0.9999600020459192	WITHOUT_CLASSIFICATION	3.999795408087622E-5	DESIGN
version unsaved-value	WITHOUT_CLASSIFICATION	0.9999586795699281	WITHOUT_CLASSIFICATION	4.1320430071827364E-5	DESIGN
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9998288432798166	WITHOUT_CLASSIFICATION	1.711567201834316E-4	DESIGN
( (column) ( (simplevalue) ic.getindex() ).getcolumniterator().next() ).setnullable(false)	WITHOUT_CLASSIFICATION	0.9996063429564355	WITHOUT_CLASSIFICATION	3.936570435645544E-4	DESIGN
contained elements	WITHOUT_CLASSIFICATION	0.999985522587467	WITHOUT_CLASSIFICATION	1.4477412532914673E-5	DESIGN
for non-inverse one-to-many with a not-null fk add a backref!	WITHOUT_CLASSIFICATION	0.9994297975849593	WITHOUT_CLASSIFICATION	5.702024150407026E-4	DESIGN
bind the where	WITHOUT_CLASSIFICATION	0.9999691785946756	WITHOUT_CLASSIFICATION	3.0821405324448445E-5	DESIGN
bind the order-by	WITHOUT_CLASSIFICATION	0.9999904201277087	WITHOUT_CLASSIFICATION	9.579872291274838E-6	DESIGN
bind the filters	WITHOUT_CLASSIFICATION	0.9999904201277087	WITHOUT_CLASSIFICATION	9.579872291274838E-6	DESIGN
overriding inherited meta attribute. hbx-621 & hbx-793	WITHOUT_CLASSIFICATION	0.999764230230804	WITHOUT_CLASSIFICATION	2.357697691960354E-4	DESIGN
first iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999647757541059	WITHOUT_CLASSIFICATION	3.522424589396118E-5	DESIGN
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a fqn (in the case of a pojo mapping).	WITHOUT_CLASSIFICATION	0.999381158508678	WITHOUT_CLASSIFICATION	6.188414913219718E-4	DESIGN
+ "_" + referencedcolumnname not used for backward compatibility	WITHOUT_CLASSIFICATION	0.999572896990465	WITHOUT_CLASSIFICATION	4.2710300953485887E-4	DESIGN
sessionfactory name	WITHOUT_CLASSIFICATION	0.9998846554244029	WITHOUT_CLASSIFICATION	1.153445755971064E-4	DESIGN
jdbc and connection settings	WITHOUT_CLASSIFICATION	0.9999859114260435	WITHOUT_CLASSIFICATION	1.4088573956468573E-5	DESIGN
jdbc and connection settings	WITHOUT_CLASSIFICATION	0.9999859114260435	WITHOUT_CLASSIFICATION	1.4088573956468573E-5	DESIGN
interrogate jdbc metadata	WITHOUT_CLASSIFICATION	0.9999577000400072	WITHOUT_CLASSIFICATION	4.229995999285693E-5	DESIGN
user supplied jdbc connections	WITHOUT_CLASSIFICATION	0.9999851589846136	WITHOUT_CLASSIFICATION	1.4841015386340728E-5	DESIGN
use dialect default properties	WITHOUT_CLASSIFICATION	0.9998937054854765	WITHOUT_CLASSIFICATION	1.0629451452341631E-4	DESIGN
transaction settings	WITHOUT_CLASSIFICATION	0.9999866035370387	WITHOUT_CLASSIFICATION	1.3396462961190817E-5	DESIGN
sql generation settings	WITHOUT_CLASSIFICATION	0.9999784661566399	WITHOUT_CLASSIFICATION	2.1533843360072894E-5	DESIGN
query parser settings	WITHOUT_CLASSIFICATION	0.9999839225059517	WITHOUT_CLASSIFICATION	1.6077494048334133E-5	DESIGN
second-level / query cache	WITHOUT_CLASSIFICATION	0.999980796434763	WITHOUT_CLASSIFICATION	1.9203565237037567E-5	DESIGN
the cache provider is needed when we either have second-level cache enabled or query cache enabled. note that usesecondlevelcache is enabled by default	WITHOUT_CLASSIFICATION	0.9999389468988125	WITHOUT_CLASSIFICATION	6.10531011875321E-5	DESIGN
sql exception converter	WITHOUT_CLASSIFICATION	0.9999878445211577	WITHOUT_CLASSIFICATION	1.2155478842245855E-5	DESIGN
statistics and logging	WITHOUT_CLASSIFICATION	0.9999874520537182	WITHOUT_CLASSIFICATION	1.2547946281754026E-5	DESIGN
settings.setshowsqlenabled(showsql)	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
settings.setformatsqlenabled(formatsql)	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
schema export	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
string provider = properties.getproperty( environment.bytecode_provider ) log.info( "bytecode provider name " + provider ) bytecodeprovider bytecodeprovider = buildbytecodeprovider( provider ) settings.setbytecodeprovider( bytecodeprovider )	WITHOUT_CLASSIFICATION	0.9998232994358294	WITHOUT_CLASSIFICATION	1.7670056417059236E-4	DESIGN
legacy behavior apply the bridge	WITHOUT_CLASSIFICATION	0.9991538230188816	WITHOUT_CLASSIFICATION	8.461769811183258E-4	DESIGN
maybe a concrete sqlpropertyresult type but map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9287824062028918	WITHOUT_CLASSIFICATION	0.07121759379710817	DESIGN
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9999118660787446	WITHOUT_CLASSIFICATION	8.813392125538952E-5	DESIGN
private componenttuplizerfactory componenttuplizerfactory todo hhh-3517 and hhh-1907 private bytecodeprovider bytecodeprovider	WITHOUT_CLASSIFICATION	0.5303299402143877	DESIGN	0.46967005978561227	WITHOUT_CLASSIFICATION
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997181786669236	WITHOUT_CLASSIFICATION	2.818213330764961E-4	DESIGN
public componenttuplizerfactory getcomponenttuplizerfactory() { return componenttuplizerfactory }	WITHOUT_CLASSIFICATION	0.9997756765333421	WITHOUT_CLASSIFICATION	2.24323466657852E-4	DESIGN
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9971700876925914	WITHOUT_CLASSIFICATION	0.002829912307408563	DESIGN
void setshowsqlenabled(boolean b) { showsql = b } void setformatsqlenabled(boolean b) { formatsql = b }	WITHOUT_CLASSIFICATION	0.9999637951916363	WITHOUT_CLASSIFICATION	3.6204808363766164E-5	DESIGN
public bytecodeprovider getbytecodeprovider() { return bytecodeprovider } void setbytecodeprovider(bytecodeprovider bytecodeprovider) { this.bytecodeprovider = bytecodeprovider }	WITHOUT_CLASSIFICATION	0.9999681127802764	WITHOUT_CLASSIFICATION	3.188721972353717E-5	DESIGN
using local since the inheritedmetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9968729841170202	WITHOUT_CLASSIFICATION	0.0031270158829799287	DESIGN
private componenttuplizerfactory componenttuplizerfactory todo hhh-3517 and hhh-1907	WITHOUT_CLASSIFICATION	0.5303299402143877	DESIGN	0.46967005978561227	WITHOUT_CLASSIFICATION
protected list extendsqueue	WITHOUT_CLASSIFICATION	0.9999095730272859	WITHOUT_CLASSIFICATION	9.042697271413305E-5	DESIGN
extendsqueue = new arraylist()	WITHOUT_CLASSIFICATION	0.999994903658143	WITHOUT_CLASSIFICATION	5.096341856976653E-6	DESIGN
componenttuplizerfactory = new componenttuplizerfactory()	WITHOUT_CLASSIFICATION	0.9999496669631075	WITHOUT_CLASSIFICATION	5.0333036892569065E-5	DESIGN
if doc is null then for whatever reason the cached file cannot be used	WITHOUT_CLASSIFICATION	0.999426221910908	WITHOUT_CLASSIFICATION	5.73778089092077E-4	DESIGN
drop them in reverse order in case db needs it done that way	WITHOUT_CLASSIFICATION	0.996018633018873	WITHOUT_CLASSIFICATION	0.003981366981127114	DESIGN
public componenttuplizerfactory getcomponenttuplizerfactory() { return componenttuplizerfactory }	WITHOUT_CLASSIFICATION	0.9997756765333421	WITHOUT_CLASSIFICATION	2.24323466657852E-4	DESIGN
this method may be called many times!!	WITHOUT_CLASSIFICATION	0.998168001901666	WITHOUT_CLASSIFICATION	0.001831998098334004	DESIGN
iterator iterator = extendsqueue.iterator()	WITHOUT_CLASSIFICATION	0.9999174669374333	WITHOUT_CLASSIFICATION	8.253306256668617E-5	DESIGN
iterator iter = extendsqueue.iterator()	WITHOUT_CLASSIFICATION	0.9999174669374333	WITHOUT_CLASSIFICATION	8.253306256668617E-5	DESIGN
found	WITHOUT_CLASSIFICATION	0.9999468402824491	WITHOUT_CLASSIFICATION	5.315971755082572E-5	DESIGN
found	WITHOUT_CLASSIFICATION	0.9999468402824491	WITHOUT_CLASSIFICATION	5.315971755082572E-5	DESIGN
settings.setcomponenttuplizerfactory( this.getcomponenttuplizerfactory() )	WITHOUT_CLASSIFICATION	0.9993677354379846	WITHOUT_CLASSIFICATION	6.322645620153196E-4	DESIGN
private final list extendsqueue	WITHOUT_CLASSIFICATION	0.9994487108658363	WITHOUT_CLASSIFICATION	5.512891341636532E-4	DESIGN
<string string>	WITHOUT_CLASSIFICATION	0.9999673372070653	WITHOUT_CLASSIFICATION	3.2662792934772835E-5	DESIGN
<string string>	WITHOUT_CLASSIFICATION	0.9999673372070653	WITHOUT_CLASSIFICATION	3.2662792934772835E-5	DESIGN
+ "_" + referencedcolumnname not used for backward compatibility	WITHOUT_CLASSIFICATION	0.999572896990465	WITHOUT_CLASSIFICATION	4.2710300953485887E-4	DESIGN
set use_reflection_optimizer to false to fix hhh-227	WITHOUT_CLASSIFICATION	0.9603050343446923	WITHOUT_CLASSIFICATION	0.03969496565530765	DESIGN
orphan delete not supported for entitymode.dom4j	WITHOUT_CLASSIFICATION	0.999903455782465	WITHOUT_CLASSIFICATION	9.654421753502804E-5	DESIGN
element = xmlhelper.generatedom4jelement( persister.getnodename() )	WITHOUT_CLASSIFICATION	0.9999346922894935	WITHOUT_CLASSIFICATION	6.530771050657583E-5	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999383277826038	WITHOUT_CLASSIFICATION	6.167221739618467E-5	DESIGN
orphan delete not supported for entitymode.dom4j	WITHOUT_CLASSIFICATION	0.999903455782465	WITHOUT_CLASSIFICATION	9.654421753502804E-5	DESIGN
element = xmlhelper.generatedom4jelement( persister.getnodename() )	WITHOUT_CLASSIFICATION	0.9999346922894935	WITHOUT_CLASSIFICATION	6.530771050657583E-5	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.9998084006074452	WITHOUT_CLASSIFICATION	1.9159939255468004E-4	DESIGN
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9988934404591965	WITHOUT_CLASSIFICATION	0.0011065595408035044	DESIGN
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9996148124840387	WITHOUT_CLASSIFICATION	3.851875159612607E-4	DESIGN
the element has changed	WITHOUT_CLASSIFICATION	0.9999933388989533	WITHOUT_CLASSIFICATION	6.661101046745817E-6	DESIGN
careful these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9990925924037792	WITHOUT_CLASSIFICATION	9.074075962209117E-4	DESIGN
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9680406773864029	WITHOUT_CLASSIFICATION	0.03195932261359707	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999200508759774	WITHOUT_CLASSIFICATION	7.994912402268683E-5	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999200508759774	WITHOUT_CLASSIFICATION	7.994912402268683E-5	DESIGN
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9988953441133686	WITHOUT_CLASSIFICATION	0.0011046558866314711	DESIGN
short-circuit(s) no new elements the old list contains only orphans no old elements so no orphans neither	WITHOUT_CLASSIFICATION	0.9999949600882249	WITHOUT_CLASSIFICATION	5.039911775194495E-6	DESIGN
create the collection holding the orphans	WITHOUT_CLASSIFICATION	0.9995655256290169	WITHOUT_CLASSIFICATION	4.3447437098308297E-4	DESIGN
collect entityidentifier(s) of the current elements - add them into a hashset for fast access	WITHOUT_CLASSIFICATION	0.999435548734288	WITHOUT_CLASSIFICATION	5.644512657120304E-4	DESIGN
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999647081698569	WITHOUT_CLASSIFICATION	3.5291830143031456E-5	DESIGN
(array==null) ? templist.size()	WITHOUT_CLASSIFICATION	0.996138926062369	WITHOUT_CLASSIFICATION	0.0038610739376310483	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999383277826038	WITHOUT_CLASSIFICATION	6.167221739618467E-5	DESIGN
(array==null) ? templist.get(i)	WITHOUT_CLASSIFICATION	0.996138926062369	WITHOUT_CLASSIFICATION	0.0038610739376310483	DESIGN
write() -- doesn't	WITHOUT_CLASSIFICATION	0.9999873272010423	WITHOUT_CLASSIFICATION	1.2672798957738667E-5	DESIGN
write() -- doesn't	WITHOUT_CLASSIFICATION	0.9999873272010423	WITHOUT_CLASSIFICATION	1.2672798957738667E-5	DESIGN
amazingly these two will work because abstractcollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9993556116658239	WITHOUT_CLASSIFICATION	6.443883341761564E-4	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.9998084006074452	WITHOUT_CLASSIFICATION	1.9159939255468004E-4	DESIGN
finally what it's all about	WITHOUT_CLASSIFICATION	0.9985927796350825	WITHOUT_CLASSIFICATION	0.0014072203649174693	DESIGN
note that if we load this collection from a cartesian product the multiplicity would be broken so use an idbag instead	WITHOUT_CLASSIFICATION	0.9730746184044189	WITHOUT_CLASSIFICATION	0.026925381595581124	DESIGN
anyway here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.6438184246369126	WITHOUT_CLASSIFICATION	0.3561815753630875	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9995283623048298	WITHOUT_CLASSIFICATION	4.7163769517020695E-4	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9707944130327342	WITHOUT_CLASSIFICATION	0.029205586967265922	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.9998084006074452	WITHOUT_CLASSIFICATION	1.9159939255468004E-4	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9995283623048298	WITHOUT_CLASSIFICATION	4.7163769517020695E-4	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9707944130327342	WITHOUT_CLASSIFICATION	0.029205586967265922	DESIGN
public boolean equals(object other) {read()return bag.equals(other)}public int hashcode(object other) {read()return bag.hashcode()}	WITHOUT_CLASSIFICATION	0.9998872721748125	WITHOUT_CLASSIFICATION	1.127278251874848E-4	DESIGN
list operations	WITHOUT_CLASSIFICATION	0.9999776707939729	WITHOUT_CLASSIFICATION	2.2329206027029752E-5	DESIGN
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.999674651411761	WITHOUT_CLASSIFICATION	3.2534858823889346E-4	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.9998084006074452	WITHOUT_CLASSIFICATION	1.9159939255468004E-4	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.9998084006074452	WITHOUT_CLASSIFICATION	1.9159939255468004E-4	DESIGN
from map	WITHOUT_CLASSIFICATION	0.9999044816919027	WITHOUT_CLASSIFICATION	9.551830809724198E-5	DESIGN
from sortedmap	WITHOUT_CLASSIFICATION	0.9999217216551458	WITHOUT_CLASSIFICATION	7.82783448541413E-5	DESIGN
inject the data	WITHOUT_CLASSIFICATION	0.9999834799437558	WITHOUT_CLASSIFICATION	1.652005624419155E-5	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999588399476885	WITHOUT_CLASSIFICATION	4.116005231144454E-5	DESIGN
default pool size 20	WITHOUT_CLASSIFICATION	0.9999906218128525	WITHOUT_CLASSIFICATION	9.37818714753631E-6	DESIGN
trying via forname() first to be as close to drivermanager's semantics	WITHOUT_CLASSIFICATION	0.9993243685127903	WITHOUT_CLASSIFICATION	6.756314872098496E-4	DESIGN
if debug level is enabled then log the password otherwise mask it	WITHOUT_CLASSIFICATION	0.9997715241930425	WITHOUT_CLASSIFICATION	2.2847580695747812E-4	DESIGN
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9998791351648444	WITHOUT_CLASSIFICATION	1.2086483515557355E-4	DESIGN
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999344368531078	WITHOUT_CLASSIFICATION	6.556314689225244E-5	DESIGN
then bind it	WITHOUT_CLASSIFICATION	0.9999656137637077	WITHOUT_CLASSIFICATION	3.438623629226911E-5	DESIGN
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9933365597880479	WITHOUT_CLASSIFICATION	0.00666344021195204	DESIGN
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9967711725313082	WITHOUT_CLASSIFICATION	0.00322882746869176	DESIGN
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9997667014831506	WITHOUT_CLASSIFICATION	2.332985168493706E-4	DESIGN
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9971653666737064	WITHOUT_CLASSIFICATION	0.0028346333262937364	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995819523113162	WITHOUT_CLASSIFICATION	4.180476886838845E-4	DESIGN
we could register the session against the transaction even though it is not started but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999991461276586	WITHOUT_CLASSIFICATION	8.538723413909212E-7	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999588399476885	WITHOUT_CLASSIFICATION	4.116005231144454E-5	DESIGN
private string propertyname	WITHOUT_CLASSIFICATION	0.9999571069370442	WITHOUT_CLASSIFICATION	4.289306295573689E-5	DESIGN
public propertyprojection project() {return projections.property(getpropertyname())}	WITHOUT_CLASSIFICATION	0.9996259618152393	WITHOUT_CLASSIFICATION	3.740381847606599E-4	DESIGN
string[] fk = stringhelper.qualify( "collection_" cp.getkeycolumnnames() )	WITHOUT_CLASSIFICATION	0.9999356936827891	WITHOUT_CLASSIFICATION	6.430631721092963E-5	DESIGN
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999129300507522	WITHOUT_CLASSIFICATION	8.70699492477594E-5	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999588399476885	WITHOUT_CLASSIFICATION	4.116005231144454E-5	DESIGN
the following two lines were added to ensure that this.params is not null which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.999894423779276	WITHOUT_CLASSIFICATION	1.0557622072410759E-4	DESIGN
with two-deep subqueries the same alias would get generated for both using the old method (criteriaquery.generatesqlalias()) so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.959021598109217	WITHOUT_CLASSIFICATION	0.04097840189078295	DESIGN
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9995092836338034	WITHOUT_CLASSIFICATION	4.907163661965283E-4	DESIGN
pull off the last " "	WITHOUT_CLASSIFICATION	0.999989829191286	WITHOUT_CLASSIFICATION	1.017080871404277E-5	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
we have the form trim(trimsource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9998495006208469	WITHOUT_CLASSIFICATION	1.504993791531192E-4	DESIGN
we have the form trim(from trimsource). this is functionally equivalent to trim(trimsource)	WITHOUT_CLASSIFICATION	0.9978979974757182	WITHOUT_CLASSIFICATION	0.002102002524281782	DESIGN
not_supported_should_use_jdbc3_preparedstatement.getgeneratedkeys_method	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
potentialtrimcharacterargindex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9996990060196551	WITHOUT_CLASSIFICATION	3.0099398034480387E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993700819080639	WITHOUT_CLASSIFICATION	6.299180919360976E-4	DESIGN
oracle did add support for ansi case statements in 9i	WITHOUT_CLASSIFICATION	0.9995895282044991	WITHOUT_CLASSIFICATION	4.1047179550095914E-4	DESIGN
the standard sql function name is current_timestamp	WITHOUT_CLASSIFICATION	0.9992752218637023	WITHOUT_CLASSIFICATION	7.247781362975693E-4	DESIGN
informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9996420126450094	WITHOUT_CLASSIFICATION	3.579873549905868E-4	DESIGN
or byte or text? or money	WITHOUT_CLASSIFICATION	0.9999697731549544	WITHOUT_CLASSIFICATION	3.0226845045675848E-5	DESIGN
strip table-owner because informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.999397096190677	WITHOUT_CLASSIFICATION	6.029038093229378E-4	DESIGN
build the map of standard ansi sql aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994397993892378	WITHOUT_CLASSIFICATION	5.602006107622483E-4	DESIGN
pre h3.2 behavior super.getreturntype(ct m)	WITHOUT_CLASSIFICATION	0.9995133180607553	WITHOUT_CLASSIFICATION	4.8668193924477585E-4	DESIGN
finally use the sqltype if == on hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999336125497283	WITHOUT_CLASSIFICATION	6.638745027162389E-5	DESIGN
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9998435772639288	WITHOUT_CLASSIFICATION	1.564227360711894E-4	DESIGN
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9932701823087993	WITHOUT_CLASSIFICATION	0.006729817691200623	DESIGN
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9952078125349183	WITHOUT_CLASSIFICATION	0.004792187465081743	DESIGN
map second/minute/hour/day/month/year to ansi extract() override on subclasses	WITHOUT_CLASSIFICATION	0.9988998813871942	WITHOUT_CLASSIFICATION	0.0011001186128057967	DESIGN
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9952542252734798	WITHOUT_CLASSIFICATION	0.004745774726520262	DESIGN
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.993244557113203	WITHOUT_CLASSIFICATION	0.006755442886797065	DESIGN
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.993244557113203	WITHOUT_CLASSIFICATION	0.006755442886797065	DESIGN
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985524335398765	WITHOUT_CLASSIFICATION	0.00144756646012343	DESIGN
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996483617968833	WITHOUT_CLASSIFICATION	3.5163820311668583E-4	DESIGN
identity support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984415537505614	WITHOUT_CLASSIFICATION	0.001558446249438613	DESIGN
sequence support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985188444599601	WITHOUT_CLASSIFICATION	0.0014811555400399785	DESIGN
guid support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997917593781961	WITHOUT_CLASSIFICATION	0.0020824062180390124	DESIGN
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997917593781961	WITHOUT_CLASSIFICATION	0.0020824062180390124	DESIGN
by default we report no support	WITHOUT_CLASSIFICATION	0.9980118591985925	WITHOUT_CLASSIFICATION	0.0019881408014075347	DESIGN
by default we report no support for nowait lock semantics	WITHOUT_CLASSIFICATION	0.9665286758654111	WITHOUT_CLASSIFICATION	0.033471324134588885	DESIGN
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992285568601181	WITHOUT_CLASSIFICATION	7.714431398818912E-4	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.972104865500813	WITHOUT_CLASSIFICATION	0.027895134499186923	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982137412918987	WITHOUT_CLASSIFICATION	0.001786258708101242	DESIGN
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9974849614052261	WITHOUT_CLASSIFICATION	0.002515038594773892	DESIGN
sqlexception support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997917593781961	WITHOUT_CLASSIFICATION	0.0020824062180390124	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997917593781961	WITHOUT_CLASSIFICATION	0.0020824062180390124	DESIGN
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997917593781961	WITHOUT_CLASSIFICATION	0.0020824062180390124	DESIGN
ddl support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997917593781961	WITHOUT_CLASSIFICATION	0.0020824062180390124	DESIGN
grrr for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9996786681155795	WITHOUT_CLASSIFICATION	3.213318844205822E-4	DESIGN
informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
return false here as most databases do not properly support this construct	WITHOUT_CLASSIFICATION	0.997490391066658	WITHOUT_CLASSIFICATION	0.002509608933341984	DESIGN
mckoi has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9992424579792788	WITHOUT_CLASSIFICATION	7.575420207211596E-4	DESIGN
oracle8 and previous define only a "date" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.942627539626162	WITHOUT_CLASSIFICATION	0.05737246037383808	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9999501523884327	WITHOUT_CLASSIFICATION	4.984761156723022E-5	DESIGN
" cascade"	WITHOUT_CLASSIFICATION	0.9999333454359706	WITHOUT_CLASSIFICATION	6.665456402941278E-5	DESIGN
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999382497189703	WITHOUT_CLASSIFICATION	6.175028102970123E-5	DESIGN
public boolean droptemporarytableafteruse() {we have to because postgres sets current txto rollback only after a failed create tablereturn true}	WITHOUT_CLASSIFICATION	0.9999018117872559	WITHOUT_CLASSIFICATION	9.818821274413382E-5	DESIGN
check violation	WITHOUT_CLASSIFICATION	0.999982808971821	WITHOUT_CLASSIFICATION	1.7191028178944782E-5	DESIGN
unique violation	WITHOUT_CLASSIFICATION	0.9999506719542225	WITHOUT_CLASSIFICATION	4.932804577756616E-5	DESIGN
foreign key violation	WITHOUT_CLASSIFICATION	0.9999580754617079	WITHOUT_CLASSIFICATION	4.192453829215205E-5	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993700819080639	WITHOUT_CLASSIFICATION	6.299180919360976E-4	DESIGN
not null violation	WITHOUT_CLASSIFICATION	0.9999652825499921	WITHOUT_CLASSIFICATION	3.471745000788734E-5	DESIGN
all other	WITHOUT_CLASSIFICATION	0.9999327506644234	WITHOUT_CLASSIFICATION	6.724933557649321E-5	DESIGN
register the type of the out param - postgresql uses types.other	WITHOUT_CLASSIFICATION	0.9975422821914858	WITHOUT_CLASSIFICATION	0.00245771780851419	DESIGN
seems to not really public boolean supportsrowvalueconstructorsyntax() { return true }	WITHOUT_CLASSIFICATION	0.9999794059913648	WITHOUT_CLASSIFICATION	2.05940086351545E-5	DESIGN
seems to have spotty lob suppport	WITHOUT_CLASSIFICATION	0.9998063821158613	WITHOUT_CLASSIFICATION	1.936178841387244E-4	DESIGN
hhh-2300	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
ignore (probably h2 not in the classpath)	WITHOUT_CLASSIFICATION	0.999902467837542	WITHOUT_CLASSIFICATION	9.753216245800374E-5	DESIGN
numeric functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
string functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995922001101154	WITHOUT_CLASSIFICATION	4.0779988988460093E-4	DESIGN
time and date functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995336889173361	WITHOUT_CLASSIFICATION	4.6631108266392444E-4	DESIGN
system functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999760966761656	WITHOUT_CLASSIFICATION	2.390332383440869E-4	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9999342017478484	WITHOUT_CLASSIFICATION	6.57982521515524E-5	DESIGN
23000 check constraint violation {0} 23001 unique index or primary key violation {0}	WITHOUT_CLASSIFICATION	0.9997877704261655	WITHOUT_CLASSIFICATION	2.122295738345797E-4	DESIGN
display the dialect version.	WITHOUT_CLASSIFICATION	0.9999887072498406	WITHOUT_CLASSIFICATION	1.1292750159481211E-5	DESIGN
the rdms concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.999924491339971	WITHOUT_CLASSIFICATION	7.550866002904506E-5	DESIGN
dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991156624250966	WITHOUT_CLASSIFICATION	8.843375749033442E-4	DESIGN
original dialect.java returns " for update"	WITHOUT_CLASSIFICATION	0.998285806363278	WITHOUT_CLASSIFICATION	0.001714193636721992	DESIGN
verify the state of this new method in hibernate 3.0 dialect.java	WITHOUT_CLASSIFICATION	0.9995543031563237	WITHOUT_CLASSIFICATION	4.45696843676338E-4	DESIGN
origial dialect.java returns true	WITHOUT_CLASSIFICATION	0.9994031640726956	WITHOUT_CLASSIFICATION	5.968359273044353E-4	DESIGN
the keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9985992562214654	WITHOUT_CLASSIFICATION	0.001400743778534589	DESIGN
sequence methods - start. the rdms dialect needs these	WITHOUT_CLASSIFICATION	0.9945802358184421	WITHOUT_CLASSIFICATION	0.005419764181557826	DESIGN
methods to make it possible to use the native id generator	WITHOUT_CLASSIFICATION	0.9992255986988002	WITHOUT_CLASSIFICATION	7.744013011998334E-4	DESIGN
the where clause was added to eliminate this statement from brute force searches.	WITHOUT_CLASSIFICATION	0.9980060056494434	WITHOUT_CLASSIFICATION	0.0019939943505566248	DESIGN
sequence methods - end	WITHOUT_CLASSIFICATION	0.9997456587907132	WITHOUT_CLASSIFICATION	2.5434120928678245E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993700819080639	WITHOUT_CLASSIFICATION	6.299180919360976E-4	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9999501523884327	WITHOUT_CLASSIFICATION	4.984761156723022E-5	DESIGN
we must return a valid rdms/rsa command from this method to prevent rdms/rsa from issuing error 400	WITHOUT_CLASSIFICATION	0.9111952455064128	WITHOUT_CLASSIFICATION	0.08880475449358716	DESIGN
used with drop table to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9998985565038987	WITHOUT_CLASSIFICATION	1.0144349610129837E-4	DESIGN
rdms supports the union all clause.	WITHOUT_CLASSIFICATION	0.9998240267850854	WITHOUT_CLASSIFICATION	1.759732149146355E-4	DESIGN
rdms has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9992424579792788	WITHOUT_CLASSIFICATION	7.575420207211596E-4	DESIGN
multi-param dialect functions	WITHOUT_CLASSIFICATION	0.9999577000400072	WITHOUT_CLASSIFICATION	4.229995999285693E-5	DESIGN
function templates	WITHOUT_CLASSIFICATION	0.9999828818714035	WITHOUT_CLASSIFICATION	1.711812859651423E-5	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9999342017478484	WITHOUT_CLASSIFICATION	6.57982521515524E-5	DESIGN
this assumes schema support which is present in 1.8.0 and later	WITHOUT_CLASSIFICATION	0.9802645096080465	WITHOUT_CLASSIFICATION	0.019735490391953513	DESIGN
hsqldb only supports read_uncommitted transaction isolation	WITHOUT_CLASSIFICATION	0.9995907243405044	WITHOUT_CLASSIFICATION	4.092756594955931E-4	DESIGN
multi-param string dialect functions	WITHOUT_CLASSIFICATION	0.9995922001101154	WITHOUT_CLASSIFICATION	4.0779988988460093E-4	DESIGN
multi-param numeric dialect functions	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
multi-param date dialect functions	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999477973788211	WITHOUT_CLASSIFICATION	5.220262117884226E-5	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993700819080639	WITHOUT_CLASSIFICATION	6.299180919360976E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993700819080639	WITHOUT_CLASSIFICATION	6.299180919360976E-4	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999327992636007	WITHOUT_CLASSIFICATION	6.720073639933608E-5	DESIGN
register the type of the out param - an oracle specific type	WITHOUT_CLASSIFICATION	0.9991663136607949	WITHOUT_CLASSIFICATION	8.336863392050012E-4	DESIGN
timesten has no blob/clob support but these types may be suitable for some applications. the length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9954000070255158	WITHOUT_CLASSIFICATION	0.004599992974484234	DESIGN
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9998654530971517	WITHOUT_CLASSIFICATION	1.3454690284830147E-4	DESIGN
public boolean supportsforupdatenowait() {return false}	WITHOUT_CLASSIFICATION	0.999867939495833	WITHOUT_CLASSIFICATION	1.320605041671568E-4	DESIGN
timesten has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9992424579792788	WITHOUT_CLASSIFICATION	7.575420207211596E-4	DESIGN
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.994380094676728	WITHOUT_CLASSIFICATION	0.005619905323271946	DESIGN
add new ordered map	WITHOUT_CLASSIFICATION	0.9999873225158984	WITHOUT_CLASSIFICATION	1.2677484101719199E-5	DESIGN
registercolumntype( types.varchar 16777215 "mediumtext" )	WITHOUT_CLASSIFICATION	0.9993677354379846	WITHOUT_CLASSIFICATION	6.322645620153196E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993700819080639	WITHOUT_CLASSIFICATION	6.299180919360976E-4	DESIGN
this assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9996231516319072	WITHOUT_CLASSIFICATION	3.7684836809273646E-4	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9987925327581176	WITHOUT_CLASSIFICATION	0.0012074672418824401	DESIGN
return "select current_timestamp from rdb$database"	WITHOUT_CLASSIFICATION	0.999459978865693	WITHOUT_CLASSIFICATION	5.400211343069034E-4	DESIGN
registercolumntype data types	WITHOUT_CLASSIFICATION	0.9999094047069202	WITHOUT_CLASSIFICATION	9.059529307977679E-5	DESIGN
hibernate seems to ignore this type	WITHOUT_CLASSIFICATION	0.9933219668439246	WITHOUT_CLASSIFICATION	0.00667803315607537	DESIGN
ibid for current_time and current_date	WITHOUT_CLASSIFICATION	0.9991528671664472	WITHOUT_CLASSIFICATION	8.471328335528263E-4	DESIGN
tell hibernate to use getbytes instead of getbinarystream	WITHOUT_CLASSIFICATION	0.9985035986173232	WITHOUT_CLASSIFICATION	0.0014964013826767608	DESIGN
no batch statements	WITHOUT_CLASSIFICATION	0.999987793395238	WITHOUT_CLASSIFICATION	1.2206604761983848E-5	DESIGN
we might want a special case for 192. this is very common for money types and here it is converted to 181	WITHOUT_CLASSIFICATION	0.5168345978503159	WITHOUT_CLASSIFICATION	0.483165402149684	DESIGN
no pointbase bit	WITHOUT_CLASSIFICATION	0.999992057440763	WITHOUT_CLASSIFICATION	7.942559236944211E-6	DESIGN
no pointbase tinyint	WITHOUT_CLASSIFICATION	0.999987793395238	WITHOUT_CLASSIFICATION	1.2206604761983848E-5	DESIGN
pointbase has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9992424579792788	WITHOUT_CLASSIFICATION	7.575420207211596E-4	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9999501523884327	WITHOUT_CLASSIFICATION	4.984761156723022E-5	DESIGN
the current_timestamp is more accurate but only known to be supported in sql server 7.0 and later (i.e. sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9956309630636192	WITHOUT_CLASSIFICATION	0.0043690369363808094	DESIGN
sql server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.999941377382154	WITHOUT_CLASSIFICATION	5.8622617845919793E-5	DESIGN
here assume sqlserver2005 using snapshot isolation which does not have this problem	WITHOUT_CLASSIFICATION	0.999127722063929	WITHOUT_CLASSIFICATION	8.722779360710681E-4	DESIGN
registercolumntype( types.blob 16777215 "mediumblob" ) registercolumntype( types.blob 65535 "blob" )	WITHOUT_CLASSIFICATION	0.9993677354379846	WITHOUT_CLASSIFICATION	6.322645620153196E-4	DESIGN
registercolumntype( types.clob 16777215 "mediumtext" ) registercolumntype( types.clob 65535 "text" )	WITHOUT_CLASSIFICATION	0.9993677354379846	WITHOUT_CLASSIFICATION	6.322645620153196E-4	DESIGN
registercolumntype( types.varchar 16777215 "mediumtext" ) registercolumntype( types.varchar 65535 "text" )	WITHOUT_CLASSIFICATION	0.9993677354379846	WITHOUT_CLASSIFICATION	6.322645620153196E-4	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9999501523884327	WITHOUT_CLASSIFICATION	4.984761156723022E-5	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9987925327581176	WITHOUT_CLASSIFICATION	0.0012074672418824401	DESIGN
sybase bit type does not support null values	WITHOUT_CLASSIFICATION	0.998789189271083	WITHOUT_CLASSIFICATION	0.001210810728916996	DESIGN
this assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9996231516319072	WITHOUT_CLASSIFICATION	3.7684836809273646E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993700819080639	WITHOUT_CLASSIFICATION	6.299180919360976E-4	DESIGN
you may still have other resultsets or update counts left to process here but you can't do it now or the resultset you just got will be closed	WITHOUT_CLASSIFICATION	0.9999985623123938	WITHOUT_CLASSIFICATION	1.4376876061018205E-6	DESIGN
not null (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9991807983339686	WITHOUT_CLASSIFICATION	8.192016660313913E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993700819080639	WITHOUT_CLASSIFICATION	6.299180919360976E-4	DESIGN
oracle driver reports to support getgeneratedkeys() but they only support the version taking an array of the names of the columns to be returned (via its returning clause). no other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9980256287640125	WITHOUT_CLASSIFICATION	0.0019743712359876447	DESIGN
multi-param string dialect functions	WITHOUT_CLASSIFICATION	0.9995922001101154	WITHOUT_CLASSIFICATION	4.0779988988460093E-4	DESIGN
multi-param numeric dialect functions	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
multi-param date dialect functions	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999871896041153	WITHOUT_CLASSIFICATION	1.2810395884723631E-5	DESIGN
add the main query	WITHOUT_CLASSIFICATION	0.9999974973973578	WITHOUT_CLASSIFICATION	2.5026026421941006E-6	DESIGN
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999377655302583	WITHOUT_CLASSIFICATION	6.223446974172275E-5	DESIGN
this assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9996231516319072	WITHOUT_CLASSIFICATION	3.7684836809273646E-4	DESIGN
you may still have other resultsets or update counts left to process here but you can't do it now or the resultset you just got will be closed	WITHOUT_CLASSIFICATION	0.9999985623123938	WITHOUT_CLASSIFICATION	1.4376876061018205E-6	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993700819080639	WITHOUT_CLASSIFICATION	6.299180919360976E-4	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9999501523884327	WITHOUT_CLASSIFICATION	4.984761156723022E-5	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999477973788211	WITHOUT_CLASSIFICATION	5.220262117884226E-5	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999327992636007	WITHOUT_CLASSIFICATION	6.720073639933608E-5	DESIGN
register the type of the out param - an oracle specific type	WITHOUT_CLASSIFICATION	0.9991663136607949	WITHOUT_CLASSIFICATION	8.336863392050012E-4	DESIGN
features which change between 8i 9i and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992858600414353	WITHOUT_CLASSIFICATION	7.141399585647657E-4	DESIGN
features which remain constant across 8i 9i and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994468151369177	WITHOUT_CLASSIFICATION	5.531848630823664E-4	DESIGN
binary %stream character %stream	WITHOUT_CLASSIFICATION	0.9998092621376725	WITHOUT_CLASSIFICATION	1.907378623274261E-4	DESIGN
getdefaultproperties().setproperty(environment.statement_batch_size no_batch)	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
hibernate impelemnts cast in dialect.java	WITHOUT_CLASSIFICATION	0.9994078456214772	WITHOUT_CLASSIFICATION	5.92154378522865E-4	DESIGN
aggregate functions shouldn't be registered right? registerfunction( "list" new standardsqlfunction("list"hibernate.string) ) stopped on $list	WITHOUT_CLASSIFICATION	0.9985618367453095	WITHOUT_CLASSIFICATION	0.0014381632546904514	DESIGN
ddl support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997917593781961	WITHOUT_CLASSIFICATION	0.0020824062180390124	DESIGN
below is for cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9886310186398438	WITHOUT_CLASSIFICATION	0.01136898136015614	DESIGN
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9976767197651386	WITHOUT_CLASSIFICATION	0.0023232802348613735	DESIGN
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9997030284213811	WITHOUT_CLASSIFICATION	2.9697157861888E-4	DESIGN
the syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9996005473634153	WITHOUT_CLASSIFICATION	3.9945263658476256E-4	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
identity support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984415537505614	WITHOUT_CLASSIFICATION	0.001558446249438613	DESIGN
sequence support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985188444599601	WITHOUT_CLASSIFICATION	0.0014811555400399785	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.972104865500813	WITHOUT_CLASSIFICATION	0.027895134499186923	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
the syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9990417339021336	WITHOUT_CLASSIFICATION	9.582660978663102E-4	DESIGN
completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9996623130518494	WITHOUT_CLASSIFICATION	3.376869481506321E-4	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9969494970746126	WITHOUT_CLASSIFICATION	0.0030505029253874117	DESIGN
limit support (ala top) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9973287404927456	WITHOUT_CLASSIFICATION	0.002671259507254493	DESIGN
intersystems cache' does not current support "select for update" syntax set your transaction mode to read_committed before using	WITHOUT_CLASSIFICATION	0.9953693708842378	WITHOUT_CLASSIFICATION	0.0046306291157621445	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993700819080639	WITHOUT_CLASSIFICATION	6.299180919360976E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993700819080639	WITHOUT_CLASSIFICATION	6.299180919360976E-4	DESIGN
<string>	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982137412918987	WITHOUT_CLASSIFICATION	0.001786258708101242	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997917593781961	WITHOUT_CLASSIFICATION	0.0020824062180390124	DESIGN
the keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9985992562214654	WITHOUT_CLASSIFICATION	0.001400743778534589	DESIGN
does the limit clause come at the start of the select statement rather than at the end?	WITHOUT_CLASSIFICATION	0.9989683187337047	WITHOUT_CLASSIFICATION	0.0010316812662952775	DESIGN
does the limit clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9989229870152319	WITHOUT_CLASSIFICATION	0.0010770129847680926	DESIGN
the name of the sql function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9980594743407065	WITHOUT_CLASSIFICATION	0.0019405256592934473	DESIGN
create an outerjoingenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9975194810584981	WITHOUT_CLASSIFICATION	0.002480518941501895	DESIGN
the keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9996299248820922	WITHOUT_CLASSIFICATION	3.700751179077783E-4	DESIGN
registerfunction( "trim" new standardsqlfunction( "trim" hibernate.string ) )	WITHOUT_CLASSIFICATION	0.9993913161992756	WITHOUT_CLASSIFICATION	6.086838007244117E-4	DESIGN
skip the from keyword in params	WITHOUT_CLASSIFICATION	0.9998821733309264	WITHOUT_CLASSIFICATION	1.1782666907348029E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9998110032392955	WITHOUT_CLASSIFICATION	1.8899676070448587E-4	DESIGN
potentialtrimcharacterargindex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9996990060196551	WITHOUT_CLASSIFICATION	3.0099398034480387E-4	DESIGN
sqlfunction implementation	WITHOUT_CLASSIFICATION	0.9999549318013291	WITHOUT_CLASSIFICATION	4.506819867084722E-5	DESIGN
conceivable that the dialect ctor could throw hibernateexceptions so don't re-wrap	WITHOUT_CLASSIFICATION	0.9996241249711316	WITHOUT_CLASSIFICATION	3.7587502886840345E-4	DESIGN
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.999751777791985	WITHOUT_CLASSIFICATION	2.482222080150208E-4	DESIGN
register resolvers set via environment property	WITHOUT_CLASSIFICATION	0.9994359388602793	WITHOUT_CLASSIFICATION	5.640611397206625E-4	DESIGN
kept for backward compatibility until after the 3.1beta5 release of ha	WITHOUT_CLASSIFICATION	0.9999185385313876	WITHOUT_CLASSIFICATION	8.14614686123509E-5	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999893741720434	WITHOUT_CLASSIFICATION	1.0625827956541346E-5	DESIGN
the cascadingaction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998591948876661	WITHOUT_CLASSIFICATION	1.4080511233395483E-4	DESIGN
the cascadingaction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998623936627075	WITHOUT_CLASSIFICATION	1.3760633729245652E-4	DESIGN
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9994290940988871	WITHOUT_CLASSIFICATION	5.709059011128649E-4	DESIGN
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9984748997974044	WITHOUT_CLASSIFICATION	0.0015251002025955301	DESIGN
(lockmode) anything	WITHOUT_CLASSIFICATION	0.9999918228762076	WITHOUT_CLASSIFICATION	8.177123792333927E-6	DESIGN
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996197930654381	WITHOUT_CLASSIFICATION	3.8020693456186107E-4	DESIGN
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997926843369569	WITHOUT_CLASSIFICATION	2.0731566304310088E-4	DESIGN
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9987846502819111	WITHOUT_CLASSIFICATION	0.0012153497180889341	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9992690794416579	WITHOUT_CLASSIFICATION	7.309205583420243E-4	DESIGN
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9976860219189402	WITHOUT_CLASSIFICATION	0.0023139780810598055	DESIGN
for deprecated saveorupdatecopy()	WITHOUT_CLASSIFICATION	0.9963575312439599	WITHOUT_CLASSIFICATION	0.0036424687560402155	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9987846502819111	WITHOUT_CLASSIFICATION	0.0012153497180889341	DESIGN
a proxy cannot be transient and it breaks foreignkeys.istransient	WITHOUT_CLASSIFICATION	0.9993818616155624	WITHOUT_CLASSIFICATION	6.181383844375453E-4	DESIGN
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9991333572083938	WITHOUT_CLASSIFICATION	8.666427916061186E-4	DESIGN
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9974861154891919	WITHOUT_CLASSIFICATION	0.0025138845108081814	DESIGN
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9998211038841469	WITHOUT_CLASSIFICATION	1.788961158530482E-4	DESIGN
actually the semantics of the next three are really "bag" note that unlike objects collection insertions updates deletions are not really remembered between flushes. we just re-use the same lists for convenience.	WITHOUT_CLASSIFICATION	0.9761311145718243	WITHOUT_CLASSIFICATION	0.023868885428175682	DESIGN
add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9997207114569859	WITHOUT_CLASSIFICATION	2.7928854301402994E-4	DESIGN
continue loop	WITHOUT_CLASSIFICATION	0.9999545625950792	WITHOUT_CLASSIFICATION	4.543740492087719E-5	DESIGN
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999712604206811	WITHOUT_CLASSIFICATION	2.87395793188535E-5	DESIGN
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999712604206811	WITHOUT_CLASSIFICATION	2.87395793188535E-5	DESIGN
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.99980308125632	WITHOUT_CLASSIFICATION	1.9691874368010036E-4	DESIGN
the map of batch numbers to entityinsertaction lists	WITHOUT_CLASSIFICATION	0.9998476553332222	WITHOUT_CLASSIFICATION	1.5234466677784713E-4	DESIGN
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9996693010550248	WITHOUT_CLASSIFICATION	3.306989449752126E-4	DESIGN
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999047714950925	WITHOUT_CLASSIFICATION	9.52285049074221E-5	DESIGN
remove the current element from insertions. it will be added back later.	WITHOUT_CLASSIFICATION	0.9998387139912942	WITHOUT_CLASSIFICATION	1.612860087057521E-4	DESIGN
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9991451809243098	WITHOUT_CLASSIFICATION	8.548190756900971E-4	DESIGN
there is already an existing batch for this type of entity. check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9990931134085753	WITHOUT_CLASSIFICATION	9.068865914246696E-4	DESIGN
now rebuild the insertions list. there is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9988567373434077	WITHOUT_CLASSIFICATION	0.0011432626565922469	DESIGN
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9981424922616834	WITHOUT_CLASSIFICATION	0.0018575077383165626	DESIGN
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9986454415007301	WITHOUT_CLASSIFICATION	0.0013545584992698775	DESIGN
find the batch number associated with the current association if any.	WITHOUT_CLASSIFICATION	0.9999467401031651	WITHOUT_CLASSIFICATION	5.3259896834877615E-5	DESIGN
create a new batch for this type. the batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9964982017203194	WITHOUT_CLASSIFICATION	0.0035017982796806775	DESIGN
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.999024706399925	WITHOUT_CLASSIFICATION	9.752936000749367E-4	DESIGN
since this entity will now be processed in the latest possible batch we can be assured that it will come after all other associations there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9997672194294447	WITHOUT_CLASSIFICATION	2.3278057055535243E-4	DESIGN
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9991136443952787	WITHOUT_CLASSIFICATION	8.863556047212402E-4	DESIGN
not really necessary but good for consistency	WITHOUT_CLASSIFICATION	0.9990024754119714	WITHOUT_CLASSIFICATION	9.975245880286415E-4	DESIGN
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9993996934318644	WITHOUT_CLASSIFICATION	6.003065681356971E-4	DESIGN
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.99533224319503	WITHOUT_CLASSIFICATION	0.004667756804969955	DESIGN
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.999838133491118	WITHOUT_CLASSIFICATION	1.6186650888187093E-4	DESIGN
loaded entity instances by entityuniquekey	WITHOUT_CLASSIFICATION	0.999661411768989	WITHOUT_CLASSIFICATION	3.385882310109835E-4	DESIGN
identity map of entityentry instances by the entity instance	WITHOUT_CLASSIFICATION	0.9998760587671187	WITHOUT_CLASSIFICATION	1.239412328811832E-4	DESIGN
entity proxies by entitykey	WITHOUT_CLASSIFICATION	0.9999063757431522	WITHOUT_CLASSIFICATION	9.362425684775632E-5	DESIGN
snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9998609158630054	WITHOUT_CLASSIFICATION	1.3908413699452565E-4	DESIGN
identity map of array holder arrayholder instances by the array instance	WITHOUT_CLASSIFICATION	0.999952470506114	WITHOUT_CLASSIFICATION	4.752949388595215E-5	DESIGN
collection wrappers by the collectionkey key=collectionkey value=persistentcollection	WITHOUT_CLASSIFICATION	0.9989189505077374	WITHOUT_CLASSIFICATION	0.0010810494922626123	DESIGN
set of entitykeys of deleted objects	WITHOUT_CLASSIFICATION	0.9995517797219798	WITHOUT_CLASSIFICATION	4.4822027802013224E-4	DESIGN
properties that we have tried to load and not found in the database	WITHOUT_CLASSIFICATION	0.9993942339031269	WITHOUT_CLASSIFICATION	6.057660968730385E-4	DESIGN
a list of collection wrappers that were instantiating during result set processing that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9829305186765027	WITHOUT_CLASSIFICATION	0.01706948132349725	DESIGN
a container for collections we load up when the owning entity is not yet loaded for now this is purely transient!	WITHOUT_CLASSIFICATION	0.9997147548227149	WITHOUT_CLASSIFICATION	2.8524517728502764E-4	DESIGN
downgrade locks	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9998589617935358	WITHOUT_CLASSIFICATION	1.410382064642218E-4	DESIGN
unwrap the object	WITHOUT_CLASSIFICATION	0.9999802509061685	WITHOUT_CLASSIFICATION	1.9749093831463046E-5	DESIGN
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999800787060668	WITHOUT_CLASSIFICATION	1.992129393326594E-5	DESIGN
return the proxied object	WITHOUT_CLASSIFICATION	0.9999861991687868	WITHOUT_CLASSIFICATION	1.3800831213250729E-5	DESIGN
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999973067813303	WITHOUT_CLASSIFICATION	2.693218669652269E-6	DESIGN
early exit	WITHOUT_CLASSIFICATION	0.9999443594459024	WITHOUT_CLASSIFICATION	5.5640554097525976E-5	DESIGN
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9919164565213003	WITHOUT_CLASSIFICATION	0.008083543478699691	DESIGN
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9939600619969673	WITHOUT_CLASSIFICATION	0.0060399380030327085	DESIGN
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9821919299890609	WITHOUT_CLASSIFICATION	0.01780807001093901	DESIGN
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999973783668916	WITHOUT_CLASSIFICATION	2.621633108356057E-6	DESIGN
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9837133267781316	WITHOUT_CLASSIFICATION	0.016286673221868365	DESIGN
public boolean isnonexistant(entitykey key) {return nonexistantentitykeys.contains(key)}	WITHOUT_CLASSIFICATION	0.9998679226948352	WITHOUT_CLASSIFICATION	1.320773051648915E-4	DESIGN
public boolean isnonexistant(entityuniquekey key) {return nonexistententityuniquekeys.contains(key)}	WITHOUT_CLASSIFICATION	0.9998679226948352	WITHOUT_CLASSIFICATION	1.320773051648915E-4	DESIGN
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9998108566287157	WITHOUT_CLASSIFICATION	1.8914337128424303E-4	DESIGN
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9946554990863236	WITHOUT_CLASSIFICATION	0.005344500913676458	DESIGN
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9995153413588395	WITHOUT_CLASSIFICATION	4.8465864116056464E-4	DESIGN
otherwise the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999202606872292	WITHOUT_CLASSIFICATION	7.973931277085658E-5	DESIGN
adds remove as a sort-of alias for delete	WITHOUT_CLASSIFICATION	0.9972012765235124	WITHOUT_CLASSIFICATION	0.002798723476487549	DESIGN
bad cast	WITHOUT_CLASSIFICATION	0.999932709868188	WITHOUT_CLASSIFICATION	6.72901318118767E-5	DESIGN
return lhspersister.getsubclasspropertycolumnnames(property)	WITHOUT_CLASSIFICATION	0.9997737682021011	WITHOUT_CLASSIFICATION	2.2623179789898212E-4	DESIGN
property-refs for associations defined on a component are not supported so no need to slice	WITHOUT_CLASSIFICATION	0.9996509941807121	WITHOUT_CLASSIFICATION	3.490058192877764E-4	DESIGN
if there is no property-ref assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9995383868545136	WITHOUT_CLASSIFICATION	4.616131454863784E-4	DESIGN
handle a property-ref	WITHOUT_CLASSIFICATION	0.9996118279700426	WITHOUT_CLASSIFICATION	3.881720299574166E-4	DESIGN
nativesqlqueryreturn	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
final boolean forcecacherefresh	WITHOUT_CLASSIFICATION	0.9997968159321794	WITHOUT_CLASSIFICATION	2.0318406782048813E-4	DESIGN
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9810814203817169	WITHOUT_CLASSIFICATION	0.018918579618283117	DESIGN
this.forcecacherefresh = forcecacherefresh	WITHOUT_CLASSIFICATION	0.9999477159006084	WITHOUT_CLASSIFICATION	5.228409939150192E-5	DESIGN
hella important optimization!!!	WITHOUT_CLASSIFICATION	0.9996524272138037	WITHOUT_CLASSIFICATION	3.475727861963823E-4	DESIGN
return that.type.equals(type) && equalshelper.equals(that.value value)	WITHOUT_CLASSIFICATION	0.9997833148690037	WITHOUT_CLASSIFICATION	2.1668513099623032E-4	DESIGN
must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9993945478814591	WITHOUT_CLASSIFICATION	6.054521185408635E-4	DESIGN
take a snapshot	WITHOUT_CLASSIFICATION	0.9998565221741907	WITHOUT_CLASSIFICATION	1.4347782580920418E-4	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9998763689714246	WITHOUT_CLASSIFICATION	1.2363102857539367E-4	DESIGN
the owning entity may have been deleted and its identifier unset due to identifier-rollback in which case try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999615172336226	WITHOUT_CLASSIFICATION	3.8482766377299575E-5	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9999556259127694	WITHOUT_CLASSIFICATION	4.437408723056383E-5	DESIGN
we've been here before	WITHOUT_CLASSIFICATION	0.999982407732247	WITHOUT_CLASSIFICATION	1.7592267753001195E-5	DESIGN
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9993140749475954	WITHOUT_CLASSIFICATION	6.859250524045947E-4	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9999556259127694	WITHOUT_CLASSIFICATION	4.437408723056383E-5	DESIGN
if either its role changed	WITHOUT_CLASSIFICATION	0.999983901969061	WITHOUT_CLASSIFICATION	1.609803093904142E-5	DESIGN
or its key changed	WITHOUT_CLASSIFICATION	0.9999934753454152	WITHOUT_CLASSIFICATION	6.5246545847805815E-6	DESIGN
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9988460936023328	WITHOUT_CLASSIFICATION	0.0011539063976671888	DESIGN
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9958424073620356	WITHOUT_CLASSIFICATION	0.00415759263796435	DESIGN
force initialize!	WITHOUT_CLASSIFICATION	0.9999797953793567	WITHOUT_CLASSIFICATION	2.0204620643417693E-5	DESIGN
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999946586619679	WITHOUT_CLASSIFICATION	5.341338032148702E-6	DESIGN
attributes maintained between flush cycles	WITHOUT_CLASSIFICATION	0.9988578855172348	WITHOUT_CLASSIFICATION	0.0011421144827651857	DESIGN
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9998147053994039	WITHOUT_CLASSIFICATION	1.8529460059617337E-4	DESIGN
allow the collectionsnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9991238990929815	WITHOUT_CLASSIFICATION	8.761009070185032E-4	DESIGN
attributes used only during flush cycle	WITHOUT_CLASSIFICATION	0.996732583561237	WITHOUT_CLASSIFICATION	0.003267416438763017	DESIGN
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9997775458855273	WITHOUT_CLASSIFICATION	2.2245411447286152E-4	DESIGN
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9998245568822198	WITHOUT_CLASSIFICATION	1.7544311778016941E-4	DESIGN
during flush we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.972798304721335	WITHOUT_CLASSIFICATION	0.027201695278665124	DESIGN
if we instantiate a collection during the flush() process we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9911618356919242	WITHOUT_CLASSIFICATION	0.008838164308075764	DESIGN
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9998441602862485	WITHOUT_CLASSIFICATION	1.558397137516208E-4	DESIGN
a newly wrapped collection is not dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9974827313077975	WITHOUT_CLASSIFICATION	0.0025172686922024503	DESIGN
collection.cleardirty()	WITHOUT_CLASSIFICATION	0.9999577000400072	WITHOUT_CLASSIFICATION	4.229995999285693E-5	DESIGN
collection.cleardirty()	WITHOUT_CLASSIFICATION	0.9999577000400072	WITHOUT_CLASSIFICATION	4.229995999285693E-5	DESIGN
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999835842635884	WITHOUT_CLASSIFICATION	1.6415736411592245E-4	DESIGN
optimization	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
optimization optimization	WITHOUT_CLASSIFICATION	0.9999577000400072	WITHOUT_CLASSIFICATION	4.229995999285693E-5	DESIGN
re-snapshot	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9985378518447191	WITHOUT_CLASSIFICATION	0.0014621481552809107	DESIGN
note this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9951373977426897	WITHOUT_CLASSIFICATION	0.004862602257310361	DESIGN
memory optimization	WITHOUT_CLASSIFICATION	0.9999708690154286	WITHOUT_CLASSIFICATION	2.913098457131881E-5	DESIGN
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9994323538573552	WITHOUT_CLASSIFICATION	5.676461426448982E-4	DESIGN
copied from session	WITHOUT_CLASSIFICATION	0.9992421196737117	WITHOUT_CLASSIFICATION	7.578803262882788E-4	DESIGN
this should not happen since the dtd prevents it	WITHOUT_CLASSIFICATION	0.9997682350026491	WITHOUT_CLASSIFICATION	2.3176499735092163E-4	DESIGN
joinprocessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the sql ast. 'hasfiltercondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9554622740279465	WITHOUT_CLASSIFICATION	0.044537725972053584	DESIGN
the current join represents the join between a many-to-many association table and its "target" table. here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9988302820324652	WITHOUT_CLASSIFICATION	0.0011697179675347466	DESIGN
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9997756426281085	WITHOUT_CLASSIFICATION	2.2435737189152556E-4	DESIGN
values is not null and is checkable we'll look deeper	WITHOUT_CLASSIFICATION	0.9997606129382012	WITHOUT_CLASSIFICATION	2.3938706179891126E-4	DESIGN
for non null args check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9993697821107279	WITHOUT_CLASSIFICATION	6.302178892720917E-4	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999893741720434	WITHOUT_CLASSIFICATION	1.0625827956541346E-5	DESIGN
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999296767839426	WITHOUT_CLASSIFICATION	7.032321605733329E-5	DESIGN
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999088775516637	WITHOUT_CLASSIFICATION	9.112244833627087E-5	DESIGN
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9995533147839697	WITHOUT_CLASSIFICATION	4.4668521603029933E-4	DESIGN
do the test	WITHOUT_CLASSIFICATION	0.9999957552703904	WITHOUT_CLASSIFICATION	4.244729609644117E-6	DESIGN
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9998049308720832	WITHOUT_CLASSIFICATION	1.9506912791680735E-4	DESIGN
unwrap it	WITHOUT_CLASSIFICATION	0.9999330446755966	WITHOUT_CLASSIFICATION	6.695532440338001E-5	DESIGN
see if the entity is already bound to this session if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9938293871044853	WITHOUT_CLASSIFICATION	0.006170612895514615	DESIGN
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.999814197342251	WITHOUT_CLASSIFICATION	1.858026577490185E-4	DESIGN
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9994489091572737	WITHOUT_CLASSIFICATION	5.510908427263649E-4	DESIGN
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9991017211670172	WITHOUT_CLASSIFICATION	8.982788329828366E-4	DESIGN
we use the assumed value if there is one to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9996823816470191	WITHOUT_CLASSIFICATION	3.1761835298095244E-4	DESIGN
hit the database after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9993423119934828	WITHOUT_CLASSIFICATION	6.576880065172575E-4	DESIGN
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context so make some deeper checks	WITHOUT_CLASSIFICATION	0.996638964554885	WITHOUT_CLASSIFICATION	0.0033610354451149836	DESIGN
int count = 0	WITHOUT_CLASSIFICATION	0.9999966874113643	WITHOUT_CLASSIFICATION	3.312588635687747E-6	DESIGN
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999548827141393	WITHOUT_CLASSIFICATION	4.5117285860642735E-5	DESIGN
checkforend = false	WITHOUT_CLASSIFICATION	0.9999944371173493	WITHOUT_CLASSIFICATION	5.5628826507274735E-6	DESIGN
count++	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
end of array start filling again from start	WITHOUT_CLASSIFICATION	0.9996457462489075	WITHOUT_CLASSIFICATION	3.54253751092517E-4	DESIGN
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999234512558566	WITHOUT_CLASSIFICATION	7.654874414342067E-5	DESIGN
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9991479059650661	WITHOUT_CLASSIFICATION	8.520940349338877E-4	DESIGN
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999444628962334	WITHOUT_CLASSIFICATION	5.553710376660777E-5	DESIGN
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999224363751896	WITHOUT_CLASSIFICATION	7.756362481038793E-5	DESIGN
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999490247094522	WITHOUT_CLASSIFICATION	5.0975290547848766E-5	DESIGN
ignore this row of results! note the early exit	WITHOUT_CLASSIFICATION	0.9998476302912654	WITHOUT_CLASSIFICATION	1.523697087344772E-4	DESIGN
initialize this collection	WITHOUT_CLASSIFICATION	0.9989116913362498	WITHOUT_CLASSIFICATION	0.0010883086637501558	DESIGN
create one	WITHOUT_CLASSIFICATION	0.999952569476986	WITHOUT_CLASSIFICATION	4.7430523014004005E-5	DESIGN
warning can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9935171273346203	WITHOUT_CLASSIFICATION	0.006482872665379648	DESIGN
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999547003200259	WITHOUT_CLASSIFICATION	4.529967997404565E-5	DESIGN
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9977025559899565	WITHOUT_CLASSIFICATION	0.002297444010043413	DESIGN
some filters affecting the collection are enabled on the session so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9972273390867469	WITHOUT_CLASSIFICATION	0.002772660913253136	DESIGN
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9974301932287657	WITHOUT_CLASSIFICATION	0.002569806771234362	DESIGN
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972949148106927	WITHOUT_CLASSIFICATION	0.0027050851893073054	DESIGN
collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987526803112614	WITHOUT_CLASSIFICATION	0.0012473196887385265	DESIGN
simple cache of param metadata based on query string. ideally the original "user-supplied query" string should be used to retreive this metadata (i.e. not the para-list-expanded query string) to avoid unnecessary cache entries. used solely for caching param metadata for native-sql queries see getsqlparametermetadata() for a discussion as to why	WITHOUT_CLASSIFICATION	0.8894383724671194	WITHOUT_CLASSIFICATION	0.11056162753288058	DESIGN
the cache of the actual plans	WITHOUT_CLASSIFICATION	0.9999882222717204	WITHOUT_CLASSIFICATION	1.1777728279687439E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9998110032392955	WITHOUT_CLASSIFICATION	1.8899676070448587E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9998110032392955	WITHOUT_CLASSIFICATION	1.8899676070448587E-4	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9993814059793173	WITHOUT_CLASSIFICATION	6.185940206825982E-4	DESIGN
for native-sql queries the param metadata is determined outside any relation to a query plan because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9951543616158862	WITHOUT_CLASSIFICATION	0.004845638384113783	DESIGN
don't care	WITHOUT_CLASSIFICATION	0.9998782684489035	WITHOUT_CLASSIFICATION	1.217315510965176E-4	DESIGN
recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9974288558079786	WITHOUT_CLASSIFICATION	0.0025711441920214903	DESIGN
don't care	WITHOUT_CLASSIFICATION	0.9998782684489035	WITHOUT_CLASSIFICATION	1.217315510965176E-4	DESIGN
note firstrow is zero-based	WITHOUT_CLASSIFICATION	0.9999744098700455	WITHOUT_CLASSIFICATION	2.5590129954430044E-5	DESIGN
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999793498300882	WITHOUT_CLASSIFICATION	2.0650169911800084E-5	DESIGN
named parameter	WITHOUT_CLASSIFICATION	0.9997361599854879	WITHOUT_CLASSIFICATION	2.638400145121453E-4	DESIGN
could be either an ordinal or jpa-positional parameter	WITHOUT_CLASSIFICATION	0.9991478200290224	WITHOUT_CLASSIFICATION	8.521799709776433E-4	DESIGN
a peek ahead showed this as an jpa-positional parameter	WITHOUT_CLASSIFICATION	0.9834595440849717	WITHOUT_CLASSIFICATION	0.01654045591502828	DESIGN
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9912711807227563	WITHOUT_CLASSIFICATION	0.008728819277243624	DESIGN
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9998498887780936	WITHOUT_CLASSIFICATION	1.501112219064267E-4	DESIGN
perform the actual work	WITHOUT_CLASSIFICATION	0.9999698428468093	WITHOUT_CLASSIFICATION	3.0157153190669977E-5	DESIGN
if everything went ok commit the transaction and close the obtained connection handle	WITHOUT_CLASSIFICATION	0.9999173000641887	WITHOUT_CLASSIFICATION	8.26999358113067E-5	DESIGN
at some point the processing went bad so we need to 1) make sure the connection handle gets released 2) try to cleanup the jta context as much as possible	WITHOUT_CLASSIFICATION	0.983812066535637	WITHOUT_CLASSIFICATION	0.01618793346436295	DESIGN
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999857424883319	WITHOUT_CLASSIFICATION	1.4257511668142234E-5	DESIGN
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9854556745102228	WITHOUT_CLASSIFICATION	0.014544325489777266	DESIGN
saveorupdatecopy() is deprecated!	WITHOUT_CLASSIFICATION	0.999208758921163	WITHOUT_CLASSIFICATION	7.912410788369518E-4	DESIGN
collectionpersister should not be null but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9614459826290347	WITHOUT_CLASSIFICATION	0.03855401737096522	DESIGN
otherwise a null or brand new collection this will also (inefficiently) handle arrays which have no snapshot so we can't do any better processarrayornewcollection(collection type)	WITHOUT_CLASSIFICATION	0.9435285936750926	WITHOUT_CLASSIFICATION	0.056471406324907374	DESIGN
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9872395878090885	WITHOUT_CLASSIFICATION	0.01276041219091162	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999929005498752	WITHOUT_CLASSIFICATION	7.0994501248312784E-6	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999929005498752	WITHOUT_CLASSIFICATION	7.0994501248312784E-6	DESIGN
force a substitution!	WITHOUT_CLASSIFICATION	0.9999374720769236	WITHOUT_CLASSIFICATION	6.252792307643932E-5	DESIGN
the user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.998574412122137	WITHOUT_CLASSIFICATION	0.0014255878778630007	DESIGN
the database now holds a lock + the object is flushed from the cache so release the soft lock	WITHOUT_CLASSIFICATION	0.9981246836808707	WITHOUT_CLASSIFICATION	0.0018753163191292412	DESIGN
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.999934111654046	WITHOUT_CLASSIFICATION	6.58883459540304E-5	DESIGN
search for collections by reachability updating their role. we don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.8761297645407549	WITHOUT_CLASSIFICATION	0.12387023545924518	DESIGN
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.927359676425616	WITHOUT_CLASSIFICATION	0.07264032357438395	DESIGN
note we need to do the wrap here even if its not "dirty" because collections need wrapping but changes to _them_ don't dirty the container. also for versioned data we need to wrap before calling searchfordirtycollections	WITHOUT_CLASSIFICATION	0.9999736064667071	WITHOUT_CLASSIFICATION	2.639353329288374E-5	DESIGN
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999157826741678	WITHOUT_CLASSIFICATION	8.421732583217706E-5	DESIGN
grab its current state	WITHOUT_CLASSIFICATION	0.9999869532282036	WITHOUT_CLASSIFICATION	1.3046771796377025E-5	DESIGN
schedule the update note that we intentionally do _not_ pass in currentpersistentstate!	WITHOUT_CLASSIFICATION	0.9999782323552096	WITHOUT_CLASSIFICATION	2.1767644790495258E-5	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9990834186844667	WITHOUT_CLASSIFICATION	9.16581315533333E-4	DESIGN
give the interceptor a chance to process property values if the properties were modified by the interceptor we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9998463521482012	WITHOUT_CLASSIFICATION	1.5364785179878602E-4	DESIGN
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9997707403610671	WITHOUT_CLASSIFICATION	2.2925963893292888E-4	DESIGN
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9938966781448126	WITHOUT_CLASSIFICATION	0.0061033218551874695	DESIGN
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9998717298872846	WITHOUT_CLASSIFICATION	1.2827011271537633E-4	DESIGN
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9995962675076346	WITHOUT_CLASSIFICATION	4.0373249236534025E-4	DESIGN
give the interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999529462321863	WITHOUT_CLASSIFICATION	4.7053767813773924E-5	DESIGN
now we might need to recalculate the dirtyproperties array	WITHOUT_CLASSIFICATION	0.9982375834865537	WITHOUT_CLASSIFICATION	0.0017624165134464127	DESIGN
use the current version	WITHOUT_CLASSIFICATION	0.9999821526766761	WITHOUT_CLASSIFICATION	1.7847323323836526E-5	DESIGN
interceptor returned null so do the dirtycheck ourself if possible	WITHOUT_CLASSIFICATION	0.999928430604934	WITHOUT_CLASSIFICATION	7.15693950659663E-5	DESIGN
object loaded by update()	WITHOUT_CLASSIFICATION	0.9998930283296056	WITHOUT_CLASSIFICATION	1.0697167039443731E-4	DESIGN
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999810369172152	WITHOUT_CLASSIFICATION	1.896308278485548E-5	DESIGN
dirty check against the database snapshot if possible/necessary	WITHOUT_CLASSIFICATION	0.9999854567533897	WITHOUT_CLASSIFICATION	1.4543246610255306E-5	DESIGN
the interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9998780534802185	WITHOUT_CLASSIFICATION	1.2194651978142821E-4	DESIGN
even process null collections	WITHOUT_CLASSIFICATION	0.9999576601972405	WITHOUT_CLASSIFICATION	4.23398027594835E-5	DESIGN
get the id from the object	WITHOUT_CLASSIFICATION	0.9999703675182556	WITHOUT_CLASSIFICATION	2.9632481744391994E-5	DESIGN
always do an insert and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9966373144502755	WITHOUT_CLASSIFICATION	0.0033626855497245244	DESIGN
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9959751533282072	WITHOUT_CLASSIFICATION	0.004024846671792754	DESIGN
/ hhh-2378	WITHOUT_CLASSIFICATION	0.9999650754452732	WITHOUT_CLASSIFICATION	3.4924554726685986E-5	DESIGN
will result in a sql update	WITHOUT_CLASSIFICATION	0.999989100861116	WITHOUT_CLASSIFICATION	1.0899138883855393E-5	DESIGN
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999702486419476	WITHOUT_CLASSIFICATION	2.9751358052446E-5	DESIGN
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999720598753525	WITHOUT_CLASSIFICATION	2.7940124647450287E-5	DESIGN
refresh() does not pass an entityname	WITHOUT_CLASSIFICATION	0.9999221538768983	WITHOUT_CLASSIFICATION	7.78461231015807E-5	DESIGN
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9988548643659606	WITHOUT_CLASSIFICATION	0.0011451356340394226	DESIGN
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9998992492165025	WITHOUT_CLASSIFICATION	1.0075078349746547E-4	DESIGN
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999292498642472	WITHOUT_CLASSIFICATION	7.075013575275502E-5	DESIGN
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999883141251318	WITHOUT_CLASSIFICATION	1.1685874868313578E-5	DESIGN
this object was already loaded	WITHOUT_CLASSIFICATION	0.9997667445684806	WITHOUT_CLASSIFICATION	2.3325543151935885E-4	DESIGN
entity was found in second-level cache	WITHOUT_CLASSIFICATION	0.9993635052143324	WITHOUT_CLASSIFICATION	6.364947856676644E-4	DESIGN
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9985444250411334	WITHOUT_CLASSIFICATION	0.001455574958866666	DESIGN
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9993532377444868	WITHOUT_CLASSIFICATION	6.467622555132691E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995125289262288	WITHOUT_CLASSIFICATION	4.874710737712452E-4	DESIGN
some statistics	WITHOUT_CLASSIFICATION	0.9999675070469061	WITHOUT_CLASSIFICATION	3.249295309394371E-5	DESIGN
safe from concurrent modification because of how entrylist() is implemented on identitymap	WITHOUT_CLASSIFICATION	0.99860806292089	WITHOUT_CLASSIFICATION	0.001391937079110071	DESIGN
initialize dirty flags for arrays + collections with composite elements and reset reached doupdate etc.	WITHOUT_CLASSIFICATION	0.999829581475025	WITHOUT_CLASSIFICATION	1.7041852497496325E-4	DESIGN
among other things updatereachables() will recursively load all collections that are moving roles. this might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9617702978648607	WITHOUT_CLASSIFICATION	0.03822970213513934	DESIGN
so this needs to be safe from concurrent modification problems. it is safe because of how identitymap implements entryset()	WITHOUT_CLASSIFICATION	0.8396777430913659	WITHOUT_CLASSIFICATION	0.1603222569086342	DESIGN
update the status of the object and if necessary schedule an update	WITHOUT_CLASSIFICATION	0.9997772327616085	WITHOUT_CLASSIFICATION	2.2276723839152854E-4	DESIGN
schedule updates to collections	WITHOUT_CLASSIFICATION	0.9992842699451286	WITHOUT_CLASSIFICATION	7.157300548713875E-4	DESIGN
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9880388032865477	WITHOUT_CLASSIFICATION	0.011961196713452344	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995125289262288	WITHOUT_CLASSIFICATION	4.874710737712452E-4	DESIGN
the database has changed now so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9998948018462633	WITHOUT_CLASSIFICATION	1.0519815373670145E-4	DESIGN
if the collection is dereferenced remove from the session cache iter.remove() does not work since the entryset is not backed by the set	WITHOUT_CLASSIFICATION	0.9936423281546817	WITHOUT_CLASSIFICATION	0.006357671845318306	DESIGN
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.999247871300873	WITHOUT_CLASSIFICATION	7.521286991269182E-4	DESIGN
get a snapshot	WITHOUT_CLASSIFICATION	0.9999686081636318	WITHOUT_CLASSIFICATION	3.139183636825854E-5	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
key is an entity involved with the operation performed by the listener value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9988142502898812	WITHOUT_CLASSIFICATION	0.001185749710118791	DESIGN
early exit!!!	WITHOUT_CLASSIFICATION	0.9999678342597291	WITHOUT_CLASSIFICATION	3.2165740270931774E-5	DESIGN
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9995415333293561	WITHOUT_CLASSIFICATION	4.584666706438039E-4	DESIGN
before any callbacks etc so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9984936641156784	WITHOUT_CLASSIFICATION	0.001506335884321593	DESIGN
ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9992698876073486	WITHOUT_CLASSIFICATION	7.301123926515126E-4	DESIGN
typefactory.deepcopy( currentstate proptypes persister.getpropertyupdateability() deletedstate session )	WITHOUT_CLASSIFICATION	0.9994631776782642	WITHOUT_CLASSIFICATION	5.368223217358044E-4	DESIGN
cascade-delete to collections before the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9997416354376366	WITHOUT_CLASSIFICATION	2.5836456236339345E-4	DESIGN
cascade-delete to many-to-one after the parent was deleted	WITHOUT_CLASSIFICATION	0.9997984223256754	WITHOUT_CLASSIFICATION	2.0157767432454576E-4	DESIGN
if it is an initialized proxy let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9983137189785832	WITHOUT_CLASSIFICATION	0.0016862810214167794	DESIGN
assign the requested id to the proxy before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999678273102866	WITHOUT_CLASSIFICATION	3.2172689713402984E-5	DESIGN
an uninitialized proxy noop don't even need to return an id since it is never a save()	WITHOUT_CLASSIFICATION	0.9996585561692735	WITHOUT_CLASSIFICATION	3.4144383072645424E-4	DESIGN
initialize properties of the event	WITHOUT_CLASSIFICATION	0.9992956796759259	WITHOUT_CLASSIFICATION	7.043203240741893E-4	DESIGN
return the id in the event object	WITHOUT_CLASSIFICATION	0.9996951071448213	WITHOUT_CLASSIFICATION	3.048928551785501E-4	DESIGN
transient or deleted	WITHOUT_CLASSIFICATION	0.9999829169706566	WITHOUT_CLASSIFICATION	1.708302934341669E-5	DESIGN
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9995164574851778	WITHOUT_CLASSIFICATION	4.8354251482229086E-4	DESIGN
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.7105912525230799	WITHOUT_CLASSIFICATION	0.28940874747692014	DESIGN
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9993100148110254	WITHOUT_CLASSIFICATION	6.899851889745931E-4	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9973971795960042	WITHOUT_CLASSIFICATION	0.002602820403995795	DESIGN
cachedstate	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
assume true since we don't really know and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999439097159284	WITHOUT_CLASSIFICATION	5.609028407155843E-5	DESIGN
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9998985435148825	WITHOUT_CLASSIFICATION	1.0145648511754959E-4	DESIGN
if the collection belonged to a different entity clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9997907314782171	WITHOUT_CLASSIFICATION	2.0926852178296276E-4	DESIGN
log.debug( "calling onload()" )	WITHOUT_CLASSIFICATION	0.9993677354379846	WITHOUT_CLASSIFICATION	6.322645620153196E-4	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9999678342597291	WITHOUT_CLASSIFICATION	3.2165740270931774E-5	DESIGN
note performexecutions() clears all collectionxxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9994656861577307	WITHOUT_CLASSIFICATION	5.343138422693652E-4	DESIGN
if no array holder we found an unwrappered array (this can't occur because we now always call wrap() before getting to here) return (ah==null) ? true searchfordirtycollections(ah type)	WITHOUT_CLASSIFICATION	0.9996060092995035	WITHOUT_CLASSIFICATION	3.9399070049655837E-4	DESIGN
if not wrappered yet its dirty (this can't occur because we now always call wrap() before getting to here) return ( ! (obj instanceof persistentcollection) ) ? true searchfordirtycollections( (persistentcollection) obj type )	WITHOUT_CLASSIFICATION	0.997784367818609	WITHOUT_CLASSIFICATION	0.002215632181390858	DESIGN
we need to check even if it was not initialized because of delayed adds!	WITHOUT_CLASSIFICATION	0.9995852150966111	WITHOUT_CLASSIFICATION	4.147849033888431E-4	DESIGN
note early exit!	WITHOUT_CLASSIFICATION	0.9999897328879522	WITHOUT_CLASSIFICATION	1.0267112047767442E-5	DESIGN
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9993221936687804	WITHOUT_CLASSIFICATION	6.778063312196241E-4	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9999678342597291	WITHOUT_CLASSIFICATION	3.2165740270931774E-5	DESIGN
check the persistence context for an entry relating to this entity to be merged	WITHOUT_CLASSIFICATION	0.9987035993428341	WITHOUT_CLASSIFICATION	0.0012964006571658765	DESIGN
we have specialized case of a detached entity from the perspective of the merge operation. specifically we have an incoming entity instance which has a corresponding entry in the current persistence context but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999337303629997	WITHOUT_CLASSIFICATION	6.626963700033387E-5	DESIGN
deleted	WITHOUT_CLASSIFICATION	0.999958000709616	WITHOUT_CLASSIFICATION	4.199929038400298E-5	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9999834786135468	WITHOUT_CLASSIFICATION	1.6521386453266564E-5	DESIGN
cascade first so that all unsaved objects get their copy created before we actually copy cascadeonmerge(event persister entity copycache cascades.cascade_before_merge)	WITHOUT_CLASSIFICATION	0.9999748940149746	WITHOUT_CLASSIFICATION	2.510598502544173E-5	DESIGN
this bit is only really absolutely necessary for handling requestedid but is also good if we merge multiple object graphs since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9834630052114899	WITHOUT_CLASSIFICATION	0.016536994788510197	DESIGN
continue we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999613355824379	WITHOUT_CLASSIFICATION	3.8664417562088694E-5	DESIGN
cascade first so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999846027692169	WITHOUT_CLASSIFICATION	1.539723078308191E-5	DESIGN
check that entity id = requestedid	WITHOUT_CLASSIFICATION	0.9999355390502191	WITHOUT_CLASSIFICATION	6.446094978083211E-5	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9999834786135468	WITHOUT_CLASSIFICATION	1.6521386453266564E-5	DESIGN
we got here because we assumed that an instance with an assigned id was detached when it was really persistent	WITHOUT_CLASSIFICATION	0.9996047962150311	WITHOUT_CLASSIFICATION	3.952037849689205E-4	DESIGN
cascade first so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999846027692169	WITHOUT_CLASSIFICATION	1.539723078308191E-5	DESIGN
copyvalues works by reflection so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9958745313193038	WITHOUT_CLASSIFICATION	0.004125468680696241	DESIGN
early exit	WITHOUT_CLASSIFICATION	0.9999443594459024	WITHOUT_CLASSIFICATION	5.5640554097525976E-5	DESIGN
source.getbatcher().executebatch() found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9991273360526579	WITHOUT_CLASSIFICATION	8.726639473420827E-4	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9990834186844667	WITHOUT_CLASSIFICATION	9.16581315533333E-4	DESIGN
now done in entityidentityinsertaction persister.setidentifier( entity id source.getentitymode() )	WITHOUT_CLASSIFICATION	0.9988393444699823	WITHOUT_CLASSIFICATION	0.0011606555300176565	DESIGN
source.getpersistencecontext().removenonexist( new entitykey( id persister source.getentitymode() ) )	WITHOUT_CLASSIFICATION	0.9987898419110423	WITHOUT_CLASSIFICATION	0.0012101580889577498	DESIGN
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.999986985364229	WITHOUT_CLASSIFICATION	1.3014635770956807E-5	DESIGN
cascade-save to many-to-one before the parent is saved	WITHOUT_CLASSIFICATION	0.9998537323518729	WITHOUT_CLASSIFICATION	1.4626764812699305E-4	DESIGN
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999624784966835	WITHOUT_CLASSIFICATION	3.7521503316390304E-5	DESIGN
the object is persistent	WITHOUT_CLASSIFICATION	0.999952921402356	WITHOUT_CLASSIFICATION	4.7078597643877555E-5	DESIGN
the entity is associated with the session so check its status	WITHOUT_CLASSIFICATION	0.9999624337194282	WITHOUT_CLASSIFICATION	3.756628057184797E-5	DESIGN
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999436486516481	WITHOUT_CLASSIFICATION	5.635134835191045E-5	DESIGN
ie. e.status==deleted	WITHOUT_CLASSIFICATION	0.9999577000400072	WITHOUT_CLASSIFICATION	4.229995999285693E-5	DESIGN
the object is transient or detached	WITHOUT_CLASSIFICATION	0.999668830192252	WITHOUT_CLASSIFICATION	3.3116980774798577E-4	DESIGN
note early exit!	WITHOUT_CLASSIFICATION	0.9999897328879522	WITHOUT_CLASSIFICATION	1.0267112047767442E-5	DESIGN
private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9985126123675673	WITHOUT_CLASSIFICATION	0.0014873876324327671	DESIGN
first try to find a matching constructor accepting a violatedconstraintnameextracter param	WITHOUT_CLASSIFICATION	0.9992626232041386	WITHOUT_CLASSIFICATION	7.373767958614354E-4	DESIGN
eat it and try next	WITHOUT_CLASSIFICATION	0.9998918230428517	WITHOUT_CLASSIFICATION	1.081769571482729E-4	DESIGN
otherwise try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9997759704272109	WITHOUT_CLASSIFICATION	2.240295727890638E-4	DESIGN
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9954037593054537	WITHOUT_CLASSIFICATION	0.004596240694546377	DESIGN
collectionpropertymapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9992177040206933	WITHOUT_CLASSIFICATION	7.82295979306697E-4	DESIGN
remove initial " "	WITHOUT_CLASSIFICATION	0.9999343049553443	WITHOUT_CLASSIFICATION	6.56950446556662E-5	DESIGN
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999060239768643	WITHOUT_CLASSIFICATION	9.397602313565493E-5	DESIGN
beforeclasstokens.add("new") definitely don't have this!!	WITHOUT_CLASSIFICATION	0.9996757743070046	WITHOUT_CLASSIFICATION	3.242256929954526E-4	DESIGN
notafterclasstokens.add("")	WITHOUT_CLASSIFICATION	0.9999577000400072	WITHOUT_CLASSIFICATION	4.229995999285693E-5	DESIGN
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9987431495827434	WITHOUT_CLASSIFICATION	0.0012568504172566905	DESIGN
update last non-whitespace token if necessary	WITHOUT_CLASSIFICATION	0.9993849479114569	WITHOUT_CLASSIFICATION	6.150520885430769E-4	DESIGN
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9993498812925214	WITHOUT_CLASSIFICATION	6.501187074785228E-4	DESIGN
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9988560245395957	WITHOUT_CLASSIFICATION	0.001143975460404311	DESIGN
note this!!	WITHOUT_CLASSIFICATION	0.9999895353938486	WITHOUT_CLASSIFICATION	1.0464606151488388E-5	DESIGN
error message constants.	WITHOUT_CLASSIFICATION	0.9999260681327239	WITHOUT_CLASSIFICATION	7.393186727610557E-5	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997108459429854	WITHOUT_CLASSIFICATION	2.891540570145294E-4	DESIGN
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997161640645841	WITHOUT_CLASSIFICATION	2.8383593541596693E-4	DESIGN
handle collection-fiter compilation. important note this is modifying the input (hql) tree not the output tree!	WITHOUT_CLASSIFICATION	0.9991954944223217	WITHOUT_CLASSIFICATION	8.045055776782385E-4	DESIGN
show the modified ast.	WITHOUT_CLASSIFICATION	0.9999989661147016	WITHOUT_CLASSIFICATION	1.0338852984281205E-6	DESIGN
create a parameter specification for the collection filter	WITHOUT_CLASSIFICATION	0.9745916236366964	WITHOUT_CLASSIFICATION	0.02540837636330373	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9999882805389055	WITHOUT_CLASSIFICATION	1.1719461094464552E-5	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9999882805389055	WITHOUT_CLASSIFICATION	1.1719461094464552E-5	DESIGN
get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9995841252996706	WITHOUT_CLASSIFICATION	4.1587470032941354E-4	DESIGN
the path ast should be a dotnode and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9994369132150367	WITHOUT_CLASSIFICATION	5.630867849632763E-4	DESIGN
tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999054426612854	WITHOUT_CLASSIFICATION	9.455733871456434E-5	DESIGN
re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9993632064363726	WITHOUT_CLASSIFICATION	6.367935636274614E-4	DESIGN
don't forget to resolve the argument! resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9992903875915672	WITHOUT_CLASSIFICATION	7.096124084328406E-4	DESIGN
resolve everything up to this dot but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9996805975134283	WITHOUT_CLASSIFICATION	3.194024865717865E-4	DESIGN
should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9992014950807072	WITHOUT_CLASSIFICATION	7.985049192928688E-4	DESIGN
was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9997670933099962	WITHOUT_CLASSIFICATION	2.3290669000370875E-4	DESIGN
attach any mapping-defined "order by" fragments	WITHOUT_CLASSIFICATION	0.999693835011624	WITHOUT_CLASSIFICATION	3.061649883759545E-4	DESIGN
use the explicitly declared select expression determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9995993342341573	WITHOUT_CLASSIFICATION	4.006657658428114E-4	DESIGN
after that process the joins. invoke a delegate to do the work as this is farily complex.	WITHOUT_CLASSIFICATION	0.982887516001433	WITHOUT_CLASSIFICATION	0.017112483998566987	DESIGN
make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9987714163065237	WITHOUT_CLASSIFICATION	0.001228583693476305	DESIGN
we need to generate ids as part of this bulk insert. note that this is only supported for sequence-style generators and post-insert-style generators basically only in-db generators	WITHOUT_CLASSIFICATION	0.9976262153691009	WITHOUT_CLASSIFICATION	0.002373784630899098	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9999882805389055	WITHOUT_CLASSIFICATION	1.1719461094464552E-5	DESIGN
we need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9988889278838885	WITHOUT_CLASSIFICATION	0.001111072116111563	DESIGN
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.996440281938141	WITHOUT_CLASSIFICATION	0.003559718061858848	DESIGN
this is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9948391382348821	WITHOUT_CLASSIFICATION	0.005160861765117873	DESIGN
generate implicit joins only if necessary.	WITHOUT_CLASSIFICATION	0.9997317576140786	WITHOUT_CLASSIFICATION	2.6824238592144494E-4	DESIGN
notify the from element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9977538414155483	WITHOUT_CLASSIFICATION	0.0022461585844516896	DESIGN
turn off includesubclasses on all fromelements.	WITHOUT_CLASSIFICATION	0.9998021998884046	WITHOUT_CLASSIFICATION	1.9780011159543985E-4	DESIGN
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9995422916483939	WITHOUT_CLASSIFICATION	4.577083516061249E-4	DESIGN
use the delegate resolve identifiers as from element aliases.	WITHOUT_CLASSIFICATION	0.9999193632536167	WITHOUT_CLASSIFICATION	8.063674638326962E-5	DESIGN
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9952715299321666	WITHOUT_CLASSIFICATION	0.004728470067833329	DESIGN
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9976131874548758	WITHOUT_CLASSIFICATION	0.0023868125451241414	DESIGN
make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9977070391577101	WITHOUT_CLASSIFICATION	0.0022929608422899185	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997108459429854	WITHOUT_CLASSIFICATION	2.891540570145294E-4	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9999882805389055	WITHOUT_CLASSIFICATION	1.1719461094464552E-5	DESIGN
--commented out by inspection (12/11/04 1056 am) int getwarningcount()	WITHOUT_CLASSIFICATION	0.9996856468457994	WITHOUT_CLASSIFICATION	3.143531542005476E-4	DESIGN
alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9993544357293346	WITHOUT_CLASSIFICATION	6.455642706654467E-4	DESIGN
switch	WITHOUT_CLASSIFICATION	0.9999440408376576	WITHOUT_CLASSIFICATION	5.5959162342286726E-5	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9997091793109238	WITHOUT_CLASSIFICATION	2.9082068907617623E-4	DESIGN
just do the regular thing if you can't find the ctor your ast must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9995240113278937	WITHOUT_CLASSIFICATION	4.759886721063335E-4	DESIGN
initialize sql nodes here.	WITHOUT_CLASSIFICATION	0.999909255518285	WITHOUT_CLASSIFICATION	9.074448171498317E-5	DESIGN
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996851590599634	WITHOUT_CLASSIFICATION	3.1484094003662996E-4	DESIGN
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9998806206714227	WITHOUT_CLASSIFICATION	1.1937932857729193E-4	DESIGN
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999006772747098	WITHOUT_CLASSIFICATION	9.932272529023192E-5	DESIGN
--- inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9993217381866755	WITHOUT_CLASSIFICATION	6.782618133245308E-4	DESIGN
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999699088021781	WITHOUT_CLASSIFICATION	3.0091197821984986E-5	DESIGN
/	WITHOUT_CLASSIFICATION	0.9999650754452732	WITHOUT_CLASSIFICATION	3.4924554726685986E-5	DESIGN
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9996852888424477	WITHOUT_CLASSIFICATION	3.1471115755229534E-4	DESIGN
again both should be fromelements	WITHOUT_CLASSIFICATION	0.9985939266486521	WITHOUT_CLASSIFICATION	0.0014060733513478196	DESIGN
note firstrow is zero-based	WITHOUT_CLASSIFICATION	0.9999744098700455	WITHOUT_CLASSIFICATION	2.5590129954430044E-5	DESIGN
right represents a joins originating from left or both right and left reprersent joins originating from the same fromelement	WITHOUT_CLASSIFICATION	0.9939815635521779	WITHOUT_CLASSIFICATION	0.006018436447822075	DESIGN
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9992918464090973	WITHOUT_CLASSIFICATION	7.081535909025965E-4	DESIGN
right represents a joins originating from left	WITHOUT_CLASSIFICATION	0.9948974418370864	WITHOUT_CLASSIFICATION	0.005102558162913595	DESIGN
all clear	WITHOUT_CLASSIFICATION	0.9999737260231919	WITHOUT_CLASSIFICATION	2.6273976808108992E-5	DESIGN
ignore the token class name parameter and use a specific token class.	WITHOUT_CLASSIFICATION	0.9867674636952587	WITHOUT_CLASSIFICATION	0.013232536304741253	DESIGN
overriden to avoid system.exit	WITHOUT_CLASSIFICATION	0.9999222677935327	WITHOUT_CLASSIFICATION	7.773220646736731E-5	DESIGN
overriden to avoid system.exit	WITHOUT_CLASSIFICATION	0.9999222677935327	WITHOUT_CLASSIFICATION	7.773220646736731E-5	DESIGN
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9982500498170562	WITHOUT_CLASSIFICATION	0.0017499501829437711	DESIGN
don't care about other param types here just those explicitly user-defined	WITHOUT_CLASSIFICATION	0.9928774359583197	WITHOUT_CLASSIFICATION	0.007122564041680334	DESIGN
if the query is already compiled skip the compilation.	WITHOUT_CLASSIFICATION	0.9999572180975869	WITHOUT_CLASSIFICATION	4.2781902413065134E-5	DESIGN
remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9998691198222676	WITHOUT_CLASSIFICATION	1.3088017773246998E-4	DESIGN
phase 1 parse the hql into an ast.	WITHOUT_CLASSIFICATION	0.9980943015105568	WITHOUT_CLASSIFICATION	0.0019056984894432068	DESIGN
phase 2 analyze the hql ast and produce an sql ast.	WITHOUT_CLASSIFICATION	0.999966807200705	WITHOUT_CLASSIFICATION	3.319279929497322E-5	DESIGN
phase 3 generate the sql.	WITHOUT_CLASSIFICATION	0.9999785880374783	WITHOUT_CLASSIFICATION	2.141196252174336E-5	DESIGN
we do not actually propogate antlrexceptions as a cause so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9969753034696305	WITHOUT_CLASSIFICATION	0.0030246965303695277	DESIGN
we do not actually propogate antlrexceptions as a cause so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9969753034696305	WITHOUT_CLASSIFICATION	0.0030246965303695277	DESIGN
only needed during compilation phase	WITHOUT_CLASSIFICATION	0.999762664975767	WITHOUT_CLASSIFICATION	2.373350242330574E-4	DESIGN
transform the tree.	WITHOUT_CLASSIFICATION	0.9999881828600509	WITHOUT_CLASSIFICATION	1.1817139949099324E-5	DESIGN
parse the query string into an hql ast.	WITHOUT_CLASSIFICATION	0.9984420999719312	WITHOUT_CLASSIFICATION	0.0015579000280686833	DESIGN
delegate to the queryloader	WITHOUT_CLASSIFICATION	0.9999724126028405	WITHOUT_CLASSIFICATION	2.7587397159443816E-5	DESIGN
delegate to the queryloader	WITHOUT_CLASSIFICATION	0.9999724126028405	WITHOUT_CLASSIFICATION	2.7587397159443816E-5	DESIGN
delegate to the queryloader	WITHOUT_CLASSIFICATION	0.9999724126028405	WITHOUT_CLASSIFICATION	2.7587397159443816E-5	DESIGN
note ( max - 1 ) because first is zero-based while max is not	WITHOUT_CLASSIFICATION	0.9997526778639513	WITHOUT_CLASSIFICATION	2.473221360487923E-4	DESIGN
-- package local methods for the queryloader delegate --	WITHOUT_CLASSIFICATION	0.9861126871346945	WITHOUT_CLASSIFICATION	0.01388731286530555	DESIGN
if there are no collection fetches then no further checks are needed	WITHOUT_CLASSIFICATION	0.9992193826597446	WITHOUT_CLASSIFICATION	7.806173402553832E-4	DESIGN
a shallow query is ok (although technically there should be no fetching here)	WITHOUT_CLASSIFICATION	0.998726755509403	WITHOUT_CLASSIFICATION	0.0012732444905969604	DESIGN
should be the first but just to be safe	WITHOUT_CLASSIFICATION	0.9997320393207377	WITHOUT_CLASSIFICATION	2.679606792622309E-4	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9999882805389055	WITHOUT_CLASSIFICATION	1.1719461094464552E-5	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9999882805389055	WITHOUT_CLASSIFICATION	1.1719461094464552E-5	DESIGN
impl note allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9914577026613115	WITHOUT_CLASSIFICATION	0.008542297338688583	DESIGN
otherwise we have a non-scalar select with defined collection fetch(es). make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9973594076899006	WITHOUT_CLASSIFICATION	0.0026405923100993865	DESIGN
this is not strictly true. we actually just need to make sure that it is ordered by root-entity pk and that that order-by comes before any non-root-entity ordering	WITHOUT_CLASSIFICATION	0.729368898054386	WITHOUT_CLASSIFICATION	0.2706311019456139	DESIGN
paramtranslations = new parametertranslationsimpl( collectedparameterspecifications )	WITHOUT_CLASSIFICATION	0.9999237845789505	WITHOUT_CLASSIFICATION	7.621542104951775E-5	DESIGN
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9953361126284279	WITHOUT_CLASSIFICATION	0.0046638873715720746	DESIGN
igndore it	WITHOUT_CLASSIFICATION	0.9999330446755966	WITHOUT_CLASSIFICATION	6.695532440338001E-5	DESIGN
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9997011615142337	WITHOUT_CLASSIFICATION	2.988384857662563E-4	DESIGN
[jsd] the fix for hhh-558	WITHOUT_CLASSIFICATION	0.9995571475882226	WITHOUT_CLASSIFICATION	4.4285241177743337E-4	DESIGN
if the token can tell us if it could be an identifier	WITHOUT_CLASSIFICATION	0.9999228035306598	WITHOUT_CLASSIFICATION	7.719646934019745E-5	DESIGN
and the expected token type was an identifier then	WITHOUT_CLASSIFICATION	0.9996504153276146	WITHOUT_CLASSIFICATION	3.495846723854518E-4	DESIGN
use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999350824888072	WITHOUT_CLASSIFICATION	6.49175111926561E-5	DESIGN
add the token to the ast.	WITHOUT_CLASSIFICATION	0.9999919127212795	WITHOUT_CLASSIFICATION	8.08727872046924E-6	DESIGN
(not (eq a b) ) => (ne a b)	WITHOUT_CLASSIFICATION	0.9999263188082211	WITHOUT_CLASSIFICATION	7.368119177883358E-5	DESIGN
(not (ne a b) ) => (eq a b)	WITHOUT_CLASSIFICATION	0.9999263188082211	WITHOUT_CLASSIFICATION	7.368119177883358E-5	DESIGN
(not (lt a b) ) => (ge a b)	WITHOUT_CLASSIFICATION	0.9999263188082211	WITHOUT_CLASSIFICATION	7.368119177883358E-5	DESIGN
(not (ge a b) ) => (lt a b)	WITHOUT_CLASSIFICATION	0.9999263188082211	WITHOUT_CLASSIFICATION	7.368119177883358E-5	DESIGN
(not (le a b) ) => (gt a b)	WITHOUT_CLASSIFICATION	0.9999263188082211	WITHOUT_CLASSIFICATION	7.368119177883358E-5	DESIGN
(not (like a b) ) => (not_like a b)	WITHOUT_CLASSIFICATION	0.9991956222339714	WITHOUT_CLASSIFICATION	8.043777660285645E-4	DESIGN
(not (not_like a b) ) => (like a b)	WITHOUT_CLASSIFICATION	0.9991956222339714	WITHOUT_CLASSIFICATION	8.043777660285645E-4	DESIGN
(not (is_not_null a b) ) => (is_null a b)	WITHOUT_CLASSIFICATION	0.99927274466879	WITHOUT_CLASSIFICATION	7.27255331209935E-4	DESIGN
(not (between a b) ) => (not_between a b)	WITHOUT_CLASSIFICATION	0.99927274466879	WITHOUT_CLASSIFICATION	7.27255331209935E-4	DESIGN
initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9996466874855461	WITHOUT_CLASSIFICATION	3.5331251445386774E-4	DESIGN
overriden to avoid system.exit	WITHOUT_CLASSIFICATION	0.9999222677935327	WITHOUT_CLASSIFICATION	7.773220646736731E-5	DESIGN
if if otherwise handle the error normally.	WITHOUT_CLASSIFICATION	0.999519509887942	WITHOUT_CLASSIFICATION	4.804901120579585E-4	DESIGN
(not (not_between a b) ) => (between a b)	WITHOUT_CLASSIFICATION	0.99927274466879	WITHOUT_CLASSIFICATION	7.27255331209935E-4	DESIGN
this can never happen because this rule will always eliminate the child not.case notreturn x.getfirstchild() (not (not x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999678173773516	WITHOUT_CLASSIFICATION	3.218262264834596E-5	DESIGN
just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999749391694263	WITHOUT_CLASSIFICATION	2.506083057379593E-5	DESIGN
(eq null b) => (is_null b)	WITHOUT_CLASSIFICATION	0.9999397364952016	WITHOUT_CLASSIFICATION	6.0263504798489314E-5	DESIGN
(eq a null) => (is_null a)	WITHOUT_CLASSIFICATION	0.9999273086707162	WITHOUT_CLASSIFICATION	7.269132928381176E-5	DESIGN
note because we're using astutil.createparent() the tree must be created from the bottom up. is empty x => (exists (query (select_from (from x) ) ) )	WITHOUT_CLASSIFICATION	0.9997153780202223	WITHOUT_CLASSIFICATION	2.8462197977776487E-4	DESIGN
add not if it's negated.	WITHOUT_CLASSIFICATION	0.999990718153971	WITHOUT_CLASSIFICATION	9.281846029021345E-6	DESIGN
create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9996108416042384	WITHOUT_CLASSIFICATION	3.8915839576158867E-4	DESIGN
case 1 multi token keywords group by and order by the next token ( lt(2) ) should be 'by' otherwise this is just an ident.	WITHOUT_CLASSIFICATION	0.9837409878888409	WITHOUT_CLASSIFICATION	0.016259012111159106	DESIGN
case 2 the current token is after from and before '.'.	WITHOUT_CLASSIFICATION	0.9999040161620204	WITHOUT_CLASSIFICATION	9.598383797961172E-5	DESIGN
this handles hhh-354 where there is a strange property name in a where clause. if the lookahead contains a dot then something that isn't an ident	WITHOUT_CLASSIFICATION	0.9982257918210693	WITHOUT_CLASSIFICATION	0.0017742081789308003	DESIGN
see if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9998789660172188	WITHOUT_CLASSIFICATION	1.2103398278116953E-4	DESIGN
set it!	WITHOUT_CLASSIFICATION	0.9999180619800109	WITHOUT_CLASSIFICATION	8.193801998905883E-5	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999474365512322	WITHOUT_CLASSIFICATION	5.256344876779287E-5	DESIGN
strip the " where "	WITHOUT_CLASSIFICATION	0.9999594775979287	WITHOUT_CLASSIFICATION	4.05224020712554E-5	DESIGN
don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9988294713524243	WITHOUT_CLASSIFICATION	0.0011705286475757937	DESIGN
at the very least cleanup the data )	WITHOUT_CLASSIFICATION	0.999129314520932	WITHOUT_CLASSIFICATION	8.706854790678765E-4	DESIGN
first save off the pertinent ids as the return value	WITHOUT_CLASSIFICATION	0.9999885722924786	WITHOUT_CLASSIFICATION	1.1427707521516949E-5	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999102783726538	WITHOUT_CLASSIFICATION	8.972162734624932E-5	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999102783726538	WITHOUT_CLASSIFICATION	8.972162734624932E-5	DESIGN
start performing the updates	WITHOUT_CLASSIFICATION	0.9999816504783702	WITHOUT_CLASSIFICATION	1.8349521629785505E-5	DESIGN
first save off the pertinent ids saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999768727314172	WITHOUT_CLASSIFICATION	2.3127268582794216E-5	DESIGN
start performing the deletes	WITHOUT_CLASSIFICATION	0.9999816850010653	WITHOUT_CLASSIFICATION	1.831499893467723E-5	DESIGN
otherwise everything ok.	WITHOUT_CLASSIFICATION	0.9999310861565237	WITHOUT_CLASSIFICATION	6.891384347633726E-5	DESIGN
visit width-first then depth	WITHOUT_CLASSIFICATION	0.9999600291210986	WITHOUT_CLASSIFICATION	3.997087890136135E-5	DESIGN
if the types report logical equivalence return true	WITHOUT_CLASSIFICATION	0.9999503027020392	WITHOUT_CLASSIFICATION	4.9697297960754494E-5	DESIGN
otherwise perform a "deep equivalence" check	WITHOUT_CLASSIFICATION	0.999463219372289	WITHOUT_CLASSIFICATION	5.367806277109265E-4	DESIGN
if there is no where node make one.	WITHOUT_CLASSIFICATION	0.999523317777419	WITHOUT_CLASSIFICATION	4.766822225810375E-4	DESIGN
inject the where after the parent	WITHOUT_CLASSIFICATION	0.9996048940188511	WITHOUT_CLASSIFICATION	3.9510598114889534E-4	DESIGN
never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.998918903932397	WITHOUT_CLASSIFICATION	0.0010810960676029455	DESIGN
moved here from selectclause [jsd]	WITHOUT_CLASSIFICATION	0.9875205030449329	WITHOUT_CLASSIFICATION	0.012479496955067141	DESIGN
/	WITHOUT_CLASSIFICATION	0.9999650754452732	WITHOUT_CLASSIFICATION	3.4924554726685986E-5	DESIGN
use the table fromelement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9996912066850665	WITHOUT_CLASSIFICATION	3.087933149335119E-4	DESIGN
set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999379559843392	WITHOUT_CLASSIFICATION	6.204401566080116E-5	DESIGN
if the uresolved property path isn't set yet just use the property name.	WITHOUT_CLASSIFICATION	0.9999627111218655	WITHOUT_CLASSIFICATION	3.728887813448729E-5	DESIGN
the 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9998188929135855	WITHOUT_CLASSIFICATION	1.811070864145045E-4	DESIGN
prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999880374438866	WITHOUT_CLASSIFICATION	1.1962556113433893E-5	DESIGN
prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999880374438866	WITHOUT_CLASSIFICATION	1.1962556113433893E-5	DESIGN
if this dot has already been resolved stop now.	WITHOUT_CLASSIFICATION	0.9944273723208465	WITHOUT_CLASSIFICATION	0.005572627679153562	DESIGN
if there is no data type for this node and we're at the end of the path (top most dot node) then this might be a java constant.	WITHOUT_CLASSIFICATION	0.994011194462347	WITHOUT_CLASSIFICATION	0.005988805537652989	DESIGN
the property is a collection	WITHOUT_CLASSIFICATION	0.9998807086459555	WITHOUT_CLASSIFICATION	1.1929135404461747E-4	DESIGN
the property is a component	WITHOUT_CLASSIFICATION	0.9999715242054933	WITHOUT_CLASSIFICATION	2.847579450661347E-5	DESIGN
the property is another class..	WITHOUT_CLASSIFICATION	0.9998602538233946	WITHOUT_CLASSIFICATION	1.3974617660542828E-4	DESIGN
otherwise this is a primitive type.	WITHOUT_CLASSIFICATION	0.9928650784029021	WITHOUT_CLASSIFICATION	0.007134921597097821	DESIGN
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9994419575798171	WITHOUT_CLASSIFICATION	5.5804242018287E-4	DESIGN
this 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9990343308213512	WITHOUT_CLASSIFICATION	9.656691786488553E-4	DESIGN
always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999308237545361	WITHOUT_CLASSIFICATION	6.917624546385075E-5	DESIGN
in non-select queries the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9244388678719303	WITHOUT_CLASSIFICATION	0.0755611321280697	DESIGN
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9988985491809534	WITHOUT_CLASSIFICATION	0.0011014508190464835	DESIGN
this 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9990343308213512	WITHOUT_CLASSIFICATION	9.656691786488553E-4	DESIGN
even though we might find a pre-existing element by join path we may not be able to reuse it	WITHOUT_CLASSIFICATION	0.9981397606643392	WITHOUT_CLASSIFICATION	0.0018602393356608594	DESIGN
note addduplicatealias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.999906962925236	WITHOUT_CLASSIFICATION	9.303707476414892E-5	DESIGN
if the from-clauses are the same we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.7507807547677736	WITHOUT_CLASSIFICATION	0.24921924523222633	DESIGN
again null != null here	WITHOUT_CLASSIFICATION	0.9999820301721759	WITHOUT_CLASSIFICATION	1.796982782403976E-5	DESIGN
if this is an implied join in a from element then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9949026238135208	WITHOUT_CLASSIFICATION	0.0050973761864791505	DESIGN
otherwise (subquery case) dont reuse the fromelement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9996700428052436	WITHOUT_CLASSIFICATION	3.2995719475638883E-4	DESIGN
we know only the lhs-hand type so use that	WITHOUT_CLASSIFICATION	0.9995000444330185	WITHOUT_CLASSIFICATION	4.999555669814089E-4	DESIGN
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999686236289447	WITHOUT_CLASSIFICATION	3.1376371055289805E-5	DESIGN
only the identifier property field name can be a reference to the associated entity's pk	WITHOUT_CLASSIFICATION	0.9985777591513301	WITHOUT_CLASSIFICATION	0.0014222408486698902	DESIGN
special shortcut for id properties skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9983853714780129	WITHOUT_CLASSIFICATION	0.0016146285219871355	DESIGN
append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9998031947282761	WITHOUT_CLASSIFICATION	1.9680527172391516E-4	DESIGN
if the lhs is a collection use collectionpropertymapping	WITHOUT_CLASSIFICATION	0.9982867287971351	WITHOUT_CLASSIFICATION	0.0017132712028649375	DESIGN
tell the destination fromelement to 'includesubclasses'.	WITHOUT_CLASSIFICATION	0.9997879698930894	WITHOUT_CLASSIFICATION	2.120301069105953E-4	DESIGN
use theta style (for regression) move the node up after the origin node.	WITHOUT_CLASSIFICATION	0.9989904076750444	WITHOUT_CLASSIFICATION	0.0010095923249555147	DESIGN
don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999931326684187	WITHOUT_CLASSIFICATION	6.867331581226103E-6	DESIGN
for expected parameter type injection we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9888416980131853	WITHOUT_CLASSIFICATION	0.01115830198681468	DESIGN
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9998743756347956	WITHOUT_CLASSIFICATION	1.2562436520439108E-4	DESIGN
we have something like "? [op] rhs"	WITHOUT_CLASSIFICATION	0.999860431258322	WITHOUT_CLASSIFICATION	1.3956874167804877E-4	DESIGN
we have something like "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.999860431258322	WITHOUT_CLASSIFICATION	1.3956874167804877E-4	DESIGN
we know only the rhs-hand type so use that	WITHOUT_CLASSIFICATION	0.9995000444330185	WITHOUT_CLASSIFICATION	4.999555669814089E-4	DESIGN
handle the (assumed) valid cases #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9936465408997889	WITHOUT_CLASSIFICATION	0.006353459100211041	DESIGN
one or the other needs to be a datetime for us to get into this method in the first place	WITHOUT_CLASSIFICATION	0.815496222852701	WITHOUT_CLASSIFICATION	0.18450377714729893	DESIGN
#3 - note that this is also true of "datetime - param"	WITHOUT_CLASSIFICATION	0.9972577262085286	WITHOUT_CLASSIFICATION	0.002742273791471401	DESIGN
#2	WITHOUT_CLASSIFICATION	0.9999463235757251	WITHOUT_CLASSIFICATION	5.3676424274874835E-5	DESIGN
generate the inner join -- the elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9966090155900287	WITHOUT_CLASSIFICATION	0.0033909844099713196	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999919583008653	WITHOUT_CLASSIFICATION	8.041699134791978E-6	DESIGN
the 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.999957314008923	WITHOUT_CLASSIFICATION	4.268599107701839E-5	DESIGN
add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999526567114053	WITHOUT_CLASSIFICATION	4.7343288594566746E-5	DESIGN
sometimes use the element table alias sometimes use the umm collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9993565960764306	WITHOUT_CLASSIFICATION	6.434039235694144E-4	DESIGN
now set the text for this node. it should be the element columns.	WITHOUT_CLASSIFICATION	0.9976671189789089	WITHOUT_CLASSIFICATION	0.002332881021091146	DESIGN
get the function return value type based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999053205469798	WITHOUT_CLASSIFICATION	9.46794530201334E-5	DESIGN
this will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.998382147148437	WITHOUT_CLASSIFICATION	0.0016178528515630828	DESIGN
mutation depends on the types of nodes invloved	WITHOUT_CLASSIFICATION	0.9998587401842625	WITHOUT_CLASSIFICATION	1.4125981573755408E-4	DESIGN
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding	WITHOUT_CLASSIFICATION	0.9898508891631738	WITHOUT_CLASSIFICATION	0.01014911083682623	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.999047505475522	WITHOUT_CLASSIFICATION	9.524945244779472E-4	DESIGN
generated select expressions are already resolved nothing to do.	WITHOUT_CLASSIFICATION	0.9996884062727313	WITHOUT_CLASSIFICATION	3.115937272686614E-4	DESIGN
the path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999172615104034	WITHOUT_CLASSIFICATION	8.273848959652166E-5	DESIGN
the hql class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9998608054397975	WITHOUT_CLASSIFICATION	1.3919456020249502E-4	DESIGN
associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999471374580179	WITHOUT_CLASSIFICATION	5.286254198214552E-5	DESIGN
try the parent fromclause	WITHOUT_CLASSIFICATION	0.9999757844278319	WITHOUT_CLASSIFICATION	2.421557216818938E-5	DESIGN
add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9998086330700712	WITHOUT_CLASSIFICATION	1.9136692992881174E-4	DESIGN
make sure that all from elements registered with this from clause are actually in the ast.	WITHOUT_CLASSIFICATION	0.9893789400344316	WITHOUT_CLASSIFICATION	0.01062105996556837	DESIGN
invoke setscalarcolumntext on each constructor argument.	WITHOUT_CLASSIFICATION	0.9998789852839378	WITHOUT_CLASSIFICATION	1.210147160622269E-4	DESIGN
collect the select expressions skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999969932040942	WITHOUT_CLASSIFICATION	3.006795905839525E-6	DESIGN
return an empty type array	WITHOUT_CLASSIFICATION	0.9999108970092031	WITHOUT_CLASSIFICATION	8.910299079693572E-5	DESIGN
constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9962602937300421	WITHOUT_CLASSIFICATION	0.0037397062699577833	DESIGN
this is the exception returned by reflecthelper.getconstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9994221261535733	WITHOUT_CLASSIFICATION	5.778738464267954E-4	DESIGN
if there is no order by make one	WITHOUT_CLASSIFICATION	0.997475156242607	WITHOUT_CLASSIFICATION	0.002524843757393021	DESIGN
find the where if there is no where find the from	WITHOUT_CLASSIFICATION	0.9997253215930071	WITHOUT_CLASSIFICATION	2.746784069929898E-4	DESIGN
now inject the newly built order by into the tree	WITHOUT_CLASSIFICATION	0.9966035926299097	WITHOUT_CLASSIFICATION	0.0033964073700902893	DESIGN
parametercontainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.999047505475522	WITHOUT_CLASSIFICATION	9.524945244779472E-4	DESIGN
render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999693994122434	WITHOUT_CLASSIFICATION	3.060058775658411E-5	DESIGN
class names in the from clause result in a joinsequence (the old fromparser does this).	WITHOUT_CLASSIFICATION	0.9986477602189576	WITHOUT_CLASSIFICATION	0.0013522397810424264	DESIGN
for many-to-many joins use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9986586288698811	WITHOUT_CLASSIFICATION	0.0013413711301188973	DESIGN
otherwise use the property mapping.	WITHOUT_CLASSIFICATION	0.9999177196667319	WITHOUT_CLASSIFICATION	8.228033326806854E-5	DESIGN
should be safe to only ever expect entitypersister references here	WITHOUT_CLASSIFICATION	0.9955879342822184	WITHOUT_CLASSIFICATION	0.004412065717781554	DESIGN
if the property is a special collection property name return a collectionpropertymapping.	WITHOUT_CLASSIFICATION	0.9990742409723449	WITHOUT_CLASSIFICATION	9.257590276550876E-4	DESIGN
collection of components.	WITHOUT_CLASSIFICATION	0.9998612028954212	WITHOUT_CLASSIFICATION	1.3879710457872794E-4	DESIGN
make sure the lhs is "assignable"	WITHOUT_CLASSIFICATION	0.9992691891929528	WITHOUT_CLASSIFICATION	7.308108070471635E-4	DESIGN
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9998580356820637	WITHOUT_CLASSIFICATION	1.4196431793633352E-4	DESIGN
register the fromelement with the from clause now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9997019159771694	WITHOUT_CLASSIFICATION	2.9808402283057294E-4	DESIGN
currently allowed	WITHOUT_CLASSIFICATION	0.9999692381615807	WITHOUT_CLASSIFICATION	3.0761838419336344E-5	DESIGN
hhh-276 implied joins in a subselect where clause - the destination needs to be added to the destination's from clause. not sure if this is will fix everything but it works.	WITHOUT_CLASSIFICATION	0.644268868212622	WITHOUT_CLASSIFICATION	0.3557311317873781	DESIGN
return classalias == null ? classname classalias	WITHOUT_CLASSIFICATION	0.998558394080988	WITHOUT_CLASSIFICATION	0.0014416059190120512	DESIGN
this is an explicit from element.	WITHOUT_CLASSIFICATION	0.994710792768057	WITHOUT_CLASSIFICATION	0.005289207231943134	DESIGN
parametercontainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9956075029370588	WITHOUT_CLASSIFICATION	0.004392497062941176	DESIGN
if it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9994940568477693	WITHOUT_CLASSIFICATION	5.059431522307839E-4	DESIGN
since this is an explicit from element it can't be implied in the from clause.	WITHOUT_CLASSIFICATION	0.9984344783762338	WITHOUT_CLASSIFICATION	0.0015655216237661902	DESIGN
do nothing eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999203611609551	WITHOUT_CLASSIFICATION	7.963883904496949E-5	DESIGN
propertyname refers to something like collection.size	WITHOUT_CLASSIFICATION	0.9995547671280788	WITHOUT_CLASSIFICATION	4.452328719212213E-4	DESIGN
property name is a sub-path of a component	WITHOUT_CLASSIFICATION	0.9972074329001428	WITHOUT_CLASSIFICATION	0.0027925670998572554	DESIGN
always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999308237545361	WITHOUT_CLASSIFICATION	6.917624546385075E-5	DESIGN
nothing to do even if the operand is a parameter no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.996149878002205	WITHOUT_CLASSIFICATION	0.003850121997795012	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.999047505475522	WITHOUT_CLASSIFICATION	9.524945244779472E-4	DESIGN
dotnode uses null here	WITHOUT_CLASSIFICATION	0.9994881075529577	WITHOUT_CLASSIFICATION	5.118924470423057E-4	DESIGN
we represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9964244709191731	WITHOUT_CLASSIFICATION	0.0035755290808269866	DESIGN
we are the lhs of the dot representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.99903082171869	WITHOUT_CLASSIFICATION	9.69178281310109E-4	DESIGN
we are the rhs of the dot representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.99903082171869	WITHOUT_CLASSIFICATION	9.69178281310109E-4	DESIGN
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9973456570166838	WITHOUT_CLASSIFICATION	0.0026543429833163334	DESIGN
early exit!!! return so the resolve call explicitly coming from dotnode can resolve this	WITHOUT_CLASSIFICATION	0.9984234930611426	WITHOUT_CLASSIFICATION	0.001576506938857365	DESIGN
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.99913295360216	WITHOUT_CLASSIFICATION	8.67046397839991E-4	DESIGN
just ignore it for now it'll get resolved later	WITHOUT_CLASSIFICATION	0.9996336953022459	WITHOUT_CLASSIFICATION	3.663046977541802E-4	DESIGN
this is not actually a constant but a reference to from element.	WITHOUT_CLASSIFICATION	0.9917483422437505	WITHOUT_CLASSIFICATION	0.008251657756249517	DESIGN
check to see if our "proppath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9995145814929587	WITHOUT_CLASSIFICATION	4.854185070412624E-4	DESIGN
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9985774734818113	WITHOUT_CLASSIFICATION	0.001422526518188637	DESIGN
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9956030153402229	WITHOUT_CLASSIFICATION	0.004396984659777163	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9987285702331171	WITHOUT_CLASSIFICATION	0.0012714297668829056	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9987285702331171	WITHOUT_CLASSIFICATION	0.0012714297668829056	DESIGN
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9980530382825079	WITHOUT_CLASSIFICATION	0.0019469617174921433	DESIGN
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.978675461976647	WITHOUT_CLASSIFICATION	0.02132453802335306	DESIGN
do not over-write the column text as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9998789635527124	WITHOUT_CLASSIFICATION	1.2103644728756656E-4	DESIGN
for some reason the antlr.commonast initialization routines force this method to get called twice. the first time with an empty string	WITHOUT_CLASSIFICATION	0.9999384700147808	WITHOUT_CLASSIFICATION	6.152998521919378E-5	DESIGN
look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999697064705168	WITHOUT_CLASSIFICATION	3.0293529483231104E-5	DESIGN
add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999940377044659	WITHOUT_CLASSIFICATION	5.96229553416909E-6	DESIGN
if the from element isn't in the same clause create a new from element.	WITHOUT_CLASSIFICATION	0.996998779073224	WITHOUT_CLASSIFICATION	0.0030012209267760333	DESIGN
this is the root level node. generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9941533034822552	WITHOUT_CLASSIFICATION	0.005846696517744863	DESIGN
correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ansi-style join	WITHOUT_CLASSIFICATION	0.9994836656496857	WITHOUT_CLASSIFICATION	5.163343503142659E-4	DESIGN
super-duper-classic-parser-regression-testing-mojo-magic	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
a collection of entities	WITHOUT_CLASSIFICATION	0.9996656892894763	WITHOUT_CLASSIFICATION	3.3431071052373543E-4	DESIGN
a collection of components	WITHOUT_CLASSIFICATION	0.9997249359338551	WITHOUT_CLASSIFICATION	2.75064066144844E-4	DESIGN
a collection of scalar elements	WITHOUT_CLASSIFICATION	0.9991131713506015	WITHOUT_CLASSIFICATION	8.868286493984826E-4	DESIGN
according to both the ansi-sql and ejb3 specs trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the sql spec <trim function> = trim <left paren> <trim operands> <right paren> <trim operands> = [ [ <trim specification> ] [ <trim character> ] from ] <trim source> <trim specification> = leading | trailing | both if only <trim specification> is omitted both is assumed if <trim character> is omitted space is assumed	WITHOUT_CLASSIFICATION	0.9993239917243091	WITHOUT_CLASSIFICATION	6.760082756910559E-4	DESIGN
don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9922365623850163	WITHOUT_CLASSIFICATION	0.007763437614983679	DESIGN
treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9995787080500105	WITHOUT_CLASSIFICATION	4.212919499895573E-4	DESIGN
( implied && dotnode.usethetastyleimplicitjoins ) ) {	WITHOUT_CLASSIFICATION	0.9993894507791637	WITHOUT_CLASSIFICATION	6.105492208361926E-4	DESIGN
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9744341296406156	WITHOUT_CLASSIFICATION	0.025565870359384447	DESIGN
create the from element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999415955079501	WITHOUT_CLASSIFICATION	5.8404492049747307E-5	DESIGN
if the join is implied then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.999314396294642	WITHOUT_CLASSIFICATION	6.856037053579636E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993700819080639	WITHOUT_CLASSIFICATION	6.299180919360976E-4	DESIGN
the associated entity is implied but it must be included in the from. the collection alias is the role.	WITHOUT_CLASSIFICATION	0.9977998081742174	WITHOUT_CLASSIFICATION	0.0022001918257825923	DESIGN
tag this node as a join. don't include subclasses in the join. this is a clollection join.	WITHOUT_CLASSIFICATION	0.9969667853099429	WITHOUT_CLASSIFICATION	0.0030332146900571163	DESIGN
get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999414602857936	WITHOUT_CLASSIFICATION	5.853971420646166E-5	DESIGN
origin path implied columns classalias	WITHOUT_CLASSIFICATION	0.9997823087567044	WITHOUT_CLASSIFICATION	2.176912432954941E-4	DESIGN
implied	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
for implied many-to-many just add the end join.	WITHOUT_CLASSIFICATION	0.9999335505980685	WITHOUT_CLASSIFICATION	6.644940193145863E-5	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993700819080639	WITHOUT_CLASSIFICATION	6.299180919360976E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993700819080639	WITHOUT_CLASSIFICATION	6.299180919360976E-4	DESIGN
the standard sql function name is current_timestamp	WITHOUT_CLASSIFICATION	0.9992752218637023	WITHOUT_CLASSIFICATION	7.247781362975693E-4	DESIGN
this causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9841272699317208	WITHOUT_CLASSIFICATION	0.015872730068279314	DESIGN
private type[] sqlresulttypes	WITHOUT_CLASSIFICATION	0.999961883450218	WITHOUT_CLASSIFICATION	3.811654978198989E-5	DESIGN
frontbase has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9992424579792788	WITHOUT_CLASSIFICATION	7.575420207211596E-4	DESIGN
the types represented in the sql result set. @return the types represented in the sql result set.	WITHOUT_CLASSIFICATION	0.999659025157627	WITHOUT_CLASSIFICATION	3.4097484237304026E-4	DESIGN
public type[] getsqlresulttypes() {return sqlresulttypes}	WITHOUT_CLASSIFICATION	0.9996259618152393	WITHOUT_CLASSIFICATION	3.740381847606599E-4	DESIGN
first collect all of the select expressions. note this must be done before invoking setscalarcolumntext() because setscalarcolumntext() changes the ast!!!	WITHOUT_CLASSIFICATION	0.9999117881455115	WITHOUT_CLASSIFICATION	8.8211854488482E-5	DESIGN
first allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9942681248361359	WITHOUT_CLASSIFICATION	0.005731875163864094	DESIGN
sqlresulttypelist.addall( constructorargumenttypelist )	WITHOUT_CLASSIFICATION	0.9993677354379846	WITHOUT_CLASSIFICATION	6.322645620153196E-4	DESIGN
if the data type is not an association type it could not have been in the from clause.	WITHOUT_CLASSIFICATION	0.999755856388083	WITHOUT_CLASSIFICATION	2.4414361191712916E-4	DESIGN
sqlresulttypelist.add( type )	WITHOUT_CLASSIFICATION	0.999791264899264	WITHOUT_CLASSIFICATION	2.0873510073614467E-4	DESIGN
always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9996608996560028	WITHOUT_CLASSIFICATION	3.3910034399713633E-4	DESIGN
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999957589695238	WITHOUT_CLASSIFICATION	4.24103047629956E-6	DESIGN
get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9997757640377084	WITHOUT_CLASSIFICATION	2.242359622915469E-4	DESIGN
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989116229751533	WITHOUT_CLASSIFICATION	0.0010883770248466913	DESIGN
if there are any scalars (non-entities) selected render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999374300294992	WITHOUT_CLASSIFICATION	6.256997050079651E-5	DESIGN
sqlresulttypelist	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
arraylist sqlresulttypelist	WITHOUT_CLASSIFICATION	0.9999577000400072	WITHOUT_CLASSIFICATION	4.229995999285693E-5	DESIGN
sqlresulttypes = ( type[] ) sqlresulttypelist.toarray( new type[sqlresulttypelist.size()] )	WITHOUT_CLASSIFICATION	0.9999281608441477	WITHOUT_CLASSIFICATION	7.183915585235694E-5	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9969494970746126	WITHOUT_CLASSIFICATION	0.0030505029253874117	DESIGN
todo	WITHOUT_CLASSIFICATION	0.8685420110260232	WITHOUT_CLASSIFICATION	0.1314579889739768	DESIGN
add the type to the list of returned sqlresulttypes.	WITHOUT_CLASSIFICATION	0.999800184027663	WITHOUT_CLASSIFICATION	1.9981597233697496E-4	DESIGN
generate an 2d array of column names the first dimension is parallel with the return types array. the second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999179873856562	WITHOUT_CLASSIFICATION	8.201261434384027E-5	DESIGN
generate the select expression.	WITHOUT_CLASSIFICATION	0.9998269148177111	WITHOUT_CLASSIFICATION	1.730851822889254E-4	DESIGN
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9966327304255358	WITHOUT_CLASSIFICATION	0.0033672695744642275	DESIGN
skip 'distinct' and 'all' so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999838728839956	WITHOUT_CLASSIFICATION	1.612711600443281E-5	DESIGN
create sql_token nodes for the columns.	WITHOUT_CLASSIFICATION	0.9998609910231497	WITHOUT_CLASSIFICATION	1.3900897685032685E-4	DESIGN
generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999171027146101	WITHOUT_CLASSIFICATION	8.28972853899031E-5	DESIGN
get the function name node.	WITHOUT_CLASSIFICATION	0.9999902590406954	WITHOUT_CLASSIFICATION	9.740959304721344E-6	DESIGN
method expressions in a select should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9303251066522326	WITHOUT_CLASSIFICATION	0.06967489334776744	DESIGN
if this is 'elements' then create a new from element.	WITHOUT_CLASSIFICATION	0.9899011892787574	WITHOUT_CLASSIFICATION	0.010098810721242637	DESIGN
not elements(x)	WITHOUT_CLASSIFICATION	0.9999822804620997	WITHOUT_CLASSIFICATION	1.771953790036974E-5	DESIGN
dialect function	WITHOUT_CLASSIFICATION	0.9999828818714035	WITHOUT_CLASSIFICATION	1.711812859651423E-5	DESIGN
collection 'property function'	WITHOUT_CLASSIFICATION	0.9998480054020397	WITHOUT_CLASSIFICATION	1.5199459796046946E-4	DESIGN
if the constant is an ident figure out what it means	WITHOUT_CLASSIFICATION	0.9988824408047513	WITHOUT_CLASSIFICATION	0.0011175591952486815	DESIGN
ident is a class alias in the from.	WITHOUT_CLASSIFICATION	0.9991633660617412	WITHOUT_CLASSIFICATION	8.36633938258802E-4	DESIGN
resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999799932194223	WITHOUT_CLASSIFICATION	2.000678057770023E-5	DESIGN
otherwise it's a literal.	WITHOUT_CLASSIFICATION	0.9998045757586992	WITHOUT_CLASSIFICATION	1.954242413007725E-4	DESIGN
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999846915273003	WITHOUT_CLASSIFICATION	1.5308472699685197E-5	DESIGN
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999933983900023	WITHOUT_CLASSIFICATION	6.601609997685448E-6	DESIGN
chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999933209933234	WITHOUT_CLASSIFICATION	6.6790066766073565E-6	DESIGN
add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999897799574423	WITHOUT_CLASSIFICATION	1.0220042557612474E-5	DESIGN
find or create the where clause	WITHOUT_CLASSIFICATION	0.9997592828159604	WITHOUT_CLASSIFICATION	2.40717184039614E-4	DESIGN
child == parent.getfirstchild()	WITHOUT_CLASSIFICATION	0.9999765834905155	WITHOUT_CLASSIFICATION	2.3416509484501555E-5	DESIGN
find or create the where clause	WITHOUT_CLASSIFICATION	0.9997592828159604	WITHOUT_CLASSIFICATION	2.40717184039614E-4	DESIGN
filter conditions need to be inserted before the hql where condition and the theta join node. this is because org.hibernate.loader.loader binds the filter parameters first then it binds all the hql query parameters see org.hibernate.loader.loader.processfilterparameters().	WITHOUT_CLASSIFICATION	0.9968738587269688	WITHOUT_CLASSIFICATION	0.003126141273031227	DESIGN
put the filters node before the hql condition and theta joins	WITHOUT_CLASSIFICATION	0.999979213372	WITHOUT_CLASSIFICATION	2.0786627999971277E-5	DESIGN
add the current fragment to the filters node	WITHOUT_CLASSIFICATION	0.9999255772973974	WITHOUT_CLASSIFICATION	7.442270260262446E-5	DESIGN
create a new theta_joins node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9996741357625711	WITHOUT_CLASSIFICATION	3.258642374288692E-4	DESIGN
put the theta_joins node before the hql condition after the filters.	WITHOUT_CLASSIFICATION	0.9999842346491001	WITHOUT_CLASSIFICATION	1.5765350899823306E-5	DESIGN
add the current fragment to the theta_joins node	WITHOUT_CLASSIFICATION	0.9999255772973974	WITHOUT_CLASSIFICATION	7.442270260262446E-5	DESIGN
first try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9998113785189287	WITHOUT_CLASSIFICATION	1.886214810713705E-4	DESIGN
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9929541075223586	WITHOUT_CLASSIFICATION	0.0070458924776414045	DESIGN
if that didn't work try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9994135922155886	WITHOUT_CLASSIFICATION	5.864077844113789E-4	DESIGN
implicit joins use theta style (where pk = fk) explicit joins use join (after from)	WITHOUT_CLASSIFICATION	0.9999462264954511	WITHOUT_CLASSIFICATION	5.37735045490077E-5	DESIGN
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9997008731774605	WITHOUT_CLASSIFICATION	2.991268225395708E-4	DESIGN
determine the type of the first argument	WITHOUT_CLASSIFICATION	0.9999702007397734	WITHOUT_CLASSIFICATION	2.9799260226597666E-5	DESIGN
use the dot node to emit the first column name. create the column names folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9993014271906786	WITHOUT_CLASSIFICATION	6.985728093214396E-4	DESIGN
note this simply constructs a "raw" sql_token representing the where fragment and injects this into the tree. this "works" however it is probably not the best long-term solution. at some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.5882698347582329	DESIGN	0.41173016524176703	WITHOUT_CLASSIFICATION
append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999562920370962	WITHOUT_CLASSIFICATION	4.370796290374589E-5	DESIGN
if the node has a first child recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999063126951151	WITHOUT_CLASSIFICATION	9.368730488492677E-5	DESIGN
if there is a second child (rhs) recurse into that child.	WITHOUT_CLASSIFICATION	0.9992028599591946	WITHOUT_CLASSIFICATION	7.971400408054097E-4	DESIGN
iterate through the aliasjoinsequence pairs and generate sql token nodes.	WITHOUT_CLASSIFICATION	0.9997056779986482	WITHOUT_CLASSIFICATION	2.9432200135187366E-4	DESIGN
if the from element represents a join_fragment and it is a theta-style join convert its type from join_fragment to from_fragment	WITHOUT_CLASSIFICATION	0.9974263196461455	WITHOUT_CLASSIFICATION	0.0025736803538545937	DESIGN
this is used during sqlgenerator processing	WITHOUT_CLASSIFICATION	0.9728694576591699	WITHOUT_CLASSIFICATION	0.02713054234083009	DESIGN
if there is a from fragment and the from element is an explicit then add the from part.	WITHOUT_CLASSIFICATION	0.9998744459020598	WITHOUT_CLASSIFICATION	1.2555409794016333E-4	DESIGN
&& stringhelper.isnotempty( frag )	WITHOUT_CLASSIFICATION	0.9993897952764166	WITHOUT_CLASSIFICATION	6.102047235833666E-4	DESIGN
the from fragment will probably begin with ' '. remove this if it is present.	WITHOUT_CLASSIFICATION	0.9943674177647377	WITHOUT_CLASSIFICATION	0.005632582235262342	DESIGN
this uses a pathexpressionparser but notice that compound paths are not valid only bare names and simple paths	WITHOUT_CLASSIFICATION	0.9882244497489376	WITHOUT_CLASSIFICATION	0.011775550251062354	DESIGN
select p from p in class eg.person order by p.name p.address p	WITHOUT_CLASSIFICATION	0.9963377135511167	WITHOUT_CLASSIFICATION	0.0036622864488834454	DESIGN
the reason for this is sql doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.997642176266326	WITHOUT_CLASSIFICATION	0.002357823733673943	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9997524188701871	WITHOUT_CLASSIFICATION	2.4758112981295284E-4	DESIGN
default mode	WITHOUT_CLASSIFICATION	0.9999684109413909	WITHOUT_CLASSIFICATION	3.158905860908307E-5	DESIGN
queryjoinfragment join = q.createjoinfragment(usethetastylejoin)	WITHOUT_CLASSIFICATION	0.99994805923048	WITHOUT_CLASSIFICATION	5.194076951993242E-5	DESIGN
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.999957474300044	WITHOUT_CLASSIFICATION	4.2525699956096654E-5	DESIGN
after reset!	WITHOUT_CLASSIFICATION	0.9999726076169017	WITHOUT_CLASSIFICATION	2.7392383098379745E-5	DESIGN
we don't need to worry about any condition in the on clause here (tofromfragmentstring) since anything in the on condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9978106928743756	WITHOUT_CLASSIFICATION	0.002189307125624385	DESIGN
bit_length feels a bit broken to me. we have to cast to char in order to pass when a numeric value is supplied. but of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. jay nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999009871494362	WITHOUT_CLASSIFICATION	9.9012850563759E-5	DESIGN
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
do the corresponding rhs	WITHOUT_CLASSIFICATION	0.9999763349870189	WITHOUT_CLASSIFICATION	2.3665012981197437E-5	DESIGN
if its "id"	WITHOUT_CLASSIFICATION	0.9999870637886435	WITHOUT_CLASSIFICATION	1.2936211356440187E-5	DESIGN
or its the id property name	WITHOUT_CLASSIFICATION	0.9999876387731919	WITHOUT_CLASSIFICATION	1.2361226808098084E-5	DESIGN
join = q.createjoinfragment(usethetastylejoin)	WITHOUT_CLASSIFICATION	0.99994805923048	WITHOUT_CLASSIFICATION	5.194076951993242E-5	DESIGN
important!!	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
string[] keycols = collpersister.getkeycolumnnames()	WITHOUT_CLASSIFICATION	0.999957531965305	WITHOUT_CLASSIFICATION	4.2468034695040705E-5	DESIGN
an association	WITHOUT_CLASSIFICATION	0.9999773823097492	WITHOUT_CLASSIFICATION	2.2617690250766897E-5	DESIGN
allow index() function	WITHOUT_CLASSIFICATION	0.9999468363951999	WITHOUT_CLASSIFICATION	5.3163604800149346E-5	DESIGN
here assume sqlserver2005 using snapshot isolation which does not have this problem	WITHOUT_CLASSIFICATION	0.999127722063929	WITHOUT_CLASSIFICATION	8.722779360710681E-4	DESIGN
the reason for this is sql doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.997642176266326	WITHOUT_CLASSIFICATION	0.002357823733673943	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
collections of values	WITHOUT_CLASSIFICATION	0.9999931994672426	WITHOUT_CLASSIFICATION	6.8005327573660416E-6	DESIGN
opening paren in new foo ( )	WITHOUT_CLASSIFICATION	0.9999193766684756	WITHOUT_CLASSIFICATION	8.062333152434541E-5	DESIGN
if we are inside a new result() but not inside a nested function	WITHOUT_CLASSIFICATION	0.9987378418175195	WITHOUT_CLASSIFICATION	0.0012621581824804981	DESIGN
special case	WITHOUT_CLASSIFICATION	0.9999954394414482	WITHOUT_CLASSIFICATION	4.560558551784384E-6	DESIGN
the name of an sql function	WITHOUT_CLASSIFICATION	0.9999828873687501	WITHOUT_CLASSIFICATION	1.711263124996598E-5	DESIGN
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9996828161871867	WITHOUT_CLASSIFICATION	3.1718381281331407E-4	DESIGN
this is basically a copy/paste of orderbyparser might be worth refactoring	WITHOUT_CLASSIFICATION	0.9631988633738829	WITHOUT_CLASSIFICATION	0.03680113662611708	DESIGN
select p from p in class eg.person group by p.name p.address p	WITHOUT_CLASSIFICATION	0.9986067949862761	WITHOUT_CLASSIFICATION	0.0013932050137239324	DESIGN
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999384604586565	WITHOUT_CLASSIFICATION	6.153954134348104E-5	DESIGN
register collection role	WITHOUT_CLASSIFICATION	0.9996679523905694	WITHOUT_CLASSIFICATION	3.3204760943055276E-4	DESIGN
the keyword used to specify an identity column if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9984739431967455	WITHOUT_CLASSIFICATION	0.0015260568032543988	DESIGN
.getelementpropertymapping()	WITHOUT_CLASSIFICATION	0.9999577000400072	WITHOUT_CLASSIFICATION	4.229995999285693E-5	DESIGN
crossjoins.add(name)	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
ie no select clause in hql	WITHOUT_CLASSIFICATION	0.9999748105486226	WITHOUT_CLASSIFICATION	2.518945137735489E-5	DESIGN
initialize the set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9996165149429398	WITHOUT_CLASSIFICATION	3.8348505706025233E-4	DESIGN
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999864090296477	WITHOUT_CLASSIFICATION	1.3590970352315874E-5	DESIGN
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.999931928089555	WITHOUT_CLASSIFICATION	6.807191044502157E-5	DESIGN
return the concrete type or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9997769115959547	WITHOUT_CLASSIFICATION	2.2308840404532257E-4	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
q.addcollection(collectionname collectionrole)	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9985133127094209	WITHOUT_CLASSIFICATION	0.0014866872905790784	DESIGN
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9987385387720206	WITHOUT_CLASSIFICATION	0.0012614612279794228	DESIGN
unfortunately this stuff can't be cached because it is per-invocation not constant for the querytranslator instance	WITHOUT_CLASSIFICATION	0.9988188621944538	WITHOUT_CLASSIFICATION	0.0011811378055462001	DESIGN
this is the legacy behaviour for hql queries	WITHOUT_CLASSIFICATION	0.9969481782564051	WITHOUT_CLASSIFICATION	0.003051821743594725	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9999697606389631	WITHOUT_CLASSIFICATION	3.0239361036851937E-5	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9999697606389631	WITHOUT_CLASSIFICATION	3.0239361036851937E-5	DESIGN
we have the form trim(trimsource) so we trim leading and trailing spaces early exit!!!!	WITHOUT_CLASSIFICATION	0.9998523405419913	WITHOUT_CLASSIFICATION	1.4765945800871257E-4	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9999697606389631	WITHOUT_CLASSIFICATION	3.0239361036851937E-5	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9999697606389631	WITHOUT_CLASSIFICATION	3.0239361036851937E-5	DESIGN
need this since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9993469202673518	WITHOUT_CLASSIFICATION	6.530797326482122E-4	DESIGN
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9996444535264122	WITHOUT_CLASSIFICATION	3.555464735878582E-4	DESIGN
expressionterminators.add("") deliberately excluded	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
expressionopeners.add("") deliberately excluded	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
we have the form trim(from trimsource). this is functionally equivalent to trim(trimsource) early exit!!!!	WITHOUT_CLASSIFICATION	0.997937586273979	WITHOUT_CLASSIFICATION	0.00206241372602093	DESIGN
otherwise a trim-specification and/or a trim-character have been specified we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.7547630782423825	DESIGN	0.24523692175761758	WITHOUT_CLASSIFICATION
inside a between and expression	WITHOUT_CLASSIFICATION	0.9969127070928782	WITHOUT_CLASSIFICATION	0.003087292907121749	DESIGN
were an odd or even number of nots encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9992561954491948	WITHOUT_CLASSIFICATION	7.438045508051624E-4	DESIGN
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999213654167435	WITHOUT_CLASSIFICATION	7.863458325650011E-5	DESIGN
cope with []	WITHOUT_CLASSIFICATION	0.9999671007714535	WITHOUT_CLASSIFICATION	3.289922854655642E-5	DESIGN
cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9996124305661007	WITHOUT_CLASSIFICATION	3.875694338993453E-4	DESIGN
note early return	WITHOUT_CLASSIFICATION	0.999994439297021	WITHOUT_CLASSIFICATION	5.5607029789306795E-6	DESIGN
cope with a subselect	WITHOUT_CLASSIFICATION	0.999897985454885	WITHOUT_CLASSIFICATION	1.0201454511497676E-4	DESIGN
cope with special cases of and not ()	WITHOUT_CLASSIFICATION	0.9999742563106595	WITHOUT_CLASSIFICATION	2.574368934044837E-5	DESIGN
close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999798422135696	WITHOUT_CLASSIFICATION	2.0157786430429188E-5	DESIGN
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9983879590291684	WITHOUT_CLASSIFICATION	0.0016120409708316303	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9993814059793173	WITHOUT_CLASSIFICATION	6.185940206825982E-4	DESIGN
process a token mapping oo path expressions to sql expressions	WITHOUT_CLASSIFICATION	0.998911715440609	WITHOUT_CLASSIFICATION	0.0010882845593911065	DESIGN
open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9986930762480614	WITHOUT_CLASSIFICATION	0.0013069237519387242	DESIGN
cope with special cases of and not )	WITHOUT_CLASSIFICATION	0.9994134854843004	WITHOUT_CLASSIFICATION	5.865145156994934E-4	DESIGN
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999849499369695	WITHOUT_CLASSIFICATION	1.5050063030602198E-5	DESIGN
add any joins	WITHOUT_CLASSIFICATION	0.9999933344691653	WITHOUT_CLASSIFICATION	6.665530834709311E-6	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9993814059793173	WITHOUT_CLASSIFICATION	6.185940206825982E-4	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9997524188701871	WITHOUT_CLASSIFICATION	2.4758112981295284E-4	DESIGN
path expression	WITHOUT_CLASSIFICATION	0.9999873853864233	WITHOUT_CLASSIFICATION	1.2614613576736311E-5	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9992690794416579	WITHOUT_CLASSIFICATION	7.309205583420243E-4	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9987846502819111	WITHOUT_CLASSIFICATION	0.0012153497180889341	DESIGN
anything else	WITHOUT_CLASSIFICATION	0.9999942507991516	WITHOUT_CLASSIFICATION	5.74920084839828E-6	DESIGN
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9998956851047742	WITHOUT_CLASSIFICATION	1.0431489522572954E-4	DESIGN
careful with this!	WITHOUT_CLASSIFICATION	0.9999327192693442	WITHOUT_CLASSIFICATION	6.728073065573063E-5	DESIGN
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999391543531592	WITHOUT_CLASSIFICATION	6.084564684088241E-5	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999894882484992	WITHOUT_CLASSIFICATION	1.0511751500838043E-5	DESIGN
notice no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999509708369603	WITHOUT_CLASSIFICATION	4.902916303975372E-5	DESIGN
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999660368593185	WITHOUT_CLASSIFICATION	3.3963140681500025E-5	DESIGN
start by looking for hql keywords	WITHOUT_CLASSIFICATION	0.9911916945997647	WITHOUT_CLASSIFICATION	0.008808305400235304	DESIGN
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9980559738480586	WITHOUT_CLASSIFICATION	0.0019440261519413885	DESIGN
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9995659007297661	WITHOUT_CLASSIFICATION	4.34099270233942E-4	DESIGN
now anything that is not a hql keyword	WITHOUT_CLASSIFICATION	0.9998116213208753	WITHOUT_CLASSIFICATION	1.8837867912478137E-4	DESIGN
process the "old" hql style where aliases appear _first_ ie. using the in or in class constructions	WITHOUT_CLASSIFICATION	0.9999658914692646	WITHOUT_CLASSIFICATION	3.410853073537289E-5	DESIGN
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999277292976458	WITHOUT_CLASSIFICATION	7.227070235415212E-5	DESIGN
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999721339361708	WITHOUT_CLASSIFICATION	2.7866063829229985E-5	DESIGN
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9996216477773257	WITHOUT_CLASSIFICATION	3.7835222267438776E-4	DESIGN
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9996735047371941	WITHOUT_CLASSIFICATION	3.2649526280594616E-4	DESIGN
allow odmg oql style from person p p.cars c	WITHOUT_CLASSIFICATION	0.9988408999407297	WITHOUT_CLASSIFICATION	0.0011591000592703121	DESIGN
handle quoted strings	WITHOUT_CLASSIFICATION	0.9998452074571279	WITHOUT_CLASSIFICATION	1.5479254287201647E-4	DESIGN
object insertions updates and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9636792494725206	WITHOUT_CLASSIFICATION	0.03632075052747947	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999894882484992	WITHOUT_CLASSIFICATION	1.0511751500838043E-5	DESIGN
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999709568095827	WITHOUT_CLASSIFICATION	2.9043190417304262E-5	DESIGN
do replacements	WITHOUT_CLASSIFICATION	0.9999425237438027	WITHOUT_CLASSIFICATION	5.747625619728723E-5	DESIGN
handle hql2 collection syntax	WITHOUT_CLASSIFICATION	0.9993873294974158	WITHOUT_CLASSIFICATION	6.126705025840819E-4	DESIGN
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9996168634456908	WITHOUT_CLASSIFICATION	3.8313655430921074E-4	DESIGN
abstractselectingdelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
hilo params	WITHOUT_CLASSIFICATION	0.9999675913280982	WITHOUT_CLASSIFICATION	3.240867190181394E-5	DESIGN
sql = query	WITHOUT_CLASSIFICATION	0.9999970160306452	WITHOUT_CLASSIFICATION	2.9839693548100055E-6	DESIGN
performance opt	WITHOUT_CLASSIFICATION	0.9999104477028852	WITHOUT_CLASSIFICATION	8.955229711482839E-5	DESIGN
sql = update	WITHOUT_CLASSIFICATION	0.9999992520595367	WITHOUT_CLASSIFICATION	7.47940463291642E-7	DESIGN
hilo config	WITHOUT_CLASSIFICATION	0.9999673019503714	WITHOUT_CLASSIFICATION	3.269804962860937E-5	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999837171922359	WITHOUT_CLASSIFICATION	1.628280776409631E-4	DESIGN
don't allow comments on these insert statements as comments totally blow up the oracle getgeneratedkeys "support" (	WITHOUT_CLASSIFICATION	0.9999445483566207	WITHOUT_CLASSIFICATION	5.545164337920518E-5	DESIGN
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9939134407755542	WITHOUT_CLASSIFICATION	0.006086559224445834	DESIGN
throw new identifiergenerationexception("save associated object first or disable cascade for inverse association")	WITHOUT_CLASSIFICATION	0.9987976992926499	WITHOUT_CLASSIFICATION	0.0012023007073501085	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999383277826038	WITHOUT_CLASSIFICATION	6.167221739618467E-5	DESIGN
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999619082728919	WITHOUT_CLASSIFICATION	3.8091727108141036E-5	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999207902843957	WITHOUT_CLASSIFICATION	7.920971560424807E-5	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999837171922359	WITHOUT_CLASSIFICATION	1.628280776409631E-4	DESIGN
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.999895966698193	WITHOUT_CLASSIFICATION	1.0403330180686296E-4	DESIGN
column and table should be renamed but it would break the public api	WITHOUT_CLASSIFICATION	0.9975959687857268	WITHOUT_CLASSIFICATION	0.0024040312142731943	DESIGN
loaded entity instances by entitykey	WITHOUT_CLASSIFICATION	0.999661411768989	WITHOUT_CLASSIFICATION	3.385882310109835E-4	DESIGN
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.999108449292538	WITHOUT_CLASSIFICATION	8.915507074621855E-4	DESIGN
the default	WITHOUT_CLASSIFICATION	0.9999919710344699	WITHOUT_CLASSIFICATION	8.028965530035593E-6	DESIGN
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence	WITHOUT_CLASSIFICATION	0.9879705098617257	WITHOUT_CLASSIFICATION	0.012029490138274224	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999383277826038	WITHOUT_CLASSIFICATION	6.167221739618467E-5	DESIGN
identity map of collectionentry instances by the collection wrapper	WITHOUT_CLASSIFICATION	0.999897344503658	WITHOUT_CLASSIFICATION	1.026554963420777E-4	DESIGN
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996845859989794	WITHOUT_CLASSIFICATION	3.1541400102069815E-4	DESIGN
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996950147885272	WITHOUT_CLASSIFICATION	3.049852114728861E-4	DESIGN
configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998992088737566	WITHOUT_CLASSIFICATION	0.0010079112624341397	DESIGN
identifiergenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995550505027727	WITHOUT_CLASSIFICATION	4.449494972272383E-4	DESIGN
persistentidentifiergenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995550505027727	WITHOUT_CLASSIFICATION	4.449494972272383E-4	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999983685477412	WITHOUT_CLASSIFICATION	1.631452258798883E-5	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999983685477412	WITHOUT_CLASSIFICATION	1.631452258798883E-5	DESIGN
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.997985808872558	WITHOUT_CLASSIFICATION	0.002014191127442168	DESIGN
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999560236475361	WITHOUT_CLASSIFICATION	4.397635246381554E-5	DESIGN
scroll ahead	WITHOUT_CLASSIFICATION	0.9999712120241786	WITHOUT_CLASSIFICATION	2.8787975821321568E-5	DESIGN
scroll backward	WITHOUT_CLASSIFICATION	0.9999761530582166	WITHOUT_CLASSIFICATION	2.3846941783400464E-5	DESIGN
we have not yet hit the last result	WITHOUT_CLASSIFICATION	0.9999663049843817	WITHOUT_CLASSIFICATION	3.369501561840853E-5	DESIGN
constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999331446900015	WITHOUT_CLASSIFICATION	6.685530999850745E-4	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998099234039883	WITHOUT_CLASSIFICATION	1.9007659601165812E-4	DESIGN
criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995991448919892	WITHOUT_CLASSIFICATION	4.0085510801078433E-4	DESIGN
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9917254733373405	WITHOUT_CLASSIFICATION	0.008274526662659503	DESIGN
inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998346033288844	WITHOUT_CLASSIFICATION	1.6539667111569034E-4	DESIGN
constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999331446900015	WITHOUT_CLASSIFICATION	6.685530999850745E-4	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998099234039883	WITHOUT_CLASSIFICATION	1.9007659601165812E-4	DESIGN
criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995991448919892	WITHOUT_CLASSIFICATION	4.0085510801078433E-4	DESIGN
caches	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
generators	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
cache region is defined by the root-class in the hierarchy	WITHOUT_CLASSIFICATION	0.9995630396809198	WITHOUT_CLASSIFICATION	4.369603190803358E-4	DESIGN
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9998443875912112	WITHOUT_CLASSIFICATION	1.556124087888637E-4	DESIGN
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9978828727412394	WITHOUT_CLASSIFICATION	0.002117127258760669	DESIGN
if we get here it is possible that we have a proxy 'in the way' of the merge map resolution note decided to put this here rather than in the above loop as i was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9823062898756095	WITHOUT_CLASSIFICATION	0.017693710124390513	DESIGN
jndi + serialization	WITHOUT_CLASSIFICATION	0.9999823760096636	WITHOUT_CLASSIFICATION	1.7623990336430545E-5	DESIGN
checking for named queries	WITHOUT_CLASSIFICATION	0.9999451832590113	WITHOUT_CLASSIFICATION	5.481674098870824E-5	DESIGN
stats	WITHOUT_CLASSIFICATION	0.9999442050431248	WITHOUT_CLASSIFICATION	5.579495687521935E-5	DESIGN
entitynotfounddelegate	WITHOUT_CLASSIFICATION	0.9999577000400072	WITHOUT_CLASSIFICATION	4.229995999285693E-5	DESIGN
check named hql queries	WITHOUT_CLASSIFICATION	0.9999795661879805	WITHOUT_CLASSIFICATION	2.0433812019497266E-5	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9986631669141643	WITHOUT_CLASSIFICATION	0.001336833085835739	DESIGN
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9954369743748182	WITHOUT_CLASSIFICATION	0.00456302562518189	DESIGN
from javax.naming.referenceable	WITHOUT_CLASSIFICATION	0.9990033723084298	WITHOUT_CLASSIFICATION	9.96627691570201E-4	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999498649648041	WITHOUT_CLASSIFICATION	5.0135035195909027E-5	DESIGN
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9998560831465695	WITHOUT_CLASSIFICATION	1.4391685343050214E-4	DESIGN
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9981255632354109	WITHOUT_CLASSIFICATION	0.0018744367645890739	DESIGN
note early exit	WITHOUT_CLASSIFICATION	0.9999895928772742	WITHOUT_CLASSIFICATION	1.0407122725837602E-5	DESIGN
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999225803642032	WITHOUT_CLASSIFICATION	7.741963579670504E-5	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9997491236538661	WITHOUT_CLASSIFICATION	2.508763461339481E-4	DESIGN
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9998319149821633	WITHOUT_CLASSIFICATION	1.6808501783666644E-4	DESIGN
in case we were deserialized in a different jvm look for an instance with the same name (alternatively we could do an actual jndi lookup here.)	WITHOUT_CLASSIFICATION	0.9995826237311399	WITHOUT_CLASSIFICATION	4.1737626886014233E-4	DESIGN
must add to jndi _after_ adding to hashmaps because some jndi servers use serialization	WITHOUT_CLASSIFICATION	0.9998095647268036	WITHOUT_CLASSIFICATION	1.9043527319640812E-4	DESIGN
make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9107047739154646	WITHOUT_CLASSIFICATION	0.08929522608453537	DESIGN
for each of the defined parameters make sure its value has been set	WITHOUT_CLASSIFICATION	0.9997222722877154	WITHOUT_CLASSIFICATION	2.777277122846373E-4	DESIGN
we never need to apply locks to the sql	WITHOUT_CLASSIFICATION	0.9982566948474705	WITHOUT_CLASSIFICATION	0.0017433051525294488	DESIGN
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995795699816142	WITHOUT_CLASSIFICATION	4.204300183856862E-4	DESIGN
during deserialization we need to reconnect all proxies and collections to this session as well as the entityentry and collectionentry instances these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9862643330345275	WITHOUT_CLASSIFICATION	0.013735666965472402	DESIGN
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995787778150498	WITHOUT_CLASSIFICATION	4.2122218495024307E-4	DESIGN
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992457873240381	WITHOUT_CLASSIFICATION	7.542126759617883E-4	DESIGN
final boolean forcecacherefresh	WITHOUT_CLASSIFICATION	0.9997968159321794	WITHOUT_CLASSIFICATION	2.0318406782048813E-4	DESIGN
final boolean forcecacherefresh	WITHOUT_CLASSIFICATION	0.9997968159321794	WITHOUT_CLASSIFICATION	2.0318406782048813E-4	DESIGN
first try to load it from the temp pc associated to this ss	WITHOUT_CLASSIFICATION	0.9986969513727706	WITHOUT_CLASSIFICATION	0.0013030486272294541	DESIGN
if the metadata allowed proxy creation and caller did not request forceful eager loading generate a proxy	WITHOUT_CLASSIFICATION	0.9998681953995336	WITHOUT_CLASSIFICATION	1.3180460046626296E-4	DESIGN
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9998276162298547	WITHOUT_CLASSIFICATION	1.7238377014539344E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9999650754452732	WITHOUT_CLASSIFICATION	3.4924554726685986E-5	DESIGN
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.99819449338354	WITHOUT_CLASSIFICATION	0.00180550661645999	DESIGN
after setting values to object entitymode	WITHOUT_CLASSIFICATION	0.9997970415977473	WITHOUT_CLASSIFICATION	2.029584022527529E-4	DESIGN
for ejb3	WITHOUT_CLASSIFICATION	0.9998976023957928	WITHOUT_CLASSIFICATION	1.023976042072234E-4	DESIGN
just ignore	WITHOUT_CLASSIFICATION	0.999973108279272	WITHOUT_CLASSIFICATION	2.689172072796382E-5	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9998763689714246	WITHOUT_CLASSIFICATION	1.2363102857539367E-4	DESIGN
saveorupdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997324648939191	WITHOUT_CLASSIFICATION	2.6753510608097864E-4	DESIGN
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997324648939191	WITHOUT_CLASSIFICATION	2.6753510608097864E-4	DESIGN
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997324648939191	WITHOUT_CLASSIFICATION	2.6753510608097864E-4	DESIGN
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997324648939191	WITHOUT_CLASSIFICATION	2.6753510608097864E-4	DESIGN
persistonflush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997324648939191	WITHOUT_CLASSIFICATION	2.6753510608097864E-4	DESIGN
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997324648939191	WITHOUT_CLASSIFICATION	2.6753510608097864E-4	DESIGN
saveorupdatecopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997324648939191	WITHOUT_CLASSIFICATION	2.6753510608097864E-4	DESIGN
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997306705849631	WITHOUT_CLASSIFICATION	2.693294150368936E-4	DESIGN
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997324648939191	WITHOUT_CLASSIFICATION	2.6753510608097864E-4	DESIGN
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997324648939191	WITHOUT_CLASSIFICATION	2.6753510608097864E-4	DESIGN
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997324648939191	WITHOUT_CLASSIFICATION	2.6753510608097864E-4	DESIGN
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9983140414559392	WITHOUT_CLASSIFICATION	0.0016859585440607892	DESIGN
this is an internal error of some sort	WITHOUT_CLASSIFICATION	0.9919469845268971	WITHOUT_CLASSIFICATION	0.008053015473102847	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9836089048052254	WITHOUT_CLASSIFICATION	0.016391095194774524	DESIGN
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999382927257436	WITHOUT_CLASSIFICATION	6.170727425632343E-5	DESIGN
if it was previously unreferenced we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9987329558195256	WITHOUT_CLASSIFICATION	0.001267044180474457	DESIGN
not for internal use	WITHOUT_CLASSIFICATION	0.9999071612714334	WITHOUT_CLASSIFICATION	9.283872856660724E-5	DESIGN
otherwise we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9994124362445327	WITHOUT_CLASSIFICATION	5.875637554672389E-4	DESIGN
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9943885660756919	WITHOUT_CLASSIFICATION	0.005611433924308043	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9836089048052254	WITHOUT_CLASSIFICATION	0.016391095194774524	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9836089048052254	WITHOUT_CLASSIFICATION	0.016391095194774524	DESIGN
if it is initialized see if the underlying instance is contained since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.98857085139789	WITHOUT_CLASSIFICATION	0.01142914860210996	DESIGN
basically just an adapted copy of find(criteriaimpl)	WITHOUT_CLASSIFICATION	0.9999600764741141	WITHOUT_CLASSIFICATION	3.992352588593294E-5	DESIGN
it is possible for this method to be called during flush processing so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9042106163340623	WITHOUT_CLASSIFICATION	0.09578938366593771	DESIGN
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9997040457005006	WITHOUT_CLASSIFICATION	2.959542994993747E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999474365512322	WITHOUT_CLASSIFICATION	5.256344876779287E-5	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9997491236538661	WITHOUT_CLASSIFICATION	2.508763461339481E-4	DESIGN
we need to writeobject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9977877075864594	WITHOUT_CLASSIFICATION	0.0022122924135406694	DESIGN
the old-time stand-by	WITHOUT_CLASSIFICATION	0.999986289996181	WITHOUT_CLASSIFICATION	1.3710003819048596E-5	DESIGN
parameter bind values	WITHOUT_CLASSIFICATION	0.9999335704711944	WITHOUT_CLASSIFICATION	6.642952880559252E-5	DESIGN
parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9692977681450817	WITHOUT_CLASSIFICATION	0.030702231854918275	DESIGN
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9991616004042964	WITHOUT_CLASSIFICATION	8.383995957035249E-4	DESIGN
execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990277330267948	WITHOUT_CLASSIFICATION	9.722669732051475E-4	DESIGN
we have a cglib enhanced entity	WITHOUT_CLASSIFICATION	0.9995443971583267	WITHOUT_CLASSIFICATION	4.5560284167336885E-4	DESIGN
we have a cglib enhanced entity	WITHOUT_CLASSIFICATION	0.9995443971583267	WITHOUT_CLASSIFICATION	4.5560284167336885E-4	DESIGN
we have a javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9995443971583267	WITHOUT_CLASSIFICATION	4.5560284167336885E-4	DESIGN
we have a javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9995443971583267	WITHOUT_CLASSIFICATION	4.5560284167336885E-4	DESIGN
fieldinterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994474440823251	WITHOUT_CLASSIFICATION	5.5255591767494E-4	DESIGN
let's assume that there is only one lazy fetch group for now!	WITHOUT_CLASSIFICATION	0.9995063073419713	WITHOUT_CLASSIFICATION	4.936926580286748E-4	DESIGN
fieldhandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9997187392399537	WITHOUT_CLASSIFICATION	2.812607600462988E-4	DESIGN
should probably no-op commit/rollback here at least in jta scenarios	WITHOUT_CLASSIFICATION	0.9899921470848804	WITHOUT_CLASSIFICATION	0.010007852915119696	DESIGN
base expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995485243124497	WITHOUT_CLASSIFICATION	4.5147568755036024E-4	DESIGN
various expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997509701776675	WITHOUT_CLASSIFICATION	2.490298223325674E-4	DESIGN
explicitly perform no checking	WITHOUT_CLASSIFICATION	0.9999736787999188	WITHOUT_CLASSIFICATION	2.6321200081065994E-5	DESIGN
used from testsuite	WITHOUT_CLASSIFICATION	0.9997247621319214	WITHOUT_CLASSIFICATION	2.752378680786228E-4	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9990331747828423	WITHOUT_CLASSIFICATION	9.668252171577163E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9998110032392955	WITHOUT_CLASSIFICATION	1.8899676070448587E-4	DESIGN
register synch stats.connect()	WITHOUT_CLASSIFICATION	0.9999495813099153	WITHOUT_CLASSIFICATION	5.041869008479415E-5	DESIGN
noncritical swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9996775711485583	WITHOUT_CLASSIFICATION	3.2242885144184914E-4	DESIGN
calls executebatch()	WITHOUT_CLASSIFICATION	0.9999767917991834	WITHOUT_CLASSIFICATION	2.3208200816607174E-5	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999909531324778	WITHOUT_CLASSIFICATION	9.046867522248041E-6	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999909531324778	WITHOUT_CLASSIFICATION	9.046867522248041E-6	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999909531324778	WITHOUT_CLASSIFICATION	9.046867522248041E-6	DESIGN
sybase driver (jconnect) throwing npe here in certain cases but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9994801400762616	WITHOUT_CLASSIFICATION	5.198599237382822E-4	DESIGN
see explanation above	WITHOUT_CLASSIFICATION	0.9999390547376654	WITHOUT_CLASSIFICATION	6.0945262334561985E-5	DESIGN
if we are in the process of releasing no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.999284800434952	WITHOUT_CLASSIFICATION	7.151995650479988E-4	DESIGN
early exit!!!!	WITHOUT_CLASSIFICATION	0.9999678342597291	WITHOUT_CLASSIFICATION	3.2165740270931774E-5	DESIGN
resultset impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
resultset impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
refer to comment in statefulpersistencecontext.addcollection()	WITHOUT_CLASSIFICATION	0.9997401786172364	WITHOUT_CLASSIFICATION	2.5982138276357206E-4	DESIGN
connectionmanager.callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995550505027727	WITHOUT_CLASSIFICATION	4.449494972272383E-4	DESIGN
note success = false because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999944829021573	WITHOUT_CLASSIFICATION	5.517097842622566E-6	DESIGN
we already have a callback registered either a local (org.hibernate.transaction) transaction has accepted callback responsibilities or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9979809825989331	WITHOUT_CLASSIFICATION	0.002019017401066868	DESIGN
the configured transaction-factory says it only supports local callback mode so no sense attempting to register a jta synchronization	WITHOUT_CLASSIFICATION	0.9781496709988189	WITHOUT_CLASSIFICATION	0.02185032900118116	DESIGN
transactions marked for rollback-only cause some tm impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9977175756909521	WITHOUT_CLASSIFICATION	0.0022824243090479165	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995819523113162	WITHOUT_CLASSIFICATION	4.180476886838845E-4	DESIGN
postinitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999515286116151	WITHOUT_CLASSIFICATION	4.847138838482446E-5	DESIGN
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.99989897525001	WITHOUT_CLASSIFICATION	1.0102474998994885E-4	DESIGN
todo for 4.0 private static final logger log = loggerfactory.getlogger( sqlstatementlogger.class ) this is the legacy logging 'category'	WITHOUT_CLASSIFICATION	0.6497342246568312	WITHOUT_CLASSIFICATION	0.3502657753431689	DESIGN
note that for sequential scrolling we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9979917116130717	WITHOUT_CLASSIFICATION	0.002008288386928353	DESIGN
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9994126088315881	WITHOUT_CLASSIFICATION	5.873911684118777E-4	DESIGN
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9996138637291727	WITHOUT_CLASSIFICATION	3.861362708273531E-4	DESIGN
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9997723138672678	WITHOUT_CLASSIFICATION	2.2768613273215258E-4	DESIGN
sequentially read the result set in reverse until we recognize a change in the key value. at that point we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9986401881794635	WITHOUT_CLASSIFICATION	0.0013598118205364327	DESIGN
read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999567443263965	WITHOUT_CLASSIFICATION	4.325567360348711E-5	DESIGN
finally read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9996684178338059	WITHOUT_CLASSIFICATION	3.3158216619409426E-4	DESIGN
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999825181315416	WITHOUT_CLASSIFICATION	1.7481868458471025E-5	DESIGN
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999792728911282	WITHOUT_CLASSIFICATION	2.0727108871683617E-5	DESIGN
this is equivalent to the old behavior	WITHOUT_CLASSIFICATION	0.9985425204261503	WITHOUT_CLASSIFICATION	0.0014574795738497202	DESIGN
if null owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9995434771195177	WITHOUT_CLASSIFICATION	4.5652288048221535E-4	DESIGN
final string querystring	WITHOUT_CLASSIFICATION	0.9999430906670103	WITHOUT_CLASSIFICATION	5.690933298980029E-5	DESIGN
if it was a reference to self don't need to nullify unless we are using native id generation in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9974357071244839	WITHOUT_CLASSIFICATION	0.002564292875516005	DESIGN
end of array start filling again from start	WITHOUT_CLASSIFICATION	0.9996457462489075	WITHOUT_CLASSIFICATION	3.54253751092517E-4	DESIGN
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to persistentcollection#endread) we scan the internal loadingcollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endread processing.	WITHOUT_CLASSIFICATION	0.9030039804822309	WITHOUT_CLASSIFICATION	0.09699601951776922	DESIGN
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999180937797038	WITHOUT_CLASSIFICATION	8.190622029624794E-5	DESIGN
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999126105891238	WITHOUT_CLASSIFICATION	8.73894108761353E-5	DESIGN
first we need to suspend any current jta transaction and obtain a jdbc connection	WITHOUT_CLASSIFICATION	0.9980054822026513	WITHOUT_CLASSIFICATION	0.001994517797348678	DESIGN
getresultlist(results)	WITHOUT_CLASSIFICATION	0.9999577000400072	WITHOUT_CLASSIFICATION	4.229995999285693E-5	DESIGN
if we only returned one entity query by key is more efficient	WITHOUT_CLASSIFICATION	0.9948137593970677	WITHOUT_CLASSIFICATION	0.00518624060293237	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9973971795960042	WITHOUT_CLASSIFICATION	0.002602820403995795	DESIGN
handle empty collection	WITHOUT_CLASSIFICATION	0.9989067430550043	WITHOUT_CLASSIFICATION	0.0010932569449956429	DESIGN
else no collection element but also no owner	WITHOUT_CLASSIFICATION	0.9999678443694671	WITHOUT_CLASSIFICATION	3.215563053304101E-5	DESIGN
handle empty collections	WITHOUT_CLASSIFICATION	0.9997322915989428	WITHOUT_CLASSIFICATION	2.6770840105715555E-4	DESIGN
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.8696051738357568	WITHOUT_CLASSIFICATION	0.13039482616424325	DESIGN
validate() instances of validatable	WITHOUT_CLASSIFICATION	0.9997717624853941	WITHOUT_CLASSIFICATION	2.2823751460578038E-4	DESIGN
if we know there is exactly 1 row we can skip. it would be great if we could _always_ skip this it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9907638272790058	WITHOUT_CLASSIFICATION	0.009236172720994262	DESIGN
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9986481430697942	WITHOUT_CLASSIFICATION	0.0013518569302058477	DESIGN
null version means the object is in the process of being loaded somewhere else in the resultset	WITHOUT_CLASSIFICATION	0.9995187822957272	WITHOUT_CLASSIFICATION	4.812177042728141E-4	DESIGN
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9992358704529545	WITHOUT_CLASSIFICATION	7.641295470454269E-4	DESIGN
use the id passed in	WITHOUT_CLASSIFICATION	0.9999798461677973	WITHOUT_CLASSIFICATION	2.015383220262248E-5	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999929005498752	WITHOUT_CLASSIFICATION	7.0994501248312784E-6	DESIGN
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9996169619125481	WITHOUT_CLASSIFICATION	3.830380874519384E-4	DESIGN
no point doing this if none was requested	WITHOUT_CLASSIFICATION	0.9999744396557784	WITHOUT_CLASSIFICATION	2.5560344221631758E-5	DESIGN
if the object is already loaded return the loaded one	WITHOUT_CLASSIFICATION	0.99990792540653	WITHOUT_CLASSIFICATION	9.207459347007808E-5	DESIGN
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9989902180771548	WITHOUT_CLASSIFICATION	0.0010097819228451594	DESIGN
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9990319572597514	WITHOUT_CLASSIFICATION	9.680427402487191E-4	DESIGN
the load() which takes an entity does not pass an entityname	WITHOUT_CLASSIFICATION	0.9999720985083104	WITHOUT_CLASSIFICATION	2.7901491689641658E-5	DESIGN
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9998605775163016	WITHOUT_CLASSIFICATION	1.3942248369840812E-4	DESIGN
look for a proxy	WITHOUT_CLASSIFICATION	0.9999501943316044	WITHOUT_CLASSIFICATION	4.980566839568948E-5	DESIGN
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9989900964474308	WITHOUT_CLASSIFICATION	0.0010099035525692644	DESIGN
its the given optional object	WITHOUT_CLASSIFICATION	0.9999910034066194	WITHOUT_CLASSIFICATION	8.996593380733653E-6	DESIGN
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9997808568339676	WITHOUT_CLASSIFICATION	2.1914316603245513E-4	DESIGN
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9998005268926152	WITHOUT_CLASSIFICATION	1.9947310738483172E-4	DESIGN
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999049508578788	WITHOUT_CLASSIFICATION	9.504914212127465E-5	DESIGN
will be ignored using the existing entry instead	WITHOUT_CLASSIFICATION	0.9999596502764331	WITHOUT_CLASSIFICATION	4.03497235669178E-5	DESIGN
key is an entity involved with the operation performed by the listener value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999326876371465	WITHOUT_CLASSIFICATION	6.731236285352553E-5	DESIGN
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9998597869830969	WITHOUT_CLASSIFICATION	1.402130169030457E-4	DESIGN
get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9998386995426557	WITHOUT_CLASSIFICATION	1.6130045734429296E-4	DESIGN
ok in normal hibernate usage to delete a detached entity jpa however forbids it thus this is a hook for hem to affect this behavior	WITHOUT_CLASSIFICATION	0.9826039529505536	WITHOUT_CLASSIFICATION	0.017396047049446358	DESIGN
the entry will be removed after the flush and will no longer override the stale snapshot this is now handled by removeentity() in entitydeleteaction persistencecontext.removedatabasesnapshot(key)	WITHOUT_CLASSIFICATION	0.9994553880507484	WITHOUT_CLASSIFICATION	5.446119492515698E-4	DESIGN
addinitializedcollection(collection persister id)	WITHOUT_CLASSIFICATION	0.9993192061032453	WITHOUT_CLASSIFICATION	6.807938967547445E-4	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9999678342597291	WITHOUT_CLASSIFICATION	3.2165740270931774E-5	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9999678342597291	WITHOUT_CLASSIFICATION	3.2165740270931774E-5	DESIGN
|| oj.getjoinable().consumescollectionalias()	WITHOUT_CLASSIFICATION	0.9994776716632774	WITHOUT_CLASSIFICATION	5.223283367225297E-4	DESIGN
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9996439281435275	WITHOUT_CLASSIFICATION	3.560718564725327E-4	DESIGN
code to handle subclasses of topclass	WITHOUT_CLASSIFICATION	0.9775434976211677	WITHOUT_CLASSIFICATION	0.022456502378832396	DESIGN
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999206855031733	WITHOUT_CLASSIFICATION	7.931449682669583E-5	DESIGN
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9997903835441732	WITHOUT_CLASSIFICATION	2.0961645582690268E-4	DESIGN
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9975076928968718	WITHOUT_CLASSIFICATION	0.0024923071031282265	DESIGN
synchronized to avoid multi-thread access issues defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9987423306749419	WITHOUT_CLASSIFICATION	0.0012576693250580463	DESIGN
allows various loaders (ok mainly the queryloader ) to check whether scrolling of their result set should be allowed. by default it is allowed.	WITHOUT_CLASSIFICATION	0.9928216968939865	WITHOUT_CLASSIFICATION	0.007178303106013588	DESIGN
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999767612222327	WITHOUT_CLASSIFICATION	2.3238777767283117E-5	DESIGN
if the current depth is 0 the root thing being loaded is the many-to-many collection itself. here it is alright to use an inner join	WITHOUT_CLASSIFICATION	0.9984779081882061	WITHOUT_CLASSIFICATION	0.0015220918117938246	DESIGN
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.999988517522972	WITHOUT_CLASSIFICATION	1.1482477028018369E-5	DESIGN
simple because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element	WITHOUT_CLASSIFICATION	0.9980098765933992	WITHOUT_CLASSIFICATION	0.001990123406600748	DESIGN
a composite key	WITHOUT_CLASSIFICATION	0.9998796019832519	WITHOUT_CLASSIFICATION	1.2039801674803652E-4	DESIGN
if no batch use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9998242841937369	WITHOUT_CLASSIFICATION	1.7571580626316293E-4	DESIGN
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9979902220149671	WITHOUT_CLASSIFICATION	0.0020097779850327614	DESIGN
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9993805324882942	WITHOUT_CLASSIFICATION	6.194675117059449E-4	DESIGN
&& etype.isreferencetoprimarykey()	WITHOUT_CLASSIFICATION	0.9995969447198612	WITHOUT_CLASSIFICATION	4.0305528013887215E-4	DESIGN
it might still need to apply a collection ordering based on a many-to-many defined order-by	WITHOUT_CLASSIFICATION	0.6471639202890731	WITHOUT_CLASSIFICATION	0.35283607971092684	DESIGN
if a composite key use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching todo unnecessary for databases with ansi-style joins	WITHOUT_CLASSIFICATION	0.8713592560548407	DESIGN	0.12864074394515942	WITHOUT_CLASSIFICATION
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9973323385462557	WITHOUT_CLASSIFICATION	0.0026676614537443485	DESIGN
we found it	WITHOUT_CLASSIFICATION	0.9999402211292125	WITHOUT_CLASSIFICATION	5.977887078735696E-5	DESIGN
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9994412645895493	WITHOUT_CLASSIFICATION	5.587354104507703E-4	DESIGN
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.978250727343668	WITHOUT_CLASSIFICATION	0.021749272656332006	DESIGN
note unlike all other loaders this one is not multithreaded or cacheable!!	WITHOUT_CLASSIFICATION	0.9995083362956363	WITHOUT_CLASSIFICATION	4.916637043637355E-4	DESIGN
the user visible aliases which are unknown to the superclass these are not the actual "physical" sql aliases	WITHOUT_CLASSIFICATION	0.9998958288941828	WITHOUT_CLASSIFICATION	1.0417110581714819E-4	DESIGN
root entity comes last	WITHOUT_CLASSIFICATION	0.9999218040289739	WITHOUT_CLASSIFICATION	7.819597102615008E-5	DESIGN
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9997874513144689	WITHOUT_CLASSIFICATION	2.1254868553109084E-4	DESIGN
alias may be null early exit	WITHOUT_CLASSIFICATION	0.9999149902579157	WITHOUT_CLASSIFICATION	8.50097420843246E-5	DESIGN
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999157101379467	WITHOUT_CLASSIFICATION	8.428986205324001E-5	DESIGN
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9993193206332633	WITHOUT_CLASSIFICATION	6.806793667365475E-4	DESIGN
if its the root criteria we are done	WITHOUT_CLASSIFICATION	0.9995455832690093	WITHOUT_CLASSIFICATION	4.5441673099064857E-4	DESIGN
otherwise recurse	WITHOUT_CLASSIFICATION	0.9999673957809088	WITHOUT_CLASSIFICATION	3.26042190912814E-5	DESIGN
the criteria instance	WITHOUT_CLASSIFICATION	0.9999814657168192	WITHOUT_CLASSIFICATION	1.8534283180768747E-5	DESIGN
the entity name	WITHOUT_CLASSIFICATION	0.9999626133771384	WITHOUT_CLASSIFICATION	3.738662286160216E-5	DESIGN
not found in inner query try the outer query	WITHOUT_CLASSIFICATION	0.9999198400362422	WITHOUT_CLASSIFICATION	8.015996375776447E-5	DESIGN
not found in inner query try the outer query	WITHOUT_CLASSIFICATION	0.9999198400362422	WITHOUT_CLASSIFICATION	8.015996375776447E-5	DESIGN
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9978861827770477	WITHOUT_CLASSIFICATION	0.0021138172229523597	DESIGN
should never happen i think	WITHOUT_CLASSIFICATION	0.9995402205848783	WITHOUT_CLASSIFICATION	4.597794151216469E-4	DESIGN
detect discriminator values	WITHOUT_CLASSIFICATION	0.9999907432112561	WITHOUT_CLASSIFICATION	9.256788743925134E-6	DESIGN
convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9991191463259526	WITHOUT_CLASSIFICATION	8.808536740474109E-4	DESIGN
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9977360553383108	WITHOUT_CLASSIFICATION	0.002263944661689246	DESIGN
it does not refer to an alias of a projection look for a property	WITHOUT_CLASSIFICATION	0.998800382955767	WITHOUT_CLASSIFICATION	0.0011996170442330678	DESIGN
otherwise this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9949630061535802	WITHOUT_CLASSIFICATION	0.005036993846419789	DESIGN
currently not cachable if autodiscover types is in effect (e.g. "select ")	WITHOUT_CLASSIFICATION	0.9997486454592467	WITHOUT_CLASSIFICATION	2.5135454075324987E-4	DESIGN
private final string[] sqlaliases private final string[] sqlaliassuffixes	WITHOUT_CLASSIFICATION	0.9995788392571108	WITHOUT_CLASSIFICATION	4.2116074288917684E-4	DESIGN
this is only needed (afaict) for resulttransformer processing	WITHOUT_CLASSIFICATION	0.9928747609693483	WITHOUT_CLASSIFICATION	0.007125239030651601	DESIGN
determine if the collection elements are entities	WITHOUT_CLASSIFICATION	0.9997271556171651	WITHOUT_CLASSIFICATION	2.728443828348472E-4	DESIGN
build an array with indices equal to the total number of actual returns in the result hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9993360933943316	WITHOUT_CLASSIFICATION	6.639066056683712E-4	DESIGN
replace {.} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9978050714588952	WITHOUT_CLASSIFICATION	0.002194928541104769	DESIGN
no additional open braces found in the string append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9998407443715072	WITHOUT_CLASSIFICATION	1.5925562849277837E-4	DESIGN
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.99995419641794	WITHOUT_CLASSIFICATION	4.580358205999102E-5	DESIGN
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.998500410558393	WITHOUT_CLASSIFICATION	0.001499589441607003	DESIGN
passing through anything we do not know to support jdbc escape sequences hb-898	WITHOUT_CLASSIFICATION	0.9984173362932482	WITHOUT_CLASSIFICATION	0.0015826637067518105	DESIGN
passing through anything we do not know to support jdbc escape sequences hb-898	WITHOUT_CLASSIFICATION	0.9984173362932482	WITHOUT_CLASSIFICATION	0.0015826637067518105	DESIGN
the current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9960179423000893	WITHOUT_CLASSIFICATION	0.003982057699910728	DESIGN
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9995398740736388	WITHOUT_CLASSIFICATION	4.601259263612105E-4	DESIGN
possibly handle something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9986658848897745	WITHOUT_CLASSIFICATION	0.0013341151102254916	DESIGN
let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999186513985575	WITHOUT_CLASSIFICATION	8.134860144248744E-4	DESIGN
private final list persisters = new arraylist()	WITHOUT_CLASSIFICATION	0.9997209260851664	WITHOUT_CLASSIFICATION	2.790739148335788E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9998110032392955	WITHOUT_CLASSIFICATION	1.8899676070448587E-4	DESIGN
note early exit!	WITHOUT_CLASSIFICATION	0.9999897328879522	WITHOUT_CLASSIFICATION	1.0267112047767442E-5	DESIGN
private final list scalartypes = new arraylist() private final list scalarcolumnaliases = new arraylist()	WITHOUT_CLASSIFICATION	0.9999335503804423	WITHOUT_CLASSIFICATION	6.644961955771768E-5	DESIGN
now process the returns	WITHOUT_CLASSIFICATION	0.9999892097517202	WITHOUT_CLASSIFICATION	1.0790248279709924E-5	DESIGN
private list collectionowneraliases = new arraylist() private list collectionaliases = new arraylist() private list collectionpersisters = new arraylist() private list collectionresults = new arraylist()	WITHOUT_CLASSIFICATION	0.9999517716706986	WITHOUT_CLASSIFICATION	4.822832930141166E-5	DESIGN
already been processed	WITHOUT_CLASSIFICATION	0.9999530858348584	WITHOUT_CLASSIFICATION	4.691416514145728E-5	DESIGN
already been processed	WITHOUT_CLASSIFICATION	0.9999530858348584	WITHOUT_CLASSIFICATION	4.691416514145728E-5	DESIGN
make sure the owner alias is known	WITHOUT_CLASSIFICATION	0.9995734346109695	WITHOUT_CLASSIFICATION	4.2656538903054726E-4	DESIGN
first break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.6247520355031166	WITHOUT_CLASSIFICATION	0.37524796449688347	DESIGN
scalarcolumnaliases.add( typereturn.getcolumnalias() ) scalartypes.add( typereturn.gettype() )	WITHOUT_CLASSIFICATION	0.9993677354379846	WITHOUT_CLASSIFICATION	6.322645620153196E-4	DESIGN
if this return's alias has not been processed yet do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.999464910229144	WITHOUT_CLASSIFICATION	5.350897708560976E-4	DESIGN
collectionowneraliases.add( owneralias )	WITHOUT_CLASSIFICATION	0.9993677354379846	WITHOUT_CLASSIFICATION	6.322645620153196E-4	DESIGN
for merging of versioned entities we consider the version having been changed only when 1) the two version values are different and 2) the target actually represents database state! this second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9998143751099356	WITHOUT_CLASSIFICATION	1.8562489006434797E-4	DESIGN
this is the second pass through on a merge op so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.997084291506881	WITHOUT_CLASSIFICATION	0.0029157084931189974	DESIGN
early exit	WITHOUT_CLASSIFICATION	0.9999443594459024	WITHOUT_CLASSIFICATION	5.5640554097525976E-5	DESIGN
cascade-save to collections after the collection owner was saved	WITHOUT_CLASSIFICATION	0.9998164925665008	WITHOUT_CLASSIFICATION	1.8350743349920752E-4	DESIGN
initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9996466874855461	WITHOUT_CLASSIFICATION	3.5331251445386774E-4	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9999882805389055	WITHOUT_CLASSIFICATION	1.1719461094464552E-5	DESIGN
currently only the hibernate-supplied dbtimestamptype is supported here	WITHOUT_CLASSIFICATION	0.9998383230531582	WITHOUT_CLASSIFICATION	1.6167694684184508E-4	DESIGN
this is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9948391382348821	WITHOUT_CLASSIFICATION	0.005160861765117873	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9997091793109238	WITHOUT_CLASSIFICATION	2.9082068907617623E-4	DESIGN
not so sure this is even valid subtree. but if it was it'd represent two unrelated table references	WITHOUT_CLASSIFICATION	0.999921281251075	WITHOUT_CLASSIFICATION	7.871874892495435E-5	DESIGN
(not (gt a b) ) => (le a b)	WITHOUT_CLASSIFICATION	0.9999263188082211	WITHOUT_CLASSIFICATION	7.368119177883358E-5	DESIGN
private type[] sqlresulttypes	WITHOUT_CLASSIFICATION	0.999961883450218	WITHOUT_CLASSIFICATION	3.811654978198989E-5	DESIGN
include the discriminator and class-level where but not filters	WITHOUT_CLASSIFICATION	0.9997292122635368	WITHOUT_CLASSIFICATION	2.707877364631814E-4	DESIGN
sqlresulttypes = selectclause.getsqlresulttypes()	WITHOUT_CLASSIFICATION	0.9999477159006084	WITHOUT_CLASSIFICATION	5.228409939150192E-5	DESIGN
by default	WITHOUT_CLASSIFICATION	0.9999059877540855	WITHOUT_CLASSIFICATION	9.40122459146175E-5	DESIGN
this is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.996489249720354	WITHOUT_CLASSIFICATION	0.0035107502796460546	DESIGN
-- loader implementation --	WITHOUT_CLASSIFICATION	0.9999538586376906	WITHOUT_CLASSIFICATION	4.614136230932169E-5	DESIGN
-- loader overrides --	WITHOUT_CLASSIFICATION	0.9999566927907942	WITHOUT_CLASSIFICATION	4.330720920568853E-5	DESIGN
(not (is_null a b) ) => (is_not_null a b)	WITHOUT_CLASSIFICATION	0.99927274466879	WITHOUT_CLASSIFICATION	7.27255331209935E-4	DESIGN
none because its the requested lock mode not the actual!	WITHOUT_CLASSIFICATION	0.9999869132900936	WITHOUT_CLASSIFICATION	1.3086709906554997E-5	DESIGN
meant to handle dynamic instantiation queries	WITHOUT_CLASSIFICATION	0.9969601342091396	WITHOUT_CLASSIFICATION	0.0030398657908603643	DESIGN
--- query translator methods ---	WITHOUT_CLASSIFICATION	0.9992975873240222	WITHOUT_CLASSIFICATION	7.024126759778084E-4	DESIGN
-- implementation private methods --	WITHOUT_CLASSIFICATION	0.999070099132418	WITHOUT_CLASSIFICATION	9.299008675819512E-4	DESIGN
deduplicate unique constraints sharing the same columns this is needed by hibernate annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9996225950423822	WITHOUT_CLASSIFICATION	3.7740495761778983E-4	DESIGN
try to find out the name of the primary key to create it as identity if the identitygenerator is used	WITHOUT_CLASSIFICATION	0.9990289864080558	WITHOUT_CLASSIFICATION	9.710135919442258E-4	DESIGN
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9542681529433439	WITHOUT_CLASSIFICATION	0.045731847056656186	DESIGN
prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999880374438866	WITHOUT_CLASSIFICATION	1.1962556113433893E-5	DESIGN
used also for generation of fk names!	WITHOUT_CLASSIFICATION	0.9988086235297658	WITHOUT_CLASSIFICATION	0.0011913764702340798	DESIGN
usually useless	WITHOUT_CLASSIFICATION	0.9999676318486029	WITHOUT_CLASSIFICATION	3.2368151397040574E-5	DESIGN
added this caching as i noticed that gettype() is being called multiple times	WITHOUT_CLASSIFICATION	0.9914125694490137	WITHOUT_CLASSIFICATION	0.008587430550986267	DESIGN
do not add unique constraint on db not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9997619562775495	WITHOUT_CLASSIFICATION	2.380437224506404E-4	DESIGN
for backward compatibility disable this	WITHOUT_CLASSIFICATION	0.9981738876011723	WITHOUT_CLASSIFICATION	0.0018261123988277206	DESIGN
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9995598186177992	WITHOUT_CLASSIFICATION	4.4018138220077753E-4	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9999654444739824	WITHOUT_CLASSIFICATION	3.4555526017591515E-5	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9999654444739824	WITHOUT_CLASSIFICATION	3.4555526017591515E-5	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.99994565011453	WITHOUT_CLASSIFICATION	5.434988546996638E-5	DESIGN
primary key constraint	WITHOUT_CLASSIFICATION	0.9999643248343574	WITHOUT_CLASSIFICATION	3.5675165642506764E-5	DESIGN
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9996971008717528	WITHOUT_CLASSIFICATION	3.028991282472491E-4	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9999370949212393	WITHOUT_CLASSIFICATION	6.29050787607799E-5	DESIGN
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.99990948287709	WITHOUT_CLASSIFICATION	9.051712290990139E-5	DESIGN
an identifier mapper => getkey will be included in the getnonduplicatedpropertyiterator() and checked later so it needs to be excluded	WITHOUT_CLASSIFICATION	0.99955423322813	WITHOUT_CLASSIFICATION	4.4576677186997224E-4	DESIGN
if the hibernate-mapping did not specify a schema/catalog use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping or as params they will already be initialized and will override the values set here (they are in identifiergeneratorproperties)	WITHOUT_CLASSIFICATION	0.9995665568642137	WITHOUT_CLASSIFICATION	4.3344313578636494E-4	DESIGN
pass the entity-name if not a collection-id	WITHOUT_CLASSIFICATION	0.9999557141584218	WITHOUT_CLASSIFICATION	4.428584157825668E-5	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.99994565011453	WITHOUT_CLASSIFICATION	5.434988546996638E-5	DESIGN
primary key constraint	WITHOUT_CLASSIFICATION	0.9999643248343574	WITHOUT_CLASSIFICATION	3.5675165642506764E-5	DESIGN
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9973242516712545	WITHOUT_CLASSIFICATION	0.0026757483287455394	DESIGN
needed to satisfy keyvalue	WITHOUT_CLASSIFICATION	0.9999345398703773	WITHOUT_CLASSIFICATION	6.54601296227099E-5	DESIGN
empty means no scoping	WITHOUT_CLASSIFICATION	0.999949013695365	WITHOUT_CLASSIFICATION	5.098630463500103E-5	DESIGN
index should be last column listed	WITHOUT_CLASSIFICATION	0.993749267280135	WITHOUT_CLASSIFICATION	0.006250732719865009	DESIGN
if it is a formula index use the element columns in the pk	WITHOUT_CLASSIFICATION	0.9994651027543439	WITHOUT_CLASSIFICATION	5.348972456561909E-4	DESIGN
don't create a unique key 'cos some databases don't like a uk on nullable columns	WITHOUT_CLASSIFICATION	0.9949920750937434	WITHOUT_CLASSIFICATION	0.0050079249062565815	DESIGN
arraylist list = new arraylist()list.addall( getkey().getconstraintcolumns() )list.addall( getindex().getconstraintcolumns() )getcollectiontable().createuniquekey(list)	WITHOUT_CLASSIFICATION	0.9999464785205507	WITHOUT_CLASSIFICATION	5.352147944930056E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.9999416463427383	WITHOUT_CLASSIFICATION	5.835365726173977E-5	DESIGN
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.999488172452413	WITHOUT_CLASSIFICATION	5.118275475869723E-4	DESIGN
todo we could just return all false	WITHOUT_CLASSIFICATION	0.7668413074984077	WITHOUT_CLASSIFICATION	0.23315869250159232	DESIGN
the case of a foreign key to something other than the pk is handled in createpropertyrefconstraints	WITHOUT_CLASSIFICATION	0.999765021792009	WITHOUT_CLASSIFICATION	2.3497820799099574E-4	DESIGN
todo we could just return all false	WITHOUT_CLASSIFICATION	0.7668413074984077	WITHOUT_CLASSIFICATION	0.23315869250159232	DESIGN
if the property mapping consists of all formulas make it non-updateable	WITHOUT_CLASSIFICATION	0.9998113084555205	WITHOUT_CLASSIFICATION	1.8869154447961417E-4	DESIGN
columnupdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9994776716632774	WITHOUT_CLASSIFICATION	5.223283367225297E-4	DESIGN
if the property mapping consists of all formulas make it insertable	WITHOUT_CLASSIFICATION	0.9998113084555205	WITHOUT_CLASSIFICATION	1.8869154447961417E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999505534292346	WITHOUT_CLASSIFICATION	4.944657076539868E-4	DESIGN
expected type is intrinsic here	WITHOUT_CLASSIFICATION	0.996070592807502	WITHOUT_CLASSIFICATION	0.003929407192498019	DESIGN
}	WITHOUT_CLASSIFICATION	0.9999416463427383	WITHOUT_CLASSIFICATION	5.835365726173977E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.9999416463427383	WITHOUT_CLASSIFICATION	5.835365726173977E-5	DESIGN
return memberpersister.getpropertytype(propertyname)	WITHOUT_CLASSIFICATION	0.9997737682021011	WITHOUT_CLASSIFICATION	2.2623179789898212E-4	DESIGN
return memberpersister.tocolumns(alias propertyname)	WITHOUT_CLASSIFICATION	0.9997739766831536	WITHOUT_CLASSIFICATION	2.2602331684634712E-4	DESIGN
return memberpersister.gettype()	WITHOUT_CLASSIFICATION	0.9997737682021011	WITHOUT_CLASSIFICATION	2.2623179789898212E-4	DESIGN
&& !indexisformula	WITHOUT_CLASSIFICATION	0.9999683600645162	WITHOUT_CLASSIFICATION	3.16399354838819E-5	DESIGN
return !isonetomany()	WITHOUT_CLASSIFICATION	0.9999770898606729	WITHOUT_CLASSIFICATION	2.2910139327149084E-5	DESIGN
instanceof associationtype	WITHOUT_CLASSIFICATION	0.9999523097740385	WITHOUT_CLASSIFICATION	4.7690225961596804E-5	DESIGN
we need to determine the best way to know that two joinables represent a single many-to-many	WITHOUT_CLASSIFICATION	0.9933571325631315	WITHOUT_CLASSIFICATION	0.006642867436868492	DESIGN
strip leading ''	WITHOUT_CLASSIFICATION	0.9999673954158103	WITHOUT_CLASSIFICATION	3.2604584189692526E-5	DESIGN
public boolean issubselectloadable()	WITHOUT_CLASSIFICATION	0.9998679226948352	WITHOUT_CLASSIFICATION	1.320773051648915E-4	DESIGN
key	WITHOUT_CLASSIFICATION	0.9999445486742331	WITHOUT_CLASSIFICATION	5.545132576677958E-5	DESIGN
columns	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
sql statements	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
extra information about the element type	WITHOUT_CLASSIFICATION	0.9990390945841005	WITHOUT_CLASSIFICATION	9.609054158996094E-4	DESIGN
types	WITHOUT_CLASSIFICATION	0.999922925675744	WITHOUT_CLASSIFICATION	7.707432425587412E-5	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.99994565011453	WITHOUT_CLASSIFICATION	5.434988546996638E-5	DESIGN
private final string unquotedidentifiercolumnname	WITHOUT_CLASSIFICATION	0.9994937391690752	WITHOUT_CLASSIFICATION	5.062608309247364E-4	DESIGN
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9981287541078003	WITHOUT_CLASSIFICATION	0.0018712458921995908	DESIGN
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9991101160445113	WITHOUT_CLASSIFICATION	8.898839554886943E-4	DESIGN
nativesql collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9989264674667604	WITHOUT_CLASSIFICATION	0.0010735325332396043	DESIGN
unquotedkeycolumnnames = stringhelper.unquote(keycolumnaliases)	WITHOUT_CLASSIFICATION	0.9999477159006084	WITHOUT_CLASSIFICATION	5.228409939150192E-5	DESIGN
element	WITHOUT_CLASSIFICATION	0.9999538483398152	WITHOUT_CLASSIFICATION	4.615166018478005E-5	DESIGN
nativesql collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9991063555412689	WITHOUT_CLASSIFICATION	8.936444587310538E-4	DESIGN
index and row select	WITHOUT_CLASSIFICATION	0.9999725193665849	WITHOUT_CLASSIFICATION	2.748063341503557E-5	DESIGN
nativesql collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9991211222670876	WITHOUT_CLASSIFICATION	8.788777329124422E-4	DESIGN
unquotedidentifiercolumnname = identifiercolumnalias	WITHOUT_CLASSIFICATION	0.9999477159006084	WITHOUT_CLASSIFICATION	5.228409939150192E-5	DESIGN
unquotedidentifiercolumnname = null	WITHOUT_CLASSIFICATION	0.9998975644606258	WITHOUT_CLASSIFICATION	1.0243553937422633E-4	DESIGN
generate the sql	WITHOUT_CLASSIFICATION	0.9999890464633964	WITHOUT_CLASSIFICATION	1.0953536603553616E-5	DESIGN
for non-arrays we don't need to know the element class elementtype.returnedclass()	WITHOUT_CLASSIFICATION	0.9992446435198008	WITHOUT_CLASSIFICATION	7.553564801991769E-4	DESIGN
not all classpersisters implement propertymapping!	WITHOUT_CLASSIFICATION	0.99900036783048	WITHOUT_CLASSIFICATION	9.996321695199448E-4	DESIGN
handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9543317825658556	WITHOUT_CLASSIFICATION	0.04566821743414434	DESIGN
handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9194664267253165	WITHOUT_CLASSIFICATION	0.08053357327468347	DESIGN
if there is a user-specified loader return that todo filters!?	WITHOUT_CLASSIFICATION	0.7002592409692847	DESIGN	0.2997407590307153	WITHOUT_CLASSIFICATION
take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9975289023251117	WITHOUT_CLASSIFICATION	0.002471097674888276	DESIGN
strip leading ''	WITHOUT_CLASSIFICATION	0.9999673954158103	WITHOUT_CLASSIFICATION	3.2604584189692526E-5	DESIGN
run a subquery loader	WITHOUT_CLASSIFICATION	0.9999009926897753	WITHOUT_CLASSIFICATION	9.90073102246769E-5	DESIGN
needed by arrays	WITHOUT_CLASSIFICATION	0.9999441846888666	WITHOUT_CLASSIFICATION	5.581531113349884E-5	DESIGN
todo something with formulas	WITHOUT_CLASSIFICATION	0.9681377894080766	WITHOUT_CLASSIFICATION	0.031862210591923436	DESIGN
an assertion	WITHOUT_CLASSIFICATION	0.9999762812152703	WITHOUT_CLASSIFICATION	2.3718784729740016E-5	DESIGN
remove all the old entries	WITHOUT_CLASSIFICATION	0.9999804937836478	WITHOUT_CLASSIFICATION	1.950621635216052E-5	DESIGN
create all the new entries	WITHOUT_CLASSIFICATION	0.9999932699215915	WITHOUT_CLASSIFICATION	6.730078408505561E-6	DESIGN
&& !indexisformula	WITHOUT_CLASSIFICATION	0.9999683600645162	WITHOUT_CLASSIFICATION	3.16399354838819E-5	DESIGN
&& !indexisformula	WITHOUT_CLASSIFICATION	0.9999683600645162	WITHOUT_CLASSIFICATION	3.16399354838819E-5	DESIGN
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999961239051183	WITHOUT_CLASSIFICATION	3.876094881740064E-6	DESIGN
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999924520808097	WITHOUT_CLASSIFICATION	7.547919190329153E-6	DESIGN
==elementtype ??	WITHOUT_CLASSIFICATION	0.9999500664284048	WITHOUT_CLASSIFICATION	4.99335715951419E-5	DESIGN
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999955607049266	WITHOUT_CLASSIFICATION	4.439295073323575E-6	DESIGN
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9998711058630162	WITHOUT_CLASSIFICATION	1.2889413698371314E-4	DESIGN
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9998740340176675	WITHOUT_CLASSIFICATION	1.259659823324788E-4	DESIGN
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9948720219727704	WITHOUT_CLASSIFICATION	0.005127978027229624	DESIGN
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999978417688197	WITHOUT_CLASSIFICATION	2.1582311803085177E-6	DESIGN
buf.append( selectfragment( lhsalias "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.988292377073243	WITHOUT_CLASSIFICATION	0.011707622926757016	DESIGN
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9997402705552653	WITHOUT_CLASSIFICATION	2.5972944473472316E-4	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999922099912313	WITHOUT_CLASSIFICATION	7.790008768810158E-6	DESIGN
private final string roottablename	WITHOUT_CLASSIFICATION	0.9994937391690752	WITHOUT_CLASSIFICATION	5.062608309247364E-4	DESIGN
initialization	WITHOUT_CLASSIFICATION	0.9999896673676215	WITHOUT_CLASSIFICATION	1.0332632378532938E-5	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.99994565011453	WITHOUT_CLASSIFICATION	5.434988546996638E-5	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999922099912313	WITHOUT_CLASSIFICATION	7.790008768810158E-6	DESIGN
execute the sql	WITHOUT_CLASSIFICATION	0.9999882784514156	WITHOUT_CLASSIFICATION	1.1721548584469123E-5	DESIGN
this could also just be true all the time	WITHOUT_CLASSIFICATION	0.9999243232799547	WITHOUT_CLASSIFICATION	7.567672004519625E-5	DESIGN
chop the last union (all)	WITHOUT_CLASSIFICATION	0.999980959019406	WITHOUT_CLASSIFICATION	1.9040980594092387E-5	DESIGN
todo check this.	WITHOUT_CLASSIFICATION	0.9487536461953974	WITHOUT_CLASSIFICATION	0.05124635380460271	DESIGN
initialization	WITHOUT_CLASSIFICATION	0.9999896673676215	WITHOUT_CLASSIFICATION	1.0332632378532938E-5	DESIGN
properties of this class including inherited properties	WITHOUT_CLASSIFICATION	0.9966317323409893	WITHOUT_CLASSIFICATION	0.0033682676590105235	DESIGN
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9970997256694675	WITHOUT_CLASSIFICATION	0.002900274330532499	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9947099790486285	WITHOUT_CLASSIFICATION	0.005290020951371557	DESIGN
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an sql case	WITHOUT_CLASSIFICATION	0.9999154209425961	WITHOUT_CLASSIFICATION	8.457905740385656E-5	DESIGN
multitables	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.99994565011453	WITHOUT_CLASSIFICATION	5.434988546996638E-5	DESIGN
subclass closure properties	WITHOUT_CLASSIFICATION	0.99979620150549	WITHOUT_CLASSIFICATION	2.0379849450990895E-4	DESIGN
subclasses	WITHOUT_CLASSIFICATION	0.9999265175686244	WITHOUT_CLASSIFICATION	7.348243137555223E-5	DESIGN
( (column) model.gettable().getprimarykey().getcolumniterator().next() ).getname()	WITHOUT_CLASSIFICATION	0.9996063429564355	WITHOUT_CLASSIFICATION	3.936570435645544E-4	DESIGN
( (column) sc.gettable().getprimarykey().getcolumniterator().next() ).getname()	WITHOUT_CLASSIFICATION	0.9996063429564355	WITHOUT_CLASSIFICATION	3.936570435645544E-4	DESIGN
don't need subclass tables because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9948302809636699	WITHOUT_CLASSIFICATION	0.00516971903633011	DESIGN
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9987782843327984	WITHOUT_CLASSIFICATION	0.0012217156672016866	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999922099912313	WITHOUT_CLASSIFICATION	7.790008768810158E-6	DESIGN
properties of this class including inherited properties	WITHOUT_CLASSIFICATION	0.9966317323409893	WITHOUT_CLASSIFICATION	0.0033682676590105235	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9947099790486285	WITHOUT_CLASSIFICATION	0.005290020951371557	DESIGN
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999953681615125	WITHOUT_CLASSIFICATION	4.631838487545654E-6	DESIGN
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999149325069067	WITHOUT_CLASSIFICATION	8.506749309336642E-5	DESIGN
discriminator column	WITHOUT_CLASSIFICATION	0.9998819570374898	WITHOUT_CLASSIFICATION	1.1804296251012097E-4	DESIGN
initialization	WITHOUT_CLASSIFICATION	0.9999896673676215	WITHOUT_CLASSIFICATION	1.0332632378532938E-5	DESIGN
private final map propertytablenumbersbyname = new hashmap()	WITHOUT_CLASSIFICATION	0.9999553159621033	WITHOUT_CLASSIFICATION	4.468403789678451E-5	DESIGN
class + table	WITHOUT_CLASSIFICATION	0.9999969574351628	WITHOUT_CLASSIFICATION	3.0425648371759403E-6	DESIGN
discriminator	WITHOUT_CLASSIFICATION	0.9999672261672361	WITHOUT_CLASSIFICATION	3.2773832763990036E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9998313088695376	WITHOUT_CLASSIFICATION	1.6869113046233064E-4	DESIGN
subclasses	WITHOUT_CLASSIFICATION	0.9999265175686244	WITHOUT_CLASSIFICATION	7.348243137555223E-5	DESIGN
execute the sql	WITHOUT_CLASSIFICATION	0.9999882784514156	WITHOUT_CLASSIFICATION	1.1721548584469123E-5	DESIGN
joins	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
propertytablenumbersbyname.put( prop.getname() join )	WITHOUT_CLASSIFICATION	0.9993718848875052	WITHOUT_CLASSIFICATION	6.281151124947531E-4	DESIGN
access cached sql	WITHOUT_CLASSIFICATION	0.9999554799519221	WITHOUT_CLASSIFICATION	4.4520048077812884E-5	DESIGN
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9990972759078769	WITHOUT_CLASSIFICATION	9.027240921231558E-4	DESIGN
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.999774254014122	WITHOUT_CLASSIFICATION	2.257459858780918E-4	DESIGN
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.999774254014122	WITHOUT_CLASSIFICATION	2.257459858780918E-4	DESIGN
render the sql	WITHOUT_CLASSIFICATION	0.9999898441406736	WITHOUT_CLASSIFICATION	1.0155859326427997E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999505534292346	WITHOUT_CLASSIFICATION	4.944657076539868E-4	DESIGN
moved up from abstractentitypersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9959102524711517	WITHOUT_CLASSIFICATION	0.00408974752884824	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
the optional sql string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9997277458864703	WITHOUT_CLASSIFICATION	2.7225411352966206E-4	DESIGN
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9932566553266928	WITHOUT_CLASSIFICATION	0.006743344673307161	DESIGN
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9982328266664993	WITHOUT_CLASSIFICATION	0.0017671733335007085	DESIGN
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9994132747923459	WITHOUT_CLASSIFICATION	5.867252076541409E-4	DESIGN
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9997314391593158	WITHOUT_CLASSIFICATION	2.685608406841737E-4	DESIGN
sql strings	WITHOUT_CLASSIFICATION	0.9999686484845443	WITHOUT_CLASSIFICATION	3.1351515455744574E-5	DESIGN
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9984853354671105	WITHOUT_CLASSIFICATION	0.0015146645328894901	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9998313088695376	WITHOUT_CLASSIFICATION	1.6869113046233064E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
identifier	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
version	WITHOUT_CLASSIFICATION	0.9999453476849433	WITHOUT_CLASSIFICATION	5.465231505681734E-5	DESIGN
where string	WITHOUT_CLASSIFICATION	0.9998970109401081	WITHOUT_CLASSIFICATION	1.0298905989187072E-4	DESIGN
subclass property closure	WITHOUT_CLASSIFICATION	0.9999639958961455	WITHOUT_CLASSIFICATION	3.6004103854640656E-5	DESIGN
before add -)	WITHOUT_CLASSIFICATION	0.9999948892910289	WITHOUT_CLASSIFICATION	5.110708971156449E-6	DESIGN
handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9994933982613389	WITHOUT_CLASSIFICATION	5.066017386611243E-4	DESIGN
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9993811022568505	WITHOUT_CLASSIFICATION	6.188977431495615E-4	DESIGN
note early exit here	WITHOUT_CLASSIFICATION	0.9999821175334574	WITHOUT_CLASSIFICATION	1.7882466542534653E-5	DESIGN
object have been loaded with setreadonly(true) hhh-2236	WITHOUT_CLASSIFICATION	0.9997296583759511	WITHOUT_CLASSIFICATION	2.703416240489095E-4	DESIGN
note this assumes something about how propertyselectfragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9998649057773641	WITHOUT_CLASSIFICATION	1.3509422263582345E-4	DESIGN
strip leading " "	WITHOUT_CLASSIFICATION	0.9999611557313761	WITHOUT_CLASSIFICATION	3.8844268623933464E-5	DESIGN
if there is no resulting row return null	WITHOUT_CLASSIFICATION	0.9998895213051276	WITHOUT_CLASSIFICATION	1.1047869487237882E-4	DESIGN
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999783872556232	WITHOUT_CLASSIFICATION	2.1612744376785785E-5	DESIGN
null owner ok??	WITHOUT_CLASSIFICATION	0.9999720066701836	WITHOUT_CLASSIFICATION	2.799332981630571E-5	DESIGN
null sql means that the only lazy properties are shared pk one-to-one associations which are handled differently in the type#nullsafeget code	WITHOUT_CLASSIFICATION	0.9516345468661223	WITHOUT_CLASSIFICATION	0.048365453133877676	DESIGN
create a new from node for the referenced class.	WITHOUT_CLASSIFICATION	0.9986985087854133	WITHOUT_CLASSIFICATION	0.0013014912145867157	DESIGN
the difficulty here is exactly what do we update in order to force the version to be incremented in the db	WITHOUT_CLASSIFICATION	0.9802798301155105	WITHOUT_CLASSIFICATION	0.019720169884489554	DESIGN
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9997191887251349	WITHOUT_CLASSIFICATION	2.8081127486509873E-4	DESIGN
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.999238086439657	WITHOUT_CLASSIFICATION	7.619135603430499E-4	DESIGN
enable for hhh-440 which we don't like	WITHOUT_CLASSIFICATION	0.9976435210113066	WITHOUT_CLASSIFICATION	0.002356478988693399	DESIGN
aliases	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9994509343484326	WITHOUT_CLASSIFICATION	5.490656515675144E-4	DESIGN
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999225803642032	WITHOUT_CLASSIFICATION	7.741963579670504E-5	DESIGN
fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9994167432142844	WITHOUT_CLASSIFICATION	5.832567857155157E-4	DESIGN
embedded composite ids ( alias.idname1 alias.idname2 )	WITHOUT_CLASSIFICATION	0.9988370652282536	WITHOUT_CLASSIFICATION	0.001162934771746415	DESIGN
todo skip formulas?	WITHOUT_CLASSIFICATION	0.9678861308182671	WITHOUT_CLASSIFICATION	0.032113869181732854	DESIGN
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9982190461559657	WITHOUT_CLASSIFICATION	0.0017809538440342655	DESIGN
do two passes for collection property-ref!	WITHOUT_CLASSIFICATION	0.9962856015318579	WITHOUT_CLASSIFICATION	0.003714398468142075	DESIGN
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9996598499624507	WITHOUT_CLASSIFICATION	3.401500375493207E-4	DESIGN
todo eventually rowidname[j]	WITHOUT_CLASSIFICATION	0.9065935415647366	WITHOUT_CLASSIFICATION	0.09340645843526334	DESIGN
this is a property of the table which we are updating	WITHOUT_CLASSIFICATION	0.997909705565771	WITHOUT_CLASSIFICATION	0.0020902944342290073	DESIGN
special shortcut for id properties skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9983853714780129	WITHOUT_CLASSIFICATION	0.0016146285219871355	DESIGN
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9995226024329936	WITHOUT_CLASSIFICATION	4.7739756700637096E-4	DESIGN
nothing to do even if the operand is a parameter no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.996149878002205	WITHOUT_CLASSIFICATION	0.003850121997795012	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9954960082636329	WITHOUT_CLASSIFICATION	0.004503991736367104	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9999632801452529	WITHOUT_CLASSIFICATION	3.671985474699109E-5	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9999957603435251	WITHOUT_CLASSIFICATION	4.239656474808847E-6	DESIGN
more specifically "? [op] datetime" 1) if the operator is minus the param needs to be of some datetime type 2) if the operator is plus the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9582781111599724	WITHOUT_CLASSIFICATION	0.04172188884002762	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9999632801452529	WITHOUT_CLASSIFICATION	3.671985474699109E-5	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9954960082636329	WITHOUT_CLASSIFICATION	0.004503991736367104	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9999957603435251	WITHOUT_CLASSIFICATION	4.239656474808847E-6	DESIGN
add the primary key	WITHOUT_CLASSIFICATION	0.9999970248487556	WITHOUT_CLASSIFICATION	2.975151244479284E-6	DESIGN
delegate already handles pk columns	WITHOUT_CLASSIFICATION	0.9998936026183433	WITHOUT_CLASSIFICATION	1.0639738165678531E-4	DESIGN
we can't batch joined inserts especially not if it is an identity insert nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9975992795669852	WITHOUT_CLASSIFICATION	0.0024007204330147892	DESIGN
render the sql query	WITHOUT_CLASSIFICATION	0.9999926139616275	WITHOUT_CLASSIFICATION	7.386038372541211E-6	DESIGN
write the values of fields onto the prepared statement - we must use the state at the time the insert was issued (cos of foreign key constraints). not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9998714297929584	WITHOUT_CLASSIFICATION	1.2857020704158458E-4	DESIGN
todo shouldnt inserts be expectations.none?	WITHOUT_CLASSIFICATION	0.6113280134760796	DESIGN	0.3886719865239205	WITHOUT_CLASSIFICATION
don't bother trying to update we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999757654029543	WITHOUT_CLASSIFICATION	2.4234597045705862E-5	DESIGN
if all fields are null we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9898763821473098	WITHOUT_CLASSIFICATION	0.010123617852690234	DESIGN
there is probably a row there so try to update if no rows were updated we will find out	WITHOUT_CLASSIFICATION	0.9999865630589522	WITHOUT_CLASSIFICATION	1.3436941047908562E-5	DESIGN
note updates to joined tables can't be batched	WITHOUT_CLASSIFICATION	0.9993370393950006	WITHOUT_CLASSIFICATION	6.629606049994808E-4	DESIGN
starting index	WITHOUT_CLASSIFICATION	0.999974867635972	WITHOUT_CLASSIFICATION	2.5132364028088305E-5	DESIGN
now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999900375317229	WITHOUT_CLASSIFICATION	9.962468277093846E-6	DESIGN
write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9988217716119693	WITHOUT_CLASSIFICATION	0.0011782283880306234	DESIGN
render the sql query	WITHOUT_CLASSIFICATION	0.9999926139616275	WITHOUT_CLASSIFICATION	7.386038372541211E-6	DESIGN
do the key. the key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9978694900845924	WITHOUT_CLASSIFICATION	0.002130509915407531	DESIGN
we should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9988621881606339	WITHOUT_CLASSIFICATION	0.0011378118393660828	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9914165420054851	WITHOUT_CLASSIFICATION	0.008583457994514921	DESIGN
note dirtyfields==null means we had no snapshot and we couldn't get one using select-before-update oldfields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyfields)	WITHOUT_CLASSIFICATION	0.9998721506198898	WITHOUT_CLASSIFICATION	1.27849380110263E-4	DESIGN
more specifically "datetime [op] ?" 1) if the operator is minus we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is plus the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9719923442825095	WITHOUT_CLASSIFICATION	0.028007655717490587	DESIGN
for the case of dynamic-update="true" we need to generate the update sql	WITHOUT_CLASSIFICATION	0.9999197852466636	WITHOUT_CLASSIFICATION	8.021475333642314E-5	DESIGN
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9995839043812159	WITHOUT_CLASSIFICATION	4.160956187841084E-4	DESIGN
for the case of dynamic-update="false" or no snapshot we use the static sql	WITHOUT_CLASSIFICATION	0.9999613922342165	WITHOUT_CLASSIFICATION	3.8607765783587934E-5	DESIGN
if not "get" then try "is"	WITHOUT_CLASSIFICATION	0.9999745714417229	WITHOUT_CLASSIFICATION	2.5428558277125034E-5	DESIGN
now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999831318685249	WITHOUT_CLASSIFICATION	1.686813147496116E-5	DESIGN
for the case of dynamic-insert="true" we need to generate the insert sql	WITHOUT_CLASSIFICATION	0.9995601216042804	WITHOUT_CLASSIFICATION	4.398783957194965E-4	DESIGN
for the case of dynamic-insert="true" we need to generate the insert sql	WITHOUT_CLASSIFICATION	0.9995601216042804	WITHOUT_CLASSIFICATION	4.398783957194965E-4	DESIGN
for the case of dynamic-insert="false" use the static sql	WITHOUT_CLASSIFICATION	0.999908009930336	WITHOUT_CLASSIFICATION	9.199006966405884E-5	DESIGN
for the case of dynamic-insert="false" use the static sql	WITHOUT_CLASSIFICATION	0.999908009930336	WITHOUT_CLASSIFICATION	9.199006966405884E-5	DESIGN
not supported	WITHOUT_CLASSIFICATION	0.9999937143121599	WITHOUT_CLASSIFICATION	6.28568784011253E-6	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9914165420054851	WITHOUT_CLASSIFICATION	0.008583457994514921	DESIGN
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9978253387664905	WITHOUT_CLASSIFICATION	0.002174661233509559	DESIGN
otherwise utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9998572563727799	WITHOUT_CLASSIFICATION	1.427436272200758E-4	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9997580634571346	WITHOUT_CLASSIFICATION	2.4193654286546102E-4	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9997580634571346	WITHOUT_CLASSIFICATION	2.4193654286546102E-4	DESIGN
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999260076548251	WITHOUT_CLASSIFICATION	7.399234517491425E-5	DESIGN
notice that we skip the first table it is the driving table!	WITHOUT_CLASSIFICATION	0.9999192515127268	WITHOUT_CLASSIFICATION	8.074848727320416E-5	DESIGN
we can inner join to superclass tables (the row must be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9760218196384163	WITHOUT_CLASSIFICATION	0.023978180361583765	DESIGN
skip the driving table	WITHOUT_CLASSIFICATION	0.9999981023815849	WITHOUT_CLASSIFICATION	1.8976184151428877E-6	DESIGN
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9986953898218667	WITHOUT_CLASSIFICATION	0.0013046101781332801	DESIGN
here we work under the following assumptions ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime always results in a double 3) datetime - {something other than datetime} always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.999848670417681	WITHOUT_CLASSIFICATION	1.513295823190141E-4	DESIGN
render the where and from parts	WITHOUT_CLASSIFICATION	0.9984047684631198	WITHOUT_CLASSIFICATION	0.0015952315368802591	DESIGN
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9993367303372807	WITHOUT_CLASSIFICATION	6.632696627194112E-4	DESIGN
now render the joins	WITHOUT_CLASSIFICATION	0.999994418060565	WITHOUT_CLASSIFICATION	5.581939434893832E-6	DESIGN
this will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9995494235776626	WITHOUT_CLASSIFICATION	4.505764223373244E-4	DESIGN
now render the select clause	WITHOUT_CLASSIFICATION	0.9999919810707741	WITHOUT_CLASSIFICATION	8.018929225851425E-6	DESIGN
now tie it all together	WITHOUT_CLASSIFICATION	0.9999777957941351	WITHOUT_CLASSIFICATION	2.2204205864890892E-5	DESIGN
insert/update/delete sql	WITHOUT_CLASSIFICATION	0.9999577000400072	WITHOUT_CLASSIFICATION	4.229995999285693E-5	DESIGN
select sql	WITHOUT_CLASSIFICATION	0.9999376162094585	WITHOUT_CLASSIFICATION	6.238379054143638E-5	DESIGN
no need to check laziness dirty checking handles that	WITHOUT_CLASSIFICATION	0.9998322604019259	WITHOUT_CLASSIFICATION	1.6773959807411088E-4	DESIGN
fully resolve the map reference create implicit joins.	WITHOUT_CLASSIFICATION	0.9999856782067096	WITHOUT_CLASSIFICATION	1.4321793290454425E-5	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9847082776449472	WITHOUT_CLASSIFICATION	0.015291722355052866	DESIGN
the basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9998305976362047	WITHOUT_CLASSIFICATION	1.6940236379532912E-4	DESIGN
for dialects which are known to not support ansi-sql row-value-constructor syntax we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9806977074645588	WITHOUT_CLASSIFICATION	0.019302292535441263	DESIGN
due to the complexity in initializing the selectclause do not generate one here. if it is not found simply return null also do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9996288431482453	WITHOUT_CLASSIFICATION	3.7115685175467193E-4	DESIGN
check the version unsaved-value if appropriate	WITHOUT_CLASSIFICATION	0.9997600348920415	WITHOUT_CLASSIFICATION	2.3996510795859416E-4	DESIGN
let this take precedence if defined since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9972119584342274	WITHOUT_CLASSIFICATION	0.002788041565772647	DESIGN
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999912291879809	WITHOUT_CLASSIFICATION	8.770812019095438E-6	DESIGN
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9996700315229192	WITHOUT_CLASSIFICATION	3.2996847708078014E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9999650754452732	WITHOUT_CLASSIFICATION	3.4924554726685986E-5	DESIGN
for property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.999792824532179	WITHOUT_CLASSIFICATION	2.0717546782104E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
if there is no resulting row return null	WITHOUT_CLASSIFICATION	0.9998895213051276	WITHOUT_CLASSIFICATION	1.1047869487237882E-4	DESIGN
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999141444129509	WITHOUT_CLASSIFICATION	8.585558704906489E-5	DESIGN
if this from element is a collection and the path is a collection property (maxindex etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9953681000500443	WITHOUT_CLASSIFICATION	0.004631899949955732	DESIGN
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996327770076684	WITHOUT_CLASSIFICATION	3.6722299233157504E-4	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9999814237445656	WITHOUT_CLASSIFICATION	1.857625543446649E-5	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9999814237445656	WITHOUT_CLASSIFICATION	1.857625543446649E-5	DESIGN
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999362054039854	WITHOUT_CLASSIFICATION	6.379459601447515E-5	DESIGN
try "get"	WITHOUT_CLASSIFICATION	0.999908995254906	WITHOUT_CLASSIFICATION	9.100474509399906E-5	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999929005498752	WITHOUT_CLASSIFICATION	7.0994501248312784E-6	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999929005498752	WITHOUT_CLASSIFICATION	7.0994501248312784E-6	DESIGN
should be safe to only ever expect entitypersister references here	WITHOUT_CLASSIFICATION	0.9955879342822184	WITHOUT_CLASSIFICATION	0.004412065717781554	DESIGN
this page intentionally left blank )	WITHOUT_CLASSIFICATION	0.9967741141123537	WITHOUT_CLASSIFICATION	0.003225885887646202	DESIGN
do not do anything	WITHOUT_CLASSIFICATION	0.9999922346809942	WITHOUT_CLASSIFICATION	7.765319005924964E-6	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999474365512322	WITHOUT_CLASSIFICATION	5.256344876779287E-5	DESIGN
cant instantiate	WITHOUT_CLASSIFICATION	0.999947769429866	WITHOUT_CLASSIFICATION	5.223057013400556E-5	DESIGN
if it is a property of an embedded component invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9997519574535355	WITHOUT_CLASSIFICATION	2.480425464644703E-4	DESIGN
otherwise	WITHOUT_CLASSIFICATION	0.9999421270562712	WITHOUT_CLASSIFICATION	5.7872943728775856E-5	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999631382779999	WITHOUT_CLASSIFICATION	3.68617220001962E-5	DESIGN
note interfaces is assumed to already contain hibernateproxy.class	WITHOUT_CLASSIFICATION	0.9997382506777657	WITHOUT_CLASSIFICATION	2.61749322234435E-4	DESIGN
note interfaces is assumed to already contain hibernateproxy.class	WITHOUT_CLASSIFICATION	0.9997382506777657	WITHOUT_CLASSIFICATION	2.61749322234435E-4	DESIGN
hhh-2481 make sure the callback gets cleared otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9979371155282881	WITHOUT_CLASSIFICATION	0.0020628844717117587	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9999753772042448	WITHOUT_CLASSIFICATION	2.4622795755180814E-5	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9999753772042448	WITHOUT_CLASSIFICATION	2.4622795755180814E-5	DESIGN
note interface is assumed to already contain hibernateproxy.class	WITHOUT_CLASSIFICATION	0.9997650312787326	WITHOUT_CLASSIFICATION	2.3496872126729747E-4	DESIGN
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999717855897564	WITHOUT_CLASSIFICATION	2.821441024363474E-5	DESIGN
todo!	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
get the caller	WITHOUT_CLASSIFICATION	0.9999959121091048	WITHOUT_CLASSIFICATION	4.087890895213162E-6	DESIGN
get the caller principals	WITHOUT_CLASSIFICATION	0.9999947255774919	WITHOUT_CLASSIFICATION	5.274422508044573E-6	DESIGN
private static final alias default_alias = new alias(10 null)	WITHOUT_CLASSIFICATION	0.9998715255089901	WITHOUT_CLASSIFICATION	1.2847449100997194E-4	DESIGN
needed to bump this up to dotnode because that is the only thing which currently knows about the property-ref path in the correct format it is either this or recurse over the dotnodes constructing the property path just like dotnode does internally	WITHOUT_CLASSIFICATION	0.9935591788424886	WITHOUT_CLASSIFICATION	0.006440821157511468	DESIGN
if the identifier is quoted remove the quotes	WITHOUT_CLASSIFICATION	0.9994403255839008	WITHOUT_CLASSIFICATION	5.596744160992088E-4	DESIGN
truncate the identifier to the max alias length less the suffix length	WITHOUT_CLASSIFICATION	0.9989849789884289	WITHOUT_CLASSIFICATION	0.0010150210115712165	DESIGN
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9995142407800063	WITHOUT_CLASSIFICATION	4.857592199938204E-4	DESIGN
null is not considered the same type as integer. $non-nls-1 $non-nls-1	WITHOUT_CLASSIFICATION	0.9981899307352431	WITHOUT_CLASSIFICATION	0.0018100692647569664	DESIGN
the outerjoinsafterwhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9948210686601896	WITHOUT_CLASSIFICATION	0.005178931339810413	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.999877157940333	WITHOUT_CLASSIFICATION	1.2284205966698838E-4	DESIGN
if the condition is not already there	WITHOUT_CLASSIFICATION	0.9999717376278863	WITHOUT_CLASSIFICATION	2.8262372113771587E-5	DESIGN
dontspace.add("'")	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
for mysql	WITHOUT_CLASSIFICATION	0.9998976023957928	WITHOUT_CLASSIFICATION	1.023976042072234E-4	DESIGN
hashmap columnsunique = new hashmap()	WITHOUT_CLASSIFICATION	0.9999511370229465	WITHOUT_CLASSIFICATION	4.8862977053530456E-5	DESIGN
null caused some problems	WITHOUT_CLASSIFICATION	0.9999178461925377	WITHOUT_CLASSIFICATION	8.215380746231875E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9998110032392955	WITHOUT_CLASSIFICATION	1.8899676070448587E-4	DESIGN
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.995406755601679	WITHOUT_CLASSIFICATION	0.004593244398321048	DESIGN
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999578597571919	WITHOUT_CLASSIFICATION	4.214024280809474E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9998110032392955	WITHOUT_CLASSIFICATION	1.8899676070448587E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9998110032392955	WITHOUT_CLASSIFICATION	1.8899676070448587E-4	DESIGN
if true then execute db updates otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9998029260091466	WITHOUT_CLASSIFICATION	1.9707399085334303E-4	DESIGN
we only release the connection	WITHOUT_CLASSIFICATION	0.9999780942598495	WITHOUT_CLASSIFICATION	2.1905740150472976E-5	DESIGN
deprecated option	WITHOUT_CLASSIFICATION	0.9998713239488456	WITHOUT_CLASSIFICATION	1.28676051154372E-4	DESIGN
if an exception occurs during flush user must call rollback()	WITHOUT_CLASSIFICATION	0.9998627274934841	WITHOUT_CLASSIFICATION	1.372725065158249E-4	DESIGN
actually this last test is probably unnecessary since beforecompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999194303533956	WITHOUT_CLASSIFICATION	8.056964660445674E-5	DESIGN
this one only really needed for badly-behaved applications! (if the transactionmanager has a sychronization registered its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9933130819495211	WITHOUT_CLASSIFICATION	0.006686918050478979	DESIGN
create an dotnode ast for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999485452739041	WITHOUT_CLASSIFICATION	5.1454726095911416E-5	DESIGN
if an exception occurs during flush user must call rollback()	WITHOUT_CLASSIFICATION	0.9998627274934841	WITHOUT_CLASSIFICATION	1.372725065158249E-4	DESIGN
if we could not register a synchronization do the before/after completion callbacks ourself (but we need to let jdbccontext know that this is what we are going to do so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9579567309833555	WITHOUT_CLASSIFICATION	0.04204326901664447	DESIGN
swallow it and continue to roll back jta transaction	WITHOUT_CLASSIFICATION	0.9992158347600906	WITHOUT_CLASSIFICATION	7.841652399094086E-4	DESIGN
so the transaction is already rolled back by jta spec	WITHOUT_CLASSIFICATION	0.9998926556863293	WITHOUT_CLASSIFICATION	1.073443136705785E-4	DESIGN
this method is a noop if there is a synchronization!	WITHOUT_CLASSIFICATION	0.9917584592543559	WITHOUT_CLASSIFICATION	0.008241540745644193	DESIGN
two conditions where we need to transform this to a theta-join syntax 1) 'elem' is the "root from-element" in correlated subqueries 2) the dotnode.usethetastyleimplicitjoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9186327467261758	WITHOUT_CLASSIFICATION	0.0813672532738243	DESIGN
websphere however is not a sane jee/jta container	WITHOUT_CLASSIFICATION	0.9989579652339784	WITHOUT_CLASSIFICATION	0.0010420347660215473	DESIGN
for sane jee/jta containers the transaction itself functions as its identifier	WITHOUT_CLASSIFICATION	0.9999637722854083	WITHOUT_CLASSIFICATION	3.622771459161664E-5	DESIGN
swallow the transaction was finished	WITHOUT_CLASSIFICATION	0.9998869625948271	WITHOUT_CLASSIFICATION	1.1303740517281524E-4	DESIGN
all aliastoentitymapresulttransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995828776155108	WITHOUT_CLASSIFICATION	4.1712238448920493E-4	DESIGN
create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9998435404036241	WITHOUT_CLASSIFICATION	1.5645959637588445E-4	DESIGN
all distinctrootentityresulttransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995828776155108	WITHOUT_CLASSIFICATION	4.1712238448920493E-4	DESIGN
map of entitymode -> tuplizer	WITHOUT_CLASSIFICATION	0.9999871982646117	WITHOUT_CLASSIFICATION	1.2801735388274181E-5	DESIGN
this is a virtual id property	WITHOUT_CLASSIFICATION	0.9993856104450979	WITHOUT_CLASSIFICATION	6.143895549021195E-4	DESIGN
this one needed only for guessentitymode()	WITHOUT_CLASSIFICATION	0.9976975156194411	WITHOUT_CLASSIFICATION	0.002302484380558877	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9998784575736792	WITHOUT_CLASSIFICATION	1.2154242632091371E-4	DESIGN
todo move this to sf per hhh-3517 also see hhh-1907 and componentmetamodel	WITHOUT_CLASSIFICATION	0.9951607120545348	DESIGN	0.0048392879454652185	WITHOUT_CLASSIFICATION
then the pojo tuplizer using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999385915309994	WITHOUT_CLASSIFICATION	6.140846900066096E-5	DESIGN
build the dynamic-map tuplizer	WITHOUT_CLASSIFICATION	0.9999212686364617	WITHOUT_CLASSIFICATION	7.873136353833667E-5	DESIGN
then dom4j tuplizer if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9991128562358246	WITHOUT_CLASSIFICATION	8.871437641754993E-4	DESIGN
build the dynamic-map tuplizer	WITHOUT_CLASSIFICATION	0.9999212686364617	WITHOUT_CLASSIFICATION	7.873136353833667E-5	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999805898164948	WITHOUT_CLASSIFICATION	1.9410183505194105E-4	DESIGN
found a ctor but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9993709472200439	WITHOUT_CLASSIFICATION	6.290527799560795E-4	DESIGN
private final sessionfactoryimplementor sessionfactory	WITHOUT_CLASSIFICATION	0.9994815375151892	WITHOUT_CLASSIFICATION	5.184624848108418E-4	DESIGN
cached for efficiency	WITHOUT_CLASSIFICATION	0.999925230967707	WITHOUT_CLASSIFICATION	7.476903229300922E-5	DESIGN
public componentmetamodel(component component sessionfactoryimplementor sessionfactory) {	WITHOUT_CLASSIFICATION	0.999659417323667	WITHOUT_CLASSIFICATION	3.405826763330233E-4	DESIGN
this.sessionfactory = sessionfactory	WITHOUT_CLASSIFICATION	0.9999477159006084	WITHOUT_CLASSIFICATION	5.228409939150192E-5	DESIGN
it was not embedded so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999878051651813	WITHOUT_CLASSIFICATION	1.2194834818675936E-5	DESIGN
then the pojo tuplizer using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999385915309994	WITHOUT_CLASSIFICATION	6.140846900066096E-5	DESIGN
then dom4j tuplizer if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9991128562358246	WITHOUT_CLASSIFICATION	8.871437641754993E-4	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999805898164948	WITHOUT_CLASSIFICATION	1.9410183505194105E-4	DESIGN
then handle any user-defined entity modes	WITHOUT_CLASSIFICATION	0.9990474133989722	WITHOUT_CLASSIFICATION	9.525866010279584E-4	DESIGN
return currentid	WITHOUT_CLASSIFICATION	0.9999822436444217	WITHOUT_CLASSIFICATION	1.7756355578327905E-5	DESIGN
reset the id	WITHOUT_CLASSIFICATION	0.9999890348064874	WITHOUT_CLASSIFICATION	1.0965193512573405E-5	DESIGN
origin.adddestination( destination ) this was the cause of hhh-242 origin.settype( from_fragment ) set the parent node type so that the ast is properly formed. the destination node will have all the from text. the parent node is a collection join too (voodoo - see joinprocessor)	WITHOUT_CLASSIFICATION	0.8776153880684202	WITHOUT_CLASSIFICATION	0.12238461193157985	DESIGN
reset the version	WITHOUT_CLASSIFICATION	0.9999912205209986	WITHOUT_CLASSIFICATION	8.779479001286704E-6	DESIGN
the default is to simply not lazy fetch properties for now	WITHOUT_CLASSIFICATION	0.9988333624771685	WITHOUT_CLASSIFICATION	0.00116663752283148	DESIGN
add the second join the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.999965102781864	WITHOUT_CLASSIFICATION	3.489721813602828E-5	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9847082776449472	WITHOUT_CLASSIFICATION	0.015291722355052866	DESIGN
found a ctor but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9993709472200439	WITHOUT_CLASSIFICATION	6.290527799560795E-4	DESIGN
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9988673443623102	WITHOUT_CLASSIFICATION	0.0011326556376898705	DESIGN
return getfactory().getsettings().getbytecodeprovider().getproxyfactoryfactory().buildproxyfactory()	WITHOUT_CLASSIFICATION	0.9997737682021011	WITHOUT_CLASSIFICATION	2.2623179789898212E-4	DESIGN
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9992480938194692	WITHOUT_CLASSIFICATION	7.51906180530716E-4	DESIGN
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999211022304233	WITHOUT_CLASSIFICATION	7.889776957664814E-5	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9847082776449472	WITHOUT_CLASSIFICATION	0.015291722355052866	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
init the aliases after initing the constructornode	WITHOUT_CLASSIFICATION	0.9998865544899389	WITHOUT_CLASSIFICATION	1.1344551006110468E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9847082776449472	WITHOUT_CLASSIFICATION	0.015291722355052866	DESIGN
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9996327046498217	WITHOUT_CLASSIFICATION	3.6729535017830943E-4	DESIGN
get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9997757640377084	WITHOUT_CLASSIFICATION	2.242359622915469E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
note this affects the return value!	WITHOUT_CLASSIFICATION	0.9999067901655118	WITHOUT_CLASSIFICATION	9.320983448818913E-5	DESIGN
need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9981813339399813	WITHOUT_CLASSIFICATION	0.0018186660600186982	DESIGN
add the type to the list of returned sqlresulttypes.	WITHOUT_CLASSIFICATION	0.999800184027663	WITHOUT_CLASSIFICATION	1.9981597233697496E-4	DESIGN
collection types	WITHOUT_CLASSIFICATION	0.9998377133112494	WITHOUT_CLASSIFICATION	1.622866887507356E-4	DESIGN
convenience methods relating to operations across arrays of types	WITHOUT_CLASSIFICATION	0.9986196123026514	WITHOUT_CLASSIFICATION	0.001380387697348601	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999617221935938	WITHOUT_CLASSIFICATION	3.827780640613125E-5	DESIGN
blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9998907062400217	WITHOUT_CLASSIFICATION	1.0929375997818447E-4	DESIGN
value is the entity name	WITHOUT_CLASSIFICATION	0.9999057238556528	WITHOUT_CLASSIFICATION	9.427614434726848E-5	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9999678342597291	WITHOUT_CLASSIFICATION	3.2165740270931774E-5	DESIGN
generate id select fragment and then property select fragment for each expression just like generateselectfragments().	WITHOUT_CLASSIFICATION	0.9996291294135553	WITHOUT_CLASSIFICATION	3.708705864446453E-4	DESIGN
todo!	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
xml is the entity name	WITHOUT_CLASSIFICATION	0.9998637712741708	WITHOUT_CLASSIFICATION	1.362287258292215E-4	DESIGN
special case this is the leaf of the containment graph even though not immutable	WITHOUT_CLASSIFICATION	0.9999470021076615	WITHOUT_CLASSIFICATION	5.299789233857158E-5	DESIGN
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999715036158936	WITHOUT_CLASSIFICATION	2.849638410640965E-5	DESIGN
sqlresulttypelist	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
metatype is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.995571342533416	WITHOUT_CLASSIFICATION	0.004428657466584027	DESIGN
get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.999887790082347	WITHOUT_CLASSIFICATION	1.1220991765307826E-4	DESIGN
look through the fromelement's children to find any collections of values that should be fetched	WITHOUT_CLASSIFICATION	0.9998724247709374	WITHOUT_CLASSIFICATION	1.2757522906264946E-4	DESIGN
return associationtype.foreign_key_to_parent this is better but causes a transient object exception	WITHOUT_CLASSIFICATION	0.992779582001001	WITHOUT_CLASSIFICATION	0.007220417998998899	DESIGN
use the lower case function name. remember whether we're in a select clause or not.	WITHOUT_CLASSIFICATION	0.9999261366729283	WITHOUT_CLASSIFICATION	7.386332707176233E-5	DESIGN
ident might be the name of a class.	WITHOUT_CLASSIFICATION	0.9907812840806391	WITHOUT_CLASSIFICATION	0.009218715919360755	DESIGN
todo!!!	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
st.settimestamp( index new timestamp( cal.gettimeinmillis() ) cal ) jdk 1.5 only	WITHOUT_CLASSIFICATION	0.9995985796170358	WITHOUT_CLASSIFICATION	4.0142038296425757E-4	DESIGN
st.setdate( index new date( cal.gettimeinmillis() ) cal ) jdk 1.5 only	WITHOUT_CLASSIFICATION	0.9995985796170358	WITHOUT_CLASSIFICATION	4.0142038296425757E-4	DESIGN
both are timestamps	WITHOUT_CLASSIFICATION	0.9998896285788271	WITHOUT_CLASSIFICATION	1.1037142117289482E-4	DESIGN
at least one is a plain old date	WITHOUT_CLASSIFICATION	0.9970491630713786	WITHOUT_CLASSIFICATION	0.0029508369286214927	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999446263305777	WITHOUT_CLASSIFICATION	5.537366942240866E-5	DESIGN
if the corresponding sql value is null the reader we got is null as well	WITHOUT_CLASSIFICATION	0.9999546420198351	WITHOUT_CLASSIFICATION	4.535798016490535E-5	DESIGN
fetch reader content up to the end - and put characters in a stringbuffer	WITHOUT_CLASSIFICATION	0.9977383819426879	WITHOUT_CLASSIFICATION	0.0022616180573119694	DESIGN
return stringbuffer content as a large string	WITHOUT_CLASSIFICATION	0.9998672551014629	WITHOUT_CLASSIFICATION	1.3274489853715924E-4	DESIGN
or types.longvarchar?	WITHOUT_CLASSIFICATION	0.9999702661780449	WITHOUT_CLASSIFICATION	2.973382195525204E-5	DESIGN
not called at runtime so doesn't matter if its slow )	WITHOUT_CLASSIFICATION	0.9999574611937615	WITHOUT_CLASSIFICATION	4.2538806238579443E-5	DESIGN
todo	WITHOUT_CLASSIFICATION	0.8685420110260232	WITHOUT_CLASSIFICATION	0.1314579889739768	DESIGN
chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999933209933234	WITHOUT_CLASSIFICATION	6.6790066766073565E-6	DESIGN
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9991547455104454	WITHOUT_CLASSIFICATION	8.452544895547026E-4	DESIGN
cache this	WITHOUT_CLASSIFICATION	0.9997246281163313	WITHOUT_CLASSIFICATION	2.753718836686307E-4	DESIGN
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9994270628824821	WITHOUT_CLASSIFICATION	5.729371175178637E-4	DESIGN
forcefully remove leading ands from where fragments the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.997557393162207	WITHOUT_CLASSIFICATION	0.002442606837792877	DESIGN
todo!!!!!!!	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
create a new filters node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9996741357625711	WITHOUT_CLASSIFICATION	3.258642374288692E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
public object instantiate(object parent sessionimplementor session) throws hibernateexception	WITHOUT_CLASSIFICATION	0.9992723737429561	WITHOUT_CLASSIFICATION	7.276262570439535E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999919583008653	WITHOUT_CLASSIFICATION	8.041699134791978E-6	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999919583008653	WITHOUT_CLASSIFICATION	8.041699134791978E-6	DESIGN
versiontype impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ note simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the timestamp datatype supported by sybase and sql server which are completely db-generated values	WITHOUT_CLASSIFICATION	0.9998246619366632	WITHOUT_CLASSIFICATION	1.7533806333686403E-4	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999617221935938	WITHOUT_CLASSIFICATION	3.827780640613125E-5	DESIGN
not really necessary i guess	WITHOUT_CLASSIFICATION	0.9995398899765334	WITHOUT_CLASSIFICATION	4.601100234665543E-4	DESIGN
clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9997137416772267	WITHOUT_CLASSIFICATION	2.8625832277328467E-4	DESIGN
we do not have to worry about queued additions to uninitialized collections since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9989690146714364	WITHOUT_CLASSIFICATION	0.0010309853285635428	DESIGN
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999663437388039	WITHOUT_CLASSIFICATION	3.365626119616254E-5	DESIGN
remember the uk value	WITHOUT_CLASSIFICATION	0.9999897741117352	WITHOUT_CLASSIFICATION	1.0225888264818978E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999446263305777	WITHOUT_CLASSIFICATION	5.537366942240866E-5	DESIGN
processcollectionproperty(token q.getcollectionpersister(collectionrole) collectionname)	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
we must use the "remembered" uk value since it is not available from the entityentry during assembly	WITHOUT_CLASSIFICATION	0.999500954482355	WITHOUT_CLASSIFICATION	4.990455176449719E-4	DESIGN
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.999461923354748	WITHOUT_CLASSIFICATION	5.380766452519401E-4	DESIGN
return false	WITHOUT_CLASSIFICATION	0.9999759258240948	WITHOUT_CLASSIFICATION	2.4074175905109943E-5	DESIGN
this just handles a particular case of component projection perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9994384515589253	WITHOUT_CLASSIFICATION	5.615484410747794E-4	DESIGN
note we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999579466998713	WITHOUT_CLASSIFICATION	4.205330012880154E-5	DESIGN
the key is the owning entity itself so get the id from the key	WITHOUT_CLASSIFICATION	0.9997960165358754	WITHOUT_CLASSIFICATION	2.0398346412473016E-4	DESIGN
if the original is a persistentcollection and that original was not flagged as dirty then reset the target's dirty flag here after the copy operation. </p> one thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know	WITHOUT_CLASSIFICATION	0.9999645218570685	WITHOUT_CLASSIFICATION	3.547814293153049E-5	DESIGN
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.999960296713975	WITHOUT_CLASSIFICATION	3.9703286024972434E-5	DESIGN
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.999837849503712	WITHOUT_CLASSIFICATION	1.6215049628793063E-4	DESIGN
for a null target or a target which is the same as the original we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9970632048003838	WITHOUT_CLASSIFICATION	0.002936795199616201	DESIGN
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here	WITHOUT_CLASSIFICATION	0.9991269199728158	WITHOUT_CLASSIFICATION	8.730800271843178E-4	DESIGN
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999563646595723	WITHOUT_CLASSIFICATION	4.363534042770259E-5	DESIGN
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9993372041991713	WITHOUT_CLASSIFICATION	6.627958008287877E-4	DESIGN
check if it is already completely loaded but unowned	WITHOUT_CLASSIFICATION	0.9998777528506527	WITHOUT_CLASSIFICATION	1.2224714934728099E-4	DESIGN
cache the actual id of the object not the value of the property-ref which might not be initialized	WITHOUT_CLASSIFICATION	0.9990134475123128	WITHOUT_CLASSIFICATION	9.865524876871876E-4	DESIGN
todo!!!!!!!	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
create a new collection wrapper to be initialized later	WITHOUT_CLASSIFICATION	0.9974204738192609	WITHOUT_CLASSIFICATION	0.0025795261807391215	DESIGN
some jdbc drivers erroneously return an empty array here for a null db value /	WITHOUT_CLASSIFICATION	0.9974600682340392	WITHOUT_CLASSIFICATION	0.0025399317659608994	DESIGN
our column span is the number of columns in the pk	WITHOUT_CLASSIFICATION	0.9981598815655384	WITHOUT_CLASSIFICATION	0.0018401184344615691	DESIGN
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9985020290862272	WITHOUT_CLASSIFICATION	0.001497970913772887	DESIGN
we already know current is not null	WITHOUT_CLASSIFICATION	0.999223560607859	WITHOUT_CLASSIFICATION	7.764393921410103E-4	DESIGN
the ids are fully resolved so compare them with isdirty() not ismodified()	WITHOUT_CLASSIFICATION	0.9998248365003111	WITHOUT_CLASSIFICATION	1.7516349968890336E-4	DESIGN
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999370122091367	WITHOUT_CLASSIFICATION	6.298779086327138E-5	DESIGN
----------------------------------------------------------- constructors	WITHOUT_CLASSIFICATION	0.999331446900015	WITHOUT_CLASSIFICATION	6.685530999850745E-4	DESIGN
----------------------------------------------------- instance variables	WITHOUT_CLASSIFICATION	0.9984189450444201	WITHOUT_CLASSIFICATION	0.0015810549555799836	DESIGN
public static jdbcexception newjdbcexception(string string sqlexception root string sql) { string = string + " [" + sql + ']' log.error(string root) logexceptions(root) return new jdbcexception(string root sql) } public static jdbcexception newjdbcexception(string string sqlexception root) { log.error(string root) logexceptions(root) return new jdbcexception(string root) }	WITHOUT_CLASSIFICATION	0.9999651267287535	WITHOUT_CLASSIFICATION	3.4873271246470797E-5	DESIGN
--------------------------------------------------------- public methods	WITHOUT_CLASSIFICATION	0.9991291657874032	WITHOUT_CLASSIFICATION	8.708342125968486E-4	DESIGN
compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9998001044714213	WITHOUT_CLASSIFICATION	1.9989552857866392E-4	DESIGN
simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9996176325005905	WITHOUT_CLASSIFICATION	3.8236749940941827E-4	DESIGN
sybase fail if we don't do that sigh	WITHOUT_CLASSIFICATION	0.9980780625822852	WITHOUT_CLASSIFICATION	0.0019219374177148307	DESIGN
handles things like a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a b c ) (overloaded brackets) not not a a is not null (overloaded "not") etc and expressions like foo = bar (maps to foo.id = bar.id) foo.bar = 'foo' (maps to foo.bar = 'foo') foo.bar.baz = 1.0 (maps to foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.bar.baz (maps to bar.baz = 1.0 and foo.bar = bar.id) foo.bar.baz = a.b.c (maps to bar.baz = b.c and foo.bar = bar.id and a.b = b.id) foo.bar.baz + a.b.c (maps to bar.baz + b.c and foo.bar = bar.id and a.b = b.id) ( foo.bar.baz + 1.0 ) < 2.0 (maps to ( bar.baz + 1.0 ) < 2.0 and foo.bar = bar.id)	WITHOUT_CLASSIFICATION	0.9996542373107167	WITHOUT_CLASSIFICATION	3.4576268928335836E-4	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9950305214124308	WITHOUT_CLASSIFICATION	0.004969478587569338	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9950305214124308	WITHOUT_CLASSIFICATION	0.004969478587569338	DESIGN
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9998408376158825	WITHOUT_CLASSIFICATION	1.591623841175466E-4	DESIGN
otherwise just dump it	WITHOUT_CLASSIFICATION	0.9999542820310464	WITHOUT_CLASSIFICATION	4.571796895358114E-5	DESIGN
its an interface so we can't really tell anything	WITHOUT_CLASSIFICATION	0.9999633296127516	WITHOUT_CLASSIFICATION	3.667038724840342E-5	DESIGN
its an interface so we can't really tell anything	WITHOUT_CLASSIFICATION	0.9999633296127516	WITHOUT_CLASSIFICATION	3.667038724840342E-5	DESIGN
use default behavior	WITHOUT_CLASSIFICATION	0.9999681585032751	WITHOUT_CLASSIFICATION	3.1841496724799214E-5	DESIGN
note early return	WITHOUT_CLASSIFICATION	0.999994439297021	WITHOUT_CLASSIFICATION	5.5607029789306795E-6	DESIGN
the mru cache used to keep hard references to the most recently used query plans note lru here is a bit of a misnomer it indicates that lru entries are removed the actual kept entries are the mru entries	WITHOUT_CLASSIFICATION	0.99962265589908	WITHOUT_CLASSIFICATION	3.7734410092004196E-4	DESIGN
we want to be able to just use the defaults if jndi environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9951820556729613	WITHOUT_CLASSIFICATION	0.0048179443270387175	DESIGN
clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999441108514536	WITHOUT_CLASSIFICATION	5.58891485463824E-5	DESIGN
serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999815368776199	WITHOUT_CLASSIFICATION	1.8463122379969584E-5	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999815368776199	WITHOUT_CLASSIFICATION	1.8463122379969584E-5	DESIGN
deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9958828993079533	WITHOUT_CLASSIFICATION	0.004117100692046729	DESIGN
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999683600645162	WITHOUT_CLASSIFICATION	3.16399354838819E-5	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
includes last '.'	WITHOUT_CLASSIFICATION	0.9999482810586419	WITHOUT_CLASSIFICATION	5.171894135813408E-5	DESIGN
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9997949741546054	WITHOUT_CLASSIFICATION	2.0502584539461673E-4	DESIGN
impl note takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method	WITHOUT_CLASSIFICATION	0.9984521321121185	WITHOUT_CLASSIFICATION	0.0015478678878815548	DESIGN
first time we find match!	WITHOUT_CLASSIFICATION	0.9999629197073773	WITHOUT_CLASSIFICATION	3.708029262280737E-5	DESIGN
entitynames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999195255948585	WITHOUT_CLASSIFICATION	8.047440514143474E-5	DESIGN
wrapped iterators	WITHOUT_CLASSIFICATION	0.999967653275345	WITHOUT_CLASSIFICATION	3.234672465496377E-5	DESIGN
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9997697279663482	WITHOUT_CLASSIFICATION	2.3027203365167745E-4	DESIGN
the current iterator	WITHOUT_CLASSIFICATION	0.9999797326212032	WITHOUT_CLASSIFICATION	2.0267378796701343E-5	DESIGN
the last used iterator	WITHOUT_CLASSIFICATION	0.9998956776485535	WITHOUT_CLASSIFICATION	1.0432235144646395E-4	DESIGN
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999642067371074	WITHOUT_CLASSIFICATION	3.5793262892638934E-5	DESIGN
public static object[] clone(class elementclass object[] array) {object[] result = (object[]) array.newinstance( elementclass array.length )system.arraycopy(array 0 result 0 array.length)return result}	WITHOUT_CLASSIFICATION	0.9999528013663007	WITHOUT_CLASSIFICATION	4.719863369921554E-5	DESIGN
call this before any iterator method to make sure that the current iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9873448956732789	WITHOUT_CLASSIFICATION	0.012655104326721183	DESIGN
doable if needed	WITHOUT_CLASSIFICATION	0.9999815388708931	WITHOUT_CLASSIFICATION	1.846112910690024E-5	DESIGN
set last used iterator here in case the user calls remove before calling hasnext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9991143175282623	WITHOUT_CLASSIFICATION	8.856824717377453E-4	DESIGN
peek ahead	WITHOUT_CLASSIFICATION	0.9999505974819681	WITHOUT_CLASSIFICATION	4.940251803189952E-5	DESIGN
if we reach the end of the string w/o finding the matching end that is an exception	WITHOUT_CLASSIFICATION	0.99988014376146	WITHOUT_CLASSIFICATION	1.1985623854008985E-4	DESIGN
we have a placeholder spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9997421355815657	WITHOUT_CLASSIFICATION	2.5786441843428083E-4	DESIGN
make sure spinning forward did not put us past the end of the buffer	WITHOUT_CLASSIFICATION	0.999765628577331	WITHOUT_CLASSIFICATION	2.3437142266898904E-4	DESIGN
first try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9985762179709853	WITHOUT_CLASSIFICATION	0.0014237820290146465	DESIGN
next try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9907730442023738	WITHOUT_CLASSIFICATION	0.009226955797626122	DESIGN
next try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9982757131060158	WITHOUT_CLASSIFICATION	0.0017242868939841894	DESIGN
anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999101846427474	WITHOUT_CLASSIFICATION	8.981535725261632E-5	DESIGN
would need an identityset for this!	WITHOUT_CLASSIFICATION	0.9871499239051794	WITHOUT_CLASSIFICATION	0.01285007609482057	DESIGN
arrays.aslist doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9997363935432235	WITHOUT_CLASSIFICATION	2.636064567764613E-4	DESIGN
faster?	WITHOUT_CLASSIFICATION	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
the name of a class	WITHOUT_CLASSIFICATION	0.9999615839294119	WITHOUT_CLASSIFICATION	3.841607058814085E-5	DESIGN
its the listener class name	WITHOUT_CLASSIFICATION	0.9999827938515565	WITHOUT_CLASSIFICATION	1.7206148443519058E-5	DESIGN
allow 987654321	WITHOUT_CLASSIFICATION	0.9999210875411741	WITHOUT_CLASSIFICATION	7.891245882591394E-5	DESIGN
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.999687124593778	WITHOUT_CLASSIFICATION	3.1287540622202087E-4	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999498649648041	WITHOUT_CLASSIFICATION	5.0135035195909027E-5	DESIGN
in case we were deserialized in a different jvm look for an instance with the same name (alternatively we could do an actual jndi lookup here.)	WITHOUT_CLASSIFICATION	0.9995826237311399	WITHOUT_CLASSIFICATION	4.1737626886014233E-4	DESIGN
first lets determine whether to apply cglib or javassist based instrumentation	WITHOUT_CLASSIFICATION	0.9959537263483529	WITHOUT_CLASSIFICATION	0.004046273651647204	DESIGN
make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9977879492413623	WITHOUT_CLASSIFICATION	0.0022120507586378016	DESIGN
entirely optional!!	WITHOUT_CLASSIFICATION	0.999960227707141	WITHOUT_CLASSIFICATION	3.977229285891466E-5	DESIGN
its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9995262126424651	WITHOUT_CLASSIFICATION	4.737873575348608E-4	DESIGN
context.unbind(boundname)	WITHOUT_CLASSIFICATION	0.9999577000400072	WITHOUT_CLASSIFICATION	4.229995999285693E-5	DESIGN
readresolveobject	WITHOUT_CLASSIFICATION	0.9999672155460901	WITHOUT_CLASSIFICATION	3.2784453909827913E-5	DESIGN
cfg.setproperty("hibernate.show_sql" "true")	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
defensive convenience methods	WITHOUT_CLASSIFICATION	0.9999064539379645	WITHOUT_CLASSIFICATION	9.354606203559659E-5	DESIGN
create the sessionfactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9997117837015798	WITHOUT_CLASSIFICATION	2.8821629842022835E-4	DESIGN
make sure you log the exception as it might be swallowed	WITHOUT_CLASSIFICATION	0.9996923730066566	WITHOUT_CLASSIFICATION	3.076269933434462E-4	DESIGN
begin unit of work	WITHOUT_CLASSIFICATION	0.9999291817155969	WITHOUT_CLASSIFICATION	7.08182844031975E-5	DESIGN
write html header	WITHOUT_CLASSIFICATION	0.9999833128899249	WITHOUT_CLASSIFICATION	1.668711007506251E-5	DESIGN
handle actions	WITHOUT_CLASSIFICATION	0.9996815715888201	WITHOUT_CLASSIFICATION	3.1842841117985595E-4	DESIGN
print page	WITHOUT_CLASSIFICATION	0.9999264169659384	WITHOUT_CLASSIFICATION	7.358303406162005E-5	DESIGN
write html footer	WITHOUT_CLASSIFICATION	0.99997189985987	WITHOUT_CLASSIFICATION	2.8100140129921422E-5	DESIGN
end unit of work	WITHOUT_CLASSIFICATION	0.9999274433492135	WITHOUT_CLASSIFICATION	7.255665078650257E-5	DESIGN
start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9903834241437298	WITHOUT_CLASSIFICATION	0.009616575856270114	DESIGN
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9987965268511433	WITHOUT_CLASSIFICATION	0.0012034731488566885	DESIGN
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.99980936811447	WITHOUT_CLASSIFICATION	1.9063188552994E-4	DESIGN
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9973795781401302	WITHOUT_CLASSIFICATION	0.0026204218598697517	DESIGN
eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9977610766934155	WITHOUT_CLASSIFICATION	0.0022389233065845467	DESIGN
if we want to handle it bidirectional and detached we also need to load this collection with an eager outer-join fetch this time with criteria and not hql	WITHOUT_CLASSIFICATION	0.7869673588175854	WITHOUT_CLASSIFICATION	0.21303264118241463	DESIGN
event anevent = (event) session .createcriteria(event.class).setfetchmode("participants" fetchmode.join) .add( expression.eq("id" eventid) ) .uniqueresult() eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9998701455180182	WITHOUT_CLASSIFICATION	1.2985448198167513E-4	DESIGN
end of first unit of work	WITHOUT_CLASSIFICATION	0.9999424560693867	WITHOUT_CLASSIFICATION	5.754393061337895E-5	DESIGN
or bidirectional safety method setting both sides aperson.addtoevent(anevent)	WITHOUT_CLASSIFICATION	0.9992080606872554	WITHOUT_CLASSIFICATION	7.919393127445943E-4	DESIGN
begin second unit of work	WITHOUT_CLASSIFICATION	0.9999380389158644	WITHOUT_CLASSIFICATION	6.196108413556772E-5	DESIGN
reattachment of aperson	WITHOUT_CLASSIFICATION	0.9999612048651716	WITHOUT_CLASSIFICATION	3.8795134828373405E-5	DESIGN
the getemailaddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9969407710726369	WITHOUT_CLASSIFICATION	0.0030592289273630702	DESIGN
we need our tm so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.999076659959518	WITHOUT_CLASSIFICATION	9.233400404821105E-4	DESIGN
don't hold the jbc node lock throughout the tx as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9980045737753385	WITHOUT_CLASSIFICATION	0.0019954262246615765	DESIGN
don't hold the jbc node lock throughout the tx as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9980045737753385	WITHOUT_CLASSIFICATION	0.0019954262246615765	DESIGN
jbc put a version in the node when it created as part of some internal operation. we are always newer but if the jbc version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.999949651910143	WITHOUT_CLASSIFICATION	5.034808985703327E-5	DESIGN
swaldman 2006-08-28 define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9934922961970798	WITHOUT_CLASSIFICATION	0.006507703802920304	DESIGN
not null if the isolation level has been specified in the configuration file. otherwise it is left to the driver's default value.	WITHOUT_CLASSIFICATION	0.9993079326307631	WITHOUT_CLASSIFICATION	6.920673692367711E-4	DESIGN
configured outside of hibernate (i.e. servlet container or java bean container already has proxool pools running and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9901330540551402	WITHOUT_CLASSIFICATION	0.009866945944859864	DESIGN
if you're closing down the connectionprovider chances are an is not a real big deal just warn	WITHOUT_CLASSIFICATION	0.9998750699434582	WITHOUT_CLASSIFICATION	1.2493005654182335E-4	DESIGN
(as is always optional for consistency with sql/oql)	WITHOUT_CLASSIFICATION	0.9979634570240629	WITHOUT_CLASSIFICATION	0.002036542975937203	DESIGN
process the "new" hql style where aliases are assigned _after_ the class name or path expression ie. using the as construction	WITHOUT_CLASSIFICATION	0.9999211026664043	WITHOUT_CLASSIFICATION	7.889733359571213E-5	DESIGN
the loaded owner will be set to null after the collection is removed so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9994783950412973	WITHOUT_CLASSIFICATION	5.216049587025816E-4	DESIGN
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.994043032555277	WITHOUT_CLASSIFICATION	0.005956967444722894	DESIGN
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9998686569411712	WITHOUT_CLASSIFICATION	1.313430588287302E-4	DESIGN
handle a path expression or class name that appears at the start in the "new" hql style or an alias that appears at the start in the "old" hql style	WITHOUT_CLASSIFICATION	0.9954537709799116	WITHOUT_CLASSIFICATION	0.004546229020088442	DESIGN
handle <= >= != is not not between not in	WITHOUT_CLASSIFICATION	0.9981704763079082	WITHOUT_CLASSIFICATION	0.0018295236920917069	DESIGN
the loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999956882421701	WITHOUT_CLASSIFICATION	4.311757829990089E-6	DESIGN
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9985760210433234	WITHOUT_CLASSIFICATION	0.0014239789566764694	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999207902843957	WITHOUT_CLASSIFICATION	7.920971560424807E-5	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999207902843957	WITHOUT_CLASSIFICATION	7.920971560424807E-5	DESIGN
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9996019151138603	WITHOUT_CLASSIFICATION	3.9808488613970544E-4	DESIGN
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9995581191852825	WITHOUT_CLASSIFICATION	4.418808147174711E-4	DESIGN
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9996844042404648	WITHOUT_CLASSIFICATION	3.155957595352298E-4	DESIGN
note special case default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999837632151822	WITHOUT_CLASSIFICATION	1.6236784817716916E-5	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999837171922359	WITHOUT_CLASSIFICATION	1.628280776409631E-4	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998099234039883	WITHOUT_CLASSIFICATION	1.9007659601165812E-4	DESIGN
void setcomponenttuplizerfactory(componenttuplizerfactory componenttuplizerfactory) { this.componenttuplizerfactory = componenttuplizerfactory }	WITHOUT_CLASSIFICATION	0.9999342619612894	WITHOUT_CLASSIFICATION	6.573803871058037E-5	DESIGN
element index -> id	WITHOUT_CLASSIFICATION	0.9999876473658169	WITHOUT_CLASSIFICATION	1.2352634183060517E-5	DESIGN
note that it might be better to iterate the snapshot but this is safe assuming the user implements equals() properly as required by the set contract!	WITHOUT_CLASSIFICATION	0.9758541401831395	WITHOUT_CLASSIFICATION	0.024145859816860564	DESIGN
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9970044482120389	WITHOUT_CLASSIFICATION	0.002995551787961023	DESIGN
essentially if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception note that allowing close() above has the same basic effect but we capture that there simply to perform the unbind	WITHOUT_CLASSIFICATION	0.9999031186715778	WITHOUT_CLASSIFICATION	9.68813284222507E-5	DESIGN
the default sqlexceptionconverter for all dialects is based on sqlstate since sqlerrorcode is extremely vendor-specific. specific dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9992197246492274	WITHOUT_CLASSIFICATION	7.802753507726364E-4	DESIGN
only necessary for postgre < 7.4 httpanoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9947472309373875	WITHOUT_CLASSIFICATION	0.005252769062612472	DESIGN
select topic syntax from information_schema.help where section like 'function%' order by section topic see also -> httpwww.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9907714303144298	WITHOUT_CLASSIFICATION	0.00922856968557013	DESIGN
registercolumntype(types.varbinary "character($l)") registercolumntype(types.blob "character($l)" ) for use prior to cp 11.0 registercolumntype(types.clob "character($l)" )	WITHOUT_CLASSIFICATION	0.9975372316660219	WITHOUT_CLASSIFICATION	0.0024627683339781942	DESIGN
the blob type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include k - kilobyte m - megabyte g - gigabyte. refer to the pbdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9383595151988813	WITHOUT_CLASSIFICATION	0.06164048480111869	DESIGN
we must return a valid rdms/rsa command from this method to prevent rdms/rsa from issuing error 400	WITHOUT_CLASSIFICATION	0.9111952455064128	WITHOUT_CLASSIFICATION	0.08880475449358716	DESIGN
oracle driver reports to support getgeneratedkeys() but they only support the version taking an array of the names of the columns to be returned (via its returning clause). no other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9980256287640125	WITHOUT_CLASSIFICATION	0.0019743712359876447	DESIGN
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999841898322258	WITHOUT_CLASSIFICATION	1.581016777420652E-5	DESIGN
you may still have other resultsets or update counts left to process here but you can't do it now or the resultset you just got will be closed	WITHOUT_CLASSIFICATION	0.9999985623123938	WITHOUT_CLASSIFICATION	1.4376876061018205E-6	DESIGN
note for object <-> sql datatype mappings see configuration manager | advanced | sql | system ddl datatype mappings tbdregistercolumntype(types.binary "binary($1)") changed 08-11-2005 jsl	WITHOUT_CLASSIFICATION	0.9999770330539062	WITHOUT_CLASSIFICATION	2.296694609376017E-5	DESIGN
trim(end_keyword string-expression-1 from string-expression-2) use hibernate implementation "from" is one of the parameters they pass in position ?3 registerfunction( "trim" new sqlfunctiontemplate(hibernate.string "trim(?1 ?2 from ?3)") )	WITHOUT_CLASSIFICATION	0.9992883720410164	WITHOUT_CLASSIFICATION	7.116279589835944E-4	DESIGN
whether this dialect has an identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9989787317723038	WITHOUT_CLASSIFICATION	0.0010212682276962632	DESIGN
according to both the ansi-sql and jpa specs trim takes a variable number of parameters between 1 and 4. at least one paramer (trimsource) is required. from the sql spec <trim function> = trim <left paren> <trim operands> <right paren> <trim operands> = [ [ <trim specification> ] [ <trim character> ] from ] <trim source> <trim specification> = leading | trailing | both if <trim specification> is omitted both is assumed. if <trim character> is omitted space is assumed	WITHOUT_CLASSIFICATION	0.999936990194582	WITHOUT_CLASSIFICATION	6.300980541802982E-5	DESIGN
/ prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9997800294835877	WITHOUT_CLASSIFICATION	2.199705164122462E-4	DESIGN
named queries	WITHOUT_CLASSIFICATION	0.9999697975697478	WITHOUT_CLASSIFICATION	3.020243025219176E-5	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9986631669141643	WITHOUT_CLASSIFICATION	0.001336833085835739	DESIGN
does not handle arrays (thats ok cos they can't be lazy) or newly instantiated collections so we can do the cast	WITHOUT_CLASSIFICATION	0.991730138172374	WITHOUT_CLASSIFICATION	0.008269861827626	DESIGN
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999779664693409	WITHOUT_CLASSIFICATION	2.203353065909896E-5	DESIGN
we can do the cast since orphan-delete does not apply to 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9992039677772787	WITHOUT_CLASSIFICATION	7.960322227212092E-4	DESIGN
if the natural-id is marked as non-mutable it is not retrieved during a normal database-snapshot operation	WITHOUT_CLASSIFICATION	0.9999641201429534	WITHOUT_CLASSIFICATION	3.587985704668637E-5	DESIGN
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.999800860025475	WITHOUT_CLASSIFICATION	1.9913997452501231E-4	DESIGN
slice to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9995595653201156	WITHOUT_CLASSIFICATION	4.4043467988443165E-4	DESIGN
int result = 17 result = 37 result + type.hashcode() result = 37 result + ( value==null ? 0 value.hashcode() ) return result	WITHOUT_CLASSIFICATION	0.9999156203993249	WITHOUT_CLASSIFICATION	8.437960067513295E-5	DESIGN
the collectionentry.isreached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9998562169527158	WITHOUT_CLASSIFICATION	1.4378304728421425E-4	DESIGN
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9993294064748606	WITHOUT_CLASSIFICATION	6.705935251395077E-4	DESIGN
the unique property value represented here may or may not be serializable so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9972933636717987	WITHOUT_CLASSIFICATION	0.002706636328201351	DESIGN
if the version of a newly instantiated object is not the same as the version seed value use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9975239494342756	WITHOUT_CLASSIFICATION	0.0024760505657244513	DESIGN
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999356544720914	WITHOUT_CLASSIFICATION	6.434552790860326E-5	DESIGN
ignore this row the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9989596921499905	WITHOUT_CLASSIFICATION	0.001040307850009527	DESIGN
entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently not yet used	WITHOUT_CLASSIFICATION	0.9997109335621363	WITHOUT_CLASSIFICATION	2.8906643786378135E-4	DESIGN
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. besides it makes the code much easier to read than the old transactionhelper stuff	WITHOUT_CLASSIFICATION	0.9972280622385846	WITHOUT_CLASSIFICATION	0.0027719377614154636	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9930021819999394	WITHOUT_CLASSIFICATION	0.006997818000060649	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9930021819999394	WITHOUT_CLASSIFICATION	0.006997818000060649	DESIGN
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999196907084533	WITHOUT_CLASSIFICATION	8.030929154670353E-5	DESIGN
remove any snapshot not really for memory management purposes but rather because it might now be stale and there is no longer any entityentry to take precedence this is now handled by removeentity() session.getpersistencecontext().removedatabasesnapshot(key)	WITHOUT_CLASSIFICATION	0.9693123062147398	WITHOUT_CLASSIFICATION	0.030687693785260067	DESIGN
skip this check for composite-ids relating to dom4j entity-mode alternatively we could add a check to make sure the incoming id value is an instance of element	WITHOUT_CLASSIFICATION	0.9993119373918756	WITHOUT_CLASSIFICATION	6.880626081242799E-4	DESIGN
upgrade the lock if necessary lock(result lockmode)	WITHOUT_CLASSIFICATION	0.9988393085349672	WITHOUT_CLASSIFICATION	0.0011606914650327598	DESIGN
now any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9995098727193378	WITHOUT_CLASSIFICATION	4.90127280662276E-4	DESIGN
we must clone embedded composite identifiers or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999259078545905	WITHOUT_CLASSIFICATION	7.40921454095746E-5	DESIGN
sub-insertions should occur before containing insertion so try to do the callback now	WITHOUT_CLASSIFICATION	0.9985055791081606	WITHOUT_CLASSIFICATION	0.0014944208918393714	DESIGN
the entity is not associated with the session so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.999884626140291	WITHOUT_CLASSIFICATION	1.1537385970896269E-4	DESIGN
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9848742249478948	WITHOUT_CLASSIFICATION	0.015125775052105129	DESIGN
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997324648939191	WITHOUT_CLASSIFICATION	2.6753510608097864E-4	DESIGN
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997324648939191	WITHOUT_CLASSIFICATION	2.6753510608097864E-4	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9836089048052254	WITHOUT_CLASSIFICATION	0.016391095194774524	DESIGN
if it is an uninitialized proxy pointing with this session then when it is accessed the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9996610376054413	WITHOUT_CLASSIFICATION	3.389623945585942E-4	DESIGN
generate an explicit join for the root dot node. the implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9998263727803571	WITHOUT_CLASSIFICATION	1.7362721964289253E-4	DESIGN
a session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9995987010640701	WITHOUT_CLASSIFICATION	4.01298935929893E-4	DESIGN
does the collection referenced by this fromelement specify an order-by attribute? if so attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.994210967555319	WITHOUT_CLASSIFICATION	0.005789032444680994	DESIGN
and the token could be an identifer and the error is a mismatched token error	WITHOUT_CLASSIFICATION	0.9997239402279035	WITHOUT_CLASSIFICATION	2.760597720965416E-4	DESIGN
if a where clause was specified in the update/delete query use it to limit the returned ids here	WITHOUT_CLASSIFICATION	0.9958620708591764	WITHOUT_CLASSIFICATION	0.004137929140823468	DESIGN
int parameterstart = getwalker().getnumberofparametersinsetclause() list allparams = getidselectparameterspecifications() iterator whereparams = allparams.sublist( parameterstart allparams.size() ).iterator()	WITHOUT_CLASSIFICATION	0.9999250964917583	WITHOUT_CLASSIFICATION	7.490350824174053E-5	DESIGN
default implementation if this node has a data type and that data type is not an association then this is scalar.	WITHOUT_CLASSIFICATION	0.9820430801292019	WITHOUT_CLASSIFICATION	0.017956919870798043	DESIGN
resolve the lhs fully generate implicit joins. pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.999917329292605	WITHOUT_CLASSIFICATION	8.267070739488145E-5	DESIGN
if the propertytype is null and there isn't a parent just stop now there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9996112981136723	WITHOUT_CLASSIFICATION	3.8870188632765984E-4	DESIGN
we do not look for an existing join on the same path because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9949096908424145	WITHOUT_CLASSIFICATION	0.005090309157585508	DESIGN
our parent is another dot node meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's pk (because 'our' table would know the fk).	WITHOUT_CLASSIFICATION	0.9948943434539484	WITHOUT_CLASSIFICATION	0.005105656546051572	DESIGN
public final currency getcurrency(int col) throws hibernateexception {return (currency) get(col)}	WITHOUT_CLASSIFICATION	0.9995031189120765	WITHOUT_CLASSIFICATION	4.968810879235247E-4	DESIGN
here we have two possibilities 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9996803524132833	WITHOUT_CLASSIFICATION	3.196475867166643E-4	DESIGN
set the unresolved path in this node and the parent. set the text for the parent.	WITHOUT_CLASSIFICATION	0.9994867123862353	WITHOUT_CLASSIFICATION	5.132876137647213E-4	DESIGN
get the first child to be considered. sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. distinct).	WITHOUT_CLASSIFICATION	0.9998798882734896	WITHOUT_CLASSIFICATION	1.2011172651038847E-4	DESIGN
if this is an entity and the property is the identifier property then use getidentifiertype(). note that the propertyname.equals( propertypath ) checks whether we have a component key reference where the component class property name is the same as the entity id property name if the two are not equal this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9969357626301868	WITHOUT_CLASSIFICATION	0.003064237369813236	DESIGN
for a subquery the alias to use depends on a few things (we already know this is not an overall select) 1) if this from_element represents a correlation to the outer-most query a) if the outer query represents a multi-table persister we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) b) otherwise we need to use the persister's table name as the column qualification 2) otherwise (not correlated) use the given alias	WITHOUT_CLASSIFICATION	0.9404616839079065	WITHOUT_CLASSIFICATION	0.05953831609209339	DESIGN
not a collection? return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999493599198704	WITHOUT_CLASSIFICATION	5.064008012947442E-5	DESIGN
collection of <many-to-any/> mappings used to circumvent the component-collection check below	WITHOUT_CLASSIFICATION	0.9978108715297153	WITHOUT_CLASSIFICATION	0.002189128470284719	DESIGN
otherwise the destination node was implied by the from clause and the from clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.992240974435489	WITHOUT_CLASSIFICATION	0.0077590255645109945	DESIGN
if the first identifier in the path referrs to the class alias (not the class name) then this is a correlated subselect. if it's a correlated sub-select use the existing table alias. otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999044006232604	WITHOUT_CLASSIFICATION	9.559937673963609E-5	DESIGN
check to see if our "proppath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9995145814929587	WITHOUT_CLASSIFICATION	4.854185070412624E-4	DESIGN
an ident node can represent an index expression if the ident represents a naked property ref note this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrexpr -> resolve()). the other option if that changes is to call resolve from here but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999153864367445	WITHOUT_CLASSIFICATION	8.461356325550652E-5	DESIGN
this uses a pathexpressionparser but notice that compound paths are not valid only bare names and simple paths	WITHOUT_CLASSIFICATION	0.9882244497489376	WITHOUT_CLASSIFICATION	0.011775550251062354	DESIGN
if this is an implied join in a from clause then use ansi-style joining and set the flag on the fromelement that indicates that it was implied in the from clause itself.	WITHOUT_CLASSIFICATION	0.9596721790936472	WITHOUT_CLASSIFICATION	0.040327820906352826	DESIGN
origin.adddestination(destination) add the query spaces.	WITHOUT_CLASSIFICATION	0.9999695373336116	WITHOUT_CLASSIFICATION	3.0462666388414147E-5	DESIGN
for an explicit many-to-many relationship add a second join from the intermediate (many-to-many) table to the destination table. also make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9997277042597601	WITHOUT_CLASSIFICATION	2.722957402399351E-4	DESIGN
reset the node type because the rest of the system is expecting from_fragment all we wanted was for the factory to create the right sub-class. this might get reset again later on anyway to make the sql generation simpler.	WITHOUT_CLASSIFICATION	0.5970688176653346	DESIGN	0.40293118233466546	WITHOUT_CLASSIFICATION
explicit = true this is an explict select. arraylist sqlresulttypelist = new arraylist()	WITHOUT_CLASSIFICATION	0.9997496670324506	WITHOUT_CLASSIFICATION	2.503329675493757E-4	DESIGN
sqlresulttypelist.add( type ) generate the select expression.	WITHOUT_CLASSIFICATION	0.9991463261420839	WITHOUT_CLASSIFICATION	8.536738579160999E-4	DESIGN
if the expression list has exactly one expression and the type of the expression is a collection then this might be a collection function such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9627453513192302	WITHOUT_CLASSIFICATION	0.03725464868076975	DESIGN
need to parse off the column qualifiers this is assuming (which is true as of now) that this is only used from update and delete hql statement parsing	WITHOUT_CLASSIFICATION	0.992536760416605	WITHOUT_CLASSIFICATION	0.007463239583395078	DESIGN
for regression testing against output from the old parser found it easiest to simply reorder the fromelements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser this is definitely another of those "only needed for regression purposes". the syntheticandfactory then simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9940939523034489	WITHOUT_CLASSIFICATION	0.005906047696551138	DESIGN
the uber-rule here is that we need to include subclass joins if the fromelement is in any way dereferenced by a property from the subclass table otherwise we end up with column references qualified by a non-existent table reference in the resulting sql	WITHOUT_CLASSIFICATION	0.9515617002391819	WITHOUT_CLASSIFICATION	0.04843829976081815	DESIGN
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9953331200612	WITHOUT_CLASSIFICATION	0.004666879938799905	DESIGN
the following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9938049906368739	WITHOUT_CLASSIFICATION	0.006195009363126135	DESIGN
the loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999956882421701	WITHOUT_CLASSIFICATION	4.311757829990089E-6	DESIGN
should not be able to reach last without maxposition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9984814450110888	WITHOUT_CLASSIFICATION	0.0015185549889111503	DESIGN
we found it in the temp pc. should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9801816788440372	WITHOUT_CLASSIFICATION	0.01981832115596277	DESIGN
do not use proxiesbykey since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9985538697808211	WITHOUT_CLASSIFICATION	0.001446130219178947	DESIGN
if there is no tm configured we will not be able to access the javax.transaction.transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9978290235009002	WITHOUT_CLASSIFICATION	0.00217097649909975	DESIGN
since the result set cursor is always left at the first physical row after the "last processed" we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9998377923182411	WITHOUT_CLASSIFICATION	1.6220768175883058E-4	DESIGN
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a collectioninitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.8555738756630338	WITHOUT_CLASSIFICATION	0.14442612433696614	DESIGN
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode none)	WITHOUT_CLASSIFICATION	0.9767947552584274	WITHOUT_CLASSIFICATION	0.023205244741572525	DESIGN
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9995106530466816	WITHOUT_CLASSIFICATION	4.89346953318452E-4	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9990331747828423	WITHOUT_CLASSIFICATION	9.668252171577163E-4	DESIGN
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9983937332388199	WITHOUT_CLASSIFICATION	0.0016062667611801786	DESIGN
ps.close() just close it do not try to return it to the pool! note early exit!	WITHOUT_CLASSIFICATION	0.9999784812689518	WITHOUT_CLASSIFICATION	2.1518731048252763E-5	DESIGN
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through hibernate's registered transaction synchronization on a separate "reaping" thread. in cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these cmes occur. and though it is not "allowed" per-se the end result without handling it specifically is infinite looping. so here we simply break the loop	WITHOUT_CLASSIFICATION	0.6586319477897213	WITHOUT_CLASSIFICATION	0.34136805221027866	DESIGN
unfortunately this stuff can't be cached because it is per-invocation not constant for the querytranslator instance	WITHOUT_CLASSIFICATION	0.9988188621944538	WITHOUT_CLASSIFICATION	0.0011811378055462001	DESIGN
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9965236937332621	WITHOUT_CLASSIFICATION	0.0034763062667378156	DESIGN
don't create a unique key 'cos some databases don't like a uk on nullable columns getcollectiontable().createuniquekey( getidentifier().getconstraintcolumns() )	WITHOUT_CLASSIFICATION	0.9924361705055054	WITHOUT_CLASSIFICATION	0.007563829494494622	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or entityinfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995074819769729	WITHOUT_CLASSIFICATION	4.925180230270311E-4	DESIGN
isset = collection.isset() issorted = collection.issorted()	WITHOUT_CLASSIFICATION	0.9999477159006084	WITHOUT_CLASSIFICATION	5.228409939150192E-5	DESIGN
lists arrays sets maps bags	WITHOUT_CLASSIFICATION	0.9999846424950851	WITHOUT_CLASSIFICATION	1.5357504914934328E-5	DESIGN
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9993640984454834	WITHOUT_CLASSIFICATION	6.359015545165813E-4	DESIGN
use a combination of foreign key columns and pk columns since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999271603551704	WITHOUT_CLASSIFICATION	7.283964482960162E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or entityinfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995074819769729	WITHOUT_CLASSIFICATION	4.925180230270311E-4	DESIGN
information about properties of this class including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9920448891307052	WITHOUT_CLASSIFICATION	0.007955110869294884	DESIGN
all this only really needs to consider properties of this class not its subclasses but since we are reusing code used for sequential selects we use the subclass closure	WITHOUT_CLASSIFICATION	0.901698365335936	WITHOUT_CLASSIFICATION	0.09830163466406402	DESIGN
here we render the select column list based on the properties defined as being generated. for partial component generation we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.6032676585107194	WITHOUT_CLASSIFICATION	0.39673234148928066	DESIGN
this is the root (versioned) table and we are using version-based optimistic locking if we are not updating the version also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9994563561736638	WITHOUT_CLASSIFICATION	5.436438263361017E-4	DESIGN
optimistic-lock="all" include all updatable properties optimistic-lock="dirty" include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9623982611702674	WITHOUT_CLASSIFICATION	0.037601738829732556	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9914165420054851	WITHOUT_CLASSIFICATION	0.008583457994514921	DESIGN
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a jta transaction context so must be autocommit mode)	WITHOUT_CLASSIFICATION	0.9918451469146904	WITHOUT_CLASSIFICATION	0.008154853085309586	DESIGN
need to treat this as if it where optimistic-lock="all" (dirty does not make sense) first we need to locate the "loaded" state note it potentially could be a proxy so perform the location the safe way	WITHOUT_CLASSIFICATION	0.9994792857800766	WITHOUT_CLASSIFICATION	5.207142199234603E-4	DESIGN
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9972917589065212	WITHOUT_CLASSIFICATION	0.0027082410934787604	DESIGN
need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. using the collection's key type causes problems with property-ref keys	WITHOUT_CLASSIFICATION	0.9978452859479219	WITHOUT_CLASSIFICATION	0.0021547140520781437	DESIGN
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9987177334005696	WITHOUT_CLASSIFICATION	0.0012822665994305115	DESIGN
following doesn't handle (null not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.999826027172034	WITHOUT_CLASSIFICATION	1.7397282796603302E-4	DESIGN
impl note due to the delayed population of setters (setters cached for performance) we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9995598559811187	WITHOUT_CLASSIFICATION	4.401440188812173E-4	DESIGN
we need to dirty check collections since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9997646051589009	WITHOUT_CLASSIFICATION	2.3539484109924913E-4	DESIGN
return the id so we can use it to reset the proxy id return result	WITHOUT_CLASSIFICATION	0.9998505771249759	WITHOUT_CLASSIFICATION	1.4942287502408218E-4	DESIGN
optimizer = getfactory().getsettings().getbytecodeprovider().getreflectionoptimizer( mappedclass getternames setternames proptypes )	WITHOUT_CLASSIFICATION	0.9999208303154905	WITHOUT_CLASSIFICATION	7.916968450959273E-5	DESIGN
cache the actual id of the object not the value of the property-ref which might not be initialized	WITHOUT_CLASSIFICATION	0.9990134475123128	WITHOUT_CLASSIFICATION	9.865524876871876E-4	DESIGN
we now have the value of the property-ref we reference. however we need to dig a little deeper as that property might also be an entity type in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9997213698790633	WITHOUT_CLASSIFICATION	2.786301209366122E-4	DESIGN
retrieve the value of the designated column in the current row of this resultset object as a java.io.reader object	WITHOUT_CLASSIFICATION	0.9928400893260653	WITHOUT_CLASSIFICATION	0.0071599106739346895	DESIGN
not absolutely necessary but helps for some equals()/hashcode() implementations	WITHOUT_CLASSIFICATION	0.9983545319289843	WITHOUT_CLASSIFICATION	0.0016454680710156907	DESIGN
this should be a call to resolve() not resolveidentifier() 'cos it might be a property-ref and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9034405807447832	WITHOUT_CLASSIFICATION	0.09655941925521686	DESIGN
if we have <tt>not-found="ignore"</tt> association mapped to a formula we always need to dirty check it so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9997760196752169	WITHOUT_CLASSIFICATION	2.239803247830331E-4	DESIGN
can't just return null here since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9850413813857515	WITHOUT_CLASSIFICATION	0.014958618614248572	DESIGN
for arrays replaceelements() may return a different reference since the array length might not match	WITHOUT_CLASSIFICATION	0.9999768739212507	WITHOUT_CLASSIFICATION	2.3126078749308986E-5	DESIGN
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the mru entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999231564823807	WITHOUT_CLASSIFICATION	7.68435176192897E-5	DESIGN
as soon as we encounter our first letter return the substring from that position	WITHOUT_CLASSIFICATION	0.9995525508766975	WITHOUT_CLASSIFICATION	4.4744912330251966E-4	DESIGN
note expected in the syntax type=listenerclass ({sep}type=listenerclass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9998488079405942	WITHOUT_CLASSIFICATION	1.511920594058276E-4	DESIGN
istransactioncallbackregistered denotes whether any hibernate transaction has registered as a callback against this jdbccontext only one such callback is allowed. directly serializing this value causes problems with jdbctransaction or really any transaction impl where the callback is local to the transaction instance itself since that transaction is not serialized along with the jdbccontext. thus we handle that fact here explicitly	WITHOUT_CLASSIFICATION	0.9297340821239761	WITHOUT_CLASSIFICATION	0.07026591787602393	DESIGN
note that for sequential scrolling we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9979917116130717	WITHOUT_CLASSIFICATION	0.002008288386928353	DESIGN
we call getkeyfromresultset() here so that we can know the key value upon which to perform the breaking logic. however it is also then called from getrowfromresultset() which is certainly not the most efficient. but the call here is needed and there currently is no other way without refactoring of the doquery()/getrowfromresultset() methods	WITHOUT_CLASSIFICATION	0.9995857328924013	WITHOUT_CLASSIFICATION	4.142671075987575E-4	DESIGN
this check is needed since processing leaves the cursor after the last physical row for the current logical row thus if we are after the last physical row this might be caused by either 1) scrolling to the last logical row 2) scrolling past the last logical row in the latter scenario the previous logical row really is the last logical row. in all other cases we should process back two logical records (the current logic row plus the previous logical row).	WITHOUT_CLASSIFICATION	0.525404556472743	DESIGN	0.4745954435272571	WITHOUT_CLASSIFICATION
and perform the load	WITHOUT_CLASSIFICATION	0.9999909224658377	WITHOUT_CLASSIFICATION	9.077534162391604E-6	DESIGN
important reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9996780638024426	WITHOUT_CLASSIFICATION	3.2193619755735664E-4	DESIGN
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.5412227824533212	WITHOUT_CLASSIFICATION	0.4587772175466787	DESIGN
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9969103469634368	WITHOUT_CLASSIFICATION	0.0030896530365631895	DESIGN
we did not find a collection element in the result set so we ensure that a collection is created with the owner's identifier since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9972886421012183	WITHOUT_CLASSIFICATION	0.0027113578987816704	DESIGN
this is a collection initializer so we must create a collection for each of the passed-in keys to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.8507791198435124	WITHOUT_CLASSIFICATION	0.14922088015648752	DESIGN
grab its state from the resultset and keep it in the session (but don't yet initialize the object itself) note that we acquire lockmode.read even if it was not requested	WITHOUT_CLASSIFICATION	0.9999738291202047	WITHOUT_CLASSIFICATION	2.6170879795329175E-5	DESIGN
a many-to-many decrement currentdepth here to allow join across the association table without exceeding max_fetch_depth (i.e. the "currentdepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9957025958105273	WITHOUT_CLASSIFICATION	0.004297404189472646	DESIGN
if not a composite key use "foo in (? ? ?)" for batching if no batch and not a composite key use "foo = ?"	WITHOUT_CLASSIFICATION	0.9992000181796322	WITHOUT_CLASSIFICATION	7.999818203677336E-4	DESIGN
the user visible aliases which are unknown to the superclass these are not the actual "physical" sql aliases	WITHOUT_CLASSIFICATION	0.9998958288941828	WITHOUT_CLASSIFICATION	1.0417110581714819E-4	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9992708486468057	WITHOUT_CLASSIFICATION	7.291513531942205E-4	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9992708486468057	WITHOUT_CLASSIFICATION	7.291513531942205E-4	DESIGN
it does not refer to an alias of a projection look for a property	WITHOUT_CLASSIFICATION	0.998800382955767	WITHOUT_CLASSIFICATION	0.0011996170442330678	DESIGN
determine if the collection elements are entities	WITHOUT_CLASSIFICATION	0.9997271556171651	WITHOUT_CLASSIFICATION	2.728443828348472E-4	DESIGN
let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999186513985575	WITHOUT_CLASSIFICATION	8.134860144248744E-4	DESIGN
translates an ast join type (i.e. the token type) into a joinfragment.xxx join type. @param astjointype the ast join type (from hqlsqltokentypes or sqltokentypes) @return a joinfragment.xxx join type. @see joinfragment @see sqltokentypes	WITHOUT_CLASSIFICATION	0.9973619434730985	WITHOUT_CLASSIFICATION	0.0026380565269016228	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999474365512322	WITHOUT_CLASSIFICATION	5.256344876779287E-5	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999474365512322	WITHOUT_CLASSIFICATION	5.256344876779287E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.9999416463427383	WITHOUT_CLASSIFICATION	5.835365726173977E-5	DESIGN
public list getcollectionaliases() { return collectionaliases } public list getcollectionowners() { return collectionowners } public list getcollectionowneraliases() { return collectionowneraliases } public list getcollectionpersisters() { return collectionpersisters } public map getalias2persister() { return alias2persister } public boolean iscollectioninitializer() { return iscollectioninitializer } public list getpersisters() { return persisters } public map getalias2owneralias() { return alias2owneralias } public list getscalartypes() { return scalartypes } public list getscalarcolumnaliases() { return scalarcolumnaliases } public list getpropertyresults() { return propertyresults } public list getcollectionpropertyresults() { return collectionresults } public map getalias2return() { return alias2return }	WITHOUT_CLASSIFICATION	0.9997470750251409	WITHOUT_CLASSIFICATION	2.52924974859177E-4	DESIGN
sqlqueryparser parser = new sqlqueryparser( sqlquery processor.getalias2persister() processor.getalias2return() aliases collaliases collpersisters suffixes collsuffixes ) sql = parser.process() namedparameterbindpoints = parser.getnamedparameters()	WITHOUT_CLASSIFICATION	0.9999224585403891	WITHOUT_CLASSIFICATION	7.754145961095542E-5	DESIGN
include the discriminator and class-level where but not filters	WITHOUT_CLASSIFICATION	0.9997292122635368	WITHOUT_CLASSIFICATION	2.707877364631814E-4	DESIGN
sqlaliassuffixes[i] = element.getcolumnaliassuffix()	WITHOUT_CLASSIFICATION	0.9999477159006084	WITHOUT_CLASSIFICATION	5.228409939150192E-5	DESIGN
none because its the requested lock mode not the actual!	WITHOUT_CLASSIFICATION	0.9999869132900936	WITHOUT_CLASSIFICATION	1.3086709906554997E-5	DESIGN
at this point we have (drivingsqlalias) the sql alias of the driving table corresponding to the given user alias. however the driving table is not (necessarily) the table against which we want to apply locks. mainly the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9917007627267852	WITHOUT_CLASSIFICATION	0.00829923727321478	DESIGN
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.998924579605489	WITHOUT_CLASSIFICATION	0.0010754203945110843	DESIGN
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9998237060095388	WITHOUT_CLASSIFICATION	1.762939904612064E-4	DESIGN
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9995793952405048	WITHOUT_CLASSIFICATION	4.20604759495201E-4	DESIGN
both many-to-one and one-to-one are represented as a property. entitypersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. so we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. the other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. if that assertion changes then this check needs to change as well. partially this is an issue with the overloading of the term "lazy" here	WITHOUT_CLASSIFICATION	0.9474777276729547	DESIGN	0.05252227232704542	WITHOUT_CLASSIFICATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995333431782482	WITHOUT_CLASSIFICATION	4.6665682175175657E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995333431782482	WITHOUT_CLASSIFICATION	4.6665682175175657E-4	DESIGN
roottablename = persistentclass.getroottable().getqualifiedname( factory.getdialect() factory.getdefaultcatalog() factory.getdefaultschema() )	WITHOUT_CLASSIFICATION	0.9999208303154905	WITHOUT_CLASSIFICATION	7.916968450959273E-5	DESIGN
subclasses	WITHOUT_CLASSIFICATION	0.9999265175686244	WITHOUT_CLASSIFICATION	7.348243137555223E-5	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.99994565011453	WITHOUT_CLASSIFICATION	5.434988546996638E-5	DESIGN
protected void initpropertypaths(final string pathfinal type typefinal string[] columnsfinal string[] formulatemplatesfinal mapping factory)throws mappingexception {addformulapropertypath(path type formulatemplates)initpropertypaths(path type columns formulatemplates factory)}	WITHOUT_CLASSIFICATION	0.9975401370492726	WITHOUT_CLASSIFICATION	0.002459862950727389	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
custom sql (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9989403281266611	WITHOUT_CLASSIFICATION	0.0010596718733389128	DESIGN
moved up from abstractentitypersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9959102524711517	WITHOUT_CLASSIFICATION	0.00408974752884824	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
aliases for identifier ( alias.id ) skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9998853288756054	WITHOUT_CLASSIFICATION	1.1467112439448813E-4	DESIGN
decide which resultset to get the property value from	WITHOUT_CLASSIFICATION	0.999844001991874	WITHOUT_CLASSIFICATION	1.5599800812602448E-4	DESIGN
note it is conceptually possible that a usertype could map null to a non-null value so the following is arguable	WITHOUT_CLASSIFICATION	0.9999773378386924	WITHOUT_CLASSIFICATION	2.2662161307641507E-5	DESIGN
the contract of entitytuplizer.determineconcretesubclassentityname says that returning null is an indication that the specified entity-name (this.getentityname) should be used.	WITHOUT_CLASSIFICATION	0.9673360069928743	WITHOUT_CLASSIFICATION	0.03266399300712578	DESIGN
need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. using the collection's key type causes problems with property-ref keys	WITHOUT_CLASSIFICATION	0.9978452859479219	WITHOUT_CLASSIFICATION	0.0021547140520781437	DESIGN
cache these since they are stateless this one could even be static	WITHOUT_CLASSIFICATION	0.9980410458889358	WITHOUT_CLASSIFICATION	0.0019589541110640834	DESIGN
"as" is not in keywords	WITHOUT_CLASSIFICATION	0.9999385910246095	WITHOUT_CLASSIFICATION	6.14089753906227E-5	DESIGN
--commented out by inspection (12/4/04 910 am) public abstract void addcondition(string alias string[] columns string condition)	WITHOUT_CLASSIFICATION	0.9993153470987239	WITHOUT_CLASSIFICATION	6.846529012760413E-4	DESIGN
use the id column alias	WITHOUT_CLASSIFICATION	0.9999104104395837	WITHOUT_CLASSIFICATION	8.958956041626991E-5	DESIGN
private list aliases = new arraylist()	WITHOUT_CLASSIFICATION	0.9999517716706986	WITHOUT_CLASSIFICATION	4.822832930141166E-5	DESIGN
columns.add(columnname) aliases.add(tablealias)	WITHOUT_CLASSIFICATION	0.9995823705226861	WITHOUT_CLASSIFICATION	4.176294773139773E-4	DESIGN
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9996229243263757	WITHOUT_CLASSIFICATION	3.770756736243766E-4	DESIGN
revert to traditional hibernate behavior of setting initialpoolsize to minpoolsize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9986762492469079	WITHOUT_CLASSIFICATION	0.0013237507530920805	DESIGN
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999538067542765	WITHOUT_CLASSIFICATION	4.6193245723465396E-5	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9959004288915795	WITHOUT_CLASSIFICATION	0.004099571108420516	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9959004288915795	WITHOUT_CLASSIFICATION	0.004099571108420516	DESIGN
if an exception occurs during flush user must call rollback()	WITHOUT_CLASSIFICATION	0.9998627274934841	WITHOUT_CLASSIFICATION	1.372725065158249E-4	DESIGN
essentially 1) if we have a local (hibernate) transaction in progress and it already has the usertransaction cached use that usertransaction to determine the status. 2) if a transaction manager has been located use that transaction manager to determine the status. 3) finally as the last resort try to lookup the usertransaction via jndi and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9741186598639181	WITHOUT_CLASSIFICATION	0.025881340136081933	DESIGN
package	WITHOUT_CLASSIFICATION	0.9998110032392955	WITHOUT_CLASSIFICATION	1.8899676070448587E-4	DESIGN
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9988574943246686	WITHOUT_CLASSIFICATION	0.0011425056753313495	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9999370949212393	WITHOUT_CLASSIFICATION	6.29050787607799E-5	DESIGN
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database) since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9997529191351172	WITHOUT_CLASSIFICATION	2.4708086488269395E-4	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9998784575736792	WITHOUT_CLASSIFICATION	1.2154242632091371E-4	DESIGN
regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed) so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999544674448828	WITHOUT_CLASSIFICATION	4.5532555117242135E-5	DESIGN
then handle any user-defined entity modes	WITHOUT_CLASSIFICATION	0.9990474133989722	WITHOUT_CLASSIFICATION	9.525866010279584E-4	DESIGN
establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9994997078676445	WITHOUT_CLASSIFICATION	5.002921323554843E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9847082776449472	WITHOUT_CLASSIFICATION	0.015291722355052866	DESIGN
note this is being used from the process of shutting down a sessionfactory. specific things to consider (1) this clearing of the region should not propagate to other nodes on the cluster (if any) this is the cache-mode-local option bit (2) really just trying a best effort to cleanup after ourselves lock failures etc are not critical here this is the fail-silently option bit	WITHOUT_CLASSIFICATION	0.7639579859477801	WITHOUT_CLASSIFICATION	0.23604201405222	DESIGN
need to extract the component values and check for subtype replacements	WITHOUT_CLASSIFICATION	0.9998932325780949	WITHOUT_CLASSIFICATION	1.067674219049891E-4	DESIGN
we ignore minimalputoverride. jbosscache putforexternalread is already about as minimal as we can get it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9993731355975306	WITHOUT_CLASSIFICATION	6.268644024695353E-4	DESIGN
for now just "re-flatten" the metamodel since this is temporary stuff anyway (hhh-1907)	WITHOUT_CLASSIFICATION	0.9901627842458075	WITHOUT_CLASSIFICATION	0.009837215754192602	DESIGN
configure the cache to use our tm	WITHOUT_CLASSIFICATION	0.9994903126020915	WITHOUT_CLASSIFICATION	5.096873979083948E-4	DESIGN
this solution would allow us to eliminate the owner arg to disassemble() but what if the collection was null and then later had elements added? seems unsafe session.getpersistencecontext().getcollectionentry( (persistentcollection) value ).getkey()	WITHOUT_CLASSIFICATION	0.7515696434437509	WITHOUT_CLASSIFICATION	0.2484303565562492	DESIGN
make sure jbc doesn't look one up	WITHOUT_CLASSIFICATION	0.9998398459920769	WITHOUT_CLASSIFICATION	1.6015400792315817E-4	DESIGN
some collections are not lazy	WITHOUT_CLASSIFICATION	0.9999584869718828	WITHOUT_CLASSIFICATION	4.1513028117212186E-5	DESIGN
here we don't want to suspend the tx. if we do 1) we might be caching query results that reflect uncommitted changes. no tx == no wl on cache node so other threads can prematurely see those query results 2) no tx == immediate replication. more overhead plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.7193734642886251	WITHOUT_CLASSIFICATION	0.2806265357113748	DESIGN
return the (fully resolved) identifier value but do not resolve to the actual referenced entity instance note the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999951998850461	WITHOUT_CLASSIFICATION	4.800114953817764E-6	DESIGN
add a zero (or quite low) timeout option so we don't block. ignore any timeoutexception. basically we forego caching the query result in order to avoid blocking. reads are done with suspended tx so they should not hold the lock for long. not caching the query result is ok since any subsequent read will just see the old result with its out-of-date timestamp that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9948153709397008	WITHOUT_CLASSIFICATION	0.005184629060299116	DESIGN
impl note takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method	WITHOUT_CLASSIFICATION	0.9984521321121185	WITHOUT_CLASSIFICATION	0.0015478678878815548	DESIGN
we have the jbcwritemutex so no other local thread will be trying to write this key. it's possible here some remote thread has come in and changed the values again but since we are reading the values to write to jbc right now we know we are writing the latest values i.e. we don't assume that what we cached in entry.update() above is what we should write to jbc now. our write could be redundant i.e. we are writing what some remote thread just came in an wrote. there is a chance that yet another remote thread will update us and we'll then overwrite that later data in jbc. but all remote nodes will ignore that change in their localcache the only place it will live will be in jbc where it can only effect the initial state transfer values on newly joined nodes (i.e. populatelocalcache()).	WITHOUT_CLASSIFICATION	0.9956323962471512	WITHOUT_CLASSIFICATION	0.00436760375284883	DESIGN
local cache so we use synchronization	WITHOUT_CLASSIFICATION	0.9959245772122601	WITHOUT_CLASSIFICATION	0.0040754227877399345	DESIGN
local cache so we use synchronization	WITHOUT_CLASSIFICATION	0.9959245772122601	WITHOUT_CLASSIFICATION	0.0040754227877399345	DESIGN
don't need to lock the cache here since if someone else inserted the same pk first the insert would fail	WITHOUT_CLASSIFICATION	0.9993994891709284	WITHOUT_CLASSIFICATION	6.005108290717008E-4	DESIGN
we need to grab the version value from the entity otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9488564729298796	WITHOUT_CLASSIFICATION	0.05114352707012049	DESIGN
we need to obtain the lock before any actions are executed since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9918118710370994	WITHOUT_CLASSIFICATION	0.008188128962900488	DESIGN
postdelete after actually deleting a row record the fact that the instance no longer exists on the database (needed for identity-column key generation) and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9858015923729465	WITHOUT_CLASSIFICATION	0.014198407627053633	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999383277826038	WITHOUT_CLASSIFICATION	6.167221739618467E-5	DESIGN
todo what else to do here?	DESIGN	0.810960872356482	DESIGN	0.18903912764351802	WITHOUT_CLASSIFICATION
put() has nowait semantics is this really appropriate? note that it needs to be async replication never local or sync	DESIGN	0.7819739472944046	WITHOUT_CLASSIFICATION	0.2180260527055954	DESIGN
'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. the need for it is intended to be alleviated with future developement thus it is not defined as an environment constant it is used to control whether we should consult the jdbc metadata to determine certain settings default values it is useful to not do this when the database may not be available (mainly in tools usage).	DESIGN	0.9497710179241857	DESIGN	0.050228982075814235	WITHOUT_CLASSIFICATION
todo get sql rendering out of this package!	DESIGN	0.5635767293030117	DESIGN	0.4364232706969883	WITHOUT_CLASSIFICATION
todo get sql rendering out of this package!	DESIGN	0.5635767293030117	DESIGN	0.4364232706969883	WITHOUT_CLASSIFICATION
todo eventually merge this with treecache and just add optional opt-lock support there.	DESIGN	0.8697563009330171	DESIGN	0.13024369906698285	WITHOUT_CLASSIFICATION
can happen because of the multiple ways cache.remove() can be invoked (	DESIGN	0.9994717903677638	WITHOUT_CLASSIFICATION	5.282096322362139E-4	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea	DESIGN	0.9989768056550198	WITHOUT_CLASSIFICATION	0.0010231943449802478	DESIGN
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9855075713203431	WITHOUT_CLASSIFICATION	0.014492428679657091	DESIGN
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9855075713203431	WITHOUT_CLASSIFICATION	0.014492428679657091	DESIGN
fixme hacky workaround to jbcache-1202	DESIGN	0.8806318241559229	WITHOUT_CLASSIFICATION	0.11936817584407701	DESIGN
fixme hacky workaround to jbcache-1202	DESIGN	0.8806318241559229	WITHOUT_CLASSIFICATION	0.11936817584407701	DESIGN
todo i considered validating ts cache config here but decided to defer unti gettimestampscacheinstance() in case the cache is never actually used	DESIGN	0.5173201724925619	WITHOUT_CLASSIFICATION	0.4826798275074381	DESIGN
todo is this a valid operation on a timestamps cache?	DESIGN	0.8133004184413781	DESIGN	0.1866995815586219	WITHOUT_CLASSIFICATION
todo is this a valid operation on a timestamps cache?	DESIGN	0.8133004184413781	DESIGN	0.1866995815586219	WITHOUT_CLASSIFICATION
todo why not use the timestamp in a dataversion?	DESIGN	0.8120274019596143	DESIGN	0.18797259804038577	WITHOUT_CLASSIFICATION
can happen because of the multiple ways cache.remove() can be invoked (	DESIGN	0.9994717903677638	WITHOUT_CLASSIFICATION	5.282096322362139E-4	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea	DESIGN	0.9989768056550198	WITHOUT_CLASSIFICATION	0.0010231943449802478	DESIGN
swaldman 2004-02-07 modify to allow null values to signify fall through to c3p0 poolconfig defaults	DESIGN	0.9995166330985047	WITHOUT_CLASSIFICATION	4.8336690149531643E-4	DESIGN
turn hibernate.c3p0. into c3p0. so c3p0 gets a chance to see all hibernate.c3p0.	DESIGN	0.991121874167164	WITHOUT_CLASSIFICATION	0.008878125832835938	DESIGN
todo this bit actually has to be called after all cascades! but since identity insert is called synchronously instead of asynchronously as other actions it isn't	DESIGN	0.9446018806613203	DESIGN	0.05539811933867962	WITHOUT_CLASSIFICATION
todo reenable if we also fix the above todo	DESIGN	0.8261086275669479	DESIGN	0.1738913724330521	WITHOUT_CLASSIFICATION
todo inefficient if that cache is just going to ignore the updated state!	DESIGN	0.5476938403884049	DESIGN	0.45230615961159526	WITHOUT_CLASSIFICATION
we may be screwed here since the collection action is about to execute and we do not know the final owner key value	DESIGN	0.9997532766677811	WITHOUT_CLASSIFICATION	2.467233322188558E-4	DESIGN
create an action that will evict collection and entity regions based on queryspaces (table names). todo cache the autodetected information and pass it in instead.	DESIGN	0.7215210655194584	DESIGN	0.2784789344805415	WITHOUT_CLASSIFICATION
todo what else to do here?	DESIGN	0.810960872356482	DESIGN	0.18903912764351802	WITHOUT_CLASSIFICATION
todo modify the class definition if not already transformed	DESIGN	0.9521487106257064	WITHOUT_CLASSIFICATION	0.04785128937429369	DESIGN
todo what else to do here?	DESIGN	0.810960872356482	DESIGN	0.18903912764351802	WITHOUT_CLASSIFICATION
this is called by sessionfactory irregardless we just disregard here could also add a check to sessionfactory to only conditionally call start	DESIGN	0.9983798965994873	WITHOUT_CLASSIFICATION	0.0016201034005125896	DESIGN
this is called by sessionfactory irregardless we just disregard here could also add a check to sessionfactory to only conditionally call stop	DESIGN	0.9990355862928286	WITHOUT_CLASSIFICATION	9.644137071712742E-4	DESIGN
todo to handle concurrent writes correctly this should return a lock to the client	DESIGN	0.994043188660693	DESIGN	0.00595681133930705	WITHOUT_CLASSIFICATION
put() has nowait semantics is this really appropriate? note that it needs to be async replication never local or sync	DESIGN	0.7819739472944046	WITHOUT_CLASSIFICATION	0.2180260527055954	DESIGN
todo to handle concurrent writes correctly the client should pass in a lock	DESIGN	0.9695534089217898	DESIGN	0.03044659107821021	WITHOUT_CLASSIFICATION
todo assumes all collections disassemble to an array!	DESIGN	0.7611444972248901	WITHOUT_CLASSIFICATION	0.23885550277511	DESIGN
todo reuse the preloadevent	DESIGN	0.9753817303940909	WITHOUT_CLASSIFICATION	0.024618269605909147	DESIGN
todo this was added to support initializing an entity's entityentry snapshot during reattach this should be refactored to instead expose a method to assemble a entityentry based on this state for return.	DESIGN	0.9997427100485629	DESIGN	2.572899514371288E-4	WITHOUT_CLASSIFICATION
todo what is the implication of this?	DESIGN	0.9877579455567105	DESIGN	0.012242054443289591	WITHOUT_CLASSIFICATION
use count as the default. this mimics the old behavior although none might be a better option moving forward in the case of callable	DESIGN	0.9958809324356601	WITHOUT_CLASSIFICATION	0.0041190675643398315	DESIGN
todo joinkeycolumnname & foreignkeycolumnname should be called either here or at a slightly higer level in the stack (to get all the information we need) right now hbmbinder does not support the	DESIGN	0.9866406942350966	DESIGN	0.01335930576490351	WITHOUT_CLASSIFICATION
todo suck this into initlaziness!	DESIGN	0.9649823389830584	DESIGN	0.035017661016941495	WITHOUT_CLASSIFICATION
we have to set up the table later!! yuck	DESIGN	0.9999194985622315	WITHOUT_CLASSIFICATION	8.050143776845051E-5	DESIGN
todo better to degrade to lazy="false" if uninstrumented	DESIGN	0.8829229601454854	DESIGN	0.11707703985451456	WITHOUT_CLASSIFICATION
todo again how should this work for non-pojo entities?	DESIGN	0.9905744166904826	DESIGN	0.009425583309517314	WITHOUT_CLASSIFICATION
todo this is a bit of copy/paste from indexedcollection.createprimarykey()	DESIGN	0.9560011005991117	DESIGN	0.043998899400888344	WITHOUT_CLASSIFICATION
this inner class implements a case statement.perhaps im being a bit over-clever here	DESIGN	0.9994698499362461	WITHOUT_CLASSIFICATION	5.30150063753973E-4	DESIGN
todo bad implementation cos it depends upon ordering of mapping doc fixing this requires that collection/persistentclass gain access to the mappings reference from configuration (or the filterdefinitions map directly) sometime during configuration.buildsessionfactory (after all the types/filter-defs are known and before building persisters).	DESIGN	0.8829678898277634	DESIGN	0.11703211017223651	WITHOUT_CLASSIFICATION
use of a stringbuffer to workaround a jdk bug	DESIGN	0.9302601142249284	WITHOUT_CLASSIFICATION	0.06973988577507158	DESIGN
hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9966112137838599	WITHOUT_CLASSIFICATION	0.003388786216140188	DESIGN
fixme get the persistentclass	DESIGN	0.999985368558215	WITHOUT_CLASSIFICATION	1.463144178510414E-5	DESIGN
fixme get the persistentclass	DESIGN	0.999985368558215	WITHOUT_CLASSIFICATION	1.463144178510414E-5	DESIGN
icky workaround for mysql bug	DESIGN	0.9970466924599121	WITHOUT_CLASSIFICATION	0.002953307540088013	DESIGN
todo somehow add the newly created foreign keys to the internal collection	DESIGN	0.6316874700050117	DESIGN	0.36831252999498826	WITHOUT_CLASSIFICATION
todo possibly relax that	DESIGN	0.81939336991259	WITHOUT_CLASSIFICATION	0.18060663008740993	DESIGN
todo possibly relax that	DESIGN	0.81939336991259	WITHOUT_CLASSIFICATION	0.18060663008740993	DESIGN
todo possibly relax that	DESIGN	0.81939336991259	WITHOUT_CLASSIFICATION	0.18060663008740993	DESIGN
use of a stringbuffer to workaround a jdk bug	DESIGN	0.9302601142249284	WITHOUT_CLASSIFICATION	0.06973988577507158	DESIGN
use a degenerated strategy for backward compatibility	DESIGN	0.9985187621073652	WITHOUT_CLASSIFICATION	0.0014812378926348335	DESIGN
sets can be just a view of a part of another collection. do we need to copy it to be sure it won't be changing underneath us? ie. this.set.addall(set)	DESIGN	0.9966729959166007	WITHOUT_CLASSIFICATION	0.003327004083399135	DESIGN
note that i parameter is now unused (delete it?)	DESIGN	0.9908762366334437	WITHOUT_CLASSIFICATION	0.009123763366556377	DESIGN
just to help out during the load (ugly i know)	DESIGN	0.9998268715724261	WITHOUT_CLASSIFICATION	1.731284275738471E-4	DESIGN
todo safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.7381316496852559	WITHOUT_CLASSIFICATION	0.26186835031474404	DESIGN
yick! need this for proper serialization/deserialization handling	DESIGN	0.9841284705951074	WITHOUT_CLASSIFICATION	0.01587152940489268	DESIGN
todo get sql rendering out of this package!	DESIGN	0.5635767293030117	DESIGN	0.4364232706969883	WITHOUT_CLASSIFICATION
todo get sql rendering out of this package!	DESIGN	0.5635767293030117	DESIGN	0.4364232706969883	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
todo get sql rendering out of this package!	DESIGN	0.5635767293030117	DESIGN	0.4364232706969883	WITHOUT_CLASSIFICATION
todo not sure this is correct could not find docs on how to do this.	DESIGN	0.9624108512527164	DESIGN	0.03758914874728358	WITHOUT_CLASSIFICATION
hsql has no blob/clob support . but just put these here for now!	DESIGN	0.9994550598052196	WITHOUT_CLASSIFICATION	5.449401947803325E-4	DESIGN
does this need holdlock also? return tablename + " with (updlock rowlock holdlock)"	DESIGN	0.9976295075257922	WITHOUT_CLASSIFICATION	0.0023704924742077955	DESIGN
sql-server at least needed this dropped after use strange!	DESIGN	0.9968739002897805	WITHOUT_CLASSIFICATION	0.003126099710219507	DESIGN
todo is there really any reason to kkeep trying if this fails once?	DESIGN	0.5682263986809024	WITHOUT_CLASSIFICATION	0.43177360131909764	DESIGN
tbd should this be varbinary($1)? registercolumntype(types.varbinary "binary($1)")	DESIGN	0.9884695810309677	WITHOUT_CLASSIFICATION	0.011530418969032352	DESIGN
is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9772389579469475	WITHOUT_CLASSIFICATION	0.022761042053052568	DESIGN
xmlforest requires a new kind of function constructor	DESIGN	0.9996107537409169	WITHOUT_CLASSIFICATION	3.8924625908304077E-4	DESIGN
does this dialect support the alter table syntax?	DESIGN	0.9984041670239958	WITHOUT_CLASSIFICATION	0.0015958329760041253	DESIGN
do we need to qualify index names with the schema name?	DESIGN	0.9992522676945387	WITHOUT_CLASSIFICATION	7.477323054614233E-4	DESIGN
does this dialect support the unique column syntax?	DESIGN	0.977120635017222	WITHOUT_CLASSIFICATION	0.022879364982777973	DESIGN
does this dialect support check constraints?	DESIGN	0.9930588782801082	WITHOUT_CLASSIFICATION	0.006941121719891741	DESIGN
do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9976476042921598	WITHOUT_CLASSIFICATION	0.0023523957078401005	DESIGN
does this dialect support the for update syntax?	DESIGN	0.9985606083866302	WITHOUT_CLASSIFICATION	0.0014393916133697826	DESIGN
does this dialect support the oracle-style for update nowait syntax?	DESIGN	0.9985606083866302	WITHOUT_CLASSIFICATION	0.0014393916133697826	DESIGN
does this dialect support for update of allowing particular rows to be locked?	DESIGN	0.9896763876067857	WITHOUT_CLASSIFICATION	0.010323612393214436	DESIGN
note there is a wierd implementation in the client side	DESIGN	0.9999179984665723	WITHOUT_CLASSIFICATION	8.200153342771819E-5	DESIGN
todo never reached since gettypename() actually throws an exception!	DESIGN	0.8708225046490319	WITHOUT_CLASSIFICATION	0.12917749535096804	DESIGN
todo should we additionally check the current isolation mode explicitly?	DESIGN	0.6591640593961202	DESIGN	0.34083594060387984	WITHOUT_CLASSIFICATION
todo remove this and just have subclasses use isolater/isolatedwork directly	DESIGN	0.955841220277459	DESIGN	0.04415877972254106	WITHOUT_CLASSIFICATION
todo should orphans really be deleted during lock???	DESIGN	0.7955700617532985	DESIGN	0.20442993824670141	WITHOUT_CLASSIFICATION
orphans should not be deleted during merge??	DESIGN	0.9987480148505418	WITHOUT_CLASSIFICATION	0.0012519851494583055	DESIGN
orphans should not be deleted during copy??	DESIGN	0.9987480148505418	WITHOUT_CLASSIFICATION	0.0012519851494583055	DESIGN
i suppose?	DESIGN	0.9997779999150413	WITHOUT_CLASSIFICATION	2.2200008495871913E-4	DESIGN
todo suck this logic into the collection!	DESIGN	0.9195584941743264	DESIGN	0.08044150582567358	WITHOUT_CLASSIFICATION
todo an alternative is to check if the owner has changed if it hasn't then get the id from collection.getowner()	DESIGN	0.8871985007725032	WITHOUT_CLASSIFICATION	0.1128014992274969	DESIGN
todorefactor + make this method private	DESIGN	0.9915499746408695	WITHOUT_CLASSIFICATION	0.008450025359130475	DESIGN
todo we can actually just determine this from the incoming entityentry-s	DESIGN	0.9747711056076934	DESIGN	0.025228894392306554	WITHOUT_CLASSIFICATION
todo should this be an initializeentityeventlistener??? (watch out for performance!)	DESIGN	0.9443369962980144	DESIGN	0.0556630037019857	WITHOUT_CLASSIFICATION
todo better to pass the id in as an argument?	DESIGN	0.5120091984913552	WITHOUT_CLASSIFICATION	0.48799080150864477	DESIGN
todo potentially look at optimizing these two arrays	DESIGN	0.5064106870123515	WITHOUT_CLASSIFICATION	0.49358931298764847	DESIGN
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.557942622591666	WITHOUT_CLASSIFICATION	0.44205737740833384	DESIGN
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.557942622591666	WITHOUT_CLASSIFICATION	0.44205737740833384	DESIGN
todo temporary	DESIGN	0.7672498149067095	DESIGN	0.2327501850932904	WITHOUT_CLASSIFICATION
todo not quite sure about the full implications of this!	DESIGN	0.6414918667211368	WITHOUT_CLASSIFICATION	0.35850813327886305	DESIGN
todo not quite sure about the full implications of this!	DESIGN	0.6414918667211368	WITHOUT_CLASSIFICATION	0.35850813327886305	DESIGN
todo ugly here	DESIGN	0.8677580772348873	WITHOUT_CLASSIFICATION	0.1322419227651127	DESIGN
this is kinda the best we can do	DESIGN	0.9940842800958586	WITHOUT_CLASSIFICATION	0.005915719904141378	DESIGN
todo this needn't exclude subclasses	DESIGN	0.8704888874561572	DESIGN	0.12951111254384287	WITHOUT_CLASSIFICATION
todo need map? the prob is a proper key right?	DESIGN	0.8341053397006826	DESIGN	0.1658946602993174	WITHOUT_CLASSIFICATION
todo i'd much rather have this done from #endloadingcollection(collectionpersisterloadingcollectionentry)	DESIGN	0.9906664237087713	DESIGN	0.009333576291228543	WITHOUT_CLASSIFICATION
todo hack!!! note here we cleanup the load context when we have no more local lce entries. this "works" for the time being because really only the collection load contexts are implemented. long term this cleanup should become part of the "close result set" processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9938302491810894	DESIGN	0.006169750818910568	WITHOUT_CLASSIFICATION
todo should really move this log statement to collectiontype where this is used from	DESIGN	0.999936831673179	DESIGN	6.316832682096019E-5	WITHOUT_CLASSIFICATION
todo keep seperate notions of qt[] here for shallow/non-shallow queries	DESIGN	0.5723029607385959	DESIGN	0.4276970392614041	WITHOUT_CLASSIFICATION
todo add this info to the translator and aggregate it here	DESIGN	0.7730377826171918	DESIGN	0.22696221738280817	WITHOUT_CLASSIFICATION
todo move into collection type so we can use polymorphism!	DESIGN	0.9996753351124439	DESIGN	3.246648875561263E-4	WITHOUT_CLASSIFICATION
todo should we check the current isolation mode explicitly?	DESIGN	0.6591640593961202	DESIGN	0.34083594060387984	WITHOUT_CLASSIFICATION
todo suck into event class	DESIGN	0.7450332068737037	WITHOUT_CLASSIFICATION	0.2549667931262963	DESIGN
do we even really need this? the update will fail anyway.	DESIGN	0.9996509494467551	WITHOUT_CLASSIFICATION	3.4905055324489255E-4	DESIGN
hum should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9875904007612666	WITHOUT_CLASSIFICATION	0.012409599238733336	DESIGN
todo would it be better to do a refresh from db?	DESIGN	0.9980757262478713	DESIGN	0.0019242737521287224	WITHOUT_CLASSIFICATION
todo we use two visitors here inefficient!	DESIGN	0.7213820199307395	DESIGN	0.2786179800692606	WITHOUT_CLASSIFICATION
this class has no proxies (so do a shortcut)	DESIGN	0.9982675317585331	WITHOUT_CLASSIFICATION	0.001732468241466882	DESIGN
postload is needed for ejb3 todo reuse the postloadevent	DESIGN	0.5909995706865958	WITHOUT_CLASSIFICATION	0.40900042931340413	DESIGN
todo put this stuff back in to read snapshot from the second-level cache (needs some extra work)	DESIGN	0.5885571069107335	DESIGN	0.4114428930892665	WITHOUT_CLASSIFICATION
null or brand new collection this will also (inefficiently) handle arrays which have no snapshot so we can't do any better	DESIGN	0.976446069473893	WITHOUT_CLASSIFICATION	0.02355393052610698	DESIGN
todo is this 100% correct?	DESIGN	0.5000445211097573	DESIGN	0.49995547889024267	WITHOUT_CLASSIFICATION
todo iteratively get transient entities and retry merge until one of the following conditions 1) transientcopycache.size() == 0 2) transientcopycache.size() is not decreasing and copycache.size() is not increasing todo find out if retrying can add entities to copycache (don't think it can) for now just retry once throw transientobjectexception if there are still any transient entities	DESIGN	0.9792813276931165	WITHOUT_CLASSIFICATION	0.020718672306883505	DESIGN
entity name will not be available for non-pojo entities todo cache the entity name somewhere so that it is available to this exception	DESIGN	0.9230062612067687	DESIGN	0.07699373879323129	WITHOUT_CLASSIFICATION
todo we should throw an exception if we really know for sure that this is a detached instance rather than just assuming throw new staleobjectstateexception(entityname id)	DESIGN	0.9960379662056349	DESIGN	0.003962033794365105	WITHOUT_CLASSIFICATION
todo perhaps we should additionally require that the incoming entity version be equivalent to the defined unsaved-value?	DESIGN	0.9768728070358859	DESIGN	0.023127192964114102	WITHOUT_CLASSIFICATION
perhaps this should be an exception since it is only ever used in the above method?	DESIGN	0.9918891773789847	WITHOUT_CLASSIFICATION	0.008110822621015203	DESIGN
put a placeholder in entries so we don't recurse back and try to save() the same object again. question should this be done before onsave() is called? likewise should it be done before onupdate()?	DESIGN	0.7016790770086317	WITHOUT_CLASSIFICATION	0.2983209229913682	DESIGN
todo merge into one method!	DESIGN	0.5786145386910782	WITHOUT_CLASSIFICATION	0.42138546130892196	DESIGN
todo refactor to .sql package	DESIGN	0.5703660428700038	WITHOUT_CLASSIFICATION	0.42963395712999625	DESIGN
provides query splitting methods which were originally in querytranslator. <br> todo this will need to be refactored at some point. @author josh	DESIGN	0.9795598371936551	DESIGN	0.02044016280634488	WITHOUT_CLASSIFICATION
todo this is one of the ugliest and most fragile pieces of code in hibernate.	DESIGN	0.9126700697869385	DESIGN	0.08732993021306144	WITHOUT_CLASSIFICATION
todo temporary needed because currently persister is the one that creates and renders the join fragments for inheritence hierarchies	DESIGN	0.987109605393301	DESIGN	0.012890394606699062	WITHOUT_CLASSIFICATION
todo better way?!?	DESIGN	0.6967493125620965	WITHOUT_CLASSIFICATION	0.30325068743790357	DESIGN
not possible to simply re-use the versionpropertynode here as it causes oom errors due to circularity (	DESIGN	0.9998845383661507	WITHOUT_CLASSIFICATION	1.1546163384935213E-4	DESIGN
todothis is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9988485084460509	WITHOUT_CLASSIFICATION	0.001151491553949194	DESIGN
todo this is a bit dodgy come up with a better way to check this (plus see above comment)	DESIGN	0.9895489020569728	DESIGN	0.010451097943027256	WITHOUT_CLASSIFICATION
even here if only properties mapped to the "base table" are referenced in the set and where clauses this could be handled by the basicdelegate. todo decide if it is better performance-wise to perform that check or to simply use the multitableupdatedelegate	DESIGN	0.9994452718585175	DESIGN	5.547281414825397E-4	WITHOUT_CLASSIFICATION
todo switch statements are always evil! we already had bugs because of forgotten token types. use polymorphism for this!	DESIGN	0.9349398549348882	DESIGN	0.06506014506511175	WITHOUT_CLASSIFICATION
todo we really need to be able to deal with component paths here also this is difficult because the hql-sql grammar expects all those node types to be fromreferencenodes. one potential fix here would be to convert the intoclause to just use a fromclause/fromelement combo (as a child of the insertstatement) and move all this logic into the insertstatement. that's probably the easiest approach (read least amount of changes to the grammar and code) but just doesn't feel right as then an insert would contain 2 from-clauses	DESIGN	0.9999859931825896	DESIGN	1.4006817410398279E-5	WITHOUT_CLASSIFICATION
really there are two situations where it should be ok to allow the insertion into properties defined on a superclass 1) union-subclass with an abstract root entity 2) discrim-subclass #1 is handled already because of the fact that unionsubclasspersister alreay always returns 0 for this call we may want to disallow it for discrim-subclass just for consistency-sake (currently does not work anyway)	DESIGN	0.9948251773725678	DESIGN	0.005174822627432174	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
implicit joins are always(?) ok to reuse	DESIGN	0.9988211692665804	WITHOUT_CLASSIFICATION	0.0011788307334196656	DESIGN
todo we may also want to check that the types here map to exactly one column/jdbc-type can't think of a situation where arithmetic expression between multi-column mappings makes any sense.	DESIGN	0.9885457383645495	DESIGN	0.011454261635450505	WITHOUT_CLASSIFICATION
we do not know either type blind guess!	DESIGN	0.9988250386356822	WITHOUT_CLASSIFICATION	0.0011749613643178636	DESIGN
todo used to be exprnoparens! was this needed?	DESIGN	0.999999600983422	DESIGN	3.990165779523507E-7	WITHOUT_CLASSIFICATION
todo replace this with a more elegant solution.	DESIGN	0.998834893158283	DESIGN	0.001165106841716972	WITHOUT_CLASSIFICATION
todo should this really return null? if not figure out something better to do here.	DESIGN	0.7893180904134258	DESIGN	0.2106819095865743	WITHOUT_CLASSIFICATION
todo get sql rendering out of this package!	DESIGN	0.5635767293030117	DESIGN	0.4364232706969883	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
ignore it the incoming property could not be found so we cannot be sure what to do here. at the very least the safest is to simply not apply any dereference toggling	DESIGN	0.9812036680729557	WITHOUT_CLASSIFICATION	0.01879633192704437	DESIGN
todo most of below was taken verbatim from dotnode should either delegate this logic or super-type it	DESIGN	0.9662830151853803	DESIGN	0.03371698481461963	WITHOUT_CLASSIFICATION
otherwise a trim-specification and/or a trim-character have been specified we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character the trim-source	DESIGN	0.7033674872686044	WITHOUT_CLASSIFICATION	0.2966325127313956	DESIGN
todo we should really just collect these from the various selectexpressions rather than regenerating here	DESIGN	0.9475065704438099	DESIGN	0.052493429556190095	WITHOUT_CLASSIFICATION
todo is this a bit ugly?	DESIGN	0.6249668393917572	DESIGN	0.37503316060824265	WITHOUT_CLASSIFICATION
need a better way to define the suffixes here	DESIGN	0.982243325828207	WITHOUT_CLASSIFICATION	0.01775667417179296	DESIGN
todo something much better - look at the type of the other expression! todo have comparisonexpression and/or arithmeticexpression rules complete the resolution of boolean nodes.	DESIGN	0.8984174230296694	DESIGN	0.10158257697033059	WITHOUT_CLASSIFICATION
todo what amount of significant digits need to be supported here? - from the decimalformat docs [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.8715031546104978	DESIGN	0.12849684538950212	WITHOUT_CLASSIFICATION
needed the "clazz_" check to work around union-subclasses todo is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9246736032061807	DESIGN	0.0753263967938192	WITHOUT_CLASSIFICATION
we should actually rework this class to not implement parser and just process path expressions in the most convenient way.	DESIGN	0.9935807048567161	WITHOUT_CLASSIFICATION	0.00641929514328394	DESIGN
the class is now way to complex!	DESIGN	0.9998035784936558	WITHOUT_CLASSIFICATION	1.9642150634416206E-4	DESIGN
todo get sql rendering out of here	DESIGN	0.6639804445369977	WITHOUT_CLASSIFICATION	0.33601955546300233	DESIGN
todo is there a better way?	DESIGN	0.9137137016119689	DESIGN	0.08628629838803108	WITHOUT_CLASSIFICATION
must be done here because of side-effect! yuck	DESIGN	0.9978189666902142	WITHOUT_CLASSIFICATION	0.0021810333097857415	DESIGN
name from a super query (a bit inelegant that it shows up here)	DESIGN	0.9940142315453492	WITHOUT_CLASSIFICATION	0.005985768454650853	DESIGN
we should reengineer this class so that rather than the current ad - hoc linear approach to processing a stream of tokens we instead build up a tree of expressions.	DESIGN	0.5723922229418175	WITHOUT_CLASSIFICATION	0.4276077770581825	DESIGN
this is ugly here but needed because its a subquery	DESIGN	0.997916538699396	WITHOUT_CLASSIFICATION	0.0020834613006040456	DESIGN
unhappy about this being public is there a better way?	DESIGN	0.8062640553729422	WITHOUT_CLASSIFICATION	0.1937359446270578	DESIGN
make sure this is a defined parameter and check the incoming value type todo what should be the actual exception type here?	DESIGN	0.9998434671342359	DESIGN	1.565328657640124E-4	WITHOUT_CLASSIFICATION
todo this constructor form is only used from constructor directly below us can it go away?	DESIGN	0.9983343829711404	DESIGN	0.0016656170288595722	WITHOUT_CLASSIFICATION
todo copy/paste from sessionimpl pull up!	DESIGN	0.6183895754196297	DESIGN	0.38161042458037037	WITHOUT_CLASSIFICATION
todo should remove this exposure and have all references to the session's batcher use the connectionmanager.	DESIGN	0.9419887635545565	DESIGN	0.058011236445443475	WITHOUT_CLASSIFICATION
todo should this get moved to persistentcontext? logically is persistentcontext the "thing" to which an interceptor gets attached?	DESIGN	0.9896382748891128	DESIGN	0.010361725110887201	WITHOUT_CLASSIFICATION
todo what type?	DESIGN	0.600810792267885	DESIGN	0.399189207732115	WITHOUT_CLASSIFICATION
todo should seriously consider not allowing a txn to begin from a child session can always route the request to the root session	DESIGN	0.9282358991741884	DESIGN	0.07176410082581156	WITHOUT_CLASSIFICATION
short-circuit for performance	DESIGN	0.9997885409217191	WITHOUT_CLASSIFICATION	2.1145907828090394E-4	DESIGN
not absolutely necessary but does help with aggressive release	DESIGN	0.9988319179833625	WITHOUT_CLASSIFICATION	0.0011680820166375897	DESIGN
todo remove these last two as batcher is no longer managing connections	DESIGN	0.8586278412299634	DESIGN	0.14137215877003664	WITHOUT_CLASSIFICATION
work around a bug in all known connection pools.	DESIGN	0.9990858593929164	WITHOUT_CLASSIFICATION	9.141406070836032E-4	DESIGN
todo make this the factory for "entity mode related" sessions also means making this the target of transaction-synch and the thing that knows how to cascade things between related sessions at that point perhaps this thing is a "sessioncontext" and connectionmanager is a "jdbccontext"? a "sessioncontext" should live in the impl package	DESIGN	0.9999787855245416	DESIGN	2.121447545845463E-5	WITHOUT_CLASSIFICATION
todo does this really need to be here? does the collection already have it's own up-to-date snapshot?	DESIGN	0.9924990164836527	DESIGN	0.007500983516347346	WITHOUT_CLASSIFICATION
todo the i==entityspan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.6307275051094651	WITHOUT_CLASSIFICATION	0.3692724948905349	DESIGN
this form used from annotations (?). essentially the same as the above using a resultset-mapping reference but without cachemode readonly and comment. fixme annotations do not use it so it can be remove from my pov @deprecated @param query the sql query string @param resultsetref the result-set-mapping name @param queryspaces any specified query spaces (used for auto-flushing) @param cacheable whether the query results are cacheable @param cacheregion if cacheable the region into which to store the results @param timeout a jdbc-level timeout to be applied @param fetchsize a jdbc-level fetch-size to be applied @param flushmode the flush mode to use for this query @param parametertypes parameter type map @param callable does the query string represent a callable object (i.e. proc)	DESIGN	0.9995524846864359	DESIGN	4.4751531356417045E-4	WITHOUT_CLASSIFICATION
todo add the notion of enabled filters to the cachekey to differentiate filtered collections from non-filtered but cachekey is currently used for both collections and entities would ideally need to define two seperate ones currently this works in conjuction with the check on defaultinitializecollectioneventhandler.initializecollectionfromcache() (which makes sure to not read from cache with enabled filters). early exit!!!!!	DESIGN	0.9406804676247116	DESIGN	0.0593195323752884	WITHOUT_CLASSIFICATION
for sets we should end the collection load after resolving the entities since we might call hashcode() on the elements todo or we could do this polymorphically and have two different operations implemented differently for arrays	DESIGN	0.5019820198108159	DESIGN	0.4980179801891842	WITHOUT_CLASSIFICATION
this is not very nice (and quite slow)	DESIGN	0.9918018540765778	WITHOUT_CLASSIFICATION	0.008198145923422256	DESIGN
use of trim() here is ugly?	DESIGN	0.9998606654036929	WITHOUT_CLASSIFICATION	1.3933459630708527E-4	DESIGN
todo this is too conservative if all preceding joins were also inner joins we could use an inner join here	DESIGN	0.6402141789334664	WITHOUT_CLASSIFICATION	0.3597858210665336	DESIGN
todo look at the owning property and check that it isn't lazy (by instrumentation)	DESIGN	0.5098157051719685	DESIGN	0.49018429482803144	WITHOUT_CLASSIFICATION
todo inefficient	DESIGN	0.9185358363142113	WITHOUT_CLASSIFICATION	0.08146416368578871	DESIGN
why does this matter?	DESIGN	0.9984313759110682	WITHOUT_CLASSIFICATION	0.001568624088931717	DESIGN
from the collection of associations locate oja for the manytoone corresponding to this persister to fully define the many-to-many we need that oja so that we can use its alias here todo is there a better way here?	DESIGN	0.9999277103937112	DESIGN	7.228960628875996E-5	WITHOUT_CLASSIFICATION
todo this class depends directly upon criteriaimpl in the impl package add a criteriaimplementor interface	DESIGN	0.7845121537922404	DESIGN	0.21548784620775963	WITHOUT_CLASSIFICATION
todo add a criteriaimplementor interface this class depends directly upon criteriaimpl in the impl package	DESIGN	0.7845121537922404	DESIGN	0.21548784620775963	WITHOUT_CLASSIFICATION
todo not so sure this is needed	DESIGN	0.7075489499334292	DESIGN	0.2924510500665707	WITHOUT_CLASSIFICATION
meant to handle dynamic instantiation queries(copy from queryloader)	DESIGN	0.9927719763277013	WITHOUT_CLASSIFICATION	0.007228023672298759	DESIGN
todo the order in which entities are saved may matter (e.g. a particular transient entity may need to be saved before other transient entities can be saved keep retrying the batch of transient entities until either 1) there are no transient entities left in transientcopycache or 2) no transient entities were saved in the last batch for now just run through the transient entities and retry the merge	DESIGN	0.9273843353387261	WITHOUT_CLASSIFICATION	0.07261566466127395	DESIGN
todo this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9998773147020986	DESIGN	1.2268529790145376E-4	WITHOUT_CLASSIFICATION
todo currently expects that the individual with expressions apply to the same sql table join. this may not be the case for joined-subclass where the property values might be coming from different tables in the joined hierarchy. at some point we should expand this to support that capability. however that has some difficulties 1) the biggest is how to handle ors when the individual comparisons are linked to different sql joins. 2) here we would need to track each comparison individually along with the join alias to which it applies and then pass that information back to the fromelement so it can pass it along to the joinsequence	DESIGN	0.9999953146807609	DESIGN	4.685319239106076E-6	WITHOUT_CLASSIFICATION
this function has a template -> restore output apply the template and write the result out todo downcast to avoid using an interface? yuck.	DESIGN	0.5441410648334607	WITHOUT_CLASSIFICATION	0.4558589351665394	DESIGN
at some point the generate phase needs to be moved out of here because a single object-level dml might spawn multiple sql dml command executions. possible to just move the sql generation for dml stuff but for consistency-sake probably best to just move responsiblity for the generation phase completely into the delegates (queryloader/statementexecutor) themselves. also not sure why queryloader currently even has a dependency on this at all does it need it? ideally like to see the walker itself given to the delegates directly	DESIGN	0.999504416464945	DESIGN	4.955835350549271E-4	WITHOUT_CLASSIFICATION
get the right object from the list would it be easier to just call getentity() ??	DESIGN	0.9620251963878262	WITHOUT_CLASSIFICATION	0.03797480361217376	DESIGN
todo should we just collect these like with the collections above?	DESIGN	0.7782919769621707	DESIGN	0.22170802303782938	WITHOUT_CLASSIFICATION
todo better to handle dynamic filters through implicit dynamicfilterparameterspecification see the discussion there in dynamicfilterparameterspecification's javadocs as to why it is currently not done that way.	DESIGN	0.9954579353048627	DESIGN	0.00454206469513731	WITHOUT_CLASSIFICATION
/ used only for regression testing!!!! todo obviously get rid of all this junk ) /	DESIGN	0.9396313819397784	DESIGN	0.06036861806022173	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9999102508741794	WITHOUT_CLASSIFICATION	8.97491258205754E-5	DESIGN
todo deprecated remove eventually	DESIGN	0.9378530075612085	DESIGN	0.06214699243879155	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9999102508741794	WITHOUT_CLASSIFICATION	8.97491258205754E-5	DESIGN
todo improve this hack!	DESIGN	0.6412920186918694	DESIGN	0.3587079813081307	WITHOUT_CLASSIFICATION
inheritance cycle detection (paranoid check)	DESIGN	0.9989493738574909	WITHOUT_CLASSIFICATION	0.0010506261425090573	DESIGN
todo remove use of instanceof!	DESIGN	0.7357958717141183	WITHOUT_CLASSIFICATION	0.26420412828588175	DESIGN
shortcut	DESIGN	0.9999509343823196	WITHOUT_CLASSIFICATION	4.906561768043351E-5	DESIGN
todo handle the case of a foreign key to something other than the pk	DESIGN	0.5640313206858415	WITHOUT_CLASSIFICATION	0.4359686793141586	DESIGN
create an index on the key columns??	DESIGN	0.9999102508741794	WITHOUT_CLASSIFICATION	8.97491258205754E-5	DESIGN
todo remove	DESIGN	0.7842388116630238	WITHOUT_CLASSIFICATION	0.2157611883369762	DESIGN
todo remove	DESIGN	0.7842388116630238	WITHOUT_CLASSIFICATION	0.2157611883369762	DESIGN
todo remove	DESIGN	0.7842388116630238	WITHOUT_CLASSIFICATION	0.2157611883369762	DESIGN
todo throw exception?	DESIGN	0.7204391983697189	WITHOUT_CLASSIFICATION	0.279560801630281	DESIGN
todo throw exception? maybe warn if not the same?	DESIGN	0.7032291620992964	DESIGN	0.2967708379007035	WITHOUT_CLASSIFICATION
todo make entitypersister not depend on sessionfactoryimplementor interface if possible	DESIGN	0.7744598033000595	DESIGN	0.22554019669994047	WITHOUT_CLASSIFICATION
todo is there a more elegant way than downcasting?	DESIGN	0.9963825078841553	DESIGN	0.003617492115844613	WITHOUT_CLASSIFICATION
todo encapsulate the protected instance variables!	DESIGN	0.5091517349164169	DESIGN	0.49084826508358326	WITHOUT_CLASSIFICATION
should indicate that we are processing an insert/update/delete query with a subquery implied via a collection property function. here we need to use the table name itself as the qualification alias. todo verify this works for all databases todo is this also the case in non-"indexed" scenarios?	DESIGN	0.9963968129065713	DESIGN	0.0036031870934286553	WITHOUT_CLASSIFICATION
todo copy/paste from insertrows()	DESIGN	0.6193118990272629	DESIGN	0.380688100972737	WITHOUT_CLASSIFICATION
todo copy/paste from recreate()	DESIGN	0.6193118990272629	DESIGN	0.380688100972737	WITHOUT_CLASSIFICATION
should this interface extend propertymapping?	DESIGN	0.9737482936396319	WITHOUT_CLASSIFICATION	0.026251706360368065	DESIGN
ie. the subquery! yuck!	DESIGN	0.999986289996181	WITHOUT_CLASSIFICATION	1.3710003819048596E-5	DESIGN
todo move to .sql package!!	DESIGN	0.8179024936551363	DESIGN	0.18209750634486374	WITHOUT_CLASSIFICATION
todo code duplication with singletableentitypersister	DESIGN	0.8751805362776589	DESIGN	0.12481946372234111	WITHOUT_CLASSIFICATION
todo it would be really really nice to use this to also model components!	DESIGN	0.9938590234047368	DESIGN	0.006140976595263232	WITHOUT_CLASSIFICATION
todo two hashmap lookups here is one too many	DESIGN	0.7255851745667531	DESIGN	0.27441482543324675	WITHOUT_CLASSIFICATION
todo code duplication with joinedsubclassentitypersister	DESIGN	0.8751805362776589	DESIGN	0.12481946372234111	WITHOUT_CLASSIFICATION
perhaps not really necessary	DESIGN	0.9995610840004825	WITHOUT_CLASSIFICATION	4.3891599951745704E-4	DESIGN
note this assumes something about how propertyselectfragment is implemented by the subclass! was tounqotedaliasstrings( getidentifercolumnnames() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.984862103346074	WITHOUT_CLASSIFICATION	0.015137896653925918	DESIGN
note this assumes something about how propertyselectfragment is implemented by the subclass! was tounqotedaliasstrings( getdiscriminatorcolumnname() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.984862103346074	WITHOUT_CLASSIFICATION	0.015137896653925918	DESIGN
todo should we use select .. for update?	DESIGN	0.9432453019850998	DESIGN	0.05675469801490034	WITHOUT_CLASSIFICATION
todo optimize this better!	DESIGN	0.5542119218854378	WITHOUT_CLASSIFICATION	0.44578807811456217	DESIGN
todo should we allow suffixes on these ?	DESIGN	0.9972204360025314	DESIGN	0.002779563997468606	WITHOUT_CLASSIFICATION
this is really ugly but necessary	DESIGN	0.990509107549876	WITHOUT_CLASSIFICATION	0.009490892450124067	DESIGN
ugly little workaround for fact that createuniquekeyloaders() does not handle component properties	DESIGN	0.6056666295600687	WITHOUT_CLASSIFICATION	0.3943333704399314	DESIGN
todo disable batch loading if lockmode > read?	DESIGN	0.5362067236712409	WITHOUT_CLASSIFICATION	0.4637932763287592	DESIGN
append the sql to return the generated identifier todo suck into insert	DESIGN	0.5748325192811058	DESIGN	0.42516748071889426	WITHOUT_CLASSIFICATION
todo i am not so sure about the exception handling in this bit!	DESIGN	0.6521575399617101	DESIGN	0.3478424600382899	WITHOUT_CLASSIFICATION
todo is this really necessary????	DESIGN	0.867393812662488	DESIGN	0.13260618733751184	WITHOUT_CLASSIFICATION
todo move to .sql package and refactor with similar things!	DESIGN	0.9929499833737679	DESIGN	0.0070500166262321366	WITHOUT_CLASSIFICATION
todo implement functionality this might be painful to do here as the "join post processing" for the subquery has already been performed (meaning that for theta-join dialects the join conditions have already been moved over to the where clause). a "simple" solution here might to perform "join post processing" once for the entire query (including any subqueries) at one fell swoop	DESIGN	0.9999958861930677	DESIGN	4.1138069322926775E-6	WITHOUT_CLASSIFICATION
todo this eventually needs to be removed	DESIGN	0.9588630238210644	DESIGN	0.041136976178935664	WITHOUT_CLASSIFICATION
kinda ugly but needed for collections with a "." node mapping	DESIGN	0.9995395697656142	WITHOUT_CLASSIFICATION	4.6043023438576715E-4	DESIGN
is this ok?	DESIGN	0.9996941836142752	WITHOUT_CLASSIFICATION	3.0581638572478337E-4	DESIGN
todo perhaps this should be some other runtimeexception	DESIGN	0.993916147204619	DESIGN	0.006083852795381013	WITHOUT_CLASSIFICATION
todo make this a bit nicer	DESIGN	0.7803863566582327	DESIGN	0.21961364334176728	WITHOUT_CLASSIFICATION
yuck	DESIGN	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
todo we should provide some way to get keys of collection of statistics to make it easier to retrieve from a gui perspective	DESIGN	0.9970071578136956	DESIGN	0.0029928421863042957	WITHOUT_CLASSIFICATION
@return collection removal fixme even if isinverse="true"?	DESIGN	0.9928429039900002	WITHOUT_CLASSIFICATION	0.00715709600999982	DESIGN
todo will need reference to session factory to fully complete hhh-1907	DESIGN	0.8558282682708162	DESIGN	0.14417173172918393	WITHOUT_CLASSIFICATION
todo currently keeps getters and setters (instead of propertyaccessors) because of the way getgetter() and getsetter() are implemented currently yuck!	DESIGN	0.8071049109853726	WITHOUT_CLASSIFICATION	0.1928950890146274	DESIGN
todo redesign how propertyaccessors are acquired	DESIGN	0.8721592579201556	DESIGN	0.1278407420798445	WITHOUT_CLASSIFICATION
todo yuck!!!	DESIGN	0.9185358363142113	WITHOUT_CLASSIFICATION	0.08146416368578871	DESIGN
todo yuck!!! fix after hhh-1907 is complete	DESIGN	0.9782816412437307	DESIGN	0.0217183587562692	WITHOUT_CLASSIFICATION
todo need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9988013917708513	DESIGN	0.0011986082291487918	WITHOUT_CLASSIFICATION
todo design new lifecycle for proxyfactory	DESIGN	0.6499593212928437	DESIGN	0.35004067870715627	WITHOUT_CLASSIFICATION
todo would be nice to handle proxy classes elegantly!	DESIGN	0.946767404461905	DESIGN	0.053232595538094965	WITHOUT_CLASSIFICATION
todo copy/paste from manytoonetype	DESIGN	0.6193118990272629	DESIGN	0.380688100972737	WITHOUT_CLASSIFICATION
todo should this be session.instantiate(persister )?	DESIGN	0.9692828825801981	DESIGN	0.030717117419801862	WITHOUT_CLASSIFICATION
todo this is a bit arbitrary expose a switch to the user?	DESIGN	0.90037662343141	DESIGN	0.09962337656858992	WITHOUT_CLASSIFICATION
todo implement caching?! proxies?!	DESIGN	0.8565679707862002	DESIGN	0.14343202921379983	WITHOUT_CLASSIFICATION
todo is this right??	DESIGN	0.5471876980675006	WITHOUT_CLASSIFICATION	0.4528123019324996	DESIGN
is this really necessary?	DESIGN	0.9997075682681364	WITHOUT_CLASSIFICATION	2.9243173186365063E-4	DESIGN
todo move these to a new joinabletype abstract class extended by entitytype and persistentcollectiontype	DESIGN	0.9974511661714702	DESIGN	0.002548833828529736	WITHOUT_CLASSIFICATION
todo this is very suboptimal for some subclasses (namely components) since it does not take advantage of two-phase-load	DESIGN	0.9067210248610146	DESIGN	0.0932789751389855	WITHOUT_CLASSIFICATION
worrying about proxies is perhaps a little bit of overkill here	DESIGN	0.9863668386046084	WITHOUT_CLASSIFICATION	0.013633161395391672	DESIGN
note very hackish workaround!! todo fix this so it will work for non-pojo entity mode	DESIGN	0.9923500396177254	DESIGN	0.007649960382274527	WITHOUT_CLASSIFICATION
todo fix this so it will work for non-pojo entity mode	DESIGN	0.996592751858214	DESIGN	0.0034072481417859986	WITHOUT_CLASSIFICATION
we would probably refactor to have logicparser (builds a tree of simple expressions connected by and or not) expressionparser (translates from oo terms like foo foo.bar foo.bar.baz to sql terms like foos.id foos.bar_id etc) and pathexpressionparser (which does much the same thing it does now)	DESIGN	0.7992454404045806	WITHOUT_CLASSIFICATION	0.20075455959541938	DESIGN
todo this is a little inefficient don't need to do a whole deep replaceelements() call	DESIGN	0.999609212237096	DESIGN	3.9078776290408764E-4	WITHOUT_CLASSIFICATION
workaround for weblogic	DESIGN	0.9951629113429694	WITHOUT_CLASSIFICATION	0.004837088657030532	DESIGN
todo this dependency is kinda bad	DESIGN	0.9973126073801907	DESIGN	0.0026873926198094063	WITHOUT_CLASSIFICATION
ick!	DESIGN	0.9999440521309738	WITHOUT_CLASSIFICATION	5.594786902627801E-5	DESIGN
short cut check	DESIGN	0.9999792395714358	WITHOUT_CLASSIFICATION	2.07604285641742E-5	DESIGN
todo move to stringhelper?	DESIGN	0.8179024936551363	DESIGN	0.18209750634486374	WITHOUT_CLASSIFICATION
yukky! don't you have subclasses for that! todo race conditions can happen here	DESIGN	0.8134893111650554	DESIGN	0.1865106888349447	WITHOUT_CLASSIFICATION
todo we probably should have a statisticsnotpublishedexception to make it clean	DESIGN	0.9903600165325178	DESIGN	0.009639983467482193	WITHOUT_CLASSIFICATION
fixme hack to work around fact that calling node added = root.addchild( fqn ) doesn't properly set the version on the node	DESIGN	0.9802964163559827	WITHOUT_CLASSIFICATION	0.019703583644017312	DESIGN
todo i considered validating the presence of the ts cache here but decided to defer unti getquerycacheinstance() in case the cache is never actually used	DESIGN	0.5359631894316045	WITHOUT_CLASSIFICATION	0.4640368105683956	DESIGN
need to do that here rather than in the save event listener to let the post insert events to have a id-filled entity when identity is used (ejb3)	DESIGN	0.7334801900923852	WITHOUT_CLASSIFICATION	0.2665198099076148	DESIGN
todo simply remove this override if we fix the above todos	DESIGN	0.9903425781811321	DESIGN	0.009657421818867895	WITHOUT_CLASSIFICATION
this is used by sessionfactoryimpl to hand to the generated sessionimpl was the only reason i could see that we cannot just use null as settings.cacheprovider	DESIGN	0.9870351504769703	WITHOUT_CLASSIFICATION	0.0129648495230296	DESIGN
this is done here 'cos we might only know the type here (ugly!) todo improve this a lot	DESIGN	0.9981301666520813	DESIGN	0.0018698333479186318	WITHOUT_CLASSIFICATION
todo would love to have this work on a notification basis where the successful binding of an entity/subclass would emit a notification which the extendsqueue entries could react to	DESIGN	0.9580919754454222	DESIGN	0.041908024554577775	WITHOUT_CLASSIFICATION
todo not sure the best way to handle this. the non-performant way	DESIGN	0.640094729009779	DESIGN	0.35990527099022096	WITHOUT_CLASSIFICATION
would be better to use the element-type to determine whether the old and the new are equal here the problem being we do not necessarily have access to the element type in all cases	DESIGN	0.9015212970514671	WITHOUT_CLASSIFICATION	0.09847870294853286	DESIGN
this next bit is to allow for both unsaved-value="negative" and for "older" behavior where version number did not get seeded if it was already set in the object todo shift it into unsaved-value strategy	DESIGN	0.9990963589639292	DESIGN	9.036410360706549E-4	WITHOUT_CLASSIFICATION
merges don't cascade to uninitialized collections todo perhaps this does need to cascade after all.	DESIGN	0.9934508939222243	DESIGN	0.006549106077775792	WITHOUT_CLASSIFICATION
todo an alternative is to check if the owner has changed if it hasn't then return collection.getowner()	DESIGN	0.9440962807273651	WITHOUT_CLASSIFICATION	0.055903719272634926	DESIGN
it is possible that the tree-walking in outerjoinloader can get to an association defined by a subclass in which case the property-ref might refer to a property defined on a subclass of the current class in this case the table name is not known - this temporary solution assumes that the property-ref refers to a property of the subclass table that the association belongs to (a reasonable guess) todo fix this add outerjoinloadable.getsubclasspropertytablename(string propertyname)	DESIGN	0.9999485230298609	DESIGN	5.1476970139013916E-5	WITHOUT_CLASSIFICATION
this only works because collection entries are kept in a sequenced map by persistence context (maybe we should do like entities and keep a separate sequences set) todo calling entryset on an identitymap is slow!!	DESIGN	0.9999582996338557	DESIGN	4.1700366144250245E-5	WITHOUT_CLASSIFICATION
important to account for newly saved entities in query todo some kind of check for new status	DESIGN	0.7129431384241166	DESIGN	0.28705686157588334	WITHOUT_CLASSIFICATION
brand new collection todo or an array!! we can't lock objects with arrays now??	DESIGN	0.8602065292500368	DESIGN	0.13979347074996323	WITHOUT_CLASSIFICATION
todo if object was an uninitialized proxy this is inefficient resulting in two sql selects	DESIGN	0.8674900546250487	DESIGN	0.13250994537495137	WITHOUT_CLASSIFICATION
before cascade! todo should this be session.instantiate(persister )?	DESIGN	0.9408340978872674	DESIGN	0.059165902112732704	WITHOUT_CLASSIFICATION
todo absolutely no usages of this constructor form can it go away?	DESIGN	0.7738785852126469	DESIGN	0.2261214147873531	WITHOUT_CLASSIFICATION
todo need to find a clean way to handle the "event source" role a seperate classs responsible for generating/dispatching events just duplicates most of the session methods passing around seperate reto interceptor factory actionqueue and persistentcontext is not manageable	DESIGN	0.9991285320827046	DESIGN	8.714679172954395E-4	WITHOUT_CLASSIFICATION
todo remove	DESIGN	0.7842388116630238	WITHOUT_CLASSIFICATION	0.2157611883369762	DESIGN
aliasrefnode.resolve( false false aliasrefnode.gettext() ) todo is it kosher to do it here? todo is it kosher to do it here?	DESIGN	0.9560034967559086	DESIGN	0.04399650324409136	WITHOUT_CLASSIFICATION
no explicit select expression render the id and properties projection lists for every persister in the from clause into a single 'token node'. todo the only reason we need this stuff now is collection filters we should get rid of derived select clause completely!	DESIGN	0.9987807558769735	DESIGN	0.0012192441230265837	WITHOUT_CLASSIFICATION
todo an optimization here would be to consider cascade deletes and not gen those delete statements the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> the table info gotten here should really be self-contained (i.e. a class representation defining all the needed attributes) then we could then get an array of those	DESIGN	0.7471640860058515	DESIGN	0.2528359139941485	WITHOUT_CLASSIFICATION
todo get sql rendering out of here create an ast for the join expressions. use the sql generator grammar to generate the sql text for the index expression.	DESIGN	0.9346281374024429	WITHOUT_CLASSIFICATION	0.0653718625975571	DESIGN
todo this really needs to be delayed unitl after we definitively know all node types where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DESIGN	0.9972321770592272	DESIGN	0.0027678229407727046	WITHOUT_CLASSIFICATION
todo figure out a better way to get the from elements in a proper tree structure. if this is not the destination of a many-to-many add it as a child of the origin.	DESIGN	0.8589919034647117	WITHOUT_CLASSIFICATION	0.14100809653528829	DESIGN
work around that crazy issue where the tree contains "empty" fromelements (no text) afaict this is caused by fromelementfactory.createcollectionjoin()	DESIGN	0.7201296025100448	WITHOUT_CLASSIFICATION	0.2798703974899553	DESIGN
todo this class does too many things! we need a different kind of path expression parser for each of the diffferent ways in which path expressions can occur	DESIGN	0.9523047799172759	DESIGN	0.047695220082724026	WITHOUT_CLASSIFICATION
real hacky used to count the nesting of parentheses	DESIGN	0.9993534186785988	WITHOUT_CLASSIFICATION	6.465813214012337E-4	DESIGN
todo would be really nice to cache the spec on the query-def so as to not have to re-calc the hash currently not doable though because of the resultset-ref stuff	DESIGN	0.9739029223854822	WITHOUT_CLASSIFICATION	0.026097077614517836	DESIGN
for arrays we should end the collection load before resolving the entities since the actual array instances are not instantiated during loading todo or we could do this polymorphically and have two different operations implemented differently for arrays	DESIGN	0.6429442903424301	WITHOUT_CLASSIFICATION	0.35705570965757	DESIGN
polymorphism not really handled completely correctly perhapswell actually its ok assuming that the entity name used in the lookup is the same as the the one used here which it will be	DESIGN	0.984344363997702	WITHOUT_CLASSIFICATION	0.015655636002298107	DESIGN
todo should "record" how many properties we have reffered to - and if we don't get'em'all we throw an exception! way better than trial and error )	DESIGN	0.9998816414245737	DESIGN	1.1835857542626151E-4	WITHOUT_CLASSIFICATION
very important!!!! - this class needs to be free of any static references to any cglib or javassist classes. otherwise users will always need both on their classpaths no matter which (if either) they use. another option here would be to remove the hibernate.ispropertyinitialized() method and have the users go through the sessionfactory to get this information.	DESIGN	0.7307802425275648	WITHOUT_CLASSIFICATION	0.2692197574724352	DESIGN
todo is it really neceassry to provide configuration to collectionpersisters ? should it not be enough with associated class ? or why does entitypersister's not get access to configuration ? the only reason i could see that configuration gets passed to collection persisters is so that they can look up the dom4j node name of the entity element in case no explicit node name was applied at the collection element level. are you kidding me? trivial to fix then. just store and expose the node name on the entity persister (which the collection persister looks up anyway via other means).	DESIGN	0.9998913203656591	DESIGN	1.0867963434085767E-4	WITHOUT_CLASSIFICATION
for backward compatibility allow a set with no not-null element columns using all columns in the row locater sql todo create an implicit not null constraint on all cols?	DESIGN	0.6065871741489431	WITHOUT_CLASSIFICATION	0.3934128258510569	DESIGN
spaces todo i'm not sure but perhaps we should exclude abstract denormalized tables?	DESIGN	0.8618701820561158	DESIGN	0.13812981794388426	WITHOUT_CLASSIFICATION
workaround for backward compatibility of sets with no not-null columns assume all columns are used in the row locator sql	DESIGN	0.9747380307871248	WITHOUT_CLASSIFICATION	0.025261969212875057	DESIGN
note that this method could easily be moved up to basicentitypersister if we ever needed to reuse it from other subclasses	DESIGN	0.9623954220546315	WITHOUT_CLASSIFICATION	0.03760457794536856	DESIGN
index += getpropertycolumnspan( i ) todo this is kinda slow	DESIGN	0.9719404226494907	DESIGN	0.02805957735050933	WITHOUT_CLASSIFICATION
todo need some caching scheme? really comes down to decision regarding amount of state (if any) kept on propertyaccessors	DESIGN	0.5866252833717677	DESIGN	0.41337471662823244	WITHOUT_CLASSIFICATION
todo here is why we need to make bytecode provider global ( todo again fix this after hhh-1907 is complete	DESIGN	0.9999525056892706	DESIGN	4.749431072929075E-5	WITHOUT_CLASSIFICATION
todo yuck! this is not quite good enough it's a quick hack around the problem of having a to-one association that refers to an embedded component	DESIGN	0.9997078236488552	DESIGN	2.921763511448195E-4	WITHOUT_CLASSIFICATION
for dom4j "collections" only todo it would be better if this was done at the higher level by printer	DESIGN	0.9983453116802393	DESIGN	0.001654688319760627	WITHOUT_CLASSIFICATION
would be great to move all this below here into another method that could also be used from the new scrolling stuff. would need to change the way the max-row stuff is handled (i.e. behind an interface) so that i could do the control breaking at the means to know when to stop	DESIGN	0.9956109785913968	DESIGN	0.004389021408603177	WITHOUT_CLASSIFICATION
todo can we always use the "null property" approach for everything?	DESIGN	0.8240700055338139	DESIGN	0.17592999446618604	WITHOUT_CLASSIFICATION
polymorphism comment above	DESIGN	0.9999898882204218	WITHOUT_CLASSIFICATION	1.0111779578298956E-5	DESIGN
some messy complex stuff here since createcriteria() can take an aliased path or a path rooted at the creating criteria instance	DESIGN	0.9999748271839444	WITHOUT_CLASSIFICATION	2.5172816055678523E-5	DESIGN
todo really bad evil hack to fix!!!	DESIGN	0.9980030921151037	DESIGN	0.0019969078848963377	WITHOUT_CLASSIFICATION
ugly hack for cases like "elements(foo.bar.collection)" (multi-part path expression ending in elements or indices)	DESIGN	0.8960881374931783	WITHOUT_CLASSIFICATION	0.1039118625068217	DESIGN
try block is a hack around fact that currently tuplizers are not given the opportunity to resolve a subclass entity name. this allows the (we assume custom) interceptor the ability to influence this decision if we were not able to based on the given entityname	DESIGN	0.9247853046857385	DESIGN	0.07521469531426143	WITHOUT_CLASSIFICATION
/ hack alert !!!!!!!!!!!!!!!!!!!!!!!!!!!! attempt to work around "ghost" impliedfromelements that occasionally show up between the actual things being joined. this consistently occurs from index nodes (at least against many-to-many). not sure if there are other conditions essentially look-ahead to the next fromelement that actually writes something to the sql	DESIGN	0.8938809040679323	WITHOUT_CLASSIFICATION	0.10611909593206777	DESIGN
init the table here instead of earlier so that we can get a quoted table name todo would it be better to simply pass the qualified table name instead of splitting it up into schema/catalog/table names	DESIGN	0.9984007092530648	DESIGN	0.0015992907469351673	WITHOUT_CLASSIFICATION
todo would be great to have a mapping#hasnonidentifierpropertynamedid method i don't believe that mapping#getreferencedpropertytype accounts for the identifier property so if it returns for a property named 'id' then we should have a non-id field named id	DESIGN	0.9994254797591079	DESIGN	5.745202408920355E-4	WITHOUT_CLASSIFICATION
todo is this really necessary????	DESIGN	0.867393812662488	DESIGN	0.13260618733751184	WITHOUT_CLASSIFICATION
todo ideally we need the construction of propertyaccessor to take the following 1) entitymode 2) entitymode-specific data (i.e. the classname for pojo entities) 3) property-specific data based on the entitymode (i.e. property-name or dom4j-node-name) the easiest way with the introduction of the new runtime-metamodel classes would be the the following predicates 1) propertyaccessorfactory.getpropertyaccessor() takes references to both a org.hibernate.metadata.entitymodemetadata and org.hibernate.metadata.property 2) what is now termed a "propertyaccessor" stores any values needed from those two pieces of information 3) code can then simply call propertyaccess.getgetter() with no parameters likewise with propertyaccessor.getsetter()	DESIGN	0.9990396688429659	DESIGN	9.603311570340435E-4	WITHOUT_CLASSIFICATION
todo this is temporary in that the end result will probably not take a property reference per-se.	DESIGN	0.9883596495659569	DESIGN	0.011640350434043066	WITHOUT_CLASSIFICATION
todo this eventually needs to be removed	DESIGN	0.9588630238210644	DESIGN	0.041136976178935664	WITHOUT_CLASSIFICATION
todo make this a bit nicer	DESIGN	0.7803863566582327	DESIGN	0.21961364334176728	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9985173682516223	DESIGN	0.0014826317483776319	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9985173682516223	DESIGN	0.0014826317483776319	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9985173682516223	DESIGN	0.0014826317483776319	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9985173682516223	DESIGN	0.0014826317483776319	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9985173682516223	DESIGN	0.0014826317483776319	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9985173682516223	DESIGN	0.0014826317483776319	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9985173682516223	DESIGN	0.0014826317483776319	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9985173682516223	DESIGN	0.0014826317483776319	WITHOUT_CLASSIFICATION
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9855075713203431	WITHOUT_CLASSIFICATION	0.014492428679657091	DESIGN
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9855075713203431	WITHOUT_CLASSIFICATION	0.014492428679657091	DESIGN
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9855075713203431	WITHOUT_CLASSIFICATION	0.014492428679657091	DESIGN
todo probably better to calculate these and pass them in as it'll be more performant	DESIGN	0.9690781232421175	DESIGN	0.03092187675788248	WITHOUT_CLASSIFICATION
