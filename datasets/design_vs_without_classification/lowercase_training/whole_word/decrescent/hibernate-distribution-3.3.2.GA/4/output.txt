test out the optimizer	WITHOUT_CLASSIFICATION	0.9999883161399439	WITHOUT_CLASSIFICATION	1.1683860055998226E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997543180710643	WITHOUT_CLASSIFICATION	2.456819289357101E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997543180710643	WITHOUT_CLASSIFICATION	2.456819289357101E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997543180710643	WITHOUT_CLASSIFICATION	2.456819289357101E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997543180710643	WITHOUT_CLASSIFICATION	2.456819289357101E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997543180710643	WITHOUT_CLASSIFICATION	2.456819289357101E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997543180710643	WITHOUT_CLASSIFICATION	2.456819289357101E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997543180710643	WITHOUT_CLASSIFICATION	2.456819289357101E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9997970793241975	WITHOUT_CLASSIFICATION	2.029206758025947E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9997970793241975	WITHOUT_CLASSIFICATION	2.029206758025947E-4	DESIGN
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9985977628695988	WITHOUT_CLASSIFICATION	0.0014022371304011794	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9997859950597627	WITHOUT_CLASSIFICATION	2.1400494023734423E-4	DESIGN
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9998861875381357	WITHOUT_CLASSIFICATION	1.1381246186426655E-4	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999864999186989	WITHOUT_CLASSIFICATION	1.350008130121864E-5	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999864999186989	WITHOUT_CLASSIFICATION	1.350008130121864E-5	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999850984153817	WITHOUT_CLASSIFICATION	1.4901584618257674E-5	DESIGN
invokeinterface invoke enabled.getinterceptfieldcallback()	WITHOUT_CLASSIFICATION	0.9998039943991829	WITHOUT_CLASSIFICATION	1.9600560081713762E-4	DESIGN
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999237561000802	WITHOUT_CLASSIFICATION	7.624389991975998E-5	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.99916210967787	WITHOUT_CLASSIFICATION	8.378903221300168E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999966864342206	WITHOUT_CLASSIFICATION	3.3135657794620653E-6	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999966864342206	WITHOUT_CLASSIFICATION	3.3135657794620653E-6	DESIGN
long	WITHOUT_CLASSIFICATION	0.9997380257988089	WITHOUT_CLASSIFICATION	2.6197420119115016E-4	DESIGN
just decrement the lock don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999046879745054	WITHOUT_CLASSIFICATION	9.531202549464583E-5	DESIGN
decode row selection	WITHOUT_CLASSIFICATION	0.9998928536589237	WITHOUT_CLASSIFICATION	1.071463410763771E-4	DESIGN
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9990568721034004	WITHOUT_CLASSIFICATION	9.431278965995489E-4	DESIGN
again ccs did not have such a concept but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not jta aware.	WITHOUT_CLASSIFICATION	0.9996833034503991	WITHOUT_CLASSIFICATION	3.1669654960087733E-4	DESIGN
check	WITHOUT_CLASSIFICATION	0.9990998677999803	WITHOUT_CLASSIFICATION	9.001322000197382E-4	DESIGN
row id	WITHOUT_CLASSIFICATION	0.999815994043577	WITHOUT_CLASSIFICATION	1.8400595642304127E-4	DESIGN
composite-id	WITHOUT_CLASSIFICATION	0.9997859950597627	WITHOUT_CLASSIFICATION	2.1400494023734423E-4	DESIGN
discriminator	WITHOUT_CLASSIFICATION	0.999786073996471	WITHOUT_CLASSIFICATION	2.139260035290132E-4	DESIGN
property prop = new property() prop.setname("id") prop.setpropertyaccessorname("embedded") prop.setvalue(id) entity.setidentifierproperty(prop)	WITHOUT_CLASSIFICATION	0.9998916177088584	WITHOUT_CLASSIFICATION	1.0838229114167409E-4	DESIGN
dynamic insert	WITHOUT_CLASSIFICATION	0.9999039685579312	WITHOUT_CLASSIFICATION	9.603144206876323E-5	DESIGN
persister	WITHOUT_CLASSIFICATION	0.9993015820917515	WITHOUT_CLASSIFICATION	6.984179082485636E-4	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9994325147544332	WITHOUT_CLASSIFICATION	5.674852455667241E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9995961518355075	WITHOUT_CLASSIFICATION	4.0384816449252805E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9995961518355075	WITHOUT_CLASSIFICATION	4.0384816449252805E-4	DESIGN
generated properties can never be insertable	WITHOUT_CLASSIFICATION	0.9967961093022829	WITHOUT_CLASSIFICATION	0.003203890697717126	DESIGN
table	WITHOUT_CLASSIFICATION	0.9998497175816491	WITHOUT_CLASSIFICATION	1.5028241835085999E-4	DESIGN
by default natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999367040213105	WITHOUT_CLASSIFICATION	6.329597868948282E-5	DESIGN
( (column) ( (simplevalue) ic.getindex() ).getcolumniterator().next() ).setnullable(false)	WITHOUT_CLASSIFICATION	0.9998616694238468	WITHOUT_CLASSIFICATION	1.383305761531746E-4	DESIGN
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9805428749010746	WITHOUT_CLASSIFICATION	0.01945712509892547	DESIGN
build a resultsetmappingdefinition given a containing element for the "return-xxx" elements @param resultsetelem the element containing the return definitions. @param path no clue @param mappings the current processing state. @return the description of the mappings	WITHOUT_CLASSIFICATION	0.9998382563387742	WITHOUT_CLASSIFICATION	1.617436612258134E-4	DESIGN
private boolean showsql private boolean formatsql	WITHOUT_CLASSIFICATION	0.9980539857877165	WITHOUT_CLASSIFICATION	0.001946014212283473	DESIGN
public boolean isshowsqlenabled() { return showsql } public boolean isformatsqlenabled() { return formatsql }	WITHOUT_CLASSIFICATION	0.9996635106323473	WITHOUT_CLASSIFICATION	3.3648936765275685E-4	DESIGN
set a custom entity resolver. this entity resolver must be set before addxxx(misc) call. default value is {@link org.hibernate.util.dtdentityresolver} @param entityresolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9970162445833604	WITHOUT_CLASSIFICATION	0.0029837554166397048	DESIGN
final list extendsqueue	WITHOUT_CLASSIFICATION	0.999881603543148	WITHOUT_CLASSIFICATION	1.1839645685194101E-4	DESIGN
if close() is called guarantee unbind()	WITHOUT_CLASSIFICATION	0.9998880879216602	WITHOUT_CLASSIFICATION	1.119120783398196E-4	DESIGN
if a threadlocalsessioncontext-bound session happens to get serialized to be completely correct we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9876304856730294	WITHOUT_CLASSIFICATION	0.012369514326970607	DESIGN
on the inverse it makes sense that if a threadlocalsessioncontext- bound session then gets deserialized to go ahead and re-bind it to the threadlocalsessioncontext session map.	WITHOUT_CLASSIFICATION	0.9935536512995596	WITHOUT_CLASSIFICATION	0.00644634870044033	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998945504878698	WITHOUT_CLASSIFICATION	1.054495121301498E-4	DESIGN
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9996560404237331	WITHOUT_CLASSIFICATION	3.4395957626682643E-4	DESIGN
optimisticcache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998956376091365	WITHOUT_CLASSIFICATION	1.0436239086355073E-4	DESIGN
cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998845335188085	WITHOUT_CLASSIFICATION	1.1546648119155621E-4	DESIGN
option.setdataversion( nonlockingdataversion.instance )	WITHOUT_CLASSIFICATION	0.9987870645387554	WITHOUT_CLASSIFICATION	0.0012129354612445574	DESIGN
do the put outside the scope of the jta txn	WITHOUT_CLASSIFICATION	0.9996793442199832	WITHOUT_CLASSIFICATION	3.2065578001682656E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9997543180710643	WITHOUT_CLASSIFICATION	2.456819289357101E-4	DESIGN
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (npes)	WITHOUT_CLASSIFICATION	0.9912553572849628	WITHOUT_CLASSIFICATION	0.008744642715037207	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9997736275900521	WITHOUT_CLASSIFICATION	2.2637240994791973E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9997543180710643	WITHOUT_CLASSIFICATION	2.456819289357101E-4	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9997736275900521	WITHOUT_CLASSIFICATION	2.2637240994791973E-4	DESIGN
do the failfast put outside the scope of the jta txn	WITHOUT_CLASSIFICATION	0.9996793442199832	WITHOUT_CLASSIFICATION	3.2065578001682656E-4	DESIGN
note evict() operates locally only (i.e. does not propogate to any other nodes in the potential cluster). this is exactly what is needed when we destroy() here destroy() is used as part of the process of shutting down a sessionfactory thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9979277215677296	DESIGN	0.0020722784322704402	WITHOUT_CLASSIFICATION
protected regionrootlistener listener	WITHOUT_CLASSIFICATION	0.9983817129456217	WITHOUT_CLASSIFICATION	0.0016182870543782922	DESIGN
establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9997825243490678	WITHOUT_CLASSIFICATION	2.1747565093229582E-4	DESIGN
if we've been blocking for the mutex perhaps another thread has already reestablished the root. in case the node was reestablised via replication confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9464728768249174	WITHOUT_CLASSIFICATION	0.053527123175082555	DESIGN
for pessimistic locking we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999454179807655	WITHOUT_CLASSIFICATION	5.4582019234413575E-5	DESIGN
the rest only matters for optimistic locking where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9993633163761532	WITHOUT_CLASSIFICATION	6.366836238467741E-4	DESIGN
don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9882116730129162	WITHOUT_CLASSIFICATION	0.011788326987083847	DESIGN
make sure the root node for the region exists and has a dataversion that never complains	WITHOUT_CLASSIFICATION	0.999894266011794	WITHOUT_CLASSIFICATION	1.0573398820594684E-4	DESIGN
never evict this node	WITHOUT_CLASSIFICATION	0.9984676765317396	WITHOUT_CLASSIFICATION	0.0015323234682603501	DESIGN
fix up the resident flag	WITHOUT_CLASSIFICATION	0.967169739280317	WITHOUT_CLASSIFICATION	0.032830260719683015	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9997736275900521	WITHOUT_CLASSIFICATION	2.2637240994791973E-4	DESIGN
we ignore minimalputoverride. jbosscache putforexternalread is already about as minimal as we can get it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.99993402922661	WITHOUT_CLASSIFICATION	6.597077338998852E-5	DESIGN
no-op. we don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9997116792007663	WITHOUT_CLASSIFICATION	2.883207992336057E-4	DESIGN
this should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9987248520385146	WITHOUT_CLASSIFICATION	0.001275147961485473	DESIGN
we only build caches if none were passed in. passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9969542890843407	WITHOUT_CLASSIFICATION	0.0030457109156592607	DESIGN
set up the cache factory	WITHOUT_CLASSIFICATION	0.9968316686617503	WITHOUT_CLASSIFICATION	0.003168331338249726	DESIGN
see if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999641602688735	WITHOUT_CLASSIFICATION	3.5839731126554874E-5	DESIGN
default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999814401703759	WITHOUT_CLASSIFICATION	1.8559829624048726E-5	DESIGN
default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.999989035929249	WITHOUT_CLASSIFICATION	1.0964070750971888E-5	DESIGN
for timestamps we default to a separate config	WITHOUT_CLASSIFICATION	0.9996503460120928	WITHOUT_CLASSIFICATION	3.496539879071591E-4	DESIGN
we can't change the tm on a running cache just check if the cache has no tm and we're ok with that	WITHOUT_CLASSIFICATION	0.9996439563593232	WITHOUT_CLASSIFICATION	3.560436406767382E-4	DESIGN
configure the cache to use our tm	WITHOUT_CLASSIFICATION	0.999607018024698	WITHOUT_CLASSIFICATION	3.9298197530199903E-4	DESIGN
make sure jbc doesn't look one up	WITHOUT_CLASSIFICATION	0.9998710539922744	WITHOUT_CLASSIFICATION	1.289460077255815E-4	DESIGN
this method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9817362181181196	WITHOUT_CLASSIFICATION	0.018263781881880423	DESIGN
make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9969093718711202	WITHOUT_CLASSIFICATION	0.0030906281288797955	DESIGN
we use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.998084929377975	WITHOUT_CLASSIFICATION	0.001915070622024978	DESIGN
following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9943343828905528	WITHOUT_CLASSIFICATION	0.005665617109447191	DESIGN
if jbc is using invalidation we don't want to propagate changes. we use the timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9996861602556342	WITHOUT_CLASSIFICATION	3.138397443658439E-4	DESIGN
we don't want to waste effort setting an option if jbc is already in local mode. if jbc is repl_(a)sync then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9991215193589086	WITHOUT_CLASSIFICATION	8.784806410915481E-4	DESIGN
don't hold the jbc node lock throughout the tx as that prevents updates add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999993080823604	WITHOUT_CLASSIFICATION	6.91917639567801E-7	DESIGN
double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999866668299189	WITHOUT_CLASSIFICATION	1.333317008119861E-5	DESIGN
get an exclusive right to update jbc for this key from this node.	WITHOUT_CLASSIFICATION	0.9999431398078044	WITHOUT_CLASSIFICATION	5.6860192195611274E-5	DESIGN
we ensure async semantics (jbcache-1175)	WITHOUT_CLASSIFICATION	0.9988908245904585	WITHOUT_CLASSIFICATION	0.0011091754095415066	DESIGN
initial load from jbc	WITHOUT_CLASSIFICATION	0.9997906617016048	WITHOUT_CLASSIFICATION	2.0933829839517133E-4	DESIGN
see if we had a 2nd invalidation from the same initial preinvalidation timestamp. if so only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.999997060943626	WITHOUT_CLASSIFICATION	2.9390563740970123E-6	DESIGN
we ensure async semantics (jbcache-1175)	WITHOUT_CLASSIFICATION	0.9988908245904585	WITHOUT_CLASSIFICATION	0.0011091754095415066	DESIGN
if the workspace node has null as well ok if not we've been modified in a non-comparable manner which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999984318709983	WITHOUT_CLASSIFICATION	1.5681290017041511E-6	DESIGN
the standard comparator types are not serializable but are singletons	WITHOUT_CLASSIFICATION	0.999278575795564	WITHOUT_CLASSIFICATION	7.214242044359256E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9997543180710643	WITHOUT_CLASSIFICATION	2.456819289357101E-4	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9997849863970669	WITHOUT_CLASSIFICATION	2.1501360293305527E-4	DESIGN
construct the cache	WITHOUT_CLASSIFICATION	0.9998732030296101	WITHOUT_CLASSIFICATION	1.267969703898832E-4	DESIGN
local cache so we use synchronization	WITHOUT_CLASSIFICATION	0.9986906305246798	WITHOUT_CLASSIFICATION	0.0013093694753201482	DESIGN
local cache so we use synchronization	WITHOUT_CLASSIFICATION	0.9986906305246798	WITHOUT_CLASSIFICATION	0.0013093694753201482	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999802815397815	WITHOUT_CLASSIFICATION	1.9718460218508778E-4	DESIGN
swaldman 2006-08-28 define c3p0-style configuration parameters for initialpoolsize which hibernate sensibly lets default to minpoolsize but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999966790048919	WITHOUT_CLASSIFICATION	3.3209951080655854E-6	DESIGN
datasource unpooled = datasources.unpooleddatasource(jdbcurl props.getproperty(environment.user) props.getproperty(environment.pass))	WITHOUT_CLASSIFICATION	0.9999680280163656	WITHOUT_CLASSIFICATION	3.197198363431589E-5	DESIGN
true if the pool is borrowed from the outside false if we used to create it	WITHOUT_CLASSIFICATION	0.9840960045467827	WITHOUT_CLASSIFICATION	0.01590399545321727	DESIGN
get a connection from the pool (thru drivermanager cfr. proxool doc)	WITHOUT_CLASSIFICATION	0.9992210055798124	WITHOUT_CLASSIFICATION	7.78994420187625E-4	DESIGN
set the transaction isolation if defined	WITHOUT_CLASSIFICATION	0.9999389314958682	WITHOUT_CLASSIFICATION	6.106850413180475E-5	DESIGN
toggle autocommit to false if set	WITHOUT_CLASSIFICATION	0.9998073734837494	WITHOUT_CLASSIFICATION	1.9262651625060777E-4	DESIGN
return the connection	WITHOUT_CLASSIFICATION	0.9998037609552051	WITHOUT_CLASSIFICATION	1.9623904479488478E-4	DESIGN
get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999697169818494	WITHOUT_CLASSIFICATION	3.0283018150517914E-5	DESIGN
default the proxool alias setting	WITHOUT_CLASSIFICATION	0.9999910445608705	WITHOUT_CLASSIFICATION	8.955439129451562E-6	DESIGN
validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999661459943099	WITHOUT_CLASSIFICATION	3.385400569012718E-5	DESIGN
validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999661459943099	WITHOUT_CLASSIFICATION	3.385400569012718E-5	DESIGN
append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999804276748288	WITHOUT_CLASSIFICATION	1.957232517113193E-5	DESIGN
set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9998429909045908	WITHOUT_CLASSIFICATION	1.5700909540918362E-4	DESIGN
configured using the jaxp configurator	WITHOUT_CLASSIFICATION	0.9999155691210775	WITHOUT_CLASSIFICATION	8.443087892249306E-5	DESIGN
validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999661459943099	WITHOUT_CLASSIFICATION	3.385400569012718E-5	DESIGN
append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999804276748288	WITHOUT_CLASSIFICATION	1.957232517113193E-5	DESIGN
append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999804276748288	WITHOUT_CLASSIFICATION	1.957232517113193E-5	DESIGN
configured using the properties file configurator	WITHOUT_CLASSIFICATION	0.9999557008964578	WITHOUT_CLASSIFICATION	4.429910354223945E-5	DESIGN
remember isolation level	WITHOUT_CLASSIFICATION	0.9383870193469597	WITHOUT_CLASSIFICATION	0.06161298065304025	DESIGN
if the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999996495736064	WITHOUT_CLASSIFICATION	3.5042639362059186E-7	DESIGN
we have created the pool ourselves so shut it down	WITHOUT_CLASSIFICATION	0.9999715284788505	WITHOUT_CLASSIFICATION	2.847152114943467E-5	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9934170361853469	WITHOUT_CLASSIFICATION	0.006582963814653162	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9934170361853469	WITHOUT_CLASSIFICATION	0.006582963814653162	DESIGN
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.999776352168052	WITHOUT_CLASSIFICATION	2.2364783194791472E-4	DESIGN
public currency getcurrency(int col) throws hibernateexception	WITHOUT_CLASSIFICATION	0.9998946984470632	WITHOUT_CLASSIFICATION	1.0530155293676258E-4	DESIGN
default is pojo	WITHOUT_CLASSIFICATION	0.9999104830043372	WITHOUT_CLASSIFICATION	8.951699566290121E-5	DESIGN
use setparameter for null values	WITHOUT_CLASSIFICATION	0.9992912032088737	WITHOUT_CLASSIFICATION	7.087967911263297E-4	DESIGN
use setparameter for null values	WITHOUT_CLASSIFICATION	0.9992912032088737	WITHOUT_CLASSIFICATION	7.087967911263297E-4	DESIGN
private cacheentry cacheentry	WITHOUT_CLASSIFICATION	0.9958980358922707	WITHOUT_CLASSIFICATION	0.004101964107729341	DESIGN
don't need to lock the cache here since if someone else inserted the same pk first the insert would fail	WITHOUT_CLASSIFICATION	0.9999583918736515	WITHOUT_CLASSIFICATION	4.1608126348548505E-5	DESIGN
make 100% certain that this is called before any subsequent scheduledupdate.aftertransactioncompletion()!!	WITHOUT_CLASSIFICATION	0.9983926879374329	WITHOUT_CLASSIFICATION	0.001607312062567215	DESIGN
get the updated snapshot of the entity state by cloning current state it is safe to copy in place since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999997338045574	WITHOUT_CLASSIFICATION	2.6619544254123894E-7	DESIGN
this entity defines proeprty generation so process those generated values	WITHOUT_CLASSIFICATION	0.9997979274975495	WITHOUT_CLASSIFICATION	2.0207250245044757E-4	DESIGN
have the entity entry perform post-update processing passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999675098496803	WITHOUT_CLASSIFICATION	3.2490150319736295E-5	DESIGN
!persister.iscacheinvalidationrequired()	WITHOUT_CLASSIFICATION	0.9995866341247203	WITHOUT_CLASSIFICATION	4.1336587527976095E-4	DESIGN
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9996653843691458	WITHOUT_CLASSIFICATION	3.3461563085423324E-4	DESIGN
sort first by role name	WITHOUT_CLASSIFICATION	0.9999032151234595	WITHOUT_CLASSIFICATION	9.678487654063768E-5	DESIGN
make 100% certain that this is called before any subsequent scheduledupdate.aftertransactioncompletion()!!	WITHOUT_CLASSIFICATION	0.9983926879374329	WITHOUT_CLASSIFICATION	0.001607312062567215	DESIGN
then by fk	WITHOUT_CLASSIFICATION	0.9988778391010411	WITHOUT_CLASSIFICATION	0.0011221608989589317	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9998650944443891	WITHOUT_CLASSIFICATION	1.3490555561088374E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9998650944443891	WITHOUT_CLASSIFICATION	1.3490555561088374E-4	DESIGN
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9013742243706836	WITHOUT_CLASSIFICATION	0.09862577562931646	DESIGN
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9978212284770642	WITHOUT_CLASSIFICATION	0.0021787715229358404	DESIGN
boolean put = persister.getcache().insert(ck cacheentry)	WITHOUT_CLASSIFICATION	0.9999407450332406	WITHOUT_CLASSIFICATION	5.925496675935189E-5	DESIGN
we need to grab the version value from the entity otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9964362072858798	WITHOUT_CLASSIFICATION	0.0035637927141201923	DESIGN
do nothing - we only need to notify the cache	WITHOUT_CLASSIFICATION	0.9963961094870707	WITHOUT_CLASSIFICATION	0.003603890512929261	DESIGN
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999624333191343	WITHOUT_CLASSIFICATION	3.7566680865841584E-5	DESIGN
then by id	WITHOUT_CLASSIFICATION	0.9998670251084122	WITHOUT_CLASSIFICATION	1.3297489158779706E-4	DESIGN
to be safe	WITHOUT_CLASSIFICATION	0.9998379533252981	WITHOUT_CLASSIFICATION	1.620466747019318E-4	DESIGN
no transformations took place so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9985067517425721	WITHOUT_CLASSIFICATION	0.0014932482574279596	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999181520482078	WITHOUT_CLASSIFICATION	8.184795179220023E-5	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999181520482078	WITHOUT_CLASSIFICATION	8.184795179220023E-5	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9997516257154543	WITHOUT_CLASSIFICATION	2.48374284545748E-4	DESIGN
test out the optimizer	WITHOUT_CLASSIFICATION	0.9999883161399439	WITHOUT_CLASSIFICATION	1.1683860055998226E-5	DESIGN
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.999548717486055	WITHOUT_CLASSIFICATION	4.5128251394507954E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997543180710643	WITHOUT_CLASSIFICATION	2.456819289357101E-4	DESIGN
invokespecial	WITHOUT_CLASSIFICATION	0.9997859950597627	WITHOUT_CLASSIFICATION	2.1400494023734423E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9997970793241975	WITHOUT_CLASSIFICATION	2.029206758025947E-4	DESIGN
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9997923276993106	WITHOUT_CLASSIFICATION	2.0767230068942965E-4	DESIGN
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9981760341926775	WITHOUT_CLASSIFICATION	0.001823965807322473	DESIGN
astore_3 store bean	WITHOUT_CLASSIFICATION	0.999888145344528	WITHOUT_CLASSIFICATION	1.1185465547203185E-4	DESIGN
aload_2 args	WITHOUT_CLASSIFICATION	0.9995130438547015	WITHOUT_CLASSIFICATION	4.869561452983914E-4	DESIGN
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9998223382909374	WITHOUT_CLASSIFICATION	1.7766170906264166E-4	DESIGN
new	WITHOUT_CLASSIFICATION	0.9997387118766451	WITHOUT_CLASSIFICATION	2.612881233549028E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9997709092106917	WITHOUT_CLASSIFICATION	2.2909078930841186E-4	DESIGN
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9998831242452962	WITHOUT_CLASSIFICATION	1.168757547037412E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9997859950597627	WITHOUT_CLASSIFICATION	2.1400494023734423E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9997859950597627	WITHOUT_CLASSIFICATION	2.1400494023734423E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9997859950597627	WITHOUT_CLASSIFICATION	2.1400494023734423E-4	DESIGN
aastore args	WITHOUT_CLASSIFICATION	0.9995130438547015	WITHOUT_CLASSIFICATION	4.869561452983914E-4	DESIGN
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9867950569972287	WITHOUT_CLASSIFICATION	0.013204943002771195	DESIGN
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9949675511650863	WITHOUT_CLASSIFICATION	0.005032448834913694	DESIGN
istore_3 store i	WITHOUT_CLASSIFICATION	0.9996573737632992	WITHOUT_CLASSIFICATION	3.4262623670068006E-4	DESIGN
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9997679709134972	WITHOUT_CLASSIFICATION	2.3202908650269633E-4	DESIGN
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9869237142708361	WITHOUT_CLASSIFICATION	0.013076285729163903	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999864999186989	WITHOUT_CLASSIFICATION	1.350008130121864E-5	DESIGN
start region to handling exception (bulkaccessorexception)	WITHOUT_CLASSIFICATION	0.9973146125751801	WITHOUT_CLASSIFICATION	0.0026853874248198508	DESIGN
iinc 3 1	WITHOUT_CLASSIFICATION	0.999538772031739	WITHOUT_CLASSIFICATION	4.612279682608994E-4	DESIGN
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9997886931387993	WITHOUT_CLASSIFICATION	2.113068612007377E-4	DESIGN
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9997146773603265	WITHOUT_CLASSIFICATION	2.853226396735686E-4	DESIGN
iconst_i	WITHOUT_CLASSIFICATION	0.9997543180710643	WITHOUT_CLASSIFICATION	2.456819289357101E-4	DESIGN
aaload	WITHOUT_CLASSIFICATION	0.9997543180710643	WITHOUT_CLASSIFICATION	2.456819289357101E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.999754432222844	WITHOUT_CLASSIFICATION	2.455677771560633E-4	DESIGN
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9998953429184686	WITHOUT_CLASSIFICATION	1.0465708153150895E-4	DESIGN
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9996473603888207	WITHOUT_CLASSIFICATION	3.5263961117928077E-4	DESIGN
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999809692131684	WITHOUT_CLASSIFICATION	1.9030786831693346E-5	DESIGN
end region to handling exception (bulkaccessorexception)	WITHOUT_CLASSIFICATION	0.9957692580091649	WITHOUT_CLASSIFICATION	0.004230741990835058	DESIGN
register in exception table	WITHOUT_CLASSIFICATION	0.9991755693555479	WITHOUT_CLASSIFICATION	8.244306444521353E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997543180710643	WITHOUT_CLASSIFICATION	2.456819289357101E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9997543180710643	WITHOUT_CLASSIFICATION	2.456819289357101E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9997970793241975	WITHOUT_CLASSIFICATION	2.029206758025947E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9997970793241975	WITHOUT_CLASSIFICATION	2.029206758025947E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9997709092106917	WITHOUT_CLASSIFICATION	2.2909078930841186E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9997859950597627	WITHOUT_CLASSIFICATION	2.1400494023734423E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.999754432222844	WITHOUT_CLASSIFICATION	2.455677771560633E-4	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999850984153817	WITHOUT_CLASSIFICATION	1.4901584618257674E-5	DESIGN
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999261203912821	WITHOUT_CLASSIFICATION	7.387960871788637E-5	DESIGN
new bulkaccessorexception	WITHOUT_CLASSIFICATION	0.9995145921440629	WITHOUT_CLASSIFICATION	4.8540785593706345E-4	DESIGN
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9998628287090069	WITHOUT_CLASSIFICATION	1.3717129099309134E-4	DESIGN
iload_3 i	WITHOUT_CLASSIFICATION	0.9986084153677144	WITHOUT_CLASSIFICATION	0.001391584632285624	DESIGN
invokespecial bulkaccessorexception.<init>	WITHOUT_CLASSIFICATION	0.9995866341247203	WITHOUT_CLASSIFICATION	4.1336587527976095E-4	DESIGN
athrow	WITHOUT_CLASSIFICATION	0.9997543180710643	WITHOUT_CLASSIFICATION	2.456819289357101E-4	DESIGN
warning classfile only	WITHOUT_CLASSIFICATION	0.99997640597616	WITHOUT_CLASSIFICATION	2.3594023839981582E-5	DESIGN
swallow	WITHOUT_CLASSIFICATION	0.9997588447650485	WITHOUT_CLASSIFICATION	2.4115523495146077E-4	DESIGN
local variable | this |	WITHOUT_CLASSIFICATION	0.9992432163710029	WITHOUT_CLASSIFICATION	7.567836289971943E-4	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9994011351108316	WITHOUT_CLASSIFICATION	5.988648891684812E-4	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9994011351108316	WITHOUT_CLASSIFICATION	5.988648891684812E-4	DESIGN
getfield get field "$javassist_callback" defined already	WITHOUT_CLASSIFICATION	0.9990701902255167	WITHOUT_CLASSIFICATION	9.29809774483275E-4	DESIGN
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999407901751042	WITHOUT_CLASSIFICATION	5.920982489580888E-5	DESIGN
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.996638383837492	WITHOUT_CLASSIFICATION	0.003361616162508015	DESIGN
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9996543576981635	WITHOUT_CLASSIFICATION	3.4564230183663035E-4	DESIGN
putfield put field "$javassist_callback" defined already	WITHOUT_CLASSIFICATION	0.9987991814370326	WITHOUT_CLASSIFICATION	0.0012008185629674554	DESIGN
case of non-static field	WITHOUT_CLASSIFICATION	0.9990982809986664	WITHOUT_CLASSIFICATION	9.017190013336201E-4	DESIGN
getfield get each field	WITHOUT_CLASSIFICATION	0.9997734545828183	WITHOUT_CLASSIFICATION	2.2654541718167252E-4	DESIGN
invokeinterface invoke enabled.getinterceptfieldcallback()	WITHOUT_CLASSIFICATION	0.9998039943991829	WITHOUT_CLASSIFICATION	1.9600560081713762E-4	DESIGN
ifnonnull	WITHOUT_CLASSIFICATION	0.9997543180710643	WITHOUT_CLASSIFICATION	2.456819289357101E-4	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9997153757309237	WITHOUT_CLASSIFICATION	2.8462426907637455E-4	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9997153757309237	WITHOUT_CLASSIFICATION	2.8462426907637455E-4	DESIGN
store_1 each type	WITHOUT_CLASSIFICATION	0.9996554031027496	WITHOUT_CLASSIFICATION	3.44596897250335E-4	DESIGN
ldc name of the field	WITHOUT_CLASSIFICATION	0.9997622576947027	WITHOUT_CLASSIFICATION	2.3774230529725342E-4	DESIGN
load_1 each type	WITHOUT_CLASSIFICATION	0.9996554031027496	WITHOUT_CLASSIFICATION	3.44596897250335E-4	DESIGN
invokeinterface invoke callback.read() each type	WITHOUT_CLASSIFICATION	0.9996843826883182	WITHOUT_CLASSIFICATION	3.156173116817744E-4	DESIGN
int	WITHOUT_CLASSIFICATION	0.9999322710190112	WITHOUT_CLASSIFICATION	6.772898098885536E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9997970793241975	WITHOUT_CLASSIFICATION	2.029206758025947E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9997709092106917	WITHOUT_CLASSIFICATION	2.2909078930841186E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9997859950597627	WITHOUT_CLASSIFICATION	2.1400494023734423E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.999754432222844	WITHOUT_CLASSIFICATION	2.455677771560633E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.999754432222844	WITHOUT_CLASSIFICATION	2.455677771560633E-4	DESIGN
invokeinterface enabled.getinterceptfieldcallback()	WITHOUT_CLASSIFICATION	0.9995866341247203	WITHOUT_CLASSIFICATION	4.1336587527976095E-4	DESIGN
invokeinterface enabled.getinterceptfieldcallback()	WITHOUT_CLASSIFICATION	0.9995866341247203	WITHOUT_CLASSIFICATION	4.1336587527976095E-4	DESIGN
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9997859950597627	WITHOUT_CLASSIFICATION	2.1400494023734423E-4	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9997543180710643	WITHOUT_CLASSIFICATION	2.456819289357101E-4	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9997543180710643	WITHOUT_CLASSIFICATION	2.456819289357101E-4	DESIGN
putfield	WITHOUT_CLASSIFICATION	0.9997543180710643	WITHOUT_CLASSIFICATION	2.456819289357101E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9997970793241975	WITHOUT_CLASSIFICATION	2.029206758025947E-4	DESIGN
ldc field name	WITHOUT_CLASSIFICATION	0.9996902356796311	WITHOUT_CLASSIFICATION	3.0976432036886655E-4	DESIGN
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999868252006537	WITHOUT_CLASSIFICATION	1.3174799346328659E-5	DESIGN
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9995866341247203	WITHOUT_CLASSIFICATION	4.1336587527976095E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.99916210967787	WITHOUT_CLASSIFICATION	8.378903221300168E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.99916210967787	WITHOUT_CLASSIFICATION	8.378903221300168E-4	DESIGN
not array	WITHOUT_CLASSIFICATION	0.9992185103964577	WITHOUT_CLASSIFICATION	7.814896035423521E-4	DESIGN
array of reference type	WITHOUT_CLASSIFICATION	0.9993703577976587	WITHOUT_CLASSIFICATION	6.29642202341358E-4	DESIGN
boolean	WITHOUT_CLASSIFICATION	0.9998360917508479	WITHOUT_CLASSIFICATION	1.6390824915219233E-4	DESIGN
byte	WITHOUT_CLASSIFICATION	0.9997534177428525	WITHOUT_CLASSIFICATION	2.465822571474139E-4	DESIGN
char	WITHOUT_CLASSIFICATION	0.9998839714280134	WITHOUT_CLASSIFICATION	1.1602857198661781E-4	DESIGN
short	WITHOUT_CLASSIFICATION	0.9994165564408047	WITHOUT_CLASSIFICATION	5.834435591953714E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999966864342206	WITHOUT_CLASSIFICATION	3.3135657794620653E-6	DESIGN
float	WITHOUT_CLASSIFICATION	0.9997617808232315	WITHOUT_CLASSIFICATION	2.3821917676835868E-4	DESIGN
float	WITHOUT_CLASSIFICATION	0.9997617808232315	WITHOUT_CLASSIFICATION	2.3821917676835868E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9997380257988089	WITHOUT_CLASSIFICATION	2.6197420119115016E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9997380257988089	WITHOUT_CLASSIFICATION	2.6197420119115016E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9946485603371364	WITHOUT_CLASSIFICATION	0.005351439662863523	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9946485603371364	WITHOUT_CLASSIFICATION	0.005351439662863523	DESIGN
boolean byte char int short	WITHOUT_CLASSIFICATION	0.9999054772636576	WITHOUT_CLASSIFICATION	9.452273634226387E-5	DESIGN
boolean byte char int short	WITHOUT_CLASSIFICATION	0.9999054772636576	WITHOUT_CLASSIFICATION	9.452273634226387E-5	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.99916210967787	WITHOUT_CLASSIFICATION	8.378903221300168E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999966864342206	WITHOUT_CLASSIFICATION	3.3135657794620653E-6	DESIGN
float	WITHOUT_CLASSIFICATION	0.9997617808232315	WITHOUT_CLASSIFICATION	2.3821917676835868E-4	DESIGN
float	WITHOUT_CLASSIFICATION	0.9997617808232315	WITHOUT_CLASSIFICATION	2.3821917676835868E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9997380257988089	WITHOUT_CLASSIFICATION	2.6197420119115016E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9946485603371364	WITHOUT_CLASSIFICATION	0.005351439662863523	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9946485603371364	WITHOUT_CLASSIFICATION	0.005351439662863523	DESIGN
boolean byte char int short	WITHOUT_CLASSIFICATION	0.9999054772636576	WITHOUT_CLASSIFICATION	9.452273634226387E-5	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9985902911198197	WITHOUT_CLASSIFICATION	0.0014097088801803357	DESIGN
mainly for oscache	WITHOUT_CLASSIFICATION	0.9998422110317208	WITHOUT_CLASSIFICATION	1.5778896827930733E-4	DESIGN
decrement the lock	WITHOUT_CLASSIFICATION	0.9998818082001627	WITHOUT_CLASSIFICATION	1.1819179983726229E-4	DESIGN
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9998133548816287	WITHOUT_CLASSIFICATION	1.8664511837120475E-4	DESIGN
recache the updated state	WITHOUT_CLASSIFICATION	0.9999009380152558	WITHOUT_CLASSIFICATION	9.906198474419118E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9998129607079548	WITHOUT_CLASSIFICATION	1.8703929204516576E-4	DESIGN
null clientlock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999896222874219	WITHOUT_CLASSIFICATION	1.037771257805233E-5	DESIGN
we really could refresh the item if it is not a lock but it might be slower return freshtimestamp < txtimestamp	WITHOUT_CLASSIFICATION	0.9987442604526612	WITHOUT_CLASSIFICATION	0.001255739547338852	DESIGN
by requiring < we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9997215211065801	WITHOUT_CLASSIFICATION	2.784788934198772E-4	DESIGN
the user provided resulttransformer not the one used with "select new". here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9644664250180911	WITHOUT_CLASSIFICATION	0.035533574981908886	DESIGN
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999528040947182	WITHOUT_CLASSIFICATION	4.719590528182604E-5	DESIGN
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999628161021045	WITHOUT_CLASSIFICATION	3.7183897895480284E-5	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999802815397815	WITHOUT_CLASSIFICATION	1.9718460218508778E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9998129607079548	WITHOUT_CLASSIFICATION	1.8703929204516576E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9998129607079548	WITHOUT_CLASSIFICATION	1.8703929204516576E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9998129607079548	WITHOUT_CLASSIFICATION	1.8703929204516576E-4	DESIGN
this is called from settingsfactory irregardless trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9946471939324842	WITHOUT_CLASSIFICATION	0.005352806067515787	DESIGN
do nothing subclasses may override.	WITHOUT_CLASSIFICATION	0.9987520243081724	WITHOUT_CLASSIFICATION	0.001247975691827534	DESIGN
do nothing subclasses may override.	WITHOUT_CLASSIFICATION	0.9987520243081724	WITHOUT_CLASSIFICATION	0.001247975691827534	DESIGN
throw new unsupportedoperationexception("can't write to a readonly object")	WITHOUT_CLASSIFICATION	0.9980552239394435	WITHOUT_CLASSIFICATION	0.0019447760605566177	DESIGN
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9989119180262188	WITHOUT_CLASSIFICATION	0.0010880819737811669	DESIGN
persister.setidentifier(result id) before calling interceptor for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999488515890362	WITHOUT_CLASSIFICATION	5.1148410963815765E-5	DESIGN
no-op ccs did not have such a concept	WITHOUT_CLASSIFICATION	0.9989401153388922	WITHOUT_CLASSIFICATION	0.0010598846611078472	DESIGN
no-op ccs did not have such a concept	WITHOUT_CLASSIFICATION	0.9989401153388922	WITHOUT_CLASSIFICATION	0.0010598846611078472	DESIGN
again ccs did not have such a concept but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not jta aware.	WITHOUT_CLASSIFICATION	0.9996833034503991	WITHOUT_CLASSIFICATION	3.1669654960087733E-4	DESIGN
again ccs did not have such a concept however a reasonable proximity is to clear the cache. for non-transaction aware caches we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.999867345571715	WITHOUT_CLASSIFICATION	1.3265442828505196E-4	DESIGN
again ccs did not have such a concept however a reasonable proximity is to clear the cache. for non-transaction aware caches we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.999867345571715	WITHOUT_CLASSIFICATION	1.3265442828505196E-4	DESIGN
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9967408463115228	WITHOUT_CLASSIFICATION	0.0032591536884772347	DESIGN
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9994860420495681	WITHOUT_CLASSIFICATION	5.139579504318681E-4	DESIGN
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9994325147544332	WITHOUT_CLASSIFICATION	5.674852455667241E-4	DESIGN
db-objectname	WITHOUT_CLASSIFICATION	0.9997859950597627	WITHOUT_CLASSIFICATION	2.1400494023734423E-4	DESIGN
mutable	WITHOUT_CLASSIFICATION	0.9998530476840267	WITHOUT_CLASSIFICATION	1.4695231597326342E-4	DESIGN
where	WITHOUT_CLASSIFICATION	0.99992684529454	WITHOUT_CLASSIFICATION	7.315470546005589E-5	DESIGN
check	WITHOUT_CLASSIFICATION	0.9990998677999803	WITHOUT_CLASSIFICATION	9.001322000197382E-4	DESIGN
polymorphism	WITHOUT_CLASSIFICATION	0.9997859950597627	WITHOUT_CLASSIFICATION	2.1400494023734423E-4	DESIGN
todo	WITHOUT_CLASSIFICATION	0.7031845144940405	WITHOUT_CLASSIFICATION	0.2968154855059594	DESIGN
id	WITHOUT_CLASSIFICATION	0.9996656643279939	WITHOUT_CLASSIFICATION	3.343356720060245E-4	DESIGN
version / timestamp	WITHOUT_CLASSIFICATION	0.9999831278402611	WITHOUT_CLASSIFICATION	1.687215973886593E-5	DESIGN
discriminator	WITHOUT_CLASSIFICATION	0.999786073996471	WITHOUT_CLASSIFICATION	2.139260035290132E-4	DESIGN
primary key constraint	WITHOUT_CLASSIFICATION	0.9999446911845246	WITHOUT_CLASSIFICATION	5.5308815475516784E-5	DESIGN
this is either a <version/> tag with no type attribute or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9997134466916914	WITHOUT_CLASSIFICATION	2.865533083087269E-4	DESIGN
for version properties marked as being generated make sure they are "always" generated aka "insert" is invalid this is dis-allowed by the dtd but just to make sure	WITHOUT_CLASSIFICATION	0.9996370479589534	WITHOUT_CLASSIFICATION	3.629520410466219E-4	DESIGN
discriminator	WITHOUT_CLASSIFICATION	0.999786073996471	WITHOUT_CLASSIFICATION	2.139260035290132E-4	DESIGN
( (column) discrim.getcolumniterator().next() ).settype(type)	WITHOUT_CLASSIFICATION	0.9998616694238468	WITHOUT_CLASSIFICATION	1.383305761531746E-4	DESIGN
go ahead and set the lazy here since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999909740000256	WITHOUT_CLASSIFICATION	9.025999974482116E-6	DESIGN
dynamic update	WITHOUT_CLASSIFICATION	0.9999903465300466	WITHOUT_CLASSIFICATION	9.653469953437596E-6	DESIGN
import	WITHOUT_CLASSIFICATION	0.9996096047407275	WITHOUT_CLASSIFICATION	3.903952592725331E-4	DESIGN
batch size	WITHOUT_CLASSIFICATION	0.9999344058603228	WITHOUT_CLASSIFICATION	6.559413967727681E-5	DESIGN
select before update	WITHOUT_CLASSIFICATION	0.9999955973536714	WITHOUT_CLASSIFICATION	4.402646328645493E-6	DESIGN
optimistic lock mode	WITHOUT_CLASSIFICATION	0.9995823428755409	WITHOUT_CLASSIFICATION	4.1765712445907357E-4	DESIGN
persister	WITHOUT_CLASSIFICATION	0.9993015820917515	WITHOUT_CLASSIFICATION	6.984179082485636E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999557500394943	WITHOUT_CLASSIFICATION	4.424996050563834E-5	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9994325147544332	WITHOUT_CLASSIFICATION	5.674852455667241E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9995961518355075	WITHOUT_CLASSIFICATION	4.0384816449252805E-4	DESIGN
joined subclasses	WITHOUT_CLASSIFICATION	0.9997313300629314	WITHOUT_CLASSIFICATION	2.6866993706865116E-4	DESIGN
key	WITHOUT_CLASSIFICATION	0.9999355368350612	WITHOUT_CLASSIFICATION	6.446316493878612E-5	DESIGN
check	WITHOUT_CLASSIFICATION	0.9990998677999803	WITHOUT_CLASSIFICATION	9.001322000197382E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999557500394943	WITHOUT_CLASSIFICATION	4.424996050563834E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9995961518355075	WITHOUT_CLASSIFICATION	4.0384816449252805E-4	DESIGN
key	WITHOUT_CLASSIFICATION	0.9999355368350612	WITHOUT_CLASSIFICATION	6.446316493878612E-5	DESIGN
model.getkey().settype( new type( model.getidentifier() ) )	WITHOUT_CLASSIFICATION	0.9987100957904642	WITHOUT_CLASSIFICATION	0.0012899042095357697	DESIGN
tablename	WITHOUT_CLASSIFICATION	0.9998140855157677	WITHOUT_CLASSIFICATION	1.8591448423237842E-4	DESIGN
join.getkey().settype( new type( lazz.getidentifier() ) )	WITHOUT_CLASSIFICATION	0.9987100957904642	WITHOUT_CLASSIFICATION	0.0012899042095357697	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9995961518355075	WITHOUT_CLASSIFICATION	4.0384816449252805E-4	DESIGN
column(s)	WITHOUT_CLASSIFICATION	0.9997963993345375	WITHOUT_CLASSIFICATION	2.0360066546258317E-4	DESIGN
column index	WITHOUT_CLASSIFICATION	0.9999361795294511	WITHOUT_CLASSIFICATION	6.382047054889653E-5	DESIGN
column unique-key	WITHOUT_CLASSIFICATION	0.9998993838678852	WITHOUT_CLASSIFICATION	1.0061613211471876E-4	DESIGN
automatically makes a column with the default name if none is specifed by xml	WITHOUT_CLASSIFICATION	0.9997776837407919	WITHOUT_CLASSIFICATION	2.2231625920800005E-4	DESIGN
for an any	WITHOUT_CLASSIFICATION	0.9998811857769992	WITHOUT_CLASSIFICATION	1.1881422300073161E-4	DESIGN
insertable simply because that is the user did not specify anything just override it	WITHOUT_CLASSIFICATION	0.9999851260826448	WITHOUT_CLASSIFICATION	1.4873917355141416E-5	DESIGN
the user specifically supplied insert="true" which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999930645361521	WITHOUT_CLASSIFICATION	6.935463847860409E-6	DESIGN
properties generated on update can never be updateable	WITHOUT_CLASSIFICATION	0.9997612886259711	WITHOUT_CLASSIFICATION	2.3871137402879252E-4	DESIGN
updateable only because the user did not specify anything just override it	WITHOUT_CLASSIFICATION	0.9999967617211557	WITHOUT_CLASSIFICATION	3.2382788442427096E-6	DESIGN
the user specifically supplied update="true" which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999930645361521	WITHOUT_CLASSIFICATION	6.935463847860409E-6	DESIGN
rolename	WITHOUT_CLASSIFICATION	0.9997711092264759	WITHOUT_CLASSIFICATION	2.288907735239924E-4	DESIGN
fetch strategy	WITHOUT_CLASSIFICATION	0.9997389696614675	WITHOUT_CLASSIFICATION	2.610303385324938E-4	DESIGN
table	WITHOUT_CLASSIFICATION	0.9998497175816491	WITHOUT_CLASSIFICATION	1.5028241835085999E-4	DESIGN
tablename = mappings.getnamingstrategy().propertytotablename( classname path )	WITHOUT_CLASSIFICATION	0.9999230492332462	WITHOUT_CLASSIFICATION	7.695076675388067E-5	DESIGN
sort	WITHOUT_CLASSIFICATION	0.99987218003178	WITHOUT_CLASSIFICATION	1.2781996821999617E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999557500394943	WITHOUT_CLASSIFICATION	4.424996050563834E-5	DESIGN
unsorted natural comparator.class.name	WITHOUT_CLASSIFICATION	0.9995875796724488	WITHOUT_CLASSIFICATION	4.124203275511419E-4	DESIGN
orphan delete (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9982193387977052	WITHOUT_CLASSIFICATION	0.001780661202294792	DESIGN
set up second pass	WITHOUT_CLASSIFICATION	0.9998240257710022	WITHOUT_CLASSIFICATION	1.7597422899772692E-4	DESIGN
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9679202541274933	WITHOUT_CLASSIFICATION	0.03207974587250672	DESIGN
a nested composite element	WITHOUT_CLASSIFICATION	0.9949021026339884	WITHOUT_CLASSIFICATION	0.005097897366011567	DESIGN
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9995713315911073	WITHOUT_CLASSIFICATION	4.286684088927103E-4	DESIGN
note special case one-to-one constrained=false cannot be proxied so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999932094238547	WITHOUT_CLASSIFICATION	6.790576145298363E-6	DESIGN
use old (hb 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999888400807431	WITHOUT_CLASSIFICATION	1.1159919256958576E-5	DESIGN
lazy = !join	WITHOUT_CLASSIFICATION	0.9999551227269748	WITHOUT_CLASSIFICATION	4.487727302517199E-5	DESIGN
generator	WITHOUT_CLASSIFICATION	0.9998978105343581	WITHOUT_CLASSIFICATION	1.0218946564187161E-4	DESIGN
id unsaved-value	WITHOUT_CLASSIFICATION	0.9997087685533963	WITHOUT_CLASSIFICATION	2.912314466037432E-4	DESIGN
version unsaved-value	WITHOUT_CLASSIFICATION	0.9998316117313139	WITHOUT_CLASSIFICATION	1.683882686861423E-4	DESIGN
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9831285493037765	WITHOUT_CLASSIFICATION	0.016871450696223554	DESIGN
( (column) ( (simplevalue) ic.getindex() ).getcolumniterator().next() ).setnullable(false)	WITHOUT_CLASSIFICATION	0.9998616694238468	WITHOUT_CLASSIFICATION	1.383305761531746E-4	DESIGN
contained elements	WITHOUT_CLASSIFICATION	0.999914580269229	WITHOUT_CLASSIFICATION	8.541973077107536E-5	DESIGN
for non-inverse one-to-many with a not-null fk add a backref!	WITHOUT_CLASSIFICATION	0.987112265832829	WITHOUT_CLASSIFICATION	0.012887734167170966	DESIGN
bind the where	WITHOUT_CLASSIFICATION	0.9999783696157657	WITHOUT_CLASSIFICATION	2.163038423439233E-5	DESIGN
bind the order-by	WITHOUT_CLASSIFICATION	0.9999273479352334	WITHOUT_CLASSIFICATION	7.265206476662873E-5	DESIGN
bind the filters	WITHOUT_CLASSIFICATION	0.9999561611320291	WITHOUT_CLASSIFICATION	4.3838867970879804E-5	DESIGN
overriding inherited meta attribute. hbx-621 & hbx-793	WITHOUT_CLASSIFICATION	0.9990620691122916	WITHOUT_CLASSIFICATION	9.379308877085054E-4	DESIGN
first iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999995301468949	WITHOUT_CLASSIFICATION	4.6985310504391016E-7	DESIGN
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a fqn (in the case of a pojo mapping).	WITHOUT_CLASSIFICATION	0.9993201143273375	WITHOUT_CLASSIFICATION	6.798856726625904E-4	DESIGN
+ "_" + referencedcolumnname not used for backward compatibility	WITHOUT_CLASSIFICATION	0.6716420233167846	DESIGN	0.32835797668321537	WITHOUT_CLASSIFICATION
sessionfactory name	WITHOUT_CLASSIFICATION	0.9997462325330866	WITHOUT_CLASSIFICATION	2.5376746691339094E-4	DESIGN
jdbc and connection settings	WITHOUT_CLASSIFICATION	0.9999878686851267	WITHOUT_CLASSIFICATION	1.2131314873394066E-5	DESIGN
jdbc and connection settings	WITHOUT_CLASSIFICATION	0.9999878686851267	WITHOUT_CLASSIFICATION	1.2131314873394066E-5	DESIGN
interrogate jdbc metadata	WITHOUT_CLASSIFICATION	0.9998753520707971	WITHOUT_CLASSIFICATION	1.2464792920283393E-4	DESIGN
user supplied jdbc connections	WITHOUT_CLASSIFICATION	0.9999692146334617	WITHOUT_CLASSIFICATION	3.078536653833653E-5	DESIGN
use dialect default properties	WITHOUT_CLASSIFICATION	0.9969960252444947	WITHOUT_CLASSIFICATION	0.0030039747555053163	DESIGN
transaction settings	WITHOUT_CLASSIFICATION	0.9999855269725276	WITHOUT_CLASSIFICATION	1.4473027472339545E-5	DESIGN
sql generation settings	WITHOUT_CLASSIFICATION	0.9999647666662418	WITHOUT_CLASSIFICATION	3.523333375830821E-5	DESIGN
query parser settings	WITHOUT_CLASSIFICATION	0.9997400633317761	WITHOUT_CLASSIFICATION	2.599366682238053E-4	DESIGN
second-level / query cache	WITHOUT_CLASSIFICATION	0.999895951578579	WITHOUT_CLASSIFICATION	1.0404842142086339E-4	DESIGN
the cache provider is needed when we either have second-level cache enabled or query cache enabled. note that usesecondlevelcache is enabled by default	WITHOUT_CLASSIFICATION	0.9999936677867437	WITHOUT_CLASSIFICATION	6.332213256309219E-6	DESIGN
sql exception converter	WITHOUT_CLASSIFICATION	0.9995027998389407	WITHOUT_CLASSIFICATION	4.972001610593227E-4	DESIGN
statistics and logging	WITHOUT_CLASSIFICATION	0.9998499731412117	WITHOUT_CLASSIFICATION	1.5002685878816535E-4	DESIGN
settings.setshowsqlenabled(showsql)	WITHOUT_CLASSIFICATION	0.9995866341247203	WITHOUT_CLASSIFICATION	4.1336587527976095E-4	DESIGN
settings.setformatsqlenabled(formatsql)	WITHOUT_CLASSIFICATION	0.9995866341247203	WITHOUT_CLASSIFICATION	4.1336587527976095E-4	DESIGN
schema export	WITHOUT_CLASSIFICATION	0.9997617808558558	WITHOUT_CLASSIFICATION	2.382191441442266E-4	DESIGN
string provider = properties.getproperty( environment.bytecode_provider ) log.info( "bytecode provider name " + provider ) bytecodeprovider bytecodeprovider = buildbytecodeprovider( provider ) settings.setbytecodeprovider( bytecodeprovider )	WITHOUT_CLASSIFICATION	0.9999667112056865	WITHOUT_CLASSIFICATION	3.32887943134692E-5	DESIGN
legacy behavior apply the bridge	WITHOUT_CLASSIFICATION	0.9972224123283653	WITHOUT_CLASSIFICATION	0.0027775876716348282	DESIGN
maybe a concrete sqlpropertyresult type but map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.662426026801877	WITHOUT_CLASSIFICATION	0.3375739731981231	DESIGN
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9993593543470563	WITHOUT_CLASSIFICATION	6.406456529436875E-4	DESIGN
private componenttuplizerfactory componenttuplizerfactory todo hhh-3517 and hhh-1907 private bytecodeprovider bytecodeprovider	WITHOUT_CLASSIFICATION	0.7998652793946937	DESIGN	0.2001347206053064	WITHOUT_CLASSIFICATION
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998852608464491	WITHOUT_CLASSIFICATION	1.147391535508635E-4	DESIGN
public componenttuplizerfactory getcomponenttuplizerfactory() { return componenttuplizerfactory }	WITHOUT_CLASSIFICATION	0.9994956798153447	WITHOUT_CLASSIFICATION	5.043201846552246E-4	DESIGN
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9710619769468866	WITHOUT_CLASSIFICATION	0.028938023053113365	DESIGN
void setshowsqlenabled(boolean b) { showsql = b } void setformatsqlenabled(boolean b) { formatsql = b }	WITHOUT_CLASSIFICATION	0.9999554223837702	WITHOUT_CLASSIFICATION	4.457761622975501E-5	DESIGN
public bytecodeprovider getbytecodeprovider() { return bytecodeprovider } void setbytecodeprovider(bytecodeprovider bytecodeprovider) { this.bytecodeprovider = bytecodeprovider }	WITHOUT_CLASSIFICATION	0.9999226101655626	WITHOUT_CLASSIFICATION	7.738983443739573E-5	DESIGN
using local since the inheritedmetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9746499926834163	WITHOUT_CLASSIFICATION	0.025350007316583673	DESIGN
private componenttuplizerfactory componenttuplizerfactory todo hhh-3517 and hhh-1907	WITHOUT_CLASSIFICATION	0.7998652793946937	DESIGN	0.2001347206053064	WITHOUT_CLASSIFICATION
protected list extendsqueue	WITHOUT_CLASSIFICATION	0.9978534873529532	WITHOUT_CLASSIFICATION	0.0021465126470468386	DESIGN
extendsqueue = new arraylist()	WITHOUT_CLASSIFICATION	0.9998992182156871	WITHOUT_CLASSIFICATION	1.0078178431304384E-4	DESIGN
componenttuplizerfactory = new componenttuplizerfactory()	WITHOUT_CLASSIFICATION	0.9999073526988419	WITHOUT_CLASSIFICATION	9.264730115800843E-5	DESIGN
if doc is null then for whatever reason the cached file cannot be used	WITHOUT_CLASSIFICATION	0.9987654261887594	WITHOUT_CLASSIFICATION	0.0012345738112405163	DESIGN
drop them in reverse order in case db needs it done that way	WITHOUT_CLASSIFICATION	0.6034235841265159	DESIGN	0.39657641587348413	WITHOUT_CLASSIFICATION
public componenttuplizerfactory getcomponenttuplizerfactory() { return componenttuplizerfactory }	WITHOUT_CLASSIFICATION	0.9994956798153447	WITHOUT_CLASSIFICATION	5.043201846552246E-4	DESIGN
this method may be called many times!!	WITHOUT_CLASSIFICATION	0.9923665057417156	WITHOUT_CLASSIFICATION	0.00763349425828439	DESIGN
iterator iterator = extendsqueue.iterator()	WITHOUT_CLASSIFICATION	0.9999368044127184	WITHOUT_CLASSIFICATION	6.319558728162537E-5	DESIGN
iterator iter = extendsqueue.iterator()	WITHOUT_CLASSIFICATION	0.9998699449852855	WITHOUT_CLASSIFICATION	1.300550147145047E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.9998310795500546	WITHOUT_CLASSIFICATION	1.6892044994539643E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.9998310795500546	WITHOUT_CLASSIFICATION	1.6892044994539643E-4	DESIGN
settings.setcomponenttuplizerfactory( this.getcomponenttuplizerfactory() )	WITHOUT_CLASSIFICATION	0.9987870645387554	WITHOUT_CLASSIFICATION	0.0012129354612445574	DESIGN
private final list extendsqueue	WITHOUT_CLASSIFICATION	0.9992426501186193	WITHOUT_CLASSIFICATION	7.573498813807278E-4	DESIGN
<string string>	WITHOUT_CLASSIFICATION	0.9997888379455756	WITHOUT_CLASSIFICATION	2.1116205442448584E-4	DESIGN
<string string>	WITHOUT_CLASSIFICATION	0.9997888379455756	WITHOUT_CLASSIFICATION	2.1116205442448584E-4	DESIGN
+ "_" + referencedcolumnname not used for backward compatibility	WITHOUT_CLASSIFICATION	0.6716420233167846	DESIGN	0.32835797668321537	WITHOUT_CLASSIFICATION
set use_reflection_optimizer to false to fix hhh-227	WITHOUT_CLASSIFICATION	0.9201145872349793	WITHOUT_CLASSIFICATION	0.07988541276502069	DESIGN
orphan delete not supported for entitymode.dom4j	WITHOUT_CLASSIFICATION	0.9977908568128107	WITHOUT_CLASSIFICATION	0.002209143187189358	DESIGN
element = xmlhelper.generatedom4jelement( persister.getnodename() )	WITHOUT_CLASSIFICATION	0.9997643068224665	WITHOUT_CLASSIFICATION	2.3569317753345786E-4	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9997516257154543	WITHOUT_CLASSIFICATION	2.48374284545748E-4	DESIGN
orphan delete not supported for entitymode.dom4j	WITHOUT_CLASSIFICATION	0.9977908568128107	WITHOUT_CLASSIFICATION	0.002209143187189358	DESIGN
element = xmlhelper.generatedom4jelement( persister.getnodename() )	WITHOUT_CLASSIFICATION	0.9997643068224665	WITHOUT_CLASSIFICATION	2.3569317753345786E-4	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.9991573556945296	WITHOUT_CLASSIFICATION	8.426443054703659E-4	DESIGN
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9988968078810683	WITHOUT_CLASSIFICATION	0.0011031921189317583	DESIGN
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9991627682352745	WITHOUT_CLASSIFICATION	8.372317647254384E-4	DESIGN
the element has changed	WITHOUT_CLASSIFICATION	0.9999281431218398	WITHOUT_CLASSIFICATION	7.185687816020778E-5	DESIGN
careful these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9954057082668191	WITHOUT_CLASSIFICATION	0.004594291733180998	DESIGN
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9731740241095275	WITHOUT_CLASSIFICATION	0.02682597589047257	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9984738648393987	WITHOUT_CLASSIFICATION	0.0015261351606013099	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9984738648393987	WITHOUT_CLASSIFICATION	0.0015261351606013099	DESIGN
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9961418116672203	WITHOUT_CLASSIFICATION	0.003858188332779705	DESIGN
short-circuit(s) no new elements the old list contains only orphans no old elements so no orphans neither	WITHOUT_CLASSIFICATION	0.9999988512243712	WITHOUT_CLASSIFICATION	1.148775628867607E-6	DESIGN
create the collection holding the orphans	WITHOUT_CLASSIFICATION	0.9986676655773994	WITHOUT_CLASSIFICATION	0.0013323344226005029	DESIGN
collect entityidentifier(s) of the current elements - add them into a hashset for fast access	WITHOUT_CLASSIFICATION	0.9941323264664026	WITHOUT_CLASSIFICATION	0.005867673533597376	DESIGN
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999499953531276	WITHOUT_CLASSIFICATION	5.000464687238695E-5	DESIGN
(array==null) ? templist.size()	WITHOUT_CLASSIFICATION	0.9986198260230226	WITHOUT_CLASSIFICATION	0.001380173976977463	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9997516257154543	WITHOUT_CLASSIFICATION	2.48374284545748E-4	DESIGN
(array==null) ? templist.get(i)	WITHOUT_CLASSIFICATION	0.9986198260230226	WITHOUT_CLASSIFICATION	0.001380173976977463	DESIGN
write() -- doesn't	WITHOUT_CLASSIFICATION	0.9997005882807839	WITHOUT_CLASSIFICATION	2.9941171921607485E-4	DESIGN
write() -- doesn't	WITHOUT_CLASSIFICATION	0.9997005882807839	WITHOUT_CLASSIFICATION	2.9941171921607485E-4	DESIGN
amazingly these two will work because abstractcollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999916350530841	WITHOUT_CLASSIFICATION	8.364946915985986E-6	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.9991573556945296	WITHOUT_CLASSIFICATION	8.426443054703659E-4	DESIGN
finally what it's all about	WITHOUT_CLASSIFICATION	0.9812822043463776	WITHOUT_CLASSIFICATION	0.01871779565362244	DESIGN
note that if we load this collection from a cartesian product the multiplicity would be broken so use an idbag instead	WITHOUT_CLASSIFICATION	0.8224721517129542	DESIGN	0.17752784828704576	WITHOUT_CLASSIFICATION
anyway here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.8073413736150348	DESIGN	0.19265862638496528	WITHOUT_CLASSIFICATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9998811945176939	WITHOUT_CLASSIFICATION	1.1880548230616034E-4	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9560465497356313	WITHOUT_CLASSIFICATION	0.043953450264368706	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.9991573556945296	WITHOUT_CLASSIFICATION	8.426443054703659E-4	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9998811945176939	WITHOUT_CLASSIFICATION	1.1880548230616034E-4	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9560465497356313	WITHOUT_CLASSIFICATION	0.043953450264368706	DESIGN
public boolean equals(object other) {read()return bag.equals(other)}public int hashcode(object other) {read()return bag.hashcode()}	WITHOUT_CLASSIFICATION	0.9999312724439987	WITHOUT_CLASSIFICATION	6.872755600129796E-5	DESIGN
list operations	WITHOUT_CLASSIFICATION	0.9999441478744923	WITHOUT_CLASSIFICATION	5.585212550771737E-5	DESIGN
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.999956627974084	WITHOUT_CLASSIFICATION	4.337202591602586E-5	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.9991573556945296	WITHOUT_CLASSIFICATION	8.426443054703659E-4	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.9991573556945296	WITHOUT_CLASSIFICATION	8.426443054703659E-4	DESIGN
from map	WITHOUT_CLASSIFICATION	0.9997051267800694	WITHOUT_CLASSIFICATION	2.9487321993058E-4	DESIGN
from sortedmap	WITHOUT_CLASSIFICATION	0.9996628916871311	WITHOUT_CLASSIFICATION	3.371083128688357E-4	DESIGN
inject the data	WITHOUT_CLASSIFICATION	0.9999233975522769	WITHOUT_CLASSIFICATION	7.660244772311213E-5	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998945504878698	WITHOUT_CLASSIFICATION	1.054495121301498E-4	DESIGN
default pool size 20	WITHOUT_CLASSIFICATION	0.9999601489506033	WITHOUT_CLASSIFICATION	3.9851049396785275E-5	DESIGN
trying via forname() first to be as close to drivermanager's semantics	WITHOUT_CLASSIFICATION	0.9999961107474268	WITHOUT_CLASSIFICATION	3.889252573195596E-6	DESIGN
if debug level is enabled then log the password otherwise mask it	WITHOUT_CLASSIFICATION	0.9999537830067741	WITHOUT_CLASSIFICATION	4.621699322593024E-5	DESIGN
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9995275360653709	WITHOUT_CLASSIFICATION	4.724639346290316E-4	DESIGN
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9998083106885314	WITHOUT_CLASSIFICATION	1.916893114686772E-4	DESIGN
then bind it	WITHOUT_CLASSIFICATION	0.9998312920656939	WITHOUT_CLASSIFICATION	1.6870793430618514E-4	DESIGN
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9651029868637896	WITHOUT_CLASSIFICATION	0.034897013136210506	DESIGN
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9977391847075282	WITHOUT_CLASSIFICATION	0.0022608152924716986	DESIGN
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999792499784073	WITHOUT_CLASSIFICATION	2.075002159272267E-5	DESIGN
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9985115903330237	WITHOUT_CLASSIFICATION	0.001488409666976277	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995876025319913	WITHOUT_CLASSIFICATION	4.1239746800864204E-4	DESIGN
we could register the session against the transaction even though it is not started but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999994606608447	WITHOUT_CLASSIFICATION	5.393391554036124E-7	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998945504878698	WITHOUT_CLASSIFICATION	1.054495121301498E-4	DESIGN
private string propertyname	WITHOUT_CLASSIFICATION	0.9975903467213386	WITHOUT_CLASSIFICATION	0.0024096532786613417	DESIGN
public propertyprojection project() {return projections.property(getpropertyname())}	WITHOUT_CLASSIFICATION	0.9996263350785948	WITHOUT_CLASSIFICATION	3.73664921405183E-4	DESIGN
string[] fk = stringhelper.qualify( "collection_" cp.getkeycolumnnames() )	WITHOUT_CLASSIFICATION	0.9977355367447942	WITHOUT_CLASSIFICATION	0.002264463255205903	DESIGN
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999712358727972	WITHOUT_CLASSIFICATION	2.8764127202769085E-5	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9997862372683458	WITHOUT_CLASSIFICATION	2.1376273165423938E-4	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9997862372683458	WITHOUT_CLASSIFICATION	2.1376273165423938E-4	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998945504878698	WITHOUT_CLASSIFICATION	1.054495121301498E-4	DESIGN
the following two lines were added to ensure that this.params is not null which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999910778126624	WITHOUT_CLASSIFICATION	8.922187337542843E-6	DESIGN
with two-deep subqueries the same alias would get generated for both using the old method (criteriaquery.generatesqlalias()) so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9923898046936479	WITHOUT_CLASSIFICATION	0.007610195306352084	DESIGN
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9785526595712424	WITHOUT_CLASSIFICATION	0.021447340428757646	DESIGN
pull off the last " "	WITHOUT_CLASSIFICATION	0.9999363952178382	WITHOUT_CLASSIFICATION	6.360478216189178E-5	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.9997576740899272	WITHOUT_CLASSIFICATION	2.4232591007276218E-4	DESIGN
we have the form trim(trimsource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999123728599015	WITHOUT_CLASSIFICATION	8.762714009845022E-5	DESIGN
we have the form trim(from trimsource). this is functionally equivalent to trim(trimsource)	WITHOUT_CLASSIFICATION	0.998810722975476	WITHOUT_CLASSIFICATION	0.0011892770245239858	DESIGN
not_supported_should_use_jdbc3_preparedstatement.getgeneratedkeys_method	WITHOUT_CLASSIFICATION	0.9995866341247203	WITHOUT_CLASSIFICATION	4.1336587527976095E-4	DESIGN
potentialtrimcharacterargindex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9991270876066286	WITHOUT_CLASSIFICATION	8.729123933713199E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993508158155309	WITHOUT_CLASSIFICATION	6.491841844691512E-4	DESIGN
oracle did add support for ansi case statements in 9i	WITHOUT_CLASSIFICATION	0.9997891954066034	WITHOUT_CLASSIFICATION	2.1080459339656911E-4	DESIGN
the standard sql function name is current_timestamp	WITHOUT_CLASSIFICATION	0.9999878241516343	WITHOUT_CLASSIFICATION	1.2175848365561825E-5	DESIGN
informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9735575340756575	WITHOUT_CLASSIFICATION	0.02644246592434243	DESIGN
or byte or text? or money	WITHOUT_CLASSIFICATION	0.9998357472449632	WITHOUT_CLASSIFICATION	1.6425275503678872E-4	DESIGN
strip table-owner because informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999559778381818	WITHOUT_CLASSIFICATION	4.402216181812531E-5	DESIGN
build the map of standard ansi sql aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998654150546961	WITHOUT_CLASSIFICATION	1.3458494530394857E-4	DESIGN
pre h3.2 behavior super.getreturntype(ct m)	WITHOUT_CLASSIFICATION	0.9992299504143133	WITHOUT_CLASSIFICATION	7.70049585686769E-4	DESIGN
finally use the sqltype if == on hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9986910196112355	WITHOUT_CLASSIFICATION	0.0013089803887644115	DESIGN
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999701342714037	WITHOUT_CLASSIFICATION	2.986572859629393E-5	DESIGN
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9950226747807461	WITHOUT_CLASSIFICATION	0.0049773252192539365	DESIGN
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.995530426652042	WITHOUT_CLASSIFICATION	0.004469573347957981	DESIGN
map second/minute/hour/day/month/year to ansi extract() override on subclasses	WITHOUT_CLASSIFICATION	0.999620634538558	WITHOUT_CLASSIFICATION	3.793654614420107E-4	DESIGN
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.998498503177693	WITHOUT_CLASSIFICATION	0.0015014968223070247	DESIGN
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983791748612133	WITHOUT_CLASSIFICATION	0.0016208251387866835	DESIGN
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9960025379774284	WITHOUT_CLASSIFICATION	0.003997462022571583	DESIGN
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993145456452867	WITHOUT_CLASSIFICATION	6.854543547133538E-4	DESIGN
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998690469016771	WITHOUT_CLASSIFICATION	1.3095309832288396E-4	DESIGN
identity support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986844457034314	WITHOUT_CLASSIFICATION	0.001315554296568587	DESIGN
sequence support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995232980180809	WITHOUT_CLASSIFICATION	4.7670198191914777E-4	DESIGN
guid support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985708994538428	WITHOUT_CLASSIFICATION	0.0014291005461571213	DESIGN
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985708994538428	WITHOUT_CLASSIFICATION	0.0014291005461571213	DESIGN
by default we report no support	WITHOUT_CLASSIFICATION	0.9974491131711034	WITHOUT_CLASSIFICATION	0.0025508868288966332	DESIGN
by default we report no support for nowait lock semantics	WITHOUT_CLASSIFICATION	0.9800298102175636	WITHOUT_CLASSIFICATION	0.019970189782436382	DESIGN
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991254242882293	WITHOUT_CLASSIFICATION	8.745757117708387E-4	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9694460237724161	WITHOUT_CLASSIFICATION	0.03055397622758398	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993258923501633	WITHOUT_CLASSIFICATION	6.741076498367106E-4	DESIGN
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995758086669349	WITHOUT_CLASSIFICATION	4.24191333065135E-4	DESIGN
sqlexception support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988225281962358	WITHOUT_CLASSIFICATION	0.0011774718037641763	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985708994538428	WITHOUT_CLASSIFICATION	0.0014291005461571213	DESIGN
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998650351000295	WITHOUT_CLASSIFICATION	0.0013496489997050455	DESIGN
ddl support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985708994538428	WITHOUT_CLASSIFICATION	0.0014291005461571213	DESIGN
grrr for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999308677156369	WITHOUT_CLASSIFICATION	6.9132284363151E-5	DESIGN
informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999326319748986	WITHOUT_CLASSIFICATION	6.736802510140312E-4	DESIGN
return false here as most databases do not properly support this construct	WITHOUT_CLASSIFICATION	0.9812699903381192	WITHOUT_CLASSIFICATION	0.018730009661880747	DESIGN
mckoi has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9998291791650183	WITHOUT_CLASSIFICATION	1.7082083498171522E-4	DESIGN
oracle8 and previous define only a "date" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9161304698785546	WITHOUT_CLASSIFICATION	0.08386953012144532	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9994197283303006	WITHOUT_CLASSIFICATION	5.802716696994993E-4	DESIGN
" cascade"	WITHOUT_CLASSIFICATION	0.9997976478513148	WITHOUT_CLASSIFICATION	2.0235214868533094E-4	DESIGN
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9998555783620965	WITHOUT_CLASSIFICATION	1.4442163790351673E-4	DESIGN
public boolean droptemporarytableafteruse() {we have to because postgres sets current txto rollback only after a failed create tablereturn true}	WITHOUT_CLASSIFICATION	0.9999855868694294	WITHOUT_CLASSIFICATION	1.4413130570585149E-5	DESIGN
check violation	WITHOUT_CLASSIFICATION	0.9992213172695873	WITHOUT_CLASSIFICATION	7.786827304127408E-4	DESIGN
unique violation	WITHOUT_CLASSIFICATION	0.9996054766591915	WITHOUT_CLASSIFICATION	3.94523340808501E-4	DESIGN
foreign key violation	WITHOUT_CLASSIFICATION	0.9998875293019494	WITHOUT_CLASSIFICATION	1.1247069805065631E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993508158155309	WITHOUT_CLASSIFICATION	6.491841844691512E-4	DESIGN
not null violation	WITHOUT_CLASSIFICATION	0.9978830331253022	WITHOUT_CLASSIFICATION	0.0021169668746978273	DESIGN
all other	WITHOUT_CLASSIFICATION	0.9995072966978253	WITHOUT_CLASSIFICATION	4.927033021746392E-4	DESIGN
register the type of the out param - postgresql uses types.other	WITHOUT_CLASSIFICATION	0.9958138330658748	WITHOUT_CLASSIFICATION	0.0041861669341252215	DESIGN
seems to not really public boolean supportsrowvalueconstructorsyntax() { return true }	WITHOUT_CLASSIFICATION	0.9952071143618436	WITHOUT_CLASSIFICATION	0.0047928856381563	DESIGN
seems to have spotty lob suppport	WITHOUT_CLASSIFICATION	0.9992919653991309	WITHOUT_CLASSIFICATION	7.080346008690622E-4	DESIGN
hhh-2300	WITHOUT_CLASSIFICATION	0.9997543180710643	WITHOUT_CLASSIFICATION	2.456819289357101E-4	DESIGN
ignore (probably h2 not in the classpath)	WITHOUT_CLASSIFICATION	0.997413095764733	WITHOUT_CLASSIFICATION	0.0025869042352670473	DESIGN
numeric functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991784741176478	WITHOUT_CLASSIFICATION	8.215258823523105E-4	DESIGN
string functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991723721591386	WITHOUT_CLASSIFICATION	8.27627840861299E-4	DESIGN
time and date functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998558951400183	WITHOUT_CLASSIFICATION	1.4410485998166036E-4	DESIGN
system functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982950070758146	WITHOUT_CLASSIFICATION	0.0017049929241854782	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9981596444717086	WITHOUT_CLASSIFICATION	0.0018403555282913613	DESIGN
23000 check constraint violation {0} 23001 unique index or primary key violation {0}	WITHOUT_CLASSIFICATION	0.9999550239792756	WITHOUT_CLASSIFICATION	4.497602072445863E-5	DESIGN
display the dialect version.	WITHOUT_CLASSIFICATION	0.9990002281201914	WITHOUT_CLASSIFICATION	9.997718798086667E-4	DESIGN
the rdms concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999971560990945	WITHOUT_CLASSIFICATION	2.8439009055604595E-6	DESIGN
dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998016027745491	WITHOUT_CLASSIFICATION	0.0019839722545088793	DESIGN
original dialect.java returns " for update"	WITHOUT_CLASSIFICATION	0.9996705426160747	WITHOUT_CLASSIFICATION	3.29457383925343E-4	DESIGN
verify the state of this new method in hibernate 3.0 dialect.java	WITHOUT_CLASSIFICATION	0.998493302910293	WITHOUT_CLASSIFICATION	0.0015066970897070148	DESIGN
origial dialect.java returns true	WITHOUT_CLASSIFICATION	0.9992901380757857	WITHOUT_CLASSIFICATION	7.098619242142811E-4	DESIGN
the keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.7939246667168227	WITHOUT_CLASSIFICATION	0.20607533328317726	DESIGN
sequence methods - start. the rdms dialect needs these	WITHOUT_CLASSIFICATION	0.987707777251487	WITHOUT_CLASSIFICATION	0.012292222748512908	DESIGN
methods to make it possible to use the native id generator	WITHOUT_CLASSIFICATION	0.9991650553307106	WITHOUT_CLASSIFICATION	8.349446692892412E-4	DESIGN
the where clause was added to eliminate this statement from brute force searches.	WITHOUT_CLASSIFICATION	0.999962764497369	WITHOUT_CLASSIFICATION	3.723550263111944E-5	DESIGN
sequence methods - end	WITHOUT_CLASSIFICATION	0.998229225038206	WITHOUT_CLASSIFICATION	0.001770774961793974	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993508158155309	WITHOUT_CLASSIFICATION	6.491841844691512E-4	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9994197283303006	WITHOUT_CLASSIFICATION	5.802716696994993E-4	DESIGN
we must return a valid rdms/rsa command from this method to prevent rdms/rsa from issuing error 400	WITHOUT_CLASSIFICATION	0.9260947455360753	WITHOUT_CLASSIFICATION	0.07390525446392468	DESIGN
used with drop table to delete all records in the table.	WITHOUT_CLASSIFICATION	0.6368582104375488	WITHOUT_CLASSIFICATION	0.3631417895624513	DESIGN
rdms supports the union all clause.	WITHOUT_CLASSIFICATION	0.9997413759979857	WITHOUT_CLASSIFICATION	2.586240020142246E-4	DESIGN
rdms has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9998443557747207	WITHOUT_CLASSIFICATION	1.5564422527914294E-4	DESIGN
multi-param dialect functions	WITHOUT_CLASSIFICATION	0.9954633540283643	WITHOUT_CLASSIFICATION	0.004536645971635703	DESIGN
function templates	WITHOUT_CLASSIFICATION	0.9999712716920207	WITHOUT_CLASSIFICATION	2.872830797930243E-5	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9981596444717086	WITHOUT_CLASSIFICATION	0.0018403555282913613	DESIGN
this assumes schema support which is present in 1.8.0 and later	WITHOUT_CLASSIFICATION	0.9914612371295214	WITHOUT_CLASSIFICATION	0.008538762870478648	DESIGN
hsqldb only supports read_uncommitted transaction isolation	WITHOUT_CLASSIFICATION	0.9998880410187568	WITHOUT_CLASSIFICATION	1.119589812432003E-4	DESIGN
multi-param string dialect functions	WITHOUT_CLASSIFICATION	0.9976222929906898	WITHOUT_CLASSIFICATION	0.002377707009310181	DESIGN
multi-param numeric dialect functions	WITHOUT_CLASSIFICATION	0.9976397964219195	WITHOUT_CLASSIFICATION	0.0023602035780806003	DESIGN
multi-param date dialect functions	WITHOUT_CLASSIFICATION	0.9973448648641455	WITHOUT_CLASSIFICATION	0.00265513513585447	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9998638182891236	WITHOUT_CLASSIFICATION	1.3618171087633298E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993508158155309	WITHOUT_CLASSIFICATION	6.491841844691512E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993508158155309	WITHOUT_CLASSIFICATION	6.491841844691512E-4	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9956128794988448	WITHOUT_CLASSIFICATION	0.004387120501155174	DESIGN
register the type of the out param - an oracle specific type	WITHOUT_CLASSIFICATION	0.9986522112612815	WITHOUT_CLASSIFICATION	0.0013477887387185502	DESIGN
timesten has no blob/clob support but these types may be suitable for some applications. the length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9996226803320483	WITHOUT_CLASSIFICATION	3.773196679517025E-4	DESIGN
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9980968729038691	WITHOUT_CLASSIFICATION	0.0019031270961308514	DESIGN
public boolean supportsforupdatenowait() {return false}	WITHOUT_CLASSIFICATION	0.999750821949433	WITHOUT_CLASSIFICATION	2.491780505670391E-4	DESIGN
timesten has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9998462773089463	WITHOUT_CLASSIFICATION	1.53722691053752E-4	DESIGN
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9982094769944132	WITHOUT_CLASSIFICATION	0.001790523005586815	DESIGN
add new ordered map	WITHOUT_CLASSIFICATION	0.9992003023116091	WITHOUT_CLASSIFICATION	7.996976883908617E-4	DESIGN
registercolumntype( types.varchar 16777215 "mediumtext" )	WITHOUT_CLASSIFICATION	0.9988047037798095	WITHOUT_CLASSIFICATION	0.0011952962201905717	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993508158155309	WITHOUT_CLASSIFICATION	6.491841844691512E-4	DESIGN
this assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999867450594543	WITHOUT_CLASSIFICATION	1.325494054575001E-5	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9991011294027032	WITHOUT_CLASSIFICATION	8.988705972969113E-4	DESIGN
return "select current_timestamp from rdb$database"	WITHOUT_CLASSIFICATION	0.9986115215285448	WITHOUT_CLASSIFICATION	0.0013884784714551252	DESIGN
registercolumntype data types	WITHOUT_CLASSIFICATION	0.9996261384189994	WITHOUT_CLASSIFICATION	3.738615810006197E-4	DESIGN
hibernate seems to ignore this type	WITHOUT_CLASSIFICATION	0.9879090148980562	WITHOUT_CLASSIFICATION	0.012090985101943895	DESIGN
ibid for current_time and current_date	WITHOUT_CLASSIFICATION	0.9997491804164162	WITHOUT_CLASSIFICATION	2.5081958358370686E-4	DESIGN
tell hibernate to use getbytes instead of getbinarystream	WITHOUT_CLASSIFICATION	0.9915056153953123	WITHOUT_CLASSIFICATION	0.008494384604687594	DESIGN
no batch statements	WITHOUT_CLASSIFICATION	0.9999012607558821	WITHOUT_CLASSIFICATION	9.873924411786162E-5	DESIGN
we might want a special case for 192. this is very common for money types and here it is converted to 181	WITHOUT_CLASSIFICATION	0.5246530771071385	DESIGN	0.4753469228928616	WITHOUT_CLASSIFICATION
no pointbase bit	WITHOUT_CLASSIFICATION	0.9977563261046846	WITHOUT_CLASSIFICATION	0.002243673895315397	DESIGN
no pointbase tinyint	WITHOUT_CLASSIFICATION	0.9995893848742214	WITHOUT_CLASSIFICATION	4.106151257785808E-4	DESIGN
pointbase has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9995962068453964	WITHOUT_CLASSIFICATION	4.037931546035199E-4	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9994197283303006	WITHOUT_CLASSIFICATION	5.802716696994993E-4	DESIGN
the current_timestamp is more accurate but only known to be supported in sql server 7.0 and later (i.e. sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9761286286105954	WITHOUT_CLASSIFICATION	0.023871371389404716	DESIGN
sql server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9997574808776657	WITHOUT_CLASSIFICATION	2.4251912233442106E-4	DESIGN
here assume sqlserver2005 using snapshot isolation which does not have this problem	WITHOUT_CLASSIFICATION	0.9966073601468498	WITHOUT_CLASSIFICATION	0.0033926398531500894	DESIGN
registercolumntype( types.blob 16777215 "mediumblob" ) registercolumntype( types.blob 65535 "blob" )	WITHOUT_CLASSIFICATION	0.9964229777232037	WITHOUT_CLASSIFICATION	0.003577022276796396	DESIGN
registercolumntype( types.clob 16777215 "mediumtext" ) registercolumntype( types.clob 65535 "text" )	WITHOUT_CLASSIFICATION	0.9990508195227921	WITHOUT_CLASSIFICATION	9.49180477207969E-4	DESIGN
registercolumntype( types.varchar 16777215 "mediumtext" ) registercolumntype( types.varchar 65535 "text" )	WITHOUT_CLASSIFICATION	0.9990508195227921	WITHOUT_CLASSIFICATION	9.49180477207969E-4	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9994197283303006	WITHOUT_CLASSIFICATION	5.802716696994993E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9997867789109722	WITHOUT_CLASSIFICATION	2.1322108902772238E-4	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9991011294027032	WITHOUT_CLASSIFICATION	8.988705972969113E-4	DESIGN
sybase bit type does not support null values	WITHOUT_CLASSIFICATION	0.8548320751617884	WITHOUT_CLASSIFICATION	0.14516792483821156	DESIGN
this assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999867450594543	WITHOUT_CLASSIFICATION	1.325494054575001E-5	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993508158155309	WITHOUT_CLASSIFICATION	6.491841844691512E-4	DESIGN
you may still have other resultsets or update counts left to process here but you can't do it now or the resultset you just got will be closed	WITHOUT_CLASSIFICATION	0.999999981615274	WITHOUT_CLASSIFICATION	1.8384725950194834E-8	DESIGN
not null (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9962414725868449	WITHOUT_CLASSIFICATION	0.003758527413155038	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993508158155309	WITHOUT_CLASSIFICATION	6.491841844691512E-4	DESIGN
oracle driver reports to support getgeneratedkeys() but they only support the version taking an array of the names of the columns to be returned (via its returning clause). no other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999519849812492	WITHOUT_CLASSIFICATION	4.801501875089526E-5	DESIGN
multi-param string dialect functions	WITHOUT_CLASSIFICATION	0.9976222929906898	WITHOUT_CLASSIFICATION	0.002377707009310181	DESIGN
multi-param numeric dialect functions	WITHOUT_CLASSIFICATION	0.9976397964219195	WITHOUT_CLASSIFICATION	0.0023602035780806003	DESIGN
multi-param date dialect functions	WITHOUT_CLASSIFICATION	0.9973448648641455	WITHOUT_CLASSIFICATION	0.00265513513585447	DESIGN
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999954519860297	WITHOUT_CLASSIFICATION	4.548013970340754E-6	DESIGN
add the main query	WITHOUT_CLASSIFICATION	0.999888583240392	WITHOUT_CLASSIFICATION	1.1141675960797097E-4	DESIGN
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999481147873335	WITHOUT_CLASSIFICATION	5.18852126664552E-5	DESIGN
this assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999867450594543	WITHOUT_CLASSIFICATION	1.325494054575001E-5	DESIGN
you may still have other resultsets or update counts left to process here but you can't do it now or the resultset you just got will be closed	WITHOUT_CLASSIFICATION	0.999999981615274	WITHOUT_CLASSIFICATION	1.8384725950194834E-8	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993508158155309	WITHOUT_CLASSIFICATION	6.491841844691512E-4	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9994197283303006	WITHOUT_CLASSIFICATION	5.802716696994993E-4	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9998638182891236	WITHOUT_CLASSIFICATION	1.3618171087633298E-4	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9956128794988448	WITHOUT_CLASSIFICATION	0.004387120501155174	DESIGN
register the type of the out param - an oracle specific type	WITHOUT_CLASSIFICATION	0.9986522112612815	WITHOUT_CLASSIFICATION	0.0013477887387185502	DESIGN
features which change between 8i 9i and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996269730015861	WITHOUT_CLASSIFICATION	3.7302699841398624E-4	DESIGN
features which remain constant across 8i 9i and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999755306873739	WITHOUT_CLASSIFICATION	2.446931262608316E-5	DESIGN
binary %stream character %stream	WITHOUT_CLASSIFICATION	0.9997913490843408	WITHOUT_CLASSIFICATION	2.0865091565922125E-4	DESIGN
getdefaultproperties().setproperty(environment.statement_batch_size no_batch)	WITHOUT_CLASSIFICATION	0.9995866341247203	WITHOUT_CLASSIFICATION	4.1336587527976095E-4	DESIGN
hibernate impelemnts cast in dialect.java	WITHOUT_CLASSIFICATION	0.9973081441385329	WITHOUT_CLASSIFICATION	0.0026918558614671315	DESIGN
aggregate functions shouldn't be registered right? registerfunction( "list" new standardsqlfunction("list"hibernate.string) ) stopped on $list	WITHOUT_CLASSIFICATION	0.9865954939630615	WITHOUT_CLASSIFICATION	0.013404506036938558	DESIGN
ddl support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985708994538428	WITHOUT_CLASSIFICATION	0.0014291005461571213	DESIGN
below is for cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9988006043069911	WITHOUT_CLASSIFICATION	0.0011993956930088311	DESIGN
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.998649303785511	WITHOUT_CLASSIFICATION	0.0013506962144890508	DESIGN
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9994626601659301	WITHOUT_CLASSIFICATION	5.373398340698448E-4	DESIGN
the syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9884728163701261	WITHOUT_CLASSIFICATION	0.011527183629873835	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9997859950597627	WITHOUT_CLASSIFICATION	2.1400494023734423E-4	DESIGN
identity support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986844457034314	WITHOUT_CLASSIFICATION	0.001315554296568587	DESIGN
sequence support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995232980180809	WITHOUT_CLASSIFICATION	4.7670198191914777E-4	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9694460237724161	WITHOUT_CLASSIFICATION	0.03055397622758398	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9997859950597627	WITHOUT_CLASSIFICATION	2.1400494023734423E-4	DESIGN
the syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9746871963015576	WITHOUT_CLASSIFICATION	0.025312803698442434	DESIGN
completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9983262768431143	WITHOUT_CLASSIFICATION	0.0016737231568856705	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998414114837771	WITHOUT_CLASSIFICATION	0.001585885162229012	DESIGN
limit support (ala top) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993070683324756	WITHOUT_CLASSIFICATION	6.929316675243348E-4	DESIGN
intersystems cache' does not current support "select for update" syntax set your transaction mode to read_committed before using	WITHOUT_CLASSIFICATION	0.9974908976449817	WITHOUT_CLASSIFICATION	0.002509102355018406	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993508158155309	WITHOUT_CLASSIFICATION	6.491841844691512E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993508158155309	WITHOUT_CLASSIFICATION	6.491841844691512E-4	DESIGN
<string>	WITHOUT_CLASSIFICATION	0.9997543180710643	WITHOUT_CLASSIFICATION	2.456819289357101E-4	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993258923501633	WITHOUT_CLASSIFICATION	6.741076498367106E-4	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985708994538428	WITHOUT_CLASSIFICATION	0.0014291005461571213	DESIGN
the keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.7939246667168227	WITHOUT_CLASSIFICATION	0.20607533328317726	DESIGN
does the limit clause come at the start of the select statement rather than at the end?	WITHOUT_CLASSIFICATION	0.9996533528352765	WITHOUT_CLASSIFICATION	3.4664716472354644E-4	DESIGN
does the limit clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9989381486183976	WITHOUT_CLASSIFICATION	0.0010618513816024473	DESIGN
the name of the sql function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9997343580325964	WITHOUT_CLASSIFICATION	2.656419674037222E-4	DESIGN
create an outerjoingenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9978174796070386	WITHOUT_CLASSIFICATION	0.0021825203929613864	DESIGN
the keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9918647208063641	WITHOUT_CLASSIFICATION	0.008135279193635913	DESIGN
registerfunction( "trim" new standardsqlfunction( "trim" hibernate.string ) )	WITHOUT_CLASSIFICATION	0.9987100957904642	WITHOUT_CLASSIFICATION	0.0012899042095357697	DESIGN
skip the from keyword in params	WITHOUT_CLASSIFICATION	0.9996855823286729	WITHOUT_CLASSIFICATION	3.1441767132713613E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9989772430177805	WITHOUT_CLASSIFICATION	0.001022756982219523	DESIGN
potentialtrimcharacterargindex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9991270876066286	WITHOUT_CLASSIFICATION	8.729123933713199E-4	DESIGN
sqlfunction implementation	WITHOUT_CLASSIFICATION	0.9997199290466042	WITHOUT_CLASSIFICATION	2.800709533957447E-4	DESIGN
conceivable that the dialect ctor could throw hibernateexceptions so don't re-wrap	WITHOUT_CLASSIFICATION	0.9969949750330869	WITHOUT_CLASSIFICATION	0.0030050249669130924	DESIGN
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9995814375491695	WITHOUT_CLASSIFICATION	4.185624508305368E-4	DESIGN
register resolvers set via environment property	WITHOUT_CLASSIFICATION	0.9997727262079623	WITHOUT_CLASSIFICATION	2.2727379203765175E-4	DESIGN
kept for backward compatibility until after the 3.1beta5 release of ha	WITHOUT_CLASSIFICATION	0.9999560906256749	WITHOUT_CLASSIFICATION	4.3909374325080036E-5	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999034162754334	WITHOUT_CLASSIFICATION	9.658372456658381E-5	DESIGN
the cascadingaction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997935345572202	WITHOUT_CLASSIFICATION	2.0646544277989255E-4	DESIGN
the cascadingaction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997260388345218	WITHOUT_CLASSIFICATION	2.739611654781087E-4	DESIGN
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9993846887485135	WITHOUT_CLASSIFICATION	6.153112514864738E-4	DESIGN
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9971216690410744	WITHOUT_CLASSIFICATION	0.0028783309589256257	DESIGN
(lockmode) anything	WITHOUT_CLASSIFICATION	0.9999254066401291	WITHOUT_CLASSIFICATION	7.459335987098349E-5	DESIGN
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9995549694960725	WITHOUT_CLASSIFICATION	4.450305039276208E-4	DESIGN
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998400459689759	WITHOUT_CLASSIFICATION	1.5995403102421254E-4	DESIGN
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996143005809572	WITHOUT_CLASSIFICATION	3.8569941904286696E-4	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999301475084719	WITHOUT_CLASSIFICATION	6.985249152812443E-5	DESIGN
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9984895130922234	WITHOUT_CLASSIFICATION	0.001510486907776622	DESIGN
for deprecated saveorupdatecopy()	WITHOUT_CLASSIFICATION	0.9991357652829482	WITHOUT_CLASSIFICATION	8.642347170518194E-4	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996146284639148	WITHOUT_CLASSIFICATION	3.853715360851506E-4	DESIGN
a proxy cannot be transient and it breaks foreignkeys.istransient	WITHOUT_CLASSIFICATION	0.999679888004809	WITHOUT_CLASSIFICATION	3.201119951910231E-4	DESIGN
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996774456214017	WITHOUT_CLASSIFICATION	3.225543785982477E-4	DESIGN
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998982775119111	WITHOUT_CLASSIFICATION	1.017224880888211E-4	DESIGN
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9987006826009315	WITHOUT_CLASSIFICATION	0.001299317399068499	DESIGN
actually the semantics of the next three are really "bag" note that unlike objects collection insertions updates deletions are not really remembered between flushes. we just re-use the same lists for convenience.	WITHOUT_CLASSIFICATION	0.7394082268659506	DESIGN	0.2605917731340494	WITHOUT_CLASSIFICATION
add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9995144226007042	WITHOUT_CLASSIFICATION	4.855773992957528E-4	DESIGN
continue loop	WITHOUT_CLASSIFICATION	0.9999092584922211	WITHOUT_CLASSIFICATION	9.074150777885586E-5	DESIGN
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9997092083600281	WITHOUT_CLASSIFICATION	2.907916399719371E-4	DESIGN
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999791621175953	WITHOUT_CLASSIFICATION	2.0837882404651278E-5	DESIGN
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999570900910465	WITHOUT_CLASSIFICATION	4.2909908953486946E-5	DESIGN
the map of batch numbers to entityinsertaction lists	WITHOUT_CLASSIFICATION	0.9997759179566298	WITHOUT_CLASSIFICATION	2.2408204337015915E-4	DESIGN
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.999661426455167	WITHOUT_CLASSIFICATION	3.3857354483302613E-4	DESIGN
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999961961532841	WITHOUT_CLASSIFICATION	3.8038467160038688E-6	DESIGN
remove the current element from insertions. it will be added back later.	WITHOUT_CLASSIFICATION	0.9996174284083222	WITHOUT_CLASSIFICATION	3.8257159167772554E-4	DESIGN
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9997146861885771	WITHOUT_CLASSIFICATION	2.8531381142293073E-4	DESIGN
there is already an existing batch for this type of entity. check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9991991023923088	WITHOUT_CLASSIFICATION	8.008976076913202E-4	DESIGN
now rebuild the insertions list. there is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9994843864717015	WITHOUT_CLASSIFICATION	5.156135282985004E-4	DESIGN
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9997859427227318	WITHOUT_CLASSIFICATION	2.1405727726826838E-4	DESIGN
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999935639518179	WITHOUT_CLASSIFICATION	6.436048182055175E-6	DESIGN
find the batch number associated with the current association if any.	WITHOUT_CLASSIFICATION	0.9999973711127277	WITHOUT_CLASSIFICATION	2.6288872722349724E-6	DESIGN
create a new batch for this type. the batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9992003784528385	WITHOUT_CLASSIFICATION	7.99621547161488E-4	DESIGN
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9995859501640157	WITHOUT_CLASSIFICATION	4.1404983598420666E-4	DESIGN
since this entity will now be processed in the latest possible batch we can be assured that it will come after all other associations there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9976087026103155	WITHOUT_CLASSIFICATION	0.0023912973896844576	DESIGN
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9997622122969484	WITHOUT_CLASSIFICATION	2.3778770305163936E-4	DESIGN
not really necessary but good for consistency	WITHOUT_CLASSIFICATION	0.9684888736673832	WITHOUT_CLASSIFICATION	0.03151112633261687	DESIGN
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9998250177224872	WITHOUT_CLASSIFICATION	1.7498227751272643E-4	DESIGN
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9945095519646432	WITHOUT_CLASSIFICATION	0.005490448035356815	DESIGN
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9983959098387392	WITHOUT_CLASSIFICATION	0.00160409016126087	DESIGN
loaded entity instances by entityuniquekey	WITHOUT_CLASSIFICATION	0.9999654439005083	WITHOUT_CLASSIFICATION	3.455609949167937E-5	DESIGN
identity map of entityentry instances by the entity instance	WITHOUT_CLASSIFICATION	0.9999123756307933	WITHOUT_CLASSIFICATION	8.762436920680109E-5	DESIGN
entity proxies by entitykey	WITHOUT_CLASSIFICATION	0.9997785176671388	WITHOUT_CLASSIFICATION	2.2148233286120125E-4	DESIGN
snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999458961715928	WITHOUT_CLASSIFICATION	5.410382840731792E-5	DESIGN
identity map of array holder arrayholder instances by the array instance	WITHOUT_CLASSIFICATION	0.9999432154217944	WITHOUT_CLASSIFICATION	5.678457820548924E-5	DESIGN
collection wrappers by the collectionkey key=collectionkey value=persistentcollection	WITHOUT_CLASSIFICATION	0.9996813924075634	WITHOUT_CLASSIFICATION	3.186075924365271E-4	DESIGN
set of entitykeys of deleted objects	WITHOUT_CLASSIFICATION	0.9994486434655618	WITHOUT_CLASSIFICATION	5.513565344380729E-4	DESIGN
properties that we have tried to load and not found in the database	WITHOUT_CLASSIFICATION	0.999652216126187	WITHOUT_CLASSIFICATION	3.477838738130406E-4	DESIGN
a list of collection wrappers that were instantiating during result set processing that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9996050582427477	WITHOUT_CLASSIFICATION	3.9494175725219725E-4	DESIGN
a container for collections we load up when the owning entity is not yet loaded for now this is purely transient!	WITHOUT_CLASSIFICATION	0.9962212876432138	WITHOUT_CLASSIFICATION	0.0037787123567862425	DESIGN
downgrade locks	WITHOUT_CLASSIFICATION	0.9998055815862119	WITHOUT_CLASSIFICATION	1.9441841378818305E-4	DESIGN
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999005528263661	WITHOUT_CLASSIFICATION	9.944717363382921E-5	DESIGN
unwrap the object	WITHOUT_CLASSIFICATION	0.9999630772733628	WITHOUT_CLASSIFICATION	3.692272663727384E-5	DESIGN
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999748010291022	WITHOUT_CLASSIFICATION	2.5198970897846395E-5	DESIGN
return the proxied object	WITHOUT_CLASSIFICATION	0.9998376139067022	WITHOUT_CLASSIFICATION	1.6238609329781526E-4	DESIGN
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999948851122689	WITHOUT_CLASSIFICATION	5.114887731064393E-6	DESIGN
early exit	WITHOUT_CLASSIFICATION	0.999900226921855	WITHOUT_CLASSIFICATION	9.97730781450195E-5	DESIGN
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9937431494508197	WITHOUT_CLASSIFICATION	0.006256850549180421	DESIGN
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9598290935529507	WITHOUT_CLASSIFICATION	0.04017090644704943	DESIGN
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9334701247227376	WITHOUT_CLASSIFICATION	0.06652987527726237	DESIGN
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999496640368826	WITHOUT_CLASSIFICATION	5.033596311736675E-5	DESIGN
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9973806190428346	WITHOUT_CLASSIFICATION	0.0026193809571653866	DESIGN
public boolean isnonexistant(entitykey key) {return nonexistantentitykeys.contains(key)}	WITHOUT_CLASSIFICATION	0.9997506964673197	WITHOUT_CLASSIFICATION	2.4930353268025167E-4	DESIGN
public boolean isnonexistant(entityuniquekey key) {return nonexistententityuniquekeys.contains(key)}	WITHOUT_CLASSIFICATION	0.9997506964673197	WITHOUT_CLASSIFICATION	2.4930353268025167E-4	DESIGN
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9990735002665021	WITHOUT_CLASSIFICATION	9.264997334978249E-4	DESIGN
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9962602118685332	WITHOUT_CLASSIFICATION	0.0037397881314667845	DESIGN
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9993534645476683	WITHOUT_CLASSIFICATION	6.465354523316585E-4	DESIGN
otherwise the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999948800619919	WITHOUT_CLASSIFICATION	5.119938008162184E-6	DESIGN
adds remove as a sort-of alias for delete	WITHOUT_CLASSIFICATION	0.9994417622026479	WITHOUT_CLASSIFICATION	5.582377973519958E-4	DESIGN
bad cast	WITHOUT_CLASSIFICATION	0.9921226345976973	WITHOUT_CLASSIFICATION	0.007877365402302645	DESIGN
return lhspersister.getsubclasspropertycolumnnames(property)	WITHOUT_CLASSIFICATION	0.9996585710153588	WITHOUT_CLASSIFICATION	3.4142898464118224E-4	DESIGN
property-refs for associations defined on a component are not supported so no need to slice	WITHOUT_CLASSIFICATION	0.997241346049355	WITHOUT_CLASSIFICATION	0.0027586539506450703	DESIGN
if there is no property-ref assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999772416845676	WITHOUT_CLASSIFICATION	2.275831543250387E-5	DESIGN
handle a property-ref	WITHOUT_CLASSIFICATION	0.9948409315387361	WITHOUT_CLASSIFICATION	0.005159068461263937	DESIGN
nativesqlqueryreturn	WITHOUT_CLASSIFICATION	0.9997859950597627	WITHOUT_CLASSIFICATION	2.1400494023734423E-4	DESIGN
final boolean forcecacherefresh	WITHOUT_CLASSIFICATION	0.9998576818664472	WITHOUT_CLASSIFICATION	1.423181335528946E-4	DESIGN
why is all others non final ?	WITHOUT_CLASSIFICATION	0.6904102634603201	WITHOUT_CLASSIFICATION	0.30958973653968	DESIGN
this.forcecacherefresh = forcecacherefresh	WITHOUT_CLASSIFICATION	0.9999128872065062	WITHOUT_CLASSIFICATION	8.711279349382712E-5	DESIGN
hella important optimization!!!	WITHOUT_CLASSIFICATION	0.9992492875405605	WITHOUT_CLASSIFICATION	7.507124594394911E-4	DESIGN
return that.type.equals(type) && equalshelper.equals(that.value value)	WITHOUT_CLASSIFICATION	0.9995881340304454	WITHOUT_CLASSIFICATION	4.118659695546435E-4	DESIGN
must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9988194224165772	WITHOUT_CLASSIFICATION	0.0011805775834227853	DESIGN
take a snapshot	WITHOUT_CLASSIFICATION	0.9993912984962787	WITHOUT_CLASSIFICATION	6.087015037214114E-4	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9948694630773719	WITHOUT_CLASSIFICATION	0.0051305369226280605	DESIGN
the owning entity may have been deleted and its identifier unset due to identifier-rollback in which case try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9996110495064704	WITHOUT_CLASSIFICATION	3.8895049352968884E-4	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9998220938271347	WITHOUT_CLASSIFICATION	1.7790617286531825E-4	DESIGN
we've been here before	WITHOUT_CLASSIFICATION	0.9998887787589404	WITHOUT_CLASSIFICATION	1.1122124105954847E-4	DESIGN
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999749194947204	WITHOUT_CLASSIFICATION	2.5080505279695495E-5	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9998220938271347	WITHOUT_CLASSIFICATION	1.7790617286531825E-4	DESIGN
if either its role changed	WITHOUT_CLASSIFICATION	0.9999005067131638	WITHOUT_CLASSIFICATION	9.949328683626145E-5	DESIGN
or its key changed	WITHOUT_CLASSIFICATION	0.999989283618901	WITHOUT_CLASSIFICATION	1.0716381099039073E-5	DESIGN
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9991236398417267	WITHOUT_CLASSIFICATION	8.763601582733388E-4	DESIGN
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9962194202017438	WITHOUT_CLASSIFICATION	0.003780579798256155	DESIGN
force initialize!	WITHOUT_CLASSIFICATION	0.999839183798468	WITHOUT_CLASSIFICATION	1.6081620153186258E-4	DESIGN
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999581348815243	WITHOUT_CLASSIFICATION	4.186511847567298E-5	DESIGN
attributes maintained between flush cycles	WITHOUT_CLASSIFICATION	0.9991344910115315	WITHOUT_CLASSIFICATION	8.655089884685499E-4	DESIGN
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9997881067553086	WITHOUT_CLASSIFICATION	2.118932446914472E-4	DESIGN
allow the collectionsnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9993762130992629	WITHOUT_CLASSIFICATION	6.237869007371177E-4	DESIGN
attributes used only during flush cycle	WITHOUT_CLASSIFICATION	0.9877414719269269	WITHOUT_CLASSIFICATION	0.012258528073073078	DESIGN
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999462682430722	WITHOUT_CLASSIFICATION	5.373175692775986E-5	DESIGN
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.999959880547738	WITHOUT_CLASSIFICATION	4.0119452262075934E-5	DESIGN
during flush we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9982743452456185	WITHOUT_CLASSIFICATION	0.0017256547543814365	DESIGN
if we instantiate a collection during the flush() process we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.999847188388617	WITHOUT_CLASSIFICATION	1.5281161138307382E-4	DESIGN
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9997979304246363	WITHOUT_CLASSIFICATION	2.020695753637301E-4	DESIGN
a newly wrapped collection is not dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.6670487088657993	WITHOUT_CLASSIFICATION	0.33295129113420086	DESIGN
collection.cleardirty()	WITHOUT_CLASSIFICATION	0.9995435784311248	WITHOUT_CLASSIFICATION	4.5642156887515357E-4	DESIGN
collection.cleardirty()	WITHOUT_CLASSIFICATION	0.9995435784311248	WITHOUT_CLASSIFICATION	4.5642156887515357E-4	DESIGN
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999951743088059	WITHOUT_CLASSIFICATION	4.8256911940405045E-6	DESIGN
optimization	WITHOUT_CLASSIFICATION	0.9999194998571287	WITHOUT_CLASSIFICATION	8.050014287131659E-5	DESIGN
optimization optimization	WITHOUT_CLASSIFICATION	0.9998282863939746	WITHOUT_CLASSIFICATION	1.7171360602541907E-4	DESIGN
re-snapshot	WITHOUT_CLASSIFICATION	0.9997859950597627	WITHOUT_CLASSIFICATION	2.1400494023734423E-4	DESIGN
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9996089930468381	WITHOUT_CLASSIFICATION	3.910069531618239E-4	DESIGN
note this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9740946269958303	WITHOUT_CLASSIFICATION	0.02590537300416972	DESIGN
memory optimization	WITHOUT_CLASSIFICATION	0.9999617115330844	WITHOUT_CLASSIFICATION	3.8288466915529295E-5	DESIGN
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9990478106436345	WITHOUT_CLASSIFICATION	9.521893563656761E-4	DESIGN
copied from session	WITHOUT_CLASSIFICATION	0.994686930165985	WITHOUT_CLASSIFICATION	0.0053130698340150325	DESIGN
this should not happen since the dtd prevents it	WITHOUT_CLASSIFICATION	0.9989776111490277	WITHOUT_CLASSIFICATION	0.001022388850972269	DESIGN
joinprocessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the sql ast. 'hasfiltercondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9993569840803876	WITHOUT_CLASSIFICATION	6.430159196123004E-4	DESIGN
the current join represents the join between a many-to-many association table and its "target" table. here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9996291927637841	WITHOUT_CLASSIFICATION	3.7080723621584974E-4	DESIGN
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9988984606986351	WITHOUT_CLASSIFICATION	0.0011015393013648603	DESIGN
values is not null and is checkable we'll look deeper	WITHOUT_CLASSIFICATION	0.9996948265048688	WITHOUT_CLASSIFICATION	3.051734951311092E-4	DESIGN
for non null args check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9990427483411879	WITHOUT_CLASSIFICATION	9.572516588120891E-4	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999034162754334	WITHOUT_CLASSIFICATION	9.658372456658381E-5	DESIGN
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9994395146486715	WITHOUT_CLASSIFICATION	5.604853513285117E-4	DESIGN
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9989327809841639	WITHOUT_CLASSIFICATION	0.0010672190158360518	DESIGN
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9953500930965794	WITHOUT_CLASSIFICATION	0.004649906903420576	DESIGN
do the test	WITHOUT_CLASSIFICATION	0.99998952649994	WITHOUT_CLASSIFICATION	1.0473500059959147E-5	DESIGN
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999395700042449	WITHOUT_CLASSIFICATION	6.0429995754935647E-5	DESIGN
unwrap it	WITHOUT_CLASSIFICATION	0.9998906801123897	WITHOUT_CLASSIFICATION	1.093198876103885E-4	DESIGN
see if the entity is already bound to this session if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9980041411698902	WITHOUT_CLASSIFICATION	0.001995858830109855	DESIGN
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999184736230068	WITHOUT_CLASSIFICATION	8.152637699329306E-5	DESIGN
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9965503045682607	WITHOUT_CLASSIFICATION	0.003449695431739261	DESIGN
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9902508752134767	WITHOUT_CLASSIFICATION	0.009749124786523337	DESIGN
we use the assumed value if there is one to avoid hitting the database	WITHOUT_CLASSIFICATION	0.999986837182377	WITHOUT_CLASSIFICATION	1.316281762302279E-5	DESIGN
hit the database after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9992925424257054	WITHOUT_CLASSIFICATION	7.074575742944476E-4	DESIGN
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context so make some deeper checks	WITHOUT_CLASSIFICATION	0.9943254918799673	WITHOUT_CLASSIFICATION	0.005674508120032636	DESIGN
int count = 0	WITHOUT_CLASSIFICATION	0.9999954550184057	WITHOUT_CLASSIFICATION	4.5449815943991715E-6	DESIGN
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999911907894837	WITHOUT_CLASSIFICATION	8.80921051625024E-6	DESIGN
checkforend = false	WITHOUT_CLASSIFICATION	0.9999793213312343	WITHOUT_CLASSIFICATION	2.0678668765648092E-5	DESIGN
count++	WITHOUT_CLASSIFICATION	0.9997543180710643	WITHOUT_CLASSIFICATION	2.456819289357101E-4	DESIGN
end of array start filling again from start	WITHOUT_CLASSIFICATION	0.9998073248576823	WITHOUT_CLASSIFICATION	1.926751423176639E-4	DESIGN
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9992698794996101	WITHOUT_CLASSIFICATION	7.301205003898308E-4	DESIGN
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999100334343826	WITHOUT_CLASSIFICATION	8.99665656174397E-5	DESIGN
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999543007274962	WITHOUT_CLASSIFICATION	4.5699272503806064E-5	DESIGN
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9998151674564792	WITHOUT_CLASSIFICATION	1.8483254352084696E-4	DESIGN
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.999989270652281	WITHOUT_CLASSIFICATION	1.0729347718979588E-5	DESIGN
ignore this row of results! note the early exit	WITHOUT_CLASSIFICATION	0.999818660418049	WITHOUT_CLASSIFICATION	1.8133958195098174E-4	DESIGN
initialize this collection	WITHOUT_CLASSIFICATION	0.9883334466451745	WITHOUT_CLASSIFICATION	0.011666553354825498	DESIGN
create one	WITHOUT_CLASSIFICATION	0.9997790163520384	WITHOUT_CLASSIFICATION	2.209836479615828E-4	DESIGN
warning can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9992721126291217	WITHOUT_CLASSIFICATION	7.2788737087821E-4	DESIGN
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9998798686720167	WITHOUT_CLASSIFICATION	1.2013132798333643E-4	DESIGN
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.99879553900461	WITHOUT_CLASSIFICATION	0.0012044609953899116	DESIGN
some filters affecting the collection are enabled on the session so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9474143192779172	WITHOUT_CLASSIFICATION	0.05258568072208269	DESIGN
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992946043607321	WITHOUT_CLASSIFICATION	7.053956392677372E-4	DESIGN
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997774427253106	WITHOUT_CLASSIFICATION	2.2255727468931818E-4	DESIGN
collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989297129331814	WITHOUT_CLASSIFICATION	0.0010702870668186017	DESIGN
simple cache of param metadata based on query string. ideally the original "user-supplied query" string should be used to retreive this metadata (i.e. not the para-list-expanded query string) to avoid unnecessary cache entries. used solely for caching param metadata for native-sql queries see getsqlparametermetadata() for a discussion as to why	WITHOUT_CLASSIFICATION	0.7144679597305645	DESIGN	0.28553204026943557	WITHOUT_CLASSIFICATION
the cache of the actual plans	WITHOUT_CLASSIFICATION	0.9999318319120629	WITHOUT_CLASSIFICATION	6.816808793704572E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9989772430177805	WITHOUT_CLASSIFICATION	0.001022756982219523	DESIGN
package	WITHOUT_CLASSIFICATION	0.9989772430177805	WITHOUT_CLASSIFICATION	0.001022756982219523	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999529589556394	WITHOUT_CLASSIFICATION	4.7041044360607865E-5	DESIGN
for native-sql queries the param metadata is determined outside any relation to a query plan because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.88784133058288	DESIGN	0.11215866941712008	WITHOUT_CLASSIFICATION
don't care	WITHOUT_CLASSIFICATION	0.9989720000922583	WITHOUT_CLASSIFICATION	0.0010279999077416981	DESIGN
recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984980817018122	WITHOUT_CLASSIFICATION	0.001501918298187814	DESIGN
don't care	WITHOUT_CLASSIFICATION	0.9989720000922583	WITHOUT_CLASSIFICATION	0.0010279999077416981	DESIGN
note firstrow is zero-based	WITHOUT_CLASSIFICATION	0.9994447474055033	WITHOUT_CLASSIFICATION	5.552525944968251E-4	DESIGN
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999305001520898	WITHOUT_CLASSIFICATION	6.949984791011435E-5	DESIGN
named parameter	WITHOUT_CLASSIFICATION	0.9996775949148219	WITHOUT_CLASSIFICATION	3.2240508517808865E-4	DESIGN
could be either an ordinal or jpa-positional parameter	WITHOUT_CLASSIFICATION	0.9985415269430129	WITHOUT_CLASSIFICATION	0.001458473056987081	DESIGN
a peek ahead showed this as an jpa-positional parameter	WITHOUT_CLASSIFICATION	0.9976779688993671	WITHOUT_CLASSIFICATION	0.0023220311006328835	DESIGN
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9988038051005884	WITHOUT_CLASSIFICATION	0.0011961948994116487	DESIGN
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9998514625410663	WITHOUT_CLASSIFICATION	1.4853745893374308E-4	DESIGN
perform the actual work	WITHOUT_CLASSIFICATION	0.9997052590794178	WITHOUT_CLASSIFICATION	2.947409205822568E-4	DESIGN
if everything went ok commit the transaction and close the obtained connection handle	WITHOUT_CLASSIFICATION	0.9999994765877934	WITHOUT_CLASSIFICATION	5.234122065907441E-7	DESIGN
at some point the processing went bad so we need to 1) make sure the connection handle gets released 2) try to cleanup the jta context as much as possible	WITHOUT_CLASSIFICATION	0.9790907540779358	WITHOUT_CLASSIFICATION	0.020909245922064314	DESIGN
finally handle the exception	WITHOUT_CLASSIFICATION	0.9979436124463366	WITHOUT_CLASSIFICATION	0.002056387553663475	DESIGN
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9823579408353789	WITHOUT_CLASSIFICATION	0.017642059164621183	DESIGN
saveorupdatecopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9995201015608142	WITHOUT_CLASSIFICATION	4.7989843918586495E-4	DESIGN
collectionpersister should not be null but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9310061315359146	WITHOUT_CLASSIFICATION	0.06899386846408537	DESIGN
otherwise a null or brand new collection this will also (inefficiently) handle arrays which have no snapshot so we can't do any better processarrayornewcollection(collection type)	WITHOUT_CLASSIFICATION	0.895428587919025	WITHOUT_CLASSIFICATION	0.10457141208097498	DESIGN
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9937384578777058	WITHOUT_CLASSIFICATION	0.006261542122294275	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9998622497531471	WITHOUT_CLASSIFICATION	1.377502468527866E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9998622497531471	WITHOUT_CLASSIFICATION	1.377502468527866E-4	DESIGN
force a substitution!	WITHOUT_CLASSIFICATION	0.9988937372809962	WITHOUT_CLASSIFICATION	0.0011062627190037632	DESIGN
the user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9968807507359198	WITHOUT_CLASSIFICATION	0.003119249264080284	DESIGN
the database now holds a lock + the object is flushed from the cache so release the soft lock	WITHOUT_CLASSIFICATION	0.9998867697374918	WITHOUT_CLASSIFICATION	1.1323026250823089E-4	DESIGN
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999995247048976	WITHOUT_CLASSIFICATION	4.7529510244002154E-7	DESIGN
search for collections by reachability updating their role. we don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9982933496522013	WITHOUT_CLASSIFICATION	0.001706650347798689	DESIGN
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999109952454615	WITHOUT_CLASSIFICATION	8.90047545385683E-5	DESIGN
note we need to do the wrap here even if its not "dirty" because collections need wrapping but changes to _them_ don't dirty the container. also for versioned data we need to wrap before calling searchfordirtycollections	WITHOUT_CLASSIFICATION	0.998529182354741	WITHOUT_CLASSIFICATION	0.001470817645258947	DESIGN
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9994651804421313	WITHOUT_CLASSIFICATION	5.348195578686686E-4	DESIGN
grab its current state	WITHOUT_CLASSIFICATION	0.9999363384450205	WITHOUT_CLASSIFICATION	6.366155497951185E-5	DESIGN
schedule the update note that we intentionally do _not_ pass in currentpersistentstate!	WITHOUT_CLASSIFICATION	0.9999865849403523	WITHOUT_CLASSIFICATION	1.3415059647610377E-5	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.999804795355079	WITHOUT_CLASSIFICATION	1.952046449210463E-4	DESIGN
give the interceptor a chance to process property values if the properties were modified by the interceptor we need to set them back to the object	WITHOUT_CLASSIFICATION	0.99999774175922	WITHOUT_CLASSIFICATION	2.2582407799871094E-6	DESIGN
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.999903033604601	WITHOUT_CLASSIFICATION	9.696639539905636E-5	DESIGN
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9998322017324069	WITHOUT_CLASSIFICATION	1.677982675930681E-4	DESIGN
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.999987151785679	WITHOUT_CLASSIFICATION	1.2848214321144012E-5	DESIGN
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9939368523866033	WITHOUT_CLASSIFICATION	0.006063147613396638	DESIGN
give the interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999022370109405	WITHOUT_CLASSIFICATION	9.776298905956122E-5	DESIGN
now we might need to recalculate the dirtyproperties array	WITHOUT_CLASSIFICATION	0.9978593978357092	WITHOUT_CLASSIFICATION	0.002140602164290811	DESIGN
use the current version	WITHOUT_CLASSIFICATION	0.999864575920314	WITHOUT_CLASSIFICATION	1.3542407968602707E-4	DESIGN
interceptor returned null so do the dirtycheck ourself if possible	WITHOUT_CLASSIFICATION	0.9999497923094283	WITHOUT_CLASSIFICATION	5.020769057181478E-5	DESIGN
object loaded by update()	WITHOUT_CLASSIFICATION	0.999955738230364	WITHOUT_CLASSIFICATION	4.4261769635959525E-5	DESIGN
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999054765542649	WITHOUT_CLASSIFICATION	9.452344573516978E-5	DESIGN
dirty check against the database snapshot if possible/necessary	WITHOUT_CLASSIFICATION	0.9999842223221775	WITHOUT_CLASSIFICATION	1.5777677822385407E-5	DESIGN
the interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9989384627458785	WITHOUT_CLASSIFICATION	0.0010615372541215775	DESIGN
even process null collections	WITHOUT_CLASSIFICATION	0.9999219433860751	WITHOUT_CLASSIFICATION	7.80566139249656E-5	DESIGN
get the id from the object	WITHOUT_CLASSIFICATION	0.9996589721497712	WITHOUT_CLASSIFICATION	3.410278502288322E-4	DESIGN
always do an insert and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9998971684110504	WITHOUT_CLASSIFICATION	1.0283158894952143E-4	DESIGN
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9991747573345077	WITHOUT_CLASSIFICATION	8.252426654924289E-4	DESIGN
/ hhh-2378	WITHOUT_CLASSIFICATION	0.9999108971982235	WITHOUT_CLASSIFICATION	8.910280177650566E-5	DESIGN
will result in a sql update	WITHOUT_CLASSIFICATION	0.9999920235818606	WITHOUT_CLASSIFICATION	7.976418139473458E-6	DESIGN
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999440354770517	WITHOUT_CLASSIFICATION	5.596452294832938E-5	DESIGN
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.999796370264869	WITHOUT_CLASSIFICATION	2.036297351309494E-4	DESIGN
refresh() does not pass an entityname	WITHOUT_CLASSIFICATION	0.9992797062628435	WITHOUT_CLASSIFICATION	7.202937371564119E-4	DESIGN
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9956079760518688	WITHOUT_CLASSIFICATION	0.00439202394813124	DESIGN
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9989197885737416	WITHOUT_CLASSIFICATION	0.0010802114262583459	DESIGN
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999685945583011	WITHOUT_CLASSIFICATION	3.140544169883528E-5	DESIGN
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.999846785576144	WITHOUT_CLASSIFICATION	1.532144238559538E-4	DESIGN
this object was already loaded	WITHOUT_CLASSIFICATION	0.9992677306522344	WITHOUT_CLASSIFICATION	7.322693477655784E-4	DESIGN
entity was found in second-level cache	WITHOUT_CLASSIFICATION	0.9997442458275335	WITHOUT_CLASSIFICATION	2.5575417246650605E-4	DESIGN
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9993838379423124	WITHOUT_CLASSIFICATION	6.161620576874857E-4	DESIGN
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999825935028075	WITHOUT_CLASSIFICATION	1.740649719251623E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995141677268586	WITHOUT_CLASSIFICATION	4.8583227314137617E-4	DESIGN
some statistics	WITHOUT_CLASSIFICATION	0.9995867331703259	WITHOUT_CLASSIFICATION	4.1326682967410575E-4	DESIGN
safe from concurrent modification because of how entrylist() is implemented on identitymap	WITHOUT_CLASSIFICATION	0.9996607617306537	WITHOUT_CLASSIFICATION	3.392382693463738E-4	DESIGN
initialize dirty flags for arrays + collections with composite elements and reset reached doupdate etc.	WITHOUT_CLASSIFICATION	0.9999781323672975	WITHOUT_CLASSIFICATION	2.186763270247384E-5	DESIGN
among other things updatereachables() will recursively load all collections that are moving roles. this might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9961353116420685	WITHOUT_CLASSIFICATION	0.003864688357931568	DESIGN
so this needs to be safe from concurrent modification problems. it is safe because of how identitymap implements entryset()	WITHOUT_CLASSIFICATION	0.9531393441797184	WITHOUT_CLASSIFICATION	0.046860655820281594	DESIGN
update the status of the object and if necessary schedule an update	WITHOUT_CLASSIFICATION	0.9999693781722773	WITHOUT_CLASSIFICATION	3.0621827722713724E-5	DESIGN
schedule updates to collections	WITHOUT_CLASSIFICATION	0.9997820176285613	WITHOUT_CLASSIFICATION	2.1798237143859695E-4	DESIGN
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9969242911531742	WITHOUT_CLASSIFICATION	0.003075708846825939	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995141677268586	WITHOUT_CLASSIFICATION	4.8583227314137617E-4	DESIGN
the database has changed now so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999650729288754	WITHOUT_CLASSIFICATION	3.492707112449592E-5	DESIGN
if the collection is dereferenced remove from the session cache iter.remove() does not work since the entryset is not backed by the set	WITHOUT_CLASSIFICATION	0.9989600975091792	WITHOUT_CLASSIFICATION	0.0010399024908206737	DESIGN
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9996239409982958	WITHOUT_CLASSIFICATION	3.7605900170423277E-4	DESIGN
get a snapshot	WITHOUT_CLASSIFICATION	0.9995227900362526	WITHOUT_CLASSIFICATION	4.772099637474828E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9997867789109722	WITHOUT_CLASSIFICATION	2.1322108902772238E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9997867789109722	WITHOUT_CLASSIFICATION	2.1322108902772238E-4	DESIGN
key is an entity involved with the operation performed by the listener value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999997217745736	WITHOUT_CLASSIFICATION	2.782254264363516E-7	DESIGN
early exit!!!	WITHOUT_CLASSIFICATION	0.9998112293765868	WITHOUT_CLASSIFICATION	1.887706234131113E-4	DESIGN
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9995489138994041	WITHOUT_CLASSIFICATION	4.51086100595794E-4	DESIGN
before any callbacks etc so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9998193198257462	WITHOUT_CLASSIFICATION	1.8068017425373285E-4	DESIGN
ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999627583754231	WITHOUT_CLASSIFICATION	3.7241624576811905E-5	DESIGN
typefactory.deepcopy( currentstate proptypes persister.getpropertyupdateability() deletedstate session )	WITHOUT_CLASSIFICATION	0.998633714774113	WITHOUT_CLASSIFICATION	0.0013662852258870557	DESIGN
cascade-delete to collections before the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999487918484034	WITHOUT_CLASSIFICATION	5.1208151596601796E-5	DESIGN
cascade-delete to many-to-one after the parent was deleted	WITHOUT_CLASSIFICATION	0.9999288476253744	WITHOUT_CLASSIFICATION	7.115237462568387E-5	DESIGN
if it is an initialized proxy let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9954505719828546	WITHOUT_CLASSIFICATION	0.004549428017145444	DESIGN
assign the requested id to the proxy before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999823851589235	WITHOUT_CLASSIFICATION	1.761484107651622E-5	DESIGN
an uninitialized proxy noop don't even need to return an id since it is never a save()	WITHOUT_CLASSIFICATION	0.9998645600009544	WITHOUT_CLASSIFICATION	1.354399990456726E-4	DESIGN
initialize properties of the event	WITHOUT_CLASSIFICATION	0.9998380107686453	WITHOUT_CLASSIFICATION	1.6198923135472582E-4	DESIGN
return the id in the event object	WITHOUT_CLASSIFICATION	0.9998302751794041	WITHOUT_CLASSIFICATION	1.6972482059589514E-4	DESIGN
transient or deleted	WITHOUT_CLASSIFICATION	0.9998436886359435	WITHOUT_CLASSIFICATION	1.5631136405649192E-4	DESIGN
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9970836551296411	WITHOUT_CLASSIFICATION	0.002916344870358771	DESIGN
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.571910782115986	WITHOUT_CLASSIFICATION	0.428089217884014	DESIGN
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9988206400100149	WITHOUT_CLASSIFICATION	0.0011793599899850458	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9955368465821708	WITHOUT_CLASSIFICATION	0.004463153417829251	DESIGN
cachedstate	WITHOUT_CLASSIFICATION	0.9997859950597627	WITHOUT_CLASSIFICATION	2.1400494023734423E-4	DESIGN
assume true since we don't really know and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999407922458946	WITHOUT_CLASSIFICATION	5.9207754105342865E-5	DESIGN
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9985283095493301	WITHOUT_CLASSIFICATION	0.0014716904506698841	DESIGN
if the collection belonged to a different entity clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.999361849335532	WITHOUT_CLASSIFICATION	6.381506644679826E-4	DESIGN
log.debug( "calling onload()" )	WITHOUT_CLASSIFICATION	0.9987870645387554	WITHOUT_CLASSIFICATION	0.0012129354612445574	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9998193397490085	WITHOUT_CLASSIFICATION	1.8066025099154043E-4	DESIGN
note performexecutions() clears all collectionxxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9977644645444123	WITHOUT_CLASSIFICATION	0.002235535455587702	DESIGN
if no array holder we found an unwrappered array (this can't occur because we now always call wrap() before getting to here) return (ah==null) ? true searchfordirtycollections(ah type)	WITHOUT_CLASSIFICATION	0.9999879538733193	WITHOUT_CLASSIFICATION	1.2046126680725501E-5	DESIGN
if not wrappered yet its dirty (this can't occur because we now always call wrap() before getting to here) return ( ! (obj instanceof persistentcollection) ) ? true searchfordirtycollections( (persistentcollection) obj type )	WITHOUT_CLASSIFICATION	0.9991715649650269	WITHOUT_CLASSIFICATION	8.284350349732022E-4	DESIGN
we need to check even if it was not initialized because of delayed adds!	WITHOUT_CLASSIFICATION	0.9982464310273814	WITHOUT_CLASSIFICATION	0.0017535689726184607	DESIGN
note early exit!	WITHOUT_CLASSIFICATION	0.9997598224466081	WITHOUT_CLASSIFICATION	2.401775533918705E-4	DESIGN
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9989942999686352	WITHOUT_CLASSIFICATION	0.001005700031364788	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9998193397490085	WITHOUT_CLASSIFICATION	1.8066025099154043E-4	DESIGN
check the persistence context for an entry relating to this entity to be merged	WITHOUT_CLASSIFICATION	0.9847906057604544	WITHOUT_CLASSIFICATION	0.01520939423954547	DESIGN
we have specialized case of a detached entity from the perspective of the merge operation. specifically we have an incoming entity instance which has a corresponding entry in the current persistence context but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9989946145876092	WITHOUT_CLASSIFICATION	0.0010053854123908555	DESIGN
deleted	WITHOUT_CLASSIFICATION	0.9997996700848506	WITHOUT_CLASSIFICATION	2.003299151494303E-4	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9999256435365204	WITHOUT_CLASSIFICATION	7.435646347962381E-5	DESIGN
cascade first so that all unsaved objects get their copy created before we actually copy cascadeonmerge(event persister entity copycache cascades.cascade_before_merge)	WITHOUT_CLASSIFICATION	0.9999923725835268	WITHOUT_CLASSIFICATION	7.6274164731822315E-6	DESIGN
this bit is only really absolutely necessary for handling requestedid but is also good if we merge multiple object graphs since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9606685043339422	WITHOUT_CLASSIFICATION	0.039331495666057856	DESIGN
continue we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9516086220143269	WITHOUT_CLASSIFICATION	0.048391377985673015	DESIGN
cascade first so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999972896697468	WITHOUT_CLASSIFICATION	2.7103302532812773E-6	DESIGN
check that entity id = requestedid	WITHOUT_CLASSIFICATION	0.9995788954043969	WITHOUT_CLASSIFICATION	4.2110459560307364E-4	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9999256435365204	WITHOUT_CLASSIFICATION	7.435646347962381E-5	DESIGN
we got here because we assumed that an instance with an assigned id was detached when it was really persistent	WITHOUT_CLASSIFICATION	0.9999594529092438	WITHOUT_CLASSIFICATION	4.0547090756207586E-5	DESIGN
cascade first so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999972896697468	WITHOUT_CLASSIFICATION	2.7103302532812773E-6	DESIGN
copyvalues works by reflection so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9995797957488877	WITHOUT_CLASSIFICATION	4.2020425111222246E-4	DESIGN
early exit	WITHOUT_CLASSIFICATION	0.999900226921855	WITHOUT_CLASSIFICATION	9.97730781450195E-5	DESIGN
source.getbatcher().executebatch() found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9992242190834877	WITHOUT_CLASSIFICATION	7.757809165124107E-4	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.999804795355079	WITHOUT_CLASSIFICATION	1.952046449210463E-4	DESIGN
now done in entityidentityinsertaction persister.setidentifier( entity id source.getentitymode() )	WITHOUT_CLASSIFICATION	0.9943204609820484	WITHOUT_CLASSIFICATION	0.005679539017951608	DESIGN
source.getpersistencecontext().removenonexist( new entitykey( id persister source.getentitymode() ) )	WITHOUT_CLASSIFICATION	0.9950256176355365	WITHOUT_CLASSIFICATION	0.004974382364463453	DESIGN
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.999986711013232	WITHOUT_CLASSIFICATION	1.3288986768126801E-5	DESIGN
cascade-save to many-to-one before the parent is saved	WITHOUT_CLASSIFICATION	0.9998199666568257	WITHOUT_CLASSIFICATION	1.8003334317421955E-4	DESIGN
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999996583268322	WITHOUT_CLASSIFICATION	3.416731677634733E-7	DESIGN
the object is persistent	WITHOUT_CLASSIFICATION	0.9998190740774388	WITHOUT_CLASSIFICATION	1.8092592256123337E-4	DESIGN
the entity is associated with the session so check its status	WITHOUT_CLASSIFICATION	0.999827489446634	WITHOUT_CLASSIFICATION	1.7251055336593103E-4	DESIGN
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9998727463764664	WITHOUT_CLASSIFICATION	1.27253623533521E-4	DESIGN
ie. e.status==deleted	WITHOUT_CLASSIFICATION	0.9995435784311248	WITHOUT_CLASSIFICATION	4.5642156887515357E-4	DESIGN
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999227491082183	WITHOUT_CLASSIFICATION	7.725089178163173E-5	DESIGN
note early exit!	WITHOUT_CLASSIFICATION	0.9997598224466081	WITHOUT_CLASSIFICATION	2.401775533918705E-4	DESIGN
private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.991763755783353	WITHOUT_CLASSIFICATION	0.008236244216647074	DESIGN
first try to find a matching constructor accepting a violatedconstraintnameextracter param	WITHOUT_CLASSIFICATION	0.9996925017990178	WITHOUT_CLASSIFICATION	3.074982009822515E-4	DESIGN
eat it and try next	WITHOUT_CLASSIFICATION	0.9992465693625212	WITHOUT_CLASSIFICATION	7.534306374787812E-4	DESIGN
otherwise try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9998176606272579	WITHOUT_CLASSIFICATION	1.823393727421668E-4	DESIGN
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.999115663295678	WITHOUT_CLASSIFICATION	8.84336704321928E-4	DESIGN
collectionpropertymapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9975827820967317	WITHOUT_CLASSIFICATION	0.0024172179032683322	DESIGN
remove initial " "	WITHOUT_CLASSIFICATION	0.9992941311495142	WITHOUT_CLASSIFICATION	7.058688504858678E-4	DESIGN
remove initial " and "	WITHOUT_CLASSIFICATION	0.9988018398639011	WITHOUT_CLASSIFICATION	0.0011981601360988889	DESIGN
beforeclasstokens.add("new") definitely don't have this!!	WITHOUT_CLASSIFICATION	0.9994713318101754	WITHOUT_CLASSIFICATION	5.286681898246301E-4	DESIGN
notafterclasstokens.add("")	WITHOUT_CLASSIFICATION	0.9995435784311248	WITHOUT_CLASSIFICATION	4.5642156887515357E-4	DESIGN
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9991389712507064	WITHOUT_CLASSIFICATION	8.610287492935528E-4	DESIGN
update last non-whitespace token if necessary	WITHOUT_CLASSIFICATION	0.9999563469911564	WITHOUT_CLASSIFICATION	4.365300884362815E-5	DESIGN
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999696039423408	WITHOUT_CLASSIFICATION	3.0396057659210314E-5	DESIGN
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.999704008806321	WITHOUT_CLASSIFICATION	2.959911936789194E-4	DESIGN
note this!!	WITHOUT_CLASSIFICATION	0.9997154957000634	WITHOUT_CLASSIFICATION	2.84504299936597E-4	DESIGN
error message constants.	WITHOUT_CLASSIFICATION	0.9988220187096359	WITHOUT_CLASSIFICATION	0.0011779812903639757	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995431374842957	WITHOUT_CLASSIFICATION	4.5686251570428086E-4	DESIGN
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995810573415431	WITHOUT_CLASSIFICATION	4.189426584569367E-4	DESIGN
handle collection-fiter compilation. important note this is modifying the input (hql) tree not the output tree!	WITHOUT_CLASSIFICATION	0.9283870188638801	WITHOUT_CLASSIFICATION	0.07161298113611987	DESIGN
show the modified ast.	WITHOUT_CLASSIFICATION	0.9999846067402864	WITHOUT_CLASSIFICATION	1.5393259713521112E-5	DESIGN
create a parameter specification for the collection filter	WITHOUT_CLASSIFICATION	0.9958931234204637	WITHOUT_CLASSIFICATION	0.0041068765795363215	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9997641874388233	WITHOUT_CLASSIFICATION	2.3581256117671855E-4	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9997641874388233	WITHOUT_CLASSIFICATION	2.3581256117671855E-4	DESIGN
get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9970983966691797	WITHOUT_CLASSIFICATION	0.002901603330820368	DESIGN
the path ast should be a dotnode and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.99503413134339	WITHOUT_CLASSIFICATION	0.0049658686566100676	DESIGN
tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9996395650777685	WITHOUT_CLASSIFICATION	3.6043492223142493E-4	DESIGN
re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999671392390377	WITHOUT_CLASSIFICATION	3.286076096234682E-5	DESIGN
don't forget to resolve the argument! resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9997451825329263	WITHOUT_CLASSIFICATION	2.5481746707367494E-4	DESIGN
resolve everything up to this dot but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9997031537259724	WITHOUT_CLASSIFICATION	2.968462740276639E-4	DESIGN
should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9994285426439725	WITHOUT_CLASSIFICATION	5.714573560274894E-4	DESIGN
was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9998876920731236	WITHOUT_CLASSIFICATION	1.123079268764045E-4	DESIGN
attach any mapping-defined "order by" fragments	WITHOUT_CLASSIFICATION	0.9994535765970601	WITHOUT_CLASSIFICATION	5.46423402939781E-4	DESIGN
use the explicitly declared select expression determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999573306846404	WITHOUT_CLASSIFICATION	4.2669315359654996E-5	DESIGN
after that process the joins. invoke a delegate to do the work as this is farily complex.	WITHOUT_CLASSIFICATION	0.9998461781485677	WITHOUT_CLASSIFICATION	1.5382185143228042E-4	DESIGN
make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999766048881844	WITHOUT_CLASSIFICATION	2.339511181568847E-5	DESIGN
we need to generate ids as part of this bulk insert. note that this is only supported for sequence-style generators and post-insert-style generators basically only in-db generators	WITHOUT_CLASSIFICATION	0.997639028898027	WITHOUT_CLASSIFICATION	0.00236097110197295	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9997641874388233	WITHOUT_CLASSIFICATION	2.3581256117671855E-4	DESIGN
we need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.999931237296759	WITHOUT_CLASSIFICATION	6.87627032409536E-5	DESIGN
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9921779795802917	WITHOUT_CLASSIFICATION	0.007822020419708182	DESIGN
this is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9956291696876662	WITHOUT_CLASSIFICATION	0.004370830312333778	DESIGN
generate implicit joins only if necessary.	WITHOUT_CLASSIFICATION	0.9999185036840311	WITHOUT_CLASSIFICATION	8.149631596891337E-5	DESIGN
notify the from element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999799096554658	WITHOUT_CLASSIFICATION	2.009034453421997E-5	DESIGN
turn off includesubclasses on all fromelements.	WITHOUT_CLASSIFICATION	0.9977521371690755	WITHOUT_CLASSIFICATION	0.0022478628309244636	DESIGN
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9991972724727448	WITHOUT_CLASSIFICATION	8.027275272551815E-4	DESIGN
use the delegate resolve identifiers as from element aliases.	WITHOUT_CLASSIFICATION	0.9994058170360487	WITHOUT_CLASSIFICATION	5.941829639513598E-4	DESIGN
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9988475169703434	WITHOUT_CLASSIFICATION	0.0011524830296566592	DESIGN
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9970598873738958	WITHOUT_CLASSIFICATION	0.002940112626104256	DESIGN
make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9989689429866264	WITHOUT_CLASSIFICATION	0.0010310570133735732	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995431374842957	WITHOUT_CLASSIFICATION	4.5686251570428086E-4	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9997641874388233	WITHOUT_CLASSIFICATION	2.3581256117671855E-4	DESIGN
--commented out by inspection (12/11/04 1056 am) int getwarningcount()	WITHOUT_CLASSIFICATION	0.999962055506356	WITHOUT_CLASSIFICATION	3.7944493643976907E-5	DESIGN
alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9994101122167898	WITHOUT_CLASSIFICATION	5.898877832101588E-4	DESIGN
switch	WITHOUT_CLASSIFICATION	0.9999033987077117	WITHOUT_CLASSIFICATION	9.660129228821508E-5	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9988384466471192	WITHOUT_CLASSIFICATION	0.0011615533528809023	DESIGN
just do the regular thing if you can't find the ctor your ast must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9996859385909281	WITHOUT_CLASSIFICATION	3.1406140907181356E-4	DESIGN
initialize sql nodes here.	WITHOUT_CLASSIFICATION	0.9997160295481322	WITHOUT_CLASSIFICATION	2.8397045186774535E-4	DESIGN
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999020743298634	WITHOUT_CLASSIFICATION	9.792567013660435E-5	DESIGN
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.999984921243998	WITHOUT_CLASSIFICATION	1.5078756002106412E-5	DESIGN
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999429357706153	WITHOUT_CLASSIFICATION	5.706422938465972E-5	DESIGN
--- inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.999901608021884	WITHOUT_CLASSIFICATION	9.839197811602439E-5	DESIGN
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9998292696084574	WITHOUT_CLASSIFICATION	1.7073039154246264E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9999108971982235	WITHOUT_CLASSIFICATION	8.910280177650566E-5	DESIGN
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9997882258303422	WITHOUT_CLASSIFICATION	2.117741696577374E-4	DESIGN
again both should be fromelements	WITHOUT_CLASSIFICATION	0.9949373586972968	WITHOUT_CLASSIFICATION	0.005062641302703155	DESIGN
note firstrow is zero-based	WITHOUT_CLASSIFICATION	0.9994447474055033	WITHOUT_CLASSIFICATION	5.552525944968251E-4	DESIGN
right represents a joins originating from left or both right and left reprersent joins originating from the same fromelement	WITHOUT_CLASSIFICATION	0.9998532380380966	WITHOUT_CLASSIFICATION	1.4676196190346264E-4	DESIGN
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9848279546475309	WITHOUT_CLASSIFICATION	0.015172045352468957	DESIGN
right represents a joins originating from left	WITHOUT_CLASSIFICATION	0.9996794919617089	WITHOUT_CLASSIFICATION	3.205080382911385E-4	DESIGN
all clear	WITHOUT_CLASSIFICATION	0.9997755196770574	WITHOUT_CLASSIFICATION	2.244803229426016E-4	DESIGN
ignore the token class name parameter and use a specific token class.	WITHOUT_CLASSIFICATION	0.9909691660239517	WITHOUT_CLASSIFICATION	0.009030833976048234	DESIGN
overriden to avoid system.exit	WITHOUT_CLASSIFICATION	0.99957065979706	WITHOUT_CLASSIFICATION	4.2934020294007876E-4	DESIGN
overriden to avoid system.exit	WITHOUT_CLASSIFICATION	0.99957065979706	WITHOUT_CLASSIFICATION	4.2934020294007876E-4	DESIGN
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9878633051359628	WITHOUT_CLASSIFICATION	0.01213669486403726	DESIGN
don't care about other param types here just those explicitly user-defined	WITHOUT_CLASSIFICATION	0.9669303727746887	WITHOUT_CLASSIFICATION	0.03306962722531125	DESIGN
if the query is already compiled skip the compilation.	WITHOUT_CLASSIFICATION	0.9999070146179942	WITHOUT_CLASSIFICATION	9.298538200564208E-5	DESIGN
remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9983668210890951	WITHOUT_CLASSIFICATION	0.001633178910904852	DESIGN
phase 1 parse the hql into an ast.	WITHOUT_CLASSIFICATION	0.998959351576991	WITHOUT_CLASSIFICATION	0.0010406484230089342	DESIGN
phase 2 analyze the hql ast and produce an sql ast.	WITHOUT_CLASSIFICATION	0.9999957223467204	WITHOUT_CLASSIFICATION	4.277653279675278E-6	DESIGN
phase 3 generate the sql.	WITHOUT_CLASSIFICATION	0.9997436605008785	WITHOUT_CLASSIFICATION	2.563394991215893E-4	DESIGN
we do not actually propogate antlrexceptions as a cause so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9995526238353137	WITHOUT_CLASSIFICATION	4.4737616468633974E-4	DESIGN
we do not actually propogate antlrexceptions as a cause so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9995526238353137	WITHOUT_CLASSIFICATION	4.4737616468633974E-4	DESIGN
only needed during compilation phase	WITHOUT_CLASSIFICATION	0.9999541141285172	WITHOUT_CLASSIFICATION	4.588587148269179E-5	DESIGN
transform the tree.	WITHOUT_CLASSIFICATION	0.9998518392638579	WITHOUT_CLASSIFICATION	1.481607361421984E-4	DESIGN
parse the query string into an hql ast.	WITHOUT_CLASSIFICATION	0.999617918593026	WITHOUT_CLASSIFICATION	3.8208140697395604E-4	DESIGN
delegate to the queryloader	WITHOUT_CLASSIFICATION	0.9996914978481491	WITHOUT_CLASSIFICATION	3.085021518508515E-4	DESIGN
delegate to the queryloader	WITHOUT_CLASSIFICATION	0.9996914978481491	WITHOUT_CLASSIFICATION	3.085021518508515E-4	DESIGN
delegate to the queryloader	WITHOUT_CLASSIFICATION	0.9996914978481491	WITHOUT_CLASSIFICATION	3.085021518508515E-4	DESIGN
note ( max - 1 ) because first is zero-based while max is not	WITHOUT_CLASSIFICATION	0.9998875824949289	WITHOUT_CLASSIFICATION	1.1241750507110785E-4	DESIGN
-- package local methods for the queryloader delegate --	WITHOUT_CLASSIFICATION	0.9962915723047993	WITHOUT_CLASSIFICATION	0.0037084276952008065	DESIGN
if there are no collection fetches then no further checks are needed	WITHOUT_CLASSIFICATION	0.9998737960467372	WITHOUT_CLASSIFICATION	1.2620395326284057E-4	DESIGN
a shallow query is ok (although technically there should be no fetching here)	WITHOUT_CLASSIFICATION	0.9998429636604278	WITHOUT_CLASSIFICATION	1.5703633957226627E-4	DESIGN
should be the first but just to be safe	WITHOUT_CLASSIFICATION	0.9994004603893182	WITHOUT_CLASSIFICATION	5.99539610681795E-4	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9997641874388233	WITHOUT_CLASSIFICATION	2.3581256117671855E-4	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9997641874388233	WITHOUT_CLASSIFICATION	2.3581256117671855E-4	DESIGN
impl note allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.999449159111413	WITHOUT_CLASSIFICATION	5.508408885870401E-4	DESIGN
otherwise we have a non-scalar select with defined collection fetch(es). make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9995583311089173	WITHOUT_CLASSIFICATION	4.4166889108264093E-4	DESIGN
this is not strictly true. we actually just need to make sure that it is ordered by root-entity pk and that that order-by comes before any non-root-entity ordering	WITHOUT_CLASSIFICATION	0.6764131368519751	DESIGN	0.3235868631480248	WITHOUT_CLASSIFICATION
paramtranslations = new parametertranslationsimpl( collectedparameterspecifications )	WITHOUT_CLASSIFICATION	0.9997279771040128	WITHOUT_CLASSIFICATION	2.720228959871175E-4	DESIGN
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.99661762581588	WITHOUT_CLASSIFICATION	0.0033823741841200053	DESIGN
igndore it	WITHOUT_CLASSIFICATION	0.9997202816411007	WITHOUT_CLASSIFICATION	2.797183588992794E-4	DESIGN
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9902249009156215	WITHOUT_CLASSIFICATION	0.009775099084378505	DESIGN
[jsd] the fix for hhh-558	WITHOUT_CLASSIFICATION	0.9706949126051354	WITHOUT_CLASSIFICATION	0.0293050873948646	DESIGN
if the token can tell us if it could be an identifier	WITHOUT_CLASSIFICATION	0.9954354184676849	WITHOUT_CLASSIFICATION	0.004564581532315008	DESIGN
and the expected token type was an identifier then	WITHOUT_CLASSIFICATION	0.9999301154334154	WITHOUT_CLASSIFICATION	6.988456658466877E-5	DESIGN
use the token as an identifier.	WITHOUT_CLASSIFICATION	0.999929978748208	WITHOUT_CLASSIFICATION	7.002125179196559E-5	DESIGN
add the token to the ast.	WITHOUT_CLASSIFICATION	0.999809392213336	WITHOUT_CLASSIFICATION	1.9060778666402564E-4	DESIGN
(not (eq a b) ) => (ne a b)	WITHOUT_CLASSIFICATION	0.9161403648234517	WITHOUT_CLASSIFICATION	0.08385963517654835	DESIGN
(not (ne a b) ) => (eq a b)	WITHOUT_CLASSIFICATION	0.9161403648234517	WITHOUT_CLASSIFICATION	0.08385963517654835	DESIGN
(not (lt a b) ) => (ge a b)	WITHOUT_CLASSIFICATION	0.9161403648234517	WITHOUT_CLASSIFICATION	0.08385963517654835	DESIGN
(not (ge a b) ) => (lt a b)	WITHOUT_CLASSIFICATION	0.9161403648234517	WITHOUT_CLASSIFICATION	0.08385963517654835	DESIGN
(not (le a b) ) => (gt a b)	WITHOUT_CLASSIFICATION	0.9161403648234517	WITHOUT_CLASSIFICATION	0.08385963517654835	DESIGN
(not (like a b) ) => (not_like a b)	WITHOUT_CLASSIFICATION	0.9301895901353685	WITHOUT_CLASSIFICATION	0.06981040986463148	DESIGN
(not (not_like a b) ) => (like a b)	WITHOUT_CLASSIFICATION	0.9301895901353685	WITHOUT_CLASSIFICATION	0.06981040986463148	DESIGN
(not (is_not_null a b) ) => (is_null a b)	WITHOUT_CLASSIFICATION	0.9234485520235841	WITHOUT_CLASSIFICATION	0.07655144797641583	DESIGN
(not (between a b) ) => (not_between a b)	WITHOUT_CLASSIFICATION	0.9234485520235841	WITHOUT_CLASSIFICATION	0.07655144797641583	DESIGN
initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9977440389387281	WITHOUT_CLASSIFICATION	0.0022559610612718326	DESIGN
overriden to avoid system.exit	WITHOUT_CLASSIFICATION	0.99957065979706	WITHOUT_CLASSIFICATION	4.2934020294007876E-4	DESIGN
if if otherwise handle the error normally.	WITHOUT_CLASSIFICATION	0.998951702197691	WITHOUT_CLASSIFICATION	0.0010482978023089067	DESIGN
(not (not_between a b) ) => (between a b)	WITHOUT_CLASSIFICATION	0.9234485520235841	WITHOUT_CLASSIFICATION	0.07655144797641583	DESIGN
this can never happen because this rule will always eliminate the child not.case notreturn x.getfirstchild() (not (not x) ) => (x)	WITHOUT_CLASSIFICATION	0.9997481057633845	WITHOUT_CLASSIFICATION	2.518942366155201E-4	DESIGN
just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9949261877171941	WITHOUT_CLASSIFICATION	0.005073812282805884	DESIGN
(eq null b) => (is_null b)	WITHOUT_CLASSIFICATION	0.9998006178284761	WITHOUT_CLASSIFICATION	1.9938217152400006E-4	DESIGN
(eq a null) => (is_null a)	WITHOUT_CLASSIFICATION	0.9997491374456347	WITHOUT_CLASSIFICATION	2.5086255436538674E-4	DESIGN
note because we're using astutil.createparent() the tree must be created from the bottom up. is empty x => (exists (query (select_from (from x) ) ) )	WITHOUT_CLASSIFICATION	0.9994821157779238	WITHOUT_CLASSIFICATION	5.178842220761742E-4	DESIGN
add not if it's negated.	WITHOUT_CLASSIFICATION	0.9976197708685667	WITHOUT_CLASSIFICATION	0.0023802291314333093	DESIGN
create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999857582670325	WITHOUT_CLASSIFICATION	1.4241732967536703E-5	DESIGN
case 1 multi token keywords group by and order by the next token ( lt(2) ) should be 'by' otherwise this is just an ident.	WITHOUT_CLASSIFICATION	0.9462276014697784	WITHOUT_CLASSIFICATION	0.05377239853022154	DESIGN
case 2 the current token is after from and before '.'.	WITHOUT_CLASSIFICATION	0.9999133241446839	WITHOUT_CLASSIFICATION	8.667585531611144E-5	DESIGN
this handles hhh-354 where there is a strange property name in a where clause. if the lookahead contains a dot then something that isn't an ident	WITHOUT_CLASSIFICATION	0.9998449870109803	WITHOUT_CLASSIFICATION	1.550129890197419E-4	DESIGN
see if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999134530758381	WITHOUT_CLASSIFICATION	8.654692416193805E-5	DESIGN
set it!	WITHOUT_CLASSIFICATION	0.9996840507354766	WITHOUT_CLASSIFICATION	3.159492645234543E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9998111509702055	WITHOUT_CLASSIFICATION	1.8884902979455576E-4	DESIGN
strip the " where "	WITHOUT_CLASSIFICATION	0.9999804070448239	WITHOUT_CLASSIFICATION	1.9592955176023825E-5	DESIGN
don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9993462847516316	WITHOUT_CLASSIFICATION	6.5371524836849E-4	DESIGN
at the very least cleanup the data )	WITHOUT_CLASSIFICATION	0.9968141336609639	WITHOUT_CLASSIFICATION	0.00318586633903606	DESIGN
first save off the pertinent ids as the return value	WITHOUT_CLASSIFICATION	0.9999965047972328	WITHOUT_CLASSIFICATION	3.4952027671638513E-6	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999360116524927	WITHOUT_CLASSIFICATION	6.398834750727304E-5	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999360116524927	WITHOUT_CLASSIFICATION	6.398834750727304E-5	DESIGN
start performing the updates	WITHOUT_CLASSIFICATION	0.9999106252109472	WITHOUT_CLASSIFICATION	8.937478905274209E-5	DESIGN
first save off the pertinent ids saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999888092374584	WITHOUT_CLASSIFICATION	1.1190762541591907E-5	DESIGN
start performing the deletes	WITHOUT_CLASSIFICATION	0.9998495513691832	WITHOUT_CLASSIFICATION	1.5044863081688735E-4	DESIGN
otherwise everything ok.	WITHOUT_CLASSIFICATION	0.999382348917746	WITHOUT_CLASSIFICATION	6.17651082253925E-4	DESIGN
visit width-first then depth	WITHOUT_CLASSIFICATION	0.9996330360877339	WITHOUT_CLASSIFICATION	3.669639122660806E-4	DESIGN
if the types report logical equivalence return true	WITHOUT_CLASSIFICATION	0.9994405633304045	WITHOUT_CLASSIFICATION	5.594366695953968E-4	DESIGN
otherwise perform a "deep equivalence" check	WITHOUT_CLASSIFICATION	0.9794568106827541	WITHOUT_CLASSIFICATION	0.020543189317245886	DESIGN
if there is no where node make one.	WITHOUT_CLASSIFICATION	0.9999608602003688	WITHOUT_CLASSIFICATION	3.9139799631121706E-5	DESIGN
inject the where after the parent	WITHOUT_CLASSIFICATION	0.9999563893808916	WITHOUT_CLASSIFICATION	4.361061910827993E-5	DESIGN
never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9998704555768225	WITHOUT_CLASSIFICATION	1.2954442317738692E-4	DESIGN
moved here from selectclause [jsd]	WITHOUT_CLASSIFICATION	0.9949470567531553	WITHOUT_CLASSIFICATION	0.0050529432468447355	DESIGN
/	WITHOUT_CLASSIFICATION	0.9999108971982235	WITHOUT_CLASSIFICATION	8.910280177650566E-5	DESIGN
use the table fromelement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9998448708997439	WITHOUT_CLASSIFICATION	1.5512910025602928E-4	DESIGN
set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9994940220673025	WITHOUT_CLASSIFICATION	5.059779326975266E-4	DESIGN
if the uresolved property path isn't set yet just use the property name.	WITHOUT_CLASSIFICATION	0.9990395801472116	WITHOUT_CLASSIFICATION	9.604198527883935E-4	DESIGN
the 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9998524457181933	WITHOUT_CLASSIFICATION	1.475542818066692E-4	DESIGN
prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999965660506775	WITHOUT_CLASSIFICATION	3.4339493223994813E-6	DESIGN
prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999965660506775	WITHOUT_CLASSIFICATION	3.4339493223994813E-6	DESIGN
if this dot has already been resolved stop now.	WITHOUT_CLASSIFICATION	0.9974983196588494	WITHOUT_CLASSIFICATION	0.002501680341150718	DESIGN
if there is no data type for this node and we're at the end of the path (top most dot node) then this might be a java constant.	WITHOUT_CLASSIFICATION	0.9853204113197283	WITHOUT_CLASSIFICATION	0.014679588680271728	DESIGN
the property is a collection	WITHOUT_CLASSIFICATION	0.9965058525231825	WITHOUT_CLASSIFICATION	0.0034941474768174687	DESIGN
the property is a component	WITHOUT_CLASSIFICATION	0.9995068095084154	WITHOUT_CLASSIFICATION	4.931904915845981E-4	DESIGN
the property is another class..	WITHOUT_CLASSIFICATION	0.9995426663681732	WITHOUT_CLASSIFICATION	4.5733363182671555E-4	DESIGN
otherwise this is a primitive type.	WITHOUT_CLASSIFICATION	0.9944951936196612	WITHOUT_CLASSIFICATION	0.005504806380338689	DESIGN
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9994847437998623	WITHOUT_CLASSIFICATION	5.152562001377589E-4	DESIGN
this 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9991111564048893	WITHOUT_CLASSIFICATION	8.888435951106004E-4	DESIGN
always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9996229124913901	WITHOUT_CLASSIFICATION	3.770875086098421E-4	DESIGN
in non-select queries the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9997299469443138	WITHOUT_CLASSIFICATION	2.7005305568620253E-4	DESIGN
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999604191288591	WITHOUT_CLASSIFICATION	3.958087114075049E-5	DESIGN
this 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9991111564048893	WITHOUT_CLASSIFICATION	8.888435951106004E-4	DESIGN
even though we might find a pre-existing element by join path we may not be able to reuse it	WITHOUT_CLASSIFICATION	0.9998340066821457	WITHOUT_CLASSIFICATION	1.6599331785439924E-4	DESIGN
note addduplicatealias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9981666550737724	WITHOUT_CLASSIFICATION	0.0018333449262275105	DESIGN
if the from-clauses are the same we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9899621831541452	WITHOUT_CLASSIFICATION	0.010037816845854763	DESIGN
again null != null here	WITHOUT_CLASSIFICATION	0.9997480289876831	WITHOUT_CLASSIFICATION	2.519710123168765E-4	DESIGN
if this is an implied join in a from element then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9995219587359702	WITHOUT_CLASSIFICATION	4.780412640297492E-4	DESIGN
otherwise (subquery case) dont reuse the fromelement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999786063385573	WITHOUT_CLASSIFICATION	2.139366144272278E-5	DESIGN
we know only the lhs-hand type so use that	WITHOUT_CLASSIFICATION	0.9997897840988498	WITHOUT_CLASSIFICATION	2.1021590115017936E-4	DESIGN
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999896450171082	WITHOUT_CLASSIFICATION	1.0354982891811306E-5	DESIGN
only the identifier property field name can be a reference to the associated entity's pk	WITHOUT_CLASSIFICATION	0.9995343184068012	WITHOUT_CLASSIFICATION	4.656815931988109E-4	DESIGN
special shortcut for id properties skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9995104540309274	WITHOUT_CLASSIFICATION	4.895459690726114E-4	DESIGN
append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9996648650808901	WITHOUT_CLASSIFICATION	3.3513491910981577E-4	DESIGN
if the lhs is a collection use collectionpropertymapping	WITHOUT_CLASSIFICATION	0.9978990949680744	WITHOUT_CLASSIFICATION	0.0021009050319256563	DESIGN
tell the destination fromelement to 'includesubclasses'.	WITHOUT_CLASSIFICATION	0.9997668809120113	WITHOUT_CLASSIFICATION	2.3311908798874162E-4	DESIGN
use theta style (for regression) move the node up after the origin node.	WITHOUT_CLASSIFICATION	0.9831767664064622	WITHOUT_CLASSIFICATION	0.01682323359353777	DESIGN
don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9995559730148319	WITHOUT_CLASSIFICATION	4.440269851681773E-4	DESIGN
for expected parameter type injection we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9997287876696884	WITHOUT_CLASSIFICATION	2.712123303115758E-4	DESIGN
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.99994387872292	WITHOUT_CLASSIFICATION	5.61212770798652E-5	DESIGN
we have something like "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9996044906652233	WITHOUT_CLASSIFICATION	3.955093347768155E-4	DESIGN
we have something like "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9996044906652233	WITHOUT_CLASSIFICATION	3.955093347768155E-4	DESIGN
we know only the rhs-hand type so use that	WITHOUT_CLASSIFICATION	0.9997897840988498	WITHOUT_CLASSIFICATION	2.1021590115017936E-4	DESIGN
handle the (assumed) valid cases #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9918687292983119	WITHOUT_CLASSIFICATION	0.008131270701688089	DESIGN
one or the other needs to be a datetime for us to get into this method in the first place	WITHOUT_CLASSIFICATION	0.8366097137770677	WITHOUT_CLASSIFICATION	0.16339028622293222	DESIGN
#3 - note that this is also true of "datetime - param"	WITHOUT_CLASSIFICATION	0.9974889421700073	WITHOUT_CLASSIFICATION	0.002511057829992702	DESIGN
#2	WITHOUT_CLASSIFICATION	0.9997816504490556	WITHOUT_CLASSIFICATION	2.183495509443372E-4	DESIGN
generate the inner join -- the elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9998691927202442	WITHOUT_CLASSIFICATION	1.3080727975572283E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9998650944443891	WITHOUT_CLASSIFICATION	1.3490555561088374E-4	DESIGN
the 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999860023435507	WITHOUT_CLASSIFICATION	1.3997656449275458E-5	DESIGN
add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999809443421616	WITHOUT_CLASSIFICATION	1.905565783837538E-5	DESIGN
sometimes use the element table alias sometimes use the umm collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9995760668597541	WITHOUT_CLASSIFICATION	4.2393314024591E-4	DESIGN
now set the text for this node. it should be the element columns.	WITHOUT_CLASSIFICATION	0.9706782670805865	WITHOUT_CLASSIFICATION	0.029321732919413524	DESIGN
get the function return value type based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999875695649999	WITHOUT_CLASSIFICATION	1.243043500007345E-5	DESIGN
this will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9991635228636645	WITHOUT_CLASSIFICATION	8.364771363354107E-4	DESIGN
mutation depends on the types of nodes invloved	WITHOUT_CLASSIFICATION	0.998435300293247	WITHOUT_CLASSIFICATION	0.0015646997067529879	DESIGN
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding	WITHOUT_CLASSIFICATION	0.9243494566761853	WITHOUT_CLASSIFICATION	0.07565054332381467	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999622603147765	WITHOUT_CLASSIFICATION	3.773968522348948E-5	DESIGN
generated select expressions are already resolved nothing to do.	WITHOUT_CLASSIFICATION	0.9890391522367332	WITHOUT_CLASSIFICATION	0.010960847763266755	DESIGN
the path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9998700946916479	WITHOUT_CLASSIFICATION	1.2990530835210073E-4	DESIGN
the hql class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999337045894733	WITHOUT_CLASSIFICATION	6.629541052676001E-5	DESIGN
associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9996233564350702	WITHOUT_CLASSIFICATION	3.766435649297578E-4	DESIGN
try the parent fromclause	WITHOUT_CLASSIFICATION	0.9999377592841557	WITHOUT_CLASSIFICATION	6.224071584436821E-5	DESIGN
add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9996513625634005	WITHOUT_CLASSIFICATION	3.4863743659960364E-4	DESIGN
make sure that all from elements registered with this from clause are actually in the ast.	WITHOUT_CLASSIFICATION	0.9987919219652194	WITHOUT_CLASSIFICATION	0.0012080780347807215	DESIGN
invoke setscalarcolumntext on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999291097956747	WITHOUT_CLASSIFICATION	7.089020432535243E-5	DESIGN
collect the select expressions skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999919390498113	WITHOUT_CLASSIFICATION	8.06095018867941E-6	DESIGN
return an empty type array	WITHOUT_CLASSIFICATION	0.9991301192663409	WITHOUT_CLASSIFICATION	8.69880733659087E-4	DESIGN
constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9986719632467769	WITHOUT_CLASSIFICATION	0.0013280367532231478	DESIGN
this is the exception returned by reflecthelper.getconstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999370898910261	WITHOUT_CLASSIFICATION	6.291010897377798E-5	DESIGN
if there is no order by make one	WITHOUT_CLASSIFICATION	0.9999791449946506	WITHOUT_CLASSIFICATION	2.0855005349408585E-5	DESIGN
find the where if there is no where find the from	WITHOUT_CLASSIFICATION	0.9999830907661532	WITHOUT_CLASSIFICATION	1.6909233846696656E-5	DESIGN
now inject the newly built order by into the tree	WITHOUT_CLASSIFICATION	0.999134290506423	WITHOUT_CLASSIFICATION	8.6570949357698E-4	DESIGN
parametercontainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998956376091365	WITHOUT_CLASSIFICATION	1.0436239086355073E-4	DESIGN
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999763827494785	WITHOUT_CLASSIFICATION	2.361725052146488E-5	DESIGN
render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9913283966675046	WITHOUT_CLASSIFICATION	0.008671603332495396	DESIGN
class names in the from clause result in a joinsequence (the old fromparser does this).	WITHOUT_CLASSIFICATION	0.9999581508897232	WITHOUT_CLASSIFICATION	4.184911027675808E-5	DESIGN
for many-to-many joins use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.998768607985865	WITHOUT_CLASSIFICATION	0.001231392014135095	DESIGN
otherwise use the property mapping.	WITHOUT_CLASSIFICATION	0.9988557046618608	WITHOUT_CLASSIFICATION	0.0011442953381391795	DESIGN
should be safe to only ever expect entitypersister references here	WITHOUT_CLASSIFICATION	0.9997274370760549	WITHOUT_CLASSIFICATION	2.725629239450647E-4	DESIGN
if the property is a special collection property name return a collectionpropertymapping.	WITHOUT_CLASSIFICATION	0.9994821654070049	WITHOUT_CLASSIFICATION	5.178345929951643E-4	DESIGN
collection of components.	WITHOUT_CLASSIFICATION	0.9993062268766918	WITHOUT_CLASSIFICATION	6.937731233081425E-4	DESIGN
make sure the lhs is "assignable"	WITHOUT_CLASSIFICATION	0.9996816290773296	WITHOUT_CLASSIFICATION	3.1837092267035196E-4	DESIGN
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9990466380756401	WITHOUT_CLASSIFICATION	9.533619243597924E-4	DESIGN
register the fromelement with the from clause now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999215015522585	WITHOUT_CLASSIFICATION	7.849844774156998E-5	DESIGN
currently allowed	WITHOUT_CLASSIFICATION	0.9996700266387047	WITHOUT_CLASSIFICATION	3.299733612952458E-4	DESIGN
hhh-276 implied joins in a subselect where clause - the destination needs to be added to the destination's from clause. not sure if this is will fix everything but it works.	WITHOUT_CLASSIFICATION	0.8055524283423998	WITHOUT_CLASSIFICATION	0.19444757165760024	DESIGN
return classalias == null ? classname classalias	WITHOUT_CLASSIFICATION	0.9989177110507442	WITHOUT_CLASSIFICATION	0.001082288949255735	DESIGN
this is an explicit from element.	WITHOUT_CLASSIFICATION	0.995314346785279	WITHOUT_CLASSIFICATION	0.004685653214721114	DESIGN
parametercontainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998956376091365	WITHOUT_CLASSIFICATION	1.0436239086355073E-4	DESIGN
fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9224071309223302	WITHOUT_CLASSIFICATION	0.07759286907766977	DESIGN
if it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999959699315633	WITHOUT_CLASSIFICATION	4.030068436731153E-6	DESIGN
since this is an explicit from element it can't be implied in the from clause.	WITHOUT_CLASSIFICATION	0.9997055608781502	WITHOUT_CLASSIFICATION	2.9443912184971886E-4	DESIGN
do nothing eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9996868923138035	WITHOUT_CLASSIFICATION	3.131076861965098E-4	DESIGN
propertyname refers to something like collection.size	WITHOUT_CLASSIFICATION	0.9994693679517722	WITHOUT_CLASSIFICATION	5.306320482278095E-4	DESIGN
property name is a sub-path of a component	WITHOUT_CLASSIFICATION	0.9993055371832577	WITHOUT_CLASSIFICATION	6.944628167423895E-4	DESIGN
always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9996229124913901	WITHOUT_CLASSIFICATION	3.770875086098421E-4	DESIGN
nothing to do even if the operand is a parameter no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.8583890132922982	WITHOUT_CLASSIFICATION	0.1416109867077017	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999622603147765	WITHOUT_CLASSIFICATION	3.773968522348948E-5	DESIGN
dotnode uses null here	WITHOUT_CLASSIFICATION	0.9979598111934772	WITHOUT_CLASSIFICATION	0.0020401888065227926	DESIGN
we represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9996973938771975	WITHOUT_CLASSIFICATION	3.026061228024905E-4	DESIGN
we are the lhs of the dot representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9995996330304587	WITHOUT_CLASSIFICATION	4.00366969541232E-4	DESIGN
we are the rhs of the dot representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9995342199984731	WITHOUT_CLASSIFICATION	4.6578000152693613E-4	DESIGN
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9981021952698009	WITHOUT_CLASSIFICATION	0.0018978047301990335	DESIGN
early exit!!! return so the resolve call explicitly coming from dotnode can resolve this	WITHOUT_CLASSIFICATION	0.9991867658228788	WITHOUT_CLASSIFICATION	8.132341771211198E-4	DESIGN
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9796472864693638	WITHOUT_CLASSIFICATION	0.0203527135306362	DESIGN
just ignore it for now it'll get resolved later	WITHOUT_CLASSIFICATION	0.9808069545773678	WITHOUT_CLASSIFICATION	0.019193045422632265	DESIGN
this is not actually a constant but a reference to from element.	WITHOUT_CLASSIFICATION	0.8358966199540329	WITHOUT_CLASSIFICATION	0.16410338004596714	DESIGN
check to see if our "proppath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.995719437301002	WITHOUT_CLASSIFICATION	0.004280562698998019	DESIGN
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9998499567592333	WITHOUT_CLASSIFICATION	1.5004324076666627E-4	DESIGN
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.8480296366096347	WITHOUT_CLASSIFICATION	0.15197036339036538	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9821010330637312	WITHOUT_CLASSIFICATION	0.017898966936268877	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9821010330637312	WITHOUT_CLASSIFICATION	0.017898966936268877	DESIGN
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9744514731837862	WITHOUT_CLASSIFICATION	0.025548526816213783	DESIGN
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9970095403334925	WITHOUT_CLASSIFICATION	0.0029904596665074447	DESIGN
do not over-write the column text as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.999909129424501	WITHOUT_CLASSIFICATION	9.087057549892223E-5	DESIGN
for some reason the antlr.commonast initialization routines force this method to get called twice. the first time with an empty string	WITHOUT_CLASSIFICATION	0.9999907010102085	WITHOUT_CLASSIFICATION	9.29898979156514E-6	DESIGN
look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999841861569904	WITHOUT_CLASSIFICATION	1.5813843009651227E-5	DESIGN
add to the query spaces.	WITHOUT_CLASSIFICATION	0.9998438946491895	WITHOUT_CLASSIFICATION	1.5610535081039177E-4	DESIGN
if the from element isn't in the same clause create a new from element.	WITHOUT_CLASSIFICATION	0.9977382912014601	WITHOUT_CLASSIFICATION	0.002261708798539889	DESIGN
this is the root level node. generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9983552456250449	WITHOUT_CLASSIFICATION	0.001644754374955099	DESIGN
correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ansi-style join	WITHOUT_CLASSIFICATION	0.9999425093946138	WITHOUT_CLASSIFICATION	5.749060538619424E-5	DESIGN
super-duper-classic-parser-regression-testing-mojo-magic	WITHOUT_CLASSIFICATION	0.9995866341247203	WITHOUT_CLASSIFICATION	4.1336587527976095E-4	DESIGN
a collection of entities	WITHOUT_CLASSIFICATION	0.99607933979345	WITHOUT_CLASSIFICATION	0.003920660206549938	DESIGN
a collection of components	WITHOUT_CLASSIFICATION	0.9971791800796368	WITHOUT_CLASSIFICATION	0.0028208199203632036	DESIGN
a collection of scalar elements	WITHOUT_CLASSIFICATION	0.9986716394744747	WITHOUT_CLASSIFICATION	0.0013283605255252594	DESIGN
according to both the ansi-sql and ejb3 specs trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the sql spec <trim function> = trim <left paren> <trim operands> <right paren> <trim operands> = [ [ <trim specification> ] [ <trim character> ] from ] <trim source> <trim specification> = leading | trailing | both if only <trim specification> is omitted both is assumed if <trim character> is omitted space is assumed	WITHOUT_CLASSIFICATION	0.9999999998168185	WITHOUT_CLASSIFICATION	1.8318144559548195E-10	DESIGN
don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9992227248095965	WITHOUT_CLASSIFICATION	7.772751904035135E-4	DESIGN
treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9996731895000673	WITHOUT_CLASSIFICATION	3.2681049993265655E-4	DESIGN
( implied && dotnode.usethetastyleimplicitjoins ) ) {	WITHOUT_CLASSIFICATION	0.9991645674813054	WITHOUT_CLASSIFICATION	8.354325186944538E-4	DESIGN
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9162257534205925	WITHOUT_CLASSIFICATION	0.08377424657940742	DESIGN
create the from element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999913712484902	WITHOUT_CLASSIFICATION	8.628751509710218E-6	DESIGN
if the join is implied then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999150157028297	WITHOUT_CLASSIFICATION	8.498429717039391E-5	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993508158155309	WITHOUT_CLASSIFICATION	6.491841844691512E-4	DESIGN
the associated entity is implied but it must be included in the from. the collection alias is the role.	WITHOUT_CLASSIFICATION	0.9998765503038479	WITHOUT_CLASSIFICATION	1.234496961521174E-4	DESIGN
tag this node as a join. don't include subclasses in the join. this is a clollection join.	WITHOUT_CLASSIFICATION	0.9997272822038366	WITHOUT_CLASSIFICATION	2.7271779616348866E-4	DESIGN
get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999180688905625	WITHOUT_CLASSIFICATION	8.193110943753457E-5	DESIGN
origin path implied columns classalias	WITHOUT_CLASSIFICATION	0.9999251005809542	WITHOUT_CLASSIFICATION	7.489941904580091E-5	DESIGN
implied	WITHOUT_CLASSIFICATION	0.9997241667668046	WITHOUT_CLASSIFICATION	2.7583323319534586E-4	DESIGN
for implied many-to-many just add the end join.	WITHOUT_CLASSIFICATION	0.9992874701824827	WITHOUT_CLASSIFICATION	7.125298175173254E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993508158155309	WITHOUT_CLASSIFICATION	6.491841844691512E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993508158155309	WITHOUT_CLASSIFICATION	6.491841844691512E-4	DESIGN
the standard sql function name is current_timestamp	WITHOUT_CLASSIFICATION	0.9999878241516343	WITHOUT_CLASSIFICATION	1.2175848365561825E-5	DESIGN
this causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9495211337037477	WITHOUT_CLASSIFICATION	0.050478866296252194	DESIGN
private type[] sqlresulttypes	WITHOUT_CLASSIFICATION	0.9967830021836416	WITHOUT_CLASSIFICATION	0.0032169978163584544	DESIGN
frontbase has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9998543792633904	WITHOUT_CLASSIFICATION	1.4562073660967476E-4	DESIGN
the types represented in the sql result set. @return the types represented in the sql result set.	WITHOUT_CLASSIFICATION	0.9998987557338742	WITHOUT_CLASSIFICATION	1.0124426612579356E-4	DESIGN
public type[] getsqlresulttypes() {return sqlresulttypes}	WITHOUT_CLASSIFICATION	0.9996263350785948	WITHOUT_CLASSIFICATION	3.73664921405183E-4	DESIGN
first collect all of the select expressions. note this must be done before invoking setscalarcolumntext() because setscalarcolumntext() changes the ast!!!	WITHOUT_CLASSIFICATION	0.9982111621002772	WITHOUT_CLASSIFICATION	0.0017888378997228994	DESIGN
first allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9738077432920821	WITHOUT_CLASSIFICATION	0.026192256707917985	DESIGN
sqlresulttypelist.addall( constructorargumenttypelist )	WITHOUT_CLASSIFICATION	0.9987870645387554	WITHOUT_CLASSIFICATION	0.0012129354612445574	DESIGN
if the data type is not an association type it could not have been in the from clause.	WITHOUT_CLASSIFICATION	0.9834538792696534	WITHOUT_CLASSIFICATION	0.016546120730346565	DESIGN
sqlresulttypelist.add( type )	WITHOUT_CLASSIFICATION	0.9958244837541153	WITHOUT_CLASSIFICATION	0.004175516245884735	DESIGN
always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9979880280240446	WITHOUT_CLASSIFICATION	0.0020119719759553044	DESIGN
add the fetched entities	WITHOUT_CLASSIFICATION	0.99979317513672	WITHOUT_CLASSIFICATION	2.0682486328000947E-4	DESIGN
get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998425697928408	WITHOUT_CLASSIFICATION	1.574302071592698E-4	DESIGN
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997849296083325	WITHOUT_CLASSIFICATION	2.1507039166740525E-4	DESIGN
if there are any scalars (non-entities) selected render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999977394337433	WITHOUT_CLASSIFICATION	2.2605662567511293E-6	DESIGN
sqlresulttypelist	WITHOUT_CLASSIFICATION	0.9997859950597627	WITHOUT_CLASSIFICATION	2.1400494023734423E-4	DESIGN
arraylist sqlresulttypelist	WITHOUT_CLASSIFICATION	0.999580280249219	WITHOUT_CLASSIFICATION	4.19719750781077E-4	DESIGN
sqlresulttypes = ( type[] ) sqlresulttypelist.toarray( new type[sqlresulttypelist.size()] )	WITHOUT_CLASSIFICATION	0.9999089776242218	WITHOUT_CLASSIFICATION	9.102237577809772E-5	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998414114837771	WITHOUT_CLASSIFICATION	0.001585885162229012	DESIGN
todo	WITHOUT_CLASSIFICATION	0.7031845144940405	WITHOUT_CLASSIFICATION	0.2968154855059594	DESIGN
add the type to the list of returned sqlresulttypes.	WITHOUT_CLASSIFICATION	0.9997244041679961	WITHOUT_CLASSIFICATION	2.755958320038345E-4	DESIGN
generate an 2d array of column names the first dimension is parallel with the return types array. the second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999985207145006	WITHOUT_CLASSIFICATION	1.4792854993656808E-6	DESIGN
generate the select expression.	WITHOUT_CLASSIFICATION	0.9996098269331938	WITHOUT_CLASSIFICATION	3.9017306680623226E-4	DESIGN
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9922562716653187	WITHOUT_CLASSIFICATION	0.007743728334681276	DESIGN
skip 'distinct' and 'all' so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999907630728413	WITHOUT_CLASSIFICATION	9.236927158718611E-6	DESIGN
create sql_token nodes for the columns.	WITHOUT_CLASSIFICATION	0.9996894816554979	WITHOUT_CLASSIFICATION	3.1051834450211696E-4	DESIGN
generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9997127021337353	WITHOUT_CLASSIFICATION	2.872978662645953E-4	DESIGN
get the function name node.	WITHOUT_CLASSIFICATION	0.9999654120704441	WITHOUT_CLASSIFICATION	3.458792955584456E-5	DESIGN
method expressions in a select should always be considered scalar.	WITHOUT_CLASSIFICATION	0.7496167503269261	WITHOUT_CLASSIFICATION	0.25038324967307396	DESIGN
if this is 'elements' then create a new from element.	WITHOUT_CLASSIFICATION	0.9901833516430298	WITHOUT_CLASSIFICATION	0.009816648356970093	DESIGN
not elements(x)	WITHOUT_CLASSIFICATION	0.9986731439408636	WITHOUT_CLASSIFICATION	0.0013268560591363652	DESIGN
dialect function	WITHOUT_CLASSIFICATION	0.999907431287241	WITHOUT_CLASSIFICATION	9.256871275893999E-5	DESIGN
collection 'property function'	WITHOUT_CLASSIFICATION	0.9982277137062756	WITHOUT_CLASSIFICATION	0.0017722862937244014	DESIGN
if the constant is an ident figure out what it means	WITHOUT_CLASSIFICATION	0.9994672047115689	WITHOUT_CLASSIFICATION	5.327952884310231E-4	DESIGN
ident is a class alias in the from.	WITHOUT_CLASSIFICATION	0.9996766592347966	WITHOUT_CLASSIFICATION	3.233407652034546E-4	DESIGN
resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9970436202314503	WITHOUT_CLASSIFICATION	0.0029563797685495568	DESIGN
otherwise it's a literal.	WITHOUT_CLASSIFICATION	0.9953069564429319	WITHOUT_CLASSIFICATION	0.004693043557068175	DESIGN
the name of an entity class	WITHOUT_CLASSIFICATION	0.9998072533515889	WITHOUT_CLASSIFICATION	1.9274664841100237E-4	DESIGN
the class discriminator value	WITHOUT_CLASSIFICATION	0.9998594543827989	WITHOUT_CLASSIFICATION	1.4054561720105896E-4	DESIGN
chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9998444554460052	WITHOUT_CLASSIFICATION	1.5554455399478722E-4	DESIGN
add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999486039791468	WITHOUT_CLASSIFICATION	5.1396020853229503E-5	DESIGN
find or create the where clause	WITHOUT_CLASSIFICATION	0.9999740365735015	WITHOUT_CLASSIFICATION	2.596342649842637E-5	DESIGN
child == parent.getfirstchild()	WITHOUT_CLASSIFICATION	0.9999631295849577	WITHOUT_CLASSIFICATION	3.6870415042216854E-5	DESIGN
find or create the where clause	WITHOUT_CLASSIFICATION	0.9999740365735015	WITHOUT_CLASSIFICATION	2.596342649842637E-5	DESIGN
filter conditions need to be inserted before the hql where condition and the theta join node. this is because org.hibernate.loader.loader binds the filter parameters first then it binds all the hql query parameters see org.hibernate.loader.loader.processfilterparameters().	WITHOUT_CLASSIFICATION	0.9999996667998803	WITHOUT_CLASSIFICATION	3.3320011971718264E-7	DESIGN
put the filters node before the hql condition and theta joins	WITHOUT_CLASSIFICATION	0.9999824869114862	WITHOUT_CLASSIFICATION	1.7513088513762878E-5	DESIGN
add the current fragment to the filters node	WITHOUT_CLASSIFICATION	0.9971794399789915	WITHOUT_CLASSIFICATION	0.0028205600210084395	DESIGN
create a new theta_joins node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9998690960695732	WITHOUT_CLASSIFICATION	1.3090393042690265E-4	DESIGN
put the theta_joins node before the hql condition after the filters.	WITHOUT_CLASSIFICATION	0.9999604480968708	WITHOUT_CLASSIFICATION	3.955190312909748E-5	DESIGN
add the current fragment to the theta_joins node	WITHOUT_CLASSIFICATION	0.9953341360231438	WITHOUT_CLASSIFICATION	0.004665863976856279	DESIGN
first try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999917541448625	WITHOUT_CLASSIFICATION	8.245855137486665E-6	DESIGN
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9990288243858189	WITHOUT_CLASSIFICATION	9.711756141811481E-4	DESIGN
if that didn't work try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999539646979166	WITHOUT_CLASSIFICATION	4.603530208335187E-5	DESIGN
implicit joins use theta style (where pk = fk) explicit joins use join (after from)	WITHOUT_CLASSIFICATION	0.999907380350751	WITHOUT_CLASSIFICATION	9.261964924905346E-5	DESIGN
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999963621945953	WITHOUT_CLASSIFICATION	3.6378054045933778E-6	DESIGN
determine the type of the first argument	WITHOUT_CLASSIFICATION	0.9999653309683165	WITHOUT_CLASSIFICATION	3.466903168335099E-5	DESIGN
use the dot node to emit the first column name. create the column names folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999491817273415	WITHOUT_CLASSIFICATION	5.081827265860028E-5	DESIGN
note this simply constructs a "raw" sql_token representing the where fragment and injects this into the tree. this "works" however it is probably not the best long-term solution. at some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9989385500850447	DESIGN	0.0010614499149552605	WITHOUT_CLASSIFICATION
append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999838450386923	WITHOUT_CLASSIFICATION	1.615496130761973E-5	DESIGN
if the node has a first child recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999803111240412	WITHOUT_CLASSIFICATION	1.968887595882565E-5	DESIGN
if there is a second child (rhs) recurse into that child.	WITHOUT_CLASSIFICATION	0.9998133197036219	WITHOUT_CLASSIFICATION	1.8668029637808475E-4	DESIGN
iterate through the aliasjoinsequence pairs and generate sql token nodes.	WITHOUT_CLASSIFICATION	0.9996458599184178	WITHOUT_CLASSIFICATION	3.541400815821038E-4	DESIGN
if the from element represents a join_fragment and it is a theta-style join convert its type from join_fragment to from_fragment	WITHOUT_CLASSIFICATION	0.9999654989770881	WITHOUT_CLASSIFICATION	3.4501022911948327E-5	DESIGN
this is used during sqlgenerator processing	WITHOUT_CLASSIFICATION	0.8614092283806053	WITHOUT_CLASSIFICATION	0.13859077161939465	DESIGN
if there is a from fragment and the from element is an explicit then add the from part.	WITHOUT_CLASSIFICATION	0.9950648009723904	WITHOUT_CLASSIFICATION	0.004935199027609641	DESIGN
&& stringhelper.isnotempty( frag )	WITHOUT_CLASSIFICATION	0.998535089633311	WITHOUT_CLASSIFICATION	0.001464910366689112	DESIGN
the from fragment will probably begin with ' '. remove this if it is present.	WITHOUT_CLASSIFICATION	0.8492043125785588	WITHOUT_CLASSIFICATION	0.15079568742144114	DESIGN
this uses a pathexpressionparser but notice that compound paths are not valid only bare names and simple paths	WITHOUT_CLASSIFICATION	0.9985986719398217	WITHOUT_CLASSIFICATION	0.0014013280601783734	DESIGN
select p from p in class eg.person order by p.name p.address p	WITHOUT_CLASSIFICATION	0.9996009797785779	WITHOUT_CLASSIFICATION	3.9902022142210394E-4	DESIGN
the reason for this is sql doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9997763041755658	WITHOUT_CLASSIFICATION	2.236958244342155E-4	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9996093666584932	WITHOUT_CLASSIFICATION	3.9063334150674735E-4	DESIGN
default mode	WITHOUT_CLASSIFICATION	0.999811139236554	WITHOUT_CLASSIFICATION	1.8886076344615114E-4	DESIGN
queryjoinfragment join = q.createjoinfragment(usethetastylejoin)	WITHOUT_CLASSIFICATION	0.9999742809615917	WITHOUT_CLASSIFICATION	2.571903840824257E-5	DESIGN
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9996722924061394	WITHOUT_CLASSIFICATION	3.277075938606253E-4	DESIGN
after reset!	WITHOUT_CLASSIFICATION	0.9997696512239684	WITHOUT_CLASSIFICATION	2.303487760314846E-4	DESIGN
we don't need to worry about any condition in the on clause here (tofromfragmentstring) since anything in the on condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9997114237905874	WITHOUT_CLASSIFICATION	2.8857620941261477E-4	DESIGN
bit_length feels a bit broken to me. we have to cast to char in order to pass when a numeric value is supplied. but of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. jay nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999746044317384	WITHOUT_CLASSIFICATION	2.5395568261578147E-5	DESIGN
dotcount>=2	WITHOUT_CLASSIFICATION	0.9997859950597627	WITHOUT_CLASSIFICATION	2.1400494023734423E-4	DESIGN
do the corresponding rhs	WITHOUT_CLASSIFICATION	0.999752233668164	WITHOUT_CLASSIFICATION	2.4776633183597673E-4	DESIGN
if its "id"	WITHOUT_CLASSIFICATION	0.999960092170156	WITHOUT_CLASSIFICATION	3.99078298439006E-5	DESIGN
or its the id property name	WITHOUT_CLASSIFICATION	0.9998818442539222	WITHOUT_CLASSIFICATION	1.1815574607783614E-4	DESIGN
join = q.createjoinfragment(usethetastylejoin)	WITHOUT_CLASSIFICATION	0.9999742809615917	WITHOUT_CLASSIFICATION	2.571903840824257E-5	DESIGN
important!!	WITHOUT_CLASSIFICATION	0.9997859950597627	WITHOUT_CLASSIFICATION	2.1400494023734423E-4	DESIGN
string[] keycols = collpersister.getkeycolumnnames()	WITHOUT_CLASSIFICATION	0.9999327787369683	WITHOUT_CLASSIFICATION	6.722126303174454E-5	DESIGN
an association	WITHOUT_CLASSIFICATION	0.9998786595571022	WITHOUT_CLASSIFICATION	1.2134044289782765E-4	DESIGN
allow index() function	WITHOUT_CLASSIFICATION	0.9998571035867476	WITHOUT_CLASSIFICATION	1.4289641325237548E-4	DESIGN
here assume sqlserver2005 using snapshot isolation which does not have this problem	WITHOUT_CLASSIFICATION	0.9966073601468498	WITHOUT_CLASSIFICATION	0.0033926398531500894	DESIGN
the reason for this is sql doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9997763041755658	WITHOUT_CLASSIFICATION	2.236958244342155E-4	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9997859950597627	WITHOUT_CLASSIFICATION	2.1400494023734423E-4	DESIGN
collections of values	WITHOUT_CLASSIFICATION	0.9998724776413703	WITHOUT_CLASSIFICATION	1.2752235862974385E-4	DESIGN
opening paren in new foo ( )	WITHOUT_CLASSIFICATION	0.999311969040997	WITHOUT_CLASSIFICATION	6.88030959002967E-4	DESIGN
if we are inside a new result() but not inside a nested function	WITHOUT_CLASSIFICATION	0.9994855469752888	WITHOUT_CLASSIFICATION	5.144530247112477E-4	DESIGN
special case	WITHOUT_CLASSIFICATION	0.9997268471089301	WITHOUT_CLASSIFICATION	2.731528910699193E-4	DESIGN
the name of an sql function	WITHOUT_CLASSIFICATION	0.9999885981391216	WITHOUT_CLASSIFICATION	1.14018608784394E-5	DESIGN
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9988833160035366	WITHOUT_CLASSIFICATION	0.0011166839964632973	DESIGN
this is basically a copy/paste of orderbyparser might be worth refactoring	WITHOUT_CLASSIFICATION	0.7347973884216995	DESIGN	0.2652026115783006	WITHOUT_CLASSIFICATION
select p from p in class eg.person group by p.name p.address p	WITHOUT_CLASSIFICATION	0.998835353203696	WITHOUT_CLASSIFICATION	0.001164646796303927	DESIGN
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.998353876625717	WITHOUT_CLASSIFICATION	0.001646123374283047	DESIGN
register collection role	WITHOUT_CLASSIFICATION	0.9949090492930929	WITHOUT_CLASSIFICATION	0.005090950706907132	DESIGN
the keyword used to specify an identity column if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.999650143193506	WITHOUT_CLASSIFICATION	3.4985680649402635E-4	DESIGN
.getelementpropertymapping()	WITHOUT_CLASSIFICATION	0.9995435784311248	WITHOUT_CLASSIFICATION	4.5642156887515357E-4	DESIGN
crossjoins.add(name)	WITHOUT_CLASSIFICATION	0.9997859950597627	WITHOUT_CLASSIFICATION	2.1400494023734423E-4	DESIGN
ie no select clause in hql	WITHOUT_CLASSIFICATION	0.9998367990227167	WITHOUT_CLASSIFICATION	1.6320097728320245E-4	DESIGN
initialize the set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.999344824154186	WITHOUT_CLASSIFICATION	6.551758458139582E-4	DESIGN
ie. no select clause	WITHOUT_CLASSIFICATION	0.999940234684284	WITHOUT_CLASSIFICATION	5.976531571610263E-5	DESIGN
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9996336588764243	WITHOUT_CLASSIFICATION	3.663411235757021E-4	DESIGN
return the concrete type or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9985389558835605	WITHOUT_CLASSIFICATION	0.0014610441164396122	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9997859950597627	WITHOUT_CLASSIFICATION	2.1400494023734423E-4	DESIGN
q.addcollection(collectionname collectionrole)	WITHOUT_CLASSIFICATION	0.9995866341247203	WITHOUT_CLASSIFICATION	4.1336587527976095E-4	DESIGN
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9685048852157644	WITHOUT_CLASSIFICATION	0.03149511478423571	DESIGN
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9995335083242802	WITHOUT_CLASSIFICATION	4.6649167571978446E-4	DESIGN
unfortunately this stuff can't be cached because it is per-invocation not constant for the querytranslator instance	WITHOUT_CLASSIFICATION	0.9993054495914422	WITHOUT_CLASSIFICATION	6.945504085578453E-4	DESIGN
this is the legacy behaviour for hql queries	WITHOUT_CLASSIFICATION	0.9993709626036368	WITHOUT_CLASSIFICATION	6.29037396363188E-4	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9984769937763752	WITHOUT_CLASSIFICATION	0.0015230062236247861	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9984769937763752	WITHOUT_CLASSIFICATION	0.0015230062236247861	DESIGN
we have the form trim(trimsource) so we trim leading and trailing spaces early exit!!!!	WITHOUT_CLASSIFICATION	0.9999227065351861	WITHOUT_CLASSIFICATION	7.72934648138757E-5	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9984769937763752	WITHOUT_CLASSIFICATION	0.0015230062236247861	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9984769937763752	WITHOUT_CLASSIFICATION	0.0015230062236247861	DESIGN
need this since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9979187179718364	WITHOUT_CLASSIFICATION	0.0020812820281635113	DESIGN
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999965250828582	WITHOUT_CLASSIFICATION	3.474917141758388E-6	DESIGN
expressionterminators.add("") deliberately excluded	WITHOUT_CLASSIFICATION	0.9996215873187337	WITHOUT_CLASSIFICATION	3.7841268126625094E-4	DESIGN
expressionopeners.add("") deliberately excluded	WITHOUT_CLASSIFICATION	0.9996215873187337	WITHOUT_CLASSIFICATION	3.7841268126625094E-4	DESIGN
we have the form trim(from trimsource). this is functionally equivalent to trim(trimsource) early exit!!!!	WITHOUT_CLASSIFICATION	0.9989508354765653	WITHOUT_CLASSIFICATION	0.0010491645234347086	DESIGN
otherwise a trim-specification and/or a trim-character have been specified we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9945014624566585	WITHOUT_CLASSIFICATION	0.0054985375433415345	DESIGN
inside a between and expression	WITHOUT_CLASSIFICATION	0.9987327830120497	WITHOUT_CLASSIFICATION	0.0012672169879502967	DESIGN
were an odd or even number of nots encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999988056060121	WITHOUT_CLASSIFICATION	1.194393987839585E-6	DESIGN
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9993095877825687	WITHOUT_CLASSIFICATION	6.904122174313188E-4	DESIGN
cope with []	WITHOUT_CLASSIFICATION	0.999732831116238	WITHOUT_CLASSIFICATION	2.671688837620447E-4	DESIGN
cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9997698393103375	WITHOUT_CLASSIFICATION	2.3016068966259234E-4	DESIGN
note early return	WITHOUT_CLASSIFICATION	0.9997927204092673	WITHOUT_CLASSIFICATION	2.072795907327015E-4	DESIGN
cope with a subselect	WITHOUT_CLASSIFICATION	0.998033766935357	WITHOUT_CLASSIFICATION	0.0019662330646430977	DESIGN
cope with special cases of and not ()	WITHOUT_CLASSIFICATION	0.999993625347649	WITHOUT_CLASSIFICATION	6.374652350958776E-6	DESIGN
close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999800040475272	WITHOUT_CLASSIFICATION	1.999595247283834E-5	DESIGN
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9972978802255346	WITHOUT_CLASSIFICATION	0.00270211977446543	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999529589556394	WITHOUT_CLASSIFICATION	4.7041044360607865E-5	DESIGN
process a token mapping oo path expressions to sql expressions	WITHOUT_CLASSIFICATION	0.999896495155399	WITHOUT_CLASSIFICATION	1.0350484460094466E-4	DESIGN
open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9965777980821002	WITHOUT_CLASSIFICATION	0.0034222019178996844	DESIGN
cope with special cases of and not )	WITHOUT_CLASSIFICATION	0.9975554531314031	WITHOUT_CLASSIFICATION	0.0024445468685969233	DESIGN
the next one up must also be	WITHOUT_CLASSIFICATION	0.9997601414479456	WITHOUT_CLASSIFICATION	2.398585520544336E-4	DESIGN
add any joins	WITHOUT_CLASSIFICATION	0.9997945385862972	WITHOUT_CLASSIFICATION	2.0546141370282248E-4	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999529589556394	WITHOUT_CLASSIFICATION	4.7041044360607865E-5	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9996093666584932	WITHOUT_CLASSIFICATION	3.9063334150674735E-4	DESIGN
path expression	WITHOUT_CLASSIFICATION	0.9999722816780918	WITHOUT_CLASSIFICATION	2.7718321908236095E-5	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999301475084719	WITHOUT_CLASSIFICATION	6.985249152812443E-5	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996146284639148	WITHOUT_CLASSIFICATION	3.853715360851506E-4	DESIGN
anything else	WITHOUT_CLASSIFICATION	0.9999720306409702	WITHOUT_CLASSIFICATION	2.796935902979302E-5	DESIGN
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999255767006213	WITHOUT_CLASSIFICATION	7.442329937865688E-5	DESIGN
careful with this!	WITHOUT_CLASSIFICATION	0.999660094691592	WITHOUT_CLASSIFICATION	3.399053084079319E-4	DESIGN
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999069784335366	WITHOUT_CLASSIFICATION	9.302156646342103E-5	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999558359137856	WITHOUT_CLASSIFICATION	4.416408621443243E-5	DESIGN
notice no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999910885880863	WITHOUT_CLASSIFICATION	8.911411913721492E-6	DESIGN
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999340145051576	WITHOUT_CLASSIFICATION	6.598549484231425E-5	DESIGN
start by looking for hql keywords	WITHOUT_CLASSIFICATION	0.9997564096200949	WITHOUT_CLASSIFICATION	2.4359037990511197E-4	DESIGN
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9997460934579824	WITHOUT_CLASSIFICATION	2.539065420176099E-4	DESIGN
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9998681061066294	WITHOUT_CLASSIFICATION	1.318938933706135E-4	DESIGN
now anything that is not a hql keyword	WITHOUT_CLASSIFICATION	0.9987623723616964	WITHOUT_CLASSIFICATION	0.0012376276383035676	DESIGN
process the "old" hql style where aliases appear _first_ ie. using the in or in class constructions	WITHOUT_CLASSIFICATION	0.999964804155443	WITHOUT_CLASSIFICATION	3.519584455709549E-5	DESIGN
treat it as a classname	WITHOUT_CLASSIFICATION	0.9997055062712766	WITHOUT_CLASSIFICATION	2.944937287234074E-4	DESIGN
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999570729323355	WITHOUT_CLASSIFICATION	4.292706766452388E-5	DESIGN
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9992173327235554	WITHOUT_CLASSIFICATION	7.826672764447128E-4	DESIGN
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9998354948647302	WITHOUT_CLASSIFICATION	1.6450513526972263E-4	DESIGN
allow odmg oql style from person p p.cars c	WITHOUT_CLASSIFICATION	0.999617215766463	WITHOUT_CLASSIFICATION	3.827842335369134E-4	DESIGN
handle quoted strings	WITHOUT_CLASSIFICATION	0.9959196789293726	WITHOUT_CLASSIFICATION	0.004080321070627364	DESIGN
object insertions updates and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999949674743281	WITHOUT_CLASSIFICATION	5.032525671837199E-6	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999558359137856	WITHOUT_CLASSIFICATION	4.416408621443243E-5	DESIGN
ignore whitespace	WITHOUT_CLASSIFICATION	0.999873913364458	WITHOUT_CLASSIFICATION	1.260866355421277E-4	DESIGN
do replacements	WITHOUT_CLASSIFICATION	0.9996207160447452	WITHOUT_CLASSIFICATION	3.792839552548034E-4	DESIGN
handle hql2 collection syntax	WITHOUT_CLASSIFICATION	0.9969783677852025	WITHOUT_CLASSIFICATION	0.0030216322147975892	DESIGN
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9988544017881332	WITHOUT_CLASSIFICATION	0.0011455982118668002	DESIGN
abstractselectingdelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998956376091365	WITHOUT_CLASSIFICATION	1.0436239086355073E-4	DESIGN
hilo params	WITHOUT_CLASSIFICATION	0.9997940883169726	WITHOUT_CLASSIFICATION	2.059116830273748E-4	DESIGN
sql = query	WITHOUT_CLASSIFICATION	0.9999851476120388	WITHOUT_CLASSIFICATION	1.4852387961109333E-5	DESIGN
performance opt	WITHOUT_CLASSIFICATION	0.9995191269125594	WITHOUT_CLASSIFICATION	4.808730874406019E-4	DESIGN
sql = update	WITHOUT_CLASSIFICATION	0.9999984378941748	WITHOUT_CLASSIFICATION	1.5621058252350947E-6	DESIGN
hilo config	WITHOUT_CLASSIFICATION	0.999842430956996	WITHOUT_CLASSIFICATION	1.5756904300410224E-4	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9998928798013178	WITHOUT_CLASSIFICATION	1.0712019868216237E-4	DESIGN
don't allow comments on these insert statements as comments totally blow up the oracle getgeneratedkeys "support" (	WITHOUT_CLASSIFICATION	0.9999284479730157	WITHOUT_CLASSIFICATION	7.155202698427303E-5	DESIGN
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9982283304655678	WITHOUT_CLASSIFICATION	0.0017716695344322168	DESIGN
throw new identifiergenerationexception("save associated object first or disable cascade for inverse association")	WITHOUT_CLASSIFICATION	0.9999919282162998	WITHOUT_CLASSIFICATION	8.071783700218908E-6	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9997516257154543	WITHOUT_CLASSIFICATION	2.48374284545748E-4	DESIGN
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9998632369558811	WITHOUT_CLASSIFICATION	1.3676304411885175E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999940353713648	WITHOUT_CLASSIFICATION	5.9646286352064806E-5	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9998928798013178	WITHOUT_CLASSIFICATION	1.0712019868216237E-4	DESIGN
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.998843567811985	WITHOUT_CLASSIFICATION	0.0011564321880150287	DESIGN
column and table should be renamed but it would break the public api	WITHOUT_CLASSIFICATION	0.9980871681604957	WITHOUT_CLASSIFICATION	0.001912831839504282	DESIGN
loaded entity instances by entitykey	WITHOUT_CLASSIFICATION	0.9999654439005083	WITHOUT_CLASSIFICATION	3.455609949167937E-5	DESIGN
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.999756694965762	WITHOUT_CLASSIFICATION	2.4330503423790543E-4	DESIGN
the default	WITHOUT_CLASSIFICATION	0.9999487637701876	WITHOUT_CLASSIFICATION	5.123622981240521E-5	DESIGN
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence	WITHOUT_CLASSIFICATION	0.9955974110794634	WITHOUT_CLASSIFICATION	0.004402588920536648	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9997516257154543	WITHOUT_CLASSIFICATION	2.48374284545748E-4	DESIGN
identity map of collectionentry instances by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999807950718418	WITHOUT_CLASSIFICATION	1.9204928158250132E-5	DESIGN
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999542861042081	WITHOUT_CLASSIFICATION	4.571389579184581E-5	DESIGN
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999528040947182	WITHOUT_CLASSIFICATION	4.719590528182604E-5	DESIGN
configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997297408911419	WITHOUT_CLASSIFICATION	2.7025910885808353E-4	DESIGN
identifiergenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997463532490745	WITHOUT_CLASSIFICATION	2.5364675092552776E-4	DESIGN
persistentidentifiergenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997463532490745	WITHOUT_CLASSIFICATION	2.5364675092552776E-4	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999887575531434	WITHOUT_CLASSIFICATION	1.1242446856592722E-4	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999887575531434	WITHOUT_CLASSIFICATION	1.1242446856592722E-4	DESIGN
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9963779556010083	WITHOUT_CLASSIFICATION	0.003622044398991618	DESIGN
we just hit the last position	WITHOUT_CLASSIFICATION	0.9977715655144034	WITHOUT_CLASSIFICATION	0.0022284344855966532	DESIGN
scroll ahead	WITHOUT_CLASSIFICATION	0.9998112666125584	WITHOUT_CLASSIFICATION	1.887333874416102E-4	DESIGN
scroll backward	WITHOUT_CLASSIFICATION	0.9998198604814222	WITHOUT_CLASSIFICATION	1.801395185777188E-4	DESIGN
we have not yet hit the last result	WITHOUT_CLASSIFICATION	0.9998598587976397	WITHOUT_CLASSIFICATION	1.4014120236026078E-4	DESIGN
constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995858077126987	WITHOUT_CLASSIFICATION	4.141922873013284E-4	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997839964162275	WITHOUT_CLASSIFICATION	2.1600358377249965E-4	DESIGN
criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998984243720465	WITHOUT_CLASSIFICATION	1.0157562795356232E-4	DESIGN
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9991921944931421	WITHOUT_CLASSIFICATION	8.078055068579751E-4	DESIGN
inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999403736964257	WITHOUT_CLASSIFICATION	5.962630357424988E-5	DESIGN
constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995858077126987	WITHOUT_CLASSIFICATION	4.141922873013284E-4	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997839964162275	WITHOUT_CLASSIFICATION	2.1600358377249965E-4	DESIGN
criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998984243720465	WITHOUT_CLASSIFICATION	1.0157562795356232E-4	DESIGN
caches	WITHOUT_CLASSIFICATION	0.9997543180710643	WITHOUT_CLASSIFICATION	2.456819289357101E-4	DESIGN
generators	WITHOUT_CLASSIFICATION	0.9997543180710643	WITHOUT_CLASSIFICATION	2.456819289357101E-4	DESIGN
cache region is defined by the root-class in the hierarchy	WITHOUT_CLASSIFICATION	0.9999559363041729	WITHOUT_CLASSIFICATION	4.4063695827026946E-5	DESIGN
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999746984186951	WITHOUT_CLASSIFICATION	2.530158130492957E-5	DESIGN
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9995936952446528	WITHOUT_CLASSIFICATION	4.0630475534721253E-4	DESIGN
if we get here it is possible that we have a proxy 'in the way' of the merge map resolution note decided to put this here rather than in the above loop as i was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.992230502297491	WITHOUT_CLASSIFICATION	0.007769497702508926	DESIGN
jndi + serialization	WITHOUT_CLASSIFICATION	0.9999451390605331	WITHOUT_CLASSIFICATION	5.4860939466932525E-5	DESIGN
checking for named queries	WITHOUT_CLASSIFICATION	0.9996287295747722	WITHOUT_CLASSIFICATION	3.7127042522776477E-4	DESIGN
stats	WITHOUT_CLASSIFICATION	0.9997613140104776	WITHOUT_CLASSIFICATION	2.3868598952241776E-4	DESIGN
entitynotfounddelegate	WITHOUT_CLASSIFICATION	0.9995435784311248	WITHOUT_CLASSIFICATION	4.5642156887515357E-4	DESIGN
check named hql queries	WITHOUT_CLASSIFICATION	0.9991190746719874	WITHOUT_CLASSIFICATION	8.809253280126428E-4	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.7295193981458767	WITHOUT_CLASSIFICATION	0.2704806018541233	DESIGN
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9964096378862883	WITHOUT_CLASSIFICATION	0.003590362113711736	DESIGN
from javax.naming.referenceable	WITHOUT_CLASSIFICATION	0.9993489258211815	WITHOUT_CLASSIFICATION	6.510741788183822E-4	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999581777790048	WITHOUT_CLASSIFICATION	4.1822220995206856E-5	DESIGN
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9994737660759366	WITHOUT_CLASSIFICATION	5.262339240633813E-4	DESIGN
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999080771139888	WITHOUT_CLASSIFICATION	9.192288601118119E-5	DESIGN
note early exit	WITHOUT_CLASSIFICATION	0.9998844582321398	WITHOUT_CLASSIFICATION	1.1554176786017456E-4	DESIGN
for backward-compatability	WITHOUT_CLASSIFICATION	0.9996521337047294	WITHOUT_CLASSIFICATION	3.4786629527065293E-4	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9955157692591777	WITHOUT_CLASSIFICATION	0.004484230740822209	DESIGN
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9998674022408559	WITHOUT_CLASSIFICATION	1.3259775914399832E-4	DESIGN
in case we were deserialized in a different jvm look for an instance with the same name (alternatively we could do an actual jndi lookup here.)	WITHOUT_CLASSIFICATION	0.9517354236253741	WITHOUT_CLASSIFICATION	0.04826457637462596	DESIGN
must add to jndi _after_ adding to hashmaps because some jndi servers use serialization	WITHOUT_CLASSIFICATION	0.998627754777816	WITHOUT_CLASSIFICATION	0.0013722452221840054	DESIGN
make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9618692280708788	WITHOUT_CLASSIFICATION	0.0381307719291212	DESIGN
for each of the defined parameters make sure its value has been set	WITHOUT_CLASSIFICATION	0.999993609456255	WITHOUT_CLASSIFICATION	6.390543744945372E-6	DESIGN
we never need to apply locks to the sql	WITHOUT_CLASSIFICATION	0.9983166082871796	WITHOUT_CLASSIFICATION	0.0016833917128204342	DESIGN
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996004974822179	WITHOUT_CLASSIFICATION	3.995025177820671E-4	DESIGN
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996197912025485	WITHOUT_CLASSIFICATION	3.8020879745153877E-4	DESIGN
during deserialization we need to reconnect all proxies and collections to this session as well as the entityentry and collectionentry instances these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9452884456366054	WITHOUT_CLASSIFICATION	0.05471155436339464	DESIGN
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999774113921343	WITHOUT_CLASSIFICATION	2.258860786570269E-4	DESIGN
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999427502272659	WITHOUT_CLASSIFICATION	5.724977273410142E-5	DESIGN
final boolean forcecacherefresh	WITHOUT_CLASSIFICATION	0.9998576818664472	WITHOUT_CLASSIFICATION	1.423181335528946E-4	DESIGN
final boolean forcecacherefresh	WITHOUT_CLASSIFICATION	0.9998576818664472	WITHOUT_CLASSIFICATION	1.423181335528946E-4	DESIGN
first try to load it from the temp pc associated to this ss	WITHOUT_CLASSIFICATION	0.9999486176898291	WITHOUT_CLASSIFICATION	5.1382310170812886E-5	DESIGN
if the metadata allowed proxy creation and caller did not request forceful eager loading generate a proxy	WITHOUT_CLASSIFICATION	0.999993271748142	WITHOUT_CLASSIFICATION	6.728251858027549E-6	DESIGN
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9998940741766325	WITHOUT_CLASSIFICATION	1.0592582336765472E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9999108971982235	WITHOUT_CLASSIFICATION	8.910280177650566E-5	DESIGN
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9981410352126321	WITHOUT_CLASSIFICATION	0.0018589647873678856	DESIGN
after setting values to object entitymode	WITHOUT_CLASSIFICATION	0.9998900654625313	WITHOUT_CLASSIFICATION	1.099345374686732E-4	DESIGN
for ejb3	WITHOUT_CLASSIFICATION	0.9998127604327994	WITHOUT_CLASSIFICATION	1.8723956720045827E-4	DESIGN
just ignore	WITHOUT_CLASSIFICATION	0.9994364772023894	WITHOUT_CLASSIFICATION	5.635227976106364E-4	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9948694630773719	WITHOUT_CLASSIFICATION	0.0051305369226280605	DESIGN
saveorupdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997853364791727	WITHOUT_CLASSIFICATION	2.1466352082722532E-4	DESIGN
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997853364791727	WITHOUT_CLASSIFICATION	2.1466352082722532E-4	DESIGN
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997853364791727	WITHOUT_CLASSIFICATION	2.1466352082722532E-4	DESIGN
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997853364791727	WITHOUT_CLASSIFICATION	2.1466352082722532E-4	DESIGN
persistonflush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997853364791727	WITHOUT_CLASSIFICATION	2.1466352082722532E-4	DESIGN
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997853364791727	WITHOUT_CLASSIFICATION	2.1466352082722532E-4	DESIGN
saveorupdatecopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997853364791727	WITHOUT_CLASSIFICATION	2.1466352082722532E-4	DESIGN
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999761941249008	WITHOUT_CLASSIFICATION	2.3805875099202535E-4	DESIGN
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997853364791727	WITHOUT_CLASSIFICATION	2.1466352082722532E-4	DESIGN
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997853364791727	WITHOUT_CLASSIFICATION	2.1466352082722532E-4	DESIGN
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997853364791727	WITHOUT_CLASSIFICATION	2.1466352082722532E-4	DESIGN
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.999449607198645	WITHOUT_CLASSIFICATION	5.503928013551068E-4	DESIGN
this is an internal error of some sort	WITHOUT_CLASSIFICATION	0.9924109496790388	WITHOUT_CLASSIFICATION	0.00758905032096128	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9980341304197753	WITHOUT_CLASSIFICATION	0.0019658695802246247	DESIGN
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9998847126348517	WITHOUT_CLASSIFICATION	1.1528736514832813E-4	DESIGN
if it was previously unreferenced we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999445965860806	WITHOUT_CLASSIFICATION	5.5403413919466754E-5	DESIGN
not for internal use	WITHOUT_CLASSIFICATION	0.9949921333694172	WITHOUT_CLASSIFICATION	0.005007866630582856	DESIGN
otherwise we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9979951090546108	WITHOUT_CLASSIFICATION	0.0020048909453892817	DESIGN
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.7857878927021289	WITHOUT_CLASSIFICATION	0.21421210729787105	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9980341304197753	WITHOUT_CLASSIFICATION	0.0019658695802246247	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9980341304197753	WITHOUT_CLASSIFICATION	0.0019658695802246247	DESIGN
if it is initialized see if the underlying instance is contained since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9327116520989196	WITHOUT_CLASSIFICATION	0.06728834790108033	DESIGN
basically just an adapted copy of find(criteriaimpl)	WITHOUT_CLASSIFICATION	0.9987560005584766	WITHOUT_CLASSIFICATION	0.001243999441523471	DESIGN
it is possible for this method to be called during flush processing so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9974167654401778	WITHOUT_CLASSIFICATION	0.002583234559822219	DESIGN
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9985281755157709	WITHOUT_CLASSIFICATION	0.0014718244842291052	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9998111509702055	WITHOUT_CLASSIFICATION	1.8884902979455576E-4	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9955157692591777	WITHOUT_CLASSIFICATION	0.004484230740822209	DESIGN
we need to writeobject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9985926152364436	WITHOUT_CLASSIFICATION	0.0014073847635563575	DESIGN
the old-time stand-by	WITHOUT_CLASSIFICATION	0.9997608957297737	WITHOUT_CLASSIFICATION	2.3910427022636133E-4	DESIGN
parameter bind values	WITHOUT_CLASSIFICATION	0.9997134628911832	WITHOUT_CLASSIFICATION	2.8653710881672897E-4	DESIGN
parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9878614148039593	WITHOUT_CLASSIFICATION	0.012138585196040759	DESIGN
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9998952891360755	WITHOUT_CLASSIFICATION	1.0471086392453708E-4	DESIGN
execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993807989388959	WITHOUT_CLASSIFICATION	6.192010611041337E-4	DESIGN
we have a cglib enhanced entity	WITHOUT_CLASSIFICATION	0.9990300326687287	WITHOUT_CLASSIFICATION	9.699673312714134E-4	DESIGN
we have a cglib enhanced entity	WITHOUT_CLASSIFICATION	0.9990300326687287	WITHOUT_CLASSIFICATION	9.699673312714134E-4	DESIGN
we have a javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9990300326687287	WITHOUT_CLASSIFICATION	9.699673312714134E-4	DESIGN
we have a javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9990300326687287	WITHOUT_CLASSIFICATION	9.699673312714134E-4	DESIGN
fieldinterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998956376091365	WITHOUT_CLASSIFICATION	1.0436239086355073E-4	DESIGN
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981364150085582	WITHOUT_CLASSIFICATION	0.0018635849914418056	DESIGN
let's assume that there is only one lazy fetch group for now!	WITHOUT_CLASSIFICATION	0.9999985151295169	WITHOUT_CLASSIFICATION	1.4848704831351777E-6	DESIGN
fieldhandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998956376091365	WITHOUT_CLASSIFICATION	1.0436239086355073E-4	DESIGN
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9762850689077897	WITHOUT_CLASSIFICATION	0.02371493109221029	DESIGN
should probably no-op commit/rollback here at least in jta scenarios	WITHOUT_CLASSIFICATION	0.9693494599306363	WITHOUT_CLASSIFICATION	0.030650540069363772	DESIGN
base expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998166320326698	WITHOUT_CLASSIFICATION	1.8336796733016436E-4	DESIGN
various expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997666718645177	WITHOUT_CLASSIFICATION	2.3332813548230836E-4	DESIGN
explicitly perform no checking	WITHOUT_CLASSIFICATION	0.997393446698701	WITHOUT_CLASSIFICATION	0.002606553301299005	DESIGN
used from testsuite	WITHOUT_CLASSIFICATION	0.9351967561927645	WITHOUT_CLASSIFICATION	0.06480324380723539	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999007550174422	WITHOUT_CLASSIFICATION	9.924498255780747E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9989772430177805	WITHOUT_CLASSIFICATION	0.001022756982219523	DESIGN
register synch stats.connect()	WITHOUT_CLASSIFICATION	0.9996880344951303	WITHOUT_CLASSIFICATION	3.1196550486961344E-4	DESIGN
noncritical swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.998877535616061	WITHOUT_CLASSIFICATION	0.001122464383939021	DESIGN
calls executebatch()	WITHOUT_CLASSIFICATION	0.9997317917395887	WITHOUT_CLASSIFICATION	2.6820826041128957E-4	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999855288944711	WITHOUT_CLASSIFICATION	1.4471105528810263E-5	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999855288944711	WITHOUT_CLASSIFICATION	1.4471105528810263E-5	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999855288944711	WITHOUT_CLASSIFICATION	1.4471105528810263E-5	DESIGN
sybase driver (jconnect) throwing npe here in certain cases but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9991266273367209	WITHOUT_CLASSIFICATION	8.733726632791074E-4	DESIGN
see explanation above	WITHOUT_CLASSIFICATION	0.9996998654840186	WITHOUT_CLASSIFICATION	3.001345159814374E-4	DESIGN
if we are in the process of releasing no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.999918791022252	WITHOUT_CLASSIFICATION	8.120897774800172E-5	DESIGN
early exit!!!!	WITHOUT_CLASSIFICATION	0.9998112293765868	WITHOUT_CLASSIFICATION	1.887706234131113E-4	DESIGN
resultset impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999332160165583	WITHOUT_CLASSIFICATION	6.678398344177818E-5	DESIGN
resultset impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999332160165583	WITHOUT_CLASSIFICATION	6.678398344177818E-5	DESIGN
refer to comment in statefulpersistencecontext.addcollection()	WITHOUT_CLASSIFICATION	0.9998958140023544	WITHOUT_CLASSIFICATION	1.0418599764557963E-4	DESIGN
connectionmanager.callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997463532490745	WITHOUT_CLASSIFICATION	2.5364675092552776E-4	DESIGN
note success = false because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.999999097673949	WITHOUT_CLASSIFICATION	9.02326051081575E-7	DESIGN
we already have a callback registered either a local (org.hibernate.transaction) transaction has accepted callback responsibilities or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999263813885209	WITHOUT_CLASSIFICATION	7.361861147913471E-5	DESIGN
the configured transaction-factory says it only supports local callback mode so no sense attempting to register a jta synchronization	WITHOUT_CLASSIFICATION	0.9973048526133083	WITHOUT_CLASSIFICATION	0.0026951473866917955	DESIGN
transactions marked for rollback-only cause some tm impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9980740352714943	WITHOUT_CLASSIFICATION	0.0019259647285057241	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995876025319913	WITHOUT_CLASSIFICATION	4.1239746800864204E-4	DESIGN
postinitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999596259420148	WITHOUT_CLASSIFICATION	4.037405798516166E-5	DESIGN
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999012565193839	WITHOUT_CLASSIFICATION	9.874348061610743E-5	DESIGN
todo for 4.0 private static final logger log = loggerfactory.getlogger( sqlstatementlogger.class ) this is the legacy logging 'category'	WITHOUT_CLASSIFICATION	0.9443289106908608	WITHOUT_CLASSIFICATION	0.05567108930913922	DESIGN
note that for sequential scrolling we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9989534265575983	WITHOUT_CLASSIFICATION	0.0010465734424016	DESIGN
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.997748387559742	WITHOUT_CLASSIFICATION	0.002251612440257944	DESIGN
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9978722575185116	WITHOUT_CLASSIFICATION	0.0021277424814883884	DESIGN
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9998380170619615	WITHOUT_CLASSIFICATION	1.6198293803849274E-4	DESIGN
sequentially read the result set in reverse until we recognize a change in the key value. at that point we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999997911033758	WITHOUT_CLASSIFICATION	2.0889662417978577E-7	DESIGN
read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999998691217271	WITHOUT_CLASSIFICATION	1.3087827288948706E-7	DESIGN
finally read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999985433318437	WITHOUT_CLASSIFICATION	1.456668156306149E-6	DESIGN
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999967590994968	WITHOUT_CLASSIFICATION	3.2409005033206308E-6	DESIGN
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9997549081567284	WITHOUT_CLASSIFICATION	2.4509184327155476E-4	DESIGN
this is equivalent to the old behavior	WITHOUT_CLASSIFICATION	0.9996539796358678	WITHOUT_CLASSIFICATION	3.4602036413222865E-4	DESIGN
if null owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999584504638257	WITHOUT_CLASSIFICATION	4.1549536174377966E-5	DESIGN
final string querystring	WITHOUT_CLASSIFICATION	0.9998640646973903	WITHOUT_CLASSIFICATION	1.3593530260974667E-4	DESIGN
if it was a reference to self don't need to nullify unless we are using native id generation in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9989211886792582	WITHOUT_CLASSIFICATION	0.0010788113207418353	DESIGN
end of array start filling again from start	WITHOUT_CLASSIFICATION	0.9998073248576823	WITHOUT_CLASSIFICATION	1.926751423176639E-4	DESIGN
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to persistentcollection#endread) we scan the internal loadingcollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endread processing.	WITHOUT_CLASSIFICATION	0.914196223390054	WITHOUT_CLASSIFICATION	0.08580377660994608	DESIGN
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999577529074858	WITHOUT_CLASSIFICATION	4.2247092514141236E-5	DESIGN
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9983059948426583	WITHOUT_CLASSIFICATION	0.0016940051573417411	DESIGN
first we need to suspend any current jta transaction and obtain a jdbc connection	WITHOUT_CLASSIFICATION	0.9999007898407913	WITHOUT_CLASSIFICATION	9.92101592086265E-5	DESIGN
getresultlist(results)	WITHOUT_CLASSIFICATION	0.9995435784311248	WITHOUT_CLASSIFICATION	4.5642156887515357E-4	DESIGN
if we only returned one entity query by key is more efficient	WITHOUT_CLASSIFICATION	0.9998515612179423	WITHOUT_CLASSIFICATION	1.4843878205768652E-4	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9955368465821708	WITHOUT_CLASSIFICATION	0.004463153417829251	DESIGN
handle empty collection	WITHOUT_CLASSIFICATION	0.9867826316601136	WITHOUT_CLASSIFICATION	0.013217368339886385	DESIGN
else no collection element but also no owner	WITHOUT_CLASSIFICATION	0.9999817377487635	WITHOUT_CLASSIFICATION	1.8262251236480468E-5	DESIGN
handle empty collections	WITHOUT_CLASSIFICATION	0.9969549710594959	WITHOUT_CLASSIFICATION	0.0030450289405041277	DESIGN
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9433692922764041	WITHOUT_CLASSIFICATION	0.05663070772359601	DESIGN
validate() instances of validatable	WITHOUT_CLASSIFICATION	0.9997914652106639	WITHOUT_CLASSIFICATION	2.0853478933614757E-4	DESIGN
if we know there is exactly 1 row we can skip. it would be great if we could _always_ skip this it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9048368786625588	WITHOUT_CLASSIFICATION	0.09516312133744119	DESIGN
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9983887153429654	WITHOUT_CLASSIFICATION	0.0016112846570346723	DESIGN
null version means the object is in the process of being loaded somewhere else in the resultset	WITHOUT_CLASSIFICATION	0.9999927899762469	WITHOUT_CLASSIFICATION	7.210023753130553E-6	DESIGN
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.99477039391592	WITHOUT_CLASSIFICATION	0.00522960608407994	DESIGN
use the id passed in	WITHOUT_CLASSIFICATION	0.9997164973409184	WITHOUT_CLASSIFICATION	2.835026590816744E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9998622497531471	WITHOUT_CLASSIFICATION	1.377502468527866E-4	DESIGN
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9997167372963679	WITHOUT_CLASSIFICATION	2.8326270363208104E-4	DESIGN
no point doing this if none was requested	WITHOUT_CLASSIFICATION	0.9999470040390621	WITHOUT_CLASSIFICATION	5.299596093784823E-5	DESIGN
if the object is already loaded return the loaded one	WITHOUT_CLASSIFICATION	0.9999827760119668	WITHOUT_CLASSIFICATION	1.7223988033218105E-5	DESIGN
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9994488959686677	WITHOUT_CLASSIFICATION	5.511040313323387E-4	DESIGN
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9998040878776042	WITHOUT_CLASSIFICATION	1.959121223958155E-4	DESIGN
the load() which takes an entity does not pass an entityname	WITHOUT_CLASSIFICATION	0.999817339325713	WITHOUT_CLASSIFICATION	1.8266067428698596E-4	DESIGN
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9996941252739078	WITHOUT_CLASSIFICATION	3.058747260921633E-4	DESIGN
look for a proxy	WITHOUT_CLASSIFICATION	0.9999481998348959	WITHOUT_CLASSIFICATION	5.1800165104206896E-5	DESIGN
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9988958347445226	WITHOUT_CLASSIFICATION	0.0011041652554774617	DESIGN
its the given optional object	WITHOUT_CLASSIFICATION	0.9999122905882422	WITHOUT_CLASSIFICATION	8.770941175781806E-5	DESIGN
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9926627127658494	WITHOUT_CLASSIFICATION	0.007337287234150626	DESIGN
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9995412209574047	WITHOUT_CLASSIFICATION	4.5877904259526567E-4	DESIGN
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9994635584294064	WITHOUT_CLASSIFICATION	5.364415705937285E-4	DESIGN
will be ignored using the existing entry instead	WITHOUT_CLASSIFICATION	0.9998397720965452	WITHOUT_CLASSIFICATION	1.6022790345484645E-4	DESIGN
key is an entity involved with the operation performed by the listener value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999799724963	WITHOUT_CLASSIFICATION	2.0027503641220246E-8	DESIGN
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.991938417437291	WITHOUT_CLASSIFICATION	0.008061582562709025	DESIGN
get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9996296132147323	WITHOUT_CLASSIFICATION	3.703867852676063E-4	DESIGN
ok in normal hibernate usage to delete a detached entity jpa however forbids it thus this is a hook for hem to affect this behavior	WITHOUT_CLASSIFICATION	0.9991243451341819	WITHOUT_CLASSIFICATION	8.756548658179563E-4	DESIGN
the entry will be removed after the flush and will no longer override the stale snapshot this is now handled by removeentity() in entitydeleteaction persistencecontext.removedatabasesnapshot(key)	WITHOUT_CLASSIFICATION	0.9968116721158071	WITHOUT_CLASSIFICATION	0.003188327884192827	DESIGN
addinitializedcollection(collection persister id)	WITHOUT_CLASSIFICATION	0.9988252578164449	WITHOUT_CLASSIFICATION	0.0011747421835551451	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9998193397490085	WITHOUT_CLASSIFICATION	1.8066025099154043E-4	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9998193397490085	WITHOUT_CLASSIFICATION	1.8066025099154043E-4	DESIGN
|| oj.getjoinable().consumescollectionalias()	WITHOUT_CLASSIFICATION	0.9995972656873707	WITHOUT_CLASSIFICATION	4.0273431262928484E-4	DESIGN
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9536662973042083	WITHOUT_CLASSIFICATION	0.04633370269579179	DESIGN
code to handle subclasses of topclass	WITHOUT_CLASSIFICATION	0.994863982748155	WITHOUT_CLASSIFICATION	0.0051360172518450445	DESIGN
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999257070551303	WITHOUT_CLASSIFICATION	7.429294486962824E-5	DESIGN
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9998873169378061	WITHOUT_CLASSIFICATION	1.1268306219389578E-4	DESIGN
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9941460464790912	WITHOUT_CLASSIFICATION	0.005853953520908851	DESIGN
synchronized to avoid multi-thread access issues defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999556335669714	WITHOUT_CLASSIFICATION	4.436643302860693E-5	DESIGN
allows various loaders (ok mainly the queryloader ) to check whether scrolling of their result set should be allowed. by default it is allowed.	WITHOUT_CLASSIFICATION	0.9991916209078958	WITHOUT_CLASSIFICATION	8.083790921042448E-4	DESIGN
before adding to collection!	WITHOUT_CLASSIFICATION	0.999866315689962	WITHOUT_CLASSIFICATION	1.336843100381198E-4	DESIGN
if the current depth is 0 the root thing being loaded is the many-to-many collection itself. here it is alright to use an inner join	WITHOUT_CLASSIFICATION	0.9999912163622187	WITHOUT_CLASSIFICATION	8.783637781325525E-6	DESIGN
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999977645954261	WITHOUT_CLASSIFICATION	2.235404573767046E-6	DESIGN
simple because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element	WITHOUT_CLASSIFICATION	0.9997694337869778	WITHOUT_CLASSIFICATION	2.305662130221344E-4	DESIGN
a composite key	WITHOUT_CLASSIFICATION	0.9996204371411374	WITHOUT_CLASSIFICATION	3.7956285886266237E-4	DESIGN
if no batch use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9998998997973082	WITHOUT_CLASSIFICATION	1.0010020269186906E-4	DESIGN
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9750606334542474	WITHOUT_CLASSIFICATION	0.024939366545752625	DESIGN
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9985417960161102	WITHOUT_CLASSIFICATION	0.0014582039838898406	DESIGN
&& etype.isreferencetoprimarykey()	WITHOUT_CLASSIFICATION	0.9995006785633063	WITHOUT_CLASSIFICATION	4.993214366937333E-4	DESIGN
it might still need to apply a collection ordering based on a many-to-many defined order-by	WITHOUT_CLASSIFICATION	0.638475817666427	DESIGN	0.3615241823335729	WITHOUT_CLASSIFICATION
if a composite key use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching todo unnecessary for databases with ansi-style joins	WITHOUT_CLASSIFICATION	0.8532636356494978	WITHOUT_CLASSIFICATION	0.14673636435050225	DESIGN
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9981037662914153	WITHOUT_CLASSIFICATION	0.0018962337085847603	DESIGN
we found it	WITHOUT_CLASSIFICATION	0.9997601906939758	WITHOUT_CLASSIFICATION	2.3980930602424347E-4	DESIGN
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999364617693148	WITHOUT_CLASSIFICATION	6.353823068510015E-5	DESIGN
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.995705247651661	WITHOUT_CLASSIFICATION	0.004294752348338962	DESIGN
note unlike all other loaders this one is not multithreaded or cacheable!!	WITHOUT_CLASSIFICATION	0.9924780202547095	WITHOUT_CLASSIFICATION	0.007521979745290488	DESIGN
the user visible aliases which are unknown to the superclass these are not the actual "physical" sql aliases	WITHOUT_CLASSIFICATION	0.9999970296099256	WITHOUT_CLASSIFICATION	2.9703900743317093E-6	DESIGN
root entity comes last	WITHOUT_CLASSIFICATION	0.999715418613515	WITHOUT_CLASSIFICATION	2.845813864849514E-4	DESIGN
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.999765550468072	WITHOUT_CLASSIFICATION	2.3444953192806414E-4	DESIGN
alias may be null early exit	WITHOUT_CLASSIFICATION	0.9998126006891793	WITHOUT_CLASSIFICATION	1.8739931082066143E-4	DESIGN
if it is a compound path	WITHOUT_CLASSIFICATION	0.9997688342426718	WITHOUT_CLASSIFICATION	2.3116575732830396E-4	DESIGN
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9998764090115894	WITHOUT_CLASSIFICATION	1.2359098841054482E-4	DESIGN
if its the root criteria we are done	WITHOUT_CLASSIFICATION	0.9999010648871436	WITHOUT_CLASSIFICATION	9.89351128564051E-5	DESIGN
otherwise recurse	WITHOUT_CLASSIFICATION	0.9997129578869719	WITHOUT_CLASSIFICATION	2.870421130280292E-4	DESIGN
the criteria instance	WITHOUT_CLASSIFICATION	0.9992775907819017	WITHOUT_CLASSIFICATION	7.224092180982695E-4	DESIGN
the entity name	WITHOUT_CLASSIFICATION	0.9998684671237169	WITHOUT_CLASSIFICATION	1.3153287628309444E-4	DESIGN
not found in inner query try the outer query	WITHOUT_CLASSIFICATION	0.9999625288444979	WITHOUT_CLASSIFICATION	3.747115550218284E-5	DESIGN
not found in inner query try the outer query	WITHOUT_CLASSIFICATION	0.9999625288444979	WITHOUT_CLASSIFICATION	3.747115550218284E-5	DESIGN
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9998876660733973	WITHOUT_CLASSIFICATION	1.1233392660263015E-4	DESIGN
should never happen i think	WITHOUT_CLASSIFICATION	0.9980057603733188	WITHOUT_CLASSIFICATION	0.001994239626681186	DESIGN
detect discriminator values	WITHOUT_CLASSIFICATION	0.999857576019434	WITHOUT_CLASSIFICATION	1.4242398056583556E-4	DESIGN
convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9974797995712534	WITHOUT_CLASSIFICATION	0.0025202004287465996	DESIGN
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9974296871230796	WITHOUT_CLASSIFICATION	0.0025703128769205327	DESIGN
it does not refer to an alias of a projection look for a property	WITHOUT_CLASSIFICATION	0.999726196873384	WITHOUT_CLASSIFICATION	2.738031266159321E-4	DESIGN
otherwise this is an ordinary value.	WITHOUT_CLASSIFICATION	0.999188303711071	WITHOUT_CLASSIFICATION	8.116962889289022E-4	DESIGN
currently not cachable if autodiscover types is in effect (e.g. "select ")	WITHOUT_CLASSIFICATION	0.9965659421907007	WITHOUT_CLASSIFICATION	0.003434057809299282	DESIGN
private final string[] sqlaliases private final string[] sqlaliassuffixes	WITHOUT_CLASSIFICATION	0.9988376773638368	WITHOUT_CLASSIFICATION	0.001162322636163314	DESIGN
this is only needed (afaict) for resulttransformer processing	WITHOUT_CLASSIFICATION	0.9993388320254099	WITHOUT_CLASSIFICATION	6.611679745902778E-4	DESIGN
determine if the collection elements are entities	WITHOUT_CLASSIFICATION	0.9998854408951218	WITHOUT_CLASSIFICATION	1.1455910487824243E-4	DESIGN
build an array with indices equal to the total number of actual returns in the result hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.99998566481274	WITHOUT_CLASSIFICATION	1.4335187259926523E-5	DESIGN
replace {.} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9998075302003546	WITHOUT_CLASSIFICATION	1.924697996453427E-4	DESIGN
no additional open braces found in the string append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999166745093212	WITHOUT_CLASSIFICATION	8.332549067875784E-5	DESIGN
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999323069761796	WITHOUT_CLASSIFICATION	6.769302382043704E-5	DESIGN
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999533171302337	WITHOUT_CLASSIFICATION	4.668286976629795E-5	DESIGN
passing through anything we do not know to support jdbc escape sequences hb-898	WITHOUT_CLASSIFICATION	0.9934754815406897	WITHOUT_CLASSIFICATION	0.006524518459310362	DESIGN
passing through anything we do not know to support jdbc escape sequences hb-898	WITHOUT_CLASSIFICATION	0.9934754815406897	WITHOUT_CLASSIFICATION	0.006524518459310362	DESIGN
the current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9998129061024598	WITHOUT_CLASSIFICATION	1.8709389754016664E-4	DESIGN
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9977804537586367	WITHOUT_CLASSIFICATION	0.002219546241363381	DESIGN
possibly handle something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999376006234619	WITHOUT_CLASSIFICATION	6.239937653807928E-5	DESIGN
let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9996446163388278	WITHOUT_CLASSIFICATION	3.553836611721639E-4	DESIGN
private final list persisters = new arraylist()	WITHOUT_CLASSIFICATION	0.9992161417984964	WITHOUT_CLASSIFICATION	7.83858201503699E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9989772430177805	WITHOUT_CLASSIFICATION	0.001022756982219523	DESIGN
note early exit!	WITHOUT_CLASSIFICATION	0.9997598224466081	WITHOUT_CLASSIFICATION	2.401775533918705E-4	DESIGN
private final list scalartypes = new arraylist() private final list scalarcolumnaliases = new arraylist()	WITHOUT_CLASSIFICATION	0.9998327314325058	WITHOUT_CLASSIFICATION	1.6726856749419878E-4	DESIGN
now process the returns	WITHOUT_CLASSIFICATION	0.9998917011889205	WITHOUT_CLASSIFICATION	1.0829881107946996E-4	DESIGN
private list collectionowneraliases = new arraylist() private list collectionaliases = new arraylist() private list collectionpersisters = new arraylist() private list collectionresults = new arraylist()	WITHOUT_CLASSIFICATION	0.9996758616634094	WITHOUT_CLASSIFICATION	3.2413833659053845E-4	DESIGN
already been processed	WITHOUT_CLASSIFICATION	0.9990411166430101	WITHOUT_CLASSIFICATION	9.588833569899404E-4	DESIGN
already been processed	WITHOUT_CLASSIFICATION	0.9990411166430101	WITHOUT_CLASSIFICATION	9.588833569899404E-4	DESIGN
make sure the owner alias is known	WITHOUT_CLASSIFICATION	0.9999908147151914	WITHOUT_CLASSIFICATION	9.185284808674325E-6	DESIGN
first break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9930418645348057	WITHOUT_CLASSIFICATION	0.006958135465194294	DESIGN
scalarcolumnaliases.add( typereturn.getcolumnalias() ) scalartypes.add( typereturn.gettype() )	WITHOUT_CLASSIFICATION	0.9987870645387554	WITHOUT_CLASSIFICATION	0.0012129354612445574	DESIGN
if this return's alias has not been processed yet do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999816679982595	WITHOUT_CLASSIFICATION	1.8332001740470337E-5	DESIGN
collectionowneraliases.add( owneralias )	WITHOUT_CLASSIFICATION	0.9987870645387554	WITHOUT_CLASSIFICATION	0.0012129354612445574	DESIGN
for merging of versioned entities we consider the version having been changed only when 1) the two version values are different and 2) the target actually represents database state! this second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999940993369044	WITHOUT_CLASSIFICATION	5.900663095525901E-6	DESIGN
this is the second pass through on a merge op so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9208606216574896	WITHOUT_CLASSIFICATION	0.07913937834251045	DESIGN
early exit	WITHOUT_CLASSIFICATION	0.999900226921855	WITHOUT_CLASSIFICATION	9.97730781450195E-5	DESIGN
cascade-save to collections after the collection owner was saved	WITHOUT_CLASSIFICATION	0.9995851985821295	WITHOUT_CLASSIFICATION	4.148014178704945E-4	DESIGN
initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9977440389387281	WITHOUT_CLASSIFICATION	0.0022559610612718326	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9997641874388233	WITHOUT_CLASSIFICATION	2.3581256117671855E-4	DESIGN
currently only the hibernate-supplied dbtimestamptype is supported here	WITHOUT_CLASSIFICATION	0.9996684652693437	WITHOUT_CLASSIFICATION	3.315347306563359E-4	DESIGN
this is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9956291696876662	WITHOUT_CLASSIFICATION	0.004370830312333778	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9988384466471192	WITHOUT_CLASSIFICATION	0.0011615533528809023	DESIGN
not so sure this is even valid subtree. but if it was it'd represent two unrelated table references	WITHOUT_CLASSIFICATION	0.999986671742989	WITHOUT_CLASSIFICATION	1.332825701100152E-5	DESIGN
(not (gt a b) ) => (le a b)	WITHOUT_CLASSIFICATION	0.9161403648234517	WITHOUT_CLASSIFICATION	0.08385963517654835	DESIGN
private type[] sqlresulttypes	WITHOUT_CLASSIFICATION	0.9967830021836416	WITHOUT_CLASSIFICATION	0.0032169978163584544	DESIGN
include the discriminator and class-level where but not filters	WITHOUT_CLASSIFICATION	0.999952544041103	WITHOUT_CLASSIFICATION	4.745595889708614E-5	DESIGN
sqlresulttypes = selectclause.getsqlresulttypes()	WITHOUT_CLASSIFICATION	0.9999128872065062	WITHOUT_CLASSIFICATION	8.711279349382712E-5	DESIGN
by default	WITHOUT_CLASSIFICATION	0.999958195440699	WITHOUT_CLASSIFICATION	4.180455930097055E-5	DESIGN
this is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.99635102912214	WITHOUT_CLASSIFICATION	0.0036489708778600465	DESIGN
-- loader implementation --	WITHOUT_CLASSIFICATION	0.9997835580772698	WITHOUT_CLASSIFICATION	2.1644192273018395E-4	DESIGN
-- loader overrides --	WITHOUT_CLASSIFICATION	0.9996747519386291	WITHOUT_CLASSIFICATION	3.252480613709565E-4	DESIGN
(not (is_null a b) ) => (is_not_null a b)	WITHOUT_CLASSIFICATION	0.9234485520235841	WITHOUT_CLASSIFICATION	0.07655144797641583	DESIGN
none because its the requested lock mode not the actual!	WITHOUT_CLASSIFICATION	0.9985530673498727	WITHOUT_CLASSIFICATION	0.001446932650127275	DESIGN
meant to handle dynamic instantiation queries	WITHOUT_CLASSIFICATION	0.999237757776014	WITHOUT_CLASSIFICATION	7.622422239860556E-4	DESIGN
--- query translator methods ---	WITHOUT_CLASSIFICATION	0.9994351212891551	WITHOUT_CLASSIFICATION	5.648787108448629E-4	DESIGN
-- implementation private methods --	WITHOUT_CLASSIFICATION	0.9964839993296313	WITHOUT_CLASSIFICATION	0.0035160006703687866	DESIGN
deduplicate unique constraints sharing the same columns this is needed by hibernate annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999973367760762	WITHOUT_CLASSIFICATION	2.6632239238403416E-6	DESIGN
try to find out the name of the primary key to create it as identity if the identitygenerator is used	WITHOUT_CLASSIFICATION	0.9995181683096499	WITHOUT_CLASSIFICATION	4.818316903501011E-4	DESIGN
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9925847921667873	WITHOUT_CLASSIFICATION	0.007415207833212665	DESIGN
prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999965660506775	WITHOUT_CLASSIFICATION	3.4339493223994813E-6	DESIGN
used also for generation of fk names!	WITHOUT_CLASSIFICATION	0.8147755993193292	WITHOUT_CLASSIFICATION	0.18522440068067075	DESIGN
usually useless	WITHOUT_CLASSIFICATION	0.999439896161151	WITHOUT_CLASSIFICATION	5.601038388489819E-4	DESIGN
added this caching as i noticed that gettype() is being called multiple times	WITHOUT_CLASSIFICATION	0.998419012332039	WITHOUT_CLASSIFICATION	0.0015809876679609253	DESIGN
do not add unique constraint on db not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9978896275828342	WITHOUT_CLASSIFICATION	0.0021103724171658684	DESIGN
for backward compatibility disable this	WITHOUT_CLASSIFICATION	0.9995641910847979	WITHOUT_CLASSIFICATION	4.358089152021101E-4	DESIGN
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9991580808876273	WITHOUT_CLASSIFICATION	8.419191123728146E-4	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9995640372784577	WITHOUT_CLASSIFICATION	4.359627215422784E-4	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9995640372784577	WITHOUT_CLASSIFICATION	4.359627215422784E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999557500394943	WITHOUT_CLASSIFICATION	4.424996050563834E-5	DESIGN
primary key constraint	WITHOUT_CLASSIFICATION	0.9999446911845246	WITHOUT_CLASSIFICATION	5.5308815475516784E-5	DESIGN
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9997030259325059	WITHOUT_CLASSIFICATION	2.9697406749403665E-4	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9997849863970669	WITHOUT_CLASSIFICATION	2.1501360293305527E-4	DESIGN
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9952926603652065	WITHOUT_CLASSIFICATION	0.004707339634793599	DESIGN
an identifier mapper => getkey will be included in the getnonduplicatedpropertyiterator() and checked later so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9994629114542584	WITHOUT_CLASSIFICATION	5.370885457417665E-4	DESIGN
if the hibernate-mapping did not specify a schema/catalog use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping or as params they will already be initialized and will override the values set here (they are in identifiergeneratorproperties)	WITHOUT_CLASSIFICATION	0.9999882590787468	WITHOUT_CLASSIFICATION	1.1740921253091714E-5	DESIGN
pass the entity-name if not a collection-id	WITHOUT_CLASSIFICATION	0.9995947199192718	WITHOUT_CLASSIFICATION	4.0528008072821014E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999557500394943	WITHOUT_CLASSIFICATION	4.424996050563834E-5	DESIGN
primary key constraint	WITHOUT_CLASSIFICATION	0.9999446911845246	WITHOUT_CLASSIFICATION	5.5308815475516784E-5	DESIGN
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9997991740458574	WITHOUT_CLASSIFICATION	2.0082595414253464E-4	DESIGN
needed to satisfy keyvalue	WITHOUT_CLASSIFICATION	0.9996167884061157	WITHOUT_CLASSIFICATION	3.832115938842772E-4	DESIGN
empty means no scoping	WITHOUT_CLASSIFICATION	0.9994515054446815	WITHOUT_CLASSIFICATION	5.484945553184664E-4	DESIGN
index should be last column listed	WITHOUT_CLASSIFICATION	0.9994734933814288	WITHOUT_CLASSIFICATION	5.26506618571205E-4	DESIGN
if it is a formula index use the element columns in the pk	WITHOUT_CLASSIFICATION	0.9998208984503838	WITHOUT_CLASSIFICATION	1.7910154961620815E-4	DESIGN
don't create a unique key 'cos some databases don't like a uk on nullable columns	WITHOUT_CLASSIFICATION	0.9961797990045029	WITHOUT_CLASSIFICATION	0.003820200995497086	DESIGN
arraylist list = new arraylist()list.addall( getkey().getconstraintcolumns() )list.addall( getindex().getconstraintcolumns() )getcollectiontable().createuniquekey(list)	WITHOUT_CLASSIFICATION	0.9999571804969948	WITHOUT_CLASSIFICATION	4.281950300522158E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.9997353723681296	WITHOUT_CLASSIFICATION	2.646276318703678E-4	DESIGN
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9998945019573033	WITHOUT_CLASSIFICATION	1.0549804269663828E-4	DESIGN
todo we could just return all false	WITHOUT_CLASSIFICATION	0.9305968890366326	DESIGN	0.06940311096336745	WITHOUT_CLASSIFICATION
the case of a foreign key to something other than the pk is handled in createpropertyrefconstraints	WITHOUT_CLASSIFICATION	0.9988165942512425	WITHOUT_CLASSIFICATION	0.0011834057487575059	DESIGN
todo we could just return all false	WITHOUT_CLASSIFICATION	0.9305968890366326	DESIGN	0.06940311096336745	WITHOUT_CLASSIFICATION
if the property mapping consists of all formulas make it non-updateable	WITHOUT_CLASSIFICATION	0.9998351295757489	WITHOUT_CLASSIFICATION	1.64870424251129E-4	DESIGN
columnupdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9995972656873707	WITHOUT_CLASSIFICATION	4.0273431262928484E-4	DESIGN
if the property mapping consists of all formulas make it insertable	WITHOUT_CLASSIFICATION	0.9998351295757489	WITHOUT_CLASSIFICATION	1.64870424251129E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998777646319083	WITHOUT_CLASSIFICATION	1.2223536809174317E-4	DESIGN
expected type is intrinsic here	WITHOUT_CLASSIFICATION	0.9994457280380563	WITHOUT_CLASSIFICATION	5.542719619437449E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9997353723681296	WITHOUT_CLASSIFICATION	2.646276318703678E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9997353723681296	WITHOUT_CLASSIFICATION	2.646276318703678E-4	DESIGN
return memberpersister.getpropertytype(propertyname)	WITHOUT_CLASSIFICATION	0.9996585710153588	WITHOUT_CLASSIFICATION	3.4142898464118224E-4	DESIGN
return memberpersister.tocolumns(alias propertyname)	WITHOUT_CLASSIFICATION	0.999659306788037	WITHOUT_CLASSIFICATION	3.4069321196298605E-4	DESIGN
return memberpersister.gettype()	WITHOUT_CLASSIFICATION	0.9996585710153588	WITHOUT_CLASSIFICATION	3.4142898464118224E-4	DESIGN
&& !indexisformula	WITHOUT_CLASSIFICATION	0.9997414840159332	WITHOUT_CLASSIFICATION	2.5851598406671105E-4	DESIGN
return !isonetomany()	WITHOUT_CLASSIFICATION	0.9996230053560431	WITHOUT_CLASSIFICATION	3.7699464395687997E-4	DESIGN
instanceof associationtype	WITHOUT_CLASSIFICATION	0.9982656335188242	WITHOUT_CLASSIFICATION	0.001734366481175695	DESIGN
we need to determine the best way to know that two joinables represent a single many-to-many	WITHOUT_CLASSIFICATION	0.9764555212025852	WITHOUT_CLASSIFICATION	0.023544478797414788	DESIGN
strip leading ''	WITHOUT_CLASSIFICATION	0.999938996936218	WITHOUT_CLASSIFICATION	6.100306378193854E-5	DESIGN
public boolean issubselectloadable()	WITHOUT_CLASSIFICATION	0.9997506964673197	WITHOUT_CLASSIFICATION	2.4930353268025167E-4	DESIGN
key	WITHOUT_CLASSIFICATION	0.9999355368350612	WITHOUT_CLASSIFICATION	6.446316493878612E-5	DESIGN
columns	WITHOUT_CLASSIFICATION	0.9999113852247956	WITHOUT_CLASSIFICATION	8.861477520438933E-5	DESIGN
sql statements	WITHOUT_CLASSIFICATION	0.9998945990995844	WITHOUT_CLASSIFICATION	1.0540090041562113E-4	DESIGN
extra information about the element type	WITHOUT_CLASSIFICATION	0.9975335657918405	WITHOUT_CLASSIFICATION	0.0024664342081595907	DESIGN
types	WITHOUT_CLASSIFICATION	0.9997062764941558	WITHOUT_CLASSIFICATION	2.9372350584428185E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999557500394943	WITHOUT_CLASSIFICATION	4.424996050563834E-5	DESIGN
private final string unquotedidentifiercolumnname	WITHOUT_CLASSIFICATION	0.9991298973892737	WITHOUT_CLASSIFICATION	8.701026107261693E-4	DESIGN
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9995581992025362	WITHOUT_CLASSIFICATION	4.4180079746378105E-4	DESIGN
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9997077430710771	WITHOUT_CLASSIFICATION	2.9225692892283087E-4	DESIGN
nativesql collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999682143917172	WITHOUT_CLASSIFICATION	3.178560828276606E-5	DESIGN
unquotedkeycolumnnames = stringhelper.unquote(keycolumnaliases)	WITHOUT_CLASSIFICATION	0.9999128872065062	WITHOUT_CLASSIFICATION	8.711279349382712E-5	DESIGN
element	WITHOUT_CLASSIFICATION	0.9997736082490153	WITHOUT_CLASSIFICATION	2.2639175098466028E-4	DESIGN
nativesql collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998883612014844	WITHOUT_CLASSIFICATION	1.1163879851560068E-4	DESIGN
index and row select	WITHOUT_CLASSIFICATION	0.9999410592718421	WITHOUT_CLASSIFICATION	5.8940728158079414E-5	DESIGN
nativesql collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999231528683726	WITHOUT_CLASSIFICATION	7.684713162730495E-5	DESIGN
unquotedidentifiercolumnname = identifiercolumnalias	WITHOUT_CLASSIFICATION	0.9999128872065062	WITHOUT_CLASSIFICATION	8.711279349382712E-5	DESIGN
unquotedidentifiercolumnname = null	WITHOUT_CLASSIFICATION	0.9998599354294874	WITHOUT_CLASSIFICATION	1.4006457051273552E-4	DESIGN
generate the sql	WITHOUT_CLASSIFICATION	0.9999318309456231	WITHOUT_CLASSIFICATION	6.816905437692782E-5	DESIGN
for non-arrays we don't need to know the element class elementtype.returnedclass()	WITHOUT_CLASSIFICATION	0.9985263182172517	WITHOUT_CLASSIFICATION	0.001473681782748255	DESIGN
not all classpersisters implement propertymapping!	WITHOUT_CLASSIFICATION	0.9818122355151986	WITHOUT_CLASSIFICATION	0.01818776448480146	DESIGN
handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.985945801234995	WITHOUT_CLASSIFICATION	0.014054198765005008	DESIGN
handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9892536803918591	WITHOUT_CLASSIFICATION	0.010746319608140974	DESIGN
if there is a user-specified loader return that todo filters!?	WITHOUT_CLASSIFICATION	0.7581075077723606	WITHOUT_CLASSIFICATION	0.24189249222763937	DESIGN
take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9958441485466487	WITHOUT_CLASSIFICATION	0.004155851453351314	DESIGN
strip leading ''	WITHOUT_CLASSIFICATION	0.999938996936218	WITHOUT_CLASSIFICATION	6.100306378193854E-5	DESIGN
run a subquery loader	WITHOUT_CLASSIFICATION	0.9977259839750482	WITHOUT_CLASSIFICATION	0.0022740160249518277	DESIGN
needed by arrays	WITHOUT_CLASSIFICATION	0.9997505767551673	WITHOUT_CLASSIFICATION	2.49423244832696E-4	DESIGN
todo something with formulas	WITHOUT_CLASSIFICATION	0.7404513377459648	WITHOUT_CLASSIFICATION	0.2595486622540351	DESIGN
an assertion	WITHOUT_CLASSIFICATION	0.9998071963737368	WITHOUT_CLASSIFICATION	1.9280362626322852E-4	DESIGN
remove all the old entries	WITHOUT_CLASSIFICATION	0.9999157971329927	WITHOUT_CLASSIFICATION	8.420286700726564E-5	DESIGN
create all the new entries	WITHOUT_CLASSIFICATION	0.9998940959211812	WITHOUT_CLASSIFICATION	1.0590407881884061E-4	DESIGN
&& !indexisformula	WITHOUT_CLASSIFICATION	0.9997414840159332	WITHOUT_CLASSIFICATION	2.5851598406671105E-4	DESIGN
&& !indexisformula	WITHOUT_CLASSIFICATION	0.9997414840159332	WITHOUT_CLASSIFICATION	2.5851598406671105E-4	DESIGN
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.999901230837919	WITHOUT_CLASSIFICATION	9.876916208093619E-5	DESIGN
insert all the new entries	WITHOUT_CLASSIFICATION	0.99995987145928	WITHOUT_CLASSIFICATION	4.012854071998373E-5	DESIGN
==elementtype ??	WITHOUT_CLASSIFICATION	0.9991128580976876	WITHOUT_CLASSIFICATION	8.871419023123331E-4	DESIGN
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999993316657498	WITHOUT_CLASSIFICATION	6.683342501652402E-7	DESIGN
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9989989547375842	WITHOUT_CLASSIFICATION	0.0010010452624159	DESIGN
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9998139002322433	WITHOUT_CLASSIFICATION	1.8609976775664676E-4	DESIGN
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.8356322879989143	WITHOUT_CLASSIFICATION	0.16436771200108571	DESIGN
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999928591907947	WITHOUT_CLASSIFICATION	7.140809205340691E-6	DESIGN
buf.append( selectfragment( lhsalias "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9933927007817889	WITHOUT_CLASSIFICATION	0.00660729921821121	DESIGN
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9998423773355664	WITHOUT_CLASSIFICATION	1.576226644336119E-4	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.99990530233074	WITHOUT_CLASSIFICATION	9.469766925994632E-5	DESIGN
private final string roottablename	WITHOUT_CLASSIFICATION	0.9991298973892737	WITHOUT_CLASSIFICATION	8.701026107261693E-4	DESIGN
initialization	WITHOUT_CLASSIFICATION	0.9999672630404077	WITHOUT_CLASSIFICATION	3.273695959226494E-5	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999557500394943	WITHOUT_CLASSIFICATION	4.424996050563834E-5	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.99990530233074	WITHOUT_CLASSIFICATION	9.469766925994632E-5	DESIGN
execute the sql	WITHOUT_CLASSIFICATION	0.9999188003023131	WITHOUT_CLASSIFICATION	8.119969768698301E-5	DESIGN
this could also just be true all the time	WITHOUT_CLASSIFICATION	0.9961274801032876	WITHOUT_CLASSIFICATION	0.0038725198967123585	DESIGN
chop the last union (all)	WITHOUT_CLASSIFICATION	0.999845195780665	WITHOUT_CLASSIFICATION	1.5480421933507655E-4	DESIGN
todo check this.	WITHOUT_CLASSIFICATION	0.6646588625716268	WITHOUT_CLASSIFICATION	0.33534113742837324	DESIGN
initialization	WITHOUT_CLASSIFICATION	0.9999672630404077	WITHOUT_CLASSIFICATION	3.273695959226494E-5	DESIGN
properties of this class including inherited properties	WITHOUT_CLASSIFICATION	0.9910384147657315	WITHOUT_CLASSIFICATION	0.008961585234268456	DESIGN
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9973690216745149	WITHOUT_CLASSIFICATION	0.002630978325485083	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9689063521421177	WITHOUT_CLASSIFICATION	0.03109364785788234	DESIGN
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an sql case	WITHOUT_CLASSIFICATION	0.9999716455358025	WITHOUT_CLASSIFICATION	2.8354464197402972E-5	DESIGN
multitables	WITHOUT_CLASSIFICATION	0.9997859950597627	WITHOUT_CLASSIFICATION	2.1400494023734423E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999557500394943	WITHOUT_CLASSIFICATION	4.424996050563834E-5	DESIGN
subclass closure properties	WITHOUT_CLASSIFICATION	0.9965261205749577	WITHOUT_CLASSIFICATION	0.0034738794250422193	DESIGN
subclasses	WITHOUT_CLASSIFICATION	0.9996897023130726	WITHOUT_CLASSIFICATION	3.102976869273588E-4	DESIGN
( (column) model.gettable().getprimarykey().getcolumniterator().next() ).getname()	WITHOUT_CLASSIFICATION	0.9998616694238468	WITHOUT_CLASSIFICATION	1.383305761531746E-4	DESIGN
( (column) sc.gettable().getprimarykey().getcolumniterator().next() ).getname()	WITHOUT_CLASSIFICATION	0.9998616694238468	WITHOUT_CLASSIFICATION	1.383305761531746E-4	DESIGN
don't need subclass tables because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9583050526218486	WITHOUT_CLASSIFICATION	0.041694947378151326	DESIGN
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9955262416815596	WITHOUT_CLASSIFICATION	0.004473758318440355	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.99990530233074	WITHOUT_CLASSIFICATION	9.469766925994632E-5	DESIGN
properties of this class including inherited properties	WITHOUT_CLASSIFICATION	0.9910384147657315	WITHOUT_CLASSIFICATION	0.008961585234268456	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9689063521421177	WITHOUT_CLASSIFICATION	0.03109364785788234	DESIGN
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9995628053478389	WITHOUT_CLASSIFICATION	4.371946521610447E-4	DESIGN
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999026487239338	WITHOUT_CLASSIFICATION	9.73512760662638E-5	DESIGN
discriminator column	WITHOUT_CLASSIFICATION	0.9998994209848168	WITHOUT_CLASSIFICATION	1.0057901518323836E-4	DESIGN
initialization	WITHOUT_CLASSIFICATION	0.9999672630404077	WITHOUT_CLASSIFICATION	3.273695959226494E-5	DESIGN
private final map propertytablenumbersbyname = new hashmap()	WITHOUT_CLASSIFICATION	0.9996480322343619	WITHOUT_CLASSIFICATION	3.519677656380982E-4	DESIGN
class + table	WITHOUT_CLASSIFICATION	0.9999499077669621	WITHOUT_CLASSIFICATION	5.009223303795342E-5	DESIGN
discriminator	WITHOUT_CLASSIFICATION	0.999786073996471	WITHOUT_CLASSIFICATION	2.139260035290132E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9995961518355075	WITHOUT_CLASSIFICATION	4.0384816449252805E-4	DESIGN
subclasses	WITHOUT_CLASSIFICATION	0.9996897023130726	WITHOUT_CLASSIFICATION	3.102976869273588E-4	DESIGN
execute the sql	WITHOUT_CLASSIFICATION	0.9999188003023131	WITHOUT_CLASSIFICATION	8.119969768698301E-5	DESIGN
joins	WITHOUT_CLASSIFICATION	0.9997557922290103	WITHOUT_CLASSIFICATION	2.442077709896114E-4	DESIGN
propertytablenumbersbyname.put( prop.getname() join )	WITHOUT_CLASSIFICATION	0.9996416105378362	WITHOUT_CLASSIFICATION	3.583894621637609E-4	DESIGN
access cached sql	WITHOUT_CLASSIFICATION	0.999920291230835	WITHOUT_CLASSIFICATION	7.970876916496215E-5	DESIGN
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9990233834504656	WITHOUT_CLASSIFICATION	9.76616549534468E-4	DESIGN
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999253840610576	WITHOUT_CLASSIFICATION	7.461593894247141E-5	DESIGN
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9997931243105204	WITHOUT_CLASSIFICATION	2.0687568947966564E-4	DESIGN
render the sql	WITHOUT_CLASSIFICATION	0.9998212401374698	WITHOUT_CLASSIFICATION	1.7875986253025673E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998777646319083	WITHOUT_CLASSIFICATION	1.2223536809174317E-4	DESIGN
moved up from abstractentitypersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9961447005212117	WITHOUT_CLASSIFICATION	0.0038552994787883	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995866341247203	WITHOUT_CLASSIFICATION	4.1336587527976095E-4	DESIGN
the optional sql string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999720214087745	WITHOUT_CLASSIFICATION	2.7978591225448612E-5	DESIGN
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9915030984955484	WITHOUT_CLASSIFICATION	0.008496901504451615	DESIGN
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9991804282826986	WITHOUT_CLASSIFICATION	8.195717173014579E-4	DESIGN
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9995013304984612	WITHOUT_CLASSIFICATION	4.986695015387999E-4	DESIGN
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999024621108697	WITHOUT_CLASSIFICATION	9.753788913019162E-5	DESIGN
sql strings	WITHOUT_CLASSIFICATION	0.9996364424754934	WITHOUT_CLASSIFICATION	3.6355752450655237E-4	DESIGN
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.999933370997653	WITHOUT_CLASSIFICATION	6.662900234698048E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9995961518355075	WITHOUT_CLASSIFICATION	4.0384816449252805E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995866341247203	WITHOUT_CLASSIFICATION	4.1336587527976095E-4	DESIGN
identifier	WITHOUT_CLASSIFICATION	0.9997606864898735	WITHOUT_CLASSIFICATION	2.393135101265534E-4	DESIGN
version	WITHOUT_CLASSIFICATION	0.9999093722692716	WITHOUT_CLASSIFICATION	9.062773072840146E-5	DESIGN
where string	WITHOUT_CLASSIFICATION	0.9999632017041069	WITHOUT_CLASSIFICATION	3.679829589304263E-5	DESIGN
subclass property closure	WITHOUT_CLASSIFICATION	0.9973003628525251	WITHOUT_CLASSIFICATION	0.002699637147474937	DESIGN
before add -)	WITHOUT_CLASSIFICATION	0.9999241639184886	WITHOUT_CLASSIFICATION	7.583608151135487E-5	DESIGN
handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.999108980732099	WITHOUT_CLASSIFICATION	8.910192679011113E-4	DESIGN
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9998574282944687	WITHOUT_CLASSIFICATION	1.4257170553130268E-4	DESIGN
note early exit here	WITHOUT_CLASSIFICATION	0.9998766559586256	WITHOUT_CLASSIFICATION	1.2334404137436436E-4	DESIGN
object have been loaded with setreadonly(true) hhh-2236	WITHOUT_CLASSIFICATION	0.9998293351600585	WITHOUT_CLASSIFICATION	1.706648399416216E-4	DESIGN
note this assumes something about how propertyselectfragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9997427856430409	WITHOUT_CLASSIFICATION	2.572143569590626E-4	DESIGN
strip leading " "	WITHOUT_CLASSIFICATION	0.9999327207607334	WITHOUT_CLASSIFICATION	6.727923926664619E-5	DESIGN
if there is no resulting row return null	WITHOUT_CLASSIFICATION	0.9999654829294842	WITHOUT_CLASSIFICATION	3.451707051585797E-5	DESIGN
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9994749992207862	WITHOUT_CLASSIFICATION	5.250007792136919E-4	DESIGN
null owner ok??	WITHOUT_CLASSIFICATION	0.9999190082076604	WITHOUT_CLASSIFICATION	8.09917923395408E-5	DESIGN
null sql means that the only lazy properties are shared pk one-to-one associations which are handled differently in the type#nullsafeget code	WITHOUT_CLASSIFICATION	0.9976038428931807	WITHOUT_CLASSIFICATION	0.0023961571068193167	DESIGN
create a new from node for the referenced class.	WITHOUT_CLASSIFICATION	0.9992854564782174	WITHOUT_CLASSIFICATION	7.145435217826706E-4	DESIGN
the difficulty here is exactly what do we update in order to force the version to be incremented in the db	WITHOUT_CLASSIFICATION	0.9997575017310566	WITHOUT_CLASSIFICATION	2.424982689434244E-4	DESIGN
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9992745283542283	WITHOUT_CLASSIFICATION	7.254716457717808E-4	DESIGN
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9994606581865791	WITHOUT_CLASSIFICATION	5.393418134207947E-4	DESIGN
enable for hhh-440 which we don't like	WITHOUT_CLASSIFICATION	0.999407821055825	WITHOUT_CLASSIFICATION	5.921789441749981E-4	DESIGN
aliases	WITHOUT_CLASSIFICATION	0.9997928336128791	WITHOUT_CLASSIFICATION	2.071663871210373E-4	DESIGN
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9997619643176229	WITHOUT_CLASSIFICATION	2.3803568237723872E-4	DESIGN
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9997066639835219	WITHOUT_CLASSIFICATION	2.933360164779802E-4	DESIGN
fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9987797361203282	WITHOUT_CLASSIFICATION	0.0012202638796717706	DESIGN
embedded composite ids ( alias.idname1 alias.idname2 )	WITHOUT_CLASSIFICATION	0.9976347870883652	WITHOUT_CLASSIFICATION	0.0023652129116347735	DESIGN
todo skip formulas?	WITHOUT_CLASSIFICATION	0.6790861538289416	WITHOUT_CLASSIFICATION	0.32091384617105856	DESIGN
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9998430399156053	WITHOUT_CLASSIFICATION	1.5696008439474322E-4	DESIGN
do two passes for collection property-ref!	WITHOUT_CLASSIFICATION	0.9995190926632158	WITHOUT_CLASSIFICATION	4.8090733678413284E-4	DESIGN
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9998368879746008	WITHOUT_CLASSIFICATION	1.6311202539931062E-4	DESIGN
todo eventually rowidname[j]	WITHOUT_CLASSIFICATION	0.7577132555563102	WITHOUT_CLASSIFICATION	0.24228674444368994	DESIGN
this is a property of the table which we are updating	WITHOUT_CLASSIFICATION	0.9990233047600325	WITHOUT_CLASSIFICATION	9.766952399673364E-4	DESIGN
special shortcut for id properties skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9995104540309274	WITHOUT_CLASSIFICATION	4.895459690726114E-4	DESIGN
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999122848917456	WITHOUT_CLASSIFICATION	8.771510825448393E-5	DESIGN
nothing to do even if the operand is a parameter no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.8583890132922982	WITHOUT_CLASSIFICATION	0.1416109867077017	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9908944452629279	WITHOUT_CLASSIFICATION	0.009105554737071997	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9989687371020883	WITHOUT_CLASSIFICATION	0.0010312628979116585	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9997556735789882	WITHOUT_CLASSIFICATION	2.443264210118036E-4	DESIGN
more specifically "? [op] datetime" 1) if the operator is minus the param needs to be of some datetime type 2) if the operator is plus the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9868068237033945	WITHOUT_CLASSIFICATION	0.013193176296605463	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9989687371020883	WITHOUT_CLASSIFICATION	0.0010312628979116585	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9908944452629279	WITHOUT_CLASSIFICATION	0.009105554737071997	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9997556735789882	WITHOUT_CLASSIFICATION	2.443264210118036E-4	DESIGN
add the primary key	WITHOUT_CLASSIFICATION	0.9999821914835372	WITHOUT_CLASSIFICATION	1.7808516462822798E-5	DESIGN
delegate already handles pk columns	WITHOUT_CLASSIFICATION	0.9997012422030276	WITHOUT_CLASSIFICATION	2.9875779697234974E-4	DESIGN
we can't batch joined inserts especially not if it is an identity insert nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999579682522354	WITHOUT_CLASSIFICATION	4.203174776462479E-5	DESIGN
render the sql query	WITHOUT_CLASSIFICATION	0.9998984563096935	WITHOUT_CLASSIFICATION	1.0154369030653058E-4	DESIGN
write the values of fields onto the prepared statement - we must use the state at the time the insert was issued (cos of foreign key constraints). not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999961978219265	WITHOUT_CLASSIFICATION	3.8021780734626123E-6	DESIGN
todo shouldnt inserts be expectations.none?	WITHOUT_CLASSIFICATION	0.5408973564838968	WITHOUT_CLASSIFICATION	0.4591026435161031	DESIGN
don't bother trying to update we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999333667551306	WITHOUT_CLASSIFICATION	6.663324486950153E-5	DESIGN
if all fields are null we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9991143874693503	WITHOUT_CLASSIFICATION	8.856125306496026E-4	DESIGN
there is probably a row there so try to update if no rows were updated we will find out	WITHOUT_CLASSIFICATION	0.9999940574214853	WITHOUT_CLASSIFICATION	5.942578514696076E-6	DESIGN
note updates to joined tables can't be batched	WITHOUT_CLASSIFICATION	0.9996613157888028	WITHOUT_CLASSIFICATION	3.386842111971947E-4	DESIGN
starting index	WITHOUT_CLASSIFICATION	0.9999009940284116	WITHOUT_CLASSIFICATION	9.900597158846228E-5	DESIGN
now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999943291320803	WITHOUT_CLASSIFICATION	5.670867919723973E-6	DESIGN
write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9995399098829912	WITHOUT_CLASSIFICATION	4.600901170088163E-4	DESIGN
render the sql query	WITHOUT_CLASSIFICATION	0.9998984563096935	WITHOUT_CLASSIFICATION	1.0154369030653058E-4	DESIGN
do the key. the key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.999828837618515	WITHOUT_CLASSIFICATION	1.711623814849496E-4	DESIGN
we should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9991932538294319	WITHOUT_CLASSIFICATION	8.067461705680936E-4	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9911742309919949	WITHOUT_CLASSIFICATION	0.008825769008005134	DESIGN
note dirtyfields==null means we had no snapshot and we couldn't get one using select-before-update oldfields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyfields)	WITHOUT_CLASSIFICATION	0.875451391195283	WITHOUT_CLASSIFICATION	0.12454860880471691	DESIGN
more specifically "datetime [op] ?" 1) if the operator is minus we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is plus the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.999687921445171	WITHOUT_CLASSIFICATION	3.1207855482901555E-4	DESIGN
for the case of dynamic-update="true" we need to generate the update sql	WITHOUT_CLASSIFICATION	0.9999224976955607	WITHOUT_CLASSIFICATION	7.750230443918131E-5	DESIGN
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.8692657970676086	WITHOUT_CLASSIFICATION	0.13073420293239135	DESIGN
for the case of dynamic-update="false" or no snapshot we use the static sql	WITHOUT_CLASSIFICATION	0.9999670974919455	WITHOUT_CLASSIFICATION	3.2902508054602374E-5	DESIGN
if not "get" then try "is"	WITHOUT_CLASSIFICATION	0.9995965078846264	WITHOUT_CLASSIFICATION	4.0349211537355476E-4	DESIGN
now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999836205937445	WITHOUT_CLASSIFICATION	1.6379406255478734E-5	DESIGN
for the case of dynamic-insert="true" we need to generate the insert sql	WITHOUT_CLASSIFICATION	0.9992294851139308	WITHOUT_CLASSIFICATION	7.7051488606918E-4	DESIGN
for the case of dynamic-insert="true" we need to generate the insert sql	WITHOUT_CLASSIFICATION	0.9992294851139308	WITHOUT_CLASSIFICATION	7.7051488606918E-4	DESIGN
for the case of dynamic-insert="false" use the static sql	WITHOUT_CLASSIFICATION	0.9999042650123648	WITHOUT_CLASSIFICATION	9.573498763518075E-5	DESIGN
for the case of dynamic-insert="false" use the static sql	WITHOUT_CLASSIFICATION	0.9999042650123648	WITHOUT_CLASSIFICATION	9.573498763518075E-5	DESIGN
not supported	WITHOUT_CLASSIFICATION	0.999212543365491	WITHOUT_CLASSIFICATION	7.874566345090886E-4	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9911742309919949	WITHOUT_CLASSIFICATION	0.008825769008005134	DESIGN
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9961637643519043	WITHOUT_CLASSIFICATION	0.003836235648095559	DESIGN
otherwise utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999080404002945	WITHOUT_CLASSIFICATION	9.195959970550729E-5	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9817423880332415	WITHOUT_CLASSIFICATION	0.01825761196675845	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9817423880332415	WITHOUT_CLASSIFICATION	0.01825761196675845	DESIGN
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999780970400682	WITHOUT_CLASSIFICATION	2.1902959931739554E-5	DESIGN
notice that we skip the first table it is the driving table!	WITHOUT_CLASSIFICATION	0.9999218661368907	WITHOUT_CLASSIFICATION	7.81338631092559E-5	DESIGN
we can inner join to superclass tables (the row must be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9998705274770942	WITHOUT_CLASSIFICATION	1.2947252290578114E-4	DESIGN
skip the driving table	WITHOUT_CLASSIFICATION	0.9998120196042464	WITHOUT_CLASSIFICATION	1.8798039575358352E-4	DESIGN
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.949005217272317	WITHOUT_CLASSIFICATION	0.05099478272768303	DESIGN
here we work under the following assumptions ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime always results in a double 3) datetime - {something other than datetime} always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999750383296	WITHOUT_CLASSIFICATION	2.4961670418283725E-8	DESIGN
render the where and from parts	WITHOUT_CLASSIFICATION	0.99963630092209	WITHOUT_CLASSIFICATION	3.636990779100672E-4	DESIGN
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9580160733472424	WITHOUT_CLASSIFICATION	0.04198392665275757	DESIGN
now render the joins	WITHOUT_CLASSIFICATION	0.9996925928399704	WITHOUT_CLASSIFICATION	3.07407160029591E-4	DESIGN
this will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9988574787164421	WITHOUT_CLASSIFICATION	0.0011425212835578528	DESIGN
now render the select clause	WITHOUT_CLASSIFICATION	0.9997211510256113	WITHOUT_CLASSIFICATION	2.788489743887286E-4	DESIGN
now tie it all together	WITHOUT_CLASSIFICATION	0.9996515117884226	WITHOUT_CLASSIFICATION	3.484882115774434E-4	DESIGN
insert/update/delete sql	WITHOUT_CLASSIFICATION	0.9997352838450307	WITHOUT_CLASSIFICATION	2.647161549692456E-4	DESIGN
select sql	WITHOUT_CLASSIFICATION	0.9998587929109298	WITHOUT_CLASSIFICATION	1.4120708907012524E-4	DESIGN
no need to check laziness dirty checking handles that	WITHOUT_CLASSIFICATION	0.9841966956008042	WITHOUT_CLASSIFICATION	0.015803304399195733	DESIGN
fully resolve the map reference create implicit joins.	WITHOUT_CLASSIFICATION	0.9996582994594828	WITHOUT_CLASSIFICATION	3.417005405171517E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9853289191221103	WITHOUT_CLASSIFICATION	0.014671080877889653	DESIGN
the basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9998206508586891	WITHOUT_CLASSIFICATION	1.7934914131091876E-4	DESIGN
for dialects which are known to not support ansi-sql row-value-constructor syntax we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9884840948069258	WITHOUT_CLASSIFICATION	0.011515905193074216	DESIGN
due to the complexity in initializing the selectclause do not generate one here. if it is not found simply return null also do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9912822641798079	WITHOUT_CLASSIFICATION	0.008717735820192186	DESIGN
check the version unsaved-value if appropriate	WITHOUT_CLASSIFICATION	0.9994735753581495	WITHOUT_CLASSIFICATION	5.264246418505131E-4	DESIGN
let this take precedence if defined since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.998443570208769	WITHOUT_CLASSIFICATION	0.0015564297912311145	DESIGN
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9988081029880903	WITHOUT_CLASSIFICATION	0.0011918970119096882	DESIGN
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9994108320353927	WITHOUT_CLASSIFICATION	5.891679646073598E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9999108971982235	WITHOUT_CLASSIFICATION	8.910280177650566E-5	DESIGN
for property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999217999642354	WITHOUT_CLASSIFICATION	7.820003576461995E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995866341247203	WITHOUT_CLASSIFICATION	4.1336587527976095E-4	DESIGN
if there is no resulting row return null	WITHOUT_CLASSIFICATION	0.9999654829294842	WITHOUT_CLASSIFICATION	3.451707051585797E-5	DESIGN
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999675447187915	WITHOUT_CLASSIFICATION	3.245528120858685E-5	DESIGN
if this from element is a collection and the path is a collection property (maxindex etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9981569693160074	WITHOUT_CLASSIFICATION	0.0018430306839925174	DESIGN
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995866341247203	WITHOUT_CLASSIFICATION	4.1336587527976095E-4	DESIGN
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996334888485433	WITHOUT_CLASSIFICATION	3.665111514567535E-4	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9999441945776151	WITHOUT_CLASSIFICATION	5.5805422384934265E-5	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9999441945776151	WITHOUT_CLASSIFICATION	5.5805422384934265E-5	DESIGN
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999971349157104	WITHOUT_CLASSIFICATION	2.865084289644346E-6	DESIGN
try "get"	WITHOUT_CLASSIFICATION	0.9998984805429879	WITHOUT_CLASSIFICATION	1.0151945701210297E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9998622497531471	WITHOUT_CLASSIFICATION	1.377502468527866E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9998622497531471	WITHOUT_CLASSIFICATION	1.377502468527866E-4	DESIGN
should be safe to only ever expect entitypersister references here	WITHOUT_CLASSIFICATION	0.9997274370760549	WITHOUT_CLASSIFICATION	2.725629239450647E-4	DESIGN
this page intentionally left blank )	WITHOUT_CLASSIFICATION	0.998957133014202	WITHOUT_CLASSIFICATION	0.0010428669857980562	DESIGN
do not do anything	WITHOUT_CLASSIFICATION	0.9991795210604182	WITHOUT_CLASSIFICATION	8.204789395817773E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9998111509702055	WITHOUT_CLASSIFICATION	1.8884902979455576E-4	DESIGN
cant instantiate	WITHOUT_CLASSIFICATION	0.9996751084199075	WITHOUT_CLASSIFICATION	3.2489158009261826E-4	DESIGN
if it is a property of an embedded component invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9998310077827091	WITHOUT_CLASSIFICATION	1.6899221729107058E-4	DESIGN
otherwise	WITHOUT_CLASSIFICATION	0.9996665036138969	WITHOUT_CLASSIFICATION	3.3349638610316384E-4	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9985902911198197	WITHOUT_CLASSIFICATION	0.0014097088801803357	DESIGN
note interfaces is assumed to already contain hibernateproxy.class	WITHOUT_CLASSIFICATION	0.9993908688924298	WITHOUT_CLASSIFICATION	6.091311075702998E-4	DESIGN
note interfaces is assumed to already contain hibernateproxy.class	WITHOUT_CLASSIFICATION	0.9993908688924298	WITHOUT_CLASSIFICATION	6.091311075702998E-4	DESIGN
hhh-2481 make sure the callback gets cleared otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9833215352973624	WITHOUT_CLASSIFICATION	0.016678464702637574	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.999981732513307	WITHOUT_CLASSIFICATION	1.826748669290646E-5	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.999981732513307	WITHOUT_CLASSIFICATION	1.826748669290646E-5	DESIGN
note interface is assumed to already contain hibernateproxy.class	WITHOUT_CLASSIFICATION	0.9995013720307139	WITHOUT_CLASSIFICATION	4.986279692861672E-4	DESIGN
interfaces arguments	WITHOUT_CLASSIFICATION	0.999863216558159	WITHOUT_CLASSIFICATION	1.3678344184091566E-4	DESIGN
todo!	WITHOUT_CLASSIFICATION	0.9997543180710643	WITHOUT_CLASSIFICATION	2.456819289357101E-4	DESIGN
get the caller	WITHOUT_CLASSIFICATION	0.9999057799033	WITHOUT_CLASSIFICATION	9.422009670006904E-5	DESIGN
get the caller principals	WITHOUT_CLASSIFICATION	0.9997990236978914	WITHOUT_CLASSIFICATION	2.0097630210865676E-4	DESIGN
private static final alias default_alias = new alias(10 null)	WITHOUT_CLASSIFICATION	0.9999936240658037	WITHOUT_CLASSIFICATION	6.375934196222808E-6	DESIGN
needed to bump this up to dotnode because that is the only thing which currently knows about the property-ref path in the correct format it is either this or recurse over the dotnodes constructing the property path just like dotnode does internally	WITHOUT_CLASSIFICATION	0.9900829582353879	WITHOUT_CLASSIFICATION	0.00991704176461198	DESIGN
if the identifier is quoted remove the quotes	WITHOUT_CLASSIFICATION	0.999443516475512	WITHOUT_CLASSIFICATION	5.564835244880376E-4	DESIGN
truncate the identifier to the max alias length less the suffix length	WITHOUT_CLASSIFICATION	0.9999823194954489	WITHOUT_CLASSIFICATION	1.768050455112965E-5	DESIGN
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9973793962362396	WITHOUT_CLASSIFICATION	0.0026206037637604373	DESIGN
null is not considered the same type as integer. $non-nls-1 $non-nls-1	WITHOUT_CLASSIFICATION	0.9943916314115058	WITHOUT_CLASSIFICATION	0.0056083685884942645	DESIGN
the outerjoinsafterwhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999558050401133	WITHOUT_CLASSIFICATION	4.4194959886746664E-5	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.9997576740899272	WITHOUT_CLASSIFICATION	2.4232591007276218E-4	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.9997576740899272	WITHOUT_CLASSIFICATION	2.4232591007276218E-4	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.9997576740899272	WITHOUT_CLASSIFICATION	2.4232591007276218E-4	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.9997576740899272	WITHOUT_CLASSIFICATION	2.4232591007276218E-4	DESIGN
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999172076604688	WITHOUT_CLASSIFICATION	8.279233953134476E-5	DESIGN
if the condition is not already there	WITHOUT_CLASSIFICATION	0.9997585951059491	WITHOUT_CLASSIFICATION	2.4140489405094135E-4	DESIGN
dontspace.add("'")	WITHOUT_CLASSIFICATION	0.9997859950597627	WITHOUT_CLASSIFICATION	2.1400494023734423E-4	DESIGN
for mysql	WITHOUT_CLASSIFICATION	0.9998864696659272	WITHOUT_CLASSIFICATION	1.1353033407288634E-4	DESIGN
hashmap columnsunique = new hashmap()	WITHOUT_CLASSIFICATION	0.9999551311346245	WITHOUT_CLASSIFICATION	4.486886537550726E-5	DESIGN
null caused some problems	WITHOUT_CLASSIFICATION	0.9950297530280641	WITHOUT_CLASSIFICATION	0.004970246971935894	DESIGN
package	WITHOUT_CLASSIFICATION	0.9989772430177805	WITHOUT_CLASSIFICATION	0.001022756982219523	DESIGN
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9995806775662327	WITHOUT_CLASSIFICATION	4.1932243376735805E-4	DESIGN
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9994921050092234	WITHOUT_CLASSIFICATION	5.078949907766055E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9989772430177805	WITHOUT_CLASSIFICATION	0.001022756982219523	DESIGN
package	WITHOUT_CLASSIFICATION	0.9989772430177805	WITHOUT_CLASSIFICATION	0.001022756982219523	DESIGN
if true then execute db updates otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9991673641687854	WITHOUT_CLASSIFICATION	8.326358312144986E-4	DESIGN
we only release the connection	WITHOUT_CLASSIFICATION	0.9995045039652244	WITHOUT_CLASSIFICATION	4.954960347756054E-4	DESIGN
deprecated option	WITHOUT_CLASSIFICATION	0.999436033686242	WITHOUT_CLASSIFICATION	5.63966313757954E-4	DESIGN
if an exception occurs during flush user must call rollback()	WITHOUT_CLASSIFICATION	0.9999688259243324	WITHOUT_CLASSIFICATION	3.1174075667600796E-5	DESIGN
actually this last test is probably unnecessary since beforecompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999591189043169	WITHOUT_CLASSIFICATION	4.088109568301141E-5	DESIGN
this one only really needed for badly-behaved applications! (if the transactionmanager has a sychronization registered its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9986615194766065	WITHOUT_CLASSIFICATION	0.0013384805233934206	DESIGN
create an dotnode ast for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999635837887143	WITHOUT_CLASSIFICATION	3.641621128567174E-5	DESIGN
if an exception occurs during flush user must call rollback()	WITHOUT_CLASSIFICATION	0.9999688259243324	WITHOUT_CLASSIFICATION	3.1174075667600796E-5	DESIGN
if we could not register a synchronization do the before/after completion callbacks ourself (but we need to let jdbccontext know that this is what we are going to do so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.7300850835668905	DESIGN	0.26991491643310955	WITHOUT_CLASSIFICATION
swallow it and continue to roll back jta transaction	WITHOUT_CLASSIFICATION	0.9998205044941268	WITHOUT_CLASSIFICATION	1.794955058731014E-4	DESIGN
so the transaction is already rolled back by jta spec	WITHOUT_CLASSIFICATION	0.9999936838231138	WITHOUT_CLASSIFICATION	6.316176886229739E-6	DESIGN
this method is a noop if there is a synchronization!	WITHOUT_CLASSIFICATION	0.9982952429401974	WITHOUT_CLASSIFICATION	0.0017047570598025278	DESIGN
two conditions where we need to transform this to a theta-join syntax 1) 'elem' is the "root from-element" in correlated subqueries 2) the dotnode.usethetastyleimplicitjoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9998407402309522	WITHOUT_CLASSIFICATION	1.592597690478399E-4	DESIGN
websphere however is not a sane jee/jta container	WITHOUT_CLASSIFICATION	0.9978290162024402	WITHOUT_CLASSIFICATION	0.0021709837975597396	DESIGN
for sane jee/jta containers the transaction itself functions as its identifier	WITHOUT_CLASSIFICATION	0.9999584749857472	WITHOUT_CLASSIFICATION	4.152501425290656E-5	DESIGN
swallow the transaction was finished	WITHOUT_CLASSIFICATION	0.99997754438615	WITHOUT_CLASSIFICATION	2.245561384996318E-5	DESIGN
all aliastoentitymapresulttransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996477063550185	WITHOUT_CLASSIFICATION	3.5229364498149437E-4	DESIGN
create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9995131638262456	WITHOUT_CLASSIFICATION	4.86836173754456E-4	DESIGN
all distinctrootentityresulttransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996477063550185	WITHOUT_CLASSIFICATION	3.5229364498149437E-4	DESIGN
map of entitymode -> tuplizer	WITHOUT_CLASSIFICATION	0.9999334048881346	WITHOUT_CLASSIFICATION	6.659511186542142E-5	DESIGN
this is a virtual id property	WITHOUT_CLASSIFICATION	0.9877765856320901	WITHOUT_CLASSIFICATION	0.01222341436790991	DESIGN
this one needed only for guessentitymode()	WITHOUT_CLASSIFICATION	0.9995415997045458	WITHOUT_CLASSIFICATION	4.5840029545422475E-4	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999971657618197	WITHOUT_CLASSIFICATION	2.834238180301826E-5	DESIGN
todo move this to sf per hhh-3517 also see hhh-1907 and componentmetamodel	WITHOUT_CLASSIFICATION	0.9836825330679615	DESIGN	0.01631746693203842	WITHOUT_CLASSIFICATION
then the pojo tuplizer using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999725403924903	WITHOUT_CLASSIFICATION	2.7459607509596857E-5	DESIGN
build the dynamic-map tuplizer	WITHOUT_CLASSIFICATION	0.9996624912986714	WITHOUT_CLASSIFICATION	3.375087013285688E-4	DESIGN
then dom4j tuplizer if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9998567437111407	WITHOUT_CLASSIFICATION	1.432562888592795E-4	DESIGN
build the dynamic-map tuplizer	WITHOUT_CLASSIFICATION	0.9996624912986714	WITHOUT_CLASSIFICATION	3.375087013285688E-4	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9997315167143607	WITHOUT_CLASSIFICATION	2.684832856393274E-4	DESIGN
found a ctor but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999931082271517	WITHOUT_CLASSIFICATION	6.891772848300243E-5	DESIGN
private final sessionfactoryimplementor sessionfactory	WITHOUT_CLASSIFICATION	0.9984942209613831	WITHOUT_CLASSIFICATION	0.0015057790386169409	DESIGN
cached for efficiency	WITHOUT_CLASSIFICATION	0.9998029148515788	WITHOUT_CLASSIFICATION	1.970851484211782E-4	DESIGN
public componentmetamodel(component component sessionfactoryimplementor sessionfactory) {	WITHOUT_CLASSIFICATION	0.9996897631762784	WITHOUT_CLASSIFICATION	3.102368237214623E-4	DESIGN
this.sessionfactory = sessionfactory	WITHOUT_CLASSIFICATION	0.9999128872065062	WITHOUT_CLASSIFICATION	8.711279349382712E-5	DESIGN
it was not embedded so the argument is just an id	WITHOUT_CLASSIFICATION	0.9996414201946393	WITHOUT_CLASSIFICATION	3.58579805360705E-4	DESIGN
then the pojo tuplizer using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999725403924903	WITHOUT_CLASSIFICATION	2.7459607509596857E-5	DESIGN
then dom4j tuplizer if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9998567437111407	WITHOUT_CLASSIFICATION	1.432562888592795E-4	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9997315167143607	WITHOUT_CLASSIFICATION	2.684832856393274E-4	DESIGN
then handle any user-defined entity modes	WITHOUT_CLASSIFICATION	0.9991227949687	WITHOUT_CLASSIFICATION	8.772050312998818E-4	DESIGN
return currentid	WITHOUT_CLASSIFICATION	0.9998232438673748	WITHOUT_CLASSIFICATION	1.76756132625302E-4	DESIGN
reset the id	WITHOUT_CLASSIFICATION	0.9999357228631286	WITHOUT_CLASSIFICATION	6.427713687137398E-5	DESIGN
origin.adddestination( destination ) this was the cause of hhh-242 origin.settype( from_fragment ) set the parent node type so that the ast is properly formed. the destination node will have all the from text. the parent node is a collection join too (voodoo - see joinprocessor)	WITHOUT_CLASSIFICATION	0.9837965848511463	WITHOUT_CLASSIFICATION	0.016203415148853723	DESIGN
reset the version	WITHOUT_CLASSIFICATION	0.9999825799498862	WITHOUT_CLASSIFICATION	1.742005011384491E-5	DESIGN
the default is to simply not lazy fetch properties for now	WITHOUT_CLASSIFICATION	0.9979011657997462	WITHOUT_CLASSIFICATION	0.002098834200253716	DESIGN
add the second join the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999269493036105	WITHOUT_CLASSIFICATION	7.305069638942863E-5	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9853289191221103	WITHOUT_CLASSIFICATION	0.014671080877889653	DESIGN
found a ctor but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999931082271517	WITHOUT_CLASSIFICATION	6.891772848300243E-5	DESIGN
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999445738957946	WITHOUT_CLASSIFICATION	5.542610420536151E-5	DESIGN
return getfactory().getsettings().getbytecodeprovider().getproxyfactoryfactory().buildproxyfactory()	WITHOUT_CLASSIFICATION	0.9996585710153588	WITHOUT_CLASSIFICATION	3.4142898464118224E-4	DESIGN
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9996339081172538	WITHOUT_CLASSIFICATION	3.660918827461665E-4	DESIGN
superclass entity-name	WITHOUT_CLASSIFICATION	0.999876218436262	WITHOUT_CLASSIFICATION	1.2378156373800674E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9853289191221103	WITHOUT_CLASSIFICATION	0.014671080877889653	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995866341247203	WITHOUT_CLASSIFICATION	4.1336587527976095E-4	DESIGN
init the aliases after initing the constructornode	WITHOUT_CLASSIFICATION	0.999831873801735	WITHOUT_CLASSIFICATION	1.6812619826501313E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9853289191221103	WITHOUT_CLASSIFICATION	0.014671080877889653	DESIGN
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9989490673796735	WITHOUT_CLASSIFICATION	0.0010509326203264394	DESIGN
get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998425697928408	WITHOUT_CLASSIFICATION	1.574302071592698E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995866341247203	WITHOUT_CLASSIFICATION	4.1336587527976095E-4	DESIGN
note this affects the return value!	WITHOUT_CLASSIFICATION	0.998904723639453	WITHOUT_CLASSIFICATION	0.0010952763605469047	DESIGN
need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9996323625704207	WITHOUT_CLASSIFICATION	3.676374295793721E-4	DESIGN
add the type to the list of returned sqlresulttypes.	WITHOUT_CLASSIFICATION	0.9997244041679961	WITHOUT_CLASSIFICATION	2.755958320038345E-4	DESIGN
collection types	WITHOUT_CLASSIFICATION	0.9990059436319771	WITHOUT_CLASSIFICATION	9.940563680227862E-4	DESIGN
convenience methods relating to operations across arrays of types	WITHOUT_CLASSIFICATION	0.9995886854463316	WITHOUT_CLASSIFICATION	4.113145536683942E-4	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998936627227548	WITHOUT_CLASSIFICATION	1.0633727724517275E-4	DESIGN
blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999549177685932	WITHOUT_CLASSIFICATION	4.5082231406673804E-5	DESIGN
value is the entity name	WITHOUT_CLASSIFICATION	0.9998986271341144	WITHOUT_CLASSIFICATION	1.0137286588558046E-4	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9998193397490085	WITHOUT_CLASSIFICATION	1.8066025099154043E-4	DESIGN
generate id select fragment and then property select fragment for each expression just like generateselectfragments().	WITHOUT_CLASSIFICATION	0.9780658316543729	WITHOUT_CLASSIFICATION	0.021934168345627083	DESIGN
todo!	WITHOUT_CLASSIFICATION	0.9997543180710643	WITHOUT_CLASSIFICATION	2.456819289357101E-4	DESIGN
xml is the entity name	WITHOUT_CLASSIFICATION	0.9995391856039022	WITHOUT_CLASSIFICATION	4.608143960978164E-4	DESIGN
special case this is the leaf of the containment graph even though not immutable	WITHOUT_CLASSIFICATION	0.9991424128139291	WITHOUT_CLASSIFICATION	8.575871860708942E-4	DESIGN
tolerates nulls	WITHOUT_CLASSIFICATION	0.9998489384633833	WITHOUT_CLASSIFICATION	1.510615366167436E-4	DESIGN
sqlresulttypelist	WITHOUT_CLASSIFICATION	0.9997859950597627	WITHOUT_CLASSIFICATION	2.1400494023734423E-4	DESIGN
metatype is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9987256437388767	WITHOUT_CLASSIFICATION	0.0012743562611233562	DESIGN
get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9976521086624347	WITHOUT_CLASSIFICATION	0.002347891337565282	DESIGN
look through the fromelement's children to find any collections of values that should be fetched	WITHOUT_CLASSIFICATION	0.9998853835367881	WITHOUT_CLASSIFICATION	1.1461646321192109E-4	DESIGN
return associationtype.foreign_key_to_parent this is better but causes a transient object exception	WITHOUT_CLASSIFICATION	0.9373207131637779	WITHOUT_CLASSIFICATION	0.06267928683622222	DESIGN
use the lower case function name. remember whether we're in a select clause or not.	WITHOUT_CLASSIFICATION	0.9820779847534739	WITHOUT_CLASSIFICATION	0.017922015246526146	DESIGN
ident might be the name of a class.	WITHOUT_CLASSIFICATION	0.9939206890917721	WITHOUT_CLASSIFICATION	0.006079310908227805	DESIGN
todo!!!	WITHOUT_CLASSIFICATION	0.9997543180710643	WITHOUT_CLASSIFICATION	2.456819289357101E-4	DESIGN
st.settimestamp( index new timestamp( cal.gettimeinmillis() ) cal ) jdk 1.5 only	WITHOUT_CLASSIFICATION	0.9992619043423467	WITHOUT_CLASSIFICATION	7.380956576533207E-4	DESIGN
st.setdate( index new date( cal.gettimeinmillis() ) cal ) jdk 1.5 only	WITHOUT_CLASSIFICATION	0.9992619043423467	WITHOUT_CLASSIFICATION	7.380956576533207E-4	DESIGN
both are timestamps	WITHOUT_CLASSIFICATION	0.9998281325711502	WITHOUT_CLASSIFICATION	1.7186742884983794E-4	DESIGN
at least one is a plain old date	WITHOUT_CLASSIFICATION	0.9998535813953036	WITHOUT_CLASSIFICATION	1.4641860469634873E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9998129607079548	WITHOUT_CLASSIFICATION	1.8703929204516576E-4	DESIGN
if the corresponding sql value is null the reader we got is null as well	WITHOUT_CLASSIFICATION	0.999999166811934	WITHOUT_CLASSIFICATION	8.331880659765578E-7	DESIGN
fetch reader content up to the end - and put characters in a stringbuffer	WITHOUT_CLASSIFICATION	0.9979177983808674	WITHOUT_CLASSIFICATION	0.002082201619132619	DESIGN
return stringbuffer content as a large string	WITHOUT_CLASSIFICATION	0.9999595184941295	WITHOUT_CLASSIFICATION	4.048150587060233E-5	DESIGN
or types.longvarchar?	WITHOUT_CLASSIFICATION	0.9998105261539404	WITHOUT_CLASSIFICATION	1.8947384605960433E-4	DESIGN
not called at runtime so doesn't matter if its slow )	WITHOUT_CLASSIFICATION	0.9984241011902064	WITHOUT_CLASSIFICATION	0.0015758988097936551	DESIGN
todo	WITHOUT_CLASSIFICATION	0.7031845144940405	WITHOUT_CLASSIFICATION	0.2968154855059594	DESIGN
chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9998444554460052	WITHOUT_CLASSIFICATION	1.5554455399478722E-4	DESIGN
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9988711624040207	WITHOUT_CLASSIFICATION	0.001128837595979283	DESIGN
cache this	WITHOUT_CLASSIFICATION	0.9985503787100054	WITHOUT_CLASSIFICATION	0.0014496212899945812	DESIGN
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9997536380095438	WITHOUT_CLASSIFICATION	2.463619904562562E-4	DESIGN
forcefully remove leading ands from where fragments the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9995929301075958	WITHOUT_CLASSIFICATION	4.07069892404311E-4	DESIGN
todo!!!!!!!	WITHOUT_CLASSIFICATION	0.9997859950597627	WITHOUT_CLASSIFICATION	2.1400494023734423E-4	DESIGN
create a new filters node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9998690960695732	WITHOUT_CLASSIFICATION	1.3090393042690265E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995866341247203	WITHOUT_CLASSIFICATION	4.1336587527976095E-4	DESIGN
public object instantiate(object parent sessionimplementor session) throws hibernateexception	WITHOUT_CLASSIFICATION	0.9999445034646425	WITHOUT_CLASSIFICATION	5.549653535753888E-5	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9998650944443891	WITHOUT_CLASSIFICATION	1.3490555561088374E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9998650944443891	WITHOUT_CLASSIFICATION	1.3490555561088374E-4	DESIGN
versiontype impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ note simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the timestamp datatype supported by sybase and sql server which are completely db-generated values	WITHOUT_CLASSIFICATION	0.9999996744953752	WITHOUT_CLASSIFICATION	3.255046247854977E-7	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998936627227548	WITHOUT_CLASSIFICATION	1.0633727724517275E-4	DESIGN
not really necessary i guess	WITHOUT_CLASSIFICATION	0.7471332413332533	WITHOUT_CLASSIFICATION	0.2528667586667466	DESIGN
clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999953484996091	WITHOUT_CLASSIFICATION	4.651500390808891E-6	DESIGN
we do not have to worry about queued additions to uninitialized collections since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9993314651195561	WITHOUT_CLASSIFICATION	6.685348804438933E-4	DESIGN
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999057192589001	WITHOUT_CLASSIFICATION	9.428074109989068E-5	DESIGN
remember the uk value	WITHOUT_CLASSIFICATION	0.9917960497389161	WITHOUT_CLASSIFICATION	0.00820395026108394	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9998129607079548	WITHOUT_CLASSIFICATION	1.8703929204516576E-4	DESIGN
processcollectionproperty(token q.getcollectionpersister(collectionrole) collectionname)	WITHOUT_CLASSIFICATION	0.9995866341247203	WITHOUT_CLASSIFICATION	4.1336587527976095E-4	DESIGN
we must use the "remembered" uk value since it is not available from the entityentry during assembly	WITHOUT_CLASSIFICATION	0.9994772424698382	WITHOUT_CLASSIFICATION	5.227575301619243E-4	DESIGN
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9997343029395745	WITHOUT_CLASSIFICATION	2.656970604254774E-4	DESIGN
return false	WITHOUT_CLASSIFICATION	0.9999189365154505	WITHOUT_CLASSIFICATION	8.106348454952922E-5	DESIGN
this just handles a particular case of component projection perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9315859225824987	DESIGN	0.06841407741750126	WITHOUT_CLASSIFICATION
note we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999705663011796	WITHOUT_CLASSIFICATION	2.9433698820300886E-5	DESIGN
the key is the owning entity itself so get the id from the key	WITHOUT_CLASSIFICATION	0.9998789294969982	WITHOUT_CLASSIFICATION	1.2107050300178961E-4	DESIGN
if the original is a persistentcollection and that original was not flagged as dirty then reset the target's dirty flag here after the copy operation. </p> one thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know	WITHOUT_CLASSIFICATION	0.9999995318264899	WITHOUT_CLASSIFICATION	4.6817351010823293E-7	DESIGN
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9996924435127752	WITHOUT_CLASSIFICATION	3.0755648722484284E-4	DESIGN
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999106217094381	WITHOUT_CLASSIFICATION	8.937829056192712E-5	DESIGN
for a null target or a target which is the same as the original we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999251912979197	WITHOUT_CLASSIFICATION	7.48087020803613E-5	DESIGN
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here	WITHOUT_CLASSIFICATION	0.9988004986667693	WITHOUT_CLASSIFICATION	0.0011995013332306262	DESIGN
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9998590070670668	WITHOUT_CLASSIFICATION	1.4099293293323852E-4	DESIGN
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9986221286397458	WITHOUT_CLASSIFICATION	0.0013778713602541886	DESIGN
check if it is already completely loaded but unowned	WITHOUT_CLASSIFICATION	0.9998840778962443	WITHOUT_CLASSIFICATION	1.1592210375559158E-4	DESIGN
cache the actual id of the object not the value of the property-ref which might not be initialized	WITHOUT_CLASSIFICATION	0.9990060112722167	WITHOUT_CLASSIFICATION	9.939887277834124E-4	DESIGN
todo!!!!!!!	WITHOUT_CLASSIFICATION	0.9997859950597627	WITHOUT_CLASSIFICATION	2.1400494023734423E-4	DESIGN
create a new collection wrapper to be initialized later	WITHOUT_CLASSIFICATION	0.9827903414179209	WITHOUT_CLASSIFICATION	0.0172096585820791	DESIGN
some jdbc drivers erroneously return an empty array here for a null db value /	WITHOUT_CLASSIFICATION	0.9998981258296994	WITHOUT_CLASSIFICATION	1.0187417030054929E-4	DESIGN
our column span is the number of columns in the pk	WITHOUT_CLASSIFICATION	0.9999906823264717	WITHOUT_CLASSIFICATION	9.317673528345007E-6	DESIGN
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999809486539791	WITHOUT_CLASSIFICATION	1.905134602089917E-5	DESIGN
we already know current is not null	WITHOUT_CLASSIFICATION	0.9970642091397982	WITHOUT_CLASSIFICATION	0.0029357908602017815	DESIGN
the ids are fully resolved so compare them with isdirty() not ismodified()	WITHOUT_CLASSIFICATION	0.9972998022119806	WITHOUT_CLASSIFICATION	0.0027001977880194276	DESIGN
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9997715576934821	WITHOUT_CLASSIFICATION	2.28442306517919E-4	DESIGN
----------------------------------------------------------- constructors	WITHOUT_CLASSIFICATION	0.9995858077126987	WITHOUT_CLASSIFICATION	4.141922873013284E-4	DESIGN
----------------------------------------------------- instance variables	WITHOUT_CLASSIFICATION	0.9981127921386957	WITHOUT_CLASSIFICATION	0.0018872078613042646	DESIGN
public static jdbcexception newjdbcexception(string string sqlexception root string sql) { string = string + " [" + sql + ']' log.error(string root) logexceptions(root) return new jdbcexception(string root sql) } public static jdbcexception newjdbcexception(string string sqlexception root) { log.error(string root) logexceptions(root) return new jdbcexception(string root) }	WITHOUT_CLASSIFICATION	0.9999990480350047	WITHOUT_CLASSIFICATION	9.51964995194544E-7	DESIGN
--------------------------------------------------------- public methods	WITHOUT_CLASSIFICATION	0.9990589298132299	WITHOUT_CLASSIFICATION	9.410701867702536E-4	DESIGN
compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9997635677030291	WITHOUT_CLASSIFICATION	2.3643229697100607E-4	DESIGN
simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999332181106418	WITHOUT_CLASSIFICATION	6.67818893582432E-5	DESIGN
sybase fail if we don't do that sigh	WITHOUT_CLASSIFICATION	0.9999183033803506	WITHOUT_CLASSIFICATION	8.169661964946315E-5	DESIGN
handles things like a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a b c ) (overloaded brackets) not not a a is not null (overloaded "not") etc and expressions like foo = bar (maps to foo.id = bar.id) foo.bar = 'foo' (maps to foo.bar = 'foo') foo.bar.baz = 1.0 (maps to foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.bar.baz (maps to bar.baz = 1.0 and foo.bar = bar.id) foo.bar.baz = a.b.c (maps to bar.baz = b.c and foo.bar = bar.id and a.b = b.id) foo.bar.baz + a.b.c (maps to bar.baz + b.c and foo.bar = bar.id and a.b = b.id) ( foo.bar.baz + 1.0 ) < 2.0 (maps to ( bar.baz + 1.0 ) < 2.0 and foo.bar = bar.id)	WITHOUT_CLASSIFICATION	0.9990852424105917	WITHOUT_CLASSIFICATION	9.147575894081275E-4	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9960609253261411	WITHOUT_CLASSIFICATION	0.003939074673858982	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9960609253261411	WITHOUT_CLASSIFICATION	0.003939074673858982	DESIGN
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9997585457042505	WITHOUT_CLASSIFICATION	2.4145429574960498E-4	DESIGN
otherwise just dump it	WITHOUT_CLASSIFICATION	0.9978455421845914	WITHOUT_CLASSIFICATION	0.0021544578154085456	DESIGN
its an interface so we can't really tell anything	WITHOUT_CLASSIFICATION	0.9999605403054409	WITHOUT_CLASSIFICATION	3.94596945590566E-5	DESIGN
its an interface so we can't really tell anything	WITHOUT_CLASSIFICATION	0.9999605403054409	WITHOUT_CLASSIFICATION	3.94596945590566E-5	DESIGN
use default behavior	WITHOUT_CLASSIFICATION	0.9990363693196417	WITHOUT_CLASSIFICATION	9.636306803581933E-4	DESIGN
note early return	WITHOUT_CLASSIFICATION	0.9997927204092673	WITHOUT_CLASSIFICATION	2.072795907327015E-4	DESIGN
the mru cache used to keep hard references to the most recently used query plans note lru here is a bit of a misnomer it indicates that lru entries are removed the actual kept entries are the mru entries	WITHOUT_CLASSIFICATION	0.9094584224558214	WITHOUT_CLASSIFICATION	0.09054157754417849	DESIGN
we want to be able to just use the defaults if jndi environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9990947417117778	WITHOUT_CLASSIFICATION	9.052582882222932E-4	DESIGN
clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999300722718667	WITHOUT_CLASSIFICATION	6.992772813330213E-5	DESIGN
serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9995984476380576	WITHOUT_CLASSIFICATION	4.0155236194229396E-4	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999779440313652	WITHOUT_CLASSIFICATION	2.2055968634822127E-5	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999779440313652	WITHOUT_CLASSIFICATION	2.2055968634822127E-5	DESIGN
deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9995983079928502	WITHOUT_CLASSIFICATION	4.016920071498612E-4	DESIGN
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9997510124599593	WITHOUT_CLASSIFICATION	2.4898754004063167E-4	DESIGN
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9997414840159332	WITHOUT_CLASSIFICATION	2.5851598406671105E-4	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9997865513044709	WITHOUT_CLASSIFICATION	2.1344869552920227E-4	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9997865513044709	WITHOUT_CLASSIFICATION	2.1344869552920227E-4	DESIGN
includes last '.'	WITHOUT_CLASSIFICATION	0.9998727146539839	WITHOUT_CLASSIFICATION	1.272853460161436E-4	DESIGN
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999186716952931	WITHOUT_CLASSIFICATION	8.132830470683826E-5	DESIGN
impl note takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method	WITHOUT_CLASSIFICATION	0.9997056610646353	WITHOUT_CLASSIFICATION	2.9433893536466837E-4	DESIGN
first time we find match!	WITHOUT_CLASSIFICATION	0.999932825961411	WITHOUT_CLASSIFICATION	6.717403858898068E-5	DESIGN
entitynames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9998909788098661	WITHOUT_CLASSIFICATION	1.0902119013383122E-4	DESIGN
wrapped iterators	WITHOUT_CLASSIFICATION	0.9957209986378731	WITHOUT_CLASSIFICATION	0.0042790013621268295	DESIGN
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9994490041890729	WITHOUT_CLASSIFICATION	5.509958109270247E-4	DESIGN
the current iterator	WITHOUT_CLASSIFICATION	0.9999590841327667	WITHOUT_CLASSIFICATION	4.091586723341317E-5	DESIGN
the last used iterator	WITHOUT_CLASSIFICATION	0.9720625792660585	WITHOUT_CLASSIFICATION	0.02793742073394143	DESIGN
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9998287566035728	WITHOUT_CLASSIFICATION	1.7124339642715593E-4	DESIGN
public static object[] clone(class elementclass object[] array) {object[] result = (object[]) array.newinstance( elementclass array.length )system.arraycopy(array 0 result 0 array.length)return result}	WITHOUT_CLASSIFICATION	0.9999968234790837	WITHOUT_CLASSIFICATION	3.1765209163697316E-6	DESIGN
call this before any iterator method to make sure that the current iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9980071772982673	WITHOUT_CLASSIFICATION	0.0019928227017327496	DESIGN
doable if needed	WITHOUT_CLASSIFICATION	0.9999266348108441	WITHOUT_CLASSIFICATION	7.336518915589693E-5	DESIGN
set last used iterator here in case the user calls remove before calling hasnext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.6577509561854918	WITHOUT_CLASSIFICATION	0.34224904381450827	DESIGN
peek ahead	WITHOUT_CLASSIFICATION	0.9997738904812435	WITHOUT_CLASSIFICATION	2.261095187564376E-4	DESIGN
if we reach the end of the string w/o finding the matching end that is an exception	WITHOUT_CLASSIFICATION	0.999884670980407	WITHOUT_CLASSIFICATION	1.1532901959290966E-4	DESIGN
we have a placeholder spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9974834243445815	WITHOUT_CLASSIFICATION	0.0025165756554184206	DESIGN
make sure spinning forward did not put us past the end of the buffer	WITHOUT_CLASSIFICATION	0.9975557649148258	WITHOUT_CLASSIFICATION	0.0024442350851741164	DESIGN
first try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9998483403104335	WITHOUT_CLASSIFICATION	1.5165968956650528E-4	DESIGN
next try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9992116418434686	WITHOUT_CLASSIFICATION	7.883581565314695E-4	DESIGN
next try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9994647469188327	WITHOUT_CLASSIFICATION	5.352530811672395E-4	DESIGN
anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9994247223889661	WITHOUT_CLASSIFICATION	5.752776110338872E-4	DESIGN
would need an identityset for this!	WITHOUT_CLASSIFICATION	0.9961844306239023	WITHOUT_CLASSIFICATION	0.0038155693760976764	DESIGN
arrays.aslist doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.998559283412834	WITHOUT_CLASSIFICATION	0.001440716587166077	DESIGN
faster?	WITHOUT_CLASSIFICATION	0.9997543180710643	WITHOUT_CLASSIFICATION	2.456819289357101E-4	DESIGN
the name of a class	WITHOUT_CLASSIFICATION	0.9995612310815509	WITHOUT_CLASSIFICATION	4.3876891844902666E-4	DESIGN
its the listener class name	WITHOUT_CLASSIFICATION	0.999897947267654	WITHOUT_CLASSIFICATION	1.0205273234603073E-4	DESIGN
allow 987654321	WITHOUT_CLASSIFICATION	0.9995544955647685	WITHOUT_CLASSIFICATION	4.455044352314372E-4	DESIGN
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.999945164831477	WITHOUT_CLASSIFICATION	5.483516852301707E-5	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999581777790048	WITHOUT_CLASSIFICATION	4.1822220995206856E-5	DESIGN
in case we were deserialized in a different jvm look for an instance with the same name (alternatively we could do an actual jndi lookup here.)	WITHOUT_CLASSIFICATION	0.9517354236253741	WITHOUT_CLASSIFICATION	0.04826457637462596	DESIGN
first lets determine whether to apply cglib or javassist based instrumentation	WITHOUT_CLASSIFICATION	0.9998589642624253	WITHOUT_CLASSIFICATION	1.4103573757473558E-4	DESIGN
make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9975473911350727	WITHOUT_CLASSIFICATION	0.002452608864927261	DESIGN
entirely optional!!	WITHOUT_CLASSIFICATION	0.9995583886137094	WITHOUT_CLASSIFICATION	4.416113862906032E-4	DESIGN
its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9984841337345562	WITHOUT_CLASSIFICATION	0.0015158662654436664	DESIGN
context.unbind(boundname)	WITHOUT_CLASSIFICATION	0.9995435784311248	WITHOUT_CLASSIFICATION	4.5642156887515357E-4	DESIGN
readresolveobject	WITHOUT_CLASSIFICATION	0.9997859950597627	WITHOUT_CLASSIFICATION	2.1400494023734423E-4	DESIGN
cfg.setproperty("hibernate.show_sql" "true")	WITHOUT_CLASSIFICATION	0.9995985930449112	WITHOUT_CLASSIFICATION	4.014069550888779E-4	DESIGN
defensive convenience methods	WITHOUT_CLASSIFICATION	0.9995714459380145	WITHOUT_CLASSIFICATION	4.2855406198545886E-4	DESIGN
create the sessionfactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9994650405282051	WITHOUT_CLASSIFICATION	5.349594717949312E-4	DESIGN
make sure you log the exception as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999009741462376	WITHOUT_CLASSIFICATION	9.902585376236627E-5	DESIGN
begin unit of work	WITHOUT_CLASSIFICATION	0.9999371197767816	WITHOUT_CLASSIFICATION	6.288022321837814E-5	DESIGN
write html header	WITHOUT_CLASSIFICATION	0.9988575259649924	WITHOUT_CLASSIFICATION	0.0011424740350075042	DESIGN
handle actions	WITHOUT_CLASSIFICATION	0.9992781216414638	WITHOUT_CLASSIFICATION	7.218783585361915E-4	DESIGN
print page	WITHOUT_CLASSIFICATION	0.9997177109745661	WITHOUT_CLASSIFICATION	2.8228902543401234E-4	DESIGN
write html footer	WITHOUT_CLASSIFICATION	0.9998717393348516	WITHOUT_CLASSIFICATION	1.2826066514834154E-4	DESIGN
end unit of work	WITHOUT_CLASSIFICATION	0.9998606342505868	WITHOUT_CLASSIFICATION	1.3936574941316178E-4	DESIGN
start the session to be used for this request	WITHOUT_CLASSIFICATION	0.8618054507869197	WITHOUT_CLASSIFICATION	0.13819454921308036	DESIGN
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9988525038965042	WITHOUT_CLASSIFICATION	0.0011474961034958946	DESIGN
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999702688235454	WITHOUT_CLASSIFICATION	2.9731176454577177E-5	DESIGN
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9947301843277337	WITHOUT_CLASSIFICATION	0.0052698156722662875	DESIGN
eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9984304977263199	WITHOUT_CLASSIFICATION	0.0015695022736801948	DESIGN
if we want to handle it bidirectional and detached we also need to load this collection with an eager outer-join fetch this time with criteria and not hql	WITHOUT_CLASSIFICATION	0.9629691311104068	WITHOUT_CLASSIFICATION	0.0370308688895931	DESIGN
event anevent = (event) session .createcriteria(event.class).setfetchmode("participants" fetchmode.join) .add( expression.eq("id" eventid) ) .uniqueresult() eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9998501173254178	WITHOUT_CLASSIFICATION	1.498826745821116E-4	DESIGN
end of first unit of work	WITHOUT_CLASSIFICATION	0.9998923425686664	WITHOUT_CLASSIFICATION	1.0765743133347653E-4	DESIGN
or bidirectional safety method setting both sides aperson.addtoevent(anevent)	WITHOUT_CLASSIFICATION	0.9998350388972223	WITHOUT_CLASSIFICATION	1.6496110277768134E-4	DESIGN
begin second unit of work	WITHOUT_CLASSIFICATION	0.9998095640977531	WITHOUT_CLASSIFICATION	1.9043590224684926E-4	DESIGN
reattachment of aperson	WITHOUT_CLASSIFICATION	0.9996864566547348	WITHOUT_CLASSIFICATION	3.1354334526519534E-4	DESIGN
the getemailaddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9961659870181041	WITHOUT_CLASSIFICATION	0.0038340129818958428	DESIGN
we need our tm so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9998534643855247	WITHOUT_CLASSIFICATION	1.465356144753589E-4	DESIGN
don't hold the jbc node lock throughout the tx as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9998765093474237	WITHOUT_CLASSIFICATION	1.2349065257629023E-4	DESIGN
don't hold the jbc node lock throughout the tx as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9998765093474237	WITHOUT_CLASSIFICATION	1.2349065257629023E-4	DESIGN
jbc put a version in the node when it created as part of some internal operation. we are always newer but if the jbc version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999966588552859	WITHOUT_CLASSIFICATION	3.341144714108722E-6	DESIGN
swaldman 2006-08-28 define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999431359858987	WITHOUT_CLASSIFICATION	5.686401410127752E-5	DESIGN
not null if the isolation level has been specified in the configuration file. otherwise it is left to the driver's default value.	WITHOUT_CLASSIFICATION	0.9999565700297656	WITHOUT_CLASSIFICATION	4.3429970234458334E-5	DESIGN
configured outside of hibernate (i.e. servlet container or java bean container already has proxool pools running and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9978891063984932	WITHOUT_CLASSIFICATION	0.002110893601506964	DESIGN
if you're closing down the connectionprovider chances are an is not a real big deal just warn	WITHOUT_CLASSIFICATION	0.9999141993782465	WITHOUT_CLASSIFICATION	8.580062175351021E-5	DESIGN
(as is always optional for consistency with sql/oql)	WITHOUT_CLASSIFICATION	0.9998723207580692	WITHOUT_CLASSIFICATION	1.276792419307865E-4	DESIGN
process the "new" hql style where aliases are assigned _after_ the class name or path expression ie. using the as construction	WITHOUT_CLASSIFICATION	0.9999999298167104	WITHOUT_CLASSIFICATION	7.018328957840066E-8	DESIGN
the loaded owner will be set to null after the collection is removed so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999978054642347	WITHOUT_CLASSIFICATION	2.1945357652970205E-6	DESIGN
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9985821651688749	WITHOUT_CLASSIFICATION	0.0014178348311251535	DESIGN
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999050974250682	WITHOUT_CLASSIFICATION	9.490257493186295E-5	DESIGN
handle a path expression or class name that appears at the start in the "new" hql style or an alias that appears at the start in the "old" hql style	WITHOUT_CLASSIFICATION	0.9999059467586225	WITHOUT_CLASSIFICATION	9.405324137742326E-5	DESIGN
handle <= >= != is not not between not in	WITHOUT_CLASSIFICATION	0.9903933208103108	WITHOUT_CLASSIFICATION	0.009606679189689183	DESIGN
the loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999352866885	WITHOUT_CLASSIFICATION	6.471331157195124E-8	DESIGN
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9996580397208735	WITHOUT_CLASSIFICATION	3.4196027912643034E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999940353713648	WITHOUT_CLASSIFICATION	5.9646286352064806E-5	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999940353713648	WITHOUT_CLASSIFICATION	5.9646286352064806E-5	DESIGN
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9994860420495681	WITHOUT_CLASSIFICATION	5.139579504318681E-4	DESIGN
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9996028242503019	WITHOUT_CLASSIFICATION	3.9717574969811245E-4	DESIGN
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9997269968440395	WITHOUT_CLASSIFICATION	2.7300315596036616E-4	DESIGN
note special case default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999767640099777	WITHOUT_CLASSIFICATION	2.3235990022330338E-5	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9998928798013178	WITHOUT_CLASSIFICATION	1.0712019868216237E-4	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997839964162275	WITHOUT_CLASSIFICATION	2.1600358377249965E-4	DESIGN
void setcomponenttuplizerfactory(componenttuplizerfactory componenttuplizerfactory) { this.componenttuplizerfactory = componenttuplizerfactory }	WITHOUT_CLASSIFICATION	0.9998963408754072	WITHOUT_CLASSIFICATION	1.036591245927262E-4	DESIGN
element index -> id	WITHOUT_CLASSIFICATION	0.9999525481974462	WITHOUT_CLASSIFICATION	4.745180255383561E-5	DESIGN
note that it might be better to iterate the snapshot but this is safe assuming the user implements equals() properly as required by the set contract!	WITHOUT_CLASSIFICATION	0.9998484314391841	WITHOUT_CLASSIFICATION	1.5156856081591084E-4	DESIGN
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999002616668413	WITHOUT_CLASSIFICATION	9.973833315871576E-5	DESIGN
essentially if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception note that allowing close() above has the same basic effect but we capture that there simply to perform the unbind	WITHOUT_CLASSIFICATION	0.9999996840879152	WITHOUT_CLASSIFICATION	3.159120848544088E-7	DESIGN
the default sqlexceptionconverter for all dialects is based on sqlstate since sqlerrorcode is extremely vendor-specific. specific dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9991645770050529	WITHOUT_CLASSIFICATION	8.35422994947102E-4	DESIGN
only necessary for postgre < 7.4 httpanoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9986624726087465	WITHOUT_CLASSIFICATION	0.0013375273912534973	DESIGN
select topic syntax from information_schema.help where section like 'function%' order by section topic see also -> httpwww.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999857852760242	WITHOUT_CLASSIFICATION	1.4214723975633219E-5	DESIGN
registercolumntype(types.varbinary "character($l)") registercolumntype(types.blob "character($l)" ) for use prior to cp 11.0 registercolumntype(types.clob "character($l)" )	WITHOUT_CLASSIFICATION	0.9984367544798889	WITHOUT_CLASSIFICATION	0.0015632455201111423	DESIGN
the blob type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include k - kilobyte m - megabyte g - gigabyte. refer to the pbdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9869050041248698	WITHOUT_CLASSIFICATION	0.013094995875130268	DESIGN
we must return a valid rdms/rsa command from this method to prevent rdms/rsa from issuing error 400	WITHOUT_CLASSIFICATION	0.9260947455360753	WITHOUT_CLASSIFICATION	0.07390525446392468	DESIGN
oracle driver reports to support getgeneratedkeys() but they only support the version taking an array of the names of the columns to be returned (via its returning clause). no other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999519849812492	WITHOUT_CLASSIFICATION	4.801501875089526E-5	DESIGN
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9998737057388623	WITHOUT_CLASSIFICATION	1.2629426113772052E-4	DESIGN
you may still have other resultsets or update counts left to process here but you can't do it now or the resultset you just got will be closed	WITHOUT_CLASSIFICATION	0.999999981615274	WITHOUT_CLASSIFICATION	1.8384725950194834E-8	DESIGN
note for object <-> sql datatype mappings see configuration manager | advanced | sql | system ddl datatype mappings tbdregistercolumntype(types.binary "binary($1)") changed 08-11-2005 jsl	WITHOUT_CLASSIFICATION	0.9999687268225349	WITHOUT_CLASSIFICATION	3.1273177465083966E-5	DESIGN
trim(end_keyword string-expression-1 from string-expression-2) use hibernate implementation "from" is one of the parameters they pass in position ?3 registerfunction( "trim" new sqlfunctiontemplate(hibernate.string "trim(?1 ?2 from ?3)") )	WITHOUT_CLASSIFICATION	0.9998943112728415	WITHOUT_CLASSIFICATION	1.0568872715858371E-4	DESIGN
whether this dialect has an identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.999894510073281	WITHOUT_CLASSIFICATION	1.0548992671899307E-4	DESIGN
according to both the ansi-sql and jpa specs trim takes a variable number of parameters between 1 and 4. at least one paramer (trimsource) is required. from the sql spec <trim function> = trim <left paren> <trim operands> <right paren> <trim operands> = [ [ <trim specification> ] [ <trim character> ] from ] <trim source> <trim specification> = leading | trailing | both if <trim specification> is omitted both is assumed. if <trim character> is omitted space is assumed	WITHOUT_CLASSIFICATION	0.9999999996539316	WITHOUT_CLASSIFICATION	3.4606848319837214E-10	DESIGN
/ prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9997880947620769	WITHOUT_CLASSIFICATION	2.1190523792313147E-4	DESIGN
named queries	WITHOUT_CLASSIFICATION	0.999886795529749	WITHOUT_CLASSIFICATION	1.1320447025090264E-4	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.7295193981458767	WITHOUT_CLASSIFICATION	0.2704806018541233	DESIGN
does not handle arrays (thats ok cos they can't be lazy) or newly instantiated collections so we can do the cast	WITHOUT_CLASSIFICATION	0.9878811641292742	WITHOUT_CLASSIFICATION	0.012118835870725845	DESIGN
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9998017337255316	WITHOUT_CLASSIFICATION	1.9826627446837357E-4	DESIGN
we can do the cast since orphan-delete does not apply to 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9990805423645557	WITHOUT_CLASSIFICATION	9.194576354443159E-4	DESIGN
if the natural-id is marked as non-mutable it is not retrieved during a normal database-snapshot operation	WITHOUT_CLASSIFICATION	0.9999883520532742	WITHOUT_CLASSIFICATION	1.1647946725820435E-5	DESIGN
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.999973622866851	WITHOUT_CLASSIFICATION	2.6377133149062307E-5	DESIGN
slice to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9998019670084463	WITHOUT_CLASSIFICATION	1.9803299155370145E-4	DESIGN
int result = 17 result = 37 result + type.hashcode() result = 37 result + ( value==null ? 0 value.hashcode() ) return result	WITHOUT_CLASSIFICATION	0.9999979706181605	WITHOUT_CLASSIFICATION	2.029381839337672E-6	DESIGN
the collectionentry.isreached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9998054641588967	WITHOUT_CLASSIFICATION	1.9453584110318137E-4	DESIGN
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999784836965644	WITHOUT_CLASSIFICATION	2.1516303435617346E-5	DESIGN
the unique property value represented here may or may not be serializable so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.5591042858615117	DESIGN	0.44089571413848816	WITHOUT_CLASSIFICATION
if the version of a newly instantiated object is not the same as the version seed value use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9996478917945334	WITHOUT_CLASSIFICATION	3.5210820546653594E-4	DESIGN
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9995667980292283	WITHOUT_CLASSIFICATION	4.332019707717054E-4	DESIGN
ignore this row the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999480907090448	WITHOUT_CLASSIFICATION	5.190929095525082E-5	DESIGN
entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently not yet used	WITHOUT_CLASSIFICATION	0.5584065227041591	DESIGN	0.4415934772958407	WITHOUT_CLASSIFICATION
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. besides it makes the code much easier to read than the old transactionhelper stuff	WITHOUT_CLASSIFICATION	0.9999953393107174	WITHOUT_CLASSIFICATION	4.660689282596684E-6	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9995874458021011	WITHOUT_CLASSIFICATION	4.1255419789883803E-4	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9995874458021011	WITHOUT_CLASSIFICATION	4.1255419789883803E-4	DESIGN
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999934077911126	WITHOUT_CLASSIFICATION	6.592208887404673E-6	DESIGN
remove any snapshot not really for memory management purposes but rather because it might now be stale and there is no longer any entityentry to take precedence this is now handled by removeentity() session.getpersistencecontext().removedatabasesnapshot(key)	WITHOUT_CLASSIFICATION	0.9404617651297001	WITHOUT_CLASSIFICATION	0.05953823487029979	DESIGN
skip this check for composite-ids relating to dom4j entity-mode alternatively we could add a check to make sure the incoming id value is an instance of element	WITHOUT_CLASSIFICATION	0.9470999315678968	WITHOUT_CLASSIFICATION	0.052900068432103126	DESIGN
upgrade the lock if necessary lock(result lockmode)	WITHOUT_CLASSIFICATION	0.9993237876781638	WITHOUT_CLASSIFICATION	6.762123218362514E-4	DESIGN
now any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9982668230402685	WITHOUT_CLASSIFICATION	0.0017331769597314704	DESIGN
we must clone embedded composite identifiers or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9985441933618509	WITHOUT_CLASSIFICATION	0.0014558066381491718	DESIGN
sub-insertions should occur before containing insertion so try to do the callback now	WITHOUT_CLASSIFICATION	0.999392653916478	WITHOUT_CLASSIFICATION	6.073460835219407E-4	DESIGN
the entity is not associated with the session so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.999934815489056	WITHOUT_CLASSIFICATION	6.518451094389829E-5	DESIGN
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9944178924798035	WITHOUT_CLASSIFICATION	0.005582107520196477	DESIGN
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997853364791727	WITHOUT_CLASSIFICATION	2.1466352082722532E-4	DESIGN
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997853364791727	WITHOUT_CLASSIFICATION	2.1466352082722532E-4	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9980341304197753	WITHOUT_CLASSIFICATION	0.0019658695802246247	DESIGN
if it is an uninitialized proxy pointing with this session then when it is accessed the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9989204054532169	WITHOUT_CLASSIFICATION	0.0010795945467831235	DESIGN
generate an explicit join for the root dot node. the implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999933465007129	WITHOUT_CLASSIFICATION	6.653499287010721E-6	DESIGN
a session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9973820453571767	WITHOUT_CLASSIFICATION	0.002617954642823292	DESIGN
does the collection referenced by this fromelement specify an order-by attribute? if so attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999290086951967	WITHOUT_CLASSIFICATION	7.099130480327585E-5	DESIGN
and the token could be an identifer and the error is a mismatched token error	WITHOUT_CLASSIFICATION	0.9880073460382611	WITHOUT_CLASSIFICATION	0.011992653961738976	DESIGN
if a where clause was specified in the update/delete query use it to limit the returned ids here	WITHOUT_CLASSIFICATION	0.9999857001277613	WITHOUT_CLASSIFICATION	1.4299872238667725E-5	DESIGN
int parameterstart = getwalker().getnumberofparametersinsetclause() list allparams = getidselectparameterspecifications() iterator whereparams = allparams.sublist( parameterstart allparams.size() ).iterator()	WITHOUT_CLASSIFICATION	0.9999912452381219	WITHOUT_CLASSIFICATION	8.754761878106566E-6	DESIGN
default implementation if this node has a data type and that data type is not an association then this is scalar.	WITHOUT_CLASSIFICATION	0.9984600716516135	WITHOUT_CLASSIFICATION	0.0015399283483864825	DESIGN
resolve the lhs fully generate implicit joins. pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999902259717331	WITHOUT_CLASSIFICATION	9.774028266804197E-6	DESIGN
if the propertytype is null and there isn't a parent just stop now there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.999775383400154	WITHOUT_CLASSIFICATION	2.246165998458671E-4	DESIGN
we do not look for an existing join on the same path because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9994111276280244	WITHOUT_CLASSIFICATION	5.888723719755281E-4	DESIGN
our parent is another dot node meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's pk (because 'our' table would know the fk).	WITHOUT_CLASSIFICATION	0.9999740047882146	WITHOUT_CLASSIFICATION	2.5995211785352443E-5	DESIGN
public final currency getcurrency(int col) throws hibernateexception {return (currency) get(col)}	WITHOUT_CLASSIFICATION	0.9999456658713511	WITHOUT_CLASSIFICATION	5.433412864876976E-5	DESIGN
here we have two possibilities 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999527782241406	WITHOUT_CLASSIFICATION	4.7221775859387825E-5	DESIGN
set the unresolved path in this node and the parent. set the text for the parent.	WITHOUT_CLASSIFICATION	0.9990161889700514	WITHOUT_CLASSIFICATION	9.838110299485421E-4	DESIGN
get the first child to be considered. sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. distinct).	WITHOUT_CLASSIFICATION	0.9981156783803652	WITHOUT_CLASSIFICATION	0.0018843216196348933	DESIGN
if this is an entity and the property is the identifier property then use getidentifiertype(). note that the propertyname.equals( propertypath ) checks whether we have a component key reference where the component class property name is the same as the entity id property name if the two are not equal this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9928478338309819	WITHOUT_CLASSIFICATION	0.007152166169018256	DESIGN
for a subquery the alias to use depends on a few things (we already know this is not an overall select) 1) if this from_element represents a correlation to the outer-most query a) if the outer query represents a multi-table persister we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) b) otherwise we need to use the persister's table name as the column qualification 2) otherwise (not correlated) use the given alias	WITHOUT_CLASSIFICATION	0.7417279033609855	DESIGN	0.2582720966390144	WITHOUT_CLASSIFICATION
not a collection? return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9954931347780274	WITHOUT_CLASSIFICATION	0.004506865221972664	DESIGN
collection of <many-to-any/> mappings used to circumvent the component-collection check below	WITHOUT_CLASSIFICATION	0.6623955385263963	WITHOUT_CLASSIFICATION	0.33760446147360373	DESIGN
otherwise the destination node was implied by the from clause and the from clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999493065114	WITHOUT_CLASSIFICATION	5.069348860010219E-5	DESIGN
if the first identifier in the path referrs to the class alias (not the class name) then this is a correlated subselect. if it's a correlated sub-select use the existing table alias. otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9579520372636408	WITHOUT_CLASSIFICATION	0.042047962736359225	DESIGN
check to see if our "proppath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.995719437301002	WITHOUT_CLASSIFICATION	0.004280562698998019	DESIGN
an ident node can represent an index expression if the ident represents a naked property ref note this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrexpr -> resolve()). the other option if that changes is to call resolve from here but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9911973920601598	WITHOUT_CLASSIFICATION	0.008802607939840196	DESIGN
this uses a pathexpressionparser but notice that compound paths are not valid only bare names and simple paths	WITHOUT_CLASSIFICATION	0.9985986719398217	WITHOUT_CLASSIFICATION	0.0014013280601783734	DESIGN
if this is an implied join in a from clause then use ansi-style joining and set the flag on the fromelement that indicates that it was implied in the from clause itself.	WITHOUT_CLASSIFICATION	0.998762512657644	WITHOUT_CLASSIFICATION	0.0012374873423559537	DESIGN
origin.adddestination(destination) add the query spaces.	WITHOUT_CLASSIFICATION	0.999874257715969	WITHOUT_CLASSIFICATION	1.2574228403094203E-4	DESIGN
for an explicit many-to-many relationship add a second join from the intermediate (many-to-many) table to the destination table. also make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999787950384498	WITHOUT_CLASSIFICATION	2.1204961550197567E-5	DESIGN
reset the node type because the rest of the system is expecting from_fragment all we wanted was for the factory to create the right sub-class. this might get reset again later on anyway to make the sql generation simpler.	WITHOUT_CLASSIFICATION	0.8630961705008062	DESIGN	0.13690382949919389	WITHOUT_CLASSIFICATION
explicit = true this is an explict select. arraylist sqlresulttypelist = new arraylist()	WITHOUT_CLASSIFICATION	0.9998123212574117	WITHOUT_CLASSIFICATION	1.8767874258819557E-4	DESIGN
sqlresulttypelist.add( type ) generate the select expression.	WITHOUT_CLASSIFICATION	0.9964286212038966	WITHOUT_CLASSIFICATION	0.003571378796103369	DESIGN
if the expression list has exactly one expression and the type of the expression is a collection then this might be a collection function such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.999965629077987	WITHOUT_CLASSIFICATION	3.437092201304306E-5	DESIGN
need to parse off the column qualifiers this is assuming (which is true as of now) that this is only used from update and delete hql statement parsing	WITHOUT_CLASSIFICATION	0.999974782752826	WITHOUT_CLASSIFICATION	2.5217247174015284E-5	DESIGN
for regression testing against output from the old parser found it easiest to simply reorder the fromelements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser this is definitely another of those "only needed for regression purposes". the syntheticandfactory then simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999838224123637	WITHOUT_CLASSIFICATION	1.6177587636338272E-5	DESIGN
the uber-rule here is that we need to include subclass joins if the fromelement is in any way dereferenced by a property from the subclass table otherwise we end up with column references qualified by a non-existent table reference in the resulting sql	WITHOUT_CLASSIFICATION	0.9919681659486645	WITHOUT_CLASSIFICATION	0.008031834051335526	DESIGN
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9634176786769323	WITHOUT_CLASSIFICATION	0.03658232132306774	DESIGN
the following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9978540601490384	WITHOUT_CLASSIFICATION	0.0021459398509615668	DESIGN
the loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999352866885	WITHOUT_CLASSIFICATION	6.471331157195124E-8	DESIGN
should not be able to reach last without maxposition being set unless there are no results	WITHOUT_CLASSIFICATION	0.998191459013203	WITHOUT_CLASSIFICATION	0.001808540986796885	DESIGN
we found it in the temp pc. should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999171495381927	WITHOUT_CLASSIFICATION	8.285046180731004E-5	DESIGN
do not use proxiesbykey since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9958926640674903	WITHOUT_CLASSIFICATION	0.004107335932509728	DESIGN
if there is no tm configured we will not be able to access the javax.transaction.transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999132736620681	WITHOUT_CLASSIFICATION	8.672633793195878E-5	DESIGN
since the result set cursor is always left at the first physical row after the "last processed" we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999995160396071	WITHOUT_CLASSIFICATION	4.839603929303025E-7	DESIGN
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a collectioninitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9997963559429355	WITHOUT_CLASSIFICATION	2.0364405706447256E-4	DESIGN
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode none)	WITHOUT_CLASSIFICATION	0.9997932406889395	WITHOUT_CLASSIFICATION	2.0675931106039846E-4	DESIGN
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9987089588780197	WITHOUT_CLASSIFICATION	0.001291041121980347	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999007550174422	WITHOUT_CLASSIFICATION	9.924498255780747E-5	DESIGN
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9985268888811661	WITHOUT_CLASSIFICATION	0.0014731111188338664	DESIGN
ps.close() just close it do not try to return it to the pool! note early exit!	WITHOUT_CLASSIFICATION	0.9998760249607008	WITHOUT_CLASSIFICATION	1.2397503929913677E-4	DESIGN
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through hibernate's registered transaction synchronization on a separate "reaping" thread. in cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these cmes occur. and though it is not "allowed" per-se the end result without handling it specifically is infinite looping. so here we simply break the loop	WITHOUT_CLASSIFICATION	0.9999993939365807	WITHOUT_CLASSIFICATION	6.060634193456778E-7	DESIGN
unfortunately this stuff can't be cached because it is per-invocation not constant for the querytranslator instance	WITHOUT_CLASSIFICATION	0.9993054495914422	WITHOUT_CLASSIFICATION	6.945504085578453E-4	DESIGN
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9994149444075154	WITHOUT_CLASSIFICATION	5.850555924846656E-4	DESIGN
don't create a unique key 'cos some databases don't like a uk on nullable columns getcollectiontable().createuniquekey( getidentifier().getconstraintcolumns() )	WITHOUT_CLASSIFICATION	0.988863836955067	WITHOUT_CLASSIFICATION	0.011136163044932897	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or entityinfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997687323068131	WITHOUT_CLASSIFICATION	2.3126769318701395E-4	DESIGN
isset = collection.isset() issorted = collection.issorted()	WITHOUT_CLASSIFICATION	0.9999128872065062	WITHOUT_CLASSIFICATION	8.711279349382712E-5	DESIGN
lists arrays sets maps bags	WITHOUT_CLASSIFICATION	0.9983953733954366	WITHOUT_CLASSIFICATION	0.0016046266045633632	DESIGN
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9998996577446762	WITHOUT_CLASSIFICATION	1.0034225532391342E-4	DESIGN
use a combination of foreign key columns and pk columns since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999711702050609	WITHOUT_CLASSIFICATION	2.882979493916526E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or entityinfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997687323068131	WITHOUT_CLASSIFICATION	2.3126769318701395E-4	DESIGN
information about properties of this class including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9843193075202897	WITHOUT_CLASSIFICATION	0.01568069247971018	DESIGN
all this only really needs to consider properties of this class not its subclasses but since we are reusing code used for sequential selects we use the subclass closure	WITHOUT_CLASSIFICATION	0.9959929974046718	DESIGN	0.004007002595328167	WITHOUT_CLASSIFICATION
here we render the select column list based on the properties defined as being generated. for partial component generation we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.7847027368732045	WITHOUT_CLASSIFICATION	0.21529726312679545	DESIGN
this is the root (versioned) table and we are using version-based optimistic locking if we are not updating the version also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9985305861890624	WITHOUT_CLASSIFICATION	0.0014694138109375707	DESIGN
optimistic-lock="all" include all updatable properties optimistic-lock="dirty" include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9996375424450542	WITHOUT_CLASSIFICATION	3.6245755494581397E-4	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9911742309919949	WITHOUT_CLASSIFICATION	0.008825769008005134	DESIGN
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a jta transaction context so must be autocommit mode)	WITHOUT_CLASSIFICATION	0.9913691336655206	WITHOUT_CLASSIFICATION	0.008630866334479433	DESIGN
need to treat this as if it where optimistic-lock="all" (dirty does not make sense) first we need to locate the "loaded" state note it potentially could be a proxy so perform the location the safe way	WITHOUT_CLASSIFICATION	0.9858606263587918	WITHOUT_CLASSIFICATION	0.014139373641208229	DESIGN
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9977322354142637	WITHOUT_CLASSIFICATION	0.0022677645857362406	DESIGN
need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. using the collection's key type causes problems with property-ref keys	WITHOUT_CLASSIFICATION	0.9961758554660985	WITHOUT_CLASSIFICATION	0.0038241445339014433	DESIGN
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.998841942255682	WITHOUT_CLASSIFICATION	0.0011580577443180222	DESIGN
following doesn't handle (null not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9930561157013496	WITHOUT_CLASSIFICATION	0.006943884298650552	DESIGN
impl note due to the delayed population of setters (setters cached for performance) we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999717066436021	WITHOUT_CLASSIFICATION	2.8293356397977006E-5	DESIGN
we need to dirty check collections since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999692614595198	WITHOUT_CLASSIFICATION	3.073854048013075E-5	DESIGN
return the id so we can use it to reset the proxy id return result	WITHOUT_CLASSIFICATION	0.9999756071947822	WITHOUT_CLASSIFICATION	2.4392805217872786E-5	DESIGN
optimizer = getfactory().getsettings().getbytecodeprovider().getreflectionoptimizer( mappedclass getternames setternames proptypes )	WITHOUT_CLASSIFICATION	0.9997442242999653	WITHOUT_CLASSIFICATION	2.557757000345963E-4	DESIGN
cache the actual id of the object not the value of the property-ref which might not be initialized	WITHOUT_CLASSIFICATION	0.9990060112722167	WITHOUT_CLASSIFICATION	9.939887277834124E-4	DESIGN
we now have the value of the property-ref we reference. however we need to dig a little deeper as that property might also be an entity type in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9988846580170913	WITHOUT_CLASSIFICATION	0.0011153419829087112	DESIGN
retrieve the value of the designated column in the current row of this resultset object as a java.io.reader object	WITHOUT_CLASSIFICATION	0.9999825212496197	WITHOUT_CLASSIFICATION	1.7478750380365647E-5	DESIGN
not absolutely necessary but helps for some equals()/hashcode() implementations	WITHOUT_CLASSIFICATION	0.9760560687169341	WITHOUT_CLASSIFICATION	0.023943931283065868	DESIGN
this should be a call to resolve() not resolveidentifier() 'cos it might be a property-ref and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.982495329519819	WITHOUT_CLASSIFICATION	0.017504670480180968	DESIGN
if we have <tt>not-found="ignore"</tt> association mapped to a formula we always need to dirty check it so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9996498135397454	WITHOUT_CLASSIFICATION	3.5018646025465155E-4	DESIGN
can't just return null here since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9995488758257226	WITHOUT_CLASSIFICATION	4.5112417427747E-4	DESIGN
for arrays replaceelements() may return a different reference since the array length might not match	WITHOUT_CLASSIFICATION	0.9851125551203753	WITHOUT_CLASSIFICATION	0.014887444879624531	DESIGN
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the mru entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9971813792716276	WITHOUT_CLASSIFICATION	0.0028186207283723433	DESIGN
as soon as we encounter our first letter return the substring from that position	WITHOUT_CLASSIFICATION	0.9999381210985533	WITHOUT_CLASSIFICATION	6.187890144673947E-5	DESIGN
note expected in the syntax type=listenerclass ({sep}type=listenerclass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999922882433508	WITHOUT_CLASSIFICATION	7.711756649145316E-6	DESIGN
istransactioncallbackregistered denotes whether any hibernate transaction has registered as a callback against this jdbccontext only one such callback is allowed. directly serializing this value causes problems with jdbctransaction or really any transaction impl where the callback is local to the transaction instance itself since that transaction is not serialized along with the jdbccontext. thus we handle that fact here explicitly	WITHOUT_CLASSIFICATION	0.9992520475300574	WITHOUT_CLASSIFICATION	7.479524699427812E-4	DESIGN
note that for sequential scrolling we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9989534265575983	WITHOUT_CLASSIFICATION	0.0010465734424016	DESIGN
we call getkeyfromresultset() here so that we can know the key value upon which to perform the breaking logic. however it is also then called from getrowfromresultset() which is certainly not the most efficient. but the call here is needed and there currently is no other way without refactoring of the doquery()/getrowfromresultset() methods	WITHOUT_CLASSIFICATION	0.883865837724788	WITHOUT_CLASSIFICATION	0.1161341622752119	DESIGN
this check is needed since processing leaves the cursor after the last physical row for the current logical row thus if we are after the last physical row this might be caused by either 1) scrolling to the last logical row 2) scrolling past the last logical row in the latter scenario the previous logical row really is the last logical row. in all other cases we should process back two logical records (the current logic row plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9994279050230584	WITHOUT_CLASSIFICATION	5.72094976941599E-4	DESIGN
and perform the load	WITHOUT_CLASSIFICATION	0.9998522851803602	WITHOUT_CLASSIFICATION	1.4771481963974918E-4	DESIGN
important reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999409709586078	WITHOUT_CLASSIFICATION	5.902904139226249E-5	DESIGN
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.988372193977449	WITHOUT_CLASSIFICATION	0.011627806022550997	DESIGN
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9983043000920376	WITHOUT_CLASSIFICATION	0.001695699907962423	DESIGN
we did not find a collection element in the result set so we ensure that a collection is created with the owner's identifier since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9998835409243457	WITHOUT_CLASSIFICATION	1.1645907565432232E-4	DESIGN
this is a collection initializer so we must create a collection for each of the passed-in keys to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9558612238779584	WITHOUT_CLASSIFICATION	0.044138776122041604	DESIGN
grab its state from the resultset and keep it in the session (but don't yet initialize the object itself) note that we acquire lockmode.read even if it was not requested	WITHOUT_CLASSIFICATION	0.9999906104123476	WITHOUT_CLASSIFICATION	9.38958765246798E-6	DESIGN
a many-to-many decrement currentdepth here to allow join across the association table without exceeding max_fetch_depth (i.e. the "currentdepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9960083659632404	WITHOUT_CLASSIFICATION	0.00399163403675952	DESIGN
if not a composite key use "foo in (? ? ?)" for batching if no batch and not a composite key use "foo = ?"	WITHOUT_CLASSIFICATION	0.9983846860772547	WITHOUT_CLASSIFICATION	0.0016153139227451916	DESIGN
the user visible aliases which are unknown to the superclass these are not the actual "physical" sql aliases	WITHOUT_CLASSIFICATION	0.9999970296099256	WITHOUT_CLASSIFICATION	2.9703900743317093E-6	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999835478382044	WITHOUT_CLASSIFICATION	1.645216179555914E-5	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999835478382044	WITHOUT_CLASSIFICATION	1.645216179555914E-5	DESIGN
it does not refer to an alias of a projection look for a property	WITHOUT_CLASSIFICATION	0.999726196873384	WITHOUT_CLASSIFICATION	2.738031266159321E-4	DESIGN
determine if the collection elements are entities	WITHOUT_CLASSIFICATION	0.9998854408951218	WITHOUT_CLASSIFICATION	1.1455910487824243E-4	DESIGN
let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9996446163388278	WITHOUT_CLASSIFICATION	3.553836611721639E-4	DESIGN
translates an ast join type (i.e. the token type) into a joinfragment.xxx join type. @param astjointype the ast join type (from hqlsqltokentypes or sqltokentypes) @return a joinfragment.xxx join type. @see joinfragment @see sqltokentypes	WITHOUT_CLASSIFICATION	0.99283675246298	WITHOUT_CLASSIFICATION	0.007163247537019963	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9998111509702055	WITHOUT_CLASSIFICATION	1.8884902979455576E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9998111509702055	WITHOUT_CLASSIFICATION	1.8884902979455576E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9997353723681296	WITHOUT_CLASSIFICATION	2.646276318703678E-4	DESIGN
public list getcollectionaliases() { return collectionaliases } public list getcollectionowners() { return collectionowners } public list getcollectionowneraliases() { return collectionowneraliases } public list getcollectionpersisters() { return collectionpersisters } public map getalias2persister() { return alias2persister } public boolean iscollectioninitializer() { return iscollectioninitializer } public list getpersisters() { return persisters } public map getalias2owneralias() { return alias2owneralias } public list getscalartypes() { return scalartypes } public list getscalarcolumnaliases() { return scalarcolumnaliases } public list getpropertyresults() { return propertyresults } public list getcollectionpropertyresults() { return collectionresults } public map getalias2return() { return alias2return }	WITHOUT_CLASSIFICATION	0.9993959951250766	WITHOUT_CLASSIFICATION	6.040048749235387E-4	DESIGN
sqlqueryparser parser = new sqlqueryparser( sqlquery processor.getalias2persister() processor.getalias2return() aliases collaliases collpersisters suffixes collsuffixes ) sql = parser.process() namedparameterbindpoints = parser.getnamedparameters()	WITHOUT_CLASSIFICATION	0.9993354039507687	WITHOUT_CLASSIFICATION	6.64596049231326E-4	DESIGN
include the discriminator and class-level where but not filters	WITHOUT_CLASSIFICATION	0.999952544041103	WITHOUT_CLASSIFICATION	4.745595889708614E-5	DESIGN
sqlaliassuffixes[i] = element.getcolumnaliassuffix()	WITHOUT_CLASSIFICATION	0.9999128872065062	WITHOUT_CLASSIFICATION	8.711279349382712E-5	DESIGN
none because its the requested lock mode not the actual!	WITHOUT_CLASSIFICATION	0.9985530673498727	WITHOUT_CLASSIFICATION	0.001446932650127275	DESIGN
at this point we have (drivingsqlalias) the sql alias of the driving table corresponding to the given user alias. however the driving table is not (necessarily) the table against which we want to apply locks. mainly the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.99986978888473	WITHOUT_CLASSIFICATION	1.3021111527002357E-4	DESIGN
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9998736890064165	WITHOUT_CLASSIFICATION	1.263109935835703E-4	DESIGN
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9998762238070203	WITHOUT_CLASSIFICATION	1.2377619297958644E-4	DESIGN
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9984126200437793	WITHOUT_CLASSIFICATION	0.0015873799562208205	DESIGN
both many-to-one and one-to-one are represented as a property. entitypersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. so we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. the other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. if that assertion changes then this check needs to change as well. partially this is an issue with the overloading of the term "lazy" here	WITHOUT_CLASSIFICATION	0.9912849825483357	DESIGN	0.00871501745166418	WITHOUT_CLASSIFICATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999382757314259	WITHOUT_CLASSIFICATION	6.172426857415362E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999382757314259	WITHOUT_CLASSIFICATION	6.172426857415362E-5	DESIGN
roottablename = persistentclass.getroottable().getqualifiedname( factory.getdialect() factory.getdefaultcatalog() factory.getdefaultschema() )	WITHOUT_CLASSIFICATION	0.9997442242999653	WITHOUT_CLASSIFICATION	2.557757000345963E-4	DESIGN
subclasses	WITHOUT_CLASSIFICATION	0.9996897023130726	WITHOUT_CLASSIFICATION	3.102976869273588E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999557500394943	WITHOUT_CLASSIFICATION	4.424996050563834E-5	DESIGN
protected void initpropertypaths(final string pathfinal type typefinal string[] columnsfinal string[] formulatemplatesfinal mapping factory)throws mappingexception {addformulapropertypath(path type formulatemplates)initpropertypaths(path type columns formulatemplates factory)}	WITHOUT_CLASSIFICATION	0.9986036111882395	WITHOUT_CLASSIFICATION	0.0013963888117605185	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995866341247203	WITHOUT_CLASSIFICATION	4.1336587527976095E-4	DESIGN
custom sql (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999090536877849	WITHOUT_CLASSIFICATION	9.094631221510162E-5	DESIGN
moved up from abstractentitypersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9961447005212117	WITHOUT_CLASSIFICATION	0.0038552994787883	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995866341247203	WITHOUT_CLASSIFICATION	4.1336587527976095E-4	DESIGN
aliases for identifier ( alias.id ) skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.999837066983281	WITHOUT_CLASSIFICATION	1.6293301671904364E-4	DESIGN
decide which resultset to get the property value from	WITHOUT_CLASSIFICATION	0.9999279390265468	WITHOUT_CLASSIFICATION	7.206097345323047E-5	DESIGN
note it is conceptually possible that a usertype could map null to a non-null value so the following is arguable	WITHOUT_CLASSIFICATION	0.9997960299990087	WITHOUT_CLASSIFICATION	2.039700009913142E-4	DESIGN
the contract of entitytuplizer.determineconcretesubclassentityname says that returning null is an indication that the specified entity-name (this.getentityname) should be used.	WITHOUT_CLASSIFICATION	0.9943740005068189	WITHOUT_CLASSIFICATION	0.005625999493181208	DESIGN
need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. using the collection's key type causes problems with property-ref keys	WITHOUT_CLASSIFICATION	0.9961758554660985	WITHOUT_CLASSIFICATION	0.0038241445339014433	DESIGN
cache these since they are stateless this one could even be static	WITHOUT_CLASSIFICATION	0.999579793075119	WITHOUT_CLASSIFICATION	4.2020692488102854E-4	DESIGN
"as" is not in keywords	WITHOUT_CLASSIFICATION	0.9964770041606211	WITHOUT_CLASSIFICATION	0.0035229958393787906	DESIGN
--commented out by inspection (12/4/04 910 am) public abstract void addcondition(string alias string[] columns string condition)	WITHOUT_CLASSIFICATION	0.999995893688431	WITHOUT_CLASSIFICATION	4.106311569041939E-6	DESIGN
use the id column alias	WITHOUT_CLASSIFICATION	0.9999256629180147	WITHOUT_CLASSIFICATION	7.433708198530382E-5	DESIGN
private list aliases = new arraylist()	WITHOUT_CLASSIFICATION	0.9997266734490873	WITHOUT_CLASSIFICATION	2.7332655091270137E-4	DESIGN
columns.add(columnname) aliases.add(tablealias)	WITHOUT_CLASSIFICATION	0.9995866341247203	WITHOUT_CLASSIFICATION	4.1336587527976095E-4	DESIGN
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9872640811118086	WITHOUT_CLASSIFICATION	0.012735918888191497	DESIGN
revert to traditional hibernate behavior of setting initialpoolsize to minpoolsize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9991973963865821	WITHOUT_CLASSIFICATION	8.026036134178378E-4	DESIGN
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999018199184657	WITHOUT_CLASSIFICATION	9.818008153420933E-5	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9956994748674256	WITHOUT_CLASSIFICATION	0.004300525132574413	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9956994748674256	WITHOUT_CLASSIFICATION	0.004300525132574413	DESIGN
if an exception occurs during flush user must call rollback()	WITHOUT_CLASSIFICATION	0.9999688259243324	WITHOUT_CLASSIFICATION	3.1174075667600796E-5	DESIGN
essentially 1) if we have a local (hibernate) transaction in progress and it already has the usertransaction cached use that usertransaction to determine the status. 2) if a transaction manager has been located use that transaction manager to determine the status. 3) finally as the last resort try to lookup the usertransaction via jndi and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999996231289805	WITHOUT_CLASSIFICATION	3.7687101951648247E-7	DESIGN
package	WITHOUT_CLASSIFICATION	0.9989772430177805	WITHOUT_CLASSIFICATION	0.001022756982219523	DESIGN
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999089772778055	WITHOUT_CLASSIFICATION	9.102272219459067E-5	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9997849863970669	WITHOUT_CLASSIFICATION	2.1501360293305527E-4	DESIGN
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database) since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.579095471036647	WITHOUT_CLASSIFICATION	0.42090452896335284	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999971657618197	WITHOUT_CLASSIFICATION	2.834238180301826E-5	DESIGN
regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed) so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999970284610907	WITHOUT_CLASSIFICATION	2.9715389092998237E-6	DESIGN
then handle any user-defined entity modes	WITHOUT_CLASSIFICATION	0.9991227949687	WITHOUT_CLASSIFICATION	8.772050312998818E-4	DESIGN
establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9997825243490678	WITHOUT_CLASSIFICATION	2.1747565093229582E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9853289191221103	WITHOUT_CLASSIFICATION	0.014671080877889653	DESIGN
note this is being used from the process of shutting down a sessionfactory. specific things to consider (1) this clearing of the region should not propagate to other nodes on the cluster (if any) this is the cache-mode-local option bit (2) really just trying a best effort to cleanup after ourselves lock failures etc are not critical here this is the fail-silently option bit	WITHOUT_CLASSIFICATION	0.999980090400968	DESIGN	1.9909599031919577E-5	WITHOUT_CLASSIFICATION
need to extract the component values and check for subtype replacements	WITHOUT_CLASSIFICATION	0.9976731641059055	WITHOUT_CLASSIFICATION	0.002326835894094509	DESIGN
we ignore minimalputoverride. jbosscache putforexternalread is already about as minimal as we can get it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.99993402922661	WITHOUT_CLASSIFICATION	6.597077338998852E-5	DESIGN
for now just "re-flatten" the metamodel since this is temporary stuff anyway (hhh-1907)	WITHOUT_CLASSIFICATION	0.8494658460433332	WITHOUT_CLASSIFICATION	0.15053415395666683	DESIGN
configure the cache to use our tm	WITHOUT_CLASSIFICATION	0.999607018024698	WITHOUT_CLASSIFICATION	3.9298197530199903E-4	DESIGN
this solution would allow us to eliminate the owner arg to disassemble() but what if the collection was null and then later had elements added? seems unsafe session.getpersistencecontext().getcollectionentry( (persistentcollection) value ).getkey()	WITHOUT_CLASSIFICATION	0.7248654990185482	WITHOUT_CLASSIFICATION	0.2751345009814517	DESIGN
make sure jbc doesn't look one up	WITHOUT_CLASSIFICATION	0.9998710539922744	WITHOUT_CLASSIFICATION	1.289460077255815E-4	DESIGN
some collections are not lazy	WITHOUT_CLASSIFICATION	0.9931158292638621	WITHOUT_CLASSIFICATION	0.006884170736137868	DESIGN
here we don't want to suspend the tx. if we do 1) we might be caching query results that reflect uncommitted changes. no tx == no wl on cache node so other threads can prematurely see those query results 2) no tx == immediate replication. more overhead plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.8915634176439805	WITHOUT_CLASSIFICATION	0.1084365823560196	DESIGN
return the (fully resolved) identifier value but do not resolve to the actual referenced entity instance note the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999699260571141	WITHOUT_CLASSIFICATION	3.007394288591861E-5	DESIGN
add a zero (or quite low) timeout option so we don't block. ignore any timeoutexception. basically we forego caching the query result in order to avoid blocking. reads are done with suspended tx so they should not hold the lock for long. not caching the query result is ok since any subsequent read will just see the old result with its out-of-date timestamp that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999988578857122	WITHOUT_CLASSIFICATION	1.1421142876987083E-6	DESIGN
impl note takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method	WITHOUT_CLASSIFICATION	0.9997056610646353	WITHOUT_CLASSIFICATION	2.9433893536466837E-4	DESIGN
we have the jbcwritemutex so no other local thread will be trying to write this key. it's possible here some remote thread has come in and changed the values again but since we are reading the values to write to jbc right now we know we are writing the latest values i.e. we don't assume that what we cached in entry.update() above is what we should write to jbc now. our write could be redundant i.e. we are writing what some remote thread just came in an wrote. there is a chance that yet another remote thread will update us and we'll then overwrite that later data in jbc. but all remote nodes will ignore that change in their localcache the only place it will live will be in jbc where it can only effect the initial state transfer values on newly joined nodes (i.e. populatelocalcache()).	WITHOUT_CLASSIFICATION	0.9995837641242241	WITHOUT_CLASSIFICATION	4.16235875775947E-4	DESIGN
local cache so we use synchronization	WITHOUT_CLASSIFICATION	0.9986906305246798	WITHOUT_CLASSIFICATION	0.0013093694753201482	DESIGN
local cache so we use synchronization	WITHOUT_CLASSIFICATION	0.9986906305246798	WITHOUT_CLASSIFICATION	0.0013093694753201482	DESIGN
don't need to lock the cache here since if someone else inserted the same pk first the insert would fail	WITHOUT_CLASSIFICATION	0.9999583918736515	WITHOUT_CLASSIFICATION	4.1608126348548505E-5	DESIGN
we need to grab the version value from the entity otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9964362072858798	WITHOUT_CLASSIFICATION	0.0035637927141201923	DESIGN
we need to obtain the lock before any actions are executed since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999895060750912	WITHOUT_CLASSIFICATION	1.0493924908882575E-5	DESIGN
postdelete after actually deleting a row record the fact that the instance no longer exists on the database (needed for identity-column key generation) and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9083903640826619	WITHOUT_CLASSIFICATION	0.09160963591733809	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9997516257154543	WITHOUT_CLASSIFICATION	2.48374284545748E-4	DESIGN
todo what else to do here?	DESIGN	0.969015298319439	DESIGN	0.030984701680560934	WITHOUT_CLASSIFICATION
put() has nowait semantics is this really appropriate? note that it needs to be async replication never local or sync	DESIGN	0.681564213201055	DESIGN	0.3184357867989449	WITHOUT_CLASSIFICATION
'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. the need for it is intended to be alleviated with future developement thus it is not defined as an environment constant it is used to control whether we should consult the jdbc metadata to determine certain settings default values it is useful to not do this when the database may not be available (mainly in tools usage).	DESIGN	0.9997125294424738	DESIGN	2.874705575261608E-4	WITHOUT_CLASSIFICATION
todo get sql rendering out of this package!	DESIGN	0.5637763732765787	DESIGN	0.43622362672342124	WITHOUT_CLASSIFICATION
todo get sql rendering out of this package!	DESIGN	0.5637763732765787	DESIGN	0.43622362672342124	WITHOUT_CLASSIFICATION
todo eventually merge this with treecache and just add optional opt-lock support there.	DESIGN	0.9884449737946016	DESIGN	0.01155502620539838	WITHOUT_CLASSIFICATION
can happen because of the multiple ways cache.remove() can be invoked (	DESIGN	0.9999986095001047	WITHOUT_CLASSIFICATION	1.3904998954049546E-6	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea	DESIGN	0.9994117975377854	WITHOUT_CLASSIFICATION	5.882024622145671E-4	DESIGN
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9984982561520795	DESIGN	0.0015017438479204368	WITHOUT_CLASSIFICATION
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9984982561520795	DESIGN	0.0015017438479204368	WITHOUT_CLASSIFICATION
fixme hacky workaround to jbcache-1202	DESIGN	0.9998917945617722	DESIGN	1.0820543822781589E-4	WITHOUT_CLASSIFICATION
fixme hacky workaround to jbcache-1202	DESIGN	0.9998917945617722	DESIGN	1.0820543822781589E-4	WITHOUT_CLASSIFICATION
todo i considered validating ts cache config here but decided to defer unti gettimestampscacheinstance() in case the cache is never actually used	DESIGN	0.9929931738992844	DESIGN	0.007006826100715516	WITHOUT_CLASSIFICATION
todo is this a valid operation on a timestamps cache?	DESIGN	0.9682556189653354	DESIGN	0.03174438103466461	WITHOUT_CLASSIFICATION
todo is this a valid operation on a timestamps cache?	DESIGN	0.9682556189653354	DESIGN	0.03174438103466461	WITHOUT_CLASSIFICATION
todo why not use the timestamp in a dataversion?	DESIGN	0.9930766588442037	DESIGN	0.006923341155796345	WITHOUT_CLASSIFICATION
can happen because of the multiple ways cache.remove() can be invoked (	DESIGN	0.9999986095001047	WITHOUT_CLASSIFICATION	1.3904998954049546E-6	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea	DESIGN	0.9994117975377854	WITHOUT_CLASSIFICATION	5.882024622145671E-4	DESIGN
swaldman 2004-02-07 modify to allow null values to signify fall through to c3p0 poolconfig defaults	DESIGN	0.9986010032145732	WITHOUT_CLASSIFICATION	0.0013989967854267252	DESIGN
turn hibernate.c3p0. into c3p0. so c3p0 gets a chance to see all hibernate.c3p0.	DESIGN	0.9175816939001193	WITHOUT_CLASSIFICATION	0.08241830609988059	DESIGN
todo this bit actually has to be called after all cascades! but since identity insert is called synchronously instead of asynchronously as other actions it isn't	DESIGN	0.6106453224013759	DESIGN	0.38935467759862413	WITHOUT_CLASSIFICATION
todo reenable if we also fix the above todo	DESIGN	0.9394410656455064	DESIGN	0.06055893435449352	WITHOUT_CLASSIFICATION
todo inefficient if that cache is just going to ignore the updated state!	DESIGN	0.725205550245148	WITHOUT_CLASSIFICATION	0.274794449754852	DESIGN
we may be screwed here since the collection action is about to execute and we do not know the final owner key value	DESIGN	0.9999797830225255	WITHOUT_CLASSIFICATION	2.0216977474396784E-5	DESIGN
create an action that will evict collection and entity regions based on queryspaces (table names). todo cache the autodetected information and pass it in instead.	DESIGN	0.5773043262691773	WITHOUT_CLASSIFICATION	0.42269567373082284	DESIGN
todo what else to do here?	DESIGN	0.969015298319439	DESIGN	0.030984701680560934	WITHOUT_CLASSIFICATION
todo modify the class definition if not already transformed	DESIGN	0.8848292002501948	DESIGN	0.1151707997498052	WITHOUT_CLASSIFICATION
todo what else to do here?	DESIGN	0.969015298319439	DESIGN	0.030984701680560934	WITHOUT_CLASSIFICATION
this is called by sessionfactory irregardless we just disregard here could also add a check to sessionfactory to only conditionally call start	DESIGN	0.9373867139626937	WITHOUT_CLASSIFICATION	0.06261328603730629	DESIGN
this is called by sessionfactory irregardless we just disregard here could also add a check to sessionfactory to only conditionally call stop	DESIGN	0.9512306971838838	WITHOUT_CLASSIFICATION	0.04876930281611626	DESIGN
todo to handle concurrent writes correctly this should return a lock to the client	DESIGN	0.9990733944072768	DESIGN	9.266055927232195E-4	WITHOUT_CLASSIFICATION
put() has nowait semantics is this really appropriate? note that it needs to be async replication never local or sync	DESIGN	0.681564213201055	DESIGN	0.3184357867989449	WITHOUT_CLASSIFICATION
todo to handle concurrent writes correctly the client should pass in a lock	DESIGN	0.9909991057002777	DESIGN	0.00900089429972218	WITHOUT_CLASSIFICATION
todo assumes all collections disassemble to an array!	DESIGN	0.9284446016599602	WITHOUT_CLASSIFICATION	0.07155539834003978	DESIGN
todo reuse the preloadevent	DESIGN	0.9311353096285581	WITHOUT_CLASSIFICATION	0.06886469037144198	DESIGN
todo this was added to support initializing an entity's entityentry snapshot during reattach this should be refactored to instead expose a method to assemble a entityentry based on this state for return.	DESIGN	0.991605361443211	DESIGN	0.008394638556789041	WITHOUT_CLASSIFICATION
todo what is the implication of this?	DESIGN	0.8923737008436471	DESIGN	0.10762629915635295	WITHOUT_CLASSIFICATION
use count as the default. this mimics the old behavior although none might be a better option moving forward in the case of callable	DESIGN	0.5590495540351603	WITHOUT_CLASSIFICATION	0.44095044596483973	DESIGN
todo joinkeycolumnname & foreignkeycolumnname should be called either here or at a slightly higer level in the stack (to get all the information we need) right now hbmbinder does not support the	DESIGN	0.99851215967267	DESIGN	0.0014878403273299154	WITHOUT_CLASSIFICATION
todo suck this into initlaziness!	DESIGN	0.9435600423438898	DESIGN	0.056439957656110214	WITHOUT_CLASSIFICATION
we have to set up the table later!! yuck	DESIGN	0.9981961725173133	WITHOUT_CLASSIFICATION	0.0018038274826866945	DESIGN
todo better to degrade to lazy="false" if uninstrumented	DESIGN	0.6223439031941002	DESIGN	0.3776560968058999	WITHOUT_CLASSIFICATION
todo again how should this work for non-pojo entities?	DESIGN	0.9972564180251957	DESIGN	0.0027435819748043303	WITHOUT_CLASSIFICATION
todo this is a bit of copy/paste from indexedcollection.createprimarykey()	DESIGN	0.9829508080511524	DESIGN	0.017049191948847575	WITHOUT_CLASSIFICATION
this inner class implements a case statement.perhaps im being a bit over-clever here	DESIGN	0.976456167822102	WITHOUT_CLASSIFICATION	0.02354383217789806	DESIGN
todo bad implementation cos it depends upon ordering of mapping doc fixing this requires that collection/persistentclass gain access to the mappings reference from configuration (or the filterdefinitions map directly) sometime during configuration.buildsessionfactory (after all the types/filter-defs are known and before building persisters).	DESIGN	0.9909095942190494	DESIGN	0.0090904057809506	WITHOUT_CLASSIFICATION
use of a stringbuffer to workaround a jdk bug	DESIGN	0.9649142869104559	DESIGN	0.035085713089544064	WITHOUT_CLASSIFICATION
hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.999810533202692	WITHOUT_CLASSIFICATION	1.8946679730804929E-4	DESIGN
fixme get the persistentclass	DESIGN	0.5259392570465038	WITHOUT_CLASSIFICATION	0.47406074295349626	DESIGN
fixme get the persistentclass	DESIGN	0.5259392570465038	WITHOUT_CLASSIFICATION	0.47406074295349626	DESIGN
icky workaround for mysql bug	DESIGN	0.5232850625847836	WITHOUT_CLASSIFICATION	0.4767149374152165	DESIGN
todo somehow add the newly created foreign keys to the internal collection	DESIGN	0.9088544169735286	DESIGN	0.09114558302647138	WITHOUT_CLASSIFICATION
todo possibly relax that	DESIGN	0.5120061838001438	WITHOUT_CLASSIFICATION	0.48799381619985616	DESIGN
todo possibly relax that	DESIGN	0.5120061838001438	WITHOUT_CLASSIFICATION	0.48799381619985616	DESIGN
todo possibly relax that	DESIGN	0.5120061838001438	WITHOUT_CLASSIFICATION	0.48799381619985616	DESIGN
use of a stringbuffer to workaround a jdk bug	DESIGN	0.9649142869104559	DESIGN	0.035085713089544064	WITHOUT_CLASSIFICATION
use a degenerated strategy for backward compatibility	DESIGN	0.9985516731301126	WITHOUT_CLASSIFICATION	0.0014483268698872764	DESIGN
sets can be just a view of a part of another collection. do we need to copy it to be sure it won't be changing underneath us? ie. this.set.addall(set)	DESIGN	0.9969706831895876	WITHOUT_CLASSIFICATION	0.0030293168104125155	DESIGN
note that i parameter is now unused (delete it?)	DESIGN	0.9912700441073308	WITHOUT_CLASSIFICATION	0.008729955892669323	DESIGN
just to help out during the load (ugly i know)	DESIGN	0.9989809580540686	WITHOUT_CLASSIFICATION	0.0010190419459313233	DESIGN
todo safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.95219831427101	WITHOUT_CLASSIFICATION	0.04780168572898998	DESIGN
yick! need this for proper serialization/deserialization handling	DESIGN	0.8001207546936385	WITHOUT_CLASSIFICATION	0.19987924530636145	DESIGN
todo get sql rendering out of this package!	DESIGN	0.5637763732765787	DESIGN	0.43622362672342124	WITHOUT_CLASSIFICATION
todo get sql rendering out of this package!	DESIGN	0.5637763732765787	DESIGN	0.43622362672342124	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9997543180710643	WITHOUT_CLASSIFICATION	2.456819289357101E-4	DESIGN
todo get sql rendering out of this package!	DESIGN	0.5637763732765787	DESIGN	0.43622362672342124	WITHOUT_CLASSIFICATION
todo not sure this is correct could not find docs on how to do this.	DESIGN	0.9999644270646969	DESIGN	3.557293530317125E-5	WITHOUT_CLASSIFICATION
hsql has no blob/clob support . but just put these here for now!	DESIGN	0.9998965502561872	WITHOUT_CLASSIFICATION	1.0344974381292467E-4	DESIGN
does this need holdlock also? return tablename + " with (updlock rowlock holdlock)"	DESIGN	0.9977755755594834	WITHOUT_CLASSIFICATION	0.002224424440516664	DESIGN
sql-server at least needed this dropped after use strange!	DESIGN	0.9802695564306569	WITHOUT_CLASSIFICATION	0.019730443569343153	DESIGN
todo is there really any reason to kkeep trying if this fails once?	DESIGN	0.6272308275500028	WITHOUT_CLASSIFICATION	0.37276917244999713	DESIGN
tbd should this be varbinary($1)? registercolumntype(types.varbinary "binary($1)")	DESIGN	0.9761767439534302	WITHOUT_CLASSIFICATION	0.02382325604656978	DESIGN
is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9965821549087667	WITHOUT_CLASSIFICATION	0.00341784509123323	DESIGN
xmlforest requires a new kind of function constructor	DESIGN	0.9996873815725943	WITHOUT_CLASSIFICATION	3.126184274057535E-4	DESIGN
does this dialect support the alter table syntax?	DESIGN	0.9938173047940613	WITHOUT_CLASSIFICATION	0.006182695205938669	DESIGN
do we need to qualify index names with the schema name?	DESIGN	0.9955311755517763	WITHOUT_CLASSIFICATION	0.004468824448223738	DESIGN
does this dialect support the unique column syntax?	DESIGN	0.9856916419588242	WITHOUT_CLASSIFICATION	0.014308358041175771	DESIGN
does this dialect support check constraints?	DESIGN	0.8957300169843132	WITHOUT_CLASSIFICATION	0.10426998301568674	DESIGN
do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9939596386275337	WITHOUT_CLASSIFICATION	0.006040361372466343	DESIGN
does this dialect support the for update syntax?	DESIGN	0.9992434814141193	WITHOUT_CLASSIFICATION	7.565185858806471E-4	DESIGN
does this dialect support the oracle-style for update nowait syntax?	DESIGN	0.9992434814141193	WITHOUT_CLASSIFICATION	7.565185858806471E-4	DESIGN
does this dialect support for update of allowing particular rows to be locked?	DESIGN	0.9951935280551968	WITHOUT_CLASSIFICATION	0.0048064719448032475	DESIGN
note there is a wierd implementation in the client side	DESIGN	0.9998145803237766	WITHOUT_CLASSIFICATION	1.8541967622340416E-4	DESIGN
todo never reached since gettypename() actually throws an exception!	DESIGN	0.9870166283308618	WITHOUT_CLASSIFICATION	0.012983371669138268	DESIGN
todo should we additionally check the current isolation mode explicitly?	DESIGN	0.9485645661630565	DESIGN	0.05143543383694349	WITHOUT_CLASSIFICATION
todo remove this and just have subclasses use isolater/isolatedwork directly	DESIGN	0.9982156915153788	DESIGN	0.0017843084846210892	WITHOUT_CLASSIFICATION
todo should orphans really be deleted during lock???	DESIGN	0.7792350562429362	DESIGN	0.22076494375706388	WITHOUT_CLASSIFICATION
orphans should not be deleted during merge??	DESIGN	0.990697531054818	WITHOUT_CLASSIFICATION	0.009302468945182104	DESIGN
orphans should not be deleted during copy??	DESIGN	0.990697531054818	WITHOUT_CLASSIFICATION	0.009302468945182104	DESIGN
i suppose?	DESIGN	0.9986084153677144	WITHOUT_CLASSIFICATION	0.001391584632285624	DESIGN
todo suck this logic into the collection!	DESIGN	0.7150983142517268	DESIGN	0.2849016857482733	WITHOUT_CLASSIFICATION
todo an alternative is to check if the owner has changed if it hasn't then get the id from collection.getowner()	DESIGN	0.956443286953264	WITHOUT_CLASSIFICATION	0.04355671304673594	DESIGN
todorefactor + make this method private	DESIGN	0.980343100168706	WITHOUT_CLASSIFICATION	0.019656899831294036	DESIGN
todo we can actually just determine this from the incoming entityentry-s	DESIGN	0.9859432544266752	DESIGN	0.014056745573324751	WITHOUT_CLASSIFICATION
todo should this be an initializeentityeventlistener??? (watch out for performance!)	DESIGN	0.9550388868355656	DESIGN	0.04496111316443435	WITHOUT_CLASSIFICATION
todo better to pass the id in as an argument?	DESIGN	0.9462308143787155	WITHOUT_CLASSIFICATION	0.0537691856212845	DESIGN
todo potentially look at optimizing these two arrays	DESIGN	0.8986389773493063	WITHOUT_CLASSIFICATION	0.1013610226506937	DESIGN
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.9657040284203611	DESIGN	0.03429597157963897	WITHOUT_CLASSIFICATION
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.9657040284203611	DESIGN	0.03429597157963897	WITHOUT_CLASSIFICATION
todo temporary	DESIGN	0.9297651769240597	DESIGN	0.07023482307594024	WITHOUT_CLASSIFICATION
todo not quite sure about the full implications of this!	DESIGN	0.8513625996937787	DESIGN	0.1486374003062212	WITHOUT_CLASSIFICATION
todo not quite sure about the full implications of this!	DESIGN	0.8513625996937787	DESIGN	0.1486374003062212	WITHOUT_CLASSIFICATION
todo ugly here	DESIGN	0.9786277662338875	DESIGN	0.02137223376611252	WITHOUT_CLASSIFICATION
this is kinda the best we can do	DESIGN	0.9278273808560452	WITHOUT_CLASSIFICATION	0.07217261914395472	DESIGN
todo this needn't exclude subclasses	DESIGN	0.6385239981724133	DESIGN	0.3614760018275867	WITHOUT_CLASSIFICATION
todo need map? the prob is a proper key right?	DESIGN	0.9443731851273163	DESIGN	0.05562681487268367	WITHOUT_CLASSIFICATION
todo i'd much rather have this done from #endloadingcollection(collectionpersisterloadingcollectionentry)	DESIGN	0.979394900370192	DESIGN	0.02060509962980813	WITHOUT_CLASSIFICATION
todo hack!!! note here we cleanup the load context when we have no more local lce entries. this "works" for the time being because really only the collection load contexts are implemented. long term this cleanup should become part of the "close result set" processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.8764681991800086	WITHOUT_CLASSIFICATION	0.12353180081999136	DESIGN
todo should really move this log statement to collectiontype where this is used from	DESIGN	0.9998976256622579	DESIGN	1.0237433774205533E-4	WITHOUT_CLASSIFICATION
todo keep seperate notions of qt[] here for shallow/non-shallow queries	DESIGN	0.9176160975032881	WITHOUT_CLASSIFICATION	0.08238390249671199	DESIGN
todo add this info to the translator and aggregate it here	DESIGN	0.8476792304613117	DESIGN	0.15232076953868828	WITHOUT_CLASSIFICATION
todo move into collection type so we can use polymorphism!	DESIGN	0.999497511344722	DESIGN	5.024886552779356E-4	WITHOUT_CLASSIFICATION
todo should we check the current isolation mode explicitly?	DESIGN	0.9469372767527804	DESIGN	0.053062723247219556	WITHOUT_CLASSIFICATION
todo suck into event class	DESIGN	0.7325629534871663	DESIGN	0.26743704651283373	WITHOUT_CLASSIFICATION
do we even really need this? the update will fail anyway.	DESIGN	0.9999493663377601	WITHOUT_CLASSIFICATION	5.06336622400265E-5	DESIGN
hum should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.980929324847209	WITHOUT_CLASSIFICATION	0.019070675152791063	DESIGN
todo would it be better to do a refresh from db?	DESIGN	0.977256269039389	DESIGN	0.022743730960611042	WITHOUT_CLASSIFICATION
todo we use two visitors here inefficient!	DESIGN	0.5571780201544151	DESIGN	0.44282197984558497	WITHOUT_CLASSIFICATION
this class has no proxies (so do a shortcut)	DESIGN	0.9934511661142481	WITHOUT_CLASSIFICATION	0.006548833885751871	DESIGN
postload is needed for ejb3 todo reuse the postloadevent	DESIGN	0.9529777135363408	WITHOUT_CLASSIFICATION	0.047022286463659226	DESIGN
todo put this stuff back in to read snapshot from the second-level cache (needs some extra work)	DESIGN	0.8977952514469808	DESIGN	0.10220474855301924	WITHOUT_CLASSIFICATION
null or brand new collection this will also (inefficiently) handle arrays which have no snapshot so we can't do any better	DESIGN	0.973857373751106	WITHOUT_CLASSIFICATION	0.02614262624889392	DESIGN
todo is this 100% correct?	DESIGN	0.9909644500946138	DESIGN	0.009035549905386145	WITHOUT_CLASSIFICATION
todo iteratively get transient entities and retry merge until one of the following conditions 1) transientcopycache.size() == 0 2) transientcopycache.size() is not decreasing and copycache.size() is not increasing todo find out if retrying can add entities to copycache (don't think it can) for now just retry once throw transientobjectexception if there are still any transient entities	DESIGN	0.64368939948188	WITHOUT_CLASSIFICATION	0.35631060051812	DESIGN
entity name will not be available for non-pojo entities todo cache the entity name somewhere so that it is available to this exception	DESIGN	0.9819369492991986	DESIGN	0.01806305070080141	WITHOUT_CLASSIFICATION
todo we should throw an exception if we really know for sure that this is a detached instance rather than just assuming throw new staleobjectstateexception(entityname id)	DESIGN	0.9924522956306174	DESIGN	0.007547704369382573	WITHOUT_CLASSIFICATION
todo perhaps we should additionally require that the incoming entity version be equivalent to the defined unsaved-value?	DESIGN	0.9948802890529723	DESIGN	0.005119710947027721	WITHOUT_CLASSIFICATION
perhaps this should be an exception since it is only ever used in the above method?	DESIGN	0.9359666274553737	DESIGN	0.06403337254462634	WITHOUT_CLASSIFICATION
put a placeholder in entries so we don't recurse back and try to save() the same object again. question should this be done before onsave() is called? likewise should it be done before onupdate()?	DESIGN	0.9591552630811154	WITHOUT_CLASSIFICATION	0.040844736918884565	DESIGN
todo merge into one method!	DESIGN	0.8709142206651107	DESIGN	0.12908577933488935	WITHOUT_CLASSIFICATION
todo refactor to .sql package	DESIGN	0.8070858147446894	DESIGN	0.19291418525531065	WITHOUT_CLASSIFICATION
provides query splitting methods which were originally in querytranslator. <br> todo this will need to be refactored at some point. @author josh	DESIGN	0.9529869828332668	DESIGN	0.04701301716673311	WITHOUT_CLASSIFICATION
todo this is one of the ugliest and most fragile pieces of code in hibernate.	DESIGN	0.9639320263846931	DESIGN	0.036067973615306836	WITHOUT_CLASSIFICATION
todo temporary needed because currently persister is the one that creates and renders the join fragments for inheritence hierarchies	DESIGN	0.7605177511033498	DESIGN	0.23948224889665018	WITHOUT_CLASSIFICATION
todo better way?!?	DESIGN	0.7015957050709826	DESIGN	0.2984042949290174	WITHOUT_CLASSIFICATION
not possible to simply re-use the versionpropertynode here as it causes oom errors due to circularity (	DESIGN	0.9999413797193654	WITHOUT_CLASSIFICATION	5.862028063457799E-5	DESIGN
todothis is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.999819613432112	WITHOUT_CLASSIFICATION	1.8038656788798668E-4	DESIGN
todo this is a bit dodgy come up with a better way to check this (plus see above comment)	DESIGN	0.9998832321392307	DESIGN	1.1676786076933923E-4	WITHOUT_CLASSIFICATION
even here if only properties mapped to the "base table" are referenced in the set and where clauses this could be handled by the basicdelegate. todo decide if it is better performance-wise to perform that check or to simply use the multitableupdatedelegate	DESIGN	0.9959747091900966	DESIGN	0.004025290809903359	WITHOUT_CLASSIFICATION
todo switch statements are always evil! we already had bugs because of forgotten token types. use polymorphism for this!	DESIGN	0.655406107108023	DESIGN	0.344593892891977	WITHOUT_CLASSIFICATION
todo we really need to be able to deal with component paths here also this is difficult because the hql-sql grammar expects all those node types to be fromreferencenodes. one potential fix here would be to convert the intoclause to just use a fromclause/fromelement combo (as a child of the insertstatement) and move all this logic into the insertstatement. that's probably the easiest approach (read least amount of changes to the grammar and code) but just doesn't feel right as then an insert would contain 2 from-clauses	DESIGN	0.9999279622783135	DESIGN	7.203772168656334E-5	WITHOUT_CLASSIFICATION
really there are two situations where it should be ok to allow the insertion into properties defined on a superclass 1) union-subclass with an abstract root entity 2) discrim-subclass #1 is handled already because of the fact that unionsubclasspersister alreay always returns 0 for this call we may want to disallow it for discrim-subclass just for consistency-sake (currently does not work anyway)	DESIGN	0.8161341397299668	DESIGN	0.18386586027003318	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9997543180710643	WITHOUT_CLASSIFICATION	2.456819289357101E-4	DESIGN
implicit joins are always(?) ok to reuse	DESIGN	0.999993333839838	WITHOUT_CLASSIFICATION	6.666160162051338E-6	DESIGN
todo we may also want to check that the types here map to exactly one column/jdbc-type can't think of a situation where arithmetic expression between multi-column mappings makes any sense.	DESIGN	0.6334533410686628	DESIGN	0.36654665893133725	WITHOUT_CLASSIFICATION
we do not know either type blind guess!	DESIGN	0.9944403389734418	WITHOUT_CLASSIFICATION	0.005559661026558256	DESIGN
todo used to be exprnoparens! was this needed?	DESIGN	0.9999998678029697	DESIGN	1.3219703044142606E-7	WITHOUT_CLASSIFICATION
todo replace this with a more elegant solution.	DESIGN	0.9989926533086395	DESIGN	0.0010073466913605373	WITHOUT_CLASSIFICATION
todo should this really return null? if not figure out something better to do here.	DESIGN	0.977114158345905	DESIGN	0.022885841654094966	WITHOUT_CLASSIFICATION
todo get sql rendering out of this package!	DESIGN	0.5637763732765787	DESIGN	0.43622362672342124	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9997543180710643	WITHOUT_CLASSIFICATION	2.456819289357101E-4	DESIGN
ignore it the incoming property could not be found so we cannot be sure what to do here. at the very least the safest is to simply not apply any dereference toggling	DESIGN	0.5978524410185766	DESIGN	0.4021475589814235	WITHOUT_CLASSIFICATION
todo most of below was taken verbatim from dotnode should either delegate this logic or super-type it	DESIGN	0.9183767375469097	DESIGN	0.08162326245309022	WITHOUT_CLASSIFICATION
otherwise a trim-specification and/or a trim-character have been specified we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character the trim-source	DESIGN	0.9819993137126914	WITHOUT_CLASSIFICATION	0.018000686287308488	DESIGN
todo we should really just collect these from the various selectexpressions rather than regenerating here	DESIGN	0.9941508923540037	DESIGN	0.00584910764599633	WITHOUT_CLASSIFICATION
todo is this a bit ugly?	DESIGN	0.9869788945012085	DESIGN	0.013021105498791504	WITHOUT_CLASSIFICATION
need a better way to define the suffixes here	DESIGN	0.9391027531644294	WITHOUT_CLASSIFICATION	0.060897246835570656	DESIGN
todo something much better - look at the type of the other expression! todo have comparisonexpression and/or arithmeticexpression rules complete the resolution of boolean nodes.	DESIGN	0.9319118434824728	DESIGN	0.06808815651752727	WITHOUT_CLASSIFICATION
todo what amount of significant digits need to be supported here? - from the decimalformat docs [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.831972428377528	DESIGN	0.16802757162247203	WITHOUT_CLASSIFICATION
needed the "clazz_" check to work around union-subclasses todo is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.997782981636547	DESIGN	0.0022170183634530444	WITHOUT_CLASSIFICATION
we should actually rework this class to not implement parser and just process path expressions in the most convenient way.	DESIGN	0.9808100625426256	DESIGN	0.019189937457374386	WITHOUT_CLASSIFICATION
the class is now way to complex!	DESIGN	0.9976536393927072	WITHOUT_CLASSIFICATION	0.002346360607292726	DESIGN
todo get sql rendering out of here	DESIGN	0.694400792745342	WITHOUT_CLASSIFICATION	0.30559920725465806	DESIGN
todo is there a better way?	DESIGN	0.9742486143788636	DESIGN	0.025751385621136387	WITHOUT_CLASSIFICATION
must be done here because of side-effect! yuck	DESIGN	0.9978200559973907	WITHOUT_CLASSIFICATION	0.002179944002609288	DESIGN
name from a super query (a bit inelegant that it shows up here)	DESIGN	0.9890855075869863	WITHOUT_CLASSIFICATION	0.01091449241301376	DESIGN
we should reengineer this class so that rather than the current ad - hoc linear approach to processing a stream of tokens we instead build up a tree of expressions.	DESIGN	0.5217554299328531	DESIGN	0.4782445700671468	WITHOUT_CLASSIFICATION
this is ugly here but needed because its a subquery	DESIGN	0.9658025106183779	WITHOUT_CLASSIFICATION	0.03419748938162221	DESIGN
unhappy about this being public is there a better way?	DESIGN	0.9271186158867992	WITHOUT_CLASSIFICATION	0.07288138411320075	DESIGN
make sure this is a defined parameter and check the incoming value type todo what should be the actual exception type here?	DESIGN	0.9999681760019774	DESIGN	3.182399802269833E-5	WITHOUT_CLASSIFICATION
todo this constructor form is only used from constructor directly below us can it go away?	DESIGN	0.9997871556650432	DESIGN	2.1284433495686065E-4	WITHOUT_CLASSIFICATION
todo copy/paste from sessionimpl pull up!	DESIGN	0.6390717806547446	WITHOUT_CLASSIFICATION	0.36092821934525526	DESIGN
todo should remove this exposure and have all references to the session's batcher use the connectionmanager.	DESIGN	0.9935948546891369	DESIGN	0.006405145310863174	WITHOUT_CLASSIFICATION
todo should this get moved to persistentcontext? logically is persistentcontext the "thing" to which an interceptor gets attached?	DESIGN	0.9977996225270286	DESIGN	0.0022003774729714093	WITHOUT_CLASSIFICATION
todo what type?	DESIGN	0.824144159515097	DESIGN	0.1758558404849029	WITHOUT_CLASSIFICATION
todo should seriously consider not allowing a txn to begin from a child session can always route the request to the root session	DESIGN	0.9948123258543742	DESIGN	0.005187674145625857	WITHOUT_CLASSIFICATION
short-circuit for performance	DESIGN	0.9989949108891809	WITHOUT_CLASSIFICATION	0.0010050891108190684	DESIGN
not absolutely necessary but does help with aggressive release	DESIGN	0.949164283738388	WITHOUT_CLASSIFICATION	0.05083571626161192	DESIGN
todo remove these last two as batcher is no longer managing connections	DESIGN	0.767270044302655	DESIGN	0.2327299556973451	WITHOUT_CLASSIFICATION
work around a bug in all known connection pools.	DESIGN	0.972976560597744	WITHOUT_CLASSIFICATION	0.02702343940225602	DESIGN
todo make this the factory for "entity mode related" sessions also means making this the target of transaction-synch and the thing that knows how to cascade things between related sessions at that point perhaps this thing is a "sessioncontext" and connectionmanager is a "jdbccontext"? a "sessioncontext" should live in the impl package	DESIGN	0.9999964106587635	DESIGN	3.5893412364648607E-6	WITHOUT_CLASSIFICATION
todo does this really need to be here? does the collection already have it's own up-to-date snapshot?	DESIGN	0.9999326014586587	DESIGN	6.739854134130146E-5	WITHOUT_CLASSIFICATION
todo the i==entityspan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9917506217542736	DESIGN	0.008249378245726267	WITHOUT_CLASSIFICATION
this form used from annotations (?). essentially the same as the above using a resultset-mapping reference but without cachemode readonly and comment. fixme annotations do not use it so it can be remove from my pov @deprecated @param query the sql query string @param resultsetref the result-set-mapping name @param queryspaces any specified query spaces (used for auto-flushing) @param cacheable whether the query results are cacheable @param cacheregion if cacheable the region into which to store the results @param timeout a jdbc-level timeout to be applied @param fetchsize a jdbc-level fetch-size to be applied @param flushmode the flush mode to use for this query @param parametertypes parameter type map @param callable does the query string represent a callable object (i.e. proc)	DESIGN	0.9999947279644477	DESIGN	5.272035552412495E-6	WITHOUT_CLASSIFICATION
todo add the notion of enabled filters to the cachekey to differentiate filtered collections from non-filtered but cachekey is currently used for both collections and entities would ideally need to define two seperate ones currently this works in conjuction with the check on defaultinitializecollectioneventhandler.initializecollectionfromcache() (which makes sure to not read from cache with enabled filters). early exit!!!!!	DESIGN	0.9998012076755729	DESIGN	1.9879232442709472E-4	WITHOUT_CLASSIFICATION
for sets we should end the collection load after resolving the entities since we might call hashcode() on the elements todo or we could do this polymorphically and have two different operations implemented differently for arrays	DESIGN	0.9837076718875942	DESIGN	0.016292328112405816	WITHOUT_CLASSIFICATION
this is not very nice (and quite slow)	DESIGN	0.9361565843665293	DESIGN	0.06384341563347075	WITHOUT_CLASSIFICATION
use of trim() here is ugly?	DESIGN	0.9990657706195561	WITHOUT_CLASSIFICATION	9.342293804437463E-4	DESIGN
todo this is too conservative if all preceding joins were also inner joins we could use an inner join here	DESIGN	0.7666326493014023	DESIGN	0.2333673506985976	WITHOUT_CLASSIFICATION
todo look at the owning property and check that it isn't lazy (by instrumentation)	DESIGN	0.5684390829392084	DESIGN	0.4315609170607915	WITHOUT_CLASSIFICATION
todo inefficient	DESIGN	0.6693247817607341	WITHOUT_CLASSIFICATION	0.330675218239266	DESIGN
why does this matter?	DESIGN	0.9764707221266894	WITHOUT_CLASSIFICATION	0.023529277873310512	DESIGN
from the collection of associations locate oja for the manytoone corresponding to this persister to fully define the many-to-many we need that oja so that we can use its alias here todo is there a better way here?	DESIGN	0.9992239948501778	DESIGN	7.760051498222827E-4	WITHOUT_CLASSIFICATION
todo this class depends directly upon criteriaimpl in the impl package add a criteriaimplementor interface	DESIGN	0.9956872642226303	DESIGN	0.004312735777369702	WITHOUT_CLASSIFICATION
todo add a criteriaimplementor interface this class depends directly upon criteriaimpl in the impl package	DESIGN	0.9956872642226303	DESIGN	0.004312735777369702	WITHOUT_CLASSIFICATION
todo not so sure this is needed	DESIGN	0.8352766867778002	DESIGN	0.16472331322219977	WITHOUT_CLASSIFICATION
meant to handle dynamic instantiation queries(copy from queryloader)	DESIGN	0.998381473454185	WITHOUT_CLASSIFICATION	0.0016185265458150127	DESIGN
todo the order in which entities are saved may matter (e.g. a particular transient entity may need to be saved before other transient entities can be saved keep retrying the batch of transient entities until either 1) there are no transient entities left in transientcopycache or 2) no transient entities were saved in the last batch for now just run through the transient entities and retry the merge	DESIGN	0.7043860421802272	WITHOUT_CLASSIFICATION	0.29561395781977284	DESIGN
todo this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9999800778290917	DESIGN	1.9922170908228352E-5	WITHOUT_CLASSIFICATION
todo currently expects that the individual with expressions apply to the same sql table join. this may not be the case for joined-subclass where the property values might be coming from different tables in the joined hierarchy. at some point we should expand this to support that capability. however that has some difficulties 1) the biggest is how to handle ors when the individual comparisons are linked to different sql joins. 2) here we would need to track each comparison individually along with the join alias to which it applies and then pass that information back to the fromelement so it can pass it along to the joinsequence	DESIGN	0.9997496323686201	DESIGN	2.5036763137988206E-4	WITHOUT_CLASSIFICATION
this function has a template -> restore output apply the template and write the result out todo downcast to avoid using an interface? yuck.	DESIGN	0.9949707958329881	WITHOUT_CLASSIFICATION	0.005029204167012003	DESIGN
at some point the generate phase needs to be moved out of here because a single object-level dml might spawn multiple sql dml command executions. possible to just move the sql generation for dml stuff but for consistency-sake probably best to just move responsiblity for the generation phase completely into the delegates (queryloader/statementexecutor) themselves. also not sure why queryloader currently even has a dependency on this at all does it need it? ideally like to see the walker itself given to the delegates directly	DESIGN	0.9999994751092373	DESIGN	5.248907627972317E-7	WITHOUT_CLASSIFICATION
get the right object from the list would it be easier to just call getentity() ??	DESIGN	0.97612042910913	WITHOUT_CLASSIFICATION	0.023879570890869964	DESIGN
todo should we just collect these like with the collections above?	DESIGN	0.9761018298238687	DESIGN	0.023898170176131182	WITHOUT_CLASSIFICATION
todo better to handle dynamic filters through implicit dynamicfilterparameterspecification see the discussion there in dynamicfilterparameterspecification's javadocs as to why it is currently not done that way.	DESIGN	0.9991012559751856	DESIGN	8.987440248143056E-4	WITHOUT_CLASSIFICATION
/ used only for regression testing!!!! todo obviously get rid of all this junk ) /	DESIGN	0.9969662530507394	DESIGN	0.0030337469492605442	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9999380521195805	WITHOUT_CLASSIFICATION	6.194788041941911E-5	DESIGN
todo deprecated remove eventually	DESIGN	0.851563100509492	DESIGN	0.14843689949050798	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9999380521195805	WITHOUT_CLASSIFICATION	6.194788041941911E-5	DESIGN
todo improve this hack!	DESIGN	0.9968981915122536	DESIGN	0.0031018084877464593	WITHOUT_CLASSIFICATION
inheritance cycle detection (paranoid check)	DESIGN	0.9993813692555668	WITHOUT_CLASSIFICATION	6.186307444331482E-4	DESIGN
todo remove use of instanceof!	DESIGN	0.9222831264509254	DESIGN	0.07771687354907472	WITHOUT_CLASSIFICATION
shortcut	DESIGN	0.9998385950930877	WITHOUT_CLASSIFICATION	1.6140490691236473E-4	DESIGN
todo handle the case of a foreign key to something other than the pk	DESIGN	0.6748208161081212	DESIGN	0.3251791838918789	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9999380521195805	WITHOUT_CLASSIFICATION	6.194788041941911E-5	DESIGN
todo remove	DESIGN	0.7263088241125134	DESIGN	0.2736911758874866	WITHOUT_CLASSIFICATION
todo remove	DESIGN	0.7263088241125134	DESIGN	0.2736911758874866	WITHOUT_CLASSIFICATION
todo remove	DESIGN	0.7263088241125134	DESIGN	0.2736911758874866	WITHOUT_CLASSIFICATION
todo throw exception?	DESIGN	0.5469193707537845	DESIGN	0.45308062924621556	WITHOUT_CLASSIFICATION
todo throw exception? maybe warn if not the same?	DESIGN	0.9916066675666914	DESIGN	0.008393332433308759	WITHOUT_CLASSIFICATION
todo make entitypersister not depend on sessionfactoryimplementor interface if possible	DESIGN	0.9581934402079271	DESIGN	0.04180655979207306	WITHOUT_CLASSIFICATION
todo is there a more elegant way than downcasting?	DESIGN	0.9967987170698903	DESIGN	0.0032012829301096704	WITHOUT_CLASSIFICATION
todo encapsulate the protected instance variables!	DESIGN	0.9154698259035146	DESIGN	0.08453017409648549	WITHOUT_CLASSIFICATION
should indicate that we are processing an insert/update/delete query with a subquery implied via a collection property function. here we need to use the table name itself as the qualification alias. todo verify this works for all databases todo is this also the case in non-"indexed" scenarios?	DESIGN	0.9988485143919728	DESIGN	0.0011514856080273176	WITHOUT_CLASSIFICATION
todo copy/paste from insertrows()	DESIGN	0.5351711503509169	WITHOUT_CLASSIFICATION	0.4648288496490832	DESIGN
todo copy/paste from recreate()	DESIGN	0.5351711503509169	WITHOUT_CLASSIFICATION	0.4648288496490832	DESIGN
should this interface extend propertymapping?	DESIGN	0.9821697036186241	WITHOUT_CLASSIFICATION	0.017830296381375888	DESIGN
ie. the subquery! yuck!	DESIGN	0.9997608957297737	WITHOUT_CLASSIFICATION	2.3910427022636133E-4	DESIGN
todo move to .sql package!!	DESIGN	0.9566801895758632	DESIGN	0.043319810424136754	WITHOUT_CLASSIFICATION
todo code duplication with singletableentitypersister	DESIGN	0.8139689287925347	DESIGN	0.18603107120746534	WITHOUT_CLASSIFICATION
todo it would be really really nice to use this to also model components!	DESIGN	0.9990335078612872	DESIGN	9.664921387126481E-4	WITHOUT_CLASSIFICATION
todo two hashmap lookups here is one too many	DESIGN	0.8889118758974085	WITHOUT_CLASSIFICATION	0.11108812410259156	DESIGN
todo code duplication with joinedsubclassentitypersister	DESIGN	0.8139689287925347	DESIGN	0.18603107120746534	WITHOUT_CLASSIFICATION
perhaps not really necessary	DESIGN	0.8681727507513347	DESIGN	0.13182724924866535	WITHOUT_CLASSIFICATION
note this assumes something about how propertyselectfragment is implemented by the subclass! was tounqotedaliasstrings( getidentifercolumnnames() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.9888389849989684	WITHOUT_CLASSIFICATION	0.011161015001031695	DESIGN
note this assumes something about how propertyselectfragment is implemented by the subclass! was tounqotedaliasstrings( getdiscriminatorcolumnname() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.9888389849989684	WITHOUT_CLASSIFICATION	0.011161015001031695	DESIGN
todo should we use select .. for update?	DESIGN	0.9583674235249325	DESIGN	0.04163257647506739	WITHOUT_CLASSIFICATION
todo optimize this better!	DESIGN	0.8020096860843942	DESIGN	0.19799031391560581	WITHOUT_CLASSIFICATION
todo should we allow suffixes on these ?	DESIGN	0.9906893508351143	DESIGN	0.009310649164885738	WITHOUT_CLASSIFICATION
this is really ugly but necessary	DESIGN	0.5214685485863686	DESIGN	0.47853145141363146	WITHOUT_CLASSIFICATION
ugly little workaround for fact that createuniquekeyloaders() does not handle component properties	DESIGN	0.9997791429293172	DESIGN	2.2085707068265117E-4	WITHOUT_CLASSIFICATION
todo disable batch loading if lockmode > read?	DESIGN	0.9945897871377803	WITHOUT_CLASSIFICATION	0.005410212862219674	DESIGN
append the sql to return the generated identifier todo suck into insert	DESIGN	0.5472909540524764	DESIGN	0.45270904594752354	WITHOUT_CLASSIFICATION
todo i am not so sure about the exception handling in this bit!	DESIGN	0.9988479698027208	DESIGN	0.0011520301972790775	WITHOUT_CLASSIFICATION
todo is this really necessary????	DESIGN	0.8250075907437778	DESIGN	0.17499240925622211	WITHOUT_CLASSIFICATION
todo move to .sql package and refactor with similar things!	DESIGN	0.9858103965499596	DESIGN	0.014189603450040247	WITHOUT_CLASSIFICATION
todo implement functionality this might be painful to do here as the "join post processing" for the subquery has already been performed (meaning that for theta-join dialects the join conditions have already been moved over to the where clause). a "simple" solution here might to perform "join post processing" once for the entire query (including any subqueries) at one fell swoop	DESIGN	0.9994097157701486	DESIGN	5.90284229851354E-4	WITHOUT_CLASSIFICATION
todo this eventually needs to be removed	DESIGN	0.9408121672395082	DESIGN	0.059187832760491714	WITHOUT_CLASSIFICATION
kinda ugly but needed for collections with a "." node mapping	DESIGN	0.9489884189456501	WITHOUT_CLASSIFICATION	0.05101158105434992	DESIGN
is this ok?	DESIGN	0.9994506196002882	WITHOUT_CLASSIFICATION	5.493803997117224E-4	DESIGN
todo perhaps this should be some other runtimeexception	DESIGN	0.9999771125169137	DESIGN	2.2887483086378225E-5	WITHOUT_CLASSIFICATION
todo make this a bit nicer	DESIGN	0.9862215681119939	DESIGN	0.013778431888006159	WITHOUT_CLASSIFICATION
yuck	DESIGN	0.9984692310386134	WITHOUT_CLASSIFICATION	0.0015307689613865653	DESIGN
todo we should provide some way to get keys of collection of statistics to make it easier to retrieve from a gui perspective	DESIGN	0.9999811544399174	DESIGN	1.8845560082570474E-5	WITHOUT_CLASSIFICATION
@return collection removal fixme even if isinverse="true"?	DESIGN	0.8240073480019132	DESIGN	0.1759926519980868	WITHOUT_CLASSIFICATION
todo will need reference to session factory to fully complete hhh-1907	DESIGN	0.9544623245690186	DESIGN	0.045537675430981334	WITHOUT_CLASSIFICATION
todo currently keeps getters and setters (instead of propertyaccessors) because of the way getgetter() and getsetter() are implemented currently yuck!	DESIGN	0.8581033276710122	WITHOUT_CLASSIFICATION	0.14189667232898776	DESIGN
todo redesign how propertyaccessors are acquired	DESIGN	0.8950615915181243	DESIGN	0.10493840848187574	WITHOUT_CLASSIFICATION
todo yuck!!!	DESIGN	0.7311723922031403	WITHOUT_CLASSIFICATION	0.26882760779685977	DESIGN
todo yuck!!! fix after hhh-1907 is complete	DESIGN	0.993429948386614	DESIGN	0.006570051613385943	WITHOUT_CLASSIFICATION
todo need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9732371074614237	DESIGN	0.02676289253857634	WITHOUT_CLASSIFICATION
todo design new lifecycle for proxyfactory	DESIGN	0.59725742012337	WITHOUT_CLASSIFICATION	0.40274257987662987	DESIGN
todo would be nice to handle proxy classes elegantly!	DESIGN	0.9584058986344516	DESIGN	0.041594101365548405	WITHOUT_CLASSIFICATION
todo copy/paste from manytoonetype	DESIGN	0.5351711503509169	WITHOUT_CLASSIFICATION	0.4648288496490832	DESIGN
todo should this be session.instantiate(persister )?	DESIGN	0.9781453917247231	DESIGN	0.021854608275276848	WITHOUT_CLASSIFICATION
todo this is a bit arbitrary expose a switch to the user?	DESIGN	0.8341676020616532	DESIGN	0.16583239793834684	WITHOUT_CLASSIFICATION
todo implement caching?! proxies?!	DESIGN	0.8526570232169971	DESIGN	0.14734297678300293	WITHOUT_CLASSIFICATION
todo is this right??	DESIGN	0.6424030147794809	DESIGN	0.3575969852205191	WITHOUT_CLASSIFICATION
is this really necessary?	DESIGN	0.9892529793522646	WITHOUT_CLASSIFICATION	0.010747020647735382	DESIGN
todo move these to a new joinabletype abstract class extended by entitytype and persistentcollectiontype	DESIGN	0.9855272591529336	DESIGN	0.014472740847066439	WITHOUT_CLASSIFICATION
todo this is very suboptimal for some subclasses (namely components) since it does not take advantage of two-phase-load	DESIGN	0.9856419046642192	DESIGN	0.0143580953357808	WITHOUT_CLASSIFICATION
worrying about proxies is perhaps a little bit of overkill here	DESIGN	0.8202229492431579	DESIGN	0.17977705075684228	WITHOUT_CLASSIFICATION
note very hackish workaround!! todo fix this so it will work for non-pojo entity mode	DESIGN	0.999469324013215	DESIGN	5.306759867850802E-4	WITHOUT_CLASSIFICATION
todo fix this so it will work for non-pojo entity mode	DESIGN	0.9941507639388412	DESIGN	0.0058492360611587515	WITHOUT_CLASSIFICATION
we would probably refactor to have logicparser (builds a tree of simple expressions connected by and or not) expressionparser (translates from oo terms like foo foo.bar foo.bar.baz to sql terms like foos.id foos.bar_id etc) and pathexpressionparser (which does much the same thing it does now)	DESIGN	0.9982248336791182	WITHOUT_CLASSIFICATION	0.0017751663208818542	DESIGN
todo this is a little inefficient don't need to do a whole deep replaceelements() call	DESIGN	0.9987291050763025	DESIGN	0.0012708949236973932	WITHOUT_CLASSIFICATION
workaround for weblogic	DESIGN	0.8438946924565724	WITHOUT_CLASSIFICATION	0.15610530754342752	DESIGN
todo this dependency is kinda bad	DESIGN	0.9981483437457458	DESIGN	0.0018516562542541407	WITHOUT_CLASSIFICATION
ick!	DESIGN	0.9997543180710643	WITHOUT_CLASSIFICATION	2.456819289357101E-4	DESIGN
short cut check	DESIGN	0.9978627818331558	WITHOUT_CLASSIFICATION	0.002137218166844162	DESIGN
todo move to stringhelper?	DESIGN	0.9566801895758632	DESIGN	0.043319810424136754	WITHOUT_CLASSIFICATION
yukky! don't you have subclasses for that! todo race conditions can happen here	DESIGN	0.9186454025655878	WITHOUT_CLASSIFICATION	0.08135459743441222	DESIGN
todo we probably should have a statisticsnotpublishedexception to make it clean	DESIGN	0.9979583537258448	DESIGN	0.0020416462741550886	WITHOUT_CLASSIFICATION
fixme hack to work around fact that calling node added = root.addchild( fqn ) doesn't properly set the version on the node	DESIGN	0.999999736290999	DESIGN	2.6370900096959554E-7	WITHOUT_CLASSIFICATION
todo i considered validating the presence of the ts cache here but decided to defer unti getquerycacheinstance() in case the cache is never actually used	DESIGN	0.9924808542615684	DESIGN	0.007519145738431537	WITHOUT_CLASSIFICATION
need to do that here rather than in the save event listener to let the post insert events to have a id-filled entity when identity is used (ejb3)	DESIGN	0.8544761095530489	DESIGN	0.14552389044695122	WITHOUT_CLASSIFICATION
todo simply remove this override if we fix the above todos	DESIGN	0.9983085909778764	DESIGN	0.0016914090221236478	WITHOUT_CLASSIFICATION
this is used by sessionfactoryimpl to hand to the generated sessionimpl was the only reason i could see that we cannot just use null as settings.cacheprovider	DESIGN	0.7785030817751324	DESIGN	0.22149691822486756	WITHOUT_CLASSIFICATION
this is done here 'cos we might only know the type here (ugly!) todo improve this a lot	DESIGN	0.9970088788405782	DESIGN	0.0029911211594216753	WITHOUT_CLASSIFICATION
todo would love to have this work on a notification basis where the successful binding of an entity/subclass would emit a notification which the extendsqueue entries could react to	DESIGN	0.6503038594749614	DESIGN	0.34969614052503867	WITHOUT_CLASSIFICATION
todo not sure the best way to handle this. the non-performant way	DESIGN	0.9953508646493164	DESIGN	0.004649135350683593	WITHOUT_CLASSIFICATION
would be better to use the element-type to determine whether the old and the new are equal here the problem being we do not necessarily have access to the element type in all cases	DESIGN	0.982864877740701	WITHOUT_CLASSIFICATION	0.017135122259299005	DESIGN
this next bit is to allow for both unsaved-value="negative" and for "older" behavior where version number did not get seeded if it was already set in the object todo shift it into unsaved-value strategy	DESIGN	0.8886950797130456	DESIGN	0.11130492028695436	WITHOUT_CLASSIFICATION
merges don't cascade to uninitialized collections todo perhaps this does need to cascade after all.	DESIGN	0.9996876004385217	DESIGN	3.123995614783536E-4	WITHOUT_CLASSIFICATION
todo an alternative is to check if the owner has changed if it hasn't then return collection.getowner()	DESIGN	0.9782580189103647	WITHOUT_CLASSIFICATION	0.021741981089635293	DESIGN
it is possible that the tree-walking in outerjoinloader can get to an association defined by a subclass in which case the property-ref might refer to a property defined on a subclass of the current class in this case the table name is not known - this temporary solution assumes that the property-ref refers to a property of the subclass table that the association belongs to (a reasonable guess) todo fix this add outerjoinloadable.getsubclasspropertytablename(string propertyname)	DESIGN	0.999999985858961	DESIGN	1.4141039022935042E-8	WITHOUT_CLASSIFICATION
this only works because collection entries are kept in a sequenced map by persistence context (maybe we should do like entities and keep a separate sequences set) todo calling entryset on an identitymap is slow!!	DESIGN	0.9917453754014699	DESIGN	0.008254624598530167	WITHOUT_CLASSIFICATION
important to account for newly saved entities in query todo some kind of check for new status	DESIGN	0.9953593142460948	DESIGN	0.004640685753905224	WITHOUT_CLASSIFICATION
brand new collection todo or an array!! we can't lock objects with arrays now??	DESIGN	0.8067247063478687	DESIGN	0.19327529365213122	WITHOUT_CLASSIFICATION
todo if object was an uninitialized proxy this is inefficient resulting in two sql selects	DESIGN	0.9400122951705794	WITHOUT_CLASSIFICATION	0.05998770482942067	DESIGN
before cascade! todo should this be session.instantiate(persister )?	DESIGN	0.9395723674488451	DESIGN	0.06042763255115502	WITHOUT_CLASSIFICATION
todo absolutely no usages of this constructor form can it go away?	DESIGN	0.617586291116238	DESIGN	0.3824137088837619	WITHOUT_CLASSIFICATION
todo need to find a clean way to handle the "event source" role a seperate classs responsible for generating/dispatching events just duplicates most of the session methods passing around seperate reto interceptor factory actionqueue and persistentcontext is not manageable	DESIGN	0.9999999779287871	DESIGN	2.207121287296638E-8	WITHOUT_CLASSIFICATION
todo remove	DESIGN	0.7263088241125134	DESIGN	0.2736911758874866	WITHOUT_CLASSIFICATION
aliasrefnode.resolve( false false aliasrefnode.gettext() ) todo is it kosher to do it here? todo is it kosher to do it here?	DESIGN	0.9404745764166488	DESIGN	0.05952542358335125	WITHOUT_CLASSIFICATION
no explicit select expression render the id and properties projection lists for every persister in the from clause into a single 'token node'. todo the only reason we need this stuff now is collection filters we should get rid of derived select clause completely!	DESIGN	0.9955475092257406	DESIGN	0.004452490774259425	WITHOUT_CLASSIFICATION
todo an optimization here would be to consider cascade deletes and not gen those delete statements the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> the table info gotten here should really be self-contained (i.e. a class representation defining all the needed attributes) then we could then get an array of those	DESIGN	0.9998474249871676	DESIGN	1.5257501283237227E-4	WITHOUT_CLASSIFICATION
todo get sql rendering out of here create an ast for the join expressions. use the sql generator grammar to generate the sql text for the index expression.	DESIGN	0.9810619290031523	WITHOUT_CLASSIFICATION	0.01893807099684783	DESIGN
todo this really needs to be delayed unitl after we definitively know all node types where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DESIGN	0.8395260245350583	DESIGN	0.16047397546494171	WITHOUT_CLASSIFICATION
todo figure out a better way to get the from elements in a proper tree structure. if this is not the destination of a many-to-many add it as a child of the origin.	DESIGN	0.9871835931829231	DESIGN	0.01281640681707672	WITHOUT_CLASSIFICATION
work around that crazy issue where the tree contains "empty" fromelements (no text) afaict this is caused by fromelementfactory.createcollectionjoin()	DESIGN	0.9936833205160509	WITHOUT_CLASSIFICATION	0.006316679483949066	DESIGN
todo this class does too many things! we need a different kind of path expression parser for each of the diffferent ways in which path expressions can occur	DESIGN	0.9974321432685563	DESIGN	0.0025678567314436538	WITHOUT_CLASSIFICATION
real hacky used to count the nesting of parentheses	DESIGN	0.9560129163034492	WITHOUT_CLASSIFICATION	0.04398708369655073	DESIGN
todo would be really nice to cache the spec on the query-def so as to not have to re-calc the hash currently not doable though because of the resultset-ref stuff	DESIGN	0.934856950012533	WITHOUT_CLASSIFICATION	0.06514304998746702	DESIGN
for arrays we should end the collection load before resolving the entities since the actual array instances are not instantiated during loading todo or we could do this polymorphically and have two different operations implemented differently for arrays	DESIGN	0.6352766623347007	WITHOUT_CLASSIFICATION	0.3647233376652992	DESIGN
polymorphism not really handled completely correctly perhapswell actually its ok assuming that the entity name used in the lookup is the same as the the one used here which it will be	DESIGN	0.9891630031750444	WITHOUT_CLASSIFICATION	0.010836996824955562	DESIGN
todo should "record" how many properties we have reffered to - and if we don't get'em'all we throw an exception! way better than trial and error )	DESIGN	0.9999892587107614	DESIGN	1.0741289238590336E-5	WITHOUT_CLASSIFICATION
very important!!!! - this class needs to be free of any static references to any cglib or javassist classes. otherwise users will always need both on their classpaths no matter which (if either) they use. another option here would be to remove the hibernate.ispropertyinitialized() method and have the users go through the sessionfactory to get this information.	DESIGN	0.5919661824713305	DESIGN	0.40803381752866963	WITHOUT_CLASSIFICATION
todo is it really neceassry to provide configuration to collectionpersisters ? should it not be enough with associated class ? or why does entitypersister's not get access to configuration ? the only reason i could see that configuration gets passed to collection persisters is so that they can look up the dom4j node name of the entity element in case no explicit node name was applied at the collection element level. are you kidding me? trivial to fix then. just store and expose the node name on the entity persister (which the collection persister looks up anyway via other means).	DESIGN	0.9999999864728323	DESIGN	1.3527167725561524E-8	WITHOUT_CLASSIFICATION
for backward compatibility allow a set with no not-null element columns using all columns in the row locater sql todo create an implicit not null constraint on all cols?	DESIGN	0.6678392408974575	DESIGN	0.3321607591025424	WITHOUT_CLASSIFICATION
spaces todo i'm not sure but perhaps we should exclude abstract denormalized tables?	DESIGN	0.9995247366403064	DESIGN	4.75263359693498E-4	WITHOUT_CLASSIFICATION
workaround for backward compatibility of sets with no not-null columns assume all columns are used in the row locator sql	DESIGN	0.8126375761665071	WITHOUT_CLASSIFICATION	0.18736242383349286	DESIGN
note that this method could easily be moved up to basicentitypersister if we ever needed to reuse it from other subclasses	DESIGN	0.9376888590942899	WITHOUT_CLASSIFICATION	0.06231114090571014	DESIGN
index += getpropertycolumnspan( i ) todo this is kinda slow	DESIGN	0.963941059593137	DESIGN	0.03605894040686287	WITHOUT_CLASSIFICATION
todo need some caching scheme? really comes down to decision regarding amount of state (if any) kept on propertyaccessors	DESIGN	0.7503676514733798	DESIGN	0.24963234852662008	WITHOUT_CLASSIFICATION
todo here is why we need to make bytecode provider global ( todo again fix this after hhh-1907 is complete	DESIGN	0.9999636417845531	DESIGN	3.635821544698294E-5	WITHOUT_CLASSIFICATION
todo yuck! this is not quite good enough it's a quick hack around the problem of having a to-one association that refers to an embedded component	DESIGN	0.9999999991349332	DESIGN	8.650667683015164E-10	WITHOUT_CLASSIFICATION
for dom4j "collections" only todo it would be better if this was done at the higher level by printer	DESIGN	0.7849553666372342	DESIGN	0.2150446333627658	WITHOUT_CLASSIFICATION
would be great to move all this below here into another method that could also be used from the new scrolling stuff. would need to change the way the max-row stuff is handled (i.e. behind an interface) so that i could do the control breaking at the means to know when to stop	DESIGN	0.999999796553146	DESIGN	2.034468540098754E-7	WITHOUT_CLASSIFICATION
todo can we always use the "null property" approach for everything?	DESIGN	0.9661119151657008	DESIGN	0.0338880848342992	WITHOUT_CLASSIFICATION
polymorphism comment above	DESIGN	0.9999521498825314	WITHOUT_CLASSIFICATION	4.785011746850909E-5	DESIGN
some messy complex stuff here since createcriteria() can take an aliased path or a path rooted at the creating criteria instance	DESIGN	0.9999899257576681	WITHOUT_CLASSIFICATION	1.0074242331801119E-5	DESIGN
todo really bad evil hack to fix!!!	DESIGN	0.9999999878822912	DESIGN	1.2117708976230889E-8	WITHOUT_CLASSIFICATION
ugly hack for cases like "elements(foo.bar.collection)" (multi-part path expression ending in elements or indices)	DESIGN	0.995548851398263	DESIGN	0.0044511486017370025	WITHOUT_CLASSIFICATION
try block is a hack around fact that currently tuplizers are not given the opportunity to resolve a subclass entity name. this allows the (we assume custom) interceptor the ability to influence this decision if we were not able to based on the given entityname	DESIGN	0.9999971333799685	DESIGN	2.8666200314085885E-6	WITHOUT_CLASSIFICATION
/ hack alert !!!!!!!!!!!!!!!!!!!!!!!!!!!! attempt to work around "ghost" impliedfromelements that occasionally show up between the actual things being joined. this consistently occurs from index nodes (at least against many-to-many). not sure if there are other conditions essentially look-ahead to the next fromelement that actually writes something to the sql	DESIGN	0.9252718501380843	DESIGN	0.07472814986191566	WITHOUT_CLASSIFICATION
init the table here instead of earlier so that we can get a quoted table name todo would it be better to simply pass the qualified table name instead of splitting it up into schema/catalog/table names	DESIGN	0.9336474571190465	DESIGN	0.06635254288095355	WITHOUT_CLASSIFICATION
todo would be great to have a mapping#hasnonidentifierpropertynamedid method i don't believe that mapping#getreferencedpropertytype accounts for the identifier property so if it returns for a property named 'id' then we should have a non-id field named id	DESIGN	0.9964284295975149	DESIGN	0.0035715704024851013	WITHOUT_CLASSIFICATION
todo is this really necessary????	DESIGN	0.8250075907437778	DESIGN	0.17499240925622211	WITHOUT_CLASSIFICATION
todo ideally we need the construction of propertyaccessor to take the following 1) entitymode 2) entitymode-specific data (i.e. the classname for pojo entities) 3) property-specific data based on the entitymode (i.e. property-name or dom4j-node-name) the easiest way with the introduction of the new runtime-metamodel classes would be the the following predicates 1) propertyaccessorfactory.getpropertyaccessor() takes references to both a org.hibernate.metadata.entitymodemetadata and org.hibernate.metadata.property 2) what is now termed a "propertyaccessor" stores any values needed from those two pieces of information 3) code can then simply call propertyaccess.getgetter() with no parameters likewise with propertyaccessor.getsetter()	DESIGN	0.9565715070718314	DESIGN	0.043428492928168645	WITHOUT_CLASSIFICATION
todo this is temporary in that the end result will probably not take a property reference per-se.	DESIGN	0.9992586339457589	DESIGN	7.413660542412551E-4	WITHOUT_CLASSIFICATION
todo this eventually needs to be removed	DESIGN	0.9408121672395082	DESIGN	0.059187832760491714	WITHOUT_CLASSIFICATION
todo make this a bit nicer	DESIGN	0.9862215681119939	DESIGN	0.013778431888006159	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9974186053939126	DESIGN	0.002581394606087399	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9974186053939126	DESIGN	0.002581394606087399	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9974186053939126	DESIGN	0.002581394606087399	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9974186053939126	DESIGN	0.002581394606087399	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9974186053939126	DESIGN	0.002581394606087399	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9974186053939126	DESIGN	0.002581394606087399	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9974186053939126	DESIGN	0.002581394606087399	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9974186053939126	DESIGN	0.002581394606087399	WITHOUT_CLASSIFICATION
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9984982561520795	DESIGN	0.0015017438479204368	WITHOUT_CLASSIFICATION
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9984982561520795	DESIGN	0.0015017438479204368	WITHOUT_CLASSIFICATION
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9984982561520795	DESIGN	0.0015017438479204368	WITHOUT_CLASSIFICATION
todo probably better to calculate these and pass them in as it'll be more performant	DESIGN	0.9762889269406929	DESIGN	0.023711073059307072	WITHOUT_CLASSIFICATION
