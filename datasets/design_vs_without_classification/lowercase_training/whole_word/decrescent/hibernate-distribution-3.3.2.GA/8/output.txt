test out the optimizer	WITHOUT_CLASSIFICATION	0.9999852745686977	WITHOUT_CLASSIFICATION	1.4725431302278635E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999767705954378	WITHOUT_CLASSIFICATION	2.3229404562199595E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999767705954378	WITHOUT_CLASSIFICATION	2.3229404562199595E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999767705954378	WITHOUT_CLASSIFICATION	2.3229404562199595E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999767705954378	WITHOUT_CLASSIFICATION	2.3229404562199595E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999767705954378	WITHOUT_CLASSIFICATION	2.3229404562199595E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999767705954378	WITHOUT_CLASSIFICATION	2.3229404562199595E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999767705954378	WITHOUT_CLASSIFICATION	2.3229404562199595E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9997275391583161	WITHOUT_CLASSIFICATION	2.724608416838616E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9997275391583161	WITHOUT_CLASSIFICATION	2.724608416838616E-4	DESIGN
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9996899522003556	WITHOUT_CLASSIFICATION	3.100477996444459E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.999620800350095	WITHOUT_CLASSIFICATION	3.79199649905041E-4	DESIGN
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999453710194066	WITHOUT_CLASSIFICATION	5.462898059345361E-5	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999834555735531	WITHOUT_CLASSIFICATION	1.654442644692208E-5	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999834555735531	WITHOUT_CLASSIFICATION	1.654442644692208E-5	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999997898380282	WITHOUT_CLASSIFICATION	2.1016197190585764E-7	DESIGN
invokeinterface invoke enabled.getinterceptfieldcallback()	WITHOUT_CLASSIFICATION	0.9999024045817473	WITHOUT_CLASSIFICATION	9.759541825273124E-5	DESIGN
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9998877382801029	WITHOUT_CLASSIFICATION	1.122617198970199E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9994332431507016	WITHOUT_CLASSIFICATION	5.667568492984099E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999941353565907	WITHOUT_CLASSIFICATION	5.864643409378139E-6	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999941353565907	WITHOUT_CLASSIFICATION	5.864643409378139E-6	DESIGN
long	WITHOUT_CLASSIFICATION	0.9998070634189894	WITHOUT_CLASSIFICATION	1.9293658101053913E-4	DESIGN
just decrement the lock don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999714208849059	WITHOUT_CLASSIFICATION	2.8579115094155393E-5	DESIGN
decode row selection	WITHOUT_CLASSIFICATION	0.9999430033407004	WITHOUT_CLASSIFICATION	5.6996659299499104E-5	DESIGN
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9997572551719671	WITHOUT_CLASSIFICATION	2.427448280327827E-4	DESIGN
again ccs did not have such a concept but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not jta aware.	WITHOUT_CLASSIFICATION	0.9999006292787442	WITHOUT_CLASSIFICATION	9.937072125583387E-5	DESIGN
check	WITHOUT_CLASSIFICATION	0.9995211925765206	WITHOUT_CLASSIFICATION	4.788074234794229E-4	DESIGN
row id	WITHOUT_CLASSIFICATION	0.9998801141930013	WITHOUT_CLASSIFICATION	1.1988580699875457E-4	DESIGN
composite-id	WITHOUT_CLASSIFICATION	0.999620800350095	WITHOUT_CLASSIFICATION	3.79199649905041E-4	DESIGN
discriminator	WITHOUT_CLASSIFICATION	0.9996209937370693	WITHOUT_CLASSIFICATION	3.7900626293077544E-4	DESIGN
property prop = new property() prop.setname("id") prop.setpropertyaccessorname("embedded") prop.setvalue(id) entity.setidentifierproperty(prop)	WITHOUT_CLASSIFICATION	0.999851937071624	WITHOUT_CLASSIFICATION	1.4806292837606138E-4	DESIGN
dynamic insert	WITHOUT_CLASSIFICATION	0.9998360122286597	WITHOUT_CLASSIFICATION	1.6398777134024923E-4	DESIGN
persister	WITHOUT_CLASSIFICATION	0.9993236347664609	WITHOUT_CLASSIFICATION	6.76365233539063E-4	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9990189622413908	WITHOUT_CLASSIFICATION	9.810377586092413E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9999072368563368	WITHOUT_CLASSIFICATION	9.276314366323609E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9999072368563368	WITHOUT_CLASSIFICATION	9.276314366323609E-5	DESIGN
generated properties can never be insertable	WITHOUT_CLASSIFICATION	0.9987580289961198	WITHOUT_CLASSIFICATION	0.0012419710038802073	DESIGN
table	WITHOUT_CLASSIFICATION	0.9999150246774472	WITHOUT_CLASSIFICATION	8.49753225527881E-5	DESIGN
by default natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999257648184634	WITHOUT_CLASSIFICATION	7.423518153663376E-5	DESIGN
( (column) ( (simplevalue) ic.getindex() ).getcolumniterator().next() ).setnullable(false)	WITHOUT_CLASSIFICATION	0.997662240337658	WITHOUT_CLASSIFICATION	0.0023377596623419903	DESIGN
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.7783903404689487	WITHOUT_CLASSIFICATION	0.22160965953105127	DESIGN
build a resultsetmappingdefinition given a containing element for the "return-xxx" elements @param resultsetelem the element containing the return definitions. @param path no clue @param mappings the current processing state. @return the description of the mappings	WITHOUT_CLASSIFICATION	0.9999684653676985	WITHOUT_CLASSIFICATION	3.1534632301534184E-5	DESIGN
private boolean showsql private boolean formatsql	WITHOUT_CLASSIFICATION	0.9992931226519469	WITHOUT_CLASSIFICATION	7.068773480531569E-4	DESIGN
public boolean isshowsqlenabled() { return showsql } public boolean isformatsqlenabled() { return formatsql }	WITHOUT_CLASSIFICATION	0.9987116240071551	WITHOUT_CLASSIFICATION	0.0012883759928449003	DESIGN
set a custom entity resolver. this entity resolver must be set before addxxx(misc) call. default value is {@link org.hibernate.util.dtdentityresolver} @param entityresolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9985738510063388	WITHOUT_CLASSIFICATION	0.0014261489936611286	DESIGN
final list extendsqueue	WITHOUT_CLASSIFICATION	0.9999128066137538	WITHOUT_CLASSIFICATION	8.719338624610615E-5	DESIGN
if close() is called guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999350147059678	WITHOUT_CLASSIFICATION	6.498529403229076E-5	DESIGN
if a threadlocalsessioncontext-bound session happens to get serialized to be completely correct we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9870759214400333	WITHOUT_CLASSIFICATION	0.012924078559966615	DESIGN
on the inverse it makes sense that if a threadlocalsessioncontext- bound session then gets deserialized to go ahead and re-bind it to the threadlocalsessioncontext session map.	WITHOUT_CLASSIFICATION	0.9723947123039192	WITHOUT_CLASSIFICATION	0.027605287696080897	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9995639484238283	WITHOUT_CLASSIFICATION	4.360515761717163E-4	DESIGN
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9998875958742865	WITHOUT_CLASSIFICATION	1.1240412571349089E-4	DESIGN
optimisticcache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998725904398542	WITHOUT_CLASSIFICATION	1.274095601458992E-4	DESIGN
cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999684690621896	WITHOUT_CLASSIFICATION	3.153093781038995E-4	DESIGN
option.setdataversion( nonlockingdataversion.instance )	WITHOUT_CLASSIFICATION	0.9980080635409448	WITHOUT_CLASSIFICATION	0.0019919364590551686	DESIGN
do the put outside the scope of the jta txn	WITHOUT_CLASSIFICATION	0.9999083776536182	WITHOUT_CLASSIFICATION	9.162234638187808E-5	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9997622491590575	WITHOUT_CLASSIFICATION	2.3775084094252203E-4	DESIGN
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (npes)	WITHOUT_CLASSIFICATION	0.9546782057545854	WITHOUT_CLASSIFICATION	0.045321794245414625	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.99979531296426	WITHOUT_CLASSIFICATION	2.046870357400048E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9997622491590575	WITHOUT_CLASSIFICATION	2.3775084094252203E-4	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.99979531296426	WITHOUT_CLASSIFICATION	2.046870357400048E-4	DESIGN
do the failfast put outside the scope of the jta txn	WITHOUT_CLASSIFICATION	0.9999083776536182	WITHOUT_CLASSIFICATION	9.162234638187808E-5	DESIGN
note evict() operates locally only (i.e. does not propogate to any other nodes in the potential cluster). this is exactly what is needed when we destroy() here destroy() is used as part of the process of shutting down a sessionfactory thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999416322670612	DESIGN	5.836773293865421E-5	WITHOUT_CLASSIFICATION
protected regionrootlistener listener	WITHOUT_CLASSIFICATION	0.9995816636982059	WITHOUT_CLASSIFICATION	4.183363017941425E-4	DESIGN
establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9994459392272675	WITHOUT_CLASSIFICATION	5.540607727325342E-4	DESIGN
if we've been blocking for the mutex perhaps another thread has already reestablished the root. in case the node was reestablised via replication confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9990435936692132	WITHOUT_CLASSIFICATION	9.564063307867673E-4	DESIGN
for pessimistic locking we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999049912879996	WITHOUT_CLASSIFICATION	9.50087120003982E-5	DESIGN
the rest only matters for optimistic locking where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9985141565302381	WITHOUT_CLASSIFICATION	0.001485843469761788	DESIGN
don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9945229493963921	WITHOUT_CLASSIFICATION	0.005477050603607911	DESIGN
make sure the root node for the region exists and has a dataversion that never complains	WITHOUT_CLASSIFICATION	0.9999842933078911	WITHOUT_CLASSIFICATION	1.570669210889847E-5	DESIGN
never evict this node	WITHOUT_CLASSIFICATION	0.9986599556557232	WITHOUT_CLASSIFICATION	0.0013400443442768935	DESIGN
fix up the resident flag	WITHOUT_CLASSIFICATION	0.9776452820979258	WITHOUT_CLASSIFICATION	0.022354717902074293	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.99979531296426	WITHOUT_CLASSIFICATION	2.046870357400048E-4	DESIGN
we ignore minimalputoverride. jbosscache putforexternalread is already about as minimal as we can get it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999972181474684	WITHOUT_CLASSIFICATION	2.781852531592202E-6	DESIGN
no-op. we don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9881190165909259	WITHOUT_CLASSIFICATION	0.011880983409074007	DESIGN
this should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9713532239485602	WITHOUT_CLASSIFICATION	0.028646776051439938	DESIGN
we only build caches if none were passed in. passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9998634753980803	WITHOUT_CLASSIFICATION	1.365246019197705E-4	DESIGN
set up the cache factory	WITHOUT_CLASSIFICATION	0.9964641172574644	WITHOUT_CLASSIFICATION	0.0035358827425357175	DESIGN
see if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999927525504353	WITHOUT_CLASSIFICATION	7.247449564692666E-6	DESIGN
default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999307651398593	WITHOUT_CLASSIFICATION	6.923486014065524E-5	DESIGN
default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999477398259897	WITHOUT_CLASSIFICATION	5.226017401013884E-5	DESIGN
for timestamps we default to a separate config	WITHOUT_CLASSIFICATION	0.9997895558792919	WITHOUT_CLASSIFICATION	2.104441207080397E-4	DESIGN
we can't change the tm on a running cache just check if the cache has no tm and we're ok with that	WITHOUT_CLASSIFICATION	0.9997123022810575	WITHOUT_CLASSIFICATION	2.8769771894258874E-4	DESIGN
configure the cache to use our tm	WITHOUT_CLASSIFICATION	0.999404098238813	WITHOUT_CLASSIFICATION	5.959017611869478E-4	DESIGN
make sure jbc doesn't look one up	WITHOUT_CLASSIFICATION	0.9997762996681692	WITHOUT_CLASSIFICATION	2.2370033183077108E-4	DESIGN
this method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.639166786279382	WITHOUT_CLASSIFICATION	0.36083321372061805	DESIGN
make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9974263511944684	WITHOUT_CLASSIFICATION	0.00257364880553165	DESIGN
we use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9998226670810261	WITHOUT_CLASSIFICATION	1.7733291897387095E-4	DESIGN
following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.972390656925485	WITHOUT_CLASSIFICATION	0.027609343074514996	DESIGN
if jbc is using invalidation we don't want to propagate changes. we use the timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9992011318839891	WITHOUT_CLASSIFICATION	7.988681160109116E-4	DESIGN
we don't want to waste effort setting an option if jbc is already in local mode. if jbc is repl_(a)sync then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9998312552847514	WITHOUT_CLASSIFICATION	1.6874471524855165E-4	DESIGN
don't hold the jbc node lock throughout the tx as that prevents updates add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999942750383	WITHOUT_CLASSIFICATION	5.7249617532316484E-9	DESIGN
double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999708664441809	WITHOUT_CLASSIFICATION	2.913355581916341E-5	DESIGN
get an exclusive right to update jbc for this key from this node.	WITHOUT_CLASSIFICATION	0.9986104067717269	WITHOUT_CLASSIFICATION	0.0013895932282731605	DESIGN
we ensure async semantics (jbcache-1175)	WITHOUT_CLASSIFICATION	0.9993123372768852	WITHOUT_CLASSIFICATION	6.87662723114863E-4	DESIGN
initial load from jbc	WITHOUT_CLASSIFICATION	0.9992672639698005	WITHOUT_CLASSIFICATION	7.327360301995124E-4	DESIGN
see if we had a 2nd invalidation from the same initial preinvalidation timestamp. if so only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999998439862826	WITHOUT_CLASSIFICATION	1.560137172613674E-7	DESIGN
we ensure async semantics (jbcache-1175)	WITHOUT_CLASSIFICATION	0.9993123372768852	WITHOUT_CLASSIFICATION	6.87662723114863E-4	DESIGN
if the workspace node has null as well ok if not we've been modified in a non-comparable manner which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999987810731552	WITHOUT_CLASSIFICATION	1.2189268447460677E-6	DESIGN
the standard comparator types are not serializable but are singletons	WITHOUT_CLASSIFICATION	0.9994205436999514	WITHOUT_CLASSIFICATION	5.794563000485262E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9997622491590575	WITHOUT_CLASSIFICATION	2.3775084094252203E-4	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9999684578469453	WITHOUT_CLASSIFICATION	3.154215305467345E-5	DESIGN
construct the cache	WITHOUT_CLASSIFICATION	0.9997768971350585	WITHOUT_CLASSIFICATION	2.231028649416152E-4	DESIGN
local cache so we use synchronization	WITHOUT_CLASSIFICATION	0.9929369053884158	WITHOUT_CLASSIFICATION	0.007063094611584163	DESIGN
local cache so we use synchronization	WITHOUT_CLASSIFICATION	0.9929369053884158	WITHOUT_CLASSIFICATION	0.007063094611584163	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9996735288960499	WITHOUT_CLASSIFICATION	3.2647110395012243E-4	DESIGN
swaldman 2006-08-28 define c3p0-style configuration parameters for initialpoolsize which hibernate sensibly lets default to minpoolsize but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999909375127314	WITHOUT_CLASSIFICATION	9.062487268634296E-6	DESIGN
datasource unpooled = datasources.unpooleddatasource(jdbcurl props.getproperty(environment.user) props.getproperty(environment.pass))	WITHOUT_CLASSIFICATION	0.9999241648997708	WITHOUT_CLASSIFICATION	7.583510022925641E-5	DESIGN
true if the pool is borrowed from the outside false if we used to create it	WITHOUT_CLASSIFICATION	0.9293213761466225	WITHOUT_CLASSIFICATION	0.07067862385337749	DESIGN
get a connection from the pool (thru drivermanager cfr. proxool doc)	WITHOUT_CLASSIFICATION	0.9987925343964185	WITHOUT_CLASSIFICATION	0.0012074656035815	DESIGN
set the transaction isolation if defined	WITHOUT_CLASSIFICATION	0.9998895907112504	WITHOUT_CLASSIFICATION	1.1040928874966382E-4	DESIGN
toggle autocommit to false if set	WITHOUT_CLASSIFICATION	0.9998511845995031	WITHOUT_CLASSIFICATION	1.4881540049695733E-4	DESIGN
return the connection	WITHOUT_CLASSIFICATION	0.998302330279531	WITHOUT_CLASSIFICATION	0.001697669720469019	DESIGN
get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999891356918251	WITHOUT_CLASSIFICATION	1.086430817481363E-5	DESIGN
default the proxool alias setting	WITHOUT_CLASSIFICATION	0.9999984713501853	WITHOUT_CLASSIFICATION	1.5286498147712366E-6	DESIGN
validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999944426029559	WITHOUT_CLASSIFICATION	5.5573970440632575E-6	DESIGN
validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999944426029559	WITHOUT_CLASSIFICATION	5.5573970440632575E-6	DESIGN
append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999831447366184	WITHOUT_CLASSIFICATION	1.685526338154497E-5	DESIGN
set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9996552831853519	WITHOUT_CLASSIFICATION	3.447168146480686E-4	DESIGN
configured using the jaxp configurator	WITHOUT_CLASSIFICATION	0.999940587313032	WITHOUT_CLASSIFICATION	5.941268696782624E-5	DESIGN
validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999944426029559	WITHOUT_CLASSIFICATION	5.5573970440632575E-6	DESIGN
append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999831447366184	WITHOUT_CLASSIFICATION	1.685526338154497E-5	DESIGN
append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999831447366184	WITHOUT_CLASSIFICATION	1.685526338154497E-5	DESIGN
configured using the properties file configurator	WITHOUT_CLASSIFICATION	0.9999901714825649	WITHOUT_CLASSIFICATION	9.828517435094464E-6	DESIGN
remember isolation level	WITHOUT_CLASSIFICATION	0.9678267901050415	WITHOUT_CLASSIFICATION	0.03217320989495857	DESIGN
if the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999998603553986	WITHOUT_CLASSIFICATION	1.3964460149321994E-7	DESIGN
we have created the pool ourselves so shut it down	WITHOUT_CLASSIFICATION	0.999945683627731	WITHOUT_CLASSIFICATION	5.431637226902296E-5	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9751212639459721	WITHOUT_CLASSIFICATION	0.02487873605402797	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9751212639459721	WITHOUT_CLASSIFICATION	0.02487873605402797	DESIGN
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999245486926607	WITHOUT_CLASSIFICATION	7.545130733937581E-5	DESIGN
public currency getcurrency(int col) throws hibernateexception	WITHOUT_CLASSIFICATION	0.9988084734108058	WITHOUT_CLASSIFICATION	0.0011915265891941256	DESIGN
default is pojo	WITHOUT_CLASSIFICATION	0.9998791429118744	WITHOUT_CLASSIFICATION	1.2085708812558461E-4	DESIGN
use setparameter for null values	WITHOUT_CLASSIFICATION	0.9994966084624447	WITHOUT_CLASSIFICATION	5.033915375552601E-4	DESIGN
use setparameter for null values	WITHOUT_CLASSIFICATION	0.9994966084624447	WITHOUT_CLASSIFICATION	5.033915375552601E-4	DESIGN
private cacheentry cacheentry	WITHOUT_CLASSIFICATION	0.9931623097428519	WITHOUT_CLASSIFICATION	0.006837690257148051	DESIGN
don't need to lock the cache here since if someone else inserted the same pk first the insert would fail	WITHOUT_CLASSIFICATION	0.9999990493635538	WITHOUT_CLASSIFICATION	9.506364462713299E-7	DESIGN
make 100% certain that this is called before any subsequent scheduledupdate.aftertransactioncompletion()!!	WITHOUT_CLASSIFICATION	0.9977814078419954	WITHOUT_CLASSIFICATION	0.0022185921580045688	DESIGN
get the updated snapshot of the entity state by cloning current state it is safe to copy in place since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999998158912111	WITHOUT_CLASSIFICATION	1.8410878883734958E-7	DESIGN
this entity defines proeprty generation so process those generated values	WITHOUT_CLASSIFICATION	0.9992242422117572	WITHOUT_CLASSIFICATION	7.757577882427362E-4	DESIGN
have the entity entry perform post-update processing passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999256780601056	WITHOUT_CLASSIFICATION	7.432193989433323E-5	DESIGN
!persister.iscacheinvalidationrequired()	WITHOUT_CLASSIFICATION	0.9995592003541517	WITHOUT_CLASSIFICATION	4.407996458482287E-4	DESIGN
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9996826089150866	WITHOUT_CLASSIFICATION	3.173910849134396E-4	DESIGN
sort first by role name	WITHOUT_CLASSIFICATION	0.9997277057462137	WITHOUT_CLASSIFICATION	2.7229425378626345E-4	DESIGN
make 100% certain that this is called before any subsequent scheduledupdate.aftertransactioncompletion()!!	WITHOUT_CLASSIFICATION	0.9977814078419954	WITHOUT_CLASSIFICATION	0.0022185921580045688	DESIGN
then by fk	WITHOUT_CLASSIFICATION	0.9982906939218251	WITHOUT_CLASSIFICATION	0.0017093060781749826	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9997147955332444	WITHOUT_CLASSIFICATION	2.8520446675565924E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9997147955332444	WITHOUT_CLASSIFICATION	2.8520446675565924E-4	DESIGN
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9993724237957223	WITHOUT_CLASSIFICATION	6.275762042776919E-4	DESIGN
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9984592158765946	WITHOUT_CLASSIFICATION	0.001540784123405489	DESIGN
boolean put = persister.getcache().insert(ck cacheentry)	WITHOUT_CLASSIFICATION	0.9999720290328955	WITHOUT_CLASSIFICATION	2.7970967104508287E-5	DESIGN
we need to grab the version value from the entity otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.8866068142947773	WITHOUT_CLASSIFICATION	0.11339318570522267	DESIGN
do nothing - we only need to notify the cache	WITHOUT_CLASSIFICATION	0.9922266321889656	WITHOUT_CLASSIFICATION	0.007773367811034442	DESIGN
sort first by entity name	WITHOUT_CLASSIFICATION	0.999763319188556	WITHOUT_CLASSIFICATION	2.3668081144392783E-4	DESIGN
then by id	WITHOUT_CLASSIFICATION	0.9997675564138802	WITHOUT_CLASSIFICATION	2.3244358611975677E-4	DESIGN
to be safe	WITHOUT_CLASSIFICATION	0.999886137080075	WITHOUT_CLASSIFICATION	1.1386291992497341E-4	DESIGN
no transformations took place so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999160965622766	WITHOUT_CLASSIFICATION	8.390343772344533E-5	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999731795954713	WITHOUT_CLASSIFICATION	2.6820404528728614E-5	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999731795954713	WITHOUT_CLASSIFICATION	2.6820404528728614E-5	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9996097817285058	WITHOUT_CLASSIFICATION	3.902182714942757E-4	DESIGN
test out the optimizer	WITHOUT_CLASSIFICATION	0.9999852745686977	WITHOUT_CLASSIFICATION	1.4725431302278635E-5	DESIGN
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9989645070930694	WITHOUT_CLASSIFICATION	0.0010354929069305734	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999767705954378	WITHOUT_CLASSIFICATION	2.3229404562199595E-4	DESIGN
invokespecial	WITHOUT_CLASSIFICATION	0.999620800350095	WITHOUT_CLASSIFICATION	3.79199649905041E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9997275391583161	WITHOUT_CLASSIFICATION	2.724608416838616E-4	DESIGN
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9994675067762226	WITHOUT_CLASSIFICATION	5.324932237772796E-4	DESIGN
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9969785535862907	WITHOUT_CLASSIFICATION	0.003021446413709252	DESIGN
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999446982247064	WITHOUT_CLASSIFICATION	5.530177529353481E-5	DESIGN
aload_2 args	WITHOUT_CLASSIFICATION	0.9994605006057764	WITHOUT_CLASSIFICATION	5.39499394223544E-4	DESIGN
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.99988338843799	WITHOUT_CLASSIFICATION	1.1661156201012191E-4	DESIGN
new	WITHOUT_CLASSIFICATION	0.9998233519478568	WITHOUT_CLASSIFICATION	1.7664805214335098E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9998634257525112	WITHOUT_CLASSIFICATION	1.365742474888598E-4	DESIGN
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9996965681244292	WITHOUT_CLASSIFICATION	3.034318755708732E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.999620800350095	WITHOUT_CLASSIFICATION	3.79199649905041E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.999620800350095	WITHOUT_CLASSIFICATION	3.79199649905041E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.999620800350095	WITHOUT_CLASSIFICATION	3.79199649905041E-4	DESIGN
aastore args	WITHOUT_CLASSIFICATION	0.9994478312671582	WITHOUT_CLASSIFICATION	5.521687328418335E-4	DESIGN
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9971293088991595	WITHOUT_CLASSIFICATION	0.00287069110084053	DESIGN
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9983166564722254	WITHOUT_CLASSIFICATION	0.001683343527774609	DESIGN
istore_3 store i	WITHOUT_CLASSIFICATION	0.9997389377255941	WITHOUT_CLASSIFICATION	2.6106227440600725E-4	DESIGN
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9993686810047451	WITHOUT_CLASSIFICATION	6.31318995254892E-4	DESIGN
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9962435205453126	WITHOUT_CLASSIFICATION	0.003756479454687478	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999834555735531	WITHOUT_CLASSIFICATION	1.654442644692208E-5	DESIGN
start region to handling exception (bulkaccessorexception)	WITHOUT_CLASSIFICATION	0.9985036362416662	WITHOUT_CLASSIFICATION	0.0014963637583337891	DESIGN
iinc 3 1	WITHOUT_CLASSIFICATION	0.9996831593044552	WITHOUT_CLASSIFICATION	3.1684069554487087E-4	DESIGN
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9994739819703456	WITHOUT_CLASSIFICATION	5.260180296543065E-4	DESIGN
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9994312698047132	WITHOUT_CLASSIFICATION	5.687301952867847E-4	DESIGN
iconst_i	WITHOUT_CLASSIFICATION	0.9997622491590575	WITHOUT_CLASSIFICATION	2.3775084094252203E-4	DESIGN
aaload	WITHOUT_CLASSIFICATION	0.9997622491590575	WITHOUT_CLASSIFICATION	2.3775084094252203E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.999762343051301	WITHOUT_CLASSIFICATION	2.3765694869909394E-4	DESIGN
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9996041229388959	WITHOUT_CLASSIFICATION	3.958770611042054E-4	DESIGN
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.999770704994247	WITHOUT_CLASSIFICATION	2.2929500575300662E-4	DESIGN
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999857369830947	WITHOUT_CLASSIFICATION	1.4263016905387979E-5	DESIGN
end region to handling exception (bulkaccessorexception)	WITHOUT_CLASSIFICATION	0.9978707358951866	WITHOUT_CLASSIFICATION	0.0021292641048133954	DESIGN
register in exception table	WITHOUT_CLASSIFICATION	0.9994771383724506	WITHOUT_CLASSIFICATION	5.228616275494995E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999767705954378	WITHOUT_CLASSIFICATION	2.3229404562199595E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999767705954378	WITHOUT_CLASSIFICATION	2.3229404562199595E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9997275391583161	WITHOUT_CLASSIFICATION	2.724608416838616E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9997275391583161	WITHOUT_CLASSIFICATION	2.724608416838616E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9998634257525112	WITHOUT_CLASSIFICATION	1.365742474888598E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.999620800350095	WITHOUT_CLASSIFICATION	3.79199649905041E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.999762343051301	WITHOUT_CLASSIFICATION	2.3765694869909394E-4	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999997898380282	WITHOUT_CLASSIFICATION	2.1016197190585764E-7	DESIGN
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999593779311233	WITHOUT_CLASSIFICATION	4.0622068876675744E-5	DESIGN
new bulkaccessorexception	WITHOUT_CLASSIFICATION	0.9993524399082672	WITHOUT_CLASSIFICATION	6.475600917328278E-4	DESIGN
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9996088061047862	WITHOUT_CLASSIFICATION	3.911938952137407E-4	DESIGN
iload_3 i	WITHOUT_CLASSIFICATION	0.9982294321717691	WITHOUT_CLASSIFICATION	0.001770567828230931	DESIGN
invokespecial bulkaccessorexception.<init>	WITHOUT_CLASSIFICATION	0.9995592003541517	WITHOUT_CLASSIFICATION	4.407996458482287E-4	DESIGN
athrow	WITHOUT_CLASSIFICATION	0.999762399561343	WITHOUT_CLASSIFICATION	2.3760043865686469E-4	DESIGN
warning classfile only	WITHOUT_CLASSIFICATION	0.9999231272818329	WITHOUT_CLASSIFICATION	7.687271816708855E-5	DESIGN
swallow	WITHOUT_CLASSIFICATION	0.9997815825818898	WITHOUT_CLASSIFICATION	2.1841741811034357E-4	DESIGN
local variable | this |	WITHOUT_CLASSIFICATION	0.9988137661733751	WITHOUT_CLASSIFICATION	0.0011862338266248906	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.997682881642924	WITHOUT_CLASSIFICATION	0.0023171183570759825	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.997682881642924	WITHOUT_CLASSIFICATION	0.0023171183570759825	DESIGN
getfield get field "$javassist_callback" defined already	WITHOUT_CLASSIFICATION	0.9977100377765656	WITHOUT_CLASSIFICATION	0.002289962223434394	DESIGN
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.999826842182939	WITHOUT_CLASSIFICATION	1.7315781706105419E-4	DESIGN
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9998568800384676	WITHOUT_CLASSIFICATION	1.4311996153239473E-4	DESIGN
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9989629770458863	WITHOUT_CLASSIFICATION	0.001037022954113688	DESIGN
putfield put field "$javassist_callback" defined already	WITHOUT_CLASSIFICATION	0.9978464699076254	WITHOUT_CLASSIFICATION	0.0021535300923745788	DESIGN
case of non-static field	WITHOUT_CLASSIFICATION	0.9986071782165523	WITHOUT_CLASSIFICATION	0.0013928217834476367	DESIGN
getfield get each field	WITHOUT_CLASSIFICATION	0.9994360262535333	WITHOUT_CLASSIFICATION	5.639737464666602E-4	DESIGN
invokeinterface invoke enabled.getinterceptfieldcallback()	WITHOUT_CLASSIFICATION	0.9999024045817473	WITHOUT_CLASSIFICATION	9.759541825273124E-5	DESIGN
ifnonnull	WITHOUT_CLASSIFICATION	0.9998189833960275	WITHOUT_CLASSIFICATION	1.8101660397258152E-4	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9995897361012874	WITHOUT_CLASSIFICATION	4.1026389871266355E-4	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9995897361012874	WITHOUT_CLASSIFICATION	4.1026389871266355E-4	DESIGN
store_1 each type	WITHOUT_CLASSIFICATION	0.9996419951609196	WITHOUT_CLASSIFICATION	3.5800483908044443E-4	DESIGN
ldc name of the field	WITHOUT_CLASSIFICATION	0.998788171757498	WITHOUT_CLASSIFICATION	0.001211828242501881	DESIGN
load_1 each type	WITHOUT_CLASSIFICATION	0.9996419951609196	WITHOUT_CLASSIFICATION	3.5800483908044443E-4	DESIGN
invokeinterface invoke callback.read() each type	WITHOUT_CLASSIFICATION	0.9999078609859727	WITHOUT_CLASSIFICATION	9.213901402737606E-5	DESIGN
int	WITHOUT_CLASSIFICATION	0.9998566336078163	WITHOUT_CLASSIFICATION	1.4336639218365753E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9997275391583161	WITHOUT_CLASSIFICATION	2.724608416838616E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9998634257525112	WITHOUT_CLASSIFICATION	1.365742474888598E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.999620800350095	WITHOUT_CLASSIFICATION	3.79199649905041E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.999762343051301	WITHOUT_CLASSIFICATION	2.3765694869909394E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.999762343051301	WITHOUT_CLASSIFICATION	2.3765694869909394E-4	DESIGN
invokeinterface enabled.getinterceptfieldcallback()	WITHOUT_CLASSIFICATION	0.9995592003541517	WITHOUT_CLASSIFICATION	4.407996458482287E-4	DESIGN
invokeinterface enabled.getinterceptfieldcallback()	WITHOUT_CLASSIFICATION	0.9995592003541517	WITHOUT_CLASSIFICATION	4.407996458482287E-4	DESIGN
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9997112786221133	WITHOUT_CLASSIFICATION	2.887213778866739E-4	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9997622491590575	WITHOUT_CLASSIFICATION	2.3775084094252203E-4	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9997622491590575	WITHOUT_CLASSIFICATION	2.3775084094252203E-4	DESIGN
putfield	WITHOUT_CLASSIFICATION	0.9997622491590575	WITHOUT_CLASSIFICATION	2.3775084094252203E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9997275391583161	WITHOUT_CLASSIFICATION	2.724608416838616E-4	DESIGN
ldc field name	WITHOUT_CLASSIFICATION	0.9987987382446454	WITHOUT_CLASSIFICATION	0.001201261755354594	DESIGN
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999666585926617	WITHOUT_CLASSIFICATION	3.334140733844908E-5	DESIGN
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9995592003541517	WITHOUT_CLASSIFICATION	4.407996458482287E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9994332431507016	WITHOUT_CLASSIFICATION	5.667568492984099E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9994332431507016	WITHOUT_CLASSIFICATION	5.667568492984099E-4	DESIGN
not array	WITHOUT_CLASSIFICATION	0.9991388144350198	WITHOUT_CLASSIFICATION	8.611855649803069E-4	DESIGN
array of reference type	WITHOUT_CLASSIFICATION	0.999075363888686	WITHOUT_CLASSIFICATION	9.246361113140744E-4	DESIGN
boolean	WITHOUT_CLASSIFICATION	0.9998991999956418	WITHOUT_CLASSIFICATION	1.0080000435822683E-4	DESIGN
byte	WITHOUT_CLASSIFICATION	0.9996721916114978	WITHOUT_CLASSIFICATION	3.278083885021143E-4	DESIGN
char	WITHOUT_CLASSIFICATION	0.9999088805230553	WITHOUT_CLASSIFICATION	9.111947694475049E-5	DESIGN
short	WITHOUT_CLASSIFICATION	0.99965861638469	WITHOUT_CLASSIFICATION	3.41383615309989E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999941353565907	WITHOUT_CLASSIFICATION	5.864643409378139E-6	DESIGN
float	WITHOUT_CLASSIFICATION	0.9997905963709514	WITHOUT_CLASSIFICATION	2.0940362904864302E-4	DESIGN
float	WITHOUT_CLASSIFICATION	0.9997905963709514	WITHOUT_CLASSIFICATION	2.0940362904864302E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9998070634189894	WITHOUT_CLASSIFICATION	1.9293658101053913E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9998070634189894	WITHOUT_CLASSIFICATION	1.9293658101053913E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9996246499277932	WITHOUT_CLASSIFICATION	3.7535007220687155E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9996246499277932	WITHOUT_CLASSIFICATION	3.7535007220687155E-4	DESIGN
boolean byte char int short	WITHOUT_CLASSIFICATION	0.9998308705604162	WITHOUT_CLASSIFICATION	1.69129439583791E-4	DESIGN
boolean byte char int short	WITHOUT_CLASSIFICATION	0.9998308705604162	WITHOUT_CLASSIFICATION	1.69129439583791E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9994332431507016	WITHOUT_CLASSIFICATION	5.667568492984099E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999941353565907	WITHOUT_CLASSIFICATION	5.864643409378139E-6	DESIGN
float	WITHOUT_CLASSIFICATION	0.9997905963709514	WITHOUT_CLASSIFICATION	2.0940362904864302E-4	DESIGN
float	WITHOUT_CLASSIFICATION	0.9997905963709514	WITHOUT_CLASSIFICATION	2.0940362904864302E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9998070634189894	WITHOUT_CLASSIFICATION	1.9293658101053913E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9996246499277932	WITHOUT_CLASSIFICATION	3.7535007220687155E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9996246499277932	WITHOUT_CLASSIFICATION	3.7535007220687155E-4	DESIGN
boolean byte char int short	WITHOUT_CLASSIFICATION	0.9998308705604162	WITHOUT_CLASSIFICATION	1.69129439583791E-4	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9988102540081849	WITHOUT_CLASSIFICATION	0.0011897459918151288	DESIGN
mainly for oscache	WITHOUT_CLASSIFICATION	0.9996890011045196	WITHOUT_CLASSIFICATION	3.109988954803757E-4	DESIGN
decrement the lock	WITHOUT_CLASSIFICATION	0.999841765379845	WITHOUT_CLASSIFICATION	1.582346201548765E-4	DESIGN
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9996402552583031	WITHOUT_CLASSIFICATION	3.5974474169691044E-4	DESIGN
recache the updated state	WITHOUT_CLASSIFICATION	0.9999744568963197	WITHOUT_CLASSIFICATION	2.5543103680319415E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999057084326933	WITHOUT_CLASSIFICATION	9.429156730663337E-5	DESIGN
null clientlock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999861854291053	WITHOUT_CLASSIFICATION	1.381457089476003E-5	DESIGN
we really could refresh the item if it is not a lock but it might be slower return freshtimestamp < txtimestamp	WITHOUT_CLASSIFICATION	0.9845777493994426	WITHOUT_CLASSIFICATION	0.015422250600557293	DESIGN
by requiring < we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999793678030506	WITHOUT_CLASSIFICATION	2.063219694936588E-5	DESIGN
the user provided resulttransformer not the one used with "select new". here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9834068404359215	WITHOUT_CLASSIFICATION	0.016593159564078436	DESIGN
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999579587831122	WITHOUT_CLASSIFICATION	4.2041216887700724E-5	DESIGN
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999324695370998	WITHOUT_CLASSIFICATION	6.753046290019953E-5	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9996735288960499	WITHOUT_CLASSIFICATION	3.2647110395012243E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999057084326933	WITHOUT_CLASSIFICATION	9.429156730663337E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999057084326933	WITHOUT_CLASSIFICATION	9.429156730663337E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999057084326933	WITHOUT_CLASSIFICATION	9.429156730663337E-5	DESIGN
this is called from settingsfactory irregardless trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9955503044309382	WITHOUT_CLASSIFICATION	0.0044496955690618645	DESIGN
do nothing subclasses may override.	WITHOUT_CLASSIFICATION	0.9990769969238514	WITHOUT_CLASSIFICATION	9.230030761486218E-4	DESIGN
do nothing subclasses may override.	WITHOUT_CLASSIFICATION	0.9990769969238514	WITHOUT_CLASSIFICATION	9.230030761486218E-4	DESIGN
throw new unsupportedoperationexception("can't write to a readonly object")	WITHOUT_CLASSIFICATION	0.9988747622050923	WITHOUT_CLASSIFICATION	0.0011252377949076452	DESIGN
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9996560261657517	WITHOUT_CLASSIFICATION	3.4397383424836735E-4	DESIGN
persister.setidentifier(result id) before calling interceptor for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999599282116914	WITHOUT_CLASSIFICATION	4.007178830864675E-5	DESIGN
no-op ccs did not have such a concept	WITHOUT_CLASSIFICATION	0.9971033435324199	WITHOUT_CLASSIFICATION	0.0028966564675801548	DESIGN
no-op ccs did not have such a concept	WITHOUT_CLASSIFICATION	0.9971033435324199	WITHOUT_CLASSIFICATION	0.0028966564675801548	DESIGN
again ccs did not have such a concept but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not jta aware.	WITHOUT_CLASSIFICATION	0.9999006292787442	WITHOUT_CLASSIFICATION	9.937072125583387E-5	DESIGN
again ccs did not have such a concept however a reasonable proximity is to clear the cache. for non-transaction aware caches we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9996050628923618	WITHOUT_CLASSIFICATION	3.949371076381733E-4	DESIGN
again ccs did not have such a concept however a reasonable proximity is to clear the cache. for non-transaction aware caches we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9996050628923618	WITHOUT_CLASSIFICATION	3.949371076381733E-4	DESIGN
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9958424457546203	WITHOUT_CLASSIFICATION	0.004157554245379673	DESIGN
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9995037186305648	WITHOUT_CLASSIFICATION	4.962813694351429E-4	DESIGN
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9990189622413908	WITHOUT_CLASSIFICATION	9.810377586092413E-4	DESIGN
db-objectname	WITHOUT_CLASSIFICATION	0.999620800350095	WITHOUT_CLASSIFICATION	3.79199649905041E-4	DESIGN
mutable	WITHOUT_CLASSIFICATION	0.999861288730272	WITHOUT_CLASSIFICATION	1.3871126972808836E-4	DESIGN
where	WITHOUT_CLASSIFICATION	0.9999270424776614	WITHOUT_CLASSIFICATION	7.295752233854007E-5	DESIGN
check	WITHOUT_CLASSIFICATION	0.9995211925765206	WITHOUT_CLASSIFICATION	4.788074234794229E-4	DESIGN
polymorphism	WITHOUT_CLASSIFICATION	0.999620800350095	WITHOUT_CLASSIFICATION	3.79199649905041E-4	DESIGN
todo	WITHOUT_CLASSIFICATION	0.7083277626419925	WITHOUT_CLASSIFICATION	0.29167223735800757	DESIGN
id	WITHOUT_CLASSIFICATION	0.9996668916930016	WITHOUT_CLASSIFICATION	3.33108306998358E-4	DESIGN
version / timestamp	WITHOUT_CLASSIFICATION	0.9998945248569066	WITHOUT_CLASSIFICATION	1.0547514309344278E-4	DESIGN
discriminator	WITHOUT_CLASSIFICATION	0.9996209937370693	WITHOUT_CLASSIFICATION	3.7900626293077544E-4	DESIGN
primary key constraint	WITHOUT_CLASSIFICATION	0.9968543413285834	WITHOUT_CLASSIFICATION	0.0031456586714166553	DESIGN
this is either a <version/> tag with no type attribute or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999333307122519	WITHOUT_CLASSIFICATION	6.666928774809103E-5	DESIGN
for version properties marked as being generated make sure they are "always" generated aka "insert" is invalid this is dis-allowed by the dtd but just to make sure	WITHOUT_CLASSIFICATION	0.9982538150066194	WITHOUT_CLASSIFICATION	0.0017461849933807483	DESIGN
discriminator	WITHOUT_CLASSIFICATION	0.9996209937370693	WITHOUT_CLASSIFICATION	3.7900626293077544E-4	DESIGN
( (column) discrim.getcolumniterator().next() ).settype(type)	WITHOUT_CLASSIFICATION	0.997662240337658	WITHOUT_CLASSIFICATION	0.0023377596623419903	DESIGN
go ahead and set the lazy here since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999962616742892	WITHOUT_CLASSIFICATION	3.738325710751758E-6	DESIGN
dynamic update	WITHOUT_CLASSIFICATION	0.9998195443528469	WITHOUT_CLASSIFICATION	1.8045564715315904E-4	DESIGN
import	WITHOUT_CLASSIFICATION	0.9997013964309189	WITHOUT_CLASSIFICATION	2.986035690810679E-4	DESIGN
batch size	WITHOUT_CLASSIFICATION	0.9997886983323003	WITHOUT_CLASSIFICATION	2.1130166769974258E-4	DESIGN
select before update	WITHOUT_CLASSIFICATION	0.9999121455886709	WITHOUT_CLASSIFICATION	8.785441132903122E-5	DESIGN
optimistic lock mode	WITHOUT_CLASSIFICATION	0.9995344604418962	WITHOUT_CLASSIFICATION	4.655395581037951E-4	DESIGN
persister	WITHOUT_CLASSIFICATION	0.9993236347664609	WITHOUT_CLASSIFICATION	6.76365233539063E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999786437336867	WITHOUT_CLASSIFICATION	2.1356266313355998E-5	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9990189622413908	WITHOUT_CLASSIFICATION	9.810377586092413E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9999072368563368	WITHOUT_CLASSIFICATION	9.276314366323609E-5	DESIGN
joined subclasses	WITHOUT_CLASSIFICATION	0.9998199078882357	WITHOUT_CLASSIFICATION	1.8009211176434265E-4	DESIGN
key	WITHOUT_CLASSIFICATION	0.9998621922344033	WITHOUT_CLASSIFICATION	1.3780776559667004E-4	DESIGN
check	WITHOUT_CLASSIFICATION	0.9995211925765206	WITHOUT_CLASSIFICATION	4.788074234794229E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999786437336867	WITHOUT_CLASSIFICATION	2.1356266313355998E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9999072368563368	WITHOUT_CLASSIFICATION	9.276314366323609E-5	DESIGN
key	WITHOUT_CLASSIFICATION	0.9998621922344033	WITHOUT_CLASSIFICATION	1.3780776559667004E-4	DESIGN
model.getkey().settype( new type( model.getidentifier() ) )	WITHOUT_CLASSIFICATION	0.9985193304118757	WITHOUT_CLASSIFICATION	0.0014806695881242815	DESIGN
tablename	WITHOUT_CLASSIFICATION	0.999822365421219	WITHOUT_CLASSIFICATION	1.776345787809439E-4	DESIGN
join.getkey().settype( new type( lazz.getidentifier() ) )	WITHOUT_CLASSIFICATION	0.9985193304118757	WITHOUT_CLASSIFICATION	0.0014806695881242815	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9999072368563368	WITHOUT_CLASSIFICATION	9.276314366323609E-5	DESIGN
column(s)	WITHOUT_CLASSIFICATION	0.9997697898388611	WITHOUT_CLASSIFICATION	2.302101611387814E-4	DESIGN
column index	WITHOUT_CLASSIFICATION	0.9999693768723446	WITHOUT_CLASSIFICATION	3.062312765548573E-5	DESIGN
column unique-key	WITHOUT_CLASSIFICATION	0.9998241048187254	WITHOUT_CLASSIFICATION	1.7589518127455943E-4	DESIGN
automatically makes a column with the default name if none is specifed by xml	WITHOUT_CLASSIFICATION	0.9984801027666912	WITHOUT_CLASSIFICATION	0.0015198972333087455	DESIGN
for an any	WITHOUT_CLASSIFICATION	0.9998993740791379	WITHOUT_CLASSIFICATION	1.0062592086220613E-4	DESIGN
insertable simply because that is the user did not specify anything just override it	WITHOUT_CLASSIFICATION	0.9999972223726441	WITHOUT_CLASSIFICATION	2.777627355902597E-6	DESIGN
the user specifically supplied insert="true" which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999922599620245	WITHOUT_CLASSIFICATION	7.74003797548937E-6	DESIGN
properties generated on update can never be updateable	WITHOUT_CLASSIFICATION	0.9994214053052216	WITHOUT_CLASSIFICATION	5.785946947784628E-4	DESIGN
updateable only because the user did not specify anything just override it	WITHOUT_CLASSIFICATION	0.9999991403751473	WITHOUT_CLASSIFICATION	8.596248527559957E-7	DESIGN
the user specifically supplied update="true" which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999922599620245	WITHOUT_CLASSIFICATION	7.74003797548937E-6	DESIGN
rolename	WITHOUT_CLASSIFICATION	0.9997767053271277	WITHOUT_CLASSIFICATION	2.232946728722396E-4	DESIGN
fetch strategy	WITHOUT_CLASSIFICATION	0.9990490062118542	WITHOUT_CLASSIFICATION	9.509937881458622E-4	DESIGN
table	WITHOUT_CLASSIFICATION	0.9999150246774472	WITHOUT_CLASSIFICATION	8.49753225527881E-5	DESIGN
tablename = mappings.getnamingstrategy().propertytotablename( classname path )	WITHOUT_CLASSIFICATION	0.9999387395839802	WITHOUT_CLASSIFICATION	6.126041601980132E-5	DESIGN
sort	WITHOUT_CLASSIFICATION	0.9998472315430662	WITHOUT_CLASSIFICATION	1.5276845693375918E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999786437336867	WITHOUT_CLASSIFICATION	2.1356266313355998E-5	DESIGN
unsorted natural comparator.class.name	WITHOUT_CLASSIFICATION	0.9995652424800935	WITHOUT_CLASSIFICATION	4.347575199065352E-4	DESIGN
orphan delete (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9989138149951169	WITHOUT_CLASSIFICATION	0.001086185004883052	DESIGN
set up second pass	WITHOUT_CLASSIFICATION	0.9999705420274847	WITHOUT_CLASSIFICATION	2.9457972515309558E-5	DESIGN
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.976217185672566	WITHOUT_CLASSIFICATION	0.023782814327434097	DESIGN
a nested composite element	WITHOUT_CLASSIFICATION	0.9916567681691487	WITHOUT_CLASSIFICATION	0.008343231830851238	DESIGN
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9995161479192541	WITHOUT_CLASSIFICATION	4.838520807459221E-4	DESIGN
note special case one-to-one constrained=false cannot be proxied so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999946177519756	WITHOUT_CLASSIFICATION	5.382248024290272E-6	DESIGN
use old (hb 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999747634950467	WITHOUT_CLASSIFICATION	2.523650495324624E-5	DESIGN
lazy = !join	WITHOUT_CLASSIFICATION	0.9999204266829491	WITHOUT_CLASSIFICATION	7.95733170508256E-5	DESIGN
generator	WITHOUT_CLASSIFICATION	0.9992663231465609	WITHOUT_CLASSIFICATION	7.336768534390392E-4	DESIGN
id unsaved-value	WITHOUT_CLASSIFICATION	0.9994687405291378	WITHOUT_CLASSIFICATION	5.312594708622505E-4	DESIGN
version unsaved-value	WITHOUT_CLASSIFICATION	0.9977162147719021	WITHOUT_CLASSIFICATION	0.0022837852280980005	DESIGN
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9824950698372108	WITHOUT_CLASSIFICATION	0.017504930162789232	DESIGN
( (column) ( (simplevalue) ic.getindex() ).getcolumniterator().next() ).setnullable(false)	WITHOUT_CLASSIFICATION	0.997662240337658	WITHOUT_CLASSIFICATION	0.0023377596623419903	DESIGN
contained elements	WITHOUT_CLASSIFICATION	0.9998963293554857	WITHOUT_CLASSIFICATION	1.0367064451436132E-4	DESIGN
for non-inverse one-to-many with a not-null fk add a backref!	WITHOUT_CLASSIFICATION	0.9881731592738785	WITHOUT_CLASSIFICATION	0.011826840726121531	DESIGN
bind the where	WITHOUT_CLASSIFICATION	0.9999583744499939	WITHOUT_CLASSIFICATION	4.1625550006106836E-5	DESIGN
bind the order-by	WITHOUT_CLASSIFICATION	0.9998643428437388	WITHOUT_CLASSIFICATION	1.3565715626116811E-4	DESIGN
bind the filters	WITHOUT_CLASSIFICATION	0.9999241382058537	WITHOUT_CLASSIFICATION	7.586179414630405E-5	DESIGN
overriding inherited meta attribute. hbx-621 & hbx-793	WITHOUT_CLASSIFICATION	0.9991631122730418	WITHOUT_CLASSIFICATION	8.368877269582139E-4	DESIGN
first iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999998702940697	WITHOUT_CLASSIFICATION	1.297059303432449E-7	DESIGN
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a fqn (in the case of a pojo mapping).	WITHOUT_CLASSIFICATION	0.9999297340210731	WITHOUT_CLASSIFICATION	7.026597892692244E-5	DESIGN
+ "_" + referencedcolumnname not used for backward compatibility	WITHOUT_CLASSIFICATION	0.8128962574929994	WITHOUT_CLASSIFICATION	0.18710374250700051	DESIGN
sessionfactory name	WITHOUT_CLASSIFICATION	0.9994680714030336	WITHOUT_CLASSIFICATION	5.31928596966476E-4	DESIGN
jdbc and connection settings	WITHOUT_CLASSIFICATION	0.9991176139952015	WITHOUT_CLASSIFICATION	8.823860047985577E-4	DESIGN
jdbc and connection settings	WITHOUT_CLASSIFICATION	0.9991176139952015	WITHOUT_CLASSIFICATION	8.823860047985577E-4	DESIGN
interrogate jdbc metadata	WITHOUT_CLASSIFICATION	0.9997320092053059	WITHOUT_CLASSIFICATION	2.6799079469402344E-4	DESIGN
user supplied jdbc connections	WITHOUT_CLASSIFICATION	0.9999615014827702	WITHOUT_CLASSIFICATION	3.849851722982265E-5	DESIGN
use dialect default properties	WITHOUT_CLASSIFICATION	0.9989818158956774	WITHOUT_CLASSIFICATION	0.0010181841043226344	DESIGN
transaction settings	WITHOUT_CLASSIFICATION	0.9995086414913129	WITHOUT_CLASSIFICATION	4.91358508687027E-4	DESIGN
sql generation settings	WITHOUT_CLASSIFICATION	0.9993545850110022	WITHOUT_CLASSIFICATION	6.454149889978724E-4	DESIGN
query parser settings	WITHOUT_CLASSIFICATION	0.9964133106313812	WITHOUT_CLASSIFICATION	0.003586689368618928	DESIGN
second-level / query cache	WITHOUT_CLASSIFICATION	0.999655454675383	WITHOUT_CLASSIFICATION	3.4454532461701646E-4	DESIGN
the cache provider is needed when we either have second-level cache enabled or query cache enabled. note that usesecondlevelcache is enabled by default	WITHOUT_CLASSIFICATION	0.9999967169216788	WITHOUT_CLASSIFICATION	3.2830783210656256E-6	DESIGN
sql exception converter	WITHOUT_CLASSIFICATION	0.9995652904618073	WITHOUT_CLASSIFICATION	4.3470953819270007E-4	DESIGN
statistics and logging	WITHOUT_CLASSIFICATION	0.9989733604034315	WITHOUT_CLASSIFICATION	0.0010266395965684843	DESIGN
settings.setshowsqlenabled(showsql)	WITHOUT_CLASSIFICATION	0.9995592003541517	WITHOUT_CLASSIFICATION	4.407996458482287E-4	DESIGN
settings.setformatsqlenabled(formatsql)	WITHOUT_CLASSIFICATION	0.9995592003541517	WITHOUT_CLASSIFICATION	4.407996458482287E-4	DESIGN
schema export	WITHOUT_CLASSIFICATION	0.9997173891362259	WITHOUT_CLASSIFICATION	2.826108637741644E-4	DESIGN
string provider = properties.getproperty( environment.bytecode_provider ) log.info( "bytecode provider name " + provider ) bytecodeprovider bytecodeprovider = buildbytecodeprovider( provider ) settings.setbytecodeprovider( bytecodeprovider )	WITHOUT_CLASSIFICATION	0.9999722624707026	WITHOUT_CLASSIFICATION	2.7737529297397092E-5	DESIGN
legacy behavior apply the bridge	WITHOUT_CLASSIFICATION	0.9994634673904929	WITHOUT_CLASSIFICATION	5.365326095071503E-4	DESIGN
maybe a concrete sqlpropertyresult type but map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9338843485464692	WITHOUT_CLASSIFICATION	0.06611565145353084	DESIGN
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9951845655801731	WITHOUT_CLASSIFICATION	0.004815434419826812	DESIGN
private componenttuplizerfactory componenttuplizerfactory todo hhh-3517 and hhh-1907 private bytecodeprovider bytecodeprovider	WITHOUT_CLASSIFICATION	0.7476409119136306	DESIGN	0.2523590880863695	WITHOUT_CLASSIFICATION
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991420761026003	WITHOUT_CLASSIFICATION	8.57923897399731E-4	DESIGN
public componenttuplizerfactory getcomponenttuplizerfactory() { return componenttuplizerfactory }	WITHOUT_CLASSIFICATION	0.9969660815701336	WITHOUT_CLASSIFICATION	0.0030339184298664563	DESIGN
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9928394605888471	WITHOUT_CLASSIFICATION	0.007160539411152938	DESIGN
void setshowsqlenabled(boolean b) { showsql = b } void setformatsqlenabled(boolean b) { formatsql = b }	WITHOUT_CLASSIFICATION	0.9999714544475299	WITHOUT_CLASSIFICATION	2.854555247013852E-5	DESIGN
public bytecodeprovider getbytecodeprovider() { return bytecodeprovider } void setbytecodeprovider(bytecodeprovider bytecodeprovider) { this.bytecodeprovider = bytecodeprovider }	WITHOUT_CLASSIFICATION	0.9993918814419295	WITHOUT_CLASSIFICATION	6.081185580705742E-4	DESIGN
using local since the inheritedmetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9950001285691932	WITHOUT_CLASSIFICATION	0.0049998714308067994	DESIGN
private componenttuplizerfactory componenttuplizerfactory todo hhh-3517 and hhh-1907	WITHOUT_CLASSIFICATION	0.7476409119136306	DESIGN	0.2523590880863695	WITHOUT_CLASSIFICATION
protected list extendsqueue	WITHOUT_CLASSIFICATION	0.9994594484855343	WITHOUT_CLASSIFICATION	5.40551514465826E-4	DESIGN
extendsqueue = new arraylist()	WITHOUT_CLASSIFICATION	0.9998569230549117	WITHOUT_CLASSIFICATION	1.4307694508820966E-4	DESIGN
componenttuplizerfactory = new componenttuplizerfactory()	WITHOUT_CLASSIFICATION	0.9999268993583998	WITHOUT_CLASSIFICATION	7.310064160012001E-5	DESIGN
if doc is null then for whatever reason the cached file cannot be used	WITHOUT_CLASSIFICATION	0.9992407820617468	WITHOUT_CLASSIFICATION	7.592179382532489E-4	DESIGN
drop them in reverse order in case db needs it done that way	WITHOUT_CLASSIFICATION	0.9350467537843743	WITHOUT_CLASSIFICATION	0.06495324621562569	DESIGN
public componenttuplizerfactory getcomponenttuplizerfactory() { return componenttuplizerfactory }	WITHOUT_CLASSIFICATION	0.9969660815701336	WITHOUT_CLASSIFICATION	0.0030339184298664563	DESIGN
this method may be called many times!!	WITHOUT_CLASSIFICATION	0.9803197864138599	WITHOUT_CLASSIFICATION	0.01968021358614017	DESIGN
iterator iterator = extendsqueue.iterator()	WITHOUT_CLASSIFICATION	0.999930631447954	WITHOUT_CLASSIFICATION	6.93685520460152E-5	DESIGN
iterator iter = extendsqueue.iterator()	WITHOUT_CLASSIFICATION	0.9998751109822284	WITHOUT_CLASSIFICATION	1.2488901777162184E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.9998717065781431	WITHOUT_CLASSIFICATION	1.282934218569377E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.9998717065781431	WITHOUT_CLASSIFICATION	1.282934218569377E-4	DESIGN
settings.setcomponenttuplizerfactory( this.getcomponenttuplizerfactory() )	WITHOUT_CLASSIFICATION	0.9980080635409448	WITHOUT_CLASSIFICATION	0.0019919364590551686	DESIGN
private final list extendsqueue	WITHOUT_CLASSIFICATION	0.9998331908083634	WITHOUT_CLASSIFICATION	1.6680919163655045E-4	DESIGN
<string string>	WITHOUT_CLASSIFICATION	0.9996237305982056	WITHOUT_CLASSIFICATION	3.7626940179430354E-4	DESIGN
<string string>	WITHOUT_CLASSIFICATION	0.9996237305982056	WITHOUT_CLASSIFICATION	3.7626940179430354E-4	DESIGN
+ "_" + referencedcolumnname not used for backward compatibility	WITHOUT_CLASSIFICATION	0.8128962574929994	WITHOUT_CLASSIFICATION	0.18710374250700051	DESIGN
set use_reflection_optimizer to false to fix hhh-227	WITHOUT_CLASSIFICATION	0.9698036694657692	WITHOUT_CLASSIFICATION	0.03019633053423067	DESIGN
orphan delete not supported for entitymode.dom4j	WITHOUT_CLASSIFICATION	0.997701857790499	WITHOUT_CLASSIFICATION	0.002298142209500962	DESIGN
element = xmlhelper.generatedom4jelement( persister.getnodename() )	WITHOUT_CLASSIFICATION	0.9996511351268687	WITHOUT_CLASSIFICATION	3.488648731312643E-4	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9996097817285058	WITHOUT_CLASSIFICATION	3.902182714942757E-4	DESIGN
orphan delete not supported for entitymode.dom4j	WITHOUT_CLASSIFICATION	0.997701857790499	WITHOUT_CLASSIFICATION	0.002298142209500962	DESIGN
element = xmlhelper.generatedom4jelement( persister.getnodename() )	WITHOUT_CLASSIFICATION	0.9996511351268687	WITHOUT_CLASSIFICATION	3.488648731312643E-4	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.9995257092172742	WITHOUT_CLASSIFICATION	4.742907827257955E-4	DESIGN
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9978729348161577	WITHOUT_CLASSIFICATION	0.002127065183842263	DESIGN
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9989842506923129	WITHOUT_CLASSIFICATION	0.0010157493076871154	DESIGN
the element has changed	WITHOUT_CLASSIFICATION	0.999972886693969	WITHOUT_CLASSIFICATION	2.711330603096303E-5	DESIGN
careful these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9968117756114714	WITHOUT_CLASSIFICATION	0.003188224388528626	DESIGN
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9517389884204174	WITHOUT_CLASSIFICATION	0.048261011579582576	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.99982287461359	WITHOUT_CLASSIFICATION	1.7712538641009984E-4	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.99982287461359	WITHOUT_CLASSIFICATION	1.7712538641009984E-4	DESIGN
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9903854347272458	WITHOUT_CLASSIFICATION	0.00961456527275413	DESIGN
short-circuit(s) no new elements the old list contains only orphans no old elements so no orphans neither	WITHOUT_CLASSIFICATION	0.9999995656412718	WITHOUT_CLASSIFICATION	4.3435872820169096E-7	DESIGN
create the collection holding the orphans	WITHOUT_CLASSIFICATION	0.9996537424849582	WITHOUT_CLASSIFICATION	3.462575150417979E-4	DESIGN
collect entityidentifier(s) of the current elements - add them into a hashset for fast access	WITHOUT_CLASSIFICATION	0.9997346476483961	WITHOUT_CLASSIFICATION	2.6535235160386647E-4	DESIGN
iterate over the old list	WITHOUT_CLASSIFICATION	0.999920336617633	WITHOUT_CLASSIFICATION	7.966338236686381E-5	DESIGN
(array==null) ? templist.size()	WITHOUT_CLASSIFICATION	0.9991670749960228	WITHOUT_CLASSIFICATION	8.329250039772255E-4	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9996097817285058	WITHOUT_CLASSIFICATION	3.902182714942757E-4	DESIGN
(array==null) ? templist.get(i)	WITHOUT_CLASSIFICATION	0.9991670749960228	WITHOUT_CLASSIFICATION	8.329250039772255E-4	DESIGN
write() -- doesn't	WITHOUT_CLASSIFICATION	0.9992577170265707	WITHOUT_CLASSIFICATION	7.422829734293334E-4	DESIGN
write() -- doesn't	WITHOUT_CLASSIFICATION	0.9992577170265707	WITHOUT_CLASSIFICATION	7.422829734293334E-4	DESIGN
amazingly these two will work because abstractcollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9996668741787131	WITHOUT_CLASSIFICATION	3.3312582128689145E-4	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.9995257092172742	WITHOUT_CLASSIFICATION	4.742907827257955E-4	DESIGN
finally what it's all about	WITHOUT_CLASSIFICATION	0.997327351178679	WITHOUT_CLASSIFICATION	0.00267264882132097	DESIGN
note that if we load this collection from a cartesian product the multiplicity would be broken so use an idbag instead	WITHOUT_CLASSIFICATION	0.9332872618621103	DESIGN	0.06671273813788973	WITHOUT_CLASSIFICATION
anyway here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.8646804357307658	DESIGN	0.13531956426923408	WITHOUT_CLASSIFICATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999531608487635	WITHOUT_CLASSIFICATION	4.6839151236444195E-5	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9746286082158245	WITHOUT_CLASSIFICATION	0.02537139178417545	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.9995257092172742	WITHOUT_CLASSIFICATION	4.742907827257955E-4	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999531608487635	WITHOUT_CLASSIFICATION	4.6839151236444195E-5	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9746286082158245	WITHOUT_CLASSIFICATION	0.02537139178417545	DESIGN
public boolean equals(object other) {read()return bag.equals(other)}public int hashcode(object other) {read()return bag.hashcode()}	WITHOUT_CLASSIFICATION	0.9991232271985683	WITHOUT_CLASSIFICATION	8.767728014316034E-4	DESIGN
list operations	WITHOUT_CLASSIFICATION	0.9999630266633804	WITHOUT_CLASSIFICATION	3.697333661956089E-5	DESIGN
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999967601512448	WITHOUT_CLASSIFICATION	3.239848755142532E-6	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.9995257092172742	WITHOUT_CLASSIFICATION	4.742907827257955E-4	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.9995257092172742	WITHOUT_CLASSIFICATION	4.742907827257955E-4	DESIGN
from map	WITHOUT_CLASSIFICATION	0.9998288374652834	WITHOUT_CLASSIFICATION	1.711625347165284E-4	DESIGN
from sortedmap	WITHOUT_CLASSIFICATION	0.9994014523030579	WITHOUT_CLASSIFICATION	5.985476969421391E-4	DESIGN
inject the data	WITHOUT_CLASSIFICATION	0.9998913992063917	WITHOUT_CLASSIFICATION	1.0860079360824831E-4	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9995639484238283	WITHOUT_CLASSIFICATION	4.360515761717163E-4	DESIGN
default pool size 20	WITHOUT_CLASSIFICATION	0.9999494424880905	WITHOUT_CLASSIFICATION	5.0557511909461134E-5	DESIGN
trying via forname() first to be as close to drivermanager's semantics	WITHOUT_CLASSIFICATION	0.9999991273110299	WITHOUT_CLASSIFICATION	8.726889701401412E-7	DESIGN
if debug level is enabled then log the password otherwise mask it	WITHOUT_CLASSIFICATION	0.9999763331999865	WITHOUT_CLASSIFICATION	2.3666800013527067E-5	DESIGN
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9913897645940174	WITHOUT_CLASSIFICATION	0.008610235405982661	DESIGN
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.999759238733925	WITHOUT_CLASSIFICATION	2.4076126607499264E-4	DESIGN
then bind it	WITHOUT_CLASSIFICATION	0.9995665950846371	WITHOUT_CLASSIFICATION	4.3340491536295294E-4	DESIGN
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9846131924598056	WITHOUT_CLASSIFICATION	0.015386807540194272	DESIGN
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9981799243522915	WITHOUT_CLASSIFICATION	0.0018200756477085333	DESIGN
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999894108869706	WITHOUT_CLASSIFICATION	1.0589113029425024E-5	DESIGN
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9980961262827529	WITHOUT_CLASSIFICATION	0.001903873717247119	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996955109406654	WITHOUT_CLASSIFICATION	3.044890593345629E-4	DESIGN
we could register the session against the transaction even though it is not started but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999996579728183	WITHOUT_CLASSIFICATION	3.4202718173871225E-7	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9995639484238283	WITHOUT_CLASSIFICATION	4.360515761717163E-4	DESIGN
private string propertyname	WITHOUT_CLASSIFICATION	0.9973553158578377	WITHOUT_CLASSIFICATION	0.002644684142162319	DESIGN
public propertyprojection project() {return projections.property(getpropertyname())}	WITHOUT_CLASSIFICATION	0.9967349929551851	WITHOUT_CLASSIFICATION	0.0032650070448148744	DESIGN
string[] fk = stringhelper.qualify( "collection_" cp.getkeycolumnnames() )	WITHOUT_CLASSIFICATION	0.9962839570446946	WITHOUT_CLASSIFICATION	0.0037160429553053033	DESIGN
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999751202865285	WITHOUT_CLASSIFICATION	2.487971347155596E-5	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.999621037336694	WITHOUT_CLASSIFICATION	3.7896266330596283E-4	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.999621037336694	WITHOUT_CLASSIFICATION	3.7896266330596283E-4	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9995639484238283	WITHOUT_CLASSIFICATION	4.360515761717163E-4	DESIGN
the following two lines were added to ensure that this.params is not null which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999902931807687	WITHOUT_CLASSIFICATION	9.706819231315789E-6	DESIGN
with two-deep subqueries the same alias would get generated for both using the old method (criteriaquery.generatesqlalias()) so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9991478308626786	WITHOUT_CLASSIFICATION	8.521691373214552E-4	DESIGN
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9897082143990693	WITHOUT_CLASSIFICATION	0.010291785600930766	DESIGN
pull off the last " "	WITHOUT_CLASSIFICATION	0.9999236108143386	WITHOUT_CLASSIFICATION	7.638918566139998E-5	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.999765997591051	WITHOUT_CLASSIFICATION	2.340024089489644E-4	DESIGN
we have the form trim(trimsource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.999826626099646	WITHOUT_CLASSIFICATION	1.7337390035392664E-4	DESIGN
we have the form trim(from trimsource). this is functionally equivalent to trim(trimsource)	WITHOUT_CLASSIFICATION	0.9972099411345151	WITHOUT_CLASSIFICATION	0.0027900588654848537	DESIGN
not_supported_should_use_jdbc3_preparedstatement.getgeneratedkeys_method	WITHOUT_CLASSIFICATION	0.9995592003541517	WITHOUT_CLASSIFICATION	4.407996458482287E-4	DESIGN
potentialtrimcharacterargindex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999797860819395	WITHOUT_CLASSIFICATION	2.021391806052378E-5	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997568004076245	WITHOUT_CLASSIFICATION	2.4319959237553007E-4	DESIGN
oracle did add support for ansi case statements in 9i	WITHOUT_CLASSIFICATION	0.9999869273331461	WITHOUT_CLASSIFICATION	1.3072666853874246E-5	DESIGN
the standard sql function name is current_timestamp	WITHOUT_CLASSIFICATION	0.9999957708072087	WITHOUT_CLASSIFICATION	4.229192791244668E-6	DESIGN
informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9781904628180491	WITHOUT_CLASSIFICATION	0.021809537181950996	DESIGN
or byte or text? or money	WITHOUT_CLASSIFICATION	0.9996800378036628	WITHOUT_CLASSIFICATION	3.1996219633716806E-4	DESIGN
strip table-owner because informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9997841378856468	WITHOUT_CLASSIFICATION	2.1586211435330798E-4	DESIGN
build the map of standard ansi sql aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999835904509111	WITHOUT_CLASSIFICATION	1.6409549088887946E-5	DESIGN
pre h3.2 behavior super.getreturntype(ct m)	WITHOUT_CLASSIFICATION	0.9998059434697959	WITHOUT_CLASSIFICATION	1.940565302040756E-4	DESIGN
finally use the sqltype if == on hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9994885724076443	WITHOUT_CLASSIFICATION	5.114275923556996E-4	DESIGN
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999186677851539	WITHOUT_CLASSIFICATION	8.133221484613738E-5	DESIGN
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9845335390771087	WITHOUT_CLASSIFICATION	0.015466460922891273	DESIGN
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9983493469815987	WITHOUT_CLASSIFICATION	0.0016506530184013286	DESIGN
map second/minute/hour/day/month/year to ansi extract() override on subclasses	WITHOUT_CLASSIFICATION	0.9999747007634325	WITHOUT_CLASSIFICATION	2.5299236567508224E-5	DESIGN
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9991596526080965	WITHOUT_CLASSIFICATION	8.403473919035503E-4	DESIGN
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997406120258329	WITHOUT_CLASSIFICATION	0.002593879741671015	DESIGN
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985226067194805	WITHOUT_CLASSIFICATION	0.0014773932805196362	DESIGN
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997072641844467	WITHOUT_CLASSIFICATION	2.927358155533126E-4	DESIGN
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998668049662413	WITHOUT_CLASSIFICATION	1.3319503375865233E-4	DESIGN
identity support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993154655357298	WITHOUT_CLASSIFICATION	6.845344642702291E-4	DESIGN
sequence support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998308069426307	WITHOUT_CLASSIFICATION	1.6919305736924612E-4	DESIGN
guid support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991760363141443	WITHOUT_CLASSIFICATION	8.239636858558007E-4	DESIGN
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991760363141443	WITHOUT_CLASSIFICATION	8.239636858558007E-4	DESIGN
by default we report no support	WITHOUT_CLASSIFICATION	0.9810097782657585	WITHOUT_CLASSIFICATION	0.01899022173424142	DESIGN
by default we report no support for nowait lock semantics	WITHOUT_CLASSIFICATION	0.8633143164099575	WITHOUT_CLASSIFICATION	0.13668568359004252	DESIGN
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997053933830908	WITHOUT_CLASSIFICATION	2.9460661690917695E-4	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9868729448920861	WITHOUT_CLASSIFICATION	0.013127055107913814	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9960697622372393	WITHOUT_CLASSIFICATION	0.003930237762760617	DESIGN
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999076807234056	WITHOUT_CLASSIFICATION	9.231927659441421E-5	DESIGN
sqlexception support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996917958613418	WITHOUT_CLASSIFICATION	3.08204138658123E-4	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992515429453592	WITHOUT_CLASSIFICATION	7.484570546407464E-4	DESIGN
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992573506765476	WITHOUT_CLASSIFICATION	7.426493234523527E-4	DESIGN
ddl support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991760363141443	WITHOUT_CLASSIFICATION	8.239636858558007E-4	DESIGN
grrr for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9998937531431861	WITHOUT_CLASSIFICATION	1.0624685681388167E-4	DESIGN
informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994161249320642	WITHOUT_CLASSIFICATION	5.838750679357038E-4	DESIGN
return false here as most databases do not properly support this construct	WITHOUT_CLASSIFICATION	0.9974861137110579	WITHOUT_CLASSIFICATION	0.00251388628894203	DESIGN
mckoi has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.99984493666667	WITHOUT_CLASSIFICATION	1.550633333300053E-4	DESIGN
oracle8 and previous define only a "date" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9746158828961434	WITHOUT_CLASSIFICATION	0.025384117103856598	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9992894901227386	WITHOUT_CLASSIFICATION	7.10509877261271E-4	DESIGN
" cascade"	WITHOUT_CLASSIFICATION	0.9998815485308185	WITHOUT_CLASSIFICATION	1.1845146918161677E-4	DESIGN
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9998429396346021	WITHOUT_CLASSIFICATION	1.570603653978463E-4	DESIGN
public boolean droptemporarytableafteruse() {we have to because postgres sets current txto rollback only after a failed create tablereturn true}	WITHOUT_CLASSIFICATION	0.9999515933619636	WITHOUT_CLASSIFICATION	4.840663803641956E-5	DESIGN
check violation	WITHOUT_CLASSIFICATION	0.9992408229737761	WITHOUT_CLASSIFICATION	7.591770262237815E-4	DESIGN
unique violation	WITHOUT_CLASSIFICATION	0.9989928392403485	WITHOUT_CLASSIFICATION	0.0010071607596515114	DESIGN
foreign key violation	WITHOUT_CLASSIFICATION	0.9995287425287754	WITHOUT_CLASSIFICATION	4.712574712246178E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997568004076245	WITHOUT_CLASSIFICATION	2.4319959237553007E-4	DESIGN
not null violation	WITHOUT_CLASSIFICATION	0.9987767532224445	WITHOUT_CLASSIFICATION	0.0012232467775553939	DESIGN
all other	WITHOUT_CLASSIFICATION	0.9996196647058734	WITHOUT_CLASSIFICATION	3.8033529412657795E-4	DESIGN
register the type of the out param - postgresql uses types.other	WITHOUT_CLASSIFICATION	0.9986552113065257	WITHOUT_CLASSIFICATION	0.0013447886934744014	DESIGN
seems to not really public boolean supportsrowvalueconstructorsyntax() { return true }	WITHOUT_CLASSIFICATION	0.8894625787602578	WITHOUT_CLASSIFICATION	0.11053742123974222	DESIGN
seems to have spotty lob suppport	WITHOUT_CLASSIFICATION	0.9988724621008173	WITHOUT_CLASSIFICATION	0.0011275378991826763	DESIGN
hhh-2300	WITHOUT_CLASSIFICATION	0.9997622491590575	WITHOUT_CLASSIFICATION	2.3775084094252203E-4	DESIGN
ignore (probably h2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9996772937566346	WITHOUT_CLASSIFICATION	3.2270624336533133E-4	DESIGN
numeric functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999243438159643	WITHOUT_CLASSIFICATION	7.565618403569762E-4	DESIGN
string functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993076591216571	WITHOUT_CLASSIFICATION	6.923408783429158E-4	DESIGN
time and date functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998863646950272	WITHOUT_CLASSIFICATION	1.1363530497273047E-4	DESIGN
system functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987144903611735	WITHOUT_CLASSIFICATION	0.0012855096388264633	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9988834107875553	WITHOUT_CLASSIFICATION	0.0011165892124447463	DESIGN
23000 check constraint violation {0} 23001 unique index or primary key violation {0}	WITHOUT_CLASSIFICATION	0.9998047122206849	WITHOUT_CLASSIFICATION	1.9528777931512666E-4	DESIGN
display the dialect version.	WITHOUT_CLASSIFICATION	0.9987721963326195	WITHOUT_CLASSIFICATION	0.0012278036673804996	DESIGN
the rdms concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999991248120415	WITHOUT_CLASSIFICATION	8.751879585719338E-7	DESIGN
dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979317837328767	WITHOUT_CLASSIFICATION	0.0020682162671231924	DESIGN
original dialect.java returns " for update"	WITHOUT_CLASSIFICATION	0.9997968400365884	WITHOUT_CLASSIFICATION	2.0315996341158368E-4	DESIGN
verify the state of this new method in hibernate 3.0 dialect.java	WITHOUT_CLASSIFICATION	0.9994131933886582	WITHOUT_CLASSIFICATION	5.868066113418473E-4	DESIGN
origial dialect.java returns true	WITHOUT_CLASSIFICATION	0.9992685085412825	WITHOUT_CLASSIFICATION	7.314914587175071E-4	DESIGN
the keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.8583642736141098	WITHOUT_CLASSIFICATION	0.14163572638589025	DESIGN
sequence methods - start. the rdms dialect needs these	WITHOUT_CLASSIFICATION	0.9963554646115217	WITHOUT_CLASSIFICATION	0.0036445353884781706	DESIGN
methods to make it possible to use the native id generator	WITHOUT_CLASSIFICATION	0.9940101465956148	WITHOUT_CLASSIFICATION	0.005989853404385156	DESIGN
the where clause was added to eliminate this statement from brute force searches.	WITHOUT_CLASSIFICATION	0.9990035483391834	WITHOUT_CLASSIFICATION	9.964516608166297E-4	DESIGN
sequence methods - end	WITHOUT_CLASSIFICATION	0.9992779492787974	WITHOUT_CLASSIFICATION	7.220507212025097E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997568004076245	WITHOUT_CLASSIFICATION	2.4319959237553007E-4	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9992894901227386	WITHOUT_CLASSIFICATION	7.10509877261271E-4	DESIGN
we must return a valid rdms/rsa command from this method to prevent rdms/rsa from issuing error 400	WITHOUT_CLASSIFICATION	0.7792532070122244	WITHOUT_CLASSIFICATION	0.22074679298777553	DESIGN
used with drop table to delete all records in the table.	WITHOUT_CLASSIFICATION	0.8357253400062264	WITHOUT_CLASSIFICATION	0.16427465999377355	DESIGN
rdms supports the union all clause.	WITHOUT_CLASSIFICATION	0.9996890202667688	WITHOUT_CLASSIFICATION	3.1097973323124934E-4	DESIGN
rdms has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9998322858491299	WITHOUT_CLASSIFICATION	1.6771415087010708E-4	DESIGN
multi-param dialect functions	WITHOUT_CLASSIFICATION	0.9945451003716639	WITHOUT_CLASSIFICATION	0.0054548996283361505	DESIGN
function templates	WITHOUT_CLASSIFICATION	0.999965567410523	WITHOUT_CLASSIFICATION	3.4432589476994715E-5	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9988834107875553	WITHOUT_CLASSIFICATION	0.0011165892124447463	DESIGN
this assumes schema support which is present in 1.8.0 and later	WITHOUT_CLASSIFICATION	0.9992580144317079	WITHOUT_CLASSIFICATION	7.41985568292119E-4	DESIGN
hsqldb only supports read_uncommitted transaction isolation	WITHOUT_CLASSIFICATION	0.9997401348418512	WITHOUT_CLASSIFICATION	2.5986515814879605E-4	DESIGN
multi-param string dialect functions	WITHOUT_CLASSIFICATION	0.9981815329823174	WITHOUT_CLASSIFICATION	0.0018184670176826184	DESIGN
multi-param numeric dialect functions	WITHOUT_CLASSIFICATION	0.9980130611960224	WITHOUT_CLASSIFICATION	0.0019869388039776554	DESIGN
multi-param date dialect functions	WITHOUT_CLASSIFICATION	0.9985889599112405	WITHOUT_CLASSIFICATION	0.0014110400887594496	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9992893050254211	WITHOUT_CLASSIFICATION	7.106949745789132E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997568004076245	WITHOUT_CLASSIFICATION	2.4319959237553007E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997568004076245	WITHOUT_CLASSIFICATION	2.4319959237553007E-4	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9944712057872046	WITHOUT_CLASSIFICATION	0.0055287942127954445	DESIGN
register the type of the out param - an oracle specific type	WITHOUT_CLASSIFICATION	0.9999003478678892	WITHOUT_CLASSIFICATION	9.965213211078435E-5	DESIGN
timesten has no blob/clob support but these types may be suitable for some applications. the length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.999142411096458	WITHOUT_CLASSIFICATION	8.575889035420265E-4	DESIGN
new methods in dialect3	WITHOUT_CLASSIFICATION	0.997442234494226	WITHOUT_CLASSIFICATION	0.002557765505774055	DESIGN
public boolean supportsforupdatenowait() {return false}	WITHOUT_CLASSIFICATION	0.9986138172979953	WITHOUT_CLASSIFICATION	0.0013861827020047069	DESIGN
timesten has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9998441391461353	WITHOUT_CLASSIFICATION	1.5586085386474553E-4	DESIGN
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9995394640213212	WITHOUT_CLASSIFICATION	4.605359786788326E-4	DESIGN
add new ordered map	WITHOUT_CLASSIFICATION	0.9996242574140543	WITHOUT_CLASSIFICATION	3.7574258594576026E-4	DESIGN
registercolumntype( types.varchar 16777215 "mediumtext" )	WITHOUT_CLASSIFICATION	0.9980406001739621	WITHOUT_CLASSIFICATION	0.001959399826037923	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997568004076245	WITHOUT_CLASSIFICATION	2.4319959237553007E-4	DESIGN
this assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999888638864163	WITHOUT_CLASSIFICATION	1.1136113583791596E-5	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9981471960212326	WITHOUT_CLASSIFICATION	0.00185280397876739	DESIGN
return "select current_timestamp from rdb$database"	WITHOUT_CLASSIFICATION	0.9985911416838225	WITHOUT_CLASSIFICATION	0.001408858316177482	DESIGN
registercolumntype data types	WITHOUT_CLASSIFICATION	0.9995276523321479	WITHOUT_CLASSIFICATION	4.7234766785211944E-4	DESIGN
hibernate seems to ignore this type	WITHOUT_CLASSIFICATION	0.9967369180757268	WITHOUT_CLASSIFICATION	0.0032630819242732744	DESIGN
ibid for current_time and current_date	WITHOUT_CLASSIFICATION	0.9996145116446292	WITHOUT_CLASSIFICATION	3.8548835537087825E-4	DESIGN
tell hibernate to use getbytes instead of getbinarystream	WITHOUT_CLASSIFICATION	0.9900268160155583	WITHOUT_CLASSIFICATION	0.009973183984441813	DESIGN
no batch statements	WITHOUT_CLASSIFICATION	0.9999113104778453	WITHOUT_CLASSIFICATION	8.868952215461179E-5	DESIGN
we might want a special case for 192. this is very common for money types and here it is converted to 181	WITHOUT_CLASSIFICATION	0.9198065253125848	DESIGN	0.08019347468741517	WITHOUT_CLASSIFICATION
no pointbase bit	WITHOUT_CLASSIFICATION	0.996239434886608	WITHOUT_CLASSIFICATION	0.0037605651133920453	DESIGN
no pointbase tinyint	WITHOUT_CLASSIFICATION	0.9995295732788763	WITHOUT_CLASSIFICATION	4.704267211237487E-4	DESIGN
pointbase has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9995803790890575	WITHOUT_CLASSIFICATION	4.196209109425677E-4	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9992894901227386	WITHOUT_CLASSIFICATION	7.10509877261271E-4	DESIGN
the current_timestamp is more accurate but only known to be supported in sql server 7.0 and later (i.e. sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.5747724400285709	WITHOUT_CLASSIFICATION	0.425227559971429	DESIGN
sql server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999960736231573	WITHOUT_CLASSIFICATION	3.9263768426930964E-6	DESIGN
here assume sqlserver2005 using snapshot isolation which does not have this problem	WITHOUT_CLASSIFICATION	0.9931187517382526	WITHOUT_CLASSIFICATION	0.006881248261747319	DESIGN
registercolumntype( types.blob 16777215 "mediumblob" ) registercolumntype( types.blob 65535 "blob" )	WITHOUT_CLASSIFICATION	0.9945451994474448	WITHOUT_CLASSIFICATION	0.0054548005525552395	DESIGN
registercolumntype( types.clob 16777215 "mediumtext" ) registercolumntype( types.clob 65535 "text" )	WITHOUT_CLASSIFICATION	0.9987226085487053	WITHOUT_CLASSIFICATION	0.0012773914512947562	DESIGN
registercolumntype( types.varchar 16777215 "mediumtext" ) registercolumntype( types.varchar 65535 "text" )	WITHOUT_CLASSIFICATION	0.9987226085487053	WITHOUT_CLASSIFICATION	0.0012773914512947562	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9992894901227386	WITHOUT_CLASSIFICATION	7.10509877261271E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9997100064489802	WITHOUT_CLASSIFICATION	2.899935510197287E-4	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9981471960212326	WITHOUT_CLASSIFICATION	0.00185280397876739	DESIGN
sybase bit type does not support null values	WITHOUT_CLASSIFICATION	0.9741595978809944	WITHOUT_CLASSIFICATION	0.02584040211900564	DESIGN
this assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999888638864163	WITHOUT_CLASSIFICATION	1.1136113583791596E-5	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997568004076245	WITHOUT_CLASSIFICATION	2.4319959237553007E-4	DESIGN
you may still have other resultsets or update counts left to process here but you can't do it now or the resultset you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999724478061	WITHOUT_CLASSIFICATION	2.7552193922735266E-8	DESIGN
not null (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9974325047927127	WITHOUT_CLASSIFICATION	0.0025674952072873448	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997568004076245	WITHOUT_CLASSIFICATION	2.4319959237553007E-4	DESIGN
oracle driver reports to support getgeneratedkeys() but they only support the version taking an array of the names of the columns to be returned (via its returning clause). no other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999514627057584	WITHOUT_CLASSIFICATION	4.853729424157631E-5	DESIGN
multi-param string dialect functions	WITHOUT_CLASSIFICATION	0.9981815329823174	WITHOUT_CLASSIFICATION	0.0018184670176826184	DESIGN
multi-param numeric dialect functions	WITHOUT_CLASSIFICATION	0.9980130611960224	WITHOUT_CLASSIFICATION	0.0019869388039776554	DESIGN
multi-param date dialect functions	WITHOUT_CLASSIFICATION	0.9985889599112405	WITHOUT_CLASSIFICATION	0.0014110400887594496	DESIGN
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999909827466633	WITHOUT_CLASSIFICATION	9.017253336642944E-6	DESIGN
add the main query	WITHOUT_CLASSIFICATION	0.9999137209609166	WITHOUT_CLASSIFICATION	8.62790390834208E-5	DESIGN
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999731159899631	WITHOUT_CLASSIFICATION	2.688401003700296E-5	DESIGN
this assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999888638864163	WITHOUT_CLASSIFICATION	1.1136113583791596E-5	DESIGN
you may still have other resultsets or update counts left to process here but you can't do it now or the resultset you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999724478061	WITHOUT_CLASSIFICATION	2.7552193922735266E-8	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997568004076245	WITHOUT_CLASSIFICATION	2.4319959237553007E-4	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9992894901227386	WITHOUT_CLASSIFICATION	7.10509877261271E-4	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9992893050254211	WITHOUT_CLASSIFICATION	7.106949745789132E-4	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9944712057872046	WITHOUT_CLASSIFICATION	0.0055287942127954445	DESIGN
register the type of the out param - an oracle specific type	WITHOUT_CLASSIFICATION	0.9999003478678892	WITHOUT_CLASSIFICATION	9.965213211078435E-5	DESIGN
features which change between 8i 9i and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999815974165226	WITHOUT_CLASSIFICATION	1.8402583477385547E-4	DESIGN
features which remain constant across 8i 9i and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999778310353119	WITHOUT_CLASSIFICATION	2.2168964688087417E-5	DESIGN
binary %stream character %stream	WITHOUT_CLASSIFICATION	0.9999315792925974	WITHOUT_CLASSIFICATION	6.842070740269234E-5	DESIGN
getdefaultproperties().setproperty(environment.statement_batch_size no_batch)	WITHOUT_CLASSIFICATION	0.9995592003541517	WITHOUT_CLASSIFICATION	4.407996458482287E-4	DESIGN
hibernate impelemnts cast in dialect.java	WITHOUT_CLASSIFICATION	0.9962905606019731	WITHOUT_CLASSIFICATION	0.003709439398026885	DESIGN
aggregate functions shouldn't be registered right? registerfunction( "list" new standardsqlfunction("list"hibernate.string) ) stopped on $list	WITHOUT_CLASSIFICATION	0.9745130830820121	DESIGN	0.025486916917987934	WITHOUT_CLASSIFICATION
ddl support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991760363141443	WITHOUT_CLASSIFICATION	8.239636858558007E-4	DESIGN
below is for cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9995067837939194	WITHOUT_CLASSIFICATION	4.932162060805319E-4	DESIGN
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9756874812641455	WITHOUT_CLASSIFICATION	0.02431251873585453	DESIGN
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9953422751144789	WITHOUT_CLASSIFICATION	0.0046577248855211315	DESIGN
the syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9682035963308341	WITHOUT_CLASSIFICATION	0.0317964036691659	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.999620800350095	WITHOUT_CLASSIFICATION	3.79199649905041E-4	DESIGN
identity support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993154655357298	WITHOUT_CLASSIFICATION	6.845344642702291E-4	DESIGN
sequence support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998308069426307	WITHOUT_CLASSIFICATION	1.6919305736924612E-4	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9868729448920861	WITHOUT_CLASSIFICATION	0.013127055107913814	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.999620800350095	WITHOUT_CLASSIFICATION	3.79199649905041E-4	DESIGN
the syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.990691364442715	WITHOUT_CLASSIFICATION	0.009308635557284988	DESIGN
completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9994531049703985	WITHOUT_CLASSIFICATION	5.468950296014505E-4	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993105435339059	WITHOUT_CLASSIFICATION	6.894564660940791E-4	DESIGN
limit support (ala top) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999563844589636	WITHOUT_CLASSIFICATION	4.361554103641329E-5	DESIGN
intersystems cache' does not current support "select for update" syntax set your transaction mode to read_committed before using	WITHOUT_CLASSIFICATION	0.9987159072878713	WITHOUT_CLASSIFICATION	0.001284092712128702	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997568004076245	WITHOUT_CLASSIFICATION	2.4319959237553007E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997568004076245	WITHOUT_CLASSIFICATION	2.4319959237553007E-4	DESIGN
<string>	WITHOUT_CLASSIFICATION	0.9997632075678312	WITHOUT_CLASSIFICATION	2.367924321688419E-4	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9960697622372393	WITHOUT_CLASSIFICATION	0.003930237762760617	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992515429453592	WITHOUT_CLASSIFICATION	7.484570546407464E-4	DESIGN
the keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.8583642736141098	WITHOUT_CLASSIFICATION	0.14163572638589025	DESIGN
does the limit clause come at the start of the select statement rather than at the end?	WITHOUT_CLASSIFICATION	0.9998078486146134	WITHOUT_CLASSIFICATION	1.921513853866191E-4	DESIGN
does the limit clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999375637021133	WITHOUT_CLASSIFICATION	6.243629788673973E-5	DESIGN
the name of the sql function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9996516413154516	WITHOUT_CLASSIFICATION	3.483586845485066E-4	DESIGN
create an outerjoingenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9985452306564684	WITHOUT_CLASSIFICATION	0.0014547693435315004	DESIGN
the keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9990871936096383	WITHOUT_CLASSIFICATION	9.128063903617377E-4	DESIGN
registerfunction( "trim" new standardsqlfunction( "trim" hibernate.string ) )	WITHOUT_CLASSIFICATION	0.9985193304118757	WITHOUT_CLASSIFICATION	0.0014806695881242815	DESIGN
skip the from keyword in params	WITHOUT_CLASSIFICATION	0.9998448041809774	WITHOUT_CLASSIFICATION	1.5519581902252738E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9992285899396746	WITHOUT_CLASSIFICATION	7.714100603253817E-4	DESIGN
potentialtrimcharacterargindex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999797860819395	WITHOUT_CLASSIFICATION	2.021391806052378E-5	DESIGN
sqlfunction implementation	WITHOUT_CLASSIFICATION	0.9996162714017203	WITHOUT_CLASSIFICATION	3.837285982796897E-4	DESIGN
conceivable that the dialect ctor could throw hibernateexceptions so don't re-wrap	WITHOUT_CLASSIFICATION	0.9895934439008739	WITHOUT_CLASSIFICATION	0.01040655609912625	DESIGN
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999154460287544	WITHOUT_CLASSIFICATION	8.455397124572228E-5	DESIGN
register resolvers set via environment property	WITHOUT_CLASSIFICATION	0.9916810569403943	WITHOUT_CLASSIFICATION	0.00831894305960568	DESIGN
kept for backward compatibility until after the 3.1beta5 release of ha	WITHOUT_CLASSIFICATION	0.9999857330419184	WITHOUT_CLASSIFICATION	1.4266958081590399E-5	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9996653078008496	WITHOUT_CLASSIFICATION	3.3469219915041126E-4	DESIGN
the cascadingaction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997768172591897	WITHOUT_CLASSIFICATION	2.2318274081026482E-4	DESIGN
the cascadingaction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998509519073201	WITHOUT_CLASSIFICATION	1.4904809267997615E-4	DESIGN
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999074400219722	WITHOUT_CLASSIFICATION	9.255997802777291E-5	DESIGN
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9982484333637095	WITHOUT_CLASSIFICATION	0.0017515666362904329	DESIGN
(lockmode) anything	WITHOUT_CLASSIFICATION	0.9998678368456347	WITHOUT_CLASSIFICATION	1.32163154365173E-4	DESIGN
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998701773510402	WITHOUT_CLASSIFICATION	1.2982264895973803E-4	DESIGN
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999214138126027	WITHOUT_CLASSIFICATION	7.858618739735193E-5	DESIGN
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999045590789037	WITHOUT_CLASSIFICATION	9.54409210962961E-5	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999979686848514	WITHOUT_CLASSIFICATION	2.031315148602931E-5	DESIGN
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.998692266668446	WITHOUT_CLASSIFICATION	0.0013077333315540136	DESIGN
for deprecated saveorupdatecopy()	WITHOUT_CLASSIFICATION	0.9953716549746764	WITHOUT_CLASSIFICATION	0.004628345025323566	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999047837473476	WITHOUT_CLASSIFICATION	9.521625265243496E-5	DESIGN
a proxy cannot be transient and it breaks foreignkeys.istransient	WITHOUT_CLASSIFICATION	0.9979593494671647	WITHOUT_CLASSIFICATION	0.0020406505328352574	DESIGN
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999309230869081	WITHOUT_CLASSIFICATION	6.9076913091964E-5	DESIGN
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996883499521261	WITHOUT_CLASSIFICATION	3.1165004787391107E-4	DESIGN
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9994835156582713	WITHOUT_CLASSIFICATION	5.164843417286627E-4	DESIGN
actually the semantics of the next three are really "bag" note that unlike objects collection insertions updates deletions are not really remembered between flushes. we just re-use the same lists for convenience.	WITHOUT_CLASSIFICATION	0.9108498699171423	DESIGN	0.08915013008285773	WITHOUT_CLASSIFICATION
add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9995793272536976	WITHOUT_CLASSIFICATION	4.206727463024225E-4	DESIGN
continue loop	WITHOUT_CLASSIFICATION	0.9999620166679571	WITHOUT_CLASSIFICATION	3.798333204291092E-5	DESIGN
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9992167874057533	WITHOUT_CLASSIFICATION	7.832125942467136E-4	DESIGN
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999263328632694	WITHOUT_CLASSIFICATION	7.366713673062557E-5	DESIGN
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999400849422769	WITHOUT_CLASSIFICATION	5.991505772313985E-5	DESIGN
the map of batch numbers to entityinsertaction lists	WITHOUT_CLASSIFICATION	0.9995907927198836	WITHOUT_CLASSIFICATION	4.0920728011649524E-4	DESIGN
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9991004322892297	WITHOUT_CLASSIFICATION	8.995677107703501E-4	DESIGN
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999300848622453	WITHOUT_CLASSIFICATION	6.991513775467179E-5	DESIGN
remove the current element from insertions. it will be added back later.	WITHOUT_CLASSIFICATION	0.9999932556998106	WITHOUT_CLASSIFICATION	6.74430018952105E-6	DESIGN
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9989495376240108	WITHOUT_CLASSIFICATION	0.0010504623759892363	DESIGN
there is already an existing batch for this type of entity. check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9989934375407631	WITHOUT_CLASSIFICATION	0.0010065624592368889	DESIGN
now rebuild the insertions list. there is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9994326443386548	WITHOUT_CLASSIFICATION	5.673556613453415E-4	DESIGN
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9913618326078697	WITHOUT_CLASSIFICATION	0.00863816739213021	DESIGN
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9998653865461367	WITHOUT_CLASSIFICATION	1.346134538633687E-4	DESIGN
find the batch number associated with the current association if any.	WITHOUT_CLASSIFICATION	0.999925508878716	WITHOUT_CLASSIFICATION	7.449112128397519E-5	DESIGN
create a new batch for this type. the batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9950254293732748	WITHOUT_CLASSIFICATION	0.004974570626725163	DESIGN
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9985176157208685	WITHOUT_CLASSIFICATION	0.001482384279131413	DESIGN
since this entity will now be processed in the latest possible batch we can be assured that it will come after all other associations there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9898368667431574	WITHOUT_CLASSIFICATION	0.010163133256842543	DESIGN
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999409786231029	WITHOUT_CLASSIFICATION	5.9021376896993896E-5	DESIGN
not really necessary but good for consistency	WITHOUT_CLASSIFICATION	0.95823819778033	WITHOUT_CLASSIFICATION	0.04176180221966997	DESIGN
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9998862203331943	WITHOUT_CLASSIFICATION	1.1377966680564099E-4	DESIGN
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9988001422182865	WITHOUT_CLASSIFICATION	0.0011998577817135061	DESIGN
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9981989989229776	WITHOUT_CLASSIFICATION	0.001801001077022404	DESIGN
loaded entity instances by entityuniquekey	WITHOUT_CLASSIFICATION	0.9995849429667628	WITHOUT_CLASSIFICATION	4.1505703323719054E-4	DESIGN
identity map of entityentry instances by the entity instance	WITHOUT_CLASSIFICATION	0.9999683185120786	WITHOUT_CLASSIFICATION	3.168148792141141E-5	DESIGN
entity proxies by entitykey	WITHOUT_CLASSIFICATION	0.9987036004348255	WITHOUT_CLASSIFICATION	0.001296399565174528	DESIGN
snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9996651603625769	WITHOUT_CLASSIFICATION	3.348396374231505E-4	DESIGN
identity map of array holder arrayholder instances by the array instance	WITHOUT_CLASSIFICATION	0.9999833401016804	WITHOUT_CLASSIFICATION	1.665989831953028E-5	DESIGN
collection wrappers by the collectionkey key=collectionkey value=persistentcollection	WITHOUT_CLASSIFICATION	0.999808639720152	WITHOUT_CLASSIFICATION	1.9136027984807482E-4	DESIGN
set of entitykeys of deleted objects	WITHOUT_CLASSIFICATION	0.9997733998126914	WITHOUT_CLASSIFICATION	2.2660018730869092E-4	DESIGN
properties that we have tried to load and not found in the database	WITHOUT_CLASSIFICATION	0.9994423029478013	WITHOUT_CLASSIFICATION	5.576970521986496E-4	DESIGN
a list of collection wrappers that were instantiating during result set processing that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.999859476397492	WITHOUT_CLASSIFICATION	1.4052360250804612E-4	DESIGN
a container for collections we load up when the owning entity is not yet loaded for now this is purely transient!	WITHOUT_CLASSIFICATION	0.987164459432619	WITHOUT_CLASSIFICATION	0.012835540567380996	DESIGN
downgrade locks	WITHOUT_CLASSIFICATION	0.9996366938180822	WITHOUT_CLASSIFICATION	3.63306181917873E-4	DESIGN
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9998187044804606	WITHOUT_CLASSIFICATION	1.8129551953941536E-4	DESIGN
unwrap the object	WITHOUT_CLASSIFICATION	0.9998686954273176	WITHOUT_CLASSIFICATION	1.3130457268242858E-4	DESIGN
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999534129916327	WITHOUT_CLASSIFICATION	4.658700836736149E-5	DESIGN
return the proxied object	WITHOUT_CLASSIFICATION	0.9992199903847364	WITHOUT_CLASSIFICATION	7.800096152635839E-4	DESIGN
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999923953209163	WITHOUT_CLASSIFICATION	7.604679083678135E-6	DESIGN
early exit	WITHOUT_CLASSIFICATION	0.9999502189645638	WITHOUT_CLASSIFICATION	4.978103543631844E-5	DESIGN
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.997798428830934	WITHOUT_CLASSIFICATION	0.0022015711690659763	DESIGN
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.992328346484607	WITHOUT_CLASSIFICATION	0.007671653515393013	DESIGN
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.8461017225723321	DESIGN	0.15389827742766787	WITHOUT_CLASSIFICATION
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999799463048172	WITHOUT_CLASSIFICATION	2.00536951828061E-5	DESIGN
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9982306883409704	WITHOUT_CLASSIFICATION	0.0017693116590296438	DESIGN
public boolean isnonexistant(entitykey key) {return nonexistantentitykeys.contains(key)}	WITHOUT_CLASSIFICATION	0.9986133055814412	WITHOUT_CLASSIFICATION	0.0013866944185587785	DESIGN
public boolean isnonexistant(entityuniquekey key) {return nonexistententityuniquekeys.contains(key)}	WITHOUT_CLASSIFICATION	0.9986133055814412	WITHOUT_CLASSIFICATION	0.0013866944185587785	DESIGN
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9950351261921014	WITHOUT_CLASSIFICATION	0.004964873807898628	DESIGN
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.993698270582343	WITHOUT_CLASSIFICATION	0.00630172941765708	DESIGN
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9934237419059972	WITHOUT_CLASSIFICATION	0.006576258094002698	DESIGN
otherwise the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999965480894452	WITHOUT_CLASSIFICATION	3.4519105548817963E-6	DESIGN
adds remove as a sort-of alias for delete	WITHOUT_CLASSIFICATION	0.9998626912864337	WITHOUT_CLASSIFICATION	1.3730871356632175E-4	DESIGN
bad cast	WITHOUT_CLASSIFICATION	0.9992113085509711	WITHOUT_CLASSIFICATION	7.886914490290661E-4	DESIGN
return lhspersister.getsubclasspropertycolumnnames(property)	WITHOUT_CLASSIFICATION	0.9994948615909314	WITHOUT_CLASSIFICATION	5.051384090686703E-4	DESIGN
property-refs for associations defined on a component are not supported so no need to slice	WITHOUT_CLASSIFICATION	0.9983717885798739	WITHOUT_CLASSIFICATION	0.0016282114201260352	DESIGN
if there is no property-ref assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999933521765677	WITHOUT_CLASSIFICATION	6.647823432315826E-6	DESIGN
handle a property-ref	WITHOUT_CLASSIFICATION	0.9960851385722435	WITHOUT_CLASSIFICATION	0.003914861427756549	DESIGN
nativesqlqueryreturn	WITHOUT_CLASSIFICATION	0.999620800350095	WITHOUT_CLASSIFICATION	3.79199649905041E-4	DESIGN
final boolean forcecacherefresh	WITHOUT_CLASSIFICATION	0.9999341898923597	WITHOUT_CLASSIFICATION	6.581010764025429E-5	DESIGN
why is all others non final ?	WITHOUT_CLASSIFICATION	0.8279535928409377	WITHOUT_CLASSIFICATION	0.17204640715906228	DESIGN
this.forcecacherefresh = forcecacherefresh	WITHOUT_CLASSIFICATION	0.9999016102276331	WITHOUT_CLASSIFICATION	9.838977236689811E-5	DESIGN
hella important optimization!!!	WITHOUT_CLASSIFICATION	0.9987945966441394	WITHOUT_CLASSIFICATION	0.0012054033558605817	DESIGN
return that.type.equals(type) && equalshelper.equals(that.value value)	WITHOUT_CLASSIFICATION	0.9981610711387884	WITHOUT_CLASSIFICATION	0.001838928861211666	DESIGN
must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9997206903172969	WITHOUT_CLASSIFICATION	2.7930968270307034E-4	DESIGN
take a snapshot	WITHOUT_CLASSIFICATION	0.9993496926527242	WITHOUT_CLASSIFICATION	6.503073472757986E-4	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9979715025855816	WITHOUT_CLASSIFICATION	0.0020284974144183752	DESIGN
the owning entity may have been deleted and its identifier unset due to identifier-rollback in which case try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9998117176643718	WITHOUT_CLASSIFICATION	1.8828233562825372E-4	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9991292153647384	WITHOUT_CLASSIFICATION	8.707846352616173E-4	DESIGN
we've been here before	WITHOUT_CLASSIFICATION	0.9996033723919957	WITHOUT_CLASSIFICATION	3.9662760800421374E-4	DESIGN
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999846262467933	WITHOUT_CLASSIFICATION	1.537375320675344E-5	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9991292153647384	WITHOUT_CLASSIFICATION	8.707846352616173E-4	DESIGN
if either its role changed	WITHOUT_CLASSIFICATION	0.9999764392133694	WITHOUT_CLASSIFICATION	2.35607866306368E-5	DESIGN
or its key changed	WITHOUT_CLASSIFICATION	0.9999948468953409	WITHOUT_CLASSIFICATION	5.153104659099081E-6	DESIGN
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9997598735811299	WITHOUT_CLASSIFICATION	2.401264188701054E-4	DESIGN
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9966820909008974	WITHOUT_CLASSIFICATION	0.0033179090991024645	DESIGN
force initialize!	WITHOUT_CLASSIFICATION	0.999764973206829	WITHOUT_CLASSIFICATION	2.350267931709693E-4	DESIGN
else if it's elements changed	WITHOUT_CLASSIFICATION	0.99999748104063	WITHOUT_CLASSIFICATION	2.5189593699781518E-6	DESIGN
attributes maintained between flush cycles	WITHOUT_CLASSIFICATION	0.9983953194364754	WITHOUT_CLASSIFICATION	0.001604680563524517	DESIGN
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999378328664883	WITHOUT_CLASSIFICATION	6.216713351167538E-5	DESIGN
allow the collectionsnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9985483787823315	WITHOUT_CLASSIFICATION	0.0014516212176684973	DESIGN
attributes used only during flush cycle	WITHOUT_CLASSIFICATION	0.9639651775843309	WITHOUT_CLASSIFICATION	0.03603482241566918	DESIGN
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.999983036700748	WITHOUT_CLASSIFICATION	1.6963299252039164E-5	DESIGN
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999539622584835	WITHOUT_CLASSIFICATION	4.603774151645398E-5	DESIGN
during flush we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9135603262596729	WITHOUT_CLASSIFICATION	0.08643967374032711	DESIGN
if we instantiate a collection during the flush() process we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999960153142508	WITHOUT_CLASSIFICATION	3.984685749315485E-6	DESIGN
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9972302913304611	WITHOUT_CLASSIFICATION	0.0027697086695389057	DESIGN
a newly wrapped collection is not dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.5638364465777881	DESIGN	0.43616355342221197	WITHOUT_CLASSIFICATION
collection.cleardirty()	WITHOUT_CLASSIFICATION	0.9991285900065839	WITHOUT_CLASSIFICATION	8.714099934160564E-4	DESIGN
collection.cleardirty()	WITHOUT_CLASSIFICATION	0.9991285900065839	WITHOUT_CLASSIFICATION	8.714099934160564E-4	DESIGN
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9997929800432356	WITHOUT_CLASSIFICATION	2.07019956764407E-4	DESIGN
optimization	WITHOUT_CLASSIFICATION	0.9999241588150805	WITHOUT_CLASSIFICATION	7.58411849195413E-5	DESIGN
optimization optimization	WITHOUT_CLASSIFICATION	0.9998256464367761	WITHOUT_CLASSIFICATION	1.743535632238689E-4	DESIGN
re-snapshot	WITHOUT_CLASSIFICATION	0.999620800350095	WITHOUT_CLASSIFICATION	3.79199649905041E-4	DESIGN
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9997583349545148	WITHOUT_CLASSIFICATION	2.41665045485044E-4	DESIGN
note this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9905842944888685	WITHOUT_CLASSIFICATION	0.009415705511131547	DESIGN
memory optimization	WITHOUT_CLASSIFICATION	0.9999644362428715	WITHOUT_CLASSIFICATION	3.556375712857593E-5	DESIGN
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999088174198196	WITHOUT_CLASSIFICATION	9.118258018034578E-5	DESIGN
copied from session	WITHOUT_CLASSIFICATION	0.9932872407678515	WITHOUT_CLASSIFICATION	0.006712759232148614	DESIGN
this should not happen since the dtd prevents it	WITHOUT_CLASSIFICATION	0.9996171198547665	WITHOUT_CLASSIFICATION	3.8288014523347357E-4	DESIGN
joinprocessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the sql ast. 'hasfiltercondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999777703360446	WITHOUT_CLASSIFICATION	2.2229663955286008E-5	DESIGN
the current join represents the join between a many-to-many association table and its "target" table. here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999940233452944	WITHOUT_CLASSIFICATION	5.976654705584555E-6	DESIGN
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9994724815656173	WITHOUT_CLASSIFICATION	5.27518434382769E-4	DESIGN
values is not null and is checkable we'll look deeper	WITHOUT_CLASSIFICATION	0.9994666034727241	WITHOUT_CLASSIFICATION	5.333965272758509E-4	DESIGN
for non null args check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999280813077442	WITHOUT_CLASSIFICATION	7.191869225570076E-5	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9996653078008496	WITHOUT_CLASSIFICATION	3.3469219915041126E-4	DESIGN
persistent collections may have components	WITHOUT_CLASSIFICATION	0.999815312289298	WITHOUT_CLASSIFICATION	1.8468771070200284E-4	DESIGN
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9998077168794468	WITHOUT_CLASSIFICATION	1.9228312055318214E-4	DESIGN
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9996444643454132	WITHOUT_CLASSIFICATION	3.55535654586826E-4	DESIGN
do the test	WITHOUT_CLASSIFICATION	0.9999902112894831	WITHOUT_CLASSIFICATION	9.788710516912367E-6	DESIGN
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999564273729676	WITHOUT_CLASSIFICATION	4.357262703236111E-5	DESIGN
unwrap it	WITHOUT_CLASSIFICATION	0.9998822798478196	WITHOUT_CLASSIFICATION	1.1772015218039557E-4	DESIGN
see if the entity is already bound to this session if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9597896880644524	WITHOUT_CLASSIFICATION	0.04021031193554768	DESIGN
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999468660136969	WITHOUT_CLASSIFICATION	5.3133986303049555E-5	DESIGN
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9988969051150599	WITHOUT_CLASSIFICATION	0.0011030948849400646	DESIGN
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9968668646771738	WITHOUT_CLASSIFICATION	0.003133135322826244	DESIGN
we use the assumed value if there is one to avoid hitting the database	WITHOUT_CLASSIFICATION	0.999911677411507	WITHOUT_CLASSIFICATION	8.832258849300377E-5	DESIGN
hit the database after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.5314627228881237	WITHOUT_CLASSIFICATION	0.4685372771118763	DESIGN
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context so make some deeper checks	WITHOUT_CLASSIFICATION	0.9986830905858745	WITHOUT_CLASSIFICATION	0.0013169094141254997	DESIGN
int count = 0	WITHOUT_CLASSIFICATION	0.9999906542106223	WITHOUT_CLASSIFICATION	9.345789377757263E-6	DESIGN
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999895349157717	WITHOUT_CLASSIFICATION	1.0465084228241639E-5	DESIGN
checkforend = false	WITHOUT_CLASSIFICATION	0.9999775522379563	WITHOUT_CLASSIFICATION	2.2447762043803474E-5	DESIGN
count++	WITHOUT_CLASSIFICATION	0.9997622491590575	WITHOUT_CLASSIFICATION	2.3775084094252203E-4	DESIGN
end of array start filling again from start	WITHOUT_CLASSIFICATION	0.9999561551352932	WITHOUT_CLASSIFICATION	4.3844864706807794E-5	DESIGN
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9993308550647576	WITHOUT_CLASSIFICATION	6.691449352424215E-4	DESIGN
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999618539739537	WITHOUT_CLASSIFICATION	3.814602604623102E-5	DESIGN
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999746992791531	WITHOUT_CLASSIFICATION	2.5300720847006064E-5	DESIGN
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.999470836647137	WITHOUT_CLASSIFICATION	5.291633528629858E-4	DESIGN
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9998633951495689	WITHOUT_CLASSIFICATION	1.3660485043111647E-4	DESIGN
ignore this row of results! note the early exit	WITHOUT_CLASSIFICATION	0.999949238962096	WITHOUT_CLASSIFICATION	5.0761037904120954E-5	DESIGN
initialize this collection	WITHOUT_CLASSIFICATION	0.9912439812923884	WITHOUT_CLASSIFICATION	0.008756018707611437	DESIGN
create one	WITHOUT_CLASSIFICATION	0.9998101492324312	WITHOUT_CLASSIFICATION	1.8985076756885706E-4	DESIGN
warning can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9991168846847138	WITHOUT_CLASSIFICATION	8.831153152861419E-4	DESIGN
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9998982135430489	WITHOUT_CLASSIFICATION	1.0178645695109977E-4	DESIGN
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9944204058053094	WITHOUT_CLASSIFICATION	0.005579594194690469	DESIGN
some filters affecting the collection are enabled on the session so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9971392558302921	WITHOUT_CLASSIFICATION	0.002860744169707946	DESIGN
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9942628461040273	WITHOUT_CLASSIFICATION	0.005737153895972742	DESIGN
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998709094209433	WITHOUT_CLASSIFICATION	1.2909057905671333E-4	DESIGN
collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992940440587613	WITHOUT_CLASSIFICATION	7.059559412386241E-4	DESIGN
simple cache of param metadata based on query string. ideally the original "user-supplied query" string should be used to retreive this metadata (i.e. not the para-list-expanded query string) to avoid unnecessary cache entries. used solely for caching param metadata for native-sql queries see getsqlparametermetadata() for a discussion as to why	WITHOUT_CLASSIFICATION	0.7279501093559239	WITHOUT_CLASSIFICATION	0.27204989064407625	DESIGN
the cache of the actual plans	WITHOUT_CLASSIFICATION	0.9996427323650169	WITHOUT_CLASSIFICATION	3.5726763498305673E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9992285899396746	WITHOUT_CLASSIFICATION	7.714100603253817E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9992285899396746	WITHOUT_CLASSIFICATION	7.714100603253817E-4	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999970468326597	WITHOUT_CLASSIFICATION	2.953167340233465E-6	DESIGN
for native-sql queries the param metadata is determined outside any relation to a query plan because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9938439685333822	WITHOUT_CLASSIFICATION	0.006156031466617737	DESIGN
don't care	WITHOUT_CLASSIFICATION	0.9992869773897398	WITHOUT_CLASSIFICATION	7.130226102601934E-4	DESIGN
recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995295023384233	WITHOUT_CLASSIFICATION	4.704976615766313E-4	DESIGN
don't care	WITHOUT_CLASSIFICATION	0.9992869773897398	WITHOUT_CLASSIFICATION	7.130226102601934E-4	DESIGN
note firstrow is zero-based	WITHOUT_CLASSIFICATION	0.9963459746193399	WITHOUT_CLASSIFICATION	0.003654025380660093	DESIGN
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9978496178487558	WITHOUT_CLASSIFICATION	0.0021503821512441723	DESIGN
named parameter	WITHOUT_CLASSIFICATION	0.9992908469035611	WITHOUT_CLASSIFICATION	7.091530964388811E-4	DESIGN
could be either an ordinal or jpa-positional parameter	WITHOUT_CLASSIFICATION	0.9943495982646158	WITHOUT_CLASSIFICATION	0.005650401735384213	DESIGN
a peek ahead showed this as an jpa-positional parameter	WITHOUT_CLASSIFICATION	0.9982766690535115	WITHOUT_CLASSIFICATION	0.0017233309464885697	DESIGN
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9990175721573108	WITHOUT_CLASSIFICATION	9.824278426891632E-4	DESIGN
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9996010814761129	WITHOUT_CLASSIFICATION	3.989185238870271E-4	DESIGN
perform the actual work	WITHOUT_CLASSIFICATION	0.9988972179746722	WITHOUT_CLASSIFICATION	0.001102782025327837	DESIGN
if everything went ok commit the transaction and close the obtained connection handle	WITHOUT_CLASSIFICATION	0.9999995132980439	WITHOUT_CLASSIFICATION	4.867019560049334E-7	DESIGN
at some point the processing went bad so we need to 1) make sure the connection handle gets released 2) try to cleanup the jta context as much as possible	WITHOUT_CLASSIFICATION	0.9952398947289277	WITHOUT_CLASSIFICATION	0.004760105271072249	DESIGN
finally handle the exception	WITHOUT_CLASSIFICATION	0.9995413200391918	WITHOUT_CLASSIFICATION	4.5867996080820554E-4	DESIGN
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9838878446980954	WITHOUT_CLASSIFICATION	0.016112155301904598	DESIGN
saveorupdatecopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9996771682304597	WITHOUT_CLASSIFICATION	3.228317695403837E-4	DESIGN
collectionpersister should not be null but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.871577145889845	WITHOUT_CLASSIFICATION	0.12842285411015494	DESIGN
otherwise a null or brand new collection this will also (inefficiently) handle arrays which have no snapshot so we can't do any better processarrayornewcollection(collection type)	WITHOUT_CLASSIFICATION	0.978697156281472	WITHOUT_CLASSIFICATION	0.02130284371852805	DESIGN
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9961355635214183	WITHOUT_CLASSIFICATION	0.0038644364785817694	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.999857431691879	WITHOUT_CLASSIFICATION	1.425683081209106E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.999857431691879	WITHOUT_CLASSIFICATION	1.425683081209106E-4	DESIGN
force a substitution!	WITHOUT_CLASSIFICATION	0.998824019736649	WITHOUT_CLASSIFICATION	0.0011759802633509342	DESIGN
the user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9978476034642398	WITHOUT_CLASSIFICATION	0.0021523965357601905	DESIGN
the database now holds a lock + the object is flushed from the cache so release the soft lock	WITHOUT_CLASSIFICATION	0.9992642268154319	WITHOUT_CLASSIFICATION	7.357731845681609E-4	DESIGN
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999920793305058	WITHOUT_CLASSIFICATION	7.920669494216485E-6	DESIGN
search for collections by reachability updating their role. we don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9997568690174301	WITHOUT_CLASSIFICATION	2.4313098256991512E-4	DESIGN
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9990319775028458	WITHOUT_CLASSIFICATION	9.680224971542977E-4	DESIGN
note we need to do the wrap here even if its not "dirty" because collections need wrapping but changes to _them_ don't dirty the container. also for versioned data we need to wrap before calling searchfordirtycollections	WITHOUT_CLASSIFICATION	0.9168893985566038	WITHOUT_CLASSIFICATION	0.08311060144339627	DESIGN
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9997713986055596	WITHOUT_CLASSIFICATION	2.2860139444042194E-4	DESIGN
grab its current state	WITHOUT_CLASSIFICATION	0.9999667806643548	WITHOUT_CLASSIFICATION	3.3219335645192285E-5	DESIGN
schedule the update note that we intentionally do _not_ pass in currentpersistentstate!	WITHOUT_CLASSIFICATION	0.9997999160849081	WITHOUT_CLASSIFICATION	2.0008391509188407E-4	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9998581368871268	WITHOUT_CLASSIFICATION	1.4186311287316009E-4	DESIGN
give the interceptor a chance to process property values if the properties were modified by the interceptor we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999979339298287	WITHOUT_CLASSIFICATION	2.0660701713172595E-6	DESIGN
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999926356055553	WITHOUT_CLASSIFICATION	7.3643944446534935E-6	DESIGN
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999043018805058	WITHOUT_CLASSIFICATION	9.569811949416745E-5	DESIGN
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9997302196065974	WITHOUT_CLASSIFICATION	2.6978039340267145E-4	DESIGN
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.99251224233233	WITHOUT_CLASSIFICATION	0.0074877576676699725	DESIGN
give the interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9998426644168384	WITHOUT_CLASSIFICATION	1.573355831615784E-4	DESIGN
now we might need to recalculate the dirtyproperties array	WITHOUT_CLASSIFICATION	0.9979781662310068	WITHOUT_CLASSIFICATION	0.0020218337689931628	DESIGN
use the current version	WITHOUT_CLASSIFICATION	0.9980559601114284	WITHOUT_CLASSIFICATION	0.0019440398885717006	DESIGN
interceptor returned null so do the dirtycheck ourself if possible	WITHOUT_CLASSIFICATION	0.9999646556065674	WITHOUT_CLASSIFICATION	3.534439343253421E-5	DESIGN
object loaded by update()	WITHOUT_CLASSIFICATION	0.9993023961567488	WITHOUT_CLASSIFICATION	6.976038432511989E-4	DESIGN
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9998794791440959	WITHOUT_CLASSIFICATION	1.2052085590400856E-4	DESIGN
dirty check against the database snapshot if possible/necessary	WITHOUT_CLASSIFICATION	0.9999605148986563	WITHOUT_CLASSIFICATION	3.9485101343533804E-5	DESIGN
the interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.761257490836321	WITHOUT_CLASSIFICATION	0.23874250916367906	DESIGN
even process null collections	WITHOUT_CLASSIFICATION	0.9997582688276804	WITHOUT_CLASSIFICATION	2.417311723197417E-4	DESIGN
get the id from the object	WITHOUT_CLASSIFICATION	0.9989120932406588	WITHOUT_CLASSIFICATION	0.001087906759341278	DESIGN
always do an insert and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9997709747250518	WITHOUT_CLASSIFICATION	2.290252749482502E-4	DESIGN
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9932268175875915	WITHOUT_CLASSIFICATION	0.006773182412408563	DESIGN
/ hhh-2378	WITHOUT_CLASSIFICATION	0.9998959188336597	WITHOUT_CLASSIFICATION	1.040811663402681E-4	DESIGN
will result in a sql update	WITHOUT_CLASSIFICATION	0.9998638842568506	WITHOUT_CLASSIFICATION	1.3611574314938992E-4	DESIGN
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9997846297025355	WITHOUT_CLASSIFICATION	2.1537029746447568E-4	DESIGN
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9998327877229661	WITHOUT_CLASSIFICATION	1.6721227703388511E-4	DESIGN
refresh() does not pass an entityname	WITHOUT_CLASSIFICATION	0.9998739928209618	WITHOUT_CLASSIFICATION	1.260071790382909E-4	DESIGN
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9757682214404353	WITHOUT_CLASSIFICATION	0.024231778559564727	DESIGN
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.998181527780464	WITHOUT_CLASSIFICATION	0.0018184722195360673	DESIGN
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.99942770130014	WITHOUT_CLASSIFICATION	5.722986998600419E-4	DESIGN
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.999880364265844	WITHOUT_CLASSIFICATION	1.1963573415601688E-4	DESIGN
this object was already loaded	WITHOUT_CLASSIFICATION	0.9840709305328139	WITHOUT_CLASSIFICATION	0.015929069467186124	DESIGN
entity was found in second-level cache	WITHOUT_CLASSIFICATION	0.9988039431919956	WITHOUT_CLASSIFICATION	0.0011960568080043618	DESIGN
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9998353474929706	WITHOUT_CLASSIFICATION	1.6465250702933732E-4	DESIGN
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999659489823424	WITHOUT_CLASSIFICATION	3.405101765756684E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994463465292293	WITHOUT_CLASSIFICATION	5.536534707707084E-4	DESIGN
some statistics	WITHOUT_CLASSIFICATION	0.9994439224395673	WITHOUT_CLASSIFICATION	5.560775604327438E-4	DESIGN
safe from concurrent modification because of how entrylist() is implemented on identitymap	WITHOUT_CLASSIFICATION	0.9998421248894227	WITHOUT_CLASSIFICATION	1.5787511057718746E-4	DESIGN
initialize dirty flags for arrays + collections with composite elements and reset reached doupdate etc.	WITHOUT_CLASSIFICATION	0.9999585312727903	WITHOUT_CLASSIFICATION	4.1468727209562184E-5	DESIGN
among other things updatereachables() will recursively load all collections that are moving roles. this might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9853122301130246	WITHOUT_CLASSIFICATION	0.01468776988697542	DESIGN
so this needs to be safe from concurrent modification problems. it is safe because of how identitymap implements entryset()	WITHOUT_CLASSIFICATION	0.9875714998294078	WITHOUT_CLASSIFICATION	0.012428500170592115	DESIGN
update the status of the object and if necessary schedule an update	WITHOUT_CLASSIFICATION	0.9996555352811386	WITHOUT_CLASSIFICATION	3.444647188613531E-4	DESIGN
schedule updates to collections	WITHOUT_CLASSIFICATION	0.9997956103747645	WITHOUT_CLASSIFICATION	2.043896252355741E-4	DESIGN
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9972867523230704	WITHOUT_CLASSIFICATION	0.0027132476769296445	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994463465292293	WITHOUT_CLASSIFICATION	5.536534707707084E-4	DESIGN
the database has changed now so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999433359466132	WITHOUT_CLASSIFICATION	5.666405338676829E-5	DESIGN
if the collection is dereferenced remove from the session cache iter.remove() does not work since the entryset is not backed by the set	WITHOUT_CLASSIFICATION	0.9973738056179096	WITHOUT_CLASSIFICATION	0.0026261943820904163	DESIGN
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9998256872567094	WITHOUT_CLASSIFICATION	1.7431274329056978E-4	DESIGN
get a snapshot	WITHOUT_CLASSIFICATION	0.9994384596643128	WITHOUT_CLASSIFICATION	5.615403356871513E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9997100064489802	WITHOUT_CLASSIFICATION	2.899935510197287E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9997100064489802	WITHOUT_CLASSIFICATION	2.899935510197287E-4	DESIGN
key is an entity involved with the operation performed by the listener value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.999999658773983	WITHOUT_CLASSIFICATION	3.412260169136163E-7	DESIGN
early exit!!!	WITHOUT_CLASSIFICATION	0.9997941291573791	WITHOUT_CLASSIFICATION	2.0587084262093224E-4	DESIGN
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9993087077174088	WITHOUT_CLASSIFICATION	6.912922825913074E-4	DESIGN
before any callbacks etc so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999265646749	WITHOUT_CLASSIFICATION	7.343532509991553E-5	DESIGN
ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999735409293788	WITHOUT_CLASSIFICATION	2.6459070621083463E-5	DESIGN
typefactory.deepcopy( currentstate proptypes persister.getpropertyupdateability() deletedstate session )	WITHOUT_CLASSIFICATION	0.9975331872251313	WITHOUT_CLASSIFICATION	0.002466812774868725	DESIGN
cascade-delete to collections before the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999829883898068	WITHOUT_CLASSIFICATION	1.7011610193148454E-5	DESIGN
cascade-delete to many-to-one after the parent was deleted	WITHOUT_CLASSIFICATION	0.9998452422881078	WITHOUT_CLASSIFICATION	1.5475771189228302E-4	DESIGN
if it is an initialized proxy let cascade handle it later on	WITHOUT_CLASSIFICATION	0.993524403720974	WITHOUT_CLASSIFICATION	0.006475596279026059	DESIGN
assign the requested id to the proxy before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999749121118596	WITHOUT_CLASSIFICATION	2.5087888140438806E-5	DESIGN
an uninitialized proxy noop don't even need to return an id since it is never a save()	WITHOUT_CLASSIFICATION	0.9999404818542087	WITHOUT_CLASSIFICATION	5.9518145791367716E-5	DESIGN
initialize properties of the event	WITHOUT_CLASSIFICATION	0.9999514200676354	WITHOUT_CLASSIFICATION	4.8579932364689195E-5	DESIGN
return the id in the event object	WITHOUT_CLASSIFICATION	0.9991821833919023	WITHOUT_CLASSIFICATION	8.178166080977909E-4	DESIGN
transient or deleted	WITHOUT_CLASSIFICATION	0.9998694012287876	WITHOUT_CLASSIFICATION	1.3059877121242901E-4	DESIGN
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9993456964222281	WITHOUT_CLASSIFICATION	6.543035777719378E-4	DESIGN
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.6904040432301356	WITHOUT_CLASSIFICATION	0.30959595676986446	DESIGN
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9873436971312949	WITHOUT_CLASSIFICATION	0.012656302868705189	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9986665196247558	WITHOUT_CLASSIFICATION	0.0013334803752442102	DESIGN
cachedstate	WITHOUT_CLASSIFICATION	0.999620800350095	WITHOUT_CLASSIFICATION	3.79199649905041E-4	DESIGN
assume true since we don't really know and it doesn't matter	WITHOUT_CLASSIFICATION	0.9998066973768593	WITHOUT_CLASSIFICATION	1.9330262314065793E-4	DESIGN
a "detached" collection!	WITHOUT_CLASSIFICATION	0.998103731111129	WITHOUT_CLASSIFICATION	0.0018962688888709694	DESIGN
if the collection belonged to a different entity clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9951226972523541	WITHOUT_CLASSIFICATION	0.004877302747645844	DESIGN
log.debug( "calling onload()" )	WITHOUT_CLASSIFICATION	0.9980080635409448	WITHOUT_CLASSIFICATION	0.0019919364590551686	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9998071043162916	WITHOUT_CLASSIFICATION	1.928956837082912E-4	DESIGN
note performexecutions() clears all collectionxxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.997604686512654	WITHOUT_CLASSIFICATION	0.002395313487345966	DESIGN
if no array holder we found an unwrappered array (this can't occur because we now always call wrap() before getting to here) return (ah==null) ? true searchfordirtycollections(ah type)	WITHOUT_CLASSIFICATION	0.9999447152904976	WITHOUT_CLASSIFICATION	5.5284709502546735E-5	DESIGN
if not wrappered yet its dirty (this can't occur because we now always call wrap() before getting to here) return ( ! (obj instanceof persistentcollection) ) ? true searchfordirtycollections( (persistentcollection) obj type )	WITHOUT_CLASSIFICATION	0.566143846456934	WITHOUT_CLASSIFICATION	0.43385615354306595	DESIGN
we need to check even if it was not initialized because of delayed adds!	WITHOUT_CLASSIFICATION	0.9876509602643714	WITHOUT_CLASSIFICATION	0.012349039735628672	DESIGN
note early exit!	WITHOUT_CLASSIFICATION	0.9991870484509001	WITHOUT_CLASSIFICATION	8.12951549099958E-4	DESIGN
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9996294788486288	WITHOUT_CLASSIFICATION	3.7052115137108197E-4	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9998071043162916	WITHOUT_CLASSIFICATION	1.928956837082912E-4	DESIGN
check the persistence context for an entry relating to this entity to be merged	WITHOUT_CLASSIFICATION	0.9773999142478039	WITHOUT_CLASSIFICATION	0.022600085752196047	DESIGN
we have specialized case of a detached entity from the perspective of the merge operation. specifically we have an incoming entity instance which has a corresponding entry in the current persistence context but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999334275856043	WITHOUT_CLASSIFICATION	6.657241439567606E-5	DESIGN
deleted	WITHOUT_CLASSIFICATION	0.9999197666835903	WITHOUT_CLASSIFICATION	8.023331640971217E-5	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9997591700021519	WITHOUT_CLASSIFICATION	2.4082999784806792E-4	DESIGN
cascade first so that all unsaved objects get their copy created before we actually copy cascadeonmerge(event persister entity copycache cascades.cascade_before_merge)	WITHOUT_CLASSIFICATION	0.9999523375246304	WITHOUT_CLASSIFICATION	4.7662475369494526E-5	DESIGN
this bit is only really absolutely necessary for handling requestedid but is also good if we merge multiple object graphs since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.8637091947997441	WITHOUT_CLASSIFICATION	0.13629080520025597	DESIGN
continue we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9788931407140161	WITHOUT_CLASSIFICATION	0.02110685928598385	DESIGN
cascade first so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999921000796286	WITHOUT_CLASSIFICATION	7.899920371501165E-6	DESIGN
check that entity id = requestedid	WITHOUT_CLASSIFICATION	0.9993608674375966	WITHOUT_CLASSIFICATION	6.3913256240339E-4	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9997591700021519	WITHOUT_CLASSIFICATION	2.4082999784806792E-4	DESIGN
we got here because we assumed that an instance with an assigned id was detached when it was really persistent	WITHOUT_CLASSIFICATION	0.9999619767844008	WITHOUT_CLASSIFICATION	3.802321559923476E-5	DESIGN
cascade first so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999921000796286	WITHOUT_CLASSIFICATION	7.899920371501165E-6	DESIGN
copyvalues works by reflection so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9995352686983986	WITHOUT_CLASSIFICATION	4.6473130160131913E-4	DESIGN
early exit	WITHOUT_CLASSIFICATION	0.9999502189645638	WITHOUT_CLASSIFICATION	4.978103543631844E-5	DESIGN
source.getbatcher().executebatch() found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9995339841637388	WITHOUT_CLASSIFICATION	4.6601583626123123E-4	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9998581368871268	WITHOUT_CLASSIFICATION	1.4186311287316009E-4	DESIGN
now done in entityidentityinsertaction persister.setidentifier( entity id source.getentitymode() )	WITHOUT_CLASSIFICATION	0.9933146169056374	WITHOUT_CLASSIFICATION	0.006685383094362677	DESIGN
source.getpersistencecontext().removenonexist( new entitykey( id persister source.getentitymode() ) )	WITHOUT_CLASSIFICATION	0.9941211065408779	WITHOUT_CLASSIFICATION	0.005878893459122089	DESIGN
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9970172231677861	WITHOUT_CLASSIFICATION	0.0029827768322139717	DESIGN
cascade-save to many-to-one before the parent is saved	WITHOUT_CLASSIFICATION	0.996295932706841	WITHOUT_CLASSIFICATION	0.0037040672931589642	DESIGN
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999983561361397	WITHOUT_CLASSIFICATION	1.6438638602571357E-6	DESIGN
the object is persistent	WITHOUT_CLASSIFICATION	0.9996234536871096	WITHOUT_CLASSIFICATION	3.765463128904533E-4	DESIGN
the entity is associated with the session so check its status	WITHOUT_CLASSIFICATION	0.999489788200036	WITHOUT_CLASSIFICATION	5.102117999639466E-4	DESIGN
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999000367293911	WITHOUT_CLASSIFICATION	9.996327060880397E-5	DESIGN
ie. e.status==deleted	WITHOUT_CLASSIFICATION	0.9991285900065839	WITHOUT_CLASSIFICATION	8.714099934160564E-4	DESIGN
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9997785645733356	WITHOUT_CLASSIFICATION	2.2143542666453115E-4	DESIGN
note early exit!	WITHOUT_CLASSIFICATION	0.9991870484509001	WITHOUT_CLASSIFICATION	8.12951549099958E-4	DESIGN
private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9979806471935689	WITHOUT_CLASSIFICATION	0.002019352806431131	DESIGN
first try to find a matching constructor accepting a violatedconstraintnameextracter param	WITHOUT_CLASSIFICATION	0.9996951709423104	WITHOUT_CLASSIFICATION	3.04829057689497E-4	DESIGN
eat it and try next	WITHOUT_CLASSIFICATION	0.9948135905209143	WITHOUT_CLASSIFICATION	0.0051864094790855745	DESIGN
otherwise try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9989539770722753	WITHOUT_CLASSIFICATION	0.0010460229277247104	DESIGN
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9998407568442002	WITHOUT_CLASSIFICATION	1.5924315579986332E-4	DESIGN
collectionpropertymapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9965096131043619	WITHOUT_CLASSIFICATION	0.0034903868956380722	DESIGN
remove initial " "	WITHOUT_CLASSIFICATION	0.9989739855861121	WITHOUT_CLASSIFICATION	0.001026014413887975	DESIGN
remove initial " and "	WITHOUT_CLASSIFICATION	0.9975846282533157	WITHOUT_CLASSIFICATION	0.0024153717466842356	DESIGN
beforeclasstokens.add("new") definitely don't have this!!	WITHOUT_CLASSIFICATION	0.9995992369831644	WITHOUT_CLASSIFICATION	4.007630168355873E-4	DESIGN
notafterclasstokens.add("")	WITHOUT_CLASSIFICATION	0.9991285900065839	WITHOUT_CLASSIFICATION	8.714099934160564E-4	DESIGN
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9996205018515968	WITHOUT_CLASSIFICATION	3.7949814840323233E-4	DESIGN
update last non-whitespace token if necessary	WITHOUT_CLASSIFICATION	0.9999487348544203	WITHOUT_CLASSIFICATION	5.126514557986224E-5	DESIGN
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9991196774917477	WITHOUT_CLASSIFICATION	8.803225082522769E-4	DESIGN
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9998646519277585	WITHOUT_CLASSIFICATION	1.353480722415024E-4	DESIGN
note this!!	WITHOUT_CLASSIFICATION	0.998418414412409	WITHOUT_CLASSIFICATION	0.0015815855875910235	DESIGN
error message constants.	WITHOUT_CLASSIFICATION	0.9987328177166934	WITHOUT_CLASSIFICATION	0.0012671822833065223	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994552789396598	WITHOUT_CLASSIFICATION	5.447210603402882E-4	DESIGN
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998999106939769	WITHOUT_CLASSIFICATION	0.0010008930602308916	DESIGN
handle collection-fiter compilation. important note this is modifying the input (hql) tree not the output tree!	WITHOUT_CLASSIFICATION	0.7623231891016874	WITHOUT_CLASSIFICATION	0.23767681089831252	DESIGN
show the modified ast.	WITHOUT_CLASSIFICATION	0.9999373193920661	WITHOUT_CLASSIFICATION	6.268060793387581E-5	DESIGN
create a parameter specification for the collection filter	WITHOUT_CLASSIFICATION	0.9997235920897602	WITHOUT_CLASSIFICATION	2.7640791023975005E-4	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9994796568484607	WITHOUT_CLASSIFICATION	5.203431515392253E-4	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9994796568484607	WITHOUT_CLASSIFICATION	5.203431515392253E-4	DESIGN
get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9996249924977084	WITHOUT_CLASSIFICATION	3.750075022915321E-4	DESIGN
the path ast should be a dotnode and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9986606658871904	WITHOUT_CLASSIFICATION	0.001339334112809613	DESIGN
tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999817648558792	WITHOUT_CLASSIFICATION	1.8235144120811094E-5	DESIGN
re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999937471919595	WITHOUT_CLASSIFICATION	6.252808040500623E-6	DESIGN
don't forget to resolve the argument! resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9997519159450974	WITHOUT_CLASSIFICATION	2.4808405490258327E-4	DESIGN
resolve everything up to this dot but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9971533533163875	WITHOUT_CLASSIFICATION	0.002846646683612468	DESIGN
should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9953535549177259	WITHOUT_CLASSIFICATION	0.004646445082274097	DESIGN
was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999766978439177	WITHOUT_CLASSIFICATION	2.330215608223247E-5	DESIGN
attach any mapping-defined "order by" fragments	WITHOUT_CLASSIFICATION	0.9995137012749711	WITHOUT_CLASSIFICATION	4.8629872502887724E-4	DESIGN
use the explicitly declared select expression determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999431589654257	WITHOUT_CLASSIFICATION	5.684103457427833E-5	DESIGN
after that process the joins. invoke a delegate to do the work as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999809252925527	WITHOUT_CLASSIFICATION	1.9074707447304372E-5	DESIGN
make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999957045224988	WITHOUT_CLASSIFICATION	4.295477501253698E-6	DESIGN
we need to generate ids as part of this bulk insert. note that this is only supported for sequence-style generators and post-insert-style generators basically only in-db generators	WITHOUT_CLASSIFICATION	0.8175007895385418	WITHOUT_CLASSIFICATION	0.1824992104614582	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9994796568484607	WITHOUT_CLASSIFICATION	5.203431515392253E-4	DESIGN
we need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9980446646201012	WITHOUT_CLASSIFICATION	0.001955335379898887	DESIGN
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9970858740258975	WITHOUT_CLASSIFICATION	0.002914125974102428	DESIGN
this is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9836311491214548	WITHOUT_CLASSIFICATION	0.016368850878545223	DESIGN
generate implicit joins only if necessary.	WITHOUT_CLASSIFICATION	0.9971984475880724	WITHOUT_CLASSIFICATION	0.0028015524119275707	DESIGN
notify the from element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999505492789917	WITHOUT_CLASSIFICATION	4.945072100822182E-5	DESIGN
turn off includesubclasses on all fromelements.	WITHOUT_CLASSIFICATION	0.9983072681008138	WITHOUT_CLASSIFICATION	0.0016927318991861462	DESIGN
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9998681349741504	WITHOUT_CLASSIFICATION	1.3186502584961477E-4	DESIGN
use the delegate resolve identifiers as from element aliases.	WITHOUT_CLASSIFICATION	0.9992983742478542	WITHOUT_CLASSIFICATION	7.01625752145753E-4	DESIGN
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9996001599341916	WITHOUT_CLASSIFICATION	3.9984006580840755E-4	DESIGN
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9977112356824321	WITHOUT_CLASSIFICATION	0.0022887643175679624	DESIGN
make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.999237266048956	WITHOUT_CLASSIFICATION	7.627339510440396E-4	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994552789396598	WITHOUT_CLASSIFICATION	5.447210603402882E-4	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9994796568484607	WITHOUT_CLASSIFICATION	5.203431515392253E-4	DESIGN
--commented out by inspection (12/11/04 1056 am) int getwarningcount()	WITHOUT_CLASSIFICATION	0.9998390475489433	WITHOUT_CLASSIFICATION	1.6095245105675926E-4	DESIGN
alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9998241653769379	WITHOUT_CLASSIFICATION	1.7583462306216437E-4	DESIGN
switch	WITHOUT_CLASSIFICATION	0.9998557219116098	WITHOUT_CLASSIFICATION	1.4427808839029602E-4	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.999041403768988	WITHOUT_CLASSIFICATION	9.585962310119758E-4	DESIGN
just do the regular thing if you can't find the ctor your ast must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9996375976556606	WITHOUT_CLASSIFICATION	3.62402344339414E-4	DESIGN
initialize sql nodes here.	WITHOUT_CLASSIFICATION	0.9995949356214502	WITHOUT_CLASSIFICATION	4.0506437854982816E-4	DESIGN
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996102376550347	WITHOUT_CLASSIFICATION	3.897623449653068E-4	DESIGN
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999896820795496	WITHOUT_CLASSIFICATION	1.0317920450360838E-5	DESIGN
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999836695223905	WITHOUT_CLASSIFICATION	1.633047760955794E-5	DESIGN
--- inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9992584847424794	WITHOUT_CLASSIFICATION	7.415152575206481E-4	DESIGN
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9994872588187234	WITHOUT_CLASSIFICATION	5.127411812765879E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9998959188336597	WITHOUT_CLASSIFICATION	1.040811663402681E-4	DESIGN
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9986436608291064	WITHOUT_CLASSIFICATION	0.0013563391708937011	DESIGN
again both should be fromelements	WITHOUT_CLASSIFICATION	0.9973275407504777	WITHOUT_CLASSIFICATION	0.002672459249522341	DESIGN
note firstrow is zero-based	WITHOUT_CLASSIFICATION	0.9963459746193399	WITHOUT_CLASSIFICATION	0.003654025380660093	DESIGN
right represents a joins originating from left or both right and left reprersent joins originating from the same fromelement	WITHOUT_CLASSIFICATION	0.9999604738590098	WITHOUT_CLASSIFICATION	3.952614099033602E-5	DESIGN
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9987479552507386	WITHOUT_CLASSIFICATION	0.0012520447492614327	DESIGN
right represents a joins originating from left	WITHOUT_CLASSIFICATION	0.9999220927779424	WITHOUT_CLASSIFICATION	7.790722205761235E-5	DESIGN
all clear	WITHOUT_CLASSIFICATION	0.999888231276347	WITHOUT_CLASSIFICATION	1.1176872365303054E-4	DESIGN
ignore the token class name parameter and use a specific token class.	WITHOUT_CLASSIFICATION	0.9996208402524762	WITHOUT_CLASSIFICATION	3.791597475238269E-4	DESIGN
overriden to avoid system.exit	WITHOUT_CLASSIFICATION	0.9991014892003675	WITHOUT_CLASSIFICATION	8.985107996324552E-4	DESIGN
overriden to avoid system.exit	WITHOUT_CLASSIFICATION	0.9991014892003675	WITHOUT_CLASSIFICATION	8.985107996324552E-4	DESIGN
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9964734738579474	WITHOUT_CLASSIFICATION	0.0035265261420525836	DESIGN
don't care about other param types here just those explicitly user-defined	WITHOUT_CLASSIFICATION	0.9969869241843974	WITHOUT_CLASSIFICATION	0.003013075815602558	DESIGN
if the query is already compiled skip the compilation.	WITHOUT_CLASSIFICATION	0.999953362950681	WITHOUT_CLASSIFICATION	4.663704931894043E-5	DESIGN
remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.999489096082096	WITHOUT_CLASSIFICATION	5.109039179040696E-4	DESIGN
phase 1 parse the hql into an ast.	WITHOUT_CLASSIFICATION	0.9998599398628147	WITHOUT_CLASSIFICATION	1.4006013718531377E-4	DESIGN
phase 2 analyze the hql ast and produce an sql ast.	WITHOUT_CLASSIFICATION	0.9999994242674247	WITHOUT_CLASSIFICATION	5.757325752432239E-7	DESIGN
phase 3 generate the sql.	WITHOUT_CLASSIFICATION	0.9993274717536202	WITHOUT_CLASSIFICATION	6.725282463797695E-4	DESIGN
we do not actually propogate antlrexceptions as a cause so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9998593402089498	WITHOUT_CLASSIFICATION	1.406597910501272E-4	DESIGN
we do not actually propogate antlrexceptions as a cause so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9998593402089498	WITHOUT_CLASSIFICATION	1.406597910501272E-4	DESIGN
only needed during compilation phase	WITHOUT_CLASSIFICATION	0.9999654943549419	WITHOUT_CLASSIFICATION	3.4505645058203774E-5	DESIGN
transform the tree.	WITHOUT_CLASSIFICATION	0.9998182788755581	WITHOUT_CLASSIFICATION	1.8172112444192113E-4	DESIGN
parse the query string into an hql ast.	WITHOUT_CLASSIFICATION	0.9999204279750041	WITHOUT_CLASSIFICATION	7.957202499581576E-5	DESIGN
delegate to the queryloader	WITHOUT_CLASSIFICATION	0.9998330889236906	WITHOUT_CLASSIFICATION	1.669110763093746E-4	DESIGN
delegate to the queryloader	WITHOUT_CLASSIFICATION	0.9998330889236906	WITHOUT_CLASSIFICATION	1.669110763093746E-4	DESIGN
delegate to the queryloader	WITHOUT_CLASSIFICATION	0.9998330889236906	WITHOUT_CLASSIFICATION	1.669110763093746E-4	DESIGN
note ( max - 1 ) because first is zero-based while max is not	WITHOUT_CLASSIFICATION	0.9882663825874681	WITHOUT_CLASSIFICATION	0.011733617412531799	DESIGN
-- package local methods for the queryloader delegate --	WITHOUT_CLASSIFICATION	0.998595926804828	WITHOUT_CLASSIFICATION	0.0014040731951719331	DESIGN
if there are no collection fetches then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999801490141019	WITHOUT_CLASSIFICATION	1.985098589810171E-5	DESIGN
a shallow query is ok (although technically there should be no fetching here)	WITHOUT_CLASSIFICATION	0.9998757350663	WITHOUT_CLASSIFICATION	1.2426493370006796E-4	DESIGN
should be the first but just to be safe	WITHOUT_CLASSIFICATION	0.9997322821276449	WITHOUT_CLASSIFICATION	2.6771787235517827E-4	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9994796568484607	WITHOUT_CLASSIFICATION	5.203431515392253E-4	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9994796568484607	WITHOUT_CLASSIFICATION	5.203431515392253E-4	DESIGN
impl note allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9988635445877367	WITHOUT_CLASSIFICATION	0.0011364554122632248	DESIGN
otherwise we have a non-scalar select with defined collection fetch(es). make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9986568867468333	WITHOUT_CLASSIFICATION	0.0013431132531667007	DESIGN
this is not strictly true. we actually just need to make sure that it is ordered by root-entity pk and that that order-by comes before any non-root-entity ordering	WITHOUT_CLASSIFICATION	0.585467953805174	WITHOUT_CLASSIFICATION	0.41453204619482603	DESIGN
paramtranslations = new parametertranslationsimpl( collectedparameterspecifications )	WITHOUT_CLASSIFICATION	0.9996692361952406	WITHOUT_CLASSIFICATION	3.3076380475939685E-4	DESIGN
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.994028392470356	WITHOUT_CLASSIFICATION	0.005971607529644026	DESIGN
igndore it	WITHOUT_CLASSIFICATION	0.9997308908868525	WITHOUT_CLASSIFICATION	2.691091131474477E-4	DESIGN
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9903653638343325	WITHOUT_CLASSIFICATION	0.00963463616566755	DESIGN
[jsd] the fix for hhh-558	WITHOUT_CLASSIFICATION	0.9617286674393916	WITHOUT_CLASSIFICATION	0.03827133256060834	DESIGN
if the token can tell us if it could be an identifier	WITHOUT_CLASSIFICATION	0.9955866910120319	WITHOUT_CLASSIFICATION	0.004413308987968015	DESIGN
and the expected token type was an identifier then	WITHOUT_CLASSIFICATION	0.9999872261595493	WITHOUT_CLASSIFICATION	1.2773840450857913E-5	DESIGN
use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999877987644639	WITHOUT_CLASSIFICATION	1.2201235536106348E-5	DESIGN
add the token to the ast.	WITHOUT_CLASSIFICATION	0.9999096466778579	WITHOUT_CLASSIFICATION	9.035332214206691E-5	DESIGN
(not (eq a b) ) => (ne a b)	WITHOUT_CLASSIFICATION	0.8568066616637647	WITHOUT_CLASSIFICATION	0.1431933383362352	DESIGN
(not (ne a b) ) => (eq a b)	WITHOUT_CLASSIFICATION	0.8568066616637647	WITHOUT_CLASSIFICATION	0.1431933383362352	DESIGN
(not (lt a b) ) => (ge a b)	WITHOUT_CLASSIFICATION	0.8568066616637647	WITHOUT_CLASSIFICATION	0.1431933383362352	DESIGN
(not (ge a b) ) => (lt a b)	WITHOUT_CLASSIFICATION	0.8568066616637647	WITHOUT_CLASSIFICATION	0.1431933383362352	DESIGN
(not (le a b) ) => (gt a b)	WITHOUT_CLASSIFICATION	0.8568066616637647	WITHOUT_CLASSIFICATION	0.1431933383362352	DESIGN
(not (like a b) ) => (not_like a b)	WITHOUT_CLASSIFICATION	0.9176764765021685	WITHOUT_CLASSIFICATION	0.08232352349783151	DESIGN
(not (not_like a b) ) => (like a b)	WITHOUT_CLASSIFICATION	0.9176764765021685	WITHOUT_CLASSIFICATION	0.08232352349783151	DESIGN
(not (is_not_null a b) ) => (is_null a b)	WITHOUT_CLASSIFICATION	0.9220814551245498	WITHOUT_CLASSIFICATION	0.07791854487545025	DESIGN
(not (between a b) ) => (not_between a b)	WITHOUT_CLASSIFICATION	0.9220814551245498	WITHOUT_CLASSIFICATION	0.07791854487545025	DESIGN
initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9982471507940122	WITHOUT_CLASSIFICATION	0.0017528492059877847	DESIGN
overriden to avoid system.exit	WITHOUT_CLASSIFICATION	0.9991014892003675	WITHOUT_CLASSIFICATION	8.985107996324552E-4	DESIGN
if if otherwise handle the error normally.	WITHOUT_CLASSIFICATION	0.9991386074503239	WITHOUT_CLASSIFICATION	8.613925496761112E-4	DESIGN
(not (not_between a b) ) => (between a b)	WITHOUT_CLASSIFICATION	0.9220814551245498	WITHOUT_CLASSIFICATION	0.07791854487545025	DESIGN
this can never happen because this rule will always eliminate the child not.case notreturn x.getfirstchild() (not (not x) ) => (x)	WITHOUT_CLASSIFICATION	0.998917047700353	WITHOUT_CLASSIFICATION	0.0010829522996470308	DESIGN
just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9942565888449308	WITHOUT_CLASSIFICATION	0.005743411155069116	DESIGN
(eq null b) => (is_null b)	WITHOUT_CLASSIFICATION	0.9998808737701816	WITHOUT_CLASSIFICATION	1.1912622981833726E-4	DESIGN
(eq a null) => (is_null a)	WITHOUT_CLASSIFICATION	0.9998115505983435	WITHOUT_CLASSIFICATION	1.8844940165643612E-4	DESIGN
note because we're using astutil.createparent() the tree must be created from the bottom up. is empty x => (exists (query (select_from (from x) ) ) )	WITHOUT_CLASSIFICATION	0.9751764325122527	WITHOUT_CLASSIFICATION	0.024823567487747288	DESIGN
add not if it's negated.	WITHOUT_CLASSIFICATION	0.9990874571910485	WITHOUT_CLASSIFICATION	9.125428089514111E-4	DESIGN
create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999970581395574	WITHOUT_CLASSIFICATION	2.9418604424644214E-6	DESIGN
case 1 multi token keywords group by and order by the next token ( lt(2) ) should be 'by' otherwise this is just an ident.	WITHOUT_CLASSIFICATION	0.7677957919516522	WITHOUT_CLASSIFICATION	0.23220420804834788	DESIGN
case 2 the current token is after from and before '.'.	WITHOUT_CLASSIFICATION	0.99999586910446	WITHOUT_CLASSIFICATION	4.130895539989124E-6	DESIGN
this handles hhh-354 where there is a strange property name in a where clause. if the lookahead contains a dot then something that isn't an ident	WITHOUT_CLASSIFICATION	0.9982967857310598	WITHOUT_CLASSIFICATION	0.0017032142689402513	DESIGN
see if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999938943158295	WITHOUT_CLASSIFICATION	6.105684170474783E-6	DESIGN
set it!	WITHOUT_CLASSIFICATION	0.9998729430818339	WITHOUT_CLASSIFICATION	1.2705691816597355E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.99997213410695	WITHOUT_CLASSIFICATION	2.786589305004127E-5	DESIGN
strip the " where "	WITHOUT_CLASSIFICATION	0.9999623727539244	WITHOUT_CLASSIFICATION	3.762724607563602E-5	DESIGN
don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9961714147088869	WITHOUT_CLASSIFICATION	0.003828585291113147	DESIGN
at the very least cleanup the data )	WITHOUT_CLASSIFICATION	0.6347634574179558	WITHOUT_CLASSIFICATION	0.3652365425820442	DESIGN
first save off the pertinent ids as the return value	WITHOUT_CLASSIFICATION	0.9999962274325676	WITHOUT_CLASSIFICATION	3.7725674324751577E-6	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999874930252075	WITHOUT_CLASSIFICATION	1.2506974792509152E-4	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999874930252075	WITHOUT_CLASSIFICATION	1.2506974792509152E-4	DESIGN
start performing the updates	WITHOUT_CLASSIFICATION	0.9998436841608151	WITHOUT_CLASSIFICATION	1.5631583918488567E-4	DESIGN
first save off the pertinent ids saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9998683558294921	WITHOUT_CLASSIFICATION	1.3164417050786118E-4	DESIGN
start performing the deletes	WITHOUT_CLASSIFICATION	0.9997633551687366	WITHOUT_CLASSIFICATION	2.366448312635372E-4	DESIGN
otherwise everything ok.	WITHOUT_CLASSIFICATION	0.9983063312407265	WITHOUT_CLASSIFICATION	0.0016936687592733813	DESIGN
visit width-first then depth	WITHOUT_CLASSIFICATION	0.9992134001587235	WITHOUT_CLASSIFICATION	7.865998412764071E-4	DESIGN
if the types report logical equivalence return true	WITHOUT_CLASSIFICATION	0.9758859653109814	WITHOUT_CLASSIFICATION	0.02411403468901855	DESIGN
otherwise perform a "deep equivalence" check	WITHOUT_CLASSIFICATION	0.9931039103397672	WITHOUT_CLASSIFICATION	0.006896089660232771	DESIGN
if there is no where node make one.	WITHOUT_CLASSIFICATION	0.9999958966794111	WITHOUT_CLASSIFICATION	4.103320588892186E-6	DESIGN
inject the where after the parent	WITHOUT_CLASSIFICATION	0.999781522752323	WITHOUT_CLASSIFICATION	2.184772476768581E-4	DESIGN
never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999852358350096	WITHOUT_CLASSIFICATION	1.47641649904692E-5	DESIGN
moved here from selectclause [jsd]	WITHOUT_CLASSIFICATION	0.9849261958256281	WITHOUT_CLASSIFICATION	0.015073804174371958	DESIGN
/	WITHOUT_CLASSIFICATION	0.9998959188336597	WITHOUT_CLASSIFICATION	1.040811663402681E-4	DESIGN
use the table fromelement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9995603570898355	WITHOUT_CLASSIFICATION	4.396429101645441E-4	DESIGN
set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9995715533661644	WITHOUT_CLASSIFICATION	4.284466338356359E-4	DESIGN
if the uresolved property path isn't set yet just use the property name.	WITHOUT_CLASSIFICATION	0.9996558411880619	WITHOUT_CLASSIFICATION	3.4415881193812357E-4	DESIGN
the 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9997016650037723	WITHOUT_CLASSIFICATION	2.9833499622773044E-4	DESIGN
prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999995306894923	WITHOUT_CLASSIFICATION	4.693105076392998E-7	DESIGN
prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999995306894923	WITHOUT_CLASSIFICATION	4.693105076392998E-7	DESIGN
if this dot has already been resolved stop now.	WITHOUT_CLASSIFICATION	0.9989822994944306	WITHOUT_CLASSIFICATION	0.0010177005055694666	DESIGN
if there is no data type for this node and we're at the end of the path (top most dot node) then this might be a java constant.	WITHOUT_CLASSIFICATION	0.9988483198626785	WITHOUT_CLASSIFICATION	0.0011516801373214292	DESIGN
the property is a collection	WITHOUT_CLASSIFICATION	0.9962348087056657	WITHOUT_CLASSIFICATION	0.003765191294334335	DESIGN
the property is a component	WITHOUT_CLASSIFICATION	0.9992980883138834	WITHOUT_CLASSIFICATION	7.01911686116533E-4	DESIGN
the property is another class..	WITHOUT_CLASSIFICATION	0.9983072166217114	WITHOUT_CLASSIFICATION	0.0016927833782885715	DESIGN
otherwise this is a primitive type.	WITHOUT_CLASSIFICATION	0.9768618792329802	WITHOUT_CLASSIFICATION	0.023138120767019772	DESIGN
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9970119363506641	WITHOUT_CLASSIFICATION	0.0029880636493359665	DESIGN
this 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9988962910421618	WITHOUT_CLASSIFICATION	0.001103708957838214	DESIGN
always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998779966643372	WITHOUT_CLASSIFICATION	1.2200333566274942E-4	DESIGN
in non-select queries the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999520628846224	WITHOUT_CLASSIFICATION	4.793711537750858E-5	DESIGN
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999876762194054	WITHOUT_CLASSIFICATION	1.2323780594458245E-5	DESIGN
this 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9988962910421618	WITHOUT_CLASSIFICATION	0.001103708957838214	DESIGN
even though we might find a pre-existing element by join path we may not be able to reuse it	WITHOUT_CLASSIFICATION	0.9998818287530978	WITHOUT_CLASSIFICATION	1.1817124690216549E-4	DESIGN
note addduplicatealias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9976942565141834	WITHOUT_CLASSIFICATION	0.0023057434858165973	DESIGN
if the from-clauses are the same we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.6162496856562643	WITHOUT_CLASSIFICATION	0.3837503143437358	DESIGN
again null != null here	WITHOUT_CLASSIFICATION	0.9999263497169435	WITHOUT_CLASSIFICATION	7.3650283056488E-5	DESIGN
if this is an implied join in a from element then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9997315113306792	WITHOUT_CLASSIFICATION	2.6848866932079545E-4	DESIGN
otherwise (subquery case) dont reuse the fromelement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9994970924976833	WITHOUT_CLASSIFICATION	5.029075023167364E-4	DESIGN
we know only the lhs-hand type so use that	WITHOUT_CLASSIFICATION	0.9990851942764166	WITHOUT_CLASSIFICATION	9.148057235832908E-4	DESIGN
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999983622437157	WITHOUT_CLASSIFICATION	1.637756284270344E-6	DESIGN
only the identifier property field name can be a reference to the associated entity's pk	WITHOUT_CLASSIFICATION	0.9978319195172561	WITHOUT_CLASSIFICATION	0.0021680804827438247	DESIGN
special shortcut for id properties skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999537903854391	WITHOUT_CLASSIFICATION	4.6209614561041845E-5	DESIGN
append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.999392678476337	WITHOUT_CLASSIFICATION	6.073215236630961E-4	DESIGN
if the lhs is a collection use collectionpropertymapping	WITHOUT_CLASSIFICATION	0.9996582668857529	WITHOUT_CLASSIFICATION	3.417331142471097E-4	DESIGN
tell the destination fromelement to 'includesubclasses'.	WITHOUT_CLASSIFICATION	0.999708345896203	WITHOUT_CLASSIFICATION	2.9165410379689E-4	DESIGN
use theta style (for regression) move the node up after the origin node.	WITHOUT_CLASSIFICATION	0.998834008443302	WITHOUT_CLASSIFICATION	0.001165991556698017	DESIGN
don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9968598379741276	WITHOUT_CLASSIFICATION	0.0031401620258724137	DESIGN
for expected parameter type injection we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9998586209529894	WITHOUT_CLASSIFICATION	1.4137904701064943E-4	DESIGN
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9998361533323643	WITHOUT_CLASSIFICATION	1.6384666763576003E-4	DESIGN
we have something like "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9965521203039275	WITHOUT_CLASSIFICATION	0.0034478796960724606	DESIGN
we have something like "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9965521203039275	WITHOUT_CLASSIFICATION	0.0034478796960724606	DESIGN
we know only the rhs-hand type so use that	WITHOUT_CLASSIFICATION	0.9990851942764166	WITHOUT_CLASSIFICATION	9.148057235832908E-4	DESIGN
handle the (assumed) valid cases #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9935502202103983	WITHOUT_CLASSIFICATION	0.006449779789601625	DESIGN
one or the other needs to be a datetime for us to get into this method in the first place	WITHOUT_CLASSIFICATION	0.9622531970929273	WITHOUT_CLASSIFICATION	0.03774680290707259	DESIGN
#3 - note that this is also true of "datetime - param"	WITHOUT_CLASSIFICATION	0.9811194454973444	WITHOUT_CLASSIFICATION	0.018880554502655536	DESIGN
#2	WITHOUT_CLASSIFICATION	0.9997738576785319	WITHOUT_CLASSIFICATION	2.2614232146817118E-4	DESIGN
generate the inner join -- the elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9998478183290886	WITHOUT_CLASSIFICATION	1.5218167091135394E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9997147955332444	WITHOUT_CLASSIFICATION	2.8520446675565924E-4	DESIGN
the 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999907266393653	WITHOUT_CLASSIFICATION	9.273360634768373E-6	DESIGN
add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999962504585421	WITHOUT_CLASSIFICATION	3.7495414579007333E-6	DESIGN
sometimes use the element table alias sometimes use the umm collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9998725446235763	WITHOUT_CLASSIFICATION	1.2745537642379663E-4	DESIGN
now set the text for this node. it should be the element columns.	WITHOUT_CLASSIFICATION	0.962658927448387	WITHOUT_CLASSIFICATION	0.03734107255161291	DESIGN
get the function return value type based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999966603706139	WITHOUT_CLASSIFICATION	3.3396293861317334E-6	DESIGN
this will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9985636548493249	WITHOUT_CLASSIFICATION	0.0014363451506751483	DESIGN
mutation depends on the types of nodes invloved	WITHOUT_CLASSIFICATION	0.9993037506547653	WITHOUT_CLASSIFICATION	6.962493452347816E-4	DESIGN
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding	WITHOUT_CLASSIFICATION	0.9835867225603675	WITHOUT_CLASSIFICATION	0.016413277439632435	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9995297322681413	WITHOUT_CLASSIFICATION	4.7026773185869573E-4	DESIGN
generated select expressions are already resolved nothing to do.	WITHOUT_CLASSIFICATION	0.9936630795258815	WITHOUT_CLASSIFICATION	0.006336920474118442	DESIGN
the path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9996236113184401	WITHOUT_CLASSIFICATION	3.763886815599101E-4	DESIGN
the hql class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999604954936342	WITHOUT_CLASSIFICATION	3.950450636567663E-5	DESIGN
associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9998837526186637	WITHOUT_CLASSIFICATION	1.162473813362035E-4	DESIGN
try the parent fromclause	WITHOUT_CLASSIFICATION	0.99899744866488	WITHOUT_CLASSIFICATION	0.0010025513351199782	DESIGN
add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999708074274319	WITHOUT_CLASSIFICATION	2.9192572568108436E-5	DESIGN
make sure that all from elements registered with this from clause are actually in the ast.	WITHOUT_CLASSIFICATION	0.999805161220149	WITHOUT_CLASSIFICATION	1.9483877985101942E-4	DESIGN
invoke setscalarcolumntext on each constructor argument.	WITHOUT_CLASSIFICATION	0.999907727774716	WITHOUT_CLASSIFICATION	9.227222528400319E-5	DESIGN
collect the select expressions skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999955545438101	WITHOUT_CLASSIFICATION	4.4454561898983354E-6	DESIGN
return an empty type array	WITHOUT_CLASSIFICATION	0.9973248900542807	WITHOUT_CLASSIFICATION	0.0026751099457193216	DESIGN
constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9990230374992478	WITHOUT_CLASSIFICATION	9.76962500752191E-4	DESIGN
this is the exception returned by reflecthelper.getconstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9996223205831004	WITHOUT_CLASSIFICATION	3.776794168997051E-4	DESIGN
if there is no order by make one	WITHOUT_CLASSIFICATION	0.9999791943782956	WITHOUT_CLASSIFICATION	2.0805621704456005E-5	DESIGN
find the where if there is no where find the from	WITHOUT_CLASSIFICATION	0.9999857178921017	WITHOUT_CLASSIFICATION	1.4282107898333004E-5	DESIGN
now inject the newly built order by into the tree	WITHOUT_CLASSIFICATION	0.9998848759826539	WITHOUT_CLASSIFICATION	1.1512401734622957E-4	DESIGN
parametercontainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998725904398542	WITHOUT_CLASSIFICATION	1.274095601458992E-4	DESIGN
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9996517493263075	WITHOUT_CLASSIFICATION	3.48250673692487E-4	DESIGN
render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9979137345030439	WITHOUT_CLASSIFICATION	0.0020862654969560916	DESIGN
class names in the from clause result in a joinsequence (the old fromparser does this).	WITHOUT_CLASSIFICATION	0.999968302306931	WITHOUT_CLASSIFICATION	3.169769306898738E-5	DESIGN
for many-to-many joins use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9996286142733367	WITHOUT_CLASSIFICATION	3.713857266632917E-4	DESIGN
otherwise use the property mapping.	WITHOUT_CLASSIFICATION	0.997622480236855	WITHOUT_CLASSIFICATION	0.002377519763144961	DESIGN
should be safe to only ever expect entitypersister references here	WITHOUT_CLASSIFICATION	0.9996970152263797	WITHOUT_CLASSIFICATION	3.029847736203037E-4	DESIGN
if the property is a special collection property name return a collectionpropertymapping.	WITHOUT_CLASSIFICATION	0.9994098739626593	WITHOUT_CLASSIFICATION	5.90126037340688E-4	DESIGN
collection of components.	WITHOUT_CLASSIFICATION	0.9994667157622876	WITHOUT_CLASSIFICATION	5.332842377124565E-4	DESIGN
make sure the lhs is "assignable"	WITHOUT_CLASSIFICATION	0.9999221122272234	WITHOUT_CLASSIFICATION	7.788777277665348E-5	DESIGN
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9963648810531291	WITHOUT_CLASSIFICATION	0.003635118946870849	DESIGN
register the fromelement with the from clause now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999270147102041	WITHOUT_CLASSIFICATION	7.298528979599729E-5	DESIGN
currently allowed	WITHOUT_CLASSIFICATION	0.9998037141758057	WITHOUT_CLASSIFICATION	1.9628582419433483E-4	DESIGN
hhh-276 implied joins in a subselect where clause - the destination needs to be added to the destination's from clause. not sure if this is will fix everything but it works.	WITHOUT_CLASSIFICATION	0.7982850362456262	WITHOUT_CLASSIFICATION	0.20171496375437378	DESIGN
return classalias == null ? classname classalias	WITHOUT_CLASSIFICATION	0.9979201837021061	WITHOUT_CLASSIFICATION	0.0020798162978938853	DESIGN
this is an explicit from element.	WITHOUT_CLASSIFICATION	0.9977534232384808	WITHOUT_CLASSIFICATION	0.0022465767615191586	DESIGN
parametercontainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998725904398542	WITHOUT_CLASSIFICATION	1.274095601458992E-4	DESIGN
fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.7946389931133286	WITHOUT_CLASSIFICATION	0.20536100688667128	DESIGN
if it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999997743714496	WITHOUT_CLASSIFICATION	2.256285504056923E-7	DESIGN
since this is an explicit from element it can't be implied in the from clause.	WITHOUT_CLASSIFICATION	0.9998051330130452	WITHOUT_CLASSIFICATION	1.948669869547166E-4	DESIGN
do nothing eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9995833822594276	WITHOUT_CLASSIFICATION	4.166177405723793E-4	DESIGN
propertyname refers to something like collection.size	WITHOUT_CLASSIFICATION	0.9947333269093096	WITHOUT_CLASSIFICATION	0.0052666730906904035	DESIGN
property name is a sub-path of a component	WITHOUT_CLASSIFICATION	0.9991786372885735	WITHOUT_CLASSIFICATION	8.213627114264498E-4	DESIGN
always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998779966643372	WITHOUT_CLASSIFICATION	1.2200333566274942E-4	DESIGN
nothing to do even if the operand is a parameter no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.6745894589500001	DESIGN	0.32541054104999984	WITHOUT_CLASSIFICATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9995297322681413	WITHOUT_CLASSIFICATION	4.7026773185869573E-4	DESIGN
dotnode uses null here	WITHOUT_CLASSIFICATION	0.9976740473347514	WITHOUT_CLASSIFICATION	0.0023259526652485533	DESIGN
we represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9997938481930738	WITHOUT_CLASSIFICATION	2.0615180692628112E-4	DESIGN
we are the lhs of the dot representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9998318097689975	WITHOUT_CLASSIFICATION	1.6819023100249648E-4	DESIGN
we are the rhs of the dot representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9994688198746585	WITHOUT_CLASSIFICATION	5.311801253415759E-4	DESIGN
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9976719038935531	WITHOUT_CLASSIFICATION	0.0023280961064469333	DESIGN
early exit!!! return so the resolve call explicitly coming from dotnode can resolve this	WITHOUT_CLASSIFICATION	0.9943464281189318	WITHOUT_CLASSIFICATION	0.005653571881068188	DESIGN
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.986346043269453	WITHOUT_CLASSIFICATION	0.013653956730546951	DESIGN
just ignore it for now it'll get resolved later	WITHOUT_CLASSIFICATION	0.9996049730790538	WITHOUT_CLASSIFICATION	3.95026920946145E-4	DESIGN
this is not actually a constant but a reference to from element.	WITHOUT_CLASSIFICATION	0.9500573189544746	WITHOUT_CLASSIFICATION	0.04994268104552527	DESIGN
check to see if our "proppath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9996682802934809	WITHOUT_CLASSIFICATION	3.317197065191063E-4	DESIGN
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9997951741201131	WITHOUT_CLASSIFICATION	2.0482587988696866E-4	DESIGN
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.7664572731688875	WITHOUT_CLASSIFICATION	0.23354272683111243	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9743698500721145	WITHOUT_CLASSIFICATION	0.025630149927885523	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9743698500721145	WITHOUT_CLASSIFICATION	0.025630149927885523	DESIGN
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9513326789472104	WITHOUT_CLASSIFICATION	0.04866732105278961	DESIGN
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9975947791570703	WITHOUT_CLASSIFICATION	0.0024052208429298227	DESIGN
do not over-write the column text as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9997873800947499	WITHOUT_CLASSIFICATION	2.1261990525003204E-4	DESIGN
for some reason the antlr.commonast initialization routines force this method to get called twice. the first time with an empty string	WITHOUT_CLASSIFICATION	0.9999850231082108	WITHOUT_CLASSIFICATION	1.4976891789321695E-5	DESIGN
look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999764156820319	WITHOUT_CLASSIFICATION	2.3584317968170965E-5	DESIGN
add to the query spaces.	WITHOUT_CLASSIFICATION	0.9998348946843213	WITHOUT_CLASSIFICATION	1.6510531567878476E-4	DESIGN
if the from element isn't in the same clause create a new from element.	WITHOUT_CLASSIFICATION	0.9997112831304757	WITHOUT_CLASSIFICATION	2.8871686952416004E-4	DESIGN
this is the root level node. generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.998150263842375	WITHOUT_CLASSIFICATION	0.0018497361576248913	DESIGN
correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ansi-style join	WITHOUT_CLASSIFICATION	0.9999912399115012	WITHOUT_CLASSIFICATION	8.760088498854086E-6	DESIGN
super-duper-classic-parser-regression-testing-mojo-magic	WITHOUT_CLASSIFICATION	0.9995592003541517	WITHOUT_CLASSIFICATION	4.407996458482287E-4	DESIGN
a collection of entities	WITHOUT_CLASSIFICATION	0.9960643050038341	WITHOUT_CLASSIFICATION	0.00393569499616577	DESIGN
a collection of components	WITHOUT_CLASSIFICATION	0.9989324055633949	WITHOUT_CLASSIFICATION	0.0010675944366051223	DESIGN
a collection of scalar elements	WITHOUT_CLASSIFICATION	0.99968167977173	WITHOUT_CLASSIFICATION	3.1832022827000585E-4	DESIGN
according to both the ansi-sql and ejb3 specs trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the sql spec <trim function> = trim <left paren> <trim operands> <right paren> <trim operands> = [ [ <trim specification> ] [ <trim character> ] from ] <trim source> <trim specification> = leading | trailing | both if only <trim specification> is omitted both is assumed if <trim character> is omitted space is assumed	WITHOUT_CLASSIFICATION	0.9999999999827969	WITHOUT_CLASSIFICATION	1.7203153758009424E-11	DESIGN
don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999581247432245	WITHOUT_CLASSIFICATION	4.187525677543972E-5	DESIGN
treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9981360864171657	WITHOUT_CLASSIFICATION	0.0018639135828343858	DESIGN
( implied && dotnode.usethetastyleimplicitjoins ) ) {	WITHOUT_CLASSIFICATION	0.9628182694727526	WITHOUT_CLASSIFICATION	0.037181730527247464	DESIGN
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.8691530198654425	WITHOUT_CLASSIFICATION	0.1308469801345576	DESIGN
create the from element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999982156824071	WITHOUT_CLASSIFICATION	1.784317592932536E-6	DESIGN
if the join is implied then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999971699977994	WITHOUT_CLASSIFICATION	2.8300022004747373E-6	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997568004076245	WITHOUT_CLASSIFICATION	2.4319959237553007E-4	DESIGN
the associated entity is implied but it must be included in the from. the collection alias is the role.	WITHOUT_CLASSIFICATION	0.9998761537571508	WITHOUT_CLASSIFICATION	1.238462428491772E-4	DESIGN
tag this node as a join. don't include subclasses in the join. this is a clollection join.	WITHOUT_CLASSIFICATION	0.9999943246869522	WITHOUT_CLASSIFICATION	5.675313047816817E-6	DESIGN
get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9998377813380149	WITHOUT_CLASSIFICATION	1.6221866198514812E-4	DESIGN
origin path implied columns classalias	WITHOUT_CLASSIFICATION	0.9999841615847808	WITHOUT_CLASSIFICATION	1.5838415219229516E-5	DESIGN
implied	WITHOUT_CLASSIFICATION	0.9997528697953686	WITHOUT_CLASSIFICATION	2.4713020463139486E-4	DESIGN
for implied many-to-many just add the end join.	WITHOUT_CLASSIFICATION	0.9998190134938664	WITHOUT_CLASSIFICATION	1.8098650613367005E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997568004076245	WITHOUT_CLASSIFICATION	2.4319959237553007E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997568004076245	WITHOUT_CLASSIFICATION	2.4319959237553007E-4	DESIGN
the standard sql function name is current_timestamp	WITHOUT_CLASSIFICATION	0.9999957708072087	WITHOUT_CLASSIFICATION	4.229192791244668E-6	DESIGN
this causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9681918726665701	WITHOUT_CLASSIFICATION	0.0318081273334298	DESIGN
private type[] sqlresulttypes	WITHOUT_CLASSIFICATION	0.9967106529427714	WITHOUT_CLASSIFICATION	0.0032893470572287176	DESIGN
frontbase has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9998489213007676	WITHOUT_CLASSIFICATION	1.5107869923239146E-4	DESIGN
the types represented in the sql result set. @return the types represented in the sql result set.	WITHOUT_CLASSIFICATION	0.999795386478745	WITHOUT_CLASSIFICATION	2.0461352125488805E-4	DESIGN
public type[] getsqlresulttypes() {return sqlresulttypes}	WITHOUT_CLASSIFICATION	0.9967349929551851	WITHOUT_CLASSIFICATION	0.0032650070448148744	DESIGN
first collect all of the select expressions. note this must be done before invoking setscalarcolumntext() because setscalarcolumntext() changes the ast!!!	WITHOUT_CLASSIFICATION	0.9941842337825284	WITHOUT_CLASSIFICATION	0.0058157662174715	DESIGN
first allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9241290275190239	WITHOUT_CLASSIFICATION	0.07587097248097613	DESIGN
sqlresulttypelist.addall( constructorargumenttypelist )	WITHOUT_CLASSIFICATION	0.9980080635409448	WITHOUT_CLASSIFICATION	0.0019919364590551686	DESIGN
if the data type is not an association type it could not have been in the from clause.	WITHOUT_CLASSIFICATION	0.9744955962981223	WITHOUT_CLASSIFICATION	0.025504403701877596	DESIGN
sqlresulttypelist.add( type )	WITHOUT_CLASSIFICATION	0.9908025811345219	WITHOUT_CLASSIFICATION	0.009197418865478053	DESIGN
always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9974244116469301	WITHOUT_CLASSIFICATION	0.002575588353069844	DESIGN
add the fetched entities	WITHOUT_CLASSIFICATION	0.9995640582173239	WITHOUT_CLASSIFICATION	4.359417826760754E-4	DESIGN
get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.999841442132091	WITHOUT_CLASSIFICATION	1.5855786790900425E-4	DESIGN
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999134650483575	WITHOUT_CLASSIFICATION	8.653495164256282E-5	DESIGN
if there are any scalars (non-entities) selected render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999994651331777	WITHOUT_CLASSIFICATION	5.348668222584508E-7	DESIGN
sqlresulttypelist	WITHOUT_CLASSIFICATION	0.999620800350095	WITHOUT_CLASSIFICATION	3.79199649905041E-4	DESIGN
arraylist sqlresulttypelist	WITHOUT_CLASSIFICATION	0.9992200924116099	WITHOUT_CLASSIFICATION	7.799075883900143E-4	DESIGN
sqlresulttypes = ( type[] ) sqlresulttypelist.toarray( new type[sqlresulttypelist.size()] )	WITHOUT_CLASSIFICATION	0.9982449786852892	WITHOUT_CLASSIFICATION	0.0017550213147108484	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993105435339059	WITHOUT_CLASSIFICATION	6.894564660940791E-4	DESIGN
todo	WITHOUT_CLASSIFICATION	0.7083277626419925	WITHOUT_CLASSIFICATION	0.29167223735800757	DESIGN
add the type to the list of returned sqlresulttypes.	WITHOUT_CLASSIFICATION	0.9999073124340323	WITHOUT_CLASSIFICATION	9.268756596774527E-5	DESIGN
generate an 2d array of column names the first dimension is parallel with the return types array. the second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999986642271501	WITHOUT_CLASSIFICATION	1.335772849857315E-6	DESIGN
generate the select expression.	WITHOUT_CLASSIFICATION	0.999562654244445	WITHOUT_CLASSIFICATION	4.3734575555503445E-4	DESIGN
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9914039868352134	WITHOUT_CLASSIFICATION	0.008596013164786689	DESIGN
skip 'distinct' and 'all' so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999879429730318	WITHOUT_CLASSIFICATION	1.2057026968150091E-5	DESIGN
create sql_token nodes for the columns.	WITHOUT_CLASSIFICATION	0.9997221055316836	WITHOUT_CLASSIFICATION	2.778944683164265E-4	DESIGN
generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9984222937455187	WITHOUT_CLASSIFICATION	0.0015777062544813313	DESIGN
get the function name node.	WITHOUT_CLASSIFICATION	0.9999496901299899	WITHOUT_CLASSIFICATION	5.030987001011948E-5	DESIGN
method expressions in a select should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9533780243349127	WITHOUT_CLASSIFICATION	0.04662197566508733	DESIGN
if this is 'elements' then create a new from element.	WITHOUT_CLASSIFICATION	0.9942492938988718	WITHOUT_CLASSIFICATION	0.005750706101128155	DESIGN
not elements(x)	WITHOUT_CLASSIFICATION	0.9983547484658842	WITHOUT_CLASSIFICATION	0.0016452515341157869	DESIGN
dialect function	WITHOUT_CLASSIFICATION	0.9998953292349657	WITHOUT_CLASSIFICATION	1.0467076503426647E-4	DESIGN
collection 'property function'	WITHOUT_CLASSIFICATION	0.9984862941700346	WITHOUT_CLASSIFICATION	0.001513705829965338	DESIGN
if the constant is an ident figure out what it means	WITHOUT_CLASSIFICATION	0.9988332233026824	WITHOUT_CLASSIFICATION	0.0011667766973175362	DESIGN
ident is a class alias in the from.	WITHOUT_CLASSIFICATION	0.9998610403900032	WITHOUT_CLASSIFICATION	1.3895960999672308E-4	DESIGN
resolve to an identity column.	WITHOUT_CLASSIFICATION	0.958950417364436	WITHOUT_CLASSIFICATION	0.04104958263556396	DESIGN
otherwise it's a literal.	WITHOUT_CLASSIFICATION	0.9980603481422279	WITHOUT_CLASSIFICATION	0.0019396518577720983	DESIGN
the name of an entity class	WITHOUT_CLASSIFICATION	0.9989231308143687	WITHOUT_CLASSIFICATION	0.0010768691856313278	DESIGN
the class discriminator value	WITHOUT_CLASSIFICATION	0.9997533067808397	WITHOUT_CLASSIFICATION	2.466932191603397E-4	DESIGN
chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9998189551444463	WITHOUT_CLASSIFICATION	1.8104485555361607E-4	DESIGN
add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999873846908207	WITHOUT_CLASSIFICATION	1.2615309179252526E-5	DESIGN
find or create the where clause	WITHOUT_CLASSIFICATION	0.9999925667338629	WITHOUT_CLASSIFICATION	7.43326613698926E-6	DESIGN
child == parent.getfirstchild()	WITHOUT_CLASSIFICATION	0.9997164766650553	WITHOUT_CLASSIFICATION	2.8352333494468775E-4	DESIGN
find or create the where clause	WITHOUT_CLASSIFICATION	0.9999925667338629	WITHOUT_CLASSIFICATION	7.43326613698926E-6	DESIGN
filter conditions need to be inserted before the hql where condition and the theta join node. this is because org.hibernate.loader.loader binds the filter parameters first then it binds all the hql query parameters see org.hibernate.loader.loader.processfilterparameters().	WITHOUT_CLASSIFICATION	0.9999999474070137	WITHOUT_CLASSIFICATION	5.259298635146947E-8	DESIGN
put the filters node before the hql condition and theta joins	WITHOUT_CLASSIFICATION	0.999987026640414	WITHOUT_CLASSIFICATION	1.2973359586199026E-5	DESIGN
add the current fragment to the filters node	WITHOUT_CLASSIFICATION	0.9996383021165397	WITHOUT_CLASSIFICATION	3.616978834603126E-4	DESIGN
create a new theta_joins node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9998978895089944	WITHOUT_CLASSIFICATION	1.0211049100557705E-4	DESIGN
put the theta_joins node before the hql condition after the filters.	WITHOUT_CLASSIFICATION	0.9999894384839002	WITHOUT_CLASSIFICATION	1.0561516099676256E-5	DESIGN
add the current fragment to the theta_joins node	WITHOUT_CLASSIFICATION	0.9993533523202411	WITHOUT_CLASSIFICATION	6.466476797589133E-4	DESIGN
first try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999532212314625	WITHOUT_CLASSIFICATION	4.67787685375451E-5	DESIGN
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9987953638301937	WITHOUT_CLASSIFICATION	0.001204636169806279	DESIGN
if that didn't work try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9997770383101112	WITHOUT_CLASSIFICATION	2.2296168988890215E-4	DESIGN
implicit joins use theta style (where pk = fk) explicit joins use join (after from)	WITHOUT_CLASSIFICATION	0.9999935110595889	WITHOUT_CLASSIFICATION	6.488940411068828E-6	DESIGN
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999959107087074	WITHOUT_CLASSIFICATION	4.089291292582798E-6	DESIGN
determine the type of the first argument	WITHOUT_CLASSIFICATION	0.9997301869107582	WITHOUT_CLASSIFICATION	2.698130892418187E-4	DESIGN
use the dot node to emit the first column name. create the column names folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999870357217611	WITHOUT_CLASSIFICATION	1.296427823886375E-5	DESIGN
note this simply constructs a "raw" sql_token representing the where fragment and injects this into the tree. this "works" however it is probably not the best long-term solution. at some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9927655563017692	DESIGN	0.00723444369823086	WITHOUT_CLASSIFICATION
append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999788180265581	WITHOUT_CLASSIFICATION	2.1181973441963012E-5	DESIGN
if the node has a first child recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999968098092527	WITHOUT_CLASSIFICATION	3.1901907473480416E-6	DESIGN
if there is a second child (rhs) recurse into that child.	WITHOUT_CLASSIFICATION	0.9999256021172831	WITHOUT_CLASSIFICATION	7.439788271695731E-5	DESIGN
iterate through the aliasjoinsequence pairs and generate sql token nodes.	WITHOUT_CLASSIFICATION	0.9998644743816136	WITHOUT_CLASSIFICATION	1.3552561838633476E-4	DESIGN
if the from element represents a join_fragment and it is a theta-style join convert its type from join_fragment to from_fragment	WITHOUT_CLASSIFICATION	0.999996087983129	WITHOUT_CLASSIFICATION	3.912016871085652E-6	DESIGN
this is used during sqlgenerator processing	WITHOUT_CLASSIFICATION	0.8248453067474888	WITHOUT_CLASSIFICATION	0.17515469325251112	DESIGN
if there is a from fragment and the from element is an explicit then add the from part.	WITHOUT_CLASSIFICATION	0.9992294011301895	WITHOUT_CLASSIFICATION	7.705988698104334E-4	DESIGN
&& stringhelper.isnotempty( frag )	WITHOUT_CLASSIFICATION	0.9926882080039547	WITHOUT_CLASSIFICATION	0.0073117919960452955	DESIGN
the from fragment will probably begin with ' '. remove this if it is present.	WITHOUT_CLASSIFICATION	0.7078050850343238	WITHOUT_CLASSIFICATION	0.2921949149656762	DESIGN
this uses a pathexpressionparser but notice that compound paths are not valid only bare names and simple paths	WITHOUT_CLASSIFICATION	0.9965098054896696	WITHOUT_CLASSIFICATION	0.003490194510330271	DESIGN
select p from p in class eg.person order by p.name p.address p	WITHOUT_CLASSIFICATION	0.9995929343425529	WITHOUT_CLASSIFICATION	4.0706565744712676E-4	DESIGN
the reason for this is sql doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9990007311112153	WITHOUT_CLASSIFICATION	9.992688887846776E-4	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9994052361389257	WITHOUT_CLASSIFICATION	5.947638610742377E-4	DESIGN
default mode	WITHOUT_CLASSIFICATION	0.9998213525392231	WITHOUT_CLASSIFICATION	1.7864746077695447E-4	DESIGN
queryjoinfragment join = q.createjoinfragment(usethetastylejoin)	WITHOUT_CLASSIFICATION	0.9999939697096355	WITHOUT_CLASSIFICATION	6.0302903644488435E-6	DESIGN
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9994965603760532	WITHOUT_CLASSIFICATION	5.034396239469552E-4	DESIGN
after reset!	WITHOUT_CLASSIFICATION	0.9998241365401828	WITHOUT_CLASSIFICATION	1.7586345981730186E-4	DESIGN
we don't need to worry about any condition in the on clause here (tofromfragmentstring) since anything in the on condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999233936499591	WITHOUT_CLASSIFICATION	7.660635004087361E-5	DESIGN
bit_length feels a bit broken to me. we have to cast to char in order to pass when a numeric value is supplied. but of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. jay nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9990468232239946	WITHOUT_CLASSIFICATION	9.531767760055192E-4	DESIGN
dotcount>=2	WITHOUT_CLASSIFICATION	0.999620800350095	WITHOUT_CLASSIFICATION	3.79199649905041E-4	DESIGN
do the corresponding rhs	WITHOUT_CLASSIFICATION	0.9995730606224942	WITHOUT_CLASSIFICATION	4.269393775059342E-4	DESIGN
if its "id"	WITHOUT_CLASSIFICATION	0.9999465087884578	WITHOUT_CLASSIFICATION	5.349121154221958E-5	DESIGN
or its the id property name	WITHOUT_CLASSIFICATION	0.9997536606513412	WITHOUT_CLASSIFICATION	2.4633934865878217E-4	DESIGN
join = q.createjoinfragment(usethetastylejoin)	WITHOUT_CLASSIFICATION	0.9999939697096355	WITHOUT_CLASSIFICATION	6.0302903644488435E-6	DESIGN
important!!	WITHOUT_CLASSIFICATION	0.9996215044846458	WITHOUT_CLASSIFICATION	3.7849551535411503E-4	DESIGN
string[] keycols = collpersister.getkeycolumnnames()	WITHOUT_CLASSIFICATION	0.9999201444548562	WITHOUT_CLASSIFICATION	7.985554514382717E-5	DESIGN
an association	WITHOUT_CLASSIFICATION	0.9997891888350772	WITHOUT_CLASSIFICATION	2.1081116492290347E-4	DESIGN
allow index() function	WITHOUT_CLASSIFICATION	0.9997094635709377	WITHOUT_CLASSIFICATION	2.9053642906224167E-4	DESIGN
here assume sqlserver2005 using snapshot isolation which does not have this problem	WITHOUT_CLASSIFICATION	0.9931187517382526	WITHOUT_CLASSIFICATION	0.006881248261747319	DESIGN
the reason for this is sql doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9990007311112153	WITHOUT_CLASSIFICATION	9.992688887846776E-4	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.999620800350095	WITHOUT_CLASSIFICATION	3.79199649905041E-4	DESIGN
collections of values	WITHOUT_CLASSIFICATION	0.9997454625871396	WITHOUT_CLASSIFICATION	2.545374128604187E-4	DESIGN
opening paren in new foo ( )	WITHOUT_CLASSIFICATION	0.9800779196505585	WITHOUT_CLASSIFICATION	0.01992208034944156	DESIGN
if we are inside a new result() but not inside a nested function	WITHOUT_CLASSIFICATION	0.9997087731612874	WITHOUT_CLASSIFICATION	2.912268387125478E-4	DESIGN
special case	WITHOUT_CLASSIFICATION	0.9998253682828557	WITHOUT_CLASSIFICATION	1.7463171714424488E-4	DESIGN
the name of an sql function	WITHOUT_CLASSIFICATION	0.9999851921137715	WITHOUT_CLASSIFICATION	1.4807886228506432E-5	DESIGN
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9995907546354658	WITHOUT_CLASSIFICATION	4.092453645341969E-4	DESIGN
this is basically a copy/paste of orderbyparser might be worth refactoring	WITHOUT_CLASSIFICATION	0.8808139470592897	DESIGN	0.1191860529407103	WITHOUT_CLASSIFICATION
select p from p in class eg.person group by p.name p.address p	WITHOUT_CLASSIFICATION	0.9987892688408255	WITHOUT_CLASSIFICATION	0.0012107311591744191	DESIGN
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9965292483563416	WITHOUT_CLASSIFICATION	0.003470751643658493	DESIGN
register collection role	WITHOUT_CLASSIFICATION	0.9972864975920958	WITHOUT_CLASSIFICATION	0.002713502407904348	DESIGN
the keyword used to specify an identity column if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9991620691570405	WITHOUT_CLASSIFICATION	8.379308429594898E-4	DESIGN
.getelementpropertymapping()	WITHOUT_CLASSIFICATION	0.9991285900065839	WITHOUT_CLASSIFICATION	8.714099934160564E-4	DESIGN
crossjoins.add(name)	WITHOUT_CLASSIFICATION	0.999620800350095	WITHOUT_CLASSIFICATION	3.79199649905041E-4	DESIGN
ie no select clause in hql	WITHOUT_CLASSIFICATION	0.9999011731987951	WITHOUT_CLASSIFICATION	9.882680120491424E-5	DESIGN
initialize the set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9994523291924791	WITHOUT_CLASSIFICATION	5.476708075208214E-4	DESIGN
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999671882547521	WITHOUT_CLASSIFICATION	3.2811745247900475E-5	DESIGN
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9998141441348283	WITHOUT_CLASSIFICATION	1.858558651717946E-4	DESIGN
return the concrete type or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9997891972584562	WITHOUT_CLASSIFICATION	2.1080274154383193E-4	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.999620800350095	WITHOUT_CLASSIFICATION	3.79199649905041E-4	DESIGN
q.addcollection(collectionname collectionrole)	WITHOUT_CLASSIFICATION	0.9995592003541517	WITHOUT_CLASSIFICATION	4.407996458482287E-4	DESIGN
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9937797278615115	WITHOUT_CLASSIFICATION	0.0062202721384885876	DESIGN
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9982795218906118	WITHOUT_CLASSIFICATION	0.0017204781093882215	DESIGN
unfortunately this stuff can't be cached because it is per-invocation not constant for the querytranslator instance	WITHOUT_CLASSIFICATION	0.9996905931839115	WITHOUT_CLASSIFICATION	3.094068160884912E-4	DESIGN
this is the legacy behaviour for hql queries	WITHOUT_CLASSIFICATION	0.9990817089755646	WITHOUT_CLASSIFICATION	9.182910244354845E-4	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9989679715599991	WITHOUT_CLASSIFICATION	0.0010320284400009323	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9989679715599991	WITHOUT_CLASSIFICATION	0.0010320284400009323	DESIGN
we have the form trim(trimsource) so we trim leading and trailing spaces early exit!!!!	WITHOUT_CLASSIFICATION	0.9999058826346424	WITHOUT_CLASSIFICATION	9.411736535756749E-5	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9989679715599991	WITHOUT_CLASSIFICATION	0.0010320284400009323	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9989679715599991	WITHOUT_CLASSIFICATION	0.0010320284400009323	DESIGN
need this since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9998532104034392	WITHOUT_CLASSIFICATION	1.467895965607926E-4	DESIGN
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999998177892806	WITHOUT_CLASSIFICATION	1.82210719344768E-7	DESIGN
expressionterminators.add("") deliberately excluded	WITHOUT_CLASSIFICATION	0.9997211324508536	WITHOUT_CLASSIFICATION	2.7886754914642584E-4	DESIGN
expressionopeners.add("") deliberately excluded	WITHOUT_CLASSIFICATION	0.9997211324508536	WITHOUT_CLASSIFICATION	2.7886754914642584E-4	DESIGN
we have the form trim(from trimsource). this is functionally equivalent to trim(trimsource) early exit!!!!	WITHOUT_CLASSIFICATION	0.9984835806723016	WITHOUT_CLASSIFICATION	0.0015164193276984727	DESIGN
otherwise a trim-specification and/or a trim-character have been specified we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.997374576971189	WITHOUT_CLASSIFICATION	0.00262542302881092	DESIGN
inside a between and expression	WITHOUT_CLASSIFICATION	0.9995636357614746	WITHOUT_CLASSIFICATION	4.363642385253967E-4	DESIGN
were an odd or even number of nots encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999906155278493	WITHOUT_CLASSIFICATION	9.38447215071989E-6	DESIGN
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9991743480515214	WITHOUT_CLASSIFICATION	8.25651948478551E-4	DESIGN
cope with []	WITHOUT_CLASSIFICATION	0.9984286663284673	WITHOUT_CLASSIFICATION	0.0015713336715328001	DESIGN
cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9998881822462237	WITHOUT_CLASSIFICATION	1.1181775377622071E-4	DESIGN
note early return	WITHOUT_CLASSIFICATION	0.9990058292805425	WITHOUT_CLASSIFICATION	9.94170719457457E-4	DESIGN
cope with a subselect	WITHOUT_CLASSIFICATION	0.9958736946696098	WITHOUT_CLASSIFICATION	0.004126305330390137	DESIGN
cope with special cases of and not ()	WITHOUT_CLASSIFICATION	0.9999899240872323	WITHOUT_CLASSIFICATION	1.0075912767734228E-5	DESIGN
close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999951331788499	WITHOUT_CLASSIFICATION	4.866821150083457E-6	DESIGN
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9936323087972417	WITHOUT_CLASSIFICATION	0.006367691202758258	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999970468326597	WITHOUT_CLASSIFICATION	2.953167340233465E-6	DESIGN
process a token mapping oo path expressions to sql expressions	WITHOUT_CLASSIFICATION	0.999995105377448	WITHOUT_CLASSIFICATION	4.894622552032372E-6	DESIGN
open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.999000450709726	WITHOUT_CLASSIFICATION	9.99549290274028E-4	DESIGN
cope with special cases of and not )	WITHOUT_CLASSIFICATION	0.9692009809870133	WITHOUT_CLASSIFICATION	0.030799019012986678	DESIGN
the next one up must also be	WITHOUT_CLASSIFICATION	0.9976074904175949	WITHOUT_CLASSIFICATION	0.002392509582405185	DESIGN
add any joins	WITHOUT_CLASSIFICATION	0.9997485039278636	WITHOUT_CLASSIFICATION	2.5149607213631567E-4	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999970468326597	WITHOUT_CLASSIFICATION	2.953167340233465E-6	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9994052361389257	WITHOUT_CLASSIFICATION	5.947638610742377E-4	DESIGN
path expression	WITHOUT_CLASSIFICATION	0.9999796693179647	WITHOUT_CLASSIFICATION	2.0330682035281513E-5	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999979686848514	WITHOUT_CLASSIFICATION	2.031315148602931E-5	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999047837473476	WITHOUT_CLASSIFICATION	9.521625265243496E-5	DESIGN
anything else	WITHOUT_CLASSIFICATION	0.9999696916554676	WITHOUT_CLASSIFICATION	3.0308344532518104E-5	DESIGN
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999908881915505	WITHOUT_CLASSIFICATION	9.11180844953404E-6	DESIGN
careful with this!	WITHOUT_CLASSIFICATION	0.99916881980182	WITHOUT_CLASSIFICATION	8.311801981799112E-4	DESIGN
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999157381712828	WITHOUT_CLASSIFICATION	8.426182871735033E-5	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999824916854786	WITHOUT_CLASSIFICATION	1.7508314521428273E-5	DESIGN
notice no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999950445996612	WITHOUT_CLASSIFICATION	4.955400338825421E-6	DESIGN
cannot instantiate	WITHOUT_CLASSIFICATION	0.999880515760623	WITHOUT_CLASSIFICATION	1.1948423937708273E-4	DESIGN
start by looking for hql keywords	WITHOUT_CLASSIFICATION	0.999860801116852	WITHOUT_CLASSIFICATION	1.3919888314790018E-4	DESIGN
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9973847239539075	WITHOUT_CLASSIFICATION	0.00261527604609237	DESIGN
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999304166958198	WITHOUT_CLASSIFICATION	6.958330418016442E-5	DESIGN
now anything that is not a hql keyword	WITHOUT_CLASSIFICATION	0.9996305405359216	WITHOUT_CLASSIFICATION	3.694594640784365E-4	DESIGN
process the "old" hql style where aliases appear _first_ ie. using the in or in class constructions	WITHOUT_CLASSIFICATION	0.9999890259332928	WITHOUT_CLASSIFICATION	1.097406670719628E-5	DESIGN
treat it as a classname	WITHOUT_CLASSIFICATION	0.9988714706331737	WITHOUT_CLASSIFICATION	0.0011285293668263396	DESIGN
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999435007221525	WITHOUT_CLASSIFICATION	5.649927784738348E-5	DESIGN
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9976500077586544	WITHOUT_CLASSIFICATION	0.002349992241345593	DESIGN
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999558803344893	WITHOUT_CLASSIFICATION	4.411966551059137E-5	DESIGN
allow odmg oql style from person p p.cars c	WITHOUT_CLASSIFICATION	0.9998200328008098	WITHOUT_CLASSIFICATION	1.7996719919019107E-4	DESIGN
handle quoted strings	WITHOUT_CLASSIFICATION	0.997429343051615	WITHOUT_CLASSIFICATION	0.002570656948384983	DESIGN
object insertions updates and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999929775743391	WITHOUT_CLASSIFICATION	7.022425660849573E-6	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999824916854786	WITHOUT_CLASSIFICATION	1.7508314521428273E-5	DESIGN
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999697694256762	WITHOUT_CLASSIFICATION	3.0230574323835228E-5	DESIGN
do replacements	WITHOUT_CLASSIFICATION	0.9992618552654601	WITHOUT_CLASSIFICATION	7.381447345399116E-4	DESIGN
handle hql2 collection syntax	WITHOUT_CLASSIFICATION	0.997381893924632	WITHOUT_CLASSIFICATION	0.0026181060753680324	DESIGN
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9893555728643757	WITHOUT_CLASSIFICATION	0.010644427135624194	DESIGN
abstractselectingdelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998725904398542	WITHOUT_CLASSIFICATION	1.274095601458992E-4	DESIGN
hilo params	WITHOUT_CLASSIFICATION	0.9996426190892231	WITHOUT_CLASSIFICATION	3.5738091077681657E-4	DESIGN
sql = query	WITHOUT_CLASSIFICATION	0.9999863948646954	WITHOUT_CLASSIFICATION	1.3605135304575742E-5	DESIGN
performance opt	WITHOUT_CLASSIFICATION	0.9993223874187284	WITHOUT_CLASSIFICATION	6.776125812716431E-4	DESIGN
sql = update	WITHOUT_CLASSIFICATION	0.9999796602191662	WITHOUT_CLASSIFICATION	2.033978083379779E-5	DESIGN
hilo config	WITHOUT_CLASSIFICATION	0.9996145695143976	WITHOUT_CLASSIFICATION	3.8543048560228476E-4	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999812635396199	WITHOUT_CLASSIFICATION	1.8736460380170335E-5	DESIGN
don't allow comments on these insert statements as comments totally blow up the oracle getgeneratedkeys "support" (	WITHOUT_CLASSIFICATION	0.9994325604440596	WITHOUT_CLASSIFICATION	5.674395559405015E-4	DESIGN
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9971688967215427	WITHOUT_CLASSIFICATION	0.0028311032784571763	DESIGN
throw new identifiergenerationexception("save associated object first or disable cascade for inverse association")	WITHOUT_CLASSIFICATION	0.9999922447961418	WITHOUT_CLASSIFICATION	7.755203858128162E-6	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9996097817285058	WITHOUT_CLASSIFICATION	3.902182714942757E-4	DESIGN
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9997898260493832	WITHOUT_CLASSIFICATION	2.1017395061673889E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9996782794860856	WITHOUT_CLASSIFICATION	3.217205139144372E-4	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999812635396199	WITHOUT_CLASSIFICATION	1.8736460380170335E-5	DESIGN
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9974302681245526	WITHOUT_CLASSIFICATION	0.0025697318754473895	DESIGN
column and table should be renamed but it would break the public api	WITHOUT_CLASSIFICATION	0.9590277780192968	WITHOUT_CLASSIFICATION	0.04097222198070315	DESIGN
loaded entity instances by entitykey	WITHOUT_CLASSIFICATION	0.9995849429667628	WITHOUT_CLASSIFICATION	4.1505703323719054E-4	DESIGN
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.998672729601397	WITHOUT_CLASSIFICATION	0.001327270398602947	DESIGN
the default	WITHOUT_CLASSIFICATION	0.9999375307710241	WITHOUT_CLASSIFICATION	6.246922897593557E-5	DESIGN
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence	WITHOUT_CLASSIFICATION	0.9998144942163038	WITHOUT_CLASSIFICATION	1.855057836962533E-4	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9996097817285058	WITHOUT_CLASSIFICATION	3.902182714942757E-4	DESIGN
identity map of collectionentry instances by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999859592948677	WITHOUT_CLASSIFICATION	1.4040705132372474E-5	DESIGN
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999938636091628	WITHOUT_CLASSIFICATION	6.136390837279991E-6	DESIGN
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999957782581198	WITHOUT_CLASSIFICATION	4.221741880193792E-5	DESIGN
configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996928781936707	WITHOUT_CLASSIFICATION	3.0712180632923547E-4	DESIGN
identifiergenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998059390607942	WITHOUT_CLASSIFICATION	1.9406093920585837E-4	DESIGN
persistentidentifiergenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998059390607942	WITHOUT_CLASSIFICATION	1.9406093920585837E-4	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999420474891014	WITHOUT_CLASSIFICATION	5.795251089856644E-5	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999420474891014	WITHOUT_CLASSIFICATION	5.795251089856644E-5	DESIGN
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9942751722610506	WITHOUT_CLASSIFICATION	0.005724827738949442	DESIGN
we just hit the last position	WITHOUT_CLASSIFICATION	0.9994105382170247	WITHOUT_CLASSIFICATION	5.894617829752689E-4	DESIGN
scroll ahead	WITHOUT_CLASSIFICATION	0.9960217030683027	WITHOUT_CLASSIFICATION	0.003978296931697296	DESIGN
scroll backward	WITHOUT_CLASSIFICATION	0.9986436302587449	WITHOUT_CLASSIFICATION	0.001356369741255045	DESIGN
we have not yet hit the last result	WITHOUT_CLASSIFICATION	0.9997968107592234	WITHOUT_CLASSIFICATION	2.0318924077658812E-4	DESIGN
constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978983388269841	WITHOUT_CLASSIFICATION	0.002101661173015944	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998863300165269	WITHOUT_CLASSIFICATION	1.1366998347314961E-4	DESIGN
criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999056654462302	WITHOUT_CLASSIFICATION	9.433455376985881E-5	DESIGN
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9993326686371312	WITHOUT_CLASSIFICATION	6.673313628686915E-4	DESIGN
inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999591283438904	WITHOUT_CLASSIFICATION	4.087165610960138E-4	DESIGN
constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978983388269841	WITHOUT_CLASSIFICATION	0.002101661173015944	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998863300165269	WITHOUT_CLASSIFICATION	1.1366998347314961E-4	DESIGN
criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999056654462302	WITHOUT_CLASSIFICATION	9.433455376985881E-5	DESIGN
caches	WITHOUT_CLASSIFICATION	0.9997876991299874	WITHOUT_CLASSIFICATION	2.1230087001248275E-4	DESIGN
generators	WITHOUT_CLASSIFICATION	0.9997622491590575	WITHOUT_CLASSIFICATION	2.3775084094252203E-4	DESIGN
cache region is defined by the root-class in the hierarchy	WITHOUT_CLASSIFICATION	0.9997130364764554	WITHOUT_CLASSIFICATION	2.8696352354458534E-4	DESIGN
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9995410831909152	WITHOUT_CLASSIFICATION	4.589168090848559E-4	DESIGN
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999077513463043	WITHOUT_CLASSIFICATION	9.224865369564614E-5	DESIGN
if we get here it is possible that we have a proxy 'in the way' of the merge map resolution note decided to put this here rather than in the above loop as i was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9736551683447364	WITHOUT_CLASSIFICATION	0.02634483165526357	DESIGN
jndi + serialization	WITHOUT_CLASSIFICATION	0.9999511015980417	WITHOUT_CLASSIFICATION	4.889840195839517E-5	DESIGN
checking for named queries	WITHOUT_CLASSIFICATION	0.8212277700068248	WITHOUT_CLASSIFICATION	0.17877222999317513	DESIGN
stats	WITHOUT_CLASSIFICATION	0.9997724084264594	WITHOUT_CLASSIFICATION	2.2759157354055982E-4	DESIGN
entitynotfounddelegate	WITHOUT_CLASSIFICATION	0.9991285900065839	WITHOUT_CLASSIFICATION	8.714099934160564E-4	DESIGN
check named hql queries	WITHOUT_CLASSIFICATION	0.9990079343253775	WITHOUT_CLASSIFICATION	9.920656746225144E-4	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.8494038220606323	DESIGN	0.1505961779393678	WITHOUT_CLASSIFICATION
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9839695515195269	WITHOUT_CLASSIFICATION	0.016030448480473018	DESIGN
from javax.naming.referenceable	WITHOUT_CLASSIFICATION	0.9993042445888326	WITHOUT_CLASSIFICATION	6.957554111674085E-4	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999955091999772	WITHOUT_CLASSIFICATION	4.4908000227980426E-5	DESIGN
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9992957459965136	WITHOUT_CLASSIFICATION	7.042540034864212E-4	DESIGN
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.999950308364081	WITHOUT_CLASSIFICATION	4.969163591892933E-5	DESIGN
note early exit	WITHOUT_CLASSIFICATION	0.9996652203744285	WITHOUT_CLASSIFICATION	3.3477962557140593E-4	DESIGN
for backward-compatability	WITHOUT_CLASSIFICATION	0.9992567108816189	WITHOUT_CLASSIFICATION	7.432891183809964E-4	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9984048638164432	WITHOUT_CLASSIFICATION	0.0015951361835566922	DESIGN
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9997591425618454	WITHOUT_CLASSIFICATION	2.4085743815464289E-4	DESIGN
in case we were deserialized in a different jvm look for an instance with the same name (alternatively we could do an actual jndi lookup here.)	WITHOUT_CLASSIFICATION	0.9591052674102295	WITHOUT_CLASSIFICATION	0.04089473258977058	DESIGN
must add to jndi _after_ adding to hashmaps because some jndi servers use serialization	WITHOUT_CLASSIFICATION	0.9988454755555571	WITHOUT_CLASSIFICATION	0.0011545244444428116	DESIGN
make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9904756168640773	WITHOUT_CLASSIFICATION	0.00952438313592264	DESIGN
for each of the defined parameters make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999989206273766	WITHOUT_CLASSIFICATION	1.0793726233982324E-6	DESIGN
we never need to apply locks to the sql	WITHOUT_CLASSIFICATION	0.9991311465047927	WITHOUT_CLASSIFICATION	8.688534952073322E-4	DESIGN
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995723781576454	WITHOUT_CLASSIFICATION	4.276218423545357E-4	DESIGN
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996339252903202	WITHOUT_CLASSIFICATION	3.6607470967972436E-4	DESIGN
during deserialization we need to reconnect all proxies and collections to this session as well as the entityentry and collectionentry instances these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.5980523955812356	WITHOUT_CLASSIFICATION	0.4019476044187645	DESIGN
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997581785752598	WITHOUT_CLASSIFICATION	2.418214247402699E-4	DESIGN
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999257288526394	WITHOUT_CLASSIFICATION	7.427114736062435E-5	DESIGN
final boolean forcecacherefresh	WITHOUT_CLASSIFICATION	0.9999341898923597	WITHOUT_CLASSIFICATION	6.581010764025429E-5	DESIGN
final boolean forcecacherefresh	WITHOUT_CLASSIFICATION	0.9999341898923597	WITHOUT_CLASSIFICATION	6.581010764025429E-5	DESIGN
first try to load it from the temp pc associated to this ss	WITHOUT_CLASSIFICATION	0.9998545911765105	WITHOUT_CLASSIFICATION	1.4540882348945593E-4	DESIGN
if the metadata allowed proxy creation and caller did not request forceful eager loading generate a proxy	WITHOUT_CLASSIFICATION	0.9999981947385327	WITHOUT_CLASSIFICATION	1.8052614673531598E-6	DESIGN
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9996470611877906	WITHOUT_CLASSIFICATION	3.529388122095105E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9998959188336597	WITHOUT_CLASSIFICATION	1.040811663402681E-4	DESIGN
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9988570567145797	WITHOUT_CLASSIFICATION	0.0011429432854203072	DESIGN
after setting values to object entitymode	WITHOUT_CLASSIFICATION	0.9999529163681996	WITHOUT_CLASSIFICATION	4.7083631800424474E-5	DESIGN
for ejb3	WITHOUT_CLASSIFICATION	0.9997972238813377	WITHOUT_CLASSIFICATION	2.0277611866225127E-4	DESIGN
just ignore	WITHOUT_CLASSIFICATION	0.9999447604946251	WITHOUT_CLASSIFICATION	5.52395053749632E-5	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9979715025855816	WITHOUT_CLASSIFICATION	0.0020284974144183752	DESIGN
saveorupdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998486688790426	WITHOUT_CLASSIFICATION	1.5133112095739974E-4	DESIGN
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999855957991689	WITHOUT_CLASSIFICATION	1.4404200831089412E-4	DESIGN
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998486688790426	WITHOUT_CLASSIFICATION	1.5133112095739974E-4	DESIGN
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998486688790426	WITHOUT_CLASSIFICATION	1.5133112095739974E-4	DESIGN
persistonflush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998486688790426	WITHOUT_CLASSIFICATION	1.5133112095739974E-4	DESIGN
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998491497647446	WITHOUT_CLASSIFICATION	1.5085023525534044E-4	DESIGN
saveorupdatecopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998486688790426	WITHOUT_CLASSIFICATION	1.5133112095739974E-4	DESIGN
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998396529459155	WITHOUT_CLASSIFICATION	1.603470540845547E-4	DESIGN
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998486688790426	WITHOUT_CLASSIFICATION	1.5133112095739974E-4	DESIGN
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998486688790426	WITHOUT_CLASSIFICATION	1.5133112095739974E-4	DESIGN
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998486688790426	WITHOUT_CLASSIFICATION	1.5133112095739974E-4	DESIGN
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.998430012465216	WITHOUT_CLASSIFICATION	0.001569987534784095	DESIGN
this is an internal error of some sort	WITHOUT_CLASSIFICATION	0.9946974224657004	WITHOUT_CLASSIFICATION	0.005302577534299568	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9695056545247763	WITHOUT_CLASSIFICATION	0.030494345475223707	DESIGN
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999812531195696	WITHOUT_CLASSIFICATION	1.8746880430382164E-5	DESIGN
if it was previously unreferenced we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999457237451173	WITHOUT_CLASSIFICATION	5.4276254882795195E-5	DESIGN
not for internal use	WITHOUT_CLASSIFICATION	0.9965605125048341	WITHOUT_CLASSIFICATION	0.003439487495165863	DESIGN
otherwise we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9918181490892052	WITHOUT_CLASSIFICATION	0.008181850910794907	DESIGN
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9268710036389111	WITHOUT_CLASSIFICATION	0.07312899636108898	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9695056545247763	WITHOUT_CLASSIFICATION	0.030494345475223707	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9695056545247763	WITHOUT_CLASSIFICATION	0.030494345475223707	DESIGN
if it is initialized see if the underlying instance is contained since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9985555156264103	WITHOUT_CLASSIFICATION	0.001444484373589608	DESIGN
basically just an adapted copy of find(criteriaimpl)	WITHOUT_CLASSIFICATION	0.9955332165830335	WITHOUT_CLASSIFICATION	0.004466783416966482	DESIGN
it is possible for this method to be called during flush processing so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9871900862719711	WITHOUT_CLASSIFICATION	0.012809913728028949	DESIGN
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9983238090615394	WITHOUT_CLASSIFICATION	0.001676190938460614	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.99997213410695	WITHOUT_CLASSIFICATION	2.786589305004127E-5	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9984048638164432	WITHOUT_CLASSIFICATION	0.0015951361835566922	DESIGN
we need to writeobject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9994095960714163	WITHOUT_CLASSIFICATION	5.90403928583575E-4	DESIGN
the old-time stand-by	WITHOUT_CLASSIFICATION	0.9995504116373847	WITHOUT_CLASSIFICATION	4.4958836261537805E-4	DESIGN
parameter bind values	WITHOUT_CLASSIFICATION	0.9992979291522684	WITHOUT_CLASSIFICATION	7.020708477315265E-4	DESIGN
parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9965390486979417	WITHOUT_CLASSIFICATION	0.0034609513020582797	DESIGN
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999602419747059	WITHOUT_CLASSIFICATION	3.975802529412083E-5	DESIGN
execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992255977204929	WITHOUT_CLASSIFICATION	7.744022795071363E-4	DESIGN
we have a cglib enhanced entity	WITHOUT_CLASSIFICATION	0.9988130106371398	WITHOUT_CLASSIFICATION	0.0011869893628602309	DESIGN
we have a cglib enhanced entity	WITHOUT_CLASSIFICATION	0.9988130106371398	WITHOUT_CLASSIFICATION	0.0011869893628602309	DESIGN
we have a javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9988130106371398	WITHOUT_CLASSIFICATION	0.0011869893628602309	DESIGN
we have a javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9988130106371398	WITHOUT_CLASSIFICATION	0.0011869893628602309	DESIGN
fieldinterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998725904398542	WITHOUT_CLASSIFICATION	1.274095601458992E-4	DESIGN
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9958720662439544	WITHOUT_CLASSIFICATION	0.004127933756045563	DESIGN
let's assume that there is only one lazy fetch group for now!	WITHOUT_CLASSIFICATION	0.9999961694400341	WITHOUT_CLASSIFICATION	3.830559965910788E-6	DESIGN
fieldhandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998725904398542	WITHOUT_CLASSIFICATION	1.274095601458992E-4	DESIGN
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.8532401488217344	WITHOUT_CLASSIFICATION	0.14675985117826548	DESIGN
should probably no-op commit/rollback here at least in jta scenarios	WITHOUT_CLASSIFICATION	0.8812797011928611	WITHOUT_CLASSIFICATION	0.11872029880713883	DESIGN
base expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999823317345996	WITHOUT_CLASSIFICATION	1.7668265400391474E-4	DESIGN
various expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998439116027736	WITHOUT_CLASSIFICATION	1.5608839722630046E-4	DESIGN
explicitly perform no checking	WITHOUT_CLASSIFICATION	0.5173495948390873	WITHOUT_CLASSIFICATION	0.48265040516091284	DESIGN
used from testsuite	WITHOUT_CLASSIFICATION	0.9551489643306021	WITHOUT_CLASSIFICATION	0.04485103566939782	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999209975902168	WITHOUT_CLASSIFICATION	7.900240978323226E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9992285899396746	WITHOUT_CLASSIFICATION	7.714100603253817E-4	DESIGN
register synch stats.connect()	WITHOUT_CLASSIFICATION	0.999674858177135	WITHOUT_CLASSIFICATION	3.251418228650025E-4	DESIGN
noncritical swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9988603251863932	WITHOUT_CLASSIFICATION	0.001139674813606748	DESIGN
calls executebatch()	WITHOUT_CLASSIFICATION	0.9994630676463886	WITHOUT_CLASSIFICATION	5.369323536114449E-4	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999889949162883	WITHOUT_CLASSIFICATION	1.1005083711563696E-5	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999889949162883	WITHOUT_CLASSIFICATION	1.1005083711563696E-5	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999889949162883	WITHOUT_CLASSIFICATION	1.1005083711563696E-5	DESIGN
sybase driver (jconnect) throwing npe here in certain cases but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9994080043989036	WITHOUT_CLASSIFICATION	5.919956010962302E-4	DESIGN
see explanation above	WITHOUT_CLASSIFICATION	0.999553825573567	WITHOUT_CLASSIFICATION	4.46174426433054E-4	DESIGN
if we are in the process of releasing no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.8854338937322258	WITHOUT_CLASSIFICATION	0.1145661062677742	DESIGN
early exit!!!!	WITHOUT_CLASSIFICATION	0.9997941291573791	WITHOUT_CLASSIFICATION	2.0587084262093224E-4	DESIGN
resultset impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999004028658676	WITHOUT_CLASSIFICATION	9.959713413241213E-5	DESIGN
resultset impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999004028658676	WITHOUT_CLASSIFICATION	9.959713413241213E-5	DESIGN
refer to comment in statefulpersistencecontext.addcollection()	WITHOUT_CLASSIFICATION	0.9999647860454128	WITHOUT_CLASSIFICATION	3.521395458721652E-5	DESIGN
connectionmanager.callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998059390607942	WITHOUT_CLASSIFICATION	1.9406093920585837E-4	DESIGN
note success = false because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999918514500432	WITHOUT_CLASSIFICATION	8.148549956798365E-6	DESIGN
we already have a callback registered either a local (org.hibernate.transaction) transaction has accepted callback responsibilities or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999425172375161	WITHOUT_CLASSIFICATION	5.748276248396681E-5	DESIGN
the configured transaction-factory says it only supports local callback mode so no sense attempting to register a jta synchronization	WITHOUT_CLASSIFICATION	0.9950472831086171	WITHOUT_CLASSIFICATION	0.00495271689138296	DESIGN
transactions marked for rollback-only cause some tm impls to throw exceptions	WITHOUT_CLASSIFICATION	0.997290896460597	WITHOUT_CLASSIFICATION	0.0027091035394031042	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996955109406654	WITHOUT_CLASSIFICATION	3.044890593345629E-4	DESIGN
postinitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999728590528598	WITHOUT_CLASSIFICATION	2.714094714014184E-5	DESIGN
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9996489485703379	WITHOUT_CLASSIFICATION	3.510514296621839E-4	DESIGN
todo for 4.0 private static final logger log = loggerfactory.getlogger( sqlstatementlogger.class ) this is the legacy logging 'category'	WITHOUT_CLASSIFICATION	0.5966416893756245	WITHOUT_CLASSIFICATION	0.40335831062437566	DESIGN
note that for sequential scrolling we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.998260141452956	WITHOUT_CLASSIFICATION	0.0017398585470439155	DESIGN
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9982271321931513	WITHOUT_CLASSIFICATION	0.0017728678068487291	DESIGN
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9985244966112746	WITHOUT_CLASSIFICATION	0.0014755033887254867	DESIGN
position cursor to the last row	WITHOUT_CLASSIFICATION	0.999971380688807	WITHOUT_CLASSIFICATION	2.8619311193072733E-5	DESIGN
sequentially read the result set in reverse until we recognize a change in the key value. at that point we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999998507513442	WITHOUT_CLASSIFICATION	1.4924865567141258E-7	DESIGN
read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999135845999	WITHOUT_CLASSIFICATION	8.641540008635541E-8	DESIGN
finally read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999998763812566	WITHOUT_CLASSIFICATION	1.236187432905274E-7	DESIGN
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999991144154015	WITHOUT_CLASSIFICATION	8.855845985420118E-7	DESIGN
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9970892310507172	WITHOUT_CLASSIFICATION	0.0029107689492827134	DESIGN
this is equivalent to the old behavior	WITHOUT_CLASSIFICATION	0.9998423439697209	WITHOUT_CLASSIFICATION	1.5765603027902467E-4	DESIGN
if null owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999260437806967	WITHOUT_CLASSIFICATION	7.395621930328209E-5	DESIGN
final string querystring	WITHOUT_CLASSIFICATION	0.9997985275129375	WITHOUT_CLASSIFICATION	2.0147248706240385E-4	DESIGN
if it was a reference to self don't need to nullify unless we are using native id generation in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999730393801485	WITHOUT_CLASSIFICATION	2.69606198515952E-5	DESIGN
end of array start filling again from start	WITHOUT_CLASSIFICATION	0.9999561551352932	WITHOUT_CLASSIFICATION	4.3844864706807794E-5	DESIGN
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to persistentcollection#endread) we scan the internal loadingcollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endread processing.	WITHOUT_CLASSIFICATION	0.9996007507280644	WITHOUT_CLASSIFICATION	3.9924927193549106E-4	DESIGN
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999537133095309	WITHOUT_CLASSIFICATION	4.628669046913006E-5	DESIGN
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9980446010900279	WITHOUT_CLASSIFICATION	0.001955398909972144	DESIGN
first we need to suspend any current jta transaction and obtain a jdbc connection	WITHOUT_CLASSIFICATION	0.9997333131434668	WITHOUT_CLASSIFICATION	2.6668685653315015E-4	DESIGN
getresultlist(results)	WITHOUT_CLASSIFICATION	0.9991285900065839	WITHOUT_CLASSIFICATION	8.714099934160564E-4	DESIGN
if we only returned one entity query by key is more efficient	WITHOUT_CLASSIFICATION	0.9979776514398955	WITHOUT_CLASSIFICATION	0.002022348560104434	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9986665196247558	WITHOUT_CLASSIFICATION	0.0013334803752442102	DESIGN
handle empty collection	WITHOUT_CLASSIFICATION	0.9928587329006042	WITHOUT_CLASSIFICATION	0.007141267099395819	DESIGN
else no collection element but also no owner	WITHOUT_CLASSIFICATION	0.9999916706609395	WITHOUT_CLASSIFICATION	8.32933906049531E-6	DESIGN
handle empty collections	WITHOUT_CLASSIFICATION	0.9971807471697379	WITHOUT_CLASSIFICATION	0.002819252830262026	DESIGN
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9900268096392212	WITHOUT_CLASSIFICATION	0.009973190360778917	DESIGN
validate() instances of validatable	WITHOUT_CLASSIFICATION	0.9996959463055256	WITHOUT_CLASSIFICATION	3.0405369447437355E-4	DESIGN
if we know there is exactly 1 row we can skip. it would be great if we could _always_ skip this it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.8934553328308148	WITHOUT_CLASSIFICATION	0.10654466716918518	DESIGN
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9921879629949154	WITHOUT_CLASSIFICATION	0.007812037005084642	DESIGN
null version means the object is in the process of being loaded somewhere else in the resultset	WITHOUT_CLASSIFICATION	0.9999136195291229	WITHOUT_CLASSIFICATION	8.63804708770701E-5	DESIGN
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9763677900785459	WITHOUT_CLASSIFICATION	0.023632209921454112	DESIGN
use the id passed in	WITHOUT_CLASSIFICATION	0.9997912865823188	WITHOUT_CLASSIFICATION	2.0871341768115384E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.999857431691879	WITHOUT_CLASSIFICATION	1.425683081209106E-4	DESIGN
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9997987808089783	WITHOUT_CLASSIFICATION	2.012191910217166E-4	DESIGN
no point doing this if none was requested	WITHOUT_CLASSIFICATION	0.9999455537620265	WITHOUT_CLASSIFICATION	5.444623797338867E-5	DESIGN
if the object is already loaded return the loaded one	WITHOUT_CLASSIFICATION	0.9995711354591297	WITHOUT_CLASSIFICATION	4.2886454087030654E-4	DESIGN
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9985513474934677	WITHOUT_CLASSIFICATION	0.0014486525065322696	DESIGN
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9993500447457483	WITHOUT_CLASSIFICATION	6.499552542516316E-4	DESIGN
the load() which takes an entity does not pass an entityname	WITHOUT_CLASSIFICATION	0.9999602103764355	WITHOUT_CLASSIFICATION	3.9789623564531554E-5	DESIGN
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9986063021312529	WITHOUT_CLASSIFICATION	0.0013936978687471317	DESIGN
look for a proxy	WITHOUT_CLASSIFICATION	0.9998134999886028	WITHOUT_CLASSIFICATION	1.8650001139708245E-4	DESIGN
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.999654144359271	WITHOUT_CLASSIFICATION	3.4585564072901894E-4	DESIGN
its the given optional object	WITHOUT_CLASSIFICATION	0.9998633098877654	WITHOUT_CLASSIFICATION	1.366901122345386E-4	DESIGN
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9992165706319319	WITHOUT_CLASSIFICATION	7.834293680681567E-4	DESIGN
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9989324022444298	WITHOUT_CLASSIFICATION	0.0010675977555702546	DESIGN
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9946449772899331	WITHOUT_CLASSIFICATION	0.005355022710066871	DESIGN
will be ignored using the existing entry instead	WITHOUT_CLASSIFICATION	0.9995363789365971	WITHOUT_CLASSIFICATION	4.636210634028917E-4	DESIGN
key is an entity involved with the operation performed by the listener value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999992918035858	WITHOUT_CLASSIFICATION	7.081964141698275E-7	DESIGN
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9949351621576349	WITHOUT_CLASSIFICATION	0.005064837842365127	DESIGN
get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.999606463500267	WITHOUT_CLASSIFICATION	3.935364997328758E-4	DESIGN
ok in normal hibernate usage to delete a detached entity jpa however forbids it thus this is a hook for hem to affect this behavior	WITHOUT_CLASSIFICATION	0.9999667563608473	WITHOUT_CLASSIFICATION	3.324363915266767E-5	DESIGN
the entry will be removed after the flush and will no longer override the stale snapshot this is now handled by removeentity() in entitydeleteaction persistencecontext.removedatabasesnapshot(key)	WITHOUT_CLASSIFICATION	0.9984165981678667	WITHOUT_CLASSIFICATION	0.001583401832133368	DESIGN
addinitializedcollection(collection persister id)	WITHOUT_CLASSIFICATION	0.9987589719624683	WITHOUT_CLASSIFICATION	0.0012410280375317083	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9998071043162916	WITHOUT_CLASSIFICATION	1.928956837082912E-4	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9998071043162916	WITHOUT_CLASSIFICATION	1.928956837082912E-4	DESIGN
|| oj.getjoinable().consumescollectionalias()	WITHOUT_CLASSIFICATION	0.9997384767233751	WITHOUT_CLASSIFICATION	2.6152327662483653E-4	DESIGN
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9776261603771581	WITHOUT_CLASSIFICATION	0.02237383962284185	DESIGN
code to handle subclasses of topclass	WITHOUT_CLASSIFICATION	0.999503436079702	WITHOUT_CLASSIFICATION	4.965639202978666E-4	DESIGN
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999749153425355	WITHOUT_CLASSIFICATION	2.50846574644425E-5	DESIGN
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999783932914681	WITHOUT_CLASSIFICATION	2.1606708531941583E-5	DESIGN
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9925059020942866	WITHOUT_CLASSIFICATION	0.007494097905713443	DESIGN
synchronized to avoid multi-thread access issues defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9997732300328389	WITHOUT_CLASSIFICATION	2.2676996716114377E-4	DESIGN
allows various loaders (ok mainly the queryloader ) to check whether scrolling of their result set should be allowed. by default it is allowed.	WITHOUT_CLASSIFICATION	0.9997412747051615	WITHOUT_CLASSIFICATION	2.5872529483843493E-4	DESIGN
before adding to collection!	WITHOUT_CLASSIFICATION	0.9993220000881483	WITHOUT_CLASSIFICATION	6.779999118516731E-4	DESIGN
if the current depth is 0 the root thing being loaded is the many-to-many collection itself. here it is alright to use an inner join	WITHOUT_CLASSIFICATION	0.9999638421653666	WITHOUT_CLASSIFICATION	3.6157834633376294E-5	DESIGN
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999996896797984	WITHOUT_CLASSIFICATION	3.103202016394156E-7	DESIGN
simple because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element	WITHOUT_CLASSIFICATION	0.9997745622303884	WITHOUT_CLASSIFICATION	2.2543776961152999E-4	DESIGN
a composite key	WITHOUT_CLASSIFICATION	0.9989229513477595	WITHOUT_CLASSIFICATION	0.0010770486522404565	DESIGN
if no batch use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9998873895219967	WITHOUT_CLASSIFICATION	1.1261047800324114E-4	DESIGN
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9512261125338335	WITHOUT_CLASSIFICATION	0.048773887466166545	DESIGN
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9991817114552697	WITHOUT_CLASSIFICATION	8.182885447303197E-4	DESIGN
&& etype.isreferencetoprimarykey()	WITHOUT_CLASSIFICATION	0.9983752144745626	WITHOUT_CLASSIFICATION	0.0016247855254374753	DESIGN
it might still need to apply a collection ordering based on a many-to-many defined order-by	WITHOUT_CLASSIFICATION	0.9632468574046069	WITHOUT_CLASSIFICATION	0.03675314259539312	DESIGN
if a composite key use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching todo unnecessary for databases with ansi-style joins	WITHOUT_CLASSIFICATION	0.5129542877161618	WITHOUT_CLASSIFICATION	0.48704571228383825	DESIGN
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.997948630951003	WITHOUT_CLASSIFICATION	0.0020513690489969726	DESIGN
we found it	WITHOUT_CLASSIFICATION	0.9996386547646728	WITHOUT_CLASSIFICATION	3.613452353271525E-4	DESIGN
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999056573072725	WITHOUT_CLASSIFICATION	9.43426927274632E-5	DESIGN
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9996554803417042	WITHOUT_CLASSIFICATION	3.445196582958295E-4	DESIGN
note unlike all other loaders this one is not multithreaded or cacheable!!	WITHOUT_CLASSIFICATION	0.98135001231649	WITHOUT_CLASSIFICATION	0.018649987683509974	DESIGN
the user visible aliases which are unknown to the superclass these are not the actual "physical" sql aliases	WITHOUT_CLASSIFICATION	0.9999998615093794	WITHOUT_CLASSIFICATION	1.384906207161698E-7	DESIGN
root entity comes last	WITHOUT_CLASSIFICATION	0.9987485884524662	WITHOUT_CLASSIFICATION	0.0012514115475338163	DESIGN
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999748223454049	WITHOUT_CLASSIFICATION	2.5177654595054837E-5	DESIGN
alias may be null early exit	WITHOUT_CLASSIFICATION	0.9998838360701405	WITHOUT_CLASSIFICATION	1.1616392985946802E-4	DESIGN
if it is a compound path	WITHOUT_CLASSIFICATION	0.9996444567671385	WITHOUT_CLASSIFICATION	3.555432328615567E-4	DESIGN
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9987170163579456	WITHOUT_CLASSIFICATION	0.0012829836420544189	DESIGN
if its the root criteria we are done	WITHOUT_CLASSIFICATION	0.9999574230762246	WITHOUT_CLASSIFICATION	4.2576923775461426E-5	DESIGN
otherwise recurse	WITHOUT_CLASSIFICATION	0.999482529349454	WITHOUT_CLASSIFICATION	5.174706505458801E-4	DESIGN
the criteria instance	WITHOUT_CLASSIFICATION	0.9998252092763877	WITHOUT_CLASSIFICATION	1.7479072361236377E-4	DESIGN
the entity name	WITHOUT_CLASSIFICATION	0.9994184830736811	WITHOUT_CLASSIFICATION	5.815169263188707E-4	DESIGN
not found in inner query try the outer query	WITHOUT_CLASSIFICATION	0.9999230621414951	WITHOUT_CLASSIFICATION	7.69378585048377E-5	DESIGN
not found in inner query try the outer query	WITHOUT_CLASSIFICATION	0.9999230621414951	WITHOUT_CLASSIFICATION	7.69378585048377E-5	DESIGN
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999418911460234	WITHOUT_CLASSIFICATION	5.81088539765509E-5	DESIGN
should never happen i think	WITHOUT_CLASSIFICATION	0.9912378350787202	WITHOUT_CLASSIFICATION	0.008762164921279736	DESIGN
detect discriminator values	WITHOUT_CLASSIFICATION	0.9998014144313363	WITHOUT_CLASSIFICATION	1.9858556866362342E-4	DESIGN
convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9987836317874227	WITHOUT_CLASSIFICATION	0.0012163682125772596	DESIGN
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9998469108053879	WITHOUT_CLASSIFICATION	1.5308919461206322E-4	DESIGN
it does not refer to an alias of a projection look for a property	WITHOUT_CLASSIFICATION	0.9997209439588458	WITHOUT_CLASSIFICATION	2.790560411541773E-4	DESIGN
otherwise this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9972428806316722	WITHOUT_CLASSIFICATION	0.0027571193683277404	DESIGN
currently not cachable if autodiscover types is in effect (e.g. "select ")	WITHOUT_CLASSIFICATION	0.9990397354757322	WITHOUT_CLASSIFICATION	9.602645242677175E-4	DESIGN
private final string[] sqlaliases private final string[] sqlaliassuffixes	WITHOUT_CLASSIFICATION	0.9995234355048184	WITHOUT_CLASSIFICATION	4.765644951816593E-4	DESIGN
this is only needed (afaict) for resulttransformer processing	WITHOUT_CLASSIFICATION	0.9986382493304617	WITHOUT_CLASSIFICATION	0.0013617506695382327	DESIGN
determine if the collection elements are entities	WITHOUT_CLASSIFICATION	0.9999505686633423	WITHOUT_CLASSIFICATION	4.943133665759972E-5	DESIGN
build an array with indices equal to the total number of actual returns in the result hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999689116105325	WITHOUT_CLASSIFICATION	3.108838946753489E-5	DESIGN
replace {.} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9995209103189514	WITHOUT_CLASSIFICATION	4.7908968104853244E-4	DESIGN
no additional open braces found in the string append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999549817136395	WITHOUT_CLASSIFICATION	4.501828636043493E-5	DESIGN
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9996264049736708	WITHOUT_CLASSIFICATION	3.735950263291404E-4	DESIGN
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999925650821805	WITHOUT_CLASSIFICATION	7.4349178194592605E-6	DESIGN
passing through anything we do not know to support jdbc escape sequences hb-898	WITHOUT_CLASSIFICATION	0.9993943565084408	WITHOUT_CLASSIFICATION	6.056434915591975E-4	DESIGN
passing through anything we do not know to support jdbc escape sequences hb-898	WITHOUT_CLASSIFICATION	0.9993943565084408	WITHOUT_CLASSIFICATION	6.056434915591975E-4	DESIGN
the current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999550029134353	WITHOUT_CLASSIFICATION	4.49970865646997E-5	DESIGN
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9984684008146129	WITHOUT_CLASSIFICATION	0.0015315991853870781	DESIGN
possibly handle something parameters for the query ?	WITHOUT_CLASSIFICATION	0.999929390402826	WITHOUT_CLASSIFICATION	7.060959717406271E-5	DESIGN
let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999064402983014	WITHOUT_CLASSIFICATION	9.355970169848522E-5	DESIGN
private final list persisters = new arraylist()	WITHOUT_CLASSIFICATION	0.9999216297716355	WITHOUT_CLASSIFICATION	7.837022836451535E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9992285899396746	WITHOUT_CLASSIFICATION	7.714100603253817E-4	DESIGN
note early exit!	WITHOUT_CLASSIFICATION	0.9991870484509001	WITHOUT_CLASSIFICATION	8.12951549099958E-4	DESIGN
private final list scalartypes = new arraylist() private final list scalarcolumnaliases = new arraylist()	WITHOUT_CLASSIFICATION	0.9999726277062964	WITHOUT_CLASSIFICATION	2.7372293703629666E-5	DESIGN
now process the returns	WITHOUT_CLASSIFICATION	0.9999196924170609	WITHOUT_CLASSIFICATION	8.03075829390489E-5	DESIGN
private list collectionowneraliases = new arraylist() private list collectionaliases = new arraylist() private list collectionpersisters = new arraylist() private list collectionresults = new arraylist()	WITHOUT_CLASSIFICATION	0.9999222536788415	WITHOUT_CLASSIFICATION	7.774632115852688E-5	DESIGN
already been processed	WITHOUT_CLASSIFICATION	0.9984733275993907	WITHOUT_CLASSIFICATION	0.001526672400609295	DESIGN
already been processed	WITHOUT_CLASSIFICATION	0.9984733275993907	WITHOUT_CLASSIFICATION	0.001526672400609295	DESIGN
make sure the owner alias is known	WITHOUT_CLASSIFICATION	0.9999953195523635	WITHOUT_CLASSIFICATION	4.680447636473147E-6	DESIGN
first break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9990541655532752	WITHOUT_CLASSIFICATION	9.458344467248642E-4	DESIGN
scalarcolumnaliases.add( typereturn.getcolumnalias() ) scalartypes.add( typereturn.gettype() )	WITHOUT_CLASSIFICATION	0.9980080635409448	WITHOUT_CLASSIFICATION	0.0019919364590551686	DESIGN
if this return's alias has not been processed yet do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999620123095505	WITHOUT_CLASSIFICATION	3.798769044944865E-5	DESIGN
collectionowneraliases.add( owneralias )	WITHOUT_CLASSIFICATION	0.9980080635409448	WITHOUT_CLASSIFICATION	0.0019919364590551686	DESIGN
for merging of versioned entities we consider the version having been changed only when 1) the two version values are different and 2) the target actually represents database state! this second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.999635849478575	WITHOUT_CLASSIFICATION	3.641505214250781E-4	DESIGN
this is the second pass through on a merge op so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9992779892919598	WITHOUT_CLASSIFICATION	7.220107080402148E-4	DESIGN
early exit	WITHOUT_CLASSIFICATION	0.9999502189645638	WITHOUT_CLASSIFICATION	4.978103543631844E-5	DESIGN
cascade-save to collections after the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999427913996273	WITHOUT_CLASSIFICATION	5.720860037273508E-5	DESIGN
initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9982471507940122	WITHOUT_CLASSIFICATION	0.0017528492059877847	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9994796568484607	WITHOUT_CLASSIFICATION	5.203431515392253E-4	DESIGN
currently only the hibernate-supplied dbtimestamptype is supported here	WITHOUT_CLASSIFICATION	0.9990319397462318	WITHOUT_CLASSIFICATION	9.680602537680889E-4	DESIGN
this is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9836311491214548	WITHOUT_CLASSIFICATION	0.016368850878545223	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.999041403768988	WITHOUT_CLASSIFICATION	9.585962310119758E-4	DESIGN
not so sure this is even valid subtree. but if it was it'd represent two unrelated table references	WITHOUT_CLASSIFICATION	0.9990161940162858	WITHOUT_CLASSIFICATION	9.838059837141908E-4	DESIGN
(not (gt a b) ) => (le a b)	WITHOUT_CLASSIFICATION	0.8568066616637647	WITHOUT_CLASSIFICATION	0.1431933383362352	DESIGN
private type[] sqlresulttypes	WITHOUT_CLASSIFICATION	0.9967106529427714	WITHOUT_CLASSIFICATION	0.0032893470572287176	DESIGN
include the discriminator and class-level where but not filters	WITHOUT_CLASSIFICATION	0.9999817394815628	WITHOUT_CLASSIFICATION	1.8260518437246324E-5	DESIGN
sqlresulttypes = selectclause.getsqlresulttypes()	WITHOUT_CLASSIFICATION	0.9999016102276331	WITHOUT_CLASSIFICATION	9.838977236689811E-5	DESIGN
by default	WITHOUT_CLASSIFICATION	0.9999636102051697	WITHOUT_CLASSIFICATION	3.638979483024362E-5	DESIGN
this is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9993320396017188	WITHOUT_CLASSIFICATION	6.679603982812002E-4	DESIGN
-- loader implementation --	WITHOUT_CLASSIFICATION	0.9997802961607458	WITHOUT_CLASSIFICATION	2.197038392541542E-4	DESIGN
-- loader overrides --	WITHOUT_CLASSIFICATION	0.9995598084273836	WITHOUT_CLASSIFICATION	4.401915726164865E-4	DESIGN
(not (is_null a b) ) => (is_not_null a b)	WITHOUT_CLASSIFICATION	0.9220814551245498	WITHOUT_CLASSIFICATION	0.07791854487545025	DESIGN
none because its the requested lock mode not the actual!	WITHOUT_CLASSIFICATION	0.9997779921904171	WITHOUT_CLASSIFICATION	2.2200780958284478E-4	DESIGN
meant to handle dynamic instantiation queries	WITHOUT_CLASSIFICATION	0.9995176855933589	WITHOUT_CLASSIFICATION	4.823144066411779E-4	DESIGN
--- query translator methods ---	WITHOUT_CLASSIFICATION	0.9997698130670263	WITHOUT_CLASSIFICATION	2.301869329735894E-4	DESIGN
-- implementation private methods --	WITHOUT_CLASSIFICATION	0.9982060297756995	WITHOUT_CLASSIFICATION	0.001793970224300525	DESIGN
deduplicate unique constraints sharing the same columns this is needed by hibernate annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999982457127152	WITHOUT_CLASSIFICATION	1.7542872847845284E-6	DESIGN
try to find out the name of the primary key to create it as identity if the identitygenerator is used	WITHOUT_CLASSIFICATION	0.9980482950515934	WITHOUT_CLASSIFICATION	0.001951704948406594	DESIGN
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9990082873994108	WITHOUT_CLASSIFICATION	9.917126005892195E-4	DESIGN
prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999995306894923	WITHOUT_CLASSIFICATION	4.693105076392998E-7	DESIGN
used also for generation of fk names!	WITHOUT_CLASSIFICATION	0.7618635743902661	WITHOUT_CLASSIFICATION	0.23813642560973391	DESIGN
usually useless	WITHOUT_CLASSIFICATION	0.9992769290405926	WITHOUT_CLASSIFICATION	7.230709594074642E-4	DESIGN
added this caching as i noticed that gettype() is being called multiple times	WITHOUT_CLASSIFICATION	0.9961103016387202	WITHOUT_CLASSIFICATION	0.003889698361279954	DESIGN
do not add unique constraint on db not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.997403974207979	WITHOUT_CLASSIFICATION	0.002596025792021072	DESIGN
for backward compatibility disable this	WITHOUT_CLASSIFICATION	0.9997914347754461	WITHOUT_CLASSIFICATION	2.0856522455388159E-4	DESIGN
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.998506557772805	WITHOUT_CLASSIFICATION	0.0014934422271950844	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.998715071279816	WITHOUT_CLASSIFICATION	0.0012849287201841142	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.998715071279816	WITHOUT_CLASSIFICATION	0.0012849287201841142	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999786437336867	WITHOUT_CLASSIFICATION	2.1356266313355998E-5	DESIGN
primary key constraint	WITHOUT_CLASSIFICATION	0.9968543413285834	WITHOUT_CLASSIFICATION	0.0031456586714166553	DESIGN
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9998309939435743	WITHOUT_CLASSIFICATION	1.690060564257505E-4	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9999684578469453	WITHOUT_CLASSIFICATION	3.154215305467345E-5	DESIGN
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9936278828822473	WITHOUT_CLASSIFICATION	0.006372117117752668	DESIGN
an identifier mapper => getkey will be included in the getnonduplicatedpropertyiterator() and checked later so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9991686831353701	WITHOUT_CLASSIFICATION	8.313168646298499E-4	DESIGN
if the hibernate-mapping did not specify a schema/catalog use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping or as params they will already be initialized and will override the values set here (they are in identifiergeneratorproperties)	WITHOUT_CLASSIFICATION	0.9998499604698595	WITHOUT_CLASSIFICATION	1.500395301403506E-4	DESIGN
pass the entity-name if not a collection-id	WITHOUT_CLASSIFICATION	0.9999192863434749	WITHOUT_CLASSIFICATION	8.071365652495389E-5	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999786437336867	WITHOUT_CLASSIFICATION	2.1356266313355998E-5	DESIGN
primary key constraint	WITHOUT_CLASSIFICATION	0.9968543413285834	WITHOUT_CLASSIFICATION	0.0031456586714166553	DESIGN
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.999960155088888	WITHOUT_CLASSIFICATION	3.984491111192787E-5	DESIGN
needed to satisfy keyvalue	WITHOUT_CLASSIFICATION	0.9993861283415842	WITHOUT_CLASSIFICATION	6.138716584157783E-4	DESIGN
empty means no scoping	WITHOUT_CLASSIFICATION	0.9996395097689988	WITHOUT_CLASSIFICATION	3.6049023100110316E-4	DESIGN
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999349678640388	WITHOUT_CLASSIFICATION	6.503213596118843E-5	DESIGN
if it is a formula index use the element columns in the pk	WITHOUT_CLASSIFICATION	0.9999654355633262	WITHOUT_CLASSIFICATION	3.456443667381271E-5	DESIGN
don't create a unique key 'cos some databases don't like a uk on nullable columns	WITHOUT_CLASSIFICATION	0.999372138401629	WITHOUT_CLASSIFICATION	6.278615983711096E-4	DESIGN
arraylist list = new arraylist()list.addall( getkey().getconstraintcolumns() )list.addall( getindex().getconstraintcolumns() )getcollectiontable().createuniquekey(list)	WITHOUT_CLASSIFICATION	0.9999814203937959	WITHOUT_CLASSIFICATION	1.857960620413345E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.9998062775210389	WITHOUT_CLASSIFICATION	1.937224789611467E-4	DESIGN
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.99985807798387	WITHOUT_CLASSIFICATION	1.4192201613004923E-4	DESIGN
todo we could just return all false	WITHOUT_CLASSIFICATION	0.9319136821349047	DESIGN	0.06808631786509532	WITHOUT_CLASSIFICATION
the case of a foreign key to something other than the pk is handled in createpropertyrefconstraints	WITHOUT_CLASSIFICATION	0.9984189732770417	WITHOUT_CLASSIFICATION	0.0015810267229583732	DESIGN
todo we could just return all false	WITHOUT_CLASSIFICATION	0.9319136821349047	DESIGN	0.06808631786509532	WITHOUT_CLASSIFICATION
if the property mapping consists of all formulas make it non-updateable	WITHOUT_CLASSIFICATION	0.9998120874620029	WITHOUT_CLASSIFICATION	1.8791253799713627E-4	DESIGN
columnupdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9997384767233751	WITHOUT_CLASSIFICATION	2.6152327662483653E-4	DESIGN
if the property mapping consists of all formulas make it insertable	WITHOUT_CLASSIFICATION	0.9998120874620029	WITHOUT_CLASSIFICATION	1.8791253799713627E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999743359598825	WITHOUT_CLASSIFICATION	2.566404011749647E-4	DESIGN
expected type is intrinsic here	WITHOUT_CLASSIFICATION	0.999626793501454	WITHOUT_CLASSIFICATION	3.7320649854602586E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9998062775210389	WITHOUT_CLASSIFICATION	1.937224789611467E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9998062775210389	WITHOUT_CLASSIFICATION	1.937224789611467E-4	DESIGN
return memberpersister.getpropertytype(propertyname)	WITHOUT_CLASSIFICATION	0.9994948615909314	WITHOUT_CLASSIFICATION	5.051384090686703E-4	DESIGN
return memberpersister.tocolumns(alias propertyname)	WITHOUT_CLASSIFICATION	0.9994956377859142	WITHOUT_CLASSIFICATION	5.043622140858936E-4	DESIGN
return memberpersister.gettype()	WITHOUT_CLASSIFICATION	0.9994948615909314	WITHOUT_CLASSIFICATION	5.051384090686703E-4	DESIGN
&& !indexisformula	WITHOUT_CLASSIFICATION	0.9986020403797802	WITHOUT_CLASSIFICATION	0.001397959620219849	DESIGN
return !isonetomany()	WITHOUT_CLASSIFICATION	0.9990014624892566	WITHOUT_CLASSIFICATION	9.985375107434027E-4	DESIGN
instanceof associationtype	WITHOUT_CLASSIFICATION	0.992734766263432	WITHOUT_CLASSIFICATION	0.007265233736567988	DESIGN
we need to determine the best way to know that two joinables represent a single many-to-many	WITHOUT_CLASSIFICATION	0.6305868608869081	WITHOUT_CLASSIFICATION	0.3694131391130919	DESIGN
strip leading ''	WITHOUT_CLASSIFICATION	0.9996709552932276	WITHOUT_CLASSIFICATION	3.290447067725135E-4	DESIGN
public boolean issubselectloadable()	WITHOUT_CLASSIFICATION	0.9985467106102934	WITHOUT_CLASSIFICATION	0.0014532893897066738	DESIGN
key	WITHOUT_CLASSIFICATION	0.9998621922344033	WITHOUT_CLASSIFICATION	1.3780776559667004E-4	DESIGN
columns	WITHOUT_CLASSIFICATION	0.9999506065897931	WITHOUT_CLASSIFICATION	4.939341020693168E-5	DESIGN
sql statements	WITHOUT_CLASSIFICATION	0.9999064438907109	WITHOUT_CLASSIFICATION	9.355610928909531E-5	DESIGN
extra information about the element type	WITHOUT_CLASSIFICATION	0.9997237264464796	WITHOUT_CLASSIFICATION	2.7627355352045576E-4	DESIGN
types	WITHOUT_CLASSIFICATION	0.9997689559511168	WITHOUT_CLASSIFICATION	2.3104404888319216E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999786437336867	WITHOUT_CLASSIFICATION	2.1356266313355998E-5	DESIGN
private final string unquotedidentifiercolumnname	WITHOUT_CLASSIFICATION	0.9996142409588175	WITHOUT_CLASSIFICATION	3.8575904118247876E-4	DESIGN
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9998167241171273	WITHOUT_CLASSIFICATION	1.8327588287275746E-4	DESIGN
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9998355301750909	WITHOUT_CLASSIFICATION	1.6446982490903356E-4	DESIGN
nativesql collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999285934052229	WITHOUT_CLASSIFICATION	7.14065947770328E-5	DESIGN
unquotedkeycolumnnames = stringhelper.unquote(keycolumnaliases)	WITHOUT_CLASSIFICATION	0.9999016102276331	WITHOUT_CLASSIFICATION	9.838977236689811E-5	DESIGN
element	WITHOUT_CLASSIFICATION	0.9998136833010587	WITHOUT_CLASSIFICATION	1.8631669894134516E-4	DESIGN
nativesql collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999034557161512	WITHOUT_CLASSIFICATION	9.654428384871511E-5	DESIGN
index and row select	WITHOUT_CLASSIFICATION	0.9999837044859456	WITHOUT_CLASSIFICATION	1.6295514054356013E-5	DESIGN
nativesql collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.999978552123031	WITHOUT_CLASSIFICATION	2.1447876968946477E-5	DESIGN
unquotedidentifiercolumnname = identifiercolumnalias	WITHOUT_CLASSIFICATION	0.9999016102276331	WITHOUT_CLASSIFICATION	9.838977236689811E-5	DESIGN
unquotedidentifiercolumnname = null	WITHOUT_CLASSIFICATION	0.999926453454403	WITHOUT_CLASSIFICATION	7.35465455969676E-5	DESIGN
generate the sql	WITHOUT_CLASSIFICATION	0.9998634442880319	WITHOUT_CLASSIFICATION	1.365557119682262E-4	DESIGN
for non-arrays we don't need to know the element class elementtype.returnedclass()	WITHOUT_CLASSIFICATION	0.9978248192830896	WITHOUT_CLASSIFICATION	0.002175180716910437	DESIGN
not all classpersisters implement propertymapping!	WITHOUT_CLASSIFICATION	0.9818298510990092	WITHOUT_CLASSIFICATION	0.018170148900990817	DESIGN
handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9957460232036675	WITHOUT_CLASSIFICATION	0.004253976796332589	DESIGN
handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9963696659856619	WITHOUT_CLASSIFICATION	0.0036303340143381637	DESIGN
if there is a user-specified loader return that todo filters!?	WITHOUT_CLASSIFICATION	0.837401593736377	WITHOUT_CLASSIFICATION	0.16259840626362296	DESIGN
take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9970961997250385	WITHOUT_CLASSIFICATION	0.0029038002749615537	DESIGN
strip leading ''	WITHOUT_CLASSIFICATION	0.9996709552932276	WITHOUT_CLASSIFICATION	3.290447067725135E-4	DESIGN
run a subquery loader	WITHOUT_CLASSIFICATION	0.9975898807263447	WITHOUT_CLASSIFICATION	0.0024101192736553753	DESIGN
needed by arrays	WITHOUT_CLASSIFICATION	0.9997856287605015	WITHOUT_CLASSIFICATION	2.1437123949851847E-4	DESIGN
todo something with formulas	WITHOUT_CLASSIFICATION	0.9301882548820793	DESIGN	0.06981174511792067	WITHOUT_CLASSIFICATION
an assertion	WITHOUT_CLASSIFICATION	0.9996939331601272	WITHOUT_CLASSIFICATION	3.060668398728595E-4	DESIGN
remove all the old entries	WITHOUT_CLASSIFICATION	0.9998391259618602	WITHOUT_CLASSIFICATION	1.6087403813980336E-4	DESIGN
create all the new entries	WITHOUT_CLASSIFICATION	0.9999473872271465	WITHOUT_CLASSIFICATION	5.261277285344865E-5	DESIGN
&& !indexisformula	WITHOUT_CLASSIFICATION	0.9986020403797802	WITHOUT_CLASSIFICATION	0.001397959620219849	DESIGN
&& !indexisformula	WITHOUT_CLASSIFICATION	0.9986020403797802	WITHOUT_CLASSIFICATION	0.001397959620219849	DESIGN
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999636658636246	WITHOUT_CLASSIFICATION	3.633413637550974E-5	DESIGN
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999704144428736	WITHOUT_CLASSIFICATION	2.9585557126374127E-5	DESIGN
==elementtype ??	WITHOUT_CLASSIFICATION	0.9980524180915863	WITHOUT_CLASSIFICATION	0.0019475819084136814	DESIGN
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999874165375674	WITHOUT_CLASSIFICATION	1.2583462432592027E-5	DESIGN
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9988656911185216	WITHOUT_CLASSIFICATION	0.0011343088814783247	DESIGN
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9960906577436786	WITHOUT_CLASSIFICATION	0.003909342256321462	DESIGN
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9516557542132177	WITHOUT_CLASSIFICATION	0.04834424578678226	DESIGN
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999874198677454	WITHOUT_CLASSIFICATION	1.2580132254558088E-5	DESIGN
buf.append( selectfragment( lhsalias "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9980510273576423	WITHOUT_CLASSIFICATION	0.0019489726423577028	DESIGN
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9998579656797075	WITHOUT_CLASSIFICATION	1.4203432029243122E-4	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9997174390251037	WITHOUT_CLASSIFICATION	2.8256097489637354E-4	DESIGN
private final string roottablename	WITHOUT_CLASSIFICATION	0.9996142409588175	WITHOUT_CLASSIFICATION	3.8575904118247876E-4	DESIGN
initialization	WITHOUT_CLASSIFICATION	0.9999357926899087	WITHOUT_CLASSIFICATION	6.420731009131308E-5	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999786437336867	WITHOUT_CLASSIFICATION	2.1356266313355998E-5	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9997174390251037	WITHOUT_CLASSIFICATION	2.8256097489637354E-4	DESIGN
execute the sql	WITHOUT_CLASSIFICATION	0.9999424609833395	WITHOUT_CLASSIFICATION	5.7539016660430196E-5	DESIGN
this could also just be true all the time	WITHOUT_CLASSIFICATION	0.980504588271441	WITHOUT_CLASSIFICATION	0.0194954117285589	DESIGN
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9998136197144172	WITHOUT_CLASSIFICATION	1.86380285582675E-4	DESIGN
todo check this.	WITHOUT_CLASSIFICATION	0.6013322822896839	WITHOUT_CLASSIFICATION	0.398667717710316	DESIGN
initialization	WITHOUT_CLASSIFICATION	0.9999357926899087	WITHOUT_CLASSIFICATION	6.420731009131308E-5	DESIGN
properties of this class including inherited properties	WITHOUT_CLASSIFICATION	0.9988356681212923	WITHOUT_CLASSIFICATION	0.0011643318787076062	DESIGN
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999053325670673	WITHOUT_CLASSIFICATION	9.466743293272711E-5	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9982537414573862	WITHOUT_CLASSIFICATION	0.0017462585426138003	DESIGN
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an sql case	WITHOUT_CLASSIFICATION	0.999964715355044	WITHOUT_CLASSIFICATION	3.528464495584095E-5	DESIGN
multitables	WITHOUT_CLASSIFICATION	0.999620800350095	WITHOUT_CLASSIFICATION	3.79199649905041E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999786437336867	WITHOUT_CLASSIFICATION	2.1356266313355998E-5	DESIGN
subclass closure properties	WITHOUT_CLASSIFICATION	0.9970165189848981	WITHOUT_CLASSIFICATION	0.0029834810151018396	DESIGN
subclasses	WITHOUT_CLASSIFICATION	0.99988631818224	WITHOUT_CLASSIFICATION	1.1368181775990174E-4	DESIGN
( (column) model.gettable().getprimarykey().getcolumniterator().next() ).getname()	WITHOUT_CLASSIFICATION	0.997662240337658	WITHOUT_CLASSIFICATION	0.0023377596623419903	DESIGN
( (column) sc.gettable().getprimarykey().getcolumniterator().next() ).getname()	WITHOUT_CLASSIFICATION	0.997662240337658	WITHOUT_CLASSIFICATION	0.0023377596623419903	DESIGN
don't need subclass tables because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9336823994182166	WITHOUT_CLASSIFICATION	0.06631760058178345	DESIGN
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9981945124980584	WITHOUT_CLASSIFICATION	0.0018054875019416162	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9997174390251037	WITHOUT_CLASSIFICATION	2.8256097489637354E-4	DESIGN
properties of this class including inherited properties	WITHOUT_CLASSIFICATION	0.9988356681212923	WITHOUT_CLASSIFICATION	0.0011643318787076062	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9982537414573862	WITHOUT_CLASSIFICATION	0.0017462585426138003	DESIGN
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9996961608463057	WITHOUT_CLASSIFICATION	3.0383915369433187E-4	DESIGN
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.999860302286083	WITHOUT_CLASSIFICATION	1.3969771391700138E-4	DESIGN
discriminator column	WITHOUT_CLASSIFICATION	0.9998241945412544	WITHOUT_CLASSIFICATION	1.7580545874562465E-4	DESIGN
initialization	WITHOUT_CLASSIFICATION	0.9999357926899087	WITHOUT_CLASSIFICATION	6.420731009131308E-5	DESIGN
private final map propertytablenumbersbyname = new hashmap()	WITHOUT_CLASSIFICATION	0.9999435413948278	WITHOUT_CLASSIFICATION	5.645860517226392E-5	DESIGN
class + table	WITHOUT_CLASSIFICATION	0.9999598177250464	WITHOUT_CLASSIFICATION	4.01822749535562E-5	DESIGN
discriminator	WITHOUT_CLASSIFICATION	0.9996209937370693	WITHOUT_CLASSIFICATION	3.7900626293077544E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9999072368563368	WITHOUT_CLASSIFICATION	9.276314366323609E-5	DESIGN
subclasses	WITHOUT_CLASSIFICATION	0.99988631818224	WITHOUT_CLASSIFICATION	1.1368181775990174E-4	DESIGN
execute the sql	WITHOUT_CLASSIFICATION	0.9999424609833395	WITHOUT_CLASSIFICATION	5.7539016660430196E-5	DESIGN
joins	WITHOUT_CLASSIFICATION	0.9997638717337012	WITHOUT_CLASSIFICATION	2.3612826629883864E-4	DESIGN
propertytablenumbersbyname.put( prop.getname() join )	WITHOUT_CLASSIFICATION	0.9998776971810905	WITHOUT_CLASSIFICATION	1.223028189093747E-4	DESIGN
access cached sql	WITHOUT_CLASSIFICATION	0.9999503097308915	WITHOUT_CLASSIFICATION	4.969026910851521E-5	DESIGN
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9976401433776808	WITHOUT_CLASSIFICATION	0.00235985662231931	DESIGN
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999360241109071	WITHOUT_CLASSIFICATION	6.397588909293489E-5	DESIGN
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9996920748022331	WITHOUT_CLASSIFICATION	3.079251977668819E-4	DESIGN
render the sql	WITHOUT_CLASSIFICATION	0.9997336950823529	WITHOUT_CLASSIFICATION	2.663049176471662E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999743359598825	WITHOUT_CLASSIFICATION	2.566404011749647E-4	DESIGN
moved up from abstractentitypersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9958175868902848	WITHOUT_CLASSIFICATION	0.004182413109715314	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995592003541517	WITHOUT_CLASSIFICATION	4.407996458482287E-4	DESIGN
the optional sql string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999943097379242	WITHOUT_CLASSIFICATION	5.69026207571006E-6	DESIGN
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9974298413863035	WITHOUT_CLASSIFICATION	0.002570158613696459	DESIGN
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9996832147773563	WITHOUT_CLASSIFICATION	3.167852226437346E-4	DESIGN
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9991883674326292	WITHOUT_CLASSIFICATION	8.116325673708125E-4	DESIGN
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9998964606853459	WITHOUT_CLASSIFICATION	1.0353931465415358E-4	DESIGN
sql strings	WITHOUT_CLASSIFICATION	0.9997162221674537	WITHOUT_CLASSIFICATION	2.837778325462489E-4	DESIGN
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999679028519931	WITHOUT_CLASSIFICATION	3.209714800688676E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9999072368563368	WITHOUT_CLASSIFICATION	9.276314366323609E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995592003541517	WITHOUT_CLASSIFICATION	4.407996458482287E-4	DESIGN
identifier	WITHOUT_CLASSIFICATION	0.9997701187397877	WITHOUT_CLASSIFICATION	2.2988126021235297E-4	DESIGN
version	WITHOUT_CLASSIFICATION	0.9993762631001906	WITHOUT_CLASSIFICATION	6.237368998094093E-4	DESIGN
where string	WITHOUT_CLASSIFICATION	0.9999235499234025	WITHOUT_CLASSIFICATION	7.645007659754405E-5	DESIGN
subclass property closure	WITHOUT_CLASSIFICATION	0.9832259874682004	WITHOUT_CLASSIFICATION	0.016774012531799536	DESIGN
before add -)	WITHOUT_CLASSIFICATION	0.9960960082987249	WITHOUT_CLASSIFICATION	0.0039039917012750115	DESIGN
handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9996050490938405	WITHOUT_CLASSIFICATION	3.9495090615940747E-4	DESIGN
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9997922641342609	WITHOUT_CLASSIFICATION	2.077358657389828E-4	DESIGN
note early exit here	WITHOUT_CLASSIFICATION	0.9994490263842729	WITHOUT_CLASSIFICATION	5.509736157271366E-4	DESIGN
object have been loaded with setreadonly(true) hhh-2236	WITHOUT_CLASSIFICATION	0.9988734075939517	WITHOUT_CLASSIFICATION	0.001126592406048326	DESIGN
note this assumes something about how propertyselectfragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9915121720002211	WITHOUT_CLASSIFICATION	0.008487827999778937	DESIGN
strip leading " "	WITHOUT_CLASSIFICATION	0.9999158998638883	WITHOUT_CLASSIFICATION	8.410013611180872E-5	DESIGN
if there is no resulting row return null	WITHOUT_CLASSIFICATION	0.9999863568382105	WITHOUT_CLASSIFICATION	1.3643161789598903E-5	DESIGN
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9994579475728108	WITHOUT_CLASSIFICATION	5.420524271891318E-4	DESIGN
null owner ok??	WITHOUT_CLASSIFICATION	0.9999334003362603	WITHOUT_CLASSIFICATION	6.659966373963014E-5	DESIGN
null sql means that the only lazy properties are shared pk one-to-one associations which are handled differently in the type#nullsafeget code	WITHOUT_CLASSIFICATION	0.999981669285417	WITHOUT_CLASSIFICATION	1.8330714583079438E-5	DESIGN
create a new from node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999515964269324	WITHOUT_CLASSIFICATION	4.840357306756704E-5	DESIGN
the difficulty here is exactly what do we update in order to force the version to be incremented in the db	WITHOUT_CLASSIFICATION	0.8806831647395874	WITHOUT_CLASSIFICATION	0.11931683526041253	DESIGN
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9994425426195801	WITHOUT_CLASSIFICATION	5.574573804198737E-4	DESIGN
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.998638143983476	WITHOUT_CLASSIFICATION	0.0013618560165240719	DESIGN
enable for hhh-440 which we don't like	WITHOUT_CLASSIFICATION	0.9998793582165858	WITHOUT_CLASSIFICATION	1.2064178341415595E-4	DESIGN
aliases	WITHOUT_CLASSIFICATION	0.9998404143890304	WITHOUT_CLASSIFICATION	1.595856109696818E-4	DESIGN
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9944641972549343	WITHOUT_CLASSIFICATION	0.00553580274506569	DESIGN
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9995009987321382	WITHOUT_CLASSIFICATION	4.99001267861875E-4	DESIGN
fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.997307130690549	WITHOUT_CLASSIFICATION	0.002692869309450956	DESIGN
embedded composite ids ( alias.idname1 alias.idname2 )	WITHOUT_CLASSIFICATION	0.8995688478153093	WITHOUT_CLASSIFICATION	0.10043115218469068	DESIGN
todo skip formulas?	WITHOUT_CLASSIFICATION	0.6885389082216955	WITHOUT_CLASSIFICATION	0.3114610917783046	DESIGN
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.999200089111226	WITHOUT_CLASSIFICATION	7.999108887739098E-4	DESIGN
do two passes for collection property-ref!	WITHOUT_CLASSIFICATION	0.983611293579736	WITHOUT_CLASSIFICATION	0.01638870642026406	DESIGN
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999490117446976	WITHOUT_CLASSIFICATION	5.098825530238599E-5	DESIGN
todo eventually rowidname[j]	WITHOUT_CLASSIFICATION	0.6458625195091985	WITHOUT_CLASSIFICATION	0.35413748049080157	DESIGN
this is a property of the table which we are updating	WITHOUT_CLASSIFICATION	0.9990328792501019	WITHOUT_CLASSIFICATION	9.671207498980892E-4	DESIGN
special shortcut for id properties skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999537903854391	WITHOUT_CLASSIFICATION	4.6209614561041845E-5	DESIGN
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9998989570101181	WITHOUT_CLASSIFICATION	1.0104298988190636E-4	DESIGN
nothing to do even if the operand is a parameter no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.6745894589500001	DESIGN	0.32541054104999984	WITHOUT_CLASSIFICATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9863872142725982	WITHOUT_CLASSIFICATION	0.013612785727401835	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9998869020742825	WITHOUT_CLASSIFICATION	1.1309792571745715E-4	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9996393547934507	WITHOUT_CLASSIFICATION	3.6064520654926536E-4	DESIGN
more specifically "? [op] datetime" 1) if the operator is minus the param needs to be of some datetime type 2) if the operator is plus the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9937259996952446	WITHOUT_CLASSIFICATION	0.0062740003047554935	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9998869020742825	WITHOUT_CLASSIFICATION	1.1309792571745715E-4	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9863872142725982	WITHOUT_CLASSIFICATION	0.013612785727401835	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9996393547934507	WITHOUT_CLASSIFICATION	3.6064520654926536E-4	DESIGN
add the primary key	WITHOUT_CLASSIFICATION	0.9998107009285219	WITHOUT_CLASSIFICATION	1.8929907147818302E-4	DESIGN
delegate already handles pk columns	WITHOUT_CLASSIFICATION	0.9999344620046834	WITHOUT_CLASSIFICATION	6.553799531657511E-5	DESIGN
we can't batch joined inserts especially not if it is an identity insert nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999780607944885	WITHOUT_CLASSIFICATION	2.193920551145908E-5	DESIGN
render the sql query	WITHOUT_CLASSIFICATION	0.999902850847971	WITHOUT_CLASSIFICATION	9.714915202899932E-5	DESIGN
write the values of fields onto the prepared statement - we must use the state at the time the insert was issued (cos of foreign key constraints). not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.999942851156713	WITHOUT_CLASSIFICATION	5.7148843286976784E-5	DESIGN
todo shouldnt inserts be expectations.none?	WITHOUT_CLASSIFICATION	0.5965555452901891	DESIGN	0.4034444547098109	WITHOUT_CLASSIFICATION
don't bother trying to update we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9998427635736973	WITHOUT_CLASSIFICATION	1.5723642630271822E-4	DESIGN
if all fields are null we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9992950530318301	WITHOUT_CLASSIFICATION	7.049469681699688E-4	DESIGN
there is probably a row there so try to update if no rows were updated we will find out	WITHOUT_CLASSIFICATION	0.9999772634910774	WITHOUT_CLASSIFICATION	2.2736508922602672E-5	DESIGN
note updates to joined tables can't be batched	WITHOUT_CLASSIFICATION	0.9975191207870214	WITHOUT_CLASSIFICATION	0.002480879212978599	DESIGN
starting index	WITHOUT_CLASSIFICATION	0.999850935991142	WITHOUT_CLASSIFICATION	1.4906400885794017E-4	DESIGN
now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999430611200583	WITHOUT_CLASSIFICATION	5.6938879941716744E-5	DESIGN
write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9996534965517567	WITHOUT_CLASSIFICATION	3.4650344824331563E-4	DESIGN
render the sql query	WITHOUT_CLASSIFICATION	0.999902850847971	WITHOUT_CLASSIFICATION	9.714915202899932E-5	DESIGN
do the key. the key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.999546845474341	WITHOUT_CLASSIFICATION	4.531545256590261E-4	DESIGN
we should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.998717684876821	WITHOUT_CLASSIFICATION	0.0012823151231789022	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9870365236860078	WITHOUT_CLASSIFICATION	0.012963476313992103	DESIGN
note dirtyfields==null means we had no snapshot and we couldn't get one using select-before-update oldfields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyfields)	WITHOUT_CLASSIFICATION	0.9531468397358566	WITHOUT_CLASSIFICATION	0.04685316026414338	DESIGN
more specifically "datetime [op] ?" 1) if the operator is minus we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is plus the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999324194366543	WITHOUT_CLASSIFICATION	6.758056334562267E-5	DESIGN
for the case of dynamic-update="true" we need to generate the update sql	WITHOUT_CLASSIFICATION	0.9997057269685348	WITHOUT_CLASSIFICATION	2.942730314652473E-4	DESIGN
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.8529556021189787	DESIGN	0.14704439788102125	WITHOUT_CLASSIFICATION
for the case of dynamic-update="false" or no snapshot we use the static sql	WITHOUT_CLASSIFICATION	0.9999108106325368	WITHOUT_CLASSIFICATION	8.918936746307329E-5	DESIGN
if not "get" then try "is"	WITHOUT_CLASSIFICATION	0.9993916219181613	WITHOUT_CLASSIFICATION	6.083780818385895E-4	DESIGN
now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9990027554708807	WITHOUT_CLASSIFICATION	9.972445291192525E-4	DESIGN
for the case of dynamic-insert="true" we need to generate the insert sql	WITHOUT_CLASSIFICATION	0.9997325787212361	WITHOUT_CLASSIFICATION	2.674212787638984E-4	DESIGN
for the case of dynamic-insert="true" we need to generate the insert sql	WITHOUT_CLASSIFICATION	0.9997325787212361	WITHOUT_CLASSIFICATION	2.674212787638984E-4	DESIGN
for the case of dynamic-insert="false" use the static sql	WITHOUT_CLASSIFICATION	0.9996007411300512	WITHOUT_CLASSIFICATION	3.992588699488961E-4	DESIGN
for the case of dynamic-insert="false" use the static sql	WITHOUT_CLASSIFICATION	0.9996007411300512	WITHOUT_CLASSIFICATION	3.992588699488961E-4	DESIGN
not supported	WITHOUT_CLASSIFICATION	0.9982692128943533	WITHOUT_CLASSIFICATION	0.001730787105646597	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9870365236860078	WITHOUT_CLASSIFICATION	0.012963476313992103	DESIGN
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9984061648074546	WITHOUT_CLASSIFICATION	0.0015938351925454208	DESIGN
otherwise utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9995907151698491	WITHOUT_CLASSIFICATION	4.092848301508903E-4	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9940240841205148	WITHOUT_CLASSIFICATION	0.005975915879485276	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9940240841205148	WITHOUT_CLASSIFICATION	0.005975915879485276	DESIGN
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999959535545907	WITHOUT_CLASSIFICATION	4.0464454094062885E-6	DESIGN
notice that we skip the first table it is the driving table!	WITHOUT_CLASSIFICATION	0.999971514332278	WITHOUT_CLASSIFICATION	2.8485667721994523E-5	DESIGN
we can inner join to superclass tables (the row must be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.999557999749696	WITHOUT_CLASSIFICATION	4.420002503039902E-4	DESIGN
skip the driving table	WITHOUT_CLASSIFICATION	0.9998893188001491	WITHOUT_CLASSIFICATION	1.1068119985087289E-4	DESIGN
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.7679681622646812	WITHOUT_CLASSIFICATION	0.2320318377353188	DESIGN
here we work under the following assumptions ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime always results in a double 3) datetime - {something other than datetime} always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.99999119944784	WITHOUT_CLASSIFICATION	8.80055215992834E-6	DESIGN
render the where and from parts	WITHOUT_CLASSIFICATION	0.9992418966654122	WITHOUT_CLASSIFICATION	7.581033345878123E-4	DESIGN
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.946772919304701	WITHOUT_CLASSIFICATION	0.05322708069529899	DESIGN
now render the joins	WITHOUT_CLASSIFICATION	0.999602341685887	WITHOUT_CLASSIFICATION	3.976583141130229E-4	DESIGN
this will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.99901452873028	WITHOUT_CLASSIFICATION	9.854712697200745E-4	DESIGN
now render the select clause	WITHOUT_CLASSIFICATION	0.9998333553469639	WITHOUT_CLASSIFICATION	1.666446530361384E-4	DESIGN
now tie it all together	WITHOUT_CLASSIFICATION	0.9997808821383218	WITHOUT_CLASSIFICATION	2.1911786167815077E-4	DESIGN
insert/update/delete sql	WITHOUT_CLASSIFICATION	0.9996157940674013	WITHOUT_CLASSIFICATION	3.8420593259870696E-4	DESIGN
select sql	WITHOUT_CLASSIFICATION	0.9999299063691164	WITHOUT_CLASSIFICATION	7.009363088359727E-5	DESIGN
no need to check laziness dirty checking handles that	WITHOUT_CLASSIFICATION	0.8731923556351577	DESIGN	0.1268076443648422	WITHOUT_CLASSIFICATION
fully resolve the map reference create implicit joins.	WITHOUT_CLASSIFICATION	0.9984421156286218	WITHOUT_CLASSIFICATION	0.001557884371378125	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9804832059639135	WITHOUT_CLASSIFICATION	0.01951679403608646	DESIGN
the basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999651010253278	WITHOUT_CLASSIFICATION	3.48989746722159E-5	DESIGN
for dialects which are known to not support ansi-sql row-value-constructor syntax we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9916985132717261	WITHOUT_CLASSIFICATION	0.008301486728273959	DESIGN
due to the complexity in initializing the selectclause do not generate one here. if it is not found simply return null also do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.5367622072746043	DESIGN	0.46323779272539567	WITHOUT_CLASSIFICATION
check the version unsaved-value if appropriate	WITHOUT_CLASSIFICATION	0.9981496531599512	WITHOUT_CLASSIFICATION	0.0018503468400488064	DESIGN
let this take precedence if defined since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9994148427452512	WITHOUT_CLASSIFICATION	5.851572547488917E-4	DESIGN
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9987320337157797	WITHOUT_CLASSIFICATION	0.0012679662842202861	DESIGN
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.999433649704465	WITHOUT_CLASSIFICATION	5.663502955350343E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9998959188336597	WITHOUT_CLASSIFICATION	1.040811663402681E-4	DESIGN
for property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9995903359525716	WITHOUT_CLASSIFICATION	4.096640474284264E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995592003541517	WITHOUT_CLASSIFICATION	4.407996458482287E-4	DESIGN
if there is no resulting row return null	WITHOUT_CLASSIFICATION	0.9999863568382105	WITHOUT_CLASSIFICATION	1.3643161789598903E-5	DESIGN
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999638281628263	WITHOUT_CLASSIFICATION	3.6171837173704454E-5	DESIGN
if this from element is a collection and the path is a collection property (maxindex etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9987901537235825	WITHOUT_CLASSIFICATION	0.0012098462764175886	DESIGN
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993802097303918	WITHOUT_CLASSIFICATION	6.197902696081689E-4	DESIGN
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996987878882359	WITHOUT_CLASSIFICATION	3.012121117641188E-4	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9999163504270014	WITHOUT_CLASSIFICATION	8.364957299861774E-5	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9999163504270014	WITHOUT_CLASSIFICATION	8.364957299861774E-5	DESIGN
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999985730647739	WITHOUT_CLASSIFICATION	1.4269352261166529E-6	DESIGN
try "get"	WITHOUT_CLASSIFICATION	0.999925780361511	WITHOUT_CLASSIFICATION	7.421963848899257E-5	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.999857431691879	WITHOUT_CLASSIFICATION	1.425683081209106E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.999857431691879	WITHOUT_CLASSIFICATION	1.425683081209106E-4	DESIGN
should be safe to only ever expect entitypersister references here	WITHOUT_CLASSIFICATION	0.9996970152263797	WITHOUT_CLASSIFICATION	3.029847736203037E-4	DESIGN
this page intentionally left blank )	WITHOUT_CLASSIFICATION	0.9988736540637008	WITHOUT_CLASSIFICATION	0.0011263459362992239	DESIGN
do not do anything	WITHOUT_CLASSIFICATION	0.9988827215295597	WITHOUT_CLASSIFICATION	0.0011172784704402972	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.99997213410695	WITHOUT_CLASSIFICATION	2.786589305004127E-5	DESIGN
cant instantiate	WITHOUT_CLASSIFICATION	0.9995987781569767	WITHOUT_CLASSIFICATION	4.01221843023238E-4	DESIGN
if it is a property of an embedded component invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999080503071023	WITHOUT_CLASSIFICATION	9.19496928977256E-5	DESIGN
otherwise	WITHOUT_CLASSIFICATION	0.999686020550149	WITHOUT_CLASSIFICATION	3.139794498509571E-4	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9988102540081849	WITHOUT_CLASSIFICATION	0.0011897459918151288	DESIGN
note interfaces is assumed to already contain hibernateproxy.class	WITHOUT_CLASSIFICATION	0.9979271670796617	WITHOUT_CLASSIFICATION	0.002072832920338376	DESIGN
note interfaces is assumed to already contain hibernateproxy.class	WITHOUT_CLASSIFICATION	0.9979271670796617	WITHOUT_CLASSIFICATION	0.002072832920338376	DESIGN
hhh-2481 make sure the callback gets cleared otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9938686536975049	WITHOUT_CLASSIFICATION	0.0061313463024951255	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9985843908690099	WITHOUT_CLASSIFICATION	0.0014156091309900725	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9985843908690099	WITHOUT_CLASSIFICATION	0.0014156091309900725	DESIGN
note interface is assumed to already contain hibernateproxy.class	WITHOUT_CLASSIFICATION	0.9896543982612109	WITHOUT_CLASSIFICATION	0.010345601738789125	DESIGN
interfaces arguments	WITHOUT_CLASSIFICATION	0.9998137914343364	WITHOUT_CLASSIFICATION	1.8620856566365233E-4	DESIGN
todo!	WITHOUT_CLASSIFICATION	0.9997622491590575	WITHOUT_CLASSIFICATION	2.3775084094252203E-4	DESIGN
get the caller	WITHOUT_CLASSIFICATION	0.9998713179572977	WITHOUT_CLASSIFICATION	1.2868204270235104E-4	DESIGN
get the caller principals	WITHOUT_CLASSIFICATION	0.9997041893169402	WITHOUT_CLASSIFICATION	2.958106830598398E-4	DESIGN
private static final alias default_alias = new alias(10 null)	WITHOUT_CLASSIFICATION	0.9999920335088135	WITHOUT_CLASSIFICATION	7.966491186443662E-6	DESIGN
needed to bump this up to dotnode because that is the only thing which currently knows about the property-ref path in the correct format it is either this or recurse over the dotnodes constructing the property path just like dotnode does internally	WITHOUT_CLASSIFICATION	0.9987756376863937	WITHOUT_CLASSIFICATION	0.0012243623136062383	DESIGN
if the identifier is quoted remove the quotes	WITHOUT_CLASSIFICATION	0.9994034881478485	WITHOUT_CLASSIFICATION	5.965118521515193E-4	DESIGN
truncate the identifier to the max alias length less the suffix length	WITHOUT_CLASSIFICATION	0.9999988411368411	WITHOUT_CLASSIFICATION	1.1588631588883845E-6	DESIGN
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9959037753441364	WITHOUT_CLASSIFICATION	0.004096224655863589	DESIGN
null is not considered the same type as integer. $non-nls-1 $non-nls-1	WITHOUT_CLASSIFICATION	0.9998201085151978	WITHOUT_CLASSIFICATION	1.7989148480219367E-4	DESIGN
the outerjoinsafterwhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999474283221443	WITHOUT_CLASSIFICATION	5.2571677855621584E-5	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.999765997591051	WITHOUT_CLASSIFICATION	2.340024089489644E-4	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.999765997591051	WITHOUT_CLASSIFICATION	2.340024089489644E-4	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.999765997591051	WITHOUT_CLASSIFICATION	2.340024089489644E-4	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.999765997591051	WITHOUT_CLASSIFICATION	2.340024089489644E-4	DESIGN
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999711320139568	WITHOUT_CLASSIFICATION	2.8867986043105297E-5	DESIGN
if the condition is not already there	WITHOUT_CLASSIFICATION	0.9995873471665493	WITHOUT_CLASSIFICATION	4.126528334506959E-4	DESIGN
dontspace.add("'")	WITHOUT_CLASSIFICATION	0.999620800350095	WITHOUT_CLASSIFICATION	3.79199649905041E-4	DESIGN
for mysql	WITHOUT_CLASSIFICATION	0.9998420486421572	WITHOUT_CLASSIFICATION	1.5795135784269708E-4	DESIGN
hashmap columnsunique = new hashmap()	WITHOUT_CLASSIFICATION	0.9999783005408397	WITHOUT_CLASSIFICATION	2.169945916030076E-5	DESIGN
null caused some problems	WITHOUT_CLASSIFICATION	0.9984790178897639	WITHOUT_CLASSIFICATION	0.0015209821102360778	DESIGN
package	WITHOUT_CLASSIFICATION	0.9992285899396746	WITHOUT_CLASSIFICATION	7.714100603253817E-4	DESIGN
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.999906181474903	WITHOUT_CLASSIFICATION	9.381852509695759E-5	DESIGN
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9961789681831944	WITHOUT_CLASSIFICATION	0.003821031816805667	DESIGN
package	WITHOUT_CLASSIFICATION	0.9992285899396746	WITHOUT_CLASSIFICATION	7.714100603253817E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9992285899396746	WITHOUT_CLASSIFICATION	7.714100603253817E-4	DESIGN
if true then execute db updates otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9993738510435893	WITHOUT_CLASSIFICATION	6.261489564107277E-4	DESIGN
we only release the connection	WITHOUT_CLASSIFICATION	0.9963524629869919	WITHOUT_CLASSIFICATION	0.0036475370130081178	DESIGN
deprecated option	WITHOUT_CLASSIFICATION	0.9972713719822551	WITHOUT_CLASSIFICATION	0.0027286280177448875	DESIGN
if an exception occurs during flush user must call rollback()	WITHOUT_CLASSIFICATION	0.9999511434369682	WITHOUT_CLASSIFICATION	4.885656303186672E-5	DESIGN
actually this last test is probably unnecessary since beforecompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999907984112113	WITHOUT_CLASSIFICATION	9.201588788677226E-6	DESIGN
this one only really needed for badly-behaved applications! (if the transactionmanager has a sychronization registered its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9990898555694866	WITHOUT_CLASSIFICATION	9.101444305133174E-4	DESIGN
create an dotnode ast for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9998682219434636	WITHOUT_CLASSIFICATION	1.3177805653631676E-4	DESIGN
if an exception occurs during flush user must call rollback()	WITHOUT_CLASSIFICATION	0.9999511434369682	WITHOUT_CLASSIFICATION	4.885656303186672E-5	DESIGN
if we could not register a synchronization do the before/after completion callbacks ourself (but we need to let jdbccontext know that this is what we are going to do so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9875243147812297	DESIGN	0.012475685218770245	WITHOUT_CLASSIFICATION
swallow it and continue to roll back jta transaction	WITHOUT_CLASSIFICATION	0.9997775200686466	WITHOUT_CLASSIFICATION	2.2247993135333E-4	DESIGN
so the transaction is already rolled back by jta spec	WITHOUT_CLASSIFICATION	0.9999580604902448	WITHOUT_CLASSIFICATION	4.193950975508541E-5	DESIGN
this method is a noop if there is a synchronization!	WITHOUT_CLASSIFICATION	0.9989636347332053	WITHOUT_CLASSIFICATION	0.0010363652667947877	DESIGN
two conditions where we need to transform this to a theta-join syntax 1) 'elem' is the "root from-element" in correlated subqueries 2) the dotnode.usethetastyleimplicitjoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9998842318718786	WITHOUT_CLASSIFICATION	1.1576812812143296E-4	DESIGN
websphere however is not a sane jee/jta container	WITHOUT_CLASSIFICATION	0.9995589100839899	WITHOUT_CLASSIFICATION	4.4108991601010726E-4	DESIGN
for sane jee/jta containers the transaction itself functions as its identifier	WITHOUT_CLASSIFICATION	0.9999770990984311	WITHOUT_CLASSIFICATION	2.2900901568827E-5	DESIGN
swallow the transaction was finished	WITHOUT_CLASSIFICATION	0.9999816919480181	WITHOUT_CLASSIFICATION	1.8308051981904714E-5	DESIGN
all aliastoentitymapresulttransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999772428515205	WITHOUT_CLASSIFICATION	2.2757148479595744E-5	DESIGN
create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999525830989843	WITHOUT_CLASSIFICATION	4.741690101579599E-5	DESIGN
all distinctrootentityresulttransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999772428515205	WITHOUT_CLASSIFICATION	2.2757148479595744E-5	DESIGN
map of entitymode -> tuplizer	WITHOUT_CLASSIFICATION	0.9999537050709767	WITHOUT_CLASSIFICATION	4.6294929023196955E-5	DESIGN
this is a virtual id property	WITHOUT_CLASSIFICATION	0.9709984364906292	WITHOUT_CLASSIFICATION	0.029001563509370807	DESIGN
this one needed only for guessentitymode()	WITHOUT_CLASSIFICATION	0.9990035022632057	WITHOUT_CLASSIFICATION	9.964977367943758E-4	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999866563470409	WITHOUT_CLASSIFICATION	1.3343652959105974E-4	DESIGN
todo move this to sf per hhh-3517 also see hhh-1907 and componentmetamodel	WITHOUT_CLASSIFICATION	0.9994709416799509	DESIGN	5.290583200489978E-4	WITHOUT_CLASSIFICATION
then the pojo tuplizer using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999673239519057	WITHOUT_CLASSIFICATION	3.2676048094336344E-5	DESIGN
build the dynamic-map tuplizer	WITHOUT_CLASSIFICATION	0.9996415169219808	WITHOUT_CLASSIFICATION	3.584830780192034E-4	DESIGN
then dom4j tuplizer if dom4j representation is available	WITHOUT_CLASSIFICATION	0.999755767173797	WITHOUT_CLASSIFICATION	2.4423282620297056E-4	DESIGN
build the dynamic-map tuplizer	WITHOUT_CLASSIFICATION	0.9996415169219808	WITHOUT_CLASSIFICATION	3.584830780192034E-4	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999591317476998	WITHOUT_CLASSIFICATION	4.086825230023557E-5	DESIGN
found a ctor but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999609248108826	WITHOUT_CLASSIFICATION	3.9075189117376505E-5	DESIGN
private final sessionfactoryimplementor sessionfactory	WITHOUT_CLASSIFICATION	0.9994128804097538	WITHOUT_CLASSIFICATION	5.871195902461753E-4	DESIGN
cached for efficiency	WITHOUT_CLASSIFICATION	0.9998028753205068	WITHOUT_CLASSIFICATION	1.9712467949315246E-4	DESIGN
public componentmetamodel(component component sessionfactoryimplementor sessionfactory) {	WITHOUT_CLASSIFICATION	0.9989483023639589	WITHOUT_CLASSIFICATION	0.0010516976360410329	DESIGN
this.sessionfactory = sessionfactory	WITHOUT_CLASSIFICATION	0.9999016102276331	WITHOUT_CLASSIFICATION	9.838977236689811E-5	DESIGN
it was not embedded so the argument is just an id	WITHOUT_CLASSIFICATION	0.9976196170630369	WITHOUT_CLASSIFICATION	0.0023803829369629984	DESIGN
then the pojo tuplizer using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999673239519057	WITHOUT_CLASSIFICATION	3.2676048094336344E-5	DESIGN
then dom4j tuplizer if dom4j representation is available	WITHOUT_CLASSIFICATION	0.999755767173797	WITHOUT_CLASSIFICATION	2.4423282620297056E-4	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999591317476998	WITHOUT_CLASSIFICATION	4.086825230023557E-5	DESIGN
then handle any user-defined entity modes	WITHOUT_CLASSIFICATION	0.9982492785314819	WITHOUT_CLASSIFICATION	0.0017507214685181442	DESIGN
return currentid	WITHOUT_CLASSIFICATION	0.9995654487641292	WITHOUT_CLASSIFICATION	4.3455123587076035E-4	DESIGN
reset the id	WITHOUT_CLASSIFICATION	0.9996665372259835	WITHOUT_CLASSIFICATION	3.33462774016438E-4	DESIGN
origin.adddestination( destination ) this was the cause of hhh-242 origin.settype( from_fragment ) set the parent node type so that the ast is properly formed. the destination node will have all the from text. the parent node is a collection join too (voodoo - see joinprocessor)	WITHOUT_CLASSIFICATION	0.996586525297363	WITHOUT_CLASSIFICATION	0.003413474702637054	DESIGN
reset the version	WITHOUT_CLASSIFICATION	0.9993755995628119	WITHOUT_CLASSIFICATION	6.244004371881633E-4	DESIGN
the default is to simply not lazy fetch properties for now	WITHOUT_CLASSIFICATION	0.9996381317658508	WITHOUT_CLASSIFICATION	3.618682341490769E-4	DESIGN
add the second join the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999903778576765	WITHOUT_CLASSIFICATION	9.622142323506633E-6	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9804832059639135	WITHOUT_CLASSIFICATION	0.01951679403608646	DESIGN
found a ctor but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999609248108826	WITHOUT_CLASSIFICATION	3.9075189117376505E-5	DESIGN
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.999879952932411	WITHOUT_CLASSIFICATION	1.2004706758895864E-4	DESIGN
return getfactory().getsettings().getbytecodeprovider().getproxyfactoryfactory().buildproxyfactory()	WITHOUT_CLASSIFICATION	0.9994948615909314	WITHOUT_CLASSIFICATION	5.051384090686703E-4	DESIGN
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999311389035825	WITHOUT_CLASSIFICATION	6.886109641747045E-5	DESIGN
superclass entity-name	WITHOUT_CLASSIFICATION	0.9997533299950915	WITHOUT_CLASSIFICATION	2.466700049084852E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9804832059639135	WITHOUT_CLASSIFICATION	0.01951679403608646	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995592003541517	WITHOUT_CLASSIFICATION	4.407996458482287E-4	DESIGN
init the aliases after initing the constructornode	WITHOUT_CLASSIFICATION	0.999935220527522	WITHOUT_CLASSIFICATION	6.477947247801358E-5	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9804832059639135	WITHOUT_CLASSIFICATION	0.01951679403608646	DESIGN
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999487995467925	WITHOUT_CLASSIFICATION	5.120045320757458E-5	DESIGN
get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.999841442132091	WITHOUT_CLASSIFICATION	1.5855786790900425E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995592003541517	WITHOUT_CLASSIFICATION	4.407996458482287E-4	DESIGN
note this affects the return value!	WITHOUT_CLASSIFICATION	0.9971081449495374	WITHOUT_CLASSIFICATION	0.0028918550504627182	DESIGN
need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9998696579086825	WITHOUT_CLASSIFICATION	1.3034209131750492E-4	DESIGN
add the type to the list of returned sqlresulttypes.	WITHOUT_CLASSIFICATION	0.9999073124340323	WITHOUT_CLASSIFICATION	9.268756596774527E-5	DESIGN
collection types	WITHOUT_CLASSIFICATION	0.9993596425183409	WITHOUT_CLASSIFICATION	6.403574816591021E-4	DESIGN
convenience methods relating to operations across arrays of types	WITHOUT_CLASSIFICATION	0.9999373627553391	WITHOUT_CLASSIFICATION	6.263724466087602E-5	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9996209928241837	WITHOUT_CLASSIFICATION	3.79007175816379E-4	DESIGN
blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9998639864672488	WITHOUT_CLASSIFICATION	1.3601353275122878E-4	DESIGN
value is the entity name	WITHOUT_CLASSIFICATION	0.9995388985747523	WITHOUT_CLASSIFICATION	4.6110142524767025E-4	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9998071043162916	WITHOUT_CLASSIFICATION	1.928956837082912E-4	DESIGN
generate id select fragment and then property select fragment for each expression just like generateselectfragments().	WITHOUT_CLASSIFICATION	0.9899730338162045	WITHOUT_CLASSIFICATION	0.010026966183795439	DESIGN
todo!	WITHOUT_CLASSIFICATION	0.9997622491590575	WITHOUT_CLASSIFICATION	2.3775084094252203E-4	DESIGN
xml is the entity name	WITHOUT_CLASSIFICATION	0.9974645208429312	WITHOUT_CLASSIFICATION	0.0025354791570688213	DESIGN
special case this is the leaf of the containment graph even though not immutable	WITHOUT_CLASSIFICATION	0.9973851506376438	WITHOUT_CLASSIFICATION	0.0026148493623562264	DESIGN
tolerates nulls	WITHOUT_CLASSIFICATION	0.9998537620805665	WITHOUT_CLASSIFICATION	1.4623791943333824E-4	DESIGN
sqlresulttypelist	WITHOUT_CLASSIFICATION	0.999620800350095	WITHOUT_CLASSIFICATION	3.79199649905041E-4	DESIGN
metatype is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9984693608000778	WITHOUT_CLASSIFICATION	0.0015306391999222063	DESIGN
get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9993486394997224	WITHOUT_CLASSIFICATION	6.513605002775631E-4	DESIGN
look through the fromelement's children to find any collections of values that should be fetched	WITHOUT_CLASSIFICATION	0.9986874202491373	WITHOUT_CLASSIFICATION	0.001312579750862777	DESIGN
return associationtype.foreign_key_to_parent this is better but causes a transient object exception	WITHOUT_CLASSIFICATION	0.5404169525659845	WITHOUT_CLASSIFICATION	0.45958304743401546	DESIGN
use the lower case function name. remember whether we're in a select clause or not.	WITHOUT_CLASSIFICATION	0.9996647023032212	WITHOUT_CLASSIFICATION	3.3529769677872253E-4	DESIGN
ident might be the name of a class.	WITHOUT_CLASSIFICATION	0.9899270375369783	WITHOUT_CLASSIFICATION	0.010072962463021723	DESIGN
todo!!!	WITHOUT_CLASSIFICATION	0.9997622491590575	WITHOUT_CLASSIFICATION	2.3775084094252203E-4	DESIGN
st.settimestamp( index new timestamp( cal.gettimeinmillis() ) cal ) jdk 1.5 only	WITHOUT_CLASSIFICATION	0.9998995459228358	WITHOUT_CLASSIFICATION	1.004540771642357E-4	DESIGN
st.setdate( index new date( cal.gettimeinmillis() ) cal ) jdk 1.5 only	WITHOUT_CLASSIFICATION	0.9998995459228358	WITHOUT_CLASSIFICATION	1.004540771642357E-4	DESIGN
both are timestamps	WITHOUT_CLASSIFICATION	0.9996503489256542	WITHOUT_CLASSIFICATION	3.496510743458593E-4	DESIGN
at least one is a plain old date	WITHOUT_CLASSIFICATION	0.9997300355917154	WITHOUT_CLASSIFICATION	2.699644082846307E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999057084326933	WITHOUT_CLASSIFICATION	9.429156730663337E-5	DESIGN
if the corresponding sql value is null the reader we got is null as well	WITHOUT_CLASSIFICATION	0.999998552545012	WITHOUT_CLASSIFICATION	1.4474549878885757E-6	DESIGN
fetch reader content up to the end - and put characters in a stringbuffer	WITHOUT_CLASSIFICATION	0.9919302048706542	WITHOUT_CLASSIFICATION	0.008069795129345858	DESIGN
return stringbuffer content as a large string	WITHOUT_CLASSIFICATION	0.9999498775010967	WITHOUT_CLASSIFICATION	5.0122498903350455E-5	DESIGN
or types.longvarchar?	WITHOUT_CLASSIFICATION	0.9997261224936912	WITHOUT_CLASSIFICATION	2.738775063088755E-4	DESIGN
not called at runtime so doesn't matter if its slow )	WITHOUT_CLASSIFICATION	0.9997224210704448	WITHOUT_CLASSIFICATION	2.775789295551964E-4	DESIGN
todo	WITHOUT_CLASSIFICATION	0.7083277626419925	WITHOUT_CLASSIFICATION	0.29167223735800757	DESIGN
chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9998189551444463	WITHOUT_CLASSIFICATION	1.8104485555361607E-4	DESIGN
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.999527252698532	WITHOUT_CLASSIFICATION	4.727473014680677E-4	DESIGN
cache this	WITHOUT_CLASSIFICATION	0.9958685458830508	WITHOUT_CLASSIFICATION	0.004131454116949145	DESIGN
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9989361594657331	WITHOUT_CLASSIFICATION	0.0010638405342669518	DESIGN
forcefully remove leading ands from where fragments the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9998384317096611	WITHOUT_CLASSIFICATION	1.6156829033888462E-4	DESIGN
todo!!!!!!!	WITHOUT_CLASSIFICATION	0.999620800350095	WITHOUT_CLASSIFICATION	3.79199649905041E-4	DESIGN
create a new filters node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9998978895089944	WITHOUT_CLASSIFICATION	1.0211049100557705E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995592003541517	WITHOUT_CLASSIFICATION	4.407996458482287E-4	DESIGN
public object instantiate(object parent sessionimplementor session) throws hibernateexception	WITHOUT_CLASSIFICATION	0.9878304730404788	WITHOUT_CLASSIFICATION	0.01216952695952122	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9997147955332444	WITHOUT_CLASSIFICATION	2.8520446675565924E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9997147955332444	WITHOUT_CLASSIFICATION	2.8520446675565924E-4	DESIGN
versiontype impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ note simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the timestamp datatype supported by sybase and sql server which are completely db-generated values	WITHOUT_CLASSIFICATION	0.9999985940418699	WITHOUT_CLASSIFICATION	1.4059581300527074E-6	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9996209928241837	WITHOUT_CLASSIFICATION	3.79007175816379E-4	DESIGN
not really necessary i guess	WITHOUT_CLASSIFICATION	0.6522444274175556	WITHOUT_CLASSIFICATION	0.3477555725824444	DESIGN
clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999950187199108	WITHOUT_CLASSIFICATION	4.981280089180909E-6	DESIGN
we do not have to worry about queued additions to uninitialized collections since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999756468086586	WITHOUT_CLASSIFICATION	2.435319134136756E-5	DESIGN
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9997410176753765	WITHOUT_CLASSIFICATION	2.589823246235185E-4	DESIGN
remember the uk value	WITHOUT_CLASSIFICATION	0.9956750227876924	WITHOUT_CLASSIFICATION	0.004324977212307715	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999057084326933	WITHOUT_CLASSIFICATION	9.429156730663337E-5	DESIGN
processcollectionproperty(token q.getcollectionpersister(collectionrole) collectionname)	WITHOUT_CLASSIFICATION	0.9995592003541517	WITHOUT_CLASSIFICATION	4.407996458482287E-4	DESIGN
we must use the "remembered" uk value since it is not available from the entityentry during assembly	WITHOUT_CLASSIFICATION	0.9995407823262854	WITHOUT_CLASSIFICATION	4.59217673714596E-4	DESIGN
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9823283798712465	WITHOUT_CLASSIFICATION	0.017671620128753427	DESIGN
return false	WITHOUT_CLASSIFICATION	0.999884715779563	WITHOUT_CLASSIFICATION	1.1528422043699776E-4	DESIGN
this just handles a particular case of component projection perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.6258984423969297	WITHOUT_CLASSIFICATION	0.3741015576030703	DESIGN
note we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9996871135699359	WITHOUT_CLASSIFICATION	3.1288643006418355E-4	DESIGN
the key is the owning entity itself so get the id from the key	WITHOUT_CLASSIFICATION	0.9989496514786611	WITHOUT_CLASSIFICATION	0.001050348521338896	DESIGN
if the original is a persistentcollection and that original was not flagged as dirty then reset the target's dirty flag here after the copy operation. </p> one thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know	WITHOUT_CLASSIFICATION	0.9999812986563087	WITHOUT_CLASSIFICATION	1.870134369132149E-5	DESIGN
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999121020461843	WITHOUT_CLASSIFICATION	8.789795381571149E-5	DESIGN
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999404253262347	WITHOUT_CLASSIFICATION	5.957467376542314E-5	DESIGN
for a null target or a target which is the same as the original we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999994341375119	WITHOUT_CLASSIFICATION	5.658624880843377E-7	DESIGN
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here	WITHOUT_CLASSIFICATION	0.9993974200073679	WITHOUT_CLASSIFICATION	6.025799926320778E-4	DESIGN
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999699621981801	WITHOUT_CLASSIFICATION	3.0037801819837706E-5	DESIGN
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9982899722242449	WITHOUT_CLASSIFICATION	0.0017100277757551437	DESIGN
check if it is already completely loaded but unowned	WITHOUT_CLASSIFICATION	0.9995748767695822	WITHOUT_CLASSIFICATION	4.251232304178017E-4	DESIGN
cache the actual id of the object not the value of the property-ref which might not be initialized	WITHOUT_CLASSIFICATION	0.9815177060072898	WITHOUT_CLASSIFICATION	0.01848229399271018	DESIGN
todo!!!!!!!	WITHOUT_CLASSIFICATION	0.999620800350095	WITHOUT_CLASSIFICATION	3.79199649905041E-4	DESIGN
create a new collection wrapper to be initialized later	WITHOUT_CLASSIFICATION	0.9774847305224089	WITHOUT_CLASSIFICATION	0.022515269477591072	DESIGN
some jdbc drivers erroneously return an empty array here for a null db value /	WITHOUT_CLASSIFICATION	0.999944528556014	WITHOUT_CLASSIFICATION	5.5471443985944504E-5	DESIGN
our column span is the number of columns in the pk	WITHOUT_CLASSIFICATION	0.9999661568066568	WITHOUT_CLASSIFICATION	3.384319334317332E-5	DESIGN
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9996971092806614	WITHOUT_CLASSIFICATION	3.0289071933867337E-4	DESIGN
we already know current is not null	WITHOUT_CLASSIFICATION	0.9965728604841674	WITHOUT_CLASSIFICATION	0.003427139515832601	DESIGN
the ids are fully resolved so compare them with isdirty() not ismodified()	WITHOUT_CLASSIFICATION	0.989618184490398	WITHOUT_CLASSIFICATION	0.010381815509602068	DESIGN
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9997427675412802	WITHOUT_CLASSIFICATION	2.5723245871978344E-4	DESIGN
----------------------------------------------------------- constructors	WITHOUT_CLASSIFICATION	0.9979033403259557	WITHOUT_CLASSIFICATION	0.002096659674044341	DESIGN
----------------------------------------------------- instance variables	WITHOUT_CLASSIFICATION	0.9999772736567515	WITHOUT_CLASSIFICATION	2.2726343248473992E-5	DESIGN
public static jdbcexception newjdbcexception(string string sqlexception root string sql) { string = string + " [" + sql + ']' log.error(string root) logexceptions(root) return new jdbcexception(string root sql) } public static jdbcexception newjdbcexception(string string sqlexception root) { log.error(string root) logexceptions(root) return new jdbcexception(string root) }	WITHOUT_CLASSIFICATION	0.9999916473054106	WITHOUT_CLASSIFICATION	8.352694589453947E-6	DESIGN
--------------------------------------------------------- public methods	WITHOUT_CLASSIFICATION	0.9930383714000889	WITHOUT_CLASSIFICATION	0.0069616285999111165	DESIGN
compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9994073968379522	WITHOUT_CLASSIFICATION	5.92603162047826E-4	DESIGN
simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999685963357883	WITHOUT_CLASSIFICATION	3.140366421180865E-5	DESIGN
sybase fail if we don't do that sigh	WITHOUT_CLASSIFICATION	0.9999193725609732	WITHOUT_CLASSIFICATION	8.062743902673825E-5	DESIGN
handles things like a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a b c ) (overloaded brackets) not not a a is not null (overloaded "not") etc and expressions like foo = bar (maps to foo.id = bar.id) foo.bar = 'foo' (maps to foo.bar = 'foo') foo.bar.baz = 1.0 (maps to foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.bar.baz (maps to bar.baz = 1.0 and foo.bar = bar.id) foo.bar.baz = a.b.c (maps to bar.baz = b.c and foo.bar = bar.id and a.b = b.id) foo.bar.baz + a.b.c (maps to bar.baz + b.c and foo.bar = bar.id and a.b = b.id) ( foo.bar.baz + 1.0 ) < 2.0 (maps to ( bar.baz + 1.0 ) < 2.0 and foo.bar = bar.id)	WITHOUT_CLASSIFICATION	0.9994497822327546	WITHOUT_CLASSIFICATION	5.502177672454895E-4	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9995093833073416	WITHOUT_CLASSIFICATION	4.906166926583274E-4	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9995093833073416	WITHOUT_CLASSIFICATION	4.906166926583274E-4	DESIGN
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9995928606957856	WITHOUT_CLASSIFICATION	4.071393042143151E-4	DESIGN
otherwise just dump it	WITHOUT_CLASSIFICATION	0.998866996371054	WITHOUT_CLASSIFICATION	0.0011330036289459587	DESIGN
its an interface so we can't really tell anything	WITHOUT_CLASSIFICATION	0.9992373517181206	WITHOUT_CLASSIFICATION	7.626482818794494E-4	DESIGN
its an interface so we can't really tell anything	WITHOUT_CLASSIFICATION	0.9992373517181206	WITHOUT_CLASSIFICATION	7.626482818794494E-4	DESIGN
use default behavior	WITHOUT_CLASSIFICATION	0.9996483692081124	WITHOUT_CLASSIFICATION	3.5163079188762635E-4	DESIGN
note early return	WITHOUT_CLASSIFICATION	0.9990058292805425	WITHOUT_CLASSIFICATION	9.94170719457457E-4	DESIGN
the mru cache used to keep hard references to the most recently used query plans note lru here is a bit of a misnomer it indicates that lru entries are removed the actual kept entries are the mru entries	WITHOUT_CLASSIFICATION	0.7072626698821913	DESIGN	0.29273733011780867	WITHOUT_CLASSIFICATION
we want to be able to just use the defaults if jndi environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999617239779829	WITHOUT_CLASSIFICATION	3.827602201718634E-5	DESIGN
clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9996824541137083	WITHOUT_CLASSIFICATION	3.175458862916672E-4	DESIGN
serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9995887273825145	WITHOUT_CLASSIFICATION	4.112726174855192E-4	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999773103559615	WITHOUT_CLASSIFICATION	2.268964403847341E-5	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999773103559615	WITHOUT_CLASSIFICATION	2.268964403847341E-5	DESIGN
deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9995866886455168	WITHOUT_CLASSIFICATION	4.1331135448330114E-4	DESIGN
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.996979583488422	WITHOUT_CLASSIFICATION	0.0030204165115779603	DESIGN
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9986020403797802	WITHOUT_CLASSIFICATION	0.001397959620219849	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9996240816766907	WITHOUT_CLASSIFICATION	3.7591832330930016E-4	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9996240816766907	WITHOUT_CLASSIFICATION	3.7591832330930016E-4	DESIGN
includes last '.'	WITHOUT_CLASSIFICATION	0.9999047457539897	WITHOUT_CLASSIFICATION	9.525424601034466E-5	DESIGN
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999802970909745	WITHOUT_CLASSIFICATION	1.970290902546061E-5	DESIGN
impl note takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method	WITHOUT_CLASSIFICATION	0.9689656422958682	WITHOUT_CLASSIFICATION	0.031034357704131713	DESIGN
first time we find match!	WITHOUT_CLASSIFICATION	0.9998829741060054	WITHOUT_CLASSIFICATION	1.1702589399463953E-4	DESIGN
entitynames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.999855221354898	WITHOUT_CLASSIFICATION	1.447786451019138E-4	DESIGN
wrapped iterators	WITHOUT_CLASSIFICATION	0.9957820192328188	WITHOUT_CLASSIFICATION	0.004217980767181124	DESIGN
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9998080962512226	WITHOUT_CLASSIFICATION	1.9190374877746044E-4	DESIGN
the current iterator	WITHOUT_CLASSIFICATION	0.999936209433477	WITHOUT_CLASSIFICATION	6.379056652297825E-5	DESIGN
the last used iterator	WITHOUT_CLASSIFICATION	0.9771734114677697	WITHOUT_CLASSIFICATION	0.02282658853223033	DESIGN
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9998546177903236	WITHOUT_CLASSIFICATION	1.4538220967648567E-4	DESIGN
public static object[] clone(class elementclass object[] array) {object[] result = (object[]) array.newinstance( elementclass array.length )system.arraycopy(array 0 result 0 array.length)return result}	WITHOUT_CLASSIFICATION	0.9997959491278282	WITHOUT_CLASSIFICATION	2.040508721717098E-4	DESIGN
call this before any iterator method to make sure that the current iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9979032078215131	WITHOUT_CLASSIFICATION	0.0020967921784869384	DESIGN
doable if needed	WITHOUT_CLASSIFICATION	0.9999047350292661	WITHOUT_CLASSIFICATION	9.526497073387103E-5	DESIGN
set last used iterator here in case the user calls remove before calling hasnext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.8685661430795341	WITHOUT_CLASSIFICATION	0.13143385692046602	DESIGN
peek ahead	WITHOUT_CLASSIFICATION	0.9997815109252773	WITHOUT_CLASSIFICATION	2.1848907472274355E-4	DESIGN
if we reach the end of the string w/o finding the matching end that is an exception	WITHOUT_CLASSIFICATION	0.9999192607782963	WITHOUT_CLASSIFICATION	8.073922170360273E-5	DESIGN
we have a placeholder spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9994301527750723	WITHOUT_CLASSIFICATION	5.698472249277054E-4	DESIGN
make sure spinning forward did not put us past the end of the buffer	WITHOUT_CLASSIFICATION	0.9997707322483748	WITHOUT_CLASSIFICATION	2.2926775162524329E-4	DESIGN
first try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9996922043985018	WITHOUT_CLASSIFICATION	3.0779560149821357E-4	DESIGN
next try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9496689341984147	WITHOUT_CLASSIFICATION	0.05033106580158518	DESIGN
next try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9598342910186943	WITHOUT_CLASSIFICATION	0.04016570898130579	DESIGN
anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9993123909612665	WITHOUT_CLASSIFICATION	6.876090387335741E-4	DESIGN
would need an identityset for this!	WITHOUT_CLASSIFICATION	0.9991501982312415	WITHOUT_CLASSIFICATION	8.498017687584411E-4	DESIGN
arrays.aslist doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9963566545199338	WITHOUT_CLASSIFICATION	0.0036433454800662273	DESIGN
faster?	WITHOUT_CLASSIFICATION	0.9997622491590575	WITHOUT_CLASSIFICATION	2.3775084094252203E-4	DESIGN
the name of a class	WITHOUT_CLASSIFICATION	0.9991927664605651	WITHOUT_CLASSIFICATION	8.072335394349277E-4	DESIGN
its the listener class name	WITHOUT_CLASSIFICATION	0.999826279639511	WITHOUT_CLASSIFICATION	1.7372036048904436E-4	DESIGN
allow 987654321	WITHOUT_CLASSIFICATION	0.9987969811588194	WITHOUT_CLASSIFICATION	0.0012030188411805776	DESIGN
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999633279297964	WITHOUT_CLASSIFICATION	3.6672070203671195E-5	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999955091999772	WITHOUT_CLASSIFICATION	4.4908000227980426E-5	DESIGN
in case we were deserialized in a different jvm look for an instance with the same name (alternatively we could do an actual jndi lookup here.)	WITHOUT_CLASSIFICATION	0.9591052674102295	WITHOUT_CLASSIFICATION	0.04089473258977058	DESIGN
first lets determine whether to apply cglib or javassist based instrumentation	WITHOUT_CLASSIFICATION	0.9999813946873645	WITHOUT_CLASSIFICATION	1.8605312635526397E-5	DESIGN
make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9998228259134272	WITHOUT_CLASSIFICATION	1.771740865727087E-4	DESIGN
entirely optional!!	WITHOUT_CLASSIFICATION	0.9987552385132442	WITHOUT_CLASSIFICATION	0.0012447614867558351	DESIGN
its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9994547611662091	WITHOUT_CLASSIFICATION	5.452388337908398E-4	DESIGN
context.unbind(boundname)	WITHOUT_CLASSIFICATION	0.9991285900065839	WITHOUT_CLASSIFICATION	8.714099934160564E-4	DESIGN
readresolveobject	WITHOUT_CLASSIFICATION	0.999620800350095	WITHOUT_CLASSIFICATION	3.79199649905041E-4	DESIGN
cfg.setproperty("hibernate.show_sql" "true")	WITHOUT_CLASSIFICATION	0.9995858123294769	WITHOUT_CLASSIFICATION	4.1418767052324863E-4	DESIGN
defensive convenience methods	WITHOUT_CLASSIFICATION	0.9996711145200545	WITHOUT_CLASSIFICATION	3.2888547994555103E-4	DESIGN
create the sessionfactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9996836858445379	WITHOUT_CLASSIFICATION	3.1631415546208217E-4	DESIGN
make sure you log the exception as it might be swallowed	WITHOUT_CLASSIFICATION	0.999952705637263	WITHOUT_CLASSIFICATION	4.729436273700199E-5	DESIGN
begin unit of work	WITHOUT_CLASSIFICATION	0.9997510266728216	WITHOUT_CLASSIFICATION	2.4897332717846216E-4	DESIGN
write html header	WITHOUT_CLASSIFICATION	0.9996106693407687	WITHOUT_CLASSIFICATION	3.8933065923125727E-4	DESIGN
handle actions	WITHOUT_CLASSIFICATION	0.9996991587495704	WITHOUT_CLASSIFICATION	3.008412504296056E-4	DESIGN
print page	WITHOUT_CLASSIFICATION	0.9997977191308888	WITHOUT_CLASSIFICATION	2.0228086911116698E-4	DESIGN
write html footer	WITHOUT_CLASSIFICATION	0.9998213077778141	WITHOUT_CLASSIFICATION	1.7869222218584222E-4	DESIGN
end unit of work	WITHOUT_CLASSIFICATION	0.9993026918440049	WITHOUT_CLASSIFICATION	6.973081559950112E-4	DESIGN
start the session to be used for this request	WITHOUT_CLASSIFICATION	0.8794141969945787	WITHOUT_CLASSIFICATION	0.12058580300542135	DESIGN
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9984787773815945	WITHOUT_CLASSIFICATION	0.0015212226184054436	DESIGN
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999952236242766	WITHOUT_CLASSIFICATION	4.776375723371413E-6	DESIGN
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9922330281044717	WITHOUT_CLASSIFICATION	0.007766971895528431	DESIGN
eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9971658041652491	WITHOUT_CLASSIFICATION	0.0028341958347509093	DESIGN
if we want to handle it bidirectional and detached we also need to load this collection with an eager outer-join fetch this time with criteria and not hql	WITHOUT_CLASSIFICATION	0.8363600813250552	WITHOUT_CLASSIFICATION	0.16363991867494482	DESIGN
event anevent = (event) session .createcriteria(event.class).setfetchmode("participants" fetchmode.join) .add( expression.eq("id" eventid) ) .uniqueresult() eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9984097811794703	WITHOUT_CLASSIFICATION	0.0015902188205295612	DESIGN
end of first unit of work	WITHOUT_CLASSIFICATION	0.9995246780055166	WITHOUT_CLASSIFICATION	4.753219944833679E-4	DESIGN
or bidirectional safety method setting both sides aperson.addtoevent(anevent)	WITHOUT_CLASSIFICATION	0.9999010213828042	WITHOUT_CLASSIFICATION	9.897861719577517E-5	DESIGN
begin second unit of work	WITHOUT_CLASSIFICATION	0.9995467709411752	WITHOUT_CLASSIFICATION	4.532290588248326E-4	DESIGN
reattachment of aperson	WITHOUT_CLASSIFICATION	0.9992585031671604	WITHOUT_CLASSIFICATION	7.414968328396011E-4	DESIGN
the getemailaddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9926389322482	WITHOUT_CLASSIFICATION	0.007361067751800008	DESIGN
we need our tm so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9969281415271037	WITHOUT_CLASSIFICATION	0.003071858472896246	DESIGN
don't hold the jbc node lock throughout the tx as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999804467579382	WITHOUT_CLASSIFICATION	1.9553242061852273E-5	DESIGN
don't hold the jbc node lock throughout the tx as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999804467579382	WITHOUT_CLASSIFICATION	1.9553242061852273E-5	DESIGN
jbc put a version in the node when it created as part of some internal operation. we are always newer but if the jbc version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999424186592395	WITHOUT_CLASSIFICATION	5.758134076047314E-5	DESIGN
swaldman 2006-08-28 define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999874031924728	WITHOUT_CLASSIFICATION	1.2596807527067627E-5	DESIGN
not null if the isolation level has been specified in the configuration file. otherwise it is left to the driver's default value.	WITHOUT_CLASSIFICATION	0.999982396884776	WITHOUT_CLASSIFICATION	1.76031152240994E-5	DESIGN
configured outside of hibernate (i.e. servlet container or java bean container already has proxool pools running and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9991053139024613	WITHOUT_CLASSIFICATION	8.946860975386018E-4	DESIGN
if you're closing down the connectionprovider chances are an is not a real big deal just warn	WITHOUT_CLASSIFICATION	0.999992525999821	WITHOUT_CLASSIFICATION	7.47400017898731E-6	DESIGN
(as is always optional for consistency with sql/oql)	WITHOUT_CLASSIFICATION	0.9999588283145547	WITHOUT_CLASSIFICATION	4.1171685445275276E-5	DESIGN
process the "new" hql style where aliases are assigned _after_ the class name or path expression ie. using the as construction	WITHOUT_CLASSIFICATION	0.9999999907842065	WITHOUT_CLASSIFICATION	9.21579342789531E-9	DESIGN
the loaded owner will be set to null after the collection is removed so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999961694250646	WITHOUT_CLASSIFICATION	3.830574935441434E-6	DESIGN
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9975318498232835	WITHOUT_CLASSIFICATION	0.0024681501767166106	DESIGN
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9995157256157129	WITHOUT_CLASSIFICATION	4.8427438428715167E-4	DESIGN
handle a path expression or class name that appears at the start in the "new" hql style or an alias that appears at the start in the "old" hql style	WITHOUT_CLASSIFICATION	0.9999949298320915	WITHOUT_CLASSIFICATION	5.070167908505745E-6	DESIGN
handle <= >= != is not not between not in	WITHOUT_CLASSIFICATION	0.9972577185596322	WITHOUT_CLASSIFICATION	0.002742281440367831	DESIGN
the loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999996953313578	WITHOUT_CLASSIFICATION	3.046686422222513E-7	DESIGN
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9997927632927555	WITHOUT_CLASSIFICATION	2.0723670724463844E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9996782794860856	WITHOUT_CLASSIFICATION	3.217205139144372E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9996782794860856	WITHOUT_CLASSIFICATION	3.217205139144372E-4	DESIGN
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9995037186305648	WITHOUT_CLASSIFICATION	4.962813694351429E-4	DESIGN
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9998201457563151	WITHOUT_CLASSIFICATION	1.7985424368491352E-4	DESIGN
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9997538243877346	WITHOUT_CLASSIFICATION	2.461756122653133E-4	DESIGN
note special case default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999919427351428	WITHOUT_CLASSIFICATION	8.057264857235108E-6	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999812635396199	WITHOUT_CLASSIFICATION	1.8736460380170335E-5	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998863300165269	WITHOUT_CLASSIFICATION	1.1366998347314961E-4	DESIGN
void setcomponenttuplizerfactory(componenttuplizerfactory componenttuplizerfactory) { this.componenttuplizerfactory = componenttuplizerfactory }	WITHOUT_CLASSIFICATION	0.9999318048149248	WITHOUT_CLASSIFICATION	6.819518507521726E-5	DESIGN
element index -> id	WITHOUT_CLASSIFICATION	0.9999900788150389	WITHOUT_CLASSIFICATION	9.921184961127832E-6	DESIGN
note that it might be better to iterate the snapshot but this is safe assuming the user implements equals() properly as required by the set contract!	WITHOUT_CLASSIFICATION	0.9870610560043726	WITHOUT_CLASSIFICATION	0.01293894399562749	DESIGN
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9997175040548368	WITHOUT_CLASSIFICATION	2.824959451631761E-4	DESIGN
essentially if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception note that allowing close() above has the same basic effect but we capture that there simply to perform the unbind	WITHOUT_CLASSIFICATION	0.9999988067872052	WITHOUT_CLASSIFICATION	1.1932127948337008E-6	DESIGN
the default sqlexceptionconverter for all dialects is based on sqlstate since sqlerrorcode is extremely vendor-specific. specific dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999876432739698	WITHOUT_CLASSIFICATION	1.2356726030165561E-5	DESIGN
only necessary for postgre < 7.4 httpanoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9992455533917693	WITHOUT_CLASSIFICATION	7.544466082306132E-4	DESIGN
select topic syntax from information_schema.help where section like 'function%' order by section topic see also -> httpwww.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999943232247542	WITHOUT_CLASSIFICATION	5.67677524571282E-6	DESIGN
registercolumntype(types.varbinary "character($l)") registercolumntype(types.blob "character($l)" ) for use prior to cp 11.0 registercolumntype(types.clob "character($l)" )	WITHOUT_CLASSIFICATION	0.9964484940672433	WITHOUT_CLASSIFICATION	0.0035515059327565746	DESIGN
the blob type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include k - kilobyte m - megabyte g - gigabyte. refer to the pbdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9847215378290768	WITHOUT_CLASSIFICATION	0.015278462170923277	DESIGN
we must return a valid rdms/rsa command from this method to prevent rdms/rsa from issuing error 400	WITHOUT_CLASSIFICATION	0.7792532070122244	WITHOUT_CLASSIFICATION	0.22074679298777553	DESIGN
oracle driver reports to support getgeneratedkeys() but they only support the version taking an array of the names of the columns to be returned (via its returning clause). no other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999514627057584	WITHOUT_CLASSIFICATION	4.853729424157631E-5	DESIGN
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999964641195263	WITHOUT_CLASSIFICATION	3.5358804736468686E-6	DESIGN
you may still have other resultsets or update counts left to process here but you can't do it now or the resultset you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999724478061	WITHOUT_CLASSIFICATION	2.7552193922735266E-8	DESIGN
note for object <-> sql datatype mappings see configuration manager | advanced | sql | system ddl datatype mappings tbdregistercolumntype(types.binary "binary($1)") changed 08-11-2005 jsl	WITHOUT_CLASSIFICATION	0.9998944480413521	WITHOUT_CLASSIFICATION	1.0555195864790258E-4	DESIGN
trim(end_keyword string-expression-1 from string-expression-2) use hibernate implementation "from" is one of the parameters they pass in position ?3 registerfunction( "trim" new sqlfunctiontemplate(hibernate.string "trim(?1 ?2 from ?3)") )	WITHOUT_CLASSIFICATION	0.9999832777746988	WITHOUT_CLASSIFICATION	1.6722225301283137E-5	DESIGN
whether this dialect has an identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999741368264576	WITHOUT_CLASSIFICATION	2.5863173542334274E-5	DESIGN
according to both the ansi-sql and jpa specs trim takes a variable number of parameters between 1 and 4. at least one paramer (trimsource) is required. from the sql spec <trim function> = trim <left paren> <trim operands> <right paren> <trim operands> = [ [ <trim specification> ] [ <trim character> ] from ] <trim source> <trim specification> = leading | trailing | both if <trim specification> is omitted both is assumed. if <trim character> is omitted space is assumed	WITHOUT_CLASSIFICATION	0.9999999999358503	WITHOUT_CLASSIFICATION	6.414967908299167E-11	DESIGN
/ prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.999928681969701	WITHOUT_CLASSIFICATION	7.131803029900855E-5	DESIGN
named queries	WITHOUT_CLASSIFICATION	0.9997849097609586	WITHOUT_CLASSIFICATION	2.1509023904150765E-4	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.8494038220606323	DESIGN	0.1505961779393678	WITHOUT_CLASSIFICATION
does not handle arrays (thats ok cos they can't be lazy) or newly instantiated collections so we can do the cast	WITHOUT_CLASSIFICATION	0.9987126299938219	WITHOUT_CLASSIFICATION	0.001287370006178071	DESIGN
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999368787787719	WITHOUT_CLASSIFICATION	6.312122122815963E-5	DESIGN
we can do the cast since orphan-delete does not apply to 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999524214463716	WITHOUT_CLASSIFICATION	4.757855362841935E-5	DESIGN
if the natural-id is marked as non-mutable it is not retrieved during a normal database-snapshot operation	WITHOUT_CLASSIFICATION	0.9999980671883267	WITHOUT_CLASSIFICATION	1.9328116732680417E-6	DESIGN
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999957008307725	WITHOUT_CLASSIFICATION	4.299169227516913E-6	DESIGN
slice to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9998168942505677	WITHOUT_CLASSIFICATION	1.8310574943233924E-4	DESIGN
int result = 17 result = 37 result + type.hashcode() result = 37 result + ( value==null ? 0 value.hashcode() ) return result	WITHOUT_CLASSIFICATION	0.999938872427719	WITHOUT_CLASSIFICATION	6.112757228104926E-5	DESIGN
the collectionentry.isreached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9998895192542042	WITHOUT_CLASSIFICATION	1.1048074579578761E-4	DESIGN
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999468045089236	WITHOUT_CLASSIFICATION	5.319549107640194E-4	DESIGN
the unique property value represented here may or may not be serializable so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.8598972630139314	DESIGN	0.14010273698606857	WITHOUT_CLASSIFICATION
if the version of a newly instantiated object is not the same as the version seed value use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9984403069838897	WITHOUT_CLASSIFICATION	0.0015596930161102722	DESIGN
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999539291061119	WITHOUT_CLASSIFICATION	4.607089388803788E-5	DESIGN
ignore this row the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999887159153682	WITHOUT_CLASSIFICATION	1.1284084631840121E-5	DESIGN
entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently not yet used	WITHOUT_CLASSIFICATION	0.6571844336572135	DESIGN	0.34281556634278654	WITHOUT_CLASSIFICATION
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. besides it makes the code much easier to read than the old transactionhelper stuff	WITHOUT_CLASSIFICATION	0.9999995260277396	WITHOUT_CLASSIFICATION	4.7397226047111204E-7	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9815007145069237	WITHOUT_CLASSIFICATION	0.01849928549307625	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9815007145069237	WITHOUT_CLASSIFICATION	0.01849928549307625	DESIGN
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999996102039224	WITHOUT_CLASSIFICATION	3.897960776033359E-7	DESIGN
remove any snapshot not really for memory management purposes but rather because it might now be stale and there is no longer any entityentry to take precedence this is now handled by removeentity() session.getpersistencecontext().removedatabasesnapshot(key)	WITHOUT_CLASSIFICATION	0.9011535087952128	WITHOUT_CLASSIFICATION	0.09884649120478713	DESIGN
skip this check for composite-ids relating to dom4j entity-mode alternatively we could add a check to make sure the incoming id value is an instance of element	WITHOUT_CLASSIFICATION	0.9980276862396171	WITHOUT_CLASSIFICATION	0.0019723137603828824	DESIGN
upgrade the lock if necessary lock(result lockmode)	WITHOUT_CLASSIFICATION	0.9997366759682843	WITHOUT_CLASSIFICATION	2.6332403171572234E-4	DESIGN
now any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9884989640736307	WITHOUT_CLASSIFICATION	0.011501035926369406	DESIGN
we must clone embedded composite identifiers or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9997121740638126	WITHOUT_CLASSIFICATION	2.878259361874589E-4	DESIGN
sub-insertions should occur before containing insertion so try to do the callback now	WITHOUT_CLASSIFICATION	0.9994271951623692	WITHOUT_CLASSIFICATION	5.728048376307308E-4	DESIGN
the entity is not associated with the session so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9995722588576154	WITHOUT_CLASSIFICATION	4.277411423846277E-4	DESIGN
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9990210872755243	WITHOUT_CLASSIFICATION	9.789127244756617E-4	DESIGN
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998575876166654	WITHOUT_CLASSIFICATION	1.4241238333465058E-4	DESIGN
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998486688790426	WITHOUT_CLASSIFICATION	1.5133112095739974E-4	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9695056545247763	WITHOUT_CLASSIFICATION	0.030494345475223707	DESIGN
if it is an uninitialized proxy pointing with this session then when it is accessed the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.999705563679654	WITHOUT_CLASSIFICATION	2.9443632034601667E-4	DESIGN
generate an explicit join for the root dot node. the implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999997575134666	WITHOUT_CLASSIFICATION	2.424865334037025E-7	DESIGN
a session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9982526105187531	WITHOUT_CLASSIFICATION	0.0017473894812468466	DESIGN
does the collection referenced by this fromelement specify an order-by attribute? if so attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999269468336374	WITHOUT_CLASSIFICATION	7.305316636261933E-5	DESIGN
and the token could be an identifer and the error is a mismatched token error	WITHOUT_CLASSIFICATION	0.9779846775122442	WITHOUT_CLASSIFICATION	0.022015322487755767	DESIGN
if a where clause was specified in the update/delete query use it to limit the returned ids here	WITHOUT_CLASSIFICATION	0.9999985524336318	WITHOUT_CLASSIFICATION	1.447566368201811E-6	DESIGN
int parameterstart = getwalker().getnumberofparametersinsetclause() list allparams = getidselectparameterspecifications() iterator whereparams = allparams.sublist( parameterstart allparams.size() ).iterator()	WITHOUT_CLASSIFICATION	0.9999881209231272	WITHOUT_CLASSIFICATION	1.1879076872759847E-5	DESIGN
default implementation if this node has a data type and that data type is not an association then this is scalar.	WITHOUT_CLASSIFICATION	0.9997757435201325	WITHOUT_CLASSIFICATION	2.2425647986742004E-4	DESIGN
resolve the lhs fully generate implicit joins. pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9998978742827702	WITHOUT_CLASSIFICATION	1.021257172298243E-4	DESIGN
if the propertytype is null and there isn't a parent just stop now there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9998579575470374	WITHOUT_CLASSIFICATION	1.4204245296264685E-4	DESIGN
we do not look for an existing join on the same path because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9994600915764925	WITHOUT_CLASSIFICATION	5.399084235074981E-4	DESIGN
our parent is another dot node meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's pk (because 'our' table would know the fk).	WITHOUT_CLASSIFICATION	0.9999914745970715	WITHOUT_CLASSIFICATION	8.525402928539948E-6	DESIGN
public final currency getcurrency(int col) throws hibernateexception {return (currency) get(col)}	WITHOUT_CLASSIFICATION	0.9995994500375384	WITHOUT_CLASSIFICATION	4.005499624616669E-4	DESIGN
here we have two possibilities 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9997620966046362	WITHOUT_CLASSIFICATION	2.3790339536389752E-4	DESIGN
set the unresolved path in this node and the parent. set the text for the parent.	WITHOUT_CLASSIFICATION	0.9995319755607506	WITHOUT_CLASSIFICATION	4.680244392494452E-4	DESIGN
get the first child to be considered. sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. distinct).	WITHOUT_CLASSIFICATION	0.9990750388385916	WITHOUT_CLASSIFICATION	9.249611614084086E-4	DESIGN
if this is an entity and the property is the identifier property then use getidentifiertype(). note that the propertyname.equals( propertypath ) checks whether we have a component key reference where the component class property name is the same as the entity id property name if the two are not equal this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9910169937646882	WITHOUT_CLASSIFICATION	0.008983006235311859	DESIGN
for a subquery the alias to use depends on a few things (we already know this is not an overall select) 1) if this from_element represents a correlation to the outer-most query a) if the outer query represents a multi-table persister we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) b) otherwise we need to use the persister's table name as the column qualification 2) otherwise (not correlated) use the given alias	WITHOUT_CLASSIFICATION	0.822551251456901	WITHOUT_CLASSIFICATION	0.17744874854309894	DESIGN
not a collection? return the entity property mapping.	WITHOUT_CLASSIFICATION	0.988504443663012	WITHOUT_CLASSIFICATION	0.01149555633698802	DESIGN
collection of <many-to-any/> mappings used to circumvent the component-collection check below	WITHOUT_CLASSIFICATION	0.9420362487083168	WITHOUT_CLASSIFICATION	0.057963751291683234	DESIGN
otherwise the destination node was implied by the from clause and the from clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9998925981932137	WITHOUT_CLASSIFICATION	1.0740180678620823E-4	DESIGN
if the first identifier in the path referrs to the class alias (not the class name) then this is a correlated subselect. if it's a correlated sub-select use the existing table alias. otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9933774520796083	WITHOUT_CLASSIFICATION	0.006622547920391726	DESIGN
check to see if our "proppath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9996682802934809	WITHOUT_CLASSIFICATION	3.317197065191063E-4	DESIGN
an ident node can represent an index expression if the ident represents a naked property ref note this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrexpr -> resolve()). the other option if that changes is to call resolve from here but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9904471363986324	WITHOUT_CLASSIFICATION	0.009552863601367699	DESIGN
this uses a pathexpressionparser but notice that compound paths are not valid only bare names and simple paths	WITHOUT_CLASSIFICATION	0.9965098054896696	WITHOUT_CLASSIFICATION	0.003490194510330271	DESIGN
if this is an implied join in a from clause then use ansi-style joining and set the flag on the fromelement that indicates that it was implied in the from clause itself.	WITHOUT_CLASSIFICATION	0.9996697890289477	WITHOUT_CLASSIFICATION	3.302109710523383E-4	DESIGN
origin.adddestination(destination) add the query spaces.	WITHOUT_CLASSIFICATION	0.9999334347677885	WITHOUT_CLASSIFICATION	6.656523221150732E-5	DESIGN
for an explicit many-to-many relationship add a second join from the intermediate (many-to-many) table to the destination table. also make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999994702384355	WITHOUT_CLASSIFICATION	5.297615645220479E-7	DESIGN
reset the node type because the rest of the system is expecting from_fragment all we wanted was for the factory to create the right sub-class. this might get reset again later on anyway to make the sql generation simpler.	WITHOUT_CLASSIFICATION	0.9598981580027084	WITHOUT_CLASSIFICATION	0.040101841997291617	DESIGN
explicit = true this is an explict select. arraylist sqlresulttypelist = new arraylist()	WITHOUT_CLASSIFICATION	0.9999163685098899	WITHOUT_CLASSIFICATION	8.363149011006035E-5	DESIGN
sqlresulttypelist.add( type ) generate the select expression.	WITHOUT_CLASSIFICATION	0.9953647322076199	WITHOUT_CLASSIFICATION	0.004635267792380157	DESIGN
if the expression list has exactly one expression and the type of the expression is a collection then this might be a collection function such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999143503401894	WITHOUT_CLASSIFICATION	8.564965981066072E-5	DESIGN
need to parse off the column qualifiers this is assuming (which is true as of now) that this is only used from update and delete hql statement parsing	WITHOUT_CLASSIFICATION	0.9856584978602562	WITHOUT_CLASSIFICATION	0.014341502139743846	DESIGN
for regression testing against output from the old parser found it easiest to simply reorder the fromelements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser this is definitely another of those "only needed for regression purposes". the syntheticandfactory then simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999992188194182	WITHOUT_CLASSIFICATION	7.811805818704028E-7	DESIGN
the uber-rule here is that we need to include subclass joins if the fromelement is in any way dereferenced by a property from the subclass table otherwise we end up with column references qualified by a non-existent table reference in the resulting sql	WITHOUT_CLASSIFICATION	0.9972585980355355	WITHOUT_CLASSIFICATION	0.0027414019644644806	DESIGN
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9928245446921088	WITHOUT_CLASSIFICATION	0.0071754553078912245	DESIGN
the following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9995852285702084	WITHOUT_CLASSIFICATION	4.147714297915875E-4	DESIGN
the loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999996953313578	WITHOUT_CLASSIFICATION	3.046686422222513E-7	DESIGN
should not be able to reach last without maxposition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9993581905260646	WITHOUT_CLASSIFICATION	6.418094739354584E-4	DESIGN
we found it in the temp pc. should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999554367099706	WITHOUT_CLASSIFICATION	4.4563290029443814E-5	DESIGN
do not use proxiesbykey since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9981379943501117	WITHOUT_CLASSIFICATION	0.0018620056498882614	DESIGN
if there is no tm configured we will not be able to access the javax.transaction.transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999715759207581	WITHOUT_CLASSIFICATION	2.8424079241914843E-5	DESIGN
since the result set cursor is always left at the first physical row after the "last processed" we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999999814783989	WITHOUT_CLASSIFICATION	1.8521601236635446E-8	DESIGN
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a collectioninitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9996097304600559	WITHOUT_CLASSIFICATION	3.9026953994411606E-4	DESIGN
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode none)	WITHOUT_CLASSIFICATION	0.9992375622774208	WITHOUT_CLASSIFICATION	7.624377225791524E-4	DESIGN
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9997245376938975	WITHOUT_CLASSIFICATION	2.754623061024581E-4	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999209975902168	WITHOUT_CLASSIFICATION	7.900240978323226E-5	DESIGN
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9993746114997051	WITHOUT_CLASSIFICATION	6.253885002948859E-4	DESIGN
ps.close() just close it do not try to return it to the pool! note early exit!	WITHOUT_CLASSIFICATION	0.999969054846793	WITHOUT_CLASSIFICATION	3.0945153207103826E-5	DESIGN
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through hibernate's registered transaction synchronization on a separate "reaping" thread. in cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these cmes occur. and though it is not "allowed" per-se the end result without handling it specifically is infinite looping. so here we simply break the loop	WITHOUT_CLASSIFICATION	0.9999999771051161	WITHOUT_CLASSIFICATION	2.289488388570932E-8	DESIGN
unfortunately this stuff can't be cached because it is per-invocation not constant for the querytranslator instance	WITHOUT_CLASSIFICATION	0.9996905931839115	WITHOUT_CLASSIFICATION	3.094068160884912E-4	DESIGN
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9997041995797853	WITHOUT_CLASSIFICATION	2.958004202146804E-4	DESIGN
don't create a unique key 'cos some databases don't like a uk on nullable columns getcollectiontable().createuniquekey( getidentifier().getconstraintcolumns() )	WITHOUT_CLASSIFICATION	0.9971646135698827	WITHOUT_CLASSIFICATION	0.002835386430117254	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or entityinfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996341814982881	WITHOUT_CLASSIFICATION	3.658185017118501E-4	DESIGN
isset = collection.isset() issorted = collection.issorted()	WITHOUT_CLASSIFICATION	0.9999016102276331	WITHOUT_CLASSIFICATION	9.838977236689811E-5	DESIGN
lists arrays sets maps bags	WITHOUT_CLASSIFICATION	0.9951802286529624	WITHOUT_CLASSIFICATION	0.004819771347037607	DESIGN
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9992046713986267	WITHOUT_CLASSIFICATION	7.953286013733219E-4	DESIGN
use a combination of foreign key columns and pk columns since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9989001661701736	WITHOUT_CLASSIFICATION	0.001099833829826386	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or entityinfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996341814982881	WITHOUT_CLASSIFICATION	3.658185017118501E-4	DESIGN
information about properties of this class including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9937398733047877	WITHOUT_CLASSIFICATION	0.00626012669521221	DESIGN
all this only really needs to consider properties of this class not its subclasses but since we are reusing code used for sequential selects we use the subclass closure	WITHOUT_CLASSIFICATION	0.9880515063731565	DESIGN	0.011948493626843583	WITHOUT_CLASSIFICATION
here we render the select column list based on the properties defined as being generated. for partial component generation we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9982121290414431	WITHOUT_CLASSIFICATION	0.0017878709585568721	DESIGN
this is the root (versioned) table and we are using version-based optimistic locking if we are not updating the version also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9956946081195739	WITHOUT_CLASSIFICATION	0.004305391880426097	DESIGN
optimistic-lock="all" include all updatable properties optimistic-lock="dirty" include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999733826442917	WITHOUT_CLASSIFICATION	2.6617355708339593E-5	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9870365236860078	WITHOUT_CLASSIFICATION	0.012963476313992103	DESIGN
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a jta transaction context so must be autocommit mode)	WITHOUT_CLASSIFICATION	0.9963395656866892	WITHOUT_CLASSIFICATION	0.003660434313310707	DESIGN
need to treat this as if it where optimistic-lock="all" (dirty does not make sense) first we need to locate the "loaded" state note it potentially could be a proxy so perform the location the safe way	WITHOUT_CLASSIFICATION	0.9860271585939295	WITHOUT_CLASSIFICATION	0.013972841406070425	DESIGN
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9998546461024965	WITHOUT_CLASSIFICATION	1.4535389750346069E-4	DESIGN
need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. using the collection's key type causes problems with property-ref keys	WITHOUT_CLASSIFICATION	0.99991036816493	WITHOUT_CLASSIFICATION	8.963183507001242E-5	DESIGN
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.99637864907695	WITHOUT_CLASSIFICATION	0.0036213509230501213	DESIGN
following doesn't handle (null not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.998465631300405	WITHOUT_CLASSIFICATION	0.0015343686995949477	DESIGN
impl note due to the delayed population of setters (setters cached for performance) we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9995018264041985	WITHOUT_CLASSIFICATION	4.981735958014948E-4	DESIGN
we need to dirty check collections since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.998729094240272	WITHOUT_CLASSIFICATION	0.0012709057597279014	DESIGN
return the id so we can use it to reset the proxy id return result	WITHOUT_CLASSIFICATION	0.9997655281525074	WITHOUT_CLASSIFICATION	2.3447184749258914E-4	DESIGN
optimizer = getfactory().getsettings().getbytecodeprovider().getreflectionoptimizer( mappedclass getternames setternames proptypes )	WITHOUT_CLASSIFICATION	0.9995548483037875	WITHOUT_CLASSIFICATION	4.451516962124605E-4	DESIGN
cache the actual id of the object not the value of the property-ref which might not be initialized	WITHOUT_CLASSIFICATION	0.9815177060072898	WITHOUT_CLASSIFICATION	0.01848229399271018	DESIGN
we now have the value of the property-ref we reference. however we need to dig a little deeper as that property might also be an entity type in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9810370522309532	WITHOUT_CLASSIFICATION	0.01896294776904683	DESIGN
retrieve the value of the designated column in the current row of this resultset object as a java.io.reader object	WITHOUT_CLASSIFICATION	0.9999737263748126	WITHOUT_CLASSIFICATION	2.6273625187343302E-5	DESIGN
not absolutely necessary but helps for some equals()/hashcode() implementations	WITHOUT_CLASSIFICATION	0.9978164321974362	WITHOUT_CLASSIFICATION	0.0021835678025637784	DESIGN
this should be a call to resolve() not resolveidentifier() 'cos it might be a property-ref and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9490323384194721	WITHOUT_CLASSIFICATION	0.050967661580527776	DESIGN
if we have <tt>not-found="ignore"</tt> association mapped to a formula we always need to dirty check it so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9788676098834368	WITHOUT_CLASSIFICATION	0.021132390116563125	DESIGN
can't just return null here since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999667636150071	WITHOUT_CLASSIFICATION	3.3236384992929875E-5	DESIGN
for arrays replaceelements() may return a different reference since the array length might not match	WITHOUT_CLASSIFICATION	0.997303107764394	WITHOUT_CLASSIFICATION	0.002696892235606017	DESIGN
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the mru entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9979467882819912	WITHOUT_CLASSIFICATION	0.0020532117180088023	DESIGN
as soon as we encounter our first letter return the substring from that position	WITHOUT_CLASSIFICATION	0.9999622469149253	WITHOUT_CLASSIFICATION	3.775308507472847E-5	DESIGN
note expected in the syntax type=listenerclass ({sep}type=listenerclass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999840005770555	WITHOUT_CLASSIFICATION	1.599942294452485E-5	DESIGN
istransactioncallbackregistered denotes whether any hibernate transaction has registered as a callback against this jdbccontext only one such callback is allowed. directly serializing this value causes problems with jdbctransaction or really any transaction impl where the callback is local to the transaction instance itself since that transaction is not serialized along with the jdbccontext. thus we handle that fact here explicitly	WITHOUT_CLASSIFICATION	0.9999821540153561	WITHOUT_CLASSIFICATION	1.7845984643931822E-5	DESIGN
note that for sequential scrolling we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.998260141452956	WITHOUT_CLASSIFICATION	0.0017398585470439155	DESIGN
we call getkeyfromresultset() here so that we can know the key value upon which to perform the breaking logic. however it is also then called from getrowfromresultset() which is certainly not the most efficient. but the call here is needed and there currently is no other way without refactoring of the doquery()/getrowfromresultset() methods	WITHOUT_CLASSIFICATION	0.8202578969887417	WITHOUT_CLASSIFICATION	0.1797421030112583	DESIGN
this check is needed since processing leaves the cursor after the last physical row for the current logical row thus if we are after the last physical row this might be caused by either 1) scrolling to the last logical row 2) scrolling past the last logical row in the latter scenario the previous logical row really is the last logical row. in all other cases we should process back two logical records (the current logic row plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9994515989675965	WITHOUT_CLASSIFICATION	5.484010324034073E-4	DESIGN
and perform the load	WITHOUT_CLASSIFICATION	0.9995156661799616	WITHOUT_CLASSIFICATION	4.8433382003840744E-4	DESIGN
important reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.99987288346893	WITHOUT_CLASSIFICATION	1.2711653106998213E-4	DESIGN
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9887034391759262	WITHOUT_CLASSIFICATION	0.011296560824073832	DESIGN
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9994792384891481	WITHOUT_CLASSIFICATION	5.207615108518156E-4	DESIGN
we did not find a collection element in the result set so we ensure that a collection is created with the owner's identifier since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999666873330203	WITHOUT_CLASSIFICATION	3.331266697969341E-5	DESIGN
this is a collection initializer so we must create a collection for each of the passed-in keys to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9901768223936533	WITHOUT_CLASSIFICATION	0.009823177606346685	DESIGN
grab its state from the resultset and keep it in the session (but don't yet initialize the object itself) note that we acquire lockmode.read even if it was not requested	WITHOUT_CLASSIFICATION	0.9988528664453263	WITHOUT_CLASSIFICATION	0.001147133554673669	DESIGN
a many-to-many decrement currentdepth here to allow join across the association table without exceeding max_fetch_depth (i.e. the "currentdepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9997668765662787	WITHOUT_CLASSIFICATION	2.3312343372132314E-4	DESIGN
if not a composite key use "foo in (? ? ?)" for batching if no batch and not a composite key use "foo = ?"	WITHOUT_CLASSIFICATION	0.9980283386921481	WITHOUT_CLASSIFICATION	0.001971661307851817	DESIGN
the user visible aliases which are unknown to the superclass these are not the actual "physical" sql aliases	WITHOUT_CLASSIFICATION	0.9999998615093794	WITHOUT_CLASSIFICATION	1.384906207161698E-7	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999916555729476	WITHOUT_CLASSIFICATION	8.344427052538709E-6	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999916555729476	WITHOUT_CLASSIFICATION	8.344427052538709E-6	DESIGN
it does not refer to an alias of a projection look for a property	WITHOUT_CLASSIFICATION	0.9997209439588458	WITHOUT_CLASSIFICATION	2.790560411541773E-4	DESIGN
determine if the collection elements are entities	WITHOUT_CLASSIFICATION	0.9999505686633423	WITHOUT_CLASSIFICATION	4.943133665759972E-5	DESIGN
let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999064402983014	WITHOUT_CLASSIFICATION	9.355970169848522E-5	DESIGN
translates an ast join type (i.e. the token type) into a joinfragment.xxx join type. @param astjointype the ast join type (from hqlsqltokentypes or sqltokentypes) @return a joinfragment.xxx join type. @see joinfragment @see sqltokentypes	WITHOUT_CLASSIFICATION	0.9998789006008733	WITHOUT_CLASSIFICATION	1.2109939912684537E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.99997213410695	WITHOUT_CLASSIFICATION	2.786589305004127E-5	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.99997213410695	WITHOUT_CLASSIFICATION	2.786589305004127E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.9998062775210389	WITHOUT_CLASSIFICATION	1.937224789611467E-4	DESIGN
public list getcollectionaliases() { return collectionaliases } public list getcollectionowners() { return collectionowners } public list getcollectionowneraliases() { return collectionowneraliases } public list getcollectionpersisters() { return collectionpersisters } public map getalias2persister() { return alias2persister } public boolean iscollectioninitializer() { return iscollectioninitializer } public list getpersisters() { return persisters } public map getalias2owneralias() { return alias2owneralias } public list getscalartypes() { return scalartypes } public list getscalarcolumnaliases() { return scalarcolumnaliases } public list getpropertyresults() { return propertyresults } public list getcollectionpropertyresults() { return collectionresults } public map getalias2return() { return alias2return }	WITHOUT_CLASSIFICATION	0.999521921415812	WITHOUT_CLASSIFICATION	4.780785841880254E-4	DESIGN
sqlqueryparser parser = new sqlqueryparser( sqlquery processor.getalias2persister() processor.getalias2return() aliases collaliases collpersisters suffixes collsuffixes ) sql = parser.process() namedparameterbindpoints = parser.getnamedparameters()	WITHOUT_CLASSIFICATION	0.9994759809461018	WITHOUT_CLASSIFICATION	5.240190538981893E-4	DESIGN
include the discriminator and class-level where but not filters	WITHOUT_CLASSIFICATION	0.9999817394815628	WITHOUT_CLASSIFICATION	1.8260518437246324E-5	DESIGN
sqlaliassuffixes[i] = element.getcolumnaliassuffix()	WITHOUT_CLASSIFICATION	0.9999016102276331	WITHOUT_CLASSIFICATION	9.838977236689811E-5	DESIGN
none because its the requested lock mode not the actual!	WITHOUT_CLASSIFICATION	0.9997779921904171	WITHOUT_CLASSIFICATION	2.2200780958284478E-4	DESIGN
at this point we have (drivingsqlalias) the sql alias of the driving table corresponding to the given user alias. however the driving table is not (necessarily) the table against which we want to apply locks. mainly the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999990352613616	WITHOUT_CLASSIFICATION	9.647386385018107E-7	DESIGN
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999645195258301	WITHOUT_CLASSIFICATION	3.548047416989398E-5	DESIGN
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9997017070378649	WITHOUT_CLASSIFICATION	2.9829296213507167E-4	DESIGN
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9973802595822753	WITHOUT_CLASSIFICATION	0.002619740417724801	DESIGN
both many-to-one and one-to-one are represented as a property. entitypersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. so we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. the other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. if that assertion changes then this check needs to change as well. partially this is an issue with the overloading of the term "lazy" here	WITHOUT_CLASSIFICATION	0.9940796084397409	DESIGN	0.005920391560259095	WITHOUT_CLASSIFICATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999515256934359	WITHOUT_CLASSIFICATION	4.8474306564113576E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999515256934359	WITHOUT_CLASSIFICATION	4.8474306564113576E-5	DESIGN
roottablename = persistentclass.getroottable().getqualifiedname( factory.getdialect() factory.getdefaultcatalog() factory.getdefaultschema() )	WITHOUT_CLASSIFICATION	0.9995548483037875	WITHOUT_CLASSIFICATION	4.451516962124605E-4	DESIGN
subclasses	WITHOUT_CLASSIFICATION	0.99988631818224	WITHOUT_CLASSIFICATION	1.1368181775990174E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999786437336867	WITHOUT_CLASSIFICATION	2.1356266313355998E-5	DESIGN
protected void initpropertypaths(final string pathfinal type typefinal string[] columnsfinal string[] formulatemplatesfinal mapping factory)throws mappingexception {addformulapropertypath(path type formulatemplates)initpropertypaths(path type columns formulatemplates factory)}	WITHOUT_CLASSIFICATION	0.9998117316889628	WITHOUT_CLASSIFICATION	1.8826831103725512E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995592003541517	WITHOUT_CLASSIFICATION	4.407996458482287E-4	DESIGN
custom sql (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9995468440003876	WITHOUT_CLASSIFICATION	4.5315599961239184E-4	DESIGN
moved up from abstractentitypersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9958175868902848	WITHOUT_CLASSIFICATION	0.004182413109715314	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995592003541517	WITHOUT_CLASSIFICATION	4.407996458482287E-4	DESIGN
aliases for identifier ( alias.id ) skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.987438848874215	WITHOUT_CLASSIFICATION	0.012561151125785087	DESIGN
decide which resultset to get the property value from	WITHOUT_CLASSIFICATION	0.9998363086315522	WITHOUT_CLASSIFICATION	1.6369136844789566E-4	DESIGN
note it is conceptually possible that a usertype could map null to a non-null value so the following is arguable	WITHOUT_CLASSIFICATION	0.9992665563398292	WITHOUT_CLASSIFICATION	7.334436601708467E-4	DESIGN
the contract of entitytuplizer.determineconcretesubclassentityname says that returning null is an indication that the specified entity-name (this.getentityname) should be used.	WITHOUT_CLASSIFICATION	0.987223833351025	WITHOUT_CLASSIFICATION	0.012776166648974989	DESIGN
need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. using the collection's key type causes problems with property-ref keys	WITHOUT_CLASSIFICATION	0.99991036816493	WITHOUT_CLASSIFICATION	8.963183507001242E-5	DESIGN
cache these since they are stateless this one could even be static	WITHOUT_CLASSIFICATION	0.5344419190602456	DESIGN	0.4655580809397543	WITHOUT_CLASSIFICATION
"as" is not in keywords	WITHOUT_CLASSIFICATION	0.9939374842472575	WITHOUT_CLASSIFICATION	0.006062515752742464	DESIGN
--commented out by inspection (12/4/04 910 am) public abstract void addcondition(string alias string[] columns string condition)	WITHOUT_CLASSIFICATION	0.9999827230213421	WITHOUT_CLASSIFICATION	1.7276978658019043E-5	DESIGN
use the id column alias	WITHOUT_CLASSIFICATION	0.9999078729870541	WITHOUT_CLASSIFICATION	9.212701294586241E-5	DESIGN
private list aliases = new arraylist()	WITHOUT_CLASSIFICATION	0.9999478170452853	WITHOUT_CLASSIFICATION	5.218295471461407E-5	DESIGN
columns.add(columnname) aliases.add(tablealias)	WITHOUT_CLASSIFICATION	0.9995592003541517	WITHOUT_CLASSIFICATION	4.407996458482287E-4	DESIGN
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9804599091317161	WITHOUT_CLASSIFICATION	0.019540090868283976	DESIGN
revert to traditional hibernate behavior of setting initialpoolsize to minpoolsize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999268513095054	WITHOUT_CLASSIFICATION	7.314869049456625E-5	DESIGN
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999444794525233	WITHOUT_CLASSIFICATION	5.5520547476686995E-5	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9910410268763353	WITHOUT_CLASSIFICATION	0.008958973123664723	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9910410268763353	WITHOUT_CLASSIFICATION	0.008958973123664723	DESIGN
if an exception occurs during flush user must call rollback()	WITHOUT_CLASSIFICATION	0.9999511434369682	WITHOUT_CLASSIFICATION	4.885656303186672E-5	DESIGN
essentially 1) if we have a local (hibernate) transaction in progress and it already has the usertransaction cached use that usertransaction to determine the status. 2) if a transaction manager has been located use that transaction manager to determine the status. 3) finally as the last resort try to lookup the usertransaction via jndi and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999999946401522	WITHOUT_CLASSIFICATION	5.359847800066108E-9	DESIGN
package	WITHOUT_CLASSIFICATION	0.9992285899396746	WITHOUT_CLASSIFICATION	7.714100603253817E-4	DESIGN
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9995723163294972	WITHOUT_CLASSIFICATION	4.2768367050293875E-4	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9999684578469453	WITHOUT_CLASSIFICATION	3.154215305467345E-5	DESIGN
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database) since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.8866315784287149	DESIGN	0.11336842157128514	WITHOUT_CLASSIFICATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999866563470409	WITHOUT_CLASSIFICATION	1.3343652959105974E-4	DESIGN
regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed) so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999976233495091	WITHOUT_CLASSIFICATION	2.3766504909129764E-6	DESIGN
then handle any user-defined entity modes	WITHOUT_CLASSIFICATION	0.9982492785314819	WITHOUT_CLASSIFICATION	0.0017507214685181442	DESIGN
establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9994459392272675	WITHOUT_CLASSIFICATION	5.540607727325342E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9804832059639135	WITHOUT_CLASSIFICATION	0.01951679403608646	DESIGN
note this is being used from the process of shutting down a sessionfactory. specific things to consider (1) this clearing of the region should not propagate to other nodes on the cluster (if any) this is the cache-mode-local option bit (2) really just trying a best effort to cleanup after ourselves lock failures etc are not critical here this is the fail-silently option bit	WITHOUT_CLASSIFICATION	0.9999776995403955	DESIGN	2.2300459604416882E-5	WITHOUT_CLASSIFICATION
need to extract the component values and check for subtype replacements	WITHOUT_CLASSIFICATION	0.9996527627448081	WITHOUT_CLASSIFICATION	3.472372551919144E-4	DESIGN
we ignore minimalputoverride. jbosscache putforexternalread is already about as minimal as we can get it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999972181474684	WITHOUT_CLASSIFICATION	2.781852531592202E-6	DESIGN
for now just "re-flatten" the metamodel since this is temporary stuff anyway (hhh-1907)	WITHOUT_CLASSIFICATION	0.9520720308117904	WITHOUT_CLASSIFICATION	0.047927969188209546	DESIGN
configure the cache to use our tm	WITHOUT_CLASSIFICATION	0.999404098238813	WITHOUT_CLASSIFICATION	5.959017611869478E-4	DESIGN
this solution would allow us to eliminate the owner arg to disassemble() but what if the collection was null and then later had elements added? seems unsafe session.getpersistencecontext().getcollectionentry( (persistentcollection) value ).getkey()	WITHOUT_CLASSIFICATION	0.677222618970037	WITHOUT_CLASSIFICATION	0.322777381029963	DESIGN
make sure jbc doesn't look one up	WITHOUT_CLASSIFICATION	0.9997762996681692	WITHOUT_CLASSIFICATION	2.2370033183077108E-4	DESIGN
some collections are not lazy	WITHOUT_CLASSIFICATION	0.9948011849503139	WITHOUT_CLASSIFICATION	0.005198815049686137	DESIGN
here we don't want to suspend the tx. if we do 1) we might be caching query results that reflect uncommitted changes. no tx == no wl on cache node so other threads can prematurely see those query results 2) no tx == immediate replication. more overhead plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.7206854288766262	WITHOUT_CLASSIFICATION	0.2793145711233737	DESIGN
return the (fully resolved) identifier value but do not resolve to the actual referenced entity instance note the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9981852359732004	WITHOUT_CLASSIFICATION	0.0018147640267996057	DESIGN
add a zero (or quite low) timeout option so we don't block. ignore any timeoutexception. basically we forego caching the query result in order to avoid blocking. reads are done with suspended tx so they should not hold the lock for long. not caching the query result is ok since any subsequent read will just see the old result with its out-of-date timestamp that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999999998410039	WITHOUT_CLASSIFICATION	1.5899617631471938E-10	DESIGN
impl note takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method	WITHOUT_CLASSIFICATION	0.9689656422958682	WITHOUT_CLASSIFICATION	0.031034357704131713	DESIGN
we have the jbcwritemutex so no other local thread will be trying to write this key. it's possible here some remote thread has come in and changed the values again but since we are reading the values to write to jbc right now we know we are writing the latest values i.e. we don't assume that what we cached in entry.update() above is what we should write to jbc now. our write could be redundant i.e. we are writing what some remote thread just came in an wrote. there is a chance that yet another remote thread will update us and we'll then overwrite that later data in jbc. but all remote nodes will ignore that change in their localcache the only place it will live will be in jbc where it can only effect the initial state transfer values on newly joined nodes (i.e. populatelocalcache()).	WITHOUT_CLASSIFICATION	0.9999606093358404	WITHOUT_CLASSIFICATION	3.9390664159495176E-5	DESIGN
local cache so we use synchronization	WITHOUT_CLASSIFICATION	0.9929369053884158	WITHOUT_CLASSIFICATION	0.007063094611584163	DESIGN
local cache so we use synchronization	WITHOUT_CLASSIFICATION	0.9929369053884158	WITHOUT_CLASSIFICATION	0.007063094611584163	DESIGN
don't need to lock the cache here since if someone else inserted the same pk first the insert would fail	WITHOUT_CLASSIFICATION	0.9999990493635538	WITHOUT_CLASSIFICATION	9.506364462713299E-7	DESIGN
we need to grab the version value from the entity otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.8866068142947773	WITHOUT_CLASSIFICATION	0.11339318570522267	DESIGN
we need to obtain the lock before any actions are executed since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9980151899748657	WITHOUT_CLASSIFICATION	0.001984810025134248	DESIGN
postdelete after actually deleting a row record the fact that the instance no longer exists on the database (needed for identity-column key generation) and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9975177178757658	WITHOUT_CLASSIFICATION	0.002482282124234214	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9996097817285058	WITHOUT_CLASSIFICATION	3.902182714942757E-4	DESIGN
todo what else to do here?	DESIGN	0.9862791724145897	DESIGN	0.01372082758541013	WITHOUT_CLASSIFICATION
put() has nowait semantics is this really appropriate? note that it needs to be async replication never local or sync	DESIGN	0.9427228715936578	DESIGN	0.05727712840634219	WITHOUT_CLASSIFICATION
'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. the need for it is intended to be alleviated with future developement thus it is not defined as an environment constant it is used to control whether we should consult the jdbc metadata to determine certain settings default values it is useful to not do this when the database may not be available (mainly in tools usage).	DESIGN	0.9999955066173796	DESIGN	4.493382620441456E-6	WITHOUT_CLASSIFICATION
todo get sql rendering out of this package!	DESIGN	0.5759250387335263	DESIGN	0.42407496126647365	WITHOUT_CLASSIFICATION
todo get sql rendering out of this package!	DESIGN	0.5759250387335263	DESIGN	0.42407496126647365	WITHOUT_CLASSIFICATION
todo eventually merge this with treecache and just add optional opt-lock support there.	DESIGN	0.9061476532514522	DESIGN	0.09385234674854778	WITHOUT_CLASSIFICATION
can happen because of the multiple ways cache.remove() can be invoked (	DESIGN	0.999850152208766	WITHOUT_CLASSIFICATION	1.4984779123387921E-4	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea	DESIGN	0.9913497039472056	WITHOUT_CLASSIFICATION	0.008650296052794437	DESIGN
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9999997431352318	DESIGN	2.5686476826795694E-7	WITHOUT_CLASSIFICATION
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9999997431352318	DESIGN	2.5686476826795694E-7	WITHOUT_CLASSIFICATION
fixme hacky workaround to jbcache-1202	DESIGN	0.9999945258137521	DESIGN	5.474186247960554E-6	WITHOUT_CLASSIFICATION
fixme hacky workaround to jbcache-1202	DESIGN	0.9999945258137521	DESIGN	5.474186247960554E-6	WITHOUT_CLASSIFICATION
todo i considered validating ts cache config here but decided to defer unti gettimestampscacheinstance() in case the cache is never actually used	DESIGN	0.9999212627644299	DESIGN	7.873723557005438E-5	WITHOUT_CLASSIFICATION
todo is this a valid operation on a timestamps cache?	DESIGN	0.7650626710992392	DESIGN	0.23493732890076072	WITHOUT_CLASSIFICATION
todo is this a valid operation on a timestamps cache?	DESIGN	0.7650626710992392	DESIGN	0.23493732890076072	WITHOUT_CLASSIFICATION
todo why not use the timestamp in a dataversion?	DESIGN	0.9907812845739821	DESIGN	0.009218715426017845	WITHOUT_CLASSIFICATION
can happen because of the multiple ways cache.remove() can be invoked (	DESIGN	0.999850152208766	WITHOUT_CLASSIFICATION	1.4984779123387921E-4	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea	DESIGN	0.9913497039472056	WITHOUT_CLASSIFICATION	0.008650296052794437	DESIGN
swaldman 2004-02-07 modify to allow null values to signify fall through to c3p0 poolconfig defaults	DESIGN	0.9995394512941885	WITHOUT_CLASSIFICATION	4.6054870581141324E-4	DESIGN
turn hibernate.c3p0. into c3p0. so c3p0 gets a chance to see all hibernate.c3p0.	DESIGN	0.9844709187514865	WITHOUT_CLASSIFICATION	0.01552908124851345	DESIGN
todo this bit actually has to be called after all cascades! but since identity insert is called synchronously instead of asynchronously as other actions it isn't	DESIGN	0.8925362567669811	WITHOUT_CLASSIFICATION	0.10746374323301891	DESIGN
todo reenable if we also fix the above todo	DESIGN	0.9628486763646698	DESIGN	0.03715132363533027	WITHOUT_CLASSIFICATION
todo inefficient if that cache is just going to ignore the updated state!	DESIGN	0.9778681621200659	WITHOUT_CLASSIFICATION	0.022131837879934103	DESIGN
we may be screwed here since the collection action is about to execute and we do not know the final owner key value	DESIGN	0.9999139846271475	WITHOUT_CLASSIFICATION	8.601537285239708E-5	DESIGN
create an action that will evict collection and entity regions based on queryspaces (table names). todo cache the autodetected information and pass it in instead.	DESIGN	0.6548878462154808	WITHOUT_CLASSIFICATION	0.34511215378451926	DESIGN
todo what else to do here?	DESIGN	0.9862791724145897	DESIGN	0.01372082758541013	WITHOUT_CLASSIFICATION
todo modify the class definition if not already transformed	DESIGN	0.9222050817355256	DESIGN	0.07779491826447434	WITHOUT_CLASSIFICATION
todo what else to do here?	DESIGN	0.9862791724145897	DESIGN	0.01372082758541013	WITHOUT_CLASSIFICATION
this is called by sessionfactory irregardless we just disregard here could also add a check to sessionfactory to only conditionally call start	DESIGN	0.9047024969886617	WITHOUT_CLASSIFICATION	0.09529750301133824	DESIGN
this is called by sessionfactory irregardless we just disregard here could also add a check to sessionfactory to only conditionally call stop	DESIGN	0.9207664591227777	WITHOUT_CLASSIFICATION	0.07923354087722236	DESIGN
todo to handle concurrent writes correctly this should return a lock to the client	DESIGN	0.9948327444171722	DESIGN	0.0051672555828278215	WITHOUT_CLASSIFICATION
put() has nowait semantics is this really appropriate? note that it needs to be async replication never local or sync	DESIGN	0.9427228715936578	DESIGN	0.05727712840634219	WITHOUT_CLASSIFICATION
todo to handle concurrent writes correctly the client should pass in a lock	DESIGN	0.8258875258559005	DESIGN	0.1741124741440996	WITHOUT_CLASSIFICATION
todo assumes all collections disassemble to an array!	DESIGN	0.992940974056014	WITHOUT_CLASSIFICATION	0.007059025943985911	DESIGN
todo reuse the preloadevent	DESIGN	0.8640975191431618	WITHOUT_CLASSIFICATION	0.13590248085683823	DESIGN
todo this was added to support initializing an entity's entityentry snapshot during reattach this should be refactored to instead expose a method to assemble a entityentry based on this state for return.	DESIGN	0.997296690229213	DESIGN	0.002703309770787045	WITHOUT_CLASSIFICATION
todo what is the implication of this?	DESIGN	0.9919490471386241	DESIGN	0.008050952861375962	WITHOUT_CLASSIFICATION
use count as the default. this mimics the old behavior although none might be a better option moving forward in the case of callable	DESIGN	0.971732659229695	WITHOUT_CLASSIFICATION	0.02826734077030498	DESIGN
todo joinkeycolumnname & foreignkeycolumnname should be called either here or at a slightly higer level in the stack (to get all the information we need) right now hbmbinder does not support the	DESIGN	0.9912798329735183	DESIGN	0.008720167026481644	WITHOUT_CLASSIFICATION
todo suck this into initlaziness!	DESIGN	0.9143186883046472	DESIGN	0.08568131169535276	WITHOUT_CLASSIFICATION
we have to set up the table later!! yuck	DESIGN	0.999707036248438	WITHOUT_CLASSIFICATION	2.9296375156191565E-4	DESIGN
todo better to degrade to lazy="false" if uninstrumented	DESIGN	0.9010705263337824	DESIGN	0.09892947366621764	WITHOUT_CLASSIFICATION
todo again how should this work for non-pojo entities?	DESIGN	0.9937000948265693	DESIGN	0.006299905173430767	WITHOUT_CLASSIFICATION
todo this is a bit of copy/paste from indexedcollection.createprimarykey()	DESIGN	0.9912354565594426	DESIGN	0.008764543440557531	WITHOUT_CLASSIFICATION
this inner class implements a case statement.perhaps im being a bit over-clever here	DESIGN	0.5304749808574961	WITHOUT_CLASSIFICATION	0.4695250191425039	DESIGN
todo bad implementation cos it depends upon ordering of mapping doc fixing this requires that collection/persistentclass gain access to the mappings reference from configuration (or the filterdefinitions map directly) sometime during configuration.buildsessionfactory (after all the types/filter-defs are known and before building persisters).	DESIGN	0.9406698285377979	DESIGN	0.059330171462202055	WITHOUT_CLASSIFICATION
use of a stringbuffer to workaround a jdk bug	DESIGN	0.9810949468561291	DESIGN	0.018905053143870865	WITHOUT_CLASSIFICATION
hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9998291546191069	WITHOUT_CLASSIFICATION	1.708453808931893E-4	DESIGN
fixme get the persistentclass	DESIGN	0.5718918123876104	WITHOUT_CLASSIFICATION	0.4281081876123896	DESIGN
fixme get the persistentclass	DESIGN	0.5718918123876104	WITHOUT_CLASSIFICATION	0.4281081876123896	DESIGN
icky workaround for mysql bug	DESIGN	0.9083574465175069	DESIGN	0.09164255348249312	WITHOUT_CLASSIFICATION
todo somehow add the newly created foreign keys to the internal collection	DESIGN	0.6362429538135455	DESIGN	0.36375704618645455	WITHOUT_CLASSIFICATION
todo possibly relax that	DESIGN	0.5087853065702853	WITHOUT_CLASSIFICATION	0.49121469342971463	DESIGN
todo possibly relax that	DESIGN	0.5087853065702853	WITHOUT_CLASSIFICATION	0.49121469342971463	DESIGN
todo possibly relax that	DESIGN	0.5087853065702853	WITHOUT_CLASSIFICATION	0.49121469342971463	DESIGN
use of a stringbuffer to workaround a jdk bug	DESIGN	0.9810949468561291	DESIGN	0.018905053143870865	WITHOUT_CLASSIFICATION
use a degenerated strategy for backward compatibility	DESIGN	0.9995258265999797	WITHOUT_CLASSIFICATION	4.7417340002028484E-4	DESIGN
sets can be just a view of a part of another collection. do we need to copy it to be sure it won't be changing underneath us? ie. this.set.addall(set)	DESIGN	0.9484174586783771	WITHOUT_CLASSIFICATION	0.0515825413216228	DESIGN
note that i parameter is now unused (delete it?)	DESIGN	0.9780984072252291	DESIGN	0.02190159277477091	WITHOUT_CLASSIFICATION
just to help out during the load (ugly i know)	DESIGN	0.998043792556463	WITHOUT_CLASSIFICATION	0.0019562074435369096	DESIGN
todo safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.9290828229693525	WITHOUT_CLASSIFICATION	0.07091717703064752	DESIGN
yick! need this for proper serialization/deserialization handling	DESIGN	0.899239899689021	WITHOUT_CLASSIFICATION	0.10076010031097901	DESIGN
todo get sql rendering out of this package!	DESIGN	0.5759250387335263	DESIGN	0.42407496126647365	WITHOUT_CLASSIFICATION
todo get sql rendering out of this package!	DESIGN	0.5759250387335263	DESIGN	0.42407496126647365	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9997622491590575	WITHOUT_CLASSIFICATION	2.3775084094252203E-4	DESIGN
todo get sql rendering out of this package!	DESIGN	0.5759250387335263	DESIGN	0.42407496126647365	WITHOUT_CLASSIFICATION
todo not sure this is correct could not find docs on how to do this.	DESIGN	0.9999932941528783	DESIGN	6.705847121668148E-6	WITHOUT_CLASSIFICATION
hsql has no blob/clob support . but just put these here for now!	DESIGN	0.9999837209155369	WITHOUT_CLASSIFICATION	1.627908446302433E-5	DESIGN
does this need holdlock also? return tablename + " with (updlock rowlock holdlock)"	DESIGN	0.9985856560824927	WITHOUT_CLASSIFICATION	0.0014143439175073025	DESIGN
sql-server at least needed this dropped after use strange!	DESIGN	0.9977162602040406	WITHOUT_CLASSIFICATION	0.002283739795959368	DESIGN
todo is there really any reason to kkeep trying if this fails once?	DESIGN	0.66977130327666	DESIGN	0.3302286967233401	WITHOUT_CLASSIFICATION
tbd should this be varbinary($1)? registercolumntype(types.varbinary "binary($1)")	DESIGN	0.9399034024125703	WITHOUT_CLASSIFICATION	0.0600965975874297	DESIGN
is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.999409798310062	WITHOUT_CLASSIFICATION	5.902016899379753E-4	DESIGN
xmlforest requires a new kind of function constructor	DESIGN	0.9994221749209345	WITHOUT_CLASSIFICATION	5.778250790654215E-4	DESIGN
does this dialect support the alter table syntax?	DESIGN	0.9983129235074101	WITHOUT_CLASSIFICATION	0.0016870764925899437	DESIGN
do we need to qualify index names with the schema name?	DESIGN	0.9996489933196582	WITHOUT_CLASSIFICATION	3.510066803418064E-4	DESIGN
does this dialect support the unique column syntax?	DESIGN	0.9899437211061957	WITHOUT_CLASSIFICATION	0.01005627889380436	DESIGN
does this dialect support check constraints?	DESIGN	0.9689848868553813	WITHOUT_CLASSIFICATION	0.031015113144618685	DESIGN
do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.982162959590655	WITHOUT_CLASSIFICATION	0.01783704040934493	DESIGN
does this dialect support the for update syntax?	DESIGN	0.9962035093586309	WITHOUT_CLASSIFICATION	0.003796490641369061	DESIGN
does this dialect support the oracle-style for update nowait syntax?	DESIGN	0.9962035093586309	WITHOUT_CLASSIFICATION	0.003796490641369061	DESIGN
does this dialect support for update of allowing particular rows to be locked?	DESIGN	0.9664241441756999	WITHOUT_CLASSIFICATION	0.03357585582430013	DESIGN
note there is a wierd implementation in the client side	DESIGN	0.9997326795238014	WITHOUT_CLASSIFICATION	2.673204761986025E-4	DESIGN
todo never reached since gettypename() actually throws an exception!	DESIGN	0.9956516480179688	WITHOUT_CLASSIFICATION	0.004348351982031232	DESIGN
todo should we additionally check the current isolation mode explicitly?	DESIGN	0.9032879030119316	DESIGN	0.09671209698806842	WITHOUT_CLASSIFICATION
todo remove this and just have subclasses use isolater/isolatedwork directly	DESIGN	0.9903795366753835	DESIGN	0.009620463324616581	WITHOUT_CLASSIFICATION
todo should orphans really be deleted during lock???	DESIGN	0.9294042204898273	DESIGN	0.07059577951017276	WITHOUT_CLASSIFICATION
orphans should not be deleted during merge??	DESIGN	0.9943436175001793	WITHOUT_CLASSIFICATION	0.005656382499820711	DESIGN
orphans should not be deleted during copy??	DESIGN	0.9943436175001793	WITHOUT_CLASSIFICATION	0.005656382499820711	DESIGN
i suppose?	DESIGN	0.9981879054426781	WITHOUT_CLASSIFICATION	0.001812094557321868	DESIGN
todo suck this logic into the collection!	DESIGN	0.6359234968959506	DESIGN	0.36407650310404943	WITHOUT_CLASSIFICATION
todo an alternative is to check if the owner has changed if it hasn't then get the id from collection.getowner()	DESIGN	0.9936299448065563	WITHOUT_CLASSIFICATION	0.006370055193443674	DESIGN
todorefactor + make this method private	DESIGN	0.9923866362829017	WITHOUT_CLASSIFICATION	0.007613363717098307	DESIGN
todo we can actually just determine this from the incoming entityentry-s	DESIGN	0.8932415438259848	DESIGN	0.10675845617401525	WITHOUT_CLASSIFICATION
todo should this be an initializeentityeventlistener??? (watch out for performance!)	DESIGN	0.9869466021714839	DESIGN	0.01305339782851611	WITHOUT_CLASSIFICATION
todo better to pass the id in as an argument?	DESIGN	0.9064288309414635	WITHOUT_CLASSIFICATION	0.09357116905853641	DESIGN
todo potentially look at optimizing these two arrays	DESIGN	0.7668179861788563	DESIGN	0.23318201382114365	WITHOUT_CLASSIFICATION
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.9997203720950943	DESIGN	2.7962790490565037E-4	WITHOUT_CLASSIFICATION
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.9997203720950943	DESIGN	2.7962790490565037E-4	WITHOUT_CLASSIFICATION
todo temporary	DESIGN	0.967372050052965	DESIGN	0.03262794994703499	WITHOUT_CLASSIFICATION
todo not quite sure about the full implications of this!	DESIGN	0.8574068503739743	DESIGN	0.14259314962602554	WITHOUT_CLASSIFICATION
todo not quite sure about the full implications of this!	DESIGN	0.8574068503739743	DESIGN	0.14259314962602554	WITHOUT_CLASSIFICATION
todo ugly here	DESIGN	0.9965144907328608	DESIGN	0.0034855092671391068	WITHOUT_CLASSIFICATION
this is kinda the best we can do	DESIGN	0.9474453434106542	WITHOUT_CLASSIFICATION	0.05255465658934576	DESIGN
todo this needn't exclude subclasses	DESIGN	0.5491884474466956	WITHOUT_CLASSIFICATION	0.45081155255330446	DESIGN
todo need map? the prob is a proper key right?	DESIGN	0.9996845530285088	DESIGN	3.1544697149123185E-4	WITHOUT_CLASSIFICATION
todo i'd much rather have this done from #endloadingcollection(collectionpersisterloadingcollectionentry)	DESIGN	0.9791300750850994	DESIGN	0.020869924914900563	WITHOUT_CLASSIFICATION
todo hack!!! note here we cleanup the load context when we have no more local lce entries. this "works" for the time being because really only the collection load contexts are implemented. long term this cleanup should become part of the "close result set" processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9997227094770306	DESIGN	2.772905229694401E-4	WITHOUT_CLASSIFICATION
todo should really move this log statement to collectiontype where this is used from	DESIGN	0.9999982862814334	DESIGN	1.7137185665734093E-6	WITHOUT_CLASSIFICATION
todo keep seperate notions of qt[] here for shallow/non-shallow queries	DESIGN	0.6049825180671168	DESIGN	0.39501748193288316	WITHOUT_CLASSIFICATION
todo add this info to the translator and aggregate it here	DESIGN	0.9506148920948873	DESIGN	0.049385107905112746	WITHOUT_CLASSIFICATION
todo move into collection type so we can use polymorphism!	DESIGN	0.9984528697605599	DESIGN	0.0015471302394400983	WITHOUT_CLASSIFICATION
todo should we check the current isolation mode explicitly?	DESIGN	0.9003981322726765	DESIGN	0.09960186772732359	WITHOUT_CLASSIFICATION
todo suck into event class	DESIGN	0.7873380501555445	DESIGN	0.21266194984445563	WITHOUT_CLASSIFICATION
do we even really need this? the update will fail anyway.	DESIGN	0.9582880725220893	WITHOUT_CLASSIFICATION	0.04171192747791076	DESIGN
hum should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9892282273873362	WITHOUT_CLASSIFICATION	0.010771772612663778	DESIGN
todo would it be better to do a refresh from db?	DESIGN	0.9908473245879122	DESIGN	0.00915267541208773	WITHOUT_CLASSIFICATION
todo we use two visitors here inefficient!	DESIGN	0.9297326077192689	DESIGN	0.07026739228073109	WITHOUT_CLASSIFICATION
this class has no proxies (so do a shortcut)	DESIGN	0.994058292224803	WITHOUT_CLASSIFICATION	0.005941707775196996	DESIGN
postload is needed for ejb3 todo reuse the postloadevent	DESIGN	0.9545208739698198	WITHOUT_CLASSIFICATION	0.04547912603018034	DESIGN
todo put this stuff back in to read snapshot from the second-level cache (needs some extra work)	DESIGN	0.8779009880461002	DESIGN	0.12209901195389983	WITHOUT_CLASSIFICATION
null or brand new collection this will also (inefficiently) handle arrays which have no snapshot so we can't do any better	DESIGN	0.9921746080156455	WITHOUT_CLASSIFICATION	0.007825391984354493	DESIGN
todo is this 100% correct?	DESIGN	0.9977859871471165	DESIGN	0.0022140128528834783	WITHOUT_CLASSIFICATION
todo iteratively get transient entities and retry merge until one of the following conditions 1) transientcopycache.size() == 0 2) transientcopycache.size() is not decreasing and copycache.size() is not increasing todo find out if retrying can add entities to copycache (don't think it can) for now just retry once throw transientobjectexception if there are still any transient entities	DESIGN	0.6237499512656886	DESIGN	0.37625004873431156	WITHOUT_CLASSIFICATION
entity name will not be available for non-pojo entities todo cache the entity name somewhere so that it is available to this exception	DESIGN	0.9988938048751798	DESIGN	0.0011061951248202526	WITHOUT_CLASSIFICATION
todo we should throw an exception if we really know for sure that this is a detached instance rather than just assuming throw new staleobjectstateexception(entityname id)	DESIGN	0.9921058993624529	DESIGN	0.007894100637547046	WITHOUT_CLASSIFICATION
todo perhaps we should additionally require that the incoming entity version be equivalent to the defined unsaved-value?	DESIGN	0.9996845034212286	DESIGN	3.1549657877139693E-4	WITHOUT_CLASSIFICATION
perhaps this should be an exception since it is only ever used in the above method?	DESIGN	0.9688249763429978	DESIGN	0.03117502365700215	WITHOUT_CLASSIFICATION
put a placeholder in entries so we don't recurse back and try to save() the same object again. question should this be done before onsave() is called? likewise should it be done before onupdate()?	DESIGN	0.9402527341756648	WITHOUT_CLASSIFICATION	0.059747265824335316	DESIGN
todo merge into one method!	DESIGN	0.8814606228922094	DESIGN	0.11853937710779064	WITHOUT_CLASSIFICATION
todo refactor to .sql package	DESIGN	0.9767590798928937	DESIGN	0.023240920107106364	WITHOUT_CLASSIFICATION
provides query splitting methods which were originally in querytranslator. <br> todo this will need to be refactored at some point. @author josh	DESIGN	0.9697098385399746	DESIGN	0.030290161460025364	WITHOUT_CLASSIFICATION
todo this is one of the ugliest and most fragile pieces of code in hibernate.	DESIGN	0.9063134398803713	DESIGN	0.09368656011962874	WITHOUT_CLASSIFICATION
todo temporary needed because currently persister is the one that creates and renders the join fragments for inheritence hierarchies	DESIGN	0.542697738993197	DESIGN	0.4573022610068031	WITHOUT_CLASSIFICATION
todo better way?!?	DESIGN	0.9464360368189827	DESIGN	0.05356396318101724	WITHOUT_CLASSIFICATION
not possible to simply re-use the versionpropertynode here as it causes oom errors due to circularity (	DESIGN	0.9984676340243107	WITHOUT_CLASSIFICATION	0.0015323659756892297	DESIGN
todothis is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9995194189984731	WITHOUT_CLASSIFICATION	4.8058100152686007E-4	DESIGN
todo this is a bit dodgy come up with a better way to check this (plus see above comment)	DESIGN	0.9999751063257369	DESIGN	2.4893674263097785E-5	WITHOUT_CLASSIFICATION
even here if only properties mapped to the "base table" are referenced in the set and where clauses this could be handled by the basicdelegate. todo decide if it is better performance-wise to perform that check or to simply use the multitableupdatedelegate	DESIGN	0.9998420652452596	DESIGN	1.5793475474034266E-4	WITHOUT_CLASSIFICATION
todo switch statements are always evil! we already had bugs because of forgotten token types. use polymorphism for this!	DESIGN	0.8398929698286869	DESIGN	0.16010703017131309	WITHOUT_CLASSIFICATION
todo we really need to be able to deal with component paths here also this is difficult because the hql-sql grammar expects all those node types to be fromreferencenodes. one potential fix here would be to convert the intoclause to just use a fromclause/fromelement combo (as a child of the insertstatement) and move all this logic into the insertstatement. that's probably the easiest approach (read least amount of changes to the grammar and code) but just doesn't feel right as then an insert would contain 2 from-clauses	DESIGN	0.9940627410880175	DESIGN	0.005937258911982447	WITHOUT_CLASSIFICATION
really there are two situations where it should be ok to allow the insertion into properties defined on a superclass 1) union-subclass with an abstract root entity 2) discrim-subclass #1 is handled already because of the fact that unionsubclasspersister alreay always returns 0 for this call we may want to disallow it for discrim-subclass just for consistency-sake (currently does not work anyway)	DESIGN	0.6884123450142042	DESIGN	0.31158765498579594	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9997622491590575	WITHOUT_CLASSIFICATION	2.3775084094252203E-4	DESIGN
implicit joins are always(?) ok to reuse	DESIGN	0.9999932454242528	WITHOUT_CLASSIFICATION	6.754575747161718E-6	DESIGN
todo we may also want to check that the types here map to exactly one column/jdbc-type can't think of a situation where arithmetic expression between multi-column mappings makes any sense.	DESIGN	0.8308724129473629	DESIGN	0.16912758705263709	WITHOUT_CLASSIFICATION
we do not know either type blind guess!	DESIGN	0.9937407328714727	WITHOUT_CLASSIFICATION	0.006259267128527335	DESIGN
todo used to be exprnoparens! was this needed?	DESIGN	0.9999999117648664	DESIGN	8.823513360330991E-8	WITHOUT_CLASSIFICATION
todo replace this with a more elegant solution.	DESIGN	0.9992430340770906	DESIGN	7.569659229095068E-4	WITHOUT_CLASSIFICATION
todo should this really return null? if not figure out something better to do here.	DESIGN	0.9999830867440601	DESIGN	1.6913255939913325E-5	WITHOUT_CLASSIFICATION
todo get sql rendering out of this package!	DESIGN	0.5759250387335263	DESIGN	0.42407496126647365	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9997622491590575	WITHOUT_CLASSIFICATION	2.3775084094252203E-4	DESIGN
ignore it the incoming property could not be found so we cannot be sure what to do here. at the very least the safest is to simply not apply any dereference toggling	DESIGN	0.9380674427175026	DESIGN	0.061932557282497226	WITHOUT_CLASSIFICATION
todo most of below was taken verbatim from dotnode should either delegate this logic or super-type it	DESIGN	0.6914341468982396	WITHOUT_CLASSIFICATION	0.3085658531017604	DESIGN
otherwise a trim-specification and/or a trim-character have been specified we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character the trim-source	DESIGN	0.9923381050846958	WITHOUT_CLASSIFICATION	0.007661894915304174	DESIGN
todo we should really just collect these from the various selectexpressions rather than regenerating here	DESIGN	0.9976953806572745	DESIGN	0.002304619342725529	WITHOUT_CLASSIFICATION
todo is this a bit ugly?	DESIGN	0.9948310382540004	DESIGN	0.00516896174599952	WITHOUT_CLASSIFICATION
need a better way to define the suffixes here	DESIGN	0.7905627747627817	WITHOUT_CLASSIFICATION	0.2094372252372183	DESIGN
todo something much better - look at the type of the other expression! todo have comparisonexpression and/or arithmeticexpression rules complete the resolution of boolean nodes.	DESIGN	0.9928444208896048	DESIGN	0.0071555791103952455	WITHOUT_CLASSIFICATION
todo what amount of significant digits need to be supported here? - from the decimalformat docs [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9573068811068535	DESIGN	0.04269311889314652	WITHOUT_CLASSIFICATION
needed the "clazz_" check to work around union-subclasses todo is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9994427861035216	DESIGN	5.572138964785011E-4	WITHOUT_CLASSIFICATION
we should actually rework this class to not implement parser and just process path expressions in the most convenient way.	DESIGN	0.9616758085102546	DESIGN	0.038324191489745335	WITHOUT_CLASSIFICATION
the class is now way to complex!	DESIGN	0.9964122927985587	WITHOUT_CLASSIFICATION	0.0035877072014413986	DESIGN
todo get sql rendering out of here	DESIGN	0.595811630446916	WITHOUT_CLASSIFICATION	0.4041883695530841	DESIGN
todo is there a better way?	DESIGN	0.995523556457879	DESIGN	0.004476443542121016	WITHOUT_CLASSIFICATION
must be done here because of side-effect! yuck	DESIGN	0.9978327566669155	WITHOUT_CLASSIFICATION	0.0021672433330844096	DESIGN
name from a super query (a bit inelegant that it shows up here)	DESIGN	0.9898290013805328	WITHOUT_CLASSIFICATION	0.010170998619467242	DESIGN
we should reengineer this class so that rather than the current ad - hoc linear approach to processing a stream of tokens we instead build up a tree of expressions.	DESIGN	0.8831793617709326	WITHOUT_CLASSIFICATION	0.11682063822906737	DESIGN
this is ugly here but needed because its a subquery	DESIGN	0.8645558651188466	WITHOUT_CLASSIFICATION	0.1354441348811533	DESIGN
unhappy about this being public is there a better way?	DESIGN	0.7355258572806809	DESIGN	0.26447414271931924	WITHOUT_CLASSIFICATION
make sure this is a defined parameter and check the incoming value type todo what should be the actual exception type here?	DESIGN	0.9999320948087326	DESIGN	6.79051912673245E-5	WITHOUT_CLASSIFICATION
todo this constructor form is only used from constructor directly below us can it go away?	DESIGN	0.9998919579003376	DESIGN	1.0804209966238066E-4	WITHOUT_CLASSIFICATION
todo copy/paste from sessionimpl pull up!	DESIGN	0.5213055960015774	WITHOUT_CLASSIFICATION	0.4786944039984226	DESIGN
todo should remove this exposure and have all references to the session's batcher use the connectionmanager.	DESIGN	0.9988623474516279	DESIGN	0.0011376525483720804	WITHOUT_CLASSIFICATION
todo should this get moved to persistentcontext? logically is persistentcontext the "thing" to which an interceptor gets attached?	DESIGN	0.9988171478284004	DESIGN	0.0011828521715995697	WITHOUT_CLASSIFICATION
todo what type?	DESIGN	0.9311130053977961	DESIGN	0.06888699460220393	WITHOUT_CLASSIFICATION
todo should seriously consider not allowing a txn to begin from a child session can always route the request to the root session	DESIGN	0.9816875686211769	DESIGN	0.018312431378823133	WITHOUT_CLASSIFICATION
short-circuit for performance	DESIGN	0.9983695735950463	WITHOUT_CLASSIFICATION	0.001630426404953629	DESIGN
not absolutely necessary but does help with aggressive release	DESIGN	0.9554764667629826	WITHOUT_CLASSIFICATION	0.04452353323701734	DESIGN
todo remove these last two as batcher is no longer managing connections	DESIGN	0.9183694376944158	DESIGN	0.0816305623055842	WITHOUT_CLASSIFICATION
work around a bug in all known connection pools.	DESIGN	0.6169959265172309	WITHOUT_CLASSIFICATION	0.38300407348276905	DESIGN
todo make this the factory for "entity mode related" sessions also means making this the target of transaction-synch and the thing that knows how to cascade things between related sessions at that point perhaps this thing is a "sessioncontext" and connectionmanager is a "jdbccontext"? a "sessioncontext" should live in the impl package	DESIGN	0.9999807058074106	DESIGN	1.9294192589338644E-5	WITHOUT_CLASSIFICATION
todo does this really need to be here? does the collection already have it's own up-to-date snapshot?	DESIGN	0.9999301250776089	DESIGN	6.987492239116527E-5	WITHOUT_CLASSIFICATION
todo the i==entityspan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9939727680154026	DESIGN	0.006027231984597438	WITHOUT_CLASSIFICATION
this form used from annotations (?). essentially the same as the above using a resultset-mapping reference but without cachemode readonly and comment. fixme annotations do not use it so it can be remove from my pov @deprecated @param query the sql query string @param resultsetref the result-set-mapping name @param queryspaces any specified query spaces (used for auto-flushing) @param cacheable whether the query results are cacheable @param cacheregion if cacheable the region into which to store the results @param timeout a jdbc-level timeout to be applied @param fetchsize a jdbc-level fetch-size to be applied @param flushmode the flush mode to use for this query @param parametertypes parameter type map @param callable does the query string represent a callable object (i.e. proc)	DESIGN	0.9999812772091752	DESIGN	1.8722790824855093E-5	WITHOUT_CLASSIFICATION
todo add the notion of enabled filters to the cachekey to differentiate filtered collections from non-filtered but cachekey is currently used for both collections and entities would ideally need to define two seperate ones currently this works in conjuction with the check on defaultinitializecollectioneventhandler.initializecollectionfromcache() (which makes sure to not read from cache with enabled filters). early exit!!!!!	DESIGN	0.9999327320296162	DESIGN	6.726797038378394E-5	WITHOUT_CLASSIFICATION
for sets we should end the collection load after resolving the entities since we might call hashcode() on the elements todo or we could do this polymorphically and have two different operations implemented differently for arrays	DESIGN	0.9978162035162588	DESIGN	0.002183796483741244	WITHOUT_CLASSIFICATION
this is not very nice (and quite slow)	DESIGN	0.9877573283737016	DESIGN	0.012242671626298355	WITHOUT_CLASSIFICATION
use of trim() here is ugly?	DESIGN	0.9963032437783885	WITHOUT_CLASSIFICATION	0.0036967562216115484	DESIGN
todo this is too conservative if all preceding joins were also inner joins we could use an inner join here	DESIGN	0.9816431855941177	DESIGN	0.01835681440588224	WITHOUT_CLASSIFICATION
todo look at the owning property and check that it isn't lazy (by instrumentation)	DESIGN	0.8429333681992268	DESIGN	0.15706663180077327	WITHOUT_CLASSIFICATION
todo inefficient	DESIGN	0.5405006783125108	DESIGN	0.4594993216874892	WITHOUT_CLASSIFICATION
why does this matter?	DESIGN	0.8984150182625816	WITHOUT_CLASSIFICATION	0.10158498173741845	DESIGN
from the collection of associations locate oja for the manytoone corresponding to this persister to fully define the many-to-many we need that oja so that we can use its alias here todo is there a better way here?	DESIGN	0.9999405227263589	DESIGN	5.947727364116374E-5	WITHOUT_CLASSIFICATION
todo this class depends directly upon criteriaimpl in the impl package add a criteriaimplementor interface	DESIGN	0.9974157711492865	DESIGN	0.0025842288507135383	WITHOUT_CLASSIFICATION
todo add a criteriaimplementor interface this class depends directly upon criteriaimpl in the impl package	DESIGN	0.9974157711492865	DESIGN	0.0025842288507135383	WITHOUT_CLASSIFICATION
todo not so sure this is needed	DESIGN	0.8167415779720147	DESIGN	0.1832584220279853	WITHOUT_CLASSIFICATION
meant to handle dynamic instantiation queries(copy from queryloader)	DESIGN	0.998914665985409	WITHOUT_CLASSIFICATION	0.0010853340145909984	DESIGN
todo the order in which entities are saved may matter (e.g. a particular transient entity may need to be saved before other transient entities can be saved keep retrying the batch of transient entities until either 1) there are no transient entities left in transientcopycache or 2) no transient entities were saved in the last batch for now just run through the transient entities and retry the merge	DESIGN	0.8348436815151239	WITHOUT_CLASSIFICATION	0.1651563184848762	DESIGN
todo this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9999992964522522	DESIGN	7.035477479105387E-7	WITHOUT_CLASSIFICATION
todo currently expects that the individual with expressions apply to the same sql table join. this may not be the case for joined-subclass where the property values might be coming from different tables in the joined hierarchy. at some point we should expand this to support that capability. however that has some difficulties 1) the biggest is how to handle ors when the individual comparisons are linked to different sql joins. 2) here we would need to track each comparison individually along with the join alias to which it applies and then pass that information back to the fromelement so it can pass it along to the joinsequence	DESIGN	0.8306974062451675	WITHOUT_CLASSIFICATION	0.16930259375483253	DESIGN
this function has a template -> restore output apply the template and write the result out todo downcast to avoid using an interface? yuck.	DESIGN	0.9897219032832721	WITHOUT_CLASSIFICATION	0.01027809671672792	DESIGN
at some point the generate phase needs to be moved out of here because a single object-level dml might spawn multiple sql dml command executions. possible to just move the sql generation for dml stuff but for consistency-sake probably best to just move responsiblity for the generation phase completely into the delegates (queryloader/statementexecutor) themselves. also not sure why queryloader currently even has a dependency on this at all does it need it? ideally like to see the walker itself given to the delegates directly	DESIGN	0.9999999925045088	DESIGN	7.495491253356201E-9	WITHOUT_CLASSIFICATION
get the right object from the list would it be easier to just call getentity() ??	DESIGN	0.9933718213309334	WITHOUT_CLASSIFICATION	0.00662817866906653	DESIGN
todo should we just collect these like with the collections above?	DESIGN	0.9968526337926965	DESIGN	0.0031473662073035376	WITHOUT_CLASSIFICATION
todo better to handle dynamic filters through implicit dynamicfilterparameterspecification see the discussion there in dynamicfilterparameterspecification's javadocs as to why it is currently not done that way.	DESIGN	0.9989988564504452	DESIGN	0.0010011435495547907	WITHOUT_CLASSIFICATION
/ used only for regression testing!!!! todo obviously get rid of all this junk ) /	DESIGN	0.9987927061868501	DESIGN	0.0012072938131498232	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.999985573066678	WITHOUT_CLASSIFICATION	1.4426933322103927E-5	DESIGN
todo deprecated remove eventually	DESIGN	0.9688503379303585	DESIGN	0.031149662069641464	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.999985573066678	WITHOUT_CLASSIFICATION	1.4426933322103927E-5	DESIGN
todo improve this hack!	DESIGN	0.9986291667444115	DESIGN	0.001370833255588464	WITHOUT_CLASSIFICATION
inheritance cycle detection (paranoid check)	DESIGN	0.9993164786958433	WITHOUT_CLASSIFICATION	6.835213041568082E-4	DESIGN
todo remove use of instanceof!	DESIGN	0.9765224435560526	DESIGN	0.023477556443947525	WITHOUT_CLASSIFICATION
shortcut	DESIGN	0.9998686221912517	WITHOUT_CLASSIFICATION	1.3137780874824314E-4	DESIGN
todo handle the case of a foreign key to something other than the pk	DESIGN	0.8460714434040668	DESIGN	0.1539285565959331	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.999985573066678	WITHOUT_CLASSIFICATION	1.4426933322103927E-5	DESIGN
todo remove	DESIGN	0.8563313784073362	DESIGN	0.14366862159266391	WITHOUT_CLASSIFICATION
todo remove	DESIGN	0.8563313784073362	DESIGN	0.14366862159266391	WITHOUT_CLASSIFICATION
todo remove	DESIGN	0.8563313784073362	DESIGN	0.14366862159266391	WITHOUT_CLASSIFICATION
todo throw exception?	DESIGN	0.709156309289028	DESIGN	0.290843690710972	WITHOUT_CLASSIFICATION
todo throw exception? maybe warn if not the same?	DESIGN	0.9374654632263993	DESIGN	0.06253453677360071	WITHOUT_CLASSIFICATION
todo make entitypersister not depend on sessionfactoryimplementor interface if possible	DESIGN	0.9914930264233612	DESIGN	0.008506973576638783	WITHOUT_CLASSIFICATION
todo is there a more elegant way than downcasting?	DESIGN	0.9882142551773603	DESIGN	0.011785744822639745	WITHOUT_CLASSIFICATION
todo encapsulate the protected instance variables!	DESIGN	0.697633625619735	WITHOUT_CLASSIFICATION	0.3023663743802651	DESIGN
should indicate that we are processing an insert/update/delete query with a subquery implied via a collection property function. here we need to use the table name itself as the qualification alias. todo verify this works for all databases todo is this also the case in non-"indexed" scenarios?	DESIGN	0.9892744732797378	DESIGN	0.010725526720262233	WITHOUT_CLASSIFICATION
todo copy/paste from insertrows()	DESIGN	0.5105372993504971	DESIGN	0.48946270064950287	WITHOUT_CLASSIFICATION
todo copy/paste from recreate()	DESIGN	0.5105372993504971	DESIGN	0.48946270064950287	WITHOUT_CLASSIFICATION
should this interface extend propertymapping?	DESIGN	0.8498500408076503	WITHOUT_CLASSIFICATION	0.15014995919234964	DESIGN
ie. the subquery! yuck!	DESIGN	0.9995504116373847	WITHOUT_CLASSIFICATION	4.4958836261537805E-4	DESIGN
todo move to .sql package!!	DESIGN	0.985697104092838	DESIGN	0.014302895907162137	WITHOUT_CLASSIFICATION
todo code duplication with singletableentitypersister	DESIGN	0.7022784553690704	DESIGN	0.29772154463092965	WITHOUT_CLASSIFICATION
todo it would be really really nice to use this to also model components!	DESIGN	0.9999007314571277	DESIGN	9.926854287243591E-5	WITHOUT_CLASSIFICATION
todo two hashmap lookups here is one too many	DESIGN	0.5578093329901226	DESIGN	0.4421906670098774	WITHOUT_CLASSIFICATION
todo code duplication with joinedsubclassentitypersister	DESIGN	0.7022784553690704	DESIGN	0.29772154463092965	WITHOUT_CLASSIFICATION
perhaps not really necessary	DESIGN	0.9456200046174358	DESIGN	0.05437999538256412	WITHOUT_CLASSIFICATION
note this assumes something about how propertyselectfragment is implemented by the subclass! was tounqotedaliasstrings( getidentifercolumnnames() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.8743552276684491	WITHOUT_CLASSIFICATION	0.12564477233155086	DESIGN
note this assumes something about how propertyselectfragment is implemented by the subclass! was tounqotedaliasstrings( getdiscriminatorcolumnname() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.8743552276684491	WITHOUT_CLASSIFICATION	0.12564477233155086	DESIGN
todo should we use select .. for update?	DESIGN	0.9666939783011269	DESIGN	0.03330602169887303	WITHOUT_CLASSIFICATION
todo optimize this better!	DESIGN	0.8164663697593523	DESIGN	0.18353363024064762	WITHOUT_CLASSIFICATION
todo should we allow suffixes on these ?	DESIGN	0.9950185668408359	DESIGN	0.0049814331591641085	WITHOUT_CLASSIFICATION
this is really ugly but necessary	DESIGN	0.9307048943376662	DESIGN	0.06929510566233374	WITHOUT_CLASSIFICATION
ugly little workaround for fact that createuniquekeyloaders() does not handle component properties	DESIGN	0.9999854811359784	DESIGN	1.451886402150052E-5	WITHOUT_CLASSIFICATION
todo disable batch loading if lockmode > read?	DESIGN	0.9951963717457095	WITHOUT_CLASSIFICATION	0.00480362825429045	DESIGN
append the sql to return the generated identifier todo suck into insert	DESIGN	0.5118426973601108	DESIGN	0.48815730263988927	WITHOUT_CLASSIFICATION
todo i am not so sure about the exception handling in this bit!	DESIGN	0.9968403002784232	DESIGN	0.003159699721576766	WITHOUT_CLASSIFICATION
todo is this really necessary????	DESIGN	0.9689244269417864	DESIGN	0.031075573058213547	WITHOUT_CLASSIFICATION
todo move to .sql package and refactor with similar things!	DESIGN	0.9988921085959489	DESIGN	0.0011078914040510992	WITHOUT_CLASSIFICATION
todo implement functionality this might be painful to do here as the "join post processing" for the subquery has already been performed (meaning that for theta-join dialects the join conditions have already been moved over to the where clause). a "simple" solution here might to perform "join post processing" once for the entire query (including any subqueries) at one fell swoop	DESIGN	0.9987008868745022	DESIGN	0.0012991131254978046	WITHOUT_CLASSIFICATION
todo this eventually needs to be removed	DESIGN	0.98313035432549	DESIGN	0.01686964567450999	WITHOUT_CLASSIFICATION
kinda ugly but needed for collections with a "." node mapping	DESIGN	0.9581162979759634	WITHOUT_CLASSIFICATION	0.04188370202403648	DESIGN
is this ok?	DESIGN	0.9974827175836507	WITHOUT_CLASSIFICATION	0.0025172824163493695	DESIGN
todo perhaps this should be some other runtimeexception	DESIGN	0.9999827522910555	DESIGN	1.7247708944488146E-5	WITHOUT_CLASSIFICATION
todo make this a bit nicer	DESIGN	0.9908413245870076	DESIGN	0.009158675412992442	WITHOUT_CLASSIFICATION
yuck	DESIGN	0.9992243144282856	WITHOUT_CLASSIFICATION	7.756855717144365E-4	DESIGN
todo we should provide some way to get keys of collection of statistics to make it easier to retrieve from a gui perspective	DESIGN	0.9999893104926557	DESIGN	1.0689507344226896E-5	WITHOUT_CLASSIFICATION
@return collection removal fixme even if isinverse="true"?	DESIGN	0.9243022587498416	DESIGN	0.07569774125015848	WITHOUT_CLASSIFICATION
todo will need reference to session factory to fully complete hhh-1907	DESIGN	0.9781455729375048	DESIGN	0.021854427062495126	WITHOUT_CLASSIFICATION
todo currently keeps getters and setters (instead of propertyaccessors) because of the way getgetter() and getsetter() are implemented currently yuck!	DESIGN	0.9171742609745638	DESIGN	0.0828257390254363	WITHOUT_CLASSIFICATION
todo redesign how propertyaccessors are acquired	DESIGN	0.870785047479312	DESIGN	0.12921495252068801	WITHOUT_CLASSIFICATION
todo yuck!!!	DESIGN	0.603553869736256	WITHOUT_CLASSIFICATION	0.39644613026374387	DESIGN
todo yuck!!! fix after hhh-1907 is complete	DESIGN	0.9895274259771433	DESIGN	0.010472574022856715	WITHOUT_CLASSIFICATION
todo need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9103460213866933	DESIGN	0.08965397861330672	WITHOUT_CLASSIFICATION
todo design new lifecycle for proxyfactory	DESIGN	0.7828348433260173	WITHOUT_CLASSIFICATION	0.21716515667398276	DESIGN
todo would be nice to handle proxy classes elegantly!	DESIGN	0.9291274365355287	DESIGN	0.07087256346447132	WITHOUT_CLASSIFICATION
todo copy/paste from manytoonetype	DESIGN	0.5105372993504971	DESIGN	0.48946270064950287	WITHOUT_CLASSIFICATION
todo should this be session.instantiate(persister )?	DESIGN	0.9914992628294105	DESIGN	0.008500737170589622	WITHOUT_CLASSIFICATION
todo this is a bit arbitrary expose a switch to the user?	DESIGN	0.9298435637223024	DESIGN	0.07015643627769759	WITHOUT_CLASSIFICATION
todo implement caching?! proxies?!	DESIGN	0.9032265472233734	DESIGN	0.09677345277662665	WITHOUT_CLASSIFICATION
todo is this right??	DESIGN	0.822039069417042	DESIGN	0.17796093058295792	WITHOUT_CLASSIFICATION
is this really necessary?	DESIGN	0.7935354723382184	WITHOUT_CLASSIFICATION	0.20646452766178167	DESIGN
todo move these to a new joinabletype abstract class extended by entitytype and persistentcollectiontype	DESIGN	0.992095877393987	DESIGN	0.00790412260601313	WITHOUT_CLASSIFICATION
todo this is very suboptimal for some subclasses (namely components) since it does not take advantage of two-phase-load	DESIGN	0.9804570023550745	DESIGN	0.019542997644925522	WITHOUT_CLASSIFICATION
worrying about proxies is perhaps a little bit of overkill here	DESIGN	0.9959499739505469	DESIGN	0.004050026049453154	WITHOUT_CLASSIFICATION
note very hackish workaround!! todo fix this so it will work for non-pojo entity mode	DESIGN	0.9999989722261137	DESIGN	1.027773886320404E-6	WITHOUT_CLASSIFICATION
todo fix this so it will work for non-pojo entity mode	DESIGN	0.9990858917092487	DESIGN	9.141082907514226E-4	WITHOUT_CLASSIFICATION
we would probably refactor to have logicparser (builds a tree of simple expressions connected by and or not) expressionparser (translates from oo terms like foo foo.bar foo.bar.baz to sql terms like foos.id foos.bar_id etc) and pathexpressionparser (which does much the same thing it does now)	DESIGN	0.9995305356621362	WITHOUT_CLASSIFICATION	4.6946433786364836E-4	DESIGN
todo this is a little inefficient don't need to do a whole deep replaceelements() call	DESIGN	0.9998811819169294	DESIGN	1.1881808307055843E-4	WITHOUT_CLASSIFICATION
workaround for weblogic	DESIGN	0.8993064130525019	DESIGN	0.1006935869474981	WITHOUT_CLASSIFICATION
todo this dependency is kinda bad	DESIGN	0.9890963558269287	DESIGN	0.010903644173071365	WITHOUT_CLASSIFICATION
ick!	DESIGN	0.9997622491590575	WITHOUT_CLASSIFICATION	2.3775084094252203E-4	DESIGN
short cut check	DESIGN	0.9985948113971653	WITHOUT_CLASSIFICATION	0.0014051886028346703	DESIGN
todo move to stringhelper?	DESIGN	0.985697104092838	DESIGN	0.014302895907162137	WITHOUT_CLASSIFICATION
yukky! don't you have subclasses for that! todo race conditions can happen here	DESIGN	0.6265772665993489	DESIGN	0.3734227334006511	WITHOUT_CLASSIFICATION
todo we probably should have a statisticsnotpublishedexception to make it clean	DESIGN	0.9998110467840541	DESIGN	1.889532159458914E-4	WITHOUT_CLASSIFICATION
fixme hack to work around fact that calling node added = root.addchild( fqn ) doesn't properly set the version on the node	DESIGN	0.9999999730935742	DESIGN	2.690642570679214E-8	WITHOUT_CLASSIFICATION
todo i considered validating the presence of the ts cache here but decided to defer unti getquerycacheinstance() in case the cache is never actually used	DESIGN	0.9998938791871044	DESIGN	1.0612081289553125E-4	WITHOUT_CLASSIFICATION
need to do that here rather than in the save event listener to let the post insert events to have a id-filled entity when identity is used (ejb3)	DESIGN	0.860264125530994	DESIGN	0.1397358744690061	WITHOUT_CLASSIFICATION
todo simply remove this override if we fix the above todos	DESIGN	0.9966049259895415	DESIGN	0.003395074010458383	WITHOUT_CLASSIFICATION
this is used by sessionfactoryimpl to hand to the generated sessionimpl was the only reason i could see that we cannot just use null as settings.cacheprovider	DESIGN	0.7390992913486132	DESIGN	0.2609007086513868	WITHOUT_CLASSIFICATION
this is done here 'cos we might only know the type here (ugly!) todo improve this a lot	DESIGN	0.9962392882784527	DESIGN	0.003760711721547335	WITHOUT_CLASSIFICATION
todo would love to have this work on a notification basis where the successful binding of an entity/subclass would emit a notification which the extendsqueue entries could react to	DESIGN	0.9641888840305781	DESIGN	0.03581111596942185	WITHOUT_CLASSIFICATION
todo not sure the best way to handle this. the non-performant way	DESIGN	0.9920470436306305	DESIGN	0.007952956369369614	WITHOUT_CLASSIFICATION
would be better to use the element-type to determine whether the old and the new are equal here the problem being we do not necessarily have access to the element type in all cases	DESIGN	0.8495154456123792	WITHOUT_CLASSIFICATION	0.1504845543876207	DESIGN
this next bit is to allow for both unsaved-value="negative" and for "older" behavior where version number did not get seeded if it was already set in the object todo shift it into unsaved-value strategy	DESIGN	0.9999630205512827	DESIGN	3.697944871722511E-5	WITHOUT_CLASSIFICATION
merges don't cascade to uninitialized collections todo perhaps this does need to cascade after all.	DESIGN	0.988885482796536	DESIGN	0.011114517203463955	WITHOUT_CLASSIFICATION
todo an alternative is to check if the owner has changed if it hasn't then return collection.getowner()	DESIGN	0.9953646537480663	WITHOUT_CLASSIFICATION	0.004635346251933674	DESIGN
it is possible that the tree-walking in outerjoinloader can get to an association defined by a subclass in which case the property-ref might refer to a property defined on a subclass of the current class in this case the table name is not known - this temporary solution assumes that the property-ref refers to a property of the subclass table that the association belongs to (a reasonable guess) todo fix this add outerjoinloadable.getsubclasspropertytablename(string propertyname)	DESIGN	0.9999994666673049	DESIGN	5.333326950332614E-7	WITHOUT_CLASSIFICATION
this only works because collection entries are kept in a sequenced map by persistence context (maybe we should do like entities and keep a separate sequences set) todo calling entryset on an identitymap is slow!!	DESIGN	0.9983493388638958	DESIGN	0.0016506611361041936	WITHOUT_CLASSIFICATION
important to account for newly saved entities in query todo some kind of check for new status	DESIGN	0.9807621654381792	DESIGN	0.019237834561820814	WITHOUT_CLASSIFICATION
brand new collection todo or an array!! we can't lock objects with arrays now??	DESIGN	0.5960667040018357	WITHOUT_CLASSIFICATION	0.40393329599816435	DESIGN
todo if object was an uninitialized proxy this is inefficient resulting in two sql selects	DESIGN	0.6553689431007792	WITHOUT_CLASSIFICATION	0.3446310568992208	DESIGN
before cascade! todo should this be session.instantiate(persister )?	DESIGN	0.9866783732922669	DESIGN	0.013321626707733063	WITHOUT_CLASSIFICATION
todo absolutely no usages of this constructor form can it go away?	DESIGN	0.9109961390140073	DESIGN	0.08900386098599274	WITHOUT_CLASSIFICATION
todo need to find a clean way to handle the "event source" role a seperate classs responsible for generating/dispatching events just duplicates most of the session methods passing around seperate reto interceptor factory actionqueue and persistentcontext is not manageable	DESIGN	0.9999999470553156	DESIGN	5.2944684543163974E-8	WITHOUT_CLASSIFICATION
todo remove	DESIGN	0.8563313784073362	DESIGN	0.14366862159266391	WITHOUT_CLASSIFICATION
aliasrefnode.resolve( false false aliasrefnode.gettext() ) todo is it kosher to do it here? todo is it kosher to do it here?	DESIGN	0.9580565143286714	DESIGN	0.0419434856713286	WITHOUT_CLASSIFICATION
no explicit select expression render the id and properties projection lists for every persister in the from clause into a single 'token node'. todo the only reason we need this stuff now is collection filters we should get rid of derived select clause completely!	DESIGN	0.9652771099735962	DESIGN	0.03472289002640382	WITHOUT_CLASSIFICATION
todo an optimization here would be to consider cascade deletes and not gen those delete statements the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> the table info gotten here should really be self-contained (i.e. a class representation defining all the needed attributes) then we could then get an array of those	DESIGN	0.9991414664425972	DESIGN	8.585335574029195E-4	WITHOUT_CLASSIFICATION
todo get sql rendering out of here create an ast for the join expressions. use the sql generator grammar to generate the sql text for the index expression.	DESIGN	0.9967043793121174	WITHOUT_CLASSIFICATION	0.0032956206878825235	DESIGN
todo this really needs to be delayed unitl after we definitively know all node types where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DESIGN	0.9219831111464183	DESIGN	0.07801688885358166	WITHOUT_CLASSIFICATION
todo figure out a better way to get the from elements in a proper tree structure. if this is not the destination of a many-to-many add it as a child of the origin.	DESIGN	0.9961328771263384	DESIGN	0.0038671228736616788	WITHOUT_CLASSIFICATION
work around that crazy issue where the tree contains "empty" fromelements (no text) afaict this is caused by fromelementfactory.createcollectionjoin()	DESIGN	0.9503712512531773	WITHOUT_CLASSIFICATION	0.04962874874682268	DESIGN
todo this class does too many things! we need a different kind of path expression parser for each of the diffferent ways in which path expressions can occur	DESIGN	0.9804134416120502	DESIGN	0.019586558387949794	WITHOUT_CLASSIFICATION
real hacky used to count the nesting of parentheses	DESIGN	0.9597429302217156	WITHOUT_CLASSIFICATION	0.040257069778284374	DESIGN
todo would be really nice to cache the spec on the query-def so as to not have to re-calc the hash currently not doable though because of the resultset-ref stuff	DESIGN	0.7123943182324847	WITHOUT_CLASSIFICATION	0.2876056817675152	DESIGN
for arrays we should end the collection load before resolving the entities since the actual array instances are not instantiated during loading todo or we could do this polymorphically and have two different operations implemented differently for arrays	DESIGN	0.9852476443475012	DESIGN	0.014752355652498722	WITHOUT_CLASSIFICATION
polymorphism not really handled completely correctly perhapswell actually its ok assuming that the entity name used in the lookup is the same as the the one used here which it will be	DESIGN	0.9938187670575896	WITHOUT_CLASSIFICATION	0.006181232942410396	DESIGN
todo should "record" how many properties we have reffered to - and if we don't get'em'all we throw an exception! way better than trial and error )	DESIGN	0.9999879881841363	DESIGN	1.2011815863778587E-5	WITHOUT_CLASSIFICATION
very important!!!! - this class needs to be free of any static references to any cglib or javassist classes. otherwise users will always need both on their classpaths no matter which (if either) they use. another option here would be to remove the hibernate.ispropertyinitialized() method and have the users go through the sessionfactory to get this information.	DESIGN	0.9236693859909979	WITHOUT_CLASSIFICATION	0.07633061400900207	DESIGN
todo is it really neceassry to provide configuration to collectionpersisters ? should it not be enough with associated class ? or why does entitypersister's not get access to configuration ? the only reason i could see that configuration gets passed to collection persisters is so that they can look up the dom4j node name of the entity element in case no explicit node name was applied at the collection element level. are you kidding me? trivial to fix then. just store and expose the node name on the entity persister (which the collection persister looks up anyway via other means).	DESIGN	0.9999999940106901	DESIGN	5.989309895359992E-9	WITHOUT_CLASSIFICATION
for backward compatibility allow a set with no not-null element columns using all columns in the row locater sql todo create an implicit not null constraint on all cols?	DESIGN	0.9036388697759535	WITHOUT_CLASSIFICATION	0.09636113022404644	DESIGN
spaces todo i'm not sure but perhaps we should exclude abstract denormalized tables?	DESIGN	0.9996625340050939	DESIGN	3.3746599490614473E-4	WITHOUT_CLASSIFICATION
workaround for backward compatibility of sets with no not-null columns assume all columns are used in the row locator sql	DESIGN	0.5187947910982045	WITHOUT_CLASSIFICATION	0.48120520890179563	DESIGN
note that this method could easily be moved up to basicentitypersister if we ever needed to reuse it from other subclasses	DESIGN	0.8431271284344289	WITHOUT_CLASSIFICATION	0.1568728715655711	DESIGN
index += getpropertycolumnspan( i ) todo this is kinda slow	DESIGN	0.9526288786164854	DESIGN	0.04737112138351464	WITHOUT_CLASSIFICATION
todo need some caching scheme? really comes down to decision regarding amount of state (if any) kept on propertyaccessors	DESIGN	0.5241528230430728	WITHOUT_CLASSIFICATION	0.47584717695692724	DESIGN
todo here is why we need to make bytecode provider global ( todo again fix this after hhh-1907 is complete	DESIGN	0.9999869973971486	DESIGN	1.3002602851303078E-5	WITHOUT_CLASSIFICATION
todo yuck! this is not quite good enough it's a quick hack around the problem of having a to-one association that refers to an embedded component	DESIGN	0.9999999999317549	DESIGN	6.824507922091856E-11	WITHOUT_CLASSIFICATION
for dom4j "collections" only todo it would be better if this was done at the higher level by printer	DESIGN	0.945745984342156	DESIGN	0.054254015657843935	WITHOUT_CLASSIFICATION
would be great to move all this below here into another method that could also be used from the new scrolling stuff. would need to change the way the max-row stuff is handled (i.e. behind an interface) so that i could do the control breaking at the means to know when to stop	DESIGN	0.9999999857498064	DESIGN	1.4250193676151659E-8	WITHOUT_CLASSIFICATION
todo can we always use the "null property" approach for everything?	DESIGN	0.9535803522399349	DESIGN	0.046419647760065096	WITHOUT_CLASSIFICATION
polymorphism comment above	DESIGN	0.999964222813906	WITHOUT_CLASSIFICATION	3.5777186093975976E-5	DESIGN
some messy complex stuff here since createcriteria() can take an aliased path or a path rooted at the creating criteria instance	DESIGN	0.9999995541149614	WITHOUT_CLASSIFICATION	4.458850384794182E-7	DESIGN
todo really bad evil hack to fix!!!	DESIGN	0.9999999552913725	DESIGN	4.470862744699051E-8	WITHOUT_CLASSIFICATION
ugly hack for cases like "elements(foo.bar.collection)" (multi-part path expression ending in elements or indices)	DESIGN	0.9949807522773155	DESIGN	0.00501924772268446	WITHOUT_CLASSIFICATION
try block is a hack around fact that currently tuplizers are not given the opportunity to resolve a subclass entity name. this allows the (we assume custom) interceptor the ability to influence this decision if we were not able to based on the given entityname	DESIGN	0.9999973700767353	DESIGN	2.6299232646758532E-6	WITHOUT_CLASSIFICATION
/ hack alert !!!!!!!!!!!!!!!!!!!!!!!!!!!! attempt to work around "ghost" impliedfromelements that occasionally show up between the actual things being joined. this consistently occurs from index nodes (at least against many-to-many). not sure if there are other conditions essentially look-ahead to the next fromelement that actually writes something to the sql	DESIGN	0.7321497653866054	DESIGN	0.2678502346133946	WITHOUT_CLASSIFICATION
init the table here instead of earlier so that we can get a quoted table name todo would it be better to simply pass the qualified table name instead of splitting it up into schema/catalog/table names	DESIGN	0.8700052838133683	DESIGN	0.1299947161866317	WITHOUT_CLASSIFICATION
todo would be great to have a mapping#hasnonidentifierpropertynamedid method i don't believe that mapping#getreferencedpropertytype accounts for the identifier property so if it returns for a property named 'id' then we should have a non-id field named id	DESIGN	0.9992751533576875	DESIGN	7.248466423125996E-4	WITHOUT_CLASSIFICATION
todo is this really necessary????	DESIGN	0.9689244269417864	DESIGN	0.031075573058213547	WITHOUT_CLASSIFICATION
todo ideally we need the construction of propertyaccessor to take the following 1) entitymode 2) entitymode-specific data (i.e. the classname for pojo entities) 3) property-specific data based on the entitymode (i.e. property-name or dom4j-node-name) the easiest way with the introduction of the new runtime-metamodel classes would be the the following predicates 1) propertyaccessorfactory.getpropertyaccessor() takes references to both a org.hibernate.metadata.entitymodemetadata and org.hibernate.metadata.property 2) what is now termed a "propertyaccessor" stores any values needed from those two pieces of information 3) code can then simply call propertyaccess.getgetter() with no parameters likewise with propertyaccessor.getsetter()	DESIGN	0.6241495094288669	DESIGN	0.3758504905711331	WITHOUT_CLASSIFICATION
todo this is temporary in that the end result will probably not take a property reference per-se.	DESIGN	0.9996096868139784	DESIGN	3.903131860216239E-4	WITHOUT_CLASSIFICATION
todo this eventually needs to be removed	DESIGN	0.98313035432549	DESIGN	0.01686964567450999	WITHOUT_CLASSIFICATION
todo make this a bit nicer	DESIGN	0.9908413245870076	DESIGN	0.009158675412992442	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9990698404327013	DESIGN	9.301595672986658E-4	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9990698404327013	DESIGN	9.301595672986658E-4	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9990698404327013	DESIGN	9.301595672986658E-4	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9990698404327013	DESIGN	9.301595672986658E-4	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9990698404327013	DESIGN	9.301595672986658E-4	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9990698404327013	DESIGN	9.301595672986658E-4	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9990698404327013	DESIGN	9.301595672986658E-4	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9990698404327013	DESIGN	9.301595672986658E-4	WITHOUT_CLASSIFICATION
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9999997431352318	DESIGN	2.5686476826795694E-7	WITHOUT_CLASSIFICATION
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9999997431352318	DESIGN	2.5686476826795694E-7	WITHOUT_CLASSIFICATION
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9999997431352318	DESIGN	2.5686476826795694E-7	WITHOUT_CLASSIFICATION
todo probably better to calculate these and pass them in as it'll be more performant	DESIGN	0.9966054935398496	DESIGN	0.003394506460150264	WITHOUT_CLASSIFICATION
