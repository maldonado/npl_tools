test out the optimizer	WITHOUT_CLASSIFICATION	0.9999921462861444	WITHOUT_CLASSIFICATION	7.853713855491016E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9996796653239958	WITHOUT_CLASSIFICATION	3.2033467600417123E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9996796653239958	WITHOUT_CLASSIFICATION	3.2033467600417123E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9996796653239958	WITHOUT_CLASSIFICATION	3.2033467600417123E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9996796653239958	WITHOUT_CLASSIFICATION	3.2033467600417123E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9996796653239958	WITHOUT_CLASSIFICATION	3.2033467600417123E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9996796653239958	WITHOUT_CLASSIFICATION	3.2033467600417123E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9996796653239958	WITHOUT_CLASSIFICATION	3.2033467600417123E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9995613739247083	WITHOUT_CLASSIFICATION	4.386260752915824E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9995613739247083	WITHOUT_CLASSIFICATION	4.386260752915824E-4	DESIGN
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9994494756056863	WITHOUT_CLASSIFICATION	5.505243943137207E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.999514050864903	WITHOUT_CLASSIFICATION	4.859491350970499E-4	DESIGN
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999571273477574	WITHOUT_CLASSIFICATION	4.287265224254835E-5	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999870647792168	WITHOUT_CLASSIFICATION	1.293522078310363E-5	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999870647792168	WITHOUT_CLASSIFICATION	1.293522078310363E-5	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999994584353944	WITHOUT_CLASSIFICATION	5.415646055608463E-7	DESIGN
invokeinterface invoke enabled.getinterceptfieldcallback()	WITHOUT_CLASSIFICATION	0.9999254855727803	WITHOUT_CLASSIFICATION	7.451442721967242E-5	DESIGN
putfield new value of the field	WITHOUT_CLASSIFICATION	0.999871722185321	WITHOUT_CLASSIFICATION	1.2827781467900854E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9989510985197907	WITHOUT_CLASSIFICATION	0.0010489014802093537	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999911917933	WITHOUT_CLASSIFICATION	8.808206699934217E-6	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999911917933	WITHOUT_CLASSIFICATION	8.808206699934217E-6	DESIGN
long	WITHOUT_CLASSIFICATION	0.999685675294314	WITHOUT_CLASSIFICATION	3.143247056859921E-4	DESIGN
just decrement the lock don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.999947445930257	WITHOUT_CLASSIFICATION	5.2554069743005295E-5	DESIGN
decode row selection	WITHOUT_CLASSIFICATION	0.999871840298132	WITHOUT_CLASSIFICATION	1.281597018679727E-4	DESIGN
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9996097828575168	WITHOUT_CLASSIFICATION	3.902171424831681E-4	DESIGN
again ccs did not have such a concept but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not jta aware.	WITHOUT_CLASSIFICATION	0.9999614550904122	WITHOUT_CLASSIFICATION	3.8544909587807827E-5	DESIGN
check	WITHOUT_CLASSIFICATION	0.9992107571660915	WITHOUT_CLASSIFICATION	7.89242833908493E-4	DESIGN
row id	WITHOUT_CLASSIFICATION	0.9998663903969699	WITHOUT_CLASSIFICATION	1.336096030300752E-4	DESIGN
composite-id	WITHOUT_CLASSIFICATION	0.999514050864903	WITHOUT_CLASSIFICATION	4.859491350970499E-4	DESIGN
discriminator	WITHOUT_CLASSIFICATION	0.9995144035986447	WITHOUT_CLASSIFICATION	4.8559640135527614E-4	DESIGN
property prop = new property() prop.setname("id") prop.setpropertyaccessorname("embedded") prop.setvalue(id) entity.setidentifierproperty(prop)	WITHOUT_CLASSIFICATION	0.9998789285593587	WITHOUT_CLASSIFICATION	1.2107144064123131E-4	DESIGN
dynamic insert	WITHOUT_CLASSIFICATION	0.9997165406741901	WITHOUT_CLASSIFICATION	2.834593258098711E-4	DESIGN
persister	WITHOUT_CLASSIFICATION	0.9983617439374499	WITHOUT_CLASSIFICATION	0.0016382560625500912	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9989203147642204	WITHOUT_CLASSIFICATION	0.00107968523577966	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9995865239515832	WITHOUT_CLASSIFICATION	4.13476048416782E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9995865239515832	WITHOUT_CLASSIFICATION	4.13476048416782E-4	DESIGN
generated properties can never be insertable	WITHOUT_CLASSIFICATION	0.9943660694734939	WITHOUT_CLASSIFICATION	0.0056339305265060815	DESIGN
table	WITHOUT_CLASSIFICATION	0.9998492051964597	WITHOUT_CLASSIFICATION	1.5079480354024036E-4	DESIGN
by default natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999194246990935	WITHOUT_CLASSIFICATION	8.057530090650487E-5	DESIGN
( (column) ( (simplevalue) ic.getindex() ).getcolumniterator().next() ).setnullable(false)	WITHOUT_CLASSIFICATION	0.9998515034280713	WITHOUT_CLASSIFICATION	1.4849657192878747E-4	DESIGN
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.790844701655692	WITHOUT_CLASSIFICATION	0.209155298344308	DESIGN
build a resultsetmappingdefinition given a containing element for the "return-xxx" elements @param resultsetelem the element containing the return definitions. @param path no clue @param mappings the current processing state. @return the description of the mappings	WITHOUT_CLASSIFICATION	0.9998270224061373	WITHOUT_CLASSIFICATION	1.729775938626805E-4	DESIGN
private boolean showsql private boolean formatsql	WITHOUT_CLASSIFICATION	0.9991763801847068	WITHOUT_CLASSIFICATION	8.236198152931737E-4	DESIGN
public boolean isshowsqlenabled() { return showsql } public boolean isformatsqlenabled() { return formatsql }	WITHOUT_CLASSIFICATION	0.9981883567551908	WITHOUT_CLASSIFICATION	0.0018116432448092013	DESIGN
set a custom entity resolver. this entity resolver must be set before addxxx(misc) call. default value is {@link org.hibernate.util.dtdentityresolver} @param entityresolver entity resolver to use	WITHOUT_CLASSIFICATION	0.996813086277109	WITHOUT_CLASSIFICATION	0.0031869137228910925	DESIGN
final list extendsqueue	WITHOUT_CLASSIFICATION	0.9998909090694656	WITHOUT_CLASSIFICATION	1.0909093053437559E-4	DESIGN
if close() is called guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999100468007207	WITHOUT_CLASSIFICATION	8.995319927932344E-5	DESIGN
if a threadlocalsessioncontext-bound session happens to get serialized to be completely correct we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9694124815701085	WITHOUT_CLASSIFICATION	0.030587518429891526	DESIGN
on the inverse it makes sense that if a threadlocalsessioncontext- bound session then gets deserialized to go ahead and re-bind it to the threadlocalsessioncontext session map.	WITHOUT_CLASSIFICATION	0.9651200789423918	WITHOUT_CLASSIFICATION	0.0348799210576082	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997658049068745	WITHOUT_CLASSIFICATION	2.3419509312548966E-4	DESIGN
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9997802675705474	WITHOUT_CLASSIFICATION	2.197324294526053E-4	DESIGN
optimisticcache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998993914330049	WITHOUT_CLASSIFICATION	1.0060856699508472E-4	DESIGN
cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998742088893455	WITHOUT_CLASSIFICATION	1.2579111065453942E-4	DESIGN
option.setdataversion( nonlockingdataversion.instance )	WITHOUT_CLASSIFICATION	0.9993316262540104	WITHOUT_CLASSIFICATION	6.68373745989595E-4	DESIGN
do the put outside the scope of the jta txn	WITHOUT_CLASSIFICATION	0.9997706133075948	WITHOUT_CLASSIFICATION	2.2938669240515094E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9996695162880856	WITHOUT_CLASSIFICATION	3.304837119143956E-4	DESIGN
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (npes)	WITHOUT_CLASSIFICATION	0.9761300439857058	WITHOUT_CLASSIFICATION	0.023869956014294185	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9997079317331913	WITHOUT_CLASSIFICATION	2.920682668087514E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9996695162880856	WITHOUT_CLASSIFICATION	3.304837119143956E-4	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9997079317331913	WITHOUT_CLASSIFICATION	2.920682668087514E-4	DESIGN
do the failfast put outside the scope of the jta txn	WITHOUT_CLASSIFICATION	0.9997706133075948	WITHOUT_CLASSIFICATION	2.2938669240515094E-4	DESIGN
note evict() operates locally only (i.e. does not propogate to any other nodes in the potential cluster). this is exactly what is needed when we destroy() here destroy() is used as part of the process of shutting down a sessionfactory thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999887946828324	DESIGN	1.1205317167577905E-5	WITHOUT_CLASSIFICATION
protected regionrootlistener listener	WITHOUT_CLASSIFICATION	0.9994172522433626	WITHOUT_CLASSIFICATION	5.827477566372841E-4	DESIGN
establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9993416868258649	WITHOUT_CLASSIFICATION	6.583131741352359E-4	DESIGN
if we've been blocking for the mutex perhaps another thread has already reestablished the root. in case the node was reestablised via replication confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9844838118259833	WITHOUT_CLASSIFICATION	0.015516188174016756	DESIGN
for pessimistic locking we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999860048177074	WITHOUT_CLASSIFICATION	1.399518229262917E-5	DESIGN
the rest only matters for optimistic locking where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.996867220599076	WITHOUT_CLASSIFICATION	0.00313277940092405	DESIGN
don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.985158594393646	WITHOUT_CLASSIFICATION	0.014841405606354151	DESIGN
make sure the root node for the region exists and has a dataversion that never complains	WITHOUT_CLASSIFICATION	0.9999271375475762	WITHOUT_CLASSIFICATION	7.286245242369782E-5	DESIGN
never evict this node	WITHOUT_CLASSIFICATION	0.9981470180381583	WITHOUT_CLASSIFICATION	0.0018529819618416702	DESIGN
fix up the resident flag	WITHOUT_CLASSIFICATION	0.9802505246598215	WITHOUT_CLASSIFICATION	0.019749475340178412	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9997079317331913	WITHOUT_CLASSIFICATION	2.920682668087514E-4	DESIGN
we ignore minimalputoverride. jbosscache putforexternalread is already about as minimal as we can get it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999951689907013	WITHOUT_CLASSIFICATION	4.831009298664622E-6	DESIGN
no-op. we don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9990144522625198	WITHOUT_CLASSIFICATION	9.85547737480148E-4	DESIGN
this should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9522513447438671	WITHOUT_CLASSIFICATION	0.04774865525613288	DESIGN
we only build caches if none were passed in. passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999034059448222	WITHOUT_CLASSIFICATION	9.659405517779186E-5	DESIGN
set up the cache factory	WITHOUT_CLASSIFICATION	0.9980731006945167	WITHOUT_CLASSIFICATION	0.001926899305483324	DESIGN
see if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999895739653105	WITHOUT_CLASSIFICATION	1.0426034689412709E-5	DESIGN
default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999790247279688	WITHOUT_CLASSIFICATION	2.097527203104945E-5	DESIGN
default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999877970425458	WITHOUT_CLASSIFICATION	1.2202957454250314E-5	DESIGN
for timestamps we default to a separate config	WITHOUT_CLASSIFICATION	0.9997234501972572	WITHOUT_CLASSIFICATION	2.765498027428529E-4	DESIGN
we can't change the tm on a running cache just check if the cache has no tm and we're ok with that	WITHOUT_CLASSIFICATION	0.9996356295407482	WITHOUT_CLASSIFICATION	3.643704592517761E-4	DESIGN
configure the cache to use our tm	WITHOUT_CLASSIFICATION	0.9995787234229253	WITHOUT_CLASSIFICATION	4.2127657707463157E-4	DESIGN
make sure jbc doesn't look one up	WITHOUT_CLASSIFICATION	0.9997514103141584	WITHOUT_CLASSIFICATION	2.48589685841649E-4	DESIGN
this method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.5055102831979181	WITHOUT_CLASSIFICATION	0.49448971680208176	DESIGN
make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9985104215940558	WITHOUT_CLASSIFICATION	0.0014895784059441523	DESIGN
we use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9997458649820363	WITHOUT_CLASSIFICATION	2.541350179636705E-4	DESIGN
following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.965223000877224	WITHOUT_CLASSIFICATION	0.03477699912277602	DESIGN
if jbc is using invalidation we don't want to propagate changes. we use the timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9996625984428784	WITHOUT_CLASSIFICATION	3.374015571215176E-4	DESIGN
we don't want to waste effort setting an option if jbc is already in local mode. if jbc is repl_(a)sync then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9997564214656499	WITHOUT_CLASSIFICATION	2.4357853435010045E-4	DESIGN
don't hold the jbc node lock throughout the tx as that prevents updates add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999911435825	WITHOUT_CLASSIFICATION	8.856417515076555E-9	DESIGN
double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999810281172159	WITHOUT_CLASSIFICATION	1.897188278402706E-5	DESIGN
get an exclusive right to update jbc for this key from this node.	WITHOUT_CLASSIFICATION	0.9984598529920818	WITHOUT_CLASSIFICATION	0.0015401470079180715	DESIGN
we ensure async semantics (jbcache-1175)	WITHOUT_CLASSIFICATION	0.9994121225850038	WITHOUT_CLASSIFICATION	5.878774149962499E-4	DESIGN
initial load from jbc	WITHOUT_CLASSIFICATION	0.9992287606413174	WITHOUT_CLASSIFICATION	7.712393586826294E-4	DESIGN
see if we had a 2nd invalidation from the same initial preinvalidation timestamp. if so only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999996302296793	WITHOUT_CLASSIFICATION	3.6977032081322776E-7	DESIGN
we ensure async semantics (jbcache-1175)	WITHOUT_CLASSIFICATION	0.9994121225850038	WITHOUT_CLASSIFICATION	5.878774149962499E-4	DESIGN
if the workspace node has null as well ok if not we've been modified in a non-comparable manner which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999993437922513	WITHOUT_CLASSIFICATION	6.562077486837008E-7	DESIGN
the standard comparator types are not serializable but are singletons	WITHOUT_CLASSIFICATION	0.9993400739024028	WITHOUT_CLASSIFICATION	6.599260975971762E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9996695162880856	WITHOUT_CLASSIFICATION	3.304837119143956E-4	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9999136802164721	WITHOUT_CLASSIFICATION	8.631978352788289E-5	DESIGN
construct the cache	WITHOUT_CLASSIFICATION	0.9998191862126904	WITHOUT_CLASSIFICATION	1.8081378730966111E-4	DESIGN
local cache so we use synchronization	WITHOUT_CLASSIFICATION	0.9926858522181367	WITHOUT_CLASSIFICATION	0.007314147781863349	DESIGN
local cache so we use synchronization	WITHOUT_CLASSIFICATION	0.9926858522181367	WITHOUT_CLASSIFICATION	0.007314147781863349	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9995705298558167	WITHOUT_CLASSIFICATION	4.2947014418321847E-4	DESIGN
swaldman 2006-08-28 define c3p0-style configuration parameters for initialpoolsize which hibernate sensibly lets default to minpoolsize but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999939359080737	WITHOUT_CLASSIFICATION	6.064091926347207E-6	DESIGN
datasource unpooled = datasources.unpooleddatasource(jdbcurl props.getproperty(environment.user) props.getproperty(environment.pass))	WITHOUT_CLASSIFICATION	0.999950899115425	WITHOUT_CLASSIFICATION	4.910088457494328E-5	DESIGN
true if the pool is borrowed from the outside false if we used to create it	WITHOUT_CLASSIFICATION	0.9965339293729892	WITHOUT_CLASSIFICATION	0.003466070627010696	DESIGN
get a connection from the pool (thru drivermanager cfr. proxool doc)	WITHOUT_CLASSIFICATION	0.9994110509363793	WITHOUT_CLASSIFICATION	5.889490636207874E-4	DESIGN
set the transaction isolation if defined	WITHOUT_CLASSIFICATION	0.9999398823177689	WITHOUT_CLASSIFICATION	6.011768223116137E-5	DESIGN
toggle autocommit to false if set	WITHOUT_CLASSIFICATION	0.999892322200949	WITHOUT_CLASSIFICATION	1.0767779905092821E-4	DESIGN
return the connection	WITHOUT_CLASSIFICATION	0.999408544282656	WITHOUT_CLASSIFICATION	5.914557173439295E-4	DESIGN
get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999927577912666	WITHOUT_CLASSIFICATION	7.24220873339465E-6	DESIGN
default the proxool alias setting	WITHOUT_CLASSIFICATION	0.9999953184583197	WITHOUT_CLASSIFICATION	4.681541680317249E-6	DESIGN
validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999675592487152	WITHOUT_CLASSIFICATION	3.244075128471776E-5	DESIGN
validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999675592487152	WITHOUT_CLASSIFICATION	3.244075128471776E-5	DESIGN
append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999787500818992	WITHOUT_CLASSIFICATION	2.1249918100804846E-5	DESIGN
set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9996327701680642	WITHOUT_CLASSIFICATION	3.6722983193590716E-4	DESIGN
configured using the jaxp configurator	WITHOUT_CLASSIFICATION	0.9999174333360081	WITHOUT_CLASSIFICATION	8.25666639918163E-5	DESIGN
validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999675592487152	WITHOUT_CLASSIFICATION	3.244075128471776E-5	DESIGN
append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999787500818992	WITHOUT_CLASSIFICATION	2.1249918100804846E-5	DESIGN
append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999787500818992	WITHOUT_CLASSIFICATION	2.1249918100804846E-5	DESIGN
configured using the properties file configurator	WITHOUT_CLASSIFICATION	0.9999756185885583	WITHOUT_CLASSIFICATION	2.438141144171515E-5	DESIGN
remember isolation level	WITHOUT_CLASSIFICATION	0.9528047872573155	WITHOUT_CLASSIFICATION	0.047195212742684546	DESIGN
if the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999995697283239	WITHOUT_CLASSIFICATION	4.3027167604506183E-7	DESIGN
we have created the pool ourselves so shut it down	WITHOUT_CLASSIFICATION	0.99997184300547	WITHOUT_CLASSIFICATION	2.8156994529906978E-5	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9665138250222147	WITHOUT_CLASSIFICATION	0.033486174977785235	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9665138250222147	WITHOUT_CLASSIFICATION	0.033486174977785235	DESIGN
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9998713594944315	WITHOUT_CLASSIFICATION	1.2864050556853022E-4	DESIGN
public currency getcurrency(int col) throws hibernateexception	WITHOUT_CLASSIFICATION	0.9996354264690406	WITHOUT_CLASSIFICATION	3.6457353095941975E-4	DESIGN
default is pojo	WITHOUT_CLASSIFICATION	0.9998073938722533	WITHOUT_CLASSIFICATION	1.926061277467397E-4	DESIGN
use setparameter for null values	WITHOUT_CLASSIFICATION	0.9994124068149762	WITHOUT_CLASSIFICATION	5.875931850238119E-4	DESIGN
use setparameter for null values	WITHOUT_CLASSIFICATION	0.9994124068149762	WITHOUT_CLASSIFICATION	5.875931850238119E-4	DESIGN
private cacheentry cacheentry	WITHOUT_CLASSIFICATION	0.994990627855667	WITHOUT_CLASSIFICATION	0.005009372144332957	DESIGN
don't need to lock the cache here since if someone else inserted the same pk first the insert would fail	WITHOUT_CLASSIFICATION	0.9999942001484712	WITHOUT_CLASSIFICATION	5.79985152879316E-6	DESIGN
make 100% certain that this is called before any subsequent scheduledupdate.aftertransactioncompletion()!!	WITHOUT_CLASSIFICATION	0.9971073215208099	WITHOUT_CLASSIFICATION	0.0028926784791900736	DESIGN
get the updated snapshot of the entity state by cloning current state it is safe to copy in place since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999993402781655	WITHOUT_CLASSIFICATION	6.597218345094542E-7	DESIGN
this entity defines proeprty generation so process those generated values	WITHOUT_CLASSIFICATION	0.9997531487454481	WITHOUT_CLASSIFICATION	2.46851254551913E-4	DESIGN
have the entity entry perform post-update processing passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.999892616501507	WITHOUT_CLASSIFICATION	1.0738349849301344E-4	DESIGN
!persister.iscacheinvalidationrequired()	WITHOUT_CLASSIFICATION	0.9995487121138841	WITHOUT_CLASSIFICATION	4.512878861158206E-4	DESIGN
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9996278309560218	WITHOUT_CLASSIFICATION	3.7216904397814203E-4	DESIGN
sort first by role name	WITHOUT_CLASSIFICATION	0.9997112659787712	WITHOUT_CLASSIFICATION	2.887340212287357E-4	DESIGN
make 100% certain that this is called before any subsequent scheduledupdate.aftertransactioncompletion()!!	WITHOUT_CLASSIFICATION	0.9971073215208099	WITHOUT_CLASSIFICATION	0.0028926784791900736	DESIGN
then by fk	WITHOUT_CLASSIFICATION	0.9967452151004929	WITHOUT_CLASSIFICATION	0.0032547848995071638	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9996755267117391	WITHOUT_CLASSIFICATION	3.244732882609785E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9996755267117391	WITHOUT_CLASSIFICATION	3.244732882609785E-4	DESIGN
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9977188229460398	WITHOUT_CLASSIFICATION	0.0022811770539603237	DESIGN
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9982468163747908	WITHOUT_CLASSIFICATION	0.0017531836252090652	DESIGN
boolean put = persister.getcache().insert(ck cacheentry)	WITHOUT_CLASSIFICATION	0.9999388518580595	WITHOUT_CLASSIFICATION	6.114814194044753E-5	DESIGN
we need to grab the version value from the entity otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9496466930228725	WITHOUT_CLASSIFICATION	0.05035330697712752	DESIGN
do nothing - we only need to notify the cache	WITHOUT_CLASSIFICATION	0.9930603085325423	WITHOUT_CLASSIFICATION	0.006939691467457646	DESIGN
sort first by entity name	WITHOUT_CLASSIFICATION	0.9998041430290694	WITHOUT_CLASSIFICATION	1.9585697093055392E-4	DESIGN
then by id	WITHOUT_CLASSIFICATION	0.9996319566304145	WITHOUT_CLASSIFICATION	3.680433695855534E-4	DESIGN
to be safe	WITHOUT_CLASSIFICATION	0.9996379200678293	WITHOUT_CLASSIFICATION	3.6207993217068067E-4	DESIGN
no transformations took place so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9998319815179779	WITHOUT_CLASSIFICATION	1.680184820220273E-4	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999640384273845	WITHOUT_CLASSIFICATION	3.5961572615632235E-5	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999640384273845	WITHOUT_CLASSIFICATION	3.5961572615632235E-5	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9994086421078932	WITHOUT_CLASSIFICATION	5.91357892106848E-4	DESIGN
test out the optimizer	WITHOUT_CLASSIFICATION	0.9999921462861444	WITHOUT_CLASSIFICATION	7.853713855491016E-6	DESIGN
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9987978491818077	WITHOUT_CLASSIFICATION	0.0012021508181923805	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9996796653239958	WITHOUT_CLASSIFICATION	3.2033467600417123E-4	DESIGN
invokespecial	WITHOUT_CLASSIFICATION	0.999514050864903	WITHOUT_CLASSIFICATION	4.859491350970499E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9995613739247083	WITHOUT_CLASSIFICATION	4.386260752915824E-4	DESIGN
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9992947704923957	WITHOUT_CLASSIFICATION	7.052295076042911E-4	DESIGN
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9958991331861897	WITHOUT_CLASSIFICATION	0.004100866813810339	DESIGN
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999167994500322	WITHOUT_CLASSIFICATION	8.320054996775778E-5	DESIGN
aload_2 args	WITHOUT_CLASSIFICATION	0.9992230751384801	WITHOUT_CLASSIFICATION	7.7692486151997E-4	DESIGN
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999012059175678	WITHOUT_CLASSIFICATION	9.879408243221873E-5	DESIGN
new	WITHOUT_CLASSIFICATION	0.9996734524879637	WITHOUT_CLASSIFICATION	3.2654751203633727E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9996834780100943	WITHOUT_CLASSIFICATION	3.165219899057583E-4	DESIGN
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9996636702204662	WITHOUT_CLASSIFICATION	3.3632977953381674E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.999514050864903	WITHOUT_CLASSIFICATION	4.859491350970499E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.999514050864903	WITHOUT_CLASSIFICATION	4.859491350970499E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.999514050864903	WITHOUT_CLASSIFICATION	4.859491350970499E-4	DESIGN
aastore args	WITHOUT_CLASSIFICATION	0.9991984717362347	WITHOUT_CLASSIFICATION	8.015282637653719E-4	DESIGN
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9921574706798445	WITHOUT_CLASSIFICATION	0.007842529320155446	DESIGN
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9961745918649607	WITHOUT_CLASSIFICATION	0.0038254081350393306	DESIGN
istore_3 store i	WITHOUT_CLASSIFICATION	0.9995581770630777	WITHOUT_CLASSIFICATION	4.418229369223782E-4	DESIGN
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9993390394298568	WITHOUT_CLASSIFICATION	6.609605701430898E-4	DESIGN
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9896798832052939	WITHOUT_CLASSIFICATION	0.010320116794706092	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999870647792168	WITHOUT_CLASSIFICATION	1.293522078310363E-5	DESIGN
start region to handling exception (bulkaccessorexception)	WITHOUT_CLASSIFICATION	0.9988145976859045	WITHOUT_CLASSIFICATION	0.0011854023140955062	DESIGN
iinc 3 1	WITHOUT_CLASSIFICATION	0.9995162757585612	WITHOUT_CLASSIFICATION	4.837242414387767E-4	DESIGN
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9996364906376556	WITHOUT_CLASSIFICATION	3.6350936234445287E-4	DESIGN
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9994004892341871	WITHOUT_CLASSIFICATION	5.995107658129458E-4	DESIGN
iconst_i	WITHOUT_CLASSIFICATION	0.9996695162880856	WITHOUT_CLASSIFICATION	3.304837119143956E-4	DESIGN
aaload	WITHOUT_CLASSIFICATION	0.9996695162880856	WITHOUT_CLASSIFICATION	3.304837119143956E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9996697285444622	WITHOUT_CLASSIFICATION	3.3027145553768595E-4	DESIGN
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9997168229666639	WITHOUT_CLASSIFICATION	2.8317703333614994E-4	DESIGN
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.999685010359788	WITHOUT_CLASSIFICATION	3.149896402121325E-4	DESIGN
current stack len = 2	WITHOUT_CLASSIFICATION	0.999987057475208	WITHOUT_CLASSIFICATION	1.2942524792065994E-5	DESIGN
end region to handling exception (bulkaccessorexception)	WITHOUT_CLASSIFICATION	0.9983637765263449	WITHOUT_CLASSIFICATION	0.0016362234736550909	DESIGN
register in exception table	WITHOUT_CLASSIFICATION	0.9983998512759744	WITHOUT_CLASSIFICATION	0.0016001487240255492	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9996796653239958	WITHOUT_CLASSIFICATION	3.2033467600417123E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9996796653239958	WITHOUT_CLASSIFICATION	3.2033467600417123E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9995613739247083	WITHOUT_CLASSIFICATION	4.386260752915824E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9995613739247083	WITHOUT_CLASSIFICATION	4.386260752915824E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9996834780100943	WITHOUT_CLASSIFICATION	3.165219899057583E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.999514050864903	WITHOUT_CLASSIFICATION	4.859491350970499E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9996697285444622	WITHOUT_CLASSIFICATION	3.3027145553768595E-4	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999994584353944	WITHOUT_CLASSIFICATION	5.415646055608463E-7	DESIGN
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999501120618576	WITHOUT_CLASSIFICATION	4.9887938142427734E-5	DESIGN
new bulkaccessorexception	WITHOUT_CLASSIFICATION	0.9991356271219137	WITHOUT_CLASSIFICATION	8.643728780863423E-4	DESIGN
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9995770315064296	WITHOUT_CLASSIFICATION	4.2296849357035957E-4	DESIGN
iload_3 i	WITHOUT_CLASSIFICATION	0.9969129148586258	WITHOUT_CLASSIFICATION	0.003087085141374267	DESIGN
invokespecial bulkaccessorexception.<init>	WITHOUT_CLASSIFICATION	0.9995487121138841	WITHOUT_CLASSIFICATION	4.512878861158206E-4	DESIGN
athrow	WITHOUT_CLASSIFICATION	0.9996696766813927	WITHOUT_CLASSIFICATION	3.3032331860729803E-4	DESIGN
warning classfile only	WITHOUT_CLASSIFICATION	0.9999283992619462	WITHOUT_CLASSIFICATION	7.160073805379162E-5	DESIGN
swallow	WITHOUT_CLASSIFICATION	0.9996725513611915	WITHOUT_CLASSIFICATION	3.274486388085939E-4	DESIGN
local variable | this |	WITHOUT_CLASSIFICATION	0.9984091804398988	WITHOUT_CLASSIFICATION	0.0015908195601012053	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9969617346627229	WITHOUT_CLASSIFICATION	0.003038265337277046	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9969617346627229	WITHOUT_CLASSIFICATION	0.003038265337277046	DESIGN
getfield get field "$javassist_callback" defined already	WITHOUT_CLASSIFICATION	0.997565285045702	WITHOUT_CLASSIFICATION	0.002434714954297978	DESIGN
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.999827682579788	WITHOUT_CLASSIFICATION	1.723174202119927E-4	DESIGN
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9996872775280357	WITHOUT_CLASSIFICATION	3.127224719643057E-4	DESIGN
aload_1 load callback	WITHOUT_CLASSIFICATION	0.999064826698935	WITHOUT_CLASSIFICATION	9.351733010649574E-4	DESIGN
putfield put field "$javassist_callback" defined already	WITHOUT_CLASSIFICATION	0.9961375902462576	WITHOUT_CLASSIFICATION	0.0038624097537425348	DESIGN
case of non-static field	WITHOUT_CLASSIFICATION	0.9985312352097897	WITHOUT_CLASSIFICATION	0.001468764790210244	DESIGN
getfield get each field	WITHOUT_CLASSIFICATION	0.9993404668134496	WITHOUT_CLASSIFICATION	6.595331865504053E-4	DESIGN
invokeinterface invoke enabled.getinterceptfieldcallback()	WITHOUT_CLASSIFICATION	0.9999254855727803	WITHOUT_CLASSIFICATION	7.451442721967242E-5	DESIGN
ifnonnull	WITHOUT_CLASSIFICATION	0.9997469212964516	WITHOUT_CLASSIFICATION	2.5307870354837885E-4	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9992755518043379	WITHOUT_CLASSIFICATION	7.244481956621078E-4	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9992755518043379	WITHOUT_CLASSIFICATION	7.244481956621078E-4	DESIGN
store_1 each type	WITHOUT_CLASSIFICATION	0.9994541245438652	WITHOUT_CLASSIFICATION	5.458754561348736E-4	DESIGN
ldc name of the field	WITHOUT_CLASSIFICATION	0.998917856318916	WITHOUT_CLASSIFICATION	0.0010821436810839408	DESIGN
load_1 each type	WITHOUT_CLASSIFICATION	0.9994541245438652	WITHOUT_CLASSIFICATION	5.458754561348736E-4	DESIGN
invokeinterface invoke callback.read() each type	WITHOUT_CLASSIFICATION	0.9999162923464839	WITHOUT_CLASSIFICATION	8.370765351601657E-5	DESIGN
int	WITHOUT_CLASSIFICATION	0.999804563387189	WITHOUT_CLASSIFICATION	1.9543661281096457E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9995613739247083	WITHOUT_CLASSIFICATION	4.386260752915824E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9996834780100943	WITHOUT_CLASSIFICATION	3.165219899057583E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.999514050864903	WITHOUT_CLASSIFICATION	4.859491350970499E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9996697285444622	WITHOUT_CLASSIFICATION	3.3027145553768595E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9996697285444622	WITHOUT_CLASSIFICATION	3.3027145553768595E-4	DESIGN
invokeinterface enabled.getinterceptfieldcallback()	WITHOUT_CLASSIFICATION	0.9995487121138841	WITHOUT_CLASSIFICATION	4.512878861158206E-4	DESIGN
invokeinterface enabled.getinterceptfieldcallback()	WITHOUT_CLASSIFICATION	0.9995487121138841	WITHOUT_CLASSIFICATION	4.512878861158206E-4	DESIGN
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9996278550123148	WITHOUT_CLASSIFICATION	3.7214498768524715E-4	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9996695162880856	WITHOUT_CLASSIFICATION	3.304837119143956E-4	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9996695162880856	WITHOUT_CLASSIFICATION	3.304837119143956E-4	DESIGN
putfield	WITHOUT_CLASSIFICATION	0.9996695162880856	WITHOUT_CLASSIFICATION	3.304837119143956E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9995613739247083	WITHOUT_CLASSIFICATION	4.386260752915824E-4	DESIGN
ldc field name	WITHOUT_CLASSIFICATION	0.9985850422651253	WITHOUT_CLASSIFICATION	0.0014149577348747204	DESIGN
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999857564139549	WITHOUT_CLASSIFICATION	1.4243586045025543E-5	DESIGN
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9995487121138841	WITHOUT_CLASSIFICATION	4.512878861158206E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9989510985197907	WITHOUT_CLASSIFICATION	0.0010489014802093537	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9989510985197907	WITHOUT_CLASSIFICATION	0.0010489014802093537	DESIGN
not array	WITHOUT_CLASSIFICATION	0.9991866727814305	WITHOUT_CLASSIFICATION	8.133272185694349E-4	DESIGN
array of reference type	WITHOUT_CLASSIFICATION	0.999095540477911	WITHOUT_CLASSIFICATION	9.044595220890666E-4	DESIGN
boolean	WITHOUT_CLASSIFICATION	0.9998120197305196	WITHOUT_CLASSIFICATION	1.879802694803783E-4	DESIGN
byte	WITHOUT_CLASSIFICATION	0.999555264586288	WITHOUT_CLASSIFICATION	4.4473541371200647E-4	DESIGN
char	WITHOUT_CLASSIFICATION	0.9998528692431617	WITHOUT_CLASSIFICATION	1.4713075683832358E-4	DESIGN
short	WITHOUT_CLASSIFICATION	0.9994473559639703	WITHOUT_CLASSIFICATION	5.526440360296461E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999911917933	WITHOUT_CLASSIFICATION	8.808206699934217E-6	DESIGN
float	WITHOUT_CLASSIFICATION	0.9997490004652678	WITHOUT_CLASSIFICATION	2.50999534732182E-4	DESIGN
float	WITHOUT_CLASSIFICATION	0.9997490004652678	WITHOUT_CLASSIFICATION	2.50999534732182E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.999685675294314	WITHOUT_CLASSIFICATION	3.143247056859921E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.999685675294314	WITHOUT_CLASSIFICATION	3.143247056859921E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9994044333764516	WITHOUT_CLASSIFICATION	5.955666235483856E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9994044333764516	WITHOUT_CLASSIFICATION	5.955666235483856E-4	DESIGN
boolean byte char int short	WITHOUT_CLASSIFICATION	0.9997050703182765	WITHOUT_CLASSIFICATION	2.9492968172351307E-4	DESIGN
boolean byte char int short	WITHOUT_CLASSIFICATION	0.9997050703182765	WITHOUT_CLASSIFICATION	2.9492968172351307E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9989510985197907	WITHOUT_CLASSIFICATION	0.0010489014802093537	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999911917933	WITHOUT_CLASSIFICATION	8.808206699934217E-6	DESIGN
float	WITHOUT_CLASSIFICATION	0.9997490004652678	WITHOUT_CLASSIFICATION	2.50999534732182E-4	DESIGN
float	WITHOUT_CLASSIFICATION	0.9997490004652678	WITHOUT_CLASSIFICATION	2.50999534732182E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.999685675294314	WITHOUT_CLASSIFICATION	3.143247056859921E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9994044333764516	WITHOUT_CLASSIFICATION	5.955666235483856E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9994044333764516	WITHOUT_CLASSIFICATION	5.955666235483856E-4	DESIGN
boolean byte char int short	WITHOUT_CLASSIFICATION	0.9997050703182765	WITHOUT_CLASSIFICATION	2.9492968172351307E-4	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9978873065321541	WITHOUT_CLASSIFICATION	0.0021126934678460086	DESIGN
mainly for oscache	WITHOUT_CLASSIFICATION	0.9995670113753422	WITHOUT_CLASSIFICATION	4.3298862465780284E-4	DESIGN
decrement the lock	WITHOUT_CLASSIFICATION	0.9997130779437846	WITHOUT_CLASSIFICATION	2.869220562153047E-4	DESIGN
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9997540666369392	WITHOUT_CLASSIFICATION	2.4593336306073246E-4	DESIGN
recache the updated state	WITHOUT_CLASSIFICATION	0.9999469401989408	WITHOUT_CLASSIFICATION	5.3059801059097955E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9997592715933077	WITHOUT_CLASSIFICATION	2.4072840669233248E-4	DESIGN
null clientlock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999905831262978	WITHOUT_CLASSIFICATION	9.41687370211903E-6	DESIGN
we really could refresh the item if it is not a lock but it might be slower return freshtimestamp < txtimestamp	WITHOUT_CLASSIFICATION	0.9792855596880866	WITHOUT_CLASSIFICATION	0.02071444031191346	DESIGN
by requiring < we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999405535143423	WITHOUT_CLASSIFICATION	5.9446485657691356E-5	DESIGN
the user provided resulttransformer not the one used with "select new". here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9690305478094938	WITHOUT_CLASSIFICATION	0.03096945219050618	DESIGN
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999615731786677	WITHOUT_CLASSIFICATION	3.842682133227241E-5	DESIGN
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999314710634983	WITHOUT_CLASSIFICATION	6.852893650168804E-5	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9995705298558167	WITHOUT_CLASSIFICATION	4.2947014418321847E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9997592715933077	WITHOUT_CLASSIFICATION	2.4072840669233248E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9997592715933077	WITHOUT_CLASSIFICATION	2.4072840669233248E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9997592715933077	WITHOUT_CLASSIFICATION	2.4072840669233248E-4	DESIGN
this is called from settingsfactory irregardless trivial to simply disregard	WITHOUT_CLASSIFICATION	0.992773828274953	WITHOUT_CLASSIFICATION	0.007226171725046982	DESIGN
do nothing subclasses may override.	WITHOUT_CLASSIFICATION	0.9991654108774168	WITHOUT_CLASSIFICATION	8.345891225831829E-4	DESIGN
do nothing subclasses may override.	WITHOUT_CLASSIFICATION	0.9991654108774168	WITHOUT_CLASSIFICATION	8.345891225831829E-4	DESIGN
throw new unsupportedoperationexception("can't write to a readonly object")	WITHOUT_CLASSIFICATION	0.9983383297091856	WITHOUT_CLASSIFICATION	0.0016616702908144898	DESIGN
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9995580065734228	WITHOUT_CLASSIFICATION	4.419934265771587E-4	DESIGN
persister.setidentifier(result id) before calling interceptor for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999296810285596	WITHOUT_CLASSIFICATION	7.03189714404435E-5	DESIGN
no-op ccs did not have such a concept	WITHOUT_CLASSIFICATION	0.9968023593179932	WITHOUT_CLASSIFICATION	0.0031976406820068744	DESIGN
no-op ccs did not have such a concept	WITHOUT_CLASSIFICATION	0.9968023593179932	WITHOUT_CLASSIFICATION	0.0031976406820068744	DESIGN
again ccs did not have such a concept but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not jta aware.	WITHOUT_CLASSIFICATION	0.9999614550904122	WITHOUT_CLASSIFICATION	3.8544909587807827E-5	DESIGN
again ccs did not have such a concept however a reasonable proximity is to clear the cache. for non-transaction aware caches we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999274789894169	WITHOUT_CLASSIFICATION	7.252101058316062E-5	DESIGN
again ccs did not have such a concept however a reasonable proximity is to clear the cache. for non-transaction aware caches we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999274789894169	WITHOUT_CLASSIFICATION	7.252101058316062E-5	DESIGN
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9972021955281986	WITHOUT_CLASSIFICATION	0.0027978044718014977	DESIGN
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9994429528422278	WITHOUT_CLASSIFICATION	5.570471577721808E-4	DESIGN
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9989203147642204	WITHOUT_CLASSIFICATION	0.00107968523577966	DESIGN
db-objectname	WITHOUT_CLASSIFICATION	0.999514050864903	WITHOUT_CLASSIFICATION	4.859491350970499E-4	DESIGN
mutable	WITHOUT_CLASSIFICATION	0.9998272124249997	WITHOUT_CLASSIFICATION	1.7278757500024944E-4	DESIGN
where	WITHOUT_CLASSIFICATION	0.999894968547339	WITHOUT_CLASSIFICATION	1.0503145266104481E-4	DESIGN
check	WITHOUT_CLASSIFICATION	0.9992107571660915	WITHOUT_CLASSIFICATION	7.89242833908493E-4	DESIGN
polymorphism	WITHOUT_CLASSIFICATION	0.999514050864903	WITHOUT_CLASSIFICATION	4.859491350970499E-4	DESIGN
todo	WITHOUT_CLASSIFICATION	0.6938108157348961	WITHOUT_CLASSIFICATION	0.30618918426510383	DESIGN
id	WITHOUT_CLASSIFICATION	0.9995671715067553	WITHOUT_CLASSIFICATION	4.3282849324458993E-4	DESIGN
version / timestamp	WITHOUT_CLASSIFICATION	0.9998222980069158	WITHOUT_CLASSIFICATION	1.7770199308415367E-4	DESIGN
discriminator	WITHOUT_CLASSIFICATION	0.9995144035986447	WITHOUT_CLASSIFICATION	4.8559640135527614E-4	DESIGN
primary key constraint	WITHOUT_CLASSIFICATION	0.9972799681451264	WITHOUT_CLASSIFICATION	0.0027200318548736657	DESIGN
this is either a <version/> tag with no type attribute or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9996770234537864	WITHOUT_CLASSIFICATION	3.2297654621352986E-4	DESIGN
for version properties marked as being generated make sure they are "always" generated aka "insert" is invalid this is dis-allowed by the dtd but just to make sure	WITHOUT_CLASSIFICATION	0.9984924445233485	WITHOUT_CLASSIFICATION	0.0015075554766514662	DESIGN
discriminator	WITHOUT_CLASSIFICATION	0.9995144035986447	WITHOUT_CLASSIFICATION	4.8559640135527614E-4	DESIGN
( (column) discrim.getcolumniterator().next() ).settype(type)	WITHOUT_CLASSIFICATION	0.9998515034280713	WITHOUT_CLASSIFICATION	1.4849657192878747E-4	DESIGN
go ahead and set the lazy here since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999941873585362	WITHOUT_CLASSIFICATION	5.812641463891578E-6	DESIGN
dynamic update	WITHOUT_CLASSIFICATION	0.9997550951472218	WITHOUT_CLASSIFICATION	2.4490485277816514E-4	DESIGN
import	WITHOUT_CLASSIFICATION	0.9995812551648897	WITHOUT_CLASSIFICATION	4.187448351102703E-4	DESIGN
batch size	WITHOUT_CLASSIFICATION	0.9999101219245308	WITHOUT_CLASSIFICATION	8.987807546920521E-5	DESIGN
select before update	WITHOUT_CLASSIFICATION	0.9999226985057524	WITHOUT_CLASSIFICATION	7.730149424746932E-5	DESIGN
optimistic lock mode	WITHOUT_CLASSIFICATION	0.9989672849576741	WITHOUT_CLASSIFICATION	0.0010327150423260106	DESIGN
persister	WITHOUT_CLASSIFICATION	0.9983617439374499	WITHOUT_CLASSIFICATION	0.0016382560625500912	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999795052209033	WITHOUT_CLASSIFICATION	2.0494779096816298E-5	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9989203147642204	WITHOUT_CLASSIFICATION	0.00107968523577966	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9995865239515832	WITHOUT_CLASSIFICATION	4.13476048416782E-4	DESIGN
joined subclasses	WITHOUT_CLASSIFICATION	0.9997167361552144	WITHOUT_CLASSIFICATION	2.832638447855694E-4	DESIGN
key	WITHOUT_CLASSIFICATION	0.9997629927019972	WITHOUT_CLASSIFICATION	2.3700729800280623E-4	DESIGN
check	WITHOUT_CLASSIFICATION	0.9992107571660915	WITHOUT_CLASSIFICATION	7.89242833908493E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999795052209033	WITHOUT_CLASSIFICATION	2.0494779096816298E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9995865239515832	WITHOUT_CLASSIFICATION	4.13476048416782E-4	DESIGN
key	WITHOUT_CLASSIFICATION	0.9997629927019972	WITHOUT_CLASSIFICATION	2.3700729800280623E-4	DESIGN
model.getkey().settype( new type( model.getidentifier() ) )	WITHOUT_CLASSIFICATION	0.9993395842075115	WITHOUT_CLASSIFICATION	6.604157924884837E-4	DESIGN
tablename	WITHOUT_CLASSIFICATION	0.9997496154944198	WITHOUT_CLASSIFICATION	2.5038450558028416E-4	DESIGN
join.getkey().settype( new type( lazz.getidentifier() ) )	WITHOUT_CLASSIFICATION	0.9993395842075115	WITHOUT_CLASSIFICATION	6.604157924884837E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9995865239515832	WITHOUT_CLASSIFICATION	4.13476048416782E-4	DESIGN
column(s)	WITHOUT_CLASSIFICATION	0.9996880483241793	WITHOUT_CLASSIFICATION	3.1195167582065013E-4	DESIGN
column index	WITHOUT_CLASSIFICATION	0.9999705220651561	WITHOUT_CLASSIFICATION	2.9477934843850533E-5	DESIGN
column unique-key	WITHOUT_CLASSIFICATION	0.999828289157945	WITHOUT_CLASSIFICATION	1.7171084205500298E-4	DESIGN
automatically makes a column with the default name if none is specifed by xml	WITHOUT_CLASSIFICATION	0.9989845108377285	WITHOUT_CLASSIFICATION	0.0010154891622715144	DESIGN
for an any	WITHOUT_CLASSIFICATION	0.9998028725718238	WITHOUT_CLASSIFICATION	1.9712742817618172E-4	DESIGN
insertable simply because that is the user did not specify anything just override it	WITHOUT_CLASSIFICATION	0.9999984965970742	WITHOUT_CLASSIFICATION	1.503402925768691E-6	DESIGN
the user specifically supplied insert="true" which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999947988193629	WITHOUT_CLASSIFICATION	5.201180637062436E-6	DESIGN
properties generated on update can never be updateable	WITHOUT_CLASSIFICATION	0.9961829977572757	WITHOUT_CLASSIFICATION	0.0038170022427243566	DESIGN
updateable only because the user did not specify anything just override it	WITHOUT_CLASSIFICATION	0.9999996633405944	WITHOUT_CLASSIFICATION	3.366594055686646E-7	DESIGN
the user specifically supplied update="true" which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999947988193629	WITHOUT_CLASSIFICATION	5.201180637062436E-6	DESIGN
rolename	WITHOUT_CLASSIFICATION	0.9996849822732011	WITHOUT_CLASSIFICATION	3.150177267989262E-4	DESIGN
fetch strategy	WITHOUT_CLASSIFICATION	0.9992876191554354	WITHOUT_CLASSIFICATION	7.123808445645715E-4	DESIGN
table	WITHOUT_CLASSIFICATION	0.9998492051964597	WITHOUT_CLASSIFICATION	1.5079480354024036E-4	DESIGN
tablename = mappings.getnamingstrategy().propertytotablename( classname path )	WITHOUT_CLASSIFICATION	0.9999687327783133	WITHOUT_CLASSIFICATION	3.126722168663253E-5	DESIGN
sort	WITHOUT_CLASSIFICATION	0.9997857158437334	WITHOUT_CLASSIFICATION	2.142841562666435E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999795052209033	WITHOUT_CLASSIFICATION	2.0494779096816298E-5	DESIGN
unsorted natural comparator.class.name	WITHOUT_CLASSIFICATION	0.99955419671027	WITHOUT_CLASSIFICATION	4.4580328972997443E-4	DESIGN
orphan delete (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9992141340430495	WITHOUT_CLASSIFICATION	7.858659569504873E-4	DESIGN
set up second pass	WITHOUT_CLASSIFICATION	0.9999410071199546	WITHOUT_CLASSIFICATION	5.8992880045518494E-5	DESIGN
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9554621648855812	WITHOUT_CLASSIFICATION	0.04453783511441888	DESIGN
a nested composite element	WITHOUT_CLASSIFICATION	0.9951818867889253	WITHOUT_CLASSIFICATION	0.004818113211074738	DESIGN
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9997207784368383	WITHOUT_CLASSIFICATION	2.7922156316174046E-4	DESIGN
note special case one-to-one constrained=false cannot be proxied so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999953352880142	WITHOUT_CLASSIFICATION	4.6647119857888E-6	DESIGN
use old (hb 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999800753679597	WITHOUT_CLASSIFICATION	1.9924632040315963E-5	DESIGN
lazy = !join	WITHOUT_CLASSIFICATION	0.9999085271970215	WITHOUT_CLASSIFICATION	9.147280297857652E-5	DESIGN
generator	WITHOUT_CLASSIFICATION	0.9991089381313246	WITHOUT_CLASSIFICATION	8.910618686754883E-4	DESIGN
id unsaved-value	WITHOUT_CLASSIFICATION	0.999363591925801	WITHOUT_CLASSIFICATION	6.36408074198979E-4	DESIGN
version unsaved-value	WITHOUT_CLASSIFICATION	0.9979576594894417	WITHOUT_CLASSIFICATION	0.00204234051055827	DESIGN
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9789714515334093	WITHOUT_CLASSIFICATION	0.021028548466590778	DESIGN
( (column) ( (simplevalue) ic.getindex() ).getcolumniterator().next() ).setnullable(false)	WITHOUT_CLASSIFICATION	0.9998515034280713	WITHOUT_CLASSIFICATION	1.4849657192878747E-4	DESIGN
contained elements	WITHOUT_CLASSIFICATION	0.9998577966204669	WITHOUT_CLASSIFICATION	1.4220337953305392E-4	DESIGN
for non-inverse one-to-many with a not-null fk add a backref!	WITHOUT_CLASSIFICATION	0.9862764846819787	WITHOUT_CLASSIFICATION	0.01372351531802132	DESIGN
bind the where	WITHOUT_CLASSIFICATION	0.9999255677217742	WITHOUT_CLASSIFICATION	7.44322782257857E-5	DESIGN
bind the order-by	WITHOUT_CLASSIFICATION	0.9997657818593341	WITHOUT_CLASSIFICATION	2.3421814066591355E-4	DESIGN
bind the filters	WITHOUT_CLASSIFICATION	0.9998249363544662	WITHOUT_CLASSIFICATION	1.7506364553378004E-4	DESIGN
overriding inherited meta attribute. hbx-621 & hbx-793	WITHOUT_CLASSIFICATION	0.9992353658952846	WITHOUT_CLASSIFICATION	7.646341047154235E-4	DESIGN
first iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999997160758965	WITHOUT_CLASSIFICATION	2.8392410348309865E-7	DESIGN
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a fqn (in the case of a pojo mapping).	WITHOUT_CLASSIFICATION	0.9997238483234936	WITHOUT_CLASSIFICATION	2.7615167650631573E-4	DESIGN
+ "_" + referencedcolumnname not used for backward compatibility	WITHOUT_CLASSIFICATION	0.5942668203741062	DESIGN	0.4057331796258939	WITHOUT_CLASSIFICATION
sessionfactory name	WITHOUT_CLASSIFICATION	0.9993646766598454	WITHOUT_CLASSIFICATION	6.35323340154481E-4	DESIGN
jdbc and connection settings	WITHOUT_CLASSIFICATION	0.9996125488184534	WITHOUT_CLASSIFICATION	3.874511815465564E-4	DESIGN
jdbc and connection settings	WITHOUT_CLASSIFICATION	0.9996125488184534	WITHOUT_CLASSIFICATION	3.874511815465564E-4	DESIGN
interrogate jdbc metadata	WITHOUT_CLASSIFICATION	0.9997604891053593	WITHOUT_CLASSIFICATION	2.3951089464076044E-4	DESIGN
user supplied jdbc connections	WITHOUT_CLASSIFICATION	0.9999537433771628	WITHOUT_CLASSIFICATION	4.625662283722747E-5	DESIGN
use dialect default properties	WITHOUT_CLASSIFICATION	0.9929555523802123	WITHOUT_CLASSIFICATION	0.007044447619787805	DESIGN
transaction settings	WITHOUT_CLASSIFICATION	0.99960008967686	WITHOUT_CLASSIFICATION	3.999103231400281E-4	DESIGN
sql generation settings	WITHOUT_CLASSIFICATION	0.9994633655920826	WITHOUT_CLASSIFICATION	5.366344079173837E-4	DESIGN
query parser settings	WITHOUT_CLASSIFICATION	0.9939577391574875	WITHOUT_CLASSIFICATION	0.006042260842512545	DESIGN
second-level / query cache	WITHOUT_CLASSIFICATION	0.999869084776435	WITHOUT_CLASSIFICATION	1.3091522356506672E-4	DESIGN
the cache provider is needed when we either have second-level cache enabled or query cache enabled. note that usesecondlevelcache is enabled by default	WITHOUT_CLASSIFICATION	0.999996236197074	WITHOUT_CLASSIFICATION	3.7638029260562444E-6	DESIGN
sql exception converter	WITHOUT_CLASSIFICATION	0.9994970402320643	WITHOUT_CLASSIFICATION	5.029597679357179E-4	DESIGN
statistics and logging	WITHOUT_CLASSIFICATION	0.9995319006590238	WITHOUT_CLASSIFICATION	4.6809934097627237E-4	DESIGN
settings.setshowsqlenabled(showsql)	WITHOUT_CLASSIFICATION	0.9995487121138841	WITHOUT_CLASSIFICATION	4.512878861158206E-4	DESIGN
settings.setformatsqlenabled(formatsql)	WITHOUT_CLASSIFICATION	0.9995487121138841	WITHOUT_CLASSIFICATION	4.512878861158206E-4	DESIGN
schema export	WITHOUT_CLASSIFICATION	0.999514430951818	WITHOUT_CLASSIFICATION	4.85569048182075E-4	DESIGN
string provider = properties.getproperty( environment.bytecode_provider ) log.info( "bytecode provider name " + provider ) bytecodeprovider bytecodeprovider = buildbytecodeprovider( provider ) settings.setbytecodeprovider( bytecodeprovider )	WITHOUT_CLASSIFICATION	0.9999862163740026	WITHOUT_CLASSIFICATION	1.3783625997300475E-5	DESIGN
legacy behavior apply the bridge	WITHOUT_CLASSIFICATION	0.9979790024701739	WITHOUT_CLASSIFICATION	0.002020997529826083	DESIGN
maybe a concrete sqlpropertyresult type but map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.919906862993794	WITHOUT_CLASSIFICATION	0.08009313700620609	DESIGN
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9982148024997356	WITHOUT_CLASSIFICATION	0.001785197500264409	DESIGN
private componenttuplizerfactory componenttuplizerfactory todo hhh-3517 and hhh-1907 private bytecodeprovider bytecodeprovider	WITHOUT_CLASSIFICATION	0.6895206426559285	DESIGN	0.31047935734407156	WITHOUT_CLASSIFICATION
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996051070931542	WITHOUT_CLASSIFICATION	3.948929068457664E-4	DESIGN
public componenttuplizerfactory getcomponenttuplizerfactory() { return componenttuplizerfactory }	WITHOUT_CLASSIFICATION	0.9968189086317045	WITHOUT_CLASSIFICATION	0.0031810913682955846	DESIGN
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9908849594968507	WITHOUT_CLASSIFICATION	0.009115040503149346	DESIGN
void setshowsqlenabled(boolean b) { showsql = b } void setformatsqlenabled(boolean b) { formatsql = b }	WITHOUT_CLASSIFICATION	0.9999556896469111	WITHOUT_CLASSIFICATION	4.431035308890979E-5	DESIGN
public bytecodeprovider getbytecodeprovider() { return bytecodeprovider } void setbytecodeprovider(bytecodeprovider bytecodeprovider) { this.bytecodeprovider = bytecodeprovider }	WITHOUT_CLASSIFICATION	0.999546454419255	WITHOUT_CLASSIFICATION	4.53545580744979E-4	DESIGN
using local since the inheritedmetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9551215537079389	WITHOUT_CLASSIFICATION	0.04487844629206107	DESIGN
private componenttuplizerfactory componenttuplizerfactory todo hhh-3517 and hhh-1907	WITHOUT_CLASSIFICATION	0.6895206426559285	DESIGN	0.31047935734407156	WITHOUT_CLASSIFICATION
protected list extendsqueue	WITHOUT_CLASSIFICATION	0.999269555498002	WITHOUT_CLASSIFICATION	7.304445019979583E-4	DESIGN
extendsqueue = new arraylist()	WITHOUT_CLASSIFICATION	0.999829443063419	WITHOUT_CLASSIFICATION	1.7055693658085482E-4	DESIGN
componenttuplizerfactory = new componenttuplizerfactory()	WITHOUT_CLASSIFICATION	0.9999110100441231	WITHOUT_CLASSIFICATION	8.898995587696306E-5	DESIGN
if doc is null then for whatever reason the cached file cannot be used	WITHOUT_CLASSIFICATION	0.9995404073512818	WITHOUT_CLASSIFICATION	4.5959264871830004E-4	DESIGN
drop them in reverse order in case db needs it done that way	WITHOUT_CLASSIFICATION	0.8708271628171935	WITHOUT_CLASSIFICATION	0.12917283718280653	DESIGN
public componenttuplizerfactory getcomponenttuplizerfactory() { return componenttuplizerfactory }	WITHOUT_CLASSIFICATION	0.9968189086317045	WITHOUT_CLASSIFICATION	0.0031810913682955846	DESIGN
this method may be called many times!!	WITHOUT_CLASSIFICATION	0.9743606792704377	WITHOUT_CLASSIFICATION	0.025639320729562303	DESIGN
iterator iterator = extendsqueue.iterator()	WITHOUT_CLASSIFICATION	0.999943255586382	WITHOUT_CLASSIFICATION	5.674441361800741E-5	DESIGN
iterator iter = extendsqueue.iterator()	WITHOUT_CLASSIFICATION	0.9999200228694411	WITHOUT_CLASSIFICATION	7.997713055877773E-5	DESIGN
found	WITHOUT_CLASSIFICATION	0.9997813221190825	WITHOUT_CLASSIFICATION	2.1867788091750197E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.9997813221190825	WITHOUT_CLASSIFICATION	2.1867788091750197E-4	DESIGN
settings.setcomponenttuplizerfactory( this.getcomponenttuplizerfactory() )	WITHOUT_CLASSIFICATION	0.9993316262540104	WITHOUT_CLASSIFICATION	6.68373745989595E-4	DESIGN
private final list extendsqueue	WITHOUT_CLASSIFICATION	0.9998194240769035	WITHOUT_CLASSIFICATION	1.8057592309657833E-4	DESIGN
<string string>	WITHOUT_CLASSIFICATION	0.9995160801463592	WITHOUT_CLASSIFICATION	4.8391985364078114E-4	DESIGN
<string string>	WITHOUT_CLASSIFICATION	0.9995160801463592	WITHOUT_CLASSIFICATION	4.8391985364078114E-4	DESIGN
+ "_" + referencedcolumnname not used for backward compatibility	WITHOUT_CLASSIFICATION	0.5942668203741062	DESIGN	0.4057331796258939	WITHOUT_CLASSIFICATION
set use_reflection_optimizer to false to fix hhh-227	WITHOUT_CLASSIFICATION	0.9782595908624981	WITHOUT_CLASSIFICATION	0.021740409137501884	DESIGN
orphan delete not supported for entitymode.dom4j	WITHOUT_CLASSIFICATION	0.9989298169742402	WITHOUT_CLASSIFICATION	0.001070183025759801	DESIGN
element = xmlhelper.generatedom4jelement( persister.getnodename() )	WITHOUT_CLASSIFICATION	0.9998812042741341	WITHOUT_CLASSIFICATION	1.1879572586584667E-4	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9994086421078932	WITHOUT_CLASSIFICATION	5.91357892106848E-4	DESIGN
orphan delete not supported for entitymode.dom4j	WITHOUT_CLASSIFICATION	0.9989298169742402	WITHOUT_CLASSIFICATION	0.001070183025759801	DESIGN
element = xmlhelper.generatedom4jelement( persister.getnodename() )	WITHOUT_CLASSIFICATION	0.9998812042741341	WITHOUT_CLASSIFICATION	1.1879572586584667E-4	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.9990370280673394	WITHOUT_CLASSIFICATION	9.629719326605162E-4	DESIGN
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9990812066239965	WITHOUT_CLASSIFICATION	9.187933760034301E-4	DESIGN
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9989683610878162	WITHOUT_CLASSIFICATION	0.0010316389121837245	DESIGN
the element has changed	WITHOUT_CLASSIFICATION	0.9998850922859007	WITHOUT_CLASSIFICATION	1.149077140992939E-4	DESIGN
careful these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.995986631398503	WITHOUT_CLASSIFICATION	0.004013368601497031	DESIGN
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9716187247177913	WITHOUT_CLASSIFICATION	0.028381275282208747	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9991459884761275	WITHOUT_CLASSIFICATION	8.540115238725879E-4	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9991459884761275	WITHOUT_CLASSIFICATION	8.540115238725879E-4	DESIGN
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9883629565892578	WITHOUT_CLASSIFICATION	0.011637043410742162	DESIGN
short-circuit(s) no new elements the old list contains only orphans no old elements so no orphans neither	WITHOUT_CLASSIFICATION	0.9999996469819816	WITHOUT_CLASSIFICATION	3.530180184596634E-7	DESIGN
create the collection holding the orphans	WITHOUT_CLASSIFICATION	0.9995224885712556	WITHOUT_CLASSIFICATION	4.775114287444572E-4	DESIGN
collect entityidentifier(s) of the current elements - add them into a hashset for fast access	WITHOUT_CLASSIFICATION	0.9992346242078498	WITHOUT_CLASSIFICATION	7.65375792150276E-4	DESIGN
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999566503162663	WITHOUT_CLASSIFICATION	4.334968373365364E-5	DESIGN
(array==null) ? templist.size()	WITHOUT_CLASSIFICATION	0.9988495640219424	WITHOUT_CLASSIFICATION	0.0011504359780577433	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9994086421078932	WITHOUT_CLASSIFICATION	5.91357892106848E-4	DESIGN
(array==null) ? templist.get(i)	WITHOUT_CLASSIFICATION	0.9988495640219424	WITHOUT_CLASSIFICATION	0.0011504359780577433	DESIGN
write() -- doesn't	WITHOUT_CLASSIFICATION	0.998776598947879	WITHOUT_CLASSIFICATION	0.0012234010521210772	DESIGN
write() -- doesn't	WITHOUT_CLASSIFICATION	0.998776598947879	WITHOUT_CLASSIFICATION	0.0012234010521210772	DESIGN
amazingly these two will work because abstractcollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.999990586261322	WITHOUT_CLASSIFICATION	9.41373867801808E-6	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.9990370280673394	WITHOUT_CLASSIFICATION	9.629719326605162E-4	DESIGN
finally what it's all about	WITHOUT_CLASSIFICATION	0.9961473064493354	WITHOUT_CLASSIFICATION	0.0038526935506645716	DESIGN
note that if we load this collection from a cartesian product the multiplicity would be broken so use an idbag instead	WITHOUT_CLASSIFICATION	0.9635736802545624	DESIGN	0.03642631974543762	WITHOUT_CLASSIFICATION
anyway here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9142863277215627	DESIGN	0.08571367227843726	WITHOUT_CLASSIFICATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999390202276335	WITHOUT_CLASSIFICATION	6.097977236639029E-5	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.877411415916461	WITHOUT_CLASSIFICATION	0.12258858408353894	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.9990370280673394	WITHOUT_CLASSIFICATION	9.629719326605162E-4	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999390202276335	WITHOUT_CLASSIFICATION	6.097977236639029E-5	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.877411415916461	WITHOUT_CLASSIFICATION	0.12258858408353894	DESIGN
public boolean equals(object other) {read()return bag.equals(other)}public int hashcode(object other) {read()return bag.hashcode()}	WITHOUT_CLASSIFICATION	0.9995042383014547	WITHOUT_CLASSIFICATION	4.957616985452455E-4	DESIGN
list operations	WITHOUT_CLASSIFICATION	0.9999524381577546	WITHOUT_CLASSIFICATION	4.756184224531185E-5	DESIGN
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999873763429563	WITHOUT_CLASSIFICATION	1.2623657043573167E-5	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.9990370280673394	WITHOUT_CLASSIFICATION	9.629719326605162E-4	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.9990370280673394	WITHOUT_CLASSIFICATION	9.629719326605162E-4	DESIGN
from map	WITHOUT_CLASSIFICATION	0.9996109765561864	WITHOUT_CLASSIFICATION	3.8902344381369354E-4	DESIGN
from sortedmap	WITHOUT_CLASSIFICATION	0.999201918684917	WITHOUT_CLASSIFICATION	7.980813150830052E-4	DESIGN
inject the data	WITHOUT_CLASSIFICATION	0.9998902445789328	WITHOUT_CLASSIFICATION	1.0975542106713729E-4	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997658049068745	WITHOUT_CLASSIFICATION	2.3419509312548966E-4	DESIGN
default pool size 20	WITHOUT_CLASSIFICATION	0.9999592786483115	WITHOUT_CLASSIFICATION	4.0721351688498295E-5	DESIGN
trying via forname() first to be as close to drivermanager's semantics	WITHOUT_CLASSIFICATION	0.9999952858218351	WITHOUT_CLASSIFICATION	4.714178165010961E-6	DESIGN
if debug level is enabled then log the password otherwise mask it	WITHOUT_CLASSIFICATION	0.9999799371505261	WITHOUT_CLASSIFICATION	2.0062849473809002E-5	DESIGN
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9996023444892143	WITHOUT_CLASSIFICATION	3.976555107857222E-4	DESIGN
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9998597955712405	WITHOUT_CLASSIFICATION	1.4020442875949644E-4	DESIGN
then bind it	WITHOUT_CLASSIFICATION	0.9989004780198938	WITHOUT_CLASSIFICATION	0.0010995219801061596	DESIGN
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9867225547301829	WITHOUT_CLASSIFICATION	0.013277445269816971	DESIGN
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9997001602573957	WITHOUT_CLASSIFICATION	2.9983974260431445E-4	DESIGN
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999969221969034	WITHOUT_CLASSIFICATION	3.077803096535028E-6	DESIGN
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9984058095397694	WITHOUT_CLASSIFICATION	0.0015941904602305183	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996416413798198	WITHOUT_CLASSIFICATION	3.583586201802189E-4	DESIGN
we could register the session against the transaction even though it is not started but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.999999343940002	WITHOUT_CLASSIFICATION	6.560599979726949E-7	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997658049068745	WITHOUT_CLASSIFICATION	2.3419509312548966E-4	DESIGN
private string propertyname	WITHOUT_CLASSIFICATION	0.9974857588901156	WITHOUT_CLASSIFICATION	0.0025142411098843472	DESIGN
public propertyprojection project() {return projections.property(getpropertyname())}	WITHOUT_CLASSIFICATION	0.9985271764649348	WITHOUT_CLASSIFICATION	0.0014728235350651372	DESIGN
string[] fk = stringhelper.qualify( "collection_" cp.getkeycolumnnames() )	WITHOUT_CLASSIFICATION	0.9988322492295983	WITHOUT_CLASSIFICATION	0.0011677507704017105	DESIGN
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999575976464437	WITHOUT_CLASSIFICATION	4.240235355645058E-5	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9995143983820708	WITHOUT_CLASSIFICATION	4.856016179292503E-4	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9995143983820708	WITHOUT_CLASSIFICATION	4.856016179292503E-4	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997658049068745	WITHOUT_CLASSIFICATION	2.3419509312548966E-4	DESIGN
the following two lines were added to ensure that this.params is not null which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999971697157902	WITHOUT_CLASSIFICATION	2.830284209700008E-6	DESIGN
with two-deep subqueries the same alias would get generated for both using the old method (criteriaquery.generatesqlalias()) so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9953521165911836	WITHOUT_CLASSIFICATION	0.004647883408816371	DESIGN
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9878936004016742	WITHOUT_CLASSIFICATION	0.012106399598325724	DESIGN
pull off the last " "	WITHOUT_CLASSIFICATION	0.9998681969938955	WITHOUT_CLASSIFICATION	1.318030061045096E-4	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.999675278758428	WITHOUT_CLASSIFICATION	3.2472124157203623E-4	DESIGN
we have the form trim(trimsource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9997475041247578	WITHOUT_CLASSIFICATION	2.5249587524217446E-4	DESIGN
we have the form trim(from trimsource). this is functionally equivalent to trim(trimsource)	WITHOUT_CLASSIFICATION	0.9966664395330783	WITHOUT_CLASSIFICATION	0.0033335604669215823	DESIGN
not_supported_should_use_jdbc3_preparedstatement.getgeneratedkeys_method	WITHOUT_CLASSIFICATION	0.9995487121138841	WITHOUT_CLASSIFICATION	4.512878861158206E-4	DESIGN
potentialtrimcharacterargindex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.99974959586116	WITHOUT_CLASSIFICATION	2.504041388399764E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996278398562839	WITHOUT_CLASSIFICATION	3.721601437161622E-4	DESIGN
oracle did add support for ansi case statements in 9i	WITHOUT_CLASSIFICATION	0.9999753816526915	WITHOUT_CLASSIFICATION	2.4618347308430547E-5	DESIGN
the standard sql function name is current_timestamp	WITHOUT_CLASSIFICATION	0.999993542686275	WITHOUT_CLASSIFICATION	6.457313725005865E-6	DESIGN
informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9764603505837183	WITHOUT_CLASSIFICATION	0.02353964941628172	DESIGN
or byte or text? or money	WITHOUT_CLASSIFICATION	0.9996928894072545	WITHOUT_CLASSIFICATION	3.071105927454227E-4	DESIGN
strip table-owner because informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999016108284858	WITHOUT_CLASSIFICATION	9.838917151407822E-5	DESIGN
build the map of standard ansi sql aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999919350201356	WITHOUT_CLASSIFICATION	8.064979864397202E-5	DESIGN
pre h3.2 behavior super.getreturntype(ct m)	WITHOUT_CLASSIFICATION	0.9995485443713898	WITHOUT_CLASSIFICATION	4.514556286100519E-4	DESIGN
finally use the sqltype if == on hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9995955765935265	WITHOUT_CLASSIFICATION	4.04423406473442E-4	DESIGN
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999671540166055	WITHOUT_CLASSIFICATION	3.2845983394462624E-5	DESIGN
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9827465278724424	WITHOUT_CLASSIFICATION	0.01725347212755757	DESIGN
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9967929513896925	WITHOUT_CLASSIFICATION	0.0032070486103074514	DESIGN
map second/minute/hour/day/month/year to ansi extract() override on subclasses	WITHOUT_CLASSIFICATION	0.9998575641325709	WITHOUT_CLASSIFICATION	1.4243586742921892E-4	DESIGN
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9967676311512118	WITHOUT_CLASSIFICATION	0.0032323688487883025	DESIGN
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990396727623948	WITHOUT_CLASSIFICATION	9.603272376052662E-4	DESIGN
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9966760738725583	WITHOUT_CLASSIFICATION	0.003323926127441753	DESIGN
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994423729593938	WITHOUT_CLASSIFICATION	5.576270406063558E-4	DESIGN
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999115838580686	WITHOUT_CLASSIFICATION	8.841614193156061E-5	DESIGN
identity support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99859884426986	WITHOUT_CLASSIFICATION	0.0014011557301399243	DESIGN
sequence support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996535896409389	WITHOUT_CLASSIFICATION	3.464103590611454E-4	DESIGN
guid support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983973402669124	WITHOUT_CLASSIFICATION	0.0016026597330875796	DESIGN
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983973402669124	WITHOUT_CLASSIFICATION	0.0016026597330875796	DESIGN
by default we report no support	WITHOUT_CLASSIFICATION	0.9483149503706524	WITHOUT_CLASSIFICATION	0.05168504962934756	DESIGN
by default we report no support for nowait lock semantics	WITHOUT_CLASSIFICATION	0.5721810671361365	WITHOUT_CLASSIFICATION	0.42781893286386347	DESIGN
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992682238572825	WITHOUT_CLASSIFICATION	7.317761427175035E-4	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9706547021946916	WITHOUT_CLASSIFICATION	0.029345297805308385	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9920585624026307	WITHOUT_CLASSIFICATION	0.007941437597369257	DESIGN
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995217634612243	WITHOUT_CLASSIFICATION	4.782365387757519E-4	DESIGN
sqlexception support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986600511754831	WITHOUT_CLASSIFICATION	0.0013399488245168976	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984326382097085	WITHOUT_CLASSIFICATION	0.0015673617902913766	DESIGN
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986121760036203	WITHOUT_CLASSIFICATION	0.0013878239963797461	DESIGN
ddl support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983973402669124	WITHOUT_CLASSIFICATION	0.0016026597330875796	DESIGN
grrr for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999001552241684	WITHOUT_CLASSIFICATION	9.984477583157406E-5	DESIGN
informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991449264302557	WITHOUT_CLASSIFICATION	8.550735697443074E-4	DESIGN
return false here as most databases do not properly support this construct	WITHOUT_CLASSIFICATION	0.9907763812984174	WITHOUT_CLASSIFICATION	0.009223618701582621	DESIGN
mckoi has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9996959975570622	WITHOUT_CLASSIFICATION	3.0400244293789366E-4	DESIGN
oracle8 and previous define only a "date" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9717027905489706	WITHOUT_CLASSIFICATION	0.028297209451029464	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9992157993510097	WITHOUT_CLASSIFICATION	7.842006489902698E-4	DESIGN
" cascade"	WITHOUT_CLASSIFICATION	0.9997806958763247	WITHOUT_CLASSIFICATION	2.1930412367527832E-4	DESIGN
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9996800420404961	WITHOUT_CLASSIFICATION	3.1995795950388135E-4	DESIGN
public boolean droptemporarytableafteruse() {we have to because postgres sets current txto rollback only after a failed create tablereturn true}	WITHOUT_CLASSIFICATION	0.9999949099242986	WITHOUT_CLASSIFICATION	5.090075701332639E-6	DESIGN
check violation	WITHOUT_CLASSIFICATION	0.9988462406832591	WITHOUT_CLASSIFICATION	0.0011537593167408884	DESIGN
unique violation	WITHOUT_CLASSIFICATION	0.9984782506228549	WITHOUT_CLASSIFICATION	0.0015217493771450235	DESIGN
foreign key violation	WITHOUT_CLASSIFICATION	0.9994328129768444	WITHOUT_CLASSIFICATION	5.671870231556262E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996278398562839	WITHOUT_CLASSIFICATION	3.721601437161622E-4	DESIGN
not null violation	WITHOUT_CLASSIFICATION	0.9984990312758657	WITHOUT_CLASSIFICATION	0.0015009687241342962	DESIGN
all other	WITHOUT_CLASSIFICATION	0.9996200951801665	WITHOUT_CLASSIFICATION	3.799048198335215E-4	DESIGN
register the type of the out param - postgresql uses types.other	WITHOUT_CLASSIFICATION	0.9989966546075038	WITHOUT_CLASSIFICATION	0.0010033453924961856	DESIGN
seems to not really public boolean supportsrowvalueconstructorsyntax() { return true }	WITHOUT_CLASSIFICATION	0.8974692362594879	WITHOUT_CLASSIFICATION	0.10253076374051202	DESIGN
seems to have spotty lob suppport	WITHOUT_CLASSIFICATION	0.9992975607692555	WITHOUT_CLASSIFICATION	7.02439230744435E-4	DESIGN
hhh-2300	WITHOUT_CLASSIFICATION	0.9996695162880856	WITHOUT_CLASSIFICATION	3.304837119143956E-4	DESIGN
ignore (probably h2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9994067481080948	WITHOUT_CLASSIFICATION	5.932518919051915E-4	DESIGN
numeric functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994173039589473	WITHOUT_CLASSIFICATION	5.826960410526797E-4	DESIGN
string functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993149295797601	WITHOUT_CLASSIFICATION	6.850704202398866E-4	DESIGN
time and date functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997484168367177	WITHOUT_CLASSIFICATION	2.515831632823221E-4	DESIGN
system functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985232555327225	WITHOUT_CLASSIFICATION	0.0014767444672775072	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9987352051142481	WITHOUT_CLASSIFICATION	0.0012647948857519534	DESIGN
23000 check constraint violation {0} 23001 unique index or primary key violation {0}	WITHOUT_CLASSIFICATION	0.9997795597402533	WITHOUT_CLASSIFICATION	2.2044025974666368E-4	DESIGN
display the dialect version.	WITHOUT_CLASSIFICATION	0.9980509862188408	WITHOUT_CLASSIFICATION	0.0019490137811592632	DESIGN
the rdms concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999993227743211	WITHOUT_CLASSIFICATION	6.772256788394546E-7	DESIGN
dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9976741163680859	WITHOUT_CLASSIFICATION	0.002325883631914138	DESIGN
original dialect.java returns " for update"	WITHOUT_CLASSIFICATION	0.9998308720226785	WITHOUT_CLASSIFICATION	1.6912797732145053E-4	DESIGN
verify the state of this new method in hibernate 3.0 dialect.java	WITHOUT_CLASSIFICATION	0.9987962426439134	WITHOUT_CLASSIFICATION	0.001203757356086631	DESIGN
origial dialect.java returns true	WITHOUT_CLASSIFICATION	0.9991785210926618	WITHOUT_CLASSIFICATION	8.214789073381848E-4	DESIGN
the keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.8039346513268428	WITHOUT_CLASSIFICATION	0.1960653486731571	DESIGN
sequence methods - start. the rdms dialect needs these	WITHOUT_CLASSIFICATION	0.991882220758951	WITHOUT_CLASSIFICATION	0.008117779241049007	DESIGN
methods to make it possible to use the native id generator	WITHOUT_CLASSIFICATION	0.9897850838706461	WITHOUT_CLASSIFICATION	0.010214916129353909	DESIGN
the where clause was added to eliminate this statement from brute force searches.	WITHOUT_CLASSIFICATION	0.9993975199144568	WITHOUT_CLASSIFICATION	6.024800855430909E-4	DESIGN
sequence methods - end	WITHOUT_CLASSIFICATION	0.9989848888071642	WITHOUT_CLASSIFICATION	0.0010151111928357877	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996278398562839	WITHOUT_CLASSIFICATION	3.721601437161622E-4	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9992157993510097	WITHOUT_CLASSIFICATION	7.842006489902698E-4	DESIGN
we must return a valid rdms/rsa command from this method to prevent rdms/rsa from issuing error 400	WITHOUT_CLASSIFICATION	0.7701318899323262	WITHOUT_CLASSIFICATION	0.22986811006767388	DESIGN
used with drop table to delete all records in the table.	WITHOUT_CLASSIFICATION	0.8646183687546626	WITHOUT_CLASSIFICATION	0.13538163124533734	DESIGN
rdms supports the union all clause.	WITHOUT_CLASSIFICATION	0.9997697115429132	WITHOUT_CLASSIFICATION	2.3028845708691247E-4	DESIGN
rdms has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.999702906400151	WITHOUT_CLASSIFICATION	2.970935998489671E-4	DESIGN
multi-param dialect functions	WITHOUT_CLASSIFICATION	0.9933906772684847	WITHOUT_CLASSIFICATION	0.006609322731515352	DESIGN
function templates	WITHOUT_CLASSIFICATION	0.9999591318083109	WITHOUT_CLASSIFICATION	4.086819168912495E-5	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9987352051142481	WITHOUT_CLASSIFICATION	0.0012647948857519534	DESIGN
this assumes schema support which is present in 1.8.0 and later	WITHOUT_CLASSIFICATION	0.9971209671457149	WITHOUT_CLASSIFICATION	0.002879032854285172	DESIGN
hsqldb only supports read_uncommitted transaction isolation	WITHOUT_CLASSIFICATION	0.9998714913342125	WITHOUT_CLASSIFICATION	1.285086657875759E-4	DESIGN
multi-param string dialect functions	WITHOUT_CLASSIFICATION	0.9975581712647218	WITHOUT_CLASSIFICATION	0.0024418287352782	DESIGN
multi-param numeric dialect functions	WITHOUT_CLASSIFICATION	0.9979225233215454	WITHOUT_CLASSIFICATION	0.0020774766784546184	DESIGN
multi-param date dialect functions	WITHOUT_CLASSIFICATION	0.9964151695373991	WITHOUT_CLASSIFICATION	0.003584830462601056	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9996000763135879	WITHOUT_CLASSIFICATION	3.9992368641207675E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996278398562839	WITHOUT_CLASSIFICATION	3.721601437161622E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996278398562839	WITHOUT_CLASSIFICATION	3.721601437161622E-4	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9937425857805169	WITHOUT_CLASSIFICATION	0.006257414219483058	DESIGN
register the type of the out param - an oracle specific type	WITHOUT_CLASSIFICATION	0.9998688283389436	WITHOUT_CLASSIFICATION	1.3117166105644737E-4	DESIGN
timesten has no blob/clob support but these types may be suitable for some applications. the length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.998380161763368	WITHOUT_CLASSIFICATION	0.0016198382366320772	DESIGN
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9949326480660328	WITHOUT_CLASSIFICATION	0.005067351933967252	DESIGN
public boolean supportsforupdatenowait() {return false}	WITHOUT_CLASSIFICATION	0.9991622065559899	WITHOUT_CLASSIFICATION	8.377934440101414E-4	DESIGN
timesten has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9997098618569709	WITHOUT_CLASSIFICATION	2.901381430290936E-4	DESIGN
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.99929529328778	WITHOUT_CLASSIFICATION	7.047067122199746E-4	DESIGN
add new ordered map	WITHOUT_CLASSIFICATION	0.9990451649525144	WITHOUT_CLASSIFICATION	9.548350474855644E-4	DESIGN
registercolumntype( types.varchar 16777215 "mediumtext" )	WITHOUT_CLASSIFICATION	0.9993434655145554	WITHOUT_CLASSIFICATION	6.565344854445213E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996278398562839	WITHOUT_CLASSIFICATION	3.721601437161622E-4	DESIGN
this assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999808657918476	WITHOUT_CLASSIFICATION	1.913420815243125E-5	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9993898942457068	WITHOUT_CLASSIFICATION	6.101057542931672E-4	DESIGN
return "select current_timestamp from rdb$database"	WITHOUT_CLASSIFICATION	0.9980230046529416	WITHOUT_CLASSIFICATION	0.0019769953470584554	DESIGN
registercolumntype data types	WITHOUT_CLASSIFICATION	0.9996384776743763	WITHOUT_CLASSIFICATION	3.6152232562370923E-4	DESIGN
hibernate seems to ignore this type	WITHOUT_CLASSIFICATION	0.9939311005174811	WITHOUT_CLASSIFICATION	0.006068899482518881	DESIGN
ibid for current_time and current_date	WITHOUT_CLASSIFICATION	0.9995170642500688	WITHOUT_CLASSIFICATION	4.8293574993120035E-4	DESIGN
tell hibernate to use getbytes instead of getbinarystream	WITHOUT_CLASSIFICATION	0.986029443850228	WITHOUT_CLASSIFICATION	0.013970556149772056	DESIGN
no batch statements	WITHOUT_CLASSIFICATION	0.9998536594170963	WITHOUT_CLASSIFICATION	1.463405829037738E-4	DESIGN
we might want a special case for 192. this is very common for money types and here it is converted to 181	WITHOUT_CLASSIFICATION	0.8215569397772812	DESIGN	0.17844306022271889	WITHOUT_CLASSIFICATION
no pointbase bit	WITHOUT_CLASSIFICATION	0.9939886351797121	WITHOUT_CLASSIFICATION	0.006011364820287872	DESIGN
no pointbase tinyint	WITHOUT_CLASSIFICATION	0.9992258647637016	WITHOUT_CLASSIFICATION	7.741352362984277E-4	DESIGN
pointbase has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9991849938386058	WITHOUT_CLASSIFICATION	8.150061613942467E-4	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9992157993510097	WITHOUT_CLASSIFICATION	7.842006489902698E-4	DESIGN
the current_timestamp is more accurate but only known to be supported in sql server 7.0 and later (i.e. sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9044422306179088	WITHOUT_CLASSIFICATION	0.09555776938209115	DESIGN
sql server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999959962173481	WITHOUT_CLASSIFICATION	4.00378265188045E-6	DESIGN
here assume sqlserver2005 using snapshot isolation which does not have this problem	WITHOUT_CLASSIFICATION	0.9909078555033253	WITHOUT_CLASSIFICATION	0.009092144496674627	DESIGN
registercolumntype( types.blob 16777215 "mediumblob" ) registercolumntype( types.blob 65535 "blob" )	WITHOUT_CLASSIFICATION	0.9979670952910928	WITHOUT_CLASSIFICATION	0.0020329047089071846	DESIGN
registercolumntype( types.clob 16777215 "mediumtext" ) registercolumntype( types.clob 65535 "text" )	WITHOUT_CLASSIFICATION	0.9995778360406278	WITHOUT_CLASSIFICATION	4.221639593721841E-4	DESIGN
registercolumntype( types.varchar 16777215 "mediumtext" ) registercolumntype( types.varchar 65535 "text" )	WITHOUT_CLASSIFICATION	0.9995778360406278	WITHOUT_CLASSIFICATION	4.221639593721841E-4	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9992157993510097	WITHOUT_CLASSIFICATION	7.842006489902698E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9995889988830555	WITHOUT_CLASSIFICATION	4.1100111694450814E-4	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9993898942457068	WITHOUT_CLASSIFICATION	6.101057542931672E-4	DESIGN
sybase bit type does not support null values	WITHOUT_CLASSIFICATION	0.9418604953245733	WITHOUT_CLASSIFICATION	0.05813950467542675	DESIGN
this assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999808657918476	WITHOUT_CLASSIFICATION	1.913420815243125E-5	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996278398562839	WITHOUT_CLASSIFICATION	3.721601437161622E-4	DESIGN
you may still have other resultsets or update counts left to process here but you can't do it now or the resultset you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999595343383	WITHOUT_CLASSIFICATION	4.046566166997404E-8	DESIGN
not null (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.997713880378289	WITHOUT_CLASSIFICATION	0.0022861196217110946	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996278398562839	WITHOUT_CLASSIFICATION	3.721601437161622E-4	DESIGN
oracle driver reports to support getgeneratedkeys() but they only support the version taking an array of the names of the columns to be returned (via its returning clause). no other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999057957511884	WITHOUT_CLASSIFICATION	9.420424881148772E-5	DESIGN
multi-param string dialect functions	WITHOUT_CLASSIFICATION	0.9975581712647218	WITHOUT_CLASSIFICATION	0.0024418287352782	DESIGN
multi-param numeric dialect functions	WITHOUT_CLASSIFICATION	0.9979225233215454	WITHOUT_CLASSIFICATION	0.0020774766784546184	DESIGN
multi-param date dialect functions	WITHOUT_CLASSIFICATION	0.9964151695373991	WITHOUT_CLASSIFICATION	0.003584830462601056	DESIGN
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999842107388759	WITHOUT_CLASSIFICATION	1.5789261124154743E-5	DESIGN
add the main query	WITHOUT_CLASSIFICATION	0.9998940875547344	WITHOUT_CLASSIFICATION	1.0591244526565966E-4	DESIGN
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999799549944901	WITHOUT_CLASSIFICATION	2.00450055099124E-5	DESIGN
this assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999808657918476	WITHOUT_CLASSIFICATION	1.913420815243125E-5	DESIGN
you may still have other resultsets or update counts left to process here but you can't do it now or the resultset you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999595343383	WITHOUT_CLASSIFICATION	4.046566166997404E-8	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996278398562839	WITHOUT_CLASSIFICATION	3.721601437161622E-4	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9992157993510097	WITHOUT_CLASSIFICATION	7.842006489902698E-4	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9996000763135879	WITHOUT_CLASSIFICATION	3.9992368641207675E-4	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9937425857805169	WITHOUT_CLASSIFICATION	0.006257414219483058	DESIGN
register the type of the out param - an oracle specific type	WITHOUT_CLASSIFICATION	0.9998688283389436	WITHOUT_CLASSIFICATION	1.3117166105644737E-4	DESIGN
features which change between 8i 9i and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994425073225837	WITHOUT_CLASSIFICATION	5.574926774163983E-4	DESIGN
features which remain constant across 8i 9i and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999810494361012	WITHOUT_CLASSIFICATION	1.8950563898803713E-5	DESIGN
binary %stream character %stream	WITHOUT_CLASSIFICATION	0.9999146505063428	WITHOUT_CLASSIFICATION	8.534949365717518E-5	DESIGN
getdefaultproperties().setproperty(environment.statement_batch_size no_batch)	WITHOUT_CLASSIFICATION	0.9995487121138841	WITHOUT_CLASSIFICATION	4.512878861158206E-4	DESIGN
hibernate impelemnts cast in dialect.java	WITHOUT_CLASSIFICATION	0.996242880688985	WITHOUT_CLASSIFICATION	0.0037571193110150685	DESIGN
aggregate functions shouldn't be registered right? registerfunction( "list" new standardsqlfunction("list"hibernate.string) ) stopped on $list	WITHOUT_CLASSIFICATION	0.9488749985236701	DESIGN	0.051125001476329944	WITHOUT_CLASSIFICATION
ddl support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983973402669124	WITHOUT_CLASSIFICATION	0.0016026597330875796	DESIGN
below is for cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9994866539564112	WITHOUT_CLASSIFICATION	5.133460435887414E-4	DESIGN
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9956394957062965	WITHOUT_CLASSIFICATION	0.004360504293703425	DESIGN
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9991008435769699	WITHOUT_CLASSIFICATION	8.991564230301253E-4	DESIGN
the syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9575328258045755	WITHOUT_CLASSIFICATION	0.042467174195424555	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.999514050864903	WITHOUT_CLASSIFICATION	4.859491350970499E-4	DESIGN
identity support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99859884426986	WITHOUT_CLASSIFICATION	0.0014011557301399243	DESIGN
sequence support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996535896409389	WITHOUT_CLASSIFICATION	3.464103590611454E-4	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9706547021946916	WITHOUT_CLASSIFICATION	0.029345297805308385	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.999514050864903	WITHOUT_CLASSIFICATION	4.859491350970499E-4	DESIGN
the syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9914171222632718	WITHOUT_CLASSIFICATION	0.008582877736728087	DESIGN
completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9993565565876416	WITHOUT_CLASSIFICATION	6.434434123584233E-4	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980966627701612	WITHOUT_CLASSIFICATION	0.0019033372298387697	DESIGN
limit support (ala top) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999865870408703	WITHOUT_CLASSIFICATION	1.341295912970143E-4	DESIGN
intersystems cache' does not current support "select for update" syntax set your transaction mode to read_committed before using	WITHOUT_CLASSIFICATION	0.9971087103700422	WITHOUT_CLASSIFICATION	0.002891289629957805	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996278398562839	WITHOUT_CLASSIFICATION	3.721601437161622E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996278398562839	WITHOUT_CLASSIFICATION	3.721601437161622E-4	DESIGN
<string>	WITHOUT_CLASSIFICATION	0.9996695162880856	WITHOUT_CLASSIFICATION	3.304837119143956E-4	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9920585624026307	WITHOUT_CLASSIFICATION	0.007941437597369257	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984326382097085	WITHOUT_CLASSIFICATION	0.0015673617902913766	DESIGN
the keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.8039346513268428	WITHOUT_CLASSIFICATION	0.1960653486731571	DESIGN
does the limit clause come at the start of the select statement rather than at the end?	WITHOUT_CLASSIFICATION	0.9996156042449215	WITHOUT_CLASSIFICATION	3.843957550785232E-4	DESIGN
does the limit clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999164098991814	WITHOUT_CLASSIFICATION	8.35901008186351E-5	DESIGN
the name of the sql function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9997858582855703	WITHOUT_CLASSIFICATION	2.141417144295727E-4	DESIGN
create an outerjoingenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9971339083427122	WITHOUT_CLASSIFICATION	0.002866091657287859	DESIGN
the keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9978744621945341	WITHOUT_CLASSIFICATION	0.0021255378054658132	DESIGN
registerfunction( "trim" new standardsqlfunction( "trim" hibernate.string ) )	WITHOUT_CLASSIFICATION	0.9993395842075115	WITHOUT_CLASSIFICATION	6.604157924884837E-4	DESIGN
skip the from keyword in params	WITHOUT_CLASSIFICATION	0.9998152797729505	WITHOUT_CLASSIFICATION	1.8472022704955354E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.998999143842101	WITHOUT_CLASSIFICATION	0.0010008561578989529	DESIGN
potentialtrimcharacterargindex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.99974959586116	WITHOUT_CLASSIFICATION	2.504041388399764E-4	DESIGN
sqlfunction implementation	WITHOUT_CLASSIFICATION	0.9994328225015746	WITHOUT_CLASSIFICATION	5.671774984254137E-4	DESIGN
conceivable that the dialect ctor could throw hibernateexceptions so don't re-wrap	WITHOUT_CLASSIFICATION	0.9871117522277182	WITHOUT_CLASSIFICATION	0.012888247772281711	DESIGN
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9992060023343108	WITHOUT_CLASSIFICATION	7.939976656891966E-4	DESIGN
register resolvers set via environment property	WITHOUT_CLASSIFICATION	0.9727008127807008	WITHOUT_CLASSIFICATION	0.027299187219299286	DESIGN
kept for backward compatibility until after the 3.1beta5 release of ha	WITHOUT_CLASSIFICATION	0.9999675990832265	WITHOUT_CLASSIFICATION	3.2400916773402156E-5	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9998088065810954	WITHOUT_CLASSIFICATION	1.911934189046944E-4	DESIGN
the cascadingaction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997658492123663	WITHOUT_CLASSIFICATION	2.341507876336438E-4	DESIGN
the cascadingaction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997589670391471	WITHOUT_CLASSIFICATION	2.4103296085295194E-4	DESIGN
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999333154087592	WITHOUT_CLASSIFICATION	6.668459124072103E-5	DESIGN
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9984070424178894	WITHOUT_CLASSIFICATION	0.001592957582110615	DESIGN
(lockmode) anything	WITHOUT_CLASSIFICATION	0.9998139430989654	WITHOUT_CLASSIFICATION	1.8605690103457633E-4	DESIGN
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998039262560064	WITHOUT_CLASSIFICATION	1.9607374399360864E-4	DESIGN
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999301749751639	WITHOUT_CLASSIFICATION	6.982502483614809E-5	DESIGN
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999132010114923	WITHOUT_CLASSIFICATION	8.679898850763807E-5	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999885304516636	WITHOUT_CLASSIFICATION	1.1469548336343446E-5	DESIGN
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9978419673803636	WITHOUT_CLASSIFICATION	0.002158032619636543	DESIGN
for deprecated saveorupdatecopy()	WITHOUT_CLASSIFICATION	0.9991049067628645	WITHOUT_CLASSIFICATION	8.950932371355792E-4	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999133510340192	WITHOUT_CLASSIFICATION	8.664896598076853E-5	DESIGN
a proxy cannot be transient and it breaks foreignkeys.istransient	WITHOUT_CLASSIFICATION	0.9977648491922786	WITHOUT_CLASSIFICATION	0.0022351508077215142	DESIGN
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999096111498651	WITHOUT_CLASSIFICATION	9.038885013491638E-5	DESIGN
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999202885740086	WITHOUT_CLASSIFICATION	7.971142599139756E-4	DESIGN
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9981426081413824	WITHOUT_CLASSIFICATION	0.001857391858617661	DESIGN
actually the semantics of the next three are really "bag" note that unlike objects collection insertions updates deletions are not really remembered between flushes. we just re-use the same lists for convenience.	WITHOUT_CLASSIFICATION	0.9718382461043216	DESIGN	0.02816175389567838	WITHOUT_CLASSIFICATION
add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9996947824997188	WITHOUT_CLASSIFICATION	3.0521750028112115E-4	DESIGN
continue loop	WITHOUT_CLASSIFICATION	0.9999322828062759	WITHOUT_CLASSIFICATION	6.771719372413044E-5	DESIGN
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9991952674790254	WITHOUT_CLASSIFICATION	8.047325209746476E-4	DESIGN
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999342693480118	WITHOUT_CLASSIFICATION	6.573065198820114E-5	DESIGN
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999366520131711	WITHOUT_CLASSIFICATION	6.33479868288698E-5	DESIGN
the map of batch numbers to entityinsertaction lists	WITHOUT_CLASSIFICATION	0.9993103735484322	WITHOUT_CLASSIFICATION	6.896264515677434E-4	DESIGN
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9996816739963535	WITHOUT_CLASSIFICATION	3.183260036463592E-4	DESIGN
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999833363758189	WITHOUT_CLASSIFICATION	1.6663624181056965E-5	DESIGN
remove the current element from insertions. it will be added back later.	WITHOUT_CLASSIFICATION	0.999994608737342	WITHOUT_CLASSIFICATION	5.391262658049272E-6	DESIGN
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9994806619326693	WITHOUT_CLASSIFICATION	5.193380673307069E-4	DESIGN
there is already an existing batch for this type of entity. check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9992269349838294	WITHOUT_CLASSIFICATION	7.730650161705552E-4	DESIGN
now rebuild the insertions list. there is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9996669319351447	WITHOUT_CLASSIFICATION	3.330680648554255E-4	DESIGN
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9978700112590201	WITHOUT_CLASSIFICATION	0.0021299887409798376	DESIGN
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999689370112689	WITHOUT_CLASSIFICATION	3.106298873112345E-5	DESIGN
find the batch number associated with the current association if any.	WITHOUT_CLASSIFICATION	0.9999732878886816	WITHOUT_CLASSIFICATION	2.6712111318413693E-5	DESIGN
create a new batch for this type. the batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9961639616336899	WITHOUT_CLASSIFICATION	0.0038360383663101185	DESIGN
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9992190223478056	WITHOUT_CLASSIFICATION	7.809776521943851E-4	DESIGN
since this entity will now be processed in the latest possible batch we can be assured that it will come after all other associations there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9965658629925078	WITHOUT_CLASSIFICATION	0.003434137007492096	DESIGN
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999339895568263	WITHOUT_CLASSIFICATION	6.601044317371225E-5	DESIGN
not really necessary but good for consistency	WITHOUT_CLASSIFICATION	0.9406441432214669	WITHOUT_CLASSIFICATION	0.05935585677853315	DESIGN
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999415569625834	WITHOUT_CLASSIFICATION	5.844303741668453E-5	DESIGN
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9990611199240194	WITHOUT_CLASSIFICATION	9.38880075980707E-4	DESIGN
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.997848733905832	WITHOUT_CLASSIFICATION	0.0021512660941679553	DESIGN
loaded entity instances by entityuniquekey	WITHOUT_CLASSIFICATION	0.9999169025900904	WITHOUT_CLASSIFICATION	8.309740990966762E-5	DESIGN
identity map of entityentry instances by the entity instance	WITHOUT_CLASSIFICATION	0.9999676631756185	WITHOUT_CLASSIFICATION	3.233682438164988E-5	DESIGN
entity proxies by entitykey	WITHOUT_CLASSIFICATION	0.999155707486668	WITHOUT_CLASSIFICATION	8.442925133318841E-4	DESIGN
snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.999953147307538	WITHOUT_CLASSIFICATION	4.685269246196832E-5	DESIGN
identity map of array holder arrayholder instances by the array instance	WITHOUT_CLASSIFICATION	0.9999809834260436	WITHOUT_CLASSIFICATION	1.9016573956457464E-5	DESIGN
collection wrappers by the collectionkey key=collectionkey value=persistentcollection	WITHOUT_CLASSIFICATION	0.9998414914429441	WITHOUT_CLASSIFICATION	1.5850855705598114E-4	DESIGN
set of entitykeys of deleted objects	WITHOUT_CLASSIFICATION	0.9995923472563882	WITHOUT_CLASSIFICATION	4.076527436118095E-4	DESIGN
properties that we have tried to load and not found in the database	WITHOUT_CLASSIFICATION	0.9997083289103621	WITHOUT_CLASSIFICATION	2.91671089637888E-4	DESIGN
a list of collection wrappers that were instantiating during result set processing that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999071065209064	WITHOUT_CLASSIFICATION	9.289347909355025E-5	DESIGN
a container for collections we load up when the owning entity is not yet loaded for now this is purely transient!	WITHOUT_CLASSIFICATION	0.9929738715722422	WITHOUT_CLASSIFICATION	0.007026128427757848	DESIGN
downgrade locks	WITHOUT_CLASSIFICATION	0.9995259347109429	WITHOUT_CLASSIFICATION	4.7406528905720197E-4	DESIGN
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9997170557522868	WITHOUT_CLASSIFICATION	2.829442477132205E-4	DESIGN
unwrap the object	WITHOUT_CLASSIFICATION	0.9998585906206023	WITHOUT_CLASSIFICATION	1.4140937939759076E-4	DESIGN
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.99994503521294	WITHOUT_CLASSIFICATION	5.4964787059975574E-5	DESIGN
return the proxied object	WITHOUT_CLASSIFICATION	0.9992301427130259	WITHOUT_CLASSIFICATION	7.698572869741031E-4	DESIGN
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999920424987659	WITHOUT_CLASSIFICATION	7.957501234028097E-6	DESIGN
early exit	WITHOUT_CLASSIFICATION	0.9998868495165929	WITHOUT_CLASSIFICATION	1.1315048340700427E-4	DESIGN
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9976529483259383	WITHOUT_CLASSIFICATION	0.002347051674061658	DESIGN
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.98380312388118	WITHOUT_CLASSIFICATION	0.016196876118820078	DESIGN
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.5185303002479722	DESIGN	0.48146969975202775	WITHOUT_CLASSIFICATION
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999701816794291	WITHOUT_CLASSIFICATION	2.981832057093246E-5	DESIGN
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9959179279473608	WITHOUT_CLASSIFICATION	0.004082072052639138	DESIGN
public boolean isnonexistant(entitykey key) {return nonexistantentitykeys.contains(key)}	WITHOUT_CLASSIFICATION	0.999161839927348	WITHOUT_CLASSIFICATION	8.381600726519915E-4	DESIGN
public boolean isnonexistant(entityuniquekey key) {return nonexistententityuniquekeys.contains(key)}	WITHOUT_CLASSIFICATION	0.999161839927348	WITHOUT_CLASSIFICATION	8.381600726519915E-4	DESIGN
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9992968626756857	WITHOUT_CLASSIFICATION	7.031373243143509E-4	DESIGN
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9885889491988233	WITHOUT_CLASSIFICATION	0.011411050801176686	DESIGN
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9952038509131435	WITHOUT_CLASSIFICATION	0.00479614908685656	DESIGN
otherwise the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999966277421403	WITHOUT_CLASSIFICATION	3.3722578597988177E-6	DESIGN
adds remove as a sort-of alias for delete	WITHOUT_CLASSIFICATION	0.999862640940255	WITHOUT_CLASSIFICATION	1.3735905974494191E-4	DESIGN
bad cast	WITHOUT_CLASSIFICATION	0.9988890210289855	WITHOUT_CLASSIFICATION	0.0011109789710145447	DESIGN
return lhspersister.getsubclasspropertycolumnnames(property)	WITHOUT_CLASSIFICATION	0.9994010633503159	WITHOUT_CLASSIFICATION	5.989366496841748E-4	DESIGN
property-refs for associations defined on a component are not supported so no need to slice	WITHOUT_CLASSIFICATION	0.9980163872583853	WITHOUT_CLASSIFICATION	0.001983612741614672	DESIGN
if there is no property-ref assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999911743961477	WITHOUT_CLASSIFICATION	8.825603852332987E-6	DESIGN
handle a property-ref	WITHOUT_CLASSIFICATION	0.9945661923357468	WITHOUT_CLASSIFICATION	0.005433807664253179	DESIGN
nativesqlqueryreturn	WITHOUT_CLASSIFICATION	0.999514050864903	WITHOUT_CLASSIFICATION	4.859491350970499E-4	DESIGN
final boolean forcecacherefresh	WITHOUT_CLASSIFICATION	0.9998931228022602	WITHOUT_CLASSIFICATION	1.068771977398248E-4	DESIGN
why is all others non final ?	WITHOUT_CLASSIFICATION	0.6451581020184864	WITHOUT_CLASSIFICATION	0.3548418979815135	DESIGN
this.forcecacherefresh = forcecacherefresh	WITHOUT_CLASSIFICATION	0.9999099371022585	WITHOUT_CLASSIFICATION	9.006289774160003E-5	DESIGN
hella important optimization!!!	WITHOUT_CLASSIFICATION	0.9989811031263461	WITHOUT_CLASSIFICATION	0.001018896873653784	DESIGN
return that.type.equals(type) && equalshelper.equals(that.value value)	WITHOUT_CLASSIFICATION	0.9987174305209575	WITHOUT_CLASSIFICATION	0.0012825694790425902	DESIGN
must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9992045876487889	WITHOUT_CLASSIFICATION	7.954123512109212E-4	DESIGN
take a snapshot	WITHOUT_CLASSIFICATION	0.999409932972513	WITHOUT_CLASSIFICATION	5.900670274869444E-4	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9962822697823139	WITHOUT_CLASSIFICATION	0.0037177302176860313	DESIGN
the owning entity may have been deleted and its identifier unset due to identifier-rollback in which case try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9998191481030781	WITHOUT_CLASSIFICATION	1.8085189692193507E-4	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9992897499566495	WITHOUT_CLASSIFICATION	7.102500433504922E-4	DESIGN
we've been here before	WITHOUT_CLASSIFICATION	0.9992634940710539	WITHOUT_CLASSIFICATION	7.365059289460972E-4	DESIGN
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999829601902167	WITHOUT_CLASSIFICATION	1.7039809783265675E-5	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9992897499566495	WITHOUT_CLASSIFICATION	7.102500433504922E-4	DESIGN
if either its role changed	WITHOUT_CLASSIFICATION	0.9999425646557016	WITHOUT_CLASSIFICATION	5.74353442983912E-5	DESIGN
or its key changed	WITHOUT_CLASSIFICATION	0.9999818038627094	WITHOUT_CLASSIFICATION	1.8196137290563815E-5	DESIGN
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9996993752244284	WITHOUT_CLASSIFICATION	3.006247755715326E-4	DESIGN
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9979895551429431	WITHOUT_CLASSIFICATION	0.0020104448570569737	DESIGN
force initialize!	WITHOUT_CLASSIFICATION	0.9997461524765883	WITHOUT_CLASSIFICATION	2.5384752341167015E-4	DESIGN
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999858515050651	WITHOUT_CLASSIFICATION	1.4148494934848599E-5	DESIGN
attributes maintained between flush cycles	WITHOUT_CLASSIFICATION	0.9979100656460589	WITHOUT_CLASSIFICATION	0.002089934353941025	DESIGN
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9998625475650027	WITHOUT_CLASSIFICATION	1.3745243499737326E-4	DESIGN
allow the collectionsnapshot to be serialized	WITHOUT_CLASSIFICATION	0.998870715703359	WITHOUT_CLASSIFICATION	0.0011292842966410407	DESIGN
attributes used only during flush cycle	WITHOUT_CLASSIFICATION	0.9745133353616118	WITHOUT_CLASSIFICATION	0.025486664638388237	DESIGN
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999474516964805	WITHOUT_CLASSIFICATION	5.2548303519394885E-5	DESIGN
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999604960129354	WITHOUT_CLASSIFICATION	3.950398706472976E-5	DESIGN
during flush we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9725698737560514	WITHOUT_CLASSIFICATION	0.02743012624394853	DESIGN
if we instantiate a collection during the flush() process we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999827070553314	WITHOUT_CLASSIFICATION	1.729294466857851E-5	DESIGN
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9924556625966656	WITHOUT_CLASSIFICATION	0.007544337403334415	DESIGN
a newly wrapped collection is not dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.7931663317804747	WITHOUT_CLASSIFICATION	0.2068336682195252	DESIGN
collection.cleardirty()	WITHOUT_CLASSIFICATION	0.999125213654425	WITHOUT_CLASSIFICATION	8.74786345574921E-4	DESIGN
collection.cleardirty()	WITHOUT_CLASSIFICATION	0.999125213654425	WITHOUT_CLASSIFICATION	8.74786345574921E-4	DESIGN
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9995797914128435	WITHOUT_CLASSIFICATION	4.2020858715648683E-4	DESIGN
optimization	WITHOUT_CLASSIFICATION	0.9998966453113988	WITHOUT_CLASSIFICATION	1.0335468860128213E-4	DESIGN
optimization optimization	WITHOUT_CLASSIFICATION	0.9998138879882967	WITHOUT_CLASSIFICATION	1.861120117033621E-4	DESIGN
re-snapshot	WITHOUT_CLASSIFICATION	0.999514050864903	WITHOUT_CLASSIFICATION	4.859491350970499E-4	DESIGN
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9996074528981661	WITHOUT_CLASSIFICATION	3.925471018338824E-4	DESIGN
note this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9755144774384195	WITHOUT_CLASSIFICATION	0.02448552256158052	DESIGN
memory optimization	WITHOUT_CLASSIFICATION	0.9999460445062951	WITHOUT_CLASSIFICATION	5.395549370489674E-5	DESIGN
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9998253198439382	WITHOUT_CLASSIFICATION	1.7468015606171463E-4	DESIGN
copied from session	WITHOUT_CLASSIFICATION	0.9927729286651101	WITHOUT_CLASSIFICATION	0.007227071334889889	DESIGN
this should not happen since the dtd prevents it	WITHOUT_CLASSIFICATION	0.999286122733423	WITHOUT_CLASSIFICATION	7.138772665769863E-4	DESIGN
joinprocessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the sql ast. 'hasfiltercondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9998352332582917	WITHOUT_CLASSIFICATION	1.6476674170826986E-4	DESIGN
the current join represents the join between a many-to-many association table and its "target" table. here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9997455906601617	WITHOUT_CLASSIFICATION	2.544093398383436E-4	DESIGN
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9990498306300769	WITHOUT_CLASSIFICATION	9.501693699232384E-4	DESIGN
values is not null and is checkable we'll look deeper	WITHOUT_CLASSIFICATION	0.999693235874832	WITHOUT_CLASSIFICATION	3.067641251679882E-4	DESIGN
for non null args check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9997163719687573	WITHOUT_CLASSIFICATION	2.83628031242742E-4	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9998088065810954	WITHOUT_CLASSIFICATION	1.911934189046944E-4	DESIGN
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9996849554924774	WITHOUT_CLASSIFICATION	3.150445075227386E-4	DESIGN
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9997196625486042	WITHOUT_CLASSIFICATION	2.80337451395696E-4	DESIGN
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9996122456671745	WITHOUT_CLASSIFICATION	3.877543328255142E-4	DESIGN
do the test	WITHOUT_CLASSIFICATION	0.999986321715245	WITHOUT_CLASSIFICATION	1.3678284754966843E-5	DESIGN
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999776455750227	WITHOUT_CLASSIFICATION	2.2354424977290822E-5	DESIGN
unwrap it	WITHOUT_CLASSIFICATION	0.9998316926534059	WITHOUT_CLASSIFICATION	1.6830734659405435E-4	DESIGN
see if the entity is already bound to this session if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9877942329617302	WITHOUT_CLASSIFICATION	0.012205767038269854	DESIGN
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999272119557185	WITHOUT_CLASSIFICATION	7.278804428153118E-5	DESIGN
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9992288091521404	WITHOUT_CLASSIFICATION	7.711908478595273E-4	DESIGN
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9961837517698959	WITHOUT_CLASSIFICATION	0.003816248230103995	DESIGN
we use the assumed value if there is one to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999896112077955	WITHOUT_CLASSIFICATION	1.0388792204500441E-5	DESIGN
hit the database after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.8890473824284733	WITHOUT_CLASSIFICATION	0.11095261757152684	DESIGN
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context so make some deeper checks	WITHOUT_CLASSIFICATION	0.9986507875408278	WITHOUT_CLASSIFICATION	0.0013492124591721224	DESIGN
int count = 0	WITHOUT_CLASSIFICATION	0.9999946774088676	WITHOUT_CLASSIFICATION	5.322591132339895E-6	DESIGN
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999673500516845	WITHOUT_CLASSIFICATION	3.264994831551027E-5	DESIGN
checkforend = false	WITHOUT_CLASSIFICATION	0.999977389706154	WITHOUT_CLASSIFICATION	2.2610293846048373E-5	DESIGN
count++	WITHOUT_CLASSIFICATION	0.9996695162880856	WITHOUT_CLASSIFICATION	3.304837119143956E-4	DESIGN
end of array start filling again from start	WITHOUT_CLASSIFICATION	0.9999608100269768	WITHOUT_CLASSIFICATION	3.918997302316663E-5	DESIGN
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9992084265223986	WITHOUT_CLASSIFICATION	7.915734776014024E-4	DESIGN
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999565594156145	WITHOUT_CLASSIFICATION	4.344058438559506E-5	DESIGN
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999403637984549	WITHOUT_CLASSIFICATION	5.963620154524628E-5	DESIGN
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9996417467014573	WITHOUT_CLASSIFICATION	3.582532985426838E-4	DESIGN
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999055516678335	WITHOUT_CLASSIFICATION	9.444833216655586E-5	DESIGN
ignore this row of results! note the early exit	WITHOUT_CLASSIFICATION	0.999839490972751	WITHOUT_CLASSIFICATION	1.605090272489623E-4	DESIGN
initialize this collection	WITHOUT_CLASSIFICATION	0.9900986497049454	WITHOUT_CLASSIFICATION	0.009901350295054522	DESIGN
create one	WITHOUT_CLASSIFICATION	0.9996427511500516	WITHOUT_CLASSIFICATION	3.572488499483753E-4	DESIGN
warning can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9990143818612761	WITHOUT_CLASSIFICATION	9.8561813872389E-4	DESIGN
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999027506132963	WITHOUT_CLASSIFICATION	9.724938670378728E-5	DESIGN
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9946376329751871	WITHOUT_CLASSIFICATION	0.005362367024812758	DESIGN
some filters affecting the collection are enabled on the session so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.98608305227619	WITHOUT_CLASSIFICATION	0.013916947723810125	DESIGN
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999726945506559	WITHOUT_CLASSIFICATION	2.730544934409727E-4	DESIGN
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999186088622266	WITHOUT_CLASSIFICATION	8.139113777343077E-5	DESIGN
collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993618141158875	WITHOUT_CLASSIFICATION	6.381858841124763E-4	DESIGN
simple cache of param metadata based on query string. ideally the original "user-supplied query" string should be used to retreive this metadata (i.e. not the para-list-expanded query string) to avoid unnecessary cache entries. used solely for caching param metadata for native-sql queries see getsqlparametermetadata() for a discussion as to why	WITHOUT_CLASSIFICATION	0.7554128152810327	WITHOUT_CLASSIFICATION	0.24458718471896743	DESIGN
the cache of the actual plans	WITHOUT_CLASSIFICATION	0.9998227660747379	WITHOUT_CLASSIFICATION	1.7723392526220174E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.998999143842101	WITHOUT_CLASSIFICATION	0.0010008561578989529	DESIGN
package	WITHOUT_CLASSIFICATION	0.998999143842101	WITHOUT_CLASSIFICATION	0.0010008561578989529	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999917576056783	WITHOUT_CLASSIFICATION	8.242394321724338E-6	DESIGN
for native-sql queries the param metadata is determined outside any relation to a query plan because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9830729976307565	WITHOUT_CLASSIFICATION	0.016927002369243462	DESIGN
don't care	WITHOUT_CLASSIFICATION	0.9989471368080671	WITHOUT_CLASSIFICATION	0.0010528631919328442	DESIGN
recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998786831317532	WITHOUT_CLASSIFICATION	0.0012131686824680189	DESIGN
don't care	WITHOUT_CLASSIFICATION	0.9989471368080671	WITHOUT_CLASSIFICATION	0.0010528631919328442	DESIGN
note firstrow is zero-based	WITHOUT_CLASSIFICATION	0.9965201097626843	WITHOUT_CLASSIFICATION	0.003479890237315763	DESIGN
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9974374069474713	WITHOUT_CLASSIFICATION	0.0025625930525286335	DESIGN
named parameter	WITHOUT_CLASSIFICATION	0.9990749304125299	WITHOUT_CLASSIFICATION	9.250695874700652E-4	DESIGN
could be either an ordinal or jpa-positional parameter	WITHOUT_CLASSIFICATION	0.9925067069827452	WITHOUT_CLASSIFICATION	0.00749329301725478	DESIGN
a peek ahead showed this as an jpa-positional parameter	WITHOUT_CLASSIFICATION	0.9977286561322462	WITHOUT_CLASSIFICATION	0.0022713438677537602	DESIGN
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9989611070340695	WITHOUT_CLASSIFICATION	0.0010388929659305537	DESIGN
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.999796206505349	WITHOUT_CLASSIFICATION	2.037934946511203E-4	DESIGN
perform the actual work	WITHOUT_CLASSIFICATION	0.99922707856451	WITHOUT_CLASSIFICATION	7.729214354899415E-4	DESIGN
if everything went ok commit the transaction and close the obtained connection handle	WITHOUT_CLASSIFICATION	0.9999997131450089	WITHOUT_CLASSIFICATION	2.8685499110429634E-7	DESIGN
at some point the processing went bad so we need to 1) make sure the connection handle gets released 2) try to cleanup the jta context as much as possible	WITHOUT_CLASSIFICATION	0.9997015933878017	WITHOUT_CLASSIFICATION	2.9840661219828775E-4	DESIGN
finally handle the exception	WITHOUT_CLASSIFICATION	0.9991507507731617	WITHOUT_CLASSIFICATION	8.492492268381452E-4	DESIGN
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.991055944390691	WITHOUT_CLASSIFICATION	0.008944055609309016	DESIGN
saveorupdatecopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9995967522651459	WITHOUT_CLASSIFICATION	4.0324773485415357E-4	DESIGN
collectionpersister should not be null but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.949898086486588	WITHOUT_CLASSIFICATION	0.05010191351341196	DESIGN
otherwise a null or brand new collection this will also (inefficiently) handle arrays which have no snapshot so we can't do any better processarrayornewcollection(collection type)	WITHOUT_CLASSIFICATION	0.9970310780823947	WITHOUT_CLASSIFICATION	0.002968921917605324	DESIGN
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9967423754465469	WITHOUT_CLASSIFICATION	0.0032576245534531797	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9997983876276735	WITHOUT_CLASSIFICATION	2.016123723264378E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9997983876276735	WITHOUT_CLASSIFICATION	2.016123723264378E-4	DESIGN
force a substitution!	WITHOUT_CLASSIFICATION	0.9988425518650397	WITHOUT_CLASSIFICATION	0.0011574481349603003	DESIGN
the user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9968852638971115	WITHOUT_CLASSIFICATION	0.003114736102888528	DESIGN
the database now holds a lock + the object is flushed from the cache so release the soft lock	WITHOUT_CLASSIFICATION	0.9999089917917366	WITHOUT_CLASSIFICATION	9.100820826335848E-5	DESIGN
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999905204157868	WITHOUT_CLASSIFICATION	9.479584213248074E-6	DESIGN
search for collections by reachability updating their role. we don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9989239592888174	WITHOUT_CLASSIFICATION	0.0010760407111826845	DESIGN
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9993652755255177	WITHOUT_CLASSIFICATION	6.34724474482254E-4	DESIGN
note we need to do the wrap here even if its not "dirty" because collections need wrapping but changes to _them_ don't dirty the container. also for versioned data we need to wrap before calling searchfordirtycollections	WITHOUT_CLASSIFICATION	0.9991234828182525	WITHOUT_CLASSIFICATION	8.765171817475298E-4	DESIGN
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9996329467030436	WITHOUT_CLASSIFICATION	3.670532969564494E-4	DESIGN
grab its current state	WITHOUT_CLASSIFICATION	0.9999296288609428	WITHOUT_CLASSIFICATION	7.03711390571893E-5	DESIGN
schedule the update note that we intentionally do _not_ pass in currentpersistentstate!	WITHOUT_CLASSIFICATION	0.9998539134747466	WITHOUT_CLASSIFICATION	1.4608652525334497E-4	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9997865304942739	WITHOUT_CLASSIFICATION	2.1346950572607147E-4	DESIGN
give the interceptor a chance to process property values if the properties were modified by the interceptor we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999990645644192	WITHOUT_CLASSIFICATION	9.354355807456499E-7	DESIGN
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999692117713435	WITHOUT_CLASSIFICATION	3.078822865656787E-5	DESIGN
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.999930232864675	WITHOUT_CLASSIFICATION	6.976713532496219E-5	DESIGN
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.999904022865853	WITHOUT_CLASSIFICATION	9.597713414697056E-5	DESIGN
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9936798004440802	WITHOUT_CLASSIFICATION	0.006320199555919783	DESIGN
give the interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9998688108400184	WITHOUT_CLASSIFICATION	1.3118915998146206E-4	DESIGN
now we might need to recalculate the dirtyproperties array	WITHOUT_CLASSIFICATION	0.9968923247073666	WITHOUT_CLASSIFICATION	0.0031076752926334343	DESIGN
use the current version	WITHOUT_CLASSIFICATION	0.9975995983796847	WITHOUT_CLASSIFICATION	0.0024004016203152353	DESIGN
interceptor returned null so do the dirtycheck ourself if possible	WITHOUT_CLASSIFICATION	0.9999423665005015	WITHOUT_CLASSIFICATION	5.763349949854967E-5	DESIGN
object loaded by update()	WITHOUT_CLASSIFICATION	0.999823248540891	WITHOUT_CLASSIFICATION	1.7675145910888123E-4	DESIGN
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999673174322347	WITHOUT_CLASSIFICATION	3.2682567765310755E-5	DESIGN
dirty check against the database snapshot if possible/necessary	WITHOUT_CLASSIFICATION	0.9999978697648295	WITHOUT_CLASSIFICATION	2.1302351705028575E-6	DESIGN
the interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.8077789186037585	WITHOUT_CLASSIFICATION	0.1922210813962415	DESIGN
even process null collections	WITHOUT_CLASSIFICATION	0.9997246428797049	WITHOUT_CLASSIFICATION	2.753571202951301E-4	DESIGN
get the id from the object	WITHOUT_CLASSIFICATION	0.9990402481711447	WITHOUT_CLASSIFICATION	9.597518288552606E-4	DESIGN
always do an insert and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9997940112435931	WITHOUT_CLASSIFICATION	2.059887564068091E-4	DESIGN
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9949106174405904	WITHOUT_CLASSIFICATION	0.005089382559409652	DESIGN
/ hhh-2378	WITHOUT_CLASSIFICATION	0.9999015662196771	WITHOUT_CLASSIFICATION	9.843378032287948E-5	DESIGN
will result in a sql update	WITHOUT_CLASSIFICATION	0.9999420486183203	WITHOUT_CLASSIFICATION	5.7951381679697425E-5	DESIGN
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9998405355009463	WITHOUT_CLASSIFICATION	1.5946449905380466E-4	DESIGN
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9998177785853699	WITHOUT_CLASSIFICATION	1.8222141463010872E-4	DESIGN
refresh() does not pass an entityname	WITHOUT_CLASSIFICATION	0.9998636990787771	WITHOUT_CLASSIFICATION	1.3630092122281389E-4	DESIGN
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9983011859090434	WITHOUT_CLASSIFICATION	0.0016988140909566887	DESIGN
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9980715580754371	WITHOUT_CLASSIFICATION	0.0019284419245628134	DESIGN
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9993752903284999	WITHOUT_CLASSIFICATION	6.247096715000085E-4	DESIGN
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9998432682718482	WITHOUT_CLASSIFICATION	1.5673172815190473E-4	DESIGN
this object was already loaded	WITHOUT_CLASSIFICATION	0.9948340722023663	WITHOUT_CLASSIFICATION	0.0051659277976336525	DESIGN
entity was found in second-level cache	WITHOUT_CLASSIFICATION	0.999454908487079	WITHOUT_CLASSIFICATION	5.450915129210882E-4	DESIGN
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9994974926222285	WITHOUT_CLASSIFICATION	5.025073777714621E-4	DESIGN
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999782725284224	WITHOUT_CLASSIFICATION	2.1727471577511806E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999408312644811	WITHOUT_CLASSIFICATION	5.916873551889864E-4	DESIGN
some statistics	WITHOUT_CLASSIFICATION	0.9991808637877972	WITHOUT_CLASSIFICATION	8.191362122027908E-4	DESIGN
safe from concurrent modification because of how entrylist() is implemented on identitymap	WITHOUT_CLASSIFICATION	0.9996321501405413	WITHOUT_CLASSIFICATION	3.6784985945861724E-4	DESIGN
initialize dirty flags for arrays + collections with composite elements and reset reached doupdate etc.	WITHOUT_CLASSIFICATION	0.9999834472017007	WITHOUT_CLASSIFICATION	1.6552798299244207E-5	DESIGN
among other things updatereachables() will recursively load all collections that are moving roles. this might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9905125541881925	WITHOUT_CLASSIFICATION	0.00948744581180749	DESIGN
so this needs to be safe from concurrent modification problems. it is safe because of how identitymap implements entryset()	WITHOUT_CLASSIFICATION	0.9866294256738853	WITHOUT_CLASSIFICATION	0.013370574326114784	DESIGN
update the status of the object and if necessary schedule an update	WITHOUT_CLASSIFICATION	0.999707187963689	WITHOUT_CLASSIFICATION	2.928120363110058E-4	DESIGN
schedule updates to collections	WITHOUT_CLASSIFICATION	0.9997616706389095	WITHOUT_CLASSIFICATION	2.383293610903691E-4	DESIGN
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9963410887049039	WITHOUT_CLASSIFICATION	0.0036589112950961514	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999408312644811	WITHOUT_CLASSIFICATION	5.916873551889864E-4	DESIGN
the database has changed now so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.999940799148727	WITHOUT_CLASSIFICATION	5.9200851272981125E-5	DESIGN
if the collection is dereferenced remove from the session cache iter.remove() does not work since the entryset is not backed by the set	WITHOUT_CLASSIFICATION	0.9994816208657211	WITHOUT_CLASSIFICATION	5.183791342789675E-4	DESIGN
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9998553048887134	WITHOUT_CLASSIFICATION	1.4469511128659487E-4	DESIGN
get a snapshot	WITHOUT_CLASSIFICATION	0.9991585214775818	WITHOUT_CLASSIFICATION	8.414785224183394E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9995889988830555	WITHOUT_CLASSIFICATION	4.1100111694450814E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9995889988830555	WITHOUT_CLASSIFICATION	4.1100111694450814E-4	DESIGN
key is an entity involved with the operation performed by the listener value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999991527148206	WITHOUT_CLASSIFICATION	8.472851792640091E-7	DESIGN
early exit!!!	WITHOUT_CLASSIFICATION	0.9996930279128784	WITHOUT_CLASSIFICATION	3.069720871215428E-4	DESIGN
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9992426815210907	WITHOUT_CLASSIFICATION	7.573184789091443E-4	DESIGN
before any callbacks etc so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9997247525373599	WITHOUT_CLASSIFICATION	2.752474626400454E-4	DESIGN
ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999541435872139	WITHOUT_CLASSIFICATION	4.585641278612576E-5	DESIGN
typefactory.deepcopy( currentstate proptypes persister.getpropertyupdateability() deletedstate session )	WITHOUT_CLASSIFICATION	0.9994282748283948	WITHOUT_CLASSIFICATION	5.717251716051705E-4	DESIGN
cascade-delete to collections before the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999862151784198	WITHOUT_CLASSIFICATION	1.3784821580092682E-5	DESIGN
cascade-delete to many-to-one after the parent was deleted	WITHOUT_CLASSIFICATION	0.9997133162050207	WITHOUT_CLASSIFICATION	2.8668379497931413E-4	DESIGN
if it is an initialized proxy let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9939200980723095	WITHOUT_CLASSIFICATION	0.006079901927690528	DESIGN
assign the requested id to the proxy before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999827438799888	WITHOUT_CLASSIFICATION	1.7256120011172114E-5	DESIGN
an uninitialized proxy noop don't even need to return an id since it is never a save()	WITHOUT_CLASSIFICATION	0.9999440506187689	WITHOUT_CLASSIFICATION	5.594938123116527E-5	DESIGN
initialize properties of the event	WITHOUT_CLASSIFICATION	0.9998715104625451	WITHOUT_CLASSIFICATION	1.2848953745495063E-4	DESIGN
return the id in the event object	WITHOUT_CLASSIFICATION	0.9994461850916851	WITHOUT_CLASSIFICATION	5.538149083149524E-4	DESIGN
transient or deleted	WITHOUT_CLASSIFICATION	0.9996894732461409	WITHOUT_CLASSIFICATION	3.1052675385907205E-4	DESIGN
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9992492425133515	WITHOUT_CLASSIFICATION	7.50757486648547E-4	DESIGN
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.6183857512822362	DESIGN	0.3816142487177637	WITHOUT_CLASSIFICATION
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9926837444545312	WITHOUT_CLASSIFICATION	0.007316255545468683	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9989709482766411	WITHOUT_CLASSIFICATION	0.0010290517233588008	DESIGN
cachedstate	WITHOUT_CLASSIFICATION	0.999514050864903	WITHOUT_CLASSIFICATION	4.859491350970499E-4	DESIGN
assume true since we don't really know and it doesn't matter	WITHOUT_CLASSIFICATION	0.999407732530017	WITHOUT_CLASSIFICATION	5.922674699831068E-4	DESIGN
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9977860864000299	WITHOUT_CLASSIFICATION	0.002213913599970171	DESIGN
if the collection belonged to a different entity clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9950596248240954	WITHOUT_CLASSIFICATION	0.004940375175904576	DESIGN
log.debug( "calling onload()" )	WITHOUT_CLASSIFICATION	0.9993316262540104	WITHOUT_CLASSIFICATION	6.68373745989595E-4	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9996956049222961	WITHOUT_CLASSIFICATION	3.0439507770384857E-4	DESIGN
note performexecutions() clears all collectionxxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9987016634149878	WITHOUT_CLASSIFICATION	0.001298336585012287	DESIGN
if no array holder we found an unwrappered array (this can't occur because we now always call wrap() before getting to here) return (ah==null) ? true searchfordirtycollections(ah type)	WITHOUT_CLASSIFICATION	0.9999981432644923	WITHOUT_CLASSIFICATION	1.8567355076089918E-6	DESIGN
if not wrappered yet its dirty (this can't occur because we now always call wrap() before getting to here) return ( ! (obj instanceof persistentcollection) ) ? true searchfordirtycollections( (persistentcollection) obj type )	WITHOUT_CLASSIFICATION	0.9999272135531655	WITHOUT_CLASSIFICATION	7.278644683452277E-5	DESIGN
we need to check even if it was not initialized because of delayed adds!	WITHOUT_CLASSIFICATION	0.9958815110787458	WITHOUT_CLASSIFICATION	0.0041184889212542465	DESIGN
note early exit!	WITHOUT_CLASSIFICATION	0.9986040447679797	WITHOUT_CLASSIFICATION	0.001395955232020372	DESIGN
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9989200451212754	WITHOUT_CLASSIFICATION	0.0010799548787246021	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9996956049222961	WITHOUT_CLASSIFICATION	3.0439507770384857E-4	DESIGN
check the persistence context for an entry relating to this entity to be merged	WITHOUT_CLASSIFICATION	0.9675227387455662	WITHOUT_CLASSIFICATION	0.03247726125443382	DESIGN
we have specialized case of a detached entity from the perspective of the merge operation. specifically we have an incoming entity instance which has a corresponding entry in the current persistence context but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999182360505842	WITHOUT_CLASSIFICATION	8.176394941590429E-5	DESIGN
deleted	WITHOUT_CLASSIFICATION	0.9998584929241351	WITHOUT_CLASSIFICATION	1.4150707586490239E-4	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9997403616146121	WITHOUT_CLASSIFICATION	2.596383853879627E-4	DESIGN
cascade first so that all unsaved objects get their copy created before we actually copy cascadeonmerge(event persister entity copycache cascades.cascade_before_merge)	WITHOUT_CLASSIFICATION	0.9999424567014745	WITHOUT_CLASSIFICATION	5.754329852544502E-5	DESIGN
this bit is only really absolutely necessary for handling requestedid but is also good if we merge multiple object graphs since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9553189148759255	WITHOUT_CLASSIFICATION	0.0446810851240745	DESIGN
continue we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9961127114720255	WITHOUT_CLASSIFICATION	0.0038872885279745005	DESIGN
cascade first so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.999992252368756	WITHOUT_CLASSIFICATION	7.7476312440234E-6	DESIGN
check that entity id = requestedid	WITHOUT_CLASSIFICATION	0.999518777510287	WITHOUT_CLASSIFICATION	4.812224897130485E-4	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9997403616146121	WITHOUT_CLASSIFICATION	2.596383853879627E-4	DESIGN
we got here because we assumed that an instance with an assigned id was detached when it was really persistent	WITHOUT_CLASSIFICATION	0.9999349890636928	WITHOUT_CLASSIFICATION	6.501093630725092E-5	DESIGN
cascade first so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.999992252368756	WITHOUT_CLASSIFICATION	7.7476312440234E-6	DESIGN
copyvalues works by reflection so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.999934817069502	WITHOUT_CLASSIFICATION	6.518293049800334E-5	DESIGN
early exit	WITHOUT_CLASSIFICATION	0.9998868495165929	WITHOUT_CLASSIFICATION	1.1315048340700427E-4	DESIGN
source.getbatcher().executebatch() found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9994690878248496	WITHOUT_CLASSIFICATION	5.309121751504089E-4	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9997865304942739	WITHOUT_CLASSIFICATION	2.1346950572607147E-4	DESIGN
now done in entityidentityinsertaction persister.setidentifier( entity id source.getentitymode() )	WITHOUT_CLASSIFICATION	0.9974722470261016	WITHOUT_CLASSIFICATION	0.0025277529738983845	DESIGN
source.getpersistencecontext().removenonexist( new entitykey( id persister source.getentitymode() ) )	WITHOUT_CLASSIFICATION	0.9957218806138239	WITHOUT_CLASSIFICATION	0.004278119386176058	DESIGN
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9990272342108799	WITHOUT_CLASSIFICATION	9.727657891200979E-4	DESIGN
cascade-save to many-to-one before the parent is saved	WITHOUT_CLASSIFICATION	0.9982178345546944	WITHOUT_CLASSIFICATION	0.0017821654453056609	DESIGN
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999991527488896	WITHOUT_CLASSIFICATION	8.472511103946029E-7	DESIGN
the object is persistent	WITHOUT_CLASSIFICATION	0.9996749664863848	WITHOUT_CLASSIFICATION	3.250335136152304E-4	DESIGN
the entity is associated with the session so check its status	WITHOUT_CLASSIFICATION	0.9998817734463504	WITHOUT_CLASSIFICATION	1.1822655364960921E-4	DESIGN
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9998783906123264	WITHOUT_CLASSIFICATION	1.2160938767357444E-4	DESIGN
ie. e.status==deleted	WITHOUT_CLASSIFICATION	0.999125213654425	WITHOUT_CLASSIFICATION	8.74786345574921E-4	DESIGN
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9997592441525495	WITHOUT_CLASSIFICATION	2.407558474505985E-4	DESIGN
note early exit!	WITHOUT_CLASSIFICATION	0.9986040447679797	WITHOUT_CLASSIFICATION	0.001395955232020372	DESIGN
private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9861554568571091	WITHOUT_CLASSIFICATION	0.013844543142890953	DESIGN
first try to find a matching constructor accepting a violatedconstraintnameextracter param	WITHOUT_CLASSIFICATION	0.9990944115318663	WITHOUT_CLASSIFICATION	9.055884681337586E-4	DESIGN
eat it and try next	WITHOUT_CLASSIFICATION	0.9874096217860064	WITHOUT_CLASSIFICATION	0.012590378213993558	DESIGN
otherwise try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9988542719547711	WITHOUT_CLASSIFICATION	0.0011457280452288581	DESIGN
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9994916905904669	WITHOUT_CLASSIFICATION	5.083094095330756E-4	DESIGN
collectionpropertymapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9932930317315519	WITHOUT_CLASSIFICATION	0.006706968268448091	DESIGN
remove initial " "	WITHOUT_CLASSIFICATION	0.9981707781056898	WITHOUT_CLASSIFICATION	0.0018292218943102428	DESIGN
remove initial " and "	WITHOUT_CLASSIFICATION	0.9962262360665779	WITHOUT_CLASSIFICATION	0.0037737639334220908	DESIGN
beforeclasstokens.add("new") definitely don't have this!!	WITHOUT_CLASSIFICATION	0.9996964768324982	WITHOUT_CLASSIFICATION	3.035231675017808E-4	DESIGN
notafterclasstokens.add("")	WITHOUT_CLASSIFICATION	0.999125213654425	WITHOUT_CLASSIFICATION	8.74786345574921E-4	DESIGN
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9996340658203028	WITHOUT_CLASSIFICATION	3.6593417969710957E-4	DESIGN
update last non-whitespace token if necessary	WITHOUT_CLASSIFICATION	0.999822361398851	WITHOUT_CLASSIFICATION	1.77638601149032E-4	DESIGN
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9989484340982601	WITHOUT_CLASSIFICATION	0.0010515659017399858	DESIGN
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.999246853839167	WITHOUT_CLASSIFICATION	7.531461608328599E-4	DESIGN
note this!!	WITHOUT_CLASSIFICATION	0.997801065410742	WITHOUT_CLASSIFICATION	0.0021989345892581215	DESIGN
error message constants.	WITHOUT_CLASSIFICATION	0.9963390689237596	WITHOUT_CLASSIFICATION	0.003660931076240348	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996512262135293	WITHOUT_CLASSIFICATION	3.487737864707205E-4	DESIGN
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995584564573465	WITHOUT_CLASSIFICATION	4.4154354265337284E-4	DESIGN
handle collection-fiter compilation. important note this is modifying the input (hql) tree not the output tree!	WITHOUT_CLASSIFICATION	0.8300258434400315	WITHOUT_CLASSIFICATION	0.1699741565599685	DESIGN
show the modified ast.	WITHOUT_CLASSIFICATION	0.9999839309211283	WITHOUT_CLASSIFICATION	1.6069078871735523E-5	DESIGN
create a parameter specification for the collection filter	WITHOUT_CLASSIFICATION	0.9988545463615545	WITHOUT_CLASSIFICATION	0.001145453638445603	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.999069064349679	WITHOUT_CLASSIFICATION	9.30935650320982E-4	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.999069064349679	WITHOUT_CLASSIFICATION	9.30935650320982E-4	DESIGN
get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9986912528827518	WITHOUT_CLASSIFICATION	0.0013087471172481388	DESIGN
the path ast should be a dotnode and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9940291756371364	WITHOUT_CLASSIFICATION	0.005970824362863577	DESIGN
tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999663313067069	WITHOUT_CLASSIFICATION	3.3668693293030736E-5	DESIGN
re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999910470013712	WITHOUT_CLASSIFICATION	8.952998628876127E-6	DESIGN
don't forget to resolve the argument! resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9997071811183977	WITHOUT_CLASSIFICATION	2.9281888160227163E-4	DESIGN
resolve everything up to this dot but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9962384045385317	WITHOUT_CLASSIFICATION	0.003761595461468201	DESIGN
should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9946351837374635	WITHOUT_CLASSIFICATION	0.005364816262536479	DESIGN
was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999650249018643	WITHOUT_CLASSIFICATION	3.497509813557219E-5	DESIGN
attach any mapping-defined "order by" fragments	WITHOUT_CLASSIFICATION	0.9993593162840777	WITHOUT_CLASSIFICATION	6.406837159223709E-4	DESIGN
use the explicitly declared select expression determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999475195786852	WITHOUT_CLASSIFICATION	5.2480421314879135E-5	DESIGN
after that process the joins. invoke a delegate to do the work as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999731196780662	WITHOUT_CLASSIFICATION	2.6880321933732402E-5	DESIGN
make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999924067085703	WITHOUT_CLASSIFICATION	7.593291429670352E-6	DESIGN
we need to generate ids as part of this bulk insert. note that this is only supported for sequence-style generators and post-insert-style generators basically only in-db generators	WITHOUT_CLASSIFICATION	0.8941334328075031	WITHOUT_CLASSIFICATION	0.10586656719249689	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.999069064349679	WITHOUT_CLASSIFICATION	9.30935650320982E-4	DESIGN
we need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9987361149007022	WITHOUT_CLASSIFICATION	0.0012638850992977074	DESIGN
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9970701630001454	WITHOUT_CLASSIFICATION	0.002929836999854678	DESIGN
this is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.792913856672312	WITHOUT_CLASSIFICATION	0.20708614332768802	DESIGN
generate implicit joins only if necessary.	WITHOUT_CLASSIFICATION	0.9979113784128117	WITHOUT_CLASSIFICATION	0.002088621587188241	DESIGN
notify the from element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9998962500552988	WITHOUT_CLASSIFICATION	1.0374994470114291E-4	DESIGN
turn off includesubclasses on all fromelements.	WITHOUT_CLASSIFICATION	0.9978977816996267	WITHOUT_CLASSIFICATION	0.002102218300373328	DESIGN
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9997574752689181	WITHOUT_CLASSIFICATION	2.425247310820027E-4	DESIGN
use the delegate resolve identifiers as from element aliases.	WITHOUT_CLASSIFICATION	0.9985743420202005	WITHOUT_CLASSIFICATION	0.0014256579797995155	DESIGN
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9994743653916826	WITHOUT_CLASSIFICATION	5.256346083174793E-4	DESIGN
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9973354320967138	WITHOUT_CLASSIFICATION	0.0026645679032861786	DESIGN
make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9986290059224456	WITHOUT_CLASSIFICATION	0.0013709940775544116	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996512262135293	WITHOUT_CLASSIFICATION	3.487737864707205E-4	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.999069064349679	WITHOUT_CLASSIFICATION	9.30935650320982E-4	DESIGN
--commented out by inspection (12/11/04 1056 am) int getwarningcount()	WITHOUT_CLASSIFICATION	0.9999352808022733	WITHOUT_CLASSIFICATION	6.471919772663513E-5	DESIGN
alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.999152953750001	WITHOUT_CLASSIFICATION	8.470462499989677E-4	DESIGN
switch	WITHOUT_CLASSIFICATION	0.9997987057523946	WITHOUT_CLASSIFICATION	2.012942476053685E-4	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9978136877633558	WITHOUT_CLASSIFICATION	0.0021863122366443	DESIGN
just do the regular thing if you can't find the ctor your ast must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999029212935431	WITHOUT_CLASSIFICATION	9.707870645693128E-5	DESIGN
initialize sql nodes here.	WITHOUT_CLASSIFICATION	0.9994084033779698	WITHOUT_CLASSIFICATION	5.915966220303143E-4	DESIGN
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998368456931308	WITHOUT_CLASSIFICATION	1.6315430686924924E-4	DESIGN
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999938447750217	WITHOUT_CLASSIFICATION	6.155224978304857E-6	DESIGN
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999824453692205	WITHOUT_CLASSIFICATION	1.755463077951903E-5	DESIGN
--- inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9990563608202567	WITHOUT_CLASSIFICATION	9.436391797432769E-4	DESIGN
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9993177794223989	WITHOUT_CLASSIFICATION	6.822205776011837E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9999015662196771	WITHOUT_CLASSIFICATION	9.843378032287948E-5	DESIGN
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9990740604358811	WITHOUT_CLASSIFICATION	9.25939564118935E-4	DESIGN
again both should be fromelements	WITHOUT_CLASSIFICATION	0.9906477455229615	WITHOUT_CLASSIFICATION	0.009352254477038363	DESIGN
note firstrow is zero-based	WITHOUT_CLASSIFICATION	0.9965201097626843	WITHOUT_CLASSIFICATION	0.003479890237315763	DESIGN
right represents a joins originating from left or both right and left reprersent joins originating from the same fromelement	WITHOUT_CLASSIFICATION	0.9998802282638224	WITHOUT_CLASSIFICATION	1.1977173617770578E-4	DESIGN
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9936078249764368	WITHOUT_CLASSIFICATION	0.00639217502356319	DESIGN
right represents a joins originating from left	WITHOUT_CLASSIFICATION	0.9998535023286711	WITHOUT_CLASSIFICATION	1.4649767132882312E-4	DESIGN
all clear	WITHOUT_CLASSIFICATION	0.9998836464236904	WITHOUT_CLASSIFICATION	1.1635357630957286E-4	DESIGN
ignore the token class name parameter and use a specific token class.	WITHOUT_CLASSIFICATION	0.9966934065889692	WITHOUT_CLASSIFICATION	0.0033065934110307208	DESIGN
overriden to avoid system.exit	WITHOUT_CLASSIFICATION	0.9991572420390916	WITHOUT_CLASSIFICATION	8.42757960908449E-4	DESIGN
overriden to avoid system.exit	WITHOUT_CLASSIFICATION	0.9991572420390916	WITHOUT_CLASSIFICATION	8.42757960908449E-4	DESIGN
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9962054051867928	WITHOUT_CLASSIFICATION	0.0037945948132070994	DESIGN
don't care about other param types here just those explicitly user-defined	WITHOUT_CLASSIFICATION	0.99223279905318	WITHOUT_CLASSIFICATION	0.007767200946820137	DESIGN
if the query is already compiled skip the compilation.	WITHOUT_CLASSIFICATION	0.9999605317203069	WITHOUT_CLASSIFICATION	3.9468279693183526E-5	DESIGN
remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9993088849418614	WITHOUT_CLASSIFICATION	6.91115058138569E-4	DESIGN
phase 1 parse the hql into an ast.	WITHOUT_CLASSIFICATION	0.9988451956477962	WITHOUT_CLASSIFICATION	0.0011548043522038533	DESIGN
phase 2 analyze the hql ast and produce an sql ast.	WITHOUT_CLASSIFICATION	0.9999987890394834	WITHOUT_CLASSIFICATION	1.210960516552408E-6	DESIGN
phase 3 generate the sql.	WITHOUT_CLASSIFICATION	0.998818028146746	WITHOUT_CLASSIFICATION	0.001181971853253959	DESIGN
we do not actually propogate antlrexceptions as a cause so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.999853262879274	WITHOUT_CLASSIFICATION	1.467371207260052E-4	DESIGN
we do not actually propogate antlrexceptions as a cause so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.999853262879274	WITHOUT_CLASSIFICATION	1.467371207260052E-4	DESIGN
only needed during compilation phase	WITHOUT_CLASSIFICATION	0.9999292773146309	WITHOUT_CLASSIFICATION	7.072268536909553E-5	DESIGN
transform the tree.	WITHOUT_CLASSIFICATION	0.9997205899042712	WITHOUT_CLASSIFICATION	2.7941009572884907E-4	DESIGN
parse the query string into an hql ast.	WITHOUT_CLASSIFICATION	0.9996221848599918	WITHOUT_CLASSIFICATION	3.7781514000822397E-4	DESIGN
delegate to the queryloader	WITHOUT_CLASSIFICATION	0.9998198513344645	WITHOUT_CLASSIFICATION	1.801486655354315E-4	DESIGN
delegate to the queryloader	WITHOUT_CLASSIFICATION	0.9998198513344645	WITHOUT_CLASSIFICATION	1.801486655354315E-4	DESIGN
delegate to the queryloader	WITHOUT_CLASSIFICATION	0.9998198513344645	WITHOUT_CLASSIFICATION	1.801486655354315E-4	DESIGN
note ( max - 1 ) because first is zero-based while max is not	WITHOUT_CLASSIFICATION	0.9997426562153691	WITHOUT_CLASSIFICATION	2.5734378463090657E-4	DESIGN
-- package local methods for the queryloader delegate --	WITHOUT_CLASSIFICATION	0.9932624125061897	WITHOUT_CLASSIFICATION	0.006737587493810181	DESIGN
if there are no collection fetches then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999806963089367	WITHOUT_CLASSIFICATION	1.930369106326859E-5	DESIGN
a shallow query is ok (although technically there should be no fetching here)	WITHOUT_CLASSIFICATION	0.9999502134496864	WITHOUT_CLASSIFICATION	4.9786550313609475E-5	DESIGN
should be the first but just to be safe	WITHOUT_CLASSIFICATION	0.9993335193536568	WITHOUT_CLASSIFICATION	6.664806463432089E-4	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.999069064349679	WITHOUT_CLASSIFICATION	9.30935650320982E-4	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.999069064349679	WITHOUT_CLASSIFICATION	9.30935650320982E-4	DESIGN
impl note allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9990605992358585	WITHOUT_CLASSIFICATION	9.394007641415048E-4	DESIGN
otherwise we have a non-scalar select with defined collection fetch(es). make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9997052062799511	WITHOUT_CLASSIFICATION	2.9479372004886554E-4	DESIGN
this is not strictly true. we actually just need to make sure that it is ordered by root-entity pk and that that order-by comes before any non-root-entity ordering	WITHOUT_CLASSIFICATION	0.5854456031457062	WITHOUT_CLASSIFICATION	0.4145543968542939	DESIGN
paramtranslations = new parametertranslationsimpl( collectedparameterspecifications )	WITHOUT_CLASSIFICATION	0.999868179660226	WITHOUT_CLASSIFICATION	1.318203397738758E-4	DESIGN
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9951161592806539	WITHOUT_CLASSIFICATION	0.004883840719346068	DESIGN
igndore it	WITHOUT_CLASSIFICATION	0.999607474980494	WITHOUT_CLASSIFICATION	3.925250195059455E-4	DESIGN
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9715275194703629	WITHOUT_CLASSIFICATION	0.028472480529637138	DESIGN
[jsd] the fix for hhh-558	WITHOUT_CLASSIFICATION	0.9684916275792153	WITHOUT_CLASSIFICATION	0.03150837242078475	DESIGN
if the token can tell us if it could be an identifier	WITHOUT_CLASSIFICATION	0.9884688929929056	WITHOUT_CLASSIFICATION	0.011531107007094395	DESIGN
and the expected token type was an identifier then	WITHOUT_CLASSIFICATION	0.99991858418822	WITHOUT_CLASSIFICATION	8.141581178002083E-5	DESIGN
use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999665199683114	WITHOUT_CLASSIFICATION	3.3480031688573665E-5	DESIGN
add the token to the ast.	WITHOUT_CLASSIFICATION	0.9998621076528239	WITHOUT_CLASSIFICATION	1.378923471760847E-4	DESIGN
(not (eq a b) ) => (ne a b)	WITHOUT_CLASSIFICATION	0.9201073404030817	WITHOUT_CLASSIFICATION	0.07989265959691826	DESIGN
(not (ne a b) ) => (eq a b)	WITHOUT_CLASSIFICATION	0.9201073404030817	WITHOUT_CLASSIFICATION	0.07989265959691826	DESIGN
(not (lt a b) ) => (ge a b)	WITHOUT_CLASSIFICATION	0.9201073404030817	WITHOUT_CLASSIFICATION	0.07989265959691826	DESIGN
(not (ge a b) ) => (lt a b)	WITHOUT_CLASSIFICATION	0.9201073404030817	WITHOUT_CLASSIFICATION	0.07989265959691826	DESIGN
(not (le a b) ) => (gt a b)	WITHOUT_CLASSIFICATION	0.9201073404030817	WITHOUT_CLASSIFICATION	0.07989265959691826	DESIGN
(not (like a b) ) => (not_like a b)	WITHOUT_CLASSIFICATION	0.9401598006434192	WITHOUT_CLASSIFICATION	0.059840199356580887	DESIGN
(not (not_like a b) ) => (like a b)	WITHOUT_CLASSIFICATION	0.9401598006434192	WITHOUT_CLASSIFICATION	0.059840199356580887	DESIGN
(not (is_not_null a b) ) => (is_null a b)	WITHOUT_CLASSIFICATION	0.9571438425824627	WITHOUT_CLASSIFICATION	0.04285615741753736	DESIGN
(not (between a b) ) => (not_between a b)	WITHOUT_CLASSIFICATION	0.9571438425824627	WITHOUT_CLASSIFICATION	0.04285615741753736	DESIGN
initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9968407847628047	WITHOUT_CLASSIFICATION	0.0031592152371952907	DESIGN
overriden to avoid system.exit	WITHOUT_CLASSIFICATION	0.9991572420390916	WITHOUT_CLASSIFICATION	8.42757960908449E-4	DESIGN
if if otherwise handle the error normally.	WITHOUT_CLASSIFICATION	0.9993677606745676	WITHOUT_CLASSIFICATION	6.322393254324292E-4	DESIGN
(not (not_between a b) ) => (between a b)	WITHOUT_CLASSIFICATION	0.9571438425824627	WITHOUT_CLASSIFICATION	0.04285615741753736	DESIGN
this can never happen because this rule will always eliminate the child not.case notreturn x.getfirstchild() (not (not x) ) => (x)	WITHOUT_CLASSIFICATION	0.9997781943472273	WITHOUT_CLASSIFICATION	2.2180565277266792E-4	DESIGN
just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9945886504548248	WITHOUT_CLASSIFICATION	0.005411349545175144	DESIGN
(eq null b) => (is_null b)	WITHOUT_CLASSIFICATION	0.9998732469060193	WITHOUT_CLASSIFICATION	1.2675309398073523E-4	DESIGN
(eq a null) => (is_null a)	WITHOUT_CLASSIFICATION	0.9997595298766331	WITHOUT_CLASSIFICATION	2.4047012336681314E-4	DESIGN
note because we're using astutil.createparent() the tree must be created from the bottom up. is empty x => (exists (query (select_from (from x) ) ) )	WITHOUT_CLASSIFICATION	0.9991370105091532	WITHOUT_CLASSIFICATION	8.629894908467476E-4	DESIGN
add not if it's negated.	WITHOUT_CLASSIFICATION	0.998983165520137	WITHOUT_CLASSIFICATION	0.0010168344798630385	DESIGN
create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999954509596161	WITHOUT_CLASSIFICATION	4.549040384016671E-6	DESIGN
case 1 multi token keywords group by and order by the next token ( lt(2) ) should be 'by' otherwise this is just an ident.	WITHOUT_CLASSIFICATION	0.9820328202086749	WITHOUT_CLASSIFICATION	0.017967179791325134	DESIGN
case 2 the current token is after from and before '.'.	WITHOUT_CLASSIFICATION	0.9999847972979866	WITHOUT_CLASSIFICATION	1.5202702013262496E-5	DESIGN
this handles hhh-354 where there is a strange property name in a where clause. if the lookahead contains a dot then something that isn't an ident	WITHOUT_CLASSIFICATION	0.9992695531131935	WITHOUT_CLASSIFICATION	7.304468868066012E-4	DESIGN
see if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999707772215221	WITHOUT_CLASSIFICATION	2.9222778478016685E-5	DESIGN
set it!	WITHOUT_CLASSIFICATION	0.9996828663556891	WITHOUT_CLASSIFICATION	3.1713364431085314E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.999927327176818	WITHOUT_CLASSIFICATION	7.267282318199849E-5	DESIGN
strip the " where "	WITHOUT_CLASSIFICATION	0.9999035680269981	WITHOUT_CLASSIFICATION	9.643197300180455E-5	DESIGN
don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.969191619693012	WITHOUT_CLASSIFICATION	0.0308083803069879	DESIGN
at the very least cleanup the data )	WITHOUT_CLASSIFICATION	0.9991764028809855	WITHOUT_CLASSIFICATION	8.23597119014485E-4	DESIGN
first save off the pertinent ids as the return value	WITHOUT_CLASSIFICATION	0.9999867571435206	WITHOUT_CLASSIFICATION	1.3242856479317874E-5	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9998911701427486	WITHOUT_CLASSIFICATION	1.0882985725141438E-4	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9998911701427486	WITHOUT_CLASSIFICATION	1.0882985725141438E-4	DESIGN
start performing the updates	WITHOUT_CLASSIFICATION	0.9998757239783252	WITHOUT_CLASSIFICATION	1.242760216747731E-4	DESIGN
first save off the pertinent ids saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.999772406900893	WITHOUT_CLASSIFICATION	2.2759309910704668E-4	DESIGN
start performing the deletes	WITHOUT_CLASSIFICATION	0.9998459770992231	WITHOUT_CLASSIFICATION	1.5402290077702558E-4	DESIGN
otherwise everything ok.	WITHOUT_CLASSIFICATION	0.9989428751071651	WITHOUT_CLASSIFICATION	0.001057124892834973	DESIGN
visit width-first then depth	WITHOUT_CLASSIFICATION	0.9989413010155674	WITHOUT_CLASSIFICATION	0.0010586989844325592	DESIGN
if the types report logical equivalence return true	WITHOUT_CLASSIFICATION	0.9798400497636292	WITHOUT_CLASSIFICATION	0.020159950236370877	DESIGN
otherwise perform a "deep equivalence" check	WITHOUT_CLASSIFICATION	0.9944760205408988	WITHOUT_CLASSIFICATION	0.005523979459101101	DESIGN
if there is no where node make one.	WITHOUT_CLASSIFICATION	0.9999956669557964	WITHOUT_CLASSIFICATION	4.333044203596793E-6	DESIGN
inject the where after the parent	WITHOUT_CLASSIFICATION	0.9996383179955213	WITHOUT_CLASSIFICATION	3.616820044788137E-4	DESIGN
never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999108678464103	WITHOUT_CLASSIFICATION	8.913215358975089E-5	DESIGN
moved here from selectclause [jsd]	WITHOUT_CLASSIFICATION	0.9733541530783599	WITHOUT_CLASSIFICATION	0.026645846921640078	DESIGN
/	WITHOUT_CLASSIFICATION	0.9999015662196771	WITHOUT_CLASSIFICATION	9.843378032287948E-5	DESIGN
use the table fromelement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9994002987958532	WITHOUT_CLASSIFICATION	5.997012041468288E-4	DESIGN
set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9996326568214109	WITHOUT_CLASSIFICATION	3.673431785891951E-4	DESIGN
if the uresolved property path isn't set yet just use the property name.	WITHOUT_CLASSIFICATION	0.9994519760639445	WITHOUT_CLASSIFICATION	5.480239360554399E-4	DESIGN
the 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9998117132486353	WITHOUT_CLASSIFICATION	1.882867513646418E-4	DESIGN
prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999994289526405	WITHOUT_CLASSIFICATION	5.710473596109892E-7	DESIGN
prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999994289526405	WITHOUT_CLASSIFICATION	5.710473596109892E-7	DESIGN
if this dot has already been resolved stop now.	WITHOUT_CLASSIFICATION	0.9975655774310467	WITHOUT_CLASSIFICATION	0.0024344225689532733	DESIGN
if there is no data type for this node and we're at the end of the path (top most dot node) then this might be a java constant.	WITHOUT_CLASSIFICATION	0.9922418430777314	WITHOUT_CLASSIFICATION	0.007758156922268601	DESIGN
the property is a collection	WITHOUT_CLASSIFICATION	0.9975881653021722	WITHOUT_CLASSIFICATION	0.002411834697827782	DESIGN
the property is a component	WITHOUT_CLASSIFICATION	0.9994698849465149	WITHOUT_CLASSIFICATION	5.30115053485107E-4	DESIGN
the property is another class..	WITHOUT_CLASSIFICATION	0.9984890477366554	WITHOUT_CLASSIFICATION	0.0015109522633446162	DESIGN
otherwise this is a primitive type.	WITHOUT_CLASSIFICATION	0.9915431215128011	WITHOUT_CLASSIFICATION	0.00845687848719886	DESIGN
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9994476760754292	WITHOUT_CLASSIFICATION	5.523239245708009E-4	DESIGN
this 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9979432032694892	WITHOUT_CLASSIFICATION	0.002056796730510809	DESIGN
always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998587343488486	WITHOUT_CLASSIFICATION	1.412656511513228E-4	DESIGN
in non-select queries the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999552201679586	WITHOUT_CLASSIFICATION	4.4779832041421824E-5	DESIGN
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999876909154809	WITHOUT_CLASSIFICATION	1.2309084519141596E-5	DESIGN
this 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9979432032694892	WITHOUT_CLASSIFICATION	0.002056796730510809	DESIGN
even though we might find a pre-existing element by join path we may not be able to reuse it	WITHOUT_CLASSIFICATION	0.9997066128371018	WITHOUT_CLASSIFICATION	2.9338716289817026E-4	DESIGN
note addduplicatealias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9969839073136937	WITHOUT_CLASSIFICATION	0.0030160926863062624	DESIGN
if the from-clauses are the same we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.905461774692493	WITHOUT_CLASSIFICATION	0.09453822530750691	DESIGN
again null != null here	WITHOUT_CLASSIFICATION	0.9998632494054395	WITHOUT_CLASSIFICATION	1.367505945605552E-4	DESIGN
if this is an implied join in a from element then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9992931180684296	WITHOUT_CLASSIFICATION	7.068819315704982E-4	DESIGN
otherwise (subquery case) dont reuse the fromelement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999835583406887	WITHOUT_CLASSIFICATION	1.6441659311329897E-5	DESIGN
we know only the lhs-hand type so use that	WITHOUT_CLASSIFICATION	0.9979979080760721	WITHOUT_CLASSIFICATION	0.0020020919239279057	DESIGN
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999980259918048	WITHOUT_CLASSIFICATION	1.974008195266395E-6	DESIGN
only the identifier property field name can be a reference to the associated entity's pk	WITHOUT_CLASSIFICATION	0.9981737659990689	WITHOUT_CLASSIFICATION	0.0018262340009309727	DESIGN
special shortcut for id properties skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9989124729047811	WITHOUT_CLASSIFICATION	0.0010875270952188322	DESIGN
append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9995662260913835	WITHOUT_CLASSIFICATION	4.337739086166607E-4	DESIGN
if the lhs is a collection use collectionpropertymapping	WITHOUT_CLASSIFICATION	0.9996125799451052	WITHOUT_CLASSIFICATION	3.8742005489483534E-4	DESIGN
tell the destination fromelement to 'includesubclasses'.	WITHOUT_CLASSIFICATION	0.999783799560752	WITHOUT_CLASSIFICATION	2.1620043924805074E-4	DESIGN
use theta style (for regression) move the node up after the origin node.	WITHOUT_CLASSIFICATION	0.9903541878579535	WITHOUT_CLASSIFICATION	0.009645812142046444	DESIGN
don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9983368755550549	WITHOUT_CLASSIFICATION	0.001663124444945063	DESIGN
for expected parameter type injection we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9991515537398578	WITHOUT_CLASSIFICATION	8.484462601421266E-4	DESIGN
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9996193878710131	WITHOUT_CLASSIFICATION	3.8061212898691935E-4	DESIGN
we have something like "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9986989286941481	WITHOUT_CLASSIFICATION	0.0013010713058519265	DESIGN
we have something like "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9986989286941481	WITHOUT_CLASSIFICATION	0.0013010713058519265	DESIGN
we know only the rhs-hand type so use that	WITHOUT_CLASSIFICATION	0.9979979080760721	WITHOUT_CLASSIFICATION	0.0020020919239279057	DESIGN
handle the (assumed) valid cases #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9961499002073932	WITHOUT_CLASSIFICATION	0.003850099792606711	DESIGN
one or the other needs to be a datetime for us to get into this method in the first place	WITHOUT_CLASSIFICATION	0.9044403570903912	WITHOUT_CLASSIFICATION	0.09555964290960879	DESIGN
#3 - note that this is also true of "datetime - param"	WITHOUT_CLASSIFICATION	0.9903250716336366	WITHOUT_CLASSIFICATION	0.009674928366363416	DESIGN
#2	WITHOUT_CLASSIFICATION	0.9996920596406802	WITHOUT_CLASSIFICATION	3.0794035931991647E-4	DESIGN
generate the inner join -- the elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.999844274108438	WITHOUT_CLASSIFICATION	1.5572589156198768E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9996755267117391	WITHOUT_CLASSIFICATION	3.244732882609785E-4	DESIGN
the 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999893527468071	WITHOUT_CLASSIFICATION	1.064725319286138E-5	DESIGN
add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999966139516975	WITHOUT_CLASSIFICATION	3.386048302608511E-6	DESIGN
sometimes use the element table alias sometimes use the umm collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9996705154833216	WITHOUT_CLASSIFICATION	3.2948451667833467E-4	DESIGN
now set the text for this node. it should be the element columns.	WITHOUT_CLASSIFICATION	0.841137813612589	WITHOUT_CLASSIFICATION	0.15886218638741106	DESIGN
get the function return value type based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999932497574989	WITHOUT_CLASSIFICATION	6.750242501063648E-6	DESIGN
this will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9995680486475116	WITHOUT_CLASSIFICATION	4.3195135248839337E-4	DESIGN
mutation depends on the types of nodes invloved	WITHOUT_CLASSIFICATION	0.9988108201219265	WITHOUT_CLASSIFICATION	0.0011891798780736076	DESIGN
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding	WITHOUT_CLASSIFICATION	0.9205142691060954	WITHOUT_CLASSIFICATION	0.07948573089390472	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9995545431755509	WITHOUT_CLASSIFICATION	4.454568244489864E-4	DESIGN
generated select expressions are already resolved nothing to do.	WITHOUT_CLASSIFICATION	0.9907022623418315	WITHOUT_CLASSIFICATION	0.009297737658168605	DESIGN
the path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9984048953460747	WITHOUT_CLASSIFICATION	0.0015951046539252147	DESIGN
the hql class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.999955206453715	WITHOUT_CLASSIFICATION	4.479354628498774E-5	DESIGN
associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9992617163295299	WITHOUT_CLASSIFICATION	7.382836704702076E-4	DESIGN
try the parent fromclause	WITHOUT_CLASSIFICATION	0.9983702144385277	WITHOUT_CLASSIFICATION	0.0016297855614722729	DESIGN
add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999275976930299	WITHOUT_CLASSIFICATION	7.240230697022844E-5	DESIGN
make sure that all from elements registered with this from clause are actually in the ast.	WITHOUT_CLASSIFICATION	0.9997598340116463	WITHOUT_CLASSIFICATION	2.4016598835369012E-4	DESIGN
invoke setscalarcolumntext on each constructor argument.	WITHOUT_CLASSIFICATION	0.9998570489396067	WITHOUT_CLASSIFICATION	1.4295106039341192E-4	DESIGN
collect the select expressions skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.999998084621874	WITHOUT_CLASSIFICATION	1.9153781260057136E-6	DESIGN
return an empty type array	WITHOUT_CLASSIFICATION	0.9976639636148343	WITHOUT_CLASSIFICATION	0.002336036385165719	DESIGN
constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9979155973404387	WITHOUT_CLASSIFICATION	0.002084402659561282	DESIGN
this is the exception returned by reflecthelper.getconstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9997560079422656	WITHOUT_CLASSIFICATION	2.439920577344396E-4	DESIGN
if there is no order by make one	WITHOUT_CLASSIFICATION	0.9999823399371907	WITHOUT_CLASSIFICATION	1.7660062809242792E-5	DESIGN
find the where if there is no where find the from	WITHOUT_CLASSIFICATION	0.99998992824854	WITHOUT_CLASSIFICATION	1.0071751459817489E-5	DESIGN
now inject the newly built order by into the tree	WITHOUT_CLASSIFICATION	0.9990663725376532	WITHOUT_CLASSIFICATION	9.336274623468564E-4	DESIGN
parametercontainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998993914330049	WITHOUT_CLASSIFICATION	1.0060856699508472E-4	DESIGN
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9997307097523374	WITHOUT_CLASSIFICATION	2.692902476626941E-4	DESIGN
render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.995651535550004	WITHOUT_CLASSIFICATION	0.004348464449996057	DESIGN
class names in the from clause result in a joinsequence (the old fromparser does this).	WITHOUT_CLASSIFICATION	0.9999812084559447	WITHOUT_CLASSIFICATION	1.879154405520357E-5	DESIGN
for many-to-many joins use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9992959615131565	WITHOUT_CLASSIFICATION	7.040384868435261E-4	DESIGN
otherwise use the property mapping.	WITHOUT_CLASSIFICATION	0.998923156983454	WITHOUT_CLASSIFICATION	0.0010768430165459186	DESIGN
should be safe to only ever expect entitypersister references here	WITHOUT_CLASSIFICATION	0.9978942600651087	WITHOUT_CLASSIFICATION	0.00210573993489126	DESIGN
if the property is a special collection property name return a collectionpropertymapping.	WITHOUT_CLASSIFICATION	0.9996441366192629	WITHOUT_CLASSIFICATION	3.558633807371793E-4	DESIGN
collection of components.	WITHOUT_CLASSIFICATION	0.9995849889305154	WITHOUT_CLASSIFICATION	4.1501106948460927E-4	DESIGN
make sure the lhs is "assignable"	WITHOUT_CLASSIFICATION	0.9998983043814108	WITHOUT_CLASSIFICATION	1.0169561858920092E-4	DESIGN
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.998636974446927	WITHOUT_CLASSIFICATION	0.0013630255530729764	DESIGN
register the fromelement with the from clause now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9997571886729095	WITHOUT_CLASSIFICATION	2.4281132709056758E-4	DESIGN
currently allowed	WITHOUT_CLASSIFICATION	0.999692690352141	WITHOUT_CLASSIFICATION	3.0730964785898203E-4	DESIGN
hhh-276 implied joins in a subselect where clause - the destination needs to be added to the destination's from clause. not sure if this is will fix everything but it works.	WITHOUT_CLASSIFICATION	0.9573318825688435	WITHOUT_CLASSIFICATION	0.042668117431156595	DESIGN
return classalias == null ? classname classalias	WITHOUT_CLASSIFICATION	0.9988102705364316	WITHOUT_CLASSIFICATION	0.0011897294635684044	DESIGN
this is an explicit from element.	WITHOUT_CLASSIFICATION	0.994894474728644	WITHOUT_CLASSIFICATION	0.0051055252713559695	DESIGN
parametercontainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998993914330049	WITHOUT_CLASSIFICATION	1.0060856699508472E-4	DESIGN
fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.8653655008444732	WITHOUT_CLASSIFICATION	0.1346344991555269	DESIGN
if it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999985964699681	WITHOUT_CLASSIFICATION	1.4035300318523256E-6	DESIGN
since this is an explicit from element it can't be implied in the from clause.	WITHOUT_CLASSIFICATION	0.9997717825486575	WITHOUT_CLASSIFICATION	2.2821745134265174E-4	DESIGN
do nothing eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9998360581122376	WITHOUT_CLASSIFICATION	1.639418877623606E-4	DESIGN
propertyname refers to something like collection.size	WITHOUT_CLASSIFICATION	0.9976697741985711	WITHOUT_CLASSIFICATION	0.0023302258014290004	DESIGN
property name is a sub-path of a component	WITHOUT_CLASSIFICATION	0.9994397023590752	WITHOUT_CLASSIFICATION	5.602976409246896E-4	DESIGN
always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998587343488486	WITHOUT_CLASSIFICATION	1.412656511513228E-4	DESIGN
nothing to do even if the operand is a parameter no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.659330898982549	DESIGN	0.34066910101745107	WITHOUT_CLASSIFICATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9995545431755509	WITHOUT_CLASSIFICATION	4.454568244489864E-4	DESIGN
dotnode uses null here	WITHOUT_CLASSIFICATION	0.9977026813362574	WITHOUT_CLASSIFICATION	0.0022973186637425653	DESIGN
we represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9997051086982899	WITHOUT_CLASSIFICATION	2.9489130171013163E-4	DESIGN
we are the lhs of the dot representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9997521075834167	WITHOUT_CLASSIFICATION	2.478924165832956E-4	DESIGN
we are the rhs of the dot representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999412851347426	WITHOUT_CLASSIFICATION	5.871486525740703E-4	DESIGN
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9977890420586863	WITHOUT_CLASSIFICATION	0.0022109579413137665	DESIGN
early exit!!! return so the resolve call explicitly coming from dotnode can resolve this	WITHOUT_CLASSIFICATION	0.9915089865432624	WITHOUT_CLASSIFICATION	0.008491013456737608	DESIGN
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9650172723060264	WITHOUT_CLASSIFICATION	0.03498272769397355	DESIGN
just ignore it for now it'll get resolved later	WITHOUT_CLASSIFICATION	0.9983715284512505	WITHOUT_CLASSIFICATION	0.001628471548749548	DESIGN
this is not actually a constant but a reference to from element.	WITHOUT_CLASSIFICATION	0.9553152972722345	WITHOUT_CLASSIFICATION	0.04468470272776557	DESIGN
check to see if our "proppath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9989017830619876	WITHOUT_CLASSIFICATION	0.0010982169380123388	DESIGN
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9996812759033705	WITHOUT_CLASSIFICATION	3.187240966294414E-4	DESIGN
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.6506121404653128	WITHOUT_CLASSIFICATION	0.34938785953468715	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9578235299159982	WITHOUT_CLASSIFICATION	0.042176470084001834	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9578235299159982	WITHOUT_CLASSIFICATION	0.042176470084001834	DESIGN
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9629565322896277	WITHOUT_CLASSIFICATION	0.03704346771037227	DESIGN
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9973113030909658	WITHOUT_CLASSIFICATION	0.0026886969090341804	DESIGN
do not over-write the column text as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9996038780818156	WITHOUT_CLASSIFICATION	3.9612191818447505E-4	DESIGN
for some reason the antlr.commonast initialization routines force this method to get called twice. the first time with an empty string	WITHOUT_CLASSIFICATION	0.9999637749699153	WITHOUT_CLASSIFICATION	3.6225030084727894E-5	DESIGN
look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999591773132368	WITHOUT_CLASSIFICATION	4.082268676328586E-5	DESIGN
add to the query spaces.	WITHOUT_CLASSIFICATION	0.9998653683449968	WITHOUT_CLASSIFICATION	1.3463165500320062E-4	DESIGN
if the from element isn't in the same clause create a new from element.	WITHOUT_CLASSIFICATION	0.9987850991011065	WITHOUT_CLASSIFICATION	0.001214900898893552	DESIGN
this is the root level node. generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9928100493307218	WITHOUT_CLASSIFICATION	0.007189950669278201	DESIGN
correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ansi-style join	WITHOUT_CLASSIFICATION	0.999996346700658	WITHOUT_CLASSIFICATION	3.6532993420330235E-6	DESIGN
super-duper-classic-parser-regression-testing-mojo-magic	WITHOUT_CLASSIFICATION	0.9995487121138841	WITHOUT_CLASSIFICATION	4.512878861158206E-4	DESIGN
a collection of entities	WITHOUT_CLASSIFICATION	0.9972598282721079	WITHOUT_CLASSIFICATION	0.002740171727892032	DESIGN
a collection of components	WITHOUT_CLASSIFICATION	0.9981202215101137	WITHOUT_CLASSIFICATION	0.001879778489886324	DESIGN
a collection of scalar elements	WITHOUT_CLASSIFICATION	0.9996117589526133	WITHOUT_CLASSIFICATION	3.8824104738667553E-4	DESIGN
according to both the ansi-sql and ejb3 specs trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the sql spec <trim function> = trim <left paren> <trim operands> <right paren> <trim operands> = [ [ <trim specification> ] [ <trim character> ] from ] <trim source> <trim specification> = leading | trailing | both if only <trim specification> is omitted both is assumed if <trim character> is omitted space is assumed	WITHOUT_CLASSIFICATION	0.9999999999867921	WITHOUT_CLASSIFICATION	1.320794054093185E-11	DESIGN
don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9998767271222955	WITHOUT_CLASSIFICATION	1.2327287770447053E-4	DESIGN
treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9990732865370273	WITHOUT_CLASSIFICATION	9.267134629726693E-4	DESIGN
( implied && dotnode.usethetastyleimplicitjoins ) ) {	WITHOUT_CLASSIFICATION	0.9993437265066623	WITHOUT_CLASSIFICATION	6.562734933377802E-4	DESIGN
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9018334497324559	WITHOUT_CLASSIFICATION	0.09816655026754406	DESIGN
create the from element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999959441233479	WITHOUT_CLASSIFICATION	4.0558766520295055E-6	DESIGN
if the join is implied then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999816789128148	WITHOUT_CLASSIFICATION	1.8321087185255976E-5	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996278398562839	WITHOUT_CLASSIFICATION	3.721601437161622E-4	DESIGN
the associated entity is implied but it must be included in the from. the collection alias is the role.	WITHOUT_CLASSIFICATION	0.9998818940938993	WITHOUT_CLASSIFICATION	1.181059061006894E-4	DESIGN
tag this node as a join. don't include subclasses in the join. this is a clollection join.	WITHOUT_CLASSIFICATION	0.9999621985995886	WITHOUT_CLASSIFICATION	3.780140041136314E-5	DESIGN
get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9998646085842626	WITHOUT_CLASSIFICATION	1.3539141573738677E-4	DESIGN
origin path implied columns classalias	WITHOUT_CLASSIFICATION	0.999960978289122	WITHOUT_CLASSIFICATION	3.902171087791102E-5	DESIGN
implied	WITHOUT_CLASSIFICATION	0.9996654965183382	WITHOUT_CLASSIFICATION	3.345034816618116E-4	DESIGN
for implied many-to-many just add the end join.	WITHOUT_CLASSIFICATION	0.9998758038681066	WITHOUT_CLASSIFICATION	1.2419613189343666E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996278398562839	WITHOUT_CLASSIFICATION	3.721601437161622E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996278398562839	WITHOUT_CLASSIFICATION	3.721601437161622E-4	DESIGN
the standard sql function name is current_timestamp	WITHOUT_CLASSIFICATION	0.999993542686275	WITHOUT_CLASSIFICATION	6.457313725005865E-6	DESIGN
this causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9459858559307686	WITHOUT_CLASSIFICATION	0.054014144069231516	DESIGN
private type[] sqlresulttypes	WITHOUT_CLASSIFICATION	0.9971971637647189	WITHOUT_CLASSIFICATION	0.002802836235281104	DESIGN
frontbase has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9997264862291677	WITHOUT_CLASSIFICATION	2.735137708323501E-4	DESIGN
the types represented in the sql result set. @return the types represented in the sql result set.	WITHOUT_CLASSIFICATION	0.9998540482088459	WITHOUT_CLASSIFICATION	1.4595179115404054E-4	DESIGN
public type[] getsqlresulttypes() {return sqlresulttypes}	WITHOUT_CLASSIFICATION	0.9985271764649348	WITHOUT_CLASSIFICATION	0.0014728235350651372	DESIGN
first collect all of the select expressions. note this must be done before invoking setscalarcolumntext() because setscalarcolumntext() changes the ast!!!	WITHOUT_CLASSIFICATION	0.997835620021833	WITHOUT_CLASSIFICATION	0.0021643799781669265	DESIGN
first allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9397495727548475	WITHOUT_CLASSIFICATION	0.06025042724515249	DESIGN
sqlresulttypelist.addall( constructorargumenttypelist )	WITHOUT_CLASSIFICATION	0.9993316262540104	WITHOUT_CLASSIFICATION	6.68373745989595E-4	DESIGN
if the data type is not an association type it could not have been in the from clause.	WITHOUT_CLASSIFICATION	0.9781067750056078	WITHOUT_CLASSIFICATION	0.02189322499439221	DESIGN
sqlresulttypelist.add( type )	WITHOUT_CLASSIFICATION	0.996772948391721	WITHOUT_CLASSIFICATION	0.00322705160827905	DESIGN
always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9991431759614301	WITHOUT_CLASSIFICATION	8.568240385699415E-4	DESIGN
add the fetched entities	WITHOUT_CLASSIFICATION	0.9997363399037232	WITHOUT_CLASSIFICATION	2.636600962766691E-4	DESIGN
get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998399330751372	WITHOUT_CLASSIFICATION	1.6006692486286345E-4	DESIGN
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998503931111024	WITHOUT_CLASSIFICATION	1.4960688889766177E-4	DESIGN
if there are any scalars (non-entities) selected render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999996491061858	WITHOUT_CLASSIFICATION	3.508938142225433E-7	DESIGN
sqlresulttypelist	WITHOUT_CLASSIFICATION	0.999514050864903	WITHOUT_CLASSIFICATION	4.859491350970499E-4	DESIGN
arraylist sqlresulttypelist	WITHOUT_CLASSIFICATION	0.9992050783976278	WITHOUT_CLASSIFICATION	7.949216023720998E-4	DESIGN
sqlresulttypes = ( type[] ) sqlresulttypelist.toarray( new type[sqlresulttypelist.size()] )	WITHOUT_CLASSIFICATION	0.9999566337312186	WITHOUT_CLASSIFICATION	4.336626878144773E-5	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980966627701612	WITHOUT_CLASSIFICATION	0.0019033372298387697	DESIGN
todo	WITHOUT_CLASSIFICATION	0.6938108157348961	WITHOUT_CLASSIFICATION	0.30618918426510383	DESIGN
add the type to the list of returned sqlresulttypes.	WITHOUT_CLASSIFICATION	0.9998844572356721	WITHOUT_CLASSIFICATION	1.1554276432788883E-4	DESIGN
generate an 2d array of column names the first dimension is parallel with the return types array. the second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999991348978194	WITHOUT_CLASSIFICATION	8.65102180480985E-7	DESIGN
generate the select expression.	WITHOUT_CLASSIFICATION	0.9995663768891527	WITHOUT_CLASSIFICATION	4.33623110847318E-4	DESIGN
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9800113951260597	WITHOUT_CLASSIFICATION	0.019988604873940184	DESIGN
skip 'distinct' and 'all' so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999765268579236	WITHOUT_CLASSIFICATION	2.3473142076489053E-5	DESIGN
create sql_token nodes for the columns.	WITHOUT_CLASSIFICATION	0.9992524816126002	WITHOUT_CLASSIFICATION	7.475183873997929E-4	DESIGN
generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9994086677557753	WITHOUT_CLASSIFICATION	5.913322442246856E-4	DESIGN
get the function name node.	WITHOUT_CLASSIFICATION	0.9999540952995439	WITHOUT_CLASSIFICATION	4.59047004559888E-5	DESIGN
method expressions in a select should always be considered scalar.	WITHOUT_CLASSIFICATION	0.8481073769451056	WITHOUT_CLASSIFICATION	0.15189262305489434	DESIGN
if this is 'elements' then create a new from element.	WITHOUT_CLASSIFICATION	0.9816249034785124	WITHOUT_CLASSIFICATION	0.018375096521487614	DESIGN
not elements(x)	WITHOUT_CLASSIFICATION	0.9979643578849589	WITHOUT_CLASSIFICATION	0.002035642115041181	DESIGN
dialect function	WITHOUT_CLASSIFICATION	0.9998382089741478	WITHOUT_CLASSIFICATION	1.6179102585225642E-4	DESIGN
collection 'property function'	WITHOUT_CLASSIFICATION	0.9986467907995641	WITHOUT_CLASSIFICATION	0.0013532092004358957	DESIGN
if the constant is an ident figure out what it means	WITHOUT_CLASSIFICATION	0.9997940200925834	WITHOUT_CLASSIFICATION	2.0597990741644205E-4	DESIGN
ident is a class alias in the from.	WITHOUT_CLASSIFICATION	0.9997630698137342	WITHOUT_CLASSIFICATION	2.3693018626586964E-4	DESIGN
resolve to an identity column.	WITHOUT_CLASSIFICATION	0.944684330888924	WITHOUT_CLASSIFICATION	0.05531566911107597	DESIGN
otherwise it's a literal.	WITHOUT_CLASSIFICATION	0.997865541920877	WITHOUT_CLASSIFICATION	0.0021344580791230303	DESIGN
the name of an entity class	WITHOUT_CLASSIFICATION	0.9993256884343825	WITHOUT_CLASSIFICATION	6.743115656174137E-4	DESIGN
the class discriminator value	WITHOUT_CLASSIFICATION	0.9997733485735522	WITHOUT_CLASSIFICATION	2.266514264479242E-4	DESIGN
chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9995700268343838	WITHOUT_CLASSIFICATION	4.2997316561619464E-4	DESIGN
add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999640179969183	WITHOUT_CLASSIFICATION	3.5982003081777647E-5	DESIGN
find or create the where clause	WITHOUT_CLASSIFICATION	0.9999859705645251	WITHOUT_CLASSIFICATION	1.40294354748244E-5	DESIGN
child == parent.getfirstchild()	WITHOUT_CLASSIFICATION	0.9998698328743185	WITHOUT_CLASSIFICATION	1.3016712568150398E-4	DESIGN
find or create the where clause	WITHOUT_CLASSIFICATION	0.9999859705645251	WITHOUT_CLASSIFICATION	1.40294354748244E-5	DESIGN
filter conditions need to be inserted before the hql where condition and the theta join node. this is because org.hibernate.loader.loader binds the filter parameters first then it binds all the hql query parameters see org.hibernate.loader.loader.processfilterparameters().	WITHOUT_CLASSIFICATION	0.9999999271459552	WITHOUT_CLASSIFICATION	7.285404487777811E-8	DESIGN
put the filters node before the hql condition and theta joins	WITHOUT_CLASSIFICATION	0.9999705451016574	WITHOUT_CLASSIFICATION	2.9454898342661235E-5	DESIGN
add the current fragment to the filters node	WITHOUT_CLASSIFICATION	0.998973055758083	WITHOUT_CLASSIFICATION	0.0010269442419170187	DESIGN
create a new theta_joins node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9997464781319433	WITHOUT_CLASSIFICATION	2.5352186805668994E-4	DESIGN
put the theta_joins node before the hql condition after the filters.	WITHOUT_CLASSIFICATION	0.9999745469654516	WITHOUT_CLASSIFICATION	2.545303454836944E-5	DESIGN
add the current fragment to the theta_joins node	WITHOUT_CLASSIFICATION	0.998626443879662	WITHOUT_CLASSIFICATION	0.0013735561203379843	DESIGN
first try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9998223204131622	WITHOUT_CLASSIFICATION	1.776795868379005E-4	DESIGN
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9986371661496102	WITHOUT_CLASSIFICATION	0.001362833850389904	DESIGN
if that didn't work try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9997621241640007	WITHOUT_CLASSIFICATION	2.3787583599932724E-4	DESIGN
implicit joins use theta style (where pk = fk) explicit joins use join (after from)	WITHOUT_CLASSIFICATION	0.9999809701829442	WITHOUT_CLASSIFICATION	1.9029817055814726E-5	DESIGN
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.999997449740298	WITHOUT_CLASSIFICATION	2.5502597019355087E-6	DESIGN
determine the type of the first argument	WITHOUT_CLASSIFICATION	0.9996260532611614	WITHOUT_CLASSIFICATION	3.73946738838613E-4	DESIGN
use the dot node to emit the first column name. create the column names folled by the column aliases.	WITHOUT_CLASSIFICATION	0.999983810594743	WITHOUT_CLASSIFICATION	1.6189405257036927E-5	DESIGN
note this simply constructs a "raw" sql_token representing the where fragment and injects this into the tree. this "works" however it is probably not the best long-term solution. at some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999686378334656	DESIGN	3.1362166534478924E-5	WITHOUT_CLASSIFICATION
append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999806481563511	WITHOUT_CLASSIFICATION	1.935184364889806E-5	DESIGN
if the node has a first child recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999875192947343	WITHOUT_CLASSIFICATION	1.2480705265670655E-5	DESIGN
if there is a second child (rhs) recurse into that child.	WITHOUT_CLASSIFICATION	0.9998971928219741	WITHOUT_CLASSIFICATION	1.0280717802589561E-4	DESIGN
iterate through the aliasjoinsequence pairs and generate sql token nodes.	WITHOUT_CLASSIFICATION	0.999546306294245	WITHOUT_CLASSIFICATION	4.536937057549858E-4	DESIGN
if the from element represents a join_fragment and it is a theta-style join convert its type from join_fragment to from_fragment	WITHOUT_CLASSIFICATION	0.9999951317356522	WITHOUT_CLASSIFICATION	4.868264347797482E-6	DESIGN
this is used during sqlgenerator processing	WITHOUT_CLASSIFICATION	0.8022070583824594	WITHOUT_CLASSIFICATION	0.1977929416175406	DESIGN
if there is a from fragment and the from element is an explicit then add the from part.	WITHOUT_CLASSIFICATION	0.9970815475264744	WITHOUT_CLASSIFICATION	0.002918452473525606	DESIGN
&& stringhelper.isnotempty( frag )	WITHOUT_CLASSIFICATION	0.9985669105640074	WITHOUT_CLASSIFICATION	0.001433089435992552	DESIGN
the from fragment will probably begin with ' '. remove this if it is present.	WITHOUT_CLASSIFICATION	0.694676424272191	WITHOUT_CLASSIFICATION	0.3053235757278089	DESIGN
this uses a pathexpressionparser but notice that compound paths are not valid only bare names and simple paths	WITHOUT_CLASSIFICATION	0.9995739422465914	WITHOUT_CLASSIFICATION	4.2605775340871685E-4	DESIGN
select p from p in class eg.person order by p.name p.address p	WITHOUT_CLASSIFICATION	0.9994901365533623	WITHOUT_CLASSIFICATION	5.0986344663769E-4	DESIGN
the reason for this is sql doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9993770074188643	WITHOUT_CLASSIFICATION	6.22992581135707E-4	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9993307144513295	WITHOUT_CLASSIFICATION	6.692855486704797E-4	DESIGN
default mode	WITHOUT_CLASSIFICATION	0.9996016968023705	WITHOUT_CLASSIFICATION	3.983031976294371E-4	DESIGN
queryjoinfragment join = q.createjoinfragment(usethetastylejoin)	WITHOUT_CLASSIFICATION	0.999993939530312	WITHOUT_CLASSIFICATION	6.060469687967572E-6	DESIGN
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9992530237349388	WITHOUT_CLASSIFICATION	7.469762650611791E-4	DESIGN
after reset!	WITHOUT_CLASSIFICATION	0.9996437562494065	WITHOUT_CLASSIFICATION	3.5624375059343063E-4	DESIGN
we don't need to worry about any condition in the on clause here (tofromfragmentstring) since anything in the on condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9996330342008694	WITHOUT_CLASSIFICATION	3.6696579913069073E-4	DESIGN
bit_length feels a bit broken to me. we have to cast to char in order to pass when a numeric value is supplied. but of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. jay nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9995039646980687	WITHOUT_CLASSIFICATION	4.960353019313578E-4	DESIGN
dotcount>=2	WITHOUT_CLASSIFICATION	0.999514050864903	WITHOUT_CLASSIFICATION	4.859491350970499E-4	DESIGN
do the corresponding rhs	WITHOUT_CLASSIFICATION	0.9996372635755852	WITHOUT_CLASSIFICATION	3.627364244147598E-4	DESIGN
if its "id"	WITHOUT_CLASSIFICATION	0.9999550224943443	WITHOUT_CLASSIFICATION	4.497750565560338E-5	DESIGN
or its the id property name	WITHOUT_CLASSIFICATION	0.9998770187435729	WITHOUT_CLASSIFICATION	1.229812564270572E-4	DESIGN
join = q.createjoinfragment(usethetastylejoin)	WITHOUT_CLASSIFICATION	0.999993939530312	WITHOUT_CLASSIFICATION	6.060469687967572E-6	DESIGN
important!!	WITHOUT_CLASSIFICATION	0.999514050864903	WITHOUT_CLASSIFICATION	4.859491350970499E-4	DESIGN
string[] keycols = collpersister.getkeycolumnnames()	WITHOUT_CLASSIFICATION	0.9999320673509	WITHOUT_CLASSIFICATION	6.793264909993462E-5	DESIGN
an association	WITHOUT_CLASSIFICATION	0.9996831989880322	WITHOUT_CLASSIFICATION	3.168010119679318E-4	DESIGN
allow index() function	WITHOUT_CLASSIFICATION	0.9998178275659549	WITHOUT_CLASSIFICATION	1.821724340450064E-4	DESIGN
here assume sqlserver2005 using snapshot isolation which does not have this problem	WITHOUT_CLASSIFICATION	0.9909078555033253	WITHOUT_CLASSIFICATION	0.009092144496674627	DESIGN
the reason for this is sql doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9993770074188643	WITHOUT_CLASSIFICATION	6.22992581135707E-4	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.999514050864903	WITHOUT_CLASSIFICATION	4.859491350970499E-4	DESIGN
collections of values	WITHOUT_CLASSIFICATION	0.9996976255950231	WITHOUT_CLASSIFICATION	3.0237440497688384E-4	DESIGN
opening paren in new foo ( )	WITHOUT_CLASSIFICATION	0.9993235102211835	WITHOUT_CLASSIFICATION	6.764897788164313E-4	DESIGN
if we are inside a new result() but not inside a nested function	WITHOUT_CLASSIFICATION	0.9998966702411423	WITHOUT_CLASSIFICATION	1.0332975885774674E-4	DESIGN
special case	WITHOUT_CLASSIFICATION	0.9997420710211512	WITHOUT_CLASSIFICATION	2.579289788488867E-4	DESIGN
the name of an sql function	WITHOUT_CLASSIFICATION	0.9999895965106496	WITHOUT_CLASSIFICATION	1.0403489350380867E-5	DESIGN
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9976217194437916	WITHOUT_CLASSIFICATION	0.002378280556208397	DESIGN
this is basically a copy/paste of orderbyparser might be worth refactoring	WITHOUT_CLASSIFICATION	0.8144217970352826	DESIGN	0.18557820296471736	WITHOUT_CLASSIFICATION
select p from p in class eg.person group by p.name p.address p	WITHOUT_CLASSIFICATION	0.9989374840450216	WITHOUT_CLASSIFICATION	0.0010625159549783544	DESIGN
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9970872562503038	WITHOUT_CLASSIFICATION	0.002912743749696148	DESIGN
register collection role	WITHOUT_CLASSIFICATION	0.9955907105937045	WITHOUT_CLASSIFICATION	0.004409289406295477	DESIGN
the keyword used to specify an identity column if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9995976235380398	WITHOUT_CLASSIFICATION	4.0237646196019994E-4	DESIGN
.getelementpropertymapping()	WITHOUT_CLASSIFICATION	0.999125213654425	WITHOUT_CLASSIFICATION	8.74786345574921E-4	DESIGN
crossjoins.add(name)	WITHOUT_CLASSIFICATION	0.999514050864903	WITHOUT_CLASSIFICATION	4.859491350970499E-4	DESIGN
ie no select clause in hql	WITHOUT_CLASSIFICATION	0.999832913691356	WITHOUT_CLASSIFICATION	1.6708630864395492E-4	DESIGN
initialize the set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9991943465050427	WITHOUT_CLASSIFICATION	8.056534949573262E-4	DESIGN
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999439107329884	WITHOUT_CLASSIFICATION	5.608926701156959E-5	DESIGN
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.999810351231844	WITHOUT_CLASSIFICATION	1.896487681558706E-4	DESIGN
return the concrete type or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9994887857670812	WITHOUT_CLASSIFICATION	5.112142329188159E-4	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.999514050864903	WITHOUT_CLASSIFICATION	4.859491350970499E-4	DESIGN
q.addcollection(collectionname collectionrole)	WITHOUT_CLASSIFICATION	0.9995487121138841	WITHOUT_CLASSIFICATION	4.512878861158206E-4	DESIGN
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9794783888616045	WITHOUT_CLASSIFICATION	0.020521611138395547	DESIGN
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9994689991744174	WITHOUT_CLASSIFICATION	5.310008255825E-4	DESIGN
unfortunately this stuff can't be cached because it is per-invocation not constant for the querytranslator instance	WITHOUT_CLASSIFICATION	0.9999646629183369	WITHOUT_CLASSIFICATION	3.533708166315826E-5	DESIGN
this is the legacy behaviour for hql queries	WITHOUT_CLASSIFICATION	0.9989825583883223	WITHOUT_CLASSIFICATION	0.001017441611677812	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9986149158924487	WITHOUT_CLASSIFICATION	0.0013850841075512697	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9986149158924487	WITHOUT_CLASSIFICATION	0.0013850841075512697	DESIGN
we have the form trim(trimsource) so we trim leading and trailing spaces early exit!!!!	WITHOUT_CLASSIFICATION	0.9998405131048288	WITHOUT_CLASSIFICATION	1.5948689517112882E-4	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9986149158924487	WITHOUT_CLASSIFICATION	0.0013850841075512697	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9986149158924487	WITHOUT_CLASSIFICATION	0.0013850841075512697	DESIGN
need this since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9998159511886368	WITHOUT_CLASSIFICATION	1.840488113631738E-4	DESIGN
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999994542084065	WITHOUT_CLASSIFICATION	5.457915934417283E-7	DESIGN
expressionterminators.add("") deliberately excluded	WITHOUT_CLASSIFICATION	0.9997249387004321	WITHOUT_CLASSIFICATION	2.7506129956793E-4	DESIGN
expressionopeners.add("") deliberately excluded	WITHOUT_CLASSIFICATION	0.9997249387004321	WITHOUT_CLASSIFICATION	2.7506129956793E-4	DESIGN
we have the form trim(from trimsource). this is functionally equivalent to trim(trimsource) early exit!!!!	WITHOUT_CLASSIFICATION	0.997891991519572	WITHOUT_CLASSIFICATION	0.002108008480427906	DESIGN
otherwise a trim-specification and/or a trim-character have been specified we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9973607774731178	WITHOUT_CLASSIFICATION	0.002639222526882201	DESIGN
inside a between and expression	WITHOUT_CLASSIFICATION	0.9988395439036363	WITHOUT_CLASSIFICATION	0.0011604560963636354	DESIGN
were an odd or even number of nots encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999980693048699	WITHOUT_CLASSIFICATION	1.9306951300877402E-6	DESIGN
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9987694244093468	WITHOUT_CLASSIFICATION	0.0012305755906532533	DESIGN
cope with []	WITHOUT_CLASSIFICATION	0.9977424241240903	WITHOUT_CLASSIFICATION	0.002257575875909772	DESIGN
cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9996782057694874	WITHOUT_CLASSIFICATION	3.217942305125929E-4	DESIGN
note early return	WITHOUT_CLASSIFICATION	0.9981322445746644	WITHOUT_CLASSIFICATION	0.0018677554253356387	DESIGN
cope with a subselect	WITHOUT_CLASSIFICATION	0.9947857236742451	WITHOUT_CLASSIFICATION	0.005214276325754923	DESIGN
cope with special cases of and not ()	WITHOUT_CLASSIFICATION	0.9999860936055381	WITHOUT_CLASSIFICATION	1.3906394461823733E-5	DESIGN
close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999873819703179	WITHOUT_CLASSIFICATION	1.2618029682015616E-5	DESIGN
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9943904677257458	WITHOUT_CLASSIFICATION	0.005609532274254116	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999917576056783	WITHOUT_CLASSIFICATION	8.242394321724338E-6	DESIGN
process a token mapping oo path expressions to sql expressions	WITHOUT_CLASSIFICATION	0.9999629785455333	WITHOUT_CLASSIFICATION	3.702145446676331E-5	DESIGN
open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9974884956712424	WITHOUT_CLASSIFICATION	0.002511504328757619	DESIGN
cope with special cases of and not )	WITHOUT_CLASSIFICATION	0.9925290481276056	WITHOUT_CLASSIFICATION	0.007470951872394443	DESIGN
the next one up must also be	WITHOUT_CLASSIFICATION	0.9980364012772435	WITHOUT_CLASSIFICATION	0.0019635987227564536	DESIGN
add any joins	WITHOUT_CLASSIFICATION	0.9996346033051114	WITHOUT_CLASSIFICATION	3.653966948884549E-4	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999917576056783	WITHOUT_CLASSIFICATION	8.242394321724338E-6	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9993307144513295	WITHOUT_CLASSIFICATION	6.692855486704797E-4	DESIGN
path expression	WITHOUT_CLASSIFICATION	0.9999417265574346	WITHOUT_CLASSIFICATION	5.8273442565293294E-5	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999885304516636	WITHOUT_CLASSIFICATION	1.1469548336343446E-5	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999133510340192	WITHOUT_CLASSIFICATION	8.664896598076853E-5	DESIGN
anything else	WITHOUT_CLASSIFICATION	0.9999473247868811	WITHOUT_CLASSIFICATION	5.267521311890177E-5	DESIGN
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999604424746659	WITHOUT_CLASSIFICATION	3.955752533412798E-5	DESIGN
careful with this!	WITHOUT_CLASSIFICATION	0.9987352860745939	WITHOUT_CLASSIFICATION	0.0012647139254060296	DESIGN
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.999825228472994	WITHOUT_CLASSIFICATION	1.7477152700603495E-4	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999804266952137	WITHOUT_CLASSIFICATION	1.9573304786278742E-5	DESIGN
notice no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999848874940871	WITHOUT_CLASSIFICATION	1.5112505913026438E-5	DESIGN
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999091554255757	WITHOUT_CLASSIFICATION	9.084457442423833E-5	DESIGN
start by looking for hql keywords	WITHOUT_CLASSIFICATION	0.9998842659638474	WITHOUT_CLASSIFICATION	1.1573403615263542E-4	DESIGN
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9976268775607663	WITHOUT_CLASSIFICATION	0.00237312243923371	DESIGN
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999199512309613	WITHOUT_CLASSIFICATION	8.004876903867687E-5	DESIGN
now anything that is not a hql keyword	WITHOUT_CLASSIFICATION	0.9993016227091064	WITHOUT_CLASSIFICATION	6.983772908935527E-4	DESIGN
process the "old" hql style where aliases appear _first_ ie. using the in or in class constructions	WITHOUT_CLASSIFICATION	0.9999775279331498	WITHOUT_CLASSIFICATION	2.247206685027267E-5	DESIGN
treat it as a classname	WITHOUT_CLASSIFICATION	0.9990743237746386	WITHOUT_CLASSIFICATION	9.256762253614298E-4	DESIGN
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9998618047546707	WITHOUT_CLASSIFICATION	1.3819524532923542E-4	DESIGN
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9995424829726473	WITHOUT_CLASSIFICATION	4.575170273526803E-4	DESIGN
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9998894592142803	WITHOUT_CLASSIFICATION	1.105407857196512E-4	DESIGN
allow odmg oql style from person p p.cars c	WITHOUT_CLASSIFICATION	0.9997871696832807	WITHOUT_CLASSIFICATION	2.1283031671927058E-4	DESIGN
handle quoted strings	WITHOUT_CLASSIFICATION	0.9971152300271	WITHOUT_CLASSIFICATION	0.00288476997289996	DESIGN
object insertions updates and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999970069932523	WITHOUT_CLASSIFICATION	2.993006747661784E-6	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999804266952137	WITHOUT_CLASSIFICATION	1.9573304786278742E-5	DESIGN
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999387002759325	WITHOUT_CLASSIFICATION	6.129972406756485E-5	DESIGN
do replacements	WITHOUT_CLASSIFICATION	0.9990947743807698	WITHOUT_CLASSIFICATION	9.052256192302589E-4	DESIGN
handle hql2 collection syntax	WITHOUT_CLASSIFICATION	0.9977165403193334	WITHOUT_CLASSIFICATION	0.0022834596806665013	DESIGN
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9983819095476788	WITHOUT_CLASSIFICATION	0.0016180904523212377	DESIGN
abstractselectingdelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998993914330049	WITHOUT_CLASSIFICATION	1.0060856699508472E-4	DESIGN
hilo params	WITHOUT_CLASSIFICATION	0.9995430433892768	WITHOUT_CLASSIFICATION	4.569566107232275E-4	DESIGN
sql = query	WITHOUT_CLASSIFICATION	0.99998420351424	WITHOUT_CLASSIFICATION	1.5796485759973274E-5	DESIGN
performance opt	WITHOUT_CLASSIFICATION	0.9987003249882588	WITHOUT_CLASSIFICATION	0.0012996750117412316	DESIGN
sql = update	WITHOUT_CLASSIFICATION	0.999982015361977	WITHOUT_CLASSIFICATION	1.7984638023048035E-5	DESIGN
hilo config	WITHOUT_CLASSIFICATION	0.9996744202556891	WITHOUT_CLASSIFICATION	3.2557974431086175E-4	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999694785586298	WITHOUT_CLASSIFICATION	3.0521441370187016E-5	DESIGN
don't allow comments on these insert statements as comments totally blow up the oracle getgeneratedkeys "support" (	WITHOUT_CLASSIFICATION	0.9999691617547876	WITHOUT_CLASSIFICATION	3.083824521243142E-5	DESIGN
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.998012121232322	WITHOUT_CLASSIFICATION	0.0019878787676781157	DESIGN
throw new identifiergenerationexception("save associated object first or disable cascade for inverse association")	WITHOUT_CLASSIFICATION	0.9999836517584557	WITHOUT_CLASSIFICATION	1.634824154422738E-5	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9994086421078932	WITHOUT_CLASSIFICATION	5.91357892106848E-4	DESIGN
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.999833518286391	WITHOUT_CLASSIFICATION	1.6648171360907302E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9996357567988668	WITHOUT_CLASSIFICATION	3.6424320113314165E-4	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999694785586298	WITHOUT_CLASSIFICATION	3.0521441370187016E-5	DESIGN
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9986896010392451	WITHOUT_CLASSIFICATION	0.0013103989607549148	DESIGN
column and table should be renamed but it would break the public api	WITHOUT_CLASSIFICATION	0.9736496907949218	WITHOUT_CLASSIFICATION	0.02635030920507811	DESIGN
loaded entity instances by entitykey	WITHOUT_CLASSIFICATION	0.9999169025900904	WITHOUT_CLASSIFICATION	8.309740990966762E-5	DESIGN
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9994590034787859	WITHOUT_CLASSIFICATION	5.409965212141284E-4	DESIGN
the default	WITHOUT_CLASSIFICATION	0.9998847453533214	WITHOUT_CLASSIFICATION	1.1525464667863948E-4	DESIGN
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence	WITHOUT_CLASSIFICATION	0.9990513842324189	WITHOUT_CLASSIFICATION	9.486157675811492E-4	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9994086421078932	WITHOUT_CLASSIFICATION	5.91357892106848E-4	DESIGN
identity map of collectionentry instances by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999832985060225	WITHOUT_CLASSIFICATION	1.6701493977477044E-5	DESIGN
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999901756503952	WITHOUT_CLASSIFICATION	9.824349604743282E-6	DESIGN
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999614754930697	WITHOUT_CLASSIFICATION	3.852450693020915E-5	DESIGN
configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997367098083297	WITHOUT_CLASSIFICATION	2.632901916702671E-4	DESIGN
identifiergenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997074460630375	WITHOUT_CLASSIFICATION	2.9255393696243356E-4	DESIGN
persistentidentifiergenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997074460630375	WITHOUT_CLASSIFICATION	2.9255393696243356E-4	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9998812917188914	WITHOUT_CLASSIFICATION	1.18708281108582E-4	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9998812917188914	WITHOUT_CLASSIFICATION	1.18708281108582E-4	DESIGN
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9964584971272028	WITHOUT_CLASSIFICATION	0.0035415028727971837	DESIGN
we just hit the last position	WITHOUT_CLASSIFICATION	0.9987363937099044	WITHOUT_CLASSIFICATION	0.0012636062900956392	DESIGN
scroll ahead	WITHOUT_CLASSIFICATION	0.9953964110152068	WITHOUT_CLASSIFICATION	0.004603588984793194	DESIGN
scroll backward	WITHOUT_CLASSIFICATION	0.9973850351749892	WITHOUT_CLASSIFICATION	0.0026149648250107446	DESIGN
we have not yet hit the last result	WITHOUT_CLASSIFICATION	0.9998846499890486	WITHOUT_CLASSIFICATION	1.1535001095135538E-4	DESIGN
constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99802238115303	WITHOUT_CLASSIFICATION	0.001977618846970075	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997815659505391	WITHOUT_CLASSIFICATION	2.1843404946085437E-4	DESIGN
criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999135474521449	WITHOUT_CLASSIFICATION	8.645254785509468E-5	DESIGN
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9996568781847642	WITHOUT_CLASSIFICATION	3.431218152357538E-4	DESIGN
inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996333916737018	WITHOUT_CLASSIFICATION	3.6660832629827907E-4	DESIGN
constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99802238115303	WITHOUT_CLASSIFICATION	0.001977618846970075	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997815659505391	WITHOUT_CLASSIFICATION	2.1843404946085437E-4	DESIGN
criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999135474521449	WITHOUT_CLASSIFICATION	8.645254785509468E-5	DESIGN
caches	WITHOUT_CLASSIFICATION	0.9997098082241783	WITHOUT_CLASSIFICATION	2.901917758216636E-4	DESIGN
generators	WITHOUT_CLASSIFICATION	0.9996695162880856	WITHOUT_CLASSIFICATION	3.304837119143956E-4	DESIGN
cache region is defined by the root-class in the hierarchy	WITHOUT_CLASSIFICATION	0.9999020949577052	WITHOUT_CLASSIFICATION	9.790504229485983E-5	DESIGN
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9996673972089394	WITHOUT_CLASSIFICATION	3.326027910607178E-4	DESIGN
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9998838654936814	WITHOUT_CLASSIFICATION	1.1613450631863373E-4	DESIGN
if we get here it is possible that we have a proxy 'in the way' of the merge map resolution note decided to put this here rather than in the above loop as i was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9262922418844536	WITHOUT_CLASSIFICATION	0.07370775811554639	DESIGN
jndi + serialization	WITHOUT_CLASSIFICATION	0.9999113265336705	WITHOUT_CLASSIFICATION	8.867346632937039E-5	DESIGN
checking for named queries	WITHOUT_CLASSIFICATION	0.7213397205529077	WITHOUT_CLASSIFICATION	0.27866027944709215	DESIGN
stats	WITHOUT_CLASSIFICATION	0.999689579755304	WITHOUT_CLASSIFICATION	3.104202446959329E-4	DESIGN
entitynotfounddelegate	WITHOUT_CLASSIFICATION	0.999125213654425	WITHOUT_CLASSIFICATION	8.74786345574921E-4	DESIGN
check named hql queries	WITHOUT_CLASSIFICATION	0.9986662861209391	WITHOUT_CLASSIFICATION	0.0013337138790608953	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.5436010458560627	WITHOUT_CLASSIFICATION	0.45639895414393744	DESIGN
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9927183891358318	WITHOUT_CLASSIFICATION	0.007281610864168344	DESIGN
from javax.naming.referenceable	WITHOUT_CLASSIFICATION	0.9992588268479361	WITHOUT_CLASSIFICATION	7.411731520638891E-4	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999586644294882	WITHOUT_CLASSIFICATION	4.1335570511809246E-5	DESIGN
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9988525894472479	WITHOUT_CLASSIFICATION	0.0011474105527521316	DESIGN
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999500785738472	WITHOUT_CLASSIFICATION	4.992142615273468E-5	DESIGN
note early exit	WITHOUT_CLASSIFICATION	0.9992365326179506	WITHOUT_CLASSIFICATION	7.634673820493054E-4	DESIGN
for backward-compatability	WITHOUT_CLASSIFICATION	0.9991843532995052	WITHOUT_CLASSIFICATION	8.15646700494826E-4	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9921091540561229	WITHOUT_CLASSIFICATION	0.00789084594387701	DESIGN
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9998275579608201	WITHOUT_CLASSIFICATION	1.7244203917978284E-4	DESIGN
in case we were deserialized in a different jvm look for an instance with the same name (alternatively we could do an actual jndi lookup here.)	WITHOUT_CLASSIFICATION	0.9368514413505051	WITHOUT_CLASSIFICATION	0.06314855864949484	DESIGN
must add to jndi _after_ adding to hashmaps because some jndi servers use serialization	WITHOUT_CLASSIFICATION	0.9995716583461899	WITHOUT_CLASSIFICATION	4.283416538102018E-4	DESIGN
make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9846963152148316	WITHOUT_CLASSIFICATION	0.0153036847851684	DESIGN
for each of the defined parameters make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999974804454805	WITHOUT_CLASSIFICATION	2.5195545194928367E-6	DESIGN
we never need to apply locks to the sql	WITHOUT_CLASSIFICATION	0.998587775927832	WITHOUT_CLASSIFICATION	0.0014122240721680592	DESIGN
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999567220231224	WITHOUT_CLASSIFICATION	4.3277976877593354E-4	DESIGN
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996821495835373	WITHOUT_CLASSIFICATION	3.1785041646268677E-4	DESIGN
during deserialization we need to reconnect all proxies and collections to this session as well as the entityentry and collectionentry instances these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.8448461019389762	WITHOUT_CLASSIFICATION	0.15515389806102378	DESIGN
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997435288186717	WITHOUT_CLASSIFICATION	2.564711813283055E-4	DESIGN
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999474081227224	WITHOUT_CLASSIFICATION	5.25918772776465E-5	DESIGN
final boolean forcecacherefresh	WITHOUT_CLASSIFICATION	0.9998931228022602	WITHOUT_CLASSIFICATION	1.068771977398248E-4	DESIGN
final boolean forcecacherefresh	WITHOUT_CLASSIFICATION	0.9998931228022602	WITHOUT_CLASSIFICATION	1.068771977398248E-4	DESIGN
first try to load it from the temp pc associated to this ss	WITHOUT_CLASSIFICATION	0.9997234487055688	WITHOUT_CLASSIFICATION	2.7655129443124836E-4	DESIGN
if the metadata allowed proxy creation and caller did not request forceful eager loading generate a proxy	WITHOUT_CLASSIFICATION	0.9999987448863079	WITHOUT_CLASSIFICATION	1.2551136921914874E-6	DESIGN
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999190483205576	WITHOUT_CLASSIFICATION	8.095167944246353E-5	DESIGN
/	WITHOUT_CLASSIFICATION	0.9999015662196771	WITHOUT_CLASSIFICATION	9.843378032287948E-5	DESIGN
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9984742257765745	WITHOUT_CLASSIFICATION	0.0015257742234255258	DESIGN
after setting values to object entitymode	WITHOUT_CLASSIFICATION	0.999926549256793	WITHOUT_CLASSIFICATION	7.345074320704809E-5	DESIGN
for ejb3	WITHOUT_CLASSIFICATION	0.9996918698797682	WITHOUT_CLASSIFICATION	3.0813012023176643E-4	DESIGN
just ignore	WITHOUT_CLASSIFICATION	0.9998642505543867	WITHOUT_CLASSIFICATION	1.357494456133766E-4	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9962822697823139	WITHOUT_CLASSIFICATION	0.0037177302176860313	DESIGN
saveorupdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998524665287916	WITHOUT_CLASSIFICATION	1.475334712084623E-4	DESIGN
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998601833221882	WITHOUT_CLASSIFICATION	1.398166778118148E-4	DESIGN
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998524665287916	WITHOUT_CLASSIFICATION	1.475334712084623E-4	DESIGN
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998524665287916	WITHOUT_CLASSIFICATION	1.475334712084623E-4	DESIGN
persistonflush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998524665287916	WITHOUT_CLASSIFICATION	1.475334712084623E-4	DESIGN
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998529811002593	WITHOUT_CLASSIFICATION	1.4701889974066368E-4	DESIGN
saveorupdatecopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998524665287916	WITHOUT_CLASSIFICATION	1.475334712084623E-4	DESIGN
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998495899990498	WITHOUT_CLASSIFICATION	1.5041000095029086E-4	DESIGN
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998524665287916	WITHOUT_CLASSIFICATION	1.475334712084623E-4	DESIGN
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998524665287916	WITHOUT_CLASSIFICATION	1.475334712084623E-4	DESIGN
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998524665287916	WITHOUT_CLASSIFICATION	1.475334712084623E-4	DESIGN
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9978101417858105	WITHOUT_CLASSIFICATION	0.0021898582141895643	DESIGN
this is an internal error of some sort	WITHOUT_CLASSIFICATION	0.9945986871511391	WITHOUT_CLASSIFICATION	0.005401312848860917	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9666474591624239	WITHOUT_CLASSIFICATION	0.033352540837576106	DESIGN
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999789767592033	WITHOUT_CLASSIFICATION	2.1023240796624395E-5	DESIGN
if it was previously unreferenced we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999462445276492	WITHOUT_CLASSIFICATION	5.375547235073285E-5	DESIGN
not for internal use	WITHOUT_CLASSIFICATION	0.9963979126554168	WITHOUT_CLASSIFICATION	0.0036020873445833123	DESIGN
otherwise we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9982562545940092	WITHOUT_CLASSIFICATION	0.0017437454059906704	DESIGN
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9483926636954976	WITHOUT_CLASSIFICATION	0.05160733630450239	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9666474591624239	WITHOUT_CLASSIFICATION	0.033352540837576106	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9666474591624239	WITHOUT_CLASSIFICATION	0.033352540837576106	DESIGN
if it is initialized see if the underlying instance is contained since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9940017658251968	WITHOUT_CLASSIFICATION	0.005998234174803158	DESIGN
basically just an adapted copy of find(criteriaimpl)	WITHOUT_CLASSIFICATION	0.9969977541925404	WITHOUT_CLASSIFICATION	0.0030022458074595504	DESIGN
it is possible for this method to be called during flush processing so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9868403050960345	WITHOUT_CLASSIFICATION	0.013159694903965541	DESIGN
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9988097635261621	WITHOUT_CLASSIFICATION	0.0011902364738378983	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.999927327176818	WITHOUT_CLASSIFICATION	7.267282318199849E-5	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9921091540561229	WITHOUT_CLASSIFICATION	0.00789084594387701	DESIGN
we need to writeobject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9990712249555231	WITHOUT_CLASSIFICATION	9.287750444769338E-4	DESIGN
the old-time stand-by	WITHOUT_CLASSIFICATION	0.9995445613240415	WITHOUT_CLASSIFICATION	4.554386759585607E-4	DESIGN
parameter bind values	WITHOUT_CLASSIFICATION	0.9992038422712595	WITHOUT_CLASSIFICATION	7.961577287406289E-4	DESIGN
parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9923841056936024	WITHOUT_CLASSIFICATION	0.0076158943063976145	DESIGN
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999409034220745	WITHOUT_CLASSIFICATION	5.909657792543211E-5	DESIGN
execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991178861437258	WITHOUT_CLASSIFICATION	8.821138562743003E-4	DESIGN
we have a cglib enhanced entity	WITHOUT_CLASSIFICATION	0.9991831577487448	WITHOUT_CLASSIFICATION	8.168422512551444E-4	DESIGN
we have a cglib enhanced entity	WITHOUT_CLASSIFICATION	0.9991831577487448	WITHOUT_CLASSIFICATION	8.168422512551444E-4	DESIGN
we have a javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9991831577487448	WITHOUT_CLASSIFICATION	8.168422512551444E-4	DESIGN
we have a javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9991831577487448	WITHOUT_CLASSIFICATION	8.168422512551444E-4	DESIGN
fieldinterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998993914330049	WITHOUT_CLASSIFICATION	1.0060856699508472E-4	DESIGN
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9953181688855899	WITHOUT_CLASSIFICATION	0.004681831114410013	DESIGN
let's assume that there is only one lazy fetch group for now!	WITHOUT_CLASSIFICATION	0.9999977176351947	WITHOUT_CLASSIFICATION	2.2823648051946576E-6	DESIGN
fieldhandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998993914330049	WITHOUT_CLASSIFICATION	1.0060856699508472E-4	DESIGN
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9623132651516008	WITHOUT_CLASSIFICATION	0.037686734848399246	DESIGN
should probably no-op commit/rollback here at least in jta scenarios	WITHOUT_CLASSIFICATION	0.830421300711049	WITHOUT_CLASSIFICATION	0.169578699288951	DESIGN
base expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997771822010204	WITHOUT_CLASSIFICATION	2.2281779897948936E-4	DESIGN
various expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998837472176321	WITHOUT_CLASSIFICATION	1.1625278236784988E-4	DESIGN
explicitly perform no checking	WITHOUT_CLASSIFICATION	0.6954896068919839	DESIGN	0.30451039310801614	WITHOUT_CLASSIFICATION
used from testsuite	WITHOUT_CLASSIFICATION	0.893054805624821	WITHOUT_CLASSIFICATION	0.10694519437517894	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9998727332059049	WITHOUT_CLASSIFICATION	1.2726679409511062E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.998999143842101	WITHOUT_CLASSIFICATION	0.0010008561578989529	DESIGN
register synch stats.connect()	WITHOUT_CLASSIFICATION	0.9993023847460085	WITHOUT_CLASSIFICATION	6.976152539914435E-4	DESIGN
noncritical swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9988473660095332	WITHOUT_CLASSIFICATION	0.0011526339904668517	DESIGN
calls executebatch()	WITHOUT_CLASSIFICATION	0.9986898576262895	WITHOUT_CLASSIFICATION	0.0013101423737104509	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999765067888454	WITHOUT_CLASSIFICATION	2.3493211154484536E-5	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999765067888454	WITHOUT_CLASSIFICATION	2.3493211154484536E-5	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999765067888454	WITHOUT_CLASSIFICATION	2.3493211154484536E-5	DESIGN
sybase driver (jconnect) throwing npe here in certain cases but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9998143160619639	WITHOUT_CLASSIFICATION	1.8568393803604214E-4	DESIGN
see explanation above	WITHOUT_CLASSIFICATION	0.9996567120615847	WITHOUT_CLASSIFICATION	3.432879384153547E-4	DESIGN
if we are in the process of releasing no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.8351201278182608	WITHOUT_CLASSIFICATION	0.1648798721817392	DESIGN
early exit!!!!	WITHOUT_CLASSIFICATION	0.9996930279128784	WITHOUT_CLASSIFICATION	3.069720871215428E-4	DESIGN
resultset impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999349272518334	WITHOUT_CLASSIFICATION	6.507274816661136E-5	DESIGN
resultset impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999349272518334	WITHOUT_CLASSIFICATION	6.507274816661136E-5	DESIGN
refer to comment in statefulpersistencecontext.addcollection()	WITHOUT_CLASSIFICATION	0.999944192917948	WITHOUT_CLASSIFICATION	5.5807082052109223E-5	DESIGN
connectionmanager.callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997074460630375	WITHOUT_CLASSIFICATION	2.9255393696243356E-4	DESIGN
note success = false because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.999997795279426	WITHOUT_CLASSIFICATION	2.2047205740057934E-6	DESIGN
we already have a callback registered either a local (org.hibernate.transaction) transaction has accepted callback responsibilities or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9998917539297549	WITHOUT_CLASSIFICATION	1.0824607024514723E-4	DESIGN
the configured transaction-factory says it only supports local callback mode so no sense attempting to register a jta synchronization	WITHOUT_CLASSIFICATION	0.9795359979169227	WITHOUT_CLASSIFICATION	0.020464002083077297	DESIGN
transactions marked for rollback-only cause some tm impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9962040341590035	WITHOUT_CLASSIFICATION	0.00379596584099653	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996416413798198	WITHOUT_CLASSIFICATION	3.583586201802189E-4	DESIGN
postinitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999610634250267	WITHOUT_CLASSIFICATION	3.893657497344276E-5	DESIGN
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9998712861420881	WITHOUT_CLASSIFICATION	1.287138579118488E-4	DESIGN
todo for 4.0 private static final logger log = loggerfactory.getlogger( sqlstatementlogger.class ) this is the legacy logging 'category'	WITHOUT_CLASSIFICATION	0.9056396794771904	WITHOUT_CLASSIFICATION	0.09436032052280968	DESIGN
note that for sequential scrolling we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9931596833651197	WITHOUT_CLASSIFICATION	0.00684031663488023	DESIGN
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9988465098453095	WITHOUT_CLASSIFICATION	0.0011534901546905018	DESIGN
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9986972509915105	WITHOUT_CLASSIFICATION	0.0013027490084894628	DESIGN
position cursor to the last row	WITHOUT_CLASSIFICATION	0.999947876231959	WITHOUT_CLASSIFICATION	5.2123768040993186E-5	DESIGN
sequentially read the result set in reverse until we recognize a change in the key value. at that point we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999998864122686	WITHOUT_CLASSIFICATION	1.1358773144081675E-7	DESIGN
read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999427196438	WITHOUT_CLASSIFICATION	5.728035634078066E-8	DESIGN
finally read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999998088761246	WITHOUT_CLASSIFICATION	1.911238753703139E-7	DESIGN
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999987885437384	WITHOUT_CLASSIFICATION	1.2114562616873816E-6	DESIGN
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9961908131004575	WITHOUT_CLASSIFICATION	0.0038091868995423993	DESIGN
this is equivalent to the old behavior	WITHOUT_CLASSIFICATION	0.9998645400005436	WITHOUT_CLASSIFICATION	1.3545999945631178E-4	DESIGN
if null owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999751067827489	WITHOUT_CLASSIFICATION	2.48932172511108E-5	DESIGN
final string querystring	WITHOUT_CLASSIFICATION	0.9997404011506646	WITHOUT_CLASSIFICATION	2.595988493353602E-4	DESIGN
if it was a reference to self don't need to nullify unless we are using native id generation in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999632633015636	WITHOUT_CLASSIFICATION	3.673669843632134E-5	DESIGN
end of array start filling again from start	WITHOUT_CLASSIFICATION	0.9999608100269768	WITHOUT_CLASSIFICATION	3.918997302316663E-5	DESIGN
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to persistentcollection#endread) we scan the internal loadingcollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endread processing.	WITHOUT_CLASSIFICATION	0.9991980757140349	WITHOUT_CLASSIFICATION	8.019242859652607E-4	DESIGN
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999581451540775	WITHOUT_CLASSIFICATION	4.185484592242077E-5	DESIGN
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9990196730854202	WITHOUT_CLASSIFICATION	9.80326914579831E-4	DESIGN
first we need to suspend any current jta transaction and obtain a jdbc connection	WITHOUT_CLASSIFICATION	0.9999039986890862	WITHOUT_CLASSIFICATION	9.600131091380258E-5	DESIGN
getresultlist(results)	WITHOUT_CLASSIFICATION	0.999125213654425	WITHOUT_CLASSIFICATION	8.74786345574921E-4	DESIGN
if we only returned one entity query by key is more efficient	WITHOUT_CLASSIFICATION	0.999084679708241	WITHOUT_CLASSIFICATION	9.15320291759022E-4	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9989709482766411	WITHOUT_CLASSIFICATION	0.0010290517233588008	DESIGN
handle empty collection	WITHOUT_CLASSIFICATION	0.9919618488864974	WITHOUT_CLASSIFICATION	0.008038151113502617	DESIGN
else no collection element but also no owner	WITHOUT_CLASSIFICATION	0.9999969008846931	WITHOUT_CLASSIFICATION	3.099115307038884E-6	DESIGN
handle empty collections	WITHOUT_CLASSIFICATION	0.9953382078742687	WITHOUT_CLASSIFICATION	0.0046617921257312055	DESIGN
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9963300879776108	WITHOUT_CLASSIFICATION	0.00366991202238916	DESIGN
validate() instances of validatable	WITHOUT_CLASSIFICATION	0.9997228033510258	WITHOUT_CLASSIFICATION	2.7719664897420213E-4	DESIGN
if we know there is exactly 1 row we can skip. it would be great if we could _always_ skip this it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.7032104661636173	WITHOUT_CLASSIFICATION	0.29678953383638285	DESIGN
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9968793730849945	WITHOUT_CLASSIFICATION	0.003120626915005435	DESIGN
null version means the object is in the process of being loaded somewhere else in the resultset	WITHOUT_CLASSIFICATION	0.9999259984848524	WITHOUT_CLASSIFICATION	7.400151514763012E-5	DESIGN
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9772570222557594	WITHOUT_CLASSIFICATION	0.02274297774424061	DESIGN
use the id passed in	WITHOUT_CLASSIFICATION	0.9996929728247549	WITHOUT_CLASSIFICATION	3.0702717524503693E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9997983876276735	WITHOUT_CLASSIFICATION	2.016123723264378E-4	DESIGN
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9995942707114776	WITHOUT_CLASSIFICATION	4.057292885224218E-4	DESIGN
no point doing this if none was requested	WITHOUT_CLASSIFICATION	0.99995870412832	WITHOUT_CLASSIFICATION	4.1295871679961566E-5	DESIGN
if the object is already loaded return the loaded one	WITHOUT_CLASSIFICATION	0.9999090581260492	WITHOUT_CLASSIFICATION	9.094187395079248E-5	DESIGN
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9996788731566958	WITHOUT_CLASSIFICATION	3.211268433042584E-4	DESIGN
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9995786432017281	WITHOUT_CLASSIFICATION	4.21356798271931E-4	DESIGN
the load() which takes an entity does not pass an entityname	WITHOUT_CLASSIFICATION	0.9999560387234362	WITHOUT_CLASSIFICATION	4.3961276563762175E-5	DESIGN
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9983174140152075	WITHOUT_CLASSIFICATION	0.0016825859847924575	DESIGN
look for a proxy	WITHOUT_CLASSIFICATION	0.9997611742720204	WITHOUT_CLASSIFICATION	2.3882572797960085E-4	DESIGN
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.999418953541272	WITHOUT_CLASSIFICATION	5.810464587280103E-4	DESIGN
its the given optional object	WITHOUT_CLASSIFICATION	0.9999017264790643	WITHOUT_CLASSIFICATION	9.827352093562459E-5	DESIGN
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9981333410285821	WITHOUT_CLASSIFICATION	0.0018666589714179218	DESIGN
need to hydrate it.	WITHOUT_CLASSIFICATION	0.999395683562532	WITHOUT_CLASSIFICATION	6.043164374680259E-4	DESIGN
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9965504859695795	WITHOUT_CLASSIFICATION	0.0034495140304203553	DESIGN
will be ignored using the existing entry instead	WITHOUT_CLASSIFICATION	0.9994775423102829	WITHOUT_CLASSIFICATION	5.224576897172168E-4	DESIGN
key is an entity involved with the operation performed by the listener value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999982347762509	WITHOUT_CLASSIFICATION	1.7652237489954569E-6	DESIGN
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9971678685017815	WITHOUT_CLASSIFICATION	0.0028321314982184234	DESIGN
get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9991835914065558	WITHOUT_CLASSIFICATION	8.164085934441595E-4	DESIGN
ok in normal hibernate usage to delete a detached entity jpa however forbids it thus this is a hook for hem to affect this behavior	WITHOUT_CLASSIFICATION	0.9998944105368329	WITHOUT_CLASSIFICATION	1.0558946316705866E-4	DESIGN
the entry will be removed after the flush and will no longer override the stale snapshot this is now handled by removeentity() in entitydeleteaction persistencecontext.removedatabasesnapshot(key)	WITHOUT_CLASSIFICATION	0.9946307837732952	WITHOUT_CLASSIFICATION	0.005369216226704828	DESIGN
addinitializedcollection(collection persister id)	WITHOUT_CLASSIFICATION	0.9977639692545338	WITHOUT_CLASSIFICATION	0.002236030745466155	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9996956049222961	WITHOUT_CLASSIFICATION	3.0439507770384857E-4	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9996956049222961	WITHOUT_CLASSIFICATION	3.0439507770384857E-4	DESIGN
|| oj.getjoinable().consumescollectionalias()	WITHOUT_CLASSIFICATION	0.9996684094762603	WITHOUT_CLASSIFICATION	3.3159052373961796E-4	DESIGN
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9725212414914731	WITHOUT_CLASSIFICATION	0.02747875850852696	DESIGN
code to handle subclasses of topclass	WITHOUT_CLASSIFICATION	0.9984306516558289	WITHOUT_CLASSIFICATION	0.0015693483441710774	DESIGN
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999270386784216	WITHOUT_CLASSIFICATION	7.296132157838195E-5	DESIGN
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.999975047153641	WITHOUT_CLASSIFICATION	2.4952846359018793E-5	DESIGN
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.985103099745308	WITHOUT_CLASSIFICATION	0.014896900254692145	DESIGN
synchronized to avoid multi-thread access issues defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9998514109483334	WITHOUT_CLASSIFICATION	1.4858905166662567E-4	DESIGN
allows various loaders (ok mainly the queryloader ) to check whether scrolling of their result set should be allowed. by default it is allowed.	WITHOUT_CLASSIFICATION	0.9997812830827254	WITHOUT_CLASSIFICATION	2.1871691727451176E-4	DESIGN
before adding to collection!	WITHOUT_CLASSIFICATION	0.999510678029307	WITHOUT_CLASSIFICATION	4.89321970692952E-4	DESIGN
if the current depth is 0 the root thing being loaded is the many-to-many collection itself. here it is alright to use an inner join	WITHOUT_CLASSIFICATION	0.9999879474148672	WITHOUT_CLASSIFICATION	1.2052585132915112E-5	DESIGN
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999998815778938	WITHOUT_CLASSIFICATION	1.1842210629803938E-7	DESIGN
simple because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element	WITHOUT_CLASSIFICATION	0.9999872358612988	WITHOUT_CLASSIFICATION	1.2764138701101831E-5	DESIGN
a composite key	WITHOUT_CLASSIFICATION	0.9982586383195975	WITHOUT_CLASSIFICATION	0.0017413616804024944	DESIGN
if no batch use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9998330748858043	WITHOUT_CLASSIFICATION	1.6692511419579475E-4	DESIGN
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9581789110797259	WITHOUT_CLASSIFICATION	0.04182108892027416	DESIGN
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9993521477724973	WITHOUT_CLASSIFICATION	6.478522275027281E-4	DESIGN
&& etype.isreferencetoprimarykey()	WITHOUT_CLASSIFICATION	0.9990321333115291	WITHOUT_CLASSIFICATION	9.678666884709303E-4	DESIGN
it might still need to apply a collection ordering based on a many-to-many defined order-by	WITHOUT_CLASSIFICATION	0.8036910498486239	WITHOUT_CLASSIFICATION	0.19630895015137603	DESIGN
if a composite key use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching todo unnecessary for databases with ansi-style joins	WITHOUT_CLASSIFICATION	0.5434182154515123	WITHOUT_CLASSIFICATION	0.4565817845484878	DESIGN
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9943417597472854	WITHOUT_CLASSIFICATION	0.005658240252714522	DESIGN
we found it	WITHOUT_CLASSIFICATION	0.9994384889096115	WITHOUT_CLASSIFICATION	5.615110903884801E-4	DESIGN
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9998985155581217	WITHOUT_CLASSIFICATION	1.014844418782681E-4	DESIGN
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9991064958375817	WITHOUT_CLASSIFICATION	8.935041624184304E-4	DESIGN
note unlike all other loaders this one is not multithreaded or cacheable!!	WITHOUT_CLASSIFICATION	0.9860933378882448	WITHOUT_CLASSIFICATION	0.01390666211175505	DESIGN
the user visible aliases which are unknown to the superclass these are not the actual "physical" sql aliases	WITHOUT_CLASSIFICATION	0.9999999046029299	WITHOUT_CLASSIFICATION	9.539707010573934E-8	DESIGN
root entity comes last	WITHOUT_CLASSIFICATION	0.9988263227288051	WITHOUT_CLASSIFICATION	0.0011736772711949247	DESIGN
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999418544648007	WITHOUT_CLASSIFICATION	5.814553519933435E-5	DESIGN
alias may be null early exit	WITHOUT_CLASSIFICATION	0.9997388183499282	WITHOUT_CLASSIFICATION	2.611816500717535E-4	DESIGN
if it is a compound path	WITHOUT_CLASSIFICATION	0.9994933266879719	WITHOUT_CLASSIFICATION	5.066733120282278E-4	DESIGN
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9995099217242572	WITHOUT_CLASSIFICATION	4.900782757426951E-4	DESIGN
if its the root criteria we are done	WITHOUT_CLASSIFICATION	0.999965652262636	WITHOUT_CLASSIFICATION	3.4347737364000914E-5	DESIGN
otherwise recurse	WITHOUT_CLASSIFICATION	0.9996536082016078	WITHOUT_CLASSIFICATION	3.463917983923171E-4	DESIGN
the criteria instance	WITHOUT_CLASSIFICATION	0.9997733971201698	WITHOUT_CLASSIFICATION	2.266028798302497E-4	DESIGN
the entity name	WITHOUT_CLASSIFICATION	0.9995051783066646	WITHOUT_CLASSIFICATION	4.948216933353361E-4	DESIGN
not found in inner query try the outer query	WITHOUT_CLASSIFICATION	0.9998652084625118	WITHOUT_CLASSIFICATION	1.347915374881705E-4	DESIGN
not found in inner query try the outer query	WITHOUT_CLASSIFICATION	0.9998652084625118	WITHOUT_CLASSIFICATION	1.347915374881705E-4	DESIGN
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999143373091698	WITHOUT_CLASSIFICATION	8.566269083021162E-5	DESIGN
should never happen i think	WITHOUT_CLASSIFICATION	0.991423250404098	WITHOUT_CLASSIFICATION	0.008576749595902086	DESIGN
detect discriminator values	WITHOUT_CLASSIFICATION	0.9997487336027286	WITHOUT_CLASSIFICATION	2.512663972712951E-4	DESIGN
convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.996518291061025	WITHOUT_CLASSIFICATION	0.0034817089389750627	DESIGN
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9998039958984168	WITHOUT_CLASSIFICATION	1.9600410158318504E-4	DESIGN
it does not refer to an alias of a projection look for a property	WITHOUT_CLASSIFICATION	0.9996875874464536	WITHOUT_CLASSIFICATION	3.1241255354641544E-4	DESIGN
otherwise this is an ordinary value.	WITHOUT_CLASSIFICATION	0.998870404705441	WITHOUT_CLASSIFICATION	0.0011295952945590123	DESIGN
currently not cachable if autodiscover types is in effect (e.g. "select ")	WITHOUT_CLASSIFICATION	0.9990150268383224	WITHOUT_CLASSIFICATION	9.849731616775649E-4	DESIGN
private final string[] sqlaliases private final string[] sqlaliassuffixes	WITHOUT_CLASSIFICATION	0.9995451258949721	WITHOUT_CLASSIFICATION	4.548741050278757E-4	DESIGN
this is only needed (afaict) for resulttransformer processing	WITHOUT_CLASSIFICATION	0.9984992092924893	WITHOUT_CLASSIFICATION	0.0015007907075107216	DESIGN
determine if the collection elements are entities	WITHOUT_CLASSIFICATION	0.9999559198067778	WITHOUT_CLASSIFICATION	4.4080193222132005E-5	DESIGN
build an array with indices equal to the total number of actual returns in the result hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999778219666184	WITHOUT_CLASSIFICATION	2.217803338162422E-5	DESIGN
replace {.} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9996809264350478	WITHOUT_CLASSIFICATION	3.190735649522292E-4	DESIGN
no additional open braces found in the string append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.999960054880274	WITHOUT_CLASSIFICATION	3.994511972612091E-5	DESIGN
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9997614187757328	WITHOUT_CLASSIFICATION	2.385812242672591E-4	DESIGN
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999863799625275	WITHOUT_CLASSIFICATION	1.3620037472541827E-5	DESIGN
passing through anything we do not know to support jdbc escape sequences hb-898	WITHOUT_CLASSIFICATION	0.99796114814968	WITHOUT_CLASSIFICATION	0.0020388518503200903	DESIGN
passing through anything we do not know to support jdbc escape sequences hb-898	WITHOUT_CLASSIFICATION	0.99796114814968	WITHOUT_CLASSIFICATION	0.0020388518503200903	DESIGN
the current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9998944843043506	WITHOUT_CLASSIFICATION	1.05515695649483E-4	DESIGN
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9984117378610189	WITHOUT_CLASSIFICATION	0.0015882621389810927	DESIGN
possibly handle something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999144228005303	WITHOUT_CLASSIFICATION	8.557719946962591E-5	DESIGN
let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9993738517515444	WITHOUT_CLASSIFICATION	6.261482484555878E-4	DESIGN
private final list persisters = new arraylist()	WITHOUT_CLASSIFICATION	0.9999082262940325	WITHOUT_CLASSIFICATION	9.177370596754343E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.998999143842101	WITHOUT_CLASSIFICATION	0.0010008561578989529	DESIGN
note early exit!	WITHOUT_CLASSIFICATION	0.9986040447679797	WITHOUT_CLASSIFICATION	0.001395955232020372	DESIGN
private final list scalartypes = new arraylist() private final list scalarcolumnaliases = new arraylist()	WITHOUT_CLASSIFICATION	0.99996481282666	WITHOUT_CLASSIFICATION	3.5187173339998395E-5	DESIGN
now process the returns	WITHOUT_CLASSIFICATION	0.9997381663780005	WITHOUT_CLASSIFICATION	2.6183362199948116E-4	DESIGN
private list collectionowneraliases = new arraylist() private list collectionaliases = new arraylist() private list collectionpersisters = new arraylist() private list collectionresults = new arraylist()	WITHOUT_CLASSIFICATION	0.9999154757178972	WITHOUT_CLASSIFICATION	8.45242821028031E-5	DESIGN
already been processed	WITHOUT_CLASSIFICATION	0.9979057936270885	WITHOUT_CLASSIFICATION	0.0020942063729114816	DESIGN
already been processed	WITHOUT_CLASSIFICATION	0.9979057936270885	WITHOUT_CLASSIFICATION	0.0020942063729114816	DESIGN
make sure the owner alias is known	WITHOUT_CLASSIFICATION	0.9999947314980641	WITHOUT_CLASSIFICATION	5.268501935957417E-6	DESIGN
first break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9831913239438363	WITHOUT_CLASSIFICATION	0.016808676056163655	DESIGN
scalarcolumnaliases.add( typereturn.getcolumnalias() ) scalartypes.add( typereturn.gettype() )	WITHOUT_CLASSIFICATION	0.9993316262540104	WITHOUT_CLASSIFICATION	6.68373745989595E-4	DESIGN
if this return's alias has not been processed yet do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9998978242955192	WITHOUT_CLASSIFICATION	1.0217570448073096E-4	DESIGN
collectionowneraliases.add( owneralias )	WITHOUT_CLASSIFICATION	0.9993316262540104	WITHOUT_CLASSIFICATION	6.68373745989595E-4	DESIGN
for merging of versioned entities we consider the version having been changed only when 1) the two version values are different and 2) the target actually represents database state! this second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999687490800171	WITHOUT_CLASSIFICATION	3.125091998303204E-5	DESIGN
this is the second pass through on a merge op so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9742322506042116	WITHOUT_CLASSIFICATION	0.02576774939578838	DESIGN
early exit	WITHOUT_CLASSIFICATION	0.9998868495165929	WITHOUT_CLASSIFICATION	1.1315048340700427E-4	DESIGN
cascade-save to collections after the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999388555140083	WITHOUT_CLASSIFICATION	6.114448599161068E-5	DESIGN
initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9968407847628047	WITHOUT_CLASSIFICATION	0.0031592152371952907	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.999069064349679	WITHOUT_CLASSIFICATION	9.30935650320982E-4	DESIGN
currently only the hibernate-supplied dbtimestamptype is supported here	WITHOUT_CLASSIFICATION	0.999392670092459	WITHOUT_CLASSIFICATION	6.073299075410208E-4	DESIGN
this is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.792913856672312	WITHOUT_CLASSIFICATION	0.20708614332768802	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9978136877633558	WITHOUT_CLASSIFICATION	0.0021863122366443	DESIGN
not so sure this is even valid subtree. but if it was it'd represent two unrelated table references	WITHOUT_CLASSIFICATION	0.9998535777661334	WITHOUT_CLASSIFICATION	1.4642223386658975E-4	DESIGN
(not (gt a b) ) => (le a b)	WITHOUT_CLASSIFICATION	0.9201073404030817	WITHOUT_CLASSIFICATION	0.07989265959691826	DESIGN
private type[] sqlresulttypes	WITHOUT_CLASSIFICATION	0.9971971637647189	WITHOUT_CLASSIFICATION	0.002802836235281104	DESIGN
include the discriminator and class-level where but not filters	WITHOUT_CLASSIFICATION	0.9999359359844108	WITHOUT_CLASSIFICATION	6.406401558926312E-5	DESIGN
sqlresulttypes = selectclause.getsqlresulttypes()	WITHOUT_CLASSIFICATION	0.9999099371022585	WITHOUT_CLASSIFICATION	9.006289774160003E-5	DESIGN
by default	WITHOUT_CLASSIFICATION	0.9999377955211072	WITHOUT_CLASSIFICATION	6.220447889281283E-5	DESIGN
this is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9951889242127826	WITHOUT_CLASSIFICATION	0.004811075787217447	DESIGN
-- loader implementation --	WITHOUT_CLASSIFICATION	0.999327040218913	WITHOUT_CLASSIFICATION	6.729597810870248E-4	DESIGN
-- loader overrides --	WITHOUT_CLASSIFICATION	0.999079475697798	WITHOUT_CLASSIFICATION	9.205243022019912E-4	DESIGN
(not (is_null a b) ) => (is_not_null a b)	WITHOUT_CLASSIFICATION	0.9571438425824627	WITHOUT_CLASSIFICATION	0.04285615741753736	DESIGN
none because its the requested lock mode not the actual!	WITHOUT_CLASSIFICATION	0.9998707264659262	WITHOUT_CLASSIFICATION	1.2927353407367922E-4	DESIGN
meant to handle dynamic instantiation queries	WITHOUT_CLASSIFICATION	0.9993138259874355	WITHOUT_CLASSIFICATION	6.861740125645608E-4	DESIGN
--- query translator methods ---	WITHOUT_CLASSIFICATION	0.9995707017896295	WITHOUT_CLASSIFICATION	4.2929821037051386E-4	DESIGN
-- implementation private methods --	WITHOUT_CLASSIFICATION	0.9963446758590359	WITHOUT_CLASSIFICATION	0.003655324140964031	DESIGN
deduplicate unique constraints sharing the same columns this is needed by hibernate annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999963280599665	WITHOUT_CLASSIFICATION	3.671940033582153E-6	DESIGN
try to find out the name of the primary key to create it as identity if the identitygenerator is used	WITHOUT_CLASSIFICATION	0.997855494736064	WITHOUT_CLASSIFICATION	0.002144505263936053	DESIGN
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9984424546471324	WITHOUT_CLASSIFICATION	0.001557545352867588	DESIGN
prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999994289526405	WITHOUT_CLASSIFICATION	5.710473596109892E-7	DESIGN
used also for generation of fk names!	WITHOUT_CLASSIFICATION	0.8616697699498768	WITHOUT_CLASSIFICATION	0.13833023005012324	DESIGN
usually useless	WITHOUT_CLASSIFICATION	0.9989374515574432	WITHOUT_CLASSIFICATION	0.0010625484425568503	DESIGN
added this caching as i noticed that gettype() is being called multiple times	WITHOUT_CLASSIFICATION	0.9917099569933773	WITHOUT_CLASSIFICATION	0.008290043006622748	DESIGN
do not add unique constraint on db not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9950734069831519	WITHOUT_CLASSIFICATION	0.004926593016848043	DESIGN
for backward compatibility disable this	WITHOUT_CLASSIFICATION	0.9986622752328871	WITHOUT_CLASSIFICATION	0.0013377247671129745	DESIGN
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9983421642232573	WITHOUT_CLASSIFICATION	0.0016578357767427303	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.998214999331076	WITHOUT_CLASSIFICATION	0.0017850006689238908	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.998214999331076	WITHOUT_CLASSIFICATION	0.0017850006689238908	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999795052209033	WITHOUT_CLASSIFICATION	2.0494779096816298E-5	DESIGN
primary key constraint	WITHOUT_CLASSIFICATION	0.9972799681451264	WITHOUT_CLASSIFICATION	0.0027200318548736657	DESIGN
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9991862937970837	WITHOUT_CLASSIFICATION	8.13706202916459E-4	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9999136802164721	WITHOUT_CLASSIFICATION	8.631978352788289E-5	DESIGN
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9932692406317251	WITHOUT_CLASSIFICATION	0.006730759368274866	DESIGN
an identifier mapper => getkey will be included in the getnonduplicatedpropertyiterator() and checked later so it needs to be excluded	WITHOUT_CLASSIFICATION	0.999368951905237	WITHOUT_CLASSIFICATION	6.310480947629185E-4	DESIGN
if the hibernate-mapping did not specify a schema/catalog use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping or as params they will already be initialized and will override the values set here (they are in identifiergeneratorproperties)	WITHOUT_CLASSIFICATION	0.9989528864536305	WITHOUT_CLASSIFICATION	0.0010471135463696018	DESIGN
pass the entity-name if not a collection-id	WITHOUT_CLASSIFICATION	0.9999317396532246	WITHOUT_CLASSIFICATION	6.826034677537429E-5	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999795052209033	WITHOUT_CLASSIFICATION	2.0494779096816298E-5	DESIGN
primary key constraint	WITHOUT_CLASSIFICATION	0.9972799681451264	WITHOUT_CLASSIFICATION	0.0027200318548736657	DESIGN
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999441031980114	WITHOUT_CLASSIFICATION	5.589680198871629E-5	DESIGN
needed to satisfy keyvalue	WITHOUT_CLASSIFICATION	0.9993540696500914	WITHOUT_CLASSIFICATION	6.459303499086315E-4	DESIGN
empty means no scoping	WITHOUT_CLASSIFICATION	0.9995559528259446	WITHOUT_CLASSIFICATION	4.4404717405536375E-4	DESIGN
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999115821713526	WITHOUT_CLASSIFICATION	8.841782864735645E-5	DESIGN
if it is a formula index use the element columns in the pk	WITHOUT_CLASSIFICATION	0.9999586117208777	WITHOUT_CLASSIFICATION	4.138827912212464E-5	DESIGN
don't create a unique key 'cos some databases don't like a uk on nullable columns	WITHOUT_CLASSIFICATION	0.9946227602460626	WITHOUT_CLASSIFICATION	0.005377239753937441	DESIGN
arraylist list = new arraylist()list.addall( getkey().getconstraintcolumns() )list.addall( getindex().getconstraintcolumns() )getcollectiontable().createuniquekey(list)	WITHOUT_CLASSIFICATION	0.9999757936556929	WITHOUT_CLASSIFICATION	2.420634430711357E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.999608067989599	WITHOUT_CLASSIFICATION	3.9193201040102406E-4	DESIGN
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9997184703785169	WITHOUT_CLASSIFICATION	2.815296214830488E-4	DESIGN
todo we could just return all false	WITHOUT_CLASSIFICATION	0.8963013638062094	DESIGN	0.1036986361937906	WITHOUT_CLASSIFICATION
the case of a foreign key to something other than the pk is handled in createpropertyrefconstraints	WITHOUT_CLASSIFICATION	0.9984378902038811	WITHOUT_CLASSIFICATION	0.001562109796118861	DESIGN
todo we could just return all false	WITHOUT_CLASSIFICATION	0.8963013638062094	DESIGN	0.1036986361937906	WITHOUT_CLASSIFICATION
if the property mapping consists of all formulas make it non-updateable	WITHOUT_CLASSIFICATION	0.9998911603465093	WITHOUT_CLASSIFICATION	1.0883965349076102E-4	DESIGN
columnupdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9996684094762603	WITHOUT_CLASSIFICATION	3.3159052373961796E-4	DESIGN
if the property mapping consists of all formulas make it insertable	WITHOUT_CLASSIFICATION	0.9998911603465093	WITHOUT_CLASSIFICATION	1.0883965349076102E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998372903489496	WITHOUT_CLASSIFICATION	1.6270965105043617E-4	DESIGN
expected type is intrinsic here	WITHOUT_CLASSIFICATION	0.9991725225083825	WITHOUT_CLASSIFICATION	8.274774916174013E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.999608067989599	WITHOUT_CLASSIFICATION	3.9193201040102406E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.999608067989599	WITHOUT_CLASSIFICATION	3.9193201040102406E-4	DESIGN
return memberpersister.getpropertytype(propertyname)	WITHOUT_CLASSIFICATION	0.9994010633503159	WITHOUT_CLASSIFICATION	5.989366496841748E-4	DESIGN
return memberpersister.tocolumns(alias propertyname)	WITHOUT_CLASSIFICATION	0.9994022229440209	WITHOUT_CLASSIFICATION	5.977770559790669E-4	DESIGN
return memberpersister.gettype()	WITHOUT_CLASSIFICATION	0.9994010633503159	WITHOUT_CLASSIFICATION	5.989366496841748E-4	DESIGN
&& !indexisformula	WITHOUT_CLASSIFICATION	0.9989578375001876	WITHOUT_CLASSIFICATION	0.001042162499812339	DESIGN
return !isonetomany()	WITHOUT_CLASSIFICATION	0.9988391689634891	WITHOUT_CLASSIFICATION	0.0011608310365109414	DESIGN
instanceof associationtype	WITHOUT_CLASSIFICATION	0.9936171493676677	WITHOUT_CLASSIFICATION	0.006382850632332426	DESIGN
we need to determine the best way to know that two joinables represent a single many-to-many	WITHOUT_CLASSIFICATION	0.5345555284303172	WITHOUT_CLASSIFICATION	0.4654444715696827	DESIGN
strip leading ''	WITHOUT_CLASSIFICATION	0.9997277187666883	WITHOUT_CLASSIFICATION	2.722812333116792E-4	DESIGN
public boolean issubselectloadable()	WITHOUT_CLASSIFICATION	0.999161839927348	WITHOUT_CLASSIFICATION	8.381600726519915E-4	DESIGN
key	WITHOUT_CLASSIFICATION	0.9997629927019972	WITHOUT_CLASSIFICATION	2.3700729800280623E-4	DESIGN
columns	WITHOUT_CLASSIFICATION	0.9999206910615542	WITHOUT_CLASSIFICATION	7.930893844572336E-5	DESIGN
sql statements	WITHOUT_CLASSIFICATION	0.9998671321162679	WITHOUT_CLASSIFICATION	1.3286788373215695E-4	DESIGN
extra information about the element type	WITHOUT_CLASSIFICATION	0.9989517400737041	WITHOUT_CLASSIFICATION	0.0010482599262958239	DESIGN
types	WITHOUT_CLASSIFICATION	0.9996867862400457	WITHOUT_CLASSIFICATION	3.1321375995433385E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999795052209033	WITHOUT_CLASSIFICATION	2.0494779096816298E-5	DESIGN
private final string unquotedidentifiercolumnname	WITHOUT_CLASSIFICATION	0.9995697198288902	WITHOUT_CLASSIFICATION	4.3028017110979653E-4	DESIGN
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9996249599917205	WITHOUT_CLASSIFICATION	3.7504000827937896E-4	DESIGN
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9997208849795837	WITHOUT_CLASSIFICATION	2.791150204163275E-4	DESIGN
nativesql collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.999932073570132	WITHOUT_CLASSIFICATION	6.792642986802858E-5	DESIGN
unquotedkeycolumnnames = stringhelper.unquote(keycolumnaliases)	WITHOUT_CLASSIFICATION	0.9999099371022585	WITHOUT_CLASSIFICATION	9.006289774160003E-5	DESIGN
element	WITHOUT_CLASSIFICATION	0.9997057116126783	WITHOUT_CLASSIFICATION	2.942883873217551E-4	DESIGN
nativesql collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999156533289334	WITHOUT_CLASSIFICATION	8.434667106670945E-5	DESIGN
index and row select	WITHOUT_CLASSIFICATION	0.9999807580128913	WITHOUT_CLASSIFICATION	1.924198710867848E-5	DESIGN
nativesql collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999837397306095	WITHOUT_CLASSIFICATION	1.6260269390520487E-5	DESIGN
unquotedidentifiercolumnname = identifiercolumnalias	WITHOUT_CLASSIFICATION	0.9999099371022585	WITHOUT_CLASSIFICATION	9.006289774160003E-5	DESIGN
unquotedidentifiercolumnname = null	WITHOUT_CLASSIFICATION	0.9999332519004929	WITHOUT_CLASSIFICATION	6.67480995071473E-5	DESIGN
generate the sql	WITHOUT_CLASSIFICATION	0.9998431454897527	WITHOUT_CLASSIFICATION	1.5685451024731765E-4	DESIGN
for non-arrays we don't need to know the element class elementtype.returnedclass()	WITHOUT_CLASSIFICATION	0.994462955352743	WITHOUT_CLASSIFICATION	0.005537044647257023	DESIGN
not all classpersisters implement propertymapping!	WITHOUT_CLASSIFICATION	0.980691266916922	WITHOUT_CLASSIFICATION	0.019308733083078008	DESIGN
handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9919882187845864	WITHOUT_CLASSIFICATION	0.008011781215413535	DESIGN
handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9925262434345016	WITHOUT_CLASSIFICATION	0.007473756565498542	DESIGN
if there is a user-specified loader return that todo filters!?	WITHOUT_CLASSIFICATION	0.8099411168524093	WITHOUT_CLASSIFICATION	0.19005888314759065	DESIGN
take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9965044976841191	WITHOUT_CLASSIFICATION	0.0034955023158809513	DESIGN
strip leading ''	WITHOUT_CLASSIFICATION	0.9997277187666883	WITHOUT_CLASSIFICATION	2.722812333116792E-4	DESIGN
run a subquery loader	WITHOUT_CLASSIFICATION	0.9968308638847141	WITHOUT_CLASSIFICATION	0.003169136115285806	DESIGN
needed by arrays	WITHOUT_CLASSIFICATION	0.9995515328781855	WITHOUT_CLASSIFICATION	4.4846712181442674E-4	DESIGN
todo something with formulas	WITHOUT_CLASSIFICATION	0.7697103068118925	DESIGN	0.2302896931881074	WITHOUT_CLASSIFICATION
an assertion	WITHOUT_CLASSIFICATION	0.9995901044646799	WITHOUT_CLASSIFICATION	4.0989553532009296E-4	DESIGN
remove all the old entries	WITHOUT_CLASSIFICATION	0.9999349941164383	WITHOUT_CLASSIFICATION	6.500588356177201E-5	DESIGN
create all the new entries	WITHOUT_CLASSIFICATION	0.9999115457329045	WITHOUT_CLASSIFICATION	8.845426709537182E-5	DESIGN
&& !indexisformula	WITHOUT_CLASSIFICATION	0.9989578375001876	WITHOUT_CLASSIFICATION	0.001042162499812339	DESIGN
&& !indexisformula	WITHOUT_CLASSIFICATION	0.9989578375001876	WITHOUT_CLASSIFICATION	0.001042162499812339	DESIGN
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999785252046134	WITHOUT_CLASSIFICATION	2.147479538664889E-5	DESIGN
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999644393929616	WITHOUT_CLASSIFICATION	3.55606070383682E-5	DESIGN
==elementtype ??	WITHOUT_CLASSIFICATION	0.9977962505761133	WITHOUT_CLASSIFICATION	0.0022037494238866654	DESIGN
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999982350876371	WITHOUT_CLASSIFICATION	1.7649123629933316E-6	DESIGN
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.998797088916595	WITHOUT_CLASSIFICATION	0.0012029110834049798	DESIGN
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9987804019735728	WITHOUT_CLASSIFICATION	0.0012195980264272913	DESIGN
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9510771440904305	WITHOUT_CLASSIFICATION	0.04892285590956934	DESIGN
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999683101459017	WITHOUT_CLASSIFICATION	3.168985409836518E-5	DESIGN
buf.append( selectfragment( lhsalias "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9996176533825615	WITHOUT_CLASSIFICATION	3.8234661743850775E-4	DESIGN
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9998390197280395	WITHOUT_CLASSIFICATION	1.6098027196057122E-4	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999556988801331	WITHOUT_CLASSIFICATION	4.430111986689732E-4	DESIGN
private final string roottablename	WITHOUT_CLASSIFICATION	0.9995697198288902	WITHOUT_CLASSIFICATION	4.3028017110979653E-4	DESIGN
initialization	WITHOUT_CLASSIFICATION	0.9999179353332618	WITHOUT_CLASSIFICATION	8.20646667382478E-5	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999795052209033	WITHOUT_CLASSIFICATION	2.0494779096816298E-5	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999556988801331	WITHOUT_CLASSIFICATION	4.430111986689732E-4	DESIGN
execute the sql	WITHOUT_CLASSIFICATION	0.9998987205647132	WITHOUT_CLASSIFICATION	1.0127943528687626E-4	DESIGN
this could also just be true all the time	WITHOUT_CLASSIFICATION	0.9905330062068252	WITHOUT_CLASSIFICATION	0.009466993793174826	DESIGN
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9997532381934644	WITHOUT_CLASSIFICATION	2.467618065356522E-4	DESIGN
todo check this.	WITHOUT_CLASSIFICATION	0.6017091975932832	WITHOUT_CLASSIFICATION	0.3982908024067167	DESIGN
initialization	WITHOUT_CLASSIFICATION	0.9999179353332618	WITHOUT_CLASSIFICATION	8.20646667382478E-5	DESIGN
properties of this class including inherited properties	WITHOUT_CLASSIFICATION	0.9944816513924984	WITHOUT_CLASSIFICATION	0.005518348607501508	DESIGN
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9994443335833004	WITHOUT_CLASSIFICATION	5.556664166995781E-4	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9957028189038871	WITHOUT_CLASSIFICATION	0.004297181096112854	DESIGN
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an sql case	WITHOUT_CLASSIFICATION	0.9999720099875491	WITHOUT_CLASSIFICATION	2.7990012450940664E-5	DESIGN
multitables	WITHOUT_CLASSIFICATION	0.999514050864903	WITHOUT_CLASSIFICATION	4.859491350970499E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999795052209033	WITHOUT_CLASSIFICATION	2.0494779096816298E-5	DESIGN
subclass closure properties	WITHOUT_CLASSIFICATION	0.9887624933246423	WITHOUT_CLASSIFICATION	0.011237506675357705	DESIGN
subclasses	WITHOUT_CLASSIFICATION	0.999805447379705	WITHOUT_CLASSIFICATION	1.945526202950499E-4	DESIGN
( (column) model.gettable().getprimarykey().getcolumniterator().next() ).getname()	WITHOUT_CLASSIFICATION	0.9998515034280713	WITHOUT_CLASSIFICATION	1.4849657192878747E-4	DESIGN
( (column) sc.gettable().getprimarykey().getcolumniterator().next() ).getname()	WITHOUT_CLASSIFICATION	0.9998515034280713	WITHOUT_CLASSIFICATION	1.4849657192878747E-4	DESIGN
don't need subclass tables because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9892699944959347	WITHOUT_CLASSIFICATION	0.01073000550406539	DESIGN
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9984333860067819	WITHOUT_CLASSIFICATION	0.0015666139932181348	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999556988801331	WITHOUT_CLASSIFICATION	4.430111986689732E-4	DESIGN
properties of this class including inherited properties	WITHOUT_CLASSIFICATION	0.9944816513924984	WITHOUT_CLASSIFICATION	0.005518348607501508	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9957028189038871	WITHOUT_CLASSIFICATION	0.004297181096112854	DESIGN
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9993880006766177	WITHOUT_CLASSIFICATION	6.119993233822233E-4	DESIGN
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.999575304411618	WITHOUT_CLASSIFICATION	4.2469558838204334E-4	DESIGN
discriminator column	WITHOUT_CLASSIFICATION	0.9998284138360887	WITHOUT_CLASSIFICATION	1.715861639112987E-4	DESIGN
initialization	WITHOUT_CLASSIFICATION	0.9999179353332618	WITHOUT_CLASSIFICATION	8.20646667382478E-5	DESIGN
private final map propertytablenumbersbyname = new hashmap()	WITHOUT_CLASSIFICATION	0.9999024730100035	WITHOUT_CLASSIFICATION	9.752698999657921E-5	DESIGN
class + table	WITHOUT_CLASSIFICATION	0.9999165327152997	WITHOUT_CLASSIFICATION	8.346728470034424E-5	DESIGN
discriminator	WITHOUT_CLASSIFICATION	0.9995144035986447	WITHOUT_CLASSIFICATION	4.8559640135527614E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9995865239515832	WITHOUT_CLASSIFICATION	4.13476048416782E-4	DESIGN
subclasses	WITHOUT_CLASSIFICATION	0.999805447379705	WITHOUT_CLASSIFICATION	1.945526202950499E-4	DESIGN
execute the sql	WITHOUT_CLASSIFICATION	0.9998987205647132	WITHOUT_CLASSIFICATION	1.0127943528687626E-4	DESIGN
joins	WITHOUT_CLASSIFICATION	0.9996727830612241	WITHOUT_CLASSIFICATION	3.272169387758558E-4	DESIGN
propertytablenumbersbyname.put( prop.getname() join )	WITHOUT_CLASSIFICATION	0.9999549998366423	WITHOUT_CLASSIFICATION	4.500016335765874E-5	DESIGN
access cached sql	WITHOUT_CLASSIFICATION	0.9999286224499125	WITHOUT_CLASSIFICATION	7.137755008738712E-5	DESIGN
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9990153293314684	WITHOUT_CLASSIFICATION	9.8467066853158E-4	DESIGN
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.999969416039714	WITHOUT_CLASSIFICATION	3.058396028600573E-5	DESIGN
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9998725356685823	WITHOUT_CLASSIFICATION	1.2746433141785506E-4	DESIGN
render the sql	WITHOUT_CLASSIFICATION	0.9997413515274988	WITHOUT_CLASSIFICATION	2.5864847250120764E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998372903489496	WITHOUT_CLASSIFICATION	1.6270965105043617E-4	DESIGN
moved up from abstractentitypersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.992485666769129	WITHOUT_CLASSIFICATION	0.007514333230871043	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995487121138841	WITHOUT_CLASSIFICATION	4.512878861158206E-4	DESIGN
the optional sql string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999874073681481	WITHOUT_CLASSIFICATION	1.2592631852044687E-5	DESIGN
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9902228316851849	WITHOUT_CLASSIFICATION	0.009777168314815022	DESIGN
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9993156921923763	WITHOUT_CLASSIFICATION	6.84307807623789E-4	DESIGN
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9994530157554462	WITHOUT_CLASSIFICATION	5.469842445538648E-4	DESIGN
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.999824794008496	WITHOUT_CLASSIFICATION	1.7520599150400376E-4	DESIGN
sql strings	WITHOUT_CLASSIFICATION	0.9996946557923034	WITHOUT_CLASSIFICATION	3.0534420769650104E-4	DESIGN
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9998925114740526	WITHOUT_CLASSIFICATION	1.0748852594745183E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9995865239515832	WITHOUT_CLASSIFICATION	4.13476048416782E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995487121138841	WITHOUT_CLASSIFICATION	4.512878861158206E-4	DESIGN
identifier	WITHOUT_CLASSIFICATION	0.9996935906271752	WITHOUT_CLASSIFICATION	3.064093728247166E-4	DESIGN
version	WITHOUT_CLASSIFICATION	0.9992278670115878	WITHOUT_CLASSIFICATION	7.72132988412252E-4	DESIGN
where string	WITHOUT_CLASSIFICATION	0.9998897958675846	WITHOUT_CLASSIFICATION	1.1020413241532582E-4	DESIGN
subclass property closure	WITHOUT_CLASSIFICATION	0.9860679842124148	WITHOUT_CLASSIFICATION	0.013932015787585156	DESIGN
before add -)	WITHOUT_CLASSIFICATION	0.9998435650482717	WITHOUT_CLASSIFICATION	1.5643495172844318E-4	DESIGN
handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9991376301502011	WITHOUT_CLASSIFICATION	8.623698497990691E-4	DESIGN
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9998313864941779	WITHOUT_CLASSIFICATION	1.6861350582202936E-4	DESIGN
note early exit here	WITHOUT_CLASSIFICATION	0.9984484336833591	WITHOUT_CLASSIFICATION	0.0015515663166408677	DESIGN
object have been loaded with setreadonly(true) hhh-2236	WITHOUT_CLASSIFICATION	0.9995700706739483	WITHOUT_CLASSIFICATION	4.2992932605166923E-4	DESIGN
note this assumes something about how propertyselectfragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9849107413732475	WITHOUT_CLASSIFICATION	0.015089258626752441	DESIGN
strip leading " "	WITHOUT_CLASSIFICATION	0.9997853044706585	WITHOUT_CLASSIFICATION	2.146955293415537E-4	DESIGN
if there is no resulting row return null	WITHOUT_CLASSIFICATION	0.9999918661417788	WITHOUT_CLASSIFICATION	8.133858221159034E-6	DESIGN
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9995745823200247	WITHOUT_CLASSIFICATION	4.2541767997530483E-4	DESIGN
null owner ok??	WITHOUT_CLASSIFICATION	0.9999298577678346	WITHOUT_CLASSIFICATION	7.014223216540874E-5	DESIGN
null sql means that the only lazy properties are shared pk one-to-one associations which are handled differently in the type#nullsafeget code	WITHOUT_CLASSIFICATION	0.9996826440148616	WITHOUT_CLASSIFICATION	3.173559851383095E-4	DESIGN
create a new from node for the referenced class.	WITHOUT_CLASSIFICATION	0.9997294328259174	WITHOUT_CLASSIFICATION	2.705671740825842E-4	DESIGN
the difficulty here is exactly what do we update in order to force the version to be incremented in the db	WITHOUT_CLASSIFICATION	0.8961089744983443	WITHOUT_CLASSIFICATION	0.10389102550165571	DESIGN
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9988418482867298	WITHOUT_CLASSIFICATION	0.0011581517132701806	DESIGN
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.998529060797311	WITHOUT_CLASSIFICATION	0.0014709392026890193	DESIGN
enable for hhh-440 which we don't like	WITHOUT_CLASSIFICATION	0.9993295015931065	WITHOUT_CLASSIFICATION	6.704984068935072E-4	DESIGN
aliases	WITHOUT_CLASSIFICATION	0.9997439669210877	WITHOUT_CLASSIFICATION	2.56033078912325E-4	DESIGN
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9998550725036521	WITHOUT_CLASSIFICATION	1.4492749634792014E-4	DESIGN
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9993680312729589	WITHOUT_CLASSIFICATION	6.319687270411047E-4	DESIGN
fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9980930732789286	WITHOUT_CLASSIFICATION	0.0019069267210714141	DESIGN
embedded composite ids ( alias.idname1 alias.idname2 )	WITHOUT_CLASSIFICATION	0.997968798298214	WITHOUT_CLASSIFICATION	0.0020312017017859976	DESIGN
todo skip formulas?	WITHOUT_CLASSIFICATION	0.6574148674917704	WITHOUT_CLASSIFICATION	0.3425851325082297	DESIGN
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9986294797211298	WITHOUT_CLASSIFICATION	0.001370520278870193	DESIGN
do two passes for collection property-ref!	WITHOUT_CLASSIFICATION	0.9932317939339009	WITHOUT_CLASSIFICATION	0.006768206066099078	DESIGN
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.999930687407335	WITHOUT_CLASSIFICATION	6.931259266492495E-5	DESIGN
todo eventually rowidname[j]	WITHOUT_CLASSIFICATION	0.6996843474636756	WITHOUT_CLASSIFICATION	0.3003156525363243	DESIGN
this is a property of the table which we are updating	WITHOUT_CLASSIFICATION	0.9986451244616539	WITHOUT_CLASSIFICATION	0.001354875538346036	DESIGN
special shortcut for id properties skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9989124729047811	WITHOUT_CLASSIFICATION	0.0010875270952188322	DESIGN
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999210187934527	WITHOUT_CLASSIFICATION	7.89812065471929E-5	DESIGN
nothing to do even if the operand is a parameter no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.659330898982549	DESIGN	0.34066910101745107	WITHOUT_CLASSIFICATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9764481169700104	WITHOUT_CLASSIFICATION	0.02355188302998956	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9996317200587931	WITHOUT_CLASSIFICATION	3.6827994120690343E-4	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9996940117882694	WITHOUT_CLASSIFICATION	3.0598821173046604E-4	DESIGN
more specifically "? [op] datetime" 1) if the operator is minus the param needs to be of some datetime type 2) if the operator is plus the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9948714871313605	WITHOUT_CLASSIFICATION	0.005128512868639504	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9996317200587931	WITHOUT_CLASSIFICATION	3.6827994120690343E-4	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9764481169700104	WITHOUT_CLASSIFICATION	0.02355188302998956	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9996940117882694	WITHOUT_CLASSIFICATION	3.0598821173046604E-4	DESIGN
add the primary key	WITHOUT_CLASSIFICATION	0.9997501899556873	WITHOUT_CLASSIFICATION	2.4981004431269386E-4	DESIGN
delegate already handles pk columns	WITHOUT_CLASSIFICATION	0.9999204065895385	WITHOUT_CLASSIFICATION	7.959341046144621E-5	DESIGN
we can't batch joined inserts especially not if it is an identity insert nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999945752897482	WITHOUT_CLASSIFICATION	5.424710251806719E-6	DESIGN
render the sql query	WITHOUT_CLASSIFICATION	0.9998960982555817	WITHOUT_CLASSIFICATION	1.0390174441836993E-4	DESIGN
write the values of fields onto the prepared statement - we must use the state at the time the insert was issued (cos of foreign key constraints). not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9996141821835445	WITHOUT_CLASSIFICATION	3.858178164555099E-4	DESIGN
todo shouldnt inserts be expectations.none?	WITHOUT_CLASSIFICATION	0.574993768982929	DESIGN	0.425006231017071	WITHOUT_CLASSIFICATION
don't bother trying to update we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9998083930988243	WITHOUT_CLASSIFICATION	1.916069011756284E-4	DESIGN
if all fields are null we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9998054721590087	WITHOUT_CLASSIFICATION	1.9452784099124214E-4	DESIGN
there is probably a row there so try to update if no rows were updated we will find out	WITHOUT_CLASSIFICATION	0.9999925633502058	WITHOUT_CLASSIFICATION	7.436649794083131E-6	DESIGN
note updates to joined tables can't be batched	WITHOUT_CLASSIFICATION	0.9985696623810014	WITHOUT_CLASSIFICATION	0.0014303376189985888	DESIGN
starting index	WITHOUT_CLASSIFICATION	0.9999433650528773	WITHOUT_CLASSIFICATION	5.6634947122688986E-5	DESIGN
now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9998749558837463	WITHOUT_CLASSIFICATION	1.2504411625365128E-4	DESIGN
write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9995859555304154	WITHOUT_CLASSIFICATION	4.140444695845873E-4	DESIGN
render the sql query	WITHOUT_CLASSIFICATION	0.9998960982555817	WITHOUT_CLASSIFICATION	1.0390174441836993E-4	DESIGN
do the key. the key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9993270622967338	WITHOUT_CLASSIFICATION	6.729377032660895E-4	DESIGN
we should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9978774648195096	WITHOUT_CLASSIFICATION	0.0021225351804905245	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9914911359572255	WITHOUT_CLASSIFICATION	0.008508864042774556	DESIGN
note dirtyfields==null means we had no snapshot and we couldn't get one using select-before-update oldfields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyfields)	WITHOUT_CLASSIFICATION	0.8804658659642282	WITHOUT_CLASSIFICATION	0.11953413403577187	DESIGN
more specifically "datetime [op] ?" 1) if the operator is minus we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is plus the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9997864129519123	WITHOUT_CLASSIFICATION	2.1358704808771556E-4	DESIGN
for the case of dynamic-update="true" we need to generate the update sql	WITHOUT_CLASSIFICATION	0.9997547047591787	WITHOUT_CLASSIFICATION	2.4529524082128596E-4	DESIGN
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.8927750381368463	DESIGN	0.10722496186315365	WITHOUT_CLASSIFICATION
for the case of dynamic-update="false" or no snapshot we use the static sql	WITHOUT_CLASSIFICATION	0.9998719406773424	WITHOUT_CLASSIFICATION	1.2805932265759758E-4	DESIGN
if not "get" then try "is"	WITHOUT_CLASSIFICATION	0.9988210406341784	WITHOUT_CLASSIFICATION	0.0011789593658215883	DESIGN
now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9992583594003376	WITHOUT_CLASSIFICATION	7.416405996624458E-4	DESIGN
for the case of dynamic-insert="true" we need to generate the insert sql	WITHOUT_CLASSIFICATION	0.9997160888462415	WITHOUT_CLASSIFICATION	2.839111537585632E-4	DESIGN
for the case of dynamic-insert="true" we need to generate the insert sql	WITHOUT_CLASSIFICATION	0.9997160888462415	WITHOUT_CLASSIFICATION	2.839111537585632E-4	DESIGN
for the case of dynamic-insert="false" use the static sql	WITHOUT_CLASSIFICATION	0.9994584434251705	WITHOUT_CLASSIFICATION	5.415565748294979E-4	DESIGN
for the case of dynamic-insert="false" use the static sql	WITHOUT_CLASSIFICATION	0.9994584434251705	WITHOUT_CLASSIFICATION	5.415565748294979E-4	DESIGN
not supported	WITHOUT_CLASSIFICATION	0.998325547832319	WITHOUT_CLASSIFICATION	0.0016744521676810723	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9914911359572255	WITHOUT_CLASSIFICATION	0.008508864042774556	DESIGN
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9987183749783501	WITHOUT_CLASSIFICATION	0.0012816250216499032	DESIGN
otherwise utilize the static delete statements	WITHOUT_CLASSIFICATION	0.999825839132382	WITHOUT_CLASSIFICATION	1.741608676179931E-4	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9886504669748608	WITHOUT_CLASSIFICATION	0.011349533025139235	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9886504669748608	WITHOUT_CLASSIFICATION	0.011349533025139235	DESIGN
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999963948843079	WITHOUT_CLASSIFICATION	3.605115692045042E-6	DESIGN
notice that we skip the first table it is the driving table!	WITHOUT_CLASSIFICATION	0.9999427593884648	WITHOUT_CLASSIFICATION	5.7240611535136225E-5	DESIGN
we can inner join to superclass tables (the row must be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9997709049297531	WITHOUT_CLASSIFICATION	2.290950702468612E-4	DESIGN
skip the driving table	WITHOUT_CLASSIFICATION	0.9998331272434098	WITHOUT_CLASSIFICATION	1.6687275659020087E-4	DESIGN
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.6473704629240085	WITHOUT_CLASSIFICATION	0.3526295370759915	DESIGN
here we work under the following assumptions ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime always results in a double 3) datetime - {something other than datetime} always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999294024099	WITHOUT_CLASSIFICATION	7.05975901537996E-8	DESIGN
render the where and from parts	WITHOUT_CLASSIFICATION	0.9993182944093931	WITHOUT_CLASSIFICATION	6.817055906068158E-4	DESIGN
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.8736161655632007	WITHOUT_CLASSIFICATION	0.1263838344367993	DESIGN
now render the joins	WITHOUT_CLASSIFICATION	0.9993016413609938	WITHOUT_CLASSIFICATION	6.983586390062719E-4	DESIGN
this will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9992264715392952	WITHOUT_CLASSIFICATION	7.735284607048331E-4	DESIGN
now render the select clause	WITHOUT_CLASSIFICATION	0.9997370345166542	WITHOUT_CLASSIFICATION	2.629654833458208E-4	DESIGN
now tie it all together	WITHOUT_CLASSIFICATION	0.9997092771887545	WITHOUT_CLASSIFICATION	2.9072281124557233E-4	DESIGN
insert/update/delete sql	WITHOUT_CLASSIFICATION	0.999645094831575	WITHOUT_CLASSIFICATION	3.5490516842484626E-4	DESIGN
select sql	WITHOUT_CLASSIFICATION	0.999912744655772	WITHOUT_CLASSIFICATION	8.725534422802174E-5	DESIGN
no need to check laziness dirty checking handles that	WITHOUT_CLASSIFICATION	0.6993968470811206	DESIGN	0.30060315291887935	WITHOUT_CLASSIFICATION
fully resolve the map reference create implicit joins.	WITHOUT_CLASSIFICATION	0.9803645362959946	WITHOUT_CLASSIFICATION	0.019635463704005443	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9817018612818537	WITHOUT_CLASSIFICATION	0.018298138718146294	DESIGN
the basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999003354039987	WITHOUT_CLASSIFICATION	9.96645960012243E-5	DESIGN
for dialects which are known to not support ansi-sql row-value-constructor syntax we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9874404031091575	WITHOUT_CLASSIFICATION	0.012559596890842486	DESIGN
due to the complexity in initializing the selectclause do not generate one here. if it is not found simply return null also do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9891802093246517	WITHOUT_CLASSIFICATION	0.010819790675348412	DESIGN
check the version unsaved-value if appropriate	WITHOUT_CLASSIFICATION	0.9983089954692362	WITHOUT_CLASSIFICATION	0.0016910045307637382	DESIGN
let this take precedence if defined since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9996733743103504	WITHOUT_CLASSIFICATION	3.266256896496231E-4	DESIGN
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9985761012820343	WITHOUT_CLASSIFICATION	0.0014238987179656523	DESIGN
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9996609935675517	WITHOUT_CLASSIFICATION	3.390064324483561E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9999015662196771	WITHOUT_CLASSIFICATION	9.843378032287948E-5	DESIGN
for property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9996507213268453	WITHOUT_CLASSIFICATION	3.4927867315467026E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995487121138841	WITHOUT_CLASSIFICATION	4.512878861158206E-4	DESIGN
if there is no resulting row return null	WITHOUT_CLASSIFICATION	0.9999918661417788	WITHOUT_CLASSIFICATION	8.133858221159034E-6	DESIGN
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999731269148777	WITHOUT_CLASSIFICATION	2.6873085122190192E-5	DESIGN
if this from element is a collection and the path is a collection property (maxindex etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9971445462907215	WITHOUT_CLASSIFICATION	0.002855453709278546	DESIGN
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995573486396486	WITHOUT_CLASSIFICATION	4.4265136035126805E-4	DESIGN
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995962929490669	WITHOUT_CLASSIFICATION	4.03707050933156E-4	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9999134719897629	WITHOUT_CLASSIFICATION	8.652801023718935E-5	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9999134719897629	WITHOUT_CLASSIFICATION	8.652801023718935E-5	DESIGN
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999969333985455	WITHOUT_CLASSIFICATION	3.066601454418238E-6	DESIGN
try "get"	WITHOUT_CLASSIFICATION	0.9998217172274626	WITHOUT_CLASSIFICATION	1.782827725373791E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9997983876276735	WITHOUT_CLASSIFICATION	2.016123723264378E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9997983876276735	WITHOUT_CLASSIFICATION	2.016123723264378E-4	DESIGN
should be safe to only ever expect entitypersister references here	WITHOUT_CLASSIFICATION	0.9978942600651087	WITHOUT_CLASSIFICATION	0.00210573993489126	DESIGN
this page intentionally left blank )	WITHOUT_CLASSIFICATION	0.999446128412306	WITHOUT_CLASSIFICATION	5.538715876940574E-4	DESIGN
do not do anything	WITHOUT_CLASSIFICATION	0.9985466165820696	WITHOUT_CLASSIFICATION	0.0014533834179304634	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.999927327176818	WITHOUT_CLASSIFICATION	7.267282318199849E-5	DESIGN
cant instantiate	WITHOUT_CLASSIFICATION	0.9992841037974123	WITHOUT_CLASSIFICATION	7.1589620258768E-4	DESIGN
if it is a property of an embedded component invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999323776983315	WITHOUT_CLASSIFICATION	6.762230166847266E-5	DESIGN
otherwise	WITHOUT_CLASSIFICATION	0.9997551201505782	WITHOUT_CLASSIFICATION	2.448798494217765E-4	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9978873065321541	WITHOUT_CLASSIFICATION	0.0021126934678460086	DESIGN
note interfaces is assumed to already contain hibernateproxy.class	WITHOUT_CLASSIFICATION	0.9948539097412663	WITHOUT_CLASSIFICATION	0.0051460902587338085	DESIGN
note interfaces is assumed to already contain hibernateproxy.class	WITHOUT_CLASSIFICATION	0.9948539097412663	WITHOUT_CLASSIFICATION	0.0051460902587338085	DESIGN
hhh-2481 make sure the callback gets cleared otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9961282545563186	WITHOUT_CLASSIFICATION	0.0038717454436814625	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9977801227126178	WITHOUT_CLASSIFICATION	0.002219877287382107	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9977801227126178	WITHOUT_CLASSIFICATION	0.002219877287382107	DESIGN
note interface is assumed to already contain hibernateproxy.class	WITHOUT_CLASSIFICATION	0.9741020912240641	WITHOUT_CLASSIFICATION	0.025897908775935872	DESIGN
interfaces arguments	WITHOUT_CLASSIFICATION	0.9996968932335678	WITHOUT_CLASSIFICATION	3.0310676643220463E-4	DESIGN
todo!	WITHOUT_CLASSIFICATION	0.9996695162880856	WITHOUT_CLASSIFICATION	3.304837119143956E-4	DESIGN
get the caller	WITHOUT_CLASSIFICATION	0.9998154382410683	WITHOUT_CLASSIFICATION	1.845617589315594E-4	DESIGN
get the caller principals	WITHOUT_CLASSIFICATION	0.9996676790659802	WITHOUT_CLASSIFICATION	3.323209340197811E-4	DESIGN
private static final alias default_alias = new alias(10 null)	WITHOUT_CLASSIFICATION	0.9999836971374463	WITHOUT_CLASSIFICATION	1.6302862553668807E-5	DESIGN
needed to bump this up to dotnode because that is the only thing which currently knows about the property-ref path in the correct format it is either this or recurse over the dotnodes constructing the property path just like dotnode does internally	WITHOUT_CLASSIFICATION	0.9982831528793643	WITHOUT_CLASSIFICATION	0.0017168471206356237	DESIGN
if the identifier is quoted remove the quotes	WITHOUT_CLASSIFICATION	0.9995188393329821	WITHOUT_CLASSIFICATION	4.811606670179027E-4	DESIGN
truncate the identifier to the max alias length less the suffix length	WITHOUT_CLASSIFICATION	0.999994871454943	WITHOUT_CLASSIFICATION	5.128545056887299E-6	DESIGN
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9962189611349791	WITHOUT_CLASSIFICATION	0.0037810388650208384	DESIGN
null is not considered the same type as integer. $non-nls-1 $non-nls-1	WITHOUT_CLASSIFICATION	0.9996075762609653	WITHOUT_CLASSIFICATION	3.92423739034679E-4	DESIGN
the outerjoinsafterwhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9998792392236459	WITHOUT_CLASSIFICATION	1.2076077635412768E-4	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.999675278758428	WITHOUT_CLASSIFICATION	3.2472124157203623E-4	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.999675278758428	WITHOUT_CLASSIFICATION	3.2472124157203623E-4	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.999675278758428	WITHOUT_CLASSIFICATION	3.2472124157203623E-4	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.999675278758428	WITHOUT_CLASSIFICATION	3.2472124157203623E-4	DESIGN
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9997588331017098	WITHOUT_CLASSIFICATION	2.4116689829010443E-4	DESIGN
if the condition is not already there	WITHOUT_CLASSIFICATION	0.9998234979317254	WITHOUT_CLASSIFICATION	1.7650206827449696E-4	DESIGN
dontspace.add("'")	WITHOUT_CLASSIFICATION	0.999514050864903	WITHOUT_CLASSIFICATION	4.859491350970499E-4	DESIGN
for mysql	WITHOUT_CLASSIFICATION	0.9997715546462556	WITHOUT_CLASSIFICATION	2.2844535374455776E-4	DESIGN
hashmap columnsunique = new hashmap()	WITHOUT_CLASSIFICATION	0.9999696856616264	WITHOUT_CLASSIFICATION	3.0314338373634815E-5	DESIGN
null caused some problems	WITHOUT_CLASSIFICATION	0.9981140532951409	WITHOUT_CLASSIFICATION	0.0018859467048591059	DESIGN
package	WITHOUT_CLASSIFICATION	0.998999143842101	WITHOUT_CLASSIFICATION	0.0010008561578989529	DESIGN
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9998793057892553	WITHOUT_CLASSIFICATION	1.2069421074465756E-4	DESIGN
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9963813987322134	WITHOUT_CLASSIFICATION	0.003618601267786486	DESIGN
package	WITHOUT_CLASSIFICATION	0.998999143842101	WITHOUT_CLASSIFICATION	0.0010008561578989529	DESIGN
package	WITHOUT_CLASSIFICATION	0.998999143842101	WITHOUT_CLASSIFICATION	0.0010008561578989529	DESIGN
if true then execute db updates otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9991742011620838	WITHOUT_CLASSIFICATION	8.257988379161836E-4	DESIGN
we only release the connection	WITHOUT_CLASSIFICATION	0.9994160399960254	WITHOUT_CLASSIFICATION	5.839600039747504E-4	DESIGN
deprecated option	WITHOUT_CLASSIFICATION	0.9995746127411075	WITHOUT_CLASSIFICATION	4.253872588925234E-4	DESIGN
if an exception occurs during flush user must call rollback()	WITHOUT_CLASSIFICATION	0.99998052385095	WITHOUT_CLASSIFICATION	1.947614904994762E-5	DESIGN
actually this last test is probably unnecessary since beforecompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999830776233453	WITHOUT_CLASSIFICATION	1.6922376654720544E-5	DESIGN
this one only really needed for badly-behaved applications! (if the transactionmanager has a sychronization registered its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9981217358079287	WITHOUT_CLASSIFICATION	0.0018782641920712755	DESIGN
create an dotnode ast for the path and resolve it.	WITHOUT_CLASSIFICATION	0.999691013894504	WITHOUT_CLASSIFICATION	3.089861054959845E-4	DESIGN
if an exception occurs during flush user must call rollback()	WITHOUT_CLASSIFICATION	0.99998052385095	WITHOUT_CLASSIFICATION	1.947614904994762E-5	DESIGN
if we could not register a synchronization do the before/after completion callbacks ourself (but we need to let jdbccontext know that this is what we are going to do so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.99498248000571	DESIGN	0.005017519994289921	WITHOUT_CLASSIFICATION
swallow it and continue to roll back jta transaction	WITHOUT_CLASSIFICATION	0.9998518656688136	WITHOUT_CLASSIFICATION	1.4813433118649356E-4	DESIGN
so the transaction is already rolled back by jta spec	WITHOUT_CLASSIFICATION	0.9999902804598648	WITHOUT_CLASSIFICATION	9.71954013523925E-6	DESIGN
this method is a noop if there is a synchronization!	WITHOUT_CLASSIFICATION	0.9988912032708546	WITHOUT_CLASSIFICATION	0.0011087967291453966	DESIGN
two conditions where we need to transform this to a theta-join syntax 1) 'elem' is the "root from-element" in correlated subqueries 2) the dotnode.usethetastyleimplicitjoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9997826573025135	WITHOUT_CLASSIFICATION	2.1734269748656414E-4	DESIGN
websphere however is not a sane jee/jta container	WITHOUT_CLASSIFICATION	0.9993053943503561	WITHOUT_CLASSIFICATION	6.94605649643788E-4	DESIGN
for sane jee/jta containers the transaction itself functions as its identifier	WITHOUT_CLASSIFICATION	0.9999796090295714	WITHOUT_CLASSIFICATION	2.0390970428660918E-5	DESIGN
swallow the transaction was finished	WITHOUT_CLASSIFICATION	0.9999770710171086	WITHOUT_CLASSIFICATION	2.2928982891434893E-5	DESIGN
all aliastoentitymapresulttransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999686755483511	WITHOUT_CLASSIFICATION	3.132445164895975E-5	DESIGN
create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9998847866812222	WITHOUT_CLASSIFICATION	1.1521331877777324E-4	DESIGN
all distinctrootentityresulttransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999686755483511	WITHOUT_CLASSIFICATION	3.132445164895975E-5	DESIGN
map of entitymode -> tuplizer	WITHOUT_CLASSIFICATION	0.999971060638137	WITHOUT_CLASSIFICATION	2.893936186289294E-5	DESIGN
this is a virtual id property	WITHOUT_CLASSIFICATION	0.9704698991329371	WITHOUT_CLASSIFICATION	0.029530100867062974	DESIGN
this one needed only for guessentitymode()	WITHOUT_CLASSIFICATION	0.9987394630143748	WITHOUT_CLASSIFICATION	0.0012605369856252709	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999887852359527	WITHOUT_CLASSIFICATION	1.1214764047290248E-4	DESIGN
todo move this to sf per hhh-3517 also see hhh-1907 and componentmetamodel	WITHOUT_CLASSIFICATION	0.9989884679816317	DESIGN	0.0010115320183682855	WITHOUT_CLASSIFICATION
then the pojo tuplizer using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999702240262535	WITHOUT_CLASSIFICATION	2.9775973746523496E-5	DESIGN
build the dynamic-map tuplizer	WITHOUT_CLASSIFICATION	0.9994038693070052	WITHOUT_CLASSIFICATION	5.961306929949216E-4	DESIGN
then dom4j tuplizer if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9998233459635947	WITHOUT_CLASSIFICATION	1.7665403640543676E-4	DESIGN
build the dynamic-map tuplizer	WITHOUT_CLASSIFICATION	0.9994038693070052	WITHOUT_CLASSIFICATION	5.961306929949216E-4	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9996512485368599	WITHOUT_CLASSIFICATION	3.487514631400643E-4	DESIGN
found a ctor but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9998882694827944	WITHOUT_CLASSIFICATION	1.1173051720552357E-4	DESIGN
private final sessionfactoryimplementor sessionfactory	WITHOUT_CLASSIFICATION	0.999397018711873	WITHOUT_CLASSIFICATION	6.029812881270684E-4	DESIGN
cached for efficiency	WITHOUT_CLASSIFICATION	0.9998088477466199	WITHOUT_CLASSIFICATION	1.9115225337999037E-4	DESIGN
public componentmetamodel(component component sessionfactoryimplementor sessionfactory) {	WITHOUT_CLASSIFICATION	0.9993122074694923	WITHOUT_CLASSIFICATION	6.877925305077826E-4	DESIGN
this.sessionfactory = sessionfactory	WITHOUT_CLASSIFICATION	0.9999099371022585	WITHOUT_CLASSIFICATION	9.006289774160003E-5	DESIGN
it was not embedded so the argument is just an id	WITHOUT_CLASSIFICATION	0.9989815010727335	WITHOUT_CLASSIFICATION	0.001018498927266486	DESIGN
then the pojo tuplizer using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999702240262535	WITHOUT_CLASSIFICATION	2.9775973746523496E-5	DESIGN
then dom4j tuplizer if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9998233459635947	WITHOUT_CLASSIFICATION	1.7665403640543676E-4	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9996512485368599	WITHOUT_CLASSIFICATION	3.487514631400643E-4	DESIGN
then handle any user-defined entity modes	WITHOUT_CLASSIFICATION	0.9967128983863995	WITHOUT_CLASSIFICATION	0.003287101613600476	DESIGN
return currentid	WITHOUT_CLASSIFICATION	0.9993550692278699	WITHOUT_CLASSIFICATION	6.449307721301387E-4	DESIGN
reset the id	WITHOUT_CLASSIFICATION	0.99954676642774	WITHOUT_CLASSIFICATION	4.532335722600039E-4	DESIGN
origin.adddestination( destination ) this was the cause of hhh-242 origin.settype( from_fragment ) set the parent node type so that the ast is properly formed. the destination node will have all the from text. the parent node is a collection join too (voodoo - see joinprocessor)	WITHOUT_CLASSIFICATION	0.9981826273303198	WITHOUT_CLASSIFICATION	0.001817372669680278	DESIGN
reset the version	WITHOUT_CLASSIFICATION	0.9991914788471384	WITHOUT_CLASSIFICATION	8.085211528614549E-4	DESIGN
the default is to simply not lazy fetch properties for now	WITHOUT_CLASSIFICATION	0.9976973041903417	WITHOUT_CLASSIFICATION	0.0023026958096583083	DESIGN
add the second join the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999913043710433	WITHOUT_CLASSIFICATION	8.695628956734024E-6	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9817018612818537	WITHOUT_CLASSIFICATION	0.018298138718146294	DESIGN
found a ctor but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9998882694827944	WITHOUT_CLASSIFICATION	1.1173051720552357E-4	DESIGN
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.999575225033578	WITHOUT_CLASSIFICATION	4.247749664219728E-4	DESIGN
return getfactory().getsettings().getbytecodeprovider().getproxyfactoryfactory().buildproxyfactory()	WITHOUT_CLASSIFICATION	0.9994010633503159	WITHOUT_CLASSIFICATION	5.989366496841748E-4	DESIGN
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999836560060047	WITHOUT_CLASSIFICATION	1.63439939953261E-5	DESIGN
superclass entity-name	WITHOUT_CLASSIFICATION	0.9998309127996361	WITHOUT_CLASSIFICATION	1.690872003639696E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9817018612818537	WITHOUT_CLASSIFICATION	0.018298138718146294	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995487121138841	WITHOUT_CLASSIFICATION	4.512878861158206E-4	DESIGN
init the aliases after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999025604081768	WITHOUT_CLASSIFICATION	9.743959182312382E-5	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9817018612818537	WITHOUT_CLASSIFICATION	0.018298138718146294	DESIGN
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9996790550125497	WITHOUT_CLASSIFICATION	3.2094498745028916E-4	DESIGN
get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998399330751372	WITHOUT_CLASSIFICATION	1.6006692486286345E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995487121138841	WITHOUT_CLASSIFICATION	4.512878861158206E-4	DESIGN
note this affects the return value!	WITHOUT_CLASSIFICATION	0.9955460995211858	WITHOUT_CLASSIFICATION	0.004453900478814179	DESIGN
need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9998307905210106	WITHOUT_CLASSIFICATION	1.6920947898943164E-4	DESIGN
add the type to the list of returned sqlresulttypes.	WITHOUT_CLASSIFICATION	0.9998844572356721	WITHOUT_CLASSIFICATION	1.1554276432788883E-4	DESIGN
collection types	WITHOUT_CLASSIFICATION	0.9992873988060893	WITHOUT_CLASSIFICATION	7.126011939106658E-4	DESIGN
convenience methods relating to operations across arrays of types	WITHOUT_CLASSIFICATION	0.9998506859097941	WITHOUT_CLASSIFICATION	1.493140902058195E-4	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9997636693763678	WITHOUT_CLASSIFICATION	2.3633062363212292E-4	DESIGN
blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999015818074705	WITHOUT_CLASSIFICATION	9.841819252954509E-5	DESIGN
value is the entity name	WITHOUT_CLASSIFICATION	0.9997643913578278	WITHOUT_CLASSIFICATION	2.356086421721293E-4	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9996956049222961	WITHOUT_CLASSIFICATION	3.0439507770384857E-4	DESIGN
generate id select fragment and then property select fragment for each expression just like generateselectfragments().	WITHOUT_CLASSIFICATION	0.9642515409687739	WITHOUT_CLASSIFICATION	0.03574845903122619	DESIGN
todo!	WITHOUT_CLASSIFICATION	0.9996695162880856	WITHOUT_CLASSIFICATION	3.304837119143956E-4	DESIGN
xml is the entity name	WITHOUT_CLASSIFICATION	0.9983304863754353	WITHOUT_CLASSIFICATION	0.0016695136245646483	DESIGN
special case this is the leaf of the containment graph even though not immutable	WITHOUT_CLASSIFICATION	0.9979972980230742	WITHOUT_CLASSIFICATION	0.002002701976925759	DESIGN
tolerates nulls	WITHOUT_CLASSIFICATION	0.9997156943760551	WITHOUT_CLASSIFICATION	2.843056239448153E-4	DESIGN
sqlresulttypelist	WITHOUT_CLASSIFICATION	0.999514050864903	WITHOUT_CLASSIFICATION	4.859491350970499E-4	DESIGN
metatype is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9977349993043152	WITHOUT_CLASSIFICATION	0.0022650006956847985	DESIGN
get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9995111587076736	WITHOUT_CLASSIFICATION	4.888412923263997E-4	DESIGN
look through the fromelement's children to find any collections of values that should be fetched	WITHOUT_CLASSIFICATION	0.9980265576442375	WITHOUT_CLASSIFICATION	0.0019734423557624305	DESIGN
return associationtype.foreign_key_to_parent this is better but causes a transient object exception	WITHOUT_CLASSIFICATION	0.5285006653075204	WITHOUT_CLASSIFICATION	0.4714993346924796	DESIGN
use the lower case function name. remember whether we're in a select clause or not.	WITHOUT_CLASSIFICATION	0.9994440881843907	WITHOUT_CLASSIFICATION	5.559118156092919E-4	DESIGN
ident might be the name of a class.	WITHOUT_CLASSIFICATION	0.9747468823852569	WITHOUT_CLASSIFICATION	0.025253117614743113	DESIGN
todo!!!	WITHOUT_CLASSIFICATION	0.9996695162880856	WITHOUT_CLASSIFICATION	3.304837119143956E-4	DESIGN
st.settimestamp( index new timestamp( cal.gettimeinmillis() ) cal ) jdk 1.5 only	WITHOUT_CLASSIFICATION	0.9998536372388909	WITHOUT_CLASSIFICATION	1.463627611091859E-4	DESIGN
st.setdate( index new date( cal.gettimeinmillis() ) cal ) jdk 1.5 only	WITHOUT_CLASSIFICATION	0.9998536372388909	WITHOUT_CLASSIFICATION	1.463627611091859E-4	DESIGN
both are timestamps	WITHOUT_CLASSIFICATION	0.9991647271207494	WITHOUT_CLASSIFICATION	8.352728792505711E-4	DESIGN
at least one is a plain old date	WITHOUT_CLASSIFICATION	0.9996239477211042	WITHOUT_CLASSIFICATION	3.760522788958626E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9997592715933077	WITHOUT_CLASSIFICATION	2.4072840669233248E-4	DESIGN
if the corresponding sql value is null the reader we got is null as well	WITHOUT_CLASSIFICATION	0.9999994829858091	WITHOUT_CLASSIFICATION	5.170141909262092E-7	DESIGN
fetch reader content up to the end - and put characters in a stringbuffer	WITHOUT_CLASSIFICATION	0.9988612924487925	WITHOUT_CLASSIFICATION	0.0011387075512075337	DESIGN
return stringbuffer content as a large string	WITHOUT_CLASSIFICATION	0.9999695113684541	WITHOUT_CLASSIFICATION	3.0488631545795356E-5	DESIGN
or types.longvarchar?	WITHOUT_CLASSIFICATION	0.9997225663947011	WITHOUT_CLASSIFICATION	2.7743360529883254E-4	DESIGN
not called at runtime so doesn't matter if its slow )	WITHOUT_CLASSIFICATION	0.9998873174990347	WITHOUT_CLASSIFICATION	1.126825009653122E-4	DESIGN
todo	WITHOUT_CLASSIFICATION	0.6938108157348961	WITHOUT_CLASSIFICATION	0.30618918426510383	DESIGN
chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9995700268343838	WITHOUT_CLASSIFICATION	4.2997316561619464E-4	DESIGN
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9991539032964919	WITHOUT_CLASSIFICATION	8.460967035080226E-4	DESIGN
cache this	WITHOUT_CLASSIFICATION	0.996763374898524	WITHOUT_CLASSIFICATION	0.0032366251014760293	DESIGN
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9989659935468679	WITHOUT_CLASSIFICATION	0.0010340064531320584	DESIGN
forcefully remove leading ands from where fragments the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9997215275376773	WITHOUT_CLASSIFICATION	2.784724623227804E-4	DESIGN
todo!!!!!!!	WITHOUT_CLASSIFICATION	0.999514050864903	WITHOUT_CLASSIFICATION	4.859491350970499E-4	DESIGN
create a new filters node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9997464781319433	WITHOUT_CLASSIFICATION	2.5352186805668994E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995487121138841	WITHOUT_CLASSIFICATION	4.512878861158206E-4	DESIGN
public object instantiate(object parent sessionimplementor session) throws hibernateexception	WITHOUT_CLASSIFICATION	0.9968767617473114	WITHOUT_CLASSIFICATION	0.003123238252688596	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9996755267117391	WITHOUT_CLASSIFICATION	3.244732882609785E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9996755267117391	WITHOUT_CLASSIFICATION	3.244732882609785E-4	DESIGN
versiontype impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ note simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the timestamp datatype supported by sybase and sql server which are completely db-generated values	WITHOUT_CLASSIFICATION	0.9999990709979042	WITHOUT_CLASSIFICATION	9.290020957169867E-7	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9997636693763678	WITHOUT_CLASSIFICATION	2.3633062363212292E-4	DESIGN
not really necessary i guess	WITHOUT_CLASSIFICATION	0.6109972813879597	DESIGN	0.3890027186120403	WITHOUT_CLASSIFICATION
clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999952466049602	WITHOUT_CLASSIFICATION	4.753395039740102E-6	DESIGN
we do not have to worry about queued additions to uninitialized collections since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999188014539564	WITHOUT_CLASSIFICATION	8.119854604364588E-5	DESIGN
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9997885913209388	WITHOUT_CLASSIFICATION	2.114086790611597E-4	DESIGN
remember the uk value	WITHOUT_CLASSIFICATION	0.9948194566236507	WITHOUT_CLASSIFICATION	0.005180543376349321	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9997592715933077	WITHOUT_CLASSIFICATION	2.4072840669233248E-4	DESIGN
processcollectionproperty(token q.getcollectionpersister(collectionrole) collectionname)	WITHOUT_CLASSIFICATION	0.9995487121138841	WITHOUT_CLASSIFICATION	4.512878861158206E-4	DESIGN
we must use the "remembered" uk value since it is not available from the entityentry during assembly	WITHOUT_CLASSIFICATION	0.9997184551506841	WITHOUT_CLASSIFICATION	2.8154484931589073E-4	DESIGN
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.997010815199446	WITHOUT_CLASSIFICATION	0.0029891848005539224	DESIGN
return false	WITHOUT_CLASSIFICATION	0.9998495795981646	WITHOUT_CLASSIFICATION	1.50420401835436E-4	DESIGN
this just handles a particular case of component projection perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.5941088676614878	DESIGN	0.4058911323385122	WITHOUT_CLASSIFICATION
note we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9996732773044072	WITHOUT_CLASSIFICATION	3.267226955927419E-4	DESIGN
the key is the owning entity itself so get the id from the key	WITHOUT_CLASSIFICATION	0.9989192005615689	WITHOUT_CLASSIFICATION	0.001080799438431071	DESIGN
if the original is a persistentcollection and that original was not flagged as dirty then reset the target's dirty flag here after the copy operation. </p> one thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know	WITHOUT_CLASSIFICATION	0.9999877668567236	WITHOUT_CLASSIFICATION	1.2233143276389245E-5	DESIGN
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9998316198420754	WITHOUT_CLASSIFICATION	1.6838015792461288E-4	DESIGN
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9997738026159554	WITHOUT_CLASSIFICATION	2.2619738404468213E-4	DESIGN
for a null target or a target which is the same as the original we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999991376372782	WITHOUT_CLASSIFICATION	8.623627218392359E-7	DESIGN
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here	WITHOUT_CLASSIFICATION	0.9991562050867135	WITHOUT_CLASSIFICATION	8.437949132864314E-4	DESIGN
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999750773759943	WITHOUT_CLASSIFICATION	2.4922624005683574E-5	DESIGN
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9995600041533292	WITHOUT_CLASSIFICATION	4.399958466707771E-4	DESIGN
check if it is already completely loaded but unowned	WITHOUT_CLASSIFICATION	0.9998884080453713	WITHOUT_CLASSIFICATION	1.1159195462870315E-4	DESIGN
cache the actual id of the object not the value of the property-ref which might not be initialized	WITHOUT_CLASSIFICATION	0.9865191011671499	WITHOUT_CLASSIFICATION	0.013480898832850013	DESIGN
todo!!!!!!!	WITHOUT_CLASSIFICATION	0.999514050864903	WITHOUT_CLASSIFICATION	4.859491350970499E-4	DESIGN
create a new collection wrapper to be initialized later	WITHOUT_CLASSIFICATION	0.9581720362284529	WITHOUT_CLASSIFICATION	0.04182796377154709	DESIGN
some jdbc drivers erroneously return an empty array here for a null db value /	WITHOUT_CLASSIFICATION	0.9999297226842996	WITHOUT_CLASSIFICATION	7.027731570038641E-5	DESIGN
our column span is the number of columns in the pk	WITHOUT_CLASSIFICATION	0.99998339107923	WITHOUT_CLASSIFICATION	1.6608920770042302E-5	DESIGN
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9998914487677837	WITHOUT_CLASSIFICATION	1.0855123221623452E-4	DESIGN
we already know current is not null	WITHOUT_CLASSIFICATION	0.9928079665523952	WITHOUT_CLASSIFICATION	0.007192033447604743	DESIGN
the ids are fully resolved so compare them with isdirty() not ismodified()	WITHOUT_CLASSIFICATION	0.9618006239424374	WITHOUT_CLASSIFICATION	0.03819937605756273	DESIGN
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9997947621707827	WITHOUT_CLASSIFICATION	2.0523782921724087E-4	DESIGN
----------------------------------------------------------- constructors	WITHOUT_CLASSIFICATION	0.99802238115303	WITHOUT_CLASSIFICATION	0.001977618846970075	DESIGN
----------------------------------------------------- instance variables	WITHOUT_CLASSIFICATION	0.9999766430400265	WITHOUT_CLASSIFICATION	2.3356959973489343E-5	DESIGN
public static jdbcexception newjdbcexception(string string sqlexception root string sql) { string = string + " [" + sql + ']' log.error(string root) logexceptions(root) return new jdbcexception(string root sql) } public static jdbcexception newjdbcexception(string string sqlexception root) { log.error(string root) logexceptions(root) return new jdbcexception(string root) }	WITHOUT_CLASSIFICATION	0.9999448887500285	WITHOUT_CLASSIFICATION	5.511124997141421E-5	DESIGN
--------------------------------------------------------- public methods	WITHOUT_CLASSIFICATION	0.9954519375562666	WITHOUT_CLASSIFICATION	0.00454806244373335	DESIGN
compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9994018995166479	WITHOUT_CLASSIFICATION	5.981004833520982E-4	DESIGN
simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999877734706629	WITHOUT_CLASSIFICATION	1.2226529336937702E-5	DESIGN
sybase fail if we don't do that sigh	WITHOUT_CLASSIFICATION	0.9999305293080654	WITHOUT_CLASSIFICATION	6.947069193458127E-5	DESIGN
handles things like a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a b c ) (overloaded brackets) not not a a is not null (overloaded "not") etc and expressions like foo = bar (maps to foo.id = bar.id) foo.bar = 'foo' (maps to foo.bar = 'foo') foo.bar.baz = 1.0 (maps to foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.bar.baz (maps to bar.baz = 1.0 and foo.bar = bar.id) foo.bar.baz = a.b.c (maps to bar.baz = b.c and foo.bar = bar.id and a.b = b.id) foo.bar.baz + a.b.c (maps to bar.baz + b.c and foo.bar = bar.id and a.b = b.id) ( foo.bar.baz + 1.0 ) < 2.0 (maps to ( bar.baz + 1.0 ) < 2.0 and foo.bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999474566351784	WITHOUT_CLASSIFICATION	5.2543364821530626E-5	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9994713184948968	WITHOUT_CLASSIFICATION	5.286815051031615E-4	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9994713184948968	WITHOUT_CLASSIFICATION	5.286815051031615E-4	DESIGN
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9993864360834008	WITHOUT_CLASSIFICATION	6.135639165991342E-4	DESIGN
otherwise just dump it	WITHOUT_CLASSIFICATION	0.9993270590652079	WITHOUT_CLASSIFICATION	6.729409347921311E-4	DESIGN
its an interface so we can't really tell anything	WITHOUT_CLASSIFICATION	0.9995347528308733	WITHOUT_CLASSIFICATION	4.652471691266441E-4	DESIGN
its an interface so we can't really tell anything	WITHOUT_CLASSIFICATION	0.9995347528308733	WITHOUT_CLASSIFICATION	4.652471691266441E-4	DESIGN
use default behavior	WITHOUT_CLASSIFICATION	0.9987192522945169	WITHOUT_CLASSIFICATION	0.0012807477054831771	DESIGN
note early return	WITHOUT_CLASSIFICATION	0.9981322445746644	WITHOUT_CLASSIFICATION	0.0018677554253356387	DESIGN
the mru cache used to keep hard references to the most recently used query plans note lru here is a bit of a misnomer it indicates that lru entries are removed the actual kept entries are the mru entries	WITHOUT_CLASSIFICATION	0.6230299028864881	DESIGN	0.376970097113512	WITHOUT_CLASSIFICATION
we want to be able to just use the defaults if jndi environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9997773787243497	WITHOUT_CLASSIFICATION	2.2262127565031222E-4	DESIGN
clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9995558337639587	WITHOUT_CLASSIFICATION	4.4416623604124044E-4	DESIGN
serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9995974725835655	WITHOUT_CLASSIFICATION	4.0252741643441285E-4	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999817624440323	WITHOUT_CLASSIFICATION	1.8237555967790345E-5	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999817624440323	WITHOUT_CLASSIFICATION	1.8237555967790345E-5	DESIGN
deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999595664972504	WITHOUT_CLASSIFICATION	4.043350274960351E-4	DESIGN
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9900452259096884	WITHOUT_CLASSIFICATION	0.00995477409031172	DESIGN
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9989578375001876	WITHOUT_CLASSIFICATION	0.001042162499812339	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9995164576946469	WITHOUT_CLASSIFICATION	4.835423053531732E-4	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9995164576946469	WITHOUT_CLASSIFICATION	4.835423053531732E-4	DESIGN
includes last '.'	WITHOUT_CLASSIFICATION	0.9998338979374656	WITHOUT_CLASSIFICATION	1.66102062534442E-4	DESIGN
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999441091526282	WITHOUT_CLASSIFICATION	5.589084737170591E-5	DESIGN
impl note takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method	WITHOUT_CLASSIFICATION	0.9692017101610917	WITHOUT_CLASSIFICATION	0.030798289838908283	DESIGN
first time we find match!	WITHOUT_CLASSIFICATION	0.9998327083723787	WITHOUT_CLASSIFICATION	1.6729162762140317E-4	DESIGN
entitynames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9993783510279435	WITHOUT_CLASSIFICATION	6.216489720564922E-4	DESIGN
wrapped iterators	WITHOUT_CLASSIFICATION	0.9947254354690174	WITHOUT_CLASSIFICATION	0.005274564530982629	DESIGN
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9998626853191378	WITHOUT_CLASSIFICATION	1.3731468086220465E-4	DESIGN
the current iterator	WITHOUT_CLASSIFICATION	0.9999095427663085	WITHOUT_CLASSIFICATION	9.045723369143393E-5	DESIGN
the last used iterator	WITHOUT_CLASSIFICATION	0.9665349161329977	WITHOUT_CLASSIFICATION	0.03346508386700231	DESIGN
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9997503785390864	WITHOUT_CLASSIFICATION	2.4962146091360416E-4	DESIGN
public static object[] clone(class elementclass object[] array) {object[] result = (object[]) array.newinstance( elementclass array.length )system.arraycopy(array 0 result 0 array.length)return result}	WITHOUT_CLASSIFICATION	0.9999363894878148	WITHOUT_CLASSIFICATION	6.361051218512643E-5	DESIGN
call this before any iterator method to make sure that the current iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9989167980950704	WITHOUT_CLASSIFICATION	0.0010832019049295742	DESIGN
doable if needed	WITHOUT_CLASSIFICATION	0.9998739202575803	WITHOUT_CLASSIFICATION	1.26079742419787E-4	DESIGN
set last used iterator here in case the user calls remove before calling hasnext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.5628176747188279	WITHOUT_CLASSIFICATION	0.437182325281172	DESIGN
peek ahead	WITHOUT_CLASSIFICATION	0.9996271118357615	WITHOUT_CLASSIFICATION	3.7288816423858956E-4	DESIGN
if we reach the end of the string w/o finding the matching end that is an exception	WITHOUT_CLASSIFICATION	0.999937879103195	WITHOUT_CLASSIFICATION	6.212089680501096E-5	DESIGN
we have a placeholder spin forward till we find the end	WITHOUT_CLASSIFICATION	0.999723810836176	WITHOUT_CLASSIFICATION	2.7618916382405847E-4	DESIGN
make sure spinning forward did not put us past the end of the buffer	WITHOUT_CLASSIFICATION	0.9996750627712412	WITHOUT_CLASSIFICATION	3.249372287587551E-4	DESIGN
first try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9995740557306021	WITHOUT_CLASSIFICATION	4.2594426939795467E-4	DESIGN
next try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9869151432362502	WITHOUT_CLASSIFICATION	0.01308485676374986	DESIGN
next try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9877685371908281	WITHOUT_CLASSIFICATION	0.01223146280917177	DESIGN
anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9990289382388624	WITHOUT_CLASSIFICATION	9.710617611376586E-4	DESIGN
would need an identityset for this!	WITHOUT_CLASSIFICATION	0.9979020533307275	WITHOUT_CLASSIFICATION	0.0020979466692725964	DESIGN
arrays.aslist doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9960048586916233	WITHOUT_CLASSIFICATION	0.0039951413083767475	DESIGN
faster?	WITHOUT_CLASSIFICATION	0.9996695162880856	WITHOUT_CLASSIFICATION	3.304837119143956E-4	DESIGN
the name of a class	WITHOUT_CLASSIFICATION	0.9988807475249492	WITHOUT_CLASSIFICATION	0.0011192524750509004	DESIGN
its the listener class name	WITHOUT_CLASSIFICATION	0.9998555304522773	WITHOUT_CLASSIFICATION	1.4446954772277218E-4	DESIGN
allow 987654321	WITHOUT_CLASSIFICATION	0.9989157440454068	WITHOUT_CLASSIFICATION	0.001084255954593155	DESIGN
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.999885256438382	WITHOUT_CLASSIFICATION	1.1474356161797382E-4	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999586644294882	WITHOUT_CLASSIFICATION	4.1335570511809246E-5	DESIGN
in case we were deserialized in a different jvm look for an instance with the same name (alternatively we could do an actual jndi lookup here.)	WITHOUT_CLASSIFICATION	0.9368514413505051	WITHOUT_CLASSIFICATION	0.06314855864949484	DESIGN
first lets determine whether to apply cglib or javassist based instrumentation	WITHOUT_CLASSIFICATION	0.9999460651016076	WITHOUT_CLASSIFICATION	5.393489839245422E-5	DESIGN
make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9994441418951405	WITHOUT_CLASSIFICATION	5.558581048594483E-4	DESIGN
entirely optional!!	WITHOUT_CLASSIFICATION	0.9985833186214668	WITHOUT_CLASSIFICATION	0.0014166813785333107	DESIGN
its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9997767076913829	WITHOUT_CLASSIFICATION	2.2329230861709853E-4	DESIGN
context.unbind(boundname)	WITHOUT_CLASSIFICATION	0.999125213654425	WITHOUT_CLASSIFICATION	8.74786345574921E-4	DESIGN
readresolveobject	WITHOUT_CLASSIFICATION	0.999514050864903	WITHOUT_CLASSIFICATION	4.859491350970499E-4	DESIGN
cfg.setproperty("hibernate.show_sql" "true")	WITHOUT_CLASSIFICATION	0.9995600022236301	WITHOUT_CLASSIFICATION	4.399977763699539E-4	DESIGN
defensive convenience methods	WITHOUT_CLASSIFICATION	0.9995167314382674	WITHOUT_CLASSIFICATION	4.832685617326021E-4	DESIGN
create the sessionfactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9994920309288298	WITHOUT_CLASSIFICATION	5.079690711702244E-4	DESIGN
make sure you log the exception as it might be swallowed	WITHOUT_CLASSIFICATION	0.9998973288171995	WITHOUT_CLASSIFICATION	1.0267118280044624E-4	DESIGN
begin unit of work	WITHOUT_CLASSIFICATION	0.999779102005204	WITHOUT_CLASSIFICATION	2.20897994795979E-4	DESIGN
write html header	WITHOUT_CLASSIFICATION	0.998075529054663	WITHOUT_CLASSIFICATION	0.0019244709453369807	DESIGN
handle actions	WITHOUT_CLASSIFICATION	0.9992556674987377	WITHOUT_CLASSIFICATION	7.443325012623112E-4	DESIGN
print page	WITHOUT_CLASSIFICATION	0.9997256049916007	WITHOUT_CLASSIFICATION	2.743950083994295E-4	DESIGN
write html footer	WITHOUT_CLASSIFICATION	0.9996881022520757	WITHOUT_CLASSIFICATION	3.1189774792417496E-4	DESIGN
end unit of work	WITHOUT_CLASSIFICATION	0.9995784451740481	WITHOUT_CLASSIFICATION	4.2155482595187215E-4	DESIGN
start the session to be used for this request	WITHOUT_CLASSIFICATION	0.839393829016741	WITHOUT_CLASSIFICATION	0.16060617098325897	DESIGN
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9991385642047262	WITHOUT_CLASSIFICATION	8.61435795273742E-4	DESIGN
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999949120000278	WITHOUT_CLASSIFICATION	5.087999972186926E-6	DESIGN
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9945014390868389	WITHOUT_CLASSIFICATION	0.005498560913161198	DESIGN
eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9980377499891776	WITHOUT_CLASSIFICATION	0.0019622500108223717	DESIGN
if we want to handle it bidirectional and detached we also need to load this collection with an eager outer-join fetch this time with criteria and not hql	WITHOUT_CLASSIFICATION	0.9523681413827209	WITHOUT_CLASSIFICATION	0.047631858617279255	DESIGN
event anevent = (event) session .createcriteria(event.class).setfetchmode("participants" fetchmode.join) .add( expression.eq("id" eventid) ) .uniqueresult() eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9998168879309138	WITHOUT_CLASSIFICATION	1.8311206908612672E-4	DESIGN
end of first unit of work	WITHOUT_CLASSIFICATION	0.9996757956886622	WITHOUT_CLASSIFICATION	3.2420431133779623E-4	DESIGN
or bidirectional safety method setting both sides aperson.addtoevent(anevent)	WITHOUT_CLASSIFICATION	0.999864633499054	WITHOUT_CLASSIFICATION	1.3536650094598656E-4	DESIGN
begin second unit of work	WITHOUT_CLASSIFICATION	0.9996392822185625	WITHOUT_CLASSIFICATION	3.6071778143755224E-4	DESIGN
reattachment of aperson	WITHOUT_CLASSIFICATION	0.9992862553055986	WITHOUT_CLASSIFICATION	7.137446944014719E-4	DESIGN
the getemailaddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9906728601078842	WITHOUT_CLASSIFICATION	0.0093271398921157	DESIGN
we need our tm so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9992119117739374	WITHOUT_CLASSIFICATION	7.880882260626905E-4	DESIGN
don't hold the jbc node lock throughout the tx as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999597631674968	WITHOUT_CLASSIFICATION	4.023683250317522E-5	DESIGN
don't hold the jbc node lock throughout the tx as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999597631674968	WITHOUT_CLASSIFICATION	4.023683250317522E-5	DESIGN
jbc put a version in the node when it created as part of some internal operation. we are always newer but if the jbc version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999905558938877	WITHOUT_CLASSIFICATION	9.444106112265503E-6	DESIGN
swaldman 2006-08-28 define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999131986794317	WITHOUT_CLASSIFICATION	8.680132056822985E-5	DESIGN
not null if the isolation level has been specified in the configuration file. otherwise it is left to the driver's default value.	WITHOUT_CLASSIFICATION	0.999940068297877	WITHOUT_CLASSIFICATION	5.9931702123122656E-5	DESIGN
configured outside of hibernate (i.e. servlet container or java bean container already has proxool pools running and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9981925961751787	WITHOUT_CLASSIFICATION	0.0018074038248212284	DESIGN
if you're closing down the connectionprovider chances are an is not a real big deal just warn	WITHOUT_CLASSIFICATION	0.9999890035294423	WITHOUT_CLASSIFICATION	1.0996470557627919E-5	DESIGN
(as is always optional for consistency with sql/oql)	WITHOUT_CLASSIFICATION	0.9999344737476803	WITHOUT_CLASSIFICATION	6.552625231973224E-5	DESIGN
process the "new" hql style where aliases are assigned _after_ the class name or path expression ie. using the as construction	WITHOUT_CLASSIFICATION	0.9999999416794193	WITHOUT_CLASSIFICATION	5.8320580778136315E-8	DESIGN
the loaded owner will be set to null after the collection is removed so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999994602216077	WITHOUT_CLASSIFICATION	5.39778392287294E-7	DESIGN
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9980716759692898	WITHOUT_CLASSIFICATION	0.0019283240307101297	DESIGN
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9997440838656515	WITHOUT_CLASSIFICATION	2.559161343485203E-4	DESIGN
handle a path expression or class name that appears at the start in the "new" hql style or an alias that appears at the start in the "old" hql style	WITHOUT_CLASSIFICATION	0.9999432596345873	WITHOUT_CLASSIFICATION	5.674036541273363E-5	DESIGN
handle <= >= != is not not between not in	WITHOUT_CLASSIFICATION	0.9962746057409818	WITHOUT_CLASSIFICATION	0.0037253942590181714	DESIGN
the loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998278282012	WITHOUT_CLASSIFICATION	1.721717988202757E-7	DESIGN
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9995283035959288	WITHOUT_CLASSIFICATION	4.7169640407122284E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9996357567988668	WITHOUT_CLASSIFICATION	3.6424320113314165E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9996357567988668	WITHOUT_CLASSIFICATION	3.6424320113314165E-4	DESIGN
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9994429528422278	WITHOUT_CLASSIFICATION	5.570471577721808E-4	DESIGN
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9996023986094078	WITHOUT_CLASSIFICATION	3.9760139059225735E-4	DESIGN
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9997035773499028	WITHOUT_CLASSIFICATION	2.9642265009723377E-4	DESIGN
note special case default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999832344166234	WITHOUT_CLASSIFICATION	1.676558337658908E-5	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999694785586298	WITHOUT_CLASSIFICATION	3.0521441370187016E-5	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997815659505391	WITHOUT_CLASSIFICATION	2.1843404946085437E-4	DESIGN
void setcomponenttuplizerfactory(componenttuplizerfactory componenttuplizerfactory) { this.componenttuplizerfactory = componenttuplizerfactory }	WITHOUT_CLASSIFICATION	0.9998953739012068	WITHOUT_CLASSIFICATION	1.0462609879327293E-4	DESIGN
element index -> id	WITHOUT_CLASSIFICATION	0.9999944964358323	WITHOUT_CLASSIFICATION	5.503564167771529E-6	DESIGN
note that it might be better to iterate the snapshot but this is safe assuming the user implements equals() properly as required by the set contract!	WITHOUT_CLASSIFICATION	0.9830571658320291	WITHOUT_CLASSIFICATION	0.016942834167970915	DESIGN
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9993262274923208	WITHOUT_CLASSIFICATION	6.737725076792259E-4	DESIGN
essentially if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception note that allowing close() above has the same basic effect but we capture that there simply to perform the unbind	WITHOUT_CLASSIFICATION	0.9999999488103141	WITHOUT_CLASSIFICATION	5.118968597305219E-8	DESIGN
the default sqlexceptionconverter for all dialects is based on sqlstate since sqlerrorcode is extremely vendor-specific. specific dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999366553197269	WITHOUT_CLASSIFICATION	6.334468027317977E-5	DESIGN
only necessary for postgre < 7.4 httpanoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9982864129231904	WITHOUT_CLASSIFICATION	0.0017135870768095602	DESIGN
select topic syntax from information_schema.help where section like 'function%' order by section topic see also -> httpwww.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999973711977681	WITHOUT_CLASSIFICATION	2.62880223186146E-6	DESIGN
registercolumntype(types.varbinary "character($l)") registercolumntype(types.blob "character($l)" ) for use prior to cp 11.0 registercolumntype(types.clob "character($l)" )	WITHOUT_CLASSIFICATION	0.998561639860609	WITHOUT_CLASSIFICATION	0.0014383601393910125	DESIGN
the blob type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include k - kilobyte m - megabyte g - gigabyte. refer to the pbdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9825305992467982	WITHOUT_CLASSIFICATION	0.017469400753201813	DESIGN
we must return a valid rdms/rsa command from this method to prevent rdms/rsa from issuing error 400	WITHOUT_CLASSIFICATION	0.7701318899323262	WITHOUT_CLASSIFICATION	0.22986811006767388	DESIGN
oracle driver reports to support getgeneratedkeys() but they only support the version taking an array of the names of the columns to be returned (via its returning clause). no other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999057957511884	WITHOUT_CLASSIFICATION	9.420424881148772E-5	DESIGN
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999866677364027	WITHOUT_CLASSIFICATION	1.3332263597250402E-5	DESIGN
you may still have other resultsets or update counts left to process here but you can't do it now or the resultset you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999595343383	WITHOUT_CLASSIFICATION	4.046566166997404E-8	DESIGN
note for object <-> sql datatype mappings see configuration manager | advanced | sql | system ddl datatype mappings tbdregistercolumntype(types.binary "binary($1)") changed 08-11-2005 jsl	WITHOUT_CLASSIFICATION	0.9999642944180906	WITHOUT_CLASSIFICATION	3.5705581909458415E-5	DESIGN
trim(end_keyword string-expression-1 from string-expression-2) use hibernate implementation "from" is one of the parameters they pass in position ?3 registerfunction( "trim" new sqlfunctiontemplate(hibernate.string "trim(?1 ?2 from ?3)") )	WITHOUT_CLASSIFICATION	0.999954730270139	WITHOUT_CLASSIFICATION	4.5269729861033884E-5	DESIGN
whether this dialect has an identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.999973302568541	WITHOUT_CLASSIFICATION	2.6697431458961988E-5	DESIGN
according to both the ansi-sql and jpa specs trim takes a variable number of parameters between 1 and 4. at least one paramer (trimsource) is required. from the sql spec <trim function> = trim <left paren> <trim operands> <right paren> <trim operands> = [ [ <trim specification> ] [ <trim character> ] from ] <trim source> <trim specification> = leading | trailing | both if <trim specification> is omitted both is assumed. if <trim character> is omitted space is assumed	WITHOUT_CLASSIFICATION	0.9999999998977211	WITHOUT_CLASSIFICATION	1.0227879606633425E-10	DESIGN
/ prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9998574228262495	WITHOUT_CLASSIFICATION	1.425771737505304E-4	DESIGN
named queries	WITHOUT_CLASSIFICATION	0.9996885955468259	WITHOUT_CLASSIFICATION	3.11404453174086E-4	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.5436010458560627	WITHOUT_CLASSIFICATION	0.45639895414393744	DESIGN
does not handle arrays (thats ok cos they can't be lazy) or newly instantiated collections so we can do the cast	WITHOUT_CLASSIFICATION	0.99603070217733	WITHOUT_CLASSIFICATION	0.003969297822670063	DESIGN
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999897340701219	WITHOUT_CLASSIFICATION	1.0265929878075841E-5	DESIGN
we can do the cast since orphan-delete does not apply to 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9998453804851564	WITHOUT_CLASSIFICATION	1.5461951484361372E-4	DESIGN
if the natural-id is marked as non-mutable it is not retrieved during a normal database-snapshot operation	WITHOUT_CLASSIFICATION	0.9999974932628812	WITHOUT_CLASSIFICATION	2.5067371188012235E-6	DESIGN
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999981933733865	WITHOUT_CLASSIFICATION	1.8066266135100486E-6	DESIGN
slice to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9998202611094218	WITHOUT_CLASSIFICATION	1.797388905782958E-4	DESIGN
int result = 17 result = 37 result + type.hashcode() result = 37 result + ( value==null ? 0 value.hashcode() ) return result	WITHOUT_CLASSIFICATION	0.9999985473464228	WITHOUT_CLASSIFICATION	1.4526535772149864E-6	DESIGN
the collectionentry.isreached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9996045862654231	WITHOUT_CLASSIFICATION	3.954137345769659E-4	DESIGN
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9992328960371035	WITHOUT_CLASSIFICATION	7.671039628965618E-4	DESIGN
the unique property value represented here may or may not be serializable so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.956612171042597	DESIGN	0.043387828957402945	WITHOUT_CLASSIFICATION
if the version of a newly instantiated object is not the same as the version seed value use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.998096061000051	WITHOUT_CLASSIFICATION	0.0019039389999491094	DESIGN
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999806324840325	WITHOUT_CLASSIFICATION	1.9367515967597474E-5	DESIGN
ignore this row the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999849415770565	WITHOUT_CLASSIFICATION	1.5058422943568935E-5	DESIGN
entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently not yet used	WITHOUT_CLASSIFICATION	0.5650214360144786	DESIGN	0.43497856398552137	WITHOUT_CLASSIFICATION
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. besides it makes the code much easier to read than the old transactionhelper stuff	WITHOUT_CLASSIFICATION	0.9999983644186853	WITHOUT_CLASSIFICATION	1.6355813147750388E-6	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.999344749614601	WITHOUT_CLASSIFICATION	6.552503853989625E-4	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.999344749614601	WITHOUT_CLASSIFICATION	6.552503853989625E-4	DESIGN
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999987370637837	WITHOUT_CLASSIFICATION	1.2629362163183034E-6	DESIGN
remove any snapshot not really for memory management purposes but rather because it might now be stale and there is no longer any entityentry to take precedence this is now handled by removeentity() session.getpersistencecontext().removedatabasesnapshot(key)	WITHOUT_CLASSIFICATION	0.9180753583555153	WITHOUT_CLASSIFICATION	0.08192464164448458	DESIGN
skip this check for composite-ids relating to dom4j entity-mode alternatively we could add a check to make sure the incoming id value is an instance of element	WITHOUT_CLASSIFICATION	0.9966040985378442	WITHOUT_CLASSIFICATION	0.003395901462155856	DESIGN
upgrade the lock if necessary lock(result lockmode)	WITHOUT_CLASSIFICATION	0.9993985774070413	WITHOUT_CLASSIFICATION	6.014225929587865E-4	DESIGN
now any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9551583349849971	WITHOUT_CLASSIFICATION	0.04484166501500296	DESIGN
we must clone embedded composite identifiers or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9997792518920902	WITHOUT_CLASSIFICATION	2.2074810790979714E-4	DESIGN
sub-insertions should occur before containing insertion so try to do the callback now	WITHOUT_CLASSIFICATION	0.997898726217695	WITHOUT_CLASSIFICATION	0.0021012737823048874	DESIGN
the entity is not associated with the session so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9997487106112265	WITHOUT_CLASSIFICATION	2.512893887734657E-4	DESIGN
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9974753070017849	WITHOUT_CLASSIFICATION	0.0025246929982151427	DESIGN
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999861954206139	WITHOUT_CLASSIFICATION	1.380457938610463E-4	DESIGN
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998524665287916	WITHOUT_CLASSIFICATION	1.475334712084623E-4	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9666474591624239	WITHOUT_CLASSIFICATION	0.033352540837576106	DESIGN
if it is an uninitialized proxy pointing with this session then when it is accessed the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999103514377056	WITHOUT_CLASSIFICATION	8.964856229445482E-5	DESIGN
generate an explicit join for the root dot node. the implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999990369671754	WITHOUT_CLASSIFICATION	9.63032824651983E-7	DESIGN
a session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9976053794905636	WITHOUT_CLASSIFICATION	0.0023946205094364315	DESIGN
does the collection referenced by this fromelement specify an order-by attribute? if so attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999493231480084	WITHOUT_CLASSIFICATION	5.067685199164532E-5	DESIGN
and the token could be an identifer and the error is a mismatched token error	WITHOUT_CLASSIFICATION	0.9226193259195088	WITHOUT_CLASSIFICATION	0.07738067408049122	DESIGN
if a where clause was specified in the update/delete query use it to limit the returned ids here	WITHOUT_CLASSIFICATION	0.9999909208150773	WITHOUT_CLASSIFICATION	9.079184922576742E-6	DESIGN
int parameterstart = getwalker().getnumberofparametersinsetclause() list allparams = getidselectparameterspecifications() iterator whereparams = allparams.sublist( parameterstart allparams.size() ).iterator()	WITHOUT_CLASSIFICATION	0.9999899558524344	WITHOUT_CLASSIFICATION	1.004414756555834E-5	DESIGN
default implementation if this node has a data type and that data type is not an association then this is scalar.	WITHOUT_CLASSIFICATION	0.9989121312070216	WITHOUT_CLASSIFICATION	0.0010878687929784085	DESIGN
resolve the lhs fully generate implicit joins. pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9981881468385284	WITHOUT_CLASSIFICATION	0.001811853161471601	DESIGN
if the propertytype is null and there isn't a parent just stop now there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9998884489194714	WITHOUT_CLASSIFICATION	1.1155108052855037E-4	DESIGN
we do not look for an existing join on the same path because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9996208146724997	WITHOUT_CLASSIFICATION	3.7918532750028913E-4	DESIGN
our parent is another dot node meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's pk (because 'our' table would know the fk).	WITHOUT_CLASSIFICATION	0.9995706397246346	WITHOUT_CLASSIFICATION	4.2936027536547895E-4	DESIGN
public final currency getcurrency(int col) throws hibernateexception {return (currency) get(col)}	WITHOUT_CLASSIFICATION	0.999848204454165	WITHOUT_CLASSIFICATION	1.5179554583499762E-4	DESIGN
here we have two possibilities 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9998618239496656	WITHOUT_CLASSIFICATION	1.3817605033434514E-4	DESIGN
set the unresolved path in this node and the parent. set the text for the parent.	WITHOUT_CLASSIFICATION	0.998566111029539	WITHOUT_CLASSIFICATION	0.0014338889704610623	DESIGN
get the first child to be considered. sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. distinct).	WITHOUT_CLASSIFICATION	0.995662082217808	WITHOUT_CLASSIFICATION	0.004337917782191933	DESIGN
if this is an entity and the property is the identifier property then use getidentifiertype(). note that the propertyname.equals( propertypath ) checks whether we have a component key reference where the component class property name is the same as the entity id property name if the two are not equal this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9985310302689785	WITHOUT_CLASSIFICATION	0.0014689697310216192	DESIGN
for a subquery the alias to use depends on a few things (we already know this is not an overall select) 1) if this from_element represents a correlation to the outer-most query a) if the outer query represents a multi-table persister we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) b) otherwise we need to use the persister's table name as the column qualification 2) otherwise (not correlated) use the given alias	WITHOUT_CLASSIFICATION	0.820606383002447	DESIGN	0.179393616997553	WITHOUT_CLASSIFICATION
not a collection? return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9923407563276336	WITHOUT_CLASSIFICATION	0.0076592436723663575	DESIGN
collection of <many-to-any/> mappings used to circumvent the component-collection check below	WITHOUT_CLASSIFICATION	0.9427510389275344	WITHOUT_CLASSIFICATION	0.05724896107246559	DESIGN
otherwise the destination node was implied by the from clause and the from clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999839701791983	WITHOUT_CLASSIFICATION	1.6029820801695446E-5	DESIGN
if the first identifier in the path referrs to the class alias (not the class name) then this is a correlated subselect. if it's a correlated sub-select use the existing table alias. otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9238699006223765	WITHOUT_CLASSIFICATION	0.07613009937762351	DESIGN
check to see if our "proppath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9989017830619876	WITHOUT_CLASSIFICATION	0.0010982169380123388	DESIGN
an ident node can represent an index expression if the ident represents a naked property ref note this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrexpr -> resolve()). the other option if that changes is to call resolve from here but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9976101393063677	WITHOUT_CLASSIFICATION	0.0023898606936324273	DESIGN
this uses a pathexpressionparser but notice that compound paths are not valid only bare names and simple paths	WITHOUT_CLASSIFICATION	0.9995739422465914	WITHOUT_CLASSIFICATION	4.2605775340871685E-4	DESIGN
if this is an implied join in a from clause then use ansi-style joining and set the flag on the fromelement that indicates that it was implied in the from clause itself.	WITHOUT_CLASSIFICATION	0.9988143418654342	WITHOUT_CLASSIFICATION	0.0011856581345658622	DESIGN
origin.adddestination(destination) add the query spaces.	WITHOUT_CLASSIFICATION	0.9999365635458604	WITHOUT_CLASSIFICATION	6.343645413968191E-5	DESIGN
for an explicit many-to-many relationship add a second join from the intermediate (many-to-many) table to the destination table. also make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999990351884418	WITHOUT_CLASSIFICATION	9.64811558197743E-7	DESIGN
reset the node type because the rest of the system is expecting from_fragment all we wanted was for the factory to create the right sub-class. this might get reset again later on anyway to make the sql generation simpler.	WITHOUT_CLASSIFICATION	0.9426589029456756	WITHOUT_CLASSIFICATION	0.05734109705432451	DESIGN
explicit = true this is an explict select. arraylist sqlresulttypelist = new arraylist()	WITHOUT_CLASSIFICATION	0.9998483313436519	WITHOUT_CLASSIFICATION	1.5166865634814428E-4	DESIGN
sqlresulttypelist.add( type ) generate the select expression.	WITHOUT_CLASSIFICATION	0.9983984803041113	WITHOUT_CLASSIFICATION	0.0016015196958887225	DESIGN
if the expression list has exactly one expression and the type of the expression is a collection then this might be a collection function such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.999835584965616	WITHOUT_CLASSIFICATION	1.6441503438399693E-4	DESIGN
need to parse off the column qualifiers this is assuming (which is true as of now) that this is only used from update and delete hql statement parsing	WITHOUT_CLASSIFICATION	0.9910657934594962	WITHOUT_CLASSIFICATION	0.00893420654050385	DESIGN
for regression testing against output from the old parser found it easiest to simply reorder the fromelements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser this is definitely another of those "only needed for regression purposes". the syntheticandfactory then simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999907157157489	WITHOUT_CLASSIFICATION	9.284284251089214E-6	DESIGN
the uber-rule here is that we need to include subclass joins if the fromelement is in any way dereferenced by a property from the subclass table otherwise we end up with column references qualified by a non-existent table reference in the resulting sql	WITHOUT_CLASSIFICATION	0.9931593687620056	WITHOUT_CLASSIFICATION	0.006840631237994371	DESIGN
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9921107856093112	WITHOUT_CLASSIFICATION	0.00788921439068874	DESIGN
the following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999172942085139	WITHOUT_CLASSIFICATION	8.270579148613355E-5	DESIGN
the loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998278282012	WITHOUT_CLASSIFICATION	1.721717988202757E-7	DESIGN
should not be able to reach last without maxposition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9970405767574924	WITHOUT_CLASSIFICATION	0.0029594232425076304	DESIGN
we found it in the temp pc. should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999296533854192	WITHOUT_CLASSIFICATION	7.034661458077041E-5	DESIGN
do not use proxiesbykey since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9984439769226358	WITHOUT_CLASSIFICATION	0.001556023077364205	DESIGN
if there is no tm configured we will not be able to access the javax.transaction.transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.999945462326066	WITHOUT_CLASSIFICATION	5.453767393410995E-5	DESIGN
since the result set cursor is always left at the first physical row after the "last processed" we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999998909880926	WITHOUT_CLASSIFICATION	1.0901190733364518E-7	DESIGN
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a collectioninitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999270005217832	WITHOUT_CLASSIFICATION	7.29994782168767E-5	DESIGN
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode none)	WITHOUT_CLASSIFICATION	0.999459696940548	WITHOUT_CLASSIFICATION	5.403030594519208E-4	DESIGN
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9996450178358554	WITHOUT_CLASSIFICATION	3.549821641447035E-4	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9998727332059049	WITHOUT_CLASSIFICATION	1.2726679409511062E-4	DESIGN
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9988188966851433	WITHOUT_CLASSIFICATION	0.001181103314856656	DESIGN
ps.close() just close it do not try to return it to the pool! note early exit!	WITHOUT_CLASSIFICATION	0.9998813869159807	WITHOUT_CLASSIFICATION	1.1861308401918069E-4	DESIGN
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through hibernate's registered transaction synchronization on a separate "reaping" thread. in cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these cmes occur. and though it is not "allowed" per-se the end result without handling it specifically is infinite looping. so here we simply break the loop	WITHOUT_CLASSIFICATION	0.999999505433136	WITHOUT_CLASSIFICATION	4.94566864060571E-7	DESIGN
unfortunately this stuff can't be cached because it is per-invocation not constant for the querytranslator instance	WITHOUT_CLASSIFICATION	0.9999646629183369	WITHOUT_CLASSIFICATION	3.533708166315826E-5	DESIGN
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9998385364690542	WITHOUT_CLASSIFICATION	1.614635309457947E-4	DESIGN
don't create a unique key 'cos some databases don't like a uk on nullable columns getcollectiontable().createuniquekey( getidentifier().getconstraintcolumns() )	WITHOUT_CLASSIFICATION	0.9920549474644266	WITHOUT_CLASSIFICATION	0.007945052535573502	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or entityinfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997778476854045	WITHOUT_CLASSIFICATION	2.221523145954616E-4	DESIGN
isset = collection.isset() issorted = collection.issorted()	WITHOUT_CLASSIFICATION	0.9999099371022585	WITHOUT_CLASSIFICATION	9.006289774160003E-5	DESIGN
lists arrays sets maps bags	WITHOUT_CLASSIFICATION	0.9932487162975467	WITHOUT_CLASSIFICATION	0.006751283702453268	DESIGN
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9994450517238014	WITHOUT_CLASSIFICATION	5.549482761986607E-4	DESIGN
use a combination of foreign key columns and pk columns since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9983452827710583	WITHOUT_CLASSIFICATION	0.0016547172289417213	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or entityinfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997778476854045	WITHOUT_CLASSIFICATION	2.221523145954616E-4	DESIGN
information about properties of this class including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9634135632405593	WITHOUT_CLASSIFICATION	0.036586436759440615	DESIGN
all this only really needs to consider properties of this class not its subclasses but since we are reusing code used for sequential selects we use the subclass closure	WITHOUT_CLASSIFICATION	0.9967350761392608	DESIGN	0.0032649238607391174	WITHOUT_CLASSIFICATION
here we render the select column list based on the properties defined as being generated. for partial component generation we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9851926019103208	WITHOUT_CLASSIFICATION	0.01480739808967931	DESIGN
this is the root (versioned) table and we are using version-based optimistic locking if we are not updating the version also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.996284524903103	WITHOUT_CLASSIFICATION	0.0037154750968969945	DESIGN
optimistic-lock="all" include all updatable properties optimistic-lock="dirty" include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9996727214655694	WITHOUT_CLASSIFICATION	3.2727853443056075E-4	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9914911359572255	WITHOUT_CLASSIFICATION	0.008508864042774556	DESIGN
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a jta transaction context so must be autocommit mode)	WITHOUT_CLASSIFICATION	0.9982261604074169	WITHOUT_CLASSIFICATION	0.0017738395925831557	DESIGN
need to treat this as if it where optimistic-lock="all" (dirty does not make sense) first we need to locate the "loaded" state note it potentially could be a proxy so perform the location the safe way	WITHOUT_CLASSIFICATION	0.8538084531768004	WITHOUT_CLASSIFICATION	0.14619154682319957	DESIGN
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9998432301995421	WITHOUT_CLASSIFICATION	1.5676980045781444E-4	DESIGN
need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. using the collection's key type causes problems with property-ref keys	WITHOUT_CLASSIFICATION	0.9997571925352893	WITHOUT_CLASSIFICATION	2.4280746471058967E-4	DESIGN
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9976888818196247	WITHOUT_CLASSIFICATION	0.002311118180375389	DESIGN
following doesn't handle (null not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9977648611314777	WITHOUT_CLASSIFICATION	0.0022351388685223207	DESIGN
impl note due to the delayed population of setters (setters cached for performance) we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999080701194336	WITHOUT_CLASSIFICATION	9.192988056641779E-5	DESIGN
we need to dirty check collections since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9998788270888506	WITHOUT_CLASSIFICATION	1.2117291114939759E-4	DESIGN
return the id so we can use it to reset the proxy id return result	WITHOUT_CLASSIFICATION	0.999785616571551	WITHOUT_CLASSIFICATION	2.14383428448946E-4	DESIGN
optimizer = getfactory().getsettings().getbytecodeprovider().getreflectionoptimizer( mappedclass getternames setternames proptypes )	WITHOUT_CLASSIFICATION	0.9998665903861508	WITHOUT_CLASSIFICATION	1.334096138491465E-4	DESIGN
cache the actual id of the object not the value of the property-ref which might not be initialized	WITHOUT_CLASSIFICATION	0.9865191011671499	WITHOUT_CLASSIFICATION	0.013480898832850013	DESIGN
we now have the value of the property-ref we reference. however we need to dig a little deeper as that property might also be an entity type in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9930182777466457	WITHOUT_CLASSIFICATION	0.006981722253354242	DESIGN
retrieve the value of the designated column in the current row of this resultset object as a java.io.reader object	WITHOUT_CLASSIFICATION	0.9999836842715759	WITHOUT_CLASSIFICATION	1.6315728424145287E-5	DESIGN
not absolutely necessary but helps for some equals()/hashcode() implementations	WITHOUT_CLASSIFICATION	0.9946131821593025	WITHOUT_CLASSIFICATION	0.0053868178406975605	DESIGN
this should be a call to resolve() not resolveidentifier() 'cos it might be a property-ref and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9836874563528047	WITHOUT_CLASSIFICATION	0.016312543647195313	DESIGN
if we have <tt>not-found="ignore"</tt> association mapped to a formula we always need to dirty check it so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9995281916786196	WITHOUT_CLASSIFICATION	4.718083213802869E-4	DESIGN
can't just return null here since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999736267551382	WITHOUT_CLASSIFICATION	2.637324486169075E-5	DESIGN
for arrays replaceelements() may return a different reference since the array length might not match	WITHOUT_CLASSIFICATION	0.9924766278663746	WITHOUT_CLASSIFICATION	0.007523372133625472	DESIGN
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the mru entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9774358000906577	WITHOUT_CLASSIFICATION	0.022564199909342386	DESIGN
as soon as we encounter our first letter return the substring from that position	WITHOUT_CLASSIFICATION	0.9999143490049706	WITHOUT_CLASSIFICATION	8.565099502947333E-5	DESIGN
note expected in the syntax type=listenerclass ({sep}type=listenerclass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999685340656721	WITHOUT_CLASSIFICATION	3.146593432797715E-5	DESIGN
istransactioncallbackregistered denotes whether any hibernate transaction has registered as a callback against this jdbccontext only one such callback is allowed. directly serializing this value causes problems with jdbctransaction or really any transaction impl where the callback is local to the transaction instance itself since that transaction is not serialized along with the jdbccontext. thus we handle that fact here explicitly	WITHOUT_CLASSIFICATION	0.9992955818843717	WITHOUT_CLASSIFICATION	7.044181156282812E-4	DESIGN
note that for sequential scrolling we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9931596833651197	WITHOUT_CLASSIFICATION	0.00684031663488023	DESIGN
we call getkeyfromresultset() here so that we can know the key value upon which to perform the breaking logic. however it is also then called from getrowfromresultset() which is certainly not the most efficient. but the call here is needed and there currently is no other way without refactoring of the doquery()/getrowfromresultset() methods	WITHOUT_CLASSIFICATION	0.6951783577414642	WITHOUT_CLASSIFICATION	0.3048216422585359	DESIGN
this check is needed since processing leaves the cursor after the last physical row for the current logical row thus if we are after the last physical row this might be caused by either 1) scrolling to the last logical row 2) scrolling past the last logical row in the latter scenario the previous logical row really is the last logical row. in all other cases we should process back two logical records (the current logic row plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9960006274114149	WITHOUT_CLASSIFICATION	0.003999372588584982	DESIGN
and perform the load	WITHOUT_CLASSIFICATION	0.9993447694445919	WITHOUT_CLASSIFICATION	6.55230555408028E-4	DESIGN
important reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999241295916313	WITHOUT_CLASSIFICATION	7.587040836865178E-5	DESIGN
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9926075448914304	WITHOUT_CLASSIFICATION	0.00739245510856952	DESIGN
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9992822176473201	WITHOUT_CLASSIFICATION	7.177823526799565E-4	DESIGN
we did not find a collection element in the result set so we ensure that a collection is created with the owner's identifier since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999962125913537	WITHOUT_CLASSIFICATION	3.7874086463390277E-6	DESIGN
this is a collection initializer so we must create a collection for each of the passed-in keys to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9842742883925328	WITHOUT_CLASSIFICATION	0.015725711607467233	DESIGN
grab its state from the resultset and keep it in the session (but don't yet initialize the object itself) note that we acquire lockmode.read even if it was not requested	WITHOUT_CLASSIFICATION	0.999456059545624	WITHOUT_CLASSIFICATION	5.439404543759812E-4	DESIGN
a many-to-many decrement currentdepth here to allow join across the association table without exceeding max_fetch_depth (i.e. the "currentdepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9992045192699471	WITHOUT_CLASSIFICATION	7.954807300529183E-4	DESIGN
if not a composite key use "foo in (? ? ?)" for batching if no batch and not a composite key use "foo = ?"	WITHOUT_CLASSIFICATION	0.9965509067496403	WITHOUT_CLASSIFICATION	0.0034490932503597215	DESIGN
the user visible aliases which are unknown to the superclass these are not the actual "physical" sql aliases	WITHOUT_CLASSIFICATION	0.9999999046029299	WITHOUT_CLASSIFICATION	9.539707010573934E-8	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999765036139991	WITHOUT_CLASSIFICATION	2.3496386000922327E-5	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999765036139991	WITHOUT_CLASSIFICATION	2.3496386000922327E-5	DESIGN
it does not refer to an alias of a projection look for a property	WITHOUT_CLASSIFICATION	0.9996875874464536	WITHOUT_CLASSIFICATION	3.1241255354641544E-4	DESIGN
determine if the collection elements are entities	WITHOUT_CLASSIFICATION	0.9999559198067778	WITHOUT_CLASSIFICATION	4.4080193222132005E-5	DESIGN
let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9993738517515444	WITHOUT_CLASSIFICATION	6.261482484555878E-4	DESIGN
translates an ast join type (i.e. the token type) into a joinfragment.xxx join type. @param astjointype the ast join type (from hqlsqltokentypes or sqltokentypes) @return a joinfragment.xxx join type. @see joinfragment @see sqltokentypes	WITHOUT_CLASSIFICATION	0.9996628567679483	WITHOUT_CLASSIFICATION	3.371432320516895E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.999927327176818	WITHOUT_CLASSIFICATION	7.267282318199849E-5	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.999927327176818	WITHOUT_CLASSIFICATION	7.267282318199849E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.999608067989599	WITHOUT_CLASSIFICATION	3.9193201040102406E-4	DESIGN
public list getcollectionaliases() { return collectionaliases } public list getcollectionowners() { return collectionowners } public list getcollectionowneraliases() { return collectionowneraliases } public list getcollectionpersisters() { return collectionpersisters } public map getalias2persister() { return alias2persister } public boolean iscollectioninitializer() { return iscollectioninitializer } public list getpersisters() { return persisters } public map getalias2owneralias() { return alias2owneralias } public list getscalartypes() { return scalartypes } public list getscalarcolumnaliases() { return scalarcolumnaliases } public list getpropertyresults() { return propertyresults } public list getcollectionpropertyresults() { return collectionresults } public map getalias2return() { return alias2return }	WITHOUT_CLASSIFICATION	0.9989855993147116	WITHOUT_CLASSIFICATION	0.0010144006852883351	DESIGN
sqlqueryparser parser = new sqlqueryparser( sqlquery processor.getalias2persister() processor.getalias2return() aliases collaliases collpersisters suffixes collsuffixes ) sql = parser.process() namedparameterbindpoints = parser.getnamedparameters()	WITHOUT_CLASSIFICATION	0.9997390489163421	WITHOUT_CLASSIFICATION	2.609510836578125E-4	DESIGN
include the discriminator and class-level where but not filters	WITHOUT_CLASSIFICATION	0.9999359359844108	WITHOUT_CLASSIFICATION	6.406401558926312E-5	DESIGN
sqlaliassuffixes[i] = element.getcolumnaliassuffix()	WITHOUT_CLASSIFICATION	0.9999099371022585	WITHOUT_CLASSIFICATION	9.006289774160003E-5	DESIGN
none because its the requested lock mode not the actual!	WITHOUT_CLASSIFICATION	0.9998707264659262	WITHOUT_CLASSIFICATION	1.2927353407367922E-4	DESIGN
at this point we have (drivingsqlalias) the sql alias of the driving table corresponding to the given user alias. however the driving table is not (necessarily) the table against which we want to apply locks. mainly the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999733611304162	WITHOUT_CLASSIFICATION	2.6638869583870387E-5	DESIGN
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999048374820471	WITHOUT_CLASSIFICATION	9.516251795298737E-5	DESIGN
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.999890722815045	WITHOUT_CLASSIFICATION	1.0927718495502417E-4	DESIGN
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9983938165512714	WITHOUT_CLASSIFICATION	0.0016061834487287156	DESIGN
both many-to-one and one-to-one are represented as a property. entitypersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. so we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. the other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. if that assertion changes then this check needs to change as well. partially this is an issue with the overloading of the term "lazy" here	WITHOUT_CLASSIFICATION	0.9998229753926634	DESIGN	1.7702460733659922E-4	WITHOUT_CLASSIFICATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999821104544159	WITHOUT_CLASSIFICATION	1.788954558417636E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999821104544159	WITHOUT_CLASSIFICATION	1.788954558417636E-5	DESIGN
roottablename = persistentclass.getroottable().getqualifiedname( factory.getdialect() factory.getdefaultcatalog() factory.getdefaultschema() )	WITHOUT_CLASSIFICATION	0.9998665903861508	WITHOUT_CLASSIFICATION	1.334096138491465E-4	DESIGN
subclasses	WITHOUT_CLASSIFICATION	0.999805447379705	WITHOUT_CLASSIFICATION	1.945526202950499E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999795052209033	WITHOUT_CLASSIFICATION	2.0494779096816298E-5	DESIGN
protected void initpropertypaths(final string pathfinal type typefinal string[] columnsfinal string[] formulatemplatesfinal mapping factory)throws mappingexception {addformulapropertypath(path type formulatemplates)initpropertypaths(path type columns formulatemplates factory)}	WITHOUT_CLASSIFICATION	0.9997551631773512	WITHOUT_CLASSIFICATION	2.448368226487989E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995487121138841	WITHOUT_CLASSIFICATION	4.512878861158206E-4	DESIGN
custom sql (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9997276580224322	WITHOUT_CLASSIFICATION	2.7234197756777136E-4	DESIGN
moved up from abstractentitypersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.992485666769129	WITHOUT_CLASSIFICATION	0.007514333230871043	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995487121138841	WITHOUT_CLASSIFICATION	4.512878861158206E-4	DESIGN
aliases for identifier ( alias.id ) skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999081405793212	WITHOUT_CLASSIFICATION	9.185942067884488E-5	DESIGN
decide which resultset to get the property value from	WITHOUT_CLASSIFICATION	0.9999246198625301	WITHOUT_CLASSIFICATION	7.53801374699769E-5	DESIGN
note it is conceptually possible that a usertype could map null to a non-null value so the following is arguable	WITHOUT_CLASSIFICATION	0.9984755493341463	WITHOUT_CLASSIFICATION	0.001524450665853741	DESIGN
the contract of entitytuplizer.determineconcretesubclassentityname says that returning null is an indication that the specified entity-name (this.getentityname) should be used.	WITHOUT_CLASSIFICATION	0.960385913884068	WITHOUT_CLASSIFICATION	0.039614086115931965	DESIGN
need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. using the collection's key type causes problems with property-ref keys	WITHOUT_CLASSIFICATION	0.9997571925352893	WITHOUT_CLASSIFICATION	2.4280746471058967E-4	DESIGN
cache these since they are stateless this one could even be static	WITHOUT_CLASSIFICATION	0.7253867345645109	WITHOUT_CLASSIFICATION	0.2746132654354891	DESIGN
"as" is not in keywords	WITHOUT_CLASSIFICATION	0.9949273308216036	WITHOUT_CLASSIFICATION	0.0050726691783964965	DESIGN
--commented out by inspection (12/4/04 910 am) public abstract void addcondition(string alias string[] columns string condition)	WITHOUT_CLASSIFICATION	0.9999937467888286	WITHOUT_CLASSIFICATION	6.253211171543581E-6	DESIGN
use the id column alias	WITHOUT_CLASSIFICATION	0.9998882874874264	WITHOUT_CLASSIFICATION	1.1171251257355951E-4	DESIGN
private list aliases = new arraylist()	WITHOUT_CLASSIFICATION	0.9999345207888662	WITHOUT_CLASSIFICATION	6.547921113376427E-5	DESIGN
columns.add(columnname) aliases.add(tablealias)	WITHOUT_CLASSIFICATION	0.9995487121138841	WITHOUT_CLASSIFICATION	4.512878861158206E-4	DESIGN
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9573412862568588	WITHOUT_CLASSIFICATION	0.042658713743141216	DESIGN
revert to traditional hibernate behavior of setting initialpoolsize to minpoolsize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9994724206833967	WITHOUT_CLASSIFICATION	5.275793166032445E-4	DESIGN
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999238003895725	WITHOUT_CLASSIFICATION	7.619961042745196E-5	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9947078972762923	WITHOUT_CLASSIFICATION	0.0052921027237078	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9947078972762923	WITHOUT_CLASSIFICATION	0.0052921027237078	DESIGN
if an exception occurs during flush user must call rollback()	WITHOUT_CLASSIFICATION	0.99998052385095	WITHOUT_CLASSIFICATION	1.947614904994762E-5	DESIGN
essentially 1) if we have a local (hibernate) transaction in progress and it already has the usertransaction cached use that usertransaction to determine the status. 2) if a transaction manager has been located use that transaction manager to determine the status. 3) finally as the last resort try to lookup the usertransaction via jndi and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999996606309111	WITHOUT_CLASSIFICATION	3.3936908894279026E-7	DESIGN
package	WITHOUT_CLASSIFICATION	0.998999143842101	WITHOUT_CLASSIFICATION	0.0010008561578989529	DESIGN
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9998489461562573	WITHOUT_CLASSIFICATION	1.510538437426637E-4	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9999136802164721	WITHOUT_CLASSIFICATION	8.631978352788289E-5	DESIGN
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database) since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.5525180428073255	DESIGN	0.4474819571926743	WITHOUT_CLASSIFICATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999887852359527	WITHOUT_CLASSIFICATION	1.1214764047290248E-4	DESIGN
regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed) so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.999996823643291	WITHOUT_CLASSIFICATION	3.1763567088819894E-6	DESIGN
then handle any user-defined entity modes	WITHOUT_CLASSIFICATION	0.9967128983863995	WITHOUT_CLASSIFICATION	0.003287101613600476	DESIGN
establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9993416868258649	WITHOUT_CLASSIFICATION	6.583131741352359E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9817018612818537	WITHOUT_CLASSIFICATION	0.018298138718146294	DESIGN
note this is being used from the process of shutting down a sessionfactory. specific things to consider (1) this clearing of the region should not propagate to other nodes on the cluster (if any) this is the cache-mode-local option bit (2) really just trying a best effort to cleanup after ourselves lock failures etc are not critical here this is the fail-silently option bit	WITHOUT_CLASSIFICATION	0.9999612678915494	DESIGN	3.873210845065686E-5	WITHOUT_CLASSIFICATION
need to extract the component values and check for subtype replacements	WITHOUT_CLASSIFICATION	0.9996070110497347	WITHOUT_CLASSIFICATION	3.9298895026531374E-4	DESIGN
we ignore minimalputoverride. jbosscache putforexternalread is already about as minimal as we can get it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999951689907013	WITHOUT_CLASSIFICATION	4.831009298664622E-6	DESIGN
for now just "re-flatten" the metamodel since this is temporary stuff anyway (hhh-1907)	WITHOUT_CLASSIFICATION	0.9667234490037009	WITHOUT_CLASSIFICATION	0.03327655099629907	DESIGN
configure the cache to use our tm	WITHOUT_CLASSIFICATION	0.9995787234229253	WITHOUT_CLASSIFICATION	4.2127657707463157E-4	DESIGN
this solution would allow us to eliminate the owner arg to disassemble() but what if the collection was null and then later had elements added? seems unsafe session.getpersistencecontext().getcollectionentry( (persistentcollection) value ).getkey()	WITHOUT_CLASSIFICATION	0.9422289177404757	WITHOUT_CLASSIFICATION	0.05777108225952431	DESIGN
make sure jbc doesn't look one up	WITHOUT_CLASSIFICATION	0.9997514103141584	WITHOUT_CLASSIFICATION	2.48589685841649E-4	DESIGN
some collections are not lazy	WITHOUT_CLASSIFICATION	0.9929545759663739	WITHOUT_CLASSIFICATION	0.007045424033626102	DESIGN
here we don't want to suspend the tx. if we do 1) we might be caching query results that reflect uncommitted changes. no tx == no wl on cache node so other threads can prematurely see those query results 2) no tx == immediate replication. more overhead plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.8042054525287233	WITHOUT_CLASSIFICATION	0.1957945474712767	DESIGN
return the (fully resolved) identifier value but do not resolve to the actual referenced entity instance note the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9988824705420469	WITHOUT_CLASSIFICATION	0.0011175294579530998	DESIGN
add a zero (or quite low) timeout option so we don't block. ignore any timeoutexception. basically we forego caching the query result in order to avoid blocking. reads are done with suspended tx so they should not hold the lock for long. not caching the query result is ok since any subsequent read will just see the old result with its out-of-date timestamp that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999999996849805	WITHOUT_CLASSIFICATION	3.15019505577702E-10	DESIGN
impl note takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method	WITHOUT_CLASSIFICATION	0.9692017101610917	WITHOUT_CLASSIFICATION	0.030798289838908283	DESIGN
we have the jbcwritemutex so no other local thread will be trying to write this key. it's possible here some remote thread has come in and changed the values again but since we are reading the values to write to jbc right now we know we are writing the latest values i.e. we don't assume that what we cached in entry.update() above is what we should write to jbc now. our write could be redundant i.e. we are writing what some remote thread just came in an wrote. there is a chance that yet another remote thread will update us and we'll then overwrite that later data in jbc. but all remote nodes will ignore that change in their localcache the only place it will live will be in jbc where it can only effect the initial state transfer values on newly joined nodes (i.e. populatelocalcache()).	WITHOUT_CLASSIFICATION	0.8666343312877296	WITHOUT_CLASSIFICATION	0.1333656687122704	DESIGN
local cache so we use synchronization	WITHOUT_CLASSIFICATION	0.9926858522181367	WITHOUT_CLASSIFICATION	0.007314147781863349	DESIGN
local cache so we use synchronization	WITHOUT_CLASSIFICATION	0.9926858522181367	WITHOUT_CLASSIFICATION	0.007314147781863349	DESIGN
don't need to lock the cache here since if someone else inserted the same pk first the insert would fail	WITHOUT_CLASSIFICATION	0.9999942001484712	WITHOUT_CLASSIFICATION	5.79985152879316E-6	DESIGN
we need to grab the version value from the entity otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9496466930228725	WITHOUT_CLASSIFICATION	0.05035330697712752	DESIGN
we need to obtain the lock before any actions are executed since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999209923549152	WITHOUT_CLASSIFICATION	7.900764508490087E-5	DESIGN
postdelete after actually deleting a row record the fact that the instance no longer exists on the database (needed for identity-column key generation) and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9985639467347194	WITHOUT_CLASSIFICATION	0.0014360532652806179	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9994086421078932	WITHOUT_CLASSIFICATION	5.91357892106848E-4	DESIGN
todo what else to do here?	DESIGN	0.947107153824196	DESIGN	0.052892846175803934	WITHOUT_CLASSIFICATION
put() has nowait semantics is this really appropriate? note that it needs to be async replication never local or sync	DESIGN	0.9947852149804317	DESIGN	0.005214785019568266	WITHOUT_CLASSIFICATION
'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. the need for it is intended to be alleviated with future developement thus it is not defined as an environment constant it is used to control whether we should consult the jdbc metadata to determine certain settings default values it is useful to not do this when the database may not be available (mainly in tools usage).	DESIGN	0.9999919531138731	DESIGN	8.046886126904473E-6	WITHOUT_CLASSIFICATION
todo get sql rendering out of this package!	DESIGN	0.7071782155379742	WITHOUT_CLASSIFICATION	0.2928217844620257	DESIGN
todo get sql rendering out of this package!	DESIGN	0.7071782155379742	WITHOUT_CLASSIFICATION	0.2928217844620257	DESIGN
todo eventually merge this with treecache and just add optional opt-lock support there.	DESIGN	0.9667793876811661	DESIGN	0.0332206123188339	WITHOUT_CLASSIFICATION
can happen because of the multiple ways cache.remove() can be invoked (	DESIGN	0.9999959136882811	WITHOUT_CLASSIFICATION	4.0863117188114835E-6	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea	DESIGN	0.9935995957045836	WITHOUT_CLASSIFICATION	0.0064004042954164345	DESIGN
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9999999053371098	DESIGN	9.466289026852852E-8	WITHOUT_CLASSIFICATION
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9999999053371098	DESIGN	9.466289026852852E-8	WITHOUT_CLASSIFICATION
fixme hacky workaround to jbcache-1202	DESIGN	0.9999853106520993	DESIGN	1.4689347900623663E-5	WITHOUT_CLASSIFICATION
fixme hacky workaround to jbcache-1202	DESIGN	0.9999853106520993	DESIGN	1.4689347900623663E-5	WITHOUT_CLASSIFICATION
todo i considered validating ts cache config here but decided to defer unti gettimestampscacheinstance() in case the cache is never actually used	DESIGN	0.9999028051080671	DESIGN	9.719489193303007E-5	WITHOUT_CLASSIFICATION
todo is this a valid operation on a timestamps cache?	DESIGN	0.8987732712931803	DESIGN	0.10122672870681967	WITHOUT_CLASSIFICATION
todo is this a valid operation on a timestamps cache?	DESIGN	0.8987732712931803	DESIGN	0.10122672870681967	WITHOUT_CLASSIFICATION
todo why not use the timestamp in a dataversion?	DESIGN	0.9952070612893612	DESIGN	0.004792938710638801	WITHOUT_CLASSIFICATION
can happen because of the multiple ways cache.remove() can be invoked (	DESIGN	0.9999959136882811	WITHOUT_CLASSIFICATION	4.0863117188114835E-6	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea	DESIGN	0.9935995957045836	WITHOUT_CLASSIFICATION	0.0064004042954164345	DESIGN
swaldman 2004-02-07 modify to allow null values to signify fall through to c3p0 poolconfig defaults	DESIGN	0.9994304134881489	WITHOUT_CLASSIFICATION	5.695865118510063E-4	DESIGN
turn hibernate.c3p0. into c3p0. so c3p0 gets a chance to see all hibernate.c3p0.	DESIGN	0.9847562783246722	WITHOUT_CLASSIFICATION	0.015243721675327702	DESIGN
todo this bit actually has to be called after all cascades! but since identity insert is called synchronously instead of asynchronously as other actions it isn't	DESIGN	0.7332617488032456	WITHOUT_CLASSIFICATION	0.2667382511967545	DESIGN
todo reenable if we also fix the above todo	DESIGN	0.7545919970708876	DESIGN	0.24540800292911238	WITHOUT_CLASSIFICATION
todo inefficient if that cache is just going to ignore the updated state!	DESIGN	0.9848520471137558	WITHOUT_CLASSIFICATION	0.015147952886244112	DESIGN
we may be screwed here since the collection action is about to execute and we do not know the final owner key value	DESIGN	0.9998296927421547	WITHOUT_CLASSIFICATION	1.7030725784526456E-4	DESIGN
create an action that will evict collection and entity regions based on queryspaces (table names). todo cache the autodetected information and pass it in instead.	DESIGN	0.9547309656969967	WITHOUT_CLASSIFICATION	0.0452690343030033	DESIGN
todo what else to do here?	DESIGN	0.947107153824196	DESIGN	0.052892846175803934	WITHOUT_CLASSIFICATION
todo modify the class definition if not already transformed	DESIGN	0.9065515884302289	DESIGN	0.09344841156977116	WITHOUT_CLASSIFICATION
todo what else to do here?	DESIGN	0.947107153824196	DESIGN	0.052892846175803934	WITHOUT_CLASSIFICATION
this is called by sessionfactory irregardless we just disregard here could also add a check to sessionfactory to only conditionally call start	DESIGN	0.979394816289912	WITHOUT_CLASSIFICATION	0.020605183710088067	DESIGN
this is called by sessionfactory irregardless we just disregard here could also add a check to sessionfactory to only conditionally call stop	DESIGN	0.9859154360423459	WITHOUT_CLASSIFICATION	0.01408456395765411	DESIGN
todo to handle concurrent writes correctly this should return a lock to the client	DESIGN	0.999277959146892	DESIGN	7.220408531080809E-4	WITHOUT_CLASSIFICATION
put() has nowait semantics is this really appropriate? note that it needs to be async replication never local or sync	DESIGN	0.9947852149804317	DESIGN	0.005214785019568266	WITHOUT_CLASSIFICATION
todo to handle concurrent writes correctly the client should pass in a lock	DESIGN	0.9580868595760953	DESIGN	0.04191314042390463	WITHOUT_CLASSIFICATION
todo assumes all collections disassemble to an array!	DESIGN	0.9908346502246107	WITHOUT_CLASSIFICATION	0.009165349775389343	DESIGN
todo reuse the preloadevent	DESIGN	0.9120893736033694	WITHOUT_CLASSIFICATION	0.08791062639663053	DESIGN
todo this was added to support initializing an entity's entityentry snapshot during reattach this should be refactored to instead expose a method to assemble a entityentry based on this state for return.	DESIGN	0.9962811767445221	DESIGN	0.0037188232554778307	WITHOUT_CLASSIFICATION
todo what is the implication of this?	DESIGN	0.9734077919160201	DESIGN	0.02659220808397995	WITHOUT_CLASSIFICATION
use count as the default. this mimics the old behavior although none might be a better option moving forward in the case of callable	DESIGN	0.9751430033589027	WITHOUT_CLASSIFICATION	0.024856996641097265	DESIGN
todo joinkeycolumnname & foreignkeycolumnname should be called either here or at a slightly higer level in the stack (to get all the information we need) right now hbmbinder does not support the	DESIGN	0.9978769431830973	DESIGN	0.002123056816902667	WITHOUT_CLASSIFICATION
todo suck this into initlaziness!	DESIGN	0.9506065989593696	DESIGN	0.049393401040630516	WITHOUT_CLASSIFICATION
we have to set up the table later!! yuck	DESIGN	0.9996346461459168	WITHOUT_CLASSIFICATION	3.653538540832064E-4	DESIGN
todo better to degrade to lazy="false" if uninstrumented	DESIGN	0.7221735416193815	DESIGN	0.2778264583806184	WITHOUT_CLASSIFICATION
todo again how should this work for non-pojo entities?	DESIGN	0.9973567444334817	DESIGN	0.0026432555665184174	WITHOUT_CLASSIFICATION
todo this is a bit of copy/paste from indexedcollection.createprimarykey()	DESIGN	0.9878622759227618	DESIGN	0.012137724077238348	WITHOUT_CLASSIFICATION
this inner class implements a case statement.perhaps im being a bit over-clever here	DESIGN	0.744795746437061	WITHOUT_CLASSIFICATION	0.2552042535629391	DESIGN
todo bad implementation cos it depends upon ordering of mapping doc fixing this requires that collection/persistentclass gain access to the mappings reference from configuration (or the filterdefinitions map directly) sometime during configuration.buildsessionfactory (after all the types/filter-defs are known and before building persisters).	DESIGN	0.9305673748403167	DESIGN	0.06943262515968328	WITHOUT_CLASSIFICATION
use of a stringbuffer to workaround a jdk bug	DESIGN	0.9951400259675798	DESIGN	0.004859974032420183	WITHOUT_CLASSIFICATION
hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9998969576384151	WITHOUT_CLASSIFICATION	1.0304236158484036E-4	DESIGN
fixme get the persistentclass	DESIGN	0.6134270457285141	WITHOUT_CLASSIFICATION	0.386572954271486	DESIGN
fixme get the persistentclass	DESIGN	0.6134270457285141	WITHOUT_CLASSIFICATION	0.386572954271486	DESIGN
icky workaround for mysql bug	DESIGN	0.9238344498433549	DESIGN	0.07616555015664497	WITHOUT_CLASSIFICATION
todo somehow add the newly created foreign keys to the internal collection	DESIGN	0.5810487379096587	WITHOUT_CLASSIFICATION	0.4189512620903413	DESIGN
todo possibly relax that	DESIGN	0.6213316528191855	DESIGN	0.3786683471808145	WITHOUT_CLASSIFICATION
todo possibly relax that	DESIGN	0.6213316528191855	DESIGN	0.3786683471808145	WITHOUT_CLASSIFICATION
todo possibly relax that	DESIGN	0.6213316528191855	DESIGN	0.3786683471808145	WITHOUT_CLASSIFICATION
use of a stringbuffer to workaround a jdk bug	DESIGN	0.9951400259675798	DESIGN	0.004859974032420183	WITHOUT_CLASSIFICATION
use a degenerated strategy for backward compatibility	DESIGN	0.9980122562287853	WITHOUT_CLASSIFICATION	0.0019877437712147138	DESIGN
sets can be just a view of a part of another collection. do we need to copy it to be sure it won't be changing underneath us? ie. this.set.addall(set)	DESIGN	0.9277640043783469	WITHOUT_CLASSIFICATION	0.0722359956216531	DESIGN
note that i parameter is now unused (delete it?)	DESIGN	0.993871519875061	DESIGN	0.006128480124939122	WITHOUT_CLASSIFICATION
just to help out during the load (ugly i know)	DESIGN	0.9991102467313421	WITHOUT_CLASSIFICATION	8.897532686579553E-4	DESIGN
todo safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.9431161139557611	WITHOUT_CLASSIFICATION	0.056883886044238954	DESIGN
yick! need this for proper serialization/deserialization handling	DESIGN	0.8064510024891279	WITHOUT_CLASSIFICATION	0.19354899751087212	DESIGN
todo get sql rendering out of this package!	DESIGN	0.7071782155379742	WITHOUT_CLASSIFICATION	0.2928217844620257	DESIGN
todo get sql rendering out of this package!	DESIGN	0.7071782155379742	WITHOUT_CLASSIFICATION	0.2928217844620257	DESIGN
yuck!	DESIGN	0.9996695162880856	WITHOUT_CLASSIFICATION	3.304837119143956E-4	DESIGN
todo get sql rendering out of this package!	DESIGN	0.7071782155379742	WITHOUT_CLASSIFICATION	0.2928217844620257	DESIGN
todo not sure this is correct could not find docs on how to do this.	DESIGN	0.9999875941888955	DESIGN	1.2405811104389715E-5	WITHOUT_CLASSIFICATION
hsql has no blob/clob support . but just put these here for now!	DESIGN	0.9997839410084961	WITHOUT_CLASSIFICATION	2.160589915039343E-4	DESIGN
does this need holdlock also? return tablename + " with (updlock rowlock holdlock)"	DESIGN	0.9954502913942902	WITHOUT_CLASSIFICATION	0.004549708605709851	DESIGN
sql-server at least needed this dropped after use strange!	DESIGN	0.974633234105884	WITHOUT_CLASSIFICATION	0.025366765894116034	DESIGN
todo is there really any reason to kkeep trying if this fails once?	DESIGN	0.5989330859453487	DESIGN	0.4010669140546514	WITHOUT_CLASSIFICATION
tbd should this be varbinary($1)? registercolumntype(types.varbinary "binary($1)")	DESIGN	0.9136217063277817	WITHOUT_CLASSIFICATION	0.0863782936722183	DESIGN
is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9983291876119329	WITHOUT_CLASSIFICATION	0.0016708123880671334	DESIGN
xmlforest requires a new kind of function constructor	DESIGN	0.9983859741152632	WITHOUT_CLASSIFICATION	0.001614025884736786	DESIGN
does this dialect support the alter table syntax?	DESIGN	0.9918283717462174	WITHOUT_CLASSIFICATION	0.008171628253782636	DESIGN
do we need to qualify index names with the schema name?	DESIGN	0.9980703405976242	WITHOUT_CLASSIFICATION	0.0019296594023757838	DESIGN
does this dialect support the unique column syntax?	DESIGN	0.9660748472518378	WITHOUT_CLASSIFICATION	0.033925152748162206	DESIGN
does this dialect support check constraints?	DESIGN	0.8735306760112392	WITHOUT_CLASSIFICATION	0.1264693239887608	DESIGN
do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9891709454832363	WITHOUT_CLASSIFICATION	0.010829054516763689	DESIGN
does this dialect support the for update syntax?	DESIGN	0.9867335440015949	WITHOUT_CLASSIFICATION	0.013266455998405167	DESIGN
does this dialect support the oracle-style for update nowait syntax?	DESIGN	0.9867335440015949	WITHOUT_CLASSIFICATION	0.013266455998405167	DESIGN
does this dialect support for update of allowing particular rows to be locked?	DESIGN	0.8388831859466335	WITHOUT_CLASSIFICATION	0.16111681405336653	DESIGN
note there is a wierd implementation in the client side	DESIGN	0.9995553372676491	WITHOUT_CLASSIFICATION	4.446627323509015E-4	DESIGN
todo never reached since gettypename() actually throws an exception!	DESIGN	0.9979308506328975	WITHOUT_CLASSIFICATION	0.00206914936710244	DESIGN
todo should we additionally check the current isolation mode explicitly?	DESIGN	0.9339243417349516	DESIGN	0.06607565826504821	WITHOUT_CLASSIFICATION
todo remove this and just have subclasses use isolater/isolatedwork directly	DESIGN	0.9910574837477022	DESIGN	0.008942516252297871	WITHOUT_CLASSIFICATION
todo should orphans really be deleted during lock???	DESIGN	0.944947979127351	DESIGN	0.055052020872649064	WITHOUT_CLASSIFICATION
orphans should not be deleted during merge??	DESIGN	0.9910079674121197	WITHOUT_CLASSIFICATION	0.008992032587880215	DESIGN
orphans should not be deleted during copy??	DESIGN	0.9910079674121197	WITHOUT_CLASSIFICATION	0.008992032587880215	DESIGN
i suppose?	DESIGN	0.9968153872158364	WITHOUT_CLASSIFICATION	0.003184612784163622	DESIGN
todo suck this logic into the collection!	DESIGN	0.7353596211309876	DESIGN	0.26464037886901226	WITHOUT_CLASSIFICATION
todo an alternative is to check if the owner has changed if it hasn't then get the id from collection.getowner()	DESIGN	0.9817436825584023	WITHOUT_CLASSIFICATION	0.018256317441597794	DESIGN
todorefactor + make this method private	DESIGN	0.9907367903035527	WITHOUT_CLASSIFICATION	0.009263209696447401	DESIGN
todo we can actually just determine this from the incoming entityentry-s	DESIGN	0.9326075875610503	DESIGN	0.06739241243894974	WITHOUT_CLASSIFICATION
todo should this be an initializeentityeventlistener??? (watch out for performance!)	DESIGN	0.9766370427934441	DESIGN	0.02336295720655599	WITHOUT_CLASSIFICATION
todo better to pass the id in as an argument?	DESIGN	0.9667276180426378	WITHOUT_CLASSIFICATION	0.03327238195736222	DESIGN
todo potentially look at optimizing these two arrays	DESIGN	0.6592249341218446	DESIGN	0.3407750658781555	WITHOUT_CLASSIFICATION
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.999831298572349	DESIGN	1.6870142765099897E-4	WITHOUT_CLASSIFICATION
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.999831298572349	DESIGN	1.6870142765099897E-4	WITHOUT_CLASSIFICATION
todo temporary	DESIGN	0.9640207813343445	DESIGN	0.03597921866565541	WITHOUT_CLASSIFICATION
todo not quite sure about the full implications of this!	DESIGN	0.8737019300442842	DESIGN	0.12629806995571574	WITHOUT_CLASSIFICATION
todo not quite sure about the full implications of this!	DESIGN	0.8737019300442842	DESIGN	0.12629806995571574	WITHOUT_CLASSIFICATION
todo ugly here	DESIGN	0.9960084053372991	DESIGN	0.003991594662700962	WITHOUT_CLASSIFICATION
this is kinda the best we can do	DESIGN	0.9405312075594714	WITHOUT_CLASSIFICATION	0.05946879244052856	DESIGN
todo this needn't exclude subclasses	DESIGN	0.5875833295201097	WITHOUT_CLASSIFICATION	0.4124166704798902	DESIGN
todo need map? the prob is a proper key right?	DESIGN	0.9997828901768854	DESIGN	2.1710982311453814E-4	WITHOUT_CLASSIFICATION
todo i'd much rather have this done from #endloadingcollection(collectionpersisterloadingcollectionentry)	DESIGN	0.9707444925053019	DESIGN	0.029255507494698112	WITHOUT_CLASSIFICATION
todo hack!!! note here we cleanup the load context when we have no more local lce entries. this "works" for the time being because really only the collection load contexts are implemented. long term this cleanup should become part of the "close result set" processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9297508491358194	DESIGN	0.0702491508641806	WITHOUT_CLASSIFICATION
todo should really move this log statement to collectiontype where this is used from	DESIGN	0.9999984564910218	DESIGN	1.5435089780992133E-6	WITHOUT_CLASSIFICATION
todo keep seperate notions of qt[] here for shallow/non-shallow queries	DESIGN	0.5406564430074642	DESIGN	0.4593435569925359	WITHOUT_CLASSIFICATION
todo add this info to the translator and aggregate it here	DESIGN	0.945794708554856	DESIGN	0.0542052914451439	WITHOUT_CLASSIFICATION
todo move into collection type so we can use polymorphism!	DESIGN	0.9989313251341726	DESIGN	0.001068674865827421	WITHOUT_CLASSIFICATION
todo should we check the current isolation mode explicitly?	DESIGN	0.9303061387633144	DESIGN	0.06969386123668571	WITHOUT_CLASSIFICATION
todo suck into event class	DESIGN	0.8161506212818431	DESIGN	0.18384937871815693	WITHOUT_CLASSIFICATION
do we even really need this? the update will fail anyway.	DESIGN	0.9864498432629502	WITHOUT_CLASSIFICATION	0.013550156737049828	DESIGN
hum should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9805820185017888	WITHOUT_CLASSIFICATION	0.01941798149821119	DESIGN
todo would it be better to do a refresh from db?	DESIGN	0.9886254204977893	DESIGN	0.011374579502210578	WITHOUT_CLASSIFICATION
todo we use two visitors here inefficient!	DESIGN	0.8925200250785031	DESIGN	0.10747997492149691	WITHOUT_CLASSIFICATION
this class has no proxies (so do a shortcut)	DESIGN	0.9871745340337726	WITHOUT_CLASSIFICATION	0.012825465966227337	DESIGN
postload is needed for ejb3 todo reuse the postloadevent	DESIGN	0.9654066559527698	WITHOUT_CLASSIFICATION	0.03459334404723026	DESIGN
todo put this stuff back in to read snapshot from the second-level cache (needs some extra work)	DESIGN	0.9050556770011261	DESIGN	0.0949443229988738	WITHOUT_CLASSIFICATION
null or brand new collection this will also (inefficiently) handle arrays which have no snapshot so we can't do any better	DESIGN	0.9983966907990037	WITHOUT_CLASSIFICATION	0.001603309200996243	DESIGN
todo is this 100% correct?	DESIGN	0.9964924583329726	DESIGN	0.0035075416670273555	WITHOUT_CLASSIFICATION
todo iteratively get transient entities and retry merge until one of the following conditions 1) transientcopycache.size() == 0 2) transientcopycache.size() is not decreasing and copycache.size() is not increasing todo find out if retrying can add entities to copycache (don't think it can) for now just retry once throw transientobjectexception if there are still any transient entities	DESIGN	0.9062368197831329	WITHOUT_CLASSIFICATION	0.09376318021686719	DESIGN
entity name will not be available for non-pojo entities todo cache the entity name somewhere so that it is available to this exception	DESIGN	0.9921465835163159	DESIGN	0.007853416483684136	WITHOUT_CLASSIFICATION
todo we should throw an exception if we really know for sure that this is a detached instance rather than just assuming throw new staleobjectstateexception(entityname id)	DESIGN	0.9967557477161016	DESIGN	0.0032442522838983844	WITHOUT_CLASSIFICATION
todo perhaps we should additionally require that the incoming entity version be equivalent to the defined unsaved-value?	DESIGN	0.9996417500120329	DESIGN	3.5824998796716147E-4	WITHOUT_CLASSIFICATION
perhaps this should be an exception since it is only ever used in the above method?	DESIGN	0.9762921744784919	DESIGN	0.023707825521508	WITHOUT_CLASSIFICATION
put a placeholder in entries so we don't recurse back and try to save() the same object again. question should this be done before onsave() is called? likewise should it be done before onupdate()?	DESIGN	0.9442569829544578	WITHOUT_CLASSIFICATION	0.05574301704554224	DESIGN
todo merge into one method!	DESIGN	0.9493456752921243	DESIGN	0.05065432470787573	WITHOUT_CLASSIFICATION
todo refactor to .sql package	DESIGN	0.9626771813415507	DESIGN	0.03732281865844938	WITHOUT_CLASSIFICATION
provides query splitting methods which were originally in querytranslator. <br> todo this will need to be refactored at some point. @author josh	DESIGN	0.9702581858579913	DESIGN	0.029741814142008723	WITHOUT_CLASSIFICATION
todo this is one of the ugliest and most fragile pieces of code in hibernate.	DESIGN	0.9564290929383752	DESIGN	0.04357090706162491	WITHOUT_CLASSIFICATION
todo temporary needed because currently persister is the one that creates and renders the join fragments for inheritence hierarchies	DESIGN	0.6346861009495702	WITHOUT_CLASSIFICATION	0.36531389905042977	DESIGN
todo better way?!?	DESIGN	0.8983467649451577	DESIGN	0.10165323505484221	WITHOUT_CLASSIFICATION
not possible to simply re-use the versionpropertynode here as it causes oom errors due to circularity (	DESIGN	0.9998130936971364	WITHOUT_CLASSIFICATION	1.8690630286344304E-4	DESIGN
todothis is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9995963642805938	WITHOUT_CLASSIFICATION	4.03635719406063E-4	DESIGN
todo this is a bit dodgy come up with a better way to check this (plus see above comment)	DESIGN	0.9999393818755157	DESIGN	6.061812448425394E-5	WITHOUT_CLASSIFICATION
even here if only properties mapped to the "base table" are referenced in the set and where clauses this could be handled by the basicdelegate. todo decide if it is better performance-wise to perform that check or to simply use the multitableupdatedelegate	DESIGN	0.999716972740842	DESIGN	2.830272591579123E-4	WITHOUT_CLASSIFICATION
todo switch statements are always evil! we already had bugs because of forgotten token types. use polymorphism for this!	DESIGN	0.7984515212820648	DESIGN	0.20154847871793521	WITHOUT_CLASSIFICATION
todo we really need to be able to deal with component paths here also this is difficult because the hql-sql grammar expects all those node types to be fromreferencenodes. one potential fix here would be to convert the intoclause to just use a fromclause/fromelement combo (as a child of the insertstatement) and move all this logic into the insertstatement. that's probably the easiest approach (read least amount of changes to the grammar and code) but just doesn't feel right as then an insert would contain 2 from-clauses	DESIGN	0.9961836445207246	DESIGN	0.003816355479275461	WITHOUT_CLASSIFICATION
really there are two situations where it should be ok to allow the insertion into properties defined on a superclass 1) union-subclass with an abstract root entity 2) discrim-subclass #1 is handled already because of the fact that unionsubclasspersister alreay always returns 0 for this call we may want to disallow it for discrim-subclass just for consistency-sake (currently does not work anyway)	DESIGN	0.8359597514524223	DESIGN	0.16404024854757765	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9996695162880856	WITHOUT_CLASSIFICATION	3.304837119143956E-4	DESIGN
implicit joins are always(?) ok to reuse	DESIGN	0.9999951442831719	WITHOUT_CLASSIFICATION	4.8557168280886306E-6	DESIGN
todo we may also want to check that the types here map to exactly one column/jdbc-type can't think of a situation where arithmetic expression between multi-column mappings makes any sense.	DESIGN	0.5489994051725794	DESIGN	0.4510005948274205	WITHOUT_CLASSIFICATION
we do not know either type blind guess!	DESIGN	0.9796260062448074	WITHOUT_CLASSIFICATION	0.020373993755192502	DESIGN
todo used to be exprnoparens! was this needed?	DESIGN	0.9999999044281899	DESIGN	9.55718101309003E-8	WITHOUT_CLASSIFICATION
todo replace this with a more elegant solution.	DESIGN	0.9982350797624727	DESIGN	0.0017649202375272142	WITHOUT_CLASSIFICATION
todo should this really return null? if not figure out something better to do here.	DESIGN	0.9993936742490546	DESIGN	6.0632575094535E-4	WITHOUT_CLASSIFICATION
todo get sql rendering out of this package!	DESIGN	0.7071782155379742	WITHOUT_CLASSIFICATION	0.2928217844620257	DESIGN
yuck!	DESIGN	0.9996695162880856	WITHOUT_CLASSIFICATION	3.304837119143956E-4	DESIGN
ignore it the incoming property could not be found so we cannot be sure what to do here. at the very least the safest is to simply not apply any dereference toggling	DESIGN	0.8139693799943234	DESIGN	0.18603062000567663	WITHOUT_CLASSIFICATION
todo most of below was taken verbatim from dotnode should either delegate this logic or super-type it	DESIGN	0.6319912028455721	WITHOUT_CLASSIFICATION	0.3680087971544279	DESIGN
otherwise a trim-specification and/or a trim-character have been specified we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character the trim-source	DESIGN	0.9918952358853955	WITHOUT_CLASSIFICATION	0.00810476411460452	DESIGN
todo we should really just collect these from the various selectexpressions rather than regenerating here	DESIGN	0.9968360626501191	DESIGN	0.0031639373498807103	WITHOUT_CLASSIFICATION
todo is this a bit ugly?	DESIGN	0.9939579015278771	DESIGN	0.006042098472122898	WITHOUT_CLASSIFICATION
need a better way to define the suffixes here	DESIGN	0.8618605604128144	WITHOUT_CLASSIFICATION	0.13813943958718558	DESIGN
todo something much better - look at the type of the other expression! todo have comparisonexpression and/or arithmeticexpression rules complete the resolution of boolean nodes.	DESIGN	0.982635685432093	DESIGN	0.01736431456790706	WITHOUT_CLASSIFICATION
todo what amount of significant digits need to be supported here? - from the decimalformat docs [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.714833616882257	DESIGN	0.28516638311774295	WITHOUT_CLASSIFICATION
needed the "clazz_" check to work around union-subclasses todo is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9993542468340783	DESIGN	6.457531659217823E-4	WITHOUT_CLASSIFICATION
we should actually rework this class to not implement parser and just process path expressions in the most convenient way.	DESIGN	0.9649142105955866	DESIGN	0.035085789404413405	WITHOUT_CLASSIFICATION
the class is now way to complex!	DESIGN	0.9952980909868139	WITHOUT_CLASSIFICATION	0.004701909013186101	DESIGN
todo get sql rendering out of here	DESIGN	0.8351240620186645	WITHOUT_CLASSIFICATION	0.16487593798133546	DESIGN
todo is there a better way?	DESIGN	0.9843113620261071	DESIGN	0.015688637973892857	WITHOUT_CLASSIFICATION
must be done here because of side-effect! yuck	DESIGN	0.9990710313267736	WITHOUT_CLASSIFICATION	9.289686732263753E-4	DESIGN
name from a super query (a bit inelegant that it shows up here)	DESIGN	0.9952312742037585	WITHOUT_CLASSIFICATION	0.004768725796241478	DESIGN
we should reengineer this class so that rather than the current ad - hoc linear approach to processing a stream of tokens we instead build up a tree of expressions.	DESIGN	0.6156627180228047	WITHOUT_CLASSIFICATION	0.3843372819771953	DESIGN
this is ugly here but needed because its a subquery	DESIGN	0.9668107764951365	WITHOUT_CLASSIFICATION	0.03318922350486363	DESIGN
unhappy about this being public is there a better way?	DESIGN	0.522071685417278	WITHOUT_CLASSIFICATION	0.47792831458272195	DESIGN
make sure this is a defined parameter and check the incoming value type todo what should be the actual exception type here?	DESIGN	0.9998941289529413	DESIGN	1.0587104705874639E-4	WITHOUT_CLASSIFICATION
todo this constructor form is only used from constructor directly below us can it go away?	DESIGN	0.9999232563016177	DESIGN	7.674369838226712E-5	WITHOUT_CLASSIFICATION
todo copy/paste from sessionimpl pull up!	DESIGN	0.7549767869152948	WITHOUT_CLASSIFICATION	0.24502321308470518	DESIGN
todo should remove this exposure and have all references to the session's batcher use the connectionmanager.	DESIGN	0.9984826736460588	DESIGN	0.0015173263539411854	WITHOUT_CLASSIFICATION
todo should this get moved to persistentcontext? logically is persistentcontext the "thing" to which an interceptor gets attached?	DESIGN	0.9990121809649111	DESIGN	9.878190350889216E-4	WITHOUT_CLASSIFICATION
todo what type?	DESIGN	0.8705371016622888	DESIGN	0.12946289833771116	WITHOUT_CLASSIFICATION
todo should seriously consider not allowing a txn to begin from a child session can always route the request to the root session	DESIGN	0.9883196084799882	DESIGN	0.011680391520011739	WITHOUT_CLASSIFICATION
short-circuit for performance	DESIGN	0.9972003992137266	WITHOUT_CLASSIFICATION	0.0027996007862733548	DESIGN
not absolutely necessary but does help with aggressive release	DESIGN	0.9579656355997822	WITHOUT_CLASSIFICATION	0.042034364400217746	DESIGN
todo remove these last two as batcher is no longer managing connections	DESIGN	0.8210831597795628	DESIGN	0.17891684022043713	WITHOUT_CLASSIFICATION
work around a bug in all known connection pools.	DESIGN	0.8769228511670659	WITHOUT_CLASSIFICATION	0.12307714883293405	DESIGN
todo make this the factory for "entity mode related" sessions also means making this the target of transaction-synch and the thing that knows how to cascade things between related sessions at that point perhaps this thing is a "sessioncontext" and connectionmanager is a "jdbccontext"? a "sessioncontext" should live in the impl package	DESIGN	0.999987257709303	DESIGN	1.2742290697036749E-5	WITHOUT_CLASSIFICATION
todo does this really need to be here? does the collection already have it's own up-to-date snapshot?	DESIGN	0.9998702171635853	DESIGN	1.297828364147669E-4	WITHOUT_CLASSIFICATION
todo the i==entityspan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9936125382318908	DESIGN	0.006387461768109217	WITHOUT_CLASSIFICATION
this form used from annotations (?). essentially the same as the above using a resultset-mapping reference but without cachemode readonly and comment. fixme annotations do not use it so it can be remove from my pov @deprecated @param query the sql query string @param resultsetref the result-set-mapping name @param queryspaces any specified query spaces (used for auto-flushing) @param cacheable whether the query results are cacheable @param cacheregion if cacheable the region into which to store the results @param timeout a jdbc-level timeout to be applied @param fetchsize a jdbc-level fetch-size to be applied @param flushmode the flush mode to use for this query @param parametertypes parameter type map @param callable does the query string represent a callable object (i.e. proc)	DESIGN	0.9999961518752956	DESIGN	3.84812470439793E-6	WITHOUT_CLASSIFICATION
todo add the notion of enabled filters to the cachekey to differentiate filtered collections from non-filtered but cachekey is currently used for both collections and entities would ideally need to define two seperate ones currently this works in conjuction with the check on defaultinitializecollectioneventhandler.initializecollectionfromcache() (which makes sure to not read from cache with enabled filters). early exit!!!!!	DESIGN	0.9998373858268094	DESIGN	1.62614173190588E-4	WITHOUT_CLASSIFICATION
for sets we should end the collection load after resolving the entities since we might call hashcode() on the elements todo or we could do this polymorphically and have two different operations implemented differently for arrays	DESIGN	0.9959753369754967	DESIGN	0.0040246630245032574	WITHOUT_CLASSIFICATION
this is not very nice (and quite slow)	DESIGN	0.915077843508914	DESIGN	0.08492215649108603	WITHOUT_CLASSIFICATION
use of trim() here is ugly?	DESIGN	0.9951733425444441	WITHOUT_CLASSIFICATION	0.004826657455555925	DESIGN
todo this is too conservative if all preceding joins were also inner joins we could use an inner join here	DESIGN	0.9604837842992523	DESIGN	0.03951621570074767	WITHOUT_CLASSIFICATION
todo look at the owning property and check that it isn't lazy (by instrumentation)	DESIGN	0.8848722385232957	DESIGN	0.11512776147670431	WITHOUT_CLASSIFICATION
todo inefficient	DESIGN	0.5379032770107681	DESIGN	0.4620967229892319	WITHOUT_CLASSIFICATION
why does this matter?	DESIGN	0.8698975244502969	WITHOUT_CLASSIFICATION	0.13010247554970306	DESIGN
from the collection of associations locate oja for the manytoone corresponding to this persister to fully define the many-to-many we need that oja so that we can use its alias here todo is there a better way here?	DESIGN	0.9999154772863608	DESIGN	8.452271363922988E-5	WITHOUT_CLASSIFICATION
todo this class depends directly upon criteriaimpl in the impl package add a criteriaimplementor interface	DESIGN	0.9967441284164466	DESIGN	0.003255871583553413	WITHOUT_CLASSIFICATION
todo add a criteriaimplementor interface this class depends directly upon criteriaimpl in the impl package	DESIGN	0.9967441284164466	DESIGN	0.003255871583553413	WITHOUT_CLASSIFICATION
todo not so sure this is needed	DESIGN	0.7607888461828217	DESIGN	0.23921115381717836	WITHOUT_CLASSIFICATION
meant to handle dynamic instantiation queries(copy from queryloader)	DESIGN	0.9983875624455548	WITHOUT_CLASSIFICATION	0.0016124375544452315	DESIGN
todo the order in which entities are saved may matter (e.g. a particular transient entity may need to be saved before other transient entities can be saved keep retrying the batch of transient entities until either 1) there are no transient entities left in transientcopycache or 2) no transient entities were saved in the last batch for now just run through the transient entities and retry the merge	DESIGN	0.6035656392537322	WITHOUT_CLASSIFICATION	0.39643436074626776	DESIGN
todo this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9999996254075499	DESIGN	3.7459245014316833E-7	WITHOUT_CLASSIFICATION
todo currently expects that the individual with expressions apply to the same sql table join. this may not be the case for joined-subclass where the property values might be coming from different tables in the joined hierarchy. at some point we should expand this to support that capability. however that has some difficulties 1) the biggest is how to handle ors when the individual comparisons are linked to different sql joins. 2) here we would need to track each comparison individually along with the join alias to which it applies and then pass that information back to the fromelement so it can pass it along to the joinsequence	DESIGN	0.8690673640750928	DESIGN	0.13093263592490711	WITHOUT_CLASSIFICATION
this function has a template -> restore output apply the template and write the result out todo downcast to avoid using an interface? yuck.	DESIGN	0.9976961184426164	WITHOUT_CLASSIFICATION	0.0023038815573834734	DESIGN
at some point the generate phase needs to be moved out of here because a single object-level dml might spawn multiple sql dml command executions. possible to just move the sql generation for dml stuff but for consistency-sake probably best to just move responsiblity for the generation phase completely into the delegates (queryloader/statementexecutor) themselves. also not sure why queryloader currently even has a dependency on this at all does it need it? ideally like to see the walker itself given to the delegates directly	DESIGN	0.9999999938515378	DESIGN	6.148462142744803E-9	WITHOUT_CLASSIFICATION
get the right object from the list would it be easier to just call getentity() ??	DESIGN	0.9942321631184311	WITHOUT_CLASSIFICATION	0.00576783688156892	DESIGN
todo should we just collect these like with the collections above?	DESIGN	0.9975433275052422	DESIGN	0.0024566724947577556	WITHOUT_CLASSIFICATION
todo better to handle dynamic filters through implicit dynamicfilterparameterspecification see the discussion there in dynamicfilterparameterspecification's javadocs as to why it is currently not done that way.	DESIGN	0.9987750621489739	DESIGN	0.0012249378510261412	WITHOUT_CLASSIFICATION
/ used only for regression testing!!!! todo obviously get rid of all this junk ) /	DESIGN	0.993429917333298	DESIGN	0.006570082666701967	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9999574744960406	WITHOUT_CLASSIFICATION	4.252550395953473E-5	DESIGN
todo deprecated remove eventually	DESIGN	0.804127896742985	DESIGN	0.19587210325701498	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9999574744960406	WITHOUT_CLASSIFICATION	4.252550395953473E-5	DESIGN
todo improve this hack!	DESIGN	0.9982951792906891	DESIGN	0.0017048207093109014	WITHOUT_CLASSIFICATION
inheritance cycle detection (paranoid check)	DESIGN	0.999404074673102	WITHOUT_CLASSIFICATION	5.959253268980074E-4	DESIGN
todo remove use of instanceof!	DESIGN	0.9706580843089565	DESIGN	0.029341915691043392	WITHOUT_CLASSIFICATION
shortcut	DESIGN	0.9998099039435604	WITHOUT_CLASSIFICATION	1.9009605643954784E-4	DESIGN
todo handle the case of a foreign key to something other than the pk	DESIGN	0.70697745235325	DESIGN	0.29302254764674995	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9999574744960406	WITHOUT_CLASSIFICATION	4.252550395953473E-5	DESIGN
todo remove	DESIGN	0.8497665780288157	DESIGN	0.1502334219711842	WITHOUT_CLASSIFICATION
todo remove	DESIGN	0.8497665780288157	DESIGN	0.1502334219711842	WITHOUT_CLASSIFICATION
todo remove	DESIGN	0.8497665780288157	DESIGN	0.1502334219711842	WITHOUT_CLASSIFICATION
todo throw exception?	DESIGN	0.6471300820678987	DESIGN	0.3528699179321013	WITHOUT_CLASSIFICATION
todo throw exception? maybe warn if not the same?	DESIGN	0.9587440825939001	DESIGN	0.041255917406099914	WITHOUT_CLASSIFICATION
todo make entitypersister not depend on sessionfactoryimplementor interface if possible	DESIGN	0.993683640248905	DESIGN	0.006316359751095027	WITHOUT_CLASSIFICATION
todo is there a more elegant way than downcasting?	DESIGN	0.970108890104893	DESIGN	0.029891109895107067	WITHOUT_CLASSIFICATION
todo encapsulate the protected instance variables!	DESIGN	0.6638310830469092	WITHOUT_CLASSIFICATION	0.3361689169530909	DESIGN
should indicate that we are processing an insert/update/delete query with a subquery implied via a collection property function. here we need to use the table name itself as the qualification alias. todo verify this works for all databases todo is this also the case in non-"indexed" scenarios?	DESIGN	0.9912899293968876	DESIGN	0.008710070603112257	WITHOUT_CLASSIFICATION
todo copy/paste from insertrows()	DESIGN	0.5851939287039934	WITHOUT_CLASSIFICATION	0.41480607129600666	DESIGN
todo copy/paste from recreate()	DESIGN	0.5851939287039934	WITHOUT_CLASSIFICATION	0.41480607129600666	DESIGN
should this interface extend propertymapping?	DESIGN	0.8010022606085706	WITHOUT_CLASSIFICATION	0.19899773939142948	DESIGN
ie. the subquery! yuck!	DESIGN	0.9995445613240415	WITHOUT_CLASSIFICATION	4.554386759585607E-4	DESIGN
todo move to .sql package!!	DESIGN	0.9770676907598002	DESIGN	0.022932309240199802	WITHOUT_CLASSIFICATION
todo code duplication with singletableentitypersister	DESIGN	0.8282744970813295	DESIGN	0.17172550291867053	WITHOUT_CLASSIFICATION
todo it would be really really nice to use this to also model components!	DESIGN	0.9998502378776372	DESIGN	1.4976212236273754E-4	WITHOUT_CLASSIFICATION
todo two hashmap lookups here is one too many	DESIGN	0.6027471494388064	DESIGN	0.39725285056119375	WITHOUT_CLASSIFICATION
todo code duplication with joinedsubclassentitypersister	DESIGN	0.8282744970813295	DESIGN	0.17172550291867053	WITHOUT_CLASSIFICATION
perhaps not really necessary	DESIGN	0.9740334191252822	DESIGN	0.025966580874717784	WITHOUT_CLASSIFICATION
note this assumes something about how propertyselectfragment is implemented by the subclass! was tounqotedaliasstrings( getidentifercolumnnames() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.7951536963897909	WITHOUT_CLASSIFICATION	0.20484630361020909	DESIGN
note this assumes something about how propertyselectfragment is implemented by the subclass! was tounqotedaliasstrings( getdiscriminatorcolumnname() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.7951536963897909	WITHOUT_CLASSIFICATION	0.20484630361020909	DESIGN
todo should we use select .. for update?	DESIGN	0.9666801394610416	DESIGN	0.033319860538958364	WITHOUT_CLASSIFICATION
todo optimize this better!	DESIGN	0.8500049755130674	DESIGN	0.14999502448693258	WITHOUT_CLASSIFICATION
todo should we allow suffixes on these ?	DESIGN	0.9952674044398551	DESIGN	0.004732595560144895	WITHOUT_CLASSIFICATION
this is really ugly but necessary	DESIGN	0.9251561154984222	DESIGN	0.07484388450157775	WITHOUT_CLASSIFICATION
ugly little workaround for fact that createuniquekeyloaders() does not handle component properties	DESIGN	0.9999955082150132	DESIGN	4.491784986876443E-6	WITHOUT_CLASSIFICATION
todo disable batch loading if lockmode > read?	DESIGN	0.9969234508546609	WITHOUT_CLASSIFICATION	0.0030765491453391106	DESIGN
append the sql to return the generated identifier todo suck into insert	DESIGN	0.551135442802541	DESIGN	0.448864557197459	WITHOUT_CLASSIFICATION
todo i am not so sure about the exception handling in this bit!	DESIGN	0.9987905152769286	DESIGN	0.001209484723071327	WITHOUT_CLASSIFICATION
todo is this really necessary????	DESIGN	0.9607577348913117	DESIGN	0.039242265108688265	WITHOUT_CLASSIFICATION
todo move to .sql package and refactor with similar things!	DESIGN	0.9983089872847944	DESIGN	0.0016910127152055282	WITHOUT_CLASSIFICATION
todo implement functionality this might be painful to do here as the "join post processing" for the subquery has already been performed (meaning that for theta-join dialects the join conditions have already been moved over to the where clause). a "simple" solution here might to perform "join post processing" once for the entire query (including any subqueries) at one fell swoop	DESIGN	0.9999260349273992	DESIGN	7.396507260082296E-5	WITHOUT_CLASSIFICATION
todo this eventually needs to be removed	DESIGN	0.9489219277499045	DESIGN	0.05107807225009556	WITHOUT_CLASSIFICATION
kinda ugly but needed for collections with a "." node mapping	DESIGN	0.9585040009619794	WITHOUT_CLASSIFICATION	0.041495999038020544	DESIGN
is this ok?	DESIGN	0.9937252981591888	WITHOUT_CLASSIFICATION	0.006274701840811258	DESIGN
todo perhaps this should be some other runtimeexception	DESIGN	0.9999900183779841	DESIGN	9.981622015975341E-6	WITHOUT_CLASSIFICATION
todo make this a bit nicer	DESIGN	0.9912607813718969	DESIGN	0.008739218628103161	WITHOUT_CLASSIFICATION
yuck	DESIGN	0.998989589091575	WITHOUT_CLASSIFICATION	0.0010104109084250238	DESIGN
todo we should provide some way to get keys of collection of statistics to make it easier to retrieve from a gui perspective	DESIGN	0.9999237361865929	DESIGN	7.626381340707379E-5	WITHOUT_CLASSIFICATION
@return collection removal fixme even if isinverse="true"?	DESIGN	0.7167489440450445	DESIGN	0.2832510559549554	WITHOUT_CLASSIFICATION
todo will need reference to session factory to fully complete hhh-1907	DESIGN	0.9732660047628847	DESIGN	0.026733995237115265	WITHOUT_CLASSIFICATION
todo currently keeps getters and setters (instead of propertyaccessors) because of the way getgetter() and getsetter() are implemented currently yuck!	DESIGN	0.5440110129158543	DESIGN	0.45598898708414565	WITHOUT_CLASSIFICATION
todo redesign how propertyaccessors are acquired	DESIGN	0.8743078741756696	DESIGN	0.12569212582433045	WITHOUT_CLASSIFICATION
todo yuck!!!	DESIGN	0.6064213334340597	WITHOUT_CLASSIFICATION	0.3935786665659404	DESIGN
todo yuck!!! fix after hhh-1907 is complete	DESIGN	0.9868239737291581	DESIGN	0.01317602627084195	WITHOUT_CLASSIFICATION
todo need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9731407639412061	DESIGN	0.02685923605879392	WITHOUT_CLASSIFICATION
todo design new lifecycle for proxyfactory	DESIGN	0.7224542714214033	WITHOUT_CLASSIFICATION	0.27754572857859666	DESIGN
todo would be nice to handle proxy classes elegantly!	DESIGN	0.9444536615823602	DESIGN	0.05554633841763984	WITHOUT_CLASSIFICATION
todo copy/paste from manytoonetype	DESIGN	0.5851939287039934	WITHOUT_CLASSIFICATION	0.41480607129600666	DESIGN
todo should this be session.instantiate(persister )?	DESIGN	0.992548645287113	DESIGN	0.007451354712886992	WITHOUT_CLASSIFICATION
todo this is a bit arbitrary expose a switch to the user?	DESIGN	0.8888798031305659	DESIGN	0.11112019686943403	WITHOUT_CLASSIFICATION
todo implement caching?! proxies?!	DESIGN	0.9130812163386448	DESIGN	0.08691878366135515	WITHOUT_CLASSIFICATION
todo is this right??	DESIGN	0.8159849462184267	DESIGN	0.18401505378157332	WITHOUT_CLASSIFICATION
is this really necessary?	DESIGN	0.9446155397906297	WITHOUT_CLASSIFICATION	0.05538446020937022	DESIGN
todo move these to a new joinabletype abstract class extended by entitytype and persistentcollectiontype	DESIGN	0.9902355979060184	DESIGN	0.009764402093981642	WITHOUT_CLASSIFICATION
todo this is very suboptimal for some subclasses (namely components) since it does not take advantage of two-phase-load	DESIGN	0.9282492445675008	DESIGN	0.0717507554324992	WITHOUT_CLASSIFICATION
worrying about proxies is perhaps a little bit of overkill here	DESIGN	0.9966015829099665	DESIGN	0.00339841709003353	WITHOUT_CLASSIFICATION
note very hackish workaround!! todo fix this so it will work for non-pojo entity mode	DESIGN	0.999920344219005	DESIGN	7.965578099501483E-5	WITHOUT_CLASSIFICATION
todo fix this so it will work for non-pojo entity mode	DESIGN	0.9959172446074964	DESIGN	0.0040827553925035735	WITHOUT_CLASSIFICATION
we would probably refactor to have logicparser (builds a tree of simple expressions connected by and or not) expressionparser (translates from oo terms like foo foo.bar foo.bar.baz to sql terms like foos.id foos.bar_id etc) and pathexpressionparser (which does much the same thing it does now)	DESIGN	0.9977507999703012	WITHOUT_CLASSIFICATION	0.0022492000296988036	DESIGN
todo this is a little inefficient don't need to do a whole deep replaceelements() call	DESIGN	0.9996438969393536	DESIGN	3.5610306064633217E-4	WITHOUT_CLASSIFICATION
workaround for weblogic	DESIGN	0.8966320253034227	DESIGN	0.1033679746965773	WITHOUT_CLASSIFICATION
todo this dependency is kinda bad	DESIGN	0.9832880917136313	DESIGN	0.016711908286368635	WITHOUT_CLASSIFICATION
ick!	DESIGN	0.9996695162880856	WITHOUT_CLASSIFICATION	3.304837119143956E-4	DESIGN
short cut check	DESIGN	0.9979087868237186	WITHOUT_CLASSIFICATION	0.002091213176281272	DESIGN
todo move to stringhelper?	DESIGN	0.9770676907598002	DESIGN	0.022932309240199802	WITHOUT_CLASSIFICATION
yukky! don't you have subclasses for that! todo race conditions can happen here	DESIGN	0.9740648145415671	WITHOUT_CLASSIFICATION	0.025935185458432916	DESIGN
todo we probably should have a statisticsnotpublishedexception to make it clean	DESIGN	0.9998191558111186	DESIGN	1.808441888814809E-4	WITHOUT_CLASSIFICATION
fixme hack to work around fact that calling node added = root.addchild( fqn ) doesn't properly set the version on the node	DESIGN	0.999999956011695	DESIGN	4.398830504639762E-8	WITHOUT_CLASSIFICATION
todo i considered validating the presence of the ts cache here but decided to defer unti getquerycacheinstance() in case the cache is never actually used	DESIGN	0.9999195855935805	DESIGN	8.041440641955555E-5	WITHOUT_CLASSIFICATION
need to do that here rather than in the save event listener to let the post insert events to have a id-filled entity when identity is used (ejb3)	DESIGN	0.8492983222915247	DESIGN	0.15070167770847526	WITHOUT_CLASSIFICATION
todo simply remove this override if we fix the above todos	DESIGN	0.9946574679771455	DESIGN	0.0053425320228544316	WITHOUT_CLASSIFICATION
this is used by sessionfactoryimpl to hand to the generated sessionimpl was the only reason i could see that we cannot just use null as settings.cacheprovider	DESIGN	0.6549608243644763	DESIGN	0.3450391756355236	WITHOUT_CLASSIFICATION
this is done here 'cos we might only know the type here (ugly!) todo improve this a lot	DESIGN	0.9989022792445146	DESIGN	0.0010977207554854563	WITHOUT_CLASSIFICATION
todo would love to have this work on a notification basis where the successful binding of an entity/subclass would emit a notification which the extendsqueue entries could react to	DESIGN	0.9598151374181757	DESIGN	0.04018486258182428	WITHOUT_CLASSIFICATION
todo not sure the best way to handle this. the non-performant way	DESIGN	0.9868950195631577	DESIGN	0.013104980436842247	WITHOUT_CLASSIFICATION
would be better to use the element-type to determine whether the old and the new are equal here the problem being we do not necessarily have access to the element type in all cases	DESIGN	0.9265825618093969	WITHOUT_CLASSIFICATION	0.07341743819060313	DESIGN
this next bit is to allow for both unsaved-value="negative" and for "older" behavior where version number did not get seeded if it was already set in the object todo shift it into unsaved-value strategy	DESIGN	0.9999423582208868	DESIGN	5.764177911310282E-5	WITHOUT_CLASSIFICATION
merges don't cascade to uninitialized collections todo perhaps this does need to cascade after all.	DESIGN	0.9968616669191389	DESIGN	0.0031383330808612067	WITHOUT_CLASSIFICATION
todo an alternative is to check if the owner has changed if it hasn't then return collection.getowner()	DESIGN	0.9849640004996775	WITHOUT_CLASSIFICATION	0.015035999500322438	DESIGN
it is possible that the tree-walking in outerjoinloader can get to an association defined by a subclass in which case the property-ref might refer to a property defined on a subclass of the current class in this case the table name is not known - this temporary solution assumes that the property-ref refers to a property of the subclass table that the association belongs to (a reasonable guess) todo fix this add outerjoinloadable.getsubclasspropertytablename(string propertyname)	DESIGN	0.999999913912874	DESIGN	8.608712602392514E-8	WITHOUT_CLASSIFICATION
this only works because collection entries are kept in a sequenced map by persistence context (maybe we should do like entities and keep a separate sequences set) todo calling entryset on an identitymap is slow!!	DESIGN	0.996071161926418	DESIGN	0.003928838073581977	WITHOUT_CLASSIFICATION
important to account for newly saved entities in query todo some kind of check for new status	DESIGN	0.9849293379926934	DESIGN	0.015070662007306609	WITHOUT_CLASSIFICATION
brand new collection todo or an array!! we can't lock objects with arrays now??	DESIGN	0.5688685903461821	WITHOUT_CLASSIFICATION	0.43113140965381774	DESIGN
todo if object was an uninitialized proxy this is inefficient resulting in two sql selects	DESIGN	0.9011411170357981	WITHOUT_CLASSIFICATION	0.09885888296420174	DESIGN
before cascade! todo should this be session.instantiate(persister )?	DESIGN	0.9861406603265072	DESIGN	0.01385933967349294	WITHOUT_CLASSIFICATION
todo absolutely no usages of this constructor form can it go away?	DESIGN	0.9460195431661261	DESIGN	0.053980456833873966	WITHOUT_CLASSIFICATION
todo need to find a clean way to handle the "event source" role a seperate classs responsible for generating/dispatching events just duplicates most of the session methods passing around seperate reto interceptor factory actionqueue and persistentcontext is not manageable	DESIGN	0.9999999184733279	DESIGN	8.152667216658076E-8	WITHOUT_CLASSIFICATION
todo remove	DESIGN	0.8497665780288157	DESIGN	0.1502334219711842	WITHOUT_CLASSIFICATION
aliasrefnode.resolve( false false aliasrefnode.gettext() ) todo is it kosher to do it here? todo is it kosher to do it here?	DESIGN	0.6855334605175982	DESIGN	0.31446653948240166	WITHOUT_CLASSIFICATION
no explicit select expression render the id and properties projection lists for every persister in the from clause into a single 'token node'. todo the only reason we need this stuff now is collection filters we should get rid of derived select clause completely!	DESIGN	0.9985693178605669	DESIGN	0.001430682139433089	WITHOUT_CLASSIFICATION
todo an optimization here would be to consider cascade deletes and not gen those delete statements the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> the table info gotten here should really be self-contained (i.e. a class representation defining all the needed attributes) then we could then get an array of those	DESIGN	0.998172982280967	DESIGN	0.0018270177190331197	WITHOUT_CLASSIFICATION
todo get sql rendering out of here create an ast for the join expressions. use the sql generator grammar to generate the sql text for the index expression.	DESIGN	0.9969615023695315	WITHOUT_CLASSIFICATION	0.0030384976304684945	DESIGN
todo this really needs to be delayed unitl after we definitively know all node types where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DESIGN	0.9766423310059532	DESIGN	0.023357668994046767	WITHOUT_CLASSIFICATION
todo figure out a better way to get the from elements in a proper tree structure. if this is not the destination of a many-to-many add it as a child of the origin.	DESIGN	0.9707497613139188	DESIGN	0.029250238686081186	WITHOUT_CLASSIFICATION
work around that crazy issue where the tree contains "empty" fromelements (no text) afaict this is caused by fromelementfactory.createcollectionjoin()	DESIGN	0.9247799515187624	WITHOUT_CLASSIFICATION	0.07522004848123762	DESIGN
todo this class does too many things! we need a different kind of path expression parser for each of the diffferent ways in which path expressions can occur	DESIGN	0.9992291190480772	DESIGN	7.708809519228018E-4	WITHOUT_CLASSIFICATION
real hacky used to count the nesting of parentheses	DESIGN	0.9884640722808824	WITHOUT_CLASSIFICATION	0.011535927719117616	DESIGN
todo would be really nice to cache the spec on the query-def so as to not have to re-calc the hash currently not doable though because of the resultset-ref stuff	DESIGN	0.9388081175792928	WITHOUT_CLASSIFICATION	0.06119188242070711	DESIGN
for arrays we should end the collection load before resolving the entities since the actual array instances are not instantiated during loading todo or we could do this polymorphically and have two different operations implemented differently for arrays	DESIGN	0.907875515562406	DESIGN	0.09212448443759398	WITHOUT_CLASSIFICATION
polymorphism not really handled completely correctly perhapswell actually its ok assuming that the entity name used in the lookup is the same as the the one used here which it will be	DESIGN	0.9685957567384769	WITHOUT_CLASSIFICATION	0.031404243261523114	DESIGN
todo should "record" how many properties we have reffered to - and if we don't get'em'all we throw an exception! way better than trial and error )	DESIGN	0.9999836937545313	DESIGN	1.6306245468656146E-5	WITHOUT_CLASSIFICATION
very important!!!! - this class needs to be free of any static references to any cglib or javassist classes. otherwise users will always need both on their classpaths no matter which (if either) they use. another option here would be to remove the hibernate.ispropertyinitialized() method and have the users go through the sessionfactory to get this information.	DESIGN	0.5607964270124003	WITHOUT_CLASSIFICATION	0.4392035729875998	DESIGN
todo is it really neceassry to provide configuration to collectionpersisters ? should it not be enough with associated class ? or why does entitypersister's not get access to configuration ? the only reason i could see that configuration gets passed to collection persisters is so that they can look up the dom4j node name of the entity element in case no explicit node name was applied at the collection element level. are you kidding me? trivial to fix then. just store and expose the node name on the entity persister (which the collection persister looks up anyway via other means).	DESIGN	0.9999999947010095	DESIGN	5.298990475449484E-9	WITHOUT_CLASSIFICATION
for backward compatibility allow a set with no not-null element columns using all columns in the row locater sql todo create an implicit not null constraint on all cols?	DESIGN	0.6682942089947327	WITHOUT_CLASSIFICATION	0.33170579100526726	DESIGN
spaces todo i'm not sure but perhaps we should exclude abstract denormalized tables?	DESIGN	0.9995355066380073	DESIGN	4.6449336199272097E-4	WITHOUT_CLASSIFICATION
workaround for backward compatibility of sets with no not-null columns assume all columns are used in the row locator sql	DESIGN	0.6453761321526743	DESIGN	0.35462386784732564	WITHOUT_CLASSIFICATION
note that this method could easily be moved up to basicentitypersister if we ever needed to reuse it from other subclasses	DESIGN	0.6699710615463411	WITHOUT_CLASSIFICATION	0.330028938453659	DESIGN
index += getpropertycolumnspan( i ) todo this is kinda slow	DESIGN	0.8530403155901394	DESIGN	0.1469596844098606	WITHOUT_CLASSIFICATION
todo need some caching scheme? really comes down to decision regarding amount of state (if any) kept on propertyaccessors	DESIGN	0.8396772917434534	DESIGN	0.16032270825654665	WITHOUT_CLASSIFICATION
todo here is why we need to make bytecode provider global ( todo again fix this after hhh-1907 is complete	DESIGN	0.9999332357253649	DESIGN	6.676427463519455E-5	WITHOUT_CLASSIFICATION
todo yuck! this is not quite good enough it's a quick hack around the problem of having a to-one association that refers to an embedded component	DESIGN	0.9999999994350189	DESIGN	5.649810987114595E-10	WITHOUT_CLASSIFICATION
for dom4j "collections" only todo it would be better if this was done at the higher level by printer	DESIGN	0.9498780569264098	DESIGN	0.050121943073590046	WITHOUT_CLASSIFICATION
would be great to move all this below here into another method that could also be used from the new scrolling stuff. would need to change the way the max-row stuff is handled (i.e. behind an interface) so that i could do the control breaking at the means to know when to stop	DESIGN	0.9999999982946641	DESIGN	1.7053359895329177E-9	WITHOUT_CLASSIFICATION
todo can we always use the "null property" approach for everything?	DESIGN	0.9714177411643399	DESIGN	0.028582258835660023	WITHOUT_CLASSIFICATION
polymorphism comment above	DESIGN	0.9999607902709463	WITHOUT_CLASSIFICATION	3.9209729053721314E-5	DESIGN
some messy complex stuff here since createcriteria() can take an aliased path or a path rooted at the creating criteria instance	DESIGN	0.9999988500246545	WITHOUT_CLASSIFICATION	1.1499753455447206E-6	DESIGN
todo really bad evil hack to fix!!!	DESIGN	0.9999999158801014	DESIGN	8.41198986222009E-8	WITHOUT_CLASSIFICATION
ugly hack for cases like "elements(foo.bar.collection)" (multi-part path expression ending in elements or indices)	DESIGN	0.996743636113236	DESIGN	0.003256363886764102	WITHOUT_CLASSIFICATION
try block is a hack around fact that currently tuplizers are not given the opportunity to resolve a subclass entity name. this allows the (we assume custom) interceptor the ability to influence this decision if we were not able to based on the given entityname	DESIGN	0.9999993810570249	DESIGN	6.18942975107235E-7	WITHOUT_CLASSIFICATION
/ hack alert !!!!!!!!!!!!!!!!!!!!!!!!!!!! attempt to work around "ghost" impliedfromelements that occasionally show up between the actual things being joined. this consistently occurs from index nodes (at least against many-to-many). not sure if there are other conditions essentially look-ahead to the next fromelement that actually writes something to the sql	DESIGN	0.77539973804766	DESIGN	0.22460026195233992	WITHOUT_CLASSIFICATION
init the table here instead of earlier so that we can get a quoted table name todo would it be better to simply pass the qualified table name instead of splitting it up into schema/catalog/table names	DESIGN	0.9554434977475358	DESIGN	0.04455650225246414	WITHOUT_CLASSIFICATION
todo would be great to have a mapping#hasnonidentifierpropertynamedid method i don't believe that mapping#getreferencedpropertytype accounts for the identifier property so if it returns for a property named 'id' then we should have a non-id field named id	DESIGN	0.9995145614223226	DESIGN	4.854385776773618E-4	WITHOUT_CLASSIFICATION
todo is this really necessary????	DESIGN	0.9607577348913117	DESIGN	0.039242265108688265	WITHOUT_CLASSIFICATION
todo ideally we need the construction of propertyaccessor to take the following 1) entitymode 2) entitymode-specific data (i.e. the classname for pojo entities) 3) property-specific data based on the entitymode (i.e. property-name or dom4j-node-name) the easiest way with the introduction of the new runtime-metamodel classes would be the the following predicates 1) propertyaccessorfactory.getpropertyaccessor() takes references to both a org.hibernate.metadata.entitymodemetadata and org.hibernate.metadata.property 2) what is now termed a "propertyaccessor" stores any values needed from those two pieces of information 3) code can then simply call propertyaccess.getgetter() with no parameters likewise with propertyaccessor.getsetter()	DESIGN	0.8727636642476245	DESIGN	0.1272363357523754	WITHOUT_CLASSIFICATION
todo this is temporary in that the end result will probably not take a property reference per-se.	DESIGN	0.9978760913833108	DESIGN	0.0021239086166892048	WITHOUT_CLASSIFICATION
todo this eventually needs to be removed	DESIGN	0.9489219277499045	DESIGN	0.05107807225009556	WITHOUT_CLASSIFICATION
todo make this a bit nicer	DESIGN	0.9912607813718969	DESIGN	0.008739218628103161	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.995557091385239	DESIGN	0.00444290861476101	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.995557091385239	DESIGN	0.00444290861476101	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.995557091385239	DESIGN	0.00444290861476101	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.995557091385239	DESIGN	0.00444290861476101	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.995557091385239	DESIGN	0.00444290861476101	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.995557091385239	DESIGN	0.00444290861476101	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.995557091385239	DESIGN	0.00444290861476101	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.995557091385239	DESIGN	0.00444290861476101	WITHOUT_CLASSIFICATION
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9999999053371098	DESIGN	9.466289026852852E-8	WITHOUT_CLASSIFICATION
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9999999053371098	DESIGN	9.466289026852852E-8	WITHOUT_CLASSIFICATION
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9999999053371098	DESIGN	9.466289026852852E-8	WITHOUT_CLASSIFICATION
todo probably better to calculate these and pass them in as it'll be more performant	DESIGN	0.9849323778072143	DESIGN	0.015067622192785684	WITHOUT_CLASSIFICATION
