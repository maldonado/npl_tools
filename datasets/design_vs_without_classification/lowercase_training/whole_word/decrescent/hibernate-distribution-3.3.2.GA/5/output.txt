test out the optimizer	WITHOUT_CLASSIFICATION	0.9999928160552778	WITHOUT_CLASSIFICATION	7.18394472217094E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9995418557524398	WITHOUT_CLASSIFICATION	4.5814424756014145E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9995418557524398	WITHOUT_CLASSIFICATION	4.5814424756014145E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9995418557524398	WITHOUT_CLASSIFICATION	4.5814424756014145E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9995418557524398	WITHOUT_CLASSIFICATION	4.5814424756014145E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9995418557524398	WITHOUT_CLASSIFICATION	4.5814424756014145E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9995418557524398	WITHOUT_CLASSIFICATION	4.5814424756014145E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9995418557524398	WITHOUT_CLASSIFICATION	4.5814424756014145E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9995641997294952	WITHOUT_CLASSIFICATION	4.3580027050480445E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9995641997294952	WITHOUT_CLASSIFICATION	4.3580027050480445E-4	DESIGN
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9989699031578407	WITHOUT_CLASSIFICATION	0.0010300968421592773	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9996084438916226	WITHOUT_CLASSIFICATION	3.915561083774067E-4	DESIGN
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999519966372357	WITHOUT_CLASSIFICATION	4.800336276429602E-5	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999774283643899	WITHOUT_CLASSIFICATION	2.25716356101588E-5	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999774283643899	WITHOUT_CLASSIFICATION	2.25716356101588E-5	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999990014587851	WITHOUT_CLASSIFICATION	9.985412148896133E-7	DESIGN
invokeinterface invoke enabled.getinterceptfieldcallback()	WITHOUT_CLASSIFICATION	0.9998964898407544	WITHOUT_CLASSIFICATION	1.0351015924554363E-4	DESIGN
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9998487247240636	WITHOUT_CLASSIFICATION	1.5127527593635772E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9993209922189512	WITHOUT_CLASSIFICATION	6.790077810487502E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999929986626847	WITHOUT_CLASSIFICATION	7.0013373153456125E-6	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999929986626847	WITHOUT_CLASSIFICATION	7.0013373153456125E-6	DESIGN
long	WITHOUT_CLASSIFICATION	0.999577886654192	WITHOUT_CLASSIFICATION	4.2211334580797026E-4	DESIGN
just decrement the lock don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9998821983063706	WITHOUT_CLASSIFICATION	1.1780169362943543E-4	DESIGN
decode row selection	WITHOUT_CLASSIFICATION	0.9998692918188259	WITHOUT_CLASSIFICATION	1.3070818117408628E-4	DESIGN
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9990643115707903	WITHOUT_CLASSIFICATION	9.356884292095416E-4	DESIGN
again ccs did not have such a concept but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not jta aware.	WITHOUT_CLASSIFICATION	0.999739626638233	WITHOUT_CLASSIFICATION	2.603733617669657E-4	DESIGN
check	WITHOUT_CLASSIFICATION	0.9984384263320478	WITHOUT_CLASSIFICATION	0.0015615736679522577	DESIGN
row id	WITHOUT_CLASSIFICATION	0.9997332718366183	WITHOUT_CLASSIFICATION	2.667281633817421E-4	DESIGN
composite-id	WITHOUT_CLASSIFICATION	0.9996084438916226	WITHOUT_CLASSIFICATION	3.915561083774067E-4	DESIGN
discriminator	WITHOUT_CLASSIFICATION	0.9996085855473755	WITHOUT_CLASSIFICATION	3.91414452624497E-4	DESIGN
property prop = new property() prop.setname("id") prop.setpropertyaccessorname("embedded") prop.setvalue(id) entity.setidentifierproperty(prop)	WITHOUT_CLASSIFICATION	0.9998345255244597	WITHOUT_CLASSIFICATION	1.6547447554029882E-4	DESIGN
dynamic insert	WITHOUT_CLASSIFICATION	0.9997501071776115	WITHOUT_CLASSIFICATION	2.498928223885789E-4	DESIGN
persister	WITHOUT_CLASSIFICATION	0.9982688286514517	WITHOUT_CLASSIFICATION	0.0017311713485482529	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.998735616602651	WITHOUT_CLASSIFICATION	0.0012643833973489797	DESIGN
properties	WITHOUT_CLASSIFICATION	0.999204172717438	WITHOUT_CLASSIFICATION	7.958272825619886E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.999204172717438	WITHOUT_CLASSIFICATION	7.958272825619886E-4	DESIGN
generated properties can never be insertable	WITHOUT_CLASSIFICATION	0.9929068822067891	WITHOUT_CLASSIFICATION	0.00709311779321092	DESIGN
table	WITHOUT_CLASSIFICATION	0.9997995184022683	WITHOUT_CLASSIFICATION	2.0048159773172205E-4	DESIGN
by default natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.999911963758536	WITHOUT_CLASSIFICATION	8.803624146402593E-5	DESIGN
( (column) ( (simplevalue) ic.getindex() ).getcolumniterator().next() ).setnullable(false)	WITHOUT_CLASSIFICATION	0.9998472316089343	WITHOUT_CLASSIFICATION	1.52768391065749E-4	DESIGN
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.8701048710703466	WITHOUT_CLASSIFICATION	0.12989512892965335	DESIGN
build a resultsetmappingdefinition given a containing element for the "return-xxx" elements @param resultsetelem the element containing the return definitions. @param path no clue @param mappings the current processing state. @return the description of the mappings	WITHOUT_CLASSIFICATION	0.9998348211288066	WITHOUT_CLASSIFICATION	1.6517887119343156E-4	DESIGN
private boolean showsql private boolean formatsql	WITHOUT_CLASSIFICATION	0.9985726874872297	WITHOUT_CLASSIFICATION	0.0014273125127702508	DESIGN
public boolean isshowsqlenabled() { return showsql } public boolean isformatsqlenabled() { return formatsql }	WITHOUT_CLASSIFICATION	0.9978469824271404	WITHOUT_CLASSIFICATION	0.002153017572859691	DESIGN
set a custom entity resolver. this entity resolver must be set before addxxx(misc) call. default value is {@link org.hibernate.util.dtdentityresolver} @param entityresolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9972335357722787	WITHOUT_CLASSIFICATION	0.002766464227721388	DESIGN
final list extendsqueue	WITHOUT_CLASSIFICATION	0.9998721453757932	WITHOUT_CLASSIFICATION	1.278546242067555E-4	DESIGN
if close() is called guarantee unbind()	WITHOUT_CLASSIFICATION	0.9998563929614934	WITHOUT_CLASSIFICATION	1.4360703850652064E-4	DESIGN
if a threadlocalsessioncontext-bound session happens to get serialized to be completely correct we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9924405552750393	WITHOUT_CLASSIFICATION	0.007559444724960815	DESIGN
on the inverse it makes sense that if a threadlocalsessioncontext- bound session then gets deserialized to go ahead and re-bind it to the threadlocalsessioncontext session map.	WITHOUT_CLASSIFICATION	0.966598885085888	WITHOUT_CLASSIFICATION	0.03340111491411204	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998156266187591	WITHOUT_CLASSIFICATION	1.8437338124078232E-4	DESIGN
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9997106837342236	WITHOUT_CLASSIFICATION	2.8931626577639977E-4	DESIGN
optimisticcache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998979617863938	WITHOUT_CLASSIFICATION	1.0203821360618476E-4	DESIGN
cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998777106214919	WITHOUT_CLASSIFICATION	1.2228937850807496E-4	DESIGN
option.setdataversion( nonlockingdataversion.instance )	WITHOUT_CLASSIFICATION	0.9991708054840631	WITHOUT_CLASSIFICATION	8.291945159369908E-4	DESIGN
do the put outside the scope of the jta txn	WITHOUT_CLASSIFICATION	0.9996056500296527	WITHOUT_CLASSIFICATION	3.9434997034717E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9995412406281159	WITHOUT_CLASSIFICATION	4.587593718841749E-4	DESIGN
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (npes)	WITHOUT_CLASSIFICATION	0.9666764517065356	WITHOUT_CLASSIFICATION	0.033323548293464386	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9995871493826406	WITHOUT_CLASSIFICATION	4.1285061735940327E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9995412406281159	WITHOUT_CLASSIFICATION	4.587593718841749E-4	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9995871493826406	WITHOUT_CLASSIFICATION	4.1285061735940327E-4	DESIGN
do the failfast put outside the scope of the jta txn	WITHOUT_CLASSIFICATION	0.9996056500296527	WITHOUT_CLASSIFICATION	3.9434997034717E-4	DESIGN
note evict() operates locally only (i.e. does not propogate to any other nodes in the potential cluster). this is exactly what is needed when we destroy() here destroy() is used as part of the process of shutting down a sessionfactory thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999236391511357	DESIGN	7.63608488642477E-5	WITHOUT_CLASSIFICATION
protected regionrootlistener listener	WITHOUT_CLASSIFICATION	0.9994220980332474	WITHOUT_CLASSIFICATION	5.779019667525799E-4	DESIGN
establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.998472379532868	WITHOUT_CLASSIFICATION	0.0015276204671318752	DESIGN
if we've been blocking for the mutex perhaps another thread has already reestablished the root. in case the node was reestablised via replication confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9981636488284329	WITHOUT_CLASSIFICATION	0.0018363511715670854	DESIGN
for pessimistic locking we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999940856178913	WITHOUT_CLASSIFICATION	5.914382108802404E-6	DESIGN
the rest only matters for optimistic locking where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9974878103223052	WITHOUT_CLASSIFICATION	0.002512189677694929	DESIGN
don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9811669065151422	WITHOUT_CLASSIFICATION	0.01883309348485785	DESIGN
make sure the root node for the region exists and has a dataversion that never complains	WITHOUT_CLASSIFICATION	0.9999098525957725	WITHOUT_CLASSIFICATION	9.014740422754047E-5	DESIGN
never evict this node	WITHOUT_CLASSIFICATION	0.9979685519707872	WITHOUT_CLASSIFICATION	0.0020314480292128903	DESIGN
fix up the resident flag	WITHOUT_CLASSIFICATION	0.9875259948974519	WITHOUT_CLASSIFICATION	0.012474005102548116	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9995871493826406	WITHOUT_CLASSIFICATION	4.1285061735940327E-4	DESIGN
we ignore minimalputoverride. jbosscache putforexternalread is already about as minimal as we can get it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999888908747375	WITHOUT_CLASSIFICATION	1.1109125262459688E-5	DESIGN
no-op. we don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9990609714859414	WITHOUT_CLASSIFICATION	9.390285140585326E-4	DESIGN
this should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.961815080448631	WITHOUT_CLASSIFICATION	0.038184919551368934	DESIGN
we only build caches if none were passed in. passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9972715110624027	WITHOUT_CLASSIFICATION	0.0027284889375972423	DESIGN
set up the cache factory	WITHOUT_CLASSIFICATION	0.9971736226113178	WITHOUT_CLASSIFICATION	0.0028263773886822736	DESIGN
see if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999830673796537	WITHOUT_CLASSIFICATION	1.6932620346399005E-5	DESIGN
default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999825482755256	WITHOUT_CLASSIFICATION	1.7451724474442798E-5	DESIGN
default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999904686990603	WITHOUT_CLASSIFICATION	9.531300939714096E-6	DESIGN
for timestamps we default to a separate config	WITHOUT_CLASSIFICATION	0.9997342583906002	WITHOUT_CLASSIFICATION	2.6574160939986087E-4	DESIGN
we can't change the tm on a running cache just check if the cache has no tm and we're ok with that	WITHOUT_CLASSIFICATION	0.9994335993069845	WITHOUT_CLASSIFICATION	5.664006930154002E-4	DESIGN
configure the cache to use our tm	WITHOUT_CLASSIFICATION	0.9996070473810649	WITHOUT_CLASSIFICATION	3.9295261893509004E-4	DESIGN
make sure jbc doesn't look one up	WITHOUT_CLASSIFICATION	0.9998402913541725	WITHOUT_CLASSIFICATION	1.5970864582752852E-4	DESIGN
this method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9027709855811924	WITHOUT_CLASSIFICATION	0.09722901441880762	DESIGN
make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9982082637721058	WITHOUT_CLASSIFICATION	0.0017917362278941583	DESIGN
we use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9992138521947613	WITHOUT_CLASSIFICATION	7.861478052386417E-4	DESIGN
following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.8685283571366529	WITHOUT_CLASSIFICATION	0.13147164286334712	DESIGN
if jbc is using invalidation we don't want to propagate changes. we use the timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9998196612514514	WITHOUT_CLASSIFICATION	1.803387485485109E-4	DESIGN
we don't want to waste effort setting an option if jbc is already in local mode. if jbc is repl_(a)sync then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9984057855372733	WITHOUT_CLASSIFICATION	0.0015942144627267257	DESIGN
don't hold the jbc node lock throughout the tx as that prevents updates add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999938110342	WITHOUT_CLASSIFICATION	6.1889657356642865E-9	DESIGN
double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999843484120476	WITHOUT_CLASSIFICATION	1.565158795229128E-5	DESIGN
get an exclusive right to update jbc for this key from this node.	WITHOUT_CLASSIFICATION	0.9999433395603857	WITHOUT_CLASSIFICATION	5.6660439614212434E-5	DESIGN
we ensure async semantics (jbcache-1175)	WITHOUT_CLASSIFICATION	0.9986565819605084	WITHOUT_CLASSIFICATION	0.001343418039491623	DESIGN
initial load from jbc	WITHOUT_CLASSIFICATION	0.9995200941941731	WITHOUT_CLASSIFICATION	4.7990580582687363E-4	DESIGN
see if we had a 2nd invalidation from the same initial preinvalidation timestamp. if so only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999994444825405	WITHOUT_CLASSIFICATION	5.555174595037333E-7	DESIGN
we ensure async semantics (jbcache-1175)	WITHOUT_CLASSIFICATION	0.9986565819605084	WITHOUT_CLASSIFICATION	0.001343418039491623	DESIGN
if the workspace node has null as well ok if not we've been modified in a non-comparable manner which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999988924215544	WITHOUT_CLASSIFICATION	1.1075784456341745E-6	DESIGN
the standard comparator types are not serializable but are singletons	WITHOUT_CLASSIFICATION	0.999361106705423	WITHOUT_CLASSIFICATION	6.388932945769732E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9995412406281159	WITHOUT_CLASSIFICATION	4.587593718841749E-4	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9998348143295244	WITHOUT_CLASSIFICATION	1.651856704756345E-4	DESIGN
construct the cache	WITHOUT_CLASSIFICATION	0.9998417984781064	WITHOUT_CLASSIFICATION	1.5820152189366144E-4	DESIGN
local cache so we use synchronization	WITHOUT_CLASSIFICATION	0.9970174900144488	WITHOUT_CLASSIFICATION	0.002982509985551303	DESIGN
local cache so we use synchronization	WITHOUT_CLASSIFICATION	0.9970174900144488	WITHOUT_CLASSIFICATION	0.002982509985551303	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9996476298832373	WITHOUT_CLASSIFICATION	3.52370116762727E-4	DESIGN
swaldman 2006-08-28 define c3p0-style configuration parameters for initialpoolsize which hibernate sensibly lets default to minpoolsize but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.999989921065533	WITHOUT_CLASSIFICATION	1.0078934466941822E-5	DESIGN
datasource unpooled = datasources.unpooleddatasource(jdbcurl props.getproperty(environment.user) props.getproperty(environment.pass))	WITHOUT_CLASSIFICATION	0.9999470183026671	WITHOUT_CLASSIFICATION	5.2981697332807485E-5	DESIGN
true if the pool is borrowed from the outside false if we used to create it	WITHOUT_CLASSIFICATION	0.996584866873199	WITHOUT_CLASSIFICATION	0.0034151331268009546	DESIGN
get a connection from the pool (thru drivermanager cfr. proxool doc)	WITHOUT_CLASSIFICATION	0.9993183204603935	WITHOUT_CLASSIFICATION	6.816795396065414E-4	DESIGN
set the transaction isolation if defined	WITHOUT_CLASSIFICATION	0.9999300111185518	WITHOUT_CLASSIFICATION	6.998888144814293E-5	DESIGN
toggle autocommit to false if set	WITHOUT_CLASSIFICATION	0.9998528111649999	WITHOUT_CLASSIFICATION	1.4718883500008215E-4	DESIGN
return the connection	WITHOUT_CLASSIFICATION	0.9996661601427493	WITHOUT_CLASSIFICATION	3.338398572506622E-4	DESIGN
get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999800627510328	WITHOUT_CLASSIFICATION	1.9937248967204036E-5	DESIGN
default the proxool alias setting	WITHOUT_CLASSIFICATION	0.9999893159182436	WITHOUT_CLASSIFICATION	1.0684081756426583E-5	DESIGN
validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999697661684356	WITHOUT_CLASSIFICATION	3.0233831564381112E-5	DESIGN
validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999697661684356	WITHOUT_CLASSIFICATION	3.0233831564381112E-5	DESIGN
append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999798640269981	WITHOUT_CLASSIFICATION	2.0135973001903298E-5	DESIGN
set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.999733348136904	WITHOUT_CLASSIFICATION	2.666518630959616E-4	DESIGN
configured using the jaxp configurator	WITHOUT_CLASSIFICATION	0.9999244954803712	WITHOUT_CLASSIFICATION	7.550451962872023E-5	DESIGN
validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999697661684356	WITHOUT_CLASSIFICATION	3.0233831564381112E-5	DESIGN
append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999798640269981	WITHOUT_CLASSIFICATION	2.0135973001903298E-5	DESIGN
append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999798640269981	WITHOUT_CLASSIFICATION	2.0135973001903298E-5	DESIGN
configured using the properties file configurator	WITHOUT_CLASSIFICATION	0.9999661706515596	WITHOUT_CLASSIFICATION	3.382934844050223E-5	DESIGN
remember isolation level	WITHOUT_CLASSIFICATION	0.9576546851164293	WITHOUT_CLASSIFICATION	0.04234531488357068	DESIGN
if the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999985207552246	WITHOUT_CLASSIFICATION	1.4792447755140517E-6	DESIGN
we have created the pool ourselves so shut it down	WITHOUT_CLASSIFICATION	0.9999956151058698	WITHOUT_CLASSIFICATION	4.384894130224107E-6	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.978928956322331	WITHOUT_CLASSIFICATION	0.021071043677669002	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.978928956322331	WITHOUT_CLASSIFICATION	0.021071043677669002	DESIGN
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.999769197283795	WITHOUT_CLASSIFICATION	2.3080271620487473E-4	DESIGN
public currency getcurrency(int col) throws hibernateexception	WITHOUT_CLASSIFICATION	0.9995932647472906	WITHOUT_CLASSIFICATION	4.067352527094862E-4	DESIGN
default is pojo	WITHOUT_CLASSIFICATION	0.9998154174262662	WITHOUT_CLASSIFICATION	1.8458257373364894E-4	DESIGN
use setparameter for null values	WITHOUT_CLASSIFICATION	0.9985535387753951	WITHOUT_CLASSIFICATION	0.0014464612246048113	DESIGN
use setparameter for null values	WITHOUT_CLASSIFICATION	0.9985535387753951	WITHOUT_CLASSIFICATION	0.0014464612246048113	DESIGN
private cacheentry cacheentry	WITHOUT_CLASSIFICATION	0.9943349975890474	WITHOUT_CLASSIFICATION	0.005665002410952574	DESIGN
don't need to lock the cache here since if someone else inserted the same pk first the insert would fail	WITHOUT_CLASSIFICATION	0.9999663886540995	WITHOUT_CLASSIFICATION	3.3611345900524194E-5	DESIGN
make 100% certain that this is called before any subsequent scheduledupdate.aftertransactioncompletion()!!	WITHOUT_CLASSIFICATION	0.9975692058755776	WITHOUT_CLASSIFICATION	0.002430794124422464	DESIGN
get the updated snapshot of the entity state by cloning current state it is safe to copy in place since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999992783083714	WITHOUT_CLASSIFICATION	7.216916285905242E-7	DESIGN
this entity defines proeprty generation so process those generated values	WITHOUT_CLASSIFICATION	0.9996143726630716	WITHOUT_CLASSIFICATION	3.856273369284592E-4	DESIGN
have the entity entry perform post-update processing passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999849249338687	WITHOUT_CLASSIFICATION	1.5075066131243037E-5	DESIGN
!persister.iscacheinvalidationrequired()	WITHOUT_CLASSIFICATION	0.9995293047305601	WITHOUT_CLASSIFICATION	4.7069526943993654E-4	DESIGN
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9993368209072705	WITHOUT_CLASSIFICATION	6.631790927293836E-4	DESIGN
sort first by role name	WITHOUT_CLASSIFICATION	0.9997440030088222	WITHOUT_CLASSIFICATION	2.559969911777999E-4	DESIGN
make 100% certain that this is called before any subsequent scheduledupdate.aftertransactioncompletion()!!	WITHOUT_CLASSIFICATION	0.9975692058755776	WITHOUT_CLASSIFICATION	0.002430794124422464	DESIGN
then by fk	WITHOUT_CLASSIFICATION	0.9962183306615583	WITHOUT_CLASSIFICATION	0.003781669338441823	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.999669270531388	WITHOUT_CLASSIFICATION	3.3072946861203794E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.999669270531388	WITHOUT_CLASSIFICATION	3.3072946861203794E-4	DESIGN
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.7953589686857654	WITHOUT_CLASSIFICATION	0.20464103131423464	DESIGN
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9975813019477073	WITHOUT_CLASSIFICATION	0.0024186980522927157	DESIGN
boolean put = persister.getcache().insert(ck cacheentry)	WITHOUT_CLASSIFICATION	0.9998704607668693	WITHOUT_CLASSIFICATION	1.2953923313073655E-4	DESIGN
we need to grab the version value from the entity otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9794036425831361	WITHOUT_CLASSIFICATION	0.020596357416863963	DESIGN
do nothing - we only need to notify the cache	WITHOUT_CLASSIFICATION	0.9973731725475584	WITHOUT_CLASSIFICATION	0.0026268274524416315	DESIGN
sort first by entity name	WITHOUT_CLASSIFICATION	0.9998939049820178	WITHOUT_CLASSIFICATION	1.0609501798221979E-4	DESIGN
then by id	WITHOUT_CLASSIFICATION	0.9995263859329805	WITHOUT_CLASSIFICATION	4.7361406701950694E-4	DESIGN
to be safe	WITHOUT_CLASSIFICATION	0.9996185911576106	WITHOUT_CLASSIFICATION	3.8140884238932596E-4	DESIGN
no transformations took place so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9997327944329063	WITHOUT_CLASSIFICATION	2.6720556709369596E-4	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999458249640072	WITHOUT_CLASSIFICATION	5.4175035992721115E-5	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999458249640072	WITHOUT_CLASSIFICATION	5.4175035992721115E-5	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9994214643638152	WITHOUT_CLASSIFICATION	5.785356361847798E-4	DESIGN
test out the optimizer	WITHOUT_CLASSIFICATION	0.9999928160552778	WITHOUT_CLASSIFICATION	7.18394472217094E-6	DESIGN
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9988717055771267	WITHOUT_CLASSIFICATION	0.0011282944228733368	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9995418557524398	WITHOUT_CLASSIFICATION	4.5814424756014145E-4	DESIGN
invokespecial	WITHOUT_CLASSIFICATION	0.9996084438916226	WITHOUT_CLASSIFICATION	3.915561083774067E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9995641997294952	WITHOUT_CLASSIFICATION	4.3580027050480445E-4	DESIGN
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9995966481385758	WITHOUT_CLASSIFICATION	4.033518614241123E-4	DESIGN
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9969154761327318	WITHOUT_CLASSIFICATION	0.0030845238672683227	DESIGN
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999223228311456	WITHOUT_CLASSIFICATION	7.767716885447345E-5	DESIGN
aload_2 args	WITHOUT_CLASSIFICATION	0.9992862045252465	WITHOUT_CLASSIFICATION	7.137954747534376E-4	DESIGN
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999006530630086	WITHOUT_CLASSIFICATION	9.93469369914291E-5	DESIGN
new	WITHOUT_CLASSIFICATION	0.999546274826491	WITHOUT_CLASSIFICATION	4.5372517350893284E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9995612384754108	WITHOUT_CLASSIFICATION	4.3876152458924094E-4	DESIGN
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9997787628484364	WITHOUT_CLASSIFICATION	2.2123715156365417E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9996084438916226	WITHOUT_CLASSIFICATION	3.915561083774067E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9996084438916226	WITHOUT_CLASSIFICATION	3.915561083774067E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9996084438916226	WITHOUT_CLASSIFICATION	3.915561083774067E-4	DESIGN
aastore args	WITHOUT_CLASSIFICATION	0.9992852463979547	WITHOUT_CLASSIFICATION	7.147536020452488E-4	DESIGN
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9879340176717435	WITHOUT_CLASSIFICATION	0.012065982328256519	DESIGN
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9951340972854464	WITHOUT_CLASSIFICATION	0.004865902714553564	DESIGN
istore_3 store i	WITHOUT_CLASSIFICATION	0.9997321522365473	WITHOUT_CLASSIFICATION	2.678477634526444E-4	DESIGN
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9995368231479476	WITHOUT_CLASSIFICATION	4.6317685205237824E-4	DESIGN
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9896400656277663	WITHOUT_CLASSIFICATION	0.010359934372233778	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999774283643899	WITHOUT_CLASSIFICATION	2.25716356101588E-5	DESIGN
start region to handling exception (bulkaccessorexception)	WITHOUT_CLASSIFICATION	0.997928722503744	WITHOUT_CLASSIFICATION	0.002071277496256034	DESIGN
iinc 3 1	WITHOUT_CLASSIFICATION	0.9994529703917466	WITHOUT_CLASSIFICATION	5.470296082534819E-4	DESIGN
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.999750703386816	WITHOUT_CLASSIFICATION	2.492966131838954E-4	DESIGN
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9995437335462521	WITHOUT_CLASSIFICATION	4.562664537478342E-4	DESIGN
iconst_i	WITHOUT_CLASSIFICATION	0.9995412406281159	WITHOUT_CLASSIFICATION	4.587593718841749E-4	DESIGN
aaload	WITHOUT_CLASSIFICATION	0.9995412406281159	WITHOUT_CLASSIFICATION	4.587593718841749E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.999541590163413	WITHOUT_CLASSIFICATION	4.5840983658698237E-4	DESIGN
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9997235698948361	WITHOUT_CLASSIFICATION	2.7643010516379676E-4	DESIGN
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9997148220660815	WITHOUT_CLASSIFICATION	2.8517793391854933E-4	DESIGN
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999752907396352	WITHOUT_CLASSIFICATION	2.4709260364790813E-5	DESIGN
end region to handling exception (bulkaccessorexception)	WITHOUT_CLASSIFICATION	0.9980846268136173	WITHOUT_CLASSIFICATION	0.0019153731863826514	DESIGN
register in exception table	WITHOUT_CLASSIFICATION	0.9981519490854258	WITHOUT_CLASSIFICATION	0.001848050914574163	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9995418557524398	WITHOUT_CLASSIFICATION	4.5814424756014145E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9995418557524398	WITHOUT_CLASSIFICATION	4.5814424756014145E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9995641997294952	WITHOUT_CLASSIFICATION	4.3580027050480445E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9995641997294952	WITHOUT_CLASSIFICATION	4.3580027050480445E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9995612384754108	WITHOUT_CLASSIFICATION	4.3876152458924094E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9996084438916226	WITHOUT_CLASSIFICATION	3.915561083774067E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.999541590163413	WITHOUT_CLASSIFICATION	4.5840983658698237E-4	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999990014587851	WITHOUT_CLASSIFICATION	9.985412148896133E-7	DESIGN
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999351964634049	WITHOUT_CLASSIFICATION	6.48035365951689E-5	DESIGN
new bulkaccessorexception	WITHOUT_CLASSIFICATION	0.9991226448836398	WITHOUT_CLASSIFICATION	8.773551163602322E-4	DESIGN
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9996634784903573	WITHOUT_CLASSIFICATION	3.365215096426334E-4	DESIGN
iload_3 i	WITHOUT_CLASSIFICATION	0.9970782581601464	WITHOUT_CLASSIFICATION	0.002921741839853558	DESIGN
invokespecial bulkaccessorexception.<init>	WITHOUT_CLASSIFICATION	0.9995293047305601	WITHOUT_CLASSIFICATION	4.7069526943993654E-4	DESIGN
athrow	WITHOUT_CLASSIFICATION	0.9995414288399391	WITHOUT_CLASSIFICATION	4.585711600608246E-4	DESIGN
warning classfile only	WITHOUT_CLASSIFICATION	0.9999556807572175	WITHOUT_CLASSIFICATION	4.43192427823698E-5	DESIGN
swallow	WITHOUT_CLASSIFICATION	0.9995469404571576	WITHOUT_CLASSIFICATION	4.5305954284236265E-4	DESIGN
local variable | this |	WITHOUT_CLASSIFICATION	0.9976436048228626	WITHOUT_CLASSIFICATION	0.0023563951771373506	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9983476675678302	WITHOUT_CLASSIFICATION	0.0016523324321697154	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9983476675678302	WITHOUT_CLASSIFICATION	0.0016523324321697154	DESIGN
getfield get field "$javassist_callback" defined already	WITHOUT_CLASSIFICATION	0.9979420748371041	WITHOUT_CLASSIFICATION	0.0020579251628958938	DESIGN
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9998547027541054	WITHOUT_CLASSIFICATION	1.452972458945301E-4	DESIGN
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9994875207986621	WITHOUT_CLASSIFICATION	5.124792013378908E-4	DESIGN
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9993810395010274	WITHOUT_CLASSIFICATION	6.189604989726047E-4	DESIGN
putfield put field "$javassist_callback" defined already	WITHOUT_CLASSIFICATION	0.996940384984051	WITHOUT_CLASSIFICATION	0.0030596150159489543	DESIGN
case of non-static field	WITHOUT_CLASSIFICATION	0.9985016258060687	WITHOUT_CLASSIFICATION	0.00149837419393133	DESIGN
getfield get each field	WITHOUT_CLASSIFICATION	0.9993512213281579	WITHOUT_CLASSIFICATION	6.487786718421407E-4	DESIGN
invokeinterface invoke enabled.getinterceptfieldcallback()	WITHOUT_CLASSIFICATION	0.9998964898407544	WITHOUT_CLASSIFICATION	1.0351015924554363E-4	DESIGN
ifnonnull	WITHOUT_CLASSIFICATION	0.9996460171366985	WITHOUT_CLASSIFICATION	3.539828633014638E-4	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9996402563758271	WITHOUT_CLASSIFICATION	3.597436241729644E-4	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9996402563758271	WITHOUT_CLASSIFICATION	3.597436241729644E-4	DESIGN
store_1 each type	WITHOUT_CLASSIFICATION	0.9996213026200271	WITHOUT_CLASSIFICATION	3.786973799729406E-4	DESIGN
ldc name of the field	WITHOUT_CLASSIFICATION	0.9991471696952466	WITHOUT_CLASSIFICATION	8.528303047534354E-4	DESIGN
load_1 each type	WITHOUT_CLASSIFICATION	0.9996213026200271	WITHOUT_CLASSIFICATION	3.786973799729406E-4	DESIGN
invokeinterface invoke callback.read() each type	WITHOUT_CLASSIFICATION	0.9998998900685615	WITHOUT_CLASSIFICATION	1.0010993143849449E-4	DESIGN
int	WITHOUT_CLASSIFICATION	0.9996861886359405	WITHOUT_CLASSIFICATION	3.138113640594066E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9995641997294952	WITHOUT_CLASSIFICATION	4.3580027050480445E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9995612384754108	WITHOUT_CLASSIFICATION	4.3876152458924094E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9996084438916226	WITHOUT_CLASSIFICATION	3.915561083774067E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.999541590163413	WITHOUT_CLASSIFICATION	4.5840983658698237E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.999541590163413	WITHOUT_CLASSIFICATION	4.5840983658698237E-4	DESIGN
invokeinterface enabled.getinterceptfieldcallback()	WITHOUT_CLASSIFICATION	0.9995293047305601	WITHOUT_CLASSIFICATION	4.7069526943993654E-4	DESIGN
invokeinterface enabled.getinterceptfieldcallback()	WITHOUT_CLASSIFICATION	0.9995293047305601	WITHOUT_CLASSIFICATION	4.7069526943993654E-4	DESIGN
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9996978764194153	WITHOUT_CLASSIFICATION	3.021235805846478E-4	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9995412406281159	WITHOUT_CLASSIFICATION	4.587593718841749E-4	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9995412406281159	WITHOUT_CLASSIFICATION	4.587593718841749E-4	DESIGN
putfield	WITHOUT_CLASSIFICATION	0.9995412406281159	WITHOUT_CLASSIFICATION	4.587593718841749E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9995641997294952	WITHOUT_CLASSIFICATION	4.3580027050480445E-4	DESIGN
ldc field name	WITHOUT_CLASSIFICATION	0.9990734397943829	WITHOUT_CLASSIFICATION	9.265602056170716E-4	DESIGN
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999809949395895	WITHOUT_CLASSIFICATION	1.9005060410602158E-5	DESIGN
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9995293047305601	WITHOUT_CLASSIFICATION	4.7069526943993654E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9993209922189512	WITHOUT_CLASSIFICATION	6.790077810487502E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9993209922189512	WITHOUT_CLASSIFICATION	6.790077810487502E-4	DESIGN
not array	WITHOUT_CLASSIFICATION	0.9991710358259096	WITHOUT_CLASSIFICATION	8.289641740904584E-4	DESIGN
array of reference type	WITHOUT_CLASSIFICATION	0.9994165783100447	WITHOUT_CLASSIFICATION	5.834216899551983E-4	DESIGN
boolean	WITHOUT_CLASSIFICATION	0.9996298278195179	WITHOUT_CLASSIFICATION	3.701721804819972E-4	DESIGN
byte	WITHOUT_CLASSIFICATION	0.999363910303656	WITHOUT_CLASSIFICATION	6.360896963439153E-4	DESIGN
char	WITHOUT_CLASSIFICATION	0.9997881521579352	WITHOUT_CLASSIFICATION	2.118478420648698E-4	DESIGN
short	WITHOUT_CLASSIFICATION	0.9992286546791916	WITHOUT_CLASSIFICATION	7.713453208082377E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999929986626847	WITHOUT_CLASSIFICATION	7.0013373153456125E-6	DESIGN
float	WITHOUT_CLASSIFICATION	0.9996150508184352	WITHOUT_CLASSIFICATION	3.849491815648679E-4	DESIGN
float	WITHOUT_CLASSIFICATION	0.9996150508184352	WITHOUT_CLASSIFICATION	3.849491815648679E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.999577886654192	WITHOUT_CLASSIFICATION	4.2211334580797026E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.999577886654192	WITHOUT_CLASSIFICATION	4.2211334580797026E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9995912843416259	WITHOUT_CLASSIFICATION	4.0871565837415384E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9995912843416259	WITHOUT_CLASSIFICATION	4.0871565837415384E-4	DESIGN
boolean byte char int short	WITHOUT_CLASSIFICATION	0.9994726913231253	WITHOUT_CLASSIFICATION	5.273086768746642E-4	DESIGN
boolean byte char int short	WITHOUT_CLASSIFICATION	0.9994726913231253	WITHOUT_CLASSIFICATION	5.273086768746642E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9993209922189512	WITHOUT_CLASSIFICATION	6.790077810487502E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999929986626847	WITHOUT_CLASSIFICATION	7.0013373153456125E-6	DESIGN
float	WITHOUT_CLASSIFICATION	0.9996150508184352	WITHOUT_CLASSIFICATION	3.849491815648679E-4	DESIGN
float	WITHOUT_CLASSIFICATION	0.9996150508184352	WITHOUT_CLASSIFICATION	3.849491815648679E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.999577886654192	WITHOUT_CLASSIFICATION	4.2211334580797026E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9995912843416259	WITHOUT_CLASSIFICATION	4.0871565837415384E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9995912843416259	WITHOUT_CLASSIFICATION	4.0871565837415384E-4	DESIGN
boolean byte char int short	WITHOUT_CLASSIFICATION	0.9994726913231253	WITHOUT_CLASSIFICATION	5.273086768746642E-4	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9957872588325717	WITHOUT_CLASSIFICATION	0.004212741167428359	DESIGN
mainly for oscache	WITHOUT_CLASSIFICATION	0.9996659649818813	WITHOUT_CLASSIFICATION	3.340350181187412E-4	DESIGN
decrement the lock	WITHOUT_CLASSIFICATION	0.9998037074322915	WITHOUT_CLASSIFICATION	1.9629256770841612E-4	DESIGN
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9998537734713249	WITHOUT_CLASSIFICATION	1.462265286752198E-4	DESIGN
recache the updated state	WITHOUT_CLASSIFICATION	0.9998700573724123	WITHOUT_CLASSIFICATION	1.2994262758770562E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9996945845527261	WITHOUT_CLASSIFICATION	3.0541544727389985E-4	DESIGN
null clientlock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999894327950464	WITHOUT_CLASSIFICATION	1.056720495357959E-5	DESIGN
we really could refresh the item if it is not a lock but it might be slower return freshtimestamp < txtimestamp	WITHOUT_CLASSIFICATION	0.9891919309526724	WITHOUT_CLASSIFICATION	0.010808069047327493	DESIGN
by requiring < we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999451012143658	WITHOUT_CLASSIFICATION	5.4898785634192076E-5	DESIGN
the user provided resulttransformer not the one used with "select new". here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.968340128878394	WITHOUT_CLASSIFICATION	0.031659871121606016	DESIGN
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999627737078459	WITHOUT_CLASSIFICATION	3.722629215412288E-5	DESIGN
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999440761507491	WITHOUT_CLASSIFICATION	5.5923849250893885E-5	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9996476298832373	WITHOUT_CLASSIFICATION	3.52370116762727E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9996945845527261	WITHOUT_CLASSIFICATION	3.0541544727389985E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9996945845527261	WITHOUT_CLASSIFICATION	3.0541544727389985E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9996945845527261	WITHOUT_CLASSIFICATION	3.0541544727389985E-4	DESIGN
this is called from settingsfactory irregardless trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9886648949574133	WITHOUT_CLASSIFICATION	0.011335105042586644	DESIGN
do nothing subclasses may override.	WITHOUT_CLASSIFICATION	0.9987190755842673	WITHOUT_CLASSIFICATION	0.0012809244157327346	DESIGN
do nothing subclasses may override.	WITHOUT_CLASSIFICATION	0.9987190755842673	WITHOUT_CLASSIFICATION	0.0012809244157327346	DESIGN
throw new unsupportedoperationexception("can't write to a readonly object")	WITHOUT_CLASSIFICATION	0.9968675784553496	WITHOUT_CLASSIFICATION	0.0031324215446504856	DESIGN
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9991923672336475	WITHOUT_CLASSIFICATION	8.076327663525155E-4	DESIGN
persister.setidentifier(result id) before calling interceptor for consistency with normal load	WITHOUT_CLASSIFICATION	0.9998898849210289	WITHOUT_CLASSIFICATION	1.1011507897113657E-4	DESIGN
no-op ccs did not have such a concept	WITHOUT_CLASSIFICATION	0.9971804498393079	WITHOUT_CLASSIFICATION	0.0028195501606920197	DESIGN
no-op ccs did not have such a concept	WITHOUT_CLASSIFICATION	0.9971804498393079	WITHOUT_CLASSIFICATION	0.0028195501606920197	DESIGN
again ccs did not have such a concept but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not jta aware.	WITHOUT_CLASSIFICATION	0.999739626638233	WITHOUT_CLASSIFICATION	2.603733617669657E-4	DESIGN
again ccs did not have such a concept however a reasonable proximity is to clear the cache. for non-transaction aware caches we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9998577477815911	WITHOUT_CLASSIFICATION	1.4225221840897528E-4	DESIGN
again ccs did not have such a concept however a reasonable proximity is to clear the cache. for non-transaction aware caches we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9998577477815911	WITHOUT_CLASSIFICATION	1.4225221840897528E-4	DESIGN
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.996969451441804	WITHOUT_CLASSIFICATION	0.003030548558195977	DESIGN
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9993289881929539	WITHOUT_CLASSIFICATION	6.710118070460814E-4	DESIGN
get meta's from <class>	WITHOUT_CLASSIFICATION	0.998735616602651	WITHOUT_CLASSIFICATION	0.0012643833973489797	DESIGN
db-objectname	WITHOUT_CLASSIFICATION	0.9996084438916226	WITHOUT_CLASSIFICATION	3.915561083774067E-4	DESIGN
mutable	WITHOUT_CLASSIFICATION	0.9997748889507473	WITHOUT_CLASSIFICATION	2.251110492526683E-4	DESIGN
where	WITHOUT_CLASSIFICATION	0.9998666256877188	WITHOUT_CLASSIFICATION	1.3337431228117234E-4	DESIGN
check	WITHOUT_CLASSIFICATION	0.9984384263320478	WITHOUT_CLASSIFICATION	0.0015615736679522577	DESIGN
polymorphism	WITHOUT_CLASSIFICATION	0.9996084438916226	WITHOUT_CLASSIFICATION	3.915561083774067E-4	DESIGN
todo	WITHOUT_CLASSIFICATION	0.6829548036895678	WITHOUT_CLASSIFICATION	0.31704519631043215	DESIGN
id	WITHOUT_CLASSIFICATION	0.9992925131038872	WITHOUT_CLASSIFICATION	7.074868961127363E-4	DESIGN
version / timestamp	WITHOUT_CLASSIFICATION	0.9998415958735066	WITHOUT_CLASSIFICATION	1.5840412649332445E-4	DESIGN
discriminator	WITHOUT_CLASSIFICATION	0.9996085855473755	WITHOUT_CLASSIFICATION	3.91414452624497E-4	DESIGN
primary key constraint	WITHOUT_CLASSIFICATION	0.9997396754996003	WITHOUT_CLASSIFICATION	2.603245003997228E-4	DESIGN
this is either a <version/> tag with no type attribute or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9994941038975339	WITHOUT_CLASSIFICATION	5.058961024660162E-4	DESIGN
for version properties marked as being generated make sure they are "always" generated aka "insert" is invalid this is dis-allowed by the dtd but just to make sure	WITHOUT_CLASSIFICATION	0.9972962023411837	WITHOUT_CLASSIFICATION	0.002703797658816469	DESIGN
discriminator	WITHOUT_CLASSIFICATION	0.9996085855473755	WITHOUT_CLASSIFICATION	3.91414452624497E-4	DESIGN
( (column) discrim.getcolumniterator().next() ).settype(type)	WITHOUT_CLASSIFICATION	0.9998472316089343	WITHOUT_CLASSIFICATION	1.52768391065749E-4	DESIGN
go ahead and set the lazy here since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999921686779549	WITHOUT_CLASSIFICATION	7.83132204494956E-6	DESIGN
dynamic update	WITHOUT_CLASSIFICATION	0.9999806414430538	WITHOUT_CLASSIFICATION	1.935855694626927E-5	DESIGN
import	WITHOUT_CLASSIFICATION	0.9993720050807329	WITHOUT_CLASSIFICATION	6.279949192670917E-4	DESIGN
batch size	WITHOUT_CLASSIFICATION	0.999860022168507	WITHOUT_CLASSIFICATION	1.399778314930417E-4	DESIGN
select before update	WITHOUT_CLASSIFICATION	0.9999937236721834	WITHOUT_CLASSIFICATION	6.27632781661569E-6	DESIGN
optimistic lock mode	WITHOUT_CLASSIFICATION	0.9992362782671067	WITHOUT_CLASSIFICATION	7.637217328932657E-4	DESIGN
persister	WITHOUT_CLASSIFICATION	0.9982688286514517	WITHOUT_CLASSIFICATION	0.0017311713485482529	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999601751267025	WITHOUT_CLASSIFICATION	3.982487329744095E-5	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.998735616602651	WITHOUT_CLASSIFICATION	0.0012643833973489797	DESIGN
properties	WITHOUT_CLASSIFICATION	0.999204172717438	WITHOUT_CLASSIFICATION	7.958272825619886E-4	DESIGN
joined subclasses	WITHOUT_CLASSIFICATION	0.9995914360283215	WITHOUT_CLASSIFICATION	4.085639716785698E-4	DESIGN
key	WITHOUT_CLASSIFICATION	0.9999013231431548	WITHOUT_CLASSIFICATION	9.867685684512391E-5	DESIGN
check	WITHOUT_CLASSIFICATION	0.9984384263320478	WITHOUT_CLASSIFICATION	0.0015615736679522577	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999601751267025	WITHOUT_CLASSIFICATION	3.982487329744095E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.999204172717438	WITHOUT_CLASSIFICATION	7.958272825619886E-4	DESIGN
key	WITHOUT_CLASSIFICATION	0.9999013231431548	WITHOUT_CLASSIFICATION	9.867685684512391E-5	DESIGN
model.getkey().settype( new type( model.getidentifier() ) )	WITHOUT_CLASSIFICATION	0.9991799013192275	WITHOUT_CLASSIFICATION	8.200986807724283E-4	DESIGN
tablename	WITHOUT_CLASSIFICATION	0.9996360316895084	WITHOUT_CLASSIFICATION	3.639683104915931E-4	DESIGN
join.getkey().settype( new type( lazz.getidentifier() ) )	WITHOUT_CLASSIFICATION	0.9991799013192275	WITHOUT_CLASSIFICATION	8.200986807724283E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.999204172717438	WITHOUT_CLASSIFICATION	7.958272825619886E-4	DESIGN
column(s)	WITHOUT_CLASSIFICATION	0.9995843977868947	WITHOUT_CLASSIFICATION	4.15602213105384E-4	DESIGN
column index	WITHOUT_CLASSIFICATION	0.9999310395511356	WITHOUT_CLASSIFICATION	6.896044886445291E-5	DESIGN
column unique-key	WITHOUT_CLASSIFICATION	0.9998066161461676	WITHOUT_CLASSIFICATION	1.9338385383237236E-4	DESIGN
automatically makes a column with the default name if none is specifed by xml	WITHOUT_CLASSIFICATION	0.9987130952671528	WITHOUT_CLASSIFICATION	0.0012869047328472906	DESIGN
for an any	WITHOUT_CLASSIFICATION	0.9996899562874215	WITHOUT_CLASSIFICATION	3.1004371257845563E-4	DESIGN
insertable simply because that is the user did not specify anything just override it	WITHOUT_CLASSIFICATION	0.9999958974958362	WITHOUT_CLASSIFICATION	4.102504163821713E-6	DESIGN
the user specifically supplied insert="true" which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999991563832916	WITHOUT_CLASSIFICATION	8.436167084111953E-6	DESIGN
properties generated on update can never be updateable	WITHOUT_CLASSIFICATION	0.9996593959405947	WITHOUT_CLASSIFICATION	3.406040594053618E-4	DESIGN
updateable only because the user did not specify anything just override it	WITHOUT_CLASSIFICATION	0.9999993516563279	WITHOUT_CLASSIFICATION	6.483436721140628E-7	DESIGN
the user specifically supplied update="true" which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999991563832916	WITHOUT_CLASSIFICATION	8.436167084111953E-6	DESIGN
rolename	WITHOUT_CLASSIFICATION	0.9995606471773599	WITHOUT_CLASSIFICATION	4.3935282263998874E-4	DESIGN
fetch strategy	WITHOUT_CLASSIFICATION	0.9994540903904112	WITHOUT_CLASSIFICATION	5.459096095887393E-4	DESIGN
table	WITHOUT_CLASSIFICATION	0.9997995184022683	WITHOUT_CLASSIFICATION	2.0048159773172205E-4	DESIGN
tablename = mappings.getnamingstrategy().propertytotablename( classname path )	WITHOUT_CLASSIFICATION	0.9999412693094623	WITHOUT_CLASSIFICATION	5.873069053782064E-5	DESIGN
sort	WITHOUT_CLASSIFICATION	0.99973907428223	WITHOUT_CLASSIFICATION	2.609257177699843E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999601751267025	WITHOUT_CLASSIFICATION	3.982487329744095E-5	DESIGN
unsorted natural comparator.class.name	WITHOUT_CLASSIFICATION	0.999532979798523	WITHOUT_CLASSIFICATION	4.67020201477025E-4	DESIGN
orphan delete (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9980924437254991	WITHOUT_CLASSIFICATION	0.0019075562745008712	DESIGN
set up second pass	WITHOUT_CLASSIFICATION	0.9998926103457345	WITHOUT_CLASSIFICATION	1.0738965426537739E-4	DESIGN
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.883346271146833	WITHOUT_CLASSIFICATION	0.1166537288531671	DESIGN
a nested composite element	WITHOUT_CLASSIFICATION	0.9907709922697712	WITHOUT_CLASSIFICATION	0.009229007730228818	DESIGN
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9997538575010266	WITHOUT_CLASSIFICATION	2.4614249897342E-4	DESIGN
note special case one-to-one constrained=false cannot be proxied so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999961074337675	WITHOUT_CLASSIFICATION	3.892566232431412E-6	DESIGN
use old (hb 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999857902694671	WITHOUT_CLASSIFICATION	1.4209730533016803E-5	DESIGN
lazy = !join	WITHOUT_CLASSIFICATION	0.9999002393440916	WITHOUT_CLASSIFICATION	9.976065590833113E-5	DESIGN
generator	WITHOUT_CLASSIFICATION	0.9998211356569329	WITHOUT_CLASSIFICATION	1.788643430670526E-4	DESIGN
id unsaved-value	WITHOUT_CLASSIFICATION	0.9993961302346152	WITHOUT_CLASSIFICATION	6.038697653848547E-4	DESIGN
version unsaved-value	WITHOUT_CLASSIFICATION	0.9975483079589058	WITHOUT_CLASSIFICATION	0.002451692041094092	DESIGN
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9803915783252795	WITHOUT_CLASSIFICATION	0.019608421674720433	DESIGN
( (column) ( (simplevalue) ic.getindex() ).getcolumniterator().next() ).setnullable(false)	WITHOUT_CLASSIFICATION	0.9998472316089343	WITHOUT_CLASSIFICATION	1.52768391065749E-4	DESIGN
contained elements	WITHOUT_CLASSIFICATION	0.9999017766875246	WITHOUT_CLASSIFICATION	9.822331247548399E-5	DESIGN
for non-inverse one-to-many with a not-null fk add a backref!	WITHOUT_CLASSIFICATION	0.9709115780207311	WITHOUT_CLASSIFICATION	0.029088421979268815	DESIGN
bind the where	WITHOUT_CLASSIFICATION	0.9999475848335297	WITHOUT_CLASSIFICATION	5.241516647016266E-5	DESIGN
bind the order-by	WITHOUT_CLASSIFICATION	0.9998196751732203	WITHOUT_CLASSIFICATION	1.8032482677960592E-4	DESIGN
bind the filters	WITHOUT_CLASSIFICATION	0.9998653317939284	WITHOUT_CLASSIFICATION	1.3466820607150562E-4	DESIGN
overriding inherited meta attribute. hbx-621 & hbx-793	WITHOUT_CLASSIFICATION	0.999332278231922	WITHOUT_CLASSIFICATION	6.677217680778772E-4	DESIGN
first iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999994558724854	WITHOUT_CLASSIFICATION	5.441275146723117E-7	DESIGN
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a fqn (in the case of a pojo mapping).	WITHOUT_CLASSIFICATION	0.9997120453720523	WITHOUT_CLASSIFICATION	2.879546279477199E-4	DESIGN
+ "_" + referencedcolumnname not used for backward compatibility	WITHOUT_CLASSIFICATION	0.6484688080277501	DESIGN	0.35153119197224997	WITHOUT_CLASSIFICATION
sessionfactory name	WITHOUT_CLASSIFICATION	0.999541920497191	WITHOUT_CLASSIFICATION	4.580795028089267E-4	DESIGN
jdbc and connection settings	WITHOUT_CLASSIFICATION	0.999898362743578	WITHOUT_CLASSIFICATION	1.0163725642201435E-4	DESIGN
jdbc and connection settings	WITHOUT_CLASSIFICATION	0.999898362743578	WITHOUT_CLASSIFICATION	1.0163725642201435E-4	DESIGN
interrogate jdbc metadata	WITHOUT_CLASSIFICATION	0.9997596471604178	WITHOUT_CLASSIFICATION	2.4035283958217247E-4	DESIGN
user supplied jdbc connections	WITHOUT_CLASSIFICATION	0.9999581745738094	WITHOUT_CLASSIFICATION	4.182542619059195E-5	DESIGN
use dialect default properties	WITHOUT_CLASSIFICATION	0.9908116952150122	WITHOUT_CLASSIFICATION	0.009188304784987741	DESIGN
transaction settings	WITHOUT_CLASSIFICATION	0.9998737728657676	WITHOUT_CLASSIFICATION	1.2622713423231656E-4	DESIGN
sql generation settings	WITHOUT_CLASSIFICATION	0.9997653592601056	WITHOUT_CLASSIFICATION	2.3464073989432502E-4	DESIGN
query parser settings	WITHOUT_CLASSIFICATION	0.9977783082569381	WITHOUT_CLASSIFICATION	0.0022216917430618165	DESIGN
second-level / query cache	WITHOUT_CLASSIFICATION	0.9998778131495768	WITHOUT_CLASSIFICATION	1.2218685042331067E-4	DESIGN
the cache provider is needed when we either have second-level cache enabled or query cache enabled. note that usesecondlevelcache is enabled by default	WITHOUT_CLASSIFICATION	0.9999962766649559	WITHOUT_CLASSIFICATION	3.7233350439767155E-6	DESIGN
sql exception converter	WITHOUT_CLASSIFICATION	0.9990327697237815	WITHOUT_CLASSIFICATION	9.672302762185464E-4	DESIGN
statistics and logging	WITHOUT_CLASSIFICATION	0.9996112873758772	WITHOUT_CLASSIFICATION	3.887126241228366E-4	DESIGN
settings.setshowsqlenabled(showsql)	WITHOUT_CLASSIFICATION	0.9995293047305601	WITHOUT_CLASSIFICATION	4.7069526943993654E-4	DESIGN
settings.setformatsqlenabled(formatsql)	WITHOUT_CLASSIFICATION	0.9995293047305601	WITHOUT_CLASSIFICATION	4.7069526943993654E-4	DESIGN
schema export	WITHOUT_CLASSIFICATION	0.9995452482731622	WITHOUT_CLASSIFICATION	4.547517268378244E-4	DESIGN
string provider = properties.getproperty( environment.bytecode_provider ) log.info( "bytecode provider name " + provider ) bytecodeprovider bytecodeprovider = buildbytecodeprovider( provider ) settings.setbytecodeprovider( bytecodeprovider )	WITHOUT_CLASSIFICATION	0.9999815318550712	WITHOUT_CLASSIFICATION	1.8468144928776913E-5	DESIGN
legacy behavior apply the bridge	WITHOUT_CLASSIFICATION	0.9956173502824658	WITHOUT_CLASSIFICATION	0.004382649717534216	DESIGN
maybe a concrete sqlpropertyresult type but map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.7432587594919604	WITHOUT_CLASSIFICATION	0.2567412405080395	DESIGN
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9975452875889168	WITHOUT_CLASSIFICATION	0.002454712411083285	DESIGN
private componenttuplizerfactory componenttuplizerfactory todo hhh-3517 and hhh-1907 private bytecodeprovider bytecodeprovider	WITHOUT_CLASSIFICATION	0.6612489754731824	DESIGN	0.33875102452681766	WITHOUT_CLASSIFICATION
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994285660556357	WITHOUT_CLASSIFICATION	5.714339443644019E-4	DESIGN
public componenttuplizerfactory getcomponenttuplizerfactory() { return componenttuplizerfactory }	WITHOUT_CLASSIFICATION	0.9973328746811128	WITHOUT_CLASSIFICATION	0.0026671253188871764	DESIGN
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9895532271694476	WITHOUT_CLASSIFICATION	0.01044677283055244	DESIGN
void setshowsqlenabled(boolean b) { showsql = b } void setformatsqlenabled(boolean b) { formatsql = b }	WITHOUT_CLASSIFICATION	0.9999720897938775	WITHOUT_CLASSIFICATION	2.7910206122480607E-5	DESIGN
public bytecodeprovider getbytecodeprovider() { return bytecodeprovider } void setbytecodeprovider(bytecodeprovider bytecodeprovider) { this.bytecodeprovider = bytecodeprovider }	WITHOUT_CLASSIFICATION	0.999564227017336	WITHOUT_CLASSIFICATION	4.357729826639485E-4	DESIGN
using local since the inheritedmetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9084920449154733	WITHOUT_CLASSIFICATION	0.09150795508452668	DESIGN
private componenttuplizerfactory componenttuplizerfactory todo hhh-3517 and hhh-1907	WITHOUT_CLASSIFICATION	0.6612489754731824	DESIGN	0.33875102452681766	WITHOUT_CLASSIFICATION
protected list extendsqueue	WITHOUT_CLASSIFICATION	0.9990908707981963	WITHOUT_CLASSIFICATION	9.09129201803681E-4	DESIGN
extendsqueue = new arraylist()	WITHOUT_CLASSIFICATION	0.9997643031932045	WITHOUT_CLASSIFICATION	2.356968067955065E-4	DESIGN
componenttuplizerfactory = new componenttuplizerfactory()	WITHOUT_CLASSIFICATION	0.9998736162497484	WITHOUT_CLASSIFICATION	1.2638375025161494E-4	DESIGN
if doc is null then for whatever reason the cached file cannot be used	WITHOUT_CLASSIFICATION	0.9988218955696374	WITHOUT_CLASSIFICATION	0.0011781044303625365	DESIGN
drop them in reverse order in case db needs it done that way	WITHOUT_CLASSIFICATION	0.6533941585576143	WITHOUT_CLASSIFICATION	0.34660584144238565	DESIGN
public componenttuplizerfactory getcomponenttuplizerfactory() { return componenttuplizerfactory }	WITHOUT_CLASSIFICATION	0.9973328746811128	WITHOUT_CLASSIFICATION	0.0026671253188871764	DESIGN
this method may be called many times!!	WITHOUT_CLASSIFICATION	0.9894195670765703	WITHOUT_CLASSIFICATION	0.010580432923429747	DESIGN
iterator iterator = extendsqueue.iterator()	WITHOUT_CLASSIFICATION	0.9999215203897366	WITHOUT_CLASSIFICATION	7.847961026338786E-5	DESIGN
iterator iter = extendsqueue.iterator()	WITHOUT_CLASSIFICATION	0.9998790109275759	WITHOUT_CLASSIFICATION	1.2098907242400199E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.9996602613955973	WITHOUT_CLASSIFICATION	3.397386044027497E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.9996602613955973	WITHOUT_CLASSIFICATION	3.397386044027497E-4	DESIGN
settings.setcomponenttuplizerfactory( this.getcomponenttuplizerfactory() )	WITHOUT_CLASSIFICATION	0.9991708054840631	WITHOUT_CLASSIFICATION	8.291945159369908E-4	DESIGN
private final list extendsqueue	WITHOUT_CLASSIFICATION	0.9997449241415634	WITHOUT_CLASSIFICATION	2.550758584366322E-4	DESIGN
<string string>	WITHOUT_CLASSIFICATION	0.9996119754867976	WITHOUT_CLASSIFICATION	3.880245132024332E-4	DESIGN
<string string>	WITHOUT_CLASSIFICATION	0.9996119754867976	WITHOUT_CLASSIFICATION	3.880245132024332E-4	DESIGN
+ "_" + referencedcolumnname not used for backward compatibility	WITHOUT_CLASSIFICATION	0.6484688080277501	DESIGN	0.35153119197224997	WITHOUT_CLASSIFICATION
set use_reflection_optimizer to false to fix hhh-227	WITHOUT_CLASSIFICATION	0.9719045927663911	WITHOUT_CLASSIFICATION	0.028095407233608937	DESIGN
orphan delete not supported for entitymode.dom4j	WITHOUT_CLASSIFICATION	0.9989325499017473	WITHOUT_CLASSIFICATION	0.0010674500982527366	DESIGN
element = xmlhelper.generatedom4jelement( persister.getnodename() )	WITHOUT_CLASSIFICATION	0.99978496374947	WITHOUT_CLASSIFICATION	2.1503625052995593E-4	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9994214643638152	WITHOUT_CLASSIFICATION	5.785356361847798E-4	DESIGN
orphan delete not supported for entitymode.dom4j	WITHOUT_CLASSIFICATION	0.9989325499017473	WITHOUT_CLASSIFICATION	0.0010674500982527366	DESIGN
element = xmlhelper.generatedom4jelement( persister.getnodename() )	WITHOUT_CLASSIFICATION	0.99978496374947	WITHOUT_CLASSIFICATION	2.1503625052995593E-4	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.9987509746692348	WITHOUT_CLASSIFICATION	0.0012490253307652249	DESIGN
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9990172037884513	WITHOUT_CLASSIFICATION	9.82796211548813E-4	DESIGN
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9990174770721388	WITHOUT_CLASSIFICATION	9.825229278611206E-4	DESIGN
the element has changed	WITHOUT_CLASSIFICATION	0.9998450043487088	WITHOUT_CLASSIFICATION	1.54995651291107E-4	DESIGN
careful these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9932001633720748	WITHOUT_CLASSIFICATION	0.006799836627925088	DESIGN
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9591210875283345	WITHOUT_CLASSIFICATION	0.040878912471665606	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9989136036052723	WITHOUT_CLASSIFICATION	0.0010863963947276903	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9989136036052723	WITHOUT_CLASSIFICATION	0.0010863963947276903	DESIGN
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9541035438492312	WITHOUT_CLASSIFICATION	0.04589645615076877	DESIGN
short-circuit(s) no new elements the old list contains only orphans no old elements so no orphans neither	WITHOUT_CLASSIFICATION	0.9999996588885356	WITHOUT_CLASSIFICATION	3.411114644421571E-7	DESIGN
create the collection holding the orphans	WITHOUT_CLASSIFICATION	0.999023952145354	WITHOUT_CLASSIFICATION	9.760478546460165E-4	DESIGN
collect entityidentifier(s) of the current elements - add them into a hashset for fast access	WITHOUT_CLASSIFICATION	0.9985006371980545	WITHOUT_CLASSIFICATION	0.0014993628019454681	DESIGN
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999607874231758	WITHOUT_CLASSIFICATION	3.921257682413241E-5	DESIGN
(array==null) ? templist.size()	WITHOUT_CLASSIFICATION	0.9984698046786641	WITHOUT_CLASSIFICATION	0.0015301953213358972	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9994214643638152	WITHOUT_CLASSIFICATION	5.785356361847798E-4	DESIGN
(array==null) ? templist.get(i)	WITHOUT_CLASSIFICATION	0.9984698046786641	WITHOUT_CLASSIFICATION	0.0015301953213358972	DESIGN
write() -- doesn't	WITHOUT_CLASSIFICATION	0.9995670471960689	WITHOUT_CLASSIFICATION	4.3295280393107423E-4	DESIGN
write() -- doesn't	WITHOUT_CLASSIFICATION	0.9995670471960689	WITHOUT_CLASSIFICATION	4.3295280393107423E-4	DESIGN
amazingly these two will work because abstractcollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999712580318166	WITHOUT_CLASSIFICATION	2.874196818333346E-5	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.9987509746692348	WITHOUT_CLASSIFICATION	0.0012490253307652249	DESIGN
finally what it's all about	WITHOUT_CLASSIFICATION	0.9952401405090577	WITHOUT_CLASSIFICATION	0.0047598594909421775	DESIGN
note that if we load this collection from a cartesian product the multiplicity would be broken so use an idbag instead	WITHOUT_CLASSIFICATION	0.960771646683192	DESIGN	0.03922835331680798	WITHOUT_CLASSIFICATION
anyway here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.8967731764681555	DESIGN	0.1032268235318446	WITHOUT_CLASSIFICATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999542570163492	WITHOUT_CLASSIFICATION	4.574298365065919E-5	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.8104623754831514	WITHOUT_CLASSIFICATION	0.18953762451684858	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.9987509746692348	WITHOUT_CLASSIFICATION	0.0012490253307652249	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999542570163492	WITHOUT_CLASSIFICATION	4.574298365065919E-5	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.8104623754831514	WITHOUT_CLASSIFICATION	0.18953762451684858	DESIGN
public boolean equals(object other) {read()return bag.equals(other)}public int hashcode(object other) {read()return bag.hashcode()}	WITHOUT_CLASSIFICATION	0.9990366897635002	WITHOUT_CLASSIFICATION	9.633102364998582E-4	DESIGN
list operations	WITHOUT_CLASSIFICATION	0.9999440708164419	WITHOUT_CLASSIFICATION	5.592918355813555E-5	DESIGN
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999775560406207	WITHOUT_CLASSIFICATION	2.2443959379319438E-5	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.9987509746692348	WITHOUT_CLASSIFICATION	0.0012490253307652249	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.9987509746692348	WITHOUT_CLASSIFICATION	0.0012490253307652249	DESIGN
from map	WITHOUT_CLASSIFICATION	0.99944345427454	WITHOUT_CLASSIFICATION	5.565457254600525E-4	DESIGN
from sortedmap	WITHOUT_CLASSIFICATION	0.9993388641062745	WITHOUT_CLASSIFICATION	6.611358937256573E-4	DESIGN
inject the data	WITHOUT_CLASSIFICATION	0.9998617928402124	WITHOUT_CLASSIFICATION	1.382071597876347E-4	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998156266187591	WITHOUT_CLASSIFICATION	1.8437338124078232E-4	DESIGN
default pool size 20	WITHOUT_CLASSIFICATION	0.999959889943352	WITHOUT_CLASSIFICATION	4.011005664800622E-5	DESIGN
trying via forname() first to be as close to drivermanager's semantics	WITHOUT_CLASSIFICATION	0.9999945609303234	WITHOUT_CLASSIFICATION	5.439069676639908E-6	DESIGN
if debug level is enabled then log the password otherwise mask it	WITHOUT_CLASSIFICATION	0.9999831418162385	WITHOUT_CLASSIFICATION	1.685818376147766E-5	DESIGN
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9989143579773361	WITHOUT_CLASSIFICATION	0.0010856420226639013	DESIGN
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9998783292633695	WITHOUT_CLASSIFICATION	1.2167073663049282E-4	DESIGN
then bind it	WITHOUT_CLASSIFICATION	0.999316578512755	WITHOUT_CLASSIFICATION	6.83421487244916E-4	DESIGN
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9885642193462154	WITHOUT_CLASSIFICATION	0.011435780653784599	DESIGN
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9974434988593888	WITHOUT_CLASSIFICATION	0.002556501140611266	DESIGN
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999650238012485	WITHOUT_CLASSIFICATION	3.4976198751486005E-5	DESIGN
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9960765905772245	WITHOUT_CLASSIFICATION	0.003923409422775429	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996371425125962	WITHOUT_CLASSIFICATION	3.6285748740386283E-4	DESIGN
we could register the session against the transaction even though it is not started but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999998682470432	WITHOUT_CLASSIFICATION	1.3175295685849222E-7	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998156266187591	WITHOUT_CLASSIFICATION	1.8437338124078232E-4	DESIGN
private string propertyname	WITHOUT_CLASSIFICATION	0.9974437650927108	WITHOUT_CLASSIFICATION	0.0025562349072892183	DESIGN
public propertyprojection project() {return projections.property(getpropertyname())}	WITHOUT_CLASSIFICATION	0.9982556828655696	WITHOUT_CLASSIFICATION	0.0017443171344303295	DESIGN
string[] fk = stringhelper.qualify( "collection_" cp.getkeycolumnnames() )	WITHOUT_CLASSIFICATION	0.997976765026926	WITHOUT_CLASSIFICATION	0.0020232349730741027	DESIGN
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999591849771047	WITHOUT_CLASSIFICATION	4.081502289530835E-5	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.999608784698551	WITHOUT_CLASSIFICATION	3.912153014490029E-4	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.999608784698551	WITHOUT_CLASSIFICATION	3.912153014490029E-4	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998156266187591	WITHOUT_CLASSIFICATION	1.8437338124078232E-4	DESIGN
the following two lines were added to ensure that this.params is not null which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999499699740866	WITHOUT_CLASSIFICATION	5.003002591346857E-5	DESIGN
with two-deep subqueries the same alias would get generated for both using the old method (criteriaquery.generatesqlalias()) so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9959722351815092	WITHOUT_CLASSIFICATION	0.004027764818490761	DESIGN
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9855189748039912	WITHOUT_CLASSIFICATION	0.014481025196008796	DESIGN
pull off the last " "	WITHOUT_CLASSIFICATION	0.9998278138618041	WITHOUT_CLASSIFICATION	1.721861381959209E-4	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.9995512538509138	WITHOUT_CLASSIFICATION	4.4874614908614325E-4	DESIGN
we have the form trim(trimsource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9998862774428887	WITHOUT_CLASSIFICATION	1.1372255711122017E-4	DESIGN
we have the form trim(from trimsource). this is functionally equivalent to trim(trimsource)	WITHOUT_CLASSIFICATION	0.9969070876873629	WITHOUT_CLASSIFICATION	0.0030929123126371915	DESIGN
not_supported_should_use_jdbc3_preparedstatement.getgeneratedkeys_method	WITHOUT_CLASSIFICATION	0.9995293047305601	WITHOUT_CLASSIFICATION	4.7069526943993654E-4	DESIGN
potentialtrimcharacterargindex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9989694928890829	WITHOUT_CLASSIFICATION	0.0010305071109171285	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992948788170259	WITHOUT_CLASSIFICATION	7.051211829741707E-4	DESIGN
oracle did add support for ansi case statements in 9i	WITHOUT_CLASSIFICATION	0.999924213798313	WITHOUT_CLASSIFICATION	7.578620168698037E-5	DESIGN
the standard sql function name is current_timestamp	WITHOUT_CLASSIFICATION	0.9999909401106594	WITHOUT_CLASSIFICATION	9.059889340645573E-6	DESIGN
informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9904691442673854	WITHOUT_CLASSIFICATION	0.009530855732614604	DESIGN
or byte or text? or money	WITHOUT_CLASSIFICATION	0.9996885617739897	WITHOUT_CLASSIFICATION	3.1143822601030713E-4	DESIGN
strip table-owner because informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999605006816839	WITHOUT_CLASSIFICATION	3.949931831610156E-5	DESIGN
build the map of standard ansi sql aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999363027420031	WITHOUT_CLASSIFICATION	6.369725799695125E-5	DESIGN
pre h3.2 behavior super.getreturntype(ct m)	WITHOUT_CLASSIFICATION	0.9991847864153073	WITHOUT_CLASSIFICATION	8.15213584692758E-4	DESIGN
finally use the sqltype if == on hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9998386431649391	WITHOUT_CLASSIFICATION	1.613568350608067E-4	DESIGN
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999389102367052	WITHOUT_CLASSIFICATION	6.10897632947951E-5	DESIGN
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9798027001605485	WITHOUT_CLASSIFICATION	0.020197299839451583	DESIGN
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9970221164716796	WITHOUT_CLASSIFICATION	0.002977883528320375	DESIGN
map second/minute/hour/day/month/year to ansi extract() override on subclasses	WITHOUT_CLASSIFICATION	0.9998151215529641	WITHOUT_CLASSIFICATION	1.848784470358055E-4	DESIGN
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9972952370364991	WITHOUT_CLASSIFICATION	0.0027047629635009313	DESIGN
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991663275168139	WITHOUT_CLASSIFICATION	8.336724831861958E-4	DESIGN
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9967782052952873	WITHOUT_CLASSIFICATION	0.003221794704712665	DESIGN
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999378692969942	WITHOUT_CLASSIFICATION	6.213070300579753E-4	DESIGN
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998877165770681	WITHOUT_CLASSIFICATION	1.1228342293195532E-4	DESIGN
identity support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99839545013033	WITHOUT_CLASSIFICATION	0.0016045498696699392	DESIGN
sequence support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995811126334158	WITHOUT_CLASSIFICATION	4.188873665842775E-4	DESIGN
guid support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982340370887883	WITHOUT_CLASSIFICATION	0.0017659629112116897	DESIGN
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982340370887883	WITHOUT_CLASSIFICATION	0.0017659629112116897	DESIGN
by default we report no support	WITHOUT_CLASSIFICATION	0.9967527549072145	WITHOUT_CLASSIFICATION	0.0032472450927855502	DESIGN
by default we report no support for nowait lock semantics	WITHOUT_CLASSIFICATION	0.9635184983297577	WITHOUT_CLASSIFICATION	0.036481501670242285	DESIGN
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992276911262464	WITHOUT_CLASSIFICATION	7.723088737535169E-4	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9716235238933478	WITHOUT_CLASSIFICATION	0.02837647610665214	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9926912424189989	WITHOUT_CLASSIFICATION	0.0073087575810011785	DESIGN
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995793620707338	WITHOUT_CLASSIFICATION	4.2063792926617797E-4	DESIGN
sqlexception support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985480529643461	WITHOUT_CLASSIFICATION	0.001451947035653851	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983050291834239	WITHOUT_CLASSIFICATION	0.0016949708165760228	DESIGN
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998514171240562	WITHOUT_CLASSIFICATION	0.0014858287594379748	DESIGN
ddl support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982340370887883	WITHOUT_CLASSIFICATION	0.0017659629112116897	DESIGN
grrr for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9998895843877469	WITHOUT_CLASSIFICATION	1.1041561225314088E-4	DESIGN
informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990008541089529	WITHOUT_CLASSIFICATION	9.991458910471515E-4	DESIGN
return false here as most databases do not properly support this construct	WITHOUT_CLASSIFICATION	0.9894381334243546	WITHOUT_CLASSIFICATION	0.010561866575645418	DESIGN
mckoi has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9997705841025477	WITHOUT_CLASSIFICATION	2.2941589745220992E-4	DESIGN
oracle8 and previous define only a "date" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9651728531023136	WITHOUT_CLASSIFICATION	0.034827146897686435	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9987711350682172	WITHOUT_CLASSIFICATION	0.0012288649317827784	DESIGN
" cascade"	WITHOUT_CLASSIFICATION	0.9997049257048366	WITHOUT_CLASSIFICATION	2.9507429516343963E-4	DESIGN
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9996294342177495	WITHOUT_CLASSIFICATION	3.705657822504858E-4	DESIGN
public boolean droptemporarytableafteruse() {we have to because postgres sets current txto rollback only after a failed create tablereturn true}	WITHOUT_CLASSIFICATION	0.9999847783855162	WITHOUT_CLASSIFICATION	1.5221614483741692E-5	DESIGN
check violation	WITHOUT_CLASSIFICATION	0.9986758932892248	WITHOUT_CLASSIFICATION	0.001324106710775252	DESIGN
unique violation	WITHOUT_CLASSIFICATION	0.9986824970734188	WITHOUT_CLASSIFICATION	0.001317502926581215	DESIGN
foreign key violation	WITHOUT_CLASSIFICATION	0.9998297227242526	WITHOUT_CLASSIFICATION	1.7027727574736153E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992948788170259	WITHOUT_CLASSIFICATION	7.051211829741707E-4	DESIGN
not null violation	WITHOUT_CLASSIFICATION	0.997972680823754	WITHOUT_CLASSIFICATION	0.0020273191762459663	DESIGN
all other	WITHOUT_CLASSIFICATION	0.9993681413163704	WITHOUT_CLASSIFICATION	6.318586836295649E-4	DESIGN
register the type of the out param - postgresql uses types.other	WITHOUT_CLASSIFICATION	0.999003340507708	WITHOUT_CLASSIFICATION	9.966594922919624E-4	DESIGN
seems to not really public boolean supportsrowvalueconstructorsyntax() { return true }	WITHOUT_CLASSIFICATION	0.9316623023061313	WITHOUT_CLASSIFICATION	0.06833769769386872	DESIGN
seems to have spotty lob suppport	WITHOUT_CLASSIFICATION	0.9993512842081387	WITHOUT_CLASSIFICATION	6.487157918613717E-4	DESIGN
hhh-2300	WITHOUT_CLASSIFICATION	0.9995412406281159	WITHOUT_CLASSIFICATION	4.587593718841749E-4	DESIGN
ignore (probably h2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9992996618851476	WITHOUT_CLASSIFICATION	7.003381148524704E-4	DESIGN
numeric functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994400940811325	WITHOUT_CLASSIFICATION	5.599059188674434E-4	DESIGN
string functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994761151174203	WITHOUT_CLASSIFICATION	5.238848825797035E-4	DESIGN
time and date functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998783370971898	WITHOUT_CLASSIFICATION	1.2166290281026057E-4	DESIGN
system functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984633632185085	WITHOUT_CLASSIFICATION	0.0015366367814916286	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9981953701722355	WITHOUT_CLASSIFICATION	0.0018046298277644942	DESIGN
23000 check constraint violation {0} 23001 unique index or primary key violation {0}	WITHOUT_CLASSIFICATION	0.9999340599408799	WITHOUT_CLASSIFICATION	6.594005912010933E-5	DESIGN
display the dialect version.	WITHOUT_CLASSIFICATION	0.9979069237382124	WITHOUT_CLASSIFICATION	0.002093076261787607	DESIGN
the rdms concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999987778538527	WITHOUT_CLASSIFICATION	1.2221461473435071E-6	DESIGN
dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998383319205377	WITHOUT_CLASSIFICATION	0.0016166807946229797	DESIGN
original dialect.java returns " for update"	WITHOUT_CLASSIFICATION	0.9997914488641022	WITHOUT_CLASSIFICATION	2.0855113589784792E-4	DESIGN
verify the state of this new method in hibernate 3.0 dialect.java	WITHOUT_CLASSIFICATION	0.9992310224679114	WITHOUT_CLASSIFICATION	7.689775320886391E-4	DESIGN
origial dialect.java returns true	WITHOUT_CLASSIFICATION	0.9994005475383939	WITHOUT_CLASSIFICATION	5.994524616060547E-4	DESIGN
the keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.8201101633119258	WITHOUT_CLASSIFICATION	0.17988983668807418	DESIGN
sequence methods - start. the rdms dialect needs these	WITHOUT_CLASSIFICATION	0.980685048556955	WITHOUT_CLASSIFICATION	0.01931495144304501	DESIGN
methods to make it possible to use the native id generator	WITHOUT_CLASSIFICATION	0.9984493380185098	WITHOUT_CLASSIFICATION	0.0015506619814902123	DESIGN
the where clause was added to eliminate this statement from brute force searches.	WITHOUT_CLASSIFICATION	0.9990162618130276	WITHOUT_CLASSIFICATION	9.837381869723773E-4	DESIGN
sequence methods - end	WITHOUT_CLASSIFICATION	0.998295848646108	WITHOUT_CLASSIFICATION	0.001704151353891927	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992948788170259	WITHOUT_CLASSIFICATION	7.051211829741707E-4	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9987711350682172	WITHOUT_CLASSIFICATION	0.0012288649317827784	DESIGN
we must return a valid rdms/rsa command from this method to prevent rdms/rsa from issuing error 400	WITHOUT_CLASSIFICATION	0.8697532385437986	WITHOUT_CLASSIFICATION	0.1302467614562015	DESIGN
used with drop table to delete all records in the table.	WITHOUT_CLASSIFICATION	0.8345863770074906	WITHOUT_CLASSIFICATION	0.16541362299250945	DESIGN
rdms supports the union all clause.	WITHOUT_CLASSIFICATION	0.9997525738354593	WITHOUT_CLASSIFICATION	2.474261645406247E-4	DESIGN
rdms has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9997937309727989	WITHOUT_CLASSIFICATION	2.0626902720101973E-4	DESIGN
multi-param dialect functions	WITHOUT_CLASSIFICATION	0.9938684108712468	WITHOUT_CLASSIFICATION	0.0061315891287532336	DESIGN
function templates	WITHOUT_CLASSIFICATION	0.9999498704340342	WITHOUT_CLASSIFICATION	5.0129565965872936E-5	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9981953701722355	WITHOUT_CLASSIFICATION	0.0018046298277644942	DESIGN
this assumes schema support which is present in 1.8.0 and later	WITHOUT_CLASSIFICATION	0.9831510889429887	WITHOUT_CLASSIFICATION	0.01684891105701133	DESIGN
hsqldb only supports read_uncommitted transaction isolation	WITHOUT_CLASSIFICATION	0.9999052516476234	WITHOUT_CLASSIFICATION	9.474835237651015E-5	DESIGN
multi-param string dialect functions	WITHOUT_CLASSIFICATION	0.9980831592424473	WITHOUT_CLASSIFICATION	0.0019168407575527128	DESIGN
multi-param numeric dialect functions	WITHOUT_CLASSIFICATION	0.9979515582803317	WITHOUT_CLASSIFICATION	0.0020484417196683655	DESIGN
multi-param date dialect functions	WITHOUT_CLASSIFICATION	0.9982318574072734	WITHOUT_CLASSIFICATION	0.0017681425927266552	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.999875926860237	WITHOUT_CLASSIFICATION	1.2407313976296267E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992948788170259	WITHOUT_CLASSIFICATION	7.051211829741707E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992948788170259	WITHOUT_CLASSIFICATION	7.051211829741707E-4	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9939041161309111	WITHOUT_CLASSIFICATION	0.0060958838690889005	DESIGN
register the type of the out param - an oracle specific type	WITHOUT_CLASSIFICATION	0.9997631703987435	WITHOUT_CLASSIFICATION	2.3682960125648205E-4	DESIGN
timesten has no blob/clob support but these types may be suitable for some applications. the length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9985437184465823	WITHOUT_CLASSIFICATION	0.0014562815534176288	DESIGN
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9930469589160572	WITHOUT_CLASSIFICATION	0.006953041083942788	DESIGN
public boolean supportsforupdatenowait() {return false}	WITHOUT_CLASSIFICATION	0.9985927866848542	WITHOUT_CLASSIFICATION	0.001407213315145795	DESIGN
timesten has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9997984330918096	WITHOUT_CLASSIFICATION	2.015669081904004E-4	DESIGN
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9992976414534772	WITHOUT_CLASSIFICATION	7.023585465226936E-4	DESIGN
add new ordered map	WITHOUT_CLASSIFICATION	0.9985104363200954	WITHOUT_CLASSIFICATION	0.0014895636799046332	DESIGN
registercolumntype( types.varchar 16777215 "mediumtext" )	WITHOUT_CLASSIFICATION	0.9991854697140069	WITHOUT_CLASSIFICATION	8.145302859931231E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992948788170259	WITHOUT_CLASSIFICATION	7.051211829741707E-4	DESIGN
this assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999974946185299	WITHOUT_CLASSIFICATION	2.5053814699686955E-6	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9995254023235776	WITHOUT_CLASSIFICATION	4.7459767642245705E-4	DESIGN
return "select current_timestamp from rdb$database"	WITHOUT_CLASSIFICATION	0.9986946833014614	WITHOUT_CLASSIFICATION	0.0013053166985386676	DESIGN
registercolumntype data types	WITHOUT_CLASSIFICATION	0.9992685688504136	WITHOUT_CLASSIFICATION	7.314311495864144E-4	DESIGN
hibernate seems to ignore this type	WITHOUT_CLASSIFICATION	0.9923615351445956	WITHOUT_CLASSIFICATION	0.007638464855404369	DESIGN
ibid for current_time and current_date	WITHOUT_CLASSIFICATION	0.9995413671070451	WITHOUT_CLASSIFICATION	4.586328929549739E-4	DESIGN
tell hibernate to use getbytes instead of getbinarystream	WITHOUT_CLASSIFICATION	0.9900403484949072	WITHOUT_CLASSIFICATION	0.009959651505092764	DESIGN
no batch statements	WITHOUT_CLASSIFICATION	0.9998195775297664	WITHOUT_CLASSIFICATION	1.8042247023374036E-4	DESIGN
we might want a special case for 192. this is very common for money types and here it is converted to 181	WITHOUT_CLASSIFICATION	0.6312650294908431	DESIGN	0.368734970509157	WITHOUT_CLASSIFICATION
no pointbase bit	WITHOUT_CLASSIFICATION	0.9954717792017012	WITHOUT_CLASSIFICATION	0.004528220798298912	DESIGN
no pointbase tinyint	WITHOUT_CLASSIFICATION	0.9991958235267	WITHOUT_CLASSIFICATION	8.041764733000681E-4	DESIGN
pointbase has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.999370402973539	WITHOUT_CLASSIFICATION	6.29597026461079E-4	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9987711350682172	WITHOUT_CLASSIFICATION	0.0012288649317827784	DESIGN
the current_timestamp is more accurate but only known to be supported in sql server 7.0 and later (i.e. sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9720876261219097	WITHOUT_CLASSIFICATION	0.02791237387809021	DESIGN
sql server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999832287842868	WITHOUT_CLASSIFICATION	1.677121571321018E-5	DESIGN
here assume sqlserver2005 using snapshot isolation which does not have this problem	WITHOUT_CLASSIFICATION	0.9942463255604055	WITHOUT_CLASSIFICATION	0.005753674439594534	DESIGN
registercolumntype( types.blob 16777215 "mediumblob" ) registercolumntype( types.blob 65535 "blob" )	WITHOUT_CLASSIFICATION	0.9976478398222097	WITHOUT_CLASSIFICATION	0.002352160177790193	DESIGN
registercolumntype( types.clob 16777215 "mediumtext" ) registercolumntype( types.clob 65535 "text" )	WITHOUT_CLASSIFICATION	0.9995039986230267	WITHOUT_CLASSIFICATION	4.960013769731829E-4	DESIGN
registercolumntype( types.varchar 16777215 "mediumtext" ) registercolumntype( types.varchar 65535 "text" )	WITHOUT_CLASSIFICATION	0.9995039986230267	WITHOUT_CLASSIFICATION	4.960013769731829E-4	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9987711350682172	WITHOUT_CLASSIFICATION	0.0012288649317827784	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9996616171417686	WITHOUT_CLASSIFICATION	3.3838285823129834E-4	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9995254023235776	WITHOUT_CLASSIFICATION	4.7459767642245705E-4	DESIGN
sybase bit type does not support null values	WITHOUT_CLASSIFICATION	0.8817344703722595	WITHOUT_CLASSIFICATION	0.11826552962774055	DESIGN
this assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999974946185299	WITHOUT_CLASSIFICATION	2.5053814699686955E-6	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992948788170259	WITHOUT_CLASSIFICATION	7.051211829741707E-4	DESIGN
you may still have other resultsets or update counts left to process here but you can't do it now or the resultset you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999977065579	WITHOUT_CLASSIFICATION	2.2934421663858538E-9	DESIGN
not null (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9962781279087279	WITHOUT_CLASSIFICATION	0.003721872091272138	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992948788170259	WITHOUT_CLASSIFICATION	7.051211829741707E-4	DESIGN
oracle driver reports to support getgeneratedkeys() but they only support the version taking an array of the names of the columns to be returned (via its returning clause). no other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9998855087656182	WITHOUT_CLASSIFICATION	1.1449123438181009E-4	DESIGN
multi-param string dialect functions	WITHOUT_CLASSIFICATION	0.9980831592424473	WITHOUT_CLASSIFICATION	0.0019168407575527128	DESIGN
multi-param numeric dialect functions	WITHOUT_CLASSIFICATION	0.9979515582803317	WITHOUT_CLASSIFICATION	0.0020484417196683655	DESIGN
multi-param date dialect functions	WITHOUT_CLASSIFICATION	0.9982318574072734	WITHOUT_CLASSIFICATION	0.0017681425927266552	DESIGN
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999584977480179	WITHOUT_CLASSIFICATION	4.1502251982028434E-5	DESIGN
add the main query	WITHOUT_CLASSIFICATION	0.9998661534304698	WITHOUT_CLASSIFICATION	1.338465695301395E-4	DESIGN
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999603186955114	WITHOUT_CLASSIFICATION	3.9681304488690875E-5	DESIGN
this assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999974946185299	WITHOUT_CLASSIFICATION	2.5053814699686955E-6	DESIGN
you may still have other resultsets or update counts left to process here but you can't do it now or the resultset you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999977065579	WITHOUT_CLASSIFICATION	2.2934421663858538E-9	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992948788170259	WITHOUT_CLASSIFICATION	7.051211829741707E-4	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9987711350682172	WITHOUT_CLASSIFICATION	0.0012288649317827784	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.999875926860237	WITHOUT_CLASSIFICATION	1.2407313976296267E-4	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9939041161309111	WITHOUT_CLASSIFICATION	0.0060958838690889005	DESIGN
register the type of the out param - an oracle specific type	WITHOUT_CLASSIFICATION	0.9997631703987435	WITHOUT_CLASSIFICATION	2.3682960125648205E-4	DESIGN
features which change between 8i 9i and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994523589251976	WITHOUT_CLASSIFICATION	5.476410748025366E-4	DESIGN
features which remain constant across 8i 9i and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999782960931808	WITHOUT_CLASSIFICATION	2.170390681930081E-5	DESIGN
binary %stream character %stream	WITHOUT_CLASSIFICATION	0.9999221305078736	WITHOUT_CLASSIFICATION	7.786949212636597E-5	DESIGN
getdefaultproperties().setproperty(environment.statement_batch_size no_batch)	WITHOUT_CLASSIFICATION	0.9995293047305601	WITHOUT_CLASSIFICATION	4.7069526943993654E-4	DESIGN
hibernate impelemnts cast in dialect.java	WITHOUT_CLASSIFICATION	0.9969780428729399	WITHOUT_CLASSIFICATION	0.0030219571270600045	DESIGN
aggregate functions shouldn't be registered right? registerfunction( "list" new standardsqlfunction("list"hibernate.string) ) stopped on $list	WITHOUT_CLASSIFICATION	0.9155778628037203	DESIGN	0.0844221371962797	WITHOUT_CLASSIFICATION
ddl support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982340370887883	WITHOUT_CLASSIFICATION	0.0017659629112116897	DESIGN
below is for cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9989924019107373	WITHOUT_CLASSIFICATION	0.0010075980892626985	DESIGN
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9934799935465344	WITHOUT_CLASSIFICATION	0.006520006453465564	DESIGN
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9989363522408587	WITHOUT_CLASSIFICATION	0.0010636477591411861	DESIGN
the syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9939883242646702	WITHOUT_CLASSIFICATION	0.00601167573532976	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9996084438916226	WITHOUT_CLASSIFICATION	3.915561083774067E-4	DESIGN
identity support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99839545013033	WITHOUT_CLASSIFICATION	0.0016045498696699392	DESIGN
sequence support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995811126334158	WITHOUT_CLASSIFICATION	4.188873665842775E-4	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9716235238933478	WITHOUT_CLASSIFICATION	0.02837647610665214	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9996084438916226	WITHOUT_CLASSIFICATION	3.915561083774067E-4	DESIGN
the syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9839434259922066	WITHOUT_CLASSIFICATION	0.016056574007793343	DESIGN
completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9979635023642349	WITHOUT_CLASSIFICATION	0.002036497635765098	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998160318859706	WITHOUT_CLASSIFICATION	0.0018396811402940025	DESIGN
limit support (ala top) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991799743378542	WITHOUT_CLASSIFICATION	8.200256621457771E-4	DESIGN
intersystems cache' does not current support "select for update" syntax set your transaction mode to read_committed before using	WITHOUT_CLASSIFICATION	0.9983632554193446	WITHOUT_CLASSIFICATION	0.0016367445806554808	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992948788170259	WITHOUT_CLASSIFICATION	7.051211829741707E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992948788170259	WITHOUT_CLASSIFICATION	7.051211829741707E-4	DESIGN
<string>	WITHOUT_CLASSIFICATION	0.9995412406281159	WITHOUT_CLASSIFICATION	4.587593718841749E-4	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9926912424189989	WITHOUT_CLASSIFICATION	0.0073087575810011785	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983050291834239	WITHOUT_CLASSIFICATION	0.0016949708165760228	DESIGN
the keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.8201101633119258	WITHOUT_CLASSIFICATION	0.17988983668807418	DESIGN
does the limit clause come at the start of the select statement rather than at the end?	WITHOUT_CLASSIFICATION	0.9983383701258323	WITHOUT_CLASSIFICATION	0.0016616298741677499	DESIGN
does the limit clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9992827775282357	WITHOUT_CLASSIFICATION	7.172224717642605E-4	DESIGN
the name of the sql function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9997178225551272	WITHOUT_CLASSIFICATION	2.821774448728983E-4	DESIGN
create an outerjoingenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9967725835061744	WITHOUT_CLASSIFICATION	0.003227416493825606	DESIGN
the keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9935175336586427	WITHOUT_CLASSIFICATION	0.0064824663413572585	DESIGN
registerfunction( "trim" new standardsqlfunction( "trim" hibernate.string ) )	WITHOUT_CLASSIFICATION	0.9991799013192275	WITHOUT_CLASSIFICATION	8.200986807724283E-4	DESIGN
skip the from keyword in params	WITHOUT_CLASSIFICATION	0.9998006477057141	WITHOUT_CLASSIFICATION	1.9935229428593438E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9982030614286861	WITHOUT_CLASSIFICATION	0.0017969385713138724	DESIGN
potentialtrimcharacterargindex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9989694928890829	WITHOUT_CLASSIFICATION	0.0010305071109171285	DESIGN
sqlfunction implementation	WITHOUT_CLASSIFICATION	0.9993677230180303	WITHOUT_CLASSIFICATION	6.322769819697204E-4	DESIGN
conceivable that the dialect ctor could throw hibernateexceptions so don't re-wrap	WITHOUT_CLASSIFICATION	0.9792195000244729	WITHOUT_CLASSIFICATION	0.020780499975527156	DESIGN
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9992056164482563	WITHOUT_CLASSIFICATION	7.943835517435463E-4	DESIGN
register resolvers set via environment property	WITHOUT_CLASSIFICATION	0.9814646457188523	WITHOUT_CLASSIFICATION	0.01853535428114765	DESIGN
kept for backward compatibility until after the 3.1beta5 release of ha	WITHOUT_CLASSIFICATION	0.9999514148343264	WITHOUT_CLASSIFICATION	4.8585165673673344E-5	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9998509893897385	WITHOUT_CLASSIFICATION	1.490106102616153E-4	DESIGN
the cascadingaction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997619578277167	WITHOUT_CLASSIFICATION	2.380421722833511E-4	DESIGN
the cascadingaction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997184771793745	WITHOUT_CLASSIFICATION	2.815228206255109E-4	DESIGN
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997192422276135	WITHOUT_CLASSIFICATION	2.8075777238644866E-4	DESIGN
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9965705173770383	WITHOUT_CLASSIFICATION	0.0034294826229615935	DESIGN
(lockmode) anything	WITHOUT_CLASSIFICATION	0.9998295758311854	WITHOUT_CLASSIFICATION	1.704241688145829E-4	DESIGN
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997239088653297	WITHOUT_CLASSIFICATION	2.7609113467036607E-4	DESIGN
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999897590014051	WITHOUT_CLASSIFICATION	1.024099859490006E-4	DESIGN
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996294833259823	WITHOUT_CLASSIFICATION	3.705166740176081E-4	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999503591978246	WITHOUT_CLASSIFICATION	4.964080217546857E-5	DESIGN
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9963052558868724	WITHOUT_CLASSIFICATION	0.003694744113127585	DESIGN
for deprecated saveorupdatecopy()	WITHOUT_CLASSIFICATION	0.998777295873179	WITHOUT_CLASSIFICATION	0.0012227041268209548	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996297846469459	WITHOUT_CLASSIFICATION	3.7021535305422276E-4	DESIGN
a proxy cannot be transient and it breaks foreignkeys.istransient	WITHOUT_CLASSIFICATION	0.9976016867022277	WITHOUT_CLASSIFICATION	0.0023983132977723398	DESIGN
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996974524122475	WITHOUT_CLASSIFICATION	3.0254758775255877E-4	DESIGN
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983248692001803	WITHOUT_CLASSIFICATION	0.001675130799819643	DESIGN
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9981521738139105	WITHOUT_CLASSIFICATION	0.0018478261860895278	DESIGN
actually the semantics of the next three are really "bag" note that unlike objects collection insertions updates deletions are not really remembered between flushes. we just re-use the same lists for convenience.	WITHOUT_CLASSIFICATION	0.9833056261820515	DESIGN	0.01669437381794852	WITHOUT_CLASSIFICATION
add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9994123310736398	WITHOUT_CLASSIFICATION	5.876689263603276E-4	DESIGN
continue loop	WITHOUT_CLASSIFICATION	0.9999581683030576	WITHOUT_CLASSIFICATION	4.183169694241027E-5	DESIGN
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9993116507897162	WITHOUT_CLASSIFICATION	6.88349210283858E-4	DESIGN
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999491444740924	WITHOUT_CLASSIFICATION	5.085552590764956E-5	DESIGN
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999599620569545	WITHOUT_CLASSIFICATION	4.003794304556288E-5	DESIGN
the map of batch numbers to entityinsertaction lists	WITHOUT_CLASSIFICATION	0.9992924439507671	WITHOUT_CLASSIFICATION	7.075560492329755E-4	DESIGN
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9994334258757597	WITHOUT_CLASSIFICATION	5.665741242402593E-4	DESIGN
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999861987386321	WITHOUT_CLASSIFICATION	1.3801261367779886E-5	DESIGN
remove the current element from insertions. it will be added back later.	WITHOUT_CLASSIFICATION	0.9997740749935718	WITHOUT_CLASSIFICATION	2.2592500642809688E-4	DESIGN
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9997454483560086	WITHOUT_CLASSIFICATION	2.545516439913328E-4	DESIGN
there is already an existing batch for this type of entity. check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9980921514249826	WITHOUT_CLASSIFICATION	0.001907848575017274	DESIGN
now rebuild the insertions list. there is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9996640056380491	WITHOUT_CLASSIFICATION	3.3599436195089617E-4	DESIGN
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9989175734351904	WITHOUT_CLASSIFICATION	0.0010824265648096546	DESIGN
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999773760440145	WITHOUT_CLASSIFICATION	2.2623955985581167E-5	DESIGN
find the batch number associated with the current association if any.	WITHOUT_CLASSIFICATION	0.9999858925342202	WITHOUT_CLASSIFICATION	1.4107465779842986E-5	DESIGN
create a new batch for this type. the batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9971159841178874	WITHOUT_CLASSIFICATION	0.0028840158821127225	DESIGN
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9996078576040106	WITHOUT_CLASSIFICATION	3.921423959892892E-4	DESIGN
since this entity will now be processed in the latest possible batch we can be assured that it will come after all other associations there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9994938452937371	WITHOUT_CLASSIFICATION	5.061547062628072E-4	DESIGN
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9998899749386324	WITHOUT_CLASSIFICATION	1.1002506136755003E-4	DESIGN
not really necessary but good for consistency	WITHOUT_CLASSIFICATION	0.9703901834158908	WITHOUT_CLASSIFICATION	0.029609816584109244	DESIGN
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999384154805299	WITHOUT_CLASSIFICATION	6.158451947022427E-5	DESIGN
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9973767611714066	WITHOUT_CLASSIFICATION	0.002623238828593403	DESIGN
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9971715452997536	WITHOUT_CLASSIFICATION	0.002828454700246437	DESIGN
loaded entity instances by entityuniquekey	WITHOUT_CLASSIFICATION	0.999945575239937	WITHOUT_CLASSIFICATION	5.4424760062946E-5	DESIGN
identity map of entityentry instances by the entity instance	WITHOUT_CLASSIFICATION	0.9999741655597104	WITHOUT_CLASSIFICATION	2.5834440289621263E-5	DESIGN
entity proxies by entitykey	WITHOUT_CLASSIFICATION	0.999429106744333	WITHOUT_CLASSIFICATION	5.708932556669927E-4	DESIGN
snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999750550832668	WITHOUT_CLASSIFICATION	2.4944916733222466E-5	DESIGN
identity map of array holder arrayholder instances by the array instance	WITHOUT_CLASSIFICATION	0.9999815752863344	WITHOUT_CLASSIFICATION	1.842471366570506E-5	DESIGN
collection wrappers by the collectionkey key=collectionkey value=persistentcollection	WITHOUT_CLASSIFICATION	0.9996934997652287	WITHOUT_CLASSIFICATION	3.065002347712405E-4	DESIGN
set of entitykeys of deleted objects	WITHOUT_CLASSIFICATION	0.99936157799274	WITHOUT_CLASSIFICATION	6.384220072600529E-4	DESIGN
properties that we have tried to load and not found in the database	WITHOUT_CLASSIFICATION	0.9998822537542101	WITHOUT_CLASSIFICATION	1.1774624578981505E-4	DESIGN
a list of collection wrappers that were instantiating during result set processing that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9996947834750612	WITHOUT_CLASSIFICATION	3.0521652493871996E-4	DESIGN
a container for collections we load up when the owning entity is not yet loaded for now this is purely transient!	WITHOUT_CLASSIFICATION	0.9967873881700103	WITHOUT_CLASSIFICATION	0.0032126118299897356	DESIGN
downgrade locks	WITHOUT_CLASSIFICATION	0.9996188800374894	WITHOUT_CLASSIFICATION	3.8111996251049114E-4	DESIGN
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9996893870279642	WITHOUT_CLASSIFICATION	3.106129720358288E-4	DESIGN
unwrap the object	WITHOUT_CLASSIFICATION	0.9998976670988917	WITHOUT_CLASSIFICATION	1.0233290110823678E-4	DESIGN
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999451825760705	WITHOUT_CLASSIFICATION	5.481742392944364E-5	DESIGN
return the proxied object	WITHOUT_CLASSIFICATION	0.9994533620537605	WITHOUT_CLASSIFICATION	5.466379462395816E-4	DESIGN
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999922291447516	WITHOUT_CLASSIFICATION	7.770855248440676E-6	DESIGN
early exit	WITHOUT_CLASSIFICATION	0.9998413250708412	WITHOUT_CLASSIFICATION	1.5867492915887495E-4	DESIGN
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9944763604422101	WITHOUT_CLASSIFICATION	0.005523639557789988	DESIGN
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9708820233015434	WITHOUT_CLASSIFICATION	0.029117976698456647	DESIGN
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.770442948379902	WITHOUT_CLASSIFICATION	0.22955705162009796	DESIGN
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999741621933512	WITHOUT_CLASSIFICATION	2.583780664877204E-5	DESIGN
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9938898322421714	WITHOUT_CLASSIFICATION	0.006110167757828604	DESIGN
public boolean isnonexistant(entitykey key) {return nonexistantentitykeys.contains(key)}	WITHOUT_CLASSIFICATION	0.9985921637349985	WITHOUT_CLASSIFICATION	0.0014078362650014624	DESIGN
public boolean isnonexistant(entityuniquekey key) {return nonexistententityuniquekeys.contains(key)}	WITHOUT_CLASSIFICATION	0.9985921637349985	WITHOUT_CLASSIFICATION	0.0014078362650014624	DESIGN
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9984341647084826	WITHOUT_CLASSIFICATION	0.001565835291517424	DESIGN
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9960471279026185	WITHOUT_CLASSIFICATION	0.003952872097381428	DESIGN
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9979025046964699	WITHOUT_CLASSIFICATION	0.002097495303530052	DESIGN
otherwise the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999972832346902	WITHOUT_CLASSIFICATION	2.7167653098668415E-6	DESIGN
adds remove as a sort-of alias for delete	WITHOUT_CLASSIFICATION	0.9998180587555041	WITHOUT_CLASSIFICATION	1.8194124449601813E-4	DESIGN
bad cast	WITHOUT_CLASSIFICATION	0.9992289872330353	WITHOUT_CLASSIFICATION	7.710127669646277E-4	DESIGN
return lhspersister.getsubclasspropertycolumnnames(property)	WITHOUT_CLASSIFICATION	0.9995528609094265	WITHOUT_CLASSIFICATION	4.47139090573512E-4	DESIGN
property-refs for associations defined on a component are not supported so no need to slice	WITHOUT_CLASSIFICATION	0.998377666705107	WITHOUT_CLASSIFICATION	0.0016223332948929867	DESIGN
if there is no property-ref assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999912710299964	WITHOUT_CLASSIFICATION	8.72897000346228E-6	DESIGN
handle a property-ref	WITHOUT_CLASSIFICATION	0.9918285242991526	WITHOUT_CLASSIFICATION	0.008171475700847529	DESIGN
nativesqlqueryreturn	WITHOUT_CLASSIFICATION	0.9996084438916226	WITHOUT_CLASSIFICATION	3.915561083774067E-4	DESIGN
final boolean forcecacherefresh	WITHOUT_CLASSIFICATION	0.9998622382559659	WITHOUT_CLASSIFICATION	1.37761744034164E-4	DESIGN
why is all others non final ?	WITHOUT_CLASSIFICATION	0.5901833300117146	WITHOUT_CLASSIFICATION	0.4098166699882855	DESIGN
this.forcecacherefresh = forcecacherefresh	WITHOUT_CLASSIFICATION	0.9998722135249658	WITHOUT_CLASSIFICATION	1.2778647503407453E-4	DESIGN
hella important optimization!!!	WITHOUT_CLASSIFICATION	0.9988445045091089	WITHOUT_CLASSIFICATION	0.0011554954908911124	DESIGN
return that.type.equals(type) && equalshelper.equals(that.value value)	WITHOUT_CLASSIFICATION	0.9990513945335756	WITHOUT_CLASSIFICATION	9.486054664244641E-4	DESIGN
must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9995350375740775	WITHOUT_CLASSIFICATION	4.649624259225405E-4	DESIGN
take a snapshot	WITHOUT_CLASSIFICATION	0.9992028059431534	WITHOUT_CLASSIFICATION	7.971940568466191E-4	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9908166005480247	WITHOUT_CLASSIFICATION	0.00918339945197533	DESIGN
the owning entity may have been deleted and its identifier unset due to identifier-rollback in which case try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9997115693479235	WITHOUT_CLASSIFICATION	2.8843065207640183E-4	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9993500920312641	WITHOUT_CLASSIFICATION	6.499079687359385E-4	DESIGN
we've been here before	WITHOUT_CLASSIFICATION	0.9994967259230942	WITHOUT_CLASSIFICATION	5.032740769057898E-4	DESIGN
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999834456020141	WITHOUT_CLASSIFICATION	1.6554397985799614E-5	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9993500920312641	WITHOUT_CLASSIFICATION	6.499079687359385E-4	DESIGN
if either its role changed	WITHOUT_CLASSIFICATION	0.9998367246065226	WITHOUT_CLASSIFICATION	1.6327539347735088E-4	DESIGN
or its key changed	WITHOUT_CLASSIFICATION	0.9999904585871981	WITHOUT_CLASSIFICATION	9.54141280180064E-6	DESIGN
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9996053892370865	WITHOUT_CLASSIFICATION	3.9461076291354337E-4	DESIGN
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9966946647560371	WITHOUT_CLASSIFICATION	0.0033053352439628824	DESIGN
force initialize!	WITHOUT_CLASSIFICATION	0.9996448761027013	WITHOUT_CLASSIFICATION	3.5512389729877504E-4	DESIGN
else if it's elements changed	WITHOUT_CLASSIFICATION	0.999970547172026	WITHOUT_CLASSIFICATION	2.9452827973919463E-5	DESIGN
attributes maintained between flush cycles	WITHOUT_CLASSIFICATION	0.9983039213844807	WITHOUT_CLASSIFICATION	0.0016960786155193676	DESIGN
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9998523143415955	WITHOUT_CLASSIFICATION	1.4768565840441597E-4	DESIGN
allow the collectionsnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9989845376145287	WITHOUT_CLASSIFICATION	0.0010154623854712512	DESIGN
attributes used only during flush cycle	WITHOUT_CLASSIFICATION	0.9724516180274202	WITHOUT_CLASSIFICATION	0.027548381972579833	DESIGN
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.999940423707605	WITHOUT_CLASSIFICATION	5.9576292394897255E-5	DESIGN
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999718002446828	WITHOUT_CLASSIFICATION	2.819975531721866E-5	DESIGN
during flush we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9876848028591905	WITHOUT_CLASSIFICATION	0.012315197140809545	DESIGN
if we instantiate a collection during the flush() process we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999586123058855	WITHOUT_CLASSIFICATION	4.1387694114602555E-5	DESIGN
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9917841283310923	WITHOUT_CLASSIFICATION	0.008215871668907611	DESIGN
a newly wrapped collection is not dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.7563565830647838	WITHOUT_CLASSIFICATION	0.24364341693521616	DESIGN
collection.cleardirty()	WITHOUT_CLASSIFICATION	0.9991129145727181	WITHOUT_CLASSIFICATION	8.870854272817789E-4	DESIGN
collection.cleardirty()	WITHOUT_CLASSIFICATION	0.9991129145727181	WITHOUT_CLASSIFICATION	8.870854272817789E-4	DESIGN
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9994601808178117	WITHOUT_CLASSIFICATION	5.398191821882637E-4	DESIGN
optimization	WITHOUT_CLASSIFICATION	0.9999350221688488	WITHOUT_CLASSIFICATION	6.497783115122728E-5	DESIGN
optimization optimization	WITHOUT_CLASSIFICATION	0.9998527293333102	WITHOUT_CLASSIFICATION	1.4727066668985403E-4	DESIGN
re-snapshot	WITHOUT_CLASSIFICATION	0.9996084438916226	WITHOUT_CLASSIFICATION	3.915561083774067E-4	DESIGN
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9996198507464886	WITHOUT_CLASSIFICATION	3.8014925351135805E-4	DESIGN
note this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9239429363527829	WITHOUT_CLASSIFICATION	0.07605706364721711	DESIGN
memory optimization	WITHOUT_CLASSIFICATION	0.9999664144682741	WITHOUT_CLASSIFICATION	3.3585531726021636E-5	DESIGN
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9997196930819197	WITHOUT_CLASSIFICATION	2.8030691808035455E-4	DESIGN
copied from session	WITHOUT_CLASSIFICATION	0.9942109810530493	WITHOUT_CLASSIFICATION	0.005789018946950782	DESIGN
this should not happen since the dtd prevents it	WITHOUT_CLASSIFICATION	0.9990261061407334	WITHOUT_CLASSIFICATION	9.738938592665571E-4	DESIGN
joinprocessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the sql ast. 'hasfiltercondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.999820759075074	WITHOUT_CLASSIFICATION	1.792409249260477E-4	DESIGN
the current join represents the join between a many-to-many association table and its "target" table. here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9997773343565235	WITHOUT_CLASSIFICATION	2.2266564347656794E-4	DESIGN
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9992577764280124	WITHOUT_CLASSIFICATION	7.422235719876075E-4	DESIGN
values is not null and is checkable we'll look deeper	WITHOUT_CLASSIFICATION	0.9991344194775695	WITHOUT_CLASSIFICATION	8.655805224304163E-4	DESIGN
for non null args check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9991577496908901	WITHOUT_CLASSIFICATION	8.422503091099492E-4	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9998509893897385	WITHOUT_CLASSIFICATION	1.490106102616153E-4	DESIGN
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9997619169391413	WITHOUT_CLASSIFICATION	2.3808306085869646E-4	DESIGN
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9985960464024836	WITHOUT_CLASSIFICATION	0.001403953597516484	DESIGN
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9993908147982972	WITHOUT_CLASSIFICATION	6.091852017027981E-4	DESIGN
do the test	WITHOUT_CLASSIFICATION	0.999988414038372	WITHOUT_CLASSIFICATION	1.1585961627923764E-5	DESIGN
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9998052928069315	WITHOUT_CLASSIFICATION	1.9470719306848694E-4	DESIGN
unwrap it	WITHOUT_CLASSIFICATION	0.9997993312786425	WITHOUT_CLASSIFICATION	2.006687213575669E-4	DESIGN
see if the entity is already bound to this session if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9939789879706975	WITHOUT_CLASSIFICATION	0.0060210120293025275	DESIGN
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9998709250070178	WITHOUT_CLASSIFICATION	1.2907499298217358E-4	DESIGN
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9991603180251017	WITHOUT_CLASSIFICATION	8.396819748983611E-4	DESIGN
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9968347273447485	WITHOUT_CLASSIFICATION	0.003165272655251548	DESIGN
we use the assumed value if there is one to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999912396070042	WITHOUT_CLASSIFICATION	8.760392995901529E-6	DESIGN
hit the database after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9996188239954512	WITHOUT_CLASSIFICATION	3.8117600454881277E-4	DESIGN
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context so make some deeper checks	WITHOUT_CLASSIFICATION	0.9934626727102703	WITHOUT_CLASSIFICATION	0.006537327289729676	DESIGN
int count = 0	WITHOUT_CLASSIFICATION	0.9999884659065441	WITHOUT_CLASSIFICATION	1.1534093455902512E-5	DESIGN
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999901811966413	WITHOUT_CLASSIFICATION	9.818803358621437E-6	DESIGN
checkforend = false	WITHOUT_CLASSIFICATION	0.9999723329101937	WITHOUT_CLASSIFICATION	2.7667089806226503E-5	DESIGN
count++	WITHOUT_CLASSIFICATION	0.9995412406281159	WITHOUT_CLASSIFICATION	4.587593718841749E-4	DESIGN
end of array start filling again from start	WITHOUT_CLASSIFICATION	0.9999443851952992	WITHOUT_CLASSIFICATION	5.561480470091184E-5	DESIGN
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9992204653614207	WITHOUT_CLASSIFICATION	7.795346385793193E-4	DESIGN
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999707916686513	WITHOUT_CLASSIFICATION	2.920833134872565E-5	DESIGN
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999295631642611	WITHOUT_CLASSIFICATION	7.043683573883683E-5	DESIGN
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9997153068196195	WITHOUT_CLASSIFICATION	2.846931803804918E-4	DESIGN
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9996822405139224	WITHOUT_CLASSIFICATION	3.177594860776799E-4	DESIGN
ignore this row of results! note the early exit	WITHOUT_CLASSIFICATION	0.999728385382691	WITHOUT_CLASSIFICATION	2.7161461730890825E-4	DESIGN
initialize this collection	WITHOUT_CLASSIFICATION	0.9789517537937795	WITHOUT_CLASSIFICATION	0.02104824620622055	DESIGN
create one	WITHOUT_CLASSIFICATION	0.9996780150104022	WITHOUT_CLASSIFICATION	3.2198498959774304E-4	DESIGN
warning can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9990017565903614	WITHOUT_CLASSIFICATION	9.982434096386516E-4	DESIGN
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.999741436055446	WITHOUT_CLASSIFICATION	2.585639445540535E-4	DESIGN
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9949043944262563	WITHOUT_CLASSIFICATION	0.0050956055737436355	DESIGN
some filters affecting the collection are enabled on the session so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9826097756995037	WITHOUT_CLASSIFICATION	0.017390224300496252	DESIGN
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993507895399615	WITHOUT_CLASSIFICATION	6.492104600385348E-4	DESIGN
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997947919921488	WITHOUT_CLASSIFICATION	2.0520800785114561E-4	DESIGN
collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991617753790839	WITHOUT_CLASSIFICATION	8.382246209161616E-4	DESIGN
simple cache of param metadata based on query string. ideally the original "user-supplied query" string should be used to retreive this metadata (i.e. not the para-list-expanded query string) to avoid unnecessary cache entries. used solely for caching param metadata for native-sql queries see getsqlparametermetadata() for a discussion as to why	WITHOUT_CLASSIFICATION	0.8011933422178862	WITHOUT_CLASSIFICATION	0.1988066577821138	DESIGN
the cache of the actual plans	WITHOUT_CLASSIFICATION	0.9998348316506016	WITHOUT_CLASSIFICATION	1.651683493984275E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9982030614286861	WITHOUT_CLASSIFICATION	0.0017969385713138724	DESIGN
package	WITHOUT_CLASSIFICATION	0.9982030614286861	WITHOUT_CLASSIFICATION	0.0017969385713138724	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999826966348467	WITHOUT_CLASSIFICATION	1.7303365153340667E-5	DESIGN
for native-sql queries the param metadata is determined outside any relation to a query plan because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.8732523432995849	WITHOUT_CLASSIFICATION	0.12674765670041505	DESIGN
don't care	WITHOUT_CLASSIFICATION	0.9978656309547619	WITHOUT_CLASSIFICATION	0.002134369045238182	DESIGN
recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985126117637874	WITHOUT_CLASSIFICATION	0.001487388236212625	DESIGN
don't care	WITHOUT_CLASSIFICATION	0.9978656309547619	WITHOUT_CLASSIFICATION	0.002134369045238182	DESIGN
note firstrow is zero-based	WITHOUT_CLASSIFICATION	0.9963848504655964	WITHOUT_CLASSIFICATION	0.003615149534403676	DESIGN
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999263542082821	WITHOUT_CLASSIFICATION	7.364579171794856E-5	DESIGN
named parameter	WITHOUT_CLASSIFICATION	0.9993665406006644	WITHOUT_CLASSIFICATION	6.334593993355533E-4	DESIGN
could be either an ordinal or jpa-positional parameter	WITHOUT_CLASSIFICATION	0.9936676896677127	WITHOUT_CLASSIFICATION	0.006332310332287249	DESIGN
a peek ahead showed this as an jpa-positional parameter	WITHOUT_CLASSIFICATION	0.9969809014838632	WITHOUT_CLASSIFICATION	0.003019098516136676	DESIGN
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9985031898694091	WITHOUT_CLASSIFICATION	0.0014968101305908909	DESIGN
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9998048548640577	WITHOUT_CLASSIFICATION	1.9514513594236417E-4	DESIGN
perform the actual work	WITHOUT_CLASSIFICATION	0.9992843030119779	WITHOUT_CLASSIFICATION	7.156969880220476E-4	DESIGN
if everything went ok commit the transaction and close the obtained connection handle	WITHOUT_CLASSIFICATION	0.9999996982613948	WITHOUT_CLASSIFICATION	3.017386052967385E-7	DESIGN
at some point the processing went bad so we need to 1) make sure the connection handle gets released 2) try to cleanup the jta context as much as possible	WITHOUT_CLASSIFICATION	0.9994948300413198	WITHOUT_CLASSIFICATION	5.051699586801569E-4	DESIGN
finally handle the exception	WITHOUT_CLASSIFICATION	0.998669082599862	WITHOUT_CLASSIFICATION	0.0013309174001379664	DESIGN
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9839246658090354	WITHOUT_CLASSIFICATION	0.01607533419096462	DESIGN
saveorupdatecopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9996087052718352	WITHOUT_CLASSIFICATION	3.912947281647E-4	DESIGN
collectionpersister should not be null but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.8965824185172888	WITHOUT_CLASSIFICATION	0.10341758148271124	DESIGN
otherwise a null or brand new collection this will also (inefficiently) handle arrays which have no snapshot so we can't do any better processarrayornewcollection(collection type)	WITHOUT_CLASSIFICATION	0.9893723716733516	WITHOUT_CLASSIFICATION	0.01062762832664832	DESIGN
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9936982907980703	WITHOUT_CLASSIFICATION	0.0063017092019297585	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9996426049261609	WITHOUT_CLASSIFICATION	3.573950738391012E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9996426049261609	WITHOUT_CLASSIFICATION	3.573950738391012E-4	DESIGN
force a substitution!	WITHOUT_CLASSIFICATION	0.9976665907408503	WITHOUT_CLASSIFICATION	0.002333409259149755	DESIGN
the user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.995542479368016	WITHOUT_CLASSIFICATION	0.004457520631984042	DESIGN
the database now holds a lock + the object is flushed from the cache so release the soft lock	WITHOUT_CLASSIFICATION	0.9999458194207393	WITHOUT_CLASSIFICATION	5.418057926058424E-5	DESIGN
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999996498618349	WITHOUT_CLASSIFICATION	3.501381652281014E-7	DESIGN
search for collections by reachability updating their role. we don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9987958911586514	WITHOUT_CLASSIFICATION	0.0012041088413485904	DESIGN
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999396656771959	WITHOUT_CLASSIFICATION	6.0334322804039116E-5	DESIGN
note we need to do the wrap here even if its not "dirty" because collections need wrapping but changes to _them_ don't dirty the container. also for versioned data we need to wrap before calling searchfordirtycollections	WITHOUT_CLASSIFICATION	0.9967629787002448	WITHOUT_CLASSIFICATION	0.003237021299755271	DESIGN
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9996302173901228	WITHOUT_CLASSIFICATION	3.6978260987726347E-4	DESIGN
grab its current state	WITHOUT_CLASSIFICATION	0.999916237086115	WITHOUT_CLASSIFICATION	8.376291388501393E-5	DESIGN
schedule the update note that we intentionally do _not_ pass in currentpersistentstate!	WITHOUT_CLASSIFICATION	0.9999874522371057	WITHOUT_CLASSIFICATION	1.2547762894349644E-5	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9996911547941326	WITHOUT_CLASSIFICATION	3.088452058672771E-4	DESIGN
give the interceptor a chance to process property values if the properties were modified by the interceptor we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999949390500884	WITHOUT_CLASSIFICATION	5.060949911589204E-6	DESIGN
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.999946454898839	WITHOUT_CLASSIFICATION	5.3545101160881073E-5	DESIGN
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9998797210095989	WITHOUT_CLASSIFICATION	1.2027899040116478E-4	DESIGN
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9996758568216026	WITHOUT_CLASSIFICATION	3.2414317839744275E-4	DESIGN
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9951379499638963	WITHOUT_CLASSIFICATION	0.004862050036103799	DESIGN
give the interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9997433724599281	WITHOUT_CLASSIFICATION	2.5662754007191633E-4	DESIGN
now we might need to recalculate the dirtyproperties array	WITHOUT_CLASSIFICATION	0.9982195324563973	WITHOUT_CLASSIFICATION	0.001780467543602707	DESIGN
use the current version	WITHOUT_CLASSIFICATION	0.9982420629652424	WITHOUT_CLASSIFICATION	0.0017579370347576104	DESIGN
interceptor returned null so do the dirtycheck ourself if possible	WITHOUT_CLASSIFICATION	0.9999653980924667	WITHOUT_CLASSIFICATION	3.460190753334836E-5	DESIGN
object loaded by update()	WITHOUT_CLASSIFICATION	0.9998235751156652	WITHOUT_CLASSIFICATION	1.764248843348489E-4	DESIGN
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999390352111834	WITHOUT_CLASSIFICATION	6.096478881649974E-5	DESIGN
dirty check against the database snapshot if possible/necessary	WITHOUT_CLASSIFICATION	0.9999941529531263	WITHOUT_CLASSIFICATION	5.847046873743999E-6	DESIGN
the interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9991219992474308	WITHOUT_CLASSIFICATION	8.78000752569309E-4	DESIGN
even process null collections	WITHOUT_CLASSIFICATION	0.9998329866150909	WITHOUT_CLASSIFICATION	1.6701338490903797E-4	DESIGN
get the id from the object	WITHOUT_CLASSIFICATION	0.998720322733044	WITHOUT_CLASSIFICATION	0.0012796772669560216	DESIGN
always do an insert and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999123730512444	WITHOUT_CLASSIFICATION	8.76269487556785E-5	DESIGN
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9953657953165972	WITHOUT_CLASSIFICATION	0.004634204683402831	DESIGN
/ hhh-2378	WITHOUT_CLASSIFICATION	0.9998776975752605	WITHOUT_CLASSIFICATION	1.2230242473959836E-4	DESIGN
will result in a sql update	WITHOUT_CLASSIFICATION	0.9999934850098526	WITHOUT_CLASSIFICATION	6.514990147400815E-6	DESIGN
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999106746348081	WITHOUT_CLASSIFICATION	8.932536519184656E-5	DESIGN
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9995181201532843	WITHOUT_CLASSIFICATION	4.818798467157289E-4	DESIGN
refresh() does not pass an entityname	WITHOUT_CLASSIFICATION	0.9997885857853733	WITHOUT_CLASSIFICATION	2.1141421462657348E-4	DESIGN
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9988139859226531	WITHOUT_CLASSIFICATION	0.0011860140773469526	DESIGN
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.997373461809739	WITHOUT_CLASSIFICATION	0.002626538190260954	DESIGN
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9992727875360559	WITHOUT_CLASSIFICATION	7.272124639441047E-4	DESIGN
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9996049707216206	WITHOUT_CLASSIFICATION	3.9502927837941574E-4	DESIGN
this object was already loaded	WITHOUT_CLASSIFICATION	0.9959551163798805	WITHOUT_CLASSIFICATION	0.004044883620119393	DESIGN
entity was found in second-level cache	WITHOUT_CLASSIFICATION	0.999685761889225	WITHOUT_CLASSIFICATION	3.1423811077511564E-4	DESIGN
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9995286439809513	WITHOUT_CLASSIFICATION	4.713560190486708E-4	DESIGN
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999787240422389	WITHOUT_CLASSIFICATION	2.1275957761233846E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993445277979629	WITHOUT_CLASSIFICATION	6.554722020370787E-4	DESIGN
some statistics	WITHOUT_CLASSIFICATION	0.9994392051788292	WITHOUT_CLASSIFICATION	5.607948211707706E-4	DESIGN
safe from concurrent modification because of how entrylist() is implemented on identitymap	WITHOUT_CLASSIFICATION	0.9999388625697844	WITHOUT_CLASSIFICATION	6.11374302156726E-5	DESIGN
initialize dirty flags for arrays + collections with composite elements and reset reached doupdate etc.	WITHOUT_CLASSIFICATION	0.9999702463522463	WITHOUT_CLASSIFICATION	2.9753647753621986E-5	DESIGN
among other things updatereachables() will recursively load all collections that are moving roles. this might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9946123326994203	WITHOUT_CLASSIFICATION	0.005387667300579685	DESIGN
so this needs to be safe from concurrent modification problems. it is safe because of how identitymap implements entryset()	WITHOUT_CLASSIFICATION	0.9837327871218758	WITHOUT_CLASSIFICATION	0.01626721287812419	DESIGN
update the status of the object and if necessary schedule an update	WITHOUT_CLASSIFICATION	0.999982381860655	WITHOUT_CLASSIFICATION	1.7618139345017045E-5	DESIGN
schedule updates to collections	WITHOUT_CLASSIFICATION	0.999743024473232	WITHOUT_CLASSIFICATION	2.569755267679052E-4	DESIGN
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9956498045668132	WITHOUT_CLASSIFICATION	0.004350195433186861	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993445277979629	WITHOUT_CLASSIFICATION	6.554722020370787E-4	DESIGN
the database has changed now so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999511034682077	WITHOUT_CLASSIFICATION	4.889653179230627E-5	DESIGN
if the collection is dereferenced remove from the session cache iter.remove() does not work since the entryset is not backed by the set	WITHOUT_CLASSIFICATION	0.9984927660650225	WITHOUT_CLASSIFICATION	0.0015072339349775574	DESIGN
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9998776134961725	WITHOUT_CLASSIFICATION	1.2238650382756668E-4	DESIGN
get a snapshot	WITHOUT_CLASSIFICATION	0.9991615068125579	WITHOUT_CLASSIFICATION	8.384931874421333E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9996616171417686	WITHOUT_CLASSIFICATION	3.3838285823129834E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9996616171417686	WITHOUT_CLASSIFICATION	3.3838285823129834E-4	DESIGN
key is an entity involved with the operation performed by the listener value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999995665951611	WITHOUT_CLASSIFICATION	4.3340483892841733E-7	DESIGN
early exit!!!	WITHOUT_CLASSIFICATION	0.9997471063360001	WITHOUT_CLASSIFICATION	2.528936640000225E-4	DESIGN
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9995483938596351	WITHOUT_CLASSIFICATION	4.516061403649139E-4	DESIGN
before any callbacks etc so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9997443654222237	WITHOUT_CLASSIFICATION	2.556345777763909E-4	DESIGN
ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999611659449832	WITHOUT_CLASSIFICATION	3.883405501684587E-5	DESIGN
typefactory.deepcopy( currentstate proptypes persister.getpropertyupdateability() deletedstate session )	WITHOUT_CLASSIFICATION	0.9994079015134423	WITHOUT_CLASSIFICATION	5.920984865576258E-4	DESIGN
cascade-delete to collections before the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999643271263721	WITHOUT_CLASSIFICATION	3.567287362787744E-5	DESIGN
cascade-delete to many-to-one after the parent was deleted	WITHOUT_CLASSIFICATION	0.9999211411141009	WITHOUT_CLASSIFICATION	7.885888589916091E-5	DESIGN
if it is an initialized proxy let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9843948336350367	WITHOUT_CLASSIFICATION	0.015605166364963443	DESIGN
assign the requested id to the proxy before reassociating the proxy	WITHOUT_CLASSIFICATION	0.999976374239397	WITHOUT_CLASSIFICATION	2.3625760602966428E-5	DESIGN
an uninitialized proxy noop don't even need to return an id since it is never a save()	WITHOUT_CLASSIFICATION	0.9998520989550204	WITHOUT_CLASSIFICATION	1.479010449796335E-4	DESIGN
initialize properties of the event	WITHOUT_CLASSIFICATION	0.9998731510834069	WITHOUT_CLASSIFICATION	1.268489165931534E-4	DESIGN
return the id in the event object	WITHOUT_CLASSIFICATION	0.9997200415472246	WITHOUT_CLASSIFICATION	2.79958452775441E-4	DESIGN
transient or deleted	WITHOUT_CLASSIFICATION	0.9996326878237712	WITHOUT_CLASSIFICATION	3.673121762287673E-4	DESIGN
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9990304916717897	WITHOUT_CLASSIFICATION	9.695083282103029E-4	DESIGN
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.8458697026228293	DESIGN	0.15413029737717074	WITHOUT_CLASSIFICATION
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.990593797219511	WITHOUT_CLASSIFICATION	0.009406202780489014	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9979988474692039	WITHOUT_CLASSIFICATION	0.0020011525307960867	DESIGN
cachedstate	WITHOUT_CLASSIFICATION	0.9996084438916226	WITHOUT_CLASSIFICATION	3.915561083774067E-4	DESIGN
assume true since we don't really know and it doesn't matter	WITHOUT_CLASSIFICATION	0.9996566214339989	WITHOUT_CLASSIFICATION	3.433785660010458E-4	DESIGN
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9974277281880808	WITHOUT_CLASSIFICATION	0.002572271811919203	DESIGN
if the collection belonged to a different entity clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.987856213009037	WITHOUT_CLASSIFICATION	0.01214378699096295	DESIGN
log.debug( "calling onload()" )	WITHOUT_CLASSIFICATION	0.9991708054840631	WITHOUT_CLASSIFICATION	8.291945159369908E-4	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9997502095829368	WITHOUT_CLASSIFICATION	2.497904170631664E-4	DESIGN
note performexecutions() clears all collectionxxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9972087702722428	WITHOUT_CLASSIFICATION	0.0027912297277572213	DESIGN
if no array holder we found an unwrappered array (this can't occur because we now always call wrap() before getting to here) return (ah==null) ? true searchfordirtycollections(ah type)	WITHOUT_CLASSIFICATION	0.9999974778243625	WITHOUT_CLASSIFICATION	2.5221756374760645E-6	DESIGN
if not wrappered yet its dirty (this can't occur because we now always call wrap() before getting to here) return ( ! (obj instanceof persistentcollection) ) ? true searchfordirtycollections( (persistentcollection) obj type )	WITHOUT_CLASSIFICATION	0.9999258373691537	WITHOUT_CLASSIFICATION	7.416263084631658E-5	DESIGN
we need to check even if it was not initialized because of delayed adds!	WITHOUT_CLASSIFICATION	0.9970508697200097	WITHOUT_CLASSIFICATION	0.00294913027999024	DESIGN
note early exit!	WITHOUT_CLASSIFICATION	0.9989079616933806	WITHOUT_CLASSIFICATION	0.0010920383066194582	DESIGN
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9990972872782649	WITHOUT_CLASSIFICATION	9.027127217351552E-4	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9997502095829368	WITHOUT_CLASSIFICATION	2.497904170631664E-4	DESIGN
check the persistence context for an entry relating to this entity to be merged	WITHOUT_CLASSIFICATION	0.9772495667562161	WITHOUT_CLASSIFICATION	0.022750433243783837	DESIGN
we have specialized case of a detached entity from the perspective of the merge operation. specifically we have an incoming entity instance which has a corresponding entry in the current persistence context but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999598417731729	WITHOUT_CLASSIFICATION	4.015822682717798E-5	DESIGN
deleted	WITHOUT_CLASSIFICATION	0.9997311374535807	WITHOUT_CLASSIFICATION	2.6886254641934437E-4	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.999822588586394	WITHOUT_CLASSIFICATION	1.7741141360609586E-4	DESIGN
cascade first so that all unsaved objects get their copy created before we actually copy cascadeonmerge(event persister entity copycache cascades.cascade_before_merge)	WITHOUT_CLASSIFICATION	0.9999673693388582	WITHOUT_CLASSIFICATION	3.2630661141775086E-5	DESIGN
this bit is only really absolutely necessary for handling requestedid but is also good if we merge multiple object graphs since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9509377416929865	WITHOUT_CLASSIFICATION	0.04906225830701353	DESIGN
continue we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9975775546016133	WITHOUT_CLASSIFICATION	0.002422445398386647	DESIGN
cascade first so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999918914696995	WITHOUT_CLASSIFICATION	8.108530300600882E-6	DESIGN
check that entity id = requestedid	WITHOUT_CLASSIFICATION	0.9991623134563629	WITHOUT_CLASSIFICATION	8.376865436370331E-4	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.999822588586394	WITHOUT_CLASSIFICATION	1.7741141360609586E-4	DESIGN
we got here because we assumed that an instance with an assigned id was detached when it was really persistent	WITHOUT_CLASSIFICATION	0.9999326846989641	WITHOUT_CLASSIFICATION	6.731530103587711E-5	DESIGN
cascade first so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999918914696995	WITHOUT_CLASSIFICATION	8.108530300600882E-6	DESIGN
copyvalues works by reflection so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9998729729680401	WITHOUT_CLASSIFICATION	1.2702703195999394E-4	DESIGN
early exit	WITHOUT_CLASSIFICATION	0.9998413250708412	WITHOUT_CLASSIFICATION	1.5867492915887495E-4	DESIGN
source.getbatcher().executebatch() found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9985567179301248	WITHOUT_CLASSIFICATION	0.0014432820698752893	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9996911547941326	WITHOUT_CLASSIFICATION	3.088452058672771E-4	DESIGN
now done in entityidentityinsertaction persister.setidentifier( entity id source.getentitymode() )	WITHOUT_CLASSIFICATION	0.9978841682421343	WITHOUT_CLASSIFICATION	0.0021158317578657253	DESIGN
source.getpersistencecontext().removenonexist( new entitykey( id persister source.getentitymode() ) )	WITHOUT_CLASSIFICATION	0.9952389838847795	WITHOUT_CLASSIFICATION	0.004761016115220523	DESIGN
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9983043910252017	WITHOUT_CLASSIFICATION	0.00169560897479831	DESIGN
cascade-save to many-to-one before the parent is saved	WITHOUT_CLASSIFICATION	0.9996843959661667	WITHOUT_CLASSIFICATION	3.156040338332693E-4	DESIGN
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999999140099164	WITHOUT_CLASSIFICATION	8.599008369832107E-8	DESIGN
the object is persistent	WITHOUT_CLASSIFICATION	0.9996129532265795	WITHOUT_CLASSIFICATION	3.87046773420453E-4	DESIGN
the entity is associated with the session so check its status	WITHOUT_CLASSIFICATION	0.9999028782986575	WITHOUT_CLASSIFICATION	9.712170134254923E-5	DESIGN
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.999840412446162	WITHOUT_CLASSIFICATION	1.5958755383805662E-4	DESIGN
ie. e.status==deleted	WITHOUT_CLASSIFICATION	0.9991129145727181	WITHOUT_CLASSIFICATION	8.870854272817789E-4	DESIGN
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9997380569755334	WITHOUT_CLASSIFICATION	2.6194302446650564E-4	DESIGN
note early exit!	WITHOUT_CLASSIFICATION	0.9989079616933806	WITHOUT_CLASSIFICATION	0.0010920383066194582	DESIGN
private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9741156931585211	WITHOUT_CLASSIFICATION	0.025884306841478844	DESIGN
first try to find a matching constructor accepting a violatedconstraintnameextracter param	WITHOUT_CLASSIFICATION	0.9991784273636795	WITHOUT_CLASSIFICATION	8.215726363204083E-4	DESIGN
eat it and try next	WITHOUT_CLASSIFICATION	0.9899073528653206	WITHOUT_CLASSIFICATION	0.010092647134679273	DESIGN
otherwise try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9988408301087974	WITHOUT_CLASSIFICATION	0.0011591698912026104	DESIGN
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9992297553636431	WITHOUT_CLASSIFICATION	7.702446363569052E-4	DESIGN
collectionpropertymapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9977637211936313	WITHOUT_CLASSIFICATION	0.002236278806368562	DESIGN
remove initial " "	WITHOUT_CLASSIFICATION	0.9985151611758225	WITHOUT_CLASSIFICATION	0.0014848388241774145	DESIGN
remove initial " and "	WITHOUT_CLASSIFICATION	0.9963415255254331	WITHOUT_CLASSIFICATION	0.003658474474566953	DESIGN
beforeclasstokens.add("new") definitely don't have this!!	WITHOUT_CLASSIFICATION	0.9995979092198533	WITHOUT_CLASSIFICATION	4.020907801467973E-4	DESIGN
notafterclasstokens.add("")	WITHOUT_CLASSIFICATION	0.9991129145727181	WITHOUT_CLASSIFICATION	8.870854272817789E-4	DESIGN
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9989272318912781	WITHOUT_CLASSIFICATION	0.001072768108721881	DESIGN
update last non-whitespace token if necessary	WITHOUT_CLASSIFICATION	0.9999837878182871	WITHOUT_CLASSIFICATION	1.6212181712900156E-5	DESIGN
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9992215393643762	WITHOUT_CLASSIFICATION	7.784606356238313E-4	DESIGN
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9991633579587197	WITHOUT_CLASSIFICATION	8.366420412802684E-4	DESIGN
note this!!	WITHOUT_CLASSIFICATION	0.9982890059288296	WITHOUT_CLASSIFICATION	0.0017109940711703174	DESIGN
error message constants.	WITHOUT_CLASSIFICATION	0.996621953381628	WITHOUT_CLASSIFICATION	0.0033780466183720398	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99951772601554	WITHOUT_CLASSIFICATION	4.822739844600004E-4	DESIGN
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993830314157189	WITHOUT_CLASSIFICATION	6.169685842810074E-4	DESIGN
handle collection-fiter compilation. important note this is modifying the input (hql) tree not the output tree!	WITHOUT_CLASSIFICATION	0.8294806994305836	WITHOUT_CLASSIFICATION	0.1705193005694165	DESIGN
show the modified ast.	WITHOUT_CLASSIFICATION	0.9999829773845624	WITHOUT_CLASSIFICATION	1.7022615437540842E-5	DESIGN
create a parameter specification for the collection filter	WITHOUT_CLASSIFICATION	0.9965292545673885	WITHOUT_CLASSIFICATION	0.0034707454326115424	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9994114129740594	WITHOUT_CLASSIFICATION	5.885870259406835E-4	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9994114129740594	WITHOUT_CLASSIFICATION	5.885870259406835E-4	DESIGN
get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.997877873124102	WITHOUT_CLASSIFICATION	0.0021221268758979655	DESIGN
the path ast should be a dotnode and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9928413801000076	WITHOUT_CLASSIFICATION	0.007158619899992391	DESIGN
tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999668590264804	WITHOUT_CLASSIFICATION	3.3140973519588597E-5	DESIGN
re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999823477618218	WITHOUT_CLASSIFICATION	1.7652238178191816E-5	DESIGN
don't forget to resolve the argument! resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9986751278232916	WITHOUT_CLASSIFICATION	0.001324872176708326	DESIGN
resolve everything up to this dot but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9979488360006163	WITHOUT_CLASSIFICATION	0.0020511639993836253	DESIGN
should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9903609571659229	WITHOUT_CLASSIFICATION	0.00963904283407724	DESIGN
was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999544660486173	WITHOUT_CLASSIFICATION	4.553395138271984E-5	DESIGN
attach any mapping-defined "order by" fragments	WITHOUT_CLASSIFICATION	0.9992456925111985	WITHOUT_CLASSIFICATION	7.543074888014809E-4	DESIGN
use the explicitly declared select expression determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999447492686808	WITHOUT_CLASSIFICATION	5.525073131928447E-5	DESIGN
after that process the joins. invoke a delegate to do the work as this is farily complex.	WITHOUT_CLASSIFICATION	0.9998634787322872	WITHOUT_CLASSIFICATION	1.3652126771274657E-4	DESIGN
make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999865646804562	WITHOUT_CLASSIFICATION	1.3435319543708623E-5	DESIGN
we need to generate ids as part of this bulk insert. note that this is only supported for sequence-style generators and post-insert-style generators basically only in-db generators	WITHOUT_CLASSIFICATION	0.8673556465464914	WITHOUT_CLASSIFICATION	0.13264435345350864	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9994114129740594	WITHOUT_CLASSIFICATION	5.885870259406835E-4	DESIGN
we need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9982237343865216	WITHOUT_CLASSIFICATION	0.0017762656134784822	DESIGN
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9977039299997427	WITHOUT_CLASSIFICATION	0.002296070000257285	DESIGN
this is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.7824358978541618	WITHOUT_CLASSIFICATION	0.21756410214583832	DESIGN
generate implicit joins only if necessary.	WITHOUT_CLASSIFICATION	0.9983424699996231	WITHOUT_CLASSIFICATION	0.0016575300003768842	DESIGN
notify the from element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999568839531562	WITHOUT_CLASSIFICATION	4.311604684390736E-5	DESIGN
turn off includesubclasses on all fromelements.	WITHOUT_CLASSIFICATION	0.9969868547857704	WITHOUT_CLASSIFICATION	0.003013145214229493	DESIGN
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9997600393786257	WITHOUT_CLASSIFICATION	2.399606213742458E-4	DESIGN
use the delegate resolve identifiers as from element aliases.	WITHOUT_CLASSIFICATION	0.997011673184017	WITHOUT_CLASSIFICATION	0.0029883268159831785	DESIGN
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9981019867109742	WITHOUT_CLASSIFICATION	0.0018980132890259172	DESIGN
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9930403513410163	WITHOUT_CLASSIFICATION	0.006959648658983637	DESIGN
make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9985464533819761	WITHOUT_CLASSIFICATION	0.001453546618023903	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99951772601554	WITHOUT_CLASSIFICATION	4.822739844600004E-4	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9994114129740594	WITHOUT_CLASSIFICATION	5.885870259406835E-4	DESIGN
--commented out by inspection (12/11/04 1056 am) int getwarningcount()	WITHOUT_CLASSIFICATION	0.9999346551364715	WITHOUT_CLASSIFICATION	6.534486352845355E-5	DESIGN
alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9992064776377816	WITHOUT_CLASSIFICATION	7.935223622184014E-4	DESIGN
switch	WITHOUT_CLASSIFICATION	0.9997116195323569	WITHOUT_CLASSIFICATION	2.883804676430949E-4	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9986148968676646	WITHOUT_CLASSIFICATION	0.001385103132335474	DESIGN
just do the regular thing if you can't find the ctor your ast must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999211020447366	WITHOUT_CLASSIFICATION	7.889795526343594E-5	DESIGN
initialize sql nodes here.	WITHOUT_CLASSIFICATION	0.9991419327672366	WITHOUT_CLASSIFICATION	8.58067232763449E-4	DESIGN
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997709637190323	WITHOUT_CLASSIFICATION	2.2903628096765047E-4	DESIGN
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999779116224087	WITHOUT_CLASSIFICATION	2.2088377591342758E-5	DESIGN
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999203348358913	WITHOUT_CLASSIFICATION	7.96651641086811E-5	DESIGN
--- inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9986809322550265	WITHOUT_CLASSIFICATION	0.0013190677449734527	DESIGN
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9991732115650119	WITHOUT_CLASSIFICATION	8.267884349879523E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9998776975752605	WITHOUT_CLASSIFICATION	1.2230242473959836E-4	DESIGN
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9990119952522831	WITHOUT_CLASSIFICATION	9.880047477168765E-4	DESIGN
again both should be fromelements	WITHOUT_CLASSIFICATION	0.9769280069144793	WITHOUT_CLASSIFICATION	0.02307199308552074	DESIGN
note firstrow is zero-based	WITHOUT_CLASSIFICATION	0.9963848504655964	WITHOUT_CLASSIFICATION	0.003615149534403676	DESIGN
right represents a joins originating from left or both right and left reprersent joins originating from the same fromelement	WITHOUT_CLASSIFICATION	0.9997586370196013	WITHOUT_CLASSIFICATION	2.4136298039864482E-4	DESIGN
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9899543901158754	WITHOUT_CLASSIFICATION	0.01004560988412459	DESIGN
right represents a joins originating from left	WITHOUT_CLASSIFICATION	0.9997454593666271	WITHOUT_CLASSIFICATION	2.5454063337298024E-4	DESIGN
all clear	WITHOUT_CLASSIFICATION	0.9994813238154198	WITHOUT_CLASSIFICATION	5.18676184580199E-4	DESIGN
ignore the token class name parameter and use a specific token class.	WITHOUT_CLASSIFICATION	0.993557028377985	WITHOUT_CLASSIFICATION	0.0064429716220149695	DESIGN
overriden to avoid system.exit	WITHOUT_CLASSIFICATION	0.9989093151061829	WITHOUT_CLASSIFICATION	0.001090684893817187	DESIGN
overriden to avoid system.exit	WITHOUT_CLASSIFICATION	0.9989093151061829	WITHOUT_CLASSIFICATION	0.001090684893817187	DESIGN
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9968266470079209	WITHOUT_CLASSIFICATION	0.0031733529920790035	DESIGN
don't care about other param types here just those explicitly user-defined	WITHOUT_CLASSIFICATION	0.9581328279010746	WITHOUT_CLASSIFICATION	0.04186717209892549	DESIGN
if the query is already compiled skip the compilation.	WITHOUT_CLASSIFICATION	0.9999369375435967	WITHOUT_CLASSIFICATION	6.306245640335871E-5	DESIGN
remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9993268879081753	WITHOUT_CLASSIFICATION	6.731120918247353E-4	DESIGN
phase 1 parse the hql into an ast.	WITHOUT_CLASSIFICATION	0.9986684538138283	WITHOUT_CLASSIFICATION	0.0013315461861716504	DESIGN
phase 2 analyze the hql ast and produce an sql ast.	WITHOUT_CLASSIFICATION	0.9999975669714898	WITHOUT_CLASSIFICATION	2.4330285102435496E-6	DESIGN
phase 3 generate the sql.	WITHOUT_CLASSIFICATION	0.9990947140563643	WITHOUT_CLASSIFICATION	9.052859436356839E-4	DESIGN
we do not actually propogate antlrexceptions as a cause so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9998968879919032	WITHOUT_CLASSIFICATION	1.0311200809674684E-4	DESIGN
we do not actually propogate antlrexceptions as a cause so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9998968879919032	WITHOUT_CLASSIFICATION	1.0311200809674684E-4	DESIGN
only needed during compilation phase	WITHOUT_CLASSIFICATION	0.9999405905359543	WITHOUT_CLASSIFICATION	5.94094640456081E-5	DESIGN
transform the tree.	WITHOUT_CLASSIFICATION	0.9997825177520904	WITHOUT_CLASSIFICATION	2.1748224790959703E-4	DESIGN
parse the query string into an hql ast.	WITHOUT_CLASSIFICATION	0.9996263078798728	WITHOUT_CLASSIFICATION	3.736921201271665E-4	DESIGN
delegate to the queryloader	WITHOUT_CLASSIFICATION	0.9995320491617538	WITHOUT_CLASSIFICATION	4.679508382463089E-4	DESIGN
delegate to the queryloader	WITHOUT_CLASSIFICATION	0.9995320491617538	WITHOUT_CLASSIFICATION	4.679508382463089E-4	DESIGN
delegate to the queryloader	WITHOUT_CLASSIFICATION	0.9995320491617538	WITHOUT_CLASSIFICATION	4.679508382463089E-4	DESIGN
note ( max - 1 ) because first is zero-based while max is not	WITHOUT_CLASSIFICATION	0.9999380808621344	WITHOUT_CLASSIFICATION	6.191913786562055E-5	DESIGN
-- package local methods for the queryloader delegate --	WITHOUT_CLASSIFICATION	0.9675695678784394	WITHOUT_CLASSIFICATION	0.032430432121560666	DESIGN
if there are no collection fetches then no further checks are needed	WITHOUT_CLASSIFICATION	0.999797599243697	WITHOUT_CLASSIFICATION	2.0240075630302624E-4	DESIGN
a shallow query is ok (although technically there should be no fetching here)	WITHOUT_CLASSIFICATION	0.9998697839660284	WITHOUT_CLASSIFICATION	1.3021603397153915E-4	DESIGN
should be the first but just to be safe	WITHOUT_CLASSIFICATION	0.9991512059891787	WITHOUT_CLASSIFICATION	8.487940108212889E-4	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9994114129740594	WITHOUT_CLASSIFICATION	5.885870259406835E-4	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9994114129740594	WITHOUT_CLASSIFICATION	5.885870259406835E-4	DESIGN
impl note allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9992928379962804	WITHOUT_CLASSIFICATION	7.071620037196764E-4	DESIGN
otherwise we have a non-scalar select with defined collection fetch(es). make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9997200046511041	WITHOUT_CLASSIFICATION	2.7999534889586164E-4	DESIGN
this is not strictly true. we actually just need to make sure that it is ordered by root-entity pk and that that order-by comes before any non-root-entity ordering	WITHOUT_CLASSIFICATION	0.6352180604495496	WITHOUT_CLASSIFICATION	0.3647819395504505	DESIGN
paramtranslations = new parametertranslationsimpl( collectedparameterspecifications )	WITHOUT_CLASSIFICATION	0.9997772991964646	WITHOUT_CLASSIFICATION	2.2270080353535557E-4	DESIGN
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9955353552183505	WITHOUT_CLASSIFICATION	0.004464644781649563	DESIGN
igndore it	WITHOUT_CLASSIFICATION	0.999496222066657	WITHOUT_CLASSIFICATION	5.0377793334295E-4	DESIGN
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9910759815180987	WITHOUT_CLASSIFICATION	0.008924018481901302	DESIGN
[jsd] the fix for hhh-558	WITHOUT_CLASSIFICATION	0.9693363391728874	WITHOUT_CLASSIFICATION	0.030663660827112575	DESIGN
if the token can tell us if it could be an identifier	WITHOUT_CLASSIFICATION	0.9850179928386877	WITHOUT_CLASSIFICATION	0.01498200716131224	DESIGN
and the expected token type was an identifier then	WITHOUT_CLASSIFICATION	0.999942213379796	WITHOUT_CLASSIFICATION	5.778662020397925E-5	DESIGN
use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999655744121289	WITHOUT_CLASSIFICATION	3.442558787114859E-5	DESIGN
add the token to the ast.	WITHOUT_CLASSIFICATION	0.9997847893768055	WITHOUT_CLASSIFICATION	2.152106231944879E-4	DESIGN
(not (eq a b) ) => (ne a b)	WITHOUT_CLASSIFICATION	0.9424681367078145	WITHOUT_CLASSIFICATION	0.057531863292185514	DESIGN
(not (ne a b) ) => (eq a b)	WITHOUT_CLASSIFICATION	0.9424681367078145	WITHOUT_CLASSIFICATION	0.057531863292185514	DESIGN
(not (lt a b) ) => (ge a b)	WITHOUT_CLASSIFICATION	0.9424681367078145	WITHOUT_CLASSIFICATION	0.057531863292185514	DESIGN
(not (ge a b) ) => (lt a b)	WITHOUT_CLASSIFICATION	0.9424681367078145	WITHOUT_CLASSIFICATION	0.057531863292185514	DESIGN
(not (le a b) ) => (gt a b)	WITHOUT_CLASSIFICATION	0.9424681367078145	WITHOUT_CLASSIFICATION	0.057531863292185514	DESIGN
(not (like a b) ) => (not_like a b)	WITHOUT_CLASSIFICATION	0.9623584211504032	WITHOUT_CLASSIFICATION	0.03764157884959683	DESIGN
(not (not_like a b) ) => (like a b)	WITHOUT_CLASSIFICATION	0.9623584211504032	WITHOUT_CLASSIFICATION	0.03764157884959683	DESIGN
(not (is_not_null a b) ) => (is_null a b)	WITHOUT_CLASSIFICATION	0.968638493452675	WITHOUT_CLASSIFICATION	0.031361506547324954	DESIGN
(not (between a b) ) => (not_between a b)	WITHOUT_CLASSIFICATION	0.968638493452675	WITHOUT_CLASSIFICATION	0.031361506547324954	DESIGN
initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9963284425379131	WITHOUT_CLASSIFICATION	0.003671557462087007	DESIGN
overriden to avoid system.exit	WITHOUT_CLASSIFICATION	0.9989093151061829	WITHOUT_CLASSIFICATION	0.001090684893817187	DESIGN
if if otherwise handle the error normally.	WITHOUT_CLASSIFICATION	0.9990810751204363	WITHOUT_CLASSIFICATION	9.189248795636348E-4	DESIGN
(not (not_between a b) ) => (between a b)	WITHOUT_CLASSIFICATION	0.968638493452675	WITHOUT_CLASSIFICATION	0.031361506547324954	DESIGN
this can never happen because this rule will always eliminate the child not.case notreturn x.getfirstchild() (not (not x) ) => (x)	WITHOUT_CLASSIFICATION	0.9992999829441478	WITHOUT_CLASSIFICATION	7.000170558521936E-4	DESIGN
just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9867290275873208	WITHOUT_CLASSIFICATION	0.013270972412679244	DESIGN
(eq null b) => (is_null b)	WITHOUT_CLASSIFICATION	0.999766533592226	WITHOUT_CLASSIFICATION	2.334664077740433E-4	DESIGN
(eq a null) => (is_null a)	WITHOUT_CLASSIFICATION	0.999723317068698	WITHOUT_CLASSIFICATION	2.766829313020319E-4	DESIGN
note because we're using astutil.createparent() the tree must be created from the bottom up. is empty x => (exists (query (select_from (from x) ) ) )	WITHOUT_CLASSIFICATION	0.9991712132681262	WITHOUT_CLASSIFICATION	8.287867318737604E-4	DESIGN
add not if it's negated.	WITHOUT_CLASSIFICATION	0.9979604648386883	WITHOUT_CLASSIFICATION	0.0020395351613117212	DESIGN
create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999933676355355	WITHOUT_CLASSIFICATION	6.632364464533799E-6	DESIGN
case 1 multi token keywords group by and order by the next token ( lt(2) ) should be 'by' otherwise this is just an ident.	WITHOUT_CLASSIFICATION	0.9522418612849406	WITHOUT_CLASSIFICATION	0.047758138715059496	DESIGN
case 2 the current token is after from and before '.'.	WITHOUT_CLASSIFICATION	0.9999759366197782	WITHOUT_CLASSIFICATION	2.4063380221696623E-5	DESIGN
this handles hhh-354 where there is a strange property name in a where clause. if the lookahead contains a dot then something that isn't an ident	WITHOUT_CLASSIFICATION	0.9997124368132441	WITHOUT_CLASSIFICATION	2.87563186756023E-4	DESIGN
see if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999491877541778	WITHOUT_CLASSIFICATION	5.081224582214316E-5	DESIGN
set it!	WITHOUT_CLASSIFICATION	0.9994547230410892	WITHOUT_CLASSIFICATION	5.452769589107729E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9998495801911499	WITHOUT_CLASSIFICATION	1.5041980885019973E-4	DESIGN
strip the " where "	WITHOUT_CLASSIFICATION	0.9999322350995232	WITHOUT_CLASSIFICATION	6.776490047682739E-5	DESIGN
don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9732368481291476	WITHOUT_CLASSIFICATION	0.02676315187085241	DESIGN
at the very least cleanup the data )	WITHOUT_CLASSIFICATION	0.9981908461127411	WITHOUT_CLASSIFICATION	0.0018091538872587866	DESIGN
first save off the pertinent ids as the return value	WITHOUT_CLASSIFICATION	0.9999852871328775	WITHOUT_CLASSIFICATION	1.471286712242379E-5	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999018037317167	WITHOUT_CLASSIFICATION	9.819626828321653E-5	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999018037317167	WITHOUT_CLASSIFICATION	9.819626828321653E-5	DESIGN
start performing the updates	WITHOUT_CLASSIFICATION	0.9998488242700005	WITHOUT_CLASSIFICATION	1.5117572999945084E-4	DESIGN
first save off the pertinent ids saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9998135231288163	WITHOUT_CLASSIFICATION	1.8647687118364463E-4	DESIGN
start performing the deletes	WITHOUT_CLASSIFICATION	0.9998025127530538	WITHOUT_CLASSIFICATION	1.9748724694618587E-4	DESIGN
otherwise everything ok.	WITHOUT_CLASSIFICATION	0.9994292197093423	WITHOUT_CLASSIFICATION	5.707802906576478E-4	DESIGN
visit width-first then depth	WITHOUT_CLASSIFICATION	0.9988298610940026	WITHOUT_CLASSIFICATION	0.001170138905997339	DESIGN
if the types report logical equivalence return true	WITHOUT_CLASSIFICATION	0.9988016868548292	WITHOUT_CLASSIFICATION	0.0011983131451708648	DESIGN
otherwise perform a "deep equivalence" check	WITHOUT_CLASSIFICATION	0.9922246407082711	WITHOUT_CLASSIFICATION	0.007775359291728849	DESIGN
if there is no where node make one.	WITHOUT_CLASSIFICATION	0.9999911491863825	WITHOUT_CLASSIFICATION	8.850813617469277E-6	DESIGN
inject the where after the parent	WITHOUT_CLASSIFICATION	0.9999209694888221	WITHOUT_CLASSIFICATION	7.90305111778235E-5	DESIGN
never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9998490277075642	WITHOUT_CLASSIFICATION	1.5097229243578428E-4	DESIGN
moved here from selectclause [jsd]	WITHOUT_CLASSIFICATION	0.9809617803303027	WITHOUT_CLASSIFICATION	0.019038219669697414	DESIGN
/	WITHOUT_CLASSIFICATION	0.9998776975752605	WITHOUT_CLASSIFICATION	1.2230242473959836E-4	DESIGN
use the table fromelement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9996306545338448	WITHOUT_CLASSIFICATION	3.6934546615513693E-4	DESIGN
set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9996194374021596	WITHOUT_CLASSIFICATION	3.805625978403739E-4	DESIGN
if the uresolved property path isn't set yet just use the property name.	WITHOUT_CLASSIFICATION	0.9994955104253906	WITHOUT_CLASSIFICATION	5.044895746093303E-4	DESIGN
the 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9997658565886086	WITHOUT_CLASSIFICATION	2.3414341139132774E-4	DESIGN
prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999978995298371	WITHOUT_CLASSIFICATION	2.100470162879012E-6	DESIGN
prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999978995298371	WITHOUT_CLASSIFICATION	2.100470162879012E-6	DESIGN
if this dot has already been resolved stop now.	WITHOUT_CLASSIFICATION	0.9963012106296893	WITHOUT_CLASSIFICATION	0.003698789370310709	DESIGN
if there is no data type for this node and we're at the end of the path (top most dot node) then this might be a java constant.	WITHOUT_CLASSIFICATION	0.9803022873392361	WITHOUT_CLASSIFICATION	0.019697712660763856	DESIGN
the property is a collection	WITHOUT_CLASSIFICATION	0.9937537131921311	WITHOUT_CLASSIFICATION	0.006246286807868943	DESIGN
the property is a component	WITHOUT_CLASSIFICATION	0.9990391297506205	WITHOUT_CLASSIFICATION	9.608702493795652E-4	DESIGN
the property is another class..	WITHOUT_CLASSIFICATION	0.9992827947346027	WITHOUT_CLASSIFICATION	7.172052653972488E-4	DESIGN
otherwise this is a primitive type.	WITHOUT_CLASSIFICATION	0.9930312573488734	WITHOUT_CLASSIFICATION	0.006968742651126532	DESIGN
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9993280382037686	WITHOUT_CLASSIFICATION	6.719617962313736E-4	DESIGN
this 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9984672856689049	WITHOUT_CLASSIFICATION	0.0015327143310951237	DESIGN
always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9997128536468233	WITHOUT_CLASSIFICATION	2.871463531767807E-4	DESIGN
in non-select queries the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999047205923821	WITHOUT_CLASSIFICATION	9.527940761784317E-5	DESIGN
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999522249707805	WITHOUT_CLASSIFICATION	4.7775029219427255E-5	DESIGN
this 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9984672856689049	WITHOUT_CLASSIFICATION	0.0015327143310951237	DESIGN
even though we might find a pre-existing element by join path we may not be able to reuse it	WITHOUT_CLASSIFICATION	0.9999926636156238	WITHOUT_CLASSIFICATION	7.336384376286778E-6	DESIGN
note addduplicatealias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9940607112265176	WITHOUT_CLASSIFICATION	0.005939288773482353	DESIGN
if the from-clauses are the same we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9434616659145882	WITHOUT_CLASSIFICATION	0.05653833408541172	DESIGN
again null != null here	WITHOUT_CLASSIFICATION	0.9996104186756385	WITHOUT_CLASSIFICATION	3.895813243614351E-4	DESIGN
if this is an implied join in a from element then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9992042067181248	WITHOUT_CLASSIFICATION	7.957932818753214E-4	DESIGN
otherwise (subquery case) dont reuse the fromelement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999813106173199	WITHOUT_CLASSIFICATION	1.8689382680171284E-5	DESIGN
we know only the lhs-hand type so use that	WITHOUT_CLASSIFICATION	0.999547965266285	WITHOUT_CLASSIFICATION	4.520347337151461E-4	DESIGN
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999973735599381	WITHOUT_CLASSIFICATION	2.6264400618745945E-6	DESIGN
only the identifier property field name can be a reference to the associated entity's pk	WITHOUT_CLASSIFICATION	0.9990376111852153	WITHOUT_CLASSIFICATION	9.623888147846568E-4	DESIGN
special shortcut for id properties skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9995586266289683	WITHOUT_CLASSIFICATION	4.4137337103169273E-4	DESIGN
append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9995357789162764	WITHOUT_CLASSIFICATION	4.642210837235676E-4	DESIGN
if the lhs is a collection use collectionpropertymapping	WITHOUT_CLASSIFICATION	0.9990977577555747	WITHOUT_CLASSIFICATION	9.022422444253442E-4	DESIGN
tell the destination fromelement to 'includesubclasses'.	WITHOUT_CLASSIFICATION	0.9998166745605122	WITHOUT_CLASSIFICATION	1.833254394878508E-4	DESIGN
use theta style (for regression) move the node up after the origin node.	WITHOUT_CLASSIFICATION	0.9814848749666429	WITHOUT_CLASSIFICATION	0.018515125033357022	DESIGN
don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9975907541890485	WITHOUT_CLASSIFICATION	0.0024092458109514327	DESIGN
for expected parameter type injection we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.999185124725643	WITHOUT_CLASSIFICATION	8.148752743569449E-4	DESIGN
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9998561296637327	WITHOUT_CLASSIFICATION	1.438703362672802E-4	DESIGN
we have something like "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9997316702771216	WITHOUT_CLASSIFICATION	2.6832972287830874E-4	DESIGN
we have something like "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9997316702771216	WITHOUT_CLASSIFICATION	2.6832972287830874E-4	DESIGN
we know only the rhs-hand type so use that	WITHOUT_CLASSIFICATION	0.999547965266285	WITHOUT_CLASSIFICATION	4.520347337151461E-4	DESIGN
handle the (assumed) valid cases #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9955212667865858	WITHOUT_CLASSIFICATION	0.0044787332134142354	DESIGN
one or the other needs to be a datetime for us to get into this method in the first place	WITHOUT_CLASSIFICATION	0.9541498130171457	WITHOUT_CLASSIFICATION	0.04585018698285415	DESIGN
#3 - note that this is also true of "datetime - param"	WITHOUT_CLASSIFICATION	0.9886889797025752	WITHOUT_CLASSIFICATION	0.011311020297424694	DESIGN
#2	WITHOUT_CLASSIFICATION	0.9995819226517293	WITHOUT_CLASSIFICATION	4.1807734827073727E-4	DESIGN
generate the inner join -- the elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9994488282446071	WITHOUT_CLASSIFICATION	5.511717553928789E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.999669270531388	WITHOUT_CLASSIFICATION	3.3072946861203794E-4	DESIGN
the 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999880243889422	WITHOUT_CLASSIFICATION	1.1975611057762424E-5	DESIGN
add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999929177012692	WITHOUT_CLASSIFICATION	7.08229873084404E-6	DESIGN
sometimes use the element table alias sometimes use the umm collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9996071697591066	WITHOUT_CLASSIFICATION	3.9283024089336905E-4	DESIGN
now set the text for this node. it should be the element columns.	WITHOUT_CLASSIFICATION	0.8681101974229611	WITHOUT_CLASSIFICATION	0.13188980257703883	DESIGN
get the function return value type based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999911937954246	WITHOUT_CLASSIFICATION	8.806204575399867E-6	DESIGN
this will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.999448772460248	WITHOUT_CLASSIFICATION	5.512275397520889E-4	DESIGN
mutation depends on the types of nodes invloved	WITHOUT_CLASSIFICATION	0.9987542072763045	WITHOUT_CLASSIFICATION	0.0012457927236954292	DESIGN
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding	WITHOUT_CLASSIFICATION	0.9350931507341985	WITHOUT_CLASSIFICATION	0.06490684926580145	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9996374884398824	WITHOUT_CLASSIFICATION	3.625115601176077E-4	DESIGN
generated select expressions are already resolved nothing to do.	WITHOUT_CLASSIFICATION	0.9842753528507641	WITHOUT_CLASSIFICATION	0.015724647149235937	DESIGN
the path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9998866174052848	WITHOUT_CLASSIFICATION	1.1338259471511956E-4	DESIGN
the hql class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999511359387306	WITHOUT_CLASSIFICATION	4.886406126933213E-5	DESIGN
associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9995942682053831	WITHOUT_CLASSIFICATION	4.057317946168971E-4	DESIGN
try the parent fromclause	WITHOUT_CLASSIFICATION	0.9995992216237174	WITHOUT_CLASSIFICATION	4.0077837628262725E-4	DESIGN
add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999022681426336	WITHOUT_CLASSIFICATION	9.773185736641197E-5	DESIGN
make sure that all from elements registered with this from clause are actually in the ast.	WITHOUT_CLASSIFICATION	0.999573755044246	WITHOUT_CLASSIFICATION	4.2624495575405185E-4	DESIGN
invoke setscalarcolumntext on each constructor argument.	WITHOUT_CLASSIFICATION	0.9998463148040501	WITHOUT_CLASSIFICATION	1.5368519594993713E-4	DESIGN
collect the select expressions skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999898848205343	WITHOUT_CLASSIFICATION	1.0115179465780758E-5	DESIGN
return an empty type array	WITHOUT_CLASSIFICATION	0.9982884316006436	WITHOUT_CLASSIFICATION	0.0017115683993564068	DESIGN
constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9959039382419808	WITHOUT_CLASSIFICATION	0.004096061758019258	DESIGN
this is the exception returned by reflecthelper.getconstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9997203774414382	WITHOUT_CLASSIFICATION	2.7962255856188017E-4	DESIGN
if there is no order by make one	WITHOUT_CLASSIFICATION	0.9999769182724187	WITHOUT_CLASSIFICATION	2.3081727581255825E-5	DESIGN
find the where if there is no where find the from	WITHOUT_CLASSIFICATION	0.9999907976007949	WITHOUT_CLASSIFICATION	9.202399205114423E-6	DESIGN
now inject the newly built order by into the tree	WITHOUT_CLASSIFICATION	0.9991844365679833	WITHOUT_CLASSIFICATION	8.155634320167523E-4	DESIGN
parametercontainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998979617863938	WITHOUT_CLASSIFICATION	1.0203821360618476E-4	DESIGN
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9997526584198626	WITHOUT_CLASSIFICATION	2.4734158013737785E-4	DESIGN
render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9943912782787315	WITHOUT_CLASSIFICATION	0.005608721721268396	DESIGN
class names in the from clause result in a joinsequence (the old fromparser does this).	WITHOUT_CLASSIFICATION	0.999972511784413	WITHOUT_CLASSIFICATION	2.7488215587027517E-5	DESIGN
for many-to-many joins use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9984298828600771	WITHOUT_CLASSIFICATION	0.0015701171399229177	DESIGN
otherwise use the property mapping.	WITHOUT_CLASSIFICATION	0.9991482352120586	WITHOUT_CLASSIFICATION	8.517647879413285E-4	DESIGN
should be safe to only ever expect entitypersister references here	WITHOUT_CLASSIFICATION	0.9978382275391156	WITHOUT_CLASSIFICATION	0.0021617724608844527	DESIGN
if the property is a special collection property name return a collectionpropertymapping.	WITHOUT_CLASSIFICATION	0.9993656612345744	WITHOUT_CLASSIFICATION	6.343387654254928E-4	DESIGN
collection of components.	WITHOUT_CLASSIFICATION	0.9990698325314279	WITHOUT_CLASSIFICATION	9.30167468572002E-4	DESIGN
make sure the lhs is "assignable"	WITHOUT_CLASSIFICATION	0.9998750257614208	WITHOUT_CLASSIFICATION	1.249742385791968E-4	DESIGN
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9984596242566828	WITHOUT_CLASSIFICATION	0.0015403757433171954	DESIGN
register the fromelement with the from clause now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9998775840606579	WITHOUT_CLASSIFICATION	1.2241593934211525E-4	DESIGN
currently allowed	WITHOUT_CLASSIFICATION	0.9995660478192722	WITHOUT_CLASSIFICATION	4.339521807279222E-4	DESIGN
hhh-276 implied joins in a subselect where clause - the destination needs to be added to the destination's from clause. not sure if this is will fix everything but it works.	WITHOUT_CLASSIFICATION	0.9687997874322699	WITHOUT_CLASSIFICATION	0.031200212567730198	DESIGN
return classalias == null ? classname classalias	WITHOUT_CLASSIFICATION	0.9982697445940942	WITHOUT_CLASSIFICATION	0.0017302554059058356	DESIGN
this is an explicit from element.	WITHOUT_CLASSIFICATION	0.9947886333953423	WITHOUT_CLASSIFICATION	0.005211366604657724	DESIGN
parametercontainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998979617863938	WITHOUT_CLASSIFICATION	1.0203821360618476E-4	DESIGN
fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.8746312285133008	WITHOUT_CLASSIFICATION	0.12536877148669917	DESIGN
if it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999986695178165	WITHOUT_CLASSIFICATION	1.3304821835305656E-6	DESIGN
since this is an explicit from element it can't be implied in the from clause.	WITHOUT_CLASSIFICATION	0.9997361342223826	WITHOUT_CLASSIFICATION	2.6386577761737637E-4	DESIGN
do nothing eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9996962099291161	WITHOUT_CLASSIFICATION	3.037900708838822E-4	DESIGN
propertyname refers to something like collection.size	WITHOUT_CLASSIFICATION	0.9992989541534069	WITHOUT_CLASSIFICATION	7.01045846593145E-4	DESIGN
property name is a sub-path of a component	WITHOUT_CLASSIFICATION	0.9990567913367105	WITHOUT_CLASSIFICATION	9.43208663289469E-4	DESIGN
always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9997128536468233	WITHOUT_CLASSIFICATION	2.871463531767807E-4	DESIGN
nothing to do even if the operand is a parameter no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.6448474483877941	DESIGN	0.3551525516122058	WITHOUT_CLASSIFICATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9996374884398824	WITHOUT_CLASSIFICATION	3.625115601176077E-4	DESIGN
dotnode uses null here	WITHOUT_CLASSIFICATION	0.9960544419515103	WITHOUT_CLASSIFICATION	0.003945558048489689	DESIGN
we represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9997721123668124	WITHOUT_CLASSIFICATION	2.2788763318760608E-4	DESIGN
we are the lhs of the dot representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9997981962690634	WITHOUT_CLASSIFICATION	2.0180373093656802E-4	DESIGN
we are the rhs of the dot representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999473397586688	WITHOUT_CLASSIFICATION	5.266024133120567E-4	DESIGN
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9980960572842987	WITHOUT_CLASSIFICATION	0.001903942715701185	DESIGN
early exit!!! return so the resolve call explicitly coming from dotnode can resolve this	WITHOUT_CLASSIFICATION	0.9909253371228582	WITHOUT_CLASSIFICATION	0.009074662877141681	DESIGN
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9866820977920386	WITHOUT_CLASSIFICATION	0.013317902207961292	DESIGN
just ignore it for now it'll get resolved later	WITHOUT_CLASSIFICATION	0.9964533083379039	WITHOUT_CLASSIFICATION	0.0035466916620959773	DESIGN
this is not actually a constant but a reference to from element.	WITHOUT_CLASSIFICATION	0.952659348948204	WITHOUT_CLASSIFICATION	0.047340651051796	DESIGN
check to see if our "proppath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9981089490252548	WITHOUT_CLASSIFICATION	0.0018910509747451208	DESIGN
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9997356719408139	WITHOUT_CLASSIFICATION	2.6432805918605084E-4	DESIGN
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.8930512753080756	WITHOUT_CLASSIFICATION	0.10694872469192435	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9877230766131097	WITHOUT_CLASSIFICATION	0.012276923386890431	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9877230766131097	WITHOUT_CLASSIFICATION	0.012276923386890431	DESIGN
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9665338047979491	WITHOUT_CLASSIFICATION	0.033466195202050894	DESIGN
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9968459007603325	WITHOUT_CLASSIFICATION	0.0031540992396673828	DESIGN
do not over-write the column text as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9995394564827993	WITHOUT_CLASSIFICATION	4.605435172007106E-4	DESIGN
for some reason the antlr.commonast initialization routines force this method to get called twice. the first time with an empty string	WITHOUT_CLASSIFICATION	0.9999469030637015	WITHOUT_CLASSIFICATION	5.3096936298401544E-5	DESIGN
look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999512048077349	WITHOUT_CLASSIFICATION	4.8795192265119735E-5	DESIGN
add to the query spaces.	WITHOUT_CLASSIFICATION	0.9997701199163	WITHOUT_CLASSIFICATION	2.2988008370001755E-4	DESIGN
if the from element isn't in the same clause create a new from element.	WITHOUT_CLASSIFICATION	0.9987083268757697	WITHOUT_CLASSIFICATION	0.0012916731242302846	DESIGN
this is the root level node. generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9966227306409434	WITHOUT_CLASSIFICATION	0.003377269359056503	DESIGN
correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ansi-style join	WITHOUT_CLASSIFICATION	0.9999882349250905	WITHOUT_CLASSIFICATION	1.1765074909559836E-5	DESIGN
super-duper-classic-parser-regression-testing-mojo-magic	WITHOUT_CLASSIFICATION	0.9995293047305601	WITHOUT_CLASSIFICATION	4.7069526943993654E-4	DESIGN
a collection of entities	WITHOUT_CLASSIFICATION	0.9935151773552143	WITHOUT_CLASSIFICATION	0.0064848226447856575	DESIGN
a collection of components	WITHOUT_CLASSIFICATION	0.9952928997729212	WITHOUT_CLASSIFICATION	0.004707100227078803	DESIGN
a collection of scalar elements	WITHOUT_CLASSIFICATION	0.9990368215022676	WITHOUT_CLASSIFICATION	9.631784977323777E-4	DESIGN
according to both the ansi-sql and ejb3 specs trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the sql spec <trim function> = trim <left paren> <trim operands> <right paren> <trim operands> = [ [ <trim specification> ] [ <trim character> ] from ] <trim source> <trim specification> = leading | trailing | both if only <trim specification> is omitted both is assumed if <trim character> is omitted space is assumed	WITHOUT_CLASSIFICATION	0.9999999998672663	WITHOUT_CLASSIFICATION	1.3273367896824482E-10	DESIGN
don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9995832601763978	WITHOUT_CLASSIFICATION	4.167398236022114E-4	DESIGN
treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.999305098687319	WITHOUT_CLASSIFICATION	6.949013126809493E-4	DESIGN
( implied && dotnode.usethetastyleimplicitjoins ) ) {	WITHOUT_CLASSIFICATION	0.9991677904747859	WITHOUT_CLASSIFICATION	8.322095252141568E-4	DESIGN
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.8818836330468465	WITHOUT_CLASSIFICATION	0.11811636695315354	DESIGN
create the from element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999957051816967	WITHOUT_CLASSIFICATION	4.294818303277703E-6	DESIGN
if the join is implied then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999704590456285	WITHOUT_CLASSIFICATION	2.954095437147648E-5	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992948788170259	WITHOUT_CLASSIFICATION	7.051211829741707E-4	DESIGN
the associated entity is implied but it must be included in the from. the collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999224665684298	WITHOUT_CLASSIFICATION	7.753343157028681E-5	DESIGN
tag this node as a join. don't include subclasses in the join. this is a clollection join.	WITHOUT_CLASSIFICATION	0.9998702989536055	WITHOUT_CLASSIFICATION	1.297010463945153E-4	DESIGN
get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.999862583871356	WITHOUT_CLASSIFICATION	1.3741612864407964E-4	DESIGN
origin path implied columns classalias	WITHOUT_CLASSIFICATION	0.99993710073336	WITHOUT_CLASSIFICATION	6.289926663999548E-5	DESIGN
implied	WITHOUT_CLASSIFICATION	0.9995175015233969	WITHOUT_CLASSIFICATION	4.824984766031364E-4	DESIGN
for implied many-to-many just add the end join.	WITHOUT_CLASSIFICATION	0.9998175627625916	WITHOUT_CLASSIFICATION	1.8243723740846198E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992948788170259	WITHOUT_CLASSIFICATION	7.051211829741707E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992948788170259	WITHOUT_CLASSIFICATION	7.051211829741707E-4	DESIGN
the standard sql function name is current_timestamp	WITHOUT_CLASSIFICATION	0.9999909401106594	WITHOUT_CLASSIFICATION	9.059889340645573E-6	DESIGN
this causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9423692279211179	WITHOUT_CLASSIFICATION	0.05763077207888208	DESIGN
private type[] sqlresulttypes	WITHOUT_CLASSIFICATION	0.9966709721314417	WITHOUT_CLASSIFICATION	0.003329027868558378	DESIGN
frontbase has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.999802448511168	WITHOUT_CLASSIFICATION	1.9755148883203943E-4	DESIGN
the types represented in the sql result set. @return the types represented in the sql result set.	WITHOUT_CLASSIFICATION	0.9998025294570904	WITHOUT_CLASSIFICATION	1.9747054290966226E-4	DESIGN
public type[] getsqlresulttypes() {return sqlresulttypes}	WITHOUT_CLASSIFICATION	0.9982556828655696	WITHOUT_CLASSIFICATION	0.0017443171344303295	DESIGN
first collect all of the select expressions. note this must be done before invoking setscalarcolumntext() because setscalarcolumntext() changes the ast!!!	WITHOUT_CLASSIFICATION	0.9966452685730588	WITHOUT_CLASSIFICATION	0.0033547314269411635	DESIGN
first allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9622016417560437	WITHOUT_CLASSIFICATION	0.0377983582439563	DESIGN
sqlresulttypelist.addall( constructorargumenttypelist )	WITHOUT_CLASSIFICATION	0.9991708054840631	WITHOUT_CLASSIFICATION	8.291945159369908E-4	DESIGN
if the data type is not an association type it could not have been in the from clause.	WITHOUT_CLASSIFICATION	0.9693774831515779	WITHOUT_CLASSIFICATION	0.030622516848422175	DESIGN
sqlresulttypelist.add( type )	WITHOUT_CLASSIFICATION	0.9964766528460939	WITHOUT_CLASSIFICATION	0.0035233471539062367	DESIGN
always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9985313372223239	WITHOUT_CLASSIFICATION	0.001468662777676128	DESIGN
add the fetched entities	WITHOUT_CLASSIFICATION	0.9995745642258809	WITHOUT_CLASSIFICATION	4.254357741191031E-4	DESIGN
get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9997602715834026	WITHOUT_CLASSIFICATION	2.39728416597374E-4	DESIGN
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997341509304614	WITHOUT_CLASSIFICATION	2.658490695385307E-4	DESIGN
if there are any scalars (non-entities) selected render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999976812085211	WITHOUT_CLASSIFICATION	2.318791479019253E-6	DESIGN
sqlresulttypelist	WITHOUT_CLASSIFICATION	0.9996084438916226	WITHOUT_CLASSIFICATION	3.915561083774067E-4	DESIGN
arraylist sqlresulttypelist	WITHOUT_CLASSIFICATION	0.9992014308396285	WITHOUT_CLASSIFICATION	7.985691603714433E-4	DESIGN
sqlresulttypes = ( type[] ) sqlresulttypelist.toarray( new type[sqlresulttypelist.size()] )	WITHOUT_CLASSIFICATION	0.9999277325583906	WITHOUT_CLASSIFICATION	7.226744160939836E-5	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998160318859706	WITHOUT_CLASSIFICATION	0.0018396811402940025	DESIGN
todo	WITHOUT_CLASSIFICATION	0.6829548036895678	WITHOUT_CLASSIFICATION	0.31704519631043215	DESIGN
add the type to the list of returned sqlresulttypes.	WITHOUT_CLASSIFICATION	0.999883229408182	WITHOUT_CLASSIFICATION	1.167705918180932E-4	DESIGN
generate an 2d array of column names the first dimension is parallel with the return types array. the second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999967495070965	WITHOUT_CLASSIFICATION	3.2504929036122827E-6	DESIGN
generate the select expression.	WITHOUT_CLASSIFICATION	0.9994547650335822	WITHOUT_CLASSIFICATION	5.452349664177153E-4	DESIGN
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9862983292995032	WITHOUT_CLASSIFICATION	0.013701670700496663	DESIGN
skip 'distinct' and 'all' so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999887812902177	WITHOUT_CLASSIFICATION	1.1218709782175803E-5	DESIGN
create sql_token nodes for the columns.	WITHOUT_CLASSIFICATION	0.9993474731360497	WITHOUT_CLASSIFICATION	6.52526863950292E-4	DESIGN
generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9992204194543856	WITHOUT_CLASSIFICATION	7.795805456143576E-4	DESIGN
get the function name node.	WITHOUT_CLASSIFICATION	0.999927856923025	WITHOUT_CLASSIFICATION	7.214307697500623E-5	DESIGN
method expressions in a select should always be considered scalar.	WITHOUT_CLASSIFICATION	0.6501327824501179	WITHOUT_CLASSIFICATION	0.3498672175498821	DESIGN
if this is 'elements' then create a new from element.	WITHOUT_CLASSIFICATION	0.9778484793548763	WITHOUT_CLASSIFICATION	0.022151520645123733	DESIGN
not elements(x)	WITHOUT_CLASSIFICATION	0.9985050911065335	WITHOUT_CLASSIFICATION	0.0014949088934665077	DESIGN
dialect function	WITHOUT_CLASSIFICATION	0.9997843111581936	WITHOUT_CLASSIFICATION	2.156888418063266E-4	DESIGN
collection 'property function'	WITHOUT_CLASSIFICATION	0.9970653414223469	WITHOUT_CLASSIFICATION	0.0029346585776531156	DESIGN
if the constant is an ident figure out what it means	WITHOUT_CLASSIFICATION	0.9997636772032846	WITHOUT_CLASSIFICATION	2.3632279671546359E-4	DESIGN
ident is a class alias in the from.	WITHOUT_CLASSIFICATION	0.9997344726926752	WITHOUT_CLASSIFICATION	2.655273073247548E-4	DESIGN
resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9523946592508302	WITHOUT_CLASSIFICATION	0.04760534074916986	DESIGN
otherwise it's a literal.	WITHOUT_CLASSIFICATION	0.9972244043164037	WITHOUT_CLASSIFICATION	0.002775595683596288	DESIGN
the name of an entity class	WITHOUT_CLASSIFICATION	0.999442804202384	WITHOUT_CLASSIFICATION	5.571957976159918E-4	DESIGN
the class discriminator value	WITHOUT_CLASSIFICATION	0.9996538256030227	WITHOUT_CLASSIFICATION	3.4617439697732664E-4	DESIGN
chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9994212816013953	WITHOUT_CLASSIFICATION	5.787183986045869E-4	DESIGN
add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999307721283595	WITHOUT_CLASSIFICATION	6.922787164055427E-5	DESIGN
find or create the where clause	WITHOUT_CLASSIFICATION	0.9999923372129963	WITHOUT_CLASSIFICATION	7.662787003697868E-6	DESIGN
child == parent.getfirstchild()	WITHOUT_CLASSIFICATION	0.9998722098463269	WITHOUT_CLASSIFICATION	1.2779015367305496E-4	DESIGN
find or create the where clause	WITHOUT_CLASSIFICATION	0.9999923372129963	WITHOUT_CLASSIFICATION	7.662787003697868E-6	DESIGN
filter conditions need to be inserted before the hql where condition and the theta join node. this is because org.hibernate.loader.loader binds the filter parameters first then it binds all the hql query parameters see org.hibernate.loader.loader.processfilterparameters().	WITHOUT_CLASSIFICATION	0.9999998506164554	WITHOUT_CLASSIFICATION	1.4938354470298178E-7	DESIGN
put the filters node before the hql condition and theta joins	WITHOUT_CLASSIFICATION	0.9999746160278805	WITHOUT_CLASSIFICATION	2.538397211950305E-5	DESIGN
add the current fragment to the filters node	WITHOUT_CLASSIFICATION	0.9984597178486011	WITHOUT_CLASSIFICATION	0.0015402821513988416	DESIGN
create a new theta_joins node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999910575404979	WITHOUT_CLASSIFICATION	8.942459502101816E-5	DESIGN
put the theta_joins node before the hql condition after the filters.	WITHOUT_CLASSIFICATION	0.9999738233066869	WITHOUT_CLASSIFICATION	2.6176693312973572E-5	DESIGN
add the current fragment to the theta_joins node	WITHOUT_CLASSIFICATION	0.9979384978509718	WITHOUT_CLASSIFICATION	0.002061502149028222	DESIGN
first try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999134677046991	WITHOUT_CLASSIFICATION	8.653229530086294E-5	DESIGN
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9984546896464391	WITHOUT_CLASSIFICATION	0.001545310353560906	DESIGN
if that didn't work try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9998938452725602	WITHOUT_CLASSIFICATION	1.0615472743975149E-4	DESIGN
implicit joins use theta style (where pk = fk) explicit joins use join (after from)	WITHOUT_CLASSIFICATION	0.9999759326610206	WITHOUT_CLASSIFICATION	2.406733897934621E-5	DESIGN
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999969866280894	WITHOUT_CLASSIFICATION	3.0133719104402617E-6	DESIGN
determine the type of the first argument	WITHOUT_CLASSIFICATION	0.9999767026975731	WITHOUT_CLASSIFICATION	2.3297302426888593E-5	DESIGN
use the dot node to emit the first column name. create the column names folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999838406942083	WITHOUT_CLASSIFICATION	1.6159305791683823E-5	DESIGN
note this simply constructs a "raw" sql_token representing the where fragment and injects this into the tree. this "works" however it is probably not the best long-term solution. at some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9998879147129007	DESIGN	1.1208528709924144E-4	WITHOUT_CLASSIFICATION
append the text of the current node.	WITHOUT_CLASSIFICATION	0.999985409923494	WITHOUT_CLASSIFICATION	1.4590076505992814E-5	DESIGN
if the node has a first child recurse into the first child.	WITHOUT_CLASSIFICATION	0.999951603214151	WITHOUT_CLASSIFICATION	4.839678584906494E-5	DESIGN
if there is a second child (rhs) recurse into that child.	WITHOUT_CLASSIFICATION	0.9993700858211961	WITHOUT_CLASSIFICATION	6.299141788038296E-4	DESIGN
iterate through the aliasjoinsequence pairs and generate sql token nodes.	WITHOUT_CLASSIFICATION	0.9993339709461438	WITHOUT_CLASSIFICATION	6.660290538561305E-4	DESIGN
if the from element represents a join_fragment and it is a theta-style join convert its type from join_fragment to from_fragment	WITHOUT_CLASSIFICATION	0.9999863700335077	WITHOUT_CLASSIFICATION	1.3629966492385524E-5	DESIGN
this is used during sqlgenerator processing	WITHOUT_CLASSIFICATION	0.7661532046764346	WITHOUT_CLASSIFICATION	0.23384679532356545	DESIGN
if there is a from fragment and the from element is an explicit then add the from part.	WITHOUT_CLASSIFICATION	0.9931687198069437	WITHOUT_CLASSIFICATION	0.00683128019305639	DESIGN
&& stringhelper.isnotempty( frag )	WITHOUT_CLASSIFICATION	0.9982385734174662	WITHOUT_CLASSIFICATION	0.001761426582533773	DESIGN
the from fragment will probably begin with ' '. remove this if it is present.	WITHOUT_CLASSIFICATION	0.5693472479000836	WITHOUT_CLASSIFICATION	0.43065275209991627	DESIGN
this uses a pathexpressionparser but notice that compound paths are not valid only bare names and simple paths	WITHOUT_CLASSIFICATION	0.9995289244180188	WITHOUT_CLASSIFICATION	4.71075581981181E-4	DESIGN
select p from p in class eg.person order by p.name p.address p	WITHOUT_CLASSIFICATION	0.9991712220627899	WITHOUT_CLASSIFICATION	8.287779372101421E-4	DESIGN
the reason for this is sql doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9996329346266699	WITHOUT_CLASSIFICATION	3.6706537333016574E-4	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9993812716776572	WITHOUT_CLASSIFICATION	6.187283223428767E-4	DESIGN
default mode	WITHOUT_CLASSIFICATION	0.999623533289571	WITHOUT_CLASSIFICATION	3.7646671042903813E-4	DESIGN
queryjoinfragment join = q.createjoinfragment(usethetastylejoin)	WITHOUT_CLASSIFICATION	0.9999885417412431	WITHOUT_CLASSIFICATION	1.1458258756990675E-5	DESIGN
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9994710592334953	WITHOUT_CLASSIFICATION	5.289407665046831E-4	DESIGN
after reset!	WITHOUT_CLASSIFICATION	0.999675798184505	WITHOUT_CLASSIFICATION	3.2420181549488325E-4	DESIGN
we don't need to worry about any condition in the on clause here (tofromfragmentstring) since anything in the on condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9995992077766475	WITHOUT_CLASSIFICATION	4.0079222335265784E-4	DESIGN
bit_length feels a bit broken to me. we have to cast to char in order to pass when a numeric value is supplied. but of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. jay nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9998083759850346	WITHOUT_CLASSIFICATION	1.916240149654108E-4	DESIGN
dotcount>=2	WITHOUT_CLASSIFICATION	0.9996084438916226	WITHOUT_CLASSIFICATION	3.915561083774067E-4	DESIGN
do the corresponding rhs	WITHOUT_CLASSIFICATION	0.9995513491017869	WITHOUT_CLASSIFICATION	4.4865089821311997E-4	DESIGN
if its "id"	WITHOUT_CLASSIFICATION	0.9999311362917055	WITHOUT_CLASSIFICATION	6.88637082945242E-5	DESIGN
or its the id property name	WITHOUT_CLASSIFICATION	0.999794682346893	WITHOUT_CLASSIFICATION	2.0531765310707447E-4	DESIGN
join = q.createjoinfragment(usethetastylejoin)	WITHOUT_CLASSIFICATION	0.9999885417412431	WITHOUT_CLASSIFICATION	1.1458258756990675E-5	DESIGN
important!!	WITHOUT_CLASSIFICATION	0.9996084438916226	WITHOUT_CLASSIFICATION	3.915561083774067E-4	DESIGN
string[] keycols = collpersister.getkeycolumnnames()	WITHOUT_CLASSIFICATION	0.9999069164680213	WITHOUT_CLASSIFICATION	9.308353197865568E-5	DESIGN
an association	WITHOUT_CLASSIFICATION	0.9997606571375112	WITHOUT_CLASSIFICATION	2.3934286248891042E-4	DESIGN
allow index() function	WITHOUT_CLASSIFICATION	0.9997107023906114	WITHOUT_CLASSIFICATION	2.892976093885378E-4	DESIGN
here assume sqlserver2005 using snapshot isolation which does not have this problem	WITHOUT_CLASSIFICATION	0.9942463255604055	WITHOUT_CLASSIFICATION	0.005753674439594534	DESIGN
the reason for this is sql doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9996329346266699	WITHOUT_CLASSIFICATION	3.6706537333016574E-4	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9996084438916226	WITHOUT_CLASSIFICATION	3.915561083774067E-4	DESIGN
collections of values	WITHOUT_CLASSIFICATION	0.9994904329830985	WITHOUT_CLASSIFICATION	5.095670169016121E-4	DESIGN
opening paren in new foo ( )	WITHOUT_CLASSIFICATION	0.9993093806423128	WITHOUT_CLASSIFICATION	6.906193576871786E-4	DESIGN
if we are inside a new result() but not inside a nested function	WITHOUT_CLASSIFICATION	0.999779319221953	WITHOUT_CLASSIFICATION	2.2068077804712711E-4	DESIGN
special case	WITHOUT_CLASSIFICATION	0.9997942097786572	WITHOUT_CLASSIFICATION	2.057902213428113E-4	DESIGN
the name of an sql function	WITHOUT_CLASSIFICATION	0.9999830040173487	WITHOUT_CLASSIFICATION	1.6995982651237028E-5	DESIGN
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.993984304055984	WITHOUT_CLASSIFICATION	0.006015695944015914	DESIGN
this is basically a copy/paste of orderbyparser might be worth refactoring	WITHOUT_CLASSIFICATION	0.8586919839971664	DESIGN	0.1413080160028336	WITHOUT_CLASSIFICATION
select p from p in class eg.person group by p.name p.address p	WITHOUT_CLASSIFICATION	0.9983030684989473	WITHOUT_CLASSIFICATION	0.0016969315010527096	DESIGN
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9985487191029689	WITHOUT_CLASSIFICATION	0.0014512808970310674	DESIGN
register collection role	WITHOUT_CLASSIFICATION	0.9876157094901757	WITHOUT_CLASSIFICATION	0.012384290509824149	DESIGN
the keyword used to specify an identity column if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9997804834396006	WITHOUT_CLASSIFICATION	2.195165603993961E-4	DESIGN
.getelementpropertymapping()	WITHOUT_CLASSIFICATION	0.9991129145727181	WITHOUT_CLASSIFICATION	8.870854272817789E-4	DESIGN
crossjoins.add(name)	WITHOUT_CLASSIFICATION	0.9996084438916226	WITHOUT_CLASSIFICATION	3.915561083774067E-4	DESIGN
ie no select clause in hql	WITHOUT_CLASSIFICATION	0.9997809672079817	WITHOUT_CLASSIFICATION	2.1903279201822162E-4	DESIGN
initialize the set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9992888841446954	WITHOUT_CLASSIFICATION	7.111158553044962E-4	DESIGN
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999307781562345	WITHOUT_CLASSIFICATION	6.922184376534861E-5	DESIGN
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9996138375284208	WITHOUT_CLASSIFICATION	3.8616247157914363E-4	DESIGN
return the concrete type or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9996544491627132	WITHOUT_CLASSIFICATION	3.455508372867295E-4	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9996084438916226	WITHOUT_CLASSIFICATION	3.915561083774067E-4	DESIGN
q.addcollection(collectionname collectionrole)	WITHOUT_CLASSIFICATION	0.9995293047305601	WITHOUT_CLASSIFICATION	4.7069526943993654E-4	DESIGN
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9770526869517873	WITHOUT_CLASSIFICATION	0.022947313048212764	DESIGN
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9993885127260962	WITHOUT_CLASSIFICATION	6.11487273903726E-4	DESIGN
unfortunately this stuff can't be cached because it is per-invocation not constant for the querytranslator instance	WITHOUT_CLASSIFICATION	0.9999211429760404	WITHOUT_CLASSIFICATION	7.885702395959914E-5	DESIGN
this is the legacy behaviour for hql queries	WITHOUT_CLASSIFICATION	0.9988928129736143	WITHOUT_CLASSIFICATION	0.0011071870263856436	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9982488497725313	WITHOUT_CLASSIFICATION	0.0017511502274687252	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9982488497725313	WITHOUT_CLASSIFICATION	0.0017511502274687252	DESIGN
we have the form trim(trimsource) so we trim leading and trailing spaces early exit!!!!	WITHOUT_CLASSIFICATION	0.9999265574382745	WITHOUT_CLASSIFICATION	7.344256172547643E-5	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9982488497725313	WITHOUT_CLASSIFICATION	0.0017511502274687252	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9982488497725313	WITHOUT_CLASSIFICATION	0.0017511502274687252	DESIGN
need this since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9994413723556492	WITHOUT_CLASSIFICATION	5.586276443506863E-4	DESIGN
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999956729083417	WITHOUT_CLASSIFICATION	4.327091658336698E-6	DESIGN
expressionterminators.add("") deliberately excluded	WITHOUT_CLASSIFICATION	0.9995925499548324	WITHOUT_CLASSIFICATION	4.074500451676604E-4	DESIGN
expressionopeners.add("") deliberately excluded	WITHOUT_CLASSIFICATION	0.9995925499548324	WITHOUT_CLASSIFICATION	4.074500451676604E-4	DESIGN
we have the form trim(from trimsource). this is functionally equivalent to trim(trimsource) early exit!!!!	WITHOUT_CLASSIFICATION	0.9980004725245859	WITHOUT_CLASSIFICATION	0.001999527475414194	DESIGN
otherwise a trim-specification and/or a trim-character have been specified we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.995821740992663	WITHOUT_CLASSIFICATION	0.004178259007337089	DESIGN
inside a between and expression	WITHOUT_CLASSIFICATION	0.9988152659888656	WITHOUT_CLASSIFICATION	0.0011847340111344128	DESIGN
were an odd or even number of nots encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999985120412493	WITHOUT_CLASSIFICATION	1.4879587507426468E-6	DESIGN
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.998863538319068	WITHOUT_CLASSIFICATION	0.001136461680931864	DESIGN
cope with []	WITHOUT_CLASSIFICATION	0.9983192196680372	WITHOUT_CLASSIFICATION	0.0016807803319628405	DESIGN
cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9996002170286267	WITHOUT_CLASSIFICATION	3.997829713733186E-4	DESIGN
note early return	WITHOUT_CLASSIFICATION	0.998949703025413	WITHOUT_CLASSIFICATION	0.001050296974587048	DESIGN
cope with a subselect	WITHOUT_CLASSIFICATION	0.9936646108585788	WITHOUT_CLASSIFICATION	0.00633538914142114	DESIGN
cope with special cases of and not ()	WITHOUT_CLASSIFICATION	0.9999918687408454	WITHOUT_CLASSIFICATION	8.131259154555704E-6	DESIGN
close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999894453897068	WITHOUT_CLASSIFICATION	1.0554610293064385E-5	DESIGN
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9877514758860004	WITHOUT_CLASSIFICATION	0.012248524113999664	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999826966348467	WITHOUT_CLASSIFICATION	1.7303365153340667E-5	DESIGN
process a token mapping oo path expressions to sql expressions	WITHOUT_CLASSIFICATION	0.999961624737654	WITHOUT_CLASSIFICATION	3.837526234597823E-5	DESIGN
open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9956736931160333	WITHOUT_CLASSIFICATION	0.0043263068839666735	DESIGN
cope with special cases of and not )	WITHOUT_CLASSIFICATION	0.9950256213659416	WITHOUT_CLASSIFICATION	0.00497437863405839	DESIGN
the next one up must also be	WITHOUT_CLASSIFICATION	0.9989911434757619	WITHOUT_CLASSIFICATION	0.001008856524238109	DESIGN
add any joins	WITHOUT_CLASSIFICATION	0.9994978793172457	WITHOUT_CLASSIFICATION	5.021206827543549E-4	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999826966348467	WITHOUT_CLASSIFICATION	1.7303365153340667E-5	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9993812716776572	WITHOUT_CLASSIFICATION	6.187283223428767E-4	DESIGN
path expression	WITHOUT_CLASSIFICATION	0.9999533600865975	WITHOUT_CLASSIFICATION	4.663991340260716E-5	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999503591978246	WITHOUT_CLASSIFICATION	4.964080217546857E-5	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996297846469459	WITHOUT_CLASSIFICATION	3.7021535305422276E-4	DESIGN
anything else	WITHOUT_CLASSIFICATION	0.9999442869871425	WITHOUT_CLASSIFICATION	5.571301285746916E-5	DESIGN
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999497979953447	WITHOUT_CLASSIFICATION	5.020200465540705E-5	DESIGN
careful with this!	WITHOUT_CLASSIFICATION	0.9989449385876775	WITHOUT_CLASSIFICATION	0.0010550614123224762	DESIGN
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9998837569677121	WITHOUT_CLASSIFICATION	1.1624303228774334E-4	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999754832319484	WITHOUT_CLASSIFICATION	2.4516768051562393E-5	DESIGN
notice no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999833516949068	WITHOUT_CLASSIFICATION	1.664830509314185E-5	DESIGN
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999168852031465	WITHOUT_CLASSIFICATION	8.311479685344933E-5	DESIGN
start by looking for hql keywords	WITHOUT_CLASSIFICATION	0.9998797623110973	WITHOUT_CLASSIFICATION	1.2023768890268743E-4	DESIGN
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9973298763790036	WITHOUT_CLASSIFICATION	0.002670123620996356	DESIGN
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9997178168647721	WITHOUT_CLASSIFICATION	2.8218313522790145E-4	DESIGN
now anything that is not a hql keyword	WITHOUT_CLASSIFICATION	0.9992253935733441	WITHOUT_CLASSIFICATION	7.746064266559135E-4	DESIGN
process the "old" hql style where aliases appear _first_ ie. using the in or in class constructions	WITHOUT_CLASSIFICATION	0.999976399941837	WITHOUT_CLASSIFICATION	2.3600058163106927E-5	DESIGN
treat it as a classname	WITHOUT_CLASSIFICATION	0.9990691061391469	WITHOUT_CLASSIFICATION	9.30893860853152E-4	DESIGN
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9998687283276865	WITHOUT_CLASSIFICATION	1.3127167231354056E-4	DESIGN
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9984531324161191	WITHOUT_CLASSIFICATION	0.0015468675838809455	DESIGN
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9997920483720387	WITHOUT_CLASSIFICATION	2.0795162796122228E-4	DESIGN
allow odmg oql style from person p p.cars c	WITHOUT_CLASSIFICATION	0.9997996398779525	WITHOUT_CLASSIFICATION	2.003601220475802E-4	DESIGN
handle quoted strings	WITHOUT_CLASSIFICATION	0.9959808091360998	WITHOUT_CLASSIFICATION	0.00401919086390022	DESIGN
object insertions updates and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999959307503099	WITHOUT_CLASSIFICATION	4.069249690131598E-6	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999754832319484	WITHOUT_CLASSIFICATION	2.4516768051562393E-5	DESIGN
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999232808684505	WITHOUT_CLASSIFICATION	7.671913154952908E-5	DESIGN
do replacements	WITHOUT_CLASSIFICATION	0.9992017915088406	WITHOUT_CLASSIFICATION	7.98208491159354E-4	DESIGN
handle hql2 collection syntax	WITHOUT_CLASSIFICATION	0.9946837327451101	WITHOUT_CLASSIFICATION	0.005316267254889916	DESIGN
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9975923137601168	WITHOUT_CLASSIFICATION	0.0024076862398831793	DESIGN
abstractselectingdelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998979617863938	WITHOUT_CLASSIFICATION	1.0203821360618476E-4	DESIGN
hilo params	WITHOUT_CLASSIFICATION	0.999641881742925	WITHOUT_CLASSIFICATION	3.58118257074999E-4	DESIGN
sql = query	WITHOUT_CLASSIFICATION	0.9999807247140411	WITHOUT_CLASSIFICATION	1.9275285958901457E-5	DESIGN
performance opt	WITHOUT_CLASSIFICATION	0.9989449917106177	WITHOUT_CLASSIFICATION	0.0010550082893823463	DESIGN
sql = update	WITHOUT_CLASSIFICATION	0.9999981804707706	WITHOUT_CLASSIFICATION	1.8195292293780576E-6	DESIGN
hilo config	WITHOUT_CLASSIFICATION	0.9997170661679812	WITHOUT_CLASSIFICATION	2.8293383201888225E-4	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999838569108317	WITHOUT_CLASSIFICATION	1.614308916823463E-5	DESIGN
don't allow comments on these insert statements as comments totally blow up the oracle getgeneratedkeys "support" (	WITHOUT_CLASSIFICATION	0.9999445516325004	WITHOUT_CLASSIFICATION	5.544836749967982E-5	DESIGN
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9982607150553672	WITHOUT_CLASSIFICATION	0.001739284944632879	DESIGN
throw new identifiergenerationexception("save associated object first or disable cascade for inverse association")	WITHOUT_CLASSIFICATION	0.9999802173725075	WITHOUT_CLASSIFICATION	1.978262749247024E-5	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9994214643638152	WITHOUT_CLASSIFICATION	5.785356361847798E-4	DESIGN
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9997132863563044	WITHOUT_CLASSIFICATION	2.867136436955584E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9997303770685633	WITHOUT_CLASSIFICATION	2.6962293143678996E-4	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999838569108317	WITHOUT_CLASSIFICATION	1.614308916823463E-5	DESIGN
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9981794767943625	WITHOUT_CLASSIFICATION	0.0018205232056374937	DESIGN
column and table should be renamed but it would break the public api	WITHOUT_CLASSIFICATION	0.9609925977023129	WITHOUT_CLASSIFICATION	0.039007402297687024	DESIGN
loaded entity instances by entitykey	WITHOUT_CLASSIFICATION	0.999945575239937	WITHOUT_CLASSIFICATION	5.4424760062946E-5	DESIGN
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9998125736140128	WITHOUT_CLASSIFICATION	1.8742638598726863E-4	DESIGN
the default	WITHOUT_CLASSIFICATION	0.9998999995040899	WITHOUT_CLASSIFICATION	1.000004959099598E-4	DESIGN
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence	WITHOUT_CLASSIFICATION	0.9993735320174534	WITHOUT_CLASSIFICATION	6.264679825465963E-4	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9994214643638152	WITHOUT_CLASSIFICATION	5.785356361847798E-4	DESIGN
identity map of collectionentry instances by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999665443930911	WITHOUT_CLASSIFICATION	3.345560690899912E-5	DESIGN
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999967467754726	WITHOUT_CLASSIFICATION	3.25322452739769E-5	DESIGN
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999626787850113	WITHOUT_CLASSIFICATION	3.7321214988667104E-5	DESIGN
configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999677960160522	WITHOUT_CLASSIFICATION	3.2203983947803454E-4	DESIGN
identifiergenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996645484726493	WITHOUT_CLASSIFICATION	3.354515273507576E-4	DESIGN
persistentidentifiergenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996645484726493	WITHOUT_CLASSIFICATION	3.354515273507576E-4	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9998887092913286	WITHOUT_CLASSIFICATION	1.1129070867135795E-4	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9998887092913286	WITHOUT_CLASSIFICATION	1.1129070867135795E-4	DESIGN
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9961183644249777	WITHOUT_CLASSIFICATION	0.0038816355750222425	DESIGN
we just hit the last position	WITHOUT_CLASSIFICATION	0.9988102264802894	WITHOUT_CLASSIFICATION	0.0011897735197106633	DESIGN
scroll ahead	WITHOUT_CLASSIFICATION	0.9972893233473432	WITHOUT_CLASSIFICATION	0.0027106766526567372	DESIGN
scroll backward	WITHOUT_CLASSIFICATION	0.9979732488214368	WITHOUT_CLASSIFICATION	0.002026751178563299	DESIGN
we have not yet hit the last result	WITHOUT_CLASSIFICATION	0.9999165002528756	WITHOUT_CLASSIFICATION	8.349974712432731E-5	DESIGN
constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988013943415965	WITHOUT_CLASSIFICATION	0.001198605658403373	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997921999894421	WITHOUT_CLASSIFICATION	2.0780001055791477E-4	DESIGN
criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999024738841696	WITHOUT_CLASSIFICATION	9.752611583036354E-5	DESIGN
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9990866793530911	WITHOUT_CLASSIFICATION	9.133206469088822E-4	DESIGN
inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995729412979555	WITHOUT_CLASSIFICATION	4.2705870204444056E-4	DESIGN
constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988013943415965	WITHOUT_CLASSIFICATION	0.001198605658403373	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997921999894421	WITHOUT_CLASSIFICATION	2.0780001055791477E-4	DESIGN
criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999024738841696	WITHOUT_CLASSIFICATION	9.752611583036354E-5	DESIGN
caches	WITHOUT_CLASSIFICATION	0.9996137742497657	WITHOUT_CLASSIFICATION	3.862257502342901E-4	DESIGN
generators	WITHOUT_CLASSIFICATION	0.9995412406281159	WITHOUT_CLASSIFICATION	4.587593718841749E-4	DESIGN
cache region is defined by the root-class in the hierarchy	WITHOUT_CLASSIFICATION	0.9999333167190249	WITHOUT_CLASSIFICATION	6.66832809751088E-5	DESIGN
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9998446503439223	WITHOUT_CLASSIFICATION	1.5534965607773057E-4	DESIGN
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9998489477939844	WITHOUT_CLASSIFICATION	1.5105220601558712E-4	DESIGN
if we get here it is possible that we have a proxy 'in the way' of the merge map resolution note decided to put this here rather than in the above loop as i was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.97285159131711	WITHOUT_CLASSIFICATION	0.02714840868289009	DESIGN
jndi + serialization	WITHOUT_CLASSIFICATION	0.9999257413698492	WITHOUT_CLASSIFICATION	7.425863015075512E-5	DESIGN
checking for named queries	WITHOUT_CLASSIFICATION	0.9988836250027239	WITHOUT_CLASSIFICATION	0.0011163749972761196	DESIGN
stats	WITHOUT_CLASSIFICATION	0.999564055461417	WITHOUT_CLASSIFICATION	4.3594453858295933E-4	DESIGN
entitynotfounddelegate	WITHOUT_CLASSIFICATION	0.9991129145727181	WITHOUT_CLASSIFICATION	8.870854272817789E-4	DESIGN
check named hql queries	WITHOUT_CLASSIFICATION	0.9982682846673846	WITHOUT_CLASSIFICATION	0.0017317153326155135	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.6673484236287307	WITHOUT_CLASSIFICATION	0.33265157637126935	DESIGN
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9927672502129764	WITHOUT_CLASSIFICATION	0.007232749787023558	DESIGN
from javax.naming.referenceable	WITHOUT_CLASSIFICATION	0.9992052822837543	WITHOUT_CLASSIFICATION	7.947177162457116E-4	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999388663847791	WITHOUT_CLASSIFICATION	6.113361522082377E-5	DESIGN
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9989834080328129	WITHOUT_CLASSIFICATION	0.0010165919671870278	DESIGN
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999778099990494	WITHOUT_CLASSIFICATION	2.2190000950594674E-5	DESIGN
note early exit	WITHOUT_CLASSIFICATION	0.9994077188457167	WITHOUT_CLASSIFICATION	5.922811542834421E-4	DESIGN
for backward-compatability	WITHOUT_CLASSIFICATION	0.9992065019103081	WITHOUT_CLASSIFICATION	7.934980896917717E-4	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9912221694806723	WITHOUT_CLASSIFICATION	0.008777830519327642	DESIGN
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9997123836159878	WITHOUT_CLASSIFICATION	2.8761638401222E-4	DESIGN
in case we were deserialized in a different jvm look for an instance with the same name (alternatively we could do an actual jndi lookup here.)	WITHOUT_CLASSIFICATION	0.8535440321861312	WITHOUT_CLASSIFICATION	0.14645596781386883	DESIGN
must add to jndi _after_ adding to hashmaps because some jndi servers use serialization	WITHOUT_CLASSIFICATION	0.9991844782890441	WITHOUT_CLASSIFICATION	8.155217109558448E-4	DESIGN
make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9582985084073544	WITHOUT_CLASSIFICATION	0.0417014915926455	DESIGN
for each of the defined parameters make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999950043984652	WITHOUT_CLASSIFICATION	4.995601534764784E-6	DESIGN
we never need to apply locks to the sql	WITHOUT_CLASSIFICATION	0.9985316661720574	WITHOUT_CLASSIFICATION	0.001468333827942564	DESIGN
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995571298609585	WITHOUT_CLASSIFICATION	4.4287013904154856E-4	DESIGN
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999649721561889	WITHOUT_CLASSIFICATION	3.5027843811105035E-4	DESIGN
during deserialization we need to reconnect all proxies and collections to this session as well as the entityentry and collectionentry instances these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.8464352413474443	WITHOUT_CLASSIFICATION	0.15356475865255564	DESIGN
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999731853589637	WITHOUT_CLASSIFICATION	2.681464103630634E-4	DESIGN
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999380881964507	WITHOUT_CLASSIFICATION	6.191180354932298E-5	DESIGN
final boolean forcecacherefresh	WITHOUT_CLASSIFICATION	0.9998622382559659	WITHOUT_CLASSIFICATION	1.37761744034164E-4	DESIGN
final boolean forcecacherefresh	WITHOUT_CLASSIFICATION	0.9998622382559659	WITHOUT_CLASSIFICATION	1.37761744034164E-4	DESIGN
first try to load it from the temp pc associated to this ss	WITHOUT_CLASSIFICATION	0.9998048837457398	WITHOUT_CLASSIFICATION	1.9511625426008524E-4	DESIGN
if the metadata allowed proxy creation and caller did not request forceful eager loading generate a proxy	WITHOUT_CLASSIFICATION	0.9999982979421358	WITHOUT_CLASSIFICATION	1.7020578642289014E-6	DESIGN
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999309578660776	WITHOUT_CLASSIFICATION	6.90421339224586E-5	DESIGN
/	WITHOUT_CLASSIFICATION	0.9998776975752605	WITHOUT_CLASSIFICATION	1.2230242473959836E-4	DESIGN
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9987390549589988	WITHOUT_CLASSIFICATION	0.0012609450410011663	DESIGN
after setting values to object entitymode	WITHOUT_CLASSIFICATION	0.9996856543098104	WITHOUT_CLASSIFICATION	3.143456901896375E-4	DESIGN
for ejb3	WITHOUT_CLASSIFICATION	0.9995896582104712	WITHOUT_CLASSIFICATION	4.1034178952887337E-4	DESIGN
just ignore	WITHOUT_CLASSIFICATION	0.9998070192976938	WITHOUT_CLASSIFICATION	1.9298070230615546E-4	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9908166005480247	WITHOUT_CLASSIFICATION	0.00918339945197533	DESIGN
saveorupdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998307174522753	WITHOUT_CLASSIFICATION	1.6928254772470067E-4	DESIGN
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999836120892717	WITHOUT_CLASSIFICATION	1.6387910728306E-4	DESIGN
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998307174522753	WITHOUT_CLASSIFICATION	1.6928254772470067E-4	DESIGN
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998307174522753	WITHOUT_CLASSIFICATION	1.6928254772470067E-4	DESIGN
persistonflush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998307174522753	WITHOUT_CLASSIFICATION	1.6928254772470067E-4	DESIGN
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998310692303202	WITHOUT_CLASSIFICATION	1.689307696797232E-4	DESIGN
saveorupdatecopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998307174522753	WITHOUT_CLASSIFICATION	1.6928254772470067E-4	DESIGN
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998109211565417	WITHOUT_CLASSIFICATION	1.890788434583021E-4	DESIGN
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998307174522753	WITHOUT_CLASSIFICATION	1.6928254772470067E-4	DESIGN
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998307174522753	WITHOUT_CLASSIFICATION	1.6928254772470067E-4	DESIGN
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998307174522753	WITHOUT_CLASSIFICATION	1.6928254772470067E-4	DESIGN
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9995671902565487	WITHOUT_CLASSIFICATION	4.328097434512718E-4	DESIGN
this is an internal error of some sort	WITHOUT_CLASSIFICATION	0.9917530157395832	WITHOUT_CLASSIFICATION	0.00824698426041683	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9821605270029237	WITHOUT_CLASSIFICATION	0.01783947299707635	DESIGN
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999788256541796	WITHOUT_CLASSIFICATION	2.1174345820445E-5	DESIGN
if it was previously unreferenced we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999498946597417	WITHOUT_CLASSIFICATION	5.010534025823396E-5	DESIGN
not for internal use	WITHOUT_CLASSIFICATION	0.9969322667329883	WITHOUT_CLASSIFICATION	0.00306773326701179	DESIGN
otherwise we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9984271313325415	WITHOUT_CLASSIFICATION	0.0015728686674585355	DESIGN
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.7817294061829907	WITHOUT_CLASSIFICATION	0.2182705938170094	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9821605270029237	WITHOUT_CLASSIFICATION	0.01783947299707635	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9821605270029237	WITHOUT_CLASSIFICATION	0.01783947299707635	DESIGN
if it is initialized see if the underlying instance is contained since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9881343724897561	WITHOUT_CLASSIFICATION	0.011865627510243877	DESIGN
basically just an adapted copy of find(criteriaimpl)	WITHOUT_CLASSIFICATION	0.9928655287482714	WITHOUT_CLASSIFICATION	0.007134471251728715	DESIGN
it is possible for this method to be called during flush processing so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9927882785286326	WITHOUT_CLASSIFICATION	0.007211721471367456	DESIGN
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9987197564385828	WITHOUT_CLASSIFICATION	0.0012802435614172618	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9998495801911499	WITHOUT_CLASSIFICATION	1.5041980885019973E-4	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9912221694806723	WITHOUT_CLASSIFICATION	0.008777830519327642	DESIGN
we need to writeobject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9992386229889637	WITHOUT_CLASSIFICATION	7.613770110362225E-4	DESIGN
the old-time stand-by	WITHOUT_CLASSIFICATION	0.9995503676555135	WITHOUT_CLASSIFICATION	4.4963234448640836E-4	DESIGN
parameter bind values	WITHOUT_CLASSIFICATION	0.9987327360829755	WITHOUT_CLASSIFICATION	0.0012672639170244508	DESIGN
parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9894771934095853	WITHOUT_CLASSIFICATION	0.01052280659041471	DESIGN
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9998296878203117	WITHOUT_CLASSIFICATION	1.7031217968831104E-4	DESIGN
execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986488515046589	WITHOUT_CLASSIFICATION	0.0013511484953410981	DESIGN
we have a cglib enhanced entity	WITHOUT_CLASSIFICATION	0.9995022012869326	WITHOUT_CLASSIFICATION	4.977987130673771E-4	DESIGN
we have a cglib enhanced entity	WITHOUT_CLASSIFICATION	0.9995022012869326	WITHOUT_CLASSIFICATION	4.977987130673771E-4	DESIGN
we have a javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9995022012869326	WITHOUT_CLASSIFICATION	4.977987130673771E-4	DESIGN
we have a javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9995022012869326	WITHOUT_CLASSIFICATION	4.977987130673771E-4	DESIGN
fieldinterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998979617863938	WITHOUT_CLASSIFICATION	1.0203821360618476E-4	DESIGN
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9971046038428542	WITHOUT_CLASSIFICATION	0.0028953961571458625	DESIGN
let's assume that there is only one lazy fetch group for now!	WITHOUT_CLASSIFICATION	0.9999986587895076	WITHOUT_CLASSIFICATION	1.341210492483372E-6	DESIGN
fieldhandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998979617863938	WITHOUT_CLASSIFICATION	1.0203821360618476E-4	DESIGN
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9180224914222959	WITHOUT_CLASSIFICATION	0.08197750857770407	DESIGN
should probably no-op commit/rollback here at least in jta scenarios	WITHOUT_CLASSIFICATION	0.8565257461228623	WITHOUT_CLASSIFICATION	0.14347425387713775	DESIGN
base expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997631396228573	WITHOUT_CLASSIFICATION	2.3686037714266915E-4	DESIGN
various expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999043068405358	WITHOUT_CLASSIFICATION	9.569315946416005E-5	DESIGN
explicitly perform no checking	WITHOUT_CLASSIFICATION	0.9878194045281382	WITHOUT_CLASSIFICATION	0.012180595471861757	DESIGN
used from testsuite	WITHOUT_CLASSIFICATION	0.9226984310696864	WITHOUT_CLASSIFICATION	0.0773015689303136	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999306509976166	WITHOUT_CLASSIFICATION	6.934900238345856E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9982030614286861	WITHOUT_CLASSIFICATION	0.0017969385713138724	DESIGN
register synch stats.connect()	WITHOUT_CLASSIFICATION	0.999142755665051	WITHOUT_CLASSIFICATION	8.572443349490601E-4	DESIGN
noncritical swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9986787551641005	WITHOUT_CLASSIFICATION	0.0013212448358994981	DESIGN
calls executebatch()	WITHOUT_CLASSIFICATION	0.998825814861775	WITHOUT_CLASSIFICATION	0.001174185138224984	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999792326587402	WITHOUT_CLASSIFICATION	2.076734125976741E-5	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999792326587402	WITHOUT_CLASSIFICATION	2.076734125976741E-5	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999792326587402	WITHOUT_CLASSIFICATION	2.076734125976741E-5	DESIGN
sybase driver (jconnect) throwing npe here in certain cases but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9997116661431	WITHOUT_CLASSIFICATION	2.8833385689998423E-4	DESIGN
see explanation above	WITHOUT_CLASSIFICATION	0.9996551874281208	WITHOUT_CLASSIFICATION	3.448125718792817E-4	DESIGN
if we are in the process of releasing no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9994800552906997	WITHOUT_CLASSIFICATION	5.199447093002549E-4	DESIGN
early exit!!!!	WITHOUT_CLASSIFICATION	0.9997471063360001	WITHOUT_CLASSIFICATION	2.528936640000225E-4	DESIGN
resultset impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999353152283932	WITHOUT_CLASSIFICATION	6.468477160686691E-5	DESIGN
resultset impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999353152283932	WITHOUT_CLASSIFICATION	6.468477160686691E-5	DESIGN
refer to comment in statefulpersistencecontext.addcollection()	WITHOUT_CLASSIFICATION	0.99994946485978	WITHOUT_CLASSIFICATION	5.053514021995764E-5	DESIGN
connectionmanager.callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996645484726493	WITHOUT_CLASSIFICATION	3.354515273507576E-4	DESIGN
note success = false because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999953615557976	WITHOUT_CLASSIFICATION	4.6384442024593735E-6	DESIGN
we already have a callback registered either a local (org.hibernate.transaction) transaction has accepted callback responsibilities or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999426910264798	WITHOUT_CLASSIFICATION	5.73089735203236E-5	DESIGN
the configured transaction-factory says it only supports local callback mode so no sense attempting to register a jta synchronization	WITHOUT_CLASSIFICATION	0.980930291318235	WITHOUT_CLASSIFICATION	0.01906970868176503	DESIGN
transactions marked for rollback-only cause some tm impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9962600083272699	WITHOUT_CLASSIFICATION	0.003739991672730084	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996371425125962	WITHOUT_CLASSIFICATION	3.6285748740386283E-4	DESIGN
postinitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999560114141769	WITHOUT_CLASSIFICATION	4.3988585823197494E-5	DESIGN
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9998591184246588	WITHOUT_CLASSIFICATION	1.408815753412592E-4	DESIGN
todo for 4.0 private static final logger log = loggerfactory.getlogger( sqlstatementlogger.class ) this is the legacy logging 'category'	WITHOUT_CLASSIFICATION	0.8868778479710056	WITHOUT_CLASSIFICATION	0.11312215202899445	DESIGN
note that for sequential scrolling we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.994559570142018	WITHOUT_CLASSIFICATION	0.005440429857982006	DESIGN
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9971231230966848	WITHOUT_CLASSIFICATION	0.002876876903315202	DESIGN
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9965902052198476	WITHOUT_CLASSIFICATION	0.0034097947801524082	DESIGN
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999294307295847	WITHOUT_CLASSIFICATION	7.05692704151722E-5	DESIGN
sequentially read the result set in reverse until we recognize a change in the key value. at that point we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999998665715735	WITHOUT_CLASSIFICATION	1.3342842649754533E-7	DESIGN
read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999775122237	WITHOUT_CLASSIFICATION	2.2487776295183548E-8	DESIGN
finally read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999998787549543	WITHOUT_CLASSIFICATION	1.2124504574749213E-7	DESIGN
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999939361407928	WITHOUT_CLASSIFICATION	6.063859207118388E-6	DESIGN
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9952272314432878	WITHOUT_CLASSIFICATION	0.00477276855671215	DESIGN
this is equivalent to the old behavior	WITHOUT_CLASSIFICATION	0.9996503792151157	WITHOUT_CLASSIFICATION	3.4962078488436413E-4	DESIGN
if null owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.999962639383816	WITHOUT_CLASSIFICATION	3.736061618393335E-5	DESIGN
final string querystring	WITHOUT_CLASSIFICATION	0.9998113017245982	WITHOUT_CLASSIFICATION	1.886982754017899E-4	DESIGN
if it was a reference to self don't need to nullify unless we are using native id generation in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9998388140632029	WITHOUT_CLASSIFICATION	1.6118593679724454E-4	DESIGN
end of array start filling again from start	WITHOUT_CLASSIFICATION	0.9999443851952992	WITHOUT_CLASSIFICATION	5.561480470091184E-5	DESIGN
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to persistentcollection#endread) we scan the internal loadingcollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endread processing.	WITHOUT_CLASSIFICATION	0.975078170546367	WITHOUT_CLASSIFICATION	0.024921829453632936	DESIGN
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999566195151498	WITHOUT_CLASSIFICATION	4.338048485025197E-5	DESIGN
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9985133577270443	WITHOUT_CLASSIFICATION	0.0014866422729557646	DESIGN
first we need to suspend any current jta transaction and obtain a jdbc connection	WITHOUT_CLASSIFICATION	0.9999516556293139	WITHOUT_CLASSIFICATION	4.8344370686027876E-5	DESIGN
getresultlist(results)	WITHOUT_CLASSIFICATION	0.9991129145727181	WITHOUT_CLASSIFICATION	8.870854272817789E-4	DESIGN
if we only returned one entity query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999340891598545	WITHOUT_CLASSIFICATION	6.591084014549758E-5	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9979988474692039	WITHOUT_CLASSIFICATION	0.0020011525307960867	DESIGN
handle empty collection	WITHOUT_CLASSIFICATION	0.9726937244020969	WITHOUT_CLASSIFICATION	0.027306275597903006	DESIGN
else no collection element but also no owner	WITHOUT_CLASSIFICATION	0.9999906706920256	WITHOUT_CLASSIFICATION	9.329307974414591E-6	DESIGN
handle empty collections	WITHOUT_CLASSIFICATION	0.9922053534565143	WITHOUT_CLASSIFICATION	0.007794646543485635	DESIGN
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9864909904297092	WITHOUT_CLASSIFICATION	0.013509009570290713	DESIGN
validate() instances of validatable	WITHOUT_CLASSIFICATION	0.9997417155135367	WITHOUT_CLASSIFICATION	2.5828448646319347E-4	DESIGN
if we know there is exactly 1 row we can skip. it would be great if we could _always_ skip this it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.6397286546573786	DESIGN	0.3602713453426214	WITHOUT_CLASSIFICATION
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9969275756184747	WITHOUT_CLASSIFICATION	0.0030724243815253897	DESIGN
null version means the object is in the process of being loaded somewhere else in the resultset	WITHOUT_CLASSIFICATION	0.999787083110946	WITHOUT_CLASSIFICATION	2.1291688905397796E-4	DESIGN
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9720429945750948	WITHOUT_CLASSIFICATION	0.027957005424905187	DESIGN
use the id passed in	WITHOUT_CLASSIFICATION	0.9995343039697365	WITHOUT_CLASSIFICATION	4.656960302634877E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9996426049261609	WITHOUT_CLASSIFICATION	3.573950738391012E-4	DESIGN
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9996021911493955	WITHOUT_CLASSIFICATION	3.9780885060451254E-4	DESIGN
no point doing this if none was requested	WITHOUT_CLASSIFICATION	0.9998717449610837	WITHOUT_CLASSIFICATION	1.2825503891640804E-4	DESIGN
if the object is already loaded return the loaded one	WITHOUT_CLASSIFICATION	0.9999458981035357	WITHOUT_CLASSIFICATION	5.410189646428537E-5	DESIGN
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9993718857145178	WITHOUT_CLASSIFICATION	6.281142854821965E-4	DESIGN
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9996112900134172	WITHOUT_CLASSIFICATION	3.887099865827501E-4	DESIGN
the load() which takes an entity does not pass an entityname	WITHOUT_CLASSIFICATION	0.999946205476639	WITHOUT_CLASSIFICATION	5.379452336100883E-5	DESIGN
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9987591735416459	WITHOUT_CLASSIFICATION	0.0012408264583540335	DESIGN
look for a proxy	WITHOUT_CLASSIFICATION	0.9996813334999088	WITHOUT_CLASSIFICATION	3.186665000911621E-4	DESIGN
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9994863394937772	WITHOUT_CLASSIFICATION	5.13660506222885E-4	DESIGN
its the given optional object	WITHOUT_CLASSIFICATION	0.9996694147075602	WITHOUT_CLASSIFICATION	3.305852924397773E-4	DESIGN
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9967978645958182	WITHOUT_CLASSIFICATION	0.003202135404181746	DESIGN
need to hydrate it.	WITHOUT_CLASSIFICATION	0.999375210543624	WITHOUT_CLASSIFICATION	6.247894563761195E-4	DESIGN
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9976366318612081	WITHOUT_CLASSIFICATION	0.002363368138791875	DESIGN
will be ignored using the existing entry instead	WITHOUT_CLASSIFICATION	0.9994933189572346	WITHOUT_CLASSIFICATION	5.066810427654476E-4	DESIGN
key is an entity involved with the operation performed by the listener value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.999999455557539	WITHOUT_CLASSIFICATION	5.444424610187133E-7	DESIGN
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9951123601417514	WITHOUT_CLASSIFICATION	0.004887639858248555	DESIGN
get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9993197597193139	WITHOUT_CLASSIFICATION	6.802402806861317E-4	DESIGN
ok in normal hibernate usage to delete a detached entity jpa however forbids it thus this is a hook for hem to affect this behavior	WITHOUT_CLASSIFICATION	0.9995714977214906	WITHOUT_CLASSIFICATION	4.285022785094083E-4	DESIGN
the entry will be removed after the flush and will no longer override the stale snapshot this is now handled by removeentity() in entitydeleteaction persistencecontext.removedatabasesnapshot(key)	WITHOUT_CLASSIFICATION	0.996517584325765	WITHOUT_CLASSIFICATION	0.003482415674234977	DESIGN
addinitializedcollection(collection persister id)	WITHOUT_CLASSIFICATION	0.9982238462540739	WITHOUT_CLASSIFICATION	0.0017761537459260158	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9997502095829368	WITHOUT_CLASSIFICATION	2.497904170631664E-4	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9997502095829368	WITHOUT_CLASSIFICATION	2.497904170631664E-4	DESIGN
|| oj.getjoinable().consumescollectionalias()	WITHOUT_CLASSIFICATION	0.9996338210657806	WITHOUT_CLASSIFICATION	3.6617893421940414E-4	DESIGN
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9184896149258559	WITHOUT_CLASSIFICATION	0.08151038507414406	DESIGN
code to handle subclasses of topclass	WITHOUT_CLASSIFICATION	0.995654030964932	WITHOUT_CLASSIFICATION	0.004345969035067983	DESIGN
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999600424347977	WITHOUT_CLASSIFICATION	3.995756520217369E-5	DESIGN
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999579883880619	WITHOUT_CLASSIFICATION	4.201161193810851E-5	DESIGN
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9916277565287087	WITHOUT_CLASSIFICATION	0.008372243471291195	DESIGN
synchronized to avoid multi-thread access issues defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999015395181752	WITHOUT_CLASSIFICATION	9.846048182479248E-5	DESIGN
allows various loaders (ok mainly the queryloader ) to check whether scrolling of their result set should be allowed. by default it is allowed.	WITHOUT_CLASSIFICATION	0.9994502582209767	WITHOUT_CLASSIFICATION	5.497417790232498E-4	DESIGN
before adding to collection!	WITHOUT_CLASSIFICATION	0.9994993792992392	WITHOUT_CLASSIFICATION	5.006207007608666E-4	DESIGN
if the current depth is 0 the root thing being loaded is the many-to-many collection itself. here it is alright to use an inner join	WITHOUT_CLASSIFICATION	0.9999330536330331	WITHOUT_CLASSIFICATION	6.694636696695627E-5	DESIGN
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999994688638381	WITHOUT_CLASSIFICATION	5.311361620452407E-7	DESIGN
simple because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element	WITHOUT_CLASSIFICATION	0.9999841499585871	WITHOUT_CLASSIFICATION	1.5850041412838347E-5	DESIGN
a composite key	WITHOUT_CLASSIFICATION	0.9994783031808993	WITHOUT_CLASSIFICATION	5.216968191007128E-4	DESIGN
if no batch use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9990697947223177	WITHOUT_CLASSIFICATION	9.302052776822495E-4	DESIGN
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9510935148556443	WITHOUT_CLASSIFICATION	0.04890648514435559	DESIGN
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9988875738538903	WITHOUT_CLASSIFICATION	0.0011124261461097375	DESIGN
&& etype.isreferencetoprimarykey()	WITHOUT_CLASSIFICATION	0.9989997163263257	WITHOUT_CLASSIFICATION	0.0010002836736743052	DESIGN
it might still need to apply a collection ordering based on a many-to-many defined order-by	WITHOUT_CLASSIFICATION	0.6407911595731163	WITHOUT_CLASSIFICATION	0.35920884042688367	DESIGN
if a composite key use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching todo unnecessary for databases with ansi-style joins	WITHOUT_CLASSIFICATION	0.511890776215832	WITHOUT_CLASSIFICATION	0.48810922378416804	DESIGN
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9945037397106067	WITHOUT_CLASSIFICATION	0.005496260289393328	DESIGN
we found it	WITHOUT_CLASSIFICATION	0.9996647059959421	WITHOUT_CLASSIFICATION	3.3529400405793767E-4	DESIGN
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9998783307383899	WITHOUT_CLASSIFICATION	1.2166926161010222E-4	DESIGN
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9981344350211995	WITHOUT_CLASSIFICATION	0.0018655649788006	DESIGN
note unlike all other loaders this one is not multithreaded or cacheable!!	WITHOUT_CLASSIFICATION	0.9890824353706553	WITHOUT_CLASSIFICATION	0.010917564629344737	DESIGN
the user visible aliases which are unknown to the superclass these are not the actual "physical" sql aliases	WITHOUT_CLASSIFICATION	0.9999971595433146	WITHOUT_CLASSIFICATION	2.8404566853533784E-6	DESIGN
root entity comes last	WITHOUT_CLASSIFICATION	0.9992991419963914	WITHOUT_CLASSIFICATION	7.008580036085658E-4	DESIGN
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999445227045157	WITHOUT_CLASSIFICATION	5.5477295484314186E-5	DESIGN
alias may be null early exit	WITHOUT_CLASSIFICATION	0.9997803788881183	WITHOUT_CLASSIFICATION	2.19621111881727E-4	DESIGN
if it is a compound path	WITHOUT_CLASSIFICATION	0.9994510872436897	WITHOUT_CLASSIFICATION	5.489127563102315E-4	DESIGN
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9998882815778254	WITHOUT_CLASSIFICATION	1.1171842217456223E-4	DESIGN
if its the root criteria we are done	WITHOUT_CLASSIFICATION	0.9999460261662397	WITHOUT_CLASSIFICATION	5.397383376019941E-5	DESIGN
otherwise recurse	WITHOUT_CLASSIFICATION	0.9994539946478657	WITHOUT_CLASSIFICATION	5.460053521343534E-4	DESIGN
the criteria instance	WITHOUT_CLASSIFICATION	0.9996809846705776	WITHOUT_CLASSIFICATION	3.1901532942241255E-4	DESIGN
the entity name	WITHOUT_CLASSIFICATION	0.9997527589878878	WITHOUT_CLASSIFICATION	2.472410121121617E-4	DESIGN
not found in inner query try the outer query	WITHOUT_CLASSIFICATION	0.999824507696937	WITHOUT_CLASSIFICATION	1.7549230306306265E-4	DESIGN
not found in inner query try the outer query	WITHOUT_CLASSIFICATION	0.999824507696937	WITHOUT_CLASSIFICATION	1.7549230306306265E-4	DESIGN
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999108069029665	WITHOUT_CLASSIFICATION	8.919309703353443E-5	DESIGN
should never happen i think	WITHOUT_CLASSIFICATION	0.9938143055362956	WITHOUT_CLASSIFICATION	0.006185694463704479	DESIGN
detect discriminator values	WITHOUT_CLASSIFICATION	0.9996315227577475	WITHOUT_CLASSIFICATION	3.6847724225258976E-4	DESIGN
convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9973715529467386	WITHOUT_CLASSIFICATION	0.0026284470532613423	DESIGN
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9992451483555066	WITHOUT_CLASSIFICATION	7.54851644493435E-4	DESIGN
it does not refer to an alias of a projection look for a property	WITHOUT_CLASSIFICATION	0.9995745263833219	WITHOUT_CLASSIFICATION	4.254736166780871E-4	DESIGN
otherwise this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9991049775397127	WITHOUT_CLASSIFICATION	8.950224602873004E-4	DESIGN
currently not cachable if autodiscover types is in effect (e.g. "select ")	WITHOUT_CLASSIFICATION	0.9978196393744534	WITHOUT_CLASSIFICATION	0.002180360625546508	DESIGN
private final string[] sqlaliases private final string[] sqlaliassuffixes	WITHOUT_CLASSIFICATION	0.9995322728420658	WITHOUT_CLASSIFICATION	4.677271579341358E-4	DESIGN
this is only needed (afaict) for resulttransformer processing	WITHOUT_CLASSIFICATION	0.9985243169290505	WITHOUT_CLASSIFICATION	0.0014756830709495227	DESIGN
determine if the collection elements are entities	WITHOUT_CLASSIFICATION	0.9999239344773523	WITHOUT_CLASSIFICATION	7.606552264773634E-5	DESIGN
build an array with indices equal to the total number of actual returns in the result hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999414759496407	WITHOUT_CLASSIFICATION	5.852405035934924E-5	DESIGN
replace {.} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9995587556304769	WITHOUT_CLASSIFICATION	4.41244369523024E-4	DESIGN
no additional open braces found in the string append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.999880320057819	WITHOUT_CLASSIFICATION	1.196799421809347E-4	DESIGN
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9996985119586239	WITHOUT_CLASSIFICATION	3.014880413761579E-4	DESIGN
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999858733667334	WITHOUT_CLASSIFICATION	1.4126633266555527E-5	DESIGN
passing through anything we do not know to support jdbc escape sequences hb-898	WITHOUT_CLASSIFICATION	0.9982933895556374	WITHOUT_CLASSIFICATION	0.0017066104443626748	DESIGN
passing through anything we do not know to support jdbc escape sequences hb-898	WITHOUT_CLASSIFICATION	0.9982933895556374	WITHOUT_CLASSIFICATION	0.0017066104443626748	DESIGN
the current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9998855640592756	WITHOUT_CLASSIFICATION	1.1443594072430366E-4	DESIGN
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9983295257890243	WITHOUT_CLASSIFICATION	0.0016704742109756993	DESIGN
possibly handle something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999534444056098	WITHOUT_CLASSIFICATION	4.655559439013546E-5	DESIGN
let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999534249245709	WITHOUT_CLASSIFICATION	4.657507542910565E-4	DESIGN
private final list persisters = new arraylist()	WITHOUT_CLASSIFICATION	0.9998193353444146	WITHOUT_CLASSIFICATION	1.80664655585318E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9982030614286861	WITHOUT_CLASSIFICATION	0.0017969385713138724	DESIGN
note early exit!	WITHOUT_CLASSIFICATION	0.9989079616933806	WITHOUT_CLASSIFICATION	0.0010920383066194582	DESIGN
private final list scalartypes = new arraylist() private final list scalarcolumnaliases = new arraylist()	WITHOUT_CLASSIFICATION	0.9999322583253405	WITHOUT_CLASSIFICATION	6.774167465956739E-5	DESIGN
now process the returns	WITHOUT_CLASSIFICATION	0.9998583960337157	WITHOUT_CLASSIFICATION	1.4160396628423822E-4	DESIGN
private list collectionowneraliases = new arraylist() private list collectionaliases = new arraylist() private list collectionpersisters = new arraylist() private list collectionresults = new arraylist()	WITHOUT_CLASSIFICATION	0.999813215687596	WITHOUT_CLASSIFICATION	1.8678431240408725E-4	DESIGN
already been processed	WITHOUT_CLASSIFICATION	0.9982302100909093	WITHOUT_CLASSIFICATION	0.0017697899090907173	DESIGN
already been processed	WITHOUT_CLASSIFICATION	0.9982302100909093	WITHOUT_CLASSIFICATION	0.0017697899090907173	DESIGN
make sure the owner alias is known	WITHOUT_CLASSIFICATION	0.9999948847395865	WITHOUT_CLASSIFICATION	5.115260413509405E-6	DESIGN
first break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9960950348184109	WITHOUT_CLASSIFICATION	0.003904965181589203	DESIGN
scalarcolumnaliases.add( typereturn.getcolumnalias() ) scalartypes.add( typereturn.gettype() )	WITHOUT_CLASSIFICATION	0.9991708054840631	WITHOUT_CLASSIFICATION	8.291945159369908E-4	DESIGN
if this return's alias has not been processed yet do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999428898803715	WITHOUT_CLASSIFICATION	5.711011962850545E-5	DESIGN
collectionowneraliases.add( owneralias )	WITHOUT_CLASSIFICATION	0.9991708054840631	WITHOUT_CLASSIFICATION	8.291945159369908E-4	DESIGN
for merging of versioned entities we consider the version having been changed only when 1) the two version values are different and 2) the target actually represents database state! this second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999817625049803	WITHOUT_CLASSIFICATION	1.8237495019673684E-5	DESIGN
this is the second pass through on a merge op so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.8459096288278406	WITHOUT_CLASSIFICATION	0.1540903711721594	DESIGN
early exit	WITHOUT_CLASSIFICATION	0.9998413250708412	WITHOUT_CLASSIFICATION	1.5867492915887495E-4	DESIGN
cascade-save to collections after the collection owner was saved	WITHOUT_CLASSIFICATION	0.9998874312095026	WITHOUT_CLASSIFICATION	1.1256879049737945E-4	DESIGN
initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9963284425379131	WITHOUT_CLASSIFICATION	0.003671557462087007	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9994114129740594	WITHOUT_CLASSIFICATION	5.885870259406835E-4	DESIGN
currently only the hibernate-supplied dbtimestamptype is supported here	WITHOUT_CLASSIFICATION	0.999237573835044	WITHOUT_CLASSIFICATION	7.624261649561452E-4	DESIGN
this is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.7824358978541618	WITHOUT_CLASSIFICATION	0.21756410214583832	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9986148968676646	WITHOUT_CLASSIFICATION	0.001385103132335474	DESIGN
not so sure this is even valid subtree. but if it was it'd represent two unrelated table references	WITHOUT_CLASSIFICATION	0.9998992733909687	WITHOUT_CLASSIFICATION	1.007266090312477E-4	DESIGN
(not (gt a b) ) => (le a b)	WITHOUT_CLASSIFICATION	0.9424681367078145	WITHOUT_CLASSIFICATION	0.057531863292185514	DESIGN
private type[] sqlresulttypes	WITHOUT_CLASSIFICATION	0.9966709721314417	WITHOUT_CLASSIFICATION	0.003329027868558378	DESIGN
include the discriminator and class-level where but not filters	WITHOUT_CLASSIFICATION	0.9999517433057571	WITHOUT_CLASSIFICATION	4.825669424299116E-5	DESIGN
sqlresulttypes = selectclause.getsqlresulttypes()	WITHOUT_CLASSIFICATION	0.9998722135249658	WITHOUT_CLASSIFICATION	1.2778647503407453E-4	DESIGN
by default	WITHOUT_CLASSIFICATION	0.9999115190156982	WITHOUT_CLASSIFICATION	8.848098430183414E-5	DESIGN
this is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9945126577352313	WITHOUT_CLASSIFICATION	0.005487342264768674	DESIGN
-- loader implementation --	WITHOUT_CLASSIFICATION	0.9992785023031528	WITHOUT_CLASSIFICATION	7.214976968472483E-4	DESIGN
-- loader overrides --	WITHOUT_CLASSIFICATION	0.999117923653065	WITHOUT_CLASSIFICATION	8.820763469349282E-4	DESIGN
(not (is_null a b) ) => (is_not_null a b)	WITHOUT_CLASSIFICATION	0.968638493452675	WITHOUT_CLASSIFICATION	0.031361506547324954	DESIGN
none because its the requested lock mode not the actual!	WITHOUT_CLASSIFICATION	0.999709110794186	WITHOUT_CLASSIFICATION	2.9088920581399336E-4	DESIGN
meant to handle dynamic instantiation queries	WITHOUT_CLASSIFICATION	0.9990125092072926	WITHOUT_CLASSIFICATION	9.874907927073949E-4	DESIGN
--- query translator methods ---	WITHOUT_CLASSIFICATION	0.9990761526007387	WITHOUT_CLASSIFICATION	9.238473992612754E-4	DESIGN
-- implementation private methods --	WITHOUT_CLASSIFICATION	0.9924424012135012	WITHOUT_CLASSIFICATION	0.00755759878649884	DESIGN
deduplicate unique constraints sharing the same columns this is needed by hibernate annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999968496595538	WITHOUT_CLASSIFICATION	3.150340446179728E-6	DESIGN
try to find out the name of the primary key to create it as identity if the identitygenerator is used	WITHOUT_CLASSIFICATION	0.9995598047921891	WITHOUT_CLASSIFICATION	4.4019520781087674E-4	DESIGN
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9970754876061106	WITHOUT_CLASSIFICATION	0.002924512393889236	DESIGN
prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999978995298371	WITHOUT_CLASSIFICATION	2.100470162879012E-6	DESIGN
used also for generation of fk names!	WITHOUT_CLASSIFICATION	0.8413561666452652	WITHOUT_CLASSIFICATION	0.15864383335473478	DESIGN
usually useless	WITHOUT_CLASSIFICATION	0.9991580746708577	WITHOUT_CLASSIFICATION	8.419253291422268E-4	DESIGN
added this caching as i noticed that gettype() is being called multiple times	WITHOUT_CLASSIFICATION	0.994173571055945	WITHOUT_CLASSIFICATION	0.00582642894405513	DESIGN
do not add unique constraint on db not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9967153720949149	WITHOUT_CLASSIFICATION	0.0032846279050851267	DESIGN
for backward compatibility disable this	WITHOUT_CLASSIFICATION	0.997500761461515	WITHOUT_CLASSIFICATION	0.0024992385384850087	DESIGN
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9992519874364344	WITHOUT_CLASSIFICATION	7.480125635656763E-4	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9993777236128291	WITHOUT_CLASSIFICATION	6.222763871708575E-4	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9993777236128291	WITHOUT_CLASSIFICATION	6.222763871708575E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999601751267025	WITHOUT_CLASSIFICATION	3.982487329744095E-5	DESIGN
primary key constraint	WITHOUT_CLASSIFICATION	0.9997396754996003	WITHOUT_CLASSIFICATION	2.603245003997228E-4	DESIGN
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9992955889531371	WITHOUT_CLASSIFICATION	7.044110468630229E-4	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9998348143295244	WITHOUT_CLASSIFICATION	1.651856704756345E-4	DESIGN
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9883196532450503	WITHOUT_CLASSIFICATION	0.011680346754949575	DESIGN
an identifier mapper => getkey will be included in the getnonduplicatedpropertyiterator() and checked later so it needs to be excluded	WITHOUT_CLASSIFICATION	0.999072651226508	WITHOUT_CLASSIFICATION	9.273487734918583E-4	DESIGN
if the hibernate-mapping did not specify a schema/catalog use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping or as params they will already be initialized and will override the values set here (they are in identifiergeneratorproperties)	WITHOUT_CLASSIFICATION	0.9983740564617334	WITHOUT_CLASSIFICATION	0.0016259435382666408	DESIGN
pass the entity-name if not a collection-id	WITHOUT_CLASSIFICATION	0.9998808144200096	WITHOUT_CLASSIFICATION	1.19185579990376E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999601751267025	WITHOUT_CLASSIFICATION	3.982487329744095E-5	DESIGN
primary key constraint	WITHOUT_CLASSIFICATION	0.9997396754996003	WITHOUT_CLASSIFICATION	2.603245003997228E-4	DESIGN
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9998276635255365	WITHOUT_CLASSIFICATION	1.7233647446344565E-4	DESIGN
needed to satisfy keyvalue	WITHOUT_CLASSIFICATION	0.999305351238383	WITHOUT_CLASSIFICATION	6.946487616168449E-4	DESIGN
empty means no scoping	WITHOUT_CLASSIFICATION	0.9992213703431714	WITHOUT_CLASSIFICATION	7.78629656828515E-4	DESIGN
index should be last column listed	WITHOUT_CLASSIFICATION	0.9994859750845851	WITHOUT_CLASSIFICATION	5.14024915414744E-4	DESIGN
if it is a formula index use the element columns in the pk	WITHOUT_CLASSIFICATION	0.9998905922551428	WITHOUT_CLASSIFICATION	1.0940774485716047E-4	DESIGN
don't create a unique key 'cos some databases don't like a uk on nullable columns	WITHOUT_CLASSIFICATION	0.9978915162750547	WITHOUT_CLASSIFICATION	0.0021084837249454092	DESIGN
arraylist list = new arraylist()list.addall( getkey().getconstraintcolumns() )list.addall( getindex().getconstraintcolumns() )getcollectiontable().createuniquekey(list)	WITHOUT_CLASSIFICATION	0.9999548151969241	WITHOUT_CLASSIFICATION	4.518480307592353E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.9994656916128727	WITHOUT_CLASSIFICATION	5.343083871273023E-4	DESIGN
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.999892754448998	WITHOUT_CLASSIFICATION	1.0724555100203402E-4	DESIGN
todo we could just return all false	WITHOUT_CLASSIFICATION	0.865217354300057	DESIGN	0.134782645699943	WITHOUT_CLASSIFICATION
the case of a foreign key to something other than the pk is handled in createpropertyrefconstraints	WITHOUT_CLASSIFICATION	0.9997287130056601	WITHOUT_CLASSIFICATION	2.712869943397953E-4	DESIGN
todo we could just return all false	WITHOUT_CLASSIFICATION	0.865217354300057	DESIGN	0.134782645699943	WITHOUT_CLASSIFICATION
if the property mapping consists of all formulas make it non-updateable	WITHOUT_CLASSIFICATION	0.9998722450054235	WITHOUT_CLASSIFICATION	1.2775499457652828E-4	DESIGN
columnupdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9996338210657806	WITHOUT_CLASSIFICATION	3.6617893421940414E-4	DESIGN
if the property mapping consists of all formulas make it insertable	WITHOUT_CLASSIFICATION	0.9998722450054235	WITHOUT_CLASSIFICATION	1.2775499457652828E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999835688742356	WITHOUT_CLASSIFICATION	1.6431125764409846E-4	DESIGN
expected type is intrinsic here	WITHOUT_CLASSIFICATION	0.9992395138811141	WITHOUT_CLASSIFICATION	7.604861188858947E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9994656916128727	WITHOUT_CLASSIFICATION	5.343083871273023E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9994656916128727	WITHOUT_CLASSIFICATION	5.343083871273023E-4	DESIGN
return memberpersister.getpropertytype(propertyname)	WITHOUT_CLASSIFICATION	0.9995528609094265	WITHOUT_CLASSIFICATION	4.47139090573512E-4	DESIGN
return memberpersister.tocolumns(alias propertyname)	WITHOUT_CLASSIFICATION	0.9995540496068306	WITHOUT_CLASSIFICATION	4.4595039316945936E-4	DESIGN
return memberpersister.gettype()	WITHOUT_CLASSIFICATION	0.9995528609094265	WITHOUT_CLASSIFICATION	4.47139090573512E-4	DESIGN
&& !indexisformula	WITHOUT_CLASSIFICATION	0.9991678223641884	WITHOUT_CLASSIFICATION	8.321776358114545E-4	DESIGN
return !isonetomany()	WITHOUT_CLASSIFICATION	0.9991572916351239	WITHOUT_CLASSIFICATION	8.42708364876234E-4	DESIGN
instanceof associationtype	WITHOUT_CLASSIFICATION	0.9962076051563712	WITHOUT_CLASSIFICATION	0.0037923948436287386	DESIGN
we need to determine the best way to know that two joinables represent a single many-to-many	WITHOUT_CLASSIFICATION	0.6094039952232657	WITHOUT_CLASSIFICATION	0.39059600477673423	DESIGN
strip leading ''	WITHOUT_CLASSIFICATION	0.9997811746855944	WITHOUT_CLASSIFICATION	2.18825314405636E-4	DESIGN
public boolean issubselectloadable()	WITHOUT_CLASSIFICATION	0.9985921637349985	WITHOUT_CLASSIFICATION	0.0014078362650014624	DESIGN
key	WITHOUT_CLASSIFICATION	0.9999013231431548	WITHOUT_CLASSIFICATION	9.867685684512391E-5	DESIGN
columns	WITHOUT_CLASSIFICATION	0.9998500368987577	WITHOUT_CLASSIFICATION	1.4996310124222505E-4	DESIGN
sql statements	WITHOUT_CLASSIFICATION	0.9998533869902579	WITHOUT_CLASSIFICATION	1.4661300974202273E-4	DESIGN
extra information about the element type	WITHOUT_CLASSIFICATION	0.9987180494922094	WITHOUT_CLASSIFICATION	0.00128195050779056	DESIGN
types	WITHOUT_CLASSIFICATION	0.999459558982394	WITHOUT_CLASSIFICATION	5.404410176059408E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999601751267025	WITHOUT_CLASSIFICATION	3.982487329744095E-5	DESIGN
private final string unquotedidentifiercolumnname	WITHOUT_CLASSIFICATION	0.9996230872118125	WITHOUT_CLASSIFICATION	3.7691278818749105E-4	DESIGN
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9990614903768322	WITHOUT_CLASSIFICATION	9.385096231678379E-4	DESIGN
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.999358555852366	WITHOUT_CLASSIFICATION	6.414441476340987E-4	DESIGN
nativesql collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999630016325649	WITHOUT_CLASSIFICATION	3.6998367435052274E-5	DESIGN
unquotedkeycolumnnames = stringhelper.unquote(keycolumnaliases)	WITHOUT_CLASSIFICATION	0.9998722135249658	WITHOUT_CLASSIFICATION	1.2778647503407453E-4	DESIGN
element	WITHOUT_CLASSIFICATION	0.9995618869152131	WITHOUT_CLASSIFICATION	4.3811308478697124E-4	DESIGN
nativesql collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.99983569694474	WITHOUT_CLASSIFICATION	1.6430305526011224E-4	DESIGN
index and row select	WITHOUT_CLASSIFICATION	0.999950143858338	WITHOUT_CLASSIFICATION	4.9856141661904055E-5	DESIGN
nativesql collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999386486848213	WITHOUT_CLASSIFICATION	6.135131517869975E-5	DESIGN
unquotedidentifiercolumnname = identifiercolumnalias	WITHOUT_CLASSIFICATION	0.9998722135249658	WITHOUT_CLASSIFICATION	1.2778647503407453E-4	DESIGN
unquotedidentifiercolumnname = null	WITHOUT_CLASSIFICATION	0.9998254474345125	WITHOUT_CLASSIFICATION	1.7455256548741844E-4	DESIGN
generate the sql	WITHOUT_CLASSIFICATION	0.9998614403296924	WITHOUT_CLASSIFICATION	1.3855967030758454E-4	DESIGN
for non-arrays we don't need to know the element class elementtype.returnedclass()	WITHOUT_CLASSIFICATION	0.994567062109371	WITHOUT_CLASSIFICATION	0.0054329378906290415	DESIGN
not all classpersisters implement propertymapping!	WITHOUT_CLASSIFICATION	0.9838767330705463	WITHOUT_CLASSIFICATION	0.01612326692945364	DESIGN
handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9635104995870586	WITHOUT_CLASSIFICATION	0.03648950041294136	DESIGN
handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9672369659006278	WITHOUT_CLASSIFICATION	0.032763034099372194	DESIGN
if there is a user-specified loader return that todo filters!?	WITHOUT_CLASSIFICATION	0.8077626734157506	WITHOUT_CLASSIFICATION	0.1922373265842494	DESIGN
take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9942819789519084	WITHOUT_CLASSIFICATION	0.005718021048091622	DESIGN
strip leading ''	WITHOUT_CLASSIFICATION	0.9997811746855944	WITHOUT_CLASSIFICATION	2.18825314405636E-4	DESIGN
run a subquery loader	WITHOUT_CLASSIFICATION	0.9955571876828339	WITHOUT_CLASSIFICATION	0.004442812317166152	DESIGN
needed by arrays	WITHOUT_CLASSIFICATION	0.9996631396852435	WITHOUT_CLASSIFICATION	3.3686031475663793E-4	DESIGN
todo something with formulas	WITHOUT_CLASSIFICATION	0.5156344361778191	WITHOUT_CLASSIFICATION	0.48436556382218104	DESIGN
an assertion	WITHOUT_CLASSIFICATION	0.9996466693436009	WITHOUT_CLASSIFICATION	3.533306563990372E-4	DESIGN
remove all the old entries	WITHOUT_CLASSIFICATION	0.9998690972576167	WITHOUT_CLASSIFICATION	1.309027423832048E-4	DESIGN
create all the new entries	WITHOUT_CLASSIFICATION	0.9998745737349132	WITHOUT_CLASSIFICATION	1.2542626508685892E-4	DESIGN
&& !indexisformula	WITHOUT_CLASSIFICATION	0.9991678223641884	WITHOUT_CLASSIFICATION	8.321776358114545E-4	DESIGN
&& !indexisformula	WITHOUT_CLASSIFICATION	0.9991678223641884	WITHOUT_CLASSIFICATION	8.321776358114545E-4	DESIGN
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999441537964213	WITHOUT_CLASSIFICATION	5.5846203578620135E-5	DESIGN
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999466507178473	WITHOUT_CLASSIFICATION	5.3349282152765216E-5	DESIGN
==elementtype ??	WITHOUT_CLASSIFICATION	0.9984906018088051	WITHOUT_CLASSIFICATION	0.0015093981911948092	DESIGN
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999996831296585	WITHOUT_CLASSIFICATION	3.1687034156152474E-7	DESIGN
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9990402691109755	WITHOUT_CLASSIFICATION	9.597308890244828E-4	DESIGN
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9998661261639596	WITHOUT_CLASSIFICATION	1.338738360403107E-4	DESIGN
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9386756481185826	WITHOUT_CLASSIFICATION	0.061324351881417424	DESIGN
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999969857501328	WITHOUT_CLASSIFICATION	3.014249867255896E-6	DESIGN
buf.append( selectfragment( lhsalias "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.99811590736481	WITHOUT_CLASSIFICATION	0.0018840926351899189	DESIGN
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9997828736704444	WITHOUT_CLASSIFICATION	2.1712632955565508E-4	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9994922216920481	WITHOUT_CLASSIFICATION	5.077783079518669E-4	DESIGN
private final string roottablename	WITHOUT_CLASSIFICATION	0.9996230872118125	WITHOUT_CLASSIFICATION	3.7691278818749105E-4	DESIGN
initialization	WITHOUT_CLASSIFICATION	0.9999411288125064	WITHOUT_CLASSIFICATION	5.88711874936282E-5	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999601751267025	WITHOUT_CLASSIFICATION	3.982487329744095E-5	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9994922216920481	WITHOUT_CLASSIFICATION	5.077783079518669E-4	DESIGN
execute the sql	WITHOUT_CLASSIFICATION	0.9999221513425456	WITHOUT_CLASSIFICATION	7.784865745437137E-5	DESIGN
this could also just be true all the time	WITHOUT_CLASSIFICATION	0.9879108145870533	WITHOUT_CLASSIFICATION	0.0120891854129467	DESIGN
chop the last union (all)	WITHOUT_CLASSIFICATION	0.999710470529994	WITHOUT_CLASSIFICATION	2.8952947000602717E-4	DESIGN
todo check this.	WITHOUT_CLASSIFICATION	0.7126513712778079	WITHOUT_CLASSIFICATION	0.2873486287221922	DESIGN
initialization	WITHOUT_CLASSIFICATION	0.9999411288125064	WITHOUT_CLASSIFICATION	5.88711874936282E-5	DESIGN
properties of this class including inherited properties	WITHOUT_CLASSIFICATION	0.9888715802430839	WITHOUT_CLASSIFICATION	0.011128419756916124	DESIGN
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9974501125983273	WITHOUT_CLASSIFICATION	0.0025498874016728124	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9811778693395165	WITHOUT_CLASSIFICATION	0.018822130660483594	DESIGN
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an sql case	WITHOUT_CLASSIFICATION	0.99999512699406	WITHOUT_CLASSIFICATION	4.873005940047017E-6	DESIGN
multitables	WITHOUT_CLASSIFICATION	0.9996084438916226	WITHOUT_CLASSIFICATION	3.915561083774067E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999601751267025	WITHOUT_CLASSIFICATION	3.982487329744095E-5	DESIGN
subclass closure properties	WITHOUT_CLASSIFICATION	0.9893390273952228	WITHOUT_CLASSIFICATION	0.010660972604777174	DESIGN
subclasses	WITHOUT_CLASSIFICATION	0.9995157699467285	WITHOUT_CLASSIFICATION	4.842300532714419E-4	DESIGN
( (column) model.gettable().getprimarykey().getcolumniterator().next() ).getname()	WITHOUT_CLASSIFICATION	0.9998472316089343	WITHOUT_CLASSIFICATION	1.52768391065749E-4	DESIGN
( (column) sc.gettable().getprimarykey().getcolumniterator().next() ).getname()	WITHOUT_CLASSIFICATION	0.9998472316089343	WITHOUT_CLASSIFICATION	1.52768391065749E-4	DESIGN
don't need subclass tables because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9686027788017669	WITHOUT_CLASSIFICATION	0.03139722119823296	DESIGN
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9983009801059163	WITHOUT_CLASSIFICATION	0.0016990198940837287	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9994922216920481	WITHOUT_CLASSIFICATION	5.077783079518669E-4	DESIGN
properties of this class including inherited properties	WITHOUT_CLASSIFICATION	0.9888715802430839	WITHOUT_CLASSIFICATION	0.011128419756916124	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9811778693395165	WITHOUT_CLASSIFICATION	0.018822130660483594	DESIGN
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9993755774357556	WITHOUT_CLASSIFICATION	6.244225642444244E-4	DESIGN
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9987063037527235	WITHOUT_CLASSIFICATION	0.0012936962472764456	DESIGN
discriminator column	WITHOUT_CLASSIFICATION	0.9998066861217437	WITHOUT_CLASSIFICATION	1.933138782561822E-4	DESIGN
initialization	WITHOUT_CLASSIFICATION	0.9999411288125064	WITHOUT_CLASSIFICATION	5.88711874936282E-5	DESIGN
private final map propertytablenumbersbyname = new hashmap()	WITHOUT_CLASSIFICATION	0.9998595794673637	WITHOUT_CLASSIFICATION	1.4042053263640735E-4	DESIGN
class + table	WITHOUT_CLASSIFICATION	0.9999180131677448	WITHOUT_CLASSIFICATION	8.198683225523486E-5	DESIGN
discriminator	WITHOUT_CLASSIFICATION	0.9996085855473755	WITHOUT_CLASSIFICATION	3.91414452624497E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.999204172717438	WITHOUT_CLASSIFICATION	7.958272825619886E-4	DESIGN
subclasses	WITHOUT_CLASSIFICATION	0.9995157699467285	WITHOUT_CLASSIFICATION	4.842300532714419E-4	DESIGN
execute the sql	WITHOUT_CLASSIFICATION	0.9999221513425456	WITHOUT_CLASSIFICATION	7.784865745437137E-5	DESIGN
joins	WITHOUT_CLASSIFICATION	0.9995464942194305	WITHOUT_CLASSIFICATION	4.535057805693748E-4	DESIGN
propertytablenumbersbyname.put( prop.getname() join )	WITHOUT_CLASSIFICATION	0.9999256009168278	WITHOUT_CLASSIFICATION	7.439908317221849E-5	DESIGN
access cached sql	WITHOUT_CLASSIFICATION	0.9998902761654377	WITHOUT_CLASSIFICATION	1.0972383456238618E-4	DESIGN
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9988918341946419	WITHOUT_CLASSIFICATION	0.0011081658053580816	DESIGN
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.999952792432031	WITHOUT_CLASSIFICATION	4.720756796910733E-5	DESIGN
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9998555544792688	WITHOUT_CLASSIFICATION	1.4444552073117093E-4	DESIGN
render the sql	WITHOUT_CLASSIFICATION	0.9997707836932916	WITHOUT_CLASSIFICATION	2.2921630670831147E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999835688742356	WITHOUT_CLASSIFICATION	1.6431125764409846E-4	DESIGN
moved up from abstractentitypersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9937556619033745	WITHOUT_CLASSIFICATION	0.006244338096625463	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995293047305601	WITHOUT_CLASSIFICATION	4.7069526943993654E-4	DESIGN
the optional sql string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999732604001342	WITHOUT_CLASSIFICATION	2.6739599865753857E-5	DESIGN
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9782768619236829	WITHOUT_CLASSIFICATION	0.021723138076317032	DESIGN
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9985368664130396	WITHOUT_CLASSIFICATION	0.0014631335869604249	DESIGN
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9991563292991259	WITHOUT_CLASSIFICATION	8.436707008739877E-4	DESIGN
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9997909073130126	WITHOUT_CLASSIFICATION	2.0909268698750225E-4	DESIGN
sql strings	WITHOUT_CLASSIFICATION	0.9997239755350961	WITHOUT_CLASSIFICATION	2.7602446490394714E-4	DESIGN
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999169608201025	WITHOUT_CLASSIFICATION	8.303917989747582E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.999204172717438	WITHOUT_CLASSIFICATION	7.958272825619886E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995293047305601	WITHOUT_CLASSIFICATION	4.7069526943993654E-4	DESIGN
identifier	WITHOUT_CLASSIFICATION	0.9995874305058591	WITHOUT_CLASSIFICATION	4.125694941408637E-4	DESIGN
version	WITHOUT_CLASSIFICATION	0.9987311393433825	WITHOUT_CLASSIFICATION	0.0012688606566174704	DESIGN
where string	WITHOUT_CLASSIFICATION	0.9999331867376741	WITHOUT_CLASSIFICATION	6.681326232590279E-5	DESIGN
subclass property closure	WITHOUT_CLASSIFICATION	0.9904566208647114	WITHOUT_CLASSIFICATION	0.009543379135288658	DESIGN
before add -)	WITHOUT_CLASSIFICATION	0.9998062606057703	WITHOUT_CLASSIFICATION	1.937393942298467E-4	DESIGN
handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9981524706837727	WITHOUT_CLASSIFICATION	0.0018475293162273866	DESIGN
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9998462771964524	WITHOUT_CLASSIFICATION	1.5372280354762537E-4	DESIGN
note early exit here	WITHOUT_CLASSIFICATION	0.9988696599511434	WITHOUT_CLASSIFICATION	0.001130340048856584	DESIGN
object have been loaded with setreadonly(true) hhh-2236	WITHOUT_CLASSIFICATION	0.9995674893952856	WITHOUT_CLASSIFICATION	4.325106047144081E-4	DESIGN
note this assumes something about how propertyselectfragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9990893088053878	WITHOUT_CLASSIFICATION	9.106911946121285E-4	DESIGN
strip leading " "	WITHOUT_CLASSIFICATION	0.9998197973356794	WITHOUT_CLASSIFICATION	1.8020266432055751E-4	DESIGN
if there is no resulting row return null	WITHOUT_CLASSIFICATION	0.9999783295968385	WITHOUT_CLASSIFICATION	2.1670403161449165E-5	DESIGN
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9997736420969084	WITHOUT_CLASSIFICATION	2.2635790309158643E-4	DESIGN
null owner ok??	WITHOUT_CLASSIFICATION	0.999903350672104	WITHOUT_CLASSIFICATION	9.664932789599096E-5	DESIGN
null sql means that the only lazy properties are shared pk one-to-one associations which are handled differently in the type#nullsafeget code	WITHOUT_CLASSIFICATION	0.9991242615296407	WITHOUT_CLASSIFICATION	8.757384703592484E-4	DESIGN
create a new from node for the referenced class.	WITHOUT_CLASSIFICATION	0.9995870535875304	WITHOUT_CLASSIFICATION	4.1294641246960337E-4	DESIGN
the difficulty here is exactly what do we update in order to force the version to be incremented in the db	WITHOUT_CLASSIFICATION	0.9552975477292528	WITHOUT_CLASSIFICATION	0.04470245227074711	DESIGN
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9986761144723928	WITHOUT_CLASSIFICATION	0.0013238855276071475	DESIGN
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9993436358411228	WITHOUT_CLASSIFICATION	6.56364158877184E-4	DESIGN
enable for hhh-440 which we don't like	WITHOUT_CLASSIFICATION	0.9994291353767094	WITHOUT_CLASSIFICATION	5.708646232905696E-4	DESIGN
aliases	WITHOUT_CLASSIFICATION	0.9996492115189137	WITHOUT_CLASSIFICATION	3.507884810863213E-4	DESIGN
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9998528850887656	WITHOUT_CLASSIFICATION	1.4711491123437965E-4	DESIGN
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9993932070983489	WITHOUT_CLASSIFICATION	6.067929016511441E-4	DESIGN
fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9981407501903883	WITHOUT_CLASSIFICATION	0.0018592498096116647	DESIGN
embedded composite ids ( alias.idname1 alias.idname2 )	WITHOUT_CLASSIFICATION	0.9979868571175305	WITHOUT_CLASSIFICATION	0.002013142882469533	DESIGN
todo skip formulas?	WITHOUT_CLASSIFICATION	0.7181612834757426	WITHOUT_CLASSIFICATION	0.28183871652425746	DESIGN
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9972947794099282	WITHOUT_CLASSIFICATION	0.0027052205900719687	DESIGN
do two passes for collection property-ref!	WITHOUT_CLASSIFICATION	0.9850825568586017	WITHOUT_CLASSIFICATION	0.014917443141398255	DESIGN
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999167062742416	WITHOUT_CLASSIFICATION	8.329372575844633E-5	DESIGN
todo eventually rowidname[j]	WITHOUT_CLASSIFICATION	0.7650206455841464	WITHOUT_CLASSIFICATION	0.2349793544158536	DESIGN
this is a property of the table which we are updating	WITHOUT_CLASSIFICATION	0.9986708492980153	WITHOUT_CLASSIFICATION	0.0013291507019846324	DESIGN
special shortcut for id properties skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9995586266289683	WITHOUT_CLASSIFICATION	4.4137337103169273E-4	DESIGN
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999454428929635	WITHOUT_CLASSIFICATION	5.45571070365291E-5	DESIGN
nothing to do even if the operand is a parameter no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.6448474483877941	DESIGN	0.3551525516122058	WITHOUT_CLASSIFICATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9847033638336263	WITHOUT_CLASSIFICATION	0.015296636166373709	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9982514333062007	WITHOUT_CLASSIFICATION	0.0017485666937992455	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.999508289513303	WITHOUT_CLASSIFICATION	4.917104866969296E-4	DESIGN
more specifically "? [op] datetime" 1) if the operator is minus the param needs to be of some datetime type 2) if the operator is plus the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9947203386008536	WITHOUT_CLASSIFICATION	0.005279661399146307	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9982514333062007	WITHOUT_CLASSIFICATION	0.0017485666937992455	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9847033638336263	WITHOUT_CLASSIFICATION	0.015296636166373709	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.999508289513303	WITHOUT_CLASSIFICATION	4.917104866969296E-4	DESIGN
add the primary key	WITHOUT_CLASSIFICATION	0.9998999562792181	WITHOUT_CLASSIFICATION	1.0004372078189457E-4	DESIGN
delegate already handles pk columns	WITHOUT_CLASSIFICATION	0.9996756209218864	WITHOUT_CLASSIFICATION	3.243790781135463E-4	DESIGN
we can't batch joined inserts especially not if it is an identity insert nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999919950993975	WITHOUT_CLASSIFICATION	8.004900602509404E-6	DESIGN
render the sql query	WITHOUT_CLASSIFICATION	0.9999012151849891	WITHOUT_CLASSIFICATION	9.878481501091041E-5	DESIGN
write the values of fields onto the prepared statement - we must use the state at the time the insert was issued (cos of foreign key constraints). not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999507975636955	WITHOUT_CLASSIFICATION	4.9202436304521565E-5	DESIGN
todo shouldnt inserts be expectations.none?	WITHOUT_CLASSIFICATION	0.5502753952696282	WITHOUT_CLASSIFICATION	0.44972460473037196	DESIGN
don't bother trying to update we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999303935217739	WITHOUT_CLASSIFICATION	6.960647822614188E-5	DESIGN
if all fields are null we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9991312653983632	WITHOUT_CLASSIFICATION	8.687346016367246E-4	DESIGN
there is probably a row there so try to update if no rows were updated we will find out	WITHOUT_CLASSIFICATION	0.99999776680999	WITHOUT_CLASSIFICATION	2.2331900099681355E-6	DESIGN
note updates to joined tables can't be batched	WITHOUT_CLASSIFICATION	0.9983827917114038	WITHOUT_CLASSIFICATION	0.0016172082885961769	DESIGN
starting index	WITHOUT_CLASSIFICATION	0.9998941489891292	WITHOUT_CLASSIFICATION	1.0585101087067578E-4	DESIGN
now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9997768240147377	WITHOUT_CLASSIFICATION	2.231759852622678E-4	DESIGN
write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9991911532388917	WITHOUT_CLASSIFICATION	8.088467611082599E-4	DESIGN
render the sql query	WITHOUT_CLASSIFICATION	0.9999012151849891	WITHOUT_CLASSIFICATION	9.878481501091041E-5	DESIGN
do the key. the key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9998544990566022	WITHOUT_CLASSIFICATION	1.4550094339792755E-4	DESIGN
we should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.997841266159762	WITHOUT_CLASSIFICATION	0.00215873384023799	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9895659281311758	WITHOUT_CLASSIFICATION	0.010434071868824106	DESIGN
note dirtyfields==null means we had no snapshot and we couldn't get one using select-before-update oldfields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyfields)	WITHOUT_CLASSIFICATION	0.8270426021608842	WITHOUT_CLASSIFICATION	0.17295739783911585	DESIGN
more specifically "datetime [op] ?" 1) if the operator is minus we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is plus the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.999893475677305	WITHOUT_CLASSIFICATION	1.065243226949966E-4	DESIGN
for the case of dynamic-update="true" we need to generate the update sql	WITHOUT_CLASSIFICATION	0.9999760132928194	WITHOUT_CLASSIFICATION	2.3986707180547605E-5	DESIGN
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9132536817132316	WITHOUT_CLASSIFICATION	0.08674631828676842	DESIGN
for the case of dynamic-update="false" or no snapshot we use the static sql	WITHOUT_CLASSIFICATION	0.9998992476052864	WITHOUT_CLASSIFICATION	1.0075239471359231E-4	DESIGN
if not "get" then try "is"	WITHOUT_CLASSIFICATION	0.99870405950205	WITHOUT_CLASSIFICATION	0.001295940497949952	DESIGN
now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.999917867206355	WITHOUT_CLASSIFICATION	8.213279364495263E-5	DESIGN
for the case of dynamic-insert="true" we need to generate the insert sql	WITHOUT_CLASSIFICATION	0.9996903810743566	WITHOUT_CLASSIFICATION	3.096189256433739E-4	DESIGN
for the case of dynamic-insert="true" we need to generate the insert sql	WITHOUT_CLASSIFICATION	0.9996903810743566	WITHOUT_CLASSIFICATION	3.096189256433739E-4	DESIGN
for the case of dynamic-insert="false" use the static sql	WITHOUT_CLASSIFICATION	0.999413286933628	WITHOUT_CLASSIFICATION	5.86713066371981E-4	DESIGN
for the case of dynamic-insert="false" use the static sql	WITHOUT_CLASSIFICATION	0.999413286933628	WITHOUT_CLASSIFICATION	5.86713066371981E-4	DESIGN
not supported	WITHOUT_CLASSIFICATION	0.9989302114118843	WITHOUT_CLASSIFICATION	0.0010697885881156503	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9895659281311758	WITHOUT_CLASSIFICATION	0.010434071868824106	DESIGN
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9977631548637668	WITHOUT_CLASSIFICATION	0.002236845136233207	DESIGN
otherwise utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9996654296984245	WITHOUT_CLASSIFICATION	3.345703015753959E-4	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.983352747456291	WITHOUT_CLASSIFICATION	0.016647252543709072	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.983352747456291	WITHOUT_CLASSIFICATION	0.016647252543709072	DESIGN
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999948445141241	WITHOUT_CLASSIFICATION	5.155485875853965E-6	DESIGN
notice that we skip the first table it is the driving table!	WITHOUT_CLASSIFICATION	0.9999525354925759	WITHOUT_CLASSIFICATION	4.746450742411567E-5	DESIGN
we can inner join to superclass tables (the row must be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9998370790172071	WITHOUT_CLASSIFICATION	1.6292098279287772E-4	DESIGN
skip the driving table	WITHOUT_CLASSIFICATION	0.9998053675361296	WITHOUT_CLASSIFICATION	1.9463246387032223E-4	DESIGN
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.7885600228293369	WITHOUT_CLASSIFICATION	0.21143997717066318	DESIGN
here we work under the following assumptions ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime always results in a double 3) datetime - {something other than datetime} always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999217671814	WITHOUT_CLASSIFICATION	7.823281864858183E-8	DESIGN
render the where and from parts	WITHOUT_CLASSIFICATION	0.9993851594805134	WITHOUT_CLASSIFICATION	6.148405194866789E-4	DESIGN
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.8656790200836816	WITHOUT_CLASSIFICATION	0.13432097991631836	DESIGN
now render the joins	WITHOUT_CLASSIFICATION	0.9995216562578836	WITHOUT_CLASSIFICATION	4.7834374211639687E-4	DESIGN
this will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9984721496925322	WITHOUT_CLASSIFICATION	0.001527850307467792	DESIGN
now render the select clause	WITHOUT_CLASSIFICATION	0.9996731775574426	WITHOUT_CLASSIFICATION	3.268224425574868E-4	DESIGN
now tie it all together	WITHOUT_CLASSIFICATION	0.9997224372584279	WITHOUT_CLASSIFICATION	2.7756274157213743E-4	DESIGN
insert/update/delete sql	WITHOUT_CLASSIFICATION	0.9996265352233283	WITHOUT_CLASSIFICATION	3.7346477667169484E-4	DESIGN
select sql	WITHOUT_CLASSIFICATION	0.9998320873625619	WITHOUT_CLASSIFICATION	1.6791263743804328E-4	DESIGN
no need to check laziness dirty checking handles that	WITHOUT_CLASSIFICATION	0.9815469960292987	WITHOUT_CLASSIFICATION	0.01845300397070129	DESIGN
fully resolve the map reference create implicit joins.	WITHOUT_CLASSIFICATION	0.9872577908144337	WITHOUT_CLASSIFICATION	0.012742209185566365	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9825169092131423	WITHOUT_CLASSIFICATION	0.017483090786857634	DESIGN
the basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9998634111648973	WITHOUT_CLASSIFICATION	1.3658883510265742E-4	DESIGN
for dialects which are known to not support ansi-sql row-value-constructor syntax we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9892782553493785	WITHOUT_CLASSIFICATION	0.01072174465062146	DESIGN
due to the complexity in initializing the selectclause do not generate one here. if it is not found simply return null also do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9838170506440747	WITHOUT_CLASSIFICATION	0.016182949355925416	DESIGN
check the version unsaved-value if appropriate	WITHOUT_CLASSIFICATION	0.9958608470191767	WITHOUT_CLASSIFICATION	0.0041391529808233515	DESIGN
let this take precedence if defined since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9993493379386024	WITHOUT_CLASSIFICATION	6.506620613976881E-4	DESIGN
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9976410124482601	WITHOUT_CLASSIFICATION	0.002358987551739845	DESIGN
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9995325882217108	WITHOUT_CLASSIFICATION	4.6741177828921865E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9998776975752605	WITHOUT_CLASSIFICATION	1.2230242473959836E-4	DESIGN
for property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9996017650046836	WITHOUT_CLASSIFICATION	3.9823499531647916E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995293047305601	WITHOUT_CLASSIFICATION	4.7069526943993654E-4	DESIGN
if there is no resulting row return null	WITHOUT_CLASSIFICATION	0.9999783295968385	WITHOUT_CLASSIFICATION	2.1670403161449165E-5	DESIGN
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999507794202891	WITHOUT_CLASSIFICATION	4.92205797108393E-5	DESIGN
if this from element is a collection and the path is a collection property (maxindex etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.990390143993521	WITHOUT_CLASSIFICATION	0.009609856006478986	DESIGN
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999551578486445	WITHOUT_CLASSIFICATION	4.4842151355492326E-4	DESIGN
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995633371797726	WITHOUT_CLASSIFICATION	4.3666282022741587E-4	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9999539914925278	WITHOUT_CLASSIFICATION	4.600850747211022E-5	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9999539914925278	WITHOUT_CLASSIFICATION	4.600850747211022E-5	DESIGN
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999988081663145	WITHOUT_CLASSIFICATION	1.1918336855533097E-6	DESIGN
try "get"	WITHOUT_CLASSIFICATION	0.9997043216409535	WITHOUT_CLASSIFICATION	2.9567835904655395E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9996426049261609	WITHOUT_CLASSIFICATION	3.573950738391012E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9996426049261609	WITHOUT_CLASSIFICATION	3.573950738391012E-4	DESIGN
should be safe to only ever expect entitypersister references here	WITHOUT_CLASSIFICATION	0.9978382275391156	WITHOUT_CLASSIFICATION	0.0021617724608844527	DESIGN
this page intentionally left blank )	WITHOUT_CLASSIFICATION	0.9991098346943861	WITHOUT_CLASSIFICATION	8.901653056139399E-4	DESIGN
do not do anything	WITHOUT_CLASSIFICATION	0.9986725653765757	WITHOUT_CLASSIFICATION	0.0013274346234242828	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9998495801911499	WITHOUT_CLASSIFICATION	1.5041980885019973E-4	DESIGN
cant instantiate	WITHOUT_CLASSIFICATION	0.9993357587981732	WITHOUT_CLASSIFICATION	6.642412018268855E-4	DESIGN
if it is a property of an embedded component invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9998963823172495	WITHOUT_CLASSIFICATION	1.0361768275040239E-4	DESIGN
otherwise	WITHOUT_CLASSIFICATION	0.9996758740153456	WITHOUT_CLASSIFICATION	3.241259846543237E-4	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9957872588325717	WITHOUT_CLASSIFICATION	0.004212741167428359	DESIGN
note interfaces is assumed to already contain hibernateproxy.class	WITHOUT_CLASSIFICATION	0.9970245363663314	WITHOUT_CLASSIFICATION	0.002975463633668553	DESIGN
note interfaces is assumed to already contain hibernateproxy.class	WITHOUT_CLASSIFICATION	0.9970245363663314	WITHOUT_CLASSIFICATION	0.002975463633668553	DESIGN
hhh-2481 make sure the callback gets cleared otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9915955136952834	WITHOUT_CLASSIFICATION	0.008404486304716527	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9997116398871032	WITHOUT_CLASSIFICATION	2.883601128967705E-4	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9997116398871032	WITHOUT_CLASSIFICATION	2.883601128967705E-4	DESIGN
note interface is assumed to already contain hibernateproxy.class	WITHOUT_CLASSIFICATION	0.9977442624837246	WITHOUT_CLASSIFICATION	0.002255737516275348	DESIGN
interfaces arguments	WITHOUT_CLASSIFICATION	0.9998160156007163	WITHOUT_CLASSIFICATION	1.8398439928375576E-4	DESIGN
todo!	WITHOUT_CLASSIFICATION	0.9995412406281159	WITHOUT_CLASSIFICATION	4.587593718841749E-4	DESIGN
get the caller	WITHOUT_CLASSIFICATION	0.9998722121494991	WITHOUT_CLASSIFICATION	1.277878505010546E-4	DESIGN
get the caller principals	WITHOUT_CLASSIFICATION	0.9997103949979106	WITHOUT_CLASSIFICATION	2.8960500208946794E-4	DESIGN
private static final alias default_alias = new alias(10 null)	WITHOUT_CLASSIFICATION	0.9999739576871691	WITHOUT_CLASSIFICATION	2.604231283090128E-5	DESIGN
needed to bump this up to dotnode because that is the only thing which currently knows about the property-ref path in the correct format it is either this or recurse over the dotnodes constructing the property path just like dotnode does internally	WITHOUT_CLASSIFICATION	0.9965177512705433	WITHOUT_CLASSIFICATION	0.0034822487294566573	DESIGN
if the identifier is quoted remove the quotes	WITHOUT_CLASSIFICATION	0.9993842485132386	WITHOUT_CLASSIFICATION	6.157514867613447E-4	DESIGN
truncate the identifier to the max alias length less the suffix length	WITHOUT_CLASSIFICATION	0.9999941652367845	WITHOUT_CLASSIFICATION	5.834763215452044E-6	DESIGN
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9963969551118254	WITHOUT_CLASSIFICATION	0.0036030448881746516	DESIGN
null is not considered the same type as integer. $non-nls-1 $non-nls-1	WITHOUT_CLASSIFICATION	0.997997648792488	WITHOUT_CLASSIFICATION	0.0020023512075121	DESIGN
the outerjoinsafterwhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999602969496337	WITHOUT_CLASSIFICATION	3.970305036623812E-5	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.9995512538509138	WITHOUT_CLASSIFICATION	4.4874614908614325E-4	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.9995512538509138	WITHOUT_CLASSIFICATION	4.4874614908614325E-4	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.9995512538509138	WITHOUT_CLASSIFICATION	4.4874614908614325E-4	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.9995512538509138	WITHOUT_CLASSIFICATION	4.4874614908614325E-4	DESIGN
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9996523730053032	WITHOUT_CLASSIFICATION	3.4762699469681626E-4	DESIGN
if the condition is not already there	WITHOUT_CLASSIFICATION	0.9998096386337492	WITHOUT_CLASSIFICATION	1.9036136625077377E-4	DESIGN
dontspace.add("'")	WITHOUT_CLASSIFICATION	0.9996084438916226	WITHOUT_CLASSIFICATION	3.915561083774067E-4	DESIGN
for mysql	WITHOUT_CLASSIFICATION	0.9997082007417252	WITHOUT_CLASSIFICATION	2.917992582748109E-4	DESIGN
hashmap columnsunique = new hashmap()	WITHOUT_CLASSIFICATION	0.9999562356436585	WITHOUT_CLASSIFICATION	4.3764356341345106E-5	DESIGN
null caused some problems	WITHOUT_CLASSIFICATION	0.9941179264006865	WITHOUT_CLASSIFICATION	0.005882073599313453	DESIGN
package	WITHOUT_CLASSIFICATION	0.9982030614286861	WITHOUT_CLASSIFICATION	0.0017969385713138724	DESIGN
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9996706846730626	WITHOUT_CLASSIFICATION	3.293153269373245E-4	DESIGN
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9990186970924548	WITHOUT_CLASSIFICATION	9.81302907545168E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9982030614286861	WITHOUT_CLASSIFICATION	0.0017969385713138724	DESIGN
package	WITHOUT_CLASSIFICATION	0.9982030614286861	WITHOUT_CLASSIFICATION	0.0017969385713138724	DESIGN
if true then execute db updates otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9989896915847843	WITHOUT_CLASSIFICATION	0.001010308415215659	DESIGN
we only release the connection	WITHOUT_CLASSIFICATION	0.9997525701845318	WITHOUT_CLASSIFICATION	2.4742981546819066E-4	DESIGN
deprecated option	WITHOUT_CLASSIFICATION	0.9994701395105615	WITHOUT_CLASSIFICATION	5.298604894385672E-4	DESIGN
if an exception occurs during flush user must call rollback()	WITHOUT_CLASSIFICATION	0.9999753188113342	WITHOUT_CLASSIFICATION	2.4681188665834244E-5	DESIGN
actually this last test is probably unnecessary since beforecompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999795748321557	WITHOUT_CLASSIFICATION	2.0425167844294146E-5	DESIGN
this one only really needed for badly-behaved applications! (if the transactionmanager has a sychronization registered its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9973394966227245	WITHOUT_CLASSIFICATION	0.002660503377275559	DESIGN
create an dotnode ast for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9997756260898032	WITHOUT_CLASSIFICATION	2.2437391019666816E-4	DESIGN
if an exception occurs during flush user must call rollback()	WITHOUT_CLASSIFICATION	0.9999753188113342	WITHOUT_CLASSIFICATION	2.4681188665834244E-5	DESIGN
if we could not register a synchronization do the before/after completion callbacks ourself (but we need to let jdbccontext know that this is what we are going to do so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9884440925506821	DESIGN	0.011555907449317808	WITHOUT_CLASSIFICATION
swallow it and continue to roll back jta transaction	WITHOUT_CLASSIFICATION	0.9998545218305878	WITHOUT_CLASSIFICATION	1.4547816941226616E-4	DESIGN
so the transaction is already rolled back by jta spec	WITHOUT_CLASSIFICATION	0.9999876383172581	WITHOUT_CLASSIFICATION	1.2361682741934063E-5	DESIGN
this method is a noop if there is a synchronization!	WITHOUT_CLASSIFICATION	0.9988121396432565	WITHOUT_CLASSIFICATION	0.00118786035674353	DESIGN
two conditions where we need to transform this to a theta-join syntax 1) 'elem' is the "root from-element" in correlated subqueries 2) the dotnode.usethetastyleimplicitjoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9998211398885845	WITHOUT_CLASSIFICATION	1.7886011141545356E-4	DESIGN
websphere however is not a sane jee/jta container	WITHOUT_CLASSIFICATION	0.9987690532015108	WITHOUT_CLASSIFICATION	0.0012309467984891872	DESIGN
for sane jee/jta containers the transaction itself functions as its identifier	WITHOUT_CLASSIFICATION	0.9999750629631867	WITHOUT_CLASSIFICATION	2.4937036813361328E-5	DESIGN
swallow the transaction was finished	WITHOUT_CLASSIFICATION	0.9999827494215928	WITHOUT_CLASSIFICATION	1.7250578407154965E-5	DESIGN
all aliastoentitymapresulttransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996749424793359	WITHOUT_CLASSIFICATION	3.2505752066413715E-4	DESIGN
create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9998340874950173	WITHOUT_CLASSIFICATION	1.6591250498265887E-4	DESIGN
all distinctrootentityresulttransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996749424793359	WITHOUT_CLASSIFICATION	3.2505752066413715E-4	DESIGN
map of entitymode -> tuplizer	WITHOUT_CLASSIFICATION	0.9999265976406231	WITHOUT_CLASSIFICATION	7.340235937692268E-5	DESIGN
this is a virtual id property	WITHOUT_CLASSIFICATION	0.9586308121788358	WITHOUT_CLASSIFICATION	0.04136918782116415	DESIGN
this one needed only for guessentitymode()	WITHOUT_CLASSIFICATION	0.9993103203594911	WITHOUT_CLASSIFICATION	6.89679640508861E-4	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9998972679895243	WITHOUT_CLASSIFICATION	1.0273201047566034E-4	DESIGN
todo move this to sf per hhh-3517 also see hhh-1907 and componentmetamodel	WITHOUT_CLASSIFICATION	0.9984838239708766	DESIGN	0.0015161760291232842	WITHOUT_CLASSIFICATION
then the pojo tuplizer using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999464682314829	WITHOUT_CLASSIFICATION	5.353176851715322E-5	DESIGN
build the dynamic-map tuplizer	WITHOUT_CLASSIFICATION	0.9993574956660726	WITHOUT_CLASSIFICATION	6.425043339273271E-4	DESIGN
then dom4j tuplizer if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9996732135725979	WITHOUT_CLASSIFICATION	3.267864274021329E-4	DESIGN
build the dynamic-map tuplizer	WITHOUT_CLASSIFICATION	0.9993574956660726	WITHOUT_CLASSIFICATION	6.425043339273271E-4	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9996199878952432	WITHOUT_CLASSIFICATION	3.800121047567653E-4	DESIGN
found a ctor but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999403760393073	WITHOUT_CLASSIFICATION	5.9623960692640526E-5	DESIGN
private final sessionfactoryimplementor sessionfactory	WITHOUT_CLASSIFICATION	0.9993579867912483	WITHOUT_CLASSIFICATION	6.420132087517354E-4	DESIGN
cached for efficiency	WITHOUT_CLASSIFICATION	0.9996636181840087	WITHOUT_CLASSIFICATION	3.363818159912592E-4	DESIGN
public componentmetamodel(component component sessionfactoryimplementor sessionfactory) {	WITHOUT_CLASSIFICATION	0.998775494030505	WITHOUT_CLASSIFICATION	0.0012245059694950176	DESIGN
this.sessionfactory = sessionfactory	WITHOUT_CLASSIFICATION	0.9998722135249658	WITHOUT_CLASSIFICATION	1.2778647503407453E-4	DESIGN
it was not embedded so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999291266598866	WITHOUT_CLASSIFICATION	7.087334011327897E-5	DESIGN
then the pojo tuplizer using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999464682314829	WITHOUT_CLASSIFICATION	5.353176851715322E-5	DESIGN
then dom4j tuplizer if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9996732135725979	WITHOUT_CLASSIFICATION	3.267864274021329E-4	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9996199878952432	WITHOUT_CLASSIFICATION	3.800121047567653E-4	DESIGN
then handle any user-defined entity modes	WITHOUT_CLASSIFICATION	0.9972540066991313	WITHOUT_CLASSIFICATION	0.002745993300868573	DESIGN
return currentid	WITHOUT_CLASSIFICATION	0.9996280409856718	WITHOUT_CLASSIFICATION	3.7195901432815693E-4	DESIGN
reset the id	WITHOUT_CLASSIFICATION	0.9996868280474235	WITHOUT_CLASSIFICATION	3.131719525765813E-4	DESIGN
origin.adddestination( destination ) this was the cause of hhh-242 origin.settype( from_fragment ) set the parent node type so that the ast is properly formed. the destination node will have all the from text. the parent node is a collection join too (voodoo - see joinprocessor)	WITHOUT_CLASSIFICATION	0.9995304812303133	WITHOUT_CLASSIFICATION	4.695187696867725E-4	DESIGN
reset the version	WITHOUT_CLASSIFICATION	0.9994381577553922	WITHOUT_CLASSIFICATION	5.618422446077332E-4	DESIGN
the default is to simply not lazy fetch properties for now	WITHOUT_CLASSIFICATION	0.9972890441106979	WITHOUT_CLASSIFICATION	0.0027109558893022097	DESIGN
add the second join the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.999982061066402	WITHOUT_CLASSIFICATION	1.7938933597988207E-5	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9825169092131423	WITHOUT_CLASSIFICATION	0.017483090786857634	DESIGN
found a ctor but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999403760393073	WITHOUT_CLASSIFICATION	5.9623960692640526E-5	DESIGN
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9998479389370086	WITHOUT_CLASSIFICATION	1.520610629912797E-4	DESIGN
return getfactory().getsettings().getbytecodeprovider().getproxyfactoryfactory().buildproxyfactory()	WITHOUT_CLASSIFICATION	0.9995528609094265	WITHOUT_CLASSIFICATION	4.47139090573512E-4	DESIGN
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999517526427928	WITHOUT_CLASSIFICATION	4.824735720722763E-5	DESIGN
superclass entity-name	WITHOUT_CLASSIFICATION	0.9998118947722409	WITHOUT_CLASSIFICATION	1.8810522775907447E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9825169092131423	WITHOUT_CLASSIFICATION	0.017483090786857634	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995293047305601	WITHOUT_CLASSIFICATION	4.7069526943993654E-4	DESIGN
init the aliases after initing the constructornode	WITHOUT_CLASSIFICATION	0.999890624982493	WITHOUT_CLASSIFICATION	1.0937501750694556E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9825169092131423	WITHOUT_CLASSIFICATION	0.017483090786857634	DESIGN
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9990526558809807	WITHOUT_CLASSIFICATION	9.473441190193253E-4	DESIGN
get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9997602715834026	WITHOUT_CLASSIFICATION	2.39728416597374E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995293047305601	WITHOUT_CLASSIFICATION	4.7069526943993654E-4	DESIGN
note this affects the return value!	WITHOUT_CLASSIFICATION	0.9974936530318881	WITHOUT_CLASSIFICATION	0.0025063469681119526	DESIGN
need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9997135660554364	WITHOUT_CLASSIFICATION	2.864339445636118E-4	DESIGN
add the type to the list of returned sqlresulttypes.	WITHOUT_CLASSIFICATION	0.999883229408182	WITHOUT_CLASSIFICATION	1.167705918180932E-4	DESIGN
collection types	WITHOUT_CLASSIFICATION	0.9984724967990541	WITHOUT_CLASSIFICATION	0.0015275032009459556	DESIGN
convenience methods relating to operations across arrays of types	WITHOUT_CLASSIFICATION	0.9995511432409994	WITHOUT_CLASSIFICATION	4.48856759000561E-4	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998169693038689	WITHOUT_CLASSIFICATION	1.8303069613108172E-4	DESIGN
blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9998966034863279	WITHOUT_CLASSIFICATION	1.0339651367202439E-4	DESIGN
value is the entity name	WITHOUT_CLASSIFICATION	0.9997927812546117	WITHOUT_CLASSIFICATION	2.0721874538839457E-4	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9997502095829368	WITHOUT_CLASSIFICATION	2.497904170631664E-4	DESIGN
generate id select fragment and then property select fragment for each expression just like generateselectfragments().	WITHOUT_CLASSIFICATION	0.9567444538064368	WITHOUT_CLASSIFICATION	0.04325554619356322	DESIGN
todo!	WITHOUT_CLASSIFICATION	0.9995412406281159	WITHOUT_CLASSIFICATION	4.587593718841749E-4	DESIGN
xml is the entity name	WITHOUT_CLASSIFICATION	0.9989025048096247	WITHOUT_CLASSIFICATION	0.0010974951903752717	DESIGN
special case this is the leaf of the containment graph even though not immutable	WITHOUT_CLASSIFICATION	0.9998017895045357	WITHOUT_CLASSIFICATION	1.982104954643417E-4	DESIGN
tolerates nulls	WITHOUT_CLASSIFICATION	0.9998032812735341	WITHOUT_CLASSIFICATION	1.9671872646577458E-4	DESIGN
sqlresulttypelist	WITHOUT_CLASSIFICATION	0.9996084438916226	WITHOUT_CLASSIFICATION	3.915561083774067E-4	DESIGN
metatype is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9986190699165989	WITHOUT_CLASSIFICATION	0.0013809300834011157	DESIGN
get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9992496600766533	WITHOUT_CLASSIFICATION	7.503399233466487E-4	DESIGN
look through the fromelement's children to find any collections of values that should be fetched	WITHOUT_CLASSIFICATION	0.9950316365521997	WITHOUT_CLASSIFICATION	0.004968363447800298	DESIGN
return associationtype.foreign_key_to_parent this is better but causes a transient object exception	WITHOUT_CLASSIFICATION	0.7263762254879533	WITHOUT_CLASSIFICATION	0.2736237745120466	DESIGN
use the lower case function name. remember whether we're in a select clause or not.	WITHOUT_CLASSIFICATION	0.9973724161348867	WITHOUT_CLASSIFICATION	0.0026275838651133097	DESIGN
ident might be the name of a class.	WITHOUT_CLASSIFICATION	0.9789447418712135	WITHOUT_CLASSIFICATION	0.021055258128786426	DESIGN
todo!!!	WITHOUT_CLASSIFICATION	0.9995412406281159	WITHOUT_CLASSIFICATION	4.587593718841749E-4	DESIGN
st.settimestamp( index new timestamp( cal.gettimeinmillis() ) cal ) jdk 1.5 only	WITHOUT_CLASSIFICATION	0.9996215076779813	WITHOUT_CLASSIFICATION	3.784923220186851E-4	DESIGN
st.setdate( index new date( cal.gettimeinmillis() ) cal ) jdk 1.5 only	WITHOUT_CLASSIFICATION	0.9996215076779813	WITHOUT_CLASSIFICATION	3.784923220186851E-4	DESIGN
both are timestamps	WITHOUT_CLASSIFICATION	0.9992090975441605	WITHOUT_CLASSIFICATION	7.909024558394737E-4	DESIGN
at least one is a plain old date	WITHOUT_CLASSIFICATION	0.9999386432456331	WITHOUT_CLASSIFICATION	6.135675436688921E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9996945845527261	WITHOUT_CLASSIFICATION	3.0541544727389985E-4	DESIGN
if the corresponding sql value is null the reader we got is null as well	WITHOUT_CLASSIFICATION	0.9999991354852616	WITHOUT_CLASSIFICATION	8.645147384241217E-7	DESIGN
fetch reader content up to the end - and put characters in a stringbuffer	WITHOUT_CLASSIFICATION	0.9991914583489705	WITHOUT_CLASSIFICATION	8.085416510296237E-4	DESIGN
return stringbuffer content as a large string	WITHOUT_CLASSIFICATION	0.9999766803853073	WITHOUT_CLASSIFICATION	2.331961469265335E-5	DESIGN
or types.longvarchar?	WITHOUT_CLASSIFICATION	0.9997208249097566	WITHOUT_CLASSIFICATION	2.7917509024346987E-4	DESIGN
not called at runtime so doesn't matter if its slow )	WITHOUT_CLASSIFICATION	0.9995994106448038	WITHOUT_CLASSIFICATION	4.0058935519614444E-4	DESIGN
todo	WITHOUT_CLASSIFICATION	0.6829548036895678	WITHOUT_CLASSIFICATION	0.31704519631043215	DESIGN
chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9994212816013953	WITHOUT_CLASSIFICATION	5.787183986045869E-4	DESIGN
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.999143998250286	WITHOUT_CLASSIFICATION	8.560017497140339E-4	DESIGN
cache this	WITHOUT_CLASSIFICATION	0.9958351743421279	WITHOUT_CLASSIFICATION	0.004164825657872194	DESIGN
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9992650427991603	WITHOUT_CLASSIFICATION	7.34957200839609E-4	DESIGN
forcefully remove leading ands from where fragments the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.999475264260822	WITHOUT_CLASSIFICATION	5.247357391779985E-4	DESIGN
todo!!!!!!!	WITHOUT_CLASSIFICATION	0.9996084438916226	WITHOUT_CLASSIFICATION	3.915561083774067E-4	DESIGN
create a new filters node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999910575404979	WITHOUT_CLASSIFICATION	8.942459502101816E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995293047305601	WITHOUT_CLASSIFICATION	4.7069526943993654E-4	DESIGN
public object instantiate(object parent sessionimplementor session) throws hibernateexception	WITHOUT_CLASSIFICATION	0.9992780455275859	WITHOUT_CLASSIFICATION	7.219544724139745E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.999669270531388	WITHOUT_CLASSIFICATION	3.3072946861203794E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.999669270531388	WITHOUT_CLASSIFICATION	3.3072946861203794E-4	DESIGN
versiontype impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ note simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the timestamp datatype supported by sybase and sql server which are completely db-generated values	WITHOUT_CLASSIFICATION	0.9999978818003833	WITHOUT_CLASSIFICATION	2.118199616714642E-6	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998169693038689	WITHOUT_CLASSIFICATION	1.8303069613108172E-4	DESIGN
not really necessary i guess	WITHOUT_CLASSIFICATION	0.6562570942957735	WITHOUT_CLASSIFICATION	0.34374290570422644	DESIGN
clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999958562610471	WITHOUT_CLASSIFICATION	4.143738952900009E-6	DESIGN
we do not have to worry about queued additions to uninitialized collections since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9998701802863216	WITHOUT_CLASSIFICATION	1.2981971367839585E-4	DESIGN
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9998302064157012	WITHOUT_CLASSIFICATION	1.6979358429879504E-4	DESIGN
remember the uk value	WITHOUT_CLASSIFICATION	0.992847237592403	WITHOUT_CLASSIFICATION	0.007152762407597026	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9996945845527261	WITHOUT_CLASSIFICATION	3.0541544727389985E-4	DESIGN
processcollectionproperty(token q.getcollectionpersister(collectionrole) collectionname)	WITHOUT_CLASSIFICATION	0.9995293047305601	WITHOUT_CLASSIFICATION	4.7069526943993654E-4	DESIGN
we must use the "remembered" uk value since it is not available from the entityentry during assembly	WITHOUT_CLASSIFICATION	0.9997578847079527	WITHOUT_CLASSIFICATION	2.421152920473806E-4	DESIGN
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9992045804746856	WITHOUT_CLASSIFICATION	7.954195253143249E-4	DESIGN
return false	WITHOUT_CLASSIFICATION	0.9999031655432018	WITHOUT_CLASSIFICATION	9.683445679818667E-5	DESIGN
this just handles a particular case of component projection perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.855159044681163	DESIGN	0.14484095531883712	WITHOUT_CLASSIFICATION
note we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9998592655944739	WITHOUT_CLASSIFICATION	1.407344055260841E-4	DESIGN
the key is the owning entity itself so get the id from the key	WITHOUT_CLASSIFICATION	0.9997724943405709	WITHOUT_CLASSIFICATION	2.275056594289988E-4	DESIGN
if the original is a persistentcollection and that original was not flagged as dirty then reset the target's dirty flag here after the copy operation. </p> one thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know	WITHOUT_CLASSIFICATION	0.9999903980003882	WITHOUT_CLASSIFICATION	9.601999611690258E-6	DESIGN
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9997568520393004	WITHOUT_CLASSIFICATION	2.4314796069958486E-4	DESIGN
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9995987613246082	WITHOUT_CLASSIFICATION	4.0123867539181685E-4	DESIGN
for a null target or a target which is the same as the original we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999926372725673	WITHOUT_CLASSIFICATION	7.362727432859857E-6	DESIGN
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here	WITHOUT_CLASSIFICATION	0.9985570711535685	WITHOUT_CLASSIFICATION	0.0014429288464315874	DESIGN
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999653711468551	WITHOUT_CLASSIFICATION	3.4628853144850956E-5	DESIGN
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9962964371975531	WITHOUT_CLASSIFICATION	0.003703562802446883	DESIGN
check if it is already completely loaded but unowned	WITHOUT_CLASSIFICATION	0.9998323941944695	WITHOUT_CLASSIFICATION	1.6760580553049886E-4	DESIGN
cache the actual id of the object not the value of the property-ref which might not be initialized	WITHOUT_CLASSIFICATION	0.9833653954780338	WITHOUT_CLASSIFICATION	0.016634604521966214	DESIGN
todo!!!!!!!	WITHOUT_CLASSIFICATION	0.9996084438916226	WITHOUT_CLASSIFICATION	3.915561083774067E-4	DESIGN
create a new collection wrapper to be initialized later	WITHOUT_CLASSIFICATION	0.8801349111804968	WITHOUT_CLASSIFICATION	0.11986508881950328	DESIGN
some jdbc drivers erroneously return an empty array here for a null db value /	WITHOUT_CLASSIFICATION	0.9998486767557698	WITHOUT_CLASSIFICATION	1.5132324423026804E-4	DESIGN
our column span is the number of columns in the pk	WITHOUT_CLASSIFICATION	0.9999618543318484	WITHOUT_CLASSIFICATION	3.81456681516714E-5	DESIGN
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.999968277488229	WITHOUT_CLASSIFICATION	3.1722511770935904E-5	DESIGN
we already know current is not null	WITHOUT_CLASSIFICATION	0.9956040780641182	WITHOUT_CLASSIFICATION	0.004395921935881735	DESIGN
the ids are fully resolved so compare them with isdirty() not ismodified()	WITHOUT_CLASSIFICATION	0.9763195861012574	WITHOUT_CLASSIFICATION	0.023680413898742616	DESIGN
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9998173224345277	WITHOUT_CLASSIFICATION	1.8267756547224166E-4	DESIGN
----------------------------------------------------------- constructors	WITHOUT_CLASSIFICATION	0.9988013943415965	WITHOUT_CLASSIFICATION	0.001198605658403373	DESIGN
----------------------------------------------------- instance variables	WITHOUT_CLASSIFICATION	0.9999676391895959	WITHOUT_CLASSIFICATION	3.2360810404200834E-5	DESIGN
public static jdbcexception newjdbcexception(string string sqlexception root string sql) { string = string + " [" + sql + ']' log.error(string root) logexceptions(root) return new jdbcexception(string root sql) } public static jdbcexception newjdbcexception(string string sqlexception root) { log.error(string root) logexceptions(root) return new jdbcexception(string root) }	WITHOUT_CLASSIFICATION	0.9999460222153023	WITHOUT_CLASSIFICATION	5.397778469762858E-5	DESIGN
--------------------------------------------------------- public methods	WITHOUT_CLASSIFICATION	0.9912604564119935	WITHOUT_CLASSIFICATION	0.008739543588006488	DESIGN
compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9992844173891933	WITHOUT_CLASSIFICATION	7.155826108067402E-4	DESIGN
simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999822579382519	WITHOUT_CLASSIFICATION	1.774206174815683E-5	DESIGN
sybase fail if we don't do that sigh	WITHOUT_CLASSIFICATION	0.9999109327303092	WITHOUT_CLASSIFICATION	8.906726969078325E-5	DESIGN
handles things like a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a b c ) (overloaded brackets) not not a a is not null (overloaded "not") etc and expressions like foo = bar (maps to foo.id = bar.id) foo.bar = 'foo' (maps to foo.bar = 'foo') foo.bar.baz = 1.0 (maps to foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.bar.baz (maps to bar.baz = 1.0 and foo.bar = bar.id) foo.bar.baz = a.b.c (maps to bar.baz = b.c and foo.bar = bar.id and a.b = b.id) foo.bar.baz + a.b.c (maps to bar.baz + b.c and foo.bar = bar.id and a.b = b.id) ( foo.bar.baz + 1.0 ) < 2.0 (maps to ( bar.baz + 1.0 ) < 2.0 and foo.bar = bar.id)	WITHOUT_CLASSIFICATION	0.9995289829802506	WITHOUT_CLASSIFICATION	4.7101701974940297E-4	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.997142521287597	WITHOUT_CLASSIFICATION	0.0028574787124030386	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.997142521287597	WITHOUT_CLASSIFICATION	0.0028574787124030386	DESIGN
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9993191906993338	WITHOUT_CLASSIFICATION	6.808093006661539E-4	DESIGN
otherwise just dump it	WITHOUT_CLASSIFICATION	0.9991880240173102	WITHOUT_CLASSIFICATION	8.119759826898386E-4	DESIGN
its an interface so we can't really tell anything	WITHOUT_CLASSIFICATION	0.9999298889220013	WITHOUT_CLASSIFICATION	7.011107799869943E-5	DESIGN
its an interface so we can't really tell anything	WITHOUT_CLASSIFICATION	0.9999298889220013	WITHOUT_CLASSIFICATION	7.011107799869943E-5	DESIGN
use default behavior	WITHOUT_CLASSIFICATION	0.9982612274636987	WITHOUT_CLASSIFICATION	0.0017387725363012133	DESIGN
note early return	WITHOUT_CLASSIFICATION	0.998949703025413	WITHOUT_CLASSIFICATION	0.001050296974587048	DESIGN
the mru cache used to keep hard references to the most recently used query plans note lru here is a bit of a misnomer it indicates that lru entries are removed the actual kept entries are the mru entries	WITHOUT_CLASSIFICATION	0.6857444328184199	DESIGN	0.31425556718158	WITHOUT_CLASSIFICATION
we want to be able to just use the defaults if jndi environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9998056859364602	WITHOUT_CLASSIFICATION	1.9431406353970446E-4	DESIGN
clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999169105127171	WITHOUT_CLASSIFICATION	8.308948728291121E-5	DESIGN
serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9995629874367804	WITHOUT_CLASSIFICATION	4.370125632195666E-4	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.99998762319171	WITHOUT_CLASSIFICATION	1.2376808289981914E-5	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.99998762319171	WITHOUT_CLASSIFICATION	1.2376808289981914E-5	DESIGN
deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9995609873194347	WITHOUT_CLASSIFICATION	4.3901268056525835E-4	DESIGN
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9722216221197147	WITHOUT_CLASSIFICATION	0.027778377880285254	DESIGN
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9991678223641884	WITHOUT_CLASSIFICATION	8.321776358114545E-4	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9996099583304155	WITHOUT_CLASSIFICATION	3.9004166958446366E-4	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9996099583304155	WITHOUT_CLASSIFICATION	3.9004166958446366E-4	DESIGN
includes last '.'	WITHOUT_CLASSIFICATION	0.9998895350222065	WITHOUT_CLASSIFICATION	1.1046497779354254E-4	DESIGN
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999323562858505	WITHOUT_CLASSIFICATION	6.764371414953453E-5	DESIGN
impl note takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method	WITHOUT_CLASSIFICATION	0.9872906995868559	WITHOUT_CLASSIFICATION	0.012709300413144095	DESIGN
first time we find match!	WITHOUT_CLASSIFICATION	0.9999217129519865	WITHOUT_CLASSIFICATION	7.828704801345335E-5	DESIGN
entitynames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9995713457026979	WITHOUT_CLASSIFICATION	4.2865429730200527E-4	DESIGN
wrapped iterators	WITHOUT_CLASSIFICATION	0.9966420312805165	WITHOUT_CLASSIFICATION	0.003357968719483553	DESIGN
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9998851543399462	WITHOUT_CLASSIFICATION	1.1484566005391384E-4	DESIGN
the current iterator	WITHOUT_CLASSIFICATION	0.9999471251132928	WITHOUT_CLASSIFICATION	5.287488670720366E-5	DESIGN
the last used iterator	WITHOUT_CLASSIFICATION	0.9674618487935143	WITHOUT_CLASSIFICATION	0.032538151206485746	DESIGN
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9996823093544571	WITHOUT_CLASSIFICATION	3.176906455428811E-4	DESIGN
public static object[] clone(class elementclass object[] array) {object[] result = (object[]) array.newinstance( elementclass array.length )system.arraycopy(array 0 result 0 array.length)return result}	WITHOUT_CLASSIFICATION	0.9997684317131095	WITHOUT_CLASSIFICATION	2.3156828689051943E-4	DESIGN
call this before any iterator method to make sure that the current iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9993537662377603	WITHOUT_CLASSIFICATION	6.462337622398039E-4	DESIGN
doable if needed	WITHOUT_CLASSIFICATION	0.9998770392030224	WITHOUT_CLASSIFICATION	1.229607969776536E-4	DESIGN
set last used iterator here in case the user calls remove before calling hasnext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.5769432564149162	DESIGN	0.4230567435850838	WITHOUT_CLASSIFICATION
peek ahead	WITHOUT_CLASSIFICATION	0.9995060377591048	WITHOUT_CLASSIFICATION	4.939622408951193E-4	DESIGN
if we reach the end of the string w/o finding the matching end that is an exception	WITHOUT_CLASSIFICATION	0.9999476051015002	WITHOUT_CLASSIFICATION	5.2394898499886573E-5	DESIGN
we have a placeholder spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9998128810377733	WITHOUT_CLASSIFICATION	1.8711896222676366E-4	DESIGN
make sure spinning forward did not put us past the end of the buffer	WITHOUT_CLASSIFICATION	0.9995092052444887	WITHOUT_CLASSIFICATION	4.907947555112621E-4	DESIGN
first try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9995902097917987	WITHOUT_CLASSIFICATION	4.097902082012914E-4	DESIGN
next try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9818960787647629	WITHOUT_CLASSIFICATION	0.018103921235236988	DESIGN
next try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9807459302150314	WITHOUT_CLASSIFICATION	0.019254069784968617	DESIGN
anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9989010521547678	WITHOUT_CLASSIFICATION	0.0010989478452322755	DESIGN
would need an identityset for this!	WITHOUT_CLASSIFICATION	0.9960353264314901	WITHOUT_CLASSIFICATION	0.003964673568509967	DESIGN
arrays.aslist doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9978900475635316	WITHOUT_CLASSIFICATION	0.002109952436468336	DESIGN
faster?	WITHOUT_CLASSIFICATION	0.9995412406281159	WITHOUT_CLASSIFICATION	4.587593718841749E-4	DESIGN
the name of a class	WITHOUT_CLASSIFICATION	0.9989482558439097	WITHOUT_CLASSIFICATION	0.0010517441560903749	DESIGN
its the listener class name	WITHOUT_CLASSIFICATION	0.9997472199918404	WITHOUT_CLASSIFICATION	2.52780008159629E-4	DESIGN
allow 987654321	WITHOUT_CLASSIFICATION	0.9991513793443906	WITHOUT_CLASSIFICATION	8.486206556093341E-4	DESIGN
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9998895407080698	WITHOUT_CLASSIFICATION	1.1045929193019597E-4	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999388663847791	WITHOUT_CLASSIFICATION	6.113361522082377E-5	DESIGN
in case we were deserialized in a different jvm look for an instance with the same name (alternatively we could do an actual jndi lookup here.)	WITHOUT_CLASSIFICATION	0.8535440321861312	WITHOUT_CLASSIFICATION	0.14645596781386883	DESIGN
first lets determine whether to apply cglib or javassist based instrumentation	WITHOUT_CLASSIFICATION	0.999855470715593	WITHOUT_CLASSIFICATION	1.4452928440692063E-4	DESIGN
make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9987663733598414	WITHOUT_CLASSIFICATION	0.0012336266401586564	DESIGN
entirely optional!!	WITHOUT_CLASSIFICATION	0.9990714862060811	WITHOUT_CLASSIFICATION	9.285137939188944E-4	DESIGN
its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9997785033796104	WITHOUT_CLASSIFICATION	2.214966203896428E-4	DESIGN
context.unbind(boundname)	WITHOUT_CLASSIFICATION	0.9991129145727181	WITHOUT_CLASSIFICATION	8.870854272817789E-4	DESIGN
readresolveobject	WITHOUT_CLASSIFICATION	0.9996084438916226	WITHOUT_CLASSIFICATION	3.915561083774067E-4	DESIGN
cfg.setproperty("hibernate.show_sql" "true")	WITHOUT_CLASSIFICATION	0.9995455035152441	WITHOUT_CLASSIFICATION	4.5449648475590136E-4	DESIGN
defensive convenience methods	WITHOUT_CLASSIFICATION	0.9990077057001305	WITHOUT_CLASSIFICATION	9.92294299869411E-4	DESIGN
create the sessionfactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9995026582502202	WITHOUT_CLASSIFICATION	4.973417497797192E-4	DESIGN
make sure you log the exception as it might be swallowed	WITHOUT_CLASSIFICATION	0.9998835433554086	WITHOUT_CLASSIFICATION	1.1645664459138125E-4	DESIGN
begin unit of work	WITHOUT_CLASSIFICATION	0.9998037544640443	WITHOUT_CLASSIFICATION	1.9624553595555183E-4	DESIGN
write html header	WITHOUT_CLASSIFICATION	0.9975309340711355	WITHOUT_CLASSIFICATION	0.0024690659288644037	DESIGN
handle actions	WITHOUT_CLASSIFICATION	0.9992898041567762	WITHOUT_CLASSIFICATION	7.101958432238596E-4	DESIGN
print page	WITHOUT_CLASSIFICATION	0.9995334683619786	WITHOUT_CLASSIFICATION	4.665316380213417E-4	DESIGN
write html footer	WITHOUT_CLASSIFICATION	0.9996539477877382	WITHOUT_CLASSIFICATION	3.460522122618139E-4	DESIGN
end unit of work	WITHOUT_CLASSIFICATION	0.9997124000955774	WITHOUT_CLASSIFICATION	2.8759990442264516E-4	DESIGN
start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9245890873287601	WITHOUT_CLASSIFICATION	0.07541091267123992	DESIGN
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9991196592241156	WITHOUT_CLASSIFICATION	8.803407758843228E-4	DESIGN
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999910345634958	WITHOUT_CLASSIFICATION	8.965436504244747E-6	DESIGN
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9942083852437438	WITHOUT_CLASSIFICATION	0.0057916147562561944	DESIGN
eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9981702847986247	WITHOUT_CLASSIFICATION	0.0018297152013754007	DESIGN
if we want to handle it bidirectional and detached we also need to load this collection with an eager outer-join fetch this time with criteria and not hql	WITHOUT_CLASSIFICATION	0.9373693156566203	WITHOUT_CLASSIFICATION	0.06263068434337964	DESIGN
event anevent = (event) session .createcriteria(event.class).setfetchmode("participants" fetchmode.join) .add( expression.eq("id" eventid) ) .uniqueresult() eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999248752679468	WITHOUT_CLASSIFICATION	7.512473205311102E-5	DESIGN
end of first unit of work	WITHOUT_CLASSIFICATION	0.999712635328171	WITHOUT_CLASSIFICATION	2.8736467182899697E-4	DESIGN
or bidirectional safety method setting both sides aperson.addtoevent(anevent)	WITHOUT_CLASSIFICATION	0.9997304734720255	WITHOUT_CLASSIFICATION	2.6952652797453765E-4	DESIGN
begin second unit of work	WITHOUT_CLASSIFICATION	0.999462742412212	WITHOUT_CLASSIFICATION	5.372575877879122E-4	DESIGN
reattachment of aperson	WITHOUT_CLASSIFICATION	0.9992889336820435	WITHOUT_CLASSIFICATION	7.110663179564954E-4	DESIGN
the getemailaddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9956389376430603	WITHOUT_CLASSIFICATION	0.004361062356939724	DESIGN
we need our tm so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9986862016967102	WITHOUT_CLASSIFICATION	0.001313798303289782	DESIGN
don't hold the jbc node lock throughout the tx as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999502775673297	WITHOUT_CLASSIFICATION	4.9722432670304406E-5	DESIGN
don't hold the jbc node lock throughout the tx as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999502775673297	WITHOUT_CLASSIFICATION	4.9722432670304406E-5	DESIGN
jbc put a version in the node when it created as part of some internal operation. we are always newer but if the jbc version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999886666238267	WITHOUT_CLASSIFICATION	1.133337617337187E-5	DESIGN
swaldman 2006-08-28 define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999162488409287	WITHOUT_CLASSIFICATION	8.375115907132908E-5	DESIGN
not null if the isolation level has been specified in the configuration file. otherwise it is left to the driver's default value.	WITHOUT_CLASSIFICATION	0.9999795414873054	WITHOUT_CLASSIFICATION	2.0458512694555463E-5	DESIGN
configured outside of hibernate (i.e. servlet container or java bean container already has proxool pools running and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9984291633797284	WITHOUT_CLASSIFICATION	0.0015708366202715574	DESIGN
if you're closing down the connectionprovider chances are an is not a real big deal just warn	WITHOUT_CLASSIFICATION	0.9999848834289505	WITHOUT_CLASSIFICATION	1.5116571049443001E-5	DESIGN
(as is always optional for consistency with sql/oql)	WITHOUT_CLASSIFICATION	0.9998062778826012	WITHOUT_CLASSIFICATION	1.9372211739879518E-4	DESIGN
process the "new" hql style where aliases are assigned _after_ the class name or path expression ie. using the as construction	WITHOUT_CLASSIFICATION	0.999999947164785	WITHOUT_CLASSIFICATION	5.2835215015757554E-8	DESIGN
the loaded owner will be set to null after the collection is removed so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.999995963877311	WITHOUT_CLASSIFICATION	4.036122688905068E-6	DESIGN
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.997853681048114	WITHOUT_CLASSIFICATION	0.0021463189518859723	DESIGN
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9997662707176327	WITHOUT_CLASSIFICATION	2.3372928236738234E-4	DESIGN
handle a path expression or class name that appears at the start in the "new" hql style or an alias that appears at the start in the "old" hql style	WITHOUT_CLASSIFICATION	0.9999435873339603	WITHOUT_CLASSIFICATION	5.6412666039677906E-5	DESIGN
handle <= >= != is not not between not in	WITHOUT_CLASSIFICATION	0.9961524045622526	WITHOUT_CLASSIFICATION	0.0038475954377474976	DESIGN
the loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999939099988	WITHOUT_CLASSIFICATION	6.090001093896887E-9	DESIGN
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9990703293172345	WITHOUT_CLASSIFICATION	9.296706827654901E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9997303770685633	WITHOUT_CLASSIFICATION	2.6962293143678996E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9997303770685633	WITHOUT_CLASSIFICATION	2.6962293143678996E-4	DESIGN
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9993289881929539	WITHOUT_CLASSIFICATION	6.710118070460814E-4	DESIGN
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9996886241435718	WITHOUT_CLASSIFICATION	3.1137585642808645E-4	DESIGN
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9997158217975072	WITHOUT_CLASSIFICATION	2.8417820249282584E-4	DESIGN
note special case default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999790154708856	WITHOUT_CLASSIFICATION	2.0984529114326424E-5	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999838569108317	WITHOUT_CLASSIFICATION	1.614308916823463E-5	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997921999894421	WITHOUT_CLASSIFICATION	2.0780001055791477E-4	DESIGN
void setcomponenttuplizerfactory(componenttuplizerfactory componenttuplizerfactory) { this.componenttuplizerfactory = componenttuplizerfactory }	WITHOUT_CLASSIFICATION	0.9998763301142672	WITHOUT_CLASSIFICATION	1.236698857327603E-4	DESIGN
element index -> id	WITHOUT_CLASSIFICATION	0.9999704546411201	WITHOUT_CLASSIFICATION	2.954535887993687E-5	DESIGN
note that it might be better to iterate the snapshot but this is safe assuming the user implements equals() properly as required by the set contract!	WITHOUT_CLASSIFICATION	0.9964252048715309	WITHOUT_CLASSIFICATION	0.003574795128469192	DESIGN
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.999854969673098	WITHOUT_CLASSIFICATION	1.450303269020505E-4	DESIGN
essentially if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception note that allowing close() above has the same basic effect but we capture that there simply to perform the unbind	WITHOUT_CLASSIFICATION	0.9999997929777521	WITHOUT_CLASSIFICATION	2.0702224778679017E-7	DESIGN
the default sqlexceptionconverter for all dialects is based on sqlstate since sqlerrorcode is extremely vendor-specific. specific dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9998363728631655	WITHOUT_CLASSIFICATION	1.6362713683439173E-4	DESIGN
only necessary for postgre < 7.4 httpanoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9989387874024637	WITHOUT_CLASSIFICATION	0.0010612125975363244	DESIGN
select topic syntax from information_schema.help where section like 'function%' order by section topic see also -> httpwww.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999919817167519	WITHOUT_CLASSIFICATION	8.018283248133753E-6	DESIGN
registercolumntype(types.varbinary "character($l)") registercolumntype(types.blob "character($l)" ) for use prior to cp 11.0 registercolumntype(types.clob "character($l)" )	WITHOUT_CLASSIFICATION	0.998045225123351	WITHOUT_CLASSIFICATION	0.0019547748766489542	DESIGN
the blob type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include k - kilobyte m - megabyte g - gigabyte. refer to the pbdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9975666838909937	WITHOUT_CLASSIFICATION	0.0024333161090062997	DESIGN
we must return a valid rdms/rsa command from this method to prevent rdms/rsa from issuing error 400	WITHOUT_CLASSIFICATION	0.8697532385437986	WITHOUT_CLASSIFICATION	0.1302467614562015	DESIGN
oracle driver reports to support getgeneratedkeys() but they only support the version taking an array of the names of the columns to be returned (via its returning clause). no other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9998855087656182	WITHOUT_CLASSIFICATION	1.1449123438181009E-4	DESIGN
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999717112252345	WITHOUT_CLASSIFICATION	2.8288774765469368E-5	DESIGN
you may still have other resultsets or update counts left to process here but you can't do it now or the resultset you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999977065579	WITHOUT_CLASSIFICATION	2.2934421663858538E-9	DESIGN
note for object <-> sql datatype mappings see configuration manager | advanced | sql | system ddl datatype mappings tbdregistercolumntype(types.binary "binary($1)") changed 08-11-2005 jsl	WITHOUT_CLASSIFICATION	0.9998840674603946	WITHOUT_CLASSIFICATION	1.1593253960542252E-4	DESIGN
trim(end_keyword string-expression-1 from string-expression-2) use hibernate implementation "from" is one of the parameters they pass in position ?3 registerfunction( "trim" new sqlfunctiontemplate(hibernate.string "trim(?1 ?2 from ?3)") )	WITHOUT_CLASSIFICATION	0.9999679973295249	WITHOUT_CLASSIFICATION	3.200267047513288E-5	DESIGN
whether this dialect has an identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.99994355542436	WITHOUT_CLASSIFICATION	5.64445756400059E-5	DESIGN
according to both the ansi-sql and jpa specs trim takes a variable number of parameters between 1 and 4. at least one paramer (trimsource) is required. from the sql spec <trim function> = trim <left paren> <trim operands> <right paren> <trim operands> = [ [ <trim specification> ] [ <trim character> ] from ] <trim source> <trim specification> = leading | trailing | both if <trim specification> is omitted both is assumed. if <trim character> is omitted space is assumed	WITHOUT_CLASSIFICATION	0.9999999998247643	WITHOUT_CLASSIFICATION	1.7523575954782204E-10	DESIGN
/ prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9998654571213385	WITHOUT_CLASSIFICATION	1.3454287866156923E-4	DESIGN
named queries	WITHOUT_CLASSIFICATION	0.9997745328564529	WITHOUT_CLASSIFICATION	2.2546714354705215E-4	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.6673484236287307	WITHOUT_CLASSIFICATION	0.33265157637126935	DESIGN
does not handle arrays (thats ok cos they can't be lazy) or newly instantiated collections so we can do the cast	WITHOUT_CLASSIFICATION	0.9967681013275196	WITHOUT_CLASSIFICATION	0.003231898672480425	DESIGN
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999603851912464	WITHOUT_CLASSIFICATION	3.9614808753544776E-5	DESIGN
we can do the cast since orphan-delete does not apply to 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.999647874247514	WITHOUT_CLASSIFICATION	3.52125752485937E-4	DESIGN
if the natural-id is marked as non-mutable it is not retrieved during a normal database-snapshot operation	WITHOUT_CLASSIFICATION	0.999994342666482	WITHOUT_CLASSIFICATION	5.657333517921537E-6	DESIGN
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999954546895738	WITHOUT_CLASSIFICATION	4.545310426164139E-6	DESIGN
slice to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9996166197118034	WITHOUT_CLASSIFICATION	3.833802881966004E-4	DESIGN
int result = 17 result = 37 result + type.hashcode() result = 37 result + ( value==null ? 0 value.hashcode() ) return result	WITHOUT_CLASSIFICATION	0.9999952304665544	WITHOUT_CLASSIFICATION	4.769533445662685E-6	DESIGN
the collectionentry.isreached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9996876748015908	WITHOUT_CLASSIFICATION	3.123251984091565E-4	DESIGN
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9980481980161334	WITHOUT_CLASSIFICATION	0.0019518019838666242	DESIGN
the unique property value represented here may or may not be serializable so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.8498830719376821	DESIGN	0.15011692806231797	WITHOUT_CLASSIFICATION
if the version of a newly instantiated object is not the same as the version seed value use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9970446853903299	WITHOUT_CLASSIFICATION	0.0029553146096700975	DESIGN
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999127585621138	WITHOUT_CLASSIFICATION	8.724143788615775E-5	DESIGN
ignore this row the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.999935360625087	WITHOUT_CLASSIFICATION	6.463937491299373E-5	DESIGN
entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently not yet used	WITHOUT_CLASSIFICATION	0.5754891386550496	WITHOUT_CLASSIFICATION	0.4245108613449504	DESIGN
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. besides it makes the code much easier to read than the old transactionhelper stuff	WITHOUT_CLASSIFICATION	0.9999911611320217	WITHOUT_CLASSIFICATION	8.838867978412764E-6	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9990716003127764	WITHOUT_CLASSIFICATION	9.283996872236895E-4	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9990716003127764	WITHOUT_CLASSIFICATION	9.283996872236895E-4	DESIGN
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.999996740242273	WITHOUT_CLASSIFICATION	3.2597577269662887E-6	DESIGN
remove any snapshot not really for memory management purposes but rather because it might now be stale and there is no longer any entityentry to take precedence this is now handled by removeentity() session.getpersistencecontext().removedatabasesnapshot(key)	WITHOUT_CLASSIFICATION	0.827813598476418	WITHOUT_CLASSIFICATION	0.17218640152358208	DESIGN
skip this check for composite-ids relating to dom4j entity-mode alternatively we could add a check to make sure the incoming id value is an instance of element	WITHOUT_CLASSIFICATION	0.9550020415517915	WITHOUT_CLASSIFICATION	0.04499795844820866	DESIGN
upgrade the lock if necessary lock(result lockmode)	WITHOUT_CLASSIFICATION	0.9995948514865168	WITHOUT_CLASSIFICATION	4.0514851348317474E-4	DESIGN
now any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9401048346867146	WITHOUT_CLASSIFICATION	0.05989516531328541	DESIGN
we must clone embedded composite identifiers or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999500892069347	WITHOUT_CLASSIFICATION	4.991079306513079E-5	DESIGN
sub-insertions should occur before containing insertion so try to do the callback now	WITHOUT_CLASSIFICATION	0.9985109842371085	WITHOUT_CLASSIFICATION	0.001489015762891481	DESIGN
the entity is not associated with the session so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.999880922359742	WITHOUT_CLASSIFICATION	1.1907764025796883E-4	DESIGN
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9965707600867605	WITHOUT_CLASSIFICATION	0.003429239913239497	DESIGN
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998374006773758	WITHOUT_CLASSIFICATION	1.6259932262414399E-4	DESIGN
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998307174522753	WITHOUT_CLASSIFICATION	1.6928254772470067E-4	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9821605270029237	WITHOUT_CLASSIFICATION	0.01783947299707635	DESIGN
if it is an uninitialized proxy pointing with this session then when it is accessed the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9996022252707095	WITHOUT_CLASSIFICATION	3.9777472929057996E-4	DESIGN
generate an explicit join for the root dot node. the implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999976178834845	WITHOUT_CLASSIFICATION	2.3821165154646674E-6	DESIGN
a session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9983823103583624	WITHOUT_CLASSIFICATION	0.0016176896416375491	DESIGN
does the collection referenced by this fromelement specify an order-by attribute? if so attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9998964301008574	WITHOUT_CLASSIFICATION	1.0356989914252246E-4	DESIGN
and the token could be an identifer and the error is a mismatched token error	WITHOUT_CLASSIFICATION	0.902028025992345	WITHOUT_CLASSIFICATION	0.09797197400765496	DESIGN
if a where clause was specified in the update/delete query use it to limit the returned ids here	WITHOUT_CLASSIFICATION	0.9999888348129661	WITHOUT_CLASSIFICATION	1.1165187034029964E-5	DESIGN
int parameterstart = getwalker().getnumberofparametersinsetclause() list allparams = getidselectparameterspecifications() iterator whereparams = allparams.sublist( parameterstart allparams.size() ).iterator()	WITHOUT_CLASSIFICATION	0.9999786813509746	WITHOUT_CLASSIFICATION	2.1318649025481286E-5	DESIGN
default implementation if this node has a data type and that data type is not an association then this is scalar.	WITHOUT_CLASSIFICATION	0.9977685309765337	WITHOUT_CLASSIFICATION	0.0022314690234661915	DESIGN
resolve the lhs fully generate implicit joins. pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9996010368733554	WITHOUT_CLASSIFICATION	3.9896312664461885E-4	DESIGN
if the propertytype is null and there isn't a parent just stop now there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999436743317274	WITHOUT_CLASSIFICATION	5.632566827249271E-5	DESIGN
we do not look for an existing join on the same path because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9974758838356972	WITHOUT_CLASSIFICATION	0.002524116164302797	DESIGN
our parent is another dot node meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's pk (because 'our' table would know the fk).	WITHOUT_CLASSIFICATION	0.9999238542085758	WITHOUT_CLASSIFICATION	7.614579142430422E-5	DESIGN
public final currency getcurrency(int col) throws hibernateexception {return (currency) get(col)}	WITHOUT_CLASSIFICATION	0.9998524673166791	WITHOUT_CLASSIFICATION	1.4753268332089376E-4	DESIGN
here we have two possibilities 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9997568152974329	WITHOUT_CLASSIFICATION	2.4318470256715533E-4	DESIGN
set the unresolved path in this node and the parent. set the text for the parent.	WITHOUT_CLASSIFICATION	0.9980711216290737	WITHOUT_CLASSIFICATION	0.0019288783709263018	DESIGN
get the first child to be considered. sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. distinct).	WITHOUT_CLASSIFICATION	0.993260745577372	WITHOUT_CLASSIFICATION	0.006739254422628074	DESIGN
if this is an entity and the property is the identifier property then use getidentifiertype(). note that the propertyname.equals( propertypath ) checks whether we have a component key reference where the component class property name is the same as the entity id property name if the two are not equal this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9933321136774057	WITHOUT_CLASSIFICATION	0.0066678863225943154	DESIGN
for a subquery the alias to use depends on a few things (we already know this is not an overall select) 1) if this from_element represents a correlation to the outer-most query a) if the outer query represents a multi-table persister we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) b) otherwise we need to use the persister's table name as the column qualification 2) otherwise (not correlated) use the given alias	WITHOUT_CLASSIFICATION	0.5589642846848429	WITHOUT_CLASSIFICATION	0.44103571531515706	DESIGN
not a collection? return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9958590205231742	WITHOUT_CLASSIFICATION	0.004140979476825766	DESIGN
collection of <many-to-any/> mappings used to circumvent the component-collection check below	WITHOUT_CLASSIFICATION	0.788051678888197	WITHOUT_CLASSIFICATION	0.21194832111180298	DESIGN
otherwise the destination node was implied by the from clause and the from clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999835904089203	WITHOUT_CLASSIFICATION	1.640959107973611E-5	DESIGN
if the first identifier in the path referrs to the class alias (not the class name) then this is a correlated subselect. if it's a correlated sub-select use the existing table alias. otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.93870685799536	WITHOUT_CLASSIFICATION	0.06129314200464003	DESIGN
check to see if our "proppath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9981089490252548	WITHOUT_CLASSIFICATION	0.0018910509747451208	DESIGN
an ident node can represent an index expression if the ident represents a naked property ref note this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrexpr -> resolve()). the other option if that changes is to call resolve from here but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9345034087961878	WITHOUT_CLASSIFICATION	0.0654965912038123	DESIGN
this uses a pathexpressionparser but notice that compound paths are not valid only bare names and simple paths	WITHOUT_CLASSIFICATION	0.9995289244180188	WITHOUT_CLASSIFICATION	4.71075581981181E-4	DESIGN
if this is an implied join in a from clause then use ansi-style joining and set the flag on the fromelement that indicates that it was implied in the from clause itself.	WITHOUT_CLASSIFICATION	0.9994859861754405	WITHOUT_CLASSIFICATION	5.14013824559534E-4	DESIGN
origin.adddestination(destination) add the query spaces.	WITHOUT_CLASSIFICATION	0.9998875361652586	WITHOUT_CLASSIFICATION	1.1246383474129759E-4	DESIGN
for an explicit many-to-many relationship add a second join from the intermediate (many-to-many) table to the destination table. also make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999966212786281	WITHOUT_CLASSIFICATION	3.378721371950801E-6	DESIGN
reset the node type because the rest of the system is expecting from_fragment all we wanted was for the factory to create the right sub-class. this might get reset again later on anyway to make the sql generation simpler.	WITHOUT_CLASSIFICATION	0.7642390618910226	WITHOUT_CLASSIFICATION	0.23576093810897739	DESIGN
explicit = true this is an explict select. arraylist sqlresulttypelist = new arraylist()	WITHOUT_CLASSIFICATION	0.9998427127121182	WITHOUT_CLASSIFICATION	1.572872878818449E-4	DESIGN
sqlresulttypelist.add( type ) generate the select expression.	WITHOUT_CLASSIFICATION	0.9978322184503414	WITHOUT_CLASSIFICATION	0.0021677815496586295	DESIGN
if the expression list has exactly one expression and the type of the expression is a collection then this might be a collection function such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9989838891853137	WITHOUT_CLASSIFICATION	0.0010161108146862971	DESIGN
need to parse off the column qualifiers this is assuming (which is true as of now) that this is only used from update and delete hql statement parsing	WITHOUT_CLASSIFICATION	0.9967689818738976	WITHOUT_CLASSIFICATION	0.0032310181261023915	DESIGN
for regression testing against output from the old parser found it easiest to simply reorder the fromelements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser this is definitely another of those "only needed for regression purposes". the syntheticandfactory then simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999929128221551	WITHOUT_CLASSIFICATION	7.087177844897237E-6	DESIGN
the uber-rule here is that we need to include subclass joins if the fromelement is in any way dereferenced by a property from the subclass table otherwise we end up with column references qualified by a non-existent table reference in the resulting sql	WITHOUT_CLASSIFICATION	0.9910481090670997	WITHOUT_CLASSIFICATION	0.008951890932900301	DESIGN
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9861536691037462	WITHOUT_CLASSIFICATION	0.013846330896253683	DESIGN
the following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9996181496288873	WITHOUT_CLASSIFICATION	3.8185037111265215E-4	DESIGN
the loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999939099988	WITHOUT_CLASSIFICATION	6.090001093896887E-9	DESIGN
should not be able to reach last without maxposition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9934347514646786	WITHOUT_CLASSIFICATION	0.006565248535321417	DESIGN
we found it in the temp pc. should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9998961030039673	WITHOUT_CLASSIFICATION	1.0389699603272798E-4	DESIGN
do not use proxiesbykey since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9962182282414375	WITHOUT_CLASSIFICATION	0.003781771758562479	DESIGN
if there is no tm configured we will not be able to access the javax.transaction.transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999251809621243	WITHOUT_CLASSIFICATION	7.481903787562175E-5	DESIGN
since the result set cursor is always left at the first physical row after the "last processed" we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999999121532043	WITHOUT_CLASSIFICATION	8.784679571562165E-8	DESIGN
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a collectioninitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9998638446925034	WITHOUT_CLASSIFICATION	1.3615530749661132E-4	DESIGN
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode none)	WITHOUT_CLASSIFICATION	0.9989110352288195	WITHOUT_CLASSIFICATION	0.0010889647711805033	DESIGN
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.998179698096268	WITHOUT_CLASSIFICATION	0.0018203019037319802	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999306509976166	WITHOUT_CLASSIFICATION	6.934900238345856E-5	DESIGN
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.99902030530037	WITHOUT_CLASSIFICATION	9.796946996300706E-4	DESIGN
ps.close() just close it do not try to return it to the pool! note early exit!	WITHOUT_CLASSIFICATION	0.9998393558789468	WITHOUT_CLASSIFICATION	1.6064412105321903E-4	DESIGN
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through hibernate's registered transaction synchronization on a separate "reaping" thread. in cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these cmes occur. and though it is not "allowed" per-se the end result without handling it specifically is infinite looping. so here we simply break the loop	WITHOUT_CLASSIFICATION	0.9999999733344008	WITHOUT_CLASSIFICATION	2.6665599142094776E-8	DESIGN
unfortunately this stuff can't be cached because it is per-invocation not constant for the querytranslator instance	WITHOUT_CLASSIFICATION	0.9999211429760404	WITHOUT_CLASSIFICATION	7.885702395959914E-5	DESIGN
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.999742110414014	WITHOUT_CLASSIFICATION	2.5788958598605034E-4	DESIGN
don't create a unique key 'cos some databases don't like a uk on nullable columns getcollectiontable().createuniquekey( getidentifier().getconstraintcolumns() )	WITHOUT_CLASSIFICATION	0.9962902453838232	WITHOUT_CLASSIFICATION	0.0037097546161768205	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or entityinfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997617103824735	WITHOUT_CLASSIFICATION	2.3828961752634374E-4	DESIGN
isset = collection.isset() issorted = collection.issorted()	WITHOUT_CLASSIFICATION	0.9998722135249658	WITHOUT_CLASSIFICATION	1.2778647503407453E-4	DESIGN
lists arrays sets maps bags	WITHOUT_CLASSIFICATION	0.9917094156085344	WITHOUT_CLASSIFICATION	0.008290584391465615	DESIGN
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9996860185760066	WITHOUT_CLASSIFICATION	3.139814239934204E-4	DESIGN
use a combination of foreign key columns and pk columns since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999597566269868	WITHOUT_CLASSIFICATION	4.024337301317509E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or entityinfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997617103824735	WITHOUT_CLASSIFICATION	2.3828961752634374E-4	DESIGN
information about properties of this class including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9294291524312119	WITHOUT_CLASSIFICATION	0.07057084756878808	DESIGN
all this only really needs to consider properties of this class not its subclasses but since we are reusing code used for sequential selects we use the subclass closure	WITHOUT_CLASSIFICATION	0.9974350168998184	DESIGN	0.002564983100181484	WITHOUT_CLASSIFICATION
here we render the select column list based on the properties defined as being generated. for partial component generation we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9028087387077859	WITHOUT_CLASSIFICATION	0.09719126129221416	DESIGN
this is the root (versioned) table and we are using version-based optimistic locking if we are not updating the version also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.993906295633949	WITHOUT_CLASSIFICATION	0.00609370436605093	DESIGN
optimistic-lock="all" include all updatable properties optimistic-lock="dirty" include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9995795523871739	WITHOUT_CLASSIFICATION	4.2044761282601813E-4	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9895659281311758	WITHOUT_CLASSIFICATION	0.010434071868824106	DESIGN
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a jta transaction context so must be autocommit mode)	WITHOUT_CLASSIFICATION	0.9983168102107111	WITHOUT_CLASSIFICATION	0.001683189789288958	DESIGN
need to treat this as if it where optimistic-lock="all" (dirty does not make sense) first we need to locate the "loaded" state note it potentially could be a proxy so perform the location the safe way	WITHOUT_CLASSIFICATION	0.848122694296531	WITHOUT_CLASSIFICATION	0.15187730570346913	DESIGN
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.999633726747218	WITHOUT_CLASSIFICATION	3.662732527821059E-4	DESIGN
need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. using the collection's key type causes problems with property-ref keys	WITHOUT_CLASSIFICATION	0.9994618437089565	WITHOUT_CLASSIFICATION	5.381562910434398E-4	DESIGN
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9979310497531061	WITHOUT_CLASSIFICATION	0.0020689502468939046	DESIGN
following doesn't handle (null not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9977196052640651	WITHOUT_CLASSIFICATION	0.0022803947359349495	DESIGN
impl note due to the delayed population of setters (setters cached for performance) we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9998800786074341	WITHOUT_CLASSIFICATION	1.19921392565963E-4	DESIGN
we need to dirty check collections since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9997049411097036	WITHOUT_CLASSIFICATION	2.950588902963905E-4	DESIGN
return the id so we can use it to reset the proxy id return result	WITHOUT_CLASSIFICATION	0.999911045748981	WITHOUT_CLASSIFICATION	8.895425101892559E-5	DESIGN
optimizer = getfactory().getsettings().getbytecodeprovider().getreflectionoptimizer( mappedclass getternames setternames proptypes )	WITHOUT_CLASSIFICATION	0.9997748276958998	WITHOUT_CLASSIFICATION	2.2517230410029856E-4	DESIGN
cache the actual id of the object not the value of the property-ref which might not be initialized	WITHOUT_CLASSIFICATION	0.9833653954780338	WITHOUT_CLASSIFICATION	0.016634604521966214	DESIGN
we now have the value of the property-ref we reference. however we need to dig a little deeper as that property might also be an entity type in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.990512114427224	WITHOUT_CLASSIFICATION	0.00948788557277604	DESIGN
retrieve the value of the designated column in the current row of this resultset object as a java.io.reader object	WITHOUT_CLASSIFICATION	0.9999767507526487	WITHOUT_CLASSIFICATION	2.32492473513239E-5	DESIGN
not absolutely necessary but helps for some equals()/hashcode() implementations	WITHOUT_CLASSIFICATION	0.994884738142575	WITHOUT_CLASSIFICATION	0.0051152618574248805	DESIGN
this should be a call to resolve() not resolveidentifier() 'cos it might be a property-ref and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9805389992662163	WITHOUT_CLASSIFICATION	0.019461000733783568	DESIGN
if we have <tt>not-found="ignore"</tt> association mapped to a formula we always need to dirty check it so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9998910575083417	WITHOUT_CLASSIFICATION	1.0894249165818006E-4	DESIGN
can't just return null here since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.999899786277944	WITHOUT_CLASSIFICATION	1.0021372205609056E-4	DESIGN
for arrays replaceelements() may return a different reference since the array length might not match	WITHOUT_CLASSIFICATION	0.9974660983841019	WITHOUT_CLASSIFICATION	0.0025339016158980564	DESIGN
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the mru entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9570483374402812	WITHOUT_CLASSIFICATION	0.042951662559718815	DESIGN
as soon as we encounter our first letter return the substring from that position	WITHOUT_CLASSIFICATION	0.9999454566104483	WITHOUT_CLASSIFICATION	5.4543389551671264E-5	DESIGN
note expected in the syntax type=listenerclass ({sep}type=listenerclass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999778996882241	WITHOUT_CLASSIFICATION	2.2100311775894674E-5	DESIGN
istransactioncallbackregistered denotes whether any hibernate transaction has registered as a callback against this jdbccontext only one such callback is allowed. directly serializing this value causes problems with jdbctransaction or really any transaction impl where the callback is local to the transaction instance itself since that transaction is not serialized along with the jdbccontext. thus we handle that fact here explicitly	WITHOUT_CLASSIFICATION	0.9979087016621869	WITHOUT_CLASSIFICATION	0.0020912983378130576	DESIGN
note that for sequential scrolling we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.994559570142018	WITHOUT_CLASSIFICATION	0.005440429857982006	DESIGN
we call getkeyfromresultset() here so that we can know the key value upon which to perform the breaking logic. however it is also then called from getrowfromresultset() which is certainly not the most efficient. but the call here is needed and there currently is no other way without refactoring of the doquery()/getrowfromresultset() methods	WITHOUT_CLASSIFICATION	0.6017167096038969	DESIGN	0.3982832903961031	WITHOUT_CLASSIFICATION
this check is needed since processing leaves the cursor after the last physical row for the current logical row thus if we are after the last physical row this might be caused by either 1) scrolling to the last logical row 2) scrolling past the last logical row in the latter scenario the previous logical row really is the last logical row. in all other cases we should process back two logical records (the current logic row plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9932849138419717	WITHOUT_CLASSIFICATION	0.006715086158028273	DESIGN
and perform the load	WITHOUT_CLASSIFICATION	0.9997137665268583	WITHOUT_CLASSIFICATION	2.8623347314170653E-4	DESIGN
important reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999394598213909	WITHOUT_CLASSIFICATION	6.0540178609223955E-5	DESIGN
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9868458683031908	WITHOUT_CLASSIFICATION	0.013154131696809162	DESIGN
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9984355280607569	WITHOUT_CLASSIFICATION	0.0015644719392432463	DESIGN
we did not find a collection element in the result set so we ensure that a collection is created with the owner's identifier since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999789649386911	WITHOUT_CLASSIFICATION	2.1035061308851013E-5	DESIGN
this is a collection initializer so we must create a collection for each of the passed-in keys to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.970725955819557	WITHOUT_CLASSIFICATION	0.029274044180443	DESIGN
grab its state from the resultset and keep it in the session (but don't yet initialize the object itself) note that we acquire lockmode.read even if it was not requested	WITHOUT_CLASSIFICATION	0.9998184748684141	WITHOUT_CLASSIFICATION	1.8152513158596002E-4	DESIGN
a many-to-many decrement currentdepth here to allow join across the association table without exceeding max_fetch_depth (i.e. the "currentdepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9987851341035499	WITHOUT_CLASSIFICATION	0.0012148658964500959	DESIGN
if not a composite key use "foo in (? ? ?)" for batching if no batch and not a composite key use "foo = ?"	WITHOUT_CLASSIFICATION	0.998178182365302	WITHOUT_CLASSIFICATION	0.0018218176346980015	DESIGN
the user visible aliases which are unknown to the superclass these are not the actual "physical" sql aliases	WITHOUT_CLASSIFICATION	0.9999971595433146	WITHOUT_CLASSIFICATION	2.8404566853533784E-6	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999711369319901	WITHOUT_CLASSIFICATION	2.886306800986985E-5	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999711369319901	WITHOUT_CLASSIFICATION	2.886306800986985E-5	DESIGN
it does not refer to an alias of a projection look for a property	WITHOUT_CLASSIFICATION	0.9995745263833219	WITHOUT_CLASSIFICATION	4.254736166780871E-4	DESIGN
determine if the collection elements are entities	WITHOUT_CLASSIFICATION	0.9999239344773523	WITHOUT_CLASSIFICATION	7.606552264773634E-5	DESIGN
let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999534249245709	WITHOUT_CLASSIFICATION	4.657507542910565E-4	DESIGN
translates an ast join type (i.e. the token type) into a joinfragment.xxx join type. @param astjointype the ast join type (from hqlsqltokentypes or sqltokentypes) @return a joinfragment.xxx join type. @see joinfragment @see sqltokentypes	WITHOUT_CLASSIFICATION	0.999615149652468	WITHOUT_CLASSIFICATION	3.848503475320134E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9998495801911499	WITHOUT_CLASSIFICATION	1.5041980885019973E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9998495801911499	WITHOUT_CLASSIFICATION	1.5041980885019973E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9994656916128727	WITHOUT_CLASSIFICATION	5.343083871273023E-4	DESIGN
public list getcollectionaliases() { return collectionaliases } public list getcollectionowners() { return collectionowners } public list getcollectionowneraliases() { return collectionowneraliases } public list getcollectionpersisters() { return collectionpersisters } public map getalias2persister() { return alias2persister } public boolean iscollectioninitializer() { return iscollectioninitializer } public list getpersisters() { return persisters } public map getalias2owneralias() { return alias2owneralias } public list getscalartypes() { return scalartypes } public list getscalarcolumnaliases() { return scalarcolumnaliases } public list getpropertyresults() { return propertyresults } public list getcollectionpropertyresults() { return collectionresults } public map getalias2return() { return alias2return }	WITHOUT_CLASSIFICATION	0.9983607724478161	WITHOUT_CLASSIFICATION	0.0016392275521838313	DESIGN
sqlqueryparser parser = new sqlqueryparser( sqlquery processor.getalias2persister() processor.getalias2return() aliases collaliases collpersisters suffixes collsuffixes ) sql = parser.process() namedparameterbindpoints = parser.getnamedparameters()	WITHOUT_CLASSIFICATION	0.9996075747686733	WITHOUT_CLASSIFICATION	3.9242523132662746E-4	DESIGN
include the discriminator and class-level where but not filters	WITHOUT_CLASSIFICATION	0.9999517433057571	WITHOUT_CLASSIFICATION	4.825669424299116E-5	DESIGN
sqlaliassuffixes[i] = element.getcolumnaliassuffix()	WITHOUT_CLASSIFICATION	0.9998722135249658	WITHOUT_CLASSIFICATION	1.2778647503407453E-4	DESIGN
none because its the requested lock mode not the actual!	WITHOUT_CLASSIFICATION	0.999709110794186	WITHOUT_CLASSIFICATION	2.9088920581399336E-4	DESIGN
at this point we have (drivingsqlalias) the sql alias of the driving table corresponding to the given user alias. however the driving table is not (necessarily) the table against which we want to apply locks. mainly the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.999987638836222	WITHOUT_CLASSIFICATION	1.2361163778067352E-5	DESIGN
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999183127181411	WITHOUT_CLASSIFICATION	8.168728185897219E-5	DESIGN
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.999837610590887	WITHOUT_CLASSIFICATION	1.623894091129589E-4	DESIGN
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9990010920719292	WITHOUT_CLASSIFICATION	9.989079280707978E-4	DESIGN
both many-to-one and one-to-one are represented as a property. entitypersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. so we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. the other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. if that assertion changes then this check needs to change as well. partially this is an issue with the overloading of the term "lazy" here	WITHOUT_CLASSIFICATION	0.9997290442339895	DESIGN	2.709557660106295E-4	WITHOUT_CLASSIFICATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999611544731513	WITHOUT_CLASSIFICATION	3.884552684869136E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999611544731513	WITHOUT_CLASSIFICATION	3.884552684869136E-5	DESIGN
roottablename = persistentclass.getroottable().getqualifiedname( factory.getdialect() factory.getdefaultcatalog() factory.getdefaultschema() )	WITHOUT_CLASSIFICATION	0.9997748276958998	WITHOUT_CLASSIFICATION	2.2517230410029856E-4	DESIGN
subclasses	WITHOUT_CLASSIFICATION	0.9995157699467285	WITHOUT_CLASSIFICATION	4.842300532714419E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999601751267025	WITHOUT_CLASSIFICATION	3.982487329744095E-5	DESIGN
protected void initpropertypaths(final string pathfinal type typefinal string[] columnsfinal string[] formulatemplatesfinal mapping factory)throws mappingexception {addformulapropertypath(path type formulatemplates)initpropertypaths(path type columns formulatemplates factory)}	WITHOUT_CLASSIFICATION	0.9998081634925515	WITHOUT_CLASSIFICATION	1.9183650744852555E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995293047305601	WITHOUT_CLASSIFICATION	4.7069526943993654E-4	DESIGN
custom sql (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9997427677261127	WITHOUT_CLASSIFICATION	2.572322738872637E-4	DESIGN
moved up from abstractentitypersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9937556619033745	WITHOUT_CLASSIFICATION	0.006244338096625463	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995293047305601	WITHOUT_CLASSIFICATION	4.7069526943993654E-4	DESIGN
aliases for identifier ( alias.id ) skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9998936195724833	WITHOUT_CLASSIFICATION	1.0638042751658303E-4	DESIGN
decide which resultset to get the property value from	WITHOUT_CLASSIFICATION	0.99988772084314	WITHOUT_CLASSIFICATION	1.1227915685990048E-4	DESIGN
note it is conceptually possible that a usertype could map null to a non-null value so the following is arguable	WITHOUT_CLASSIFICATION	0.9977532348774298	WITHOUT_CLASSIFICATION	0.002246765122570189	DESIGN
the contract of entitytuplizer.determineconcretesubclassentityname says that returning null is an indication that the specified entity-name (this.getentityname) should be used.	WITHOUT_CLASSIFICATION	0.9454244379357472	WITHOUT_CLASSIFICATION	0.054575562064252875	DESIGN
need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. using the collection's key type causes problems with property-ref keys	WITHOUT_CLASSIFICATION	0.9994618437089565	WITHOUT_CLASSIFICATION	5.381562910434398E-4	DESIGN
cache these since they are stateless this one could even be static	WITHOUT_CLASSIFICATION	0.8957445743719511	WITHOUT_CLASSIFICATION	0.10425542562804888	DESIGN
"as" is not in keywords	WITHOUT_CLASSIFICATION	0.9958945172145554	WITHOUT_CLASSIFICATION	0.00410548278544466	DESIGN
--commented out by inspection (12/4/04 910 am) public abstract void addcondition(string alias string[] columns string condition)	WITHOUT_CLASSIFICATION	0.9999939194849352	WITHOUT_CLASSIFICATION	6.0805150648635425E-6	DESIGN
use the id column alias	WITHOUT_CLASSIFICATION	0.9998665580337726	WITHOUT_CLASSIFICATION	1.3344196622740853E-4	DESIGN
private list aliases = new arraylist()	WITHOUT_CLASSIFICATION	0.9998571852837899	WITHOUT_CLASSIFICATION	1.4281471621016036E-4	DESIGN
columns.add(columnname) aliases.add(tablealias)	WITHOUT_CLASSIFICATION	0.9995293047305601	WITHOUT_CLASSIFICATION	4.7069526943993654E-4	DESIGN
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9761956495150093	WITHOUT_CLASSIFICATION	0.0238043504849907	DESIGN
revert to traditional hibernate behavior of setting initialpoolsize to minpoolsize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9984659200000661	WITHOUT_CLASSIFICATION	0.001534079999933972	DESIGN
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999130956285996	WITHOUT_CLASSIFICATION	8.690437140036816E-5	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9939975727826698	WITHOUT_CLASSIFICATION	0.006002427217330286	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9939975727826698	WITHOUT_CLASSIFICATION	0.006002427217330286	DESIGN
if an exception occurs during flush user must call rollback()	WITHOUT_CLASSIFICATION	0.9999753188113342	WITHOUT_CLASSIFICATION	2.4681188665834244E-5	DESIGN
essentially 1) if we have a local (hibernate) transaction in progress and it already has the usertransaction cached use that usertransaction to determine the status. 2) if a transaction manager has been located use that transaction manager to determine the status. 3) finally as the last resort try to lookup the usertransaction via jndi and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999996603180052	WITHOUT_CLASSIFICATION	3.3968199475526065E-7	DESIGN
package	WITHOUT_CLASSIFICATION	0.9982030614286861	WITHOUT_CLASSIFICATION	0.0017969385713138724	DESIGN
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.999811117347994	WITHOUT_CLASSIFICATION	1.8888265200600832E-4	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9998348143295244	WITHOUT_CLASSIFICATION	1.651856704756345E-4	DESIGN
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database) since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.7923775781602439	WITHOUT_CLASSIFICATION	0.2076224218397561	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9998972679895243	WITHOUT_CLASSIFICATION	1.0273201047566034E-4	DESIGN
regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed) so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999940112288451	WITHOUT_CLASSIFICATION	5.988771154839609E-6	DESIGN
then handle any user-defined entity modes	WITHOUT_CLASSIFICATION	0.9972540066991313	WITHOUT_CLASSIFICATION	0.002745993300868573	DESIGN
establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.998472379532868	WITHOUT_CLASSIFICATION	0.0015276204671318752	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9825169092131423	WITHOUT_CLASSIFICATION	0.017483090786857634	DESIGN
note this is being used from the process of shutting down a sessionfactory. specific things to consider (1) this clearing of the region should not propagate to other nodes on the cluster (if any) this is the cache-mode-local option bit (2) really just trying a best effort to cleanup after ourselves lock failures etc are not critical here this is the fail-silently option bit	WITHOUT_CLASSIFICATION	0.9999709558376774	DESIGN	2.9044162322637863E-5	WITHOUT_CLASSIFICATION
need to extract the component values and check for subtype replacements	WITHOUT_CLASSIFICATION	0.9977580498089555	WITHOUT_CLASSIFICATION	0.0022419501910445876	DESIGN
we ignore minimalputoverride. jbosscache putforexternalread is already about as minimal as we can get it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999888908747375	WITHOUT_CLASSIFICATION	1.1109125262459688E-5	DESIGN
for now just "re-flatten" the metamodel since this is temporary stuff anyway (hhh-1907)	WITHOUT_CLASSIFICATION	0.9545744484697805	WITHOUT_CLASSIFICATION	0.04542555153021958	DESIGN
configure the cache to use our tm	WITHOUT_CLASSIFICATION	0.9996070473810649	WITHOUT_CLASSIFICATION	3.9295261893509004E-4	DESIGN
this solution would allow us to eliminate the owner arg to disassemble() but what if the collection was null and then later had elements added? seems unsafe session.getpersistencecontext().getcollectionentry( (persistentcollection) value ).getkey()	WITHOUT_CLASSIFICATION	0.5797060687955268	WITHOUT_CLASSIFICATION	0.4202939312044733	DESIGN
make sure jbc doesn't look one up	WITHOUT_CLASSIFICATION	0.9998402913541725	WITHOUT_CLASSIFICATION	1.5970864582752852E-4	DESIGN
some collections are not lazy	WITHOUT_CLASSIFICATION	0.99314481282206	WITHOUT_CLASSIFICATION	0.006855187177939918	DESIGN
here we don't want to suspend the tx. if we do 1) we might be caching query results that reflect uncommitted changes. no tx == no wl on cache node so other threads can prematurely see those query results 2) no tx == immediate replication. more overhead plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.5435567894626577	WITHOUT_CLASSIFICATION	0.45644321053734227	DESIGN
return the (fully resolved) identifier value but do not resolve to the actual referenced entity instance note the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.999539400210045	WITHOUT_CLASSIFICATION	4.605997899550336E-4	DESIGN
add a zero (or quite low) timeout option so we don't block. ignore any timeoutexception. basically we forego caching the query result in order to avoid blocking. reads are done with suspended tx so they should not hold the lock for long. not caching the query result is ok since any subsequent read will just see the old result with its out-of-date timestamp that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999999786681196	WITHOUT_CLASSIFICATION	2.1331880453610876E-8	DESIGN
impl note takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method	WITHOUT_CLASSIFICATION	0.9872906995868559	WITHOUT_CLASSIFICATION	0.012709300413144095	DESIGN
we have the jbcwritemutex so no other local thread will be trying to write this key. it's possible here some remote thread has come in and changed the values again but since we are reading the values to write to jbc right now we know we are writing the latest values i.e. we don't assume that what we cached in entry.update() above is what we should write to jbc now. our write could be redundant i.e. we are writing what some remote thread just came in an wrote. there is a chance that yet another remote thread will update us and we'll then overwrite that later data in jbc. but all remote nodes will ignore that change in their localcache the only place it will live will be in jbc where it can only effect the initial state transfer values on newly joined nodes (i.e. populatelocalcache()).	WITHOUT_CLASSIFICATION	0.9679295021415744	WITHOUT_CLASSIFICATION	0.03207049785842569	DESIGN
local cache so we use synchronization	WITHOUT_CLASSIFICATION	0.9970174900144488	WITHOUT_CLASSIFICATION	0.002982509985551303	DESIGN
local cache so we use synchronization	WITHOUT_CLASSIFICATION	0.9970174900144488	WITHOUT_CLASSIFICATION	0.002982509985551303	DESIGN
don't need to lock the cache here since if someone else inserted the same pk first the insert would fail	WITHOUT_CLASSIFICATION	0.9999663886540995	WITHOUT_CLASSIFICATION	3.3611345900524194E-5	DESIGN
we need to grab the version value from the entity otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9794036425831361	WITHOUT_CLASSIFICATION	0.020596357416863963	DESIGN
we need to obtain the lock before any actions are executed since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999826186553074	WITHOUT_CLASSIFICATION	1.7381344692580595E-5	DESIGN
postdelete after actually deleting a row record the fact that the instance no longer exists on the database (needed for identity-column key generation) and remove it from the session cache	WITHOUT_CLASSIFICATION	0.998639023224434	WITHOUT_CLASSIFICATION	0.0013609767755660615	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9994214643638152	WITHOUT_CLASSIFICATION	5.785356361847798E-4	DESIGN
todo what else to do here?	DESIGN	0.95192937505513	DESIGN	0.048070624944869966	WITHOUT_CLASSIFICATION
put() has nowait semantics is this really appropriate? note that it needs to be async replication never local or sync	DESIGN	0.9856472515372603	DESIGN	0.014352748462739739	WITHOUT_CLASSIFICATION
'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. the need for it is intended to be alleviated with future developement thus it is not defined as an environment constant it is used to control whether we should consult the jdbc metadata to determine certain settings default values it is useful to not do this when the database may not be available (mainly in tools usage).	DESIGN	0.9999609676121457	DESIGN	3.903238785428072E-5	WITHOUT_CLASSIFICATION
todo get sql rendering out of this package!	DESIGN	0.7114196519580906	WITHOUT_CLASSIFICATION	0.2885803480419094	DESIGN
todo get sql rendering out of this package!	DESIGN	0.7114196519580906	WITHOUT_CLASSIFICATION	0.2885803480419094	DESIGN
todo eventually merge this with treecache and just add optional opt-lock support there.	DESIGN	0.9874214579411338	DESIGN	0.012578542058866216	WITHOUT_CLASSIFICATION
can happen because of the multiple ways cache.remove() can be invoked (	DESIGN	0.9999957842746737	WITHOUT_CLASSIFICATION	4.2157253262614646E-6	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea	DESIGN	0.991891001998922	WITHOUT_CLASSIFICATION	0.00810899800107805	DESIGN
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9999999205951084	DESIGN	7.940489161300112E-8	WITHOUT_CLASSIFICATION
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9999999205951084	DESIGN	7.940489161300112E-8	WITHOUT_CLASSIFICATION
fixme hacky workaround to jbcache-1202	DESIGN	0.9999763775922477	DESIGN	2.3622407752404166E-5	WITHOUT_CLASSIFICATION
fixme hacky workaround to jbcache-1202	DESIGN	0.9999763775922477	DESIGN	2.3622407752404166E-5	WITHOUT_CLASSIFICATION
todo i considered validating ts cache config here but decided to defer unti gettimestampscacheinstance() in case the cache is never actually used	DESIGN	0.9613668237264124	DESIGN	0.0386331762735876	WITHOUT_CLASSIFICATION
todo is this a valid operation on a timestamps cache?	DESIGN	0.9385734050524106	DESIGN	0.061426594947589355	WITHOUT_CLASSIFICATION
todo is this a valid operation on a timestamps cache?	DESIGN	0.9385734050524106	DESIGN	0.061426594947589355	WITHOUT_CLASSIFICATION
todo why not use the timestamp in a dataversion?	DESIGN	0.9934889151147681	DESIGN	0.006511084885231806	WITHOUT_CLASSIFICATION
can happen because of the multiple ways cache.remove() can be invoked (	DESIGN	0.9999957842746737	WITHOUT_CLASSIFICATION	4.2157253262614646E-6	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea	DESIGN	0.991891001998922	WITHOUT_CLASSIFICATION	0.00810899800107805	DESIGN
swaldman 2004-02-07 modify to allow null values to signify fall through to c3p0 poolconfig defaults	DESIGN	0.9974835137574903	WITHOUT_CLASSIFICATION	0.002516486242509715	DESIGN
turn hibernate.c3p0. into c3p0. so c3p0 gets a chance to see all hibernate.c3p0.	DESIGN	0.9728699501634552	WITHOUT_CLASSIFICATION	0.02713004983654484	DESIGN
todo this bit actually has to be called after all cascades! but since identity insert is called synchronously instead of asynchronously as other actions it isn't	DESIGN	0.7703863903884973	WITHOUT_CLASSIFICATION	0.2296136096115027	DESIGN
todo reenable if we also fix the above todo	DESIGN	0.7248064384558384	DESIGN	0.2751935615441616	WITHOUT_CLASSIFICATION
todo inefficient if that cache is just going to ignore the updated state!	DESIGN	0.936333554550924	WITHOUT_CLASSIFICATION	0.06366644544907608	DESIGN
we may be screwed here since the collection action is about to execute and we do not know the final owner key value	DESIGN	0.9999693176898364	WITHOUT_CLASSIFICATION	3.068231016351819E-5	DESIGN
create an action that will evict collection and entity regions based on queryspaces (table names). todo cache the autodetected information and pass it in instead.	DESIGN	0.8854517625953473	WITHOUT_CLASSIFICATION	0.11454823740465268	DESIGN
todo what else to do here?	DESIGN	0.95192937505513	DESIGN	0.048070624944869966	WITHOUT_CLASSIFICATION
todo modify the class definition if not already transformed	DESIGN	0.8744553226038201	DESIGN	0.12554467739617992	WITHOUT_CLASSIFICATION
todo what else to do here?	DESIGN	0.95192937505513	DESIGN	0.048070624944869966	WITHOUT_CLASSIFICATION
this is called by sessionfactory irregardless we just disregard here could also add a check to sessionfactory to only conditionally call start	DESIGN	0.931797491010175	WITHOUT_CLASSIFICATION	0.068202508989825	DESIGN
this is called by sessionfactory irregardless we just disregard here could also add a check to sessionfactory to only conditionally call stop	DESIGN	0.9494949570534104	WITHOUT_CLASSIFICATION	0.05050504294658973	DESIGN
todo to handle concurrent writes correctly this should return a lock to the client	DESIGN	0.9994419493954083	DESIGN	5.580506045917305E-4	WITHOUT_CLASSIFICATION
put() has nowait semantics is this really appropriate? note that it needs to be async replication never local or sync	DESIGN	0.9856472515372603	DESIGN	0.014352748462739739	WITHOUT_CLASSIFICATION
todo to handle concurrent writes correctly the client should pass in a lock	DESIGN	0.9808193222665681	DESIGN	0.019180677733431913	WITHOUT_CLASSIFICATION
todo assumes all collections disassemble to an array!	DESIGN	0.987084764629329	WITHOUT_CLASSIFICATION	0.012915235370670899	DESIGN
todo reuse the preloadevent	DESIGN	0.9249244831205271	WITHOUT_CLASSIFICATION	0.07507551687947284	DESIGN
todo this was added to support initializing an entity's entityentry snapshot during reattach this should be refactored to instead expose a method to assemble a entityentry based on this state for return.	DESIGN	0.9920389245911235	DESIGN	0.007961075408876476	WITHOUT_CLASSIFICATION
todo what is the implication of this?	DESIGN	0.8009514793764932	DESIGN	0.1990485206235068	WITHOUT_CLASSIFICATION
use count as the default. this mimics the old behavior although none might be a better option moving forward in the case of callable	DESIGN	0.9548539344965107	WITHOUT_CLASSIFICATION	0.045146065503489416	DESIGN
todo joinkeycolumnname & foreignkeycolumnname should be called either here or at a slightly higer level in the stack (to get all the information we need) right now hbmbinder does not support the	DESIGN	0.9987341076062037	DESIGN	0.0012658923937962298	WITHOUT_CLASSIFICATION
todo suck this into initlaziness!	DESIGN	0.9354962116065764	DESIGN	0.06450378839342356	WITHOUT_CLASSIFICATION
we have to set up the table later!! yuck	DESIGN	0.9994463134683116	WITHOUT_CLASSIFICATION	5.536865316885056E-4	DESIGN
todo better to degrade to lazy="false" if uninstrumented	DESIGN	0.5365096359260767	DESIGN	0.46349036407392347	WITHOUT_CLASSIFICATION
todo again how should this work for non-pojo entities?	DESIGN	0.9988703899347726	DESIGN	0.0011296100652273802	WITHOUT_CLASSIFICATION
todo this is a bit of copy/paste from indexedcollection.createprimarykey()	DESIGN	0.9848942092054623	DESIGN	0.015105790794537754	WITHOUT_CLASSIFICATION
this inner class implements a case statement.perhaps im being a bit over-clever here	DESIGN	0.6266895338045122	WITHOUT_CLASSIFICATION	0.37331046619548774	DESIGN
todo bad implementation cos it depends upon ordering of mapping doc fixing this requires that collection/persistentclass gain access to the mappings reference from configuration (or the filterdefinitions map directly) sometime during configuration.buildsessionfactory (after all the types/filter-defs are known and before building persisters).	DESIGN	0.8195523854270599	DESIGN	0.18044761457294015	WITHOUT_CLASSIFICATION
use of a stringbuffer to workaround a jdk bug	DESIGN	0.9912445538483611	DESIGN	0.00875544615163894	WITHOUT_CLASSIFICATION
hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9998531137703451	WITHOUT_CLASSIFICATION	1.4688622965495693E-4	DESIGN
fixme get the persistentclass	DESIGN	0.5080863565896522	DESIGN	0.4919136434103479	WITHOUT_CLASSIFICATION
fixme get the persistentclass	DESIGN	0.5080863565896522	DESIGN	0.4919136434103479	WITHOUT_CLASSIFICATION
icky workaround for mysql bug	DESIGN	0.8401638529715407	DESIGN	0.1598361470284593	WITHOUT_CLASSIFICATION
todo somehow add the newly created foreign keys to the internal collection	DESIGN	0.7601840896453979	DESIGN	0.23981591035460204	WITHOUT_CLASSIFICATION
todo possibly relax that	DESIGN	0.5450381004781393	DESIGN	0.45496189952186084	WITHOUT_CLASSIFICATION
todo possibly relax that	DESIGN	0.5450381004781393	DESIGN	0.45496189952186084	WITHOUT_CLASSIFICATION
todo possibly relax that	DESIGN	0.5450381004781393	DESIGN	0.45496189952186084	WITHOUT_CLASSIFICATION
use of a stringbuffer to workaround a jdk bug	DESIGN	0.9912445538483611	DESIGN	0.00875544615163894	WITHOUT_CLASSIFICATION
use a degenerated strategy for backward compatibility	DESIGN	0.9964951469168997	WITHOUT_CLASSIFICATION	0.003504853083100317	DESIGN
sets can be just a view of a part of another collection. do we need to copy it to be sure it won't be changing underneath us? ie. this.set.addall(set)	DESIGN	0.9582316863364014	WITHOUT_CLASSIFICATION	0.041768313663598566	DESIGN
note that i parameter is now unused (delete it?)	DESIGN	0.9308442772970836	WITHOUT_CLASSIFICATION	0.06915572270291642	DESIGN
just to help out during the load (ugly i know)	DESIGN	0.999515792888438	WITHOUT_CLASSIFICATION	4.842071115619824E-4	DESIGN
todo safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.9639728750568833	WITHOUT_CLASSIFICATION	0.036027124943116565	DESIGN
yick! need this for proper serialization/deserialization handling	DESIGN	0.7390517446261103	WITHOUT_CLASSIFICATION	0.26094825537388966	DESIGN
todo get sql rendering out of this package!	DESIGN	0.7114196519580906	WITHOUT_CLASSIFICATION	0.2885803480419094	DESIGN
todo get sql rendering out of this package!	DESIGN	0.7114196519580906	WITHOUT_CLASSIFICATION	0.2885803480419094	DESIGN
yuck!	DESIGN	0.9995412406281159	WITHOUT_CLASSIFICATION	4.587593718841749E-4	DESIGN
todo get sql rendering out of this package!	DESIGN	0.7114196519580906	WITHOUT_CLASSIFICATION	0.2885803480419094	DESIGN
todo not sure this is correct could not find docs on how to do this.	DESIGN	0.9999738306276905	DESIGN	2.616937230952587E-5	WITHOUT_CLASSIFICATION
hsql has no blob/clob support . but just put these here for now!	DESIGN	0.9997505792831173	WITHOUT_CLASSIFICATION	2.4942071688279654E-4	DESIGN
does this need holdlock also? return tablename + " with (updlock rowlock holdlock)"	DESIGN	0.9952434149426449	WITHOUT_CLASSIFICATION	0.004756585057355149	DESIGN
sql-server at least needed this dropped after use strange!	DESIGN	0.978280731124652	WITHOUT_CLASSIFICATION	0.021719268875348138	DESIGN
todo is there really any reason to kkeep trying if this fails once?	DESIGN	0.6980398523636042	DESIGN	0.30196014763639584	WITHOUT_CLASSIFICATION
tbd should this be varbinary($1)? registercolumntype(types.varbinary "binary($1)")	DESIGN	0.9078859274218201	WITHOUT_CLASSIFICATION	0.09211407257817994	DESIGN
is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9980982152809608	WITHOUT_CLASSIFICATION	0.0019017847190392618	DESIGN
xmlforest requires a new kind of function constructor	DESIGN	0.9969079160666877	WITHOUT_CLASSIFICATION	0.0030920839333123127	DESIGN
does this dialect support the alter table syntax?	DESIGN	0.9912968174491474	WITHOUT_CLASSIFICATION	0.008703182550852648	DESIGN
do we need to qualify index names with the schema name?	DESIGN	0.9962020237607381	WITHOUT_CLASSIFICATION	0.003797976239261917	DESIGN
does this dialect support the unique column syntax?	DESIGN	0.9450854614690913	WITHOUT_CLASSIFICATION	0.0549145385309087	DESIGN
does this dialect support check constraints?	DESIGN	0.8107501806721565	WITHOUT_CLASSIFICATION	0.18924981932784354	DESIGN
do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9892105710401063	WITHOUT_CLASSIFICATION	0.01078942895989366	DESIGN
does this dialect support the for update syntax?	DESIGN	0.9987389745200425	WITHOUT_CLASSIFICATION	0.0012610254799575453	DESIGN
does this dialect support the oracle-style for update nowait syntax?	DESIGN	0.9987389745200425	WITHOUT_CLASSIFICATION	0.0012610254799575453	DESIGN
does this dialect support for update of allowing particular rows to be locked?	DESIGN	0.9885174180231945	WITHOUT_CLASSIFICATION	0.011482581976805408	DESIGN
note there is a wierd implementation in the client side	DESIGN	0.9993394770674991	WITHOUT_CLASSIFICATION	6.605229325008795E-4	DESIGN
todo never reached since gettypename() actually throws an exception!	DESIGN	0.9970200410775545	WITHOUT_CLASSIFICATION	0.0029799589224454243	DESIGN
todo should we additionally check the current isolation mode explicitly?	DESIGN	0.9263792931083699	DESIGN	0.07362070689163011	WITHOUT_CLASSIFICATION
todo remove this and just have subclasses use isolater/isolatedwork directly	DESIGN	0.9946647195892544	DESIGN	0.005335280410745621	WITHOUT_CLASSIFICATION
todo should orphans really be deleted during lock???	DESIGN	0.944424217111745	DESIGN	0.055575782888255036	WITHOUT_CLASSIFICATION
orphans should not be deleted during merge??	DESIGN	0.9860240985897777	WITHOUT_CLASSIFICATION	0.01397590141022232	DESIGN
orphans should not be deleted during copy??	DESIGN	0.9860240985897777	WITHOUT_CLASSIFICATION	0.01397590141022232	DESIGN
i suppose?	DESIGN	0.9970743449846367	WITHOUT_CLASSIFICATION	0.0029256550153632568	DESIGN
todo suck this logic into the collection!	DESIGN	0.7366340284221742	DESIGN	0.2633659715778259	WITHOUT_CLASSIFICATION
todo an alternative is to check if the owner has changed if it hasn't then get the id from collection.getowner()	DESIGN	0.9552349924200951	WITHOUT_CLASSIFICATION	0.04476500757990486	DESIGN
todorefactor + make this method private	DESIGN	0.9923198322829286	WITHOUT_CLASSIFICATION	0.007680167717071396	DESIGN
todo we can actually just determine this from the incoming entityentry-s	DESIGN	0.9311996975280524	DESIGN	0.06880030247194753	WITHOUT_CLASSIFICATION
todo should this be an initializeentityeventlistener??? (watch out for performance!)	DESIGN	0.9728044076299995	DESIGN	0.027195592370000507	WITHOUT_CLASSIFICATION
todo better to pass the id in as an argument?	DESIGN	0.982552566842985	WITHOUT_CLASSIFICATION	0.01744743315701494	DESIGN
todo potentially look at optimizing these two arrays	DESIGN	0.5013095294231894	WITHOUT_CLASSIFICATION	0.49869047057681054	DESIGN
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.9997944824426481	DESIGN	2.0551755735198643E-4	WITHOUT_CLASSIFICATION
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.9997944824426481	DESIGN	2.0551755735198643E-4	WITHOUT_CLASSIFICATION
todo temporary	DESIGN	0.9373854502477247	DESIGN	0.06261454975227533	WITHOUT_CLASSIFICATION
todo not quite sure about the full implications of this!	DESIGN	0.8409179038838682	DESIGN	0.15908209611613175	WITHOUT_CLASSIFICATION
todo not quite sure about the full implications of this!	DESIGN	0.8409179038838682	DESIGN	0.15908209611613175	WITHOUT_CLASSIFICATION
todo ugly here	DESIGN	0.9896062483350698	DESIGN	0.010393751664930229	WITHOUT_CLASSIFICATION
this is kinda the best we can do	DESIGN	0.9347781384154412	WITHOUT_CLASSIFICATION	0.06522186158455869	DESIGN
todo this needn't exclude subclasses	DESIGN	0.5379628776411159	DESIGN	0.46203712235888406	WITHOUT_CLASSIFICATION
todo need map? the prob is a proper key right?	DESIGN	0.9994334535973142	DESIGN	5.665464026857344E-4	WITHOUT_CLASSIFICATION
todo i'd much rather have this done from #endloadingcollection(collectionpersisterloadingcollectionentry)	DESIGN	0.9588245805438781	DESIGN	0.041175419456122	WITHOUT_CLASSIFICATION
todo hack!!! note here we cleanup the load context when we have no more local lce entries. this "works" for the time being because really only the collection load contexts are implemented. long term this cleanup should become part of the "close result set" processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9777068535852121	DESIGN	0.02229314641478783	WITHOUT_CLASSIFICATION
todo should really move this log statement to collectiontype where this is used from	DESIGN	0.9999978070754716	DESIGN	2.192924528446165E-6	WITHOUT_CLASSIFICATION
todo keep seperate notions of qt[] here for shallow/non-shallow queries	DESIGN	0.5820880957446178	WITHOUT_CLASSIFICATION	0.4179119042553821	DESIGN
todo add this info to the translator and aggregate it here	DESIGN	0.956467239571218	DESIGN	0.04353276042878207	WITHOUT_CLASSIFICATION
todo move into collection type so we can use polymorphism!	DESIGN	0.9988654425656087	DESIGN	0.001134557434391276	WITHOUT_CLASSIFICATION
todo should we check the current isolation mode explicitly?	DESIGN	0.9232125840694865	DESIGN	0.07678741593051353	WITHOUT_CLASSIFICATION
todo suck into event class	DESIGN	0.735994835133935	DESIGN	0.2640051648660649	WITHOUT_CLASSIFICATION
do we even really need this? the update will fail anyway.	DESIGN	0.9999426311957652	WITHOUT_CLASSIFICATION	5.7368804234863584E-5	DESIGN
hum should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9880021488252374	WITHOUT_CLASSIFICATION	0.011997851174762658	DESIGN
todo would it be better to do a refresh from db?	DESIGN	0.9727569996754196	DESIGN	0.027243000324580487	WITHOUT_CLASSIFICATION
todo we use two visitors here inefficient!	DESIGN	0.7711103731515468	DESIGN	0.2288896268484532	WITHOUT_CLASSIFICATION
this class has no proxies (so do a shortcut)	DESIGN	0.9805383563737725	WITHOUT_CLASSIFICATION	0.01946164362622742	DESIGN
postload is needed for ejb3 todo reuse the postloadevent	DESIGN	0.9679272261554379	WITHOUT_CLASSIFICATION	0.03207277384456211	DESIGN
todo put this stuff back in to read snapshot from the second-level cache (needs some extra work)	DESIGN	0.8782874300284377	DESIGN	0.12171256997156232	WITHOUT_CLASSIFICATION
null or brand new collection this will also (inefficiently) handle arrays which have no snapshot so we can't do any better	DESIGN	0.9946960222446397	WITHOUT_CLASSIFICATION	0.005303977755360299	DESIGN
todo is this 100% correct?	DESIGN	0.995931656259725	DESIGN	0.004068343740274996	WITHOUT_CLASSIFICATION
todo iteratively get transient entities and retry merge until one of the following conditions 1) transientcopycache.size() == 0 2) transientcopycache.size() is not decreasing and copycache.size() is not increasing todo find out if retrying can add entities to copycache (don't think it can) for now just retry once throw transientobjectexception if there are still any transient entities	DESIGN	0.8974953055007552	WITHOUT_CLASSIFICATION	0.10250469449924486	DESIGN
entity name will not be available for non-pojo entities todo cache the entity name somewhere so that it is available to this exception	DESIGN	0.9835227298960504	DESIGN	0.01647727010394958	WITHOUT_CLASSIFICATION
todo we should throw an exception if we really know for sure that this is a detached instance rather than just assuming throw new staleobjectstateexception(entityname id)	DESIGN	0.9982811037106771	DESIGN	0.001718896289322909	WITHOUT_CLASSIFICATION
todo perhaps we should additionally require that the incoming entity version be equivalent to the defined unsaved-value?	DESIGN	0.9993953723633046	DESIGN	6.046276366954585E-4	WITHOUT_CLASSIFICATION
perhaps this should be an exception since it is only ever used in the above method?	DESIGN	0.940583735299695	DESIGN	0.059416264700305116	WITHOUT_CLASSIFICATION
put a placeholder in entries so we don't recurse back and try to save() the same object again. question should this be done before onsave() is called? likewise should it be done before onupdate()?	DESIGN	0.7900396230341769	WITHOUT_CLASSIFICATION	0.2099603769658232	DESIGN
todo merge into one method!	DESIGN	0.8829095447167697	DESIGN	0.1170904552832302	WITHOUT_CLASSIFICATION
todo refactor to .sql package	DESIGN	0.9622198967771132	DESIGN	0.03778010322288682	WITHOUT_CLASSIFICATION
provides query splitting methods which were originally in querytranslator. <br> todo this will need to be refactored at some point. @author josh	DESIGN	0.9776058774743389	DESIGN	0.022394122525661073	WITHOUT_CLASSIFICATION
todo this is one of the ugliest and most fragile pieces of code in hibernate.	DESIGN	0.9629054809285966	DESIGN	0.03709451907140341	WITHOUT_CLASSIFICATION
todo temporary needed because currently persister is the one that creates and renders the join fragments for inheritence hierarchies	DESIGN	0.5092779769786209	WITHOUT_CLASSIFICATION	0.490722023021379	DESIGN
todo better way?!?	DESIGN	0.7236045315006306	DESIGN	0.27639546849936936	WITHOUT_CLASSIFICATION
not possible to simply re-use the versionpropertynode here as it causes oom errors due to circularity (	DESIGN	0.9999156457032038	WITHOUT_CLASSIFICATION	8.435429679614709E-5	DESIGN
todothis is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9996187543547549	WITHOUT_CLASSIFICATION	3.8124564524519685E-4	DESIGN
todo this is a bit dodgy come up with a better way to check this (plus see above comment)	DESIGN	0.9999197401261815	DESIGN	8.025987381850131E-5	WITHOUT_CLASSIFICATION
even here if only properties mapped to the "base table" are referenced in the set and where clauses this could be handled by the basicdelegate. todo decide if it is better performance-wise to perform that check or to simply use the multitableupdatedelegate	DESIGN	0.9990297972393626	DESIGN	9.702027606375203E-4	WITHOUT_CLASSIFICATION
todo switch statements are always evil! we already had bugs because of forgotten token types. use polymorphism for this!	DESIGN	0.848764284175811	DESIGN	0.15123571582418904	WITHOUT_CLASSIFICATION
todo we really need to be able to deal with component paths here also this is difficult because the hql-sql grammar expects all those node types to be fromreferencenodes. one potential fix here would be to convert the intoclause to just use a fromclause/fromelement combo (as a child of the insertstatement) and move all this logic into the insertstatement. that's probably the easiest approach (read least amount of changes to the grammar and code) but just doesn't feel right as then an insert would contain 2 from-clauses	DESIGN	0.999861420638619	DESIGN	1.385793613809471E-4	WITHOUT_CLASSIFICATION
really there are two situations where it should be ok to allow the insertion into properties defined on a superclass 1) union-subclass with an abstract root entity 2) discrim-subclass #1 is handled already because of the fact that unionsubclasspersister alreay always returns 0 for this call we may want to disallow it for discrim-subclass just for consistency-sake (currently does not work anyway)	DESIGN	0.7532805149709513	DESIGN	0.24671948502904872	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9995412406281159	WITHOUT_CLASSIFICATION	4.587593718841749E-4	DESIGN
implicit joins are always(?) ok to reuse	DESIGN	0.9999928618270107	WITHOUT_CLASSIFICATION	7.138172989292076E-6	DESIGN
todo we may also want to check that the types here map to exactly one column/jdbc-type can't think of a situation where arithmetic expression between multi-column mappings makes any sense.	DESIGN	0.500406188540912	WITHOUT_CLASSIFICATION	0.499593811459088	DESIGN
we do not know either type blind guess!	DESIGN	0.9914282635269356	WITHOUT_CLASSIFICATION	0.008571736473064463	DESIGN
todo used to be exprnoparens! was this needed?	DESIGN	0.9999997239158672	DESIGN	2.760841327735657E-7	WITHOUT_CLASSIFICATION
todo replace this with a more elegant solution.	DESIGN	0.9985552764234715	DESIGN	0.0014447235765285569	WITHOUT_CLASSIFICATION
todo should this really return null? if not figure out something better to do here.	DESIGN	0.9955358754846911	DESIGN	0.004464124515308882	WITHOUT_CLASSIFICATION
todo get sql rendering out of this package!	DESIGN	0.7114196519580906	WITHOUT_CLASSIFICATION	0.2885803480419094	DESIGN
yuck!	DESIGN	0.9995412406281159	WITHOUT_CLASSIFICATION	4.587593718841749E-4	DESIGN
ignore it the incoming property could not be found so we cannot be sure what to do here. at the very least the safest is to simply not apply any dereference toggling	DESIGN	0.8646040292981443	DESIGN	0.13539597070185577	WITHOUT_CLASSIFICATION
todo most of below was taken verbatim from dotnode should either delegate this logic or super-type it	DESIGN	0.903071373783845	DESIGN	0.09692862621615493	WITHOUT_CLASSIFICATION
otherwise a trim-specification and/or a trim-character have been specified we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character the trim-source	DESIGN	0.9857851532412202	WITHOUT_CLASSIFICATION	0.014214846758779754	DESIGN
todo we should really just collect these from the various selectexpressions rather than regenerating here	DESIGN	0.996589559304859	DESIGN	0.003410440695141006	WITHOUT_CLASSIFICATION
todo is this a bit ugly?	DESIGN	0.9916605516815814	DESIGN	0.008339448318418546	WITHOUT_CLASSIFICATION
need a better way to define the suffixes here	DESIGN	0.8329346312731938	WITHOUT_CLASSIFICATION	0.16706536872680627	DESIGN
todo something much better - look at the type of the other expression! todo have comparisonexpression and/or arithmeticexpression rules complete the resolution of boolean nodes.	DESIGN	0.8033810461895555	DESIGN	0.19661895381044447	WITHOUT_CLASSIFICATION
todo what amount of significant digits need to be supported here? - from the decimalformat docs [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.8283387319127399	DESIGN	0.17166126808726012	WITHOUT_CLASSIFICATION
needed the "clazz_" check to work around union-subclasses todo is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9998006027509958	DESIGN	1.9939724900418847E-4	WITHOUT_CLASSIFICATION
we should actually rework this class to not implement parser and just process path expressions in the most convenient way.	DESIGN	0.979202985299691	DESIGN	0.02079701470030905	WITHOUT_CLASSIFICATION
the class is now way to complex!	DESIGN	0.9923049577439936	WITHOUT_CLASSIFICATION	0.007695042256006388	DESIGN
todo get sql rendering out of here	DESIGN	0.8573647120800663	WITHOUT_CLASSIFICATION	0.14263528791993385	DESIGN
todo is there a better way?	DESIGN	0.9770469122223995	DESIGN	0.022953087777600478	WITHOUT_CLASSIFICATION
must be done here because of side-effect! yuck	DESIGN	0.9981264179073914	WITHOUT_CLASSIFICATION	0.0018735820926085982	DESIGN
name from a super query (a bit inelegant that it shows up here)	DESIGN	0.994798503340336	WITHOUT_CLASSIFICATION	0.005201496659663992	DESIGN
we should reengineer this class so that rather than the current ad - hoc linear approach to processing a stream of tokens we instead build up a tree of expressions.	DESIGN	0.5517979961271343	DESIGN	0.44820200387286563	WITHOUT_CLASSIFICATION
this is ugly here but needed because its a subquery	DESIGN	0.936729864503651	WITHOUT_CLASSIFICATION	0.06327013549634909	DESIGN
unhappy about this being public is there a better way?	DESIGN	0.5103806847846988	WITHOUT_CLASSIFICATION	0.4896193152153013	DESIGN
make sure this is a defined parameter and check the incoming value type todo what should be the actual exception type here?	DESIGN	0.9999689171283767	DESIGN	3.108287162330615E-5	WITHOUT_CLASSIFICATION
todo this constructor form is only used from constructor directly below us can it go away?	DESIGN	0.9999478364302874	DESIGN	5.2163569712531445E-5	WITHOUT_CLASSIFICATION
todo copy/paste from sessionimpl pull up!	DESIGN	0.7683775699284242	WITHOUT_CLASSIFICATION	0.23162243007157568	DESIGN
todo should remove this exposure and have all references to the session's batcher use the connectionmanager.	DESIGN	0.9984932293177717	DESIGN	0.0015067706822282675	WITHOUT_CLASSIFICATION
todo should this get moved to persistentcontext? logically is persistentcontext the "thing" to which an interceptor gets attached?	DESIGN	0.9992897356309679	DESIGN	7.102643690321786E-4	WITHOUT_CLASSIFICATION
todo what type?	DESIGN	0.8070302145444034	DESIGN	0.19296978545559654	WITHOUT_CLASSIFICATION
todo should seriously consider not allowing a txn to begin from a child session can always route the request to the root session	DESIGN	0.986577380460006	DESIGN	0.013422619539994083	WITHOUT_CLASSIFICATION
short-circuit for performance	DESIGN	0.9970332239191919	WITHOUT_CLASSIFICATION	0.0029667760808081284	DESIGN
not absolutely necessary but does help with aggressive release	DESIGN	0.9733296018003923	WITHOUT_CLASSIFICATION	0.026670398199607762	DESIGN
todo remove these last two as batcher is no longer managing connections	DESIGN	0.9148946091289288	DESIGN	0.08510539087107116	WITHOUT_CLASSIFICATION
work around a bug in all known connection pools.	DESIGN	0.8966171427200849	WITHOUT_CLASSIFICATION	0.10338285727991513	DESIGN
todo make this the factory for "entity mode related" sessions also means making this the target of transaction-synch and the thing that knows how to cascade things between related sessions at that point perhaps this thing is a "sessioncontext" and connectionmanager is a "jdbccontext"? a "sessioncontext" should live in the impl package	DESIGN	0.9999951873494913	DESIGN	4.812650508674379E-6	WITHOUT_CLASSIFICATION
todo does this really need to be here? does the collection already have it's own up-to-date snapshot?	DESIGN	0.9999009476599301	DESIGN	9.905234006986708E-5	WITHOUT_CLASSIFICATION
todo the i==entityspan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9867773144763425	DESIGN	0.013222685523657443	WITHOUT_CLASSIFICATION
this form used from annotations (?). essentially the same as the above using a resultset-mapping reference but without cachemode readonly and comment. fixme annotations do not use it so it can be remove from my pov @deprecated @param query the sql query string @param resultsetref the result-set-mapping name @param queryspaces any specified query spaces (used for auto-flushing) @param cacheable whether the query results are cacheable @param cacheregion if cacheable the region into which to store the results @param timeout a jdbc-level timeout to be applied @param fetchsize a jdbc-level fetch-size to be applied @param flushmode the flush mode to use for this query @param parametertypes parameter type map @param callable does the query string represent a callable object (i.e. proc)	DESIGN	0.9999946925764084	DESIGN	5.307423591517569E-6	WITHOUT_CLASSIFICATION
todo add the notion of enabled filters to the cachekey to differentiate filtered collections from non-filtered but cachekey is currently used for both collections and entities would ideally need to define two seperate ones currently this works in conjuction with the check on defaultinitializecollectioneventhandler.initializecollectionfromcache() (which makes sure to not read from cache with enabled filters). early exit!!!!!	DESIGN	0.9999686183407598	DESIGN	3.138165924016385E-5	WITHOUT_CLASSIFICATION
for sets we should end the collection load after resolving the entities since we might call hashcode() on the elements todo or we could do this polymorphically and have two different operations implemented differently for arrays	DESIGN	0.9691399830480766	DESIGN	0.030860016951923457	WITHOUT_CLASSIFICATION
this is not very nice (and quite slow)	DESIGN	0.8841556063509948	DESIGN	0.1158443936490053	WITHOUT_CLASSIFICATION
use of trim() here is ugly?	DESIGN	0.9959719700348796	WITHOUT_CLASSIFICATION	0.004028029965120404	DESIGN
todo this is too conservative if all preceding joins were also inner joins we could use an inner join here	DESIGN	0.9791734086747016	DESIGN	0.020826591325298505	WITHOUT_CLASSIFICATION
todo look at the owning property and check that it isn't lazy (by instrumentation)	DESIGN	0.8255555452911045	DESIGN	0.17444445470889544	WITHOUT_CLASSIFICATION
todo inefficient	DESIGN	0.6102296721270669	WITHOUT_CLASSIFICATION	0.38977032787293314	DESIGN
why does this matter?	DESIGN	0.8402985173184389	WITHOUT_CLASSIFICATION	0.15970148268156117	DESIGN
from the collection of associations locate oja for the manytoone corresponding to this persister to fully define the many-to-many we need that oja so that we can use its alias here todo is there a better way here?	DESIGN	0.999959507646086	DESIGN	4.049235391394431E-5	WITHOUT_CLASSIFICATION
todo this class depends directly upon criteriaimpl in the impl package add a criteriaimplementor interface	DESIGN	0.9900998859170249	DESIGN	0.009900114082974995	WITHOUT_CLASSIFICATION
todo add a criteriaimplementor interface this class depends directly upon criteriaimpl in the impl package	DESIGN	0.9900998859170249	DESIGN	0.009900114082974995	WITHOUT_CLASSIFICATION
todo not so sure this is needed	DESIGN	0.7086888113792826	DESIGN	0.2913111886207175	WITHOUT_CLASSIFICATION
meant to handle dynamic instantiation queries(copy from queryloader)	DESIGN	0.997700666595376	WITHOUT_CLASSIFICATION	0.002299333404623879	DESIGN
todo the order in which entities are saved may matter (e.g. a particular transient entity may need to be saved before other transient entities can be saved keep retrying the batch of transient entities until either 1) there are no transient entities left in transientcopycache or 2) no transient entities were saved in the last batch for now just run through the transient entities and retry the merge	DESIGN	0.726006640754556	DESIGN	0.27399335924544405	WITHOUT_CLASSIFICATION
todo this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9999982206453989	DESIGN	1.77935460110566E-6	WITHOUT_CLASSIFICATION
todo currently expects that the individual with expressions apply to the same sql table join. this may not be the case for joined-subclass where the property values might be coming from different tables in the joined hierarchy. at some point we should expand this to support that capability. however that has some difficulties 1) the biggest is how to handle ors when the individual comparisons are linked to different sql joins. 2) here we would need to track each comparison individually along with the join alias to which it applies and then pass that information back to the fromelement so it can pass it along to the joinsequence	DESIGN	0.9974863081466998	DESIGN	0.0025136918533000758	WITHOUT_CLASSIFICATION
this function has a template -> restore output apply the template and write the result out todo downcast to avoid using an interface? yuck.	DESIGN	0.9796363276036945	WITHOUT_CLASSIFICATION	0.02036367239630554	DESIGN
at some point the generate phase needs to be moved out of here because a single object-level dml might spawn multiple sql dml command executions. possible to just move the sql generation for dml stuff but for consistency-sake probably best to just move responsiblity for the generation phase completely into the delegates (queryloader/statementexecutor) themselves. also not sure why queryloader currently even has a dependency on this at all does it need it? ideally like to see the walker itself given to the delegates directly	DESIGN	0.9999999755262152	DESIGN	2.447378474515747E-8	WITHOUT_CLASSIFICATION
get the right object from the list would it be easier to just call getentity() ??	DESIGN	0.9908430494035675	WITHOUT_CLASSIFICATION	0.009156950596432416	DESIGN
todo should we just collect these like with the collections above?	DESIGN	0.9977566180682542	DESIGN	0.002243381931745755	WITHOUT_CLASSIFICATION
todo better to handle dynamic filters through implicit dynamicfilterparameterspecification see the discussion there in dynamicfilterparameterspecification's javadocs as to why it is currently not done that way.	DESIGN	0.9991846385456723	DESIGN	8.15361454327748E-4	WITHOUT_CLASSIFICATION
/ used only for regression testing!!!! todo obviously get rid of all this junk ) /	DESIGN	0.9920821999925257	DESIGN	0.007917800007474315	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9999804055912611	WITHOUT_CLASSIFICATION	1.959440873890903E-5	DESIGN
todo deprecated remove eventually	DESIGN	0.8292902447063334	DESIGN	0.17070975529366664	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9999804055912611	WITHOUT_CLASSIFICATION	1.959440873890903E-5	DESIGN
todo improve this hack!	DESIGN	0.9979616902436084	DESIGN	0.0020383097563916657	WITHOUT_CLASSIFICATION
inheritance cycle detection (paranoid check)	DESIGN	0.9992667889230704	WITHOUT_CLASSIFICATION	7.332110769297012E-4	DESIGN
todo remove use of instanceof!	DESIGN	0.9601112620791606	DESIGN	0.039888737920839294	WITHOUT_CLASSIFICATION
shortcut	DESIGN	0.9997595746621458	WITHOUT_CLASSIFICATION	2.4042533785424453E-4	DESIGN
todo handle the case of a foreign key to something other than the pk	DESIGN	0.6865275961764168	WITHOUT_CLASSIFICATION	0.3134724038235831	DESIGN
create an index on the key columns??	DESIGN	0.9999804055912611	WITHOUT_CLASSIFICATION	1.959440873890903E-5	DESIGN
todo remove	DESIGN	0.8025586443685749	DESIGN	0.19744135563142506	WITHOUT_CLASSIFICATION
todo remove	DESIGN	0.8025586443685749	DESIGN	0.19744135563142506	WITHOUT_CLASSIFICATION
todo remove	DESIGN	0.8025586443685749	DESIGN	0.19744135563142506	WITHOUT_CLASSIFICATION
todo throw exception?	DESIGN	0.6244221919982356	DESIGN	0.37557780800176443	WITHOUT_CLASSIFICATION
todo throw exception? maybe warn if not the same?	DESIGN	0.9682171812305387	DESIGN	0.03178281876946123	WITHOUT_CLASSIFICATION
todo make entitypersister not depend on sessionfactoryimplementor interface if possible	DESIGN	0.9218363533050764	DESIGN	0.07816364669492358	WITHOUT_CLASSIFICATION
todo is there a more elegant way than downcasting?	DESIGN	0.9924042459784139	DESIGN	0.007595754021586062	WITHOUT_CLASSIFICATION
todo encapsulate the protected instance variables!	DESIGN	0.6838935335516588	WITHOUT_CLASSIFICATION	0.3161064664483412	DESIGN
should indicate that we are processing an insert/update/delete query with a subquery implied via a collection property function. here we need to use the table name itself as the qualification alias. todo verify this works for all databases todo is this also the case in non-"indexed" scenarios?	DESIGN	0.9973934595225363	DESIGN	0.002606540477463645	WITHOUT_CLASSIFICATION
todo copy/paste from insertrows()	DESIGN	0.6194268604761558	WITHOUT_CLASSIFICATION	0.38057313952384425	DESIGN
todo copy/paste from recreate()	DESIGN	0.6194268604761558	WITHOUT_CLASSIFICATION	0.38057313952384425	DESIGN
should this interface extend propertymapping?	DESIGN	0.9585006993353151	WITHOUT_CLASSIFICATION	0.041499300664684935	DESIGN
ie. the subquery! yuck!	DESIGN	0.9995503676555135	WITHOUT_CLASSIFICATION	4.4963234448640836E-4	DESIGN
todo move to .sql package!!	DESIGN	0.9726910332285076	DESIGN	0.027308966771492495	WITHOUT_CLASSIFICATION
todo code duplication with singletableentitypersister	DESIGN	0.8066860505299634	DESIGN	0.19331394947003655	WITHOUT_CLASSIFICATION
todo it would be really really nice to use this to also model components!	DESIGN	0.9995290206099365	DESIGN	4.7097939006352375E-4	WITHOUT_CLASSIFICATION
todo two hashmap lookups here is one too many	DESIGN	0.6014444512334045	WITHOUT_CLASSIFICATION	0.3985555487665955	DESIGN
todo code duplication with joinedsubclassentitypersister	DESIGN	0.8066860505299634	DESIGN	0.19331394947003655	WITHOUT_CLASSIFICATION
perhaps not really necessary	DESIGN	0.9315554274264919	DESIGN	0.06844457257350811	WITHOUT_CLASSIFICATION
note this assumes something about how propertyselectfragment is implemented by the subclass! was tounqotedaliasstrings( getidentifercolumnnames() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.9844530266707339	WITHOUT_CLASSIFICATION	0.015546973329266198	DESIGN
note this assumes something about how propertyselectfragment is implemented by the subclass! was tounqotedaliasstrings( getdiscriminatorcolumnname() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.9844530266707339	WITHOUT_CLASSIFICATION	0.015546973329266198	DESIGN
todo should we use select .. for update?	DESIGN	0.9585790777027515	DESIGN	0.04142092229724839	WITHOUT_CLASSIFICATION
todo optimize this better!	DESIGN	0.8219447228621153	DESIGN	0.17805527713788463	WITHOUT_CLASSIFICATION
todo should we allow suffixes on these ?	DESIGN	0.9929731745198711	DESIGN	0.007026825480128913	WITHOUT_CLASSIFICATION
this is really ugly but necessary	DESIGN	0.8201681757615966	DESIGN	0.17983182423840338	WITHOUT_CLASSIFICATION
ugly little workaround for fact that createuniquekeyloaders() does not handle component properties	DESIGN	0.9999929323795571	DESIGN	7.067620442949084E-6	WITHOUT_CLASSIFICATION
todo disable batch loading if lockmode > read?	DESIGN	0.9942940416060295	WITHOUT_CLASSIFICATION	0.005705958393970532	DESIGN
append the sql to return the generated identifier todo suck into insert	DESIGN	0.6163267019355919	WITHOUT_CLASSIFICATION	0.38367329806440803	DESIGN
todo i am not so sure about the exception handling in this bit!	DESIGN	0.9973964995783791	DESIGN	0.002603500421620971	WITHOUT_CLASSIFICATION
todo is this really necessary????	DESIGN	0.9388171882246995	DESIGN	0.06118281177530039	WITHOUT_CLASSIFICATION
todo move to .sql package and refactor with similar things!	DESIGN	0.9988309194678341	DESIGN	0.0011690805321658334	WITHOUT_CLASSIFICATION
todo implement functionality this might be painful to do here as the "join post processing" for the subquery has already been performed (meaning that for theta-join dialects the join conditions have already been moved over to the where clause). a "simple" solution here might to perform "join post processing" once for the entire query (including any subqueries) at one fell swoop	DESIGN	0.9996624989308545	DESIGN	3.375010691454634E-4	WITHOUT_CLASSIFICATION
todo this eventually needs to be removed	DESIGN	0.8983672719955716	DESIGN	0.10163272800442837	WITHOUT_CLASSIFICATION
kinda ugly but needed for collections with a "." node mapping	DESIGN	0.9607107823216101	WITHOUT_CLASSIFICATION	0.03928921767838995	DESIGN
is this ok?	DESIGN	0.9949400212308632	WITHOUT_CLASSIFICATION	0.005059978769136745	DESIGN
todo perhaps this should be some other runtimeexception	DESIGN	0.9999843770004966	DESIGN	1.5622999503504065E-5	WITHOUT_CLASSIFICATION
todo make this a bit nicer	DESIGN	0.9863744299920866	DESIGN	0.013625570007913439	WITHOUT_CLASSIFICATION
yuck	DESIGN	0.99730546049007	WITHOUT_CLASSIFICATION	0.0026945395099300692	DESIGN
todo we should provide some way to get keys of collection of statistics to make it easier to retrieve from a gui perspective	DESIGN	0.9999707712354451	DESIGN	2.9228764554924113E-5	WITHOUT_CLASSIFICATION
@return collection removal fixme even if isinverse="true"?	DESIGN	0.8453499869836433	DESIGN	0.1546500130163568	WITHOUT_CLASSIFICATION
todo will need reference to session factory to fully complete hhh-1907	DESIGN	0.940356902130104	DESIGN	0.059643097869895995	WITHOUT_CLASSIFICATION
todo currently keeps getters and setters (instead of propertyaccessors) because of the way getgetter() and getsetter() are implemented currently yuck!	DESIGN	0.6433313416969905	WITHOUT_CLASSIFICATION	0.35666865830300964	DESIGN
todo redesign how propertyaccessors are acquired	DESIGN	0.8677561397737382	DESIGN	0.13224386022626178	WITHOUT_CLASSIFICATION
todo yuck!!!	DESIGN	0.7162322947075465	WITHOUT_CLASSIFICATION	0.28376770529245354	DESIGN
todo yuck!!! fix after hhh-1907 is complete	DESIGN	0.9673341199539107	DESIGN	0.0326658800460893	WITHOUT_CLASSIFICATION
todo need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9748562998821974	DESIGN	0.02514370011780265	WITHOUT_CLASSIFICATION
todo design new lifecycle for proxyfactory	DESIGN	0.7554077298058818	WITHOUT_CLASSIFICATION	0.24459227019411825	DESIGN
todo would be nice to handle proxy classes elegantly!	DESIGN	0.9324685563252118	DESIGN	0.06753144367478829	WITHOUT_CLASSIFICATION
todo copy/paste from manytoonetype	DESIGN	0.6194268604761558	WITHOUT_CLASSIFICATION	0.38057313952384425	DESIGN
todo should this be session.instantiate(persister )?	DESIGN	0.9911876895775966	DESIGN	0.008812310422403286	WITHOUT_CLASSIFICATION
todo this is a bit arbitrary expose a switch to the user?	DESIGN	0.8965752315029035	DESIGN	0.10342476849709657	WITHOUT_CLASSIFICATION
todo implement caching?! proxies?!	DESIGN	0.8603630076109063	DESIGN	0.13963699238909374	WITHOUT_CLASSIFICATION
todo is this right??	DESIGN	0.738031927821967	DESIGN	0.2619680721780331	WITHOUT_CLASSIFICATION
is this really necessary?	DESIGN	0.9505192686857482	WITHOUT_CLASSIFICATION	0.049480731314251805	DESIGN
todo move these to a new joinabletype abstract class extended by entitytype and persistentcollectiontype	DESIGN	0.9921612991591134	DESIGN	0.007838700840886519	WITHOUT_CLASSIFICATION
todo this is very suboptimal for some subclasses (namely components) since it does not take advantage of two-phase-load	DESIGN	0.9628176840094591	DESIGN	0.037182315990541004	WITHOUT_CLASSIFICATION
worrying about proxies is perhaps a little bit of overkill here	DESIGN	0.993484533183093	DESIGN	0.006515466816906966	WITHOUT_CLASSIFICATION
note very hackish workaround!! todo fix this so it will work for non-pojo entity mode	DESIGN	0.9998179101114835	DESIGN	1.8208988851649516E-4	WITHOUT_CLASSIFICATION
todo fix this so it will work for non-pojo entity mode	DESIGN	0.9918442888204254	DESIGN	0.008155711179574603	WITHOUT_CLASSIFICATION
we would probably refactor to have logicparser (builds a tree of simple expressions connected by and or not) expressionparser (translates from oo terms like foo foo.bar foo.bar.baz to sql terms like foos.id foos.bar_id etc) and pathexpressionparser (which does much the same thing it does now)	DESIGN	0.9983499067115894	WITHOUT_CLASSIFICATION	0.0016500932884104984	DESIGN
todo this is a little inefficient don't need to do a whole deep replaceelements() call	DESIGN	0.9997707696512365	DESIGN	2.2923034876347898E-4	WITHOUT_CLASSIFICATION
workaround for weblogic	DESIGN	0.7845257925712732	DESIGN	0.21547420742872683	WITHOUT_CLASSIFICATION
todo this dependency is kinda bad	DESIGN	0.9643245826485441	DESIGN	0.03567541735145591	WITHOUT_CLASSIFICATION
ick!	DESIGN	0.9995412406281159	WITHOUT_CLASSIFICATION	4.587593718841749E-4	DESIGN
short cut check	DESIGN	0.9971599518241971	WITHOUT_CLASSIFICATION	0.0028400481758028453	DESIGN
todo move to stringhelper?	DESIGN	0.9726910332285076	DESIGN	0.027308966771492495	WITHOUT_CLASSIFICATION
yukky! don't you have subclasses for that! todo race conditions can happen here	DESIGN	0.9424613930048741	WITHOUT_CLASSIFICATION	0.057538606995126015	DESIGN
todo we probably should have a statisticsnotpublishedexception to make it clean	DESIGN	0.9997773540637518	DESIGN	2.226459362482143E-4	WITHOUT_CLASSIFICATION
fixme hack to work around fact that calling node added = root.addchild( fqn ) doesn't properly set the version on the node	DESIGN	0.9999999280368355	DESIGN	7.196316445608832E-8	WITHOUT_CLASSIFICATION
todo i considered validating the presence of the ts cache here but decided to defer unti getquerycacheinstance() in case the cache is never actually used	DESIGN	0.9647174258291323	DESIGN	0.03528257417086777	WITHOUT_CLASSIFICATION
need to do that here rather than in the save event listener to let the post insert events to have a id-filled entity when identity is used (ejb3)	DESIGN	0.8147290586343517	DESIGN	0.18527094136564823	WITHOUT_CLASSIFICATION
todo simply remove this override if we fix the above todos	DESIGN	0.9950575511395402	DESIGN	0.004942448860459864	WITHOUT_CLASSIFICATION
this is used by sessionfactoryimpl to hand to the generated sessionimpl was the only reason i could see that we cannot just use null as settings.cacheprovider	DESIGN	0.7088837198436387	DESIGN	0.2911162801563612	WITHOUT_CLASSIFICATION
this is done here 'cos we might only know the type here (ugly!) todo improve this a lot	DESIGN	0.9972178733791532	DESIGN	0.0027821266208467544	WITHOUT_CLASSIFICATION
todo would love to have this work on a notification basis where the successful binding of an entity/subclass would emit a notification which the extendsqueue entries could react to	DESIGN	0.7856895052549682	DESIGN	0.21431049474503186	WITHOUT_CLASSIFICATION
todo not sure the best way to handle this. the non-performant way	DESIGN	0.9901102050353657	DESIGN	0.009889794964634241	WITHOUT_CLASSIFICATION
would be better to use the element-type to determine whether the old and the new are equal here the problem being we do not necessarily have access to the element type in all cases	DESIGN	0.9646186506724254	WITHOUT_CLASSIFICATION	0.0353813493275746	DESIGN
this next bit is to allow for both unsaved-value="negative" and for "older" behavior where version number did not get seeded if it was already set in the object todo shift it into unsaved-value strategy	DESIGN	0.9993626748375624	DESIGN	6.37325162437568E-4	WITHOUT_CLASSIFICATION
merges don't cascade to uninitialized collections todo perhaps this does need to cascade after all.	DESIGN	0.9991582279045649	DESIGN	8.417720954351439E-4	WITHOUT_CLASSIFICATION
todo an alternative is to check if the owner has changed if it hasn't then return collection.getowner()	DESIGN	0.9801619070703964	WITHOUT_CLASSIFICATION	0.019838092929603642	DESIGN
it is possible that the tree-walking in outerjoinloader can get to an association defined by a subclass in which case the property-ref might refer to a property defined on a subclass of the current class in this case the table name is not known - this temporary solution assumes that the property-ref refers to a property of the subclass table that the association belongs to (a reasonable guess) todo fix this add outerjoinloadable.getsubclasspropertytablename(string propertyname)	DESIGN	0.9999998496665663	DESIGN	1.5033343365975874E-7	WITHOUT_CLASSIFICATION
this only works because collection entries are kept in a sequenced map by persistence context (maybe we should do like entities and keep a separate sequences set) todo calling entryset on an identitymap is slow!!	DESIGN	0.9980635277808649	DESIGN	0.0019364722191351099	WITHOUT_CLASSIFICATION
important to account for newly saved entities in query todo some kind of check for new status	DESIGN	0.9783394003732537	DESIGN	0.02166059962674632	WITHOUT_CLASSIFICATION
brand new collection todo or an array!! we can't lock objects with arrays now??	DESIGN	0.5632379963133166	DESIGN	0.43676200368668344	WITHOUT_CLASSIFICATION
todo if object was an uninitialized proxy this is inefficient resulting in two sql selects	DESIGN	0.8066696904897098	WITHOUT_CLASSIFICATION	0.1933303095102902	DESIGN
before cascade! todo should this be session.instantiate(persister )?	DESIGN	0.9807514368511495	DESIGN	0.01924856314885039	WITHOUT_CLASSIFICATION
todo absolutely no usages of this constructor form can it go away?	DESIGN	0.9501045664519594	DESIGN	0.049895433548040595	WITHOUT_CLASSIFICATION
todo need to find a clean way to handle the "event source" role a seperate classs responsible for generating/dispatching events just duplicates most of the session methods passing around seperate reto interceptor factory actionqueue and persistentcontext is not manageable	DESIGN	0.9999999932759501	DESIGN	6.7240498291067905E-9	WITHOUT_CLASSIFICATION
todo remove	DESIGN	0.8025586443685749	DESIGN	0.19744135563142506	WITHOUT_CLASSIFICATION
aliasrefnode.resolve( false false aliasrefnode.gettext() ) todo is it kosher to do it here? todo is it kosher to do it here?	DESIGN	0.738306724308324	DESIGN	0.261693275691676	WITHOUT_CLASSIFICATION
no explicit select expression render the id and properties projection lists for every persister in the from clause into a single 'token node'. todo the only reason we need this stuff now is collection filters we should get rid of derived select clause completely!	DESIGN	0.9997059278435376	DESIGN	2.940721564623833E-4	WITHOUT_CLASSIFICATION
todo an optimization here would be to consider cascade deletes and not gen those delete statements the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> the table info gotten here should really be self-contained (i.e. a class representation defining all the needed attributes) then we could then get an array of those	DESIGN	0.9998109071451595	DESIGN	1.8909285484062239E-4	WITHOUT_CLASSIFICATION
todo get sql rendering out of here create an ast for the join expressions. use the sql generator grammar to generate the sql text for the index expression.	DESIGN	0.9992257941846526	WITHOUT_CLASSIFICATION	7.742058153473927E-4	DESIGN
todo this really needs to be delayed unitl after we definitively know all node types where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DESIGN	0.9612427592946347	DESIGN	0.03875724070536534	WITHOUT_CLASSIFICATION
todo figure out a better way to get the from elements in a proper tree structure. if this is not the destination of a many-to-many add it as a child of the origin.	DESIGN	0.9840403356523133	DESIGN	0.015959664347686663	WITHOUT_CLASSIFICATION
work around that crazy issue where the tree contains "empty" fromelements (no text) afaict this is caused by fromelementfactory.createcollectionjoin()	DESIGN	0.8827561765490309	WITHOUT_CLASSIFICATION	0.1172438234509691	DESIGN
todo this class does too many things! we need a different kind of path expression parser for each of the diffferent ways in which path expressions can occur	DESIGN	0.9983489963841377	DESIGN	0.001651003615862302	WITHOUT_CLASSIFICATION
real hacky used to count the nesting of parentheses	DESIGN	0.9697764369134689	WITHOUT_CLASSIFICATION	0.030223563086531097	DESIGN
todo would be really nice to cache the spec on the query-def so as to not have to re-calc the hash currently not doable though because of the resultset-ref stuff	DESIGN	0.9920963901090355	WITHOUT_CLASSIFICATION	0.007903609890964442	DESIGN
for arrays we should end the collection load before resolving the entities since the actual array instances are not instantiated during loading todo or we could do this polymorphically and have two different operations implemented differently for arrays	DESIGN	0.5132537855330268	WITHOUT_CLASSIFICATION	0.48674621446697325	DESIGN
polymorphism not really handled completely correctly perhapswell actually its ok assuming that the entity name used in the lookup is the same as the the one used here which it will be	DESIGN	0.9710890754930742	WITHOUT_CLASSIFICATION	0.028910924506925822	DESIGN
todo should "record" how many properties we have reffered to - and if we don't get'em'all we throw an exception! way better than trial and error )	DESIGN	0.9999954022153702	DESIGN	4.597784629732015E-6	WITHOUT_CLASSIFICATION
very important!!!! - this class needs to be free of any static references to any cglib or javassist classes. otherwise users will always need both on their classpaths no matter which (if either) they use. another option here would be to remove the hibernate.ispropertyinitialized() method and have the users go through the sessionfactory to get this information.	DESIGN	0.810925669024209	DESIGN	0.189074330975791	WITHOUT_CLASSIFICATION
todo is it really neceassry to provide configuration to collectionpersisters ? should it not be enough with associated class ? or why does entitypersister's not get access to configuration ? the only reason i could see that configuration gets passed to collection persisters is so that they can look up the dom4j node name of the entity element in case no explicit node name was applied at the collection element level. are you kidding me? trivial to fix then. just store and expose the node name on the entity persister (which the collection persister looks up anyway via other means).	DESIGN	0.9999999982483939	DESIGN	1.751606130213073E-9	WITHOUT_CLASSIFICATION
for backward compatibility allow a set with no not-null element columns using all columns in the row locater sql todo create an implicit not null constraint on all cols?	DESIGN	0.640522224075593	WITHOUT_CLASSIFICATION	0.35947777592440705	DESIGN
spaces todo i'm not sure but perhaps we should exclude abstract denormalized tables?	DESIGN	0.9992570611343642	DESIGN	7.429388656358384E-4	WITHOUT_CLASSIFICATION
workaround for backward compatibility of sets with no not-null columns assume all columns are used in the row locator sql	DESIGN	0.6917181106031297	DESIGN	0.30828188939687023	WITHOUT_CLASSIFICATION
note that this method could easily be moved up to basicentitypersister if we ever needed to reuse it from other subclasses	DESIGN	0.6590564761811464	WITHOUT_CLASSIFICATION	0.3409435238188536	DESIGN
index += getpropertycolumnspan( i ) todo this is kinda slow	DESIGN	0.9083468695084806	DESIGN	0.09165313049151935	WITHOUT_CLASSIFICATION
todo need some caching scheme? really comes down to decision regarding amount of state (if any) kept on propertyaccessors	DESIGN	0.5101050394576984	DESIGN	0.4898949605423016	WITHOUT_CLASSIFICATION
todo here is why we need to make bytecode provider global ( todo again fix this after hhh-1907 is complete	DESIGN	0.9999145049465219	DESIGN	8.549505347818928E-5	WITHOUT_CLASSIFICATION
todo yuck! this is not quite good enough it's a quick hack around the problem of having a to-one association that refers to an embedded component	DESIGN	0.9999999992170149	DESIGN	7.829851448114922E-10	WITHOUT_CLASSIFICATION
for dom4j "collections" only todo it would be better if this was done at the higher level by printer	DESIGN	0.6944606365525768	DESIGN	0.3055393634474231	WITHOUT_CLASSIFICATION
would be great to move all this below here into another method that could also be used from the new scrolling stuff. would need to change the way the max-row stuff is handled (i.e. behind an interface) so that i could do the control breaking at the means to know when to stop	DESIGN	0.9999999934364959	DESIGN	6.563504025506686E-9	WITHOUT_CLASSIFICATION
todo can we always use the "null property" approach for everything?	DESIGN	0.9460326620741472	DESIGN	0.05396733792585293	WITHOUT_CLASSIFICATION
polymorphism comment above	DESIGN	0.9999567698786107	WITHOUT_CLASSIFICATION	4.323012138938777E-5	DESIGN
some messy complex stuff here since createcriteria() can take an aliased path or a path rooted at the creating criteria instance	DESIGN	0.9999983946969456	WITHOUT_CLASSIFICATION	1.6053030544314955E-6	DESIGN
todo really bad evil hack to fix!!!	DESIGN	0.9999996760364505	DESIGN	3.239635494496005E-7	WITHOUT_CLASSIFICATION
ugly hack for cases like "elements(foo.bar.collection)" (multi-part path expression ending in elements or indices)	DESIGN	0.9885038553900706	DESIGN	0.011496144609929536	WITHOUT_CLASSIFICATION
try block is a hack around fact that currently tuplizers are not given the opportunity to resolve a subclass entity name. this allows the (we assume custom) interceptor the ability to influence this decision if we were not able to based on the given entityname	DESIGN	0.9999988618990748	DESIGN	1.1381009251238182E-6	WITHOUT_CLASSIFICATION
/ hack alert !!!!!!!!!!!!!!!!!!!!!!!!!!!! attempt to work around "ghost" impliedfromelements that occasionally show up between the actual things being joined. this consistently occurs from index nodes (at least against many-to-many). not sure if there are other conditions essentially look-ahead to the next fromelement that actually writes something to the sql	DESIGN	0.9011958938422303	DESIGN	0.09880410615776973	WITHOUT_CLASSIFICATION
init the table here instead of earlier so that we can get a quoted table name todo would it be better to simply pass the qualified table name instead of splitting it up into schema/catalog/table names	DESIGN	0.8843860758987836	DESIGN	0.11561392410121643	WITHOUT_CLASSIFICATION
todo would be great to have a mapping#hasnonidentifierpropertynamedid method i don't believe that mapping#getreferencedpropertytype accounts for the identifier property so if it returns for a property named 'id' then we should have a non-id field named id	DESIGN	0.9981342382340468	DESIGN	0.001865761765953166	WITHOUT_CLASSIFICATION
todo is this really necessary????	DESIGN	0.9388171882246995	DESIGN	0.06118281177530039	WITHOUT_CLASSIFICATION
todo ideally we need the construction of propertyaccessor to take the following 1) entitymode 2) entitymode-specific data (i.e. the classname for pojo entities) 3) property-specific data based on the entitymode (i.e. property-name or dom4j-node-name) the easiest way with the introduction of the new runtime-metamodel classes would be the the following predicates 1) propertyaccessorfactory.getpropertyaccessor() takes references to both a org.hibernate.metadata.entitymodemetadata and org.hibernate.metadata.property 2) what is now termed a "propertyaccessor" stores any values needed from those two pieces of information 3) code can then simply call propertyaccess.getgetter() with no parameters likewise with propertyaccessor.getsetter()	DESIGN	0.9813786573758689	DESIGN	0.018621342624131065	WITHOUT_CLASSIFICATION
todo this is temporary in that the end result will probably not take a property reference per-se.	DESIGN	0.9976392773704711	DESIGN	0.0023607226295289684	WITHOUT_CLASSIFICATION
todo this eventually needs to be removed	DESIGN	0.8983672719955716	DESIGN	0.10163272800442837	WITHOUT_CLASSIFICATION
todo make this a bit nicer	DESIGN	0.9863744299920866	DESIGN	0.013625570007913439	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9970234213716513	DESIGN	0.002976578628348637	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9970234213716513	DESIGN	0.002976578628348637	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9970234213716513	DESIGN	0.002976578628348637	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9970234213716513	DESIGN	0.002976578628348637	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9970234213716513	DESIGN	0.002976578628348637	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9970234213716513	DESIGN	0.002976578628348637	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9970234213716513	DESIGN	0.002976578628348637	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9970234213716513	DESIGN	0.002976578628348637	WITHOUT_CLASSIFICATION
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9999999205951084	DESIGN	7.940489161300112E-8	WITHOUT_CLASSIFICATION
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9999999205951084	DESIGN	7.940489161300112E-8	WITHOUT_CLASSIFICATION
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9999999205951084	DESIGN	7.940489161300112E-8	WITHOUT_CLASSIFICATION
todo probably better to calculate these and pass them in as it'll be more performant	DESIGN	0.986988551522986	DESIGN	0.013011448477013928	WITHOUT_CLASSIFICATION
