test out the optimizer	WITHOUT_CLASSIFICATION	0.9999919356537655	WITHOUT_CLASSIFICATION	8.064346234426057E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999450284444955	WITHOUT_CLASSIFICATION	5.49715555044493E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999450284444955	WITHOUT_CLASSIFICATION	5.49715555044493E-5	DESIGN
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9970810178056846	WITHOUT_CLASSIFICATION	0.0029189821943153725	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9999241018871162	WITHOUT_CLASSIFICATION	7.589811288385047E-5	DESIGN
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999306940382533	WITHOUT_CLASSIFICATION	6.93059617467399E-5	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999864323287082	WITHOUT_CLASSIFICATION	1.3567671291722809E-5	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999864323287082	WITHOUT_CLASSIFICATION	1.3567671291722809E-5	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999378593529561	WITHOUT_CLASSIFICATION	6.214064704391954E-5	DESIGN
invokeinterface invoke enabled.getinterceptfieldcallback()	WITHOUT_CLASSIFICATION	0.9994675313993797	WITHOUT_CLASSIFICATION	5.324686006203302E-4	DESIGN
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9996942296715129	WITHOUT_CLASSIFICATION	3.0577032848714636E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9998170249271348	WITHOUT_CLASSIFICATION	1.8297507286515883E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999922971252524	WITHOUT_CLASSIFICATION	7.702874747570082E-6	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999922971252524	WITHOUT_CLASSIFICATION	7.702874747570082E-6	DESIGN
long	WITHOUT_CLASSIFICATION	0.9999027545221737	WITHOUT_CLASSIFICATION	9.72454778263924E-5	DESIGN
just decrement the lock don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999297121838758	WITHOUT_CLASSIFICATION	7.028781612416219E-5	DESIGN
decode row selection	WITHOUT_CLASSIFICATION	0.9999379007163264	WITHOUT_CLASSIFICATION	6.209928367366774E-5	DESIGN
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9997023495889515	WITHOUT_CLASSIFICATION	2.97650411048468E-4	DESIGN
again ccs did not have such a concept but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not jta aware.	WITHOUT_CLASSIFICATION	0.9999608981958252	WITHOUT_CLASSIFICATION	3.9101804174813536E-5	DESIGN
check	WITHOUT_CLASSIFICATION	0.9999490140332878	WITHOUT_CLASSIFICATION	5.098596671211483E-5	DESIGN
row id	WITHOUT_CLASSIFICATION	0.9998891863108944	WITHOUT_CLASSIFICATION	1.1081368910552389E-4	DESIGN
composite-id	WITHOUT_CLASSIFICATION	0.9999241018871162	WITHOUT_CLASSIFICATION	7.589811288385047E-5	DESIGN
discriminator	WITHOUT_CLASSIFICATION	0.9999241348078899	WITHOUT_CLASSIFICATION	7.58651921100135E-5	DESIGN
property prop = new property() prop.setname("id") prop.setpropertyaccessorname("embedded") prop.setvalue(id) entity.setidentifierproperty(prop)	WITHOUT_CLASSIFICATION	0.9999672130093193	WITHOUT_CLASSIFICATION	3.278699068061964E-5	DESIGN
dynamic insert	WITHOUT_CLASSIFICATION	0.9999435151972155	WITHOUT_CLASSIFICATION	5.648480278456903E-5	DESIGN
persister	WITHOUT_CLASSIFICATION	0.9998527927461955	WITHOUT_CLASSIFICATION	1.4720725380448841E-4	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9997766954156767	WITHOUT_CLASSIFICATION	2.233045843233348E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.999741305613005	WITHOUT_CLASSIFICATION	2.586943869949716E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.999741305613005	WITHOUT_CLASSIFICATION	2.586943869949716E-4	DESIGN
generated properties can never be insertable	WITHOUT_CLASSIFICATION	0.997311466369526	WITHOUT_CLASSIFICATION	0.0026885336304741008	DESIGN
table	WITHOUT_CLASSIFICATION	0.99996747711792	WITHOUT_CLASSIFICATION	3.2522882079983604E-5	DESIGN
by default natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9980340052301697	WITHOUT_CLASSIFICATION	0.0019659947698302967	DESIGN
( (column) ( (simplevalue) ic.getindex() ).getcolumniterator().next() ).setnullable(false)	WITHOUT_CLASSIFICATION	0.999429565748009	WITHOUT_CLASSIFICATION	5.704342519910507E-4	DESIGN
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9804004770253685	WITHOUT_CLASSIFICATION	0.019599522974631536	DESIGN
build a resultsetmappingdefinition given a containing element for the "return-xxx" elements @param resultsetelem the element containing the return definitions. @param path no clue @param mappings the current processing state. @return the description of the mappings	WITHOUT_CLASSIFICATION	0.9996512994115033	WITHOUT_CLASSIFICATION	3.487005884967286E-4	DESIGN
private boolean showsql private boolean formatsql	WITHOUT_CLASSIFICATION	0.9998948599400631	WITHOUT_CLASSIFICATION	1.0514005993684969E-4	DESIGN
public boolean isshowsqlenabled() { return showsql } public boolean isformatsqlenabled() { return formatsql }	WITHOUT_CLASSIFICATION	0.9998611376276233	WITHOUT_CLASSIFICATION	1.3886237237676762E-4	DESIGN
set a custom entity resolver. this entity resolver must be set before addxxx(misc) call. default value is {@link org.hibernate.util.dtdentityresolver} @param entityresolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9385915334761064	WITHOUT_CLASSIFICATION	0.06140846652389357	DESIGN
final list extendsqueue	WITHOUT_CLASSIFICATION	0.9995630016612117	WITHOUT_CLASSIFICATION	4.369983387883755E-4	DESIGN
if close() is called guarantee unbind()	WITHOUT_CLASSIFICATION	0.999687075067241	WITHOUT_CLASSIFICATION	3.129249327590627E-4	DESIGN
if a threadlocalsessioncontext-bound session happens to get serialized to be completely correct we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9905918015555705	WITHOUT_CLASSIFICATION	0.009408198444429515	DESIGN
on the inverse it makes sense that if a threadlocalsessioncontext- bound session then gets deserialized to go ahead and re-bind it to the threadlocalsessioncontext session map.	WITHOUT_CLASSIFICATION	0.9983354981709198	WITHOUT_CLASSIFICATION	0.001664501829080097	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998794861976171	WITHOUT_CLASSIFICATION	1.2051380238286278E-4	DESIGN
60 second lock timeout	WITHOUT_CLASSIFICATION	0.999915910298088	WITHOUT_CLASSIFICATION	8.408970191202926E-5	DESIGN
optimisticcache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996248827209578	WITHOUT_CLASSIFICATION	3.75117279042202E-4	DESIGN
cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999680302617678	WITHOUT_CLASSIFICATION	3.1969738232199234E-4	DESIGN
option.setdataversion( nonlockingdataversion.instance )	WITHOUT_CLASSIFICATION	0.9991653560730299	WITHOUT_CLASSIFICATION	8.346439269700429E-4	DESIGN
do the put outside the scope of the jta txn	WITHOUT_CLASSIFICATION	0.9995149433689167	WITHOUT_CLASSIFICATION	4.8505663108342026E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (npes)	WITHOUT_CLASSIFICATION	0.9884829471246285	WITHOUT_CLASSIFICATION	0.011517052875371412	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.999915186780571	WITHOUT_CLASSIFICATION	8.481321942898356E-5	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.999915186780571	WITHOUT_CLASSIFICATION	8.481321942898356E-5	DESIGN
do the failfast put outside the scope of the jta txn	WITHOUT_CLASSIFICATION	0.9995149433689167	WITHOUT_CLASSIFICATION	4.8505663108342026E-4	DESIGN
note evict() operates locally only (i.e. does not propogate to any other nodes in the potential cluster). this is exactly what is needed when we destroy() here destroy() is used as part of the process of shutting down a sessionfactory thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.6432633613623964	WITHOUT_CLASSIFICATION	0.3567366386376037	DESIGN
protected regionrootlistener listener	WITHOUT_CLASSIFICATION	0.9976197893579268	WITHOUT_CLASSIFICATION	0.00238021064207312	DESIGN
establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9997284694382816	WITHOUT_CLASSIFICATION	2.715305617182611E-4	DESIGN
if we've been blocking for the mutex perhaps another thread has already reestablished the root. in case the node was reestablised via replication confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.999921038158928	WITHOUT_CLASSIFICATION	7.896184107201357E-5	DESIGN
for pessimistic locking we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9993655295087498	WITHOUT_CLASSIFICATION	6.34470491250154E-4	DESIGN
the rest only matters for optimistic locking where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9966047565364281	WITHOUT_CLASSIFICATION	0.003395243463571888	DESIGN
don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9574269662889995	WITHOUT_CLASSIFICATION	0.04257303371100042	DESIGN
make sure the root node for the region exists and has a dataversion that never complains	WITHOUT_CLASSIFICATION	0.9997306112193793	WITHOUT_CLASSIFICATION	2.693887806206225E-4	DESIGN
never evict this node	WITHOUT_CLASSIFICATION	0.9998462517300033	WITHOUT_CLASSIFICATION	1.5374826999668876E-4	DESIGN
fix up the resident flag	WITHOUT_CLASSIFICATION	0.9997293796859476	WITHOUT_CLASSIFICATION	2.70620314052518E-4	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.999915186780571	WITHOUT_CLASSIFICATION	8.481321942898356E-5	DESIGN
we ignore minimalputoverride. jbosscache putforexternalread is already about as minimal as we can get it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9995282951869165	WITHOUT_CLASSIFICATION	4.717048130834555E-4	DESIGN
no-op. we don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9993870985240617	WITHOUT_CLASSIFICATION	6.129014759382499E-4	DESIGN
this should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9988834788768923	WITHOUT_CLASSIFICATION	0.0011165211231076444	DESIGN
we only build caches if none were passed in. passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9974549200801768	WITHOUT_CLASSIFICATION	0.002545079919823259	DESIGN
set up the cache factory	WITHOUT_CLASSIFICATION	0.9997977006600332	WITHOUT_CLASSIFICATION	2.022993399668375E-4	DESIGN
see if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9998737853103398	WITHOUT_CLASSIFICATION	1.2621468966014698E-4	DESIGN
default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9997143668092279	WITHOUT_CLASSIFICATION	2.8563319077208377E-4	DESIGN
default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999017982182152	WITHOUT_CLASSIFICATION	9.820178178476087E-5	DESIGN
for timestamps we default to a separate config	WITHOUT_CLASSIFICATION	0.993698630561536	WITHOUT_CLASSIFICATION	0.006301369438463967	DESIGN
we can't change the tm on a running cache just check if the cache has no tm and we're ok with that	WITHOUT_CLASSIFICATION	0.9999482273162925	WITHOUT_CLASSIFICATION	5.177268370755265E-5	DESIGN
configure the cache to use our tm	WITHOUT_CLASSIFICATION	0.9995655940719164	WITHOUT_CLASSIFICATION	4.344059280836184E-4	DESIGN
make sure jbc doesn't look one up	WITHOUT_CLASSIFICATION	0.9998912728047261	WITHOUT_CLASSIFICATION	1.0872719527381173E-4	DESIGN
this method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9814387319736453	WITHOUT_CLASSIFICATION	0.018561268026354688	DESIGN
make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9990255059422467	WITHOUT_CLASSIFICATION	9.744940577532058E-4	DESIGN
we use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9988382211526714	WITHOUT_CLASSIFICATION	0.0011617788473286194	DESIGN
following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9983618689149992	WITHOUT_CLASSIFICATION	0.0016381310850007663	DESIGN
if jbc is using invalidation we don't want to propagate changes. we use the timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9955583214470473	WITHOUT_CLASSIFICATION	0.004441678552952665	DESIGN
we don't want to waste effort setting an option if jbc is already in local mode. if jbc is repl_(a)sync then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9911314734436977	WITHOUT_CLASSIFICATION	0.008868526556302325	DESIGN
don't hold the jbc node lock throughout the tx as that prevents updates add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999949953154998	WITHOUT_CLASSIFICATION	5.004684500160826E-6	DESIGN
double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999914124390845	WITHOUT_CLASSIFICATION	8.587560915447849E-6	DESIGN
get an exclusive right to update jbc for this key from this node.	WITHOUT_CLASSIFICATION	0.9948302941979726	WITHOUT_CLASSIFICATION	0.005169705802027433	DESIGN
we ensure async semantics (jbcache-1175)	WITHOUT_CLASSIFICATION	0.9969063873875916	WITHOUT_CLASSIFICATION	0.003093612612408297	DESIGN
initial load from jbc	WITHOUT_CLASSIFICATION	0.999932546962441	WITHOUT_CLASSIFICATION	6.745303755889801E-5	DESIGN
see if we had a 2nd invalidation from the same initial preinvalidation timestamp. if so only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999320277271071	WITHOUT_CLASSIFICATION	6.79722728929389E-5	DESIGN
we ensure async semantics (jbcache-1175)	WITHOUT_CLASSIFICATION	0.9969063873875916	WITHOUT_CLASSIFICATION	0.003093612612408297	DESIGN
if the workspace node has null as well ok if not we've been modified in a non-comparable manner which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.999981645472363	WITHOUT_CLASSIFICATION	1.8354527636963703E-5	DESIGN
the standard comparator types are not serializable but are singletons	WITHOUT_CLASSIFICATION	0.999449096929989	WITHOUT_CLASSIFICATION	5.509030700110538E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9999299427151714	WITHOUT_CLASSIFICATION	7.005728482850988E-5	DESIGN
construct the cache	WITHOUT_CLASSIFICATION	0.9999852858442668	WITHOUT_CLASSIFICATION	1.4714155733132887E-5	DESIGN
local cache so we use synchronization	WITHOUT_CLASSIFICATION	0.998613970315876	WITHOUT_CLASSIFICATION	0.001386029684124119	DESIGN
local cache so we use synchronization	WITHOUT_CLASSIFICATION	0.998613970315876	WITHOUT_CLASSIFICATION	0.001386029684124119	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999245357343082	WITHOUT_CLASSIFICATION	7.546426569182138E-5	DESIGN
swaldman 2006-08-28 define c3p0-style configuration parameters for initialpoolsize which hibernate sensibly lets default to minpoolsize but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9993225463709553	WITHOUT_CLASSIFICATION	6.774536290446909E-4	DESIGN
datasource unpooled = datasources.unpooleddatasource(jdbcurl props.getproperty(environment.user) props.getproperty(environment.pass))	WITHOUT_CLASSIFICATION	0.9999160254598517	WITHOUT_CLASSIFICATION	8.39745401482966E-5	DESIGN
true if the pool is borrowed from the outside false if we used to create it	WITHOUT_CLASSIFICATION	0.9946057713994869	WITHOUT_CLASSIFICATION	0.00539422860051305	DESIGN
get a connection from the pool (thru drivermanager cfr. proxool doc)	WITHOUT_CLASSIFICATION	0.999521509942667	WITHOUT_CLASSIFICATION	4.7849005733296166E-4	DESIGN
set the transaction isolation if defined	WITHOUT_CLASSIFICATION	0.9998002560993114	WITHOUT_CLASSIFICATION	1.9974390068862937E-4	DESIGN
toggle autocommit to false if set	WITHOUT_CLASSIFICATION	0.9981971342040197	WITHOUT_CLASSIFICATION	0.0018028657959802507	DESIGN
return the connection	WITHOUT_CLASSIFICATION	0.9999802249170499	WITHOUT_CLASSIFICATION	1.97750829500692E-5	DESIGN
get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999640916584708	WITHOUT_CLASSIFICATION	3.590834152925294E-5	DESIGN
default the proxool alias setting	WITHOUT_CLASSIFICATION	0.9999182883950614	WITHOUT_CLASSIFICATION	8.171160493869166E-5	DESIGN
validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.996531330248733	WITHOUT_CLASSIFICATION	0.0034686697512669464	DESIGN
validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.996531330248733	WITHOUT_CLASSIFICATION	0.0034686697512669464	DESIGN
append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9996223235663707	WITHOUT_CLASSIFICATION	3.776764336293646E-4	DESIGN
set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9997238463522189	WITHOUT_CLASSIFICATION	2.7615364778101216E-4	DESIGN
configured using the jaxp configurator	WITHOUT_CLASSIFICATION	0.9996071580521048	WITHOUT_CLASSIFICATION	3.9284194789518037E-4	DESIGN
validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.996531330248733	WITHOUT_CLASSIFICATION	0.0034686697512669464	DESIGN
append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9996223235663707	WITHOUT_CLASSIFICATION	3.776764336293646E-4	DESIGN
append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9996223235663707	WITHOUT_CLASSIFICATION	3.776764336293646E-4	DESIGN
configured using the properties file configurator	WITHOUT_CLASSIFICATION	0.9993066402475425	WITHOUT_CLASSIFICATION	6.933597524575065E-4	DESIGN
remember isolation level	WITHOUT_CLASSIFICATION	0.9998777104189234	WITHOUT_CLASSIFICATION	1.2228958107664723E-4	DESIGN
if the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999902814372602	WITHOUT_CLASSIFICATION	9.718562739787297E-6	DESIGN
we have created the pool ourselves so shut it down	WITHOUT_CLASSIFICATION	0.9999740072377507	WITHOUT_CLASSIFICATION	2.5992762249427976E-5	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9995552604876433	WITHOUT_CLASSIFICATION	4.447395123566773E-4	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9995552604876433	WITHOUT_CLASSIFICATION	4.447395123566773E-4	DESIGN
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9996012161038502	WITHOUT_CLASSIFICATION	3.9878389614979667E-4	DESIGN
public currency getcurrency(int col) throws hibernateexception	WITHOUT_CLASSIFICATION	0.9995991338549287	WITHOUT_CLASSIFICATION	4.0086614507124846E-4	DESIGN
default is pojo	WITHOUT_CLASSIFICATION	0.9999098779005559	WITHOUT_CLASSIFICATION	9.012209944408651E-5	DESIGN
use setparameter for null values	WITHOUT_CLASSIFICATION	0.9995901938934671	WITHOUT_CLASSIFICATION	4.0980610653289104E-4	DESIGN
use setparameter for null values	WITHOUT_CLASSIFICATION	0.9995901938934671	WITHOUT_CLASSIFICATION	4.0980610653289104E-4	DESIGN
private cacheentry cacheentry	WITHOUT_CLASSIFICATION	0.9999182185280764	WITHOUT_CLASSIFICATION	8.178147192355009E-5	DESIGN
don't need to lock the cache here since if someone else inserted the same pk first the insert would fail	WITHOUT_CLASSIFICATION	0.9851092117670754	WITHOUT_CLASSIFICATION	0.01489078823292458	DESIGN
make 100% certain that this is called before any subsequent scheduledupdate.aftertransactioncompletion()!!	WITHOUT_CLASSIFICATION	0.9973488321063947	WITHOUT_CLASSIFICATION	0.002651167893605309	DESIGN
get the updated snapshot of the entity state by cloning current state it is safe to copy in place since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.999457399799042	WITHOUT_CLASSIFICATION	5.426002009580664E-4	DESIGN
this entity defines proeprty generation so process those generated values	WITHOUT_CLASSIFICATION	0.9998097197756012	WITHOUT_CLASSIFICATION	1.9028022439877436E-4	DESIGN
have the entity entry perform post-update processing passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999357779285136	WITHOUT_CLASSIFICATION	6.422207148631499E-5	DESIGN
!persister.iscacheinvalidationrequired()	WITHOUT_CLASSIFICATION	0.999411103560662	WITHOUT_CLASSIFICATION	5.888964393379308E-4	DESIGN
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.998916635460967	WITHOUT_CLASSIFICATION	0.001083364539033103	DESIGN
sort first by role name	WITHOUT_CLASSIFICATION	0.9994809921014062	WITHOUT_CLASSIFICATION	5.190078985938784E-4	DESIGN
make 100% certain that this is called before any subsequent scheduledupdate.aftertransactioncompletion()!!	WITHOUT_CLASSIFICATION	0.9973488321063947	WITHOUT_CLASSIFICATION	0.002651167893605309	DESIGN
then by fk	WITHOUT_CLASSIFICATION	0.9997962649793729	WITHOUT_CLASSIFICATION	2.037350206270761E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999882884426534	WITHOUT_CLASSIFICATION	1.1711557346555193E-5	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999882884426534	WITHOUT_CLASSIFICATION	1.1711557346555193E-5	DESIGN
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.8210679891164622	WITHOUT_CLASSIFICATION	0.1789320108835378	DESIGN
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9809853451814424	WITHOUT_CLASSIFICATION	0.019014654818557523	DESIGN
boolean put = persister.getcache().insert(ck cacheentry)	WITHOUT_CLASSIFICATION	0.9999873076456908	WITHOUT_CLASSIFICATION	1.269235430911391E-5	DESIGN
we need to grab the version value from the entity otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9417319440248656	WITHOUT_CLASSIFICATION	0.058268055975134396	DESIGN
do nothing - we only need to notify the cache	WITHOUT_CLASSIFICATION	0.999607978596798	WITHOUT_CLASSIFICATION	3.920214032020554E-4	DESIGN
sort first by entity name	WITHOUT_CLASSIFICATION	0.9997624382709498	WITHOUT_CLASSIFICATION	2.375617290502879E-4	DESIGN
then by id	WITHOUT_CLASSIFICATION	0.9996433562053676	WITHOUT_CLASSIFICATION	3.566437946324803E-4	DESIGN
to be safe	WITHOUT_CLASSIFICATION	0.9998713046347216	WITHOUT_CLASSIFICATION	1.2869536527835448E-4	DESIGN
no transformations took place so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9990562831757585	WITHOUT_CLASSIFICATION	9.437168242414598E-4	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999622751747266	WITHOUT_CLASSIFICATION	3.772482527345612E-5	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999622751747266	WITHOUT_CLASSIFICATION	3.772482527345612E-5	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9998665593896974	WITHOUT_CLASSIFICATION	1.3344061030272494E-4	DESIGN
test out the optimizer	WITHOUT_CLASSIFICATION	0.9999919356537655	WITHOUT_CLASSIFICATION	8.064346234426057E-6	DESIGN
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9998435324041403	WITHOUT_CLASSIFICATION	1.5646759585970278E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
invokespecial	WITHOUT_CLASSIFICATION	0.9999241018871162	WITHOUT_CLASSIFICATION	7.589811288385047E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999450284444955	WITHOUT_CLASSIFICATION	5.49715555044493E-5	DESIGN
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999730828030231	WITHOUT_CLASSIFICATION	2.6917196976834773E-5	DESIGN
checkcast cast bean	WITHOUT_CLASSIFICATION	0.999893176763392	WITHOUT_CLASSIFICATION	1.0682323660801739E-4	DESIGN
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999426968584397	WITHOUT_CLASSIFICATION	5.7303141560298745E-5	DESIGN
aload_2 args	WITHOUT_CLASSIFICATION	0.999826743215746	WITHOUT_CLASSIFICATION	1.7325678425385348E-4	DESIGN
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.998358890825982	WITHOUT_CLASSIFICATION	0.001641109174018066	DESIGN
new	WITHOUT_CLASSIFICATION	0.9999087445860045	WITHOUT_CLASSIFICATION	9.125541399535705E-5	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9999316311704315	WITHOUT_CLASSIFICATION	6.836882956855997E-5	DESIGN
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.999985145339437	WITHOUT_CLASSIFICATION	1.485466056287434E-5	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9999241018871162	WITHOUT_CLASSIFICATION	7.589811288385047E-5	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9999241018871162	WITHOUT_CLASSIFICATION	7.589811288385047E-5	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9999241018871162	WITHOUT_CLASSIFICATION	7.589811288385047E-5	DESIGN
aastore args	WITHOUT_CLASSIFICATION	0.999826743215746	WITHOUT_CLASSIFICATION	1.7325678425385348E-4	DESIGN
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9923153180375432	WITHOUT_CLASSIFICATION	0.007684681962456811	DESIGN
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9993940558322679	WITHOUT_CLASSIFICATION	6.059441677321543E-4	DESIGN
istore_3 store i	WITHOUT_CLASSIFICATION	0.999676378529882	WITHOUT_CLASSIFICATION	3.236214701179803E-4	DESIGN
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999850387351779	WITHOUT_CLASSIFICATION	1.4961264822038496E-5	DESIGN
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9988754845708963	WITHOUT_CLASSIFICATION	0.0011245154291037733	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999864323287082	WITHOUT_CLASSIFICATION	1.3567671291722809E-5	DESIGN
start region to handling exception (bulkaccessorexception)	WITHOUT_CLASSIFICATION	0.9985762403548636	WITHOUT_CLASSIFICATION	0.0014237596451364422	DESIGN
iinc 3 1	WITHOUT_CLASSIFICATION	0.9997353876701222	WITHOUT_CLASSIFICATION	2.646123298778822E-4	DESIGN
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999674444708013	WITHOUT_CLASSIFICATION	3.255552919867812E-5	DESIGN
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999658444303277	WITHOUT_CLASSIFICATION	3.415556967242175E-5	DESIGN
iconst_i	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
aaload	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9999148048444609	WITHOUT_CLASSIFICATION	8.519515553904012E-5	DESIGN
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9998897802214926	WITHOUT_CLASSIFICATION	1.102197785074444E-4	DESIGN
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.999406563094325	WITHOUT_CLASSIFICATION	5.934369056750824E-4	DESIGN
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999811023679367	WITHOUT_CLASSIFICATION	1.8897632063220667E-5	DESIGN
end region to handling exception (bulkaccessorexception)	WITHOUT_CLASSIFICATION	0.9911814193886253	WITHOUT_CLASSIFICATION	0.008818580611374801	DESIGN
register in exception table	WITHOUT_CLASSIFICATION	0.9999658905187088	WITHOUT_CLASSIFICATION	3.410948129124037E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999450284444955	WITHOUT_CLASSIFICATION	5.49715555044493E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999450284444955	WITHOUT_CLASSIFICATION	5.49715555044493E-5	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9999316311704315	WITHOUT_CLASSIFICATION	6.836882956855997E-5	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9999241018871162	WITHOUT_CLASSIFICATION	7.589811288385047E-5	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9999148048444609	WITHOUT_CLASSIFICATION	8.519515553904012E-5	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999378593529561	WITHOUT_CLASSIFICATION	6.214064704391954E-5	DESIGN
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999668814795989	WITHOUT_CLASSIFICATION	3.311852040113939E-5	DESIGN
new bulkaccessorexception	WITHOUT_CLASSIFICATION	0.999857583221208	WITHOUT_CLASSIFICATION	1.4241677879211774E-4	DESIGN
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999844433257913	WITHOUT_CLASSIFICATION	1.5556674208736527E-5	DESIGN
iload_3 i	WITHOUT_CLASSIFICATION	0.999518323412768	WITHOUT_CLASSIFICATION	4.816765872318873E-4	DESIGN
invokespecial bulkaccessorexception.<init>	WITHOUT_CLASSIFICATION	0.999411103560662	WITHOUT_CLASSIFICATION	5.888964393379308E-4	DESIGN
athrow	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
warning classfile only	WITHOUT_CLASSIFICATION	0.9999814142065486	WITHOUT_CLASSIFICATION	1.8585793451418815E-5	DESIGN
swallow	WITHOUT_CLASSIFICATION	0.9999153309376362	WITHOUT_CLASSIFICATION	8.46690623637518E-5	DESIGN
local variable | this |	WITHOUT_CLASSIFICATION	0.999654994642638	WITHOUT_CLASSIFICATION	3.4500535736203716E-4	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9998709644706211	WITHOUT_CLASSIFICATION	1.290355293788678E-4	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9998709644706211	WITHOUT_CLASSIFICATION	1.290355293788678E-4	DESIGN
getfield get field "$javassist_callback" defined already	WITHOUT_CLASSIFICATION	0.9990286630676817	WITHOUT_CLASSIFICATION	9.713369323183526E-4	DESIGN
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.999815790606172	WITHOUT_CLASSIFICATION	1.8420939382789706E-4	DESIGN
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9911119165715773	WITHOUT_CLASSIFICATION	0.00888808342842281	DESIGN
aload_1 load callback	WITHOUT_CLASSIFICATION	0.999952053383685	WITHOUT_CLASSIFICATION	4.7946616314996506E-5	DESIGN
putfield put field "$javassist_callback" defined already	WITHOUT_CLASSIFICATION	0.9992147921682744	WITHOUT_CLASSIFICATION	7.852078317257418E-4	DESIGN
case of non-static field	WITHOUT_CLASSIFICATION	0.9999565209869542	WITHOUT_CLASSIFICATION	4.3479013045682375E-5	DESIGN
getfield get each field	WITHOUT_CLASSIFICATION	0.9999317423745199	WITHOUT_CLASSIFICATION	6.825762548015331E-5	DESIGN
invokeinterface invoke enabled.getinterceptfieldcallback()	WITHOUT_CLASSIFICATION	0.9994675313993797	WITHOUT_CLASSIFICATION	5.324686006203302E-4	DESIGN
ifnonnull	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9999662835280998	WITHOUT_CLASSIFICATION	3.371647190010151E-5	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9999662835280998	WITHOUT_CLASSIFICATION	3.371647190010151E-5	DESIGN
store_1 each type	WITHOUT_CLASSIFICATION	0.9999476806495339	WITHOUT_CLASSIFICATION	5.2319350466112835E-5	DESIGN
ldc name of the field	WITHOUT_CLASSIFICATION	0.999833980090405	WITHOUT_CLASSIFICATION	1.660199095950468E-4	DESIGN
load_1 each type	WITHOUT_CLASSIFICATION	0.9999476806495339	WITHOUT_CLASSIFICATION	5.2319350466112835E-5	DESIGN
invokeinterface invoke callback.read() each type	WITHOUT_CLASSIFICATION	0.9996328978078741	WITHOUT_CLASSIFICATION	3.671021921257987E-4	DESIGN
int	WITHOUT_CLASSIFICATION	0.9999420078188749	WITHOUT_CLASSIFICATION	5.799218112506828E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999450284444955	WITHOUT_CLASSIFICATION	5.49715555044493E-5	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9999316311704315	WITHOUT_CLASSIFICATION	6.836882956855997E-5	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9999241018871162	WITHOUT_CLASSIFICATION	7.589811288385047E-5	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9999148048444609	WITHOUT_CLASSIFICATION	8.519515553904012E-5	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9999148048444609	WITHOUT_CLASSIFICATION	8.519515553904012E-5	DESIGN
invokeinterface enabled.getinterceptfieldcallback()	WITHOUT_CLASSIFICATION	0.999411103560662	WITHOUT_CLASSIFICATION	5.888964393379308E-4	DESIGN
invokeinterface enabled.getinterceptfieldcallback()	WITHOUT_CLASSIFICATION	0.999411103560662	WITHOUT_CLASSIFICATION	5.888964393379308E-4	DESIGN
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999241018871162	WITHOUT_CLASSIFICATION	7.589811288385047E-5	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
putfield	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999450284444955	WITHOUT_CLASSIFICATION	5.49715555044493E-5	DESIGN
ldc field name	WITHOUT_CLASSIFICATION	0.9996444286175892	WITHOUT_CLASSIFICATION	3.555713824108495E-4	DESIGN
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9998797577480767	WITHOUT_CLASSIFICATION	1.202422519232826E-4	DESIGN
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.999411103560662	WITHOUT_CLASSIFICATION	5.888964393379308E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9998170249271348	WITHOUT_CLASSIFICATION	1.8297507286515883E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9998170249271348	WITHOUT_CLASSIFICATION	1.8297507286515883E-4	DESIGN
not array	WITHOUT_CLASSIFICATION	0.9999651029359767	WITHOUT_CLASSIFICATION	3.4897064023226575E-5	DESIGN
array of reference type	WITHOUT_CLASSIFICATION	0.9998473145807093	WITHOUT_CLASSIFICATION	1.526854192906657E-4	DESIGN
boolean	WITHOUT_CLASSIFICATION	0.9999734636455606	WITHOUT_CLASSIFICATION	2.653635443932201E-5	DESIGN
byte	WITHOUT_CLASSIFICATION	0.9999285023126672	WITHOUT_CLASSIFICATION	7.149768733293244E-5	DESIGN
char	WITHOUT_CLASSIFICATION	0.9999439813432225	WITHOUT_CLASSIFICATION	5.601865677755909E-5	DESIGN
short	WITHOUT_CLASSIFICATION	0.9999162000060056	WITHOUT_CLASSIFICATION	8.379999399449604E-5	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999922971252524	WITHOUT_CLASSIFICATION	7.702874747570082E-6	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999254085346245	WITHOUT_CLASSIFICATION	7.459146537550433E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999254085346245	WITHOUT_CLASSIFICATION	7.459146537550433E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.9999027545221737	WITHOUT_CLASSIFICATION	9.72454778263924E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.9999027545221737	WITHOUT_CLASSIFICATION	9.72454778263924E-5	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9997038228494673	WITHOUT_CLASSIFICATION	2.961771505327322E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9997038228494673	WITHOUT_CLASSIFICATION	2.961771505327322E-4	DESIGN
boolean byte char int short	WITHOUT_CLASSIFICATION	0.9999847747234105	WITHOUT_CLASSIFICATION	1.5225276589485015E-5	DESIGN
boolean byte char int short	WITHOUT_CLASSIFICATION	0.9999847747234105	WITHOUT_CLASSIFICATION	1.5225276589485015E-5	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9998170249271348	WITHOUT_CLASSIFICATION	1.8297507286515883E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999922971252524	WITHOUT_CLASSIFICATION	7.702874747570082E-6	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999254085346245	WITHOUT_CLASSIFICATION	7.459146537550433E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999254085346245	WITHOUT_CLASSIFICATION	7.459146537550433E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.9999027545221737	WITHOUT_CLASSIFICATION	9.72454778263924E-5	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9997038228494673	WITHOUT_CLASSIFICATION	2.961771505327322E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9997038228494673	WITHOUT_CLASSIFICATION	2.961771505327322E-4	DESIGN
boolean byte char int short	WITHOUT_CLASSIFICATION	0.9999847747234105	WITHOUT_CLASSIFICATION	1.5225276589485015E-5	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999362991847471	WITHOUT_CLASSIFICATION	6.370081525284755E-5	DESIGN
mainly for oscache	WITHOUT_CLASSIFICATION	0.9998799778905959	WITHOUT_CLASSIFICATION	1.2002210940417068E-4	DESIGN
decrement the lock	WITHOUT_CLASSIFICATION	0.9999721244281717	WITHOUT_CLASSIFICATION	2.787557182825726E-5	DESIGN
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9989207222387899	WITHOUT_CLASSIFICATION	0.0010792777612100585	DESIGN
recache the updated state	WITHOUT_CLASSIFICATION	0.9999863625206005	WITHOUT_CLASSIFICATION	1.3637479399552621E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999170649405604	WITHOUT_CLASSIFICATION	8.293505943957088E-5	DESIGN
null clientlock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9997892571370666	WITHOUT_CLASSIFICATION	2.1074286293343403E-4	DESIGN
we really could refresh the item if it is not a lock but it might be slower return freshtimestamp < txtimestamp	WITHOUT_CLASSIFICATION	0.9998032733998484	WITHOUT_CLASSIFICATION	1.9672660015155732E-4	DESIGN
by requiring < we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9998963084976731	WITHOUT_CLASSIFICATION	1.0369150232697005E-4	DESIGN
the user provided resulttransformer not the one used with "select new". here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9997501086990703	WITHOUT_CLASSIFICATION	2.4989130092968565E-4	DESIGN
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9995675504157829	WITHOUT_CLASSIFICATION	4.3244958421710596E-4	DESIGN
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999095564449701	WITHOUT_CLASSIFICATION	9.044355502987598E-5	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999245357343082	WITHOUT_CLASSIFICATION	7.546426569182138E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999170649405604	WITHOUT_CLASSIFICATION	8.293505943957088E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999170649405604	WITHOUT_CLASSIFICATION	8.293505943957088E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999170649405604	WITHOUT_CLASSIFICATION	8.293505943957088E-5	DESIGN
this is called from settingsfactory irregardless trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9891999545201423	WITHOUT_CLASSIFICATION	0.010800045479857582	DESIGN
do nothing subclasses may override.	WITHOUT_CLASSIFICATION	0.9997920881152921	WITHOUT_CLASSIFICATION	2.0791188470796975E-4	DESIGN
do nothing subclasses may override.	WITHOUT_CLASSIFICATION	0.9997920881152921	WITHOUT_CLASSIFICATION	2.0791188470796975E-4	DESIGN
throw new unsupportedoperationexception("can't write to a readonly object")	WITHOUT_CLASSIFICATION	0.9958060385809471	WITHOUT_CLASSIFICATION	0.004193961419052946	DESIGN
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9996428173688283	WITHOUT_CLASSIFICATION	3.5718263117171347E-4	DESIGN
persister.setidentifier(result id) before calling interceptor for consistency with normal load	WITHOUT_CLASSIFICATION	0.9998259417180025	WITHOUT_CLASSIFICATION	1.7405828199749718E-4	DESIGN
no-op ccs did not have such a concept	WITHOUT_CLASSIFICATION	0.9996387381190915	WITHOUT_CLASSIFICATION	3.612618809084607E-4	DESIGN
no-op ccs did not have such a concept	WITHOUT_CLASSIFICATION	0.9996387381190915	WITHOUT_CLASSIFICATION	3.612618809084607E-4	DESIGN
again ccs did not have such a concept but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not jta aware.	WITHOUT_CLASSIFICATION	0.9999608981958252	WITHOUT_CLASSIFICATION	3.9101804174813536E-5	DESIGN
again ccs did not have such a concept however a reasonable proximity is to clear the cache. for non-transaction aware caches we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9933894606263727	WITHOUT_CLASSIFICATION	0.006610539373627423	DESIGN
again ccs did not have such a concept however a reasonable proximity is to clear the cache. for non-transaction aware caches we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9933894606263727	WITHOUT_CLASSIFICATION	0.006610539373627423	DESIGN
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9995572910717091	WITHOUT_CLASSIFICATION	4.4270892829095327E-4	DESIGN
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9990124812248014	WITHOUT_CLASSIFICATION	9.87518775198718E-4	DESIGN
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9997766954156767	WITHOUT_CLASSIFICATION	2.233045843233348E-4	DESIGN
db-objectname	WITHOUT_CLASSIFICATION	0.9999241018871162	WITHOUT_CLASSIFICATION	7.589811288385047E-5	DESIGN
mutable	WITHOUT_CLASSIFICATION	0.9999256366245454	WITHOUT_CLASSIFICATION	7.436337545458625E-5	DESIGN
where	WITHOUT_CLASSIFICATION	0.999937043147223	WITHOUT_CLASSIFICATION	6.295685277704374E-5	DESIGN
check	WITHOUT_CLASSIFICATION	0.9999490140332878	WITHOUT_CLASSIFICATION	5.098596671211483E-5	DESIGN
polymorphism	WITHOUT_CLASSIFICATION	0.9999241018871162	WITHOUT_CLASSIFICATION	7.589811288385047E-5	DESIGN
todo	WITHOUT_CLASSIFICATION	0.8072777110381393	WITHOUT_CLASSIFICATION	0.19272228896186072	DESIGN
id	WITHOUT_CLASSIFICATION	0.9998506652942635	WITHOUT_CLASSIFICATION	1.4933470573646055E-4	DESIGN
version / timestamp	WITHOUT_CLASSIFICATION	0.9999665520034543	WITHOUT_CLASSIFICATION	3.3447996545760267E-5	DESIGN
discriminator	WITHOUT_CLASSIFICATION	0.9999241348078899	WITHOUT_CLASSIFICATION	7.58651921100135E-5	DESIGN
primary key constraint	WITHOUT_CLASSIFICATION	0.9999518749170366	WITHOUT_CLASSIFICATION	4.8125082963366135E-5	DESIGN
this is either a <version/> tag with no type attribute or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9984250038025524	WITHOUT_CLASSIFICATION	0.0015749961974476185	DESIGN
for version properties marked as being generated make sure they are "always" generated aka "insert" is invalid this is dis-allowed by the dtd but just to make sure	WITHOUT_CLASSIFICATION	0.724953349874604	WITHOUT_CLASSIFICATION	0.275046650125396	DESIGN
discriminator	WITHOUT_CLASSIFICATION	0.9999241348078899	WITHOUT_CLASSIFICATION	7.58651921100135E-5	DESIGN
( (column) discrim.getcolumniterator().next() ).settype(type)	WITHOUT_CLASSIFICATION	0.999429565748009	WITHOUT_CLASSIFICATION	5.704342519910507E-4	DESIGN
go ahead and set the lazy here since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9997788293774297	WITHOUT_CLASSIFICATION	2.2117062257020491E-4	DESIGN
dynamic update	WITHOUT_CLASSIFICATION	0.9999908616714434	WITHOUT_CLASSIFICATION	9.138328556705398E-6	DESIGN
import	WITHOUT_CLASSIFICATION	0.9998880683977255	WITHOUT_CLASSIFICATION	1.119316022744521E-4	DESIGN
batch size	WITHOUT_CLASSIFICATION	0.9999871010729302	WITHOUT_CLASSIFICATION	1.289892706973832E-5	DESIGN
select before update	WITHOUT_CLASSIFICATION	0.9999934652756723	WITHOUT_CLASSIFICATION	6.5347243276275906E-6	DESIGN
optimistic lock mode	WITHOUT_CLASSIFICATION	0.9997515920445501	WITHOUT_CLASSIFICATION	2.4840795544983597E-4	DESIGN
persister	WITHOUT_CLASSIFICATION	0.9998527927461955	WITHOUT_CLASSIFICATION	1.4720725380448841E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999265864061317	WITHOUT_CLASSIFICATION	7.341359386814727E-5	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9997766954156767	WITHOUT_CLASSIFICATION	2.233045843233348E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.999741305613005	WITHOUT_CLASSIFICATION	2.586943869949716E-4	DESIGN
joined subclasses	WITHOUT_CLASSIFICATION	0.9999084318880969	WITHOUT_CLASSIFICATION	9.156811190314388E-5	DESIGN
key	WITHOUT_CLASSIFICATION	0.9999365761104049	WITHOUT_CLASSIFICATION	6.342388959515078E-5	DESIGN
check	WITHOUT_CLASSIFICATION	0.9999490140332878	WITHOUT_CLASSIFICATION	5.098596671211483E-5	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999265864061317	WITHOUT_CLASSIFICATION	7.341359386814727E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.999741305613005	WITHOUT_CLASSIFICATION	2.586943869949716E-4	DESIGN
key	WITHOUT_CLASSIFICATION	0.9999365761104049	WITHOUT_CLASSIFICATION	6.342388959515078E-5	DESIGN
model.getkey().settype( new type( model.getidentifier() ) )	WITHOUT_CLASSIFICATION	0.9991071386876154	WITHOUT_CLASSIFICATION	8.928613123847173E-4	DESIGN
tablename	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
join.getkey().settype( new type( lazz.getidentifier() ) )	WITHOUT_CLASSIFICATION	0.9991071386876154	WITHOUT_CLASSIFICATION	8.928613123847173E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.999741305613005	WITHOUT_CLASSIFICATION	2.586943869949716E-4	DESIGN
column(s)	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
column index	WITHOUT_CLASSIFICATION	0.9997655070820602	WITHOUT_CLASSIFICATION	2.344929179397183E-4	DESIGN
column unique-key	WITHOUT_CLASSIFICATION	0.9998352471474483	WITHOUT_CLASSIFICATION	1.6475285255174412E-4	DESIGN
automatically makes a column with the default name if none is specifed by xml	WITHOUT_CLASSIFICATION	0.9982933705858149	WITHOUT_CLASSIFICATION	0.0017066294141851771	DESIGN
for an any	WITHOUT_CLASSIFICATION	0.9999291000197302	WITHOUT_CLASSIFICATION	7.089998026972554E-5	DESIGN
insertable simply because that is the user did not specify anything just override it	WITHOUT_CLASSIFICATION	0.9999929503470893	WITHOUT_CLASSIFICATION	7.049652910647113E-6	DESIGN
the user specifically supplied insert="true" which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999758489060869	WITHOUT_CLASSIFICATION	2.4151093912993308E-5	DESIGN
properties generated on update can never be updateable	WITHOUT_CLASSIFICATION	0.999557147572877	WITHOUT_CLASSIFICATION	4.42852427123026E-4	DESIGN
updateable only because the user did not specify anything just override it	WITHOUT_CLASSIFICATION	0.9999984941545363	WITHOUT_CLASSIFICATION	1.5058454636351575E-6	DESIGN
the user specifically supplied update="true" which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999758489060869	WITHOUT_CLASSIFICATION	2.4151093912993308E-5	DESIGN
rolename	WITHOUT_CLASSIFICATION	0.9999393530009957	WITHOUT_CLASSIFICATION	6.064699900430438E-5	DESIGN
fetch strategy	WITHOUT_CLASSIFICATION	0.9998467610888893	WITHOUT_CLASSIFICATION	1.532389111107156E-4	DESIGN
table	WITHOUT_CLASSIFICATION	0.99996747711792	WITHOUT_CLASSIFICATION	3.2522882079983604E-5	DESIGN
tablename = mappings.getnamingstrategy().propertytotablename( classname path )	WITHOUT_CLASSIFICATION	0.9999474356829228	WITHOUT_CLASSIFICATION	5.2564317077245685E-5	DESIGN
sort	WITHOUT_CLASSIFICATION	0.9999462949631529	WITHOUT_CLASSIFICATION	5.3705036847143414E-5	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999265864061317	WITHOUT_CLASSIFICATION	7.341359386814727E-5	DESIGN
unsorted natural comparator.class.name	WITHOUT_CLASSIFICATION	0.9994165080107326	WITHOUT_CLASSIFICATION	5.834919892675041E-4	DESIGN
orphan delete (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9979251098584615	WITHOUT_CLASSIFICATION	0.002074890141538542	DESIGN
set up second pass	WITHOUT_CLASSIFICATION	0.999986401282691	WITHOUT_CLASSIFICATION	1.3598717309037937E-5	DESIGN
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9905265067712765	WITHOUT_CLASSIFICATION	0.009473493228723512	DESIGN
a nested composite element	WITHOUT_CLASSIFICATION	0.9995010049040172	WITHOUT_CLASSIFICATION	4.989950959828007E-4	DESIGN
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9989989228301197	WITHOUT_CLASSIFICATION	0.0010010771698802645	DESIGN
note special case one-to-one constrained=false cannot be proxied so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999914768586851	WITHOUT_CLASSIFICATION	8.523141315058E-6	DESIGN
use old (hb 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9997505158080536	WITHOUT_CLASSIFICATION	2.49484191946365E-4	DESIGN
lazy = !join	WITHOUT_CLASSIFICATION	0.9999900679509875	WITHOUT_CLASSIFICATION	9.932049012480691E-6	DESIGN
generator	WITHOUT_CLASSIFICATION	0.9999561545276718	WITHOUT_CLASSIFICATION	4.384547232822878E-5	DESIGN
id unsaved-value	WITHOUT_CLASSIFICATION	0.9998671255006661	WITHOUT_CLASSIFICATION	1.3287449933384283E-4	DESIGN
version unsaved-value	WITHOUT_CLASSIFICATION	0.9998918451841909	WITHOUT_CLASSIFICATION	1.0815481580897559E-4	DESIGN
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9995246820092376	WITHOUT_CLASSIFICATION	4.753179907623858E-4	DESIGN
( (column) ( (simplevalue) ic.getindex() ).getcolumniterator().next() ).setnullable(false)	WITHOUT_CLASSIFICATION	0.999429565748009	WITHOUT_CLASSIFICATION	5.704342519910507E-4	DESIGN
contained elements	WITHOUT_CLASSIFICATION	0.9999681526033355	WITHOUT_CLASSIFICATION	3.184739666453319E-5	DESIGN
for non-inverse one-to-many with a not-null fk add a backref!	WITHOUT_CLASSIFICATION	0.9996008625287433	WITHOUT_CLASSIFICATION	3.9913747125672547E-4	DESIGN
bind the where	WITHOUT_CLASSIFICATION	0.999986125337093	WITHOUT_CLASSIFICATION	1.3874662907101978E-5	DESIGN
bind the order-by	WITHOUT_CLASSIFICATION	0.9999812007661699	WITHOUT_CLASSIFICATION	1.8799233830121675E-5	DESIGN
bind the filters	WITHOUT_CLASSIFICATION	0.9999812007661699	WITHOUT_CLASSIFICATION	1.8799233830121675E-5	DESIGN
overriding inherited meta attribute. hbx-621 & hbx-793	WITHOUT_CLASSIFICATION	0.9995212698851433	WITHOUT_CLASSIFICATION	4.787301148566993E-4	DESIGN
first iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999837306641546	WITHOUT_CLASSIFICATION	1.6269335845424116E-5	DESIGN
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a fqn (in the case of a pojo mapping).	WITHOUT_CLASSIFICATION	0.9997163142705988	WITHOUT_CLASSIFICATION	2.836857294011966E-4	DESIGN
+ "_" + referencedcolumnname not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9997769182750511	WITHOUT_CLASSIFICATION	2.230817249489745E-4	DESIGN
sessionfactory name	WITHOUT_CLASSIFICATION	0.9998558560677905	WITHOUT_CLASSIFICATION	1.4414393220957367E-4	DESIGN
jdbc and connection settings	WITHOUT_CLASSIFICATION	0.9999538483942311	WITHOUT_CLASSIFICATION	4.61516057690294E-5	DESIGN
jdbc and connection settings	WITHOUT_CLASSIFICATION	0.9999538483942311	WITHOUT_CLASSIFICATION	4.61516057690294E-5	DESIGN
interrogate jdbc metadata	WITHOUT_CLASSIFICATION	0.999784854464951	WITHOUT_CLASSIFICATION	2.1514553504902386E-4	DESIGN
user supplied jdbc connections	WITHOUT_CLASSIFICATION	0.9999633709135353	WITHOUT_CLASSIFICATION	3.662908646469641E-5	DESIGN
use dialect default properties	WITHOUT_CLASSIFICATION	0.9997278285056126	WITHOUT_CLASSIFICATION	2.721714943873233E-4	DESIGN
transaction settings	WITHOUT_CLASSIFICATION	0.9999732674145294	WITHOUT_CLASSIFICATION	2.6732585470559113E-5	DESIGN
sql generation settings	WITHOUT_CLASSIFICATION	0.9999457950044649	WITHOUT_CLASSIFICATION	5.4204995534972904E-5	DESIGN
query parser settings	WITHOUT_CLASSIFICATION	0.9995631448978373	WITHOUT_CLASSIFICATION	4.368551021627169E-4	DESIGN
second-level / query cache	WITHOUT_CLASSIFICATION	0.9999423693618891	WITHOUT_CLASSIFICATION	5.763063811092345E-5	DESIGN
the cache provider is needed when we either have second-level cache enabled or query cache enabled. note that usesecondlevelcache is enabled by default	WITHOUT_CLASSIFICATION	0.9999155307572897	WITHOUT_CLASSIFICATION	8.446924271031615E-5	DESIGN
sql exception converter	WITHOUT_CLASSIFICATION	0.9999161437337775	WITHOUT_CLASSIFICATION	8.385626622254613E-5	DESIGN
statistics and logging	WITHOUT_CLASSIFICATION	0.999973213706198	WITHOUT_CLASSIFICATION	2.6786293801936804E-5	DESIGN
settings.setshowsqlenabled(showsql)	WITHOUT_CLASSIFICATION	0.999411103560662	WITHOUT_CLASSIFICATION	5.888964393379308E-4	DESIGN
settings.setformatsqlenabled(formatsql)	WITHOUT_CLASSIFICATION	0.999411103560662	WITHOUT_CLASSIFICATION	5.888964393379308E-4	DESIGN
schema export	WITHOUT_CLASSIFICATION	0.9999241018871162	WITHOUT_CLASSIFICATION	7.589811288385047E-5	DESIGN
string provider = properties.getproperty( environment.bytecode_provider ) log.info( "bytecode provider name " + provider ) bytecodeprovider bytecodeprovider = buildbytecodeprovider( provider ) settings.setbytecodeprovider( bytecodeprovider )	WITHOUT_CLASSIFICATION	0.999913083572907	WITHOUT_CLASSIFICATION	8.691642709298845E-5	DESIGN
legacy behavior apply the bridge	WITHOUT_CLASSIFICATION	0.9970567046107438	WITHOUT_CLASSIFICATION	0.002943295389256141	DESIGN
maybe a concrete sqlpropertyresult type but map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9462349529809946	WITHOUT_CLASSIFICATION	0.05376504701900539	DESIGN
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9997809765443563	WITHOUT_CLASSIFICATION	2.1902345564370608E-4	DESIGN
private componenttuplizerfactory componenttuplizerfactory todo hhh-3517 and hhh-1907 private bytecodeprovider bytecodeprovider	WITHOUT_CLASSIFICATION	0.5089266667370064	WITHOUT_CLASSIFICATION	0.4910733332629937	DESIGN
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993303786818628	WITHOUT_CLASSIFICATION	6.696213181371643E-4	DESIGN
public componenttuplizerfactory getcomponenttuplizerfactory() { return componenttuplizerfactory }	WITHOUT_CLASSIFICATION	0.9995537394910946	WITHOUT_CLASSIFICATION	4.462605089053166E-4	DESIGN
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9934269553728672	WITHOUT_CLASSIFICATION	0.006573044627132803	DESIGN
void setshowsqlenabled(boolean b) { showsql = b } void setformatsqlenabled(boolean b) { formatsql = b }	WITHOUT_CLASSIFICATION	0.9999791617139119	WITHOUT_CLASSIFICATION	2.0838286088099783E-5	DESIGN
public bytecodeprovider getbytecodeprovider() { return bytecodeprovider } void setbytecodeprovider(bytecodeprovider bytecodeprovider) { this.bytecodeprovider = bytecodeprovider }	WITHOUT_CLASSIFICATION	0.9999585711144182	WITHOUT_CLASSIFICATION	4.142888558165563E-5	DESIGN
using local since the inheritedmetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9950602529569473	WITHOUT_CLASSIFICATION	0.004939747043052585	DESIGN
private componenttuplizerfactory componenttuplizerfactory todo hhh-3517 and hhh-1907	WITHOUT_CLASSIFICATION	0.5089266667370064	WITHOUT_CLASSIFICATION	0.4910733332629937	DESIGN
protected list extendsqueue	WITHOUT_CLASSIFICATION	0.9997087032865933	WITHOUT_CLASSIFICATION	2.9129671340666195E-4	DESIGN
extendsqueue = new arraylist()	WITHOUT_CLASSIFICATION	0.9999796996491136	WITHOUT_CLASSIFICATION	2.030035088646319E-5	DESIGN
componenttuplizerfactory = new componenttuplizerfactory()	WITHOUT_CLASSIFICATION	0.9999101634301539	WITHOUT_CLASSIFICATION	8.983656984611231E-5	DESIGN
if doc is null then for whatever reason the cached file cannot be used	WITHOUT_CLASSIFICATION	0.9996392610246829	WITHOUT_CLASSIFICATION	3.607389753169918E-4	DESIGN
drop them in reverse order in case db needs it done that way	WITHOUT_CLASSIFICATION	0.997735562290718	WITHOUT_CLASSIFICATION	0.0022644377092818973	DESIGN
public componenttuplizerfactory getcomponenttuplizerfactory() { return componenttuplizerfactory }	WITHOUT_CLASSIFICATION	0.9995537394910946	WITHOUT_CLASSIFICATION	4.462605089053166E-4	DESIGN
this method may be called many times!!	WITHOUT_CLASSIFICATION	0.9955299346470887	WITHOUT_CLASSIFICATION	0.004470065352911257	DESIGN
iterator iterator = extendsqueue.iterator()	WITHOUT_CLASSIFICATION	0.9998860571600654	WITHOUT_CLASSIFICATION	1.1394283993460332E-4	DESIGN
iterator iter = extendsqueue.iterator()	WITHOUT_CLASSIFICATION	0.99982844333116	WITHOUT_CLASSIFICATION	1.7155666883994513E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.9999103388885192	WITHOUT_CLASSIFICATION	8.966111148079292E-5	DESIGN
found	WITHOUT_CLASSIFICATION	0.9999103388885192	WITHOUT_CLASSIFICATION	8.966111148079292E-5	DESIGN
settings.setcomponenttuplizerfactory( this.getcomponenttuplizerfactory() )	WITHOUT_CLASSIFICATION	0.9991653560730299	WITHOUT_CLASSIFICATION	8.346439269700429E-4	DESIGN
private final list extendsqueue	WITHOUT_CLASSIFICATION	0.9988912741006728	WITHOUT_CLASSIFICATION	0.0011087258993271582	DESIGN
<string string>	WITHOUT_CLASSIFICATION	0.9999244457088868	WITHOUT_CLASSIFICATION	7.555429111313299E-5	DESIGN
<string string>	WITHOUT_CLASSIFICATION	0.9999244457088868	WITHOUT_CLASSIFICATION	7.555429111313299E-5	DESIGN
+ "_" + referencedcolumnname not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9997769182750511	WITHOUT_CLASSIFICATION	2.230817249489745E-4	DESIGN
set use_reflection_optimizer to false to fix hhh-227	WITHOUT_CLASSIFICATION	0.9741212056134594	WITHOUT_CLASSIFICATION	0.025878794386540654	DESIGN
orphan delete not supported for entitymode.dom4j	WITHOUT_CLASSIFICATION	0.9997568973643973	WITHOUT_CLASSIFICATION	2.4310263560269543E-4	DESIGN
element = xmlhelper.generatedom4jelement( persister.getnodename() )	WITHOUT_CLASSIFICATION	0.9999033047993556	WITHOUT_CLASSIFICATION	9.669520064433205E-5	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9998665593896974	WITHOUT_CLASSIFICATION	1.3344061030272494E-4	DESIGN
orphan delete not supported for entitymode.dom4j	WITHOUT_CLASSIFICATION	0.9997568973643973	WITHOUT_CLASSIFICATION	2.4310263560269543E-4	DESIGN
element = xmlhelper.generatedom4jelement( persister.getnodename() )	WITHOUT_CLASSIFICATION	0.9999033047993556	WITHOUT_CLASSIFICATION	9.669520064433205E-5	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.999552771889371	WITHOUT_CLASSIFICATION	4.4722811062901743E-4	DESIGN
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9990545701712441	WITHOUT_CLASSIFICATION	9.454298287559071E-4	DESIGN
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9997153114820831	WITHOUT_CLASSIFICATION	2.8468851791686544E-4	DESIGN
the element has changed	WITHOUT_CLASSIFICATION	0.999985086952001	WITHOUT_CLASSIFICATION	1.4913047999197913E-5	DESIGN
careful these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9993720989033607	WITHOUT_CLASSIFICATION	6.279010966393635E-4	DESIGN
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9473480727383249	WITHOUT_CLASSIFICATION	0.05265192726167519	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9997882372213004	WITHOUT_CLASSIFICATION	2.1176277869951632E-4	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9997882372213004	WITHOUT_CLASSIFICATION	2.1176277869951632E-4	DESIGN
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9975764162199475	WITHOUT_CLASSIFICATION	0.002423583780052499	DESIGN
short-circuit(s) no new elements the old list contains only orphans no old elements so no orphans neither	WITHOUT_CLASSIFICATION	0.9999959332956645	WITHOUT_CLASSIFICATION	4.066704335507024E-6	DESIGN
create the collection holding the orphans	WITHOUT_CLASSIFICATION	0.999330742431106	WITHOUT_CLASSIFICATION	6.692575688939498E-4	DESIGN
collect entityidentifier(s) of the current elements - add them into a hashset for fast access	WITHOUT_CLASSIFICATION	0.9991553129827304	WITHOUT_CLASSIFICATION	8.446870172695906E-4	DESIGN
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999741109759068	WITHOUT_CLASSIFICATION	2.588902409315411E-5	DESIGN
(array==null) ? templist.size()	WITHOUT_CLASSIFICATION	0.9965632936191777	WITHOUT_CLASSIFICATION	0.0034367063808222807	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9998665593896974	WITHOUT_CLASSIFICATION	1.3344061030272494E-4	DESIGN
(array==null) ? templist.get(i)	WITHOUT_CLASSIFICATION	0.9965632936191777	WITHOUT_CLASSIFICATION	0.0034367063808222807	DESIGN
write() -- doesn't	WITHOUT_CLASSIFICATION	0.999961458652478	WITHOUT_CLASSIFICATION	3.854134752196014E-5	DESIGN
write() -- doesn't	WITHOUT_CLASSIFICATION	0.999961458652478	WITHOUT_CLASSIFICATION	3.854134752196014E-5	DESIGN
amazingly these two will work because abstractcollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.999504161341517	WITHOUT_CLASSIFICATION	4.958386584830788E-4	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.999552771889371	WITHOUT_CLASSIFICATION	4.4722811062901743E-4	DESIGN
finally what it's all about	WITHOUT_CLASSIFICATION	0.9947451534653321	WITHOUT_CLASSIFICATION	0.005254846534667945	DESIGN
note that if we load this collection from a cartesian product the multiplicity would be broken so use an idbag instead	WITHOUT_CLASSIFICATION	0.9920063343993817	WITHOUT_CLASSIFICATION	0.007993665600618323	DESIGN
anyway here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.6732422385175909	WITHOUT_CLASSIFICATION	0.32675776148240915	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9995330659540002	WITHOUT_CLASSIFICATION	4.669340459998329E-4	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9574092233292881	WITHOUT_CLASSIFICATION	0.04259077667071188	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.999552771889371	WITHOUT_CLASSIFICATION	4.4722811062901743E-4	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9995330659540002	WITHOUT_CLASSIFICATION	4.669340459998329E-4	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9574092233292881	WITHOUT_CLASSIFICATION	0.04259077667071188	DESIGN
public boolean equals(object other) {read()return bag.equals(other)}public int hashcode(object other) {read()return bag.hashcode()}	WITHOUT_CLASSIFICATION	0.9997923039752321	WITHOUT_CLASSIFICATION	2.076960247679242E-4	DESIGN
list operations	WITHOUT_CLASSIFICATION	0.9999612338215553	WITHOUT_CLASSIFICATION	3.876617844473048E-5	DESIGN
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9990817554146407	WITHOUT_CLASSIFICATION	9.182445853593928E-4	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.999552771889371	WITHOUT_CLASSIFICATION	4.4722811062901743E-4	DESIGN
needed for soap libraries etc	WITHOUT_CLASSIFICATION	0.999552771889371	WITHOUT_CLASSIFICATION	4.4722811062901743E-4	DESIGN
from map	WITHOUT_CLASSIFICATION	0.999864577737069	WITHOUT_CLASSIFICATION	1.35422262931012E-4	DESIGN
from sortedmap	WITHOUT_CLASSIFICATION	0.9997882202405411	WITHOUT_CLASSIFICATION	2.117797594587161E-4	DESIGN
inject the data	WITHOUT_CLASSIFICATION	0.99996961309851	WITHOUT_CLASSIFICATION	3.0386901490080793E-5	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998794861976171	WITHOUT_CLASSIFICATION	1.2051380238286278E-4	DESIGN
default pool size 20	WITHOUT_CLASSIFICATION	0.9999876864461256	WITHOUT_CLASSIFICATION	1.2313553874560852E-5	DESIGN
trying via forname() first to be as close to drivermanager's semantics	WITHOUT_CLASSIFICATION	0.9997365928732517	WITHOUT_CLASSIFICATION	2.634071267483224E-4	DESIGN
if debug level is enabled then log the password otherwise mask it	WITHOUT_CLASSIFICATION	0.9998720253397735	WITHOUT_CLASSIFICATION	1.2797466022652446E-4	DESIGN
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9997304783831864	WITHOUT_CLASSIFICATION	2.6952161681351335E-4	DESIGN
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999130254843557	WITHOUT_CLASSIFICATION	8.697451564440806E-5	DESIGN
then bind it	WITHOUT_CLASSIFICATION	0.9999423169724543	WITHOUT_CLASSIFICATION	5.768302754570096E-5	DESIGN
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9968911073585363	WITHOUT_CLASSIFICATION	0.003108892641463869	DESIGN
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.998658024560957	WITHOUT_CLASSIFICATION	0.0013419754390430357	DESIGN
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9998382311468896	WITHOUT_CLASSIFICATION	1.6176885311035375E-4	DESIGN
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9993975440085895	WITHOUT_CLASSIFICATION	6.024559914104472E-4	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994145922259581	WITHOUT_CLASSIFICATION	5.854077740419757E-4	DESIGN
we could register the session against the transaction even though it is not started but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999989288245036	WITHOUT_CLASSIFICATION	1.0711754963516922E-6	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998794861976171	WITHOUT_CLASSIFICATION	1.2051380238286278E-4	DESIGN
private string propertyname	WITHOUT_CLASSIFICATION	0.9999103236482908	WITHOUT_CLASSIFICATION	8.967635170916837E-5	DESIGN
public propertyprojection project() {return projections.property(getpropertyname())}	WITHOUT_CLASSIFICATION	0.9990186476280952	WITHOUT_CLASSIFICATION	9.813523719047436E-4	DESIGN
string[] fk = stringhelper.qualify( "collection_" cp.getkeycolumnnames() )	WITHOUT_CLASSIFICATION	0.9999027679696646	WITHOUT_CLASSIFICATION	9.723203033540535E-5	DESIGN
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999634955711385	WITHOUT_CLASSIFICATION	3.650442886141557E-5	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9999245345782319	WITHOUT_CLASSIFICATION	7.546542176811472E-5	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9999245345782319	WITHOUT_CLASSIFICATION	7.546542176811472E-5	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998794861976171	WITHOUT_CLASSIFICATION	1.2051380238286278E-4	DESIGN
the following two lines were added to ensure that this.params is not null which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999144967062739	WITHOUT_CLASSIFICATION	8.550329372613961E-5	DESIGN
with two-deep subqueries the same alias would get generated for both using the old method (criteriaquery.generatesqlalias()) so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9884618258570663	WITHOUT_CLASSIFICATION	0.011538174142933778	DESIGN
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9987951069771989	WITHOUT_CLASSIFICATION	0.0012048930228011159	DESIGN
pull off the last " "	WITHOUT_CLASSIFICATION	0.9999810486866926	WITHOUT_CLASSIFICATION	1.8951313307468184E-5	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
we have the form trim(trimsource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9998199360384837	WITHOUT_CLASSIFICATION	1.8006396151632237E-4	DESIGN
we have the form trim(from trimsource). this is functionally equivalent to trim(trimsource)	WITHOUT_CLASSIFICATION	0.9965832981863044	WITHOUT_CLASSIFICATION	0.0034167018136956103	DESIGN
not_supported_should_use_jdbc3_preparedstatement.getgeneratedkeys_method	WITHOUT_CLASSIFICATION	0.999411103560662	WITHOUT_CLASSIFICATION	5.888964393379308E-4	DESIGN
potentialtrimcharacterargindex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999127201050249	WITHOUT_CLASSIFICATION	8.727989497505235E-5	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999085225730044	WITHOUT_CLASSIFICATION	9.147742699559447E-4	DESIGN
oracle did add support for ansi case statements in 9i	WITHOUT_CLASSIFICATION	0.9999492952639167	WITHOUT_CLASSIFICATION	5.070473608333052E-5	DESIGN
the standard sql function name is current_timestamp	WITHOUT_CLASSIFICATION	0.9990869050284832	WITHOUT_CLASSIFICATION	9.130949715167844E-4	DESIGN
informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9981813494609802	WITHOUT_CLASSIFICATION	0.0018186505390197828	DESIGN
or byte or text? or money	WITHOUT_CLASSIFICATION	0.9999491354873535	WITHOUT_CLASSIFICATION	5.0864512646579246E-5	DESIGN
strip table-owner because informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9998744417978859	WITHOUT_CLASSIFICATION	1.2555820211410565E-4	DESIGN
build the map of standard ansi sql aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997496995101215	WITHOUT_CLASSIFICATION	2.5030048987852095E-4	DESIGN
pre h3.2 behavior super.getreturntype(ct m)	WITHOUT_CLASSIFICATION	0.9989389479942686	WITHOUT_CLASSIFICATION	0.0010610520057314228	DESIGN
finally use the sqltype if == on hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999281614800268	WITHOUT_CLASSIFICATION	7.183851997315917E-5	DESIGN
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9998570279925625	WITHOUT_CLASSIFICATION	1.4297200743757223E-4	DESIGN
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9953211732049521	WITHOUT_CLASSIFICATION	0.004678826795047891	DESIGN
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9958835890159149	WITHOUT_CLASSIFICATION	0.004116410984085085	DESIGN
map second/minute/hour/day/month/year to ansi extract() override on subclasses	WITHOUT_CLASSIFICATION	0.9993463739465693	WITHOUT_CLASSIFICATION	6.536260534306579E-4	DESIGN
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9983016005282991	WITHOUT_CLASSIFICATION	0.0016983994717008992	DESIGN
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9958734386266974	WITHOUT_CLASSIFICATION	0.00412656137330249	DESIGN
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9958734386266974	WITHOUT_CLASSIFICATION	0.00412656137330249	DESIGN
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998559403212003	WITHOUT_CLASSIFICATION	0.0014405967879970358	DESIGN
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997064870200635	WITHOUT_CLASSIFICATION	2.9351297993650396E-4	DESIGN
identity support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984962694539684	WITHOUT_CLASSIFICATION	0.0015037305460315295	DESIGN
sequence support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998796449178013	WITHOUT_CLASSIFICATION	0.001203550821986984	DESIGN
guid support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978826837626378	WITHOUT_CLASSIFICATION	0.0021173162373621566	DESIGN
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978826837626378	WITHOUT_CLASSIFICATION	0.0021173162373621566	DESIGN
by default we report no support	WITHOUT_CLASSIFICATION	0.9841359681559222	WITHOUT_CLASSIFICATION	0.015864031844077735	DESIGN
by default we report no support for nowait lock semantics	WITHOUT_CLASSIFICATION	0.8041246838081091	WITHOUT_CLASSIFICATION	0.19587531619189094	DESIGN
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991917084991041	WITHOUT_CLASSIFICATION	8.082915008959181E-4	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9710290462263139	WITHOUT_CLASSIFICATION	0.028970953773686026	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982108201859682	WITHOUT_CLASSIFICATION	0.0017891798140318293	DESIGN
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9958199816010571	WITHOUT_CLASSIFICATION	0.004180018398942887	DESIGN
sqlexception support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978826837626378	WITHOUT_CLASSIFICATION	0.0021173162373621566	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978826837626378	WITHOUT_CLASSIFICATION	0.0021173162373621566	DESIGN
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997919519836978	WITHOUT_CLASSIFICATION	0.0020804801630219766	DESIGN
ddl support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978826837626378	WITHOUT_CLASSIFICATION	0.0021173162373621566	DESIGN
grrr for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9994924379161464	WITHOUT_CLASSIFICATION	5.075620838537075E-4	DESIGN
informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990485363753089	WITHOUT_CLASSIFICATION	9.514636246911159E-4	DESIGN
return false here as most databases do not properly support this construct	WITHOUT_CLASSIFICATION	0.9892369797551014	WITHOUT_CLASSIFICATION	0.010763020244898714	DESIGN
mckoi has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9990207442767477	WITHOUT_CLASSIFICATION	9.792557232523045E-4	DESIGN
oracle8 and previous define only a "date" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.983544419224856	WITHOUT_CLASSIFICATION	0.016455580775143995	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9998666154557407	WITHOUT_CLASSIFICATION	1.333845442591642E-4	DESIGN
" cascade"	WITHOUT_CLASSIFICATION	0.9999242075666182	WITHOUT_CLASSIFICATION	7.579243338178884E-5	DESIGN
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999034365467789	WITHOUT_CLASSIFICATION	9.656345322101624E-5	DESIGN
public boolean droptemporarytableafteruse() {we have to because postgres sets current txto rollback only after a failed create tablereturn true}	WITHOUT_CLASSIFICATION	0.9998767298038639	WITHOUT_CLASSIFICATION	1.2327019613606432E-4	DESIGN
check violation	WITHOUT_CLASSIFICATION	0.9999546343810982	WITHOUT_CLASSIFICATION	4.536561890179743E-5	DESIGN
unique violation	WITHOUT_CLASSIFICATION	0.9998853393590529	WITHOUT_CLASSIFICATION	1.1466064094714063E-4	DESIGN
foreign key violation	WITHOUT_CLASSIFICATION	0.9999010166453225	WITHOUT_CLASSIFICATION	9.898335467754288E-5	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999085225730044	WITHOUT_CLASSIFICATION	9.147742699559447E-4	DESIGN
not null violation	WITHOUT_CLASSIFICATION	0.9998879521685452	WITHOUT_CLASSIFICATION	1.1204783145480402E-4	DESIGN
all other	WITHOUT_CLASSIFICATION	0.9999348652534081	WITHOUT_CLASSIFICATION	6.513474659194573E-5	DESIGN
register the type of the out param - postgresql uses types.other	WITHOUT_CLASSIFICATION	0.9943471034078807	WITHOUT_CLASSIFICATION	0.005652896592119382	DESIGN
seems to not really public boolean supportsrowvalueconstructorsyntax() { return true }	WITHOUT_CLASSIFICATION	0.9999514446374501	WITHOUT_CLASSIFICATION	4.855536254997395E-5	DESIGN
seems to have spotty lob suppport	WITHOUT_CLASSIFICATION	0.9995619895630905	WITHOUT_CLASSIFICATION	4.380104369094915E-4	DESIGN
hhh-2300	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
ignore (probably h2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9998637889840077	WITHOUT_CLASSIFICATION	1.362110159922817E-4	DESIGN
numeric functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992529430919439	WITHOUT_CLASSIFICATION	7.470569080562318E-4	DESIGN
string functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994486818605038	WITHOUT_CLASSIFICATION	5.513181394962366E-4	DESIGN
time and date functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996573442620602	WITHOUT_CLASSIFICATION	3.426557379397295E-4	DESIGN
system functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996683534802174	WITHOUT_CLASSIFICATION	3.316465197825914E-4	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9997623326022237	WITHOUT_CLASSIFICATION	2.3766739777628993E-4	DESIGN
23000 check constraint violation {0} 23001 unique index or primary key violation {0}	WITHOUT_CLASSIFICATION	0.9997962327887692	WITHOUT_CLASSIFICATION	2.0376721123076808E-4	DESIGN
display the dialect version.	WITHOUT_CLASSIFICATION	0.9999606097442786	WITHOUT_CLASSIFICATION	3.939025572135702E-5	DESIGN
the rdms concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999166047841225	WITHOUT_CLASSIFICATION	8.339521587758512E-5	DESIGN
dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991171228623309	WITHOUT_CLASSIFICATION	8.828771376689954E-4	DESIGN
original dialect.java returns " for update"	WITHOUT_CLASSIFICATION	0.9992291833508959	WITHOUT_CLASSIFICATION	7.70816649104137E-4	DESIGN
verify the state of this new method in hibernate 3.0 dialect.java	WITHOUT_CLASSIFICATION	0.9995908236990262	WITHOUT_CLASSIFICATION	4.0917630097384315E-4	DESIGN
origial dialect.java returns true	WITHOUT_CLASSIFICATION	0.999428920669579	WITHOUT_CLASSIFICATION	5.710793304210323E-4	DESIGN
the keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9991572994026389	WITHOUT_CLASSIFICATION	8.427005973612694E-4	DESIGN
sequence methods - start. the rdms dialect needs these	WITHOUT_CLASSIFICATION	0.9962930326279393	WITHOUT_CLASSIFICATION	0.0037069673720606733	DESIGN
methods to make it possible to use the native id generator	WITHOUT_CLASSIFICATION	0.9997704705267799	WITHOUT_CLASSIFICATION	2.2952947321994505E-4	DESIGN
the where clause was added to eliminate this statement from brute force searches.	WITHOUT_CLASSIFICATION	0.9989653000136794	WITHOUT_CLASSIFICATION	0.0010346999863204932	DESIGN
sequence methods - end	WITHOUT_CLASSIFICATION	0.9983320640863327	WITHOUT_CLASSIFICATION	0.0016679359136673275	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999085225730044	WITHOUT_CLASSIFICATION	9.147742699559447E-4	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9998666154557407	WITHOUT_CLASSIFICATION	1.333845442591642E-4	DESIGN
we must return a valid rdms/rsa command from this method to prevent rdms/rsa from issuing error 400	WITHOUT_CLASSIFICATION	0.7838938142023363	WITHOUT_CLASSIFICATION	0.21610618579766377	DESIGN
used with drop table to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999491793239409	WITHOUT_CLASSIFICATION	5.082067605902885E-5	DESIGN
rdms supports the union all clause.	WITHOUT_CLASSIFICATION	0.9998298655248266	WITHOUT_CLASSIFICATION	1.70134475173458E-4	DESIGN
rdms has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9990207442767477	WITHOUT_CLASSIFICATION	9.792557232523045E-4	DESIGN
multi-param dialect functions	WITHOUT_CLASSIFICATION	0.9998815267199723	WITHOUT_CLASSIFICATION	1.1847328002767458E-4	DESIGN
function templates	WITHOUT_CLASSIFICATION	0.999951439273582	WITHOUT_CLASSIFICATION	4.856072641798191E-5	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9997623326022237	WITHOUT_CLASSIFICATION	2.3766739777628993E-4	DESIGN
this assumes schema support which is present in 1.8.0 and later	WITHOUT_CLASSIFICATION	0.9943587733931092	WITHOUT_CLASSIFICATION	0.005641226606890865	DESIGN
hsqldb only supports read_uncommitted transaction isolation	WITHOUT_CLASSIFICATION	0.9994694578182484	WITHOUT_CLASSIFICATION	5.305421817516769E-4	DESIGN
multi-param string dialect functions	WITHOUT_CLASSIFICATION	0.9994486818605038	WITHOUT_CLASSIFICATION	5.513181394962366E-4	DESIGN
multi-param numeric dialect functions	WITHOUT_CLASSIFICATION	0.9992529430919439	WITHOUT_CLASSIFICATION	7.470569080562318E-4	DESIGN
multi-param date dialect functions	WITHOUT_CLASSIFICATION	0.9994758881166999	WITHOUT_CLASSIFICATION	5.241118833002044E-4	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999358870622016	WITHOUT_CLASSIFICATION	6.411293779841026E-5	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999085225730044	WITHOUT_CLASSIFICATION	9.147742699559447E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999085225730044	WITHOUT_CLASSIFICATION	9.147742699559447E-4	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9992368414143481	WITHOUT_CLASSIFICATION	7.631585856519529E-4	DESIGN
register the type of the out param - an oracle specific type	WITHOUT_CLASSIFICATION	0.9976319316572769	WITHOUT_CLASSIFICATION	0.002368068342723	DESIGN
timesten has no blob/clob support but these types may be suitable for some applications. the length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.954799261525422	WITHOUT_CLASSIFICATION	0.045200738474577944	DESIGN
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9997779807621328	WITHOUT_CLASSIFICATION	2.220192378673216E-4	DESIGN
public boolean supportsforupdatenowait() {return false}	WITHOUT_CLASSIFICATION	0.9996945920397478	WITHOUT_CLASSIFICATION	3.054079602522964E-4	DESIGN
timesten has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9990207442767477	WITHOUT_CLASSIFICATION	9.792557232523045E-4	DESIGN
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.960996445898701	WITHOUT_CLASSIFICATION	0.039003554101298875	DESIGN
add new ordered map	WITHOUT_CLASSIFICATION	0.9999749721502347	WITHOUT_CLASSIFICATION	2.5027849765376832E-5	DESIGN
registercolumntype( types.varchar 16777215 "mediumtext" )	WITHOUT_CLASSIFICATION	0.9991653560730299	WITHOUT_CLASSIFICATION	8.346439269700429E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999085225730044	WITHOUT_CLASSIFICATION	9.147742699559447E-4	DESIGN
this assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999913576447098	WITHOUT_CLASSIFICATION	8.642355290198777E-5	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9987359775848991	WITHOUT_CLASSIFICATION	0.0012640224151009576	DESIGN
return "select current_timestamp from rdb$database"	WITHOUT_CLASSIFICATION	0.9989414314699637	WITHOUT_CLASSIFICATION	0.0010585685300362952	DESIGN
registercolumntype data types	WITHOUT_CLASSIFICATION	0.9998376083778978	WITHOUT_CLASSIFICATION	1.623916221021811E-4	DESIGN
hibernate seems to ignore this type	WITHOUT_CLASSIFICATION	0.9947234346051281	WITHOUT_CLASSIFICATION	0.005276565394871891	DESIGN
ibid for current_time and current_date	WITHOUT_CLASSIFICATION	0.9990503738900702	WITHOUT_CLASSIFICATION	9.496261099297357E-4	DESIGN
tell hibernate to use getbytes instead of getbinarystream	WITHOUT_CLASSIFICATION	0.9985470996250844	WITHOUT_CLASSIFICATION	0.0014529003749156775	DESIGN
no batch statements	WITHOUT_CLASSIFICATION	0.9999498559209686	WITHOUT_CLASSIFICATION	5.01440790313599E-5	DESIGN
we might want a special case for 192. this is very common for money types and here it is converted to 181	WITHOUT_CLASSIFICATION	0.6736525690151529	WITHOUT_CLASSIFICATION	0.32634743098484725	DESIGN
no pointbase bit	WITHOUT_CLASSIFICATION	0.9998736864302336	WITHOUT_CLASSIFICATION	1.2631356976648317E-4	DESIGN
no pointbase tinyint	WITHOUT_CLASSIFICATION	0.9999465844541668	WITHOUT_CLASSIFICATION	5.34155458331197E-5	DESIGN
pointbase has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9990207442767477	WITHOUT_CLASSIFICATION	9.792557232523045E-4	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9998666154557407	WITHOUT_CLASSIFICATION	1.333845442591642E-4	DESIGN
the current_timestamp is more accurate but only known to be supported in sql server 7.0 and later (i.e. sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9816659674204653	WITHOUT_CLASSIFICATION	0.018334032579534684	DESIGN
sql server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999869996298504	WITHOUT_CLASSIFICATION	1.300037014974202E-5	DESIGN
here assume sqlserver2005 using snapshot isolation which does not have this problem	WITHOUT_CLASSIFICATION	0.9947165351181332	WITHOUT_CLASSIFICATION	0.005283464881866882	DESIGN
registercolumntype( types.blob 16777215 "mediumblob" ) registercolumntype( types.blob 65535 "blob" )	WITHOUT_CLASSIFICATION	0.9991653560730299	WITHOUT_CLASSIFICATION	8.346439269700429E-4	DESIGN
registercolumntype( types.clob 16777215 "mediumtext" ) registercolumntype( types.clob 65535 "text" )	WITHOUT_CLASSIFICATION	0.9991653560730299	WITHOUT_CLASSIFICATION	8.346439269700429E-4	DESIGN
registercolumntype( types.varchar 16777215 "mediumtext" ) registercolumntype( types.varchar 65535 "text" )	WITHOUT_CLASSIFICATION	0.9991653560730299	WITHOUT_CLASSIFICATION	8.346439269700429E-4	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9998666154557407	WITHOUT_CLASSIFICATION	1.333845442591642E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9999242139451882	WITHOUT_CLASSIFICATION	7.578605481187491E-5	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9987359775848991	WITHOUT_CLASSIFICATION	0.0012640224151009576	DESIGN
sybase bit type does not support null values	WITHOUT_CLASSIFICATION	0.995635084982738	WITHOUT_CLASSIFICATION	0.004364915017261989	DESIGN
this assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999913576447098	WITHOUT_CLASSIFICATION	8.642355290198777E-5	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999085225730044	WITHOUT_CLASSIFICATION	9.147742699559447E-4	DESIGN
you may still have other resultsets or update counts left to process here but you can't do it now or the resultset you just got will be closed	WITHOUT_CLASSIFICATION	0.9999931446537945	WITHOUT_CLASSIFICATION	6.855346205445711E-6	DESIGN
not null (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9984047290354405	WITHOUT_CLASSIFICATION	0.0015952709645594791	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999085225730044	WITHOUT_CLASSIFICATION	9.147742699559447E-4	DESIGN
oracle driver reports to support getgeneratedkeys() but they only support the version taking an array of the names of the columns to be returned (via its returning clause). no other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9949873623396751	WITHOUT_CLASSIFICATION	0.005012637660324865	DESIGN
multi-param string dialect functions	WITHOUT_CLASSIFICATION	0.9994486818605038	WITHOUT_CLASSIFICATION	5.513181394962366E-4	DESIGN
multi-param numeric dialect functions	WITHOUT_CLASSIFICATION	0.9992529430919439	WITHOUT_CLASSIFICATION	7.470569080562318E-4	DESIGN
multi-param date dialect functions	WITHOUT_CLASSIFICATION	0.9994758881166999	WITHOUT_CLASSIFICATION	5.241118833002044E-4	DESIGN
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999943534023668	WITHOUT_CLASSIFICATION	5.64659763322202E-6	DESIGN
add the main query	WITHOUT_CLASSIFICATION	0.9999824248626171	WITHOUT_CLASSIFICATION	1.757513738285735E-5	DESIGN
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999431285560696	WITHOUT_CLASSIFICATION	5.68714439304864E-5	DESIGN
this assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999913576447098	WITHOUT_CLASSIFICATION	8.642355290198777E-5	DESIGN
you may still have other resultsets or update counts left to process here but you can't do it now or the resultset you just got will be closed	WITHOUT_CLASSIFICATION	0.9999931446537945	WITHOUT_CLASSIFICATION	6.855346205445711E-6	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999085225730044	WITHOUT_CLASSIFICATION	9.147742699559447E-4	DESIGN
starts with 1 implicitly	WITHOUT_CLASSIFICATION	0.9998666154557407	WITHOUT_CLASSIFICATION	1.333845442591642E-4	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999358870622016	WITHOUT_CLASSIFICATION	6.411293779841026E-5	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9992368414143481	WITHOUT_CLASSIFICATION	7.631585856519529E-4	DESIGN
register the type of the out param - an oracle specific type	WITHOUT_CLASSIFICATION	0.9976319316572769	WITHOUT_CLASSIFICATION	0.002368068342723	DESIGN
features which change between 8i 9i and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993985131567471	WITHOUT_CLASSIFICATION	6.014868432529286E-4	DESIGN
features which remain constant across 8i 9i and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991954682832379	WITHOUT_CLASSIFICATION	8.045317167621449E-4	DESIGN
binary %stream character %stream	WITHOUT_CLASSIFICATION	0.9997179071370954	WITHOUT_CLASSIFICATION	2.8209286290457143E-4	DESIGN
getdefaultproperties().setproperty(environment.statement_batch_size no_batch)	WITHOUT_CLASSIFICATION	0.999411103560662	WITHOUT_CLASSIFICATION	5.888964393379308E-4	DESIGN
hibernate impelemnts cast in dialect.java	WITHOUT_CLASSIFICATION	0.9989825284679432	WITHOUT_CLASSIFICATION	0.0010174715320567804	DESIGN
aggregate functions shouldn't be registered right? registerfunction( "list" new standardsqlfunction("list"hibernate.string) ) stopped on $list	WITHOUT_CLASSIFICATION	0.998258815070044	WITHOUT_CLASSIFICATION	0.0017411849299560512	DESIGN
ddl support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978826837626378	WITHOUT_CLASSIFICATION	0.0021173162373621566	DESIGN
below is for cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9680463347849295	WITHOUT_CLASSIFICATION	0.0319536652150705	DESIGN
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9946933522449657	WITHOUT_CLASSIFICATION	0.005306647755034259	DESIGN
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9993347107408982	WITHOUT_CLASSIFICATION	6.652892591017673E-4	DESIGN
the syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999122170142942	WITHOUT_CLASSIFICATION	8.778298570570726E-5	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999241018871162	WITHOUT_CLASSIFICATION	7.589811288385047E-5	DESIGN
identity support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984962694539684	WITHOUT_CLASSIFICATION	0.0015037305460315295	DESIGN
sequence support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998796449178013	WITHOUT_CLASSIFICATION	0.001203550821986984	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9710290462263139	WITHOUT_CLASSIFICATION	0.028970953773686026	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999241018871162	WITHOUT_CLASSIFICATION	7.589811288385047E-5	DESIGN
the syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9997766497905128	WITHOUT_CLASSIFICATION	2.2335020948724651E-4	DESIGN
completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9990712534802219	WITHOUT_CLASSIFICATION	9.287465197782278E-4	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9973923477218076	WITHOUT_CLASSIFICATION	0.0026076522781924003	DESIGN
limit support (ala top) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979502502392724	WITHOUT_CLASSIFICATION	0.002049749760727562	DESIGN
intersystems cache' does not current support "select for update" syntax set your transaction mode to read_committed before using	WITHOUT_CLASSIFICATION	0.9348711526201355	WITHOUT_CLASSIFICATION	0.06512884737986449	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999085225730044	WITHOUT_CLASSIFICATION	9.147742699559447E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999085225730044	WITHOUT_CLASSIFICATION	9.147742699559447E-4	DESIGN
<string>	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982108201859682	WITHOUT_CLASSIFICATION	0.0017891798140318293	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978826837626378	WITHOUT_CLASSIFICATION	0.0021173162373621566	DESIGN
the keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9991572994026389	WITHOUT_CLASSIFICATION	8.427005973612694E-4	DESIGN
does the limit clause come at the start of the select statement rather than at the end?	WITHOUT_CLASSIFICATION	0.9967404780920514	WITHOUT_CLASSIFICATION	0.0032595219079486447	DESIGN
does the limit clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9994153460656159	WITHOUT_CLASSIFICATION	5.84653934384037E-4	DESIGN
the name of the sql function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9989993099790467	WITHOUT_CLASSIFICATION	0.0010006900209532587	DESIGN
create an outerjoingenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9960454998881852	WITHOUT_CLASSIFICATION	0.003954500111814726	DESIGN
the keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.999880376107275	WITHOUT_CLASSIFICATION	1.1962389272494738E-4	DESIGN
registerfunction( "trim" new standardsqlfunction( "trim" hibernate.string ) )	WITHOUT_CLASSIFICATION	0.9991071386876154	WITHOUT_CLASSIFICATION	8.928613123847173E-4	DESIGN
skip the from keyword in params	WITHOUT_CLASSIFICATION	0.9998376382672766	WITHOUT_CLASSIFICATION	1.6236173272353893E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9996736783687447	WITHOUT_CLASSIFICATION	3.2632163125530575E-4	DESIGN
potentialtrimcharacterargindex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999127201050249	WITHOUT_CLASSIFICATION	8.727989497505235E-5	DESIGN
sqlfunction implementation	WITHOUT_CLASSIFICATION	0.9998578305958458	WITHOUT_CLASSIFICATION	1.421694041543031E-4	DESIGN
conceivable that the dialect ctor could throw hibernateexceptions so don't re-wrap	WITHOUT_CLASSIFICATION	0.9991933265560325	WITHOUT_CLASSIFICATION	8.066734439675065E-4	DESIGN
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9995853775779419	WITHOUT_CLASSIFICATION	4.1462242205814675E-4	DESIGN
register resolvers set via environment property	WITHOUT_CLASSIFICATION	0.999666804025618	WITHOUT_CLASSIFICATION	3.331959743818924E-4	DESIGN
kept for backward compatibility until after the 3.1beta5 release of ha	WITHOUT_CLASSIFICATION	0.9999390863604881	WITHOUT_CLASSIFICATION	6.0913639511984897E-5	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.999984242897686	WITHOUT_CLASSIFICATION	1.5757102314130782E-5	DESIGN
the cascadingaction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999818963617063	WITHOUT_CLASSIFICATION	1.8103638293700066E-4	DESIGN
the cascadingaction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998399331779845	WITHOUT_CLASSIFICATION	1.6006682201562887E-4	DESIGN
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9988139369154375	WITHOUT_CLASSIFICATION	0.0011860630845624556	DESIGN
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9983327506508519	WITHOUT_CLASSIFICATION	0.0016672493491480531	DESIGN
(lockmode) anything	WITHOUT_CLASSIFICATION	0.9999761616049991	WITHOUT_CLASSIFICATION	2.383839500089973E-5	DESIGN
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9994420874289316	WITHOUT_CLASSIFICATION	5.57912571068418E-4	DESIGN
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999613226234551	WITHOUT_CLASSIFICATION	3.867737654490916E-4	DESIGN
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9984496173820306	WITHOUT_CLASSIFICATION	0.001550382617969378	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9992275906216631	WITHOUT_CLASSIFICATION	7.724093783369115E-4	DESIGN
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.998180736789528	WITHOUT_CLASSIFICATION	0.0018192632104720228	DESIGN
for deprecated saveorupdatecopy()	WITHOUT_CLASSIFICATION	0.9961621401609099	WITHOUT_CLASSIFICATION	0.003837859839090241	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9984496173820306	WITHOUT_CLASSIFICATION	0.001550382617969378	DESIGN
a proxy cannot be transient and it breaks foreignkeys.istransient	WITHOUT_CLASSIFICATION	0.9996673739007765	WITHOUT_CLASSIFICATION	3.3262609922346645E-4	DESIGN
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.998705739027258	WITHOUT_CLASSIFICATION	0.001294260972742032	DESIGN
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986848553410377	WITHOUT_CLASSIFICATION	0.0013151446589622835	DESIGN
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9994902337335181	WITHOUT_CLASSIFICATION	5.097662664819912E-4	DESIGN
actually the semantics of the next three are really "bag" note that unlike objects collection insertions updates deletions are not really remembered between flushes. we just re-use the same lists for convenience.	WITHOUT_CLASSIFICATION	0.8849364140895735	WITHOUT_CLASSIFICATION	0.11506358591042647	DESIGN
add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9997798642188349	WITHOUT_CLASSIFICATION	2.201357811651178E-4	DESIGN
continue loop	WITHOUT_CLASSIFICATION	0.9999587802684933	WITHOUT_CLASSIFICATION	4.121973150677244E-5	DESIGN
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999365880578293	WITHOUT_CLASSIFICATION	6.341194217072758E-5	DESIGN
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999365880578293	WITHOUT_CLASSIFICATION	6.341194217072758E-5	DESIGN
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9998590616156418	WITHOUT_CLASSIFICATION	1.4093838435832055E-4	DESIGN
the map of batch numbers to entityinsertaction lists	WITHOUT_CLASSIFICATION	0.9998320514738369	WITHOUT_CLASSIFICATION	1.6794852616320395E-4	DESIGN
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9997254111679098	WITHOUT_CLASSIFICATION	2.745888320900948E-4	DESIGN
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999518662083415	WITHOUT_CLASSIFICATION	4.813379165851034E-5	DESIGN
remove the current element from insertions. it will be added back later.	WITHOUT_CLASSIFICATION	0.9991322650021974	WITHOUT_CLASSIFICATION	8.677349978025374E-4	DESIGN
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.998339664062825	WITHOUT_CLASSIFICATION	0.0016603359371748373	DESIGN
there is already an existing batch for this type of entity. check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9982673071809	WITHOUT_CLASSIFICATION	0.001732692819100032	DESIGN
now rebuild the insertions list. there is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9998684624162981	WITHOUT_CLASSIFICATION	1.315375837019488E-4	DESIGN
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9970129040355638	WITHOUT_CLASSIFICATION	0.002987095964436231	DESIGN
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9997456850619659	WITHOUT_CLASSIFICATION	2.543149380340996E-4	DESIGN
find the batch number associated with the current association if any.	WITHOUT_CLASSIFICATION	0.9998564948946151	WITHOUT_CLASSIFICATION	1.4350510538477717E-4	DESIGN
create a new batch for this type. the batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9945305037755321	WITHOUT_CLASSIFICATION	0.005469496224467922	DESIGN
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9998211835302651	WITHOUT_CLASSIFICATION	1.788164697349236E-4	DESIGN
since this entity will now be processed in the latest possible batch we can be assured that it will come after all other associations there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999244822607949	WITHOUT_CLASSIFICATION	7.551773920506663E-5	DESIGN
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9983373747723562	WITHOUT_CLASSIFICATION	0.001662625227643873	DESIGN
not really necessary but good for consistency	WITHOUT_CLASSIFICATION	0.9978617003403216	WITHOUT_CLASSIFICATION	0.0021382996596783425	DESIGN
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9994019166853887	WITHOUT_CLASSIFICATION	5.980833146113869E-4	DESIGN
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9928257250034036	WITHOUT_CLASSIFICATION	0.007174274996596414	DESIGN
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9995514977197602	WITHOUT_CLASSIFICATION	4.485022802398129E-4	DESIGN
loaded entity instances by entityuniquekey	WITHOUT_CLASSIFICATION	0.9993549127839094	WITHOUT_CLASSIFICATION	6.450872160906157E-4	DESIGN
identity map of entityentry instances by the entity instance	WITHOUT_CLASSIFICATION	0.9998513966098523	WITHOUT_CLASSIFICATION	1.486033901476234E-4	DESIGN
entity proxies by entitykey	WITHOUT_CLASSIFICATION	0.9996266586842845	WITHOUT_CLASSIFICATION	3.7334131571548236E-4	DESIGN
snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9996989876560028	WITHOUT_CLASSIFICATION	3.01012343997074E-4	DESIGN
identity map of array holder arrayholder instances by the array instance	WITHOUT_CLASSIFICATION	0.9999615666390375	WITHOUT_CLASSIFICATION	3.8433360962503E-5	DESIGN
collection wrappers by the collectionkey key=collectionkey value=persistentcollection	WITHOUT_CLASSIFICATION	0.9986091259713058	WITHOUT_CLASSIFICATION	0.0013908740286941348	DESIGN
set of entitykeys of deleted objects	WITHOUT_CLASSIFICATION	0.9993384707751393	WITHOUT_CLASSIFICATION	6.615292248606004E-4	DESIGN
properties that we have tried to load and not found in the database	WITHOUT_CLASSIFICATION	0.9996791695390836	WITHOUT_CLASSIFICATION	3.2083046091633047E-4	DESIGN
a list of collection wrappers that were instantiating during result set processing that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9808537711613782	WITHOUT_CLASSIFICATION	0.01914622883862181	DESIGN
a container for collections we load up when the owning entity is not yet loaded for now this is purely transient!	WITHOUT_CLASSIFICATION	0.9999628551065582	WITHOUT_CLASSIFICATION	3.714489344178081E-5	DESIGN
downgrade locks	WITHOUT_CLASSIFICATION	0.9999254242153017	WITHOUT_CLASSIFICATION	7.457578469823472E-5	DESIGN
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9998401271192564	WITHOUT_CLASSIFICATION	1.5987288074364588E-4	DESIGN
unwrap the object	WITHOUT_CLASSIFICATION	0.9999810778395546	WITHOUT_CLASSIFICATION	1.8922160445352706E-5	DESIGN
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999830145047347	WITHOUT_CLASSIFICATION	1.6985495265311744E-5	DESIGN
return the proxied object	WITHOUT_CLASSIFICATION	0.9999750002503585	WITHOUT_CLASSIFICATION	2.4999749641534306E-5	DESIGN
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999961156866953	WITHOUT_CLASSIFICATION	3.884313304622628E-6	DESIGN
early exit	WITHOUT_CLASSIFICATION	0.9999504253123915	WITHOUT_CLASSIFICATION	4.957468760855415E-5	DESIGN
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9948894545481053	WITHOUT_CLASSIFICATION	0.00511054545189472	DESIGN
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9934785190884315	WITHOUT_CLASSIFICATION	0.00652148091156839	DESIGN
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9706287083935261	WITHOUT_CLASSIFICATION	0.02937129160647391	DESIGN
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.99999292210703	WITHOUT_CLASSIFICATION	7.077892970094074E-6	DESIGN
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9889645712722824	WITHOUT_CLASSIFICATION	0.011035428727717607	DESIGN
public boolean isnonexistant(entitykey key) {return nonexistantentitykeys.contains(key)}	WITHOUT_CLASSIFICATION	0.9996945210582246	WITHOUT_CLASSIFICATION	3.0547894177544634E-4	DESIGN
public boolean isnonexistant(entityuniquekey key) {return nonexistententityuniquekeys.contains(key)}	WITHOUT_CLASSIFICATION	0.9996945210582246	WITHOUT_CLASSIFICATION	3.0547894177544634E-4	DESIGN
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.999747836962835	WITHOUT_CLASSIFICATION	2.5216303716503653E-4	DESIGN
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9973421590255038	WITHOUT_CLASSIFICATION	0.002657840974496201	DESIGN
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9995999510198903	WITHOUT_CLASSIFICATION	4.0004898010965925E-4	DESIGN
otherwise the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999820944582289	WITHOUT_CLASSIFICATION	1.7905541771040877E-5	DESIGN
adds remove as a sort-of alias for delete	WITHOUT_CLASSIFICATION	0.9931420166354382	WITHOUT_CLASSIFICATION	0.006857983364561715	DESIGN
bad cast	WITHOUT_CLASSIFICATION	0.9997906702074204	WITHOUT_CLASSIFICATION	2.093297925794612E-4	DESIGN
return lhspersister.getsubclasspropertycolumnnames(property)	WITHOUT_CLASSIFICATION	0.9996204215232694	WITHOUT_CLASSIFICATION	3.7957847673053937E-4	DESIGN
property-refs for associations defined on a component are not supported so no need to slice	WITHOUT_CLASSIFICATION	0.998330799727	WITHOUT_CLASSIFICATION	0.0016692002730000258	DESIGN
if there is no property-ref assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9996786769619084	WITHOUT_CLASSIFICATION	3.2132303809166875E-4	DESIGN
handle a property-ref	WITHOUT_CLASSIFICATION	0.9992214507401602	WITHOUT_CLASSIFICATION	7.785492598398879E-4	DESIGN
nativesqlqueryreturn	WITHOUT_CLASSIFICATION	0.9999241018871162	WITHOUT_CLASSIFICATION	7.589811288385047E-5	DESIGN
final boolean forcecacherefresh	WITHOUT_CLASSIFICATION	0.9991935954631018	WITHOUT_CLASSIFICATION	8.06404536898197E-4	DESIGN
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9601548284889797	WITHOUT_CLASSIFICATION	0.039845171511020294	DESIGN
this.forcecacherefresh = forcecacherefresh	WITHOUT_CLASSIFICATION	0.9999160254598517	WITHOUT_CLASSIFICATION	8.39745401482966E-5	DESIGN
hella important optimization!!!	WITHOUT_CLASSIFICATION	0.9995386496533025	WITHOUT_CLASSIFICATION	4.61350346697371E-4	DESIGN
return that.type.equals(type) && equalshelper.equals(that.value value)	WITHOUT_CLASSIFICATION	0.9996364460417206	WITHOUT_CLASSIFICATION	3.6355395827930337E-4	DESIGN
must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9991528764789481	WITHOUT_CLASSIFICATION	8.471235210518353E-4	DESIGN
take a snapshot	WITHOUT_CLASSIFICATION	0.9998102161092879	WITHOUT_CLASSIFICATION	1.8978389071219298E-4	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9998237084385935	WITHOUT_CLASSIFICATION	1.7629156140654156E-4	DESIGN
the owning entity may have been deleted and its identifier unset due to identifier-rollback in which case try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9998300869815627	WITHOUT_CLASSIFICATION	1.6991301843713227E-4	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9998931688006473	WITHOUT_CLASSIFICATION	1.0683119935272758E-4	DESIGN
we've been here before	WITHOUT_CLASSIFICATION	0.9999134131277612	WITHOUT_CLASSIFICATION	8.658687223881885E-5	DESIGN
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9993184600783853	WITHOUT_CLASSIFICATION	6.815399216146618E-4	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9998931688006473	WITHOUT_CLASSIFICATION	1.0683119935272758E-4	DESIGN
if either its role changed	WITHOUT_CLASSIFICATION	0.9999467801041537	WITHOUT_CLASSIFICATION	5.321989584618015E-5	DESIGN
or its key changed	WITHOUT_CLASSIFICATION	0.9999915217261618	WITHOUT_CLASSIFICATION	8.478273838205916E-6	DESIGN
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9957809745904352	WITHOUT_CLASSIFICATION	0.004219025409564695	DESIGN
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9669818272892519	WITHOUT_CLASSIFICATION	0.033018172710748105	DESIGN
force initialize!	WITHOUT_CLASSIFICATION	0.9999501772656962	WITHOUT_CLASSIFICATION	4.9822734303718015E-5	DESIGN
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999859257845468	WITHOUT_CLASSIFICATION	1.407421545321784E-5	DESIGN
attributes maintained between flush cycles	WITHOUT_CLASSIFICATION	0.998463107610741	WITHOUT_CLASSIFICATION	0.0015368923892590354	DESIGN
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.999765954520878	WITHOUT_CLASSIFICATION	2.34045479121938E-4	DESIGN
allow the collectionsnapshot to be serialized	WITHOUT_CLASSIFICATION	0.999408888125893	WITHOUT_CLASSIFICATION	5.911118741069938E-4	DESIGN
attributes used only during flush cycle	WITHOUT_CLASSIFICATION	0.9991687340166213	WITHOUT_CLASSIFICATION	8.312659833786856E-4	DESIGN
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9994273157998809	WITHOUT_CLASSIFICATION	5.726842001192279E-4	DESIGN
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9990570307259489	WITHOUT_CLASSIFICATION	9.429692740509804E-4	DESIGN
during flush we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9954832849857232	WITHOUT_CLASSIFICATION	0.004516715014276734	DESIGN
if we instantiate a collection during the flush() process we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9988587221014926	WITHOUT_CLASSIFICATION	0.0011412778985073258	DESIGN
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9998767673358445	WITHOUT_CLASSIFICATION	1.2323266415554363E-4	DESIGN
a newly wrapped collection is not dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9946050470076827	WITHOUT_CLASSIFICATION	0.00539495299231722	DESIGN
collection.cleardirty()	WITHOUT_CLASSIFICATION	0.999866875766015	WITHOUT_CLASSIFICATION	1.3312423398502407E-4	DESIGN
collection.cleardirty()	WITHOUT_CLASSIFICATION	0.999866875766015	WITHOUT_CLASSIFICATION	1.3312423398502407E-4	DESIGN
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9998997349255528	WITHOUT_CLASSIFICATION	1.0026507444718906E-4	DESIGN
optimization	WITHOUT_CLASSIFICATION	0.9999480122270862	WITHOUT_CLASSIFICATION	5.1987772913797935E-5	DESIGN
optimization optimization	WITHOUT_CLASSIFICATION	0.999908812525586	WITHOUT_CLASSIFICATION	9.118747441397149E-5	DESIGN
re-snapshot	WITHOUT_CLASSIFICATION	0.9999241018871162	WITHOUT_CLASSIFICATION	7.589811288385047E-5	DESIGN
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9970886815770504	WITHOUT_CLASSIFICATION	0.0029113184229495196	DESIGN
note this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9851962359312088	WITHOUT_CLASSIFICATION	0.014803764068791256	DESIGN
memory optimization	WITHOUT_CLASSIFICATION	0.9999484352397686	WITHOUT_CLASSIFICATION	5.156476023124544E-5	DESIGN
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.999598406263723	WITHOUT_CLASSIFICATION	4.015937362770597E-4	DESIGN
copied from session	WITHOUT_CLASSIFICATION	0.9976813824374731	WITHOUT_CLASSIFICATION	0.0023186175625269888	DESIGN
this should not happen since the dtd prevents it	WITHOUT_CLASSIFICATION	0.9994627954385819	WITHOUT_CLASSIFICATION	5.372045614181319E-4	DESIGN
joinprocessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the sql ast. 'hasfiltercondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.99940496116142	WITHOUT_CLASSIFICATION	5.950388385800058E-4	DESIGN
the current join represents the join between a many-to-many association table and its "target" table. here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9961748142835039	WITHOUT_CLASSIFICATION	0.00382518571649608	DESIGN
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9997840054911736	WITHOUT_CLASSIFICATION	2.1599450882625243E-4	DESIGN
values is not null and is checkable we'll look deeper	WITHOUT_CLASSIFICATION	0.9996100054771369	WITHOUT_CLASSIFICATION	3.899945228630867E-4	DESIGN
for non null args check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9991600465579564	WITHOUT_CLASSIFICATION	8.399534420437201E-4	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.999984242897686	WITHOUT_CLASSIFICATION	1.5757102314130782E-5	DESIGN
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9991089041287691	WITHOUT_CLASSIFICATION	8.910958712310417E-4	DESIGN
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999476885249263	WITHOUT_CLASSIFICATION	5.23114750737437E-5	DESIGN
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9977048241540869	WITHOUT_CLASSIFICATION	0.002295175845913018	DESIGN
do the test	WITHOUT_CLASSIFICATION	0.9999934634075294	WITHOUT_CLASSIFICATION	6.536592470580234E-6	DESIGN
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9998457415080932	WITHOUT_CLASSIFICATION	1.5425849190675039E-4	DESIGN
unwrap it	WITHOUT_CLASSIFICATION	0.9999272243429187	WITHOUT_CLASSIFICATION	7.277565708135361E-5	DESIGN
see if the entity is already bound to this session if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9886629928874517	WITHOUT_CLASSIFICATION	0.011337007112548314	DESIGN
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9998305831359018	WITHOUT_CLASSIFICATION	1.694168640981545E-4	DESIGN
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9978099055760116	WITHOUT_CLASSIFICATION	0.002190094423988327	DESIGN
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9962262255007952	WITHOUT_CLASSIFICATION	0.003773774499204705	DESIGN
we use the assumed value if there is one to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9998446660002904	WITHOUT_CLASSIFICATION	1.5533399970962285E-4	DESIGN
hit the database after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9995523503325969	WITHOUT_CLASSIFICATION	4.4764966740314723E-4	DESIGN
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context so make some deeper checks	WITHOUT_CLASSIFICATION	0.99601091045973	WITHOUT_CLASSIFICATION	0.003989089540269992	DESIGN
int count = 0	WITHOUT_CLASSIFICATION	0.9999949648354778	WITHOUT_CLASSIFICATION	5.035164522164029E-6	DESIGN
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999801756144007	WITHOUT_CLASSIFICATION	1.9824385599252657E-5	DESIGN
checkforend = false	WITHOUT_CLASSIFICATION	0.999990844015641	WITHOUT_CLASSIFICATION	9.155984359042843E-6	DESIGN
count++	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
end of array start filling again from start	WITHOUT_CLASSIFICATION	0.9976093715073541	WITHOUT_CLASSIFICATION	0.002390628492645955	DESIGN
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9996920843036466	WITHOUT_CLASSIFICATION	3.079156963533789E-4	DESIGN
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9991436602657909	WITHOUT_CLASSIFICATION	8.563397342089437E-4	DESIGN
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999533197401065	WITHOUT_CLASSIFICATION	4.668025989355676E-5	DESIGN
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9997285782858133	WITHOUT_CLASSIFICATION	2.714217141867206E-4	DESIGN
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999099945444825	WITHOUT_CLASSIFICATION	9.000545551753954E-5	DESIGN
ignore this row of results! note the early exit	WITHOUT_CLASSIFICATION	0.9998294229111475	WITHOUT_CLASSIFICATION	1.705770888524736E-4	DESIGN
initialize this collection	WITHOUT_CLASSIFICATION	0.9976267109527599	WITHOUT_CLASSIFICATION	0.0023732890472401326	DESIGN
create one	WITHOUT_CLASSIFICATION	0.9999163742068417	WITHOUT_CLASSIFICATION	8.362579315843062E-5	DESIGN
warning can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9996299259195763	WITHOUT_CLASSIFICATION	3.7007408042374136E-4	DESIGN
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999031833796639	WITHOUT_CLASSIFICATION	9.681662033600013E-5	DESIGN
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9984495787508175	WITHOUT_CLASSIFICATION	0.001550421249182469	DESIGN
some filters affecting the collection are enabled on the session so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9983376269092518	WITHOUT_CLASSIFICATION	0.0016623730907483192	DESIGN
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982172673429958	WITHOUT_CLASSIFICATION	0.0017827326570042086	DESIGN
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9976298965237952	WITHOUT_CLASSIFICATION	0.002370103476204782	DESIGN
collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991723652074144	WITHOUT_CLASSIFICATION	8.276347925856371E-4	DESIGN
simple cache of param metadata based on query string. ideally the original "user-supplied query" string should be used to retreive this metadata (i.e. not the para-list-expanded query string) to avoid unnecessary cache entries. used solely for caching param metadata for native-sql queries see getsqlparametermetadata() for a discussion as to why	WITHOUT_CLASSIFICATION	0.9748293409978226	WITHOUT_CLASSIFICATION	0.025170659002177333	DESIGN
the cache of the actual plans	WITHOUT_CLASSIFICATION	0.9999810094014642	WITHOUT_CLASSIFICATION	1.8990598535863117E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9996736783687447	WITHOUT_CLASSIFICATION	3.2632163125530575E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9996736783687447	WITHOUT_CLASSIFICATION	3.2632163125530575E-4	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9998428039606778	WITHOUT_CLASSIFICATION	1.5719603932216064E-4	DESIGN
for native-sql queries the param metadata is determined outside any relation to a query plan because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9954428995463385	WITHOUT_CLASSIFICATION	0.004557100453661495	DESIGN
don't care	WITHOUT_CLASSIFICATION	0.9998138170395028	WITHOUT_CLASSIFICATION	1.8618296049726163E-4	DESIGN
recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998211326587948	WITHOUT_CLASSIFICATION	0.0017886734120519574	DESIGN
don't care	WITHOUT_CLASSIFICATION	0.9998138170395028	WITHOUT_CLASSIFICATION	1.8618296049726163E-4	DESIGN
note firstrow is zero-based	WITHOUT_CLASSIFICATION	0.9998195715124427	WITHOUT_CLASSIFICATION	1.804284875573738E-4	DESIGN
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999781890135822	WITHOUT_CLASSIFICATION	2.1810986417899046E-5	DESIGN
named parameter	WITHOUT_CLASSIFICATION	0.999571678053872	WITHOUT_CLASSIFICATION	4.283219461279477E-4	DESIGN
could be either an ordinal or jpa-positional parameter	WITHOUT_CLASSIFICATION	0.99739839388395	WITHOUT_CLASSIFICATION	0.002601606116049953	DESIGN
a peek ahead showed this as an jpa-positional parameter	WITHOUT_CLASSIFICATION	0.9921586130172411	WITHOUT_CLASSIFICATION	0.007841386982758883	DESIGN
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9985516941705187	WITHOUT_CLASSIFICATION	0.0014483058294813282	DESIGN
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9998752384135308	WITHOUT_CLASSIFICATION	1.2476158646928346E-4	DESIGN
perform the actual work	WITHOUT_CLASSIFICATION	0.9996358618734629	WITHOUT_CLASSIFICATION	3.6413812653717827E-4	DESIGN
if everything went ok commit the transaction and close the obtained connection handle	WITHOUT_CLASSIFICATION	0.9999610464623316	WITHOUT_CLASSIFICATION	3.895353766833477E-5	DESIGN
at some point the processing went bad so we need to 1) make sure the connection handle gets released 2) try to cleanup the jta context as much as possible	WITHOUT_CLASSIFICATION	0.9912043308640154	WITHOUT_CLASSIFICATION	0.00879566913598459	DESIGN
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999335698153468	WITHOUT_CLASSIFICATION	6.643018465328035E-5	DESIGN
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9896271643853392	WITHOUT_CLASSIFICATION	0.010372835614660871	DESIGN
saveorupdatecopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9983555713936068	WITHOUT_CLASSIFICATION	0.0016444286063932608	DESIGN
collectionpersister should not be null but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9501376304514297	WITHOUT_CLASSIFICATION	0.04986236954857025	DESIGN
otherwise a null or brand new collection this will also (inefficiently) handle arrays which have no snapshot so we can't do any better processarrayornewcollection(collection type)	WITHOUT_CLASSIFICATION	0.7303876730948834	WITHOUT_CLASSIFICATION	0.26961232690511666	DESIGN
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9944991513513664	WITHOUT_CLASSIFICATION	0.005500848648633665	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999927863356595	WITHOUT_CLASSIFICATION	7.213664340515147E-6	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999927863356595	WITHOUT_CLASSIFICATION	7.213664340515147E-6	DESIGN
force a substitution!	WITHOUT_CLASSIFICATION	0.9998482603221489	WITHOUT_CLASSIFICATION	1.5173967785101728E-4	DESIGN
the user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9972833321230781	WITHOUT_CLASSIFICATION	0.002716667876922037	DESIGN
the database now holds a lock + the object is flushed from the cache so release the soft lock	WITHOUT_CLASSIFICATION	0.9997865524356013	WITHOUT_CLASSIFICATION	2.1344756439857095E-4	DESIGN
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999892004894376	WITHOUT_CLASSIFICATION	1.07995105623995E-5	DESIGN
search for collections by reachability updating their role. we don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9728800418057011	WITHOUT_CLASSIFICATION	0.02711995819429888	DESIGN
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9895424765728045	WITHOUT_CLASSIFICATION	0.0104575234271955	DESIGN
note we need to do the wrap here even if its not "dirty" because collections need wrapping but changes to _them_ don't dirty the container. also for versioned data we need to wrap before calling searchfordirtycollections	WITHOUT_CLASSIFICATION	0.9953494406300263	WITHOUT_CLASSIFICATION	0.004650559369973662	DESIGN
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9998839329433984	WITHOUT_CLASSIFICATION	1.1606705660165453E-4	DESIGN
grab its current state	WITHOUT_CLASSIFICATION	0.9999345200080044	WITHOUT_CLASSIFICATION	6.547999199559064E-5	DESIGN
schedule the update note that we intentionally do _not_ pass in currentpersistentstate!	WITHOUT_CLASSIFICATION	0.9999798526860968	WITHOUT_CLASSIFICATION	2.014731390321802E-5	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9993608103145794	WITHOUT_CLASSIFICATION	6.391896854206768E-4	DESIGN
give the interceptor a chance to process property values if the properties were modified by the interceptor we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999937793978059	WITHOUT_CLASSIFICATION	6.2206021941725325E-6	DESIGN
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9997356602988574	WITHOUT_CLASSIFICATION	2.6433970114251584E-4	DESIGN
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9962432674176637	WITHOUT_CLASSIFICATION	0.003756732582336323	DESIGN
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999265380944087	WITHOUT_CLASSIFICATION	7.346190559127381E-5	DESIGN
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9952752116124947	WITHOUT_CLASSIFICATION	0.0047247883875053825	DESIGN
give the interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999725225110133	WITHOUT_CLASSIFICATION	2.747748898668429E-5	DESIGN
now we might need to recalculate the dirtyproperties array	WITHOUT_CLASSIFICATION	0.9990144341187208	WITHOUT_CLASSIFICATION	9.855658812791565E-4	DESIGN
use the current version	WITHOUT_CLASSIFICATION	0.9999183451962571	WITHOUT_CLASSIFICATION	8.165480374288044E-5	DESIGN
interceptor returned null so do the dirtycheck ourself if possible	WITHOUT_CLASSIFICATION	0.9999216671972846	WITHOUT_CLASSIFICATION	7.833280271545389E-5	DESIGN
object loaded by update()	WITHOUT_CLASSIFICATION	0.9998156517325095	WITHOUT_CLASSIFICATION	1.843482674905539E-4	DESIGN
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999625138608345	WITHOUT_CLASSIFICATION	3.748613916555947E-5	DESIGN
dirty check against the database snapshot if possible/necessary	WITHOUT_CLASSIFICATION	0.9999734703839783	WITHOUT_CLASSIFICATION	2.6529616021609472E-5	DESIGN
the interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9998647177816369	WITHOUT_CLASSIFICATION	1.352822183631795E-4	DESIGN
even process null collections	WITHOUT_CLASSIFICATION	0.9999210823015381	WITHOUT_CLASSIFICATION	7.891769846195905E-5	DESIGN
get the id from the object	WITHOUT_CLASSIFICATION	0.9998860693871441	WITHOUT_CLASSIFICATION	1.139306128559505E-4	DESIGN
always do an insert and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9929285412657672	WITHOUT_CLASSIFICATION	0.007071458734232698	DESIGN
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9963545051362253	WITHOUT_CLASSIFICATION	0.0036454948637748134	DESIGN
/ hhh-2378	WITHOUT_CLASSIFICATION	0.9999537285718064	WITHOUT_CLASSIFICATION	4.6271428193561E-5	DESIGN
will result in a sql update	WITHOUT_CLASSIFICATION	0.9999789472765435	WITHOUT_CLASSIFICATION	2.10527234565169E-5	DESIGN
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999746549778731	WITHOUT_CLASSIFICATION	2.5345022126855102E-5	DESIGN
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9997981777044462	WITHOUT_CLASSIFICATION	2.0182229555379638E-4	DESIGN
refresh() does not pass an entityname	WITHOUT_CLASSIFICATION	0.9998876500373234	WITHOUT_CLASSIFICATION	1.123499626766265E-4	DESIGN
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9966674430899529	WITHOUT_CLASSIFICATION	0.0033325569100469995	DESIGN
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9997637847567012	WITHOUT_CLASSIFICATION	2.3621524329880505E-4	DESIGN
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999524415611961	WITHOUT_CLASSIFICATION	4.75584388038285E-5	DESIGN
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.999962335673666	WITHOUT_CLASSIFICATION	3.7664326333926275E-5	DESIGN
this object was already loaded	WITHOUT_CLASSIFICATION	0.9995476102093367	WITHOUT_CLASSIFICATION	4.5238979066336777E-4	DESIGN
entity was found in second-level cache	WITHOUT_CLASSIFICATION	0.9993479954507747	WITHOUT_CLASSIFICATION	6.520045492252543E-4	DESIGN
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.998982647364313	WITHOUT_CLASSIFICATION	0.001017352635687054	DESIGN
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.99909227108476	WITHOUT_CLASSIFICATION	9.077289152400002E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993402958946245	WITHOUT_CLASSIFICATION	6.597041053756575E-4	DESIGN
some statistics	WITHOUT_CLASSIFICATION	0.99988708383271	WITHOUT_CLASSIFICATION	1.1291616729003836E-4	DESIGN
safe from concurrent modification because of how entrylist() is implemented on identitymap	WITHOUT_CLASSIFICATION	0.9992364898449236	WITHOUT_CLASSIFICATION	7.63510155076315E-4	DESIGN
initialize dirty flags for arrays + collections with composite elements and reset reached doupdate etc.	WITHOUT_CLASSIFICATION	0.9997930903570813	WITHOUT_CLASSIFICATION	2.0690964291866876E-4	DESIGN
among other things updatereachables() will recursively load all collections that are moving roles. this might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9903250910479879	WITHOUT_CLASSIFICATION	0.00967490895201216	DESIGN
so this needs to be safe from concurrent modification problems. it is safe because of how identitymap implements entryset()	WITHOUT_CLASSIFICATION	0.9442638334299882	WITHOUT_CLASSIFICATION	0.055736166570011875	DESIGN
update the status of the object and if necessary schedule an update	WITHOUT_CLASSIFICATION	0.9998808115685277	WITHOUT_CLASSIFICATION	1.1918843147233315E-4	DESIGN
schedule updates to collections	WITHOUT_CLASSIFICATION	0.9990394032363425	WITHOUT_CLASSIFICATION	9.605967636573845E-4	DESIGN
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9941241805566174	WITHOUT_CLASSIFICATION	0.005875819443382573	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993402958946245	WITHOUT_CLASSIFICATION	6.597041053756575E-4	DESIGN
the database has changed now so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999609483889038	WITHOUT_CLASSIFICATION	3.905161109617559E-5	DESIGN
if the collection is dereferenced remove from the session cache iter.remove() does not work since the entryset is not backed by the set	WITHOUT_CLASSIFICATION	0.9144719491537493	WITHOUT_CLASSIFICATION	0.08552805084625066	DESIGN
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9992857457457014	WITHOUT_CLASSIFICATION	7.142542542986187E-4	DESIGN
get a snapshot	WITHOUT_CLASSIFICATION	0.999921833357114	WITHOUT_CLASSIFICATION	7.816664288592456E-5	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9999242139451882	WITHOUT_CLASSIFICATION	7.578605481187491E-5	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9999242139451882	WITHOUT_CLASSIFICATION	7.578605481187491E-5	DESIGN
key is an entity involved with the operation performed by the listener value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9995678600861371	WITHOUT_CLASSIFICATION	4.32139913862869E-4	DESIGN
early exit!!!	WITHOUT_CLASSIFICATION	0.9999361135120728	WITHOUT_CLASSIFICATION	6.388648792726615E-5	DESIGN
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9994764427364944	WITHOUT_CLASSIFICATION	5.235572635056358E-4	DESIGN
before any callbacks etc so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9983525717727185	WITHOUT_CLASSIFICATION	0.0016474282272814892	DESIGN
ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9995525379112894	WITHOUT_CLASSIFICATION	4.474620887106114E-4	DESIGN
typefactory.deepcopy( currentstate proptypes persister.getpropertyupdateability() deletedstate session )	WITHOUT_CLASSIFICATION	0.9992354885263572	WITHOUT_CLASSIFICATION	7.645114736428869E-4	DESIGN
cascade-delete to collections before the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9996974016818142	WITHOUT_CLASSIFICATION	3.025983181857046E-4	DESIGN
cascade-delete to many-to-one after the parent was deleted	WITHOUT_CLASSIFICATION	0.9998947094504488	WITHOUT_CLASSIFICATION	1.0529054955115923E-4	DESIGN
if it is an initialized proxy let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9956253018268849	WITHOUT_CLASSIFICATION	0.004374698173115086	DESIGN
assign the requested id to the proxy before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999328031419236	WITHOUT_CLASSIFICATION	6.719685807641767E-5	DESIGN
an uninitialized proxy noop don't even need to return an id since it is never a save()	WITHOUT_CLASSIFICATION	0.9982248567860227	WITHOUT_CLASSIFICATION	0.0017751432139773693	DESIGN
initialize properties of the event	WITHOUT_CLASSIFICATION	0.9993061491782556	WITHOUT_CLASSIFICATION	6.938508217444504E-4	DESIGN
return the id in the event object	WITHOUT_CLASSIFICATION	0.9997167124330432	WITHOUT_CLASSIFICATION	2.832875669568893E-4	DESIGN
transient or deleted	WITHOUT_CLASSIFICATION	0.9999743499694957	WITHOUT_CLASSIFICATION	2.5650030504229764E-5	DESIGN
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9990567036732867	WITHOUT_CLASSIFICATION	9.432963267134073E-4	DESIGN
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.8468654278435316	WITHOUT_CLASSIFICATION	0.15313457215646845	DESIGN
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9995308405996562	WITHOUT_CLASSIFICATION	4.691594003437558E-4	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9985447139376791	WITHOUT_CLASSIFICATION	0.0014552860623210193	DESIGN
cachedstate	WITHOUT_CLASSIFICATION	0.9999241018871162	WITHOUT_CLASSIFICATION	7.589811288385047E-5	DESIGN
assume true since we don't really know and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999061922593574	WITHOUT_CLASSIFICATION	9.380774064270615E-5	DESIGN
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9997688577099811	WITHOUT_CLASSIFICATION	2.3114229001888555E-4	DESIGN
if the collection belonged to a different entity clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.999861589364036	WITHOUT_CLASSIFICATION	1.3841063596388512E-4	DESIGN
log.debug( "calling onload()" )	WITHOUT_CLASSIFICATION	0.9991653560730299	WITHOUT_CLASSIFICATION	8.346439269700429E-4	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9999429332197395	WITHOUT_CLASSIFICATION	5.7066780260468465E-5	DESIGN
note performexecutions() clears all collectionxxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9993402159926182	WITHOUT_CLASSIFICATION	6.597840073818324E-4	DESIGN
if no array holder we found an unwrappered array (this can't occur because we now always call wrap() before getting to here) return (ah==null) ? true searchfordirtycollections(ah type)	WITHOUT_CLASSIFICATION	0.9999337103178805	WITHOUT_CLASSIFICATION	6.628968211951001E-5	DESIGN
if not wrappered yet its dirty (this can't occur because we now always call wrap() before getting to here) return ( ! (obj instanceof persistentcollection) ) ? true searchfordirtycollections( (persistentcollection) obj type )	WITHOUT_CLASSIFICATION	0.9998000749183594	WITHOUT_CLASSIFICATION	1.99925081640505E-4	DESIGN
we need to check even if it was not initialized because of delayed adds!	WITHOUT_CLASSIFICATION	0.9993968113090764	WITHOUT_CLASSIFICATION	6.031886909236564E-4	DESIGN
note early exit!	WITHOUT_CLASSIFICATION	0.9999635380297541	WITHOUT_CLASSIFICATION	3.646197024582169E-5	DESIGN
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9948278044747491	WITHOUT_CLASSIFICATION	0.005172195525250995	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9999429332197395	WITHOUT_CLASSIFICATION	5.7066780260468465E-5	DESIGN
check the persistence context for an entry relating to this entity to be merged	WITHOUT_CLASSIFICATION	0.9962439790636926	WITHOUT_CLASSIFICATION	0.003756020936307508	DESIGN
we have specialized case of a detached entity from the perspective of the merge operation. specifically we have an incoming entity instance which has a corresponding entry in the current persistence context but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9996672111780227	WITHOUT_CLASSIFICATION	3.327888219772772E-4	DESIGN
deleted	WITHOUT_CLASSIFICATION	0.9999368401742961	WITHOUT_CLASSIFICATION	6.31598257039184E-5	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9999588407074057	WITHOUT_CLASSIFICATION	4.115929259435083E-5	DESIGN
cascade first so that all unsaved objects get their copy created before we actually copy cascadeonmerge(event persister entity copycache cascades.cascade_before_merge)	WITHOUT_CLASSIFICATION	0.9999793741555718	WITHOUT_CLASSIFICATION	2.0625844428216753E-5	DESIGN
this bit is only really absolutely necessary for handling requestedid but is also good if we merge multiple object graphs since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.8007678752184002	WITHOUT_CLASSIFICATION	0.19923212478159968	DESIGN
continue we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9993710920884099	WITHOUT_CLASSIFICATION	6.289079115900147E-4	DESIGN
cascade first so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999880487712662	WITHOUT_CLASSIFICATION	1.1951228733786297E-5	DESIGN
check that entity id = requestedid	WITHOUT_CLASSIFICATION	0.9998580310624348	WITHOUT_CLASSIFICATION	1.419689375653109E-4	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9999588407074057	WITHOUT_CLASSIFICATION	4.115929259435083E-5	DESIGN
we got here because we assumed that an instance with an assigned id was detached when it was really persistent	WITHOUT_CLASSIFICATION	0.9998444337298072	WITHOUT_CLASSIFICATION	1.5556627019277028E-4	DESIGN
cascade first so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999880487712662	WITHOUT_CLASSIFICATION	1.1951228733786297E-5	DESIGN
copyvalues works by reflection so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.997631890747197	WITHOUT_CLASSIFICATION	0.002368109252803037	DESIGN
early exit	WITHOUT_CLASSIFICATION	0.9999504253123915	WITHOUT_CLASSIFICATION	4.957468760855415E-5	DESIGN
source.getbatcher().executebatch() found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9993765113318597	WITHOUT_CLASSIFICATION	6.234886681402937E-4	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9993608103145794	WITHOUT_CLASSIFICATION	6.391896854206768E-4	DESIGN
now done in entityidentityinsertaction persister.setidentifier( entity id source.getentitymode() )	WITHOUT_CLASSIFICATION	0.9988028660678478	WITHOUT_CLASSIFICATION	0.001197133932152118	DESIGN
source.getpersistencecontext().removenonexist( new entitykey( id persister source.getentitymode() ) )	WITHOUT_CLASSIFICATION	0.9973069825950188	WITHOUT_CLASSIFICATION	0.0026930174049810927	DESIGN
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999957500438168	WITHOUT_CLASSIFICATION	4.2499561832185285E-6	DESIGN
cascade-save to many-to-one before the parent is saved	WITHOUT_CLASSIFICATION	0.9998207452079303	WITHOUT_CLASSIFICATION	1.7925479206983933E-4	DESIGN
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999898109561498	WITHOUT_CLASSIFICATION	1.0189043850083953E-5	DESIGN
the object is persistent	WITHOUT_CLASSIFICATION	0.9999195361264779	WITHOUT_CLASSIFICATION	8.046387352209573E-5	DESIGN
the entity is associated with the session so check its status	WITHOUT_CLASSIFICATION	0.9999385582379702	WITHOUT_CLASSIFICATION	6.144176202990308E-5	DESIGN
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999439589329083	WITHOUT_CLASSIFICATION	5.604106709161121E-5	DESIGN
ie. e.status==deleted	WITHOUT_CLASSIFICATION	0.999866875766015	WITHOUT_CLASSIFICATION	1.3312423398502407E-4	DESIGN
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9998597088293669	WITHOUT_CLASSIFICATION	1.402911706329891E-4	DESIGN
note early exit!	WITHOUT_CLASSIFICATION	0.9999635380297541	WITHOUT_CLASSIFICATION	3.646197024582169E-5	DESIGN
private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9976994269560596	WITHOUT_CLASSIFICATION	0.002300573043940401	DESIGN
first try to find a matching constructor accepting a violatedconstraintnameextracter param	WITHOUT_CLASSIFICATION	0.9987851446578543	WITHOUT_CLASSIFICATION	0.001214855342145732	DESIGN
eat it and try next	WITHOUT_CLASSIFICATION	0.9992136522524425	WITHOUT_CLASSIFICATION	7.863477475575873E-4	DESIGN
otherwise try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9998154530451066	WITHOUT_CLASSIFICATION	1.8454695489334978E-4	DESIGN
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9972946390776082	WITHOUT_CLASSIFICATION	0.0027053609223917406	DESIGN
collectionpropertymapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9993581444636207	WITHOUT_CLASSIFICATION	6.418555363793531E-4	DESIGN
remove initial " "	WITHOUT_CLASSIFICATION	0.9996499010205979	WITHOUT_CLASSIFICATION	3.500989794020931E-4	DESIGN
remove initial " and "	WITHOUT_CLASSIFICATION	0.9993737569518929	WITHOUT_CLASSIFICATION	6.262430481071056E-4	DESIGN
beforeclasstokens.add("new") definitely don't have this!!	WITHOUT_CLASSIFICATION	0.9992306613362734	WITHOUT_CLASSIFICATION	7.693386637265468E-4	DESIGN
notafterclasstokens.add("")	WITHOUT_CLASSIFICATION	0.999866875766015	WITHOUT_CLASSIFICATION	1.3312423398502407E-4	DESIGN
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9990281474033802	WITHOUT_CLASSIFICATION	9.718525966197212E-4	DESIGN
update last non-whitespace token if necessary	WITHOUT_CLASSIFICATION	0.9994681174785631	WITHOUT_CLASSIFICATION	5.318825214369095E-4	DESIGN
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9991557917730107	WITHOUT_CLASSIFICATION	8.442082269892665E-4	DESIGN
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9981034989229483	WITHOUT_CLASSIFICATION	0.0018965010770517683	DESIGN
note this!!	WITHOUT_CLASSIFICATION	0.9999515057001868	WITHOUT_CLASSIFICATION	4.849429981318971E-5	DESIGN
error message constants.	WITHOUT_CLASSIFICATION	0.9993147989494955	WITHOUT_CLASSIFICATION	6.852010505044696E-4	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997264676131002	WITHOUT_CLASSIFICATION	2.7353238689971354E-4	DESIGN
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989563168825949	WITHOUT_CLASSIFICATION	0.0010436831174050363	DESIGN
handle collection-fiter compilation. important note this is modifying the input (hql) tree not the output tree!	WITHOUT_CLASSIFICATION	0.9984405644983693	WITHOUT_CLASSIFICATION	0.0015594355016308313	DESIGN
show the modified ast.	WITHOUT_CLASSIFICATION	0.999997539496484	WITHOUT_CLASSIFICATION	2.4605035160395853E-6	DESIGN
create a parameter specification for the collection filter	WITHOUT_CLASSIFICATION	0.987738156098106	WITHOUT_CLASSIFICATION	0.012261843901894016	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9999712797895092	WITHOUT_CLASSIFICATION	2.8720210490824484E-5	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9999712797895092	WITHOUT_CLASSIFICATION	2.8720210490824484E-5	DESIGN
get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9997290346582309	WITHOUT_CLASSIFICATION	2.709653417690737E-4	DESIGN
the path ast should be a dotnode and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9997187618147548	WITHOUT_CLASSIFICATION	2.8123818524518606E-4	DESIGN
tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.999927494487009	WITHOUT_CLASSIFICATION	7.250551299094788E-5	DESIGN
re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9996539114746292	WITHOUT_CLASSIFICATION	3.460885253707622E-4	DESIGN
don't forget to resolve the argument! resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9989409747076877	WITHOUT_CLASSIFICATION	0.0010590252923123062	DESIGN
resolve everything up to this dot but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9989711981727293	WITHOUT_CLASSIFICATION	0.0010288018272706643	DESIGN
should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9987210433557735	WITHOUT_CLASSIFICATION	0.0012789566442265165	DESIGN
was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9995049103442667	WITHOUT_CLASSIFICATION	4.950896557332824E-4	DESIGN
attach any mapping-defined "order by" fragments	WITHOUT_CLASSIFICATION	0.9995696598221695	WITHOUT_CLASSIFICATION	4.30340177830442E-4	DESIGN
use the explicitly declared select expression determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9996902235210268	WITHOUT_CLASSIFICATION	3.097764789731881E-4	DESIGN
after that process the joins. invoke a delegate to do the work as this is farily complex.	WITHOUT_CLASSIFICATION	0.9977824320502864	WITHOUT_CLASSIFICATION	0.0022175679497136794	DESIGN
make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9995294379059627	WITHOUT_CLASSIFICATION	4.705620940373629E-4	DESIGN
we need to generate ids as part of this bulk insert. note that this is only supported for sequence-style generators and post-insert-style generators basically only in-db generators	WITHOUT_CLASSIFICATION	0.9857795005402474	WITHOUT_CLASSIFICATION	0.014220499459752529	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9999712797895092	WITHOUT_CLASSIFICATION	2.8720210490824484E-5	DESIGN
we need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.999400066243433	WITHOUT_CLASSIFICATION	5.999337565669013E-4	DESIGN
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9966130583009719	WITHOUT_CLASSIFICATION	0.003386941699028205	DESIGN
this is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.996322708155119	WITHOUT_CLASSIFICATION	0.003677291844881067	DESIGN
generate implicit joins only if necessary.	WITHOUT_CLASSIFICATION	0.9997187261473138	WITHOUT_CLASSIFICATION	2.8127385268612073E-4	DESIGN
notify the from element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9959894533540692	WITHOUT_CLASSIFICATION	0.00401054664593072	DESIGN
turn off includesubclasses on all fromelements.	WITHOUT_CLASSIFICATION	0.9995133290055044	WITHOUT_CLASSIFICATION	4.8667099449558915E-4	DESIGN
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9994388061057753	WITHOUT_CLASSIFICATION	5.611938942246182E-4	DESIGN
use the delegate resolve identifiers as from element aliases.	WITHOUT_CLASSIFICATION	0.9998685168731221	WITHOUT_CLASSIFICATION	1.3148312687804336E-4	DESIGN
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9945065292164893	WITHOUT_CLASSIFICATION	0.005493470783510732	DESIGN
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9794278595807079	WITHOUT_CLASSIFICATION	0.020572140419292152	DESIGN
make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9984774064061586	WITHOUT_CLASSIFICATION	0.0015225935938415424	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997264676131002	WITHOUT_CLASSIFICATION	2.7353238689971354E-4	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9999712797895092	WITHOUT_CLASSIFICATION	2.8720210490824484E-5	DESIGN
--commented out by inspection (12/11/04 1056 am) int getwarningcount()	WITHOUT_CLASSIFICATION	0.9986603719790688	WITHOUT_CLASSIFICATION	0.0013396280209312776	DESIGN
alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9997853425962744	WITHOUT_CLASSIFICATION	2.1465740372564356E-4	DESIGN
switch	WITHOUT_CLASSIFICATION	0.9999379757063012	WITHOUT_CLASSIFICATION	6.202429369883844E-5	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9996912793485269	WITHOUT_CLASSIFICATION	3.087206514731167E-4	DESIGN
just do the regular thing if you can't find the ctor your ast must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.998984317396352	WITHOUT_CLASSIFICATION	0.0010156826036480612	DESIGN
initialize sql nodes here.	WITHOUT_CLASSIFICATION	0.9995987351324872	WITHOUT_CLASSIFICATION	4.012648675127966E-4	DESIGN
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998237715776119	WITHOUT_CLASSIFICATION	1.7622842238800338E-4	DESIGN
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9997180018515631	WITHOUT_CLASSIFICATION	2.819981484368565E-4	DESIGN
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9998657580879942	WITHOUT_CLASSIFICATION	1.3424191200582658E-4	DESIGN
--- inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9985271457220273	WITHOUT_CLASSIFICATION	0.0014728542779727995	DESIGN
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999640720397771	WITHOUT_CLASSIFICATION	3.5927960222892325E-5	DESIGN
/	WITHOUT_CLASSIFICATION	0.9999537285718064	WITHOUT_CLASSIFICATION	4.6271428193561E-5	DESIGN
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9994499055521149	WITHOUT_CLASSIFICATION	5.500944478851514E-4	DESIGN
again both should be fromelements	WITHOUT_CLASSIFICATION	0.995610704909949	WITHOUT_CLASSIFICATION	0.004389295090051066	DESIGN
note firstrow is zero-based	WITHOUT_CLASSIFICATION	0.9998195715124427	WITHOUT_CLASSIFICATION	1.804284875573738E-4	DESIGN
right represents a joins originating from left or both right and left reprersent joins originating from the same fromelement	WITHOUT_CLASSIFICATION	0.9989938337611037	WITHOUT_CLASSIFICATION	0.001006166238896371	DESIGN
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9995157812293274	WITHOUT_CLASSIFICATION	4.8421877067261705E-4	DESIGN
right represents a joins originating from left	WITHOUT_CLASSIFICATION	0.9978141705885777	WITHOUT_CLASSIFICATION	0.0021858294114222698	DESIGN
all clear	WITHOUT_CLASSIFICATION	0.999980490812467	WITHOUT_CLASSIFICATION	1.9509187532994178E-5	DESIGN
ignore the token class name parameter and use a specific token class.	WITHOUT_CLASSIFICATION	0.9952414076559057	WITHOUT_CLASSIFICATION	0.004758592344094238	DESIGN
overriden to avoid system.exit	WITHOUT_CLASSIFICATION	0.9997689608563775	WITHOUT_CLASSIFICATION	2.310391436226251E-4	DESIGN
overriden to avoid system.exit	WITHOUT_CLASSIFICATION	0.9997689608563775	WITHOUT_CLASSIFICATION	2.310391436226251E-4	DESIGN
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.997341966252476	WITHOUT_CLASSIFICATION	0.0026580337475240654	DESIGN
don't care about other param types here just those explicitly user-defined	WITHOUT_CLASSIFICATION	0.9764180968664108	WITHOUT_CLASSIFICATION	0.02358190313358922	DESIGN
if the query is already compiled skip the compilation.	WITHOUT_CLASSIFICATION	0.9998956635746875	WITHOUT_CLASSIFICATION	1.0433642531249582E-4	DESIGN
remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9998427663294152	WITHOUT_CLASSIFICATION	1.5723367058484279E-4	DESIGN
phase 1 parse the hql into an ast.	WITHOUT_CLASSIFICATION	0.9990247460231348	WITHOUT_CLASSIFICATION	9.752539768651028E-4	DESIGN
phase 2 analyze the hql ast and produce an sql ast.	WITHOUT_CLASSIFICATION	0.9999935504569686	WITHOUT_CLASSIFICATION	6.4495430314187085E-6	DESIGN
phase 3 generate the sql.	WITHOUT_CLASSIFICATION	0.9999537585253617	WITHOUT_CLASSIFICATION	4.62414746382425E-5	DESIGN
we do not actually propogate antlrexceptions as a cause so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9990366722573455	WITHOUT_CLASSIFICATION	9.633277426546025E-4	DESIGN
we do not actually propogate antlrexceptions as a cause so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9990366722573455	WITHOUT_CLASSIFICATION	9.633277426546025E-4	DESIGN
only needed during compilation phase	WITHOUT_CLASSIFICATION	0.9998102415774344	WITHOUT_CLASSIFICATION	1.897584225655405E-4	DESIGN
transform the tree.	WITHOUT_CLASSIFICATION	0.9999755507443198	WITHOUT_CLASSIFICATION	2.4449255680207996E-5	DESIGN
parse the query string into an hql ast.	WITHOUT_CLASSIFICATION	0.9988685318729515	WITHOUT_CLASSIFICATION	0.0011314681270483812	DESIGN
delegate to the queryloader	WITHOUT_CLASSIFICATION	0.9999142817697212	WITHOUT_CLASSIFICATION	8.571823027885358E-5	DESIGN
delegate to the queryloader	WITHOUT_CLASSIFICATION	0.9999142817697212	WITHOUT_CLASSIFICATION	8.571823027885358E-5	DESIGN
delegate to the queryloader	WITHOUT_CLASSIFICATION	0.9999142817697212	WITHOUT_CLASSIFICATION	8.571823027885358E-5	DESIGN
note ( max - 1 ) because first is zero-based while max is not	WITHOUT_CLASSIFICATION	0.9996768913139873	WITHOUT_CLASSIFICATION	3.2310868601278056E-4	DESIGN
-- package local methods for the queryloader delegate --	WITHOUT_CLASSIFICATION	0.9949634002312135	WITHOUT_CLASSIFICATION	0.005036599768786509	DESIGN
if there are no collection fetches then no further checks are needed	WITHOUT_CLASSIFICATION	0.998981625933363	WITHOUT_CLASSIFICATION	0.0010183740666369697	DESIGN
a shallow query is ok (although technically there should be no fetching here)	WITHOUT_CLASSIFICATION	0.9972846162200701	WITHOUT_CLASSIFICATION	0.002715383779929839	DESIGN
should be the first but just to be safe	WITHOUT_CLASSIFICATION	0.999405766215759	WITHOUT_CLASSIFICATION	5.942337842408476E-4	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9999712797895092	WITHOUT_CLASSIFICATION	2.8720210490824484E-5	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9999712797895092	WITHOUT_CLASSIFICATION	2.8720210490824484E-5	DESIGN
impl note allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9891541364339496	WITHOUT_CLASSIFICATION	0.010845863566050464	DESIGN
otherwise we have a non-scalar select with defined collection fetch(es). make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9985673814958758	WITHOUT_CLASSIFICATION	0.0014326185041241616	DESIGN
this is not strictly true. we actually just need to make sure that it is ordered by root-entity pk and that that order-by comes before any non-root-entity ordering	WITHOUT_CLASSIFICATION	0.6234068876284681	WITHOUT_CLASSIFICATION	0.376593112371532	DESIGN
paramtranslations = new parametertranslationsimpl( collectedparameterspecifications )	WITHOUT_CLASSIFICATION	0.9998726479386915	WITHOUT_CLASSIFICATION	1.2735206130857091E-4	DESIGN
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9976651235824487	WITHOUT_CLASSIFICATION	0.002334876417551281	DESIGN
igndore it	WITHOUT_CLASSIFICATION	0.9999149399412919	WITHOUT_CLASSIFICATION	8.506005870815177E-5	DESIGN
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9997470997701777	WITHOUT_CLASSIFICATION	2.5290022982227945E-4	DESIGN
[jsd] the fix for hhh-558	WITHOUT_CLASSIFICATION	0.9991698103590174	WITHOUT_CLASSIFICATION	8.301896409824424E-4	DESIGN
if the token can tell us if it could be an identifier	WITHOUT_CLASSIFICATION	0.9998045779259084	WITHOUT_CLASSIFICATION	1.9542207409165387E-4	DESIGN
and the expected token type was an identifier then	WITHOUT_CLASSIFICATION	0.9995422607196057	WITHOUT_CLASSIFICATION	4.5773928039432297E-4	DESIGN
use the token as an identifier.	WITHOUT_CLASSIFICATION	0.999940462446167	WITHOUT_CLASSIFICATION	5.953755383294232E-5	DESIGN
add the token to the ast.	WITHOUT_CLASSIFICATION	0.9999819839787871	WITHOUT_CLASSIFICATION	1.8016021212875425E-5	DESIGN
(not (eq a b) ) => (ne a b)	WITHOUT_CLASSIFICATION	0.9992364651113701	WITHOUT_CLASSIFICATION	7.635348886299389E-4	DESIGN
(not (ne a b) ) => (eq a b)	WITHOUT_CLASSIFICATION	0.9992364651113701	WITHOUT_CLASSIFICATION	7.635348886299389E-4	DESIGN
(not (lt a b) ) => (ge a b)	WITHOUT_CLASSIFICATION	0.9992364651113701	WITHOUT_CLASSIFICATION	7.635348886299389E-4	DESIGN
(not (ge a b) ) => (lt a b)	WITHOUT_CLASSIFICATION	0.9992364651113701	WITHOUT_CLASSIFICATION	7.635348886299389E-4	DESIGN
(not (le a b) ) => (gt a b)	WITHOUT_CLASSIFICATION	0.9992364651113701	WITHOUT_CLASSIFICATION	7.635348886299389E-4	DESIGN
(not (like a b) ) => (not_like a b)	WITHOUT_CLASSIFICATION	0.9967998810572113	WITHOUT_CLASSIFICATION	0.0032001189427886254	DESIGN
(not (not_like a b) ) => (like a b)	WITHOUT_CLASSIFICATION	0.9967998810572113	WITHOUT_CLASSIFICATION	0.0032001189427886254	DESIGN
(not (is_not_null a b) ) => (is_null a b)	WITHOUT_CLASSIFICATION	0.9966296559589841	WITHOUT_CLASSIFICATION	0.003370344041015941	DESIGN
(not (between a b) ) => (not_between a b)	WITHOUT_CLASSIFICATION	0.9966296559589841	WITHOUT_CLASSIFICATION	0.003370344041015941	DESIGN
initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9978018233594583	WITHOUT_CLASSIFICATION	0.002198176640541716	DESIGN
overriden to avoid system.exit	WITHOUT_CLASSIFICATION	0.9997689608563775	WITHOUT_CLASSIFICATION	2.310391436226251E-4	DESIGN
if if otherwise handle the error normally.	WITHOUT_CLASSIFICATION	0.9990703060735558	WITHOUT_CLASSIFICATION	9.296939264441722E-4	DESIGN
(not (not_between a b) ) => (between a b)	WITHOUT_CLASSIFICATION	0.9966296559589841	WITHOUT_CLASSIFICATION	0.003370344041015941	DESIGN
this can never happen because this rule will always eliminate the child not.case notreturn x.getfirstchild() (not (not x) ) => (x)	WITHOUT_CLASSIFICATION	0.9998867866592439	WITHOUT_CLASSIFICATION	1.132133407560933E-4	DESIGN
just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999463038238396	WITHOUT_CLASSIFICATION	5.369617616029737E-5	DESIGN
(eq null b) => (is_null b)	WITHOUT_CLASSIFICATION	0.9998771477315802	WITHOUT_CLASSIFICATION	1.2285226841978839E-4	DESIGN
(eq a null) => (is_null a)	WITHOUT_CLASSIFICATION	0.9998836828901292	WITHOUT_CLASSIFICATION	1.1631710987069076E-4	DESIGN
note because we're using astutil.createparent() the tree must be created from the bottom up. is empty x => (exists (query (select_from (from x) ) ) )	WITHOUT_CLASSIFICATION	0.9984471131375069	WITHOUT_CLASSIFICATION	0.0015528868624931022	DESIGN
add not if it's negated.	WITHOUT_CLASSIFICATION	0.9999481403271306	WITHOUT_CLASSIFICATION	5.185967286934017E-5	DESIGN
create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9997987488856219	WITHOUT_CLASSIFICATION	2.0125111437811055E-4	DESIGN
case 1 multi token keywords group by and order by the next token ( lt(2) ) should be 'by' otherwise this is just an ident.	WITHOUT_CLASSIFICATION	0.9892605457364574	WITHOUT_CLASSIFICATION	0.010739454263542544	DESIGN
case 2 the current token is after from and before '.'.	WITHOUT_CLASSIFICATION	0.9999249291021747	WITHOUT_CLASSIFICATION	7.507089782531407E-5	DESIGN
this handles hhh-354 where there is a strange property name in a where clause. if the lookahead contains a dot then something that isn't an ident	WITHOUT_CLASSIFICATION	0.9999366207750244	WITHOUT_CLASSIFICATION	6.337922497556474E-5	DESIGN
see if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9998635243366404	WITHOUT_CLASSIFICATION	1.364756633597241E-4	DESIGN
set it!	WITHOUT_CLASSIFICATION	0.9998728038439378	WITHOUT_CLASSIFICATION	1.271961560621226E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999297444246349	WITHOUT_CLASSIFICATION	7.025557536506883E-5	DESIGN
strip the " where "	WITHOUT_CLASSIFICATION	0.9999859372822628	WITHOUT_CLASSIFICATION	1.406271773723704E-5	DESIGN
don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9985728366566744	WITHOUT_CLASSIFICATION	0.0014271633433256172	DESIGN
at the very least cleanup the data )	WITHOUT_CLASSIFICATION	0.9980744656389776	WITHOUT_CLASSIFICATION	0.001925534361022301	DESIGN
first save off the pertinent ids as the return value	WITHOUT_CLASSIFICATION	0.9999910505669525	WITHOUT_CLASSIFICATION	8.949433047530096E-6	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9996843379785085	WITHOUT_CLASSIFICATION	3.1566202149147676E-4	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9996843379785085	WITHOUT_CLASSIFICATION	3.1566202149147676E-4	DESIGN
start performing the updates	WITHOUT_CLASSIFICATION	0.9999698514144272	WITHOUT_CLASSIFICATION	3.0148585572841125E-5	DESIGN
first save off the pertinent ids saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999759994985364	WITHOUT_CLASSIFICATION	2.4000501463495864E-5	DESIGN
start performing the deletes	WITHOUT_CLASSIFICATION	0.9999667623901912	WITHOUT_CLASSIFICATION	3.32376098087781E-5	DESIGN
otherwise everything ok.	WITHOUT_CLASSIFICATION	0.9998602047498052	WITHOUT_CLASSIFICATION	1.3979525019481412E-4	DESIGN
visit width-first then depth	WITHOUT_CLASSIFICATION	0.9999306416986116	WITHOUT_CLASSIFICATION	6.935830138844019E-5	DESIGN
if the types report logical equivalence return true	WITHOUT_CLASSIFICATION	0.9996979648717795	WITHOUT_CLASSIFICATION	3.0203512822042666E-4	DESIGN
otherwise perform a "deep equivalence" check	WITHOUT_CLASSIFICATION	0.996788730406227	WITHOUT_CLASSIFICATION	0.003211269593772963	DESIGN
if there is no where node make one.	WITHOUT_CLASSIFICATION	0.9998240488902698	WITHOUT_CLASSIFICATION	1.7595110973022253E-4	DESIGN
inject the where after the parent	WITHOUT_CLASSIFICATION	0.9999429218088862	WITHOUT_CLASSIFICATION	5.707819111385792E-5	DESIGN
never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9994842163837528	WITHOUT_CLASSIFICATION	5.157836162470949E-4	DESIGN
moved here from selectclause [jsd]	WITHOUT_CLASSIFICATION	0.9520131987851832	WITHOUT_CLASSIFICATION	0.04798680121481683	DESIGN
/	WITHOUT_CLASSIFICATION	0.9999537285718064	WITHOUT_CLASSIFICATION	4.6271428193561E-5	DESIGN
use the table fromelement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9998379440045404	WITHOUT_CLASSIFICATION	1.6205599545952135E-4	DESIGN
set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9998846207563624	WITHOUT_CLASSIFICATION	1.153792436376571E-4	DESIGN
if the uresolved property path isn't set yet just use the property name.	WITHOUT_CLASSIFICATION	0.9999697095062454	WITHOUT_CLASSIFICATION	3.0290493754511157E-5	DESIGN
the 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9998049752615424	WITHOUT_CLASSIFICATION	1.9502473845753256E-4	DESIGN
prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999884885841903	WITHOUT_CLASSIFICATION	1.1511415809689368E-5	DESIGN
prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999884885841903	WITHOUT_CLASSIFICATION	1.1511415809689368E-5	DESIGN
if this dot has already been resolved stop now.	WITHOUT_CLASSIFICATION	0.994375435130996	WITHOUT_CLASSIFICATION	0.0056245648690039845	DESIGN
if there is no data type for this node and we're at the end of the path (top most dot node) then this might be a java constant.	WITHOUT_CLASSIFICATION	0.8450925409866025	WITHOUT_CLASSIFICATION	0.15490745901339747	DESIGN
the property is a collection	WITHOUT_CLASSIFICATION	0.9998291080899284	WITHOUT_CLASSIFICATION	1.708919100716508E-4	DESIGN
the property is a component	WITHOUT_CLASSIFICATION	0.9999484118668739	WITHOUT_CLASSIFICATION	5.158813312605414E-5	DESIGN
the property is another class..	WITHOUT_CLASSIFICATION	0.9999377760872553	WITHOUT_CLASSIFICATION	6.22239127446282E-5	DESIGN
otherwise this is a primitive type.	WITHOUT_CLASSIFICATION	0.998482309225644	WITHOUT_CLASSIFICATION	0.00151769077435608	DESIGN
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9996600600014968	WITHOUT_CLASSIFICATION	3.3993999850313856E-4	DESIGN
this 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9992986050695477	WITHOUT_CLASSIFICATION	7.013949304524219E-4	DESIGN
always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999060258505829	WITHOUT_CLASSIFICATION	9.397414941720462E-5	DESIGN
in non-select queries the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9556689074300224	WITHOUT_CLASSIFICATION	0.04433109256997765	DESIGN
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9997366634263268	WITHOUT_CLASSIFICATION	2.633365736732212E-4	DESIGN
this 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9992986050695477	WITHOUT_CLASSIFICATION	7.013949304524219E-4	DESIGN
even though we might find a pre-existing element by join path we may not be able to reuse it	WITHOUT_CLASSIFICATION	0.9950715168061802	WITHOUT_CLASSIFICATION	0.004928483193819764	DESIGN
note addduplicatealias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9998681023689481	WITHOUT_CLASSIFICATION	1.318976310518599E-4	DESIGN
if the from-clauses are the same we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9435538267475881	WITHOUT_CLASSIFICATION	0.05644617325241188	DESIGN
again null != null here	WITHOUT_CLASSIFICATION	0.9997701485163207	WITHOUT_CLASSIFICATION	2.298514836793298E-4	DESIGN
if this is an implied join in a from element then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9983613220940165	WITHOUT_CLASSIFICATION	0.0016386779059834797	DESIGN
otherwise (subquery case) dont reuse the fromelement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9998632729515379	WITHOUT_CLASSIFICATION	1.3672704846220008E-4	DESIGN
we know only the lhs-hand type so use that	WITHOUT_CLASSIFICATION	0.9998458726115074	WITHOUT_CLASSIFICATION	1.541273884925336E-4	DESIGN
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.999978247262485	WITHOUT_CLASSIFICATION	2.1752737515135444E-5	DESIGN
only the identifier property field name can be a reference to the associated entity's pk	WITHOUT_CLASSIFICATION	0.9989988486225823	WITHOUT_CLASSIFICATION	0.0010011513774177935	DESIGN
special shortcut for id properties skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9985967886083149	WITHOUT_CLASSIFICATION	0.001403211391685143	DESIGN
append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999269929937319	WITHOUT_CLASSIFICATION	7.300700626813196E-5	DESIGN
if the lhs is a collection use collectionpropertymapping	WITHOUT_CLASSIFICATION	0.9986015444964114	WITHOUT_CLASSIFICATION	0.0013984555035885836	DESIGN
tell the destination fromelement to 'includesubclasses'.	WITHOUT_CLASSIFICATION	0.9998221767051787	WITHOUT_CLASSIFICATION	1.7782329482129208E-4	DESIGN
use theta style (for regression) move the node up after the origin node.	WITHOUT_CLASSIFICATION	0.9992247609292704	WITHOUT_CLASSIFICATION	7.752390707296919E-4	DESIGN
don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999770433406019	WITHOUT_CLASSIFICATION	2.2956659398122952E-5	DESIGN
for expected parameter type injection we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9792789611236439	WITHOUT_CLASSIFICATION	0.02072103887635612	DESIGN
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.999915582323694	WITHOUT_CLASSIFICATION	8.441767630590852E-5	DESIGN
we have something like "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9998261263722993	WITHOUT_CLASSIFICATION	1.738736277007451E-4	DESIGN
we have something like "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9998261263722993	WITHOUT_CLASSIFICATION	1.738736277007451E-4	DESIGN
we know only the rhs-hand type so use that	WITHOUT_CLASSIFICATION	0.9998458726115074	WITHOUT_CLASSIFICATION	1.541273884925336E-4	DESIGN
handle the (assumed) valid cases #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9960397156171282	WITHOUT_CLASSIFICATION	0.003960284382871874	DESIGN
one or the other needs to be a datetime for us to get into this method in the first place	WITHOUT_CLASSIFICATION	0.951555626112745	WITHOUT_CLASSIFICATION	0.048444373887255004	DESIGN
#3 - note that this is also true of "datetime - param"	WITHOUT_CLASSIFICATION	0.9861180198295623	WITHOUT_CLASSIFICATION	0.0138819801704377	DESIGN
#2	WITHOUT_CLASSIFICATION	0.9999212823598821	WITHOUT_CLASSIFICATION	7.871764011795868E-5	DESIGN
generate the inner join -- the elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9971345383096755	WITHOUT_CLASSIFICATION	0.0028654616903245433	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999882884426534	WITHOUT_CLASSIFICATION	1.1711557346555193E-5	DESIGN
the 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999718182477864	WITHOUT_CLASSIFICATION	2.81817522135719E-5	DESIGN
add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999575602630036	WITHOUT_CLASSIFICATION	4.243973699630751E-5	DESIGN
sometimes use the element table alias sometimes use the umm collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.998942375525801	WITHOUT_CLASSIFICATION	0.001057624474198966	DESIGN
now set the text for this node. it should be the element columns.	WITHOUT_CLASSIFICATION	0.9992211149464784	WITHOUT_CLASSIFICATION	7.788850535217457E-4	DESIGN
get the function return value type based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999302165602577	WITHOUT_CLASSIFICATION	6.9783439742236E-5	DESIGN
this will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9982128169123841	WITHOUT_CLASSIFICATION	0.0017871830876159981	DESIGN
mutation depends on the types of nodes invloved	WITHOUT_CLASSIFICATION	0.9999100268092922	WITHOUT_CLASSIFICATION	8.997319070782468E-5	DESIGN
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding	WITHOUT_CLASSIFICATION	0.9974470124489021	WITHOUT_CLASSIFICATION	0.0025529875510978185	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9995366436732159	WITHOUT_CLASSIFICATION	4.633563267840344E-4	DESIGN
generated select expressions are already resolved nothing to do.	WITHOUT_CLASSIFICATION	0.9986162768518936	WITHOUT_CLASSIFICATION	0.0013837231481064682	DESIGN
the path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9989323899148498	WITHOUT_CLASSIFICATION	0.0010676100851501938	DESIGN
the hql class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9997032395169938	WITHOUT_CLASSIFICATION	2.967604830061648E-4	DESIGN
associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999168552545746	WITHOUT_CLASSIFICATION	8.314474542539674E-5	DESIGN
try the parent fromclause	WITHOUT_CLASSIFICATION	0.9999679953927932	WITHOUT_CLASSIFICATION	3.200460720680676E-5	DESIGN
add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999317584598449	WITHOUT_CLASSIFICATION	6.824154015510573E-5	DESIGN
make sure that all from elements registered with this from clause are actually in the ast.	WITHOUT_CLASSIFICATION	0.9942621719489707	WITHOUT_CLASSIFICATION	0.005737828051029299	DESIGN
invoke setscalarcolumntext on each constructor argument.	WITHOUT_CLASSIFICATION	0.9998954293968119	WITHOUT_CLASSIFICATION	1.0457060318821029E-4	DESIGN
collect the select expressions skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999970866192852	WITHOUT_CLASSIFICATION	2.9133807148610285E-6	DESIGN
return an empty type array	WITHOUT_CLASSIFICATION	0.9998743150232462	WITHOUT_CLASSIFICATION	1.256849767538186E-4	DESIGN
constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.993901187368982	WITHOUT_CLASSIFICATION	0.006098812631018041	DESIGN
this is the exception returned by reflecthelper.getconstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9982283438154451	WITHOUT_CLASSIFICATION	0.0017716561845549342	DESIGN
if there is no order by make one	WITHOUT_CLASSIFICATION	0.9972410728991947	WITHOUT_CLASSIFICATION	0.0027589271008053497	DESIGN
find the where if there is no where find the from	WITHOUT_CLASSIFICATION	0.9996010985384315	WITHOUT_CLASSIFICATION	3.989014615684863E-4	DESIGN
now inject the newly built order by into the tree	WITHOUT_CLASSIFICATION	0.999383723632885	WITHOUT_CLASSIFICATION	6.162763671150629E-4	DESIGN
parametercontainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996248827209578	WITHOUT_CLASSIFICATION	3.75117279042202E-4	DESIGN
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9995366436732159	WITHOUT_CLASSIFICATION	4.633563267840344E-4	DESIGN
render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9998828851521445	WITHOUT_CLASSIFICATION	1.1711484785542076E-4	DESIGN
class names in the from clause result in a joinsequence (the old fromparser does this).	WITHOUT_CLASSIFICATION	0.9991991501524644	WITHOUT_CLASSIFICATION	8.008498475356711E-4	DESIGN
for many-to-many joins use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9985832726291415	WITHOUT_CLASSIFICATION	0.0014167273708585205	DESIGN
otherwise use the property mapping.	WITHOUT_CLASSIFICATION	0.999930491005019	WITHOUT_CLASSIFICATION	6.950899498102533E-5	DESIGN
should be safe to only ever expect entitypersister references here	WITHOUT_CLASSIFICATION	0.999464811554181	WITHOUT_CLASSIFICATION	5.351884458190838E-4	DESIGN
if the property is a special collection property name return a collectionpropertymapping.	WITHOUT_CLASSIFICATION	0.9997332442241162	WITHOUT_CLASSIFICATION	2.667557758836621E-4	DESIGN
collection of components.	WITHOUT_CLASSIFICATION	0.999663354130731	WITHOUT_CLASSIFICATION	3.3664586926902915E-4	DESIGN
make sure the lhs is "assignable"	WITHOUT_CLASSIFICATION	0.9995519626002243	WITHOUT_CLASSIFICATION	4.480373997756651E-4	DESIGN
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9996931018042309	WITHOUT_CLASSIFICATION	3.068981957691789E-4	DESIGN
register the fromelement with the from clause now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9998569214439874	WITHOUT_CLASSIFICATION	1.4307855601257326E-4	DESIGN
currently allowed	WITHOUT_CLASSIFICATION	0.9998957210310009	WITHOUT_CLASSIFICATION	1.0427896899914455E-4	DESIGN
hhh-276 implied joins in a subselect where clause - the destination needs to be added to the destination's from clause. not sure if this is will fix everything but it works.	WITHOUT_CLASSIFICATION	0.9181532407807511	WITHOUT_CLASSIFICATION	0.08184675921924887	DESIGN
return classalias == null ? classname classalias	WITHOUT_CLASSIFICATION	0.997535923712106	WITHOUT_CLASSIFICATION	0.002464076287894039	DESIGN
this is an explicit from element.	WITHOUT_CLASSIFICATION	0.980657214099668	WITHOUT_CLASSIFICATION	0.019342785900331935	DESIGN
parametercontainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996248827209578	WITHOUT_CLASSIFICATION	3.75117279042202E-4	DESIGN
fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9978602586843893	WITHOUT_CLASSIFICATION	0.002139741315610574	DESIGN
if it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999643065791123	WITHOUT_CLASSIFICATION	3.5693420887673264E-5	DESIGN
since this is an explicit from element it can't be implied in the from clause.	WITHOUT_CLASSIFICATION	0.9949483078319138	WITHOUT_CLASSIFICATION	0.005051692168086193	DESIGN
do nothing eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999096474084967	WITHOUT_CLASSIFICATION	9.035259150335368E-5	DESIGN
propertyname refers to something like collection.size	WITHOUT_CLASSIFICATION	0.9995366172555773	WITHOUT_CLASSIFICATION	4.633827444227849E-4	DESIGN
property name is a sub-path of a component	WITHOUT_CLASSIFICATION	0.9988518896842921	WITHOUT_CLASSIFICATION	0.001148110315707911	DESIGN
always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999060258505829	WITHOUT_CLASSIFICATION	9.397414941720462E-5	DESIGN
nothing to do even if the operand is a parameter no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9180307331713035	WITHOUT_CLASSIFICATION	0.08196926682869647	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9995366436732159	WITHOUT_CLASSIFICATION	4.633563267840344E-4	DESIGN
dotnode uses null here	WITHOUT_CLASSIFICATION	0.9982154465604546	WITHOUT_CLASSIFICATION	0.001784553439545534	DESIGN
we represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9949546137297041	WITHOUT_CLASSIFICATION	0.005045386270295881	DESIGN
we are the lhs of the dot representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9994613977997451	WITHOUT_CLASSIFICATION	5.386022002549002E-4	DESIGN
we are the rhs of the dot representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9993429510984145	WITHOUT_CLASSIFICATION	6.570489015854819E-4	DESIGN
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9960126949560054	WITHOUT_CLASSIFICATION	0.003987305043994573	DESIGN
early exit!!! return so the resolve call explicitly coming from dotnode can resolve this	WITHOUT_CLASSIFICATION	0.9991652113289561	WITHOUT_CLASSIFICATION	8.347886710440577E-4	DESIGN
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9994961428530184	WITHOUT_CLASSIFICATION	5.038571469816647E-4	DESIGN
just ignore it for now it'll get resolved later	WITHOUT_CLASSIFICATION	0.9996719617312556	WITHOUT_CLASSIFICATION	3.280382687443795E-4	DESIGN
this is not actually a constant but a reference to from element.	WITHOUT_CLASSIFICATION	0.8842989120388093	WITHOUT_CLASSIFICATION	0.11570108796119084	DESIGN
check to see if our "proppath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9996957792763984	WITHOUT_CLASSIFICATION	3.042207236016591E-4	DESIGN
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9978178836420047	WITHOUT_CLASSIFICATION	0.002182116357995232	DESIGN
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9990268667217646	WITHOUT_CLASSIFICATION	9.731332782355175E-4	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9993539851995819	WITHOUT_CLASSIFICATION	6.460148004182122E-4	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9993539851995819	WITHOUT_CLASSIFICATION	6.460148004182122E-4	DESIGN
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.998546262510967	WITHOUT_CLASSIFICATION	0.0014537374890329438	DESIGN
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9804962592865714	WITHOUT_CLASSIFICATION	0.019503740713428596	DESIGN
do not over-write the column text as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999411766162699	WITHOUT_CLASSIFICATION	5.882338373012272E-5	DESIGN
for some reason the antlr.commonast initialization routines force this method to get called twice. the first time with an empty string	WITHOUT_CLASSIFICATION	0.9999330648445999	WITHOUT_CLASSIFICATION	6.693515540009005E-5	DESIGN
look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999477896720048	WITHOUT_CLASSIFICATION	5.2210327995115534E-5	DESIGN
add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999815952028159	WITHOUT_CLASSIFICATION	1.8404797184087675E-5	DESIGN
if the from element isn't in the same clause create a new from element.	WITHOUT_CLASSIFICATION	0.9977932996536379	WITHOUT_CLASSIFICATION	0.0022067003463620647	DESIGN
this is the root level node. generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9869290890540227	WITHOUT_CLASSIFICATION	0.013070910945977232	DESIGN
correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ansi-style join	WITHOUT_CLASSIFICATION	0.9995522374825418	WITHOUT_CLASSIFICATION	4.4776251745815465E-4	DESIGN
super-duper-classic-parser-regression-testing-mojo-magic	WITHOUT_CLASSIFICATION	0.999411103560662	WITHOUT_CLASSIFICATION	5.888964393379308E-4	DESIGN
a collection of entities	WITHOUT_CLASSIFICATION	0.99940908265273	WITHOUT_CLASSIFICATION	5.909173472699683E-4	DESIGN
a collection of components	WITHOUT_CLASSIFICATION	0.9995087304136056	WITHOUT_CLASSIFICATION	4.912695863944033E-4	DESIGN
a collection of scalar elements	WITHOUT_CLASSIFICATION	0.9992669269800554	WITHOUT_CLASSIFICATION	7.330730199446802E-4	DESIGN
according to both the ansi-sql and ejb3 specs trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the sql spec <trim function> = trim <left paren> <trim operands> <right paren> <trim operands> = [ [ <trim specification> ] [ <trim character> ] from ] <trim source> <trim specification> = leading | trailing | both if only <trim specification> is omitted both is assumed if <trim character> is omitted space is assumed	WITHOUT_CLASSIFICATION	0.9999647930617068	WITHOUT_CLASSIFICATION	3.520693829323285E-5	DESIGN
don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9978898548224817	WITHOUT_CLASSIFICATION	0.00211014517751828	DESIGN
treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9993521398942226	WITHOUT_CLASSIFICATION	6.47860105777514E-4	DESIGN
( implied && dotnode.usethetastyleimplicitjoins ) ) {	WITHOUT_CLASSIFICATION	0.9993411166361796	WITHOUT_CLASSIFICATION	6.5888336382037E-4	DESIGN
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9479127216872545	WITHOUT_CLASSIFICATION	0.0520872783127455	DESIGN
create the from element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999426877286616	WITHOUT_CLASSIFICATION	5.731227133857759E-5	DESIGN
if the join is implied then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9997227474836644	WITHOUT_CLASSIFICATION	2.7725251633553213E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999085225730044	WITHOUT_CLASSIFICATION	9.147742699559447E-4	DESIGN
the associated entity is implied but it must be included in the from. the collection alias is the role.	WITHOUT_CLASSIFICATION	0.9785866271315612	WITHOUT_CLASSIFICATION	0.021413372868438706	DESIGN
tag this node as a join. don't include subclasses in the join. this is a clollection join.	WITHOUT_CLASSIFICATION	0.9997024837540218	WITHOUT_CLASSIFICATION	2.9751624597821046E-4	DESIGN
get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999143365560665	WITHOUT_CLASSIFICATION	8.566344393340608E-5	DESIGN
origin path implied columns classalias	WITHOUT_CLASSIFICATION	0.9997384998420505	WITHOUT_CLASSIFICATION	2.6150015794948516E-4	DESIGN
implied	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
for implied many-to-many just add the end join.	WITHOUT_CLASSIFICATION	0.9996869825645619	WITHOUT_CLASSIFICATION	3.1301743543804236E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999085225730044	WITHOUT_CLASSIFICATION	9.147742699559447E-4	DESIGN
overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999085225730044	WITHOUT_CLASSIFICATION	9.147742699559447E-4	DESIGN
the standard sql function name is current_timestamp	WITHOUT_CLASSIFICATION	0.9990869050284832	WITHOUT_CLASSIFICATION	9.130949715167844E-4	DESIGN
this causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.993824337618677	WITHOUT_CLASSIFICATION	0.006175662381323102	DESIGN
private type[] sqlresulttypes	WITHOUT_CLASSIFICATION	0.9999236272702713	WITHOUT_CLASSIFICATION	7.637272972869672E-5	DESIGN
frontbase has no known variation of a "select for update" syntax	WITHOUT_CLASSIFICATION	0.9990207442767477	WITHOUT_CLASSIFICATION	9.792557232523045E-4	DESIGN
the types represented in the sql result set. @return the types represented in the sql result set.	WITHOUT_CLASSIFICATION	0.9996965861569642	WITHOUT_CLASSIFICATION	3.03413843035838E-4	DESIGN
public type[] getsqlresulttypes() {return sqlresulttypes}	WITHOUT_CLASSIFICATION	0.9990186476280952	WITHOUT_CLASSIFICATION	9.813523719047436E-4	DESIGN
first collect all of the select expressions. note this must be done before invoking setscalarcolumntext() because setscalarcolumntext() changes the ast!!!	WITHOUT_CLASSIFICATION	0.9995028293434044	WITHOUT_CLASSIFICATION	4.971706565956725E-4	DESIGN
first allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.996816898518018	WITHOUT_CLASSIFICATION	0.0031831014819820136	DESIGN
sqlresulttypelist.addall( constructorargumenttypelist )	WITHOUT_CLASSIFICATION	0.9991653560730299	WITHOUT_CLASSIFICATION	8.346439269700429E-4	DESIGN
if the data type is not an association type it could not have been in the from clause.	WITHOUT_CLASSIFICATION	0.9989450434523829	WITHOUT_CLASSIFICATION	0.0010549565476170612	DESIGN
sqlresulttypelist.add( type )	WITHOUT_CLASSIFICATION	0.9996237596737014	WITHOUT_CLASSIFICATION	3.762403262985188E-4	DESIGN
always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9997266289904236	WITHOUT_CLASSIFICATION	2.7337100957641367E-4	DESIGN
add the fetched entities	WITHOUT_CLASSIFICATION	0.999989228538418	WITHOUT_CLASSIFICATION	1.0771461582131924E-5	DESIGN
get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9996750372239539	WITHOUT_CLASSIFICATION	3.2496277604611635E-4	DESIGN
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998644313102873	WITHOUT_CLASSIFICATION	0.0013556868971269427	DESIGN
if there are any scalars (non-entities) selected render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999214735237474	WITHOUT_CLASSIFICATION	7.852647625260795E-5	DESIGN
sqlresulttypelist	WITHOUT_CLASSIFICATION	0.9999241018871162	WITHOUT_CLASSIFICATION	7.589811288385047E-5	DESIGN
arraylist sqlresulttypelist	WITHOUT_CLASSIFICATION	0.9998768835787949	WITHOUT_CLASSIFICATION	1.2311642120517563E-4	DESIGN
sqlresulttypes = ( type[] ) sqlresulttypelist.toarray( new type[sqlresulttypelist.size()] )	WITHOUT_CLASSIFICATION	0.9998766422732178	WITHOUT_CLASSIFICATION	1.233577267821857E-4	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9973923477218076	WITHOUT_CLASSIFICATION	0.0026076522781924003	DESIGN
todo	WITHOUT_CLASSIFICATION	0.8072777110381393	WITHOUT_CLASSIFICATION	0.19272228896186072	DESIGN
add the type to the list of returned sqlresulttypes.	WITHOUT_CLASSIFICATION	0.9999084457464971	WITHOUT_CLASSIFICATION	9.155425350283889E-5	DESIGN
generate an 2d array of column names the first dimension is parallel with the return types array. the second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999916379086652	WITHOUT_CLASSIFICATION	8.362091334752318E-6	DESIGN
generate the select expression.	WITHOUT_CLASSIFICATION	0.999822652524922	WITHOUT_CLASSIFICATION	1.7734747507803397E-4	DESIGN
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997861336161641	WITHOUT_CLASSIFICATION	0.0021386638383589993	DESIGN
skip 'distinct' and 'all' so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999889825267837	WITHOUT_CLASSIFICATION	1.1017473216346244E-5	DESIGN
create sql_token nodes for the columns.	WITHOUT_CLASSIFICATION	0.99981752673242	WITHOUT_CLASSIFICATION	1.8247326757997657E-4	DESIGN
generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999407794396961	WITHOUT_CLASSIFICATION	5.9220560304020905E-5	DESIGN
get the function name node.	WITHOUT_CLASSIFICATION	0.9999682007110607	WITHOUT_CLASSIFICATION	3.1799288939239103E-5	DESIGN
method expressions in a select should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9646721839951735	WITHOUT_CLASSIFICATION	0.035327816004826526	DESIGN
if this is 'elements' then create a new from element.	WITHOUT_CLASSIFICATION	0.9774450141140855	WITHOUT_CLASSIFICATION	0.0225549858859145	DESIGN
not elements(x)	WITHOUT_CLASSIFICATION	0.9999451811092842	WITHOUT_CLASSIFICATION	5.4818890715892315E-5	DESIGN
dialect function	WITHOUT_CLASSIFICATION	0.999951439273582	WITHOUT_CLASSIFICATION	4.856072641798191E-5	DESIGN
collection 'property function'	WITHOUT_CLASSIFICATION	0.9995947483405778	WITHOUT_CLASSIFICATION	4.0525165942217575E-4	DESIGN
if the constant is an ident figure out what it means	WITHOUT_CLASSIFICATION	0.995518152312848	WITHOUT_CLASSIFICATION	0.004481847687152002	DESIGN
ident is a class alias in the from.	WITHOUT_CLASSIFICATION	0.9988405586478516	WITHOUT_CLASSIFICATION	0.00115944135214837	DESIGN
resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999194051253485	WITHOUT_CLASSIFICATION	8.059487465152592E-5	DESIGN
otherwise it's a literal.	WITHOUT_CLASSIFICATION	0.9994207424692217	WITHOUT_CLASSIFICATION	5.792575307782441E-4	DESIGN
the name of an entity class	WITHOUT_CLASSIFICATION	0.999967567655728	WITHOUT_CLASSIFICATION	3.243234427203498E-5	DESIGN
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999801193145825	WITHOUT_CLASSIFICATION	1.9880685417438267E-5	DESIGN
chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999799060083236	WITHOUT_CLASSIFICATION	2.0093991676245934E-5	DESIGN
add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999885822276912	WITHOUT_CLASSIFICATION	1.1417772308783163E-5	DESIGN
find or create the where clause	WITHOUT_CLASSIFICATION	0.9998525662805989	WITHOUT_CLASSIFICATION	1.4743371940109125E-4	DESIGN
child == parent.getfirstchild()	WITHOUT_CLASSIFICATION	0.999947219470951	WITHOUT_CLASSIFICATION	5.278052904913974E-5	DESIGN
find or create the where clause	WITHOUT_CLASSIFICATION	0.9998525662805989	WITHOUT_CLASSIFICATION	1.4743371940109125E-4	DESIGN
filter conditions need to be inserted before the hql where condition and the theta join node. this is because org.hibernate.loader.loader binds the filter parameters first then it binds all the hql query parameters see org.hibernate.loader.loader.processfilterparameters().	WITHOUT_CLASSIFICATION	0.9993532032858359	WITHOUT_CLASSIFICATION	6.467967141640719E-4	DESIGN
put the filters node before the hql condition and theta joins	WITHOUT_CLASSIFICATION	0.9999784680420658	WITHOUT_CLASSIFICATION	2.1531957934149516E-5	DESIGN
add the current fragment to the filters node	WITHOUT_CLASSIFICATION	0.9999003120011077	WITHOUT_CLASSIFICATION	9.96879988922723E-5	DESIGN
create a new theta_joins node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9998967252802445	WITHOUT_CLASSIFICATION	1.0327471975550945E-4	DESIGN
put the theta_joins node before the hql condition after the filters.	WITHOUT_CLASSIFICATION	0.999989299699341	WITHOUT_CLASSIFICATION	1.0700300658998892E-5	DESIGN
add the current fragment to the theta_joins node	WITHOUT_CLASSIFICATION	0.9999003120011077	WITHOUT_CLASSIFICATION	9.96879988922723E-5	DESIGN
first try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9997894856165913	WITHOUT_CLASSIFICATION	2.1051438340862318E-4	DESIGN
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.989159253190853	WITHOUT_CLASSIFICATION	0.010840746809147032	DESIGN
if that didn't work try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9986513584721926	WITHOUT_CLASSIFICATION	0.0013486415278073849	DESIGN
implicit joins use theta style (where pk = fk) explicit joins use join (after from)	WITHOUT_CLASSIFICATION	0.9998516836101199	WITHOUT_CLASSIFICATION	1.483163898802075E-4	DESIGN
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9997663375900174	WITHOUT_CLASSIFICATION	2.336624099826254E-4	DESIGN
determine the type of the first argument	WITHOUT_CLASSIFICATION	0.9999721642215043	WITHOUT_CLASSIFICATION	2.7835778495682544E-5	DESIGN
use the dot node to emit the first column name. create the column names folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9993531088634893	WITHOUT_CLASSIFICATION	6.468911365108025E-4	DESIGN
note this simply constructs a "raw" sql_token representing the where fragment and injects this into the tree. this "works" however it is probably not the best long-term solution. at some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.5594038425106265	WITHOUT_CLASSIFICATION	0.44059615748937353	DESIGN
append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999470416605556	WITHOUT_CLASSIFICATION	5.2958339444296466E-5	DESIGN
if the node has a first child recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999665330436156	WITHOUT_CLASSIFICATION	3.346695638441911E-5	DESIGN
if there is a second child (rhs) recurse into that child.	WITHOUT_CLASSIFICATION	0.9996202637826209	WITHOUT_CLASSIFICATION	3.797362173791572E-4	DESIGN
iterate through the aliasjoinsequence pairs and generate sql token nodes.	WITHOUT_CLASSIFICATION	0.9998070187296155	WITHOUT_CLASSIFICATION	1.9298127038451504E-4	DESIGN
if the from element represents a join_fragment and it is a theta-style join convert its type from join_fragment to from_fragment	WITHOUT_CLASSIFICATION	0.999084482513155	WITHOUT_CLASSIFICATION	9.155174868450389E-4	DESIGN
this is used during sqlgenerator processing	WITHOUT_CLASSIFICATION	0.9941636008960409	WITHOUT_CLASSIFICATION	0.005836399103958998	DESIGN
if there is a from fragment and the from element is an explicit then add the from part.	WITHOUT_CLASSIFICATION	0.9997940779870552	WITHOUT_CLASSIFICATION	2.0592201294476756E-4	DESIGN
&& stringhelper.isnotempty( frag )	WITHOUT_CLASSIFICATION	0.9991961411219572	WITHOUT_CLASSIFICATION	8.03858878042749E-4	DESIGN
the from fragment will probably begin with ' '. remove this if it is present.	WITHOUT_CLASSIFICATION	0.9032164143680684	WITHOUT_CLASSIFICATION	0.09678358563193155	DESIGN
this uses a pathexpressionparser but notice that compound paths are not valid only bare names and simple paths	WITHOUT_CLASSIFICATION	0.9894953092738802	WITHOUT_CLASSIFICATION	0.010504690726119901	DESIGN
select p from p in class eg.person order by p.name p.address p	WITHOUT_CLASSIFICATION	0.9956928785440115	WITHOUT_CLASSIFICATION	0.004307121455988657	DESIGN
the reason for this is sql doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9926633386973379	WITHOUT_CLASSIFICATION	0.007336661302662054	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9992966449716401	WITHOUT_CLASSIFICATION	7.033550283599005E-4	DESIGN
default mode	WITHOUT_CLASSIFICATION	0.9998862176314759	WITHOUT_CLASSIFICATION	1.1378236852419121E-4	DESIGN
queryjoinfragment join = q.createjoinfragment(usethetastylejoin)	WITHOUT_CLASSIFICATION	0.9999370814054565	WITHOUT_CLASSIFICATION	6.291859454354722E-5	DESIGN
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9999559130711209	WITHOUT_CLASSIFICATION	4.408692887905332E-5	DESIGN
after reset!	WITHOUT_CLASSIFICATION	0.9999618414092687	WITHOUT_CLASSIFICATION	3.815859073129618E-5	DESIGN
we don't need to worry about any condition in the on clause here (tofromfragmentstring) since anything in the on condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9856083740354062	WITHOUT_CLASSIFICATION	0.014391625964593808	DESIGN
bit_length feels a bit broken to me. we have to cast to char in order to pass when a numeric value is supplied. but of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. jay nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999873878789671	WITHOUT_CLASSIFICATION	1.2612121032864697E-5	DESIGN
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999241018871162	WITHOUT_CLASSIFICATION	7.589811288385047E-5	DESIGN
do the corresponding rhs	WITHOUT_CLASSIFICATION	0.9999228718949651	WITHOUT_CLASSIFICATION	7.71281050349247E-5	DESIGN
if its "id"	WITHOUT_CLASSIFICATION	0.999965904380881	WITHOUT_CLASSIFICATION	3.409561911905053E-5	DESIGN
or its the id property name	WITHOUT_CLASSIFICATION	0.9999811697665613	WITHOUT_CLASSIFICATION	1.8830233438730024E-5	DESIGN
join = q.createjoinfragment(usethetastylejoin)	WITHOUT_CLASSIFICATION	0.9999370814054565	WITHOUT_CLASSIFICATION	6.291859454354722E-5	DESIGN
important!!	WITHOUT_CLASSIFICATION	0.9999241018871162	WITHOUT_CLASSIFICATION	7.589811288385047E-5	DESIGN
string[] keycols = collpersister.getkeycolumnnames()	WITHOUT_CLASSIFICATION	0.9999314112823786	WITHOUT_CLASSIFICATION	6.858871762138263E-5	DESIGN
an association	WITHOUT_CLASSIFICATION	0.9999468740169527	WITHOUT_CLASSIFICATION	5.312598304717857E-5	DESIGN
allow index() function	WITHOUT_CLASSIFICATION	0.9998820748053417	WITHOUT_CLASSIFICATION	1.179251946582679E-4	DESIGN
here assume sqlserver2005 using snapshot isolation which does not have this problem	WITHOUT_CLASSIFICATION	0.9947165351181332	WITHOUT_CLASSIFICATION	0.005283464881866882	DESIGN
the reason for this is sql doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9926633386973379	WITHOUT_CLASSIFICATION	0.007336661302662054	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9999241018871162	WITHOUT_CLASSIFICATION	7.589811288385047E-5	DESIGN
collections of values	WITHOUT_CLASSIFICATION	0.9999815778254418	WITHOUT_CLASSIFICATION	1.8422174558103053E-5	DESIGN
opening paren in new foo ( )	WITHOUT_CLASSIFICATION	0.9997544432247559	WITHOUT_CLASSIFICATION	2.455567752441096E-4	DESIGN
if we are inside a new result() but not inside a nested function	WITHOUT_CLASSIFICATION	0.997701990995392	WITHOUT_CLASSIFICATION	0.0022980090046080203	DESIGN
special case	WITHOUT_CLASSIFICATION	0.9999947614744424	WITHOUT_CLASSIFICATION	5.23852555757341E-6	DESIGN
the name of an sql function	WITHOUT_CLASSIFICATION	0.9999674768615978	WITHOUT_CLASSIFICATION	3.252313840221089E-5	DESIGN
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9981313454617622	WITHOUT_CLASSIFICATION	0.001868654538237803	DESIGN
this is basically a copy/paste of orderbyparser might be worth refactoring	WITHOUT_CLASSIFICATION	0.616372967417897	WITHOUT_CLASSIFICATION	0.38362703258210296	DESIGN
select p from p in class eg.person group by p.name p.address p	WITHOUT_CLASSIFICATION	0.997427723556459	WITHOUT_CLASSIFICATION	0.0025722764435410247	DESIGN
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9998724461599635	WITHOUT_CLASSIFICATION	1.27553840036537E-4	DESIGN
register collection role	WITHOUT_CLASSIFICATION	0.9989645027773241	WITHOUT_CLASSIFICATION	0.0010354972226758999	DESIGN
the keyword used to specify an identity column if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9994704814505196	WITHOUT_CLASSIFICATION	5.295185494803967E-4	DESIGN
.getelementpropertymapping()	WITHOUT_CLASSIFICATION	0.999866875766015	WITHOUT_CLASSIFICATION	1.3312423398502407E-4	DESIGN
crossjoins.add(name)	WITHOUT_CLASSIFICATION	0.9999241018871162	WITHOUT_CLASSIFICATION	7.589811288385047E-5	DESIGN
ie no select clause in hql	WITHOUT_CLASSIFICATION	0.9998758463604259	WITHOUT_CLASSIFICATION	1.2415363957420005E-4	DESIGN
initialize the set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9995791765366755	WITHOUT_CLASSIFICATION	4.208234633244844E-4	DESIGN
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999428837129801	WITHOUT_CLASSIFICATION	5.711628701991419E-5	DESIGN
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9998445997708271	WITHOUT_CLASSIFICATION	1.5540022917288418E-4	DESIGN
return the concrete type or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9998885605520041	WITHOUT_CLASSIFICATION	1.114394479957669E-4	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9999241018871162	WITHOUT_CLASSIFICATION	7.589811288385047E-5	DESIGN
q.addcollection(collectionname collectionrole)	WITHOUT_CLASSIFICATION	0.999411103560662	WITHOUT_CLASSIFICATION	5.888964393379308E-4	DESIGN
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9825313538672097	WITHOUT_CLASSIFICATION	0.017468646132790314	DESIGN
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9991725760574418	WITHOUT_CLASSIFICATION	8.274239425581825E-4	DESIGN
unfortunately this stuff can't be cached because it is per-invocation not constant for the querytranslator instance	WITHOUT_CLASSIFICATION	0.9996604282357275	WITHOUT_CLASSIFICATION	3.39571764272459E-4	DESIGN
this is the legacy behaviour for hql queries	WITHOUT_CLASSIFICATION	0.9955910281859303	WITHOUT_CLASSIFICATION	0.00440897181406977	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9999383896675202	WITHOUT_CLASSIFICATION	6.161033247972985E-5	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9999383896675202	WITHOUT_CLASSIFICATION	6.161033247972985E-5	DESIGN
we have the form trim(trimsource) so we trim leading and trailing spaces early exit!!!!	WITHOUT_CLASSIFICATION	0.999848430437532	WITHOUT_CLASSIFICATION	1.5156956246793708E-4	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9999383896675202	WITHOUT_CLASSIFICATION	6.161033247972985E-5	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9999383896675202	WITHOUT_CLASSIFICATION	6.161033247972985E-5	DESIGN
need this since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9984274763567345	WITHOUT_CLASSIFICATION	0.0015725236432655736	DESIGN
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999085348978236	WITHOUT_CLASSIFICATION	9.146510217644515E-5	DESIGN
expressionterminators.add("") deliberately excluded	WITHOUT_CLASSIFICATION	0.999413619615139	WITHOUT_CLASSIFICATION	5.863803848610272E-4	DESIGN
expressionopeners.add("") deliberately excluded	WITHOUT_CLASSIFICATION	0.999413619615139	WITHOUT_CLASSIFICATION	5.863803848610272E-4	DESIGN
we have the form trim(from trimsource). this is functionally equivalent to trim(trimsource) early exit!!!!	WITHOUT_CLASSIFICATION	0.9971225034562291	WITHOUT_CLASSIFICATION	0.0028774965437709157	DESIGN
otherwise a trim-specification and/or a trim-character have been specified we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9486148286418703	WITHOUT_CLASSIFICATION	0.05138517135812967	DESIGN
inside a between and expression	WITHOUT_CLASSIFICATION	0.9966544562930905	WITHOUT_CLASSIFICATION	0.00334554370690962	DESIGN
were an odd or even number of nots encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9988703739389667	WITHOUT_CLASSIFICATION	0.001129626061033335	DESIGN
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9998682133041418	WITHOUT_CLASSIFICATION	1.3178669585817469E-4	DESIGN
cope with []	WITHOUT_CLASSIFICATION	0.9999373333405696	WITHOUT_CLASSIFICATION	6.266665943051012E-5	DESIGN
cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9997174710011789	WITHOUT_CLASSIFICATION	2.8252899882111776E-4	DESIGN
note early return	WITHOUT_CLASSIFICATION	0.9999736946036508	WITHOUT_CLASSIFICATION	2.6305396349145466E-5	DESIGN
cope with a subselect	WITHOUT_CLASSIFICATION	0.9997765977730667	WITHOUT_CLASSIFICATION	2.234022269333405E-4	DESIGN
cope with special cases of and not ()	WITHOUT_CLASSIFICATION	0.9999943554353814	WITHOUT_CLASSIFICATION	5.644564618523324E-6	DESIGN
close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999801165548466	WITHOUT_CLASSIFICATION	1.988344515331515E-5	DESIGN
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9982082402907492	WITHOUT_CLASSIFICATION	0.0017917597092507928	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9998428039606778	WITHOUT_CLASSIFICATION	1.5719603932216064E-4	DESIGN
process a token mapping oo path expressions to sql expressions	WITHOUT_CLASSIFICATION	0.9997314700844088	WITHOUT_CLASSIFICATION	2.685299155912082E-4	DESIGN
open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9980038479350286	WITHOUT_CLASSIFICATION	0.0019961520649713392	DESIGN
cope with special cases of and not )	WITHOUT_CLASSIFICATION	0.9997269793661142	WITHOUT_CLASSIFICATION	2.7302063388576876E-4	DESIGN
the next one up must also be	WITHOUT_CLASSIFICATION	0.9998287441137779	WITHOUT_CLASSIFICATION	1.7125588622211936E-4	DESIGN
add any joins	WITHOUT_CLASSIFICATION	0.9999865158619345	WITHOUT_CLASSIFICATION	1.348413806548159E-5	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9998428039606778	WITHOUT_CLASSIFICATION	1.5719603932216064E-4	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9992966449716401	WITHOUT_CLASSIFICATION	7.033550283599005E-4	DESIGN
path expression	WITHOUT_CLASSIFICATION	0.9999783091824735	WITHOUT_CLASSIFICATION	2.1690817526468472E-5	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9992275906216631	WITHOUT_CLASSIFICATION	7.724093783369115E-4	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9984496173820306	WITHOUT_CLASSIFICATION	0.001550382617969378	DESIGN
anything else	WITHOUT_CLASSIFICATION	0.999989473529441	WITHOUT_CLASSIFICATION	1.0526470558971165E-5	DESIGN
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.999953951488269	WITHOUT_CLASSIFICATION	4.6048511730890386E-5	DESIGN
careful with this!	WITHOUT_CLASSIFICATION	0.9998730494569048	WITHOUT_CLASSIFICATION	1.2695054309513936E-4	DESIGN
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9998893454908796	WITHOUT_CLASSIFICATION	1.1065450912042036E-4	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999749405714428	WITHOUT_CLASSIFICATION	2.505942855725348E-5	DESIGN
notice no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9998500359274409	WITHOUT_CLASSIFICATION	1.49964072558996E-4	DESIGN
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999172413546933	WITHOUT_CLASSIFICATION	8.275864530661543E-5	DESIGN
start by looking for hql keywords	WITHOUT_CLASSIFICATION	0.9917586189373482	WITHOUT_CLASSIFICATION	0.008241381062651848	DESIGN
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9989082599738016	WITHOUT_CLASSIFICATION	0.0010917400261984272	DESIGN
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9990172660758073	WITHOUT_CLASSIFICATION	9.827339241926319E-4	DESIGN
now anything that is not a hql keyword	WITHOUT_CLASSIFICATION	0.9998636644796061	WITHOUT_CLASSIFICATION	1.3633552039393458E-4	DESIGN
process the "old" hql style where aliases appear _first_ ie. using the in or in class constructions	WITHOUT_CLASSIFICATION	0.9999884306729017	WITHOUT_CLASSIFICATION	1.1569327098327256E-5	DESIGN
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999176463832019	WITHOUT_CLASSIFICATION	8.235361679809261E-5	DESIGN
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999763375499494	WITHOUT_CLASSIFICATION	2.366245005067816E-5	DESIGN
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9997779775795798	WITHOUT_CLASSIFICATION	2.220224204203099E-4	DESIGN
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.999779771303353	WITHOUT_CLASSIFICATION	2.2022869664700657E-4	DESIGN
allow odmg oql style from person p p.cars c	WITHOUT_CLASSIFICATION	0.9985569849976856	WITHOUT_CLASSIFICATION	0.001443015002314314	DESIGN
handle quoted strings	WITHOUT_CLASSIFICATION	0.9988510051715351	WITHOUT_CLASSIFICATION	0.0011489948284648794	DESIGN
object insertions updates and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9971777251036584	WITHOUT_CLASSIFICATION	0.0028222748963415336	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999749405714428	WITHOUT_CLASSIFICATION	2.505942855725348E-5	DESIGN
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999429696098489	WITHOUT_CLASSIFICATION	5.703039015126888E-5	DESIGN
do replacements	WITHOUT_CLASSIFICATION	0.9998495119569344	WITHOUT_CLASSIFICATION	1.5048804306553676E-4	DESIGN
handle hql2 collection syntax	WITHOUT_CLASSIFICATION	0.998628575589365	WITHOUT_CLASSIFICATION	0.0013714244106349399	DESIGN
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9988336102705326	WITHOUT_CLASSIFICATION	0.0011663897294673902	DESIGN
abstractselectingdelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996248827209578	WITHOUT_CLASSIFICATION	3.75117279042202E-4	DESIGN
hilo params	WITHOUT_CLASSIFICATION	0.9999249879312384	WITHOUT_CLASSIFICATION	7.501206876156256E-5	DESIGN
sql = query	WITHOUT_CLASSIFICATION	0.9999898697148117	WITHOUT_CLASSIFICATION	1.0130285188252912E-5	DESIGN
performance opt	WITHOUT_CLASSIFICATION	0.9993287802107285	WITHOUT_CLASSIFICATION	6.712197892715802E-4	DESIGN
sql = update	WITHOUT_CLASSIFICATION	0.9999984027214125	WITHOUT_CLASSIFICATION	1.5972785875274128E-6	DESIGN
hilo config	WITHOUT_CLASSIFICATION	0.9999260634497072	WITHOUT_CLASSIFICATION	7.39365502927121E-5	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999126046591816	WITHOUT_CLASSIFICATION	8.73953408183176E-5	DESIGN
don't allow comments on these insert statements as comments totally blow up the oracle getgeneratedkeys "support" (	WITHOUT_CLASSIFICATION	0.9999340280864335	WITHOUT_CLASSIFICATION	6.597191356648817E-5	DESIGN
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9952777973972271	WITHOUT_CLASSIFICATION	0.004722202602772875	DESIGN
throw new identifiergenerationexception("save associated object first or disable cascade for inverse association")	WITHOUT_CLASSIFICATION	0.9997279256858047	WITHOUT_CLASSIFICATION	2.720743141953269E-4	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9998665593896974	WITHOUT_CLASSIFICATION	1.3344061030272494E-4	DESIGN
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999852321814512	WITHOUT_CLASSIFICATION	1.4767818548801481E-5	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9998078870244236	WITHOUT_CLASSIFICATION	1.9211297557638718E-4	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999126046591816	WITHOUT_CLASSIFICATION	8.73953408183176E-5	DESIGN
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9997000232634985	WITHOUT_CLASSIFICATION	2.999767365014811E-4	DESIGN
column and table should be renamed but it would break the public api	WITHOUT_CLASSIFICATION	0.9962269852703303	WITHOUT_CLASSIFICATION	0.0037730147296697446	DESIGN
loaded entity instances by entitykey	WITHOUT_CLASSIFICATION	0.9993549127839094	WITHOUT_CLASSIFICATION	6.450872160906157E-4	DESIGN
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9985049390013306	WITHOUT_CLASSIFICATION	0.0014950609986693123	DESIGN
the default	WITHOUT_CLASSIFICATION	0.9999865374862591	WITHOUT_CLASSIFICATION	1.3462513740944331E-5	DESIGN
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence	WITHOUT_CLASSIFICATION	0.9978167827991933	WITHOUT_CLASSIFICATION	0.0021832172008067674	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9998665593896974	WITHOUT_CLASSIFICATION	1.3344061030272494E-4	DESIGN
identity map of collectionentry instances by the collection wrapper	WITHOUT_CLASSIFICATION	0.999899027419238	WITHOUT_CLASSIFICATION	1.0097258076205608E-4	DESIGN
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994316848677723	WITHOUT_CLASSIFICATION	5.683151322275728E-4	DESIGN
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995675504157829	WITHOUT_CLASSIFICATION	4.3244958421710596E-4	DESIGN
configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983937793005697	WITHOUT_CLASSIFICATION	0.0016062206994302763	DESIGN
identifiergenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993711102748413	WITHOUT_CLASSIFICATION	6.288897251588093E-4	DESIGN
persistentidentifiergenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993711102748413	WITHOUT_CLASSIFICATION	6.288897251588093E-4	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999771610545583	WITHOUT_CLASSIFICATION	2.28389454418062E-5	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999771610545583	WITHOUT_CLASSIFICATION	2.28389454418062E-5	DESIGN
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9916420266820251	WITHOUT_CLASSIFICATION	0.008357973317974892	DESIGN
we just hit the last position	WITHOUT_CLASSIFICATION	0.9997324891212572	WITHOUT_CLASSIFICATION	2.6751087874273607E-4	DESIGN
scroll ahead	WITHOUT_CLASSIFICATION	0.9999292774286335	WITHOUT_CLASSIFICATION	7.072257136649338E-5	DESIGN
scroll backward	WITHOUT_CLASSIFICATION	0.9999411062144691	WITHOUT_CLASSIFICATION	5.889378553083945E-5	DESIGN
we have not yet hit the last result	WITHOUT_CLASSIFICATION	0.9999524270682759	WITHOUT_CLASSIFICATION	4.7572931723993014E-5	DESIGN
constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991411005555025	WITHOUT_CLASSIFICATION	8.588994444974395E-4	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997606366790478	WITHOUT_CLASSIFICATION	2.3936332095230833E-4	DESIGN
criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996334013973365	WITHOUT_CLASSIFICATION	3.665986026634633E-4	DESIGN
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9860455907883574	WITHOUT_CLASSIFICATION	0.013954409211642704	DESIGN
inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997827409789433	WITHOUT_CLASSIFICATION	2.17259021056871E-4	DESIGN
constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991411005555025	WITHOUT_CLASSIFICATION	8.588994444974395E-4	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997606366790478	WITHOUT_CLASSIFICATION	2.3936332095230833E-4	DESIGN
criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996334013973365	WITHOUT_CLASSIFICATION	3.665986026634633E-4	DESIGN
caches	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
generators	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
cache region is defined by the root-class in the hierarchy	WITHOUT_CLASSIFICATION	0.9990709030432209	WITHOUT_CLASSIFICATION	9.29096956779164E-4	DESIGN
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9998818972758617	WITHOUT_CLASSIFICATION	1.1810272413818876E-4	DESIGN
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.998412264623187	WITHOUT_CLASSIFICATION	0.001587735376813071	DESIGN
if we get here it is possible that we have a proxy 'in the way' of the merge map resolution note decided to put this here rather than in the above loop as i was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9742420760847611	WITHOUT_CLASSIFICATION	0.02575792391523889	DESIGN
jndi + serialization	WITHOUT_CLASSIFICATION	0.9999684524213136	WITHOUT_CLASSIFICATION	3.154757868645277E-5	DESIGN
checking for named queries	WITHOUT_CLASSIFICATION	0.9998127808163421	WITHOUT_CLASSIFICATION	1.8721918365793012E-4	DESIGN
stats	WITHOUT_CLASSIFICATION	0.9999158287136467	WITHOUT_CLASSIFICATION	8.417128635329247E-5	DESIGN
entitynotfounddelegate	WITHOUT_CLASSIFICATION	0.999866875766015	WITHOUT_CLASSIFICATION	1.3312423398502407E-4	DESIGN
check named hql queries	WITHOUT_CLASSIFICATION	0.9999263726866973	WITHOUT_CLASSIFICATION	7.362731330274646E-5	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.997728773374492	WITHOUT_CLASSIFICATION	0.0022712266255081105	DESIGN
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9922018647575961	WITHOUT_CLASSIFICATION	0.007798135242403878	DESIGN
from javax.naming.referenceable	WITHOUT_CLASSIFICATION	0.9983583004266883	WITHOUT_CLASSIFICATION	0.001641699573311729	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9998963183641353	WITHOUT_CLASSIFICATION	1.0368163586462715E-4	DESIGN
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9997916047885782	WITHOUT_CLASSIFICATION	2.0839521142178898E-4	DESIGN
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9975459940963282	WITHOUT_CLASSIFICATION	0.002454005903671759	DESIGN
note early exit	WITHOUT_CLASSIFICATION	0.9999718167657065	WITHOUT_CLASSIFICATION	2.8183234293566652E-5	DESIGN
for backward-compatability	WITHOUT_CLASSIFICATION	0.9997894898940073	WITHOUT_CLASSIFICATION	2.10510105992689E-4	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.999465676089646	WITHOUT_CLASSIFICATION	5.34323910354068E-4	DESIGN
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9995680354285797	WITHOUT_CLASSIFICATION	4.31964571420223E-4	DESIGN
in case we were deserialized in a different jvm look for an instance with the same name (alternatively we could do an actual jndi lookup here.)	WITHOUT_CLASSIFICATION	0.999726148625283	WITHOUT_CLASSIFICATION	2.738513747171015E-4	DESIGN
must add to jndi _after_ adding to hashmaps because some jndi servers use serialization	WITHOUT_CLASSIFICATION	0.9995847944726858	WITHOUT_CLASSIFICATION	4.1520552731421923E-4	DESIGN
make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9768657218780726	WITHOUT_CLASSIFICATION	0.023134278121927462	DESIGN
for each of the defined parameters make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999014727574856	WITHOUT_CLASSIFICATION	9.852724251439739E-5	DESIGN
we never need to apply locks to the sql	WITHOUT_CLASSIFICATION	0.9974867297225463	WITHOUT_CLASSIFICATION	0.0025132702774537047	DESIGN
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999411103560662	WITHOUT_CLASSIFICATION	5.888964393379308E-4	DESIGN
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993672852349649	WITHOUT_CLASSIFICATION	6.327147650351232E-4	DESIGN
during deserialization we need to reconnect all proxies and collections to this session as well as the entityentry and collectionentry instances these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9955123005405258	WITHOUT_CLASSIFICATION	0.004487699459474278	DESIGN
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994260562594408	WITHOUT_CLASSIFICATION	5.73943740559227E-4	DESIGN
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992203974564421	WITHOUT_CLASSIFICATION	7.796025435579121E-4	DESIGN
final boolean forcecacherefresh	WITHOUT_CLASSIFICATION	0.9991935954631018	WITHOUT_CLASSIFICATION	8.06404536898197E-4	DESIGN
final boolean forcecacherefresh	WITHOUT_CLASSIFICATION	0.9991935954631018	WITHOUT_CLASSIFICATION	8.06404536898197E-4	DESIGN
first try to load it from the temp pc associated to this ss	WITHOUT_CLASSIFICATION	0.9996209324745858	WITHOUT_CLASSIFICATION	3.7906752541423845E-4	DESIGN
if the metadata allowed proxy creation and caller did not request forceful eager loading generate a proxy	WITHOUT_CLASSIFICATION	0.9999606152102568	WITHOUT_CLASSIFICATION	3.93847897431823E-5	DESIGN
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9998274351007437	WITHOUT_CLASSIFICATION	1.7256489925639612E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9999537285718064	WITHOUT_CLASSIFICATION	4.6271428193561E-5	DESIGN
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9969483958397445	WITHOUT_CLASSIFICATION	0.0030516041602555925	DESIGN
after setting values to object entitymode	WITHOUT_CLASSIFICATION	0.9999451693403683	WITHOUT_CLASSIFICATION	5.4830659631886814E-5	DESIGN
for ejb3	WITHOUT_CLASSIFICATION	0.9998651095957475	WITHOUT_CLASSIFICATION	1.3489040425258486E-4	DESIGN
just ignore	WITHOUT_CLASSIFICATION	0.9999364278630897	WITHOUT_CLASSIFICATION	6.357213691038241E-5	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9998237084385935	WITHOUT_CLASSIFICATION	1.7629156140654156E-4	DESIGN
saveorupdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995966178022693	WITHOUT_CLASSIFICATION	4.033821977307281E-4	DESIGN
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995966178022693	WITHOUT_CLASSIFICATION	4.033821977307281E-4	DESIGN
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995966178022693	WITHOUT_CLASSIFICATION	4.033821977307281E-4	DESIGN
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995966178022693	WITHOUT_CLASSIFICATION	4.033821977307281E-4	DESIGN
persistonflush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995966178022693	WITHOUT_CLASSIFICATION	4.033821977307281E-4	DESIGN
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995966178022693	WITHOUT_CLASSIFICATION	4.033821977307281E-4	DESIGN
saveorupdatecopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995966178022693	WITHOUT_CLASSIFICATION	4.033821977307281E-4	DESIGN
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995665971458104	WITHOUT_CLASSIFICATION	4.3340285418958186E-4	DESIGN
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995966178022693	WITHOUT_CLASSIFICATION	4.033821977307281E-4	DESIGN
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995966178022693	WITHOUT_CLASSIFICATION	4.033821977307281E-4	DESIGN
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995966178022693	WITHOUT_CLASSIFICATION	4.033821977307281E-4	DESIGN
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.999009180953111	WITHOUT_CLASSIFICATION	9.90819046889107E-4	DESIGN
this is an internal error of some sort	WITHOUT_CLASSIFICATION	0.9777710895579158	WITHOUT_CLASSIFICATION	0.02222891044208417	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9895107884890906	WITHOUT_CLASSIFICATION	0.010489211510909351	DESIGN
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999511659538498	WITHOUT_CLASSIFICATION	4.8834046150126445E-5	DESIGN
if it was previously unreferenced we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9991143196601968	WITHOUT_CLASSIFICATION	8.85680339803225E-4	DESIGN
not for internal use	WITHOUT_CLASSIFICATION	0.9997387519382694	WITHOUT_CLASSIFICATION	2.612480617305064E-4	DESIGN
otherwise we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9971806877907445	WITHOUT_CLASSIFICATION	0.002819312209255483	DESIGN
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9866881488440924	WITHOUT_CLASSIFICATION	0.013311851155907616	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9895107884890906	WITHOUT_CLASSIFICATION	0.010489211510909351	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9895107884890906	WITHOUT_CLASSIFICATION	0.010489211510909351	DESIGN
if it is initialized see if the underlying instance is contained since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.8340717703140207	WITHOUT_CLASSIFICATION	0.1659282296859793	DESIGN
basically just an adapted copy of find(criteriaimpl)	WITHOUT_CLASSIFICATION	0.999604197829558	WITHOUT_CLASSIFICATION	3.9580217044195005E-4	DESIGN
it is possible for this method to be called during flush processing so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9975402199433172	WITHOUT_CLASSIFICATION	0.0024597800566827765	DESIGN
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9998226734280763	WITHOUT_CLASSIFICATION	1.773265719237309E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999297444246349	WITHOUT_CLASSIFICATION	7.025557536506883E-5	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.999465676089646	WITHOUT_CLASSIFICATION	5.34323910354068E-4	DESIGN
we need to writeobject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9918581413669227	WITHOUT_CLASSIFICATION	0.00814185863307735	DESIGN
the old-time stand-by	WITHOUT_CLASSIFICATION	0.999957812974611	WITHOUT_CLASSIFICATION	4.2187025389020484E-5	DESIGN
parameter bind values	WITHOUT_CLASSIFICATION	0.9998865381114594	WITHOUT_CLASSIFICATION	1.1346188854053812E-4	DESIGN
parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9599954829264415	WITHOUT_CLASSIFICATION	0.04000451707355855	DESIGN
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9995056455201793	WITHOUT_CLASSIFICATION	4.943544798207669E-4	DESIGN
execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99940572172659	WITHOUT_CLASSIFICATION	5.942782734099407E-4	DESIGN
we have a cglib enhanced entity	WITHOUT_CLASSIFICATION	0.9994705475595431	WITHOUT_CLASSIFICATION	5.294524404568656E-4	DESIGN
we have a cglib enhanced entity	WITHOUT_CLASSIFICATION	0.9994705475595431	WITHOUT_CLASSIFICATION	5.294524404568656E-4	DESIGN
we have a javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9994705475595431	WITHOUT_CLASSIFICATION	5.294524404568656E-4	DESIGN
we have a javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9994705475595431	WITHOUT_CLASSIFICATION	5.294524404568656E-4	DESIGN
fieldinterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996248827209578	WITHOUT_CLASSIFICATION	3.75117279042202E-4	DESIGN
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995559801561743	WITHOUT_CLASSIFICATION	4.440198438256687E-4	DESIGN
let's assume that there is only one lazy fetch group for now!	WITHOUT_CLASSIFICATION	0.99970907388932	WITHOUT_CLASSIFICATION	2.909261106799919E-4	DESIGN
fieldhandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996248827209578	WITHOUT_CLASSIFICATION	3.75117279042202E-4	DESIGN
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9994939051260732	WITHOUT_CLASSIFICATION	5.060948739268864E-4	DESIGN
should probably no-op commit/rollback here at least in jta scenarios	WITHOUT_CLASSIFICATION	0.970841194283097	WITHOUT_CLASSIFICATION	0.02915880571690293	DESIGN
base expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995182699628509	WITHOUT_CLASSIFICATION	4.8173003714903454E-4	DESIGN
various expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992735663389931	WITHOUT_CLASSIFICATION	7.26433661006867E-4	DESIGN
explicitly perform no checking	WITHOUT_CLASSIFICATION	0.9988892961808181	WITHOUT_CLASSIFICATION	0.001110703819181925	DESIGN
used from testsuite	WITHOUT_CLASSIFICATION	0.9996235482324546	WITHOUT_CLASSIFICATION	3.764517675453476E-4	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9991105771567564	WITHOUT_CLASSIFICATION	8.894228432434849E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9996736783687447	WITHOUT_CLASSIFICATION	3.2632163125530575E-4	DESIGN
register synch stats.connect()	WITHOUT_CLASSIFICATION	0.9998442508898508	WITHOUT_CLASSIFICATION	1.557491101491357E-4	DESIGN
noncritical swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9990642880695859	WITHOUT_CLASSIFICATION	9.357119304141527E-4	DESIGN
calls executebatch()	WITHOUT_CLASSIFICATION	0.9998219379765493	WITHOUT_CLASSIFICATION	1.780620234507209E-4	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999851224013784	WITHOUT_CLASSIFICATION	1.4877598621635888E-5	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999851224013784	WITHOUT_CLASSIFICATION	1.4877598621635888E-5	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999851224013784	WITHOUT_CLASSIFICATION	1.4877598621635888E-5	DESIGN
sybase driver (jconnect) throwing npe here in certain cases but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9994359212353224	WITHOUT_CLASSIFICATION	5.640787646776227E-4	DESIGN
see explanation above	WITHOUT_CLASSIFICATION	0.9998891856977699	WITHOUT_CLASSIFICATION	1.1081430223020961E-4	DESIGN
if we are in the process of releasing no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9994633511116767	WITHOUT_CLASSIFICATION	5.366488883232939E-4	DESIGN
early exit!!!!	WITHOUT_CLASSIFICATION	0.9999361135120728	WITHOUT_CLASSIFICATION	6.388648792726615E-5	DESIGN
resultset impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996248827209578	WITHOUT_CLASSIFICATION	3.75117279042202E-4	DESIGN
resultset impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996248827209578	WITHOUT_CLASSIFICATION	3.75117279042202E-4	DESIGN
refer to comment in statefulpersistencecontext.addcollection()	WITHOUT_CLASSIFICATION	0.9998318192859896	WITHOUT_CLASSIFICATION	1.6818071401034727E-4	DESIGN
connectionmanager.callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993711102748413	WITHOUT_CLASSIFICATION	6.288897251588093E-4	DESIGN
note success = false because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999968880125083	WITHOUT_CLASSIFICATION	3.1119874916098477E-6	DESIGN
we already have a callback registered either a local (org.hibernate.transaction) transaction has accepted callback responsibilities or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.997572236382972	WITHOUT_CLASSIFICATION	0.0024277636170279226	DESIGN
the configured transaction-factory says it only supports local callback mode so no sense attempting to register a jta synchronization	WITHOUT_CLASSIFICATION	0.9796150761953245	WITHOUT_CLASSIFICATION	0.020384923804675492	DESIGN
transactions marked for rollback-only cause some tm impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9939044209812566	WITHOUT_CLASSIFICATION	0.006095579018743331	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994145922259581	WITHOUT_CLASSIFICATION	5.854077740419757E-4	DESIGN
postinitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999683096548712	WITHOUT_CLASSIFICATION	3.16903451288405E-5	DESIGN
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9996694960064907	WITHOUT_CLASSIFICATION	3.305039935093125E-4	DESIGN
todo for 4.0 private static final logger log = loggerfactory.getlogger( sqlstatementlogger.class ) this is the legacy logging 'category'	WITHOUT_CLASSIFICATION	0.5733026350823995	WITHOUT_CLASSIFICATION	0.42669736491760046	DESIGN
note that for sequential scrolling we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9978659352655425	WITHOUT_CLASSIFICATION	0.0021340647344576073	DESIGN
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9742893433170287	WITHOUT_CLASSIFICATION	0.025710656682971327	DESIGN
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9819695626789231	WITHOUT_CLASSIFICATION	0.018030437321076894	DESIGN
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9994886090989071	WITHOUT_CLASSIFICATION	5.113909010929452E-4	DESIGN
sequentially read the result set in reverse until we recognize a change in the key value. at that point we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999792392633472	WITHOUT_CLASSIFICATION	2.076073665274193E-5	DESIGN
read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999525933702722	WITHOUT_CLASSIFICATION	4.74066297277992E-5	DESIGN
finally read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9995853737970858	WITHOUT_CLASSIFICATION	4.146262029141981E-4	DESIGN
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999921215603129	WITHOUT_CLASSIFICATION	7.878439687116096E-6	DESIGN
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999380211884115	WITHOUT_CLASSIFICATION	6.197881158849946E-5	DESIGN
this is equivalent to the old behavior	WITHOUT_CLASSIFICATION	0.9984704414787008	WITHOUT_CLASSIFICATION	0.0015295585212992426	DESIGN
if null owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9992054311260066	WITHOUT_CLASSIFICATION	7.94568873993458E-4	DESIGN
final string querystring	WITHOUT_CLASSIFICATION	0.999383712606868	WITHOUT_CLASSIFICATION	6.162873931320235E-4	DESIGN
if it was a reference to self don't need to nullify unless we are using native id generation in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9942228498493476	WITHOUT_CLASSIFICATION	0.005777150150652396	DESIGN
end of array start filling again from start	WITHOUT_CLASSIFICATION	0.9976093715073541	WITHOUT_CLASSIFICATION	0.002390628492645955	DESIGN
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to persistentcollection#endread) we scan the internal loadingcollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endread processing.	WITHOUT_CLASSIFICATION	0.9914903319457172	WITHOUT_CLASSIFICATION	0.00850966805428265	DESIGN
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.999941912688819	WITHOUT_CLASSIFICATION	5.8087311180895404E-5	DESIGN
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9998251920812812	WITHOUT_CLASSIFICATION	1.7480791871880036E-4	DESIGN
first we need to suspend any current jta transaction and obtain a jdbc connection	WITHOUT_CLASSIFICATION	0.9937834004430909	WITHOUT_CLASSIFICATION	0.006216599556909101	DESIGN
getresultlist(results)	WITHOUT_CLASSIFICATION	0.999866875766015	WITHOUT_CLASSIFICATION	1.3312423398502407E-4	DESIGN
if we only returned one entity query by key is more efficient	WITHOUT_CLASSIFICATION	0.9384935259755588	WITHOUT_CLASSIFICATION	0.061506474024441295	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9985447139376791	WITHOUT_CLASSIFICATION	0.0014552860623210193	DESIGN
handle empty collection	WITHOUT_CLASSIFICATION	0.9976592435962265	WITHOUT_CLASSIFICATION	0.0023407564037734863	DESIGN
else no collection element but also no owner	WITHOUT_CLASSIFICATION	0.9998479660785345	WITHOUT_CLASSIFICATION	1.5203392146550805E-4	DESIGN
handle empty collections	WITHOUT_CLASSIFICATION	0.9992902053363781	WITHOUT_CLASSIFICATION	7.097946636219208E-4	DESIGN
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.8129246438795473	WITHOUT_CLASSIFICATION	0.18707535612045267	DESIGN
validate() instances of validatable	WITHOUT_CLASSIFICATION	0.9996401400485896	WITHOUT_CLASSIFICATION	3.5985995141043917E-4	DESIGN
if we know there is exactly 1 row we can skip. it would be great if we could _always_ skip this it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9919551056315067	WITHOUT_CLASSIFICATION	0.008044894368493245	DESIGN
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.996504315327528	WITHOUT_CLASSIFICATION	0.003495684672472019	DESIGN
null version means the object is in the process of being loaded somewhere else in the resultset	WITHOUT_CLASSIFICATION	0.9996878825154059	WITHOUT_CLASSIFICATION	3.12117484594119E-4	DESIGN
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9990690214106006	WITHOUT_CLASSIFICATION	9.309785893994181E-4	DESIGN
use the id passed in	WITHOUT_CLASSIFICATION	0.9999710400467312	WITHOUT_CLASSIFICATION	2.895995326878331E-5	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999927863356595	WITHOUT_CLASSIFICATION	7.213664340515147E-6	DESIGN
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9995053504405554	WITHOUT_CLASSIFICATION	4.94649559444542E-4	DESIGN
no point doing this if none was requested	WITHOUT_CLASSIFICATION	0.999965474156952	WITHOUT_CLASSIFICATION	3.452584304804025E-5	DESIGN
if the object is already loaded return the loaded one	WITHOUT_CLASSIFICATION	0.9998986380436226	WITHOUT_CLASSIFICATION	1.013619563773773E-4	DESIGN
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9977625441679958	WITHOUT_CLASSIFICATION	0.002237455832004153	DESIGN
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9987242190519687	WITHOUT_CLASSIFICATION	0.001275780948031283	DESIGN
the load() which takes an entity does not pass an entityname	WITHOUT_CLASSIFICATION	0.9999793933520605	WITHOUT_CLASSIFICATION	2.06066479394622E-5	DESIGN
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999276752951693	WITHOUT_CLASSIFICATION	7.232470483065888E-5	DESIGN
look for a proxy	WITHOUT_CLASSIFICATION	0.9999516393428599	WITHOUT_CLASSIFICATION	4.8360657140197344E-5	DESIGN
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9973645975474787	WITHOUT_CLASSIFICATION	0.0026354024525213227	DESIGN
its the given optional object	WITHOUT_CLASSIFICATION	0.9999805350141369	WITHOUT_CLASSIFICATION	1.9464985863196013E-5	DESIGN
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9994698829717922	WITHOUT_CLASSIFICATION	5.301170282077853E-4	DESIGN
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9992500761007783	WITHOUT_CLASSIFICATION	7.499238992217674E-4	DESIGN
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9998491587967315	WITHOUT_CLASSIFICATION	1.508412032685026E-4	DESIGN
will be ignored using the existing entry instead	WITHOUT_CLASSIFICATION	0.9998692673244991	WITHOUT_CLASSIFICATION	1.3073267550095088E-4	DESIGN
key is an entity involved with the operation performed by the listener value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999735097361344	WITHOUT_CLASSIFICATION	2.6490263865517932E-5	DESIGN
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9995943109427387	WITHOUT_CLASSIFICATION	4.0568905726133384E-4	DESIGN
get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9996937588066778	WITHOUT_CLASSIFICATION	3.0624119332222364E-4	DESIGN
ok in normal hibernate usage to delete a detached entity jpa however forbids it thus this is a hook for hem to affect this behavior	WITHOUT_CLASSIFICATION	0.9189347339402615	WITHOUT_CLASSIFICATION	0.0810652660597385	DESIGN
the entry will be removed after the flush and will no longer override the stale snapshot this is now handled by removeentity() in entitydeleteaction persistencecontext.removedatabasesnapshot(key)	WITHOUT_CLASSIFICATION	0.9999267047287371	WITHOUT_CLASSIFICATION	7.329527126292327E-5	DESIGN
addinitializedcollection(collection persister id)	WITHOUT_CLASSIFICATION	0.9989840875665905	WITHOUT_CLASSIFICATION	0.00101591243340948	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9999429332197395	WITHOUT_CLASSIFICATION	5.7066780260468465E-5	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9999429332197395	WITHOUT_CLASSIFICATION	5.7066780260468465E-5	DESIGN
|| oj.getjoinable().consumescollectionalias()	WITHOUT_CLASSIFICATION	0.9993451496271148	WITHOUT_CLASSIFICATION	6.548503728851689E-4	DESIGN
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9896508186094831	WITHOUT_CLASSIFICATION	0.010349181390516923	DESIGN
code to handle subclasses of topclass	WITHOUT_CLASSIFICATION	0.9889577996606629	WITHOUT_CLASSIFICATION	0.011042200339337054	DESIGN
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999676529880898	WITHOUT_CLASSIFICATION	3.234701191031837E-5	DESIGN
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999331676634848	WITHOUT_CLASSIFICATION	6.683233651517187E-5	DESIGN
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9985552654470009	WITHOUT_CLASSIFICATION	0.0014447345529990058	DESIGN
synchronized to avoid multi-thread access issues defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.998610452728558	WITHOUT_CLASSIFICATION	0.0013895472714420508	DESIGN
allows various loaders (ok mainly the queryloader ) to check whether scrolling of their result set should be allowed. by default it is allowed.	WITHOUT_CLASSIFICATION	0.9956566224271598	WITHOUT_CLASSIFICATION	0.004343377572840258	DESIGN
before adding to collection!	WITHOUT_CLASSIFICATION	0.9998958499156511	WITHOUT_CLASSIFICATION	1.041500843489649E-4	DESIGN
if the current depth is 0 the root thing being loaded is the many-to-many collection itself. here it is alright to use an inner join	WITHOUT_CLASSIFICATION	0.9952988718272995	WITHOUT_CLASSIFICATION	0.004701128172700547	DESIGN
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999893914398885	WITHOUT_CLASSIFICATION	1.060856011153028E-5	DESIGN
simple because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element	WITHOUT_CLASSIFICATION	0.9991599434299145	WITHOUT_CLASSIFICATION	8.400565700853901E-4	DESIGN
a composite key	WITHOUT_CLASSIFICATION	0.9998336578237733	WITHOUT_CLASSIFICATION	1.6634217622670317E-4	DESIGN
if no batch use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9995926698110471	WITHOUT_CLASSIFICATION	4.07330188952912E-4	DESIGN
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9956110709957128	WITHOUT_CLASSIFICATION	0.004388929004287205	DESIGN
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9990946821012218	WITHOUT_CLASSIFICATION	9.053178987782823E-4	DESIGN
&& etype.isreferencetoprimarykey()	WITHOUT_CLASSIFICATION	0.999432829592013	WITHOUT_CLASSIFICATION	5.671704079870184E-4	DESIGN
it might still need to apply a collection ordering based on a many-to-many defined order-by	WITHOUT_CLASSIFICATION	0.8608196280840557	DESIGN	0.1391803719159443	WITHOUT_CLASSIFICATION
if a composite key use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching todo unnecessary for databases with ansi-style joins	WITHOUT_CLASSIFICATION	0.7701555639544269	DESIGN	0.229844436045573	WITHOUT_CLASSIFICATION
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9978984796380012	WITHOUT_CLASSIFICATION	0.0021015203619989035	DESIGN
we found it	WITHOUT_CLASSIFICATION	0.9999067480322406	WITHOUT_CLASSIFICATION	9.32519677593806E-5	DESIGN
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9998087813896379	WITHOUT_CLASSIFICATION	1.9121861036199128E-4	DESIGN
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9945947498069118	WITHOUT_CLASSIFICATION	0.005405250193088187	DESIGN
note unlike all other loaders this one is not multithreaded or cacheable!!	WITHOUT_CLASSIFICATION	0.999303109144047	WITHOUT_CLASSIFICATION	6.968908559529974E-4	DESIGN
the user visible aliases which are unknown to the superclass these are not the actual "physical" sql aliases	WITHOUT_CLASSIFICATION	0.9999505642399479	WITHOUT_CLASSIFICATION	4.943576005200444E-5	DESIGN
root entity comes last	WITHOUT_CLASSIFICATION	0.9998506597333543	WITHOUT_CLASSIFICATION	1.493402666457794E-4	DESIGN
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9997049205948544	WITHOUT_CLASSIFICATION	2.950794051456283E-4	DESIGN
alias may be null early exit	WITHOUT_CLASSIFICATION	0.999220416958735	WITHOUT_CLASSIFICATION	7.795830412648754E-4	DESIGN
if it is a compound path	WITHOUT_CLASSIFICATION	0.9998607401674162	WITHOUT_CLASSIFICATION	1.3925983258379388E-4	DESIGN
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9991945128431089	WITHOUT_CLASSIFICATION	8.054871568911415E-4	DESIGN
if its the root criteria we are done	WITHOUT_CLASSIFICATION	0.999208000764512	WITHOUT_CLASSIFICATION	7.91999235487906E-4	DESIGN
otherwise recurse	WITHOUT_CLASSIFICATION	0.9999363186911961	WITHOUT_CLASSIFICATION	6.368130880387218E-5	DESIGN
the criteria instance	WITHOUT_CLASSIFICATION	0.9999456972317481	WITHOUT_CLASSIFICATION	5.43027682519876E-5	DESIGN
the entity name	WITHOUT_CLASSIFICATION	0.9999543204920146	WITHOUT_CLASSIFICATION	4.567950798529613E-5	DESIGN
not found in inner query try the outer query	WITHOUT_CLASSIFICATION	0.999934081438077	WITHOUT_CLASSIFICATION	6.591856192297942E-5	DESIGN
not found in inner query try the outer query	WITHOUT_CLASSIFICATION	0.999934081438077	WITHOUT_CLASSIFICATION	6.591856192297942E-5	DESIGN
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9985091499824567	WITHOUT_CLASSIFICATION	0.0014908500175433638	DESIGN
should never happen i think	WITHOUT_CLASSIFICATION	0.9980419692668284	WITHOUT_CLASSIFICATION	0.0019580307331716023	DESIGN
detect discriminator values	WITHOUT_CLASSIFICATION	0.9999712605481258	WITHOUT_CLASSIFICATION	2.8739451874247365E-5	DESIGN
convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9994144135649061	WITHOUT_CLASSIFICATION	5.855864350939106E-4	DESIGN
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.996322324268122	WITHOUT_CLASSIFICATION	0.003677675731878148	DESIGN
it does not refer to an alias of a projection look for a property	WITHOUT_CLASSIFICATION	0.9992545259912694	WITHOUT_CLASSIFICATION	7.454740087306861E-4	DESIGN
otherwise this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9972009452766635	WITHOUT_CLASSIFICATION	0.0027990547233364403	DESIGN
currently not cachable if autodiscover types is in effect (e.g. "select ")	WITHOUT_CLASSIFICATION	0.9996512323575123	WITHOUT_CLASSIFICATION	3.4876764248763595E-4	DESIGN
private final string[] sqlaliases private final string[] sqlaliassuffixes	WITHOUT_CLASSIFICATION	0.9987858620562222	WITHOUT_CLASSIFICATION	0.0012141379437778004	DESIGN
this is only needed (afaict) for resulttransformer processing	WITHOUT_CLASSIFICATION	0.9960708306888614	WITHOUT_CLASSIFICATION	0.003929169311138624	DESIGN
determine if the collection elements are entities	WITHOUT_CLASSIFICATION	0.9996003637696989	WITHOUT_CLASSIFICATION	3.996362303010567E-4	DESIGN
build an array with indices equal to the total number of actual returns in the result hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9998567169668953	WITHOUT_CLASSIFICATION	1.4328303310485506E-4	DESIGN
replace {.} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9985021562306118	WITHOUT_CLASSIFICATION	0.0014978437693882187	DESIGN
no additional open braces found in the string append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9998426061674068	WITHOUT_CLASSIFICATION	1.573938325932647E-4	DESIGN
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9998779166474298	WITHOUT_CLASSIFICATION	1.2208335257023816E-4	DESIGN
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9993197716011425	WITHOUT_CLASSIFICATION	6.802283988576092E-4	DESIGN
passing through anything we do not know to support jdbc escape sequences hb-898	WITHOUT_CLASSIFICATION	0.9979511455933753	WITHOUT_CLASSIFICATION	0.002048854406624821	DESIGN
passing through anything we do not know to support jdbc escape sequences hb-898	WITHOUT_CLASSIFICATION	0.9979511455933753	WITHOUT_CLASSIFICATION	0.002048854406624821	DESIGN
the current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9866588820518627	WITHOUT_CLASSIFICATION	0.013341117948137266	DESIGN
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9990556516921234	WITHOUT_CLASSIFICATION	9.44348307876701E-4	DESIGN
possibly handle something parameters for the query ?	WITHOUT_CLASSIFICATION	0.999124756345012	WITHOUT_CLASSIFICATION	8.752436549879862E-4	DESIGN
let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.998279889279495	WITHOUT_CLASSIFICATION	0.0017201107205050412	DESIGN
private final list persisters = new arraylist()	WITHOUT_CLASSIFICATION	0.9992249717618154	WITHOUT_CLASSIFICATION	7.750282381846219E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9996736783687447	WITHOUT_CLASSIFICATION	3.2632163125530575E-4	DESIGN
note early exit!	WITHOUT_CLASSIFICATION	0.9999635380297541	WITHOUT_CLASSIFICATION	3.646197024582169E-5	DESIGN
private final list scalartypes = new arraylist() private final list scalarcolumnaliases = new arraylist()	WITHOUT_CLASSIFICATION	0.9998307884905153	WITHOUT_CLASSIFICATION	1.692115094846201E-4	DESIGN
now process the returns	WITHOUT_CLASSIFICATION	0.9999955686666061	WITHOUT_CLASSIFICATION	4.4313333938614475E-6	DESIGN
private list collectionowneraliases = new arraylist() private list collectionaliases = new arraylist() private list collectionpersisters = new arraylist() private list collectionresults = new arraylist()	WITHOUT_CLASSIFICATION	0.9999615637754522	WITHOUT_CLASSIFICATION	3.843622454779017E-5	DESIGN
already been processed	WITHOUT_CLASSIFICATION	0.9998359223280685	WITHOUT_CLASSIFICATION	1.6407767193150127E-4	DESIGN
already been processed	WITHOUT_CLASSIFICATION	0.9998359223280685	WITHOUT_CLASSIFICATION	1.6407767193150127E-4	DESIGN
make sure the owner alias is known	WITHOUT_CLASSIFICATION	0.9997562491471728	WITHOUT_CLASSIFICATION	2.437508528272948E-4	DESIGN
first break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9502143387670019	WITHOUT_CLASSIFICATION	0.04978566123299819	DESIGN
scalarcolumnaliases.add( typereturn.getcolumnalias() ) scalartypes.add( typereturn.gettype() )	WITHOUT_CLASSIFICATION	0.9991653560730299	WITHOUT_CLASSIFICATION	8.346439269700429E-4	DESIGN
if this return's alias has not been processed yet do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9997819898113991	WITHOUT_CLASSIFICATION	2.180101886008734E-4	DESIGN
collectionowneraliases.add( owneralias )	WITHOUT_CLASSIFICATION	0.9991653560730299	WITHOUT_CLASSIFICATION	8.346439269700429E-4	DESIGN
for merging of versioned entities we consider the version having been changed only when 1) the two version values are different and 2) the target actually represents database state! this second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999965718756465	WITHOUT_CLASSIFICATION	3.4281243534798704E-6	DESIGN
this is the second pass through on a merge op so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9990564179403096	WITHOUT_CLASSIFICATION	9.43582059690299E-4	DESIGN
early exit	WITHOUT_CLASSIFICATION	0.9999504253123915	WITHOUT_CLASSIFICATION	4.957468760855415E-5	DESIGN
cascade-save to collections after the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999000498974168	WITHOUT_CLASSIFICATION	9.995010258332263E-5	DESIGN
initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9978018233594583	WITHOUT_CLASSIFICATION	0.002198176640541716	DESIGN
use the delegate.	WITHOUT_CLASSIFICATION	0.9999712797895092	WITHOUT_CLASSIFICATION	2.8720210490824484E-5	DESIGN
currently only the hibernate-supplied dbtimestamptype is supported here	WITHOUT_CLASSIFICATION	0.9993876016575057	WITHOUT_CLASSIFICATION	6.12398342494308E-4	DESIGN
this is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.996322708155119	WITHOUT_CLASSIFICATION	0.003677291844881067	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9996912793485269	WITHOUT_CLASSIFICATION	3.087206514731167E-4	DESIGN
not so sure this is even valid subtree. but if it was it'd represent two unrelated table references	WITHOUT_CLASSIFICATION	0.9997533275760457	WITHOUT_CLASSIFICATION	2.466724239542503E-4	DESIGN
(not (gt a b) ) => (le a b)	WITHOUT_CLASSIFICATION	0.9992364651113701	WITHOUT_CLASSIFICATION	7.635348886299389E-4	DESIGN
private type[] sqlresulttypes	WITHOUT_CLASSIFICATION	0.9999236272702713	WITHOUT_CLASSIFICATION	7.637272972869672E-5	DESIGN
include the discriminator and class-level where but not filters	WITHOUT_CLASSIFICATION	0.9999422266331384	WITHOUT_CLASSIFICATION	5.7773366861705305E-5	DESIGN
sqlresulttypes = selectclause.getsqlresulttypes()	WITHOUT_CLASSIFICATION	0.9999160254598517	WITHOUT_CLASSIFICATION	8.39745401482966E-5	DESIGN
by default	WITHOUT_CLASSIFICATION	0.9998830353817398	WITHOUT_CLASSIFICATION	1.1696461826017374E-4	DESIGN
this is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.998971356225716	WITHOUT_CLASSIFICATION	0.0010286437742840504	DESIGN
-- loader implementation --	WITHOUT_CLASSIFICATION	0.9998753685149525	WITHOUT_CLASSIFICATION	1.246314850475029E-4	DESIGN
-- loader overrides --	WITHOUT_CLASSIFICATION	0.9998832980094374	WITHOUT_CLASSIFICATION	1.167019905624991E-4	DESIGN
(not (is_null a b) ) => (is_not_null a b)	WITHOUT_CLASSIFICATION	0.9966296559589841	WITHOUT_CLASSIFICATION	0.003370344041015941	DESIGN
none because its the requested lock mode not the actual!	WITHOUT_CLASSIFICATION	0.9999664223384069	WITHOUT_CLASSIFICATION	3.357766159302094E-5	DESIGN
meant to handle dynamic instantiation queries	WITHOUT_CLASSIFICATION	0.9971097894519554	WITHOUT_CLASSIFICATION	0.002890210548044683	DESIGN
--- query translator methods ---	WITHOUT_CLASSIFICATION	0.999307913956809	WITHOUT_CLASSIFICATION	6.920860431909275E-4	DESIGN
-- implementation private methods --	WITHOUT_CLASSIFICATION	0.9995987782198988	WITHOUT_CLASSIFICATION	4.012217801012416E-4	DESIGN
deduplicate unique constraints sharing the same columns this is needed by hibernate annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9997134101451116	WITHOUT_CLASSIFICATION	2.8658985488837083E-4	DESIGN
try to find out the name of the primary key to create it as identity if the identitygenerator is used	WITHOUT_CLASSIFICATION	0.999557339421163	WITHOUT_CLASSIFICATION	4.4266057883698485E-4	DESIGN
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9822428231900863	WITHOUT_CLASSIFICATION	0.017757176809913774	DESIGN
prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999884885841903	WITHOUT_CLASSIFICATION	1.1511415809689368E-5	DESIGN
used also for generation of fk names!	WITHOUT_CLASSIFICATION	0.9988130026960528	WITHOUT_CLASSIFICATION	0.0011869973039472124	DESIGN
usually useless	WITHOUT_CLASSIFICATION	0.9999264568695646	WITHOUT_CLASSIFICATION	7.354313043533981E-5	DESIGN
added this caching as i noticed that gettype() is being called multiple times	WITHOUT_CLASSIFICATION	0.9947629168479496	WITHOUT_CLASSIFICATION	0.0052370831520503714	DESIGN
do not add unique constraint on db not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.999725571816483	WITHOUT_CLASSIFICATION	2.7442818351699924E-4	DESIGN
for backward compatibility disable this	WITHOUT_CLASSIFICATION	0.9987392712381457	WITHOUT_CLASSIFICATION	0.0012607287618542952	DESIGN
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9899978085027882	WITHOUT_CLASSIFICATION	0.010002191497211741	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9987002337185117	WITHOUT_CLASSIFICATION	0.0012997662814883493	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9987002337185117	WITHOUT_CLASSIFICATION	0.0012997662814883493	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999265864061317	WITHOUT_CLASSIFICATION	7.341359386814727E-5	DESIGN
primary key constraint	WITHOUT_CLASSIFICATION	0.9999518749170366	WITHOUT_CLASSIFICATION	4.8125082963366135E-5	DESIGN
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9998197105385852	WITHOUT_CLASSIFICATION	1.802894614149049E-4	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9999299427151714	WITHOUT_CLASSIFICATION	7.005728482850988E-5	DESIGN
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9993386896606847	WITHOUT_CLASSIFICATION	6.613103393152236E-4	DESIGN
an identifier mapper => getkey will be included in the getnonduplicatedpropertyiterator() and checked later so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9991917200588942	WITHOUT_CLASSIFICATION	8.082799411058646E-4	DESIGN
if the hibernate-mapping did not specify a schema/catalog use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping or as params they will already be initialized and will override the values set here (they are in identifiergeneratorproperties)	WITHOUT_CLASSIFICATION	0.998844297383458	WITHOUT_CLASSIFICATION	0.0011557026165419698	DESIGN
pass the entity-name if not a collection-id	WITHOUT_CLASSIFICATION	0.9999666128888102	WITHOUT_CLASSIFICATION	3.3387111189924954E-5	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999265864061317	WITHOUT_CLASSIFICATION	7.341359386814727E-5	DESIGN
primary key constraint	WITHOUT_CLASSIFICATION	0.9999518749170366	WITHOUT_CLASSIFICATION	4.8125082963366135E-5	DESIGN
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9984015410026379	WITHOUT_CLASSIFICATION	0.0015984589973620667	DESIGN
needed to satisfy keyvalue	WITHOUT_CLASSIFICATION	0.9997919172066311	WITHOUT_CLASSIFICATION	2.0808279336893704E-4	DESIGN
empty means no scoping	WITHOUT_CLASSIFICATION	0.999823609011465	WITHOUT_CLASSIFICATION	1.7639098853491965E-4	DESIGN
index should be last column listed	WITHOUT_CLASSIFICATION	0.9940039497627666	WITHOUT_CLASSIFICATION	0.005996050237233445	DESIGN
if it is a formula index use the element columns in the pk	WITHOUT_CLASSIFICATION	0.9992189747681444	WITHOUT_CLASSIFICATION	7.810252318556311E-4	DESIGN
don't create a unique key 'cos some databases don't like a uk on nullable columns	WITHOUT_CLASSIFICATION	0.9911100802709686	WITHOUT_CLASSIFICATION	0.008889919729031399	DESIGN
arraylist list = new arraylist()list.addall( getkey().getconstraintcolumns() )list.addall( getindex().getconstraintcolumns() )getcollectiontable().createuniquekey(list)	WITHOUT_CLASSIFICATION	0.9999380375650618	WITHOUT_CLASSIFICATION	6.196243493814781E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.9999288931457168	WITHOUT_CLASSIFICATION	7.110685428322792E-5	DESIGN
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9994227195192026	WITHOUT_CLASSIFICATION	5.77280480797412E-4	DESIGN
todo we could just return all false	WITHOUT_CLASSIFICATION	0.5626628660948895	WITHOUT_CLASSIFICATION	0.43733713390511064	DESIGN
the case of a foreign key to something other than the pk is handled in createpropertyrefconstraints	WITHOUT_CLASSIFICATION	0.9999293349782522	WITHOUT_CLASSIFICATION	7.066502174771003E-5	DESIGN
todo we could just return all false	WITHOUT_CLASSIFICATION	0.5626628660948895	WITHOUT_CLASSIFICATION	0.43733713390511064	DESIGN
if the property mapping consists of all formulas make it non-updateable	WITHOUT_CLASSIFICATION	0.9999473937015384	WITHOUT_CLASSIFICATION	5.26062984615741E-5	DESIGN
columnupdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9993451496271148	WITHOUT_CLASSIFICATION	6.548503728851689E-4	DESIGN
if the property mapping consists of all formulas make it insertable	WITHOUT_CLASSIFICATION	0.9999473937015384	WITHOUT_CLASSIFICATION	5.26062984615741E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996266726255438	WITHOUT_CLASSIFICATION	3.733273744562053E-4	DESIGN
expected type is intrinsic here	WITHOUT_CLASSIFICATION	0.9896283387948687	WITHOUT_CLASSIFICATION	0.0103716612051314	DESIGN
}	WITHOUT_CLASSIFICATION	0.9999288931457168	WITHOUT_CLASSIFICATION	7.110685428322792E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.9999288931457168	WITHOUT_CLASSIFICATION	7.110685428322792E-5	DESIGN
return memberpersister.getpropertytype(propertyname)	WITHOUT_CLASSIFICATION	0.9996204215232694	WITHOUT_CLASSIFICATION	3.7957847673053937E-4	DESIGN
return memberpersister.tocolumns(alias propertyname)	WITHOUT_CLASSIFICATION	0.9996210609142319	WITHOUT_CLASSIFICATION	3.789390857682141E-4	DESIGN
return memberpersister.gettype()	WITHOUT_CLASSIFICATION	0.9996204215232694	WITHOUT_CLASSIFICATION	3.7957847673053937E-4	DESIGN
&& !indexisformula	WITHOUT_CLASSIFICATION	0.999926903364324	WITHOUT_CLASSIFICATION	7.309663567601502E-5	DESIGN
return !isonetomany()	WITHOUT_CLASSIFICATION	0.9999142074887258	WITHOUT_CLASSIFICATION	8.579251127422173E-5	DESIGN
instanceof associationtype	WITHOUT_CLASSIFICATION	0.9998383588294592	WITHOUT_CLASSIFICATION	1.616411705408572E-4	DESIGN
we need to determine the best way to know that two joinables represent a single many-to-many	WITHOUT_CLASSIFICATION	0.9430737142162268	WITHOUT_CLASSIFICATION	0.05692628578377324	DESIGN
strip leading ''	WITHOUT_CLASSIFICATION	0.9999419178933568	WITHOUT_CLASSIFICATION	5.8082106643273765E-5	DESIGN
public boolean issubselectloadable()	WITHOUT_CLASSIFICATION	0.9996945210582246	WITHOUT_CLASSIFICATION	3.0547894177544634E-4	DESIGN
key	WITHOUT_CLASSIFICATION	0.9999365761104049	WITHOUT_CLASSIFICATION	6.342388959515078E-5	DESIGN
columns	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
sql statements	WITHOUT_CLASSIFICATION	0.999928750213965	WITHOUT_CLASSIFICATION	7.124978603494935E-5	DESIGN
extra information about the element type	WITHOUT_CLASSIFICATION	0.998188023024477	WITHOUT_CLASSIFICATION	0.0018119769755229977	DESIGN
types	WITHOUT_CLASSIFICATION	0.9999176392576802	WITHOUT_CLASSIFICATION	8.236074231977109E-5	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999265864061317	WITHOUT_CLASSIFICATION	7.341359386814727E-5	DESIGN
private final string unquotedidentifiercolumnname	WITHOUT_CLASSIFICATION	0.9984368236841666	WITHOUT_CLASSIFICATION	0.0015631763158333264	DESIGN
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9986350204033067	WITHOUT_CLASSIFICATION	0.0013649795966933014	DESIGN
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9992673900424214	WITHOUT_CLASSIFICATION	7.326099575787434E-4	DESIGN
nativesql collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9994237497419213	WITHOUT_CLASSIFICATION	5.762502580787703E-4	DESIGN
unquotedkeycolumnnames = stringhelper.unquote(keycolumnaliases)	WITHOUT_CLASSIFICATION	0.9999160254598517	WITHOUT_CLASSIFICATION	8.39745401482966E-5	DESIGN
element	WITHOUT_CLASSIFICATION	0.9999307126732643	WITHOUT_CLASSIFICATION	6.928732673573241E-5	DESIGN
nativesql collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9993705061735095	WITHOUT_CLASSIFICATION	6.294938264904632E-4	DESIGN
index and row select	WITHOUT_CLASSIFICATION	0.9999120762739593	WITHOUT_CLASSIFICATION	8.792372604066923E-5	DESIGN
nativesql collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9988973968909055	WITHOUT_CLASSIFICATION	0.0011026031090945235	DESIGN
unquotedidentifiercolumnname = identifiercolumnalias	WITHOUT_CLASSIFICATION	0.9999160254598517	WITHOUT_CLASSIFICATION	8.39745401482966E-5	DESIGN
unquotedidentifiercolumnname = null	WITHOUT_CLASSIFICATION	0.9998283642992364	WITHOUT_CLASSIFICATION	1.7163570076366192E-4	DESIGN
generate the sql	WITHOUT_CLASSIFICATION	0.999980356647588	WITHOUT_CLASSIFICATION	1.9643352412047384E-5	DESIGN
for non-arrays we don't need to know the element class elementtype.returnedclass()	WITHOUT_CLASSIFICATION	0.9986543899423596	WITHOUT_CLASSIFICATION	0.001345610057640392	DESIGN
not all classpersisters implement propertymapping!	WITHOUT_CLASSIFICATION	0.9991159064005343	WITHOUT_CLASSIFICATION	8.840935994656468E-4	DESIGN
handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9738046720277169	WITHOUT_CLASSIFICATION	0.026195327972283158	DESIGN
handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9591954548783267	WITHOUT_CLASSIFICATION	0.0408045451216734	DESIGN
if there is a user-specified loader return that todo filters!?	WITHOUT_CLASSIFICATION	0.729676920111161	DESIGN	0.270323079888839	WITHOUT_CLASSIFICATION
take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9972106489622972	WITHOUT_CLASSIFICATION	0.002789351037702772	DESIGN
strip leading ''	WITHOUT_CLASSIFICATION	0.9999419178933568	WITHOUT_CLASSIFICATION	5.8082106643273765E-5	DESIGN
run a subquery loader	WITHOUT_CLASSIFICATION	0.9998380451924361	WITHOUT_CLASSIFICATION	1.619548075639043E-4	DESIGN
needed by arrays	WITHOUT_CLASSIFICATION	0.9996831986897633	WITHOUT_CLASSIFICATION	3.168013102367659E-4	DESIGN
todo something with formulas	WITHOUT_CLASSIFICATION	0.9352433050021547	WITHOUT_CLASSIFICATION	0.0647566949978453	DESIGN
an assertion	WITHOUT_CLASSIFICATION	0.9999433526153665	WITHOUT_CLASSIFICATION	5.664738463357005E-5	DESIGN
remove all the old entries	WITHOUT_CLASSIFICATION	0.9999221830560626	WITHOUT_CLASSIFICATION	7.781694393728173E-5	DESIGN
create all the new entries	WITHOUT_CLASSIFICATION	0.9999770426186742	WITHOUT_CLASSIFICATION	2.2957381325828065E-5	DESIGN
&& !indexisformula	WITHOUT_CLASSIFICATION	0.999926903364324	WITHOUT_CLASSIFICATION	7.309663567601502E-5	DESIGN
&& !indexisformula	WITHOUT_CLASSIFICATION	0.999926903364324	WITHOUT_CLASSIFICATION	7.309663567601502E-5	DESIGN
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999876249839392	WITHOUT_CLASSIFICATION	1.2375016060644074E-5	DESIGN
insert all the new entries	WITHOUT_CLASSIFICATION	0.999982190655635	WITHOUT_CLASSIFICATION	1.7809344364926103E-5	DESIGN
==elementtype ??	WITHOUT_CLASSIFICATION	0.9998872341663086	WITHOUT_CLASSIFICATION	1.127658336913752E-4	DESIGN
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999963236546127	WITHOUT_CLASSIFICATION	3.6763453872207112E-6	DESIGN
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9997596927788861	WITHOUT_CLASSIFICATION	2.403072211138135E-4	DESIGN
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999171401728256	WITHOUT_CLASSIFICATION	8.285982717434715E-5	DESIGN
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9820613385820843	WITHOUT_CLASSIFICATION	0.017938661417915745	DESIGN
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999996250837935	WITHOUT_CLASSIFICATION	3.749162065666404E-7	DESIGN
buf.append( selectfragment( lhsalias "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9929503257752862	WITHOUT_CLASSIFICATION	0.007049674224713801	DESIGN
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9996608758468196	WITHOUT_CLASSIFICATION	3.3912415318031674E-4	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999728039701234	WITHOUT_CLASSIFICATION	2.7196029876539897E-5	DESIGN
private final string roottablename	WITHOUT_CLASSIFICATION	0.9984368236841666	WITHOUT_CLASSIFICATION	0.0015631763158333264	DESIGN
initialization	WITHOUT_CLASSIFICATION	0.9999774907738187	WITHOUT_CLASSIFICATION	2.2509226181278016E-5	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999265864061317	WITHOUT_CLASSIFICATION	7.341359386814727E-5	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999728039701234	WITHOUT_CLASSIFICATION	2.7196029876539897E-5	DESIGN
execute the sql	WITHOUT_CLASSIFICATION	0.9999816731361374	WITHOUT_CLASSIFICATION	1.832686386264188E-5	DESIGN
this could also just be true all the time	WITHOUT_CLASSIFICATION	0.9996525425811403	WITHOUT_CLASSIFICATION	3.474574188596783E-4	DESIGN
chop the last union (all)	WITHOUT_CLASSIFICATION	0.999954890599256	WITHOUT_CLASSIFICATION	4.510940074393527E-5	DESIGN
todo check this.	WITHOUT_CLASSIFICATION	0.9487789206880678	WITHOUT_CLASSIFICATION	0.05122107931193229	DESIGN
initialization	WITHOUT_CLASSIFICATION	0.9999774907738187	WITHOUT_CLASSIFICATION	2.2509226181278016E-5	DESIGN
properties of this class including inherited properties	WITHOUT_CLASSIFICATION	0.992548415811218	WITHOUT_CLASSIFICATION	0.0074515841887820185	DESIGN
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9975033172211547	WITHOUT_CLASSIFICATION	0.0024966827788451803	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9970784602063775	WITHOUT_CLASSIFICATION	0.0029215397936225847	DESIGN
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an sql case	WITHOUT_CLASSIFICATION	0.9999206121243828	WITHOUT_CLASSIFICATION	7.938787561718086E-5	DESIGN
multitables	WITHOUT_CLASSIFICATION	0.9999241018871162	WITHOUT_CLASSIFICATION	7.589811288385047E-5	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999265864061317	WITHOUT_CLASSIFICATION	7.341359386814727E-5	DESIGN
subclass closure properties	WITHOUT_CLASSIFICATION	0.9996325615023849	WITHOUT_CLASSIFICATION	3.674384976150198E-4	DESIGN
subclasses	WITHOUT_CLASSIFICATION	0.9998970881012177	WITHOUT_CLASSIFICATION	1.0291189878233681E-4	DESIGN
( (column) model.gettable().getprimarykey().getcolumniterator().next() ).getname()	WITHOUT_CLASSIFICATION	0.999429565748009	WITHOUT_CLASSIFICATION	5.704342519910507E-4	DESIGN
( (column) sc.gettable().getprimarykey().getcolumniterator().next() ).getname()	WITHOUT_CLASSIFICATION	0.999429565748009	WITHOUT_CLASSIFICATION	5.704342519910507E-4	DESIGN
don't need subclass tables because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9967280291336708	WITHOUT_CLASSIFICATION	0.00327197086632929	DESIGN
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999091397312759	WITHOUT_CLASSIFICATION	9.08602687240825E-5	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999728039701234	WITHOUT_CLASSIFICATION	2.7196029876539897E-5	DESIGN
properties of this class including inherited properties	WITHOUT_CLASSIFICATION	0.992548415811218	WITHOUT_CLASSIFICATION	0.0074515841887820185	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9970784602063775	WITHOUT_CLASSIFICATION	0.0029215397936225847	DESIGN
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999819934329999	WITHOUT_CLASSIFICATION	1.8006567000075638E-5	DESIGN
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999677057348894	WITHOUT_CLASSIFICATION	3.229426511064747E-5	DESIGN
discriminator column	WITHOUT_CLASSIFICATION	0.9998353186025799	WITHOUT_CLASSIFICATION	1.646813974201914E-4	DESIGN
initialization	WITHOUT_CLASSIFICATION	0.9999774907738187	WITHOUT_CLASSIFICATION	2.2509226181278016E-5	DESIGN
private final map propertytablenumbersbyname = new hashmap()	WITHOUT_CLASSIFICATION	0.9998709123117393	WITHOUT_CLASSIFICATION	1.2908768826068047E-4	DESIGN
class + table	WITHOUT_CLASSIFICATION	0.9999922803169936	WITHOUT_CLASSIFICATION	7.719683006406585E-6	DESIGN
discriminator	WITHOUT_CLASSIFICATION	0.9999241348078899	WITHOUT_CLASSIFICATION	7.58651921100135E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.999741305613005	WITHOUT_CLASSIFICATION	2.586943869949716E-4	DESIGN
subclasses	WITHOUT_CLASSIFICATION	0.9998970881012177	WITHOUT_CLASSIFICATION	1.0291189878233681E-4	DESIGN
execute the sql	WITHOUT_CLASSIFICATION	0.9999816731361374	WITHOUT_CLASSIFICATION	1.832686386264188E-5	DESIGN
joins	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
propertytablenumbersbyname.put( prop.getname() join )	WITHOUT_CLASSIFICATION	0.9993745186343518	WITHOUT_CLASSIFICATION	6.254813656482274E-4	DESIGN
access cached sql	WITHOUT_CLASSIFICATION	0.9999003735798148	WITHOUT_CLASSIFICATION	9.962642018518345E-5	DESIGN
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9962168690668385	WITHOUT_CLASSIFICATION	0.003783130933161528	DESIGN
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9991290928882662	WITHOUT_CLASSIFICATION	8.709071117337083E-4	DESIGN
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9991290928882662	WITHOUT_CLASSIFICATION	8.709071117337083E-4	DESIGN
render the sql	WITHOUT_CLASSIFICATION	0.9999772149072709	WITHOUT_CLASSIFICATION	2.278509272912225E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996266726255438	WITHOUT_CLASSIFICATION	3.733273744562053E-4	DESIGN
moved up from abstractentitypersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.988341325605022	WITHOUT_CLASSIFICATION	0.011658674394978027	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999411103560662	WITHOUT_CLASSIFICATION	5.888964393379308E-4	DESIGN
the optional sql string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9997532126549572	WITHOUT_CLASSIFICATION	2.467873450427479E-4	DESIGN
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.981931618238352	WITHOUT_CLASSIFICATION	0.018068381761648038	DESIGN
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9970615717621403	WITHOUT_CLASSIFICATION	0.0029384282378596745	DESIGN
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9990293510506609	WITHOUT_CLASSIFICATION	9.706489493390861E-4	DESIGN
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9997384596338201	WITHOUT_CLASSIFICATION	2.615403661799155E-4	DESIGN
sql strings	WITHOUT_CLASSIFICATION	0.9998054472734293	WITHOUT_CLASSIFICATION	1.9455272657064972E-4	DESIGN
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9993095146925693	WITHOUT_CLASSIFICATION	6.904853074306051E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.999741305613005	WITHOUT_CLASSIFICATION	2.586943869949716E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999411103560662	WITHOUT_CLASSIFICATION	5.888964393379308E-4	DESIGN
identifier	WITHOUT_CLASSIFICATION	0.9999161861831756	WITHOUT_CLASSIFICATION	8.381381682434246E-5	DESIGN
version	WITHOUT_CLASSIFICATION	0.9999306992400606	WITHOUT_CLASSIFICATION	6.930075993937687E-5	DESIGN
where string	WITHOUT_CLASSIFICATION	0.9999410737779224	WITHOUT_CLASSIFICATION	5.8926222077676884E-5	DESIGN
subclass property closure	WITHOUT_CLASSIFICATION	0.9999562333703805	WITHOUT_CLASSIFICATION	4.3766629619403916E-5	DESIGN
before add -)	WITHOUT_CLASSIFICATION	0.9999894909537821	WITHOUT_CLASSIFICATION	1.0509046217923639E-5	DESIGN
handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9995573302441525	WITHOUT_CLASSIFICATION	4.426697558474597E-4	DESIGN
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.999167760704684	WITHOUT_CLASSIFICATION	8.322392953159617E-4	DESIGN
note early exit here	WITHOUT_CLASSIFICATION	0.9999314529880714	WITHOUT_CLASSIFICATION	6.854701192857867E-5	DESIGN
object have been loaded with setreadonly(true) hhh-2236	WITHOUT_CLASSIFICATION	0.9997852486049998	WITHOUT_CLASSIFICATION	2.1475139500027858E-4	DESIGN
note this assumes something about how propertyselectfragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9998834954691248	WITHOUT_CLASSIFICATION	1.1650453087506919E-4	DESIGN
strip leading " "	WITHOUT_CLASSIFICATION	0.9999424118856339	WITHOUT_CLASSIFICATION	5.758811436618884E-5	DESIGN
if there is no resulting row return null	WITHOUT_CLASSIFICATION	0.9996358724950446	WITHOUT_CLASSIFICATION	3.641275049553729E-4	DESIGN
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999574447530757	WITHOUT_CLASSIFICATION	4.25552469242857E-5	DESIGN
null owner ok??	WITHOUT_CLASSIFICATION	0.999942348404378	WITHOUT_CLASSIFICATION	5.765159562192841E-5	DESIGN
null sql means that the only lazy properties are shared pk one-to-one associations which are handled differently in the type#nullsafeget code	WITHOUT_CLASSIFICATION	0.9867881434922645	WITHOUT_CLASSIFICATION	0.013211856507735617	DESIGN
create a new from node for the referenced class.	WITHOUT_CLASSIFICATION	0.9985982814838561	WITHOUT_CLASSIFICATION	0.001401718516143993	DESIGN
the difficulty here is exactly what do we update in order to force the version to be incremented in the db	WITHOUT_CLASSIFICATION	0.9885133286026258	WITHOUT_CLASSIFICATION	0.01148667139737429	DESIGN
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9989454704550585	WITHOUT_CLASSIFICATION	0.0010545295449415082	DESIGN
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9990252958170803	WITHOUT_CLASSIFICATION	9.747041829197637E-4	DESIGN
enable for hhh-440 which we don't like	WITHOUT_CLASSIFICATION	0.9983882272957519	WITHOUT_CLASSIFICATION	0.0016117727042480748	DESIGN
aliases	WITHOUT_CLASSIFICATION	0.9999179569602502	WITHOUT_CLASSIFICATION	8.20430397498081E-5	DESIGN
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.999292970182856	WITHOUT_CLASSIFICATION	7.070298171439447E-4	DESIGN
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9997975286321571	WITHOUT_CLASSIFICATION	2.024713678428919E-4	DESIGN
fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.999112911510286	WITHOUT_CLASSIFICATION	8.870884897140224E-4	DESIGN
embedded composite ids ( alias.idname1 alias.idname2 )	WITHOUT_CLASSIFICATION	0.998484963900514	WITHOUT_CLASSIFICATION	0.0015150360994860019	DESIGN
todo skip formulas?	WITHOUT_CLASSIFICATION	0.9256550693733583	WITHOUT_CLASSIFICATION	0.07434493062664171	DESIGN
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9971164262540676	WITHOUT_CLASSIFICATION	0.002883573745932424	DESIGN
do two passes for collection property-ref!	WITHOUT_CLASSIFICATION	0.9943116418575538	WITHOUT_CLASSIFICATION	0.005688358142446082	DESIGN
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9997823358755937	WITHOUT_CLASSIFICATION	2.1766412440626243E-4	DESIGN
todo eventually rowidname[j]	WITHOUT_CLASSIFICATION	0.7238628790087811	WITHOUT_CLASSIFICATION	0.2761371209912189	DESIGN
this is a property of the table which we are updating	WITHOUT_CLASSIFICATION	0.9992520530402174	WITHOUT_CLASSIFICATION	7.4794695978257E-4	DESIGN
special shortcut for id properties skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9985967886083149	WITHOUT_CLASSIFICATION	0.001403211391685143	DESIGN
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9987861119982419	WITHOUT_CLASSIFICATION	0.001213888001758148	DESIGN
nothing to do even if the operand is a parameter no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9180307331713035	WITHOUT_CLASSIFICATION	0.08196926682869647	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9975813875834776	WITHOUT_CLASSIFICATION	0.0024186124165223796	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9998404735359683	WITHOUT_CLASSIFICATION	1.5952646403165718E-4	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9999892332108389	WITHOUT_CLASSIFICATION	1.0766789161130605E-5	DESIGN
more specifically "? [op] datetime" 1) if the operator is minus the param needs to be of some datetime type 2) if the operator is plus the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9784885410851705	WITHOUT_CLASSIFICATION	0.021511458914829532	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9998404735359683	WITHOUT_CLASSIFICATION	1.5952646403165718E-4	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9975813875834776	WITHOUT_CLASSIFICATION	0.0024186124165223796	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9999892332108389	WITHOUT_CLASSIFICATION	1.0766789161130605E-5	DESIGN
add the primary key	WITHOUT_CLASSIFICATION	0.9999969983926305	WITHOUT_CLASSIFICATION	3.001607369481685E-6	DESIGN
delegate already handles pk columns	WITHOUT_CLASSIFICATION	0.9997963106447212	WITHOUT_CLASSIFICATION	2.0368935527872778E-4	DESIGN
we can't batch joined inserts especially not if it is an identity insert nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9997934448926734	WITHOUT_CLASSIFICATION	2.0655510732658057E-4	DESIGN
render the sql query	WITHOUT_CLASSIFICATION	0.9999786634492821	WITHOUT_CLASSIFICATION	2.1336550717880723E-5	DESIGN
write the values of fields onto the prepared statement - we must use the state at the time the insert was issued (cos of foreign key constraints). not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999377367582936	WITHOUT_CLASSIFICATION	6.226324170646381E-5	DESIGN
todo shouldnt inserts be expectations.none?	WITHOUT_CLASSIFICATION	0.6740167922565384	DESIGN	0.3259832077434615	WITHOUT_CLASSIFICATION
don't bother trying to update we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9993584306023913	WITHOUT_CLASSIFICATION	6.415693976087003E-4	DESIGN
if all fields are null we might need to delete existing row	WITHOUT_CLASSIFICATION	0.987773864274928	WITHOUT_CLASSIFICATION	0.012226135725072104	DESIGN
there is probably a row there so try to update if no rows were updated we will find out	WITHOUT_CLASSIFICATION	0.9998118337809594	WITHOUT_CLASSIFICATION	1.8816621904071195E-4	DESIGN
note updates to joined tables can't be batched	WITHOUT_CLASSIFICATION	0.9984522000653981	WITHOUT_CLASSIFICATION	0.0015477999346019758	DESIGN
starting index	WITHOUT_CLASSIFICATION	0.9998903069807353	WITHOUT_CLASSIFICATION	1.096930192646641E-4	DESIGN
now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999971423472812	WITHOUT_CLASSIFICATION	2.857652718855241E-6	DESIGN
write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9971064383817305	WITHOUT_CLASSIFICATION	0.002893561618269531	DESIGN
render the sql query	WITHOUT_CLASSIFICATION	0.9999786634492821	WITHOUT_CLASSIFICATION	2.1336550717880723E-5	DESIGN
do the key. the key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9996810263970957	WITHOUT_CLASSIFICATION	3.189736029043948E-4	DESIGN
we should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9998240994604705	WITHOUT_CLASSIFICATION	1.7590053952945092E-4	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9939379613138237	WITHOUT_CLASSIFICATION	0.006062038686176289	DESIGN
note dirtyfields==null means we had no snapshot and we couldn't get one using select-before-update oldfields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyfields)	WITHOUT_CLASSIFICATION	0.9990939982157736	WITHOUT_CLASSIFICATION	9.060017842262947E-4	DESIGN
more specifically "datetime [op] ?" 1) if the operator is minus we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is plus the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9969044734527231	WITHOUT_CLASSIFICATION	0.003095526547276913	DESIGN
for the case of dynamic-update="true" we need to generate the update sql	WITHOUT_CLASSIFICATION	0.9999570437846125	WITHOUT_CLASSIFICATION	4.295621538749687E-5	DESIGN
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9954233795492092	WITHOUT_CLASSIFICATION	0.004576620450790722	DESIGN
for the case of dynamic-update="false" or no snapshot we use the static sql	WITHOUT_CLASSIFICATION	0.9999737248135662	WITHOUT_CLASSIFICATION	2.6275186433867176E-5	DESIGN
if not "get" then try "is"	WITHOUT_CLASSIFICATION	0.9999415225253554	WITHOUT_CLASSIFICATION	5.847747464464596E-5	DESIGN
now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999864428998296	WITHOUT_CLASSIFICATION	1.3557100170354595E-5	DESIGN
for the case of dynamic-insert="true" we need to generate the insert sql	WITHOUT_CLASSIFICATION	0.9997345304147335	WITHOUT_CLASSIFICATION	2.654695852664756E-4	DESIGN
for the case of dynamic-insert="true" we need to generate the insert sql	WITHOUT_CLASSIFICATION	0.9997345304147335	WITHOUT_CLASSIFICATION	2.654695852664756E-4	DESIGN
for the case of dynamic-insert="false" use the static sql	WITHOUT_CLASSIFICATION	0.9999423978274085	WITHOUT_CLASSIFICATION	5.7602172591597076E-5	DESIGN
for the case of dynamic-insert="false" use the static sql	WITHOUT_CLASSIFICATION	0.9999423978274085	WITHOUT_CLASSIFICATION	5.7602172591597076E-5	DESIGN
not supported	WITHOUT_CLASSIFICATION	0.9999783844283161	WITHOUT_CLASSIFICATION	2.1615571683992055E-5	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9939379613138237	WITHOUT_CLASSIFICATION	0.006062038686176289	DESIGN
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9963535278795733	WITHOUT_CLASSIFICATION	0.003646472120426778	DESIGN
otherwise utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9998365885710446	WITHOUT_CLASSIFICATION	1.6341142895535366E-4	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9971243954972052	WITHOUT_CLASSIFICATION	0.0028756045027948226	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9971243954972052	WITHOUT_CLASSIFICATION	0.0028756045027948226	DESIGN
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999563357032939	WITHOUT_CLASSIFICATION	4.366429670614211E-5	DESIGN
notice that we skip the first table it is the driving table!	WITHOUT_CLASSIFICATION	0.999937040310928	WITHOUT_CLASSIFICATION	6.295968907201037E-5	DESIGN
we can inner join to superclass tables (the row must be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.995134451015234	WITHOUT_CLASSIFICATION	0.004865548984765962	DESIGN
skip the driving table	WITHOUT_CLASSIFICATION	0.9999939182720906	WITHOUT_CLASSIFICATION	6.081727909472477E-6	DESIGN
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9952760356047905	WITHOUT_CLASSIFICATION	0.004723964395209536	DESIGN
here we work under the following assumptions ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime always results in a double 3) datetime - {something other than datetime} always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999878515076052	WITHOUT_CLASSIFICATION	1.2148492394829945E-5	DESIGN
render the where and from parts	WITHOUT_CLASSIFICATION	0.9994645506766395	WITHOUT_CLASSIFICATION	5.35449323360524E-4	DESIGN
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9986846620848052	WITHOUT_CLASSIFICATION	0.001315337915194718	DESIGN
now render the joins	WITHOUT_CLASSIFICATION	0.9999942559609224	WITHOUT_CLASSIFICATION	5.744039077569783E-6	DESIGN
this will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9991944645267007	WITHOUT_CLASSIFICATION	8.055354732994408E-4	DESIGN
now render the select clause	WITHOUT_CLASSIFICATION	0.9999892264184082	WITHOUT_CLASSIFICATION	1.0773581591917612E-5	DESIGN
now tie it all together	WITHOUT_CLASSIFICATION	0.9999837545411194	WITHOUT_CLASSIFICATION	1.6245458880584302E-5	DESIGN
insert/update/delete sql	WITHOUT_CLASSIFICATION	0.999866875766015	WITHOUT_CLASSIFICATION	1.3312423398502407E-4	DESIGN
select sql	WITHOUT_CLASSIFICATION	0.9999082794561125	WITHOUT_CLASSIFICATION	9.172054388749083E-5	DESIGN
no need to check laziness dirty checking handles that	WITHOUT_CLASSIFICATION	0.9990336119385637	WITHOUT_CLASSIFICATION	9.663880614363699E-4	DESIGN
fully resolve the map reference create implicit joins.	WITHOUT_CLASSIFICATION	0.9999081776797626	WITHOUT_CLASSIFICATION	9.182232023742023E-5	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9787299256927505	WITHOUT_CLASSIFICATION	0.021270074307249556	DESIGN
the basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9998808874370106	WITHOUT_CLASSIFICATION	1.191125629893522E-4	DESIGN
for dialects which are known to not support ansi-sql row-value-constructor syntax we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9904219534625953	WITHOUT_CLASSIFICATION	0.00957804653740471	DESIGN
due to the complexity in initializing the selectclause do not generate one here. if it is not found simply return null also do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.994415096776138	WITHOUT_CLASSIFICATION	0.005584903223862068	DESIGN
check the version unsaved-value if appropriate	WITHOUT_CLASSIFICATION	0.9996992895176356	WITHOUT_CLASSIFICATION	3.007104823643814E-4	DESIGN
let this take precedence if defined since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9870514659564922	WITHOUT_CLASSIFICATION	0.012948534043507862	DESIGN
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999558535216132	WITHOUT_CLASSIFICATION	4.4146478386776014E-5	DESIGN
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.999531394588557	WITHOUT_CLASSIFICATION	4.686054114429857E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9999537285718064	WITHOUT_CLASSIFICATION	4.6271428193561E-5	DESIGN
for property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999506208674714	WITHOUT_CLASSIFICATION	4.93791325286776E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999411103560662	WITHOUT_CLASSIFICATION	5.888964393379308E-4	DESIGN
if there is no resulting row return null	WITHOUT_CLASSIFICATION	0.9996358724950446	WITHOUT_CLASSIFICATION	3.641275049553729E-4	DESIGN
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.99991468835313	WITHOUT_CLASSIFICATION	8.53116468700666E-5	DESIGN
if this from element is a collection and the path is a collection property (maxindex etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.997996004519603	WITHOUT_CLASSIFICATION	0.002003995480397016	DESIGN
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999411103560662	WITHOUT_CLASSIFICATION	5.888964393379308E-4	DESIGN
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994571098960188	WITHOUT_CLASSIFICATION	5.428901039812413E-4	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9999525853073602	WITHOUT_CLASSIFICATION	4.741469263977982E-5	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9999525853073602	WITHOUT_CLASSIFICATION	4.741469263977982E-5	DESIGN
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999146521051535	WITHOUT_CLASSIFICATION	8.534789484645198E-5	DESIGN
try "get"	WITHOUT_CLASSIFICATION	0.9999214597232529	WITHOUT_CLASSIFICATION	7.854027674716546E-5	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999927863356595	WITHOUT_CLASSIFICATION	7.213664340515147E-6	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999927863356595	WITHOUT_CLASSIFICATION	7.213664340515147E-6	DESIGN
should be safe to only ever expect entitypersister references here	WITHOUT_CLASSIFICATION	0.999464811554181	WITHOUT_CLASSIFICATION	5.351884458190838E-4	DESIGN
this page intentionally left blank )	WITHOUT_CLASSIFICATION	0.9967486360348131	WITHOUT_CLASSIFICATION	0.00325136396518682	DESIGN
do not do anything	WITHOUT_CLASSIFICATION	0.9999657127219407	WITHOUT_CLASSIFICATION	3.428727805936481E-5	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999297444246349	WITHOUT_CLASSIFICATION	7.025557536506883E-5	DESIGN
cant instantiate	WITHOUT_CLASSIFICATION	0.9998764348092306	WITHOUT_CLASSIFICATION	1.2356519076940005E-4	DESIGN
if it is a property of an embedded component invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9998764354455572	WITHOUT_CLASSIFICATION	1.2356455444279842E-4	DESIGN
otherwise	WITHOUT_CLASSIFICATION	0.9999269912924857	WITHOUT_CLASSIFICATION	7.300870751427154E-5	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999362991847471	WITHOUT_CLASSIFICATION	6.370081525284755E-5	DESIGN
note interfaces is assumed to already contain hibernateproxy.class	WITHOUT_CLASSIFICATION	0.999120870562852	WITHOUT_CLASSIFICATION	8.791294371478708E-4	DESIGN
note interfaces is assumed to already contain hibernateproxy.class	WITHOUT_CLASSIFICATION	0.999120870562852	WITHOUT_CLASSIFICATION	8.791294371478708E-4	DESIGN
hhh-2481 make sure the callback gets cleared otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9992214554424191	WITHOUT_CLASSIFICATION	7.785445575809574E-4	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9999864255101925	WITHOUT_CLASSIFICATION	1.3574489807545449E-5	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9999864255101925	WITHOUT_CLASSIFICATION	1.3574489807545449E-5	DESIGN
note interface is assumed to already contain hibernateproxy.class	WITHOUT_CLASSIFICATION	0.9990277175424869	WITHOUT_CLASSIFICATION	9.722824575130776E-4	DESIGN
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999656536077874	WITHOUT_CLASSIFICATION	3.434639221258046E-5	DESIGN
todo!	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
get the caller	WITHOUT_CLASSIFICATION	0.9999860780536591	WITHOUT_CLASSIFICATION	1.392194634093404E-5	DESIGN
get the caller principals	WITHOUT_CLASSIFICATION	0.9999755799586071	WITHOUT_CLASSIFICATION	2.4420041392922062E-5	DESIGN
private static final alias default_alias = new alias(10 null)	WITHOUT_CLASSIFICATION	0.9996653711648315	WITHOUT_CLASSIFICATION	3.3462883516858626E-4	DESIGN
needed to bump this up to dotnode because that is the only thing which currently knows about the property-ref path in the correct format it is either this or recurse over the dotnodes constructing the property path just like dotnode does internally	WITHOUT_CLASSIFICATION	0.9989466753986763	WITHOUT_CLASSIFICATION	0.0010533246013237833	DESIGN
if the identifier is quoted remove the quotes	WITHOUT_CLASSIFICATION	0.997333004020183	WITHOUT_CLASSIFICATION	0.0026669959798171212	DESIGN
truncate the identifier to the max alias length less the suffix length	WITHOUT_CLASSIFICATION	0.999670029169529	WITHOUT_CLASSIFICATION	3.2997083047093634E-4	DESIGN
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9989473108225096	WITHOUT_CLASSIFICATION	0.001052689177490329	DESIGN
null is not considered the same type as integer. $non-nls-1 $non-nls-1	WITHOUT_CLASSIFICATION	0.9988512369232934	WITHOUT_CLASSIFICATION	0.001148763076706631	DESIGN
the outerjoinsafterwhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9989063463823632	WITHOUT_CLASSIFICATION	0.0010936536176368084	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
$non-nls-1	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.999821203276076	WITHOUT_CLASSIFICATION	1.787967239239113E-4	DESIGN
if the condition is not already there	WITHOUT_CLASSIFICATION	0.9998874128363757	WITHOUT_CLASSIFICATION	1.1258716362429192E-4	DESIGN
dontspace.add("'")	WITHOUT_CLASSIFICATION	0.9999241018871162	WITHOUT_CLASSIFICATION	7.589811288385047E-5	DESIGN
for mysql	WITHOUT_CLASSIFICATION	0.9998651095957475	WITHOUT_CLASSIFICATION	1.3489040425258486E-4	DESIGN
hashmap columnsunique = new hashmap()	WITHOUT_CLASSIFICATION	0.9999112011731551	WITHOUT_CLASSIFICATION	8.879882684489056E-5	DESIGN
null caused some problems	WITHOUT_CLASSIFICATION	0.9995523228054609	WITHOUT_CLASSIFICATION	4.4767719453900595E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9996736783687447	WITHOUT_CLASSIFICATION	3.2632163125530575E-4	DESIGN
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.999604262650611	WITHOUT_CLASSIFICATION	3.957373493890068E-4	DESIGN
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9998293054949224	WITHOUT_CLASSIFICATION	1.706945050775897E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9996736783687447	WITHOUT_CLASSIFICATION	3.2632163125530575E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9996736783687447	WITHOUT_CLASSIFICATION	3.2632163125530575E-4	DESIGN
if true then execute db updates otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.999869912251578	WITHOUT_CLASSIFICATION	1.3008774842193185E-4	DESIGN
we only release the connection	WITHOUT_CLASSIFICATION	0.9999483283044308	WITHOUT_CLASSIFICATION	5.167169556923796E-5	DESIGN
deprecated option	WITHOUT_CLASSIFICATION	0.9996897156052553	WITHOUT_CLASSIFICATION	3.102843947446761E-4	DESIGN
if an exception occurs during flush user must call rollback()	WITHOUT_CLASSIFICATION	0.9998238139006157	WITHOUT_CLASSIFICATION	1.7618609938440806E-4	DESIGN
actually this last test is probably unnecessary since beforecompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9996314037937597	WITHOUT_CLASSIFICATION	3.6859620624029384E-4	DESIGN
this one only really needed for badly-behaved applications! (if the transactionmanager has a sychronization registered its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9935373587928088	WITHOUT_CLASSIFICATION	0.006462641207191161	DESIGN
create an dotnode ast for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999173298593841	WITHOUT_CLASSIFICATION	8.267014061583594E-5	DESIGN
if an exception occurs during flush user must call rollback()	WITHOUT_CLASSIFICATION	0.9998238139006157	WITHOUT_CLASSIFICATION	1.7618609938440806E-4	DESIGN
if we could not register a synchronization do the before/after completion callbacks ourself (but we need to let jdbccontext know that this is what we are going to do so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.5690155785750376	WITHOUT_CLASSIFICATION	0.43098442142496235	DESIGN
swallow it and continue to roll back jta transaction	WITHOUT_CLASSIFICATION	0.9995317435430479	WITHOUT_CLASSIFICATION	4.6825645695214215E-4	DESIGN
so the transaction is already rolled back by jta spec	WITHOUT_CLASSIFICATION	0.9998776485598946	WITHOUT_CLASSIFICATION	1.2235144010534635E-4	DESIGN
this method is a noop if there is a synchronization!	WITHOUT_CLASSIFICATION	0.993579581630334	WITHOUT_CLASSIFICATION	0.006420418369665969	DESIGN
two conditions where we need to transform this to a theta-join syntax 1) 'elem' is the "root from-element" in correlated subqueries 2) the dotnode.usethetastyleimplicitjoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9909499680985423	WITHOUT_CLASSIFICATION	0.00905003190145765	DESIGN
websphere however is not a sane jee/jta container	WITHOUT_CLASSIFICATION	0.997808531180722	WITHOUT_CLASSIFICATION	0.002191468819277986	DESIGN
for sane jee/jta containers the transaction itself functions as its identifier	WITHOUT_CLASSIFICATION	0.9999552679060657	WITHOUT_CLASSIFICATION	4.473209393421025E-5	DESIGN
swallow the transaction was finished	WITHOUT_CLASSIFICATION	0.999886977389746	WITHOUT_CLASSIFICATION	1.1302261025404466E-4	DESIGN
all aliastoentitymapresulttransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993391540008831	WITHOUT_CLASSIFICATION	6.608459991167727E-4	DESIGN
create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9993872473851428	WITHOUT_CLASSIFICATION	6.12752614857205E-4	DESIGN
all distinctrootentityresulttransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993391540008831	WITHOUT_CLASSIFICATION	6.608459991167727E-4	DESIGN
map of entitymode -> tuplizer	WITHOUT_CLASSIFICATION	0.9999812875618992	WITHOUT_CLASSIFICATION	1.8712438100861886E-5	DESIGN
this is a virtual id property	WITHOUT_CLASSIFICATION	0.99852567195665	WITHOUT_CLASSIFICATION	0.0014743280433501041	DESIGN
this one needed only for guessentitymode()	WITHOUT_CLASSIFICATION	0.9975962004229032	WITHOUT_CLASSIFICATION	0.0024037995770968	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999283737992312	WITHOUT_CLASSIFICATION	7.162620076881357E-5	DESIGN
todo move this to sf per hhh-3517 also see hhh-1907 and componentmetamodel	WITHOUT_CLASSIFICATION	0.9990007105453022	DESIGN	9.99289454697846E-4	WITHOUT_CLASSIFICATION
then the pojo tuplizer using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9995970641869462	WITHOUT_CLASSIFICATION	4.0293581305381014E-4	DESIGN
build the dynamic-map tuplizer	WITHOUT_CLASSIFICATION	0.9998869884223048	WITHOUT_CLASSIFICATION	1.1301157769514374E-4	DESIGN
then dom4j tuplizer if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9989078907872491	WITHOUT_CLASSIFICATION	0.0010921092127508967	DESIGN
build the dynamic-map tuplizer	WITHOUT_CLASSIFICATION	0.9998869884223048	WITHOUT_CLASSIFICATION	1.1301157769514374E-4	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999218818180208	WITHOUT_CLASSIFICATION	7.811818197920693E-5	DESIGN
found a ctor but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999421436851482	WITHOUT_CLASSIFICATION	5.785631485180655E-4	DESIGN
private final sessionfactoryimplementor sessionfactory	WITHOUT_CLASSIFICATION	0.9985138885197726	WITHOUT_CLASSIFICATION	0.001486111480227383	DESIGN
cached for efficiency	WITHOUT_CLASSIFICATION	0.9998352475309895	WITHOUT_CLASSIFICATION	1.6475246901052575E-4	DESIGN
public componentmetamodel(component component sessionfactoryimplementor sessionfactory) {	WITHOUT_CLASSIFICATION	0.9992367106114401	WITHOUT_CLASSIFICATION	7.632893885598466E-4	DESIGN
this.sessionfactory = sessionfactory	WITHOUT_CLASSIFICATION	0.9999160254598517	WITHOUT_CLASSIFICATION	8.39745401482966E-5	DESIGN
it was not embedded so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999766406860795	WITHOUT_CLASSIFICATION	2.3359313920446347E-5	DESIGN
then the pojo tuplizer using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9995970641869462	WITHOUT_CLASSIFICATION	4.0293581305381014E-4	DESIGN
then dom4j tuplizer if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9989078907872491	WITHOUT_CLASSIFICATION	0.0010921092127508967	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999218818180208	WITHOUT_CLASSIFICATION	7.811818197920693E-5	DESIGN
then handle any user-defined entity modes	WITHOUT_CLASSIFICATION	0.9989128121968214	WITHOUT_CLASSIFICATION	0.0010871878031786966	DESIGN
return currentid	WITHOUT_CLASSIFICATION	0.9999510881151428	WITHOUT_CLASSIFICATION	4.891188485718582E-5	DESIGN
reset the id	WITHOUT_CLASSIFICATION	0.9999679413095105	WITHOUT_CLASSIFICATION	3.205869048953583E-5	DESIGN
origin.adddestination( destination ) this was the cause of hhh-242 origin.settype( from_fragment ) set the parent node type so that the ast is properly formed. the destination node will have all the from text. the parent node is a collection join too (voodoo - see joinprocessor)	WITHOUT_CLASSIFICATION	0.9818228254033325	WITHOUT_CLASSIFICATION	0.018177174596667508	DESIGN
reset the version	WITHOUT_CLASSIFICATION	0.9999851236726811	WITHOUT_CLASSIFICATION	1.4876327318832613E-5	DESIGN
the default is to simply not lazy fetch properties for now	WITHOUT_CLASSIFICATION	0.9994754042900064	WITHOUT_CLASSIFICATION	5.245957099937042E-4	DESIGN
add the second join the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999737189557192	WITHOUT_CLASSIFICATION	2.6281044280838854E-5	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9787299256927505	WITHOUT_CLASSIFICATION	0.021270074307249556	DESIGN
found a ctor but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999421436851482	WITHOUT_CLASSIFICATION	5.785631485180655E-4	DESIGN
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9988897919725572	WITHOUT_CLASSIFICATION	0.0011102080274428498	DESIGN
return getfactory().getsettings().getbytecodeprovider().getproxyfactoryfactory().buildproxyfactory()	WITHOUT_CLASSIFICATION	0.9996204215232694	WITHOUT_CLASSIFICATION	3.7957847673053937E-4	DESIGN
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9981665064622053	WITHOUT_CLASSIFICATION	0.0018334935377946658	DESIGN
superclass entity-name	WITHOUT_CLASSIFICATION	0.9997828955402034	WITHOUT_CLASSIFICATION	2.171044597966008E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9787299256927505	WITHOUT_CLASSIFICATION	0.021270074307249556	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999411103560662	WITHOUT_CLASSIFICATION	5.888964393379308E-4	DESIGN
init the aliases after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999152381840204	WITHOUT_CLASSIFICATION	8.47618159795952E-5	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9787299256927505	WITHOUT_CLASSIFICATION	0.021270074307249556	DESIGN
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9966590767411887	WITHOUT_CLASSIFICATION	0.003340923258811375	DESIGN
get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9996750372239539	WITHOUT_CLASSIFICATION	3.2496277604611635E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999411103560662	WITHOUT_CLASSIFICATION	5.888964393379308E-4	DESIGN
note this affects the return value!	WITHOUT_CLASSIFICATION	0.9997114474101638	WITHOUT_CLASSIFICATION	2.885525898361039E-4	DESIGN
need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9983106678007531	WITHOUT_CLASSIFICATION	0.0016893321992469655	DESIGN
add the type to the list of returned sqlresulttypes.	WITHOUT_CLASSIFICATION	0.9999084457464971	WITHOUT_CLASSIFICATION	9.155425350283889E-5	DESIGN
collection types	WITHOUT_CLASSIFICATION	0.9997768901456282	WITHOUT_CLASSIFICATION	2.2310985437186718E-4	DESIGN
convenience methods relating to operations across arrays of types	WITHOUT_CLASSIFICATION	0.9972530129849911	WITHOUT_CLASSIFICATION	0.0027469870150088004	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998882035954115	WITHOUT_CLASSIFICATION	1.1179640458854928E-4	DESIGN
blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9996404854508132	WITHOUT_CLASSIFICATION	3.5951454918670784E-4	DESIGN
value is the entity name	WITHOUT_CLASSIFICATION	0.9998744081544568	WITHOUT_CLASSIFICATION	1.2559184554327473E-4	DESIGN
early exit!	WITHOUT_CLASSIFICATION	0.9999429332197395	WITHOUT_CLASSIFICATION	5.7066780260468465E-5	DESIGN
generate id select fragment and then property select fragment for each expression just like generateselectfragments().	WITHOUT_CLASSIFICATION	0.9997668909952286	WITHOUT_CLASSIFICATION	2.3310900477144486E-4	DESIGN
todo!	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
xml is the entity name	WITHOUT_CLASSIFICATION	0.9997836606061382	WITHOUT_CLASSIFICATION	2.1633939386172653E-4	DESIGN
special case this is the leaf of the containment graph even though not immutable	WITHOUT_CLASSIFICATION	0.9999414312050747	WITHOUT_CLASSIFICATION	5.856879492534481E-5	DESIGN
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999392974432861	WITHOUT_CLASSIFICATION	6.070255671384707E-5	DESIGN
sqlresulttypelist	WITHOUT_CLASSIFICATION	0.9999241018871162	WITHOUT_CLASSIFICATION	7.589811288385047E-5	DESIGN
metatype is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.997507983065854	WITHOUT_CLASSIFICATION	0.002492016934146099	DESIGN
get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999065180405685	WITHOUT_CLASSIFICATION	9.348195943149788E-5	DESIGN
look through the fromelement's children to find any collections of values that should be fetched	WITHOUT_CLASSIFICATION	0.9998915256417482	WITHOUT_CLASSIFICATION	1.0847435825177406E-4	DESIGN
return associationtype.foreign_key_to_parent this is better but causes a transient object exception	WITHOUT_CLASSIFICATION	0.9773607734042491	WITHOUT_CLASSIFICATION	0.022639226595750857	DESIGN
use the lower case function name. remember whether we're in a select clause or not.	WITHOUT_CLASSIFICATION	0.9999668267522535	WITHOUT_CLASSIFICATION	3.3173247746529837E-5	DESIGN
ident might be the name of a class.	WITHOUT_CLASSIFICATION	0.9958043551792484	WITHOUT_CLASSIFICATION	0.004195644820751653	DESIGN
todo!!!	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
st.settimestamp( index new timestamp( cal.gettimeinmillis() ) cal ) jdk 1.5 only	WITHOUT_CLASSIFICATION	0.9986475654884085	WITHOUT_CLASSIFICATION	0.0013524345115914832	DESIGN
st.setdate( index new date( cal.gettimeinmillis() ) cal ) jdk 1.5 only	WITHOUT_CLASSIFICATION	0.9986475654884085	WITHOUT_CLASSIFICATION	0.0013524345115914832	DESIGN
both are timestamps	WITHOUT_CLASSIFICATION	0.9997533195585279	WITHOUT_CLASSIFICATION	2.4668044147208495E-4	DESIGN
at least one is a plain old date	WITHOUT_CLASSIFICATION	0.9989534626167322	WITHOUT_CLASSIFICATION	0.001046537383267798	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999170649405604	WITHOUT_CLASSIFICATION	8.293505943957088E-5	DESIGN
if the corresponding sql value is null the reader we got is null as well	WITHOUT_CLASSIFICATION	0.9999530210532048	WITHOUT_CLASSIFICATION	4.6978946795127694E-5	DESIGN
fetch reader content up to the end - and put characters in a stringbuffer	WITHOUT_CLASSIFICATION	0.9950185660506481	WITHOUT_CLASSIFICATION	0.004981433949351991	DESIGN
return stringbuffer content as a large string	WITHOUT_CLASSIFICATION	0.999855463375362	WITHOUT_CLASSIFICATION	1.4453662463808113E-4	DESIGN
or types.longvarchar?	WITHOUT_CLASSIFICATION	0.9999253928834506	WITHOUT_CLASSIFICATION	7.460711654939892E-5	DESIGN
not called at runtime so doesn't matter if its slow )	WITHOUT_CLASSIFICATION	0.9999686810375881	WITHOUT_CLASSIFICATION	3.131896241193188E-5	DESIGN
todo	WITHOUT_CLASSIFICATION	0.8072777110381393	WITHOUT_CLASSIFICATION	0.19272228896186072	DESIGN
chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999799060083236	WITHOUT_CLASSIFICATION	2.0093991676245934E-5	DESIGN
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9989879690697895	WITHOUT_CLASSIFICATION	0.001012030930210506	DESIGN
cache this	WITHOUT_CLASSIFICATION	0.9996515739509843	WITHOUT_CLASSIFICATION	3.4842604901573677E-4	DESIGN
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9993879871408947	WITHOUT_CLASSIFICATION	6.120128591051802E-4	DESIGN
forcefully remove leading ands from where fragments the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9973284717583608	WITHOUT_CLASSIFICATION	0.0026715282416392354	DESIGN
todo!!!!!!!	WITHOUT_CLASSIFICATION	0.9999241018871162	WITHOUT_CLASSIFICATION	7.589811288385047E-5	DESIGN
create a new filters node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9998967252802445	WITHOUT_CLASSIFICATION	1.0327471975550945E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999411103560662	WITHOUT_CLASSIFICATION	5.888964393379308E-4	DESIGN
public object instantiate(object parent sessionimplementor session) throws hibernateexception	WITHOUT_CLASSIFICATION	0.9996962529982646	WITHOUT_CLASSIFICATION	3.0374700173537003E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999882884426534	WITHOUT_CLASSIFICATION	1.1711557346555193E-5	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999882884426534	WITHOUT_CLASSIFICATION	1.1711557346555193E-5	DESIGN
versiontype impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ note simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the timestamp datatype supported by sybase and sql server which are completely db-generated values	WITHOUT_CLASSIFICATION	0.9999452683609074	WITHOUT_CLASSIFICATION	5.47316390927526E-5	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998882035954115	WITHOUT_CLASSIFICATION	1.1179640458854928E-4	DESIGN
not really necessary i guess	WITHOUT_CLASSIFICATION	0.9968709104808571	WITHOUT_CLASSIFICATION	0.0031290895191428657	DESIGN
clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9994983839978256	WITHOUT_CLASSIFICATION	5.016160021743257E-4	DESIGN
we do not have to worry about queued additions to uninitialized collections since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9977684091668887	WITHOUT_CLASSIFICATION	0.0022315908331112487	DESIGN
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9998969413054228	WITHOUT_CLASSIFICATION	1.030586945770887E-4	DESIGN
remember the uk value	WITHOUT_CLASSIFICATION	0.9999759121525771	WITHOUT_CLASSIFICATION	2.40878474229283E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999170649405604	WITHOUT_CLASSIFICATION	8.293505943957088E-5	DESIGN
processcollectionproperty(token q.getcollectionpersister(collectionrole) collectionname)	WITHOUT_CLASSIFICATION	0.999411103560662	WITHOUT_CLASSIFICATION	5.888964393379308E-4	DESIGN
we must use the "remembered" uk value since it is not available from the entityentry during assembly	WITHOUT_CLASSIFICATION	0.9991299080521603	WITHOUT_CLASSIFICATION	8.700919478397072E-4	DESIGN
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9993268816958194	WITHOUT_CLASSIFICATION	6.731183041806372E-4	DESIGN
return false	WITHOUT_CLASSIFICATION	0.9999586025688307	WITHOUT_CLASSIFICATION	4.1397431169264473E-5	DESIGN
this just handles a particular case of component projection perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9978928962131075	WITHOUT_CLASSIFICATION	0.002107103786892584	DESIGN
note we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999468610620114	WITHOUT_CLASSIFICATION	5.313893798862054E-5	DESIGN
the key is the owning entity itself so get the id from the key	WITHOUT_CLASSIFICATION	0.9993527800664375	WITHOUT_CLASSIFICATION	6.47219933562431E-4	DESIGN
if the original is a persistentcollection and that original was not flagged as dirty then reset the target's dirty flag here after the copy operation. </p> one thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know	WITHOUT_CLASSIFICATION	0.9999999616993452	WITHOUT_CLASSIFICATION	3.830065475625493E-8	DESIGN
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9998904782919814	WITHOUT_CLASSIFICATION	1.0952170801863863E-4	DESIGN
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.999921023502671	WITHOUT_CLASSIFICATION	7.89764973290328E-5	DESIGN
for a null target or a target which is the same as the original we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9998250523059907	WITHOUT_CLASSIFICATION	1.749476940093426E-4	DESIGN
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here	WITHOUT_CLASSIFICATION	0.9989046652254822	WITHOUT_CLASSIFICATION	0.0010953347745177562	DESIGN
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.999964343501477	WITHOUT_CLASSIFICATION	3.565649852302403E-5	DESIGN
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9976875440444971	WITHOUT_CLASSIFICATION	0.002312455955502823	DESIGN
check if it is already completely loaded but unowned	WITHOUT_CLASSIFICATION	0.9995122193053526	WITHOUT_CLASSIFICATION	4.877806946473847E-4	DESIGN
cache the actual id of the object not the value of the property-ref which might not be initialized	WITHOUT_CLASSIFICATION	0.9996494265642915	WITHOUT_CLASSIFICATION	3.505734357085631E-4	DESIGN
todo!!!!!!!	WITHOUT_CLASSIFICATION	0.9999241018871162	WITHOUT_CLASSIFICATION	7.589811288385047E-5	DESIGN
create a new collection wrapper to be initialized later	WITHOUT_CLASSIFICATION	0.9968233756788548	WITHOUT_CLASSIFICATION	0.0031766243211451438	DESIGN
some jdbc drivers erroneously return an empty array here for a null db value /	WITHOUT_CLASSIFICATION	0.9977337783851445	WITHOUT_CLASSIFICATION	0.0022662216148554427	DESIGN
our column span is the number of columns in the pk	WITHOUT_CLASSIFICATION	0.9992702985563713	WITHOUT_CLASSIFICATION	7.297014436286725E-4	DESIGN
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.998230670510659	WITHOUT_CLASSIFICATION	0.0017693294893410345	DESIGN
we already know current is not null	WITHOUT_CLASSIFICATION	0.9973450189489741	WITHOUT_CLASSIFICATION	0.0026549810510260114	DESIGN
the ids are fully resolved so compare them with isdirty() not ismodified()	WITHOUT_CLASSIFICATION	0.999829973389268	WITHOUT_CLASSIFICATION	1.7002661073198635E-4	DESIGN
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9998551680594269	WITHOUT_CLASSIFICATION	1.4483194057314457E-4	DESIGN
----------------------------------------------------------- constructors	WITHOUT_CLASSIFICATION	0.9991411005555025	WITHOUT_CLASSIFICATION	8.588994444974395E-4	DESIGN
----------------------------------------------------- instance variables	WITHOUT_CLASSIFICATION	0.9985356156990375	WITHOUT_CLASSIFICATION	0.0014643843009625327	DESIGN
public static jdbcexception newjdbcexception(string string sqlexception root string sql) { string = string + " [" + sql + ']' log.error(string root) logexceptions(root) return new jdbcexception(string root sql) } public static jdbcexception newjdbcexception(string string sqlexception root) { log.error(string root) logexceptions(root) return new jdbcexception(string root) }	WITHOUT_CLASSIFICATION	0.9999596211565269	WITHOUT_CLASSIFICATION	4.037884347310693E-5	DESIGN
--------------------------------------------------------- public methods	WITHOUT_CLASSIFICATION	0.9987529314006578	WITHOUT_CLASSIFICATION	0.0012470685993421317	DESIGN
compare the two maps for equality	WITHOUT_CLASSIFICATION	0.999489026160407	WITHOUT_CLASSIFICATION	5.109738395929758E-4	DESIGN
simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9998795675489314	WITHOUT_CLASSIFICATION	1.2043245106864088E-4	DESIGN
sybase fail if we don't do that sigh	WITHOUT_CLASSIFICATION	0.9980499515772718	WITHOUT_CLASSIFICATION	0.001950048422728187	DESIGN
handles things like a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a b c ) (overloaded brackets) not not a a is not null (overloaded "not") etc and expressions like foo = bar (maps to foo.id = bar.id) foo.bar = 'foo' (maps to foo.bar = 'foo') foo.bar.baz = 1.0 (maps to foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.bar.baz (maps to bar.baz = 1.0 and foo.bar = bar.id) foo.bar.baz = a.b.c (maps to bar.baz = b.c and foo.bar = bar.id and a.b = b.id) foo.bar.baz + a.b.c (maps to bar.baz + b.c and foo.bar = bar.id and a.b = b.id) ( foo.bar.baz + 1.0 ) < 2.0 (maps to ( bar.baz + 1.0 ) < 2.0 and foo.bar = bar.id)	WITHOUT_CLASSIFICATION	0.9995391415021755	WITHOUT_CLASSIFICATION	4.6085849782453363E-4	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9927991636054952	WITHOUT_CLASSIFICATION	0.007200836394504761	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9927991636054952	WITHOUT_CLASSIFICATION	0.007200836394504761	DESIGN
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.999776995426235	WITHOUT_CLASSIFICATION	2.2300457376492227E-4	DESIGN
otherwise just dump it	WITHOUT_CLASSIFICATION	0.9998958404172924	WITHOUT_CLASSIFICATION	1.0415958270758508E-4	DESIGN
its an interface so we can't really tell anything	WITHOUT_CLASSIFICATION	0.9999585649388093	WITHOUT_CLASSIFICATION	4.1435061190730474E-5	DESIGN
its an interface so we can't really tell anything	WITHOUT_CLASSIFICATION	0.9999585649388093	WITHOUT_CLASSIFICATION	4.1435061190730474E-5	DESIGN
use default behavior	WITHOUT_CLASSIFICATION	0.9998607605007122	WITHOUT_CLASSIFICATION	1.3923949928782415E-4	DESIGN
note early return	WITHOUT_CLASSIFICATION	0.9999736946036508	WITHOUT_CLASSIFICATION	2.6305396349145466E-5	DESIGN
the mru cache used to keep hard references to the most recently used query plans note lru here is a bit of a misnomer it indicates that lru entries are removed the actual kept entries are the mru entries	WITHOUT_CLASSIFICATION	0.9978407429879809	WITHOUT_CLASSIFICATION	0.0021592570120190844	DESIGN
we want to be able to just use the defaults if jndi environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9992782140510534	WITHOUT_CLASSIFICATION	7.217859489466626E-4	DESIGN
clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999386828545257	WITHOUT_CLASSIFICATION	6.131714547426897E-5	DESIGN
serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9994117957892721	WITHOUT_CLASSIFICATION	5.88204210727959E-4	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999960396901004	WITHOUT_CLASSIFICATION	3.960309899602055E-6	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999960396901004	WITHOUT_CLASSIFICATION	3.960309899602055E-6	DESIGN
deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999411103560662	WITHOUT_CLASSIFICATION	5.888964393379308E-4	DESIGN
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9972679607086183	WITHOUT_CLASSIFICATION	0.0027320392913816847	DESIGN
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.999926903364324	WITHOUT_CLASSIFICATION	7.309663567601502E-5	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9999242606326064	WITHOUT_CLASSIFICATION	7.573936739360165E-5	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9999242606326064	WITHOUT_CLASSIFICATION	7.573936739360165E-5	DESIGN
includes last '.'	WITHOUT_CLASSIFICATION	0.9999629034948924	WITHOUT_CLASSIFICATION	3.7096505107624996E-5	DESIGN
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999592565550753	WITHOUT_CLASSIFICATION	4.074344492469967E-5	DESIGN
impl note takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method	WITHOUT_CLASSIFICATION	0.9986781522741068	WITHOUT_CLASSIFICATION	0.0013218477258930554	DESIGN
first time we find match!	WITHOUT_CLASSIFICATION	0.9999005635712054	WITHOUT_CLASSIFICATION	9.943642879464316E-5	DESIGN
entitynames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999462665062043	WITHOUT_CLASSIFICATION	5.373349379569466E-5	DESIGN
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999264014900755	WITHOUT_CLASSIFICATION	7.359850992447001E-5	DESIGN
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9995965088159698	WITHOUT_CLASSIFICATION	4.034911840301498E-4	DESIGN
the current iterator	WITHOUT_CLASSIFICATION	0.9999354402670878	WITHOUT_CLASSIFICATION	6.455973291212163E-5	DESIGN
the last used iterator	WITHOUT_CLASSIFICATION	0.9998949721020883	WITHOUT_CLASSIFICATION	1.0502789791173499E-4	DESIGN
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999534756382514	WITHOUT_CLASSIFICATION	4.652436174863782E-5	DESIGN
public static object[] clone(class elementclass object[] array) {object[] result = (object[]) array.newinstance( elementclass array.length )system.arraycopy(array 0 result 0 array.length)return result}	WITHOUT_CLASSIFICATION	0.9999211972292532	WITHOUT_CLASSIFICATION	7.880277074679645E-5	DESIGN
call this before any iterator method to make sure that the current iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9933036210514895	WITHOUT_CLASSIFICATION	0.006696378948510545	DESIGN
doable if needed	WITHOUT_CLASSIFICATION	0.9999541481611783	WITHOUT_CLASSIFICATION	4.585183882171256E-5	DESIGN
set last used iterator here in case the user calls remove before calling hasnext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9925605008579097	WITHOUT_CLASSIFICATION	0.00743949914209039	DESIGN
peek ahead	WITHOUT_CLASSIFICATION	0.9999199063150725	WITHOUT_CLASSIFICATION	8.009368492742964E-5	DESIGN
if we reach the end of the string w/o finding the matching end that is an exception	WITHOUT_CLASSIFICATION	0.9991003948195352	WITHOUT_CLASSIFICATION	8.996051804648892E-4	DESIGN
we have a placeholder spin forward till we find the end	WITHOUT_CLASSIFICATION	0.997331315876645	WITHOUT_CLASSIFICATION	0.002668684123354988	DESIGN
make sure spinning forward did not put us past the end of the buffer	WITHOUT_CLASSIFICATION	0.9995912048610717	WITHOUT_CLASSIFICATION	4.0879513892826857E-4	DESIGN
first try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9962295938244851	WITHOUT_CLASSIFICATION	0.0037704061755148895	DESIGN
next try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9953574709249075	WITHOUT_CLASSIFICATION	0.004642529075092573	DESIGN
next try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9989654853014469	WITHOUT_CLASSIFICATION	0.0010345146985531247	DESIGN
anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999019505427206	WITHOUT_CLASSIFICATION	9.804945727935317E-5	DESIGN
would need an identityset for this!	WITHOUT_CLASSIFICATION	0.9838683958228385	WITHOUT_CLASSIFICATION	0.016131604177161564	DESIGN
arrays.aslist doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9997078951981659	WITHOUT_CLASSIFICATION	2.921048018339832E-4	DESIGN
faster?	WITHOUT_CLASSIFICATION	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
the name of a class	WITHOUT_CLASSIFICATION	0.9999574956297191	WITHOUT_CLASSIFICATION	4.2504370280844904E-5	DESIGN
its the listener class name	WITHOUT_CLASSIFICATION	0.9999532233947389	WITHOUT_CLASSIFICATION	4.6776605261092196E-5	DESIGN
allow 987654321	WITHOUT_CLASSIFICATION	0.9998949202918501	WITHOUT_CLASSIFICATION	1.0507970814995835E-4	DESIGN
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9995539634815352	WITHOUT_CLASSIFICATION	4.4603651846464375E-4	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9998963183641353	WITHOUT_CLASSIFICATION	1.0368163586462715E-4	DESIGN
in case we were deserialized in a different jvm look for an instance with the same name (alternatively we could do an actual jndi lookup here.)	WITHOUT_CLASSIFICATION	0.999726148625283	WITHOUT_CLASSIFICATION	2.738513747171015E-4	DESIGN
first lets determine whether to apply cglib or javassist based instrumentation	WITHOUT_CLASSIFICATION	0.995202942187901	WITHOUT_CLASSIFICATION	0.004797057812099047	DESIGN
make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9979318756771024	WITHOUT_CLASSIFICATION	0.0020681243228975917	DESIGN
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999009148617316	WITHOUT_CLASSIFICATION	9.908513826843482E-5	DESIGN
its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9977913625891458	WITHOUT_CLASSIFICATION	0.0022086374108541418	DESIGN
context.unbind(boundname)	WITHOUT_CLASSIFICATION	0.999866875766015	WITHOUT_CLASSIFICATION	1.3312423398502407E-4	DESIGN
readresolveobject	WITHOUT_CLASSIFICATION	0.9999241018871162	WITHOUT_CLASSIFICATION	7.589811288385047E-5	DESIGN
cfg.setproperty("hibernate.show_sql" "true")	WITHOUT_CLASSIFICATION	0.999411103560662	WITHOUT_CLASSIFICATION	5.888964393379308E-4	DESIGN
defensive convenience methods	WITHOUT_CLASSIFICATION	0.9998246781570995	WITHOUT_CLASSIFICATION	1.7532184290044707E-4	DESIGN
create the sessionfactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9993873484684842	WITHOUT_CLASSIFICATION	6.126515315158273E-4	DESIGN
make sure you log the exception as it might be swallowed	WITHOUT_CLASSIFICATION	0.999912037615436	WITHOUT_CLASSIFICATION	8.796238456396147E-5	DESIGN
begin unit of work	WITHOUT_CLASSIFICATION	0.9998700788892091	WITHOUT_CLASSIFICATION	1.2992111079096537E-4	DESIGN
write html header	WITHOUT_CLASSIFICATION	0.9999745752548193	WITHOUT_CLASSIFICATION	2.5424745180821836E-5	DESIGN
handle actions	WITHOUT_CLASSIFICATION	0.9996121948198269	WITHOUT_CLASSIFICATION	3.8780518017312443E-4	DESIGN
print page	WITHOUT_CLASSIFICATION	0.999875502296416	WITHOUT_CLASSIFICATION	1.2449770358409045E-4	DESIGN
write html footer	WITHOUT_CLASSIFICATION	0.9999433947231914	WITHOUT_CLASSIFICATION	5.660527680859241E-5	DESIGN
end unit of work	WITHOUT_CLASSIFICATION	0.9994272773554889	WITHOUT_CLASSIFICATION	5.727226445111253E-4	DESIGN
start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9969071134384297	WITHOUT_CLASSIFICATION	0.003092886561570339	DESIGN
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9990318916060797	WITHOUT_CLASSIFICATION	9.681083939203015E-4	DESIGN
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999676982079599	WITHOUT_CLASSIFICATION	3.230179204007719E-5	DESIGN
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9849526674960071	WITHOUT_CLASSIFICATION	0.015047332503992783	DESIGN
eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9993194159711168	WITHOUT_CLASSIFICATION	6.805840288831196E-4	DESIGN
if we want to handle it bidirectional and detached we also need to load this collection with an eager outer-join fetch this time with criteria and not hql	WITHOUT_CLASSIFICATION	0.9127739976583417	WITHOUT_CLASSIFICATION	0.08722600234165832	DESIGN
event anevent = (event) session .createcriteria(event.class).setfetchmode("participants" fetchmode.join) .add( expression.eq("id" eventid) ) .uniqueresult() eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999506387069322	WITHOUT_CLASSIFICATION	4.936129306773756E-5	DESIGN
end of first unit of work	WITHOUT_CLASSIFICATION	0.99938797312282	WITHOUT_CLASSIFICATION	6.120268771799761E-4	DESIGN
or bidirectional safety method setting both sides aperson.addtoevent(anevent)	WITHOUT_CLASSIFICATION	0.99959258668012	WITHOUT_CLASSIFICATION	4.0741331987997697E-4	DESIGN
begin second unit of work	WITHOUT_CLASSIFICATION	0.9998546350602548	WITHOUT_CLASSIFICATION	1.4536493974519587E-4	DESIGN
reattachment of aperson	WITHOUT_CLASSIFICATION	0.9998881891048841	WITHOUT_CLASSIFICATION	1.1181089511587986E-4	DESIGN
the getemailaddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9993050147673525	WITHOUT_CLASSIFICATION	6.949852326476095E-4	DESIGN
we need our tm so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9998808456562548	WITHOUT_CLASSIFICATION	1.1915434374522252E-4	DESIGN
don't hold the jbc node lock throughout the tx as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9994805311851613	WITHOUT_CLASSIFICATION	5.194688148385976E-4	DESIGN
don't hold the jbc node lock throughout the tx as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9994805311851613	WITHOUT_CLASSIFICATION	5.194688148385976E-4	DESIGN
jbc put a version in the node when it created as part of some internal operation. we are always newer but if the jbc version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999879820628286	WITHOUT_CLASSIFICATION	1.2017937171448642E-5	DESIGN
swaldman 2006-08-28 define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9904843960158615	WITHOUT_CLASSIFICATION	0.009515603984138617	DESIGN
not null if the isolation level has been specified in the configuration file. otherwise it is left to the driver's default value.	WITHOUT_CLASSIFICATION	0.9998736465052401	WITHOUT_CLASSIFICATION	1.263534947598242E-4	DESIGN
configured outside of hibernate (i.e. servlet container or java bean container already has proxool pools running and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9541464777483533	WITHOUT_CLASSIFICATION	0.045853522251646794	DESIGN
if you're closing down the connectionprovider chances are an is not a real big deal just warn	WITHOUT_CLASSIFICATION	0.9999461081836591	WITHOUT_CLASSIFICATION	5.389181634088263E-5	DESIGN
(as is always optional for consistency with sql/oql)	WITHOUT_CLASSIFICATION	0.9974294338650264	WITHOUT_CLASSIFICATION	0.002570566134973671	DESIGN
process the "new" hql style where aliases are assigned _after_ the class name or path expression ie. using the as construction	WITHOUT_CLASSIFICATION	0.9999922723524405	WITHOUT_CLASSIFICATION	7.727647559483502E-6	DESIGN
the loaded owner will be set to null after the collection is removed so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.999933467917529	WITHOUT_CLASSIFICATION	6.653208247104228E-5	DESIGN
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.999029398130105	WITHOUT_CLASSIFICATION	9.706018698949294E-4	DESIGN
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999893907910126	WITHOUT_CLASSIFICATION	1.0609208987461218E-5	DESIGN
handle a path expression or class name that appears at the start in the "new" hql style or an alias that appears at the start in the "old" hql style	WITHOUT_CLASSIFICATION	0.9991917177385539	WITHOUT_CLASSIFICATION	8.08282261446206E-4	DESIGN
handle <= >= != is not not between not in	WITHOUT_CLASSIFICATION	0.9967669235739531	WITHOUT_CLASSIFICATION	0.0032330764260468554	DESIGN
the loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999973593949466	WITHOUT_CLASSIFICATION	2.640605053337126E-6	DESIGN
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9984245430833971	WITHOUT_CLASSIFICATION	0.0015754569166028215	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9998078870244236	WITHOUT_CLASSIFICATION	1.9211297557638718E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9998078870244236	WITHOUT_CLASSIFICATION	1.9211297557638718E-4	DESIGN
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9990124812248014	WITHOUT_CLASSIFICATION	9.87518775198718E-4	DESIGN
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9997950877213091	WITHOUT_CLASSIFICATION	2.0491227869095963E-4	DESIGN
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9995609374447906	WITHOUT_CLASSIFICATION	4.3906255520946336E-4	DESIGN
note special case default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999914640523581	WITHOUT_CLASSIFICATION	8.53594764196517E-6	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999126046591816	WITHOUT_CLASSIFICATION	8.73953408183176E-5	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997606366790478	WITHOUT_CLASSIFICATION	2.3936332095230833E-4	DESIGN
void setcomponenttuplizerfactory(componenttuplizerfactory componenttuplizerfactory) { this.componenttuplizerfactory = componenttuplizerfactory }	WITHOUT_CLASSIFICATION	0.9999614365241198	WITHOUT_CLASSIFICATION	3.856347588007521E-5	DESIGN
element index -> id	WITHOUT_CLASSIFICATION	0.9999548081487631	WITHOUT_CLASSIFICATION	4.5191851236812736E-5	DESIGN
note that it might be better to iterate the snapshot but this is safe assuming the user implements equals() properly as required by the set contract!	WITHOUT_CLASSIFICATION	0.9580210803246836	WITHOUT_CLASSIFICATION	0.04197891967531641	DESIGN
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9776951109817409	WITHOUT_CLASSIFICATION	0.022304889018259198	DESIGN
essentially if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception note that allowing close() above has the same basic effect but we capture that there simply to perform the unbind	WITHOUT_CLASSIFICATION	0.9999693797758847	WITHOUT_CLASSIFICATION	3.0620224115304746E-5	DESIGN
the default sqlexceptionconverter for all dialects is based on sqlstate since sqlerrorcode is extremely vendor-specific. specific dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9863053927113429	WITHOUT_CLASSIFICATION	0.01369460728865699	DESIGN
only necessary for postgre < 7.4 httpanoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.993960096688182	WITHOUT_CLASSIFICATION	0.006039903311818017	DESIGN
select topic syntax from information_schema.help where section like 'function%' order by section topic see also -> httpwww.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9953708771096765	WITHOUT_CLASSIFICATION	0.004629122890323403	DESIGN
registercolumntype(types.varbinary "character($l)") registercolumntype(types.blob "character($l)" ) for use prior to cp 11.0 registercolumntype(types.clob "character($l)" )	WITHOUT_CLASSIFICATION	0.9971085444300376	WITHOUT_CLASSIFICATION	0.002891455569962364	DESIGN
the blob type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include k - kilobyte m - megabyte g - gigabyte. refer to the pbdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9888304115074396	WITHOUT_CLASSIFICATION	0.011169588492560459	DESIGN
we must return a valid rdms/rsa command from this method to prevent rdms/rsa from issuing error 400	WITHOUT_CLASSIFICATION	0.7838938142023363	WITHOUT_CLASSIFICATION	0.21610618579766377	DESIGN
oracle driver reports to support getgeneratedkeys() but they only support the version taking an array of the names of the columns to be returned (via its returning clause). no other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9949873623396751	WITHOUT_CLASSIFICATION	0.005012637660324865	DESIGN
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999665274079975	WITHOUT_CLASSIFICATION	3.3472592002470985E-5	DESIGN
you may still have other resultsets or update counts left to process here but you can't do it now or the resultset you just got will be closed	WITHOUT_CLASSIFICATION	0.9999931446537945	WITHOUT_CLASSIFICATION	6.855346205445711E-6	DESIGN
note for object <-> sql datatype mappings see configuration manager | advanced | sql | system ddl datatype mappings tbdregistercolumntype(types.binary "binary($1)") changed 08-11-2005 jsl	WITHOUT_CLASSIFICATION	0.9999707277408465	WITHOUT_CLASSIFICATION	2.9272259153420027E-5	DESIGN
trim(end_keyword string-expression-1 from string-expression-2) use hibernate implementation "from" is one of the parameters they pass in position ?3 registerfunction( "trim" new sqlfunctiontemplate(hibernate.string "trim(?1 ?2 from ?3)") )	WITHOUT_CLASSIFICATION	0.9984145009273165	WITHOUT_CLASSIFICATION	0.0015854990726834309	DESIGN
whether this dialect has an identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9996094652629545	WITHOUT_CLASSIFICATION	3.905347370455258E-4	DESIGN
according to both the ansi-sql and jpa specs trim takes a variable number of parameters between 1 and 4. at least one paramer (trimsource) is required. from the sql spec <trim function> = trim <left paren> <trim operands> <right paren> <trim operands> = [ [ <trim specification> ] [ <trim character> ] from ] <trim source> <trim specification> = leading | trailing | both if <trim specification> is omitted both is assumed. if <trim character> is omitted space is assumed	WITHOUT_CLASSIFICATION	0.9999946492857368	WITHOUT_CLASSIFICATION	5.350714263182358E-6	DESIGN
/ prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999204763938293	WITHOUT_CLASSIFICATION	7.952360617068059E-5	DESIGN
named queries	WITHOUT_CLASSIFICATION	0.9999297725613849	WITHOUT_CLASSIFICATION	7.022743861509709E-5	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.997728773374492	WITHOUT_CLASSIFICATION	0.0022712266255081105	DESIGN
does not handle arrays (thats ok cos they can't be lazy) or newly instantiated collections so we can do the cast	WITHOUT_CLASSIFICATION	0.9840509641533783	WITHOUT_CLASSIFICATION	0.01594903584662166	DESIGN
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999851194100023	WITHOUT_CLASSIFICATION	1.4880589997797152E-5	DESIGN
we can do the cast since orphan-delete does not apply to 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9967520839310516	WITHOUT_CLASSIFICATION	0.0032479160689484025	DESIGN
if the natural-id is marked as non-mutable it is not retrieved during a normal database-snapshot operation	WITHOUT_CLASSIFICATION	0.9999634393499219	WITHOUT_CLASSIFICATION	3.656065007806329E-5	DESIGN
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9995167715623249	WITHOUT_CLASSIFICATION	4.832284376750772E-4	DESIGN
slice to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9994543660400242	WITHOUT_CLASSIFICATION	5.456339599756847E-4	DESIGN
int result = 17 result = 37 result + type.hashcode() result = 37 result + ( value==null ? 0 value.hashcode() ) return result	WITHOUT_CLASSIFICATION	0.99995509725512	WITHOUT_CLASSIFICATION	4.490274488005585E-5	DESIGN
the collectionentry.isreached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.99990357089364	WITHOUT_CLASSIFICATION	9.642910636006334E-5	DESIGN
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9996688823804909	WITHOUT_CLASSIFICATION	3.311176195091251E-4	DESIGN
the unique property value represented here may or may not be serializable so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9769613275651812	WITHOUT_CLASSIFICATION	0.023038672434818774	DESIGN
if the version of a newly instantiated object is not the same as the version seed value use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9995846990386948	WITHOUT_CLASSIFICATION	4.153009613051921E-4	DESIGN
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.999368882390584	WITHOUT_CLASSIFICATION	6.311176094160401E-4	DESIGN
ignore this row the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.998348738795807	WITHOUT_CLASSIFICATION	0.0016512612041929232	DESIGN
entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently not yet used	WITHOUT_CLASSIFICATION	0.9997649700883924	WITHOUT_CLASSIFICATION	2.3502991160759121E-4	DESIGN
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. besides it makes the code much easier to read than the old transactionhelper stuff	WITHOUT_CLASSIFICATION	0.9986603729067067	WITHOUT_CLASSIFICATION	0.001339627093293231	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9908380782757599	WITHOUT_CLASSIFICATION	0.009161921724240131	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9908380782757599	WITHOUT_CLASSIFICATION	0.009161921724240131	DESIGN
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999363966015569	WITHOUT_CLASSIFICATION	6.360339844310943E-5	DESIGN
remove any snapshot not really for memory management purposes but rather because it might now be stale and there is no longer any entityentry to take precedence this is now handled by removeentity() session.getpersistencecontext().removedatabasesnapshot(key)	WITHOUT_CLASSIFICATION	0.9384836420796775	WITHOUT_CLASSIFICATION	0.06151635792032246	DESIGN
skip this check for composite-ids relating to dom4j entity-mode alternatively we could add a check to make sure the incoming id value is an instance of element	WITHOUT_CLASSIFICATION	0.9996417272605735	WITHOUT_CLASSIFICATION	3.582727394265244E-4	DESIGN
upgrade the lock if necessary lock(result lockmode)	WITHOUT_CLASSIFICATION	0.9985986068656657	WITHOUT_CLASSIFICATION	0.001401393134334206	DESIGN
now any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.998919050792218	WITHOUT_CLASSIFICATION	0.0010809492077819935	DESIGN
we must clone embedded composite identifiers or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999693589531169	WITHOUT_CLASSIFICATION	3.0641046883132197E-5	DESIGN
sub-insertions should occur before containing insertion so try to do the callback now	WITHOUT_CLASSIFICATION	0.9997845106742231	WITHOUT_CLASSIFICATION	2.1548932577692125E-4	DESIGN
the entity is not associated with the session so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999107420261673	WITHOUT_CLASSIFICATION	8.925797383280581E-5	DESIGN
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9918793048046537	WITHOUT_CLASSIFICATION	0.008120695195346271	DESIGN
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995966178022693	WITHOUT_CLASSIFICATION	4.033821977307281E-4	DESIGN
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995966178022693	WITHOUT_CLASSIFICATION	4.033821977307281E-4	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9895107884890906	WITHOUT_CLASSIFICATION	0.010489211510909351	DESIGN
if it is an uninitialized proxy pointing with this session then when it is accessed the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9997448797460806	WITHOUT_CLASSIFICATION	2.5512025391935013E-4	DESIGN
generate an explicit join for the root dot node. the implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999256374141988	WITHOUT_CLASSIFICATION	7.436258580123143E-5	DESIGN
a session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9994894483011407	WITHOUT_CLASSIFICATION	5.105516988592683E-4	DESIGN
does the collection referenced by this fromelement specify an order-by attribute? if so attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.993799570850157	WITHOUT_CLASSIFICATION	0.006200429149842999	DESIGN
and the token could be an identifer and the error is a mismatched token error	WITHOUT_CLASSIFICATION	0.9978623551515856	WITHOUT_CLASSIFICATION	0.0021376448484144157	DESIGN
if a where clause was specified in the update/delete query use it to limit the returned ids here	WITHOUT_CLASSIFICATION	0.999417087853767	WITHOUT_CLASSIFICATION	5.829121462328469E-4	DESIGN
int parameterstart = getwalker().getnumberofparametersinsetclause() list allparams = getidselectparameterspecifications() iterator whereparams = allparams.sublist( parameterstart allparams.size() ).iterator()	WITHOUT_CLASSIFICATION	0.9999422270479392	WITHOUT_CLASSIFICATION	5.777295206078575E-5	DESIGN
default implementation if this node has a data type and that data type is not an association then this is scalar.	WITHOUT_CLASSIFICATION	0.9946189813431159	WITHOUT_CLASSIFICATION	0.0053810186568841204	DESIGN
resolve the lhs fully generate implicit joins. pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999939420517588	WITHOUT_CLASSIFICATION	6.057948241116954E-6	DESIGN
if the propertytype is null and there isn't a parent just stop now there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999562742288507	WITHOUT_CLASSIFICATION	4.372577114926438E-5	DESIGN
we do not look for an existing join on the same path because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9991959268980114	WITHOUT_CLASSIFICATION	8.040731019885577E-4	DESIGN
our parent is another dot node meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's pk (because 'our' table would know the fk).	WITHOUT_CLASSIFICATION	0.998894680417717	WITHOUT_CLASSIFICATION	0.0011053195822830814	DESIGN
public final currency getcurrency(int col) throws hibernateexception {return (currency) get(col)}	WITHOUT_CLASSIFICATION	0.9982374017884013	WITHOUT_CLASSIFICATION	0.0017625982115987344	DESIGN
here we have two possibilities 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9997880212660639	WITHOUT_CLASSIFICATION	2.1197873393608805E-4	DESIGN
set the unresolved path in this node and the parent. set the text for the parent.	WITHOUT_CLASSIFICATION	0.9997481501638444	WITHOUT_CLASSIFICATION	2.518498361554636E-4	DESIGN
get the first child to be considered. sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. distinct).	WITHOUT_CLASSIFICATION	0.9993244743970083	WITHOUT_CLASSIFICATION	6.755256029917451E-4	DESIGN
if this is an entity and the property is the identifier property then use getidentifiertype(). note that the propertyname.equals( propertypath ) checks whether we have a component key reference where the component class property name is the same as the entity id property name if the two are not equal this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9979619221569553	WITHOUT_CLASSIFICATION	0.002038077843044744	DESIGN
for a subquery the alias to use depends on a few things (we already know this is not an overall select) 1) if this from_element represents a correlation to the outer-most query a) if the outer query represents a multi-table persister we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) b) otherwise we need to use the persister's table name as the column qualification 2) otherwise (not correlated) use the given alias	WITHOUT_CLASSIFICATION	0.9865563664432502	WITHOUT_CLASSIFICATION	0.013443633556749856	DESIGN
not a collection? return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999454986739025	WITHOUT_CLASSIFICATION	5.450132609744215E-5	DESIGN
collection of <many-to-any/> mappings used to circumvent the component-collection check below	WITHOUT_CLASSIFICATION	0.9959722222877617	WITHOUT_CLASSIFICATION	0.004027777712238275	DESIGN
otherwise the destination node was implied by the from clause and the from clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9982967020272725	WITHOUT_CLASSIFICATION	0.001703297972727451	DESIGN
if the first identifier in the path referrs to the class alias (not the class name) then this is a correlated subselect. if it's a correlated sub-select use the existing table alias. otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9970435175552251	WITHOUT_CLASSIFICATION	0.0029564824447748934	DESIGN
check to see if our "proppath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9996957792763984	WITHOUT_CLASSIFICATION	3.042207236016591E-4	DESIGN
an ident node can represent an index expression if the ident represents a naked property ref note this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrexpr -> resolve()). the other option if that changes is to call resolve from here but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9991280672507635	WITHOUT_CLASSIFICATION	8.719327492364164E-4	DESIGN
this uses a pathexpressionparser but notice that compound paths are not valid only bare names and simple paths	WITHOUT_CLASSIFICATION	0.9894953092738802	WITHOUT_CLASSIFICATION	0.010504690726119901	DESIGN
if this is an implied join in a from clause then use ansi-style joining and set the flag on the fromelement that indicates that it was implied in the from clause itself.	WITHOUT_CLASSIFICATION	0.9430818567099373	WITHOUT_CLASSIFICATION	0.05691814329006273	DESIGN
origin.adddestination(destination) add the query spaces.	WITHOUT_CLASSIFICATION	0.9999553611982306	WITHOUT_CLASSIFICATION	4.463880176945693E-5	DESIGN
for an explicit many-to-many relationship add a second join from the intermediate (many-to-many) table to the destination table. also make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9997667154710858	WITHOUT_CLASSIFICATION	2.3328452891420163E-4	DESIGN
reset the node type because the rest of the system is expecting from_fragment all we wanted was for the factory to create the right sub-class. this might get reset again later on anyway to make the sql generation simpler.	WITHOUT_CLASSIFICATION	0.6939582684368142	WITHOUT_CLASSIFICATION	0.30604173156318576	DESIGN
explicit = true this is an explict select. arraylist sqlresulttypelist = new arraylist()	WITHOUT_CLASSIFICATION	0.9993376871139127	WITHOUT_CLASSIFICATION	6.62312886087405E-4	DESIGN
sqlresulttypelist.add( type ) generate the select expression.	WITHOUT_CLASSIFICATION	0.9994988148983498	WITHOUT_CLASSIFICATION	5.01185101650201E-4	DESIGN
if the expression list has exactly one expression and the type of the expression is a collection then this might be a collection function such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9914696851924243	WITHOUT_CLASSIFICATION	0.008530314807575764	DESIGN
need to parse off the column qualifiers this is assuming (which is true as of now) that this is only used from update and delete hql statement parsing	WITHOUT_CLASSIFICATION	0.9992624070035715	WITHOUT_CLASSIFICATION	7.375929964284908E-4	DESIGN
for regression testing against output from the old parser found it easiest to simply reorder the fromelements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser this is definitely another of those "only needed for regression purposes". the syntheticandfactory then simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9968224595199044	WITHOUT_CLASSIFICATION	0.0031775404800955523	DESIGN
the uber-rule here is that we need to include subclass joins if the fromelement is in any way dereferenced by a property from the subclass table otherwise we end up with column references qualified by a non-existent table reference in the resulting sql	WITHOUT_CLASSIFICATION	0.9344108266660641	WITHOUT_CLASSIFICATION	0.06558917333393596	DESIGN
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9900754614701488	WITHOUT_CLASSIFICATION	0.00992453852985133	DESIGN
the following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9985899702187684	WITHOUT_CLASSIFICATION	0.0014100297812316318	DESIGN
the loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999973593949466	WITHOUT_CLASSIFICATION	2.640605053337126E-6	DESIGN
should not be able to reach last without maxposition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9970442525863454	WITHOUT_CLASSIFICATION	0.00295574741365445	DESIGN
we found it in the temp pc. should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9989759826444405	WITHOUT_CLASSIFICATION	0.0010240173555594082	DESIGN
do not use proxiesbykey since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9966206749657934	WITHOUT_CLASSIFICATION	0.00337932503420661	DESIGN
if there is no tm configured we will not be able to access the javax.transaction.transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9993303780381902	WITHOUT_CLASSIFICATION	6.696219618097653E-4	DESIGN
since the result set cursor is always left at the first physical row after the "last processed" we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9998847526615188	WITHOUT_CLASSIFICATION	1.1524733848127776E-4	DESIGN
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a collectioninitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9671939884330742	WITHOUT_CLASSIFICATION	0.03280601156692573	DESIGN
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode none)	WITHOUT_CLASSIFICATION	0.9882604567687123	WITHOUT_CLASSIFICATION	0.011739543231287732	DESIGN
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9996740604390194	WITHOUT_CLASSIFICATION	3.2593956098059387E-4	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9991105771567564	WITHOUT_CLASSIFICATION	8.894228432434849E-4	DESIGN
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9972906414156588	WITHOUT_CLASSIFICATION	0.0027093585843412037	DESIGN
ps.close() just close it do not try to return it to the pool! note early exit!	WITHOUT_CLASSIFICATION	0.99997718106577	WITHOUT_CLASSIFICATION	2.2818934229988858E-5	DESIGN
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through hibernate's registered transaction synchronization on a separate "reaping" thread. in cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these cmes occur. and though it is not "allowed" per-se the end result without handling it specifically is infinite looping. so here we simply break the loop	WITHOUT_CLASSIFICATION	0.8931397213458494	WITHOUT_CLASSIFICATION	0.1068602786541506	DESIGN
unfortunately this stuff can't be cached because it is per-invocation not constant for the querytranslator instance	WITHOUT_CLASSIFICATION	0.9996604282357275	WITHOUT_CLASSIFICATION	3.39571764272459E-4	DESIGN
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9989369544939082	WITHOUT_CLASSIFICATION	0.0010630455060918298	DESIGN
don't create a unique key 'cos some databases don't like a uk on nullable columns getcollectiontable().createuniquekey( getidentifier().getconstraintcolumns() )	WITHOUT_CLASSIFICATION	0.9874438222395667	WITHOUT_CLASSIFICATION	0.01255617776043318	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or entityinfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996272196489292	WITHOUT_CLASSIFICATION	3.7278035107070047E-4	DESIGN
isset = collection.isset() issorted = collection.issorted()	WITHOUT_CLASSIFICATION	0.9999160254598517	WITHOUT_CLASSIFICATION	8.39745401482966E-5	DESIGN
lists arrays sets maps bags	WITHOUT_CLASSIFICATION	0.9998963092113446	WITHOUT_CLASSIFICATION	1.0369078865534039E-4	DESIGN
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9998670642448987	WITHOUT_CLASSIFICATION	1.3293575510126053E-4	DESIGN
use a combination of foreign key columns and pk columns since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9998973972610423	WITHOUT_CLASSIFICATION	1.0260273895774491E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or entityinfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996272196489292	WITHOUT_CLASSIFICATION	3.7278035107070047E-4	DESIGN
information about properties of this class including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9746351311859139	WITHOUT_CLASSIFICATION	0.025364868814086075	DESIGN
all this only really needs to consider properties of this class not its subclasses but since we are reusing code used for sequential selects we use the subclass closure	WITHOUT_CLASSIFICATION	0.9256457260572387	WITHOUT_CLASSIFICATION	0.07435427394276131	DESIGN
here we render the select column list based on the properties defined as being generated. for partial component generation we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.7440531345987649	DESIGN	0.2559468654012351	WITHOUT_CLASSIFICATION
this is the root (versioned) table and we are using version-based optimistic locking if we are not updating the version also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.99747146920367	WITHOUT_CLASSIFICATION	0.0025285307963299635	DESIGN
optimistic-lock="all" include all updatable properties optimistic-lock="dirty" include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.994746049907103	WITHOUT_CLASSIFICATION	0.005253950092896977	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9939379613138237	WITHOUT_CLASSIFICATION	0.006062038686176289	DESIGN
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a jta transaction context so must be autocommit mode)	WITHOUT_CLASSIFICATION	0.9399451708189969	WITHOUT_CLASSIFICATION	0.06005482918100323	DESIGN
need to treat this as if it where optimistic-lock="all" (dirty does not make sense) first we need to locate the "loaded" state note it potentially could be a proxy so perform the location the safe way	WITHOUT_CLASSIFICATION	0.9945977773985367	WITHOUT_CLASSIFICATION	0.005402222601463319	DESIGN
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.997972034994177	WITHOUT_CLASSIFICATION	0.0020279650058230795	DESIGN
need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. using the collection's key type causes problems with property-ref keys	WITHOUT_CLASSIFICATION	0.9932837528940631	WITHOUT_CLASSIFICATION	0.006716247105936797	DESIGN
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9994673258709779	WITHOUT_CLASSIFICATION	5.326741290221254E-4	DESIGN
following doesn't handle (null not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9994681953974247	WITHOUT_CLASSIFICATION	5.31804602575383E-4	DESIGN
impl note due to the delayed population of setters (setters cached for performance) we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9997609778944829	WITHOUT_CLASSIFICATION	2.3902210551713575E-4	DESIGN
we need to dirty check collections since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9997476222442703	WITHOUT_CLASSIFICATION	2.5237775572968773E-4	DESIGN
return the id so we can use it to reset the proxy id return result	WITHOUT_CLASSIFICATION	0.9999232813681006	WITHOUT_CLASSIFICATION	7.671863189935914E-5	DESIGN
optimizer = getfactory().getsettings().getbytecodeprovider().getreflectionoptimizer( mappedclass getternames setternames proptypes )	WITHOUT_CLASSIFICATION	0.9998809576435808	WITHOUT_CLASSIFICATION	1.1904235641927482E-4	DESIGN
cache the actual id of the object not the value of the property-ref which might not be initialized	WITHOUT_CLASSIFICATION	0.9996494265642915	WITHOUT_CLASSIFICATION	3.505734357085631E-4	DESIGN
we now have the value of the property-ref we reference. however we need to dig a little deeper as that property might also be an entity type in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999363556086225	WITHOUT_CLASSIFICATION	6.364439137747633E-5	DESIGN
retrieve the value of the designated column in the current row of this resultset object as a java.io.reader object	WITHOUT_CLASSIFICATION	0.9988210621444665	WITHOUT_CLASSIFICATION	0.001178937855533464	DESIGN
not absolutely necessary but helps for some equals()/hashcode() implementations	WITHOUT_CLASSIFICATION	0.9932651886834545	WITHOUT_CLASSIFICATION	0.006734811316545558	DESIGN
this should be a call to resolve() not resolveidentifier() 'cos it might be a property-ref and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9914607909417266	WITHOUT_CLASSIFICATION	0.008539209058273363	DESIGN
if we have <tt>not-found="ignore"</tt> association mapped to a formula we always need to dirty check it so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.99989926811715	WITHOUT_CLASSIFICATION	1.0073188284999829E-4	DESIGN
can't just return null here since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.956940145409394	WITHOUT_CLASSIFICATION	0.04305985459060601	DESIGN
for arrays replaceelements() may return a different reference since the array length might not match	WITHOUT_CLASSIFICATION	0.9988948869096831	WITHOUT_CLASSIFICATION	0.0011051130903169937	DESIGN
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the mru entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999191809294034	WITHOUT_CLASSIFICATION	8.081907059665343E-5	DESIGN
as soon as we encounter our first letter return the substring from that position	WITHOUT_CLASSIFICATION	0.9995558046872318	WITHOUT_CLASSIFICATION	4.4419531276821127E-4	DESIGN
note expected in the syntax type=listenerclass ({sep}type=listenerclass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9998586471740697	WITHOUT_CLASSIFICATION	1.4135282593026813E-4	DESIGN
istransactioncallbackregistered denotes whether any hibernate transaction has registered as a callback against this jdbccontext only one such callback is allowed. directly serializing this value causes problems with jdbctransaction or really any transaction impl where the callback is local to the transaction instance itself since that transaction is not serialized along with the jdbccontext. thus we handle that fact here explicitly	WITHOUT_CLASSIFICATION	0.9650186143360716	WITHOUT_CLASSIFICATION	0.03498138566392835	DESIGN
note that for sequential scrolling we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9978659352655425	WITHOUT_CLASSIFICATION	0.0021340647344576073	DESIGN
we call getkeyfromresultset() here so that we can know the key value upon which to perform the breaking logic. however it is also then called from getrowfromresultset() which is certainly not the most efficient. but the call here is needed and there currently is no other way without refactoring of the doquery()/getrowfromresultset() methods	WITHOUT_CLASSIFICATION	0.9391605884902476	WITHOUT_CLASSIFICATION	0.060839411509752334	DESIGN
this check is needed since processing leaves the cursor after the last physical row for the current logical row thus if we are after the last physical row this might be caused by either 1) scrolling to the last logical row 2) scrolling past the last logical row in the latter scenario the previous logical row really is the last logical row. in all other cases we should process back two logical records (the current logic row plus the previous logical row).	WITHOUT_CLASSIFICATION	0.8531637689097977	WITHOUT_CLASSIFICATION	0.14683623109020225	DESIGN
and perform the load	WITHOUT_CLASSIFICATION	0.9999464527877302	WITHOUT_CLASSIFICATION	5.354721226976549E-5	DESIGN
important reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9997153207357125	WITHOUT_CLASSIFICATION	2.846792642875746E-4	DESIGN
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.7922132824646386	WITHOUT_CLASSIFICATION	0.20778671753536138	DESIGN
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9982111768272487	WITHOUT_CLASSIFICATION	0.0017888231727513182	DESIGN
we did not find a collection element in the result set so we ensure that a collection is created with the owner's identifier since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9987170027514187	WITHOUT_CLASSIFICATION	0.001282997248581294	DESIGN
this is a collection initializer so we must create a collection for each of the passed-in keys to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9339400776852597	WITHOUT_CLASSIFICATION	0.06605992231474042	DESIGN
grab its state from the resultset and keep it in the session (but don't yet initialize the object itself) note that we acquire lockmode.read even if it was not requested	WITHOUT_CLASSIFICATION	0.9999852524437507	WITHOUT_CLASSIFICATION	1.4747556249376448E-5	DESIGN
a many-to-many decrement currentdepth here to allow join across the association table without exceeding max_fetch_depth (i.e. the "currentdepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9792363032791719	WITHOUT_CLASSIFICATION	0.020763696720828083	DESIGN
if not a composite key use "foo in (? ? ?)" for batching if no batch and not a composite key use "foo = ?"	WITHOUT_CLASSIFICATION	0.9991168926838043	WITHOUT_CLASSIFICATION	8.831073161956847E-4	DESIGN
the user visible aliases which are unknown to the superclass these are not the actual "physical" sql aliases	WITHOUT_CLASSIFICATION	0.9999505642399479	WITHOUT_CLASSIFICATION	4.943576005200444E-5	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9986644360582198	WITHOUT_CLASSIFICATION	0.00133556394178031	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9986644360582198	WITHOUT_CLASSIFICATION	0.00133556394178031	DESIGN
it does not refer to an alias of a projection look for a property	WITHOUT_CLASSIFICATION	0.9992545259912694	WITHOUT_CLASSIFICATION	7.454740087306861E-4	DESIGN
determine if the collection elements are entities	WITHOUT_CLASSIFICATION	0.9996003637696989	WITHOUT_CLASSIFICATION	3.996362303010567E-4	DESIGN
let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.998279889279495	WITHOUT_CLASSIFICATION	0.0017201107205050412	DESIGN
translates an ast join type (i.e. the token type) into a joinfragment.xxx join type. @param astjointype the ast join type (from hqlsqltokentypes or sqltokentypes) @return a joinfragment.xxx join type. @see joinfragment @see sqltokentypes	WITHOUT_CLASSIFICATION	0.9983317327026515	WITHOUT_CLASSIFICATION	0.0016682672973485112	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999297444246349	WITHOUT_CLASSIFICATION	7.025557536506883E-5	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999297444246349	WITHOUT_CLASSIFICATION	7.025557536506883E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.9999288931457168	WITHOUT_CLASSIFICATION	7.110685428322792E-5	DESIGN
public list getcollectionaliases() { return collectionaliases } public list getcollectionowners() { return collectionowners } public list getcollectionowneraliases() { return collectionowneraliases } public list getcollectionpersisters() { return collectionpersisters } public map getalias2persister() { return alias2persister } public boolean iscollectioninitializer() { return iscollectioninitializer } public list getpersisters() { return persisters } public map getalias2owneralias() { return alias2owneralias } public list getscalartypes() { return scalartypes } public list getscalarcolumnaliases() { return scalarcolumnaliases } public list getpropertyresults() { return propertyresults } public list getcollectionpropertyresults() { return collectionresults } public map getalias2return() { return alias2return }	WITHOUT_CLASSIFICATION	0.9997300189001231	WITHOUT_CLASSIFICATION	2.699810998768121E-4	DESIGN
sqlqueryparser parser = new sqlqueryparser( sqlquery processor.getalias2persister() processor.getalias2return() aliases collaliases collpersisters suffixes collsuffixes ) sql = parser.process() namedparameterbindpoints = parser.getnamedparameters()	WITHOUT_CLASSIFICATION	0.9990817180504237	WITHOUT_CLASSIFICATION	9.182819495763069E-4	DESIGN
include the discriminator and class-level where but not filters	WITHOUT_CLASSIFICATION	0.9999422266331384	WITHOUT_CLASSIFICATION	5.7773366861705305E-5	DESIGN
sqlaliassuffixes[i] = element.getcolumnaliassuffix()	WITHOUT_CLASSIFICATION	0.9999160254598517	WITHOUT_CLASSIFICATION	8.39745401482966E-5	DESIGN
none because its the requested lock mode not the actual!	WITHOUT_CLASSIFICATION	0.9999664223384069	WITHOUT_CLASSIFICATION	3.357766159302094E-5	DESIGN
at this point we have (drivingsqlalias) the sql alias of the driving table corresponding to the given user alias. however the driving table is not (necessarily) the table against which we want to apply locks. mainly the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9992716377113364	WITHOUT_CLASSIFICATION	7.283622886636724E-4	DESIGN
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9990004188886938	WITHOUT_CLASSIFICATION	9.995811113061586E-4	DESIGN
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999347319382357	WITHOUT_CLASSIFICATION	6.526806176425854E-5	DESIGN
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9992900518678758	WITHOUT_CLASSIFICATION	7.099481321242875E-4	DESIGN
both many-to-one and one-to-one are represented as a property. entitypersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. so we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. the other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. if that assertion changes then this check needs to change as well. partially this is an issue with the overloading of the term "lazy" here	WITHOUT_CLASSIFICATION	0.9692989124554154	WITHOUT_CLASSIFICATION	0.030701087544584556	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997577720658843	WITHOUT_CLASSIFICATION	2.422279341156245E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997577720658843	WITHOUT_CLASSIFICATION	2.422279341156245E-4	DESIGN
roottablename = persistentclass.getroottable().getqualifiedname( factory.getdialect() factory.getdefaultcatalog() factory.getdefaultschema() )	WITHOUT_CLASSIFICATION	0.9998809576435808	WITHOUT_CLASSIFICATION	1.1904235641927482E-4	DESIGN
subclasses	WITHOUT_CLASSIFICATION	0.9998970881012177	WITHOUT_CLASSIFICATION	1.0291189878233681E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999265864061317	WITHOUT_CLASSIFICATION	7.341359386814727E-5	DESIGN
protected void initpropertypaths(final string pathfinal type typefinal string[] columnsfinal string[] formulatemplatesfinal mapping factory)throws mappingexception {addformulapropertypath(path type formulatemplates)initpropertypaths(path type columns formulatemplates factory)}	WITHOUT_CLASSIFICATION	0.9981144868579452	WITHOUT_CLASSIFICATION	0.0018855131420548131	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999411103560662	WITHOUT_CLASSIFICATION	5.888964393379308E-4	DESIGN
custom sql (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9965324104124356	WITHOUT_CLASSIFICATION	0.003467589587564344	DESIGN
moved up from abstractentitypersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.988341325605022	WITHOUT_CLASSIFICATION	0.011658674394978027	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999411103560662	WITHOUT_CLASSIFICATION	5.888964393379308E-4	DESIGN
aliases for identifier ( alias.id ) skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999383397583596	WITHOUT_CLASSIFICATION	6.166024164053369E-5	DESIGN
decide which resultset to get the property value from	WITHOUT_CLASSIFICATION	0.999892211353707	WITHOUT_CLASSIFICATION	1.077886462929319E-4	DESIGN
note it is conceptually possible that a usertype could map null to a non-null value so the following is arguable	WITHOUT_CLASSIFICATION	0.9999367162654841	WITHOUT_CLASSIFICATION	6.328373451594492E-5	DESIGN
the contract of entitytuplizer.determineconcretesubclassentityname says that returning null is an indication that the specified entity-name (this.getentityname) should be used.	WITHOUT_CLASSIFICATION	0.9873699128335579	WITHOUT_CLASSIFICATION	0.012630087166442004	DESIGN
need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. using the collection's key type causes problems with property-ref keys	WITHOUT_CLASSIFICATION	0.9932837528940631	WITHOUT_CLASSIFICATION	0.006716247105936797	DESIGN
cache these since they are stateless this one could even be static	WITHOUT_CLASSIFICATION	0.9806995292993652	WITHOUT_CLASSIFICATION	0.01930047070063473	DESIGN
"as" is not in keywords	WITHOUT_CLASSIFICATION	0.9997501311606113	WITHOUT_CLASSIFICATION	2.4986883938869894E-4	DESIGN
--commented out by inspection (12/4/04 910 am) public abstract void addcondition(string alias string[] columns string condition)	WITHOUT_CLASSIFICATION	0.9951093254686459	WITHOUT_CLASSIFICATION	0.004890674531354051	DESIGN
use the id column alias	WITHOUT_CLASSIFICATION	0.9997554348910245	WITHOUT_CLASSIFICATION	2.4456510897549684E-4	DESIGN
private list aliases = new arraylist()	WITHOUT_CLASSIFICATION	0.9999630317804701	WITHOUT_CLASSIFICATION	3.6968219529883424E-5	DESIGN
columns.add(columnname) aliases.add(tablealias)	WITHOUT_CLASSIFICATION	0.999411103560662	WITHOUT_CLASSIFICATION	5.888964393379308E-4	DESIGN
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9996242335183176	WITHOUT_CLASSIFICATION	3.7576648168237626E-4	DESIGN
revert to traditional hibernate behavior of setting initialpoolsize to minpoolsize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9988841330020188	WITHOUT_CLASSIFICATION	0.0011158669979812119	DESIGN
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9998678930883076	WITHOUT_CLASSIFICATION	1.3210691169252963E-4	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9929936694193143	WITHOUT_CLASSIFICATION	0.007006330580685641	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9929936694193143	WITHOUT_CLASSIFICATION	0.007006330580685641	DESIGN
if an exception occurs during flush user must call rollback()	WITHOUT_CLASSIFICATION	0.9998238139006157	WITHOUT_CLASSIFICATION	1.7618609938440806E-4	DESIGN
essentially 1) if we have a local (hibernate) transaction in progress and it already has the usertransaction cached use that usertransaction to determine the status. 2) if a transaction manager has been located use that transaction manager to determine the status. 3) finally as the last resort try to lookup the usertransaction via jndi and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9997731126406614	WITHOUT_CLASSIFICATION	2.2688735933861027E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9996736783687447	WITHOUT_CLASSIFICATION	3.2632163125530575E-4	DESIGN
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9991345368846409	WITHOUT_CLASSIFICATION	8.65463115359073E-4	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9999299427151714	WITHOUT_CLASSIFICATION	7.005728482850988E-5	DESIGN
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database) since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9968112167648444	WITHOUT_CLASSIFICATION	0.0031887832351555514	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999283737992312	WITHOUT_CLASSIFICATION	7.162620076881357E-5	DESIGN
regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed) so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999305178479445	WITHOUT_CLASSIFICATION	6.948215205548409E-5	DESIGN
then handle any user-defined entity modes	WITHOUT_CLASSIFICATION	0.9989128121968214	WITHOUT_CLASSIFICATION	0.0010871878031786966	DESIGN
establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9997284694382816	WITHOUT_CLASSIFICATION	2.715305617182611E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9787299256927505	WITHOUT_CLASSIFICATION	0.021270074307249556	DESIGN
note this is being used from the process of shutting down a sessionfactory. specific things to consider (1) this clearing of the region should not propagate to other nodes on the cluster (if any) this is the cache-mode-local option bit (2) really just trying a best effort to cleanup after ourselves lock failures etc are not critical here this is the fail-silently option bit	WITHOUT_CLASSIFICATION	0.6490176967900829	WITHOUT_CLASSIFICATION	0.35098230320991713	DESIGN
need to extract the component values and check for subtype replacements	WITHOUT_CLASSIFICATION	0.9997897032558609	WITHOUT_CLASSIFICATION	2.1029674413895156E-4	DESIGN
we ignore minimalputoverride. jbosscache putforexternalread is already about as minimal as we can get it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9995282951869165	WITHOUT_CLASSIFICATION	4.717048130834555E-4	DESIGN
for now just "re-flatten" the metamodel since this is temporary stuff anyway (hhh-1907)	WITHOUT_CLASSIFICATION	0.9918105581852925	WITHOUT_CLASSIFICATION	0.00818944181470754	DESIGN
configure the cache to use our tm	WITHOUT_CLASSIFICATION	0.9995655940719164	WITHOUT_CLASSIFICATION	4.344059280836184E-4	DESIGN
this solution would allow us to eliminate the owner arg to disassemble() but what if the collection was null and then later had elements added? seems unsafe session.getpersistencecontext().getcollectionentry( (persistentcollection) value ).getkey()	WITHOUT_CLASSIFICATION	0.6901089677160461	WITHOUT_CLASSIFICATION	0.3098910322839539	DESIGN
make sure jbc doesn't look one up	WITHOUT_CLASSIFICATION	0.9998912728047261	WITHOUT_CLASSIFICATION	1.0872719527381173E-4	DESIGN
some collections are not lazy	WITHOUT_CLASSIFICATION	0.9997048871416051	WITHOUT_CLASSIFICATION	2.951128583948697E-4	DESIGN
here we don't want to suspend the tx. if we do 1) we might be caching query results that reflect uncommitted changes. no tx == no wl on cache node so other threads can prematurely see those query results 2) no tx == immediate replication. more overhead plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.6524444896060556	WITHOUT_CLASSIFICATION	0.34755551039394456	DESIGN
return the (fully resolved) identifier value but do not resolve to the actual referenced entity instance note the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999737794115164	WITHOUT_CLASSIFICATION	2.622058848359753E-5	DESIGN
add a zero (or quite low) timeout option so we don't block. ignore any timeoutexception. basically we forego caching the query result in order to avoid blocking. reads are done with suspended tx so they should not hold the lock for long. not caching the query result is ok since any subsequent read will just see the old result with its out-of-date timestamp that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9929511572599333	WITHOUT_CLASSIFICATION	0.007048842740066694	DESIGN
impl note takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method	WITHOUT_CLASSIFICATION	0.9986781522741068	WITHOUT_CLASSIFICATION	0.0013218477258930554	DESIGN
we have the jbcwritemutex so no other local thread will be trying to write this key. it's possible here some remote thread has come in and changed the values again but since we are reading the values to write to jbc right now we know we are writing the latest values i.e. we don't assume that what we cached in entry.update() above is what we should write to jbc now. our write could be redundant i.e. we are writing what some remote thread just came in an wrote. there is a chance that yet another remote thread will update us and we'll then overwrite that later data in jbc. but all remote nodes will ignore that change in their localcache the only place it will live will be in jbc where it can only effect the initial state transfer values on newly joined nodes (i.e. populatelocalcache()).	WITHOUT_CLASSIFICATION	0.9989565060735297	WITHOUT_CLASSIFICATION	0.0010434939264702056	DESIGN
local cache so we use synchronization	WITHOUT_CLASSIFICATION	0.998613970315876	WITHOUT_CLASSIFICATION	0.001386029684124119	DESIGN
local cache so we use synchronization	WITHOUT_CLASSIFICATION	0.998613970315876	WITHOUT_CLASSIFICATION	0.001386029684124119	DESIGN
don't need to lock the cache here since if someone else inserted the same pk first the insert would fail	WITHOUT_CLASSIFICATION	0.9851092117670754	WITHOUT_CLASSIFICATION	0.01489078823292458	DESIGN
we need to grab the version value from the entity otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9417319440248656	WITHOUT_CLASSIFICATION	0.058268055975134396	DESIGN
we need to obtain the lock before any actions are executed since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9598976577254656	WITHOUT_CLASSIFICATION	0.040102342274534346	DESIGN
postdelete after actually deleting a row record the fact that the instance no longer exists on the database (needed for identity-column key generation) and remove it from the session cache	WITHOUT_CLASSIFICATION	0.895883413736943	WITHOUT_CLASSIFICATION	0.10411658626305693	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9998665593896974	WITHOUT_CLASSIFICATION	1.3344061030272494E-4	DESIGN
todo what else to do here?	DESIGN	0.9423081997257396	DESIGN	0.05769180027426043	WITHOUT_CLASSIFICATION
put() has nowait semantics is this really appropriate? note that it needs to be async replication never local or sync	DESIGN	0.6320701629717184	WITHOUT_CLASSIFICATION	0.36792983702828175	DESIGN
'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. the need for it is intended to be alleviated with future developement thus it is not defined as an environment constant it is used to control whether we should consult the jdbc metadata to determine certain settings default values it is useful to not do this when the database may not be available (mainly in tools usage).	DESIGN	0.9533555734962217	DESIGN	0.04664442650377831	WITHOUT_CLASSIFICATION
todo get sql rendering out of this package!	DESIGN	0.8780824207973619	DESIGN	0.12191757920263806	WITHOUT_CLASSIFICATION
todo get sql rendering out of this package!	DESIGN	0.8780824207973619	DESIGN	0.12191757920263806	WITHOUT_CLASSIFICATION
todo eventually merge this with treecache and just add optional opt-lock support there.	DESIGN	0.9341767514464481	DESIGN	0.0658232485535518	WITHOUT_CLASSIFICATION
can happen because of the multiple ways cache.remove() can be invoked (	DESIGN	0.9998518618560784	WITHOUT_CLASSIFICATION	1.4813814392158694E-4	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea	DESIGN	0.9988911307900794	WITHOUT_CLASSIFICATION	0.0011088692099205392	DESIGN
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9940119381820294	DESIGN	0.005988061817970633	WITHOUT_CLASSIFICATION
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9940119381820294	DESIGN	0.005988061817970633	WITHOUT_CLASSIFICATION
fixme hacky workaround to jbcache-1202	DESIGN	0.999951909966957	DESIGN	4.8090033043067735E-5	WITHOUT_CLASSIFICATION
fixme hacky workaround to jbcache-1202	DESIGN	0.999951909966957	DESIGN	4.8090033043067735E-5	WITHOUT_CLASSIFICATION
todo i considered validating ts cache config here but decided to defer unti gettimestampscacheinstance() in case the cache is never actually used	DESIGN	0.5783356232697846	WITHOUT_CLASSIFICATION	0.4216643767302154	DESIGN
todo is this a valid operation on a timestamps cache?	DESIGN	0.995136219674369	DESIGN	0.0048637803256309136	WITHOUT_CLASSIFICATION
todo is this a valid operation on a timestamps cache?	DESIGN	0.995136219674369	DESIGN	0.0048637803256309136	WITHOUT_CLASSIFICATION
todo why not use the timestamp in a dataversion?	DESIGN	0.7000849093733742	DESIGN	0.2999150906266258	WITHOUT_CLASSIFICATION
can happen because of the multiple ways cache.remove() can be invoked (	DESIGN	0.9998518618560784	WITHOUT_CLASSIFICATION	1.4813814392158694E-4	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea	DESIGN	0.9988911307900794	WITHOUT_CLASSIFICATION	0.0011088692099205392	DESIGN
swaldman 2004-02-07 modify to allow null values to signify fall through to c3p0 poolconfig defaults	DESIGN	0.9995067599004172	WITHOUT_CLASSIFICATION	4.932400995828203E-4	DESIGN
turn hibernate.c3p0. into c3p0. so c3p0 gets a chance to see all hibernate.c3p0.	DESIGN	0.9945957566665234	WITHOUT_CLASSIFICATION	0.005404243333476537	DESIGN
todo this bit actually has to be called after all cascades! but since identity insert is called synchronously instead of asynchronously as other actions it isn't	DESIGN	0.9213324215404589	DESIGN	0.07866757845954106	WITHOUT_CLASSIFICATION
todo reenable if we also fix the above todo	DESIGN	0.7780574333933369	DESIGN	0.2219425666066631	WITHOUT_CLASSIFICATION
todo inefficient if that cache is just going to ignore the updated state!	DESIGN	0.7230088131412501	DESIGN	0.27699118685875	WITHOUT_CLASSIFICATION
we may be screwed here since the collection action is about to execute and we do not know the final owner key value	DESIGN	0.9952412738483073	WITHOUT_CLASSIFICATION	0.004758726151692727	DESIGN
create an action that will evict collection and entity regions based on queryspaces (table names). todo cache the autodetected information and pass it in instead.	DESIGN	0.5767610905693626	DESIGN	0.42323890943063747	WITHOUT_CLASSIFICATION
todo what else to do here?	DESIGN	0.9423081997257396	DESIGN	0.05769180027426043	WITHOUT_CLASSIFICATION
todo modify the class definition if not already transformed	DESIGN	0.7060908742874096	WITHOUT_CLASSIFICATION	0.29390912571259037	DESIGN
todo what else to do here?	DESIGN	0.9423081997257396	DESIGN	0.05769180027426043	WITHOUT_CLASSIFICATION
this is called by sessionfactory irregardless we just disregard here could also add a check to sessionfactory to only conditionally call start	DESIGN	0.9960895874684489	WITHOUT_CLASSIFICATION	0.003910412531551112	DESIGN
this is called by sessionfactory irregardless we just disregard here could also add a check to sessionfactory to only conditionally call stop	DESIGN	0.9961329748513911	WITHOUT_CLASSIFICATION	0.003867025148608878	DESIGN
todo to handle concurrent writes correctly this should return a lock to the client	DESIGN	0.99589177858303	DESIGN	0.0041082214169699365	WITHOUT_CLASSIFICATION
put() has nowait semantics is this really appropriate? note that it needs to be async replication never local or sync	DESIGN	0.6320701629717184	WITHOUT_CLASSIFICATION	0.36792983702828175	DESIGN
todo to handle concurrent writes correctly the client should pass in a lock	DESIGN	0.9529560675709003	DESIGN	0.04704393242909962	WITHOUT_CLASSIFICATION
todo assumes all collections disassemble to an array!	DESIGN	0.8838548566709321	WITHOUT_CLASSIFICATION	0.11614514332906792	DESIGN
todo reuse the preloadevent	DESIGN	0.9191042397925807	WITHOUT_CLASSIFICATION	0.0808957602074193	DESIGN
todo this was added to support initializing an entity's entityentry snapshot during reattach this should be refactored to instead expose a method to assemble a entityentry based on this state for return.	DESIGN	0.9967588913983382	DESIGN	0.0032411086016617408	WITHOUT_CLASSIFICATION
todo what is the implication of this?	DESIGN	0.9894904409387434	DESIGN	0.010509559061256661	WITHOUT_CLASSIFICATION
use count as the default. this mimics the old behavior although none might be a better option moving forward in the case of callable	DESIGN	0.9960341141764804	WITHOUT_CLASSIFICATION	0.003965885823519566	DESIGN
todo joinkeycolumnname & foreignkeycolumnname should be called either here or at a slightly higer level in the stack (to get all the information we need) right now hbmbinder does not support the	DESIGN	0.9432460160124477	DESIGN	0.056753983987552215	WITHOUT_CLASSIFICATION
todo suck this into initlaziness!	DESIGN	0.9515573378987364	DESIGN	0.04844266210126361	WITHOUT_CLASSIFICATION
we have to set up the table later!! yuck	DESIGN	0.9998678627928158	WITHOUT_CLASSIFICATION	1.321372071840971E-4	DESIGN
todo better to degrade to lazy="false" if uninstrumented	DESIGN	0.9497167046979342	DESIGN	0.05028329530206572	WITHOUT_CLASSIFICATION
todo again how should this work for non-pojo entities?	DESIGN	0.9955381075286948	DESIGN	0.0044618924713051645	WITHOUT_CLASSIFICATION
todo this is a bit of copy/paste from indexedcollection.createprimarykey()	DESIGN	0.9887588775715119	DESIGN	0.011241122428487984	WITHOUT_CLASSIFICATION
this inner class implements a case statement.perhaps im being a bit over-clever here	DESIGN	0.9973199957991536	WITHOUT_CLASSIFICATION	0.0026800042008464434	DESIGN
todo bad implementation cos it depends upon ordering of mapping doc fixing this requires that collection/persistentclass gain access to the mappings reference from configuration (or the filterdefinitions map directly) sometime during configuration.buildsessionfactory (after all the types/filter-defs are known and before building persisters).	DESIGN	0.9802476697184304	DESIGN	0.01975233028156957	WITHOUT_CLASSIFICATION
use of a stringbuffer to workaround a jdk bug	DESIGN	0.7060671600915267	DESIGN	0.2939328399084732	WITHOUT_CLASSIFICATION
hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9996053262635965	WITHOUT_CLASSIFICATION	3.9467373640336896E-4	DESIGN
fixme get the persistentclass	DESIGN	0.8617246077933501	WITHOUT_CLASSIFICATION	0.1382753922066499	DESIGN
fixme get the persistentclass	DESIGN	0.8617246077933501	WITHOUT_CLASSIFICATION	0.1382753922066499	DESIGN
icky workaround for mysql bug	DESIGN	0.8447743232330971	WITHOUT_CLASSIFICATION	0.15522567676690294	DESIGN
todo somehow add the newly created foreign keys to the internal collection	DESIGN	0.7502436583643558	DESIGN	0.2497563416356443	WITHOUT_CLASSIFICATION
todo possibly relax that	DESIGN	0.5934893149824041	WITHOUT_CLASSIFICATION	0.4065106850175958	DESIGN
todo possibly relax that	DESIGN	0.5934893149824041	WITHOUT_CLASSIFICATION	0.4065106850175958	DESIGN
todo possibly relax that	DESIGN	0.5934893149824041	WITHOUT_CLASSIFICATION	0.4065106850175958	DESIGN
use of a stringbuffer to workaround a jdk bug	DESIGN	0.7060671600915267	DESIGN	0.2939328399084732	WITHOUT_CLASSIFICATION
use a degenerated strategy for backward compatibility	DESIGN	0.9989147198188661	WITHOUT_CLASSIFICATION	0.0010852801811338476	DESIGN
sets can be just a view of a part of another collection. do we need to copy it to be sure it won't be changing underneath us? ie. this.set.addall(set)	DESIGN	0.9986693908614497	WITHOUT_CLASSIFICATION	0.001330609138550322	DESIGN
note that i parameter is now unused (delete it?)	DESIGN	0.9894548456942394	WITHOUT_CLASSIFICATION	0.010545154305760687	DESIGN
just to help out during the load (ugly i know)	DESIGN	0.9996508629687053	WITHOUT_CLASSIFICATION	3.4913703129462684E-4	DESIGN
todo safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.7178946743166988	WITHOUT_CLASSIFICATION	0.28210532568330127	DESIGN
yick! need this for proper serialization/deserialization handling	DESIGN	0.8959243615994387	WITHOUT_CLASSIFICATION	0.1040756384005614	DESIGN
todo get sql rendering out of this package!	DESIGN	0.8780824207973619	DESIGN	0.12191757920263806	WITHOUT_CLASSIFICATION
todo get sql rendering out of this package!	DESIGN	0.8780824207973619	DESIGN	0.12191757920263806	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
todo get sql rendering out of this package!	DESIGN	0.8780824207973619	DESIGN	0.12191757920263806	WITHOUT_CLASSIFICATION
todo not sure this is correct could not find docs on how to do this.	DESIGN	0.9786299265608008	DESIGN	0.021370073439199146	WITHOUT_CLASSIFICATION
hsql has no blob/clob support . but just put these here for now!	DESIGN	0.9982177605719933	WITHOUT_CLASSIFICATION	0.0017822394280067543	DESIGN
does this need holdlock also? return tablename + " with (updlock rowlock holdlock)"	DESIGN	0.9955262307398797	WITHOUT_CLASSIFICATION	0.004473769260120283	DESIGN
sql-server at least needed this dropped after use strange!	DESIGN	0.9977498187773761	WITHOUT_CLASSIFICATION	0.0022501812226237857	DESIGN
todo is there really any reason to kkeep trying if this fails once?	DESIGN	0.7307428642146042	DESIGN	0.2692571357853958	WITHOUT_CLASSIFICATION
tbd should this be varbinary($1)? registercolumntype(types.varbinary "binary($1)")	DESIGN	0.9864142833216515	WITHOUT_CLASSIFICATION	0.013585716678348651	DESIGN
is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9960944053596742	WITHOUT_CLASSIFICATION	0.003905594640325694	DESIGN
xmlforest requires a new kind of function constructor	DESIGN	0.9994004900940413	WITHOUT_CLASSIFICATION	5.995099059585965E-4	DESIGN
does this dialect support the alter table syntax?	DESIGN	0.9979797235385229	WITHOUT_CLASSIFICATION	0.0020202764614770025	DESIGN
do we need to qualify index names with the schema name?	DESIGN	0.9972866256721418	WITHOUT_CLASSIFICATION	0.0027133743278582386	DESIGN
does this dialect support the unique column syntax?	DESIGN	0.9827474099700778	WITHOUT_CLASSIFICATION	0.017252590029922188	DESIGN
does this dialect support check constraints?	DESIGN	0.9900043957894256	WITHOUT_CLASSIFICATION	0.00999560421057445	DESIGN
do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9970735711020828	WITHOUT_CLASSIFICATION	0.002926428897917254	DESIGN
does this dialect support the for update syntax?	DESIGN	0.9987517353363434	WITHOUT_CLASSIFICATION	0.0012482646636565718	DESIGN
does this dialect support the oracle-style for update nowait syntax?	DESIGN	0.9987517353363434	WITHOUT_CLASSIFICATION	0.0012482646636565718	DESIGN
does this dialect support for update of allowing particular rows to be locked?	DESIGN	0.9933385530291176	WITHOUT_CLASSIFICATION	0.006661446970882358	DESIGN
note there is a wierd implementation in the client side	DESIGN	0.9997170273000876	WITHOUT_CLASSIFICATION	2.8297269991239403E-4	DESIGN
todo never reached since gettypename() actually throws an exception!	DESIGN	0.8621402039670528	WITHOUT_CLASSIFICATION	0.13785979603294712	DESIGN
todo should we additionally check the current isolation mode explicitly?	DESIGN	0.8827806797735274	DESIGN	0.11721932022647258	WITHOUT_CLASSIFICATION
todo remove this and just have subclasses use isolater/isolatedwork directly	DESIGN	0.9915418289628651	DESIGN	0.00845817103713487	WITHOUT_CLASSIFICATION
todo should orphans really be deleted during lock???	DESIGN	0.7726109985866432	DESIGN	0.2273890014133569	WITHOUT_CLASSIFICATION
orphans should not be deleted during merge??	DESIGN	0.9986853651267188	WITHOUT_CLASSIFICATION	0.0013146348732811046	DESIGN
orphans should not be deleted during copy??	DESIGN	0.9986853651267188	WITHOUT_CLASSIFICATION	0.0013146348732811046	DESIGN
i suppose?	DESIGN	0.999518323412768	WITHOUT_CLASSIFICATION	4.816765872318873E-4	DESIGN
todo suck this logic into the collection!	DESIGN	0.6943374087960683	DESIGN	0.3056625912039316	WITHOUT_CLASSIFICATION
todo an alternative is to check if the owner has changed if it hasn't then get the id from collection.getowner()	DESIGN	0.7869368924205001	WITHOUT_CLASSIFICATION	0.2130631075794999	DESIGN
todorefactor + make this method private	DESIGN	0.9973363919206497	WITHOUT_CLASSIFICATION	0.00266360807935037	DESIGN
todo we can actually just determine this from the incoming entityentry-s	DESIGN	0.9776291014285424	DESIGN	0.022370898571457527	WITHOUT_CLASSIFICATION
todo should this be an initializeentityeventlistener??? (watch out for performance!)	DESIGN	0.9847301865422098	DESIGN	0.015269813457790188	WITHOUT_CLASSIFICATION
todo better to pass the id in as an argument?	DESIGN	0.7449830229309368	WITHOUT_CLASSIFICATION	0.2550169770690633	DESIGN
todo potentially look at optimizing these two arrays	DESIGN	0.8683024392455447	DESIGN	0.13169756075445527	WITHOUT_CLASSIFICATION
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.9245352129994172	DESIGN	0.07546478700058284	WITHOUT_CLASSIFICATION
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.9245352129994172	DESIGN	0.07546478700058284	WITHOUT_CLASSIFICATION
todo temporary	DESIGN	0.8868034320556395	DESIGN	0.11319656794436053	WITHOUT_CLASSIFICATION
todo not quite sure about the full implications of this!	DESIGN	0.5420647551522991	DESIGN	0.45793524484770104	WITHOUT_CLASSIFICATION
todo not quite sure about the full implications of this!	DESIGN	0.5420647551522991	DESIGN	0.45793524484770104	WITHOUT_CLASSIFICATION
todo ugly here	DESIGN	0.963445251601716	DESIGN	0.036554748398283925	WITHOUT_CLASSIFICATION
this is kinda the best we can do	DESIGN	0.9868010181800144	WITHOUT_CLASSIFICATION	0.013198981819985568	DESIGN
todo this needn't exclude subclasses	DESIGN	0.9068586429242493	DESIGN	0.09314135707575064	WITHOUT_CLASSIFICATION
todo need map? the prob is a proper key right?	DESIGN	0.9329612255203175	DESIGN	0.06703877447968255	WITHOUT_CLASSIFICATION
todo i'd much rather have this done from #endloadingcollection(collectionpersisterloadingcollectionentry)	DESIGN	0.9984535328637179	DESIGN	0.001546467136282153	WITHOUT_CLASSIFICATION
todo hack!!! note here we cleanup the load context when we have no more local lce entries. this "works" for the time being because really only the collection load contexts are implemented. long term this cleanup should become part of the "close result set" processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9836996491659576	DESIGN	0.016300350834042358	WITHOUT_CLASSIFICATION
todo should really move this log statement to collectiontype where this is used from	DESIGN	0.9994814549177422	DESIGN	5.185450822578089E-4	WITHOUT_CLASSIFICATION
todo keep seperate notions of qt[] here for shallow/non-shallow queries	DESIGN	0.6681957230801168	DESIGN	0.3318042769198833	WITHOUT_CLASSIFICATION
todo add this info to the translator and aggregate it here	DESIGN	0.7134369825680512	DESIGN	0.28656301743194895	WITHOUT_CLASSIFICATION
todo move into collection type so we can use polymorphism!	DESIGN	0.9971653141267423	DESIGN	0.0028346858732577985	WITHOUT_CLASSIFICATION
todo should we check the current isolation mode explicitly?	DESIGN	0.8829336911523927	DESIGN	0.11706630884760724	WITHOUT_CLASSIFICATION
todo suck into event class	DESIGN	0.5867067761261477	WITHOUT_CLASSIFICATION	0.4132932238738523	DESIGN
do we even really need this? the update will fail anyway.	DESIGN	0.9990307035275277	WITHOUT_CLASSIFICATION	9.692964724722962E-4	DESIGN
hum should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9939811620306344	WITHOUT_CLASSIFICATION	0.006018837969365662	DESIGN
todo would it be better to do a refresh from db?	DESIGN	0.9984932566540159	DESIGN	0.0015067433459840733	WITHOUT_CLASSIFICATION
todo we use two visitors here inefficient!	DESIGN	0.856439405829538	DESIGN	0.14356059417046202	WITHOUT_CLASSIFICATION
this class has no proxies (so do a shortcut)	DESIGN	0.9946412664875384	WITHOUT_CLASSIFICATION	0.005358733512461573	DESIGN
postload is needed for ejb3 todo reuse the postloadevent	DESIGN	0.5373761625740199	DESIGN	0.4626238374259802	WITHOUT_CLASSIFICATION
todo put this stuff back in to read snapshot from the second-level cache (needs some extra work)	DESIGN	0.5090413945478501	DESIGN	0.49095860545214975	WITHOUT_CLASSIFICATION
null or brand new collection this will also (inefficiently) handle arrays which have no snapshot so we can't do any better	DESIGN	0.8010423097693796	WITHOUT_CLASSIFICATION	0.1989576902306203	DESIGN
todo is this 100% correct?	DESIGN	0.9223155041761016	DESIGN	0.07768449582389832	WITHOUT_CLASSIFICATION
todo iteratively get transient entities and retry merge until one of the following conditions 1) transientcopycache.size() == 0 2) transientcopycache.size() is not decreasing and copycache.size() is not increasing todo find out if retrying can add entities to copycache (don't think it can) for now just retry once throw transientobjectexception if there are still any transient entities	DESIGN	0.5548348938254241	DESIGN	0.44516510617457583	WITHOUT_CLASSIFICATION
entity name will not be available for non-pojo entities todo cache the entity name somewhere so that it is available to this exception	DESIGN	0.9651629015842486	DESIGN	0.03483709841575145	WITHOUT_CLASSIFICATION
todo we should throw an exception if we really know for sure that this is a detached instance rather than just assuming throw new staleobjectstateexception(entityname id)	DESIGN	0.9885548822235697	DESIGN	0.011445117776430194	WITHOUT_CLASSIFICATION
todo perhaps we should additionally require that the incoming entity version be equivalent to the defined unsaved-value?	DESIGN	0.9728822169821386	DESIGN	0.027117783017861403	WITHOUT_CLASSIFICATION
perhaps this should be an exception since it is only ever used in the above method?	DESIGN	0.9988389338354001	WITHOUT_CLASSIFICATION	0.001161066164599914	DESIGN
put a placeholder in entries so we don't recurse back and try to save() the same object again. question should this be done before onsave() is called? likewise should it be done before onupdate()?	DESIGN	0.9777879490287226	WITHOUT_CLASSIFICATION	0.022212050971277354	DESIGN
todo merge into one method!	DESIGN	0.5393116066238779	DESIGN	0.46068839337612205	WITHOUT_CLASSIFICATION
todo refactor to .sql package	DESIGN	0.7457742655380285	DESIGN	0.25422573446197155	WITHOUT_CLASSIFICATION
provides query splitting methods which were originally in querytranslator. <br> todo this will need to be refactored at some point. @author josh	DESIGN	0.9883715473927198	DESIGN	0.011628452607280165	WITHOUT_CLASSIFICATION
todo this is one of the ugliest and most fragile pieces of code in hibernate.	DESIGN	0.9803803498600283	DESIGN	0.01961965013997175	WITHOUT_CLASSIFICATION
todo temporary needed because currently persister is the one that creates and renders the join fragments for inheritence hierarchies	DESIGN	0.98219651777267	DESIGN	0.017803482227329973	WITHOUT_CLASSIFICATION
todo better way?!?	DESIGN	0.6631188327509666	DESIGN	0.3368811672490334	WITHOUT_CLASSIFICATION
not possible to simply re-use the versionpropertynode here as it causes oom errors due to circularity (	DESIGN	0.9999727503645719	WITHOUT_CLASSIFICATION	2.7249635428172126E-5	DESIGN
todothis is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.998807529772931	WITHOUT_CLASSIFICATION	0.0011924702270690016	DESIGN
todo this is a bit dodgy come up with a better way to check this (plus see above comment)	DESIGN	0.9991744603762309	DESIGN	8.255396237691816E-4	WITHOUT_CLASSIFICATION
even here if only properties mapped to the "base table" are referenced in the set and where clauses this could be handled by the basicdelegate. todo decide if it is better performance-wise to perform that check or to simply use the multitableupdatedelegate	DESIGN	0.9999749742583782	DESIGN	2.5025741621852083E-5	WITHOUT_CLASSIFICATION
todo switch statements are always evil! we already had bugs because of forgotten token types. use polymorphism for this!	DESIGN	0.8993508188573742	DESIGN	0.1006491811426258	WITHOUT_CLASSIFICATION
todo we really need to be able to deal with component paths here also this is difficult because the hql-sql grammar expects all those node types to be fromreferencenodes. one potential fix here would be to convert the intoclause to just use a fromclause/fromelement combo (as a child of the insertstatement) and move all this logic into the insertstatement. that's probably the easiest approach (read least amount of changes to the grammar and code) but just doesn't feel right as then an insert would contain 2 from-clauses	DESIGN	0.9999367237977231	DESIGN	6.327620227683016E-5	WITHOUT_CLASSIFICATION
really there are two situations where it should be ok to allow the insertion into properties defined on a superclass 1) union-subclass with an abstract root entity 2) discrim-subclass #1 is handled already because of the fact that unionsubclasspersister alreay always returns 0 for this call we may want to disallow it for discrim-subclass just for consistency-sake (currently does not work anyway)	DESIGN	0.9774756256229675	DESIGN	0.02252437437703245	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
implicit joins are always(?) ok to reuse	DESIGN	0.9982250425876625	WITHOUT_CLASSIFICATION	0.0017749574123375697	DESIGN
todo we may also want to check that the types here map to exactly one column/jdbc-type can't think of a situation where arithmetic expression between multi-column mappings makes any sense.	DESIGN	0.9833234558365738	DESIGN	0.016676544163426208	WITHOUT_CLASSIFICATION
we do not know either type blind guess!	DESIGN	0.9990036474257454	WITHOUT_CLASSIFICATION	9.963525742545834E-4	DESIGN
todo used to be exprnoparens! was this needed?	DESIGN	0.9999989384091622	DESIGN	1.0615908378797206E-6	WITHOUT_CLASSIFICATION
todo replace this with a more elegant solution.	DESIGN	0.9965758316480531	DESIGN	0.003424168351946891	WITHOUT_CLASSIFICATION
todo should this really return null? if not figure out something better to do here.	DESIGN	0.8592470789568968	DESIGN	0.14075292104310325	WITHOUT_CLASSIFICATION
todo get sql rendering out of this package!	DESIGN	0.8780824207973619	DESIGN	0.12191757920263806	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
ignore it the incoming property could not be found so we cannot be sure what to do here. at the very least the safest is to simply not apply any dereference toggling	DESIGN	0.9202274802410814	WITHOUT_CLASSIFICATION	0.07977251975891869	DESIGN
todo most of below was taken verbatim from dotnode should either delegate this logic or super-type it	DESIGN	0.994758205700095	DESIGN	0.005241794299904982	WITHOUT_CLASSIFICATION
otherwise a trim-specification and/or a trim-character have been specified we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character the trim-source	DESIGN	0.9664251433578721	WITHOUT_CLASSIFICATION	0.03357485664212794	DESIGN
todo we should really just collect these from the various selectexpressions rather than regenerating here	DESIGN	0.9930566459085732	DESIGN	0.0069433540914268285	WITHOUT_CLASSIFICATION
todo is this a bit ugly?	DESIGN	0.9396197382165731	DESIGN	0.060380261783426786	WITHOUT_CLASSIFICATION
need a better way to define the suffixes here	DESIGN	0.9198998746473775	WITHOUT_CLASSIFICATION	0.08010012535262243	DESIGN
todo something much better - look at the type of the other expression! todo have comparisonexpression and/or arithmeticexpression rules complete the resolution of boolean nodes.	DESIGN	0.9203503938003217	DESIGN	0.0796496061996783	WITHOUT_CLASSIFICATION
todo what amount of significant digits need to be supported here? - from the decimalformat docs [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9448622090323302	DESIGN	0.05513779096766991	WITHOUT_CLASSIFICATION
needed the "clazz_" check to work around union-subclasses todo is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9824536650664586	DESIGN	0.017546334933541404	WITHOUT_CLASSIFICATION
we should actually rework this class to not implement parser and just process path expressions in the most convenient way.	DESIGN	0.8875899750491257	WITHOUT_CLASSIFICATION	0.11241002495087428	DESIGN
the class is now way to complex!	DESIGN	0.9996510825144895	WITHOUT_CLASSIFICATION	3.489174855104196E-4	DESIGN
todo get sql rendering out of here	DESIGN	0.8172813123657044	DESIGN	0.1827186876342955	WITHOUT_CLASSIFICATION
todo is there a better way?	DESIGN	0.9758256764537961	DESIGN	0.024174323546203944	WITHOUT_CLASSIFICATION
must be done here because of side-effect! yuck	DESIGN	0.9957200704333538	WITHOUT_CLASSIFICATION	0.004279929566646284	DESIGN
name from a super query (a bit inelegant that it shows up here)	DESIGN	0.9878737297174638	WITHOUT_CLASSIFICATION	0.012126270282536256	DESIGN
we should reengineer this class so that rather than the current ad - hoc linear approach to processing a stream of tokens we instead build up a tree of expressions.	DESIGN	0.9447732827596158	WITHOUT_CLASSIFICATION	0.05522671724038408	DESIGN
this is ugly here but needed because its a subquery	DESIGN	0.8101872992478834	WITHOUT_CLASSIFICATION	0.18981270075211673	DESIGN
unhappy about this being public is there a better way?	DESIGN	0.5662467191652588	DESIGN	0.4337532808347411	WITHOUT_CLASSIFICATION
make sure this is a defined parameter and check the incoming value type todo what should be the actual exception type here?	DESIGN	0.9996154825448367	DESIGN	3.845174551633145E-4	WITHOUT_CLASSIFICATION
todo this constructor form is only used from constructor directly below us can it go away?	DESIGN	0.9989463920657271	DESIGN	0.001053607934272918	WITHOUT_CLASSIFICATION
todo copy/paste from sessionimpl pull up!	DESIGN	0.6969807300115217	DESIGN	0.30301926998847833	WITHOUT_CLASSIFICATION
todo should remove this exposure and have all references to the session's batcher use the connectionmanager.	DESIGN	0.973775606644891	DESIGN	0.02622439335510887	WITHOUT_CLASSIFICATION
todo should this get moved to persistentcontext? logically is persistentcontext the "thing" to which an interceptor gets attached?	DESIGN	0.99439406931277	DESIGN	0.005605930687229993	WITHOUT_CLASSIFICATION
todo what type?	DESIGN	0.7607166897885632	DESIGN	0.23928331021143692	WITHOUT_CLASSIFICATION
todo should seriously consider not allowing a txn to begin from a child session can always route the request to the root session	DESIGN	0.9756055467320408	DESIGN	0.02439445326795915	WITHOUT_CLASSIFICATION
short-circuit for performance	DESIGN	0.9974240652372913	WITHOUT_CLASSIFICATION	0.0025759347627086395	DESIGN
not absolutely necessary but does help with aggressive release	DESIGN	0.9954778818098472	WITHOUT_CLASSIFICATION	0.004522118190152797	DESIGN
todo remove these last two as batcher is no longer managing connections	DESIGN	0.976190701446947	DESIGN	0.02380929855305305	WITHOUT_CLASSIFICATION
work around a bug in all known connection pools.	DESIGN	0.9958855725793851	WITHOUT_CLASSIFICATION	0.004114427420614829	DESIGN
todo make this the factory for "entity mode related" sessions also means making this the target of transaction-synch and the thing that knows how to cascade things between related sessions at that point perhaps this thing is a "sessioncontext" and connectionmanager is a "jdbccontext"? a "sessioncontext" should live in the impl package	DESIGN	0.9999899875220214	DESIGN	1.0012477978557428E-5	WITHOUT_CLASSIFICATION
todo does this really need to be here? does the collection already have it's own up-to-date snapshot?	DESIGN	0.9995141974551953	DESIGN	4.8580254480470143E-4	WITHOUT_CLASSIFICATION
todo the i==entityspan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.7068885348821415	DESIGN	0.2931114651178585	WITHOUT_CLASSIFICATION
this form used from annotations (?). essentially the same as the above using a resultset-mapping reference but without cachemode readonly and comment. fixme annotations do not use it so it can be remove from my pov @deprecated @param query the sql query string @param resultsetref the result-set-mapping name @param queryspaces any specified query spaces (used for auto-flushing) @param cacheable whether the query results are cacheable @param cacheregion if cacheable the region into which to store the results @param timeout a jdbc-level timeout to be applied @param fetchsize a jdbc-level fetch-size to be applied @param flushmode the flush mode to use for this query @param parametertypes parameter type map @param callable does the query string represent a callable object (i.e. proc)	DESIGN	0.9999998366083155	DESIGN	1.6339168454522415E-7	WITHOUT_CLASSIFICATION
todo add the notion of enabled filters to the cachekey to differentiate filtered collections from non-filtered but cachekey is currently used for both collections and entities would ideally need to define two seperate ones currently this works in conjuction with the check on defaultinitializecollectioneventhandler.initializecollectionfromcache() (which makes sure to not read from cache with enabled filters). early exit!!!!!	DESIGN	0.9179937756126012	DESIGN	0.08200622438739875	WITHOUT_CLASSIFICATION
for sets we should end the collection load after resolving the entities since we might call hashcode() on the elements todo or we could do this polymorphically and have two different operations implemented differently for arrays	DESIGN	0.9572505941991588	DESIGN	0.04274940580084119	WITHOUT_CLASSIFICATION
this is not very nice (and quite slow)	DESIGN	0.8276193456930789	WITHOUT_CLASSIFICATION	0.1723806543069212	DESIGN
use of trim() here is ugly?	DESIGN	0.9993055868824199	WITHOUT_CLASSIFICATION	6.944131175801537E-4	DESIGN
todo this is too conservative if all preceding joins were also inner joins we could use an inner join here	DESIGN	0.7059905917012139	DESIGN	0.29400940829878625	WITHOUT_CLASSIFICATION
todo look at the owning property and check that it isn't lazy (by instrumentation)	DESIGN	0.7497800072218381	WITHOUT_CLASSIFICATION	0.25021999277816187	DESIGN
todo inefficient	DESIGN	0.787884332025518	WITHOUT_CLASSIFICATION	0.21211566797448206	DESIGN
why does this matter?	DESIGN	0.9974504891128798	WITHOUT_CLASSIFICATION	0.002549510887120288	DESIGN
from the collection of associations locate oja for the manytoone corresponding to this persister to fully define the many-to-many we need that oja so that we can use its alias here todo is there a better way here?	DESIGN	0.9999797777321726	DESIGN	2.0222267827277734E-5	WITHOUT_CLASSIFICATION
todo this class depends directly upon criteriaimpl in the impl package add a criteriaimplementor interface	DESIGN	0.7378244442506653	DESIGN	0.26217555574933465	WITHOUT_CLASSIFICATION
todo add a criteriaimplementor interface this class depends directly upon criteriaimpl in the impl package	DESIGN	0.7378244442506653	DESIGN	0.26217555574933465	WITHOUT_CLASSIFICATION
todo not so sure this is needed	DESIGN	0.7395682933875797	DESIGN	0.26043170661242027	WITHOUT_CLASSIFICATION
meant to handle dynamic instantiation queries(copy from queryloader)	DESIGN	0.9919758306412839	WITHOUT_CLASSIFICATION	0.008024169358716058	DESIGN
todo the order in which entities are saved may matter (e.g. a particular transient entity may need to be saved before other transient entities can be saved keep retrying the batch of transient entities until either 1) there are no transient entities left in transientcopycache or 2) no transient entities were saved in the last batch for now just run through the transient entities and retry the merge	DESIGN	0.9779095914796575	WITHOUT_CLASSIFICATION	0.022090408520342428	DESIGN
todo this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9995348303145355	DESIGN	4.6516968546440743E-4	WITHOUT_CLASSIFICATION
todo currently expects that the individual with expressions apply to the same sql table join. this may not be the case for joined-subclass where the property values might be coming from different tables in the joined hierarchy. at some point we should expand this to support that capability. however that has some difficulties 1) the biggest is how to handle ors when the individual comparisons are linked to different sql joins. 2) here we would need to track each comparison individually along with the join alias to which it applies and then pass that information back to the fromelement so it can pass it along to the joinsequence	DESIGN	0.9996682684410486	DESIGN	3.3173155895139156E-4	WITHOUT_CLASSIFICATION
this function has a template -> restore output apply the template and write the result out todo downcast to avoid using an interface? yuck.	DESIGN	0.7810659746228495	DESIGN	0.21893402537715057	WITHOUT_CLASSIFICATION
at some point the generate phase needs to be moved out of here because a single object-level dml might spawn multiple sql dml command executions. possible to just move the sql generation for dml stuff but for consistency-sake probably best to just move responsiblity for the generation phase completely into the delegates (queryloader/statementexecutor) themselves. also not sure why queryloader currently even has a dependency on this at all does it need it? ideally like to see the walker itself given to the delegates directly	DESIGN	0.9999359065126819	DESIGN	6.409348731806729E-5	WITHOUT_CLASSIFICATION
get the right object from the list would it be easier to just call getentity() ??	DESIGN	0.9939980161473384	WITHOUT_CLASSIFICATION	0.006001983852661526	DESIGN
todo should we just collect these like with the collections above?	DESIGN	0.8338392651946063	DESIGN	0.16616073480539384	WITHOUT_CLASSIFICATION
todo better to handle dynamic filters through implicit dynamicfilterparameterspecification see the discussion there in dynamicfilterparameterspecification's javadocs as to why it is currently not done that way.	DESIGN	0.996086714866667	DESIGN	0.003913285133332929	WITHOUT_CLASSIFICATION
/ used only for regression testing!!!! todo obviously get rid of all this junk ) /	DESIGN	0.8999350147759798	DESIGN	0.10006498522402013	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9998045694245388	WITHOUT_CLASSIFICATION	1.9543057546113495E-4	DESIGN
todo deprecated remove eventually	DESIGN	0.986072883234866	DESIGN	0.013927116765133937	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9998045694245388	WITHOUT_CLASSIFICATION	1.9543057546113495E-4	DESIGN
todo improve this hack!	DESIGN	0.8087481209090174	DESIGN	0.1912518790909826	WITHOUT_CLASSIFICATION
inheritance cycle detection (paranoid check)	DESIGN	0.998695414082444	WITHOUT_CLASSIFICATION	0.0013045859175560399	DESIGN
todo remove use of instanceof!	DESIGN	0.7926536439002042	DESIGN	0.2073463560997957	WITHOUT_CLASSIFICATION
shortcut	DESIGN	0.9999275527481312	WITHOUT_CLASSIFICATION	7.24472518688628E-5	DESIGN
todo handle the case of a foreign key to something other than the pk	DESIGN	0.7461428480680689	WITHOUT_CLASSIFICATION	0.2538571519319312	DESIGN
create an index on the key columns??	DESIGN	0.9998045694245388	WITHOUT_CLASSIFICATION	1.9543057546113495E-4	DESIGN
todo remove	DESIGN	0.6830029415246177	DESIGN	0.31699705847538245	WITHOUT_CLASSIFICATION
todo remove	DESIGN	0.6830029415246177	DESIGN	0.31699705847538245	WITHOUT_CLASSIFICATION
todo remove	DESIGN	0.6830029415246177	DESIGN	0.31699705847538245	WITHOUT_CLASSIFICATION
todo throw exception?	DESIGN	0.5710343721209327	WITHOUT_CLASSIFICATION	0.4289656278790673	DESIGN
todo throw exception? maybe warn if not the same?	DESIGN	0.6953005431174178	DESIGN	0.30469945688258226	WITHOUT_CLASSIFICATION
todo make entitypersister not depend on sessionfactoryimplementor interface if possible	DESIGN	0.8121198585085382	DESIGN	0.18788014149146187	WITHOUT_CLASSIFICATION
todo is there a more elegant way than downcasting?	DESIGN	0.9971386735301555	DESIGN	0.002861326469844449	WITHOUT_CLASSIFICATION
todo encapsulate the protected instance variables!	DESIGN	0.6688288981804476	DESIGN	0.33117110181955256	WITHOUT_CLASSIFICATION
should indicate that we are processing an insert/update/delete query with a subquery implied via a collection property function. here we need to use the table name itself as the qualification alias. todo verify this works for all databases todo is this also the case in non-"indexed" scenarios?	DESIGN	0.9779989933127663	DESIGN	0.022001006687233777	WITHOUT_CLASSIFICATION
todo copy/paste from insertrows()	DESIGN	0.714896000316269	DESIGN	0.285103999683731	WITHOUT_CLASSIFICATION
todo copy/paste from recreate()	DESIGN	0.714896000316269	DESIGN	0.285103999683731	WITHOUT_CLASSIFICATION
should this interface extend propertymapping?	DESIGN	0.9458676283951577	WITHOUT_CLASSIFICATION	0.05413237160484224	DESIGN
ie. the subquery! yuck!	DESIGN	0.999957812974611	WITHOUT_CLASSIFICATION	4.2187025389020484E-5	DESIGN
todo move to .sql package!!	DESIGN	0.9168348648990834	DESIGN	0.0831651351009166	WITHOUT_CLASSIFICATION
todo code duplication with singletableentitypersister	DESIGN	0.8633265837135035	DESIGN	0.1366734162864966	WITHOUT_CLASSIFICATION
todo it would be really really nice to use this to also model components!	DESIGN	0.9975832033943528	DESIGN	0.002416796605647149	WITHOUT_CLASSIFICATION
todo two hashmap lookups here is one too many	DESIGN	0.7692095898841452	DESIGN	0.23079041011585472	WITHOUT_CLASSIFICATION
todo code duplication with joinedsubclassentitypersister	DESIGN	0.8633265837135035	DESIGN	0.1366734162864966	WITHOUT_CLASSIFICATION
perhaps not really necessary	DESIGN	0.9927564875307786	WITHOUT_CLASSIFICATION	0.007243512469221322	DESIGN
note this assumes something about how propertyselectfragment is implemented by the subclass! was tounqotedaliasstrings( getidentifercolumnnames() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.9912021648133887	WITHOUT_CLASSIFICATION	0.008797835186611272	DESIGN
note this assumes something about how propertyselectfragment is implemented by the subclass! was tounqotedaliasstrings( getdiscriminatorcolumnname() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.9912021648133887	WITHOUT_CLASSIFICATION	0.008797835186611272	DESIGN
todo should we use select .. for update?	DESIGN	0.9401359760587307	DESIGN	0.05986402394126935	WITHOUT_CLASSIFICATION
todo optimize this better!	DESIGN	0.6652418404691343	DESIGN	0.3347581595308657	WITHOUT_CLASSIFICATION
todo should we allow suffixes on these ?	DESIGN	0.9924679537753441	DESIGN	0.00753204622465592	WITHOUT_CLASSIFICATION
this is really ugly but necessary	DESIGN	0.6200990700965379	DESIGN	0.3799009299034621	WITHOUT_CLASSIFICATION
ugly little workaround for fact that createuniquekeyloaders() does not handle component properties	DESIGN	0.9996703632519787	DESIGN	3.296367480212364E-4	WITHOUT_CLASSIFICATION
todo disable batch loading if lockmode > read?	DESIGN	0.7168519748876548	WITHOUT_CLASSIFICATION	0.2831480251123452	DESIGN
append the sql to return the generated identifier todo suck into insert	DESIGN	0.7001218329158335	DESIGN	0.2998781670841664	WITHOUT_CLASSIFICATION
todo i am not so sure about the exception handling in this bit!	DESIGN	0.9520331746766747	DESIGN	0.047966825323325295	WITHOUT_CLASSIFICATION
todo is this really necessary????	DESIGN	0.9178465695540817	DESIGN	0.08215343044591826	WITHOUT_CLASSIFICATION
todo move to .sql package and refactor with similar things!	DESIGN	0.9945417903778832	DESIGN	0.0054582096221167985	WITHOUT_CLASSIFICATION
todo implement functionality this might be painful to do here as the "join post processing" for the subquery has already been performed (meaning that for theta-join dialects the join conditions have already been moved over to the where clause). a "simple" solution here might to perform "join post processing" once for the entire query (including any subqueries) at one fell swoop	DESIGN	0.9999977377219645	DESIGN	2.2622780354921117E-6	WITHOUT_CLASSIFICATION
todo this eventually needs to be removed	DESIGN	0.941085013750252	DESIGN	0.05891498624974797	WITHOUT_CLASSIFICATION
kinda ugly but needed for collections with a "." node mapping	DESIGN	0.9495572452959506	WITHOUT_CLASSIFICATION	0.05044275470404923	DESIGN
is this ok?	DESIGN	0.9997481015153087	WITHOUT_CLASSIFICATION	2.518984846912986E-4	DESIGN
todo perhaps this should be some other runtimeexception	DESIGN	0.999021032557068	DESIGN	9.789674429319887E-4	WITHOUT_CLASSIFICATION
todo make this a bit nicer	DESIGN	0.9174159984751431	DESIGN	0.08258400152485688	WITHOUT_CLASSIFICATION
yuck	DESIGN	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
todo we should provide some way to get keys of collection of statistics to make it easier to retrieve from a gui perspective	DESIGN	0.9986697060469311	DESIGN	0.001330293953068953	WITHOUT_CLASSIFICATION
@return collection removal fixme even if isinverse="true"?	DESIGN	0.9700019874938579	DESIGN	0.029998012506142088	WITHOUT_CLASSIFICATION
todo will need reference to session factory to fully complete hhh-1907	DESIGN	0.9806939431082835	DESIGN	0.01930605689171646	WITHOUT_CLASSIFICATION
todo currently keeps getters and setters (instead of propertyaccessors) because of the way getgetter() and getsetter() are implemented currently yuck!	DESIGN	0.6218884010903812	WITHOUT_CLASSIFICATION	0.37811159890961865	DESIGN
todo redesign how propertyaccessors are acquired	DESIGN	0.8778599325418037	DESIGN	0.12214006745819626	WITHOUT_CLASSIFICATION
todo yuck!!!	DESIGN	0.824800906753109	WITHOUT_CLASSIFICATION	0.17519909324689104	DESIGN
todo yuck!!! fix after hhh-1907 is complete	DESIGN	0.9609159134929075	DESIGN	0.03908408650709246	WITHOUT_CLASSIFICATION
todo need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9911195085673087	DESIGN	0.008880491432691347	WITHOUT_CLASSIFICATION
todo design new lifecycle for proxyfactory	DESIGN	0.7175472655920315	DESIGN	0.2824527344079684	WITHOUT_CLASSIFICATION
todo would be nice to handle proxy classes elegantly!	DESIGN	0.9691894869807944	DESIGN	0.030810513019205534	WITHOUT_CLASSIFICATION
todo copy/paste from manytoonetype	DESIGN	0.714896000316269	DESIGN	0.285103999683731	WITHOUT_CLASSIFICATION
todo should this be session.instantiate(persister )?	DESIGN	0.9747108736305244	DESIGN	0.025289126369475518	WITHOUT_CLASSIFICATION
todo this is a bit arbitrary expose a switch to the user?	DESIGN	0.9630032764177211	DESIGN	0.03699672358227888	WITHOUT_CLASSIFICATION
todo implement caching?! proxies?!	DESIGN	0.8651881559319325	DESIGN	0.13481184406806743	WITHOUT_CLASSIFICATION
todo is this right??	DESIGN	0.6835809222683993	DESIGN	0.31641907773160066	WITHOUT_CLASSIFICATION
is this really necessary?	DESIGN	0.998930728049704	WITHOUT_CLASSIFICATION	0.0010692719502960035	DESIGN
todo move these to a new joinabletype abstract class extended by entitytype and persistentcollectiontype	DESIGN	0.9983994000804443	DESIGN	0.0016005999195557127	WITHOUT_CLASSIFICATION
todo this is very suboptimal for some subclasses (namely components) since it does not take advantage of two-phase-load	DESIGN	0.9895416766882037	DESIGN	0.010458323311796372	WITHOUT_CLASSIFICATION
worrying about proxies is perhaps a little bit of overkill here	DESIGN	0.6937997841376461	WITHOUT_CLASSIFICATION	0.30620021586235385	DESIGN
note very hackish workaround!! todo fix this so it will work for non-pojo entity mode	DESIGN	0.9989605811289827	DESIGN	0.0010394188710173531	WITHOUT_CLASSIFICATION
todo fix this so it will work for non-pojo entity mode	DESIGN	0.9973048162989082	DESIGN	0.0026951837010918385	WITHOUT_CLASSIFICATION
we would probably refactor to have logicparser (builds a tree of simple expressions connected by and or not) expressionparser (translates from oo terms like foo foo.bar foo.bar.baz to sql terms like foos.id foos.bar_id etc) and pathexpressionparser (which does much the same thing it does now)	DESIGN	0.8584193843478681	WITHOUT_CLASSIFICATION	0.14158061565213187	DESIGN
todo this is a little inefficient don't need to do a whole deep replaceelements() call	DESIGN	0.9997593344002372	DESIGN	2.4066559976272255E-4	WITHOUT_CLASSIFICATION
workaround for weblogic	DESIGN	0.8889301395808343	WITHOUT_CLASSIFICATION	0.11106986041916571	DESIGN
todo this dependency is kinda bad	DESIGN	0.9991393829983963	DESIGN	8.606170016035902E-4	WITHOUT_CLASSIFICATION
ick!	DESIGN	0.9999146991904414	WITHOUT_CLASSIFICATION	8.530080955857961E-5	DESIGN
short cut check	DESIGN	0.9999450585839602	WITHOUT_CLASSIFICATION	5.4941416039790605E-5	DESIGN
todo move to stringhelper?	DESIGN	0.9168348648990834	DESIGN	0.0831651351009166	WITHOUT_CLASSIFICATION
yukky! don't you have subclasses for that! todo race conditions can happen here	DESIGN	0.8399539133314977	DESIGN	0.16004608666850237	WITHOUT_CLASSIFICATION
todo we probably should have a statisticsnotpublishedexception to make it clean	DESIGN	0.9943302822286673	DESIGN	0.00566971777133276	WITHOUT_CLASSIFICATION
fixme hack to work around fact that calling node added = root.addchild( fqn ) doesn't properly set the version on the node	DESIGN	0.9999818508358547	DESIGN	1.8149164145350397E-5	WITHOUT_CLASSIFICATION
todo i considered validating the presence of the ts cache here but decided to defer unti getquerycacheinstance() in case the cache is never actually used	DESIGN	0.6037117193152186	WITHOUT_CLASSIFICATION	0.39628828068478145	DESIGN
need to do that here rather than in the save event listener to let the post insert events to have a id-filled entity when identity is used (ejb3)	DESIGN	0.6136386710812926	DESIGN	0.38636132891870734	WITHOUT_CLASSIFICATION
todo simply remove this override if we fix the above todos	DESIGN	0.9844626216408827	DESIGN	0.015537378359117225	WITHOUT_CLASSIFICATION
this is used by sessionfactoryimpl to hand to the generated sessionimpl was the only reason i could see that we cannot just use null as settings.cacheprovider	DESIGN	0.8343969165403249	WITHOUT_CLASSIFICATION	0.16560308345967514	DESIGN
this is done here 'cos we might only know the type here (ugly!) todo improve this a lot	DESIGN	0.9979703839219289	DESIGN	0.002029616078070988	WITHOUT_CLASSIFICATION
todo would love to have this work on a notification basis where the successful binding of an entity/subclass would emit a notification which the extendsqueue entries could react to	DESIGN	0.921214858912329	DESIGN	0.07878514108767092	WITHOUT_CLASSIFICATION
todo not sure the best way to handle this. the non-performant way	DESIGN	0.6967024684304008	DESIGN	0.30329753156959915	WITHOUT_CLASSIFICATION
would be better to use the element-type to determine whether the old and the new are equal here the problem being we do not necessarily have access to the element type in all cases	DESIGN	0.9516775688874917	WITHOUT_CLASSIFICATION	0.048322431112508384	DESIGN
this next bit is to allow for both unsaved-value="negative" and for "older" behavior where version number did not get seeded if it was already set in the object todo shift it into unsaved-value strategy	DESIGN	0.9931271074228388	DESIGN	0.006872892577161167	WITHOUT_CLASSIFICATION
merges don't cascade to uninitialized collections todo perhaps this does need to cascade after all.	DESIGN	0.9986487124323669	DESIGN	0.0013512875676331068	WITHOUT_CLASSIFICATION
todo an alternative is to check if the owner has changed if it hasn't then return collection.getowner()	DESIGN	0.9439258338202394	WITHOUT_CLASSIFICATION	0.05607416617976059	DESIGN
it is possible that the tree-walking in outerjoinloader can get to an association defined by a subclass in which case the property-ref might refer to a property defined on a subclass of the current class in this case the table name is not known - this temporary solution assumes that the property-ref refers to a property of the subclass table that the association belongs to (a reasonable guess) todo fix this add outerjoinloadable.getsubclasspropertytablename(string propertyname)	DESIGN	0.9990852099981277	DESIGN	9.147900018724828E-4	WITHOUT_CLASSIFICATION
this only works because collection entries are kept in a sequenced map by persistence context (maybe we should do like entities and keep a separate sequences set) todo calling entryset on an identitymap is slow!!	DESIGN	0.9999681397836075	DESIGN	3.186021639243918E-5	WITHOUT_CLASSIFICATION
important to account for newly saved entities in query todo some kind of check for new status	DESIGN	0.8826788149385942	DESIGN	0.11732118506140565	WITHOUT_CLASSIFICATION
brand new collection todo or an array!! we can't lock objects with arrays now??	DESIGN	0.8961819061182006	DESIGN	0.10381809388179937	WITHOUT_CLASSIFICATION
todo if object was an uninitialized proxy this is inefficient resulting in two sql selects	DESIGN	0.8426335570961492	DESIGN	0.15736644290385088	WITHOUT_CLASSIFICATION
before cascade! todo should this be session.instantiate(persister )?	DESIGN	0.9543396589328176	DESIGN	0.04566034106718243	WITHOUT_CLASSIFICATION
todo absolutely no usages of this constructor form can it go away?	DESIGN	0.8468620103142224	DESIGN	0.15313798968577771	WITHOUT_CLASSIFICATION
todo need to find a clean way to handle the "event source" role a seperate classs responsible for generating/dispatching events just duplicates most of the session methods passing around seperate reto interceptor factory actionqueue and persistentcontext is not manageable	DESIGN	0.9999955498421991	DESIGN	4.4501578009876535E-6	WITHOUT_CLASSIFICATION
todo remove	DESIGN	0.6830029415246177	DESIGN	0.31699705847538245	WITHOUT_CLASSIFICATION
aliasrefnode.resolve( false false aliasrefnode.gettext() ) todo is it kosher to do it here? todo is it kosher to do it here?	DESIGN	0.9760059235233769	DESIGN	0.023994076476623088	WITHOUT_CLASSIFICATION
no explicit select expression render the id and properties projection lists for every persister in the from clause into a single 'token node'. todo the only reason we need this stuff now is collection filters we should get rid of derived select clause completely!	DESIGN	0.9994778824293762	DESIGN	5.221175706238499E-4	WITHOUT_CLASSIFICATION
todo an optimization here would be to consider cascade deletes and not gen those delete statements the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> the table info gotten here should really be self-contained (i.e. a class representation defining all the needed attributes) then we could then get an array of those	DESIGN	0.9535715234050328	DESIGN	0.0464284765949672	WITHOUT_CLASSIFICATION
todo get sql rendering out of here create an ast for the join expressions. use the sql generator grammar to generate the sql text for the index expression.	DESIGN	0.7455590428053113	WITHOUT_CLASSIFICATION	0.2544409571946888	DESIGN
todo this really needs to be delayed unitl after we definitively know all node types where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DESIGN	0.9210656005471181	DESIGN	0.07893439945288203	WITHOUT_CLASSIFICATION
todo figure out a better way to get the from elements in a proper tree structure. if this is not the destination of a many-to-many add it as a child of the origin.	DESIGN	0.660295389996829	DESIGN	0.33970461000317104	WITHOUT_CLASSIFICATION
work around that crazy issue where the tree contains "empty" fromelements (no text) afaict this is caused by fromelementfactory.createcollectionjoin()	DESIGN	0.786041622544482	WITHOUT_CLASSIFICATION	0.21395837745551807	DESIGN
todo this class does too many things! we need a different kind of path expression parser for each of the diffferent ways in which path expressions can occur	DESIGN	0.9545260957089414	DESIGN	0.045473904291058534	WITHOUT_CLASSIFICATION
real hacky used to count the nesting of parentheses	DESIGN	0.9986529173219595	WITHOUT_CLASSIFICATION	0.0013470826780405264	DESIGN
todo would be really nice to cache the spec on the query-def so as to not have to re-calc the hash currently not doable though because of the resultset-ref stuff	DESIGN	0.993949602588314	WITHOUT_CLASSIFICATION	0.006050397411686051	DESIGN
for arrays we should end the collection load before resolving the entities since the actual array instances are not instantiated during loading todo or we could do this polymorphically and have two different operations implemented differently for arrays	DESIGN	0.9353028114930324	DESIGN	0.06469718850696753	WITHOUT_CLASSIFICATION
polymorphism not really handled completely correctly perhapswell actually its ok assuming that the entity name used in the lookup is the same as the the one used here which it will be	DESIGN	0.9987326779068493	WITHOUT_CLASSIFICATION	0.0012673220931506747	DESIGN
todo should "record" how many properties we have reffered to - and if we don't get'em'all we throw an exception! way better than trial and error )	DESIGN	0.9999750328065383	DESIGN	2.496719346166223E-5	WITHOUT_CLASSIFICATION
very important!!!! - this class needs to be free of any static references to any cglib or javassist classes. otherwise users will always need both on their classpaths no matter which (if either) they use. another option here would be to remove the hibernate.ispropertyinitialized() method and have the users go through the sessionfactory to get this information.	DESIGN	0.5770220219067141	WITHOUT_CLASSIFICATION	0.42297797809328586	DESIGN
todo is it really neceassry to provide configuration to collectionpersisters ? should it not be enough with associated class ? or why does entitypersister's not get access to configuration ? the only reason i could see that configuration gets passed to collection persisters is so that they can look up the dom4j node name of the entity element in case no explicit node name was applied at the collection element level. are you kidding me? trivial to fix then. just store and expose the node name on the entity persister (which the collection persister looks up anyway via other means).	DESIGN	0.9997693805979139	DESIGN	2.3061940208611982E-4	WITHOUT_CLASSIFICATION
for backward compatibility allow a set with no not-null element columns using all columns in the row locater sql todo create an implicit not null constraint on all cols?	DESIGN	0.5016660929735275	DESIGN	0.49833390702647257	WITHOUT_CLASSIFICATION
spaces todo i'm not sure but perhaps we should exclude abstract denormalized tables?	DESIGN	0.9727731168901247	DESIGN	0.02722688310987528	WITHOUT_CLASSIFICATION
workaround for backward compatibility of sets with no not-null columns assume all columns are used in the row locator sql	DESIGN	0.9036586304473772	WITHOUT_CLASSIFICATION	0.09634136955262289	DESIGN
note that this method could easily be moved up to basicentitypersister if we ever needed to reuse it from other subclasses	DESIGN	0.9694992447817175	WITHOUT_CLASSIFICATION	0.030500755218282542	DESIGN
index += getpropertycolumnspan( i ) todo this is kinda slow	DESIGN	0.994797020990248	DESIGN	0.005202979009751979	WITHOUT_CLASSIFICATION
todo need some caching scheme? really comes down to decision regarding amount of state (if any) kept on propertyaccessors	DESIGN	0.64676339868253	DESIGN	0.35323660131747014	WITHOUT_CLASSIFICATION
todo here is why we need to make bytecode provider global ( todo again fix this after hhh-1907 is complete	DESIGN	0.999905804035589	DESIGN	9.419596441100683E-5	WITHOUT_CLASSIFICATION
todo yuck! this is not quite good enough it's a quick hack around the problem of having a to-one association that refers to an embedded component	DESIGN	0.9999995762553822	DESIGN	4.237446177927782E-7	WITHOUT_CLASSIFICATION
for dom4j "collections" only todo it would be better if this was done at the higher level by printer	DESIGN	0.9984356137673588	DESIGN	0.0015643862326412887	WITHOUT_CLASSIFICATION
would be great to move all this below here into another method that could also be used from the new scrolling stuff. would need to change the way the max-row stuff is handled (i.e. behind an interface) so that i could do the control breaking at the means to know when to stop	DESIGN	0.9984748136012978	DESIGN	0.0015251863987022346	WITHOUT_CLASSIFICATION
todo can we always use the "null property" approach for everything?	DESIGN	0.7716554180936039	DESIGN	0.22834458190639595	WITHOUT_CLASSIFICATION
polymorphism comment above	DESIGN	0.999992548872524	WITHOUT_CLASSIFICATION	7.451127476043362E-6	DESIGN
some messy complex stuff here since createcriteria() can take an aliased path or a path rooted at the creating criteria instance	DESIGN	0.9999882211473001	WITHOUT_CLASSIFICATION	1.1778852699947159E-5	DESIGN
todo really bad evil hack to fix!!!	DESIGN	0.9999787098420498	DESIGN	2.1290157950250303E-5	WITHOUT_CLASSIFICATION
ugly hack for cases like "elements(foo.bar.collection)" (multi-part path expression ending in elements or indices)	DESIGN	0.9863312813104089	DESIGN	0.013668718689591146	WITHOUT_CLASSIFICATION
try block is a hack around fact that currently tuplizers are not given the opportunity to resolve a subclass entity name. this allows the (we assume custom) interceptor the ability to influence this decision if we were not able to based on the given entityname	DESIGN	0.9969949098274968	DESIGN	0.0030050901725031305	WITHOUT_CLASSIFICATION
/ hack alert !!!!!!!!!!!!!!!!!!!!!!!!!!!! attempt to work around "ghost" impliedfromelements that occasionally show up between the actual things being joined. this consistently occurs from index nodes (at least against many-to-many). not sure if there are other conditions essentially look-ahead to the next fromelement that actually writes something to the sql	DESIGN	0.9505417378636424	DESIGN	0.049458262136357574	WITHOUT_CLASSIFICATION
init the table here instead of earlier so that we can get a quoted table name todo would it be better to simply pass the qualified table name instead of splitting it up into schema/catalog/table names	DESIGN	0.9682782954676034	DESIGN	0.03172170453239656	WITHOUT_CLASSIFICATION
todo would be great to have a mapping#hasnonidentifierpropertynamedid method i don't believe that mapping#getreferencedpropertytype accounts for the identifier property so if it returns for a property named 'id' then we should have a non-id field named id	DESIGN	0.9970849905026724	DESIGN	0.0029150094973276505	WITHOUT_CLASSIFICATION
todo is this really necessary????	DESIGN	0.9178465695540817	DESIGN	0.08215343044591826	WITHOUT_CLASSIFICATION
todo ideally we need the construction of propertyaccessor to take the following 1) entitymode 2) entitymode-specific data (i.e. the classname for pojo entities) 3) property-specific data based on the entitymode (i.e. property-name or dom4j-node-name) the easiest way with the introduction of the new runtime-metamodel classes would be the the following predicates 1) propertyaccessorfactory.getpropertyaccessor() takes references to both a org.hibernate.metadata.entitymodemetadata and org.hibernate.metadata.property 2) what is now termed a "propertyaccessor" stores any values needed from those two pieces of information 3) code can then simply call propertyaccess.getgetter() with no parameters likewise with propertyaccessor.getsetter()	DESIGN	0.995513536298862	DESIGN	0.004486463701137985	WITHOUT_CLASSIFICATION
todo this is temporary in that the end result will probably not take a property reference per-se.	DESIGN	0.9996262387770527	DESIGN	3.7376122294720965E-4	WITHOUT_CLASSIFICATION
todo this eventually needs to be removed	DESIGN	0.941085013750252	DESIGN	0.05891498624974797	WITHOUT_CLASSIFICATION
todo make this a bit nicer	DESIGN	0.9174159984751431	DESIGN	0.08258400152485688	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9995247527870345	DESIGN	4.752472129655162E-4	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9995247527870345	DESIGN	4.752472129655162E-4	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9995247527870345	DESIGN	4.752472129655162E-4	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9995247527870345	DESIGN	4.752472129655162E-4	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9995247527870345	DESIGN	4.752472129655162E-4	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9995247527870345	DESIGN	4.752472129655162E-4	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9995247527870345	DESIGN	4.752472129655162E-4	WITHOUT_CLASSIFICATION
todo we can remove this once the deprecated ctor can be made private	DESIGN	0.9995247527870345	DESIGN	4.752472129655162E-4	WITHOUT_CLASSIFICATION
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9940119381820294	DESIGN	0.005988061817970633	WITHOUT_CLASSIFICATION
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9940119381820294	DESIGN	0.005988061817970633	WITHOUT_CLASSIFICATION
fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties	DESIGN	0.9940119381820294	DESIGN	0.005988061817970633	WITHOUT_CLASSIFICATION
todo probably better to calculate these and pass them in as it'll be more performant	DESIGN	0.9934814757252983	DESIGN	0.006518524274701701	WITHOUT_CLASSIFICATION
