WITHOUT_CLASSIFICATION	test out the optimizer
WITHOUT_CLASSIFICATION	aload_0
WITHOUT_CLASSIFICATION	aload_0
WITHOUT_CLASSIFICATION	aload_0
WITHOUT_CLASSIFICATION	aload_0
WITHOUT_CLASSIFICATION	aload_0
WITHOUT_CLASSIFICATION	aload_0
WITHOUT_CLASSIFICATION	aload_0
WITHOUT_CLASSIFICATION	return
WITHOUT_CLASSIFICATION	return
WITHOUT_CLASSIFICATION	| this | bean | args | raw bean |
WITHOUT_CLASSIFICATION	invokeinterface
WITHOUT_CLASSIFICATION	astore 4 store the raw bean
WITHOUT_CLASSIFICATION	current stack len = 0
WITHOUT_CLASSIFICATION	current stack len = 0
WITHOUT_CLASSIFICATION	local variables | target obj | each oldvalue |
WITHOUT_CLASSIFICATION	invokeinterface invoke enabled.getinterceptfieldcallback()
WITHOUT_CLASSIFICATION	putfield new value of the field
WITHOUT_CLASSIFICATION	reference type
WITHOUT_CLASSIFICATION	double
WITHOUT_CLASSIFICATION	double
WITHOUT_CLASSIFICATION	long
WITHOUT_CLASSIFICATION	just decrement the lock don't recache (we don't know which transaction won)
WITHOUT_CLASSIFICATION	decode row selection
WITHOUT_CLASSIFICATION	disassembled state gets put in a new array (we write to cache by value!)
WITHOUT_CLASSIFICATION	again ccs did not have such a concept but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not jta aware.
WITHOUT_CLASSIFICATION	check
WITHOUT_CLASSIFICATION	row id
WITHOUT_CLASSIFICATION	composite-id
WITHOUT_CLASSIFICATION	discriminator
WITHOUT_CLASSIFICATION	property prop = new property() prop.setname("id") prop.setpropertyaccessorname("embedded") prop.setvalue(id) entity.setidentifierproperty(prop)
WITHOUT_CLASSIFICATION	dynamic insert
WITHOUT_CLASSIFICATION	persister
WITHOUT_CLASSIFICATION	get meta's from <subclass>
WITHOUT_CLASSIFICATION	properties
WITHOUT_CLASSIFICATION	properties
WITHOUT_CLASSIFICATION	generated properties can never be insertable
WITHOUT_CLASSIFICATION	table
WITHOUT_CLASSIFICATION	by default natural-ids are "immutable" (constant)
WITHOUT_CLASSIFICATION	( (column) ( (simplevalue) ic.getindex() ).getcolumniterator().next() ).setnullable(false)
WITHOUT_CLASSIFICATION	we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result
WITHOUT_CLASSIFICATION	build a resultsetmappingdefinition given a containing element for the "return-xxx" elements @param resultsetelem the element containing the return definitions. @param path no clue @param mappings the current processing state. @return the description of the mappings
WITHOUT_CLASSIFICATION	private boolean showsql private boolean formatsql
WITHOUT_CLASSIFICATION	public boolean isshowsqlenabled() { return showsql } public boolean isformatsqlenabled() { return formatsql }
WITHOUT_CLASSIFICATION	set a custom entity resolver. this entity resolver must be set before addxxx(misc) call. default value is {@link org.hibernate.util.dtdentityresolver} @param entityresolver entity resolver to use
WITHOUT_CLASSIFICATION	final list extendsqueue
WITHOUT_CLASSIFICATION	if close() is called guarantee unbind()
WITHOUT_CLASSIFICATION	if a threadlocalsessioncontext-bound session happens to get serialized to be completely correct we need to make sure that unbinding of that session occurs.
WITHOUT_CLASSIFICATION	on the inverse it makes sense that if a threadlocalsessioncontext- bound session then gets deserialized to go ahead and re-bind it to the threadlocalsessioncontext session map.
WITHOUT_CLASSIFICATION	cannot be instantiated
WITHOUT_CLASSIFICATION	60 second lock timeout
WITHOUT_CLASSIFICATION	optimisticcache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	option.setdataversion( nonlockingdataversion.instance )
WITHOUT_CLASSIFICATION	do the put outside the scope of the jta txn
WITHOUT_CLASSIFICATION	ignore!
WITHOUT_CLASSIFICATION	tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (npes)
WITHOUT_CLASSIFICATION	60 seconds
WITHOUT_CLASSIFICATION	ignore!
WITHOUT_CLASSIFICATION	60 seconds
WITHOUT_CLASSIFICATION	do the failfast put outside the scope of the jta txn
WITHOUT_CLASSIFICATION	note evict() operates locally only (i.e. does not propogate to any other nodes in the potential cluster). this is exactly what is needed when we destroy() here destroy() is used as part of the process of shutting down a sessionfactory thus these removals should not be propogated
WITHOUT_CLASSIFICATION	protected regionrootlistener listener
WITHOUT_CLASSIFICATION	establish the region root node with a non-locking data version
WITHOUT_CLASSIFICATION	if we've been blocking for the mutex perhaps another thread has already reestablished the root. in case the node was reestablised via replication confirm it's marked "resident" (a status which doesn't replicate)
WITHOUT_CLASSIFICATION	for pessimistic locking we just want to toss out our ref to any old invalid root node and get the latest (may be null)
WITHOUT_CLASSIFICATION	the rest only matters for optimistic locking where we need to establish the proper data version on the region root
WITHOUT_CLASSIFICATION	don't hold a transactional lock for this
WITHOUT_CLASSIFICATION	make sure the root node for the region exists and has a dataversion that never complains
WITHOUT_CLASSIFICATION	never evict this node
WITHOUT_CLASSIFICATION	fix up the resident flag
WITHOUT_CLASSIFICATION	60 seconds
WITHOUT_CLASSIFICATION	we ignore minimalputoverride. jbosscache putforexternalread is already about as minimal as we can get it will promptly return if it discovers that the node we want to write to already exists
WITHOUT_CLASSIFICATION	no-op. we don't own the cache so we shouldn't stop it.
WITHOUT_CLASSIFICATION	this should only be possible if the caches are constructor injected
WITHOUT_CLASSIFICATION	we only build caches if none were passed in. passing in caches counts as a clear statement of exactly what is wanted
WITHOUT_CLASSIFICATION	set up the cache factory
WITHOUT_CLASSIFICATION	see if the user configured a multiplexer stack
WITHOUT_CLASSIFICATION	default to collections sharing entity cache if there is one
WITHOUT_CLASSIFICATION	default to sharing the entity cache if there is one
WITHOUT_CLASSIFICATION	for timestamps we default to a separate config
WITHOUT_CLASSIFICATION	we can't change the tm on a running cache just check if the cache has no tm and we're ok with that
WITHOUT_CLASSIFICATION	configure the cache to use our tm
WITHOUT_CLASSIFICATION	make sure jbc doesn't look one up
WITHOUT_CLASSIFICATION	this method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start
WITHOUT_CLASSIFICATION	make sure we don't re-release the same cache
WITHOUT_CLASSIFICATION	we use a different delegate than the non-optimistic superclass default
WITHOUT_CLASSIFICATION	following methods we don't delegate since they have so little logic it's clearer to just implement them here
WITHOUT_CLASSIFICATION	if jbc is using invalidation we don't want to propagate changes. we use the timestamps cache to manage invalidation
WITHOUT_CLASSIFICATION	we don't want to waste effort setting an option if jbc is already in local mode. if jbc is repl_(a)sync then check if they passed an config option to disable query replication
WITHOUT_CLASSIFICATION	don't hold the jbc node lock throughout the tx as that prevents updates add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit
WITHOUT_CLASSIFICATION	double check the distributed cache
WITHOUT_CLASSIFICATION	get an exclusive right to update jbc for this key from this node.
WITHOUT_CLASSIFICATION	we ensure async semantics (jbcache-1175)
WITHOUT_CLASSIFICATION	initial load from jbc
WITHOUT_CLASSIFICATION	see if we had a 2nd invalidation from the same initial preinvalidation timestamp. if so only increment if the new current value is an increase
WITHOUT_CLASSIFICATION	we ensure async semantics (jbcache-1175)
WITHOUT_CLASSIFICATION	if the workspace node has null as well ok if not we've been modified in a non-comparable manner which we have to treat as us being newer
WITHOUT_CLASSIFICATION	the standard comparator types are not serializable but are singletons
WITHOUT_CLASSIFICATION	ignore!
WITHOUT_CLASSIFICATION	ignore it
WITHOUT_CLASSIFICATION	construct the cache
WITHOUT_CLASSIFICATION	local cache so we use synchronization
WITHOUT_CLASSIFICATION	local cache so we use synchronization
WITHOUT_CLASSIFICATION	ie. 60 seconds
WITHOUT_CLASSIFICATION	swaldman 2006-08-28 define c3p0-style configuration parameters for initialpoolsize which hibernate sensibly lets default to minpoolsize but we'll let users override it with the c3p0-style property if they want.
WITHOUT_CLASSIFICATION	datasource unpooled = datasources.unpooleddatasource(jdbcurl props.getproperty(environment.user) props.getproperty(environment.pass))
WITHOUT_CLASSIFICATION	true if the pool is borrowed from the outside false if we used to create it
WITHOUT_CLASSIFICATION	get a connection from the pool (thru drivermanager cfr. proxool doc)
WITHOUT_CLASSIFICATION	set the transaction isolation if defined
WITHOUT_CLASSIFICATION	toggle autocommit to false if set
WITHOUT_CLASSIFICATION	return the connection
WITHOUT_CLASSIFICATION	get the configurator files (if available)
WITHOUT_CLASSIFICATION	default the proxool alias setting
WITHOUT_CLASSIFICATION	validate that an alias name was provided to determine which pool to use
WITHOUT_CLASSIFICATION	validate that an alias name was provided to determine which pool to use
WITHOUT_CLASSIFICATION	append the stem to the proxool pool alias
WITHOUT_CLASSIFICATION	set the existing pool flag to true
WITHOUT_CLASSIFICATION	configured using the jaxp configurator
WITHOUT_CLASSIFICATION	validate that an alias name was provided to determine which pool to use
WITHOUT_CLASSIFICATION	append the stem to the proxool pool alias
WITHOUT_CLASSIFICATION	append the stem to the proxool pool alias
WITHOUT_CLASSIFICATION	configured using the properties file configurator
WITHOUT_CLASSIFICATION	remember isolation level
WITHOUT_CLASSIFICATION	if the provider was leeching off an existing pool don't close it
WITHOUT_CLASSIFICATION	we have created the pool ourselves so shut it down
WITHOUT_CLASSIFICATION	not really a many-to-one association necessarily
WITHOUT_CLASSIFICATION	not really a many-to-one association necessarily
WITHOUT_CLASSIFICATION	always overwrite nonversioned data
WITHOUT_CLASSIFICATION	public currency getcurrency(int col) throws hibernateexception
WITHOUT_CLASSIFICATION	default is pojo
WITHOUT_CLASSIFICATION	use setparameter for null values
WITHOUT_CLASSIFICATION	use setparameter for null values
WITHOUT_CLASSIFICATION	private cacheentry cacheentry
WITHOUT_CLASSIFICATION	don't need to lock the cache here since if someone else inserted the same pk first the insert would fail
WITHOUT_CLASSIFICATION	make 100% certain that this is called before any subsequent scheduledupdate.aftertransactioncompletion()!!
WITHOUT_CLASSIFICATION	get the updated snapshot of the entity state by cloning current state it is safe to copy in place since by this time no-one else (should have) has a reference to the array
WITHOUT_CLASSIFICATION	this entity defines proeprty generation so process those generated values
WITHOUT_CLASSIFICATION	have the entity entry perform post-update processing passing it the update state and the new version (if one).
WITHOUT_CLASSIFICATION	!persister.iscacheinvalidationrequired()
WITHOUT_CLASSIFICATION	need to look it up from the persistence-context
WITHOUT_CLASSIFICATION	sort first by role name
WITHOUT_CLASSIFICATION	make 100% certain that this is called before any subsequent scheduledupdate.aftertransactioncompletion()!!
WITHOUT_CLASSIFICATION	then by fk
WITHOUT_CLASSIFICATION	nothing to do
WITHOUT_CLASSIFICATION	nothing to do
WITHOUT_CLASSIFICATION	an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized hibernate has no way of knowing if the collection is actually empty without querying the db)
WITHOUT_CLASSIFICATION	this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner
WITHOUT_CLASSIFICATION	boolean put = persister.getcache().insert(ck cacheentry)
WITHOUT_CLASSIFICATION	we need to grab the version value from the entity otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush
WITHOUT_CLASSIFICATION	do nothing - we only need to notify the cache
WITHOUT_CLASSIFICATION	sort first by entity name
WITHOUT_CLASSIFICATION	then by id
WITHOUT_CLASSIFICATION	to be safe
WITHOUT_CLASSIFICATION	no transformations took place so handle it as we would a non-instrumented class
WITHOUT_CLASSIFICATION	see if the entry represents a class file
WITHOUT_CLASSIFICATION	see if the entry represents a class file
WITHOUT_CLASSIFICATION	intentionally empty
WITHOUT_CLASSIFICATION	test out the optimizer
WITHOUT_CLASSIFICATION	set the name of bulk accessor.
WITHOUT_CLASSIFICATION	aload_0
WITHOUT_CLASSIFICATION	invokespecial
WITHOUT_CLASSIFICATION	return
WITHOUT_CLASSIFICATION	aload_1 load bean
WITHOUT_CLASSIFICATION	checkcast cast bean
WITHOUT_CLASSIFICATION	astore_3 store bean
WITHOUT_CLASSIFICATION	aload_2 args
WITHOUT_CLASSIFICATION	iconst_i continue to aastore growing stack is 1
WITHOUT_CLASSIFICATION	new
WITHOUT_CLASSIFICATION	dup
WITHOUT_CLASSIFICATION	aload_3 load the raw bean
WITHOUT_CLASSIFICATION	invokeinterface
WITHOUT_CLASSIFICATION	invokevirtual
WITHOUT_CLASSIFICATION	invokevirtual
WITHOUT_CLASSIFICATION	aastore args
WITHOUT_CLASSIFICATION	| this | bean | args | i | raw bean | exception |
WITHOUT_CLASSIFICATION	required to exception table iconst_0 i
WITHOUT_CLASSIFICATION	istore_3 store i
WITHOUT_CLASSIFICATION	aload_1 load the bean
WITHOUT_CLASSIFICATION	checkcast cast the bean into a raw bean
WITHOUT_CLASSIFICATION	current stack len = 0
WITHOUT_CLASSIFICATION	start region to handling exception (bulkaccessorexception)
WITHOUT_CLASSIFICATION	iinc 3 1
WITHOUT_CLASSIFICATION	aload 4 load the raw bean
WITHOUT_CLASSIFICATION	aload_2 load the args
WITHOUT_CLASSIFICATION	iconst_i
WITHOUT_CLASSIFICATION	aaload
WITHOUT_CLASSIFICATION	checkcast
WITHOUT_CLASSIFICATION	checkcast (case of primitive type) invokevirtual (case of primitive type)
WITHOUT_CLASSIFICATION	checkcast (case of reference type)
WITHOUT_CLASSIFICATION	current stack len = 2
WITHOUT_CLASSIFICATION	end region to handling exception (bulkaccessorexception)
WITHOUT_CLASSIFICATION	register in exception table
WITHOUT_CLASSIFICATION	aload_0
WITHOUT_CLASSIFICATION	aload_0
WITHOUT_CLASSIFICATION	return
WITHOUT_CLASSIFICATION	return
WITHOUT_CLASSIFICATION	dup
WITHOUT_CLASSIFICATION	invokevirtual
WITHOUT_CLASSIFICATION	checkcast
WITHOUT_CLASSIFICATION	local variables | target obj | each oldvalue |
WITHOUT_CLASSIFICATION	astore 5 store exception
WITHOUT_CLASSIFICATION	new bulkaccessorexception
WITHOUT_CLASSIFICATION	aload 5 load exception
WITHOUT_CLASSIFICATION	iload_3 i
WITHOUT_CLASSIFICATION	invokespecial bulkaccessorexception.<init>
WITHOUT_CLASSIFICATION	athrow
WITHOUT_CLASSIFICATION	warning classfile only
WITHOUT_CLASSIFICATION	swallow
WITHOUT_CLASSIFICATION	local variable | this |
WITHOUT_CLASSIFICATION	aload_0 load this
WITHOUT_CLASSIFICATION	aload_0 load this
WITHOUT_CLASSIFICATION	getfield get field "$javassist_callback" defined already
WITHOUT_CLASSIFICATION	areturn return the value of the field
WITHOUT_CLASSIFICATION	local variables | this | callback |
WITHOUT_CLASSIFICATION	aload_1 load callback
WITHOUT_CLASSIFICATION	putfield put field "$javassist_callback" defined already
WITHOUT_CLASSIFICATION	case of non-static field
WITHOUT_CLASSIFICATION	getfield get each field
WITHOUT_CLASSIFICATION	invokeinterface invoke enabled.getinterceptfieldcallback()
WITHOUT_CLASSIFICATION	ifnonnull
WITHOUT_CLASSIFICATION	return each type
WITHOUT_CLASSIFICATION	return each type
WITHOUT_CLASSIFICATION	store_1 each type
WITHOUT_CLASSIFICATION	ldc name of the field
WITHOUT_CLASSIFICATION	load_1 each type
WITHOUT_CLASSIFICATION	invokeinterface invoke callback.read() each type
WITHOUT_CLASSIFICATION	int
WITHOUT_CLASSIFICATION	return
WITHOUT_CLASSIFICATION	dup
WITHOUT_CLASSIFICATION	invokeinterface
WITHOUT_CLASSIFICATION	checkcast
WITHOUT_CLASSIFICATION	checkcast
WITHOUT_CLASSIFICATION	invokeinterface enabled.getinterceptfieldcallback()
WITHOUT_CLASSIFICATION	invokeinterface enabled.getinterceptfieldcallback()
WITHOUT_CLASSIFICATION	ifnonnull (label1)
WITHOUT_CLASSIFICATION	load_1
WITHOUT_CLASSIFICATION	load_1
WITHOUT_CLASSIFICATION	putfield
WITHOUT_CLASSIFICATION	return
WITHOUT_CLASSIFICATION	ldc field name
WITHOUT_CLASSIFICATION	getfield old value of the field
WITHOUT_CLASSIFICATION	invokeinterface callback.write(..)
WITHOUT_CLASSIFICATION	reference type
WITHOUT_CLASSIFICATION	reference type
WITHOUT_CLASSIFICATION	not array
WITHOUT_CLASSIFICATION	array of reference type
WITHOUT_CLASSIFICATION	boolean
WITHOUT_CLASSIFICATION	byte
WITHOUT_CLASSIFICATION	char
WITHOUT_CLASSIFICATION	short
WITHOUT_CLASSIFICATION	double
WITHOUT_CLASSIFICATION	float
WITHOUT_CLASSIFICATION	float
WITHOUT_CLASSIFICATION	long
WITHOUT_CLASSIFICATION	long
WITHOUT_CLASSIFICATION	bad type
WITHOUT_CLASSIFICATION	bad type
WITHOUT_CLASSIFICATION	boolean byte char int short
WITHOUT_CLASSIFICATION	boolean byte char int short
WITHOUT_CLASSIFICATION	reference type
WITHOUT_CLASSIFICATION	double
WITHOUT_CLASSIFICATION	float
WITHOUT_CLASSIFICATION	float
WITHOUT_CLASSIFICATION	long
WITHOUT_CLASSIFICATION	bad type
WITHOUT_CLASSIFICATION	bad type
WITHOUT_CLASSIFICATION	boolean byte char int short
WITHOUT_CLASSIFICATION	skip finalize methods
WITHOUT_CLASSIFICATION	mainly for oscache
WITHOUT_CLASSIFICATION	decrement the lock
WITHOUT_CLASSIFICATION	create new lock that times out immediately
WITHOUT_CLASSIFICATION	recache the updated state
WITHOUT_CLASSIFICATION	noop
WITHOUT_CLASSIFICATION	null clientlock is remotely possible but will never happen in practice
WITHOUT_CLASSIFICATION	we really could refresh the item if it is not a lock but it might be slower return freshtimestamp < txtimestamp
WITHOUT_CLASSIFICATION	by requiring < we rely on lock timeout in the case of an unsuccessful update!
WITHOUT_CLASSIFICATION	the user provided resulttransformer not the one used with "select new". here to avoid mangling transformed/non-transformed results.
WITHOUT_CLASSIFICATION	disassemble positional parameters
WITHOUT_CLASSIFICATION	disassemble named parameters
WITHOUT_CLASSIFICATION	ie. 60 seconds
WITHOUT_CLASSIFICATION	noop
WITHOUT_CLASSIFICATION	noop
WITHOUT_CLASSIFICATION	noop
WITHOUT_CLASSIFICATION	this is called from settingsfactory irregardless trivial to simply disregard
WITHOUT_CLASSIFICATION	do nothing subclasses may override.
WITHOUT_CLASSIFICATION	do nothing subclasses may override.
WITHOUT_CLASSIFICATION	throw new unsupportedoperationexception("can't write to a readonly object")
WITHOUT_CLASSIFICATION	assembled state gets put in a new array (we read from cache by value!)
WITHOUT_CLASSIFICATION	persister.setidentifier(result id) before calling interceptor for consistency with normal load
WITHOUT_CLASSIFICATION	no-op ccs did not have such a concept
WITHOUT_CLASSIFICATION	no-op ccs did not have such a concept
WITHOUT_CLASSIFICATION	again ccs did not have such a concept but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not jta aware.
WITHOUT_CLASSIFICATION	again ccs did not have such a concept however a reasonable proximity is to clear the cache. for non-transaction aware caches we will also do a clear at the end of the transaction
WITHOUT_CLASSIFICATION	again ccs did not have such a concept however a reasonable proximity is to clear the cache. for non-transaction aware caches we will also do a clear at the end of the transaction
WITHOUT_CLASSIFICATION	classes mentioned in extends not available - so put it in queue
WITHOUT_CLASSIFICATION	get meta's from <hibernate-mapping>
WITHOUT_CLASSIFICATION	get meta's from <class>
WITHOUT_CLASSIFICATION	db-objectname
WITHOUT_CLASSIFICATION	mutable
WITHOUT_CLASSIFICATION	where
WITHOUT_CLASSIFICATION	check
WITHOUT_CLASSIFICATION	polymorphism
WITHOUT_CLASSIFICATION	todo
WITHOUT_CLASSIFICATION	id
WITHOUT_CLASSIFICATION	version / timestamp
WITHOUT_CLASSIFICATION	discriminator
WITHOUT_CLASSIFICATION	primary key constraint
WITHOUT_CLASSIFICATION	this is either a <version/> tag with no type attribute or a <timestamp/> tag
WITHOUT_CLASSIFICATION	for version properties marked as being generated make sure they are "always" generated aka "insert" is invalid this is dis-allowed by the dtd but just to make sure
WITHOUT_CLASSIFICATION	discriminator
WITHOUT_CLASSIFICATION	( (column) discrim.getcolumniterator().next() ).settype(type)
WITHOUT_CLASSIFICATION	go ahead and set the lazy here since pojo.proxy can override it.
WITHOUT_CLASSIFICATION	dynamic update
WITHOUT_CLASSIFICATION	import
WITHOUT_CLASSIFICATION	batch size
WITHOUT_CLASSIFICATION	select before update
WITHOUT_CLASSIFICATION	optimistic lock mode
WITHOUT_CLASSIFICATION	persister
WITHOUT_CLASSIFICATION	custom sql
WITHOUT_CLASSIFICATION	get meta's from <subclass>
WITHOUT_CLASSIFICATION	properties
WITHOUT_CLASSIFICATION	joined subclasses
WITHOUT_CLASSIFICATION	key
WITHOUT_CLASSIFICATION	check
WITHOUT_CLASSIFICATION	custom sql
WITHOUT_CLASSIFICATION	properties
WITHOUT_CLASSIFICATION	key
WITHOUT_CLASSIFICATION	model.getkey().settype( new type( model.getidentifier() ) )
WITHOUT_CLASSIFICATION	tablename
WITHOUT_CLASSIFICATION	join.getkey().settype( new type( lazz.getidentifier() ) )
WITHOUT_CLASSIFICATION	properties
WITHOUT_CLASSIFICATION	column(s)
WITHOUT_CLASSIFICATION	column index
WITHOUT_CLASSIFICATION	column unique-key
WITHOUT_CLASSIFICATION	automatically makes a column with the default name if none is specifed by xml
WITHOUT_CLASSIFICATION	for an any
WITHOUT_CLASSIFICATION	insertable simply because that is the user did not specify anything just override it
WITHOUT_CLASSIFICATION	the user specifically supplied insert="true" which constitutes an illegal combo
WITHOUT_CLASSIFICATION	properties generated on update can never be updateable
WITHOUT_CLASSIFICATION	updateable only because the user did not specify anything just override it
WITHOUT_CLASSIFICATION	the user specifically supplied update="true" which constitutes an illegal combo
WITHOUT_CLASSIFICATION	rolename
WITHOUT_CLASSIFICATION	fetch strategy
WITHOUT_CLASSIFICATION	table
WITHOUT_CLASSIFICATION	tablename = mappings.getnamingstrategy().propertytotablename( classname path )
WITHOUT_CLASSIFICATION	sort
WITHOUT_CLASSIFICATION	custom sql
WITHOUT_CLASSIFICATION	unsorted natural comparator.class.name
WITHOUT_CLASSIFICATION	orphan delete (used for programmer error detection)
WITHOUT_CLASSIFICATION	set up second pass
WITHOUT_CLASSIFICATION	an "embedded" component (composite ids and unique) note that this does not handle nested components
WITHOUT_CLASSIFICATION	a nested composite element
WITHOUT_CLASSIFICATION	for an any we will have to use reflection
WITHOUT_CLASSIFICATION	note special case one-to-one constrained=false cannot be proxied so default to join and non-lazy
WITHOUT_CLASSIFICATION	use old (hb 2.1) defaults if outer-join is specified
WITHOUT_CLASSIFICATION	lazy = !join
WITHOUT_CLASSIFICATION	generator
WITHOUT_CLASSIFICATION	id unsaved-value
WITHOUT_CLASSIFICATION	version unsaved-value
WITHOUT_CLASSIFICATION	not necessarily a unique property reference
WITHOUT_CLASSIFICATION	( (column) ( (simplevalue) ic.getindex() ).getcolumniterator().next() ).setnullable(false)
WITHOUT_CLASSIFICATION	contained elements
WITHOUT_CLASSIFICATION	for non-inverse one-to-many with a not-null fk add a backref!
WITHOUT_CLASSIFICATION	bind the where
WITHOUT_CLASSIFICATION	bind the order-by
WITHOUT_CLASSIFICATION	bind the filters
WITHOUT_CLASSIFICATION	overriding inherited meta attribute. hbx-621 & hbx-793
WITHOUT_CLASSIFICATION	first iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.
WITHOUT_CLASSIFICATION	mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a fqn (in the case of a pojo mapping).
WITHOUT_CLASSIFICATION	+ "_" + referencedcolumnname not used for backward compatibility
WITHOUT_CLASSIFICATION	sessionfactory name
WITHOUT_CLASSIFICATION	jdbc and connection settings
WITHOUT_CLASSIFICATION	jdbc and connection settings
WITHOUT_CLASSIFICATION	interrogate jdbc metadata
WITHOUT_CLASSIFICATION	user supplied jdbc connections
WITHOUT_CLASSIFICATION	use dialect default properties
WITHOUT_CLASSIFICATION	transaction settings
WITHOUT_CLASSIFICATION	sql generation settings
WITHOUT_CLASSIFICATION	query parser settings
WITHOUT_CLASSIFICATION	second-level / query cache
WITHOUT_CLASSIFICATION	the cache provider is needed when we either have second-level cache enabled or query cache enabled. note that usesecondlevelcache is enabled by default
WITHOUT_CLASSIFICATION	sql exception converter
WITHOUT_CLASSIFICATION	statistics and logging
WITHOUT_CLASSIFICATION	settings.setshowsqlenabled(showsql)
WITHOUT_CLASSIFICATION	settings.setformatsqlenabled(formatsql)
WITHOUT_CLASSIFICATION	schema export
WITHOUT_CLASSIFICATION	string provider = properties.getproperty( environment.bytecode_provider ) log.info( "bytecode provider name " + provider ) bytecodeprovider bytecodeprovider = buildbytecodeprovider( provider ) settings.setbytecodeprovider( bytecodeprovider )
WITHOUT_CLASSIFICATION	legacy behavior apply the bridge
WITHOUT_CLASSIFICATION	maybe a concrete sqlpropertyresult type but map is exactly what is required at the moment
WITHOUT_CLASSIFICATION	if dotted and not load-collection nor return-join regular property
WITHOUT_CLASSIFICATION	private componenttuplizerfactory componenttuplizerfactory todo hhh-3517 and hhh-1907 private bytecodeprovider bytecodeprovider
WITHOUT_CLASSIFICATION	public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	public componenttuplizerfactory getcomponenttuplizerfactory() { return componenttuplizerfactory }
WITHOUT_CLASSIFICATION	package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	void setshowsqlenabled(boolean b) { showsql = b } void setformatsqlenabled(boolean b) { formatsql = b }
WITHOUT_CLASSIFICATION	public bytecodeprovider getbytecodeprovider() { return bytecodeprovider } void setbytecodeprovider(bytecodeprovider bytecodeprovider) { this.bytecodeprovider = bytecodeprovider }
WITHOUT_CLASSIFICATION	using local since the inheritedmetas at this point is not the correct map since it is always the empty map
WITHOUT_CLASSIFICATION	private componenttuplizerfactory componenttuplizerfactory todo hhh-3517 and hhh-1907
WITHOUT_CLASSIFICATION	protected list extendsqueue
WITHOUT_CLASSIFICATION	extendsqueue = new arraylist()
WITHOUT_CLASSIFICATION	componenttuplizerfactory = new componenttuplizerfactory()
WITHOUT_CLASSIFICATION	if doc is null then for whatever reason the cached file cannot be used
WITHOUT_CLASSIFICATION	drop them in reverse order in case db needs it done that way
WITHOUT_CLASSIFICATION	public componenttuplizerfactory getcomponenttuplizerfactory() { return componenttuplizerfactory }
WITHOUT_CLASSIFICATION	this method may be called many times!!
WITHOUT_CLASSIFICATION	iterator iterator = extendsqueue.iterator()
WITHOUT_CLASSIFICATION	iterator iter = extendsqueue.iterator()
WITHOUT_CLASSIFICATION	found
WITHOUT_CLASSIFICATION	found
WITHOUT_CLASSIFICATION	settings.setcomponenttuplizerfactory( this.getcomponenttuplizerfactory() )
WITHOUT_CLASSIFICATION	private final list extendsqueue
WITHOUT_CLASSIFICATION	<string string>
WITHOUT_CLASSIFICATION	<string string>
WITHOUT_CLASSIFICATION	+ "_" + referencedcolumnname not used for backward compatibility
WITHOUT_CLASSIFICATION	set use_reflection_optimizer to false to fix hhh-227
WITHOUT_CLASSIFICATION	orphan delete not supported for entitymode.dom4j
WITHOUT_CLASSIFICATION	element = xmlhelper.generatedom4jelement( persister.getnodename() )
WITHOUT_CLASSIFICATION	intentionally empty
WITHOUT_CLASSIFICATION	orphan delete not supported for entitymode.dom4j
WITHOUT_CLASSIFICATION	element = xmlhelper.generatedom4jelement( persister.getnodename() )
WITHOUT_CLASSIFICATION	needed for soap libraries etc
WITHOUT_CLASSIFICATION	maintain correct duplication if loaded in a cartesian product
WITHOUT_CLASSIFICATION	the element has been removed from the set
WITHOUT_CLASSIFICATION	the element has changed
WITHOUT_CLASSIFICATION	careful these methods do not initialize the collection.
WITHOUT_CLASSIFICATION	needed so that we remove this collection from the second-level cache
WITHOUT_CLASSIFICATION	override on some subclasses
WITHOUT_CLASSIFICATION	override on some subclasses
WITHOUT_CLASSIFICATION	do this bit after setting initialized to true or it will recurse
WITHOUT_CLASSIFICATION	short-circuit(s) no new elements the old list contains only orphans no old elements so no orphans neither
WITHOUT_CLASSIFICATION	create the collection holding the orphans
WITHOUT_CLASSIFICATION	collect entityidentifier(s) of the current elements - add them into a hashset for fast access
WITHOUT_CLASSIFICATION	iterate over the old list
WITHOUT_CLASSIFICATION	(array==null) ? templist.size()
WITHOUT_CLASSIFICATION	intentionally empty
WITHOUT_CLASSIFICATION	(array==null) ? templist.get(i)
WITHOUT_CLASSIFICATION	write() -- doesn't
WITHOUT_CLASSIFICATION	write() -- doesn't
WITHOUT_CLASSIFICATION	amazingly these two will work because abstractcollection uses iterator() to fill the array
WITHOUT_CLASSIFICATION	needed for soap libraries etc
WITHOUT_CLASSIFICATION	finally what it's all about
WITHOUT_CLASSIFICATION	note that if we load this collection from a cartesian product the multiplicity would be broken so use an idbag instead
WITHOUT_CLASSIFICATION	anyway here we implement <set> semantics for a <one-to-many> <bag>!
WITHOUT_CLASSIFICATION	a shortcut if its location didn't change!
WITHOUT_CLASSIFICATION	search for it note that this code is incorrect for other than one-to-many
WITHOUT_CLASSIFICATION	needed for soap libraries etc
WITHOUT_CLASSIFICATION	a shortcut if its location didn't change!
WITHOUT_CLASSIFICATION	search for it note that this code is incorrect for other than one-to-many
WITHOUT_CLASSIFICATION	public boolean equals(object other) {read()return bag.equals(other)}public int hashcode(object other) {read()return bag.hashcode()}
WITHOUT_CLASSIFICATION	list operations
WITHOUT_CLASSIFICATION	pad with nulls from the current last element up to the new index
WITHOUT_CLASSIFICATION	needed for soap libraries etc
WITHOUT_CLASSIFICATION	needed for soap libraries etc
WITHOUT_CLASSIFICATION	from map
WITHOUT_CLASSIFICATION	from sortedmap
WITHOUT_CLASSIFICATION	inject the data
WITHOUT_CLASSIFICATION	cannot be instantiated
WITHOUT_CLASSIFICATION	default pool size 20
WITHOUT_CLASSIFICATION	trying via forname() first to be as close to drivermanager's semantics
WITHOUT_CLASSIFICATION	if debug level is enabled then log the password otherwise mask it
WITHOUT_CLASSIFICATION	register a cleanup synch
WITHOUT_CLASSIFICATION	wrap the session in the transaction-protection proxy
WITHOUT_CLASSIFICATION	then bind it
WITHOUT_CLASSIFICATION	try to make sure we don't wrap and already wrapped session
WITHOUT_CLASSIFICATION	allow these to go through the the real session no matter what
WITHOUT_CLASSIFICATION	limit the methods available if no transaction is active
WITHOUT_CLASSIFICATION	allow these (deprecated) methods to pass through
WITHOUT_CLASSIFICATION	serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	we could register the session against the transaction even though it is not started but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).
WITHOUT_CLASSIFICATION	cannot be instantiated
WITHOUT_CLASSIFICATION	private string propertyname
WITHOUT_CLASSIFICATION	public propertyprojection project() {return projections.property(getpropertyname())}
WITHOUT_CLASSIFICATION	string[] fk = stringhelper.qualify( "collection_" cp.getkeycolumnnames() )
WITHOUT_CLASSIFICATION	" collection_ where " +
WITHOUT_CLASSIFICATION	unsupported
WITHOUT_CLASSIFICATION	unsupported
WITHOUT_CLASSIFICATION	cannot be instantiated
WITHOUT_CLASSIFICATION	the following two lines were added to ensure that this.params is not null which can happen with two-deep nested subqueries
WITHOUT_CLASSIFICATION	with two-deep subqueries the same alias would get generated for both using the old method (criteriaquery.generatesqlalias()) so that is now used as a fallback if the main criteria alias isn't set
WITHOUT_CLASSIFICATION	implicit polymorphism not supported (would need a union)
WITHOUT_CLASSIFICATION	pull off the last " "
WITHOUT_CLASSIFICATION	$non-nls-1
WITHOUT_CLASSIFICATION	we have the form trim(trimsource) so we trim leading and trailing spaces
WITHOUT_CLASSIFICATION	we have the form trim(from trimsource). this is functionally equivalent to trim(trimsource)
WITHOUT_CLASSIFICATION	not_supported_should_use_jdbc3_preparedstatement.getgeneratedkeys_method
WITHOUT_CLASSIFICATION	potentialtrimcharacterargindex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly
WITHOUT_CLASSIFICATION	overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	oracle did add support for ansi case statements in 9i
WITHOUT_CLASSIFICATION	the standard sql function name is current_timestamp
WITHOUT_CLASSIFICATION	informix doesn't have a bit type
WITHOUT_CLASSIFICATION	or byte or text? or money
WITHOUT_CLASSIFICATION	strip table-owner because informix always returns constraint names as "<table-owner>.<constraint-name>"
WITHOUT_CLASSIFICATION	build the map of standard ansi sql aggregation functions ~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	pre h3.2 behavior super.getreturntype(ct m)
WITHOUT_CLASSIFICATION	finally use the sqltype if == on hibernate types did not find a match.
WITHOUT_CLASSIFICATION	because numeric can be anything
WITHOUT_CLASSIFICATION	constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	standard sql92 functions (can be overridden by subclasses)
WITHOUT_CLASSIFICATION	map second/minute/hour/day/month/year to ansi extract() override on subclasses
WITHOUT_CLASSIFICATION	register hibernate types for default use in scalar sqlquery type auto detection
WITHOUT_CLASSIFICATION	database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	identity support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	sequence support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	guid support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	by default we report no support
WITHOUT_CLASSIFICATION	by default we report no support for nowait lock semantics
WITHOUT_CLASSIFICATION	table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	sqlexception support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	ddl support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	grrr for differentiation of mysql storage engines
WITHOUT_CLASSIFICATION	informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	return false here as most databases do not properly support this construct
WITHOUT_CLASSIFICATION	mckoi has no known variation of a "select for update" syntax
WITHOUT_CLASSIFICATION	oracle8 and previous define only a "date" type which is used to represent all aspects of date/time
WITHOUT_CLASSIFICATION	starts with 1 implicitly
WITHOUT_CLASSIFICATION	" cascade"
WITHOUT_CLASSIFICATION	trim off the length/precision/scale
WITHOUT_CLASSIFICATION	public boolean droptemporarytableafteruse() {we have to because postgres sets current txto rollback only after a failed create tablereturn true}
WITHOUT_CLASSIFICATION	check violation
WITHOUT_CLASSIFICATION	unique violation
WITHOUT_CLASSIFICATION	foreign key violation
WITHOUT_CLASSIFICATION	overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	not null violation
WITHOUT_CLASSIFICATION	all other
WITHOUT_CLASSIFICATION	register the type of the out param - postgresql uses types.other
WITHOUT_CLASSIFICATION	seems to not really public boolean supportsrowvalueconstructorsyntax() { return true }
WITHOUT_CLASSIFICATION	seems to have spotty lob suppport
WITHOUT_CLASSIFICATION	hhh-2300
WITHOUT_CLASSIFICATION	ignore (probably h2 not in the classpath)
WITHOUT_CLASSIFICATION	numeric functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	string functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	time and date functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	system functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	not null is implicit
WITHOUT_CLASSIFICATION	23000 check constraint violation {0} 23001 unique index or primary key violation {0}
WITHOUT_CLASSIFICATION	display the dialect version.
WITHOUT_CLASSIFICATION	the rdms concat() function only supports 2 parameters
WITHOUT_CLASSIFICATION	dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	original dialect.java returns " for update"
WITHOUT_CLASSIFICATION	verify the state of this new method in hibernate 3.0 dialect.java
WITHOUT_CLASSIFICATION	origial dialect.java returns true
WITHOUT_CLASSIFICATION	the keyword used to specify a nullable column.
WITHOUT_CLASSIFICATION	sequence methods - start. the rdms dialect needs these
WITHOUT_CLASSIFICATION	methods to make it possible to use the native id generator
WITHOUT_CLASSIFICATION	the where clause was added to eliminate this statement from brute force searches.
WITHOUT_CLASSIFICATION	sequence methods - end
WITHOUT_CLASSIFICATION	overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	starts with 1 implicitly
WITHOUT_CLASSIFICATION	we must return a valid rdms/rsa command from this method to prevent rdms/rsa from issuing error 400
WITHOUT_CLASSIFICATION	used with drop table to delete all records in the table.
WITHOUT_CLASSIFICATION	rdms supports the union all clause.
WITHOUT_CLASSIFICATION	rdms has no known variation of a "select for update" syntax
WITHOUT_CLASSIFICATION	multi-param dialect functions
WITHOUT_CLASSIFICATION	function templates
WITHOUT_CLASSIFICATION	not null is implicit
WITHOUT_CLASSIFICATION	this assumes schema support which is present in 1.8.0 and later
WITHOUT_CLASSIFICATION	hsqldb only supports read_uncommitted transaction isolation
WITHOUT_CLASSIFICATION	multi-param string dialect functions
WITHOUT_CLASSIFICATION	multi-param numeric dialect functions
WITHOUT_CLASSIFICATION	multi-param date dialect functions
WITHOUT_CLASSIFICATION	simple nullability constraint
WITHOUT_CLASSIFICATION	overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	not final-static to avoid possible classcast exceptions if using different oracle drivers.
WITHOUT_CLASSIFICATION	register the type of the out param - an oracle specific type
WITHOUT_CLASSIFICATION	timesten has no blob/clob support but these types may be suitable for some applications. the length is limited to 4 million bytes.
WITHOUT_CLASSIFICATION	new methods in dialect3
WITHOUT_CLASSIFICATION	public boolean supportsforupdatenowait() {return false}
WITHOUT_CLASSIFICATION	timesten has no known variation of a "select for update" syntax
WITHOUT_CLASSIFICATION	iterate entries ordered by capacity to find first fit
WITHOUT_CLASSIFICATION	add new ordered map
WITHOUT_CLASSIFICATION	registercolumntype( types.varchar 16777215 "mediumtext" )
WITHOUT_CLASSIFICATION	overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	this assumes you will want to ignore any update counts
WITHOUT_CLASSIFICATION	sql server just returns automatically
WITHOUT_CLASSIFICATION	return "select current_timestamp from rdb$database"
WITHOUT_CLASSIFICATION	registercolumntype data types
WITHOUT_CLASSIFICATION	hibernate seems to ignore this type
WITHOUT_CLASSIFICATION	ibid for current_time and current_date
WITHOUT_CLASSIFICATION	tell hibernate to use getbytes instead of getbinarystream
WITHOUT_CLASSIFICATION	no batch statements
WITHOUT_CLASSIFICATION	we might want a special case for 192. this is very common for money types and here it is converted to 181
WITHOUT_CLASSIFICATION	no pointbase bit
WITHOUT_CLASSIFICATION	no pointbase tinyint
WITHOUT_CLASSIFICATION	pointbase has no known variation of a "select for update" syntax
WITHOUT_CLASSIFICATION	starts with 1 implicitly
WITHOUT_CLASSIFICATION	the current_timestamp is more accurate but only known to be supported in sql server 7.0 and later (i.e. sybase not known to support it at all)
WITHOUT_CLASSIFICATION	sql server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table
WITHOUT_CLASSIFICATION	here assume sqlserver2005 using snapshot isolation which does not have this problem
WITHOUT_CLASSIFICATION	registercolumntype( types.blob 16777215 "mediumblob" ) registercolumntype( types.blob 65535 "blob" )
WITHOUT_CLASSIFICATION	registercolumntype( types.clob 16777215 "mediumtext" ) registercolumntype( types.clob 65535 "text" )
WITHOUT_CLASSIFICATION	registercolumntype( types.varchar 16777215 "mediumtext" ) registercolumntype( types.varchar 65535 "text" )
WITHOUT_CLASSIFICATION	starts with 1 implicitly
WITHOUT_CLASSIFICATION	package-private
WITHOUT_CLASSIFICATION	sql server just returns automatically
WITHOUT_CLASSIFICATION	sybase bit type does not support null values
WITHOUT_CLASSIFICATION	this assumes you will want to ignore any update counts
WITHOUT_CLASSIFICATION	overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	you may still have other resultsets or update counts left to process here but you can't do it now or the resultset you just got will be closed
WITHOUT_CLASSIFICATION	not null (start with 1) is implicit
WITHOUT_CLASSIFICATION	overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	oracle driver reports to support getgeneratedkeys() but they only support the version taking an array of the names of the columns to be returned (via its returning clause). no other driver seems to support this overloaded version.
WITHOUT_CLASSIFICATION	multi-param string dialect functions
WITHOUT_CLASSIFICATION	multi-param numeric dialect functions
WITHOUT_CLASSIFICATION	multi-param date dialect functions
WITHOUT_CLASSIFICATION	add another (inner) nested select add the main query close off the inner nested select
WITHOUT_CLASSIFICATION	add the main query
WITHOUT_CLASSIFICATION	add the restriction to the outer select
WITHOUT_CLASSIFICATION	this assumes you will want to ignore any update counts
WITHOUT_CLASSIFICATION	you may still have other resultsets or update counts left to process here but you can't do it now or the resultset you just got will be closed
WITHOUT_CLASSIFICATION	overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	starts with 1 implicitly
WITHOUT_CLASSIFICATION	simple nullability constraint
WITHOUT_CLASSIFICATION	not final-static to avoid possible classcast exceptions if using different oracle drivers.
WITHOUT_CLASSIFICATION	register the type of the out param - an oracle specific type
WITHOUT_CLASSIFICATION	features which change between 8i 9i and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	features which remain constant across 8i 9i and 10g ~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	binary %stream character %stream
WITHOUT_CLASSIFICATION	getdefaultproperties().setproperty(environment.statement_batch_size no_batch)
WITHOUT_CLASSIFICATION	hibernate impelemnts cast in dialect.java
WITHOUT_CLASSIFICATION	aggregate functions shouldn't be registered right? registerfunction( "list" new standardsqlfunction("list"hibernate.string) ) stopped on $list
WITHOUT_CLASSIFICATION	ddl support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	below is for cache' that don't have str in 2007.1 there is str and we register str directly
WITHOUT_CLASSIFICATION	note that %string is deprecated
WITHOUT_CLASSIFICATION	%upper is deprecated
WITHOUT_CLASSIFICATION	the syntax used to add a foreign key constraint to a table.
WITHOUT_CLASSIFICATION	identifier-commalist
WITHOUT_CLASSIFICATION	identity support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	sequence support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	identifier-commalist
WITHOUT_CLASSIFICATION	the syntax used to add a column to a table
WITHOUT_CLASSIFICATION	completely optional cascading drop clause.
WITHOUT_CLASSIFICATION	lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	limit support (ala top) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	intersystems cache' does not current support "select for update" syntax set your transaction mode to read_committed before using
WITHOUT_CLASSIFICATION	overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	<string>
WITHOUT_CLASSIFICATION	callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	the keyword used to specify a nullable column.
WITHOUT_CLASSIFICATION	does the limit clause come at the start of the select statement rather than at the end?
WITHOUT_CLASSIFICATION	does the limit clause take a "maximum" row number instead of a total number of returned rows?
WITHOUT_CLASSIFICATION	the name of the sql function that transforms a string to lowercase
WITHOUT_CLASSIFICATION	create an outerjoingenerator for this dialect.
WITHOUT_CLASSIFICATION	the keyword used to insert a row without specifying any column values
WITHOUT_CLASSIFICATION	registerfunction( "trim" new standardsqlfunction( "trim" hibernate.string ) )
WITHOUT_CLASSIFICATION	skip the from keyword in params
WITHOUT_CLASSIFICATION	package
WITHOUT_CLASSIFICATION	potentialtrimcharacterargindex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly
WITHOUT_CLASSIFICATION	sqlfunction implementation
WITHOUT_CLASSIFICATION	conceivable that the dialect ctor could throw hibernateexceptions so don't re-wrap
WITHOUT_CLASSIFICATION	register the standard dialect resolver
WITHOUT_CLASSIFICATION	register resolvers set via environment property
WITHOUT_CLASSIFICATION	kept for backward compatibility until after the 3.1beta5 release of ha
WITHOUT_CLASSIFICATION	cache the hashcode
WITHOUT_CLASSIFICATION	the cascadingaction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	the cascadingaction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	delete does cascade to uninitialized collections
WITHOUT_CLASSIFICATION	orphans should be deleted during delete
WITHOUT_CLASSIFICATION	(lockmode) anything
WITHOUT_CLASSIFICATION	lock doesn't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	refresh doesn't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	evicts don't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	saves / updates don't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	orphans should be deleted during save/update
WITHOUT_CLASSIFICATION	for deprecated saveorupdatecopy()
WITHOUT_CLASSIFICATION	persists don't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	a proxy cannot be transient and it breaks foreignkeys.istransient
WITHOUT_CLASSIFICATION	replicate does cascade to uninitialized collections
WITHOUT_CLASSIFICATION	static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	handles arrays and newly instantiated collections
WITHOUT_CLASSIFICATION	actually the semantics of the next three are really "bag" note that unlike objects collection insertions updates deletions are not really remembered between flushes. we just re-use the same lists for convenience.
WITHOUT_CLASSIFICATION	add these directly to the executions queue
WITHOUT_CLASSIFICATION	continue loop
WITHOUT_CLASSIFICATION	sort the updates by fk
WITHOUT_CLASSIFICATION	sort the updates by pk
WITHOUT_CLASSIFICATION	the mapping of entity names to their latest batch numbers.
WITHOUT_CLASSIFICATION	the map of batch numbers to entityinsertaction lists
WITHOUT_CLASSIFICATION	optimize the hash size to eliminate a rehash.
WITHOUT_CLASSIFICATION	the list of entity names that indicate the batch number
WITHOUT_CLASSIFICATION	remove the current element from insertions. it will be added back later.
WITHOUT_CLASSIFICATION	the entity associated with the current action.
WITHOUT_CLASSIFICATION	there is already an existing batch for this type of entity. check to see if the latest batch is acceptable.
WITHOUT_CLASSIFICATION	now rebuild the insertions list. there is a batch for each entry in the name list.
WITHOUT_CLASSIFICATION	the current batch number is the latest batch for this entity type.
WITHOUT_CLASSIFICATION	loop through all the associations of the current entity and make sure that they are processed before the current batch number
WITHOUT_CLASSIFICATION	find the batch number associated with the current association if any.
WITHOUT_CLASSIFICATION	create a new batch for this type. the batch number is the number of current batches.
WITHOUT_CLASSIFICATION	loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.
WITHOUT_CLASSIFICATION	since this entity will now be processed in the latest possible batch we can be assured that it will come after all other associations there's not need to continue checking.
WITHOUT_CLASSIFICATION	cascade to current collection elements
WITHOUT_CLASSIFICATION	not really necessary but good for consistency
WITHOUT_CLASSIFICATION	we can't cascade to non-embedded elements
WITHOUT_CLASSIFICATION	a newly instantiated collection can't have orphans
WITHOUT_CLASSIFICATION	handle orphaned entities!!
WITHOUT_CLASSIFICATION	loaded entity instances by entityuniquekey
WITHOUT_CLASSIFICATION	identity map of entityentry instances by the entity instance
WITHOUT_CLASSIFICATION	entity proxies by entitykey
WITHOUT_CLASSIFICATION	snapshots of current database state for entities that have not been loaded
WITHOUT_CLASSIFICATION	identity map of array holder arrayholder instances by the array instance
WITHOUT_CLASSIFICATION	collection wrappers by the collectionkey key=collectionkey value=persistentcollection
WITHOUT_CLASSIFICATION	set of entitykeys of deleted objects
WITHOUT_CLASSIFICATION	properties that we have tried to load and not found in the database
WITHOUT_CLASSIFICATION	a list of collection wrappers that were instantiating during result set processing that we will need to initialize at the end of the query
WITHOUT_CLASSIFICATION	a container for collections we load up when the owning entity is not yet loaded for now this is purely transient!
WITHOUT_CLASSIFICATION	downgrade locks
WITHOUT_CLASSIFICATION	any earlier proxy takes precedence
WITHOUT_CLASSIFICATION	unwrap the object
WITHOUT_CLASSIFICATION	initialize + unwrap the object
WITHOUT_CLASSIFICATION	return the proxied object
WITHOUT_CLASSIFICATION	overwrite old proxy
WITHOUT_CLASSIFICATION	early exit
WITHOUT_CLASSIFICATION	or should it actually throw an exception?
WITHOUT_CLASSIFICATION	treat it just like a new collection
WITHOUT_CLASSIFICATION	do this work only at the very highest level of the load don't let this method be called recursively
WITHOUT_CLASSIFICATION	note that each iteration of the loop may add new elements
WITHOUT_CLASSIFICATION	it might be an unwrapped collection reference! try to find a wrapper (slowish)
WITHOUT_CLASSIFICATION	public boolean isnonexistant(entitykey key) {return nonexistantentitykeys.contains(key)}
WITHOUT_CLASSIFICATION	public boolean isnonexistant(entityuniquekey key) {return nonexistententityuniquekeys.contains(key)}
WITHOUT_CLASSIFICATION	iterate all the entities currently associated with the persistence context.
WITHOUT_CLASSIFICATION	does this entity entry pertain to the entity persister in which we are interested (owner)?
WITHOUT_CLASSIFICATION	check if the managed object is the parent
WITHOUT_CLASSIFICATION	otherwise the proxy was pruned during the serialization process
WITHOUT_CLASSIFICATION	adds remove as a sort-of alias for delete
WITHOUT_CLASSIFICATION	bad cast
WITHOUT_CLASSIFICATION	return lhspersister.getsubclasspropertycolumnnames(property)
WITHOUT_CLASSIFICATION	property-refs for associations defined on a component are not supported so no need to slice
WITHOUT_CLASSIFICATION	if there is no property-ref assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)
WITHOUT_CLASSIFICATION	handle a property-ref
WITHOUT_CLASSIFICATION	nativesqlqueryreturn
WITHOUT_CLASSIFICATION	final boolean forcecacherefresh
WITHOUT_CLASSIFICATION	why is all others non final ?
WITHOUT_CLASSIFICATION	this.forcecacherefresh = forcecacherefresh
WITHOUT_CLASSIFICATION	hella important optimization!!!
WITHOUT_CLASSIFICATION	return that.type.equals(type) && equalshelper.equals(that.value value)
WITHOUT_CLASSIFICATION	must occur after resolving identifiers!
WITHOUT_CLASSIFICATION	take a snapshot
WITHOUT_CLASSIFICATION	do a check
WITHOUT_CLASSIFICATION	the owning entity may have been deleted and its identifier unset due to identifier-rollback in which case try to look up its identifier from the persistence context
WITHOUT_CLASSIFICATION	do the work
WITHOUT_CLASSIFICATION	we've been here before
WITHOUT_CLASSIFICATION	it is or was referenced _somewhere_
WITHOUT_CLASSIFICATION	do the work
WITHOUT_CLASSIFICATION	if either its role changed
WITHOUT_CLASSIFICATION	or its key changed
WITHOUT_CLASSIFICATION	we will need to create new entries
WITHOUT_CLASSIFICATION	we will need to remove ye olde entries
WITHOUT_CLASSIFICATION	force initialize!
WITHOUT_CLASSIFICATION	else if it's elements changed
WITHOUT_CLASSIFICATION	attributes maintained between flush cycles
WITHOUT_CLASSIFICATION	session-start/post-flush persistent state
WITHOUT_CLASSIFICATION	allow the collectionsnapshot to be serialized
WITHOUT_CLASSIFICATION	attributes used only during flush cycle
WITHOUT_CLASSIFICATION	"current" means the reference that was found during flush()
WITHOUT_CLASSIFICATION	"loaded" means the reference that is consistent with the current database state
WITHOUT_CLASSIFICATION	during flush we navigate the object graph to collections and decide what to do with them
WITHOUT_CLASSIFICATION	if we instantiate a collection during the flush() process we must ignore it for the rest of the flush()
WITHOUT_CLASSIFICATION	new collections that get found + wrapped during flush shouldn't be ignored
WITHOUT_CLASSIFICATION	a newly wrapped collection is not dirty (or we get unnecessary version updates)
WITHOUT_CLASSIFICATION	collection.cleardirty()
WITHOUT_CLASSIFICATION	collection.cleardirty()
WITHOUT_CLASSIFICATION	detached collections that get found + reattached during flush shouldn't be ignored
WITHOUT_CLASSIFICATION	optimization
WITHOUT_CLASSIFICATION	optimization optimization
WITHOUT_CLASSIFICATION	re-snapshot
WITHOUT_CLASSIFICATION	for convenience to save some lookups
WITHOUT_CLASSIFICATION	note this is not updated when properties are fetched lazily!
WITHOUT_CLASSIFICATION	memory optimization
WITHOUT_CLASSIFICATION	use the id value of a newly instantiated instance as the unsaved-value
WITHOUT_CLASSIFICATION	copied from session
WITHOUT_CLASSIFICATION	this should not happen since the dtd prevents it
WITHOUT_CLASSIFICATION	joinprocessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the sql ast. 'hasfiltercondition' keeps track of that fact.
WITHOUT_CLASSIFICATION	the current join represents the join between a many-to-many association table and its "target" table. here we need to apply any additional filters defined specifically on the many-to-many
WITHOUT_CLASSIFICATION	check basic level one nullablilty
WITHOUT_CLASSIFICATION	values is not null and is checkable we'll look deeper
WITHOUT_CLASSIFICATION	for non null args check for components and elements containing components
WITHOUT_CLASSIFICATION	cache the hashcode
WITHOUT_CLASSIFICATION	persistent collections may have components
WITHOUT_CLASSIFICATION	check for all components values in the collection
WITHOUT_CLASSIFICATION	will check current level if some of them are not null or sublevels if they exist
WITHOUT_CLASSIFICATION	do the test
WITHOUT_CLASSIFICATION	if its an uninitialized proxy it can't be transient
WITHOUT_CLASSIFICATION	unwrap it
WITHOUT_CLASSIFICATION	see if the entity is already bound to this session if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is we rely on foreign keys to keep database integrity)
WITHOUT_CLASSIFICATION	an unfetched association can only point to an entity that already exists in the db
WITHOUT_CLASSIFICATION	let the interceptor inspect the instance to decide
WITHOUT_CLASSIFICATION	let the persister inspect the instance to decide
WITHOUT_CLASSIFICATION	we use the assumed value if there is one to avoid hitting the database
WITHOUT_CLASSIFICATION	hit the database after checking the session cache for a snapshot
WITHOUT_CLASSIFICATION	context-entity-identifier returns null explicitly if the entity is not associated with the persistence context so make some deeper checks
WITHOUT_CLASSIFICATION	int count = 0
WITHOUT_CLASSIFICATION	the first key found after the given key
WITHOUT_CLASSIFICATION	checkforend = false
WITHOUT_CLASSIFICATION	count++
WITHOUT_CLASSIFICATION	end of array start filling again from start
WITHOUT_CLASSIFICATION	we ran out of keys to try
WITHOUT_CLASSIFICATION	first element of array is reserved for the actual instance we are loading!
WITHOUT_CLASSIFICATION	the first id found after the given id
WITHOUT_CLASSIFICATION	we ran out of ids to try
WITHOUT_CLASSIFICATION	look for existing collection as part of the persistence context
WITHOUT_CLASSIFICATION	ignore this row of results! note the early exit
WITHOUT_CLASSIFICATION	initialize this collection
WITHOUT_CLASSIFICATION	create one
WITHOUT_CLASSIFICATION	warning can cause a recursive calls! (proxy initialization)
WITHOUT_CLASSIFICATION	there were no queued additions and the role has a cache
WITHOUT_CLASSIFICATION	and this is not a forced initialization during flush
WITHOUT_CLASSIFICATION	some filters affecting the collection are enabled on the session so do not do the put into the cache.
WITHOUT_CLASSIFICATION	cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	simple cache of param metadata based on query string. ideally the original "user-supplied query" string should be used to retreive this metadata (i.e. not the para-list-expanded query string) to avoid unnecessary cache entries. used solely for caching param metadata for native-sql queries see getsqlparametermetadata() for a discussion as to why
WITHOUT_CLASSIFICATION	the cache of the actual plans
WITHOUT_CLASSIFICATION	package
WITHOUT_CLASSIFICATION	package
WITHOUT_CLASSIFICATION	assumes that types are all of span 1
WITHOUT_CLASSIFICATION	for native-sql queries the param metadata is determined outside any relation to a query plan because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set which might not be the case up-front when param metadata would be most useful
WITHOUT_CLASSIFICATION	don't care
WITHOUT_CLASSIFICATION	recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	don't care
WITHOUT_CLASSIFICATION	note firstrow is zero-based
WITHOUT_CLASSIFICATION	break the outer loop !!!
WITHOUT_CLASSIFICATION	named parameter
WITHOUT_CLASSIFICATION	could be either an ordinal or jpa-positional parameter
WITHOUT_CLASSIFICATION	a peek ahead showed this as an jpa-positional parameter
WITHOUT_CLASSIFICATION	make sure this "name" is an integral
WITHOUT_CLASSIFICATION	pre-determine and cache the hashcode
WITHOUT_CLASSIFICATION	perform the actual work
WITHOUT_CLASSIFICATION	if everything went ok commit the transaction and close the obtained connection handle
WITHOUT_CLASSIFICATION	at some point the processing went bad so we need to 1) make sure the connection handle gets released 2) try to cleanup the jta context as much as possible
WITHOUT_CLASSIFICATION	finally handle the exception
WITHOUT_CLASSIFICATION	a "detached" collection that belonged to a different entity
WITHOUT_CLASSIFICATION	saveorupdatecopy() is deprecated!
WITHOUT_CLASSIFICATION	collectionpersister should not be null but we don't want to throw an exception if it is null
WITHOUT_CLASSIFICATION	otherwise a null or brand new collection this will also (inefficiently) handle arrays which have no snapshot so we can't do any better processarrayornewcollection(collection type)
WITHOUT_CLASSIFICATION	a "detached" collection that originally belonged to the same entity
WITHOUT_CLASSIFICATION	do nothing
WITHOUT_CLASSIFICATION	do nothing
WITHOUT_CLASSIFICATION	force a substitution!
WITHOUT_CLASSIFICATION	the user requested a "greater" (i.e. more restrictive) form of pessimistic lock
WITHOUT_CLASSIFICATION	the database now holds a lock + the object is flushed from the cache so release the soft lock
WITHOUT_CLASSIFICATION	now update the object .. has to be outside the main if block above (because of collections)
WITHOUT_CLASSIFICATION	search for collections by reachability updating their role. we don't want to touch collections reachable from a deleted object
WITHOUT_CLASSIFICATION	this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed
WITHOUT_CLASSIFICATION	note we need to do the wrap here even if its not "dirty" because collections need wrapping but changes to _them_ don't dirty the container. also for versioned data we need to wrap before calling searchfordirtycollections
WITHOUT_CLASSIFICATION	grab its state saved at deletion
WITHOUT_CLASSIFICATION	grab its current state
WITHOUT_CLASSIFICATION	schedule the update note that we intentionally do _not_ pass in currentpersistentstate!
WITHOUT_CLASSIFICATION	substitutes into values by side-effect
WITHOUT_CLASSIFICATION	give the interceptor a chance to process property values if the properties were modified by the interceptor we need to set them back to the object
WITHOUT_CLASSIFICATION	compare to cached state (ignoring collections unless versioned)
WITHOUT_CLASSIFICATION	if it was dirtied by a collection only
WITHOUT_CLASSIFICATION	increment the version number (if necessary)
WITHOUT_CLASSIFICATION	check nullability but do not perform command execute we'll use scheduled updates for that.
WITHOUT_CLASSIFICATION	give the interceptor a chance to modify property values
WITHOUT_CLASSIFICATION	now we might need to recalculate the dirtyproperties array
WITHOUT_CLASSIFICATION	use the current version
WITHOUT_CLASSIFICATION	interceptor returned null so do the dirtycheck ourself if possible
WITHOUT_CLASSIFICATION	object loaded by update()
WITHOUT_CLASSIFICATION	dirty check against the usual snapshot of the entity
WITHOUT_CLASSIFICATION	dirty check against the database snapshot if possible/necessary
WITHOUT_CLASSIFICATION	the interceptor handled the dirty checking
WITHOUT_CLASSIFICATION	even process null collections
WITHOUT_CLASSIFICATION	get the id from the object
WITHOUT_CLASSIFICATION	always do an insert and let it fail by constraint violation
WITHOUT_CLASSIFICATION	what is the version on the database?
WITHOUT_CLASSIFICATION	/ hhh-2378
WITHOUT_CLASSIFICATION	will result in a sql update
WITHOUT_CLASSIFICATION	else do nothing (don't even reassociate object!)
WITHOUT_CLASSIFICATION	no existing row - do an insert
WITHOUT_CLASSIFICATION	refresh() does not pass an entityname
WITHOUT_CLASSIFICATION	do not return a proxy! (this option indicates we are initializing a proxy)
WITHOUT_CLASSIFICATION	return a proxy if appropriate
WITHOUT_CLASSIFICATION	return existing object or initialized proxy (unless deleted)
WITHOUT_CLASSIFICATION	return new uninitialized proxy
WITHOUT_CLASSIFICATION	this object was already loaded
WITHOUT_CLASSIFICATION	entity was found in second-level cache
WITHOUT_CLASSIFICATION	make it circular-reference safe
WITHOUT_CLASSIFICATION	intializes result by side-effect
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	some statistics
WITHOUT_CLASSIFICATION	safe from concurrent modification because of how entrylist() is implemented on identitymap
WITHOUT_CLASSIFICATION	initialize dirty flags for arrays + collections with composite elements and reset reached doupdate etc.
WITHOUT_CLASSIFICATION	among other things updatereachables() will recursively load all collections that are moving roles. this might cause entities to be loaded.
WITHOUT_CLASSIFICATION	so this needs to be safe from concurrent modification problems. it is safe because of how identitymap implements entryset()
WITHOUT_CLASSIFICATION	update the status of the object and if necessary schedule an update
WITHOUT_CLASSIFICATION	schedule updates to collections
WITHOUT_CLASSIFICATION	we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	the database has changed now so the subselect results need to be invalidated
WITHOUT_CLASSIFICATION	if the collection is dereferenced remove from the session cache iter.remove() does not work since the entryset is not backed by the set
WITHOUT_CLASSIFICATION	otherwise recreate the mapping between the collection and its key
WITHOUT_CLASSIFICATION	get a snapshot
WITHOUT_CLASSIFICATION	package-private
WITHOUT_CLASSIFICATION	package-private
WITHOUT_CLASSIFICATION	key is an entity involved with the operation performed by the listener value is a flag indicating if the listener explicitly operates on the entity
WITHOUT_CLASSIFICATION	early exit!!!
WITHOUT_CLASSIFICATION	ie. the entity came in from update()
WITHOUT_CLASSIFICATION	before any callbacks etc so subdeletions see that this deletion happened first
WITHOUT_CLASSIFICATION	ensures that containing deletions happen before sub-deletions
WITHOUT_CLASSIFICATION	typefactory.deepcopy( currentstate proptypes persister.getpropertyupdateability() deletedstate session )
WITHOUT_CLASSIFICATION	cascade-delete to collections before the collection owner is deleted
WITHOUT_CLASSIFICATION	cascade-delete to many-to-one after the parent was deleted
WITHOUT_CLASSIFICATION	if it is an initialized proxy let cascade handle it later on
WITHOUT_CLASSIFICATION	assign the requested id to the proxy before reassociating the proxy
WITHOUT_CLASSIFICATION	an uninitialized proxy noop don't even need to return an id since it is never a save()
WITHOUT_CLASSIFICATION	initialize properties of the event
WITHOUT_CLASSIFICATION	return the id in the event object
WITHOUT_CLASSIFICATION	transient or deleted
WITHOUT_CLASSIFICATION	use the id assigned to the instance
WITHOUT_CLASSIFICATION	assume this is a newly instantiated transient object which should be saved rather than updated
WITHOUT_CLASSIFICATION	this is a transient object with existing persistent state not loaded by the session
WITHOUT_CLASSIFICATION	a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()
WITHOUT_CLASSIFICATION	cachedstate
WITHOUT_CLASSIFICATION	assume true since we don't really know and it doesn't matter
WITHOUT_CLASSIFICATION	a "detached" collection!
WITHOUT_CLASSIFICATION	if the collection belonged to a different entity clean up the existing state of the collection
WITHOUT_CLASSIFICATION	log.debug( "calling onload()" )
WITHOUT_CLASSIFICATION	early exit!
WITHOUT_CLASSIFICATION	note performexecutions() clears all collectionxxxxtion collections (the collection actions) in the session
WITHOUT_CLASSIFICATION	if no array holder we found an unwrappered array (this can't occur because we now always call wrap() before getting to here) return (ah==null) ? true searchfordirtycollections(ah type)
WITHOUT_CLASSIFICATION	if not wrappered yet its dirty (this can't occur because we now always call wrap() before getting to here) return ( ! (obj instanceof persistentcollection) ) ? true searchfordirtycollections( (persistentcollection) obj type )
WITHOUT_CLASSIFICATION	we need to check even if it was not initialized because of delayed adds!
WITHOUT_CLASSIFICATION	note early exit!
WITHOUT_CLASSIFICATION	find any entities that are still transient after retry
WITHOUT_CLASSIFICATION	early exit!
WITHOUT_CLASSIFICATION	check the persistence context for an entry relating to this entity to be merged
WITHOUT_CLASSIFICATION	we have specialized case of a detached entity from the perspective of the merge operation. specifically we have an incoming entity instance which has a corresponding entry in the current persistence context but registered under a different entity instance
WITHOUT_CLASSIFICATION	deleted
WITHOUT_CLASSIFICATION	before cascade!
WITHOUT_CLASSIFICATION	cascade first so that all unsaved objects get their copy created before we actually copy cascadeonmerge(event persister entity copycache cascades.cascade_before_merge)
WITHOUT_CLASSIFICATION	this bit is only really absolutely necessary for handling requestedid but is also good if we merge multiple object graphs since it helps ensure uniqueness
WITHOUT_CLASSIFICATION	continue we'll find out if it ends up not getting saved later
WITHOUT_CLASSIFICATION	cascade first so that all unsaved objects get their copy created before we actually copy
WITHOUT_CLASSIFICATION	check that entity id = requestedid
WITHOUT_CLASSIFICATION	before cascade!
WITHOUT_CLASSIFICATION	we got here because we assumed that an instance with an assigned id was detached when it was really persistent
WITHOUT_CLASSIFICATION	cascade first so that all unsaved objects get their copy created before we actually copy
WITHOUT_CLASSIFICATION	copyvalues works by reflection so explicitly mark the entity instance dirty
WITHOUT_CLASSIFICATION	early exit
WITHOUT_CLASSIFICATION	source.getbatcher().executebatch() found another way to ensure that all batched joined inserts have been executed
WITHOUT_CLASSIFICATION	substitutes into values by side-effect
WITHOUT_CLASSIFICATION	now done in entityidentityinsertaction persister.setidentifier( entity id source.getentitymode() )
WITHOUT_CLASSIFICATION	source.getpersistencecontext().removenonexist( new entitykey( id persister source.getentitymode() ) )
WITHOUT_CLASSIFICATION	keep the existing version number in the case of replicate!
WITHOUT_CLASSIFICATION	cascade-save to many-to-one before the parent is saved
WITHOUT_CLASSIFICATION	pass this as an argument only to avoid double looking
WITHOUT_CLASSIFICATION	the object is persistent
WITHOUT_CLASSIFICATION	the entity is associated with the session so check its status
WITHOUT_CLASSIFICATION	do nothing for persistent instances
WITHOUT_CLASSIFICATION	ie. e.status==deleted
WITHOUT_CLASSIFICATION	the object is transient or detached
WITHOUT_CLASSIFICATION	note early exit!
WITHOUT_CLASSIFICATION	private constructor - stops checkstyle from complaining.
WITHOUT_CLASSIFICATION	first try to find a matching constructor accepting a violatedconstraintnameextracter param
WITHOUT_CLASSIFICATION	eat it and try next
WITHOUT_CLASSIFICATION	otherwise try to use the no-arg constructor
WITHOUT_CLASSIFICATION	oracle sql-state code for deadlock
WITHOUT_CLASSIFICATION	collectionpropertymapping processes everything except 'index'.
WITHOUT_CLASSIFICATION	remove initial " "
WITHOUT_CLASSIFICATION	remove initial " and "
WITHOUT_CLASSIFICATION	beforeclasstokens.add("new") definitely don't have this!!
WITHOUT_CLASSIFICATION	notafterclasstokens.add("")
WITHOUT_CLASSIFICATION	just especially for the trivial collection filter
WITHOUT_CLASSIFICATION	update last non-whitespace token if necessary
WITHOUT_CLASSIFICATION	select-range is terminated by declaration of "from"
WITHOUT_CLASSIFICATION	scan for next non-whitespace token
WITHOUT_CLASSIFICATION	note this!!
WITHOUT_CLASSIFICATION	error message constants.
WITHOUT_CLASSIFICATION	handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	handle collection-fiter compilation. important note this is modifying the input (hql) tree not the output tree!
WITHOUT_CLASSIFICATION	show the modified ast.
WITHOUT_CLASSIFICATION	create a parameter specification for the collection filter
WITHOUT_CLASSIFICATION	use the delegate.
WITHOUT_CLASSIFICATION	use the delegate.
WITHOUT_CLASSIFICATION	get the names of the columns used to link between the collection owner and the collection elements.
WITHOUT_CLASSIFICATION	the path ast should be a dotnode and it should have been evaluated already.
WITHOUT_CLASSIFICATION	tell the dot node about the join type.
WITHOUT_CLASSIFICATION	re-arrange the tree so that the collection function is the root and the lhs is the path.
WITHOUT_CLASSIFICATION	don't forget to resolve the argument! resolve the collection function now.
WITHOUT_CLASSIFICATION	resolve everything up to this dot but don't resolve the placeholders yet.
WITHOUT_CLASSIFICATION	should mean that no such property was found
WITHOUT_CLASSIFICATION	was there an explicit select expression?
WITHOUT_CLASSIFICATION	attach any mapping-defined "order by" fragments
WITHOUT_CLASSIFICATION	use the explicitly declared select expression determine the return types indicated by each select token
WITHOUT_CLASSIFICATION	after that process the joins. invoke a delegate to do the work as this is farily complex.
WITHOUT_CLASSIFICATION	make #@%$^#^&# sure no alias is applied to the table name
WITHOUT_CLASSIFICATION	we need to generate ids as part of this bulk insert. note that this is only supported for sequence-style generators and post-insert-style generators basically only in-db generators
WITHOUT_CLASSIFICATION	use the delegate.
WITHOUT_CLASSIFICATION	we need to seed the version value as part of this bulk insert
WITHOUT_CLASSIFICATION	we need to wrtap the param in a cast()
WITHOUT_CLASSIFICATION	this is called when it's time to fully resolve a path expression.
WITHOUT_CLASSIFICATION	generate implicit joins only if necessary.
WITHOUT_CLASSIFICATION	notify the from element that it is being referenced by the select.
WITHOUT_CLASSIFICATION	turn off includesubclasses on all fromelements.
WITHOUT_CLASSIFICATION	create the node initially with the param name so that it shows appropriately in the "original text" attribute
WITHOUT_CLASSIFICATION	use the delegate resolve identifiers as from element aliases.
WITHOUT_CLASSIFICATION	select clauses for insert statements should alwasy be treated as shallow
WITHOUT_CLASSIFICATION	no need to even collect this information if the persister is considered multi-table
WITHOUT_CLASSIFICATION	make sure that the persister is versioned
WITHOUT_CLASSIFICATION	handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	use the delegate.
WITHOUT_CLASSIFICATION	--commented out by inspection (12/11/04 1056 am) int getwarningcount()
WITHOUT_CLASSIFICATION	alias references and identifiers use the same node class.
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	make a new one
WITHOUT_CLASSIFICATION	just do the regular thing if you can't find the ctor your ast must have default ctor to use this.
WITHOUT_CLASSIFICATION	initialize sql nodes here.
WITHOUT_CLASSIFICATION	semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	if template is null we just write the function out as it appears in the hql statement
WITHOUT_CLASSIFICATION	this function has a template -> redirect output and catch the arguments
WITHOUT_CLASSIFICATION	--- inner classes (moved here from sql-gen.g) ---
WITHOUT_CLASSIFICATION	check two "adjecent" nodes at the top of the from-clause tree
WITHOUT_CLASSIFICATION	/
WITHOUT_CLASSIFICATION	these are just two unrelated table references
WITHOUT_CLASSIFICATION	again both should be fromelements
WITHOUT_CLASSIFICATION	note firstrow is zero-based
WITHOUT_CLASSIFICATION	right represents a joins originating from left or both right and left reprersent joins originating from the same fromelement
WITHOUT_CLASSIFICATION	check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them
WITHOUT_CLASSIFICATION	right represents a joins originating from left
WITHOUT_CLASSIFICATION	all clear
WITHOUT_CLASSIFICATION	ignore the token class name parameter and use a specific token class.
WITHOUT_CLASSIFICATION	overriden to avoid system.exit
WITHOUT_CLASSIFICATION	overriden to avoid system.exit
WITHOUT_CLASSIFICATION	remember that ordinal parameters numbers are 1-based!!!
WITHOUT_CLASSIFICATION	don't care about other param types here just those explicitly user-defined
WITHOUT_CLASSIFICATION	if the query is already compiled skip the compilation.
WITHOUT_CLASSIFICATION	remember the parameters for the compilation.
WITHOUT_CLASSIFICATION	phase 1 parse the hql into an ast.
WITHOUT_CLASSIFICATION	phase 2 analyze the hql ast and produce an sql ast.
WITHOUT_CLASSIFICATION	phase 3 generate the sql.
WITHOUT_CLASSIFICATION	we do not actually propogate antlrexceptions as a cause so log it here for diagnostic purposes
WITHOUT_CLASSIFICATION	we do not actually propogate antlrexceptions as a cause so log it here for diagnostic purposes
WITHOUT_CLASSIFICATION	only needed during compilation phase
WITHOUT_CLASSIFICATION	transform the tree.
WITHOUT_CLASSIFICATION	parse the query string into an hql ast.
WITHOUT_CLASSIFICATION	delegate to the queryloader
WITHOUT_CLASSIFICATION	delegate to the queryloader
WITHOUT_CLASSIFICATION	delegate to the queryloader
WITHOUT_CLASSIFICATION	note ( max - 1 ) because first is zero-based while max is not
WITHOUT_CLASSIFICATION	-- package local methods for the queryloader delegate --
WITHOUT_CLASSIFICATION	if there are no collection fetches then no further checks are needed
WITHOUT_CLASSIFICATION	a shallow query is ok (although technically there should be no fetching here)
WITHOUT_CLASSIFICATION	should be the first but just to be safe
WITHOUT_CLASSIFICATION	use the delegate.
WITHOUT_CLASSIFICATION	use the delegate.
WITHOUT_CLASSIFICATION	impl note allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return
WITHOUT_CLASSIFICATION	otherwise we have a non-scalar select with defined collection fetch(es). make sure that there is only a single root entity in the return (no tuples)
WITHOUT_CLASSIFICATION	this is not strictly true. we actually just need to make sure that it is ordered by root-entity pk and that that order-by comes before any non-root-entity ordering
WITHOUT_CLASSIFICATION	paramtranslations = new parametertranslationsimpl( collectedparameterspecifications )
WITHOUT_CLASSIFICATION	we are already processing a dot-structure
WITHOUT_CLASSIFICATION	igndore it
WITHOUT_CLASSIFICATION	we are now at a new tree level
WITHOUT_CLASSIFICATION	[jsd] the fix for hhh-558
WITHOUT_CLASSIFICATION	if the token can tell us if it could be an identifier
WITHOUT_CLASSIFICATION	and the expected token type was an identifier then
WITHOUT_CLASSIFICATION	use the token as an identifier.
WITHOUT_CLASSIFICATION	add the token to the ast.
WITHOUT_CLASSIFICATION	(not (eq a b) ) => (ne a b)
WITHOUT_CLASSIFICATION	(not (ne a b) ) => (eq a b)
WITHOUT_CLASSIFICATION	(not (lt a b) ) => (ge a b)
WITHOUT_CLASSIFICATION	(not (ge a b) ) => (lt a b)
WITHOUT_CLASSIFICATION	(not (le a b) ) => (gt a b)
WITHOUT_CLASSIFICATION	(not (like a b) ) => (not_like a b)
WITHOUT_CLASSIFICATION	(not (not_like a b) ) => (like a b)
WITHOUT_CLASSIFICATION	(not (is_not_null a b) ) => (is_null a b)
WITHOUT_CLASSIFICATION	(not (between a b) ) => (not_between a b)
WITHOUT_CLASSIFICATION	initialize the error handling delegate.
WITHOUT_CLASSIFICATION	overriden to avoid system.exit
WITHOUT_CLASSIFICATION	if if otherwise handle the error normally.
WITHOUT_CLASSIFICATION	(not (not_between a b) ) => (between a b)
WITHOUT_CLASSIFICATION	this can never happen because this rule will always eliminate the child not.case notreturn x.getfirstchild() (not (not x) ) => (x)
WITHOUT_CLASSIFICATION	just add a 'not' parent.
WITHOUT_CLASSIFICATION	(eq null b) => (is_null b)
WITHOUT_CLASSIFICATION	(eq a null) => (is_null a)
WITHOUT_CLASSIFICATION	note because we're using astutil.createparent() the tree must be created from the bottom up. is empty x => (exists (query (select_from (from x) ) ) )
WITHOUT_CLASSIFICATION	add not if it's negated.
WITHOUT_CLASSIFICATION	create nodes that track line and column number.
WITHOUT_CLASSIFICATION	case 1 multi token keywords group by and order by the next token ( lt(2) ) should be 'by' otherwise this is just an ident.
WITHOUT_CLASSIFICATION	case 2 the current token is after from and before '.'.
WITHOUT_CLASSIFICATION	this handles hhh-354 where there is a strange property name in a where clause. if the lookahead contains a dot then something that isn't an ident
WITHOUT_CLASSIFICATION	see if the second lookahed token can be an identifier.
WITHOUT_CLASSIFICATION	set it!
WITHOUT_CLASSIFICATION	ignore
WITHOUT_CLASSIFICATION	strip the " where "
WITHOUT_CLASSIFICATION	don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail
WITHOUT_CLASSIFICATION	at the very least cleanup the data )
WITHOUT_CLASSIFICATION	first save off the pertinent ids as the return value
WITHOUT_CLASSIFICATION	jdbc params are 1-based
WITHOUT_CLASSIFICATION	jdbc params are 1-based
WITHOUT_CLASSIFICATION	start performing the updates
WITHOUT_CLASSIFICATION	first save off the pertinent ids saving the number of pertinent ids for return
WITHOUT_CLASSIFICATION	start performing the deletes
WITHOUT_CLASSIFICATION	otherwise everything ok.
WITHOUT_CLASSIFICATION	visit width-first then depth
WITHOUT_CLASSIFICATION	if the types report logical equivalence return true
WITHOUT_CLASSIFICATION	otherwise perform a "deep equivalence" check
WITHOUT_CLASSIFICATION	if there is no where node make one.
WITHOUT_CLASSIFICATION	inject the where after the parent
WITHOUT_CLASSIFICATION	never include subclasses for implied from elements.
WITHOUT_CLASSIFICATION	moved here from selectclause [jsd]
WITHOUT_CLASSIFICATION	/
WITHOUT_CLASSIFICATION	use the table fromelement and the property name to get the array of column names.
WITHOUT_CLASSIFICATION	set the attributes of the property reference expression.
WITHOUT_CLASSIFICATION	if the uresolved property path isn't set yet just use the property name.
WITHOUT_CLASSIFICATION	the 'from element' that the property is in.
WITHOUT_CLASSIFICATION	prepare the left hand side and get the data type.
WITHOUT_CLASSIFICATION	prepare the left hand side and get the data type.
WITHOUT_CLASSIFICATION	if this dot has already been resolved stop now.
WITHOUT_CLASSIFICATION	if there is no data type for this node and we're at the end of the path (top most dot node) then this might be a java constant.
WITHOUT_CLASSIFICATION	the property is a collection
WITHOUT_CLASSIFICATION	the property is a component
WITHOUT_CLASSIFICATION	the property is another class..
WITHOUT_CLASSIFICATION	otherwise this is a primitive type.
WITHOUT_CLASSIFICATION	foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)
WITHOUT_CLASSIFICATION	this 'dot' expression now refers to the resulting from element.
WITHOUT_CLASSIFICATION	always add the collection's query spaces.
WITHOUT_CLASSIFICATION	in non-select queries the only time we should need to join is if we are in a subquery from clause
WITHOUT_CLASSIFICATION	this is the regression style determination which matches the logic of the classic translator
WITHOUT_CLASSIFICATION	this 'dot' expression now refers to the resulting from element.
WITHOUT_CLASSIFICATION	even though we might find a pre-existing element by join path we may not be able to reuse it
WITHOUT_CLASSIFICATION	note addduplicatealias() already performs nullness checks on the alias.
WITHOUT_CLASSIFICATION	if the from-clauses are the same we can be a little more aggressive in terms of what we reuse
WITHOUT_CLASSIFICATION	again null != null here
WITHOUT_CLASSIFICATION	if this is an implied join in a from element then use the impled join type which is part of the tree parser's state (set by the gramamar actions).
WITHOUT_CLASSIFICATION	otherwise (subquery case) dont reuse the fromelement if we are processing the from-clause of the subquery
WITHOUT_CLASSIFICATION	we know only the lhs-hand type so use that
WITHOUT_CLASSIFICATION	the referenced node text is the special 'id'
WITHOUT_CLASSIFICATION	only the identifier property field name can be a reference to the associated entity's pk
WITHOUT_CLASSIFICATION	special shortcut for id properties skip the join! this must only occur at the _end_ of a path expression
WITHOUT_CLASSIFICATION	append the new property name onto the unresolved path.
WITHOUT_CLASSIFICATION	if the lhs is a collection use collectionpropertymapping
WITHOUT_CLASSIFICATION	tell the destination fromelement to 'includesubclasses'.
WITHOUT_CLASSIFICATION	use theta style (for regression) move the node up after the origin node.
WITHOUT_CLASSIFICATION	don't resolve the node again.
WITHOUT_CLASSIFICATION	for expected parameter type injection we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.
WITHOUT_CLASSIFICATION	we need to strip off the embedded parens so that sql-gen does not double these up
WITHOUT_CLASSIFICATION	we have something like "? [op] rhs"
WITHOUT_CLASSIFICATION	we have something like "lhs [op] ?"
WITHOUT_CLASSIFICATION	we know only the rhs-hand type so use that
WITHOUT_CLASSIFICATION	handle the (assumed) valid cases #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)
WITHOUT_CLASSIFICATION	one or the other needs to be a datetime for us to get into this method in the first place
WITHOUT_CLASSIFICATION	#3 - note that this is also true of "datetime - param"
WITHOUT_CLASSIFICATION	#2
WITHOUT_CLASSIFICATION	generate the inner join -- the elements need to be joined to the collection they are in.
WITHOUT_CLASSIFICATION	nothing to do
WITHOUT_CLASSIFICATION	the 'from element' that represents the elements of the collection.
WITHOUT_CLASSIFICATION	add the condition to the join sequence that qualifies the indexed element.
WITHOUT_CLASSIFICATION	sometimes use the element table alias sometimes use the umm collection table alias (many to many)
WITHOUT_CLASSIFICATION	now set the text for this node. it should be the element columns.
WITHOUT_CLASSIFICATION	get the function return value type based on the type of the first argument.
WITHOUT_CLASSIFICATION	this will call initialize(tok)!
WITHOUT_CLASSIFICATION	mutation depends on the types of nodes invloved
WITHOUT_CLASSIFICATION	"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding
WITHOUT_CLASSIFICATION	logic operators by definition resolve to booleans
WITHOUT_CLASSIFICATION	generated select expressions are already resolved nothing to do.
WITHOUT_CLASSIFICATION	the path may be a reference to an alias defined in the parent query.
WITHOUT_CLASSIFICATION	the hql class alias refers to the class name.
WITHOUT_CLASSIFICATION	associate the table alias with the element.
WITHOUT_CLASSIFICATION	try the parent fromclause
WITHOUT_CLASSIFICATION	add the new node to the map so that we don't create it twice.
WITHOUT_CLASSIFICATION	make sure that all from elements registered with this from clause are actually in the ast.
WITHOUT_CLASSIFICATION	invoke setscalarcolumntext on each constructor argument.
WITHOUT_CLASSIFICATION	collect the select expressions skip the first child because it is the class name.
WITHOUT_CLASSIFICATION	return an empty type array
WITHOUT_CLASSIFICATION	constructors are always considered scalar results.
WITHOUT_CLASSIFICATION	this is the exception returned by reflecthelper.getconstructor() if it cannot locate an appropriate constructor
WITHOUT_CLASSIFICATION	if there is no order by make one
WITHOUT_CLASSIFICATION	find the where if there is no where find the from
WITHOUT_CLASSIFICATION	now inject the newly built order by into the tree
WITHOUT_CLASSIFICATION	parametercontainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	logic operators by definition resolve to boolean.
WITHOUT_CLASSIFICATION	render the identifier select fragment using the table alias.
WITHOUT_CLASSIFICATION	class names in the from clause result in a joinsequence (the old fromparser does this).
WITHOUT_CLASSIFICATION	for many-to-many joins use the tablename from the queryable collection for the default text.
WITHOUT_CLASSIFICATION	otherwise use the property mapping.
WITHOUT_CLASSIFICATION	should be safe to only ever expect entitypersister references here
WITHOUT_CLASSIFICATION	if the property is a special collection property name return a collectionpropertymapping.
WITHOUT_CLASSIFICATION	collection of components.
WITHOUT_CLASSIFICATION	make sure the lhs is "assignable"
WITHOUT_CLASSIFICATION	false indicates to not generate parens around the assignment
WITHOUT_CLASSIFICATION	register the fromelement with the from clause now that we have the names and aliases.
WITHOUT_CLASSIFICATION	currently allowed
WITHOUT_CLASSIFICATION	hhh-276 implied joins in a subselect where clause - the destination needs to be added to the destination's from clause. not sure if this is will fix everything but it works.
WITHOUT_CLASSIFICATION	return classalias == null ? classname classalias
WITHOUT_CLASSIFICATION	this is an explicit from element.
WITHOUT_CLASSIFICATION	parametercontainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	fetch can't be used with scroll() or iterate().
WITHOUT_CLASSIFICATION	if it's not implied or it is implied and it's a many to many join where the target wasn't found.
WITHOUT_CLASSIFICATION	since this is an explicit from element it can't be implied in the from clause.
WITHOUT_CLASSIFICATION	do nothing eplicit from elements are always in the projection list.
WITHOUT_CLASSIFICATION	propertyname refers to something like collection.size
WITHOUT_CLASSIFICATION	property name is a sub-path of a component
WITHOUT_CLASSIFICATION	always add the collection's query spaces.
WITHOUT_CLASSIFICATION	nothing to do even if the operand is a parameter no way we could infer an appropriate expected type here
WITHOUT_CLASSIFICATION	logic operators by definition resolve to booleans
WITHOUT_CLASSIFICATION	dotnode uses null here
WITHOUT_CLASSIFICATION	we represent a from-clause alias
WITHOUT_CLASSIFICATION	we are the lhs of the dot representing a naked comp-prop-ref
WITHOUT_CLASSIFICATION	we are the rhs of the dot representing a naked comp-prop-ref
WITHOUT_CLASSIFICATION	we represent a naked (simple) prop-ref
WITHOUT_CLASSIFICATION	early exit!!! return so the resolve call explicitly coming from dotnode can resolve this
WITHOUT_CLASSIFICATION	assume this ident's text does not refer to a property on the given persister
WITHOUT_CLASSIFICATION	just ignore it for now it'll get resolved later
WITHOUT_CLASSIFICATION	this is not actually a constant but a reference to from element.
WITHOUT_CLASSIFICATION	check to see if our "proppath" actually represents a property on the persister
WITHOUT_CLASSIFICATION	these pieces are needed for usage in select clause
WITHOUT_CLASSIFICATION	used to set the type of the parent dot node
WITHOUT_CLASSIFICATION	assume we do not refer to a property on the given persister
WITHOUT_CLASSIFICATION	assume we do not refer to a property on the given persister
WITHOUT_CLASSIFICATION	naked property-refs cannot be used with an aliased from element
WITHOUT_CLASSIFICATION	this piece is needed for usage in select clause
WITHOUT_CLASSIFICATION	do not over-write the column text as that has already been "rendered" during resolve
WITHOUT_CLASSIFICATION	for some reason the antlr.commonast initialization routines force this method to get called twice. the first time with an empty string
WITHOUT_CLASSIFICATION	look up class name using the first identifier in the path.
WITHOUT_CLASSIFICATION	add to the query spaces.
WITHOUT_CLASSIFICATION	if the from element isn't in the same clause create a new from element.
WITHOUT_CLASSIFICATION	this is the root level node. generate an explicit from clause at the root.
WITHOUT_CLASSIFICATION	correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ansi-style join
WITHOUT_CLASSIFICATION	super-duper-classic-parser-regression-testing-mojo-magic
WITHOUT_CLASSIFICATION	a collection of entities
WITHOUT_CLASSIFICATION	a collection of components
WITHOUT_CLASSIFICATION	a collection of scalar elements
WITHOUT_CLASSIFICATION	according to both the ansi-sql and ejb3 specs trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the sql spec <trim function> = trim <left paren> <trim operands> <right paren> <trim operands> = [ [ <trim specification> ] [ <trim character> ] from ] <trim source> <trim specification> = leading | trailing | both if only <trim specification> is omitted both is assumed if <trim character> is omitted space is assumed
WITHOUT_CLASSIFICATION	don't include sub-classes for implied collection joins or subquery joins.
WITHOUT_CLASSIFICATION	treat explict from elements in sub-queries properly.
WITHOUT_CLASSIFICATION	( implied && dotnode.usethetastyleimplicitjoins ) ) {
WITHOUT_CLASSIFICATION	the "root from-element" in correlated subqueries do need this piece
WITHOUT_CLASSIFICATION	create the from element for the target (the elements of the collection).
WITHOUT_CLASSIFICATION	if the join is implied then don't include sub-classes on the element.
WITHOUT_CLASSIFICATION	overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	the associated entity is implied but it must be included in the from. the collection alias is the role.
WITHOUT_CLASSIFICATION	tag this node as a join. don't include subclasses in the join. this is a clollection join.
WITHOUT_CLASSIFICATION	get the class name of the associated entity.
WITHOUT_CLASSIFICATION	origin path implied columns classalias
WITHOUT_CLASSIFICATION	implied
WITHOUT_CLASSIFICATION	for implied many-to-many just add the end join.
WITHOUT_CLASSIFICATION	overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	the standard sql function name is current_timestamp
WITHOUT_CLASSIFICATION	this causes the factory to instantiate the desired class.
WITHOUT_CLASSIFICATION	private type[] sqlresulttypes
WITHOUT_CLASSIFICATION	frontbase has no known variation of a "select for update" syntax
WITHOUT_CLASSIFICATION	the types represented in the sql result set. @return the types represented in the sql result set.
WITHOUT_CLASSIFICATION	public type[] getsqlresulttypes() {return sqlresulttypes}
WITHOUT_CLASSIFICATION	first collect all of the select expressions. note this must be done before invoking setscalarcolumntext() because setscalarcolumntext() changes the ast!!!
WITHOUT_CLASSIFICATION	first allow the actual type to control the return value. (the actual underlying sqltype could actually be different)
WITHOUT_CLASSIFICATION	sqlresulttypelist.addall( constructorargumenttypelist )
WITHOUT_CLASSIFICATION	if the data type is not an association type it could not have been in the from clause.
WITHOUT_CLASSIFICATION	sqlresulttypelist.add( type )
WITHOUT_CLASSIFICATION	always add the type to the return type list.
WITHOUT_CLASSIFICATION	add the fetched entities
WITHOUT_CLASSIFICATION	get ready to start adding nodes.
WITHOUT_CLASSIFICATION	function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	if there are any scalars (non-entities) selected render the select column aliases.
WITHOUT_CLASSIFICATION	sqlresulttypelist
WITHOUT_CLASSIFICATION	arraylist sqlresulttypelist
WITHOUT_CLASSIFICATION	sqlresulttypes = ( type[] ) sqlresulttypelist.toarray( new type[sqlresulttypelist.size()] )
WITHOUT_CLASSIFICATION	lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	todo
WITHOUT_CLASSIFICATION	add the type to the list of returned sqlresulttypes.
WITHOUT_CLASSIFICATION	generate an 2d array of column names the first dimension is parallel with the return types array. the second dimension is the list of column names for each type.
WITHOUT_CLASSIFICATION	generate the select expression.
WITHOUT_CLASSIFICATION	union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	skip 'distinct' and 'all' so we return the first expression node.
WITHOUT_CLASSIFICATION	create sql_token nodes for the columns.
WITHOUT_CLASSIFICATION	generate the property select tokens.
WITHOUT_CLASSIFICATION	get the function name node.
WITHOUT_CLASSIFICATION	method expressions in a select should always be considered scalar.
WITHOUT_CLASSIFICATION	if this is 'elements' then create a new from element.
WITHOUT_CLASSIFICATION	not elements(x)
WITHOUT_CLASSIFICATION	dialect function
WITHOUT_CLASSIFICATION	collection 'property function'
WITHOUT_CLASSIFICATION	if the constant is an ident figure out what it means
WITHOUT_CLASSIFICATION	ident is a class alias in the from.
WITHOUT_CLASSIFICATION	resolve to an identity column.
WITHOUT_CLASSIFICATION	otherwise it's a literal.
WITHOUT_CLASSIFICATION	the name of an entity class
WITHOUT_CLASSIFICATION	the class discriminator value
WITHOUT_CLASSIFICATION	chop off the rest of the tree.
WITHOUT_CLASSIFICATION	add a space before the display text.
WITHOUT_CLASSIFICATION	find or create the where clause
WITHOUT_CLASSIFICATION	child == parent.getfirstchild()
WITHOUT_CLASSIFICATION	find or create the where clause
WITHOUT_CLASSIFICATION	filter conditions need to be inserted before the hql where condition and the theta join node. this is because org.hibernate.loader.loader binds the filter parameters first then it binds all the hql query parameters see org.hibernate.loader.loader.processfilterparameters().
WITHOUT_CLASSIFICATION	put the filters node before the hql condition and theta joins
WITHOUT_CLASSIFICATION	add the current fragment to the filters node
WITHOUT_CLASSIFICATION	create a new theta_joins node as a parent of all filters
WITHOUT_CLASSIFICATION	put the theta_joins node before the hql condition after the filters.
WITHOUT_CLASSIFICATION	add the current fragment to the theta_joins node
WITHOUT_CLASSIFICATION	first try to get the persister using the given name directly.
WITHOUT_CLASSIFICATION	unable to locate it using this name
WITHOUT_CLASSIFICATION	if that didn't work try using the 'import' name.
WITHOUT_CLASSIFICATION	implicit joins use theta style (where pk = fk) explicit joins use join (after from)
WITHOUT_CLASSIFICATION	locate the registered function by the given name
WITHOUT_CLASSIFICATION	determine the type of the first argument
WITHOUT_CLASSIFICATION	use the dot node to emit the first column name. create the column names folled by the column aliases.
WITHOUT_CLASSIFICATION	note this simply constructs a "raw" sql_token representing the where fragment and injects this into the tree. this "works" however it is probably not the best long-term solution. at some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.
WITHOUT_CLASSIFICATION	append the text of the current node.
WITHOUT_CLASSIFICATION	if the node has a first child recurse into the first child.
WITHOUT_CLASSIFICATION	if there is a second child (rhs) recurse into that child.
WITHOUT_CLASSIFICATION	iterate through the aliasjoinsequence pairs and generate sql token nodes.
WITHOUT_CLASSIFICATION	if the from element represents a join_fragment and it is a theta-style join convert its type from join_fragment to from_fragment
WITHOUT_CLASSIFICATION	this is used during sqlgenerator processing
WITHOUT_CLASSIFICATION	if there is a from fragment and the from element is an explicit then add the from part.
WITHOUT_CLASSIFICATION	&& stringhelper.isnotempty( frag )
WITHOUT_CLASSIFICATION	the from fragment will probably begin with ' '. remove this if it is present.
WITHOUT_CLASSIFICATION	this uses a pathexpressionparser but notice that compound paths are not valid only bare names and simple paths
WITHOUT_CLASSIFICATION	select p from p in class eg.person order by p.name p.address p
WITHOUT_CLASSIFICATION	the reason for this is sql doesn't let you sort by an expression you are not returning in the result set.
WITHOUT_CLASSIFICATION	named query parameter
WITHOUT_CLASSIFICATION	default mode
WITHOUT_CLASSIFICATION	queryjoinfragment join = q.createjoinfragment(usethetastylejoin)
WITHOUT_CLASSIFICATION	reset the dotcount (but not the path) after reset!
WITHOUT_CLASSIFICATION	after reset!
WITHOUT_CLASSIFICATION	we don't need to worry about any condition in the on clause here (tofromfragmentstring) since anything in the on condition is already applied to the whole query
WITHOUT_CLASSIFICATION	bit_length feels a bit broken to me. we have to cast to char in order to pass when a numeric value is supplied. but of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. jay nance 2006-09-22
WITHOUT_CLASSIFICATION	dotcount>=2
WITHOUT_CLASSIFICATION	do the corresponding rhs
WITHOUT_CLASSIFICATION	if its "id"
WITHOUT_CLASSIFICATION	or its the id property name
WITHOUT_CLASSIFICATION	join = q.createjoinfragment(usethetastylejoin)
WITHOUT_CLASSIFICATION	important!!
WITHOUT_CLASSIFICATION	string[] keycols = collpersister.getkeycolumnnames()
WITHOUT_CLASSIFICATION	an association
WITHOUT_CLASSIFICATION	allow index() function
WITHOUT_CLASSIFICATION	here assume sqlserver2005 using snapshot isolation which does not have this problem
WITHOUT_CLASSIFICATION	the reason for this is sql doesn't let you sort by an expression you are not returning in the result set.
WITHOUT_CLASSIFICATION	many-to-many
WITHOUT_CLASSIFICATION	collections of values
WITHOUT_CLASSIFICATION	opening paren in new foo ( )
WITHOUT_CLASSIFICATION	if we are inside a new result() but not inside a nested function
WITHOUT_CLASSIFICATION	special case
WITHOUT_CLASSIFICATION	the name of an sql function
WITHOUT_CLASSIFICATION	null child could occur for no from clause in a filter
WITHOUT_CLASSIFICATION	this is basically a copy/paste of orderbyparser might be worth refactoring
WITHOUT_CLASSIFICATION	select p from p in class eg.person group by p.name p.address p
WITHOUT_CLASSIFICATION	return aliases not supported in classic translator!
WITHOUT_CLASSIFICATION	register collection role
WITHOUT_CLASSIFICATION	the keyword used to specify an identity column if identity column key generation is supported.
WITHOUT_CLASSIFICATION	.getelementpropertymapping()
WITHOUT_CLASSIFICATION	crossjoins.add(name)
WITHOUT_CLASSIFICATION	ie no select clause in hql
WITHOUT_CLASSIFICATION	initialize the set of queried identifier spaces (ie. tables)
WITHOUT_CLASSIFICATION	ie. no select clause
WITHOUT_CLASSIFICATION	there _was_ a select clause
WITHOUT_CLASSIFICATION	return the concrete type or the underlying type if a concrete type was not specified
WITHOUT_CLASSIFICATION	many-to-many
WITHOUT_CLASSIFICATION	q.addcollection(collectionname collectionrole)
WITHOUT_CLASSIFICATION	classic parser does not support bulk manipulation statements
WITHOUT_CLASSIFICATION	can't cache this stuff either (per-invocation)
WITHOUT_CLASSIFICATION	unfortunately this stuff can't be cached because it is per-invocation not constant for the querytranslator instance
WITHOUT_CLASSIFICATION	this is the legacy behaviour for hql queries
WITHOUT_CLASSIFICATION	not known!
WITHOUT_CLASSIFICATION	not known!
WITHOUT_CLASSIFICATION	we have the form trim(trimsource) so we trim leading and trailing spaces early exit!!!!
WITHOUT_CLASSIFICATION	not known!
WITHOUT_CLASSIFICATION	not known!
WITHOUT_CLASSIFICATION	need this since join condition can appear inside parens!
WITHOUT_CLASSIFICATION	tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression
WITHOUT_CLASSIFICATION	expressionterminators.add("") deliberately excluded
WITHOUT_CLASSIFICATION	expressionopeners.add("") deliberately excluded
WITHOUT_CLASSIFICATION	we have the form trim(from trimsource). this is functionally equivalent to trim(trimsource) early exit!!!!
WITHOUT_CLASSIFICATION	otherwise a trim-specification and/or a trim-character have been specified we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)
WITHOUT_CLASSIFICATION	inside a between and expression
WITHOUT_CLASSIFICATION	were an odd or even number of nots encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean
WITHOUT_CLASSIFICATION	ie. a many-to-many
WITHOUT_CLASSIFICATION	cope with []
WITHOUT_CLASSIFICATION	cope with a continued path expression (ie. ].baz)
WITHOUT_CLASSIFICATION	note early return
WITHOUT_CLASSIFICATION	cope with a subselect
WITHOUT_CLASSIFICATION	cope with special cases of and not ()
WITHOUT_CLASSIFICATION	close extra brackets we opened
WITHOUT_CLASSIFICATION	take note when this is a boolean expression
WITHOUT_CLASSIFICATION	assumes that types are all of span 1
WITHOUT_CLASSIFICATION	process a token mapping oo path expressions to sql expressions
WITHOUT_CLASSIFICATION	open any extra brackets we might need.
WITHOUT_CLASSIFICATION	cope with special cases of and not )
WITHOUT_CLASSIFICATION	the next one up must also be
WITHOUT_CLASSIFICATION	add any joins
WITHOUT_CLASSIFICATION	assumes that types are all of span 1
WITHOUT_CLASSIFICATION	named query parameter
WITHOUT_CLASSIFICATION	path expression
WITHOUT_CLASSIFICATION	saves / updates don't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	persists don't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	anything else
WITHOUT_CLASSIFICATION	the path expression continues after a ]
WITHOUT_CLASSIFICATION	careful with this!
WITHOUT_CLASSIFICATION	the path expression ends at the ]
WITHOUT_CLASSIFICATION	"finish off" the join
WITHOUT_CLASSIFICATION	notice no " or . since they are part of (compound) identifiers
WITHOUT_CLASSIFICATION	cannot instantiate
WITHOUT_CLASSIFICATION	start by looking for hql keywords
WITHOUT_CLASSIFICATION	inner joins can be abbreviated to 'join'
WITHOUT_CLASSIFICATION	'outer' is optional and is ignored
WITHOUT_CLASSIFICATION	now anything that is not a hql keyword
WITHOUT_CLASSIFICATION	process the "old" hql style where aliases appear _first_ ie. using the in or in class constructions
WITHOUT_CLASSIFICATION	treat it as a classname
WITHOUT_CLASSIFICATION	treat it as a path expression
WITHOUT_CLASSIFICATION	starts with the name of a mapped class (new style)
WITHOUT_CLASSIFICATION	starts with a path expression (new style)
WITHOUT_CLASSIFICATION	allow odmg oql style from person p p.cars c
WITHOUT_CLASSIFICATION	handle quoted strings
WITHOUT_CLASSIFICATION	object insertions updates and deletions have list semantics because they must happen in the right order so as to respect referential integrity
WITHOUT_CLASSIFICATION	"finish off" the join
WITHOUT_CLASSIFICATION	ignore whitespace
WITHOUT_CLASSIFICATION	do replacements
WITHOUT_CLASSIFICATION	handle hql2 collection syntax
WITHOUT_CLASSIFICATION	uuid.hex is deprecated
WITHOUT_CLASSIFICATION	abstractselectingdelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	hilo params
WITHOUT_CLASSIFICATION	sql = query
WITHOUT_CLASSIFICATION	performance opt
WITHOUT_CLASSIFICATION	sql = update
WITHOUT_CLASSIFICATION	hilo config
WITHOUT_CLASSIFICATION	so we "clock over" on the first invocation
WITHOUT_CLASSIFICATION	don't allow comments on these insert statements as comments totally blow up the oracle getgeneratedkeys "support" (
WITHOUT_CLASSIFICATION	abort the save (the object is already saved by a circular cascade)
WITHOUT_CLASSIFICATION	throw new identifiergenerationexception("save associated object first or disable cascade for inverse association")
WITHOUT_CLASSIFICATION	intentionally empty
WITHOUT_CLASSIFICATION	do nothing to avoid a lazy property initialization
WITHOUT_CLASSIFICATION	keep the behavior consistent even for boundary usages
WITHOUT_CLASSIFICATION	so we "clock over" on the first invocation
WITHOUT_CLASSIFICATION	do nothing until we hit the rsult set containing the generated id
WITHOUT_CLASSIFICATION	column and table should be renamed but it would break the public api
WITHOUT_CLASSIFICATION	loaded entity instances by entitykey
WITHOUT_CLASSIFICATION	if the given name is un-qualified we may neen to qualify it
WITHOUT_CLASSIFICATION	the default
WITHOUT_CLASSIFICATION	unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence
WITHOUT_CLASSIFICATION	intentionally empty
WITHOUT_CLASSIFICATION	identity map of collectionentry instances by the collection wrapper
WITHOUT_CLASSIFICATION	general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	identifiergenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	persistentidentifiergenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	prepare and execute the insert
WITHOUT_CLASSIFICATION	prepare and execute the insert
WITHOUT_CLASSIFICATION	fetch the generated id in a separate query
WITHOUT_CLASSIFICATION	we just hit the last position
WITHOUT_CLASSIFICATION	scroll ahead
WITHOUT_CLASSIFICATION	scroll backward
WITHOUT_CLASSIFICATION	we have not yet hit the last result
WITHOUT_CLASSIFICATION	constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.
WITHOUT_CLASSIFICATION	inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	caches
WITHOUT_CLASSIFICATION	generators
WITHOUT_CLASSIFICATION	cache region is defined by the root-class in the hierarchy
WITHOUT_CLASSIFICATION	check if the detached object being merged is the parent
WITHOUT_CLASSIFICATION	after all persisters and named queries are registered
WITHOUT_CLASSIFICATION	if we get here it is possible that we have a proxy 'in the way' of the merge map resolution note decided to put this here rather than in the above loop as i was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'
WITHOUT_CLASSIFICATION	jndi + serialization
WITHOUT_CLASSIFICATION	checking for named queries
WITHOUT_CLASSIFICATION	stats
WITHOUT_CLASSIFICATION	entitynotfounddelegate
WITHOUT_CLASSIFICATION	check named hql queries
WITHOUT_CLASSIFICATION	this will throw an error if there's something wrong.
WITHOUT_CLASSIFICATION	prevents this session from adding things to cache
WITHOUT_CLASSIFICATION	from javax.naming.referenceable
WITHOUT_CLASSIFICATION	look for the instance by uuid
WITHOUT_CLASSIFICATION	for a dynamic-class
WITHOUT_CLASSIFICATION	test this entity to see if we must query it
WITHOUT_CLASSIFICATION	note early exit
WITHOUT_CLASSIFICATION	for backward-compatability
WITHOUT_CLASSIFICATION	ignore this error for now
WITHOUT_CLASSIFICATION	to stop the class from being unloaded
WITHOUT_CLASSIFICATION	in case we were deserialized in a different jvm look for an instance with the same name (alternatively we could do an actual jndi lookup here.)
WITHOUT_CLASSIFICATION	must add to jndi _after_ adding to hashmaps because some jndi servers use serialization
WITHOUT_CLASSIFICATION	make sure this is a defined parameter and check the incoming value type
WITHOUT_CLASSIFICATION	for each of the defined parameters make sure its value has been set
WITHOUT_CLASSIFICATION	we never need to apply locks to the sql
WITHOUT_CLASSIFICATION	inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	during deserialization we need to reconnect all proxies and collections to this session as well as the entityentry and collectionentry instances these associations are transient because serialization is used for different things.
WITHOUT_CLASSIFICATION	updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	final boolean forcecacherefresh
WITHOUT_CLASSIFICATION	final boolean forcecacherefresh
WITHOUT_CLASSIFICATION	first try to load it from the temp pc associated to this ss
WITHOUT_CLASSIFICATION	if the metadata allowed proxy creation and caller did not request forceful eager loading generate a proxy
WITHOUT_CLASSIFICATION	otherwise immediately materialize it
WITHOUT_CLASSIFICATION	/
WITHOUT_CLASSIFICATION	no auto-flushing to support in stateless session
WITHOUT_CLASSIFICATION	after setting values to object entitymode
WITHOUT_CLASSIFICATION	for ejb3
WITHOUT_CLASSIFICATION	just ignore
WITHOUT_CLASSIFICATION	do a check
WITHOUT_CLASSIFICATION	saveorupdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	persistonflush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	saveorupdatecopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	do not auto-flush while outside a transaction
WITHOUT_CLASSIFICATION	this is an internal error of some sort
WITHOUT_CLASSIFICATION	stops flush being called multiple times if this method is recursively called
WITHOUT_CLASSIFICATION	only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete
WITHOUT_CLASSIFICATION	if it was previously unreferenced we need to flush in order to get its state into the database in order to execute query
WITHOUT_CLASSIFICATION	not for internal use
WITHOUT_CLASSIFICATION	otherwise we only need to flush if there are in-memory changes to the queried tables
WITHOUT_CLASSIFICATION	might need to run a different filter entirely after the flush because the collection role may have changed
WITHOUT_CLASSIFICATION	stops flush being called multiple times if this method is recursively called
WITHOUT_CLASSIFICATION	stops flush being called multiple times if this method is recursively called
WITHOUT_CLASSIFICATION	if it is initialized see if the underlying instance is contained since we need to account for the fact that it might have been evicted
WITHOUT_CLASSIFICATION	basically just an adapted copy of find(criteriaimpl)
WITHOUT_CLASSIFICATION	it is possible for this method to be called during flush processing so make certain that we do not accidently initialize an uninitialized proxy
WITHOUT_CLASSIFICATION	nothing to do in a stateful session
WITHOUT_CLASSIFICATION	ignore
WITHOUT_CLASSIFICATION	ignore this error for now
WITHOUT_CLASSIFICATION	we need to writeobject() on this since interceptor is user defined
WITHOUT_CLASSIFICATION	the old-time stand-by
WITHOUT_CLASSIFICATION	parameter bind values
WITHOUT_CLASSIFICATION	parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	prepend value and type list with null for any positions before the wanted position.
WITHOUT_CLASSIFICATION	execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	we have a cglib enhanced entity
WITHOUT_CLASSIFICATION	we have a cglib enhanced entity
WITHOUT_CLASSIFICATION	we have a javassist enhanced entity
WITHOUT_CLASSIFICATION	we have a javassist enhanced entity
WITHOUT_CLASSIFICATION	fieldinterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	let's assume that there is only one lazy fetch group for now!
WITHOUT_CLASSIFICATION	fieldhandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	should not need to grow beyond the size of the total number of columns in the rs
WITHOUT_CLASSIFICATION	should probably no-op commit/rollback here at least in jta scenarios
WITHOUT_CLASSIFICATION	base expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	various expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	explicitly perform no checking
WITHOUT_CLASSIFICATION	used from testsuite
WITHOUT_CLASSIFICATION	assume we are in an auto-commit state
WITHOUT_CLASSIFICATION	package
WITHOUT_CLASSIFICATION	register synch stats.connect()
WITHOUT_CLASSIFICATION	noncritical swallow and let the other propagate!
WITHOUT_CLASSIFICATION	calls executebatch()
WITHOUT_CLASSIFICATION	no big deal
WITHOUT_CLASSIFICATION	no big deal
WITHOUT_CLASSIFICATION	no big deal
WITHOUT_CLASSIFICATION	sybase driver (jconnect) throwing npe here in certain cases but we'll just handle the general "unexpected" case
WITHOUT_CLASSIFICATION	see explanation above
WITHOUT_CLASSIFICATION	if we are in the process of releasing no sense checking for aggressive-release possibility.
WITHOUT_CLASSIFICATION	early exit!!!!
WITHOUT_CLASSIFICATION	resultset impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	resultset impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	refer to comment in statefulpersistencecontext.addcollection()
WITHOUT_CLASSIFICATION	connectionmanager.callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	note success = false because we don't know the outcome of the transaction
WITHOUT_CLASSIFICATION	we already have a callback registered either a local (org.hibernate.transaction) transaction has accepted callback responsibilities or we have previously registered a transaction synch.
WITHOUT_CLASSIFICATION	the configured transaction-factory says it only supports local callback mode so no sense attempting to register a jta synchronization
WITHOUT_CLASSIFICATION	transactions marked for rollback-only cause some tm impls to throw exceptions
WITHOUT_CLASSIFICATION	serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	postinitialize() will be called after initialization
WITHOUT_CLASSIFICATION	cannot handle single quotes
WITHOUT_CLASSIFICATION	todo for 4.0 private static final logger log = loggerfactory.getlogger( sqlstatementlogger.class ) this is the legacy logging 'category'
WITHOUT_CLASSIFICATION	note that for sequential scrolling we make the assumption that the first persister element is the "root entity"
WITHOUT_CLASSIFICATION	don't even bother trying to read further
WITHOUT_CLASSIFICATION	don't even bother trying to read any further
WITHOUT_CLASSIFICATION	position cursor to the last row
WITHOUT_CLASSIFICATION	sequentially read the result set in reverse until we recognize a change in the key value. at that point we are pointed at the last physical sequential row for the logical row in which we are interested in processing
WITHOUT_CLASSIFICATION	read backwards until we read past the first physical sequential row with the key we are interested in loading
WITHOUT_CLASSIFICATION	finally read ahead one row to position result set cursor at the first physical row we are interested in loading
WITHOUT_CLASSIFICATION	now get an existing proxy for each row element (if there is one)
WITHOUT_CLASSIFICATION	force the proxy to resolve itself
WITHOUT_CLASSIFICATION	this is equivalent to the old behavior
WITHOUT_CLASSIFICATION	if null owner will be retrieved from session
WITHOUT_CLASSIFICATION	final string querystring
WITHOUT_CLASSIFICATION	if it was a reference to self don't need to nullify unless we are using native id generation in which case we definitely need to nullify
WITHOUT_CLASSIFICATION	end of array start filling again from start
WITHOUT_CLASSIFICATION	in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to persistentcollection#endread) we scan the internal loadingcollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endread processing.
WITHOUT_CLASSIFICATION	we can reuse it for each row
WITHOUT_CLASSIFICATION	can't reuse in this case
WITHOUT_CLASSIFICATION	first we need to suspend any current jta transaction and obtain a jdbc connection
WITHOUT_CLASSIFICATION	getresultlist(results)
WITHOUT_CLASSIFICATION	if we only returned one entity query by key is more efficient
WITHOUT_CLASSIFICATION	a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()
WITHOUT_CLASSIFICATION	handle empty collection
WITHOUT_CLASSIFICATION	else no collection element but also no owner
WITHOUT_CLASSIFICATION	handle empty collections
WITHOUT_CLASSIFICATION	else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)
WITHOUT_CLASSIFICATION	validate() instances of validatable
WITHOUT_CLASSIFICATION	if we know there is exactly 1 row we can skip. it would be great if we could _always_ skip this it is a problem for <key-many-to-one>
WITHOUT_CLASSIFICATION	remove all collections for the entity from the session-level cache
WITHOUT_CLASSIFICATION	null version means the object is in the process of being loaded somewhere else in the resultset
WITHOUT_CLASSIFICATION	problematic for <key-many-to-one>!
WITHOUT_CLASSIFICATION	use the id passed in
WITHOUT_CLASSIFICATION	do nothing
WITHOUT_CLASSIFICATION	prefer re-generation of identity!
WITHOUT_CLASSIFICATION	no point doing this if none was requested
WITHOUT_CLASSIFICATION	if the object is already loaded return the loaded one
WITHOUT_CLASSIFICATION	its already loaded so don't need to hydrate it
WITHOUT_CLASSIFICATION	cascade the refresh prior to refreshing this entity
WITHOUT_CLASSIFICATION	the load() which takes an entity does not pass an entityname
WITHOUT_CLASSIFICATION	we only check the version when _upgrading_ lock modes
WITHOUT_CLASSIFICATION	look for a proxy
WITHOUT_CLASSIFICATION	we need to upgrade the lock mode to the mode requested
WITHOUT_CLASSIFICATION	its the given optional object
WITHOUT_CLASSIFICATION	instantiate a new instance
WITHOUT_CLASSIFICATION	need to hydrate it.
WITHOUT_CLASSIFICATION	return a newly loaded object
WITHOUT_CLASSIFICATION	will be ignored using the existing entry instead
WITHOUT_CLASSIFICATION	key is an entity involved with the operation performed by the listener value can be either a copy of the entity or the entity itself
WITHOUT_CLASSIFICATION	materialize associations (and initialize the object) later
WITHOUT_CLASSIFICATION	get the persister for the _subclass_
WITHOUT_CLASSIFICATION	ok in normal hibernate usage to delete a detached entity jpa however forbids it thus this is a hook for hem to affect this behavior
WITHOUT_CLASSIFICATION	the entry will be removed after the flush and will no longer override the stale snapshot this is now handled by removeentity() in entitydeleteaction persistencecontext.removedatabasesnapshot(key)
WITHOUT_CLASSIFICATION	addinitializedcollection(collection persister id)
WITHOUT_CLASSIFICATION	early exit!
WITHOUT_CLASSIFICATION	early exit!
WITHOUT_CLASSIFICATION	|| oj.getjoinable().consumescollectionalias()
WITHOUT_CLASSIFICATION	here we do not bother with the discriminator.
WITHOUT_CLASSIFICATION	code to handle subclasses of topclass
WITHOUT_CLASSIFICATION	woops we got an instance of another class hierarchy branch
WITHOUT_CLASSIFICATION	we can go straight to the first required row
WITHOUT_CLASSIFICATION	we need to step through the rows one row at a time (slow)
WITHOUT_CLASSIFICATION	synchronized to avoid multi-thread access issues defined as method synch to avoid potential deadlock issues due to nature of code.
WITHOUT_CLASSIFICATION	allows various loaders (ok mainly the queryloader ) to check whether scrolling of their result set should be allowed. by default it is allowed.
WITHOUT_CLASSIFICATION	before adding to collection!
WITHOUT_CLASSIFICATION	if the current depth is 0 the root thing being loaded is the many-to-many collection itself. here it is alright to use an inner join
WITHOUT_CLASSIFICATION	operations which cascade as far as the collection also cascade to collection elements
WITHOUT_CLASSIFICATION	simple because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element
WITHOUT_CLASSIFICATION	a composite key
WITHOUT_CLASSIFICATION	if no batch use "foo = ? and bar = ?"
WITHOUT_CLASSIFICATION	it must be a collection fetch
WITHOUT_CLASSIFICATION	needed later for many-to-many/filter application
WITHOUT_CLASSIFICATION	&& etype.isreferencetoprimarykey()
WITHOUT_CLASSIFICATION	it might still need to apply a collection ordering based on a many-to-many defined order-by
WITHOUT_CLASSIFICATION	if a composite key use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching todo unnecessary for databases with ansi-style joins
WITHOUT_CLASSIFICATION	belong to other persister belong to other persister
WITHOUT_CLASSIFICATION	we found it
WITHOUT_CLASSIFICATION	we can use an inner join for the many-to-many
WITHOUT_CLASSIFICATION	disable a join back to this same association
WITHOUT_CLASSIFICATION	note unlike all other loaders this one is not multithreaded or cacheable!!
WITHOUT_CLASSIFICATION	the user visible aliases which are unknown to the superclass these are not the actual "physical" sql aliases
WITHOUT_CLASSIFICATION	root entity comes last
WITHOUT_CLASSIFICATION	deliberately ignore return value!
WITHOUT_CLASSIFICATION	alias may be null early exit
WITHOUT_CLASSIFICATION	if it is a compound path
WITHOUT_CLASSIFICATION	otherwise assume the parent is the the criteria that created us
WITHOUT_CLASSIFICATION	if its the root criteria we are done
WITHOUT_CLASSIFICATION	otherwise recurse
WITHOUT_CLASSIFICATION	the criteria instance
WITHOUT_CLASSIFICATION	the entity name
WITHOUT_CLASSIFICATION	not found in inner query try the outer query
WITHOUT_CLASSIFICATION	not found in inner query try the outer query
WITHOUT_CLASSIFICATION	it refers to an alias of a projection
WITHOUT_CLASSIFICATION	should never happen i think
WITHOUT_CLASSIFICATION	detect discriminator values
WITHOUT_CLASSIFICATION	convert the string value into the proper type.
WITHOUT_CLASSIFICATION	and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us
WITHOUT_CLASSIFICATION	it does not refer to an alias of a projection look for a property
WITHOUT_CLASSIFICATION	otherwise this is an ordinary value.
WITHOUT_CLASSIFICATION	currently not cachable if autodiscover types is in effect (e.g. "select ")
WITHOUT_CLASSIFICATION	private final string[] sqlaliases private final string[] sqlaliassuffixes
WITHOUT_CLASSIFICATION	this is only needed (afaict) for resulttransformer processing
WITHOUT_CLASSIFICATION	determine if the collection elements are entities
WITHOUT_CLASSIFICATION	build an array with indices equal to the total number of actual returns in the result hibernate will return for this query (scalars + non-scalars)
WITHOUT_CLASSIFICATION	replace {.} with corresponding column aliases
WITHOUT_CLASSIFICATION	no additional open braces found in the string append the rest of the string in its entirty and quit this loop
WITHOUT_CLASSIFICATION	apend everything up until the next encountered open brace
WITHOUT_CLASSIFICATION	it is a simple table alias {foo}
WITHOUT_CLASSIFICATION	passing through anything we do not know to support jdbc escape sequences hb-898
WITHOUT_CLASSIFICATION	passing through anything we do not know to support jdbc escape sequences hb-898
WITHOUT_CLASSIFICATION	the current alias is referencing the collection to be eagerly fetched
WITHOUT_CLASSIFICATION	it is a property reference {foo.bar}
WITHOUT_CLASSIFICATION	possibly handle something parameters for the query ?
WITHOUT_CLASSIFICATION	let return-propertys override whatever the persister has for aliases.
WITHOUT_CLASSIFICATION	private final list persisters = new arraylist()
WITHOUT_CLASSIFICATION	package
WITHOUT_CLASSIFICATION	note early exit!
WITHOUT_CLASSIFICATION	private final list scalartypes = new arraylist() private final list scalarcolumnaliases = new arraylist()
WITHOUT_CLASSIFICATION	now process the returns
WITHOUT_CLASSIFICATION	private list collectionowneraliases = new arraylist() private list collectionaliases = new arraylist() private list collectionpersisters = new arraylist() private list collectionresults = new arraylist()
WITHOUT_CLASSIFICATION	already been processed
WITHOUT_CLASSIFICATION	already been processed
WITHOUT_CLASSIFICATION	make sure the owner alias is known
WITHOUT_CLASSIFICATION	first break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners
WITHOUT_CLASSIFICATION	scalarcolumnaliases.add( typereturn.getcolumnalias() ) scalartypes.add( typereturn.gettype() )
WITHOUT_CLASSIFICATION	if this return's alias has not been processed yet do so b4 further processing of this return
WITHOUT_CLASSIFICATION	collectionowneraliases.add( owneralias )
WITHOUT_CLASSIFICATION	for merging of versioned entities we consider the version having been changed only when 1) the two version values are different and 2) the target actually represents database state! this second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved
WITHOUT_CLASSIFICATION	this is the second pass through on a merge op so here we limit the replacement to associations types (value types were already replaced during the first pass)
WITHOUT_CLASSIFICATION	early exit
WITHOUT_CLASSIFICATION	cascade-save to collections after the collection owner was saved
WITHOUT_CLASSIFICATION	initialize the error handling delegate.
WITHOUT_CLASSIFICATION	use the delegate.
WITHOUT_CLASSIFICATION	currently only the hibernate-supplied dbtimestamptype is supported here
WITHOUT_CLASSIFICATION	this is called when it's time to fully resolve a path expression.
WITHOUT_CLASSIFICATION	make a new one
WITHOUT_CLASSIFICATION	not so sure this is even valid subtree. but if it was it'd represent two unrelated table references
WITHOUT_CLASSIFICATION	(not (gt a b) ) => (le a b)
WITHOUT_CLASSIFICATION	private type[] sqlresulttypes
WITHOUT_CLASSIFICATION	include the discriminator and class-level where but not filters
WITHOUT_CLASSIFICATION	sqlresulttypes = selectclause.getsqlresulttypes()
WITHOUT_CLASSIFICATION	by default
WITHOUT_CLASSIFICATION	this is now handled earlier in this method.
WITHOUT_CLASSIFICATION	-- loader implementation --
WITHOUT_CLASSIFICATION	-- loader overrides --
WITHOUT_CLASSIFICATION	(not (is_null a b) ) => (is_not_null a b)
WITHOUT_CLASSIFICATION	none because its the requested lock mode not the actual!
WITHOUT_CLASSIFICATION	meant to handle dynamic instantiation queries
WITHOUT_CLASSIFICATION	--- query translator methods ---
WITHOUT_CLASSIFICATION	-- implementation private methods --
WITHOUT_CLASSIFICATION	deduplicate unique constraints sharing the same columns this is needed by hibernate annotations since it creates automagically unique constraints for the user
WITHOUT_CLASSIFICATION	try to find out the name of the primary key to create it as identity if the identitygenerator is used
WITHOUT_CLASSIFICATION	to support dialects that have their own identity data type
WITHOUT_CLASSIFICATION	prepare the left hand side and get the data type.
WITHOUT_CLASSIFICATION	used also for generation of fk names!
WITHOUT_CLASSIFICATION	usually useless
WITHOUT_CLASSIFICATION	added this caching as i noticed that gettype() is being called multiple times
WITHOUT_CLASSIFICATION	do not add unique constraint on db not supporting unique and nullable columns
WITHOUT_CLASSIFICATION	for backward compatibility disable this
WITHOUT_CLASSIFICATION	may be final may be final may be final
WITHOUT_CLASSIFICATION	may be final
WITHOUT_CLASSIFICATION	may be final
WITHOUT_CLASSIFICATION	custom sql
WITHOUT_CLASSIFICATION	primary key constraint
WITHOUT_CLASSIFICATION	the root of the incoming property path matched one of the embedded composite identifier properties
WITHOUT_CLASSIFICATION	ignore it
WITHOUT_CLASSIFICATION	flat recursive algorithm
WITHOUT_CLASSIFICATION	an identifier mapper => getkey will be included in the getnonduplicatedpropertyiterator() and checked later so it needs to be excluded
WITHOUT_CLASSIFICATION	if the hibernate-mapping did not specify a schema/catalog use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping or as params they will already be initialized and will override the values set here (they are in identifiergeneratorproperties)
WITHOUT_CLASSIFICATION	pass the entity-name if not a collection-id
WITHOUT_CLASSIFICATION	custom sql
WITHOUT_CLASSIFICATION	primary key constraint
WITHOUT_CLASSIFICATION	pass the column name (a generated id almost always has a single column)
WITHOUT_CLASSIFICATION	needed to satisfy keyvalue
WITHOUT_CLASSIFICATION	empty means no scoping
WITHOUT_CLASSIFICATION	index should be last column listed
WITHOUT_CLASSIFICATION	if it is a formula index use the element columns in the pk
WITHOUT_CLASSIFICATION	don't create a unique key 'cos some databases don't like a uk on nullable columns
WITHOUT_CLASSIFICATION	arraylist list = new arraylist()list.addall( getkey().getconstraintcolumns() )list.addall( getindex().getconstraintcolumns() )getcollectiontable().createuniquekey(list)
WITHOUT_CLASSIFICATION	}
WITHOUT_CLASSIFICATION	no foreign key element of for a one-to-many
WITHOUT_CLASSIFICATION	todo we could just return all false
WITHOUT_CLASSIFICATION	the case of a foreign key to something other than the pk is handled in createpropertyrefconstraints
WITHOUT_CLASSIFICATION	todo we could just return all false
WITHOUT_CLASSIFICATION	if the property mapping consists of all formulas make it non-updateable
WITHOUT_CLASSIFICATION	columnupdateability.length==0 ||
WITHOUT_CLASSIFICATION	if the property mapping consists of all formulas make it insertable
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	expected type is intrinsic here
WITHOUT_CLASSIFICATION	}
WITHOUT_CLASSIFICATION	}
WITHOUT_CLASSIFICATION	return memberpersister.getpropertytype(propertyname)
WITHOUT_CLASSIFICATION	return memberpersister.tocolumns(alias propertyname)
WITHOUT_CLASSIFICATION	return memberpersister.gettype()
WITHOUT_CLASSIFICATION	&& !indexisformula
WITHOUT_CLASSIFICATION	return !isonetomany()
WITHOUT_CLASSIFICATION	instanceof associationtype
WITHOUT_CLASSIFICATION	we need to determine the best way to know that two joinables represent a single many-to-many
WITHOUT_CLASSIFICATION	strip leading ''
WITHOUT_CLASSIFICATION	public boolean issubselectloadable()
WITHOUT_CLASSIFICATION	key
WITHOUT_CLASSIFICATION	columns
WITHOUT_CLASSIFICATION	sql statements
WITHOUT_CLASSIFICATION	extra information about the element type
WITHOUT_CLASSIFICATION	types
WITHOUT_CLASSIFICATION	custom sql
WITHOUT_CLASSIFICATION	private final string unquotedidentifiercolumnname
WITHOUT_CLASSIFICATION	dynamic filters specifically for many-to-many inside the collection
WITHOUT_CLASSIFICATION	dynamic filters for the collection
WITHOUT_CLASSIFICATION	nativesql collect key column and auto-aliases
WITHOUT_CLASSIFICATION	unquotedkeycolumnnames = stringhelper.unquote(keycolumnaliases)
WITHOUT_CLASSIFICATION	element
WITHOUT_CLASSIFICATION	nativesql collect element column and auto-aliases
WITHOUT_CLASSIFICATION	index and row select
WITHOUT_CLASSIFICATION	nativesql collect index column and auto-aliases
WITHOUT_CLASSIFICATION	unquotedidentifiercolumnname = identifiercolumnalias
WITHOUT_CLASSIFICATION	unquotedidentifiercolumnname = null
WITHOUT_CLASSIFICATION	generate the sql
WITHOUT_CLASSIFICATION	for non-arrays we don't need to know the element class elementtype.returnedclass()
WITHOUT_CLASSIFICATION	not all classpersisters implement propertymapping!
WITHOUT_CLASSIFICATION	handle any filters applied to this collection
WITHOUT_CLASSIFICATION	handle any filters applied to this collection for many-to-many
WITHOUT_CLASSIFICATION	if there is a user-specified loader return that todo filters!?
WITHOUT_CLASSIFICATION	take care of any entities that might have been evicted!
WITHOUT_CLASSIFICATION	strip leading ''
WITHOUT_CLASSIFICATION	run a subquery loader
WITHOUT_CLASSIFICATION	needed by arrays
WITHOUT_CLASSIFICATION	todo something with formulas
WITHOUT_CLASSIFICATION	an assertion
WITHOUT_CLASSIFICATION	remove all the old entries
WITHOUT_CLASSIFICATION	create all the new entries
WITHOUT_CLASSIFICATION	&& !indexisformula
WITHOUT_CLASSIFICATION	&& !indexisformula
WITHOUT_CLASSIFICATION	delete all the deleted entries
WITHOUT_CLASSIFICATION	insert all the new entries
WITHOUT_CLASSIFICATION	==elementtype ??
WITHOUT_CLASSIFICATION	update all the modified entries
WITHOUT_CLASSIFICATION	identifier collections not supported for 1-to-many
WITHOUT_CLASSIFICATION	update removed rows fks to null
WITHOUT_CLASSIFICATION	will still be issued when it used to be null
WITHOUT_CLASSIFICATION	now update all changed or added rows fks
WITHOUT_CLASSIFICATION	buf.append( selectfragment( lhsalias "" ) )ignore suffix for collection columns!
WITHOUT_CLASSIFICATION	use suffix for the entity columns
WITHOUT_CLASSIFICATION	the class hierarchy structure
WITHOUT_CLASSIFICATION	private final string roottablename
WITHOUT_CLASSIFICATION	initialization
WITHOUT_CLASSIFICATION	custom sql
WITHOUT_CLASSIFICATION	the class hierarchy structure
WITHOUT_CLASSIFICATION	execute the sql
WITHOUT_CLASSIFICATION	this could also just be true all the time
WITHOUT_CLASSIFICATION	chop the last union (all)
WITHOUT_CLASSIFICATION	todo check this.
WITHOUT_CLASSIFICATION	initialization
WITHOUT_CLASSIFICATION	properties of this class including inherited properties
WITHOUT_CLASSIFICATION	the closure of all properties in the entire hierarchy including subclasses and superclasses of this class
WITHOUT_CLASSIFICATION	the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class
WITHOUT_CLASSIFICATION	subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an sql case
WITHOUT_CLASSIFICATION	multitables
WITHOUT_CLASSIFICATION	custom sql
WITHOUT_CLASSIFICATION	subclass closure properties
WITHOUT_CLASSIFICATION	subclasses
WITHOUT_CLASSIFICATION	( (column) model.gettable().getprimarykey().getcolumniterator().next() ).getname()
WITHOUT_CLASSIFICATION	( (column) sc.gettable().getprimarykey().getcolumniterator().next() ).getname()
WITHOUT_CLASSIFICATION	don't need subclass tables because they can't appear in conditions
WITHOUT_CLASSIFICATION	special case where we need to force incloude all subclass joins
WITHOUT_CLASSIFICATION	the class hierarchy structure
WITHOUT_CLASSIFICATION	properties of this class including inherited properties
WITHOUT_CLASSIFICATION	the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class
WITHOUT_CLASSIFICATION	get em on the second pass!
WITHOUT_CLASSIFICATION	now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)
WITHOUT_CLASSIFICATION	discriminator column
WITHOUT_CLASSIFICATION	initialization
WITHOUT_CLASSIFICATION	private final map propertytablenumbersbyname = new hashmap()
WITHOUT_CLASSIFICATION	class + table
WITHOUT_CLASSIFICATION	discriminator
WITHOUT_CLASSIFICATION	properties
WITHOUT_CLASSIFICATION	subclasses
WITHOUT_CLASSIFICATION	execute the sql
WITHOUT_CLASSIFICATION	joins
WITHOUT_CLASSIFICATION	propertytablenumbersbyname.put( prop.getname() join )
WITHOUT_CLASSIFICATION	access cached sql
WITHOUT_CLASSIFICATION	figure out which tables need to be fetched
WITHOUT_CLASSIFICATION	figure out which columns are needed
WITHOUT_CLASSIFICATION	figure out which formulas are needed
WITHOUT_CLASSIFICATION	render the sql
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	moved up from abstractentitypersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	the optional sql string defined in the where attribute
WITHOUT_CLASSIFICATION	information about lazy properties of this class
WITHOUT_CLASSIFICATION	information about all properties in class hierarchy
WITHOUT_CLASSIFICATION	information about all columns/formulas in class hierarchy
WITHOUT_CLASSIFICATION	dynamic filters attached to the class-level
WITHOUT_CLASSIFICATION	sql strings
WITHOUT_CLASSIFICATION	for objects that came in via update()
WITHOUT_CLASSIFICATION	properties
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	identifier
WITHOUT_CLASSIFICATION	version
WITHOUT_CLASSIFICATION	where string
WITHOUT_CLASSIFICATION	subclass property closure
WITHOUT_CLASSIFICATION	before add -)
WITHOUT_CLASSIFICATION	handle any filters applied to the class level
WITHOUT_CLASSIFICATION	only one-to-one is lazy fetched
WITHOUT_CLASSIFICATION	note early exit here
WITHOUT_CLASSIFICATION	object have been loaded with setreadonly(true) hhh-2236
WITHOUT_CLASSIFICATION	note this assumes something about how propertyselectfragment is implemented by the subclass!
WITHOUT_CLASSIFICATION	strip leading " "
WITHOUT_CLASSIFICATION	if there is no resulting row return null
WITHOUT_CLASSIFICATION	otherwise return the "hydrated" state (ie. associations are not resolved)
WITHOUT_CLASSIFICATION	null owner ok??
WITHOUT_CLASSIFICATION	null sql means that the only lazy properties are shared pk one-to-one associations which are handled differently in the type#nullsafeget code
WITHOUT_CLASSIFICATION	create a new from node for the referenced class.
WITHOUT_CLASSIFICATION	the difficulty here is exactly what do we update in order to force the version to be incremented in the db
WITHOUT_CLASSIFICATION	performance op to avoid the array search
WITHOUT_CLASSIFICATION	properly handle property-ref-based associations
WITHOUT_CLASSIFICATION	enable for hhh-440 which we don't like
WITHOUT_CLASSIFICATION	aliases
WITHOUT_CLASSIFICATION	aliases named identifier ( alias.idname )
WITHOUT_CLASSIFICATION	aliases for composite-id's
WITHOUT_CLASSIFICATION	fetch embedded identifiers propertynames from the "virtual" identifier component
WITHOUT_CLASSIFICATION	embedded composite ids ( alias.idname1 alias.idname2 )
WITHOUT_CLASSIFICATION	todo skip formulas?
WITHOUT_CLASSIFICATION	don't need filters for the static loaders
WITHOUT_CLASSIFICATION	do two passes for collection property-ref!
WITHOUT_CLASSIFICATION	select the correct row by either pk or rowid
WITHOUT_CLASSIFICATION	todo eventually rowidname[j]
WITHOUT_CLASSIFICATION	this is a property of the table which we are updating
WITHOUT_CLASSIFICATION	special shortcut for id properties skip the join! this must only occur at the _end_ of a path expression
WITHOUT_CLASSIFICATION	we are using "all" or "dirty" property-based optimistic locking
WITHOUT_CLASSIFICATION	nothing to do even if the operand is a parameter no way we could infer an appropriate expected type here
WITHOUT_CLASSIFICATION	this property belongs on the table and is to be inserted
WITHOUT_CLASSIFICATION	add normal properties
WITHOUT_CLASSIFICATION	add the discriminator
WITHOUT_CLASSIFICATION	more specifically "? [op] datetime" 1) if the operator is minus the param needs to be of some datetime type 2) if the operator is plus the param needs to be of some numeric type
WITHOUT_CLASSIFICATION	add normal properties
WITHOUT_CLASSIFICATION	this property belongs on the table and is to be inserted
WITHOUT_CLASSIFICATION	add the discriminator
WITHOUT_CLASSIFICATION	add the primary key
WITHOUT_CLASSIFICATION	delegate already handles pk columns
WITHOUT_CLASSIFICATION	we can't batch joined inserts especially not if it is an identity insert nor can we batch statements where the expectation is based on an output param
WITHOUT_CLASSIFICATION	render the sql query
WITHOUT_CLASSIFICATION	write the values of fields onto the prepared statement - we must use the state at the time the insert was issued (cos of foreign key constraints). not necessarily the object's current state
WITHOUT_CLASSIFICATION	todo shouldnt inserts be expectations.none?
WITHOUT_CLASSIFICATION	don't bother trying to update we know there is no row there yet
WITHOUT_CLASSIFICATION	if all fields are null we might need to delete existing row
WITHOUT_CLASSIFICATION	there is probably a row there so try to update if no rows were updated we will find out
WITHOUT_CLASSIFICATION	note updates to joined tables can't be batched
WITHOUT_CLASSIFICATION	starting index
WITHOUT_CLASSIFICATION	now write the values of fields onto the prepared statement
WITHOUT_CLASSIFICATION	write any appropriate versioning conditional parameters
WITHOUT_CLASSIFICATION	render the sql query
WITHOUT_CLASSIFICATION	do the key. the key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued
WITHOUT_CLASSIFICATION	we should use the _current_ object state (ie. after any updates that occurred during flush)
WITHOUT_CLASSIFICATION	this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"
WITHOUT_CLASSIFICATION	note dirtyfields==null means we had no snapshot and we couldn't get one using select-before-update oldfields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyfields)
WITHOUT_CLASSIFICATION	more specifically "datetime [op] ?" 1) if the operator is minus we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is plus the param needs to be of some numeric type
WITHOUT_CLASSIFICATION	for the case of dynamic-update="true" we need to generate the update sql
WITHOUT_CLASSIFICATION	don't need to check laziness (dirty checking algorithm handles that)
WITHOUT_CLASSIFICATION	for the case of dynamic-update="false" or no snapshot we use the static sql
WITHOUT_CLASSIFICATION	if not "get" then try "is"
WITHOUT_CLASSIFICATION	now update only the tables with dirty properties (and the table with the version number)
WITHOUT_CLASSIFICATION	for the case of dynamic-insert="true" we need to generate the insert sql
WITHOUT_CLASSIFICATION	for the case of dynamic-insert="true" we need to generate the insert sql
WITHOUT_CLASSIFICATION	for the case of dynamic-insert="false" use the static sql
WITHOUT_CLASSIFICATION	for the case of dynamic-insert="false" use the static sql
WITHOUT_CLASSIFICATION	not supported
WITHOUT_CLASSIFICATION	this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"
WITHOUT_CLASSIFICATION	we need to utilize dynamic delete statements
WITHOUT_CLASSIFICATION	otherwise utilize the static delete statements
WITHOUT_CLASSIFICATION	just a performance opt!
WITHOUT_CLASSIFICATION	just a performance opt!
WITHOUT_CLASSIFICATION	all joins join to the pk of the driving table
WITHOUT_CLASSIFICATION	notice that we skip the first table it is the driving table!
WITHOUT_CLASSIFICATION	we can inner join to superclass tables (the row must be there) we can never inner join to subclass tables
WITHOUT_CLASSIFICATION	skip the driving table
WITHOUT_CLASSIFICATION	get 'em in the right order (not that it really matters)
WITHOUT_CLASSIFICATION	here we work under the following assumptions ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime always results in a double 3) datetime - {something other than datetime} always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases
WITHOUT_CLASSIFICATION	render the where and from parts
WITHOUT_CLASSIFICATION	we could regerate this inside each called method!
WITHOUT_CLASSIFICATION	now render the joins
WITHOUT_CLASSIFICATION	this will add the new from element to the origin.
WITHOUT_CLASSIFICATION	now render the select clause
WITHOUT_CLASSIFICATION	now tie it all together
WITHOUT_CLASSIFICATION	insert/update/delete sql
WITHOUT_CLASSIFICATION	select sql
WITHOUT_CLASSIFICATION	no need to check laziness dirty checking handles that
WITHOUT_CLASSIFICATION	fully resolve the map reference create implicit joins.
WITHOUT_CLASSIFICATION	temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	the basic implementation is to simply use the node's text
WITHOUT_CLASSIFICATION	for dialects which are known to not support ansi-sql row-value-constructor syntax we should mutate the tree.
WITHOUT_CLASSIFICATION	due to the complexity in initializing the selectclause do not generate one here. if it is not found simply return null also do not cache since it gets generated well after we are created.
WITHOUT_CLASSIFICATION	check the version unsaved-value if appropriate
WITHOUT_CLASSIFICATION	let this take precedence if defined since it works for assigned identifiers
WITHOUT_CLASSIFICATION	check the id unsaved-value
WITHOUT_CLASSIFICATION	check to see if it is in the second-level cache
WITHOUT_CLASSIFICATION	/
WITHOUT_CLASSIFICATION	for property references generate <tablealias>.<columnname> as <projectionalias>
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	if there is no resulting row return null
WITHOUT_CLASSIFICATION	force immediate execution of the insert
WITHOUT_CLASSIFICATION	if this from element is a collection and the path is a collection property (maxindex etc.) then generate a sub-query.
WITHOUT_CLASSIFICATION	entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	cannot occur
WITHOUT_CLASSIFICATION	cannot occur
WITHOUT_CLASSIFICATION	only carry on if the method has no parameters
WITHOUT_CLASSIFICATION	try "get"
WITHOUT_CLASSIFICATION	do nothing
WITHOUT_CLASSIFICATION	do nothing
WITHOUT_CLASSIFICATION	should be safe to only ever expect entitypersister references here
WITHOUT_CLASSIFICATION	this page intentionally left blank )
WITHOUT_CLASSIFICATION	do not do anything
WITHOUT_CLASSIFICATION	ignore
WITHOUT_CLASSIFICATION	cant instantiate
WITHOUT_CLASSIFICATION	if it is a property of an embedded component invoke on the "identifier"
WITHOUT_CLASSIFICATION	otherwise
WITHOUT_CLASSIFICATION	skip finalize methods
WITHOUT_CLASSIFICATION	note interfaces is assumed to already contain hibernateproxy.class
WITHOUT_CLASSIFICATION	note interfaces is assumed to already contain hibernateproxy.class
WITHOUT_CLASSIFICATION	hhh-2481 make sure the callback gets cleared otherwise the instance stays in a static thread local.
WITHOUT_CLASSIFICATION	while constructor is running
WITHOUT_CLASSIFICATION	while constructor is running
WITHOUT_CLASSIFICATION	note interface is assumed to already contain hibernateproxy.class
WITHOUT_CLASSIFICATION	interfaces arguments
WITHOUT_CLASSIFICATION	todo!
WITHOUT_CLASSIFICATION	get the caller
WITHOUT_CLASSIFICATION	get the caller principals
WITHOUT_CLASSIFICATION	private static final alias default_alias = new alias(10 null)
WITHOUT_CLASSIFICATION	needed to bump this up to dotnode because that is the only thing which currently knows about the property-ref path in the correct format it is either this or recurse over the dotnodes constructing the property path just like dotnode does internally
WITHOUT_CLASSIFICATION	if the identifier is quoted remove the quotes
WITHOUT_CLASSIFICATION	truncate the identifier to the max alias length less the suffix length
WITHOUT_CLASSIFICATION	full joins are not supported.. yet!
WITHOUT_CLASSIFICATION	null is not considered the same type as integer. $non-nls-1 $non-nls-1
WITHOUT_CLASSIFICATION	the outerjoinsafterwhere needs to come before where clause to properly handle dynamic filters
WITHOUT_CLASSIFICATION	$non-nls-1
WITHOUT_CLASSIFICATION	$non-nls-1
WITHOUT_CLASSIFICATION	$non-nls-1
WITHOUT_CLASSIFICATION	$non-nls-1
WITHOUT_CLASSIFICATION	strip off any leading 'and' token
WITHOUT_CLASSIFICATION	if the condition is not already there
WITHOUT_CLASSIFICATION	dontspace.add("'")
WITHOUT_CLASSIFICATION	for mysql
WITHOUT_CLASSIFICATION	hashmap columnsunique = new hashmap()
WITHOUT_CLASSIFICATION	null caused some problems
WITHOUT_CLASSIFICATION	package
WITHOUT_CLASSIFICATION	not sure if this would ever be null but wanted to be careful
WITHOUT_CLASSIFICATION	even on inverse="true"
WITHOUT_CLASSIFICATION	package
WITHOUT_CLASSIFICATION	package
WITHOUT_CLASSIFICATION	if true then execute db updates otherwise just generate and display updates
WITHOUT_CLASSIFICATION	we only release the connection
WITHOUT_CLASSIFICATION	deprecated option
WITHOUT_CLASSIFICATION	if an exception occurs during flush user must call rollback()
WITHOUT_CLASSIFICATION	actually this last test is probably unnecessary since beforecompletion() doesn't get called during rollback
WITHOUT_CLASSIFICATION	this one only really needed for badly-behaved applications! (if the transactionmanager has a sychronization registered its a noop) (actually we do need it for downgrading locks)
WITHOUT_CLASSIFICATION	create an dotnode ast for the path and resolve it.
WITHOUT_CLASSIFICATION	if an exception occurs during flush user must call rollback()
WITHOUT_CLASSIFICATION	if we could not register a synchronization do the before/after completion callbacks ourself (but we need to let jdbccontext know that this is what we are going to do so it doesn't keep trying to register synchronizations)
WITHOUT_CLASSIFICATION	swallow it and continue to roll back jta transaction
WITHOUT_CLASSIFICATION	so the transaction is already rolled back by jta spec
WITHOUT_CLASSIFICATION	this method is a noop if there is a synchronization!
WITHOUT_CLASSIFICATION	two conditions where we need to transform this to a theta-join syntax 1) 'elem' is the "root from-element" in correlated subqueries 2) the dotnode.usethetastyleimplicitjoins has been set to true and 'elem' represents an implicit join
WITHOUT_CLASSIFICATION	websphere however is not a sane jee/jta container
WITHOUT_CLASSIFICATION	for sane jee/jta containers the transaction itself functions as its identifier
WITHOUT_CLASSIFICATION	swallow the transaction was finished
WITHOUT_CLASSIFICATION	all aliastoentitymapresulttransformer are considered equal ~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	create the join element under the from element.
WITHOUT_CLASSIFICATION	all distinctrootentityresulttransformer are considered equal ~~~~~~~~~~~
WITHOUT_CLASSIFICATION	map of entitymode -> tuplizer
WITHOUT_CLASSIFICATION	this is a virtual id property
WITHOUT_CLASSIFICATION	this one needed only for guessentitymode()
WITHOUT_CLASSIFICATION	create our own copy of the user-supplied tuplizer impl map
WITHOUT_CLASSIFICATION	todo move this to sf per hhh-3517 also see hhh-1907 and componentmetamodel
WITHOUT_CLASSIFICATION	then the pojo tuplizer using the dynamic-map tuplizer if no pojo representation is available
WITHOUT_CLASSIFICATION	build the dynamic-map tuplizer
WITHOUT_CLASSIFICATION	then dom4j tuplizer if dom4j representation is available
WITHOUT_CLASSIFICATION	build the dynamic-map tuplizer
WITHOUT_CLASSIFICATION	put the "standard" tuplizers into the tuplizer map first
WITHOUT_CLASSIFICATION	found a ctor but it was not publicly accessible so try to request accessibility
WITHOUT_CLASSIFICATION	private final sessionfactoryimplementor sessionfactory
WITHOUT_CLASSIFICATION	cached for efficiency
WITHOUT_CLASSIFICATION	public componentmetamodel(component component sessionfactoryimplementor sessionfactory) {
WITHOUT_CLASSIFICATION	this.sessionfactory = sessionfactory
WITHOUT_CLASSIFICATION	it was not embedded so the argument is just an id
WITHOUT_CLASSIFICATION	then the pojo tuplizer using the dynamic-map tuplizer if no pojo representation is available
WITHOUT_CLASSIFICATION	then dom4j tuplizer if dom4j representation is available
WITHOUT_CLASSIFICATION	put the "standard" tuplizers into the tuplizer map first
WITHOUT_CLASSIFICATION	then handle any user-defined entity modes
WITHOUT_CLASSIFICATION	return currentid
WITHOUT_CLASSIFICATION	reset the id
WITHOUT_CLASSIFICATION	origin.adddestination( destination ) this was the cause of hhh-242 origin.settype( from_fragment ) set the parent node type so that the ast is properly formed. the destination node will have all the from text. the parent node is a collection join too (voodoo - see joinprocessor)
WITHOUT_CLASSIFICATION	reset the version
WITHOUT_CLASSIFICATION	the default is to simply not lazy fetch properties for now
WITHOUT_CLASSIFICATION	add the second join the one that ends in the destination table.
WITHOUT_CLASSIFICATION	temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	found a ctor but it was not publicly accessible so try to request accessibility
WITHOUT_CLASSIFICATION	determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy
WITHOUT_CLASSIFICATION	return getfactory().getsettings().getbytecodeprovider().getproxyfactoryfactory().buildproxyfactory()
WITHOUT_CLASSIFICATION	not final because proxy factory creation can fail
WITHOUT_CLASSIFICATION	superclass entity-name
WITHOUT_CLASSIFICATION	temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	init the aliases after initing the constructornode
WITHOUT_CLASSIFICATION	temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	legacy behavior (with no abstract attribute specified)
WITHOUT_CLASSIFICATION	get ready to start adding nodes.
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	note this affects the return value!
WITHOUT_CLASSIFICATION	need to account for allowable '_' within the variant
WITHOUT_CLASSIFICATION	add the type to the list of returned sqlresulttypes.
WITHOUT_CLASSIFICATION	collection types
WITHOUT_CLASSIFICATION	convenience methods relating to operations across arrays of types
WITHOUT_CLASSIFICATION	lobs cannot be compared
WITHOUT_CLASSIFICATION	blobs are ignored by merge()
WITHOUT_CLASSIFICATION	value is the entity name
WITHOUT_CLASSIFICATION	early exit!
WITHOUT_CLASSIFICATION	generate id select fragment and then property select fragment for each expression just like generateselectfragments().
WITHOUT_CLASSIFICATION	todo!
WITHOUT_CLASSIFICATION	xml is the entity name
WITHOUT_CLASSIFICATION	special case this is the leaf of the containment graph even though not immutable
WITHOUT_CLASSIFICATION	tolerates nulls
WITHOUT_CLASSIFICATION	sqlresulttypelist
WITHOUT_CLASSIFICATION	metatype is assumed to be single-column type
WITHOUT_CLASSIFICATION	get all the select expressions (that we just generated) and render the select.
WITHOUT_CLASSIFICATION	look through the fromelement's children to find any collections of values that should be fetched
WITHOUT_CLASSIFICATION	return associationtype.foreign_key_to_parent this is better but causes a transient object exception
WITHOUT_CLASSIFICATION	use the lower case function name. remember whether we're in a select clause or not.
WITHOUT_CLASSIFICATION	ident might be the name of a class.
WITHOUT_CLASSIFICATION	todo!!!
WITHOUT_CLASSIFICATION	st.settimestamp( index new timestamp( cal.gettimeinmillis() ) cal ) jdk 1.5 only
WITHOUT_CLASSIFICATION	st.setdate( index new date( cal.gettimeinmillis() ) cal ) jdk 1.5 only
WITHOUT_CLASSIFICATION	both are timestamps
WITHOUT_CLASSIFICATION	at least one is a plain old date
WITHOUT_CLASSIFICATION	noop
WITHOUT_CLASSIFICATION	if the corresponding sql value is null the reader we got is null as well
WITHOUT_CLASSIFICATION	fetch reader content up to the end - and put characters in a stringbuffer
WITHOUT_CLASSIFICATION	return stringbuffer content as a large string
WITHOUT_CLASSIFICATION	or types.longvarchar?
WITHOUT_CLASSIFICATION	not called at runtime so doesn't matter if its slow )
WITHOUT_CLASSIFICATION	todo
WITHOUT_CLASSIFICATION	chop off the rest of the tree.
WITHOUT_CLASSIFICATION	different nullability rules for pk/fk
WITHOUT_CLASSIFICATION	cache this
WITHOUT_CLASSIFICATION	only really need new array during semiresolve!
WITHOUT_CLASSIFICATION	forcefully remove leading ands from where fragments the grammar will handle adding them
WITHOUT_CLASSIFICATION	todo!!!!!!!
WITHOUT_CLASSIFICATION	create a new filters node as a parent of all filters
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	public object instantiate(object parent sessionimplementor session) throws hibernateexception
WITHOUT_CLASSIFICATION	nothing to do
WITHOUT_CLASSIFICATION	nothing to do
WITHOUT_CLASSIFICATION	versiontype impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ note simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the timestamp datatype supported by sybase and sql server which are completely db-generated values
WITHOUT_CLASSIFICATION	lobs cannot be compared
WITHOUT_CLASSIFICATION	not really necessary i guess
WITHOUT_CLASSIFICATION	clobs are ignored by merge() operation
WITHOUT_CLASSIFICATION	we do not have to worry about queued additions to uninitialized collections since they can only occur for inverse collections!
WITHOUT_CLASSIFICATION	collections cannot be compared
WITHOUT_CLASSIFICATION	remember the uk value
WITHOUT_CLASSIFICATION	noop
WITHOUT_CLASSIFICATION	processcollectionproperty(token q.getcollectionpersister(collectionrole) collectionname)
WITHOUT_CLASSIFICATION	we must use the "remembered" uk value since it is not available from the entityentry during assembly
WITHOUT_CLASSIFICATION	collections don't dirty an unversioned parent entity
WITHOUT_CLASSIFICATION	return false
WITHOUT_CLASSIFICATION	this just handles a particular case of component projection perhaps get rid of it and throw an exception
WITHOUT_CLASSIFICATION	note we avoid joining to the next table if the named property is just the foreign key value
WITHOUT_CLASSIFICATION	the key is the owning entity itself so get the id from the key
WITHOUT_CLASSIFICATION	if the original is a persistentcollection and that original was not flagged as dirty then reset the target's dirty flag here after the copy operation. </p> one thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know
WITHOUT_CLASSIFICATION	ignore subselect keywords
WITHOUT_CLASSIFICATION	copy elements into newly empty target collection
WITHOUT_CLASSIFICATION	for a null target or a target which is the same as the original we need to put the merged elements in a new collection
WITHOUT_CLASSIFICATION	by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here
WITHOUT_CLASSIFICATION	get the elements back into the target making sure to handle dirty flag
WITHOUT_CLASSIFICATION	check if collection is currently being loaded
WITHOUT_CLASSIFICATION	check if it is already completely loaded but unowned
WITHOUT_CLASSIFICATION	cache the actual id of the object not the value of the property-ref which might not be initialized
WITHOUT_CLASSIFICATION	todo!!!!!!!
WITHOUT_CLASSIFICATION	create a new collection wrapper to be initialized later
WITHOUT_CLASSIFICATION	some jdbc drivers erroneously return an empty array here for a null db value /
WITHOUT_CLASSIFICATION	our column span is the number of columns in the pk
WITHOUT_CLASSIFICATION	cannot batch fetch by unique key (property-ref associations)
WITHOUT_CLASSIFICATION	we already know current is not null
WITHOUT_CLASSIFICATION	the ids are fully resolved so compare them with isdirty() not ismodified()
WITHOUT_CLASSIFICATION	the owner of the association is not the owner of the id
WITHOUT_CLASSIFICATION	----------------------------------------------------------- constructors
WITHOUT_CLASSIFICATION	----------------------------------------------------- instance variables
WITHOUT_CLASSIFICATION	public static jdbcexception newjdbcexception(string string sqlexception root string sql) { string = string + " [" + sql + ']' log.error(string root) logexceptions(root) return new jdbcexception(string root sql) } public static jdbcexception newjdbcexception(string string sqlexception root) { log.error(string root) logexceptions(root) return new jdbcexception(string root) }
WITHOUT_CLASSIFICATION	--------------------------------------------------------- public methods
WITHOUT_CLASSIFICATION	compare the two maps for equality
WITHOUT_CLASSIFICATION	simple tests that require no synchronization
WITHOUT_CLASSIFICATION	sybase fail if we don't do that sigh
WITHOUT_CLASSIFICATION	handles things like a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a b c ) (overloaded brackets) not not a a is not null (overloaded "not") etc and expressions like foo = bar (maps to foo.id = bar.id) foo.bar = 'foo' (maps to foo.bar = 'foo') foo.bar.baz = 1.0 (maps to foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.bar.baz (maps to bar.baz = 1.0 and foo.bar = bar.id) foo.bar.baz = a.b.c (maps to bar.baz = b.c and foo.bar = bar.id and a.b = b.id) foo.bar.baz + a.b.c (maps to bar.baz + b.c and foo.bar = bar.id and a.b = b.id) ( foo.bar.baz + 1.0 ) < 2.0 (maps to ( bar.baz + 1.0 ) < 2.0 and foo.bar = bar.id)
WITHOUT_CLASSIFICATION	release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders
WITHOUT_CLASSIFICATION	release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders
WITHOUT_CLASSIFICATION	try to "pretty print" it
WITHOUT_CLASSIFICATION	otherwise just dump it
WITHOUT_CLASSIFICATION	its an interface so we can't really tell anything
WITHOUT_CLASSIFICATION	its an interface so we can't really tell anything
WITHOUT_CLASSIFICATION	use default behavior
WITHOUT_CLASSIFICATION	note early return
WITHOUT_CLASSIFICATION	the mru cache used to keep hard references to the most recently used query plans note lru here is a bit of a misnomer it indicates that lru entries are removed the actual kept entries are the mru entries
WITHOUT_CLASSIFICATION	we want to be able to just use the defaults if jndi environment properties are not supplied so don't put null in anywhere
WITHOUT_CLASSIFICATION	clone -----------------------------------------------------------------------
WITHOUT_CLASSIFICATION	serialize -----------------------------------------------------------------------
WITHOUT_CLASSIFICATION	stream closed in the finally
WITHOUT_CLASSIFICATION	stream closed in the finally
WITHOUT_CLASSIFICATION	deserialize -----------------------------------------------------------------------
WITHOUT_CLASSIFICATION	static methods only - hide constructor
WITHOUT_CLASSIFICATION	&& !('_'==character)
WITHOUT_CLASSIFICATION	returnign null!
WITHOUT_CLASSIFICATION	returnign null!
WITHOUT_CLASSIFICATION	includes last '.'
WITHOUT_CLASSIFICATION	+1 to include the following '.'
WITHOUT_CLASSIFICATION	impl note takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method
WITHOUT_CLASSIFICATION	first time we find match!
WITHOUT_CLASSIFICATION	entitynames may now include slashes for the representations classname may be an inner class
WITHOUT_CLASSIFICATION	wrapped iterators
WITHOUT_CLASSIFICATION	index of current iterator in the wrapped iterators array
WITHOUT_CLASSIFICATION	the current iterator
WITHOUT_CLASSIFICATION	the last used iterator
WITHOUT_CLASSIFICATION	it was a boolean expression
WITHOUT_CLASSIFICATION	public static object[] clone(class elementclass object[] array) {object[] result = (object[]) array.newinstance( elementclass array.length )system.arraycopy(array 0 result 0 array.length)return result}
WITHOUT_CLASSIFICATION	call this before any iterator method to make sure that the current iterator is not exhausted
WITHOUT_CLASSIFICATION	doable if needed
WITHOUT_CLASSIFICATION	set last used iterator here in case the user calls remove before calling hasnext() or next() (although they shouldn't)
WITHOUT_CLASSIFICATION	peek ahead
WITHOUT_CLASSIFICATION	if we reach the end of the string w/o finding the matching end that is an exception
WITHOUT_CLASSIFICATION	we have a placeholder spin forward till we find the end
WITHOUT_CLASSIFICATION	make sure spinning forward did not put us past the end of the buffer
WITHOUT_CLASSIFICATION	first try to locate this resource through the current context classloader.
WITHOUT_CLASSIFICATION	next try to locate this resource through this class's classloader
WITHOUT_CLASSIFICATION	next try to locate this resource through the system classloader
WITHOUT_CLASSIFICATION	anywhere else we should look?
WITHOUT_CLASSIFICATION	would need an identityset for this!
WITHOUT_CLASSIFICATION	arrays.aslist doesn't do primitive arrays
WITHOUT_CLASSIFICATION	faster?
WITHOUT_CLASSIFICATION	the name of a class
WITHOUT_CLASSIFICATION	its the listener class name
WITHOUT_CLASSIFICATION	allow 987654321
WITHOUT_CLASSIFICATION	default to element set if no elements() specified
WITHOUT_CLASSIFICATION	look for the instance by uuid
WITHOUT_CLASSIFICATION	in case we were deserialized in a different jvm look for an instance with the same name (alternatively we could do an actual jndi lookup here.)
WITHOUT_CLASSIFICATION	first lets determine whether to apply cglib or javassist based instrumentation
WITHOUT_CLASSIFICATION	make sure we don't override previous set values
WITHOUT_CLASSIFICATION	entirely optional!!
WITHOUT_CLASSIFICATION	its the listener instance (or better be)
WITHOUT_CLASSIFICATION	context.unbind(boundname)
WITHOUT_CLASSIFICATION	readresolveobject
WITHOUT_CLASSIFICATION	cfg.setproperty("hibernate.show_sql" "true")
WITHOUT_CLASSIFICATION	defensive convenience methods
WITHOUT_CLASSIFICATION	create the sessionfactory from hibernate.cfg.xml
WITHOUT_CLASSIFICATION	make sure you log the exception as it might be swallowed
WITHOUT_CLASSIFICATION	begin unit of work
WITHOUT_CLASSIFICATION	write html header
WITHOUT_CLASSIFICATION	handle actions
WITHOUT_CLASSIFICATION	print page
WITHOUT_CLASSIFICATION	write html footer
WITHOUT_CLASSIFICATION	end unit of work
WITHOUT_CLASSIFICATION	start the session to be used for this request
WITHOUT_CLASSIFICATION	make the session available to the session factory's "current context"
WITHOUT_CLASSIFICATION	pass control along to the rest of the processing chain
WITHOUT_CLASSIFICATION	remove session from "current context"
WITHOUT_CLASSIFICATION	eager fetch the collection so we can use it detached
WITHOUT_CLASSIFICATION	if we want to handle it bidirectional and detached we also need to load this collection with an eager outer-join fetch this time with criteria and not hql
WITHOUT_CLASSIFICATION	event anevent = (event) session .createcriteria(event.class).setfetchmode("participants" fetchmode.join) .add( expression.eq("id" eventid) ) .uniqueresult() eager fetch the colleciton so we can use it detached
WITHOUT_CLASSIFICATION	end of first unit of work
WITHOUT_CLASSIFICATION	or bidirectional safety method setting both sides aperson.addtoevent(anevent)
WITHOUT_CLASSIFICATION	begin second unit of work
WITHOUT_CLASSIFICATION	reattachment of aperson
WITHOUT_CLASSIFICATION	the getemailaddresses() might trigger a lazy load of the collection
WITHOUT_CLASSIFICATION	we need our tm so get it now and avoid doing other work if there is a problem
WITHOUT_CLASSIFICATION	don't hold the jbc node lock throughout the tx as that prevents reads and other updates
WITHOUT_CLASSIFICATION	don't hold the jbc node lock throughout the tx as that prevents reads and other updates
WITHOUT_CLASSIFICATION	jbc put a version in the node when it created as part of some internal operation. we are always newer but if the jbc version is > 1 something odd has happened
WITHOUT_CLASSIFICATION	swaldman 2006-08-28 define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations
WITHOUT_CLASSIFICATION	not null if the isolation level has been specified in the configuration file. otherwise it is left to the driver's default value.
WITHOUT_CLASSIFICATION	configured outside of hibernate (i.e. servlet container or java bean container already has proxool pools running and this provider is to just borrow one of these
WITHOUT_CLASSIFICATION	if you're closing down the connectionprovider chances are an is not a real big deal just warn
WITHOUT_CLASSIFICATION	(as is always optional for consistency with sql/oql)
WITHOUT_CLASSIFICATION	process the "new" hql style where aliases are assigned _after_ the class name or path expression ie. using the as construction
WITHOUT_CLASSIFICATION	the loaded owner will be set to null after the collection is removed so capture its value as the affected owner so it is accessible to both pre- and post- events
WITHOUT_CLASSIFICATION	is a primitive type invokespecial
WITHOUT_CLASSIFICATION	array of primitive type do nothing
WITHOUT_CLASSIFICATION	handle a path expression or class name that appears at the start in the "new" hql style or an alias that appears at the start in the "old" hql style
WITHOUT_CLASSIFICATION	handle <= >= != is not not between not in
WITHOUT_CLASSIFICATION	the loop ensures atomicity of the select + update even for no transaction or read committed isolation level
WITHOUT_CLASSIFICATION	transfer an explicitly defined entity name handle the lazy attribute
WITHOUT_CLASSIFICATION	keep the behavior consistent even for boundary usages
WITHOUT_CLASSIFICATION	keep the behavior consistent even for boundary usages
WITHOUT_CLASSIFICATION	get meta's from <joined-subclass>
WITHOUT_CLASSIFICATION	parameters on the property mapping should override parameters in the typedef
WITHOUT_CLASSIFICATION	fetch="join" overrides default laziness fetch="join" overrides default laziness
WITHOUT_CLASSIFICATION	note special case default to join and non-lazy for the "second join" of the many-to-many
WITHOUT_CLASSIFICATION	so we "clock over" on the first invocation
WITHOUT_CLASSIFICATION	state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	void setcomponenttuplizerfactory(componenttuplizerfactory componenttuplizerfactory) { this.componenttuplizerfactory = componenttuplizerfactory }
WITHOUT_CLASSIFICATION	element index -> id
WITHOUT_CLASSIFICATION	note that it might be better to iterate the snapshot but this is safe assuming the user implements equals() properly as required by the set contract!
WITHOUT_CLASSIFICATION	collections detect changes made via their public interface and mark themselves as dirty as a performance optimization
WITHOUT_CLASSIFICATION	essentially if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception note that allowing close() above has the same basic effect but we capture that there simply to perform the unbind
WITHOUT_CLASSIFICATION	the default sqlexceptionconverter for all dialects is based on sqlstate since sqlerrorcode is extremely vendor-specific. specific dialects may override to return whatever is most appropriate for that vendor.
WITHOUT_CLASSIFICATION	only necessary for postgre < 7.4 httpanoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml
WITHOUT_CLASSIFICATION	select topic syntax from information_schema.help where section like 'function%' order by section topic see also -> httpwww.h2database.com/html/functions.html
WITHOUT_CLASSIFICATION	registercolumntype(types.varbinary "character($l)") registercolumntype(types.blob "character($l)" ) for use prior to cp 11.0 registercolumntype(types.clob "character($l)" )
WITHOUT_CLASSIFICATION	the blob type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include k - kilobyte m - megabyte g - gigabyte. refer to the pbdevelopers guide for more info.
WITHOUT_CLASSIFICATION	we must return a valid rdms/rsa command from this method to prevent rdms/rsa from issuing error 400
WITHOUT_CLASSIFICATION	oracle driver reports to support getgeneratedkeys() but they only support the version taking an array of the names of the columns to be returned (via its returning clause). no other driver seems to support this overloaded version.
WITHOUT_CLASSIFICATION	add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list
WITHOUT_CLASSIFICATION	you may still have other resultsets or update counts left to process here but you can't do it now or the resultset you just got will be closed
WITHOUT_CLASSIFICATION	note for object <-> sql datatype mappings see configuration manager | advanced | sql | system ddl datatype mappings tbdregistercolumntype(types.binary "binary($1)") changed 08-11-2005 jsl
WITHOUT_CLASSIFICATION	trim(end_keyword string-expression-1 from string-expression-2) use hibernate implementation "from" is one of the parameters they pass in position ?3 registerfunction( "trim" new sqlfunctiontemplate(hibernate.string "trim(?1 ?2 from ?3)") )
WITHOUT_CLASSIFICATION	whether this dialect has an identity clause added to the data type or a completely seperate identity data type
WITHOUT_CLASSIFICATION	according to both the ansi-sql and jpa specs trim takes a variable number of parameters between 1 and 4. at least one paramer (trimsource) is required. from the sql spec <trim function> = trim <left paren> <trim operands> <right paren> <trim operands> = [ [ <trim specification> ] [ <trim character> ] from ] <trim source> <trim specification> = leading | trailing | both if <trim specification> is omitted both is assumed. if <trim character> is omitted space is assumed
WITHOUT_CLASSIFICATION	/ prepare persisters and link them up with their cache region/access-strategy
WITHOUT_CLASSIFICATION	named queries
WITHOUT_CLASSIFICATION	this will throw an error if there's something wrong.
WITHOUT_CLASSIFICATION	does not handle arrays (thats ok cos they can't be lazy) or newly instantiated collections so we can do the cast
WITHOUT_CLASSIFICATION	collection deletions are a special case since update() can add deletions of collections not loaded by the session.
WITHOUT_CLASSIFICATION	we can do the cast since orphan-delete does not apply to 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)
WITHOUT_CLASSIFICATION	if the natural-id is marked as non-mutable it is not retrieved during a normal database-snapshot operation
WITHOUT_CLASSIFICATION	watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)
WITHOUT_CLASSIFICATION	slice to get the columns for this component property
WITHOUT_CLASSIFICATION	int result = 17 result = 37 result + type.hashcode() result = 37 result + ( value==null ? 0 value.hashcode() ) return result
WITHOUT_CLASSIFICATION	the collectionentry.isreached() stuff is just to detect any silly users who set up circular or shared references between/to collections.
WITHOUT_CLASSIFICATION	detached collection wrappers that get found + reattached during flush shouldn't be ignored
WITHOUT_CLASSIFICATION	the unique property value represented here may or may not be serializable so we do an explicit check here in order to generate a better error message
WITHOUT_CLASSIFICATION	if the version of a newly instantiated object is not the same as the version seed value use that as the unsaved-value
WITHOUT_CLASSIFICATION	ie. we never have to null out a reference to an uninitialized proxy
WITHOUT_CLASSIFICATION	ignore this row the collection is in process of being loaded somewhere further "up" the stack
WITHOUT_CLASSIFICATION	entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently not yet used
WITHOUT_CLASSIFICATION	should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. besides it makes the code much easier to read than the old transactionhelper stuff
WITHOUT_CLASSIFICATION	this implementation is supposed to tolerate incorrect unsaved-value mappings for the purpose of backward-compatibility
WITHOUT_CLASSIFICATION	this implementation is supposed to tolerate incorrect unsaved-value mappings for the purpose of backward-compatibility
WITHOUT_CLASSIFICATION	wrap up any new collections directly referenced by the object or its components
WITHOUT_CLASSIFICATION	remove any snapshot not really for memory management purposes but rather because it might now be stale and there is no longer any entityentry to take precedence this is now handled by removeentity() session.getpersistencecontext().removedatabasesnapshot(key)
WITHOUT_CLASSIFICATION	skip this check for composite-ids relating to dom4j entity-mode alternatively we could add a check to make sure the incoming id value is an instance of element
WITHOUT_CLASSIFICATION	upgrade the lock if necessary lock(result lockmode)
WITHOUT_CLASSIFICATION	now any collections that are initialized inside this block do not get updated - they are ignored until the next flush
WITHOUT_CLASSIFICATION	we must clone embedded composite identifiers or we will get back the same instance that we pass in
WITHOUT_CLASSIFICATION	sub-insertions should occur before containing insertion so try to do the callback now
WITHOUT_CLASSIFICATION	the entity is not associated with the session so try interceptor and unsaved-value
WITHOUT_CLASSIFICATION	scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface returning multiple query strings (make sure we don't pick up a class in the select clause!)
WITHOUT_CLASSIFICATION	save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	stops flush being called multiple times if this method is recursively called
WITHOUT_CLASSIFICATION	if it is an uninitialized proxy pointing with this session then when it is accessed the underlying instance will be "contained"
WITHOUT_CLASSIFICATION	generate an explicit join for the root dot node. the implied joins will be collected and passed up to the root dot node.
WITHOUT_CLASSIFICATION	a session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed
WITHOUT_CLASSIFICATION	does the collection referenced by this fromelement specify an order-by attribute? if so attach it to the query's order-by
WITHOUT_CLASSIFICATION	and the token could be an identifer and the error is a mismatched token error
WITHOUT_CLASSIFICATION	if a where clause was specified in the update/delete query use it to limit the returned ids here
WITHOUT_CLASSIFICATION	int parameterstart = getwalker().getnumberofparametersinsetclause() list allparams = getidselectparameterspecifications() iterator whereparams = allparams.sublist( parameterstart allparams.size() ).iterator()
WITHOUT_CLASSIFICATION	default implementation if this node has a data type and that data type is not an association then this is scalar.
WITHOUT_CLASSIFICATION	resolve the lhs fully generate implicit joins. pass in the property name so that the resolver can discover foreign key (id) properties.
WITHOUT_CLASSIFICATION	if the propertytype is null and there isn't a parent just stop now there was a problem resolving the node anyway.
WITHOUT_CLASSIFICATION	we do not look for an existing join on the same path because it makes sense to join twice on the same collection role
WITHOUT_CLASSIFICATION	our parent is another dot node meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's pk (because 'our' table would know the fk).
WITHOUT_CLASSIFICATION	public final currency getcurrency(int col) throws hibernateexception {return (currency) get(col)}
WITHOUT_CLASSIFICATION	here we have two possibilities 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name
WITHOUT_CLASSIFICATION	set the unresolved path in this node and the parent. set the text for the parent.
WITHOUT_CLASSIFICATION	get the first child to be considered. sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. distinct).
WITHOUT_CLASSIFICATION	if this is an entity and the property is the identifier property then use getidentifiertype(). note that the propertyname.equals( propertypath ) checks whether we have a component key reference where the component class property name is the same as the entity id property name if the two are not equal this is the case and we'd need to "fall through" to using the property mapping.
WITHOUT_CLASSIFICATION	for a subquery the alias to use depends on a few things (we already know this is not an overall select) 1) if this from_element represents a correlation to the outer-most query a) if the outer query represents a multi-table persister we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) b) otherwise we need to use the persister's table name as the column qualification 2) otherwise (not correlated) use the given alias
WITHOUT_CLASSIFICATION	not a collection? return the entity property mapping.
WITHOUT_CLASSIFICATION	collection of <many-to-any/> mappings used to circumvent the component-collection check below
WITHOUT_CLASSIFICATION	otherwise the destination node was implied by the from clause and the from clause processor will automatically add it in the right place.
WITHOUT_CLASSIFICATION	if the first identifier in the path referrs to the class alias (not the class name) then this is a correlated subselect. if it's a correlated sub-select use the existing table alias. otherwise generate a new one.
WITHOUT_CLASSIFICATION	check to see if our "proppath" actually represents a property on the persister
WITHOUT_CLASSIFICATION	an ident node can represent an index expression if the ident represents a naked property ref note this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrexpr -> resolve()). the other option if that changes is to call resolve from here but it is currently un-needed overhead.
WITHOUT_CLASSIFICATION	this uses a pathexpressionparser but notice that compound paths are not valid only bare names and simple paths
WITHOUT_CLASSIFICATION	if this is an implied join in a from clause then use ansi-style joining and set the flag on the fromelement that indicates that it was implied in the from clause itself.
WITHOUT_CLASSIFICATION	origin.adddestination(destination) add the query spaces.
WITHOUT_CLASSIFICATION	for an explicit many-to-many relationship add a second join from the intermediate (many-to-many) table to the destination table. also make sure that the from element's idea of the destination is the destination table.
WITHOUT_CLASSIFICATION	reset the node type because the rest of the system is expecting from_fragment all we wanted was for the factory to create the right sub-class. this might get reset again later on anyway to make the sql generation simpler.
WITHOUT_CLASSIFICATION	explicit = true this is an explict select. arraylist sqlresulttypelist = new arraylist()
WITHOUT_CLASSIFICATION	sqlresulttypelist.add( type ) generate the select expression.
WITHOUT_CLASSIFICATION	if the expression list has exactly one expression and the type of the expression is a collection then this might be a collection function such as index(c) or size(c).
WITHOUT_CLASSIFICATION	need to parse off the column qualifiers this is assuming (which is true as of now) that this is only used from update and delete hql statement parsing
WITHOUT_CLASSIFICATION	for regression testing against output from the old parser found it easiest to simply reorder the fromelements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser this is definitely another of those "only needed for regression purposes". the syntheticandfactory then simply injects them as it encounters them.
WITHOUT_CLASSIFICATION	the uber-rule here is that we need to include subclass joins if the fromelement is in any way dereferenced by a property from the subclass table otherwise we end up with column references qualified by a non-existent table reference in the resulting sql
WITHOUT_CLASSIFICATION	classic translator does not support collection of ordinal param metadata
WITHOUT_CLASSIFICATION	the following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.
WITHOUT_CLASSIFICATION	the loop ensures atomicity of the select + update even for no transaction or read committed isolation level
WITHOUT_CLASSIFICATION	should not be able to reach last without maxposition being set unless there are no results
WITHOUT_CLASSIFICATION	we found it in the temp pc. should indicate we are in the midst of processing a result set containing eager fetches via join fetch
WITHOUT_CLASSIFICATION	do not use proxiesbykey since not all proxies that point to this session's instances are in that collection!
WITHOUT_CLASSIFICATION	if there is no tm configured we will not be able to access the javax.transaction.transaction object in order to register a synch anyway.
WITHOUT_CLASSIFICATION	since the result set cursor is always left at the first physical row after the "last processed" we need to jump back one position to get the key value we are interested in skipping
WITHOUT_CLASSIFICATION	true if this is a query and we are loading multiple instances of the same collection role otherwise this is a collectioninitializer and we are loading up a single collection or batch
WITHOUT_CLASSIFICATION	we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode none)
WITHOUT_CLASSIFICATION	add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)
WITHOUT_CLASSIFICATION	assume we are in an auto-commit state
WITHOUT_CLASSIFICATION	log a message about potential connection leaks
WITHOUT_CLASSIFICATION	ps.close() just close it do not try to return it to the pool! note early exit!
WITHOUT_CLASSIFICATION	this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through hibernate's registered transaction synchronization on a separate "reaping" thread. in cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these cmes occur. and though it is not "allowed" per-se the end result without handling it specifically is infinite looping. so here we simply break the loop
WITHOUT_CLASSIFICATION	unfortunately this stuff can't be cached because it is per-invocation not constant for the querytranslator instance
WITHOUT_CLASSIFICATION	can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode
WITHOUT_CLASSIFICATION	don't create a unique key 'cos some databases don't like a uk on nullable columns getcollectiontable().createuniquekey( getidentifier().getconstraintcolumns() )
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or entityinfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	isset = collection.isset() issorted = collection.issorted()
WITHOUT_CLASSIFICATION	lists arrays sets maps bags
WITHOUT_CLASSIFICATION	we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching
WITHOUT_CLASSIFICATION	use a combination of foreign key columns and pk columns since the ordering of removal and addition is not guaranteed when a child moves from one parent to another
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or entityinfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	information about properties of this class including inherited properties (only really needed for updatable/insertable properties)
WITHOUT_CLASSIFICATION	all this only really needs to consider properties of this class not its subclasses but since we are reusing code used for sequential selects we use the subclass closure
WITHOUT_CLASSIFICATION	here we render the select column list based on the properties defined as being generated. for partial component generation we currently just re-select the whole component rather than trying to handle the individual generated portions.
WITHOUT_CLASSIFICATION	this is the root (versioned) table and we are using version-based optimistic locking if we are not updating the version also don't check it (unless this is a "generated" version column)!
WITHOUT_CLASSIFICATION	optimistic-lock="all" include all updatable properties optimistic-lock="dirty" include all properties we are updating this time
WITHOUT_CLASSIFICATION	this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"
WITHOUT_CLASSIFICATION	check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a jta transaction context so must be autocommit mode)
WITHOUT_CLASSIFICATION	need to treat this as if it where optimistic-lock="all" (dirty does not make sense) first we need to locate the "loaded" state note it potentially could be a proxy so perform the location the safe way
WITHOUT_CLASSIFICATION	we always assume an instance with a null identifier or no identifier property is unsaved!
WITHOUT_CLASSIFICATION	need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. using the collection's key type causes problems with property-ref keys
WITHOUT_CLASSIFICATION	allow any identifier quoted with backtick only recognizes identifiers beginning with a letter
WITHOUT_CLASSIFICATION	following doesn't handle (null not null) but unnecessary since this would mean all rows
WITHOUT_CLASSIFICATION	impl note due to the delayed population of setters (setters cached for performance) we really cannot pro0perly define equality for this transformer
WITHOUT_CLASSIFICATION	we need to dirty check collections since they can cause an owner version number increment
WITHOUT_CLASSIFICATION	return the id so we can use it to reset the proxy id return result
WITHOUT_CLASSIFICATION	optimizer = getfactory().getsettings().getbytecodeprovider().getreflectionoptimizer( mappedclass getternames setternames proptypes )
WITHOUT_CLASSIFICATION	cache the actual id of the object not the value of the property-ref which might not be initialized
WITHOUT_CLASSIFICATION	we now have the value of the property-ref we reference. however we need to dig a little deeper as that property might also be an entity type in which case we need to resolve its identitifier
WITHOUT_CLASSIFICATION	retrieve the value of the designated column in the current row of this resultset object as a java.io.reader object
WITHOUT_CLASSIFICATION	not absolutely necessary but helps for some equals()/hashcode() implementations
WITHOUT_CLASSIFICATION	this should be a call to resolve() not resolveidentifier() 'cos it might be a property-ref and we did not cache the referenced value
WITHOUT_CLASSIFICATION	if we have <tt>not-found="ignore"</tt> association mapped to a formula we always need to dirty check it so we can update the second-level cache
WITHOUT_CLASSIFICATION	can't just return null here since that would cause an owning component to become null
WITHOUT_CLASSIFICATION	for arrays replaceelements() may return a different reference since the array length might not match
WITHOUT_CLASSIFICATION	actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the mru entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).
WITHOUT_CLASSIFICATION	as soon as we encounter our first letter return the substring from that position
WITHOUT_CLASSIFICATION	note expected in the syntax type=listenerclass ({sep}type=listenerclass) where {sep} is any whitespace or comma
WITHOUT_CLASSIFICATION	istransactioncallbackregistered denotes whether any hibernate transaction has registered as a callback against this jdbccontext only one such callback is allowed. directly serializing this value causes problems with jdbctransaction or really any transaction impl where the callback is local to the transaction instance itself since that transaction is not serialized along with the jdbccontext. thus we handle that fact here explicitly
WITHOUT_CLASSIFICATION	note that for sequential scrolling we make the assumption that the first persister element is the "root entity"
WITHOUT_CLASSIFICATION	we call getkeyfromresultset() here so that we can know the key value upon which to perform the breaking logic. however it is also then called from getrowfromresultset() which is certainly not the most efficient. but the call here is needed and there currently is no other way without refactoring of the doquery()/getrowfromresultset() methods
WITHOUT_CLASSIFICATION	this check is needed since processing leaves the cursor after the last physical row for the current logical row thus if we are after the last physical row this might be caused by either 1) scrolling to the last logical row 2) scrolling past the last logical row in the latter scenario the previous logical row really is the last logical row. in all other cases we should process back two logical records (the current logic row plus the previous logical row).
WITHOUT_CLASSIFICATION	and perform the load
WITHOUT_CLASSIFICATION	important reuse the same event instances for performance!
WITHOUT_CLASSIFICATION	this is a query and we are loading multiple instances of the same collection role
WITHOUT_CLASSIFICATION	we found a collection element in the result set
WITHOUT_CLASSIFICATION	we did not find a collection element in the result set so we ensure that a collection is created with the owner's identifier since what we have is an empty collection
WITHOUT_CLASSIFICATION	this is a collection initializer so we must create a collection for each of the passed-in keys to account for the possibility that the collection is empty and has no rows in the result set
WITHOUT_CLASSIFICATION	grab its state from the resultset and keep it in the session (but don't yet initialize the object itself) note that we acquire lockmode.read even if it was not requested
WITHOUT_CLASSIFICATION	a many-to-many decrement currentdepth here to allow join across the association table without exceeding max_fetch_depth (i.e. the "currentdepth - 1" bit)
WITHOUT_CLASSIFICATION	if not a composite key use "foo in (? ? ?)" for batching if no batch and not a composite key use "foo = ?"
WITHOUT_CLASSIFICATION	the user visible aliases which are unknown to the superclass these are not the actual "physical" sql aliases
WITHOUT_CLASSIFICATION	first look for a reference to a projection alias
WITHOUT_CLASSIFICATION	first look for a reference to a projection alias
WITHOUT_CLASSIFICATION	it does not refer to an alias of a projection look for a property
WITHOUT_CLASSIFICATION	determine if the collection elements are entities
WITHOUT_CLASSIFICATION	let return-propertys override whatever the persister has for aliases.
WITHOUT_CLASSIFICATION	translates an ast join type (i.e. the token type) into a joinfragment.xxx join type. @param astjointype the ast join type (from hqlsqltokentypes or sqltokentypes) @return a joinfragment.xxx join type. @see joinfragment @see sqltokentypes
WITHOUT_CLASSIFICATION	ignore
WITHOUT_CLASSIFICATION	ignore
WITHOUT_CLASSIFICATION	}
WITHOUT_CLASSIFICATION	public list getcollectionaliases() { return collectionaliases } public list getcollectionowners() { return collectionowners } public list getcollectionowneraliases() { return collectionowneraliases } public list getcollectionpersisters() { return collectionpersisters } public map getalias2persister() { return alias2persister } public boolean iscollectioninitializer() { return iscollectioninitializer } public list getpersisters() { return persisters } public map getalias2owneralias() { return alias2owneralias } public list getscalartypes() { return scalartypes } public list getscalarcolumnaliases() { return scalarcolumnaliases } public list getpropertyresults() { return propertyresults } public list getcollectionpropertyresults() { return collectionresults } public map getalias2return() { return alias2return }
WITHOUT_CLASSIFICATION	sqlqueryparser parser = new sqlqueryparser( sqlquery processor.getalias2persister() processor.getalias2return() aliases collaliases collpersisters suffixes collsuffixes ) sql = parser.process() namedparameterbindpoints = parser.getnamedparameters()
WITHOUT_CLASSIFICATION	include the discriminator and class-level where but not filters
WITHOUT_CLASSIFICATION	sqlaliassuffixes[i] = element.getcolumnaliassuffix()
WITHOUT_CLASSIFICATION	none because its the requested lock mode not the actual!
WITHOUT_CLASSIFICATION	at this point we have (drivingsqlalias) the sql alias of the driving table corresponding to the given user alias. however the driving table is not (necessarily) the table against which we want to apply locks. mainly the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies it just happens that driving and root are the same).
WITHOUT_CLASSIFICATION	the column doesnt exist at all.
WITHOUT_CLASSIFICATION	we have a mapped identifier property and the root of the incoming property path matched that identifier property
WITHOUT_CLASSIFICATION	we have an embedded composite identifier
WITHOUT_CLASSIFICATION	both many-to-one and one-to-one are represented as a property. entitypersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. so we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. the other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. if that assertion changes then this check needs to change as well. partially this is an issue with the overloading of the term "lazy" here
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	roottablename = persistentclass.getroottable().getqualifiedname( factory.getdialect() factory.getdefaultcatalog() factory.getdefaultschema() )
WITHOUT_CLASSIFICATION	subclasses
WITHOUT_CLASSIFICATION	custom sql
WITHOUT_CLASSIFICATION	protected void initpropertypaths(final string pathfinal type typefinal string[] columnsfinal string[] formulatemplatesfinal mapping factory)throws mappingexception {addformulapropertypath(path type formulatemplates)initpropertypaths(path type columns formulatemplates factory)}
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	custom sql (would be better if these were private)
WITHOUT_CLASSIFICATION	moved up from abstractentitypersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	aliases for identifier ( alias.id ) skip if the entity defines a non-id property named 'id'
WITHOUT_CLASSIFICATION	decide which resultset to get the property value from
WITHOUT_CLASSIFICATION	note it is conceptually possible that a usertype could map null to a non-null value so the following is arguable
WITHOUT_CLASSIFICATION	the contract of entitytuplizer.determineconcretesubclassentityname says that returning null is an indication that the specified entity-name (this.getentityname) should be used.
WITHOUT_CLASSIFICATION	need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. using the collection's key type causes problems with property-ref keys
WITHOUT_CLASSIFICATION	cache these since they are stateless this one could even be static
WITHOUT_CLASSIFICATION	"as" is not in keywords
WITHOUT_CLASSIFICATION	--commented out by inspection (12/4/04 910 am) public abstract void addcondition(string alias string[] columns string condition)
WITHOUT_CLASSIFICATION	use the id column alias
WITHOUT_CLASSIFICATION	private list aliases = new arraylist()
WITHOUT_CLASSIFICATION	columns.add(columnname) aliases.add(tablealias)
WITHOUT_CLASSIFICATION	where fragment must be empty!
WITHOUT_CLASSIFICATION	revert to traditional hibernate behavior of setting initialpoolsize to minpoolsize unless otherwise specified with a c3p0.-style parameter.
WITHOUT_CLASSIFICATION	arbitrary on clause ignored!!
WITHOUT_CLASSIFICATION	might happen with a managed connection
WITHOUT_CLASSIFICATION	might happen with a managed connection
WITHOUT_CLASSIFICATION	if an exception occurs during flush user must call rollback()
WITHOUT_CLASSIFICATION	essentially 1) if we have a local (hibernate) transaction in progress and it already has the usertransaction cached use that usertransaction to determine the status. 2) if a transaction manager has been located use that transaction manager to determine the status. 3) finally as the last resort try to lookup the usertransaction via jndi and use that to determine the status.
WITHOUT_CLASSIFICATION	package
WITHOUT_CLASSIFICATION	swallow it (the transaction _was_ successful or successfully rolled back)
WITHOUT_CLASSIFICATION	ignore it
WITHOUT_CLASSIFICATION	we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database) since in this case a null entity reference can lose information
WITHOUT_CLASSIFICATION	create our own copy of the user-supplied tuplizer impl map
WITHOUT_CLASSIFICATION	regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed) so suspend any ongoing tx
WITHOUT_CLASSIFICATION	then handle any user-defined entity modes
WITHOUT_CLASSIFICATION	establish the region root node with a non-locking data version
WITHOUT_CLASSIFICATION	temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	note this is being used from the process of shutting down a sessionfactory. specific things to consider (1) this clearing of the region should not propagate to other nodes on the cluster (if any) this is the cache-mode-local option bit (2) really just trying a best effort to cleanup after ourselves lock failures etc are not critical here this is the fail-silently option bit
WITHOUT_CLASSIFICATION	need to extract the component values and check for subtype replacements
WITHOUT_CLASSIFICATION	we ignore minimalputoverride. jbosscache putforexternalread is already about as minimal as we can get it will promptly return if it discovers that the node we want to write to already exists
WITHOUT_CLASSIFICATION	for now just "re-flatten" the metamodel since this is temporary stuff anyway (hhh-1907)
WITHOUT_CLASSIFICATION	configure the cache to use our tm
WITHOUT_CLASSIFICATION	this solution would allow us to eliminate the owner arg to disassemble() but what if the collection was null and then later had elements added? seems unsafe session.getpersistencecontext().getcollectionentry( (persistentcollection) value ).getkey()
WITHOUT_CLASSIFICATION	make sure jbc doesn't look one up
WITHOUT_CLASSIFICATION	some collections are not lazy
WITHOUT_CLASSIFICATION	here we don't want to suspend the tx. if we do 1) we might be caching query results that reflect uncommitted changes. no tx == no wl on cache node so other threads can prematurely see those query results 2) no tx == immediate replication. more overhead plus we spread issue #1 above around the cluster
WITHOUT_CLASSIFICATION	return the (fully resolved) identifier value but do not resolve to the actual referenced entity instance note the owner of the association is not really the owner of the id!
WITHOUT_CLASSIFICATION	add a zero (or quite low) timeout option so we don't block. ignore any timeoutexception. basically we forego caching the query result in order to avoid blocking. reads are done with suspended tx so they should not hold the lock for long. not caching the query result is ok since any subsequent read will just see the old result with its out-of-date timestamp that result will be discarded and the db query performed again.
WITHOUT_CLASSIFICATION	impl note takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method
WITHOUT_CLASSIFICATION	we have the jbcwritemutex so no other local thread will be trying to write this key. it's possible here some remote thread has come in and changed the values again but since we are reading the values to write to jbc right now we know we are writing the latest values i.e. we don't assume that what we cached in entry.update() above is what we should write to jbc now. our write could be redundant i.e. we are writing what some remote thread just came in an wrote. there is a chance that yet another remote thread will update us and we'll then overwrite that later data in jbc. but all remote nodes will ignore that change in their localcache the only place it will live will be in jbc where it can only effect the initial state transfer values on newly joined nodes (i.e. populatelocalcache()).
WITHOUT_CLASSIFICATION	local cache so we use synchronization
WITHOUT_CLASSIFICATION	local cache so we use synchronization
WITHOUT_CLASSIFICATION	don't need to lock the cache here since if someone else inserted the same pk first the insert would fail
WITHOUT_CLASSIFICATION	we need to grab the version value from the entity otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush
WITHOUT_CLASSIFICATION	we need to obtain the lock before any actions are executed since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)
WITHOUT_CLASSIFICATION	postdelete after actually deleting a row record the fact that the instance no longer exists on the database (needed for identity-column key generation) and remove it from the session cache
WITHOUT_CLASSIFICATION	intentionally empty
DESIGN	todo what else to do here?
DESIGN	put() has nowait semantics is this really appropriate? note that it needs to be async replication never local or sync
DESIGN	'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. the need for it is intended to be alleviated with future developement thus it is not defined as an environment constant it is used to control whether we should consult the jdbc metadata to determine certain settings default values it is useful to not do this when the database may not be available (mainly in tools usage).
DESIGN	todo get sql rendering out of this package!
DESIGN	todo get sql rendering out of this package!
DESIGN	todo eventually merge this with treecache and just add optional opt-lock support there.
DESIGN	can happen because of the multiple ways cache.remove() can be invoked (
DESIGN	work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea
DESIGN	fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties
DESIGN	fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties
DESIGN	fixme hacky workaround to jbcache-1202
DESIGN	fixme hacky workaround to jbcache-1202
DESIGN	todo i considered validating ts cache config here but decided to defer unti gettimestampscacheinstance() in case the cache is never actually used
DESIGN	todo is this a valid operation on a timestamps cache?
DESIGN	todo is this a valid operation on a timestamps cache?
DESIGN	todo why not use the timestamp in a dataversion?
DESIGN	can happen because of the multiple ways cache.remove() can be invoked (
DESIGN	work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea
DESIGN	swaldman 2004-02-07 modify to allow null values to signify fall through to c3p0 poolconfig defaults
DESIGN	turn hibernate.c3p0. into c3p0. so c3p0 gets a chance to see all hibernate.c3p0.
DESIGN	todo this bit actually has to be called after all cascades! but since identity insert is called synchronously instead of asynchronously as other actions it isn't
DESIGN	todo reenable if we also fix the above todo
DESIGN	todo inefficient if that cache is just going to ignore the updated state!
DESIGN	we may be screwed here since the collection action is about to execute and we do not know the final owner key value
DESIGN	create an action that will evict collection and entity regions based on queryspaces (table names). todo cache the autodetected information and pass it in instead.
DESIGN	todo what else to do here?
DESIGN	todo modify the class definition if not already transformed
DESIGN	todo what else to do here?
DESIGN	this is called by sessionfactory irregardless we just disregard here could also add a check to sessionfactory to only conditionally call start
DESIGN	this is called by sessionfactory irregardless we just disregard here could also add a check to sessionfactory to only conditionally call stop
DESIGN	todo to handle concurrent writes correctly this should return a lock to the client
DESIGN	put() has nowait semantics is this really appropriate? note that it needs to be async replication never local or sync
DESIGN	todo to handle concurrent writes correctly the client should pass in a lock
DESIGN	todo assumes all collections disassemble to an array!
DESIGN	todo reuse the preloadevent
DESIGN	todo this was added to support initializing an entity's entityentry snapshot during reattach this should be refactored to instead expose a method to assemble a entityentry based on this state for return.
DESIGN	todo what is the implication of this?
DESIGN	use count as the default. this mimics the old behavior although none might be a better option moving forward in the case of callable
DESIGN	todo joinkeycolumnname & foreignkeycolumnname should be called either here or at a slightly higer level in the stack (to get all the information we need) right now hbmbinder does not support the
DESIGN	todo suck this into initlaziness!
DESIGN	we have to set up the table later!! yuck
DESIGN	todo better to degrade to lazy="false" if uninstrumented
DESIGN	todo again how should this work for non-pojo entities?
DESIGN	todo this is a bit of copy/paste from indexedcollection.createprimarykey()
DESIGN	this inner class implements a case statement.perhaps im being a bit over-clever here
DESIGN	todo bad implementation cos it depends upon ordering of mapping doc fixing this requires that collection/persistentclass gain access to the mappings reference from configuration (or the filterdefinitions map directly) sometime during configuration.buildsessionfactory (after all the types/filter-defs are known and before building persisters).
DESIGN	use of a stringbuffer to workaround a jdk bug
DESIGN	hack/workaround as sqlquery impl depend on having a key.
DESIGN	fixme get the persistentclass
DESIGN	fixme get the persistentclass
DESIGN	icky workaround for mysql bug
DESIGN	todo somehow add the newly created foreign keys to the internal collection
DESIGN	todo possibly relax that
DESIGN	todo possibly relax that
DESIGN	todo possibly relax that
DESIGN	use of a stringbuffer to workaround a jdk bug
DESIGN	use a degenerated strategy for backward compatibility
DESIGN	sets can be just a view of a part of another collection. do we need to copy it to be sure it won't be changing underneath us? ie. this.set.addall(set)
DESIGN	note that i parameter is now unused (delete it?)
DESIGN	just to help out during the load (ugly i know)
DESIGN	todo safe to interpret "map.remove(key) == null" as non-dirty?
DESIGN	yick! need this for proper serialization/deserialization handling
DESIGN	todo get sql rendering out of this package!
DESIGN	todo get sql rendering out of this package!
DESIGN	yuck!
DESIGN	todo get sql rendering out of this package!
DESIGN	todo not sure this is correct could not find docs on how to do this.
DESIGN	hsql has no blob/clob support . but just put these here for now!
DESIGN	does this need holdlock also? return tablename + " with (updlock rowlock holdlock)"
DESIGN	sql-server at least needed this dropped after use strange!
DESIGN	todo is there really any reason to kkeep trying if this fails once?
DESIGN	tbd should this be varbinary($1)? registercolumntype(types.varbinary "binary($1)")
DESIGN	is it necessary to register %exact since it can only appear in a where clause?
DESIGN	xmlforest requires a new kind of function constructor
DESIGN	does this dialect support the alter table syntax?
DESIGN	do we need to qualify index names with the schema name?
DESIGN	does this dialect support the unique column syntax?
DESIGN	does this dialect support check constraints?
DESIGN	do we need to drop constraints before dropping tables in this dialect?
DESIGN	does this dialect support the for update syntax?
DESIGN	does this dialect support the oracle-style for update nowait syntax?
DESIGN	does this dialect support for update of allowing particular rows to be locked?
DESIGN	note there is a wierd implementation in the client side
DESIGN	todo never reached since gettypename() actually throws an exception!
DESIGN	todo should we additionally check the current isolation mode explicitly?
DESIGN	todo remove this and just have subclasses use isolater/isolatedwork directly
DESIGN	todo should orphans really be deleted during lock???
DESIGN	orphans should not be deleted during merge??
DESIGN	orphans should not be deleted during copy??
DESIGN	i suppose?
DESIGN	todo suck this logic into the collection!
DESIGN	todo an alternative is to check if the owner has changed if it hasn't then get the id from collection.getowner()
DESIGN	todorefactor + make this method private
DESIGN	todo we can actually just determine this from the incoming entityentry-s
DESIGN	todo should this be an initializeentityeventlistener??? (watch out for performance!)
DESIGN	todo better to pass the id in as an argument?
DESIGN	todo potentially look at optimizing these two arrays
DESIGN	trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp
DESIGN	trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp
DESIGN	todo temporary
DESIGN	todo not quite sure about the full implications of this!
DESIGN	todo not quite sure about the full implications of this!
DESIGN	todo ugly here
DESIGN	this is kinda the best we can do
DESIGN	todo this needn't exclude subclasses
DESIGN	todo need map? the prob is a proper key right?
DESIGN	todo i'd much rather have this done from #endloadingcollection(collectionpersisterloadingcollectionentry)
DESIGN	todo hack!!! note here we cleanup the load context when we have no more local lce entries. this "works" for the time being because really only the collection load contexts are implemented. long term this cleanup should become part of the "close result set" processing from the (sandbox/jdbc) jdbc-container code.
DESIGN	todo should really move this log statement to collectiontype where this is used from
DESIGN	todo keep seperate notions of qt[] here for shallow/non-shallow queries
DESIGN	todo add this info to the translator and aggregate it here
DESIGN	todo move into collection type so we can use polymorphism!
DESIGN	todo should we check the current isolation mode explicitly?
DESIGN	todo suck into event class
DESIGN	do we even really need this? the update will fail anyway.
DESIGN	hum should we cascade anyway? throw an exception? fine like it is?
DESIGN	todo would it be better to do a refresh from db?
DESIGN	todo we use two visitors here inefficient!
DESIGN	this class has no proxies (so do a shortcut)
DESIGN	postload is needed for ejb3 todo reuse the postloadevent
DESIGN	todo put this stuff back in to read snapshot from the second-level cache (needs some extra work)
DESIGN	null or brand new collection this will also (inefficiently) handle arrays which have no snapshot so we can't do any better
DESIGN	todo is this 100% correct?
DESIGN	todo iteratively get transient entities and retry merge until one of the following conditions 1) transientcopycache.size() == 0 2) transientcopycache.size() is not decreasing and copycache.size() is not increasing todo find out if retrying can add entities to copycache (don't think it can) for now just retry once throw transientobjectexception if there are still any transient entities
DESIGN	entity name will not be available for non-pojo entities todo cache the entity name somewhere so that it is available to this exception
DESIGN	todo we should throw an exception if we really know for sure that this is a detached instance rather than just assuming throw new staleobjectstateexception(entityname id)
DESIGN	todo perhaps we should additionally require that the incoming entity version be equivalent to the defined unsaved-value?
DESIGN	perhaps this should be an exception since it is only ever used in the above method?
DESIGN	put a placeholder in entries so we don't recurse back and try to save() the same object again. question should this be done before onsave() is called? likewise should it be done before onupdate()?
DESIGN	todo merge into one method!
DESIGN	todo refactor to .sql package
DESIGN	provides query splitting methods which were originally in querytranslator. <br> todo this will need to be refactored at some point. @author josh
DESIGN	todo this is one of the ugliest and most fragile pieces of code in hibernate.
DESIGN	todo temporary needed because currently persister is the one that creates and renders the join fragments for inheritence hierarchies
DESIGN	todo better way?!?
DESIGN	not possible to simply re-use the versionpropertynode here as it causes oom errors due to circularity (
DESIGN	todothis is only needed during compilation .. can we eliminate the instvar?
DESIGN	todo this is a bit dodgy come up with a better way to check this (plus see above comment)
DESIGN	even here if only properties mapped to the "base table" are referenced in the set and where clauses this could be handled by the basicdelegate. todo decide if it is better performance-wise to perform that check or to simply use the multitableupdatedelegate
DESIGN	todo switch statements are always evil! we already had bugs because of forgotten token types. use polymorphism for this!
DESIGN	todo we really need to be able to deal with component paths here also this is difficult because the hql-sql grammar expects all those node types to be fromreferencenodes. one potential fix here would be to convert the intoclause to just use a fromclause/fromelement combo (as a child of the insertstatement) and move all this logic into the insertstatement. that's probably the easiest approach (read least amount of changes to the grammar and code) but just doesn't feel right as then an insert would contain 2 from-clauses
DESIGN	really there are two situations where it should be ok to allow the insertion into properties defined on a superclass 1) union-subclass with an abstract root entity 2) discrim-subclass #1 is handled already because of the fact that unionsubclasspersister alreay always returns 0 for this call we may want to disallow it for discrim-subclass just for consistency-sake (currently does not work anyway)
DESIGN	yuck!
DESIGN	implicit joins are always(?) ok to reuse
DESIGN	todo we may also want to check that the types here map to exactly one column/jdbc-type can't think of a situation where arithmetic expression between multi-column mappings makes any sense.
DESIGN	we do not know either type blind guess!
DESIGN	todo used to be exprnoparens! was this needed?
DESIGN	todo replace this with a more elegant solution.
DESIGN	todo should this really return null? if not figure out something better to do here.
DESIGN	todo get sql rendering out of this package!
DESIGN	yuck!
DESIGN	ignore it the incoming property could not be found so we cannot be sure what to do here. at the very least the safest is to simply not apply any dereference toggling
DESIGN	todo most of below was taken verbatim from dotnode should either delegate this logic or super-type it
DESIGN	otherwise a trim-specification and/or a trim-character have been specified we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character the trim-source
DESIGN	todo we should really just collect these from the various selectexpressions rather than regenerating here
DESIGN	todo is this a bit ugly?
DESIGN	need a better way to define the suffixes here
DESIGN	todo something much better - look at the type of the other expression! todo have comparisonexpression and/or arithmeticexpression rules complete the resolution of boolean nodes.
DESIGN	todo what amount of significant digits need to be supported here? - from the decimalformat docs [significant digits] = [minimum integer digits] + [maximum fraction digits]
DESIGN	needed the "clazz_" check to work around union-subclasses todo is there a way to tell whether a persister is truly discrim-column based inheritence?
DESIGN	we should actually rework this class to not implement parser and just process path expressions in the most convenient way.
DESIGN	the class is now way to complex!
DESIGN	todo get sql rendering out of here
DESIGN	todo is there a better way?
DESIGN	must be done here because of side-effect! yuck
DESIGN	name from a super query (a bit inelegant that it shows up here)
DESIGN	we should reengineer this class so that rather than the current ad - hoc linear approach to processing a stream of tokens we instead build up a tree of expressions.
DESIGN	this is ugly here but needed because its a subquery
DESIGN	unhappy about this being public is there a better way?
DESIGN	make sure this is a defined parameter and check the incoming value type todo what should be the actual exception type here?
DESIGN	todo this constructor form is only used from constructor directly below us can it go away?
DESIGN	todo copy/paste from sessionimpl pull up!
DESIGN	todo should remove this exposure and have all references to the session's batcher use the connectionmanager.
DESIGN	todo should this get moved to persistentcontext? logically is persistentcontext the "thing" to which an interceptor gets attached?
DESIGN	todo what type?
DESIGN	todo should seriously consider not allowing a txn to begin from a child session can always route the request to the root session
DESIGN	short-circuit for performance
DESIGN	not absolutely necessary but does help with aggressive release
DESIGN	todo remove these last two as batcher is no longer managing connections
DESIGN	work around a bug in all known connection pools.
DESIGN	todo make this the factory for "entity mode related" sessions also means making this the target of transaction-synch and the thing that knows how to cascade things between related sessions at that point perhaps this thing is a "sessioncontext" and connectionmanager is a "jdbccontext"? a "sessioncontext" should live in the impl package
DESIGN	todo does this really need to be here? does the collection already have it's own up-to-date snapshot?
DESIGN	todo the i==entityspan-1 bit depends upon subclass implementation (very bad)
DESIGN	this form used from annotations (?). essentially the same as the above using a resultset-mapping reference but without cachemode readonly and comment. fixme annotations do not use it so it can be remove from my pov @deprecated @param query the sql query string @param resultsetref the result-set-mapping name @param queryspaces any specified query spaces (used for auto-flushing) @param cacheable whether the query results are cacheable @param cacheregion if cacheable the region into which to store the results @param timeout a jdbc-level timeout to be applied @param fetchsize a jdbc-level fetch-size to be applied @param flushmode the flush mode to use for this query @param parametertypes parameter type map @param callable does the query string represent a callable object (i.e. proc)
DESIGN	todo add the notion of enabled filters to the cachekey to differentiate filtered collections from non-filtered but cachekey is currently used for both collections and entities would ideally need to define two seperate ones currently this works in conjuction with the check on defaultinitializecollectioneventhandler.initializecollectionfromcache() (which makes sure to not read from cache with enabled filters). early exit!!!!!
DESIGN	for sets we should end the collection load after resolving the entities since we might call hashcode() on the elements todo or we could do this polymorphically and have two different operations implemented differently for arrays
DESIGN	this is not very nice (and quite slow)
DESIGN	use of trim() here is ugly?
DESIGN	todo this is too conservative if all preceding joins were also inner joins we could use an inner join here
DESIGN	todo look at the owning property and check that it isn't lazy (by instrumentation)
DESIGN	todo inefficient
DESIGN	why does this matter?
DESIGN	from the collection of associations locate oja for the manytoone corresponding to this persister to fully define the many-to-many we need that oja so that we can use its alias here todo is there a better way here?
DESIGN	todo this class depends directly upon criteriaimpl in the impl package add a criteriaimplementor interface
DESIGN	todo add a criteriaimplementor interface this class depends directly upon criteriaimpl in the impl package
DESIGN	todo not so sure this is needed
DESIGN	meant to handle dynamic instantiation queries(copy from queryloader)
DESIGN	todo the order in which entities are saved may matter (e.g. a particular transient entity may need to be saved before other transient entities can be saved keep retrying the batch of transient entities until either 1) there are no transient entities left in transientcopycache or 2) no transient entities were saved in the last batch for now just run through the transient entities and retry the merge
DESIGN	todo this might really even be moved into the cfg package and used as the basis for all things which are configurable.
DESIGN	todo currently expects that the individual with expressions apply to the same sql table join. this may not be the case for joined-subclass where the property values might be coming from different tables in the joined hierarchy. at some point we should expand this to support that capability. however that has some difficulties 1) the biggest is how to handle ors when the individual comparisons are linked to different sql joins. 2) here we would need to track each comparison individually along with the join alias to which it applies and then pass that information back to the fromelement so it can pass it along to the joinsequence
DESIGN	this function has a template -> restore output apply the template and write the result out todo downcast to avoid using an interface? yuck.
DESIGN	at some point the generate phase needs to be moved out of here because a single object-level dml might spawn multiple sql dml command executions. possible to just move the sql generation for dml stuff but for consistency-sake probably best to just move responsiblity for the generation phase completely into the delegates (queryloader/statementexecutor) themselves. also not sure why queryloader currently even has a dependency on this at all does it need it? ideally like to see the walker itself given to the delegates directly
DESIGN	get the right object from the list would it be easier to just call getentity() ??
DESIGN	todo should we just collect these like with the collections above?
DESIGN	todo better to handle dynamic filters through implicit dynamicfilterparameterspecification see the discussion there in dynamicfilterparameterspecification's javadocs as to why it is currently not done that way.
DESIGN	/ used only for regression testing!!!! todo obviously get rid of all this junk ) /
DESIGN	create an index on the key columns??
DESIGN	todo deprecated remove eventually
DESIGN	create an index on the key columns??
DESIGN	todo improve this hack!
DESIGN	inheritance cycle detection (paranoid check)
DESIGN	todo remove use of instanceof!
DESIGN	shortcut
DESIGN	todo handle the case of a foreign key to something other than the pk
DESIGN	create an index on the key columns??
DESIGN	todo remove
DESIGN	todo remove
DESIGN	todo remove
DESIGN	todo throw exception?
DESIGN	todo throw exception? maybe warn if not the same?
DESIGN	todo make entitypersister not depend on sessionfactoryimplementor interface if possible
DESIGN	todo is there a more elegant way than downcasting?
DESIGN	todo encapsulate the protected instance variables!
DESIGN	should indicate that we are processing an insert/update/delete query with a subquery implied via a collection property function. here we need to use the table name itself as the qualification alias. todo verify this works for all databases todo is this also the case in non-"indexed" scenarios?
DESIGN	todo copy/paste from insertrows()
DESIGN	todo copy/paste from recreate()
DESIGN	should this interface extend propertymapping?
DESIGN	ie. the subquery! yuck!
DESIGN	todo move to .sql package!!
DESIGN	todo code duplication with singletableentitypersister
DESIGN	todo it would be really really nice to use this to also model components!
DESIGN	todo two hashmap lookups here is one too many
DESIGN	todo code duplication with joinedsubclassentitypersister
DESIGN	perhaps not really necessary
DESIGN	note this assumes something about how propertyselectfragment is implemented by the subclass! was tounqotedaliasstrings( getidentifercolumnnames() ) before - now tried to remove that unqoting and missing aliases..
DESIGN	note this assumes something about how propertyselectfragment is implemented by the subclass! was tounqotedaliasstrings( getdiscriminatorcolumnname() ) before - now tried to remove that unqoting and missing aliases..
DESIGN	todo should we use select .. for update?
DESIGN	todo optimize this better!
DESIGN	todo should we allow suffixes on these ?
DESIGN	this is really ugly but necessary
DESIGN	ugly little workaround for fact that createuniquekeyloaders() does not handle component properties
DESIGN	todo disable batch loading if lockmode > read?
DESIGN	append the sql to return the generated identifier todo suck into insert
DESIGN	todo i am not so sure about the exception handling in this bit!
DESIGN	todo is this really necessary????
DESIGN	todo move to .sql package and refactor with similar things!
DESIGN	todo implement functionality this might be painful to do here as the "join post processing" for the subquery has already been performed (meaning that for theta-join dialects the join conditions have already been moved over to the where clause). a "simple" solution here might to perform "join post processing" once for the entire query (including any subqueries) at one fell swoop
DESIGN	todo this eventually needs to be removed
DESIGN	kinda ugly but needed for collections with a "." node mapping
DESIGN	is this ok?
DESIGN	todo perhaps this should be some other runtimeexception
DESIGN	todo make this a bit nicer
DESIGN	yuck
DESIGN	todo we should provide some way to get keys of collection of statistics to make it easier to retrieve from a gui perspective
DESIGN	@return collection removal fixme even if isinverse="true"?
DESIGN	todo will need reference to session factory to fully complete hhh-1907
DESIGN	todo currently keeps getters and setters (instead of propertyaccessors) because of the way getgetter() and getsetter() are implemented currently yuck!
DESIGN	todo redesign how propertyaccessors are acquired
DESIGN	todo yuck!!!
DESIGN	todo yuck!!! fix after hhh-1907 is complete
DESIGN	todo need to make the majority of this functionality into a top-level support class for custom impl support
DESIGN	todo design new lifecycle for proxyfactory
DESIGN	todo would be nice to handle proxy classes elegantly!
DESIGN	todo copy/paste from manytoonetype
DESIGN	todo should this be session.instantiate(persister )?
DESIGN	todo this is a bit arbitrary expose a switch to the user?
DESIGN	todo implement caching?! proxies?!
DESIGN	todo is this right??
DESIGN	is this really necessary?
DESIGN	todo move these to a new joinabletype abstract class extended by entitytype and persistentcollectiontype
DESIGN	todo this is very suboptimal for some subclasses (namely components) since it does not take advantage of two-phase-load
DESIGN	worrying about proxies is perhaps a little bit of overkill here
DESIGN	note very hackish workaround!! todo fix this so it will work for non-pojo entity mode
DESIGN	todo fix this so it will work for non-pojo entity mode
DESIGN	we would probably refactor to have logicparser (builds a tree of simple expressions connected by and or not) expressionparser (translates from oo terms like foo foo.bar foo.bar.baz to sql terms like foos.id foos.bar_id etc) and pathexpressionparser (which does much the same thing it does now)
DESIGN	todo this is a little inefficient don't need to do a whole deep replaceelements() call
DESIGN	workaround for weblogic
DESIGN	todo this dependency is kinda bad
DESIGN	ick!
DESIGN	short cut check
DESIGN	todo move to stringhelper?
DESIGN	yukky! don't you have subclasses for that! todo race conditions can happen here
DESIGN	todo we probably should have a statisticsnotpublishedexception to make it clean
DESIGN	fixme hack to work around fact that calling node added = root.addchild( fqn ) doesn't properly set the version on the node
DESIGN	todo i considered validating the presence of the ts cache here but decided to defer unti getquerycacheinstance() in case the cache is never actually used
DESIGN	need to do that here rather than in the save event listener to let the post insert events to have a id-filled entity when identity is used (ejb3)
DESIGN	todo simply remove this override if we fix the above todos
DESIGN	this is used by sessionfactoryimpl to hand to the generated sessionimpl was the only reason i could see that we cannot just use null as settings.cacheprovider
DESIGN	this is done here 'cos we might only know the type here (ugly!) todo improve this a lot
DESIGN	todo would love to have this work on a notification basis where the successful binding of an entity/subclass would emit a notification which the extendsqueue entries could react to
DESIGN	todo not sure the best way to handle this. the non-performant way
DESIGN	would be better to use the element-type to determine whether the old and the new are equal here the problem being we do not necessarily have access to the element type in all cases
DESIGN	this next bit is to allow for both unsaved-value="negative" and for "older" behavior where version number did not get seeded if it was already set in the object todo shift it into unsaved-value strategy
DESIGN	merges don't cascade to uninitialized collections todo perhaps this does need to cascade after all.
DESIGN	todo an alternative is to check if the owner has changed if it hasn't then return collection.getowner()
DESIGN	it is possible that the tree-walking in outerjoinloader can get to an association defined by a subclass in which case the property-ref might refer to a property defined on a subclass of the current class in this case the table name is not known - this temporary solution assumes that the property-ref refers to a property of the subclass table that the association belongs to (a reasonable guess) todo fix this add outerjoinloadable.getsubclasspropertytablename(string propertyname)
DESIGN	this only works because collection entries are kept in a sequenced map by persistence context (maybe we should do like entities and keep a separate sequences set) todo calling entryset on an identitymap is slow!!
DESIGN	important to account for newly saved entities in query todo some kind of check for new status
DESIGN	brand new collection todo or an array!! we can't lock objects with arrays now??
DESIGN	todo if object was an uninitialized proxy this is inefficient resulting in two sql selects
DESIGN	before cascade! todo should this be session.instantiate(persister )?
DESIGN	todo absolutely no usages of this constructor form can it go away?
DESIGN	todo need to find a clean way to handle the "event source" role a seperate classs responsible for generating/dispatching events just duplicates most of the session methods passing around seperate reto interceptor factory actionqueue and persistentcontext is not manageable
DESIGN	todo remove
DESIGN	aliasrefnode.resolve( false false aliasrefnode.gettext() ) todo is it kosher to do it here? todo is it kosher to do it here?
DESIGN	no explicit select expression render the id and properties projection lists for every persister in the from clause into a single 'token node'. todo the only reason we need this stuff now is collection filters we should get rid of derived select clause completely!
DESIGN	todo an optimization here would be to consider cascade deletes and not gen those delete statements the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> the table info gotten here should really be self-contained (i.e. a class representation defining all the needed attributes) then we could then get an array of those
DESIGN	todo get sql rendering out of here create an ast for the join expressions. use the sql generator grammar to generate the sql text for the index expression.
DESIGN	todo this really needs to be delayed unitl after we definitively know all node types where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type
DESIGN	todo figure out a better way to get the from elements in a proper tree structure. if this is not the destination of a many-to-many add it as a child of the origin.
DESIGN	work around that crazy issue where the tree contains "empty" fromelements (no text) afaict this is caused by fromelementfactory.createcollectionjoin()
DESIGN	todo this class does too many things! we need a different kind of path expression parser for each of the diffferent ways in which path expressions can occur
DESIGN	real hacky used to count the nesting of parentheses
DESIGN	todo would be really nice to cache the spec on the query-def so as to not have to re-calc the hash currently not doable though because of the resultset-ref stuff
DESIGN	for arrays we should end the collection load before resolving the entities since the actual array instances are not instantiated during loading todo or we could do this polymorphically and have two different operations implemented differently for arrays
DESIGN	polymorphism not really handled completely correctly perhapswell actually its ok assuming that the entity name used in the lookup is the same as the the one used here which it will be
DESIGN	todo should "record" how many properties we have reffered to - and if we don't get'em'all we throw an exception! way better than trial and error )
DESIGN	very important!!!! - this class needs to be free of any static references to any cglib or javassist classes. otherwise users will always need both on their classpaths no matter which (if either) they use. another option here would be to remove the hibernate.ispropertyinitialized() method and have the users go through the sessionfactory to get this information.
DESIGN	todo is it really neceassry to provide configuration to collectionpersisters ? should it not be enough with associated class ? or why does entitypersister's not get access to configuration ? the only reason i could see that configuration gets passed to collection persisters is so that they can look up the dom4j node name of the entity element in case no explicit node name was applied at the collection element level. are you kidding me? trivial to fix then. just store and expose the node name on the entity persister (which the collection persister looks up anyway via other means).
DESIGN	for backward compatibility allow a set with no not-null element columns using all columns in the row locater sql todo create an implicit not null constraint on all cols?
DESIGN	spaces todo i'm not sure but perhaps we should exclude abstract denormalized tables?
DESIGN	workaround for backward compatibility of sets with no not-null columns assume all columns are used in the row locator sql
DESIGN	note that this method could easily be moved up to basicentitypersister if we ever needed to reuse it from other subclasses
DESIGN	index += getpropertycolumnspan( i ) todo this is kinda slow
DESIGN	todo need some caching scheme? really comes down to decision regarding amount of state (if any) kept on propertyaccessors
DESIGN	todo here is why we need to make bytecode provider global ( todo again fix this after hhh-1907 is complete
DESIGN	todo yuck! this is not quite good enough it's a quick hack around the problem of having a to-one association that refers to an embedded component
DESIGN	for dom4j "collections" only todo it would be better if this was done at the higher level by printer
DESIGN	would be great to move all this below here into another method that could also be used from the new scrolling stuff. would need to change the way the max-row stuff is handled (i.e. behind an interface) so that i could do the control breaking at the means to know when to stop
DESIGN	todo can we always use the "null property" approach for everything?
DESIGN	polymorphism comment above
DESIGN	some messy complex stuff here since createcriteria() can take an aliased path or a path rooted at the creating criteria instance
DESIGN	todo really bad evil hack to fix!!!
DESIGN	ugly hack for cases like "elements(foo.bar.collection)" (multi-part path expression ending in elements or indices)
DESIGN	try block is a hack around fact that currently tuplizers are not given the opportunity to resolve a subclass entity name. this allows the (we assume custom) interceptor the ability to influence this decision if we were not able to based on the given entityname
DESIGN	/ hack alert !!!!!!!!!!!!!!!!!!!!!!!!!!!! attempt to work around "ghost" impliedfromelements that occasionally show up between the actual things being joined. this consistently occurs from index nodes (at least against many-to-many). not sure if there are other conditions essentially look-ahead to the next fromelement that actually writes something to the sql
DESIGN	init the table here instead of earlier so that we can get a quoted table name todo would it be better to simply pass the qualified table name instead of splitting it up into schema/catalog/table names
DESIGN	todo would be great to have a mapping#hasnonidentifierpropertynamedid method i don't believe that mapping#getreferencedpropertytype accounts for the identifier property so if it returns for a property named 'id' then we should have a non-id field named id
DESIGN	todo is this really necessary????
DESIGN	todo ideally we need the construction of propertyaccessor to take the following 1) entitymode 2) entitymode-specific data (i.e. the classname for pojo entities) 3) property-specific data based on the entitymode (i.e. property-name or dom4j-node-name) the easiest way with the introduction of the new runtime-metamodel classes would be the the following predicates 1) propertyaccessorfactory.getpropertyaccessor() takes references to both a org.hibernate.metadata.entitymodemetadata and org.hibernate.metadata.property 2) what is now termed a "propertyaccessor" stores any values needed from those two pieces of information 3) code can then simply call propertyaccess.getgetter() with no parameters likewise with propertyaccessor.getsetter()
DESIGN	todo this is temporary in that the end result will probably not take a property reference per-se.
DESIGN	todo this eventually needs to be removed
DESIGN	todo make this a bit nicer
DESIGN	todo we can remove this once the deprecated ctor can be made private
DESIGN	todo we can remove this once the deprecated ctor can be made private
DESIGN	todo we can remove this once the deprecated ctor can be made private
DESIGN	todo we can remove this once the deprecated ctor can be made private
DESIGN	todo we can remove this once the deprecated ctor can be made private
DESIGN	todo we can remove this once the deprecated ctor can be made private
DESIGN	todo we can remove this once the deprecated ctor can be made private
DESIGN	todo we can remove this once the deprecated ctor can be made private
DESIGN	fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties
DESIGN	fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties
DESIGN	fixme per the regionfactory class javadoc this constructor version should not be necessary. @param props the configuration properties
DESIGN	todo probably better to calculate these and pass them in as it'll be more performant
WITHOUT_CLASSIFICATION	set constants now that they're initialized
WITHOUT_CLASSIFICATION	line 335
WITHOUT_CLASSIFICATION	yylen 542
WITHOUT_CLASSIFICATION	yylen 542
WITHOUT_CLASSIFICATION	yydefred 945
WITHOUT_CLASSIFICATION	yydefred 945
WITHOUT_CLASSIFICATION	yydgoto 152
WITHOUT_CLASSIFICATION	figure end-char. '\0' is special to indicate begin=end and that no nesting?
WITHOUT_CLASSIFICATION	line 362
WITHOUT_CLASSIFICATION	line 372
WITHOUT_CLASSIFICATION	yysindex 945
WITHOUT_CLASSIFICATION	yysindex 945
WITHOUT_CLASSIFICATION	line 391
WITHOUT_CLASSIFICATION	yyrindex 945
WITHOUT_CLASSIFICATION	yyrindex 945
WITHOUT_CLASSIFICATION	^d
WITHOUT_CLASSIFICATION	^z
WITHOUT_CLASSIFICATION	yylen 496
WITHOUT_CLASSIFICATION	yylen 496
WITHOUT_CLASSIFICATION	yylen 496
WITHOUT_CLASSIFICATION	yylen 496
WITHOUT_CLASSIFICATION	yylen 496
WITHOUT_CLASSIFICATION	yylen 496
WITHOUT_CLASSIFICATION	yylen 496
WITHOUT_CLASSIFICATION	yydefred 889
WITHOUT_CLASSIFICATION	yydefred 889
WITHOUT_CLASSIFICATION	yydefred 889
WITHOUT_CLASSIFICATION	yydefred 889
WITHOUT_CLASSIFICATION	yydefred 889
WITHOUT_CLASSIFICATION	yydefred 889
WITHOUT_CLASSIFICATION	yydefred 889
WITHOUT_CLASSIFICATION	yydgoto 136
WITHOUT_CLASSIFICATION	yydgoto 136
WITHOUT_CLASSIFICATION	yydgoto 136
WITHOUT_CLASSIFICATION	yydgoto 136
WITHOUT_CLASSIFICATION	yydgoto 136
WITHOUT_CLASSIFICATION	yydgoto 136
WITHOUT_CLASSIFICATION	yysindex 889
WITHOUT_CLASSIFICATION	yysindex 889
WITHOUT_CLASSIFICATION	yysindex 889
WITHOUT_CLASSIFICATION	yysindex 889
WITHOUT_CLASSIFICATION	yysindex 889
WITHOUT_CLASSIFICATION	yysindex 889
WITHOUT_CLASSIFICATION	yyrindex 889
WITHOUT_CLASSIFICATION	yyrindex 889
WITHOUT_CLASSIFICATION	yyrindex 889
WITHOUT_CLASSIFICATION	yyrindex 889
WITHOUT_CLASSIFICATION	yyrindex 889
WITHOUT_CLASSIFICATION	yyrindex 889
WITHOUT_CLASSIFICATION	yyrindex 889
WITHOUT_CLASSIFICATION	yygindex 136
WITHOUT_CLASSIFICATION	yygindex 136
WITHOUT_CLASSIFICATION	yygindex 136
WITHOUT_CLASSIFICATION	yygindex 136
WITHOUT_CLASSIFICATION	do nothing
WITHOUT_CLASSIFICATION	do nothing
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	return result
WITHOUT_CLASSIFICATION	name
WITHOUT_CLASSIFICATION	define system.getproperties() in env_java
WITHOUT_CLASSIFICATION	accessor methods.
WITHOUT_CLASSIFICATION	mri behavior
WITHOUT_CLASSIFICATION	mri behavior
WITHOUT_CLASSIFICATION	mri behavior
WITHOUT_CLASSIFICATION	mri behavior
WITHOUT_CLASSIFICATION	call getpwent to fail early if unsupported
WITHOUT_CLASSIFICATION	fall back on env entry for user
WITHOUT_CLASSIFICATION	try to read grent to fail fast
WITHOUT_CLASSIFICATION	define argv and $ for this runtime
WITHOUT_CLASSIFICATION	version information
WITHOUT_CLASSIFICATION	after defn of $stderr as the call may produce warnings
WITHOUT_CLASSIFICATION	argf $< object
WITHOUT_CLASSIFICATION	if the environment variables can't be obtained define an empty env
WITHOUT_CLASSIFICATION	on platforms without a c-library accessable through jna getpid will return hashcode as $$ used to. using $$ to kill processes could take down many runtimes but by basing $$ on getpid() where available we have the same semantics as mri.
WITHOUT_CLASSIFICATION	$@ returns nil if $!.backtrace is not an array
WITHOUT_CLASSIFICATION	include its parent (and in turn that module's parents)
WITHOUT_CLASSIFICATION	mri behavior just plain '' or '\\\\' are considered illegal on windows.
WITHOUT_CLASSIFICATION	this _is_ legal (when removing an undef)
WITHOUT_CLASSIFICATION	what we passed to the constructor for method 'path'
WITHOUT_CLASSIFICATION	----- ruby class methods ----------------------------------------------------
WITHOUT_CLASSIFICATION	constant table methods - pass to delegate
WITHOUT_CLASSIFICATION	we get canonical path to try and flatten the path out. a dir '/subdir/..' should return as '/' cnutter do we want to flatten path out?
WITHOUT_CLASSIFICATION	mri behavior
WITHOUT_CLASSIFICATION	----- ruby instance methods -------------------------------------------------
WITHOUT_CLASSIFICATION	make sure any read()s after close fail.
WITHOUT_CLASSIFICATION	----- helper methods --------------------------------------------------------
WITHOUT_CLASSIFICATION	try to use posix for this first
WITHOUT_CLASSIFICATION	otherwise fall back on the old way
WITHOUT_CLASSIFICATION	proc class
WITHOUT_CLASSIFICATION	no passed in block lets check next outer frame for one ('proc.new')
WITHOUT_CLASSIFICATION	modify the block with a new backref/lastline-grabbing scope
WITHOUT_CLASSIFICATION	for future compatibility as constructors move toward not accepting metaclass?
WITHOUT_CLASSIFICATION	case ruby_hybrid backtrace = threadcontext.createrubyhybridbacktrace(getruntime() backtraceframes javastacktrace getruntime().getdebug().istrue()) break
WITHOUT_CLASSIFICATION	this looks wrong but it's the way mri does it.
WITHOUT_CLASSIFICATION	rb_exc_new3
WITHOUT_CLASSIFICATION	note the indicies here match exactly the signal values do not reorder
WITHOUT_CLASSIFICATION	registerthreaddumpsignalhandler(runtime)
WITHOUT_CLASSIFICATION	iot is also 6
WITHOUT_CLASSIFICATION	cld is also 20
WITHOUT_CLASSIFICATION	rubysignal
WITHOUT_CLASSIFICATION	zstream actually isn't allocatable
WITHOUT_CLASSIFICATION	mri behavior enforced by tests
WITHOUT_CLASSIFICATION	it's safe since adler.update doesn't modify the array
WITHOUT_CLASSIFICATION	mri behavior in finished mode we work as pass-through
WITHOUT_CLASSIFICATION	sync_flush
WITHOUT_CLASSIFICATION	by default no_flush
WITHOUT_CLASSIFICATION	io.finish()
WITHOUT_CLASSIFICATION	should invoke seek on realio
WITHOUT_CLASSIFICATION	hmm
WITHOUT_CLASSIFICATION	called before any write to make sure the header is always written before the first bytes
WITHOUT_CLASSIFICATION	for jdk 1.4 we can use "cal.gettimeinmillis()"
WITHOUT_CLASSIFICATION	we can just use dt since it is immutable
WITHOUT_CLASSIFICATION	float number of seconds
WITHOUT_CLASSIFICATION	modified to match how hash is calculated in 1.8.2
WITHOUT_CLASSIFICATION	dump usec not msec
WITHOUT_CLASSIFICATION	time class methods
WITHOUT_CLASSIFICATION	marsaling dumps usec not msec
WITHOUT_CLASSIFICATION	mri accepts additional wday argument which appears to be ignored.
WITHOUT_CLASSIFICATION	set up with min values and then add to allow rolling over
WITHOUT_CLASSIFICATION	the instant at which we will ask dtz what the difference between dst and standard time is
WITHOUT_CLASSIFICATION	if we might be moving this time from !dst -> dst the offset is assumed to be the same as it was just before we last moved from dst -> !dst
WITHOUT_CLASSIFICATION	ignores usec if 8 args (for compatibility with parsedate) or if not supplied.
WITHOUT_CLASSIFICATION	================ utility methods ================
WITHOUT_CLASSIFICATION	if the value will fit in a fixnum return one of those.
WITHOUT_CLASSIFICATION	================ instance methods ================
WITHOUT_CLASSIFICATION	mri issuses warning here on (rbignum(x)->len sizeof_bdigits yy > 10241024)
WITHOUT_CLASSIFICATION	num2int is also implemented
WITHOUT_CLASSIFICATION	num2int is also implemented
WITHOUT_CLASSIFICATION	no bignorm here needed
WITHOUT_CLASSIFICATION	wow the only time we can use the java protocol )
WITHOUT_CLASSIFICATION	pad with a 0
WITHOUT_CLASSIFICATION	biginteger required a sign byte in incoming array
WITHOUT_CLASSIFICATION	this should only be called by this and rubyfile. it allows this object to be created without a iohandler.
WITHOUT_CLASSIFICATION	we do this b/c make_tmpname might be overridden
WITHOUT_CLASSIFICATION	???
WITHOUT_CLASSIFICATION	pid
WITHOUT_CLASSIFICATION	================ instance methods ================
WITHOUT_CLASSIFICATION	elements and trailing nils
WITHOUT_CLASSIFICATION	dirtmpdir
WITHOUT_CLASSIFICATION	volatile to ensure that initial nil-fill is visible to other threads
WITHOUT_CLASSIFICATION	ruby arrays default to holding 16 elements so we create an arraylist of the same size if we're not told otherwise
WITHOUT_CLASSIFICATION	rb_ary_new2 just allocates the internal array
WITHOUT_CLASSIFICATION	plain internal array assignment
WITHOUT_CLASSIFICATION	plain internal array assignment
WITHOUT_CLASSIFICATION	plain internal array assignment
WITHOUT_CLASSIFICATION	array constructors taking the metaclass to fulfil mri array subclass behaviour
WITHOUT_CLASSIFICATION	newobj and objsetup equivalent fastest one for shared arrays optional objectspace
WITHOUT_CLASSIFICATION	create global constants and variables
WITHOUT_CLASSIFICATION	not reached
WITHOUT_CLASSIFICATION	not reached
WITHOUT_CLASSIFICATION	windows does not support these functions so we won't even try this also matches ruby behavior for jruby-2353.
WITHOUT_CLASSIFICATION	there are two different popular tz formats legacy (ast+30000 gmt-3) and newer one (us/pacific america/los_angeles). this pattern is to detect the legacy tz format in order to convert it to the newer format understood by java api.
WITHOUT_CLASSIFICATION	not reached
WITHOUT_CLASSIFICATION	1.9 seems to just do inspect for to_s now
WITHOUT_CLASSIFICATION	possibly should not in object space
WITHOUT_CLASSIFICATION	only fill if there actually will remain trailing storage
WITHOUT_CLASSIFICATION	rb_ary_new4
WITHOUT_CLASSIFICATION	rb_ary_new4
WITHOUT_CLASSIFICATION	from dup_setup
WITHOUT_CLASSIFICATION	if already inspecting there is no need to register/unregister again.
WITHOUT_CLASSIFICATION	see [ruby-core17483]
WITHOUT_CLASSIFICATION	see [ruby-core17483]
WITHOUT_CLASSIFICATION	satisfy java.util.list interface (for java integration)
WITHOUT_CLASSIFICATION	pre-set for the sake of terminating recursive calls
WITHOUT_CLASSIFICATION	root fiber
WITHOUT_CLASSIFICATION	gmt+0000 --> etc/gmt see "mri behavior" comment below.
WITHOUT_CLASSIFICATION	see httpwww.gzip.org/zlib/rfc-gzip.html
WITHOUT_CLASSIFICATION	extras flag
WITHOUT_CLASSIFICATION	zlibno_flush
WITHOUT_CLASSIFICATION	nothing
WITHOUT_CLASSIFICATION	utility method
WITHOUT_CLASSIFICATION	prepare loadservice and load path
WITHOUT_CLASSIFICATION	================ instance methods ================
WITHOUT_CLASSIFICATION	flags 4 bytes of modified time
WITHOUT_CLASSIFICATION	range_each_func(range step_i b e args)
WITHOUT_CLASSIFICATION	1.8 "include?"
WITHOUT_CLASSIFICATION	any biginteger is bigger than fixnum and we don't have fixable
WITHOUT_CLASSIFICATION	beneath are rewritten coercions that reflect mri logic the aboves are used only by rubybigdecimal
WITHOUT_CLASSIFICATION	mri does it!
WITHOUT_CLASSIFICATION	won't hurt fixnums
WITHOUT_CLASSIFICATION	it won't hurt fixnums
WITHOUT_CLASSIFICATION	rubyclasspathvariable
WITHOUT_CLASSIFICATION	not to be confused with rubyobject's flags
WITHOUT_CLASSIFICATION	second argument is allowed but ignored (mri)
WITHOUT_CLASSIFICATION	we are presumably running a precompiled class load directly
WITHOUT_CLASSIFICATION	terminate trycompile will have printed out an error and we're done
WITHOUT_CLASSIFICATION	used for the 'redo' command
WITHOUT_CLASSIFICATION	do nothing this iteration restarts
WITHOUT_CLASSIFICATION	recheck condition
WITHOUT_CLASSIFICATION	get the main threadcontext (gets constructed for us)
WITHOUT_CLASSIFICATION	construct key services
WITHOUT_CLASSIFICATION	initialize the root of the class hierarchy completely
WITHOUT_CLASSIFICATION	construct the top-level execution frame and scope for the main thread
WITHOUT_CLASSIFICATION	initialize all the core classes
WITHOUT_CLASSIFICATION	initialize the "dummy" class used as a marker
WITHOUT_CLASSIFICATION	initialize kernel and include into object
WITHOUT_CLASSIFICATION	object is ready create top self
WITHOUT_CLASSIFICATION	pre-create all the core classes potentially referenced during startup
WITHOUT_CLASSIFICATION	math depends on all numeric types
WITHOUT_CLASSIFICATION	depends on io filetest
WITHOUT_CLASSIFICATION	initialize builtin libraries
WITHOUT_CLASSIFICATION	require in all libraries specified on command line
WITHOUT_CLASSIFICATION	bootstrap the top of the hierarchy
WITHOUT_CLASSIFICATION	we try to get the classloader that loaded jruby falling back on system
WITHOUT_CLASSIFICATION	determine spacing
WITHOUT_CLASSIFICATION	should alter global state
WITHOUT_CLASSIFICATION	for jsr 223 support see httpscripting.java.net/
WITHOUT_CLASSIFICATION	use this for jruby-internal finalizers
WITHOUT_CLASSIFICATION	this method is for finalizers registered via objectspace
WITHOUT_CLASSIFICATION	new factory methods ------------------------------------------------------------------------
WITHOUT_CLASSIFICATION	assert internedname == internedname.intern() internedname + " is not interned"
WITHOUT_CLASSIFICATION	equivalent of data_wrap_struct
WITHOUT_CLASSIFICATION	default don't retain
WITHOUT_CLASSIFICATION	channeldescriptors opened by sysopen are cached to avoid collection
WITHOUT_CLASSIFICATION	default objects
WITHOUT_CLASSIFICATION	record separator var to speed up io ops that use it
WITHOUT_CLASSIFICATION	former java.lang.system concepts now internalized for mvm
WITHOUT_CLASSIFICATION	java support
WITHOUT_CLASSIFICATION	parser stats
WITHOUT_CLASSIFICATION	compilation
WITHOUT_CLASSIFICATION	can't read non-standard properties
WITHOUT_CLASSIFICATION	can't create custom classloaders
WITHOUT_CLASSIFICATION	mutex that controls modifications of user-defined finalizers
WITHOUT_CLASSIFICATION	mutex that controls modifications of internal finalizers
WITHOUT_CLASSIFICATION	a thread pool to use for executing this runtime's ruby threads
WITHOUT_CLASSIFICATION	a global object lock for class hierarchy mutations
WITHOUT_CLASSIFICATION	initial spaces spaces before "at"
WITHOUT_CLASSIFICATION	event name filename line numbers should be 1-based
WITHOUT_CLASSIFICATION	the method is intentionally not public since it typically should not be used outside of the core.
WITHOUT_CLASSIFICATION	note this field and the following static initializer must be located be in this order!
WITHOUT_CLASSIFICATION	contains a list of all blocks (as procs) that should be called when the runtime environment exits.
WITHOUT_CLASSIFICATION	quoted-printable
WITHOUT_CLASSIFICATION	default options
WITHOUT_CLASSIFICATION	iso-2022-jp
WITHOUT_CLASSIFICATION	iso-2022-jp
WITHOUT_CLASSIFICATION	shift_jis
WITHOUT_CLASSIFICATION	shift_jis
WITHOUT_CLASSIFICATION	euc-jp
WITHOUT_CLASSIFICATION	euc-jp
WITHOUT_CLASSIFICATION	utf-8
WITHOUT_CLASSIFICATION	utf-8
WITHOUT_CLASSIFICATION	long name option
WITHOUT_CLASSIFICATION	conversion
WITHOUT_CLASSIFICATION	================ singleton methods ================
WITHOUT_CLASSIFICATION	string doesn't share any resources
WITHOUT_CLASSIFICATION	string has it's own bytelist but it's pointing to a shared buffer (byte[])
WITHOUT_CLASSIFICATION	string doesn't have it's own bytelist (values)
WITHOUT_CLASSIFICATION	enc_coderange_asciionly
WITHOUT_CLASSIFICATION	rb_enc_str_asciionly_p
WITHOUT_CLASSIFICATION	rb_enc_str_coderange
WITHOUT_CLASSIFICATION	rb_str_hash_cmp
WITHOUT_CLASSIFICATION	deprecated string construction routines
WITHOUT_CLASSIFICATION	string construction routines by not byte[] buffer and not making the target string shared
WITHOUT_CLASSIFICATION	rb_str_subseq
WITHOUT_CLASSIFICATION	no need to assign encoding same bytelist shared
WITHOUT_CLASSIFICATION	if len == 0 then shared empty
WITHOUT_CLASSIFICATION	rb_str_cmp_m
WITHOUT_CLASSIFICATION	we limit to int because bytebuffer can only allocate int sizes
WITHOUT_CLASSIFICATION	rb_str_buf_append
WITHOUT_CLASSIFICATION	encoding doesn't have to be copied.
WITHOUT_CLASSIFICATION	this really needs to be inlined here
WITHOUT_CLASSIFICATION	must not reallocate
WITHOUT_CLASSIFICATION	illegal combination
WITHOUT_CLASSIFICATION	use 1.8 impl
WITHOUT_CLASSIFICATION	rubystring aka rb_string_value
WITHOUT_CLASSIFICATION	bang true no match no substitution
WITHOUT_CLASSIFICATION	out of byte range there will be no match for sure
WITHOUT_CLASSIFICATION	len + margin
WITHOUT_CLASSIFICATION	block given
WITHOUT_CLASSIFICATION	block given
WITHOUT_CLASSIFICATION	copy pre-match substr
WITHOUT_CLASSIFICATION	string given
WITHOUT_CLASSIFICATION	hash given
WITHOUT_CLASSIFICATION	this represents left most digit in a set of incremented values? therefore leftmost numeric must be '1' and not '0' 999 -> 1000 not 999 -> 0000. whereas chars should be zzz -> aaaa and non-alnum byte values should be "\377" -> "\001\000"
WITHOUT_CLASSIFICATION	substring longer than string
WITHOUT_CLASSIFICATION	rb_str_substr
WITHOUT_CLASSIFICATION	nothing
WITHOUT_CLASSIFICATION	nothing
WITHOUT_CLASSIFICATION	rb_str_splice
WITHOUT_CLASSIFICATION	todo keep cr todo rb_str_splice_0
WITHOUT_CLASSIFICATION	keep cr ?
WITHOUT_CLASSIFICATION	keep cr ?
WITHOUT_CLASSIFICATION	wrapped to \0\0. search next valid char.
WITHOUT_CLASSIFICATION	only this case affects backrefs
WITHOUT_CLASSIFICATION	only this case affects backrefs
WITHOUT_CLASSIFICATION	modified
WITHOUT_CLASSIFICATION	modified
WITHOUT_CLASSIFICATION	1.8
WITHOUT_CLASSIFICATION	1.8
WITHOUT_CLASSIFICATION	qtrue
WITHOUT_CLASSIFICATION	retrieve last replacer
WITHOUT_CLASSIFICATION	check the length every iteration since the block can modify this string.
WITHOUT_CLASSIFICATION	long size bits in byte
WITHOUT_CLASSIFICATION	from encoding special-casing ascii to ascii
WITHOUT_CLASSIFICATION	to encoding same special-casing
WITHOUT_CLASSIFICATION	create a lightweight thunk
WITHOUT_CLASSIFICATION	decode from "from" and encode to "to"
WITHOUT_CLASSIFICATION	create a lightweight thunk
WITHOUT_CLASSIFICATION	kernel is the only module that doesn't need an implementor
WITHOUT_CLASSIFICATION	no binding given use (eval)
WITHOUT_CLASSIFICATION	interned ok for "fast" methods
WITHOUT_CLASSIFICATION	file to be loaded by autoload has already been or is being loaded.
WITHOUT_CLASSIFICATION	rb_cstr_to_dbl case
WITHOUT_CLASSIFICATION	we break if we know this sleep was explicitly woken up/interrupted
WITHOUT_CLASSIFICATION	exec process create io with process
WITHOUT_CLASSIFICATION	zero sleeps forever
WITHOUT_CLASSIFICATION	file given use it and force it into binding
WITHOUT_CLASSIFICATION	explicit zero in mri returns immediately
WITHOUT_CLASSIFICATION	spurious wakeup-loop
WITHOUT_CLASSIFICATION	adjusts paths started with '/' or '\\' on windows.
WITHOUT_CLASSIFICATION	file not given
WITHOUT_CLASSIFICATION	string to eval
WITHOUT_CLASSIFICATION	binding given use binding's file
WITHOUT_CLASSIFICATION	?g | boolean | true if file1 has the \cf{setgid} bit
WITHOUT_CLASSIFICATION	bomb out it's not a binding or a proc
WITHOUT_CLASSIFICATION	ordering of array traversal not important just intuitive
WITHOUT_CLASSIFICATION	catch active throw for catch to handle
WITHOUT_CLASSIFICATION	no catch active for this throw
WITHOUT_CLASSIFICATION	without full tracing many events will not fire
WITHOUT_CLASSIFICATION	ignore if it's not a global var
WITHOUT_CLASSIFICATION	mri behavior use first byte of string value if len > 0
WITHOUT_CLASSIFICATION	mri behavior now check arg count
WITHOUT_CLASSIFICATION	?a | time | last access time for file1
WITHOUT_CLASSIFICATION	?b | boolean | true if file1 is a block device
WITHOUT_CLASSIFICATION	?c | boolean | true if file1 is a character device
WITHOUT_CLASSIFICATION	?c | time | last change time for file1
WITHOUT_CLASSIFICATION	?d | boolean | true if file1 exists and is a directory
WITHOUT_CLASSIFICATION	?e | boolean | true if file1 exists
WITHOUT_CLASSIFICATION	?f | boolean | true if file1 exists and is a regular file
WITHOUT_CLASSIFICATION	?g | boolean | true if file1 exists and has a group ownership equal to the caller's group
WITHOUT_CLASSIFICATION	?k | boolean | true if file1 exists and has the sticky bit set
WITHOUT_CLASSIFICATION	?m | time | last modification time for file1
WITHOUT_CLASSIFICATION	?o | boolean | true if file1 exists and is owned by the caller's effective uid
WITHOUT_CLASSIFICATION	?o | boolean | true if file1 exists and is owned by the caller's real uid
WITHOUT_CLASSIFICATION	?p | boolean | true if file1 exists and is a fifo
WITHOUT_CLASSIFICATION	?r | boolean | true if file1 is readable by the effective uid/gid of the caller
WITHOUT_CLASSIFICATION	?s | int/nil | if file1 has nonzero size return the size otherwise nil
WITHOUT_CLASSIFICATION	?s | boolean | true if file1 exists and is a socket
WITHOUT_CLASSIFICATION	?u | boolean | true if file1 has the setuid bit set
WITHOUT_CLASSIFICATION	?x | boolean | true if file1 exists and is executable by the effective uid/gid
WITHOUT_CLASSIFICATION	?x | boolean | true if file1 exists and is executable by the real uid/gid
WITHOUT_CLASSIFICATION	?z | boolean | true if file1 exists and has a zero length
WITHOUT_CLASSIFICATION	?= | boolean | true if the modification times of file1 and file2 are equal
WITHOUT_CLASSIFICATION	?< | boolean | true if the modification time of file1 is prior to that of file2
WITHOUT_CLASSIFICATION	?> | boolean | true if the modification time of file1 is after that of file2
WITHOUT_CLASSIFICATION	?- | boolean | true if file1 and file2 are identical
WITHOUT_CLASSIFICATION	@jrubymethod(name = "new" meta = true visibility = visibility.private)
WITHOUT_CLASSIFICATION	error info is per-thread
WITHOUT_CLASSIFICATION	init errorinfo to nil
WITHOUT_CLASSIFICATION	if we're already aborting we can receive no further mail
WITHOUT_CLASSIFICATION	if this thread is sleeping or stopped wake it
WITHOUT_CLASSIFICATION	new interrupt to hopefully wake it out of any blocking io
WITHOUT_CLASSIFICATION	set to default thread group
WITHOUT_CLASSIFICATION	set to default thread group
WITHOUT_CLASSIFICATION	jruby-2380 associate future early so it shows up in thread.list right away in case it doesn't run immediately
WITHOUT_CLASSIFICATION	jruby-2380 associate thread early so it shows up in thread.list right away in case it doesn't run immediately
WITHOUT_CLASSIFICATION	for threadstart which does not call the subclass's initialize
WITHOUT_CLASSIFICATION	jruby-3568 inherit threadgroup or use default
WITHOUT_CLASSIFICATION	mri behavior value given in seconds converted to float less than or equal to zero returns immediately returns nil
WITHOUT_CLASSIFICATION	if the target thread is sleeping or stopped wake it
WITHOUT_CLASSIFICATION	we need this loop in order to be able to "unblock" the join call without actually calling interrupt.
WITHOUT_CLASSIFICATION	attempt to decriticalize all if we're the critical thread
WITHOUT_CLASSIFICATION	not valid for "dead" state
WITHOUT_CLASSIFICATION	if the killee thread is the same as the killer thread just die
WITHOUT_CLASSIFICATION	check for thread events in case we've been woken up to die
WITHOUT_CLASSIFICATION	check for thread events in case we've been woken up to die
WITHOUT_CLASSIFICATION	ignore i don't like doing it but it seems like we really just need to make all channels non-blocking by default and use select when implementing blocking ops so if this remains set non-blocking perhaps it's not such a big deal
WITHOUT_CLASSIFICATION	can't select just have to do a blocking call
WITHOUT_CLASSIFICATION	compensate for missing slash after drive letter on windows
WITHOUT_CLASSIFICATION	create constants class
WITHOUT_CLASSIFICATION	create constants for open flags
WITHOUT_CLASSIFICATION	strip off the o_ prefix so they become filerdonly and so on
WITHOUT_CLASSIFICATION	create constants for flock
WITHOUT_CLASSIFICATION	fileconstants module is included in io.
WITHOUT_CLASSIFICATION	make sure any existing lock is released before we try and close the file
WITHOUT_CLASSIFICATION	null channel always succeeds for all locking operations
WITHOUT_CLASSIFICATION	paths which end in "/" or "\\" must be stripped off.
WITHOUT_CLASSIFICATION	special case for handling accmode since constantine will generate an invalid value if it is not defined by the platform.
WITHOUT_CLASSIFICATION	return false here
WITHOUT_CLASSIFICATION	return false here
WITHOUT_CLASSIFICATION	we're not actually a real file so we can't flock
WITHOUT_CLASSIFICATION	should we do anything?
WITHOUT_CLASSIFICATION	file class methods
WITHOUT_CLASSIFICATION	mri-compatible basename handling for windows drive letter paths
WITHOUT_CLASSIFICATION	strip c away from relative-pathed name
WITHOUT_CLASSIFICATION	c\ is returned unchanged
WITHOUT_CLASSIFICATION	-1 no match 0 it is dot file not extension
WITHOUT_CLASSIFICATION	trim trailing slashes
WITHOUT_CLASSIFICATION	dot is not at beginning and not at end of filename.
WITHOUT_CLASSIFICATION	handle ~user paths
WITHOUT_CLASSIFICATION	compensate for missing slash after drive letter on windows
WITHOUT_CLASSIFICATION	include additional path separator (so that dirname of "c\file.txt" is "c\" not "c")
WITHOUT_CLASSIFICATION	fnfexception can be thrown in both cases when the file is not found or when permission is denied.
WITHOUT_CLASSIFICATION	no directory delimeter. rest of string is username
WITHOUT_CLASSIFICATION	if there's a second argument it's the path to which the first argument is relative.
WITHOUT_CLASSIFICATION	handle ~user paths.
WITHOUT_CLASSIFICATION	if there's no second argument simply use the working directory of the runtime.
WITHOUT_CLASSIFICATION	find out which string to check.
WITHOUT_CLASSIFICATION	single '~' as whole path to expand
WITHOUT_CLASSIFICATION	count number of extra slashes in the beginning of the string.
WITHOUT_CLASSIFICATION	'~user/' as path to expand
WITHOUT_CLASSIFICATION	'~/' as path to expand
WITHOUT_CLASSIFICATION	prepare a string with the same number of redundant slashes so that we easily can prepend it to the result.
WITHOUT_CLASSIFICATION	if there are n slashes then we want n-1.
WITHOUT_CLASSIFICATION	no canonical path yet or length is zero and we have a / followed by a dot
WITHOUT_CLASSIFICATION	we don't have another slash after this so replace /. with /
WITHOUT_CLASSIFICATION	we do have another slash omit both / and . (jruby-1606)
WITHOUT_CLASSIFICATION	do nothing we should not delete the drive letter
WITHOUT_CLASSIFICATION	rb check_modifiable
WITHOUT_CLASSIFICATION	rb readable
WITHOUT_CLASSIFICATION	rename is successful
WITHOUT_CLASSIFICATION	rename via java api call wasn't successful let's try some tricks similar to mri
WITHOUT_CLASSIFICATION	try to rename one more time
WITHOUT_CLASSIFICATION	can we produce ioerror which bypasses a close?
WITHOUT_CLASSIFICATION	fast path since jna stat is about 10x slower than this
WITHOUT_CLASSIFICATION	rubycontinuation
WITHOUT_CLASSIFICATION	constructor for internal usage (mainly for array#| array#& array#- and array#uniq) it doesn't initialize ifnone field
WITHOUT_CLASSIFICATION	16 ?
WITHOUT_CLASSIFICATION	generation count for o(1) clears
WITHOUT_CLASSIFICATION	size + 1
WITHOUT_CLASSIFICATION	suboptimal for large hashes (> 1073741824 + 85 entries) not very likely to happen
WITHOUT_CLASSIFICATION	------------------------------
WITHOUT_CLASSIFICATION	------------------------------
WITHOUT_CLASSIFICATION	put implementation
WITHOUT_CLASSIFICATION	get implementation
WITHOUT_CLASSIFICATION	specialized for value
WITHOUT_CLASSIFICATION	delete implementation
WITHOUT_CLASSIFICATION	n.b. we need to recompute the hash in case the key object was modified
WITHOUT_CLASSIFICATION	============================ end of hash internals ============================
WITHOUT_CLASSIFICATION	================ instance methods ================
WITHOUT_CLASSIFICATION	update the hash value
WITHOUT_CLASSIFICATION	other hash does not contain key
WITHOUT_CLASSIFICATION	rb_yield_values(2) equivalent
WITHOUT_CLASSIFICATION	satisfy java.util.set interface (for java integration)
WITHOUT_CLASSIFICATION	remain where we are
WITHOUT_CLASSIFICATION	we use file test since it is faster than a stat also euid == uid in java always
WITHOUT_CLASSIFICATION	default don't retain
WITHOUT_CLASSIFICATION	once hasnext has been called we commit to next() returning the entry it found even if it were subsequently deleted
WITHOUT_CLASSIFICATION	not exposed by filetest but so similiar in nature that it is stored here
WITHOUT_CLASSIFICATION	we do both writable and writable_real through the same method because in our java process effective and real userid will always be the same.
WITHOUT_CLASSIFICATION	first try as directory
WITHOUT_CLASSIFICATION	next as regular file
WITHOUT_CLASSIFICATION	we only want io objects with valid streams (better to error now).
WITHOUT_CLASSIFICATION	nio-based
WITHOUT_CLASSIFICATION	nio-based
WITHOUT_CLASSIFICATION	stream-based
WITHOUT_CLASSIFICATION	special constructor that accepts stream not channel
WITHOUT_CLASSIFICATION	we use file versus io to match t_file in mri.
WITHOUT_CLASSIFICATION	constants for seek
WITHOUT_CLASSIFICATION	confirm we're not reopening self's channel
WITHOUT_CLASSIFICATION	check if we're a stdio io and ensure we're not badly mutilated
WITHOUT_CLASSIFICATION	dup2 new fd into self to preserve fileno and references to it
WITHOUT_CLASSIFICATION	re-register since fileno points at something new now
WITHOUT_CLASSIFICATION	re-register the descriptor
WITHOUT_CLASSIFICATION	since we're not actually duping the incoming channel into our handler we need to copy the original sync behavior from the other handler
WITHOUT_CLASSIFICATION	re-register
WITHOUT_CLASSIFICATION	a potentially previously close io is being 'reopened'.
WITHOUT_CLASSIFICATION	ensure that separator is valid otherwise give it the default paragraph separator.
WITHOUT_CLASSIFICATION	loop until we see the nth separator char
WITHOUT_CLASSIFICATION	if we hit eof or reached limit then we're done
WITHOUT_CLASSIFICATION	this is for a range check near as i can tell
WITHOUT_CLASSIFICATION	io class methods.
WITHOUT_CLASSIFICATION	use original modes
WITHOUT_CLASSIFICATION	see if we already have this descriptor open. if so then we can mostly share the handler (keep open file but possibly change the mode).
WITHOUT_CLASSIFICATION	redundant done above as well
WITHOUT_CLASSIFICATION	mri behavior swallow standarderorrs
WITHOUT_CLASSIFICATION	-1 == don't set permissions
WITHOUT_CLASSIFICATION	isretained=true
WITHOUT_CLASSIFICATION	this appears to be some windows-only mode. on a java platform this is a no-op
WITHOUT_CLASSIFICATION	if not sync we switch to write buffered mode
WITHOUT_CLASSIFICATION	throw bad file descriptor is we can not read on supplied descriptor.
WITHOUT_CLASSIFICATION	everything written
WITHOUT_CLASSIFICATION	return len - n
WITHOUT_CLASSIFICATION	claims conversion is done via 'to_s' in docs.
WITHOUT_CLASSIFICATION	of course this isn't particularly useful.
WITHOUT_CLASSIFICATION	must be back on first line on rewind.
WITHOUT_CLASSIFICATION	register the new descriptor
WITHOUT_CLASSIFICATION	cleanup raising errors if any
WITHOUT_CLASSIFICATION	hmmmm
WITHOUT_CLASSIFICATION	i believe ruby bails out with a "bug" if closing fails
WITHOUT_CLASSIFICATION	do nothing. fd_cloexec has no meaning in jvm since we cannot really exec. and why the hell does webrick pass this in as a first argument!!!!!
WITHOUT_CLASSIFICATION	do nothing. fd_cloexec has no meaning in jvm since we cannot really exec.
WITHOUT_CLASSIFICATION	length to read
WITHOUT_CLASSIFICATION	string/buffer to read it into
WITHOUT_CLASSIFICATION	cryptic for the uninitiated
WITHOUT_CLASSIFICATION	select until read is ready
WITHOUT_CLASSIFICATION	bytelist buffer = null
WITHOUT_CLASSIFICATION	buffer = str.getbytelist()
WITHOUT_CLASSIFICATION	read_check from mri io.c
WITHOUT_CLASSIFICATION	rb writable
WITHOUT_CLASSIFICATION	read_check from mri io.c
WITHOUT_CLASSIFICATION	all errors to sysread should be systemcallerrors but on a closed stream ruby returns an ioerror. java throws same exception for all errors so we resort to this hack
WITHOUT_CLASSIFICATION	todo read into buffer using all the fread logic int read = openfile.getmainstream().fread(buffer)
WITHOUT_CLASSIFICATION	truncate buffer string to zero if provided
WITHOUT_CLASSIFICATION	todo read_check from mri
WITHOUT_CLASSIFICATION	class methods for io
WITHOUT_CLASSIFICATION	save blocking state
WITHOUT_CLASSIFICATION	write
WITHOUT_CLASSIFICATION	java's select doesn't do anything about this so we leave it be.
WITHOUT_CLASSIFICATION	make all sockets blocking as configured again close unregisters all channels so we can safely reset blocking modes
WITHOUT_CLASSIFICATION	fixme process options
WITHOUT_CLASSIFICATION	enebo annotation processing forced me to do pangea method here
WITHOUT_CLASSIFICATION	nio based pipe
WITHOUT_CLASSIFICATION	not using remove(object) here to avoid the equals() call
WITHOUT_CLASSIFICATION	raise will also wake the thread from selection
WITHOUT_CLASSIFICATION	may need to handle enc_coderange_broken
WITHOUT_CLASSIFICATION	todo rb_usascii_str_new2
WITHOUT_CLASSIFICATION	if we know what method was being called strip everything before the call. this hides the jruby and reflection internals.
WITHOUT_CLASSIFICATION	the class of this object
WITHOUT_CLASSIFICATION	zeroed by jvm
WITHOUT_CLASSIFICATION	objectclass.defineannotatedmethods(basicobjectmethods.class)
WITHOUT_CLASSIFICATION	jruby-4113 callers should not call settaint on immediate objects
WITHOUT_CLASSIFICATION	rb_class_boot
WITHOUT_CLASSIFICATION	6tags 16addr 1eos
WITHOUT_CLASSIFICATION	1.9 rb_check_to_integer
WITHOUT_CLASSIFICATION	for interface impls
WITHOUT_CLASSIFICATION	we're cloning ourselves so we know the result should be a rubyobject
WITHOUT_CLASSIFICATION	methods of the object class (rb_obj_)
WITHOUT_CLASSIFICATION	can't use -v and stdin
WITHOUT_CLASSIFICATION	include its parent (and in turn that module's parents)
WITHOUT_CLASSIFICATION	equivalent of data_get_struct this will first check that the object in question is actually a t_data equivalent.
WITHOUT_CLASSIFICATION	common variable methods
WITHOUT_CLASSIFICATION	internal variable methods
WITHOUT_CLASSIFICATION	instance variable api methods
WITHOUT_CLASSIFICATION	struct methods
WITHOUT_CLASSIFICATION	runtime.getwarnings().warn(id.struct_constant_redefined frame.getfile() frame.getline() "redefining constant struct" + name name)
WITHOUT_CLASSIFICATION	define access methods.
WITHOUT_CLASSIFICATION	if we are storing a name as well index is one too high for values
WITHOUT_CLASSIFICATION	struct bodies should be public by default so set block visibility to public. jruby-1185.
WITHOUT_CLASSIFICATION	for binding purposes on the newly created struct types
WITHOUT_CLASSIFICATION	obj_infect
WITHOUT_CLASSIFICATION	these call assume threadcontext = receiver.getruntime().getcurrentcontext()
WITHOUT_CLASSIFICATION	execute iteratemethod again.
WITHOUT_CLASSIFICATION	@param nv number of times to cycle or -1 to cycle indefinitely
WITHOUT_CLASSIFICATION	atomic ?
WITHOUT_CLASSIFICATION	atomic ?
WITHOUT_CLASSIFICATION	must not be used across threads
WITHOUT_CLASSIFICATION	superclass may be null.
WITHOUT_CLASSIFICATION	containing classthe parent of object is null. object should always be last in chain.
WITHOUT_CLASSIFICATION	classid is the name of the class/module sans where it is located. if it is null then it an anonymous class.
WITHOUT_CLASSIFICATION	classproviders return java class/module (in #defineorgetclassunder and #defineorgetmoduleunder) when class/module is opened using colon syntax.
WITHOUT_CLASSIFICATION	update superclass reference
WITHOUT_CLASSIFICATION	make sure the module we include does not already exist
WITHOUT_CLASSIFICATION	mri checks all types first
WITHOUT_CLASSIFICATION	we need full traces use default (slow) populator
WITHOUT_CLASSIFICATION	module/singleton methods are all defined public
WITHOUT_CLASSIFICATION	see if module is in chaincannot match against itself so start at superclass.
WITHOUT_CLASSIFICATION	we can safely reference methods here instead of doing getmethods() since if we are adding we are not using a includedmodulewrapper.
WITHOUT_CLASSIFICATION	we grab serial number first the worst that will happen is we cache a later update with an earlier serial number which would just flush anyway
WITHOUT_CLASSIFICATION	update all hierarchies into which this module has been included
WITHOUT_CLASSIFICATION	this method is intended only for defining new classes in ruby code so it uses the allocator of the specified superclass or default to the object allocator. it should not be used to define classes that require a native allocator.
WITHOUT_CLASSIFICATION	need to skip includedmodulewrappers
WITHOUT_CLASSIFICATION	superclazz = null
WITHOUT_CLASSIFICATION	reopen a java class
WITHOUT_CLASSIFICATION	this method is intended only for defining new modules in ruby code
WITHOUT_CLASSIFICATION	reopen a java module
WITHOUT_CLASSIFICATION	fixme warning
WITHOUT_CLASSIFICATION	fixme warning
WITHOUT_CLASSIFICATION	a normal block passed to define_method changes to do arity checking make it a lambda
WITHOUT_CLASSIFICATION	for zsupers in define_method (blech!) we tell the proc scope to act as the "argument" scope
WITHOUT_CLASSIFICATION	just using required is brokenbut no more broken than before zsuper refactoring
WITHOUT_CLASSIFICATION	class and module bodies default to public so make the block's visibility public. jruby-1185.
WITHOUT_CLASSIFICATION	check the visibility of the previous frame which will be the frame in which the class is being eval'ed
WITHOUT_CLASSIFICATION	mri error message says class even though module is ok
WITHOUT_CLASSIFICATION	scan class hierarchy for module
WITHOUT_CLASSIFICATION	module class methods
WITHOUT_CLASSIFICATION	note we change current frames visibility here because the methods which call this method are all "fast" (e.g. they do not created their own frame).
WITHOUT_CLASSIFICATION	next in hierarchy is an included version of the module we're attempting so we skip including it
WITHOUT_CLASSIFICATION	if we haven't encountered a real superclass use the found module as the new inclusion point
WITHOUT_CLASSIFICATION	build a list of all modules to consider for inclusion
WITHOUT_CLASSIFICATION	if the insertion point is a class update subclass lists
WITHOUT_CLASSIFICATION	if there's a non-null superclass we're including into a normal class hierarchy update subclass relationships to avoid stale parent/child relationships
WITHOUT_CLASSIFICATION	class variable ruby methods
WITHOUT_CLASSIFICATION	constant ruby methods
WITHOUT_CLASSIFICATION	note includes part of fix for jruby-1339
WITHOUT_CLASSIFICATION	class variable api methods
WITHOUT_CLASSIFICATION	wrong parameter ?
WITHOUT_CLASSIFICATION	not actually called anywhere (all known uses call the fast version)
WITHOUT_CLASSIFICATION	not that is loaded loop around to resolve it next pass
WITHOUT_CLASSIFICATION	if adding a module under a constant name set that module's basename to the constant name
WITHOUT_CLASSIFICATION	fix for jruby-1339 - search hierarchy for constant
WITHOUT_CLASSIFICATION	returns the stored value without processing undefs (autoloads)
WITHOUT_CLASSIFICATION	removes and returns the stored value without processing undefs (autoloads)
WITHOUT_CLASSIFICATION	we can't rename a file while it's open in windows
WITHOUT_CLASSIFICATION	reopen
WITHOUT_CLASSIFICATION	argf methods
WITHOUT_CLASSIFICATION	data.currentfile.callmethod(context "lineno=" line)
WITHOUT_CLASSIFICATION	one optional one required args
WITHOUT_CLASSIFICATION	one optional and no required args
WITHOUT_CLASSIFICATION	try to get errno value out of the class
WITHOUT_CLASSIFICATION	we got a valid errno value
WITHOUT_CLASSIFICATION	ensure we're not running on gcj since it's not supported and leads to weird errors
WITHOUT_CLASSIFICATION	print out as a nice ruby backtrace
WITHOUT_CLASSIFICATION	produce a nicer error since rubyists aren't used to seeing this
WITHOUT_CLASSIFICATION	set thread context jruby classloader here for the main thread
WITHOUT_CLASSIFICATION	can't set tc classloader
WITHOUT_CLASSIFICATION	no script to run return success below
WITHOUT_CLASSIFICATION	skip /usr/bin/env if it's first
WITHOUT_CLASSIFICATION	skip any assignments if /usr/bin/env is in play
WITHOUT_CLASSIFICATION	skip any commandline args if /usr/bin/env is in play
WITHOUT_CLASSIFICATION	ignore error
WITHOUT_CLASSIFICATION	common constant / cvar methods
WITHOUT_CLASSIFICATION	internal module variable api methods
WITHOUT_CLASSIFICATION	low-level constant interface fetch/store/list constants for this module
WITHOUT_CLASSIFICATION	odd
WITHOUT_CLASSIFICATION	jrubyclient
WITHOUT_CLASSIFICATION	x = mantissa 2 exponent where mantissa is in the range of [.5 1)
WITHOUT_CLASSIFICATION	make mantissa same sign so we only have one code path.
WITHOUT_CLASSIFICATION	increase value to hit lower range.
WITHOUT_CLASSIFICATION	r = x 2 y
WITHOUT_CLASSIFICATION	0!
WITHOUT_CLASSIFICATION	1!
WITHOUT_CLASSIFICATION	2!
WITHOUT_CLASSIFICATION	3!
WITHOUT_CLASSIFICATION	4!
WITHOUT_CLASSIFICATION	5!
WITHOUT_CLASSIFICATION	6!
WITHOUT_CLASSIFICATION	7!
WITHOUT_CLASSIFICATION	8!
WITHOUT_CLASSIFICATION	9!
WITHOUT_CLASSIFICATION	11!
WITHOUT_CLASSIFICATION	12!
WITHOUT_CLASSIFICATION	13!
WITHOUT_CLASSIFICATION	15!
WITHOUT_CLASSIFICATION	16!
WITHOUT_CLASSIFICATION	17!
WITHOUT_CLASSIFICATION	19!
WITHOUT_CLASSIFICATION	20!
WITHOUT_CLASSIFICATION	21!
WITHOUT_CLASSIFICATION	static constants
WITHOUT_CLASSIFICATION	clean-up string representation so that it could be understood by java's bigdecimal. not terribly efficient for now. 1. mri allows d and d as exponent separators
WITHOUT_CLASSIFICATION	2. mri allows underscores anywhere
WITHOUT_CLASSIFICATION	3. mri ignores the trailing junk
WITHOUT_CLASSIFICATION	mri behavior -0 and +0 are two different things
WITHOUT_CLASSIFICATION	java and mri definitions of modulo are different.
WITHOUT_CLASSIFICATION	java and mri definitions of remainder are the same.
WITHOUT_CLASSIFICATION	note mri has a very non-trivial way of calculating the precision so we use very simple approximation here
WITHOUT_CLASSIFICATION	iteration variables for the square root x and the reciprocal v initial x x0 ~ sqrt() initial v v0 = 1/(2x)
WITHOUT_CLASSIFICATION	it doesn't handle special cases
WITHOUT_CLASSIFICATION	todo why this .setresult()
WITHOUT_CLASSIFICATION	integer division
WITHOUT_CLASSIFICATION	mri behavior "if digits is 0 the result is the same as the / operator."
WITHOUT_CLASSIFICATION	rounding neccessary
WITHOUT_CLASSIFICATION	rounding neccessary
WITHOUT_CLASSIFICATION	java and mri definitions of divmod are different.
WITHOUT_CLASSIFICATION	jruby-914 java 1.4 bigdecimal does not allow a negative scale so we have to simulate it
WITHOUT_CLASSIFICATION	shift the decimal point just to the right of the digit to be rounded to (divide by 10(abs(scale))) -1 -> 10's digit -2 -> 100's digit etc.
WITHOUT_CLASSIFICATION	round to that digit
WITHOUT_CLASSIFICATION	and shift the result back to the left (multiply by 10(abs(scale)))
WITHOUT_CLASSIFICATION	this relies on the ruby rounding enumerations == java ones which they (currently) all are
WITHOUT_CLASSIFICATION	sign
WITHOUT_CLASSIFICATION	significant digits and exponent
WITHOUT_CLASSIFICATION	normalize the value
WITHOUT_CLASSIFICATION	base
WITHOUT_CLASSIFICATION	note mri's sqrt precision is limited by 100 but we allow values more than 100.
WITHOUT_CLASSIFICATION	just in case add a bit of extra precision
WITHOUT_CLASSIFICATION	eh?!
WITHOUT_CLASSIFICATION	note #fix has only no-arg form but truncate allows optional parameter.
WITHOUT_CLASSIFICATION	general number and precision checking
WITHOUT_CLASSIFICATION	the requested precision
WITHOUT_CLASSIFICATION	proc class
WITHOUT_CLASSIFICATION	.append(" -x[directory] strip off text before #!ruby line and perhaps cd to directory\n")
WITHOUT_CLASSIFICATION	even shift.. ..floors to 62 or 63 bit biginteger
WITHOUT_CLASSIFICATION	5 -> 2 -5 -> -3 need half a scale more..
WITHOUT_CLASSIFICATION	..where 100 -> 10 shifts the scale
WITHOUT_CLASSIFICATION	initial x - use double root - multiply by halfback to unshift - set new scale
WITHOUT_CLASSIFICATION	x0 ~ sqrt()
WITHOUT_CLASSIFICATION	for prec 15 root x0 must surely be ok return small prec roots without iterations
WITHOUT_CLASSIFICATION	initial v - the reciprocal v0 = 1/(2x)
WITHOUT_CLASSIFICATION	collect iteration precisions beforehand
WITHOUT_CLASSIFICATION	assume ninit = 16 <= prec
WITHOUT_CLASSIFICATION	the loop of "square root by coupled newton iteration"
WITHOUT_CLASSIFICATION	increase precision - next iteration supplies n exact digits
WITHOUT_CLASSIFICATION	next x e = d - x^2
WITHOUT_CLASSIFICATION	x += ev ~ sqrt()
WITHOUT_CLASSIFICATION	root x is ready!
WITHOUT_CLASSIFICATION	next v g = 1 - 2xv
WITHOUT_CLASSIFICATION	v += gv ~ 1/2/sqrt()
WITHOUT_CLASSIFICATION	rubybigdecimal
WITHOUT_CLASSIFICATION	c bind_eval
WITHOUT_CLASSIFICATION	================ module methods ================
WITHOUT_CLASSIFICATION	from commandlineparser
WITHOUT_CLASSIFICATION	this property is a boolean to allow three values so it can match mri's nil false and true
WITHOUT_CLASSIFICATION	default classcache using jitmax as a soft upper bound
WITHOUT_CLASSIFICATION	until we get a little more solid on 1.9 support we will only run interpreted mode
WITHOUT_CLASSIFICATION	setting the loader needs to reset the class cache
WITHOUT_CLASSIFICATION	try the normal property first
WITHOUT_CLASSIFICATION	verify it if it's there
WITHOUT_CLASSIFICATION	verify it if it's there
WITHOUT_CLASSIFICATION	try loading from classloader resources
WITHOUT_CLASSIFICATION	otherwise fall back on system temp location
WITHOUT_CLASSIFICATION	we require the home directory to be absolute
WITHOUT_CLASSIFICATION	consume the file name
WITHOUT_CLASSIFICATION	specify something that can't separate
WITHOUT_CLASSIFICATION	try cwd first
WITHOUT_CLASSIFICATION	ruby interpreter compatibilty usage ruby [switches] [--] [programfile] [arguments])
WITHOUT_CLASSIFICATION	kcode.none is used because kcode does not affect parse in ruby 1.8 if ruby 2.0 encoding pragmas are implemented this will need to change
WITHOUT_CLASSIFICATION	@jrubymethod(name = "complex?")
WITHOUT_CLASSIFICATION	@jrubymethod(name = "exact?")
WITHOUT_CLASSIFICATION	@jrubymethod(name = "inexact?")
WITHOUT_CLASSIFICATION	symbol string must be interned
WITHOUT_CLASSIFICATION	assert internedsymbol == internedsymbol.intern() internedsymbol + " is not interned"
WITHOUT_CLASSIFICATION	symbol class methods.
WITHOUT_CLASSIFICATION	todo 1.9 rb_enc_symname_p
WITHOUT_CLASSIFICATION	this is needed to unpack stuff
WITHOUT_CLASSIFICATION	we already confirmed above that length > 0
WITHOUT_CLASSIFICATION	must be power of 2!
WITHOUT_CLASSIFICATION	note all fields are final -- rehash creates new entries when necessary. as documented in java.util.concurrent.concurrenthashmap.java that will statistically affect only a small percentage (< 20%) of entries for a given rehash.
WITHOUT_CLASSIFICATION	assert internedname == internedname.intern() internedname + " is not interned"
WITHOUT_CLASSIFICATION	try lookup again under lock
WITHOUT_CLASSIFICATION	try lookup again under lock
WITHOUT_CLASSIFICATION	write-volatile
WITHOUT_CLASSIFICATION	write-volatile
WITHOUT_CLASSIFICATION	backwards-compatibility but threadsafe now
WITHOUT_CLASSIFICATION	single node on list
WITHOUT_CLASSIFICATION	reuse trailing consecutive sequence at same slot
WITHOUT_CLASSIFICATION	clone all remaining nodes
WITHOUT_CLASSIFICATION	check the length every iteration since the block can modify this string.
WITHOUT_CLASSIFICATION	we set scope-aware to true to force heap-based locals
WITHOUT_CLASSIFICATION	not so backwards-compatible here but no one should have been calling this anyway.
WITHOUT_CLASSIFICATION	profile
WITHOUT_CLASSIFICATION	static private final string translit = "translit"
WITHOUT_CLASSIFICATION	treat start and end as startend for end >= 0 start..end for end < 0
WITHOUT_CLASSIFICATION	invalid ranges result in an empty string
WITHOUT_CLASSIFICATION	methods of the nil class (nil_)
WITHOUT_CLASSIFICATION	has read/write been closed or is it still open for business
WITHOUT_CLASSIFICATION	support io modes that this object was opened with
WITHOUT_CLASSIFICATION	must let original string know we're modifying so shared buffers aren't damaged
WITHOUT_CLASSIFICATION	reset the state
WITHOUT_CLASSIFICATION	tainting here if we ever want it. (secure 4)
WITHOUT_CLASSIFICATION	rb_match_busy
WITHOUT_CLASSIFICATION	str is frozen
WITHOUT_CLASSIFICATION	mri also does a pointer comparison here
WITHOUT_CLASSIFICATION	jrubyserver
WITHOUT_CLASSIFICATION	class.allocate object is not allocatable before it is initialized
WITHOUT_CLASSIFICATION	boot the object class
WITHOUT_CLASSIFICATION	methods of the object class (rb_obj_)
WITHOUT_CLASSIFICATION	update superclass reference
WITHOUT_CLASSIFICATION	undo check
WITHOUT_CLASSIFICATION	this is a non-standard method have we decided to start extending ruby? classclass.definefastmethod("subclasses" callbackfactory.getfastoptmethod("subclasses"))
WITHOUT_CLASSIFICATION	boot the module and class classes
WITHOUT_CLASSIFICATION	this is the only case it might be null here (in metaclass construction)
WITHOUT_CLASSIFICATION	use parent's marshal
WITHOUT_CLASSIFICATION	use parent's marshal
WITHOUT_CLASSIFICATION	could be pulled down to rubyclass in future rb_class_boot
WITHOUT_CLASSIFICATION	remove us from old superclass's child classes
WITHOUT_CLASSIFICATION	add us to new superclass's child classes
WITHOUT_CLASSIFICATION	update all subclasses
WITHOUT_CLASSIFICATION	fields to hold ruby and rubyclass references
WITHOUT_CLASSIFICATION	static initializing method
WITHOUT_CLASSIFICATION	standard constructor that accepts ruby rubyclass
WITHOUT_CLASSIFICATION	no-arg constructor using static references to ruby and rubyclass
WITHOUT_CLASSIFICATION	non-signature signature with just irubyobject
WITHOUT_CLASSIFICATION	indices for temp values
WITHOUT_CLASSIFICATION	self method name
WITHOUT_CLASSIFICATION	the default allocator
WITHOUT_CLASSIFICATION	equivalent of t_data
WITHOUT_CLASSIFICATION	do nothing leave empty
WITHOUT_CLASSIFICATION	double.max_exponent since java 1.6
WITHOUT_CLASSIFICATION	================ singleton methods ================
WITHOUT_CLASSIFICATION	ruby uses qnil here we use "dummy" because we need a class
WITHOUT_CLASSIFICATION	make sure all arguments are modules before calling the callbacks
WITHOUT_CLASSIFICATION	mri extends in order from last to first
WITHOUT_CLASSIFICATION	note serialization is primarily supported for testing purposes and there is no general guarantee that serialization will work correctly. specifically instance variables pointing at symbols threads modules classes and other unserializable types are not detected.
WITHOUT_CLASSIFICATION	write out ivar count followed by name/value pairs
WITHOUT_CLASSIFICATION	rest in ivar count followed by name/value pairs
WITHOUT_CLASSIFICATION	0x3fff_ffff -0x4000_0000
WITHOUT_CLASSIFICATION	a gotcha
WITHOUT_CLASSIFICATION	java / and % are not the same as ruby
WITHOUT_CLASSIFICATION	a gotcha for long.min_value value = -value
WITHOUT_CLASSIFICATION	piece of mri rb_to_id
WITHOUT_CLASSIFICATION	java doubles are 64 bit long
WITHOUT_CLASSIFICATION	double.max_exponent since java 1.6
WITHOUT_CLASSIFICATION	don't override numeric#div !
WITHOUT_CLASSIFICATION	modelled after c ruby implementation (java /% not same as ruby)
WITHOUT_CLASSIFICATION	mri behavior
WITHOUT_CLASSIFICATION	numeric.equal
WITHOUT_CLASSIFICATION	provider is not available
WITHOUT_CLASSIFICATION	bouncy castle doesn't support algorithm
WITHOUT_CLASSIFICATION	fall back to system jca providers
WITHOUT_CLASSIFICATION	rubydigest
WITHOUT_CLASSIFICATION	enebo can these be fast?
WITHOUT_CLASSIFICATION	synchronize on the rubythread for threadgroup updates
WITHOUT_CLASSIFICATION	we only add live threads
WITHOUT_CLASSIFICATION	use same classindex as metaclass since we're technically still of that type
WITHOUT_CLASSIFICATION	handle everything after -- as arguments to the jruby process
WITHOUT_CLASSIFICATION	jrubyservice
WITHOUT_CLASSIFICATION	while
WITHOUT_CLASSIFICATION	\ooo
WITHOUT_CLASSIFICATION	cruby uses sprintf(buf "%.g" float_dig d) this pattern adjusts the output of string.pattern("%g") to mimic the c version.
WITHOUT_CLASSIFICATION	mask off "once" flag
WITHOUT_CLASSIFICATION	used only by the compiler/interpreter (will set the literal flag)
WITHOUT_CLASSIFICATION	internal usage (complex/rational)
WITHOUT_CLASSIFICATION	silent ?
WITHOUT_CLASSIFICATION	\xhh
WITHOUT_CLASSIFICATION	\m-x \m-\c-x \m-\cx
WITHOUT_CLASSIFICATION	\c-x \c-\m-x
WITHOUT_CLASSIFICATION	\cx \c\m-x
WITHOUT_CLASSIFICATION	\o \oo \ooo or backref
WITHOUT_CLASSIFICATION	mbclen_needmore_p
WITHOUT_CLASSIFICATION	mbclen_invalid_p
WITHOUT_CLASSIFICATION	unicode is can be only 21 bits long int is enough
WITHOUT_CLASSIFICATION	surrogates
WITHOUT_CLASSIFICATION	do not load the class if not used
WITHOUT_CLASSIFICATION	\0 \0o \0oo
WITHOUT_CLASSIFICATION	\xhh
WITHOUT_CLASSIFICATION	\c-x \c-\m-x
WITHOUT_CLASSIFICATION	\m-x \m-\c-x \m-\cx
WITHOUT_CLASSIFICATION	\\u{h hh hhh hhhh hhhhh hhhhhh }
WITHOUT_CLASSIFICATION	\\uhhhh
WITHOUT_CLASSIFICATION	\p{hiragana}
WITHOUT_CLASSIFICATION	inner switch
WITHOUT_CLASSIFICATION	newinstance here
WITHOUT_CLASSIFICATION	rb_reg_raise
WITHOUT_CLASSIFICATION	rb_reg_desc
WITHOUT_CLASSIFICATION	rb_enc_reg_raise
WITHOUT_CLASSIFICATION	rb_enc_reg_error_desc
WITHOUT_CLASSIFICATION	rb_reg_initialize_str
WITHOUT_CLASSIFICATION	rb_reg_initialize
WITHOUT_CLASSIFICATION	jruby-3625 delay setting backref until the matchdata is completely initialized
WITHOUT_CLASSIFICATION	rb_reg_expr_str
WITHOUT_CLASSIFICATION	option_to_str
WITHOUT_CLASSIFICATION	don't initialize with class don't put in object space and don't taint
WITHOUT_CLASSIFICATION	args should be before block
WITHOUT_CLASSIFICATION	args should be at end
WITHOUT_CLASSIFICATION	minus one more for irubyobject[]
WITHOUT_CLASSIFICATION	minus one more for irubyobject[]
WITHOUT_CLASSIFICATION	skip anything not related to jruby
WITHOUT_CLASSIFICATION	start a new populator
WITHOUT_CLASSIFICATION	check for frame field reads or writes
WITHOUT_CLASSIFICATION	add all names for this annotation
WITHOUT_CLASSIFICATION	no annotated methods found skip
WITHOUT_CLASSIFICATION	write out a static initializer for frame names so it only fires once
WITHOUT_CLASSIFICATION	single method use normal logic
WITHOUT_CLASSIFICATION	multimethod new logic
WITHOUT_CLASSIFICATION	declared type returns the qualified name without $ for inner classes!!!
WITHOUT_CLASSIFICATION	inner class use $ to delimit
WITHOUT_CLASSIFICATION	rubymodule singletonclass = module.getsingletonclass()
WITHOUT_CLASSIFICATION	}
WITHOUT_CLASSIFICATION	fallback on non-pregenerated logic
WITHOUT_CLASSIFICATION	refresh call adapter since it matters if this is iter-based or not
WITHOUT_CLASSIFICATION	if we have more than one arg make sure the array created to contain them is not objectspaced
WITHOUT_CLASSIFICATION	attribute set.
WITHOUT_CLASSIFICATION	element set
WITHOUT_CLASSIFICATION	if reciever is self then we do the call the same way as vcall
WITHOUT_CLASSIFICATION	if reciever is self then we do the call the same way as vcall
WITHOUT_CLASSIFICATION	colon3
WITHOUT_CLASSIFICATION	colon3
WITHOUT_CLASSIFICATION	array created for rescue args doesn't need to be in objectspace.
WITHOUT_CLASSIFICATION	for b.foo
WITHOUT_CLASSIFICATION	instance config for the script run
WITHOUT_CLASSIFICATION	if reciever is self then we do the call the same way as vcall
WITHOUT_CLASSIFICATION	if reciever is self then we do the call the same way as vcall
WITHOUT_CLASSIFICATION	for 'b.foo()'. args are only significant in maintaining backwards compatible ast structure
WITHOUT_CLASSIFICATION	for 'b.foo()'. args are only significant in maintaining backwards compatible ast structure
WITHOUT_CLASSIFICATION	rubymodule module = context.getrubyclass()
WITHOUT_CLASSIFICATION	for 'b.foo'
WITHOUT_CLASSIFICATION	we define an actual list to get around bug in java integration (1387115)
WITHOUT_CLASSIFICATION	something in here is used to build up ruby stack trace
WITHOUT_CLASSIFICATION	ruby grammar productions return plenty of nulls.
WITHOUT_CLASSIFICATION	ruby grammar productions return plenty of nulls.
WITHOUT_CLASSIFICATION	do nothing allow loop to retry
WITHOUT_CLASSIFICATION	we can callsite cache const_missing if we want
WITHOUT_CLASSIFICATION	store to temp so it does null out on us mid-stream
WITHOUT_CLASSIFICATION	never visited should be fine
WITHOUT_CLASSIFICATION	for 'foo()'. args are only significant in maintaining backwards compatible ast structure
WITHOUT_CLASSIFICATION	the name of the variable
WITHOUT_CLASSIFICATION	if we have more than one argument then make sure the array is not objectspaced.
WITHOUT_CLASSIFICATION	only in ruby 1.9 methods
WITHOUT_CLASSIFICATION	bind 'normal' parameter values to the local scope for this method.
WITHOUT_CLASSIFICATION	no arg grouping just use bulk assignment methods
WITHOUT_CLASSIFICATION	optargs and restargs require more work so isolate them and arraylist creation here
WITHOUT_CLASSIFICATION	arity.checkarity(runtime argslength)
WITHOUT_CLASSIFICATION	no more values to stick in rest arg
WITHOUT_CLASSIFICATION	set argv from main's args
WITHOUT_CLASSIFICATION	attribute set.
WITHOUT_CLASSIFICATION	if reciever is self then we do the call the same way as vcall
WITHOUT_CLASSIFICATION	for 'b.foo()'. args are only significant in maintaining backwards compatible ast structure
WITHOUT_CLASSIFICATION	the name of the variable
WITHOUT_CLASSIFICATION	a scoped location of this variable (high 16 bits is how many scopes down and low 16 bits is what index in the right scope to set the value.
WITHOUT_CLASSIFICATION	a scoped location of this variable (high 16 bits is how many scopes down and low 16 bits is what index in the right scope to set the value.
WITHOUT_CLASSIFICATION	block.yield depends on null to represent empty and nil to represent nil - [nil] vs [] assert argsnode != null "argsnode is not null"
WITHOUT_CLASSIFICATION	assign given optional arguments to their variables
WITHOUT_CLASSIFICATION	in-frame evalstate should already have receiver set as self continue to use it
WITHOUT_CLASSIFICATION	assign the default values adding to the end of allargs
WITHOUT_CLASSIFICATION	make sure the appropriate scope has proper size. see jruby-2046.
WITHOUT_CLASSIFICATION	experimental class reification support to create real java classes for ruby classes after the first opening
WITHOUT_CLASSIFICATION	this should never happen past parse but just bulletproof this just in case
WITHOUT_CLASSIFICATION	make a nil node if no body. notice this is not part of ast.
WITHOUT_CLASSIFICATION	'class << state.self' and 'class << obj' uses defn as opposed to defs
WITHOUT_CLASSIFICATION	now used as an interpreter event
WITHOUT_CLASSIFICATION	never visited should be ok
WITHOUT_CLASSIFICATION	if no explicit block passed to super then use the one passed in unless it's explicitly cleared with nil
WITHOUT_CLASSIFICATION	jruby-530 until case
WITHOUT_CLASSIFICATION	element set
WITHOUT_CLASSIFICATION	for 'b.foo()'. args are only significant in maintaining backwards compatible ast structure
WITHOUT_CLASSIFICATION	we can callsite cache const_missing if we want
WITHOUT_CLASSIFICATION	store to temp so it does null out on us mid-stream
WITHOUT_CLASSIFICATION	store to temp so it does null out on us mid-stream
WITHOUT_CLASSIFICATION	for 'foo()'. args are only significant in maintaining backwards compatible ast structure
WITHOUT_CLASSIFICATION	the name of the variable
WITHOUT_CLASSIFICATION	the name of the variable
WITHOUT_CLASSIFICATION	a scoped location of this variable (high 16 bits is how many scopes down and low 16 bits is what index in the right scope to set the value.
WITHOUT_CLASSIFICATION	empirical observations null -> some arity argsnode == this.argsnode then check for arity changes newline(splatnode) -> argspushnode
WITHOUT_CLASSIFICATION	assert !(value instanceof rubyarray) "not an array"
WITHOUT_CLASSIFICATION	serialization killed our dynamic scope. we can just create an empty one since serialization cannot serialize an eval (which is the only thing which is capable of having a non-empty dynamic scope).
WITHOUT_CLASSIFICATION	each root node has a top-level scope that we need to push
WITHOUT_CLASSIFICATION	we could probably also detect if lhs value came out of cache and avoid some of this
WITHOUT_CLASSIFICATION	assert thenbody != null "thenbody is not null" assert elsebody != null "elsebody is not null"
WITHOUT_CLASSIFICATION	add in reverse order
WITHOUT_CLASSIFICATION	in order to make pragma's noops we set location to a special value
WITHOUT_CLASSIFICATION	ignore compiler pragmas
WITHOUT_CLASSIFICATION	we can callsite cache const_missing if we want
WITHOUT_CLASSIFICATION	store to temp so it does null out on us mid-stream
WITHOUT_CLASSIFICATION	store to temp so it does null out on us mid-stream
WITHOUT_CLASSIFICATION	for 'foo()'. args are only significant in maintaining backwards compatible ast structure
WITHOUT_CLASSIFICATION	make a nil node if no body. notice this is not part of ast.
WITHOUT_CLASSIFICATION	now used as an interpreter event
WITHOUT_CLASSIFICATION	no actual test so do 'when' if when expression is not nil
WITHOUT_CLASSIFICATION	save entering the try if there's nothing to ensure
WITHOUT_CLASSIFICATION	for 'foo'
WITHOUT_CLASSIFICATION	for 'foo'
WITHOUT_CLASSIFICATION	admittedly inefficient
WITHOUT_CLASSIFICATION	jruby-530 while case
WITHOUT_CLASSIFICATION	what static scoping relationship exists when it comes into being.
WITHOUT_CLASSIFICATION	let rescuedblock continue
WITHOUT_CLASSIFICATION	just rethrow
WITHOUT_CLASSIFICATION	just rethrow
WITHOUT_CLASSIFICATION	clear exception when handled or retried
WITHOUT_CLASSIFICATION	clear exception when handled or retried
WITHOUT_CLASSIFICATION	no takers bubble up
WITHOUT_CLASSIFICATION	no takers bubble up
WITHOUT_CLASSIFICATION	execute rescue block
WITHOUT_CLASSIFICATION	if no exception is thrown execute else block
WITHOUT_CLASSIFICATION	index of variable for this arg
WITHOUT_CLASSIFICATION	only a marker interface
WITHOUT_CLASSIFICATION	don't attempt to coerce to array just wrap and return
WITHOUT_CLASSIFICATION	pragmas
WITHOUT_CLASSIFICATION	the method also needs a scope do both
WITHOUT_CLASSIFICATION	we're doing normal framed compilation or the method needs a frame
WITHOUT_CLASSIFICATION	the method doesn't need a scope or static scope frame only
WITHOUT_CLASSIFICATION	the method doesn't need a scope but has static scope needs use a dummy scope
WITHOUT_CLASSIFICATION	proc.new needs the caller's block to instantiate a proc
WITHOUT_CLASSIFICATION	check for proc.new an especially magic method
WITHOUT_CLASSIFICATION	long slow way causes disabling
WITHOUT_CLASSIFICATION	ok we have fast paths
WITHOUT_CLASSIFICATION	ok we have fast paths
WITHOUT_CLASSIFICATION	long slow way causes disabling for defined
WITHOUT_CLASSIFICATION	we set scope-aware to true to force heap-based locals
WITHOUT_CLASSIFICATION	because regexp#=== sets backref we have to make this backref-aware
WITHOUT_CLASSIFICATION	encountered a node we don't recognize set everything to true to disable optz
WITHOUT_CLASSIFICATION	only arrays that are "lightweight" are being used as args arrays
WITHOUT_CLASSIFICATION	otherwise it's a literal array
WITHOUT_CLASSIFICATION	use array as-is it's a literal array
WITHOUT_CLASSIFICATION	unwrap newline nodes to get their actual type
WITHOUT_CLASSIFICATION	compile first node as non-expr and then second node
WITHOUT_CLASSIFICATION	last node either !instanceof whennode or null is the else
WITHOUT_CLASSIFICATION	compile first node only
WITHOUT_CLASSIFICATION	splatted when can't do it yet
WITHOUT_CLASSIFICATION	if __send__ with a literal symbol compile it as a direct fcall
WITHOUT_CLASSIFICATION	note currently this optimization is limited to the following situations all expressions must be int-ranged literal fixnums it also still emits the code for the "safe" when logic which is rather wasteful (since it essentially doubles each code body). as such it is normally disabled but it serves as an example of how this optimization could be done. ideally it should be combined with the when processing to improve code reuse before it's generally available.
WITHOUT_CLASSIFICATION	aggregate when nodes into a list unfortunately this is no
WITHOUT_CLASSIFICATION	one arg but it's an array treat it as a proper array
WITHOUT_CLASSIFICATION	can't do it
WITHOUT_CLASSIFICATION	otherwise use normal args compiler
WITHOUT_CLASSIFICATION	colon3 assign in object
WITHOUT_CLASSIFICATION	colon3 assign in object
WITHOUT_CLASSIFICATION	these are all simple cases that don't require the heavier defined logic
WITHOUT_CLASSIFICATION	[irubyobject rubyclass visibility] [irubyobject rubyclass] [irubyobject]
WITHOUT_CLASSIFICATION	[]
WITHOUT_CLASSIFICATION	[]
WITHOUT_CLASSIFICATION	context.swapvalues() context.consumecurrentvalue()
WITHOUT_CLASSIFICATION	[rubyclass] [rubyclass rubyclass] [rubyclass] [] [self] [rubyclass] [rubyclass rubyclass]
WITHOUT_CLASSIFICATION	[rubyclass]
WITHOUT_CLASSIFICATION	[rubyclass] [rubyclass rubyclass] [rubyclass] []
WITHOUT_CLASSIFICATION	if root of method is rescue compile as a light rescue
WITHOUT_CLASSIFICATION	inspect body and args
WITHOUT_CLASSIFICATION	inspect body and args
WITHOUT_CLASSIFICATION	check args first since body inspection can depend on args
WITHOUT_CLASSIFICATION	if root of method is rescue compile as light rescue
WITHOUT_CLASSIFICATION	invoke run with threadcontext and topself
WITHOUT_CLASSIFICATION	[irubyobject] [irubyobject irubyobject] [irubyobject rubyclass] [irubyobject rubyclass rubyclass] [irubyobject rubyclass visibility] [irubyobject rubyclass visibility visibility]
WITHOUT_CLASSIFICATION	[irubyobject rubyclass visibility] [irubyobject rubyclass] [irubyobject]
WITHOUT_CLASSIFICATION	[rubyclass] []
WITHOUT_CLASSIFICATION	[string] [string string] [string] [string rubyclass] [string rubyclass rubyclass] [string rubyclass]
WITHOUT_CLASSIFICATION	[string] [string string] [string] [string rubyclass] [string rubyclass rubyclass] [string rubyclass]
WITHOUT_CLASSIFICATION	no args do not pass args processor
WITHOUT_CLASSIFICATION	create the closure class and instantiate it
WITHOUT_CLASSIFICATION	create the closure class and instantiate it
WITHOUT_CLASSIFICATION	not an expression only compile the elements
WITHOUT_CLASSIFICATION	not an expression only compile the elements
WITHOUT_CLASSIFICATION	not an expression only compile the elements
WITHOUT_CLASSIFICATION	create the closure class and instantiate it
WITHOUT_CLASSIFICATION	create the closure class and instantiate it
WITHOUT_CLASSIFICATION	no args do not pass args processor
WITHOUT_CLASSIFICATION	force heap-scope behavior since it uses parent's scope
WITHOUT_CLASSIFICATION	always false or nil
WITHOUT_CLASSIFICATION	optimizations if we know ahead of time it will always be true or false
WITHOUT_CLASSIFICATION	normal
WITHOUT_CLASSIFICATION	compile condition as non-expr and just compile "then" body
WITHOUT_CLASSIFICATION	need the array use unoptz version
WITHOUT_CLASSIFICATION	just push nil for pragmas
WITHOUT_CLASSIFICATION	"assignment" means the value is already on the stack
WITHOUT_CLASSIFICATION	compile first node only
WITHOUT_CLASSIFICATION	create the closure class and instantiate it
WITHOUT_CLASSIFICATION	create the closure class and instantiate it
WITHOUT_CLASSIFICATION	eval new value call operator on old value and assign
WITHOUT_CLASSIFICATION	try optz version
WITHOUT_CLASSIFICATION	sizes must match
WITHOUT_CLASSIFICATION	expect value to be an array of nodes
WITHOUT_CLASSIFICATION	normal items at the "head" of the masgn
WITHOUT_CLASSIFICATION	head must not be null and there must be no "args" (like arg)
WITHOUT_CLASSIFICATION	"head" must have no non-trivial assigns (array groupings basically)
WITHOUT_CLASSIFICATION	only supports simple parallel assignment of up to 10 values to the same number of assignees
WITHOUT_CLASSIFICATION	perform assignment for the next node
WITHOUT_CLASSIFICATION	if we get here no optz cases work fall back on unoptz.
WITHOUT_CLASSIFICATION	redonode redonode = (redonode)node
WITHOUT_CLASSIFICATION	done processing args
WITHOUT_CLASSIFICATION	all these types are immediately considered "defined"
WITHOUT_CLASSIFICATION	assign to appropriate variable
WITHOUT_CLASSIFICATION	if arity 1 just compile the one element to save us the array cost
WITHOUT_CLASSIFICATION	[recv]
WITHOUT_CLASSIFICATION	[recv]
WITHOUT_CLASSIFICATION	[recv]
WITHOUT_CLASSIFICATION	compile into array
WITHOUT_CLASSIFICATION	compile first node as non-expr and compile second node
WITHOUT_CLASSIFICATION	check if it's an immediate and don't outline
WITHOUT_CLASSIFICATION	condition is always true just compile it and not body
WITHOUT_CLASSIFICATION	force static scope to claim restarg at 0 so it only implements the [] version of __file__
WITHOUT_CLASSIFICATION	create method for toplevel of script
WITHOUT_CLASSIFICATION	it's a multiple-statement body iterate over all elements in turn and chain if it get too long
WITHOUT_CLASSIFICATION	send it along as arity-specific we don't need the array
WITHOUT_CLASSIFICATION	single-statement body just compile it
WITHOUT_CLASSIFICATION	leave as a normal array
WITHOUT_CLASSIFICATION	this method has jited already or has been abandoned. bail out.
WITHOUT_CLASSIFICATION	the cache is full. abandon jit for this method and bail out.
WITHOUT_CLASSIFICATION	check args first since body inspection can depend on args
WITHOUT_CLASSIFICATION	create the closure class and instantiate it
WITHOUT_CLASSIFICATION	create the closure class and instantiate it
WITHOUT_CLASSIFICATION	no args do not pass args processor
WITHOUT_CLASSIFICATION	need the array use unoptz version
WITHOUT_CLASSIFICATION	try optz version
WITHOUT_CLASSIFICATION	expect value to be an array of nodes
WITHOUT_CLASSIFICATION	head must not be null and there must be no "args" (like arg)
WITHOUT_CLASSIFICATION	sizes must match
WITHOUT_CLASSIFICATION	"head" must have no non-trivial assigns (array groupings basically)
WITHOUT_CLASSIFICATION	if we get here no optz cases work fall back on unoptz.
WITHOUT_CLASSIFICATION	perform assignment for the next node
WITHOUT_CLASSIFICATION	done processing args
WITHOUT_CLASSIFICATION	check if the method has been explicitly excluded
WITHOUT_CLASSIFICATION	class could not be found nor generated give up on jit and bail out
WITHOUT_CLASSIFICATION	successfully got back a jitted method
WITHOUT_CLASSIFICATION	finally grab the script
WITHOUT_CLASSIFICATION	logevery n methods based on configuration
WITHOUT_CLASSIFICATION	time the compilation
WITHOUT_CLASSIFICATION	we have a body do a full-on method
WITHOUT_CLASSIFICATION	if we don't have a body check for required or opt args if opt args they could have side effects if required args need to raise errors if too few args passed otherwise method does nothing make it a nop
WITHOUT_CLASSIFICATION	if we haven't already decided on a do-nothing call
WITHOUT_CLASSIFICATION	only supports simple parallel assignment of up to 4 values to the same number of assignees
WITHOUT_CLASSIFICATION	normal items at the front or back of the masgn
WITHOUT_CLASSIFICATION	set up a local iruby variable
WITHOUT_CLASSIFICATION	grab nil for local variables
WITHOUT_CLASSIFICATION	visit a label to start scoping for local vars in this method
WITHOUT_CLASSIFICATION	return last value from execution
WITHOUT_CLASSIFICATION	end of variable scope
WITHOUT_CLASSIFICATION	method is done declare all variables
WITHOUT_CLASSIFICATION	define the annotation for the method
WITHOUT_CLASSIFICATION	check arity in the variable-arity version
WITHOUT_CLASSIFICATION	load block from [] version of method
WITHOUT_CLASSIFICATION	normal return for method body. return jump for within a begin/rescue/ensure
WITHOUT_CLASSIFICATION	in method body with no containing loop issue jump error load runtime and value issue jump error
WITHOUT_CLASSIFICATION	in method body with no containing loop issue jump error load runtime and value issue jump error
WITHOUT_CLASSIFICATION	value is already on stack save it for later
WITHOUT_CLASSIFICATION	receiver first so we know which call site to use
WITHOUT_CLASSIFICATION	receiver
WITHOUT_CLASSIFICATION	receiver
WITHOUT_CLASSIFICATION	receiver
WITHOUT_CLASSIFICATION	self
WITHOUT_CLASSIFICATION	self
WITHOUT_CLASSIFICATION	self
WITHOUT_CLASSIFICATION	self
WITHOUT_CLASSIFICATION	arg0
WITHOUT_CLASSIFICATION	arg0
WITHOUT_CLASSIFICATION	arg0
WITHOUT_CLASSIFICATION	arg1
WITHOUT_CLASSIFICATION	arg1
WITHOUT_CLASSIFICATION	arg2
WITHOUT_CLASSIFICATION	args
WITHOUT_CLASSIFICATION	receiver first so we know which call site to use
WITHOUT_CLASSIFICATION	select appropriate call site dup receiver load self
WITHOUT_CLASSIFICATION	receiver
WITHOUT_CLASSIFICATION	receiver
WITHOUT_CLASSIFICATION	self
WITHOUT_CLASSIFICATION	self
WITHOUT_CLASSIFICATION	self
WITHOUT_CLASSIFICATION	arg0
WITHOUT_CLASSIFICATION	arg0
WITHOUT_CLASSIFICATION	arg1
WITHOUT_CLASSIFICATION	args
WITHOUT_CLASSIFICATION	get call site and thread context
WITHOUT_CLASSIFICATION	get call site and thread context
WITHOUT_CLASSIFICATION	evaluate and save receiver and args
WITHOUT_CLASSIFICATION	evaluate and save receiver and args
WITHOUT_CLASSIFICATION	invoke
WITHOUT_CLASSIFICATION	invoke
WITHOUT_CLASSIFICATION	check if it's true ending if so
WITHOUT_CLASSIFICATION	not true eval value and assign
WITHOUT_CLASSIFICATION	not true eval value and assign
WITHOUT_CLASSIFICATION	thread context receiver and original args
WITHOUT_CLASSIFICATION	thread context receiver and original args
WITHOUT_CLASSIFICATION	eval value for assignment
WITHOUT_CLASSIFICATION	call site
WITHOUT_CLASSIFICATION	call site
WITHOUT_CLASSIFICATION	depending on size of original args call appropriate utility method
WITHOUT_CLASSIFICATION	check if it's true ending if not
WITHOUT_CLASSIFICATION	eval value and save it
WITHOUT_CLASSIFICATION	self
WITHOUT_CLASSIFICATION	self
WITHOUT_CLASSIFICATION	depending on size of original args call appropriate utility method
WITHOUT_CLASSIFICATION	receiver args result value
WITHOUT_CLASSIFICATION	[adapter tc]
WITHOUT_CLASSIFICATION	[adapter tc]
WITHOUT_CLASSIFICATION	[adapter tc]
WITHOUT_CLASSIFICATION	super uses current block if none given
WITHOUT_CLASSIFICATION	args
WITHOUT_CLASSIFICATION	block
WITHOUT_CLASSIFICATION	block
WITHOUT_CLASSIFICATION	no args no block
WITHOUT_CLASSIFICATION	no args with block
WITHOUT_CLASSIFICATION	with args no block
WITHOUT_CLASSIFICATION	with args with block
WITHOUT_CLASSIFICATION	adapter tc recv args{01} block{01}]
WITHOUT_CLASSIFICATION	pop extra attr value
WITHOUT_CLASSIFICATION	pop extra attr value
WITHOUT_CLASSIFICATION	arg and receiver already present on the stack
WITHOUT_CLASSIFICATION	arg
WITHOUT_CLASSIFICATION	arg
WITHOUT_CLASSIFICATION	self
WITHOUT_CLASSIFICATION	[adapter tc]
WITHOUT_CLASSIFICATION	args
WITHOUT_CLASSIFICATION	block
WITHOUT_CLASSIFICATION	no args no block
WITHOUT_CLASSIFICATION	no args with block
WITHOUT_CLASSIFICATION	with args no block
WITHOUT_CLASSIFICATION	with args with block
WITHOUT_CLASSIFICATION	arg
WITHOUT_CLASSIFICATION	retrieve scope from scopes array
WITHOUT_CLASSIFICATION	use numbered access method
WITHOUT_CLASSIFICATION	retrieve call site from sites array
WITHOUT_CLASSIFICATION	add name to call site list
WITHOUT_CLASSIFICATION	module is on top of stack
WITHOUT_CLASSIFICATION	build scope names string
WITHOUT_CLASSIFICATION	build descriptor string
WITHOUT_CLASSIFICATION	build descriptor string
WITHOUT_CLASSIFICATION	generate call sites initialization code
WITHOUT_CLASSIFICATION	generate symbols initialization code
WITHOUT_CLASSIFICATION	generate fixnums initialization code
WITHOUT_CLASSIFICATION	generate constants initialization code
WITHOUT_CLASSIFICATION	generate regexps initialization code
WITHOUT_CLASSIFICATION	generate regexps initialization code
WITHOUT_CLASSIFICATION	generate variable readers initialization code
WITHOUT_CLASSIFICATION	generate variable writers initialization code
WITHOUT_CLASSIFICATION	generate block bodies initialization code
WITHOUT_CLASSIFICATION	generate block bodies initialization code
WITHOUT_CLASSIFICATION	generate bytelists initialization code
WITHOUT_CLASSIFICATION	generate method cache initialization code
WITHOUT_CLASSIFICATION	adapter tc recv args{01} block{01}]
WITHOUT_CLASSIFICATION	use irubyobject[]
WITHOUT_CLASSIFICATION	do nothing fall back on default compiler below
WITHOUT_CLASSIFICATION	if more than 4 locals get the locals array too
WITHOUT_CLASSIFICATION	no point in updating number if last number was same value.
WITHOUT_CLASSIFICATION	load object under value
WITHOUT_CLASSIFICATION	put under object array already present
WITHOUT_CLASSIFICATION	if element count is less than 6 use helper methods
WITHOUT_CLASSIFICATION	this is pretty inefficient for building an array so just raise an error if someone's using it for a lot of elements
WITHOUT_CLASSIFICATION	if we have a specific-arity helper to construct an array for us use that
WITHOUT_CLASSIFICATION	if we have a specific-arity helper to construct an array for us use that
WITHOUT_CLASSIFICATION	brute force construction inline
WITHOUT_CLASSIFICATION	brute force construction inline
WITHOUT_CLASSIFICATION	use specific-arity for as much as possible
WITHOUT_CLASSIFICATION	call istrue on the result
WITHOUT_CLASSIFICATION	call istrue on the result
WITHOUT_CLASSIFICATION	call istrue on the result
WITHOUT_CLASSIFICATION	eq == 0 (i.e. false)
WITHOUT_CLASSIFICATION	dup it since we need to return appropriately if it's false
WITHOUT_CLASSIFICATION	dup it since we need to return appropriately if it's false
WITHOUT_CLASSIFICATION	clear body or next result after each successful loop
WITHOUT_CLASSIFICATION	check the condition
WITHOUT_CLASSIFICATION	ne == nonzero (i.e. true)
WITHOUT_CLASSIFICATION	skip catch block
WITHOUT_CLASSIFICATION	catch logic for flow-control next break
WITHOUT_CLASSIFICATION	next jump
WITHOUT_CLASSIFICATION	exceptionnext target is for a next that doesn't push a new value like this one
WITHOUT_CLASSIFICATION	grab nil for local variables
WITHOUT_CLASSIFICATION	grab nil for local variables
WITHOUT_CLASSIFICATION	eq == 0 (i.e. false)
WITHOUT_CLASSIFICATION	clear body or next result after each successful loop
WITHOUT_CLASSIFICATION	eq == 0 (i.e. false) pop the extra result and replace with the send part of the and
WITHOUT_CLASSIFICATION	check the condition
WITHOUT_CLASSIFICATION	ne == nonzero (i.e. true)
WITHOUT_CLASSIFICATION	synthetic methods always have zero arg parameters
WITHOUT_CLASSIFICATION	break jump
WITHOUT_CLASSIFICATION	done with closure compilation
WITHOUT_CLASSIFICATION	[reg]
WITHOUT_CLASSIFICATION	for regular expressions with the /o flag
WITHOUT_CLASSIFICATION	inside a loop jump to body
WITHOUT_CLASSIFICATION	inside a loop jump to conditional
WITHOUT_CLASSIFICATION	synthetic methods always have zero arg parameters
WITHOUT_CLASSIFICATION	store previous exception for restoration if we rescue something
WITHOUT_CLASSIFICATION	store previous exception for restoration if we rescue something
WITHOUT_CLASSIFICATION	if more than 4 vars get values array too
WITHOUT_CLASSIFICATION	retry handling in the rescue block
WITHOUT_CLASSIFICATION	any exceptions raised must continue to be raised skipping $! restoration
WITHOUT_CLASSIFICATION	and remaining jump exceptions should restore $!
WITHOUT_CLASSIFICATION	restore the original exception
WITHOUT_CLASSIFICATION	handle flow exceptions just propagating them
WITHOUT_CLASSIFICATION	rethrow to outer flow catcher
WITHOUT_CLASSIFICATION	handle ruby exceptions (raiseexception)
WITHOUT_CLASSIFICATION	inside a loop break out of it go to end of loop leaving break value on stack
WITHOUT_CLASSIFICATION	false zero
WITHOUT_CLASSIFICATION	load all arguments straight through
WITHOUT_CLASSIFICATION	and remaining jump exceptions should restore $!
WITHOUT_CLASSIFICATION	restore the original exception
WITHOUT_CLASSIFICATION	retry handling in the rescue blocks
WITHOUT_CLASSIFICATION	push false
WITHOUT_CLASSIFICATION	method.invokeinterface(p(irubyobject.class) "getinstancevariable" sig(irubyobject.class params(string.class)))
WITHOUT_CLASSIFICATION	method.ifnonnull(truelabel)
WITHOUT_CLASSIFICATION	eq == 0 (i.e. false) [c]
WITHOUT_CLASSIFICATION	[c c] [c c string] [c null|c]
WITHOUT_CLASSIFICATION	[c]
WITHOUT_CLASSIFICATION	push true
WITHOUT_CLASSIFICATION	eq != 0 (i.e. true)
WITHOUT_CLASSIFICATION	[? ?] [? boolean]
WITHOUT_CLASSIFICATION	[rubymodule] [rubymodule string]
WITHOUT_CLASSIFICATION	[boolean]
WITHOUT_CLASSIFICATION	no receiver for singleton class
WITHOUT_CLASSIFICATION	but there's a superclass passed in use it
WITHOUT_CLASSIFICATION	we re-set self to the class but store the old self in a temporary local variable this is to prevent it gcing in case the singleton is short-lived
WITHOUT_CLASSIFICATION	set self to the class
WITHOUT_CLASSIFICATION	class body
WITHOUT_CLASSIFICATION	static scope
WITHOUT_CLASSIFICATION	here starts the logic for the class definition
WITHOUT_CLASSIFICATION	new instance to invoke run against
WITHOUT_CLASSIFICATION	class body
WITHOUT_CLASSIFICATION	static scope
WITHOUT_CLASSIFICATION	here starts the logic for the class definition
WITHOUT_CLASSIFICATION	finally with exception
WITHOUT_CLASSIFICATION	prepare to call class definition method
WITHOUT_CLASSIFICATION	otherwise there's a receiver so we pass that in directly for the sclass logic
WITHOUT_CLASSIFICATION	original exception is on stack
WITHOUT_CLASSIFICATION	raiseexception is on stack get rubyexception out
WITHOUT_CLASSIFICATION	updating position for same line skip
WITHOUT_CLASSIFICATION	callbacks to fill in method body
WITHOUT_CLASSIFICATION	prepare to call "def" utility method to handle def logic
WITHOUT_CLASSIFICATION	script object
WITHOUT_CLASSIFICATION	arities
WITHOUT_CLASSIFICATION	todo assuming case is a fixnum
WITHOUT_CLASSIFICATION	we have an input case prepare branching logic
WITHOUT_CLASSIFICATION	we have optimized switch cases build a lookupswitch
WITHOUT_CLASSIFICATION	checkcast the value if match fast path otherwise proceed to slow logic
WITHOUT_CLASSIFICATION	expression-based tests + bodies
WITHOUT_CLASSIFICATION	normal case create a new label
WITHOUT_CLASSIFICATION	last conditional case use defaultcase
WITHOUT_CLASSIFICATION	do nothing arity check is done before call
WITHOUT_CLASSIFICATION	just confirm minimum args provided
WITHOUT_CLASSIFICATION	just confirm args length == required
WITHOUT_CLASSIFICATION	extract item from array
WITHOUT_CLASSIFICATION	index for the item
WITHOUT_CLASSIFICATION	index for the item
WITHOUT_CLASSIFICATION	prepare labels for opt logic
WITHOUT_CLASSIFICATION	prepare labels for opt logic
WITHOUT_CLASSIFICATION	next iterate over all optional args until no more arguments
WITHOUT_CLASSIFICATION	next iterate over all optional args until no more arguments
WITHOUT_CLASSIFICATION	now logic for each optional value
WITHOUT_CLASSIFICATION	otherwise no items left available use the code for default
WITHOUT_CLASSIFICATION	pop extra failed value from first cycle and we're done
WITHOUT_CLASSIFICATION	if there's args left and we want them assign to rest arg
WITHOUT_CLASSIFICATION	assign remaining elements as an array for rest args (or empty array)
WITHOUT_CLASSIFICATION	block argument assignment if there's a block arg
WITHOUT_CLASSIFICATION	first iterate over all pre args
WITHOUT_CLASSIFICATION	then optional args
WITHOUT_CLASSIFICATION	grab nil for local variables
WITHOUT_CLASSIFICATION	now logic for each optional value
WITHOUT_CLASSIFICATION	otherwise no items left available use the code for default
WITHOUT_CLASSIFICATION	pop extra failed value from first cycle and we're done
WITHOUT_CLASSIFICATION	assign remaining elements as an array for rest args (or empty array)
WITHOUT_CLASSIFICATION	block argument assignment if there's a block arg
WITHOUT_CLASSIFICATION	if rest args excluding post args
WITHOUT_CLASSIFICATION	finally post args
WITHOUT_CLASSIFICATION	not an expression don't want result pop it
WITHOUT_CLASSIFICATION	not an expression don't want result pop it
WITHOUT_CLASSIFICATION	unwrap scopes to appropriate depth
WITHOUT_CLASSIFICATION	fill in all vars with nil so compiler is happy about future accesses
WITHOUT_CLASSIFICATION	chain to the next segment of this giant method
WITHOUT_CLASSIFICATION	temp locals must start after last real local
WITHOUT_CLASSIFICATION	temp locals must start after last real local
WITHOUT_CLASSIFICATION	declare locals for java debugging purposes
WITHOUT_CLASSIFICATION	class bodies prepare their own dynamic scope so let it do that
WITHOUT_CLASSIFICATION	store the local vars in a local variable
WITHOUT_CLASSIFICATION	load args[0] which will be the irubyobject representing block args
WITHOUT_CLASSIFICATION	return in a class body raises error
WITHOUT_CLASSIFICATION	visit a label to start scoping for local vars in this method
WITHOUT_CLASSIFICATION	return last value from execution
WITHOUT_CLASSIFICATION	end of variable scope
WITHOUT_CLASSIFICATION	method is done declare all variables
WITHOUT_CLASSIFICATION	load block from [] version of method
WITHOUT_CLASSIFICATION	normal return for method body. return jump for within a begin/rescue/ensure
WITHOUT_CLASSIFICATION	declare locals for java debugging purposes
WITHOUT_CLASSIFICATION	class bodies prepare their own dynamic scope so let it do that
WITHOUT_CLASSIFICATION	load args[0] which will be the irubyobject representing block args
WITHOUT_CLASSIFICATION	we force argparamcount to 1 since we always know we'll have [] args
WITHOUT_CLASSIFICATION	chain to the next segment of this giant method
WITHOUT_CLASSIFICATION	chain to the next segment of this giant method
WITHOUT_CLASSIFICATION	load all arguments straight through
WITHOUT_CLASSIFICATION	load all arguments straight through
WITHOUT_CLASSIFICATION	we append an index to ensure two identical method names will not conflict
WITHOUT_CLASSIFICATION	we append an index to ensure two identical method names will not conflict
WITHOUT_CLASSIFICATION	store the local vars in a local variable if there are any
WITHOUT_CLASSIFICATION	if more than 4 locals get and populate the locals array too
WITHOUT_CLASSIFICATION	fill local vars with nil to avoid checking every access.
WITHOUT_CLASSIFICATION	default for starting tempvariableindex is ok
WITHOUT_CLASSIFICATION	store the local vars in a local variable for preparing the class (using previous scope)
WITHOUT_CLASSIFICATION	store the new local vars in a local variable
WITHOUT_CLASSIFICATION	in 1.8 mode this will be a rubyarray containing the arguments in 1.9 mode this will be an irubyobject[]
WITHOUT_CLASSIFICATION	no variable initialization because we're reusing parent's scope (flat)
WITHOUT_CLASSIFICATION	for specific-index cases clean up non-expression values
WITHOUT_CLASSIFICATION	set up a local ruby variable
WITHOUT_CLASSIFICATION	if that succeeds the others should as well
WITHOUT_CLASSIFICATION	verify the class
WITHOUT_CLASSIFICATION	create dir if necessary
WITHOUT_CLASSIFICATION	create the class with the appropriate class name and source file
WITHOUT_CLASSIFICATION	add setposition impl which stores filename as constant to speed updates
WITHOUT_CLASSIFICATION	thread context
WITHOUT_CLASSIFICATION	line number
WITHOUT_CLASSIFICATION	invoke __file__ with threadcontext self args (null) and block (null)
WITHOUT_CLASSIFICATION	load always uses irubyobject[] so simple closure offset calculation here
WITHOUT_CLASSIFICATION	return last value from execution
WITHOUT_CLASSIFICATION	method is done declare all variables
WITHOUT_CLASSIFICATION	in method body with no containing loop issue jump error load runtime and value issue jump error
WITHOUT_CLASSIFICATION	block
WITHOUT_CLASSIFICATION	block
WITHOUT_CLASSIFICATION	we force argparamcount to 1 since we always know we'll have [] args
WITHOUT_CLASSIFICATION	chain to the next segment of this giant method
WITHOUT_CLASSIFICATION	load all arguments straight through
WITHOUT_CLASSIFICATION	we append an index to ensure two identical method names will not conflict
WITHOUT_CLASSIFICATION	add script#run impl used for running this script with a specified threadcontext and self root method of a script is always in __file__ method
WITHOUT_CLASSIFICATION	add main impl used for detached or command-line execution of this script with a new runtime root method of a script is always in stub0 method0
WITHOUT_CLASSIFICATION	construct static scope list of names
WITHOUT_CLASSIFICATION	jruby-3014 make __file__ dynamically determined at load time but we provide a reasonable default here
WITHOUT_CLASSIFICATION	ignore we won't use invokedynamic
WITHOUT_CLASSIFICATION	ignore we won't use invokedynamic
WITHOUT_CLASSIFICATION	lazily create class init only if necessary
WITHOUT_CLASSIFICATION	boxed arg list __file__
WITHOUT_CLASSIFICATION	invoke static __file__
WITHOUT_CLASSIFICATION	exact arg list __file__
WITHOUT_CLASSIFICATION	declare the field
WITHOUT_CLASSIFICATION	declare the field
WITHOUT_CLASSIFICATION	not using a new scope use saved one for a flat closure
WITHOUT_CLASSIFICATION	normal closure
WITHOUT_CLASSIFICATION	end of scoping for closure's vars
WITHOUT_CLASSIFICATION	we only need full-on redo exception handling if there's logic that might produce it
WITHOUT_CLASSIFICATION	handle redos by restarting the block
WITHOUT_CLASSIFICATION	jump back to the top of the main body of this closure
WITHOUT_CLASSIFICATION	ruby name
WITHOUT_CLASSIFICATION	accumulate call arguments
WITHOUT_CLASSIFICATION	fix filenamecompletor to work mid-line
WITHOUT_CLASSIFICATION	we need to ensure that the variable names generated here cannot conflict with ruby variable names! hence the "%" tthat is appended to the beginning!
WITHOUT_CLASSIFICATION	does this method define code? default is yes -- which basically leads to pessimistic but safe optimizations but for library and internal methods this might be false.
WITHOUT_CLASSIFICATION	map of constants defined in this scope (not valid for methods!)
WITHOUT_CLASSIFICATION	note since we are processing asts loop bodies are processed in depth-first manner with outer loops encountered before inner loops and inner loops finished before outer ones. so we can keep track of loops in a loop stack which keeps track of loops as they are encountered. this lets us implement next/redo/break/retry easily for the non-closure cases
WITHOUT_CLASSIFICATION	map keep track of the next available variable index for a particular prefix
WITHOUT_CLASSIFICATION	control flow graph for this scope
WITHOUT_CLASSIFICATION	_lexicalnestinglevel = lexicalparent == null ? 0 ((ir_scopeimpl)lexicalparent)._lexicalnestinglevel + 1
WITHOUT_CLASSIFICATION	list of modules classes and methods defined in this scope!
WITHOUT_CLASSIFICATION	returns the containing parent scope!
WITHOUT_CLASSIFICATION	insert nesting level to ensure variable names don't conflict across nested scopes! i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! return new variable(prefix + _lexicalnestinglevel + "_" + idx)
WITHOUT_CLASSIFICATION	get "self"
WITHOUT_CLASSIFICATION	variable is never read variable is never live
WITHOUT_CLASSIFICATION	inline script
WITHOUT_CLASSIFICATION	inline script
WITHOUT_CLASSIFICATION	this method is called to build assignments for a multiple-assignment instruction
WITHOUT_CLASSIFICATION	build the class body!
WITHOUT_CLASSIFICATION	unwrap newline nodes to get their actual type
WITHOUT_CLASSIFICATION	unwrap newline nodes to get their actual type
WITHOUT_CLASSIFICATION	sss fixme can this ever be null?
WITHOUT_CLASSIFICATION	run the pass on the passed in scope!
WITHOUT_CLASSIFICATION	done done done done
WITHOUT_CLASSIFICATION	note if 's' happens to the a class this is effectively an assignment of a class instance variable
WITHOUT_CLASSIFICATION	note if 's' happens to the a class this is effectively an assignment of a class instance variable
WITHOUT_CLASSIFICATION	this method is called to build arguments for a block!
WITHOUT_CLASSIFICATION	build first node (and ignore its result) and then second node
WITHOUT_CLASSIFICATION	build first node only and return false
WITHOUT_CLASSIFICATION	value of the last expression in the block
WITHOUT_CLASSIFICATION	if this is not a closure the break is equivalent to jumping to the loop end label
WITHOUT_CLASSIFICATION	get the incoming case value
WITHOUT_CLASSIFICATION	the case instruction
WITHOUT_CLASSIFICATION	lists to aggregate variables and bodies for whens
WITHOUT_CLASSIFICATION	build each "when"
WITHOUT_CLASSIFICATION	multiple conditions for when
WITHOUT_CLASSIFICATION	build "else" if it exists
WITHOUT_CLASSIFICATION	now emit bodies
WITHOUT_CLASSIFICATION	close it out
WITHOUT_CLASSIFICATION	by default the container for this class is 's'
WITHOUT_CLASSIFICATION	do we have a dynamic container?
WITHOUT_CLASSIFICATION	return a meta object corresponding to the class
WITHOUT_CLASSIFICATION	1. load the module first (lhs of node) 2. then load the constant from the module
WITHOUT_CLASSIFICATION	build ir for args
WITHOUT_CLASSIFICATION	build ir for body
WITHOUT_CLASSIFICATION	if root of method is rescue build as a light rescue
WITHOUT_CLASSIFICATION	instance method
WITHOUT_CLASSIFICATION	class method
WITHOUT_CLASSIFICATION	other args begin at index 1
WITHOUT_CLASSIFICATION	both for fixed arity and variable arity methods
WITHOUT_CLASSIFICATION	now for the rest
WITHOUT_CLASSIFICATION	jump to 'l' if this arg is not null. if null fall through and build the default value!
WITHOUT_CLASSIFICATION	this is not an expression that computes anything
WITHOUT_CLASSIFICATION	create a new closure context
WITHOUT_CLASSIFICATION	build args
WITHOUT_CLASSIFICATION	build closure body and return the result of the closure
WITHOUT_CLASSIFICATION	assign the closure to the block variable in the parent scope and return it
WITHOUT_CLASSIFICATION	by default the container for this class is 's'
WITHOUT_CLASSIFICATION	create a new closure context
WITHOUT_CLASSIFICATION	build args
WITHOUT_CLASSIFICATION	assign the closure to the block variable in the parent scope and return it
WITHOUT_CLASSIFICATION	get the container for this new module
WITHOUT_CLASSIFICATION	build the new module
WITHOUT_CLASSIFICATION	build the module body
WITHOUT_CLASSIFICATION	first build an assignment for a splat if any with the rest of the args!
WITHOUT_CLASSIFICATION	rest of the argument array!
WITHOUT_CLASSIFICATION	if a closure the next is simply a return from the closure! if a regular loop the next is simply a jump to the end of the iteration
WITHOUT_CLASSIFICATION	get attr
WITHOUT_CLASSIFICATION	call operator
WITHOUT_CLASSIFICATION	set attr
WITHOUT_CLASSIFICATION	translate "x &&= y" --> "x = (is_true(x) ? y false)" --> x = -- build(x) should return a variable! -- f = is_true(x) beq(f false l) x = -- build(y) -- l
WITHOUT_CLASSIFICATION	this does the assignment!
WITHOUT_CLASSIFICATION	this does the assignment!
WITHOUT_CLASSIFICATION	if v1 is defined and true we are done!
WITHOUT_CLASSIFICATION	build first node only and return true
WITHOUT_CLASSIFICATION	build first node as non-expr and build second node
WITHOUT_CLASSIFICATION	top-level script!
WITHOUT_CLASSIFICATION	we won't enter the loop -- just build the condition node
WITHOUT_CLASSIFICATION	----------- private interface ------------
WITHOUT_CLASSIFICATION	what handles warnings
WITHOUT_CLASSIFICATION	tries to load at compile-time the constant referred to by 'constref'. this might be possible if the constant is defined and is not a forward reference to a value that will be defined later in the class.
WITHOUT_CLASSIFICATION	for closures a redo is a jump to the beginning of the closure for non-closures a redo is a jump to the beginning of the loop
WITHOUT_CLASSIFICATION	the "root" method of a class -- the scope in which all definitions and class code executes equivalent to java clinit
WITHOUT_CLASSIFICATION	dummy top-level method for the class
WITHOUT_CLASSIFICATION	build a dummy static method for the class -- the scope in which all definitions and class code executes equivalent to java clinit
WITHOUT_CLASSIFICATION	------ define the operations below ----
WITHOUT_CLASSIFICATION	value copy and type conversion operations
WITHOUT_CLASSIFICATION	alu operations
WITHOUT_CLASSIFICATION	method handle arg receive return value and call instructions
WITHOUT_CLASSIFICATION	closure instructions
WITHOUT_CLASSIFICATION	eval instructions
WITHOUT_CLASSIFICATION	def instructions
WITHOUT_CLASSIFICATION	exception instructions
WITHOUT_CLASSIFICATION	loads
WITHOUT_CLASSIFICATION	stores
WITHOUT_CLASSIFICATION	jump and branch operations
WITHOUT_CLASSIFICATION	others
WITHOUT_CLASSIFICATION	a case/when branch
WITHOUT_CLASSIFICATION	optimization guards
WITHOUT_CLASSIFICATION	by default call instructions cannot be deleted even if their results aren't used by anyone unless we know more about what the call is what it does etc. similarly for evals stores returns.
WITHOUT_CLASSIFICATION	returns the containing parent scope -- can be a dynamic value (hence operand)!
WITHOUT_CLASSIFICATION	scripts
WITHOUT_CLASSIFICATION	scripts and modules
WITHOUT_CLASSIFICATION	scripts classes and modules
WITHOUT_CLASSIFICATION	methods and closures
WITHOUT_CLASSIFICATION	create a new variable using the prefix
WITHOUT_CLASSIFICATION	create a new temporary variable
WITHOUT_CLASSIFICATION	get a new label using a generic prefix
WITHOUT_CLASSIFICATION	build the cfg for this scope -- supported only by methods & closures
WITHOUT_CLASSIFICATION	get the control flow graph for this scope -- only valid for methods & closures
WITHOUT_CLASSIFICATION	while processing loops this returns the loop that we are processing.
WITHOUT_CLASSIFICATION	record the loop we are beginning to process
WITHOUT_CLASSIFICATION	indicate that we are done processing the loop
WITHOUT_CLASSIFICATION	run the passed in compiler pass on this scope!
WITHOUT_CLASSIFICATION	should we run this pass on the current scope before running it on nested scopes?
WITHOUT_CLASSIFICATION	readline
WITHOUT_CLASSIFICATION	if the cfg of the method is around print the cfg!
WITHOUT_CLASSIFICATION	optimize some core class method calls for constant values
WITHOUT_CLASSIFICATION	if 'r' is not a constant it could actually be a compound value! look in our value map to see if we have a simplified value for the receiver.
WITHOUT_CLASSIFICATION	check if we can optimize this call based on the receiving method and receiver type use the simplified receiver!
WITHOUT_CLASSIFICATION	if we got a simplified value mark the call dead and insert a copy in its place!
WITHOUT_CLASSIFICATION	if the call has been optimized away in the previous step it is no longer a hard boundary for opts!
WITHOUT_CLASSIFICATION	----------- public abstract methods ----------
WITHOUT_CLASSIFICATION	----------- public methods with a default implementation ----------
WITHOUT_CLASSIFICATION	compute meet over all "sources" and compute "destination" basic blocks that should then be processed. sources & targets depends on direction of the data flow problem
WITHOUT_CLASSIFICATION	if the solution has changed add "dsts" to the work list. no duplicates please which is why we have bbset.
WITHOUT_CLASSIFICATION	--------- protected fields/methods below ---------
WITHOUT_CLASSIFICATION	dataflow problem with which this node is associated cfg node for which this node contains info.
WITHOUT_CLASSIFICATION	-------------- public fields and methods below ----------------
WITHOUT_CLASSIFICATION	------- abstract methods without a default implementation -------
WITHOUT_CLASSIFICATION	------- default implementation methods below -------
WITHOUT_CLASSIFICATION	compute meet over all paths solution for this dataflow problem on the input cfg. this implements a standard worklist algorithm.
WITHOUT_CLASSIFICATION	individual analyses should override this
WITHOUT_CLASSIFICATION	individual analyses should override this
WITHOUT_CLASSIFICATION	-------------- packaged/protected fields and methods below ----------------
WITHOUT_CLASSIFICATION	we want unique ids for dataflow variables
WITHOUT_CLASSIFICATION	-------------- protected fields and methods below ----------------
WITHOUT_CLASSIFICATION	-------------- private fields and methods below ----------------
WITHOUT_CLASSIFICATION	initialize all flow graph nodes
WITHOUT_CLASSIFICATION	lattice top bottom any values -- these will be used during dataflow analyses
WITHOUT_CLASSIFICATION	public interface
WITHOUT_CLASSIFICATION	unique id assigned to this variable
WITHOUT_CLASSIFICATION	start out with a default rubyobject allocator
WITHOUT_CLASSIFICATION	switch to an allocator based on a default constructor
WITHOUT_CLASSIFICATION	----------- public interface ------------
WITHOUT_CLASSIFICATION	class or module
WITHOUT_CLASSIFICATION	out = union(in(succs))
WITHOUT_CLASSIFICATION	traverse the instructions in this basic block in reverse order!
WITHOUT_CLASSIFICATION	v is defined => it is no longer live before 'i'
WITHOUT_CLASSIFICATION	in is the same!
WITHOUT_CLASSIFICATION	in changed!
WITHOUT_CLASSIFICATION	---------- protected / package fields methods ---------
WITHOUT_CLASSIFICATION	if 'v' is not live at the instruction site and it has no side effects mark it dead!
WITHOUT_CLASSIFICATION	do not mark this instruction's operands live if the instruction itself is dead!
WITHOUT_CLASSIFICATION	---------- private fields methods ---------
WITHOUT_CLASSIFICATION	variables live at entry of this node variables live at exit of node temporary set of live variables size of the "_in" and "_out" bit sets
WITHOUT_CLASSIFICATION	used during optimization passes to propagate type and other information
WITHOUT_CLASSIFICATION	does this instruction have side effects as a result of its operation this information is used in optimization phases to impact dead code elimination and other optimization passes
WITHOUT_CLASSIFICATION	--------- "abstract"/"please-override" methods ---------
WITHOUT_CLASSIFICATION	array of all operands for this instruction
WITHOUT_CLASSIFICATION	list of all variables used by all operands of this instruction
WITHOUT_CLASSIFICATION	this method takes as input a map of operands to their values and outputs if the value map provides a value for any of the instruction's operands this method is expected to replace the original operands with the simplified values. it is not required that it do so -- code correctness is not compromised by failure to simplify
WITHOUT_CLASSIFICATION	by default no simplifications!
WITHOUT_CLASSIFICATION	can this call lead to ruby code getting modified? if we don't know what method we are calling we assume it can (pessimistic but safe!) if we do know the target method we ask the method itself whether it modifies ruby code
WITHOUT_CLASSIFICATION	by default return instructions cannot be deleted
WITHOUT_CLASSIFICATION	if true returns the rest of the array starting at the index
WITHOUT_CLASSIFICATION	---------- these methods below are used during compile-time optimizations -------
WITHOUT_CLASSIFICATION	map of label & basic blocks with that label
WITHOUT_CLASSIFICATION	---------- these methods below are used during compile-time optimizations -------
WITHOUT_CLASSIFICATION	you can only value-replace atomic values
WITHOUT_CLASSIFICATION	if divisor is zero don't simplify!
WITHOUT_CLASSIFICATION	if divisor is zero don't simplify!
WITHOUT_CLASSIFICATION	if divisor is zero don't simplify!
WITHOUT_CLASSIFICATION	for simplification get the target value even if compound
WITHOUT_CLASSIFICATION	for simplification get the target value even if compound
WITHOUT_CLASSIFICATION	the operand that this attribute targets deferred attributevalue _val attribute value
WITHOUT_CLASSIFICATION	arrays ranges etc. are compound values variables fixnums floats etc. are "atomic" values
WITHOUT_CLASSIFICATION	get the target class of this operand if we know it!
WITHOUT_CLASSIFICATION	the following constants capture pre-known static call sites -- used to implement ruby internals
WITHOUT_CLASSIFICATION	nothing to do by default
WITHOUT_CLASSIFICATION	map of label & basic blocks which are waiting for a bb with that label
WITHOUT_CLASSIFICATION	init before building basic blocks below!
WITHOUT_CLASSIFICATION	ignore
WITHOUT_CLASSIFICATION	scope (method/closure) to which this cfg belongs entry bb -- dummy exit bb -- dummy the actual graph next available basic block id
WITHOUT_CLASSIFICATION	jump instruction bbs dont add an edge to the succeeding bb by default
WITHOUT_CLASSIFICATION	add forward ref. edges
WITHOUT_CLASSIFICATION	currbb cannot be null!
WITHOUT_CLASSIFICATION	add a forward reference from tgt -> currbb
WITHOUT_CLASSIFICATION	root-level logic
WITHOUT_CLASSIFICATION	root-level methods
WITHOUT_CLASSIFICATION	root-level classes
WITHOUT_CLASSIFICATION	case 4 signature = sig(object.class object.class object.class object.class object.class) break case 5 signature = sig(object.class object.class object.class object.class object.class object.class) break
WITHOUT_CLASSIFICATION	load receiver
WITHOUT_CLASSIFICATION	load receiver
WITHOUT_CLASSIFICATION	receiver
WITHOUT_CLASSIFICATION	load arguments
WITHOUT_CLASSIFICATION	load arguments
WITHOUT_CLASSIFICATION	case 4 case 5
WITHOUT_CLASSIFICATION	object[] args
WITHOUT_CLASSIFICATION	load handle
WITHOUT_CLASSIFICATION	args array
WITHOUT_CLASSIFICATION	i'th argument
WITHOUT_CLASSIFICATION	invoke specific arity version
WITHOUT_CLASSIFICATION	object arg0
WITHOUT_CLASSIFICATION	useful for code completion inside the irb
WITHOUT_CLASSIFICATION	no editing before startpos
WITHOUT_CLASSIFICATION	no silly ticks!
WITHOUT_CLASSIFICATION	no candidates? fail.
WITHOUT_CLASSIFICATION	at end
WITHOUT_CLASSIFICATION	undo check
WITHOUT_CLASSIFICATION	explicit reference to these vars as symbols
WITHOUT_CLASSIFICATION	ignore
WITHOUT_CLASSIFICATION	\t\n\"\\'`@$><=|&{(
WITHOUT_CLASSIFICATION	assign the values.
WITHOUT_CLASSIFICATION	no check for ''
WITHOUT_CLASSIFICATION	no check for ''
WITHOUT_CLASSIFICATION	binding provided for scope use it
WITHOUT_CLASSIFICATION	this is ensured by the callers
WITHOUT_CLASSIFICATION	no binding just eval in "current" frame (caller's frame)
WITHOUT_CLASSIFICATION	restore position
WITHOUT_CLASSIFICATION	something like cvar_cbase() from eval.c factored out for the benefit of all the classvar-related node evaluations
WITHOUT_CLASSIFICATION	used by the compiler to simplify arg processing
WITHOUT_CLASSIFICATION	jruby-2673 if wrapping a nativeexception use the actual java exception's trace as our java trace
WITHOUT_CLASSIFICATION	mri does similar thing on macos x with 'editline wrapper'.
WITHOUT_CLASSIFICATION	we lazily initialize this in case readline.readline has been overridden in ruby (s_readline)
WITHOUT_CLASSIFICATION	jruby-852 ignore escape key (it causes irb to quit if we pass it out through readline)
WITHOUT_CLASSIFICATION	not overridden let's go
WITHOUT_CLASSIFICATION	explicitly use utf-8 here. c.f. history.addtohistory using line.asutf8()
WITHOUT_CLASSIFICATION	fixme jruby-3604
WITHOUT_CLASSIFICATION	complete using a proc object
WITHOUT_CLASSIFICATION	clear basename so it's anonymous when raising
WITHOUT_CLASSIFICATION	these are not really used by timeout but exposed for compatibility
WITHOUT_CLASSIFICATION	timeout module methods
WITHOUT_CLASSIFICATION	toplevel defines
WITHOUT_CLASSIFICATION	no seconds just yield
WITHOUT_CLASSIFICATION	no timeout in critical section
WITHOUT_CLASSIFICATION	if it's the exception we're expecting
WITHOUT_CLASSIFICATION	and we were given a specific exception
WITHOUT_CLASSIFICATION	otherwise rethrow
WITHOUT_CLASSIFICATION	remove the executor task now to avoid cancelled tasks accumulating until an executor thread can schedule and remove them
WITHOUT_CLASSIFICATION	if the task was scheduled wait for it to finish before polling for the exception it would have thrown.
WITHOUT_CLASSIFICATION	netprotocolbufferedio
WITHOUT_CLASSIFICATION	when a length is given read_string acts like get_bytes
WITHOUT_CLASSIFICATION	replace memory object with one that throws an exception on any access
WITHOUT_CLASSIFICATION	array and struct are only used internally
WITHOUT_CLASSIFICATION	if no release method is defined then memory leaks will result.
WITHOUT_CLASSIFICATION	this variant of newstruct is called from structlayoutbuilder
WITHOUT_CLASSIFICATION	this also handles unsigned int -> negative signed int conversion
WITHOUT_CLASSIFICATION	windows is llp64
WITHOUT_CLASSIFICATION	older jdk on linux map 'c' to 'libc.so' which doesn't work
WITHOUT_CLASSIFICATION	ensure room for terminating zero byte
WITHOUT_CLASSIFICATION	$blah
WITHOUT_CLASSIFICATION	replace memory object with one that throws an exception on any access
WITHOUT_CLASSIFICATION	a specific version was requested - use as is for search
WITHOUT_CLASSIFICATION	ensure room for terminating zero byte
WITHOUT_CLASSIFICATION	keep a reference to the temporary memory in the cache so it does not get freed by the gc until the struct is freed
WITHOUT_CLASSIFICATION	add pointernull as a constant
WITHOUT_CLASSIFICATION	create the ordered list of field names from the map
WITHOUT_CLASSIFICATION	assemble a [ name offset ] array
WITHOUT_CLASSIFICATION	case float
WITHOUT_CLASSIFICATION	keep a reference to avoid the memory being freed
WITHOUT_CLASSIFICATION	keep a reference to avoid the memory being freed
WITHOUT_CLASSIFICATION	no auto cleanup needed
WITHOUT_CLASSIFICATION	wire up function#call(args) to use the super-fast native invokers
WITHOUT_CLASSIFICATION	get the convention from the options hash
WITHOUT_CLASSIFICATION	get the convention from the options hash
WITHOUT_CLASSIFICATION	if there is exactly _one_ callback argument to the function then a block can be given and automatically subsituted for the callback parameter.
WITHOUT_CLASSIFICATION	------------------------------------------------------------------------
WITHOUT_CLASSIFICATION	af_inet
WITHOUT_CLASSIFICATION	af_inet
WITHOUT_CLASSIFICATION	rubyunixserver
WITHOUT_CLASSIFICATION	line 321
WITHOUT_CLASSIFICATION	set up for potentially fast-int operations
WITHOUT_CLASSIFICATION	hook up the memorypointer class if its not already there
WITHOUT_CLASSIFICATION	this is a bit convoluted because (1) socketchannel.bind is only in jdk 7 and (2) socket.getchannel() seems to return null in some cases
WITHOUT_CLASSIFICATION	no unixsockets on windows
WITHOUT_CLASSIFICATION	sockaddr_un has different structure on different platforms. see jruby-2213 for more details.
WITHOUT_CLASSIFICATION	there is something valid in the sun_path component
WITHOUT_CLASSIFICATION	rubyipsocket
WITHOUT_CLASSIFICATION	host is nil or the empty string bind to inaddr_any
WITHOUT_CLASSIFICATION	host and port given
WITHOUT_CLASSIFICATION	rubyudpsocket
WITHOUT_CLASSIFICATION	by default we always reverse lookup unless do_not_reverse_lookup set.
WITHOUT_CLASSIFICATION	make sure descriptor is registered
WITHOUT_CLASSIFICATION	continue with normal initialization
WITHOUT_CLASSIFICATION	recv returns nil on eof
WITHOUT_CLASSIFICATION	can't support the rest with java
WITHOUT_CLASSIFICATION	rubybasicsocket
WITHOUT_CLASSIFICATION	we don't have to define any that we don't support see socket.c
WITHOUT_CLASSIFICATION	mandatory constants we haven't implemented
WITHOUT_CLASSIFICATION	constants webrick crashes without
WITHOUT_CLASSIFICATION	more constants needed by specs
WITHOUT_CLASSIFICATION	normal file descriptor..try to work with it
WITHOUT_CLASSIFICATION	af_inet
WITHOUT_CLASSIFICATION	255.255.255.255
WITHOUT_CLASSIFICATION	0.0.0.0
WITHOUT_CLASSIFICATION	def self.getaddrinfo(host port family = nil socktype = nil protocol = nil flags = nil)
WITHOUT_CLASSIFICATION	line 323
WITHOUT_CLASSIFICATION	can't set tc classloader
WITHOUT_CLASSIFICATION	can't set tc classloader
WITHOUT_CLASSIFICATION	ok it's a socketset values accordingly just using af_inet since we can't tell from socketchannel
WITHOUT_CLASSIFICATION	datagram set accordingly again af_inet
WITHOUT_CLASSIFICATION	irubyobject family = args[2]
WITHOUT_CLASSIFICATION	when socketai_passive and host is nil return 'any' address.
WITHOUT_CLASSIFICATION	the value of 1 is for socketai_passive.
WITHOUT_CLASSIFICATION	rubysocket
WITHOUT_CLASSIFICATION	numeric host use it for port
WITHOUT_CLASSIFICATION	e.printstacktrace()
WITHOUT_CLASSIFICATION	we were woken up without being selectedpoll for thread events and go back to sleep
WITHOUT_CLASSIFICATION	otherwise one key has been selected (ours) so we get the channel and hand it off
WITHOUT_CLASSIFICATION	no connection immediately accepted let them try again
WITHOUT_CLASSIFICATION	do nothing just exit
WITHOUT_CLASSIFICATION	nativethread.setpriority(priority)
WITHOUT_CLASSIFICATION	set thread context jruby classloader here for ruby-owned thread
WITHOUT_CLASSIFICATION	uber-threadkill catcher since it should always just mean "be dead"
WITHOUT_CLASSIFICATION	call the thread's code
WITHOUT_CLASSIFICATION	someone called exit! so we need to kill the main thread
WITHOUT_CLASSIFICATION	restore context classloader in case we're using a thread pool
WITHOUT_CLASSIFICATION	be dead
WITHOUT_CLASSIFICATION	loop until a context is available to clean up softrefs that might have been collected
WITHOUT_CLASSIFICATION	all threads in ruby thread group plus main thread
WITHOUT_CLASSIFICATION	thread is not alive skip it
WITHOUT_CLASSIFICATION	future is done or cancelled skip it
WITHOUT_CLASSIFICATION	first check if the sender has unreceived mail
WITHOUT_CLASSIFICATION	then deliver mail to the target
WITHOUT_CLASSIFICATION	undefinedmethod should be immutable
WITHOUT_CLASSIFICATION	define a second version that doesn't take a block so we have unique code paths for both cases.
WITHOUT_CLASSIFICATION	invoke pre method stuff
WITHOUT_CLASSIFICATION	main body
WITHOUT_CLASSIFICATION	return jump handling
WITHOUT_CLASSIFICATION	finally
WITHOUT_CLASSIFICATION	return result if we're still good
WITHOUT_CLASSIFICATION	redo jump handling
WITHOUT_CLASSIFICATION	clear the redo
WITHOUT_CLASSIFICATION	get runtime create jump error and throw it
WITHOUT_CLASSIFICATION	throw redo error if we're still good
WITHOUT_CLASSIFICATION	finally handling for abnormal exit
WITHOUT_CLASSIFICATION	call post method stuff (exception raised)
WITHOUT_CLASSIFICATION	no required specified check actual number of required args
WITHOUT_CLASSIFICATION	actual required is less than 3 so we use specific arity
WITHOUT_CLASSIFICATION	actual required is greater than 3 raise error (we don't support actual required > 3)
WITHOUT_CLASSIFICATION	simple path no multimethod
WITHOUT_CLASSIFICATION	in debug mode we append _dbg to class name to force it to regenerate (or use pre-generated debug version)
WITHOUT_CLASSIFICATION	in debug mode we append _dbg to class name to force it to regenerate (or use pre-generated debug version)
WITHOUT_CLASSIFICATION	normal all-rest method
WITHOUT_CLASSIFICATION	for zero one two three arities javamethod.javamethod.call(irubyobject[] args) will check
WITHOUT_CLASSIFICATION	promise to implement zero to n
WITHOUT_CLASSIFICATION	return
WITHOUT_CLASSIFICATION	just confirm minimum args provided
WITHOUT_CLASSIFICATION	just confirm args length == required
WITHOUT_CLASSIFICATION	confirm minimum args provided
WITHOUT_CLASSIFICATION	confirm maximum not greater than optional
WITHOUT_CLASSIFICATION	raise an error if arity does not match requirements
WITHOUT_CLASSIFICATION	tc
WITHOUT_CLASSIFICATION	self name
WITHOUT_CLASSIFICATION	no args
WITHOUT_CLASSIFICATION	variable args with block
WITHOUT_CLASSIFICATION	variable args no block load null block
WITHOUT_CLASSIFICATION	zero args no block load null_block
WITHOUT_CLASSIFICATION	one arg with block
WITHOUT_CLASSIFICATION	one arg no block load null_block
WITHOUT_CLASSIFICATION	two args with block
WITHOUT_CLASSIFICATION	two args no block load null_block
WITHOUT_CLASSIFICATION	three args with block
WITHOUT_CLASSIFICATION	three args no block load null_block
WITHOUT_CLASSIFICATION	load block if it accepts block
WITHOUT_CLASSIFICATION	all other arg cases with block
WITHOUT_CLASSIFICATION	all other arg cases without block
WITHOUT_CLASSIFICATION	one arg no block do nothing
WITHOUT_CLASSIFICATION	two args no block do nothing
WITHOUT_CLASSIFICATION	three args no block do nothing
WITHOUT_CLASSIFICATION	load target for invocations
WITHOUT_CLASSIFICATION	load receiver as original type for virtual invocation
WITHOUT_CLASSIFICATION	static invocation
WITHOUT_CLASSIFICATION	virtual invocation
WITHOUT_CLASSIFICATION	void return type so we need to load a nil for returning below
WITHOUT_CLASSIFICATION	normal finally and exit
WITHOUT_CLASSIFICATION	promise to implement one to n
WITHOUT_CLASSIFICATION	call post method stuff (exception raised)
WITHOUT_CLASSIFICATION	these are only needed if we have a non-noop call config
WITHOUT_CLASSIFICATION	method itself threadcontext invoked name
WITHOUT_CLASSIFICATION	method itself threadcontext invoked name
WITHOUT_CLASSIFICATION	singleton classes don't get their own visibility domain
WITHOUT_CLASSIFICATION	for visibility we need real meta class and not anonymous one from class << self
WITHOUT_CLASSIFICATION	simpleinvocationmethod
WITHOUT_CLASSIFICATION	never reached
WITHOUT_CLASSIFICATION	promise to implement n with block
WITHOUT_CLASSIFICATION	promise to implement zero to n with block
WITHOUT_CLASSIFICATION	promise to implement one to n with block
WITHOUT_CLASSIFICATION	promise to implement two to n with block
WITHOUT_CLASSIFICATION	promise to implement zero to three with block
WITHOUT_CLASSIFICATION	promise to implement one to three with block
WITHOUT_CLASSIFICATION	promise to implement two to three with block
WITHOUT_CLASSIFICATION	promise to implement three with block
WITHOUT_CLASSIFICATION	promise to implement n
WITHOUT_CLASSIFICATION	dumpinginvocationmethodfactory
WITHOUT_CLASSIFICATION	we promote our box to being its own box since we're changing visibilities and need it to be reflected on this method object independent of any other sharing the box.
WITHOUT_CLASSIFICATION	normally we could leave these to fall back on the superclass but since it dispatches through the [] version below which may dispatch through the []+block version we can save it a couple hops by overriding these here.
WITHOUT_CLASSIFICATION	promise to implement two to n
WITHOUT_CLASSIFICATION	promise to implement three to n
WITHOUT_CLASSIFICATION	promise to implement zero to three
WITHOUT_CLASSIFICATION	promise to implement one to three
WITHOUT_CLASSIFICATION	promise to implement two to three
WITHOUT_CLASSIFICATION	promise to implement three
WITHOUT_CLASSIFICATION	all other arities use "n" dispatch path
WITHOUT_CLASSIFICATION	load up object and add a few useful methods
WITHOUT_CLASSIFICATION	open up the 'to_java' and 'as' coercion methods on ruby objects via kernel
WITHOUT_CLASSIFICATION	construct the class implementing all supertypes
WITHOUT_CLASSIFICATION	fields needed for dispatch and such
WITHOUT_CLASSIFICATION	create constructor
WITHOUT_CLASSIFICATION	wrap self and store the wrapper
WITHOUT_CLASSIFICATION	end constructor
WITHOUT_CLASSIFICATION	start setup method
WITHOUT_CLASSIFICATION	set rubyclass
WITHOUT_CLASSIFICATION	set ruby
WITHOUT_CLASSIFICATION	all methods dispatch to the simple version by default which is method_missing normally
WITHOUT_CLASSIFICATION	try specific name first falling back on simple name
WITHOUT_CLASSIFICATION	get current context
WITHOUT_CLASSIFICATION	load self class and name
WITHOUT_CLASSIFICATION	construct the class implementing all supertypes
WITHOUT_CLASSIFICATION	fields needed for dispatch and such
WITHOUT_CLASSIFICATION	create constructor
WITHOUT_CLASSIFICATION	end constructor
WITHOUT_CLASSIFICATION	for each simple method name implement the complex methods calling the simple version
WITHOUT_CLASSIFICATION	load arguments into irubyobject[] for dispatch
WITHOUT_CLASSIFICATION	convert to irubyobject
WITHOUT_CLASSIFICATION	load null block
WITHOUT_CLASSIFICATION	invoke method
WITHOUT_CLASSIFICATION	if we expect a return value unwrap it
WITHOUT_CLASSIFICATION	end setup method
WITHOUT_CLASSIFICATION	end class
WITHOUT_CLASSIFICATION	create static init for a monitor object
WITHOUT_CLASSIFICATION	store the wrapper
WITHOUT_CLASSIFICATION	prepare temp locals
WITHOUT_CLASSIFICATION	try to look up field for simple name get field if nonnull go straight to dispatch
WITHOUT_CLASSIFICATION	field is null lock class and try to populate
WITHOUT_CLASSIFICATION	try/finally block to ensure unlock
WITHOUT_CLASSIFICATION	store it
WITHOUT_CLASSIFICATION	end of try block
WITHOUT_CLASSIFICATION	finally block to release monitor
WITHOUT_CLASSIFICATION	exception handling for monitor release
WITHOUT_CLASSIFICATION	re-get re-check method if not null now go to dispatch
WITHOUT_CLASSIFICATION	load self class and name
WITHOUT_CLASSIFICATION	load arguments into irubyobject[] for dispatch
WITHOUT_CLASSIFICATION	convert to irubyobject
WITHOUT_CLASSIFICATION	invoke method
WITHOUT_CLASSIFICATION	if we expect a return value unwrap it
WITHOUT_CLASSIFICATION	end setup method
WITHOUT_CLASSIFICATION	end class
WITHOUT_CLASSIFICATION	create the class
WITHOUT_CLASSIFICATION	method still not available call method_missing
WITHOUT_CLASSIFICATION	perform the dispatch
WITHOUT_CLASSIFICATION	try to load the specified name only if that fails try to define the class
WITHOUT_CLASSIFICATION	up two slots for long's two halves
WITHOUT_CLASSIFICATION	up two slots for long's two halves
WITHOUT_CLASSIFICATION	setup the class
WITHOUT_CLASSIFICATION	now create a method_added that can replace the dynamicmethod fields as they're redefined
WITHOUT_CLASSIFICATION	do nothing it's a non-impl method
WITHOUT_CLASSIFICATION	probably a primitive
WITHOUT_CLASSIFICATION	interfaces are handled as modules
WITHOUT_CLASSIFICATION	construct the mirror class and parent classes
WITHOUT_CLASSIFICATION	set the full name
WITHOUT_CLASSIFICATION	include all interfaces
WITHOUT_CLASSIFICATION	if it's an array only add methods for aref aset and length
WITHOUT_CLASSIFICATION	add array construction methods
WITHOUT_CLASSIFICATION	add all public constructors (note getconstructors only returns public ones)
WITHOUT_CLASSIFICATION	add all instance and static methods
WITHOUT_CLASSIFICATION	proxy is complete return it
WITHOUT_CLASSIFICATION	too much array creation!
WITHOUT_CLASSIFICATION	only include static methods if specified
WITHOUT_CLASSIFICATION	add a few type-specific special methods
WITHOUT_CLASSIFICATION	add all static variables
WITHOUT_CLASSIFICATION	only public static fields that are valid constants
WITHOUT_CLASSIFICATION	looks like someone's trying to raise a java exception. let them.
WITHOUT_CLASSIFICATION	note the five match methods are arity-split to avoid the cost of boxing arguments when there's already a cached match. do not condense them into a single method.
WITHOUT_CLASSIFICATION	todo this is where we would want to do precision checks to see if it's non-destructive to coerce a given type into the target integral primitive
WITHOUT_CLASSIFICATION	long first because it's what fixnum claims to be
WITHOUT_CLASSIFICATION	double first because it's what float claims to be
WITHOUT_CLASSIFICATION	todo varargs?
WITHOUT_CLASSIFICATION	read-volatile
WITHOUT_CLASSIFICATION	initialize cache of parameter types to method
WITHOUT_CLASSIFICATION	we set all java methods to optional since many/most have overloads
WITHOUT_CLASSIFICATION	if we hold a java object we need a java_class accessor
WITHOUT_CLASSIFICATION	line 326
WITHOUT_CLASSIFICATION	read-volatile
WITHOUT_CLASSIFICATION	initialize cache of parameter types to method
WITHOUT_CLASSIFICATION	too much array creation!
WITHOUT_CLASSIFICATION	construct new array proxy (arrayjavaproxy)
WITHOUT_CLASSIFICATION	get map of all fields we want to define.
WITHOUT_CLASSIFICATION	look through all mappings to find a match entry for this field
WITHOUT_CLASSIFICATION	hit a non-java proxy class (included modules can be a cause of thisskip)
WITHOUT_CLASSIFICATION	we could not find all of them print out first one (we could print them all?)
WITHOUT_CLASSIFICATION	dummy bodies for default impls
WITHOUT_CLASSIFICATION	initialize this if it hasn't been
WITHOUT_CLASSIFICATION	initialize these if they haven't been
WITHOUT_CLASSIFICATION	not allowed for original (non-generated) java classes note not allowing for any previously created class right now this restriction might be loosened later for generated classes
WITHOUT_CLASSIFICATION	setup new etc unless this is a concretejavaproxy subclass
WITHOUT_CLASSIFICATION	first we make modifications to the class to adapt it to being both a ruby class and a proxy for a java type
WITHOUT_CLASSIFICATION	list of interfaces we implement
WITHOUT_CLASSIFICATION	we capture the original "new" and make it private
WITHOUT_CLASSIFICATION	the replacement "new" allocates and inits the ruby object as before but also instantiates our proxified java object by calling __jcreate!
WITHOUT_CLASSIFICATION	next we define a few private methods that we'll use to manipulate the java object contained within this ruby object
WITHOUT_CLASSIFICATION	jcreate instantiates the proxy object which implements all interfaces and which is wrapped and implemented by this object
WITHOUT_CLASSIFICATION	now we add an "implement" and "implement_all" methods to the class
WITHOUT_CLASSIFICATION	implement all forces implementation of all interfaces we intend for this class to implement
WITHOUT_CLASSIFICATION	we've already done the above priming logic just add another interface to the list of intentions unless we're past the point of no return or already intend to implement the given interface
WITHOUT_CLASSIFICATION	walk all superclasses aggregating interfaces
WITHOUT_CLASSIFICATION	construct the new interface impl and set it into the object
WITHOUT_CLASSIFICATION	assuming the user wants a collection of interfaces that can be included together. make it so.
WITHOUT_CLASSIFICATION	not allowed for existing java interface modules
WITHOUT_CLASSIFICATION	to turn a module into an "interface collection" we add a class instance variable to hold the list of interfaces and modify append_features for this module to call append_features on each of those interfaces as well
WITHOUT_CLASSIFICATION	already set up append_features just add the interface if we haven't already
WITHOUT_CLASSIFICATION	array-of-interface-type creation/identity
WITHOUT_CLASSIFICATION	keep this variant for kind_of? testing
WITHOUT_CLASSIFICATION	array creation should use this variant
WITHOUT_CLASSIFICATION	parent.setconstant(name proxyclass) where the name should come from ?
WITHOUT_CLASSIFICATION	including interface module so old-style interface "subclasses" will respond correctly to #kind_of? etc.
WITHOUT_CLASSIFICATION	add reference to interface module
WITHOUT_CLASSIFICATION	need to initialize
WITHOUT_CLASSIFICATION	need to initialize
WITHOUT_CLASSIFICATION	proxy is complete return it
WITHOUT_CLASSIFICATION	same as argument_types but matches name in java.lang.reflect.constructor/method
WITHOUT_CLASSIFICATION	this point is only reached if there was an exception handler installed.
WITHOUT_CLASSIFICATION	weakly reserved names
WITHOUT_CLASSIFICATION	called only by initializing thread no synchronization required
WITHOUT_CLASSIFICATION	called only by initializing thread no synchronization required
WITHOUT_CLASSIFICATION	modified only by addmethod no synchronization required
WITHOUT_CLASSIFICATION	if there's no constructor we must prevent construction
WITHOUT_CLASSIFICATION	caching constructors as they're accessed for each new instance
WITHOUT_CLASSIFICATION	proxy module for interfaces
WITHOUT_CLASSIFICATION	proxy class for concrete classes. also used for "concrete" interfaces which is why we have two fields
WITHOUT_CLASSIFICATION	readable only by thread building proxy so don't need to be volatile. used to handle recursive calls to getproxyclass/module while proxy is being constructed (usually when a constant defined by a class is of the same type as that class).
WITHOUT_CLASSIFICATION	allow proxy to be read without synchronization. if proxy is under construction only the building thread can see it.
WITHOUT_CLASSIFICATION	now add all aliases for the static methods (fields) as appropriate
WITHOUT_CLASSIFICATION	proxy is under construction building thread can safely read non-volatile value
WITHOUT_CLASSIFICATION	add property name aliases
WITHOUT_CLASSIFICATION	getfoo => foo getfoo(int) => foo(int)
WITHOUT_CLASSIFICATION	setfoo(foo) => foo=(foo)
WITHOUT_CLASSIFICATION	isfoo() => foo isfoo() => foo()
WITHOUT_CLASSIFICATION	additionally add ?-postfixed aliases to any boolean methods and properties.
WITHOUT_CLASSIFICATION	is_something? contains_thing?
WITHOUT_CLASSIFICATION	something?
WITHOUT_CLASSIFICATION	setup constants for public inner classes
WITHOUT_CLASSIFICATION	setup constants for public inner classes
WITHOUT_CLASSIFICATION	ignore bad constant named inner classes pending jruby-697
WITHOUT_CLASSIFICATION	ignore bad constant named inner classes pending jruby-697
WITHOUT_CLASSIFICATION	create constructorinstaller if there are no constructors it will disable construction
WITHOUT_CLASSIFICATION	we need to collect all methods though we'll only install the ones that are named in this class
WITHOUT_CLASSIFICATION	install direct java methods with mangled name so 'send' can call them directly.
WITHOUT_CLASSIFICATION	now iterate over all installers and make sure they also have appropriate aliases
WITHOUT_CLASSIFICATION	old (quasi-deprecated) interface class
WITHOUT_CLASSIFICATION	1.9 support for encodings
WITHOUT_CLASSIFICATION	double-check the cache now that we're synchronized
WITHOUT_CLASSIFICATION	setfoo(foo) => foo=(foo)
WITHOUT_CLASSIFICATION	isfoo() => foo isfoo() => foo()
WITHOUT_CLASSIFICATION	is_something? contains_thing?
WITHOUT_CLASSIFICATION	one word type name that starts lower-caseit may be a primitive type
WITHOUT_CLASSIFICATION	java.getproxyclass deals with sync issues so we won't duplicate the logic here
WITHOUT_CLASSIFICATION	note intentionally returning the actual array returned from java rather than wrapping it in a rubyarray. wave of the future when java_class will return the actual class rather than a javaclass wrapper.
WITHOUT_CLASSIFICATION	see note above re return type
WITHOUT_CLASSIFICATION	restrictive security policy no matter we only want public classes anyway
WITHOUT_CLASSIFICATION	very restrictive policy (disallows member.public) we'd never actually get this far in that case
WITHOUT_CLASSIFICATION	one-dimensional array
WITHOUT_CLASSIFICATION	n-dimensional array
WITHOUT_CLASSIFICATION	if it's an array of arrays recurse with the component type
WITHOUT_CLASSIFICATION	we all all superclasses but avoid adding superclass methods with same name+signature as subclass methods see jruby-3130
WITHOUT_CLASSIFICATION	proc implementing an interface pull in the catch-all code that lets the proc get invoked no matter what method is called on the interface
WITHOUT_CLASSIFICATION	can't be converted any more return it
WITHOUT_CLASSIFICATION	getfoobar() => foobar? foo_bar?()
WITHOUT_CLASSIFICATION	if not a property but is boolean add ?-postfixed aliases.
WITHOUT_CLASSIFICATION	many cases are ok to convert to float if not one of these error
WITHOUT_CLASSIFICATION	for object default to natural wrapper type
WITHOUT_CLASSIFICATION	rubyobject is already of the required jruby class (or subclass)
WITHOUT_CLASSIFICATION	the converters handle not only primitive types but also their boxed versions so we should check if we have a converter before checking for isprimitive()
WITHOUT_CLASSIFICATION	it's not one of the types we convert so just pass it out as-is without wrapping
WITHOUT_CLASSIFICATION	we've found a java type to which we've coerced the ruby value wrap it
WITHOUT_CLASSIFICATION	set of utility methods for java-based proxy objects
WITHOUT_CLASSIFICATION	the proxy (wrapper) type hierarchy
WITHOUT_CLASSIFICATION	interfacejavaproxy.createinterfacejavaproxy(context)
WITHOUT_CLASSIFICATION	also create the javaproxy classes
WITHOUT_CLASSIFICATION	the template for interface modules
WITHOUT_CLASSIFICATION	now attach java-related extras to core classes
WITHOUT_CLASSIFICATION	add all name-to-class mappings
WITHOUT_CLASSIFICATION	add some base java classes everyone will need
WITHOUT_CLASSIFICATION	finally set javasupport.isenabled to true
WITHOUT_CLASSIFICATION	shouldn't happen but if a superclass is specified it's not ours
WITHOUT_CLASSIFICATION	include any interfaces we extend
WITHOUT_CLASSIFICATION	java.lang.object is added at root of java proxy classes
WITHOUT_CLASSIFICATION	other java proxy classes added under their superclass' java proxy
WITHOUT_CLASSIFICATION	include interface modules into the proxy class
WITHOUT_CLASSIFICATION	jruby-2938 the proxy class might already exist
WITHOUT_CLASSIFICATION	add java_method for unbound use
WITHOUT_CLASSIFICATION	add alias to meta
WITHOUT_CLASSIFICATION	we'll only map conventional class names to modules
WITHOUT_CLASSIFICATION	expected
WITHOUT_CLASSIFICATION	haven't found a class continue on as though it were a package
WITHOUT_CLASSIFICATION	upper case name so most likely a class
WITHOUT_CLASSIFICATION	this point is only reached if there was an exception handler installed.
WITHOUT_CLASSIFICATION	add alias to meta
WITHOUT_CLASSIFICATION	this is where we'll get connected when classes are opened using package module syntax.
WITHOUT_CLASSIFICATION	save package module as ivar in parent and add method to parent so we don't have to come back here.
WITHOUT_CLASSIFICATION	this covers primitives and (unlikely) lower-case class names
WITHOUT_CLASSIFICATION	not primitive or lc class
WITHOUT_CLASSIFICATION	not primitive or lc class
WITHOUT_CLASSIFICATION	is there a supplied proc argument or do we assume a block was supplied
WITHOUT_CLASSIFICATION	create list of interfaces to proxy (and make sure they really are interfaces)
WITHOUT_CLASSIFICATION	hashcode is a combination of the interfaces and the ruby class we're using to implement them
WITHOUT_CLASSIFICATION	if it's a singleton class and the real class is proc we're doing closure conversion so just use proc's hashcode
WITHOUT_CLASSIFICATION	normal new class implementing interfaces
WITHOUT_CLASSIFICATION	initialize some components.
WITHOUT_CLASSIFICATION	not synchronizing these methods no harm if these values get set more than once. (also note that there's no chance of getting a partially initialized class/module as happens-before is guaranteed by volatile write/read of constants table.)
WITHOUT_CLASSIFICATION	java reflection does not allow retrieving constructors like methods
WITHOUT_CLASSIFICATION	for zero args case we can stop searching
WITHOUT_CLASSIFICATION	for zero args case we can stop searching
WITHOUT_CLASSIFICATION	no matching ctor found
WITHOUT_CLASSIFICATION	create ruby proxies for any input arguments that are not primitives.
WITHOUT_CLASSIFICATION	prepare a faster handle if handles are enabled and the method and class are public
WITHOUT_CLASSIFICATION	must be a public method
WITHOUT_CLASSIFICATION	must be a public class
WITHOUT_CLASSIFICATION	must have been loaded from our known classloader hierarchy
WITHOUT_CLASSIFICATION	special classes like collections.empty_list are inner classes that are private but implement public interfaces. their methods are all public methods for the public interface. let these public methods execute via setaccessible(true).
WITHOUT_CLASSIFICATION	search through all declared methods to find a closest match
WITHOUT_CLASSIFICATION	no matching method found
WITHOUT_CLASSIFICATION	this test really means that this is a ruby-defined subclass of a java class
WITHOUT_CLASSIFICATION	first we need to register the jruby engine.
WITHOUT_CLASSIFICATION	now we create a new bsfmanager.
WITHOUT_CLASSIFICATION	initialize a simple frame.
WITHOUT_CLASSIFICATION	e.printstacktrace()
WITHOUT_CLASSIFICATION	e.printstacktrace()
WITHOUT_CLASSIFICATION	jruby-530 while case
WITHOUT_CLASSIFICATION	end class
WITHOUT_CLASSIFICATION	this test really means that this is a ruby-defined subclass of a java class
WITHOUT_CLASSIFICATION	for our purposes accessibles are also members and vice-versa so we'll include member methods here.
WITHOUT_CLASSIFICATION	declare those components as beans in bsf. then it will be possible to access those components in ruby as global variables ($frame $menubar )
WITHOUT_CLASSIFICATION	execute a ruby script (add the menubar to the frame).
WITHOUT_CLASSIFICATION	execute ruby statements.
WITHOUT_CLASSIFICATION	evaluates a ruby expression and display the result.
WITHOUT_CLASSIFICATION	populate values for the parameter names
WITHOUT_CLASSIFICATION	package scope
WITHOUT_CLASSIFICATION	this point is only reached if there was an exception handler installed.
WITHOUT_CLASSIFICATION	ruby-level methods
WITHOUT_CLASSIFICATION	need names ordered for key generation later
WITHOUT_CLASSIFICATION	we only collect methods and interfaces for user-defined proxy classes.
WITHOUT_CLASSIFICATION	get javaclass if this is the new proxy class verify it matches if this is a superclass proxy.
WITHOUT_CLASSIFICATION	get any included interfaces
WITHOUT_CLASSIFICATION	lock in the overridden methods for the new class and any as-yet uninstantiated ancestor class.
WITHOUT_CLASSIFICATION	statically initialized below
WITHOUT_CLASSIFICATION	finish class initializer
WITHOUT_CLASSIFICATION	trigger class initialization for the class
WITHOUT_CLASSIFICATION	should not happen!
WITHOUT_CLASSIFICATION	start class
WITHOUT_CLASSIFICATION	make getter for handler
WITHOUT_CLASSIFICATION	make getter for proxy class
WITHOUT_CLASSIFICATION	add (potentially) overridden names to the key. todo see note above re optimizations
WITHOUT_CLASSIFICATION	we generate all constructors and let some fail during invocation later
WITHOUT_CLASSIFICATION	create static private method field
WITHOUT_CLASSIFICATION	load static empty array
WITHOUT_CLASSIFICATION	box arguments
WITHOUT_CLASSIFICATION	this is a simple rethrow handler
WITHOUT_CLASSIFICATION	construct the super-proxy method
WITHOUT_CLASSIFICATION	do a void return
WITHOUT_CLASSIFICATION	utility methods
WITHOUT_CLASSIFICATION	is there a supplied proc argument or do we assume a block was supplied
WITHOUT_CLASSIFICATION	store call information so method_missing impl can use it
WITHOUT_CLASSIFICATION	use the same logic as in evaluationstate
WITHOUT_CLASSIFICATION	no opt no rest exact match
WITHOUT_CLASSIFICATION	only rest must be at least required
WITHOUT_CLASSIFICATION	opt but no rest must be at least required and no more than required + opt
WITHOUT_CLASSIFICATION	opt and rest must be at least required
WITHOUT_CLASSIFICATION	no block from a nil proc
WITHOUT_CLASSIFICATION	if not already a proc then we should try and make it one.
WITHOUT_CLASSIFICATION	the current block is already associated with proc. no need to create a new one
WITHOUT_CLASSIFICATION	has the method that is calling super received a block argument
WITHOUT_CLASSIFICATION	nul
WITHOUT_CLASSIFICATION	reuse trailing consecutive sequence at same slot
WITHOUT_CLASSIFICATION	clone all remaining nodes
WITHOUT_CLASSIFICATION	'class << state.self' and 'class << obj' uses defn as opposed to defs
WITHOUT_CLASSIFICATION	each root node has a top-level scope that we need to push
WITHOUT_CLASSIFICATION	read-volatile
WITHOUT_CLASSIFICATION	read-volatile
WITHOUT_CLASSIFICATION	classes are directly in the hierarchy so no special logic is necessary for implementer
WITHOUT_CLASSIFICATION	must be power of 2 must be power of 2
WITHOUT_CLASSIFICATION	find power-of-two sizes best matching arguments
WITHOUT_CLASSIFICATION	note segmentshift differs from concurrenthashmap's calculation due to issues with system.identityhashcode (upper n bits always 0 at least under java 1.6 / winxp)
WITHOUT_CLASSIFICATION	system.err.println("objectproxycache " + id + " started at "+ new java.util.date())
WITHOUT_CLASSIFICATION	protected void finalize() throws throwable { system.err.println("objectproxycache " + id + " finalized at "+ new java.util.date()) }
WITHOUT_CLASSIFICATION	entryrefs include hash with key to facilitate lookup by segment#expunge after ref is removed from referencequeue
WITHOUT_CLASSIFICATION	unlike weakhashmap our entry does not subclass weakreference but rather makes it a final field. the theory is that doing so should force a happens-before relationship wrt the weakreference constructor guaranteeing that the key will be visibile to other threads (unless it's been gc'ed). see jls 17.5 (final fields) and 17.4.5 (happens-before order) to confirm or refute my reasoning here.
WITHOUT_CLASSIFICATION	references to the java object and its proxy will either both be weak or both be soft since the proxy contains a strong reference to the object so it wouldn't make sense for the reference types to differ.
WITHOUT_CLASSIFICATION	ctor used by remove/rehash
WITHOUT_CLASSIFICATION	must be called under lock
WITHOUT_CLASSIFICATION	must be called under lock
WITHOUT_CLASSIFICATION	must be called under lock
WITHOUT_CLASSIFICATION	note that we'll potentially see the refs for both the java object and proxy -- whichever we see first will cause the entry to be removed the other will not match an entry and will be ignored.
WITHOUT_CLASSIFICATION	temp method to verify tablesize value must be called under lock
WITHOUT_CLASSIFICATION	single node in list
WITHOUT_CLASSIFICATION	indirect read-/write- volatile
WITHOUT_CLASSIFICATION	indirect read-/write- volatile
WITHOUT_CLASSIFICATION	entry exists proxy has been gc'ed. replace entry.
WITHOUT_CLASSIFICATION	where we get new positions from.
WITHOUT_CLASSIFICATION	start of string ([ ( { < ' " \n)
WITHOUT_CLASSIFICATION	number of newlines read from the reader
WITHOUT_CLASSIFICATION	how many bytes into the source are we?
WITHOUT_CLASSIFICATION	for 'list' and only populated if list is not null.
WITHOUT_CLASSIFICATION	last full line read.
WITHOUT_CLASSIFICATION	save sourceline for error reporting to display line where error occurred
WITHOUT_CLASSIFICATION	get rest of line. linebuffer filled as side-effect
WITHOUT_CLASSIFICATION	expand variables indentation of final marker
WITHOUT_CLASSIFICATION	expand variables indentation of final marker
WITHOUT_CLASSIFICATION	end of string (] ) } > ' " \0)
WITHOUT_CLASSIFICATION	how many strings are nested in the current string term
WITHOUT_CLASSIFICATION	single-quote fast path
WITHOUT_CLASSIFICATION	regexp engine 'java'
WITHOUT_CLASSIFICATION	was a goto in original ruby lexer
WITHOUT_CLASSIFICATION	just ignore
WITHOUT_CLASSIFICATION	octal constant
WITHOUT_CLASSIFICATION	hex constant
WITHOUT_CLASSIFICATION	push(1)
WITHOUT_CLASSIFICATION	pop
WITHOUT_CLASSIFICATION	push(0). if you look at original macro stack |= (n&1) => stack |= 0 => no-change.
WITHOUT_CLASSIFICATION	lexpop
WITHOUT_CLASSIFICATION	set_p
WITHOUT_CLASSIFICATION	marker delimiting heredoc boundary
WITHOUT_CLASSIFICATION	found end marker for this heredoc
WITHOUT_CLASSIFICATION	put back lastline for any elements past start of heredoc marker
WITHOUT_CLASSIFICATION	last token read via yylex().
WITHOUT_CLASSIFICATION	value of last token which had a value associated with it.
WITHOUT_CLASSIFICATION	stream of data that yylex() examines.
WITHOUT_CLASSIFICATION	used for tiny smidgen of grammar in lexer (see setparsersupport())
WITHOUT_CLASSIFICATION	give a name to a value. enebo this should be used more.
WITHOUT_CLASSIFICATION	when the heredoc identifier specifies <<-eof that indents before ident. are ok (the '-').
WITHOUT_CLASSIFICATION	are we lexing ruby 1.8 or 1.9+ syntax
WITHOUT_CLASSIFICATION	count of nested parentheses (1.9 only)
WITHOUT_CLASSIFICATION	1.9 only
WITHOUT_CLASSIFICATION	short-hand (e.g. %{%.%! versus %q{).
WITHOUT_CLASSIFICATION	long-hand (e.g. %q{}).
WITHOUT_CLASSIFICATION	no mb || ismbchar(term)
WITHOUT_CLASSIFICATION	not normally used but is left in here since it can be useful in debugging grammar and lexing problems.
WITHOUT_CLASSIFICATION	debugging help
WITHOUT_CLASSIFICATION	'\v'
WITHOUT_CLASSIFICATION	end of script.
WITHOUT_CLASSIFICATION	white spaces
WITHOUT_CLASSIFICATION	'\v'
WITHOUT_CLASSIFICATION	it's a comment
WITHOUT_CLASSIFICATION	replace a string of newlines with a single one
WITHOUT_CLASSIFICATION	$\ output record separator
WITHOUT_CLASSIFICATION	eof (enebo after default?
WITHOUT_CLASSIFICATION	documentation nodes
WITHOUT_CLASSIFICATION	in case last next was the newline.
WITHOUT_CLASSIFICATION	just a plain bang
WITHOUT_CLASSIFICATION	$_ last read line string
WITHOUT_CLASSIFICATION	$~ match-data
WITHOUT_CLASSIFICATION	$ argv
WITHOUT_CLASSIFICATION	$$ pid
WITHOUT_CLASSIFICATION	$? last status
WITHOUT_CLASSIFICATION	$! error string
WITHOUT_CLASSIFICATION	$@ error position
WITHOUT_CLASSIFICATION	$/ input record separator
WITHOUT_CLASSIFICATION	$ field separator
WITHOUT_CLASSIFICATION	$ output field separator
WITHOUT_CLASSIFICATION	$. last read line number
WITHOUT_CLASSIFICATION	$= ignorecase
WITHOUT_CLASSIFICATION	$ load path
WITHOUT_CLASSIFICATION	$< reading filename
WITHOUT_CLASSIFICATION	$" already loaded files
WITHOUT_CLASSIFICATION	$& last match
WITHOUT_CLASSIFICATION	$` string before last match
WITHOUT_CLASSIFICATION	$' string after last match
WITHOUT_CLASSIFICATION	methods 'foo!' and 'foo?' are possible but if followed by '=' it is relop
WITHOUT_CLASSIFICATION	see if it is a reserved word.
WITHOUT_CLASSIFICATION	enum lex_state
WITHOUT_CLASSIFICATION	block (primary)
WITHOUT_CLASSIFICATION	block (expr)
WITHOUT_CLASSIFICATION	hash
WITHOUT_CLASSIFICATION	enebo 1.9 is is_arg but we need to break apart for 1.8 support.
WITHOUT_CLASSIFICATION	fixme peek('u') utf8 stuff for 1.9
WITHOUT_CLASSIFICATION	we don't append '+' since java number parser gets confused
WITHOUT_CLASSIFICATION	hexadecimal
WITHOUT_CLASSIFICATION	binary
WITHOUT_CLASSIFICATION	decimal
WITHOUT_CLASSIFICATION	octal
WITHOUT_CLASSIFICATION	'_' in number just ignored
WITHOUT_CLASSIFICATION	backslash
WITHOUT_CLASSIFICATION	newline
WITHOUT_CLASSIFICATION	horizontal tab
WITHOUT_CLASSIFICATION	form feed
WITHOUT_CLASSIFICATION	vertical tab
WITHOUT_CLASSIFICATION	alarm(bell)
WITHOUT_CLASSIFICATION	escape
WITHOUT_CLASSIFICATION	hex constant
WITHOUT_CLASSIFICATION	char hexvalue = scanhex(2)
WITHOUT_CLASSIFICATION	if \r\n then just pass along \n (windows). if \r[^\n] then pass along \n (mac).
WITHOUT_CLASSIFICATION	space
WITHOUT_CLASSIFICATION	where we started this marker match
WITHOUT_CLASSIFICATION	position within source must reflect the actual offset and column. since we ate an extra character here (this accounting is normally done in read ) we should update position info.
WITHOUT_CLASSIFICATION	we use offset here to keep track of extra newlines for windows
WITHOUT_CLASSIFICATION	if \r\n then just pass along \n (windows). if \r[^\n] then pass along \n (mac).
WITHOUT_CLASSIFICATION	fixme old mac format strings?
WITHOUT_CLASSIFICATION	fixme old mac format strings?
WITHOUT_CLASSIFICATION	where we get our newest char's
WITHOUT_CLASSIFICATION	our readback/pushback buffer.
WITHOUT_CLASSIFICATION	index of last character in pushback buffer
WITHOUT_CLASSIFICATION	character read before previous read
WITHOUT_CLASSIFICATION	keep value of twoago around so we can restore after we unread
WITHOUT_CLASSIFICATION	netprotocolbufferediolibrary
WITHOUT_CLASSIFICATION	bigdecimallibrary
WITHOUT_CLASSIFICATION	todo fd_cloexec is mysterious and we are not sure how constantine should include this. we did it here for now
WITHOUT_CLASSIFICATION	ruby's designation for some platforms minus version numbers in some cases
WITHOUT_CLASSIFICATION	that's what jdk5 produces on windows vista
WITHOUT_CLASSIFICATION	rubygems is too specific on host cpu so until we have real need lets default to universal setconfig(confighash "arch" system.getproperty("os.arch") + "-java" + system.getproperty("java.specification.version"))
WITHOUT_CLASSIFICATION	our shell scripts pass in non-canonicalized paths but even if we didn't anyone who did would become unhappy because ruby apps expect no relative operators in the pathname (rubygems for example).
WITHOUT_CLASSIFICATION	this set is only for darwin
WITHOUT_CLASSIFICATION	digestlibrary
WITHOUT_CLASSIFICATION	all errors just info do not prevent loading ikvm does not support jmx and throws an error
WITHOUT_CLASSIFICATION	all errors just info do not prevent unloading ikvm does not support jmx and throws an error
WITHOUT_CLASSIFICATION	do nothing return dummy version below
WITHOUT_CLASSIFICATION	yylhs 496
WITHOUT_CLASSIFICATION	yylhs 496
WITHOUT_CLASSIFICATION	yylhs 496
WITHOUT_CLASSIFICATION	yylhs 496
WITHOUT_CLASSIFICATION	yylhs 496
WITHOUT_CLASSIFICATION	line 329
WITHOUT_CLASSIFICATION	new exception().printstacktrace()
WITHOUT_CLASSIFICATION	yygindex 152
WITHOUT_CLASSIFICATION	dynamically increase
WITHOUT_CLASSIFICATION	discarding a token does not change stack
WITHOUT_CLASSIFICATION	else [default] reduce (yyn)
WITHOUT_CLASSIFICATION	shift to yyn
WITHOUT_CLASSIFICATION	reduce (yyn)
WITHOUT_CLASSIFICATION	leave stack alone
WITHOUT_CLASSIFICATION	line 271
WITHOUT_CLASSIFICATION	line 274
WITHOUT_CLASSIFICATION	line 303
WITHOUT_CLASSIFICATION	line 311
WITHOUT_CLASSIFICATION	line 314
WITHOUT_CLASSIFICATION	line 317
WITHOUT_CLASSIFICATION	line 332
WITHOUT_CLASSIFICATION	line 338
WITHOUT_CLASSIFICATION	line 341
WITHOUT_CLASSIFICATION	line 344
WITHOUT_CLASSIFICATION	line 351
WITHOUT_CLASSIFICATION	line 358
WITHOUT_CLASSIFICATION	line 367
WITHOUT_CLASSIFICATION	line 372
WITHOUT_CLASSIFICATION	line 378
WITHOUT_CLASSIFICATION	line 382
WITHOUT_CLASSIFICATION	line 407
WITHOUT_CLASSIFICATION	line 411
WITHOUT_CLASSIFICATION	line 414
WITHOUT_CLASSIFICATION	line 417
WITHOUT_CLASSIFICATION	line 420
WITHOUT_CLASSIFICATION	line 426
WITHOUT_CLASSIFICATION	line 434
WITHOUT_CLASSIFICATION	line 443
WITHOUT_CLASSIFICATION	line 446
WITHOUT_CLASSIFICATION	line 452
WITHOUT_CLASSIFICATION	line 457
WITHOUT_CLASSIFICATION	line 464
WITHOUT_CLASSIFICATION	line 467
WITHOUT_CLASSIFICATION	line 470
WITHOUT_CLASSIFICATION	line 479
WITHOUT_CLASSIFICATION	line 484
WITHOUT_CLASSIFICATION	line 486
WITHOUT_CLASSIFICATION	line 492
WITHOUT_CLASSIFICATION	line 498
WITHOUT_CLASSIFICATION	line 501
WITHOUT_CLASSIFICATION	line 504
WITHOUT_CLASSIFICATION	line 507
WITHOUT_CLASSIFICATION	line 510
WITHOUT_CLASSIFICATION	line 519
WITHOUT_CLASSIFICATION	line 525
WITHOUT_CLASSIFICATION	yygindex 152
WITHOUT_CLASSIFICATION	line 537
WITHOUT_CLASSIFICATION	line 540
WITHOUT_CLASSIFICATION	line 543
WITHOUT_CLASSIFICATION	line 546
WITHOUT_CLASSIFICATION	line 556
WITHOUT_CLASSIFICATION	line 559
WITHOUT_CLASSIFICATION	line 563
WITHOUT_CLASSIFICATION	line 566
WITHOUT_CLASSIFICATION	line 569
WITHOUT_CLASSIFICATION	line 575
WITHOUT_CLASSIFICATION	line 578
WITHOUT_CLASSIFICATION	line 587
WITHOUT_CLASSIFICATION	line 596
WITHOUT_CLASSIFICATION	line 604
WITHOUT_CLASSIFICATION	line 607
WITHOUT_CLASSIFICATION	line 610
WITHOUT_CLASSIFICATION	line 613
WITHOUT_CLASSIFICATION	line 616
WITHOUT_CLASSIFICATION	line 634
WITHOUT_CLASSIFICATION	line 638
WITHOUT_CLASSIFICATION	line 643
WITHOUT_CLASSIFICATION	line 646
WITHOUT_CLASSIFICATION	line 655
WITHOUT_CLASSIFICATION	line 660
WITHOUT_CLASSIFICATION	line 667
WITHOUT_CLASSIFICATION	line 670
WITHOUT_CLASSIFICATION	line 672
WITHOUT_CLASSIFICATION	line 696
WITHOUT_CLASSIFICATION	line 701
WITHOUT_CLASSIFICATION	line 717
WITHOUT_CLASSIFICATION	line 720
WITHOUT_CLASSIFICATION	line 726
WITHOUT_CLASSIFICATION	line 729
WITHOUT_CLASSIFICATION	line 732
WITHOUT_CLASSIFICATION	line 735
WITHOUT_CLASSIFICATION	line 738
WITHOUT_CLASSIFICATION	line 751
WITHOUT_CLASSIFICATION	line 754
WITHOUT_CLASSIFICATION	line 757
WITHOUT_CLASSIFICATION	line 760
WITHOUT_CLASSIFICATION	line 763
WITHOUT_CLASSIFICATION	line 769
WITHOUT_CLASSIFICATION	line 772
WITHOUT_CLASSIFICATION	line 775
WITHOUT_CLASSIFICATION	line 782
WITHOUT_CLASSIFICATION	line 788
WITHOUT_CLASSIFICATION	line 791
WITHOUT_CLASSIFICATION	line 794
WITHOUT_CLASSIFICATION	line 797
WITHOUT_CLASSIFICATION	line 803
WITHOUT_CLASSIFICATION	line 806
WITHOUT_CLASSIFICATION	line 809
WITHOUT_CLASSIFICATION	line 815
WITHOUT_CLASSIFICATION	line 818
WITHOUT_CLASSIFICATION	line 821
WITHOUT_CLASSIFICATION	line 824
WITHOUT_CLASSIFICATION	line 830
WITHOUT_CLASSIFICATION	line 833
WITHOUT_CLASSIFICATION	line 836
WITHOUT_CLASSIFICATION	line 839
WITHOUT_CLASSIFICATION	line 842
WITHOUT_CLASSIFICATION	line 848
WITHOUT_CLASSIFICATION	line 852
WITHOUT_CLASSIFICATION	line 858
WITHOUT_CLASSIFICATION	line 861
WITHOUT_CLASSIFICATION	line 868
WITHOUT_CLASSIFICATION	line 871
WITHOUT_CLASSIFICATION	line 876
WITHOUT_CLASSIFICATION	line 879
WITHOUT_CLASSIFICATION	line 883
WITHOUT_CLASSIFICATION	line 893
WITHOUT_CLASSIFICATION	line 896
WITHOUT_CLASSIFICATION	line 899
WITHOUT_CLASSIFICATION	line 903
WITHOUT_CLASSIFICATION	line 907
WITHOUT_CLASSIFICATION	line 915
WITHOUT_CLASSIFICATION	line 920
WITHOUT_CLASSIFICATION	line 923
WITHOUT_CLASSIFICATION	line 926
WITHOUT_CLASSIFICATION	line 932
WITHOUT_CLASSIFICATION	line 936
WITHOUT_CLASSIFICATION	line 940
WITHOUT_CLASSIFICATION	line 944
WITHOUT_CLASSIFICATION	line 948
WITHOUT_CLASSIFICATION	line 956
WITHOUT_CLASSIFICATION	line 960
WITHOUT_CLASSIFICATION	line 964
WITHOUT_CLASSIFICATION	line 967
WITHOUT_CLASSIFICATION	line 972
WITHOUT_CLASSIFICATION	line 978
WITHOUT_CLASSIFICATION	line 980
WITHOUT_CLASSIFICATION	line 984
WITHOUT_CLASSIFICATION	line 986
WITHOUT_CLASSIFICATION	line 996
WITHOUT_CLASSIFICATION	line 1001
WITHOUT_CLASSIFICATION	line 1004
WITHOUT_CLASSIFICATION	line 1008
WITHOUT_CLASSIFICATION	line 1014
WITHOUT_CLASSIFICATION	line 1029
WITHOUT_CLASSIFICATION	line 1032
WITHOUT_CLASSIFICATION	line 1034
WITHOUT_CLASSIFICATION	line 1045
WITHOUT_CLASSIFICATION	line 1048
WITHOUT_CLASSIFICATION	line 1051
WITHOUT_CLASSIFICATION	line 1058
WITHOUT_CLASSIFICATION	line 1070
WITHOUT_CLASSIFICATION	line 1073
WITHOUT_CLASSIFICATION	line 1076
WITHOUT_CLASSIFICATION	line 1079
WITHOUT_CLASSIFICATION	line 1082
WITHOUT_CLASSIFICATION	line 1089
WITHOUT_CLASSIFICATION	line 1097
WITHOUT_CLASSIFICATION	line 1100
WITHOUT_CLASSIFICATION	line 1103
WITHOUT_CLASSIFICATION	line 1107
WITHOUT_CLASSIFICATION	line 1111
WITHOUT_CLASSIFICATION	line 1113
WITHOUT_CLASSIFICATION	line 1115
WITHOUT_CLASSIFICATION	line 1119
WITHOUT_CLASSIFICATION	line 1130
WITHOUT_CLASSIFICATION	line 1133
WITHOUT_CLASSIFICATION	line 1135
WITHOUT_CLASSIFICATION	line 1137
WITHOUT_CLASSIFICATION	line 1140
WITHOUT_CLASSIFICATION	line 1151
WITHOUT_CLASSIFICATION	line 1154
WITHOUT_CLASSIFICATION	line 1158
WITHOUT_CLASSIFICATION	line 1164
WITHOUT_CLASSIFICATION	line 1175
WITHOUT_CLASSIFICATION	line 1178
WITHOUT_CLASSIFICATION	line 1187
WITHOUT_CLASSIFICATION	line 1189
WITHOUT_CLASSIFICATION	line 1193
WITHOUT_CLASSIFICATION	line 1204
WITHOUT_CLASSIFICATION	line 1207
WITHOUT_CLASSIFICATION	line 1210
WITHOUT_CLASSIFICATION	line 1214
WITHOUT_CLASSIFICATION	line 1234
WITHOUT_CLASSIFICATION	line 1239
WITHOUT_CLASSIFICATION	line 1243
WITHOUT_CLASSIFICATION	line 1247
WITHOUT_CLASSIFICATION	line 1251
WITHOUT_CLASSIFICATION	line 1263
WITHOUT_CLASSIFICATION	line 1269
WITHOUT_CLASSIFICATION	line 1280
WITHOUT_CLASSIFICATION	line 1283
WITHOUT_CLASSIFICATION	line 1290
WITHOUT_CLASSIFICATION	line 1296
WITHOUT_CLASSIFICATION	line 1299
WITHOUT_CLASSIFICATION	line 1302
WITHOUT_CLASSIFICATION	line 1309
WITHOUT_CLASSIFICATION	line 1313
WITHOUT_CLASSIFICATION	line 1315
WITHOUT_CLASSIFICATION	line 1320
WITHOUT_CLASSIFICATION	line 1328
WITHOUT_CLASSIFICATION	line 1335
WITHOUT_CLASSIFICATION	line 1348
WITHOUT_CLASSIFICATION	line 1352
WITHOUT_CLASSIFICATION	line 1358
WITHOUT_CLASSIFICATION	line 1374
WITHOUT_CLASSIFICATION	line 1381
WITHOUT_CLASSIFICATION	line 1387
WITHOUT_CLASSIFICATION	line 1392
WITHOUT_CLASSIFICATION	line 1415
WITHOUT_CLASSIFICATION	line 1431
WITHOUT_CLASSIFICATION	line 1434
WITHOUT_CLASSIFICATION	line 1440
WITHOUT_CLASSIFICATION	line 1443
WITHOUT_CLASSIFICATION	line 1453
WITHOUT_CLASSIFICATION	line 1456
WITHOUT_CLASSIFICATION	line 1462
WITHOUT_CLASSIFICATION	line 1465
WITHOUT_CLASSIFICATION	line 1470
WITHOUT_CLASSIFICATION	line 1477
WITHOUT_CLASSIFICATION	line 1480
WITHOUT_CLASSIFICATION	line 1485
WITHOUT_CLASSIFICATION	line 1488
WITHOUT_CLASSIFICATION	line 1496
WITHOUT_CLASSIFICATION	line 1502
WITHOUT_CLASSIFICATION	line 1510
WITHOUT_CLASSIFICATION	line 1513
WITHOUT_CLASSIFICATION	line 1516
WITHOUT_CLASSIFICATION	line 1533
WITHOUT_CLASSIFICATION	line 1550
WITHOUT_CLASSIFICATION	line 1553
WITHOUT_CLASSIFICATION	line 1556
WITHOUT_CLASSIFICATION	line 1565
WITHOUT_CLASSIFICATION	line 1568
WITHOUT_CLASSIFICATION	line 1571
WITHOUT_CLASSIFICATION	line 1574
WITHOUT_CLASSIFICATION	line 1577
WITHOUT_CLASSIFICATION	line 1587
WITHOUT_CLASSIFICATION	line 1595
WITHOUT_CLASSIFICATION	line 1598
WITHOUT_CLASSIFICATION	line 1600
WITHOUT_CLASSIFICATION	line 1609
WITHOUT_CLASSIFICATION	line 1623
WITHOUT_CLASSIFICATION	line 1626
WITHOUT_CLASSIFICATION	line 1629
WITHOUT_CLASSIFICATION	line 1632
WITHOUT_CLASSIFICATION	line 1638
WITHOUT_CLASSIFICATION	line 1641
WITHOUT_CLASSIFICATION	line 1644
WITHOUT_CLASSIFICATION	line 1649
WITHOUT_CLASSIFICATION	line 1655
WITHOUT_CLASSIFICATION	line 1658
WITHOUT_CLASSIFICATION	line 1661
WITHOUT_CLASSIFICATION	line 1672
WITHOUT_CLASSIFICATION	line 1677
WITHOUT_CLASSIFICATION	line 1687
WITHOUT_CLASSIFICATION	line 1694
WITHOUT_CLASSIFICATION	line 1705
WITHOUT_CLASSIFICATION	line 1708
WITHOUT_CLASSIFICATION	line 1725
WITHOUT_CLASSIFICATION	line 1733
WITHOUT_CLASSIFICATION	line 1742
WITHOUT_CLASSIFICATION	line 1745
WITHOUT_CLASSIFICATION	line 1749
WITHOUT_CLASSIFICATION	line 1757
WITHOUT_CLASSIFICATION	line 1769
WITHOUT_CLASSIFICATION	line 1772
WITHOUT_CLASSIFICATION	line 1775
WITHOUT_CLASSIFICATION	line 1784
WITHOUT_CLASSIFICATION	line 1808
WITHOUT_CLASSIFICATION	line 1814
WITHOUT_CLASSIFICATION	line 1818
WITHOUT_CLASSIFICATION	line 1822
WITHOUT_CLASSIFICATION	force for args
WITHOUT_CLASSIFICATION	xxx 0
WITHOUT_CLASSIFICATION	$$ = $3
WITHOUT_CLASSIFICATION	}
WITHOUT_CLASSIFICATION	last expression should not be void
WITHOUT_CLASSIFICATION	compstmt position includes both parens around it
WITHOUT_CLASSIFICATION	$8 == null ? nilimplicitnode.nil $8
WITHOUT_CLASSIFICATION	$5 == null ? nilimplicitnode.nil $5
WITHOUT_CLASSIFICATION	noex_private for toplevel
WITHOUT_CLASSIFICATION	mirko check
WITHOUT_CLASSIFICATION	include pipes on multiple arg type
WITHOUT_CLASSIFICATION	line 529
WITHOUT_CLASSIFICATION	.setposfrom($2)
WITHOUT_CLASSIFICATION	xxx
WITHOUT_CLASSIFICATION	zero length array
WITHOUT_CLASSIFICATION	dstrnode "some text #{some expression}"
WITHOUT_CLASSIFICATION	strnode "some text"
WITHOUT_CLASSIFICATION	evstrnode "#{some expression}"
WITHOUT_CLASSIFICATION	line 1827 "defaultrubyparser.y"
WITHOUT_CLASSIFICATION	ignore no debugger present
WITHOUT_CLASSIFICATION	yyparse(lexer new jay.yydebug.yyanim("jruby" 9))
WITHOUT_CLASSIFICATION	line 7713 "-"
WITHOUT_CLASSIFICATION	local scopes are argument scopes by default
WITHOUT_CLASSIFICATION	mark as captured if from containing scope
WITHOUT_CLASSIFICATION	mark as captured if from containing scope
WITHOUT_CLASSIFICATION	we know this is a block scope because a local scope cannot be within a local scope if topscope was itself it would have created a localasgnnode above.
WITHOUT_CLASSIFICATION	enebo 1.9 has curr nodes for local/block variables. we don't. i believe we follow proper logic
WITHOUT_CLASSIFICATION	oddbut it is odd in ruby too.
WITHOUT_CLASSIFICATION	what linenumber will the source think it starts from?
WITHOUT_CLASSIFICATION	is this inline source (aka -e "source")
WITHOUT_CLASSIFICATION	we parse evals more often in source so assume an eval parse.
WITHOUT_CLASSIFICATION	should positions added extra ide-friendly information and leave in all newline nodes
WITHOUT_CLASSIFICATION	will parser parse duby grammar extensions
WITHOUT_CLASSIFICATION	should we display extra debug information while parsing?
WITHOUT_CLASSIFICATION	__end__ marker offset (-1 means none present)
WITHOUT_CLASSIFICATION	parser states
WITHOUT_CLASSIFICATION	is the parser current within a singleton (value is number of nested singletons)
WITHOUT_CLASSIFICATION	is the parser currently within a method definition
WITHOUT_CLASSIFICATION	localvar
WITHOUT_CLASSIFICATION	constant
WITHOUT_CLASSIFICATION	instance variable
WITHOUT_CLASSIFICATION	add real top to new top (unless this top is empty [only begin/end nodes or truly empty])
WITHOUT_CLASSIFICATION	mri block_append
WITHOUT_CLASSIFICATION	reduces overhead in interp by not set position every single line we encounter.
WITHOUT_CLASSIFICATION	assumption tail is never a list node
WITHOUT_CLASSIFICATION	return new calloneargnode(firstnode.getposition() firstnode operator new arraynode(secondnode.getposition() secondnode))
WITHOUT_CLASSIFICATION	node
WITHOUT_CLASSIFICATION	fixme temporarily disabling because this fires way too much running rails tests. jruby-518
WITHOUT_CLASSIFICATION	case constnode handleuselesswarn(node "a constant") return
WITHOUT_CLASSIFICATION	fixme temporarily disabling because this fires way too much running rails tests. jruby-518
WITHOUT_CLASSIFICATION	case classnode case colon2node handleuselesswarn(node "") return
WITHOUT_CLASSIFICATION	case selfnode handleuselesswarn(node "self") return
WITHOUT_CLASSIFICATION	fixme dstrevstrstr warning "string literal in condition"
WITHOUT_CLASSIFICATION	mri range_op
WITHOUT_CLASSIFICATION	block and block pass passed in at same time.uh oh
WITHOUT_CLASSIFICATION	foo()
WITHOUT_CLASSIFICATION	foo()
WITHOUT_CLASSIFICATION	foo()
WITHOUT_CLASSIFICATION	tail must be evstrnode at this point
WITHOUT_CLASSIFICATION	do not add an empty string node
WITHOUT_CLASSIFICATION	zero-argument declaration
WITHOUT_CLASSIFICATION	yylhs 542
WITHOUT_CLASSIFICATION	yylhs 542
WITHOUT_CLASSIFICATION	yylhs 542
WITHOUT_CLASSIFICATION	yylhs 542
WITHOUT_CLASSIFICATION	yylhs 542
WITHOUT_CLASSIFICATION	yylhs 542
WITHOUT_CLASSIFICATION	yylen 542
WITHOUT_CLASSIFICATION	yylen 542
WITHOUT_CLASSIFICATION	yylen 542
WITHOUT_CLASSIFICATION	yylen 542
WITHOUT_CLASSIFICATION	yylen 542
WITHOUT_CLASSIFICATION	yydefred 945
WITHOUT_CLASSIFICATION	yydefred 945
WITHOUT_CLASSIFICATION	yydefred 945
WITHOUT_CLASSIFICATION	yydefred 945
WITHOUT_CLASSIFICATION	yydefred 945
WITHOUT_CLASSIFICATION	yydgoto 152
WITHOUT_CLASSIFICATION	yydgoto 152
WITHOUT_CLASSIFICATION	yydgoto 152
WITHOUT_CLASSIFICATION	yydgoto 152
WITHOUT_CLASSIFICATION	yydgoto 152
WITHOUT_CLASSIFICATION	yydgoto 152
WITHOUT_CLASSIFICATION	yysindex 945
WITHOUT_CLASSIFICATION	yysindex 945
WITHOUT_CLASSIFICATION	yysindex 945
WITHOUT_CLASSIFICATION	yysindex 945
WITHOUT_CLASSIFICATION	yysindex 945
WITHOUT_CLASSIFICATION	yyrindex 945
WITHOUT_CLASSIFICATION	yyrindex 945
WITHOUT_CLASSIFICATION	yyrindex 945
WITHOUT_CLASSIFICATION	yyrindex 945
WITHOUT_CLASSIFICATION	yyrindex 945
WITHOUT_CLASSIFICATION	yygindex 152
WITHOUT_CLASSIFICATION	yygindex 152
WITHOUT_CLASSIFICATION	yygindex 152
WITHOUT_CLASSIFICATION	yygindex 152
WITHOUT_CLASSIFICATION	yygindex 152
WITHOUT_CLASSIFICATION	dynamically increase
WITHOUT_CLASSIFICATION	else [default] reduce (yyn)
WITHOUT_CLASSIFICATION	shift to yyn
WITHOUT_CLASSIFICATION	reduce (yyn)
WITHOUT_CLASSIFICATION	leave stack alone
WITHOUT_CLASSIFICATION	line 321
WITHOUT_CLASSIFICATION	line 351
WITHOUT_CLASSIFICATION	line 382
WITHOUT_CLASSIFICATION	line 417
WITHOUT_CLASSIFICATION	line 420
WITHOUT_CLASSIFICATION	line 423
WITHOUT_CLASSIFICATION	line 426
WITHOUT_CLASSIFICATION	line 280
WITHOUT_CLASSIFICATION	line 283
WITHOUT_CLASSIFICATION	line 296
WITHOUT_CLASSIFICATION	line 324
WITHOUT_CLASSIFICATION	line 327
WITHOUT_CLASSIFICATION	line 331
WITHOUT_CLASSIFICATION	line 333
WITHOUT_CLASSIFICATION	line 336
WITHOUT_CLASSIFICATION	line 342
WITHOUT_CLASSIFICATION	line 345
WITHOUT_CLASSIFICATION	line 348
WITHOUT_CLASSIFICATION	line 354
WITHOUT_CLASSIFICATION	line 368
WITHOUT_CLASSIFICATION	line 377
WITHOUT_CLASSIFICATION	line 388
WITHOUT_CLASSIFICATION	line 392
WITHOUT_CLASSIFICATION	line 397
WITHOUT_CLASSIFICATION	line 429
WITHOUT_CLASSIFICATION	line 432
WITHOUT_CLASSIFICATION	line 436
WITHOUT_CLASSIFICATION	line 445
WITHOUT_CLASSIFICATION	line 448
WITHOUT_CLASSIFICATION	line 454
WITHOUT_CLASSIFICATION	line 459
WITHOUT_CLASSIFICATION	line 466
WITHOUT_CLASSIFICATION	line 469
WITHOUT_CLASSIFICATION	line 478
WITHOUT_CLASSIFICATION	line 481
WITHOUT_CLASSIFICATION	line 488
WITHOUT_CLASSIFICATION	line 494
WITHOUT_CLASSIFICATION	line 497
WITHOUT_CLASSIFICATION	line 503
WITHOUT_CLASSIFICATION	line 506
WITHOUT_CLASSIFICATION	line 509
WITHOUT_CLASSIFICATION	line 512
WITHOUT_CLASSIFICATION	line 521
WITHOUT_CLASSIFICATION	line 526
WITHOUT_CLASSIFICATION	line 540
WITHOUT_CLASSIFICATION	line 543
WITHOUT_CLASSIFICATION	line 546
WITHOUT_CLASSIFICATION	line 566
WITHOUT_CLASSIFICATION	line 610
WITHOUT_CLASSIFICATION	line 672
WITHOUT_CLASSIFICATION	line 691
WITHOUT_CLASSIFICATION	line 696
WITHOUT_CLASSIFICATION	line 772
WITHOUT_CLASSIFICATION	line 782
WITHOUT_CLASSIFICATION	line 785
WITHOUT_CLASSIFICATION	line 788
WITHOUT_CLASSIFICATION	line 791
WITHOUT_CLASSIFICATION	line 534
WITHOUT_CLASSIFICATION	line 549
WITHOUT_CLASSIFICATION	line 552
WITHOUT_CLASSIFICATION	line 558
WITHOUT_CLASSIFICATION	line 561
WITHOUT_CLASSIFICATION	line 571
WITHOUT_CLASSIFICATION	line 574
WITHOUT_CLASSIFICATION	line 579
WITHOUT_CLASSIFICATION	line 586
WITHOUT_CLASSIFICATION	line 589
WITHOUT_CLASSIFICATION	line 592
WITHOUT_CLASSIFICATION	line 595
WITHOUT_CLASSIFICATION	line 598
WITHOUT_CLASSIFICATION	line 623
WITHOUT_CLASSIFICATION	line 627
WITHOUT_CLASSIFICATION	line 630
WITHOUT_CLASSIFICATION	line 633
WITHOUT_CLASSIFICATION	line 639
WITHOUT_CLASSIFICATION	line 648
WITHOUT_CLASSIFICATION	line 657
WITHOUT_CLASSIFICATION	line 661
WITHOUT_CLASSIFICATION	line 666
WITHOUT_CLASSIFICATION	line 678
WITHOUT_CLASSIFICATION	line 682
WITHOUT_CLASSIFICATION	line 688
WITHOUT_CLASSIFICATION	line 699
WITHOUT_CLASSIFICATION	line 706
WITHOUT_CLASSIFICATION	line 708
WITHOUT_CLASSIFICATION	line 727
WITHOUT_CLASSIFICATION	line 737
WITHOUT_CLASSIFICATION	line 753
WITHOUT_CLASSIFICATION	line 779
WITHOUT_CLASSIFICATION	line 801
WITHOUT_CLASSIFICATION	line 808
WITHOUT_CLASSIFICATION	line 811
WITHOUT_CLASSIFICATION	line 817
WITHOUT_CLASSIFICATION	line 842
WITHOUT_CLASSIFICATION	line 845
WITHOUT_CLASSIFICATION	line 848
WITHOUT_CLASSIFICATION	line 893
WITHOUT_CLASSIFICATION	line 899
WITHOUT_CLASSIFICATION	line 932
WITHOUT_CLASSIFICATION	line 944
WITHOUT_CLASSIFICATION	line 960
WITHOUT_CLASSIFICATION	line 980
WITHOUT_CLASSIFICATION	line 1004
WITHOUT_CLASSIFICATION	line 1038
WITHOUT_CLASSIFICATION	line 820
WITHOUT_CLASSIFICATION	line 826
WITHOUT_CLASSIFICATION	line 829
WITHOUT_CLASSIFICATION	line 832
WITHOUT_CLASSIFICATION	line 851
WITHOUT_CLASSIFICATION	line 857
WITHOUT_CLASSIFICATION	line 860
WITHOUT_CLASSIFICATION	line 863
WITHOUT_CLASSIFICATION	line 866
WITHOUT_CLASSIFICATION	line 869
WITHOUT_CLASSIFICATION	line 875
WITHOUT_CLASSIFICATION	line 884
WITHOUT_CLASSIFICATION	line 887
WITHOUT_CLASSIFICATION	line 890
WITHOUT_CLASSIFICATION	line 902
WITHOUT_CLASSIFICATION	line 909
WITHOUT_CLASSIFICATION	line 912
WITHOUT_CLASSIFICATION	line 916
WITHOUT_CLASSIFICATION	line 922
WITHOUT_CLASSIFICATION	line 928
WITHOUT_CLASSIFICATION	line 941
WITHOUT_CLASSIFICATION	line 947
WITHOUT_CLASSIFICATION	line 951
WITHOUT_CLASSIFICATION	line 955
WITHOUT_CLASSIFICATION	line 965
WITHOUT_CLASSIFICATION	line 969
WITHOUT_CLASSIFICATION	line 977
WITHOUT_CLASSIFICATION	line 983
WITHOUT_CLASSIFICATION	line 1013
WITHOUT_CLASSIFICATION	line 1023
WITHOUT_CLASSIFICATION	line 1035
WITHOUT_CLASSIFICATION	line 1041
WITHOUT_CLASSIFICATION	line 1043
WITHOUT_CLASSIFICATION	line 1054
WITHOUT_CLASSIFICATION	line 1057
WITHOUT_CLASSIFICATION	line 1060
WITHOUT_CLASSIFICATION	line 1069
WITHOUT_CLASSIFICATION	line 1075
WITHOUT_CLASSIFICATION	line 1105
WITHOUT_CLASSIFICATION	line 1111
WITHOUT_CLASSIFICATION	line 1122
WITHOUT_CLASSIFICATION	line 1130
WITHOUT_CLASSIFICATION	line 1140
WITHOUT_CLASSIFICATION	line 1158
WITHOUT_CLASSIFICATION	line 1204
WITHOUT_CLASSIFICATION	line 1207
WITHOUT_CLASSIFICATION	line 1247
WITHOUT_CLASSIFICATION	line 1251
WITHOUT_CLASSIFICATION	line 1261
WITHOUT_CLASSIFICATION	line 1078
WITHOUT_CLASSIFICATION	line 1084
WITHOUT_CLASSIFICATION	line 1087
WITHOUT_CLASSIFICATION	line 1090
WITHOUT_CLASSIFICATION	line 1093
WITHOUT_CLASSIFICATION	line 1114
WITHOUT_CLASSIFICATION	line 1116
WITHOUT_CLASSIFICATION	line 1118
WITHOUT_CLASSIFICATION	line 1124
WITHOUT_CLASSIFICATION	line 1126
WITHOUT_CLASSIFICATION	line 1138
WITHOUT_CLASSIFICATION	line 1144
WITHOUT_CLASSIFICATION	line 1149
WITHOUT_CLASSIFICATION	line 1155
WITHOUT_CLASSIFICATION	line 1162
WITHOUT_CLASSIFICATION	line 1173
WITHOUT_CLASSIFICATION	line 1179
WITHOUT_CLASSIFICATION	line 1182
WITHOUT_CLASSIFICATION	line 1190
WITHOUT_CLASSIFICATION	line 1196
WITHOUT_CLASSIFICATION	line 1213
WITHOUT_CLASSIFICATION	line 1217
WITHOUT_CLASSIFICATION	line 1231
WITHOUT_CLASSIFICATION	line 1236
WITHOUT_CLASSIFICATION	line 1244
WITHOUT_CLASSIFICATION	line 1254
WITHOUT_CLASSIFICATION	line 1258
WITHOUT_CLASSIFICATION	line 1264
WITHOUT_CLASSIFICATION	line 1270
WITHOUT_CLASSIFICATION	line 1273
WITHOUT_CLASSIFICATION	line 1276
WITHOUT_CLASSIFICATION	line 1279
WITHOUT_CLASSIFICATION	line 1282
WITHOUT_CLASSIFICATION	line 1289
WITHOUT_CLASSIFICATION	line 1292
WITHOUT_CLASSIFICATION	line 1295
WITHOUT_CLASSIFICATION	line 1298
WITHOUT_CLASSIFICATION	line 1305
WITHOUT_CLASSIFICATION	line 1348
WITHOUT_CLASSIFICATION	line 1387
WITHOUT_CLASSIFICATION	line 1392
WITHOUT_CLASSIFICATION	line 1448
WITHOUT_CLASSIFICATION	line 1462
WITHOUT_CLASSIFICATION	line 1470
WITHOUT_CLASSIFICATION	line 1496
WITHOUT_CLASSIFICATION	line 1502
WITHOUT_CLASSIFICATION	line 1595
WITHOUT_CLASSIFICATION	line 1598
WITHOUT_CLASSIFICATION	line 1308
WITHOUT_CLASSIFICATION	line 1311
WITHOUT_CLASSIFICATION	line 1317
WITHOUT_CLASSIFICATION	line 1323
WITHOUT_CLASSIFICATION	line 1326
WITHOUT_CLASSIFICATION	line 1329
WITHOUT_CLASSIFICATION	line 1337
WITHOUT_CLASSIFICATION	line 1342
WITHOUT_CLASSIFICATION	line 1345
WITHOUT_CLASSIFICATION	line 1354
WITHOUT_CLASSIFICATION	line 1359
WITHOUT_CLASSIFICATION	line 1366
WITHOUT_CLASSIFICATION	line 1369
WITHOUT_CLASSIFICATION	line 1373
WITHOUT_CLASSIFICATION	line 1377
WITHOUT_CLASSIFICATION	line 1383
WITHOUT_CLASSIFICATION	line 1399
WITHOUT_CLASSIFICATION	line 1401
WITHOUT_CLASSIFICATION	line 1406
WITHOUT_CLASSIFICATION	line 1417
WITHOUT_CLASSIFICATION	line 1424
WITHOUT_CLASSIFICATION	line 1427
WITHOUT_CLASSIFICATION	line 1430
WITHOUT_CLASSIFICATION	line 1433
WITHOUT_CLASSIFICATION	line 1436
WITHOUT_CLASSIFICATION	line 1442
WITHOUT_CLASSIFICATION	line 1445
WITHOUT_CLASSIFICATION	line 1458
WITHOUT_CLASSIFICATION	line 1464
WITHOUT_CLASSIFICATION	line 1489
WITHOUT_CLASSIFICATION	line 1493
WITHOUT_CLASSIFICATION	line 1507
WITHOUT_CLASSIFICATION	line 1519
WITHOUT_CLASSIFICATION	line 1532
WITHOUT_CLASSIFICATION	line 1538
WITHOUT_CLASSIFICATION	line 1542
WITHOUT_CLASSIFICATION	line 1557
WITHOUT_CLASSIFICATION	line 1573
WITHOUT_CLASSIFICATION	line 1591
WITHOUT_CLASSIFICATION	line 1615
WITHOUT_CLASSIFICATION	line 1629
WITHOUT_CLASSIFICATION	line 1632
WITHOUT_CLASSIFICATION	line 1705
WITHOUT_CLASSIFICATION	line 1716
WITHOUT_CLASSIFICATION	line 1725
WITHOUT_CLASSIFICATION	line 1742
WITHOUT_CLASSIFICATION	line 1749
WITHOUT_CLASSIFICATION	line 1818
WITHOUT_CLASSIFICATION	line 1822
WITHOUT_CLASSIFICATION	line 1607
WITHOUT_CLASSIFICATION	line 1610
WITHOUT_CLASSIFICATION	line 1622
WITHOUT_CLASSIFICATION	line 1625
WITHOUT_CLASSIFICATION	line 1636
WITHOUT_CLASSIFICATION	line 1639
WITHOUT_CLASSIFICATION	line 1647
WITHOUT_CLASSIFICATION	line 1651
WITHOUT_CLASSIFICATION	line 1657
WITHOUT_CLASSIFICATION	line 1660
WITHOUT_CLASSIFICATION	line 1663
WITHOUT_CLASSIFICATION	line 1678
WITHOUT_CLASSIFICATION	line 1702
WITHOUT_CLASSIFICATION	line 1711
WITHOUT_CLASSIFICATION	line 1719
WITHOUT_CLASSIFICATION	line 1722
WITHOUT_CLASSIFICATION	line 1731
WITHOUT_CLASSIFICATION	line 1734
WITHOUT_CLASSIFICATION	line 1738
WITHOUT_CLASSIFICATION	line 1746
WITHOUT_CLASSIFICATION	line 1756
WITHOUT_CLASSIFICATION	line 1758
WITHOUT_CLASSIFICATION	line 1761
WITHOUT_CLASSIFICATION	line 1767
WITHOUT_CLASSIFICATION	line 1776
WITHOUT_CLASSIFICATION	line 1782
WITHOUT_CLASSIFICATION	line 1785
WITHOUT_CLASSIFICATION	line 1788
WITHOUT_CLASSIFICATION	line 1791
WITHOUT_CLASSIFICATION	line 1797
WITHOUT_CLASSIFICATION	line 1800
WITHOUT_CLASSIFICATION	line 1803
WITHOUT_CLASSIFICATION	line 1806
WITHOUT_CLASSIFICATION	line 1809
WITHOUT_CLASSIFICATION	line 1815
WITHOUT_CLASSIFICATION	line 1825
WITHOUT_CLASSIFICATION	line 1828
WITHOUT_CLASSIFICATION	line 1831
WITHOUT_CLASSIFICATION	line 1847
WITHOUT_CLASSIFICATION	$8 == null ? nilimplicitnode.nil $8
WITHOUT_CLASSIFICATION	$5 == null ? nilimplicitnode.nil $5
WITHOUT_CLASSIFICATION	.setposfrom($2)
WITHOUT_CLASSIFICATION	zero length array
WITHOUT_CLASSIFICATION	dstrnode "some text #{some expression}"
WITHOUT_CLASSIFICATION	strnode "some text"
WITHOUT_CLASSIFICATION	evstrnode "#{some expression}"
WITHOUT_CLASSIFICATION	instance variable methods
WITHOUT_CLASSIFICATION	line 1854
WITHOUT_CLASSIFICATION	line 1869
WITHOUT_CLASSIFICATION	line 1872
WITHOUT_CLASSIFICATION	line 1877
WITHOUT_CLASSIFICATION	line 1886
WITHOUT_CLASSIFICATION	line 1898
WITHOUT_CLASSIFICATION	line 1902
WITHOUT_CLASSIFICATION	line 1905
WITHOUT_CLASSIFICATION	line 1911
WITHOUT_CLASSIFICATION	line 1918
WITHOUT_CLASSIFICATION	line 1935
WITHOUT_CLASSIFICATION	line 1938
WITHOUT_CLASSIFICATION	line 1942
WITHOUT_CLASSIFICATION	line 1948
WITHOUT_CLASSIFICATION	line 1960
WITHOUT_CLASSIFICATION	line 1963
WITHOUT_CLASSIFICATION	line 1968
WITHOUT_CLASSIFICATION	line 1972
WITHOUT_CLASSIFICATION	line 1982
WITHOUT_CLASSIFICATION	line 1995
WITHOUT_CLASSIFICATION	line 2000
WITHOUT_CLASSIFICATION	line 2006
WITHOUT_CLASSIFICATION	line 2010
WITHOUT_CLASSIFICATION	we may need to subtract addition offset off of first
WITHOUT_CLASSIFICATION	string fragment (we optimistically take one off in
WITHOUT_CLASSIFICATION	parsersupport.literal_concat). check token length
WITHOUT_CLASSIFICATION	and subtract as neeeded.
WITHOUT_CLASSIFICATION	$$ = new argauxiliarynode($1.getposition() (string) $1.getvalue() 1)
WITHOUT_CLASSIFICATION	enebo arg surrounded by in_defined set/unset
WITHOUT_CLASSIFICATION	ignore no debugger present
WITHOUT_CLASSIFICATION	yyparse(lexer new jay.yydebug.yyanim("jruby" 9))
WITHOUT_CLASSIFICATION	mark as captured if from containing scope
WITHOUT_CLASSIFICATION	mark as captured if from containing scope
WITHOUT_CLASSIFICATION	enebo removed !compile_for_eval which probably is to reduce warnings
WITHOUT_CLASSIFICATION	was $$ = null
WITHOUT_CLASSIFICATION	line 2019 "ruby19parser.y"
WITHOUT_CLASSIFICATION	line 8143 "-"
WITHOUT_CLASSIFICATION	we know variables cannot be null since localstaticscope will create a 0 length one.
WITHOUT_CLASSIFICATION	no bit math to store level since we know level is zero for this case
WITHOUT_CLASSIFICATION	next immediate scope. variable and constant scoping rules make use of this variable in different ways.
WITHOUT_CLASSIFICATION	live reference to module
WITHOUT_CLASSIFICATION	next cref down the lexical structure
WITHOUT_CLASSIFICATION	our name holder (offsets are assigned as variables are added
WITHOUT_CLASSIFICATION	number of variables in this scope representing required arguments
WITHOUT_CLASSIFICATION	number of variables in this scope representing optional arguments
WITHOUT_CLASSIFICATION	index of variable that represents a "rest" arg
WITHOUT_CLASSIFICATION	note that this object equality check is intentional to ensure the string and its interned version are the same object.
WITHOUT_CLASSIFICATION	returns slot of variable
WITHOUT_CLASSIFICATION	returns slot of variable
WITHOUT_CLASSIFICATION	note only used by compiler until it can use getconstant again or use some other refactoring
WITHOUT_CLASSIFICATION	if we could not find the constant from cref..then try getting from inheritence hierarchy
WITHOUT_CLASSIFICATION	try and unload the autoload specified from internedname
WITHOUT_CLASSIFICATION	we override that the logic which uses this
WITHOUT_CLASSIFICATION	this while loop is for restarting the block call in case a 'redo' fires.
WITHOUT_CLASSIFICATION	do nothing allow loop to redo
WITHOUT_CLASSIFICATION	source extensions
WITHOUT_CLASSIFICATION	do nothing allow loop to redo
WITHOUT_CLASSIFICATION	. array given to rest should pass itself . array with rest + other args should extract array . array with multiple values and no rest should extract args if there are more than one argument
WITHOUT_CLASSIFICATION	a 'next' is like a local return from the block ending this call or yield.
WITHOUT_CLASSIFICATION	is this thread currently with in a function trace?
WITHOUT_CLASSIFICATION	is this thread currently doing an defined? defined should set things like $!
WITHOUT_CLASSIFICATION	private unsynchronizedstack parentstack
WITHOUT_CLASSIFICATION	private unsynchronizedstack framestack
WITHOUT_CLASSIFICATION	list of active dynamic scopes. each of these may have captured other dynamic scopes to implement closures.
WITHOUT_CLASSIFICATION	file where current executing unit is being evaluated
WITHOUT_CLASSIFICATION	line where current executing unit is being evaluated
WITHOUT_CLASSIFICATION	in certain places like grep we don't use real frames for the call blocks. this has the effect of not setting the backref in the correct frame - this delta is activated to the place where the grep is running in so that the backref will be set in an appropriate place.
WITHOUT_CLASSIFICATION	toplevel self and a few others want a top-level scope. we create this one right away and then pass it into top-level parse so it ends up being the top level.
WITHOUT_CLASSIFICATION	catch management
WITHOUT_CLASSIFICATION	frame management
WITHOUT_CLASSIFICATION	happens with native exceptions should not filter those out
WITHOUT_CLASSIFICATION	assert level == 0
WITHOUT_CLASSIFICATION	assert level == 0
WITHOUT_CLASSIFICATION	look for mangling markers for compiled ruby in method name
WITHOUT_CLASSIFICATION	if it's not a rescue or ensure there's a frame associated so decrement
WITHOUT_CLASSIFICATION	look for __file__ method name for compiled roots
WITHOUT_CLASSIFICATION	all entries following removed node can stay in list but all preceding ones need to be cloned.
WITHOUT_CLASSIFICATION	required and optional only
WITHOUT_CLASSIFICATION	do nothing allow loop to redo
WITHOUT_CLASSIFICATION	look for mangling markers for bound unframed methods in class name
WITHOUT_CLASSIFICATION	set the binding's frame's "previous" file and line to current so trace will show who called the block
WITHOUT_CLASSIFICATION	framed invokers will have ruby frames associated with them
WITHOUT_CLASSIFICATION	look for mangling markers for bound framed methods in class name
WITHOUT_CLASSIFICATION	unframed invokers have no ruby frames so pull from class name but use current frame as file and line
WITHOUT_CLASSIFICATION	try to mine out a ruby frame using our list of interpreter entry-point markers
WITHOUT_CLASSIFICATION	frame matches one of our markers for "interpreted" calls
WITHOUT_CLASSIFICATION	frame is extraneous runtime information skip it unless debug
WITHOUT_CLASSIFICATION	determine what sort of assigner should be used for the provided 'iter' (e.g. block). assigner provides just the right logic for assigning values to local parameters of the block. this method also has a second optimization which is to set 'noargblock' in the case that the block is a block which accepts no arguments. the primary reason for this second optimization is that in the case of a yield with a rubyarray we will bypass some logic processing the rubyarray into a proper form (only to then not do anythign with it). a secondary benefit is that a simple boolean seems to optimize by hotspot much faster than the zero arg assigner.
WITHOUT_CLASSIFICATION	new scope for this invocation of the block based on parent scope
WITHOUT_CLASSIFICATION	no argument blocks
WITHOUT_CLASSIFICATION	just push the same empty scope since we won't use one
WITHOUT_CLASSIFICATION	not sure if this is actually possible but better safe than sorry
WITHOUT_CLASSIFICATION	rest arg must be splatted
WITHOUT_CLASSIFICATION	this should only be called by 1.8 (1.9 subclasses this to handle unusedblock).
WITHOUT_CLASSIFICATION	highest reserved id
WITHOUT_CLASSIFICATION	binary typed calls
WITHOUT_CLASSIFICATION	id must always be even
WITHOUT_CLASSIFICATION	with block pass
WITHOUT_CLASSIFICATION	no block
WITHOUT_CLASSIFICATION	with block literal (iter)
WITHOUT_CLASSIFICATION	assert false "can this happen?"
WITHOUT_CLASSIFICATION	if we have multiple asgn with just args need a special type for that
WITHOUT_CLASSIFICATION	&& args.getmaxargumentscount() != 1) {
WITHOUT_CLASSIFICATION	return warnmultireturnnil(ruby)
WITHOUT_CLASSIFICATION	ensure zero is devoted to no method name
WITHOUT_CLASSIFICATION	predefine a few other methods we invoke directly elsewhere
WITHOUT_CLASSIFICATION	fast and safe respond_to? call site logic
WITHOUT_CLASSIFICATION	static scoping information for this scope
WITHOUT_CLASSIFICATION	captured dynamic scopes
WITHOUT_CLASSIFICATION	backref for $~ $1 etc
WITHOUT_CLASSIFICATION	lastline
WITHOUT_CLASSIFICATION	no binding scope so we should create one
WITHOUT_CLASSIFICATION	bindings scopes must always be manyvars scopes since evals can grow them
WITHOUT_CLASSIFICATION	helper function to give a good view of current dynamic scope with captured scopes
WITHOUT_CLASSIFICATION	try count specific args to determine required
WITHOUT_CLASSIFICATION	some helper functions
WITHOUT_CLASSIFICATION	silently ignore
WITHOUT_CLASSIFICATION	used by compiler
WITHOUT_CLASSIFICATION	initialize the static settings to determine which factory to use
WITHOUT_CLASSIFICATION	instance variable methods
WITHOUT_CLASSIFICATION	we need to guarantee that any existing reads of old map can proceed. so we cannot yet null out each bin.
WITHOUT_CLASSIFICATION	single node on list
WITHOUT_CLASSIFICATION	reuse trailing consecutive sequence at same slot
WITHOUT_CLASSIFICATION	clone all remaining nodes
WITHOUT_CLASSIFICATION	a 'next' is like a local return from the block ending this call or yield.
WITHOUT_CLASSIFICATION	note in ruby 1.9 all of this logic can go away since they will require explicit bindings for evals.
WITHOUT_CLASSIFICATION	we only define one special dynamic scope per 'logical' binding. so all bindings for the same scope should share the same dynamic scope. this allows multiple evals with different different bindings in the same scope to see the same stuff.
WITHOUT_CLASSIFICATION	if the next scope out has the same binding scope as this scope it means we are evaling within an eval and in that case we should be sharing the same binding scope.
WITHOUT_CLASSIFICATION	populate up to shorter of calling arguments or local parameters in the block
WITHOUT_CLASSIFICATION	populate up to shorter of calling arguments or local parameters in the block
WITHOUT_CLASSIFICATION	nil pad since we provided less values than block parms
WITHOUT_CLASSIFICATION	nil pad since we provided less values than block parms
WITHOUT_CLASSIFICATION	nil pad since we provided less values than block parms
WITHOUT_CLASSIFICATION	no extra args for rest
WITHOUT_CLASSIFICATION	no extra args for rest
WITHOUT_CLASSIFICATION	extra args for rest
WITHOUT_CLASSIFICATION	extra args for rest
WITHOUT_CLASSIFICATION	this is the proper behavior for all non-expanded assigners which have a pre > 0. the rest override this.
WITHOUT_CLASSIFICATION	this is the proper behavior for all non-expanded assigners.
WITHOUT_CLASSIFICATION	prefill ?
WITHOUT_CLASSIFICATION	prefill ?
WITHOUT_CLASSIFICATION	must be called from synchronized/locked block! should only be called by variabletablestore/variabletablefaststore
WITHOUT_CLASSIFICATION	retrieve method module name
WITHOUT_CLASSIFICATION	call is ok punch it!
WITHOUT_CLASSIFICATION	if undefined branch to method_missing
WITHOUT_CLASSIFICATION	if we're not attempting to invoke method_missing and method is not visible branch to method_missing
WITHOUT_CLASSIFICATION	method object already present push various args tc self klazz name
WITHOUT_CLASSIFICATION	if it's method_missing just invoke it
WITHOUT_CLASSIFICATION	invoke callmethodmissing
WITHOUT_CLASSIFICATION	caller
WITHOUT_CLASSIFICATION	calltype block
WITHOUT_CLASSIFICATION	if no exception raised jump to end to leave result on stack for return
WITHOUT_CLASSIFICATION	load arity for check
WITHOUT_CLASSIFICATION	throw
WITHOUT_CLASSIFICATION	load arity for error
WITHOUT_CLASSIFICATION	arity ok continue
WITHOUT_CLASSIFICATION	invocationcallbackfactory
WITHOUT_CLASSIFICATION	enebo perhaps slow but simple for now
WITHOUT_CLASSIFICATION	fastinvocationcallback
WITHOUT_CLASSIFICATION	invocationcallback
WITHOUT_CLASSIFICATION	dumpinginvocationcallbackfactory
WITHOUT_CLASSIFICATION	for fast lookup encoding entry => org.jruby.rubyencoding
WITHOUT_CLASSIFICATION	for fast lookup org.joni.encoding.encoding => org.jruby.rubyencoding
WITHOUT_CLASSIFICATION	load the encoding
WITHOUT_CLASSIFICATION	irubyobject dynamicmethod rubyclass cacheentry threadcontext irubyobject irubyobject string
WITHOUT_CLASSIFICATION	irubyobject rubyclass cacheentry threadcontext irubyobject irubyobject string
WITHOUT_CLASSIFICATION	irubyobject cacheentry threadcontext irubyobject irubyobject string
WITHOUT_CLASSIFICATION	irubyobject dynamicmethod threadcontext irubyobject rubymodule string irubyobject
WITHOUT_CLASSIFICATION	irubyobject dynamicmethod threadcontext irubyobject rubyclass string irubyobject
WITHOUT_CLASSIFICATION	irubyobject dynamicmethod rubyclass cacheentry threadcontext irubyobject irubyobject string irubyobject
WITHOUT_CLASSIFICATION	irubyobject rubyclass cacheentry threadcontext irubyobject irubyobject string irubyobject
WITHOUT_CLASSIFICATION	irubyobject cacheentry threadcontext irubyobject irubyobject string irubyobject
WITHOUT_CLASSIFICATION	irubyobject dynamicmethod rubyclass cacheentry threadcontext irubyobject irubyobject string args
WITHOUT_CLASSIFICATION	irubyobject rubyclass cacheentry threadcontext irubyobject irubyobject string args
WITHOUT_CLASSIFICATION	irubyobject cacheentry threadcontext irubyobject irubyobject string args
WITHOUT_CLASSIFICATION	irubyobject rubyclass cacheentry threadcontext irubyobject irubyobject string args
WITHOUT_CLASSIFICATION	irubyobject rubyclass cacheentry threadcontext irubyobject irubyobject string args
WITHOUT_CLASSIFICATION	irubyobject rubyclass cacheentry threadcontext irubyobject irubyobject string args
WITHOUT_CLASSIFICATION	irubyobject rubyclass cacheentry threadcontext irubyobject irubyobject string args
WITHOUT_CLASSIFICATION	irubyobject rubyclass cacheentry threadcontext irubyobject irubyobject string args
WITHOUT_CLASSIFICATION	irubyobject rubyclass cacheentry threadcontext irubyobject irubyobject string args
WITHOUT_CLASSIFICATION	irubyobject cacheentry threadcontext irubyobject irubyobject string args
WITHOUT_CLASSIFICATION	irubyobject cacheentry threadcontext irubyobject irubyobject string args
WITHOUT_CLASSIFICATION	irubyobject cacheentry threadcontext irubyobject irubyobject string args
WITHOUT_CLASSIFICATION	irubyobject cacheentry threadcontext irubyobject irubyobject string args
WITHOUT_CLASSIFICATION	irubyobject cacheentry threadcontext irubyobject irubyobject string args
WITHOUT_CLASSIFICATION	irubyobject cacheentry threadcontext irubyobject irubyobject string args
WITHOUT_CLASSIFICATION	if we're running in 1.9 compat mode add ruby 1.9 libs to path before 1.8 libs
WITHOUT_CLASSIFICATION	breakjump threadcontext
WITHOUT_CLASSIFICATION	threadcontext
WITHOUT_CLASSIFICATION	breakjump cacheentry threadcontext irubyobject irubyobject
WITHOUT_CLASSIFICATION	make java class files in the jar reachable from ruby
WITHOUT_CLASSIFICATION	retryjump cacheentry threadcontext irubyobject irubyobject
WITHOUT_CLASSIFICATION	add all startup load paths to the list first
WITHOUT_CLASSIFICATION	if it's a compiled jruby script instantiate and run it
WITHOUT_CLASSIFICATION	wrap in try/catch for security exceptions in an applet
WITHOUT_CLASSIFICATION	add $rubylib paths
WITHOUT_CLASSIFICATION	empty paths do not need to be added
WITHOUT_CLASSIFICATION	"." dir is used for relative path loads from a given file as in require '../foo/bar'
WITHOUT_CLASSIFICATION	add 1.8 libs
WITHOUT_CLASSIFICATION	create package name by splitting on / and joining all but the last elements with a "." and downcasing them.
WITHOUT_CLASSIFICATION	library has already been loaded in some form bail out
WITHOUT_CLASSIFICATION	we don't want a package name beginning with dots so we remove them
WITHOUT_CLASSIFICATION	if there is a jar-file with the required name we add this to the class path.
WITHOUT_CLASSIFICATION	quietly try to load the class
WITHOUT_CLASSIFICATION	if there was a good library before we go back to that
WITHOUT_CLASSIFICATION	no library or extension found try to load directly as a class
WITHOUT_CLASSIFICATION	if an extension is specified try more targetted searches
WITHOUT_CLASSIFICATION	signed short big-endian
WITHOUT_CLASSIFICATION	source extensions
WITHOUT_CLASSIFICATION	we don't support .so but some stdlib require .so directly replace it with .jar to look for an extension type we do support
WITHOUT_CLASSIFICATION	this code exploits the fact that all .jar files will be found for the jarredscript feature. this is where the basic extension mechanism gets fixed
WITHOUT_CLASSIFICATION	make the class name look nice by splitting on _ and capitalize each segment then joining the together without anything separating them and last put on "service" at the end.
WITHOUT_CLASSIFICATION	it's _really_ expensive to check that the class actually exists in the jar so we don't do that now.
WITHOUT_CLASSIFICATION	trim extension to try other options
WITHOUT_CLASSIFICATION	extension extensions
WITHOUT_CLASSIFICATION	unknown extension fall back to search with extensions
WITHOUT_CLASSIFICATION	try all extensions
WITHOUT_CLASSIFICATION	if a source extension is specified try all source extensions
WITHOUT_CLASSIFICATION	unknown extension fall back to exact search
WITHOUT_CLASSIFICATION	try only literal search
WITHOUT_CLASSIFICATION	attempt to load the found library
WITHOUT_CLASSIFICATION	otherwise load the library we've found
WITHOUT_CLASSIFICATION	allow mainexitexception to propagate out for exec and friends
WITHOUT_CLASSIFICATION	remove any relative prefix e.g. "./foo/bar" becomes "foo/bar".
WITHOUT_CLASSIFICATION	check current directory if file exists retrieve url and return resource
WITHOUT_CLASSIFICATION	if a jar or file url return load service resource directly without further searching
WITHOUT_CLASSIFICATION	end suffix iteration
WITHOUT_CLASSIFICATION	if it's a ./ basename use cwd logic
WITHOUT_CLASSIFICATION	if given path is absolute just try it as-is (with extensions) and no load path
WITHOUT_CLASSIFICATION	we check length == 0 for 'load' which does not use load path
WITHOUT_CLASSIFICATION	we check length == 0 for 'load' which does not use load path
WITHOUT_CLASSIFICATION	it's an absolute path use it as-is
WITHOUT_CLASSIFICATION	it's an absolute path use it as-is
WITHOUT_CLASSIFICATION	prepend ./ if . is not already there since we're loading based on cwd
WITHOUT_CLASSIFICATION	prepend ./ if . is not already there since we're loading based on cwd
WITHOUT_CLASSIFICATION	actualpath = new file(rubyfile.expanduserpath(runtime.getcurrentcontext() reportedpath))
WITHOUT_CLASSIFICATION	handle security-sensitive case
WITHOUT_CLASSIFICATION	if entry is an empty string skip it
WITHOUT_CLASSIFICATION	if entry starts with a slash skip it since classloader resources never start with a /
WITHOUT_CLASSIFICATION	otherwise try to load from classpath (note jar resources always uses '/')
WITHOUT_CLASSIFICATION	make sure this is not a directory or unavailable in some way
WITHOUT_CLASSIFICATION	signed short native
WITHOUT_CLASSIFICATION	if we fail to find as a normal ruby script we try to find as an extension checking for a builtin first.
WITHOUT_CLASSIFICATION	write `i' instance var signet if class is not a direct subclass of object
WITHOUT_CLASSIFICATION	if name starts with a / we're done (classloader resources won't load with an initial /)
WITHOUT_CLASSIFICATION	look in classpath next (we do not use file as a test since unc names will match) note jar resources must never begin with an '/'. (previous code said "always begin with a /")
WITHOUT_CLASSIFICATION	directories and unavailable resources are not able to open a stream.
WITHOUT_CLASSIFICATION	try to load from classpath without prefix. "a/b.rb" will not load as "./a/b.rb" in a jar file.
WITHOUT_CLASSIFICATION	object has instance vars and isn't a class get a snapshot to be marshalled and output the ivar header here
WITHOUT_CLASSIFICATION	flush afer whole dump is complete
WITHOUT_CLASSIFICATION	write('s')
WITHOUT_CLASSIFICATION	switch on the object's native type. this allows use-defined classes that have extended core native types to piggyback on their marshalling logic.
WITHOUT_CLASSIFICATION	object is a custom class that extended one of the native types other than object
WITHOUT_CLASSIFICATION	we do not want to capture cached methods
WITHOUT_CLASSIFICATION	w_symbol
WITHOUT_CLASSIFICATION	w_unique
WITHOUT_CLASSIFICATION	call the proc but not for symbols
WITHOUT_CLASSIFICATION	major minor
WITHOUT_CLASSIFICATION	any ivars since we don't have __attached__ ivar now
WITHOUT_CLASSIFICATION	"hashdef" object a hash with a default
WITHOUT_CLASSIFICATION	all "c" marshalled objects descend from core classes which are all rubyobject
WITHOUT_CLASSIFICATION	sic
WITHOUT_CLASSIFICATION	if we're not the "argument scope" for zsuper try our parent
WITHOUT_CLASSIFICATION	if we're not the "argument scope" for zsuper try our parent
WITHOUT_CLASSIFICATION	if we're not the "argument scope" for zsuper try our parent
WITHOUT_CLASSIFICATION	copy and splat arguments out of the scope to use for zsuper call
WITHOUT_CLASSIFICATION	copy and splat arguments out of the scope to use for zsuper call
WITHOUT_CLASSIFICATION	rest arg must be splatted
WITHOUT_CLASSIFICATION	rest arg must be splatted
WITHOUT_CLASSIFICATION	if we are setting post arguments we can assume there are no pre or others
WITHOUT_CLASSIFICATION	xxx 0xffff0000 on be?
WITHOUT_CLASSIFICATION	unsigned short native
WITHOUT_CLASSIFICATION	int native long native
WITHOUT_CLASSIFICATION	if we're not the "argument scope" for zsuper try our parent
WITHOUT_CLASSIFICATION	if we're not the "argument scope" for zsuper try our parent
WITHOUT_CLASSIFICATION	if we're not the "argument scope" for zsuper try our parent
WITHOUT_CLASSIFICATION	copy and splat arguments out of the scope to use for zsuper call
WITHOUT_CLASSIFICATION	copy and splat arguments out of the scope to use for zsuper call
WITHOUT_CLASSIFICATION	copy and splat arguments out of the scope to use for zsuper call
WITHOUT_CLASSIFICATION	rest arg must be splatted
WITHOUT_CLASSIFICATION	rest arg must be splatted
WITHOUT_CLASSIFICATION	look for slash starting from 'start' position until 'end'.
WITHOUT_CLASSIFICATION	our values holder (name of variables are kept in staticscope)
WITHOUT_CLASSIFICATION	&foo are not getting set from somewherei want the following assert to be true though assert variablevalues[offset] != null "getting unassigned " + staticscope.getvariables()[offset]
WITHOUT_CLASSIFICATION	&foo are not getting set from somewherei want the following assert to be true though assert variablevalues[offset] != null "getting unassigned " + staticscope.getvariables()[offset]
WITHOUT_CLASSIFICATION	&foo are not getting set from somewherei want the following assert to be true though assert variablevalues[offset] != null "getting unassigned " + staticscope.getvariables()[offset]
WITHOUT_CLASSIFICATION	&foo are not getting set from somewherei want the following assert to be true though assert variablevalues[offset] != null "getting unassigned " + staticscope.getvariables()[offset]
WITHOUT_CLASSIFICATION	&foo are not getting set from somewherei want the following assert to be true though assert variablevalues[offset] != null "getting unassigned " + staticscope.getvariables()[offset]
WITHOUT_CLASSIFICATION	sunsignalfacade
WITHOUT_CLASSIFICATION	all braces pushed..
WITHOUT_CLASSIFICATION	failed try next recursion
WITHOUT_CLASSIFICATION	lefttoken made us start as nest 1
WITHOUT_CLASSIFICATION	are we at ''
WITHOUT_CLASSIFICATION	no or mismatched braces..move along..nothing to see here
WITHOUT_CLASSIFICATION	not enough bytes
WITHOUT_CLASSIFICATION	get index of last read byte
WITHOUT_CLASSIFICATION	skip inner braces
WITHOUT_CLASSIFICATION	process {}'s (example dir.glob("{jrubyjython}/readme")
WITHOUT_CLASSIFICATION	complete according to posix.2
WITHOUT_CLASSIFICATION	only accept an open brace if there is a close
WITHOUT_CLASSIFICATION	brace to match it. bracket expressions must be
WITHOUT_CLASSIFICATION	index of left-most brace index of right-most brace
WITHOUT_CLASSIFICATION	length check is a hack. we should not be reeiving "" as a filename ever.
WITHOUT_CLASSIFICATION	not reached here
WITHOUT_CLASSIFICATION	not reached here
WITHOUT_CLASSIFICATION	not reached here
WITHOUT_CLASSIFICATION	pickaxe says @ must be followed by a name character but mri does not require this.
WITHOUT_CLASSIFICATION	pickaxe says @@ must be followed by a name character but mri does not require this.
WITHOUT_CLASSIFICATION	simplesampler
WITHOUT_CLASSIFICATION	convert into longs returning unsigned 64-bit values as signed longs ( num2long raises a rangeerror on values > long.max_value )
WITHOUT_CLASSIFICATION	b64_xtable for decoding base 64
WITHOUT_CLASSIFICATION	single precision little-endian
WITHOUT_CLASSIFICATION	single precision big-endian
WITHOUT_CLASSIFICATION	single precision native
WITHOUT_CLASSIFICATION	single precision native single precision native
WITHOUT_CLASSIFICATION	double precision little-endian
WITHOUT_CLASSIFICATION	double precision big-endian
WITHOUT_CLASSIFICATION	double precision native
WITHOUT_CLASSIFICATION	signed short little-endian
WITHOUT_CLASSIFICATION	signed char
WITHOUT_CLASSIFICATION	unsigned char
WITHOUT_CLASSIFICATION	long little-endian
WITHOUT_CLASSIFICATION	long big-endian
WITHOUT_CLASSIFICATION	unsigned int native
WITHOUT_CLASSIFICATION	int native
WITHOUT_CLASSIFICATION	64-bit number native (as fixnum)
WITHOUT_CLASSIFICATION	how many occurrences of 'type' we want
WITHOUT_CLASSIFICATION	see if we have a converter for the job
WITHOUT_CLASSIFICATION	otherwise the unpack should be here
WITHOUT_CLASSIFICATION	possible checksum byte
WITHOUT_CLASSIFICATION	obtain a
WITHOUT_CLASSIFICATION	obtain b
WITHOUT_CLASSIFICATION	obtain c
WITHOUT_CLASSIFICATION	obtain d
WITHOUT_CLASSIFICATION	encode.limit() -
WITHOUT_CLASSIFICATION	1
WITHOUT_CLASSIFICATION	2
WITHOUT_CLASSIFICATION	3
WITHOUT_CLASSIFICATION	4
WITHOUT_CLASSIFICATION	5
WITHOUT_CLASSIFICATION	6
WITHOUT_CLASSIFICATION	7
WITHOUT_CLASSIFICATION	skip all whitespace in pack format string
WITHOUT_CLASSIFICATION	skip embedded comments in pack format string
WITHOUT_CLASSIFICATION	in case when the number of occurences is explicitly specified we have to read up the remaining garbage after the '\0' to satisfy the requested pattern.
WITHOUT_CLASSIFICATION	normal exit this should be faster than a test at each iterations for string with more than about 40 char
WITHOUT_CLASSIFICATION	we encountered '\0' when were reading the buffer above increment the number of read bytes.
WITHOUT_CLASSIFICATION	mri behavior contrary to what seems to be logical when '' is given mri calculates the distance to the end in order to go backwards.
WITHOUT_CLASSIFICATION	determine how many of type are needed (default 1)
WITHOUT_CLASSIFICATION	'z' adds extra null pad (versus 'a')
WITHOUT_CLASSIFICATION	if the low bit is set set the high bit of the result
WITHOUT_CLASSIFICATION	if the index is not a multiple of 8 we are not on a byte boundary shift the byte
WITHOUT_CLASSIFICATION	if the length is not a multiple of 8 we need to pad the last byte
WITHOUT_CLASSIFICATION	if the length is not a multiple of 8 we need to pad the last byte
WITHOUT_CLASSIFICATION	do some padding i don't understand the padding strategy
WITHOUT_CLASSIFICATION	we filled up current byte append it and create next one
WITHOUT_CLASSIFICATION	if the index is not a multiple of 8 we are not on a byte boundary
WITHOUT_CLASSIFICATION	this test may be too lax but it is the same as in mri
WITHOUT_CLASSIFICATION	we don't deal with negatives.
WITHOUT_CLASSIFICATION	populate commandline with ng-provided stuff
WITHOUT_CLASSIFICATION	are we recursing?
WITHOUT_CLASSIFICATION	snip off ruby or jruby command from list of arguments leave alone if the command is the name of a script
WITHOUT_CLASSIFICATION	default pidgetter
WITHOUT_CLASSIFICATION	ignore and try windows version
WITHOUT_CLASSIFICATION	ignore and use hashcode
WITHOUT_CLASSIFICATION	ignore and use hashcode
WITHOUT_CLASSIFICATION	ignore and use hashcode
WITHOUT_CLASSIFICATION	ignore and use hashcode
WITHOUT_CLASSIFICATION	try both
WITHOUT_CLASSIFICATION	just unix
WITHOUT_CLASSIFICATION	just windows
WITHOUT_CLASSIFICATION	neither
WITHOUT_CLASSIFICATION	con popen is a case where i think we should just always shell out.
WITHOUT_CLASSIFICATION	single string command pass to sh to expand wildcards
WITHOUT_CLASSIFICATION	direct invocation of the command
WITHOUT_CLASSIFICATION	break out if we've dug as deep as we can
WITHOUT_CLASSIFICATION	break out if we've dug as deep as we can
WITHOUT_CLASSIFICATION	close process output see jruby-3405 hooking up to parent process stdin caused problems for irb etc using stdin.
WITHOUT_CLASSIFICATION	ignore we're on the way out
WITHOUT_CLASSIFICATION	processes seem to have some peculiar locking sequences so we need to ensure nobody is trying to close/destroy while we are
WITHOUT_CLASSIFICATION	popen callers wants to be able to read provide subprocess in directly
WITHOUT_CLASSIFICATION	popen callers wants to be able to read provide subprocess in directly
WITHOUT_CLASSIFICATION	popen caller wants to be able to write provide subprocess out directly
WITHOUT_CLASSIFICATION	no read requested hook up read to parents output
WITHOUT_CLASSIFICATION	no read requested hook up read to parents output
WITHOUT_CLASSIFICATION	execute command with sh -c this does shell expansion of wildcards
WITHOUT_CLASSIFICATION	we need to close the out since some processes would just wait for the stream to be closed before they process its content and produce the output. e.g. "cat".
WITHOUT_CLASSIFICATION	we only close out if it's the slave stream to avoid closing a directly-mapped stream from parent process
WITHOUT_CLASSIFICATION	the assumption here is that the 'in' stream provides proper available() support. if available() always returns 0 we'll hang!
WITHOUT_CLASSIFICATION	force t3 to quit just in case if it's stuck. note on some platforms even interrupt might not have an effect if the thread is io blocked.
WITHOUT_CLASSIFICATION	check for special shell characters [<>|] at the beginning and end of each command word and don't run in process if we find them.
WITHOUT_CLASSIFICATION	note this method produces meaningful results only for rubyio objects. for everything else returns 0.
WITHOUT_CLASSIFICATION	sequential
WITHOUT_CLASSIFICATION	reverse the entire area of the array selected if it's reversed.
WITHOUT_CLASSIFICATION	do median of 7 if the array is over 200 elements.
WITHOUT_CLASSIFICATION	if it's less than 200 do median of 3
WITHOUT_CLASSIFICATION	signalfacade
WITHOUT_CLASSIFICATION	this is the order in which mri does these two tests
WITHOUT_CLASSIFICATION	this is the order in which mri does these tests
WITHOUT_CLASSIFICATION	basically just forcing a typeerror here to match mri
WITHOUT_CLASSIFICATION	not saving dfs instance as it will only be used once (at most) per call
WITHOUT_CLASSIFICATION	args
WITHOUT_CLASSIFICATION	static methods only
WITHOUT_CLASSIFICATION	system.err.println(" calculatelength()/str=" + str)
WITHOUT_CLASSIFICATION	mri 1.8.6 behavior null byte after '%' leads to "%" string. null byte in other places like "%5\0" leads to error.
WITHOUT_CLASSIFICATION	last index (+1) accessed by next() last index (+1) accessed by get()
WITHOUT_CLASSIFICATION	special form of sprintf that returns a rubystring and handles tainted strings correctly.
WITHOUT_CLASSIFICATION	special form of sprintf that returns a rubystring and handles tainted strings correctly. version for 1.9.
WITHOUT_CLASSIFICATION	mri doesn't flag it as an error if width is given multiple times as a number (but it does for )
WITHOUT_CLASSIFICATION	let the width (if any) get processed in the next loop so any leading 0 gets treated correctly
WITHOUT_CLASSIFICATION	mri 1.8.5-p12 doesn't support 1-char strings but yarv 0.4.1 does. i don't think it hurts to include this sprintf('%c''a') is nicer than sprintf('%c''a'[0])
WITHOUT_CLASSIFICATION	'd' and 'i' are the same
WITHOUT_CLASSIFICATION	'u' with space or plus flags is same as 'd'
WITHOUT_CLASSIFICATION	we depart here from strict adherence to mri code as mri uses c-sprintf in part to format numeric output while we'll use java's numeric formatting code (and our own).
WITHOUT_CLASSIFICATION	skip '-' in bytes will add where appropriate
WITHOUT_CLASSIFICATION	..
WITHOUT_CLASSIFICATION	the 1 is for the stripped sign char
WITHOUT_CLASSIFICATION	fixme what is correct 'recv' argument? (this does produce the desired behavior)
WITHOUT_CLASSIFICATION	gotta have at least a zero
WITHOUT_CLASSIFICATION	ok we now have the significand in digits[0ndigits] and the exponent in exponent. we're ready to format.
WITHOUT_CLASSIFICATION	intdigits isn't used here but if it were it would be 1
WITHOUT_CLASSIFICATION	intdigits = 1
WITHOUT_CLASSIFICATION	system.err.println(" stringtolong/reading c=" + data[s])
WITHOUT_CLASSIFICATION	system.err.println(" stringtolong/converted c=" + c)
WITHOUT_CLASSIFICATION	intdigits isn't used here but if it were it would be 1
WITHOUT_CLASSIFICATION	intdigits = 1
WITHOUT_CLASSIFICATION	precision for g/g includes integer digits
WITHOUT_CLASSIFICATION	deal with length/width
WITHOUT_CLASSIFICATION	deal with length/width
WITHOUT_CLASSIFICATION	first digit is always printed
WITHOUT_CLASSIFICATION	mri behavior be default 2 digits in the exponent. use 3 digits only when necessary. see comment for writeexp method for more details.
WITHOUT_CLASSIFICATION	5 -> e+nnn / e-nnn
WITHOUT_CLASSIFICATION	4 -> e+nn / e-nn
WITHOUT_CLASSIFICATION	in this mode '.' is always printed
WITHOUT_CLASSIFICATION	mri behavior in this mode trailing zeroes are removed 1.500e+05 -> 1.5e+05
WITHOUT_CLASSIFICATION	'.' is printed
WITHOUT_CLASSIFICATION	all precision numebers printed
WITHOUT_CLASSIFICATION	now some data
WITHOUT_CLASSIFICATION	'.'
WITHOUT_CLASSIFICATION	decimal form like (but not just like!) 'f'
WITHOUT_CLASSIFICATION	digits array shifted update all
WITHOUT_CLASSIFICATION	will have a trailing '.' g fills trailing zeroes if #
WITHOUT_CLASSIFICATION	s/b true since intlength > 0
WITHOUT_CLASSIFICATION	s/b true since intlength > 0
WITHOUT_CLASSIFICATION	always need at least a 0
WITHOUT_CLASSIFICATION	always need at least a 0
WITHOUT_CLASSIFICATION	digits arr shifted update all
WITHOUT_CLASSIFICATION	(1|intlen).prec
WITHOUT_CLASSIFICATION	(1|intlen)
WITHOUT_CLASSIFICATION	will have a trailing '.'
WITHOUT_CLASSIFICATION	fill up the rest with zeroes
WITHOUT_CLASSIFICATION	system.err.println(" main/len=" + len)
WITHOUT_CLASSIFICATION	5 -> e+nnn / e-nnn
WITHOUT_CLASSIFICATION	4 -> e+nn / e-nn
WITHOUT_CLASSIFICATION	now some data
WITHOUT_CLASSIFICATION	'.'
WITHOUT_CLASSIFICATION	equivalent to mri case '\0'
WITHOUT_CLASSIFICATION	'.' and all precision digits printed
WITHOUT_CLASSIFICATION	\v
WITHOUT_CLASSIFICATION	dangling '%' char
WITHOUT_CLASSIFICATION	main while loop (offset < length)
WITHOUT_CLASSIFICATION	debugging code keeping for now
WITHOUT_CLASSIFICATION	mri rounds up on nnn5nnn but not nnn5 -- except for when they do
WITHOUT_CLASSIFICATION	"%.0f" % 0.99
WITHOUT_CLASSIFICATION	limit the length of negatives if possible (also faster)
WITHOUT_CLASSIFICATION	negative values
WITHOUT_CLASSIFICATION	calculation for negatives when %u specified for values >= integer.min_value 2 mri uses (the equivalent of) long neg_u = (((long)integer.max_value + 1) << 1) + val for smaller values biginteger math is required to conform to mri's result.
WITHOUT_CLASSIFICATION	relatively cheap test for 32-bit values
WITHOUT_CLASSIFICATION	no such luck
WITHOUT_CLASSIFICATION	ok now it gets expensive
WITHOUT_CLASSIFICATION	go through negated powers of 32 until we find one small enough
WITHOUT_CLASSIFICATION	add to the corresponding positive power of 32 for the result. meaningful? no. conformant? yes. i just write the code
WITHOUT_CLASSIFICATION	constant vector a
WITHOUT_CLASSIFICATION	most significant w-r bits
WITHOUT_CLASSIFICATION	least significant r bits
WITHOUT_CLASSIFICATION	state[j] &= 0xffffffffl
WITHOUT_CLASSIFICATION	state[i] &= 0xffffffffl
WITHOUT_CLASSIFICATION	state[i] &= 0xffffffffl
WITHOUT_CLASSIFICATION	msb is 1 assuring non-zero initial array
WITHOUT_CLASSIFICATION	tempering
WITHOUT_CLASSIFICATION	mri behavior week values are monotonous. so weeks that effectively belong to previous year will get the value of 0 not 52 or 53 as in java.
WITHOUT_CLASSIFICATION	system.err.println("bytelisttoinum(" + str + ")")
WITHOUT_CLASSIFICATION	system.err.println("bytelisttoinum(" + str + ")")
WITHOUT_CLASSIFICATION	\v
WITHOUT_CLASSIFICATION	system.err.println("getsign()")
WITHOUT_CLASSIFICATION	system.err.println(" getsign/" + sign)
WITHOUT_CLASSIFICATION	system.err.println("figureoutbase()/base=" + base)
WITHOUT_CLASSIFICATION	system.err.println(" figureoutbase/base=" + base)
WITHOUT_CLASSIFICATION	system.err.println("calculatelength()/str=" + str)
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	system.err.println(" stringtolong=" + val)
WITHOUT_CLASSIFICATION	no number
WITHOUT_CLASSIFICATION	trailing garbage
WITHOUT_CLASSIFICATION	system.err.println("adding char " + (char)cx + " with number " + cx)
WITHOUT_CLASSIFICATION	it was not found at all!
WITHOUT_CLASSIFICATION	can be overridden to be informed when objects are removed
WITHOUT_CLASSIFICATION	we reached the end of a list
WITHOUT_CLASSIFICATION	goto next bucket
WITHOUT_CLASSIFICATION	we reached the end
WITHOUT_CLASSIFICATION	entry is the first element of this bucket
WITHOUT_CLASSIFICATION	states
WITHOUT_CLASSIFICATION	remove leading whitespace (includes _ for lax) get sign if any
WITHOUT_CLASSIFICATION	optimistic pass - calculate value as digits are processed digits - lax rules decimal digits - lax rules exponent sign/digits - lax rules digits - strict rules decimal digits - strict rules exponent sign/digits - strict rules complete calculation if possible
WITHOUT_CLASSIFICATION	fields used for direct (optimistic) calculation number of significant digits updated as parsed zeroes that may go to significand or exponent offset of decimal pt from start (-1 -> no decimal) significand updated as parsed exponent updated as parsed
WITHOUT_CLASSIFICATION	drop through for sign
WITHOUT_CLASSIFICATION	switch will use this if we have to go back the slow way
WITHOUT_CLASSIFICATION	drop through for non-strict digits
WITHOUT_CLASSIFICATION	first char must be digit or decimal point
WITHOUT_CLASSIFICATION	ignore leading zeroes switch
WITHOUT_CLASSIFICATION	no digits go calc (will return +/- 0.0 for lax)
WITHOUT_CLASSIFICATION	ignore leading zeroes
WITHOUT_CLASSIFICATION	just save a count of zeroes for now if no digit ends up following them they'll be applied to the exponent rather than the significand (and our max length for optimistic calc).
WITHOUT_CLASSIFICATION	ok got a non-zero have to own up to our horded zeroes
WITHOUT_CLASSIFICATION	else catch oversize below
WITHOUT_CLASSIFICATION	else catch oversize below
WITHOUT_CLASSIFICATION	oh well it was worth a try. go let double/floatingdecimal handle it
WITHOUT_CLASSIFICATION	ignore switch
WITHOUT_CLASSIFICATION	ignore switch
WITHOUT_CLASSIFICATION	end of parseable data go to calc
WITHOUT_CLASSIFICATION	end of parseable data go to calc
WITHOUT_CLASSIFICATION	switch for
WITHOUT_CLASSIFICATION	first non_underscore char must be digit
WITHOUT_CLASSIFICATION	no dec digits end of parseable data go to calc
WITHOUT_CLASSIFICATION	switch if
WITHOUT_CLASSIFICATION	difficult case send to double/floatingdecimal
WITHOUT_CLASSIFICATION	block
WITHOUT_CLASSIFICATION	block
WITHOUT_CLASSIFICATION	first char must be digit or decimal point
WITHOUT_CLASSIFICATION	first char must be digit or decimal point
WITHOUT_CLASSIFICATION	first char must be digit or decimal point
WITHOUT_CLASSIFICATION	ignore leading zeroes switch
WITHOUT_CLASSIFICATION	else catch oversize below
WITHOUT_CLASSIFICATION	else catch oversize below
WITHOUT_CLASSIFICATION	else catch oversize below
WITHOUT_CLASSIFICATION	switch for
WITHOUT_CLASSIFICATION	switch for
WITHOUT_CLASSIFICATION	switch for
WITHOUT_CLASSIFICATION	switch if
WITHOUT_CLASSIFICATION	switch if
WITHOUT_CLASSIFICATION	lax (str.to_f) allows underscores between e/e and sign
WITHOUT_CLASSIFICATION	switch for no exponent so drop through for calculation
WITHOUT_CLASSIFICATION	switch for no more data ok for strict to go calc
WITHOUT_CLASSIFICATION	todo it's not clear to me why in floatingdecimal the "slop" calculation performed above for positive exponents isn't used for negative exponents as well. will find out
WITHOUT_CLASSIFICATION	no digits error
WITHOUT_CLASSIFICATION	too big for us
WITHOUT_CLASSIFICATION	too big for us
WITHOUT_CLASSIFICATION	must be at least one digit for strict
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	only whitespace allowed after value for strict
WITHOUT_CLASSIFICATION	only whitespace allowed after value for strict
WITHOUT_CLASSIFICATION	only whitespace allowed after value for strict
WITHOUT_CLASSIFICATION	first char must be digit
WITHOUT_CLASSIFICATION	no dec digits after '.' error for strict
WITHOUT_CLASSIFICATION	ignore leading zeroes switch
WITHOUT_CLASSIFICATION	switch for
WITHOUT_CLASSIFICATION	switch for
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	only whitespace allowed after value for strict
WITHOUT_CLASSIFICATION	must be at least one digit for strict
WITHOUT_CLASSIFICATION	copy out any buffered bytes
WITHOUT_CLASSIFICATION	switch while
WITHOUT_CLASSIFICATION	all the positive powers of 10 that can be represented exactly in double/float. (from sun.misc.floatingdecimal.java)
WITHOUT_CLASSIFICATION	zlib behavior negative win_bits means no header and no checksum.
WITHOUT_CLASSIFICATION	rb_enc_mbclen
WITHOUT_CLASSIFICATION	rb_enc_precise_mbclen
WITHOUT_CLASSIFICATION	utf8 lead byte
WITHOUT_CLASSIFICATION	arg cannot be negative
WITHOUT_CLASSIFICATION	nofunctionalitysignalfacade
WITHOUT_CLASSIFICATION	change visibility so others can see it
WITHOUT_CLASSIFICATION	could not get canonical path just use given path
WITHOUT_CLASSIFICATION	strip off "_dot_rb" for .rb files
WITHOUT_CLASSIFICATION	makes sure the key is not already in the hashtable.
WITHOUT_CLASSIFICATION	rehash the table if the threshold is exceeded
WITHOUT_CLASSIFICATION	creates the new entry.
WITHOUT_CLASSIFICATION	next entry to return current slot current entry
WITHOUT_CLASSIFICATION	advance to first entry
WITHOUT_CLASSIFICATION	the reason why we need the stream is to be able to invoke available() on it. stdin in java is non-interruptible non-selectable and attempt to read on such stream might lead to thread being blocked without any way to unblock it. that's where available() comes it so at least we could check whether anything is available to be read without blocking.
WITHOUT_CLASSIFICATION	package-protected
WITHOUT_CLASSIFICATION	raw file url just open directly
WITHOUT_CLASSIFICATION	we always open this rw since we can only open it r or rw.
WITHOUT_CLASSIFICATION	if refcount is at or below zero we're no longer valid
WITHOUT_CLASSIFICATION	if channel is already closed we're no longer valid
WITHOUT_CLASSIFICATION	otherwise decrement and possibly close as normal
WITHOUT_CLASSIFICATION	r/w buffer are we reading or writing?
WITHOUT_CLASSIFICATION	this constructor is used by fdopen so we don't increment descriptor ref count
WITHOUT_CLASSIFICATION	unread back
WITHOUT_CLASSIFICATION	iterate over remainder of buffer until we find a match
WITHOUT_CLASSIFICATION	terminate and advance buffer when we find our char
WITHOUT_CLASSIFICATION	no match append remainder of buffer and continue with next block
WITHOUT_CLASSIFICATION	found a match above check if remaining separator characters match appending as we go
WITHOUT_CLASSIFICATION	check file size - special files in /proc have zero size and need to be handled by the generic read path.
WITHOUT_CLASSIFICATION	copy any buffered data (including ungetc byte)
WITHOUT_CLASSIFICATION	now read unbuffered directly from the file
WITHOUT_CLASSIFICATION	copy out any buffered bytes
WITHOUT_CLASSIFICATION	need to clamp source (buffer) size to avoid overrun
WITHOUT_CLASSIFICATION	not closing from finalize
WITHOUT_CLASSIFICATION	clear runtime so it doesn't get stuck in memory (jruby-2933)
WITHOUT_CLASSIFICATION	silence
WITHOUT_CLASSIFICATION	silence
WITHOUT_CLASSIFICATION	don't bother
WITHOUT_CLASSIFICATION	don't bother
WITHOUT_CLASSIFICATION	for sockets only write as much as will fit.
WITHOUT_CLASSIFICATION	correct position for read / write buffering (we could invalidate but expensive)
WITHOUT_CLASSIFICATION	adjust for buffered data
WITHOUT_CLASSIFICATION	for seek_cur need to adjust for buffered data
WITHOUT_CLASSIFICATION	libc flushes writes on any read from the actual file so we flush here
WITHOUT_CLASSIFICATION	we have read ahead and need to back up
WITHOUT_CLASSIFICATION	128k seems to be the minimum at which the stat+seek is faster than reallocation
WITHOUT_CLASSIFICATION	limit each iteration to a max of bulk_read_size to avoid over-size allocations
WITHOUT_CLASSIFICATION	append what we read into our buffer and allow the loop to continue
WITHOUT_CLASSIFICATION	copy what is in the buffer if there is some buffered data
WITHOUT_CLASSIFICATION	avoid double-copying for reads that are larger than the buffer size
WITHOUT_CLASSIFICATION	complete the request by filling the read buffer first
WITHOUT_CLASSIFICATION	complete the request by filling the read buffer first
WITHOUT_CLASSIFICATION	avoid double-copying for reads that are larger than the buffer size or the destination is a direct buffer.
WITHOUT_CLASSIFICATION	we limit reads to bulk_read_sized chunks to avoid nio allocating a huge temporary native buffer when doing reads into a heap buffer if the dst buffer is direct then no need to limit.
WITHOUT_CLASSIFICATION	ruby ignores empty syswrites
WITHOUT_CLASSIFICATION	ruby ignores empty syswrites
WITHOUT_CLASSIFICATION	doesn't fit in buffer. write immediately. ensure nothing left to write
WITHOUT_CLASSIFICATION	truncate can't lengthen files so we save position seek/write and go back
WITHOUT_CLASSIFICATION	how far ahead we are when reading
WITHOUT_CLASSIFICATION	if the read buffer is ahead back up
WITHOUT_CLASSIFICATION	close without removing from finalizers
WITHOUT_CLASSIFICATION	putting a bit back so we're not at eof anymore
WITHOUT_CLASSIFICATION	save the ungot
WITHOUT_CLASSIFICATION	otherwise we try an unbuffered read to get whatever's available
WITHOUT_CLASSIFICATION	ignore this select() will set the correct mode when it is finished
WITHOUT_CLASSIFICATION	flush first
WITHOUT_CLASSIFICATION	wake up any channels that became unblocked
WITHOUT_CLASSIFICATION	register any new blocking i/o requests
WITHOUT_CLASSIFICATION	now clear out any previously selected channels
WITHOUT_CLASSIFICATION	wait for i/o on any channel
WITHOUT_CLASSIFICATION	do not open as 'rw' by default since a file with read-only permissions will fail on 'rw'
WITHOUT_CLASSIFICATION	java requires "w" for creating a file that does not exist
WITHOUT_CLASSIFICATION	seek to force underlying buffer to flush
WITHOUT_CLASSIFICATION	seek to force read buffer to invalidate
WITHOUT_CLASSIFICATION	result = eval("arr = array['c' 200] p arr") assertequals("[\"c\" 200]" result) result = eval("arr = array.['d' 200] p arr") assertequals("[\"d\" 200]" result)
WITHOUT_CLASSIFICATION	mri ignores seek errors presumably for unseekable files like serial ports (jruby-2979) so we shall too.
WITHOUT_CLASSIFICATION	todo ruby logic is somewhat more complicated here see comments after
WITHOUT_CLASSIFICATION	make sure the pipe stream is set to null
WITHOUT_CLASSIFICATION	make sure the main stream is set to null
WITHOUT_CLASSIFICATION	first try our custom-generated unsafe
WITHOUT_CLASSIFICATION	then try sun's unsafe
WITHOUT_CLASSIFICATION	if we get here the class and field exist construct our unsafe impl that calls it directly
WITHOUT_CLASSIFICATION	else leave it null
WITHOUT_CLASSIFICATION	typematcher
WITHOUT_CLASSIFICATION	this is now needed since module java isn't in by default
WITHOUT_CLASSIFICATION	iterate over the rubyhash keyset simultaneously iterating over the values()
WITHOUT_CLASSIFICATION	get the value from the map via the key
WITHOUT_CLASSIFICATION	get the value from the map via the values iterator
WITHOUT_CLASSIFICATION	check the 2 values obtained via different means
WITHOUT_CLASSIFICATION	set a value in the rubyhash
WITHOUT_CLASSIFICATION	set a value in the rubyhash
WITHOUT_CLASSIFICATION	check the entry.setvalue values come back out ok
WITHOUT_CLASSIFICATION	if we're running from within an ide we may not have the .rb files in our classpath. try to find them in the filesystem instead.
WITHOUT_CLASSIFICATION	assertequals("\"foo\"\n\"bar\"" eval("$h.each {|val| p val}")) assertequals("[\"foo\" \"bar\"]" eval("p $h.each {|val| }"))
WITHOUT_CLASSIFICATION	init
WITHOUT_CLASSIFICATION	block
WITHOUT_CLASSIFICATION	copy constructor
WITHOUT_CLASSIFICATION	presumably this require should fail
WITHOUT_CLASSIFICATION	jruby-646 presumably this require should fail
WITHOUT_CLASSIFICATION	test that requiring a normal java class raises an error (jruby-3214
WITHOUT_CLASSIFICATION	ok
WITHOUT_CLASSIFICATION	function not usedbut it gets rid of unused warnings in eclipse (we do call those methods from ruby so they are not really unused).
WITHOUT_CLASSIFICATION	load should work several times in a row
WITHOUT_CLASSIFICATION	reset the $loadtestvar
WITHOUT_CLASSIFICATION	call throwexception via jruby
WITHOUT_CLASSIFICATION	notify the calling thread that we're about to go to sleep the first time
WITHOUT_CLASSIFICATION	wait for the go signal
WITHOUT_CLASSIFICATION	run ten separate calls into ruby with delay and explicit gc
WITHOUT_CLASSIFICATION	wait until thread has initialized
WITHOUT_CLASSIFICATION	notify thread to proceed
WITHOUT_CLASSIFICATION	wait until thread has completed
WITHOUT_CLASSIFICATION	we do preand post load outside the "body" versions to pre-prepare and pre-push the dynamic scope we need for lastline
WITHOUT_CLASSIFICATION	out of byte range there will be no match for sure
WITHOUT_CLASSIFICATION	mri behavior raise argumenterror for 'unknown command' before checking number of args.
WITHOUT_CLASSIFICATION	if any exceptions were raised we fail
WITHOUT_CLASSIFICATION	there should only be one more thread in thread group than before we started
WITHOUT_CLASSIFICATION	construct a new cache with thread's classloader and no limit
WITHOUT_CLASSIFICATION	class<?> script1 = ((defaultmethod) runtime1.getobject().getmethods().get("foo")).getjitcompilerscript().getclass() class<?> script2 = ((defaultmethod) runtime2.getobject().getmethods().get("foo")).getjitcompilerscript().getclass()
WITHOUT_CLASSIFICATION	assertsame(script1 script2)
WITHOUT_CLASSIFICATION	void methods should work
WITHOUT_CLASSIFICATION	methods with required = 4 or higher should bind and be callable using reflection jruby-3649
WITHOUT_CLASSIFICATION	since we don't have any other error reporting mechanism we add the error message as an always-failing test to the test suite.
WITHOUT_CLASSIFICATION	ensure we have a new interpreter for each test. previous we were using the same interpreter which caused problems as soon as one test failed.
WITHOUT_CLASSIFICATION	without a flush ant will miss some of our output
WITHOUT_CLASSIFICATION	asserttrue(rubyobject.kind_of(ruby.getclasses().getstringclass()).isfalse())
WITHOUT_CLASSIFICATION	int n = 10
WITHOUT_CLASSIFICATION	there might be more test classes in a single file so we iterate over them
WITHOUT_CLASSIFICATION	no classcastexception!
WITHOUT_CLASSIFICATION	value equality
WITHOUT_CLASSIFICATION	identity equality
WITHOUT_CLASSIFICATION	bench straight-up integer fib(30)
WITHOUT_CLASSIFICATION	bench integer fib
WITHOUT_CLASSIFICATION	bench fully-boxed fib
WITHOUT_CLASSIFICATION	bench fully-boxed fib
WITHOUT_CLASSIFICATION	bench fixnum-boxed fib
WITHOUT_CLASSIFICATION	bench straight-up long fib(30)
WITHOUT_CLASSIFICATION	bench long fib
WITHOUT_CLASSIFICATION	skip this one probably no 'ls' (windows)
WITHOUT_CLASSIFICATION	start off with a neutral parent
WITHOUT_CLASSIFICATION	public class hello { public static string getmessage() { return ".." } }
WITHOUT_CLASSIFICATION	in method body with no containing loop issue jump error load runtime and value issue jump error
WITHOUT_CLASSIFICATION	note we can't use file.exists() to check whether the symlink exists or not because that method returns false for existing but broken symlink. so we try without the existence check but in the try-catch block. mri behavior symlink? on broken symlink should return true.
WITHOUT_CLASSIFICATION	we are creating a new io object that shares the same iohandler (and fileno).
WITHOUT_CLASSIFICATION	a while node could receive non-local flow control from any of these a closure within the loop an eval within the loop a block-arg-based proc called within the loop
WITHOUT_CLASSIFICATION	[irubyobject] [irubyobject irubyobject] [irubyobject rubyclass] [irubyobject rubyclass rubyclass] [irubyobject rubyclass visibility] [irubyobject rubyclass visibility visibility]
WITHOUT_CLASSIFICATION	select appropriate call site dup receiver load self
WITHOUT_CLASSIFICATION	translate "x || y" --> "x = (is_true(x) ? x y)" --> x = -- build(x) should return a variable! -- f = is_true(x) beq(f true l) x = -- build(y) -- l
WITHOUT_CLASSIFICATION	force the client socket to be blocking
WITHOUT_CLASSIFICATION	additional context surrounding tokens that both the lexer and grammar use.
WITHOUT_CLASSIFICATION	enebo c can never be antrhign but '.' why did i put this here?
WITHOUT_CLASSIFICATION	save package module as ivar in parent and add method to parent so we don't have to come back here.
WITHOUT_CLASSIFICATION	[cc] [c boolean]
WITHOUT_CLASSIFICATION	label for the start of the closure (used to implement redo) label for the end of the closure (used to implement retry)
WITHOUT_CLASSIFICATION	ignore job was cancelled fixme is this ok?
WITHOUT_CLASSIFICATION	check arity checkarity(mv scope)
WITHOUT_CLASSIFICATION	rethrow exception rethrow it
WITHOUT_CLASSIFICATION	we take the first method found as our "n" method since for any non-specific arity they'll all error the same. if an actual "n" method is created we use that.
WITHOUT_CLASSIFICATION	used by our duck-typification of proc into interface types to allow coercing a simple proc into an interface parameter.
WITHOUT_CLASSIFICATION	proxy is under construction building thread can safely read non-volatile value
WITHOUT_CLASSIFICATION	it's either as converted as we can make it via above logic or it's not one of the types we convert so just pass it out as-is without wrapping
WITHOUT_CLASSIFICATION	package scheme 2 separate module for each full package name constructed from the camel-cased package segments javajavalangobject
WITHOUT_CLASSIFICATION	construct the proxy method
WITHOUT_CLASSIFICATION	line 159 "-" %token constants
WITHOUT_CLASSIFICATION	+++ helper methods
WITHOUT_CLASSIFICATION	line 152 "-" %token constants
WITHOUT_CLASSIFICATION	initial size state stack value stack current input #tokens to shift
WITHOUT_CLASSIFICATION	+++ helper methods
WITHOUT_CLASSIFICATION	we only need to pass in current scope if we are evaluating as a block (which is only done for evals). we need to pass this in so that we can appropriately scope down to captured scopes when we are parsing.
WITHOUT_CLASSIFICATION	let the width (if any) get processed in the next loop so any leading 0 gets treated correctly
WITHOUT_CLASSIFICATION	a place to store that special hiding space that bindings need to implement things like eval("a = 1" binding) eval("p a"). all binding instances must get access to this hidden shared scope. we store it here. this will be null if no binding has yet been called.
WITHOUT_CLASSIFICATION	todo make it 16 now ? must be power of 2!
WITHOUT_CLASSIFICATION	check visibility dup method
WITHOUT_CLASSIFICATION	&foo are not getting set from somewherei want the following assert to be true though assert variablevalues[offset] != null "getting unassigned " + staticscope.getvariables()[offset]
WITHOUT_CLASSIFICATION	unsigned int native unsigned long native
WITHOUT_CLASSIFICATION	need padding i'm fairly sure there is a library call to create a string filled with a given char with a given length but i couldn't find it
WITHOUT_CLASSIFICATION	mri behavior be default 2 digits in the exponent. use 3 digits only when necessary. see comment for writeexp method for more details.
WITHOUT_CLASSIFICATION	mri ignores seek errors presumably for unseekable files like serial ports (jruby-2979) so we shall too.
WITHOUT_CLASSIFICATION	switch for no more data ok for strict to go calc
WITHOUT_CLASSIFICATION	a scoped location of this variable (high 16 bits is how many scopes down and low 16 bits is what index in the right scope to set the value.
WITHOUT_CLASSIFICATION	estimate the square root with the foremost 62 bits of squard bi and scale are a tandem
WITHOUT_CLASSIFICATION	captures begin and end are used when not groups defined source string
WITHOUT_CLASSIFICATION	instance variable ruby methods
WITHOUT_CLASSIFICATION	switch while
WITHOUT_CLASSIFICATION	for nodes do not have their own scope so we pass null to indicate this. 'for's are implemented as blocks in evaluation but they have no scope so we just deal with this lack of scope throughout its lifespan. we should probably change the way this works to get rid of multiple null checks.
WITHOUT_CLASSIFICATION	this field is used during argument processing to avoid putting rubyarray instances that are purely for utility purposes into objectspace.
WITHOUT_CLASSIFICATION	parent container for this context (can be dynamic!!) if dynamic at runtime this will be the meta-object corresponding to a class/script/module/method/closure list of ir instructions for this method
WITHOUT_CLASSIFICATION	translate "ret = (a && b)" --> "ret = (a ? b false)" --> v1 = -- build(a) -- opt ret can be set to v1 but effectively v1 is false if we take the branch to l. while this info can be inferred by using attributes why bother if we can do this? ret = false beq(v1 false l) v2 = -- build(b) -- ret = v2 l
WITHOUT_CLASSIFICATION	expected
WITHOUT_CLASSIFICATION	do nothing
WITHOUT_CLASSIFICATION	constructor
WITHOUT_CLASSIFICATION	if a line is followed by a blank line put it back.
WITHOUT_CLASSIFICATION	$> default output handle
WITHOUT_CLASSIFICATION	line 423
WITHOUT_CLASSIFICATION	line 486
WITHOUT_CLASSIFICATION	signal uses sun.misc. classes this is not allowed in the security-sensitive environments
WITHOUT_CLASSIFICATION	re-register since fileno points at something new now
WITHOUT_CLASSIFICATION	produce a nicer error since rubyists aren't used to seeing this
WITHOUT_CLASSIFICATION	produce a nicer error since rubyists aren't used to seeing this
WITHOUT_CLASSIFICATION	colon3 assign in object
WITHOUT_CLASSIFICATION	if there's no receiver evaluate and pass in the superclass or pass self if it no superclass
WITHOUT_CLASSIFICATION	wire up function#call(args) to use the super-fast native invokers
WITHOUT_CLASSIFICATION	todo varargs?
WITHOUT_CLASSIFICATION	todo varargs?
WITHOUT_CLASSIFICATION	todo varargs?
WITHOUT_CLASSIFICATION	todo varargs?
WITHOUT_CLASSIFICATION	decrease value to hit upper range.
WITHOUT_CLASSIFICATION	assign to appropriate variable
WITHOUT_CLASSIFICATION	"else" body
WITHOUT_CLASSIFICATION	done done done nothing to do for 1.8 done done done done done done done? done done done done done done done done done done done case definednode return builddefined(node m) incomplete done done done done done done done done case ensurenode return buildensurenode(node m) deferred done done done done case flipnode return buildflip(node m) sss fixme what code generates this ast? done done done done done done done done done done done done done done done done done done? done done done done done done -- partially case opelementasgnnode return buildopelementasgn(node m) deferred sss fixme what code generates this ast? done case postexenode return buildpostexe(node m) deferred case preexenode return buildpreexe(node m) deferred done?? done
WITHOUT_CLASSIFICATION	read-volatile
WITHOUT_CLASSIFICATION	$+ string matches last paren.
WITHOUT_CLASSIFICATION	should alter global state
WITHOUT_CLASSIFICATION	should alter global state
WITHOUT_CLASSIFICATION	ruby code frequently uses a platform check to choose "nul" on windows but since that check doesn't work well on jruby we help it out
WITHOUT_CLASSIFICATION	10!
WITHOUT_CLASSIFICATION	case rescuenode return buildrescue(node m) deferred case retrynode return buildretry(node m) deferred done
WITHOUT_CLASSIFICATION	is this instruction live or dead? during optimization passes if this instruction causes no side-effects and the result of the instruction is not needed by anyone else we can remove this instruction altogether without affecting program correctness.
WITHOUT_CLASSIFICATION	all these types are immediately considered "defined"
WITHOUT_CLASSIFICATION	first iterate over all required args
WITHOUT_CLASSIFICATION	determine if the parameter might be passed as a 32bit int parameter. this just applies to buffer/pointer types.
WITHOUT_CLASSIFICATION	keyword keyword = keyword.getkeyword(tempval tempval.length())
WITHOUT_CLASSIFICATION	yylhs 496
WITHOUT_CLASSIFICATION	yylhs 496
WITHOUT_CLASSIFICATION	initial size state stack value stack current input #tokens to shift
WITHOUT_CLASSIFICATION	line 449
WITHOUT_CLASSIFICATION	line 495
WITHOUT_CLASSIFICATION	management/monitoring
WITHOUT_CLASSIFICATION	if we've found the last char of the separator and we've found at least as many characters as separator length and the last n characters of our buffer match the separator we're done
WITHOUT_CLASSIFICATION	14!
WITHOUT_CLASSIFICATION	process any set of annotations no supported options
WITHOUT_CLASSIFICATION	add to the jitted methods set
WITHOUT_CLASSIFICATION	extract item from array
WITHOUT_CLASSIFICATION	extract item from array
WITHOUT_CLASSIFICATION	case sclassnode return buildsclass(node m) deferred done done done done done done done done case undefnode return buildundef(node m) deferred done case valiasnode return buildvalias(node m) deferred done done
WITHOUT_CLASSIFICATION	adding a post-invoke for the cb result serves to both keep it alive until after the function returns and allows us to clean up the native trampoline early instead of letting them accumulate until a gc run
WITHOUT_CLASSIFICATION	the java method doesn't care what class it is but we need to know what to convert it to so we use the object's own class. if that doesn't help we use string to force a call to the object's "to_s" method.
WITHOUT_CLASSIFICATION	index for the item
WITHOUT_CLASSIFICATION	atomic integers for symbol and method ids
WITHOUT_CLASSIFICATION	18!
WITHOUT_CLASSIFICATION	if we have more than one arg make sure the array created to contain them is not objectspaced
WITHOUT_CLASSIFICATION	set up a local iruby variable
WITHOUT_CLASSIFICATION	set up a local iruby variable
WITHOUT_CLASSIFICATION	set up a local iruby variable
WITHOUT_CLASSIFICATION	set up a local iruby variable
WITHOUT_CLASSIFICATION	note if 's' happens to the a class this is effectively an assignment of a class instance variable
WITHOUT_CLASSIFICATION	this method takes as input a map of operands to their values and outputs the result of this instruction. if the value map provides a value for any of the instruction's operands the expectation is that the operand will be replaced with the simplified value. it is not required that it do so -- code correctness is not compromised by failure to simplify. @param valuemap mapping from operands to their simplified values @returns simplified result / output of this instruction
WITHOUT_CLASSIFICATION	can't support the rest with java
WITHOUT_CLASSIFICATION	an atomic long for generating dynamicmethod serial numbers
WITHOUT_CLASSIFICATION	mri behavior always check whether the file is writable or not even if we are to write 0 bytes.
WITHOUT_CLASSIFICATION	22!
WITHOUT_CLASSIFICATION	attribute set.
WITHOUT_CLASSIFICATION	grab nil for local variables
WITHOUT_CLASSIFICATION	grab nil for local variables
WITHOUT_CLASSIFICATION	grab nil for local variables
WITHOUT_CLASSIFICATION	fill in all vars with nil so compiler is happy about future accesses
WITHOUT_CLASSIFICATION	build a new class and add it to the current scope (could be a script / module / class)
WITHOUT_CLASSIFICATION	---------- these methods below are used during compile-time optimizations -------
WITHOUT_CLASSIFICATION	---------- these methods below are used during compile-time optimizations -------
WITHOUT_CLASSIFICATION	af_inet
WITHOUT_CLASSIFICATION	now we provide default impls of a number of signatures. for each arity we first generate a non-block version of the method which just adds null_block and re-calls allowing e.g. compiled code which always can potentially take a block to only generate the block-receiving signature and still avoid arg boxing. we then provide default implementations of each block-accepting method that in turn call the irubyobject[]+block version of call. this then finally falls back on the minimum implementation requirement for dynamic method handles.
WITHOUT_CLASSIFICATION	because we implement java interfaces now we need a new === that's aware of those additional "virtual" supertypes
WITHOUT_CLASSIFICATION	base64
WITHOUT_CLASSIFICATION	note nemes_gamma can return double.positive_infinity or double.negative_infinity when value is an integer less than 1. we treat 0 as a special case to avoid domain error.
WITHOUT_CLASSIFICATION	element set
WITHOUT_CLASSIFICATION	visit a label to start scoping for local vars in this method
WITHOUT_CLASSIFICATION	visit a label to start scoping for local vars in this method
WITHOUT_CLASSIFICATION	temp locals must start after last real local
WITHOUT_CLASSIFICATION	sss looks like we receive the arg in buildblockargsassignment via the iternode we won't get here for argument receives! so builddasgn is called for assignments to block variables within a block. as far as the ir is concerned this is just a simple copy
WITHOUT_CLASSIFICATION	getsimplifiedoperand returns the value of this operand fully simplified getsimplifiedoperand returns the operand in a form that can be materialized into bytecode if it cannot be completely optimized away the value is used during optimizations and propagated through the ir. but it is thrown away after that. but the operand form is used for constructing the compound objects represented by the operand. example a = [1] b = [34] c = [ab] d = [2c] -- getvalue(c) = [1[34]] getsimplifiedoperand(c) = [1 b] -- getvalue(d) = [2[1[34]]] getsimplifiedoperand(d) = [2 c] note that abcd are all objects and c has a reference to objects a and b and d has a reference to c. so if contents of a or b is modified the "simplified value"s of c and d also change! this difference is captured by these two methods.
WITHOUT_CLASSIFICATION	irubyobject protocol = args[4]
WITHOUT_CLASSIFICATION	promise to implement three to n with block
WITHOUT_CLASSIFICATION	ruby's omg capture all source in a hash feature add each line to buffer when encountering newline or eof for first time.
WITHOUT_CLASSIFICATION	carriage return
WITHOUT_CLASSIFICATION	yydgoto 136
WITHOUT_CLASSIFICATION	discarding a token does not change stack
WITHOUT_CLASSIFICATION	string construction routines by not byte[] buffer and making the target string shared
WITHOUT_CLASSIFICATION	insert all nodes in sequence hash them in the final instruction key
WITHOUT_CLASSIFICATION	return last value from execution
WITHOUT_CLASSIFICATION	we append an index to ensure two identical method names will not conflict
WITHOUT_CLASSIFICATION	basic block id cfg that this basic block belongs to all basic blocks have a starting label list of non-label instructions
WITHOUT_CLASSIFICATION	otherwise one key has been selected (ours) so we get the channel and hand it off
WITHOUT_CLASSIFICATION	for all uninitialized specific arities we defer to the "n" method which should raise appropriate error in all cases.
WITHOUT_CLASSIFICATION	implement is called to force this class to create stubs for all methods in the given interface so they'll show up in the list of methods and be invocable without passing through method_missing
WITHOUT_CLASSIFICATION	case ir instructions are dummy instructions -- all when/then clauses have been converted into if-then-else blocks
WITHOUT_CLASSIFICATION	check arity in the variable-arity version
WITHOUT_CLASSIFICATION	leave it null and fall back on our normal invocation logic
WITHOUT_CLASSIFICATION	build closure body and return the result of the closure
WITHOUT_CLASSIFICATION	for each simple method name implement the complex methods calling the simple version
WITHOUT_CLASSIFICATION	need to initialize
WITHOUT_CLASSIFICATION	need to initialize
WITHOUT_CLASSIFICATION	need to initialize
WITHOUT_CLASSIFICATION	need to initialize
WITHOUT_CLASSIFICATION	need to initialize
WITHOUT_CLASSIFICATION	need to initialize
WITHOUT_CLASSIFICATION	need to initialize
WITHOUT_CLASSIFICATION	need to initialize
WITHOUT_CLASSIFICATION	install direct java methods with mangled name so 'send' can call them directly.
WITHOUT_CLASSIFICATION	fall through
WITHOUT_CLASSIFICATION	deal with case when "other" is not a string
WITHOUT_CLASSIFICATION	all errors to sysread should be systemcallerrors but on a closed stream ruby returns an ioerror. java throws same exception for all errors so we resort to this hack
WITHOUT_CLASSIFICATION	in method body with no containing loop issue jump error load runtime and value issue jump error
WITHOUT_CLASSIFICATION	in method body with no containing loop issue jump error load runtime and value issue jump error
WITHOUT_CLASSIFICATION	store argument count information into scope
WITHOUT_CLASSIFICATION	the load method is used for loading as a top-level script and prepares appropriate scoping around the code
WITHOUT_CLASSIFICATION	first build assignments for specific named arguments
WITHOUT_CLASSIFICATION	public object invoke(object receiver object arg0 object arg1 object arg2 object arg3) { throw fail() } public object invoke(object receiver object arg0 object arg1 object arg2 object arg3 object arg4) { throw fail() }
WITHOUT_CLASSIFICATION	get current context
WITHOUT_CLASSIFICATION	octal constant
WITHOUT_CLASSIFICATION	read
WITHOUT_CLASSIFICATION	this really needs to be inlined here
WITHOUT_CLASSIFICATION	it doesn't handle special cases
WITHOUT_CLASSIFICATION	if reciever is self then we do the call the same way as vcall
WITHOUT_CLASSIFICATION	if reciever is self then we do the call the same way as vcall
WITHOUT_CLASSIFICATION	if reciever is self then we do the call the same way as vcall
WITHOUT_CLASSIFICATION	receiver
WITHOUT_CLASSIFICATION	receiver
WITHOUT_CLASSIFICATION	receiver
WITHOUT_CLASSIFICATION	receiver
WITHOUT_CLASSIFICATION	receiver
WITHOUT_CLASSIFICATION	receiver
WITHOUT_CLASSIFICATION	receiver
WITHOUT_CLASSIFICATION	receiver
WITHOUT_CLASSIFICATION	receiver
WITHOUT_CLASSIFICATION	ignore we won't use invokedynamic
WITHOUT_CLASSIFICATION	at end
WITHOUT_CLASSIFICATION	bang true no match no substitution
WITHOUT_CLASSIFICATION	save blocking state
WITHOUT_CLASSIFICATION	receiver
WITHOUT_CLASSIFICATION	receiver
WITHOUT_CLASSIFICATION	receiver
WITHOUT_CLASSIFICATION	invoke static __file__
WITHOUT_CLASSIFICATION	rest of the argument array!
WITHOUT_CLASSIFICATION	fall back on empty env when security disallows environment var access (like in an applet)
WITHOUT_CLASSIFICATION	undefinedmethod should be immutable
WITHOUT_CLASSIFICATION	undefinedmethod should be immutable
WITHOUT_CLASSIFICATION	load null block
WITHOUT_CLASSIFICATION	this point is only reached if there was an exception handler installed.
WITHOUT_CLASSIFICATION	nothing else to here - the module version will be included in the class.
WITHOUT_CLASSIFICATION	jruby-1000 fail early when attempting to subclass a final java class solved here by adding an exception-throwing "inherited"
WITHOUT_CLASSIFICATION	block given
WITHOUT_CLASSIFICATION	block given
WITHOUT_CLASSIFICATION	translate ret = (a || b) to ret = (a ? true b) as follows v1 = -- build(a) -- opt ret can be set to v1 but effectively v1 is true if we take the branch to l. while this info can be inferred by using attributes why bother if we can do this? ret = true beq(v1 true l) v2 = -- build(b) -- ret = v2 l
WITHOUT_CLASSIFICATION	initial precision is that of double numbers 2^63/2 ~ 4e18 63-1 an even number of number bits precision seems 16 to 18 digits
WITHOUT_CLASSIFICATION	we can callsite cache const_missing if we want
WITHOUT_CLASSIFICATION	self
WITHOUT_CLASSIFICATION	self
WITHOUT_CLASSIFICATION	self
WITHOUT_CLASSIFICATION	declare the field
WITHOUT_CLASSIFICATION	assign the values.
WITHOUT_CLASSIFICATION	assign the values.
WITHOUT_CLASSIFICATION	check arity
WITHOUT_CLASSIFICATION	check arity
WITHOUT_CLASSIFICATION	create the class
WITHOUT_CLASSIFICATION	called only by initializing thread no synchronization required
WITHOUT_CLASSIFICATION	no hex value after the 'x'.
WITHOUT_CLASSIFICATION	1.8
WITHOUT_CLASSIFICATION	6tags 16addr 1eos
WITHOUT_CLASSIFICATION	let m be the exact digits precision in an earlier! loop
WITHOUT_CLASSIFICATION	for 'foo()'. args are only significant in maintaining backwards compatible ast structure
WITHOUT_CLASSIFICATION	block
WITHOUT_CLASSIFICATION	label for the start of the method label for the end of the method
WITHOUT_CLASSIFICATION	comparisons & checks checks if the operand is non-null and non-false eqq a === call used only for its conditional results as in case/when begin/rescue
WITHOUT_CLASSIFICATION	fixme jruby-3604
WITHOUT_CLASSIFICATION	invoke pre method stuff
WITHOUT_CLASSIFICATION	all done with lookup attempts release monitor
WITHOUT_CLASSIFICATION	allow proxy to be read without synchronization. if proxy is under construction only the building thread can see it.
WITHOUT_CLASSIFICATION	create list of interface names to proxy (and make sure they really are interfaces) also build a hashcode from all classes to use for retrieving previously-created impl
WITHOUT_CLASSIFICATION	construct local variables based on parameter names passed in
WITHOUT_CLASSIFICATION	value of "tz" property is of a bit different format which confuses the java's timezone.gettimezone(id) method and so we need to convert it.
WITHOUT_CLASSIFICATION	file given use it and force it into binding
WITHOUT_CLASSIFICATION	ensure the object is associated with the wrapper we found it in so that if it comes back we don't re-wrap it
WITHOUT_CLASSIFICATION	return sqrt(squard) with precision of rootmc
WITHOUT_CLASSIFICATION	a scoped location of this variable (high 16 bits is how many scopes down and low 16 bits is what index in the right scope to set the value.
WITHOUT_CLASSIFICATION	arg
WITHOUT_CLASSIFICATION	get a new label using the provided label prefix
WITHOUT_CLASSIFICATION	normal exit perform finally and return
WITHOUT_CLASSIFICATION	coerce arguments
WITHOUT_CLASSIFICATION	0.0 is ok float range inverted float range? nan +infinity -infinity
WITHOUT_CLASSIFICATION	expected
WITHOUT_CLASSIFICATION	set this class's method names in var @__java_ovrd_methods if this is the new class otherwise get method names from there if this is a proxy superclass.
WITHOUT_CLASSIFICATION	ignore backslashed spaces in %w
WITHOUT_CLASSIFICATION	invert the sign since tz format and java format use opposite signs sigh also java api requires the sign to be always present be it "+" or "-".
WITHOUT_CLASSIFICATION	no binding given use 0 for both
WITHOUT_CLASSIFICATION	<=> may return nil in many circumstances e.g. 3 <=> nan
WITHOUT_CLASSIFICATION	use numbered access method
WITHOUT_CLASSIFICATION	always use "gmt" since that's required by java api.
WITHOUT_CLASSIFICATION	ignore if it's not a global var
WITHOUT_CLASSIFICATION	the datastruct is a place where custom information can be contained for core implementations that doesn't necessarily want to go to the trouble of creating a subclass of rubyobject. the openssl implementation uses this heavily to save holder objects containing java cryptography objects. java integration uses this to store the java object ref. protected transient object datastruct
WITHOUT_CLASSIFICATION	remaining arguments are for the script itself
WITHOUT_CLASSIFICATION	arg grouping use slower arg walking logic
WITHOUT_CLASSIFICATION	build scope names string
WITHOUT_CLASSIFICATION	tries to load at compile-time the constant referred to by 'constref'. this might be possible if the constant is defined and is not a forward reference to a value that will be defined later in the class.
WITHOUT_CLASSIFICATION	here we create an "anonymous" exception type used for unrolling the stack. mri creates a new one for every call to timeout which can be costly. we opt to use a single exception type for all cases to avoid this overhead.
WITHOUT_CLASSIFICATION	finally
WITHOUT_CLASSIFICATION	mri behavior with tz equal to "gmt" or "utc" time.now is not considered as a proper gmt/utc time env['tz']="gmt" time.now.gmt? ==> false env['tz']="utc" time.now.utc? ==> false hence we need to adjust for that.
WITHOUT_CLASSIFICATION	?l | boolean | true if file1 exists and is a symbolic link
WITHOUT_CLASSIFICATION	this try/catch is to allow failing over to the "commands" logic when running from within a jruby-complete jar file which has jruby.home = a jar file url that does not resolve correctly with jrubyfile.create.
WITHOUT_CLASSIFICATION	each root node has a top-level scope that we need to push
WITHOUT_CLASSIFICATION	specific arity
WITHOUT_CLASSIFICATION	in the case of two arguments mri will discard the portion of the first argument after a decimal point (i.e. "floor"). however in the case of a single argument any portion after the decimal point is honored.
WITHOUT_CLASSIFICATION	?w | boolean | true if file1 exists and is writable by effective uid/gid
WITHOUT_CLASSIFICATION	common variable methods
WITHOUT_CLASSIFICATION	@jrubymethod public irubyobject to_proc() { return rubyproc.newproc(getruntime() callblock.newcallclosure(this getruntime().getsymbol() arity.noarguments() new toproccallback(this) getruntime().getcurrentcontext()) block.type.proc) }
WITHOUT_CLASSIFICATION	let rescuedblock continue
WITHOUT_CLASSIFICATION	let rescuedblock continue
WITHOUT_CLASSIFICATION	do nothing fall back on default compiler below
WITHOUT_CLASSIFICATION	do nothing fall back on default compiler below
WITHOUT_CLASSIFICATION	should we run this pass on the current scope before running it on nested scopes?
WITHOUT_CLASSIFICATION	should we run this pass on the current scope before running it on nested scopes?
WITHOUT_CLASSIFICATION	================ utility methods ================
WITHOUT_CLASSIFICATION	================ utility methods ================
WITHOUT_CLASSIFICATION	write-volatile
WITHOUT_CLASSIFICATION	write-volatile
WITHOUT_CLASSIFICATION	write-volatile
WITHOUT_CLASSIFICATION	write-volatile
WITHOUT_CLASSIFICATION	write-volatile
WITHOUT_CLASSIFICATION	write-volatile
WITHOUT_CLASSIFICATION	write-volatile
WITHOUT_CLASSIFICATION	write-volatile
WITHOUT_CLASSIFICATION	write-volatile
WITHOUT_CLASSIFICATION	if more than 4 locals get the locals array too
WITHOUT_CLASSIFICATION	if more than 4 locals get the locals array too
WITHOUT_CLASSIFICATION	if more than 4 locals get the locals array too
WITHOUT_CLASSIFICATION	add property name aliases
WITHOUT_CLASSIFICATION	================ instance methods ================
WITHOUT_CLASSIFICATION	================ instance methods ================
WITHOUT_CLASSIFICATION	================ instance methods ================
WITHOUT_CLASSIFICATION	@jrubymethod(name = "new" meta = true visibility = visibility.private)
WITHOUT_CLASSIFICATION	@jrubymethod(name = "new" meta = true visibility = visibility.private)
WITHOUT_CLASSIFICATION	@jrubymethod(name = "new" meta = true visibility = visibility.private)
WITHOUT_CLASSIFICATION	internal variable methods
WITHOUT_CLASSIFICATION	backspace
WITHOUT_CLASSIFICATION	yysindex 889
WITHOUT_CLASSIFICATION	yygindex 136
WITHOUT_CLASSIFICATION	yygindex 136
WITHOUT_CLASSIFICATION	yygindex 136
WITHOUT_CLASSIFICATION	package-private
WITHOUT_CLASSIFICATION	fall through
WITHOUT_CLASSIFICATION	fall through
WITHOUT_CLASSIFICATION	mri issuses warning here on (rbignum(x)->len sizeof_bdigits yy > 10241024)
WITHOUT_CLASSIFICATION	interrupt the target thread in case it's blocking or waiting warning we no longer interrupt the target thread since this usually means interrupting io and with nio that means the channel is no longer usable. we either need a new way to handle waking a target thread that's waiting on io or we need to accept that we can't wake such threads and must wait for them to complete their operation. threadimpl.interrupt()
WITHOUT_CLASSIFICATION	interrupt the target thread in case it's blocking or waiting warning we no longer interrupt the target thread since this usually means interrupting io and with nio that means the channel is no longer usable. we either need a new way to handle waking a target thread that's waiting on io or we need to accept that we can't wake such threads and must wait for them to complete their operation. threadimpl.interrupt()
WITHOUT_CLASSIFICATION	nested class whose instances act as thunks reacting to to_str method called from (exception#to_str exception#message) mri equivalent rb_cnameerrormesg class name "message" construction method "!" to_str implementation "name_err_mesg_to_str" todo this class should not be lookupable
WITHOUT_CLASSIFICATION	we need to guarantee that any existing reads of old map can proceed. so we cannot yet null out each bin.
WITHOUT_CLASSIFICATION	the name of this source (e.g. a filename foo.rb)
WITHOUT_CLASSIFICATION	eq == 0 (i.e. false)
WITHOUT_CLASSIFICATION	eq == 0 (i.e. false)
WITHOUT_CLASSIFICATION	this should only be called by this and rubyfile. it allows this object to be created without a iohandler.
WITHOUT_CLASSIFICATION	we yield here to hopefully permit the target thread to schedule mri immediately schedules it so this is close but not exact
WITHOUT_CLASSIFICATION	note that addmethod now does its own put so any change made to functionality here should be made there as well
WITHOUT_CLASSIFICATION	currently dead code but useful when we figure out how to actually perform translit. private static boolean istranslit(string encoding) { return encoding.tolowercase().indexof(translit) != -1 ? true false }
WITHOUT_CLASSIFICATION	empirically it appears that to_ary coersions always return array or nil so this should always be an array by now.
WITHOUT_CLASSIFICATION	eq == 0 (i.e. false)
WITHOUT_CLASSIFICATION	eq == 0 (i.e. false)
WITHOUT_CLASSIFICATION	eq == 0 (i.e. false)
WITHOUT_CLASSIFICATION	eq == 0 (i.e. false)
WITHOUT_CLASSIFICATION	eq == 0 (i.e. false)
WITHOUT_CLASSIFICATION	no seconds just yield
WITHOUT_CLASSIFICATION	finally handling for abnormal exit
WITHOUT_CLASSIFICATION	if it's an inner class and it's not public we can't access it skip population of declared elements
WITHOUT_CLASSIFICATION	getfoo => foo getfoo(int) => foo(int)
WITHOUT_CLASSIFICATION	not reached
WITHOUT_CLASSIFICATION	not reached
WITHOUT_CLASSIFICATION	not reached
WITHOUT_CLASSIFICATION	not reached
WITHOUT_CLASSIFICATION	not reached
WITHOUT_CLASSIFICATION	not reached
WITHOUT_CLASSIFICATION	not reached
WITHOUT_CLASSIFICATION	not reached
WITHOUT_CLASSIFICATION	not reached
WITHOUT_CLASSIFICATION	not reached
WITHOUT_CLASSIFICATION	not reached
WITHOUT_CLASSIFICATION	not reached
WITHOUT_CLASSIFICATION	not reached
WITHOUT_CLASSIFICATION	not reached
WITHOUT_CLASSIFICATION	not reached
WITHOUT_CLASSIFICATION	not reached
WITHOUT_CLASSIFICATION	not reached
WITHOUT_CLASSIFICATION	mri behavior on windows it treats '/' as a root of a current drive (but only if single slash is present!) e.g. if current work directory is 'd/home/directory' then '/' means 'd/'. basically '/path' is treated as a relative path relative to the current drive. 'path' is treated as absolute one.
WITHOUT_CLASSIFICATION	not reached
WITHOUT_CLASSIFICATION	not reached
WITHOUT_CLASSIFICATION	not reached
WITHOUT_CLASSIFICATION	not reached
WITHOUT_CLASSIFICATION	not reached
WITHOUT_CLASSIFICATION	not reached
WITHOUT_CLASSIFICATION	not reached
WITHOUT_CLASSIFICATION	not reached
WITHOUT_CLASSIFICATION	not reached
WITHOUT_CLASSIFICATION	not reached
WITHOUT_CLASSIFICATION	not reached
WITHOUT_CLASSIFICATION	this is needed when the enclosing class or module is a singleton. in that case we generated a name such as nullfoo which broke marshalling among others. the correct thing to do in this situation is to insert the generate the name of form #<class01xasdfasd> if it's a singleton module/class which this code accomplishes.
WITHOUT_CLASSIFICATION	this is the only case it might be null here (in metaclass construction)
WITHOUT_CLASSIFICATION	eq == 0 (i.e. false) pop the extra result and replace with the send part of the and
WITHOUT_CLASSIFICATION	get "self"
WITHOUT_CLASSIFICATION	no timeout in critical section
WITHOUT_CLASSIFICATION	rethrow exception rethrow it
WITHOUT_CLASSIFICATION	only public methods
WITHOUT_CLASSIFICATION	if already inspecting there is no need to register/unregister again.
WITHOUT_CLASSIFICATION	first try to use drive letter from supplied dir value then try current work dir.
WITHOUT_CLASSIFICATION	jruby-2435 aliasing eval and other "special" methods should display a warning we warn because we treat certain method names as "special" for purposes of optimization. hopefully this will be enough to convince people not to alias them.
WITHOUT_CLASSIFICATION	generate a real method signature for the method with to/from coercions
WITHOUT_CLASSIFICATION	block argument to the method closure present class present method table mutations def defs undef alias likely call to eval makes calls that are aware of the frame makes calls that are aware of the frame's self makes calls that are aware of the frame's visibility makes calls that are aware of the frame's block makes calls that are aware of the frame's name makes calls that set or get backref makes calls that set or get lastline makes calls that are aware of the frame's class optional arguments to the method rest arg to the method makes calls that are aware of the scope makes a zero-argument super call accesses or sets constants accesses or sets class variables makes normal super call contains a retry
WITHOUT_CLASSIFICATION	add aliases in type nativetype and ffitype_
WITHOUT_CLASSIFICATION	create constants for flock
WITHOUT_CLASSIFICATION	double-testing args.length here but it avoids duplicating the proc-setup code in two places
WITHOUT_CLASSIFICATION	indices for temp values
WITHOUT_CLASSIFICATION	a while node could receive non-local flow control from any of these a closure within the loop an eval within the loop a block-arg-based proc called within the loop
WITHOUT_CLASSIFICATION	done with closure compilation
WITHOUT_CLASSIFICATION	done with closure compilation
WITHOUT_CLASSIFICATION	done with closure compilation
WITHOUT_CLASSIFICATION	done with closure compilation
WITHOUT_CLASSIFICATION	snapshot of contents of directory current position in directory
WITHOUT_CLASSIFICATION	exclusive locks in java require the channel to be writable otherwise an exception is thrown (terminating jruby execution). but flock behavior of mri is that it allows exclusive locks even on non-writable file. so we convert exclusive lock to shared lock if the channel is not writable to better match the mri behavior.
WITHOUT_CLASSIFICATION	explode array it's an internal "args" array
WITHOUT_CLASSIFICATION	explode array it's an internal "args" array
WITHOUT_CLASSIFICATION	set self to the class
WITHOUT_CLASSIFICATION	---------- public fields methods ---------
WITHOUT_CLASSIFICATION	a specific version was requested - use as is for search
WITHOUT_CLASSIFICATION	zero args no block do nothing
WITHOUT_CLASSIFICATION	we need to collect all methods though we'll only install the ones that are named in this class
WITHOUT_CLASSIFICATION	store each line into this list if not null.
WITHOUT_CLASSIFICATION	portion of line right after beginning marker
WITHOUT_CLASSIFICATION	do nothing
WITHOUT_CLASSIFICATION	do nothing
WITHOUT_CLASSIFICATION	do nothing
WITHOUT_CLASSIFICATION	do nothing
WITHOUT_CLASSIFICATION	if an io exception occurs (something odd but possible) a directory may return null.
WITHOUT_CLASSIFICATION	check the visibility of the previous frame which will be the frame in which the class is being eval'ed
WITHOUT_CLASSIFICATION	check the visibility of the previous frame which will be the frame in which the class is being eval'ed
WITHOUT_CLASSIFICATION	check the visibility of the previous frame which will be the frame in which the class is being eval'ed
WITHOUT_CLASSIFICATION	use array as-is it's a literal array
WITHOUT_CLASSIFICATION	finally with no exception
WITHOUT_CLASSIFICATION	now for all variables used by 'i' mark them live before 'i'
WITHOUT_CLASSIFICATION	todo varargs?
WITHOUT_CLASSIFICATION	todo varargs?
WITHOUT_CLASSIFICATION	the counting of slashes that follows is simply a way to adhere to ruby's unc (or something) compatibility. when ruby's expand_path is called with "foobar" it will return "foo/bar". jruby uses java.io.file and hence returns "/foo/bar". in order to retain java.io.file in the lower layers and provide full ruby compatibility the number of extra slashes must be counted and prepended to the result.
WITHOUT_CLASSIFICATION	this is almost always already interned since it will be called with a symbol in most cases but when created from java code we might get an argument that needs to be interned. addaccessor has as a precondition that the string must be interned
WITHOUT_CLASSIFICATION	not a class
WITHOUT_CLASSIFICATION	not a class
WITHOUT_CLASSIFICATION	ruby uses qnil here we use "dummy" because we need a class
WITHOUT_CLASSIFICATION	ruby uses qnil here we use "dummy" because we need a class
WITHOUT_CLASSIFICATION	io.available() only returns 0 after eof is encountered so we need to differentiate between the empty string and eof
WITHOUT_CLASSIFICATION	in the current logic if we get here we know that module is not an includedmodulewrapper so there's no need to fish out the delegate. but just in case the logic should change later let's do it anyway
WITHOUT_CLASSIFICATION	rb_iterate((value()_((value)))str_step (value)args step_i (value)iter)
WITHOUT_CLASSIFICATION	broken symlinks considered by exists() as non-existing so we need to check for symlinks explicitly.
WITHOUT_CLASSIFICATION	constant api methods
WITHOUT_CLASSIFICATION	create the default thread group
WITHOUT_CLASSIFICATION	range_each_func(range step_i b e args)
WITHOUT_CLASSIFICATION	============================ here are hash internals (this could be extracted to a separate class but it's not too large though) ============================
WITHOUT_CLASSIFICATION	low-level class variable interface fetch/store/list class variables for this module
WITHOUT_CLASSIFICATION	used only by the compiler/interpreter (will set the literal flag)
WITHOUT_CLASSIFICATION	used only by the compiler/interpreter (will set the literal flag)
WITHOUT_CLASSIFICATION	used for the 'redo' command
WITHOUT_CLASSIFICATION	used for the 'redo' command
WITHOUT_CLASSIFICATION	retuns null when not found to avoid unnecessary getruntime().getnil() call
WITHOUT_CLASSIFICATION	returns the stored value without processing undefs (autoloads)
WITHOUT_CLASSIFICATION	\cx \c\m-x
WITHOUT_CLASSIFICATION	new exception().printstacktrace()
WITHOUT_CLASSIFICATION	new exception().printstacktrace()
WITHOUT_CLASSIFICATION	new exception().printstacktrace()
WITHOUT_CLASSIFICATION	line 286
WITHOUT_CLASSIFICATION	line 476
WITHOUT_CLASSIFICATION	line 513
WITHOUT_CLASSIFICATION	line 530
WITHOUT_CLASSIFICATION	line 533
WITHOUT_CLASSIFICATION	line 537
WITHOUT_CLASSIFICATION	line 551
WITHOUT_CLASSIFICATION	end loop
WITHOUT_CLASSIFICATION	mri behavior we don't print errno for actual errno errors
WITHOUT_CLASSIFICATION	prepare to call class definition method
WITHOUT_CLASSIFICATION	traverse the instructions in this basic block in reverse order! mark as dead all instructions whose results are not used!
WITHOUT_CLASSIFICATION	fields should really be an immutable map as it is never modified after construction
WITHOUT_CLASSIFICATION	load self object as irubyobject for recv param
WITHOUT_CLASSIFICATION	todo varargs?
WITHOUT_CLASSIFICATION	if we define a class in ruby but later want to allow it to be defined in java the allocator needs to be updated
WITHOUT_CLASSIFICATION	we only want io objects with valid streams (better to error now).
WITHOUT_CLASSIFICATION	produce a nicer error since rubyists aren't used to seeing this
WITHOUT_CLASSIFICATION	value
WITHOUT_CLASSIFICATION	value
WITHOUT_CLASSIFICATION	value
WITHOUT_CLASSIFICATION	value
WITHOUT_CLASSIFICATION	value
WITHOUT_CLASSIFICATION	yylhs 542
WITHOUT_CLASSIFICATION	value
WITHOUT_CLASSIFICATION	value
WITHOUT_CLASSIFICATION	value
WITHOUT_CLASSIFICATION	mri has extra pointer which makes our code look a little bit more strange in comparison
WITHOUT_CLASSIFICATION	tempory buffer to build up a potential token. consumer takes responsibility to reset this before use.
WITHOUT_CLASSIFICATION	tmpposition is required because getposition()'s side effects. if the warning is generated the getposition() on line 954 (this line + 18) will create a wrong position if the "inclusive" flag is not set.
WITHOUT_CLASSIFICATION	what is \v in c? case '\v' c2 = 'v' break
WITHOUT_CLASSIFICATION	consider thread aspects of this
WITHOUT_CLASSIFICATION	position within source must reflect the actual offset and column. since we ate an extra character here (this accounting is normally done in read ) we should update position info.
WITHOUT_CLASSIFICATION	an interrupt or timeout may have caused us to miss a notify that we consumed so do another notify in case someone else is available to pick it up.
WITHOUT_CLASSIFICATION	line 572
WITHOUT_CLASSIFICATION	line 601
WITHOUT_CLASSIFICATION	line 601
WITHOUT_CLASSIFICATION	line 625
WITHOUT_CLASSIFICATION	line 649
WITHOUT_CLASSIFICATION	line 691
WITHOUT_CLASSIFICATION	line 723
WITHOUT_CLASSIFICATION	line 732
WITHOUT_CLASSIFICATION	line 745
WITHOUT_CLASSIFICATION	line 766
WITHOUT_CLASSIFICATION	line 785
WITHOUT_CLASSIFICATION	line 794
WITHOUT_CLASSIFICATION	line 800
WITHOUT_CLASSIFICATION	line 812
WITHOUT_CLASSIFICATION	line 827
WITHOUT_CLASSIFICATION	line 839
WITHOUT_CLASSIFICATION	line 845
WITHOUT_CLASSIFICATION	line 864
WITHOUT_CLASSIFICATION	line 886
WITHOUT_CLASSIFICATION	line 896
WITHOUT_CLASSIFICATION	line 911
WITHOUT_CLASSIFICATION	line 929
WITHOUT_CLASSIFICATION	line 952
WITHOUT_CLASSIFICATION	line 970
WITHOUT_CLASSIFICATION	line 972
WITHOUT_CLASSIFICATION	line 991
WITHOUT_CLASSIFICATION	line 1011
WITHOUT_CLASSIFICATION	line 1026
WITHOUT_CLASSIFICATION	line 1038
WITHOUT_CLASSIFICATION	line 1067
WITHOUT_CLASSIFICATION	line 1085
WITHOUT_CLASSIFICATION	line 1097
WITHOUT_CLASSIFICATION	line 1105
WITHOUT_CLASSIFICATION	line 1122
WITHOUT_CLASSIFICATION	line 1133
WITHOUT_CLASSIFICATION	line 1145
WITHOUT_CLASSIFICATION	line 1169
WITHOUT_CLASSIFICATION	line 1201
WITHOUT_CLASSIFICATION	line 1210
WITHOUT_CLASSIFICATION	line 1229
WITHOUT_CLASSIFICATION	line 1261
WITHOUT_CLASSIFICATION	line 1287
WITHOUT_CLASSIFICATION	line 1293
WITHOUT_CLASSIFICATION	line 1307
WITHOUT_CLASSIFICATION	line 1320
WITHOUT_CLASSIFICATION	line 1325
WITHOUT_CLASSIFICATION	line 1363
WITHOUT_CLASSIFICATION	line 1398
WITHOUT_CLASSIFICATION	line 1448
WITHOUT_CLASSIFICATION	line 1456
WITHOUT_CLASSIFICATION	line 1473
WITHOUT_CLASSIFICATION	line 1492
WITHOUT_CLASSIFICATION	line 1513
WITHOUT_CLASSIFICATION	line 1523
WITHOUT_CLASSIFICATION	line 1562
WITHOUT_CLASSIFICATION	line 1582
WITHOUT_CLASSIFICATION	line 1603
WITHOUT_CLASSIFICATION	line 1603
WITHOUT_CLASSIFICATION	line 1615
WITHOUT_CLASSIFICATION	line 1620
WITHOUT_CLASSIFICATION	line 1635
WITHOUT_CLASSIFICATION	line 1652
WITHOUT_CLASSIFICATION	line 1681
WITHOUT_CLASSIFICATION	line 1708
WITHOUT_CLASSIFICATION	line 1716
WITHOUT_CLASSIFICATION	line 1755
WITHOUT_CLASSIFICATION	line 1772
WITHOUT_CLASSIFICATION	line 1789
WITHOUT_CLASSIFICATION	actions_end
WITHOUT_CLASSIFICATION	actions_end
WITHOUT_CLASSIFICATION	force for args
WITHOUT_CLASSIFICATION	last expression should not be void
WITHOUT_CLASSIFICATION	compstmt position includes both parens around it
WITHOUT_CLASSIFICATION	we can assign if we already have variable of that name here or we are the only scope in the chain (which local scopes always are).
WITHOUT_CLASSIFICATION	ignore no debugger present
WITHOUT_CLASSIFICATION	ignore no debugger present
WITHOUT_CLASSIFICATION	ignore no debugger present
WITHOUT_CLASSIFICATION	ignore no debugger present
WITHOUT_CLASSIFICATION	fixme temporarily disabling because this fires way too much running rails tests. jruby-518
WITHOUT_CLASSIFICATION	this method exists for us to break up multiple expression when nodes (e.g. when 123) into individual whennodes. the primary reason for this is to ensure lazy evaluation of the arguments (when foobargar) to prevent side-effects. in the old code this was done using nested when statements which was awful for interpreter and compilation. notes this has semantic equivalence but will not be lexically equivalent. compiler needs to detect same bodies to simplify bytecode generated.
WITHOUT_CLASSIFICATION	line 313
WITHOUT_CLASSIFICATION	line 339
WITHOUT_CLASSIFICATION	line 361
WITHOUT_CLASSIFICATION	line 413
WITHOUT_CLASSIFICATION	line 451
WITHOUT_CLASSIFICATION	line 472
WITHOUT_CLASSIFICATION	line 500
WITHOUT_CLASSIFICATION	line 515
WITHOUT_CLASSIFICATION	line 555
WITHOUT_CLASSIFICATION	line 582
WITHOUT_CLASSIFICATION	line 619
WITHOUT_CLASSIFICATION	line 636
WITHOUT_CLASSIFICATION	line 669
WITHOUT_CLASSIFICATION	line 703
WITHOUT_CLASSIFICATION	line 776
WITHOUT_CLASSIFICATION	line 814
WITHOUT_CLASSIFICATION	line 823
WITHOUT_CLASSIFICATION	line 854
WITHOUT_CLASSIFICATION	line 872
WITHOUT_CLASSIFICATION	line 905
WITHOUT_CLASSIFICATION	line 925
WITHOUT_CLASSIFICATION	line 958
WITHOUT_CLASSIFICATION	line 992
WITHOUT_CLASSIFICATION	line 1047
WITHOUT_CLASSIFICATION	line 1072
WITHOUT_CLASSIFICATION	line 1081
WITHOUT_CLASSIFICATION	line 1108
WITHOUT_CLASSIFICATION	line 1136
WITHOUT_CLASSIFICATION	line 1168
WITHOUT_CLASSIFICATION	line 1192
WITHOUT_CLASSIFICATION	line 1241
WITHOUT_CLASSIFICATION	line 1267
WITHOUT_CLASSIFICATION	line 1286
WITHOUT_CLASSIFICATION	line 1301
WITHOUT_CLASSIFICATION	line 1314
WITHOUT_CLASSIFICATION	line 1333
WITHOUT_CLASSIFICATION	line 1362
WITHOUT_CLASSIFICATION	line 1395
WITHOUT_CLASSIFICATION	line 1420
WITHOUT_CLASSIFICATION	line 1439
WITHOUT_CLASSIFICATION	line 1476
WITHOUT_CLASSIFICATION	line 1535
WITHOUT_CLASSIFICATION	line 1588
WITHOUT_CLASSIFICATION	line 1618
WITHOUT_CLASSIFICATION	line 1643
WITHOUT_CLASSIFICATION	line 1669
WITHOUT_CLASSIFICATION	line 1728
WITHOUT_CLASSIFICATION	line 1753
WITHOUT_CLASSIFICATION	line 1779
WITHOUT_CLASSIFICATION	line 1794
WITHOUT_CLASSIFICATION	line 1812
WITHOUT_CLASSIFICATION	line 1837
WITHOUT_CLASSIFICATION	line 1895
WITHOUT_CLASSIFICATION	line 1925
WITHOUT_CLASSIFICATION	line 1950
WITHOUT_CLASSIFICATION	line 1992
WITHOUT_CLASSIFICATION	line 2014
WITHOUT_CLASSIFICATION	whether this scope is used as the "argument scope" for e.g. zsuper
WITHOUT_CLASSIFICATION	if we could not find the constant from cref..then try getting from inheritence hierarchy
WITHOUT_CLASSIFICATION	this while loop is for restarting the block call in case a 'redo' fires.
WITHOUT_CLASSIFICATION	this while loop is for restarting the block call in case a 'redo' fires.
WITHOUT_CLASSIFICATION	this while loop is for restarting the block call in case a 'redo' fires.
WITHOUT_CLASSIFICATION	this while loop is for restarting the block call in case a 'redo' fires.
WITHOUT_CLASSIFICATION	this while loop is for restarting the block call in case a 'redo' fires.
WITHOUT_CLASSIFICATION	this while loop is for restarting the block call in case a 'redo' fires.
WITHOUT_CLASSIFICATION	this while loop is for restarting the block call in case a 'redo' fires.
WITHOUT_CLASSIFICATION	a 'next' is like a local return from the block ending this call or yield.
WITHOUT_CLASSIFICATION	a 'next' is like a local return from the block ending this call or yield.
WITHOUT_CLASSIFICATION	a 'next' is like a local return from the block ending this call or yield.
WITHOUT_CLASSIFICATION	a 'next' is like a local return from the block ending this call or yield.
WITHOUT_CLASSIFICATION	happens with native exceptions should not filter those out
WITHOUT_CLASSIFICATION	happens with native exceptions should not filter those out
WITHOUT_CLASSIFICATION	we create one extra dynamicscope on a binding so that when we 'eval "b=1" binding' the 'b' will get put into this new dynamic scope. the original scope does not see the new 'b' and successive evals with this binding will. i take it having the ability to have succesive binding evals be able to share same scope makes sense from a programmers perspective. one crappy outcome of this design is it requires dynamic and static scopes to be mutable for this one case.
WITHOUT_CLASSIFICATION	populate up to shorter of calling arguments or local parameters in the block
WITHOUT_CLASSIFICATION	populate up to shorter of calling arguments or local parameters in the block
WITHOUT_CLASSIFICATION	tc under method self under method name args
WITHOUT_CLASSIFICATION	allow it to bubble up
WITHOUT_CLASSIFICATION	irubyobject dynamicmethod rubyclass cacheentry threadcontext irubyobject irubyobject string args
WITHOUT_CLASSIFICATION	irubyobject dynamicmethod rubyclass cacheentry threadcontext irubyobject irubyobject string args
WITHOUT_CLASSIFICATION	irubyobject dynamicmethod rubyclass cacheentry threadcontext irubyobject irubyobject string args
WITHOUT_CLASSIFICATION	irubyobject dynamicmethod rubyclass cacheentry threadcontext irubyobject irubyobject string args
WITHOUT_CLASSIFICATION	irubyobject dynamicmethod rubyclass cacheentry threadcontext irubyobject irubyobject string args
WITHOUT_CLASSIFICATION	irubyobject dynamicmethod rubyclass cacheentry threadcontext irubyobject irubyobject string args
WITHOUT_CLASSIFICATION	irubyobject dynamicmethod rubyclass cacheentry threadcontext irubyobject irubyobject string args
WITHOUT_CLASSIFICATION	irubyobject rubyclass cacheentry threadcontext irubyobject irubyobject string args
WITHOUT_CLASSIFICATION	irubyobject cacheentry threadcontext irubyobject irubyobject string args
WITHOUT_CLASSIFICATION	trim extension to try other options
WITHOUT_CLASSIFICATION	trim extension to try other options
WITHOUT_CLASSIFICATION	check for a builtin first.
WITHOUT_CLASSIFICATION	end suffix iteration
WITHOUT_CLASSIFICATION	end suffix iteration
WITHOUT_CLASSIFICATION	unfortunately the number of digits in the exponent is not clearly defined in ruby documentation. this is a platform/version-dependent behavior. on linux/mac/cygwinnix two digits are used. on windows 3 digits are used. it is desirable for jruby to have consistent behavior and the two digits behavior was selected. this is also in sync with "java-native" sprintf behavior (java.util.formatter). e or e
WITHOUT_CLASSIFICATION	represents the the dynamic portion of scoping information. the variablevalues are the values of assigned local or block variables. the staticscope identifies which sort of scope this is (block or local). properties of dynamic scopes 1. static and dynamic scopes have the same number of names to values 2. size of variables (and thus names) is determined during parsing. so those structured do not need to change fixme when creating dynamic scopes we sometimes accidentally pass in extra parents. this is harmless (other than wasting memory) but we should not do that. we can fix this in two ways 1. fix all callers 2. check parent that is passed in and make if new instance is local then its parent is not local
WITHOUT_CLASSIFICATION	this method handles '' patterns and delegates to fnmatch_helper for the main work.
WITHOUT_CLASSIFICATION	peel onionmake subpatterns out of outer layer of glob and recall with each subpattern example foo{a{c}b}bar -> fooa{c}bar foobbar
WITHOUT_CLASSIFICATION	double precision native double precision native
WITHOUT_CLASSIFICATION	64-bit number native (as bignum)
WITHOUT_CLASSIFICATION	next indicates to decode using native encoding format
WITHOUT_CLASSIFICATION	calculate based on a b c and d
WITHOUT_CLASSIFICATION	processes seem to have some peculiar locking sequences so we need to ensure nobody is trying to close/destroy while we are
WITHOUT_CLASSIFICATION	mri behavior for 'q' do not add trailing nils
WITHOUT_CLASSIFICATION	this test may be too lax but it is the same as in mri
WITHOUT_CLASSIFICATION	exec needs to behave differently in-process because it's technically supposed to replace the calling process. so if we're supposed to run in-process we allow it to use the default streams and not use pumpers at all. see jruby-2156 and jruby-2154.
WITHOUT_CLASSIFICATION	snip off ruby or jruby command from list of arguments leave alone if the command is the name of a script
WITHOUT_CLASSIFICATION	the problem we trying to solve below stdin in java is blocked and non-interruptible so if we invoke read on it we might never be able to interrupt such thread. so we use in.available() to see if there is any input ready and only then read it. but this approach can't tell whether the end of stream reached or not so we might end up looping right at the end of the stream. well at least we can improve the situation by checking if some input was ever available and if so not checking for available anymore and just go to read.
WITHOUT_CLASSIFICATION	first digit is always printed
WITHOUT_CLASSIFICATION	an empirically derived rule precision applies to significand length irrespective of exponent
WITHOUT_CLASSIFICATION	an official rule clarified if the exponent <clarif>after adjusting for exponent form</clarif> is < -4 or the exponent <clarif>after adjusting for exponent form</clarif> is greater than the precision use exponent form
WITHOUT_CLASSIFICATION	in this mode '.' is always printed
WITHOUT_CLASSIFICATION	now some data
WITHOUT_CLASSIFICATION	now some data
WITHOUT_CLASSIFICATION	mri behavior validate only the unnumbered arguments
WITHOUT_CLASSIFICATION	else catch oversize below
WITHOUT_CLASSIFICATION	calculation for simple (and typical) case adapted from sun.misc.floatingdecimal
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	utf8 lead byte
WITHOUT_CLASSIFICATION	utf8 lead byte
WITHOUT_CLASSIFICATION	utf8 lead byte
WITHOUT_CLASSIFICATION	could not get canonical path just use given path
WITHOUT_CLASSIFICATION	we always open this rw since we can only open it r or rw.
WITHOUT_CLASSIFICATION	call chmod after we created the randomaccesfile because otherwise the file could be read-only
WITHOUT_CLASSIFICATION	attempt to set the permissions if we have been passed a posix instance and only if the file was created in this call.
WITHOUT_CLASSIFICATION	when reading into a heap buffer the jvm allocates a temporary direct bytebuffer of the requested size. to avoid allocating a huge direct buffer when doing ludicrous reads (e.g. 1g or more) we split the read up into chunks of no more than 1m
WITHOUT_CLASSIFICATION	if it is a file channel then we can pre-allocate the output buffer to the total size of buffered + remaining bytes in file
WITHOUT_CLASSIFICATION	cannot discern the total read length - allocate at least enough for the buffered data
WITHOUT_CLASSIFICATION	copy what is in the buffer if there is some buffered data
WITHOUT_CLASSIFICATION	append what we read into our buffer and allow the loop to continue
WITHOUT_CLASSIFICATION	already have some bytes buffered just return those
WITHOUT_CLASSIFICATION	reset buffer
WITHOUT_CLASSIFICATION	synchronize and re-check to avoid creating more than one selector per provider
WITHOUT_CLASSIFICATION	todo ruby logic is somewhat more complicated here see comments after
WITHOUT_CLASSIFICATION	is there something built into jruby to do this?
WITHOUT_CLASSIFICATION	note that we can't say the following because of the on-the-fly conversion of fixnum to long asserttrue(value == valueviavaluesiterator)
WITHOUT_CLASSIFICATION	value equality result = eval("key = 3 arr = [] arr[key] = 'one' arr.store(3 'two') puts arr[key]") assertequals("two" result)
WITHOUT_CLASSIFICATION	uncomment the "puts" lines if you want to see more detail
WITHOUT_CLASSIFICATION	since we don't have any other error reporting mechanism we add the error message as an always-failing test to the test suite.
WITHOUT_CLASSIFICATION	change the thread context to include the class
DESIGN	fixme do we need the check or does main.java not call thisthey should consolidate
DESIGN	fixme move out of this class!
DESIGN	this is a rather ugly hack but similar to mri. see hash.cruby_setenv and similar in mri we search all keys for a case-insensitive match and use that
DESIGN	fixme legal here? may want unsupportedoperationexception
DESIGN	fixme don't allow multiple threads to do this at once
DESIGN	todo eliminate?
DESIGN	todo people extending gzipwriter/reader will break. find better way here.
DESIGN	for jruby-2759 when met choose cet timezone to work around joda
DESIGN	we might need to perform a dst correction
DESIGN	rb_copy_generic_ivar from dup_setup here unlikely..
DESIGN	rb_ary_push_m fixme whis is this named "push_m"?
DESIGN	from dup_setup rb_copy_generic_ivar from dup_setup here unlikely..
DESIGN	todo ary_sort_check should be done here
DESIGN	todo ary_sort_check should be done here
DESIGN	todo is this correct ?
DESIGN	todo make more efficient by not creating irubyarray[]
DESIGN	todo list.sublist(from to).clear() is supposed to clear the sublist from the list. how can we support this operation?
DESIGN	todo not_allocatable_allocator is probably ok here. confirm. jruby-415
DESIGN	fixme this table will get moved into posix library so we can get all actual supported signals. this is a quick fix to support basic signals until that happens.
DESIGN	the implementations of these are all bonus (see todo above) i was going to throw an error from these but it appears to be the wrong place to do it.
DESIGN	todo number formatting here mri uses "%-.10g" 1.4 api is a must?
DESIGN	todo remove
DESIGN	fixme moved this here to get what's obviously a utility method out of irubyobject. perhaps security methods should find their own centralized home at some point.
DESIGN	fixme get rid of laziness and handle restricted access elsewhere
DESIGN	todo should frozen error have its own distinct class? if not should more share?
DESIGN	todo this is kinda gross
DESIGN	not sure how well this works but it works much better than just currenttimemillis by itself.
DESIGN	todo exec should replace the current process. this could be possible with jna.
DESIGN	fixme in order for thread to play well with the standard 'new' behavior it must provide an allocator that can create empty object instances which initialize then fills with appropriate data.
DESIGN	todo not sure that we should skip calling join() altogether. thread.join() has some implications for java memory model etc.
DESIGN	fixme there's some code duplication here with rubyobject#inspect
DESIGN	fixme this should probably do some translation from ruby priority levels to java priority levels (until we have green threads)
DESIGN	todo no java stringity
DESIGN	need to reexamine this
DESIGN	todo these were missing so we're not handling them elsewhere?
DESIGN	todo why are we duplicating the constants here and then in fileconstants below? fileconstants is included in io.
DESIGN	todo this method is not present in mri!
DESIGN	todo this is also defined in the metaclass tooconsolidate somewhere.
DESIGN	something wrong we don't know the cwd todo is this behavior really desirable? /mov
DESIGN	fixme this does not have exact same semantics as rubyarray.join but they probably could be consolidated (perhaps as join(args[] sep dochomp)).
DESIGN	todo should this be deprecated ? (to be efficient internals should deal with rubyhash directly)
DESIGN	todo implement tty? and isatty. we have no real capability to determine this from java but if we could set tty status then we could invoke jruby differently to allow stdin to return true on this. this would allow things like cgi.rb to work properly.
DESIGN	todo better error handling
DESIGN	this seems unlikely to happen unless it's a totally bogus fileno so do we even need to bother trying to create one?
DESIGN	in fact we should probably raise an error yes?
DESIGN	todo ruby reuses this logic for other "write" behavior by checking if it's an io and calling write again
DESIGN	fixme we should probably still be dyncalling 'write' here
DESIGN	todo this version differs from ioctl by checking whether fcntl exists and raising notimplemented if it doesn't perhaps no difference for us?
DESIGN	fixme i don't like the null checks here
DESIGN	todo handle writing into original buffer better
DESIGN	todo is this the right thing to do?
DESIGN	todo this isn't an exact port of mri's pipe behavior so revisit
DESIGN	fixme if nativeexception is expected to be used from ruby code it should provide a real allocator to be used. otherwise class.new will fail as will marshalling. jruby-415
DESIGN	fixme finalizer should be dupped here
DESIGN	rb_obj_id return the internal id of an object. fixme should this be renamed to match its ruby name?
DESIGN	fixme obvious issue that not all platforms can display all attributes. ugly hacks. using generic posix library makes pushing inspect behavior into specific system impls rather painful.
DESIGN	workaround for jruby-4149
DESIGN	todo not_allocatable_allocator may be ok here but it's unclear how structs work with marshalling. confirm behavior and ensure we're doing this correctly. jruby-415
DESIGN	fixme this is copied code from rubyarray. both re struct and array should share one impl this is also hacky since i construct ruby objects to access ruby arrays through aref instead of something lower.
DESIGN	fixme we should not be regenerating this over and over
DESIGN	fixme this is probably not very efficient since it loads all methods for each call
DESIGN	todo consider a better way of synchronizing
DESIGN	fixme why was this using a fullfunctioncallbackmethod before that did callsuper?
DESIGN	a cloned method now belongs to a new class. set it. todo make dynamicmethod immutable
DESIGN	fixme figure out why we get null sometimes
DESIGN	fixme can get optimized for ieqlnode
DESIGN	rb_mod_remove_cvar fixme any good reason to have two identical methods? (same as remove_class_variable)
DESIGN	fixme these descriptions should probably be moved out to constantine project which deals with all platform-dependent constants.
DESIGN	todo what about n arg?
DESIGN	todo rounding mode should not be hard-coded. see #mode.
DESIGN	regular division with some default precision todo proper algorithm to set the precision
DESIGN	todo better algorithm to set precision needed
DESIGN	fixme what should these really be? numeric? assert x instanceof rubycomplex && y instanceof rubycomplex
DESIGN	fixme what should this really be? assert x instanceof rubycomplex
DESIGN	fixme the code below is a copy of rubyio.puts and we should avoid copy-paste.
DESIGN	yowthis is still ugly
DESIGN	end hack
DESIGN	todo should next and return also catch here?
DESIGN	todo generalize this type-checking code into irubyobject helper.
DESIGN	todo newtypeerror does not offer enough for ruby error string
DESIGN	fixme if true array is common enough we should pre-allocate and stick somewhere
DESIGN	todo this is almost rubymodule#instance_methods on the metaclass. perhaps refactor.
DESIGN	the following three methods must be defined fast since they expect to modify the current frame (i.e. they expect no frame will be allocated for them). jruby-1185.
DESIGN	fixme i think this chunk is equivalent to mri id2name (and not our public method id2name). make into method if used more than once.
DESIGN	todo confirm expected args are irubyobject (or similar)
DESIGN	todo confirm expected args are irubyobject (or similar)
DESIGN	todo confirm expected args are irubyobject (or similar)
DESIGN	optional args so we have irubyobject[] todo confirm
DESIGN	todo split this into two sub-classes so that name and constnode can be specified seperately.
DESIGN	todo wire into new exception handling mechanism
DESIGN	fixme constdecl could be two seperate classes (or done differently since constnode and name never exist at the same time.
DESIGN	todo do above but not below for additional newline nodes
DESIGN	todo figure out how this can happen and possibly remove
DESIGN	todo at least parsersupport.attrset passes argsnode as null. implicitnil is wrong magic for setupargs since it will irubyobject[] { nil }. so we need to figure out a nice fast null pattern for setupargs. assert argsnode != null "receivernode is not null"
DESIGN	fixme jruby-3188 ends up with condition returning nullquick fix until i can dig into it
DESIGN	fixme i use a for block to implement end node because we need a proc which captures its enclosing scope. forblock now represents these node and should be renamed.
DESIGN	method has more than 500 lines we'll need to split it and therefore need to use a heap-based scope
DESIGN	todo callback for value would be more efficient but unlikely to be a big cost (constants are rarely assigned)
DESIGN	if it's a single-arg when but contains an array we know it's a real literal array fixme this is a gross way to figure it out parser help similar to yield argument passing (expandarguments) would be better
DESIGN	todo callback for value would be more efficient but unlikely to be a big cost (constants are rarely assigned)
DESIGN	xxx const lookup can trigger const_missing is that enough to warrant it always being executed?
DESIGN	if body is a rescue node inspect its pieces separately to avoid it disabling all optz todo this is gross.
DESIGN	if body is a rescue node inspect its pieces separately to avoid it disabling all optz todo this is gross.
DESIGN	fixme somehow i'd feel better if this could get the appropriate var index from the argumentnode
DESIGN	todo this filtering is kind of grossit would be nice to get some parser help here
DESIGN	fixme somehow i'd feel better if this could get the appropriate var index from the argumentnode
DESIGN	arguments compilers always create irubyobject[] but we want to use rubyarray.concat here fixme as a result this is not efficient since it creates and then later unwraps an array
DESIGN	fixme this is temporary since the variable compilers assume we want args already on stack for assignment. we just pop and continue with 1.9 args logic.
DESIGN	todo reads/writes from frame todo information on scoping todo visibility?
DESIGN	for visibility checking without requiring frame self todo don't bother passing when fcall or vcall and adjust callsite appropriately
DESIGN	todo cache?
DESIGN	todo cache?
DESIGN	index for the item this could probably be more efficient bailing out on assigning args past the end?
DESIGN	if we don't have opt args start after args (they will be assigned later) this is for crap like def foo(a = (b = true 1)) which numbers b before a fixme only starting after required args since opt args may access others and rest args conflicts with compileroot using "0" to indicate [] signature.
DESIGN	fixme this really ought to be in clinit but it doesn't matter much
DESIGN	install invokedynamic bootstrapper todo need to abstract this setup behind another compiler interface
DESIGN	fixme this isn't right for within ensured/rescued code
DESIGN	sss fixme deprecated! going forward all instructions should come from the cfg
DESIGN	sss fixme do we need to check if l is same as whatever popped?
DESIGN	sss fixme what is the difference between classvarasgnnode & classvardeclnode
DESIGN	sss fixme i added this in. is this correct?
DESIGN	sss fixme what is the difference between classvarasgnnode & classvardeclnode
DESIGN	sss fixme are we guaranteed that we splats dont head to multiple-assignment nodes! i.e. |(ab)|?
DESIGN	sss fixme can this return anything other than nil?
DESIGN	sss fixme what happens to the add class in this case??
DESIGN	con fixme i don't know how to make case be an expressiondoes that logic need to go here?
DESIGN	sss fixme where is this set up? how is this diff from classvardeclnode??
DESIGN	sss fixme is this correct?
DESIGN	sss fixme used anywhere? i don't see calls to this anywhere public operand builddasgnassignment(node node ir_scope s) { dasgnnode dasgnnode = (dasgnnode) node s.getvariablecompiler().assignlocalvariable(dasgnnode.getindex() dasgnnode.getdepth()) }
DESIGN	sss fixme receiver -- this is the class meta object basically? operand receiver = build(defsnode.getreceivernode() s)
DESIGN	self = args[0] sss fixme verify that this is correct
DESIGN	sss fixme is this correct?
DESIGN	sss fixme 1. is the ordering correct? (poll before next)
DESIGN	add a "self" recv here todo is this right?
DESIGN	sss fixme is this correctly placed at the end of the loop iteration?
DESIGN	sss fixme where does this go? m.setlineposition(arraynode.getposition())
DESIGN	sss fixme i could make ir_loop a scope too semantically it is a scope but functionally not sure if this is required yet
DESIGN	sss fixme should this be a string literal or a string? dummy class for the script
DESIGN	sss fixme does int suffice or do we need long?
DESIGN	sss fixme correct? where does closure arg come from?
DESIGN	sss fixme should i have a reference to the ir_loop that is being retried?
DESIGN	simplify the variables too -- to keep these variables in sync with what is actually used in the when clauses this is not required for correctness reasons but only for performance reasons.
DESIGN	sss fixme this should never get called for constant svalues
DESIGN	sss fixme should this be operand or compoundstring? can it happen that symbols are built out of other than compound strings? or can it happen during optimizations that this becomes a generic operand?
DESIGN	todo need to get this back into the method signaturenow is too late
DESIGN	hack in to replace usual readline with this
DESIGN	bit risky if someone changes completor but useful for method calls
DESIGN	fixme this determine module is in a strange location and should somehow be in block
DESIGN	create block for this iter node fixme we shouldn't use the current scope if it's not actually from the same hierarchy of static scopes
DESIGN	we basically ignore protocol. let someone report it
DESIGN	workaround for a bug in sun's jdk 1.5.x see httpbugs.sun.com/bugdatabase/view_bug.do?bug_id=6303753
DESIGN	context is null wipe out the softreference (this could be done with a reference queue)
DESIGN	fixme we want to eliminate these type casts when possible
DESIGN	todo determine whether we should perhaps store non-singleton class in the implementationclass
DESIGN	fixme set up a callconfiguration for this
DESIGN	fixme set up a call configuration for this
DESIGN	todo make this do specific-arity calling
DESIGN	add 'new' with full signature so it's guaranteed to be directly accessible todo no need for this to be a full formal jvm signature
DESIGN	add method with full signature so it's guaranteed to be directly accessible todo no need for this to be a full formal jvm signature
DESIGN	fixme this whole thing could probably be implemented as a module and mixed into appropriate classes especially if it uses either ioinput/outputstream or is smart about the kind of io-like object it's being used against.
DESIGN	using ioinputstream may not be the most performance way but it's easy.
DESIGN	using iooutputstream may not be the most performance way but it's easy.
DESIGN	using iochannel may not be the most performant way but it's easy.
DESIGN	these extra arrays are really unfortunate split some of these paths out to eliminate?
DESIGN	todo wrong - get interfaces from class
DESIGN	todo catch exception if constant is already set by other thread
DESIGN	todo public only?
DESIGN	see note below re 2-field kludge
DESIGN	todo protected methods. this is going to require a rework of some of the mechanism.
DESIGN	todo protected methods. this is going to require a rework of some of the mechanism.
DESIGN	fixme do we really want 'declared' methods? includes private/protected and does _not_ include superclass methods
DESIGN	fixme this doesn't actually support anything but string
DESIGN	again shouldn't happen. todo might want to throw exception instead.
DESIGN	again shouldn't happen. todo might want to throw exception instead.
DESIGN	this needs to be split since conditional calling #inherited doesn't fit standard ruby semantics
DESIGN	todo decompose getjavapackagemodule so we don't parse fullname
DESIGN	todo decompose getjavapackagemodule so we don't parse fullname
DESIGN	this covers the rare case of lower-case class names (and thus will fail 99.999% of the time). fortunately we'll only do this once per package name. (and seriously folks look into best practices)
DESIGN	fixme we should also support orgs that use capitalized package names (including embarrassingly the one i work for) but this should be enabled by a system property as the expected default behavior for an upper-case value should be (and is) to treat it as a class name and raise an exception if it's not found
DESIGN	todo check for java reserved names and raise exception if encountered
DESIGN	upper-case package name todo top-level upper-case package was supported in the previous (ruby-based) implementation so leaving as is. see note at #getproxyorpackageunderpackage re future approach below the top-level.
DESIGN	fixme wtf is this? why would these use the class?
DESIGN	fixme needs to be rethought
DESIGN	todo specifying soft refs may want to compare memory consumption behavior with weak refs (specify weak in place of soft below)
DESIGN	todo not_allocatable_allocator is probably ok here since we don't intend for people to monkey with this type and it can't be marshalled. confirm. jruby-415
DESIGN	todo not_allocatable_allocator is probably ok here since we don't intend for people to monkey with this type and it can't be marshalled. confirm. jruby-415
DESIGN	if we get here we found a matching method use it todo choose narrowest method by continuing to search
DESIGN	todo only setaccessible to account for pattern found by accessing constants included from a non-public interface. (aka java.util.zip.zipconstants being implemented by many classes)
DESIGN	todo only setaccessible to account for pattern found by accessing constants included from a non-public interface. (aka java.util.zip.zipconstants being implemented by many classes) todo not sure we need this at all since we only expose public fields. field.setaccessible(true)
DESIGN	fixme not_allocatable_allocator is probably not right here since we might eventually want javaarray to be marshallable. jruby-414
DESIGN	fixme do we really want 'declared' methods? includes private/protected and does _not_ include superclass methods. also the getdeclared calls may throw securityexception if we're running under a restrictive security policy.
DESIGN	don't bother to check if final method it won't be there (not generated can't be!)
DESIGN	super calls from proxies must use reflected method fixme possible to make handles do the superclass call?
DESIGN	actual type does not exactly match method return type re-get converter fixme when the only autoconversions are primitives this won't be needed
DESIGN	fixme ideally javaobject instances should be marshallable which means that the javaobject metaclass should have an appropriate allocator. jruby-414
DESIGN	fixme shouldn't need @__java_ovrd_methods just query locally defined methods.
DESIGN	we always prepend an org.jruby.proxy package to the beginning because java and javax packages are protected and signed jars prevent us generating new classes with those package names. see jruby-2439.
DESIGN	todo only used by interface implementation eliminate it
DESIGN	create block for this iter node fixme we shouldn't use the current scope if it's not actually from the same hierarchy of static scopes
DESIGN	modules are included with a shim class we must find that shim to handle super() appropriately
DESIGN	lame generics issues making segment class static and manually inserting cache reference to work around various problems generically referencing methods/vars across classes.
DESIGN	entry exists proxy doesn't match. replace. this could happen if old proxy was gc'ed todo raise exception if stored proxy is non-null? (not gc'ed)
DESIGN	fixme how much more obtuse can this be? heredoc already parsed this and saved stringdo not parse..just return
DESIGN	ruby constants for strings (should this be moved somewhere else?)
DESIGN	hacky advance position to eat newline here.
DESIGN	fixme not sure what the semantics of transfer are cfiber.definefastmethod("transfer" cb.getfastoptmethod("transfer"))
DESIGN	ignorebean doesn't get registered todo why does that bother me?
DESIGN	ignorebean doesn't get registered todo why does that bother me?
DESIGN	enebo totally weird naming (in mri is not allocated and is a local var name)
DESIGN	fixme remove this from grammars.
DESIGN	fixme consider fixing node_assign itself rather than single case
DESIGN	workaround for jruby-2326 (mri does not enter this production for some reason)
DESIGN	fixme lose syntactical elements here (and others like this)
DESIGN	enebo lots of optz in 1.9 parser here
DESIGN	this is perhaps innefficient timewise? optimal spacewise
DESIGN	this is a dummy scope we should find a way to make that more explicit
DESIGN	we clone dynamic scope because this will be a new instance of a block. any previously captured instances of this block may still be around and we do not want to start overwriting those values when we create a new one. enebo once we make self lastclass and lastmethod immutable we can remove duplicate
DESIGN	todo this probably isn't the best hack but it works until we can have different root frame setup for 1.9 easily.
DESIGN	fixme this is currently only here because of some problems with iooutputstream writing to a "bare" runtime without a proper scope
DESIGN	fixme i think we need these pushed somewhere?
DESIGN	fixme this is currently only here because of some problems with iooutputstream writing to a "bare" runtime without a proper scope
DESIGN	fixme this is currently only here because of some problems with iooutputstream writing to a "bare" runtime without a proper scope
DESIGN	xxx again screwy evaling under previous frame's scope
DESIGN	fixme this version is faster than the previous but both suffer from a crucial flaw it is impossible to create an objectspace with an iterator that doesn't either a. hold on to objects that might otherwise be collected or b. have no way to guarantee that a call to hasnext() will be correct or that a subsequent call to next() will produce an object. for our purposes for now this may be acceptable.
DESIGN	fixme maybe not best place but move it to a good home
DESIGN	fixme this is gross. don't do this.
DESIGN	@author headius fixme convert to enum ?
DESIGN	fixme no i don't like it.
DESIGN	todo this is probably bad
DESIGN	fixme not very efficient
DESIGN	invoke callmethodmissing method directly todo this could be further optimized since some dsls hit method_missing pretty hard
DESIGN	todo this is really ineffient and potentially a problem everytime anyone require's something. we should try to make loadpath a special array object.
DESIGN	fixme inefficient constructing a bignum just for dumping?
DESIGN	fixme not very efficient
DESIGN	fixme not very efficient
DESIGN	fixme not very efficient
DESIGN	fixme not very efficient
DESIGN	fixme this should go somewhere more generic -- maybe idutil
DESIGN	fixme potentially could just use bytelist here?
DESIGN	fixme this is almost entirely duplicated from main.java
DESIGN	todo factor this chunk as in mri/yarv getaster
DESIGN	todo factor this chunk as in mri/yarv getaster
DESIGN	grrr arghh want to subclass sun.misc.floatingdecimal but can't so we must do all this (the next 70 lines of code) which has already been done by floatingdecimal.
DESIGN	it would be nice (and logical!) if exponent form behaved like e/e and decimal form behaved like f but no such luck. hence
DESIGN	this is gross but java api's aren't iso 8601 compliant at all
DESIGN	this is gross but java api's aren't iso 8601 compliant at all
DESIGN	todo get rid of this (lax returns 0.0 strict will throw)
DESIGN	todo turn off the negative? will return -0.0 in lax mode
DESIGN	fixme this probably belongs in a different package.
DESIGN	todo it would be nice to throw a better error for this
DESIGN	todo it would be nice to throw a better error for this
DESIGN	fixme i don't like this
DESIGN	todo it's perhaps just a coincidence that all the channels for which we should raise are instanceof selectablechannel since stdio is notso this bothers me slightly. -con
DESIGN	fixme clearing read buffer hereis this appropriate?
DESIGN	todo this should entry into error handling somewhere
DESIGN	fixme this worries me a bit since it could allocate a lot with a large newlength
DESIGN	we use a highly uncommon string to represent the paragraph delimiter (100% soln not worth it)
DESIGN	todo ruby does not seem to care about invalid numeric mode values i am not sure if ruby overflows here also
DESIGN	todo make this more intelligible value
DESIGN	xxx do something?
DESIGN	for visibility checking without requiring frame self todo don't bother passing when fcall or vcall and adjust callsite appropriately
DESIGN	for visibility checking without requiring frame self todo don't bother passing when fcall or vcall and adjust callsite appropriately
DESIGN	up to ten stuff into tmp locals load in reverse order and assign fixme there's probably a slightly smarter way but is it important?
DESIGN	index for the item this could probably be more efficient bailing out on assigning args past the end?
DESIGN	if we don't have opt args start after args (they will be assigned later) this is for crap like def foo(a = (b = true 1)) which numbers b before a fixme only starting after required args since opt args may access others and rest args conflicts with compileroot using "0" to indicate [] signature.
DESIGN	sss fixme these should get normally compiled or initialized some other way sss fixme parent/super-type info is incorrect! these are just placeholders for now .. this needs to be updated with real class objects later!
DESIGN	sss fixme move this code to some utils area .. or probably there is already a method for this in some jruby utils class holy cow! just to append two darned arrays!
DESIGN	sss fixme this method (at least in the context of multiple assignment) is a little weird. it calls regular to_ary on the object. but if it encounters a method_missing the value is inserted into an 1-element array! try "abc = 1" first then define fixnum.to_ary method and try it again. ex httpgist.github.com/163551
DESIGN	this is for jruby-2988 since after a suspend the terminal seems to need to be reinitialized. since we can't easily detect suspension initialize after every readline. probably not fast but this is for interactive terminals anywayso who cares?
DESIGN	set up a field for the cacheentry todo make this an array so it's not as much class metadata similar to abstractscript stuff
DESIGN	exit monitor before making call fixme this not being in a finally is a little worrisome
DESIGN	fixme added this because marshal_spec seemed to reconstitute objects without calling datawrapstruct this resulted in object being null after unmarshalling
DESIGN	if we get here we found a matching method use it todo choose narrowest method by continuing to search
DESIGN	we clone dynamic scope because this will be a new instance of a block. any previously captured instances of this block may still be around and we do not want to start overwriting those values when we create a new one. enebo once we make self lastclass and lastmethod immutable we can remove duplicate
DESIGN	todo this is actually now returning the scope of whoever called method#to_proc which is obviously wrong but there's no scope to provide for many methods. it fixes jruby-2237 but needs a better solution.
DESIGN	fixme we should be getting this from the runtime rather than assume none? return runtime.getencodingservice().getencoding(runtime.getdefaultexternalencoding())
DESIGN	ignorebean doesn't get registered todo why does that bother me?
DESIGN	this is a fairly specific hack for empty string but it does the job
DESIGN	xxx this constructor is a hack to implement the __end__ syntax. converting a reader back into an inputstream doesn't generally work.
DESIGN	fixme total hack to get flash in rails marshalling/unmarshalling in session okwe need to totally change marshalling to work with overridden core classes.
DESIGN	fixme this is an ugly hack to resolve jruby-1381 i'm not proud of it
DESIGN	we're not setting the provider or anything but it seems that bouncycastle does some internal things in its provider's constructor which require it to be executed in a secure context. ideally this hack should be removed. see jruby-3919 and this bc bug httpwww.bouncycastle.org/jira/browse/bja-227
DESIGN	fixme big fat hack here because scope names are expected to be interned strings by the parser
DESIGN	fixme big fat hack here because scope names are expected to be interned strings by the parser
DESIGN	hack to get right style for input
DESIGN	object#to_a is obsolete. we match ruby's hack until to_a goes away. then we can remove this hack too.
DESIGN	small hack to save a cast later on
DESIGN	temporary hack to handle non-ruby values will come up with better solution shortly
DESIGN	object#to_a is obsolete. we match ruby's hack until to_a goes away. then we can remove this hack too.
DESIGN	hack in order to have stdout/err act like ttys and flush always we set anything assigned to stdout/stderr to sync
DESIGN	hack force clinit to be created
DESIGN	fixme this is pretty gross we should have a cleaner initialization that doesn't depend on package-visible fields and ideally is atomic probably using an immutable structure we replace all at once. lazy null when no groups defined
DESIGN	todo should probably apply the null object pattern for a non-allowed class rather than null
DESIGN	todo set our metaclass to target's class (i.e. scary!)
DESIGN	todo confirm expected args are irubyobject (or similar)
DESIGN	ignorebean doesn't get registered todo why does that bother me?
DESIGN	optional args so we have irubyobject[] todo confirm
DESIGN	not intended to be called directly by users (private) old todo from ruby code this should be implemented in javaclass.java where we can check for reserved ruby names conflicting methods etc.
DESIGN	todo? i think this ends up propagating from normal java exceptions sys_fail(openfile.getpath())
DESIGN	todo make callcoerced work in block contextthen fix downto step and upto.
DESIGN	todo the rest of thisseeking to same position is unnecessary since we share a channel but some of this may be needed?
DESIGN	todo this version differs from ioctl by checking whether fcntl exists and raising notimplemented if it doesn't perhaps no difference for us?
DESIGN	fixme this below is temporary but its much safer for cow (it prevents not shared strings with begin != 0) this allows now e.g. bytelist#set not to be begin aware
DESIGN	ignore job was cancelled fixme is this ok?
DESIGN	todo mri behavior call "+" or "add" depending on the call. but this leads to exceptions when floats are added. see httpblade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-core/17374 return callcoerced(context op b true) -- this is mri behavior. we'll use ours for now thus providing an ability to add floats.
DESIGN	must be called from main thread (it is currently but this bothers me)
DESIGN	todo wire into new exception handling mechanism
DESIGN	todo not_allocatable_allocator is probably ok here since we don't intend for people to monkey with this type and it can't be marshalled. confirm. jruby-415
DESIGN	todo not_allocatable_allocator is probably ok here. confirm. jruby-415
DESIGN	todo not_allocatable_allocator is probably ok here. confirm. jruby-415
DESIGN	todo not_allocatable_allocator is probably ok here. confirm. jruby-415
DESIGN	fixme determine if a real allocator is needed here. do people want to extend javaclass? do we want them to do that? can you class.new(javaclass)? should you be able to? todo not_allocatable_allocator is probably ok here since we don't intend for people to monkey with this type and it can't be marshalled. confirm. jruby-415
DESIGN	sss fixme token can be final for a method -- implying that the token is only for this particular implementation of the method but if the mehod is modified we create a new method object which in turn gets a new token. what makes sense?? intuitively it seems the first one but let us see current code version token for this method -- can change during execution as methods get redefined!
DESIGN	fixme weakref.rb also does caller(2) here for the backtrace
DESIGN	fixme bit of a kludge here (non-interface classes assigned to both class and module fields). simplifies proxy extender code will go away when ji is overhauled (and proxy extenders are deprecated).
DESIGN	there's not a compelling reason to keep javaclass instances in a weak map (any proxies created are [were] kept in a non-weak map so in most cases they will stick around anyway) and some good reasons not to (javaclass creation is expensive for one many lookups are performed when passing parameters to/from methods etc.). todo faster custom concurrent map
DESIGN	todo we should be able to optimize this quite a bit post-1.0. javaclass already has all the methods organized by method name the next version (supporting protected methods/fields) will have them organized even further. so collectmethods here can just lookup the overridden methods in the javaclass map should be much faster.
DESIGN	fixme finalizer should be dupped here
DESIGN	fixme null check is removable once we figure out how to assign to unset named block args
DESIGN	rb_obj_id return the internal id of an object. fixme should this be renamed to match its ruby name?
DESIGN	todo bleeding runtime into parser. arity may be should be in parser (to keep bleeding oneway)
DESIGN	sss fixme maybe this is not really a concern after all nesting level of this scope in the lexical nesting of scopes in the current file -- this is not to be confused with semantic nesting of scopes across files. consider this code in a file f class m1m2m3c end so c is at lexical nesting level of 1 (the file script is at 0) in the file 'f' semantically it is at level 3 (m1 m2 m3 are at 012). this is primarily used to ensure that variable names don't clash! i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! private int _lexicalnestinglevel
DESIGN	sometimes the value can be retrieved at "compile time". if we succeed nothing like it! we might not .. for the following reasons 1. the constant is missing 2. the reference is a forward-reference 3. the constant's value is only known at run-time on first-access (but this is runtime isn't it??) 4. our compiler isn't able to right away infer that this is a constant. sss fixme 1. the operand can be a literal array range or hash -- hence operand because array range and hash derive from operand and not constant is there a way to fix this impedance mismatch? 2. it should be possible to handle the forward-reference case by creating a new forwardreference operand and then inform the scope of the forward reference which the scope can fix up when the reference gets defined. at code-gen time if the reference is unresolved when a value is retrieved for the forward-ref and we get a null we can throw a constmissing exception! not sure!
DESIGN	reset value map if this instruction is the start/end of a basic block right now calls are considered hard boundaries for optimization and information cannot be propagated across them! sss fixme rather than treat all calls with a broad brush what we need is to capture different attributes about a call - uses closures - known call target - can modify scope - etc. this information is probably already present in the ast inspector
DESIGN	fixme legal here? may want unsupportedoperationexception
DESIGN	xxx this check previously used callmethod("==") to check for equality between classes when scanning the hierarchy. however the == check may be safe we should only ever have one instance bound to a given type/constant. if it's found to be unsafe examine ways to avoid the == call.
DESIGN	end hack
DESIGN	if not overloaded we add a method that guesses at which signature to use todo just adding first one right nowadd in signature-guessing logic
DESIGN	fixme this is an ugly hack to resolve jruby-1381 i'm not proud of it
DESIGN	todo this version is better than the hackish previous one. windows behavior needs to be defined though. i suppose this version could be improved more too. todo /etc/passwd is also inadequate for macosx since it does not use /etc/passwd for regular user accounts
DESIGN	todo should next and return also catch here?
DESIGN	let's only generate methods for those the user may actually intend to override. that includes any defined in the current class and any ancestors that are also javaproxyclasses (but none from any other ancestor classes). methods defined in mixins will be considered intentionally overridden except those from kernel java and javaproxymethods as well as enumerable. todo may want to exclude other common mixins?
DESIGN	fixme consider fixing node_assign itself rather than single case
DESIGN	workaround for jruby-2326 (mri does not enter this production for some reason)
DESIGN	fixme we should really not be creating the dynamic scope for the root of the ast before parsing. this makes us end up needing to readjust this dynamic scope coming out of parse (and for local static scopes it will always happen because of $~ and $_). fixme because we end up adjusting this after-the-fact we can't use any of the specific-size scopes.
DESIGN	fixme resolve what the hell is going on
DESIGN	this is perhaps innefficient timewise? optimal spacewise
DESIGN	if variables were added then we may need to grow the dynamic scope to match the static one. fixme make this so we only need to check this for blockscope != null. we cannot currently since we create the dynamicscope for a localstaticscope before parse begins. refactoring should make this fixable.
DESIGN	fixme this is currently only here because of some problems with iooutputstream writing to a "bare" runtime without a proper scope
DESIGN	fixme this is currently only here because of some problems with iooutputstream writing to a "bare" runtime without a proper scope
DESIGN	we're depending on the side effect of the load which loads the class but does not turn it into a script i don't like it but until we restructure the code a bit more we'll need to quietly let it by here.
DESIGN	todo for now we use a faithful reimplementation of mri's algorithm but should use utf8encoding facilities from joni once it starts prefroming utf-8 content validation.
DESIGN	process streams get channel.newchannel()ed into filechannel but are not actually seekable. so instead of just the isseekable check doing instanceof filechannel we must also add this boolean to check which we set to false when it's known that the incoming channel is from a process. fixme this is gross and it's nio's fault for not providing a nice way to tell if a channel is "really" seekable.
