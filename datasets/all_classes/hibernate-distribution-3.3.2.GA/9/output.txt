// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9439947429918755	WITHOUT_CLASSIFICATION	0.0536470218941786	IMPLEMENTATION	0.002299094410220476	DESIGN	2.9785741560198268E-5	TEST	1.8951245234572214E-5	DOCUMENTATION	1.0403716930618716E-5	DEFECT
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9439947429918755	WITHOUT_CLASSIFICATION	0.0536470218941786	IMPLEMENTATION	0.002299094410220476	DESIGN	2.9785741560198268E-5	TEST	1.8951245234572214E-5	DOCUMENTATION	1.0403716930618716E-5	DEFECT
//TODO: return new Lock(ts);	IMPLEMENTATION	0.8970053172945907	WITHOUT_CLASSIFICATION	0.10074051010396574	DESIGN	0.0015684469060324223	DEFECT	5.277509732233973E-4	IMPLEMENTATION	1.4610757807466876E-4	DOCUMENTATION	1.1867144113105227E-5	TEST
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.876122274244464	WITHOUT_CLASSIFICATION	0.09951812435826235	IMPLEMENTATION	0.013039662822988298	DEFECT	0.010100987066611954	TEST	9.597803309757245E-4	DESIGN	2.591711766976977E-4	DOCUMENTATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.5590927421996625	WITHOUT_CLASSIFICATION	0.4235063969408262	IMPLEMENTATION	0.01212865871322563	DESIGN	0.002462715251849376	DEFECT	0.002441870710753058	TEST	3.6761618368330075E-4	DOCUMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.8001325954278838	IMPLEMENTATION	0.11577239939228394	WITHOUT_CLASSIFICATION	0.08265767928727162	DESIGN	6.94477254039555E-4	DEFECT	4.260580158045461E-4	DOCUMENTATION	3.167906227163883E-4	TEST
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9579732798903046	WITHOUT_CLASSIFICATION	0.03479212331959009	DESIGN	0.007210930462750531	IMPLEMENTATION	1.53803622385762E-5	DOCUMENTATION	7.43548125730493E-6	TEST	8.504838588954783E-7	DEFECT
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.5234612757224261	WITHOUT_CLASSIFICATION	0.2924505817534258	DEFECT	0.17565174267888267	DESIGN	0.00799606235817904	IMPLEMENTATION	2.8164316689842063E-4	TEST	1.5869432018791803E-4	DOCUMENTATION
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.9915366173325882	WITHOUT_CLASSIFICATION	0.005803460972950226	DESIGN	0.0019645500457368243	IMPLEMENTATION	4.135082083951223E-4	TEST	2.565394834544505E-4	DEFECT	2.5323956875038726E-5	DOCUMENTATION
//TODO: native ids	IMPLEMENTATION	0.8761597383654446	IMPLEMENTATION	0.07397576628995567	WITHOUT_CLASSIFICATION	0.03968522761266404	DESIGN	0.008589934771573748	DEFECT	0.0013224726463194035	DOCUMENTATION	2.6686031404256415E-4	TEST
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.999197048786097	WITHOUT_CLASSIFICATION	6.537330329265392E-4	DESIGN	1.3780150186722294E-4	IMPLEMENTATION	5.123463897056188E-6	DOCUMENTATION	3.527928790272258E-6	TEST	2.7652864216642028E-6	DEFECT
//TODO: handle property-ref	IMPLEMENTATION	0.6867768500442052	WITHOUT_CLASSIFICATION	0.2262200799715716	DESIGN	0.0774859803439938	IMPLEMENTATION	0.00780681347321674	DEFECT	0.0010733697822521622	DOCUMENTATION	6.369063847605925E-4	TEST
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9995443626164872	WITHOUT_CLASSIFICATION	3.09964842486642E-4	IMPLEMENTATION	1.3293228470821408E-4	DESIGN	8.39876865591386E-6	DEFECT	3.4085783768612497E-6	TEST	9.329092851892613E-7	DOCUMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9995443626164872	WITHOUT_CLASSIFICATION	3.09964842486642E-4	IMPLEMENTATION	1.3293228470821408E-4	DESIGN	8.39876865591386E-6	DEFECT	3.4085783768612497E-6	TEST	9.329092851892613E-7	DOCUMENTATION
/**	IMPLEMENTATION	0.4099703815469931	DOCUMENTATION	0.377254050133344	DESIGN	0.10446024197441676	IMPLEMENTATION	0.04010368760390805	WITHOUT_CLASSIFICATION	0.034408704179707664	DEFECT	0.033802934561630235	TEST
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.5078292872981903	IMPLEMENTATION	0.2951426072265315	WITHOUT_CLASSIFICATION	0.15827688957022104	DESIGN	0.03285681689087329	DEFECT	0.0032611206864331084	DOCUMENTATION	0.0026332783277508006	TEST
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9555833376997424	IMPLEMENTATION	0.033893246780002086	DESIGN	0.010396062065688738	DEFECT	1.1980622461658874E-4	TEST	4.78646462886864E-6	WITHOUT_CLASSIFICATION	2.7607653214063473E-6	DOCUMENTATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.9958798510384728	DESIGN	0.004066428869310619	WITHOUT_CLASSIFICATION	4.3342156058824445E-5	DEFECT	8.871872422352614E-6	TEST	1.064682090368126E-6	DOCUMENTATION	4.4138164503025235E-7	IMPLEMENTATION
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.9999999899828567	WITHOUT_CLASSIFICATION	9.99111684434387E-9	DESIGN	2.138761978332213E-11	TEST	4.637452853047231E-12	DOCUMENTATION	1.1688869162729581E-15	IMPLEMENTATION	2.6822499910097786E-16	DEFECT
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.9102889574493114	DESIGN	0.043153224633622325	IMPLEMENTATION	0.03406590636659202	DEFECT	0.011042336468519934	WITHOUT_CLASSIFICATION	9.299351934170908E-4	DOCUMENTATION	5.196398885372218E-4	TEST
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.9260936157085031	WITHOUT_CLASSIFICATION	0.060238912069838085	IMPLEMENTATION	0.013528271331300598	DESIGN	8.020561303381853E-5	TEST	5.1337809160507505E-5	DOCUMENTATION	7.657468163854834E-6	DEFECT
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.9083726943964484	DESIGN	0.0915371718231354	WITHOUT_CLASSIFICATION	5.8035202087107955E-5	IMPLEMENTATION	1.8883103461476283E-5	TEST	1.2965265831895403E-5	DEFECT	2.5020903579559376E-7	DOCUMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.5762185114256599	IMPLEMENTATION	0.4106769476457543	WITHOUT_CLASSIFICATION	0.01140958091587854	DESIGN	9.399191558291109E-4	TEST	6.258499375066786E-4	DEFECT	1.2919091937132213E-4	DOCUMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.89297608631797	IMPLEMENTATION	0.10315896746273734	WITHOUT_CLASSIFICATION	0.00371976264654522	DESIGN	1.2339647307435541E-4	TEST	1.7090450452360404E-5	DOCUMENTATION	4.696649220755995E-6	DEFECT
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.89297608631797	IMPLEMENTATION	0.10315896746273734	WITHOUT_CLASSIFICATION	0.00371976264654522	DESIGN	1.2339647307435541E-4	TEST	1.7090450452360404E-5	DOCUMENTATION	4.696649220755995E-6	DEFECT
// TODO : why aren't these the same?	IMPLEMENTATION	0.6381983170748547	DESIGN	0.35862742372902184	IMPLEMENTATION	0.0019253613656909873	DOCUMENTATION	6.605010380029601E-4	DEFECT	5.797846315674966E-4	TEST	8.61216086195814E-6	WITHOUT_CLASSIFICATION
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.8682230264341511	DESIGN	0.11910251389240786	WITHOUT_CLASSIFICATION	0.007769833646502476	DEFECT	0.004884750545982011	IMPLEMENTATION	1.9362279516577726E-5	DOCUMENTATION	5.132014399228314E-7	TEST
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.9655159791413593	DESIGN	0.03434052190270402	IMPLEMENTATION	1.1804001115777738E-4	DEFECT	1.47378140670109E-5	DOCUMENTATION	9.786889163865768E-6	WITHOUT_CLASSIFICATION	9.342415478580076E-7	TEST
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.4959034323428504	IMPLEMENTATION	0.4872325114592381	WITHOUT_CLASSIFICATION	0.013990265764791064	DESIGN	0.002732380118283539	DEFECT	8.568353729130521E-5	DOCUMENTATION	5.572677754558384E-5	TEST
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.7067557034508127	DESIGN	0.17640534505150798	IMPLEMENTATION	0.10588941990571635	WITHOUT_CLASSIFICATION	0.005683499632912973	TEST	0.005122739219315751	DEFECT	1.432927397342952E-4	DOCUMENTATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.9965711628418109	DESIGN	0.002260890360829113	WITHOUT_CLASSIFICATION	8.377261632150187E-4	DEFECT	2.7322029617188044E-4	IMPLEMENTATION	3.162832884480378E-5	TEST	2.537200912832095E-5	DOCUMENTATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.9360618105625562	DESIGN	0.03268295974063254	IMPLEMENTATION	0.0222398956597325	WITHOUT_CLASSIFICATION	0.008792144562498348	DEFECT	2.1261464211192902E-4	DOCUMENTATION	1.0574832468383987E-5	TEST
// todo : look at optimizing these...	IMPLEMENTATION	0.871538382475323	WITHOUT_CLASSIFICATION	0.1046248732754514	IMPLEMENTATION	0.017198335880288074	DEFECT	0.006413407000683299	DESIGN	1.7594178758661687E-4	TEST	4.9059580667473684E-5	DOCUMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.7561758504257244	DESIGN	0.1344016076874696	IMPLEMENTATION	0.096245541686177	WITHOUT_CLASSIFICATION	0.012973065112957224	DEFECT	1.1635887323876305E-4	DOCUMENTATION	8.75762144328914E-5	TEST
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.9159712844434579	DESIGN	0.033711586891400185	IMPLEMENTATION	0.033052784918879655	DEFECT	0.01662278681230277	WITHOUT_CLASSIFICATION	5.783987165924262E-4	TEST	6.315821736707144E-5	DOCUMENTATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.6659663379318709	DESIGN	0.3276986731266784	WITHOUT_CLASSIFICATION	0.006050130168766258	DEFECT	1.6624969652667324E-4	DOCUMENTATION	7.091458899216328E-5	IMPLEMENTATION	4.7694487165628545E-5	TEST
// TODO: not visible to the user!	IMPLEMENTATION	0.5419875344867754	WITHOUT_CLASSIFICATION	0.23194516574892232	DEFECT	0.20947513121850886	IMPLEMENTATION	0.015715567040681642	DESIGN	6.494401225164738E-4	DOCUMENTATION	2.2716138259531969E-4	TEST
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.5324553138947697	DESIGN	0.31070927198649917	IMPLEMENTATION	0.15598106674419598	WITHOUT_CLASSIFICATION	5.012904093319747E-4	DEFECT	2.4660267237991553E-4	TEST	1.0645429282311696E-4	DOCUMENTATION
//TODO: use these in methods above	IMPLEMENTATION	0.9922801987734906	DESIGN	0.004548568846600891	IMPLEMENTATION	0.003107767288677507	WITHOUT_CLASSIFICATION	3.226378619679722E-5	DOCUMENTATION	2.155676693502417E-5	TEST	9.644538099244636E-6	DEFECT
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.5750594146777579	DESIGN	0.39209759859824045	IMPLEMENTATION	0.025756607028455395	WITHOUT_CLASSIFICATION	0.005766212233951617	DEFECT	0.0012290330458941796	TEST	9.113441570041478E-5	DOCUMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.5750594146777579	DESIGN	0.39209759859824045	IMPLEMENTATION	0.025756607028455395	WITHOUT_CLASSIFICATION	0.005766212233951617	DEFECT	0.0012290330458941796	TEST	9.113441570041478E-5	DOCUMENTATION
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.9996107374065756	DESIGN	2.8965780393832484E-4	IMPLEMENTATION	7.177616064842193E-5	WITHOUT_CLASSIFICATION	1.4073023352053217E-5	DEFECT	1.1995884362970131E-5	TEST	1.7597211228246787E-6	DOCUMENTATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9906046329173404	DESIGN	0.009395307442675808	WITHOUT_CLASSIFICATION	4.134507314913938E-8	TEST	1.232270323361219E-8	DEFECT	5.217127889766557E-9	IMPLEMENTATION	7.550795319101229E-10	DOCUMENTATION
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.8664952323722978	WITHOUT_CLASSIFICATION	0.06475553901224518	DESIGN	0.05744612132227608	DEFECT	0.009591161845467856	IMPLEMENTATION	0.0015241953573087905	TEST	1.8775009040443885E-4	DOCUMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9829662606169396	DESIGN	0.015800774925082722	IMPLEMENTATION	4.5036659343795736E-4	TEST	3.541400120986278E-4	DEFECT	2.8720301724958314E-4	DOCUMENTATION	1.4125483519147476E-4	WITHOUT_CLASSIFICATION
//TODO: add owner argument!!	IMPLEMENTATION	0.5069718888964357	DESIGN	0.375034681267715	IMPLEMENTATION	0.056402345444866504	WITHOUT_CLASSIFICATION	0.04978490070937268	DOCUMENTATION	0.0109896103526068	DEFECT	8.165733290031928E-4	TEST
//TODO: formulas ?	IMPLEMENTATION	0.9053943697656001	WITHOUT_CLASSIFICATION	0.08119057776006611	DESIGN	0.012790601553725895	IMPLEMENTATION	3.1450287307173435E-4	DEFECT	1.607451467813118E-4	DOCUMENTATION	1.492029007549693E-4	TEST
//TODO: include the rowids!!!!	IMPLEMENTATION	0.7783428346816508	DESIGN	0.15422503409553073	WITHOUT_CLASSIFICATION	0.0636726500836709	IMPLEMENTATION	0.0022940960120780935	DEFECT	0.0014056357820916158	DOCUMENTATION	5.974934497795472E-5	TEST
// todo : cache this sql...	IMPLEMENTATION	0.9584659355815077	WITHOUT_CLASSIFICATION	0.04003460203255712	DESIGN	0.0014737619061979226	DEFECT	1.066748236873117E-5	DOCUMENTATION	7.839099626036811E-6	TEST	7.1938977425278704E-6	IMPLEMENTATION
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.9717163174464881	WITHOUT_CLASSIFICATION	0.025004021349085966	DESIGN	0.0030310699950041363	IMPLEMENTATION	1.459870582060452E-4	TEST	7.807202156274215E-5	DOCUMENTATION	2.45321296529632E-5	DEFECT
//TODO: cache this in an instvar	IMPLEMENTATION	0.9584435240734769	DESIGN	0.04132805057832574	WITHOUT_CLASSIFICATION	1.0665277207304243E-4	DEFECT	6.83003289768805E-5	DOCUMENTATION	3.480381026556737E-5	TEST	1.8668436881842648E-5	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.864765376739704	DESIGN	0.12659565098730421	IMPLEMENTATION	0.008287764651530987	DEFECT	2.0067049588925873E-4	TEST	1.4186597241309712E-4	DOCUMENTATION	8.671153158365197E-6	WITHOUT_CLASSIFICATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.62875751830428	IMPLEMENTATION	0.36063004996172304	DESIGN	0.010292257105071105	WITHOUT_CLASSIFICATION	1.6139053044174679E-4	DEFECT	1.0210216176231934E-4	DOCUMENTATION	5.6681936721755916E-5	TEST
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.8705121041679206	WITHOUT_CLASSIFICATION	0.1285609626425743	DESIGN	8.336747554908325E-4	IMPLEMENTATION	5.437522696984262E-5	TEST	3.317212699350444E-5	DEFECT	5.711080050940545E-6	DOCUMENTATION
//TODO: proxies!	IMPLEMENTATION	0.5060615513109641	IMPLEMENTATION	0.4561763016192388	WITHOUT_CLASSIFICATION	0.02475948804400993	DESIGN	0.011084213368453845	DEFECT	0.0012054996499297201	DOCUMENTATION	7.129460074035904E-4	TEST
//TODO: terrible implementation!	IMPLEMENTATION	0.8596542012441922	IMPLEMENTATION	0.10596108974224777	WITHOUT_CLASSIFICATION	0.031138912346456892	DESIGN	0.002475271555129497	DEFECT	6.292036295888468E-4	TEST	1.4132148238478343E-4	DOCUMENTATION
//TODO: proxies!	IMPLEMENTATION	0.5060615513109641	IMPLEMENTATION	0.4561763016192388	WITHOUT_CLASSIFICATION	0.02475948804400993	DESIGN	0.011084213368453845	DEFECT	0.0012054996499297201	DOCUMENTATION	7.129460074035904E-4	TEST
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.8301537847029142	DESIGN	0.1665519662618601	IMPLEMENTATION	0.003248152395242315	DEFECT	3.97803605894705E-5	TEST	6.170425606086609E-6	WITHOUT_CLASSIFICATION	1.4585378771298183E-7	DOCUMENTATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.9274652134628917	IMPLEMENTATION	0.06480691848504055	WITHOUT_CLASSIFICATION	0.00632628977293827	DESIGN	0.0012011553182244975	DEFECT	1.771237655379061E-4	DOCUMENTATION	2.3299195367133558E-5	TEST
//TODO: proxies!	IMPLEMENTATION	0.5060615513109641	IMPLEMENTATION	0.4561763016192388	WITHOUT_CLASSIFICATION	0.02475948804400993	DESIGN	0.011084213368453845	DEFECT	0.0012054996499297201	DOCUMENTATION	7.129460074035904E-4	TEST
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9995563541646271	WITHOUT_CLASSIFICATION	2.596394566399312E-4	DESIGN	1.6010167353290485E-4	DEFECT	2.0517098790109733E-5	TEST	1.7218935862172735E-6	IMPLEMENTATION	1.6657128238650307E-6	DOCUMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.999385024783519	WITHOUT_CLASSIFICATION	4.4455967798906915E-4	DESIGN	1.4509477981615392E-4	DEFECT	2.3789701129622448E-5	TEST	1.112773435705234E-6	DOCUMENTATION	4.1828411048725606E-7	IMPLEMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.991577791344562	DESIGN	0.008185307902831439	WITHOUT_CLASSIFICATION	2.2787377462010598E-4	IMPLEMENTATION	8.486396474824168E-6	DOCUMENTATION	4.4600136147487993E-7	TEST	9.458015005079706E-8	DEFECT
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.9997539045517198	WITHOUT_CLASSIFICATION	1.918345011421636E-4	DESIGN	4.846625521206557E-5	IMPLEMENTATION	2.918936245327762E-6	DOCUMENTATION	2.6917253718136334E-6	DEFECT	1.8403030885295915E-7	TEST
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9996253432475843	WITHOUT_CLASSIFICATION	3.549911827383852E-4	TEST	1.70710793972967E-5	IMPLEMENTATION	1.847727154030602E-6	DESIGN	5.883960329641869E-7	DOCUMENTATION	1.583670930281916E-7	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.999998887366878	WITHOUT_CLASSIFICATION	8.66192157718883E-7	DESIGN	1.3859233099130448E-7	DEFECT	7.944405563042526E-8	IMPLEMENTATION	1.815950102089808E-8	DOCUMENTATION	1.0245076624318779E-8	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.999998887366878	WITHOUT_CLASSIFICATION	8.66192157718883E-7	DESIGN	1.3859233099130448E-7	DEFECT	7.944405563042526E-8	IMPLEMENTATION	1.815950102089808E-8	DOCUMENTATION	1.0245076624318779E-8	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.999998887366878	WITHOUT_CLASSIFICATION	8.66192157718883E-7	DESIGN	1.3859233099130448E-7	DEFECT	7.944405563042526E-8	IMPLEMENTATION	1.815950102089808E-8	DOCUMENTATION	1.0245076624318779E-8	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.999998887366878	WITHOUT_CLASSIFICATION	8.66192157718883E-7	DESIGN	1.3859233099130448E-7	DEFECT	7.944405563042526E-8	IMPLEMENTATION	1.815950102089808E-8	DOCUMENTATION	1.0245076624318779E-8	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.999998887366878	WITHOUT_CLASSIFICATION	8.66192157718883E-7	DESIGN	1.3859233099130448E-7	DEFECT	7.944405563042526E-8	IMPLEMENTATION	1.815950102089808E-8	DOCUMENTATION	1.0245076624318779E-8	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.999998887366878	WITHOUT_CLASSIFICATION	8.66192157718883E-7	DESIGN	1.3859233099130448E-7	DEFECT	7.944405563042526E-8	IMPLEMENTATION	1.815950102089808E-8	DOCUMENTATION	1.0245076624318779E-8	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.999998887366878	WITHOUT_CLASSIFICATION	8.66192157718883E-7	DESIGN	1.3859233099130448E-7	DEFECT	7.944405563042526E-8	IMPLEMENTATION	1.815950102089808E-8	DOCUMENTATION	1.0245076624318779E-8	TEST
// return	WITHOUT_CLASSIFICATION	0.999975560904855	WITHOUT_CLASSIFICATION	2.348795427025008E-5	DESIGN	7.233395737319056E-7	DEFECT	2.058753394202879E-7	IMPLEMENTATION	1.6375770567925744E-8	DOCUMENTATION	5.5501909894177E-9	TEST
// return	WITHOUT_CLASSIFICATION	0.999975560904855	WITHOUT_CLASSIFICATION	2.348795427025008E-5	DESIGN	7.233395737319056E-7	DEFECT	2.058753394202879E-7	IMPLEMENTATION	1.6375770567925744E-8	DOCUMENTATION	5.5501909894177E-9	TEST
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.999138599651339	WITHOUT_CLASSIFICATION	8.494370751737202E-4	DESIGN	4.90234544184329E-6	DEFECT	4.160755794434611E-6	IMPLEMENTATION	2.0476725845279853E-6	TEST	8.524996664500926E-7	DOCUMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999924154658133	WITHOUT_CLASSIFICATION	6.3460102964085705E-6	DESIGN	1.1726486435660462E-6	DEFECT	4.6544676165216225E-8	DOCUMENTATION	1.3984683421817399E-8	TEST	5.345887220022623E-9	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999996925730835	WITHOUT_CLASSIFICATION	2.1430623933390164E-7	DESIGN	7.108538879189381E-8	IMPLEMENTATION	1.1508129950957674E-8	TEST	6.709509944205381E-9	DEFECT	3.817648308029103E-9	DOCUMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999991973331226	WITHOUT_CLASSIFICATION	4.499122053440067E-7	DEFECT	3.069504191506238E-7	DESIGN	3.939583713941052E-8	DOCUMENTATION	4.692066283449385E-9	IMPLEMENTATION	1.716349404236874E-9	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999991973331226	WITHOUT_CLASSIFICATION	4.499122053440067E-7	DEFECT	3.069504191506238E-7	DESIGN	3.939583713941052E-8	DOCUMENTATION	4.692066283449385E-9	IMPLEMENTATION	1.716349404236874E-9	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999998907927502	WITHOUT_CLASSIFICATION	1.0671860545762906E-7	DESIGN	1.8556175541557148E-9	DEFECT	2.524869073317101E-10	IMPLEMENTATION	2.3551514213358903E-10	TEST	1.4502483285550633E-10	DOCUMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999997063350851	WITHOUT_CLASSIFICATION	2.5748224851014074E-7	DEFECT	2.3791786991667304E-8	DESIGN	9.514550519778003E-9	IMPLEMENTATION	2.2415403922503874E-9	TEST	6.347885279643192E-10	DOCUMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999863447198949	WITHOUT_CLASSIFICATION	1.0011807351749786E-5	DESIGN	2.781546482063189E-6	IMPLEMENTATION	4.527672401523299E-7	DEFECT	3.3520915519924835E-7	TEST	7.3949875814331E-8	DOCUMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999837384006529	WITHOUT_CLASSIFICATION	1.3349854574795113E-5	DESIGN	2.331335621498328E-6	DEFECT	4.101655339301974E-7	IMPLEMENTATION	1.612155048397754E-7	DOCUMENTATION	9.02811209761367E-9	TEST
// double	WITHOUT_CLASSIFICATION	0.99999141336977	WITHOUT_CLASSIFICATION	6.924369713676469E-6	DESIGN	1.5905350541723917E-6	DEFECT	3.061863074182057E-8	IMPLEMENTATION	2.526337608638407E-8	DOCUMENTATION	1.584345544997327E-8	TEST
// double	WITHOUT_CLASSIFICATION	0.99999141336977	WITHOUT_CLASSIFICATION	6.924369713676469E-6	DESIGN	1.5905350541723917E-6	DEFECT	3.061863074182057E-8	IMPLEMENTATION	2.526337608638407E-8	DOCUMENTATION	1.584345544997327E-8	TEST
// long	WITHOUT_CLASSIFICATION	0.9999899144693198	WITHOUT_CLASSIFICATION	8.08989426023609E-6	DEFECT	1.686240558561085E-6	DESIGN	2.0261941259424783E-7	IMPLEMENTATION	5.802127002388711E-8	TEST	4.8755178972694314E-8	DOCUMENTATION
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9968989919206355	WITHOUT_CLASSIFICATION	0.0027491725536861163	IMPLEMENTATION	3.274535743329733E-4	DESIGN	2.233784033078921E-5	DOCUMENTATION	1.683729337583756E-6	DEFECT	3.603816770096493E-7	TEST
// decode row selection...	WITHOUT_CLASSIFICATION	0.9991972363517213	WITHOUT_CLASSIFICATION	4.971385167355716E-4	DESIGN	2.9086107994454177E-4	DEFECT	1.3792696047780058E-5	IMPLEMENTATION	7.954457353411462E-7	DOCUMENTATION	1.7590981550713417E-7	TEST
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999856876340083	WITHOUT_CLASSIFICATION	1.3879500753859904E-5	DESIGN	3.8228880336253494E-7	DEFECT	4.461296958920119E-8	TEST	4.93855825572207E-9	DOCUMENTATION	1.0249067580911827E-9	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999995973213984	WITHOUT_CLASSIFICATION	3.631826546819524E-7	DESIGN	3.9340638005704746E-8	DEFECT	1.2586572455424088E-10	TEST	1.8607296860702437E-11	IMPLEMENTATION	1.083589328650655E-11	DOCUMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999898890252973	WITHOUT_CLASSIFICATION	9.79213861422324E-6	DESIGN	2.225688422886474E-7	DEFECT	4.842229725873261E-8	DOCUMENTATION	3.112660166489544E-8	TEST	1.6718347287057384E-8	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.9999864210551346	WITHOUT_CLASSIFICATION	7.203416432011935E-6	DESIGN	4.088216717098531E-6	IMPLEMENTATION	1.8759947130887238E-6	DEFECT	2.361164738116929E-7	DOCUMENTATION	1.7520052928508037E-7	TEST
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999997235011012	WITHOUT_CLASSIFICATION	1.5152159770205385E-7	DESIGN	4.92292427295582E-8	DEFECT	4.1080156582842807E-8	IMPLEMENTATION	2.223177203231902E-8	DOCUMENTATION	1.2436129878255375E-8	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999213472142847	WITHOUT_CLASSIFICATION	6.957300340998403E-5	IMPLEMENTATION	4.699744918712023E-6	DESIGN	2.8756698581405515E-6	DEFECT	1.0244133206724937E-6	DOCUMENTATION	4.799542076307316E-7	TEST
/*	WITHOUT_CLASSIFICATION	0.9334241107300555	WITHOUT_CLASSIFICATION	0.057334198134129065	DESIGN	0.006046816090410139	DEFECT	0.0029370291208706606	IMPLEMENTATION	1.5123563116669595E-4	DOCUMENTATION	1.0661029336787873E-4	TEST
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999806549956337	WITHOUT_CLASSIFICATION	1.2618145437751938E-5	IMPLEMENTATION	6.088283098176852E-6	DESIGN	2.835788251337802E-7	DEFECT	2.43578527432639E-7	DOCUMENTATION	1.1141847776530324E-7	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999950050668941	WITHOUT_CLASSIFICATION	2.487270130149424E-6	IMPLEMENTATION	1.8561197921567656E-6	DESIGN	3.916288217454897E-7	DEFECT	1.82344675590873E-7	DOCUMENTATION	7.756968622110446E-8	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999947425424297	WITHOUT_CLASSIFICATION	5.236522398480537E-6	DESIGN	1.9665768886905545E-8	DEFECT	9.084695771608857E-10	TEST	3.305317452425875E-10	DOCUMENTATION	3.0401516742925536E-11	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999919467299794	WITHOUT_CLASSIFICATION	4.7593215110574256E-6	DESIGN	2.46615569979673E-6	IMPLEMENTATION	4.2294422713376353E-7	DEFECT	2.717817491027445E-7	DOCUMENTATION	1.3306683353868732E-7	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999919467299794	WITHOUT_CLASSIFICATION	4.7593215110574256E-6	DESIGN	2.46615569979673E-6	IMPLEMENTATION	4.2294422713376353E-7	DEFECT	2.717817491027445E-7	DOCUMENTATION	1.3306683353868732E-7	TEST
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.999978232794523	WITHOUT_CLASSIFICATION	2.1189746573512758E-5	DESIGN	5.660237492925589E-7	DEFECT	7.0036906843323985E-9	IMPLEMENTATION	3.6238633087909374E-9	TEST	8.076001525257586E-10	DOCUMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999981322332501	WITHOUT_CLASSIFICATION	1.06492025632975E-6	DESIGN	5.859156966465656E-7	DEFECT	1.2117698570141655E-7	IMPLEMENTATION	5.4832842843580455E-8	DOCUMENTATION	4.09209684502142E-8	TEST
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999990764624751	WITHOUT_CLASSIFICATION	8.837781620616606E-7	DESIGN	3.145599767092661E-8	IMPLEMENTATION	6.987345805755015E-9	DEFECT	1.0331557216650256E-9	DOCUMENTATION	2.828636195811454E-10	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999405302050467	WITHOUT_CLASSIFICATION	4.472085229064971E-5	IMPLEMENTATION	1.2634874627210707E-5	DESIGN	2.0385492377882017E-6	DEFECT	6.366618432093895E-8	TEST	1.1852613272070933E-8	DOCUMENTATION
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9839453522626214	DESIGN	0.01605181177566441	WITHOUT_CLASSIFICATION	2.7283333615089817E-6	DOCUMENTATION	9.538036702306056E-8	IMPLEMENTATION	1.2195513773958957E-8	TEST	5.247188843724463E-11	DEFECT
/**	WITHOUT_CLASSIFICATION	0.4099703815469931	DOCUMENTATION	0.377254050133344	DESIGN	0.10446024197441676	IMPLEMENTATION	0.04010368760390805	WITHOUT_CLASSIFICATION	0.034408704179707664	DEFECT	0.033802934561630235	TEST
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
/**	WITHOUT_CLASSIFICATION	0.4099703815469931	DOCUMENTATION	0.377254050133344	DESIGN	0.10446024197441676	IMPLEMENTATION	0.04010368760390805	WITHOUT_CLASSIFICATION	0.034408704179707664	DEFECT	0.033802934561630235	TEST
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999999545040621	WITHOUT_CLASSIFICATION	3.43171867602657E-8	IMPLEMENTATION	1.0250236602893764E-8	DEFECT	7.476646462579402E-10	TEST	1.027995974893161E-10	DOCUMENTATION	7.805038040681719E-11	DESIGN
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999974180035817	WITHOUT_CLASSIFICATION	2.318607164535313E-6	DESIGN	2.4411846363031287E-7	DEFECT	1.7430792723390283E-8	TEST	1.0914856706768406E-9	DOCUMENTATION	7.485117463147516E-10	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.999999991620843	WITHOUT_CLASSIFICATION	8.119798373601015E-9	DESIGN	1.3499534231227442E-10	IMPLEMENTATION	9.239165303365937E-11	DEFECT	1.9091687073635822E-11	TEST	1.2879947559941303E-11	DOCUMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.996458867854498	WITHOUT_CLASSIFICATION	0.00353854437369367	DESIGN	2.0484949580554456E-6	DEFECT	3.247348687650684E-7	DOCUMENTATION	1.2046431599307148E-7	TEST	9.40776656129724E-8	IMPLEMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999841541205059	WITHOUT_CLASSIFICATION	1.0744875609003437E-5	DEFECT	4.597363689914799E-6	DESIGN	3.029029323963571E-7	DOCUMENTATION	1.806915781527813E-7	IMPLEMENTATION	2.0045684570949402E-8	TEST
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981147541152	WITHOUT_CLASSIFICATION	1.1491830103923174E-6	DESIGN	5.074232413041742E-7	IMPLEMENTATION	1.2539477497677843E-7	DEFECT	7.096525295504809E-8	TEST	3.2279605155896895E-8	DOCUMENTATION
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943373736438	WITHOUT_CLASSIFICATION	5.0534012623234585E-6	DESIGN	3.5825096026284916E-7	DEFECT	1.752873948327853E-7	IMPLEMENTATION	4.305056047587962E-8	TEST	3.263617816181339E-8	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999215834811035	WITHOUT_CLASSIFICATION	7.682583982554503E-5	DESIGN	7.012592214732834E-7	DEFECT	4.902352109836181E-7	DOCUMENTATION	3.724859269228422E-7	IMPLEMENTATION	2.669871164377452E-8	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9999847695105163	WITHOUT_CLASSIFICATION	6.679216467587771E-6	DEFECT	4.351110038879615E-6	DESIGN	2.891378001306661E-6	IMPLEMENTATION	1.0859710212905677E-6	DOCUMENTATION	2.2281395446638853E-7	TEST
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9995955417892477	WITHOUT_CLASSIFICATION	4.0373502080546196E-4	DEFECT	7.051542545094336E-7	DESIGN	1.5748241668145118E-8	IMPLEMENTATION	1.3407061811954226E-9	TEST	9.467445235180532E-10	DOCUMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9999694462386789	WITHOUT_CLASSIFICATION	1.6167869514315827E-5	IMPLEMENTATION	9.390301138263346E-6	DESIGN	3.245497006154932E-6	DEFECT	1.5518065159989175E-6	DOCUMENTATION	1.9828714635957216E-7	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9999847695105163	WITHOUT_CLASSIFICATION	6.679216467587771E-6	DEFECT	4.351110038879615E-6	DESIGN	2.891378001306661E-6	IMPLEMENTATION	1.0859710212905677E-6	DOCUMENTATION	2.2281395446638853E-7	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.9999694462386789	WITHOUT_CLASSIFICATION	1.6167869514315827E-5	IMPLEMENTATION	9.390301138263346E-6	DESIGN	3.245497006154932E-6	DEFECT	1.5518065159989175E-6	DOCUMENTATION	1.9828714635957216E-7	TEST
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999999098496393	WITHOUT_CLASSIFICATION	5.211053798808019E-7	DESIGN	1.3116126012678832E-7	DEFECT	9.191355629774827E-8	TEST	8.376976360373346E-8	DOCUMENTATION	7.355364718908409E-8	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.8857567612071467	DESIGN	0.11393638732814661	WITHOUT_CLASSIFICATION	3.008051093813552E-4	TEST	6.020806546531729E-6	DEFECT	2.4779160889549886E-8	DOCUMENTATION	7.696180452778742E-10	IMPLEMENTATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999991071234755	WITHOUT_CLASSIFICATION	5.020807583214467E-7	IMPLEMENTATION	1.8497257947559214E-7	DESIGN	1.624074273776206E-7	DEFECT	3.777004802438835E-8	TEST	5.645711285558311E-9	DOCUMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9997660174568641	WITHOUT_CLASSIFICATION	2.082914019459894E-4	DESIGN	1.7633787963240858E-5	IMPLEMENTATION	7.947151113895769E-6	DEFECT	7.699808403791982E-8	TEST	3.320402870518379E-8	DOCUMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.99993121954502	WITHOUT_CLASSIFICATION	6.755917295720925E-5	DESIGN	9.77222140063137E-7	DEFECT	1.4223233867147058E-7	DOCUMENTATION	9.951118853744438E-8	TEST	2.3163555158398187E-9	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999918482312379	WITHOUT_CLASSIFICATION	3.8419071241267115E-6	DESIGN	3.1071070384967088E-6	TEST	1.168209539438236E-6	DEFECT	2.572164141233128E-8	DOCUMENTATION	8.82341850978993E-9	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9927662076380928	WITHOUT_CLASSIFICATION	0.00487226695035647	DESIGN	0.002027557255565428	DEFECT	2.6007778468083506E-4	TEST	4.695227129144686E-5	DOCUMENTATION	2.6938100013062456E-5	IMPLEMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9893247720593159	WITHOUT_CLASSIFICATION	0.010273318691033042	DESIGN	2.465924852764715E-4	IMPLEMENTATION	1.3438829900207032E-4	DEFECT	1.8655474462082812E-5	DOCUMENTATION	2.272990910435338E-6	TEST
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999991019598473	WITHOUT_CLASSIFICATION	8.153286456366904E-7	IMPLEMENTATION	7.600158151234566E-8	DESIGN	6.2228600499732E-9	DEFECT	4.0566952536337787E-10	TEST	8.139594225918409E-11	DOCUMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.9998840965501252	WITHOUT_CLASSIFICATION	1.0013495342090387E-4	DESIGN	1.1795112237662054E-5	IMPLEMENTATION	2.6888343188244457E-6	TEST	8.476973161112974E-7	DEFECT	4.368525812740643E-7	DOCUMENTATION
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999398806585289	WITHOUT_CLASSIFICATION	3.2288697599327696E-5	IMPLEMENTATION	2.400693344297094E-5	DESIGN	2.8988424953790928E-6	DEFECT	5.293311266468232E-7	TEST	3.9553680682390224E-7	DOCUMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999940354783202	WITHOUT_CLASSIFICATION	3.4381564712866967E-6	IMPLEMENTATION	1.4261449443499847E-6	DEFECT	8.944141619045941E-7	DESIGN	1.8281325138018965E-7	DOCUMENTATION	2.299285099700013E-8	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999998537847158	WITHOUT_CLASSIFICATION	1.386718963664144E-7	DESIGN	6.725362271677457E-9	DEFECT	7.85837946602049E-10	IMPLEMENTATION	2.1620190902612387E-11	TEST	1.0567454879835477E-11	DOCUMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9997210217183262	WITHOUT_CLASSIFICATION	2.757169374243304E-4	DESIGN	2.1206456107585715E-6	DEFECT	1.0636859906277682E-6	IMPLEMENTATION	6.149972004774721E-8	DOCUMENTATION	1.5512928063565745E-8	TEST
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9973795179632833	WITHOUT_CLASSIFICATION	0.0026163555518397396	DESIGN	2.809969445313634E-6	IMPLEMENTATION	1.0497255153097345E-6	DEFECT	2.6274587801852913E-7	TEST	4.044038262736424E-9	DOCUMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9986877934465698	WITHOUT_CLASSIFICATION	0.0013044862953786043	DESIGN	6.5423156708439E-6	DEFECT	1.1704662748497582E-6	TEST	7.201947037757977E-9	DOCUMENTATION	2.7415896067848676E-10	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9998874764084311	WITHOUT_CLASSIFICATION	1.1219491100102053E-4	DESIGN	3.15770709020153E-7	DEFECT	8.503289992226744E-9	DOCUMENTATION	3.217211202315061E-9	TEST	1.189357558065722E-9	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9998738895970499	WITHOUT_CLASSIFICATION	1.1542127481006199E-4	DESIGN	5.864310104846112E-6	DEFECT	4.666235638213016E-6	IMPLEMENTATION	8.272595533545486E-8	DOCUMENTATION	7.585644165824943E-8	TEST
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.999998635644426	WITHOUT_CLASSIFICATION	1.3572229553273211E-6	DESIGN	3.3608756234015756E-9	DEFECT	2.126836692977213E-9	IMPLEMENTATION	1.5926612622181127E-9	TEST	5.2245170657948065E-11	DOCUMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.999999752218877	WITHOUT_CLASSIFICATION	2.4628630273861315E-7	DESIGN	1.315009004641698E-9	DEFECT	1.6163399848998375E-10	TEST	1.420945917106625E-11	DOCUMENTATION	3.967641774119878E-12	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999967851442221	WITHOUT_CLASSIFICATION	1.3033326196713722E-6	DEFECT	9.346930626569118E-7	DESIGN	6.943923182043887E-7	IMPLEMENTATION	2.495954726474428E-7	TEST	3.2842304707871735E-8	DOCUMENTATION
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999997077453971	WITHOUT_CLASSIFICATION	2.895764205701918E-7	DESIGN	1.658942742942447E-9	DEFECT	5.175608611025124E-10	TEST	4.1925700314082524E-10	IMPLEMENTATION	8.242173996270913E-11	DOCUMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999448658111785	WITHOUT_CLASSIFICATION	5.493658981168392E-5	DESIGN	1.476724255735598E-7	IMPLEMENTATION	2.966862042233443E-8	DOCUMENTATION	1.908147758397804E-8	DEFECT	1.1764863583197777E-9	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999985559425856	WITHOUT_CLASSIFICATION	8.019830088364035E-7	DESIGN	3.641004961842131E-7	DEFECT	1.4382268952318532E-7	TEST	1.2233447625279878E-7	IMPLEMENTATION	1.1816743561717512E-8	DOCUMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9037978435811002	DESIGN	0.09599280817787789	WITHOUT_CLASSIFICATION	1.6670521700049178E-4	IMPLEMENTATION	2.563190551897031E-5	TEST	1.6898360366606764E-5	DEFECT	1.127581358318215E-7	DOCUMENTATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999998670676867	WITHOUT_CLASSIFICATION	1.119125143490028E-7	DESIGN	1.2645000350080987E-8	DEFECT	5.283541002106836E-9	IMPLEMENTATION	2.662897738323752E-9	DOCUMENTATION	4.2835991395795446E-10	TEST
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999770728825	WITHOUT_CLASSIFICATION	2.26821419005745E-8	DESIGN	1.667792739482316E-10	IMPLEMENTATION	7.021353650446656E-11	DOCUMENTATION	5.023008324588306E-12	DEFECT	2.95984802171755E-12	TEST
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.41194494423136674	DESIGN	0.34341784397919406	WITHOUT_CLASSIFICATION	0.24461489111773446	IMPLEMENTATION	2.0813769908493433E-5	TEST	1.3195144695895077E-6	DOCUMENTATION	1.873873266083622E-7	DEFECT
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999998512795902	WITHOUT_CLASSIFICATION	6.823672310109437E-8	DEFECT	6.142654686921377E-8	DESIGN	1.5157145939345223E-8	TEST	2.3668165649088768E-9	DOCUMENTATION	1.5331773349039599E-9	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999985859039675	WITHOUT_CLASSIFICATION	1.0900645928129818E-6	IMPLEMENTATION	2.5322289553863535E-7	DESIGN	6.181183364494046E-8	TEST	5.460846069997123E-9	DOCUMENTATION	3.5358643464019765E-9	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999462128412	WITHOUT_CLASSIFICATION	3.47708841190116E-8	DEFECT	1.6704873984919934E-8	IMPLEMENTATION	1.2308626577839307E-9	DOCUMENTATION	1.0423257447378853E-9	TEST	3.8212254622885133E-11	DESIGN
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999477422752	WITHOUT_CLASSIFICATION	3.506780000004197E-8	DESIGN	1.6082202802549678E-8	IMPLEMENTATION	6.067132710888527E-10	DOCUMENTATION	3.200478245104364E-10	DEFECT	1.8096098777081867E-10	TEST
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999631970553812	WITHOUT_CLASSIFICATION	3.082698317447785E-5	DESIGN	5.955409555318972E-6	DEFECT	1.235978307897177E-8	DOCUMENTATION	6.778715380209409E-9	TEST	1.4133906240198861E-9	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999276328315837	WITHOUT_CLASSIFICATION	6.79203941115639E-5	DESIGN	4.343539542511694E-6	DEFECT	5.0619032696796555E-8	IMPLEMENTATION	5.0144408791125014E-8	DOCUMENTATION	2.4713208263817196E-9	TEST
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999998119974696	WITHOUT_CLASSIFICATION	1.7086999962626148E-7	DEFECT	8.840604699781296E-9	DESIGN	5.421021752846088E-9	IMPLEMENTATION	1.5390636465260015E-9	DOCUMENTATION	1.331840697840439E-9	TEST
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.99999999549154	WITHOUT_CLASSIFICATION	4.133095633204093E-9	DEFECT	2.3488571237819944E-10	DESIGN	8.204710776306183E-11	DOCUMENTATION	5.837851626633117E-11	TEST	5.310699853549214E-14	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999276328315837	WITHOUT_CLASSIFICATION	6.79203941115639E-5	DESIGN	4.343539542511694E-6	DEFECT	5.0619032696796555E-8	IMPLEMENTATION	5.0144408791125014E-8	DOCUMENTATION	2.4713208263817196E-9	TEST
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999911153582	WITHOUT_CLASSIFICATION	6.663770108123755E-9	DEFECT	1.4262096320253716E-9	IMPLEMENTATION	7.752022541426502E-10	DESIGN	1.18857864000434E-11	TEST	7.574037153391355E-12	DOCUMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999926593980867	WITHOUT_CLASSIFICATION	5.987715638691156E-6	DEFECT	1.3360321919884046E-6	DESIGN	1.3541876438641782E-8	IMPLEMENTATION	3.0175326142166192E-9	TEST	2.946736533676992E-10	DOCUMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.9999975410242387	WITHOUT_CLASSIFICATION	1.8214162463347725E-6	DEFECT	3.1675979410498775E-7	IMPLEMENTATION	2.6254260925465263E-7	DESIGN	4.6564658896699793E-8	DOCUMENTATION	1.1692452871307565E-8	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999991954640173	WITHOUT_CLASSIFICATION	4.1733681135000707E-7	DESIGN	2.5092892762170954E-7	DEFECT	1.1040621496143806E-7	IMPLEMENTATION	1.9365731824258683E-8	DOCUMENTATION	6.498296999063188E-9	TEST
// construct the cache	WITHOUT_CLASSIFICATION	0.9999875639183456	WITHOUT_CLASSIFICATION	1.0843050035989916E-5	DESIGN	1.3362624065945591E-6	IMPLEMENTATION	1.5248843842958918E-7	DEFECT	5.362425769448008E-8	TEST	5.065651572596878E-8	DOCUMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999999310524137	WITHOUT_CLASSIFICATION	3.3827223668348776E-7	DEFECT	2.2705781225370352E-7	DESIGN	1.238463947763854E-7	DOCUMENTATION	2.2036279886406654E-10	IMPLEMENTATION	7.905641798273517E-11	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999999310524137	WITHOUT_CLASSIFICATION	3.3827223668348776E-7	DEFECT	2.2705781225370352E-7	DESIGN	1.238463947763854E-7	DOCUMENTATION	2.2036279886406654E-10	IMPLEMENTATION	7.905641798273517E-11	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999978205039383	WITHOUT_CLASSIFICATION	1.0618754234985559E-5	IMPLEMENTATION	8.058659854569054E-6	DESIGN	2.4685615843331757E-6	DEFECT	5.09541345976833E-7	DOCUMENTATION	1.3944359726637845E-7	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.999726465570691	WITHOUT_CLASSIFICATION	2.73429024431512E-4	DESIGN	4.789957796149915E-8	TEST	3.940917119870232E-8	DEFECT	1.5322962405318787E-8	DOCUMENTATION	2.773165829530709E-9	IMPLEMENTATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.999928594787602	WITHOUT_CLASSIFICATION	5.594737893261476E-5	IMPLEMENTATION	8.968723726012338E-6	DESIGN	5.13743933548651E-6	DEFECT	1.0075750205551068E-6	DOCUMENTATION	3.440953832659825E-7	TEST
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999991036185367	WITHOUT_CLASSIFICATION	8.95885525689058E-7	DESIGN	2.905635895546956E-10	DEFECT	1.585663428433453E-10	TEST	3.4237467304350625E-11	IMPLEMENTATION	1.25703762320695E-11	DOCUMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999991088536538	WITHOUT_CLASSIFICATION	8.815227151583734E-7	DESIGN	4.353347980864507E-9	DEFECT	2.704640362350206E-9	IMPLEMENTATION	2.2773195678835013E-9	DOCUMENTATION	2.883229751498363E-10	TEST
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999992294693234	WITHOUT_CLASSIFICATION	6.136266474286585E-7	DESIGN	1.5419440473784904E-7	IMPLEMENTATION	1.7155881659107185E-9	DOCUMENTATION	8.305537339592245E-10	TEST	1.634826091795725E-10	DEFECT
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999996175554448	WITHOUT_CLASSIFICATION	1.9798188148473652E-7	IMPLEMENTATION	1.0209575428758208E-7	DEFECT	6.254785619390442E-8	DESIGN	1.4211429997253303E-8	TEST	5.607633407120699E-9	DOCUMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.9998378211327978	WITHOUT_CLASSIFICATION	1.5277851637164423E-4	DESIGN	8.138798966628816E-6	DEFECT	1.0649650775733488E-6	IMPLEMENTATION	1.909293525931899E-7	DOCUMENTATION	5.657433650716296E-9	TEST
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999747671314687	WITHOUT_CLASSIFICATION	2.420346855240322E-5	DESIGN	8.047972401268657E-7	IMPLEMENTATION	1.5260479068221044E-7	TEST	3.884370581855689E-8	DOCUMENTATION	3.315424234208482E-8	DEFECT
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999991438966	WITHOUT_CLASSIFICATION	3.25622191456158E-10	IMPLEMENTATION	3.0527773728904217E-10	DESIGN	1.1312522974458031E-10	DEFECT	6.698386612788015E-11	DOCUMENTATION	4.509445133076512E-11	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999995708442011	WITHOUT_CLASSIFICATION	4.2841964732333276E-7	DESIGN	2.631222211436231E-10	IMPLEMENTATION	2.3266552325739006E-10	DOCUMENTATION	2.0724958348404873E-10	DEFECT	3.311428754521551E-11	TEST
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999995708442011	WITHOUT_CLASSIFICATION	4.2841964732333276E-7	DESIGN	2.631222211436231E-10	IMPLEMENTATION	2.3266552325739006E-10	DOCUMENTATION	2.0724958348404873E-10	DEFECT	3.311428754521551E-11	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999937797340849	WITHOUT_CLASSIFICATION	5.4570693270721994E-6	IMPLEMENTATION	6.17623440321118E-7	DEFECT	7.613230442038044E-8	DESIGN	6.444390075328224E-8	DOCUMENTATION	4.9969423101960795E-9	TEST
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999999710250697	WITHOUT_CLASSIFICATION	1.1841416091634956E-8	DESIGN	8.212841568204165E-9	DEFECT	6.9414878085532484E-9	IMPLEMENTATION	1.2727637360036497E-9	DOCUMENTATION	7.064212710090862E-10	TEST
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9994005634605638	WITHOUT_CLASSIFICATION	5.986058688359774E-4	DESIGN	3.754192231559757E-7	DEFECT	2.135231120262E-7	TEST	1.2238626352033398E-7	DOCUMENTATION	1.1934200145170214E-7	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999995708442011	WITHOUT_CLASSIFICATION	4.2841964732333276E-7	DESIGN	2.631222211436231E-10	IMPLEMENTATION	2.3266552325739006E-10	DOCUMENTATION	2.0724958348404873E-10	DEFECT	3.311428754521551E-11	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999937797340849	WITHOUT_CLASSIFICATION	5.4570693270721994E-6	IMPLEMENTATION	6.17623440321118E-7	DEFECT	7.613230442038044E-8	DESIGN	6.444390075328224E-8	DOCUMENTATION	4.9969423101960795E-9	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999937797340849	WITHOUT_CLASSIFICATION	5.4570693270721994E-6	IMPLEMENTATION	6.17623440321118E-7	DEFECT	7.613230442038044E-8	DESIGN	6.444390075328224E-8	DOCUMENTATION	4.9969423101960795E-9	TEST
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9997075891812535	WITHOUT_CLASSIFICATION	2.922342396551752E-4	DESIGN	1.6237331788950763E-7	TEST	6.251613205903411E-9	DEFECT	4.384927518962375E-9	IMPLEMENTATION	3.569232802147239E-9	DOCUMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999257479415006	WITHOUT_CLASSIFICATION	6.974586396664207E-5	DESIGN	3.019438327574922E-6	DEFECT	1.2866865669194213E-6	IMPLEMENTATION	1.214369097378382E-7	DOCUMENTATION	7.86327285255692E-8	TEST
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999884884057	WITHOUT_CLASSIFICATION	1.1407288867165782E-8	DEFECT	3.975117307410068E-11	DESIGN	3.1621790392802723E-11	TEST	2.6410188336191573E-11	DOCUMENTATION	6.522240922551017E-12	IMPLEMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999976324967211	WITHOUT_CLASSIFICATION	2.349789062823158E-6	DESIGN	1.0444896485322736E-8	TEST	5.9278104636437314E-9	IMPLEMENTATION	1.1166678490783256E-9	DOCUMENTATION	2.2484120603084834E-10	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9992961677979344	WITHOUT_CLASSIFICATION	5.968678897664778E-4	DESIGN	7.06832396218617E-5	IMPLEMENTATION	3.2906393154348513E-5	DEFECT	3.128881360648117E-6	DOCUMENTATION	2.457981622927834E-7	TEST
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9992961677979344	WITHOUT_CLASSIFICATION	5.968678897664778E-4	DESIGN	7.06832396218617E-5	IMPLEMENTATION	3.2906393154348513E-5	DEFECT	3.128881360648117E-6	DOCUMENTATION	2.457981622927834E-7	TEST
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999992845104353	WITHOUT_CLASSIFICATION	6.436290047319403E-7	IMPLEMENTATION	6.049142763158376E-8	DESIGN	7.80862572880677E-9	DEFECT	2.876446458036783E-9	DOCUMENTATION	6.84060204846527E-10	TEST
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.99971279527177	WITHOUT_CLASSIFICATION	2.870418294477962E-4	DESIGN	5.803474874358526E-8	DOCUMENTATION	5.355110530546311E-8	DEFECT	3.879997484873156E-8	TEST	1.2512953267960387E-8	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.9999986615837507	WITHOUT_CLASSIFICATION	6.546560716712818E-7	DEFECT	3.981736575421782E-7	DESIGN	2.5163247917786334E-7	IMPLEMENTATION	2.2369651825291172E-8	TEST	1.1584389071675777E-8	DOCUMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999944256842674	WITHOUT_CLASSIFICATION	5.4379775752143204E-6	DESIGN	8.472105115231224E-8	DEFECT	3.774326730651691E-8	IMPLEMENTATION	8.701628121928912E-9	TEST	5.172210834853209E-9	DOCUMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999944256842674	WITHOUT_CLASSIFICATION	5.4379775752143204E-6	DESIGN	8.472105115231224E-8	DEFECT	3.774326730651691E-8	IMPLEMENTATION	8.701628121928912E-9	TEST	5.172210834853209E-9	DOCUMENTATION
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999897002764244	WITHOUT_CLASSIFICATION	1.0008593880550814E-5	DESIGN	1.5645247224126515E-7	DEFECT	1.1034987623195922E-7	DOCUMENTATION	1.57340474493533E-8	TEST	8.59329916068215E-9	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9998480678061139	WITHOUT_CLASSIFICATION	9.690200016885663E-5	DEFECT	3.809487491609762E-5	DESIGN	1.2113868133201511E-5	TEST	3.940158915913482E-6	IMPLEMENTATION	8.812917520546661E-7	DOCUMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.7001013186839647	WITHOUT_CLASSIFICATION	0.2997222127818178	DESIGN	1.3697135403290008E-4	DEFECT	1.9856459944719343E-5	TEST	1.7456428328216737E-5	IMPLEMENTATION	2.184291911664667E-6	DOCUMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999999915035449	WITHOUT_CLASSIFICATION	6.9910501555408336E-9	DESIGN	1.3538971318352361E-9	DEFECT	1.1455854263185566E-10	IMPLEMENTATION	1.938714769010963E-11	TEST	1.7562160171954844E-11	DOCUMENTATION
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999952337411764	WITHOUT_CLASSIFICATION	4.7522958773729854E-6	DESIGN	9.06627977817527E-9	DEFECT	2.651714831937224E-9	TEST	2.2433921834163252E-9	DOCUMENTATION	1.5594782839645607E-12	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999999856356745	WITHOUT_CLASSIFICATION	1.3309090559628963E-8	DESIGN	4.958793092128243E-10	DOCUMENTATION	2.583453335161995E-10	TEST	2.0208215017859393E-10	DEFECT	9.892816818845685E-11	IMPLEMENTATION
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999964518117026	WITHOUT_CLASSIFICATION	1.9385520391617097E-6	DESIGN	1.2181134291407694E-6	DEFECT	3.170372147056928E-7	IMPLEMENTATION	4.616745091325052E-8	DOCUMENTATION	2.8318163285210623E-8	TEST
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9997136840778241	WITHOUT_CLASSIFICATION	2.4731525647982995E-4	DESIGN	3.769683519599647E-5	IMPLEMENTATION	5.12061983151482E-7	DOCUMENTATION	4.473949329726912E-7	TEST	3.443735839085068E-7	DEFECT
//sort first by role name	WITHOUT_CLASSIFICATION	0.9996883879061611	WITHOUT_CLASSIFICATION	3.074998271380659E-4	DESIGN	2.127686090599739E-6	TEST	1.0496725582550544E-6	DEFECT	7.290492757038094E-7	IMPLEMENTATION	2.058587763694961E-7	DOCUMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.7001013186839647	WITHOUT_CLASSIFICATION	0.2997222127818178	DESIGN	1.3697135403290008E-4	DEFECT	1.9856459944719343E-5	TEST	1.7456428328216737E-5	IMPLEMENTATION	2.184291911664667E-6	DOCUMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.9996594754471803	WITHOUT_CLASSIFICATION	2.1191417324563613E-4	DESIGN	6.607647641695616E-5	IMPLEMENTATION	4.0783412803823275E-5	DEFECT	1.1531423094273252E-5	DOCUMENTATION	1.0219067259051039E-5	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999327327607026	WITHOUT_CLASSIFICATION	3.68742880333016E-5	IMPLEMENTATION	2.7329653378370073E-5	DESIGN	1.7812527403308427E-6	DEFECT	8.979863993612862E-7	DOCUMENTATION	3.840587460357625E-7	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999327327607026	WITHOUT_CLASSIFICATION	3.68742880333016E-5	IMPLEMENTATION	2.7329653378370073E-5	DESIGN	1.7812527403308427E-6	DEFECT	8.979863993612862E-7	DOCUMENTATION	3.840587460357625E-7	TEST
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9960386952612484	WITHOUT_CLASSIFICATION	0.0039601068269108485	DESIGN	9.045562393510916E-7	DEFECT	2.0348239646938365E-7	IMPLEMENTATION	8.838309381071396E-8	TEST	1.4901111013235863E-9	DOCUMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9998403721256649	WITHOUT_CLASSIFICATION	1.5803761715444596E-4	DESIGN	1.446281785872599E-6	IMPLEMENTATION	9.750493054552222E-8	TEST	4.437175900953037E-8	DEFECT	2.098705241774928E-9	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9715514420158898	WITHOUT_CLASSIFICATION	0.0283967979009597	DESIGN	2.8358246084206864E-5	DEFECT	2.2823577645275655E-5	IMPLEMENTATION	5.322051393511751E-7	TEST	4.6054281549629525E-8	DOCUMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.999985474437802	WITHOUT_CLASSIFICATION	1.080373949156475E-5	DESIGN	2.1948876533070058E-6	DOCUMENTATION	1.0287771934483082E-6	DEFECT	3.230358098798342E-7	TEST	1.7512204987816185E-7	IMPLEMENTATION
//sort first by entity name	WITHOUT_CLASSIFICATION	0.999351378983682	WITHOUT_CLASSIFICATION	6.470513862669953E-4	DESIGN	8.786753109162711E-7	TEST	2.6984262657241146E-7	DOCUMENTATION	2.4337865964174674E-7	IMPLEMENTATION	1.777334538376189E-7	DEFECT
//then by id	WITHOUT_CLASSIFICATION	0.995769784146763	WITHOUT_CLASSIFICATION	0.0031097736478516293	DESIGN	9.312413430972746E-4	IMPLEMENTATION	1.1877801516214454E-4	DEFECT	4.103840611378101E-5	DOCUMENTATION	2.938444101208004E-5	TEST
// to be safe...	WITHOUT_CLASSIFICATION	0.9987269786033297	WITHOUT_CLASSIFICATION	9.79269532492421E-4	DEFECT	2.6978853104857455E-4	DESIGN	2.1098944994778376E-5	IMPLEMENTATION	2.552899388987342E-6	DOCUMENTATION	3.114887455608249E-7	TEST
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999960738150788	WITHOUT_CLASSIFICATION	3.8196553044295775E-6	DESIGN	1.0032720881446286E-7	IMPLEMENTATION	4.823329990691007E-9	DOCUMENTATION	9.73258899457067E-10	TEST	4.058189851441887E-10	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999926877128	WITHOUT_CLASSIFICATION	6.668325667419404E-9	DESIGN	5.981003709078501E-10	DEFECT	2.9253610837831686E-11	TEST	1.0012831517912545E-11	DOCUMENTATION	6.595016791269304E-12	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999926877128	WITHOUT_CLASSIFICATION	6.668325667419404E-9	DESIGN	5.981003709078501E-10	DEFECT	2.9253610837831686E-11	TEST	1.0012831517912545E-11	DOCUMENTATION	6.595016791269304E-12	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999632793143085	WITHOUT_CLASSIFICATION	3.5204225363255595E-5	DESIGN	1.2781752745139046E-6	DEFECT	1.8553269079296094E-7	DOCUMENTATION	3.4167478909322186E-8	IMPLEMENTATION	1.8584883975969715E-8	TEST
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9996253432475843	WITHOUT_CLASSIFICATION	3.549911827383852E-4	TEST	1.70710793972967E-5	IMPLEMENTATION	1.847727154030602E-6	DESIGN	5.883960329641869E-7	DOCUMENTATION	1.583670930281916E-7	DEFECT
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.99999910529901	WITHOUT_CLASSIFICATION	8.214693615151665E-7	DESIGN	4.529630434066612E-8	DEFECT	1.371080229419925E-8	TEST	7.520177969593561E-9	DOCUMENTATION	6.704344006585356E-9	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999998887366878	WITHOUT_CLASSIFICATION	8.66192157718883E-7	DESIGN	1.3859233099130448E-7	DEFECT	7.944405563042526E-8	IMPLEMENTATION	1.815950102089808E-8	DOCUMENTATION	1.0245076624318779E-8	TEST
// invokespecial	WITHOUT_CLASSIFICATION	0.9999991195309238	WITHOUT_CLASSIFICATION	5.669215089299643E-7	DEFECT	1.0788273470534518E-7	DOCUMENTATION	1.0264707432935108E-7	DESIGN	9.132394760890222E-8	IMPLEMENTATION	1.1693810710870218E-8	TEST
// return	WITHOUT_CLASSIFICATION	0.999975560904855	WITHOUT_CLASSIFICATION	2.348795427025008E-5	DESIGN	7.233395737319056E-7	DEFECT	2.058753394202879E-7	IMPLEMENTATION	1.6375770567925744E-8	DOCUMENTATION	5.5501909894177E-9	TEST
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999983129209874	WITHOUT_CLASSIFICATION	9.398302223525188E-7	DESIGN	6.431937799585563E-7	DEFECT	6.36952010573194E-8	IMPLEMENTATION	2.4089093496659484E-8	DOCUMENTATION	1.627071577445311E-8	TEST
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999914469086825	WITHOUT_CLASSIFICATION	7.967106860514317E-6	DESIGN	2.4114407312632676E-7	IMPLEMENTATION	1.980047644469791E-7	DEFECT	7.587758246394392E-8	DOCUMENTATION	7.095803702520591E-8	TEST
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999978797284816	WITHOUT_CLASSIFICATION	2.0053541217170653E-6	DESIGN	4.5095462384740744E-8	DEFECT	4.006703667904492E-8	TEST	1.516675321582606E-8	IMPLEMENTATION	1.4588144246043921E-8	DOCUMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999974882164249	WITHOUT_CLASSIFICATION	1.6301342715936284E-6	IMPLEMENTATION	6.625483581960831E-7	DESIGN	1.8348232625264303E-7	DEFECT	2.0717299765957735E-8	TEST	1.490131931574315E-8	DOCUMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999719154261608	WITHOUT_CLASSIFICATION	2.7047230468215808E-5	DEFECT	8.883326332380558E-7	DESIGN	1.0741313976330538E-7	IMPLEMENTATION	3.3775128989819095E-8	TEST	7.822468996406446E-9	DOCUMENTATION
// new	WITHOUT_CLASSIFICATION	0.9999229838546926	WITHOUT_CLASSIFICATION	6.907859850219348E-5	DESIGN	5.307218868965052E-6	IMPLEMENTATION	1.8241451613653626E-6	DEFECT	5.253668712923837E-7	DOCUMENTATION	2.808159036182935E-7	TEST
// dup	WITHOUT_CLASSIFICATION	0.999983873668557	WITHOUT_CLASSIFICATION	1.283045966538561E-5	DESIGN	2.9659636939373643E-6	DEFECT	1.6762843038434514E-7	IMPLEMENTATION	1.1277954483179568E-7	DOCUMENTATION	4.950010835486014E-8	TEST
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999985508979317	WITHOUT_CLASSIFICATION	6.089356308884528E-7	IMPLEMENTATION	6.017758128608246E-7	DESIGN	1.8553972041166317E-7	DEFECT	2.9243377023190068E-8	DOCUMENTATION	2.360752719673963E-8	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999924154658133	WITHOUT_CLASSIFICATION	6.3460102964085705E-6	DESIGN	1.1726486435660462E-6	DEFECT	4.6544676165216225E-8	DOCUMENTATION	1.3984683421817399E-8	TEST	5.345887220022623E-9	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999987713617694	WITHOUT_CLASSIFICATION	9.35366745541942E-7	DEFECT	1.7773505183181205E-7	DESIGN	8.647766453621463E-8	IMPLEMENTATION	2.1233987549214134E-8	DOCUMENTATION	7.824781315662048E-9	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999987713617694	WITHOUT_CLASSIFICATION	9.35366745541942E-7	DEFECT	1.7773505183181205E-7	DESIGN	8.647766453621463E-8	IMPLEMENTATION	2.1233987549214134E-8	DOCUMENTATION	7.824781315662048E-9	TEST
// aastore // args	WITHOUT_CLASSIFICATION	0.9999983480733965	WITHOUT_CLASSIFICATION	1.1483675824179532E-6	DESIGN	3.62322521044206E-7	IMPLEMENTATION	6.530178342143712E-8	TEST	6.157170114514095E-8	DEFECT	1.4363015415477382E-8	DOCUMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9959848559627069	WITHOUT_CLASSIFICATION	0.003959925037056792	DESIGN	3.5742931683398065E-5	DEFECT	1.6913123371863675E-5	IMPLEMENTATION	1.5705509737938867E-6	TEST	9.923942073905841E-7	DOCUMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999943865756306	WITHOUT_CLASSIFICATION	5.425562809497038E-6	DESIGN	1.8028494269740516E-7	DEFECT	6.290165502152714E-9	IMPLEMENTATION	8.066012398049803E-10	TEST	4.798504021909835E-10	DOCUMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999965827110405	WITHOUT_CLASSIFICATION	1.7121849485502368E-6	DEFECT	1.5101620044597165E-6	DESIGN	1.5481999990763977E-7	TEST	2.549870401872889E-8	DOCUMENTATION	1.4623302434025932E-8	IMPLEMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999980574976445	WITHOUT_CLASSIFICATION	1.6212466826787482E-6	DESIGN	1.8057564758833908E-7	DEFECT	8.080312957787517E-8	IMPLEMENTATION	4.470623024672102E-8	DOCUMENTATION	1.5170665402422163E-8	TEST
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9998026737826435	WITHOUT_CLASSIFICATION	1.966956564660523E-4	DESIGN	4.746110149906194E-7	IMPLEMENTATION	7.894589777788345E-8	DEFECT	4.867506427475379E-8	DOCUMENTATION	2.8328913453148962E-8	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999991973331226	WITHOUT_CLASSIFICATION	4.499122053440067E-7	DEFECT	3.069504191506238E-7	DESIGN	3.939583713941052E-8	DOCUMENTATION	4.692066283449385E-9	IMPLEMENTATION	1.716349404236874E-9	TEST
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9987801614631162	WITHOUT_CLASSIFICATION	0.0012178333039204548	DESIGN	1.0130068030168599E-6	IMPLEMENTATION	8.706863216997737E-7	DEFECT	6.144158471088405E-8	DOCUMENTATION	6.0098253849179E-8	TEST
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999867242623921	WITHOUT_CLASSIFICATION	7.172366852157617E-6	DEFECT	2.9279579075164365E-6	DESIGN	2.6397108525157574E-6	IMPLEMENTATION	4.2392429818458005E-7	DOCUMENTATION	1.1177769737357146E-7	TEST
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999979359105668	WITHOUT_CLASSIFICATION	1.3912470332498177E-6	DESIGN	4.3557885017331755E-7	IMPLEMENTATION	1.9298267873971445E-7	DEFECT	2.951129321279149E-8	DOCUMENTATION	1.4769577665129257E-8	TEST
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.999999732830239	WITHOUT_CLASSIFICATION	1.5521864347974984E-7	DESIGN	4.743792204992921E-8	IMPLEMENTATION	3.891765256990469E-8	DEFECT	1.4115655684698327E-8	DOCUMENTATION	1.1479887171713052E-8	TEST
// iconst_i	WITHOUT_CLASSIFICATION	0.9999632592632253	WITHOUT_CLASSIFICATION	2.5963788613735676E-5	DESIGN	9.015772043568997E-6	DEFECT	1.2467711528423781E-6	IMPLEMENTATION	3.5135977257948654E-7	DOCUMENTATION	1.6304519204670756E-7	TEST
// aaload	WITHOUT_CLASSIFICATION	0.9999916876914513	WITHOUT_CLASSIFICATION	6.640398814477114E-6	DESIGN	9.390667676014007E-7	IMPLEMENTATION	6.077635475644652E-7	DEFECT	7.220811080786426E-8	DOCUMENTATION	5.2871308229435586E-8	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999954766219442	WITHOUT_CLASSIFICATION	2.51938991396938E-6	IMPLEMENTATION	1.7472078330451586E-6	DESIGN	9.709843425496455E-8	DOCUMENTATION	9.398112628934722E-8	DEFECT	6.57007480263778E-8	TEST
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999999397191304	WITHOUT_CLASSIFICATION	3.304019484469983E-8	DEFECT	1.6145447863174854E-8	DESIGN	5.84020968921678E-9	IMPLEMENTATION	3.826501833074674E-9	DOCUMENTATION	1.4285154846246664E-9	TEST
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999972224903583	WITHOUT_CLASSIFICATION	1.286112401871439E-6	DESIGN	1.1868144529616436E-6	IMPLEMENTATION	1.9486338770987115E-7	DOCUMENTATION	9.901351966367425E-8	DEFECT	1.070587958870373E-8	TEST
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999977013943696	WITHOUT_CLASSIFICATION	1.6038429260586804E-6	DEFECT	5.415325002275234E-7	DESIGN	8.866934345229332E-8	DOCUMENTATION	6.049953658479181E-8	IMPLEMENTATION	4.061324046251149E-9	TEST
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9558630196642434	WITHOUT_CLASSIFICATION	0.044111889448893334	DESIGN	1.4386197063296417E-5	DEFECT	9.67059763845861E-6	IMPLEMENTATION	8.329576934999102E-7	DOCUMENTATION	2.0113446797446588E-7	TEST
// register in exception table	WITHOUT_CLASSIFICATION	0.9999314464124981	WITHOUT_CLASSIFICATION	6.835956860449953E-5	DESIGN	1.1034267633471093E-7	IMPLEMENTATION	7.204710786469937E-8	DEFECT	7.912862112790433E-9	TEST	3.7162510973045073E-9	DOCUMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999998887366878	WITHOUT_CLASSIFICATION	8.66192157718883E-7	DESIGN	1.3859233099130448E-7	DEFECT	7.944405563042526E-8	IMPLEMENTATION	1.815950102089808E-8	DOCUMENTATION	1.0245076624318779E-8	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.999998887366878	WITHOUT_CLASSIFICATION	8.66192157718883E-7	DESIGN	1.3859233099130448E-7	DEFECT	7.944405563042526E-8	IMPLEMENTATION	1.815950102089808E-8	DOCUMENTATION	1.0245076624318779E-8	TEST
// return	WITHOUT_CLASSIFICATION	0.999975560904855	WITHOUT_CLASSIFICATION	2.348795427025008E-5	DESIGN	7.233395737319056E-7	DEFECT	2.058753394202879E-7	IMPLEMENTATION	1.6375770567925744E-8	DOCUMENTATION	5.5501909894177E-9	TEST
// return	WITHOUT_CLASSIFICATION	0.999975560904855	WITHOUT_CLASSIFICATION	2.348795427025008E-5	DESIGN	7.233395737319056E-7	DEFECT	2.058753394202879E-7	IMPLEMENTATION	1.6375770567925744E-8	DOCUMENTATION	5.5501909894177E-9	TEST
// dup	WITHOUT_CLASSIFICATION	0.999983873668557	WITHOUT_CLASSIFICATION	1.283045966538561E-5	DESIGN	2.9659636939373643E-6	DEFECT	1.6762843038434514E-7	IMPLEMENTATION	1.1277954483179568E-7	DOCUMENTATION	4.950010835486014E-8	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999987713617694	WITHOUT_CLASSIFICATION	9.35366745541942E-7	DEFECT	1.7773505183181205E-7	DESIGN	8.647766453621463E-8	IMPLEMENTATION	2.1233987549214134E-8	DOCUMENTATION	7.824781315662048E-9	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999954766219442	WITHOUT_CLASSIFICATION	2.51938991396938E-6	IMPLEMENTATION	1.7472078330451586E-6	DESIGN	9.709843425496455E-8	DOCUMENTATION	9.398112628934722E-8	DEFECT	6.57007480263778E-8	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999998907927502	WITHOUT_CLASSIFICATION	1.0671860545762906E-7	DESIGN	1.8556175541557148E-9	DEFECT	2.524869073317101E-10	IMPLEMENTATION	2.3551514213358903E-10	TEST	1.4502483285550633E-10	DOCUMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999981489831524	WITHOUT_CLASSIFICATION	1.4127739829639054E-6	DESIGN	4.2324405466475015E-7	DEFECT	6.148562275722755E-9	TEST	5.245677906729237E-9	DOCUMENTATION	3.6045697135305175E-9	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9997122533811654	WITHOUT_CLASSIFICATION	2.0646342664111755E-4	DEFECT	7.862215813470308E-5	DESIGN	1.5481652580037789E-6	IMPLEMENTATION	5.7130151694945E-7	DOCUMENTATION	5.415672837082398E-7	TEST
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999496248014653	WITHOUT_CLASSIFICATION	3.7083605651807295E-5	DEFECT	1.2715676870999138E-5	DESIGN	4.1510093656400225E-7	IMPLEMENTATION	1.2973849138905362E-7	DOCUMENTATION	3.107658394139731E-8	TEST
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999907731586664	WITHOUT_CLASSIFICATION	6.5646562467564994E-6	DEFECT	1.967599174819332E-6	IMPLEMENTATION	4.3159879057997815E-7	DESIGN	1.9021825129579047E-7	TEST	7.276887010126008E-8	DOCUMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999905345847773	WITHOUT_CLASSIFICATION	9.353698570488372E-6	DEFECT	3.4111333068302325E-8	DOCUMENTATION	3.068159058210043E-8	IMPLEMENTATION	2.8371034335939366E-8	DESIGN	1.8552694227890895E-8	TEST
// athrow	WITHOUT_CLASSIFICATION	0.999998574652042	WITHOUT_CLASSIFICATION	1.1019400869142034E-6	DESIGN	2.2348952156587818E-7	DEFECT	5.842798522559143E-8	IMPLEMENTATION	2.142899311130317E-8	DOCUMENTATION	2.006137107585357E-8	TEST
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999594533292968	WITHOUT_CLASSIFICATION	2.7262045961076007E-5	DESIGN	1.3012672058165576E-5	DEFECT	1.7124860341028557E-7	DOCUMENTATION	6.258077382857265E-8	IMPLEMENTATION	3.812330680715859E-8	TEST
//swallow	WITHOUT_CLASSIFICATION	0.9999878271206549	WITHOUT_CLASSIFICATION	5.022143333889412E-6	DESIGN	4.5272179066903174E-6	IMPLEMENTATION	2.040399183321847E-6	DEFECT	3.1880339313446685E-7	DOCUMENTATION	2.643155280999211E-7	TEST
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999748106958848	WITHOUT_CLASSIFICATION	2.484081068038965E-5	DESIGN	1.2664319584615674E-7	IMPLEMENTATION	9.620214137185215E-8	DEFECT	7.639064317679674E-8	TEST	4.9257454387941985E-8	DOCUMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999938039193048	WITHOUT_CLASSIFICATION	4.603349204155418E-6	DESIGN	6.65763536055863E-7	DEFECT	4.6233033636091374E-7	DOCUMENTATION	2.9989731297416854E-7	TEST	1.6474030573484423E-7	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999938039193048	WITHOUT_CLASSIFICATION	4.603349204155418E-6	DESIGN	6.65763536055863E-7	DEFECT	4.6233033636091374E-7	DOCUMENTATION	2.9989731297416854E-7	TEST	1.6474030573484423E-7	IMPLEMENTATION
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999408324746	WITHOUT_CLASSIFICATION	5.682350977609374E-8	DESIGN	1.104450878400711E-9	IMPLEMENTATION	8.604231155678795E-10	DEFECT	2.7996467754196436E-10	TEST	9.917691298757454E-11	DOCUMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999986855625044	WITHOUT_CLASSIFICATION	1.1642775485528513E-6	DESIGN	9.71706480126453E-8	DEFECT	5.034339590709305E-8	IMPLEMENTATION	1.3461099598494848E-9	DOCUMENTATION	1.2997930904632021E-9	TEST
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.999371283387653	WITHOUT_CLASSIFICATION	6.048619360108791E-4	DESIGN	1.9183723209679825E-5	DEFECT	3.5905700859424497E-6	IMPLEMENTATION	7.680351287331525E-7	TEST	3.123479117522612E-7	DOCUMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999939571470011	WITHOUT_CLASSIFICATION	3.6199126909059415E-6	DEFECT	1.983175130918769E-6	DESIGN	3.992850672461298E-7	IMPLEMENTATION	2.5227937542206498E-8	DOCUMENTATION	1.5252172336014657E-8	TEST
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999625226036	WITHOUT_CLASSIFICATION	2.255963848549103E-8	DESIGN	1.0637761702367248E-8	IMPLEMENTATION	3.5071416437090206E-9	DEFECT	4.950802717034178E-10	TEST	2.77774454855477E-10	DOCUMENTATION
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999977907582828	WITHOUT_CLASSIFICATION	1.919117703805313E-6	DESIGN	1.8510257998598552E-7	IMPLEMENTATION	9.165964802712293E-8	DEFECT	1.1488365442354216E-8	DOCUMENTATION	1.873419927832087E-9	TEST
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999753721514901	WITHOUT_CLASSIFICATION	2.4552169437565142E-5	DESIGN	3.59107024868819E-8	DEFECT	2.5834095541367816E-8	TEST	9.75748346100925E-9	IMPLEMENTATION	4.17679069116778E-9	DOCUMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999997063350851	WITHOUT_CLASSIFICATION	2.5748224851014074E-7	DEFECT	2.3791786991667304E-8	DESIGN	9.514550519778003E-9	IMPLEMENTATION	2.2415403922503874E-9	TEST	6.347885279643192E-10	DOCUMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999889701697312	WITHOUT_CLASSIFICATION	8.899845633890735E-6	DEFECT	1.5758749629939799E-6	DESIGN	4.82520093879586E-7	IMPLEMENTATION	4.326403831944591E-8	DOCUMENTATION	2.8325539585736647E-8	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999996566801758	WITHOUT_CLASSIFICATION	2.2954701413926107E-7	DESIGN	1.1237210507602387E-7	DEFECT	7.758996486618984E-10	DOCUMENTATION	4.857648561985247E-10	IMPLEMENTATION	1.3904062371536417E-10	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999996566801758	WITHOUT_CLASSIFICATION	2.2954701413926107E-7	DESIGN	1.1237210507602387E-7	DEFECT	7.758996486618984E-10	DOCUMENTATION	4.857648561985247E-10	IMPLEMENTATION	1.3904062371536417E-10	TEST
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999999566243649	WITHOUT_CLASSIFICATION	3.5504952367324464E-8	DESIGN	7.02418672799739E-9	DEFECT	4.4121034622268576E-10	TEST	2.955069953149582E-10	DOCUMENTATION	1.0977864883259761E-10	IMPLEMENTATION
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999194075783475	WITHOUT_CLASSIFICATION	7.85268229989687E-5	DESIGN	9.449429383151503E-7	DEFECT	7.011347847793198E-7	IMPLEMENTATION	2.9052662989631586E-7	TEST	1.289943005134643E-7	DOCUMENTATION
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999998764088179	WITHOUT_CLASSIFICATION	6.926148511087659E-8	DESIGN	5.083900273818239E-8	DEFECT	1.3645094814287376E-9	DOCUMENTATION	1.3526457726755799E-9	IMPLEMENTATION	7.73539081913729E-10	TEST
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999984852063782	WITHOUT_CLASSIFICATION	1.3459633743819835E-6	DEFECT	1.6673164770728853E-7	DESIGN	1.5577228131092288E-9	DOCUMENTATION	4.371854465607936E-10	TEST	1.036915234231929E-10	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.9999811103744457	WITHOUT_CLASSIFICATION	9.574220273449168E-6	DEFECT	8.838863455352563E-6	DESIGN	2.496794728442039E-7	DOCUMENTATION	1.426132633409685E-7	IMPLEMENTATION	8.424908940172317E-8	TEST
// return	WITHOUT_CLASSIFICATION	0.999975560904855	WITHOUT_CLASSIFICATION	2.348795427025008E-5	DESIGN	7.233395737319056E-7	DEFECT	2.058753394202879E-7	IMPLEMENTATION	1.6375770567925744E-8	DOCUMENTATION	5.5501909894177E-9	TEST
// dup	WITHOUT_CLASSIFICATION	0.999983873668557	WITHOUT_CLASSIFICATION	1.283045966538561E-5	DESIGN	2.9659636939373643E-6	DEFECT	1.6762843038434514E-7	IMPLEMENTATION	1.1277954483179568E-7	DOCUMENTATION	4.950010835486014E-8	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999924154658133	WITHOUT_CLASSIFICATION	6.3460102964085705E-6	DESIGN	1.1726486435660462E-6	DEFECT	4.6544676165216225E-8	DOCUMENTATION	1.3984683421817399E-8	TEST	5.345887220022623E-9	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999954766219442	WITHOUT_CLASSIFICATION	2.51938991396938E-6	IMPLEMENTATION	1.7472078330451586E-6	DESIGN	9.709843425496455E-8	DOCUMENTATION	9.398112628934722E-8	DEFECT	6.57007480263778E-8	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999954766219442	WITHOUT_CLASSIFICATION	2.51938991396938E-6	IMPLEMENTATION	1.7472078330451586E-6	DESIGN	9.709843425496455E-8	DOCUMENTATION	9.398112628934722E-8	DEFECT	6.57007480263778E-8	TEST
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999997920210597	WITHOUT_CLASSIFICATION	1.8101890845642968E-7	DEFECT	1.564420918733304E-8	DESIGN	9.48967432210558E-9	IMPLEMENTATION	1.3951708799377404E-9	TEST	4.3097744080926204E-10	DOCUMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999997920210597	WITHOUT_CLASSIFICATION	1.8101890845642968E-7	DEFECT	1.564420918733304E-8	DESIGN	9.48967432210558E-9	IMPLEMENTATION	1.3951708799377404E-9	TEST	4.3097744080926204E-10	DOCUMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999938482958212	WITHOUT_CLASSIFICATION	5.3987735793996325E-6	DESIGN	4.743305690107681E-7	IMPLEMENTATION	2.5101182437712773E-7	DEFECT	1.8698496888980374E-8	DOCUMENTATION	8.88970916990968E-9	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999966391219656	WITHOUT_CLASSIFICATION	2.350610105793716E-6	DESIGN	6.247992486283565E-7	DEFECT	3.31668880190054E-7	IMPLEMENTATION	2.712558957134316E-8	TEST	2.667421020913243E-8	DOCUMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999966391219656	WITHOUT_CLASSIFICATION	2.350610105793716E-6	DESIGN	6.247992486283565E-7	DEFECT	3.31668880190054E-7	IMPLEMENTATION	2.712558957134316E-8	TEST	2.667421020913243E-8	DOCUMENTATION
// putfield	WITHOUT_CLASSIFICATION	0.9999809946681275	WITHOUT_CLASSIFICATION	1.0042788157729553E-5	DESIGN	8.094973912606932E-6	IMPLEMENTATION	7.207848344754707E-7	DEFECT	9.320864047893768E-8	TEST	5.357632707941343E-8	DOCUMENTATION
// return ;	WITHOUT_CLASSIFICATION	0.9999776175623495	WITHOUT_CLASSIFICATION	2.0572483095351133E-5	DESIGN	1.0934874470743363E-6	DEFECT	6.853453502726957E-7	IMPLEMENTATION	2.555400156253211E-8	DOCUMENTATION	5.567756165911103E-9	TEST
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999984951857919	WITHOUT_CLASSIFICATION	1.3056770305421294E-6	DESIGN	1.323518493733237E-7	DEFECT	4.1175192128603614E-8	IMPLEMENTATION	2.1334270307080543E-8	TEST	4.2758657404153035E-9	DOCUMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999934730825302	WITHOUT_CLASSIFICATION	5.6375077615294705E-6	DESIGN	6.319864551652699E-7	DEFECT	1.6731814967810769E-7	TEST	7.252985062445475E-8	IMPLEMENTATION	1.7575252684179562E-8	DOCUMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999785606777175	WITHOUT_CLASSIFICATION	2.0322445846680243E-5	DEFECT	1.0788195556772615E-6	DESIGN	1.6955942513442108E-8	IMPLEMENTATION	1.1949101331248196E-8	DOCUMENTATION	9.151836331085213E-9	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999837384006529	WITHOUT_CLASSIFICATION	1.3349854574795113E-5	DESIGN	2.331335621498328E-6	DEFECT	4.101655339301974E-7	IMPLEMENTATION	1.612155048397754E-7	DOCUMENTATION	9.02811209761367E-9	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999837384006529	WITHOUT_CLASSIFICATION	1.3349854574795113E-5	DESIGN	2.331335621498328E-6	DEFECT	4.101655339301974E-7	IMPLEMENTATION	1.612155048397754E-7	DOCUMENTATION	9.02811209761367E-9	TEST
// not array	WITHOUT_CLASSIFICATION	0.9997088538675424	WITHOUT_CLASSIFICATION	1.3094943408859655E-4	DESIGN	1.2469798966133894E-4	IMPLEMENTATION	3.434477017289932E-5	DEFECT	6.754027084356513E-7	DOCUMENTATION	4.785358264020033E-7	TEST
// array of reference type	WITHOUT_CLASSIFICATION	0.9999962655109519	WITHOUT_CLASSIFICATION	2.5806531233133658E-6	DEFECT	9.609417616700424E-7	DESIGN	1.1498366869875629E-7	DOCUMENTATION	7.222909408745402E-8	IMPLEMENTATION	5.6814002415462786E-9	TEST
// boolean	WITHOUT_CLASSIFICATION	0.9999994636646186	WITHOUT_CLASSIFICATION	4.6147609228028986E-7	DESIGN	5.518709755026524E-8	DEFECT	8.879123629892925E-9	IMPLEMENTATION	5.566302684161521E-9	DOCUMENTATION	5.2267652097657355E-9	TEST
// byte	WITHOUT_CLASSIFICATION	0.9999781185593696	WITHOUT_CLASSIFICATION	1.3578832079953432E-5	DESIGN	4.57470479882801E-6	IMPLEMENTATION	3.2193995697494065E-6	DEFECT	2.6298102863422583E-7	DOCUMENTATION	2.4552315329036924E-7	TEST
// char	WITHOUT_CLASSIFICATION	0.9999999029522918	WITHOUT_CLASSIFICATION	8.35502682517009E-8	DESIGN	6.253265563820341E-9	DEFECT	4.64463286415812E-9	IMPLEMENTATION	1.3425289713342943E-9	DOCUMENTATION	1.2570125002672213E-9	TEST
// short	WITHOUT_CLASSIFICATION	0.9999030353302899	WITHOUT_CLASSIFICATION	9.575133734364481E-5	DESIGN	7.219270250052676E-7	DEFECT	2.2975138876757137E-7	TEST	1.3389092768670247E-7	IMPLEMENTATION	1.2776302498438004E-7	DOCUMENTATION
// double	WITHOUT_CLASSIFICATION	0.99999141336977	WITHOUT_CLASSIFICATION	6.924369713676469E-6	DESIGN	1.5905350541723917E-6	DEFECT	3.061863074182057E-8	IMPLEMENTATION	2.526337608638407E-8	DOCUMENTATION	1.584345544997327E-8	TEST
// float	WITHOUT_CLASSIFICATION	0.999994406042813	WITHOUT_CLASSIFICATION	3.4569217090117053E-6	DEFECT	1.96342214107619E-6	DESIGN	6.794886079548583E-8	IMPLEMENTATION	5.8493872105430125E-8	TEST	4.7170604023368175E-8	DOCUMENTATION
// float	WITHOUT_CLASSIFICATION	0.999994406042813	WITHOUT_CLASSIFICATION	3.4569217090117053E-6	DEFECT	1.96342214107619E-6	DESIGN	6.794886079548583E-8	IMPLEMENTATION	5.8493872105430125E-8	TEST	4.7170604023368175E-8	DOCUMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999899144693198	WITHOUT_CLASSIFICATION	8.08989426023609E-6	DEFECT	1.686240558561085E-6	DESIGN	2.0261941259424783E-7	IMPLEMENTATION	5.802127002388711E-8	TEST	4.8755178972694314E-8	DOCUMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999899144693198	WITHOUT_CLASSIFICATION	8.08989426023609E-6	DEFECT	1.686240558561085E-6	DESIGN	2.0261941259424783E-7	IMPLEMENTATION	5.802127002388711E-8	TEST	4.8755178972694314E-8	DOCUMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999887244056376	WITHOUT_CLASSIFICATION	5.863706829205784E-6	DESIGN	3.3465406515504713E-6	IMPLEMENTATION	1.872928098463537E-6	DEFECT	1.474942934506428E-7	DOCUMENTATION	4.4924489752037844E-8	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999887244056376	WITHOUT_CLASSIFICATION	5.863706829205784E-6	DESIGN	3.3465406515504713E-6	IMPLEMENTATION	1.872928098463537E-6	DEFECT	1.474942934506428E-7	DOCUMENTATION	4.4924489752037844E-8	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999909802311	WITHOUT_CLASSIFICATION	6.1285132340164024E-9	DESIGN	1.211017639787664E-9	DEFECT	8.501805584768089E-10	IMPLEMENTATION	5.785135163485183E-10	TEST	2.515441273712243E-10	DOCUMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999909802311	WITHOUT_CLASSIFICATION	6.1285132340164024E-9	DESIGN	1.211017639787664E-9	DEFECT	8.501805584768089E-10	IMPLEMENTATION	5.785135163485183E-10	TEST	2.515441273712243E-10	DOCUMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999837384006529	WITHOUT_CLASSIFICATION	1.3349854574795113E-5	DESIGN	2.331335621498328E-6	DEFECT	4.101655339301974E-7	IMPLEMENTATION	1.612155048397754E-7	DOCUMENTATION	9.02811209761367E-9	TEST
// double	WITHOUT_CLASSIFICATION	0.99999141336977	WITHOUT_CLASSIFICATION	6.924369713676469E-6	DESIGN	1.5905350541723917E-6	DEFECT	3.061863074182057E-8	IMPLEMENTATION	2.526337608638407E-8	DOCUMENTATION	1.584345544997327E-8	TEST
// float	WITHOUT_CLASSIFICATION	0.999994406042813	WITHOUT_CLASSIFICATION	3.4569217090117053E-6	DEFECT	1.96342214107619E-6	DESIGN	6.794886079548583E-8	IMPLEMENTATION	5.8493872105430125E-8	TEST	4.7170604023368175E-8	DOCUMENTATION
// float	WITHOUT_CLASSIFICATION	0.999994406042813	WITHOUT_CLASSIFICATION	3.4569217090117053E-6	DEFECT	1.96342214107619E-6	DESIGN	6.794886079548583E-8	IMPLEMENTATION	5.8493872105430125E-8	TEST	4.7170604023368175E-8	DOCUMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999899144693198	WITHOUT_CLASSIFICATION	8.08989426023609E-6	DEFECT	1.686240558561085E-6	DESIGN	2.0261941259424783E-7	IMPLEMENTATION	5.802127002388711E-8	TEST	4.8755178972694314E-8	DOCUMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999887244056376	WITHOUT_CLASSIFICATION	5.863706829205784E-6	DESIGN	3.3465406515504713E-6	IMPLEMENTATION	1.872928098463537E-6	DEFECT	1.474942934506428E-7	DOCUMENTATION	4.4924489752037844E-8	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999887244056376	WITHOUT_CLASSIFICATION	5.863706829205784E-6	DESIGN	3.3465406515504713E-6	IMPLEMENTATION	1.872928098463537E-6	DEFECT	1.474942934506428E-7	DOCUMENTATION	4.4924489752037844E-8	TEST
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999909802311	WITHOUT_CLASSIFICATION	6.1285132340164024E-9	DESIGN	1.211017639787664E-9	DEFECT	8.501805584768089E-10	IMPLEMENTATION	5.785135163485183E-10	TEST	2.515441273712243E-10	DOCUMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9998063048112725	WITHOUT_CLASSIFICATION	1.1807131782987684E-4	DESIGN	7.190172401651906E-5	IMPLEMENTATION	2.172202276186869E-6	DEFECT	1.1071605478116646E-6	DOCUMENTATION	4.4278405705019596E-7	TEST
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9998079959234599	WITHOUT_CLASSIFICATION	1.901276439950404E-4	DESIGN	7.228047339954033E-7	DOCUMENTATION	6.549226603356443E-7	DEFECT	3.172971418470977E-7	TEST	1.8140800881385462E-7	IMPLEMENTATION
//decrement the lock	WITHOUT_CLASSIFICATION	0.9997996094864094	WITHOUT_CLASSIFICATION	1.1111263912259488E-4	DESIGN	6.082170350696369E-5	IMPLEMENTATION	1.6595133061149995E-5	DEFECT	9.342308122096812E-6	DOCUMENTATION	2.518729777816019E-6	TEST
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999987505943875	WITHOUT_CLASSIFICATION	6.06456070226222E-7	DESIGN	5.758774041098304E-7	DEFECT	3.2611400989194797E-8	IMPLEMENTATION	3.085654941296199E-8	TEST	3.604187806899707E-9	DOCUMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.999821368550398	WITHOUT_CLASSIFICATION	1.7560291314794264E-4	DESIGN	2.380853726986226E-6	IMPLEMENTATION	2.5804330499722213E-7	DOCUMENTATION	2.197485670927273E-7	DEFECT	1.6989085494667141E-7	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999852211009146	WITHOUT_CLASSIFICATION	9.730156704077323E-6	DESIGN	2.594874138999834E-6	DEFECT	2.2119758990114033E-6	IMPLEMENTATION	1.839163207658953E-7	DOCUMENTATION	5.797602254590423E-8	TEST
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9969623596196517	WITHOUT_CLASSIFICATION	0.003033269866462718	DESIGN	4.169158904073091E-6	DEFECT	1.0556076782460606E-7	DOCUMENTATION	7.833871341686855E-8	IMPLEMENTATION	1.7455500260891836E-8	TEST
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9861500877233572	DEFECT	0.009974350357157257	DESIGN	0.003874456657334057	WITHOUT_CLASSIFICATION	9.091329065967815E-7	TEST	1.9063468272722752E-7	IMPLEMENTATION	5.4945622375002264E-9	DOCUMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9987341014477675	WITHOUT_CLASSIFICATION	0.001250439442572821	DEFECT	1.2009204150400152E-5	DESIGN	2.9252831763253764E-6	IMPLEMENTATION	3.1413289443803137E-7	TEST	2.1048943851944446E-7	DOCUMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999899050455	WITHOUT_CLASSIFICATION	9.450757896818947E-9	DEFECT	2.4203598743923685E-10	TEST	2.3247741509207874E-10	IMPLEMENTATION	1.6470480530097206E-10	DESIGN	4.978376724173752E-12	DOCUMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999998487720975	WITHOUT_CLASSIFICATION	1.1610117341100857E-7	IMPLEMENTATION	3.359456060145183E-8	DEFECT	8.699336867637297E-10	DESIGN	4.2854394977926356E-10	TEST	2.336908202217464E-10	DOCUMENTATION
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999999548494967	WITHOUT_CLASSIFICATION	2.470389214503004E-8	DESIGN	9.98325119863439E-9	IMPLEMENTATION	8.678182492383174E-9	DEFECT	1.648803949546569E-9	TEST	1.3637355884041492E-10	DOCUMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999978205039383	WITHOUT_CLASSIFICATION	1.0618754234985559E-5	IMPLEMENTATION	8.058659854569054E-6	DESIGN	2.4685615843331757E-6	DEFECT	5.09541345976833E-7	DOCUMENTATION	1.3944359726637845E-7	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999852211009146	WITHOUT_CLASSIFICATION	9.730156704077323E-6	DESIGN	2.594874138999834E-6	DEFECT	2.2119758990114033E-6	IMPLEMENTATION	1.839163207658953E-7	DOCUMENTATION	5.797602254590423E-8	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999571679707233	WITHOUT_CLASSIFICATION	2.3393006500381787E-5	DESIGN	1.6226174543277672E-5	DEFECT	1.400013710839917E-6	DOCUMENTATION	1.2494199833115805E-6	IMPLEMENTATION	5.63414538986881E-7	TEST
//noop	WITHOUT_CLASSIFICATION	0.9999571679707233	WITHOUT_CLASSIFICATION	2.3393006500381787E-5	DESIGN	1.6226174543277672E-5	DEFECT	1.400013710839917E-6	DOCUMENTATION	1.2494199833115805E-6	IMPLEMENTATION	5.63414538986881E-7	TEST
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999940133464728	WITHOUT_CLASSIFICATION	5.6702831716426115E-6	DESIGN	3.1170131078948405E-7	DEFECT	3.773109696766004E-9	TEST	6.437485032570152E-10	IMPLEMENTATION	2.521866733790329E-10	DOCUMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999452250798916	WITHOUT_CLASSIFICATION	4.72598038495425E-5	DESIGN	6.902207349651399E-6	IMPLEMENTATION	2.9224502997328756E-7	DOCUMENTATION	1.741111510445289E-7	DEFECT	1.4655272815967788E-7	TEST
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999452250798916	WITHOUT_CLASSIFICATION	4.72598038495425E-5	DESIGN	6.902207349651399E-6	IMPLEMENTATION	2.9224502997328756E-7	DOCUMENTATION	1.741111510445289E-7	DEFECT	1.4655272815967788E-7	TEST
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999980624346325	WITHOUT_CLASSIFICATION	1.9014833303335391E-6	DESIGN	3.040786355729713E-8	DEFECT	3.9009761599585104E-9	DOCUMENTATION	1.7540382570864196E-9	TEST	1.9159214856758872E-11	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9997036019576496	WITHOUT_CLASSIFICATION	2.9466368894161526E-4	DESIGN	1.655559486128817E-6	DEFECT	6.592874834266103E-8	TEST	1.16375707959435E-8	DOCUMENTATION	1.227603511763904E-9	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999998807385952	WITHOUT_CLASSIFICATION	1.1544822216486862E-7	DEFECT	1.6089214187521006E-9	IMPLEMENTATION	1.3672834788725289E-9	TEST	6.646515058593745E-10	DESIGN	1.7232620038914515E-10	DOCUMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9998786910880748	WITHOUT_CLASSIFICATION	1.189535538158385E-4	DESIGN	1.2602623212642262E-6	DEFECT	1.0154850711594633E-6	IMPLEMENTATION	6.82038600181434E-8	DOCUMENTATION	1.1406857138311899E-8	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9998786910880748	WITHOUT_CLASSIFICATION	1.189535538158385E-4	DESIGN	1.2602623212642262E-6	DEFECT	1.0154850711594633E-6	IMPLEMENTATION	6.82038600181434E-8	DOCUMENTATION	1.1406857138311899E-8	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999995973213984	WITHOUT_CLASSIFICATION	3.631826546819524E-7	DESIGN	3.9340638005704746E-8	DEFECT	1.2586572455424088E-10	TEST	1.8607296860702437E-11	IMPLEMENTATION	1.083589328650655E-11	DOCUMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9998766830299018	WITHOUT_CLASSIFICATION	8.333489622598627E-5	DEFECT	3.997877970458272E-5	DESIGN	1.821487780023975E-9	IMPLEMENTATION	8.022301343683097E-10	DOCUMENTATION	6.704496992722001E-10	TEST
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9998766830299018	WITHOUT_CLASSIFICATION	8.333489622598627E-5	DEFECT	3.997877970458272E-5	DESIGN	1.821487780023975E-9	IMPLEMENTATION	8.022301343683097E-10	DOCUMENTATION	6.704496992722001E-10	TEST
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.999988005672294	WITHOUT_CLASSIFICATION	1.1492106176850169E-5	DESIGN	2.9209947752732156E-7	TEST	8.320995277254486E-8	DEFECT	7.55729109781142E-8	DOCUMENTATION	5.133918790112852E-8	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.999999909092819	WITHOUT_CLASSIFICATION	7.997389065639174E-8	DESIGN	9.172591084090959E-9	DEFECT	1.131114827238421E-9	TEST	4.819803716520923E-10	IMPLEMENTATION	1.4760408930137236E-10	DOCUMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999986701059964	WITHOUT_CLASSIFICATION	1.3129236175545419E-6	DESIGN	1.5175158305608762E-8	DEFECT	1.3117986974585922E-9	TEST	4.3522166410094473E-10	DOCUMENTATION	4.820737425290498E-11	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999956323593554	WITHOUT_CLASSIFICATION	2.3511509029908316E-6	IMPLEMENTATION	1.3402949495507837E-6	DESIGN	3.6454471826402056E-7	DEFECT	2.0235178052128147E-7	DOCUMENTATION	1.0929829330362054E-7	TEST
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999979256571694	WITHOUT_CLASSIFICATION	1.796556946324731E-6	DESIGN	2.1128394819305188E-7	DEFECT	2.741755338991883E-8	DOCUMENTATION	2.0533093132876205E-8	IMPLEMENTATION	1.855128952918325E-8	TEST
// WHERE	WITHOUT_CLASSIFICATION	0.9999916938994098	WITHOUT_CLASSIFICATION	7.167414324282927E-6	DESIGN	9.046985628332778E-7	DEFECT	9.675746887939379E-8	IMPLEMENTATION	7.52240299960061E-8	DOCUMENTATION	6.200620438171155E-8	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999898890252973	WITHOUT_CLASSIFICATION	9.79213861422324E-6	DESIGN	2.225688422886474E-7	DEFECT	4.842229725873261E-8	DOCUMENTATION	3.112660166489544E-8	TEST	1.6718347287057384E-8	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999948042423052	WITHOUT_CLASSIFICATION	2.979633222806293E-6	DESIGN	1.02112090975256E-6	DEFECT	9.938244915688996E-7	IMPLEMENTATION	1.3056277635746737E-7	DOCUMENTATION	7.061629424878466E-8	TEST
// TODO:	WITHOUT_CLASSIFICATION	0.9858763397699662	WITHOUT_CLASSIFICATION	0.0068012296018194925	IMPLEMENTATION	0.005658788539902361	DESIGN	0.001028620082157567	DEFECT	3.451956021275762E-4	DOCUMENTATION	2.8982640402681355E-4	TEST
// ID	WITHOUT_CLASSIFICATION	0.9999960295177204	WITHOUT_CLASSIFICATION	1.9830440764094893E-6	DESIGN	9.228894560831694E-7	IMPLEMENTATION	8.646705610237633E-7	DEFECT	1.1069474140948995E-7	DOCUMENTATION	8.918344485222287E-8	TEST
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999997837267411	WITHOUT_CLASSIFICATION	9.216105023465937E-8	DESIGN	6.183264787097192E-8	DEFECT	2.7445997906769882E-8	IMPLEMENTATION	1.8381441751061238E-8	TEST	1.6452121064040875E-8	DOCUMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999213472142847	WITHOUT_CLASSIFICATION	6.957300340998403E-5	IMPLEMENTATION	4.699744918712023E-6	DESIGN	2.8756698581405515E-6	DEFECT	1.0244133206724937E-6	DOCUMENTATION	4.799542076307316E-7	TEST
// Primary key constraint	WITHOUT_CLASSIFICATION	0.999999532378427	WITHOUT_CLASSIFICATION	4.2448647280605696E-7	DESIGN	2.1332795967225295E-8	DEFECT	1.0146899001618889E-8	DOCUMENTATION	8.60603240621555E-9	IMPLEMENTATION	3.049372806825904E-9	TEST
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999998356006937	WITHOUT_CLASSIFICATION	7.457972526681035E-8	DEFECT	6.119404196484376E-8	TEST	2.5090103673788655E-8	DESIGN	3.321387117266727E-9	IMPLEMENTATION	2.1404814482067273E-10	DOCUMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999999979319651	WITHOUT_CLASSIFICATION	1.4505562940482333E-9	TEST	2.637735404410887E-10	DEFECT	2.2154725643161126E-10	DESIGN	1.2446897056950995E-10	IMPLEMENTATION	7.688744761722626E-12	DOCUMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999213472142847	WITHOUT_CLASSIFICATION	6.957300340998403E-5	IMPLEMENTATION	4.699744918712023E-6	DESIGN	2.8756698581405515E-6	DEFECT	1.0244133206724937E-6	DOCUMENTATION	4.799542076307316E-7	TEST
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.99999713363166	WITHOUT_CLASSIFICATION	2.5846900009358208E-6	DESIGN	2.4448657605065083E-7	DEFECT	3.251243767152893E-8	IMPLEMENTATION	3.736151274405825E-9	DOCUMENTATION	9.43174079956394E-10	TEST
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999988688701742	WITHOUT_CLASSIFICATION	1.0457140012761334E-6	IMPLEMENTATION	7.442033341637498E-8	DESIGN	8.337386328031531E-9	DEFECT	2.4318201178140132E-9	DOCUMENTATION	2.26284716292779E-10	TEST
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999863638704726	WITHOUT_CLASSIFICATION	1.0121766897256142E-5	IMPLEMENTATION	3.0768428348835948E-6	DESIGN	1.894458900447866E-7	DEFECT	1.8104539961241666E-7	DOCUMENTATION	6.702850557909896E-8	TEST
// IMPORT	WITHOUT_CLASSIFICATION	0.9999917288110751	WITHOUT_CLASSIFICATION	4.075042909920287E-6	DESIGN	3.3568193078830226E-6	DEFECT	5.510825135311564E-7	IMPLEMENTATION	1.6957027052596016E-7	DOCUMENTATION	1.1867392302595904E-7	TEST
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999642015363502	WITHOUT_CLASSIFICATION	1.4512677381112577E-5	DESIGN	1.3256879043647488E-5	DEFECT	6.917253882005963E-6	IMPLEMENTATION	8.925139718844638E-7	DOCUMENTATION	2.1913937116309848E-7	TEST
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999984306191027	WITHOUT_CLASSIFICATION	1.1001725603262193E-6	DESIGN	1.88824642179742E-7	DEFECT	1.287268573785853E-7	IMPLEMENTATION	1.1866806363935114E-7	DOCUMENTATION	3.298877388385069E-8	TEST
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999996359329558	WITHOUT_CLASSIFICATION	2.6581740531294134E-7	DESIGN	4.6563531240254985E-8	DOCUMENTATION	2.0272911932398314E-8	IMPLEMENTATION	1.9336109315663964E-8	TEST	1.2077086453063596E-8	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999950050668941	WITHOUT_CLASSIFICATION	2.487270130149424E-6	IMPLEMENTATION	1.8561197921567656E-6	DESIGN	3.916288217454897E-7	DEFECT	1.82344675590873E-7	DOCUMENTATION	7.756968622110446E-8	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999736066789924	WITHOUT_CLASSIFICATION	2.569897944782401E-5	DESIGN	4.2451386315162373E-7	DEFECT	1.6108819833599158E-7	DOCUMENTATION	6.151233866653459E-8	TEST	4.722715965568702E-8	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999947425424297	WITHOUT_CLASSIFICATION	5.236522398480537E-6	DESIGN	1.9665768886905545E-8	DEFECT	9.084695771608857E-10	TEST	3.305317452425875E-10	DOCUMENTATION	3.0401516742925536E-11	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999982881173405	WITHOUT_CLASSIFICATION	9.809887863723214E-7	DESIGN	4.504866930587646E-7	DEFECT	2.095038815846456E-7	IMPLEMENTATION	4.206762945297513E-8	DOCUMENTATION	2.883566895748669E-8	TEST
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999981485133681	WITHOUT_CLASSIFICATION	1.7464994436689838E-6	DESIGN	6.830661481296819E-8	IMPLEMENTATION	1.717427361858914E-8	DEFECT	1.4836302404025724E-8	DOCUMENTATION	4.669997339703014E-9	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999897934284004	WITHOUT_CLASSIFICATION	9.102187344816574E-6	DESIGN	7.932320164669924E-7	DEFECT	1.3915724137911795E-7	IMPLEMENTATION	9.365715884943321E-8	DOCUMENTATION	7.833783803008327E-8	TEST
// CHECK	WITHOUT_CLASSIFICATION	0.9999898890252973	WITHOUT_CLASSIFICATION	9.79213861422324E-6	DESIGN	2.225688422886474E-7	DEFECT	4.842229725873261E-8	DOCUMENTATION	3.112660166489544E-8	TEST	1.6718347287057384E-8	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999736066789924	WITHOUT_CLASSIFICATION	2.569897944782401E-5	DESIGN	4.2451386315162373E-7	DEFECT	1.6108819833599158E-7	DOCUMENTATION	6.151233866653459E-8	TEST	4.722715965568702E-8	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999982881173405	WITHOUT_CLASSIFICATION	9.809887863723214E-7	DESIGN	4.504866930587646E-7	DEFECT	2.095038815846456E-7	IMPLEMENTATION	4.206762945297513E-8	DOCUMENTATION	2.883566895748669E-8	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999897934284004	WITHOUT_CLASSIFICATION	9.102187344816574E-6	DESIGN	7.932320164669924E-7	DEFECT	1.3915724137911795E-7	IMPLEMENTATION	9.365715884943321E-8	DOCUMENTATION	7.833783803008327E-8	TEST
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999716386387	WITHOUT_CLASSIFICATION	1.4912150876182692E-8	IMPLEMENTATION	1.1301715768093673E-8	DESIGN	1.7762156757911933E-9	DEFECT	2.922406899100766E-10	DOCUMENTATION	7.903814147991275E-11	TEST
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999972879563545	WITHOUT_CLASSIFICATION	1.416290291134892E-6	DESIGN	6.485515594824522E-7	IMPLEMENTATION	5.085908016684394E-7	DEFECT	7.097287185767199E-8	TEST	6.76381214881809E-8	DOCUMENTATION
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999840471041	WITHOUT_CLASSIFICATION	1.2719767479639541E-8	IMPLEMENTATION	2.6908897856586097E-9	DESIGN	3.388244817527336E-10	DEFECT	1.8792458473232985E-10	DOCUMENTATION	1.5489599430449527E-11	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999919467299794	WITHOUT_CLASSIFICATION	4.7593215110574256E-6	DESIGN	2.46615569979673E-6	IMPLEMENTATION	4.2294422713376353E-7	DEFECT	2.717817491027445E-7	DOCUMENTATION	1.3306683353868732E-7	TEST
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999984117225582	WITHOUT_CLASSIFICATION	1.251981526653547E-6	DESIGN	1.5503500570526547E-7	DEFECT	1.130137500189078E-7	IMPLEMENTATION	3.827132936535505E-8	DOCUMENTATION	2.997583010409991E-8	TEST
// column index	WITHOUT_CLASSIFICATION	0.999980035225904	WITHOUT_CLASSIFICATION	1.61455710921437E-5	DEFECT	3.584164032921916E-6	IMPLEMENTATION	1.4165784472634086E-7	DESIGN	7.598220978080551E-8	DOCUMENTATION	1.739891643027882E-8	TEST
//column unique-key	WITHOUT_CLASSIFICATION	0.9999773596820923	WITHOUT_CLASSIFICATION	1.5554233064434824E-5	DESIGN	4.218926553312808E-6	DEFECT	1.6739173365639621E-6	IMPLEMENTATION	7.972090742992359E-7	DOCUMENTATION	3.9603187893449393E-7	TEST
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9989795410369956	WITHOUT_CLASSIFICATION	0.001019911302101552	DESIGN	3.201452752182563E-7	DEFECT	1.979620048993245E-7	TEST	1.5918387725843978E-8	IMPLEMENTATION	1.3635235129809922E-8	DOCUMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.999999088814142	WITHOUT_CLASSIFICATION	6.318407221769947E-7	DESIGN	2.1894411872818762E-7	DEFECT	2.6205471853839737E-8	DOCUMENTATION	2.0331373600447467E-8	TEST	1.3864171648158776E-8	IMPLEMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999987089802	WITHOUT_CLASSIFICATION	1.1703156063694816E-9	IMPLEMENTATION	7.992400524933594E-11	DEFECT	2.3844139468279928E-11	DESIGN	1.2341109716116387E-11	DOCUMENTATION	4.594925595537487E-12	TEST
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999844977860073	WITHOUT_CLASSIFICATION	1.4885379305018425E-5	DESIGN	4.477272910765191E-7	TEST	1.0447918649524179E-7	DEFECT	3.9176243791848725E-8	DOCUMENTATION	2.5451966396581856E-8	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999767948014201	WITHOUT_CLASSIFICATION	1.3050709145208662E-5	DESIGN	9.773861772980724E-6	DEFECT	3.523924678773208E-7	IMPLEMENTATION	2.38203849241274E-8	TEST	4.414808993548128E-9	DOCUMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999734794675	WITHOUT_CLASSIFICATION	2.6212834488907193E-8	IMPLEMENTATION	2.590494932916889E-10	DOCUMENTATION	2.795715735207814E-11	DEFECT	1.1452973774601089E-11	TEST	9.23842574173526E-12	DESIGN
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999964035098287	WITHOUT_CLASSIFICATION	3.035040200749165E-6	DESIGN	2.0622336502094793E-7	IMPLEMENTATION	1.6787065890091987E-7	TEST	1.6352441124643636E-7	DEFECT	2.3831535485814184E-8	DOCUMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999942842900881	WITHOUT_CLASSIFICATION	3.4080114972600543E-6	DESIGN	1.4226901164818153E-6	DEFECT	7.162058770358651E-7	IMPLEMENTATION	9.326703694379584E-8	TEST	7.553538421473068E-8	DOCUMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999878853733665	WITHOUT_CLASSIFICATION	6.746147334262552E-6	DESIGN	4.370914565996284E-6	IMPLEMENTATION	5.875383101763822E-7	DEFECT	2.799654666657953E-7	DOCUMENTATION	1.3006095642345283E-7	TEST
// TABLE	WITHOUT_CLASSIFICATION	0.9999981322332501	WITHOUT_CLASSIFICATION	1.06492025632975E-6	DESIGN	5.859156966465656E-7	DEFECT	1.2117698570141655E-7	IMPLEMENTATION	5.4832842843580455E-8	DOCUMENTATION	4.09209684502142E-8	TEST
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.999999814957845	WITHOUT_CLASSIFICATION	6.562421837075064E-8	DEFECT	5.4481865671448534E-8	TEST	3.5428413568656906E-8	DESIGN	2.6390975819165864E-8	IMPLEMENTATION	3.1166816389027076E-9	DOCUMENTATION
// SORT	WITHOUT_CLASSIFICATION	0.9999902172459855	WITHOUT_CLASSIFICATION	7.820482592661331E-6	DESIGN	1.1171079092194682E-6	DEFECT	5.051057764022594E-7	IMPLEMENTATION	2.152293008445615E-7	DOCUMENTATION	1.2482843553992863E-7	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999736066789924	WITHOUT_CLASSIFICATION	2.569897944782401E-5	DESIGN	4.2451386315162373E-7	DEFECT	1.6108819833599158E-7	DOCUMENTATION	6.151233866653459E-8	TEST	4.722715965568702E-8	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999991240861614	WITHOUT_CLASSIFICATION	8.66005931979741E-7	DESIGN	6.154704831871401E-9	IMPLEMENTATION	1.7820580871207507E-9	DEFECT	1.6090144154005588E-9	TEST	3.621289887592373E-10	DOCUMENTATION
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999994623787348	WITHOUT_CLASSIFICATION	4.1224329505052687E-7	IMPLEMENTATION	1.1738114861340742E-7	DESIGN	4.533146825337764E-9	DOCUMENTATION	1.8761926375576827E-9	DEFECT	1.5874819528995588E-9	TEST
// set up second pass	WITHOUT_CLASSIFICATION	0.9999982991097514	WITHOUT_CLASSIFICATION	1.4350792896440629E-6	DESIGN	2.207390107461335E-7	IMPLEMENTATION	2.0868061646297625E-8	DOCUMENTATION	1.9060299305425773E-8	DEFECT	5.143587379279736E-9	TEST
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9992150555168894	WITHOUT_CLASSIFICATION	6.671744169362659E-4	DESIGN	1.1674307888328969E-4	TEST	9.69201274615479E-7	IMPLEMENTATION	3.0400018928147516E-8	DEFECT	2.7385997547506212E-8	DOCUMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999990734821048	WITHOUT_CLASSIFICATION	8.114988552162164E-7	DESIGN	5.4258856462629236E-8	IMPLEMENTATION	3.416694333660792E-8	TEST	2.1955240009039004E-8	DEFECT	4.63800023356453E-9	DOCUMENTATION
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999696056101152	WITHOUT_CLASSIFICATION	2.5686007718847576E-5	DESIGN	4.621134499854495E-6	DEFECT	5.133440090624178E-8	DOCUMENTATION	2.5389225427320024E-8	IMPLEMENTATION	1.0524039777018022E-8	TEST
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999978113795	WITHOUT_CLASSIFICATION	2.1722657578541733E-9	DESIGN	9.991813337562256E-12	DOCUMENTATION	3.221006676967339E-12	DEFECT	3.0749884018374318E-12	IMPLEMENTATION	6.682963753286851E-14	TEST
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999997904671226	WITHOUT_CLASSIFICATION	1.2268338122516806E-7	DESIGN	8.304783377417102E-8	IMPLEMENTATION	1.8249223677905282E-9	DOCUMENTATION	1.6393132842215102E-9	DEFECT	3.3742700933755764E-10	TEST
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999651824010516	WITHOUT_CLASSIFICATION	2.039767585279644E-5	DESIGN	6.269684379461909E-6	DEFECT	6.251066202440008E-6	IMPLEMENTATION	1.5820526630101942E-6	DOCUMENTATION	3.1711985088233623E-7	TEST
// GENERATOR	WITHOUT_CLASSIFICATION	0.999995088048714	WITHOUT_CLASSIFICATION	3.130115690497603E-6	DESIGN	9.833005543367067E-7	IMPLEMENTATION	5.432560805437188E-7	DEFECT	1.5168129779515756E-7	DOCUMENTATION	1.0359766280190613E-7	TEST
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999994584765808	WITHOUT_CLASSIFICATION	3.8618330804908265E-6	IMPLEMENTATION	1.03805548457764E-6	DESIGN	3.964762426480715E-7	DEFECT	6.809812727625108E-8	DOCUMENTATION	5.0771256971416335E-8	TEST
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999999781950249	WITHOUT_CLASSIFICATION	1.2272362375414058E-7	DESIGN	4.2762728946651834E-8	IMPLEMENTATION	3.185518879176398E-8	DEFECT	1.1566195207149464E-8	DOCUMENTATION	9.142014388759067E-9	TEST
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9987154677691434	WITHOUT_CLASSIFICATION	0.0010500202844715121	DESIGN	1.3138595143493735E-4	IMPLEMENTATION	1.0001998739081242E-4	DEFECT	2.7187942482983754E-6	DOCUMENTATION	3.87213311017367E-7	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999405302050467	WITHOUT_CLASSIFICATION	4.472085229064971E-5	IMPLEMENTATION	1.2634874627210707E-5	DESIGN	2.0385492377882017E-6	DEFECT	6.366618432093895E-8	TEST	1.1852613272070933E-8	DOCUMENTATION
// contained elements:	WITHOUT_CLASSIFICATION	0.9999960171763405	WITHOUT_CLASSIFICATION	3.812605569437222E-6	DESIGN	1.2013048216724722E-7	IMPLEMENTATION	3.35451602794748E-8	DEFECT	1.4352123240607692E-8	DOCUMENTATION	2.19032449265068E-9	TEST
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999965639218659	WITHOUT_CLASSIFICATION	1.8040738236521506E-6	IMPLEMENTATION	1.3648107636920926E-6	DESIGN	2.5353102241788177E-7	DEFECT	1.0925225387822829E-8	DOCUMENTATION	2.737299046356494E-9	TEST
// Bind the where	WITHOUT_CLASSIFICATION	0.9997915563480441	WITHOUT_CLASSIFICATION	1.1782546136695295E-4	DESIGN	7.89843410379049E-5	IMPLEMENTATION	6.090917326938767E-6	DEFECT	3.360385071348816E-6	DOCUMENTATION	2.1825471527318773E-6	TEST
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999773875544692	WITHOUT_CLASSIFICATION	1.6106281812860135E-5	IMPLEMENTATION	4.559993383394912E-6	DESIGN	1.5582295535224227E-6	DEFECT	3.231633813608682E-7	DOCUMENTATION	6.47773996176888E-8	TEST
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999200798427074	WITHOUT_CLASSIFICATION	7.396528576994379E-5	IMPLEMENTATION	4.819581802964286E-6	DESIGN	9.135796568000446E-7	DEFECT	1.1272963945425943E-7	TEST	1.0898042360958075E-7	DOCUMENTATION
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999665380589516	WITHOUT_CLASSIFICATION	2.1965063036964365E-5	DESIGN	7.564011122701998E-6	IMPLEMENTATION	3.6415361635085994E-6	DEFECT	2.770238769736371E-7	TEST	1.4306848203302467E-8	DOCUMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999991198268	WITHOUT_CLASSIFICATION	8.785420228521606E-10	IMPLEMENTATION	8.775832486400304E-13	TEST	7.268784386416337E-13	DESIGN	1.4598945045494545E-14	DOCUMENTATION	1.2155004565024655E-14	DEFECT
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999994326073537	WITHOUT_CLASSIFICATION	3.5253138332269656E-7	DEFECT	1.9617020131001443E-7	DESIGN	1.2261742453492395E-8	IMPLEMENTATION	4.952233951484013E-9	TEST	1.4770852386358634E-9	DOCUMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.896281891642421	WITHOUT_CLASSIFICATION	0.10371445454221477	DESIGN	1.9040833310897102E-6	IMPLEMENTATION	1.13873737375216E-6	DEFECT	4.4421567331717934E-7	DOCUMENTATION	1.6677898611652414E-7	TEST
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9997794264523675	WITHOUT_CLASSIFICATION	2.1306427520403562E-4	DESIGN	5.818415442485761E-6	DEFECT	8.661065321318226E-7	DOCUMENTATION	5.523606247360219E-7	TEST	2.7238982923207653E-7	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9997338368536458	WITHOUT_CLASSIFICATION	1.6014063249897368E-4	DESIGN	7.699580119590045E-5	IMPLEMENTATION	1.6450347959160275E-5	DEFECT	1.1888843377538874E-5	DOCUMENTATION	6.875213226752072E-7	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9997338368536458	WITHOUT_CLASSIFICATION	1.6014063249897368E-4	DESIGN	7.699580119590045E-5	IMPLEMENTATION	1.6450347959160275E-5	DEFECT	1.1888843377538874E-5	DOCUMENTATION	6.875213226752072E-7	TEST
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999564239146022	WITHOUT_CLASSIFICATION	3.186006814251569E-5	IMPLEMENTATION	5.5813929855521316E-6	DEFECT	3.570957525097859E-6	DESIGN	1.5046512462844827E-6	DOCUMENTATION	1.059015498527666E-6	TEST
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9992128990389099	WITHOUT_CLASSIFICATION	7.549763932249727E-4	IMPLEMENTATION	3.1578156474979825E-5	DESIGN	3.715851319865738E-7	DEFECT	1.47286869770349E-7	DOCUMENTATION	2.7539388473848697E-8	TEST
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999943811605986	WITHOUT_CLASSIFICATION	5.487532985571316E-6	DESIGN	7.165759460304368E-8	IMPLEMENTATION	2.7267914562089924E-8	DEFECT	2.5962449010182526E-8	DOCUMENTATION	6.41845777187322E-9	TEST
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999455855952605	WITHOUT_CLASSIFICATION	4.970927821846469E-5	DESIGN	2.5494650528586184E-6	DEFECT	1.620336744504841E-6	IMPLEMENTATION	4.906054115061069E-7	DOCUMENTATION	4.471931223843236E-8	TEST
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9996937699040161	WITHOUT_CLASSIFICATION	3.0500512725590873E-4	DESIGN	8.060823852451996E-7	DEFECT	3.006294952569902E-7	DOCUMENTATION	9.639693913857214E-8	TEST	2.1859908260649702E-8	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9985010205913947	WITHOUT_CLASSIFICATION	9.659151426854554E-4	DESIGN	5.314882206417079E-4	DEFECT	7.431323778107949E-7	DOCUMENTATION	4.867835594484543E-7	TEST	3.4612934099425413E-7	IMPLEMENTATION
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9997265661158953	WITHOUT_CLASSIFICATION	2.6367006525257643E-4	DESIGN	9.320627541127363E-6	DEFECT	3.00271796505182E-7	IMPLEMENTATION	9.870252562832505E-8	DOCUMENTATION	4.42169888178577E-8	TEST
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999625851125502	WITHOUT_CLASSIFICATION	3.584539072570368E-5	DESIGN	1.2945617662223553E-6	DEFECT	2.307843954131113E-7	TEST	4.174766535318298E-8	IMPLEMENTATION	2.402897031601334E-9	DOCUMENTATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9998173523805723	WITHOUT_CLASSIFICATION	1.7707768649824352E-4	DESIGN	4.595620348252216E-6	DEFECT	5.62146732420571E-7	DOCUMENTATION	2.8829997571534047E-7	TEST	1.2386587313782726E-7	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999878366913174	WITHOUT_CLASSIFICATION	8.827427328531592E-6	DESIGN	2.5774077828437737E-6	DEFECT	3.675856392435455E-7	IMPLEMENTATION	2.849686903760943E-7	DOCUMENTATION	1.0591924150078058E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
//Schema export:	WITHOUT_CLASSIFICATION	0.9999104399157556	WITHOUT_CLASSIFICATION	8.421239366985636E-5	DESIGN	3.5667880408476887E-6	DEFECT	1.1910643344602874E-6	IMPLEMENTATION	3.5929344427276386E-7	DOCUMENTATION	2.3054475494612917E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9996522590726953	WITHOUT_CLASSIFICATION	3.2938065127999103E-4	DESIGN	1.2077894284083396E-5	DEFECT	5.8447231979046645E-6	IMPLEMENTATION	2.718155117503122E-7	DOCUMENTATION	1.6584303114528742E-7	TEST
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9975617045197329	WITHOUT_CLASSIFICATION	0.0017913381577824878	DESIGN	6.45964603765773E-4	DEFECT	7.35681984528937E-7	TEST	2.5113478945304103E-7	DOCUMENTATION	5.901944703474091E-9	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999999472131627	WITHOUT_CLASSIFICATION	3.888000382226759E-8	DEFECT	8.593138859488053E-9	IMPLEMENTATION	4.6312214525107675E-9	DESIGN	5.396450097587344E-10	DOCUMENTATION	1.4282806227234027E-10	TEST
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999647990319092	WITHOUT_CLASSIFICATION	3.4853010498235094E-5	DESIGN	3.0679457937602974E-7	DEFECT	1.6516794615592757E-8	IMPLEMENTATION	1.4877277801365302E-8	TEST	9.768940712256976E-9	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999651458502364	WITHOUT_CLASSIFICATION	3.152821155390326E-5	DESIGN	1.8337395904179004E-6	DEFECT	1.4142879109089597E-6	IMPLEMENTATION	4.1691756460083536E-8	TEST	3.621895185507275E-8	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.99999841479491	WITHOUT_CLASSIFICATION	1.5431885381739546E-6	DEFECT	3.2072965350329714E-8	DESIGN	9.599048053531267E-9	IMPLEMENTATION	2.6242432751090514E-10	TEST	8.211418534768028E-11	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999930581011474	WITHOUT_CLASSIFICATION	4.358740470161348E-6	DESIGN	2.571888489655683E-6	DEFECT	8.519331715700345E-9	TEST	2.689766845148017E-9	DOCUMENTATION	6.07942573646698E-11	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9839631381386261	WITHOUT_CLASSIFICATION	0.015786656772736017	DESIGN	2.3159961114625974E-4	DEFECT	1.64676177444245E-5	IMPLEMENTATION	1.8451525710782173E-6	DOCUMENTATION	2.9270717608083125E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9946684122401497	WITHOUT_CLASSIFICATION	0.0031018723146848323	IMPLEMENTATION	0.002049879276577623	DESIGN	1.7640657162358589E-4	DEFECT	2.350533646642103E-6	TEST	1.0790633176389252E-6	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999713652279397	WITHOUT_CLASSIFICATION	2.4878922887620825E-5	DESIGN	2.6553038877083915E-6	DEFECT	8.300569103053737E-7	IMPLEMENTATION	1.7227654808051146E-7	DOCUMENTATION	9.821182654703501E-8	TEST
// found	WITHOUT_CLASSIFICATION	0.9999713652279397	WITHOUT_CLASSIFICATION	2.4878922887620825E-5	DESIGN	2.6553038877083915E-6	DEFECT	8.300569103053737E-7	IMPLEMENTATION	1.7227654808051146E-7	DOCUMENTATION	9.821182654703501E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999483177890652	WITHOUT_CLASSIFICATION	4.3155583693263925E-5	DESIGN	6.049482817863264E-6	DEFECT	1.2695653228665495E-6	DOCUMENTATION	7.527144481638401E-7	IMPLEMENTATION	4.548646525680726E-7	TEST
//<String, String>	WITHOUT_CLASSIFICATION	0.9999483177890652	WITHOUT_CLASSIFICATION	4.3155583693263925E-5	DESIGN	6.049482817863264E-6	DEFECT	1.2695653228665495E-6	DOCUMENTATION	7.527144481638401E-7	IMPLEMENTATION	4.548646525680726E-7	TEST
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.896281891642421	WITHOUT_CLASSIFICATION	0.10371445454221477	DESIGN	1.9040833310897102E-6	IMPLEMENTATION	1.13873737375216E-6	DEFECT	4.4421567331717934E-7	DOCUMENTATION	1.6677898611652414E-7	TEST
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999992456818664	WITHOUT_CLASSIFICATION	3.623668345398523E-7	DEFECT	3.443145385224002E-7	DESIGN	2.0544453675518163E-8	IMPLEMENTATION	1.6056801006379643E-8	DOCUMENTATION	1.103550591080765E-8	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9994012540574982	WITHOUT_CLASSIFICATION	5.91875507100955E-4	DESIGN	4.400931031142452E-6	IMPLEMENTATION	1.3080585165932942E-6	TEST	5.84076527566442E-7	DOCUMENTATION	5.773693255654473E-7	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999996029213313	WITHOUT_CLASSIFICATION	2.1644600433933325E-7	IMPLEMENTATION	8.908193106284647E-8	DESIGN	5.824820883894109E-8	TEST	3.047124643091599E-8	DEFECT	2.831278023050271E-9	DOCUMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999632793143085	WITHOUT_CLASSIFICATION	3.5204225363255595E-5	DESIGN	1.2781752745139046E-6	DEFECT	1.8553269079296094E-7	DOCUMENTATION	3.4167478909322186E-8	IMPLEMENTATION	1.8584883975969715E-8	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9994012540574982	WITHOUT_CLASSIFICATION	5.91875507100955E-4	DESIGN	4.400931031142452E-6	IMPLEMENTATION	1.3080585165932942E-6	TEST	5.84076527566442E-7	DOCUMENTATION	5.773693255654473E-7	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999996029213313	WITHOUT_CLASSIFICATION	2.1644600433933325E-7	IMPLEMENTATION	8.908193106284647E-8	DESIGN	5.824820883894109E-8	TEST	3.047124643091599E-8	DEFECT	2.831278023050271E-9	DOCUMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999945211371793	WITHOUT_CLASSIFICATION	3.7368112305513768E-6	IMPLEMENTATION	9.103816126086268E-7	DESIGN	4.86326311223248E-7	TEST	2.5139693133486105E-7	DOCUMENTATION	9.394673497808963E-8	DEFECT
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999997050507309	WITHOUT_CLASSIFICATION	2.910437979422689E-7	DESIGN	2.573546869473257E-9	TEST	7.560981099211837E-10	DEFECT	5.755530045704493E-10	DOCUMENTATION	2.731655106147793E-13	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999613079338824	WITHOUT_CLASSIFICATION	3.839738560693332E-5	DESIGN	2.0121014801194512E-7	DEFECT	8.986190831711246E-8	IMPLEMENTATION	2.1190484081757927E-9	DOCUMENTATION	1.489405893563224E-9	TEST
// the element has changed	WITHOUT_CLASSIFICATION	0.9999730504494995	WITHOUT_CLASSIFICATION	2.2817637104120513E-5	DESIGN	3.725089585062559E-6	IMPLEMENTATION	3.086507580322809E-7	DEFECT	7.237902162008656E-8	TEST	2.5794031616860273E-8	DOCUMENTATION
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9914902724228095	WITHOUT_CLASSIFICATION	0.008086411394558717	DESIGN	3.8674781464478696E-4	IMPLEMENTATION	2.1208096094642837E-5	DEFECT	1.4863817895809473E-5	TEST	4.964539965381395E-7	DOCUMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.8057764944474729	WITHOUT_CLASSIFICATION	0.19421618461959686	DESIGN	2.7234593010578883E-6	IMPLEMENTATION	1.9338218503975755E-6	DEFECT	1.6671990843898069E-6	DOCUMENTATION	9.964526945081847E-7	TEST
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999994324217484	WITHOUT_CLASSIFICATION	3.4335740210898585E-7	DESIGN	1.6849114259526821E-7	IMPLEMENTATION	3.142378867855062E-8	DEFECT	2.186037905793309E-8	DOCUMENTATION	2.445539117061857E-9	TEST
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999943595951232	WITHOUT_CLASSIFICATION	4.4418346308423235E-6	DESIGN	8.451372082165459E-7	IMPLEMENTATION	2.3122708409349126E-7	DOCUMENTATION	9.601263908561427E-8	DEFECT	2.6193314559551344E-8	TEST
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9992430038836578	WITHOUT_CLASSIFICATION	6.989950675064273E-4	DESIGN	2.4867223460536E-5	IMPLEMENTATION	2.408269151799072E-5	DEFECT	6.338673529511056E-6	TEST	2.7124603277603557E-6	DOCUMENTATION
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999995939207	WITHOUT_CLASSIFICATION	3.9992934657041466E-10	DESIGN	3.8612489260745316E-12	TEST	9.82094295593329E-13	DOCUMENTATION	9.61480729181008E-13	DEFECT	3.4511849022221563E-13	IMPLEMENTATION
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999989240206351	WITHOUT_CLASSIFICATION	8.22845742347615E-7	DEFECT	1.7068385241161252E-7	IMPLEMENTATION	6.073723445327798E-8	DESIGN	1.590701114734834E-8	TEST	5.805524475768065E-9	DOCUMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999371663746376	WITHOUT_CLASSIFICATION	6.272855587598255E-5	DESIGN	9.380798493696844E-8	DEFECT	5.944403154203671E-9	TEST	2.7759076242459598E-9	DOCUMENTATION	2.541190822065398E-9	IMPLEMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.99999964736637	WITHOUT_CLASSIFICATION	3.319327645908098E-7	DESIGN	1.0253764193296822E-8	TEST	5.694098892451715E-9	IMPLEMENTATION	4.096744102714558E-9	DEFECT	6.562581887778292E-10	DOCUMENTATION
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.999953847761775	WITHOUT_CLASSIFICATION	2.7921402583839426E-5	IMPLEMENTATION	1.2397657305059022E-5	DEFECT	3.7814154580762786E-6	DESIGN	1.9110712979059015E-6	TEST	1.4069157997538942E-7	DOCUMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999632793143085	WITHOUT_CLASSIFICATION	3.5204225363255595E-5	DESIGN	1.2781752745139046E-6	DEFECT	1.8553269079296094E-7	DOCUMENTATION	3.4167478909322186E-8	IMPLEMENTATION	1.8584883975969715E-8	TEST
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999725044307596	WITHOUT_CLASSIFICATION	1.3434166094308136E-5	IMPLEMENTATION	8.708868211931912E-6	DEFECT	4.236638549374866E-6	DESIGN	1.0326872563475764E-6	TEST	8.320912852012837E-8	DOCUMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999506404438906	WITHOUT_CLASSIFICATION	2.602581652634721E-5	DESIGN	1.4823834686918421E-5	TEST	7.068873194068272E-6	DEFECT	1.3082429258532442E-6	DOCUMENTATION	1.3278877624467827E-7	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999506404438906	WITHOUT_CLASSIFICATION	2.602581652634721E-5	DESIGN	1.4823834686918421E-5	TEST	7.068873194068272E-6	DEFECT	1.3082429258532442E-6	DOCUMENTATION	1.3278877624467827E-7	IMPLEMENTATION
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9951104614086492	WITHOUT_CLASSIFICATION	0.004866515049520345	DESIGN	1.7880383517820178E-5	DEFECT	4.240715716975548E-6	IMPLEMENTATION	7.328968498117103E-7	DOCUMENTATION	1.6954574581073296E-7	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999945211371793	WITHOUT_CLASSIFICATION	3.7368112305513768E-6	IMPLEMENTATION	9.103816126086268E-7	DESIGN	4.86326311223248E-7	TEST	2.5139693133486105E-7	DOCUMENTATION	9.394673497808963E-8	DEFECT
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.998359868403854	WITHOUT_CLASSIFICATION	0.0011483028551427603	DEFECT	2.8030732678191526E-4	DESIGN	2.0811721765772758E-4	IMPLEMENTATION	1.9891834718456983E-6	TEST	1.4150130918021412E-6	DOCUMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9986261844496267	DESIGN	0.0013726183188019147	WITHOUT_CLASSIFICATION	7.411596650747884E-7	DEFECT	4.403028517755159E-7	TEST	1.1003814569533862E-8	IMPLEMENTATION	4.76523993897285E-9	DOCUMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9017136262963072	WITHOUT_CLASSIFICATION	0.09709613517001062	DESIGN	0.001014966846543242	DEFECT	1.5801918046066087E-4	IMPLEMENTATION	9.266503586736492E-6	TEST	7.986003091398226E-6	DOCUMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999996760929908	WITHOUT_CLASSIFICATION	2.3345465618068737E-7	DEFECT	8.528594315988692E-8	DESIGN	4.2291271340470495E-9	TEST	8.912077287236061E-10	DOCUMENTATION	4.607504444976642E-11	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9970673816533543	WITHOUT_CLASSIFICATION	0.0029090737494214132	DESIGN	1.791793513642869E-5	TEST	4.520910297123145E-6	DEFECT	8.911533125942454E-7	IMPLEMENTATION	2.1459847823250055E-7	DOCUMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999945211371793	WITHOUT_CLASSIFICATION	3.7368112305513768E-6	IMPLEMENTATION	9.103816126086268E-7	DESIGN	4.86326311223248E-7	TEST	2.5139693133486105E-7	DOCUMENTATION	9.394673497808963E-8	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999996760929908	WITHOUT_CLASSIFICATION	2.3345465618068737E-7	DEFECT	8.528594315988692E-8	DESIGN	4.2291271340470495E-9	TEST	8.912077287236061E-10	DOCUMENTATION	4.607504444976642E-11	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9970673816533543	WITHOUT_CLASSIFICATION	0.0029090737494214132	DESIGN	1.791793513642869E-5	TEST	4.520910297123145E-6	DEFECT	8.911533125942454E-7	IMPLEMENTATION	2.1459847823250055E-7	DOCUMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9465173487950136	WITHOUT_CLASSIFICATION	0.05342163024810448	DESIGN	3.6340993789710186E-5	IMPLEMENTATION	1.3794361828606004E-5	DOCUMENTATION	7.3806767651813716E-6	TEST	3.5049244983064453E-6	DEFECT
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999991667341663	WITHOUT_CLASSIFICATION	6.483355105257995E-7	IMPLEMENTATION	6.22405864807164E-8	TEST	5.6389817670281724E-8	DEFECT	5.4517707296301106E-8	DESIGN	1.1782211598017697E-8	DOCUMENTATION
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999994380788481	WITHOUT_CLASSIFICATION	5.348026632438815E-7	DEFECT	1.8180162876837754E-8	DESIGN	3.86288393367457E-9	DOCUMENTATION	3.6281819373762374E-9	IMPLEMENTATION	1.44725994639792E-9	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999945211371793	WITHOUT_CLASSIFICATION	3.7368112305513768E-6	IMPLEMENTATION	9.103816126086268E-7	DESIGN	4.86326311223248E-7	TEST	2.5139693133486105E-7	DOCUMENTATION	9.394673497808963E-8	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999945211371793	WITHOUT_CLASSIFICATION	3.7368112305513768E-6	IMPLEMENTATION	9.103816126086268E-7	DESIGN	4.86326311223248E-7	TEST	2.5139693133486105E-7	DOCUMENTATION	9.394673497808963E-8	DEFECT
// from Map	WITHOUT_CLASSIFICATION	0.9999967049086351	WITHOUT_CLASSIFICATION	1.9444913535674884E-6	DESIGN	6.409052452236692E-7	DEFECT	6.403358320881516E-7	IMPLEMENTATION	4.1300004481339774E-8	TEST	2.805892942744221E-8	DOCUMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999946296138295	WITHOUT_CLASSIFICATION	3.12056788031006E-6	DESIGN	1.5513310023299393E-6	DEFECT	5.57406243888501E-7	IMPLEMENTATION	9.84828741897528E-8	TEST	4.259816984327796E-8	DOCUMENTATION
//inject the data	WITHOUT_CLASSIFICATION	0.999867044342774	WITHOUT_CLASSIFICATION	1.0119327355619768E-4	DESIGN	2.5452519645406135E-5	IMPLEMENTATION	3.603716550673222E-6	DEFECT	2.155390113292255E-6	DOCUMENTATION	5.507573603095418E-7	TEST
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999469995152481	WITHOUT_CLASSIFICATION	5.237151962492712E-5	DESIGN	6.090680576254608E-7	DEFECT	9.571214372470336E-9	DOCUMENTATION	6.642241481613806E-9	IMPLEMENTATION	3.6836134476321683E-9	TEST
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999996713789637	WITHOUT_CLASSIFICATION	1.1371270969038227E-7	IMPLEMENTATION	1.0539088832246638E-7	DEFECT	8.26081959287956E-8	DESIGN	2.2588599205772486E-8	DOCUMENTATION	4.3206431306941586E-9	TEST
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999985782877	WITHOUT_CLASSIFICATION	9.8381090224694E-10	DESIGN	3.4181895621944373E-10	DEFECT	6.102000316863629E-11	TEST	2.306099473809419E-11	DOCUMENTATION	1.200137274861293E-11	IMPLEMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999984801413943	WITHOUT_CLASSIFICATION	1.4731978553068871E-6	IMPLEMENTATION	2.2484435800129998E-8	DESIGN	2.0342710840771705E-8	TEST	3.7047179959796146E-9	DEFECT	1.28885731320673E-10	DOCUMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9989539910622499	WITHOUT_CLASSIFICATION	0.0010458808077103703	DESIGN	5.573651147816284E-8	DEFECT	2.7866073299392378E-8	DOCUMENTATION	2.698960095356792E-8	IMPLEMENTATION	1.7537853964452652E-8	TEST
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999980319541929	WITHOUT_CLASSIFICATION	1.9182068928885127E-6	DESIGN	3.3798464719281564E-8	DEFECT	9.359602459697358E-9	IMPLEMENTATION	6.5180216787080066E-9	DOCUMENTATION	1.6282546842743104E-10	TEST
// then bind it	WITHOUT_CLASSIFICATION	0.9998927332380121	WITHOUT_CLASSIFICATION	7.375814770493808E-5	DESIGN	1.5224733652996734E-5	IMPLEMENTATION	1.5159893881295706E-5	DEFECT	1.671757977154993E-6	TEST	1.4522287714064273E-6	DOCUMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.999994073372354	WITHOUT_CLASSIFICATION	4.565830598178984E-6	DESIGN	1.1738926860065413E-6	DEFECT	1.1187068569660587E-7	IMPLEMENTATION	7.01026011089635E-8	DOCUMENTATION	4.9310750470055784E-9	TEST
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999942817950259	WITHOUT_CLASSIFICATION	5.139664154832509E-6	DESIGN	5.555451327965869E-7	IMPLEMENTATION	1.5743865656691762E-8	DEFECT	5.955889814715247E-9	DOCUMENTATION	1.2959309576542835E-9	TEST
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999984211564054	WITHOUT_CLASSIFICATION	1.5711183238872987E-6	DESIGN	2.9285935978213668E-9	DEFECT	2.8686158643387974E-9	IMPLEMENTATION	1.4000544174516164E-9	TEST	5.280067579559489E-10	DOCUMENTATION
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9990906785528004	WITHOUT_CLASSIFICATION	9.073513275550813E-4	DESIGN	1.921632042915916E-6	IMPLEMENTATION	2.648031583274796E-8	TEST	1.2173437695685732E-8	DOCUMENTATION	9.833848166609283E-9	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999290330634	WITHOUT_CLASSIFICATION	5.555625155381854E-7	DEFECT	1.0321262439399053E-7	DESIGN	3.1639393945554955E-8	IMPLEMENTATION	1.5580391354182684E-8	DOCUMENTATION	3.6744407541781933E-9	TEST
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999609599637261	WITHOUT_CLASSIFICATION	3.899304824947407E-5	DESIGN	3.2001288400946886E-8	DEFECT	8.100952406750215E-9	TEST	6.6936288523619375E-9	IMPLEMENTATION	1.9215472605434E-10	DOCUMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.996458867854498	WITHOUT_CLASSIFICATION	0.00353854437369367	DESIGN	2.0484949580554456E-6	DEFECT	3.247348687650684E-7	DOCUMENTATION	1.2046431599307148E-7	TEST	9.40776656129724E-8	IMPLEMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9967668109270805	WITHOUT_CLASSIFICATION	0.0030246223058639095	DESIGN	1.6906158432114125E-4	DEFECT	2.3844682578263663E-5	DOCUMENTATION	1.546410003796303E-5	TEST	1.9640011810729463E-7	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9288980594817717	WITHOUT_CLASSIFICATION	0.07014058397445608	DESIGN	7.35638343976239E-4	DEFECT	1.3024790508986083E-4	DOCUMENTATION	9.168485584931553E-5	IMPLEMENTATION	3.785438856779739E-6	TEST
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999997033638456	WITHOUT_CLASSIFICATION	1.0245624301231326E-7	DESIGN	9.805540493145493E-8	DEFECT	8.10477884469814E-8	IMPLEMENTATION	1.2094153331043043E-8	TEST	2.98256478628401E-9	DOCUMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999841731350059	WITHOUT_CLASSIFICATION	1.270134335750827E-5	DESIGN	1.8107264008459675E-6	IMPLEMENTATION	8.424021680511973E-7	DEFECT	3.1267080982538223E-7	TEST	1.597222578424109E-7	DOCUMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9994666678308907	WITHOUT_CLASSIFICATION	2.6269391824142353E-4	IMPLEMENTATION	2.521819535610423E-4	DESIGN	1.1022463616086115E-5	DEFECT	3.765518634161296E-6	DOCUMENTATION	3.668315056651563E-6	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9994666678308907	WITHOUT_CLASSIFICATION	2.6269391824142353E-4	IMPLEMENTATION	2.521819535610423E-4	DESIGN	1.1022463616086115E-5	DEFECT	3.765518634161296E-6	DOCUMENTATION	3.668315056651563E-6	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.996458867854498	WITHOUT_CLASSIFICATION	0.00353854437369367	DESIGN	2.0484949580554456E-6	DEFECT	3.247348687650684E-7	DOCUMENTATION	1.2046431599307148E-7	TEST	9.40776656129724E-8	IMPLEMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999186391511942	WITHOUT_CLASSIFICATION	3.584491263729898E-5	DESIGN	2.8297973523284983E-5	TEST	1.3746144365441471E-5	IMPLEMENTATION	3.40970716227087E-6	DEFECT	6.21111176007924E-8	DOCUMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.8520014259052049	WITHOUT_CLASSIFICATION	0.14798313359180096	DESIGN	1.3546968595374405E-5	TEST	1.4157891400699586E-6	IMPLEMENTATION	4.7111826038555E-7	DEFECT	6.6269982585553535E-9	DOCUMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9894304586211129	WITHOUT_CLASSIFICATION	0.008301749824252512	DESIGN	0.001998318297349667	IMPLEMENTATION	2.289329266283878E-4	TEST	3.209323740738215E-5	DEFECT	8.447093249067934E-6	DOCUMENTATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.99999954953471	WITHOUT_CLASSIFICATION	2.2403155300965368E-7	DESIGN	9.51042724691695E-8	TEST	5.334747990706087E-8	IMPLEMENTATION	5.161072451731667E-8	DEFECT	2.637126031013811E-8	DOCUMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999539995866601	WITHOUT_CLASSIFICATION	3.70594034079784E-5	DESIGN	7.507032333667471E-6	DEFECT	6.101814269002363E-7	TEST	4.5729059496766206E-7	DOCUMENTATION	3.665055761602644E-7	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.999998619738036	WITHOUT_CLASSIFICATION	1.2006629259881078E-6	DESIGN	6.387893623369097E-8	DOCUMENTATION	6.341725864602012E-8	DEFECT	4.1407075814843117E-8	IMPLEMENTATION	1.0895767285620994E-8	TEST
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9948081809343327	WITHOUT_CLASSIFICATION	0.005190723728068133	DESIGN	9.197198848112593E-7	DEFECT	1.0572570862713646E-7	DOCUMENTATION	4.62746751603559E-8	IMPLEMENTATION	2.361733058678787E-8	TEST
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999812977233015	WITHOUT_CLASSIFICATION	1.0695655822162227E-5	IMPLEMENTATION	6.999132718350835E-6	DESIGN	6.316129974808121E-7	DEFECT	3.3480248549921096E-7	TEST	4.107267504754675E-8	DOCUMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999999714716	WITHOUT_CLASSIFICATION	2.665499695714004E-11	DESIGN	1.4270237305242872E-12	DOCUMENTATION	3.6610785942355084E-13	IMPLEMENTATION	4.662890431670708E-14	TEST	3.37485597307141E-14	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954025454185	WITHOUT_CLASSIFICATION	3.075388145388494E-6	IMPLEMENTATION	1.0991960410941061E-6	DESIGN	2.1572621027518303E-7	DOCUMENTATION	1.972293260876938E-7	DEFECT	9.914858469792526E-9	TEST
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.999997205723409	WITHOUT_CLASSIFICATION	2.746017977241551E-6	DESIGN	3.123001294986245E-8	IMPLEMENTATION	8.23484930559069E-9	DOCUMENTATION	5.879116536170404E-9	DEFECT	2.9146349468298343E-9	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999564607580024	WITHOUT_CLASSIFICATION	3.870201502324696E-5	DEFECT	3.487738939377237E-6	DESIGN	1.1906595595071477E-6	IMPLEMENTATION	9.912418586378564E-8	DOCUMENTATION	5.970428972054232E-8	TEST
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.999503696658522	WITHOUT_CLASSIFICATION	4.8320374017973513E-4	DEFECT	9.672965650877934E-6	DESIGN	2.85206722444281E-6	TEST	3.9883044090459237E-7	DOCUMENTATION	1.7573798177806498E-7	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999778778126135	WITHOUT_CLASSIFICATION	9.709828057072216E-6	DESIGN	6.953479917291884E-6	IMPLEMENTATION	3.5197817623452103E-6	DEFECT	1.4623751200824768E-6	TEST	4.7672252966613854E-7	DOCUMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.999999993844701	WITHOUT_CLASSIFICATION	4.573306023527905E-9	DESIGN	1.5543686397585096E-9	IMPLEMENTATION	2.1849540990207514E-11	DEFECT	4.919363522812355E-12	DOCUMENTATION	8.554490535114791E-13	TEST
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995288232844	WITHOUT_CLASSIFICATION	4.3895924791342633E-7	IMPLEMENTATION	2.294533461895025E-8	DEFECT	8.161322143935643E-9	DESIGN	8.621155014855097E-10	DOCUMENTATION	2.486954110381426E-10	TEST
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9990930579393997	WITHOUT_CLASSIFICATION	8.604769402510225E-4	DESIGN	4.61683759853462E-5	DEFECT	1.1320248093435529E-7	DOCUMENTATION	1.0487223258660398E-7	IMPLEMENTATION	7.866965056782768E-8	TEST
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999766697600453	WITHOUT_CLASSIFICATION	2.3294499875516283E-5	DESIGN	3.526838159744534E-8	DEFECT	3.0630387206325076E-10	TEST	1.0402274316283763E-10	DOCUMENTATION	6.137109052776863E-11	IMPLEMENTATION
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999836572684118	WITHOUT_CLASSIFICATION	6.453858158609879E-6	DESIGN	4.750756726287674E-6	DEFECT	3.274614644490813E-6	DOCUMENTATION	1.8205070480405283E-6	IMPLEMENTATION	4.299501074126638E-8	TEST
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999979292616616	WITHOUT_CLASSIFICATION	1.8145196067389327E-5	DESIGN	2.330414063518668E-6	IMPLEMENTATION	1.7451681377283282E-7	DEFECT	4.5337292111128444E-8	TEST	1.1919147296464858E-8	DOCUMENTATION
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999809671096833	WITHOUT_CLASSIFICATION	1.0979917808782103E-5	DESIGN	7.64364572918596E-6	IMPLEMENTATION	3.974388674867233E-7	DEFECT	9.536191701735056E-9	DOCUMENTATION	2.3517194542193226E-9	TEST
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999449198321058	WITHOUT_CLASSIFICATION	4.701540152486322E-5	IMPLEMENTATION	7.946716159610201E-6	DESIGN	9.3457383718738E-8	DOCUMENTATION	1.6825919569352937E-8	DEFECT	7.766906502400052E-9	TEST
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9959497283416118	WITHOUT_CLASSIFICATION	0.004049789123359226	DESIGN	4.2687161525639893E-7	IMPLEMENTATION	4.562066471330371E-8	DOCUMENTATION	5.970508499712737E-9	TEST	4.072240457558475E-9	DEFECT
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999709151342353	WITHOUT_CLASSIFICATION	2.191863381554376E-5	IMPLEMENTATION	6.219926920815399E-6	DEFECT	8.333956078708521E-7	DESIGN	7.048740519362924E-8	DOCUMENTATION	4.2422015324483925E-8	TEST
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999041506594245	WITHOUT_CLASSIFICATION	6.70115440459053E-5	IMPLEMENTATION	2.6675931922763552E-5	DESIGN	1.1248465396706228E-6	DEFECT	7.891665886508749E-7	TEST	2.4785147849425394E-7	DOCUMENTATION
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948076731644	WITHOUT_CLASSIFICATION	4.6994046583496535E-6	IMPLEMENTATION	3.332428658753192E-7	DESIGN	1.1613295960153577E-7	DEFECT	2.8288787610939048E-8	DOCUMENTATION	1.5257564161471512E-8	TEST
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999095440647647	WITHOUT_CLASSIFICATION	6.550968956858582E-5	DESIGN	2.2684084259249248E-5	IMPLEMENTATION	1.830426794859216E-6	DEFECT	3.3026669666442353E-7	DOCUMENTATION	1.0146791590003533E-7	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999684972370763	WITHOUT_CLASSIFICATION	2.967193027602537E-5	IMPLEMENTATION	1.5797841220966752E-6	DESIGN	1.0421130921518291E-7	TEST	8.638809888559203E-8	DEFECT	6.044911757162618E-8	DOCUMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999584308438665	WITHOUT_CLASSIFICATION	2.8212575385320627E-5	DESIGN	1.2773573657034003E-5	IMPLEMENTATION	2.6831186557956375E-7	DEFECT	1.7305363739978998E-7	DOCUMENTATION	1.4164158824624172E-7	TEST
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999306015419475	WITHOUT_CLASSIFICATION	4.8782327261024156E-5	IMPLEMENTATION	2.0006165350345444E-5	DESIGN	2.858735948584513E-7	DEFECT	2.1090852282219623E-7	DOCUMENTATION	1.131833233877795E-7	TEST
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990022795758	WITHOUT_CLASSIFICATION	3.862894991337833E-7	IMPLEMENTATION	3.841106721360227E-7	DESIGN	2.1340598366691003E-7	DEFECT	8.146264779050259E-9	TEST	5.7680043256624915E-9	DOCUMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999352428177157	WITHOUT_CLASSIFICATION	5.469701482639207E-5	DESIGN	9.44598582449873E-6	IMPLEMENTATION	4.4450753098329703E-7	DEFECT	1.488917041562616E-7	DOCUMENTATION	2.0782398362358278E-8	TEST
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9976151662838989	WITHOUT_CLASSIFICATION	0.0023225547509333998	DESIGN	4.0359177772360856E-5	IMPLEMENTATION	1.8802379862506525E-5	DEFECT	2.8873494952694847E-6	DOCUMENTATION	2.3005803766459156E-7	TEST
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956308189638	WITHOUT_CLASSIFICATION	3.92312495441553E-6	IMPLEMENTATION	3.926119705488076E-7	DESIGN	3.5954806071404644E-8	DEFECT	1.2695699031261349E-8	TEST	4.7936061299600996E-9	DOCUMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999813706335842	WITHOUT_CLASSIFICATION	1.7734067873088287E-5	DESIGN	8.491492493825214E-7	IMPLEMENTATION	3.608276192616509E-8	TEST	6.678860622687432E-9	DEFECT	3.3876709494161553E-9	DOCUMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999144319026178	WITHOUT_CLASSIFICATION	4.999193743578746E-5	DESIGN	3.52206500989079E-5	IMPLEMENTATION	2.6608663522735713E-7	DEFECT	6.305891399075031E-8	DOCUMENTATION	2.6364298296239003E-8	TEST
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999770862826692	WITHOUT_CLASSIFICATION	2.1643752664160214E-5	IMPLEMENTATION	6.774593186276745E-7	DEFECT	2.759448230286346E-7	TEST	1.9655760981612783E-7	DOCUMENTATION	1.2000291515962746E-7	DESIGN
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999011846482696	WITHOUT_CLASSIFICATION	8.48969796851608E-5	DESIGN	1.1158087327260012E-5	IMPLEMENTATION	2.334737564146961E-6	DEFECT	3.419817861680496E-7	DOCUMENTATION	8.356536759121219E-8	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999860568953524	WITHOUT_CLASSIFICATION	1.0369919308267395E-5	IMPLEMENTATION	3.483013242114909E-6	DESIGN	4.121008970863697E-8	DEFECT	2.702535695602663E-8	DOCUMENTATION	2.1936650568209865E-8	TEST
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999496007732903	WITHOUT_CLASSIFICATION	4.5030322619648865E-5	IMPLEMENTATION	4.9589069284351265E-6	DESIGN	2.2582143038738352E-7	DEFECT	1.0753064097803949E-7	TEST	7.664509029594208E-8	DOCUMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999948164075185	WITHOUT_CLASSIFICATION	3.9806702740406365E-5	IMPLEMENTATION	1.1183191760835893E-5	DESIGN	4.170071239184538E-7	DEFECT	2.5521548072004036E-7	DOCUMENTATION	1.738077091032949E-7	TEST
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999992401123152	WITHOUT_CLASSIFICATION	5.604800272988351E-7	DESIGN	8.308718287544101E-8	IMPLEMENTATION	7.97555394016264E-8	DEFECT	2.1049808629744073E-8	TEST	1.5515126501192006E-8	DOCUMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945360884357	WITHOUT_CLASSIFICATION	4.574683539103903E-6	IMPLEMENTATION	5.908739397461092E-7	DEFECT	2.038845014458494E-7	DESIGN	8.650867303666447E-8	DOCUMENTATION	7.960910931379364E-9	TEST
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9298557968404082	DESIGN	0.054583341125434844	WITHOUT_CLASSIFICATION	0.007787612245537702	IMPLEMENTATION	0.007652072486495437	DEFECT	1.1929949837811471E-4	TEST	1.8778037457611688E-6	DOCUMENTATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999978454068366	WITHOUT_CLASSIFICATION	1.7199604650157877E-5	DESIGN	4.130391164361228E-6	DEFECT	1.1073246227832413E-7	IMPLEMENTATION	9.971963434289703E-8	DOCUMENTATION	5.483722746138642E-9	TEST
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999991915705	WITHOUT_CLASSIFICATION	7.515687818127794E-10	DESIGN	4.0617797636121516E-11	DOCUMENTATION	1.1744534691584966E-11	IMPLEMENTATION	4.064437207383318E-12	TEST	4.3393799350173896E-13	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9996760484181435	WITHOUT_CLASSIFICATION	3.2256720880045723E-4	DESIGN	1.3088240092642258E-6	TEST	5.000906519660364E-8	DEFECT	2.1324432591856703E-8	DOCUMENTATION	4.215548945470538E-9	IMPLEMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.9999738751316747	WITHOUT_CLASSIFICATION	1.447097810712098E-5	DESIGN	1.0309526176571451E-5	IMPLEMENTATION	7.099541276669191E-7	DOCUMENTATION	4.3376410098753876E-7	DEFECT	2.0064581279765785E-7	TEST
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999969906573011	WITHOUT_CLASSIFICATION	1.915516549642804E-6	IMPLEMENTATION	8.969765711189041E-7	DESIGN	1.2364308977392762E-7	DEFECT	4.5727378936914384E-8	DOCUMENTATION	2.7479109368865417E-8	TEST
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.945186174627237	DESIGN	0.05481012080651593	WITHOUT_CLASSIFICATION	2.981420350872029E-6	DEFECT	4.312110996652704E-7	DOCUMENTATION	2.1844724724678092E-7	TEST	7.348754929618836E-8	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999997034526172	WITHOUT_CLASSIFICATION	1.8296594317486546E-7	DESIGN	4.825090345946152E-8	DEFECT	4.4607420928820747E-8	IMPLEMENTATION	1.2451995898259106E-8	DOCUMENTATION	8.271119454202373E-9	TEST
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999955916815433	WITHOUT_CLASSIFICATION	2.905436867687496E-6	IMPLEMENTATION	8.990506420760166E-7	DEFECT	4.6266601005749726E-7	DESIGN	8.604259456712201E-8	DOCUMENTATION	5.5122342486268266E-8	TEST
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999983830175614	WITHOUT_CLASSIFICATION	7.059670776488647E-7	IMPLEMENTATION	5.3742515145328E-7	DESIGN	2.3501591824007297E-7	DEFECT	7.480867661847596E-8	TEST	6.376561467825208E-8	DOCUMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954025454185	WITHOUT_CLASSIFICATION	3.075388145388494E-6	IMPLEMENTATION	1.0991960410941061E-6	DESIGN	2.1572621027518303E-7	DOCUMENTATION	1.972293260876938E-7	DEFECT	9.914858469792526E-9	TEST
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9998535219541844	WITHOUT_CLASSIFICATION	1.2722889865746903E-4	DESIGN	1.0494947802868485E-5	IMPLEMENTATION	5.231128653428061E-6	DEFECT	2.2213838030438905E-6	TEST	1.301686898855675E-6	DOCUMENTATION
// ALL OTHER	WITHOUT_CLASSIFICATION	0.999996877147481	WITHOUT_CLASSIFICATION	1.7261965326047299E-6	DESIGN	8.288089897967431E-7	DEFECT	4.377425730300761E-7	IMPLEMENTATION	8.562294927678265E-8	DOCUMENTATION	4.448147434784158E-8	TEST
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999473096714665	WITHOUT_CLASSIFICATION	5.264142540809299E-5	DESIGN	3.396460846821096E-8	TEST	1.2362439498707894E-8	DEFECT	1.7942172052692486E-9	IMPLEMENTATION	7.818602841018158E-10	DOCUMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9981303951529992	WITHOUT_CLASSIFICATION	0.0014987048954418658	DEFECT	3.7034043191990786E-4	DESIGN	2.432719843295646E-7	TEST	1.9101355068999614E-7	IMPLEMENTATION	1.252341039155695E-7	DOCUMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.99952997322957	WITHOUT_CLASSIFICATION	4.632734484202708E-4	DESIGN	4.7556864741998844E-6	DEFECT	1.556619774589578E-6	IMPLEMENTATION	3.2393366950079313E-7	DOCUMENTATION	1.1708209149665482E-7	TEST
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999827695139176	WITHOUT_CLASSIFICATION	1.4463834566340269E-5	DESIGN	1.99905573335446E-6	DEFECT	4.474464313816345E-7	IMPLEMENTATION	1.8085318438570113E-7	DOCUMENTATION	1.3929616705721133E-7	TEST
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9989922241602377	WITHOUT_CLASSIFICATION	9.806686334334045E-4	DESIGN	2.686262432129112E-5	DEFECT	1.711856175817547E-7	DOCUMENTATION	6.991994475016655E-8	IMPLEMENTATION	3.476445185589118E-9	TEST
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942336954963	WITHOUT_CLASSIFICATION	5.114002947219311E-6	IMPLEMENTATION	2.9853184634334056E-7	DESIGN	2.772551427710422E-7	DEFECT	5.540728702712283E-8	DOCUMENTATION	2.110728031884246E-8	TEST
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979269241481	WITHOUT_CLASSIFICATION	1.088123849405728E-6	IMPLEMENTATION	5.666673482735043E-7	DESIGN	3.719800474599252E-7	DEFECT	3.87256322612967E-8	DOCUMENTATION	7.578974531332564E-9	TEST
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937672767718	WITHOUT_CLASSIFICATION	4.818725373100042E-6	IMPLEMENTATION	8.705023212045657E-7	DESIGN	2.569244193621705E-7	DOCUMENTATION	2.3471307192752986E-7	DEFECT	5.1858042639466445E-8	TEST
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999904373627656	WITHOUT_CLASSIFICATION	4.703894995987525E-6	IMPLEMENTATION	3.5533266332554925E-6	DESIGN	1.0764739743916594E-6	DEFECT	1.4066370611514194E-7	DOCUMENTATION	8.827792474067577E-8	TEST
// not null is implicit	WITHOUT_CLASSIFICATION	0.9890546643948779	WITHOUT_CLASSIFICATION	0.01071048925938562	DESIGN	1.338250416226394E-4	DEFECT	8.968330236359579E-5	IMPLEMENTATION	1.0405310363236975E-5	TEST	9.326913870710575E-7	DOCUMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999980295017	WITHOUT_CLASSIFICATION	1.7525355672067764E-9	DEFECT	1.3778891888199183E-10	IMPLEMENTATION	3.960531974774483E-11	DESIGN	3.1602653412268154E-11	DOCUMENTATION	8.965946504560187E-12	TEST
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.997197630016014	WITHOUT_CLASSIFICATION	0.0027553184041044397	IMPLEMENTATION	4.3596742487089126E-5	DESIGN	3.0284752577486977E-6	DEFECT	3.333296077293037E-7	DOCUMENTATION	9.303252876309559E-8	TEST
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999147503980429	WITHOUT_CLASSIFICATION	5.7552642981326704E-5	IMPLEMENTATION	2.2943355663856954E-5	DESIGN	4.598235766779949E-6	DEFECT	7.878768259171324E-8	TEST	7.657986268940179E-8	DOCUMENTATION
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999950290929426	WITHOUT_CLASSIFICATION	4.530064995320856E-6	IMPLEMENTATION	3.9988844067016254E-7	DESIGN	2.9315021677439053E-8	TEST	8.293169367041228E-9	DEFECT	3.3454304696505753E-9	DOCUMENTATION
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999983869278282	WITHOUT_CLASSIFICATION	1.5588015606919706E-6	DESIGN	4.447151987496936E-8	DEFECT	6.957159767993041E-9	IMPLEMENTATION	2.168347356322888E-9	DOCUMENTATION	6.735842951546531E-10	TEST
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.937180881801312	WITHOUT_CLASSIFICATION	0.0628107340958074	DESIGN	5.674475482780661E-6	DEFECT	1.5516264133464292E-6	TEST	1.143621534361924E-6	DOCUMENTATION	1.437945019427808E-8	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999954630414517	WITHOUT_CLASSIFICATION	4.374708282194156E-6	DESIGN	1.4004029445761276E-7	DEFECT	1.7233410470372653E-8	IMPLEMENTATION	4.080277256550924E-9	DOCUMENTATION	8.962838570885551E-10	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999999927069269	WITHOUT_CLASSIFICATION	6.683147874472906E-8	DESIGN	4.6762308235813906E-9	IMPLEMENTATION	1.0371158680135252E-9	DOCUMENTATION	3.7324026721276194E-10	DEFECT	1.2665196799273252E-11	TEST
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9998043996521545	WITHOUT_CLASSIFICATION	1.8145528677915914E-4	DESIGN	5.7507591796005916E-6	IMPLEMENTATION	4.7494066844039575E-6	TEST	2.831231447109733E-6	DEFECT	8.136637551449584E-7	DOCUMENTATION
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9997200471453892	WITHOUT_CLASSIFICATION	1.5754810744486093E-4	DESIGN	1.2222716028824796E-4	IMPLEMENTATION	9.988446310092192E-8	DEFECT	7.008596295742705E-8	TEST	7.616451640222637E-9	DOCUMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999347120471308	WITHOUT_CLASSIFICATION	6.501881615140784E-5	DESIGN	1.623652255548175E-7	DEFECT	8.699612832121904E-8	DOCUMENTATION	1.6356347567873648E-8	TEST	3.4190164455491187E-9	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9947816141402284	WITHOUT_CLASSIFICATION	0.00520264132567348	DESIGN	6.488157571884514E-6	DOCUMENTATION	5.2686909071887446E-6	DEFECT	2.745156972311756E-6	IMPLEMENTATION	1.2425286466758032E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954025454185	WITHOUT_CLASSIFICATION	3.075388145388494E-6	IMPLEMENTATION	1.0991960410941061E-6	DESIGN	2.1572621027518303E-7	DOCUMENTATION	1.972293260876938E-7	DEFECT	9.914858469792526E-9	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9996760484181435	WITHOUT_CLASSIFICATION	3.2256720880045723E-4	DESIGN	1.3088240092642258E-6	TEST	5.000906519660364E-8	DEFECT	2.1324432591856703E-8	DOCUMENTATION	4.215548945470538E-9	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9936630577652458	WITHOUT_CLASSIFICATION	0.0062754043457766496	DESIGN	6.10939505652975E-5	DEFECT	2.386697914354302E-7	IMPLEMENTATION	1.742234787296336E-7	TEST	3.104514195819626E-8	DOCUMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999981710473906	WITHOUT_CLASSIFICATION	1.8172907385677226E-6	IMPLEMENTATION	1.0930688026319481E-8	DESIGN	5.325130153359816E-10	DEFECT	1.71030225364418E-10	DOCUMENTATION	2.763949969533188E-11	TEST
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999938637489489	WITHOUT_CLASSIFICATION	4.982123186965974E-6	IMPLEMENTATION	8.150167957223437E-7	DESIGN	3.2172203362904284E-7	DEFECT	1.1016738365850768E-8	DOCUMENTATION	6.372296370318497E-9	TEST
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9996092776813241	WITHOUT_CLASSIFICATION	2.330936018775262E-4	DESIGN	1.5453176649400047E-4	DEFECT	2.1132873197192144E-6	IMPLEMENTATION	8.610766017126267E-7	DOCUMENTATION	1.2258638284182218E-7	TEST
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999975435432416	WITHOUT_CLASSIFICATION	1.2158808111423918E-6	DEFECT	7.639456712639449E-7	DESIGN	4.7210995148395184E-7	IMPLEMENTATION	2.5031850500723005E-9	DOCUMENTATION	2.017139358863159E-9	TEST
// function templates	WITHOUT_CLASSIFICATION	0.9999985723459057	WITHOUT_CLASSIFICATION	5.74591086714521E-7	IMPLEMENTATION	5.611316450175639E-7	DESIGN	1.9030087004736577E-7	DEFECT	7.692411071848748E-8	TEST	2.4706381759451966E-8	DOCUMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.9929383492124463	WITHOUT_CLASSIFICATION	0.00689310268812355	DESIGN	1.5043635574246884E-4	DEFECT	1.300370189242837E-5	TEST	3.863240769558136E-6	IMPLEMENTATION	1.2448010258045476E-6	DOCUMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9984703932838667	WITHOUT_CLASSIFICATION	0.001238800242204796	DESIGN	2.868951087636611E-4	DEFECT	2.8036063231216885E-6	DOCUMENTATION	7.777134782889026E-7	TEST	3.3004536339859696E-7	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999977475449041	WITHOUT_CLASSIFICATION	1.3751402998531938E-6	DESIGN	7.125389417302723E-7	DEFECT	1.5423784283542454E-7	IMPLEMENTATION	9.371137917209002E-9	DOCUMENTATION	1.1668737519672097E-9	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999964737392734	WITHOUT_CLASSIFICATION	2.125607823599141E-6	DEFECT	1.0346852296177628E-6	DESIGN	3.5882111877767303E-7	IMPLEMENTATION	4.045161581164999E-9	TEST	3.1013929498224774E-9	DOCUMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999900932138726	WITHOUT_CLASSIFICATION	5.213287191383199E-6	DEFECT	3.827601577000415E-6	DESIGN	8.497255271258183E-7	IMPLEMENTATION	1.2519819848867612E-8	DOCUMENTATION	3.6520120340039494E-9	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999966043314686	WITHOUT_CLASSIFICATION	1.6728631376607678E-6	DESIGN	1.4448574437176184E-6	DEFECT	2.727211312929705E-7	IMPLEMENTATION	2.652345636220389E-9	TEST	2.5744731983941106E-9	DOCUMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999938926642259	WITHOUT_CLASSIFICATION	6.078815961118283E-6	DESIGN	1.9534432172644343E-8	IMPLEMENTATION	6.380771431207248E-9	DEFECT	1.3933145760511638E-9	DOCUMENTATION	1.21129473572632E-9	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954025454185	WITHOUT_CLASSIFICATION	3.075388145388494E-6	IMPLEMENTATION	1.0991960410941061E-6	DESIGN	2.1572621027518303E-7	DOCUMENTATION	1.972293260876938E-7	DEFECT	9.914858469792526E-9	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954025454185	WITHOUT_CLASSIFICATION	3.075388145388494E-6	IMPLEMENTATION	1.0991960410941061E-6	DESIGN	2.1572621027518303E-7	DOCUMENTATION	1.972293260876938E-7	DEFECT	9.914858469792526E-9	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9584179942325146	WITHOUT_CLASSIFICATION	0.041573116298729146	DESIGN	8.46651702663617E-6	DEFECT	3.6711705650541575E-7	IMPLEMENTATION	4.3363870514210596E-8	DOCUMENTATION	1.2470802522483152E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9997289031568527	WITHOUT_CLASSIFICATION	2.5637325656816093E-4	IMPLEMENTATION	5.749494143422254E-6	TEST	4.758246949483109E-6	DEFECT	3.351423563884321E-6	DESIGN	8.64421922364672E-7	DOCUMENTATION
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9995707614529796	WITHOUT_CLASSIFICATION	4.2571353199150866E-4	DESIGN	1.8709201963345528E-6	DEFECT	1.4294908817907649E-6	IMPLEMENTATION	1.537090980201514E-7	DOCUMENTATION	7.089485278034136E-8	TEST
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9998558659487453	WITHOUT_CLASSIFICATION	1.393978727317523E-4	DESIGN	3.4414403442876524E-6	IMPLEMENTATION	9.637761512228467E-7	DEFECT	2.3675315577655426E-7	DOCUMENTATION	9.420887167008026E-8	TEST
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999856267712663	WITHOUT_CLASSIFICATION	1.1607070928896194E-5	DEFECT	1.822648546295771E-6	DESIGN	7.481536158679667E-7	IMPLEMENTATION	1.5286935103435848E-7	DOCUMENTATION	4.248629145737881E-8	TEST
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.999999923995677	WITHOUT_CLASSIFICATION	7.143573929514892E-8	DESIGN	2.2179762537058257E-9	TEST	1.3839550987971186E-9	DEFECT	9.203996614542478E-10	IMPLEMENTATION	4.6252563453698945E-11	DOCUMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999996256822773	WITHOUT_CLASSIFICATION	3.2567833979448953E-7	IMPLEMENTATION	2.9047583662437296E-8	DESIGN	8.926750648717996E-9	DEFECT	6.696415830088989E-9	DOCUMENTATION	3.968632850541907E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954025454185	WITHOUT_CLASSIFICATION	3.075388145388494E-6	IMPLEMENTATION	1.0991960410941061E-6	DESIGN	2.1572621027518303E-7	DOCUMENTATION	1.972293260876938E-7	DEFECT	9.914858469792526E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999967283751772	WITHOUT_CLASSIFICATION	2.94660277360946E-6	DESIGN	3.21760453309957E-7	IMPLEMENTATION	2.8033857296841365E-9	DEFECT	3.166904229928513E-10	DOCUMENTATION	1.4151974954364716E-10	TEST
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999195225744621	WITHOUT_CLASSIFICATION	8.001481129057217E-5	DESIGN	2.656427741239747E-7	DEFECT	1.004123403378004E-7	IMPLEMENTATION	7.538050088688448E-8	TEST	2.117863200891949E-8	DOCUMENTATION
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9998936811447059	WITHOUT_CLASSIFICATION	1.010187615937671E-4	DESIGN	2.975861259773937E-6	IMPLEMENTATION	2.0026791403877463E-6	DEFECT	1.9576180749900394E-7	DOCUMENTATION	1.2579149272123381E-7	TEST
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999953611427637	WITHOUT_CLASSIFICATION	3.98166533459276E-6	IMPLEMENTATION	3.141224264150288E-7	DEFECT	2.0052042278433157E-7	DOCUMENTATION	1.2834089696220962E-7	DESIGN	1.4208155524339272E-8	TEST
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9981334537367715	WITHOUT_CLASSIFICATION	0.0018594607635184404	DESIGN	5.4042889277633286E-6	DEFECT	8.301008297198707E-7	IMPLEMENTATION	7.091047638122997E-7	TEST	1.4200518854429506E-7	DOCUMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.9999998531029906	WITHOUT_CLASSIFICATION	9.50464369630093E-8	DESIGN	1.8488702506038823E-8	DOCUMENTATION	1.2374991147108343E-8	DEFECT	1.1794459193158719E-8	IMPLEMENTATION	9.192419562766856E-9	TEST
/*	WITHOUT_CLASSIFICATION	0.9334241107300555	WITHOUT_CLASSIFICATION	0.057334198134129065	DESIGN	0.006046816090410139	DEFECT	0.0029370291208706606	IMPLEMENTATION	1.5123563116669595E-4	DOCUMENTATION	1.0661029336787873E-4	TEST
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999964164682424	WITHOUT_CLASSIFICATION	2.088264741489963E-6	IMPLEMENTATION	6.475471573570607E-7	DEFECT	4.44208233095116E-7	DESIGN	3.883584554046765E-7	DOCUMENTATION	1.5153170148069566E-8	TEST
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999996382243671	WITHOUT_CLASSIFICATION	1.2823785928507363E-7	IMPLEMENTATION	1.1064001273503073E-7	DESIGN	9.03819957736613E-8	DOCUMENTATION	2.6307731525244945E-8	DEFECT	6.208033647814109E-9	TEST
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999934280566002	WITHOUT_CLASSIFICATION	3.4431399620545058E-6	DESIGN	2.959812760880543E-6	DEFECT	9.246132670201867E-8	IMPLEMENTATION	7.397959261123848E-8	DOCUMENTATION	2.5497578540620472E-9	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9996760484181435	WITHOUT_CLASSIFICATION	3.2256720880045723E-4	DESIGN	1.3088240092642258E-6	TEST	5.000906519660364E-8	DEFECT	2.1324432591856703E-8	DOCUMENTATION	4.215548945470538E-9	IMPLEMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9007205965404617	WITHOUT_CLASSIFICATION	0.05173576590217882	DESIGN	0.047515706102563435	DEFECT	1.1744310924263032E-5	TEST	1.125175308962335E-5	IMPLEMENTATION	4.935390782253693E-6	DOCUMENTATION
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.999859863407859	WITHOUT_CLASSIFICATION	1.4009969358500006E-4	DESIGN	1.4453105879200775E-8	DEFECT	1.2334990983533408E-8	IMPLEMENTATION	7.538338460687313E-9	TEST	2.5721206009614045E-9	DOCUMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9977093001889771	WITHOUT_CLASSIFICATION	0.0014048729670707145	DEFECT	8.343451504393242E-4	DESIGN	4.96647556308789E-5	TEST	1.796259081184219E-6	DOCUMENTATION	2.0678800951008083E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9996760484181435	WITHOUT_CLASSIFICATION	3.2256720880045723E-4	DESIGN	1.3088240092642258E-6	TEST	5.000906519660364E-8	DEFECT	2.1324432591856703E-8	DOCUMENTATION	4.215548945470538E-9	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999931478369931	WITHOUT_CLASSIFICATION	6.6968216472659025E-6	DESIGN	9.042135562218092E-8	DEFECT	4.834982157311589E-8	DOCUMENTATION	9.681679076331382E-9	IMPLEMENTATION	6.88850325577794E-9	TEST
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999967283751772	WITHOUT_CLASSIFICATION	2.94660277360946E-6	DESIGN	3.21760453309957E-7	IMPLEMENTATION	2.8033857296841365E-9	DEFECT	3.166904229928513E-10	DOCUMENTATION	1.4151974954364716E-10	TEST
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9660050244079349	WITHOUT_CLASSIFICATION	0.03317763432136329	DESIGN	7.913580507576104E-4	DEFECT	1.5195734473335801E-5	IMPLEMENTATION	7.326498610454351E-6	TEST	3.460986860422435E-6	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954025454185	WITHOUT_CLASSIFICATION	3.075388145388494E-6	IMPLEMENTATION	1.0991960410941061E-6	DESIGN	2.1572621027518303E-7	DOCUMENTATION	1.972293260876938E-7	DEFECT	9.914858469792526E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9727606954301394	WITHOUT_CLASSIFICATION	0.026366835304739024	DESIGN	4.446562321848277E-4	DEFECT	4.1059508348050824E-4	TEST	1.6381441355362737E-5	IMPLEMENTATION	8.3650810082203E-7	DOCUMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954025454185	WITHOUT_CLASSIFICATION	3.075388145388494E-6	IMPLEMENTATION	1.0991960410941061E-6	DESIGN	2.1572621027518303E-7	DOCUMENTATION	1.972293260876938E-7	DEFECT	9.914858469792526E-9	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.8975083797958261	WITHOUT_CLASSIFICATION	0.10244825788021908	DESIGN	3.5907363558107576E-5	DEFECT	4.181720412363725E-6	TEST	3.2550447309853776E-6	IMPLEMENTATION	1.819525322791925E-8	DOCUMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999964737392734	WITHOUT_CLASSIFICATION	2.125607823599141E-6	DEFECT	1.0346852296177628E-6	DESIGN	3.5882111877767303E-7	IMPLEMENTATION	4.045161581164999E-9	TEST	3.1013929498224774E-9	DOCUMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999900932138726	WITHOUT_CLASSIFICATION	5.213287191383199E-6	DEFECT	3.827601577000415E-6	DESIGN	8.497255271258183E-7	IMPLEMENTATION	1.2519819848867612E-8	DOCUMENTATION	3.6520120340039494E-9	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999966043314686	WITHOUT_CLASSIFICATION	1.6728631376607678E-6	DESIGN	1.4448574437176184E-6	DEFECT	2.727211312929705E-7	IMPLEMENTATION	2.652345636220389E-9	TEST	2.5744731983941106E-9	DOCUMENTATION
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999950787012	WITHOUT_CLASSIFICATION	4.158170366906552E-9	TEST	3.346238679376499E-10	DOCUMENTATION	2.2873172062462756E-10	DEFECT	1.6368592156044218E-10	DESIGN	3.6086864782675265E-11	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.9999850021921914	WITHOUT_CLASSIFICATION	1.4421084530936028E-5	DESIGN	2.845394272738074E-7	DOCUMENTATION	1.8948730022602535E-7	IMPLEMENTATION	6.274322836053189E-8	DEFECT	3.995332178585036E-8	TEST
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999989210348177	WITHOUT_CLASSIFICATION	9.223297160964286E-7	DESIGN	5.5060719825565406E-8	IMPLEMENTATION	5.042950399554839E-8	DOCUMENTATION	4.1160215086288906E-8	TEST	9.985027273551443E-9	DEFECT
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999988940169177	WITHOUT_CLASSIFICATION	9.91592119352327E-7	DEFECT	8.733124180478765E-8	DESIGN	1.5209487367950428E-8	IMPLEMENTATION	9.687318398575891E-9	TEST	2.1629153114610183E-9	DOCUMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999996397970689	WITHOUT_CLASSIFICATION	3.4859282011111726E-7	DEFECT	1.1133801175590221E-8	DESIGN	4.6067654676258423E-10	TEST	9.22699823716375E-12	IMPLEMENTATION	6.406323654083735E-12	DOCUMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954025454185	WITHOUT_CLASSIFICATION	3.075388145388494E-6	IMPLEMENTATION	1.0991960410941061E-6	DESIGN	2.1572621027518303E-7	DOCUMENTATION	1.972293260876938E-7	DEFECT	9.914858469792526E-9	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9996760484181435	WITHOUT_CLASSIFICATION	3.2256720880045723E-4	DESIGN	1.3088240092642258E-6	TEST	5.000906519660364E-8	DEFECT	2.1324432591856703E-8	DOCUMENTATION	4.215548945470538E-9	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999938926642259	WITHOUT_CLASSIFICATION	6.078815961118283E-6	DESIGN	1.9534432172644343E-8	IMPLEMENTATION	6.380771431207248E-9	DEFECT	1.3933145760511638E-9	DOCUMENTATION	1.21129473572632E-9	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9584179942325146	WITHOUT_CLASSIFICATION	0.041573116298729146	DESIGN	8.46651702663617E-6	DEFECT	3.6711705650541575E-7	IMPLEMENTATION	4.3363870514210596E-8	DOCUMENTATION	1.2470802522483152E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999459491206957	WITHOUT_CLASSIFICATION	5.383996671754368E-5	DESIGN	1.4801518228974646E-7	DEFECT	3.1565924599507535E-8	DOCUMENTATION	2.531410692494052E-8	IMPLEMENTATION	6.0173730431622835E-9	TEST
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994659722146	WITHOUT_CLASSIFICATION	3.3851167201581665E-7	DESIGN	1.9075098303379537E-7	DEFECT	3.91345378401705E-9	DOCUMENTATION	5.100775981288422E-10	IMPLEMENTATION	3.4159905403694015E-10	TEST
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999998189379428	WITHOUT_CLASSIFICATION	1.6712161209304456E-7	DESIGN	1.0509493499938936E-8	DEFECT	1.7660239015413012E-9	TEST	8.543569287778535E-10	IMPLEMENTATION	8.105707911062074E-10	DOCUMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999964006345	WITHOUT_CLASSIFICATION	1.097283400060548E-9	TEST	7.732376694411822E-10	DEFECT	7.445972250538321E-10	DOCUMENTATION	7.38733201639278E-10	DESIGN	2.45513946941177E-10	IMPLEMENTATION
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9988029000655921	WITHOUT_CLASSIFICATION	0.001196402912260886	DESIGN	3.977926221502901E-7	DEFECT	2.5171136777024396E-7	TEST	3.861461675014899E-8	DOCUMENTATION	8.903540274136202E-9	IMPLEMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9962001545857341	WITHOUT_CLASSIFICATION	0.003799677569406572	DESIGN	1.2885903273857095E-7	DEFECT	3.554595470103664E-8	IMPLEMENTATION	3.1357103534593618E-9	TEST	3.04161460016564E-10	DOCUMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999948164075185	WITHOUT_CLASSIFICATION	3.9806702740406365E-5	IMPLEMENTATION	1.1183191760835893E-5	DESIGN	4.170071239184538E-7	DEFECT	2.5521548072004036E-7	DOCUMENTATION	1.738077091032949E-7	TEST
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9971082661362833	WITHOUT_CLASSIFICATION	0.0028910133720011326	DESIGN	6.296166312622965E-7	DEFECT	7.313355634162268E-8	TEST	1.2485844404353184E-8	DOCUMENTATION	5.2556835558015595E-9	IMPLEMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9813519312818286	WITHOUT_CLASSIFICATION	0.016240997347154326	DESIGN	0.002388410036078965	IMPLEMENTATION	1.5658823144517752E-5	TEST	1.699653255400112E-6	DOCUMENTATION	1.3028585381458565E-6	DEFECT
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9971854102642692	WITHOUT_CLASSIFICATION	0.0028102932566769147	DESIGN	2.3056073125088947E-6	DEFECT	1.1983987229069381E-6	IMPLEMENTATION	5.683844985634518E-7	TEST	2.2408851978040885E-7	DOCUMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999993907193657	WITHOUT_CLASSIFICATION	6.037293571604467E-7	DESIGN	2.6518966017059075E-9	IMPLEMENTATION	1.6069467459558196E-9	DOCUMENTATION	1.1262846362365027E-9	DEFECT	1.6614912983725146E-10	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999258351642	WITHOUT_CLASSIFICATION	5.699460576664129E-8	DESIGN	1.1614028159736581E-8	IMPLEMENTATION	3.964274204641502E-9	DEFECT	1.0519506837408108E-9	DOCUMENTATION	5.399769321176549E-10	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999684972370763	WITHOUT_CLASSIFICATION	2.967193027602537E-5	IMPLEMENTATION	1.5797841220966752E-6	DESIGN	1.0421130921518291E-7	TEST	8.638809888559203E-8	DEFECT	6.044911757162618E-8	DOCUMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999584308438665	WITHOUT_CLASSIFICATION	2.8212575385320627E-5	DESIGN	1.2773573657034003E-5	IMPLEMENTATION	2.6831186557956375E-7	DEFECT	1.7305363739978998E-7	DOCUMENTATION	1.4164158824624172E-7	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999813706335842	WITHOUT_CLASSIFICATION	1.7734067873088287E-5	DESIGN	8.491492493825214E-7	IMPLEMENTATION	3.608276192616509E-8	TEST	6.678860622687432E-9	DEFECT	3.3876709494161553E-9	DOCUMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999258351642	WITHOUT_CLASSIFICATION	5.699460576664129E-8	DESIGN	1.1614028159736581E-8	IMPLEMENTATION	3.964274204641502E-9	DEFECT	1.0519506837408108E-9	DOCUMENTATION	5.399769321176549E-10	TEST
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9998517011430449	WITHOUT_CLASSIFICATION	1.4814812513551644E-4	DESIGN	7.291736645486987E-8	IMPLEMENTATION	4.906729123342379E-8	DOCUMENTATION	2.68424410088879E-8	DEFECT	1.904720803203052E-9	TEST
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999996539914873	WITHOUT_CLASSIFICATION	1.8936172538555156E-7	IMPLEMENTATION	1.2945615438041946E-7	DEFECT	2.4451831638930632E-8	DESIGN	2.0930798707021225E-9	DOCUMENTATION	6.45721443003986E-10	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998577798278151	WITHOUT_CLASSIFICATION	1.2291571938796283E-4	IMPLEMENTATION	1.3393621916533927E-5	DEFECT	5.266318487345756E-6	DESIGN	5.809032882962287E-7	DOCUMENTATION	6.360910491623897E-8	TEST
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999804411306581	WITHOUT_CLASSIFICATION	1.4733612540477971E-5	IMPLEMENTATION	4.265748419249303E-6	DESIGN	3.977453299812468E-7	DEFECT	1.0037529773997254E-7	DOCUMENTATION	6.13877545210174E-8	TEST
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999727713893792	WITHOUT_CLASSIFICATION	2.562894337169506E-5	DEFECT	1.4126813547414646E-6	DESIGN	1.6726219328296122E-7	IMPLEMENTATION	1.059421070894106E-8	TEST	9.129490218986799E-9	DOCUMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954025454185	WITHOUT_CLASSIFICATION	3.075388145388494E-6	IMPLEMENTATION	1.0991960410941061E-6	DESIGN	2.1572621027518303E-7	DOCUMENTATION	1.972293260876938E-7	DEFECT	9.914858469792526E-9	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954025454185	WITHOUT_CLASSIFICATION	3.075388145388494E-6	IMPLEMENTATION	1.0991960410941061E-6	DESIGN	2.1572621027518303E-7	DOCUMENTATION	1.972293260876938E-7	DEFECT	9.914858469792526E-9	TEST
/*<String>*/	WITHOUT_CLASSIFICATION	0.9997178486330603	WITHOUT_CLASSIFICATION	1.934643559256399E-4	DESIGN	6.23896067560138E-5	DEFECT	1.885854805526352E-5	IMPLEMENTATION	5.806867598423357E-6	DOCUMENTATION	1.631988604462391E-6	TEST
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999144319026178	WITHOUT_CLASSIFICATION	4.999193743578746E-5	DESIGN	3.52206500989079E-5	IMPLEMENTATION	2.6608663522735713E-7	DEFECT	6.305891399075031E-8	DOCUMENTATION	2.6364298296239003E-8	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999860568953524	WITHOUT_CLASSIFICATION	1.0369919308267395E-5	IMPLEMENTATION	3.483013242114909E-6	DESIGN	4.121008970863697E-8	DEFECT	2.702535695602663E-8	DOCUMENTATION	2.1936650568209865E-8	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999999927069269	WITHOUT_CLASSIFICATION	6.683147874472906E-8	DESIGN	4.6762308235813906E-9	IMPLEMENTATION	1.0371158680135252E-9	DOCUMENTATION	3.7324026721276194E-10	DEFECT	1.2665196799273252E-11	TEST
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.997691652886843	WITHOUT_CLASSIFICATION	0.0023015376134023885	DESIGN	4.064807822220549E-6	DEFECT	1.4746645241667402E-6	DOCUMENTATION	1.2401036552902894E-6	TEST	2.992375296745583E-8	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9998742718085832	WITHOUT_CLASSIFICATION	1.1778199804967286E-4	DESIGN	7.827886438449848E-6	DEFECT	7.359447413842722E-8	DOCUMENTATION	2.788774729736363E-8	TEST	1.6824707166915018E-8	IMPLEMENTATION
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999997902682353	WITHOUT_CLASSIFICATION	1.9701908747915094E-7	DESIGN	7.975223852618633E-9	DEFECT	4.219494212728027E-9	IMPLEMENTATION	4.61847750113705E-10	DOCUMENTATION	5.611156535108525E-11	TEST
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999530754275192	WITHOUT_CLASSIFICATION	4.6794822988778905E-5	DESIGN	1.1770188186211254E-7	TEST	7.577081938351581E-9	DEFECT	4.2831026114744425E-9	DOCUMENTATION	1.8742542391642815E-10	IMPLEMENTATION
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999998315574848	WITHOUT_CLASSIFICATION	1.2037897206732731E-7	DESIGN	3.0384180856970934E-8	DEFECT	1.0973802278319324E-8	IMPLEMENTATION	3.7120846821512482E-9	TEST	2.9934750942647643E-9	DOCUMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999149447112	WITHOUT_CLASSIFICATION	6.10336765878076E-8	IMPLEMENTATION	2.201636552120868E-8	DESIGN	1.071195657221504E-9	DEFECT	4.901934844005634E-10	DOCUMENTATION	4.4385759372257613E-10	TEST
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999826392428236	WITHOUT_CLASSIFICATION	8.194470896018298E-6	IMPLEMENTATION	5.793129942673142E-6	DESIGN	2.5530661403783914E-6	DEFECT	6.045795119702545E-7	DOCUMENTATION	2.1551068534303307E-7	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9997691624667374	WITHOUT_CLASSIFICATION	1.5744223816639152E-4	DESIGN	6.644836724879456E-5	IMPLEMENTATION	3.672882604898921E-6	DEFECT	2.505849997271748E-6	DOCUMENTATION	7.681952452665731E-7	TEST
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999999714716	WITHOUT_CLASSIFICATION	2.665499695714004E-11	DESIGN	1.4270237305242872E-12	DOCUMENTATION	3.6610785942355084E-13	IMPLEMENTATION	4.662890431670708E-14	TEST	3.37485597307141E-14	DEFECT
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999882274127019	WITHOUT_CLASSIFICATION	7.44098876450179E-6	IMPLEMENTATION	2.844034885341489E-6	DESIGN	1.3728302361963804E-6	DEFECT	1.0739501986270728E-7	DOCUMENTATION	7.338392169819498E-9	TEST
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999983761762374	WITHOUT_CLASSIFICATION	1.5917884253852763E-6	DESIGN	3.082925492581921E-8	IMPLEMENTATION	6.113389968686828E-10	TEST	4.5421449132442816E-10	DEFECT	1.4052881419223166E-10	DOCUMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999945385640433	WITHOUT_CLASSIFICATION	3.452145851773294E-6	IMPLEMENTATION	1.6294525446866911E-6	DESIGN	3.5302226399219705E-7	DEFECT	2.1346433305835017E-8	TEST	5.468862946847697E-9	DOCUMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999997588846992	WITHOUT_CLASSIFICATION	2.354727898525652E-7	DESIGN	2.857753254204363E-9	DEFECT	2.3818515754570476E-9	TEST	3.6486088544779017E-10	DOCUMENTATION	3.804545666419791E-11	IMPLEMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.999999663840846	WITHOUT_CLASSIFICATION	3.2368011882372006E-7	IMPLEMENTATION	8.583411037353157E-9	DESIGN	1.98401180422453E-9	TEST	1.6419745330487344E-9	DEFECT	2.696379460479822E-10	DOCUMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9992928195054203	WITHOUT_CLASSIFICATION	6.738585092689949E-4	DESIGN	2.838536569067703E-5	IMPLEMENTATION	2.1613370255692937E-6	DOCUMENTATION	1.7080822106679169E-6	DEFECT	1.0672003838408868E-6	TEST
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999494633656706	WITHOUT_CLASSIFICATION	3.9398554781574024E-5	IMPLEMENTATION	8.211350158536037E-6	DESIGN	2.2514794181917742E-6	DOCUMENTATION	5.541471834661923E-7	DEFECT	1.2110278763700384E-7	TEST
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986328164612024	WITHOUT_CLASSIFICATION	0.0013067158418874397	IMPLEMENTATION	3.6012018112996346E-5	DESIGN	2.3118472429315592E-5	DEFECT	9.605631291073794E-7	DOCUMENTATION	3.7664323871797213E-7	TEST
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999985466204725	WITHOUT_CLASSIFICATION	1.1944481116148658E-6	IMPLEMENTATION	1.7212633583170577E-7	DESIGN	4.640475300675793E-8	TEST	3.1470346788105296E-8	DEFECT	8.929980278505952E-9	DOCUMENTATION
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999879955704872	WITHOUT_CLASSIFICATION	7.383485768021176E-6	DESIGN	2.3807938421570323E-6	IMPLEMENTATION	2.203680770711845E-6	DEFECT	3.054566602820153E-8	TEST	5.923465759964152E-9	DOCUMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9996153537764647	WITHOUT_CLASSIFICATION	1.7024751762301305E-4	DEFECT	1.3089426447060134E-4	DESIGN	7.6971003175937E-5	DOCUMENTATION	3.7088994535092144E-6	IMPLEMENTATION	2.824538812172123E-6	TEST
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999652964114186	WITHOUT_CLASSIFICATION	3.2989360794358527E-5	IMPLEMENTATION	7.615580227322966E-7	DEFECT	4.988918381077114E-7	TEST	2.564698219044798E-7	DESIGN	1.9730810424814372E-7	DOCUMENTATION
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999922059069474	WITHOUT_CLASSIFICATION	7.273657436568534E-6	IMPLEMENTATION	3.116051209326694E-7	DESIGN	1.5685511596519545E-7	TEST	3.688091733130674E-8	DEFECT	1.5094461588679713E-8	DOCUMENTATION
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993211928468	WITHOUT_CLASSIFICATION	2.6964611306823657E-7	DESIGN	2.6540344661398156E-7	IMPLEMENTATION	1.1971594854993768E-7	DEFECT	1.2513305167587608E-8	TEST	1.1528339703625671E-8	DOCUMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999989057174589	WITHOUT_CLASSIFICATION	8.182105989942572E-7	IMPLEMENTATION	1.5111655684304056E-7	DEFECT	7.740753984778918E-8	DESIGN	3.9618986822035597E-8	TEST	7.92885850427287E-9	DOCUMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999986066158256	WITHOUT_CLASSIFICATION	7.624537908134311E-7	DESIGN	3.694950101371305E-7	DEFECT	2.565526028739845E-7	IMPLEMENTATION	3.7165224926974546E-9	TEST	1.1662480591360208E-9	DOCUMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999973848034013	WITHOUT_CLASSIFICATION	2.1212977692220215E-6	DESIGN	3.520617937611701E-7	IMPLEMENTATION	8.073761703345755E-8	DOCUMENTATION	4.834371238112276E-8	DEFECT	1.2755706173241252E-8	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.99999694574364	WITHOUT_CLASSIFICATION	1.2959027408783962E-6	DESIGN	1.2158241804111971E-6	IMPLEMENTATION	4.887101870761948E-7	DEFECT	4.42502389523237E-8	TEST	9.56901272292525E-9	DOCUMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999681630504497	WITHOUT_CLASSIFICATION	1.628684392632932E-5	DEFECT	1.5261232816049065E-5	DESIGN	2.3438789180228702E-7	IMPLEMENTATION	4.38870225848493E-8	DOCUMENTATION	1.059789358469449E-8	TEST
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993288111815	WITHOUT_CLASSIFICATION	5.363438181593766E-7	DESIGN	9.920920652243786E-8	IMPLEMENTATION	2.998671020059959E-8	TEST	3.3290108012032596E-9	DOCUMENTATION	2.320072827454368E-9	DEFECT
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968911645568	WITHOUT_CLASSIFICATION	2.787912957696668E-6	DESIGN	2.801552632312526E-7	IMPLEMENTATION	3.480610532717716E-8	DEFECT	3.3641940406193307E-9	TEST	2.5969229402885914E-9	DOCUMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9990653346813667	WITHOUT_CLASSIFICATION	9.309316009258051E-4	DESIGN	3.0712280259011078E-6	DEFECT	5.549772967259299E-7	IMPLEMENTATION	6.338084257350138E-8	TEST	4.413154214809207E-8	DOCUMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999991492578314	WITHOUT_CLASSIFICATION	7.027350456159858E-7	IMPLEMENTATION	6.38004703350874E-8	TEST	5.800267631329544E-8	DEFECT	2.3137111113096226E-8	DESIGN	3.0668652174841177E-9	DOCUMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999997401915786	WITHOUT_CLASSIFICATION	2.2600320591840356E-7	DESIGN	1.6968596884358594E-8	DEFECT	1.532163443086341E-8	DOCUMENTATION	9.6126776649041E-10	IMPLEMENTATION	5.537164801964501E-10	TEST
// continue loop	WITHOUT_CLASSIFICATION	0.999992633368037	WITHOUT_CLASSIFICATION	5.177517626005593E-6	DEFECT	1.8028526159626257E-6	DESIGN	3.3699850843398247E-7	IMPLEMENTATION	4.515765579228008E-8	DOCUMENTATION	4.10555682190295E-9	TEST
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9994537072996892	WITHOUT_CLASSIFICATION	3.229151636104701E-4	DESIGN	1.0612749475996708E-4	IMPLEMENTATION	9.348107191428253E-5	TEST	2.115820829579608E-5	DEFECT	2.6107617303294797E-6	DOCUMENTATION
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9988909226282316	WITHOUT_CLASSIFICATION	8.045602022742032E-4	DESIGN	1.7990034295102043E-4	IMPLEMENTATION	1.0861181350327706E-4	TEST	1.1796801269615344E-5	DEFECT	4.20821177022485E-6	DOCUMENTATION
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999998880939238	WITHOUT_CLASSIFICATION	8.492877154034942E-8	TEST	1.3677968452306923E-8	DEFECT	1.2476302743941195E-8	DESIGN	6.428693038161668E-10	DOCUMENTATION	1.8016426612716787E-10	IMPLEMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999997018380355	WITHOUT_CLASSIFICATION	1.954689338315304E-7	DESIGN	1.0097257338561344E-7	DEFECT	8.431855942280213E-10	DOCUMENTATION	4.849077930089156E-10	IMPLEMENTATION	3.923637840407195E-10	TEST
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999670341222359	WITHOUT_CLASSIFICATION	3.231418252227558E-5	DESIGN	5.875527690929841E-7	IMPLEMENTATION	2.3169208727494027E-8	DOCUMENTATION	2.0789289315216956E-8	TEST	2.0183974723739677E-8	DEFECT
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999831829205044	WITHOUT_CLASSIFICATION	1.6788723439188637E-5	DESIGN	1.2107658316051731E-8	IMPLEMENTATION	8.137484082179558E-9	TEST	4.104237181337848E-9	DEFECT	4.006676671982341E-9	DOCUMENTATION
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9971991708862997	WITHOUT_CLASSIFICATION	0.002755114987866699	DESIGN	4.569052784280245E-5	DEFECT	1.4234801331957694E-8	DOCUMENTATION	6.769464654271566E-9	IMPLEMENTATION	2.5937248666765736E-9	TEST
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9939378932620341	WITHOUT_CLASSIFICATION	0.005305159855092649	DESIGN	7.019976620958432E-4	IMPLEMENTATION	3.221623489439821E-5	DOCUMENTATION	1.9981563223274152E-5	TEST	2.7514226597487464E-6	DEFECT
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.999999896410014	WITHOUT_CLASSIFICATION	5.670900048098872E-8	DESIGN	4.634819697915366E-8	TEST	3.860005484706099E-10	DEFECT	1.4612090979081996E-10	DOCUMENTATION	6.671525013336277E-13	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999990216323035	WITHOUT_CLASSIFICATION	9.662384297856035E-7	DESIGN	1.0195007320649156E-8	IMPLEMENTATION	1.3292363599917854E-9	DEFECT	4.2248340745877074E-10	TEST	1.8253970189611717E-10	DOCUMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999975087835047	WITHOUT_CLASSIFICATION	1.731501596670523E-6	DESIGN	7.05519942314317E-7	TEST	4.722174162977482E-8	DEFECT	6.823547802473021E-9	DOCUMENTATION	1.4966676038058658E-10	IMPLEMENTATION
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999999072425317	WITHOUT_CLASSIFICATION	9.05451748323388E-8	DESIGN	7.088364111250279E-10	DOCUMENTATION	6.635225564659328E-10	TEST	5.254930585255025E-10	DEFECT	3.144414080020147E-10	IMPLEMENTATION
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999834859717966	WITHOUT_CLASSIFICATION	1.5413379644784427E-5	DESIGN	6.621824758250773E-7	TEST	3.804055931173699E-7	DOCUMENTATION	4.249242948183227E-8	IMPLEMENTATION	1.556806012039014E-8	DEFECT
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999999113282971	WITHOUT_CLASSIFICATION	8.462750431664591E-8	DESIGN	2.415409021243802E-9	DEFECT	1.0688044546761079E-9	TEST	5.591734946448235E-10	DOCUMENTATION	8.116323064011119E-13	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999994376077124	WITHOUT_CLASSIFICATION	5.10262765475133E-7	TEST	4.789281994840628E-8	DESIGN	3.769335391563786E-9	IMPLEMENTATION	3.354720965388044E-10	DOCUMENTATION	1.3189485163730974E-10	DEFECT
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9886509767110122	WITHOUT_CLASSIFICATION	0.010846176826449368	DESIGN	4.4798118856010386E-4	IMPLEMENTATION	5.3126611072564856E-5	TEST	1.2771164138284213E-6	DEFECT	4.6154649190335257E-7	DOCUMENTATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999796518492053	WITHOUT_CLASSIFICATION	1.4163580078799785E-5	IMPLEMENTATION	5.870135769008668E-6	DESIGN	1.9780654883604078E-7	DOCUMENTATION	1.1263830575067392E-7	DEFECT	3.990092261283765E-9	TEST
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9920234462367993	WITHOUT_CLASSIFICATION	0.007322704371039351	DESIGN	6.240765651335777E-4	DEFECT	2.1306362169528985E-5	IMPLEMENTATION	4.858427892202952E-6	DOCUMENTATION	3.6080369659856704E-6	TEST
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999455804812	WITHOUT_CLASSIFICATION	4.6586744257844806E-8	DESIGN	6.725955050993355E-9	DEFECT	6.121279026436634E-10	DOCUMENTATION	4.743762598523789E-10	IMPLEMENTATION	2.031536904124734E-11	TEST
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9985736203415343	WITHOUT_CLASSIFICATION	0.001377371401513973	DESIGN	4.613093812276531E-5	DEFECT	2.2326577262210773E-6	IMPLEMENTATION	5.456118857508234E-7	DOCUMENTATION	9.904921703804654E-8	TEST
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9940883827180236	WITHOUT_CLASSIFICATION	0.005888044432994061	DESIGN	2.1152725106356936E-5	IMPLEMENTATION	1.077047523309953E-6	DOCUMENTATION	6.873235834567917E-7	TEST	6.557527691226626E-7	DEFECT
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999967362814528	WITHOUT_CLASSIFICATION	2.9451986364218405E-6	DESIGN	2.92790963915299E-7	DEFECT	2.212943090402513E-8	DOCUMENTATION	1.9436680129877245E-9	TEST	1.6558479678113215E-9	IMPLEMENTATION
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999997051479735	WITHOUT_CLASSIFICATION	1.2436691285227115E-7	DEFECT	8.534606395698887E-8	IMPLEMENTATION	7.804292302084819E-8	DESIGN	6.192650155914888E-9	DOCUMENTATION	9.034765001238284E-10	TEST
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999986110481393	WITHOUT_CLASSIFICATION	7.257772452732843E-7	DESIGN	5.801340379170414E-7	DEFECT	3.612633783549054E-8	TEST	2.7544310476448325E-8	DOCUMENTATION	1.936992924291042E-8	IMPLEMENTATION
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9992971438779737	WITHOUT_CLASSIFICATION	6.608113114532519E-4	DESIGN	4.005802514146032E-5	IMPLEMENTATION	1.8295512487203736E-6	DEFECT	9.290855223596814E-8	TEST	6.432563055852436E-8	DOCUMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999970194633254	WITHOUT_CLASSIFICATION	2.048030045060907E-6	DEFECT	5.917007303953902E-7	IMPLEMENTATION	3.251056511442528E-7	DESIGN	1.2557205570387275E-8	DOCUMENTATION	3.1430424029504774E-9	TEST
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999997220571446	WITHOUT_CLASSIFICATION	1.4086839222230812E-7	DEFECT	1.3205725317289694E-7	DESIGN	3.672212892681472E-9	TEST	1.2491989999157309E-9	DOCUMENTATION	9.579805915043415E-11	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999982830698089	WITHOUT_CLASSIFICATION	1.5874511419010819E-6	DESIGN	1.0518170574597405E-7	DEFECT	1.006956546624457E-8	DOCUMENTATION	8.798365143333192E-9	IMPLEMENTATION	5.4294128144579535E-9	TEST
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999996883584821	WITHOUT_CLASSIFICATION	1.5669754426139617E-7	DEFECT	1.5414725586374433E-7	DESIGN	4.669048188992953E-10	IMPLEMENTATION	2.6240956421919114E-10	DOCUMENTATION	6.740340527078264E-11	TEST
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999827735986738	WITHOUT_CLASSIFICATION	1.7197603351817995E-5	DEFECT	1.8262241076394192E-8	DESIGN	6.454406361317761E-9	IMPLEMENTATION	3.0316524992366504E-9	TEST	1.0496744212057022E-9	DOCUMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9904187593991605	WITHOUT_CLASSIFICATION	0.004635921790139589	DEFECT	0.00343411923948642	DESIGN	0.0014970650550768941	IMPLEMENTATION	1.2529103445342527E-5	TEST	1.6054126913928724E-6	DOCUMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9997746287080335	WITHOUT_CLASSIFICATION	1.9707629124572176E-4	IMPLEMENTATION	1.805142689256447E-5	DESIGN	7.458605028571563E-6	DEFECT	2.506517147539053E-6	DOCUMENTATION	2.7845165198127593E-7	TEST
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999984526064563	WITHOUT_CLASSIFICATION	8.544959631567981E-7	DESIGN	6.698551634833753E-7	DEFECT	1.23717367691396E-8	DOCUMENTATION	6.479553498992294E-9	IMPLEMENTATION	4.1911268762856476E-9	TEST
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999841058157474	WITHOUT_CLASSIFICATION	1.4146606943740917E-5	DESIGN	8.657499329896121E-7	IMPLEMENTATION	5.31529599219551E-7	DEFECT	3.0206751617024086E-7	DOCUMENTATION	4.823026045213269E-8	TEST
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999985867548068	WITHOUT_CLASSIFICATION	9.048794608647099E-7	DESIGN	3.568983098656279E-7	IMPLEMENTATION	8.750490061806529E-8	DOCUMENTATION	3.566980396152277E-8	DEFECT	2.8292717806972643E-8	TEST
//return the proxied object	WITHOUT_CLASSIFICATION	0.9981239421577347	WITHOUT_CLASSIFICATION	0.001849774652618319	DESIGN	2.3418288966832676E-5	DEFECT	1.5950833704870245E-6	IMPLEMENTATION	1.2089245550746564E-6	DOCUMENTATION	6.089275470777195E-8	TEST
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999960570408017	WITHOUT_CLASSIFICATION	3.7493212324685725E-6	DESIGN	1.0299015817606652E-7	DEFECT	3.5598817746714036E-8	DOCUMENTATION	3.007330857900733E-8	TEST	2.4975681337647753E-8	IMPLEMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.9997932326017909	WITHOUT_CLASSIFICATION	1.8839124609437168E-4	DEFECT	1.5812825221319433E-5	DESIGN	2.0390918711125596E-6	IMPLEMENTATION	3.6124180658469717E-7	DOCUMENTATION	1.629932158410433E-7	TEST
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9955196942801068	WITHOUT_CLASSIFICATION	0.0036356898032314606	DESIGN	4.6450881063761956E-4	IMPLEMENTATION	3.725663337936394E-4	DEFECT	6.538100650400454E-6	TEST	1.0026715799963596E-6	DOCUMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999703671050114	WITHOUT_CLASSIFICATION	2.0475112213447504E-5	DESIGN	7.91022923711327E-6	IMPLEMENTATION	9.046175172187232E-7	DEFECT	2.402661891252639E-7	TEST	1.0266983176884471E-7	DOCUMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.6410985344047219	WITHOUT_CLASSIFICATION	0.3509220514299337	DESIGN	0.00790638386010973	DEFECT	5.2308471001087085E-5	TEST	1.758831511528074E-5	IMPLEMENTATION	3.133519118297583E-6	DOCUMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999999715112159	WITHOUT_CLASSIFICATION	1.8939360357661443E-8	IMPLEMENTATION	9.051487759016838E-9	DESIGN	2.3867264875950415E-10	TEST	2.0135283084680677E-10	DOCUMENTATION	5.791048994744719E-11	DEFECT
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.6131480017998777	WITHOUT_CLASSIFICATION	0.3859731044767796	DESIGN	8.676844831914968E-4	DEFECT	7.311386237522413E-6	IMPLEMENTATION	2.4173282440976854E-6	DOCUMENTATION	1.4805256696178628E-6	TEST
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9998301769000975	WITHOUT_CLASSIFICATION	1.6167603773139643E-4	DESIGN	7.478411227779718E-6	DEFECT	3.9325403288222713E-7	DOCUMENTATION	2.348671949292017E-7	TEST	4.0529715464001735E-8	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9995912023628842	WITHOUT_CLASSIFICATION	4.016931728186333E-4	DESIGN	6.308882512209785E-6	DEFECT	3.978621733066773E-7	DOCUMENTATION	3.520056594856532E-7	TEST	4.5713952110247995E-8	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9933879919542147	WITHOUT_CLASSIFICATION	0.00656374774799121	DESIGN	3.782274403198746E-5	IMPLEMENTATION	5.30305830071756E-6	TEST	3.46678490601761E-6	DOCUMENTATION	1.6677105553988837E-6	DEFECT
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999610316581519	WITHOUT_CLASSIFICATION	3.877493617921571E-5	DESIGN	1.4671367708963175E-7	DOCUMENTATION	2.520937384111691E-8	TEST	2.1451523937578598E-8	DEFECT	3.109392899486891E-11	IMPLEMENTATION
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9995704210372213	WITHOUT_CLASSIFICATION	3.928199262510105E-4	DESIGN	3.1437955818340644E-5	IMPLEMENTATION	2.5824061723380953E-6	DEFECT	1.5005446702866755E-6	DOCUMENTATION	1.2381298668340655E-6	TEST
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999996373251662	WITHOUT_CLASSIFICATION	3.476085410489172E-7	DEFECT	8.571298515762529E-9	DESIGN	2.4245743051653287E-9	IMPLEMENTATION	2.163412852898004E-9	DOCUMENTATION	1.907007168541292E-9	TEST
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999997662322361	WITHOUT_CLASSIFICATION	1.9440438400815774E-7	IMPLEMENTATION	2.4047306486274728E-8	DEFECT	1.3327287942381808E-8	DESIGN	1.248887229808464E-9	TEST	7.39898223719974E-10	DOCUMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.9965579626890032	WITHOUT_CLASSIFICATION	0.0034272061670732362	DESIGN	5.443102460044468E-6	DEFECT	3.2557243929682954E-6	IMPLEMENTATION	3.093138438578398E-6	TEST	3.0391786320389187E-6	DOCUMENTATION
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999700728131191	WITHOUT_CLASSIFICATION	2.7216521914373083E-5	DESIGN	2.612628345880316E-6	DEFECT	7.688115120175723E-8	TEST	1.9332986471347766E-8	DOCUMENTATION	1.8224828584949556E-9	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999999937197851	WITHOUT_CLASSIFICATION	3.9630481810472665E-9	DESIGN	1.7348429506894227E-9	TEST	5.714279750954108E-10	DOCUMENTATION	7.268964529163799E-12	IMPLEMENTATION	3.6268472795397486E-12	DEFECT
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999288034881	WITHOUT_CLASSIFICATION	7.07993784740369E-8	DESIGN	2.230307163626669E-10	TEST	1.6275235045868334E-10	DOCUMENTATION	1.0875275610872795E-11	DEFECT	4.751185957285596E-13	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999646346941242	WITHOUT_CLASSIFICATION	3.4588151971454946E-5	DESIGN	6.123274991217046E-7	DEFECT	8.184718640099852E-8	DOCUMENTATION	5.692740804040586E-8	TEST	2.6051810568873666E-8	IMPLEMENTATION
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9976811386350581	WITHOUT_CLASSIFICATION	0.002285378274271283	DESIGN	2.5894993096238792E-5	DEFECT	5.095252909111775E-6	IMPLEMENTATION	2.0288793047775924E-6	DOCUMENTATION	4.6396536051088093E-7	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999995532280503	WITHOUT_CLASSIFICATION	3.8514705261272323E-7	DESIGN	2.9651126949657784E-8	DEFECT	1.2131890849897769E-8	IMPLEMENTATION	1.0991296242731698E-8	TEST	8.850583102415358E-9	DOCUMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9980156559490336	WITHOUT_CLASSIFICATION	0.001979186594335308	DESIGN	4.183934919119156E-6	IMPLEMENTATION	7.702058984062491E-7	DEFECT	1.1763394685932027E-7	DOCUMENTATION	8.568186679034184E-8	TEST
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999931098952809	WITHOUT_CLASSIFICATION	6.486045768260909E-6	IMPLEMENTATION	1.8484827442967483E-7	TEST	1.0145181505956834E-7	DOCUMENTATION	7.795290336341165E-8	DEFECT	3.980595798513745E-8	DESIGN
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999732592757515	WITHOUT_CLASSIFICATION	2.0422000843148687E-5	DESIGN	5.3666593665035585E-6	DEFECT	3.711523833457403E-7	IMPLEMENTATION	3.479696616887326E-7	DOCUMENTATION	2.3294199373138955E-7	TEST
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9997252196463586	WITHOUT_CLASSIFICATION	2.4272021052726943E-4	DESIGN	2.3095465310475458E-5	DEFECT	8.398693141871589E-6	IMPLEMENTATION	3.3835301992899323E-7	TEST	2.276316419072929E-7	DOCUMENTATION
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999622363749764	WITHOUT_CLASSIFICATION	3.6573664509342724E-5	DESIGN	4.228162510401903E-7	TEST	3.5976402127145835E-7	DEFECT	2.3385661537356719E-7	DOCUMENTATION	1.735236263758767E-7	IMPLEMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.9998831308226829	WITHOUT_CLASSIFICATION	6.478173250034241E-5	DESIGN	3.130729296350839E-5	DEFECT	1.6299648792485652E-5	IMPLEMENTATION	2.2693053727017855E-6	DOCUMENTATION	2.211197687943929E-6	TEST
// do a check	WITHOUT_CLASSIFICATION	0.999959057638581	WITHOUT_CLASSIFICATION	3.589502332290176E-5	DESIGN	4.194118089577335E-6	IMPLEMENTATION	6.45725633313703E-7	DEFECT	1.830507836919337E-7	DOCUMENTATION	2.444358951203003E-8	TEST
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999969393455916	WITHOUT_CLASSIFICATION	3.0467276614013994E-6	DESIGN	9.1007515548487E-9	DEFECT	4.502139545459725E-9	IMPLEMENTATION	2.58981671725108E-10	DOCUMENTATION	6.487398461525905E-11	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9996905610336051	WITHOUT_CLASSIFICATION	1.8373352079128905E-4	DESIGN	1.172007409518259E-4	DEFECT	5.241487675452334E-6	IMPLEMENTATION	2.7243938059472467E-6	DOCUMENTATION	5.388231702552164E-7	TEST
// We've been here before	WITHOUT_CLASSIFICATION	0.9998740585197448	WITHOUT_CLASSIFICATION	6.048371878824196E-5	DEFECT	4.3716984467761055E-5	DESIGN	1.5461528164353442E-5	IMPLEMENTATION	3.954210122128184E-6	DOCUMENTATION	2.3250387127603328E-6	TEST
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999827633238021	WITHOUT_CLASSIFICATION	1.633239576496386E-5	DESIGN	6.794425750951541E-7	DEFECT	1.5891930003584336E-7	TEST	4.600289002745199E-8	DOCUMENTATION	1.9915667801571433E-8	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9996905610336051	WITHOUT_CLASSIFICATION	1.8373352079128905E-4	DESIGN	1.172007409518259E-4	DEFECT	5.241487675452334E-6	IMPLEMENTATION	2.7243938059472467E-6	DOCUMENTATION	5.388231702552164E-7	TEST
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999993171067054	WITHOUT_CLASSIFICATION	6.658671826181927E-7	DESIGN	1.132378194539974E-8	DEFECT	4.080156759728901E-9	TEST	1.4050354188442583E-9	IMPLEMENTATION	2.171380061900317E-10	DOCUMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.9999948357974826	WITHOUT_CLASSIFICATION	2.3380313659068157E-6	DESIGN	2.1536465709679924E-6	DEFECT	5.910652622737055E-7	IMPLEMENTATION	5.441481194793112E-8	TEST	2.704450640632878E-8	DOCUMENTATION
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999926139027264	WITHOUT_CLASSIFICATION	6.06384893860583E-6	IMPLEMENTATION	1.0349981825783423E-6	DESIGN	1.9140777990405633E-7	DOCUMENTATION	8.020203491868359E-8	TEST	1.5640337661359426E-8	DEFECT
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999611548588158	WITHOUT_CLASSIFICATION	3.25869437039812E-5	IMPLEMENTATION	2.9531989981753777E-6	DESIGN	2.8062735472314937E-6	DEFECT	3.028493484944469E-7	DOCUMENTATION	1.958755864780556E-7	TEST
// force initialize!	WITHOUT_CLASSIFICATION	0.9999997255676979	WITHOUT_CLASSIFICATION	1.8293747719656853E-7	IMPLEMENTATION	4.639557736016371E-8	DEFECT	3.0976178826441175E-8	DESIGN	1.010685908471617E-8	DOCUMENTATION	4.016209639591393E-9	TEST
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999999137771928	WITHOUT_CLASSIFICATION	7.073436908787691E-8	IMPLEMENTATION	1.3322349049888797E-8	DESIGN	1.3868628411182933E-9	DEFECT	6.677053008475397E-10	TEST	1.1152074877054243E-10	DOCUMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999712836982227	WITHOUT_CLASSIFICATION	1.4082223860798844E-5	DESIGN	1.2220098947589063E-5	IMPLEMENTATION	8.772116959685238E-7	DOCUMENTATION	8.036421675916262E-7	DEFECT	7.331251053190719E-7	TEST
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999997900523566	WITHOUT_CLASSIFICATION	1.6379215054013166E-7	DESIGN	3.988315892447912E-8	IMPLEMENTATION	2.834076172094026E-9	TEST	1.8743379321326652E-9	DEFECT	1.563919684989813E-9	DOCUMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9998963947925891	WITHOUT_CLASSIFICATION	9.159404693668401E-5	DESIGN	1.112100768906553E-5	IMPLEMENTATION	8.564293125748432E-7	DEFECT	1.765897553551217E-8	DOCUMENTATION	1.6064497168296113E-8	TEST
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999785652139996	WITHOUT_CLASSIFICATION	1.1977565243661739E-5	DESIGN	7.7327254402695E-6	IMPLEMENTATION	9.647246270650144E-7	DEFECT	5.243231351507849E-7	DOCUMENTATION	2.3544755415476176E-7	TEST
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.999999580024569	WITHOUT_CLASSIFICATION	3.8264245158679233E-7	DEFECT	2.989435884485519E-8	DESIGN	5.575645274595873E-9	DOCUMENTATION	1.6600900527218157E-9	IMPLEMENTATION	2.0288515874316718E-10	TEST
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.999992001230798	WITHOUT_CLASSIFICATION	5.117232361683909E-6	DESIGN	2.246280682784505E-6	IMPLEMENTATION	5.952503285181213E-7	DEFECT	3.1011962590613126E-8	TEST	8.993866353723192E-9	DOCUMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9997920557413643	WITHOUT_CLASSIFICATION	1.9696345372355556E-4	DESIGN	1.0182427355729128E-5	IMPLEMENTATION	3.8898603844069564E-7	TEST	2.5521438328013834E-7	DEFECT	1.5417713454548948E-7	DOCUMENTATION
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999994845303	WITHOUT_CLASSIFICATION	2.494671778054884E-10	DESIGN	1.7573904402970483E-10	TEST	8.796083532269133E-11	DEFECT	2.2360377609116773E-12	DOCUMENTATION	6.669087730138089E-14	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999879350328396	WITHOUT_CLASSIFICATION	1.203223002552162E-5	DESIGN	2.5691416753341212E-8	IMPLEMENTATION	6.578998017556313E-9	DEFECT	3.9536760942904117E-10	TEST	7.135251585886824E-11	DOCUMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9844797308039309	WITHOUT_CLASSIFICATION	0.015513254470757689	DESIGN	4.061674024082864E-6	DEFECT	1.553377668468189E-6	TEST	1.3084783810527724E-6	IMPLEMENTATION	9.119523772256493E-8	DOCUMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.999281865138571	WITHOUT_CLASSIFICATION	4.7671103541046476E-4	IMPLEMENTATION	1.9014589358109108E-4	DESIGN	3.876796851377982E-5	DEFECT	8.1592968659406E-6	DOCUMENTATION	4.350667057606847E-6	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.999281865138571	WITHOUT_CLASSIFICATION	4.7671103541046476E-4	IMPLEMENTATION	1.9014589358109108E-4	DESIGN	3.876796851377982E-5	DEFECT	8.1592968659406E-6	DOCUMENTATION	4.350667057606847E-6	TEST
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999993028685127	WITHOUT_CLASSIFICATION	6.745187191379577E-7	DESIGN	1.7538318665896834E-8	DEFECT	4.988420202820815E-9	IMPLEMENTATION	5.8173844284819966E-11	TEST	2.7855450905473476E-11	DOCUMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.999878723750697	WITHOUT_CLASSIFICATION	1.0305056061005749E-4	DEFECT	8.865343827908074E-6	IMPLEMENTATION	4.427125442310865E-6	DESIGN	4.083628669052399E-6	DOCUMENTATION	8.495907536387522E-7	TEST
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999593443939779	WITHOUT_CLASSIFICATION	3.9536830158848804E-5	DEFECT	6.98781367161002E-7	DOCUMENTATION	2.2065891748528575E-7	DESIGN	1.0440895697911907E-7	IMPLEMENTATION	9.492662147869818E-8	TEST
//re-snapshot	WITHOUT_CLASSIFICATION	0.9997327994347628	WITHOUT_CLASSIFICATION	2.286569074497664E-4	DESIGN	2.629274914221706E-5	IMPLEMENTATION	7.910491464401726E-6	DEFECT	2.188227701820519E-6	TEST	2.1521894789873605E-6	DOCUMENTATION
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999969314421618	WITHOUT_CLASSIFICATION	1.390394331408901E-6	DESIGN	1.2911114489989865E-6	IMPLEMENTATION	2.0934100048944528E-7	DEFECT	1.7186392606026783E-7	DOCUMENTATION	5.847131189035892E-9	TEST
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.6031380941213537	DESIGN	0.35964132726138326	WITHOUT_CLASSIFICATION	0.03656777344328505	DEFECT	5.962161183418296E-4	TEST	5.1825352178307404E-5	DOCUMENTATION	4.763703457879752E-6	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9999194275130949	WITHOUT_CLASSIFICATION	7.815837304221345E-5	DEFECT	9.634624240650784E-7	DESIGN	6.380765082845384E-7	DOCUMENTATION	6.353530079576151E-7	IMPLEMENTATION	1.7722192257629274E-7	TEST
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999653677686278	WITHOUT_CLASSIFICATION	3.446514443119756E-5	DESIGN	1.4723045794085198E-7	DEFECT	1.649084182655296E-8	DOCUMENTATION	3.014643193954298E-9	IMPLEMENTATION	3.509980455623205E-10	TEST
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999447137689571	WITHOUT_CLASSIFICATION	5.222312897679299E-5	DESIGN	2.2248713947106643E-6	DEFECT	6.39683969960703E-7	IMPLEMENTATION	1.249014282288131E-7	TEST	7.364527309220653E-8	DOCUMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9998054022213309	WITHOUT_CLASSIFICATION	1.3826312362989323E-4	IMPLEMENTATION	3.24712570834376E-5	DEFECT	2.3138425764651106E-5	DESIGN	4.337425239493562E-7	DOCUMENTATION	2.9122966717340464E-7	TEST
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9993181186877542	WITHOUT_CLASSIFICATION	6.717862935505002E-4	DESIGN	9.541571494134577E-6	DEFECT	3.193987499686292E-7	IMPLEMENTATION	1.881639621074065E-7	DOCUMENTATION	4.588448919842546E-8	TEST
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999933969613284	WITHOUT_CLASSIFICATION	6.542761798724058E-6	DESIGN	3.617506069154198E-8	DOCUMENTATION	2.4000331950564983E-8	IMPLEMENTATION	5.79642769677261E-11	TEST	4.351591841733321E-11	DEFECT
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999124243375725	WITHOUT_CLASSIFICATION	8.737726891883024E-5	DESIGN	1.2073745869287377E-7	IMPLEMENTATION	4.794333287966748E-8	DOCUMENTATION	2.6206039988670004E-8	DEFECT	3.5066770054928374E-9	TEST
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9663835254021663	WITHOUT_CLASSIFICATION	0.03349588031479926	DESIGN	6.084534513095091E-5	DEFECT	5.649262612573754E-5	IMPLEMENTATION	2.730940479339293E-6	TEST	5.253712983982802E-7	DOCUMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999994472638231	WITHOUT_CLASSIFICATION	5.461073645935708E-7	DESIGN	5.771371500716759E-9	IMPLEMENTATION	5.071652035142273E-10	DEFECT	3.002557339894519E-10	DOCUMENTATION	5.001999559615097E-11	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9992928195054203	WITHOUT_CLASSIFICATION	6.738585092689949E-4	DESIGN	2.838536569067703E-5	IMPLEMENTATION	2.1613370255692937E-6	DOCUMENTATION	1.7080822106679169E-6	DEFECT	1.0672003838408868E-6	TEST
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999995590298157	WITHOUT_CLASSIFICATION	2.9398109771898867E-7	DESIGN	1.2511434258810087E-7	IMPLEMENTATION	1.4099367298176764E-8	TEST	7.1223025760348535E-9	DEFECT	6.53073962360189E-10	DOCUMENTATION
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999996428273923	WITHOUT_CLASSIFICATION	3.51560010536018E-7	DESIGN	3.271681890777724E-9	DEFECT	1.7773045685480287E-9	IMPLEMENTATION	4.598745156852738E-10	DOCUMENTATION	1.037363048972294E-10	TEST
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9942202696338232	WITHOUT_CLASSIFICATION	0.00414585243818602	DESIGN	8.444770104108654E-4	DEFECT	6.123012724711463E-4	IMPLEMENTATION	1.6824370281884912E-4	DOCUMENTATION	8.855942289912394E-6	TEST
//do the test	WITHOUT_CLASSIFICATION	0.9980036657840904	WITHOUT_CLASSIFICATION	0.0019855103910386904	TEST	4.6255188555765824E-6	DOCUMENTATION	2.695314073814932E-6	DESIGN	2.1650088579195587E-6	IMPLEMENTATION	1.3379830835122405E-6	DEFECT
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999978841555051	WITHOUT_CLASSIFICATION	1.5240014704062844E-6	DESIGN	5.826164835814754E-7	DEFECT	4.59520691279999E-9	IMPLEMENTATION	2.431635805955673E-9	TEST	2.1996981882879464E-9	DOCUMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.9999822217295801	WITHOUT_CLASSIFICATION	8.882854484260013E-6	DESIGN	5.4785662895561995E-6	IMPLEMENTATION	2.9659595336049125E-6	DEFECT	2.412416847959353E-7	TEST	2.0964842786745807E-7	DOCUMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999683286799109	WITHOUT_CLASSIFICATION	3.1423620263202806E-5	DESIGN	2.418056609328325E-7	DEFECT	4.888280648924199E-9	DOCUMENTATION	8.271592707501273E-10	TEST	1.787250736628482E-10	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999997105748893	WITHOUT_CLASSIFICATION	2.830989757220052E-7	DESIGN	3.6273034640213094E-9	DEFECT	1.9317072784305576E-9	DOCUMENTATION	4.3316412098078824E-10	TEST	3.3396008690517166E-10	IMPLEMENTATION
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999266033723	WITHOUT_CLASSIFICATION	5.5769965061138317E-8	IMPLEMENTATION	1.2447707889413553E-8	DESIGN	3.442978901398338E-9	DEFECT	1.6698473309008219E-9	DOCUMENTATION	6.612845197000764E-11	TEST
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999968323445335	WITHOUT_CLASSIFICATION	2.0065323549977265E-6	DESIGN	1.1106579859245934E-6	IMPLEMENTATION	2.915177351972075E-8	DEFECT	2.039384265565659E-8	DOCUMENTATION	9.195095139469936E-10	TEST
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999980392298541	WITHOUT_CLASSIFICATION	1.9514997551876067E-6	DESIGN	5.491143517096269E-9	TEST	3.471030676262709E-9	DEFECT	2.216129007586675E-10	IMPLEMENTATION	8.660369069106885E-11	DOCUMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.7065585383073658	DESIGN	0.29286211415638796	WITHOUT_CLASSIFICATION	3.31961520625814E-4	DEFECT	2.401091729350986E-4	IMPLEMENTATION	5.711560572943567E-6	TEST	1.5652821122837029E-6	DOCUMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999873952236794	WITHOUT_CLASSIFICATION	1.0434778225924323E-5	DESIGN	1.084394105984162E-6	IMPLEMENTATION	6.858312887014435E-7	DEFECT	3.654846615950623E-7	TEST	3.4288038552242375E-8	DOCUMENTATION
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999841995687271	WITHOUT_CLASSIFICATION	9.291220290992485E-6	DEFECT	4.707626124160788E-6	DESIGN	1.1841533469652734E-6	IMPLEMENTATION	4.802789353165282E-7	DOCUMENTATION	1.3715257543254982E-7	TEST
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999977066067485	WITHOUT_CLASSIFICATION	1.0079884731176805E-6	IMPLEMENTATION	6.815784087910039E-7	DESIGN	3.6517919688994135E-7	TEST	2.1467903924273145E-7	DOCUMENTATION	2.3968133486139445E-8	DEFECT
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999867244343399	WITHOUT_CLASSIFICATION	9.5758439716812E-6	DESIGN	2.62965293898883E-6	IMPLEMENTATION	7.004064331071119E-7	DEFECT	2.782268682900963E-7	DOCUMENTATION	9.143544818859213E-8	TEST
//count++;	WITHOUT_CLASSIFICATION	0.9997561299035314	WITHOUT_CLASSIFICATION	1.9575418719945597E-4	DESIGN	4.1033426655365916E-5	DEFECT	3.934404930018611E-6	DOCUMENTATION	1.9688316029114885E-6	IMPLEMENTATION	1.1792460809537434E-6	TEST
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999508178302348	WITHOUT_CLASSIFICATION	4.136221880088234E-5	DESIGN	6.064457482125253E-6	IMPLEMENTATION	1.0442901277245147E-6	TEST	4.2811694176361965E-7	DOCUMENTATION	2.8308641264261757E-7	DEFECT
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9997167105759741	WITHOUT_CLASSIFICATION	2.7468541819395537E-4	DESIGN	5.853705928149291E-6	DEFECT	1.3327979359519092E-6	IMPLEMENTATION	1.1340397163177061E-6	DOCUMENTATION	2.8346225140670285E-7	TEST
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999991095268652	WITHOUT_CLASSIFICATION	4.984086894438803E-7	IMPLEMENTATION	2.2009603766422414E-7	DEFECT	1.4427382836715956E-7	DESIGN	1.4324518974899614E-8	DOCUMENTATION	1.3370060344850857E-8	TEST
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999920309046488	WITHOUT_CLASSIFICATION	6.173988405286636E-6	IMPLEMENTATION	9.016147443972432E-7	TEST	6.419087788357344E-7	DESIGN	2.2869879984388536E-7	DOCUMENTATION	2.288462277115795E-8	DEFECT
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9967136176468481	WITHOUT_CLASSIFICATION	0.003252186824128117	DESIGN	2.470676947011681E-5	DEFECT	7.172509088549882E-6	IMPLEMENTATION	1.8721818048944703E-6	DOCUMENTATION	4.4406866022583803E-7	TEST
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999999842633871	WITHOUT_CLASSIFICATION	8.454140579746497E-9	IMPLEMENTATION	5.537548423877382E-9	DEFECT	1.360355740018432E-9	TEST	1.9493512402886178E-10	DOCUMENTATION	1.8963299434214264E-10	DESIGN
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9996613368053464	WITHOUT_CLASSIFICATION	3.3663522639389805E-4	DEFECT	1.484858849068241E-6	DESIGN	4.442864545915702E-7	TEST	5.211345166247424E-8	IMPLEMENTATION	4.6709504309161004E-8	DOCUMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.9996730545059166	WITHOUT_CLASSIFICATION	3.202551479291548E-4	DESIGN	2.672746854923828E-6	IMPLEMENTATION	1.7821607500383797E-6	TEST	1.7169662811298343E-6	DEFECT	5.184722681544517E-7	DOCUMENTATION
// create one	WITHOUT_CLASSIFICATION	0.9999978083867302	WITHOUT_CLASSIFICATION	1.7005616593545968E-6	DESIGN	3.3204401711973776E-7	IMPLEMENTATION	1.039216013129679E-7	DEFECT	3.2146771185297304E-8	DOCUMENTATION	2.293922078737482E-8	TEST
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9994777159711368	WITHOUT_CLASSIFICATION	5.216295331651334E-4	DEFECT	5.34493181034923E-7	DESIGN	5.946010446162121E-8	IMPLEMENTATION	5.938262338691282E-8	DOCUMENTATION	1.1597890611766902E-9	TEST
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999699378321282	WITHOUT_CLASSIFICATION	2.9993908475198222E-5	DESIGN	4.5660947056281634E-8	DEFECT	1.6630219910773802E-8	IMPLEMENTATION	4.374081580391251E-9	DOCUMENTATION	1.5941481712854199E-9	TEST
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999998718860091	WITHOUT_CLASSIFICATION	8.807423491316351E-8	DESIGN	3.517636186874863E-8	DEFECT	3.2900599627428746E-9	TEST	1.0383690285442891E-9	DOCUMENTATION	5.349653371374519E-10	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.999963065656172	WITHOUT_CLASSIFICATION	3.6904390365235644E-5	DESIGN	1.7737073438767585E-8	DEFECT	9.114588044824173E-9	IMPLEMENTATION	2.7393538674766245E-9	TEST	3.6244753173881164E-10	DOCUMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998962579556347	WITHOUT_CLASSIFICATION	7.579523766278423E-5	DESIGN	1.936097193840969E-5	IMPLEMENTATION	7.554046022518599E-6	DEFECT	8.031758866817242E-7	DOCUMENTATION	2.2861285508046484E-7	TEST
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995208967648	WITHOUT_CLASSIFICATION	4.428516477242687E-7	DEFECT	2.6832795217210787E-8	IMPLEMENTATION	6.255778251519036E-9	DESIGN	2.4236869457566782E-9	TEST	7.393270732767681E-10	DOCUMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947062848921	WITHOUT_CLASSIFICATION	3.124810538830176E-6	DESIGN	1.9775973998533335E-6	DEFECT	1.2653849848592565E-7	IMPLEMENTATION	4.105058688695745E-8	DOCUMENTATION	2.3718083978778362E-8	TEST
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9794817477961796	WITHOUT_CLASSIFICATION	0.020473519807006704	DESIGN	4.4726600563124274E-5	DEFECT	4.5771083626598405E-9	IMPLEMENTATION	1.1096241031823561E-9	TEST	1.0951816273972066E-10	DOCUMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999996927446512	WITHOUT_CLASSIFICATION	2.3027773035650809E-7	IMPLEMENTATION	5.0867658667196814E-8	DEFECT	1.9256781605275488E-8	DESIGN	6.29958590894072E-9	DOCUMENTATION	5.535924145481483E-10	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9997691624667374	WITHOUT_CLASSIFICATION	1.5744223816639152E-4	DESIGN	6.644836724879456E-5	IMPLEMENTATION	3.672882604898921E-6	DEFECT	2.505849997271748E-6	DOCUMENTATION	7.681952452665731E-7	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9997691624667374	WITHOUT_CLASSIFICATION	1.5744223816639152E-4	DESIGN	6.644836724879456E-5	IMPLEMENTATION	3.672882604898921E-6	DEFECT	2.505849997271748E-6	DOCUMENTATION	7.681952452665731E-7	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999788701454	WITHOUT_CLASSIFICATION	1.9067491910291E-8	DESIGN	9.727983087025878E-10	DEFECT	5.528980054637408E-10	DOCUMENTATION	3.411720078577662E-10	IMPLEMENTATION	1.954943326681917E-10	TEST
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999512245517336	WITHOUT_CLASSIFICATION	4.8744064480396086E-5	DESIGN	3.111812667805164E-8	DEFECT	2.4772677974939535E-10	IMPLEMENTATION	1.0556267403650577E-11	TEST	7.376401766297332E-12	DOCUMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9988019742236326	WITHOUT_CLASSIFICATION	9.493790056178078E-4	DEFECT	2.4406239076475125E-4	DESIGN	3.885459510508871E-6	IMPLEMENTATION	4.7211027994414227E-7	DOCUMENTATION	2.2681019437341534E-7	TEST
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999497141579707	WITHOUT_CLASSIFICATION	2.1812625580891763E-5	DESIGN	1.5791622480238865E-5	IMPLEMENTATION	1.1247765412017038E-5	DEFECT	1.2908366793913914E-6	DOCUMENTATION	1.4299187672678086E-7	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.9988019742236326	WITHOUT_CLASSIFICATION	9.493790056178078E-4	DEFECT	2.4406239076475125E-4	DESIGN	3.885459510508871E-6	IMPLEMENTATION	4.7211027994414227E-7	DOCUMENTATION	2.2681019437341534E-7	TEST
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9972722732263248	WITHOUT_CLASSIFICATION	0.002308206359979304	DESIGN	2.6019614086972737E-4	IMPLEMENTATION	1.2192209550473937E-4	DEFECT	3.700305031374698E-5	TEST	3.9912700767674417E-7	DOCUMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.999640880943825	WITHOUT_CLASSIFICATION	3.5082830731316257E-4	DESIGN	7.691428532843594E-6	DEFECT	3.495390964998542E-7	IMPLEMENTATION	1.3367666266881825E-7	TEST	1.161045698757453E-7	DOCUMENTATION
// named parameter	WITHOUT_CLASSIFICATION	0.9997147915354818	WITHOUT_CLASSIFICATION	2.7423074580963506E-4	DESIGN	1.0490781218777784E-5	IMPLEMENTATION	3.1857151039465764E-7	DEFECT	1.3130158192367896E-7	TEST	3.706439763733363E-8	DOCUMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999935453497791	WITHOUT_CLASSIFICATION	6.307199353538211E-6	DESIGN	1.208773943270893E-7	DEFECT	2.3380557843437766E-8	IMPLEMENTATION	1.6003620775274124E-9	DOCUMENTATION	1.5925529839569166E-9	TEST
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999997398655253	WITHOUT_CLASSIFICATION	2.423111682316656E-7	DESIGN	1.2851374739817527E-8	DEFECT	2.024071936079424E-9	DOCUMENTATION	1.9240386244434173E-9	IMPLEMENTATION	1.0238212307187238E-9	TEST
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.99999952443248	WITHOUT_CLASSIFICATION	2.996419363335727E-7	DEFECT	9.696690414985509E-8	DESIGN	7.586243351759616E-8	TEST	2.577846844757512E-9	DOCUMENTATION	5.183991980046909E-10	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999982835662135	WITHOUT_CLASSIFICATION	1.7077486010670674E-6	DESIGN	5.678729120967833E-9	DEFECT	1.450351697037666E-9	IMPLEMENTATION	8.806387956652942E-10	DOCUMENTATION	6.754657345085121E-10	TEST
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999998436623435	WITHOUT_CLASSIFICATION	1.0430977826758119E-7	DEFECT	3.5651725605693477E-8	DESIGN	7.589957789524383E-9	IMPLEMENTATION	7.215082696609221E-9	DOCUMENTATION	1.5711121653643507E-9	TEST
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999935848765199	WITHOUT_CLASSIFICATION	5.608661274534028E-6	IMPLEMENTATION	7.396474257901855E-7	DESIGN	4.020863644368526E-8	DEFECT	2.055331563333329E-8	DOCUMENTATION	6.052827758298305E-9	TEST
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9997270737291657	WITHOUT_CLASSIFICATION	2.0903456988667908E-4	DESIGN	2.451632265360788E-5	DOCUMENTATION	2.013063162071152E-5	DEFECT	1.3417935414701986E-5	IMPLEMENTATION	5.826811258797014E-6	TEST
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999619464858225	WITHOUT_CLASSIFICATION	3.6711776838284985E-5	DESIGN	1.0263471734971215E-6	DEFECT	2.653770705315677E-7	IMPLEMENTATION	4.218055469073592E-8	DOCUMENTATION	7.83254053266056E-9	TEST
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9992214058853429	WITHOUT_CLASSIFICATION	7.785910382305426E-4	DESIGN	2.8787844567733912E-9	DEFECT	1.2024317636974261E-10	DOCUMENTATION	4.73045521559725E-11	IMPLEMENTATION	3.009443576983636E-11	TEST
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999893872034223	WITHOUT_CLASSIFICATION	5.711283371726656E-6	DEFECT	4.6530023184304E-6	DESIGN	1.0440401848668995E-7	TEST	9.868584919078686E-8	DOCUMENTATION	4.542101985124324E-8	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9997020347564302	WITHOUT_CLASSIFICATION	1.5113223458505023E-4	DESIGN	1.466629101210863E-4	DEFECT	1.6907475455386447E-7	TEST	5.156478813716051E-10	DOCUMENTATION	5.084612598113519E-10	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9976087421837625	WITHOUT_CLASSIFICATION	0.0023912320373066587	DESIGN	2.1062544506443433E-8	DOCUMENTATION	4.244870217970007E-9	DEFECT	4.1553019957731714E-10	TEST	5.598592036541225E-11	IMPLEMENTATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9995064255346906	WITHOUT_CLASSIFICATION	4.935710913659514E-4	DESIGN	3.1414216728470377E-9	DEFECT	2.1866184599046474E-10	DOCUMENTATION	6.999276128941475E-12	TEST	6.860646868431322E-12	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999888944607087	WITHOUT_CLASSIFICATION	7.678445696924464E-6	DESIGN	1.5999080494241147E-6	DEFECT	8.67009979538744E-7	DOCUMENTATION	6.493852610022732E-7	IMPLEMENTATION	3.107903044467148E-7	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999888944607087	WITHOUT_CLASSIFICATION	7.678445696924464E-6	DESIGN	1.5999080494241147E-6	DEFECT	8.67009979538744E-7	DOCUMENTATION	6.493852610022732E-7	IMPLEMENTATION	3.107903044467148E-7	TEST
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9997129692302773	WITHOUT_CLASSIFICATION	2.762564014293947E-4	DESIGN	5.3360523646654266E-6	DEFECT	2.8822253007764565E-6	IMPLEMENTATION	2.3080275740490784E-6	DOCUMENTATION	2.48063053808066E-7	TEST
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999999101841764	WITHOUT_CLASSIFICATION	5.626607243624398E-8	DEFECT	2.6970028360456907E-8	TEST	4.678790798150435E-9	IMPLEMENTATION	1.6673850611421653E-9	DESIGN	2.3354689953582334E-10	DOCUMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999980620638051	WITHOUT_CLASSIFICATION	1.8050366500736644E-6	DEFECT	1.0127517152719415E-7	DESIGN	3.03645565729436E-8	IMPLEMENTATION	7.819689903083384E-10	TEST	4.778476865728828E-10	DOCUMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999779429630092	WITHOUT_CLASSIFICATION	2.1055409577386185E-5	IMPLEMENTATION	9.94716943494201E-7	DESIGN	4.864393858485734E-9	DEFECT	1.5595038582589468E-9	DOCUMENTATION	4.865722683355802E-10	TEST
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9978363554714419	WITHOUT_CLASSIFICATION	0.002163256272789345	DESIGN	3.5964104662929555E-7	DEFECT	2.6705356928759772E-8	TEST	1.251876495123431E-9	IMPLEMENTATION	6.574886993047749E-10	DOCUMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999990850452433	WITHOUT_CLASSIFICATION	5.365880977543202E-7	DESIGN	3.516977420784701E-7	DEFECT	1.7174100528527454E-8	IMPLEMENTATION	8.731484242324538E-9	TEST	7.63332116945153E-10	DOCUMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9926314311259629	WITHOUT_CLASSIFICATION	0.007123526669642365	IMPLEMENTATION	1.7882897503079562E-4	DESIGN	6.498460142780724E-5	DEFECT	1.1245171613206455E-6	TEST	1.0411077484086677E-7	DOCUMENTATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999438515944686	WITHOUT_CLASSIFICATION	4.562160999968372E-5	IMPLEMENTATION	9.527984524552987E-6	DESIGN	6.44889537410392E-7	DEFECT	1.8346654865232817E-7	TEST	1.7045492091996738E-7	DOCUMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.9999994971018624	WITHOUT_CLASSIFICATION	4.790852127887891E-7	DESIGN	1.1404306965921452E-8	DEFECT	7.426750736763652E-9	IMPLEMENTATION	2.9215483949659116E-9	DOCUMENTATION	2.0603186851872175E-9	TEST
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999999570785949	WITHOUT_CLASSIFICATION	4.0480771557016853E-8	IMPLEMENTATION	1.927633344588429E-9	DEFECT	3.774471417811591E-10	DOCUMENTATION	1.205624470964461E-10	DESIGN	1.4990604300715076E-11	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999952507878785	WITHOUT_CLASSIFICATION	4.636171616207038E-6	DESIGN	8.92044490257052E-8	DEFECT	1.0990989094410599E-8	TEST	1.079428573827425E-8	DOCUMENTATION	2.0507814287377056E-9	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999996987180539	WITHOUT_CLASSIFICATION	2.9865528724099147E-7	DESIGN	1.064569268308034E-9	DOCUMENTATION	1.0305815270486623E-9	TEST	4.0748167545671727E-10	DEFECT	1.240264597805227E-10	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.999999924122686	WITHOUT_CLASSIFICATION	6.947015837276524E-8	IMPLEMENTATION	4.382652915581366E-9	DESIGN	1.9385099866561045E-9	DEFECT	4.659061201506355E-11	TEST	3.9401963552211434E-11	DOCUMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999953091143907	WITHOUT_CLASSIFICATION	4.3809389705021825E-6	DESIGN	3.0042664526757226E-7	DEFECT	7.534410217647862E-9	TEST	1.5501910450960444E-9	IMPLEMENTATION	4.3539235693823987E-10	DOCUMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9993149807190193	WITHOUT_CLASSIFICATION	6.793831726257007E-4	DESIGN	2.660034497482011E-6	DOCUMENTATION	1.824968844830573E-6	DEFECT	1.026790513672128E-6	IMPLEMENTATION	1.2431449910101013E-7	TEST
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999999835438135	WITHOUT_CLASSIFICATION	1.5166479261538276E-8	DESIGN	1.1633609527910663E-9	DEFECT	6.635186547660188E-11	TEST	4.405518113793952E-11	DOCUMENTATION	1.593923859656017E-11	IMPLEMENTATION
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9998844388080285	WITHOUT_CLASSIFICATION	1.152050235159081E-4	DESIGN	1.8912748798215134E-7	DEFECT	9.046399920196097E-8	IMPLEMENTATION	6.233907562919899E-8	DOCUMENTATION	1.4237892676111382E-8	TEST
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.826802176699003	WITHOUT_CLASSIFICATION	0.16960834590445456	DESIGN	0.0035108112130199597	IMPLEMENTATION	4.2143447327013294E-5	DOCUMENTATION	2.2631486611396655E-5	DEFECT	1.3891249584012287E-5	TEST
//use the current version	WITHOUT_CLASSIFICATION	0.9999750319152947	WITHOUT_CLASSIFICATION	2.0382998654834716E-5	DESIGN	2.9697374443968824E-6	IMPLEMENTATION	8.77301145549664E-7	DOCUMENTATION	7.308905353208792E-7	DEFECT	7.156925200057998E-9	TEST
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999965738396	WITHOUT_CLASSIFICATION	2.510122436408222E-9	DESIGN	8.591223156288583E-10	IMPLEMENTATION	5.2548232625053016E-11	DEFECT	3.7532557582153394E-12	DOCUMENTATION	6.141598395996072E-13	TEST
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999987214446652	WITHOUT_CLASSIFICATION	7.661671595310773E-7	DEFECT	3.048615253834634E-7	IMPLEMENTATION	1.6117895876792338E-7	DESIGN	2.4375887654747405E-8	TEST	2.1971803584643908E-8	DOCUMENTATION
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999963481116574	WITHOUT_CLASSIFICATION	2.5506410917598752E-6	IMPLEMENTATION	1.0654155368951235E-6	DESIGN	1.9159914375151332E-8	DEFECT	1.1046713710622453E-8	DOCUMENTATION	5.625085900503255E-9	TEST
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9995761187599753	WITHOUT_CLASSIFICATION	3.8199296070350904E-4	IMPLEMENTATION	3.9852812548240515E-5	DESIGN	1.7567966724340066E-6	DEFECT	1.6656718593263788E-7	TEST	1.1210291456166703E-7	DOCUMENTATION
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9967985802982283	WITHOUT_CLASSIFICATION	0.002600167921461016	DESIGN	5.99968388765176E-4	IMPLEMENTATION	7.01276727844319E-7	DEFECT	3.8625916197060176E-7	DOCUMENTATION	1.958556555421673E-7	TEST
//even process null collections	WITHOUT_CLASSIFICATION	0.9999998405938061	WITHOUT_CLASSIFICATION	9.013012100916994E-8	IMPLEMENTATION	3.7007479792048735E-8	DESIGN	2.5232610049511183E-8	DEFECT	5.587581474306978E-9	DOCUMENTATION	1.4484014796981013E-9	TEST
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999465120585026	WITHOUT_CLASSIFICATION	5.333314598195824E-5	DESIGN	9.043016149733555E-8	DEFECT	3.303508703070847E-8	TEST	2.753880517371966E-8	DOCUMENTATION	3.791461884183098E-9	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999992327513875	WITHOUT_CLASSIFICATION	7.123714097467236E-7	DESIGN	5.326076200368607E-8	DEFECT	8.99838865554735E-10	TEST	7.059794580104916E-10	DOCUMENTATION	1.0622474510144415E-11	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.656749804441564	DESIGN	0.34050864047022905	WITHOUT_CLASSIFICATION	0.0014275127171267444	IMPLEMENTATION	0.0013008027478106999	DEFECT	8.008631424443024E-6	TEST	5.230991845092539E-6	DOCUMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999881080819961	WITHOUT_CLASSIFICATION	8.526967172709874E-6	DESIGN	1.6239458172988E-6	DEFECT	1.3650320733957315E-6	IMPLEMENTATION	2.0909515583992315E-7	DOCUMENTATION	1.6687778458131194E-7	TEST
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999330045732204	WITHOUT_CLASSIFICATION	4.405116342990194E-5	DESIGN	2.280993708881502E-5	DEFECT	8.43389589596631E-8	DOCUMENTATION	3.7857856088453686E-8	TEST	1.2129445708273835E-8	IMPLEMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9998819626296777	WITHOUT_CLASSIFICATION	1.1173718551371994E-4	DESIGN	5.674387885823571E-6	DOCUMENTATION	3.724531448178985E-7	DEFECT	1.9088080092324406E-7	TEST	6.246297717419109E-8	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999932011339103	WITHOUT_CLASSIFICATION	6.36403550632146E-6	DESIGN	2.327024985690367E-7	DEFECT	1.3707540688139336E-7	IMPLEMENTATION	3.702959788138772E-8	DOCUMENTATION	2.802308002827522E-8	TEST
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998393461625998	WITHOUT_CLASSIFICATION	7.302628916079603E-5	DEFECT	6.539976353840492E-5	DESIGN	1.974208837597373E-5	TEST	1.997630558557269E-6	IMPLEMENTATION	4.880657664217159E-7	DOCUMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.999954050716474	WITHOUT_CLASSIFICATION	4.45745509642757E-5	DESIGN	9.64738748939475E-7	DEFECT	2.832211921084908E-7	TEST	7.07061112521077E-8	IMPLEMENTATION	5.606650938355641E-8	DOCUMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9998951047981204	WITHOUT_CLASSIFICATION	9.851654948899577E-5	DESIGN	4.127332221433763E-6	DEFECT	1.9686685216761952E-6	IMPLEMENTATION	1.9125722190832844E-7	DOCUMENTATION	9.139442563979473E-8	TEST
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999993466244431	WITHOUT_CLASSIFICATION	6.182469387288032E-7	IMPLEMENTATION	2.9292556379069472E-8	DESIGN	2.3735092713089913E-9	DEFECT	2.044388060221837E-9	DOCUMENTATION	1.4181644219265376E-9	TEST
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999994523785819	WITHOUT_CLASSIFICATION	5.216164898326676E-7	DESIGN	1.5175687756083925E-8	IMPLEMENTATION	7.806410791832183E-9	DEFECT	2.4682005849307185E-9	DOCUMENTATION	5.546290253956837E-10	TEST
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9994469261972145	WITHOUT_CLASSIFICATION	5.377995995425756E-4	DESIGN	8.975799327205807E-6	DEFECT	5.384047843240657E-6	IMPLEMENTATION	4.6928948662223017E-7	DOCUMENTATION	4.450665857935462E-7	TEST
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9986676634920356	WITHOUT_CLASSIFICATION	0.0013074811505821135	DESIGN	2.43851124743979E-5	DEFECT	4.1838977913208756E-7	DOCUMENTATION	2.9033259097737778E-8	TEST	2.2821869548637506E-8	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999987529921681	WITHOUT_CLASSIFICATION	6.253700497355634E-7	DEFECT	5.978951496760478E-7	IMPLEMENTATION	1.2382308083277955E-8	DOCUMENTATION	7.501886407063674E-9	DESIGN	3.858437896267584E-9	TEST
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.999999606639967	WITHOUT_CLASSIFICATION	3.901287027328569E-7	DEFECT	3.039023756811358E-9	DESIGN	1.0485870005602775E-10	DOCUMENTATION	8.373502332367386E-11	TEST	3.712837242931486E-12	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993180308323	WITHOUT_CLASSIFICATION	5.520393409658116E-7	DEFECT	5.6374322281834665E-8	IMPLEMENTATION	3.110642683108609E-8	DESIGN	3.0478269472805407E-8	DOCUMENTATION	1.197080815411417E-8	TEST
//some statistics	WITHOUT_CLASSIFICATION	0.999805799893693	WITHOUT_CLASSIFICATION	1.7207699597770825E-4	DESIGN	1.4445806380888244E-5	IMPLEMENTATION	4.9880995462136975E-6	DOCUMENTATION	2.0962403983747775E-6	DEFECT	5.929640037423587E-7	TEST
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9994880661594489	WITHOUT_CLASSIFICATION	2.219336650614606E-4	DEFECT	2.1863449568678773E-4	DESIGN	6.957263552980987E-5	IMPLEMENTATION	1.7191590101101216E-6	DOCUMENTATION	7.388526299914162E-8	TEST
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999996165490467	WITHOUT_CLASSIFICATION	3.6601030889297203E-7	IMPLEMENTATION	1.7060117960495002E-8	DEFECT	2.9398194566187305E-10	DESIGN	7.859829120433064E-11	TEST	7.946299994372059E-12	DOCUMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9950900831103803	WITHOUT_CLASSIFICATION	0.004831018979301694	DESIGN	7.268503680795974E-5	DEFECT	6.184174138748056E-6	IMPLEMENTATION	2.6914495528449566E-8	TEST	1.784875673171222E-9	DOCUMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.7076958772362858	WITHOUT_CLASSIFICATION	0.2710584394647938	DESIGN	0.018480693218121527	DEFECT	0.0024512033836982896	IMPLEMENTATION	3.1314104909164526E-4	DOCUMENTATION	6.45648009017545E-7	TEST
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999998578070285	WITHOUT_CLASSIFICATION	1.398770190544957E-7	DESIGN	1.1482594680505643E-9	DEFECT	4.533910930871505E-10	IMPLEMENTATION	4.3952206731044924E-10	TEST	2.747799648715367E-10	DOCUMENTATION
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999954384723224	WITHOUT_CLASSIFICATION	4.147758254767665E-6	IMPLEMENTATION	2.0247189687949343E-7	DESIGN	1.7816356543192837E-7	DEFECT	2.6860749044545963E-8	TEST	6.273211410054297E-9	DOCUMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999970832317564	WITHOUT_CLASSIFICATION	2.3000421668652504E-6	DEFECT	3.7391542596934607E-7	TEST	1.8491549296827017E-7	DESIGN	3.23034612355577E-8	IMPLEMENTATION	2.5591696482656563E-8	DOCUMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994397788666	WITHOUT_CLASSIFICATION	3.3352529954248923E-7	DEFECT	1.303904966583178E-7	IMPLEMENTATION	5.554185443029756E-8	DOCUMENTATION	2.595184983625343E-8	TEST	1.4811632920755137E-8	DESIGN
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.999998854359972	WITHOUT_CLASSIFICATION	1.0791805031759926E-6	DESIGN	4.5778258069331504E-8	IMPLEMENTATION	1.106949874623752E-8	TEST	7.609184395830356E-9	DEFECT	2.002583635054018E-9	DOCUMENTATION
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999707226335793	WITHOUT_CLASSIFICATION	2.7968191005242487E-5	DEFECT	1.3008598753206375E-6	DESIGN	8.25677012487156E-9	TEST	5.731524413612832E-11	DOCUMENTATION	1.4548281992641955E-12	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999786906620275	WITHOUT_CLASSIFICATION	1.90642591692038E-5	DESIGN	2.195314262292321E-6	IMPLEMENTATION	3.244005829931721E-8	TEST	9.319442650503242E-9	DEFECT	8.005040068040306E-9	DOCUMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999722149622639	WITHOUT_CLASSIFICATION	2.1932001206570897E-5	DESIGN	4.889409310481813E-6	IMPLEMENTATION	5.712160017567955E-7	DEFECT	2.2129159357420448E-7	TEST	1.711196238787493E-7	DOCUMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999931478369931	WITHOUT_CLASSIFICATION	6.6968216472659025E-6	DESIGN	9.042135562218092E-8	DEFECT	4.834982157311589E-8	DOCUMENTATION	9.681679076331382E-9	IMPLEMENTATION	6.88850325577794E-9	TEST
/* package-private */	WITHOUT_CLASSIFICATION	0.9999931478369931	WITHOUT_CLASSIFICATION	6.6968216472659025E-6	DESIGN	9.042135562218092E-8	DEFECT	4.834982157311589E-8	DOCUMENTATION	9.681679076331382E-9	IMPLEMENTATION	6.88850325577794E-9	TEST
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999999314144331	WITHOUT_CLASSIFICATION	4.48585563632906E-8	TEST	2.3566694819118398E-8	DEFECT	1.3379569582062298E-10	DESIGN	2.5644355363858768E-11	DOCUMENTATION	8.757241589055244E-13	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9998113747270904	WITHOUT_CLASSIFICATION	9.264712312979513E-5	DEFECT	6.502358675300552E-5	DESIGN	2.7809146983699125E-5	IMPLEMENTATION	2.1038286407941076E-6	DOCUMENTATION	1.041587402320815E-6	TEST
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9990310302500423	WITHOUT_CLASSIFICATION	9.642834177813841E-4	DESIGN	4.2045657764657325E-6	DEFECT	2.754532832724167E-7	DOCUMENTATION	1.536277327447014E-7	IMPLEMENTATION	5.268538404213531E-8	TEST
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999881799764114	WITHOUT_CLASSIFICATION	1.1691515038470066E-5	DESIGN	1.0449360969113377E-7	DEFECT	1.7956377347578418E-8	IMPLEMENTATION	5.001017354936405E-9	DOCUMENTATION	1.057545813877303E-9	TEST
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999999797614155	WITHOUT_CLASSIFICATION	1.70587873854926E-8	IMPLEMENTATION	1.6734356350684751E-9	DEFECT	1.4342287462337213E-9	DESIGN	5.3215259352309323E-11	DOCUMENTATION	1.891753632473047E-11	TEST
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9988860347384668	WITHOUT_CLASSIFICATION	0.001111692786138426	IMPLEMENTATION	1.1506822571655566E-6	DEFECT	1.0479581283347194E-6	DESIGN	5.989960324223155E-8	TEST	1.393540595081364E-8	DOCUMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9995111798660471	WITHOUT_CLASSIFICATION	4.48830312098833E-4	DESIGN	3.745677734453866E-5	IMPLEMENTATION	2.0620551787125368E-6	DEFECT	3.9900388186397303E-7	DOCUMENTATION	7.198544885589348E-8	TEST
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999982509663549	WITHOUT_CLASSIFICATION	1.4087686768446022E-6	DESIGN	1.633240204007609E-7	DEFECT	1.1150961650851186E-7	TEST	6.328069140019304E-8	IMPLEMENTATION	2.150639886199456E-9	DOCUMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9998675014784189	WITHOUT_CLASSIFICATION	9.30593442679408E-5	DESIGN	3.391679378086947E-5	TEST	3.2738460734242314E-6	DEFECT	2.2293088955749174E-6	DOCUMENTATION	1.9228563400233728E-8	IMPLEMENTATION
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999990813804	WITHOUT_CLASSIFICATION	8.490106007290787E-10	DESIGN	4.7608099435726763E-11	DEFECT	1.373875884433701E-11	DOCUMENTATION	4.198397929853724E-12	TEST	4.063641521959922E-12	IMPLEMENTATION
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999981929933613	WITHOUT_CLASSIFICATION	1.0139222472567995E-6	DESIGN	3.548148497017214E-7	DEFECT	3.013270918753149E-7	TEST	7.967903167146955E-8	DOCUMENTATION	5.726341815774483E-8	IMPLEMENTATION
//return the id in the event object	WITHOUT_CLASSIFICATION	0.997932653497848	WITHOUT_CLASSIFICATION	0.0020549849878010984	DESIGN	1.1040315087430312E-5	DEFECT	1.1996438840980378E-6	DOCUMENTATION	9.409095246215011E-8	IMPLEMENTATION	2.7464426903082167E-8	TEST
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999986723428073	WITHOUT_CLASSIFICATION	9.077889193842103E-7	DESIGN	1.4101904401076846E-7	DEFECT	1.0728823703278859E-7	DOCUMENTATION	1.0411696714950148E-7	IMPLEMENTATION	6.744402510132877E-8	TEST
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999776518480692	WITHOUT_CLASSIFICATION	2.1321076610654474E-5	DESIGN	7.029157310556514E-7	IMPLEMENTATION	2.9086280198182574E-7	DOCUMENTATION	3.132265100942064E-8	DEFECT	1.974136096181965E-9	TEST
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.6644433280546624	WITHOUT_CLASSIFICATION	0.33555358217338743	DESIGN	2.5698273213308704E-6	DEFECT	2.586276439427164E-7	TEST	2.3286307295964358E-7	DOCUMENTATION	2.8453911874325228E-8	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.999908438639702	WITHOUT_CLASSIFICATION	5.098579817337442E-5	DESIGN	3.770809123856261E-5	DEFECT	1.9541392202761675E-6	IMPLEMENTATION	8.69138245441637E-7	TEST	4.419342037503877E-8	DOCUMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999139339578	WITHOUT_CLASSIFICATION	4.283135793130376E-8	DEFECT	2.9629953999354925E-8	DESIGN	1.34809436490611E-8	IMPLEMENTATION	1.0935376516419857E-10	DOCUMENTATION	1.4432754210239474E-11	TEST
//cachedState,	WITHOUT_CLASSIFICATION	0.9998971895851687	WITHOUT_CLASSIFICATION	9.557099775478153E-5	DESIGN	2.809053365763231E-6	IMPLEMENTATION	2.654235042840588E-6	DEFECT	1.205739863436606E-6	DOCUMENTATION	5.703888044856938E-7	TEST
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.999931204566797	WITHOUT_CLASSIFICATION	6.075113281936519E-5	DESIGN	7.330095527244043E-6	DEFECT	3.5724869737076473E-7	DOCUMENTATION	3.442857552049211E-7	TEST	1.2670403817861814E-8	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999544969377931	WITHOUT_CLASSIFICATION	3.1519636863478276E-5	DESIGN	9.712953201233266E-6	DEFECT	3.889248068153622E-6	IMPLEMENTATION	2.486867794268394E-7	DOCUMENTATION	1.3253729453465794E-7	TEST
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999741637475539	WITHOUT_CLASSIFICATION	2.58136257473468E-5	DESIGN	2.134867283957874E-8	DEFECT	7.641076840871799E-10	TEST	4.755581455142528E-10	DOCUMENTATION	3.8360090578402015E-11	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999994240508067	WITHOUT_CLASSIFICATION	2.624463255629601E-7	IMPLEMENTATION	2.1620902415393713E-7	DEFECT	7.537243741567324E-8	DESIGN	1.3227026629902144E-8	DOCUMENTATION	8.694379517686276E-9	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999580961865083	WITHOUT_CLASSIFICATION	1.4414693966632812E-5	IMPLEMENTATION	1.3233987641494121E-5	DESIGN	1.2056135862072316E-5	DEFECT	1.4782870520066322E-6	DOCUMENTATION	7.207089694610207E-7	TEST
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9988212545734448	WITHOUT_CLASSIFICATION	0.0010059231561140188	IMPLEMENTATION	1.5516125723565044E-4	DEFECT	1.7411394926484374E-5	DESIGN	2.199207073426952E-7	DOCUMENTATION	2.9697571712029304E-8	TEST
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9675051060141128	WITHOUT_CLASSIFICATION	0.030738384872792044	DESIGN	0.0017550001995120148	DEFECT	1.4374058049771655E-6	IMPLEMENTATION	5.373524147507357E-8	DOCUMENTATION	1.7772536689957355E-8	TEST
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9993625919652325	DESIGN	5.717088627075824E-4	DEFECT	6.50885712577947E-5	WITHOUT_CLASSIFICATION	6.02849043214956E-7	IMPLEMENTATION	5.612973413771384E-9	DOCUMENTATION	2.13878562041905E-9	TEST
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9896881941901564	WITHOUT_CLASSIFICATION	0.01023932684279343	IMPLEMENTATION	6.49039776406267E-5	DOCUMENTATION	5.5912090248203426E-6	DESIGN	1.1779202785258718E-6	TEST	8.058601063238642E-7	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9992153764669934	WITHOUT_CLASSIFICATION	2.841579807042069E-4	IMPLEMENTATION	2.4291817474365185E-4	DESIGN	2.3479895931677547E-4	DEFECT	1.1620094099034812E-5	DOCUMENTATION	1.112832414295056E-5	TEST
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999734068169452	WITHOUT_CLASSIFICATION	2.5946333350455182E-5	DESIGN	5.873811686865859E-7	IMPLEMENTATION	4.0636457811213516E-8	DEFECT	1.177610746820761E-8	DOCUMENTATION	7.055970309409851E-9	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999580961865083	WITHOUT_CLASSIFICATION	1.4414693966632812E-5	IMPLEMENTATION	1.3233987641494121E-5	DESIGN	1.2056135862072316E-5	DEFECT	1.4782870520066322E-6	DOCUMENTATION	7.207089694610207E-7	TEST
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999564027413823	WITHOUT_CLASSIFICATION	4.347861389475347E-5	DESIGN	9.369210096863957E-8	DEFECT	1.6188577410365967E-8	TEST	7.047137098944095E-9	DOCUMENTATION	1.7169073543174874E-9	IMPLEMENTATION
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9983365165280569	WITHOUT_CLASSIFICATION	0.0015877111536512336	DESIGN	7.560213588279412E-5	DEFECT	1.6994864782468083E-7	DOCUMENTATION	2.2721353424448496E-10	TEST	6.547749320076611E-12	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.9997581425925917	WITHOUT_CLASSIFICATION	2.2722045821549502E-4	DESIGN	4.297589298946808E-6	TEST	4.233797449730388E-6	DEFECT	3.2974495690711488E-6	DOCUMENTATION	2.8081128751182903E-6	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999390010827341	WITHOUT_CLASSIFICATION	4.0112189138114524E-5	IMPLEMENTATION	1.3773812528432385E-5	DESIGN	5.613956774035082E-6	DEFECT	1.219551575681705E-6	DOCUMENTATION	2.794072494061352E-7	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.999999994522609	WITHOUT_CLASSIFICATION	2.811191965226879E-9	IMPLEMENTATION	2.4617182500514084E-9	DESIGN	1.2989542192016318E-10	DOCUMENTATION	5.107835603681525E-11	TEST	2.3507011146386917E-11	DEFECT
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9054956483615653	WITHOUT_CLASSIFICATION	0.09449884726034204	DESIGN	3.68751714222781E-6	TEST	1.761678189492601E-6	IMPLEMENTATION	3.5421619624293906E-8	DEFECT	1.9761141376164026E-8	DOCUMENTATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9982806503188031	WITHOUT_CLASSIFICATION	0.0016319131151205136	DESIGN	6.35205784248792E-5	IMPLEMENTATION	2.3832070363427204E-5	DEFECT	7.154567248100018E-8	TEST	1.2371615377829768E-8	DOCUMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999996233600916	WITHOUT_CLASSIFICATION	3.2097718743800785E-7	DESIGN	4.8739751092203694E-8	IMPLEMENTATION	3.228048785722523E-9	DOCUMENTATION	2.0030743730949844E-9	DEFECT	1.6918467383422728E-9	TEST
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9998291341775967	WITHOUT_CLASSIFICATION	1.6579244079331477E-4	IMPLEMENTATION	3.224850625397123E-6	DESIGN	1.3998626128809725E-6	TEST	3.118476078510784E-7	DEFECT	1.3682076380292597E-7	DOCUMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999390010827341	WITHOUT_CLASSIFICATION	4.0112189138114524E-5	IMPLEMENTATION	1.3773812528432385E-5	DESIGN	5.613956774035082E-6	DEFECT	1.219551575681705E-6	DOCUMENTATION	2.794072494061352E-7	TEST
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999995437461203	WITHOUT_CLASSIFICATION	4.479320893679357E-7	DESIGN	3.2579464949182126E-9	DOCUMENTATION	2.6631248707083236E-9	DEFECT	2.359629551010442E-9	TEST	4.1089386985951305E-11	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999979521301858	WITHOUT_CLASSIFICATION	1.7520639285391434E-6	DESIGN	2.6935823477408374E-7	IMPLEMENTATION	1.430181389061344E-8	DOCUMENTATION	6.097785512466027E-9	DEFECT	6.048051440159432E-9	TEST
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9992889886087225	WITHOUT_CLASSIFICATION	6.781801384858306E-4	DESIGN	3.2436225071431455E-5	DEFECT	3.481516276907206E-7	DOCUMENTATION	2.937005958745233E-8	TEST	1.7506033010017917E-8	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999607271572226	WITHOUT_CLASSIFICATION	2.0130695535447405E-5	IMPLEMENTATION	1.3387294057643021E-5	DESIGN	4.223010464579926E-6	DEFECT	9.966873836809861E-7	DOCUMENTATION	5.35155335963205E-7	TEST
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999989751632664	WITHOUT_CLASSIFICATION	1.0243190034620796E-6	DESIGN	2.9625947664117065E-10	IMPLEMENTATION	1.446744680641538E-10	DOCUMENTATION	4.2685504413244124E-11	DEFECT	3.411068119429696E-11	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999952507878785	WITHOUT_CLASSIFICATION	4.636171616207038E-6	DESIGN	8.92044490257052E-8	DEFECT	1.0990989094410599E-8	TEST	1.079428573827425E-8	DOCUMENTATION	2.0507814287377056E-9	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999905628452	WITHOUT_CLASSIFICATION	9.348189315507272E-9	DESIGN	5.974948799721998E-11	DEFECT	2.573334313144238E-11	DOCUMENTATION	3.0397692187670717E-12	TEST	4.430466372404781E-13	IMPLEMENTATION
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999997170759477	WITHOUT_CLASSIFICATION	2.7836198559278406E-7	DESIGN	1.6546839145611777E-9	DEFECT	1.140036852747052E-9	DOCUMENTATION	1.0700340604717274E-9	TEST	6.973118373865771E-10	IMPLEMENTATION
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999850498924714	WITHOUT_CLASSIFICATION	1.487429256834951E-5	DESIGN	3.9027989873435544E-8	DOCUMENTATION	2.828964905611837E-8	DEFECT	5.7520986237721906E-9	IMPLEMENTATION	2.745222517131287E-9	TEST
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9973517405005854	WITHOUT_CLASSIFICATION	0.0011679933180112258	DESIGN	8.860153924759577E-4	IMPLEMENTATION	5.841452271529845E-4	DEFECT	8.528730692676814E-6	DOCUMENTATION	1.5768310817140251E-6	TEST
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999245222624692	WITHOUT_CLASSIFICATION	7.526914144569125E-5	DESIGN	1.0268430021129532E-7	DOCUMENTATION	7.757149253935729E-8	TEST	2.827583899098079E-8	DEFECT	6.445332860765443E-11	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999680441472534	WITHOUT_CLASSIFICATION	2.7553182690493496E-5	DESIGN	2.099048614817001E-6	IMPLEMENTATION	1.249908867414463E-6	DEFECT	8.480167854330181E-7	TEST	2.0569578848387103E-7	DOCUMENTATION
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9998811055959292	WITHOUT_CLASSIFICATION	1.1749904436660598E-4	DESIGN	8.996812549213453E-7	TEST	2.4967672193679013E-7	IMPLEMENTATION	2.386030511052905E-7	DOCUMENTATION	7.398676265347425E-9	DEFECT
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999997444420529	WITHOUT_CLASSIFICATION	2.092713306608966E-7	DESIGN	2.0365569953475836E-8	IMPLEMENTATION	1.480201421935525E-8	DEFECT	6.944894241342585E-9	DOCUMENTATION	4.174137923169985E-9	TEST
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999923022689734	WITHOUT_CLASSIFICATION	7.468833020900783E-6	DESIGN	8.663051608321636E-8	IMPLEMENTATION	5.737361933933612E-8	DEFECT	4.8813941340464106E-8	TEST	3.6079928960582736E-8	DOCUMENTATION
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999706202421222	WITHOUT_CLASSIFICATION	2.1709899261223525E-5	IMPLEMENTATION	7.098179153551559E-6	DESIGN	4.062712481822979E-7	DEFECT	1.1772730920262156E-7	DOCUMENTATION	4.768090558649897E-8	TEST
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999118566977677	WITHOUT_CLASSIFICATION	3.748171468757414E-5	DESIGN	2.6088776788214747E-5	IMPLEMENTATION	1.958099161825218E-5	DEFECT	2.5546083447527474E-6	TEST	2.4372107933357277E-6	DOCUMENTATION
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999996936350203	WITHOUT_CLASSIFICATION	2.3839366821786203E-7	DESIGN	6.526766239150444E-8	IMPLEMENTATION	1.8690729212443268E-9	TEST	5.340033936272799E-10	DOCUMENTATION	3.005726784985907E-10	DEFECT
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.999952101009548	WITHOUT_CLASSIFICATION	4.728709540498332E-5	IMPLEMENTATION	4.6680785606879034E-7	DESIGN	1.2557032030848604E-7	TEST	1.856434901052471E-8	DEFECT	9.525216625006351E-10	DOCUMENTATION
// eat it and try next	WITHOUT_CLASSIFICATION	0.9992855910138313	WITHOUT_CLASSIFICATION	6.431390088304196E-4	DESIGN	6.449893457743448E-5	DEFECT	4.821459998175352E-6	IMPLEMENTATION	1.4514533717906071E-6	DOCUMENTATION	4.981293908448706E-7	TEST
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999857271156981	WITHOUT_CLASSIFICATION	1.2951430173441134E-5	IMPLEMENTATION	1.310408902956143E-6	DESIGN	9.069921496193379E-9	DOCUMENTATION	1.6790272569963477E-9	TEST	2.9627680278654246E-10	DEFECT
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999954476277255	WITHOUT_CLASSIFICATION	2.61652793904282E-6	DESIGN	1.8227441730994675E-6	IMPLEMENTATION	4.1882844292258754E-8	DEFECT	3.5976793489050316E-8	DOCUMENTATION	3.5240524479389286E-8	TEST
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.999999982006525	WITHOUT_CLASSIFICATION	1.4197682212700771E-8	DEFECT	1.276545074857972E-9	DESIGN	1.2129970089440427E-9	TEST	1.0403718263465278E-9	IMPLEMENTATION	2.658788019682402E-10	DOCUMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999974635189983	WITHOUT_CLASSIFICATION	2.4267804271693905E-6	DESIGN	8.717103655508818E-8	DEFECT	9.613313709954724E-9	IMPLEMENTATION	8.8551182576563E-9	TEST	4.061106017210287E-9	DOCUMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999978543190893	WITHOUT_CLASSIFICATION	2.060346780545448E-6	DESIGN	5.325712252733299E-8	DEFECT	2.492512812756688E-8	IMPLEMENTATION	3.972008729924679E-9	DOCUMENTATION	3.1798709091250628E-9	TEST
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9956812974909551	WITHOUT_CLASSIFICATION	0.003970735449260054	DESIGN	2.4267880272840027E-4	IMPLEMENTATION	6.333620360994477E-5	DEFECT	2.579177790634343E-5	DOCUMENTATION	1.616027554010534E-5	TEST
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999432263643707	WITHOUT_CLASSIFICATION	3.0858557260663356E-5	IMPLEMENTATION	1.9202758113608623E-5	DESIGN	4.204902904621498E-6	DEFECT	1.3230569444101022E-6	DOCUMENTATION	1.1843604059049506E-6	TEST
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999998833824957	WITHOUT_CLASSIFICATION	7.137534756832702E-8	DESIGN	4.2945013655207896E-8	IMPLEMENTATION	8.910160579425189E-10	DEFECT	7.840678379956784E-10	DOCUMENTATION	6.220592599384956E-10	TEST
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999984446357439	WITHOUT_CLASSIFICATION	7.664128874244421E-7	DESIGN	7.081748971557351E-7	DEFECT	5.276099883574503E-8	TEST	1.7314811874674715E-8	IMPLEMENTATION	1.0700660750345215E-8	DOCUMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999994648386226	WITHOUT_CLASSIFICATION	5.047081586566971E-7	DESIGN	2.6057459741902868E-8	DEFECT	4.286500937477297E-9	TEST	9.619858167790727E-11	DOCUMENTATION	1.3059406721691315E-11	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999938737140075	WITHOUT_CLASSIFICATION	3.849035677019621E-6	DEFECT	1.2935539230622188E-6	IMPLEMENTATION	5.917825253308474E-7	DESIGN	2.020758776000291E-7	DOCUMENTATION	1.898379895493099E-7	TEST
// Note this!!	WITHOUT_CLASSIFICATION	0.9987383640107945	WITHOUT_CLASSIFICATION	9.781528195529302E-4	DESIGN	2.1279583586596954E-4	IMPLEMENTATION	3.6061804529976974E-5	TEST	1.9681442181972305E-5	DOCUMENTATION	1.494408707445517E-5	DEFECT
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999374503400544	WITHOUT_CLASSIFICATION	6.102805324733624E-5	DEFECT	7.251373870898654E-7	IMPLEMENTATION	6.196107828174788E-7	DESIGN	1.28128671053717E-7	DOCUMENTATION	4.8729857288247685E-8	TEST
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999205086035035	WITHOUT_CLASSIFICATION	7.786903170916349E-5	IMPLEMENTATION	1.166589455744188E-6	DESIGN	3.293021796336977E-7	DEFECT	8.223838953426311E-8	TEST	4.423476240244892E-8	DOCUMENTATION
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991557627830453	WITHOUT_CLASSIFICATION	8.180639756970594E-4	DESIGN	1.656800761716001E-5	IMPLEMENTATION	5.715944049174754E-6	DEFECT	3.6522255962423357E-6	DOCUMENTATION	2.3706399512809416E-7	TEST
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9445772322012833	WITHOUT_CLASSIFICATION	0.03737772782203378	DESIGN	0.017647741855182128	DEFECT	3.675602465631191E-4	IMPLEMENTATION	2.9707740020981507E-5	TEST	3.013491655010713E-8	DOCUMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9994072673613852	WITHOUT_CLASSIFICATION	4.936400421909945E-4	IMPLEMENTATION	9.194671794412501E-5	DESIGN	5.404756758849875E-6	DEFECT	1.0315195369560964E-6	DOCUMENTATION	7.096021838634919E-7	TEST
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999887876201666	WITHOUT_CLASSIFICATION	1.1131139950675175E-5	DESIGN	3.963378439363746E-8	DEFECT	2.2619014192941397E-8	DOCUMENTATION	1.229519709513615E-8	IMPLEMENTATION	6.691887071045428E-9	TEST
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999979015863467	WITHOUT_CLASSIFICATION	1.4982593025379897E-6	IMPLEMENTATION	5.86559763602034E-7	DESIGN	6.927829756294189E-9	DOCUMENTATION	5.303330603126564E-9	TEST	1.363426814271844E-9	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999979015863467	WITHOUT_CLASSIFICATION	1.4982593025379897E-6	IMPLEMENTATION	5.86559763602034E-7	DESIGN	6.927829756294189E-9	DOCUMENTATION	5.303330603126564E-9	TEST	1.363426814271844E-9	DEFECT
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999931596981466	WITHOUT_CLASSIFICATION	6.833907626585317E-6	DESIGN	3.0208186334074334E-9	IMPLEMENTATION	2.520136169843762E-9	DOCUMENTATION	8.060689247322493E-10	DEFECT	4.7202975644456545E-11	TEST
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9997490142967296	WITHOUT_CLASSIFICATION	2.059190414949945E-4	DESIGN	3.5508596438907384E-5	DEFECT	8.872570190982206E-6	IMPLEMENTATION	3.7731244797242306E-7	DOCUMENTATION	3.0818269748693683E-7	TEST
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999960966304395	WITHOUT_CLASSIFICATION	2.7110832609521337E-6	DESIGN	1.1078044464656755E-6	IMPLEMENTATION	4.935756009810705E-8	DEFECT	2.1558200115478005E-8	DOCUMENTATION	1.3566092897536529E-8	TEST
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999921577600241	WITHOUT_CLASSIFICATION	6.6483018704868175E-6	IMPLEMENTATION	7.866566162102195E-7	DESIGN	4.043438532557823E-7	DEFECT	1.7635391703356036E-9	DOCUMENTATION	1.1740968459185558E-9	TEST
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999927472312017	WITHOUT_CLASSIFICATION	6.00194273935498E-6	IMPLEMENTATION	5.668496933671502E-7	DESIGN	3.3585451241255776E-7	DOCUMENTATION	3.261675682989037E-7	DEFECT	2.1954284940248834E-8	TEST
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9561860368823115	WITHOUT_CLASSIFICATION	0.04098955890929334	DESIGN	0.002805728104310555	DEFECT	1.1971672106427546E-5	IMPLEMENTATION	5.61378306267128E-6	TEST	1.0906489154618996E-6	DOCUMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9986186612779113	WITHOUT_CLASSIFICATION	0.00137267215667506	DESIGN	8.336068650573625E-6	DEFECT	2.1790336285039308E-7	DOCUMENTATION	7.296460894401365E-8	TEST	3.962879125451617E-8	IMPLEMENTATION
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999932047341138	WITHOUT_CLASSIFICATION	4.936964027410894E-6	DEFECT	1.7720930575395747E-6	DESIGN	5.5772840949024536E-8	TEST	1.7203401500523125E-8	DOCUMENTATION	1.3232558869425939E-8	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999999594537174	WITHOUT_CLASSIFICATION	1.979260835747607E-8	IMPLEMENTATION	1.7313023325678935E-8	DEFECT	1.4577155069668756E-9	DOCUMENTATION	1.383001918248934E-9	DESIGN	5.999333935631216E-10	TEST
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999998434693471	WITHOUT_CLASSIFICATION	1.5515925099930051E-7	DESIGN	1.3680338170163406E-9	DEFECT	2.6579787373218937E-12	DOCUMENTATION	6.937240469496197E-13	TEST	1.6354722885434235E-14	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999956357110461	WITHOUT_CLASSIFICATION	4.2952514292861405E-6	DEFECT	4.680562089072472E-8	TEST	1.2503962789382636E-8	IMPLEMENTATION	7.852375030003489E-9	DESIGN	1.875565676790874E-9	DOCUMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999889694641503	WITHOUT_CLASSIFICATION	9.366101031958497E-6	IMPLEMENTATION	1.6309690613518158E-6	DESIGN	2.6642365770816193E-8	TEST	3.5108929527997162E-9	DOCUMENTATION	3.3124977521781572E-9	DEFECT
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999958592490218	WITHOUT_CLASSIFICATION	3.3019679374983115E-6	IMPLEMENTATION	6.670833863726806E-7	TEST	1.569464091394174E-7	DEFECT	1.3095571335529112E-8	DESIGN	1.6576738904526782E-9	DOCUMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999979015863467	WITHOUT_CLASSIFICATION	1.4982593025379897E-6	IMPLEMENTATION	5.86559763602034E-7	DESIGN	6.927829756294189E-9	DOCUMENTATION	5.303330603126564E-9	TEST	1.363426814271844E-9	DEFECT
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999856356943306	WITHOUT_CLASSIFICATION	8.243265544577874E-6	DEFECT	4.919933670087663E-6	DESIGN	8.05681286176265E-7	IMPLEMENTATION	2.665465431633558E-7	DOCUMENTATION	1.2887862529361882E-7	TEST
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9997670700085383	WITHOUT_CLASSIFICATION	2.1476333068062175E-4	DESIGN	8.546442338901074E-6	IMPLEMENTATION	6.213194430652849E-6	DEFECT	3.0975311370976648E-6	DOCUMENTATION	3.0949287441266466E-7	TEST
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9897721806581008	WITHOUT_CLASSIFICATION	0.008616926876835114	DEFECT	0.0010813203341523679	DESIGN	5.277904015136165E-4	IMPLEMENTATION	1.5465049005020323E-6	TEST	2.3522449754535027E-7	DOCUMENTATION
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999992648706142	WITHOUT_CLASSIFICATION	6.947443710807656E-7	DESIGN	2.494388542105157E-8	TEST	8.458566501626279E-9	IMPLEMENTATION	3.5150129286255036E-9	DOCUMENTATION	3.4675500242353837E-9	DEFECT
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999891714389583	WITHOUT_CLASSIFICATION	8.867636748762438E-6	DESIGN	1.4052998513460376E-6	IMPLEMENTATION	3.0422533923036914E-7	DEFECT	2.4585344364212513E-7	TEST	5.545658817626443E-9	DOCUMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.999950294306396	WITHOUT_CLASSIFICATION	4.663301428611852E-5	DESIGN	2.0814988385485526E-6	DEFECT	9.381786639011923E-7	IMPLEMENTATION	4.643458103137261E-8	DOCUMENTATION	6.567234263662307E-9	TEST
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9996365132561562	WITHOUT_CLASSIFICATION	1.8737721954107154E-4	DESIGN	1.7208975706886232E-4	IMPLEMENTATION	3.3893222263012615E-6	DEFECT	5.870410248220615E-7	TEST	4.3403982736239605E-8	DOCUMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999964820287767	WITHOUT_CLASSIFICATION	1.812458471238304E-6	DESIGN	1.7026732622843613E-6	IMPLEMENTATION	1.355798725653084E-9	TEST	7.511409221302746E-10	DEFECT	7.325501339531571E-10	DOCUMENTATION
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999793995512632	WITHOUT_CLASSIFICATION	1.649578873983618E-5	DESIGN	3.848564215954896E-6	DEFECT	1.923248411819675E-7	IMPLEMENTATION	6.191211071986386E-8	TEST	1.8588291864694066E-9	DOCUMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9998566426457323	WITHOUT_CLASSIFICATION	1.0185189979722878E-4	DESIGN	3.971792484340357E-5	IMPLEMENTATION	1.6308846420593947E-6	TEST	1.3951235956758552E-7	DOCUMENTATION	1.7132625297796275E-8	DEFECT
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9997325824154734	WITHOUT_CLASSIFICATION	2.2948365064011096E-4	DESIGN	3.6424537782055035E-5	IMPLEMENTATION	1.336664502495713E-6	TEST	1.3231664027575464E-7	DEFECT	4.0414961687544855E-8	DOCUMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999205086035035	WITHOUT_CLASSIFICATION	7.786903170916349E-5	IMPLEMENTATION	1.166589455744188E-6	DESIGN	3.293021796336977E-7	DEFECT	8.223838953426311E-8	TEST	4.423476240244892E-8	DOCUMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999979015863467	WITHOUT_CLASSIFICATION	1.4982593025379897E-6	IMPLEMENTATION	5.86559763602034E-7	DESIGN	6.927829756294189E-9	DOCUMENTATION	5.303330603126564E-9	TEST	1.363426814271844E-9	DEFECT
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.99999964897325	WITHOUT_CLASSIFICATION	3.483037652773431E-7	DEFECT	1.22540108875862E-9	IMPLEMENTATION	9.981094601426035E-10	DOCUMENTATION	4.745138049515037E-10	DESIGN	2.496029120470875E-11	TEST
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999998904176404	WITHOUT_CLASSIFICATION	8.5852645450395E-8	DESIGN	1.2615867686853964E-8	IMPLEMENTATION	9.159878607327852E-9	DEFECT	1.94718609171949E-9	DOCUMENTATION	6.781868553805246E-12	TEST
// switch	WITHOUT_CLASSIFICATION	0.9999898037702286	WITHOUT_CLASSIFICATION	9.93558214475762E-6	DESIGN	1.32619187219888E-7	DEFECT	5.6481831615015983E-8	IMPLEMENTATION	4.429513134664761E-8	DOCUMENTATION	2.7251476530131892E-8	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999936094840927	WITHOUT_CLASSIFICATION	2.6199805336378005E-6	DESIGN	1.9780821075500214E-6	IMPLEMENTATION	1.4866016975350237E-6	DEFECT	2.3526700181082757E-7	TEST	7.058456680680049E-8	DOCUMENTATION
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9537181118813618	WITHOUT_CLASSIFICATION	0.02812812336228012	DESIGN	0.018150065418479064	IMPLEMENTATION	2.8350606205865255E-6	DOCUMENTATION	8.290004265283361E-7	TEST	3.527683187915865E-8	DEFECT
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999930551910026	WITHOUT_CLASSIFICATION	4.839189710165986E-6	DESIGN	1.6938301816648987E-6	DEFECT	2.276275279786536E-7	IMPLEMENTATION	1.315228212055198E-7	TEST	5.2638756491181734E-8	DOCUMENTATION
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900511517248	WITHOUT_CLASSIFICATION	9.287353495875881E-6	DESIGN	3.5770062566922747E-7	DEFECT	2.281540671033178E-7	DOCUMENTATION	4.94764253927913E-8	IMPLEMENTATION	2.616366127686594E-8	TEST
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999865802814006	WITHOUT_CLASSIFICATION	1.307539926285555E-5	IMPLEMENTATION	2.1236611740921788E-7	DEFECT	1.2316772715261373E-7	DESIGN	5.0855396674906E-9	TEST	3.699952421337323E-9	DOCUMENTATION
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999923450299	WITHOUT_CLASSIFICATION	7.267352754546561E-9	DESIGN	2.138226311251666E-10	IMPLEMENTATION	9.814424377410104E-11	DOCUMENTATION	5.568001875561623E-11	DEFECT	1.997047852015327E-11	TEST
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999995739658039	WITHOUT_CLASSIFICATION	2.006439461109017E-7	IMPLEMENTATION	1.734542618106106E-7	DESIGN	2.850597527020566E-8	DEFECT	2.0594987115914036E-8	TEST	2.835025824070727E-9	DOCUMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999940160873586	WITHOUT_CLASSIFICATION	5.77484914048326E-6	IMPLEMENTATION	1.996972146413581E-7	DEFECT	6.2373362022689005E-9	DOCUMENTATION	2.49944111472427E-9	DESIGN	6.295088852804671E-10	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998842934233458	WITHOUT_CLASSIFICATION	9.633663503300624E-5	DESIGN	9.417321590089839E-6	IMPLEMENTATION	3.950573628984673E-6	TEST	3.25607236120705E-6	DOCUMENTATION	2.745974040821917E-6	DEFECT
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999970539456189	WITHOUT_CLASSIFICATION	2.3476675886646127E-6	IMPLEMENTATION	5.764474731486809E-7	DESIGN	1.2151127309593644E-8	TEST	9.644156411031417E-9	DOCUMENTATION	1.4403558912789262E-10	DEFECT
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999996911556808	WITHOUT_CLASSIFICATION	1.954000255837294E-7	DESIGN	1.0179953551345763E-7	IMPLEMENTATION	9.043590539069003E-9	TEST	1.620350349540609E-9	DEFECT	9.808171063309673E-10	DOCUMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9972722732263248	WITHOUT_CLASSIFICATION	0.002308206359979304	DESIGN	2.6019614086972737E-4	IMPLEMENTATION	1.2192209550473937E-4	DEFECT	3.700305031374698E-5	TEST	3.9912700767674417E-7	DOCUMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999999816234213	WITHOUT_CLASSIFICATION	9.939969649429908E-9	DESIGN	7.662615569058532E-9	DEFECT	7.471779685742256E-10	IMPLEMENTATION	1.55688852283954E-11	TEST	1.124663930873255E-11	DOCUMENTATION
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999913355676	WITHOUT_CLASSIFICATION	6.329146393988714E-9	DESIGN	2.3289484480432797E-9	DEFECT	4.783809937886386E-12	IMPLEMENTATION	1.0489324244684147E-12	DOCUMENTATION	5.047991641335882E-13	TEST
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.99999238024239	WITHOUT_CLASSIFICATION	7.464586442030515E-6	DEFECT	1.2692719483340021E-7	DESIGN	2.5187107174135704E-8	IMPLEMENTATION	2.3135350931308593E-9	TEST	7.433308550160415E-10	DOCUMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.9999995035653033	WITHOUT_CLASSIFICATION	3.0467230836547047E-7	DESIGN	1.784422720697164E-7	IMPLEMENTATION	8.596756104538554E-9	DEFECT	3.254406655375253E-9	DOCUMENTATION	1.4689534523205291E-9	TEST
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999867301151	WITHOUT_CLASSIFICATION	1.2315567412946993E-8	DESIGN	3.424933889228307E-10	DEFECT	3.169078498198397E-10	DOCUMENTATION	2.878160405940618E-10	IMPLEMENTATION	7.100144527480691E-12	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999759607069903	WITHOUT_CLASSIFICATION	2.3593984918243764E-4	DESIGN	2.218250736261859E-6	IMPLEMENTATION	8.820510037999566E-7	DOCUMENTATION	7.485700977288261E-7	DEFECT	6.042090768035469E-7	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999759607069903	WITHOUT_CLASSIFICATION	2.3593984918243764E-4	DESIGN	2.218250736261859E-6	IMPLEMENTATION	8.820510037999566E-7	DOCUMENTATION	7.485700977288261E-7	DEFECT	6.042090768035469E-7	TEST
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.999378249740399	WITHOUT_CLASSIFICATION	6.19597788220587E-4	DESIGN	2.0261539496545514E-6	DEFECT	8.362139129366186E-8	IMPLEMENTATION	3.158928355002069E-8	TEST	1.1106755814085287E-8	DOCUMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999668196686313	WITHOUT_CLASSIFICATION	3.3178273464046566E-5	DESIGN	1.785376324138918E-9	TEST	2.581774828424941E-10	DEFECT	1.3761071208722363E-11	DOCUMENTATION	5.897183940722464E-13	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9984003251885991	WITHOUT_CLASSIFICATION	0.00159640405463043	IMPLEMENTATION	3.2207073687432193E-6	DEFECT	2.380415035217692E-8	DESIGN	1.601535918206767E-8	TEST	1.0229892126072652E-8	DOCUMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999649518840457	WITHOUT_CLASSIFICATION	2.0836017053946747E-5	DESIGN	9.739424224226456E-6	IMPLEMENTATION	4.171814080059672E-6	DEFECT	2.88590713986655E-7	TEST	1.2269882108791804E-8	DOCUMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999516485944112	WITHOUT_CLASSIFICATION	4.2348389194300426E-5	DESIGN	4.063041240568719E-6	DEFECT	1.53486786059363E-6	IMPLEMENTATION	3.6752215887683553E-7	DOCUMENTATION	3.758513449836903E-8	TEST
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9996063445957915	WITHOUT_CLASSIFICATION	3.835768009369462E-4	DESIGN	8.772458563253204E-6	DEFECT	1.1990167617354253E-6	DOCUMENTATION	8.538914816460316E-8	IMPLEMENTATION	2.173879846443368E-8	TEST
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9972410843667887	WITHOUT_CLASSIFICATION	0.0026909992563273837	DESIGN	5.066755850605286E-5	IMPLEMENTATION	7.081375421594139E-6	DEFECT	5.0844556522023535E-6	DOCUMENTATION	5.082987304087225E-6	TEST
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.999999994744068	WITHOUT_CLASSIFICATION	4.645675173045946E-9	DEFECT	2.459497331331374E-10	DESIGN	2.0475832809785018E-10	TEST	1.4568847270069212E-10	IMPLEMENTATION	1.3860304758726821E-11	DOCUMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.999999994744068	WITHOUT_CLASSIFICATION	4.645675173045946E-9	DEFECT	2.459497331331374E-10	DESIGN	2.0475832809785018E-10	TEST	1.4568847270069212E-10	IMPLEMENTATION	1.3860304758726821E-11	DOCUMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999994692634528	WITHOUT_CLASSIFICATION	3.7720683002008984E-7	DEFECT	8.796508827031153E-8	IMPLEMENTATION	2.6780917413524036E-8	DOCUMENTATION	2.571050241130546E-8	DESIGN	1.3073208913711744E-8	TEST
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999981206004697	WITHOUT_CLASSIFICATION	1.0437071703477335E-6	DESIGN	5.768738489959818E-7	IMPLEMENTATION	1.1050546124245029E-7	DEFECT	9.593890822222725E-8	DOCUMENTATION	5.2374141571735485E-8	TEST
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999476448162478	WITHOUT_CLASSIFICATION	4.370216984293249E-5	DESIGN	7.4421239620583205E-6	DEFECT	7.017438220283852E-7	IMPLEMENTATION	4.397049831238351E-7	DOCUMENTATION	6.944114193191436E-8	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999967347384693	WITHOUT_CLASSIFICATION	3.1966803181731144E-5	DESIGN	2.6748439205716155E-7	DEFECT	2.0643206340122846E-7	IMPLEMENTATION	1.4304764913594894E-7	DOCUMENTATION	6.884802074256343E-8	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999967347384693	WITHOUT_CLASSIFICATION	3.1966803181731144E-5	DESIGN	2.6748439205716155E-7	DEFECT	2.0643206340122846E-7	IMPLEMENTATION	1.4304764913594894E-7	DOCUMENTATION	6.884802074256343E-8	TEST
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999967347384693	WITHOUT_CLASSIFICATION	3.1966803181731144E-5	DESIGN	2.6748439205716155E-7	DEFECT	2.0643206340122846E-7	IMPLEMENTATION	1.4304764913594894E-7	DOCUMENTATION	6.884802074256343E-8	TEST
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.982803586318557	WITHOUT_CLASSIFICATION	0.013482640855975348	DEFECT	0.0022509863556613263	IMPLEMENTATION	0.0014095700309586122	DESIGN	4.960824207099074E-5	TEST	3.6081967768650326E-6	DOCUMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999918674192266	WITHOUT_CLASSIFICATION	8.111196867138237E-6	DESIGN	1.4023806973527696E-8	IMPLEMENTATION	3.1726339559020235E-9	DOCUMENTATION	2.5726602895254324E-9	TEST	1.6148050636368539E-9	DEFECT
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9869857473894478	WITHOUT_CLASSIFICATION	0.013010953826740996	IMPLEMENTATION	2.3188492764775125E-6	TEST	5.33849613690592E-7	DOCUMENTATION	2.560472320325289E-7	DEFECT	1.9003768887912126E-7	DESIGN
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.6784335688691726	DEFECT	0.17563961852755924	WITHOUT_CLASSIFICATION	0.10654462903230363	IMPLEMENTATION	0.03844966216857442	DESIGN	9.222468808723495E-4	TEST	1.0274521517717346E-5	DOCUMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999368849332689	WITHOUT_CLASSIFICATION	5.3807141485526604E-5	DESIGN	5.916986682414576E-6	IMPLEMENTATION	3.312365292873183E-6	DEFECT	5.644569016797386E-8	TEST	2.2127580035716458E-8	DOCUMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999979015863467	WITHOUT_CLASSIFICATION	1.4982593025379897E-6	IMPLEMENTATION	5.86559763602034E-7	DESIGN	6.927829756294189E-9	DOCUMENTATION	5.303330603126564E-9	TEST	1.363426814271844E-9	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999979015863467	WITHOUT_CLASSIFICATION	1.4982593025379897E-6	IMPLEMENTATION	5.86559763602034E-7	DESIGN	6.927829756294189E-9	DOCUMENTATION	5.303330603126564E-9	TEST	1.363426814271844E-9	DEFECT
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999994644302026	WITHOUT_CLASSIFICATION	4.92948686984994E-7	DEFECT	3.48619033517867E-8	DESIGN	7.713837325049466E-9	IMPLEMENTATION	4.392768135178546E-11	TEST	1.442099600750044E-12	DOCUMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9988420200458281	WITHOUT_CLASSIFICATION	0.0011574919556568905	DESIGN	4.690958732626998E-7	IMPLEMENTATION	1.494894334173766E-8	DEFECT	3.848640979137421E-9	TEST	1.0505752257798584E-10	DOCUMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999715969276549	WITHOUT_CLASSIFICATION	2.67836264264521E-5	DESIGN	9.039653108281111E-7	IMPLEMENTATION	5.785149361821356E-7	DEFECT	1.355884423830063E-7	TEST	1.3772292802940781E-9	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.999998277160343	WITHOUT_CLASSIFICATION	1.6824384219582758E-6	DESIGN	2.177881970453646E-8	IMPLEMENTATION	1.2796357286605657E-8	DOCUMENTATION	3.6181627598968127E-9	DEFECT	2.207895297868644E-9	TEST
// igndore it...	WITHOUT_CLASSIFICATION	0.9992199747384902	WITHOUT_CLASSIFICATION	7.405389308406093E-4	DEFECT	2.6819754314611575E-5	DESIGN	1.062320048577353E-5	IMPLEMENTATION	1.2451250151441514E-6	DOCUMENTATION	7.982508536453942E-7	TEST
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999997704977962	WITHOUT_CLASSIFICATION	1.2722628627755987E-7	DESIGN	9.23648959402844E-8	DEFECT	4.25310420770596E-9	IMPLEMENTATION	3.6726217419465433E-9	DOCUMENTATION	1.985295663056859E-9	TEST
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9909889556069902	WITHOUT_CLASSIFICATION	0.008164420350469817	DESIGN	8.309129832943086E-4	DEFECT	7.491915227825135E-6	IMPLEMENTATION	4.702365040532944E-6	DOCUMENTATION	3.5167789772728863E-6	TEST
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9994968646593425	WITHOUT_CLASSIFICATION	4.761995854188965E-4	DESIGN	2.458587342661722E-5	DEFECT	2.095046651251757E-6	IMPLEMENTATION	2.3016430907099084E-7	TEST	2.467085158984961E-8	DOCUMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999993070367724	WITHOUT_CLASSIFICATION	3.811503695271612E-7	DEFECT	3.033522782639776E-7	DESIGN	5.133462995907832E-9	DOCUMENTATION	2.372829944903993E-9	TEST	9.54286792552854E-10	IMPLEMENTATION
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999548885442	WITHOUT_CLASSIFICATION	2.1528949388241625E-8	DESIGN	1.8608269100358677E-8	DEFECT	3.0790540246090054E-9	IMPLEMENTATION	1.2556152916094308E-9	DOCUMENTATION	6.395678823059911E-10	TEST
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.999981763054375	WITHOUT_CLASSIFICATION	7.615453687503564E-6	DOCUMENTATION	6.5106029882965846E-6	DESIGN	2.4892130796708543E-6	DEFECT	1.4585391407634456E-6	IMPLEMENTATION	1.6313672859327255E-7	TEST
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999702666916002	WITHOUT_CLASSIFICATION	2.7494134813969563E-5	DESIGN	1.463576481437875E-6	IMPLEMENTATION	3.7973097406714416E-7	DEFECT	2.3503558648077605E-7	TEST	1.608305438732131E-7	DOCUMENTATION
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999702666916002	WITHOUT_CLASSIFICATION	2.7494134813969563E-5	DESIGN	1.463576481437875E-6	IMPLEMENTATION	3.7973097406714416E-7	DEFECT	2.3503558648077605E-7	TEST	1.608305438732131E-7	DOCUMENTATION
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999638078853695	WITHOUT_CLASSIFICATION	3.486925439111423E-5	DESIGN	6.661415294077948E-7	IMPLEMENTATION	3.6712299451314095E-7	DEFECT	1.712466809259144E-7	TEST	1.1834903469528807E-7	DOCUMENTATION
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999638078853695	WITHOUT_CLASSIFICATION	3.486925439111423E-5	DESIGN	6.661415294077948E-7	IMPLEMENTATION	3.6712299451314095E-7	DEFECT	1.712466809259144E-7	TEST	1.1834903469528807E-7	DOCUMENTATION
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999667846586437	WITHOUT_CLASSIFICATION	3.175824312763835E-5	DESIGN	8.256395476678014E-7	IMPLEMENTATION	3.3665331657636246E-7	DEFECT	1.7871907550254606E-7	TEST	1.1608628877064115E-7	DOCUMENTATION
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.999996085489686	WITHOUT_CLASSIFICATION	2.0973157302661245E-6	DESIGN	1.5149431828302685E-6	IMPLEMENTATION	1.8446331731777123E-7	DEFECT	7.466982276168091E-8	TEST	4.311826092401639E-8	DOCUMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.999996085489686	WITHOUT_CLASSIFICATION	2.0973157302661245E-6	DESIGN	1.5149431828302685E-6	IMPLEMENTATION	1.8446331731777123E-7	DEFECT	7.466982276168091E-8	TEST	4.311826092401639E-8	DOCUMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999763312459499	WITHOUT_CLASSIFICATION	1.917567593680758E-5	DESIGN	3.883369594803972E-6	IMPLEMENTATION	3.5485082395832265E-7	DEFECT	1.280887036014336E-7	TEST	1.26768991046018E-7	DOCUMENTATION
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.999990905729688	WITHOUT_CLASSIFICATION	4.60995199381084E-6	IMPLEMENTATION	4.038979939761428E-6	DESIGN	1.8114567847257776E-7	DEFECT	1.689223574179957E-7	TEST	9.527034248525104E-8	DOCUMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999981583947883	WITHOUT_CLASSIFICATION	1.234262336375227E-6	IMPLEMENTATION	5.679192469480033E-7	DESIGN	2.4536655179885773E-8	DEFECT	9.30220256748863E-9	TEST	5.5847705578495E-9	DOCUMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999759607069903	WITHOUT_CLASSIFICATION	2.3593984918243764E-4	DESIGN	2.218250736261859E-6	IMPLEMENTATION	8.820510037999566E-7	DOCUMENTATION	7.485700977288261E-7	DEFECT	6.042090768035469E-7	TEST
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999853478894927	WITHOUT_CLASSIFICATION	6.563659171115119E-6	DESIGN	6.336480387587569E-6	IMPLEMENTATION	1.6774586009861486E-6	DEFECT	5.300836786813657E-8	TEST	2.1503979851284022E-8	DOCUMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.999990905729688	WITHOUT_CLASSIFICATION	4.60995199381084E-6	IMPLEMENTATION	4.038979939761428E-6	DESIGN	1.8114567847257776E-7	DEFECT	1.689223574179957E-7	TEST	9.527034248525104E-8	DOCUMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9946734497810132	WITHOUT_CLASSIFICATION	0.005288530901032753	DESIGN	3.730070759963036E-5	IMPLEMENTATION	4.508337996214806E-7	DEFECT	2.4173749333564046E-7	DOCUMENTATION	2.6039061346958438E-8	TEST
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999202863764918	WITHOUT_CLASSIFICATION	3.574368783137931E-5	DESIGN	3.4186387522541875E-5	IMPLEMENTATION	9.070810721077386E-6	DEFECT	4.231637884561826E-7	DOCUMENTATION	2.895736449271834E-7	TEST
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999995324641746	WITHOUT_CLASSIFICATION	3.568805576619801E-7	DESIGN	4.828149698345212E-8	IMPLEMENTATION	3.890503475184696E-8	DEFECT	1.4042361677031074E-8	DOCUMENTATION	9.42637426192301E-9	TEST
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.999999567672373	WITHOUT_CLASSIFICATION	3.3469718148699047E-7	DESIGN	5.789110918099252E-8	IMPLEMENTATION	2.443171751358982E-8	DEFECT	9.711225590071005E-9	DOCUMENTATION	5.596393324124559E-9	TEST
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999977710132864	WITHOUT_CLASSIFICATION	1.9149922096334984E-6	DESIGN	2.9242051233290213E-7	IMPLEMENTATION	1.7808494157804344E-8	TEST	2.635443727399101E-9	DEFECT	1.1300537491534894E-9	DOCUMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9995054190305693	WITHOUT_CLASSIFICATION	2.0410330293026916E-4	DESIGN	1.831071214068813E-4	IMPLEMENTATION	9.421769230158891E-5	TEST	7.123134869163088E-6	DOCUMENTATION	6.029717922882506E-6	DEFECT
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999997669847243	WITHOUT_CLASSIFICATION	2.1868170863981277E-7	DESIGN	6.5956170769426005E-9	DEFECT	3.3489142661312105E-9	DOCUMENTATION	2.4081440629636006E-9	IMPLEMENTATION	1.9808917173003674E-9	TEST
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9811413857595318	WITHOUT_CLASSIFICATION	0.01839312092154175	DESIGN	4.640490292685552E-4	DEFECT	1.3108105992882367E-6	TEST	1.1012696549510587E-7	DOCUMENTATION	2.3352093172193562E-8	IMPLEMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9997269503994207	WITHOUT_CLASSIFICATION	2.726868105101341E-4	DEFECT	1.259314454758045E-7	DOCUMENTATION	1.1542001889678922E-7	TEST	6.129157648473881E-8	IMPLEMENTATION	6.014702830654E-8	DESIGN
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9870284758381728	WITHOUT_CLASSIFICATION	0.012942571080032337	DESIGN	2.707420619886945E-5	DEFECT	1.7595342997198324E-6	TEST	1.017782960265621E-7	DOCUMENTATION	1.756300026863629E-8	IMPLEMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999326666493	WITHOUT_CLASSIFICATION	6.336296388994532E-8	DESIGN	3.659043550135327E-9	DEFECT	1.9118428439131193E-10	DOCUMENTATION	7.746281385352701E-11	IMPLEMENTATION	4.269618931970918E-11	TEST
// Set it!	WITHOUT_CLASSIFICATION	0.9999124886465546	WITHOUT_CLASSIFICATION	4.495953689398725E-5	DEFECT	3.987004184332103E-5	DESIGN	1.384601212560344E-6	IMPLEMENTATION	7.090589520723255E-7	TEST	5.88114543499589E-7	DOCUMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999990459050013	WITHOUT_CLASSIFICATION	4.2388780309885805E-7	DESIGN	3.5958501921051685E-7	DEFECT	1.3833582333046307E-7	IMPLEMENTATION	2.5426477751256433E-8	DOCUMENTATION	6.8598753722578014E-9	TEST
// strip the " where "	WITHOUT_CLASSIFICATION	0.999994964931283	WITHOUT_CLASSIFICATION	4.627290241880062E-6	DESIGN	2.2028972286827687E-7	IMPLEMENTATION	7.269183102075312E-8	TEST	7.115832537356492E-8	DEFECT	4.3638595828400775E-8	DOCUMENTATION
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999328378240684	WITHOUT_CLASSIFICATION	6.169555514458232E-5	DEFECT	5.15203611485922E-6	IMPLEMENTATION	2.7413004533026337E-7	DESIGN	3.992551443226512E-8	TEST	5.291124161982774E-10	DOCUMENTATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9960203343676861	WITHOUT_CLASSIFICATION	0.0038568695797947155	DESIGN	6.243288573255065E-5	DEFECT	5.832370736239979E-5	IMPLEMENTATION	1.2939233458179101E-6	DOCUMENTATION	7.455360783676229E-7	TEST
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999349771557	WITHOUT_CLASSIFICATION	3.716481768898212E-8	DESIGN	2.191620243816135E-8	IMPLEMENTATION	5.081728473688458E-9	DEFECT	4.973820641096449E-10	DOCUMENTATION	3.627136771224918E-10	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999192053000416	WITHOUT_CLASSIFICATION	7.991037525225925E-5	DESIGN	4.018782636762015E-7	IMPLEMENTATION	3.93048642691843E-7	DEFECT	5.08285584747371E-8	TEST	3.8569241268734464E-8	DOCUMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999192053000416	WITHOUT_CLASSIFICATION	7.991037525225925E-5	DESIGN	4.018782636762015E-7	IMPLEMENTATION	3.93048642691843E-7	DEFECT	5.08285584747371E-8	TEST	3.8569241268734464E-8	DOCUMENTATION
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999984464707886	WITHOUT_CLASSIFICATION	1.048013353034364E-6	IMPLEMENTATION	1.988690803373889E-7	TEST	1.6293313405511668E-7	DESIGN	1.1968987587374755E-7	DEFECT	2.402376813465991E-8	DOCUMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.999999917506296	WITHOUT_CLASSIFICATION	5.3126643479739005E-8	DESIGN	1.0879017795578238E-8	IMPLEMENTATION	9.384412904536615E-9	TEST	7.319966643338584E-9	DEFECT	1.7836631060842517E-9	DOCUMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999990781549003	WITHOUT_CLASSIFICATION	6.045338051352928E-7	IMPLEMENTATION	2.470398760963571E-7	DESIGN	5.590307370434478E-8	TEST	8.457303917250706E-9	DEFECT	5.911040626640741E-9	DOCUMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999191372128663	WITHOUT_CLASSIFICATION	4.024945683636586E-5	DESIGN	3.933713881335592E-5	IMPLEMENTATION	6.361746787968817E-7	TEST	3.7068088040424737E-7	DOCUMENTATION	2.6933592473112346E-7	DEFECT
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999894611512489	WITHOUT_CLASSIFICATION	9.83116792430881E-6	DESIGN	3.890105707104748E-7	IMPLEMENTATION	1.417956993724555E-7	TEST	1.3321267839614057E-7	DEFECT	4.3661878207699194E-8	DOCUMENTATION
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9998707485289601	WITHOUT_CLASSIFICATION	9.151473405979231E-5	DESIGN	3.6457181675054246E-5	DEFECT	1.222082326709276E-6	IMPLEMENTATION	4.225919685171324E-8	TEST	1.5213781527932332E-8	DOCUMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999836069190644	WITHOUT_CLASSIFICATION	1.4040300068345195E-5	DESIGN	2.3329448671171205E-6	IMPLEMENTATION	9.99536157756782E-9	DOCUMENTATION	6.578111292456922E-9	DEFECT	3.262527247408449E-9	TEST
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999994891176602	WITHOUT_CLASSIFICATION	2.487181813265617E-7	DESIGN	1.3641523078137845E-7	DEFECT	9.643172529038747E-8	TEST	2.8145683351653855E-8	IMPLEMENTATION	1.1715188983222508E-9	DOCUMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999749929775728	WITHOUT_CLASSIFICATION	1.769373672233804E-5	DESIGN	3.661509734440068E-6	IMPLEMENTATION	3.0478600179541337E-6	DEFECT	3.063783119378633E-7	TEST	2.9753764050553586E-7	DOCUMENTATION
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9996959584022754	WITHOUT_CLASSIFICATION	2.977078775246168E-4	DESIGN	6.214872111129624E-6	IMPLEMENTATION	8.329848144199724E-8	TEST	2.048554945671921E-8	DEFECT	1.506405773864149E-8	DOCUMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999822206412604	WITHOUT_CLASSIFICATION	1.6820707765382812E-5	DESIGN	8.7842012080506E-7	IMPLEMENTATION	3.266629545797155E-8	DEFECT	2.73480730228361E-8	TEST	2.0216484903206368E-8	DOCUMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998842934233458	WITHOUT_CLASSIFICATION	9.633663503300624E-5	DESIGN	9.417321590089839E-6	IMPLEMENTATION	3.950573628984673E-6	TEST	3.25607236120705E-6	DOCUMENTATION	2.745974040821917E-6	DEFECT
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999997764268902	WITHOUT_CLASSIFICATION	2.039248413381937E-7	DESIGN	1.3580354473956292E-8	IMPLEMENTATION	3.9793863370662034E-9	DEFECT	1.7176171871873192E-9	DOCUMENTATION	3.7091039760847396E-10	TEST
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999792205814702	WITHOUT_CLASSIFICATION	2.0242149071533302E-5	DEFECT	4.070136592972737E-7	DESIGN	6.362970206200628E-8	TEST	4.98422797330877E-8	DOCUMENTATION	1.6783817246716373E-8	IMPLEMENTATION
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9998209618840804	WITHOUT_CLASSIFICATION	9.923279179146123E-5	DEFECT	4.6852538899448427E-5	IMPLEMENTATION	2.9409816317148005E-5	DESIGN	2.8556170043603995E-6	TEST	6.873519070791057E-7	DOCUMENTATION
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999610828603166	WITHOUT_CLASSIFICATION	2.986020988222524E-5	DESIGN	7.346297801531867E-6	DEFECT	1.2245239341345072E-6	IMPLEMENTATION	3.831182615236423E-7	TEST	1.0298980389657552E-7	DOCUMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999522585752	WITHOUT_CLASSIFICATION	3.370727130269309E-8	IMPLEMENTATION	8.351406104332643E-9	DESIGN	5.446691184512895E-9	DEFECT	1.212041115753907E-10	DOCUMENTATION	1.1485225262623557E-10	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999522585752	WITHOUT_CLASSIFICATION	3.370727130269309E-8	IMPLEMENTATION	8.351406104332643E-9	DESIGN	5.446691184512895E-9	DEFECT	1.212041115753907E-10	DOCUMENTATION	1.1485225262623557E-10	TEST
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9996429426329486	WITHOUT_CLASSIFICATION	1.7805875434791338E-4	DESIGN	1.73553869490624E-4	IMPLEMENTATION	4.717046066104866E-6	DEFECT	5.359860028253654E-7	TEST	1.9171114383625655E-7	DOCUMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9983546033512812	WITHOUT_CLASSIFICATION	0.0010524164804940688	DESIGN	5.92577275621616E-4	DEFECT	2.377510340715746E-7	TEST	1.0086730424209171E-7	DOCUMENTATION	6.427426483673557E-8	IMPLEMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9988668036920677	WITHOUT_CLASSIFICATION	0.00109825545079865	DEFECT	3.234307244749696E-5	DESIGN	1.9792381898223093E-6	IMPLEMENTATION	4.607305528648688E-7	TEST	1.5781594345818174E-7	DOCUMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.9995055623029455	WITHOUT_CLASSIFICATION	4.79933562626606E-4	DEFECT	1.4162882790090475E-5	DESIGN	1.7739180117569946E-7	TEST	8.490698202169345E-8	IMPLEMENTATION	7.89528546872196E-8	DOCUMENTATION
// The property is another class..	WITHOUT_CLASSIFICATION	0.999664729138806	WITHOUT_CLASSIFICATION	2.52458637489688E-4	DEFECT	8.180569884269012E-5	DESIGN	5.018591928462698E-7	TEST	4.618364966546109E-7	DOCUMENTATION	4.2829172225025176E-8	IMPLEMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999912120241506	WITHOUT_CLASSIFICATION	8.279639847576556E-6	DESIGN	2.835548143783976E-7	DEFECT	1.1131483781370096E-7	TEST	1.0174465360704153E-7	IMPLEMENTATION	1.1721695944307858E-8	DOCUMENTATION
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.990107061431271	WITHOUT_CLASSIFICATION	0.009867391406489238	DESIGN	2.1664833656554136E-5	IMPLEMENTATION	1.815912212426938E-6	DOCUMENTATION	1.0662409851733857E-6	TEST	1.0001753855460476E-6	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999946653682491	WITHOUT_CLASSIFICATION	2.808712845331071E-6	DEFECT	2.5164736980460558E-6	DESIGN	8.21487837965474E-9	IMPLEMENTATION	6.601937526542725E-10	DOCUMENTATION	5.701353303498021E-10	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9997332902054658	WITHOUT_CLASSIFICATION	2.53820762926087E-4	IMPLEMENTATION	9.238748062542194E-6	DESIGN	3.4152830458194395E-6	DEFECT	2.0179019923809674E-7	DOCUMENTATION	3.321030051374256E-8	TEST
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999898885169	WITHOUT_CLASSIFICATION	8.475041293722903E-9	DEFECT	1.4983425969987299E-9	DESIGN	1.1344226702253143E-10	TEST	1.4777660493548198E-11	DOCUMENTATION	9.879306215052426E-12	IMPLEMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999712901783714	WITHOUT_CLASSIFICATION	2.8549723533615942E-5	DESIGN	8.9137953408204E-8	DEFECT	5.8942781026031453E-8	IMPLEMENTATION	8.753488374445457E-9	DOCUMENTATION	3.2638722000738318E-9	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999946653682491	WITHOUT_CLASSIFICATION	2.808712845331071E-6	DEFECT	2.5164736980460558E-6	DESIGN	8.21487837965474E-9	IMPLEMENTATION	6.601937526542725E-10	DOCUMENTATION	5.701353303498021E-10	TEST
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.6390406452074452	WITHOUT_CLASSIFICATION	0.3609483212412236	DESIGN	1.0799497617920842E-5	DEFECT	1.1748753729731309E-7	IMPLEMENTATION	7.058633500090579E-8	DOCUMENTATION	4.5979840842919915E-8	TEST
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9990887242826403	WITHOUT_CLASSIFICATION	8.689803261687494E-4	DESIGN	4.012314468156747E-5	IMPLEMENTATION	1.0101477801726937E-6	DOCUMENTATION	8.534022117251615E-7	DEFECT	3.086965174885839E-7	TEST
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9983963202042544	WITHOUT_CLASSIFICATION	0.0015891594995152748	DESIGN	1.4133692010451605E-5	DEFECT	3.53658974866617E-7	IMPLEMENTATION	2.2693470247973456E-8	TEST	1.0251774803337567E-8	DOCUMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.999999257852951	WITHOUT_CLASSIFICATION	6.342721896804733E-7	DESIGN	5.44663852548764E-8	DEFECT	2.2255378532248347E-8	IMPLEMENTATION	2.1817357838227842E-8	TEST	9.33573765143077E-9	DOCUMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999335226881	WITHOUT_CLASSIFICATION	6.279867059216912E-8	DESIGN	3.5266036225116258E-9	DEFECT	9.628054144229549E-11	TEST	4.134240516889951E-11	IMPLEMENTATION	1.441470819035467E-11	DOCUMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999637938589	WITHOUT_CLASSIFICATION	3.4779340956491295E-8	DESIGN	8.124409749637331E-10	IMPLEMENTATION	3.074790051402188E-10	DEFECT	1.8954607783165203E-10	DOCUMENTATION	1.1733390792341807E-10	TEST
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999998160629893	WITHOUT_CLASSIFICATION	1.2361523011876185E-7	DESIGN	5.5240396216406506E-8	IMPLEMENTATION	4.881596298659071E-9	DOCUMENTATION	1.1678875709552847E-10	TEST	8.299932423342755E-11	DEFECT
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999998366708646	WITHOUT_CLASSIFICATION	7.556685207048324E-8	IMPLEMENTATION	7.243943674510064E-8	DEFECT	7.487999032022435E-9	DESIGN	6.556743586448137E-9	DOCUMENTATION	1.2781038611891644E-9	TEST
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9993470186748635	WITHOUT_CLASSIFICATION	6.529549637291148E-4	DESIGN	2.0862968286943028E-8	DEFECT	4.5685769392318995E-9	DOCUMENTATION	9.192350262059499E-10	TEST	1.0627309127283034E-11	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9997985701170484	WITHOUT_CLASSIFICATION	1.2536162147549552E-4	DEFECT	6.961667676745679E-5	DESIGN	3.93343018804409E-6	TEST	2.043607583470446E-6	DOCUMENTATION	4.745469372404227E-7	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.99991901894598	WITHOUT_CLASSIFICATION	2.7597857034903485E-5	DESIGN	2.684323024599441E-5	IMPLEMENTATION	2.33248149088884E-5	DEFECT	2.364009995466121E-6	DOCUMENTATION	8.511418346366089E-7	TEST
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999975421954698	WITHOUT_CLASSIFICATION	1.6089156570133413E-6	DEFECT	8.439366102695584E-7	DESIGN	2.184542572623153E-9	TEST	2.053177810258117E-9	IMPLEMENTATION	7.145425587792486E-10	DOCUMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999762837995904	WITHOUT_CLASSIFICATION	2.3403183989172066E-5	DESIGN	2.049473881853112E-7	DOCUMENTATION	5.777806061042336E-8	IMPLEMENTATION	4.300592750544231E-8	TEST	7.285044126678389E-9	DEFECT
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999959157162992	WITHOUT_CLASSIFICATION	2.536159971838728E-6	IMPLEMENTATION	1.2724776175085805E-6	DESIGN	2.3588353857051564E-7	DEFECT	2.430356657724438E-8	TEST	1.54590064008071E-8	DOCUMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.999873750365964	WITHOUT_CLASSIFICATION	1.197173209125548E-4	IMPLEMENTATION	3.0944740328404096E-6	DESIGN	1.8181868581243864E-6	DEFECT	9.383691434621409E-7	DOCUMENTATION	6.812830890594566E-7	TEST
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999989950183689	WITHOUT_CLASSIFICATION	9.956609709994783E-7	DESIGN	6.201968049636052E-9	TEST	1.4108454422075903E-9	DOCUMENTATION	9.331568647388875E-10	IMPLEMENTATION	7.746899006403697E-10	DEFECT
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999986959832577	WITHOUT_CLASSIFICATION	1.2984988487629857E-6	DESIGN	2.8396494209638243E-9	DOCUMENTATION	1.8029693287293982E-9	TEST	6.047670228453511E-10	IMPLEMENTATION	2.7050762114099115E-10	DEFECT
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.983909971006977	WITHOUT_CLASSIFICATION	0.015564411450042373	DESIGN	4.32305828677366E-4	IMPLEMENTATION	5.275517515614549E-5	DEFECT	2.1262799016761223E-5	TEST	1.9293740130390833E-5	DOCUMENTATION
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9974888008129879	WITHOUT_CLASSIFICATION	0.002397267826943741	DESIGN	4.8858802630153874E-5	IMPLEMENTATION	4.5242532169670566E-5	DEFECT	1.27725332520498E-5	TEST	7.057492016421071E-6	DOCUMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.999999812423453	WITHOUT_CLASSIFICATION	1.2555655537079075E-7	DESIGN	5.903320437312957E-8	IMPLEMENTATION	2.861361847070828E-9	DOCUMENTATION	8.472674673558553E-11	TEST	4.069859799119958E-11	DEFECT
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999251153114931	WITHOUT_CLASSIFICATION	7.371450350805417E-5	DESIGN	1.1315954056756024E-6	DEFECT	2.3364639910858807E-8	TEST	1.1185867437568653E-8	IMPLEMENTATION	4.039085895742097E-9	DOCUMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.7450113911855439	DESIGN	0.25498725758811164	WITHOUT_CLASSIFICATION	1.1664272191902183E-6	IMPLEMENTATION	1.0570534421918968E-7	TEST	6.576274308775863E-8	DEFECT	1.3331038105615811E-8	DOCUMENTATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.999198309084408	WITHOUT_CLASSIFICATION	4.638807880669204E-4	DESIGN	2.687571947243273E-4	DEFECT	6.200709109807595E-5	IMPLEMENTATION	6.362620868088745E-6	TEST	6.832208345856466E-7	DOCUMENTATION
// #2	WITHOUT_CLASSIFICATION	0.9999974831023412	WITHOUT_CLASSIFICATION	1.1621718636149565E-6	DESIGN	1.0883900457843701E-6	DEFECT	1.4462652720095533E-7	IMPLEMENTATION	6.710439932518093E-8	DOCUMENTATION	5.460482288308997E-8	TEST
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999096665199	WITHOUT_CLASSIFICATION	8.915506845199125E-8	DESIGN	7.650746830052497E-10	IMPLEMENTATION	2.446782554299051E-10	DOCUMENTATION	1.2519259242553842E-10	DEFECT	4.346608971335389E-11	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9999327327607026	WITHOUT_CLASSIFICATION	3.68742880333016E-5	IMPLEMENTATION	2.7329653378370073E-5	DESIGN	1.7812527403308427E-6	DEFECT	8.979863993612862E-7	DOCUMENTATION	3.840587460357625E-7	TEST
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999774389181721	WITHOUT_CLASSIFICATION	9.062039604612291E-6	DESIGN	6.999759234478884E-6	DEFECT	6.481542630279511E-6	IMPLEMENTATION	1.465944161062666E-8	TEST	3.080916875226147E-9	DOCUMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999996486143394	WITHOUT_CLASSIFICATION	2.9034031800359166E-7	IMPLEMENTATION	2.8890653123378527E-8	DOCUMENTATION	2.7635579614975422E-8	DESIGN	4.346837704374448E-9	DEFECT	1.7227207367967455E-10	TEST
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999969619804109	WITHOUT_CLASSIFICATION	2.978048619188471E-6	DESIGN	4.946488241165734E-8	IMPLEMENTATION	5.284374992715182E-9	DEFECT	4.822521240305633E-9	DOCUMENTATION	3.991913626354489E-10	TEST
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9896867807908275	WITHOUT_CLASSIFICATION	0.010274227256901095	DESIGN	3.7631548051932185E-5	IMPLEMENTATION	1.2522982545712717E-6	TEST	9.589577778866133E-8	DEFECT	1.2210187178274083E-8	DOCUMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.99999998012795	WITHOUT_CLASSIFICATION	1.576026988180141E-8	IMPLEMENTATION	3.14951788564463E-9	DESIGN	7.010205711469923E-10	DEFECT	2.444395869763166E-10	DOCUMENTATION	1.6802137418738325E-11	TEST
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9998967768544056	WITHOUT_CLASSIFICATION	4.888016818852785E-5	DEFECT	4.496734226100767E-5	DESIGN	9.069186632706362E-6	IMPLEMENTATION	1.6791836577464295E-7	DOCUMENTATION	1.3853014641166551E-7	TEST
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999838012409626	WITHOUT_CLASSIFICATION	1.3087386167652875E-5	DEFECT	2.201032856095559E-6	DESIGN	8.591802839354627E-7	IMPLEMENTATION	3.2943553171706456E-8	TEST	1.8216176551678824E-8	DOCUMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9980450862865	WITHOUT_CLASSIFICATION	0.0019547585038519103	DESIGN	1.2760117048948267E-7	IMPLEMENTATION	1.8794655636360808E-8	TEST	8.530478655679768E-9	DEFECT	2.83343183878243E-10	DOCUMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999973648785735	WITHOUT_CLASSIFICATION	2.6238277377336045E-6	DESIGN	5.5775280931926995E-9	IMPLEMENTATION	4.750357792163139E-9	DEFECT	6.462862413062992E-10	TEST	3.195167797296877E-10	DOCUMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999999417338115	WITHOUT_CLASSIFICATION	3.457224398775555E-8	DESIGN	1.5435857045039916E-8	IMPLEMENTATION	7.2940462139423076E-9	DEFECT	4.856728008891597E-10	TEST	4.783685869557775E-10	DOCUMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9995149658316691	WITHOUT_CLASSIFICATION	4.847727415565023E-4	DESIGN	2.3460662018878287E-7	DEFECT	1.5997023891342913E-8	DOCUMENTATION	9.508451720499084E-9	IMPLEMENTATION	1.3146784733961232E-9	TEST
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999258877931	WITHOUT_CLASSIFICATION	5.7072987108565996E-8	DESIGN	1.654181382898086E-8	DEFECT	3.1838635149908934E-10	DOCUMENTATION	1.46121721924285E-10	IMPLEMENTATION	3.2897987017540344E-11	TEST
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999998827710228	WITHOUT_CLASSIFICATION	5.498760130547633E-8	DESIGN	5.111464027473022E-8	IMPLEMENTATION	7.3542391620042305E-9	TEST	2.6792718766517607E-9	DOCUMENTATION	1.0932245759560755E-9	DEFECT
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.999910384732744	WITHOUT_CLASSIFICATION	7.985519946001862E-5	IMPLEMENTATION	4.921885566898731E-6	DEFECT	4.5965452236106855E-6	DESIGN	1.820773119984207E-7	DOCUMENTATION	5.955969360845906E-8	TEST
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999999134227333	WITHOUT_CLASSIFICATION	4.525004135230513E-8	DESIGN	2.2173674402550025E-8	IMPLEMENTATION	1.7082678892636776E-8	DOCUMENTATION	1.5297209920575086E-9	TEST	5.411510128383069E-10	DEFECT
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999988445224512	WITHOUT_CLASSIFICATION	1.1458534304818088E-6	DESIGN	8.856239743299782E-9	IMPLEMENTATION	4.617229692802891E-10	DEFECT	1.5950435274142152E-10	TEST	1.4665131677552103E-10	DOCUMENTATION
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.99996753624034	WITHOUT_CLASSIFICATION	3.156101845393319E-5	DESIGN	6.981394290028119E-7	IMPLEMENTATION	1.1344870442063655E-7	DOCUMENTATION	8.530002417827288E-8	DEFECT	5.853048480676187E-9	TEST
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999665760647	WITHOUT_CLASSIFICATION	2.0439401227984017E-8	DESIGN	6.70877996697448E-9	DEFECT	6.092123857794181E-9	IMPLEMENTATION	1.703816361656118E-10	TEST	1.3248788288655785E-11	DOCUMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999560930016407	WITHOUT_CLASSIFICATION	4.365492705927961E-5	DESIGN	2.439796263726533E-7	DEFECT	5.440864033677541E-9	DOCUMENTATION	1.4382655357989108E-9	IMPLEMENTATION	1.2125440509897918E-9	TEST
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9997212782025444	WITHOUT_CLASSIFICATION	2.7556340408543085E-4	DESIGN	1.9438428727229803E-6	IMPLEMENTATION	1.1781268866190037E-6	DEFECT	2.3005488517700552E-8	DOCUMENTATION	1.341812222742694E-8	TEST
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999820878476501	WITHOUT_CLASSIFICATION	1.2625712594533665E-5	DESIGN	5.283009601520292E-6	DEFECT	3.188241768319637E-9	TEST	2.2442634078697728E-10	IMPLEMENTATION	1.748574749895784E-11	DOCUMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999923654591062	WITHOUT_CLASSIFICATION	4.557339516553212E-6	DESIGN	2.0293302236038627E-6	TEST	8.161036588908245E-7	IMPLEMENTATION	2.1589176560435023E-7	DEFECT	1.5875729083861733E-8	DOCUMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.999999645548039	WITHOUT_CLASSIFICATION	2.1986185866502166E-7	DESIGN	6.718782149565581E-8	TEST	3.961933901121447E-8	DEFECT	2.4955863808717274E-8	IMPLEMENTATION	2.8270780667372874E-9	DOCUMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.999943632739429	WITHOUT_CLASSIFICATION	5.3670362788591804E-5	DESIGN	1.3988166166407808E-6	DEFECT	5.570236399609191E-7	DOCUMENTATION	5.370233906693884E-7	IMPLEMENTATION	2.0403413510686086E-7	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999756281902	WITHOUT_CLASSIFICATION	1.6558595599070514E-6	IMPLEMENTATION	6.986875513341217E-7	DESIGN	3.964541375328354E-8	DEFECT	3.8390375742234417E-8	TEST	4.598079323218688E-9	DOCUMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999972223648472	WITHOUT_CLASSIFICATION	2.7613140221545932E-6	DESIGN	8.10516296110987E-9	IMPLEMENTATION	5.8493766491865565E-9	DEFECT	1.8503590969271755E-9	TEST	5.162317116194219E-10	DOCUMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999875797031329	WITHOUT_CLASSIFICATION	1.1739020546109861E-5	DESIGN	6.51456312537435E-7	IMPLEMENTATION	1.6852668557966793E-8	TEST	1.0025301875705134E-8	DEFECT	2.942037941342294E-9	DOCUMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999984695946113	WITHOUT_CLASSIFICATION	1.524065146690726E-6	DEFECT	4.521117429184692E-9	DESIGN	9.232470538386551E-10	TEST	8.897061606552729E-10	DOCUMENTATION	6.171345397571336E-12	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999998339911826	WITHOUT_CLASSIFICATION	1.4744572007537751E-7	DESIGN	1.7977512699127552E-8	IMPLEMENTATION	2.3451441613722794E-10	TEST	2.287081814770671E-10	DOCUMENTATION	1.2236193474955842E-10	DEFECT
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.999999874732713	WITHOUT_CLASSIFICATION	8.074686561385441E-8	IMPLEMENTATION	2.189031257542025E-8	DEFECT	1.0392648630890391E-8	DESIGN	8.400979702200264E-9	DOCUMENTATION	3.8364805673357425E-9	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.999979508858236	WITHOUT_CLASSIFICATION	1.6757604961306868E-5	DESIGN	3.626404060538455E-6	DEFECT	4.9077652221288204E-8	IMPLEMENTATION	3.505717855202472E-8	TEST	2.299791131270404E-8	DOCUMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999943676302838	WITHOUT_CLASSIFICATION	4.920937036330049E-6	DEFECT	6.821680518154426E-7	IMPLEMENTATION	2.556262224513431E-8	DESIGN	2.122698998438755E-9	DOCUMENTATION	1.5793068352189651E-9	TEST
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999515152860167	WITHOUT_CLASSIFICATION	4.82082683347042E-5	DESIGN	1.2842827907677546E-7	DEFECT	1.080320999041038E-7	IMPLEMENTATION	2.6460775198155605E-8	DOCUMENTATION	1.3524494448043821E-8	TEST
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999997791973978	WITHOUT_CLASSIFICATION	1.0946002970275106E-7	DEFECT	6.860219061095708E-8	DESIGN	2.7936400008081023E-8	TEST	1.3712134560433963E-8	IMPLEMENTATION	1.0918473532271263E-9	DOCUMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999793511628835	WITHOUT_CLASSIFICATION	1.225566968094719E-5	DESIGN	6.9936231491486164E-6	IMPLEMENTATION	7.921425610825131E-7	DEFECT	3.770548940300124E-7	TEST	2.3034683118245327E-7	DOCUMENTATION
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999871455065401	WITHOUT_CLASSIFICATION	8.6706736479654E-6	IMPLEMENTATION	4.0304314440057705E-6	DESIGN	8.076054981088289E-8	TEST	6.9305866550271E-8	DEFECT	3.32195155883203E-9	DOCUMENTATION
// currently allowed...	WITHOUT_CLASSIFICATION	0.9997469552308579	WITHOUT_CLASSIFICATION	9.67062099000293E-5	DEFECT	8.963082883650809E-5	IMPLEMENTATION	6.44633134707016E-5	DESIGN	2.1675465313273193E-6	DOCUMENTATION	7.687040345024435E-8	TEST
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9703345035427026	DEFECT	0.028903758414776635	DESIGN	7.557573524962893E-4	WITHOUT_CLASSIFICATION	5.9178261993691685E-6	TEST	6.254226566405317E-8	DOCUMENTATION	3.215596356564095E-10	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9823937075890984	WITHOUT_CLASSIFICATION	0.01751709494067791	DESIGN	8.809534873352482E-5	DEFECT	4.825840764855777E-7	DOCUMENTATION	4.775704268505164E-7	IMPLEMENTATION	1.4196698664559493E-7	TEST
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999396919540995	WITHOUT_CLASSIFICATION	5.838720898283012E-5	DESIGN	1.7142938616453208E-6	DEFECT	1.507171920525861E-7	TEST	3.1442029312342265E-8	IMPLEMENTATION	2.4383834635353046E-8	DOCUMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999756281902	WITHOUT_CLASSIFICATION	1.6558595599070514E-6	IMPLEMENTATION	6.986875513341217E-7	DESIGN	3.964541375328354E-8	DEFECT	3.8390375742234417E-8	TEST	4.598079323218688E-9	DOCUMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999915936215157	WITHOUT_CLASSIFICATION	4.26301626537924E-6	DESIGN	2.0705043837352227E-6	DEFECT	1.979422129374619E-6	IMPLEMENTATION	7.406812501759648E-8	TEST	1.9367580670253998E-8	DOCUMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999984071798539	WITHOUT_CLASSIFICATION	1.441770155725824E-6	IMPLEMENTATION	1.3994950311323113E-7	DEFECT	7.2912147975170705E-9	TEST	3.2367849034272694E-9	DESIGN	5.724875528386395E-10	DOCUMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999503444617278	WITHOUT_CLASSIFICATION	4.9500682262887425E-5	DESIGN	1.4969007728406536E-7	DEFECT	3.853702602820628E-9	DOCUMENTATION	1.1113681932296017E-9	TEST	2.008612198896812E-10	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999643410443979	WITHOUT_CLASSIFICATION	3.551370919570375E-5	DESIGN	6.761975348019356E-8	DEFECT	4.301307517903708E-8	DOCUMENTATION	2.9769374268425797E-8	IMPLEMENTATION	4.844203439764589E-9	TEST
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9996511538705165	WITHOUT_CLASSIFICATION	3.081959736348654E-4	DEFECT	3.05573750362571E-5	DESIGN	7.908411687018226E-6	IMPLEMENTATION	1.450463583076667E-6	TEST	7.339055424374102E-7	DOCUMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999851389832941	WITHOUT_CLASSIFICATION	1.187283618297858E-5	DEFECT	2.9745116952325294E-6	DESIGN	8.492363365627727E-9	TEST	3.3477149541476707E-9	IMPLEMENTATION	1.8287494091762414E-9	DOCUMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9997332902054658	WITHOUT_CLASSIFICATION	2.53820762926087E-4	IMPLEMENTATION	9.238748062542194E-6	DESIGN	3.4152830458194395E-6	DEFECT	2.0179019923809674E-7	DOCUMENTATION	3.321030051374256E-8	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9970917469113044	WITHOUT_CLASSIFICATION	0.002898740258711677	DESIGN	7.434640820765841E-6	TEST	1.3184995530500827E-6	DEFECT	7.077951295758299E-7	IMPLEMENTATION	5.18944806743168E-8	DOCUMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999973648785735	WITHOUT_CLASSIFICATION	2.6238277377336045E-6	DESIGN	5.5775280931926995E-9	IMPLEMENTATION	4.750357792163139E-9	DEFECT	6.462862413062992E-10	TEST	3.195167797296877E-10	DOCUMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9643905214107146	WITHOUT_CLASSIFICATION	0.02490578018557945	DESIGN	0.00782048817060548	DEFECT	0.0028074528868719177	IMPLEMENTATION	4.628947397609954E-5	TEST	2.9467872252634593E-5	DOCUMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999997622419052	WITHOUT_CLASSIFICATION	1.7117088137970077E-7	IMPLEMENTATION	5.067099631280402E-8	DESIGN	1.264949580458174E-8	DEFECT	2.9336657686937183E-9	DOCUMENTATION	3.330554496151007E-10	TEST
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999494391503	WITHOUT_CLASSIFICATION	4.576328810464246E-8	DESIGN	1.777675913279944E-9	TEST	1.5555006186133762E-9	DOCUMENTATION	1.1804016486951243E-9	DEFECT	2.839834017470752E-10	IMPLEMENTATION
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999430423616	WITHOUT_CLASSIFICATION	4.864917187081842E-8	DESIGN	2.7744791655467912E-9	TEST	2.5275275400578287E-9	DOCUMENTATION	1.7086273560529416E-9	IMPLEMENTATION	1.2978324351177436E-9	DEFECT
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999958434413333	WITHOUT_CLASSIFICATION	4.0074848764372705E-6	DESIGN	7.807928222314328E-8	IMPLEMENTATION	5.766659542506049E-8	DEFECT	7.809150697721613E-9	TEST	5.5187618586014995E-9	DOCUMENTATION
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9858666908986674	WITHOUT_CLASSIFICATION	0.013645370422063822	DESIGN	4.783217845281292E-4	DEFECT	5.627834055248829E-6	DOCUMENTATION	3.5199292523591993E-6	IMPLEMENTATION	4.6913143304009767E-7	TEST
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999653397655925	WITHOUT_CLASSIFICATION	3.458569521065482E-5	DESIGN	4.280098993564194E-8	TEST	2.2420235189244264E-8	DEFECT	9.232733428730416E-9	DOCUMENTATION	8.523834288810473E-11	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9990544619627862	WITHOUT_CLASSIFICATION	9.402455204442151E-4	DESIGN	3.586345335653203E-6	DEFECT	1.2645798671865125E-6	IMPLEMENTATION	4.158467283504336E-7	TEST	2.5744838435261414E-8	DOCUMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9962778886067681	WITHOUT_CLASSIFICATION	0.003646672397752885	DESIGN	7.524154712282924E-5	DEFECT	1.81780912694176E-7	IMPLEMENTATION	1.126337503320361E-8	DOCUMENTATION	4.404068400400221E-9	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999536963101	WITHOUT_CLASSIFICATION	4.454003682310202E-8	DESIGN	1.7326882057550903E-9	DEFECT	1.9247483800768334E-11	DOCUMENTATION	9.37848637757323E-12	TEST	2.3390090404969666E-12	IMPLEMENTATION
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999471820317415	WITHOUT_CLASSIFICATION	3.90543044258808E-5	IMPLEMENTATION	1.3017936187228562E-5	DESIGN	5.388267301027276E-7	DOCUMENTATION	1.0801722255517691E-7	TEST	9.888369278568755E-8	DEFECT
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9973549395171095	WITHOUT_CLASSIFICATION	0.002642261853100733	DESIGN	2.279251057353307E-6	IMPLEMENTATION	4.0781232012960414E-7	DOCUMENTATION	6.15090130884271E-8	DEFECT	5.00573991759972E-8	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999808829443269	WITHOUT_CLASSIFICATION	1.9072745854162933E-5	DESIGN	2.766466486896583E-8	DEFECT	1.4629744885722154E-8	DOCUMENTATION	1.6569670949446206E-9	TEST	3.5844214735460285E-10	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999808829443269	WITHOUT_CLASSIFICATION	1.9072745854162933E-5	DESIGN	2.766466486896583E-8	DEFECT	1.4629744885722154E-8	DOCUMENTATION	1.6569670949446206E-9	TEST	3.5844214735460285E-10	IMPLEMENTATION
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999857991398888	WITHOUT_CLASSIFICATION	1.4198101866476187E-5	DESIGN	2.303551266614858E-9	DEFECT	3.3438441623720045E-10	TEST	1.036611989748461E-10	DOCUMENTATION	1.6647983367967277E-11	IMPLEMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999980456601993	WITHOUT_CLASSIFICATION	9.729570161862939E-7	IMPLEMENTATION	8.664669070202453E-7	DESIGN	6.453090914071398E-8	DOCUMENTATION	2.6785692218298658E-8	TEST	2.359927608600466E-8	DEFECT
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999998597602265	WITHOUT_CLASSIFICATION	1.3299600212111646E-7	DESIGN	5.08527938321546E-9	DEFECT	1.9358936974154216E-9	IMPLEMENTATION	1.625613832552199E-10	TEST	6.003697107620652E-11	DOCUMENTATION
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9997514128501847	WITHOUT_CLASSIFICATION	2.485781123807485E-4	DESIGN	8.394014555900916E-9	TEST	3.341892982313506E-10	DEFECT	2.352699744087063E-10	IMPLEMENTATION	7.396080621621829E-11	DOCUMENTATION
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999992418001991	WITHOUT_CLASSIFICATION	6.302376059955231E-7	DESIGN	1.1459057356815194E-7	IMPLEMENTATION	1.1257490625138267E-8	DEFECT	1.1834783980732766E-9	TEST	9.306523503735424E-10	DOCUMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999294165279303	WITHOUT_CLASSIFICATION	6.59265627602184E-5	DESIGN	2.4691345933583773E-6	IMPLEMENTATION	1.4635564050199775E-6	DOCUMENTATION	6.517645839503088E-7	DEFECT	7.245372732453258E-8	TEST
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999992132277882	WITHOUT_CLASSIFICATION	6.082999666346072E-7	DESIGN	1.7720613553575585E-7	DEFECT	1.1016436681246905E-9	DOCUMENTATION	1.1238572511161663E-10	TEST	5.208023228259962E-11	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999539151791874	WITHOUT_CLASSIFICATION	4.55586014428983E-5	DESIGN	4.933641297402253E-7	DEFECT	3.1349193803913184E-8	TEST	1.3616187466728694E-9	DOCUMENTATION	1.4442731843544605E-10	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999974365138983	WITHOUT_CLASSIFICATION	1.35692086518509E-6	DESIGN	1.191128940356129E-6	DEFECT	6.516027552840326E-9	IMPLEMENTATION	5.216694482345538E-9	DOCUMENTATION	3.7035741543084727E-9	TEST
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999409778945167	WITHOUT_CLASSIFICATION	5.860728205422115E-5	DESIGN	2.35008532469475E-7	TEST	1.5804822284404432E-7	DEFECT	1.5532640994806843E-8	DOCUMENTATION	6.234032691501774E-9	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9998719157596131	WITHOUT_CLASSIFICATION	8.359348075933985E-5	DESIGN	4.0027651513690384E-5	DEFECT	3.9920666638267035E-6	IMPLEMENTATION	3.682823268222121E-7	DOCUMENTATION	1.027591231423519E-7	TEST
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999983107784247	WITHOUT_CLASSIFICATION	6.86713879438744E-7	DEFECT	5.734133182268259E-7	IMPLEMENTATION	4.157218151895157E-7	DESIGN	9.27645366777093E-9	DOCUMENTATION	4.096108765036817E-9	TEST
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999958510891797	WITHOUT_CLASSIFICATION	3.036442985979803E-6	IMPLEMENTATION	8.435200674645726E-7	DEFECT	2.5624365174791234E-7	DESIGN	1.1575347776604842E-8	DOCUMENTATION	1.128767370731526E-9	TEST
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999999870585	WITHOUT_CLASSIFICATION	1.2693223752461381E-11	DEFECT	1.0608527103981697E-13	TEST	7.389822835622344E-14	DOCUMENTATION	5.903442575851716E-14	DESIGN	9.334082902385733E-15	IMPLEMENTATION
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9981232727407754	WITHOUT_CLASSIFICATION	0.0010590860288507246	DESIGN	7.924468430083027E-4	IMPLEMENTATION	2.3595802313423665E-5	DEFECT	1.0486469892395832E-6	DOCUMENTATION	5.499380629554106E-7	TEST
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999791687338786	WITHOUT_CLASSIFICATION	2.004691860516258E-5	DESIGN	7.600514377969599E-7	DEFECT	2.0128777260921114E-8	DOCUMENTATION	3.850128790383277E-9	TEST	3.1717232732247766E-10	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9966613699230876	WITHOUT_CLASSIFICATION	0.0033354760032038426	DESIGN	2.2872339683724792E-6	DEFECT	6.109431300513454E-7	TEST	2.3139682275937468E-7	DOCUMENTATION	2.4499787377133994E-8	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999994146404	WITHOUT_CLASSIFICATION	4.2063989261999055E-10	DESIGN	1.4508910193191867E-10	IMPLEMENTATION	1.7291986993926503E-11	TEST	1.3873562983744295E-12	DOCUMENTATION	9.512975417008949E-13	DEFECT
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999998283314482	WITHOUT_CLASSIFICATION	1.2087599819494534E-7	DESIGN	3.792383496585025E-8	DEFECT	1.1403598609036483E-8	IMPLEMENTATION	9.330156633061762E-10	TEST	5.321044107933554E-10	DOCUMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954025454185	WITHOUT_CLASSIFICATION	3.075388145388494E-6	IMPLEMENTATION	1.0991960410941061E-6	DESIGN	2.1572621027518303E-7	DOCUMENTATION	1.972293260876938E-7	DEFECT	9.914858469792526E-9	TEST
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999141581268454	WITHOUT_CLASSIFICATION	8.562597655342404E-5	DESIGN	1.1372897420425596E-7	DEFECT	9.553968501201981E-8	TEST	3.87867480512852E-9	IMPLEMENTATION	2.749267097658123E-9	DOCUMENTATION
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999844688538804	WITHOUT_CLASSIFICATION	1.0456838962102822E-5	DEFECT	4.703331390378762E-6	DESIGN	2.955778470962964E-7	IMPLEMENTATION	6.402576421593412E-8	DOCUMENTATION	1.1372155932093148E-8	TEST
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999942997549053	WITHOUT_CLASSIFICATION	5.639908027142822E-6	DESIGN	3.35379107714293E-8	DOCUMENTATION	2.293483894432409E-8	TEST	3.180922227757714E-9	DEFECT	6.833957208667229E-10	IMPLEMENTATION
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999984453373568	WITHOUT_CLASSIFICATION	7.68812156748013E-7	DESIGN	4.724531104154569E-7	DEFECT	2.847261608675688E-7	IMPLEMENTATION	1.784995335248295E-8	DOCUMENTATION	1.082126183572991E-8	TEST
/*implied*/	WITHOUT_CLASSIFICATION	0.9986485391855051	WITHOUT_CLASSIFICATION	7.066999746491208E-4	DESIGN	6.276492176482597E-4	IMPLEMENTATION	8.257698401806226E-6	DEFECT	5.974500309929746E-6	TEST	2.8794234856897634E-6	DOCUMENTATION
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9973203219295698	WITHOUT_CLASSIFICATION	0.0026744768417327727	IMPLEMENTATION	3.783947371222511E-6	DESIGN	9.085880912238823E-7	TEST	4.109549228026823E-7	DOCUMENTATION	9.773831230002725E-8	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954025454185	WITHOUT_CLASSIFICATION	3.075388145388494E-6	IMPLEMENTATION	1.0991960410941061E-6	DESIGN	2.1572621027518303E-7	DOCUMENTATION	1.972293260876938E-7	DEFECT	9.914858469792526E-9	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954025454185	WITHOUT_CLASSIFICATION	3.075388145388494E-6	IMPLEMENTATION	1.0991960410941061E-6	DESIGN	2.1572621027518303E-7	DOCUMENTATION	1.972293260876938E-7	DEFECT	9.914858469792526E-9	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999564607580024	WITHOUT_CLASSIFICATION	3.870201502324696E-5	DEFECT	3.487738939377237E-6	DESIGN	1.1906595595071477E-6	IMPLEMENTATION	9.912418586378564E-8	DOCUMENTATION	5.970428972054232E-8	TEST
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999850968122668	WITHOUT_CLASSIFICATION	1.4882325424501885E-5	DESIGN	1.9673261887421183E-8	DEFECT	8.068961430255117E-10	DOCUMENTATION	2.2047719256285004E-10	TEST	1.6167347751312465E-10	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999826205839628	WITHOUT_CLASSIFICATION	1.719903765531941E-4	DESIGN	1.167604517241851E-6	DEFECT	3.9522589172100196E-7	TEST	2.2167328369617238E-7	DOCUMENTATION	1.928012616445898E-8	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999621952181215	WITHOUT_CLASSIFICATION	3.166209033340064E-5	DEFECT	5.5579377748822684E-6	DESIGN	3.293163239672122E-7	IMPLEMENTATION	2.4568367646650875E-7	DOCUMENTATION	9.753769702230938E-9	TEST
/*	WITHOUT_CLASSIFICATION	0.9334241107300555	WITHOUT_CLASSIFICATION	0.057334198134129065	DESIGN	0.006046816090410139	DEFECT	0.0029370291208706606	IMPLEMENTATION	1.5123563116669595E-4	DOCUMENTATION	1.0661029336787873E-4	TEST
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.512876461254964	DESIGN	0.48684657397330816	WITHOUT_CLASSIFICATION	2.268086700296669E-4	DEFECT	2.581473822274823E-5	DOCUMENTATION	2.1463055644955048E-5	TEST	2.8783078304574023E-6	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.999113689527894	WITHOUT_CLASSIFICATION	8.682074883629833E-4	IMPLEMENTATION	1.470232789259971E-5	DEFECT	3.3652803660051736E-6	DESIGN	3.403731722499546E-8	TEST	1.3381671815907601E-9	DOCUMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9927304454069508	WITHOUT_CLASSIFICATION	0.007218046301910146	IMPLEMENTATION	5.142131499796692E-5	DESIGN	7.619522488620039E-8	DEFECT	8.146201615669202E-9	DOCUMENTATION	2.6347146015299344E-9	TEST
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9998513312967806	WITHOUT_CLASSIFICATION	1.0775806156839994E-4	IMPLEMENTATION	3.5886794885618104E-5	DESIGN	3.1965184488459223E-6	DEFECT	1.08306771257509E-6	TEST	7.442606040011102E-7	DOCUMENTATION
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999996374767143	WITHOUT_CLASSIFICATION	3.4800745709426205E-7	DESIGN	1.1841382977550803E-8	DEFECT	1.7456066669206216E-9	IMPLEMENTATION	7.501534273651215E-10	TEST	1.786856339254429E-10	DOCUMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999548837577101	WITHOUT_CLASSIFICATION	3.393630546441184E-5	DESIGN	6.797976735465682E-6	DEFECT	2.248226402213822E-6	IMPLEMENTATION	1.845104079800022E-6	TEST	2.8862960780374974E-7	DOCUMENTATION
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9998302256791963	WITHOUT_CLASSIFICATION	1.2076098561709283E-4	IMPLEMENTATION	4.803096962178398E-5	DESIGN	7.604242355381217E-7	DEFECT	2.1709613392446778E-7	DOCUMENTATION	4.845195359642845E-9	TEST
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999967898276251	WITHOUT_CLASSIFICATION	2.656120318035101E-6	DESIGN	3.913314577730307E-7	IMPLEMENTATION	1.3342059234977338E-7	DOCUMENTATION	1.4836196753915319E-8	TEST	1.4463810013928145E-8	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999999421245952	WITHOUT_CLASSIFICATION	3.519473969308515E-8	DESIGN	7.75765188648399E-9	DEFECT	6.54618482287064E-9	IMPLEMENTATION	5.486251945887814E-9	DOCUMENTATION	2.8905764165024876E-9	TEST
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990504973772423	WITHOUT_CLASSIFICATION	9.210258102010355E-4	IMPLEMENTATION	2.4285151516075554E-5	DESIGN	2.838451644138176E-6	DEFECT	1.1996253011851967E-6	DOCUMENTATION	1.5358409529567023E-7	TEST
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999231420744	WITHOUT_CLASSIFICATION	7.175971292411464E-8	IMPLEMENTATION	2.702543428065286E-9	DESIGN	1.783129400569581E-9	DEFECT	3.8640076449391356E-10	TEST	2.2613913468859008E-10	DOCUMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998935659380814	WITHOUT_CLASSIFICATION	7.85140348243173E-5	DEFECT	2.3201008541771562E-5	DESIGN	3.3507496794248775E-6	TEST	6.876421510889826E-7	IMPLEMENTATION	6.806267219413826E-7	DOCUMENTATION
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999970557022201	WITHOUT_CLASSIFICATION	2.5337877699441493E-6	DEFECT	2.3643920559873794E-7	IMPLEMENTATION	1.0124976734724524E-7	TEST	6.034911033512636E-8	DESIGN	1.2471926717316112E-8	DOCUMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999986499522535	WITHOUT_CLASSIFICATION	8.174354349083442E-7	DEFECT	3.780307207150134E-7	DESIGN	9.440354253107107E-8	IMPLEMENTATION	5.456785681136387E-8	TEST	5.610191505795047E-9	DOCUMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998577798278151	WITHOUT_CLASSIFICATION	1.2291571938796283E-4	IMPLEMENTATION	1.3393621916533927E-5	DEFECT	5.266318487345756E-6	DESIGN	5.809032882962287E-7	DOCUMENTATION	6.360910491623897E-8	TEST
//TODO:	WITHOUT_CLASSIFICATION	0.9924457063170298	WITHOUT_CLASSIFICATION	0.004490779292055197	DESIGN	0.0022399444865142033	IMPLEMENTATION	2.9981287248145774E-4	DEFECT	2.8775591824790745E-4	DOCUMENTATION	2.3600111367160593E-4	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999932491596832	WITHOUT_CLASSIFICATION	6.4427018605697395E-6	DESIGN	2.5724929180291293E-7	IMPLEMENTATION	2.493518838346937E-8	DEFECT	1.9078794953485344E-8	DOCUMENTATION	6.875181025322114E-9	TEST
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999999879785381	WITHOUT_CLASSIFICATION	6.926132344604109E-9	DESIGN	4.504546148240453E-9	DEFECT	5.279093041794118E-10	IMPLEMENTATION	6.189474290378754E-11	TEST	9.794284910708197E-13	DOCUMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999994126858299	WITHOUT_CLASSIFICATION	4.829263344354328E-7	IMPLEMENTATION	8.609654544624046E-8	DEFECT	1.1483063105384563E-8	DESIGN	5.505150250700355E-9	TEST	1.303076903576384E-9	DOCUMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997886686202268	WITHOUT_CLASSIFICATION	1.742323063103442E-4	DESIGN	3.347506629917731E-5	IMPLEMENTATION	3.146994150462029E-6	DEFECT	3.469839492879375E-7	DOCUMENTATION	1.3002906398709754E-7	TEST
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999910525099999	WITHOUT_CLASSIFICATION	7.056109084994612E-6	IMPLEMENTATION	1.8514897381631108E-6	DESIGN	2.7434796226034185E-8	DEFECT	1.1719171577388857E-8	DOCUMENTATION	7.37209316390756E-10	TEST
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999985596355617	WITHOUT_CLASSIFICATION	1.408523683536274E-6	DESIGN	2.1907407589630996E-8	TEST	4.373570261402369E-9	DEFECT	3.745903078017341E-9	DOCUMENTATION	1.8138737621485496E-9	IMPLEMENTATION
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999988419268664	WITHOUT_CLASSIFICATION	4.607636473286702E-7	DESIGN	3.3805998017645626E-7	DEFECT	2.475362198385487E-7	IMPLEMENTATION	6.585689491129853E-8	TEST	4.585639139336041E-8	DOCUMENTATION
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999944696667176	WITHOUT_CLASSIFICATION	3.448389452512924E-6	IMPLEMENTATION	1.7486196210570043E-6	DESIGN	1.6248959140480164E-7	DOCUMENTATION	1.4353355556740844E-7	DEFECT	2.730106190822781E-8	TEST
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9994993052459651	WITHOUT_CLASSIFICATION	4.945886931363177E-4	DESIGN	5.889862684295017E-6	DEFECT	2.1029470995693526E-7	IMPLEMENTATION	5.2437621148715146E-9	DOCUMENTATION	6.597423012553853E-10	TEST
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999996129420898	WITHOUT_CLASSIFICATION	2.8621983158941444E-7	DESIGN	6.88366350335753E-8	DEFECT	2.9189963139852558E-8	TEST	1.72979461951034E-9	DOCUMENTATION	1.0816857730690198E-9	IMPLEMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9998506014536075	WITHOUT_CLASSIFICATION	7.406863041724556E-5	DESIGN	7.171366637863131E-5	IMPLEMENTATION	2.928544734295248E-6	DEFECT	4.6816287635758886E-7	TEST	2.1954198606206485E-7	DOCUMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.9999886599707256	WITHOUT_CLASSIFICATION	6.844934869015529E-6	IMPLEMENTATION	2.9291220857351352E-6	DEFECT	1.3964054389578491E-6	DESIGN	1.3949389618132038E-7	DOCUMENTATION	3.007298464253959E-8	TEST
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999835950787838	WITHOUT_CLASSIFICATION	1.4481108830479312E-5	DEFECT	1.8517779351449111E-6	DESIGN	4.396613297736246E-8	DOCUMENTATION	2.016429215706844E-8	IMPLEMENTATION	7.904025406131523E-9	TEST
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9998432594232611	WITHOUT_CLASSIFICATION	9.566412077899176E-5	DEFECT	5.955997668987695E-5	DESIGN	9.432731688207279E-7	IMPLEMENTATION	5.2424395190011E-7	TEST	4.896214946459441E-8	DOCUMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999999004821789	WITHOUT_CLASSIFICATION	8.340878209373152E-8	DESIGN	1.2282083058231059E-8	DEFECT	2.060877787792661E-9	IMPLEMENTATION	9.883818377124688E-10	DOCUMENTATION	7.776962318169104E-10	TEST
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9926099982937845	WITHOUT_CLASSIFICATION	0.007377657723041796	DESIGN	8.165882727564061E-6	DEFECT	1.8183575163267475E-6	IMPLEMENTATION	1.5853237394936372E-6	DOCUMENTATION	7.744191904230914E-7	TEST
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999776736492291	WITHOUT_CLASSIFICATION	1.865396182650113E-5	DESIGN	3.5624894787410064E-6	IMPLEMENTATION	8.607873722312667E-8	TEST	1.2681955430169353E-8	DOCUMENTATION	1.113877297207669E-8	DEFECT
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9996788431134753	WITHOUT_CLASSIFICATION	3.1471427637865446E-4	DESIGN	5.520716228953099E-6	DEFECT	8.108601419156102E-7	DOCUMENTATION	8.167856862246334E-8	TEST	2.9355206607041567E-8	IMPLEMENTATION
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999799142848594	WITHOUT_CLASSIFICATION	1.9982020082093194E-5	DESIGN	8.175661429693714E-8	DEFECT	1.8431581211323462E-8	DOCUMENTATION	3.433829399163925E-9	TEST	7.303370404668802E-11	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999989913784378	WITHOUT_CLASSIFICATION	8.050800607360794E-7	TEST	7.89210918441578E-8	DEFECT	5.743981112161746E-8	DESIGN	5.684433088039985E-8	IMPLEMENTATION	1.033626744809319E-8	DOCUMENTATION
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999990538622189	WITHOUT_CLASSIFICATION	8.897115781824098E-7	IMPLEMENTATION	2.6855343729976112E-8	DESIGN	1.949365489799924E-8	DEFECT	8.056634793189008E-9	DOCUMENTATION	2.0205695085573944E-9	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999994969780774	WITHOUT_CLASSIFICATION	4.877144142140132E-7	IMPLEMENTATION	5.436788285055553E-9	DESIGN	4.653333413588447E-9	DOCUMENTATION	3.150783186290458E-9	DEFECT	2.0666035601062907E-9	TEST
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999711725673585	WITHOUT_CLASSIFICATION	2.8790152630119834E-5	IMPLEMENTATION	2.331705357657034E-8	DEFECT	7.933713944274523E-9	DESIGN	3.324500815448533E-9	DOCUMENTATION	2.704743168115688E-9	TEST
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999994969780774	WITHOUT_CLASSIFICATION	4.877144142140132E-7	IMPLEMENTATION	5.436788285055553E-9	DESIGN	4.653333413588447E-9	DOCUMENTATION	3.150783186290458E-9	DEFECT	2.0666035601062907E-9	TEST
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999986604572497	WITHOUT_CLASSIFICATION	1.2108478290722696E-6	DESIGN	6.462809583374427E-8	DEFECT	5.879292746650324E-8	IMPLEMENTATION	3.56804767628994E-9	TEST	1.7058502789470999E-9	DOCUMENTATION
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999931714152239	WITHOUT_CLASSIFICATION	5.563106735950821E-6	DESIGN	8.999348052717093E-7	IMPLEMENTATION	2.860887299775694E-7	DEFECT	7.60264548093165E-8	DOCUMENTATION	3.4280500703906833E-9	TEST
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999628319847708	WITHOUT_CLASSIFICATION	3.0090200496238608E-5	IMPLEMENTATION	3.563360738726416E-6	DOCUMENTATION	3.3485179827163053E-6	DESIGN	1.0410295639352823E-7	DEFECT	6.183305509167702E-8	TEST
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999998552974126	WITHOUT_CLASSIFICATION	1.0422720937331818E-7	IMPLEMENTATION	3.5869705029312824E-8	DESIGN	4.17345988311541E-9	DEFECT	2.513334945402238E-10	TEST	1.8087950794266162E-10	DOCUMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.999990377983661	WITHOUT_CLASSIFICATION	8.20575371362943E-6	DESIGN	1.1747041952510153E-6	IMPLEMENTATION	1.8556300285498925E-7	DEFECT	3.7659198013494694E-8	TEST	1.8336229397269454E-8	DOCUMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999911077547141	WITHOUT_CLASSIFICATION	7.002316557618491E-6	IMPLEMENTATION	1.4435746623022724E-6	DOCUMENTATION	4.020767449874758E-7	DESIGN	2.2318934008825403E-8	TEST	2.1958386963506004E-8	DEFECT
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999988704055025	WITHOUT_CLASSIFICATION	9.188619281613183E-7	DESIGN	1.0842720337294182E-7	IMPLEMENTATION	5.061879346319263E-8	TEST	3.987826045003218E-8	DEFECT	1.1808312022431703E-8	DOCUMENTATION
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9997463845839727	WITHOUT_CLASSIFICATION	2.529722372150756E-4	DESIGN	5.061832449383513E-7	TEST	1.0543614960042328E-7	DEFECT	1.614949524253066E-8	IMPLEMENTATION	1.5409922403884915E-8	DOCUMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9997445844728968	WITHOUT_CLASSIFICATION	1.8613503167242508E-4	DEFECT	6.89772629546666E-5	DESIGN	2.0240915594146047E-7	TEST	6.440483639377201E-8	DOCUMENTATION	3.641848371672497E-8	IMPLEMENTATION
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999995672906867	WITHOUT_CLASSIFICATION	3.73046118162505E-7	IMPLEMENTATION	4.830170600344358E-8	DESIGN	8.889976746972349E-9	DEFECT	1.2675697944703116E-9	DOCUMENTATION	1.2039424819784175E-9	TEST
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999998378573529	WITHOUT_CLASSIFICATION	1.133036778698909E-7	IMPLEMENTATION	3.4878424848806104E-8	DESIGN	6.857084306656332E-9	TEST	3.959120772124665E-9	DEFECT	3.1443392873421345E-9	DOCUMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999835290460571	WITHOUT_CLASSIFICATION	1.5974436819183604E-5	DESIGN	3.4820446933067416E-7	DEFECT	7.51069070976454E-8	DOCUMENTATION	5.5152896890660766E-8	IMPLEMENTATION	1.8052850349585914E-8	TEST
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999752886461	WITHOUT_CLASSIFICATION	9.191982664096093E-9	IMPLEMENTATION	8.959932784826883E-9	DESIGN	5.584709701238554E-9	TEST	8.464228112195582E-10	DEFECT	1.2830590146132005E-10	DOCUMENTATION
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999264409790147	DESIGN	7.21111517248427E-5	WITHOUT_CLASSIFICATION	1.1428510626876008E-6	DEFECT	2.951293513341155E-7	TEST	6.441718832800961E-9	DOCUMENTATION	3.4471276821199463E-9	IMPLEMENTATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999353298911281	WITHOUT_CLASSIFICATION	4.612143019919597E-5	IMPLEMENTATION	1.49432417835918E-5	DEFECT	2.048689131739316E-6	DESIGN	1.3169597318670322E-6	DOCUMENTATION	2.397880255997892E-7	TEST
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999998844577829	WITHOUT_CLASSIFICATION	1.1081552664245377E-7	IMPLEMENTATION	3.564068240078222E-9	DESIGN	9.261035856399461E-10	DEFECT	1.3533268149721796E-10	DOCUMENTATION	1.0118581477738408E-10	TEST
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999621296957831	WITHOUT_CLASSIFICATION	3.7217504302402016E-5	DESIGN	5.420836712179404E-7	IMPLEMENTATION	9.715317398355675E-8	DEFECT	7.239689500497586E-9	TEST	6.323379847996702E-9	DOCUMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999995576655146	WITHOUT_CLASSIFICATION	4.1840675820405886E-7	DESIGN	1.0956796712402493E-8	DEFECT	5.0984350772032515E-9	DOCUMENTATION	4.346699213422913E-9	TEST	3.52579604210385E-9	IMPLEMENTATION
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.99999999001722	WITHOUT_CLASSIFICATION	7.948160074048549E-9	DESIGN	1.4361259254713807E-9	IMPLEMENTATION	4.2007402152810373E-10	DEFECT	1.7262200378157783E-10	TEST	5.7980124751755175E-12	DOCUMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9997094546070758	WITHOUT_CLASSIFICATION	2.903643139084597E-4	DESIGN	1.0314792889882553E-7	TEST	5.1267955429707234E-8	DEFECT	2.304756982495422E-8	DOCUMENTATION	3.6155615274924874E-9	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999969298787952	WITHOUT_CLASSIFICATION	2.7908785752339053E-6	DESIGN	1.2866534520692142E-7	TEST	1.231871986240525E-7	DEFECT	2.170220125629845E-8	IMPLEMENTATION	5.687884464273415E-9	DOCUMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9998332538300722	WITHOUT_CLASSIFICATION	8.61763400307643E-5	IMPLEMENTATION	6.898282876562431E-5	DESIGN	1.0276084160798859E-5	DEFECT	8.538126732653871E-7	TEST	4.57104297374183E-7	DOCUMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9817053755819679	WITHOUT_CLASSIFICATION	0.01805211693225513	DESIGN	1.9970618143191402E-4	DEFECT	4.1797975233808016E-5	TEST	6.75261170558708E-7	DOCUMENTATION	3.280679405980046E-7	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999638191943352	WITHOUT_CLASSIFICATION	3.445565596959531E-5	DESIGN	1.6272690608148934E-6	IMPLEMENTATION	9.689371188150595E-8	DEFECT	8.279233756561811E-10	TEST	1.589990013607035E-10	DOCUMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999983075916017	WITHOUT_CLASSIFICATION	1.4730437366209918E-6	IMPLEMENTATION	8.528641258522909E-8	DEFECT	8.33019120387099E-8	DESIGN	3.749065265904724E-8	TEST	1.3285684348262269E-8	DOCUMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9960716893592576	WITHOUT_CLASSIFICATION	0.003198719323121063	DESIGN	7.286588146363265E-4	DEFECT	8.55878728740292E-7	TEST	7.64500017016913E-8	DOCUMENTATION	1.7425455092326487E-10	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9997282696749112	WITHOUT_CLASSIFICATION	2.595795805101254E-4	DESIGN	8.497063828854356E-6	DEFECT	2.5760170648945113E-6	IMPLEMENTATION	8.025273766333833E-7	TEST	2.7513630834797777E-7	DOCUMENTATION
//default mode	WITHOUT_CLASSIFICATION	0.999992680580586	WITHOUT_CLASSIFICATION	5.767844946578833E-6	DESIGN	1.028525290998191E-6	IMPLEMENTATION	3.5670189243448014E-7	DEFECT	9.114382083562961E-8	DOCUMENTATION	7.520346308596802E-8	TEST
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999997205293368	WITHOUT_CLASSIFICATION	1.566124103146289E-7	IMPLEMENTATION	8.945875163601634E-8	DESIGN	2.5098698279171308E-8	DOCUMENTATION	5.783634405098436E-9	DEFECT	2.5171686278599425E-9	TEST
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999788112498935	WITHOUT_CLASSIFICATION	2.024534911546957E-5	DEFECT	4.678623596383361E-7	IMPLEMENTATION	3.1201128139103614E-7	TEST	1.309978312221197E-7	DESIGN	3.2529518699059077E-8	DOCUMENTATION
//after reset!	WITHOUT_CLASSIFICATION	0.9999895095829276	WITHOUT_CLASSIFICATION	6.149329357890626E-6	DEFECT	2.8699304788261558E-6	IMPLEMENTATION	6.701584757671033E-7	DESIGN	6.632729592163823E-7	TEST	1.3772580049048323E-7	DOCUMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.995988494109246	WITHOUT_CLASSIFICATION	0.0026204965958879253	DEFECT	0.0012464193919613097	DESIGN	7.427855403698465E-5	DOCUMENTATION	6.900737891275688E-5	IMPLEMENTATION	1.3039699551633218E-6	TEST
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9664248519605098	WITHOUT_CLASSIFICATION	0.03356464994481794	DESIGN	9.753780591369247E-6	DEFECT	6.352152793955914E-7	TEST	8.057796993008698E-8	IMPLEMENTATION	2.8520831673286214E-8	DOCUMENTATION
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999903822431034	WITHOUT_CLASSIFICATION	8.500156280994051E-6	DEFECT	8.546783455713144E-7	DESIGN	1.5001333115431928E-7	IMPLEMENTATION	8.877677320677923E-8	DOCUMENTATION	2.4132165516624162E-8	TEST
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999604898299109	WITHOUT_CLASSIFICATION	3.0467693770019608E-5	DEFECT	5.875201216102687E-6	DESIGN	1.4792917494352553E-6	IMPLEMENTATION	1.4015454126903984E-6	DOCUMENTATION	2.8643794087855825E-7	TEST
//if its "id"	WITHOUT_CLASSIFICATION	0.9999871639242808	WITHOUT_CLASSIFICATION	6.8822804272773165E-6	DESIGN	2.870569762049532E-6	DEFECT	2.522291734189781E-6	IMPLEMENTATION	4.1513821397097645E-7	TEST	1.4579558181023096E-7	DOCUMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.9993281206055655	WITHOUT_CLASSIFICATION	6.528645861389285E-4	DESIGN	1.684363004264389E-5	DEFECT	1.2255038327159852E-6	DOCUMENTATION	9.103495497044205E-7	TEST	3.532487045013281E-8	IMPLEMENTATION
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999998570770959	WITHOUT_CLASSIFICATION	8.841815259686428E-8	IMPLEMENTATION	2.8996608234573273E-8	DESIGN	1.7996897456902296E-8	DOCUMENTATION	5.782930289506893E-9	DEFECT	1.72831556663425E-9	TEST
//important!!	WITHOUT_CLASSIFICATION	0.9997202685421906	WITHOUT_CLASSIFICATION	1.4018419370928617E-4	DESIGN	1.0688492360691571E-4	DEFECT	2.480621482351929E-5	IMPLEMENTATION	6.0006024862633185E-6	DOCUMENTATION	1.8555231833033866E-6	TEST
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999977028393306	WITHOUT_CLASSIFICATION	1.3585448057681503E-6	DESIGN	7.258798805094466E-7	DEFECT	1.1655605899825444E-7	TEST	8.891629524325864E-8	IMPLEMENTATION	7.2636290409690635E-9	DOCUMENTATION
// an association	WITHOUT_CLASSIFICATION	0.9999986487342405	WITHOUT_CLASSIFICATION	6.922433062124188E-7	DESIGN	3.1183347507860155E-7	DOCUMENTATION	1.8196005097703254E-7	DEFECT	1.5606236561620756E-7	TEST	9.166561592358106E-9	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999570423047092	WITHOUT_CLASSIFICATION	2.9138016131931766E-5	DEFECT	1.2566651021790182E-5	IMPLEMENTATION	9.039684105536746E-7	DESIGN	2.8372877603674357E-7	DOCUMENTATION	6.53309504963152E-8	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9977093001889771	WITHOUT_CLASSIFICATION	0.0014048729670707145	DEFECT	8.343451504393242E-4	DESIGN	4.96647556308789E-5	TEST	1.796259081184219E-6	DOCUMENTATION	2.0678800951008083E-8	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9960716893592576	WITHOUT_CLASSIFICATION	0.003198719323121063	DESIGN	7.286588146363265E-4	DEFECT	8.55878728740292E-7	TEST	7.64500017016913E-8	DOCUMENTATION	1.7425455092326487E-10	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9996121688691283	WITHOUT_CLASSIFICATION	3.0092847043413376E-4	DESIGN	4.666079027523797E-5	DEFECT	1.9514268708504445E-5	IMPLEMENTATION	1.6537204199019186E-5	DOCUMENTATION	4.190397254903177E-6	TEST
// collections of values	WITHOUT_CLASSIFICATION	0.9999974329418546	WITHOUT_CLASSIFICATION	1.4208564846252686E-6	DEFECT	1.0078531264264086E-6	DESIGN	1.177879790625261E-7	IMPLEMENTATION	1.3012958655538945E-8	TEST	7.547596561691689E-9	DOCUMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9991626677619488	WITHOUT_CLASSIFICATION	7.408466542569482E-4	DESIGN	7.51368729753223E-5	DEFECT	1.0061049274757635E-5	DOCUMENTATION	8.643930527521548E-6	IMPLEMENTATION	2.6437310167728206E-6	TEST
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999940199006367	WITHOUT_CLASSIFICATION	5.478661155598023E-6	DEFECT	4.1342286353712796E-7	DESIGN	7.695394174637618E-8	TEST	8.57494844949088E-9	DOCUMENTATION	2.486454005736613E-9	IMPLEMENTATION
//special case	WITHOUT_CLASSIFICATION	0.9999871805952222	WITHOUT_CLASSIFICATION	1.2330153795917867E-5	IMPLEMENTATION	2.1096603352352785E-7	DEFECT	1.470040568366178E-7	DESIGN	1.1984553865411314E-7	DOCUMENTATION	1.1435352929236685E-8	TEST
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999833103044525	WITHOUT_CLASSIFICATION	1.4693276314325224E-5	DESIGN	1.514983522643723E-6	DEFECT	4.330265030109825E-7	DOCUMENTATION	2.781347191824702E-8	TEST	2.0595735500711208E-8	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9979506884470616	WITHOUT_CLASSIFICATION	0.002041626089381613	DESIGN	6.367114856500128E-6	IMPLEMENTATION	7.318841158251602E-7	DOCUMENTATION	5.707484837061262E-7	DEFECT	1.5716100683876325E-8	TEST
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9885084946292864	DESIGN	0.009858582431772712	DEFECT	0.001628897501971412	WITHOUT_CLASSIFICATION	3.6571002026201346E-6	TEST	2.9045089786594564E-7	IMPLEMENTATION	7.788586903085742E-8	DOCUMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999960740624021	WITHOUT_CLASSIFICATION	2.5401138725038838E-6	IMPLEMENTATION	1.053140898736502E-6	DESIGN	2.494003580561134E-7	DEFECT	5.5740007575411994E-8	TEST	2.7542461038850232E-8	DOCUMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9992965908794562	WITHOUT_CLASSIFICATION	6.939195478026859E-4	DESIGN	9.405833809158802E-6	DEFECT	5.665810378501157E-8	IMPLEMENTATION	2.1529867900476255E-8	DOCUMENTATION	5.5509602901499566E-9	TEST
//register collection role	WITHOUT_CLASSIFICATION	0.9999433043852659	WITHOUT_CLASSIFICATION	5.153662487857028E-5	DESIGN	3.9407852946558464E-6	IMPLEMENTATION	7.842382927937075E-7	DEFECT	3.2384409795310557E-7	TEST	1.1012216995103596E-7	DOCUMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999999918019755	WITHOUT_CLASSIFICATION	7.57522658998989E-9	DESIGN	2.558375692139547E-10	DOCUMENTATION	1.9179851518455764E-10	TEST	1.5266000717727629E-10	DEFECT	2.2501651271372445E-11	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999941442267002	WITHOUT_CLASSIFICATION	3.1476841704458133E-6	IMPLEMENTATION	2.4532252131756322E-6	DEFECT	1.0477979177836544E-7	TEST	8.937602686864177E-8	DOCUMENTATION	6.070809759260345E-8	DESIGN
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9997734674475613	WITHOUT_CLASSIFICATION	1.8620025862421758E-4	DESIGN	1.8842688875234705E-5	DEFECT	1.0963668261638273E-5	IMPLEMENTATION	9.115171442220561E-6	DOCUMENTATION	1.4107652353435124E-6	TEST
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999995583326161	WITHOUT_CLASSIFICATION	3.3618317883432224E-7	DESIGN	5.747289636492189E-8	DEFECT	4.492202227385081E-8	DOCUMENTATION	2.7266997666045747E-9	IMPLEMENTATION	3.6258673691158795E-10	TEST
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999788924138304	WITHOUT_CLASSIFICATION	2.109706719140896E-5	DESIGN	4.432209121136333E-9	IMPLEMENTATION	3.1822118202005724E-9	TEST	2.1547292823431857E-9	DEFECT	7.49827679609047E-10	DOCUMENTATION
//ie. no select clause	WITHOUT_CLASSIFICATION	0.999999953927888	WITHOUT_CLASSIFICATION	2.1615172340113928E-8	DESIGN	1.2814072413361832E-8	IMPLEMENTATION	7.3330450426991655E-9	DEFECT	3.655507783977394E-9	DOCUMENTATION	6.543143581240154E-10	TEST
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999999533646085	WITHOUT_CLASSIFICATION	2.7760907266125582E-8	DESIGN	1.404506702420651E-8	IMPLEMENTATION	2.4482022197093662E-9	DEFECT	1.5194277957133657E-9	TEST	8.617872069115717E-10	DOCUMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999655401006424	WITHOUT_CLASSIFICATION	3.3953762926559376E-5	DESIGN	4.2544186300416964E-7	DEFECT	7.696904195625778E-8	IMPLEMENTATION	2.323589977900371E-9	TEST	1.4019360861230779E-9	DOCUMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9996121688691283	WITHOUT_CLASSIFICATION	3.0092847043413376E-4	DESIGN	4.666079027523797E-5	DEFECT	1.9514268708504445E-5	IMPLEMENTATION	1.6537204199019186E-5	DOCUMENTATION	4.190397254903177E-6	TEST
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.999985339124126	WITHOUT_CLASSIFICATION	1.0943967081105377E-5	IMPLEMENTATION	1.7836131431789475E-6	DEFECT	1.3044162894420509E-6	DESIGN	4.507656699285172E-7	TEST	1.7811369034516147E-7	DOCUMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999355747412129	WITHOUT_CLASSIFICATION	5.869614881610941E-5	DEFECT	5.651687452297109E-6	DESIGN	3.430244832511134E-8	DOCUMENTATION	2.7109947473082885E-8	IMPLEMENTATION	1.6010122889870207E-8	TEST
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999981974105188	WITHOUT_CLASSIFICATION	1.1717008125384003E-6	DESIGN	6.055282673770783E-7	DEFECT	2.1055678593412837E-8	DOCUMENTATION	4.130160825979423E-9	TEST	1.7456180207796868E-10	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.998936460216309	WITHOUT_CLASSIFICATION	0.0010589455314830814	DESIGN	4.158527389362311E-6	DEFECT	3.089806163432559E-7	DOCUMENTATION	8.69898753730687E-8	IMPLEMENTATION	3.975432696704309E-8	TEST
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9995234008330397	WITHOUT_CLASSIFICATION	4.711729736444802E-4	DESIGN	5.3970346858938185E-6	DEFECT	2.3425484841266944E-8	TEST	4.824889509051059E-9	DOCUMENTATION	9.082556583350231E-10	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9580155018189452	WITHOUT_CLASSIFICATION	0.03816724462093453	IMPLEMENTATION	0.0023147158554975484	DESIGN	0.0014257465695139543	DEFECT	4.644599512753906E-5	DOCUMENTATION	3.0345139981191906E-5	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9580155018189452	WITHOUT_CLASSIFICATION	0.03816724462093453	IMPLEMENTATION	0.0023147158554975484	DESIGN	0.0014257465695139543	DEFECT	4.644599512753906E-5	DOCUMENTATION	3.0345139981191906E-5	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999384234667712	WITHOUT_CLASSIFICATION	5.242045382309018E-5	DESIGN	8.205924372923127E-6	DEFECT	5.943601665477169E-7	DOCUMENTATION	2.7462381291861434E-7	IMPLEMENTATION	8.117105326925559E-8	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9580155018189452	WITHOUT_CLASSIFICATION	0.03816724462093453	IMPLEMENTATION	0.0023147158554975484	DESIGN	0.0014257465695139543	DEFECT	4.644599512753906E-5	DOCUMENTATION	3.0345139981191906E-5	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9580155018189452	WITHOUT_CLASSIFICATION	0.03816724462093453	IMPLEMENTATION	0.0023147158554975484	DESIGN	0.0014257465695139543	DEFECT	4.644599512753906E-5	DOCUMENTATION	3.0345139981191906E-5	TEST
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.6756096777903513	DESIGN	0.30407906888588343	WITHOUT_CLASSIFICATION	0.015655581598828742	DEFECT	0.0038969866746895875	DOCUMENTATION	7.217971426271232E-4	IMPLEMENTATION	3.688790761979769E-5	TEST
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999994127939545	WITHOUT_CLASSIFICATION	4.2698989516273756E-7	DEFECT	1.5650551599838598E-7	DESIGN	2.8854444769623546E-9	TEST	4.948629119855445E-10	DOCUMENTATION	3.3032675834165546E-10	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999853040989319	WITHOUT_CLASSIFICATION	1.4528258517929249E-5	DESIGN	1.0388829531254167E-7	IMPLEMENTATION	3.727611924499164E-8	DEFECT	2.1581182512428213E-8	TEST	4.896953231619624E-9	DOCUMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999975744900227	WITHOUT_CLASSIFICATION	1.695976358838954E-6	DESIGN	5.306970085132952E-7	IMPLEMENTATION	1.7213911349102533E-7	DEFECT	1.8804732837144588E-8	TEST	7.892763528578236E-9	DOCUMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.8625972318273607	WITHOUT_CLASSIFICATION	0.13726366201468013	DESIGN	1.3765475345232445E-4	DEFECT	9.769883131350249E-7	DOCUMENTATION	2.99802539807211E-7	IMPLEMENTATION	1.746136539217036E-7	TEST
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9990893862740398	WITHOUT_CLASSIFICATION	9.100381922278094E-4	DESIGN	4.1860462103608496E-7	DOCUMENTATION	1.0430070875302026E-7	IMPLEMENTATION	3.238878579403663E-8	TEST	2.0239616782222127E-8	DEFECT
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9995963704744305	WITHOUT_CLASSIFICATION	2.4338498887149698E-4	DEFECT	1.533484999751012E-4	IMPLEMENTATION	6.062872250248578E-6	DESIGN	7.138009511023158E-7	DOCUMENTATION	1.1936352170195168E-7	TEST
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999998197578437	WITHOUT_CLASSIFICATION	1.7951563307789286E-7	DESIGN	3.1211974085822303E-10	DOCUMENTATION	2.8008733781592596E-10	TEST	1.3325331191703568E-10	DEFECT	1.0629102128093418E-12	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.999516220707987	WITHOUT_CLASSIFICATION	4.5303902327335164E-4	DESIGN	1.996428897490464E-5	DEFECT	8.639113972573078E-6	IMPLEMENTATION	1.44458472769846E-6	DOCUMENTATION	6.922810644850945E-7	TEST
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9997587539119209	WITHOUT_CLASSIFICATION	2.2145925178585486E-4	DESIGN	1.0747201765729928E-5	IMPLEMENTATION	5.160474267953076E-6	TEST	2.0411056804185784E-6	DOCUMENTATION	1.838054579060412E-6	DEFECT
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9989142664592199	WITHOUT_CLASSIFICATION	0.0010850558923467372	DESIGN	4.342798091323537E-7	DEFECT	8.952887886215918E-8	IMPLEMENTATION	8.654059228874974E-8	DOCUMENTATION	6.729915297674765E-8	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9998349834091631	WITHOUT_CLASSIFICATION	1.4346910772598554E-4	DESIGN	1.3569398730651215E-5	DEFECT	7.617844651996774E-6	IMPLEMENTATION	2.3908037555769086E-7	DOCUMENTATION	1.2115935269543492E-7	TEST
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999138881786028	WITHOUT_CLASSIFICATION	8.541516535683954E-5	DESIGN	3.195109487115319E-7	DEFECT	1.6976683508078505E-7	TEST	1.3247833512068512E-7	IMPLEMENTATION	7.48999214826317E-8	DOCUMENTATION
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999455086002116	WITHOUT_CLASSIFICATION	3.4971850525534436E-5	IMPLEMENTATION	7.051979145342228E-6	TEST	5.347425956408702E-6	DEFECT	4.78874355212594E-6	DESIGN	2.33140060902457E-6	DOCUMENTATION
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999988621638525	WITHOUT_CLASSIFICATION	1.106575524941722E-6	DESIGN	1.3803004227404438E-8	DEFECT	1.1454846406401785E-8	IMPLEMENTATION	4.1289963070065504E-9	DOCUMENTATION	1.873775685015633E-9	TEST
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9995340657746726	WITHOUT_CLASSIFICATION	3.9515164564218723E-4	DEFECT	6.742869909399909E-5	DESIGN	2.942034188805836E-6	TEST	2.503467483201226E-7	DOCUMENTATION	1.6149965400682412E-7	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999788701454	WITHOUT_CLASSIFICATION	1.9067491910291E-8	DESIGN	9.727983087025878E-10	DEFECT	5.528980054637408E-10	DOCUMENTATION	3.411720078577662E-10	IMPLEMENTATION	1.954943326681917E-10	TEST
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999994415888496	WITHOUT_CLASSIFICATION	5.40763897055699E-7	DEFECT	6.789535600518315E-9	IMPLEMENTATION	4.531492143349638E-9	DOCUMENTATION	3.95692214894802E-9	TEST	2.3693034480879037E-9	DESIGN
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9409137942649364	WITHOUT_CLASSIFICATION	0.05869357543111027	DESIGN	2.660693500151993E-4	DEFECT	5.179187773456744E-5	DOCUMENTATION	3.7973091450011115E-5	TEST	3.6795984753685445E-5	IMPLEMENTATION
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999057672065099	WITHOUT_CLASSIFICATION	4.0731270196431615E-5	IMPLEMENTATION	2.5372911167401912E-5	DESIGN	1.4831260451392738E-5	TEST	9.15498573515787E-6	DEFECT	4.142365939526718E-6	DOCUMENTATION
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999207257585421	WITHOUT_CLASSIFICATION	6.382185132064715E-5	DESIGN	1.4396043136396655E-5	IMPLEMENTATION	5.846344344013851E-7	DEFECT	2.5242334915249733E-7	DOCUMENTATION	2.1928921728907773E-7	TEST
// Add any joins	WITHOUT_CLASSIFICATION	0.9999864589167853	WITHOUT_CLASSIFICATION	8.346119394975748E-6	IMPLEMENTATION	2.796279202809083E-6	DEFECT	1.561948514023082E-6	DOCUMENTATION	7.928331166744505E-7	DESIGN	4.390298625058743E-8	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999788701454	WITHOUT_CLASSIFICATION	1.9067491910291E-8	DESIGN	9.727983087025878E-10	DEFECT	5.528980054637408E-10	DOCUMENTATION	3.411720078577662E-10	IMPLEMENTATION	1.954943326681917E-10	TEST
//named query parameter	WITHOUT_CLASSIFICATION	0.9997282696749112	WITHOUT_CLASSIFICATION	2.595795805101254E-4	DESIGN	8.497063828854356E-6	DEFECT	2.5760170648945113E-6	IMPLEMENTATION	8.025273766333833E-7	TEST	2.7513630834797777E-7	DOCUMENTATION
//path expression	WITHOUT_CLASSIFICATION	0.9999791741481107	WITHOUT_CLASSIFICATION	1.0821239329849777E-5	DEFECT	6.654649673819799E-6	IMPLEMENTATION	2.9221174818238002E-6	DESIGN	2.61094085283009E-7	DOCUMENTATION	1.6675131852150037E-7	TEST
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999989057174589	WITHOUT_CLASSIFICATION	8.182105989942572E-7	IMPLEMENTATION	1.5111655684304056E-7	DEFECT	7.740753984778918E-8	DESIGN	3.9618986822035597E-8	TEST	7.92885850427287E-9	DOCUMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.99999694574364	WITHOUT_CLASSIFICATION	1.2959027408783962E-6	DESIGN	1.2158241804111971E-6	IMPLEMENTATION	4.887101870761948E-7	DEFECT	4.42502389523237E-8	TEST	9.56901272292525E-9	DOCUMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.9999721327493394	WITHOUT_CLASSIFICATION	2.6703885595142648E-5	IMPLEMENTATION	4.410813067793345E-7	DOCUMENTATION	3.9227804551622414E-7	DESIGN	1.8527898507956554E-7	DEFECT	1.4472672795992538E-7	TEST
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999922862087451	WITHOUT_CLASSIFICATION	5.936214593412532E-6	DESIGN	1.722073363716311E-6	DEFECT	3.8158252944613066E-8	IMPLEMENTATION	1.2185187535782572E-8	DOCUMENTATION	5.159857383620827E-9	TEST
// careful with this!	WITHOUT_CLASSIFICATION	0.9999933444635261	WITHOUT_CLASSIFICATION	6.316184247733449E-6	DESIGN	1.1505475070819312E-7	DEFECT	1.1496569585784108E-7	TEST	8.248006278726658E-8	IMPLEMENTATION	2.6851716641912537E-8	DOCUMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9979163715536442	WITHOUT_CLASSIFICATION	0.0018320493654935272	IMPLEMENTATION	2.1904908009015212E-4	DEFECT	3.069366941178163E-5	DESIGN	1.0517863103631039E-6	TEST	7.845450499980586E-7	DOCUMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999956489681632	WITHOUT_CLASSIFICATION	3.2806731544623246E-6	IMPLEMENTATION	3.7270030731606346E-7	DESIGN	3.1697340628416704E-7	DEFECT	2.889513275596158E-7	DOCUMENTATION	9.173364122208554E-8	TEST
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9996611336097179	WITHOUT_CLASSIFICATION	3.1958587550544494E-4	DESIGN	1.9041462905359334E-5	IMPLEMENTATION	1.6654498852423258E-7	DOCUMENTATION	6.1704924736866E-8	TEST	1.080195825066132E-8	DEFECT
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9988023221305813	WITHOUT_CLASSIFICATION	0.0011637235858132625	DESIGN	3.069855016738154E-5	DEFECT	1.5863671525676605E-6	IMPLEMENTATION	1.291091322883317E-6	DOCUMENTATION	3.782749627456446E-7	TEST
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999998709758223	WITHOUT_CLASSIFICATION	8.773733404908612E-8	DEFECT	4.0083328409778255E-8	DESIGN	8.35032654224617E-10	TEST	1.995823988357948E-10	DOCUMENTATION	1.6890007909129978E-10	IMPLEMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999928232444278	WITHOUT_CLASSIFICATION	5.5728797481151595E-6	DESIGN	1.584151172364092E-6	DEFECT	8.926122960637399E-9	DOCUMENTATION	5.858275418500914E-9	TEST	4.9402533839446985E-9	IMPLEMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999999696345886	WITHOUT_CLASSIFICATION	2.97230942889539E-8	IMPLEMENTATION	2.768441645614448E-10	DESIGN	2.475260233954681E-10	DEFECT	8.073573463787512E-11	TEST	3.7211299408451E-11	DOCUMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999332056314664	WITHOUT_CLASSIFICATION	2.8394713864139994E-5	IMPLEMENTATION	2.3790953547892357E-5	DEFECT	1.4140425833510706E-5	DESIGN	3.856760249470317E-7	TEST	8.259926307273099E-8	DOCUMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999987022135441	WITHOUT_CLASSIFICATION	9.611138142408207E-7	DESIGN	1.7420882731800714E-7	IMPLEMENTATION	1.5403966747795534E-7	DEFECT	7.708366707329971E-9	TEST	7.157801266541915E-10	DOCUMENTATION
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999785561252538	WITHOUT_CLASSIFICATION	1.1669979696567145E-5	DESIGN	9.471824028777342E-6	DEFECT	2.118430785177737E-7	IMPLEMENTATION	6.577876895160323E-8	TEST	2.444917338536571E-8	DOCUMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.999891478614563	WITHOUT_CLASSIFICATION	9.141972191522266E-5	DEFECT	1.650390742635609E-5	IMPLEMENTATION	4.441480465482222E-7	DESIGN	1.2463900184645015E-7	TEST	2.8969046972265787E-8	DOCUMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999813155050541	WITHOUT_CLASSIFICATION	1.867113382233551E-5	DESIGN	8.44586777805927E-9	DEFECT	3.3522376773578664E-9	TEST	9.436407525118498E-10	IMPLEMENTATION	6.193773987444694E-10	DOCUMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999990948244221	WITHOUT_CLASSIFICATION	7.609214124415066E-7	DESIGN	1.3498475627557087E-7	DEFECT	5.787626650520743E-9	IMPLEMENTATION	3.067127944488178E-9	TEST	4.1465468680519507E-10	DOCUMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9906084738706362	WITHOUT_CLASSIFICATION	0.009225379871258795	DESIGN	1.2129345936769341E-4	DEFECT	4.104496901809337E-5	IMPLEMENTATION	2.8775296413629217E-6	TEST	9.30300077863983E-7	DOCUMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999800842770951	WITHOUT_CLASSIFICATION	1.774193626798927E-5	DESIGN	1.2824784321014177E-6	IMPLEMENTATION	6.015494540283112E-7	TEST	1.5367551887210709E-7	DOCUMENTATION	1.360832318214463E-7	DEFECT
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999978962433496	WITHOUT_CLASSIFICATION	1.955711683178386E-6	DEFECT	9.950717650415402E-8	DESIGN	4.2266101720746706E-8	IMPLEMENTATION	5.876387884912259E-9	DOCUMENTATION	3.953013738018274E-10	TEST
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999956489681632	WITHOUT_CLASSIFICATION	3.2806731544623246E-6	IMPLEMENTATION	3.7270030731606346E-7	DESIGN	3.1697340628416704E-7	DEFECT	2.889513275596158E-7	DOCUMENTATION	9.173364122208554E-8	TEST
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999938148481059	WITHOUT_CLASSIFICATION	4.659975382468518E-6	DESIGN	9.331784264532037E-7	IMPLEMENTATION	3.3985563262480126E-7	DOCUMENTATION	1.8111674171945968E-7	TEST	7.102571089044802E-8	DEFECT
//do replacements	WITHOUT_CLASSIFICATION	0.9999620773938278	WITHOUT_CLASSIFICATION	1.9112091507070505E-5	IMPLEMENTATION	1.850231260974887E-5	DESIGN	1.7641116482012357E-7	DOCUMENTATION	7.902572861129299E-8	DEFECT	5.276516193625463E-8	TEST
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999602137784268	WITHOUT_CLASSIFICATION	2.4913267033112497E-5	DESIGN	1.2613288794538999E-5	IMPLEMENTATION	1.5626821781382439E-6	DEFECT	6.303300547761212E-7	DOCUMENTATION	6.665351244139154E-8	TEST
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.995753006481538	WITHOUT_CLASSIFICATION	0.004239830928482135	DESIGN	3.0766921065092287E-6	IMPLEMENTATION	2.3663360432354177E-6	DEFECT	1.4114578833879758E-6	TEST	3.081039468019123E-7	DOCUMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999258445709	WITHOUT_CLASSIFICATION	5.389684228041522E-7	DESIGN	1.2986940681271935E-7	IMPLEMENTATION	6.35236526709878E-8	TEST	5.220564259871246E-9	DEFECT	3.972244446726148E-9	DOCUMENTATION
//hilo params	WITHOUT_CLASSIFICATION	0.999986989765725	WITHOUT_CLASSIFICATION	9.751855641681221E-6	DESIGN	2.411374632325417E-6	IMPLEMENTATION	5.369554314758546E-7	DEFECT	2.1377193783399354E-7	TEST	9.62766318396549E-8	DOCUMENTATION
//sql = query;	WITHOUT_CLASSIFICATION	0.9999913337896136	WITHOUT_CLASSIFICATION	5.850446769350922E-6	DESIGN	1.9044846699384391E-6	IMPLEMENTATION	7.64532874561946E-7	DEFECT	8.143945045980622E-8	TEST	6.530662207681802E-8	DOCUMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.9999866987681912	WITHOUT_CLASSIFICATION	7.885248922985905E-6	IMPLEMENTATION	3.5951936183015618E-6	DESIGN	1.000728728254218E-6	DOCUMENTATION	7.866173993270922E-7	DEFECT	3.3443140012184214E-8	TEST
//sql = update;	WITHOUT_CLASSIFICATION	0.9999936812402859	WITHOUT_CLASSIFICATION	4.170812158361909E-6	IMPLEMENTATION	1.8427807639047396E-6	DESIGN	2.0957890405376322E-7	DEFECT	5.235847356814674E-8	TEST	4.322941409520333E-8	DOCUMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.9998006634208215	WITHOUT_CLASSIFICATION	1.018798616249763E-4	IMPLEMENTATION	6.351675820106131E-5	DESIGN	2.4314458384144747E-5	DEFECT	7.563478667343676E-6	DOCUMENTATION	2.062022300920958E-6	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999998514217391	WITHOUT_CLASSIFICATION	1.1835777614092675E-7	DESIGN	1.2632617310959513E-8	DOCUMENTATION	8.857325644642616E-9	IMPLEMENTATION	7.4136481918903856E-9	DEFECT	1.3168935755932685E-9	TEST
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999680609404936	WITHOUT_CLASSIFICATION	3.1497464351407186E-5	DEFECT	4.339324603814652E-7	DESIGN	6.414688721770246E-9	TEST	1.1922404978891804E-9	IMPLEMENTATION	5.576523781140056E-11	DOCUMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9560158728612485	WITHOUT_CLASSIFICATION	0.025446520008313326	DESIGN	0.018447743360155207	IMPLEMENTATION	5.198872791524105E-5	DEFECT	2.7096542572204836E-5	DOCUMENTATION	1.0778499795511978E-5	TEST
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999988562274	WITHOUT_CLASSIFICATION	9.63945583521776E-10	IMPLEMENTATION	1.2773945070257546E-10	TEST	3.227478767221007E-11	DOCUMENTATION	1.942573480278884E-11	DESIGN	3.871669329948657E-13	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999632793143085	WITHOUT_CLASSIFICATION	3.5204225363255595E-5	DESIGN	1.2781752745139046E-6	DEFECT	1.8553269079296094E-7	DOCUMENTATION	3.4167478909322186E-8	IMPLEMENTATION	1.8584883975969715E-8	TEST
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999953355432358	WITHOUT_CLASSIFICATION	2.81468107902872E-6	DESIGN	1.6346002034611457E-6	DEFECT	1.4800289482995334E-7	DOCUMENTATION	6.461390533452616E-8	TEST	2.5586814045235788E-9	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999989187861853	WITHOUT_CLASSIFICATION	9.742073693736538E-7	DESIGN	8.018289973507163E-8	IMPLEMENTATION	1.410535599851608E-8	DOCUMENTATION	6.732186165078112E-9	DEFECT	5.986003424935859E-9	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999998514217391	WITHOUT_CLASSIFICATION	1.1835777614092675E-7	DESIGN	1.2632617310959513E-8	DOCUMENTATION	8.857325644642616E-9	IMPLEMENTATION	7.4136481918903856E-9	DEFECT	1.3168935755932685E-9	TEST
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.999999573247472	WITHOUT_CLASSIFICATION	3.4295754042841404E-7	DESIGN	4.415923170939455E-8	IMPLEMENTATION	2.33651666295088E-8	DEFECT	1.190439783349374E-8	TEST	4.3661914097041924E-9	DOCUMENTATION
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.8874040820450833	WITHOUT_CLASSIFICATION	0.10999874563203443	DESIGN	0.0025781534577009636	DEFECT	7.643297751208439E-6	TEST	5.9867191296830745E-6	IMPLEMENTATION	5.388848300567033E-6	DOCUMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999986501847797	WITHOUT_CLASSIFICATION	1.0108052197617684E-6	DESIGN	3.0763380576267656E-7	DEFECT	2.663984905857121E-8	DOCUMENTATION	2.871599956431259E-9	IMPLEMENTATION	1.8647456460441192E-9	TEST
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9991650505618541	WITHOUT_CLASSIFICATION	5.090064417571318E-4	IMPLEMENTATION	3.073092347790734E-4	DESIGN	1.2161973649578276E-5	TEST	4.383740960553617E-6	DOCUMENTATION	2.0880469995321994E-6	DEFECT
// the default...	WITHOUT_CLASSIFICATION	0.9999032288869822	WITHOUT_CLASSIFICATION	7.181826996551757E-5	DEFECT	1.5605989264507328E-5	IMPLEMENTATION	8.716878595948708E-6	DESIGN	4.5951834551545105E-7	DOCUMENTATION	1.7045684629851702E-7	TEST
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.999998344235673	WITHOUT_CLASSIFICATION	1.4148851533197274E-6	IMPLEMENTATION	2.3640481695905718E-7	DESIGN	2.619061327022668E-9	DEFECT	1.2584256563659241E-9	TEST	5.968697146326737E-10	DOCUMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999632793143085	WITHOUT_CLASSIFICATION	3.5204225363255595E-5	DESIGN	1.2781752745139046E-6	DEFECT	1.8553269079296094E-7	DOCUMENTATION	3.4167478909322186E-8	IMPLEMENTATION	1.8584883975969715E-8	TEST
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999998729683668	WITHOUT_CLASSIFICATION	6.76703787955324E-8	DEFECT	5.2470217589070935E-8	IMPLEMENTATION	6.0466385428501495E-9	DESIGN	6.374199886296798E-10	DOCUMENTATION	2.0697830145842113E-10	TEST
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999187010731	WITHOUT_CLASSIFICATION	5.399054093794878E-8	DEFECT	1.5125581928266234E-8	DESIGN	9.977690508213542E-9	IMPLEMENTATION	1.3127493568659633E-9	TEST	8.923641796449832E-10	DOCUMENTATION
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999912051497	WITHOUT_CLASSIFICATION	8.464848191920311E-8	DESIGN	2.3072294139676667E-9	IMPLEMENTATION	5.285663486319164E-10	DEFECT	2.736896831952206E-10	TEST	1.905356576149603E-10	DOCUMENTATION
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993411521692219	WITHOUT_CLASSIFICATION	6.139760422076227E-4	IMPLEMENTATION	4.264043628358738E-5	DESIGN	1.8069069326372154E-6	DEFECT	2.5631112248634995E-7	DOCUMENTATION	1.6813423187864732E-7	TEST
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992591774393301	WITHOUT_CLASSIFICATION	7.358412890708869E-4	IMPLEMENTATION	4.3959668568063025E-6	DESIGN	5.033679371699541E-7	DEFECT	4.2702241044224055E-8	TEST	3.9234563903148016E-8	DOCUMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997245570584328	WITHOUT_CLASSIFICATION	2.7168813146211346E-4	IMPLEMENTATION	3.5921198229449576E-6	DESIGN	7.396433955278116E-8	TEST	7.288429346205394E-8	DEFECT	1.5841649106559545E-8	DOCUMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999998734029647	WITHOUT_CLASSIFICATION	8.796039874984632E-8	DEFECT	2.4779518619138276E-8	DESIGN	8.603485860714786E-9	IMPLEMENTATION	3.631953295870754E-9	DOCUMENTATION	1.6216789391766726E-9	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999998734029647	WITHOUT_CLASSIFICATION	8.796039874984632E-8	DEFECT	2.4779518619138276E-8	DESIGN	8.603485860714786E-9	IMPLEMENTATION	3.631953295870754E-9	DOCUMENTATION	1.6216789391766726E-9	TEST
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9995718189076356	WITHOUT_CLASSIFICATION	4.229134496135997E-4	DESIGN	4.092942718297563E-6	DEFECT	6.840730020213969E-7	TEST	2.636352038111632E-7	DOCUMENTATION	2.2699182664558917E-7	IMPLEMENTATION
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999974906819089	WITHOUT_CLASSIFICATION	1.5716042283974344E-6	IMPLEMENTATION	6.221254623077318E-7	DESIGN	1.8509897180344123E-7	DEFECT	1.1551030064864613E-7	DOCUMENTATION	1.4979127893216594E-8	TEST
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999933371544485	WITHOUT_CLASSIFICATION	4.93307820094985E-6	DESIGN	1.524838929360492E-6	IMPLEMENTATION	1.2810255885548136E-7	DEFECT	6.52188900409514E-8	DOCUMENTATION	1.1606972342798947E-8	TEST
// scroll backward	WITHOUT_CLASSIFICATION	0.999996571627436	WITHOUT_CLASSIFICATION	1.7855758734181894E-6	DESIGN	1.3162532051505971E-6	DEFECT	2.985822252389824E-7	IMPLEMENTATION	2.0943475060035575E-8	DOCUMENTATION	7.017785063819994E-9	TEST
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.7767156596592901	WITHOUT_CLASSIFICATION	0.22318767509560503	DEFECT	8.204744284528869E-5	IMPLEMENTATION	1.2605973813941032E-5	TEST	1.190613332439627E-6	DESIGN	8.212151131881655E-7	DOCUMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948807354904	WITHOUT_CLASSIFICATION	4.89285303305373E-6	DESIGN	1.0940475443885805E-7	IMPLEMENTATION	8.616757809156091E-8	DEFECT	2.090155576472858E-8	TEST	9.937588264260393E-9	DOCUMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982058765818	WITHOUT_CLASSIFICATION	7.105010337387869E-7	DESIGN	5.233128448250722E-7	IMPLEMENTATION	3.723911212547126E-7	DEFECT	1.244071644071328E-7	DOCUMENTATION	6.351125388155524E-8	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973541344457	WITHOUT_CLASSIFICATION	1.3093239776530818E-6	DESIGN	6.36139209210168E-7	DEFECT	6.320687287376567E-7	IMPLEMENTATION	6.197377207539077E-8	TEST	6.359866613336092E-9	DOCUMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999626271272357	WITHOUT_CLASSIFICATION	3.734057084833022E-5	DESIGN	1.3627072898303944E-8	DOCUMENTATION	8.638676954529898E-9	IMPLEMENTATION	6.510967377807264E-9	DEFECT	3.5251986577631303E-9	TEST
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999360054942	WITHOUT_CLASSIFICATION	3.380856015039158E-8	DEFECT	1.4003770792576346E-8	DESIGN	1.0445806503293498E-8	IMPLEMENTATION	3.808678467088185E-9	TEST	1.9276898974065886E-9	DOCUMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948807354904	WITHOUT_CLASSIFICATION	4.89285303305373E-6	DESIGN	1.0940475443885805E-7	IMPLEMENTATION	8.616757809156091E-8	DEFECT	2.090155576472858E-8	TEST	9.937588264260393E-9	DOCUMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982058765818	WITHOUT_CLASSIFICATION	7.105010337387869E-7	DESIGN	5.233128448250722E-7	IMPLEMENTATION	3.723911212547126E-7	DEFECT	1.244071644071328E-7	DOCUMENTATION	6.351125388155524E-8	TEST
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973541344457	WITHOUT_CLASSIFICATION	1.3093239776530818E-6	DESIGN	6.36139209210168E-7	DEFECT	6.320687287376567E-7	IMPLEMENTATION	6.197377207539077E-8	TEST	6.359866613336092E-9	DOCUMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.9999963179240948	WITHOUT_CLASSIFICATION	3.5930877298170897E-6	DESIGN	3.7436663906164325E-8	DEFECT	2.480807951258029E-8	DOCUMENTATION	1.783934134089478E-8	TEST	8.904090469211357E-9	IMPLEMENTATION
//Generators:	WITHOUT_CLASSIFICATION	0.9986734020784054	WITHOUT_CLASSIFICATION	0.0012514632160832572	DESIGN	6.45135440494923E-5	IMPLEMENTATION	3.6991178152020413E-6	DEFECT	3.52044148090964E-6	TEST	3.401602165768415E-6	DOCUMENTATION
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999833364452344	WITHOUT_CLASSIFICATION	1.6169365381664236E-5	DESIGN	4.908513764083261E-7	DEFECT	1.6025689251663285E-9	TEST	9.67142720154954E-10	IMPLEMENTATION	7.682959224733009E-10	DOCUMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9983720027037847	WITHOUT_CLASSIFICATION	0.0016190621164476338	DESIGN	5.735549768890146E-6	DEFECT	1.9304663536074296E-6	IMPLEMENTATION	1.0355445901074707E-6	TEST	2.336190550650501E-7	DOCUMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.999996495192438	WITHOUT_CLASSIFICATION	3.4777868367009025E-6	DESIGN	1.5926895618276844E-8	IMPLEMENTATION	6.611826913876433E-9	DEFECT	4.1516769450867376E-9	TEST	3.3032590756609406E-10	DOCUMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999933225504628	WITHOUT_CLASSIFICATION	6.397748962234758E-6	DEFECT	2.531454675488106E-7	DESIGN	2.615534906989858E-8	TEST	3.091533620871462E-10	IMPLEMENTATION	9.060501479212732E-11	DOCUMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999955241457523	WITHOUT_CLASSIFICATION	2.7415982289549624E-6	DEFECT	1.0616624542343462E-6	DESIGN	3.7872172986240095E-7	IMPLEMENTATION	2.260521957347442E-7	DOCUMENTATION	6.781963890256182E-8	TEST
//checking for named queries	WITHOUT_CLASSIFICATION	0.9946372060566196	WITHOUT_CLASSIFICATION	0.0052077605051799765	DESIGN	1.130539935299534E-4	IMPLEMENTATION	2.7650662946761748E-5	TEST	9.181714394022695E-6	DEFECT	5.14706732958864E-6	DOCUMENTATION
//stats	WITHOUT_CLASSIFICATION	0.9994545946706904	WITHOUT_CLASSIFICATION	5.242284423315895E-4	DESIGN	9.157495750407348E-6	DEFECT	4.595465740942588E-6	IMPLEMENTATION	4.533061429168386E-6	TEST	2.8908640575818825E-6	DOCUMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.999917989563118	WITHOUT_CLASSIFICATION	8.089355488589544E-5	DESIGN	4.0027330886320017E-7	DEFECT	3.417022522847925E-7	IMPLEMENTATION	2.698086452254513E-7	TEST	1.0509778960741823E-7	DOCUMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999954016894992	WITHOUT_CLASSIFICATION	4.562121359667765E-6	DESIGN	1.2135935049667128E-8	DEFECT	1.072176196831856E-8	IMPLEMENTATION	7.632411321210673E-9	TEST	5.699032682850426E-9	DOCUMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.8882138160400521	WITHOUT_CLASSIFICATION	0.10642220130266657	DESIGN	0.004605975906931606	DEFECT	5.938254698636744E-4	TEST	1.55220530452659E-4	IMPLEMENTATION	8.960750033339512E-6	DOCUMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9978923796231075	WITHOUT_CLASSIFICATION	0.0019404095163085067	DESIGN	1.5388873558447587E-4	DEFECT	6.714799099280493E-6	IMPLEMENTATION	4.0873173899871865E-6	TEST	2.5200085102098907E-6	DOCUMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.999944694977928	WITHOUT_CLASSIFICATION	5.3881580844569445E-5	DESIGN	5.45888206683905E-7	DEFECT	4.333058007911931E-7	DOCUMENTATION	4.0583874770628126E-7	IMPLEMENTATION	3.840847210121262E-8	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999849719103122	WITHOUT_CLASSIFICATION	1.3701271462698986E-5	DESIGN	9.721958182012542E-7	IMPLEMENTATION	2.979641144681891E-7	DEFECT	5.018953965853539E-8	DOCUMENTATION	6.468752766873305E-9	TEST
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999929186451186	WITHOUT_CLASSIFICATION	6.460147987241464E-6	DESIGN	5.401885538982048E-7	DEFECT	5.929802795994995E-8	DOCUMENTATION	1.279649248065731E-8	TEST	8.923819844557429E-9	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9985464047962055	WITHOUT_CLASSIFICATION	0.0011003205564208344	DESIGN	3.519747937476025E-4	TEST	1.1569419783566755E-6	DOCUMENTATION	1.3744054828447156E-7	DEFECT	5.471099376476191E-9	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999152510841806	WITHOUT_CLASSIFICATION	3.791594287828393E-5	DESIGN	3.643404602722257E-5	IMPLEMENTATION	6.8588141838822845E-6	DEFECT	1.8969006753773608E-6	TEST	1.6432120545784192E-6	DOCUMENTATION
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999857830741428	WITHOUT_CLASSIFICATION	1.357614958376453E-5	DESIGN	5.190178791271472E-7	DEFECT	1.0811655694548795E-7	IMPLEMENTATION	6.957561753544877E-9	DOCUMENTATION	6.684275623385333E-9	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999997369601779	WITHOUT_CLASSIFICATION	1.7960270742465713E-7	DEFECT	5.8617045610008484E-8	IMPLEMENTATION	1.4835333947811758E-8	DESIGN	5.321316521518607E-9	TEST	4.663418591657622E-9	DOCUMENTATION
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999940452615768	WITHOUT_CLASSIFICATION	5.9001660050155135E-6	DESIGN	2.8210851820655424E-8	DEFECT	1.4543140984193811E-8	TEST	7.709982495634813E-9	DOCUMENTATION	4.108442986511687E-9	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.6469207223441695	DESIGN	0.15180446872967018	DEFECT	0.11498677688430559	WITHOUT_CLASSIFICATION	0.08604897537027943	IMPLEMENTATION	1.7563907128431464E-4	DOCUMENTATION	6.341760029097786E-5	TEST
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999999209566346	WITHOUT_CLASSIFICATION	3.313913617099992E-8	IMPLEMENTATION	2.353417511410733E-8	DESIGN	1.3100688342226238E-8	DOCUMENTATION	5.882062235778447E-9	DEFECT	3.3873035072467163E-9	TEST
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.999998685301243	WITHOUT_CLASSIFICATION	1.0411440309830615E-6	DESIGN	1.792848534868092E-7	IMPLEMENTATION	9.145416642147957E-8	DEFECT	2.066037637790621E-9	TEST	7.496685533595739E-10	DOCUMENTATION
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999993845121917	WITHOUT_CLASSIFICATION	6.136272896860529E-7	DESIGN	1.4461202997664785E-9	DEFECT	3.319478788349653E-10	TEST	6.811134642919437E-11	IMPLEMENTATION	1.4338914701779851E-11	DOCUMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9998268104079068	WITHOUT_CLASSIFICATION	6.579504344122313E-5	DESIGN	4.183820198102285E-5	DEFECT	3.607036419527317E-5	IMPLEMENTATION	2.724742664479872E-5	DOCUMENTATION	2.2385558308679438E-6	TEST
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963188696687	WITHOUT_CLASSIFICATION	3.019175447967309E-6	DEFECT	5.791436844633494E-7	DESIGN	4.317777183860328E-8	TEST	2.58349314287789E-8	IMPLEMENTATION	1.379849562497117E-8	DOCUMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996780984019	WITHOUT_CLASSIFICATION	1.6766728369865953E-6	IMPLEMENTATION	6.527087073411025E-7	DESIGN	5.483649678011457E-7	DEFECT	3.0942960916520726E-7	TEST	3.1839859458786413E-8	DOCUMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9992919786249322	WITHOUT_CLASSIFICATION	7.047274052314206E-4	DESIGN	3.28103450021101E-6	DOCUMENTATION	6.118754218311096E-9	IMPLEMENTATION	4.982004237794962E-9	DEFECT	1.8345776487636904E-9	TEST
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971821093427	WITHOUT_CLASSIFICATION	1.3778851745233916E-6	IMPLEMENTATION	5.942389674979296E-7	DESIGN	4.851841535739102E-7	DEFECT	3.2641209147921237E-7	TEST	3.417027024732476E-8	DOCUMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997555222129	WITHOUT_CLASSIFICATION	2.084443510815339E-6	DEFECT	2.657536776561198E-7	IMPLEMENTATION	4.704390422808426E-8	TEST	2.9245608337554144E-8	DOCUMENTATION	1.8291170097080467E-8	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999995532280503	WITHOUT_CLASSIFICATION	3.8514705261272323E-7	DESIGN	2.9651126949657784E-8	DEFECT	1.2131890849897769E-8	IMPLEMENTATION	1.0991296242731698E-8	TEST	8.850583102415358E-9	DOCUMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999995532280503	WITHOUT_CLASSIFICATION	3.8514705261272323E-7	DESIGN	2.9651126949657784E-8	DEFECT	1.2131890849897769E-8	IMPLEMENTATION	1.0991296242731698E-8	TEST	8.850583102415358E-9	DOCUMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999982439418562	WITHOUT_CLASSIFICATION	1.4064355053613001E-6	DESIGN	3.3720016835506737E-7	TEST	8.378345799343331E-9	DOCUMENTATION	2.6706512179815843E-9	IMPLEMENTATION	1.3734731652411723E-9	DEFECT
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999999955457333	WITHOUT_CLASSIFICATION	3.3905787675960045E-9	TEST	1.0566388922309682E-9	DEFECT	3.3625617310016683E-12	DESIGN	2.6088798597340627E-12	IMPLEMENTATION	1.0775829007167023E-12	DOCUMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999691450272147	WITHOUT_CLASSIFICATION	2.8341104589161064E-5	DESIGN	1.7781298087075227E-6	IMPLEMENTATION	5.493424743582059E-7	DEFECT	1.5971236195146815E-7	TEST	2.668355114168953E-8	DOCUMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998842934233458	WITHOUT_CLASSIFICATION	9.633663503300624E-5	DESIGN	9.417321590089839E-6	IMPLEMENTATION	3.950573628984673E-6	TEST	3.25607236120705E-6	DOCUMENTATION	2.745974040821917E-6	DEFECT
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9998701626353793	WITHOUT_CLASSIFICATION	1.1454490574361071E-4	DESIGN	1.5176132569464568E-5	IMPLEMENTATION	4.651463644295326E-8	DOCUMENTATION	3.532536238070075E-8	TEST	3.448630878157302E-8	DEFECT
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9994139016972293	WITHOUT_CLASSIFICATION	5.857788795318614E-4	DESIGN	2.4672312850404463E-7	DEFECT	4.729155622791936E-8	DOCUMENTATION	2.517947689962756E-8	TEST	2.2907719463406873E-10	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.9998366131111108	WITHOUT_CLASSIFICATION	1.407956130088371E-4	DESIGN	1.4168129585567122E-5	DEFECT	3.83172753424235E-6	IMPLEMENTATION	2.3085306275691005E-6	TEST	2.2828881329396326E-6	DOCUMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.9999986042055353	WITHOUT_CLASSIFICATION	1.028373243952489E-6	IMPLEMENTATION	3.341256385757303E-7	DESIGN	1.269471881351111E-8	DOCUMENTATION	1.236326646253291E-8	DEFECT	8.23759678456688E-9	TEST
// do a check	WITHOUT_CLASSIFICATION	0.999959057638581	WITHOUT_CLASSIFICATION	3.589502332290176E-5	DESIGN	4.194118089577335E-6	IMPLEMENTATION	6.45725633313703E-7	DEFECT	1.830507836919337E-7	DOCUMENTATION	2.444358951203003E-8	TEST
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999450676275	WITHOUT_CLASSIFICATION	2.605869388347297E-8	DESIGN	1.803728938644953E-8	DEFECT	7.840312687129862E-9	IMPLEMENTATION	2.024833426834009E-9	TEST	9.712430895628271E-10	DOCUMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994845037657	WITHOUT_CLASSIFICATION	2.4544508197663435E-7	IMPLEMENTATION	1.3386791035330036E-7	DEFECT	1.2250236783332864E-7	DESIGN	1.058850834152499E-8	TEST	3.092365857153142E-9	DOCUMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996532806902	WITHOUT_CLASSIFICATION	3.1662594050165626E-7	DEFECT	1.685822075386446E-8	DESIGN	9.221163002171171E-9	IMPLEMENTATION	2.2443218555078356E-9	TEST	1.7696637609035894E-9	DOCUMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997784211142	WITHOUT_CLASSIFICATION	7.911946088672472E-8	DESIGN	7.630612344270585E-8	IMPLEMENTATION	5.7843579417188886E-8	DEFECT	5.9114736702288446E-9	TEST	2.398248361609895E-9	DOCUMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998666575284	WITHOUT_CLASSIFICATION	8.713630245941805E-8	DESIGN	2.7164755892551525E-8	DEFECT	1.436471361609321E-8	IMPLEMENTATION	3.743571692966002E-9	TEST	9.331279378328641E-10	DOCUMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999876759354	WITHOUT_CLASSIFICATION	5.975366473465279E-8	DESIGN	2.8871843278009738E-8	DEFECT	2.614558271420119E-8	IMPLEMENTATION	6.78659890228605E-9	TEST	1.6829563280562396E-9	DOCUMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998871846185	WITHOUT_CLASSIFICATION	6.280157096130002E-8	DEFECT	3.757763827152142E-8	DESIGN	8.443851821784994E-9	IMPLEMENTATION	2.379567731043858E-9	TEST	1.612752760151371E-9	DOCUMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997549418732	WITHOUT_CLASSIFICATION	1.4417626794248998E-7	IMPLEMENTATION	5.459619968481019E-8	DESIGN	4.2159934959070644E-8	DEFECT	3.1584038808026432E-9	TEST	9.67320366387919E-10	DOCUMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999961451327	WITHOUT_CLASSIFICATION	2.0817198838597598E-8	DEFECT	1.222168834912964E-8	IMPLEMENTATION	4.600916348131849E-9	DESIGN	6.85044613872162E-10	TEST	2.2382479928217873E-10	DOCUMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999365947865	WITHOUT_CLASSIFICATION	2.7881578669462045E-7	DESIGN	1.7588049597634751E-7	IMPLEMENTATION	1.5208879546854705E-7	DEFECT	2.3585871762246255E-8	TEST	3.6811851784074985E-9	DOCUMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995547657882	WITHOUT_CLASSIFICATION	4.307740838550354E-7	DESIGN	5.835829814293176E-9	IMPLEMENTATION	3.845253909416482E-9	TEST	3.401084334806093E-9	DEFECT	1.3779598268983183E-9	DOCUMENTATION
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999877375775796	WITHOUT_CLASSIFICATION	8.802037381177206E-6	DESIGN	2.0480676709563343E-6	DEFECT	1.3683013139296846E-6	IMPLEMENTATION	4.1496158881280535E-8	DOCUMENTATION	2.519895559755061E-9	TEST
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9878761165907385	WITHOUT_CLASSIFICATION	0.012095431176475945	DEFECT	2.333687168756844E-5	DESIGN	2.668689427921108E-6	TEST	2.027892645592109E-6	DOCUMENTATION	4.1877902446876275E-7	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.887372699006739	WITHOUT_CLASSIFICATION	0.11243289965584542	DESIGN	1.658057961877124E-4	DEFECT	2.7335499965425026E-5	TEST	1.0523286555727547E-6	IMPLEMENTATION	2.0771260687645138E-7	DOCUMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999542484028142	WITHOUT_CLASSIFICATION	4.5156470777699375E-5	DESIGN	5.04901699081379E-7	IMPLEMENTATION	8.173857073706973E-8	DEFECT	8.056717352385882E-9	DOCUMENTATION	4.294209509869719E-10	TEST
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999885749580253	WITHOUT_CLASSIFICATION	1.0723326009068701E-5	DESIGN	3.512113689367495E-7	IMPLEMENTATION	2.6312535048872204E-7	DOCUMENTATION	5.090417027703763E-8	DEFECT	3.647507592276309E-8	TEST
// not for internal use:	WITHOUT_CLASSIFICATION	0.9965155240155654	WITHOUT_CLASSIFICATION	0.003410834542269174	DESIGN	6.305185413219428E-5	IMPLEMENTATION	8.829297737108808E-6	DEFECT	9.645458971802867E-7	DOCUMENTATION	7.957443987638217E-7	TEST
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999996396846804	WITHOUT_CLASSIFICATION	2.4178708885749393E-7	IMPLEMENTATION	6.108007728151937E-8	TEST	5.556816946498588E-8	DESIGN	9.66322853648662E-10	DEFECT	9.136614121158495E-10	DOCUMENTATION
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9945483260591449	WITHOUT_CLASSIFICATION	0.005405491419787822	IMPLEMENTATION	4.3802619240717465E-5	DESIGN	1.7683776779810775E-6	DEFECT	4.932211890971483E-7	DOCUMENTATION	1.1830295951003764E-7	TEST
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.887372699006739	WITHOUT_CLASSIFICATION	0.11243289965584542	DESIGN	1.658057961877124E-4	DEFECT	2.7335499965425026E-5	TEST	1.0523286555727547E-6	IMPLEMENTATION	2.0771260687645138E-7	DOCUMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.887372699006739	WITHOUT_CLASSIFICATION	0.11243289965584542	DESIGN	1.658057961877124E-4	DEFECT	2.7335499965425026E-5	TEST	1.0523286555727547E-6	IMPLEMENTATION	2.0771260687645138E-7	DOCUMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9959202750250926	WITHOUT_CLASSIFICATION	0.003091799142935961	DESIGN	9.224828927834269E-4	IMPLEMENTATION	5.972029510942258E-5	TEST	5.582996828644899E-6	DOCUMENTATION	1.396472500505957E-7	DEFECT
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999986248710367	WITHOUT_CLASSIFICATION	8.29610502507456E-7	IMPLEMENTATION	4.4128389546073297E-7	DEFECT	9.108987602456074E-8	DESIGN	1.1516987550740006E-8	TEST	1.6277016723762147E-9	DOCUMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.999998162311944	WITHOUT_CLASSIFICATION	1.8357035688609324E-6	DESIGN	1.831869266009323E-9	TEST	1.0854051548670868E-10	DOCUMENTATION	3.6182980189099575E-11	DEFECT	7.894358036052596E-12	IMPLEMENTATION
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999897666343204	WITHOUT_CLASSIFICATION	7.200871439450815E-6	DESIGN	2.723378915117792E-6	IMPLEMENTATION	2.3769084819226445E-7	DEFECT	4.8858505874966756E-8	DOCUMENTATION	2.2565971086000124E-8	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999990459050013	WITHOUT_CLASSIFICATION	4.2388780309885805E-7	DESIGN	3.5958501921051685E-7	DEFECT	1.3833582333046307E-7	IMPLEMENTATION	2.5426477751256433E-8	DOCUMENTATION	6.8598753722578014E-9	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999997369601779	WITHOUT_CLASSIFICATION	1.7960270742465713E-7	DEFECT	5.8617045610008484E-8	IMPLEMENTATION	1.4835333947811758E-8	DESIGN	5.321316521518607E-9	TEST	4.663418591657622E-9	DOCUMENTATION
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999999477994872	WITHOUT_CLASSIFICATION	4.571308627459759E-8	DESIGN	5.003164402489331E-9	DOCUMENTATION	6.274194677724164E-10	IMPLEMENTATION	4.4746423505327593E-10	TEST	4.093785133677532E-10	DEFECT
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9998750627458516	WITHOUT_CLASSIFICATION	1.1555226591074482E-4	DEFECT	5.010689556986904E-6	IMPLEMENTATION	3.871571517671321E-6	DESIGN	3.6202527813097246E-7	DOCUMENTATION	1.4070188482853953E-7	TEST
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999830121221079	WITHOUT_CLASSIFICATION	1.2360819973566988E-5	DESIGN	4.4512170780513736E-6	DEFECT	8.472741190232506E-8	TEST	7.953543729156297E-8	IMPLEMENTATION	1.1577991255577213E-8	DOCUMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999848153606117	WITHOUT_CLASSIFICATION	1.3442335347516696E-5	DESIGN	1.5228420510474241E-6	IMPLEMENTATION	1.357008928447261E-7	TEST	6.020525329912003E-8	DEFECT	2.35558435778871E-8	DOCUMENTATION
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999543779902873	WITHOUT_CLASSIFICATION	4.349227230762169E-5	IMPLEMENTATION	1.3961772840492692E-6	DESIGN	6.229065102677609E-7	DEFECT	9.68606978784764E-8	TEST	1.3792912800630065E-8	DOCUMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999759195082725	WITHOUT_CLASSIFICATION	2.1315967940052595E-5	DESIGN	1.2972313900343927E-6	IMPLEMENTATION	1.1545525609473058E-6	DEFECT	2.323924853638722E-7	DOCUMENTATION	8.03473512791427E-8	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9868565326224759	WITHOUT_CLASSIFICATION	0.013133857610488612	DESIGN	5.434069105938081E-6	DEFECT	2.620116513886534E-6	DOCUMENTATION	1.4895373157816573E-6	IMPLEMENTATION	6.60440997652611E-8	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9868565326224759	WITHOUT_CLASSIFICATION	0.013133857610488612	DESIGN	5.434069105938081E-6	DEFECT	2.620116513886534E-6	DOCUMENTATION	1.4895373157816573E-6	IMPLEMENTATION	6.60440997652611E-8	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9979260715051691	WITHOUT_CLASSIFICATION	0.0020722511560499726	DESIGN	1.0166009135577045E-6	DOCUMENTATION	3.859950749998249E-7	DEFECT	1.394537416408216E-7	TEST	1.3528905084104946E-7	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9979260715051691	WITHOUT_CLASSIFICATION	0.0020722511560499726	DESIGN	1.0166009135577045E-6	DOCUMENTATION	3.859950749998249E-7	DEFECT	1.394537416408216E-7	TEST	1.3528905084104946E-7	IMPLEMENTATION
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999752842965164	WITHOUT_CLASSIFICATION	2.281584893184076E-5	IMPLEMENTATION	1.3381505692152731E-6	DESIGN	4.4830526625298264E-7	DEFECT	1.016463840491377E-7	TEST	1.175233234732359E-8	DOCUMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978727002587	WITHOUT_CLASSIFICATION	2.078362279831278E-6	DESIGN	2.281103273020601E-8	DEFECT	1.2834838082899993E-8	IMPLEMENTATION	8.748058079470296E-9	TEST	4.543532676627776E-9	DOCUMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999891808975822	WITHOUT_CLASSIFICATION	9.705258967804814E-6	DESIGN	9.213530276631784E-7	DEFECT	1.7518849567139274E-7	TEST	1.1498797163173936E-8	IMPLEMENTATION	5.803129501159839E-9	DOCUMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998256989315635	WITHOUT_CLASSIFICATION	1.4550157586851873E-4	IMPLEMENTATION	2.6823248472426286E-5	DESIGN	1.4256266547689715E-6	TEST	5.040109008299064E-7	DEFECT	4.660653998260315E-8	DOCUMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.999522619451262	WITHOUT_CLASSIFICATION	4.487752101753797E-4	DESIGN	2.2179437246503353E-5	DEFECT	6.347131627147919E-6	IMPLEMENTATION	4.690940074803256E-8	DOCUMENTATION	3.186028814369815E-8	TEST
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.7654360909024848	DESIGN	0.23350690737883326	WITHOUT_CLASSIFICATION	9.8571429054828E-4	DEFECT	5.8763736488159E-5	IMPLEMENTATION	9.101027141879227E-6	DOCUMENTATION	3.422664503698128E-6	TEST
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999568388654032	WITHOUT_CLASSIFICATION	3.9927893529949045E-5	DEFECT	2.9310596978238094E-6	IMPLEMENTATION	1.32201769301038E-7	DESIGN	1.0979952714153776E-7	DOCUMENTATION	6.018007252726353E-8	TEST
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999913780883074	WITHOUT_CLASSIFICATION	7.420062748725554E-6	DEFECT	1.0043330074133424E-6	DESIGN	1.27776136646291E-7	IMPLEMENTATION	6.728091706909002E-8	DOCUMENTATION	2.458882907745367E-9	TEST
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9843107449857734	WITHOUT_CLASSIFICATION	0.015678928067847646	DESIGN	7.702903851277784E-6	DEFECT	2.2928154272368017E-6	DOCUMENTATION	1.7855743761607742E-7	IMPLEMENTATION	1.5266966290244155E-7	TEST
// used from testsuite	WITHOUT_CLASSIFICATION	0.9998126448169202	WITHOUT_CLASSIFICATION	1.0385733639168831E-4	TEST	8.294165471210001E-5	DESIGN	4.3518204612208235E-7	DEFECT	1.1156472313509374E-7	DOCUMENTATION	9.4452067288956E-9	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999722493137	WITHOUT_CLASSIFICATION	2.4262019638512992E-8	DESIGN	1.7111957992396824E-9	DEFECT	1.4038357419808509E-9	DOCUMENTATION	3.7182684334493557E-10	TEST	1.8082694344286043E-12	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997691624667374	WITHOUT_CLASSIFICATION	1.5744223816639152E-4	DESIGN	6.644836724879456E-5	IMPLEMENTATION	3.672882604898921E-6	DEFECT	2.505849997271748E-6	DOCUMENTATION	7.681952452665731E-7	TEST
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999763683913493	WITHOUT_CLASSIFICATION	2.021560689700382E-5	DESIGN	3.2268121899369555E-6	IMPLEMENTATION	9.166391438355175E-8	DEFECT	7.521403951848633E-8	DOCUMENTATION	2.2311609679680164E-8	TEST
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999264140192465	WITHOUT_CLASSIFICATION	7.26953405636456E-5	DESIGN	4.623395309096909E-7	IMPLEMENTATION	2.0889173233876495E-7	DEFECT	1.4331919796990968E-7	DOCUMENTATION	7.608972877172929E-8	TEST
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999993725837546	WITHOUT_CLASSIFICATION	3.271207688622236E-7	DEFECT	2.74907291815747E-7	DESIGN	1.4462608473056318E-8	IMPLEMENTATION	8.568732902114897E-9	DOCUMENTATION	2.356843368973481E-9	TEST
//no big deal	WITHOUT_CLASSIFICATION	0.9999842425836217	WITHOUT_CLASSIFICATION	7.697261507789255E-6	DESIGN	3.879496561840992E-6	IMPLEMENTATION	3.1958953075399223E-6	DEFECT	9.227204697790022E-7	DOCUMENTATION	6.204253134542041E-8	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.99996950694048	WITHOUT_CLASSIFICATION	1.691699575948382E-5	IMPLEMENTATION	1.193632590038272E-5	DESIGN	1.189636384043687E-6	DEFECT	4.2827600309512056E-7	DOCUMENTATION	2.1825472854465714E-8	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.99996950694048	WITHOUT_CLASSIFICATION	1.691699575948382E-5	IMPLEMENTATION	1.193632590038272E-5	DESIGN	1.189636384043687E-6	DEFECT	4.2827600309512056E-7	DOCUMENTATION	2.1825472854465714E-8	TEST
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999994800514467	WITHOUT_CLASSIFICATION	3.1060263680500854E-7	DESIGN	1.0118050447981604E-7	DEFECT	6.333478379384412E-8	IMPLEMENTATION	3.9818859536561006E-8	TEST	5.011768591621351E-9	DOCUMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999930482730418	WITHOUT_CLASSIFICATION	4.074835391367359E-6	DEFECT	2.6376604124965317E-6	DESIGN	1.7452919820437162E-7	DOCUMENTATION	5.2105703609405925E-8	IMPLEMENTATION	1.2596252563143588E-8	TEST
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999998165203936	WITHOUT_CLASSIFICATION	9.423911078921006E-8	DESIGN	8.028517303453238E-8	DEFECT	8.257844852272842E-9	DOCUMENTATION	4.342724419634092E-10	TEST	2.6320522417861316E-10	IMPLEMENTATION
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998055944793297	WITHOUT_CLASSIFICATION	9.435966832240085E-5	DEFECT	6.872312421543339E-5	DESIGN	2.8113344628014257E-5	IMPLEMENTATION	2.14753967342999E-6	DOCUMENTATION	1.0618438310102961E-6	TEST
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999352858645659	WITHOUT_CLASSIFICATION	2.7753062649380668E-5	DESIGN	2.104218721645734E-5	DEFECT	1.5095113723638214E-5	IMPLEMENTATION	7.555280992961222E-7	TEST	6.824374514846787E-8	DOCUMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999335140770024	WITHOUT_CLASSIFICATION	4.0654277636526156E-5	IMPLEMENTATION	1.4083841459312177E-5	DESIGN	5.928700317175431E-6	TEST	5.732036111493327E-6	DEFECT	8.706747309985412E-8	DOCUMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999985434019095	WITHOUT_CLASSIFICATION	5.689283806645471E-7	DESIGN	4.2980871225985986E-7	DEFECT	4.20498921017279E-7	IMPLEMENTATION	3.46229740542851E-8	DOCUMENTATION	2.7391025137286738E-9	TEST
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9965460396242508	WITHOUT_CLASSIFICATION	0.002900371527215515	IMPLEMENTATION	3.746747253689951E-4	DESIGN	1.7751534959786262E-4	DEFECT	1.2385228767308394E-6	DOCUMENTATION	1.602506902342033E-7	TEST
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9930629933570007	WITHOUT_CLASSIFICATION	0.006919322178808008	IMPLEMENTATION	1.4897698168066305E-5	DESIGN	2.2293671172895436E-6	DEFECT	4.839880295692487E-7	DOCUMENTATION	7.341087643751579E-8	TEST
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999870097915563	WITHOUT_CLASSIFICATION	1.2918186585607581E-5	DESIGN	4.4660131416299835E-8	DEFECT	2.5466952997149066E-8	IMPLEMENTATION	1.791873556426313E-9	DOCUMENTATION	1.0290016678695551E-10	TEST
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9998552440514853	WITHOUT_CLASSIFICATION	1.4457406436800974E-4	DESIGN	1.395535461924361E-7	DEFECT	3.307607082225161E-8	IMPLEMENTATION	9.104657372852724E-9	DOCUMENTATION	1.498721977218764E-10	TEST
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.999768542451227	WITHOUT_CLASSIFICATION	2.0401665544393145E-4	IMPLEMENTATION	2.5770990161578484E-5	DEFECT	1.566682131274845E-6	DESIGN	8.232179871738239E-8	DOCUMENTATION	2.0899237410059294E-8	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999290330634	WITHOUT_CLASSIFICATION	5.555625155381854E-7	DEFECT	1.0321262439399053E-7	DESIGN	3.1639393945554955E-8	IMPLEMENTATION	1.5580391354182684E-8	DOCUMENTATION	3.6744407541781933E-9	TEST
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999990467555546	WITHOUT_CLASSIFICATION	5.334450268414735E-7	DEFECT	3.409953242187007E-7	IMPLEMENTATION	6.162267488241493E-8	DESIGN	8.956475507133669E-9	DOCUMENTATION	8.224943848246763E-9	TEST
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.999989995857717	WITHOUT_CLASSIFICATION	4.547163869504115E-6	DEFECT	3.5105829675733863E-6	IMPLEMENTATION	1.4956950672138611E-6	DESIGN	4.001162161521894E-7	TEST	5.058416249932991E-8	DOCUMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9990917106075914	WITHOUT_CLASSIFICATION	6.356174848433372E-4	DESIGN	2.464035076554039E-4	DEFECT	1.8604775246463396E-5	IMPLEMENTATION	6.2691525168800115E-6	TEST	1.3944721465528162E-6	DOCUMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999991374077085	WITHOUT_CLASSIFICATION	8.42793575566047E-7	DESIGN	1.375374085344521E-8	TEST	3.912429109036699E-9	DEFECT	1.8354189854696525E-9	IMPLEMENTATION	2.971269086154899E-10	DOCUMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.999995342214621	WITHOUT_CLASSIFICATION	2.8239911305403166E-6	DESIGN	1.5814498709220287E-6	DEFECT	2.0168044782515654E-7	IMPLEMENTATION	3.28962330121789E-8	DOCUMENTATION	1.7767696706649104E-8	TEST
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999924785213887	WITHOUT_CLASSIFICATION	4.1158857601004385E-6	DESIGN	3.1391532351646562E-6	DEFECT	1.8483505313376628E-7	IMPLEMENTATION	5.992392684832353E-8	DOCUMENTATION	2.1680636004262284E-8	TEST
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999700922239	WITHOUT_CLASSIFICATION	1.1418816452678827E-8	DESIGN	9.076817777766228E-9	DEFECT	6.308455887369334E-9	IMPLEMENTATION	2.983448339422471E-9	DOCUMENTATION	1.2023754383214734E-10	TEST
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999998909829	WITHOUT_CLASSIFICATION	6.086625377796556E-11	DEFECT	2.3565839173606574E-11	DESIGN	1.5670655851279818E-11	TEST	7.503657539863237E-12	DOCUMENTATION	1.4107599888456285E-12	IMPLEMENTATION
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999979648333117	WITHOUT_CLASSIFICATION	1.992282814665704E-6	DEFECT	3.989282456433607E-8	TEST	2.841562773734624E-9	IMPLEMENTATION	1.332308187498514E-10	DOCUMENTATION	1.6255533850192044E-11	DESIGN
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999919807664601	WITHOUT_CLASSIFICATION	5.845750714744115E-6	DEFECT	1.9836561517362915E-6	DESIGN	1.0152568830392474E-7	IMPLEMENTATION	4.937390669636586E-8	TEST	3.892707835091318E-8	DOCUMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999995486243773	WITHOUT_CLASSIFICATION	4.506647152490801E-7	DESIGN	5.884499741076896E-10	TEST	5.824561645636314E-11	DEFECT	5.0939019879900507E-11	IMPLEMENTATION	1.327277772535214E-11	DOCUMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999995374304503	WITHOUT_CLASSIFICATION	4.137465255334714E-7	DESIGN	3.7465090021167546E-8	IMPLEMENTATION	4.8026420370058124E-9	DEFECT	3.980627198027348E-9	TEST	2.57466480420819E-9	DOCUMENTATION
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.999932983205915	WITHOUT_CLASSIFICATION	6.425049091869349E-5	DESIGN	2.623978849388755E-6	DEFECT	9.13741603103678E-8	TEST	4.204306292341841E-8	DOCUMENTATION	8.907093636044355E-9	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999459616008851	WITHOUT_CLASSIFICATION	2.5549172861532643E-5	DESIGN	2.372950317198044E-5	DEFECT	4.659308989917864E-6	IMPLEMENTATION	6.164811564029346E-8	TEST	3.876597583913074E-8	DOCUMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9998229185489503	WITHOUT_CLASSIFICATION	1.4957562431299964E-4	DESIGN	2.6012909834287003E-5	DEFECT	8.497782198398525E-7	DOCUMENTATION	4.2632084559636526E-7	TEST	2.1681783700160658E-7	IMPLEMENTATION
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.999999999598879	WITHOUT_CLASSIFICATION	2.1427592136251855E-10	DESIGN	1.5613248882174614E-10	DEFECT	2.530841768223399E-11	DOCUMENTATION	5.402675338948807E-12	TEST	1.6976286842691497E-15	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999508178302348	WITHOUT_CLASSIFICATION	4.136221880088234E-5	DESIGN	6.064457482125253E-6	IMPLEMENTATION	1.0442901277245147E-6	TEST	4.2811694176361965E-7	DOCUMENTATION	2.8308641264261757E-7	DEFECT
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999933811705	WITHOUT_CLASSIFICATION	6.528172755029522E-9	DEFECT	8.945599010961992E-11	DESIGN	1.0687581655432057E-12	TEST	1.3085863336523838E-13	DOCUMENTATION	1.0642828318890046E-15	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999998062251766	WITHOUT_CLASSIFICATION	1.5294400583541204E-7	DESIGN	3.648873383002246E-8	DEFECT	2.4722807402478995E-9	DOCUMENTATION	1.2183896213811413E-9	IMPLEMENTATION	6.514133771851238E-10	TEST
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9990731181593971	WITHOUT_CLASSIFICATION	9.01757237621504E-4	DESIGN	2.3412917828505796E-5	DEFECT	1.2943206099417564E-6	DOCUMENTATION	2.2484107552514436E-7	IMPLEMENTATION	1.9252346753185417E-7	TEST
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.999290306243252	WITHOUT_CLASSIFICATION	5.754820060358799E-4	IMPLEMENTATION	7.518228218516658E-5	DOCUMENTATION	5.8653675170702044E-5	DESIGN	3.5923965737649286E-7	DEFECT	1.6553698869965537E-8	TEST
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999436880656095	WITHOUT_CLASSIFICATION	5.491704605143234E-5	DEFECT	6.775887370621167E-7	TEST	6.315155042862404E-7	DESIGN	5.136217604292772E-8	IMPLEMENTATION	3.442192170417296E-8	DOCUMENTATION
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9992658012599519	WITHOUT_CLASSIFICATION	7.30505940583225E-4	DESIGN	3.085601151688493E-6	DEFECT	3.654006809270382E-7	IMPLEMENTATION	1.7880322942269935E-7	TEST	6.299440290429327E-8	DOCUMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999139339578	WITHOUT_CLASSIFICATION	4.283135793130376E-8	DEFECT	2.9629953999354925E-8	DESIGN	1.34809436490611E-8	IMPLEMENTATION	1.0935376516419857E-10	DOCUMENTATION	1.4432754210239474E-11	TEST
// handle empty collection	WITHOUT_CLASSIFICATION	0.9991659306840504	WITHOUT_CLASSIFICATION	7.516642960600532E-4	DESIGN	7.248780981853047E-5	IMPLEMENTATION	9.47659452069255E-6	DEFECT	2.810171919107011E-7	DOCUMENTATION	1.5959835844462977E-7	TEST
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999999744407008	WITHOUT_CLASSIFICATION	1.7015089667955163E-8	IMPLEMENTATION	6.091677794077956E-9	DESIGN	1.9191715291623875E-9	DEFECT	5.086898413234542E-10	DOCUMENTATION	2.4670464575463407E-11	TEST
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999021659998963	WITHOUT_CLASSIFICATION	7.719779684059164E-5	IMPLEMENTATION	2.0176220715096344E-5	DESIGN	3.2370083207036326E-7	DEFECT	7.48143950447008E-8	DOCUMENTATION	6.146732074566027E-8	TEST
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999986789375052	WITHOUT_CLASSIFICATION	1.0711599405315987E-6	DESIGN	2.4708741293358363E-7	DEFECT	2.539100457945937E-9	IMPLEMENTATION	2.707558339791096E-10	TEST	5.285026980413791E-12	DOCUMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999885300853598	WITHOUT_CLASSIFICATION	6.0176414849389774E-6	IMPLEMENTATION	4.105729679722655E-6	DEFECT	1.2978542762981493E-6	DESIGN	3.365485258798791E-8	DOCUMENTATION	1.5034346697322572E-8	TEST
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.4999084805330855	DESIGN	0.484173791684558	WITHOUT_CLASSIFICATION	0.01586016012554576	DEFECT	4.39247903458579E-5	IMPLEMENTATION	1.2342875845410896E-5	TEST	1.2999906192976035E-6	DOCUMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999355611745263	WITHOUT_CLASSIFICATION	6.443167759988711E-5	DESIGN	6.8258828410452166E-9	DEFECT	1.592793767910186E-10	IMPLEMENTATION	8.927713389804915E-11	TEST	7.343445426874428E-11	DOCUMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.999992355172418	WITHOUT_CLASSIFICATION	6.860605660703082E-6	DESIGN	7.75899294901705E-7	DEFECT	5.197043227325686E-9	DOCUMENTATION	1.851419712149953E-9	TEST	1.2741634604402718E-9	IMPLEMENTATION
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9998838796288989	WITHOUT_CLASSIFICATION	6.383875920558298E-5	DEFECT	4.911376107883522E-5	DESIGN	1.7562445638166117E-6	DOCUMENTATION	1.198711472989062E-6	IMPLEMENTATION	2.1289477976324092E-7	TEST
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999946152054031	WITHOUT_CLASSIFICATION	4.648361491734812E-6	DESIGN	4.048044901449179E-7	IMPLEMENTATION	1.7661612493900503E-7	DOCUMENTATION	1.0553460236628177E-7	TEST	4.947788778412308E-8	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999888944607087	WITHOUT_CLASSIFICATION	7.678445696924464E-6	DESIGN	1.5999080494241147E-6	DEFECT	8.67009979538744E-7	DOCUMENTATION	6.493852610022732E-7	IMPLEMENTATION	3.107903044467148E-7	TEST
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999955088911084	WITHOUT_CLASSIFICATION	2.1614465966478093E-6	DESIGN	1.8490643214195575E-6	DEFECT	4.2028966776073937E-7	IMPLEMENTATION	5.41306658483173E-8	DOCUMENTATION	6.177639899141324E-9	TEST
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999501750914725	WITHOUT_CLASSIFICATION	4.8417634654789274E-5	TEST	1.3129643881845106E-6	DESIGN	3.399938360157549E-8	DEFECT	3.39156131763838E-8	DOCUMENTATION	2.639448772432564E-8	IMPLEMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999527197271938	WITHOUT_CLASSIFICATION	3.54819180230171E-5	IMPLEMENTATION	9.800805710834655E-6	DESIGN	1.9318889891017963E-6	DEFECT	4.39661051041574E-8	DOCUMENTATION	2.169397817486959E-8	TEST
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999969647199219	WITHOUT_CLASSIFICATION	1.1005333526010677E-6	DEFECT	9.398310295501887E-7	DESIGN	4.278128888234531E-7	IMPLEMENTATION	3.152340224706342E-7	TEST	2.5186878454893016E-7	DOCUMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9996471533938077	WITHOUT_CLASSIFICATION	3.412229388132295E-4	DESIGN	1.0972847461552452E-5	IMPLEMENTATION	4.289704832652868E-7	DOCUMENTATION	1.1235507343280443E-7	TEST	1.0949436085258597E-7	DEFECT
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999805397849664	WITHOUT_CLASSIFICATION	1.4677314400691877E-5	DEFECT	2.8643081620847706E-6	TEST	1.662159291898368E-6	DESIGN	2.1416323981779737E-7	DOCUMENTATION	4.2269939175773635E-8	IMPLEMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999975741067884	WITHOUT_CLASSIFICATION	1.5205649625692583E-6	IMPLEMENTATION	6.626182067945594E-7	DEFECT	1.822726497606359E-7	DOCUMENTATION	3.962464154426273E-8	DESIGN	2.0812750933156904E-8	TEST
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999984213371076	WITHOUT_CLASSIFICATION	9.164796970655472E-7	DESIGN	5.313839034645512E-7	DEFECT	1.2165583965865413E-7	IMPLEMENTATION	5.930642495300279E-9	DOCUMENTATION	3.2128097072253677E-9	TEST
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9663701579127634	WITHOUT_CLASSIFICATION	0.028479049163089062	IMPLEMENTATION	0.0026055762463611746	DESIGN	0.0024213567469578306	TEST	1.2162671121291895E-4	DOCUMENTATION	2.233219615621773E-6	DEFECT
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999938295190394	WITHOUT_CLASSIFICATION	3.932493334990766E-6	IMPLEMENTATION	1.1490466196949227E-6	DOCUMENTATION	5.699344237271489E-7	DESIGN	4.821700549202184E-7	DEFECT	3.683652731777799E-8	TEST
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999402093617105	WITHOUT_CLASSIFICATION	5.956894482720672E-5	DESIGN	1.8073601961820467E-7	DEFECT	3.7332703822025585E-8	DOCUMENTATION	2.7514180783157587E-9	TEST	8.733207905590082E-10	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9965298279485856	WITHOUT_CLASSIFICATION	0.0031748917766201844	DESIGN	1.5212887567781158E-4	IMPLEMENTATION	9.735750447691486E-5	TEST	3.8004777797542374E-5	DOCUMENTATION	7.789116841889694E-6	DEFECT
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999810584547947	WITHOUT_CLASSIFICATION	1.8826152538298574E-5	DESIGN	1.1279924082410809E-7	DEFECT	2.0262524442721937E-9	DOCUMENTATION	3.692700334637977E-10	IMPLEMENTATION	1.9790377269679282E-10	TEST
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999993683469948	WITHOUT_CLASSIFICATION	6.142134747356424E-7	DESIGN	1.0627331207828395E-8	IMPLEMENTATION	4.022148624236223E-9	DEFECT	1.8205503698768711E-9	DOCUMENTATION	9.69500402247506E-10	TEST
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999984853597	WITHOUT_CLASSIFICATION	7.951923717341923E-10	DESIGN	5.826459432366892E-10	DEFECT	1.3605335312433802E-10	TEST	4.359798971616859E-13	DOCUMENTATION	3.126361269947762E-13	IMPLEMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999069760158241	WITHOUT_CLASSIFICATION	8.736492505496271E-5	DESIGN	2.462491474074095E-6	DOCUMENTATION	1.9439474816283264E-6	IMPLEMENTATION	1.0171447800298587E-6	TEST	2.354753852430415E-7	DEFECT
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999994860294108	WITHOUT_CLASSIFICATION	5.10888167190156E-7	DESIGN	1.8342571004096473E-9	TEST	5.56535205302667E-10	DOCUMENTATION	3.9573793387892876E-10	DEFECT	2.9589158949977597E-10	IMPLEMENTATION
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9981320620065929	WITHOUT_CLASSIFICATION	0.0015541209668551745	DESIGN	3.1366775768746166E-4	DEFECT	9.542000235293065E-8	IMPLEMENTATION	5.172959320083939E-8	DOCUMENTATION	2.1192688453097134E-9	TEST
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999970357026432	WITHOUT_CLASSIFICATION	1.9507596511885176E-6	DEFECT	1.0108896627209484E-6	DESIGN	2.6030283771571E-9	IMPLEMENTATION	2.3428286787113786E-11	TEST	2.1586205084029327E-11	DOCUMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999995472602455	WITHOUT_CLASSIFICATION	2.929864168909695E-7	IMPLEMENTATION	8.108466727026018E-8	DESIGN	4.9282645749569136E-8	DEFECT	1.6082995786476806E-8	TEST	1.3303028795480414E-8	DOCUMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999580961865083	WITHOUT_CLASSIFICATION	1.4414693966632812E-5	IMPLEMENTATION	1.3233987641494121E-5	DESIGN	1.2056135862072316E-5	DEFECT	1.4782870520066322E-6	DOCUMENTATION	7.207089694610207E-7	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999580961865083	WITHOUT_CLASSIFICATION	1.4414693966632812E-5	IMPLEMENTATION	1.3233987641494121E-5	DESIGN	1.2056135862072316E-5	DEFECT	1.4782870520066322E-6	DOCUMENTATION	7.207089694610207E-7	TEST
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999998739707565	WITHOUT_CLASSIFICATION	5.7559820007037497E-8	IMPLEMENTATION	2.4976781820779124E-8	DEFECT	1.9339080763489655E-8	DESIGN	1.691421692001495E-8	DOCUMENTATION	7.239343943478427E-9	TEST
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9987975611536343	WITHOUT_CLASSIFICATION	0.0012021402556751605	DESIGN	1.6501161835898637E-7	TEST	6.13099855530892E-8	DEFECT	3.779715493760807E-8	DOCUMENTATION	3.4471931814332076E-8	IMPLEMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9998634631506083	WITHOUT_CLASSIFICATION	1.3584866723976967E-4	DESIGN	5.589179504656237E-7	DEFECT	7.662628507171156E-8	IMPLEMENTATION	3.133281969591077E-8	TEST	2.1305096832400597E-8	DOCUMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9963209441783396	WITHOUT_CLASSIFICATION	0.0036744892154015876	DESIGN	3.778239708710158E-6	DEFECT	4.680002290037279E-7	DOCUMENTATION	2.2677703966649185E-7	IMPLEMENTATION	9.35892815106093E-8	TEST
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999995186389007	WITHOUT_CLASSIFICATION	3.0750945189899794E-7	DEFECT	1.4936120028377604E-7	DESIGN	2.0682664859571843E-8	IMPLEMENTATION	3.302097601437706E-9	DOCUMENTATION	5.056846994108573E-10	TEST
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.99970749873882	WITHOUT_CLASSIFICATION	2.603668474894474E-4	DESIGN	3.1524040448365345E-5	IMPLEMENTATION	4.898808077734036E-7	TEST	8.904735162528098E-8	DOCUMENTATION	3.144508272163037E-8	DEFECT
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999796708179617	WITHOUT_CLASSIFICATION	2.031221396223361E-5	DESIGN	1.3747172584504839E-8	DEFECT	2.5314863123007237E-9	DOCUMENTATION	6.579867037968117E-10	TEST	3.143057471068001E-11	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999957374059624	WITHOUT_CLASSIFICATION	2.4512242040158464E-6	IMPLEMENTATION	1.7454844707826075E-6	DEFECT	3.364113517650743E-8	TEST	3.082336568325423E-8	DESIGN	1.4208618994601203E-9	DOCUMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9997882709470495	WITHOUT_CLASSIFICATION	1.1653569310650827E-4	DESIGN	7.458000387586299E-5	DEFECT	1.8409164710973955E-5	IMPLEMENTATION	1.282321881807818E-6	DOCUMENTATION	9.21869375443619E-7	TEST
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999981521218625	WITHOUT_CLASSIFICATION	1.8161709823658133E-6	DESIGN	2.826189436912957E-8	DEFECT	2.42589185908232E-9	TEST	6.175035328809789E-10	IMPLEMENTATION	4.0186528204233907E-10	DOCUMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999999498283233	WITHOUT_CLASSIFICATION	3.043806887027537E-8	DESIGN	9.040556676821973E-9	DEFECT	8.732256841770804E-9	IMPLEMENTATION	1.814626294475428E-9	DOCUMENTATION	1.4616807968777303E-10	TEST
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999997973839246	WITHOUT_CLASSIFICATION	1.8416921410694592E-7	DEFECT	1.6792559785383665E-8	DESIGN	1.240996731492053E-9	IMPLEMENTATION	3.9540744690220566E-10	DOCUMENTATION	1.789726419802695E-11	TEST
//a composite key	WITHOUT_CLASSIFICATION	0.9999981872890982	WITHOUT_CLASSIFICATION	1.639947983845941E-6	DESIGN	6.839701364797002E-8	DEFECT	6.725740067211432E-8	IMPLEMENTATION	2.4553376696095897E-8	DOCUMENTATION	1.2555126964129971E-8	TEST
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999998879961183	WITHOUT_CLASSIFICATION	1.0672914551515023E-7	DESIGN	3.6057406641630677E-9	DEFECT	1.2554705419401688E-9	DOCUMENTATION	2.9584320097844436E-10	IMPLEMENTATION	1.176818502091512E-10	TEST
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999310900282213	WITHOUT_CLASSIFICATION	6.776516654080209E-5	DESIGN	8.49838259221333E-7	DEFECT	2.0854275499841314E-7	IMPLEMENTATION	6.150501868156282E-8	TEST	2.4919205084326873E-8	DOCUMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.8519185469055918	WITHOUT_CLASSIFICATION	0.10533508763581823	DESIGN	0.042271388874444475	IMPLEMENTATION	2.783939954504292E-4	DOCUMENTATION	1.4030955794233006E-4	DEFECT	5.6273030752805563E-5	TEST
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999905298102967	WITHOUT_CLASSIFICATION	6.0465242106237135E-6	DESIGN	1.8036194604814229E-6	IMPLEMENTATION	1.3740831424140805E-6	DEFECT	2.2817693451225844E-7	DOCUMENTATION	1.7785955244020812E-8	TEST
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9842807235660608	WITHOUT_CLASSIFICATION	0.01122084320230153	DEFECT	0.004388119128044658	IMPLEMENTATION	1.034959396871882E-4	DESIGN	3.4138014082403188E-6	TEST	3.4043624977043847E-6	DOCUMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9883971452846865	WITHOUT_CLASSIFICATION	0.008192587123057418	IMPLEMENTATION	0.0033789654707324277	DESIGN	2.5265868837568063E-5	DEFECT	5.44805119174946E-6	TEST	5.882014943523022E-7	DOCUMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999870196064226	WITHOUT_CLASSIFICATION	1.2853757989137472E-5	DESIGN	8.013450591383042E-8	IMPLEMENTATION	4.1054792519276565E-8	TEST	4.117219173850474E-9	DEFECT	1.3290707582543767E-9	DOCUMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.9999821792497876	WITHOUT_CLASSIFICATION	1.5428926464317493E-5	DESIGN	1.6655753649518708E-6	DEFECT	5.242012893340014E-7	IMPLEMENTATION	1.582373049641791E-7	DOCUMENTATION	4.380978882501125E-8	TEST
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.999945957388586	WITHOUT_CLASSIFICATION	5.3914836730687815E-5	DESIGN	1.056384670922244E-7	DOCUMENTATION	1.5744283028270925E-8	DEFECT	3.830906411670772E-9	TEST	2.5610268095984765E-9	IMPLEMENTATION
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9995250779482219	WITHOUT_CLASSIFICATION	4.5023440821748053E-4	DESIGN	1.9436294185887888E-5	DOCUMENTATION	3.158070873170784E-6	DEFECT	1.2565429805798906E-6	TEST	8.367355209303297E-7	IMPLEMENTATION
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9469541602931358	WITHOUT_CLASSIFICATION	0.05299383459252648	DESIGN	2.8383204859018633E-5	TEST	1.2805051692459909E-5	IMPLEMENTATION	1.0558240739949912E-5	DEFECT	2.586170463940238E-7	DOCUMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999999998052967	WITHOUT_CLASSIFICATION	1.2363770328640045E-9	DEFECT	5.586475354332725E-10	DOCUMENTATION	1.3983964741474706E-10	DESIGN	8.591266222391812E-12	TEST	3.5773619557110217E-12	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.997913882385598	WITHOUT_CLASSIFICATION	0.0020774693482705675	DESIGN	8.079186592432127E-6	DEFECT	3.595877334366453E-7	TEST	1.6481508069134007E-7	DOCUMENTATION	4.4676724966156175E-8	IMPLEMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999975754405042	WITHOUT_CLASSIFICATION	2.0842238870380274E-6	IMPLEMENTATION	2.0331377324060928E-7	DEFECT	1.1496327834975946E-7	DESIGN	1.8545576613738947E-8	DOCUMENTATION	3.5129804596102048E-9	TEST
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999948990033142	WITHOUT_CLASSIFICATION	3.503223648699568E-6	DEFECT	7.713592837373832E-7	IMPLEMENTATION	7.595240602444201E-7	DESIGN	4.382098974756456E-8	DOCUMENTATION	2.306870342473483E-8	TEST
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999877655434236	WITHOUT_CLASSIFICATION	1.2058029205328972E-5	DESIGN	8.07513732255948E-8	DEFECT	6.180580752564216E-8	IMPLEMENTATION	3.173998656891486E-8	TEST	2.130203641587265E-9	DOCUMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999668139675975	WITHOUT_CLASSIFICATION	3.184912191804182E-5	DESIGN	1.3023387532572423E-6	IMPLEMENTATION	2.4375757767672447E-8	TEST	6.187508215782593E-9	DOCUMENTATION	4.008465328978706E-9	DEFECT
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999979815115254	WITHOUT_CLASSIFICATION	1.9281470048851783E-6	DESIGN	6.178481138135628E-8	DEFECT	2.1337418224246902E-8	TEST	4.622604254968939E-9	IMPLEMENTATION	2.5966356739786434E-9	DOCUMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.999895957994256	WITHOUT_CLASSIFICATION	9.858705487693058E-5	DESIGN	5.25621762603618E-6	IMPLEMENTATION	8.187168173690423E-8	DEFECT	7.02398877995786E-8	DOCUMENTATION	4.662167149940683E-8	TEST
//the criteria instance	WITHOUT_CLASSIFICATION	0.9998142799427886	WITHOUT_CLASSIFICATION	1.8502176119470994E-4	DESIGN	4.083142613108612E-7	DEFECT	1.680113579765416E-7	DOCUMENTATION	9.811294363113369E-8	IMPLEMENTATION	2.385745373820882E-8	TEST
// the entity name	WITHOUT_CLASSIFICATION	0.9998968665040592	WITHOUT_CLASSIFICATION	1.0049468487462979E-4	DESIGN	1.6304722232776062E-6	DEFECT	6.243986987022017E-7	IMPLEMENTATION	2.93482525584937E-7	DOCUMENTATION	9.045761872061441E-8	TEST
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9997617427778178	WITHOUT_CLASSIFICATION	2.342006570251711E-4	DESIGN	1.4043233583950529E-6	IMPLEMENTATION	1.2148622480561368E-6	TEST	8.949286761353683E-7	DEFECT	5.424508744106821E-7	DOCUMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9997617427778178	WITHOUT_CLASSIFICATION	2.342006570251711E-4	DESIGN	1.4043233583950529E-6	IMPLEMENTATION	1.2148622480561368E-6	TEST	8.949286761353683E-7	DEFECT	5.424508744106821E-7	DOCUMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999979256131424	WITHOUT_CLASSIFICATION	1.7710125436661952E-6	DEFECT	2.424100247764793E-7	DESIGN	4.916150522094648E-8	IMPLEMENTATION	8.839866650902356E-9	DOCUMENTATION	2.962917252213459E-9	TEST
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9983903522252815	WITHOUT_CLASSIFICATION	0.001601522128856952	DESIGN	5.1588451249724856E-6	DEFECT	1.4286412513106165E-6	DOCUMENTATION	1.1782464379059782E-6	TEST	3.5991304730084777E-7	IMPLEMENTATION
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999907811549027	WITHOUT_CLASSIFICATION	8.290334792259127E-6	DESIGN	8.093076458246323E-7	DEFECT	5.0015972315587126E-8	DOCUMENTATION	4.7370520664991426E-8	TEST	2.1816166229729118E-8	IMPLEMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999841110886079	WITHOUT_CLASSIFICATION	1.4619835105267868E-5	DESIGN	7.494897952230116E-7	DEFECT	1.8369680312751259E-7	IMPLEMENTATION	1.815887614616603E-7	DOCUMENTATION	1.5430092702027638E-7	TEST
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999999924096681	WITHOUT_CLASSIFICATION	7.56811405208549E-9	DESIGN	1.637143169012583E-11	TEST	4.664275045027059E-12	DOCUMENTATION	9.788295604633843E-13	IMPLEMENTATION	2.0341549251352316E-13	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999866600240516	WITHOUT_CLASSIFICATION	9.295364078359881E-6	DESIGN	3.902090782101667E-6	DEFECT	1.287215466807144E-7	TEST	1.3470519245939718E-8	DOCUMENTATION	3.29021975888658E-10	IMPLEMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999921440035056	WITHOUT_CLASSIFICATION	4.517341672433638E-6	DESIGN	3.1843295720525587E-6	DEFECT	1.26256559095821E-7	TEST	1.5351266255006986E-8	DOCUMENTATION	1.2717424474111694E-8	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999977674266897	WITHOUT_CLASSIFICATION	2.21050053873863E-6	DESIGN	2.1856652369115084E-8	DEFECT	1.1103467043018752E-10	IMPLEMENTATION	7.163756205067926E-11	TEST	3.344706784474336E-11	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9664581913114092	WITHOUT_CLASSIFICATION	0.03269663846262186	DESIGN	6.00119898078008E-4	DEFECT	2.3650382393533838E-4	TEST	8.224497180041187E-6	DOCUMENTATION	3.2200677536105093E-7	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999965814127204	WITHOUT_CLASSIFICATION	3.3975146112063197E-6	DESIGN	1.901696921632696E-8	DEFECT	9.928883990442757E-10	IMPLEMENTATION	9.31108968388986E-10	TEST	1.317018191902602E-10	DOCUMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999924620636683	WITHOUT_CLASSIFICATION	6.754201422775724E-6	DEFECT	5.522822733380866E-7	DESIGN	2.2749858471705348E-7	IMPLEMENTATION	3.2109967395931394E-9	TEST	7.430542157973231E-10	DOCUMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999518659169165	WITHOUT_CLASSIFICATION	3.229528307868248E-5	DESIGN	8.34951212377856E-6	IMPLEMENTATION	7.008836279164272E-6	DEFECT	4.2493626182540167E-7	TEST	5.5515340063959213E-8	DOCUMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999841631651891	WITHOUT_CLASSIFICATION	1.310217580211537E-5	DESIGN	2.0512858820734704E-6	DEFECT	6.265362552629429E-7	TEST	4.6743064764511865E-8	DOCUMENTATION	1.0093806751115454E-8	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9998633942521005	WITHOUT_CLASSIFICATION	1.3508978245328063E-4	DESIGN	9.987803090724445E-7	IMPLEMENTATION	3.8684640613541906E-7	DEFECT	1.0685918003559072E-7	DOCUMENTATION	2.347955111638268E-8	TEST
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999999756104404	WITHOUT_CLASSIFICATION	1.825202317918405E-8	IMPLEMENTATION	4.037518364113743E-9	DEFECT	1.2899917233761369E-9	DESIGN	7.89230512408279E-10	TEST	2.079578837314362E-11	DOCUMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9991130142499737	WITHOUT_CLASSIFICATION	8.534371652992395E-4	DESIGN	1.9877511887370703E-5	IMPLEMENTATION	1.0983953873131601E-5	DEFECT	2.085878983509208E-6	DOCUMENTATION	6.012399831685016E-7	TEST
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9991130142499737	WITHOUT_CLASSIFICATION	8.534371652992395E-4	DESIGN	1.9877511887370703E-5	IMPLEMENTATION	1.0983953873131601E-5	DEFECT	2.085878983509208E-6	DOCUMENTATION	6.012399831685016E-7	TEST
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999956718989544	WITHOUT_CLASSIFICATION	3.349192935255753E-6	DESIGN	9.754789432206095E-7	DEFECT	1.6978535989242415E-9	IMPLEMENTATION	1.6359772099833724E-9	DOCUMENTATION	9.533627583175874E-11	TEST
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999966438921706	WITHOUT_CLASSIFICATION	3.2695226741276856E-6	DEFECT	7.835221840487462E-8	DESIGN	3.7892343208397736E-9	DOCUMENTATION	2.8958425833211824E-9	TEST	1.5478599216099827E-9	IMPLEMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9964705309420285	WITHOUT_CLASSIFICATION	0.0035209470030798406	DESIGN	6.188096923023265E-6	IMPLEMENTATION	1.495479824301988E-6	TEST	7.234297882969332E-7	DEFECT	1.1504835622499533E-7	DOCUMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999976996137034	WITHOUT_CLASSIFICATION	2.2887979950264613E-6	DESIGN	6.768525608520598E-9	DEFECT	3.93125586354882E-9	IMPLEMENTATION	6.686209223113099E-10	TEST	2.1989941436206933E-10	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997691624667374	WITHOUT_CLASSIFICATION	1.5744223816639152E-4	DESIGN	6.644836724879456E-5	IMPLEMENTATION	3.672882604898921E-6	DEFECT	2.505849997271748E-6	DOCUMENTATION	7.681952452665731E-7	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9992153764669934	WITHOUT_CLASSIFICATION	2.841579807042069E-4	IMPLEMENTATION	2.4291817474365185E-4	DESIGN	2.3479895931677547E-4	DEFECT	1.1620094099034812E-5	DOCUMENTATION	1.112832414295056E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999989927688206	WITHOUT_CLASSIFICATION	8.11075855060158E-7	DESIGN	1.2108479767188136E-7	IMPLEMENTATION	6.139222372983478E-8	DEFECT	8.676221024515139E-9	DOCUMENTATION	5.0020818292773194E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999854722260487	WITHOUT_CLASSIFICATION	1.3881109657488264E-5	DESIGN	3.7716109328734906E-7	IMPLEMENTATION	1.5480988358096004E-7	DOCUMENTATION	9.413931830385124E-8	DEFECT	2.0553998477839703E-8	TEST
// already been processed...	WITHOUT_CLASSIFICATION	0.9999854722260487	WITHOUT_CLASSIFICATION	1.3881109657488264E-5	DESIGN	3.7716109328734906E-7	IMPLEMENTATION	1.5480988358096004E-7	DOCUMENTATION	9.413931830385124E-8	DEFECT	2.0553998477839703E-8	TEST
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999982391014219	WITHOUT_CLASSIFICATION	8.755525109929197E-7	IMPLEMENTATION	5.012524732480301E-7	DESIGN	3.3395669132546904E-7	DEFECT	4.044686024794034E-8	TEST	9.690042258366618E-9	DOCUMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999950350615442	WITHOUT_CLASSIFICATION	2.5010858273509804E-6	DESIGN	1.3866240717372504E-6	DEFECT	1.0762039421453043E-6	IMPLEMENTATION	6.898678025004852E-10	TEST	3.347466361883258E-10	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999998217846823	WITHOUT_CLASSIFICATION	9.506322834688007E-8	DESIGN	6.491046207609543E-8	IMPLEMENTATION	1.403110948909142E-8	DEFECT	2.937919865413931E-9	TEST	1.2725978515254928E-9	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999709431297228	WITHOUT_CLASSIFICATION	2.669858350520508E-5	DESIGN	2.357722382261572E-6	DEFECT	4.544676827311496E-10	DOCUMENTATION	7.023740040261593E-11	IMPLEMENTATION	3.9684525054590244E-11	TEST
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9695428634292699	WITHOUT_CLASSIFICATION	0.030455755354147646	DESIGN	5.575227001611017E-7	TEST	5.240157313099319E-7	DOCUMENTATION	2.1802575039973998E-7	IMPLEMENTATION	8.165240060807418E-8	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999607271572226	WITHOUT_CLASSIFICATION	2.0130695535447405E-5	IMPLEMENTATION	1.3387294057643021E-5	DESIGN	4.223010464579926E-6	DEFECT	9.966873836809861E-7	DOCUMENTATION	5.35155335963205E-7	TEST
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9996683613533134	WITHOUT_CLASSIFICATION	1.7769956825298568E-4	IMPLEMENTATION	1.483369907566769E-4	DESIGN	5.4243246169341946E-6	DEFECT	1.6398880341952028E-7	DOCUMENTATION	1.3774256522594257E-8	TEST
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999981583947883	WITHOUT_CLASSIFICATION	1.234262336375227E-6	IMPLEMENTATION	5.679192469480033E-7	DESIGN	2.4536655179885773E-8	DEFECT	9.30220256748863E-9	TEST	5.5847705578495E-9	DOCUMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999979015863467	WITHOUT_CLASSIFICATION	1.4982593025379897E-6	IMPLEMENTATION	5.86559763602034E-7	DESIGN	6.927829756294189E-9	DOCUMENTATION	5.303330603126564E-9	TEST	1.363426814271844E-9	DEFECT
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9994331074151849	WITHOUT_CLASSIFICATION	5.477354410145952E-4	DESIGN	9.710759104971046E-6	TEST	7.799522233554765E-6	IMPLEMENTATION	1.0574814068168268E-6	DEFECT	5.893810550068704E-7	DOCUMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9897721806581008	WITHOUT_CLASSIFICATION	0.008616926876835114	DEFECT	0.0010813203341523679	DESIGN	5.277904015136165E-4	IMPLEMENTATION	1.5465049005020323E-6	TEST	2.3522449754535027E-7	DOCUMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9999936094840927	WITHOUT_CLASSIFICATION	2.6199805336378005E-6	DESIGN	1.9780821075500214E-6	IMPLEMENTATION	1.4866016975350237E-6	DEFECT	2.3526700181082757E-7	TEST	7.058456680680049E-8	DOCUMENTATION
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999366630131786	WITHOUT_CLASSIFICATION	4.8576731087883616E-5	DESIGN	1.3609212499318505E-5	IMPLEMENTATION	5.771969870160833E-7	TEST	5.366553944839252E-7	DEFECT	3.719085263254401E-8	DOCUMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999667846586437	WITHOUT_CLASSIFICATION	3.175824312763835E-5	DESIGN	8.256395476678014E-7	IMPLEMENTATION	3.3665331657636246E-7	DEFECT	1.7871907550254606E-7	TEST	1.1608628877064115E-7	DOCUMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999826205839628	WITHOUT_CLASSIFICATION	1.719903765531941E-4	DESIGN	1.167604517241851E-6	DEFECT	3.9522589172100196E-7	TEST	2.2167328369617238E-7	DOCUMENTATION	1.928012616445898E-8	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999840761747821	WITHOUT_CLASSIFICATION	1.5888323784536042E-5	DESIGN	2.2984651209247017E-8	DEFECT	6.5189580563623E-9	DOCUMENTATION	3.322267958435383E-9	TEST	2.675556198216565E-9	IMPLEMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.999999902753009	WITHOUT_CLASSIFICATION	6.84064494077329E-8	DEFECT	1.4897674569912808E-8	DESIGN	9.985441224147033E-9	IMPLEMENTATION	2.8759956814259545E-9	TEST	1.08143014768275E-9	DOCUMENTATION
//by default	WITHOUT_CLASSIFICATION	0.9999345328857786	WITHOUT_CLASSIFICATION	4.987107552205219E-5	DESIGN	1.1709851474577631E-5	IMPLEMENTATION	2.9578140340141744E-6	DEFECT	6.74591457827014E-7	DOCUMENTATION	2.5378173279359493E-7	TEST
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9985315963497222	WITHOUT_CLASSIFICATION	0.0014484316067441797	DESIGN	1.0791773928438988E-5	DEFECT	8.641081988047942E-6	IMPLEMENTATION	4.508765891218883E-7	TEST	8.831102798664498E-8	DOCUMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999954689821418	WITHOUT_CLASSIFICATION	3.3867687709972927E-6	IMPLEMENTATION	7.357334639075659E-7	DESIGN	3.8010751156422003E-7	DEFECT	2.101099916678561E-8	DOCUMENTATION	7.3971126710553915E-9	TEST
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999999700484703	WITHOUT_CLASSIFICATION	1.3888695773783361E-8	DESIGN	7.439507413558969E-9	DEFECT	5.662564175483297E-9	IMPLEMENTATION	1.657236551448852E-9	DOCUMENTATION	1.3035257401259891E-9	TEST
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999763312459499	WITHOUT_CLASSIFICATION	1.917567593680758E-5	DESIGN	3.883369594803972E-6	IMPLEMENTATION	3.5485082395832265E-7	DEFECT	1.280887036014336E-7	TEST	1.26768991046018E-7	DOCUMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999668934748754	WITHOUT_CLASSIFICATION	1.3298508062326377E-5	DESIGN	9.985847223008998E-6	TEST	7.830957525423933E-6	DEFECT	1.8123319291607047E-6	IMPLEMENTATION	1.788803845479569E-7	DOCUMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999742954829416	WITHOUT_CLASSIFICATION	2.3464985384390564E-5	DESIGN	2.195318476676106E-6	DEFECT	2.7085414557693573E-8	DOCUMENTATION	9.320631880881961E-9	TEST	7.807150883271133E-9	IMPLEMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999977611161007	WITHOUT_CLASSIFICATION	1.967044146059684E-6	DESIGN	2.431628049565643E-7	IMPLEMENTATION	2.248180398099944E-8	DEFECT	3.2265335748996733E-9	DOCUMENTATION	2.968610778454472E-9	TEST
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999919329400916	WITHOUT_CLASSIFICATION	5.755859591959881E-6	DESIGN	2.2670783546835517E-6	IMPLEMENTATION	2.3541184046826067E-8	DEFECT	1.568393724248063E-8	DOCUMENTATION	4.89684053481384E-9	TEST
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.999997302619328	WITHOUT_CLASSIFICATION	2.4126647867050606E-6	DESIGN	2.5824978072643967E-7	TEST	1.635912440269043E-8	DEFECT	9.086726740967787E-9	IMPLEMENTATION	1.0202534087706046E-9	DOCUMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9989115050742007	WITHOUT_CLASSIFICATION	0.0010876360498437074	DESIGN	7.977925855811117E-7	IMPLEMENTATION	5.479282495925829E-8	TEST	6.21711558827217E-9	DOCUMENTATION	7.342931450599566E-11	DEFECT
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9998982804138369	WITHOUT_CLASSIFICATION	1.0136952597514522E-4	DESIGN	2.5170246958472216E-7	IMPLEMENTATION	9.562973140294005E-8	DEFECT	2.358853010988567E-9	DOCUMENTATION	3.691341254134624E-10	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999522585752	WITHOUT_CLASSIFICATION	3.370727130269309E-8	IMPLEMENTATION	8.351406104332643E-9	DESIGN	5.446691184512895E-9	DEFECT	1.212041115753907E-10	DOCUMENTATION	1.1485225262623557E-10	TEST
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.998149662425099	WITHOUT_CLASSIFICATION	9.381507677899303E-4	IMPLEMENTATION	7.771210292393023E-4	DESIGN	1.0236293422349501E-4	DEFECT	1.7322077564422036E-5	TEST	1.5380766083817024E-5	DOCUMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.9999620409262625	WITHOUT_CLASSIFICATION	3.727222365823763E-5	DESIGN	3.58695337308346E-7	IMPLEMENTATION	1.90282200587964E-7	DEFECT	7.079765594901941E-8	TEST	6.70748853374886E-8	DOCUMENTATION
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9997137048192622	WITHOUT_CLASSIFICATION	2.2070017985176488E-4	DEFECT	6.410216859777125E-5	DESIGN	1.3339959934091671E-6	IMPLEMENTATION	1.2381327327181172E-7	TEST	3.502302139495722E-8	DOCUMENTATION
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999998853546603	WITHOUT_CLASSIFICATION	1.0971134212242248E-7	IMPLEMENTATION	3.082793650970936E-9	DESIGN	9.882047688753732E-10	DOCUMENTATION	5.890578561140484E-10	TEST	2.739412281354029E-10	DEFECT
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999998656703433	WITHOUT_CLASSIFICATION	7.264742270096694E-8	IMPLEMENTATION	5.3226877360887434E-8	DESIGN	4.297505544704785E-9	TEST	2.7442936326507806E-9	DOCUMENTATION	1.4135575812697756E-9	DEFECT
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999722986360379	WITHOUT_CLASSIFICATION	1.921649553461185E-5	DESIGN	7.689134315440914E-6	DEFECT	3.5466546381364867E-7	IMPLEMENTATION	2.5393580726627533E-7	DOCUMENTATION	1.8713284104262782E-7	TEST
//may be final	WITHOUT_CLASSIFICATION	0.9995661222782496	WITHOUT_CLASSIFICATION	4.09819853987575E-4	DESIGN	1.8089879058015276E-5	DEFECT	4.299907350818518E-6	IMPLEMENTATION	1.261522463870438E-6	DOCUMENTATION	4.065588900405405E-7	TEST
// may be final	WITHOUT_CLASSIFICATION	0.9999687285992559	WITHOUT_CLASSIFICATION	2.314771185056149E-5	DESIGN	6.525507039770486E-6	DEFECT	1.4380205087728234E-6	IMPLEMENTATION	1.1677089808687979E-7	DOCUMENTATION	4.339044689002419E-8	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999894502597158	WITHOUT_CLASSIFICATION	1.048357194497894E-5	DESIGN	4.158878779425601E-8	DEFECT	1.3545800591150589E-8	DOCUMENTATION	9.912224506262856E-9	TEST	1.1215263838027387E-9	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.999997953299983	WITHOUT_CLASSIFICATION	1.9593225527214778E-6	DESIGN	3.3309795776948286E-8	DEFECT	3.300682154788575E-8	DOCUMENTATION	1.1209970134205266E-8	IMPLEMENTATION	9.85087686070103E-9	TEST
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.999999980966636	WITHOUT_CLASSIFICATION	1.7552382495048565E-8	DESIGN	1.1035101446114468E-9	DEFECT	2.8709998426674224E-10	TEST	5.1698966007162076E-11	IMPLEMENTATION	3.867230799689799E-11	DOCUMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.9999509825520648	WITHOUT_CLASSIFICATION	4.182070463614595E-5	DEFECT	4.738370030381933E-6	DESIGN	2.125589153201486E-6	IMPLEMENTATION	2.293337914880924E-7	DOCUMENTATION	1.0345032401686943E-7	TEST
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9998726661330136	WITHOUT_CLASSIFICATION	6.230885442178742E-5	IMPLEMENTATION	4.798545326436201E-5	DESIGN	1.4262017750603069E-5	DEFECT	2.384351218386547E-6	DOCUMENTATION	3.9319033117969505E-7	TEST
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999999577318358	WITHOUT_CLASSIFICATION	4.206572291420744E-8	DESIGN	9.539521382017665E-11	DOCUMENTATION	6.045520612168548E-11	DEFECT	3.132569065482163E-11	IMPLEMENTATION	1.5265013117088362E-11	TEST
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999999941576	WITHOUT_CLASSIFICATION	5.156414982549529E-12	IMPLEMENTATION	3.1065648227532283E-13	DOCUMENTATION	2.473900448014776E-13	DEFECT	8.15276112344008E-14	DESIGN	4.636530235235354E-14	TEST
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999974020518154	WITHOUT_CLASSIFICATION	2.2757243019433106E-6	DESIGN	1.5735366106251067E-7	IMPLEMENTATION	1.478306367277511E-7	DEFECT	1.5267263825642902E-8	TEST	1.7723212167021148E-9	DOCUMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999894502597158	WITHOUT_CLASSIFICATION	1.048357194497894E-5	DESIGN	4.158878779425601E-8	DEFECT	1.3545800591150589E-8	DOCUMENTATION	9.912224506262856E-9	TEST	1.1215263838027387E-9	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.999997953299983	WITHOUT_CLASSIFICATION	1.9593225527214778E-6	DESIGN	3.3309795776948286E-8	DEFECT	3.300682154788575E-8	DOCUMENTATION	1.1209970134205266E-8	IMPLEMENTATION	9.85087686070103E-9	TEST
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999903574463795	WITHOUT_CLASSIFICATION	6.1796655725594224E-6	IMPLEMENTATION	2.4515052011921823E-6	DESIGN	8.872099814048194E-7	DEFECT	1.1684372680989633E-7	TEST	7.329138560795123E-9	DOCUMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9996815862556572	WITHOUT_CLASSIFICATION	2.883785652263044E-4	DESIGN	1.5393562054390714E-5	IMPLEMENTATION	1.1319807002700834E-5	DOCUMENTATION	2.005569373786883E-6	DEFECT	1.3162406856765283E-6	TEST
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999989193517831	WITHOUT_CLASSIFICATION	9.711943694966731E-7	DESIGN	9.851033227319624E-8	DEFECT	7.285053522770407E-9	DOCUMENTATION	3.0175616457188368E-9	IMPLEMENTATION	6.40900023879317E-10	TEST
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999399478588635	WITHOUT_CLASSIFICATION	4.0034496238763246E-5	IMPLEMENTATION	1.718228862966375E-5	DEFECT	1.5541674493122153E-6	DESIGN	1.2149944106273152E-6	TEST	6.619440810544492E-8	DOCUMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999990035727142	WITHOUT_CLASSIFICATION	8.574000759661715E-7	IMPLEMENTATION	9.289483540755248E-8	DESIGN	4.3902349547631894E-8	DEFECT	1.7538343370067632E-9	DOCUMENTATION	4.761903387022841E-10	TEST
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9996919826146151	WITHOUT_CLASSIFICATION	2.7767064471494337E-4	DEFECT	2.9346203661527858E-5	DESIGN	5.920395694848622E-7	TEST	3.4444302595269204E-7	IMPLEMENTATION	6.40544130625521E-8	DOCUMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9989377802150586	WITHOUT_CLASSIFICATION	0.001051149844841669	IMPLEMENTATION	9.344635408893713E-6	DEFECT	7.138464913804323E-7	DESIGN	5.467360291349614E-7	TEST	4.647221701983471E-7	DOCUMENTATION
// }	WITHOUT_CLASSIFICATION	0.9999953659097705	WITHOUT_CLASSIFICATION	3.041608850499902E-6	DESIGN	1.1954188935412408E-6	DEFECT	2.445270159158035E-7	IMPLEMENTATION	8.62528553844589E-8	DOCUMENTATION	6.628261436194517E-8	TEST
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999977191900207	WITHOUT_CLASSIFICATION	1.8820197646942143E-6	DESIGN	2.1502325110075196E-7	IMPLEMENTATION	1.569046632293277E-7	DEFECT	2.4695654065485468E-8	DOCUMENTATION	2.1666463554778256E-9	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.6639096050722191	IMPLEMENTATION	0.23734015535727326	WITHOUT_CLASSIFICATION	0.09513671700653932	DESIGN	0.0035409063775083734	DEFECT	5.272756797147802E-5	DOCUMENTATION	1.9888618488409952E-5	TEST
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999994147883	WITHOUT_CLASSIFICATION	5.396986167336748E-10	DESIGN	4.104398078896634E-11	TEST	2.4592896595153146E-12	DEFECT	1.951613205353931E-12	DOCUMENTATION	5.825176912843457E-14	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.6639096050722191	IMPLEMENTATION	0.23734015535727326	WITHOUT_CLASSIFICATION	0.09513671700653932	DESIGN	0.0035409063775083734	DEFECT	5.272756797147802E-5	DOCUMENTATION	1.9888618488409952E-5	TEST
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999985316958446	WITHOUT_CLASSIFICATION	1.366996623099636E-6	DEFECT	7.674397321798316E-8	IMPLEMENTATION	2.4353809152410264E-8	TEST	1.2061801514988672E-10	DESIGN	8.913192822782434E-11	DOCUMENTATION
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.999991749314237	WITHOUT_CLASSIFICATION	6.175502479379982E-6	IMPLEMENTATION	1.1908388116233919E-6	DESIGN	5.089871632273831E-7	DEFECT	1.9276435702037566E-7	DOCUMENTATION	1.8259295171040725E-7	TEST
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999870776740567	WITHOUT_CLASSIFICATION	1.2540258538078535E-5	DEFECT	2.495132565817984E-7	TEST	1.30601077335519E-7	IMPLEMENTATION	1.3638898056097502E-9	DESIGN	5.891815326107133E-10	DOCUMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989539923393	WITHOUT_CLASSIFICATION	9.903400128685437E-7	DESIGN	2.6847494538336303E-8	IMPLEMENTATION	1.816157639649228E-8	TEST	7.81716300137879E-9	DEFECT	2.841413912782764E-9	DOCUMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999798184850475	WITHOUT_CLASSIFICATION	1.4786997144071359E-5	DEFECT	5.126010452390526E-6	DESIGN	1.6835246313615984E-7	IMPLEMENTATION	6.515077390971383E-8	TEST	3.500411902856287E-8	DOCUMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999505117870936	WITHOUT_CLASSIFICATION	4.2689253947022825E-5	DESIGN	3.4838324013930395E-6	DEFECT	1.4083829068703193E-6	IMPLEMENTATION	1.0433165106029388E-6	DOCUMENTATION	8.634271405346429E-7	TEST
//}	WITHOUT_CLASSIFICATION	0.9999505117870936	WITHOUT_CLASSIFICATION	4.2689253947022825E-5	DESIGN	3.4838324013930395E-6	DEFECT	1.4083829068703193E-6	IMPLEMENTATION	1.0433165106029388E-6	DOCUMENTATION	8.634271405346429E-7	TEST
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999846881600637	WITHOUT_CLASSIFICATION	1.004778178960958E-5	DESIGN	5.0112812321816414E-6	DEFECT	1.831271980219418E-7	TEST	4.308289707296892E-8	IMPLEMENTATION	2.6566819370854163E-8	DOCUMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999656546600664	WITHOUT_CLASSIFICATION	3.290332314375204E-5	DESIGN	1.356804533727093E-6	DEFECT	5.863056703265115E-8	TEST	1.854335422199342E-8	DOCUMENTATION	8.038334957454038E-9	IMPLEMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999951774854283	WITHOUT_CLASSIFICATION	3.6533778603188073E-6	DESIGN	7.374668415959791E-7	DEFECT	3.8055984766716E-7	IMPLEMENTATION	3.688666719183577E-8	TEST	1.4223354894853011E-8	DOCUMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999850050311309	WITHOUT_CLASSIFICATION	9.27564061274651E-6	DEFECT	2.6558988846898135E-6	IMPLEMENTATION	2.599881321022196E-6	DESIGN	3.841958802011236E-7	DOCUMENTATION	7.935217052082087E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9998452261526332	WITHOUT_CLASSIFICATION	9.898356606936534E-5	DESIGN	3.8028451057532134E-5	DEFECT	1.654019442762009E-5	DOCUMENTATION	1.0092165091142426E-6	IMPLEMENTATION	2.1241930330419558E-7	TEST
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.6355679434756188	WITHOUT_CLASSIFICATION	0.36429129280273875	DESIGN	1.265476497977435E-4	IMPLEMENTATION	1.2291891682703408E-5	TEST	1.5991048679459847E-6	DOCUMENTATION	3.250752939681979E-7	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999964043662886	WITHOUT_CLASSIFICATION	1.4791966733476438E-6	IMPLEMENTATION	1.341017132529496E-6	DESIGN	4.764935886897295E-7	DEFECT	1.7530263780401222E-7	TEST	1.236236791500845E-7	DOCUMENTATION
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999993199723142	WITHOUT_CLASSIFICATION	4.4914106300214723E-7	DESIGN	1.6173819869831918E-7	DEFECT	4.037578013141589E-8	IMPLEMENTATION	1.5441431651213347E-8	DOCUMENTATION	1.3331212255866677E-8	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999897934284004	WITHOUT_CLASSIFICATION	9.102187344816574E-6	DESIGN	7.932320164669924E-7	DEFECT	1.3915724137911795E-7	IMPLEMENTATION	9.365715884943321E-8	DOCUMENTATION	7.833783803008327E-8	TEST
//columns	WITHOUT_CLASSIFICATION	0.9999533393940462	WITHOUT_CLASSIFICATION	3.711197738068359E-5	DESIGN	4.3389236312669085E-6	DEFECT	3.5409847700752035E-6	IMPLEMENTATION	1.2118175958321328E-6	DOCUMENTATION	4.5690257593443975E-7	TEST
//SQL statements	WITHOUT_CLASSIFICATION	0.9999832030954028	WITHOUT_CLASSIFICATION	1.6232138054859353E-5	DESIGN	1.9986059988410524E-7	DOCUMENTATION	1.6147606914465456E-7	IMPLEMENTATION	1.0565094915046011E-7	DEFECT	9.777892414712817E-8	TEST
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999992712391831	WITHOUT_CLASSIFICATION	5.451229582014246E-7	DESIGN	7.887773502729726E-8	DEFECT	6.569826814756209E-8	IMPLEMENTATION	3.1196524520262167E-8	DOCUMENTATION	7.865331184342418E-9	TEST
//types	WITHOUT_CLASSIFICATION	0.9997802910872194	WITHOUT_CLASSIFICATION	2.0393586992250388E-4	DESIGN	7.738284621275444E-6	DEFECT	3.680891761761448E-6	IMPLEMENTATION	2.305206588255425E-6	TEST	2.0486598865580955E-6	DOCUMENTATION
// custom sql	WITHOUT_CLASSIFICATION	0.9999991420084139	WITHOUT_CLASSIFICATION	7.479549913064223E-7	DESIGN	8.01401787670093E-8	DEFECT	1.3114989454306062E-8	IMPLEMENTATION	8.554245641918407E-9	DOCUMENTATION	8.227181051734805E-9	TEST
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999864860250627	WITHOUT_CLASSIFICATION	1.0414295650616108E-5	DESIGN	2.666672343106034E-6	IMPLEMENTATION	1.4921115508322674E-7	DOCUMENTATION	1.458066246310486E-7	DEFECT	1.379891640454014E-7	TEST
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999994694777664	WITHOUT_CLASSIFICATION	4.926797510913703E-7	DESIGN	2.8848704894267158E-8	DEFECT	6.613899785887672E-9	DOCUMENTATION	2.3306126012446377E-9	IMPLEMENTATION	4.92649781063102E-11	TEST
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.999999725007587	WITHOUT_CLASSIFICATION	1.960259468581765E-7	DESIGN	6.285930560794619E-8	DEFECT	1.103392942910235E-8	IMPLEMENTATION	3.5098873698607675E-9	TEST	1.5633436612756402E-9	DOCUMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998961796388768	WITHOUT_CLASSIFICATION	7.903313860413216E-5	IMPLEMENTATION	1.9677013152731493E-5	DESIGN	4.143560505510125E-6	DEFECT	5.001874631647765E-7	DOCUMENTATION	4.6646139790272705E-7	TEST
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999983008104373	WITHOUT_CLASSIFICATION	1.59492683812858E-6	DEFECT	5.128255881401497E-8	TEST	2.99839205721854E-8	DESIGN	1.8696767966537663E-8	IMPLEMENTATION	4.299477293520917E-9	DOCUMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.9999010696117947	WITHOUT_CLASSIFICATION	9.036489202841422E-5	DESIGN	4.0006503160628425E-6	DEFECT	2.0370115350760523E-6	TEST	1.3717369540324042E-6	DOCUMENTATION	1.1560973718840256E-6	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9996336080620063	WITHOUT_CLASSIFICATION	2.1930090729340636E-4	IMPLEMENTATION	1.454854524986116E-4	DESIGN	8.864686728068735E-7	DEFECT	5.571689765809798E-7	DOCUMENTATION	1.619405523637243E-7	TEST
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.999995311983854	WITHOUT_CLASSIFICATION	3.909231769842786E-6	IMPLEMENTATION	3.6072339900924146E-7	DESIGN	1.8377963643036807E-7	DEFECT	1.5632906226788021E-7	DOCUMENTATION	7.795227845971195E-8	TEST
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9995774538611226	WITHOUT_CLASSIFICATION	3.5778409176783664E-4	IMPLEMENTATION	4.150567629105329E-5	DESIGN	2.1050333470344993E-5	DEFECT	1.2815040399034253E-6	TEST	9.245333081985314E-7	DOCUMENTATION
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.999997393531486	WITHOUT_CLASSIFICATION	2.3460731517178926E-6	IMPLEMENTATION	1.7420607006036876E-7	DESIGN	4.51214628590128E-8	TEST	2.4159128492310262E-8	DOCUMENTATION	1.6908700820624812E-8	DEFECT
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999927648203886	WITHOUT_CLASSIFICATION	5.524378483290638E-6	IMPLEMENTATION	1.3515185974975134E-6	DESIGN	2.4312931507712424E-7	DEFECT	5.984670599054086E-8	TEST	5.630650958506606E-8	DOCUMENTATION
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999113243857319	WITHOUT_CLASSIFICATION	8.643001584002098E-5	DESIGN	1.1005717749313549E-6	DEFECT	4.591464202229988E-7	DOCUMENTATION	3.590741927120203E-7	IMPLEMENTATION	3.268060400540162E-7	TEST
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999808189192468	WITHOUT_CLASSIFICATION	1.9058269065197432E-5	DESIGN	6.974162458117317E-8	IMPLEMENTATION	4.830849568370535E-8	DEFECT	4.08556032301166E-9	DOCUMENTATION	6.760074545679383E-10	TEST
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9998802533253072	WITHOUT_CLASSIFICATION	7.352048662756366E-5	DESIGN	3.504850667527675E-5	DEFECT	9.926419824122762E-6	IMPLEMENTATION	9.71299393185714E-7	TEST	2.7996217260346573E-7	DOCUMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.7988864819005368	WITHOUT_CLASSIFICATION	0.19533914473571468	DESIGN	0.005762756980485071	IMPLEMENTATION	6.067436974247019E-6	TEST	3.331798798669987E-6	DOCUMENTATION	2.217147490599845E-6	DEFECT
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.5752973798091379	WITHOUT_CLASSIFICATION	0.4206988987348413	DESIGN	0.003996589536311793	IMPLEMENTATION	4.104875464112732E-6	TEST	2.6953180495257203E-6	DOCUMENTATION	3.317261955660487E-7	DEFECT
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.705084720204117	DESIGN	0.27589801933602676	WITHOUT_CLASSIFICATION	0.01870141761946857	IMPLEMENTATION	2.7426933953088095E-4	DEFECT	3.547845988099219E-5	TEST	6.095040975649834E-6	DOCUMENTATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9987313107206826	WITHOUT_CLASSIFICATION	0.0012304917185793224	DESIGN	3.591981641815017E-5	DEFECT	1.2531092037599395E-6	TEST	5.138883372472109E-7	IMPLEMENTATION	5.10746778894168E-7	DOCUMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999964043662886	WITHOUT_CLASSIFICATION	1.4791966733476438E-6	IMPLEMENTATION	1.341017132529496E-6	DESIGN	4.764935886897295E-7	DEFECT	1.7530263780401222E-7	TEST	1.236236791500845E-7	DOCUMENTATION
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999483313882478	WITHOUT_CLASSIFICATION	4.404796961064235E-5	DEFECT	6.203632871906541E-6	DESIGN	1.3284392723679335E-6	IMPLEMENTATION	6.165280400592949E-8	DOCUMENTATION	2.6917193167886484E-8	TEST
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999103737074347	WITHOUT_CLASSIFICATION	7.436045578500306E-5	IMPLEMENTATION	5.853198328850114E-6	DESIGN	4.534609143844294E-6	DEFECT	3.083041914713478E-6	TEST	1.794987392827004E-6	DOCUMENTATION
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.8367373241638697	WITHOUT_CLASSIFICATION	0.12503675139418036	IMPLEMENTATION	0.031138126096944496	DESIGN	0.00505919907355521	TEST	0.001020434543861858	DEFECT	0.0010081647275883418	DOCUMENTATION
//an assertion	WITHOUT_CLASSIFICATION	0.999999394167637	WITHOUT_CLASSIFICATION	2.8421580274336935E-7	TEST	1.385212797609869E-7	DEFECT	7.42312809590431E-8	DESIGN	5.686049399324881E-8	IMPLEMENTATION	5.2003505742290274E-8	DOCUMENTATION
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999901171739274	WITHOUT_CLASSIFICATION	7.879794279547138E-6	DESIGN	1.8369672184093116E-6	IMPLEMENTATION	1.211940156265317E-7	DEFECT	2.4705527937023936E-8	DOCUMENTATION	2.0165031153403492E-8	TEST
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999994069393565	WITHOUT_CLASSIFICATION	4.5214091461348844E-7	DESIGN	1.1710715678638796E-7	IMPLEMENTATION	1.8818264769150622E-8	DOCUMENTATION	4.568680101706107E-9	TEST	4.256271116064732E-10	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999850050311309	WITHOUT_CLASSIFICATION	9.27564061274651E-6	DEFECT	2.6558988846898135E-6	IMPLEMENTATION	2.599881321022196E-6	DESIGN	3.841958802011236E-7	DOCUMENTATION	7.935217052082087E-8	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999850050311309	WITHOUT_CLASSIFICATION	9.27564061274651E-6	DEFECT	2.6558988846898135E-6	IMPLEMENTATION	2.599881321022196E-6	DESIGN	3.841958802011236E-7	DOCUMENTATION	7.935217052082087E-8	TEST
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.999996171610903	WITHOUT_CLASSIFICATION	3.4751497565877524E-6	IMPLEMENTATION	3.421138992166792E-7	DESIGN	7.852497761842909E-9	DOCUMENTATION	2.91990076750943E-9	TEST	3.530427890152461E-10	DEFECT
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999988333384916	WITHOUT_CLASSIFICATION	6.357624695059041E-7	IMPLEMENTATION	5.004743612945547E-7	DESIGN	1.743679270368971E-8	TEST	1.1275433887590444E-8	DOCUMENTATION	1.712450838005826E-9	DEFECT
//==elementType ??	WITHOUT_CLASSIFICATION	0.9983943726404527	WITHOUT_CLASSIFICATION	0.0015763092934469893	DESIGN	1.3609283347719544E-5	IMPLEMENTATION	1.233611159110109E-5	DEFECT	2.5315085096493656E-6	DOCUMENTATION	8.411626518828877E-7	TEST
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999842251750963	WITHOUT_CLASSIFICATION	1.4325038647391506E-5	IMPLEMENTATION	1.4117880884482318E-6	DESIGN	1.560270856979727E-8	DOCUMENTATION	1.2757875253058566E-8	TEST	9.637584268806193E-9	DEFECT
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999786390936649	WITHOUT_CLASSIFICATION	1.2782248144467858E-5	IMPLEMENTATION	8.304579238894902E-6	DESIGN	2.194514986899336E-7	DEFECT	3.544181541219887E-8	TEST	1.9185637495836637E-8	DOCUMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9994781584074858	WITHOUT_CLASSIFICATION	4.7434335017079173E-4	DEFECT	4.4169311448121196E-5	DESIGN	3.114698875863004E-6	IMPLEMENTATION	1.4670269352420287E-7	TEST	6.752932585161773E-8	DOCUMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9976814197294706	WITHOUT_CLASSIFICATION	0.0020636707837626764	DESIGN	2.5139450929747366E-4	DEFECT	2.03449918644277E-6	DOCUMENTATION	9.387865521345706E-7	IMPLEMENTATION	5.41691730762666E-7	TEST
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999994526394639	WITHOUT_CLASSIFICATION	2.893150669337332E-7	IMPLEMENTATION	1.9640155565728331E-7	DESIGN	6.029253294995898E-8	DEFECT	7.365302035862081E-10	DOCUMENTATION	6.148504623484832E-10	TEST
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9997070872383028	WITHOUT_CLASSIFICATION	2.9193681634694595E-4	DESIGN	6.819876602575187E-7	DEFECT	1.8410691606714495E-7	DOCUMENTATION	7.826451655484256E-8	IMPLEMENTATION	3.158625733757127E-8	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999966967516837	WITHOUT_CLASSIFICATION	3.2103418501873065E-6	DESIGN	7.324747158465611E-8	IMPLEMENTATION	1.2653560700882252E-8	DEFECT	5.300199224771321E-9	TEST	1.7052344217880942E-9	DOCUMENTATION
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999542326993162	WITHOUT_CLASSIFICATION	4.4640797240894727E-5	DESIGN	4.5356234573914067E-7	DEFECT	3.060021349319849E-7	IMPLEMENTATION	2.708051903396599E-7	TEST	9.613377198480128E-8	DOCUMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999241766923954	WITHOUT_CLASSIFICATION	5.8501391515718575E-5	IMPLEMENTATION	9.015142784549628E-6	DESIGN	4.554740265382794E-6	DEFECT	2.05509649690686E-6	TEST	1.69693654220158E-6	DOCUMENTATION
//Custom SQL	WITHOUT_CLASSIFICATION	0.9998378604051751	WITHOUT_CLASSIFICATION	1.611830980859917E-4	DESIGN	3.796776774445866E-7	DEFECT	2.9262249240380964E-7	DOCUMENTATION	2.3449257969658967E-7	TEST	4.97039893647904E-8	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999966967516837	WITHOUT_CLASSIFICATION	3.2103418501873065E-6	DESIGN	7.324747158465611E-8	IMPLEMENTATION	1.2653560700882252E-8	DEFECT	5.300199224771321E-9	TEST	1.7052344217880942E-9	DOCUMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999906041352703	WITHOUT_CLASSIFICATION	8.840468133828123E-6	DESIGN	2.1791800266329974E-7	DEFECT	1.8062755879039543E-7	DOCUMENTATION	8.008228488120072E-8	IMPLEMENTATION	7.676874949642938E-8	TEST
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9820851465407743	WITHOUT_CLASSIFICATION	0.01673454033874487	DESIGN	0.0011778010738183755	IMPLEMENTATION	1.8680603538939823E-6	DEFECT	5.270070749751253E-7	TEST	1.1697923360710405E-7	DOCUMENTATION
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.999983207025286	WITHOUT_CLASSIFICATION	8.165271358086355E-6	DEFECT	5.684803176572558E-6	DESIGN	1.981151566723245E-6	IMPLEMENTATION	7.116483692096437E-7	DOCUMENTATION	2.501002435696453E-7	TEST
//TODO: check this....	WITHOUT_CLASSIFICATION	0.620945225032439	DESIGN	0.29763019531336493	IMPLEMENTATION	0.06866021777940236	WITHOUT_CLASSIFICATION	0.00900275519729439	DOCUMENTATION	0.002781160031555098	DEFECT	9.80446645944158E-4	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999241766923954	WITHOUT_CLASSIFICATION	5.8501391515718575E-5	IMPLEMENTATION	9.015142784549628E-6	DESIGN	4.554740265382794E-6	DEFECT	2.05509649690686E-6	TEST	1.69693654220158E-6	DOCUMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999960611484902	WITHOUT_CLASSIFICATION	2.445882044446081E-6	DEFECT	1.2871295919942295E-6	DESIGN	1.6655111875295384E-7	TEST	3.778774865818603E-8	DOCUMENTATION	1.5010058966823501E-9	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999989548629735	WITHOUT_CLASSIFICATION	6.630895526355416E-7	DESIGN	3.7266574033851547E-7	DEFECT	7.739142167650592E-9	IMPLEMENTATION	1.347260071706049E-9	DOCUMENTATION	2.9533125611210836E-10	TEST
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999996508027262	WITHOUT_CLASSIFICATION	2.6750698356147956E-7	DESIGN	7.454640278187949E-8	IMPLEMENTATION	6.630325979342491E-9	DEFECT	3.594515874439918E-10	TEST	1.5411004507625095E-10	DOCUMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999981420880149	WITHOUT_CLASSIFICATION	1.5812455737376588E-6	DEFECT	2.76443860148199E-7	DESIGN	1.906488682657938E-10	DOCUMENTATION	3.186031546309125E-11	TEST	4.207437404376208E-14	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999152793491894	WITHOUT_CLASSIFICATION	6.85389601932278E-5	DESIGN	7.4249901711833565E-6	DEFECT	5.234594006131164E-6	IMPLEMENTATION	2.3670867257147397E-6	DOCUMENTATION	1.1550197142560245E-6	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999985226235292	WITHOUT_CLASSIFICATION	1.426068409251193E-6	DESIGN	3.207140449017021E-8	DEFECT	8.845802417104244E-9	TEST	5.8980971999502795E-9	DOCUMENTATION	4.492757579919519E-9	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999960209981328	WITHOUT_CLASSIFICATION	3.962140784241305E-6	DESIGN	1.5420991068320956E-8	DEFECT	7.820493453616242E-10	DOCUMENTATION	6.116332750399435E-10	TEST	4.6409310914869894E-11	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999911442746103	WITHOUT_CLASSIFICATION	6.2913443182800455E-6	DESIGN	1.2264055226179655E-6	DEFECT	1.0929976187562444E-6	IMPLEMENTATION	1.8301667035193726E-7	DOCUMENTATION	6.196125970104084E-8	TEST
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9995040724897659	WITHOUT_CLASSIFICATION	3.739298231517981E-4	DESIGN	1.1530726822732194E-4	IMPLEMENTATION	3.784589471222716E-6	DEFECT	2.4469838310101283E-6	TEST	4.5884555267379006E-7	DOCUMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999571186586778	WITHOUT_CLASSIFICATION	2.338312386806789E-5	DESIGN	1.8531230868619607E-5	IMPLEMENTATION	4.6026227923298184E-7	TEST	3.790206852272632E-7	DEFECT	1.2770362121289844E-7	DOCUMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9378699753033605	WITHOUT_CLASSIFICATION	0.0507699382767711	DESIGN	0.01131738320511291	DEFECT	2.2578092004508785E-5	DOCUMENTATION	1.9535360875231074E-5	IMPLEMENTATION	5.897618756559575E-7	TEST
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999046393089427	WITHOUT_CLASSIFICATION	4.8139476909007214E-5	IMPLEMENTATION	4.5067631026973046E-5	DESIGN	2.13040792062858E-6	DOCUMENTATION	1.9710948429498442E-8	DEFECT	3.464252366814175E-9	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999966967516837	WITHOUT_CLASSIFICATION	3.2103418501873065E-6	DESIGN	7.324747158465611E-8	IMPLEMENTATION	1.2653560700882252E-8	DEFECT	5.300199224771321E-9	TEST	1.7052344217880942E-9	DOCUMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999960611484902	WITHOUT_CLASSIFICATION	2.445882044446081E-6	DEFECT	1.2871295919942295E-6	DESIGN	1.6655111875295384E-7	TEST	3.778774865818603E-8	DOCUMENTATION	1.5010058966823501E-9	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999996508027262	WITHOUT_CLASSIFICATION	2.6750698356147956E-7	DESIGN	7.454640278187949E-8	IMPLEMENTATION	6.630325979342491E-9	DEFECT	3.594515874439918E-10	TEST	1.5411004507625095E-10	DOCUMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999904253793271	WITHOUT_CLASSIFICATION	8.593592896515546E-6	DESIGN	6.20193330309098E-7	DEFECT	1.6608759828414662E-7	DOCUMENTATION	1.5736139328232256E-7	IMPLEMENTATION	3.7385454668754746E-8	TEST
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9997709363430327	WITHOUT_CLASSIFICATION	1.4688287540040048E-4	DESIGN	8.07604672082657E-5	DEFECT	8.047050527114271E-7	IMPLEMENTATION	4.6048331926208134E-7	TEST	1.5512598668612867E-7	DOCUMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.9999975357414007	WITHOUT_CLASSIFICATION	2.114397587906018E-6	DESIGN	3.2386046170484287E-7	DEFECT	2.120956573671686E-8	DOCUMENTATION	3.036667819069687E-9	TEST	1.7543161078063324E-9	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999241766923954	WITHOUT_CLASSIFICATION	5.8501391515718575E-5	IMPLEMENTATION	9.015142784549628E-6	DESIGN	4.554740265382794E-6	DEFECT	2.05509649690686E-6	TEST	1.69693654220158E-6	DOCUMENTATION
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999803296315743	WITHOUT_CLASSIFICATION	1.9246284841344178E-5	DESIGN	2.0770285668784554E-7	TEST	1.1106235405807939E-7	DEFECT	8.93123987658855E-8	DOCUMENTATION	1.6005974778061615E-8	IMPLEMENTATION
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999997959961227	WITHOUT_CLASSIFICATION	9.197653080855393E-8	DESIGN	4.672189690068117E-8	DEFECT	4.201101249624786E-8	IMPLEMENTATION	1.4612462277655453E-8	DOCUMENTATION	8.68197497251055E-9	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999213472142847	WITHOUT_CLASSIFICATION	6.957300340998403E-5	IMPLEMENTATION	4.699744918712023E-6	DESIGN	2.8756698581405515E-6	DEFECT	1.0244133206724937E-6	DOCUMENTATION	4.799542076307316E-7	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999919467299794	WITHOUT_CLASSIFICATION	4.7593215110574256E-6	DESIGN	2.46615569979673E-6	IMPLEMENTATION	4.2294422713376353E-7	DEFECT	2.717817491027445E-7	DOCUMENTATION	1.3306683353868732E-7	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999911442746103	WITHOUT_CLASSIFICATION	6.2913443182800455E-6	DESIGN	1.2264055226179655E-6	DEFECT	1.0929976187562444E-6	IMPLEMENTATION	1.8301667035193726E-7	DOCUMENTATION	6.196125970104084E-8	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999906041352703	WITHOUT_CLASSIFICATION	8.840468133828123E-6	DESIGN	2.1791800266329974E-7	DEFECT	1.8062755879039543E-7	DOCUMENTATION	8.008228488120072E-8	IMPLEMENTATION	7.676874949642938E-8	TEST
// JOINS	WITHOUT_CLASSIFICATION	0.9999973953874168	WITHOUT_CLASSIFICATION	9.64176002256775E-7	DESIGN	9.338381200292258E-7	DEFECT	5.583429812097195E-7	IMPLEMENTATION	7.822178338493672E-8	TEST	7.003369631689748E-8	DOCUMENTATION
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.99999898529329	WITHOUT_CLASSIFICATION	3.0165756817624266E-7	DEFECT	2.876951850499861E-7	DESIGN	2.4643600531586255E-7	TEST	9.106914745508855E-8	IMPLEMENTATION	8.78488039780746E-8	DOCUMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999006572687903	WITHOUT_CLASSIFICATION	9.877805165159408E-5	DESIGN	3.024950422839585E-7	DEFECT	1.0635027900201819E-7	TEST	9.735596733074048E-8	DOCUMENTATION	5.847826952042443E-8	IMPLEMENTATION
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9988010887863669	WITHOUT_CLASSIFICATION	0.0011972223075716057	DESIGN	7.464413319306365E-7	IMPLEMENTATION	4.886381588949261E-7	TEST	3.1439835522080944E-7	DOCUMENTATION	1.394282154608964E-7	DEFECT
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.939889300959845	WITHOUT_CLASSIFICATION	0.04936501920965208	DESIGN	0.010661462331630659	IMPLEMENTATION	5.49024318453775E-5	DOCUMENTATION	2.7283761953359016E-5	TEST	2.031305073600505E-6	DEFECT
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9987912933728464	WITHOUT_CLASSIFICATION	9.260125824216519E-4	DESIGN	2.6775097910031637E-4	IMPLEMENTATION	1.0886585473407638E-5	DOCUMENTATION	3.828654202963091E-6	TEST	2.2782595516739326E-7	DEFECT
//render the SQL	WITHOUT_CLASSIFICATION	0.9990247666045337	WITHOUT_CLASSIFICATION	9.287434577647874E-4	DESIGN	3.1514166817636334E-5	DEFECT	8.384073941060278E-6	IMPLEMENTATION	4.726508762405364E-6	DOCUMENTATION	1.8651881803567007E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989539923393	WITHOUT_CLASSIFICATION	9.903400128685437E-7	DESIGN	2.6847494538336303E-8	IMPLEMENTATION	1.816157639649228E-8	TEST	7.81716300137879E-9	DEFECT	2.841413912782764E-9	DOCUMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999548101799833	WITHOUT_CLASSIFICATION	4.515147049999819E-5	DESIGN	1.8032653062682184E-8	IMPLEMENTATION	1.0130774103953069E-8	DEFECT	5.892639360172759E-9	TEST	4.293450141144539E-9	DOCUMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974649728554	WITHOUT_CLASSIFICATION	9.131883142769499E-7	IMPLEMENTATION	7.301641402987181E-7	DEFECT	6.323252616848598E-7	DESIGN	1.3817016678606893E-7	DOCUMENTATION	1.2117926145345694E-7	TEST
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.999999618342833	WITHOUT_CLASSIFICATION	3.6223772003230206E-7	DESIGN	1.5167312460331973E-8	IMPLEMENTATION	1.8431879508756287E-9	DOCUMENTATION	1.4565765002726036E-9	DEFECT	9.523701261819734E-10	TEST
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.999488001655221	WITHOUT_CLASSIFICATION	3.471966003200307E-4	DESIGN	1.5115984448878093E-4	DEFECT	1.0138965259438648E-5	TEST	3.394042114501036E-6	DOCUMENTATION	1.0889259630742433E-7	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999994902252541	WITHOUT_CLASSIFICATION	2.8044531404333537E-7	DESIGN	2.135220375253722E-7	DEFECT	1.2948150400219947E-8	DOCUMENTATION	2.400325327449799E-9	TEST	4.5891845550489595E-10	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999998205665	WITHOUT_CLASSIFICATION	1.1026517760947376E-7	DESIGN	5.272989918150716E-8	DEFECT	1.137603583809118E-8	IMPLEMENTATION	4.561544539817047E-9	DOCUMENTATION	5.008429018616515E-10	TEST
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999992718802798	WITHOUT_CLASSIFICATION	5.298981868013077E-7	DESIGN	1.9642339895203753E-7	DEFECT	1.1624086658471794E-9	DOCUMENTATION	4.147155234728039E-10	TEST	2.2101008284965136E-10	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.9999980813389087	WITHOUT_CLASSIFICATION	1.5136535434421206E-6	DESIGN	2.6507403012510977E-7	DEFECT	9.923549682782834E-8	IMPLEMENTATION	2.520163734083625E-8	DOCUMENTATION	1.549638362873676E-8	TEST
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999998016384386	WITHOUT_CLASSIFICATION	1.587358676152515E-7	DESIGN	2.6418389968354516E-8	IMPLEMENTATION	1.0898719173702342E-8	DEFECT	1.7458132884675567E-9	DOCUMENTATION	5.627713643757636E-10	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999919467299794	WITHOUT_CLASSIFICATION	4.7593215110574256E-6	DESIGN	2.46615569979673E-6	IMPLEMENTATION	4.2294422713376353E-7	DEFECT	2.717817491027445E-7	DOCUMENTATION	1.3306683353868732E-7	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974649728554	WITHOUT_CLASSIFICATION	9.131883142769499E-7	IMPLEMENTATION	7.301641402987181E-7	DEFECT	6.323252616848598E-7	DESIGN	1.3817016678606893E-7	DOCUMENTATION	1.2117926145345694E-7	TEST
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.99999584917506	WITHOUT_CLASSIFICATION	3.4285995507551065E-6	IMPLEMENTATION	3.534328673512155E-7	DESIGN	2.354432412779128E-7	DEFECT	7.861693616871594E-8	TEST	5.47323444629204E-8	DOCUMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.9999992682491587	WITHOUT_CLASSIFICATION	3.896620244472619E-7	DESIGN	1.784523008429811E-7	DEFECT	1.0921815621157958E-7	IMPLEMENTATION	3.011741695549082E-8	TEST	2.4300942725430097E-8	DOCUMENTATION
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999901388832668	WITHOUT_CLASSIFICATION	5.312679910993299E-6	IMPLEMENTATION	3.527552366615341E-6	DESIGN	4.074966448950553E-7	DOCUMENTATION	3.865595318176253E-7	DEFECT	2.2682827892820337E-7	TEST
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999970035172173	WITHOUT_CLASSIFICATION	2.4908200897672834E-6	DESIGN	1.8687675456626124E-7	IMPLEMENTATION	1.3875611804370397E-7	DEFECT	1.3791290586103017E-7	DOCUMENTATION	4.2116914453751406E-8	TEST
//before add :-)	WITHOUT_CLASSIFICATION	0.9947793578049902	WITHOUT_CLASSIFICATION	0.004430179701511301	DESIGN	6.985045909982103E-4	IMPLEMENTATION	5.588847299992533E-5	DEFECT	2.9974134955351234E-5	DOCUMENTATION	6.09529454497837E-6	TEST
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9957833331465216	WITHOUT_CLASSIFICATION	0.004210718112307325	DESIGN	5.638466368617847E-6	IMPLEMENTATION	1.2092517407056925E-7	DOCUMENTATION	1.0927886538348437E-7	DEFECT	8.00707630304507E-8	TEST
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.999995113191561	WITHOUT_CLASSIFICATION	2.7788716330782727E-6	DEFECT	1.9121714048763434E-6	DESIGN	1.2681863355817776E-7	IMPLEMENTATION	4.929960842129738E-8	TEST	1.9647159100953858E-8	DOCUMENTATION
//note early exit here:	WITHOUT_CLASSIFICATION	0.9988681315948507	WITHOUT_CLASSIFICATION	8.336385302149314E-4	DESIGN	2.1169601560520253E-4	DEFECT	5.835916182385633E-5	IMPLEMENTATION	2.1607168056886402E-5	TEST	6.567529448445387E-6	DOCUMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999932008924887	WITHOUT_CLASSIFICATION	5.539739260758005E-6	DESIGN	9.660740694732255E-7	DEFECT	2.472316295774115E-7	IMPLEMENTATION	2.644425928423805E-8	DOCUMENTATION	1.9618292194669375E-8	TEST
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9915402666330367	WITHOUT_CLASSIFICATION	0.004731181739002916	DESIGN	0.0023255495930692297	TEST	0.0013971343626007207	DEFECT	2.9393712641431614E-6	IMPLEMENTATION	2.9283010262308954E-6	DOCUMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999977507441286	WITHOUT_CLASSIFICATION	1.1744037404357203E-6	DESIGN	5.685772398205142E-7	IMPLEMENTATION	2.754576134851869E-7	DEFECT	1.569028096892471E-7	TEST	7.391446800793207E-8	DOCUMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999788152211955	WITHOUT_CLASSIFICATION	1.76888941598288E-5	DEFECT	3.2613645003322214E-6	DESIGN	2.0427680968106046E-7	TEST	2.075965735395944E-8	IMPLEMENTATION	9.483677353536804E-9	DOCUMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9933568063649078	WITHOUT_CLASSIFICATION	0.005512304671273303	DESIGN	0.0011166001349509202	IMPLEMENTATION	7.485627884151785E-6	TEST	6.1433362388709486E-6	DEFECT	6.598647450741916E-7	DOCUMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999532057613433	WITHOUT_CLASSIFICATION	2.2088416819082494E-5	DESIGN	1.2917382055227246E-5	DEFECT	1.118649482961699E-5	IMPLEMENTATION	3.416251315321681E-7	DOCUMENTATION	2.6031982134191557E-7	TEST
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9998426012418637	WITHOUT_CLASSIFICATION	1.5727895713519928E-4	DESIGN	1.0567079948241384E-7	DOCUMENTATION	1.0271883235469409E-8	DEFECT	2.3328068194734758E-9	IMPLEMENTATION	1.5255115366109294E-9	TEST
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999920312486942	WITHOUT_CLASSIFICATION	7.964496862884878E-6	DESIGN	2.4227072976447237E-9	DOCUMENTATION	1.0891398058650492E-9	TEST	4.824856126436007E-10	DEFECT	2.6011024037059354E-10	IMPLEMENTATION
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.8862741825524422	WITHOUT_CLASSIFICATION	0.1136958705112569	DESIGN	1.4180739348446718E-5	DEFECT	1.3735776433360029E-5	IMPLEMENTATION	1.932892996567569E-6	DOCUMENTATION	9.75275227305339E-8	TEST
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999981407529538	WITHOUT_CLASSIFICATION	1.5973280340555651E-6	DESIGN	2.1833366809704736E-7	DOCUMENTATION	2.401274848889963E-8	DEFECT	1.8259491224136633E-8	IMPLEMENTATION	1.3131042819408515E-9	TEST
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999967590321744	WITHOUT_CLASSIFICATION	2.8235500616714214E-6	DESIGN	2.3030404806898605E-7	IMPLEMENTATION	6.566758466296051E-8	DEFECT	6.243021232090728E-8	DOCUMENTATION	5.901591880769361E-8	TEST
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9965073187630661	WITHOUT_CLASSIFICATION	0.0034874374137254223	DESIGN	2.4848263177914955E-6	DOCUMENTATION	1.648276706766374E-6	DEFECT	7.883672607687679E-7	TEST	3.2235292330957544E-7	IMPLEMENTATION
// ALIASES	WITHOUT_CLASSIFICATION	0.9999950920111929	WITHOUT_CLASSIFICATION	2.7528722283500317E-6	DESIGN	1.7794782627972958E-6	DEFECT	2.5628722254193783E-7	IMPLEMENTATION	8.237607454532804E-8	DOCUMENTATION	3.6975018976362515E-8	TEST
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999893467379658	WITHOUT_CLASSIFICATION	1.0448897360264676E-5	DESIGN	1.7988115972366322E-7	IMPLEMENTATION	1.569000294340674E-8	TEST	5.372170180346542E-9	DOCUMENTATION	3.4213411537957028E-9	DEFECT
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999999849500271	WITHOUT_CLASSIFICATION	1.0364531947479782E-8	DESIGN	2.2524905938617443E-9	IMPLEMENTATION	1.3371352943188056E-9	DEFECT	9.076190523583254E-10	TEST	1.8819606750350579E-10	DOCUMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999903322702	WITHOUT_CLASSIFICATION	9.170803645977461E-9	DESIGN	4.4600127811256376E-10	DEFECT	3.36872256415223E-11	TEST	1.5711519790062196E-11	DOCUMENTATION	1.526382360633291E-12	IMPLEMENTATION
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.999999951129437	WITHOUT_CLASSIFICATION	4.103133764045258E-8	DESIGN	4.3455256375804645E-9	IMPLEMENTATION	2.929727485076078E-9	DEFECT	3.539387985666423E-10	TEST	2.100334178188398E-10	DOCUMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.7931332088254798	IMPLEMENTATION	0.12007652005543197	DESIGN	0.07630228514353878	WITHOUT_CLASSIFICATION	0.0052081154873130295	DEFECT	0.0046636601800704326	DOCUMENTATION	6.162103081660141E-4	TEST
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999864829634871	WITHOUT_CLASSIFICATION	8.27019760093685E-6	DESIGN	4.3300552016503255E-6	IMPLEMENTATION	4.5217748792247527E-7	TEST	2.690949168649636E-7	DEFECT	1.955113053889911E-7	DOCUMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999983550694178	WITHOUT_CLASSIFICATION	1.1791000494397051E-6	DEFECT	2.015549686121279E-7	TEST	1.8458223553481812E-7	IMPLEMENTATION	4.087442377314513E-8	DOCUMENTATION	3.8818904787365505E-8	DESIGN
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999848389408468	WITHOUT_CLASSIFICATION	8.387225644118715E-6	DESIGN	6.651770571726157E-6	DEFECT	6.997686080362108E-8	IMPLEMENTATION	4.7009830684681865E-8	TEST	5.0762458832883585E-9	DOCUMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.632325430136251	IMPLEMENTATION	0.3475886898733106	WITHOUT_CLASSIFICATION	0.014990473172873359	DESIGN	0.004416589634110083	DEFECT	5.012555679005E-4	DOCUMENTATION	1.7756161555455494E-4	TEST
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999419104433237	WITHOUT_CLASSIFICATION	4.39592781722284E-5	DEFECT	1.39202507518923E-5	DESIGN	1.0092896503799288E-7	TEST	8.490250710701675E-8	DOCUMENTATION	2.4196279977813683E-8	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9997985701170484	WITHOUT_CLASSIFICATION	1.2536162147549552E-4	DEFECT	6.961667676745679E-5	DESIGN	3.93343018804409E-6	TEST	2.043607583470446E-6	DOCUMENTATION	4.745469372404227E-7	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999258961449302	WITHOUT_CLASSIFICATION	6.5632749475243E-5	DEFECT	8.026543445971903E-6	DESIGN	2.232796229962237E-7	IMPLEMENTATION	1.6946433840000628E-7	DOCUMENTATION	5.181818724296286E-8	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9970917469113044	WITHOUT_CLASSIFICATION	0.002898740258711677	DESIGN	7.434640820765841E-6	TEST	1.3184995530500827E-6	DEFECT	7.077951295758299E-7	IMPLEMENTATION	5.18944806743168E-8	DOCUMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9998998103723676	WITHOUT_CLASSIFICATION	9.382823877617709E-5	DESIGN	6.3212075900348905E-6	DEFECT	3.822327245961118E-8	TEST	1.9054785037451337E-9	DOCUMENTATION	5.251521862253936E-11	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999999292028787	WITHOUT_CLASSIFICATION	2.1413144176855686E-8	IMPLEMENTATION	2.118354210386163E-8	DESIGN	1.5275414872833623E-8	DEFECT	1.202965807303662E-8	DOCUMENTATION	8.953621349589665E-10	TEST
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999769074580984	WITHOUT_CLASSIFICATION	2.2943821537409672E-5	DESIGN	1.300937923167731E-7	DOCUMENTATION	6.543482993762457E-9	DEFECT	6.488378938511177E-9	TEST	5.594709776642261E-9	IMPLEMENTATION
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.55846784472615	WITHOUT_CLASSIFICATION	0.4414892328469129	DESIGN	3.831690310199862E-5	DEFECT	2.3528867757244846E-6	DOCUMENTATION	2.1686728420422683E-6	TEST	8.396421732378665E-8	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999999292028787	WITHOUT_CLASSIFICATION	2.1413144176855686E-8	IMPLEMENTATION	2.118354210386163E-8	DESIGN	1.5275414872833623E-8	DEFECT	1.202965807303662E-8	DOCUMENTATION	8.953621349589665E-10	TEST
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9998998103723676	WITHOUT_CLASSIFICATION	9.382823877617709E-5	DESIGN	6.3212075900348905E-6	DEFECT	3.822327245961118E-8	TEST	1.9054785037451337E-9	DOCUMENTATION	5.251521862253936E-11	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999769074580984	WITHOUT_CLASSIFICATION	2.2943821537409672E-5	DESIGN	1.300937923167731E-7	DOCUMENTATION	6.543482993762457E-9	DEFECT	6.488378938511177E-9	TEST	5.594709776642261E-9	IMPLEMENTATION
// add the primary key	WITHOUT_CLASSIFICATION	0.9999813487801988	WITHOUT_CLASSIFICATION	1.7489518854425212E-5	DESIGN	7.022909325541302E-7	IMPLEMENTATION	3.571434640028342E-7	DOCUMENTATION	5.390513555873746E-8	DEFECT	4.8361414588904605E-8	TEST
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999977369603664	WITHOUT_CLASSIFICATION	1.7973347100382654E-6	DESIGN	3.69891873123263E-7	IMPLEMENTATION	6.552578717237683E-8	DEFECT	1.8286781109069928E-8	DOCUMENTATION	1.2000482101042156E-8	TEST
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999985540421794	WITHOUT_CLASSIFICATION	1.4179922779657764E-6	DEFECT	2.7082844843796654E-8	DESIGN	8.408115467638196E-10	TEST	3.1883510791411605E-11	DOCUMENTATION	1.000253491670178E-11	IMPLEMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9980875491573141	WITHOUT_CLASSIFICATION	0.0018800754862456147	DESIGN	2.9912868687095094E-5	DEFECT	1.257945731153247E-6	DOCUMENTATION	7.327600591836091E-7	IMPLEMENTATION	4.717819627655182E-7	TEST
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9997736675256224	WITHOUT_CLASSIFICATION	1.8740158442951638E-4	DEFECT	3.877904747568653E-5	DESIGN	1.1394323432372055E-7	DOCUMENTATION	2.55592281125403E-8	TEST	1.2340010134219534E-8	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9573823551682558	DESIGN	0.03388242840146109	IMPLEMENTATION	0.008553209122918216	DEFECT	8.493080069517782E-5	WITHOUT_CLASSIFICATION	7.991053544809001E-5	TEST	1.7165971221583252E-5	DOCUMENTATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.6942913725406159	WITHOUT_CLASSIFICATION	0.3003981451183384	DESIGN	0.004995063458815526	DEFECT	2.560838011416295E-4	IMPLEMENTATION	5.541433099400123E-5	TEST	3.920750094517829E-6	DOCUMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.999502885543302	WITHOUT_CLASSIFICATION	4.4044414537855827E-4	IMPLEMENTATION	4.252226024170586E-5	DESIGN	1.1756750197490594E-5	DEFECT	1.6137018379599796E-6	TEST	7.775990422988313E-7	DOCUMENTATION
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9993998515969663	WITHOUT_CLASSIFICATION	6.001230637503219E-4	DESIGN	1.7900354585095518E-8	IMPLEMENTATION	5.001178538098655E-9	TEST	1.3994691241714864E-9	DOCUMENTATION	1.0382811455098492E-9	DEFECT
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999958855541561	WITHOUT_CLASSIFICATION	3.4078843205417787E-6	DEFECT	6.675962529429133E-7	DESIGN	2.6443853844434023E-8	TEST	6.276786163204158E-9	DOCUMENTATION	6.244630414737458E-9	IMPLEMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.9999917136074974	WITHOUT_CLASSIFICATION	4.848353994072487E-6	DEFECT	1.94287194539897E-6	IMPLEMENTATION	1.3001984524874234E-6	DESIGN	1.128068576348882E-7	DOCUMENTATION	8.216125292203589E-8	TEST
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9998616752281111	WITHOUT_CLASSIFICATION	1.0359032434625109E-4	DESIGN	2.373380557071068E-5	IMPLEMENTATION	7.82896696391665E-6	DEFECT	2.9547607507185793E-6	TEST	2.1691425737750333E-7	DOCUMENTATION
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9998854057324863	WITHOUT_CLASSIFICATION	6.595114837897623E-5	DEFECT	3.26405411437534E-5	DESIGN	1.5575343032351177E-5	IMPLEMENTATION	3.4824567555909134E-7	DOCUMENTATION	7.898928310262512E-8	TEST
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9987380429991555	WITHOUT_CLASSIFICATION	0.0012489377400632714	DESIGN	9.260004530456123E-6	DEFECT	2.3575575495825373E-6	DOCUMENTATION	8.459233272924896E-7	TEST	5.557753740875555E-7	IMPLEMENTATION
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999817010100305	WITHOUT_CLASSIFICATION	1.075199896770942E-5	IMPLEMENTATION	7.196582655026904E-6	DEFECT	1.7407791065973702E-7	DOCUMENTATION	1.7019016579921932E-7	DESIGN	6.140270304701408E-9	TEST
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999996837510915	WITHOUT_CLASSIFICATION	1.6664751951706798E-7	DESIGN	1.3661313687341945E-7	DEFECT	9.137058585900369E-9	IMPLEMENTATION	2.091305337491454E-9	DOCUMENTATION	1.7598882319200512E-9	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999960789358532	WITHOUT_CLASSIFICATION	3.0763261681145355E-6	DESIGN	8.386117274430916E-7	DEFECT	3.755558835536261E-9	TEST	2.2557399088469563E-9	DOCUMENTATION	1.149524748959199E-10	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999984825297105	WITHOUT_CLASSIFICATION	1.376003625418631E-6	DESIGN	1.3462584870661E-7	DEFECT	6.436767945987119E-9	IMPLEMENTATION	3.474790048420158E-10	TEST	5.6568438512047373E-11	DOCUMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9994148056557052	WITHOUT_CLASSIFICATION	5.849502902026789E-4	DESIGN	2.3660360365971877E-7	DEFECT	4.576972368510517E-9	TEST	2.8723249080574056E-9	DOCUMENTATION	1.1911714546936909E-12	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999999383228723	WITHOUT_CLASSIFICATION	2.3195317398855932E-8	DESIGN	1.6627123273857306E-8	IMPLEMENTATION	1.4777072496767241E-8	DOCUMENTATION	5.3107882638265596E-9	TEST	1.7668262638025752E-9	DEFECT
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.4040569296538769	WITHOUT_CLASSIFICATION	0.3357492560653837	IMPLEMENTATION	0.2558513462421245	DESIGN	0.004088190770793069	DEFECT	1.450479103246665E-4	DOCUMENTATION	1.092293574971464E-4	TEST
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999968838039	WITHOUT_CLASSIFICATION	1.9835722427000375E-9	DESIGN	5.631349685847315E-10	DEFECT	2.87654262839068E-10	DOCUMENTATION	2.7660093176686194E-10	IMPLEMENTATION	5.23348289742146E-12	TEST
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9998994666612052	WITHOUT_CLASSIFICATION	6.410460573971243E-5	DEFECT	3.2976929617735455E-5	DESIGN	2.3241824145799356E-6	TEST	7.821983417037826E-7	IMPLEMENTATION	3.4542268101884465E-7	DOCUMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999999153338728	WITHOUT_CLASSIFICATION	8.010958152277E-8	DESIGN	3.391618915410793E-9	IMPLEMENTATION	6.65000618426127E-10	TEST	2.6528084938649637E-10	DEFECT	2.34645243401132E-10	DOCUMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999153619863	WITHOUT_CLASSIFICATION	4.877096219596956E-8	DESIGN	1.6220975084095895E-8	TEST	1.4641116556001371E-8	DOCUMENTATION	4.282853674891701E-9	IMPLEMENTATION	7.221063185434761E-10	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999153619863	WITHOUT_CLASSIFICATION	4.877096219596956E-8	DESIGN	1.6220975084095895E-8	TEST	1.4641116556001371E-8	DOCUMENTATION	4.282853674891701E-9	IMPLEMENTATION	7.221063185434761E-10	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999959531896	WITHOUT_CLASSIFICATION	3.4535171024335403E-9	DESIGN	4.3173284215164686E-10	DEFECT	1.2536715020015018E-10	DOCUMENTATION	2.1287776495780763E-11	IMPLEMENTATION	1.490558490433298E-11	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999959531896	WITHOUT_CLASSIFICATION	3.4535171024335403E-9	DESIGN	4.3173284215164686E-10	DEFECT	1.2536715020015018E-10	DOCUMENTATION	2.1287776495780763E-11	IMPLEMENTATION	1.490558490433298E-11	TEST
// not supported	WITHOUT_CLASSIFICATION	0.9938236509283349	WITHOUT_CLASSIFICATION	0.0047083137920304234	IMPLEMENTATION	0.0014310580820356522	DESIGN	3.015335102045057E-5	DEFECT	4.307006459003578E-6	TEST	2.516840119584556E-6	DOCUMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999960789358532	WITHOUT_CLASSIFICATION	3.0763261681145355E-6	DESIGN	8.386117274430916E-7	DEFECT	3.755558835536261E-9	TEST	2.2557399088469563E-9	DOCUMENTATION	1.149524748959199E-10	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999853801661581	WITHOUT_CLASSIFICATION	1.3369594783452635E-5	DESIGN	8.186966625224658E-7	DOCUMENTATION	3.7402297712399166E-7	IMPLEMENTATION	3.5776353823236065E-8	DEFECT	2.1743064843843516E-8	TEST
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999979693765952	WITHOUT_CLASSIFICATION	1.0578184901372736E-6	IMPLEMENTATION	9.704079557288609E-7	DESIGN	1.38760720410289E-9	DOCUMENTATION	6.694528921280869E-10	TEST	3.398989350559962E-10	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999422910624365	WITHOUT_CLASSIFICATION	5.300327610363168E-5	DESIGN	2.244872163808846E-6	DOCUMENTATION	2.0478750374830166E-6	IMPLEMENTATION	2.5363283891554796E-7	DEFECT	1.5928141976158796E-7	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999422910624365	WITHOUT_CLASSIFICATION	5.300327610363168E-5	DESIGN	2.244872163808846E-6	DOCUMENTATION	2.0478750374830166E-6	IMPLEMENTATION	2.5363283891554796E-7	DEFECT	1.5928141976158796E-7	TEST
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.999997873255593	WITHOUT_CLASSIFICATION	1.135880265910596E-6	IMPLEMENTATION	7.635392480583899E-7	DESIGN	1.8165674721405913E-7	DEFECT	3.947217014047074E-8	DOCUMENTATION	6.195975683559334E-9	TEST
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.999998427701525	WITHOUT_CLASSIFICATION	7.516140648393621E-7	IMPLEMENTATION	7.144405264281539E-7	DESIGN	7.363308825771426E-8	DEFECT	2.8615587121455502E-8	TEST	3.995208446870311E-9	DOCUMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9997145182228055	WITHOUT_CLASSIFICATION	2.8548075220748137E-4	DESIGN	6.586582809792311E-10	DEFECT	2.9963523779037373E-10	DOCUMENTATION	4.334169585659007E-11	IMPLEMENTATION	2.3351837378749613E-11	TEST
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999926426724323	WITHOUT_CLASSIFICATION	4.443986313977385E-6	IMPLEMENTATION	2.472539686041819E-6	DESIGN	2.2395754870765519E-7	DEFECT	1.3790408154084834E-7	TEST	7.893993748627358E-8	DOCUMENTATION
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9403909094677482	WITHOUT_CLASSIFICATION	0.056414712679969524	DESIGN	0.0030443712271140777	DEFECT	1.4367592730777547E-4	IMPLEMENTATION	4.423695294244065E-6	DOCUMENTATION	1.9070025661405762E-6	TEST
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.992605776033717	WITHOUT_CLASSIFICATION	0.007294169061103531	DEFECT	1.0000988978666499E-4	DESIGN	3.402225198432997E-8	IMPLEMENTATION	8.397376445262052E-9	DOCUMENTATION	2.595764319750534E-9	TEST
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9996706964375431	WITHOUT_CLASSIFICATION	3.1013916987501804E-4	DESIGN	1.2561926356894178E-5	DEFECT	4.0614765588872804E-6	TEST	1.4865646437928252E-6	DOCUMENTATION	1.054425022143986E-6	IMPLEMENTATION
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.971609136558323	WITHOUT_CLASSIFICATION	0.028368260129469292	DESIGN	1.5903805321512387E-5	DEFECT	6.2126076043451E-6	IMPLEMENTATION	4.1377268117337E-7	TEST	7.312660060219881E-8	DOCUMENTATION
//now render the joins	WITHOUT_CLASSIFICATION	0.9994327234939474	WITHOUT_CLASSIFICATION	5.296244662832892E-4	DESIGN	2.209788829375286E-5	DEFECT	1.1819068073997675E-5	IMPLEMENTATION	3.148802926333311E-6	DOCUMENTATION	5.862804752829016E-7	TEST
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999945702960983	WITHOUT_CLASSIFICATION	3.2505079138500465E-6	DESIGN	1.8921206750407016E-6	IMPLEMENTATION	1.763121928816913E-7	DEFECT	9.64061024813984E-8	DOCUMENTATION	1.4357017504602188E-8	TEST
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999990653195252	WITHOUT_CLASSIFICATION	5.29567466777649E-7	DESIGN	2.763329650660232E-7	DEFECT	1.1424471658811077E-7	IMPLEMENTATION	1.0726699342127985E-8	DOCUMENTATION	3.80862710487768E-9	TEST
//now tie it all together	WITHOUT_CLASSIFICATION	0.999975666345602	WITHOUT_CLASSIFICATION	1.3998198591662809E-5	DESIGN	1.0247719858358161E-5	IMPLEMENTATION	3.256526393002705E-8	DEFECT	3.2295586320411885E-8	TEST	2.28750977837725E-8	DOCUMENTATION
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999977597446136	WITHOUT_CLASSIFICATION	1.939847814098747E-6	DESIGN	2.5910000715694124E-7	DEFECT	1.8755652778302958E-8	IMPLEMENTATION	1.1887239088496542E-8	DOCUMENTATION	1.066467334356772E-8	TEST
//select SQL	WITHOUT_CLASSIFICATION	0.9999801716003485	WITHOUT_CLASSIFICATION	1.808742333004427E-5	DESIGN	8.749045678243199E-7	IMPLEMENTATION	5.66476104246971E-7	DEFECT	1.600224149694485E-7	TEST	1.395732344229147E-7	DOCUMENTATION
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9988737139349676	WITHOUT_CLASSIFICATION	8.137371619783312E-4	DESIGN	3.045496220691063E-4	IMPLEMENTATION	3.192392406290739E-6	DOCUMENTATION	2.731561660861478E-6	TEST	2.075326917928989E-6	DEFECT
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999832357834224	WITHOUT_CLASSIFICATION	1.6358960433928153E-5	DESIGN	1.8500971177093161E-7	IMPLEMENTATION	1.041260067265025E-7	TEST	7.78154385196208E-8	DEFECT	3.830498659667314E-8	DOCUMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996013418496024	WITHOUT_CLASSIFICATION	3.969436523862583E-4	DESIGN	9.332612849715298E-7	DEFECT	3.2415279560305313E-7	IMPLEMENTATION	3.213415156785321E-7	TEST	1.3574241517999714E-7	DOCUMENTATION
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999921295369701	WITHOUT_CLASSIFICATION	7.792684463036795E-6	DESIGN	5.571818369993179E-8	IMPLEMENTATION	1.5630964182484783E-8	DEFECT	5.273911453560788E-9	DOCUMENTATION	1.15550747282489E-9	TEST
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999584653932542	WITHOUT_CLASSIFICATION	4.1018040538866425E-5	DESIGN	2.6241714117933783E-7	DEFECT	2.4377380076156646E-7	IMPLEMENTATION	8.137767977292177E-9	TEST	2.237497183994219E-9	DOCUMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999999198466386	WITHOUT_CLASSIFICATION	3.847229318715718E-8	DEFECT	2.743193971279827E-8	IMPLEMENTATION	1.3602064481574356E-8	DESIGN	5.694167860084417E-10	TEST	7.764724439769338E-11	DOCUMENTATION
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999925273202583	WITHOUT_CLASSIFICATION	5.903415335215451E-6	IMPLEMENTATION	1.2204390905345292E-6	DESIGN	3.3341575305290597E-7	DEFECT	1.4154962068233308E-8	DOCUMENTATION	1.2546009150818702E-9	TEST
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999999731247603	WITHOUT_CLASSIFICATION	1.7382540528232394E-8	DEFECT	6.39502759468821E-9	TEST	2.1847276946260026E-9	DESIGN	6.903468242620928E-10	IMPLEMENTATION	2.2259692935700804E-10	DOCUMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999964910946924	WITHOUT_CLASSIFICATION	1.4914797051749642E-6	IMPLEMENTATION	1.432933072991851E-6	DESIGN	4.745008831499557E-7	DEFECT	1.0284529162261187E-7	DOCUMENTATION	7.146354660104259E-9	TEST
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.999997565223275	WITHOUT_CLASSIFICATION	2.3906655341431163E-6	DESIGN	2.4727952480130878E-8	DEFECT	1.3619837046795271E-8	IMPLEMENTATION	5.271892745650745E-9	DOCUMENTATION	4.915085949166859E-10	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998842934233458	WITHOUT_CLASSIFICATION	9.633663503300624E-5	DESIGN	9.417321590089839E-6	IMPLEMENTATION	3.950573628984673E-6	TEST	3.25607236120705E-6	DOCUMENTATION	2.745974040821917E-6	DEFECT
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999998881191323	WITHOUT_CLASSIFICATION	5.3758643297343346E-8	IMPLEMENTATION	4.699335277720268E-8	DEFECT	6.138654950292613E-9	DESIGN	3.5329102553761368E-9	DOCUMENTATION	1.4573065127114101E-9	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974649728554	WITHOUT_CLASSIFICATION	9.131883142769499E-7	IMPLEMENTATION	7.301641402987181E-7	DEFECT	6.323252616848598E-7	DESIGN	1.3817016678606893E-7	DOCUMENTATION	1.2117926145345694E-7	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999788152211955	WITHOUT_CLASSIFICATION	1.76888941598288E-5	DEFECT	3.2613645003322214E-6	DESIGN	2.0427680968106046E-7	TEST	2.075965735395944E-8	IMPLEMENTATION	9.483677353536804E-9	DOCUMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999992119815454	WITHOUT_CLASSIFICATION	6.410557609540176E-7	DEFECT	1.037602120934788E-7	DESIGN	2.9040571747996135E-8	DOCUMENTATION	1.126125554367574E-8	TEST	2.90065425835798E-9	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999921121640439	WITHOUT_CLASSIFICATION	7.3378758127868585E-6	DEFECT	3.7787806465881197E-7	DESIGN	9.253586843320805E-8	IMPLEMENTATION	7.235060607364799E-8	TEST	7.195604221963362E-9	DOCUMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999856515335072	WITHOUT_CLASSIFICATION	1.3440408973099073E-5	DESIGN	4.228162096335782E-7	IMPLEMENTATION	2.970601577235085E-7	DEFECT	1.0050503174197415E-7	DOCUMENTATION	8.767612061954984E-8	TEST
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999914556917818	WITHOUT_CLASSIFICATION	6.394197236614355E-6	IMPLEMENTATION	1.728260344145844E-6	DEFECT	3.7504972457177055E-7	DESIGN	2.3484678136219562E-8	TEST	2.3316234551150436E-8	DOCUMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9996319314621325	WITHOUT_CLASSIFICATION	3.631549400681913E-4	DESIGN	3.540322732435302E-6	DEFECT	9.871880476118293E-7	DOCUMENTATION	2.2927790095509988E-7	IMPLEMENTATION	1.5680911837084692E-7	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9996319314621325	WITHOUT_CLASSIFICATION	3.631549400681913E-4	DESIGN	3.540322732435302E-6	DEFECT	9.871880476118293E-7	DOCUMENTATION	2.2927790095509988E-7	IMPLEMENTATION	1.5680911837084692E-7	TEST
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999968775544917	WITHOUT_CLASSIFICATION	2.966021880749369E-6	DESIGN	1.517007707534976E-7	DEFECT	2.7664578642412767E-9	TEST	1.5932941067399874E-9	IMPLEMENTATION	3.6310463771784876E-10	DOCUMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.9999959212633327	WITHOUT_CLASSIFICATION	1.72006843051319E-6	DEFECT	1.4313359351572006E-6	DESIGN	8.532770338633246E-7	IMPLEMENTATION	4.1683215454052973E-8	DOCUMENTATION	3.2372052217075794E-8	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9997391402421186	WITHOUT_CLASSIFICATION	1.918445174994355E-4	DESIGN	6.577472508935665E-5	DEFECT	1.7907435882763117E-6	DOCUMENTATION	9.591020209648141E-7	IMPLEMENTATION	4.906696833700807E-7	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9997391402421186	WITHOUT_CLASSIFICATION	1.918445174994355E-4	DESIGN	6.577472508935665E-5	DEFECT	1.7907435882763117E-6	DOCUMENTATION	9.591020209648141E-7	IMPLEMENTATION	4.906696833700807E-7	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.999979508858236	WITHOUT_CLASSIFICATION	1.6757604961306868E-5	DESIGN	3.626404060538455E-6	DEFECT	4.9077652221288204E-8	IMPLEMENTATION	3.505717855202472E-8	TEST	2.299791131270404E-8	DOCUMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9998788581440298	WITHOUT_CLASSIFICATION	1.1179512411081061E-4	DESIGN	5.163420451712677E-6	IMPLEMENTATION	2.3921464998132966E-6	DEFECT	1.6267428428211578E-6	DOCUMENTATION	1.6442206507546914E-7	TEST
// do not do anything	WITHOUT_CLASSIFICATION	0.9999589738959206	WITHOUT_CLASSIFICATION	3.236133956558177E-5	DEFECT	5.094720055560864E-6	DESIGN	2.0898438177611962E-6	DOCUMENTATION	1.13361065286273E-6	IMPLEMENTATION	3.4658998778484494E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999990459050013	WITHOUT_CLASSIFICATION	4.2388780309885805E-7	DESIGN	3.5958501921051685E-7	DEFECT	1.3833582333046307E-7	IMPLEMENTATION	2.5426477751256433E-8	DOCUMENTATION	6.8598753722578014E-9	TEST
//cant instantiate	WITHOUT_CLASSIFICATION	0.9981842914518462	WITHOUT_CLASSIFICATION	0.0018041284020763925	DESIGN	5.809991977799452E-6	DEFECT	3.2983620890375456E-6	IMPLEMENTATION	1.940090024068534E-6	DOCUMENTATION	5.317019865761409E-7	TEST
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999643683363169	WITHOUT_CLASSIFICATION	3.545253708058513E-5	DESIGN	1.5768082939808906E-7	DEFECT	1.836604674840134E-8	TEST	2.996354420642579E-9	DOCUMENTATION	8.33721448347434E-11	IMPLEMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.996810266083668	WITHOUT_CLASSIFICATION	0.002689128850893711	DESIGN	4.960346303662158E-4	IMPLEMENTATION	1.8830441981972782E-6	DEFECT	1.8337168772549743E-6	TEST	8.53673996531839E-7	DOCUMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9998063048112725	WITHOUT_CLASSIFICATION	1.1807131782987684E-4	DESIGN	7.190172401651906E-5	IMPLEMENTATION	2.172202276186869E-6	DEFECT	1.1071605478116646E-6	DOCUMENTATION	4.4278405705019596E-7	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9935567043955782	WITHOUT_CLASSIFICATION	0.006422199756243548	DESIGN	2.0771067241358035E-5	DEFECT	1.8582838973341083E-7	DOCUMENTATION	1.0813821842951161E-7	IMPLEMENTATION	3.0814328692578136E-8	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9935567043955782	WITHOUT_CLASSIFICATION	0.006422199756243548	DESIGN	2.0771067241358035E-5	DEFECT	1.8582838973341083E-7	DOCUMENTATION	1.0813821842951161E-7	IMPLEMENTATION	3.0814328692578136E-8	TEST
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9923513552289432	WITHOUT_CLASSIFICATION	0.007644311073527902	DESIGN	3.392012595707337E-6	DEFECT	9.190270995390712E-7	IMPLEMENTATION	2.2175921208818663E-8	DOCUMENTATION	4.819122781919779E-10	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999856397924185	WITHOUT_CLASSIFICATION	1.3773164052775035E-5	DESIGN	2.462044493478632E-7	DEFECT	2.3180055293932035E-7	IMPLEMENTATION	9.958073993824134E-8	TEST	9.457786627316339E-9	DOCUMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999856397924185	WITHOUT_CLASSIFICATION	1.3773164052775035E-5	DESIGN	2.462044493478632E-7	DEFECT	2.3180055293932035E-7	IMPLEMENTATION	9.958073993824134E-8	TEST	9.457786627316339E-9	DOCUMENTATION
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9996684055598896	WITHOUT_CLASSIFICATION	3.3095992809033183E-4	DESIGN	6.086202257508934E-7	DEFECT	1.945089803492154E-8	DOCUMENTATION	4.79221393722133E-9	IMPLEMENTATION	1.6486826155043119E-9	TEST
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999972947310151	WITHOUT_CLASSIFICATION	2.541988813966772E-6	DESIGN	1.370085059899409E-7	DEFECT	1.8882689686737297E-8	DOCUMENTATION	7.342417017002401E-9	TEST	4.655834040841995E-11	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9626346611600103	WITHOUT_CLASSIFICATION	0.02917018867519451	DESIGN	0.004489773360951215	IMPLEMENTATION	0.00149431524675212	DEFECT	0.0013709967645863651	DOCUMENTATION	8.400647925054998E-4	TEST
// Get the caller	WITHOUT_CLASSIFICATION	0.999999623717982	WITHOUT_CLASSIFICATION	2.567109348991538E-7	DESIGN	1.0170178057159078E-7	IMPLEMENTATION	1.4362277612866851E-8	DEFECT	2.2229050214882595E-9	TEST	1.2841199546808713E-9	DOCUMENTATION
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999997511731995	WITHOUT_CLASSIFICATION	2.176763505676001E-7	DESIGN	2.0048444296550686E-8	IMPLEMENTATION	8.073320546264225E-9	DEFECT	2.3190524891369246E-9	DOCUMENTATION	7.096324844884131E-10	TEST
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999968149069	WITHOUT_CLASSIFICATION	2.0182995935213285E-9	DEFECT	1.0250575361594345E-9	DESIGN	1.1946569096139972E-10	DOCUMENTATION	1.1273188051369046E-11	TEST	1.099720665006656E-11	IMPLEMENTATION
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999934420954757	WITHOUT_CLASSIFICATION	4.855009726746597E-6	IMPLEMENTATION	6.007834208299044E-7	DESIGN	5.766698039425152E-7	TEST	5.165405316898891E-7	DOCUMENTATION	8.901041096480859E-9	DEFECT
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999776803304636	WITHOUT_CLASSIFICATION	9.325126052783244E-6	DESIGN	8.641097596134972E-6	TEST	4.166062366446989E-6	IMPLEMENTATION	1.4723164778598998E-7	DEFECT	4.015187310748794E-8	DOCUMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999996036617484	WITHOUT_CLASSIFICATION	3.7239585222578226E-7	DESIGN	1.8253752937226914E-8	IMPLEMENTATION	3.963531916715224E-9	DOCUMENTATION	1.2769257716134801E-9	TEST	4.4818879227674E-10	DEFECT
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9882438395123921	WITHOUT_CLASSIFICATION	0.00784169426718036	DEFECT	0.00294153018285477	IMPLEMENTATION	9.224596290744833E-4	DESIGN	3.855616776888769E-5	TEST	1.1920240729290764E-5	DOCUMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999997408803818	WITHOUT_CLASSIFICATION	2.3711992021683547E-6	DEFECT	2.1330849625105818E-7	DESIGN	6.315105498922888E-9	IMPLEMENTATION	2.8189110493567255E-10	TEST	9.148680870017293E-11	DOCUMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999928995570869	WITHOUT_CLASSIFICATION	5.416914253360134E-6	IMPLEMENTATION	8.450596053384445E-7	DESIGN	7.944096635804242E-7	DEFECT	3.763130690490186E-8	DOCUMENTATION	6.428084025448398E-9	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999539995866601	WITHOUT_CLASSIFICATION	3.70594034079784E-5	DESIGN	7.507032333667471E-6	DEFECT	6.101814269002363E-7	TEST	4.5729059496766206E-7	DOCUMENTATION	3.665055761602644E-7	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999539995866601	WITHOUT_CLASSIFICATION	3.70594034079784E-5	DESIGN	7.507032333667471E-6	DEFECT	6.101814269002363E-7	TEST	4.5729059496766206E-7	DOCUMENTATION	3.665055761602644E-7	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999539995866601	WITHOUT_CLASSIFICATION	3.70594034079784E-5	DESIGN	7.507032333667471E-6	DEFECT	6.101814269002363E-7	TEST	4.5729059496766206E-7	DOCUMENTATION	3.665055761602644E-7	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999539995866601	WITHOUT_CLASSIFICATION	3.70594034079784E-5	DESIGN	7.507032333667471E-6	DEFECT	6.101814269002363E-7	TEST	4.5729059496766206E-7	DOCUMENTATION	3.665055761602644E-7	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999958910012846	WITHOUT_CLASSIFICATION	3.689317325665606E-6	DEFECT	2.0861108186952603E-7	IMPLEMENTATION	9.603950802955888E-8	DESIGN	6.200682769033421E-8	DOCUMENTATION	5.30239721446143E-8	TEST
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9911090739987172	WITHOUT_CLASSIFICATION	0.00861420302810841	DEFECT	2.2813623684269355E-4	DESIGN	4.488416693592902E-5	IMPLEMENTATION	3.249356835809445E-6	TEST	4.532125599469475E-7	DOCUMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999934702378448	WITHOUT_CLASSIFICATION	2.6511697739373407E-6	DESIGN	2.526522137808948E-6	IMPLEMENTATION	6.053490110571425E-7	DOCUMENTATION	5.650176755524021E-7	DEFECT	1.817035569336829E-7	TEST
//for MySQL	WITHOUT_CLASSIFICATION	0.9995871471157475	WITHOUT_CLASSIFICATION	4.043257137913595E-4	DESIGN	5.123330361663157E-6	DEFECT	1.6530888648722273E-6	DOCUMENTATION	9.147391488760572E-7	TEST	8.360120856833592E-7	IMPLEMENTATION
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999984678183478	WITHOUT_CLASSIFICATION	1.2657075881126361E-6	IMPLEMENTATION	2.0939060697323651E-7	DESIGN	2.230102672183311E-8	DEFECT	1.8412703135966833E-8	TEST	1.636972731167E-8	DOCUMENTATION
//null caused some problems	WITHOUT_CLASSIFICATION	0.9988126497238468	WITHOUT_CLASSIFICATION	0.0010255367290970235	DESIGN	1.40587070346786E-4	DEFECT	1.1657004263921888E-5	IMPLEMENTATION	9.136985572345897E-6	DOCUMENTATION	4.324868732652698E-7	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9997691624667374	WITHOUT_CLASSIFICATION	1.5744223816639152E-4	DESIGN	6.644836724879456E-5	IMPLEMENTATION	3.672882604898921E-6	DEFECT	2.505849997271748E-6	DOCUMENTATION	7.681952452665731E-7	TEST
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.995982286109631	WITHOUT_CLASSIFICATION	0.004017440736848873	DESIGN	1.1735127270719393E-7	TEST	1.172403142363844E-7	DEFECT	2.913787170395295E-8	IMPLEMENTATION	9.42406146694219E-9	DOCUMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999974646992621	WITHOUT_CLASSIFICATION	1.3265959841270107E-6	IMPLEMENTATION	6.578651697779409E-7	DESIGN	3.177273564008495E-7	DEFECT	1.946657929632085E-7	DOCUMENTATION	3.844643467920823E-8	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9997691624667374	WITHOUT_CLASSIFICATION	1.5744223816639152E-4	DESIGN	6.644836724879456E-5	IMPLEMENTATION	3.672882604898921E-6	DEFECT	2.505849997271748E-6	DOCUMENTATION	7.681952452665731E-7	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9997691624667374	WITHOUT_CLASSIFICATION	1.5744223816639152E-4	DESIGN	6.644836724879456E-5	IMPLEMENTATION	3.672882604898921E-6	DEFECT	2.505849997271748E-6	DOCUMENTATION	7.681952452665731E-7	TEST
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999976463973144	WITHOUT_CLASSIFICATION	2.3351723667174454E-6	IMPLEMENTATION	8.697830758284164E-9	DESIGN	7.395240312838855E-9	TEST	1.3506668227162119E-9	DEFECT	9.865809913801428E-10	DOCUMENTATION
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999998676500822	WITHOUT_CLASSIFICATION	5.583222964748875E-8	DESIGN	2.943782373001548E-8	DEFECT	2.450575313116573E-8	DOCUMENTATION	2.1469011264005832E-8	IMPLEMENTATION	1.10510011573785E-9	TEST
// deprecated option...	WITHOUT_CLASSIFICATION	0.9984620258785474	WITHOUT_CLASSIFICATION	0.0014562011158999629	DESIGN	5.855510896997853E-5	IMPLEMENTATION	1.988707407790179E-5	DEFECT	2.903879543940727E-6	DOCUMENTATION	4.269429609764034E-7	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998531566550978	WITHOUT_CLASSIFICATION	7.604487871397437E-5	DESIGN	6.351774646826523E-5	DEFECT	7.065090717311227E-6	IMPLEMENTATION	1.4808154443758662E-7	TEST	6.754745808459265E-8	DOCUMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9998544802288726	WITHOUT_CLASSIFICATION	1.3755462761780565E-4	TEST	7.893509399119314E-6	DESIGN	5.996993959469436E-8	DEFECT	1.1008343307235496E-8	DOCUMENTATION	6.558275330117272E-10	IMPLEMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999999486329263	WITHOUT_CLASSIFICATION	4.852017799369922E-8	DESIGN	1.3656679236789093E-9	DEFECT	7.668636912108074E-10	DOCUMENTATION	5.641030384711046E-10	TEST	1.5026100033734324E-10	IMPLEMENTATION
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9998514813192971	WITHOUT_CLASSIFICATION	1.453819751006649E-4	DESIGN	1.8881589017695187E-6	TEST	4.814024890990572E-7	IMPLEMENTATION	4.720657651989376E-7	DOCUMENTATION	2.9507844607772E-7	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998531566550978	WITHOUT_CLASSIFICATION	7.604487871397437E-5	DESIGN	6.351774646826523E-5	DEFECT	7.065090717311227E-6	IMPLEMENTATION	1.4808154443758662E-7	TEST	6.754745808459265E-8	DOCUMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999996769568974	WITHOUT_CLASSIFICATION	1.8545428329088862E-7	DESIGN	9.53265890452563E-8	DEFECT	3.513793061083314E-8	TEST	5.5318146529472E-9	DOCUMENTATION	1.592484994468709E-9	IMPLEMENTATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.999944265553903	WITHOUT_CLASSIFICATION	4.686553033911555E-5	DESIGN	5.774788558981239E-6	DEFECT	3.0360661398854337E-6	IMPLEMENTATION	5.7541267790544566E-8	DOCUMENTATION	5.197912135957964E-10	TEST
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.999999251917418	WITHOUT_CLASSIFICATION	4.816510164535469E-7	IMPLEMENTATION	1.7060638980809973E-7	DEFECT	7.089716652080183E-8	DESIGN	2.4541273029965655E-8	DOCUMENTATION	3.8673619611527956E-10	TEST
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9995551709912952	WITHOUT_CLASSIFICATION	4.376496690553205E-4	DESIGN	5.899406399775896E-6	DEFECT	1.008384791746511E-6	TEST	2.350089124642293E-7	DOCUMENTATION	3.6539545658790455E-8	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999412695536419	WITHOUT_CLASSIFICATION	5.55163408938113E-5	DESIGN	3.1899605080408594E-6	DEFECT	1.963803739328659E-8	DOCUMENTATION	4.215183699193485E-9	TEST	2.9173515359580114E-10	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9984589557006075	WITHOUT_CLASSIFICATION	0.0011745111850889147	DESIGN	3.6481112806823303E-4	DEFECT	1.541878671642061E-6	IMPLEMENTATION	1.2664400880451555E-7	TEST	5.346355494980241E-8	DOCUMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999939797606877	WITHOUT_CLASSIFICATION	5.817754404310807E-6	DESIGN	1.9415390635318276E-7	IMPLEMENTATION	7.2292375563993655E-9	DEFECT	9.520334376612203E-10	DOCUMENTATION	1.4973068280646545E-10	TEST
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9992356033878356	WITHOUT_CLASSIFICATION	7.345561001188211E-4	IMPLEMENTATION	2.2785578060755224E-5	DEFECT	5.991864811720811E-6	DESIGN	7.219076543194887E-7	DOCUMENTATION	3.4116151888360684E-7	TEST
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999129325337	WITHOUT_CLASSIFICATION	6.453338567619223E-8	DESIGN	1.631601076453032E-8	IMPLEMENTATION	5.76852659357782E-9	DEFECT	3.568853600888346E-10	DOCUMENTATION	9.265803996761771E-11	TEST
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999964776828498	WITHOUT_CLASSIFICATION	3.423241849123278E-6	DESIGN	4.23398769788592E-8	DEFECT	3.303803510870189E-8	IMPLEMENTATION	1.377625343166986E-8	DOCUMENTATION	9.921135460757311E-9	TEST
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999315821338	WITHOUT_CLASSIFICATION	6.752961340919374E-8	DESIGN	6.102314549227375E-10	DEFECT	1.1538263794723656E-10	IMPLEMENTATION	1.1496465734182742E-10	DOCUMENTATION	4.767404897196065E-11	TEST
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999996340669665	WITHOUT_CLASSIFICATION	3.4153355574694186E-7	DESIGN	1.1758461743333347E-8	DEFECT	7.134275989214361E-9	IMPLEMENTATION	3.7556354501012166E-9	DOCUMENTATION	1.7511046026439568E-9	TEST
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9980423891084116	WITHOUT_CLASSIFICATION	0.0010962037217615264	DEFECT	8.59377488741031E-4	DESIGN	7.583320198708373E-7	IMPLEMENTATION	7.021577033166E-7	TEST	5.691913626747443E-7	DOCUMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.899072587788289	WITHOUT_CLASSIFICATION	0.10066057824766372	DESIGN	1.9915909094571035E-4	TEST	2.934168902128186E-5	DOCUMENTATION	2.5667396783064657E-5	IMPLEMENTATION	1.2665787297192283E-5	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9998658360568083	WITHOUT_CLASSIFICATION	1.3172073230710717E-4	IMPLEMENTATION	1.1565679694537139E-6	DESIGN	1.0861609157045987E-6	DEFECT	1.413500413455222E-7	TEST	5.913195803630715E-8	DOCUMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.6938860837716871	WITHOUT_CLASSIFICATION	0.30610094891391526	DESIGN	1.2558391024304847E-5	DEFECT	3.14409254571867E-7	DOCUMENTATION	9.212622734985254E-8	TEST	2.3878913806319954E-9	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999992146604348	WITHOUT_CLASSIFICATION	7.491828480644884E-7	DESIGN	2.6205289369388224E-8	DEFECT	4.836907784167538E-9	IMPLEMENTATION	4.340672445672423E-9	TEST	7.73847249978355E-10	DOCUMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999656023305997	WITHOUT_CLASSIFICATION	2.391195033968736E-5	DEFECT	9.747965980219325E-6	DESIGN	4.1171720632683027E-7	IMPLEMENTATION	2.4011873432428595E-7	DOCUMENTATION	8.591713970264623E-8	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999672764400231	WITHOUT_CLASSIFICATION	2.9158139353385257E-5	DESIGN	3.1258686150109917E-6	IMPLEMENTATION	2.6742005242078307E-7	TEST	1.5784014617260881E-7	DEFECT	1.4291809674782718E-8	DOCUMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999656023305997	WITHOUT_CLASSIFICATION	2.391195033968736E-5	DEFECT	9.747965980219325E-6	DESIGN	4.1171720632683027E-7	IMPLEMENTATION	2.4011873432428595E-7	DOCUMENTATION	8.591713970264623E-8	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999998929566687	WITHOUT_CLASSIFICATION	6.43515451351564E-8	IMPLEMENTATION	2.220984437742039E-8	DESIGN	1.6992147910719414E-8	DEFECT	2.2812117753548514E-9	TEST	1.2085822261696438E-9	DOCUMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999519156076017	WITHOUT_CLASSIFICATION	4.7907025247107994E-5	DESIGN	9.359214705703605E-8	TEST	8.152721893426502E-8	DEFECT	1.7067944017259676E-9	DOCUMENTATION	5.409908118964963E-10	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9990436705156726	WITHOUT_CLASSIFICATION	9.48865813701428E-4	DESIGN	5.819085121631812E-6	DEFECT	9.678664768784575E-7	DOCUMENTATION	5.700740234949797E-7	IMPLEMENTATION	1.0664500409166822E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9997069170176078	WITHOUT_CLASSIFICATION	2.905406305234549E-4	DESIGN	1.2787227433279654E-6	DOCUMENTATION	7.040086838780444E-7	TEST	5.56188762829525E-7	DEFECT	3.4316785475581622E-9	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999992146604348	WITHOUT_CLASSIFICATION	7.491828480644884E-7	DESIGN	2.6205289369388224E-8	DEFECT	4.836907784167538E-9	IMPLEMENTATION	4.340672445672423E-9	TEST	7.73847249978355E-10	DOCUMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999672764400231	WITHOUT_CLASSIFICATION	2.9158139353385257E-5	DESIGN	3.1258686150109917E-6	IMPLEMENTATION	2.6742005242078307E-7	TEST	1.5784014617260881E-7	DEFECT	1.4291809674782718E-8	DOCUMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999998929566687	WITHOUT_CLASSIFICATION	6.43515451351564E-8	IMPLEMENTATION	2.220984437742039E-8	DESIGN	1.6992147910719414E-8	DEFECT	2.2812117753548514E-9	TEST	1.2085822261696438E-9	DOCUMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999223731988693	WITHOUT_CLASSIFICATION	7.731736268499848E-5	DESIGN	1.3552193383787052E-7	IMPLEMENTATION	8.585687022413583E-8	DEFECT	5.197954943629833E-8	TEST	3.608009224571884E-8	DOCUMENTATION
//return currentId;	WITHOUT_CLASSIFICATION	0.9999648660576362	WITHOUT_CLASSIFICATION	1.762679583672533E-5	DESIGN	1.0366649528771326E-5	DEFECT	6.5355629141037316E-6	IMPLEMENTATION	5.912717347191515E-7	DOCUMENTATION	1.366234935397465E-8	TEST
//reset the id	WITHOUT_CLASSIFICATION	0.9998628095323296	WITHOUT_CLASSIFICATION	8.356759700312217E-5	IMPLEMENTATION	4.198126414601995E-5	DESIGN	7.526503811987076E-6	DEFECT	3.469863209255967E-6	TEST	6.452394998800752E-7	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
//reset the version	WITHOUT_CLASSIFICATION	0.9999304490152824	WITHOUT_CLASSIFICATION	4.961765907978511E-5	IMPLEMENTATION	1.5240192101176918E-5	DEFECT	3.891754127691654E-6	DESIGN	4.1824981403321586E-7	TEST	3.831295950678814E-7	DOCUMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9963617782215418	WITHOUT_CLASSIFICATION	0.003363761528173656	DESIGN	2.7186134875802645E-4	DEFECT	1.7398926495900721E-6	IMPLEMENTATION	5.784761718497794E-7	TEST	2.805327051021172E-7	DOCUMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999994614291404	WITHOUT_CLASSIFICATION	4.856559118178808E-7	IMPLEMENTATION	3.3817560152102445E-8	DESIGN	1.7062994019172005E-8	DOCUMENTATION	1.093510790071498E-9	TEST	9.40882947123647E-10	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996013418496024	WITHOUT_CLASSIFICATION	3.969436523862583E-4	DESIGN	9.332612849715298E-7	DEFECT	3.2415279560305313E-7	IMPLEMENTATION	3.213415156785321E-7	TEST	1.3574241517999714E-7	DOCUMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999519156076017	WITHOUT_CLASSIFICATION	4.7907025247107994E-5	DESIGN	9.359214705703605E-8	TEST	8.152721893426502E-8	DEFECT	1.7067944017259676E-9	DOCUMENTATION	5.409908118964963E-10	IMPLEMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999356712999429	WITHOUT_CLASSIFICATION	6.376719000935863E-5	DESIGN	5.57214157674601E-7	DEFECT	3.5283969209676196E-9	TEST	7.476184941485944E-10	DOCUMENTATION	1.9874664970439356E-11	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9998399475799341	WITHOUT_CLASSIFICATION	1.3605539923295138E-4	DEFECT	2.3778807103774278E-5	DESIGN	1.8319656495949156E-7	DOCUMENTATION	2.015271101852352E-8	IMPLEMENTATION	1.486445312773378E-8	TEST
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999865639471538	WITHOUT_CLASSIFICATION	1.3427470292684513E-5	DESIGN	5.268264461937079E-9	DEFECT	2.317908607352455E-9	DOCUMENTATION	5.188808436723835E-10	IMPLEMENTATION	4.774994806701836E-10	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996013418496024	WITHOUT_CLASSIFICATION	3.969436523862583E-4	DESIGN	9.332612849715298E-7	DEFECT	3.2415279560305313E-7	IMPLEMENTATION	3.213415156785321E-7	TEST	1.3574241517999714E-7	DOCUMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974649728554	WITHOUT_CLASSIFICATION	9.131883142769499E-7	IMPLEMENTATION	7.301641402987181E-7	DEFECT	6.323252616848598E-7	DESIGN	1.3817016678606893E-7	DOCUMENTATION	1.2117926145345694E-7	TEST
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999694648652012	WITHOUT_CLASSIFICATION	2.5055273178041565E-5	IMPLEMENTATION	3.5182481403634137E-6	DESIGN	1.8819911493564259E-6	TEST	5.405331455552028E-8	DOCUMENTATION	2.5569016543865777E-8	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996013418496024	WITHOUT_CLASSIFICATION	3.969436523862583E-4	DESIGN	9.332612849715298E-7	DEFECT	3.2415279560305313E-7	IMPLEMENTATION	3.213415156785321E-7	TEST	1.3574241517999714E-7	DOCUMENTATION
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999993471507347	WITHOUT_CLASSIFICATION	6.382482383312263E-7	DESIGN	9.66066554833265E-9	IMPLEMENTATION	2.832581217234649E-9	DOCUMENTATION	2.006396640966358E-9	TEST	1.0138352418732975E-10	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999999421245952	WITHOUT_CLASSIFICATION	3.519473969308515E-8	DESIGN	7.75765188648399E-9	DEFECT	6.54618482287064E-9	IMPLEMENTATION	5.486251945887814E-9	DOCUMENTATION	2.8905764165024876E-9	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974649728554	WITHOUT_CLASSIFICATION	9.131883142769499E-7	IMPLEMENTATION	7.301641402987181E-7	DEFECT	6.323252616848598E-7	DESIGN	1.3817016678606893E-7	DOCUMENTATION	1.2117926145345694E-7	TEST
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9996349901307899	WITHOUT_CLASSIFICATION	3.4606407768786036E-4	DEFECT	1.5594131581908533E-5	DESIGN	2.553517515035418E-6	IMPLEMENTATION	5.995765909195278E-7	DOCUMENTATION	1.9856583432860062E-7	TEST
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999563113869981	WITHOUT_CLASSIFICATION	4.310261566044366E-5	IMPLEMENTATION	3.337924981730001E-7	DESIGN	2.0759256103090897E-7	TEST	2.359444101391854E-8	DEFECT	2.1017841235713403E-8	DOCUMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999932491596832	WITHOUT_CLASSIFICATION	6.4427018605697395E-6	DESIGN	2.5724929180291293E-7	IMPLEMENTATION	2.493518838346937E-8	DEFECT	1.9078794953485344E-8	DOCUMENTATION	6.875181025322114E-9	TEST
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999843743896004	WITHOUT_CLASSIFICATION	1.235319852195319E-5	DESIGN	2.6993716134822372E-6	DEFECT	4.295260344423713E-7	IMPLEMENTATION	1.0896145402587425E-7	DOCUMENTATION	3.455277558926619E-8	TEST
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999750617388267	WITHOUT_CLASSIFICATION	1.8327729441238785E-5	DESIGN	4.8762454148776445E-6	DEFECT	1.6109201705063404E-6	IMPLEMENTATION	7.152292533012857E-8	DOCUMENTATION	5.1843221419829634E-8	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999853735431328	WITHOUT_CLASSIFICATION	1.430898742589347E-5	DESIGN	3.08091077642375E-7	DEFECT	4.683551626619211E-9	IMPLEMENTATION	3.6982129961536663E-9	TEST	9.965991481626222E-10	DOCUMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999987292503908	WITHOUT_CLASSIFICATION	1.0275874589233281E-6	DESIGN	1.6190542824057203E-7	IMPLEMENTATION	3.206619054555866E-8	DEFECT	3.104312725462719E-8	TEST	1.8147404292859756E-8	DOCUMENTATION
//value is the entity name	WITHOUT_CLASSIFICATION	0.9992169927032771	WITHOUT_CLASSIFICATION	7.808851414741582E-4	DESIGN	1.6765823020196492E-6	DEFECT	2.6401566268544256E-7	TEST	1.760276682747143E-7	DOCUMENTATION	5.529615694350915E-9	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999580961865083	WITHOUT_CLASSIFICATION	1.4414693966632812E-5	IMPLEMENTATION	1.3233987641494121E-5	DESIGN	1.2056135862072316E-5	DEFECT	1.4782870520066322E-6	DOCUMENTATION	7.207089694610207E-7	TEST
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999989596489471	WITHOUT_CLASSIFICATION	5.051408266954502E-7	DESIGN	4.1539100149077634E-7	DEFECT	9.373757893646203E-8	TEST	2.5521004114265653E-8	DOCUMENTATION	5.606416095685089E-10	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9626346611600103	WITHOUT_CLASSIFICATION	0.02917018867519451	DESIGN	0.004489773360951215	IMPLEMENTATION	0.00149431524675212	DEFECT	0.0013709967645863651	DOCUMENTATION	8.400647925054998E-4	TEST
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9993619956624591	WITHOUT_CLASSIFICATION	6.360780942939628E-4	DESIGN	1.3228691510604505E-6	DEFECT	4.065455047763654E-7	TEST	1.806556377881688E-7	DOCUMENTATION	1.6172953339308816E-8	IMPLEMENTATION
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9822338674148665	WITHOUT_CLASSIFICATION	0.009720403572735662	DEFECT	0.007938146742334565	DESIGN	6.880749941024383E-5	IMPLEMENTATION	1.9863017951175885E-5	DOCUMENTATION	1.891175270186854E-5	TEST
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999813854265356	WITHOUT_CLASSIFICATION	1.3901055878820512E-5	DESIGN	2.671029940554764E-6	DEFECT	1.2746508702886323E-6	TEST	7.218843764369738E-7	IMPLEMENTATION	4.595239834402449E-8	DOCUMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998935659380814	WITHOUT_CLASSIFICATION	7.85140348243173E-5	DEFECT	2.3201008541771562E-5	DESIGN	3.3507496794248775E-6	TEST	6.876421510889826E-7	IMPLEMENTATION	6.806267219413826E-7	DOCUMENTATION
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999983791379006	WITHOUT_CLASSIFICATION	1.523843043488756E-6	DESIGN	9.613963886285338E-8	DEFECT	4.241920713342816E-10	TEST	4.0694734469382467E-10	DOCUMENTATION	4.827770520812234E-11	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999973781963958	WITHOUT_CLASSIFICATION	2.2061316832903063E-6	DESIGN	2.854016282977426E-7	IMPLEMENTATION	1.2915839588876684E-7	DEFECT	6.9015839460238E-10	TEST	4.217383575830901E-10	DOCUMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999951815689344	WITHOUT_CLASSIFICATION	2.423196903303736E-6	DESIGN	1.8455023454099274E-6	DEFECT	5.469463131408248E-7	IMPLEMENTATION	2.2939618655317445E-9	TEST	4.915417772722135E-10	DOCUMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9968270270260817	WITHOUT_CLASSIFICATION	0.0030393371787301843	DESIGN	1.1306334529143569E-4	DEFECT	1.9298723434446124E-5	IMPLEMENTATION	8.716722044149577E-7	TEST	4.0205425774675485E-7	DOCUMENTATION
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999982255667909	WITHOUT_CLASSIFICATION	1.587282244548352E-6	DESIGN	1.473440723056805E-7	DEFECT	3.652531469017645E-8	IMPLEMENTATION	2.912220821496536E-9	DOCUMENTATION	3.693566391073695E-10	TEST
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.999954564953799	WITHOUT_CLASSIFICATION	4.5151002910203445E-5	DESIGN	2.1012806041853946E-7	DEFECT	3.8763094651898226E-8	IMPLEMENTATION	1.8956761576520156E-8	DOCUMENTATION	1.6195374217778905E-8	TEST
//TODO!!!	WITHOUT_CLASSIFICATION	0.7667549810327092	WITHOUT_CLASSIFICATION	0.21588916669157043	DESIGN	0.008167376782187322	IMPLEMENTATION	0.003765808396060197	DOCUMENTATION	0.003400143279096821	DEFECT	0.002022523818375961	TEST
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9984082582131837	WITHOUT_CLASSIFICATION	0.0015668190901727986	DEFECT	1.9160955617803516E-5	DESIGN	4.666766415097881E-6	TEST	5.513206150265464E-7	IMPLEMENTATION	5.436539956497295E-7	DOCUMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9992319977544754	WITHOUT_CLASSIFICATION	6.885867929015418E-4	DEFECT	7.566797552680538E-5	DESIGN	1.904329531512818E-6	TEST	1.0590058205727659E-6	DOCUMENTATION	7.841417441960574E-7	IMPLEMENTATION
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999995959847288	WITHOUT_CLASSIFICATION	2.7874996979884977E-7	DESIGN	8.384173075506102E-8	TEST	2.844044808964804E-8	IMPLEMENTATION	8.242331292402134E-9	DEFECT	4.7407912477235755E-9	DOCUMENTATION
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999818968142437	WITHOUT_CLASSIFICATION	1.665777966466416E-5	DESIGN	6.44297331557771E-7	TEST	6.324496524747425E-7	IMPLEMENTATION	1.074394976400181E-7	DEFECT	6.121960987693392E-8	DOCUMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999571679707233	WITHOUT_CLASSIFICATION	2.3393006500381787E-5	DESIGN	1.6226174543277672E-5	DEFECT	1.400013710839917E-6	DOCUMENTATION	1.2494199833115805E-6	IMPLEMENTATION	5.63414538986881E-7	TEST
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9996043990433279	WITHOUT_CLASSIFICATION	3.921150103534264E-4	DEFECT	2.1286147993741525E-6	DESIGN	1.2495244197718522E-6	TEST	8.379189620726313E-8	IMPLEMENTATION	2.4015203302690803E-8	DOCUMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9987475290576668	WITHOUT_CLASSIFICATION	0.00123341425321129	DESIGN	1.6224634897658348E-5	IMPLEMENTATION	1.638826938740007E-6	DOCUMENTATION	1.16735068774458E-6	DEFECT	2.5876597809615907E-8	TEST
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999963189270403	WITHOUT_CLASSIFICATION	1.9152793261046864E-6	DESIGN	1.1511250914784196E-6	DEFECT	5.991586266147208E-7	IMPLEMENTATION	1.393707943753994E-8	DOCUMENTATION	1.5728360063889938E-9	TEST
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9995020263404165	WITHOUT_CLASSIFICATION	4.839854452583272E-4	DESIGN	6.915351309404022E-6	IMPLEMENTATION	2.568228915069512E-6	TEST	2.3986389776433262E-6	DEFECT	2.105995122929217E-6	DOCUMENTATION
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9995697227232153	WITHOUT_CLASSIFICATION	1.9071630090930237E-4	DEFECT	1.6916636275450943E-4	IMPLEMENTATION	5.128910919085328E-5	DESIGN	1.8894208812381268E-5	TEST	2.112951178086956E-7	DOCUMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.9986416392177636	WITHOUT_CLASSIFICATION	9.037683952033855E-4	DESIGN	2.628826654566629E-4	IMPLEMENTATION	8.515663486220376E-5	DOCUMENTATION	5.971975234974121E-5	TEST	4.683333436442011E-5	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999989913784378	WITHOUT_CLASSIFICATION	8.050800607360794E-7	TEST	7.89210918441578E-8	DEFECT	5.743981112161746E-8	DESIGN	5.684433088039985E-8	IMPLEMENTATION	1.033626744809319E-8	DOCUMENTATION
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9998383513693153	WITHOUT_CLASSIFICATION	1.5922584088724098E-4	DESIGN	1.6205382423768333E-6	DEFECT	2.947566612809361E-7	IMPLEMENTATION	2.713002543737689E-7	DOCUMENTATION	2.3619463950529691E-7	TEST
//cache this	WITHOUT_CLASSIFICATION	0.9985304351436214	WITHOUT_CLASSIFICATION	0.001403415216448417	DESIGN	3.700703112561357E-5	IMPLEMENTATION	1.8455824800406954E-5	DOCUMENTATION	6.424846155803795E-6	DEFECT	4.261937848329485E-6	TEST
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999923765283577	WITHOUT_CLASSIFICATION	3.7624575101917613E-6	DEFECT	2.5563622474565776E-6	IMPLEMENTATION	7.258375980091508E-7	DESIGN	3.0328381305870893E-7	TEST	2.7553047377328894E-7	DOCUMENTATION
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999593848426075	WITHOUT_CLASSIFICATION	2.473314931215418E-5	DESIGN	1.5663173235349994E-5	DEFECT	1.6938639126907282E-7	TEST	3.233544137935365E-8	IMPLEMENTATION	1.711301238048122E-8	DOCUMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.853317281459769	WITHOUT_CLASSIFICATION	0.09796461636091378	DESIGN	0.038949701173569905	IMPLEMENTATION	0.004652596102539162	DOCUMENTATION	0.0027749530653440146	DEFECT	0.0023408518378640656	TEST
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999993205021396	WITHOUT_CLASSIFICATION	4.0983894956432693E-7	DESIGN	2.470674422158674E-7	IMPLEMENTATION	2.1438088340580832E-8	DEFECT	7.085974284006707E-10	TEST	4.447829654181027E-10	DOCUMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974649728554	WITHOUT_CLASSIFICATION	9.131883142769499E-7	IMPLEMENTATION	7.301641402987181E-7	DEFECT	6.323252616848598E-7	DESIGN	1.3817016678606893E-7	DOCUMENTATION	1.2117926145345694E-7	TEST
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.6375384290673978	DESIGN	0.36241725741018455	WITHOUT_CLASSIFICATION	3.6686916022917615E-5	DEFECT	3.7774371698144536E-6	TEST	2.606248675141675E-6	IMPLEMENTATION	1.2429205498279776E-6	DOCUMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999754085664825	WITHOUT_CLASSIFICATION	1.8225538040178663E-5	DESIGN	2.7911874148540116E-6	IMPLEMENTATION	1.6325404626855619E-6	DEFECT	1.3051350033731426E-6	DOCUMENTATION	6.370325964299295E-7	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9999754085664825	WITHOUT_CLASSIFICATION	1.8225538040178663E-5	DESIGN	2.7911874148540116E-6	IMPLEMENTATION	1.6325404626855619E-6	DEFECT	1.3051350033731426E-6	DOCUMENTATION	6.370325964299295E-7	TEST
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999994931444497	WITHOUT_CLASSIFICATION	4.823722351520217E-7	DEFECT	1.947747343911066E-8	DESIGN	4.398744446442007E-9	IMPLEMENTATION	5.206476982867978E-10	TEST	8.644951594844809E-11	DOCUMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999853735431328	WITHOUT_CLASSIFICATION	1.430898742589347E-5	DESIGN	3.08091077642375E-7	DEFECT	4.683551626619211E-9	IMPLEMENTATION	3.6982129961536663E-9	TEST	9.965991481626222E-10	DOCUMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9554672577155204	WITHOUT_CLASSIFICATION	0.044432966442539884	DESIGN	4.7333363649435904E-5	DEFECT	4.6826826651649404E-5	IMPLEMENTATION	4.400364052853915E-6	DOCUMENTATION	1.215287585615366E-6	TEST
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999997803332948	WITHOUT_CLASSIFICATION	2.0835182372470332E-7	DESIGN	5.620793133291359E-9	TEST	2.322961575330329E-9	DEFECT	1.7316046246520057E-9	DOCUMENTATION	1.6395220742557012E-9	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999988119344748	WITHOUT_CLASSIFICATION	6.37379127533327E-7	DEFECT	5.483744648281449E-7	IMPLEMENTATION	1.3554294854781166E-9	DESIGN	6.199523942181395E-10	DOCUMENTATION	3.365509217855583E-10	TEST
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999995642334722	WITHOUT_CLASSIFICATION	2.3645237736223777E-7	DEFECT	1.3549044697803915E-7	DESIGN	6.347352164216588E-8	IMPLEMENTATION	3.034936020894435E-10	TEST	4.668817925756859E-11	DOCUMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999494106535097	WITHOUT_CLASSIFICATION	4.358865442395858E-5	DESIGN	4.329772178746514E-6	DEFECT	1.1783435360593994E-6	IMPLEMENTATION	9.656238196914896E-7	TEST	5.269525317235845E-7	DOCUMENTATION
//NOOP	WITHOUT_CLASSIFICATION	0.9999077647533471	WITHOUT_CLASSIFICATION	7.581921782942614E-5	DESIGN	4.947479188969158E-6	IMPLEMENTATION	4.734935203495717E-6	DEFECT	3.7452140473836695E-6	TEST	2.9884003838112325E-6	DOCUMENTATION
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999993225436397	WITHOUT_CLASSIFICATION	5.255889100778776E-7	DEFECT	8.733432253300331E-8	TEST	6.21752085766868E-8	DESIGN	2.109014485196082E-9	DOCUMENTATION	2.48904687088346E-10	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999898585160625	WITHOUT_CLASSIFICATION	1.012629571362068E-5	DESIGN	1.4504269820705332E-8	TEST	5.815911453019234E-10	DEFECT	8.679694567026954E-11	DOCUMENTATION	1.5566040274238377E-11	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.991643583468226	WITHOUT_CLASSIFICATION	0.008329735354428684	DESIGN	2.4116268661575497E-5	DEFECT	2.354109871402634E-6	IMPLEMENTATION	1.2827530112997372E-7	DOCUMENTATION	8.252351121510868E-8	TEST
// return false;	WITHOUT_CLASSIFICATION	0.9999772806590095	WITHOUT_CLASSIFICATION	2.0872015556397478E-5	DESIGN	9.192961085560633E-7	IMPLEMENTATION	9.103376290357773E-7	DEFECT	1.3499618396475053E-8	DOCUMENTATION	4.192078064946405E-9	TEST
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.5603074977033974	WITHOUT_CLASSIFICATION	0.43950980221514746	DESIGN	9.450729221771715E-5	DEFECT	8.742700538077311E-5	IMPLEMENTATION	6.202934763343987E-7	TEST	1.454903803108694E-7	DOCUMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999984906616575	WITHOUT_CLASSIFICATION	1.4144132133792644E-6	DESIGN	8.437459599965825E-8	TEST	7.027612143612967E-9	DEFECT	3.481806409075414E-9	DOCUMENTATION	4.11145891483419E-11	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999893558444132	WITHOUT_CLASSIFICATION	1.0607042046004077E-5	DESIGN	2.7668285315871306E-8	TEST	4.297651582557352E-9	IMPLEMENTATION	3.116730067728534E-9	DEFECT	2.0308737837626915E-9	DOCUMENTATION
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999680650633	WITHOUT_CLASSIFICATION	2.8288992119968105E-8	DEFECT	3.5497880514382593E-9	DESIGN	6.09052618405628E-11	TEST	3.238165117679464E-11	IMPLEMENTATION	2.8697462058709796E-12	DOCUMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999761589745	WITHOUT_CLASSIFICATION	1.5002136801699007E-8	IMPLEMENTATION	6.698655360698356E-9	DEFECT	1.0254858530301632E-9	DESIGN	9.312819066557797E-10	DOCUMENTATION	1.8346577857050018E-10	TEST
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999961340809	WITHOUT_CLASSIFICATION	2.9104225677166333E-9	DESIGN	5.532104868300154E-10	IMPLEMENTATION	3.794920418414389E-10	DEFECT	1.6030726233236364E-11	DOCUMENTATION	6.763441513461556E-12	TEST
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999998220105998	WITHOUT_CLASSIFICATION	1.772063583403611E-7	DESIGN	5.372288429775984E-10	DEFECT	2.0027951821292208E-10	DOCUMENTATION	3.68753542818717E-11	TEST	8.658113190781177E-12	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9992192325899109	WITHOUT_CLASSIFICATION	7.717318560981587E-4	DESIGN	8.043271486225742E-6	IMPLEMENTATION	8.549037793055702E-7	DEFECT	1.1574194648533737E-7	DOCUMENTATION	2.1636779017506132E-8	TEST
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999970550228723	WITHOUT_CLASSIFICATION	2.062157187672777E-6	DESIGN	7.970893876364601E-7	IMPLEMENTATION	8.349213258579235E-8	DEFECT	1.1839282211125747E-9	TEST	1.0544916697934393E-9	DOCUMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9996858755854519	WITHOUT_CLASSIFICATION	2.7847055561347413E-4	IMPLEMENTATION	2.863127013030148E-5	DESIGN	6.599292334011216E-6	DEFECT	2.753885305842498E-7	DOCUMENTATION	1.4790793974508347E-7	TEST
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999891829338341	WITHOUT_CLASSIFICATION	1.0750020797208714E-5	IMPLEMENTATION	3.5476474296165565E-8	DEFECT	2.1839218755862508E-8	DESIGN	9.458519718961062E-9	TEST	2.711557370375768E-10	DOCUMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999989257167873	WITHOUT_CLASSIFICATION	1.0434762055432213E-6	DEFECT	1.9281010968837343E-8	DESIGN	6.876083662731485E-9	DOCUMENTATION	3.038840562150872E-9	TEST	1.611072055408577E-9	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.853317281459769	WITHOUT_CLASSIFICATION	0.09796461636091378	DESIGN	0.038949701173569905	IMPLEMENTATION	0.004652596102539162	DOCUMENTATION	0.0027749530653440146	DEFECT	0.0023408518378640656	TEST
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999860944477115	WITHOUT_CLASSIFICATION	1.3737704978372302E-5	DESIGN	1.546048162524879E-7	DEFECT	7.806024114511732E-9	IMPLEMENTATION	3.170639569042808E-9	TEST	2.2658301487896245E-9	DOCUMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999578069811876	WITHOUT_CLASSIFICATION	2.8988391437236887E-5	DEFECT	1.2669845480453032E-5	DESIGN	5.291617940088049E-7	IMPLEMENTATION	4.663723052240808E-9	DOCUMENTATION	9.56377544707674E-10	TEST
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999266041625	WITHOUT_CLASSIFICATION	5.1026983038396125E-8	DEFECT	2.1826275884451023E-8	DESIGN	3.3658792884087005E-10	DOCUMENTATION	1.5325946908114613E-10	IMPLEMENTATION	5.273136574926764E-11	TEST
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999977585841515	WITHOUT_CLASSIFICATION	1.6912248206769109E-6	DEFECT	2.9884572467943854E-7	DESIGN	1.8223280502777712E-7	TEST	6.189120881124847E-8	DOCUMENTATION	7.221289358716754E-9	IMPLEMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9985344100291259	WITHOUT_CLASSIFICATION	0.001074223376283652	DEFECT	2.4685813702138255E-4	DESIGN	1.3945713009977357E-4	IMPLEMENTATION	4.9049757677134824E-6	DOCUMENTATION	1.4635170166843583E-7	TEST
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999542409892928	WITHOUT_CLASSIFICATION	4.258516154581487E-5	IMPLEMENTATION	2.0763916046628966E-6	DESIGN	1.0165374847398282E-6	DEFECT	7.946771494316424E-8	TEST	1.452357032543184E-9	DOCUMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999960515642765	WITHOUT_CLASSIFICATION	1.6001225515220477E-6	TEST	1.4083458824672928E-6	DESIGN	7.159026761750773E-7	DEFECT	1.5317404324757234E-7	DOCUMENTATION	7.089057019786741E-8	IMPLEMENTATION
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999997893352193	WITHOUT_CLASSIFICATION	1.4744411724911663E-7	DESIGN	4.931554263321828E-8	IMPLEMENTATION	7.259896227498597E-9	DEFECT	3.73880603160076E-9	TEST	2.9064186627842343E-9	DOCUMENTATION
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999999256589825	WITHOUT_CLASSIFICATION	5.506955634245447E-8	IMPLEMENTATION	9.847109221739475E-9	DEFECT	8.121198673392059E-9	DESIGN	1.0653785353874087E-9	DOCUMENTATION	2.377745372339744E-10	TEST
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999907642538375	WITHOUT_CLASSIFICATION	9.148141124816536E-6	DESIGN	4.530659304458789E-8	IMPLEMENTATION	2.256668985308887E-8	DOCUMENTATION	1.4780140777305664E-8	DEFECT	4.9516139724269174E-9	TEST
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999999461108495	WITHOUT_CLASSIFICATION	4.5838115253151E-8	DESIGN	3.5176536268396915E-9	IMPLEMENTATION	3.314488906273668E-9	DEFECT	9.424175039045627E-10	TEST	2.764749819030008E-10	DOCUMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.999998890746337	WITHOUT_CLASSIFICATION	9.260899466001291E-7	TEST	1.631020464765794E-7	DEFECT	1.842829138310213E-8	DOCUMENTATION	1.4631262078020884E-9	DESIGN	1.7025256079524204E-10	IMPLEMENTATION
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9992594481559081	WITHOUT_CLASSIFICATION	4.766840266260597E-4	DESIGN	2.56591817734861E-4	DEFECT	3.626614131420212E-6	TEST	3.4258114564236735E-6	DOCUMENTATION	2.2357414325424107E-7	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9137688916604213	WITHOUT_CLASSIFICATION	0.0816129329782714	DEFECT	0.0046154200079081935	DESIGN	2.1057701397070773E-6	TEST	3.513005294248288E-7	IMPLEMENTATION	2.982827298198091E-7	DOCUMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999963398546291	WITHOUT_CLASSIFICATION	3.1720018595449365E-6	DESIGN	4.71359482673735E-7	IMPLEMENTATION	1.0902395670189145E-8	DOCUMENTATION	4.777948858808653E-9	DEFECT	1.1036842806331368E-9	TEST
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999963398546291	WITHOUT_CLASSIFICATION	3.1720018595449365E-6	DESIGN	4.71359482673735E-7	IMPLEMENTATION	1.0902395670189145E-8	DOCUMENTATION	4.777948858808653E-9	DEFECT	1.1036842806331368E-9	TEST
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999540534233992	WITHOUT_CLASSIFICATION	3.978067963052098E-5	DESIGN	5.895255290120291E-6	DEFECT	1.3778728035078601E-7	DOCUMENTATION	1.058510597174164E-7	IMPLEMENTATION	2.700334014664235E-8	TEST
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9998653746932085	WITHOUT_CLASSIFICATION	1.2706329187495025E-4	DESIGN	7.185088972406759E-6	IMPLEMENTATION	3.264653824296591E-7	TEST	4.078640641721281E-8	DOCUMENTATION	9.674155487367865E-9	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9997433094717518	WITHOUT_CLASSIFICATION	1.9884760262104233E-4	DEFECT	5.664729644367116E-5	DESIGN	1.0768389519138225E-6	DOCUMENTATION	1.1545400092061847E-7	TEST	3.3362307059011917E-9	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9997433094717518	WITHOUT_CLASSIFICATION	1.9884760262104233E-4	DEFECT	5.664729644367116E-5	DESIGN	1.0768389519138225E-6	DOCUMENTATION	1.1545400092061847E-7	TEST	3.3362307059011917E-9	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.9999235004140353	WITHOUT_CLASSIFICATION	7.648575368002415E-5	DESIGN	5.7697976455926904E-9	DEFECT	5.565819869409028E-9	DOCUMENTATION	2.164723232180628E-9	IMPLEMENTATION	3.3194378107428653E-10	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9998349834091631	WITHOUT_CLASSIFICATION	1.4346910772598554E-4	DESIGN	1.3569398730651215E-5	DEFECT	7.617844651996774E-6	IMPLEMENTATION	2.3908037555769086E-7	DOCUMENTATION	1.2115935269543492E-7	TEST
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.46229074830896466	WITHOUT_CLASSIFICATION	0.3649776433314603	DESIGN	0.17273032639724223	IMPLEMENTATION	6.801702078243262E-7	DEFECT	3.7572126079105555E-7	TEST	2.2607086416347428E-7	DOCUMENTATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999983647324391	WITHOUT_CLASSIFICATION	1.6343961349594278E-6	DESIGN	5.697088442297926E-10	DOCUMENTATION	2.713772184506268E-10	TEST	2.9008414564905594E-11	IMPLEMENTATION	1.3314035728052017E-12	DEFECT
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999555695736	WITHOUT_CLASSIFICATION	2.1757157146361657E-8	DESIGN	1.707869002075033E-8	DEFECT	2.525001371157956E-9	TEST	1.7558975821984418E-9	DOCUMENTATION	1.313680447330862E-9	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999026946063	WITHOUT_CLASSIFICATION	5.114454854083775E-8	DEFECT	2.5203740294576332E-8	IMPLEMENTATION	1.3372147023937819E-8	DESIGN	3.945818378552266E-9	TEST	3.639139522837735E-9	DOCUMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999986636166059	WITHOUT_CLASSIFICATION	1.3169882957143087E-6	DESIGN	1.826352702682104E-8	DEFECT	9.2521588277281E-10	DOCUMENTATION	1.7007566787413568E-10	TEST	3.62798709081878E-11	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999986636166059	WITHOUT_CLASSIFICATION	1.3169882957143087E-6	DESIGN	1.826352702682104E-8	DEFECT	9.2521588277281E-10	DOCUMENTATION	1.7007566787413568E-10	TEST	3.62798709081878E-11	IMPLEMENTATION
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999998034511325	WITHOUT_CLASSIFICATION	1.437792582969208E-7	IMPLEMENTATION	3.0065995363523844E-8	DEFECT	1.4143250859399944E-8	TEST	4.590229424959135E-9	DESIGN	3.970133657396995E-9	DOCUMENTATION
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9991504036335019	WITHOUT_CLASSIFICATION	8.438420447811529E-4	DESIGN	5.158755679347764E-6	IMPLEMENTATION	5.11309576772658E-7	DEFECT	5.7413887736385524E-8	DOCUMENTATION	2.684257301897534E-8	TEST
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999980398446384	WITHOUT_CLASSIFICATION	1.6811317748377575E-6	DESIGN	8.069801234915556E-8	DEFECT	7.55193771978349E-8	IMPLEMENTATION	6.769445071708703E-8	TEST	5.5111746459339935E-8	DOCUMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999925398750006	WITHOUT_CLASSIFICATION	4.797453027314563E-6	DESIGN	2.3898363075298124E-6	DEFECT	2.543691648806395E-7	IMPLEMENTATION	1.7229749621467635E-8	DOCUMENTATION	1.2367499366241792E-9	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999925398750006	WITHOUT_CLASSIFICATION	4.797453027314563E-6	DESIGN	2.3898363075298124E-6	DEFECT	2.543691648806395E-7	IMPLEMENTATION	1.7229749621467635E-8	DOCUMENTATION	1.2367499366241792E-9	TEST
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999995696729654	WITHOUT_CLASSIFICATION	3.5125855279111006E-7	DEFECT	4.618787447043243E-8	DESIGN	1.632873266697884E-8	IMPLEMENTATION	9.097078617592503E-9	DOCUMENTATION	7.454796146399549E-9	TEST
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999990146343624	WITHOUT_CLASSIFICATION	6.751248378025989E-7	IMPLEMENTATION	2.4441381020222256E-7	DEFECT	5.3614958413862595E-8	DESIGN	1.0431658457027425E-8	DOCUMENTATION	1.780372738322778E-9	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999080231502844	WITHOUT_CLASSIFICATION	5.366056460781411E-5	DESIGN	3.682793515479325E-5	DEFECT	1.0861190070903033E-6	TEST	3.907886659356866E-7	IMPLEMENTATION	1.1442279969760041E-8	DOCUMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999994051225879	WITHOUT_CLASSIFICATION	4.308996546700176E-7	DESIGN	1.1115597870560071E-7	IMPLEMENTATION	2.09508776027995E-8	DOCUMENTATION	1.938254560317685E-8	TEST	1.248835560271814E-8	DEFECT
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9998577528193063	WITHOUT_CLASSIFICATION	1.4139693988163472E-4	DESIGN	8.245572936111977E-7	DEFECT	1.1080177909669026E-8	DOCUMENTATION	1.0637121698305984E-8	IMPLEMENTATION	3.9662189146372124E-9	TEST
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999854636606914	WITHOUT_CLASSIFICATION	1.4464683578794146E-5	DESIGN	3.106215068045771E-8	IMPLEMENTATION	2.15006743570581E-8	DEFECT	1.553621395310027E-8	TEST	3.556690886940033E-9	DOCUMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9998495134642266	WITHOUT_CLASSIFICATION	1.4269194166894355E-4	DESIGN	7.688861218729386E-6	DEFECT	6.29363862775137E-8	DOCUMENTATION	3.298837797283793E-8	TEST	9.808121558694155E-9	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.9999315972961583	WITHOUT_CLASSIFICATION	6.788207465003465E-5	DESIGN	2.2496880798542542E-7	IMPLEMENTATION	1.234750579674468E-7	DEFECT	1.0767208150486286E-7	DOCUMENTATION	6.451324427854387E-8	TEST
// the last used iterator	WITHOUT_CLASSIFICATION	0.9988141611208449	WITHOUT_CLASSIFICATION	0.0011857216282773547	DESIGN	9.373453359088154E-8	TEST	8.631151252187774E-9	DEFECT	7.850616206667397E-9	IMPLEMENTATION	7.034576811388036E-9	DOCUMENTATION
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999865775548991	WITHOUT_CLASSIFICATION	7.372272530142286E-6	DEFECT	6.031096184827027E-6	DESIGN	1.0358807221780238E-8	TEST	7.110482972704958E-9	DOCUMENTATION	1.607095708820186E-9	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9750089957170301	WITHOUT_CLASSIFICATION	0.024982943803640145	DESIGN	5.634351301991873E-6	DEFECT	1.256567680528589E-6	IMPLEMENTATION	1.10632163972459E-6	DOCUMENTATION	6.323870747002603E-8	TEST
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9893774372996198	WITHOUT_CLASSIFICATION	0.009860249933310021	DESIGN	7.007776237363401E-4	DEFECT	4.9401773568630874E-5	IMPLEMENTATION	1.1612652627958035E-5	TEST	5.207171373978363E-7	DOCUMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.997619803399724	WITHOUT_CLASSIFICATION	0.001858665749852621	IMPLEMENTATION	4.8010138019628405E-4	DESIGN	3.546016085285192E-5	TEST	4.865681223548072E-6	DOCUMENTATION	1.103628150733113E-6	DEFECT
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9927283850534137	WITHOUT_CLASSIFICATION	0.0071165391966808555	DESIGN	1.519716856714098E-4	DEFECT	2.730887760666189E-6	TEST	3.5635056648339516E-7	IMPLEMENTATION	1.682590688536652E-8	DOCUMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.999940745458991	WITHOUT_CLASSIFICATION	5.4196409876314225E-5	IMPLEMENTATION	3.974133446698566E-6	DESIGN	5.474590583769845E-7	DOCUMENTATION	4.3972418573077334E-7	DEFECT	9.681444200341752E-8	TEST
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999877150717783	WITHOUT_CLASSIFICATION	1.2195624659831432E-5	DEFECT	4.082749087167363E-8	DESIGN	2.4575987378065315E-8	TEST	2.2269441005656907E-8	IMPLEMENTATION	1.6306426722348974E-9	DOCUMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.99999761272334	WITHOUT_CLASSIFICATION	2.004841443683417E-6	IMPLEMENTATION	3.329351083056685E-7	DESIGN	3.7085830940132725E-8	DEFECT	1.1836578984835222E-8	DOCUMENTATION	5.776980434982442E-10	TEST
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999999794834739	WITHOUT_CLASSIFICATION	1.552844680470197E-8	DEFECT	3.179049938999741E-9	TEST	9.962589338245939E-10	DESIGN	7.614367533681692E-10	IMPLEMENTATION	5.1333918642992433E-11	DOCUMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999915762436363	WITHOUT_CLASSIFICATION	5.524669281201918E-6	DESIGN	1.657281095063013E-6	IMPLEMENTATION	7.239417413765606E-7	DEFECT	3.8871258273828306E-7	DOCUMENTATION	1.2915166320941043E-7	TEST
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999764303968666	WITHOUT_CLASSIFICATION	2.3224972818064406E-5	DESIGN	1.8868661220203427E-7	TEST	5.969819425718587E-8	DEFECT	5.587820432356329E-8	IMPLEMENTATION	4.0367304575112565E-8	DOCUMENTATION
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999801545834235	WITHOUT_CLASSIFICATION	1.9098420006267398E-5	DESIGN	4.501425696920664E-7	DEFECT	1.852313890277345E-7	TEST	6.42890037702537E-8	IMPLEMENTATION	4.733360758909215E-8	DOCUMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999128171830878	WITHOUT_CLASSIFICATION	8.154516288651484E-5	DESIGN	5.072929414277049E-6	DEFECT	4.823578148606276E-7	IMPLEMENTATION	5.3078952355129845E-8	DOCUMENTATION	2.9287844291688452E-8	TEST
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9994310170488965	WITHOUT_CLASSIFICATION	5.658122182096694E-4	DESIGN	2.0629190221396664E-6	TEST	8.810164248258604E-7	DOCUMENTATION	1.3360094494051575E-7	DEFECT	9.319650201761626E-8	IMPLEMENTATION
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.999997862279098	WITHOUT_CLASSIFICATION	8.558808484815217E-7	TEST	7.551508809959033E-7	DEFECT	2.9502766633071435E-7	IMPLEMENTATION	1.281731294986395E-7	DOCUMENTATION	1.0348837659960171E-7	DESIGN
//faster?	WITHOUT_CLASSIFICATION	0.9764435578100535	WITHOUT_CLASSIFICATION	0.023495225808223334	DESIGN	2.9867082312032696E-5	TEST	1.7958156014739972E-5	DEFECT	7.545913787126632E-6	IMPLEMENTATION	5.845229609201647E-6	DOCUMENTATION
// the name of a class	WITHOUT_CLASSIFICATION	0.9999006344990887	WITHOUT_CLASSIFICATION	9.692355556426525E-5	DESIGN	2.1131462813986224E-6	DEFECT	1.8305776968546523E-7	DOCUMENTATION	7.446783868551043E-8	TEST	7.12734570303944E-8	IMPLEMENTATION
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999915156359492	WITHOUT_CLASSIFICATION	8.391183099688924E-6	DESIGN	5.584654712085843E-8	DEFECT	1.9103426391360366E-8	TEST	1.2739279355632655E-8	IMPLEMENTATION	5.491698146875757E-9	DOCUMENTATION
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999884509111	WITHOUT_CLASSIFICATION	6.659065057507244E-6	DEFECT	2.552014939523707E-6	IMPLEMENTATION	1.8585831665186743E-6	DESIGN	2.8115541093984556E-7	TEST	1.982703253174204E-7	DOCUMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999944571596	WITHOUT_CLASSIFICATION	4.215790306865122E-9	DESIGN	9.370627364227814E-10	IMPLEMENTATION	3.539127698898605E-10	DOCUMENTATION	2.470178597097463E-11	DEFECT	1.1372674130137409E-11	TEST
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999849719103122	WITHOUT_CLASSIFICATION	1.3701271462698986E-5	DESIGN	9.721958182012542E-7	IMPLEMENTATION	2.979641144681891E-7	DEFECT	5.018953965853539E-8	DOCUMENTATION	6.468752766873305E-9	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.6469207223441695	DESIGN	0.15180446872967018	DEFECT	0.11498677688430559	WITHOUT_CLASSIFICATION	0.08604897537027943	IMPLEMENTATION	1.7563907128431464E-4	DOCUMENTATION	6.341760029097786E-5	TEST
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999962828016282	WITHOUT_CLASSIFICATION	3.689070845026903E-6	DESIGN	1.5392151610585128E-8	DOCUMENTATION	8.28274438265906E-9	DEFECT	2.3679195372147045E-9	TEST	2.0847112702329676E-9	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.999999731914101	WITHOUT_CLASSIFICATION	2.3735561609565107E-7	DESIGN	2.418047460025866E-8	IMPLEMENTATION	5.281539121582919E-9	DEFECT	7.851421762204111E-10	DOCUMENTATION	4.831270781393103E-10	TEST
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999719785051435	WITHOUT_CLASSIFICATION	1.5700526879691872E-5	DESIGN	5.639651727162435E-6	DEFECT	5.087527784804289E-6	IMPLEMENTATION	1.4340070042718372E-6	DOCUMENTATION	1.597814605099361E-7	TEST
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9997986770152575	WITHOUT_CLASSIFICATION	1.943896691144835E-4	DESIGN	5.9483162696597505E-6	IMPLEMENTATION	8.627642113194895E-7	DEFECT	9.520624633944005E-8	DOCUMENTATION	2.7028900627875257E-8	TEST
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9997304527298221	WITHOUT_CLASSIFICATION	1.4006105033913488E-4	DESIGN	5.987428082398265E-5	DEFECT	4.6589861771404126E-5	IMPLEMENTATION	1.4698268791427472E-5	TEST	8.32380845194687E-6	DOCUMENTATION
//readResolveObject	WITHOUT_CLASSIFICATION	0.99875112448604	WITHOUT_CLASSIFICATION	0.0012265978711837992	DESIGN	1.0408141045012081E-5	DEFECT	5.161081956115527E-6	DOCUMENTATION	4.819449008755448E-6	IMPLEMENTATION	1.8889707663092745E-6	TEST
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.999999948612139	WITHOUT_CLASSIFICATION	3.15608607560336E-8	DESIGN	1.585504199064681E-8	DEFECT	3.2492218683860262E-9	TEST	4.3915270036494936E-10	DOCUMENTATION	2.8358352735332047E-10	IMPLEMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999364239876847	WITHOUT_CLASSIFICATION	6.256764988797454E-5	IMPLEMENTATION	6.697600096338078E-7	DESIGN	2.7396989311778E-7	DOCUMENTATION	3.644031344662989E-8	DEFECT	2.819221108321193E-8	TEST
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999983770830745	WITHOUT_CLASSIFICATION	1.586760484012167E-6	DESIGN	1.7112394204222156E-8	DEFECT	9.491327891481447E-9	TEST	6.010300965204677E-9	IMPLEMENTATION	3.5424183104634287E-9	DOCUMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9988608809689985	WITHOUT_CLASSIFICATION	7.47388970996782E-4	DEFECT	3.908474316107584E-4	DESIGN	7.803970349049301E-7	IMPLEMENTATION	9.191126639689913E-8	TEST	1.0320092540819896E-8	DOCUMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9995332954316832	WITHOUT_CLASSIFICATION	4.458366839367761E-4	DEFECT	1.848579546770482E-5	DESIGN	1.355549073416582E-6	DOCUMENTATION	5.396485127882431E-7	IMPLEMENTATION	4.868913259404735E-7	TEST
// Write HTML header	WITHOUT_CLASSIFICATION	0.9998617697000407	WITHOUT_CLASSIFICATION	1.0945037152826679E-4	DESIGN	2.4576144951804357E-5	IMPLEMENTATION	3.3812834040344493E-6	DEFECT	6.31365058646679E-7	DOCUMENTATION	1.911350164578494E-7	TEST
// Handle actions	WITHOUT_CLASSIFICATION	0.9997807779941609	WITHOUT_CLASSIFICATION	1.1970707080996272E-4	IMPLEMENTATION	9.858023217697348E-5	DESIGN	5.031340035662864E-7	DEFECT	3.8364252132387046E-7	DOCUMENTATION	4.7926327192213994E-8	TEST
// Print page	WITHOUT_CLASSIFICATION	0.9999974621049161	WITHOUT_CLASSIFICATION	1.800322033659313E-6	IMPLEMENTATION	5.072922320602773E-7	DESIGN	1.704831562441783E-7	DEFECT	4.592872478351636E-8	DOCUMENTATION	1.3868937053260818E-8	TEST
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999770937984044	WITHOUT_CLASSIFICATION	1.940646222633359E-5	DESIGN	3.2281432519056776E-6	DEFECT	1.9029165909662912E-7	IMPLEMENTATION	4.519654241350756E-8	DOCUMENTATION	3.610791577137545E-8	TEST
// End unit of work	WITHOUT_CLASSIFICATION	0.9998998369228848	WITHOUT_CLASSIFICATION	8.285177082516155E-5	DEFECT	1.636750210186809E-5	DESIGN	4.4556542963211435E-7	IMPLEMENTATION	2.892194353781527E-7	TEST	2.0901932320600054E-7	DOCUMENTATION
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9803181914055558	WITHOUT_CLASSIFICATION	0.019681285338654944	DESIGN	4.2897279051683946E-7	TEST	4.3643942022612026E-8	DOCUMENTATION	4.0451726216349376E-8	DEFECT	1.0187330466956368E-8	IMPLEMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999990425195298	WITHOUT_CLASSIFICATION	5.5083407324535E-7	DESIGN	1.9067152007751422E-7	DEFECT	1.7142823216940245E-7	IMPLEMENTATION	3.4012869260587386E-8	DOCUMENTATION	1.0533775589080964E-8	TEST
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.999999960911211	WITHOUT_CLASSIFICATION	2.1300656169396722E-8	TEST	1.3615248355065977E-8	IMPLEMENTATION	2.257623699793112E-9	DEFECT	1.3016131212821815E-9	DESIGN	6.136475604632688E-10	DOCUMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9994134572799754	WITHOUT_CLASSIFICATION	4.8562223413289195E-4	DESIGN	9.915666923944973E-5	DEFECT	1.1111034487514216E-6	DOCUMENTATION	5.684026734867331E-7	IMPLEMENTATION	8.431052999342691E-8	TEST
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999901878808855	WITHOUT_CLASSIFICATION	7.787074630286292E-6	DESIGN	1.9836431565523724E-6	IMPLEMENTATION	2.3378062412436614E-8	DEFECT	1.5886199597236484E-8	DOCUMENTATION	2.1370656939176217E-9	TEST
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999999914978108	WITHOUT_CLASSIFICATION	3.896040887428509E-9	DESIGN	2.0352548796671787E-9	DEFECT	1.9561933783870733E-9	IMPLEMENTATION	5.322392019672987E-10	TEST	8.246085437293004E-11	DOCUMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999998921085	WITHOUT_CLASSIFICATION	1.0094408579497422E-10	DESIGN	4.498245928500759E-12	DEFECT	1.6635592472596296E-12	IMPLEMENTATION	5.40119452227294E-13	TEST	2.4537589601909315E-13	DOCUMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999807471821501	WITHOUT_CLASSIFICATION	1.4715316734796255E-5	DEFECT	3.943331858842567E-6	DESIGN	3.937307926639214E-7	TEST	1.2108661322037347E-7	IMPLEMENTATION	7.93518502509301E-8	DOCUMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.999975728966626	WITHOUT_CLASSIFICATION	2.237243239025426E-5	IMPLEMENTATION	1.8001275749837627E-6	DESIGN	7.614144648618034E-8	DEFECT	1.491067584998327E-8	DOCUMENTATION	7.421286411435448E-9	TEST
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9997989165558953	WITHOUT_CLASSIFICATION	1.5954209890380256E-4	DEFECT	3.7549969543679014E-5	DESIGN	2.8759442636041823E-6	DOCUMENTATION	9.460161253722254E-7	IMPLEMENTATION	1.694152681897667E-7	TEST
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999824926024533	WITHOUT_CLASSIFICATION	1.4404296022029187E-5	DESIGN	2.829467624087761E-6	DEFECT	1.7625138435842509E-7	DOCUMENTATION	6.657124971891361E-8	IMPLEMENTATION	3.0811266451257996E-8	TEST
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.993695228717383	WITHOUT_CLASSIFICATION	0.006170834258253945	DEFECT	1.1268541358106765E-4	DESIGN	1.9069433995681776E-5	IMPLEMENTATION	1.7388842777599313E-6	TEST	4.43292508514696E-7	DOCUMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999177931209356	WITHOUT_CLASSIFICATION	8.141704967865912E-5	DESIGN	6.211903332127456E-7	TEST	1.659129788863483E-7	DEFECT	2.111771403243437E-9	DOCUMENTATION	6.143022349509474E-10	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999986450880897	WITHOUT_CLASSIFICATION	7.803712574177727E-7	DEFECT	5.633869052759551E-7	IMPLEMENTATION	5.757416689130137E-9	TEST	3.594506989682473E-9	DOCUMENTATION	1.8018239517684879E-9	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999986450880897	WITHOUT_CLASSIFICATION	7.803712574177727E-7	DEFECT	5.633869052759551E-7	IMPLEMENTATION	5.757416689130137E-9	TEST	3.594506989682473E-9	DOCUMENTATION	1.8018239517684879E-9	DESIGN
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999998468882111	WITHOUT_CLASSIFICATION	1.5173369550863175E-7	DESIGN	1.0426513935245226E-9	TEST	2.6610381399590027E-10	DEFECT	5.8118219586905836E-11	DOCUMENTATION	1.1219835812491019E-11	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9996325880791441	WITHOUT_CLASSIFICATION	3.6552554215009625E-4	DESIGN	8.729188336465339E-7	TEST	5.282156013796933E-7	DEFECT	2.662585080605158E-7	DOCUMENTATION	2.1898576263985076E-7	IMPLEMENTATION
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999998261498088	WITHOUT_CLASSIFICATION	1.501128305680357E-7	IMPLEMENTATION	2.3255551438250588E-8	DESIGN	2.808380468930962E-10	DOCUMENTATION	1.6064083124801185E-10	TEST	4.033038839815512E-11	DEFECT
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9997297229786181	WITHOUT_CLASSIFICATION	2.7027463324701947E-4	DESIGN	1.5220487188810627E-9	DEFECT	5.012233663016792E-10	DOCUMENTATION	3.552068643610196E-10	TEST	9.65588267805832E-12	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9991175236456028	WITHOUT_CLASSIFICATION	8.779889121807086E-4	DEFECT	4.4339670991216335E-6	DESIGN	2.3501362710214018E-8	IMPLEMENTATION	2.3172418285761264E-8	TEST	6.8013364642252414E-9	DOCUMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999975252120357	WITHOUT_CLASSIFICATION	2.051169312517258E-6	IMPLEMENTATION	2.914617140188608E-7	DESIGN	8.03423347604116E-8	TEST	3.2774202233722064E-8	DEFECT	1.9040400839503727E-8	DOCUMENTATION
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999830710044273	WITHOUT_CLASSIFICATION	1.67419976928776E-5	DESIGN	1.7695363581541944E-7	DEFECT	5.098676307505627E-9	TEST	3.761603438988135E-9	DOCUMENTATION	1.183964164196845E-9	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.999999999997945	WITHOUT_CLASSIFICATION	1.7649573537527012E-12	DESIGN	2.685496838467614E-13	DEFECT	1.860761192553481E-14	IMPLEMENTATION	2.7268531215375755E-15	TEST	1.8094079665110036E-16	DOCUMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999935161381309	WITHOUT_CLASSIFICATION	6.077849448610895E-6	DEFECT	3.786820068820449E-7	DESIGN	1.4961675117952363E-8	TEST	1.1684463753293476E-8	DOCUMENTATION	6.842746988662728E-10	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999987064945605	WITHOUT_CLASSIFICATION	7.887143708141446E-7	DEFECT	4.7078106307289473E-7	DESIGN	2.111280892455469E-8	DOCUMENTATION	9.733530034286375E-9	TEST	3.1636666645057158E-9	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9971446772282246	WITHOUT_CLASSIFICATION	0.002793075593765462	DESIGN	6.22164063474556E-5	DEFECT	1.3194777220861472E-8	IMPLEMENTATION	1.0155599102408763E-8	DOCUMENTATION	7.421286037284741E-9	TEST
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9998312210555655	WITHOUT_CLASSIFICATION	1.4922910302028522E-4	DESIGN	1.761675879767791E-5	DEFECT	9.87825227732081E-7	TEST	6.217343290779356E-7	IMPLEMENTATION	3.2352305962258473E-7	DOCUMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999987616828546	WITHOUT_CLASSIFICATION	1.2297686000515679E-6	DEFECT	4.417503779424887E-9	DESIGN	3.6968237508122806E-9	IMPLEMENTATION	2.955106102573705E-10	TEST	1.3870723015029445E-10	DOCUMENTATION
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.999366054430357	WITHOUT_CLASSIFICATION	6.33918261808699E-4	DESIGN	2.351426089694089E-8	IMPLEMENTATION	2.581469645242752E-9	DOCUMENTATION	1.0157651193044258E-9	TEST	1.963385228437507E-10	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999989187861853	WITHOUT_CLASSIFICATION	9.742073693736538E-7	DESIGN	8.018289973507163E-8	IMPLEMENTATION	1.410535599851608E-8	DOCUMENTATION	6.732186165078112E-9	DEFECT	5.986003424935859E-9	TEST
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999989187861853	WITHOUT_CLASSIFICATION	9.742073693736538E-7	DESIGN	8.018289973507163E-8	IMPLEMENTATION	1.410535599851608E-8	DOCUMENTATION	6.732186165078112E-9	DEFECT	5.986003424935859E-9	TEST
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999997578790668	WITHOUT_CLASSIFICATION	2.394639979847269E-7	DESIGN	2.4873949646307235E-9	DEFECT	1.251914285242163E-10	TEST	3.6791600242242423E-11	DOCUMENTATION	7.557395173847943E-12	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9998058791456632	WITHOUT_CLASSIFICATION	1.932827670297114E-4	DEFECT	7.113947494222002E-7	IMPLEMENTATION	9.543234892596388E-8	DESIGN	2.8327683756078945E-8	TEST	2.9325250742575455E-9	DOCUMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.999999981170039	WITHOUT_CLASSIFICATION	1.608668294633313E-8	IMPLEMENTATION	1.4706964777268977E-9	DESIGN	5.215103765380765E-10	DOCUMENTATION	4.5483448100672406E-10	DEFECT	2.962367274855653E-10	TEST
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999347742422	WITHOUT_CLASSIFICATION	5.814843065361657E-8	DESIGN	6.709657167481983E-9	DOCUMENTATION	2.9499663873955985E-10	DEFECT	4.581562186893005E-11	IMPLEMENTATION	2.6857651180123143E-11	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999998514217391	WITHOUT_CLASSIFICATION	1.1835777614092675E-7	DESIGN	1.2632617310959513E-8	DOCUMENTATION	8.857325644642616E-9	IMPLEMENTATION	7.4136481918903856E-9	DEFECT	1.3168935755932685E-9	TEST
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960477484325	WITHOUT_CLASSIFICATION	3.077315798765956E-6	DESIGN	4.711901560198643E-7	IMPLEMENTATION	1.5248501916591662E-7	DEFECT	1.369168667257877E-7	TEST	1.1434372685537149E-7	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999982949021118	WITHOUT_CLASSIFICATION	7.49867431731067E-7	DEFECT	4.3676555722219574E-7	DESIGN	3.675145756924453E-7	IMPLEMENTATION	8.33083117517327E-8	DOCUMENTATION	6.764201181227276E-8	TEST
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.7520346094320063	WITHOUT_CLASSIFICATION	0.24711276971982765	DEFECT	4.0019933784152196E-4	DESIGN	2.7543586851375807E-4	IMPLEMENTATION	1.7520329234449485E-4	TEST	1.782349466226269E-6	DOCUMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999960349989366	WITHOUT_CLASSIFICATION	2.9905370035869215E-6	IMPLEMENTATION	9.538511188566326E-7	DESIGN	9.743667515881824E-9	DOCUMENTATION	9.383003913456564E-9	DEFECT	1.4862695502991436E-9	TEST
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999999973268985	WITHOUT_CLASSIFICATION	1.8110502738612208E-9	IMPLEMENTATION	5.917558438645227E-10	DESIGN	2.507374618132326E-10	TEST	1.9060508146097195E-11	DEFECT	4.974782665329364E-13	DOCUMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999995827091	WITHOUT_CLASSIFICATION	2.3216501516833581E-10	DESIGN	1.5760747651566595E-10	IMPLEMENTATION	2.6487423627764682E-11	DEFECT	7.771235112753826E-13	DOCUMENTATION	2.5398952049725954E-13	TEST
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999999903100057	WITHOUT_CLASSIFICATION	3.9753155020927096E-9	DOCUMENTATION	3.188924266019087E-9	DESIGN	1.2872972329031154E-9	TEST	9.981761866130384E-10	DEFECT	2.4028100098702627E-10	IMPLEMENTATION
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999989957519	WITHOUT_CLASSIFICATION	6.757528279202353E-10	DEFECT	1.9350308876947588E-10	DESIGN	9.6045707251987E-11	DOCUMENTATION	2.4351166892879067E-11	IMPLEMENTATION	1.459518148629853E-11	TEST
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.999998267472553	WITHOUT_CLASSIFICATION	1.3684921821145666E-6	DESIGN	3.1042994966369985E-7	IMPLEMENTATION	2.4441229887600032E-8	DEFECT	2.375348191096451E-8	TEST	5.410603524312352E-9	DOCUMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9970718508742537	DESIGN	0.002922602743723693	WITHOUT_CLASSIFICATION	4.8056718053888115E-6	DEFECT	3.734255025449295E-7	DOCUMENTATION	3.565301125917164E-7	TEST	1.075460195288583E-8	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9936630577652458	WITHOUT_CLASSIFICATION	0.0062754043457766496	DESIGN	6.10939505652975E-5	DEFECT	2.386697914354302E-7	IMPLEMENTATION	1.742234787296336E-7	TEST	3.104514195819626E-8	DOCUMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.8975083797958261	WITHOUT_CLASSIFICATION	0.10244825788021908	DESIGN	3.5907363558107576E-5	DEFECT	4.181720412363725E-6	TEST	3.2550447309853776E-6	IMPLEMENTATION	1.819525322791925E-8	DOCUMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9997125269640894	WITHOUT_CLASSIFICATION	2.828349696816927E-4	DESIGN	3.9185892646321806E-6	TEST	4.898070053564297E-7	DOCUMENTATION	1.5173118129422247E-7	DEFECT	7.793877757500724E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999989287082365	WITHOUT_CLASSIFICATION	8.607944278069675E-7	DEFECT	2.0425938365202787E-7	DESIGN	2.6439359337340907E-9	IMPLEMENTATION	2.244968131885494E-9	TEST	1.3490478781863843E-9	DOCUMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.99999999630343	WITHOUT_CLASSIFICATION	3.14299281080577E-9	DESIGN	3.44314686490673E-10	IMPLEMENTATION	2.042216510428117E-10	DEFECT	4.858565702792361E-12	TEST	1.8222317341720905E-13	DOCUMENTATION
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999870705832489	WITHOUT_CLASSIFICATION	1.2879057171732738E-5	DESIGN	4.9826744353904975E-8	DEFECT	2.2950802649148637E-10	DOCUMENTATION	1.9788629014927686E-10	TEST	1.0544062508257114E-10	IMPLEMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999999429432	WITHOUT_CLASSIFICATION	5.391614346263467E-11	DEFECT	1.649337704825875E-12	DESIGN	1.1015228738596277E-12	TEST	3.746822607101263E-13	DOCUMENTATION	1.5164358240774598E-14	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999817230235013	WITHOUT_CLASSIFICATION	1.8231656735485505E-5	DESIGN	2.5316898545671133E-8	DEFECT	1.3609439592304587E-8	TEST	3.481513985164278E-9	IMPLEMENTATION	2.911911059569196E-9	DOCUMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.9998860715075831	WITHOUT_CLASSIFICATION	1.0916550182848117E-4	DESIGN	2.847164134062779E-6	IMPLEMENTATION	1.3969002615622509E-6	TEST	3.3150171272723844E-7	DEFECT	1.8742448008991773E-7	DOCUMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.8882138160400521	WITHOUT_CLASSIFICATION	0.10642220130266657	DESIGN	0.004605975906931606	DEFECT	5.938254698636744E-4	TEST	1.55220530452659E-4	IMPLEMENTATION	8.960750033339512E-6	DOCUMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9570138313106392	WITHOUT_CLASSIFICATION	0.039515916516821584	DEFECT	0.003456514641046569	DESIGN	1.139263460558493E-5	IMPLEMENTATION	1.2484339186462669E-6	DOCUMENTATION	1.0964629683433422E-6	TEST
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999615773749368	WITHOUT_CLASSIFICATION	2.1070293391758357E-5	IMPLEMENTATION	1.7350691309695217E-5	DEFECT	8.887876059680048E-10	DOCUMENTATION	6.585793710431398E-10	TEST	9.299459476566514E-11	DESIGN
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9993154716150037	WITHOUT_CLASSIFICATION	6.287172205300434E-4	DEFECT	4.986362865171609E-5	IMPLEMENTATION	5.825086763105749E-6	DESIGN	9.346978715337265E-8	DOCUMENTATION	2.8979264359669065E-8	TEST
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.999808198726329	WITHOUT_CLASSIFICATION	1.898684154755195E-4	IMPLEMENTATION	1.061995675645994E-6	DESIGN	6.286476003665499E-7	DEFECT	2.4189523380089584E-7	TEST	3.1968574488380897E-10	DOCUMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9998958136564511	WITHOUT_CLASSIFICATION	1.019863210730458E-4	DESIGN	2.055883307938809E-6	DEFECT	9.498649004914238E-8	DOCUMENTATION	2.5176625408952977E-8	IMPLEMENTATION	2.3976052398184315E-8	TEST
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9992241161414935	WITHOUT_CLASSIFICATION	7.756882378869756E-4	DESIGN	1.707913295958312E-7	TEST	1.7441689705195062E-8	DOCUMENTATION	6.393503079302048E-9	DEFECT	9.940970762751593E-10	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999877426440174	WITHOUT_CLASSIFICATION	1.2224646362325727E-5	DEFECT	2.729364271670696E-8	DESIGN	3.896356383227294E-9	IMPLEMENTATION	8.293176695471375E-10	TEST	6.903036338862734E-10	DOCUMENTATION
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9998788168695102	WITHOUT_CLASSIFICATION	1.2117026146593051E-4	DESIGN	1.2547870062385466E-8	DEFECT	1.8145825050699544E-10	DOCUMENTATION	9.351325035219779E-11	IMPLEMENTATION	4.6182333660377844E-11	TEST
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999977476882783	WITHOUT_CLASSIFICATION	2.1237420652430905E-6	DESIGN	1.2256402194641676E-7	DEFECT	5.873577253353861E-9	IMPLEMENTATION	7.328467639767811E-11	TEST	5.877260299146167E-11	DOCUMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.7965443507089397	WITHOUT_CLASSIFICATION	0.1930140540968153	DESIGN	0.010364900054341217	DEFECT	3.146343636764085E-5	TEST	2.5471557600945167E-5	IMPLEMENTATION	1.9760145935252483E-5	DOCUMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999182327609151	WITHOUT_CLASSIFICATION	7.853345820225911E-5	DESIGN	3.1606429880142636E-6	DEFECT	5.960697815849041E-8	IMPLEMENTATION	7.970920789664579E-9	DOCUMENTATION	5.559995659395335E-9	TEST
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999919888962303	WITHOUT_CLASSIFICATION	8.009753626047908E-6	DESIGN	5.792638585836951E-10	DOCUMENTATION	5.182785530414961E-10	DEFECT	1.517972250237481E-10	IMPLEMENTATION	1.0080402130682849E-10	TEST
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999998698882594	WITHOUT_CLASSIFICATION	1.0672811621575485E-7	DESIGN	2.0328806050463653E-8	DEFECT	2.7401342744738307E-9	TEST	2.375233670059612E-10	DOCUMENTATION	7.716061161282245E-11	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999783314684223	WITHOUT_CLASSIFICATION	1.5084735246212141E-5	DEFECT	6.389435306180558E-6	DESIGN	1.2305304475755399E-7	TEST	5.763684680860771E-8	DOCUMENTATION	1.3671133695654946E-8	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9979896530769697	WITHOUT_CLASSIFICATION	0.002010227568835076	DESIGN	9.393453657810414E-8	DEFECT	1.4330209022460358E-8	IMPLEMENTATION	9.06495778349121E-9	TEST	2.0244919136410567E-9	DOCUMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9997195854894805	WITHOUT_CLASSIFICATION	1.2159949547330667E-4	DEFECT	1.0831550483763023E-4	DESIGN	4.729639741067208E-5	IMPLEMENTATION	2.723758916562183E-6	TEST	4.793538813656057E-7	DOCUMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9997195854894805	WITHOUT_CLASSIFICATION	1.2159949547330667E-4	DEFECT	1.0831550483763023E-4	DESIGN	4.729639741067208E-5	IMPLEMENTATION	2.723758916562183E-6	TEST	4.793538813656057E-7	DOCUMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999963821402	WITHOUT_CLASSIFICATION	3.5737766131816555E-9	DESIGN	1.7358950532295862E-11	IMPLEMENTATION	1.610953842537628E-11	DEFECT	8.06291258029092E-12	TEST	2.5516424752036052E-12	DOCUMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9983188939262602	WITHOUT_CLASSIFICATION	0.0014633509814955814	DESIGN	2.1764886868244979E-4	DEFECT	6.23130352753725E-8	TEST	4.226415943159462E-8	DOCUMENTATION	1.646367141680778E-9	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9149438211227159	WITHOUT_CLASSIFICATION	0.084652108211467	DESIGN	2.9745546657779654E-4	DEFECT	1.0536608884865656E-4	IMPLEMENTATION	1.0808441360849349E-6	DOCUMENTATION	1.6826625455970704E-7	TEST
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.999551468357102	WITHOUT_CLASSIFICATION	2.632085389144989E-4	DESIGN	1.775334608505588E-4	DEFECT	7.091995309677406E-6	IMPLEMENTATION	3.736407743804771E-7	DOCUMENTATION	3.240070490120847E-7	TEST
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999409968057742	WITHOUT_CLASSIFICATION	4.876441465732945E-5	IMPLEMENTATION	9.955838463260902E-6	DESIGN	2.6233801722010766E-7	DEFECT	1.4824260291077775E-8	TEST	5.778827763060012E-9	DOCUMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999969732328368	WITHOUT_CLASSIFICATION	2.9539306839761587E-6	DESIGN	6.175084935224714E-8	DEFECT	1.0913309270254424E-8	IMPLEMENTATION	1.346411928012563E-10	DOCUMENTATION	3.767953894925719E-11	TEST
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999978305526677	WITHOUT_CLASSIFICATION	1.2981795862968113E-6	DEFECT	5.34514847324432E-7	DESIGN	3.1598370718589303E-7	IMPLEMENTATION	1.9890034572197976E-8	DOCUMENTATION	8.791569569103848E-10	TEST
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999980384947902	WITHOUT_CLASSIFICATION	1.9495112308454846E-6	DESIGN	6.9725843256719495E-9	TEST	3.927452060452537E-9	DEFECT	1.0455215541371428E-9	DOCUMENTATION	4.842104900022677E-11	IMPLEMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.6781670518310785	DESIGN	0.30636618160254336	WITHOUT_CLASSIFICATION	0.01488219306925794	DEFECT	5.824356320338392E-4	IMPLEMENTATION	1.5321578560903138E-6	TEST	6.057072303683335E-7	DOCUMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996190167756	WITHOUT_CLASSIFICATION	2.4921482020591467E-7	DESIGN	9.053888972872568E-8	DEFECT	2.917129034279825E-8	IMPLEMENTATION	6.187933435626339E-9	TEST	5.8702908437727195E-9	DOCUMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998614251895	WITHOUT_CLASSIFICATION	1.0489293544114732E-7	DESIGN	2.2583884166762462E-8	DEFECT	7.619796747268708E-9	IMPLEMENTATION	1.870551280596269E-9	TEST	1.607642931457604E-9	DOCUMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.887372699006739	WITHOUT_CLASSIFICATION	0.11243289965584542	DESIGN	1.658057961877124E-4	DEFECT	2.7335499965425026E-5	TEST	1.0523286555727547E-6	IMPLEMENTATION	2.0771260687645138E-7	DOCUMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999980008211037	WITHOUT_CLASSIFICATION	1.085688347692488E-6	DEFECT	6.756837770982834E-7	TEST	1.3136406186877146E-7	DESIGN	7.42625570931099E-8	IMPLEMENTATION	3.2180152495892583E-8	DOCUMENTATION
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999573634418	WITHOUT_CLASSIFICATION	4.227180610092677E-8	DESIGN	2.3493351552635165E-10	TEST	1.1600421342179043E-10	DEFECT	7.724826665826677E-12	DOCUMENTATION	6.089430151921735E-12	IMPLEMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999718354315128	WITHOUT_CLASSIFICATION	2.811544364784479E-5	DESIGN	2.8840218972826914E-8	IMPLEMENTATION	1.971394332635226E-8	DEFECT	3.949753162896277E-10	DOCUMENTATION	1.757018092444138E-10	TEST
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9998218307235807	WITHOUT_CLASSIFICATION	1.7675299103852145E-4	DESIGN	7.310418839141213E-7	IMPLEMENTATION	4.7287345813212716E-7	DOCUMENTATION	1.3558759565612096E-7	TEST	7.678244315853746E-8	DEFECT
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9982911847027792	WITHOUT_CLASSIFICATION	0.0013828029154793458	DESIGN	3.258109815282143E-4	DEFECT	1.0293503246131321E-7	TEST	6.335607611943048E-8	DOCUMENTATION	3.5109104746603295E-8	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999999276539324	WITHOUT_CLASSIFICATION	2.919585878512261E-8	DESIGN	2.3096591886340918E-8	DEFECT	1.975892585616549E-8	IMPLEMENTATION	2.803758480076211E-10	DOCUMENTATION	1.4315170157576728E-11	TEST
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999996107062519	WITHOUT_CLASSIFICATION	2.042819209068348E-7	DEFECT	1.3018118456115562E-7	DESIGN	3.594623538815158E-8	IMPLEMENTATION	1.6689303971864863E-8	TEST	2.1951033280226853E-9	DOCUMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.999996448974649	WITHOUT_CLASSIFICATION	2.23095356661891E-6	DESIGN	1.2931396312336625E-6	DEFECT	2.1661216468348843E-8	TEST	3.8000217477652934E-9	DOCUMENTATION	1.4709150794672691E-9	IMPLEMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9839953568077147	WITHOUT_CLASSIFICATION	0.00986926225553621	DESIGN	0.00613072148672456	DEFECT	3.778945661689353E-6	TEST	7.282580498425306E-7	DOCUMENTATION	1.5224631304192005E-7	IMPLEMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.999991016566241	WITHOUT_CLASSIFICATION	8.677914409493459E-6	DESIGN	1.926767978114876E-7	IMPLEMENTATION	1.0986700339433828E-7	DEFECT	2.186401933743477E-9	DOCUMENTATION	7.891464043246037E-10	TEST
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9998822329941502	WITHOUT_CLASSIFICATION	7.635709077999641E-5	DESIGN	3.981200544924589E-5	IMPLEMENTATION	1.1528136999501777E-6	TEST	4.4208859822249783E-7	DOCUMENTATION	3.0073222871310986E-9	DEFECT
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9910966255560487	WITHOUT_CLASSIFICATION	0.008874478100009922	DESIGN	2.4468474909736018E-5	DEFECT	2.6111522086125924E-6	DOCUMENTATION	1.2837089095159622E-6	IMPLEMENTATION	5.330079134494457E-7	TEST
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9808866945126358	WITHOUT_CLASSIFICATION	0.018730810221948627	DESIGN	1.9217999616710272E-4	IMPLEMENTATION	1.6512631721212254E-4	DEFECT	2.2242372722575024E-5	TEST	2.9465793138544704E-6	DOCUMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9997024507851769	WITHOUT_CLASSIFICATION	1.459409037721667E-4	DESIGN	8.890931549145143E-5	IMPLEMENTATION	3.467268551800412E-5	DEFECT	2.5783291047306258E-5	TEST	2.243018994308987E-6	DOCUMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999979584967222	WITHOUT_CLASSIFICATION	1.1796642203847077E-6	DESIGN	8.323935919887185E-7	IMPLEMENTATION	2.5399093007241283E-8	DEFECT	3.884040322895572E-9	DOCUMENTATION	1.6233206718908341E-10	TEST
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.999999998663491	WITHOUT_CLASSIFICATION	6.753243906474137E-10	DEFECT	3.264361900981033E-10	TEST	3.0762678406974364E-10	DESIGN	2.5757141737158816E-11	DOCUMENTATION	1.3645788143755837E-12	IMPLEMENTATION
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999999681357935	WITHOUT_CLASSIFICATION	2.4259753450841364E-8	DESIGN	4.827842974745797E-9	DEFECT	2.748677766378302E-9	IMPLEMENTATION	2.278446355881513E-11	DOCUMENTATION	5.14775084795464E-12	TEST
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999871648966844	WITHOUT_CLASSIFICATION	6.489052093036259E-6	DEFECT	6.096260159195492E-6	DESIGN	2.4093246418646755E-7	IMPLEMENTATION	6.972150086178266E-9	TEST	1.886448953876146E-9	DOCUMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9998809176683374	WITHOUT_CLASSIFICATION	9.96589925649025E-5	IMPLEMENTATION	1.9026319471367824E-5	DESIGN	2.614603105438015E-7	DEFECT	1.21763177395349E-7	DOCUMENTATION	1.3796138354490851E-8	TEST
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9996657125813821	WITHOUT_CLASSIFICATION	3.234816273470187E-4	DESIGN	4.8835573135398715E-6	DEFECT	4.537338308109616E-6	IMPLEMENTATION	1.024690037433646E-6	DOCUMENTATION	3.602056118264019E-7	TEST
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999836450918173	WITHOUT_CLASSIFICATION	1.623394723368759E-5	DESIGN	1.1512823752817984E-7	IMPLEMENTATION	3.872160562887078E-9	DEFECT	1.94859719144623E-9	TEST	1.1953860711050366E-11	DOCUMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999536963101	WITHOUT_CLASSIFICATION	4.454003682310202E-8	DESIGN	1.7326882057550903E-9	DEFECT	1.9247483800768334E-11	DOCUMENTATION	9.37848637757323E-12	TEST	2.3390090404969666E-12	IMPLEMENTATION
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999995422726188	WITHOUT_CLASSIFICATION	4.539543389299657E-7	DESIGN	3.4819430324392735E-9	TEST	1.3735969441932946E-10	DEFECT	1.2583647396628657E-10	IMPLEMENTATION	2.7902890388805713E-11	DOCUMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999638191943352	WITHOUT_CLASSIFICATION	3.445565596959531E-5	DESIGN	1.6272690608148934E-6	IMPLEMENTATION	9.689371188150595E-8	DEFECT	8.279233756561811E-10	TEST	1.589990013607035E-10	DOCUMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999994918560801	WITHOUT_CLASSIFICATION	4.6397191109137404E-7	DESIGN	3.236508124668661E-8	TEST	1.0985057132609551E-8	DEFECT	4.1264456605473324E-10	DOCUMENTATION	4.092258787115249E-10	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999878609052	WITHOUT_CLASSIFICATION	1.1872371155268542E-8	DESIGN	1.71834639351078E-10	DEFECT	5.294931226827812E-11	TEST	3.9765577084503034E-11	DOCUMENTATION	2.1742453728147594E-12	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9997361352284828	WITHOUT_CLASSIFICATION	2.340446623460641E-4	DESIGN	1.2691007397467177E-5	IMPLEMENTATION	1.186605290226179E-5	DEFECT	5.1181482732263825E-6	TEST	1.4490059805514495E-7	DOCUMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999903427655024	WITHOUT_CLASSIFICATION	8.851941039006023E-6	DESIGN	6.467815646126387E-7	DEFECT	5.8881468447202466E-8	IMPLEMENTATION	5.568639613316614E-8	TEST	4.3944029494116715E-8	DOCUMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999966787111635	WITHOUT_CLASSIFICATION	2.036016301384882E-6	DEFECT	5.992468439050545E-7	DESIGN	5.941727594834705E-7	IMPLEMENTATION	8.884060353629205E-8	TEST	3.012328192819638E-9	DOCUMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9996283778677283	WITHOUT_CLASSIFICATION	2.863395094575644E-4	DEFECT	8.52669524695819E-5	DESIGN	6.74447517781271E-9	DOCUMENTATION	6.619642084368373E-9	TEST	2.3062272533264346E-9	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.99999965331826	WITHOUT_CLASSIFICATION	1.7955688596672112E-7	DESIGN	1.5129706670877968E-7	IMPLEMENTATION	8.808725447300222E-9	DEFECT	6.750816918053509E-9	TEST	2.68245097181438E-10	DOCUMENTATION
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999992964716337	WITHOUT_CLASSIFICATION	6.762462618096783E-7	TEST	2.7227440941254746E-8	DEFECT	3.8464979884407346E-11	DESIGN	1.6176027204017784E-11	DOCUMENTATION	2.2544683246507955E-14	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999334522558264	WITHOUT_CLASSIFICATION	6.65325024116745E-5	DESIGN	1.1311009142827138E-8	DEFECT	2.293670693187384E-9	IMPLEMENTATION	1.024223245985455E-9	TEST	6.128587968012279E-10	DOCUMENTATION
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9997179077546178	WITHOUT_CLASSIFICATION	1.5344072094361112E-4	DEFECT	1.2680635913888517E-4	DESIGN	1.7314893128132256E-6	IMPLEMENTATION	9.437950150594946E-8	TEST	1.9296485384669063E-8	DOCUMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9996748749325925	WITHOUT_CLASSIFICATION	3.19635239263046E-4	DESIGN	5.36710523109723E-6	DEFECT	6.943402836086679E-8	DOCUMENTATION	3.9413625335104744E-8	IMPLEMENTATION	1.3875259695953046E-8	TEST
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999987616828546	WITHOUT_CLASSIFICATION	1.2297686000515679E-6	DEFECT	4.417503779424887E-9	DESIGN	3.6968237508122806E-9	IMPLEMENTATION	2.955106102573705E-10	TEST	1.3870723015029445E-10	DOCUMENTATION
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.999999999469271	WITHOUT_CLASSIFICATION	3.1803638766601557E-10	DESIGN	1.6788853768884836E-10	DEFECT	4.387656394821161E-11	TEST	7.476057465129667E-13	IMPLEMENTATION	1.7984725385975052E-13	DOCUMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999997136569	WITHOUT_CLASSIFICATION	2.8345568681722697E-10	DESIGN	2.4934988567105633E-12	TEST	2.006187529517508E-13	DOCUMENTATION	1.5206854976056425E-13	DEFECT	4.1194866988327086E-14	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999830827963225	WITHOUT_CLASSIFICATION	9.785254987284412E-6	IMPLEMENTATION	6.295027139472583E-6	DESIGN	7.900498347320465E-7	DEFECT	4.6519917998253355E-8	DOCUMENTATION	3.5179804940161006E-10	TEST
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.6058068706512175	WITHOUT_CLASSIFICATION	0.39381795329443	DESIGN	3.6380144706179207E-4	IMPLEMENTATION	8.356164437278838E-6	DOCUMENTATION	2.0439666800067814E-6	DEFECT	9.74476173405617E-7	TEST
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999960528897	WITHOUT_CLASSIFICATION	1.664335889213761E-9	DESIGN	1.2681000559325859E-9	DEFECT	9.15307609381688E-10	DOCUMENTATION	8.869496029956042E-11	TEST	1.0671856630109787E-11	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9994173371130612	WITHOUT_CLASSIFICATION	4.775826697173169E-4	DEFECT	9.93344298537605E-5	DESIGN	5.674122764195612E-6	IMPLEMENTATION	3.652997785540764E-8	TEST	3.5134625741484906E-8	DOCUMENTATION
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9984527791801695	WITHOUT_CLASSIFICATION	0.0015438757806116765	IMPLEMENTATION	1.6662959670157482E-6	DEFECT	1.6145511685323071E-6	DESIGN	3.336193373051408E-8	DOCUMENTATION	3.083014954383877E-8	TEST
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.999999338496421	WITHOUT_CLASSIFICATION	5.931853077794571E-7	DEFECT	4.355297126244917E-8	DOCUMENTATION	2.0886224727303154E-8	TEST	3.7807269393702046E-9	DESIGN	9.834820249611915E-11	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999722493137	WITHOUT_CLASSIFICATION	2.4262019638512992E-8	DESIGN	1.7111957992396824E-9	DEFECT	1.4038357419808509E-9	DOCUMENTATION	3.7182684334493557E-10	TEST	1.8082694344286043E-12	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.999974473488495	WITHOUT_CLASSIFICATION	2.035938918321218E-5	IMPLEMENTATION	5.107036527245117E-6	DEFECT	2.3932864710123276E-8	TEST	1.9286938929881097E-8	DESIGN	1.6865990955045014E-8	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999999997691202	WITHOUT_CLASSIFICATION	1.6434512671077792E-10	DESIGN	6.606303816197376E-11	DEFECT	3.8137800725206196E-13	DOCUMENTATION	7.394878376548987E-14	IMPLEMENTATION	1.628099847396236E-14	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.998936460216309	WITHOUT_CLASSIFICATION	0.0010589455314830814	DESIGN	4.158527389362311E-6	DEFECT	3.089806163432559E-7	DOCUMENTATION	8.69898753730687E-8	IMPLEMENTATION	3.975432696704309E-8	TEST
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999999524102576	WITHOUT_CLASSIFICATION	3.192556465129735E-8	DEFECT	1.4937472370286493E-8	DESIGN	5.94678755133928E-10	DOCUMENTATION	1.318207092020299E-10	TEST	2.0589494446372216E-13	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999925494180276	WITHOUT_CLASSIFICATION	6.2880122656612275E-6	DESIGN	1.1423254919955291E-6	DEFECT	1.391985802898827E-8	TEST	5.11527802649859E-9	IMPLEMENTATION	1.209078671395568E-9	DOCUMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995935462562	WITHOUT_CLASSIFICATION	3.888493202223462E-7	DESIGN	9.375728845090661E-9	DEFECT	4.138583832015268E-9	IMPLEMENTATION	2.560105556090156E-9	TEST	1.5300053802921704E-9	DOCUMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999959014954833	WITHOUT_CLASSIFICATION	3.6820108020166773E-6	IMPLEMENTATION	3.278750120877162E-7	DEFECT	7.551762385608742E-8	TEST	8.197258437212953E-9	DOCUMENTATION	4.903820268573065E-9	DESIGN
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999997893104632	WITHOUT_CLASSIFICATION	1.4240358340689475E-7	DEFECT	4.061889066970098E-8	IMPLEMENTATION	1.4339521016245113E-8	DESIGN	1.1929630499218938E-8	TEST	1.3979112198523981E-9	DOCUMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999486961286	WITHOUT_CLASSIFICATION	4.3123369733729383E-8	DESIGN	5.581860516507819E-9	DEFECT	2.267668342141946E-9	IMPLEMENTATION	3.153276049133082E-10	TEST	1.5645332608463585E-11	DOCUMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999013036798222	WITHOUT_CLASSIFICATION	8.2783182836438E-5	DESIGN	1.546385368776628E-5	DEFECT	2.6927519278904615E-7	TEST	1.4990243243650776E-7	DOCUMENTATION	3.010602830819431E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995935462562	WITHOUT_CLASSIFICATION	3.888493202223462E-7	DESIGN	9.375728845090661E-9	DEFECT	4.138583832015268E-9	IMPLEMENTATION	2.560105556090156E-9	TEST	1.5300053802921704E-9	DOCUMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999857239872956	WITHOUT_CLASSIFICATION	1.1217964084749022E-5	DEFECT	2.6321914818362565E-6	TEST	2.438194975549387E-7	DOCUMENTATION	1.5789117060064634E-7	DESIGN	2.414646964815743E-8	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.999999999452014	WITHOUT_CLASSIFICATION	5.369174950884858E-10	DESIGN	7.596613222909311E-12	DEFECT	1.6780213372000106E-12	DOCUMENTATION	1.2343377420210718E-12	TEST	5.594900364455862E-13	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999303656814458	WITHOUT_CLASSIFICATION	6.96312087629041E-5	DESIGN	2.8717961823192315E-9	DEFECT	1.4669271449336571E-10	TEST	7.32181354733479E-11	IMPLEMENTATION	1.80841930499951E-11	DOCUMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.999962932828857	WITHOUT_CLASSIFICATION	3.705494530425188E-5	DEFECT	6.35137959318749E-9	DESIGN	4.452464415836316E-9	IMPLEMENTATION	1.1323116143348379E-9	TEST	2.896830510200582E-10	DOCUMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999963377567427	WITHOUT_CLASSIFICATION	2.6128255037738587E-6	DEFECT	7.022935502502989E-7	DESIGN	2.038456728761716E-7	IMPLEMENTATION	7.482667046163008E-8	DOCUMENTATION	6.845185993646993E-8	TEST
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999724307678257	WITHOUT_CLASSIFICATION	1.5325329511987676E-5	DESIGN	1.2225278536908105E-5	DEFECT	1.1886248497149079E-8	TEST	6.426943253488283E-9	DOCUMENTATION	3.1093364807840914E-10	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999997496723817	WITHOUT_CLASSIFICATION	2.4974893974442934E-7	DESIGN	3.000747520807743E-10	IMPLEMENTATION	2.0082123787101888E-10	DOCUMENTATION	6.423444298718518E-11	DEFECT	1.354802971339132E-11	TEST
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9942466265404709	WITHOUT_CLASSIFICATION	0.005282607329620926	DESIGN	2.6988444044327806E-4	DEFECT	1.5027202632092421E-4	IMPLEMENTATION	4.920324216371744E-5	TEST	1.4064209802502388E-6	DOCUMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999998693120885	WITHOUT_CLASSIFICATION	1.0870826249549825E-7	DEFECT	2.1513612039746226E-8	DESIGN	4.292850464004505E-10	DOCUMENTATION	3.5894388438716355E-11	TEST	8.573139475982119E-13	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999093973410595	WITHOUT_CLASSIFICATION	8.041604439754258E-5	DEFECT	9.294733564796068E-6	IMPLEMENTATION	6.016849815529191E-7	DESIGN	2.714924773707243E-7	TEST	1.8703519210863977E-8	DOCUMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999984009278521	WITHOUT_CLASSIFICATION	1.0645719285275594E-6	IMPLEMENTATION	4.1290753564226465E-7	DESIGN	9.936277309960128E-8	DEFECT	1.9537962822573406E-8	TEST	2.6919477716739445E-9	DOCUMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9868295145149595	WITHOUT_CLASSIFICATION	0.0063316659987607835	IMPLEMENTATION	0.00537132917907977	DESIGN	0.001014606492165918	TEST	4.4946914710439727E-4	DEFECT	3.4146679296845434E-6	DOCUMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999608991819339	WITHOUT_CLASSIFICATION	3.5032845117912005E-5	DESIGN	4.05796210266327E-6	DEFECT	4.3201371747366425E-9	IMPLEMENTATION	4.2656244133997256E-9	DOCUMENTATION	1.4250839868553842E-9	TEST
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9998740654325381	WITHOUT_CLASSIFICATION	1.2525328386518532E-4	IMPLEMENTATION	4.3191698839913325E-7	DOCUMENTATION	2.081240814017823E-7	DESIGN	3.9973020708347836E-8	DEFECT	1.2695061682140134E-9	TEST
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999985922205465	WITHOUT_CLASSIFICATION	9.891059833746261E-7	DESIGN	3.607034073960118E-7	DEFECT	5.307861467659347E-8	IMPLEMENTATION	4.2603652576392284E-9	DOCUMENTATION	6.310827762590255E-10	TEST
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999989257167873	WITHOUT_CLASSIFICATION	1.0434762055432213E-6	DEFECT	1.9281010968837343E-8	DESIGN	6.876083662731485E-9	DOCUMENTATION	3.038840562150872E-9	TEST	1.611072055408577E-9	IMPLEMENTATION
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999995727669252	WITHOUT_CLASSIFICATION	4.252326903155771E-7	DESIGN	1.8024491651687473E-9	DEFECT	1.9427013814025582E-10	DOCUMENTATION	2.994924241215244E-12	TEST	6.702108802202962E-13	IMPLEMENTATION
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999995550182849	WITHOUT_CLASSIFICATION	2.7122942442481953E-7	DEFECT	6.596585011838692E-8	DOCUMENTATION	6.094064957248391E-8	IMPLEMENTATION	4.6060767768920714E-8	DESIGN	7.850232329164333E-10	TEST
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9997554207055249	WITHOUT_CLASSIFICATION	1.1734382707267129E-4	IMPLEMENTATION	1.1541884407464492E-4	DESIGN	7.030674772426651E-6	TEST	4.587413534177024E-6	DEFECT	1.9853502117964184E-7	DOCUMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.8368502629467115	WITHOUT_CLASSIFICATION	0.16175911731272768	DESIGN	0.0013905089048567977	DEFECT	8.135706532063754E-8	DOCUMENTATION	1.888730721394919E-8	TEST	1.0591331392792904E-8	IMPLEMENTATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999993218520962	WITHOUT_CLASSIFICATION	5.519064055625923E-7	IMPLEMENTATION	1.2300771547991503E-7	DESIGN	2.813293701092981E-9	DOCUMENTATION	2.7413223348111937E-10	DEFECT	1.463569011137381E-10	TEST
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999998781666778	WITHOUT_CLASSIFICATION	9.524270472950125E-8	IMPLEMENTATION	2.2988052165894338E-8	DESIGN	3.3935497037903563E-9	DEFECT	1.3407671152939173E-10	DOCUMENTATION	7.493868884490188E-11	TEST
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999997575541607	WITHOUT_CLASSIFICATION	2.2960904094866823E-7	DEFECT	1.1636596328883574E-8	DESIGN	6.687246628671348E-10	DOCUMENTATION	5.110812435318117E-10	IMPLEMENTATION	2.039611578012099E-11	TEST
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999998430501	WITHOUT_CLASSIFICATION	1.0168284087874676E-10	IMPLEMENTATION	5.4956300110509876E-11	DESIGN	1.4501045587560363E-13	TEST	1.3999522848204772E-13	DOCUMENTATION	2.5612581212766417E-14	DEFECT
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999991017735	WITHOUT_CLASSIFICATION	5.016017846661249E-10	DEFECT	3.8947292201338747E-10	DESIGN	3.823664999428674E-12	IMPLEMENTATION	1.8704220733958714E-12	DOCUMENTATION	1.4577586048572888E-12	TEST
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.999997782532959	WITHOUT_CLASSIFICATION	2.198200766724763E-6	DEFECT	1.629041096329619E-8	TEST	2.5677973316345205E-9	DESIGN	3.052737790306278E-10	DOCUMENTATION	1.0279217470531686E-10	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9934103956903859	WITHOUT_CLASSIFICATION	0.006381686799995005	DEFECT	2.0772432153925627E-4	DESIGN	1.860268476563908E-7	TEST	6.1132544363428534E-9	DOCUMENTATION	1.0479776556856423E-9	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999991374077085	WITHOUT_CLASSIFICATION	8.42793575566047E-7	DESIGN	1.375374085344521E-8	TEST	3.912429109036699E-9	DEFECT	1.8354189854696525E-9	IMPLEMENTATION	2.971269086154899E-10	DOCUMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9952758716504857	WITHOUT_CLASSIFICATION	0.003580433310693428	DESIGN	0.0010986203345250132	IMPLEMENTATION	4.059554762101795E-5	DEFECT	4.228553953677386E-6	TEST	2.506027211543671E-7	DOCUMENTATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.976462042338215	WITHOUT_CLASSIFICATION	0.023527723726223106	DEFECT	9.185309252530743E-6	IMPLEMENTATION	6.063731253267838E-7	DOCUMENTATION	3.621607190211085E-7	DESIGN	8.009246508751164E-8	TEST
// and perform the load	WITHOUT_CLASSIFICATION	0.9999988346296514	WITHOUT_CLASSIFICATION	1.0918191416424196E-6	DESIGN	4.012725146078482E-8	IMPLEMENTATION	1.5868721508065716E-8	DOCUMENTATION	1.3521405173337445E-8	DEFECT	4.0338289038062434E-9	TEST
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9339853931007107	WITHOUT_CLASSIFICATION	0.06550445557866592	DESIGN	4.014064908793345E-4	DEFECT	7.092366652557586E-5	IMPLEMENTATION	3.6856069564064674E-5	DOCUMENTATION	9.650936543174027E-7	TEST
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.97571587729939	WITHOUT_CLASSIFICATION	0.022792934998871923	DEFECT	0.0014751894657371108	DESIGN	1.4952402942815069E-5	IMPLEMENTATION	7.651011924559398E-7	DOCUMENTATION	2.807318657882218E-7	TEST
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999748550623152	WITHOUT_CLASSIFICATION	2.5035463310317588E-5	DESIGN	1.0529007785939547E-7	DEFECT	2.452551081578708E-9	IMPLEMENTATION	1.4605913345194516E-9	DOCUMENTATION	2.711540977412269E-10	TEST
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999983134673	WITHOUT_CLASSIFICATION	1.665447350879636E-9	DESIGN	1.7715676702264048E-11	DEFECT	1.9347057629403726E-12	TEST	1.351343602099872E-12	IMPLEMENTATION	8.360328398266929E-14	DOCUMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999998549450912	WITHOUT_CLASSIFICATION	8.215433990617841E-8	DESIGN	5.5221181924934935E-8	DEFECT	6.880198622773376E-9	TEST	7.551860232708601E-10	IMPLEMENTATION	4.400223442258888E-11	DOCUMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999910629051646	WITHOUT_CLASSIFICATION	8.847070187737063E-6	DESIGN	6.110270369773126E-8	TEST	2.3092040608703216E-8	DEFECT	4.842655021801051E-9	IMPLEMENTATION	9.872483119177752E-10	DOCUMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9966351951379351	WITHOUT_CLASSIFICATION	0.003347193419203174	DESIGN	1.6730683076096338E-5	DEFECT	4.950178808011411E-7	IMPLEMENTATION	2.132007105546352E-7	TEST	1.7254119433842614E-7	DOCUMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999956030223	WITHOUT_CLASSIFICATION	3.665448447886453E-9	DESIGN	6.917825804463605E-10	DEFECT	2.243817291968859E-11	DOCUMENTATION	1.3036172844051686E-11	TEST	4.272322167217993E-12	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999999998052967	WITHOUT_CLASSIFICATION	1.2363770328640045E-9	DEFECT	5.586475354332725E-10	DOCUMENTATION	1.3983964741474706E-10	DESIGN	8.591266222391812E-12	TEST	3.5773619557110217E-12	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999966881549367	WITHOUT_CLASSIFICATION	2.5309411681611098E-5	IMPLEMENTATION	7.59949133438216E-6	DESIGN	1.3512263134819039E-7	DOCUMENTATION	6.934121087079182E-8	DEFECT	5.08377466403048E-9	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999966881549367	WITHOUT_CLASSIFICATION	2.5309411681611098E-5	IMPLEMENTATION	7.59949133438216E-6	DESIGN	1.3512263134819039E-7	DOCUMENTATION	6.934121087079182E-8	DEFECT	5.08377466403048E-9	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999866600240516	WITHOUT_CLASSIFICATION	9.295364078359881E-6	DESIGN	3.902090782101667E-6	DEFECT	1.287215466807144E-7	TEST	1.3470519245939718E-8	DOCUMENTATION	3.29021975888658E-10	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999965814127204	WITHOUT_CLASSIFICATION	3.3975146112063197E-6	DESIGN	1.901696921632696E-8	DEFECT	9.928883990442757E-10	IMPLEMENTATION	9.31108968388986E-10	TEST	1.317018191902602E-10	DOCUMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999976996137034	WITHOUT_CLASSIFICATION	2.2887979950264613E-6	DESIGN	6.768525608520598E-9	DEFECT	3.93125586354882E-9	IMPLEMENTATION	6.686209223113099E-10	TEST	2.1989941436206933E-10	DOCUMENTATION
/**	WITHOUT_CLASSIFICATION	0.4099703815469931	DOCUMENTATION	0.377254050133344	DESIGN	0.10446024197441676	IMPLEMENTATION	0.04010368760390805	WITHOUT_CLASSIFICATION	0.034408704179707664	DEFECT	0.033802934561630235	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999990459050013	WITHOUT_CLASSIFICATION	4.2388780309885805E-7	DESIGN	3.5958501921051685E-7	DEFECT	1.3833582333046307E-7	IMPLEMENTATION	2.5426477751256433E-8	DOCUMENTATION	6.8598753722578014E-9	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999990459050013	WITHOUT_CLASSIFICATION	4.2388780309885805E-7	DESIGN	3.5958501921051685E-7	DEFECT	1.3833582333046307E-7	IMPLEMENTATION	2.5426477751256433E-8	DOCUMENTATION	6.8598753722578014E-9	TEST
//        }	WITHOUT_CLASSIFICATION	0.9999965666761074	WITHOUT_CLASSIFICATION	1.382577796131637E-6	DESIGN	1.194816434118645E-6	DEFECT	5.762440248159335E-7	IMPLEMENTATION	1.5853804929043045E-7	DOCUMENTATION	1.211475882690842E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999840761747821	WITHOUT_CLASSIFICATION	1.5888323784536042E-5	DESIGN	2.2984651209247017E-8	DEFECT	6.5189580563623E-9	DOCUMENTATION	3.322267958435383E-9	TEST	2.675556198216565E-9	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9964748966448758	WITHOUT_CLASSIFICATION	0.0034652972329289964	DESIGN	2.4216153279714086E-5	DEFECT	1.493275599812854E-5	IMPLEMENTATION	1.0713064353349212E-5	TEST	9.944148563949439E-6	DOCUMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999668934748754	WITHOUT_CLASSIFICATION	1.3298508062326377E-5	DESIGN	9.985847223008998E-6	TEST	7.830957525423933E-6	DEFECT	1.8123319291607047E-6	IMPLEMENTATION	1.788803845479569E-7	DOCUMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999247582975	WITHOUT_CLASSIFICATION	7.203196957467777E-8	DESIGN	2.1144905075355905E-9	DEFECT	1.0192655949609356E-9	IMPLEMENTATION	5.8156537601108074E-11	DOCUMENTATION	1.782026431897515E-11	TEST
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999820719121355	WITHOUT_CLASSIFICATION	1.2175341902759642E-5	IMPLEMENTATION	4.542628370667735E-6	DEFECT	6.330974799551353E-7	TEST	4.03403056794824E-7	DESIGN	1.7361705422695263E-7	DOCUMENTATION
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999921040157423	WITHOUT_CLASSIFICATION	7.271486203022532E-6	DESIGN	6.007564599568632E-7	DEFECT	1.4154517581169091E-8	DOCUMENTATION	6.189508412426773E-9	TEST	3.3975686333976685E-9	IMPLEMENTATION
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.999999276784191	WITHOUT_CLASSIFICATION	7.206376607551071E-7	DESIGN	9.827242306611397E-10	DEFECT	7.660108513293496E-10	IMPLEMENTATION	5.215489191769423E-10	DOCUMENTATION	3.0786419922435166E-10	TEST
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999922130954979	WITHOUT_CLASSIFICATION	4.26279012544634E-6	DESIGN	3.254506937528219E-6	DEFECT	2.694156405724519E-7	TEST	1.778993440850954E-10	DOCUMENTATION	1.3899029862530478E-11	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995808360076	WITHOUT_CLASSIFICATION	3.600542056168553E-7	DESIGN	2.2860317967441218E-8	DEFECT	2.1305840727372508E-8	TEST	1.4237224831253869E-8	IMPLEMENTATION	7.064032951684109E-10	DOCUMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995808360076	WITHOUT_CLASSIFICATION	3.600542056168553E-7	DESIGN	2.2860317967441218E-8	DEFECT	2.1305840727372508E-8	TEST	1.4237224831253869E-8	IMPLEMENTATION	7.064032951684109E-10	DOCUMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9995169676581787	WITHOUT_CLASSIFICATION	2.7681095443633216E-4	IMPLEMENTATION	2.0000255007873792E-4	DESIGN	3.673707771691072E-6	TEST	2.161529473840553E-6	DEFECT	3.8360006075861973E-7	DOCUMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999911442746103	WITHOUT_CLASSIFICATION	6.2913443182800455E-6	DESIGN	1.2264055226179655E-6	DEFECT	1.0929976187562444E-6	IMPLEMENTATION	1.8301667035193726E-7	DOCUMENTATION	6.196125970104084E-8	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999985226235292	WITHOUT_CLASSIFICATION	1.426068409251193E-6	DESIGN	3.207140449017021E-8	DEFECT	8.845802417104244E-9	TEST	5.8980971999502795E-9	DOCUMENTATION	4.492757579919519E-9	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9396330129683147	WITHOUT_CLASSIFICATION	0.06005914233979918	DESIGN	1.6828138966333084E-4	DEFECT	7.711392703895974E-5	TEST	4.802303068058506E-5	DOCUMENTATION	1.4426344503140362E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974649728554	WITHOUT_CLASSIFICATION	9.131883142769499E-7	IMPLEMENTATION	7.301641402987181E-7	DEFECT	6.323252616848598E-7	DESIGN	1.3817016678606893E-7	DOCUMENTATION	1.2117926145345694E-7	TEST
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.5672085285894256	DESIGN	0.43276758233237234	WITHOUT_CLASSIFICATION	2.2835685580853536E-5	TEST	5.062487103970274E-7	DOCUMENTATION	4.824085456163588E-7	IMPLEMENTATION	6.473536538207922E-8	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999548101799833	WITHOUT_CLASSIFICATION	4.515147049999819E-5	DESIGN	1.8032653062682184E-8	IMPLEMENTATION	1.0130774103953069E-8	DEFECT	5.892639360172759E-9	TEST	4.293450141144539E-9	DOCUMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974649728554	WITHOUT_CLASSIFICATION	9.131883142769499E-7	IMPLEMENTATION	7.301641402987181E-7	DEFECT	6.323252616848598E-7	DESIGN	1.3817016678606893E-7	DOCUMENTATION	1.2117926145345694E-7	TEST
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999998077122012	WITHOUT_CLASSIFICATION	1.9033584398604858E-7	DESIGN	9.116118287260505E-10	DEFECT	5.046667752037108E-10	TEST	3.8623692247305665E-10	IMPLEMENTATION	1.4943933346313126E-10	DOCUMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999003696794123	WITHOUT_CLASSIFICATION	8.575171527456527E-5	DESIGN	1.3080397845114492E-5	DEFECT	4.2104021372305067E-7	DOCUMENTATION	3.748877680952665E-7	TEST	2.279486264588452E-9	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9387033516331212	WITHOUT_CLASSIFICATION	0.06126077658175067	DESIGN	2.848480634399723E-5	IMPLEMENTATION	7.191930756398094E-6	DEFECT	1.8664602052199544E-7	TEST	8.402006982281118E-9	DOCUMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.8953088600153152	WITHOUT_CLASSIFICATION	0.10468865421987207	DESIGN	1.5066854867604253E-6	IMPLEMENTATION	4.780357870921798E-7	DEFECT	4.684541137719961E-7	DOCUMENTATION	3.258942512993297E-8	TEST
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999093973410595	WITHOUT_CLASSIFICATION	8.041604439754258E-5	DEFECT	9.294733564796068E-6	IMPLEMENTATION	6.016849815529191E-7	DESIGN	2.714924773707243E-7	TEST	1.8703519210863977E-8	DOCUMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.8365592477654675	WITHOUT_CLASSIFICATION	0.16342216242512908	DESIGN	1.7006856858538366E-5	DEFECT	1.3293148613481106E-6	IMPLEMENTATION	1.4557878231098684E-7	DOCUMENTATION	1.0805890117163513E-7	TEST
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9995237114525943	WITHOUT_CLASSIFICATION	3.136372420104774E-4	DEFECT	1.5255994782538304E-4	DESIGN	5.727254483159823E-6	TEST	3.157928535214696E-6	DOCUMENTATION	1.2061745514037045E-6	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999996411596447	WITHOUT_CLASSIFICATION	1.457345493060287E-7	DEFECT	1.4556357593971575E-7	DESIGN	4.475554955120106E-8	DOCUMENTATION	2.2119885535499876E-8	IMPLEMENTATION	6.667951397315507E-10	TEST
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999789497693545	WITHOUT_CLASSIFICATION	1.6701813727915285E-5	DESIGN	3.7370262640967955E-6	IMPLEMENTATION	4.394578571474286E-7	DOCUMENTATION	1.2006445683263158E-7	DEFECT	5.186833939917266E-8	TEST
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999412428788	WITHOUT_CLASSIFICATION	3.459620585070678E-8	IMPLEMENTATION	1.5937980473437684E-8	DEFECT	6.659349487873853E-9	TEST	8.032603823219494E-10	DESIGN	7.603250542924661E-10	DOCUMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999649667330613	WITHOUT_CLASSIFICATION	2.624049907152087E-5	IMPLEMENTATION	4.572285649835733E-6	DEFECT	2.8445501299457585E-6	DESIGN	1.0943327049376848E-6	TEST	2.8159938239814997E-7	DOCUMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9835950441591501	WITHOUT_CLASSIFICATION	0.01630415404218926	DESIGN	5.314812760694166E-5	IMPLEMENTATION	2.3619087787256396E-5	TEST	2.1051797537535825E-5	DEFECT	2.9827857288254196E-6	DOCUMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9997300084589394	WITHOUT_CLASSIFICATION	2.699432968587683E-4	DESIGN	3.575410024309669E-8	IMPLEMENTATION	1.19282707913755E-8	TEST	3.845763196944065E-10	DOCUMENTATION	1.7725432623860305E-10	DEFECT
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999995432545107	WITHOUT_CLASSIFICATION	3.232181877472507E-7	DEFECT	9.764853818743322E-8	DESIGN	2.0843877631665197E-8	DOCUMENTATION	1.4491701299357571E-8	IMPLEMENTATION	5.43184470190059E-10	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9995809819095132	WITHOUT_CLASSIFICATION	2.4155061814886422E-4	DESIGN	1.6776812814020656E-4	DEFECT	7.000532233077432E-6	IMPLEMENTATION	2.3157271233477794E-6	DOCUMENTATION	3.8308484124594057E-7	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9995809819095132	WITHOUT_CLASSIFICATION	2.4155061814886422E-4	DESIGN	1.6776812814020656E-4	DEFECT	7.000532233077432E-6	IMPLEMENTATION	2.3157271233477794E-6	DOCUMENTATION	3.8308484124594057E-7	TEST
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998531566550978	WITHOUT_CLASSIFICATION	7.604487871397437E-5	DESIGN	6.351774646826523E-5	DEFECT	7.065090717311227E-6	IMPLEMENTATION	1.4808154443758662E-7	TEST	6.754745808459265E-8	DOCUMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999953328907	WITHOUT_CLASSIFICATION	4.3773406998045185E-9	DESIGN	2.839521552090219E-10	IMPLEMENTATION	4.798745145154659E-12	DEFECT	1.0169904400820495E-12	DOCUMENTATION	7.200831500419293E-16	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9997691624667374	WITHOUT_CLASSIFICATION	1.5744223816639152E-4	DESIGN	6.644836724879456E-5	IMPLEMENTATION	3.672882604898921E-6	DEFECT	2.505849997271748E-6	DOCUMENTATION	7.681952452665731E-7	TEST
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999665090392266	WITHOUT_CLASSIFICATION	2.3998436598114483E-5	IMPLEMENTATION	7.687360656963476E-6	DESIGN	1.7319477816160681E-6	DEFECT	4.6672407234490705E-8	DOCUMENTATION	2.654332968183083E-8	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999991954640173	WITHOUT_CLASSIFICATION	4.1733681135000707E-7	DESIGN	2.5092892762170954E-7	DEFECT	1.1040621496143806E-7	IMPLEMENTATION	1.9365731824258683E-8	DOCUMENTATION	6.498296999063188E-9	TEST
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999970642370494	WITHOUT_CLASSIFICATION	2.682467848071463E-6	DESIGN	2.025700629582807E-7	DEFECT	3.4867528367859355E-8	IMPLEMENTATION	1.532757727722537E-8	DOCUMENTATION	5.299340020178836E-10	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9998658360568083	WITHOUT_CLASSIFICATION	1.3172073230710717E-4	IMPLEMENTATION	1.1565679694537139E-6	DESIGN	1.0861609157045987E-6	DEFECT	1.413500413455222E-7	TEST	5.913195803630715E-8	DOCUMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999717843840129	WITHOUT_CLASSIFICATION	2.47886482077575E-5	DESIGN	3.426914758838811E-6	DEFECT	2.3752407261909217E-11	DOCUMENTATION	1.8308056039190753E-11	TEST	1.0960089535583376E-11	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999223731988693	WITHOUT_CLASSIFICATION	7.731736268499848E-5	DESIGN	1.3552193383787052E-7	IMPLEMENTATION	8.585687022413583E-8	DEFECT	5.197954943629833E-8	TEST	3.608009224571884E-8	DOCUMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9997660174568641	WITHOUT_CLASSIFICATION	2.082914019459894E-4	DESIGN	1.7633787963240858E-5	IMPLEMENTATION	7.947151113895769E-6	DEFECT	7.699808403791982E-8	TEST	3.320402870518379E-8	DOCUMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996013418496024	WITHOUT_CLASSIFICATION	3.969436523862583E-4	DESIGN	9.332612849715298E-7	DEFECT	3.2415279560305313E-7	IMPLEMENTATION	3.213415156785321E-7	TEST	1.3574241517999714E-7	DOCUMENTATION
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9932988842202864	DESIGN	0.006561137627535298	DEFECT	1.3887686293889766E-4	WITHOUT_CLASSIFICATION	1.047984952688757E-6	TEST	4.924882295015955E-8	IMPLEMENTATION	4.055463929727609E-9	DOCUMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9248815011382536	WITHOUT_CLASSIFICATION	0.05460920188952812	DESIGN	0.02050070461646392	IMPLEMENTATION	4.1314781732292E-6	DEFECT	2.74821252790864E-6	DOCUMENTATION	1.712665053179574E-6	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999998537847158	WITHOUT_CLASSIFICATION	1.386718963664144E-7	DESIGN	6.725362271677457E-9	DEFECT	7.85837946602049E-10	IMPLEMENTATION	2.1620190902612387E-11	TEST	1.0567454879835477E-11	DOCUMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9839603416775827	WITHOUT_CLASSIFICATION	0.01603947982918026	DESIGN	1.5241003942249904E-7	DEFECT	2.2917500339298466E-8	TEST	2.792887956194943E-9	DOCUMENTATION	3.728091963043415E-10	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999448658111785	WITHOUT_CLASSIFICATION	5.493658981168392E-5	DESIGN	1.476724255735598E-7	IMPLEMENTATION	2.966862042233443E-8	DOCUMENTATION	1.908147758397804E-8	DEFECT	1.1764863583197777E-9	TEST
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.6276286028466191	WITHOUT_CLASSIFICATION	0.3716968513260525	DESIGN	5.665761134200356E-4	IMPLEMENTATION	1.0571673291079179E-4	DEFECT	1.5235036349102478E-6	TEST	7.294773627790437E-7	DOCUMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999985559425856	WITHOUT_CLASSIFICATION	8.019830088364035E-7	DESIGN	3.641004961842131E-7	DEFECT	1.4382268952318532E-7	TEST	1.2233447625279878E-7	IMPLEMENTATION	1.1816743561717512E-8	DOCUMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9998770348325638	WITHOUT_CLASSIFICATION	6.325744287766872E-5	IMPLEMENTATION	4.323722343875139E-5	DEFECT	1.6015300165820925E-5	DESIGN	2.4040264843901377E-7	TEST	2.147983054880281E-7	DOCUMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9991788138520549	WITHOUT_CLASSIFICATION	8.134076467305754E-4	DEFECT	7.776725362512581E-6	DESIGN	1.1250164192070817E-9	TEST	6.50168697037171E-10	DOCUMENTATION	6.670276859625387E-13	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999998352116115	WITHOUT_CLASSIFICATION	8.929459536463971E-8	DEFECT	7.512856383220769E-8	DESIGN	2.052113667159813E-10	DOCUMENTATION	1.3551103314920113E-10	TEST	2.4506881860379975E-11	IMPLEMENTATION
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999213161906879	WITHOUT_CLASSIFICATION	7.728364681482289E-5	DEFECT	1.270909677517736E-6	IMPLEMENTATION	8.302752512904676E-8	DESIGN	3.638718723299025E-8	TEST	9.83810754211124E-9	DOCUMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999080231502844	WITHOUT_CLASSIFICATION	5.366056460781411E-5	DESIGN	3.682793515479325E-5	DEFECT	1.0861190070903033E-6	TEST	3.907886659356866E-7	IMPLEMENTATION	1.1442279969760041E-8	DOCUMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999995555651885	WITHOUT_CLASSIFICATION	4.059469273115412E-7	DESIGN	3.846237791908835E-8	DEFECT	2.419742656680645E-11	TEST	8.590646160494855E-13	IMPLEMENTATION	4.4972435708343845E-13	DOCUMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999999310524137	WITHOUT_CLASSIFICATION	3.3827223668348776E-7	DEFECT	2.2705781225370352E-7	DESIGN	1.238463947763854E-7	DOCUMENTATION	2.2036279886406654E-10	IMPLEMENTATION	7.905641798273517E-11	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999999310524137	WITHOUT_CLASSIFICATION	3.3827223668348776E-7	DEFECT	2.2705781225370352E-7	DESIGN	1.238463947763854E-7	DOCUMENTATION	2.2036279886406654E-10	IMPLEMENTATION	7.905641798273517E-11	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9998480678061139	WITHOUT_CLASSIFICATION	9.690200016885663E-5	DEFECT	3.809487491609762E-5	DESIGN	1.2113868133201511E-5	TEST	3.940158915913482E-6	IMPLEMENTATION	8.812917520546661E-7	DOCUMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9715514420158898	WITHOUT_CLASSIFICATION	0.0283967979009597	DESIGN	2.8358246084206864E-5	DEFECT	2.2823577645275655E-5	IMPLEMENTATION	5.322051393511751E-7	TEST	4.6054281549629525E-8	DOCUMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.999999425690155	WITHOUT_CLASSIFICATION	5.653832416044354E-7	DESIGN	6.981959041482286E-9	IMPLEMENTATION	1.8375585526621503E-9	DOCUMENTATION	9.543723369176015E-11	TEST	1.1648567823637591E-11	DEFECT
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999990619391698	WITHOUT_CLASSIFICATION	9.336658745626388E-7	DESIGN	4.363387204583568E-9	DEFECT	2.3210636446382203E-11	IMPLEMENTATION	4.412793611057176E-12	TEST	3.9451059364214534E-12	DOCUMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999632793143085	WITHOUT_CLASSIFICATION	3.5204225363255595E-5	DESIGN	1.2781752745139046E-6	DEFECT	1.8553269079296094E-7	DOCUMENTATION	3.4167478909322186E-8	IMPLEMENTATION	1.8584883975969715E-8	TEST
//TODO find a decent name before documenting	DOCUMENTATION	0.5953500051428839	DOCUMENTATION	0.2768447630459839	DESIGN	0.10558352685616569	WITHOUT_CLASSIFICATION	0.02099004087870993	IMPLEMENTATION	9.160280114963055E-4	DEFECT	3.1563606476039756E-4	TEST
//FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9892417963143515	DESIGN	0.010757277432423202	WITHOUT_CLASSIFICATION	4.5610756965089976E-7	DEFECT	2.1434052475790832E-7	DOCUMENTATION	1.455569519088411E-7	TEST	1.1024817922024377E-7	IMPLEMENTATION
// For a one-to-many, a <bag> is not really a bag; // it is *really* a set, since it can't contain the // same element twice. It could be considered a bug // in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.992516278344936	WITHOUT_CLASSIFICATION	0.007357220353866558	DESIGN	1.254356131529426E-4	DEFECT	1.0653344520287195E-6	IMPLEMENTATION	2.961383994739511E-10	DOCUMENTATION	5.74540180162948E-11	TEST
// RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9936644276727312	WITHOUT_CLASSIFICATION	0.005234822331762198	DESIGN	8.930619302741916E-4	IMPLEMENTATION	1.9800978556314692E-4	DEFECT	5.6160686397627885E-6	DOCUMENTATION	4.062211029412652E-6	TEST
/*         * The following types are not supported in RDMS/JDBC and therefore commented out.         * However, in some cases, mapping them to CHARACTER columns works         * for many applications, but does not work for all cases.         */	DEFECT	0.8629063957798739	WITHOUT_CLASSIFICATION	0.13708993268912817	DEFECT	1.1712882698866654E-6	DOCUMENTATION	1.1273209941966295E-6	IMPLEMENTATION	9.195069333514452E-7	TEST	4.534148004523934E-7	DESIGN
// The preference here would be //   SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) // but this appears not to work. // Jay Nance 2006-09-22	DEFECT	0.9952186186211169	DEFECT	0.003970988451604799	DESIGN	7.807077900734897E-4	WITHOUT_CLASSIFICATION	1.9813361558660525E-5	TEST	8.052521250780147E-6	IMPLEMENTATION	1.8192543952368672E-6	DOCUMENTATION
// note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.8039489712891097	DEFECT	0.18822021045987877	DESIGN	0.007623045543315526	WITHOUT_CLASSIFICATION	2.0140124741207217E-4	TEST	4.276125839456077E-6	IMPLEMENTATION	2.095334444481917E-6	DOCUMENTATION
// note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.7621547743168007	DEFECT	0.23349643493437988	DESIGN	0.0043322737418625065	WITHOUT_CLASSIFICATION	1.0590431782535226E-5	TEST	4.66182844175068E-6	IMPLEMENTATION	1.2647467327868951E-6	DOCUMENTATION
/*	DEFECT	0.9334241107300555	WITHOUT_CLASSIFICATION	0.057334198134129065	DESIGN	0.006046816090410139	DEFECT	0.0029370291208706606	IMPLEMENTATION	1.5123563116669595E-4	DOCUMENTATION	1.0661029336787873E-4	TEST
//Don't need this, because we should never ever be selecting no columns in an insert ... select... //and because it causes a bug on DB2	DEFECT	0.9968275996725716	WITHOUT_CLASSIFICATION	0.00315379913615743	DEFECT	1.2898098075209023E-5	DESIGN	4.381500464280718E-6	TEST	1.2479418256691481E-6	DOCUMENTATION	7.365090589058933E-8	IMPLEMENTATION
// TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.9996043395387958	DESIGN	3.889686436433863E-4	DEFECT	5.641264469297731E-6	TEST	5.57904077382159E-7	DOCUMENTATION	2.769760262944712E-7	IMPLEMENTATION	2.1567298791176136E-7	WITHOUT_CLASSIFICATION
// TODO : should this be an error?	DEFECT	0.9992714739866142	DESIGN	5.832144738704944E-4	DEFECT	1.3863674634757972E-4	IMPLEMENTATION	4.01910907760932E-6	TEST	2.640077585200339E-6	DOCUMENTATION	1.560650506070872E-8	WITHOUT_CLASSIFICATION
// TODO : not sure which (either?) is correct, could not find docs on how to do this. // did find various blogs and forums mentioning that select CURRENT_TIMESTAMP // does not work...	DEFECT	0.8418229931403856	DEFECT	0.15801946828374172	DESIGN	1.3518936451768307E-4	TEST	1.930127756343703E-5	DOCUMENTATION	3.0425289483003283E-6	IMPLEMENTATION	5.4048433789315865E-9	WITHOUT_CLASSIFICATION
// TODO: figure out how this should be set. /////////////////////////////////////////////////////////////////////////////// // This was the reason for failures regarding INDEX_OP and subclass joins on // theta-join dialects; not sure what behaviour we were trying to emulate ;) //	DEFECT	0.8834217790774517	DESIGN	0.11650018658505695	DEFECT	5.974969238990475E-5	IMPLEMENTATION	1.7954037880469467E-5	WITHOUT_CLASSIFICATION	2.537607902961359E-7	TEST	7.684643069232181E-8	DOCUMENTATION
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9980825178862329	DESIGN	0.0012727350189306215	DEFECT	3.2945624998681716E-4	IMPLEMENTATION	1.6553172567240453E-4	TEST	1.410413576772902E-4	WITHOUT_CLASSIFICATION	8.717761499838548E-6	DOCUMENTATION
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9980825178862329	DESIGN	0.0012727350189306215	DEFECT	3.2945624998681716E-4	IMPLEMENTATION	1.6553172567240453E-4	TEST	1.410413576772902E-4	WITHOUT_CLASSIFICATION	8.717761499838548E-6	DOCUMENTATION
// TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.9999918085703334	DESIGN	5.986113437128375E-6	DEFECT	1.6992421501795777E-6	WITHOUT_CLASSIFICATION	3.896510782287916E-7	IMPLEMENTATION	5.840895850250645E-8	TEST	5.801404248138456E-8	DOCUMENTATION
// starts with an alias (old style) // semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9695342272809315	WITHOUT_CLASSIFICATION	0.03036664993989382	DESIGN	9.469637515386766E-5	DEFECT	4.366645560229838E-6	TEST	5.5788668183713106E-8	DOCUMENTATION	3.969792287222585E-9	IMPLEMENTATION
//TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.9732953527183045	DESIGN	0.018784714083327114	DEFECT	0.006759858827110604	IMPLEMENTATION	6.842482333070254E-4	WITHOUT_CLASSIFICATION	3.072874055577217E-4	TEST	1.685387323932848E-4	DOCUMENTATION
// this call is side-effecty	DEFECT	0.9998139608461061	WITHOUT_CLASSIFICATION	1.7860756954817152E-4	DESIGN	7.106419390824048E-6	DEFECT	1.5688644664771402E-7	IMPLEMENTATION	9.052249008520482E-8	TEST	7.775601817011039E-8	DOCUMENTATION
//TODO: old version did not require hashmap lookup: //keys[collectionOwner].getIdentifier()	DEFECT	0.9956753862993951	WITHOUT_CLASSIFICATION	0.0038193558152577697	IMPLEMENTATION	4.928673312548927E-4	DEFECT	1.2132926819267539E-5	DESIGN	1.4000409727022783E-7	TEST	1.176231756768689E-7	DOCUMENTATION
//TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.8601696163278099	WITHOUT_CLASSIFICATION	0.13656630175871654	DESIGN	0.0031729038287179696	DEFECT	3.9707708560326546E-5	IMPLEMENTATION	2.9963763098727875E-5	DOCUMENTATION	2.150661309666057E-5	TEST
// this is only needed (afaict) for processing results from the query cache; // however, this cannot possibly work in the case of discovered types...	DEFECT	0.8791037228902813	WITHOUT_CLASSIFICATION	0.12088224338987985	DEFECT	1.388551206304032E-5	DESIGN	1.2969424084551503E-7	TEST	1.8488450039257844E-8	DOCUMENTATION	2.5084990062190428E-11	IMPLEMENTATION
//TODO: this requires that the collection is defined after the //      referenced property in the mapping file (ok?)	DEFECT	0.9880675434506725	WITHOUT_CLASSIFICATION	0.010019122192610157	DESIGN	0.0016063697515804594	DEFECT	1.6767356403493854E-4	IMPLEMENTATION	9.410247458170789E-5	TEST	4.5188566520297886E-5	DOCUMENTATION
//TODO: is this completely correct?	DEFECT	0.9638614545355397	DESIGN	0.035274320677993305	WITHOUT_CLASSIFICATION	4.319648951263444E-4	IMPLEMENTATION	2.283963346401622E-4	TEST	1.9626444040808134E-4	DEFECT	7.599116292570661E-6	DOCUMENTATION
// three general cases we check here as to whether to render a physical SQL join: // 1) is our parent a DotNode as well?  If so, our property reference is // 	DEFECT	0.9920113956771969	WITHOUT_CLASSIFICATION	0.007633593588350962	DESIGN	3.517844112858795E-4	DEFECT	3.17556450151531E-6	DOCUMENTATION	3.001885731653254E-8	TEST	2.0739807373861795E-8	IMPLEMENTATION
// TODO : currently we really do not handle ValueInclusion.PARTIAL... // ValueInclusion.PARTIAL would indicate parts of a component need to // be included in the select; currently we then just render the entire // component into the select clause in that case.	DEFECT	0.9969177002456974	IMPLEMENTATION	0.002917845109853636	DESIGN	1.618753357788244E-4	DEFECT	2.223031697849466E-6	WITHOUT_CLASSIFICATION	3.4387791366431315E-7	DOCUMENTATION	1.2399058681965543E-8	TEST
//TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9999983844521086	DESIGN	9.376777848901606E-7	IMPLEMENTATION	5.398185764223859E-7	DOCUMENTATION	8.996377053137603E-8	WITHOUT_CLASSIFICATION	3.36315878505785E-8	DEFECT	1.445617162722398E-8	TEST
// todo : this call will not work for anything other than pojos!	DEFECT	0.9073939047988646	DEFECT	0.08988311629472863	WITHOUT_CLASSIFICATION	0.002259926865942469	DESIGN	4.390812393878321E-4	IMPLEMENTATION	1.9513318407185144E-5	TEST	4.4574826692396195E-6	DOCUMENTATION
//TODO: currently we don't know a SessionFactory reference when building the Tuplizer //      THIS IS A BUG (embedded-xml=false on component) // TODO : fix this after HHH-1907 is complete	DEFECT	0.9999977535951131	DESIGN	2.1598346703755556E-6	DEFECT	6.116840434286552E-8	IMPLEMENTATION	2.2305692920660392E-8	DOCUMENTATION	3.0933084664259304E-9	TEST	2.810636755356564E-12	WITHOUT_CLASSIFICATION
// TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.6620999832993891	DESIGN	0.33518975307982574	WITHOUT_CLASSIFICATION	0.0022644627828096084	IMPLEMENTATION	2.1683805547197474E-4	DOCUMENTATION	1.7414449898282738E-4	DEFECT	5.481828352074667E-5	TEST
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object) //the owner of the association is not the owner of the id	DEFECT	0.8680555326587575	DESIGN	0.07063666108687228	DEFECT	0.045125214016925326	WITHOUT_CLASSIFICATION	0.010836029501848003	DOCUMENTATION	0.0050030162138256055	TEST	3.4354652177124494E-4	IMPLEMENTATION
//TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.9953144383423829	DESIGN	0.0026517535723377247	DEFECT	0.0018546346502519085	WITHOUT_CLASSIFICATION	1.238894950457289E-4	IMPLEMENTATION	4.275566854604395E-5	TEST	1.252827143576452E-5	DOCUMENTATION
//TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.9978339254982714	DESIGN	0.0010832730513114842	DEFECT	9.820777946843702E-4	WITHOUT_CLASSIFICATION	7.727118633501064E-5	IMPLEMENTATION	1.6907693077146634E-5	TEST	6.544776320690982E-6	DOCUMENTATION
//TODO: this is kinda inconsistent with CollectionType	DEFECT	0.9361829392011081	DESIGN	0.025253308415765986	IMPLEMENTATION	0.02455287771644912	WITHOUT_CLASSIFICATION	0.007665992071738665	DEFECT	0.006069997768509765	TEST	2.7488482642855757E-4	DOCUMENTATION
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9980825178862329	DESIGN	0.0012727350189306215	DEFECT	3.2945624998681716E-4	IMPLEMENTATION	1.6553172567240453E-4	TEST	1.410413576772902E-4	WITHOUT_CLASSIFICATION	8.717761499838548E-6	DOCUMENTATION
// TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.9494854983434063	DEFECT	0.04891706438642159	DESIGN	0.0012215431434235249	IMPLEMENTATION	3.2851164781992626E-4	TEST	4.171204898637342E-5	DOCUMENTATION	5.670429942255399E-6	WITHOUT_CLASSIFICATION
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object)	DEFECT	0.9740763426401071	DESIGN	0.013094431792417182	DEFECT	0.007051243875232505	DOCUMENTATION	0.004497196544073584	WITHOUT_CLASSIFICATION	6.449741985607084E-4	TEST	6.358109496090676E-4	IMPLEMENTATION
//TODO: not really completely correct, since //      the uoe could occur while resolving //      associations, leaving the PC in an //      inconsistent state	DEFECT	0.8830517778039599	DEFECT	0.06639178342851658	WITHOUT_CLASSIFICATION	0.04234724377421791	DESIGN	0.004039438318412891	TEST	0.0037249210174603096	IMPLEMENTATION	4.448356574323468E-4	DOCUMENTATION
// could happen for custom Criteria impls.  Not likely, but... // 	DEFECT	0.4515683443263824	WITHOUT_CLASSIFICATION	0.4380100474249131	DEFECT	0.10905196031296371	DESIGN	9.620073740636737E-4	TEST	4.033491621943026E-4	IMPLEMENTATION	4.2913994828550905E-6	DOCUMENTATION
// This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, // but this extension is not supported through Hibernate anyway.	DEFECT	0.9994031505254578	WITHOUT_CLASSIFICATION	5.929121421114448E-4	DESIGN	2.5004178254865006E-6	TEST	1.3403214398748834E-6	DEFECT	5.2462404166958036E-8	DOCUMENTATION	4.413076133808931E-8	IMPLEMENTATION
// note that this timestamp is not correct if the connection provider // returns an older JDBC connection that was associated with a // transaction that was already begun before openSession() was called // (don't know any possible solution to this!)	DEFECT	0.7867747336446705	WITHOUT_CLASSIFICATION	0.16119035283712563	IMPLEMENTATION	0.03286483577823381	DEFECT	0.019049160002942163	DESIGN	1.1364375464599626E-4	TEST	7.273982381876131E-6	DOCUMENTATION
//no need to take a snapshot - this is a  //performance optimization, but not really //important, except for entities with huge  //mutable property values	DEFECT	0.9994084394982176	WITHOUT_CLASSIFICATION	4.787128375538925E-4	DEFECT	1.0463919632513219E-4	DESIGN	7.63462001970572E-6	TEST	5.574734120521207E-7	DOCUMENTATION	1.637447163845475E-8	IMPLEMENTATION
// TODO : this really needs to be delayed unitl after we definitively know the operand node type; // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DEFECT	0.9971154481919493	DESIGN	0.0027193733874891065	DEFECT	6.777994781873218E-5	WITHOUT_CLASSIFICATION	4.6962521532171916E-5	DOCUMENTATION	4.613886189832646E-5	IMPLEMENTATION	4.297089312310586E-6	TEST
// First, validate all the enabled filters... //TODO: this implementation has bad performance	DEFECT	0.9810712365886599	IMPLEMENTATION	0.01672452388498624	DESIGN	0.0014607249394623096	WITHOUT_CLASSIFICATION	7.235947925901478E-4	DEFECT	1.33756211027265E-5	DOCUMENTATION	6.544173198690297E-6	TEST
// TODO: what if batchUpdate is a callablestatement ? // calls executeBatch()	DEFECT	0.8187637660959429	DESIGN	0.13989888680463428	WITHOUT_CLASSIFICATION	0.020683445096693027	DEFECT	0.017434211513283206	IMPLEMENTATION	0.003167850264593659	TEST	5.184022485304049E-5	DOCUMENTATION
// assume that the row was not there since it previously had only null // values, so do an INSERT instead //TODO: does not respect dynamic-insert	DEFECT	0.9999992482584109	WITHOUT_CLASSIFICATION	5.213259478323497E-7	DEFECT	1.4748841046463705E-7	DESIGN	5.364872342324306E-8	TEST	2.1340781523356067E-8	DOCUMENTATION	7.937725965610136E-9	IMPLEMENTATION
//TODO: passing null here, because this method is not really used for DOM4J at the moment //      but it is still a bug, if we don't get rid of this!	DEFECT	0.996028403598248	DESIGN	0.001613022653195988	DEFECT	0.0013993970128994716	WITHOUT_CLASSIFICATION	8.018323178296442E-4	IMPLEMENTATION	1.4446499216506911E-4	TEST	1.2879425661844742E-5	DOCUMENTATION
//note that this implementation is kinda broken //for components with many-to-one associations	DEFECT	0.9993241499049084	WITHOUT_CLASSIFICATION	6.119610414062741E-4	DESIGN	3.179367545627197E-5	DEFECT	2.701526100362074E-5	TEST	4.679398160209104E-6	IMPLEMENTATION	4.0071906522929584E-7	DOCUMENTATION
// TODO: at the point where we are resolving collection references, we don't // know if the uk value has been resolved (depends if it was earlier or // later in the mapping document) - now, we could try and use e.getStatus() // to decide to semiResolve(), trouble is that initializeEntity() reuses // the same array for resolved and hydrated values	DEFECT	0.8697879330700288	DESIGN	0.11508717621448163	DEFECT	0.011671701130578438	IMPLEMENTATION	0.0019137869392382898	WITHOUT_CLASSIFICATION	0.0015388054369640447	DOCUMENTATION	5.972087086993864E-7	TEST
//TODO: This is assertion is disabled because there is a bug that means the //	DEFECT	0.9960821172259215	WITHOUT_CLASSIFICATION	0.0025131825052290527	DEFECT	8.83554078517063E-4	DESIGN	4.916939141702213E-4	IMPLEMENTATION	2.8768367479778916E-5	TEST	6.839086824163581E-7	DOCUMENTATION
// This doesn't actually seem to work but it *might* // work on some dbs. Also it doesn't work if there // are multiple columns of results because it // is not accounting for the suffix: // return new String[] { getDiscriminatorColumnName() };	DEFECT	0.8656340340939915	DESIGN	0.1263496891145701	WITHOUT_CLASSIFICATION	0.008015898920911636	DEFECT	3.708367756928001E-7	TEST	7.0080708392308314E-9	DOCUMENTATION	2.568031599785635E-11	IMPLEMENTATION
// TODO: Deal with the "optional" attribute in the <join> mapping; // this code assumes that optional defaults to "true" because it // doesn't actually seem to work in the fetch="join" code // // Note that actual proper handling of optional-ality here is actually // more involved than this patch assumes.  Remember that we might have // multiple <join/> mappings associated with a single entity.  Really // a couple of things need to happen to properly handle optional here: //  1) First and foremost, when handling multiple <join/>s, we really //      should be using the entity root table as the driving table; //      another option here would be to choose some non-optional joined //      table to use as the driving table.  In all likelihood, just using //      the root table is much simplier //  2) Need to add the FK columns corresponding to each joined table //      to the generated select list; these would then be used when //      iterating the result set to determine whether all non-optional //      data is present // My initial thoughts on the best way to deal with this would be // to introduce a new SequentialSelect abstraction that actually gets // generated in the persisters (ok, SingleTable...) and utilized here. // It would encapsulated all this required optional-ality checking...	DEFECT	0.7129868900030765	WITHOUT_CLASSIFICATION	0.2474647143021321	DESIGN	0.03838662432910897	DEFECT	0.0011412825422688773	TEST	1.6065170991683838E-5	DOCUMENTATION	4.423652421916875E-6	IMPLEMENTATION
// todo : what else to do here?	DESIGN	0.9708954232632941	WITHOUT_CLASSIFICATION	0.02443935481524107	IMPLEMENTATION	0.004454381945548294	DESIGN	2.0200508360660108E-4	DEFECT	5.3215336850774645E-6	TEST	3.513358624852603E-6	DOCUMENTATION
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.9585843680985452	WITHOUT_CLASSIFICATION	0.04131327896906613	DESIGN	9.867999427932994E-5	DEFECT	3.180714106269141E-6	DOCUMENTATION	2.757434893209971E-7	TEST	2.1648051373523203E-7	IMPLEMENTATION
// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. // The need for it is intended to be alleviated with future developement, thus it is // not defined as an Environment constant... // // it is used to control whether we should consult the JDBC metadata to determine // certain Settings default values; it is useful to *not* do this when the database // may not be available (mainly in tools usage).	DESIGN	0.5612251385851458	DESIGN	0.4387748509133663	WITHOUT_CLASSIFICATION	6.548880461346092E-9	DEFECT	3.825741921842783E-9	TEST	1.2683647398867953E-10	DOCUMENTATION	2.9082726813621207E-14	IMPLEMENTATION
//TODO: get SQL rendering out of this package!	DESIGN	0.9146036865528243	DESIGN	0.08506162289710674	WITHOUT_CLASSIFICATION	2.480788947751007E-4	IMPLEMENTATION	3.922444142712188E-5	TEST	3.4555831264913935E-5	DEFECT	1.2831382601725922E-5	DOCUMENTATION
//TODO: get SQL rendering out of this package!	DESIGN	0.9146036865528243	DESIGN	0.08506162289710674	WITHOUT_CLASSIFICATION	2.480788947751007E-4	IMPLEMENTATION	3.922444142712188E-5	TEST	3.4555831264913935E-5	DEFECT	1.2831382601725922E-5	DOCUMENTATION
// todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9948535624341445	WITHOUT_CLASSIFICATION	0.005064173158632893	IMPLEMENTATION	8.026580111776828E-5	DESIGN	9.68707658146689E-7	TEST	9.172652983223196E-7	DOCUMENTATION	1.1263314844523614E-7	DEFECT
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9997493621080474	WITHOUT_CLASSIFICATION	2.498320674822773E-4	DESIGN	7.954032332003661E-7	DEFECT	7.466106134123081E-9	DOCUMENTATION	2.335978502340145E-9	IMPLEMENTATION	6.191524936169501E-10	TEST
// work around the "feature" where tree cache is validating the // inserted node during the next transaction.  no idea...	DESIGN	0.7940398026856177	WITHOUT_CLASSIFICATION	0.20476497097867086	DESIGN	0.0011937786210338781	DEFECT	6.495386166523848E-7	TEST	5.988719737694152E-7	DOCUMENTATION	1.9930408719979717E-7	IMPLEMENTATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9999156592937538	DESIGN	3.14094431892432E-5	DOCUMENTATION	2.831046868430437E-5	DEFECT	2.3241974520492067E-5	WITHOUT_CLASSIFICATION	1.0326585185787143E-6	TEST	3.461613334208653E-7	IMPLEMENTATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9999156592937538	DESIGN	3.14094431892432E-5	DOCUMENTATION	2.831046868430437E-5	DEFECT	2.3241974520492067E-5	WITHOUT_CLASSIFICATION	1.0326585185787143E-6	TEST	3.461613334208653E-7	IMPLEMENTATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999752038633705	DESIGN	2.4631023465625725E-5	DEFECT	1.377414330836011E-7	IMPLEMENTATION	2.153695647388446E-8	DOCUMENTATION	5.039737242767859E-9	TEST	7.950371080299358E-10	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999752038633705	DESIGN	2.4631023465625725E-5	DEFECT	1.377414330836011E-7	IMPLEMENTATION	2.153695647388446E-8	DOCUMENTATION	5.039737242767859E-9	TEST	7.950371080299358E-10	WITHOUT_CLASSIFICATION
// TODO: I considered validating TS cache config here, // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used	DESIGN	0.5403968498910431	DESIGN	0.45936886317910475	IMPLEMENTATION	1.435106552677283E-4	WITHOUT_CLASSIFICATION	8.137615287417473E-5	DEFECT	7.796712354613244E-6	DOCUMENTATION	1.6034093556854607E-6	TEST
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9964790332981102	DESIGN	0.002344574497750435	IMPLEMENTATION	6.948639908187968E-4	WITHOUT_CLASSIFICATION	2.850835599964074E-4	TEST	1.6724329351739124E-4	DEFECT	2.920135980665393E-5	DOCUMENTATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9964790332981102	DESIGN	0.002344574497750435	IMPLEMENTATION	6.948639908187968E-4	WITHOUT_CLASSIFICATION	2.850835599964074E-4	TEST	1.6724329351739124E-4	DEFECT	2.920135980665393E-5	DOCUMENTATION
// TODO Why not use the timestamp in a DataVersion?	DESIGN	0.9953734556015645	DESIGN	0.004525407891574319	IMPLEMENTATION	7.228705724590552E-5	DEFECT	2.1990976710494852E-5	DOCUMENTATION	6.6279064829845844E-6	TEST	2.3056642174000837E-7	WITHOUT_CLASSIFICATION
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9997493621080474	WITHOUT_CLASSIFICATION	2.498320674822773E-4	DESIGN	7.954032332003661E-7	DEFECT	7.466106134123081E-9	DOCUMENTATION	2.335978502340145E-9	IMPLEMENTATION	6.191524936169501E-10	TEST
// work around the "feature" where tree cache is validating the // inserted node during the next transaction. no idea...	DESIGN	0.9148656726774761	WITHOUT_CLASSIFICATION	0.08469389118474391	DESIGN	4.396448408929322E-4	DEFECT	3.57184240740569E-7	DOCUMENTATION	3.173314166251462E-7	TEST	1.1678122961264972E-7	IMPLEMENTATION
//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.999830704673642	WITHOUT_CLASSIFICATION	1.6248471264283706E-4	DESIGN	6.738308544758375E-6	DEFECT	2.7313079842188253E-8	DOCUMENTATION	2.72675003826238E-8	IMPLEMENTATION	1.772459020557685E-8	TEST
// turn hibernate.c3p0.* into c3p0.*, so c3p0 // gets a chance to see all hibernate.c3p0.*	DESIGN	0.9999834345723297	WITHOUT_CLASSIFICATION	1.6564988436136352E-5	DESIGN	2.0449778697105497E-10	DEFECT	1.409582800045875E-10	IMPLEMENTATION	8.205004167011333E-11	DOCUMENTATION	1.1728024254423131E-11	TEST
//TODO: this bit actually has to be called after all cascades! //      but since identity insert is called *synchronously*, //      instead of asynchronously as other actions, it isn't	DESIGN	0.9397362475812093	WITHOUT_CLASSIFICATION	0.05978328342773494	DESIGN	4.2823931738822265E-4	DEFECT	3.445086451523849E-5	TEST	1.2476540327025292E-5	DOCUMENTATION	5.3022688252591336E-6	IMPLEMENTATION
//TODO: reenable if we also fix the above todo	DESIGN	0.9910974246639284	DESIGN	0.00793716076338155	WITHOUT_CLASSIFICATION	3.51690046030714E-4	DEFECT	3.293545235908825E-4	IMPLEMENTATION	2.1534678111880933E-4	TEST	6.902322194958484E-5	DOCUMENTATION
//TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.8944738289620888	WITHOUT_CLASSIFICATION	0.08041779524451499	IMPLEMENTATION	0.0250825494886029	DESIGN	2.0694974721264384E-5	TEST	5.077134737219429E-6	DOCUMENTATION	5.419533481565674E-8	DEFECT
// we may be screwed here since the collection action is about to execute // and we do not know the final owner key value	DESIGN	0.9999975255826777	WITHOUT_CLASSIFICATION	2.434557136483737E-6	DESIGN	2.3473548300063123E-8	IMPLEMENTATION	1.589111084805825E-8	DEFECT	3.5083463088140914E-10	TEST	1.4469206682262425E-10	DOCUMENTATION
/** Create an action that will evict collection and entity regions based on queryspaces (table names).	DESIGN	0.9272344490473842	WITHOUT_CLASSIFICATION	0.05899904709175576	DESIGN	0.010209292947437077	IMPLEMENTATION	0.003395141317527965	DEFECT	8.387945897078816E-5	TEST	7.819013692426547E-5	DOCUMENTATION
// todo : what else to do here?	DESIGN	0.9708954232632941	WITHOUT_CLASSIFICATION	0.02443935481524107	IMPLEMENTATION	0.004454381945548294	DESIGN	2.0200508360660108E-4	DEFECT	5.3215336850774645E-6	TEST	3.513358624852603E-6	DOCUMENTATION
// todo : modify the class definition if not already transformed...	DESIGN	0.9996035710806022	WITHOUT_CLASSIFICATION	3.471169657554201E-4	DESIGN	2.4982951632751417E-5	DEFECT	2.3855419105057097E-5	IMPLEMENTATION	2.554682994523433E-7	DOCUMENTATION	2.181146051334892E-7	TEST
// todo : what else to do here?	DESIGN	0.9708954232632941	WITHOUT_CLASSIFICATION	0.02443935481524107	IMPLEMENTATION	0.004454381945548294	DESIGN	2.0200508360660108E-4	DEFECT	5.3215336850774645E-6	TEST	3.513358624852603E-6	DOCUMENTATION
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call start	DESIGN	0.8369743813278937	WITHOUT_CLASSIFICATION	0.16283600483260546	DESIGN	1.6160605625222912E-4	IMPLEMENTATION	1.5443838245967773E-5	DEFECT	7.080135644581177E-6	TEST	5.4838093582210216E-6	DOCUMENTATION
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.957033971277521	WITHOUT_CLASSIFICATION	0.04281256317478778	DESIGN	1.2799800234177084E-4	IMPLEMENTATION	1.849492937932729E-5	DEFECT	4.341944124733612E-6	TEST	2.6306718453051164E-6	DOCUMENTATION
//TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9997650971498491	DESIGN	2.089019198386431E-4	DEFECT	1.308748754129758E-5	IMPLEMENTATION	6.3945807754926055E-6	DOCUMENTATION	3.601751432430115E-6	WITHOUT_CLASSIFICATION	2.9171105630813015E-6	TEST
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.9585843680985452	WITHOUT_CLASSIFICATION	0.04131327896906613	DESIGN	9.867999427932994E-5	DEFECT	3.180714106269141E-6	DOCUMENTATION	2.757434893209971E-7	TEST	2.1648051373523203E-7	IMPLEMENTATION
//TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.9893389441941195	DESIGN	0.00772578907140456	WITHOUT_CLASSIFICATION	0.0025811461901985456	DEFECT	1.3764613854933835E-4	DOCUMENTATION	1.0841337821708087E-4	TEST	1.080610275109509E-4	IMPLEMENTATION
//TODO: assumes all collections disassemble to an array!	DESIGN	0.9998991079653191	WITHOUT_CLASSIFICATION	7.785812922212523E-5	DEFECT	1.583020063141929E-5	IMPLEMENTATION	5.856150834311355E-6	DESIGN	9.263176875302988E-7	TEST	4.212363054045144E-7	DOCUMENTATION
//TODO: reuse the PreLoadEvent	DESIGN	0.5306342705893412	WITHOUT_CLASSIFICATION	0.240293695426549	IMPLEMENTATION	0.2274639996484606	DESIGN	0.0014264190094416887	DOCUMENTATION	9.74994910026392E-5	TEST	8.411583520493408E-5	DEFECT
// todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; // this should be refactored to instead expose a method to assemble a EntityEntry based on this // state for return.	DESIGN	0.9929024530663236	DESIGN	0.007096508168812625	WITHOUT_CLASSIFICATION	9.260317087306914E-7	DEFECT	1.1031486637882848E-7	TEST	1.6851253585719117E-9	IMPLEMENTATION	7.331632124807484E-10	DOCUMENTATION
// todo : what is the implication of this?	DESIGN	0.516097126228301	WITHOUT_CLASSIFICATION	0.450380895047044	DESIGN	0.019069926283811295	DOCUMENTATION	0.012564885524447787	DEFECT	0.0011044528562873534	TEST	7.827140601085095E-4	IMPLEMENTATION
// use COUNT as the default.  This mimics the old behavior, although // NONE might be a better option moving forward in the case of callable	DESIGN	0.8335578322351086	WITHOUT_CLASSIFICATION	0.16641967876484334	DESIGN	2.1683862038040724E-5	DEFECT	4.4770614438650925E-7	TEST	3.488357945857555E-7	IMPLEMENTATION	8.596070954819043E-9	DOCUMENTATION
/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a	DESIGN	0.7273890457376707	IMPLEMENTATION	0.2630858441476937	DESIGN	0.005082180481256361	DEFECT	0.0036655136127565296	WITHOUT_CLASSIFICATION	5.9644261711712E-4	TEST	1.8097340350555117E-4	DOCUMENTATION
//TODO: suck this into initLaziness!	DESIGN	0.9935751053592192	DESIGN	0.003232140875766599	IMPLEMENTATION	0.0015434634163903743	WITHOUT_CLASSIFICATION	9.406511124500643E-4	DEFECT	4.5260830218442523E-4	DOCUMENTATION	2.560309339893555E-4	TEST
// we have to set up the table later!! yuck	DESIGN	0.9978380817058029	WITHOUT_CLASSIFICATION	0.002160610553098576	DESIGN	1.0934427292582304E-6	DEFECT	1.8223229734511027E-7	IMPLEMENTATION	1.9026380128568854E-8	DOCUMENTATION	1.3039691778663735E-8	TEST
//TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.6662276965361488	IMPLEMENTATION	0.279049473184894	DESIGN	0.050992630777670085	WITHOUT_CLASSIFICATION	0.0018097416296999917	DOCUMENTATION	0.0013850317361975013	TEST	5.354261353896169E-4	DEFECT
// todo : again, how *should* this work for non-pojo entities?	DESIGN	0.9785306521793045	DESIGN	0.01166131295488083	WITHOUT_CLASSIFICATION	0.0072672238278991995	DEFECT	0.0025142945091329396	IMPLEMENTATION	1.6807909534657486E-5	TEST	9.7086192479516E-6	DOCUMENTATION
// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.5099350052480933	IMPLEMENTATION	0.4626195250929274	DESIGN	0.02679579718308795	DEFECT	4.523046086008459E-4	TEST	1.8964134654161503E-4	WITHOUT_CLASSIFICATION	7.726520748881948E-6	DOCUMENTATION
// This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.9281005148534909	DESIGN	0.07156029030471805	WITHOUT_CLASSIFICATION	3.0831363360392757E-4	IMPLEMENTATION	2.9889889307027495E-5	DEFECT	8.472382521653415E-7	TEST	1.4408062785170614E-7	DOCUMENTATION
//TODO: bad implementation, cos it depends upon ordering of mapping doc //      fixing this requires that Collection/PersistentClass gain access //      to the Mappings reference from Configuration (or the filterDefinitions //      map directly) sometime during Configuration.buildSessionFactory //      (after all the types/filter-defs are known and before building //      persisters).	DESIGN	0.9970595737741285	DESIGN	0.001305350091190558	IMPLEMENTATION	9.008684035751158E-4	DEFECT	7.154729043625965E-4	WITHOUT_CLASSIFICATION	1.3924187091865815E-5	DOCUMENTATION	4.810639651461804E-6	TEST
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.9997740462680924	DESIGN	1.2801537862619538E-4	DEFECT	8.997987300681986E-5	WITHOUT_CLASSIFICATION	5.892444315346954E-6	IMPLEMENTATION	1.7953756063138609E-6	DOCUMENTATION	2.706603529047545E-7	TEST
// hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9999994721880949	DESIGN	2.802732143681374E-7	IMPLEMENTATION	2.2554518476268655E-7	DEFECT	1.7876002358503143E-8	WITHOUT_CLASSIFICATION	3.394259588163002E-9	TEST	7.23243977398053E-10	DOCUMENTATION
//FIXME: get the PersistentClass	DESIGN	0.5158450018923099	WITHOUT_CLASSIFICATION	0.36952746429466676	DESIGN	0.11192727889235823	IMPLEMENTATION	0.0018133273922375584	TEST	7.454872449693594E-4	DEFECT	1.4144028345836472E-4	DOCUMENTATION
//FIXME: get the PersistentClass	DESIGN	0.5158450018923099	WITHOUT_CLASSIFICATION	0.36952746429466676	DESIGN	0.11192727889235823	IMPLEMENTATION	0.0018133273922375584	TEST	7.454872449693594E-4	DEFECT	1.4144028345836472E-4	DOCUMENTATION
//Icky workaround for MySQL bug:	DESIGN	0.9987936271039128	DESIGN	9.060971564845198E-4	WITHOUT_CLASSIFICATION	2.801800520977784E-4	DEFECT	9.190052573007908E-6	IMPLEMENTATION	7.163979819984729E-6	DOCUMENTATION	3.7416551118147496E-6	TEST
//TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.9032765809166625	WITHOUT_CLASSIFICATION	0.08933641872353121	IMPLEMENTATION	0.0025343695426281606	DOCUMENTATION	0.0024808392515225735	DESIGN	0.002321137659969381	DEFECT	5.065390568606744E-5	TEST
//TODO possibly relax that	DESIGN	0.5832291793236908	DESIGN	0.4151102018005687	WITHOUT_CLASSIFICATION	0.0012863341008602272	IMPLEMENTATION	1.899389807813797E-4	DOCUMENTATION	9.230153509675465E-5	DEFECT	9.20442590022006E-5	TEST
//TODO possibly relax that	DESIGN	0.5832291793236908	DESIGN	0.4151102018005687	WITHOUT_CLASSIFICATION	0.0012863341008602272	IMPLEMENTATION	1.899389807813797E-4	DOCUMENTATION	9.230153509675465E-5	DEFECT	9.20442590022006E-5	TEST
//TODO possibly relax that	DESIGN	0.5832291793236908	DESIGN	0.4151102018005687	WITHOUT_CLASSIFICATION	0.0012863341008602272	IMPLEMENTATION	1.899389807813797E-4	DOCUMENTATION	9.230153509675465E-5	DEFECT	9.20442590022006E-5	TEST
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.9997740462680924	DESIGN	1.2801537862619538E-4	DEFECT	8.997987300681986E-5	WITHOUT_CLASSIFICATION	5.892444315346954E-6	IMPLEMENTATION	1.7953756063138609E-6	DOCUMENTATION	2.706603529047545E-7	TEST
//use a degenerated strategy for backward compatibility	DESIGN	0.9994979014213645	WITHOUT_CLASSIFICATION	4.940550231782558E-4	DESIGN	7.811076720647346E-6	IMPLEMENTATION	9.274983706598995E-8	TEST	9.216482440720547E-8	DEFECT	4.756407505699949E-8	DOCUMENTATION
// Sets can be just a view of a part of another collection. // do we need to copy it to be sure it won't be changing // underneath us? // ie. this.set.addAll(set);	DESIGN	0.5744525389450724	WITHOUT_CLASSIFICATION	0.42152942939361504	DESIGN	0.0037612291478419553	DEFECT	1.8796258167050607E-4	IMPLEMENTATION	6.757444290417269E-5	TEST	1.2654888959310826E-6	DOCUMENTATION
//note that i parameter is now unused (delete it?)	DESIGN	0.9809257345777084	DESIGN	0.018833230298214987	WITHOUT_CLASSIFICATION	2.3478381864506191E-4	IMPLEMENTATION	5.3736748187641565E-6	TEST	8.11736743220692E-7	DEFECT	6.589386936238192E-8	DOCUMENTATION
//just to help out during the load (ugly, i know)	DESIGN	0.9981068220797742	WITHOUT_CLASSIFICATION	0.0014759708821538338	DESIGN	4.0300082953801357E-4	IMPLEMENTATION	8.676503890498862E-6	DEFECT	3.422836225044339E-6	TEST	2.106868418597E-6	DOCUMENTATION
// TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.6769801951416263	DEFECT	0.17872560612174548	DESIGN	0.08139213825203956	WITHOUT_CLASSIFICATION	0.06269198847201057	IMPLEMENTATION	1.5709822460142992E-4	DOCUMENTATION	5.2973787976664234E-5	TEST
// yick!  need this for proper serialization/deserialization handling...	DESIGN	0.568165047632574	WITHOUT_CLASSIFICATION	0.2567350717393023	DEFECT	0.17196957451074948	DESIGN	0.002097385596991768	DOCUMENTATION	0.001025438742535829	TEST	7.481777846614296E-6	IMPLEMENTATION
//TODO: get SQL rendering out of this package!	DESIGN	0.9146036865528243	DESIGN	0.08506162289710674	WITHOUT_CLASSIFICATION	2.480788947751007E-4	IMPLEMENTATION	3.922444142712188E-5	TEST	3.4555831264913935E-5	DEFECT	1.2831382601725922E-5	DOCUMENTATION
//TODO: get SQL rendering out of this package!	DESIGN	0.9146036865528243	DESIGN	0.08506162289710674	WITHOUT_CLASSIFICATION	2.480788947751007E-4	IMPLEMENTATION	3.922444142712188E-5	TEST	3.4555831264913935E-5	DEFECT	1.2831382601725922E-5	DOCUMENTATION
//yuck!	DESIGN	0.9814460236616072	WITHOUT_CLASSIFICATION	0.018127451542162817	DESIGN	3.7388940715109737E-4	DEFECT	3.6161299185310805E-5	DOCUMENTATION	1.2795438618624213E-5	TEST	3.678651275000971E-6	IMPLEMENTATION
//TODO: get SQL rendering out of this package!	DESIGN	0.9146036865528243	DESIGN	0.08506162289710674	WITHOUT_CLASSIFICATION	2.480788947751007E-4	IMPLEMENTATION	3.922444142712188E-5	TEST	3.4555831264913935E-5	DEFECT	1.2831382601725922E-5	DOCUMENTATION
// TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.990762613725413	DESIGN	0.008617929068543966	DEFECT	5.917257881016962E-4	IMPLEMENTATION	1.565689593763155E-5	TEST	1.2056378597901977E-5	DOCUMENTATION	1.8143405937774193E-8	WITHOUT_CLASSIFICATION
//HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9948764772800027	WITHOUT_CLASSIFICATION	0.005021929864327553	DESIGN	7.229196981469321E-5	IMPLEMENTATION	2.385784587736767E-5	TEST	4.321794572914945E-6	DEFECT	1.1212454046780754E-6	DOCUMENTATION
// does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.8007047244122796	DESIGN	0.19852985619689395	WITHOUT_CLASSIFICATION	5.338531004614096E-4	DEFECT	1.637618916619968E-4	TEST	6.330401949762331E-5	IMPLEMENTATION	4.500379205500793E-6	DOCUMENTATION
// sql-server, at least needed this dropped after use; strange!	DESIGN	0.9991882701213725	WITHOUT_CLASSIFICATION	7.59677117422291E-4	DESIGN	2.910212151444409E-5	TEST	2.067343926599083E-5	IMPLEMENTATION	1.7927122855392313E-6	DOCUMENTATION	4.844881392976057E-7	DEFECT
// todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.4580488910944309	WITHOUT_CLASSIFICATION	0.3437530598877875	DEFECT	0.19809124905252062	DESIGN	7.484865110786032E-5	TEST	2.5128927315330742E-5	DOCUMENTATION	6.822386837857779E-6	IMPLEMENTATION
// TBD should this be varbinary($1)? //	DESIGN	0.9913077858479039	WITHOUT_CLASSIFICATION	0.008206898907425908	DESIGN	4.164778595706528E-4	IMPLEMENTATION	5.431384924479782E-5	DEFECT	1.2371506997240142E-5	TEST	2.152028857342892E-6	DOCUMENTATION
// is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9907072809506634	WITHOUT_CLASSIFICATION	0.009002012571690008	DESIGN	1.9796416385570178E-4	DEFECT	9.063526323032743E-5	IMPLEMENTATION	1.236045277243097E-6	DOCUMENTATION	8.710052832597248E-7	TEST
// xmlforest requires a new kind of function constructor	DESIGN	0.9999868206660352	WITHOUT_CLASSIFICATION	1.1887437610329685E-5	IMPLEMENTATION	8.148336846692858E-7	DESIGN	2.831522246717493E-7	DEFECT	1.9012888673862674E-7	TEST	3.7815583710479095E-9	DOCUMENTATION
// Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9974825501925756	WITHOUT_CLASSIFICATION	0.0024894676877601583	DESIGN	1.4912805577096172E-5	IMPLEMENTATION	7.388177885248054E-6	DEFECT	3.847223166872887E-6	DOCUMENTATION	1.8339130351110658E-6	TEST
// Do we need to qualify index names with the schema name?	DESIGN	0.9967792351300836	WITHOUT_CLASSIFICATION	0.0030767826296761347	IMPLEMENTATION	5.415900671930117E-5	DESIGN	5.250407146899248E-5	DOCUMENTATION	1.973526648509788E-5	DEFECT	1.7583895566903748E-5	TEST
// Does this dialect support the UNIQUE column syntax?	DESIGN	0.995284990348228	WITHOUT_CLASSIFICATION	0.0039347567377967544	DESIGN	7.440131214388677E-4	IMPLEMENTATION	1.6899415557798173E-5	DEFECT	1.2525958756702603E-5	DOCUMENTATION	6.814418221813669E-6	TEST
// Does this dialect support check constraints?	DESIGN	0.9948665965018837	WITHOUT_CLASSIFICATION	0.0038049102791753425	DESIGN	0.0013022162660503288	IMPLEMENTATION	1.7026184708703206E-5	DOCUMENTATION	7.652433793206994E-6	TEST	1.5983343886521879E-6	DEFECT
// Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9699043367662412	WITHOUT_CLASSIFICATION	0.030085169910712178	DESIGN	3.697187246812114E-6	DEFECT	2.95188124417812E-6	IMPLEMENTATION	2.7412117915368793E-6	DOCUMENTATION	1.1030427640469466E-6	TEST
// Does this dialect support the FOR UPDATE syntax?	DESIGN	0.977344524554363	WITHOUT_CLASSIFICATION	0.02242478105937572	DESIGN	1.8054048740373445E-4	IMPLEMENTATION	2.4415956262592056E-5	DEFECT	1.6839478677065534E-5	DOCUMENTATION	8.898463917957632E-6	TEST
// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9862549815401571	WITHOUT_CLASSIFICATION	0.013155329866626373	DESIGN	5.633067616466279E-4	IMPLEMENTATION	1.4545591166921582E-5	TEST	8.593725737291047E-6	DOCUMENTATION	3.24251466576529E-6	DEFECT
// Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.9983267704250386	DESIGN	0.0016046732525760272	WITHOUT_CLASSIFICATION	5.69892446033097E-5	DEFECT	9.991209031754337E-6	IMPLEMENTATION	9.85386601033207E-7	DOCUMENTATION	5.904821493112445E-7	TEST
//note there is a wierd implementation in the client side	DESIGN	0.9999514913901635	WITHOUT_CLASSIFICATION	4.814664848610802E-5	DESIGN	3.0284648244854634E-7	IMPLEMENTATION	4.7357042050633795E-8	DEFECT	9.519805097079416E-9	TEST	2.238020634877981E-9	DOCUMENTATION
//TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.6938285952431301	WITHOUT_CLASSIFICATION	0.1644393210978227	DEFECT	0.09669278329253822	DESIGN	0.044093292494593435	IMPLEMENTATION	6.062900017288595E-4	TEST	3.3971787018662335E-4	DOCUMENTATION
// todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.9096352327007403	DESIGN	0.034704711108056945	WITHOUT_CLASSIFICATION	0.028338512068164404	DEFECT	0.02670150602074844	IMPLEMENTATION	6.182482684060678E-4	DOCUMENTATION	1.7898338839137203E-6	TEST
// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.9416052434928013	DESIGN	0.05681940691858489	WITHOUT_CLASSIFICATION	0.0015580648800230567	DEFECT	1.588702273851989E-5	IMPLEMENTATION	9.385558274968831E-7	TEST	4.5913002482824516E-7	DOCUMENTATION
//TODO: should orphans really be deleted during lock???	DESIGN	0.7846346432012038	DESIGN	0.1749321193044829	DEFECT	0.03318889826578319	WITHOUT_CLASSIFICATION	0.0071988439511169264	IMPLEMENTATION	3.128436258280869E-5	DOCUMENTATION	1.4210914830390313E-5	TEST
// orphans should not be deleted during merge??	DESIGN	0.9997961206099474	WITHOUT_CLASSIFICATION	2.0072611037917702E-4	DESIGN	2.4270053653061123E-6	DEFECT	6.94047735171711E-7	IMPLEMENTATION	3.0437478618869426E-8	TEST	1.7890942995859132E-9	DOCUMENTATION
// orphans should not be deleted during copy??	DESIGN	0.9998926083569559	WITHOUT_CLASSIFICATION	7.776544609825022E-5	DESIGN	2.9042512449575057E-5	DEFECT	5.607432567333217E-7	IMPLEMENTATION	1.922853563473593E-8	TEST	3.71270397082224E-9	DOCUMENTATION
//I suppose?	DESIGN	0.9893181852430563	WITHOUT_CLASSIFICATION	0.005361830414321677	DESIGN	0.00527688066766161	IMPLEMENTATION	2.2037071363010508E-5	DOCUMENTATION	1.6309097331343637E-5	DEFECT	4.757506265992776E-6	TEST
//TODO: suck this logic into the collection!	DESIGN	0.9567004796917749	DESIGN	0.039081688740008357	IMPLEMENTATION	0.0032493027450340496	WITHOUT_CLASSIFICATION	6.546653742124053E-4	DEFECT	2.7676268962108805E-4	DOCUMENTATION	3.7100759349169725E-5	TEST
// TODO: an alternative is to check if the owner has changed; if it hasn't then // get the ID from collection.getOwner()	DESIGN	0.9974014983668256	IMPLEMENTATION	0.0015667517017043959	DEFECT	5.825498919441749E-4	WITHOUT_CLASSIFICATION	2.3248383843612404E-4	DESIGN	2.1597513871667915E-4	TEST	7.410623730085209E-7	DOCUMENTATION
//TODO:refactor + make this method private	DESIGN	0.9983465860912605	DESIGN	0.0013834661580498665	WITHOUT_CLASSIFICATION	2.0601753945334348E-4	IMPLEMENTATION	5.4591963198705006E-5	TEST	9.038348798501343E-6	DOCUMENTATION	2.998992390895726E-7	DEFECT
// todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9997019342206402	WITHOUT_CLASSIFICATION	2.979091513659316E-4	DESIGN	1.3982396110652732E-7	DEFECT	5.884474410373095E-9	DOCUMENTATION	5.869286487235609E-9	IMPLEMENTATION	5.0502717517117695E-9	TEST
//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.9992081675637302	DESIGN	5.494343128546312E-4	IMPLEMENTATION	1.890257428003368E-4	WITHOUT_CLASSIFICATION	2.105960933991253E-5	DOCUMENTATION	1.9361499113951425E-5	TEST	1.2951272160771145E-5	DEFECT
//TODO: better to pass the id in as an argument?	DESIGN	0.9993646879309979	DESIGN	5.9070252402964E-4	WITHOUT_CLASSIFICATION	2.4830464118803978E-5	DOCUMENTATION	1.1451748956284111E-5	DEFECT	7.325348133905096E-6	TEST	1.0019837636478667E-6	IMPLEMENTATION
// todo : potentially look at optimizing these two arrays	DESIGN	0.9994437267022208	WITHOUT_CLASSIFICATION	2.7222131721214783E-4	DEFECT	1.4449911247759492E-4	DESIGN	1.361859651919025E-4	IMPLEMENTATION	2.227564787266921E-6	TEST	1.1393381102542573E-6	DOCUMENTATION
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.9999953472679023	DESIGN	3.0384236717151364E-6	DEFECT	9.823707506033658E-7	WITHOUT_CLASSIFICATION	6.118487862988811E-7	IMPLEMENTATION	1.7281757052343E-8	TEST	2.807131766392124E-9	DOCUMENTATION
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.9999953472679023	DESIGN	3.0384236717151364E-6	DEFECT	9.823707506033658E-7	WITHOUT_CLASSIFICATION	6.118487862988811E-7	IMPLEMENTATION	1.7281757052343E-8	TEST	2.807131766392124E-9	DOCUMENTATION
//TODO: temporary	DESIGN	0.9990977131313519	DESIGN	8.095530142204225E-4	WITHOUT_CLASSIFICATION	6.57510849797096E-5	IMPLEMENTATION	1.4926643699704625E-5	TEST	7.1334763389864375E-6	DEFECT	4.922649409185538E-6	DOCUMENTATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.5248037973828116	IMPLEMENTATION	0.40060932435062946	WITHOUT_CLASSIFICATION	0.044045908329487134	DESIGN	0.024979067670838788	DEFECT	0.005220893851673039	TEST	3.410084145599192E-4	DOCUMENTATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.5248037973828116	IMPLEMENTATION	0.40060932435062946	WITHOUT_CLASSIFICATION	0.044045908329487134	DESIGN	0.024979067670838788	DEFECT	0.005220893851673039	TEST	3.410084145599192E-4	DOCUMENTATION
//TODO: ugly here:	DESIGN	0.9666858600531976	DESIGN	0.03207261397159935	IMPLEMENTATION	6.1107955091661E-4	WITHOUT_CLASSIFICATION	3.0487504418641974E-4	DEFECT	2.0798168039627647E-4	TEST	1.1758969970376037E-4	DOCUMENTATION
//this is kinda the best we can do...	DESIGN	0.9877417422253462	WITHOUT_CLASSIFICATION	0.009622764902898958	DESIGN	0.0023976024363799647	DEFECT	2.1836611504116356E-4	TEST	1.5301836808754727E-5	DOCUMENTATION	4.2224835249115715E-6	IMPLEMENTATION
//TODO: this needn't exclude subclasses...	DESIGN	0.9895102071628613	DESIGN	0.004397207015694978	DEFECT	0.0035817912491427585	WITHOUT_CLASSIFICATION	0.0019463295930073692	IMPLEMENTATION	3.2850738758515496E-4	TEST	2.3595759170863314E-4	DOCUMENTATION
// todo : need map? the prob is a proper key, right?	DESIGN	0.6277664008718976	DESIGN	0.29962846514516817	DEFECT	0.06765789328466537	WITHOUT_CLASSIFICATION	0.004135702380486188	IMPLEMENTATION	4.4754083782751463E-4	TEST	3.639974799549979E-4	DOCUMENTATION
// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9534272797296572	WITHOUT_CLASSIFICATION	0.046494604195582594	DESIGN	7.668585597129766E-5	DEFECT	1.3921896346296083E-6	TEST	3.143838157769291E-8	DOCUMENTATION	6.590772770280075E-9	IMPLEMENTATION
// todo : hack!!! // NOTE : here we cleanup the load context when we have no more local // LCE entries.  This "works" for the time being because really // only the collection load contexts are implemented.  Long term, // this cleanup should become part of the "close result set" // processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9999615763334001	DESIGN	2.8368928021179996E-5	WITHOUT_CLASSIFICATION	8.038637501703321E-6	DEFECT	2.0137007957859342E-6	TEST	1.2366591548675523E-9	IMPLEMENTATION	1.1636221228259605E-9	DOCUMENTATION
// todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.7873014589976485	DESIGN	0.2121185327281889	WITHOUT_CLASSIFICATION	5.638333367208682E-4	DEFECT	8.675153420900578E-6	IMPLEMENTATION	7.165441491048836E-6	TEST	3.343425299053932E-7	DOCUMENTATION
// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.6969097321497391	IMPLEMENTATION	0.29854544017061974	DESIGN	0.004122465851992421	DEFECT	2.7584219794483857E-4	TEST	1.3370640735660947E-4	WITHOUT_CLASSIFICATION	1.2813222347265519E-5	DOCUMENTATION
// TODO : add this info to the translator and aggregate it here...	DESIGN	0.9976642252530019	IMPLEMENTATION	0.0022613312294201163	DESIGN	3.882616560556033E-5	TEST	2.1440430241941972E-5	DOCUMENTATION	1.3957812422224823E-5	DEFECT	2.1910930817511065E-7	WITHOUT_CLASSIFICATION
//TODO: move into collection type, so we can use polymorphism!	DESIGN	0.955912251563632	DESIGN	0.04396649976229462	WITHOUT_CLASSIFICATION	7.58429028558477E-5	DEFECT	3.1485522714258014E-5	IMPLEMENTATION	1.352546659119667E-5	DOCUMENTATION	3.9478191191424357E-7	TEST
// todo : should we check the current isolation mode explicitly?	DESIGN	0.6713927867287807	WITHOUT_CLASSIFICATION	0.13966438687129418	DEFECT	0.11693861128474294	DESIGN	0.07136571318417913	IMPLEMENTATION	6.28738655248056E-4	DOCUMENTATION	9.763275755067045E-6	TEST
//TODO: suck into event class	DESIGN	0.9988362007748401	DESIGN	9.566606784622855E-4	IMPLEMENTATION	7.828320966716404E-5	DEFECT	7.450808937155436E-5	DOCUMENTATION	5.303662307915737E-5	WITHOUT_CLASSIFICATION	1.3106245797470463E-6	TEST
//do we even really need this? the update will fail anyway....	DESIGN	0.4480965706569084	DEFECT	0.3397697629378517	WITHOUT_CLASSIFICATION	0.12486078800402645	DESIGN	0.07433323077419218	DOCUMENTATION	0.012336771329968549	IMPLEMENTATION	6.028762970526973E-4	TEST
//hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9992241787326006	DESIGN	5.158701460232901E-4	IMPLEMENTATION	1.8137415057930298E-4	DEFECT	4.0070735220925916E-5	DOCUMENTATION	3.4969845424625844E-5	WITHOUT_CLASSIFICATION	3.5363901510308046E-6	TEST
//TODO: would it be better to do a refresh from db?	DESIGN	0.9887843695831211	DESIGN	0.010898295277381476	IMPLEMENTATION	1.5364286217491968E-4	WITHOUT_CLASSIFICATION	9.2614392451579E-5	DEFECT	7.003529652934606E-5	TEST	1.0425883415169647E-6	DOCUMENTATION
//TODO: we use two visitors here, inefficient!	DESIGN	0.9971498086133476	DESIGN	0.0016453107044779988	WITHOUT_CLASSIFICATION	0.0011026307845056246	IMPLEMENTATION	7.797288166438797E-5	DOCUMENTATION	1.8468571880206805E-5	DEFECT	5.80844412398469E-6	TEST
// this class has no proxies (so do a shortcut)	DESIGN	0.9999684955816467	WITHOUT_CLASSIFICATION	3.144016575467018E-5	DESIGN	4.467425359778424E-8	DEFECT	9.041332975267865E-9	DOCUMENTATION	5.528108320738109E-9	IMPLEMENTATION	5.008903686260344E-9	TEST
//PostLoad is needed for EJB3 //TODO: reuse the PostLoadEvent...	DESIGN	0.8766787409662797	IMPLEMENTATION	0.0681064350291955	WITHOUT_CLASSIFICATION	0.03704339495221882	DESIGN	0.010780130730896342	TEST	0.0060018192809870845	DEFECT	0.001389479040422423	DOCUMENTATION
//TODO: put this stuff back in to read snapshot from //      the second-level cache (needs some extra work)	DESIGN	0.9950034033045474	DESIGN	0.004119417924251276	WITHOUT_CLASSIFICATION	5.225293021646615E-4	DEFECT	3.3308416263667245E-4	IMPLEMENTATION	1.8169990844869706E-5	DOCUMENTATION	3.3953155549460344E-6	TEST
// null or brand new collection // this will also (inefficiently) handle arrays, which have // no snapshot, so we can't do any better	DESIGN	0.9749188718452169	WITHOUT_CLASSIFICATION	0.025080871240504413	DESIGN	1.2863508058713707E-7	IMPLEMENTATION	1.204915964605171E-7	DOCUMENTATION	5.259455765559162E-9	DEFECT	2.5281457437892663E-9	TEST
//TODO: is this 100% correct?	DESIGN	0.9948192963890146	DESIGN	0.0027357663583297844	DEFECT	0.0023579581643391107	WITHOUT_CLASSIFICATION	4.9472446683061135E-5	TEST	2.8377948147594057E-5	DOCUMENTATION	9.128693485978628E-6	IMPLEMENTATION
// TODO: iteratively get transient entities and retry merge until one of the following conditions: //       1) transientCopyCache.size() == 0 //       2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing // TODO: find out if retrying can add entities to copyCache (don't think it can...) // For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.6209413541579819	DESIGN	0.24399773770484479	DEFECT	0.13278387295314256	IMPLEMENTATION	0.001962838456025604	WITHOUT_CLASSIFICATION	2.986533145010911E-4	TEST	1.5543413504056246E-5	DOCUMENTATION
// entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9999640913156284	DESIGN	3.354147881699888E-5	WITHOUT_CLASSIFICATION	1.6986137767074749E-6	DEFECT	4.750446365755077E-7	IMPLEMENTATION	1.7035616735797337E-7	TEST	2.3190974194490055E-8	DOCUMENTATION
//TODO: we should throw an exception if we really *know* for sure   //      that this is a detached instance, rather than just assuming //throw new StaleObjectStateException(entityName, id);	DESIGN	0.9728012997732574	DESIGN	0.02714561193183977	WITHOUT_CLASSIFICATION	5.068196872820447E-5	DEFECT	2.3635485727380722E-6	TEST	3.730136505031907E-8	DOCUMENTATION	5.476236936914764E-9	IMPLEMENTATION
// TODO : perhaps we should additionally require that the incoming entity // version be equivalent to the defined unsaved-value?	DESIGN	0.9993387176028161	DESIGN	6.603159032521931E-4	IMPLEMENTATION	8.388994899785929E-7	DEFECT	9.10363646888968E-8	DOCUMENTATION	3.575468638117256E-8	WITHOUT_CLASSIFICATION	8.033905754222036E-10	TEST
// perhaps this should be an exception since it is only ever used // in the above method?	DESIGN	0.9879229275594441	DESIGN	0.012032990318205488	WITHOUT_CLASSIFICATION	4.4001313195605444E-5	DEFECT	7.11833454107396E-8	TEST	8.466234791060504E-9	DOCUMENTATION	1.1595743947989986E-9	IMPLEMENTATION
// Put a placeholder in entries, so we don't recurse back and try to save() the // same object again. QUESTION: should this be done before onSave() is called? // likewise, should it be done before onUpdate()?	DESIGN	0.9792168042777676	WITHOUT_CLASSIFICATION	0.02076066234149123	DESIGN	2.2426858655011153E-5	IMPLEMENTATION	5.23324437512042E-8	DOCUMENTATION	4.136216655267901E-8	TEST	1.2827476015097146E-8	DEFECT
//TODO: merge into one method!	DESIGN	0.9493102662813375	DESIGN	0.04879733903159001	WITHOUT_CLASSIFICATION	0.0013872668411687857	IMPLEMENTATION	3.606911603130551E-4	DEFECT	8.815777939469947E-5	DOCUMENTATION	5.62789061960111E-5	TEST
//TODO: refactor to .sql package	DESIGN	0.9590685684169683	DESIGN	0.03622035727026353	WITHOUT_CLASSIFICATION	0.004688372691197993	IMPLEMENTATION	1.3037179357576826E-5	DOCUMENTATION	7.135146673741844E-6	TEST	2.5292955390623985E-6	DEFECT
/** * Provides query splitting methods, which were originally in QueryTranslator. * <br> * TODO: This will need to be refactored at some point. * * @author josh */	DESIGN	0.9984380672415719	DESIGN	0.0012682516551863132	DOCUMENTATION	2.504965250398202E-4	IMPLEMENTATION	3.7725933902316675E-5	DEFECT	4.781052466155059E-6	TEST	6.775918333573772E-7	WITHOUT_CLASSIFICATION
//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.9998653225884188	DESIGN	5.910292370701556E-5	TEST	5.8183029321403014E-5	IMPLEMENTATION	1.5587257401995316E-5	DEFECT	1.4456385290016971E-6	WITHOUT_CLASSIFICATION	3.585626219220297E-7	DOCUMENTATION
// todo : temporary //      needed because currently persister is the one that //      creates and renders the join fragments for inheritence //      hierarchies...	DESIGN	0.6682865163644656	DESIGN	0.33155635179385057	WITHOUT_CLASSIFICATION	1.0484922710081431E-4	DEFECT	1.944598691211291E-5	DOCUMENTATION	1.804313396278052E-5	IMPLEMENTATION	1.4793493708257167E-5	TEST
// TODO : better way?!?	DESIGN	0.9998770827752205	DESIGN	1.0885063472327325E-4	IMPLEMENTATION	7.686668352268461E-6	DEFECT	3.214998165340029E-6	DOCUMENTATION	3.1609423318418563E-6	TEST	3.981206873914274E-9	WITHOUT_CLASSIFICATION
// Not possible to simply re-use the versionPropertyNode here as it causes // OOM errors due to circularity :(	DESIGN	0.9999979483359308	WITHOUT_CLASSIFICATION	1.2374621057817787E-6	IMPLEMENTATION	7.148101562520683E-7	DESIGN	9.764741784464292E-8	DEFECT	1.229616361362405E-9	TEST	5.147729301260806E-10	DOCUMENTATION
//TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9898633291038964	DESIGN	0.00994017815290643	WITHOUT_CLASSIFICATION	1.5933791768422184E-4	DEFECT	1.9148154691252565E-5	TEST	1.0472409971501145E-5	IMPLEMENTATION	7.534260850298624E-6	DOCUMENTATION
// TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.999240804709334	DESIGN	7.465396550180201E-4	IMPLEMENTATION	5.85848006966994E-6	DEFECT	5.350484847399442E-6	TEST	1.4445247022624321E-6	DOCUMENTATION	2.146028804557908E-9	WITHOUT_CLASSIFICATION
// even here, if only properties mapped to the "base table" are referenced // in the set and where clauses, this could be handled by the BasicDelegate. // TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9999999980291957	DESIGN	1.2532652240060059E-9	IMPLEMENTATION	2.9604127424204276E-10	DOCUMENTATION	2.1160183395402787E-10	WITHOUT_CLASSIFICATION	1.933704768562304E-10	TEST	1.6525331028315823E-11	DEFECT
//TODO: switch statements are always evil! We already had bugs because  //      of forgotten token types. Use polymorphism for this!	DESIGN	0.9257435242035709	DESIGN	0.05068613905018582	WITHOUT_CLASSIFICATION	0.02343603748416747	DEFECT	1.2458040938842236E-4	DOCUMENTATION	7.257368401918892E-6	TEST	2.46148428557128E-6	IMPLEMENTATION
// TODO : we really need to be able to deal with component paths here also; // this is difficult because the hql-sql grammar expects all those node types // to be FromReferenceNodes.  One potential fix here would be to convert the // IntoClause to just use a FromClause/FromElement combo (as a child of the // InsertStatement) and move all this logic into the InsertStatement.  That's // probably the easiest approach (read: least amount of changes to the grammar // and code), but just doesn't feel right as then an insert would contain // 2 from-clauses	DESIGN	0.9709475273332491	DESIGN	0.02904068188468037	WITHOUT_CLASSIFICATION	1.1412613901094468E-5	TEST	3.288223723080696E-7	DOCUMENTATION	4.27713736455963E-8	DEFECT	6.574423525501277E-9	IMPLEMENTATION
// really there are two situations where it should be ok to allow the insertion // into properties defined on a superclass: //      1) union-subclass with an abstract root entity //      2) discrim-subclass // // #1 is handled already because of the fact that // UnionSubclassPersister alreay always returns 0 // for this call... // // we may want to disallow it for discrim-subclass just for // consistency-sake (currently does not work anyway)...	DESIGN	0.9999996986767674	WITHOUT_CLASSIFICATION	2.96281680301797E-7	DESIGN	4.8162647963990975E-9	DEFECT	1.332987648448036E-10	DOCUMENTATION	5.484772815219541E-11	IMPLEMENTATION	3.7140937378036253E-11	TEST
//yuck!	DESIGN	0.9814460236616072	WITHOUT_CLASSIFICATION	0.018127451542162817	DESIGN	3.7388940715109737E-4	DEFECT	3.6161299185310805E-5	DOCUMENTATION	1.2795438618624213E-5	TEST	3.678651275000971E-6	IMPLEMENTATION
// implicit joins are always(?) ok to reuse	DESIGN	0.9952722531603859	WITHOUT_CLASSIFICATION	0.004714272137086705	DESIGN	1.0363921030099045E-5	IMPLEMENTATION	2.335413085882251E-6	DEFECT	6.714676701928833E-7	DOCUMENTATION	1.0390074113612006E-7	TEST
// TODO : we may also want to check that the types here map to exactly one column/JDBC-type //      can't think of a situation where arithmetic expression between multi-column mappings //      makes any sense.	DESIGN	0.7750369616381554	IMPLEMENTATION	0.13674209932177506	DESIGN	0.08757284708891847	DEFECT	6.368163571864653E-4	DOCUMENTATION	5.766508072166106E-6	WITHOUT_CLASSIFICATION	5.509085892400243E-6	TEST
// we do not know either type //BLIND GUESS!	DESIGN	0.9998578692699317	WITHOUT_CLASSIFICATION	1.3658260748324386E-4	DESIGN	3.703573293416335E-6	DEFECT	1.496127388854049E-6	IMPLEMENTATION	1.769036160676361E-7	DOCUMENTATION	1.715182867717864E-7	TEST
//TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999997520451942	DESIGN	1.3123845272159518E-7	IMPLEMENTATION	5.6519732451599434E-8	DOCUMENTATION	5.305118329126159E-8	DEFECT	4.13856630531645E-9	TEST	3.0068709806457826E-9	WITHOUT_CLASSIFICATION
// TODO: Replace this with a more elegant solution.	DESIGN	0.9757336193562247	DESIGN	0.02422938097082157	IMPLEMENTATION	2.6043192758507958E-5	TEST	6.0702495339154545E-6	DEFECT	4.345275984834468E-6	WITHOUT_CLASSIFICATION	5.40954676386495E-7	DOCUMENTATION
// TODO: Should this really return null?  If not, figure out something better to do here.	DESIGN	0.9896095007720779	DESIGN	0.010366497676115721	IMPLEMENTATION	2.198579683214009E-5	DEFECT	9.116265969282862E-7	TEST	8.608725722529155E-7	DOCUMENTATION	2.4325580505777135E-7	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.9146036865528243	DESIGN	0.08506162289710674	WITHOUT_CLASSIFICATION	2.480788947751007E-4	IMPLEMENTATION	3.922444142712188E-5	TEST	3.4555831264913935E-5	DEFECT	1.2831382601725922E-5	DOCUMENTATION
// yuck!	DESIGN	0.9994289139181964	WITHOUT_CLASSIFICATION	5.273560980783053E-4	DESIGN	4.190233482972616E-5	DEFECT	1.1349917094656003E-6	DOCUMENTATION	4.13257789703085E-7	TEST	2.793993962856207E-7	IMPLEMENTATION
// ignore it; the incoming property could not be found so we // cannot be sure what to do here.  At the very least, the // safest is to simply not apply any dereference toggling...	DESIGN	0.9882179865996369	WITHOUT_CLASSIFICATION	0.008876627406092366	DESIGN	0.0028711447766193087	DEFECT	2.832650773603373E-5	IMPLEMENTATION	4.055453501856713E-6	TEST	1.8592564135920965E-6	DOCUMENTATION
// TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.9992887749289993	DESIGN	4.748356383065908E-4	IMPLEMENTATION	1.177679075065134E-4	TEST	1.0485290345100284E-4	DEFECT	1.017123904054247E-5	WITHOUT_CLASSIFICATION	3.597382696162149E-6	DOCUMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character // the trim-source	DESIGN	0.9999332807659681	WITHOUT_CLASSIFICATION	6.594466302155272E-5	DESIGN	4.7130436667925875E-7	IMPLEMENTATION	2.988546140889716E-7	DOCUMENTATION	4.263964079653051E-9	TEST	1.4806556170749014E-10	DEFECT
// todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.9786171005615303	WITHOUT_CLASSIFICATION	0.015761166586922788	DESIGN	0.005482335034973414	DEFECT	1.252397052591833E-4	IMPLEMENTATION	1.3823726354286918E-5	TEST	3.3438495991907394E-7	DOCUMENTATION
//TODO: is this a bit ugly?	DESIGN	0.9998337338594684	DESIGN	9.555403672297922E-5	DEFECT	6.12990593206571E-5	IMPLEMENTATION	5.928564407942982E-6	TEST	2.665728430071039E-6	DOCUMENTATION	8.187516500588691E-7	WITHOUT_CLASSIFICATION
// Need a better way to define the suffixes here...	DESIGN	0.7434663751684962	DESIGN	0.2556594010077787	WITHOUT_CLASSIFICATION	7.743083430737588E-4	IMPLEMENTATION	7.941414676736669E-5	TEST	1.5897156465166467E-5	DEFECT	4.604177418848897E-6	DOCUMENTATION
// TODO: something much better - look at the type of the other expression! // TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9999778601177315	DESIGN	1.7629157481257974E-5	DEFECT	2.384457616785679E-6	IMPLEMENTATION	1.1880164377601787E-6	TEST	9.113539984921527E-7	WITHOUT_CLASSIFICATION	2.689673429069599E-8	DOCUMENTATION
// TODO : what amount of significant digits need to be supported here? //      - from the DecimalFormat docs: //          [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9627938469125072	DESIGN	0.019430241867023506	WITHOUT_CLASSIFICATION	0.017009564813321085	DOCUMENTATION	5.646073546649201E-4	IMPLEMENTATION	1.359045200104992E-4	TEST	6.583453247275752E-5	DEFECT
// Needed the "clazz_" check to work around union-subclasses // TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9992357876098316	DESIGN	5.017780470108085E-4	IMPLEMENTATION	1.6289345418920754E-4	WITHOUT_CLASSIFICATION	8.704872521267276E-5	TEST	1.164171820984474E-5	DOCUMENTATION	8.504455459977271E-7	DEFECT
//We should actually rework this class to not implement Parser //and just process path expressions in the most convenient way.	DESIGN	0.6683678124463647	DEFECT	0.2810443018601542	IMPLEMENTATION	0.04006599777024369	DESIGN	0.01049767003768988	WITHOUT_CLASSIFICATION	2.099554190579385E-5	DOCUMENTATION	3.2223436417222217E-6	TEST
//The class is now way to complex!	DESIGN	0.9997097516374429	WITHOUT_CLASSIFICATION	2.1543529419302182E-4	DESIGN	7.059877559133255E-5	DEFECT	2.868266987099579E-6	IMPLEMENTATION	7.942167206150111E-7	TEST	5.518090649892351E-7	DOCUMENTATION
//TODO: get SQL rendering out of here	DESIGN	0.9549963160059723	DESIGN	0.03915660466973924	WITHOUT_CLASSIFICATION	0.005498333694848017	IMPLEMENTATION	2.0571707992434946E-4	TEST	8.448263597889457E-5	DEFECT	5.8545913537118696E-5	DOCUMENTATION
//TODO: is there a better way?	DESIGN	0.999946565983704	DESIGN	4.8800104330544096E-5	IMPLEMENTATION	2.443389813256981E-6	TEST	1.0928205623540168E-6	DEFECT	7.779388894028832E-7	WITHOUT_CLASSIFICATION	3.197627003862758E-7	DOCUMENTATION
//Must be done here because of side-effect! yuck...	DESIGN	0.9554484707929136	WITHOUT_CLASSIFICATION	0.04432954201456579	DESIGN	1.9198990117326039E-4	DEFECT	1.1737774672786737E-5	IMPLEMENTATION	1.1667056974389545E-5	DOCUMENTATION	6.592459700082066E-6	TEST
//name from a super query (a bit inelegant that it shows up here)	DESIGN	0.8091247534040301	DESIGN	0.1599404552717222	WITHOUT_CLASSIFICATION	0.030214846161071677	IMPLEMENTATION	3.9769495458324766E-4	DEFECT	3.145592277934014E-4	TEST	7.690980799274502E-6	DOCUMENTATION
// We should reengineer this class so that, rather than the current ad - // hoc linear approach to processing a stream of tokens, we instead // build up a tree of expressions.	DESIGN	0.6971340606180259	WITHOUT_CLASSIFICATION	0.29954568872726645	DESIGN	0.0033162153460505814	DEFECT	3.524576271351962E-6	DOCUMENTATION	4.2353958888941634E-7	TEST	8.719279678633342E-8	IMPLEMENTATION
// this is ugly here, but needed because its a subquery	DESIGN	0.6304966944761823	WITHOUT_CLASSIFICATION	0.3681192630198718	DESIGN	0.001032421489617473	IMPLEMENTATION	1.8990119427131203E-4	DEFECT	1.4207486006861703E-4	TEST	1.9644959988513833E-5	DOCUMENTATION
// unhappy about this being public ... is there a better way?	DESIGN	0.9999978166270184	DESIGN	9.55859846301072E-7	DEFECT	8.141927730417187E-7	WITHOUT_CLASSIFICATION	2.0341934585043673E-7	TEST	2.0002033604729008E-7	IMPLEMENTATION	9.880680540177719E-9	DOCUMENTATION
// Make sure this is a defined parameter and check the incoming value type // TODO: what should be the actual exception type here?	DESIGN	0.5593079014961255	DESIGN	0.4383990089069377	IMPLEMENTATION	0.0018357445302812907	WITHOUT_CLASSIFICATION	4.394432535682541E-4	DEFECT	1.742720768690567E-5	TEST	4.746054003238388E-7	DOCUMENTATION
// TODO : this constructor form is *only* used from constructor directly below us; can it go away?	DESIGN	0.9999987980282773	DESIGN	1.1717845693371875E-6	IMPLEMENTATION	2.1316099398130928E-8	TEST	3.4068551563509555E-9	DEFECT	3.393118841376619E-9	WITHOUT_CLASSIFICATION	2.0710799375916285E-9	DOCUMENTATION
//TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.8294864011486373	WITHOUT_CLASSIFICATION	0.16602563439988116	IMPLEMENTATION	0.003275296278631806	DESIGN	6.815921691803182E-4	DEFECT	2.766732608121776E-4	TEST	2.5440274285719295E-4	DOCUMENTATION
// TODO : should remove this exposure //  and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9999354369741776	DESIGN	5.20225157042614E-5	IMPLEMENTATION	7.269993628779381E-6	DEFECT	4.58729663584677E-6	WITHOUT_CLASSIFICATION	6.657685896787347E-7	DOCUMENTATION	1.7451263776532797E-8	TEST
// todo : should this get moved to PersistentContext? // logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.9615393432563457	DESIGN	0.03791857309423743	WITHOUT_CLASSIFICATION	5.407415280284805E-4	DEFECT	1.3158311087248088E-6	TEST	2.516256588754114E-8	DOCUMENTATION	1.1277138120598642E-9	IMPLEMENTATION
// TODO: what type?	DESIGN	0.5912861117897696	IMPLEMENTATION	0.3982489220716299	DESIGN	0.00581247844465783	WITHOUT_CLASSIFICATION	0.0032405805019847076	DEFECT	7.866837602970136E-4	DOCUMENTATION	6.252234316608381E-4	TEST
// todo : should seriously consider not allowing a txn to begin from a child session //      can always route the request to the root session...	DESIGN	0.9692807867475451	WITHOUT_CLASSIFICATION	0.01828477378500814	DESIGN	0.012289998359412696	DEFECT	1.315851074297001E-4	IMPLEMENTATION	1.2752030014603737E-5	TEST	1.0397058986090268E-7	DOCUMENTATION
// short-circuit for performance...	DESIGN	0.9999688054461479	WITHOUT_CLASSIFICATION	2.9970507581394934E-5	DESIGN	5.626011611898547E-7	DEFECT	4.04152386056998E-7	DOCUMENTATION	1.6705340238944972E-7	IMPLEMENTATION	9.023932110498452E-8	TEST
// not absolutely necessary, but does help with aggressive release	DESIGN	0.9999643491069068	WITHOUT_CLASSIFICATION	3.091742797306364E-5	DESIGN	3.139634772243903E-6	IMPLEMENTATION	1.2853163116906965E-6	TEST	2.9321138369675014E-7	DEFECT	1.5302652625812545E-8	DOCUMENTATION
// TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.9816790322932804	DESIGN	0.01711294122306078	WITHOUT_CLASSIFICATION	6.32631484302156E-4	DEFECT	3.1703006094609143E-4	IMPLEMENTATION	2.3713840599470188E-4	TEST	2.1226532415853677E-5	DOCUMENTATION
//work around a bug in all known connection pools....	DESIGN	0.9273737887294504	DESIGN	0.04332155350630155	DEFECT	0.018849779560632964	WITHOUT_CLASSIFICATION	0.010350450612017498	IMPLEMENTATION	1.0388244956137358E-4	DOCUMENTATION	5.451420360438319E-7	TEST
// TODO : make this the factory for "entity mode related" sessions; // also means making this the target of transaction-synch and the // thing that knows how to cascade things between related sessions // // At that point, perhaps this thing is a "SessionContext", and // ConnectionManager is a "JDBCContext"?  A "SessionContext" should // live in the impl package...	DESIGN	0.9978442477749923	DESIGN	0.0021557221460285158	IMPLEMENTATION	2.5543045369437444E-8	DEFECT	3.561225933213891E-9	DOCUMENTATION	9.696934504252385E-10	TEST	5.014582808814876E-12	WITHOUT_CLASSIFICATION
//TODO: does this really need to be here? //      does the collection already have //      it's own up-to-date snapshot?	DESIGN	0.9469436974736204	DESIGN	0.03758072427094021	WITHOUT_CLASSIFICATION	0.011892055431101107	IMPLEMENTATION	0.003352971891137769	DEFECT	1.9775990237787472E-4	TEST	3.279103082264193E-5	DOCUMENTATION
//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9996890865687631	DESIGN	2.7219679434687793E-4	IMPLEMENTATION	3.796556743247E-5	WITHOUT_CLASSIFICATION	3.7697634211038454E-7	DEFECT	3.572523324633022E-7	DOCUMENTATION	1.6840783153153118E-8	TEST
/**	DESIGN	0.4099703815469931	DOCUMENTATION	0.377254050133344	DESIGN	0.10446024197441676	IMPLEMENTATION	0.04010368760390805	WITHOUT_CLASSIFICATION	0.034408704179707664	DEFECT	0.033802934561630235	TEST
// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; //      but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; //      currently this works in conjuction with the check on //      DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from //      cache with enabled filters). // EARLY EXIT!!!!!	DESIGN	0.7007424040929386	DESIGN	0.2992387179856871	WITHOUT_CLASSIFICATION	1.5394452825795034E-5	DEFECT	1.7260659211380173E-6	TEST	1.3485570057307475E-6	DOCUMENTATION	4.0884562177366534E-7	IMPLEMENTATION
//for sets, we should end the collection load after resolving //the entities, since we might call hashCode() on the elements //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9872765678455033	DESIGN	0.011102154313644157	DEFECT	0.0016201012246897456	WITHOUT_CLASSIFICATION	4.48639327021961E-7	TEST	4.020800989054098E-7	IMPLEMENTATION	3.2589673679598925E-7	DOCUMENTATION
//This is not very nice (and quite slow):	DESIGN	0.7635620360643963	WITHOUT_CLASSIFICATION	0.1467352861421129	DESIGN	0.08879905116785254	DEFECT	8.603231257645834E-4	IMPLEMENTATION	2.366747696656648E-5	DOCUMENTATION	1.9636022907048857E-5	TEST
//use of trim() here is ugly?	DESIGN	0.5289057504825673	WITHOUT_CLASSIFICATION	0.4688276108703041	DESIGN	0.0019515618004400618	DEFECT	1.395371063308126E-4	TEST	1.275475426987635E-4	IMPLEMENTATION	4.799219765903862E-5	DOCUMENTATION
//TODO: this is too conservative; if all preceding joins were  //      also inner joins, we could use an inner join here	DESIGN	0.998083218533494	DESIGN	0.0016236097347288212	DEFECT	2.478129810750198E-4	WITHOUT_CLASSIFICATION	2.052789849917542E-5	DOCUMENTATION	1.6543539322952092E-5	TEST	8.287312879952622E-6	IMPLEMENTATION
//TODO: look at the owning property and check that it  //      isn't lazy (by instrumentation)	DESIGN	0.7624768566387934	IMPLEMENTATION	0.22827270015875464	WITHOUT_CLASSIFICATION	0.0074499294180963085	DEFECT	0.0015533409585333391	DOCUMENTATION	1.6635810832911003E-4	DESIGN	8.081471749316827E-5	TEST
//TODO: inefficient	DESIGN	0.9335946740458096	DESIGN	0.04654196355565088	IMPLEMENTATION	0.01922825110608207	WITHOUT_CLASSIFICATION	5.246375363192195E-4	DOCUMENTATION	6.554601488361649E-5	TEST	4.492774125456517E-5	DEFECT
// why does this matter?	DESIGN	0.6697003824884428	WITHOUT_CLASSIFICATION	0.327996439908235	DESIGN	0.0017299277067885025	DEFECT	5.143670508454207E-4	TEST	5.107400202661649E-5	DOCUMENTATION	7.808843661677242E-6	IMPLEMENTATION
// from the collection of associations, locate OJA for the // ManyToOne corresponding to this persister to fully // define the many-to-many; we need that OJA so that we can // use its alias here // TODO : is there a better way here?	DESIGN	0.9999844691255317	DESIGN	1.2837143418592944E-5	IMPLEMENTATION	1.9802679241809152E-6	TEST	4.1865522272246166E-7	WITHOUT_CLASSIFICATION	2.3004672828493536E-7	DOCUMENTATION	6.476117472712437E-8	DEFECT
//TODO: this class depends directly upon CriteriaImpl,  //      in the impl package ... add a CriteriaImplementor  //      interface	DESIGN	0.9999483824973265	DESIGN	2.8953819062721346E-5	DEFECT	2.1573176467920465E-5	IMPLEMENTATION	8.307676845979479E-7	WITHOUT_CLASSIFICATION	1.6324866403521995E-7	DOCUMENTATION	9.649079425887961E-8	TEST
//TODO: add a CriteriaImplementor interface //      this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.9972794923993318	DESIGN	0.0019846747709212817	IMPLEMENTATION	5.814281240749902E-4	DEFECT	1.4963806545816984E-4	WITHOUT_CLASSIFICATION	3.7569570522284586E-6	DOCUMENTATION	1.0096831615894676E-6	TEST
// TODO : not so sure this is needed...	DESIGN	0.9460085241587184	DESIGN	0.05296177980912306	IMPLEMENTATION	6.137596350608633E-4	TEST	3.1460862417016355E-4	DEFECT	1.0112390646750794E-4	DOCUMENTATION	2.03866460139109E-7	WITHOUT_CLASSIFICATION
// meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9999811175545529	WITHOUT_CLASSIFICATION	1.7762751196229E-5	DESIGN	1.1050975177850276E-6	DEFECT	1.1657388255721943E-8	DOCUMENTATION	1.4992086037253897E-9	IMPLEMENTATION	1.440136221811759E-9	TEST
// TODO: The order in which entities are saved may matter (e.g., a particular transient entity //       may need to be saved before other transient entities can be saved; //       Keep retrying the batch of transient entities until either: //       1) there are no transient entities left in transientCopyCache //       or 2) no transient entities were saved in the last batch // For now, just run through the transient entities and retry the merge	DESIGN	0.8319956173461132	DESIGN	0.143252361177392	WITHOUT_CLASSIFICATION	0.024445624163840527	DEFECT	2.480705782377735E-4	IMPLEMENTATION	4.863299432780033E-5	TEST	9.693740088762408E-6	DOCUMENTATION
// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9703953154170706	DESIGN	0.02753617650946756	WITHOUT_CLASSIFICATION	0.001050101488272671	DEFECT	0.0010145330807666236	IMPLEMENTATION	3.7394616529570458E-6	DOCUMENTATION	1.3404276927098367E-7	TEST
// todo : currently expects that the individual with expressions apply to the same sql table join. //      This may not be the case for joined-subclass where the property values //      might be coming from different tables in the joined hierarchy.  At some //      point we should expand this to support that capability.  However, that has //      some difficulties: //          1) the biggest is how to handle ORs when the individual comparisons are //              linked to different sql joins. //          2) here we would need to track each comparison individually, along with //              the join alias to which it applies and then pass that information //              back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.9560587466547426	DEFECT	0.03425085656803974	WITHOUT_CLASSIFICATION	0.006445914551574936	IMPLEMENTATION	0.003215657406773087	DESIGN	2.8586745528859744E-5	DOCUMENTATION	2.3807334072432393E-7	TEST
// this function has a template -> restore output, apply the template and write the result out // TODO: Downcast to avoid using an interface?  Yuck.	DESIGN	0.9978379304082073	DESIGN	9.133523710445145E-4	WITHOUT_CLASSIFICATION	7.065094119943523E-4	TEST	5.132943117114725E-4	IMPLEMENTATION	2.3767526826133748E-5	DOCUMENTATION	5.145970215793664E-6	DEFECT
// at some point the generate phase needs to be moved out of here, // because a single object-level DML might spawn multiple SQL DML // command executions. // // Possible to just move the sql generation for dml stuff, but for // consistency-sake probably best to just move responsiblity for // the generation phase completely into the delegates // (QueryLoader/StatementExecutor) themselves.  Also, not sure why // QueryLoader currently even has a dependency on this at all; does // it need it?  Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9999989203372707	DESIGN	1.0354170859947986E-6	DEFECT	4.324211539623706E-8	WITHOUT_CLASSIFICATION	1.002195916613807E-9	DOCUMENTATION	1.3212097936949572E-12	TEST	1.087647864840842E-14	IMPLEMENTATION
// get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.8496677533725572	WITHOUT_CLASSIFICATION	0.1503266876816142	DESIGN	3.14069786951563E-6	DEFECT	2.3784501960317455E-6	IMPLEMENTATION	2.2576473317368467E-8	TEST	1.722128964425231E-8	DOCUMENTATION
// TODO should we just collect these like with the collections above?	DESIGN	0.9862977742905902	IMPLEMENTATION	0.013653855111010981	DESIGN	4.734599002532063E-5	TEST	5.59742263549027E-7	DOCUMENTATION	2.8886027202762565E-7	DEFECT	1.7600583794046498E-7	WITHOUT_CLASSIFICATION
// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification // see the discussion there in DynamicFilterParameterSpecification's javadocs as to why // it is currently not done that way.	DESIGN	0.9620572453070166	WITHOUT_CLASSIFICATION	0.03775122725779335	DESIGN	1.8801363434575664E-4	DOCUMENTATION	3.0559743755164986E-6	DEFECT	4.1917206733750874E-7	TEST	3.865440140560327E-8	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////// // USED ONLY FOR REGRESSION TESTING!!!! // // todo : obviously get rid of all this junk ;) ///////////////////////////////////////////////////////////////////////////	DESIGN	0.8266792425527156	WITHOUT_CLASSIFICATION	0.1674319170491485	DESIGN	0.00587543692766238	IMPLEMENTATION	5.768332163829612E-6	DEFECT	4.140129570655499E-6	DOCUMENTATION	3.495008739005109E-6	TEST
//create an index on the key columns??	DESIGN	0.9999602872495237	WITHOUT_CLASSIFICATION	3.485922278683285E-5	DEFECT	4.050125823020011E-6	DESIGN	3.4860303711356593E-7	DOCUMENTATION	2.632574688222298E-7	IMPLEMENTATION	1.9154136060069847E-7	TEST
//TODO: deprecated, remove eventually	DESIGN	0.8999261981008976	DESIGN	0.09606517377687827	WITHOUT_CLASSIFICATION	0.003346157284533079	IMPLEMENTATION	5.692885193513778E-4	DEFECT	8.298761669239119E-5	DOCUMENTATION	1.0194701647318216E-5	TEST
//create an index on the key columns??	DESIGN	0.9999602872495237	WITHOUT_CLASSIFICATION	3.485922278683285E-5	DEFECT	4.050125823020011E-6	DESIGN	3.4860303711356593E-7	DOCUMENTATION	2.632574688222298E-7	IMPLEMENTATION	1.9154136060069847E-7	TEST
//TODO: improve this hack!	DESIGN	0.9999984479629476	DESIGN	7.642224061726181E-7	IMPLEMENTATION	3.7898075158117164E-7	TEST	2.647901935294046E-7	DEFECT	7.445809833875058E-8	DOCUMENTATION	6.958560269503505E-8	WITHOUT_CLASSIFICATION
// inheritance cycle detection (paranoid check)	DESIGN	0.9998077308324952	WITHOUT_CLASSIFICATION	1.0624197775116244E-4	IMPLEMENTATION	8.46917086223273E-5	DESIGN	1.0691431184392287E-6	DEFECT	2.5302908670713154E-7	DOCUMENTATION	1.3308926183761672E-8	TEST
//TODO: remove use of instanceof!	DESIGN	0.96240346843563	DESIGN	0.032013127674634094	WITHOUT_CLASSIFICATION	0.002835439747881743	DEFECT	0.0025063091268433023	IMPLEMENTATION	2.3584686603286687E-4	DOCUMENTATION	5.808148977913556E-6	TEST
//shortcut	DESIGN	0.9991976942860792	WITHOUT_CLASSIFICATION	7.93944659220886E-4	DESIGN	3.1557714777943857E-6	DEFECT	2.531658545786863E-6	DOCUMENTATION	2.4264182482555468E-6	TEST	2.4720642813580433E-7	IMPLEMENTATION
//TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.9950847764141628	WITHOUT_CLASSIFICATION	0.0038048492822178735	IMPLEMENTATION	0.0010816450195181885	DESIGN	1.3031621370024108E-5	DOCUMENTATION	1.2294679034750118E-5	TEST	3.4029836962772974E-6	DEFECT
// create an index on the key columns??	DESIGN	0.9999880137476848	WITHOUT_CLASSIFICATION	1.1475805307259897E-5	DEFECT	3.9805342365516164E-7	DESIGN	4.892689620409221E-8	IMPLEMENTATION	4.047567286999089E-8	DOCUMENTATION	2.299101524723546E-8	TEST
// todo : remove	DESIGN	0.9189807490950482	WITHOUT_CLASSIFICATION	0.0804176240041318	DESIGN	5.222079308824025E-4	DEFECT	6.972243558125135E-5	IMPLEMENTATION	5.345327776074719E-6	TEST	4.351206580332849E-6	DOCUMENTATION
// todo : remove	DESIGN	0.9189807490950482	WITHOUT_CLASSIFICATION	0.0804176240041318	DESIGN	5.222079308824025E-4	DEFECT	6.972243558125135E-5	IMPLEMENTATION	5.345327776074719E-6	TEST	4.351206580332849E-6	DOCUMENTATION
// todo : remove	DESIGN	0.9189807490950482	WITHOUT_CLASSIFICATION	0.0804176240041318	DESIGN	5.222079308824025E-4	DEFECT	6.972243558125135E-5	IMPLEMENTATION	5.345327776074719E-6	TEST	4.351206580332849E-6	DOCUMENTATION
// todo : throw exception?	DESIGN	0.8803162406250037	WITHOUT_CLASSIFICATION	0.11764566753789521	DESIGN	0.001686116527303668	DEFECT	3.2779584585538614E-4	IMPLEMENTATION	1.411165664468389E-5	DOCUMENTATION	1.0067807297400282E-5	TEST
// todo : throw exception?  maybe warn if not the same?	DESIGN	0.48355754318671684	DESIGN	0.4170271781632144	WITHOUT_CLASSIFICATION	0.0961214438042409	DEFECT	0.003230848596198727	IMPLEMENTATION	3.5229668499749735E-5	TEST	2.7756581129207547E-5	DOCUMENTATION
//TODO: make EntityPersister *not* depend on SessionFactoryImplementor //interface, if possible	DESIGN	0.9979643602032534	DESIGN	0.0012636540459522586	WITHOUT_CLASSIFICATION	5.63452285838259E-4	IMPLEMENTATION	1.8490624177633277E-4	DEFECT	2.0783478698981812E-5	TEST	2.843744480756262E-6	DOCUMENTATION
//TODO: is there a more elegant way than downcasting?	DESIGN	0.9999973556349827	DESIGN	1.215162017765029E-6	WITHOUT_CLASSIFICATION	8.749387530816738E-7	TEST	4.684587254042604E-7	IMPLEMENTATION	5.7817589113299875E-8	DEFECT	2.798793210675598E-8	DOCUMENTATION
// TODO: encapsulate the protected instance variables!	DESIGN	0.9705483537296518	IMPLEMENTATION	0.015697514527204977	WITHOUT_CLASSIFICATION	0.011179283904278338	DESIGN	0.002413643362714388	DEFECT	1.1685071784836934E-4	DOCUMENTATION	4.435375830224881E-5	TEST
// should indicate that we are processing an INSERT/UPDATE/DELETE // query with a subquery implied via a collection property // function. Here, we need to use the table name itself as the // qualification alias. // TODO : verify this works for all databases... // TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9966042869133567	DESIGN	0.00312177796447305	IMPLEMENTATION	1.6788688587987042E-4	TEST	8.608427726314301E-5	DEFECT	1.5561431501492634E-5	WITHOUT_CLASSIFICATION	4.402527525665385E-6	DOCUMENTATION
//TODO: copy/paste from insertRows()	DESIGN	0.5719012917690385	WITHOUT_CLASSIFICATION	0.3370701247461516	DESIGN	0.0457996829810256	DEFECT	0.04155680327178015	IMPLEMENTATION	0.0032366287295633855	TEST	4.3546850244081947E-4	DOCUMENTATION
//TODO: copy/paste from recreate()	DESIGN	0.5815029102521564	WITHOUT_CLASSIFICATION	0.30885559511319405	DESIGN	0.10477214218987496	IMPLEMENTATION	0.0029908111568124817	DEFECT	0.0012868906923720583	TEST	5.916505955900431E-4	DOCUMENTATION
//should this interface extend PropertyMapping?	DESIGN	0.874412690853837	DESIGN	0.12552007163561116	WITHOUT_CLASSIFICATION	5.035764371767103E-5	DEFECT	1.510127871307944E-5	TEST	1.7637388172898164E-6	DOCUMENTATION	1.4849303838525782E-8	IMPLEMENTATION
//ie. the subquery! yuck!	DESIGN	0.9809206287871552	WITHOUT_CLASSIFICATION	0.018938001914310554	DESIGN	1.2658476917298106E-4	DEFECT	5.7228241316038016E-6	IMPLEMENTATION	4.7780257916046484E-6	DOCUMENTATION	4.283679438070464E-6	TEST
//TODO: move to .sql package!!	DESIGN	0.967032164152339	DESIGN	0.030382652327376244	WITHOUT_CLASSIFICATION	0.0018454054971004435	IMPLEMENTATION	5.629987211444446E-4	DEFECT	1.260545394112489E-4	DOCUMENTATION	5.0724762628589325E-5	TEST
//TODO: code duplication with SingleTableEntityPersister	DESIGN	0.9703067949702662	DESIGN	0.029657225378047575	WITHOUT_CLASSIFICATION	1.2446695779481321E-5	TEST	1.1855216314906568E-5	IMPLEMENTATION	1.1517104069172039E-5	DOCUMENTATION	1.6063552281987106E-7	DEFECT
// TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9999937935555905	DESIGN	6.13069536736501E-6	IMPLEMENTATION	4.390481294848835E-8	DEFECT	2.5411231553721494E-8	WITHOUT_CLASSIFICATION	4.453795030398558E-9	DOCUMENTATION	1.979202507535397E-9	TEST
//TODO: *two* hashmap lookups here is one too many...	DESIGN	0.5142930182239389	DEFECT	0.24343210026189951	DESIGN	0.24132255400013453	WITHOUT_CLASSIFICATION	7.800982862704837E-4	IMPLEMENTATION	1.642081172707137E-4	TEST	8.021110485815905E-6	DOCUMENTATION
//TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.9425419312711351	DESIGN	0.057451046004891274	WITHOUT_CLASSIFICATION	3.6759387113022978E-6	DOCUMENTATION	2.5677577948444938E-6	TEST	6.503860603889969E-7	IMPLEMENTATION	1.2864140685174807E-7	DEFECT
//perhaps not really necessary...	DESIGN	0.8175684622618392	WITHOUT_CLASSIFICATION	0.17204933635172573	DESIGN	0.009631487440599391	DEFECT	7.291055480960545E-4	IMPLEMENTATION	1.4732167760586712E-5	DOCUMENTATION	6.876229978871407E-6	TEST
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.7887542011309961	WITHOUT_CLASSIFICATION	0.2081736734656765	DESIGN	0.0028414078673327544	DEFECT	2.2887459975082515E-4	TEST	1.4374764715959759E-6	IMPLEMENTATION	4.0545977214759597E-7	DOCUMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.726171872333566	WITHOUT_CLASSIFICATION	0.26409681479847813	DESIGN	0.00912099147017825	DEFECT	6.095820196459858E-4	TEST	5.939743502724283E-7	DOCUMENTATION	1.4540378132595143E-7	IMPLEMENTATION
//TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.9894605999833006	DESIGN	0.009926671895059276	IMPLEMENTATION	3.69683218904927E-4	WITHOUT_CLASSIFICATION	1.2630889552611515E-4	DEFECT	1.0171617308483549E-4	DOCUMENTATION	1.5019834124053678E-5	TEST
//TODO: optimize this better!	DESIGN	0.5941369386710884	DESIGN	0.39780536010953255	IMPLEMENTATION	0.005386638903495071	WITHOUT_CLASSIFICATION	0.0014896555835602397	TEST	8.816039994315516E-4	DEFECT	2.998027328920947E-4	DOCUMENTATION
//TODO: should we allow suffixes on these ?	DESIGN	0.999027384806456	DESIGN	3.801757879542153E-4	WITHOUT_CLASSIFICATION	3.3248067307179146E-4	IMPLEMENTATION	2.494415919759571E-4	DEFECT	6.02856313649596E-6	TEST	4.488577405513584E-6	DOCUMENTATION
//This is really ugly, but necessary:	DESIGN	0.8832949718723281	DESIGN	0.11507188743576974	WITHOUT_CLASSIFICATION	0.0016042597177020246	DEFECT	1.343209356095785E-5	IMPLEMENTATION	8.819575178145328E-6	TEST	6.629305460956973E-6	DOCUMENTATION
//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.9999997069176907	DESIGN	2.609711255325323E-7	WITHOUT_CLASSIFICATION	2.939298982124421E-8	TEST	1.941889328058142E-9	IMPLEMENTATION	7.411466281129045E-10	DOCUMENTATION	3.5158015627155774E-11	DEFECT
//TODO: disable batch loading if lockMode > READ?	DESIGN	0.9881522919806534	WITHOUT_CLASSIFICATION	0.00622856290710509	IMPLEMENTATION	0.003337625040268841	DEFECT	0.0018268518890600088	DESIGN	2.3626018745770538E-4	TEST	2.184079954549513E-4	DOCUMENTATION
// append the SQL to return the generated identifier //TODO: suck into Insert	DESIGN	0.8164905237112914	DESIGN	0.1790090968943158	WITHOUT_CLASSIFICATION	0.004481566708003917	IMPLEMENTATION	1.1367637214538935E-5	DOCUMENTATION	6.888908973294689E-6	DEFECT	5.561402009952343E-7	TEST
//TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.9899974512532367	DESIGN	0.007631265678417814	DEFECT	0.0019070519135109113	IMPLEMENTATION	4.423017817131449E-4	WITHOUT_CLASSIFICATION	1.679507055305904E-5	DOCUMENTATION	5.134302568517828E-6	TEST
//TODO: is this really necessary????	DESIGN	0.99375418512501	DESIGN	0.003063317780358287	WITHOUT_CLASSIFICATION	0.0026788628286801646	DEFECT	4.14004270908427E-4	IMPLEMENTATION	6.02877730762535E-5	DOCUMENTATION	2.9342221966950833E-5	TEST
//TODO: move to .sql package, and refactor with similar things!	DESIGN	0.9991989498246148	DESIGN	7.858692134182323E-4	WITHOUT_CLASSIFICATION	5.6375419618185225E-6	IMPLEMENTATION	5.317435955558753E-6	DEFECT	3.3151557658129826E-6	TEST	9.108282836318509E-7	DOCUMENTATION
//TODO: implement functionality //  this might be painful to do here, as the "join post processing" for //  the subquery has already been performed (meaning that for //  theta-join dialects, the join conditions have already been moved //  over to the where clause).  A "simple" solution here might to //  perform "join post processing" once for the entire query (including //  any subqueries) at one fell swoop	DESIGN	0.9999595842389425	DESIGN	3.8839726825017224E-5	IMPLEMENTATION	1.3404214758500162E-6	WITHOUT_CLASSIFICATION	2.0707446721883792E-7	DEFECT	2.7983876985976342E-8	DOCUMENTATION	5.54412380664128E-10	TEST
// todo : this eventually needs to be removed	DESIGN	0.9704522309666267	WITHOUT_CLASSIFICATION	0.02920134093623143	DESIGN	3.0190052130036206E-4	DEFECT	4.145614848213611E-5	IMPLEMENTATION	1.981608673939852E-6	DOCUMENTATION	1.0898186855035931E-6	TEST
//kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9994919309126654	WITHOUT_CLASSIFICATION	3.801373654025255E-4	IMPLEMENTATION	6.599928657333727E-5	DESIGN	4.409191756616207E-5	DEFECT	1.7438236913164435E-5	TEST	4.0228087948530476E-7	DOCUMENTATION
//is this ok?	DESIGN	0.9916674919728556	WITHOUT_CLASSIFICATION	0.008161919547033398	DESIGN	7.828114448158677E-5	DEFECT	3.7656342152266724E-5	IMPLEMENTATION	3.604750450952282E-5	TEST	1.860348896767363E-5	DOCUMENTATION
//TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9995730737751309	DESIGN	2.52253292259463E-4	IMPLEMENTATION	1.7062701337351117E-4	DEFECT	3.606418887177288E-6	TEST	2.877414123320891E-7	DOCUMENTATION	1.5175893663262083E-7	WITHOUT_CLASSIFICATION
//TODO: make this a bit nicer	DESIGN	0.9991538176449011	DESIGN	6.675508080389556E-4	IMPLEMENTATION	6.541849720716085E-5	WITHOUT_CLASSIFICATION	5.975378798515384E-5	DEFECT	4.595449144661343E-5	TEST	7.504770420934474E-6	DOCUMENTATION
//Yuck:	DESIGN	0.7799330885357947	WITHOUT_CLASSIFICATION	0.2191906655884221	DESIGN	6.300667574195405E-4	DEFECT	1.080389421819144E-4	DOCUMENTATION	7.678448702175962E-5	IMPLEMENTATION	6.135568915980069E-5	TEST
//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.9999958071286695	DESIGN	3.6823208840282086E-6	IMPLEMENTATION	4.561581550062755E-7	DEFECT	3.4509178098030596E-8	WITHOUT_CLASSIFICATION	1.7305381915789885E-8	DOCUMENTATION	2.5777313339682504E-9	TEST
/**	DESIGN	0.4099703815469931	DOCUMENTATION	0.377254050133344	DESIGN	0.10446024197441676	IMPLEMENTATION	0.04010368760390805	WITHOUT_CLASSIFICATION	0.034408704179707664	DEFECT	0.033802934561630235	TEST
// TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.997573885603831	DESIGN	0.0022444505813233513	IMPLEMENTATION	8.261484045568097E-5	WITHOUT_CLASSIFICATION	6.829276564853062E-5	DEFECT	2.6599079872970394E-5	DOCUMENTATION	4.157128868553644E-6	TEST
//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.9999999174232013	DESIGN	4.146661688579918E-8	DOCUMENTATION	2.5481967725889745E-8	DEFECT	1.3462240729432913E-8	WITHOUT_CLASSIFICATION	1.4020183082722554E-9	IMPLEMENTATION	7.639551568445732E-10	TEST
//TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.9544650850080241	DESIGN	0.038890377738116905	DEFECT	0.004131137840187914	WITHOUT_CLASSIFICATION	0.001777152736797484	IMPLEMENTATION	5.229047320269196E-4	DOCUMENTATION	2.1334194484674008E-4	TEST
// todo : YUCK!!!	DESIGN	0.9668876510848867	WITHOUT_CLASSIFICATION	0.026349546546734784	DESIGN	0.0065240096307121985	DEFECT	1.6320860329426998E-4	IMPLEMENTATION	5.4327494028409487E-5	DOCUMENTATION	2.1256640343630474E-5	TEST
// TODO : YUCK!!!  fix after HHH-1907 is complete	DESIGN	0.9985830811668703	DESIGN	9.312744024568321E-4	DEFECT	4.143825471654819E-4	IMPLEMENTATION	6.639887028493313E-5	TEST	3.730937033360132E-6	WITHOUT_CLASSIFICATION	1.1320761891002896E-6	DOCUMENTATION
//TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9803222600591954	DESIGN	0.019577497223793303	IMPLEMENTATION	4.6961594013780574E-5	TEST	4.144825754420202E-5	WITHOUT_CLASSIFICATION	1.1744821613767101E-5	DOCUMENTATION	8.804383950673037E-8	DEFECT
//TODO: design new lifecycle for ProxyFactory	DESIGN	0.8844730541409717	WITHOUT_CLASSIFICATION	0.10443042289028591	DESIGN	0.009769612846712728	IMPLEMENTATION	9.69146172763897E-4	DOCUMENTATION	2.618713950956822E-4	DEFECT	9.5892554170036E-5	TEST
//TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.9925021538656922	DESIGN	0.004224784849170601	IMPLEMENTATION	0.0030869638330328947	WITHOUT_CLASSIFICATION	1.4344187995676808E-4	DEFECT	2.318122820428562E-5	TEST	1.9474343943299477E-5	DOCUMENTATION
// TODO: copy/paste from ManyToOneType	DESIGN	0.5587485251448199	DESIGN	0.27391544519688243	WITHOUT_CLASSIFICATION	0.1264195581251171	IMPLEMENTATION	0.036419241385227626	DEFECT	0.002991880454719333	TEST	0.0015053496932336237	DOCUMENTATION
//TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9781641728928616	DESIGN	0.017908745680420314	WITHOUT_CLASSIFICATION	0.0025646563822013806	DEFECT	0.001193188767248976	IMPLEMENTATION	1.3931523685505628E-4	TEST	2.9921040412606557E-5	DOCUMENTATION
//TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.981305682658027	DESIGN	0.01789525878103493	WITHOUT_CLASSIFICATION	7.393904795781626E-4	DEFECT	2.6587737122339853E-5	IMPLEMENTATION	2.2883525852230738E-5	DOCUMENTATION	1.0196818385356243E-5	TEST
//TODO: implement caching?! proxies?!	DESIGN	0.9785614003283535	IMPLEMENTATION	0.020485440847713404	DESIGN	3.8681927030665434E-4	DEFECT	2.683143531763725E-4	WITHOUT_CLASSIFICATION	1.9934874955633084E-4	TEST	9.867645089373571E-5	DOCUMENTATION
//TODO: is this right??	DESIGN	0.9998218266827109	DESIGN	8.850256388436851E-5	DEFECT	3.779651783225798E-5	WITHOUT_CLASSIFICATION	3.3462501258297184E-5	IMPLEMENTATION	1.03281952647415E-5	TEST	8.083539049376135E-6	DOCUMENTATION
// is this really necessary?	DESIGN	0.8855893787272849	WITHOUT_CLASSIFICATION	0.11396311494480765	DESIGN	4.422825110682883E-4	DEFECT	3.443975401155602E-6	DOCUMENTATION	1.5142383517799299E-6	TEST	2.6560308635321715E-7	IMPLEMENTATION
//TODO: move these to a new JoinableType abstract class, //extended by EntityType and PersistentCollectionType:	DESIGN	0.9421280943028579	DESIGN	0.05786385074413881	WITHOUT_CLASSIFICATION	7.780343287792673E-6	TEST	1.875845920995546E-7	DEFECT	8.417739601435711E-8	DOCUMENTATION	2.847727513317295E-9	IMPLEMENTATION
// TODO: this is very suboptimal for some subclasses (namely components), // since it does not take advantage of two-phase-load	DESIGN	0.7401175299654813	WITHOUT_CLASSIFICATION	0.2449345023999408	DESIGN	0.01347540498180148	DEFECT	0.001442983836292433	TEST	1.9419167806864068E-5	DOCUMENTATION	1.0159648677059108E-5	IMPLEMENTATION
// worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.9834170373567849	DESIGN	0.015016964048721016	DEFECT	8.603447200231321E-4	WITHOUT_CLASSIFICATION	6.991098349206137E-4	IMPLEMENTATION	6.345240288770961E-6	TEST	1.9879926168770107E-7	DOCUMENTATION
// NOTE VERY HACKISH WORKAROUND!! // TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999989465214112	DESIGN	5.763197290429287E-7	IMPLEMENTATION	4.6365526114610543E-7	DEFECT	1.1859147939721297E-8	TEST	1.644367417424314E-9	DOCUMENTATION	8.317649142662498E-14	WITHOUT_CLASSIFICATION
// TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.982205672054296	DESIGN	0.0161253248593454	IMPLEMENTATION	0.0016194681025496502	DEFECT	3.542740423469669E-5	TEST	1.3823599703689394E-5	DOCUMENTATION	2.839798707004667E-7	WITHOUT_CLASSIFICATION
// We would probably refactor to have LogicParser (builds a tree of simple // expressions connected by and, or, not), ExpressionParser (translates // from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like // FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much // the same thing it does now)	DESIGN	0.9966358799277439	WITHOUT_CLASSIFICATION	0.003357198453551276	DESIGN	6.450057450706613E-6	IMPLEMENTATION	3.487368645066466E-7	TEST	1.1714932553645885E-7	DEFECT	5.6750640051675305E-9	DOCUMENTATION
//TODO: this is a little inefficient, don't need to do a whole //      deep replaceElements() call	DESIGN	0.9999991284233616	DESIGN	5.018162486016174E-7	WITHOUT_CLASSIFICATION	3.506579590644701E-7	IMPLEMENTATION	1.2810313495493713E-8	TEST	5.09796185107127E-9	DOCUMENTATION	1.1941553437546163E-9	DEFECT
//workaround for WebLogic	DESIGN	0.9924309479829084	DESIGN	0.007522419209212159	WITHOUT_CLASSIFICATION	3.533088114421834E-5	IMPLEMENTATION	4.937792531931511E-6	DOCUMENTATION	3.2074850986194442E-6	TEST	3.156649104692959E-6	DEFECT
//TODO: this dependency is kinda Bad	DESIGN	0.9977598368416987	DESIGN	0.0019164762608495918	IMPLEMENTATION	1.3336512595332138E-4	DEFECT	1.1758572338349343E-4	DOCUMENTATION	3.760593779583332E-5	TEST	3.5130110319042784E-5	WITHOUT_CLASSIFICATION
//ick!	DESIGN	0.9998377298508833	WITHOUT_CLASSIFICATION	1.250948635389132E-4	DESIGN	2.9526535041536356E-5	DEFECT	4.923310423353943E-6	DOCUMENTATION	1.6054793856762148E-6	TEST	1.1199607271629622E-6	IMPLEMENTATION
// short cut check...	DESIGN	0.9991508674213758	WITHOUT_CLASSIFICATION	8.438473520487917E-4	DESIGN	2.666757558796017E-6	IMPLEMENTATION	1.1787040597383896E-6	DEFECT	8.056757504612795E-7	TEST	6.340892063767981E-7	DOCUMENTATION
// todo : move to StringHelper?	DESIGN	0.8361044663100996	WITHOUT_CLASSIFICATION	0.16088424688023512	DESIGN	0.003004408613837172	DEFECT	2.747612328857875E-6	DOCUMENTATION	2.6229204468205295E-6	IMPLEMENTATION	1.5076630523445556E-6	TEST
//yukky! Don't you have subclasses for that! //TODO race conditions can happen here	DESIGN	0.9945908744857151	DESIGN	0.005383228230381439	DEFECT	1.1338456542738365E-5	DOCUMENTATION	9.93365893306071E-6	TEST	2.8724397189562575E-6	WITHOUT_CLASSIFICATION	1.7527287086093592E-6	IMPLEMENTATION
//TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.9998543796412802	DESIGN	1.316682513861941E-4	WITHOUT_CLASSIFICATION	1.153546849793416E-5	DEFECT	1.5538484766177588E-6	IMPLEMENTATION	7.242665239511772E-7	TEST	1.385238349993582E-7	DOCUMENTATION
// FIXME hack to work around fact that calling // Node added = root.addChild( fqn ); doesn't  // properly set the version on the node	DESIGN	0.9999968666170757	DESIGN	3.122960150991215E-6	DEFECT	8.472996621255382E-9	IMPLEMENTATION	9.361805263564754E-10	TEST	6.356471964157708E-10	DOCUMENTATION	3.779489775699351E-10	WITHOUT_CLASSIFICATION
// TODO: I considered validating the presence of the TS cache here, // but decided to defer unti getQueryCacheInstance() in case the  // cache is never actually used	DESIGN	0.9812591962150479	DESIGN	0.01846007902690962	IMPLEMENTATION	1.9857533628370256E-4	WITHOUT_CLASSIFICATION	7.760773657502735E-5	DEFECT	4.40306546335809E-6	DOCUMENTATION	1.3861972054144791E-7	TEST
//need to do that here rather than in the save event listener to let //the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.9364323633378894	WITHOUT_CLASSIFICATION	0.06341963939204108	DESIGN	1.3170563528220485E-4	DEFECT	7.898632895127458E-6	IMPLEMENTATION	7.614162073070528E-6	TEST	7.788398191490976E-7	DOCUMENTATION
//TODO: simply remove this override //      if we fix the above todos	DESIGN	0.8790962377667851	WITHOUT_CLASSIFICATION	0.10192673132153865	DESIGN	0.01718172271977662	DEFECT	0.001291621694161794	IMPLEMENTATION	4.973413908418574E-4	TEST	6.345106896089164E-6	DOCUMENTATION
// This, is used by SessionFactoryImpl to hand to the generated SessionImpl; // was the only reason I could see that we cannot just use null as // Settings.cacheProvider	DESIGN	0.9891710581414944	WITHOUT_CLASSIFICATION	0.010828537790260774	DESIGN	3.917312728067205E-7	DEFECT	5.214317372922086E-9	IMPLEMENTATION	3.788404417348376E-9	TEST	3.3342502471943306E-9	DOCUMENTATION
// this is done here 'cos we might only know the type here (ugly!) // TODO: improve this a lot:	DESIGN	0.9994187435951252	DESIGN	5.693760528082885E-4	DEFECT	8.446495888350051E-6	IMPLEMENTATION	3.397784964183097E-6	TEST	3.585724770672117E-8	DOCUMENTATION	2.13966219994727E-10	WITHOUT_CLASSIFICATION
// todo : would love to have this work on a notification basis //    where the successful binding of an entity/subclass would //    emit a notification which the extendsQueue entries could //    react to...	DESIGN	0.9728233831055961	WITHOUT_CLASSIFICATION	0.02665053055163068	DESIGN	5.25855270010096E-4	DEFECT	2.1152910036066134E-7	TEST	1.8884100804969458E-8	DOCUMENTATION	6.595618967709949E-10	IMPLEMENTATION
// TODO : not sure the best way to handle this. // The non-performant way :	DESIGN	0.9934859118158924	DESIGN	0.0059111118431244645	IMPLEMENTATION	5.243329606589676E-4	TEST	6.595398307049276E-5	DOCUMENTATION	8.456798827161112E-6	DEFECT	4.232598426419205E-6	WITHOUT_CLASSIFICATION
// would be better to use the element-type to determine // whether the old and the new are equal here; the problem being // we do not necessarily have access to the element type in all // cases	DESIGN	0.999870166299971	WITHOUT_CLASSIFICATION	1.297560799170839E-4	DESIGN	6.425434073203227E-8	IMPLEMENTATION	7.079848384649671E-9	DEFECT	5.875079138514655E-9	DOCUMENTATION	4.108437079211647E-10	TEST
// This next bit is to allow for both unsaved-value="negative" // and for "older" behavior where version number did not get // seeded if it was already set in the object // TODO: shift it into unsaved-value strategy	DESIGN	0.9823443423121696	DESIGN	0.017655226491495077	WITHOUT_CLASSIFICATION	4.0662502599592635E-7	DEFECT	2.0955255075024742E-8	TEST	2.9792536594196705E-9	DOCUMENTATION	6.368005640975613E-10	IMPLEMENTATION
// merges don't cascade to uninitialized collections //	DESIGN	0.999996344374956	WITHOUT_CLASSIFICATION	3.3267915770923057E-6	DESIGN	1.669686557828629E-7	IMPLEMENTATION	1.0532231376584995E-7	DEFECT	5.292949352833218E-8	TEST	3.6130038837269046E-9	DOCUMENTATION
// TODO: an alternative is to check if the owner has changed; if it hasn't then // return collection.getOwner()	DESIGN	0.9957173285040106	IMPLEMENTATION	0.0015907263059894588	DESIGN	0.001520298095281387	WITHOUT_CLASSIFICATION	0.0010931216993199332	DEFECT	7.757868515487E-5	TEST	9.467102436505563E-7	DOCUMENTATION
//it is possible that the tree-walking in OuterJoinLoader can get to //an association defined by a subclass, in which case the property-ref //might refer to a property defined on a subclass of the current class //in this case, the table name is not known - this temporary solution  //assumes that the property-ref refers to a property of the subclass //table that the association belongs to (a reasonable guess) //TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9996424387344013	DESIGN	3.574357025436772E-4	DEFECT	6.963218082671986E-8	DOCUMENTATION	3.517724844329899E-8	WITHOUT_CLASSIFICATION	1.878733673542956E-8	TEST	1.9662891586615463E-9	IMPLEMENTATION
// this only works because collection entries are kept in a sequenced // map by persistence context (maybe we should do like entities and // keep a separate sequences set...) //TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.9366162193716119	DESIGN	0.06328910607932921	DEFECT	8.562419358637499E-5	IMPLEMENTATION	8.216175756707715E-6	WITHOUT_CLASSIFICATION	4.5474148058395206E-7	TEST	3.7943823534897574E-7	DOCUMENTATION
// important, to account for newly saved entities in query // todo : some kind of check for new status...	DESIGN	0.5476679439577502	DESIGN	0.3942737355235249	WITHOUT_CLASSIFICATION	0.057296997105963816	DEFECT	7.311638538597799E-4	IMPLEMENTATION	1.8952091248093148E-5	DOCUMENTATION	1.1207467653274325E-5	TEST
// brand new collection //TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.4828733992119208	WITHOUT_CLASSIFICATION	0.47873828289039677	DEFECT	0.037046571097050174	DESIGN	0.0011725722680712522	IMPLEMENTATION	1.513851135684185E-4	DOCUMENTATION	1.7789418992645448E-5	TEST
//TODO: if object was an uninitialized proxy, this is inefficient, //      resulting in two SQL selects	DESIGN	0.9920003164283756	WITHOUT_CLASSIFICATION	0.00765945105121924	DESIGN	2.6225335506175235E-4	DEFECT	6.971364409058561E-5	TEST	8.214267155070799E-6	DOCUMENTATION	5.12540977334603E-8	IMPLEMENTATION
//before cascade! //TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.8570975900679556	DESIGN	0.11877325564660651	DEFECT	0.018419588250653963	WITHOUT_CLASSIFICATION	0.005093556932386123	IMPLEMENTATION	4.898630969739499E-4	TEST	1.261460054238484E-4	DOCUMENTATION
// TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.9954981564919452	DESIGN	0.004480314890080132	IMPLEMENTATION	1.8916760644974202E-5	TEST	1.3775562256267026E-6	DOCUMENTATION	1.0423260036238E-6	WITHOUT_CLASSIFICATION	1.9197510046923398E-7	DEFECT
// todo : need to find a clean way to handle the "event source" role // a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... // passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.507144526809939	DESIGN	0.4928347870531972	WITHOUT_CLASSIFICATION	1.3020829613448313E-5	TEST	6.77683937373349E-6	IMPLEMENTATION	7.274798195529151E-7	DEFECT	1.6098805720785432E-7	DOCUMENTATION
// todo : remove	DESIGN	0.9189807490950482	WITHOUT_CLASSIFICATION	0.0804176240041318	DESIGN	5.222079308824025E-4	DEFECT	6.972243558125135E-5	IMPLEMENTATION	5.345327776074719E-6	TEST	4.351206580332849E-6	DOCUMENTATION
//aliasRefNode.resolve( false, false, aliasRefNode.getText() ); //TODO: is it kosher to do it here? //TODO: is it kosher to do it here?	DESIGN	0.9890423664540973	IMPLEMENTATION	0.010062317559346076	DESIGN	6.652971783838959E-4	TEST	1.914232195852757E-4	WITHOUT_CLASSIFICATION	3.80240807499057E-5	DEFECT	5.715078376074416E-7	DOCUMENTATION
// No explicit select expression; render the id and properties // projection lists for every persister in the from clause into // a single 'token node'. //TODO: the only reason we need this stuff now is collection filters, //      we should get rid of derived select clause completely!	DESIGN	0.99966093938025	DESIGN	1.8889544778393457E-4	DEFECT	1.4289177018772634E-4	WITHOUT_CLASSIFICATION	6.489378293263929E-6	TEST	7.06781810271624E-7	DOCUMENTATION	7.724167476580046E-8	IMPLEMENTATION
// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; //      the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> //          the table info gotten here should really be self-contained (i.e., a class representation //          defining all the needed attributes), then we could then get an array of those	DESIGN	0.9996489388864601	DESIGN	2.4970216423112504E-4	IMPLEMENTATION	9.997751368500971E-5	WITHOUT_CLASSIFICATION	1.0667530985379267E-6	DEFECT	2.031212308591305E-7	TEST	1.1156129443500028E-7	DOCUMENTATION
// TODO: get SQL rendering out of here, create an AST for the join expressions. // Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.885335200938419	WITHOUT_CLASSIFICATION	0.10652534724834456	DESIGN	0.007892574375898145	IMPLEMENTATION	2.1154369891686627E-4	TEST	2.0312740981254458E-5	DOCUMENTATION	1.5020997440206347E-5	DEFECT
// TODO : this really needs to be delayed unitl after we definitively know all node types // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DESIGN	0.9996110824850984	DESIGN	3.69047596586509E-4	DEFECT	1.1474792558119327E-5	DOCUMENTATION	4.548250606562202E-6	IMPLEMENTATION	3.0873116289464915E-6	WITHOUT_CLASSIFICATION	7.595635215385035E-7	TEST
// TODO: Figure out a better way to get the FROM elements in a proper tree structure. // If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.9683098091909224	DESIGN	0.01624581617444283	IMPLEMENTATION	0.011559614970505231	DEFECT	0.0031095791363279376	WITHOUT_CLASSIFICATION	6.893857562664822E-4	TEST	8.579477153524085E-5	DOCUMENTATION
// work around that crazy issue where the tree contains // "empty" FromElements (no text); afaict, this is caused // by FromElementFactory.createCollectionJoin()	DESIGN	0.5590877993650366	WITHOUT_CLASSIFICATION	0.4311693042415672	DESIGN	0.007359120816514488	IMPLEMENTATION	0.0022894357543092646	DEFECT	8.19553389556597E-5	TEST	1.2384483616790605E-5	DOCUMENTATION
//TODO: this class does too many things! we need a different //kind of path expression parser for each of the diffferent //ways in which path expressions can occur	DESIGN	0.9570203264251602	DESIGN	0.03897384227122741	DEFECT	0.0020973283547769607	WITHOUT_CLASSIFICATION	0.0018434393172469443	DOCUMENTATION	4.9006961140505554E-5	TEST	1.6056670448070285E-5	IMPLEMENTATION
//real hacky... // used to count the nesting of parentheses	DESIGN	0.9999880337115142	DESIGN	7.774889367224767E-6	IMPLEMENTATION	3.1288798761898934E-6	WITHOUT_CLASSIFICATION	6.200421895834869E-7	DEFECT	3.3491867206031683E-7	TEST	1.0755838062626963E-7	DOCUMENTATION
// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; // currently not doable though because of the resultset-ref stuff...	DESIGN	0.9960765773826293	DESIGN	0.0014101850970765692	DEFECT	0.0013981838087259247	WITHOUT_CLASSIFICATION	0.001088880725384698	IMPLEMENTATION	2.455479182457963E-5	DOCUMENTATION	1.618194359000238E-6	TEST
//for arrays, we should end the collection load before resolving //the entities, since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9305868185417802	DEFECT	0.06239824701505544	DESIGN	0.006721369665564124	IMPLEMENTATION	2.856596372070801E-4	WITHOUT_CLASSIFICATION	5.3057033786384494E-6	DOCUMENTATION	2.5994370145606908E-6	TEST
// polymorphism not really handled completely correctly, // perhaps...well, actually its ok, assuming that the // entity name used in the lookup is the same as the // the one used here, which it will be	DESIGN	0.6608322836120671	WITHOUT_CLASSIFICATION	0.33825099656684326	DESIGN	9.148222437905245E-4	DEFECT	1.7907936673713514E-6	IMPLEMENTATION	9.012880413834146E-8	TEST	1.6654827458925585E-8	DOCUMENTATION
// TODO: should "record" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.8727803588723353	DEFECT	0.1255116388376237	DESIGN	0.0016877468756906718	WITHOUT_CLASSIFICATION	9.194363289826223E-6	IMPLEMENTATION	8.867083297643551E-6	TEST	2.1939677628463518E-6	DOCUMENTATION
// VERY IMPORTANT!!!! - This class needs to be free of any static references // to any CGLIB or Javassist classes.  Otherwise, users will always need both // on their classpaths no matter which (if either) they use. // // Another option here would be to remove the Hibernate.isPropertyInitialized() // method and have the users go through the SessionFactory to get this information.	DESIGN	0.9999999645538031	WITHOUT_CLASSIFICATION	3.458122673087951E-8	DESIGN	6.826193097695396E-10	DEFECT	1.598209386905783E-10	DOCUMENTATION	1.7753211965452624E-11	TEST	4.77690403724896E-12	IMPLEMENTATION
// TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).	DESIGN	0.999975215063417	DESIGN	1.1960846627861014E-5	WITHOUT_CLASSIFICATION	7.91903894856002E-6	DEFECT	4.627991652062632E-6	IMPLEMENTATION	1.4602130143025826E-7	TEST	1.3103805299995216E-7	DOCUMENTATION
//for backward compatibility, allow a set with no not-null  //element columns, using all columns in the row locater SQL //TODO: create an implicit not null constraint on all cols?	DESIGN	0.6582117017690188	WITHOUT_CLASSIFICATION	0.3406876092282456	DESIGN	0.0010387824279710434	IMPLEMENTATION	4.480673500409282E-5	TEST	1.278015038632642E-5	DEFECT	4.319689374217758E-6	DOCUMENTATION
//SPACES //TODO: i'm not sure, but perhaps we should exclude //      abstract denormalized tables?	DESIGN	0.9987277194460442	DESIGN	8.153833939894238E-4	IMPLEMENTATION	4.2645075384093893E-4	DEFECT	1.3159740945126283E-5	TEST	9.228319180654324E-6	WITHOUT_CLASSIFICATION	8.058345999703723E-6	DOCUMENTATION
//workaround, for backward compatibility of sets with no //not-null columns, assume all columns are used in the //row locator SQL	DESIGN	0.9867297890768857	WITHOUT_CLASSIFICATION	0.0132701520497478	DESIGN	5.0760423830868023E-8	DEFECT	4.54922965987874E-9	TEST	2.5213274092067233E-9	DOCUMENTATION	1.042385563415558E-9	IMPLEMENTATION
//note that this method could easily be moved up to BasicEntityPersister, //if we ever needed to reuse it from other subclasses	DESIGN	0.9949205008535656	DESIGN	0.005079444105069491	WITHOUT_CLASSIFICATION	3.4654690707556865E-8	TEST	1.9596339336326804E-8	IMPLEMENTATION	6.51734813964339E-10	DOCUMENTATION	1.3859996834637583E-10	DEFECT
//index += getPropertyColumnSpan( i ); //TODO:  this is kinda slow...	DESIGN	0.9851672885434636	DEFECT	0.01183628522986066	DESIGN	0.0024612848347899813	IMPLEMENTATION	3.221839842077137E-4	TEST	1.871825571855018E-4	WITHOUT_CLASSIFICATION	2.5774850492736375E-5	DOCUMENTATION
//TODO: need some caching scheme? really comes down to decision  //      regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.9282008237621499	DESIGN	0.06847838149928631	DEFECT	0.002169031815757689	WITHOUT_CLASSIFICATION	8.610479606345701E-4	TEST	1.7806353420253432E-4	DOCUMENTATION	1.1265142796906291E-4	IMPLEMENTATION
// TODO: here is why we need to make bytecode provider global :( // TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9991664050398029	DESIGN	7.631441861531504E-4	IMPLEMENTATION	6.562773229373867E-5	TEST	4.453101137811069E-6	DEFECT	3.6993413194661663E-7	DOCUMENTATION	6.48041162437556E-12	WITHOUT_CLASSIFICATION
//TODO: Yuck! This is not quite good enough, it's a quick //hack around the problem of having a to-one association //that refers to an embedded component:	DESIGN	0.9999998780982616	DESIGN	8.540117057674781E-8	DEFECT	2.948695054741049E-8	IMPLEMENTATION	4.3175506492627604E-9	TEST	1.625732504903098E-9	WITHOUT_CLASSIFICATION	1.0703341929884528E-9	DOCUMENTATION
// for DOM4J "collections" only // TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.645110310182157	WITHOUT_CLASSIFICATION	0.15906306336140744	DESIGN	0.1412992028240295	TEST	0.05012090684037865	IMPLEMENTATION	0.004227723697411671	DEFECT	1.7879309461583256E-4	DOCUMENTATION
// would be great to move all this below here into another method that could also be used // from the new scrolling stuff. // // Would need to change the way the max-row stuff is handled (i.e. behind an interface) so // that I could do the control breaking at the means to know when to stop	DESIGN	0.9999976203856389	DESIGN	2.3794179180641657E-6	WITHOUT_CLASSIFICATION	1.6025239965861385E-10	TEST	2.940312238277695E-11	IMPLEMENTATION	3.6658303653072524E-12	DEFECT	3.1217791439045428E-12	DOCUMENTATION
//TODO: can we *always* use the "null property" approach for everything?	DESIGN	0.9547614964448201	DESIGN	0.04302160977528564	WITHOUT_CLASSIFICATION	0.0011390150789130683	DEFECT	9.402872602362457E-4	IMPLEMENTATION	1.3636301892947745E-4	DOCUMENTATION	1.2284218155881373E-6	TEST
//polymorphism comment above	DESIGN	0.9998684442149979	WITHOUT_CLASSIFICATION	1.1894639676119448E-4	DESIGN	1.1192065038861633E-5	DEFECT	5.877690759477687E-7	DOCUMENTATION	4.637949318119983E-7	TEST	3.6575919433858496E-7	IMPLEMENTATION
// some messy, complex stuff here, since createCriteria() can take an // aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999993618547643	WITHOUT_CLASSIFICATION	4.704338712575162E-7	DEFECT	1.3546768274329663E-7	DESIGN	2.1705998169465897E-8	IMPLEMENTATION	9.489001075019263E-9	TEST	1.048682469574447E-9	DOCUMENTATION
//TODO: really bad, evil hack to fix!!!	DESIGN	0.9999997977949937	DESIGN	1.5984207851553927E-7	DEFECT	3.90087226145275E-8	IMPLEMENTATION	3.133798033576007E-9	DOCUMENTATION	1.941967256363583E-10	TEST	2.621036136176277E-11	WITHOUT_CLASSIFICATION
// ugly hack for cases like "elements(foo.bar.collection)" // (multi-part path expression ending in elements or indices)	DESIGN	0.9998397710989242	DESIGN	8.991557903674677E-5	DEFECT	6.928410397903885E-5	WITHOUT_CLASSIFICATION	9.345284860050607E-7	IMPLEMENTATION	7.300575098480024E-8	TEST	2.1683822996127975E-8	DOCUMENTATION
// try block is a hack around fact that currently tuplizers are not // given the opportunity to resolve a subclass entity name.  this // allows the (we assume custom) interceptor the ability to // influence this decision if we were not able to based on the // given entityName	DESIGN	0.9999997236525537	DESIGN	2.762552357439131E-7	WITHOUT_CLASSIFICATION	5.829487843917865E-11	IMPLEMENTATION	2.2403801883556353E-11	TEST	1.143346438495102E-11	DOCUMENTATION	7.833026732985238E-14	DEFECT
/////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around "ghost" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially, look-ahead to the next FromElement that actually // writes something to the SQL	DESIGN	0.9999866290210048	DESIGN	1.3189769703248778E-5	WITHOUT_CLASSIFICATION	1.1891125615264957E-7	TEST	4.4660829862219964E-8	DEFECT	1.3674382426342817E-8	IMPLEMENTATION	3.9628235667424E-9	DOCUMENTATION
//init the table here instead of earlier, so that we can get a quoted table name //TODO: would it be better to simply pass the qualified table name, instead of //      splitting it up into schema/catalog/table names	DESIGN	0.9945847767161632	DESIGN	0.0051294241973345025	WITHOUT_CLASSIFICATION	2.8460303576738105E-4	IMPLEMENTATION	1.1831280965167164E-6	TEST	7.542300003115146E-9	DOCUMENTATION	5.380338354818409E-9	DEFECT
// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method // I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so // if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.9512703100334023	DESIGN	0.048629713737930555	WITHOUT_CLASSIFICATION	8.111030426249236E-5	DEFECT	1.1717625596785928E-5	IMPLEMENTATION	6.987888169888078E-6	TEST	1.604106379596587E-7	DOCUMENTATION
//TODO: is this really necessary????	DESIGN	0.99375418512501	DESIGN	0.003063317780358287	WITHOUT_CLASSIFICATION	0.0026788628286801646	DEFECT	4.14004270908427E-4	IMPLEMENTATION	6.02877730762535E-5	DOCUMENTATION	2.9342221966950833E-5	TEST
//TODO: ideally we need the construction of PropertyAccessor to take the following: //      1) EntityMode //      2) EntityMode-specific data (i.e., the classname for pojo entities) //      3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) // The easiest way, with the introduction of the new runtime-metamodel classes, would be the // the following predicates: //      1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a //          org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property //      2) What is now termed a "PropertyAccessor" stores any values needed from those two //          pieces of information //      3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with //          PropertyAccessor.getSetter()	DESIGN	0.6117308619748107	WITHOUT_CLASSIFICATION	0.38826378073445705	DESIGN	2.641091805848396E-6	DEFECT	1.068350948315851E-6	TEST	1.0525272060587384E-6	DOCUMENTATION	5.953207720217727E-7	IMPLEMENTATION
//TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.999961640967998	DESIGN	3.779184337842421E-5	DEFECT	5.60967062278049E-7	WITHOUT_CLASSIFICATION	3.639182103199502E-9	DOCUMENTATION	2.5736150468777196E-9	TEST	8.764000197840234E-12	IMPLEMENTATION
// todo : this eventually needs to be removed	DESIGN	0.9704522309666267	WITHOUT_CLASSIFICATION	0.02920134093623143	DESIGN	3.0190052130036206E-4	DEFECT	4.145614848213611E-5	IMPLEMENTATION	1.981608673939852E-6	DOCUMENTATION	1.0898186855035931E-6	TEST
//TODO: make this a bit nicer	DESIGN	0.9991538176449011	DESIGN	6.675508080389556E-4	IMPLEMENTATION	6.541849720716085E-5	WITHOUT_CLASSIFICATION	5.975378798515384E-5	DEFECT	4.595449144661343E-5	TEST	7.504770420934474E-6	DOCUMENTATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.996426507424379	DESIGN	0.0035202217736332807	WITHOUT_CLASSIFICATION	4.64011454376847E-5	DEFECT	6.5058396941758845E-6	IMPLEMENTATION	2.850251325325225E-7	DOCUMENTATION	7.879172338939064E-8	TEST
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.996426507424379	DESIGN	0.0035202217736332807	WITHOUT_CLASSIFICATION	4.64011454376847E-5	DEFECT	6.5058396941758845E-6	IMPLEMENTATION	2.850251325325225E-7	DOCUMENTATION	7.879172338939064E-8	TEST
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.996426507424379	DESIGN	0.0035202217736332807	WITHOUT_CLASSIFICATION	4.64011454376847E-5	DEFECT	6.5058396941758845E-6	IMPLEMENTATION	2.850251325325225E-7	DOCUMENTATION	7.879172338939064E-8	TEST
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.996426507424379	DESIGN	0.0035202217736332807	WITHOUT_CLASSIFICATION	4.64011454376847E-5	DEFECT	6.5058396941758845E-6	IMPLEMENTATION	2.850251325325225E-7	DOCUMENTATION	7.879172338939064E-8	TEST
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.996426507424379	DESIGN	0.0035202217736332807	WITHOUT_CLASSIFICATION	4.64011454376847E-5	DEFECT	6.5058396941758845E-6	IMPLEMENTATION	2.850251325325225E-7	DOCUMENTATION	7.879172338939064E-8	TEST
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.996426507424379	DESIGN	0.0035202217736332807	WITHOUT_CLASSIFICATION	4.64011454376847E-5	DEFECT	6.5058396941758845E-6	IMPLEMENTATION	2.850251325325225E-7	DOCUMENTATION	7.879172338939064E-8	TEST
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.996426507424379	DESIGN	0.0035202217736332807	WITHOUT_CLASSIFICATION	4.64011454376847E-5	DEFECT	6.5058396941758845E-6	IMPLEMENTATION	2.850251325325225E-7	DOCUMENTATION	7.879172338939064E-8	TEST
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.996426507424379	DESIGN	0.0035202217736332807	WITHOUT_CLASSIFICATION	4.64011454376847E-5	DEFECT	6.5058396941758845E-6	IMPLEMENTATION	2.850251325325225E-7	DOCUMENTATION	7.879172338939064E-8	TEST
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9999156592937538	DESIGN	3.14094431892432E-5	DOCUMENTATION	2.831046868430437E-5	DEFECT	2.3241974520492067E-5	WITHOUT_CLASSIFICATION	1.0326585185787143E-6	TEST	3.461613334208653E-7	IMPLEMENTATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9999156592937538	DESIGN	3.14094431892432E-5	DOCUMENTATION	2.831046868430437E-5	DEFECT	2.3241974520492067E-5	WITHOUT_CLASSIFICATION	1.0326585185787143E-6	TEST	3.461613334208653E-7	IMPLEMENTATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9999156592937538	DESIGN	3.14094431892432E-5	DOCUMENTATION	2.831046868430437E-5	DEFECT	2.3241974520492067E-5	WITHOUT_CLASSIFICATION	1.0326585185787143E-6	TEST	3.461613334208653E-7	IMPLEMENTATION
// TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.999999446329634	DESIGN	3.4682617749879017E-7	IMPLEMENTATION	1.1665990408099097E-7	DOCUMENTATION	6.936492197100958E-8	DEFECT	1.0726067845479445E-8	TEST	1.0093294788161036E-8	WITHOUT_CLASSIFICATION
