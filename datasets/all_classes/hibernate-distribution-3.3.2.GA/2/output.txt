// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9941351680857891	WITHOUT_CLASSIFICATION	0.005806108258038045	IMPLEMENTATION	4.389831432212521E-5	DESIGN	6.075412860683286E-6	DEFECT	4.50207391161183E-6	TEST	4.2478550784717655E-6	DOCUMENTATION
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9941351680857891	WITHOUT_CLASSIFICATION	0.005806108258038045	IMPLEMENTATION	4.389831432212521E-5	DESIGN	6.075412860683286E-6	DEFECT	4.50207391161183E-6	TEST	4.2478550784717655E-6	DOCUMENTATION
//TODO: return new Lock(ts);	IMPLEMENTATION	0.9982421380992409	WITHOUT_CLASSIFICATION	8.531629867325184E-4	DESIGN	7.078751519539901E-4	IMPLEMENTATION	1.5484263827148266E-4	DEFECT	3.578326848660579E-5	DOCUMENTATION	6.197855314500845E-6	TEST
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.5011739831724615	WITHOUT_CLASSIFICATION	0.40164168057531424	IMPLEMENTATION	0.08032974250652991	DEFECT	0.011016540465291094	DESIGN	0.004478677037454459	TEST	0.0013593762429487117	DOCUMENTATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9323505998544186	WITHOUT_CLASSIFICATION	0.06278744716459767	IMPLEMENTATION	0.003302240685173712	DESIGN	8.950469418708781E-4	TEST	4.299858591123397E-4	DEFECT	2.346794948267694E-4	DOCUMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.5829080263496735	IMPLEMENTATION	0.371081301973175	WITHOUT_CLASSIFICATION	0.04487621853258576	DESIGN	4.7020323241449464E-4	DOCUMENTATION	3.3424335435234723E-4	TEST	3.3000655779886237E-4	DEFECT
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9861421947550545	WITHOUT_CLASSIFICATION	0.007904754439186737	IMPLEMENTATION	0.005775656278694225	DESIGN	8.419023808523309E-5	TEST	5.6664090883190396E-5	DEFECT	3.6540198096164986E-5	DOCUMENTATION
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.7409260235579533	WITHOUT_CLASSIFICATION	0.18885049018977496	DESIGN	0.039287480302336246	DEFECT	0.030680379203163553	IMPLEMENTATION	1.7073347513930768E-4	DOCUMENTATION	8.489327163257807E-5	TEST
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.991419180091224	WITHOUT_CLASSIFICATION	0.006136495614020249	DEFECT	0.0014819860251708095	IMPLEMENTATION	8.301415161346467E-4	DESIGN	8.663111711223846E-5	DOCUMENTATION	4.556563633788356E-5	TEST
//TODO: native ids	IMPLEMENTATION	0.972233832123643	WITHOUT_CLASSIFICATION	0.022530369522356195	IMPLEMENTATION	0.004174930097387991	DEFECT	7.184148083255998E-4	DESIGN	2.78798060085415E-4	DOCUMENTATION	6.365538820189477E-5	TEST
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9976928436336407	WITHOUT_CLASSIFICATION	0.0015799043399325199	DESIGN	4.2843132050429927E-4	IMPLEMENTATION	2.3480562758182712E-4	DEFECT	3.718096468434079E-5	DOCUMENTATION	2.6834113656178643E-5	TEST
//TODO: handle property-ref	IMPLEMENTATION	0.8804619821627281	WITHOUT_CLASSIFICATION	0.09812802750589639	IMPLEMENTATION	0.01166609542411005	DEFECT	0.009361811647153368	DESIGN	2.745213125206496E-4	DOCUMENTATION	1.0756194759146579E-4	TEST
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9947844544926499	WITHOUT_CLASSIFICATION	0.0038999498491633228	DEFECT	0.001075841363321981	IMPLEMENTATION	2.282641581999385E-4	DESIGN	7.6114198820615365E-6	TEST	3.878716782767704E-6	DOCUMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9947844544926499	WITHOUT_CLASSIFICATION	0.0038999498491633228	DEFECT	0.001075841363321981	IMPLEMENTATION	2.282641581999385E-4	DESIGN	7.6114198820615365E-6	TEST	3.878716782767704E-6	DOCUMENTATION
/**	IMPLEMENTATION	0.9471215356924972	DESIGN	0.047295764984962636	WITHOUT_CLASSIFICATION	0.001798892598532828	DOCUMENTATION	0.0015183353542191267	TEST	0.0013744368199287416	IMPLEMENTATION	8.910345498594567E-4	DEFECT
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.6187312416769644	IMPLEMENTATION	0.3068962053022452	WITHOUT_CLASSIFICATION	0.034633832025183414	DESIGN	0.03315145282728912	DEFECT	0.004144345552100082	DOCUMENTATION	0.0024429226162177285	TEST
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9428909545450466	IMPLEMENTATION	0.05487533577153732	DESIGN	0.0022192632486063113	DEFECT	7.210730178545071E-6	WITHOUT_CLASSIFICATION	5.5015419598207606E-6	TEST	1.7341626713609496E-6	DOCUMENTATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.8064083126330892	DESIGN	0.1251369119866563	WITHOUT_CLASSIFICATION	0.05961616173636575	DEFECT	0.008412704749482022	IMPLEMENTATION	2.2105494085085205E-4	DOCUMENTATION	2.0485395355587563E-4	TEST
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.9999998852488132	WITHOUT_CLASSIFICATION	1.0698811993834257E-7	DESIGN	4.808394666737416E-9	TEST	2.9505059509403186E-9	DOCUMENTATION	4.032358658106655E-12	IMPLEMENTATION	1.340069085556987E-13	DEFECT
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.5076164877503485	WITHOUT_CLASSIFICATION	0.4722919862918366	DESIGN	0.01034944275840745	IMPLEMENTATION	0.008761976302552349	DEFECT	5.198004295164082E-4	TEST	4.60306467338778E-4	DOCUMENTATION
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.9608513685378206	WITHOUT_CLASSIFICATION	0.03836528846350153	IMPLEMENTATION	7.276390967929642E-4	DESIGN	2.7650967646639697E-5	DOCUMENTATION	1.9503847030919362E-5	DEFECT	8.549087207312486E-6	TEST
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.9848596579024803	WITHOUT_CLASSIFICATION	0.01498053685204897	DESIGN	1.484947124905078E-4	TEST	9.896892309907027E-6	IMPLEMENTATION	7.147808103438357E-7	DEFECT	6.988598598888714E-7	DOCUMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.8903432072887366	WITHOUT_CLASSIFICATION	0.105732852874289	IMPLEMENTATION	0.002272341796315956	DEFECT	0.0010767101344145563	DESIGN	4.8382942411943886E-4	TEST	9.105848212435057E-5	DOCUMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9927257127439395	IMPLEMENTATION	0.006342930965126243	WITHOUT_CLASSIFICATION	7.879173279889502E-4	DESIGN	6.863728149391249E-5	DEFECT	5.447321524308234E-5	TEST	2.032846620823552E-5	DOCUMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9927257127439395	IMPLEMENTATION	0.006342930965126243	WITHOUT_CLASSIFICATION	7.879173279889502E-4	DESIGN	6.863728149391249E-5	DEFECT	5.447321524308234E-5	TEST	2.032846620823552E-5	DOCUMENTATION
// TODO : why aren't these the same?	IMPLEMENTATION	0.9933101363412354	IMPLEMENTATION	0.006247800063579456	DESIGN	2.188946087872321E-4	DOCUMENTATION	1.4983911275961133E-4	TEST	5.161273830949707E-5	WITHOUT_CLASSIFICATION	2.171713532884805E-5	DEFECT
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.7613608911438714	DEFECT	0.18256900381118024	DESIGN	0.05474394112601528	WITHOUT_CLASSIFICATION	0.0012706849791220148	IMPLEMENTATION	3.472386104057301E-5	DOCUMENTATION	2.0755078770454705E-5	TEST
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.6754129043367999	DESIGN	0.3211315207382592	IMPLEMENTATION	0.0031589674455488642	WITHOUT_CLASSIFICATION	1.3503686114773016E-4	DOCUMENTATION	8.45133640514237E-5	DEFECT	7.705725419285504E-5	TEST
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.8520319605119425	WITHOUT_CLASSIFICATION	0.14151986627363944	DESIGN	0.005805567683857147	IMPLEMENTATION	3.7595921088047485E-4	DEFECT	1.4544006339276873E-4	TEST	1.2120625628754764E-4	DOCUMENTATION
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.8565275837966206	IMPLEMENTATION	0.12869487854263673	WITHOUT_CLASSIFICATION	0.012444419796415869	DESIGN	0.0011495964609696512	TEST	0.0011495800771784788	DEFECT	3.394132617872201E-5	DOCUMENTATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.8035117043575545	WITHOUT_CLASSIFICATION	0.16198666887836521	DESIGN	0.0321747385133334	DEFECT	0.0013080080843029945	IMPLEMENTATION	5.545131407155142E-4	TEST	4.643670257284762E-4	DOCUMENTATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.5110579193049505	WITHOUT_CLASSIFICATION	0.45610058484538524	IMPLEMENTATION	0.025013525554617565	DEFECT	0.007312785986780704	DESIGN	4.790665145718984E-4	DOCUMENTATION	3.611779369409187E-5	TEST
// todo : look at optimizing these...	IMPLEMENTATION	0.9906659958128061	WITHOUT_CLASSIFICATION	0.00915050523118985	IMPLEMENTATION	9.087766272988634E-5	DESIGN	3.9086996057992195E-5	TEST	3.677230707074278E-5	DEFECT	1.6761990145347156E-5	DOCUMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.45565253639000297	DESIGN	0.3341641738171656	WITHOUT_CLASSIFICATION	0.2038471888509075	IMPLEMENTATION	0.005900825167325147	DEFECT	2.2437832760112387E-4	DOCUMENTATION	2.1089744699751318E-4	TEST
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.8192505252907132	DESIGN	0.17228877751305632	WITHOUT_CLASSIFICATION	0.004470308217794071	DEFECT	0.0021715369765700496	TEST	0.0017374213422450529	IMPLEMENTATION	8.14306596214872E-5	DOCUMENTATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9375843572417921	WITHOUT_CLASSIFICATION	0.05368754693478499	DESIGN	0.008257875442074215	DEFECT	3.55685376993381E-4	IMPLEMENTATION	7.422577812032246E-5	DOCUMENTATION	4.030922623487828E-5	TEST
// TODO: not visible to the user!	IMPLEMENTATION	0.4694999962704116	DEFECT	0.45732538200470296	WITHOUT_CLASSIFICATION	0.06317514085314373	IMPLEMENTATION	0.008373245191370693	DESIGN	0.0010123292576618747	DOCUMENTATION	6.139064227090894E-4	TEST
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.7092525672904372	WITHOUT_CLASSIFICATION	0.26602322022325453	IMPLEMENTATION	0.020555647091358497	DESIGN	0.004022728341038269	DEFECT	7.535380287173763E-5	TEST	7.048325103986606E-5	DOCUMENTATION
//TODO: use these in methods above	IMPLEMENTATION	0.8854208115950177	WITHOUT_CLASSIFICATION	0.11142034329926524	DESIGN	0.002406864764964001	IMPLEMENTATION	5.502814766291874E-4	TEST	1.3609534748253824E-4	DOCUMENTATION	6.560351664144305E-5	DEFECT
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9998160282178585	DESIGN	9.570870257290923E-5	IMPLEMENTATION	7.797942662336112E-5	DEFECT	4.262273557092103E-6	DOCUMENTATION	3.3273138339140824E-6	WITHOUT_CLASSIFICATION	2.694065554261356E-6	TEST
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9998160282178585	DESIGN	9.570870257290923E-5	IMPLEMENTATION	7.797942662336112E-5	DEFECT	4.262273557092103E-6	DOCUMENTATION	3.3273138339140824E-6	WITHOUT_CLASSIFICATION	2.694065554261356E-6	TEST
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.9639690245504264	DESIGN	0.03464051842904912	IMPLEMENTATION	9.280099347325326E-4	DEFECT	2.2870893943368944E-4	WITHOUT_CLASSIFICATION	1.606645804572375E-4	TEST	7.307356590097061E-5	DOCUMENTATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9779428617874942	DESIGN	0.022055152826174537	WITHOUT_CLASSIFICATION	1.8690932593631046E-6	TEST	6.396825509203931E-8	DOCUMENTATION	4.8230968873554144E-8	IMPLEMENTATION	4.09384787930002E-9	DEFECT
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9549850411365453	WITHOUT_CLASSIFICATION	0.04260734889818992	DEFECT	0.0016306522275143498	IMPLEMENTATION	3.959386702126677E-4	TEST	3.2872267415176885E-4	DESIGN	5.229639338595548E-5	DOCUMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9041570828493051	DESIGN	0.09302917746880184	IMPLEMENTATION	0.0018459349750774281	TEST	5.109936921729551E-4	DEFECT	4.0993536262454844E-4	DOCUMENTATION	4.687565201806786E-5	WITHOUT_CLASSIFICATION
//TODO: add owner argument!!	IMPLEMENTATION	0.9510291341277933	WITHOUT_CLASSIFICATION	0.022322931504851234	DEFECT	0.018284371642925297	IMPLEMENTATION	0.007964740812378383	DOCUMENTATION	2.2701420564261838E-4	DESIGN	1.718077064092387E-4	TEST
//TODO: formulas ?	IMPLEMENTATION	0.9660127763803353	WITHOUT_CLASSIFICATION	0.03269713015188739	DESIGN	6.777954713064068E-4	IMPLEMENTATION	5.397442444946509E-4	DEFECT	4.424116593126379E-5	DOCUMENTATION	2.8312586044915446E-5	TEST
//TODO: include the rowids!!!!	IMPLEMENTATION	0.989622257138495	WITHOUT_CLASSIFICATION	0.006105206962073475	IMPLEMENTATION	0.002937331863795962	DEFECT	9.94793104948824E-4	DESIGN	3.1640231633522415E-4	DOCUMENTATION	2.400861435136033E-5	TEST
// todo : cache this sql...	IMPLEMENTATION	0.9970095028229721	WITHOUT_CLASSIFICATION	0.0028529148119239315	DESIGN	6.426246305959237E-5	IMPLEMENTATION	4.3812965323840353E-5	TEST	2.166991528149069E-5	DOCUMENTATION	7.837021439187202E-6	DEFECT
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.5502599575323441	WITHOUT_CLASSIFICATION	0.2807904448269869	DESIGN	0.08602278277404925	IMPLEMENTATION	0.08204292089129114	DEFECT	5.463503555848664E-4	TEST	3.375436197436451E-4	DOCUMENTATION
//TODO: cache this in an instvar	IMPLEMENTATION	0.8006641321040447	WITHOUT_CLASSIFICATION	0.1989839277837188	DESIGN	2.0174892529818176E-4	TEST	6.779501318264868E-5	DOCUMENTATION	5.142579778097506E-5	DEFECT	3.097037597470648E-5	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.9203666560632314	DESIGN	0.06999208507872724	IMPLEMENTATION	0.0042445832299571225	TEST	0.0032802315271443223	WITHOUT_CLASSIFICATION	0.0014967275481457725	DEFECT	6.197165527941082E-4	DOCUMENTATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.6462408110282126	DESIGN	0.2556390661314384	IMPLEMENTATION	0.09072448659673837	WITHOUT_CLASSIFICATION	0.004940845309262068	DEFECT	0.00215553795512713	DOCUMENTATION	2.9925297922123146E-4	TEST
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.9811868346316049	WITHOUT_CLASSIFICATION	0.010434115421543336	DESIGN	0.005226821159289122	DEFECT	0.003089819661664664	IMPLEMENTATION	3.128244042846589E-5	TEST	3.11266854694598E-5	DOCUMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9594402694854792	WITHOUT_CLASSIFICATION	0.021290517971125654	DEFECT	0.01708670028238366	IMPLEMENTATION	0.001633102308030232	DESIGN	3.9939332553308216E-4	DOCUMENTATION	1.5001662744814153E-4	TEST
//TODO: terrible implementation!	IMPLEMENTATION	0.8580390127541048	IMPLEMENTATION	0.1350072582214976	WITHOUT_CLASSIFICATION	0.005443620503445119	DEFECT	0.0012762726970690994	DESIGN	1.4656135397224284E-4	DOCUMENTATION	8.727446991109439E-5	TEST
//TODO: proxies!	IMPLEMENTATION	0.9594402694854792	WITHOUT_CLASSIFICATION	0.021290517971125654	DEFECT	0.01708670028238366	IMPLEMENTATION	0.001633102308030232	DESIGN	3.9939332553308216E-4	DOCUMENTATION	1.5001662744814153E-4	TEST
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9961606197118146	DESIGN	0.0037305385895850343	IMPLEMENTATION	1.0747346771408687E-4	DEFECT	1.2167481810082655E-6	TEST	1.15812147473045E-7	WITHOUT_CLASSIFICATION	3.567055780350463E-8	DOCUMENTATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.9884605234284053	IMPLEMENTATION	0.006674317767949321	DESIGN	0.0046200052350002735	WITHOUT_CLASSIFICATION	1.2568555742664667E-4	DOCUMENTATION	1.1002621319915686E-4	DEFECT	9.44179801929978E-6	TEST
//TODO: proxies!	IMPLEMENTATION	0.9594402694854792	WITHOUT_CLASSIFICATION	0.021290517971125654	DEFECT	0.01708670028238366	IMPLEMENTATION	0.001633102308030232	DESIGN	3.9939332553308216E-4	DOCUMENTATION	1.5001662744814153E-4	TEST
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999683723552906	WITHOUT_CLASSIFICATION	2.7397528551314975E-5	TEST	1.8883911382000843E-6	DESIGN	1.570045647562936E-6	IMPLEMENTATION	6.891121328277953E-7	DEFECT	8.256723953801306E-8	DOCUMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999693002320644	WITHOUT_CLASSIFICATION	2.7011689428972383E-5	TEST	2.5536496602772484E-6	DESIGN	6.350453447814922E-7	IMPLEMENTATION	4.4608277516323796E-7	DEFECT	5.330072627814088E-8	DOCUMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9984877521503785	DESIGN	0.0012252704561120634	WITHOUT_CLASSIFICATION	1.185821113614064E-4	DEFECT	8.802661486936121E-5	IMPLEMENTATION	4.697910318904237E-5	DOCUMENTATION	3.3389564089571875E-5	TEST
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.9997529323317382	WITHOUT_CLASSIFICATION	1.1536621385499372E-4	IMPLEMENTATION	6.425986556798898E-5	DESIGN	5.550252760181635E-5	DEFECT	1.002122067387093E-5	DOCUMENTATION	1.917840563125716E-6	TEST
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.999217037251447	WITHOUT_CLASSIFICATION	4.925762501004516E-4	IMPLEMENTATION	2.8407424545961264E-4	TEST	4.597676067631095E-6	DOCUMENTATION	1.4454212434957479E-6	DEFECT	2.691556817339536E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999997200166014	WITHOUT_CLASSIFICATION	1.6552016634421703E-6	DESIGN	3.4240010000361687E-7	DEFECT	3.3470674011084055E-7	IMPLEMENTATION	2.721176335450861E-7	DOCUMENTATION	1.9540784893419966E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.999997200166014	WITHOUT_CLASSIFICATION	1.6552016634421703E-6	DESIGN	3.4240010000361687E-7	DEFECT	3.3470674011084055E-7	IMPLEMENTATION	2.721176335450861E-7	DOCUMENTATION	1.9540784893419966E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.999997200166014	WITHOUT_CLASSIFICATION	1.6552016634421703E-6	DESIGN	3.4240010000361687E-7	DEFECT	3.3470674011084055E-7	IMPLEMENTATION	2.721176335450861E-7	DOCUMENTATION	1.9540784893419966E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.999997200166014	WITHOUT_CLASSIFICATION	1.6552016634421703E-6	DESIGN	3.4240010000361687E-7	DEFECT	3.3470674011084055E-7	IMPLEMENTATION	2.721176335450861E-7	DOCUMENTATION	1.9540784893419966E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.999997200166014	WITHOUT_CLASSIFICATION	1.6552016634421703E-6	DESIGN	3.4240010000361687E-7	DEFECT	3.3470674011084055E-7	IMPLEMENTATION	2.721176335450861E-7	DOCUMENTATION	1.9540784893419966E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.999997200166014	WITHOUT_CLASSIFICATION	1.6552016634421703E-6	DESIGN	3.4240010000361687E-7	DEFECT	3.3470674011084055E-7	IMPLEMENTATION	2.721176335450861E-7	DOCUMENTATION	1.9540784893419966E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.999997200166014	WITHOUT_CLASSIFICATION	1.6552016634421703E-6	DESIGN	3.4240010000361687E-7	DEFECT	3.3470674011084055E-7	IMPLEMENTATION	2.721176335450861E-7	DOCUMENTATION	1.9540784893419966E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.999994588225376	WITHOUT_CLASSIFICATION	3.943589956901217E-6	DESIGN	7.801583251945404E-7	IMPLEMENTATION	4.1765915193868523E-7	DEFECT	1.756815254192823E-7	DOCUMENTATION	9.468566449717608E-8	TEST
// return	WITHOUT_CLASSIFICATION	0.999994588225376	WITHOUT_CLASSIFICATION	3.943589956901217E-6	DESIGN	7.801583251945404E-7	IMPLEMENTATION	4.1765915193868523E-7	DEFECT	1.756815254192823E-7	DOCUMENTATION	9.468566449717608E-8	TEST
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.999980138337193	WITHOUT_CLASSIFICATION	1.4383838324221701E-5	TEST	3.363888210059301E-6	DESIGN	1.0794456834453308E-6	DOCUMENTATION	8.23065182135409E-7	IMPLEMENTATION	2.114254071658053E-7	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999941216791078	WITHOUT_CLASSIFICATION	4.828342150145026E-6	DESIGN	5.09742758722184E-7	DEFECT	3.819593789048514E-7	DOCUMENTATION	1.3064404864030032E-7	TEST	2.7632555756254885E-8	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.99999588046101	WITHOUT_CLASSIFICATION	2.558493465454067E-6	IMPLEMENTATION	5.898609604825433E-7	TEST	4.147301973489244E-7	DESIGN	4.0964177505165587E-7	DEFECT	1.4681259170577464E-7	DOCUMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999966334407162	WITHOUT_CLASSIFICATION	1.3493319164685182E-6	IMPLEMENTATION	9.953224500739364E-7	DOCUMENTATION	3.9682587719243955E-7	DESIGN	3.807966093559425E-7	DEFECT	2.4428243073044806E-7	TEST
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999966334407162	WITHOUT_CLASSIFICATION	1.3493319164685182E-6	IMPLEMENTATION	9.953224500739364E-7	DOCUMENTATION	3.9682587719243955E-7	DESIGN	3.807966093559425E-7	DEFECT	2.4428243073044806E-7	TEST
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999994566376994	WITHOUT_CLASSIFICATION	3.874342861197409E-7	DESIGN	9.81524209585602E-8	DEFECT	2.2006419409922965E-8	TEST	1.8801340116296783E-8	IMPLEMENTATION	1.696783410741391E-8	DOCUMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999976627720558	WITHOUT_CLASSIFICATION	2.208927043088429E-6	DESIGN	9.040672782653174E-8	DEFECT	1.544541127676283E-8	TEST	1.4147328652127898E-8	DOCUMENTATION	8.301433487353492E-9	IMPLEMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999978306089039	WITHOUT_CLASSIFICATION	1.5526953796590724E-6	DESIGN	3.7322685909665414E-7	DEFECT	1.1539645184952806E-7	DOCUMENTATION	6.964421367131155E-8	IMPLEMENTATION	5.842819171981186E-8	TEST
// reference type	WITHOUT_CLASSIFICATION	0.9999921268532855	WITHOUT_CLASSIFICATION	6.675400510635507E-6	DESIGN	5.601701692231146E-7	DOCUMENTATION	5.420252238959087E-7	IMPLEMENTATION	6.982487279613943E-8	TEST	2.5725937856308012E-8	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999997210384332	WITHOUT_CLASSIFICATION	1.5980641488890106E-7	DESIGN	5.901369025985461E-8	DEFECT	2.895476308176656E-8	DOCUMENTATION	2.2099801630389046E-8	TEST	9.086897010423568E-9	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999997210384332	WITHOUT_CLASSIFICATION	1.5980641488890106E-7	DESIGN	5.901369025985461E-8	DEFECT	2.895476308176656E-8	DOCUMENTATION	2.2099801630389046E-8	TEST	9.086897010423568E-9	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999461285862795	WITHOUT_CLASSIFICATION	3.219207281928359E-5	DEFECT	1.6005915255524402E-5	DESIGN	2.146299858527595E-6	DOCUMENTATION	1.9403827783688452E-6	IMPLEMENTATION	1.586743008735004E-6	TEST
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9998767100753686	WITHOUT_CLASSIFICATION	1.0608037758665408E-4	IMPLEMENTATION	7.296527177320777E-6	DOCUMENTATION	6.285505667909852E-6	DEFECT	2.3006823268087758E-6	DESIGN	1.3268318728029929E-6	TEST
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999395524918665	WITHOUT_CLASSIFICATION	2.8064576543708924E-5	DESIGN	1.9215211842368532E-5	DEFECT	1.0189701574250643E-5	IMPLEMENTATION	1.8088438961373635E-6	TEST	1.1691742770441018E-6	DOCUMENTATION
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999958562858207	WITHOUT_CLASSIFICATION	1.975252748070889E-6	DEFECT	1.094832441641063E-6	DESIGN	7.957329938532953E-7	TEST	1.569957770144292E-7	IMPLEMENTATION	1.2090021875499265E-7	DOCUMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999912150275	WITHOUT_CLASSIFICATION	6.987933547849675E-9	DEFECT	8.552350581237185E-10	IMPLEMENTATION	5.596768525447622E-10	DESIGN	3.566973768223931E-10	TEST	2.5429729316584847E-11	DOCUMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.999997803686035	WITHOUT_CLASSIFICATION	1.3038796321698629E-6	DESIGN	3.663736261695293E-7	TEST	2.5874892333942423E-7	DOCUMENTATION	1.8071135641041383E-7	DEFECT	8.660042694768295E-8	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.9999774439987563	WITHOUT_CLASSIFICATION	1.2799157555843869E-5	IMPLEMENTATION	3.0405005490572515E-6	DESIGN	2.8732824905669813E-6	DEFECT	2.1712493531190944E-6	DOCUMENTATION	1.6718112950692456E-6	TEST
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999933900528235	WITHOUT_CLASSIFICATION	2.6538094826162616E-6	DESIGN	1.4230766349769133E-6	IMPLEMENTATION	9.68588926425093E-7	DOCUMENTATION	8.212600631532748E-7	DEFECT	7.432120691966144E-7	TEST
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998991601507293	WITHOUT_CLASSIFICATION	7.456388253480148E-5	IMPLEMENTATION	7.740273010552859E-6	DEFECT	7.720734177546534E-6	DOCUMENTATION	6.691038325530262E-6	DESIGN	4.123921222221172E-6	TEST
/*	WITHOUT_CLASSIFICATION	0.9967552008360161	WITHOUT_CLASSIFICATION	0.002240573261620505	DESIGN	3.059997711743128E-4	TEST	3.0513762412901315E-4	DOCUMENTATION	2.1112684642552555E-4	DEFECT	1.8196166063468014E-4	IMPLEMENTATION
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999291685559031	WITHOUT_CLASSIFICATION	4.12003800501828E-5	IMPLEMENTATION	1.622955194833616E-5	DESIGN	5.13422662027241E-6	DOCUMENTATION	4.933400229635641E-6	DEFECT	3.3338852486420233E-6	TEST
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999921100495431	WITHOUT_CLASSIFICATION	2.6772406679072813E-6	IMPLEMENTATION	1.9342686699774286E-6	DESIGN	1.1195651977030883E-6	DOCUMENTATION	1.1177655007027857E-6	DEFECT	1.0411104204923156E-6	TEST
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999985133588635	WITHOUT_CLASSIFICATION	1.439391241421207E-6	DESIGN	3.4782374376010836E-8	DEFECT	9.206735583314605E-9	TEST	2.906527453376281E-9	DOCUMENTATION	3.542578520441275E-10	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999901784277917	WITHOUT_CLASSIFICATION	4.160119311834365E-6	IMPLEMENTATION	1.652908137388332E-6	DESIGN	1.4336985985061021E-6	DOCUMENTATION	1.353998308545204E-6	DEFECT	1.220847852112589E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999901784277917	WITHOUT_CLASSIFICATION	4.160119311834365E-6	IMPLEMENTATION	1.652908137388332E-6	DESIGN	1.4336985985061021E-6	DOCUMENTATION	1.353998308545204E-6	DEFECT	1.220847852112589E-6	TEST
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999989031862215	WITHOUT_CLASSIFICATION	9.434476132276435E-7	DESIGN	9.780715718891906E-8	IMPLEMENTATION	4.077936507993467E-8	TEST	1.2467304002010065E-8	DEFECT	2.3123388722424796E-9	DOCUMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999840615420568	WITHOUT_CLASSIFICATION	5.344989701246169E-6	DESIGN	3.218681419905353E-6	IMPLEMENTATION	3.0872353626551275E-6	DEFECT	2.2637373622618626E-6	DOCUMENTATION	2.023814097159134E-6	TEST
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999262429620736	WITHOUT_CLASSIFICATION	6.996272374186558E-5	DESIGN	2.3052093987361567E-6	DEFECT	1.140132661799446E-6	IMPLEMENTATION	2.4779179888141564E-7	DOCUMENTATION	1.0118032522173283E-7	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999331553988196	WITHOUT_CLASSIFICATION	3.053090177200303E-5	DESIGN	3.026745410366212E-5	IMPLEMENTATION	5.707490981662188E-6	DEFECT	1.7656336147676724E-7	DOCUMENTATION	1.6219096170418912E-7	TEST
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9794746863295541	WITHOUT_CLASSIFICATION	0.020205043600263862	DESIGN	3.133288789527425E-4	DOCUMENTATION	4.597473570371807E-6	TEST	2.2495953464122034E-6	IMPLEMENTATION	9.41223124146473E-8	DEFECT
/**	WITHOUT_CLASSIFICATION	0.9471215356924972	DESIGN	0.047295764984962636	WITHOUT_CLASSIFICATION	0.001798892598532828	DOCUMENTATION	0.0015183353542191267	TEST	0.0013744368199287416	IMPLEMENTATION	8.910345498594567E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
/**	WITHOUT_CLASSIFICATION	0.9471215356924972	DESIGN	0.047295764984962636	WITHOUT_CLASSIFICATION	0.001798892598532828	DOCUMENTATION	0.0015183353542191267	TEST	0.0013744368199287416	IMPLEMENTATION	8.910345498594567E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999976857779127	WITHOUT_CLASSIFICATION	1.0183340465255334E-6	IMPLEMENTATION	9.275384317991719E-7	DESIGN	2.923900664219805E-7	DEFECT	5.164911340713384E-8	TEST	2.431042919413919E-8	DOCUMENTATION
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9996906689779218	WITHOUT_CLASSIFICATION	3.05973670647146E-4	DESIGN	1.905411008883814E-6	TEST	1.0674515929136137E-6	DEFECT	2.02086826999712E-7	DOCUMENTATION	1.8240200220751987E-7	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999654203062378	WITHOUT_CLASSIFICATION	3.410852008531844E-5	DESIGN	2.990393611358709E-7	TEST	1.0709154768482365E-7	DEFECT	4.4385312946753226E-8	IMPLEMENTATION	2.0657455151329405E-8	DOCUMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9990813427442118	WITHOUT_CLASSIFICATION	7.970551261037608E-4	DESIGN	1.0386162347112267E-4	IMPLEMENTATION	6.025061604868317E-6	TEST	6.015699896671957E-6	DEFECT	5.699744711897432E-6	DOCUMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999485008351153	WITHOUT_CLASSIFICATION	2.2099518092085163E-5	IMPLEMENTATION	1.1928469321310613E-5	DESIGN	1.0843975345012332E-5	DEFECT	6.161277846143262E-6	DOCUMENTATION	4.659242802809275E-7	TEST
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999669088016745	WITHOUT_CLASSIFICATION	2.6530778229301407E-5	IMPLEMENTATION	4.570533932234882E-6	DESIGN	7.942045132609472E-7	TEST	6.120104687448647E-7	DOCUMENTATION	5.836711819293707E-7	DEFECT
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942240360088	WITHOUT_CLASSIFICATION	3.5002448349376267E-6	IMPLEMENTATION	1.4431742994648568E-6	DESIGN	3.281854872712668E-7	DEFECT	2.9214891815114903E-7	TEST	2.1221045134462765E-7	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999932439235728	WITHOUT_CLASSIFICATION	3.2777810200232324E-6	DESIGN	1.388582418649274E-6	DOCUMENTATION	1.103736034897598E-6	IMPLEMENTATION	8.1469093777023E-7	DEFECT	1.712860159087663E-7	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9999115885088069	WITHOUT_CLASSIFICATION	4.619495303922365E-5	DEFECT	1.918872221541764E-5	DESIGN	1.4699146161110847E-5	DOCUMENTATION	4.9523549391624545E-6	IMPLEMENTATION	3.3763148382946277E-6	TEST
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9888205562566542	WITHOUT_CLASSIFICATION	0.010962141458818509	DESIGN	1.654239302811073E-4	IMPLEMENTATION	4.369374742576314E-5	DEFECT	7.076910373554825E-6	TEST	1.1076964468429518E-6	DOCUMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.999950960714484	WITHOUT_CLASSIFICATION	2.1508253886417103E-5	IMPLEMENTATION	1.1772248937815562E-5	DESIGN	8.215946243079872E-6	DOCUMENTATION	5.570301758346429E-6	DEFECT	1.972534690434719E-6	TEST
//ignore!	WITHOUT_CLASSIFICATION	0.9999115885088069	WITHOUT_CLASSIFICATION	4.619495303922365E-5	DEFECT	1.918872221541764E-5	DESIGN	1.4699146161110847E-5	DOCUMENTATION	4.9523549391624545E-6	IMPLEMENTATION	3.3763148382946277E-6	TEST
//60 seconds	WITHOUT_CLASSIFICATION	0.999950960714484	WITHOUT_CLASSIFICATION	2.1508253886417103E-5	IMPLEMENTATION	1.1772248937815562E-5	DESIGN	8.215946243079872E-6	DOCUMENTATION	5.570301758346429E-6	DEFECT	1.972534690434719E-6	TEST
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999829182866503	WITHOUT_CLASSIFICATION	7.484756763565348E-6	DESIGN	3.765326313156308E-6	TEST	3.1195777024097234E-6	DEFECT	1.7594543957485197E-6	DOCUMENTATION	9.525981747875677E-7	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.997868963252245	DESIGN	0.0018356727179066922	WITHOUT_CLASSIFICATION	2.774538631857151E-4	DEFECT	1.7759083392590668E-5	TEST	1.4511108215711682E-7	DOCUMENTATION	5.972187857602071E-9	IMPLEMENTATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9998611123798359	WITHOUT_CLASSIFICATION	1.31103906562698E-4	IMPLEMENTATION	3.7016208957838087E-6	DESIGN	2.5473727613676815E-6	DEFECT	1.088651791084484E-6	TEST	4.460681531528745E-7	DOCUMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9985241741047081	WITHOUT_CLASSIFICATION	0.001316247797751196	IMPLEMENTATION	1.1442852405795226E-4	DEFECT	3.146637673386782E-5	DESIGN	1.2891973955135216E-5	TEST	7.912227938261873E-7	DOCUMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999765930977691	WITHOUT_CLASSIFICATION	2.1244661062438817E-5	DEFECT	1.2687577625555055E-6	DESIGN	4.740119597037665E-7	TEST	4.1042359738449633E-7	DOCUMENTATION	9.047848902546832E-9	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999787026325966	WITHOUT_CLASSIFICATION	1.8550272422693965E-5	DEFECT	2.163994101418863E-6	TEST	5.316527338794738E-7	DESIGN	4.467923605496212E-8	DOCUMENTATION	6.768909362932061E-9	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.8980145036817886	WITHOUT_CLASSIFICATION	0.052641638788105335	DEFECT	0.036114583889257625	IMPLEMENTATION	0.012258265915295868	DESIGN	7.695135892316048E-4	TEST	2.0149413632110117E-4	DOCUMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9746600579872173	WITHOUT_CLASSIFICATION	0.020875655530445392	DESIGN	0.004327222733942276	IMPLEMENTATION	6.867572648117563E-5	DOCUMENTATION	3.942617032045718E-5	TEST	2.8961851593346248E-5	DEFECT
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9979751930110264	WITHOUT_CLASSIFICATION	0.0019293435491884875	IMPLEMENTATION	6.951597287836649E-5	DEFECT	2.383841789823775E-5	DESIGN	2.005518653014536E-6	TEST	1.0353035557358607E-7	DOCUMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999859959007478	WITHOUT_CLASSIFICATION	7.79877941348561E-6	IMPLEMENTATION	4.288869904809624E-6	TEST	1.2967985297663597E-6	DESIGN	4.876690551414655E-7	DOCUMENTATION	1.3198234897772628E-7	DEFECT
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999774501027004	WITHOUT_CLASSIFICATION	2.0031450797690662E-5	IMPLEMENTATION	1.3930629150909573E-6	TEST	4.426227344043301E-7	DESIGN	3.4355085892292913E-7	DEFECT	3.3920999359244825E-7	DOCUMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999894369728699	WITHOUT_CLASSIFICATION	5.414873705694906E-6	IMPLEMENTATION	1.985671613001019E-6	DESIGN	1.4311674656776653E-6	DEFECT	1.3783573621164549E-6	DOCUMENTATION	3.529569836640124E-7	TEST
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999885915224838	WITHOUT_CLASSIFICATION	1.1350879998124696E-5	DESIGN	3.910131809723538E-8	DEFECT	1.6498220647476634E-8	TEST	1.129707530891081E-9	IMPLEMENTATION	8.682719296666843E-10	DOCUMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9998222572319857	WITHOUT_CLASSIFICATION	1.662176146430827E-4	IMPLEMENTATION	7.5269730357503854E-6	DESIGN	2.2823206884336332E-6	DEFECT	1.1132941055606355E-6	DOCUMENTATION	6.025655414004471E-7	TEST
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.999990047631392	WITHOUT_CLASSIFICATION	6.494997494674733E-6	DESIGN	1.6158837067774746E-6	IMPLEMENTATION	1.1278484792678943E-6	DEFECT	6.878547984359027E-7	TEST	2.5784128768956344E-8	DOCUMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999828787145699	WITHOUT_CLASSIFICATION	1.6150795771549485E-5	DEFECT	9.54153190214742E-7	TEST	1.0418691848700912E-8	DOCUMENTATION	5.75323507797891E-9	DESIGN	1.6454128612958036E-10	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.999998911218009	WITHOUT_CLASSIFICATION	9.794701976977124E-7	DESIGN	3.5815985494298325E-8	DEFECT	2.9038392427071065E-8	DOCUMENTATION	2.276336877090894E-8	TEST	2.1694046626669432E-8	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9963244613625575	WITHOUT_CLASSIFICATION	0.003628545248826746	DESIGN	2.443822818439251E-5	DEFECT	1.4400663184208012E-5	IMPLEMENTATION	4.533048510310485E-6	TEST	3.621448736938146E-6	DOCUMENTATION
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999329959997776	WITHOUT_CLASSIFICATION	6.100967197739841E-5	DESIGN	3.3284721821035884E-6	TEST	1.4501851872452398E-6	DEFECT	1.0458311836381376E-6	IMPLEMENTATION	1.6983969211570966E-7	DOCUMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999334446906278	WITHOUT_CLASSIFICATION	5.817396148247286E-5	DESIGN	6.394282274994859E-6	DEFECT	1.431265041232177E-6	TEST	3.4714251284411553E-7	DOCUMENTATION	2.0865806047030993E-7	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9996148390308366	WITHOUT_CLASSIFICATION	3.073875778125874E-4	DESIGN	5.4923539416926364E-5	IMPLEMENTATION	1.606223701547647E-5	TEST	4.354973184734625E-6	DOCUMENTATION	2.4326417336458756E-6	DEFECT
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999245001135	WITHOUT_CLASSIFICATION	6.9806293917186E-8	IMPLEMENTATION	3.725949612645277E-9	TEST	9.187071079240282E-10	DEFECT	6.554797746827761E-10	DESIGN	3.934560217008892E-10	DOCUMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999298208825471	WITHOUT_CLASSIFICATION	6.971185171794767E-5	DESIGN	2.3012752152949953E-7	DOCUMENTATION	1.2041055331055327E-7	DEFECT	8.000743155512443E-8	IMPLEMENTATION	3.672022842637616E-8	TEST
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999979708954859	WITHOUT_CLASSIFICATION	9.272728098188288E-7	IMPLEMENTATION	7.700009319754427E-7	DEFECT	1.7298283966475554E-7	TEST	8.559258239063531E-8	DESIGN	7.325535034810209E-8	DOCUMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9864831878878728	WITHOUT_CLASSIFICATION	0.0075839407487701	DESIGN	0.00547890836990786	IMPLEMENTATION	3.9036290053178635E-4	DEFECT	6.2236981470353E-5	TEST	1.3631114470881222E-6	DOCUMENTATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999978164321497	WITHOUT_CLASSIFICATION	1.6930954708577177E-6	IMPLEMENTATION	1.742342733482522E-7	DESIGN	1.5308763972175337E-7	DEFECT	1.3261908723036107E-7	DOCUMENTATION	3.053137922755612E-8	TEST
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999940478081861	WITHOUT_CLASSIFICATION	5.9334725850158226E-6	DESIGN	1.3327875798683858E-8	DOCUMENTATION	2.3899974702062243E-9	TEST	2.2117865339174297E-9	IMPLEMENTATION	7.895690915482033E-10	DEFECT
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9925814089444109	WITHOUT_CLASSIFICATION	0.004953759664955738	IMPLEMENTATION	0.002367955256739006	DESIGN	7.712727305358766E-5	TEST	1.7442278871712652E-5	DEFECT	2.3065819689531525E-6	DOCUMENTATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999881742881812	WITHOUT_CLASSIFICATION	5.811660300253962E-6	DESIGN	4.998016810770589E-6	DEFECT	4.656396753390624E-7	TEST	2.9560739707564864E-7	DOCUMENTATION	2.547876352535347E-7	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.999817974097441	WITHOUT_CLASSIFICATION	1.5898950989045086E-4	IMPLEMENTATION	1.345713469466858E-5	DESIGN	7.735834605593754E-6	TEST	1.2385932333798445E-6	DEFECT	6.04830134898122E-7	DOCUMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999953779511712	WITHOUT_CLASSIFICATION	2.6637400343262984E-6	IMPLEMENTATION	1.6701285447179986E-6	DEFECT	2.386507332584655E-7	TEST	4.595676996109764E-8	DOCUMENTATION	3.5727464232007525E-9	DESIGN
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999989635567226	WITHOUT_CLASSIFICATION	1.023044785510488E-6	IMPLEMENTATION	7.2393241380166265E-9	DOCUMENTATION	3.2292779890310644E-9	TEST	1.8535031183512761E-9	DESIGN	1.076386828354552E-9	DEFECT
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999877921617776	WITHOUT_CLASSIFICATION	1.1707449970789197E-5	DESIGN	3.8617538887727E-7	DEFECT	7.729545024301348E-8	TEST	3.233210542766534E-8	DOCUMENTATION	4.585307022270781E-9	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9994783190802494	WITHOUT_CLASSIFICATION	4.18529243153191E-4	DESIGN	9.496313653160523E-5	DEFECT	5.950256824209221E-6	IMPLEMENTATION	1.6048690116829534E-6	DOCUMENTATION	6.3341422981543E-7	TEST
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999935564408841	WITHOUT_CLASSIFICATION	2.837474070595962E-6	DESIGN	1.8507312942443368E-6	DEFECT	1.4300102144626543E-6	IMPLEMENTATION	1.921143808783137E-7	DOCUMENTATION	1.332291558203157E-7	TEST
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999984001987033	WITHOUT_CLASSIFICATION	5.954229122322133E-7	DEFECT	5.079576668945904E-7	DESIGN	2.7585685498765435E-7	TEST	2.110767344145335E-7	DOCUMENTATION	9.487127977390995E-9	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9994783190802494	WITHOUT_CLASSIFICATION	4.18529243153191E-4	DESIGN	9.496313653160523E-5	DEFECT	5.950256824209221E-6	IMPLEMENTATION	1.6048690116829534E-6	DOCUMENTATION	6.3341422981543E-7	TEST
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999736023847932	WITHOUT_CLASSIFICATION	2.4686360559499697E-5	DESIGN	1.1295567494507366E-6	DEFECT	4.0378143979556676E-7	IMPLEMENTATION	1.42680213466397E-7	TEST	3.5236244725144394E-8	DOCUMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999365319610807	WITHOUT_CLASSIFICATION	4.348618569293572E-5	DEFECT	1.9167743222737556E-5	DESIGN	5.534964410370075E-7	IMPLEMENTATION	2.3277229030049762E-7	TEST	2.784127231795365E-8	DOCUMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.9999940488680107	WITHOUT_CLASSIFICATION	3.689597512297642E-6	DEFECT	7.126906553634888E-7	DESIGN	6.948020764127831E-7	IMPLEMENTATION	6.449941581792593E-7	DOCUMENTATION	2.0904758703285502E-7	TEST
// ignore it	WITHOUT_CLASSIFICATION	0.9999968569591545	WITHOUT_CLASSIFICATION	1.5432234816758993E-6	DEFECT	8.832336307697387E-7	DESIGN	3.1599068126430726E-7	IMPLEMENTATION	2.961219892715876E-7	DOCUMENTATION	1.0447106247446291E-7	TEST
// construct the cache	WITHOUT_CLASSIFICATION	0.9999982058195792	WITHOUT_CLASSIFICATION	1.5503891252759896E-6	IMPLEMENTATION	9.342650032399159E-8	DESIGN	9.251608780694597E-8	TEST	4.868130480316083E-8	DOCUMENTATION	9.167402617070183E-9	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999768799536273	WITHOUT_CLASSIFICATION	1.5501534476698146E-5	DEFECT	6.986074455755338E-6	DOCUMENTATION	5.506241133268934E-7	DESIGN	5.5417320245125414E-8	IMPLEMENTATION	2.6396006667211395E-8	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999768799536273	WITHOUT_CLASSIFICATION	1.5501534476698146E-5	DEFECT	6.986074455755338E-6	DOCUMENTATION	5.506241133268934E-7	DESIGN	5.5417320245125414E-8	IMPLEMENTATION	2.6396006667211395E-8	TEST
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999734221080042	WITHOUT_CLASSIFICATION	1.0309870350296754E-5	IMPLEMENTATION	6.761407097446305E-6	DESIGN	4.899204221188073E-6	DOCUMENTATION	3.508460486683725E-6	DEFECT	1.0989498401298912E-6	TEST
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.7302509696539162	DESIGN	0.26972527916497047	WITHOUT_CLASSIFICATION	1.5625033754277565E-5	TEST	4.539424790956471E-6	DOCUMENTATION	2.163933845426396E-6	IMPLEMENTATION	1.4227887225788497E-6	DEFECT
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.999967461784557	WITHOUT_CLASSIFICATION	3.014451092723684E-5	IMPLEMENTATION	1.0030510102874124E-6	DOCUMENTATION	7.682055230935016E-7	DEFECT	3.41223472219439E-7	TEST	2.8122451008409727E-7	DESIGN
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999016539454	WITHOUT_CLASSIFICATION	4.9775093685567484E-8	DESIGN	4.411023208748621E-8	DEFECT	3.840019866272245E-9	TEST	3.5401847339367694E-10	DOCUMENTATION	2.666906587629166E-10	IMPLEMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999712993094495	WITHOUT_CLASSIFICATION	2.6305962287066203E-5	DESIGN	1.0515233718168976E-6	DEFECT	7.025141946435094E-7	IMPLEMENTATION	4.438014325792124E-7	DOCUMENTATION	1.968892645478487E-7	TEST
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999227695130195	WITHOUT_CLASSIFICATION	4.744500272785297E-5	IMPLEMENTATION	2.8377895562467002E-5	DESIGN	1.0547846491062621E-6	TEST	2.5606825134594324E-7	DOCUMENTATION	9.673578960572846E-8	DEFECT
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999830594980469	WITHOUT_CLASSIFICATION	6.444530760343443E-6	IMPLEMENTATION	5.734425914132281E-6	DESIGN	2.69533394031671E-6	DEFECT	1.5091465871852796E-6	TEST	5.570647511438371E-7	DOCUMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.9999799837565869	WITHOUT_CLASSIFICATION	1.0276448852137373E-5	DESIGN	8.319939081350614E-6	IMPLEMENTATION	8.176952835657112E-7	DOCUMENTATION	4.3975055767081247E-7	DEFECT	1.6240963829275647E-7	TEST
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999979150017367	WITHOUT_CLASSIFICATION	1.5680961103731027E-6	DESIGN	4.658307399625572E-7	TEST	2.3555152621650037E-8	DOCUMENTATION	1.8228389512351848E-8	IMPLEMENTATION	9.287870833960327E-9	DEFECT
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999996215584507	WITHOUT_CLASSIFICATION	1.7111042802525952E-7	DESIGN	8.404272557687023E-8	IMPLEMENTATION	6.024377445555966E-8	DEFECT	3.563450870560346E-8	TEST	2.7410112593149947E-8	DOCUMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9995799093763262	WITHOUT_CLASSIFICATION	4.1729490604470814E-4	DESIGN	8.723938131371481E-7	IMPLEMENTATION	8.678795469341245E-7	DEFECT	5.560109340318548E-7	TEST	4.994333347749764E-7	DOCUMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9995799093763262	WITHOUT_CLASSIFICATION	4.1729490604470814E-4	DESIGN	8.723938131371481E-7	IMPLEMENTATION	8.678795469341245E-7	DEFECT	5.560109340318548E-7	TEST	4.994333347749764E-7	DOCUMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9389233143656395	WITHOUT_CLASSIFICATION	0.058612025649756455	IMPLEMENTATION	0.0020022616869915023	DEFECT	3.033490720741731E-4	DESIGN	1.466273036158896E-4	DOCUMENTATION	1.242192192235119E-5	TEST
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999592131300318	WITHOUT_CLASSIFICATION	3.33776607683542E-5	IMPLEMENTATION	4.802664188242026E-6	DEFECT	1.2586214726381153E-6	DOCUMENTATION	8.215885867824784E-7	TEST	5.263349522192211E-7	DESIGN
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.999952189993482	WITHOUT_CLASSIFICATION	4.4825039920670866E-5	DESIGN	1.3574277622420202E-6	DEFECT	1.0084671261988367E-6	TEST	4.817515893432228E-7	DOCUMENTATION	1.3732011956970393E-7	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9995799093763262	WITHOUT_CLASSIFICATION	4.1729490604470814E-4	DESIGN	8.723938131371481E-7	IMPLEMENTATION	8.678795469341245E-7	DEFECT	5.560109340318548E-7	TEST	4.994333347749764E-7	DOCUMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9389233143656395	WITHOUT_CLASSIFICATION	0.058612025649756455	IMPLEMENTATION	0.0020022616869915023	DEFECT	3.033490720741731E-4	DESIGN	1.466273036158896E-4	DOCUMENTATION	1.242192192235119E-5	TEST
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9389233143656395	WITHOUT_CLASSIFICATION	0.058612025649756455	IMPLEMENTATION	0.0020022616869915023	DEFECT	3.033490720741731E-4	DESIGN	1.466273036158896E-4	DOCUMENTATION	1.242192192235119E-5	TEST
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999642222981591	WITHOUT_CLASSIFICATION	3.390240317293247E-5	DESIGN	1.5982660146106728E-6	TEST	1.8483162966571242E-7	DEFECT	4.8242534912682204E-8	DOCUMENTATION	4.395848887582257E-8	IMPLEMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999746306666454	WITHOUT_CLASSIFICATION	1.0287236928344738E-5	DESIGN	8.407771586461733E-6	IMPLEMENTATION	5.743810515195979E-6	DEFECT	6.915586374978226E-7	TEST	2.389556871568311E-7	DOCUMENTATION
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999998737700304	WITHOUT_CLASSIFICATION	1.1409353843963045E-7	DEFECT	6.317578424794849E-9	DESIGN	3.194150071180564E-9	IMPLEMENTATION	1.4617315719372146E-9	TEST	1.162971011517172E-9	DOCUMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.999969574214689	WITHOUT_CLASSIFICATION	1.3723147446475697E-5	TEST	1.2774153277670024E-5	IMPLEMENTATION	2.056493981095556E-6	DEFECT	1.3604219470768081E-6	DESIGN	5.11568658613689E-7	DOCUMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9990215256413719	WITHOUT_CLASSIFICATION	7.885289994603384E-4	IMPLEMENTATION	1.4246242414346448E-4	DEFECT	3.399771787730117E-5	DESIGN	7.379695078939685E-6	TEST	6.105522067997607E-6	DOCUMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9990215256413719	WITHOUT_CLASSIFICATION	7.885289994603384E-4	IMPLEMENTATION	1.4246242414346448E-4	DEFECT	3.399771787730117E-5	DESIGN	7.379695078939685E-6	TEST	6.105522067997607E-6	DOCUMENTATION
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999670687286695	WITHOUT_CLASSIFICATION	2.3148929402683838E-5	IMPLEMENTATION	4.940893581019669E-6	DESIGN	3.4456890222874035E-6	DEFECT	8.542195025121835E-7	DOCUMENTATION	5.415398219905637E-7	TEST
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9978474092516572	WITHOUT_CLASSIFICATION	0.002095320473138775	DESIGN	4.067778228310678E-5	DEFECT	9.271032262045972E-6	DOCUMENTATION	6.364846369036397E-6	TEST	9.56614289964337E-7	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.999997139432068	WITHOUT_CLASSIFICATION	1.302322485496493E-6	IMPLEMENTATION	6.008411801590315E-7	DEFECT	4.777769027042035E-7	DESIGN	3.532843107987624E-7	TEST	1.263430529220638E-7	DOCUMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.999997136551074	WITHOUT_CLASSIFICATION	2.7764055029862446E-6	DESIGN	4.393762948663658E-8	DEFECT	2.4403909428449612E-8	IMPLEMENTATION	1.1100128921418207E-8	DOCUMENTATION	7.601755178059589E-9	TEST
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.999997136551074	WITHOUT_CLASSIFICATION	2.7764055029862446E-6	DESIGN	4.393762948663658E-8	DEFECT	2.4403909428449612E-8	IMPLEMENTATION	1.1100128921418207E-8	DOCUMENTATION	7.601755178059589E-9	TEST
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999842030122565	WITHOUT_CLASSIFICATION	1.4827187702896654E-5	DESIGN	4.5887845015858826E-7	DOCUMENTATION	2.430019426983222E-7	IMPLEMENTATION	1.4215041909094113E-7	DEFECT	1.2576922865955398E-7	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9812850722817524	WITHOUT_CLASSIFICATION	0.007002791652713267	DESIGN	0.0064583220256561324	IMPLEMENTATION	0.0027827483829357316	TEST	0.0019696568929113045	DEFECT	5.014087640310532E-4	DOCUMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9869949904447729	WITHOUT_CLASSIFICATION	0.012503098275218406	DESIGN	4.440192874250036E-4	IMPLEMENTATION	2.7199482048377145E-5	DEFECT	2.290913978300556E-5	TEST	7.783370752278809E-6	DOCUMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.999995179461498	WITHOUT_CLASSIFICATION	4.003843105836195E-6	DESIGN	3.657779665182995E-7	DEFECT	2.7493321489949446E-7	IMPLEMENTATION	9.212489429805567E-8	DOCUMENTATION	8.385932051998363E-8	TEST
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999583620014063	WITHOUT_CLASSIFICATION	4.1380631534592376E-5	DESIGN	1.2875537728566825E-7	TEST	1.2063979338217938E-7	DOCUMENTATION	7.550058615927833E-9	DEFECT	4.2182985169118217E-10	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999990102174445	WITHOUT_CLASSIFICATION	6.275461449565386E-7	IMPLEMENTATION	2.2453312778769085E-7	DEFECT	9.550713277504428E-8	DOCUMENTATION	2.3354294153355235E-8	DESIGN	1.8841855802746456E-8	TEST
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9985002980455742	WITHOUT_CLASSIFICATION	0.0012717223982917777	DESIGN	1.735874785848925E-4	DEFECT	4.0626716111514577E-5	IMPLEMENTATION	7.263383731802563E-6	DOCUMENTATION	6.501977705912339E-6	TEST
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9916568590980095	WITHOUT_CLASSIFICATION	0.005554980513572325	IMPLEMENTATION	0.0026347520414428667	DESIGN	1.0888029167298977E-4	DOCUMENTATION	2.5314605521301305E-5	DEFECT	1.921344978099914E-5	TEST
//sort first by role name	WITHOUT_CLASSIFICATION	0.9998331252014805	WITHOUT_CLASSIFICATION	1.3648694976393819E-4	DESIGN	1.6089417987159578E-5	IMPLEMENTATION	9.63877395897284E-6	TEST	2.6798991057545704E-6	DOCUMENTATION	1.9797577037833154E-6	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9869949904447729	WITHOUT_CLASSIFICATION	0.012503098275218406	DESIGN	4.440192874250036E-4	IMPLEMENTATION	2.7199482048377145E-5	DEFECT	2.290913978300556E-5	TEST	7.783370752278809E-6	DOCUMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.9995119440020889	WITHOUT_CLASSIFICATION	2.514219827510065E-4	IMPLEMENTATION	8.012128687117032E-5	DEFECT	5.9208042336252125E-5	DOCUMENTATION	4.9742369502535156E-5	DESIGN	4.7562316450238046E-5	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9986654133675629	WITHOUT_CLASSIFICATION	0.0011281938544500305	IMPLEMENTATION	8.119661858629513E-5	DESIGN	6.95989731976675E-5	DEFECT	3.450919155494094E-5	DOCUMENTATION	2.1087994648257353E-5	TEST
// nothing to do	WITHOUT_CLASSIFICATION	0.9986654133675629	WITHOUT_CLASSIFICATION	0.0011281938544500305	IMPLEMENTATION	8.119661858629513E-5	DESIGN	6.95989731976675E-5	DEFECT	3.450919155494094E-5	DOCUMENTATION	2.1087994648257353E-5	TEST
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9947097432423971	WITHOUT_CLASSIFICATION	0.005270138071288205	DESIGN	1.7467748856247063E-5	IMPLEMENTATION	2.2645753373592204E-6	TEST	1.9720054194927781E-7	DEFECT	1.8916157897270896E-7	DOCUMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9885095595925558	WITHOUT_CLASSIFICATION	0.01124575747916629	DESIGN	1.9771605451111143E-4	TEST	4.46933014544312E-5	IMPLEMENTATION	1.3706720078198017E-6	DOCUMENTATION	9.029003043145374E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9883673488234048	WITHOUT_CLASSIFICATION	0.006543670647035123	IMPLEMENTATION	0.004995732002028615	DESIGN	5.692538184798973E-5	DEFECT	2.625996383902866E-5	TEST	1.0063181844556098E-5	DOCUMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9998802057822855	WITHOUT_CLASSIFICATION	7.235704623988285E-5	DOCUMENTATION	2.795775776422987E-5	IMPLEMENTATION	8.337438347987413E-6	DESIGN	5.9485551329445785E-6	TEST	5.193420229390009E-6	DEFECT
//sort first by entity name	WITHOUT_CLASSIFICATION	0.999596906688658	WITHOUT_CLASSIFICATION	2.1238505973061956E-4	DESIGN	1.426937190385953E-4	IMPLEMENTATION	2.5969865880543777E-5	TEST	1.7623102204870917E-5	DOCUMENTATION	4.421564487389933E-6	DEFECT
//then by id	WITHOUT_CLASSIFICATION	0.9992826819796987	WITHOUT_CLASSIFICATION	5.391577135484002E-4	IMPLEMENTATION	7.651526319431347E-5	DEFECT	4.3503616946632304E-5	DOCUMENTATION	3.957280371502918E-5	TEST	1.8568622897053706E-5	DESIGN
// to be safe...	WITHOUT_CLASSIFICATION	0.9999210506291027	WITHOUT_CLASSIFICATION	3.1156270000976076E-5	DEFECT	3.002517794714064E-5	IMPLEMENTATION	1.0734510570407294E-5	DESIGN	5.396780585490263E-6	DOCUMENTATION	1.6366317931923639E-6	TEST
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999864755703473	WITHOUT_CLASSIFICATION	1.1993287241212424E-5	IMPLEMENTATION	1.0880848914441675E-6	DESIGN	3.5892955774335456E-7	DOCUMENTATION	7.916627563799812E-8	TEST	4.961686709667197E-9	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999999407018916	WITHOUT_CLASSIFICATION	5.825738371530266E-7	DESIGN	5.849558274891238E-9	TEST	3.296827956409395E-9	DEFECT	9.141752227931628E-10	DOCUMENTATION	3.46685350573613E-10	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999999407018916	WITHOUT_CLASSIFICATION	5.825738371530266E-7	DESIGN	5.849558274891238E-9	TEST	3.296827956409395E-9	DEFECT	9.141752227931628E-10	DOCUMENTATION	3.46685350573613E-10	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999071650721638	WITHOUT_CLASSIFICATION	6.431814165245869E-5	DESIGN	1.0317724617154375E-5	DOCUMENTATION	9.59076314889583E-6	IMPLEMENTATION	7.794790088960924E-6	DEFECT	8.135083288030416E-7	TEST
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.999217037251447	WITHOUT_CLASSIFICATION	4.925762501004516E-4	IMPLEMENTATION	2.8407424545961264E-4	TEST	4.597676067631095E-6	DOCUMENTATION	1.4454212434957479E-6	DEFECT	2.691556817339536E-7	DESIGN
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999995418611421	WITHOUT_CLASSIFICATION	2.3821981698416225E-7	DESIGN	6.651265454328261E-8	DEFECT	6.624494502464212E-8	TEST	6.051109268694427E-8	DOCUMENTATION	2.66503486588857E-8	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999997200166014	WITHOUT_CLASSIFICATION	1.6552016634421703E-6	DESIGN	3.4240010000361687E-7	DEFECT	3.3470674011084055E-7	IMPLEMENTATION	2.721176335450861E-7	DOCUMENTATION	1.9540784893419966E-7	TEST
// invokespecial	WITHOUT_CLASSIFICATION	0.9999989259708318	WITHOUT_CLASSIFICATION	5.367099060288126E-7	DOCUMENTATION	2.2962855669702545E-7	IMPLEMENTATION	1.4738229539549167E-7	DEFECT	1.0095450232080678E-7	TEST	5.935390760268241E-8	DESIGN
// return	WITHOUT_CLASSIFICATION	0.999994588225376	WITHOUT_CLASSIFICATION	3.943589956901217E-6	DESIGN	7.801583251945404E-7	IMPLEMENTATION	4.1765915193868523E-7	DEFECT	1.756815254192823E-7	DOCUMENTATION	9.468566449717608E-8	TEST
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999920633577043	WITHOUT_CLASSIFICATION	3.5200160361736527E-6	IMPLEMENTATION	1.953706184627305E-6	DEFECT	1.3630538356843747E-6	DESIGN	6.758141233438931E-7	DOCUMENTATION	4.2405211581476166E-7	TEST
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999722421007938	WITHOUT_CLASSIFICATION	2.0361755365523095E-5	IMPLEMENTATION	3.347109199623516E-6	DESIGN	2.6976037396786745E-6	TEST	1.0999011713275063E-6	DOCUMENTATION	2.5152973009004156E-7	DEFECT
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999976713653267	WITHOUT_CLASSIFICATION	1.0828945435641816E-6	IMPLEMENTATION	5.081354761395389E-7	TEST	3.4719944349148195E-7	DESIGN	2.290452175400453E-7	DEFECT	1.6135999264062024E-7	DOCUMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999974965662359	WITHOUT_CLASSIFICATION	1.3509266934160332E-6	DESIGN	6.526826702996732E-7	IMPLEMENTATION	2.939781494588934E-7	DEFECT	1.1695751583916492E-7	TEST	8.888873532582257E-8	DOCUMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9986511414340608	WITHOUT_CLASSIFICATION	0.0012652046358518328	DEFECT	6.595052950281177E-5	DESIGN	1.2765412177715233E-5	IMPLEMENTATION	2.8215354672381103E-6	TEST	2.116452939566569E-6	DOCUMENTATION
// new	WITHOUT_CLASSIFICATION	0.9998895886402024	WITHOUT_CLASSIFICATION	6.330335361721754E-5	DESIGN	2.6818085295478162E-5	IMPLEMENTATION	9.985249991878244E-6	DOCUMENTATION	6.428172246120844E-6	TEST	3.876498646859911E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999937155187438	WITHOUT_CLASSIFICATION	3.204788004596425E-6	DESIGN	1.3157634913253009E-6	DEFECT	8.86787772564312E-7	DOCUMENTATION	4.449277636698188E-7	IMPLEMENTATION	4.3221422398305315E-7	TEST
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999915443217199	WITHOUT_CLASSIFICATION	4.607639628229062E-6	IMPLEMENTATION	1.621911397776732E-6	DEFECT	8.023627880504145E-7	DESIGN	7.196001659402297E-7	TEST	7.041643001250864E-7	DOCUMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999941216791078	WITHOUT_CLASSIFICATION	4.828342150145026E-6	DESIGN	5.09742758722184E-7	DEFECT	3.819593789048514E-7	DOCUMENTATION	1.3064404864030032E-7	TEST	2.7632555756254885E-8	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.999997722077365	WITHOUT_CLASSIFICATION	1.3792528094331175E-6	DEFECT	2.9471213095794404E-7	DESIGN	2.469500645659819E-7	DOCUMENTATION	2.461810774154195E-7	IMPLEMENTATION	1.1082655249914214E-7	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.999997722077365	WITHOUT_CLASSIFICATION	1.3792528094331175E-6	DEFECT	2.9471213095794404E-7	DESIGN	2.469500645659819E-7	DOCUMENTATION	2.461810774154195E-7	IMPLEMENTATION	1.1082655249914214E-7	TEST
// aastore // args	WITHOUT_CLASSIFICATION	0.9999994701002279	WITHOUT_CLASSIFICATION	2.1623533209690757E-7	DESIGN	1.8625483147979148E-7	IMPLEMENTATION	5.350483932789821E-8	TEST	4.94612195347474E-8	DEFECT	2.4443549672495676E-8	DOCUMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999877795964247	WITHOUT_CLASSIFICATION	5.5922381168605E-6	DESIGN	5.0931142206512674E-6	TEST	8.003746370767032E-7	DEFECT	5.811148533142591E-7	DOCUMENTATION	1.5356174735519288E-7	IMPLEMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999968937777097	WITHOUT_CLASSIFICATION	1.9097317324429275E-6	DESIGN	1.1252163211083155E-6	DEFECT	4.244524669248741E-8	TEST	1.9727988503891734E-8	IMPLEMENTATION	9.101001678870894E-9	DOCUMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999984685506464	WITHOUT_CLASSIFICATION	8.625846725660033E-7	DEFECT	3.010717133278276E-7	TEST	1.609425186463325E-7	IMPLEMENTATION	1.209539138689162E-7	DESIGN	8.589653515322318E-8	DOCUMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999856683554075	WITHOUT_CLASSIFICATION	1.1545454508221575E-5	IMPLEMENTATION	1.165923891910529E-6	DOCUMENTATION	5.882555737928072E-7	TEST	5.367493214568148E-7	DEFECT	4.952612971886829E-7	DESIGN
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.999640563298035	WITHOUT_CLASSIFICATION	2.727491758299832E-4	DESIGN	6.456307788042577E-5	IMPLEMENTATION	1.489769186373061E-5	TEST	3.860626152708541E-6	DOCUMENTATION	3.3661302382083198E-6	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999966334407162	WITHOUT_CLASSIFICATION	1.3493319164685182E-6	IMPLEMENTATION	9.953224500739364E-7	DOCUMENTATION	3.9682587719243955E-7	DESIGN	3.807966093559425E-7	DEFECT	2.4428243073044806E-7	TEST
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9985540549049139	WITHOUT_CLASSIFICATION	0.0012346983815737852	DESIGN	1.9600796040626926E-4	DEFECT	7.348655947188208E-6	IMPLEMENTATION	5.403848737611617E-6	TEST	2.4862484211400516E-6	DOCUMENTATION
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999926234804182	WITHOUT_CLASSIFICATION	1.9142132267199066E-6	DOCUMENTATION	1.8419021761612458E-6	IMPLEMENTATION	1.4001913755410267E-6	DESIGN	1.3564220140991393E-6	DEFECT	8.637907893865343E-7	TEST
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999889927744695	WITHOUT_CLASSIFICATION	6.156810164118167E-6	IMPLEMENTATION	1.8448438210506942E-6	DEFECT	1.5674852534595448E-6	DESIGN	8.104494618371537E-7	DOCUMENTATION	6.276368299135422E-7	TEST
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999990459386436	WITHOUT_CLASSIFICATION	7.646245015723519E-7	IMPLEMENTATION	6.697711042822597E-8	DOCUMENTATION	4.4848781162708617E-8	TEST	3.973402681988811E-8	DEFECT	3.787693644242048E-8	DESIGN
// iconst_i	WITHOUT_CLASSIFICATION	0.9999688053678374	WITHOUT_CLASSIFICATION	1.735572233216038E-5	DESIGN	4.946706636331488E-6	DEFECT	4.3687370638386715E-6	IMPLEMENTATION	2.6781124342662104E-6	DOCUMENTATION	1.8453536959928963E-6	TEST
// aaload	WITHOUT_CLASSIFICATION	0.9999947242471001	WITHOUT_CLASSIFICATION	2.2590149793900457E-6	DESIGN	1.5782950475509004E-6	IMPLEMENTATION	6.359038170069616E-7	DEFECT	4.2059752547038436E-7	DOCUMENTATION	3.81941530432682E-7	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999947908202235	WITHOUT_CLASSIFICATION	3.7451081600978957E-6	IMPLEMENTATION	6.874139053608929E-7	DESIGN	3.6471085586200734E-7	DOCUMENTATION	3.4399077735980537E-7	TEST	6.795607792070679E-8	DEFECT
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.999999816391752	WITHOUT_CLASSIFICATION	1.0880340051447941E-7	DESIGN	3.855292718379781E-8	DOCUMENTATION	2.1720739437360267E-8	IMPLEMENTATION	8.569837136462018E-9	DEFECT	5.961343819472873E-9	TEST
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.999983822602562	WITHOUT_CLASSIFICATION	1.2701682650311505E-5	DESIGN	1.743552834236564E-6	IMPLEMENTATION	1.6048527928592047E-6	DOCUMENTATION	9.780961693956378E-8	TEST	2.9499543644482256E-8	DEFECT
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999825904159512	WITHOUT_CLASSIFICATION	1.2858090949203033E-5	IMPLEMENTATION	1.9180396404535644E-6	DOCUMENTATION	1.5897857609463946E-6	DEFECT	5.71556022466106E-7	DESIGN	4.7211167581491547E-7	TEST
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.6751278483557803	WITHOUT_CLASSIFICATION	0.3242968685884035	DESIGN	4.405895851716226E-4	DEFECT	8.348689708563795E-5	IMPLEMENTATION	2.741451518174738E-5	DOCUMENTATION	2.3792058377118195E-5	TEST
// register in exception table	WITHOUT_CLASSIFICATION	0.9999878904158992	WITHOUT_CLASSIFICATION	1.1937975803001926E-5	DESIGN	8.293989809638622E-8	TEST	6.296065068839594E-8	DEFECT	1.5115006017647076E-8	IMPLEMENTATION	1.0592742898717442E-8	DOCUMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999997200166014	WITHOUT_CLASSIFICATION	1.6552016634421703E-6	DESIGN	3.4240010000361687E-7	DEFECT	3.3470674011084055E-7	IMPLEMENTATION	2.721176335450861E-7	DOCUMENTATION	1.9540784893419966E-7	TEST
// aload_0	WITHOUT_CLASSIFICATION	0.999997200166014	WITHOUT_CLASSIFICATION	1.6552016634421703E-6	DESIGN	3.4240010000361687E-7	DEFECT	3.3470674011084055E-7	IMPLEMENTATION	2.721176335450861E-7	DOCUMENTATION	1.9540784893419966E-7	TEST
// return	WITHOUT_CLASSIFICATION	0.999994588225376	WITHOUT_CLASSIFICATION	3.943589956901217E-6	DESIGN	7.801583251945404E-7	IMPLEMENTATION	4.1765915193868523E-7	DEFECT	1.756815254192823E-7	DOCUMENTATION	9.468566449717608E-8	TEST
// return	WITHOUT_CLASSIFICATION	0.999994588225376	WITHOUT_CLASSIFICATION	3.943589956901217E-6	DESIGN	7.801583251945404E-7	IMPLEMENTATION	4.1765915193868523E-7	DEFECT	1.756815254192823E-7	DOCUMENTATION	9.468566449717608E-8	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999937155187438	WITHOUT_CLASSIFICATION	3.204788004596425E-6	DESIGN	1.3157634913253009E-6	DEFECT	8.86787772564312E-7	DOCUMENTATION	4.449277636698188E-7	IMPLEMENTATION	4.3221422398305315E-7	TEST
// invokevirtual	WITHOUT_CLASSIFICATION	0.999997722077365	WITHOUT_CLASSIFICATION	1.3792528094331175E-6	DEFECT	2.9471213095794404E-7	DESIGN	2.469500645659819E-7	DOCUMENTATION	2.461810774154195E-7	IMPLEMENTATION	1.1082655249914214E-7	TEST
// checkcast	WITHOUT_CLASSIFICATION	0.9999947908202235	WITHOUT_CLASSIFICATION	3.7451081600978957E-6	IMPLEMENTATION	6.874139053608929E-7	DESIGN	3.6471085586200734E-7	DOCUMENTATION	3.4399077735980537E-7	TEST	6.795607792070679E-8	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999994566376994	WITHOUT_CLASSIFICATION	3.874342861197409E-7	DESIGN	9.81524209585602E-8	DEFECT	2.2006419409922965E-8	TEST	1.8801340116296783E-8	IMPLEMENTATION	1.696783410741391E-8	DOCUMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999996289729619	WITHOUT_CLASSIFICATION	2.5587727134297977E-7	DEFECT	8.149739571927472E-8	DESIGN	1.595776738791322E-8	DOCUMENTATION	1.432891294537049E-8	TEST	3.3656907848554426E-9	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999704820410352	WITHOUT_CLASSIFICATION	1.4861506370045672E-5	DEFECT	1.208563603833012E-5	DESIGN	1.1678990349841805E-6	DOCUMENTATION	9.085579513079536E-7	TEST	4.943595701433887E-7	IMPLEMENTATION
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999955744850493	WITHOUT_CLASSIFICATION	3.454791874852556E-6	DEFECT	6.53569235444587E-7	DESIGN	2.2648217073442975E-7	DOCUMENTATION	4.918422065681066E-8	TEST	4.148744898776654E-8	IMPLEMENTATION
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999949093903376	WITHOUT_CLASSIFICATION	2.4408970121995025E-6	DEFECT	9.228559097107784E-7	TEST	7.231028566778724E-7	DESIGN	6.35032966547267E-7	IMPLEMENTATION	3.6872091715572354E-7	DOCUMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999955357164245	WITHOUT_CLASSIFICATION	3.070564847648304E-6	DEFECT	5.316755139999557E-7	DOCUMENTATION	3.193465750824991E-7	IMPLEMENTATION	2.9053791907856064E-7	TEST	2.521587195586237E-7	DESIGN
// athrow	WITHOUT_CLASSIFICATION	0.9999951021318171	WITHOUT_CLASSIFICATION	1.9451428527439425E-6	DEFECT	1.1441517860669976E-6	IMPLEMENTATION	6.793601213455272E-7	DESIGN	6.758633074925425E-7	TEST	4.533501153563974E-7	DOCUMENTATION
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9997527644488741	WITHOUT_CLASSIFICATION	1.9174760260837014E-4	DESIGN	3.140799009103981E-5	DEFECT	1.260167819879409E-5	IMPLEMENTATION	8.33792199795534E-6	DOCUMENTATION	3.1403582297283793E-6	TEST
//swallow	WITHOUT_CLASSIFICATION	0.999873178786749	WITHOUT_CLASSIFICATION	5.781638262344066E-5	DESIGN	3.091192800595406E-5	DEFECT	1.954356146662646E-5	IMPLEMENTATION	9.3766134178492E-6	DOCUMENTATION	9.172727737278167E-6	TEST
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999945841804089	WITHOUT_CLASSIFICATION	3.466821999839287E-6	DESIGN	9.368194210201577E-7	TEST	7.6911445427522E-7	IMPLEMENTATION	2.2864435399656574E-7	DOCUMENTATION	1.441936192013379E-8	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.999988141417052	WITHOUT_CLASSIFICATION	6.881569985976822E-6	DESIGN	2.0166582190687666E-6	TEST	1.6942875125480587E-6	DOCUMENTATION	1.0469487558224409E-6	IMPLEMENTATION	2.1911847474152492E-7	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.999988141417052	WITHOUT_CLASSIFICATION	6.881569985976822E-6	DESIGN	2.0166582190687666E-6	TEST	1.6942875125480587E-6	DOCUMENTATION	1.0469487558224409E-6	IMPLEMENTATION	2.1911847474152492E-7	DEFECT
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999929929815464	WITHOUT_CLASSIFICATION	6.910144696097215E-6	DESIGN	3.782370452460358E-8	DEFECT	2.9255138906240134E-8	IMPLEMENTATION	2.0003235929528486E-8	TEST	9.791678126359292E-9	DOCUMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999923519026915	WITHOUT_CLASSIFICATION	7.4891540074533955E-6	DESIGN	1.3447017794379793E-7	DEFECT	1.0446827347312849E-8	DOCUMENTATION	8.303224612844999E-9	IMPLEMENTATION	5.72307111840797E-9	TEST
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9998832566681265	WITHOUT_CLASSIFICATION	9.224147621338279E-5	DESIGN	1.2579779233323201E-5	IMPLEMENTATION	8.095539994311386E-6	TEST	2.2318848641348992E-6	DEFECT	1.5946515683748828E-6	DOCUMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.999971221844861	WITHOUT_CLASSIFICATION	1.1366013619209416E-5	IMPLEMENTATION	1.1113633046755145E-5	DESIGN	5.225332616636325E-6	DEFECT	5.973257554096684E-7	DOCUMENTATION	4.75850100955111E-7	TEST
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999990407078667	WITHOUT_CLASSIFICATION	8.321863226453907E-7	DESIGN	7.777128014545479E-8	IMPLEMENTATION	3.287656241272055E-8	DEFECT	8.957225716044896E-9	DOCUMENTATION	7.500742473229738E-9	TEST
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999997872931548	WITHOUT_CLASSIFICATION	1.627665868469559E-7	IMPLEMENTATION	2.0333320597313632E-8	DEFECT	1.7726799105491812E-8	DOCUMENTATION	9.969404193141463E-9	DESIGN	1.9107344424515934E-9	TEST
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999992648758957	WITHOUT_CLASSIFICATION	6.15747405515918E-7	DESIGN	5.04980169069752E-8	DEFECT	4.83094972031937E-8	TEST	1.3972269956560753E-8	DOCUMENTATION	6.596914568879509E-9	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999976627720558	WITHOUT_CLASSIFICATION	2.208927043088429E-6	DESIGN	9.040672782653174E-8	DEFECT	1.544541127676283E-8	TEST	1.4147328652127898E-8	DOCUMENTATION	8.301433487353492E-9	IMPLEMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999924092978149	WITHOUT_CLASSIFICATION	5.2817191497428975E-6	DEFECT	8.448166669150897E-7	IMPLEMENTATION	7.677535737279669E-7	DESIGN	4.389114149845074E-7	DOCUMENTATION	2.5750137981992477E-7	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999994538527581	WITHOUT_CLASSIFICATION	4.792187237980794E-7	DESIGN	2.731786293063484E-8	DOCUMENTATION	1.965709331957547E-8	DEFECT	1.0798537336067403E-8	IMPLEMENTATION	9.155024520950446E-9	TEST
// *return // each type	WITHOUT_CLASSIFICATION	0.9999994538527581	WITHOUT_CLASSIFICATION	4.792187237980794E-7	DESIGN	2.731786293063484E-8	DOCUMENTATION	1.965709331957547E-8	DEFECT	1.0798537336067403E-8	IMPLEMENTATION	9.155024520950446E-9	TEST
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999997929349206	WITHOUT_CLASSIFICATION	1.3286381588447922E-7	DESIGN	2.2208462490282795E-8	DOCUMENTATION	2.0483618000544994E-8	TEST	2.040290848730772E-8	IMPLEMENTATION	1.1106274499439896E-8	DEFECT
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999925360101874	WITHOUT_CLASSIFICATION	6.3827704956510764E-6	DESIGN	3.5234608475109623E-7	DOCUMENTATION	2.7986454666969966E-7	TEST	2.720526955679306E-7	IMPLEMENTATION	1.7695598996458196E-7	DEFECT
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999996910937808	WITHOUT_CLASSIFICATION	1.4080128253829103E-7	DESIGN	6.352672141150813E-8	DOCUMENTATION	5.6877047707043864E-8	IMPLEMENTATION	2.6512369880294232E-8	TEST	2.1188797736811948E-8	DEFECT
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999989521089803	WITHOUT_CLASSIFICATION	9.87719897791405E-7	DESIGN	3.02765947195584E-8	DEFECT	2.2935055952007617E-8	DOCUMENTATION	5.789267766315027E-9	TEST	1.1702034309335795E-9	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.9999910438767933	WITHOUT_CLASSIFICATION	3.6939481420430736E-6	DEFECT	2.4457902548632493E-6	DESIGN	1.6208762759929723E-6	DOCUMENTATION	9.325039206656514E-7	TEST	2.630046131754358E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.999994588225376	WITHOUT_CLASSIFICATION	3.943589956901217E-6	DESIGN	7.801583251945404E-7	IMPLEMENTATION	4.1765915193868523E-7	DEFECT	1.756815254192823E-7	DOCUMENTATION	9.468566449717608E-8	TEST
// dup	WITHOUT_CLASSIFICATION	0.9999937155187438	WITHOUT_CLASSIFICATION	3.204788004596425E-6	DESIGN	1.3157634913253009E-6	DEFECT	8.86787772564312E-7	DOCUMENTATION	4.449277636698188E-7	IMPLEMENTATION	4.3221422398305315E-7	TEST
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999941216791078	WITHOUT_CLASSIFICATION	4.828342150145026E-6	DESIGN	5.09742758722184E-7	DEFECT	3.819593789048514E-7	DOCUMENTATION	1.3064404864030032E-7	TEST	2.7632555756254885E-8	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999947908202235	WITHOUT_CLASSIFICATION	3.7451081600978957E-6	IMPLEMENTATION	6.874139053608929E-7	DESIGN	3.6471085586200734E-7	DOCUMENTATION	3.4399077735980537E-7	TEST	6.795607792070679E-8	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999947908202235	WITHOUT_CLASSIFICATION	3.7451081600978957E-6	IMPLEMENTATION	6.874139053608929E-7	DESIGN	3.6471085586200734E-7	DOCUMENTATION	3.4399077735980537E-7	TEST	6.795607792070679E-8	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999967063494845	WITHOUT_CLASSIFICATION	3.160931598960286E-6	DESIGN	9.037130038919433E-8	DEFECT	1.6251034547410694E-8	DOCUMENTATION	1.512697905228629E-8	TEST	1.0969602767208196E-8	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999967063494845	WITHOUT_CLASSIFICATION	3.160931598960286E-6	DESIGN	9.037130038919433E-8	DEFECT	1.6251034547410694E-8	DOCUMENTATION	1.512697905228629E-8	TEST	1.0969602767208196E-8	IMPLEMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999866461402742	WITHOUT_CLASSIFICATION	9.279551130222797E-6	IMPLEMENTATION	2.4980705071696134E-6	DESIGN	9.085385239814011E-7	DEFECT	4.414233034609264E-7	DOCUMENTATION	2.2627626089368074E-7	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999976000099624	WITHOUT_CLASSIFICATION	8.318332806230087E-7	DESIGN	6.520171939035477E-7	IMPLEMENTATION	4.6918902374414485E-7	DEFECT	2.3345120548982927E-7	DOCUMENTATION	2.134993337325386E-7	TEST
// *load_1	WITHOUT_CLASSIFICATION	0.9999976000099624	WITHOUT_CLASSIFICATION	8.318332806230087E-7	DESIGN	6.520171939035477E-7	IMPLEMENTATION	4.6918902374414485E-7	DEFECT	2.3345120548982927E-7	DOCUMENTATION	2.134993337325386E-7	TEST
// putfield	WITHOUT_CLASSIFICATION	0.9999984208853788	WITHOUT_CLASSIFICATION	9.87364761906321E-7	IMPLEMENTATION	2.329058197501982E-7	DESIGN	2.2208629138648135E-7	DEFECT	8.160160422268603E-8	DOCUMENTATION	5.515614388822322E-8	TEST
// return ;	WITHOUT_CLASSIFICATION	0.9999889385419015	WITHOUT_CLASSIFICATION	7.927581731636993E-6	DESIGN	1.6516692972329066E-6	IMPLEMENTATION	1.0718493502361688E-6	DEFECT	2.572127620425629E-7	DOCUMENTATION	1.5314495735520617E-7	TEST
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999651327900777	WITHOUT_CLASSIFICATION	3.393666884662366E-5	DESIGN	3.9982766344279467E-7	DEFECT	2.634795433823859E-7	TEST	1.6511593595724693E-7	DOCUMENTATION	1.0211793291762268E-7	IMPLEMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999985449823079	WITHOUT_CLASSIFICATION	8.254699821532956E-7	DESIGN	5.652987861078501E-7	DEFECT	3.271183729043553E-8	TEST	2.7625335222078382E-8	DOCUMENTATION	3.911751305238106E-9	IMPLEMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.99999863673682	WITHOUT_CLASSIFICATION	7.014808435132511E-7	DESIGN	5.555328821299465E-7	DEFECT	4.864608552065033E-8	DOCUMENTATION	4.3344636385509105E-8	TEST	1.4258732633962269E-8	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999921268532855	WITHOUT_CLASSIFICATION	6.675400510635507E-6	DESIGN	5.601701692231146E-7	DOCUMENTATION	5.420252238959087E-7	IMPLEMENTATION	6.982487279613943E-8	TEST	2.5725937856308012E-8	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999921268532855	WITHOUT_CLASSIFICATION	6.675400510635507E-6	DESIGN	5.601701692231146E-7	DOCUMENTATION	5.420252238959087E-7	IMPLEMENTATION	6.982487279613943E-8	TEST	2.5725937856308012E-8	DEFECT
// not array	WITHOUT_CLASSIFICATION	0.9995769652782448	WITHOUT_CLASSIFICATION	2.3827189337217539E-4	IMPLEMENTATION	1.2058534157375628E-4	DEFECT	5.192973496376294E-5	DESIGN	7.011591009255829E-6	TEST	5.236160836378226E-6	DOCUMENTATION
// array of reference type	WITHOUT_CLASSIFICATION	0.9999987670030676	WITHOUT_CLASSIFICATION	7.458180305532672E-7	DESIGN	3.061106419370357E-7	DOCUMENTATION	1.3785583764346674E-7	IMPLEMENTATION	2.611862300191565E-8	TEST	1.7093799431453417E-8	DEFECT
// boolean	WITHOUT_CLASSIFICATION	0.9999962467883201	WITHOUT_CLASSIFICATION	1.9187755893043123E-6	DESIGN	6.340474681479773E-7	TEST	4.1930718987844816E-7	DEFECT	4.18156781902578E-7	DOCUMENTATION	3.629246506757352E-7	IMPLEMENTATION
// byte	WITHOUT_CLASSIFICATION	0.9999845533583087	WITHOUT_CLASSIFICATION	1.060976855156059E-5	IMPLEMENTATION	1.2773411364664256E-6	DESIGN	1.2067583352725635E-6	TEST	1.1998984389830004E-6	DOCUMENTATION	1.15287522906467E-6	DEFECT
// char	WITHOUT_CLASSIFICATION	0.9999997761839556	WITHOUT_CLASSIFICATION	1.1203359153386328E-7	DESIGN	3.89737588253933E-8	TEST	2.7385026125215688E-8	DOCUMENTATION	2.550619056504887E-8	IMPLEMENTATION	1.9917477301470648E-8	DEFECT
// short	WITHOUT_CLASSIFICATION	0.9999916291513002	WITHOUT_CLASSIFICATION	4.681728092778934E-6	DESIGN	1.576308440043956E-6	DEFECT	9.817602948161108E-7	TEST	6.344345743025097E-7	DOCUMENTATION	4.966172978314214E-7	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999997210384332	WITHOUT_CLASSIFICATION	1.5980641488890106E-7	DESIGN	5.901369025985461E-8	DEFECT	2.895476308176656E-8	DOCUMENTATION	2.2099801630389046E-8	TEST	9.086897010423568E-9	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999972064067265	WITHOUT_CLASSIFICATION	1.645439180191372E-6	DEFECT	5.434060712918945E-7	DESIGN	2.4095245433359684E-7	TEST	2.2046960264268908E-7	DOCUMENTATION	1.4332596506473743E-7	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999972064067265	WITHOUT_CLASSIFICATION	1.645439180191372E-6	DEFECT	5.434060712918945E-7	DESIGN	2.4095245433359684E-7	TEST	2.2046960264268908E-7	DOCUMENTATION	1.4332596506473743E-7	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999461285862795	WITHOUT_CLASSIFICATION	3.219207281928359E-5	DEFECT	1.6005915255524402E-5	DESIGN	2.146299858527595E-6	DOCUMENTATION	1.9403827783688452E-6	IMPLEMENTATION	1.586743008735004E-6	TEST
// long	WITHOUT_CLASSIFICATION	0.9999461285862795	WITHOUT_CLASSIFICATION	3.219207281928359E-5	DEFECT	1.6005915255524402E-5	DESIGN	2.146299858527595E-6	DOCUMENTATION	1.9403827783688452E-6	IMPLEMENTATION	1.586743008735004E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999924732070267	WITHOUT_CLASSIFICATION	5.066395006411706E-6	IMPLEMENTATION	1.128868911944766E-6	DESIGN	8.067837397404906E-7	DOCUMENTATION	3.1421037871160064E-7	TEST	2.1053493644471422E-7	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999924732070267	WITHOUT_CLASSIFICATION	5.066395006411706E-6	IMPLEMENTATION	1.128868911944766E-6	DESIGN	8.067837397404906E-7	DOCUMENTATION	3.1421037871160064E-7	TEST	2.1053493644471422E-7	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999933321809682	WITHOUT_CLASSIFICATION	5.5224662272385936E-6	DESIGN	3.416804716823814E-7	IMPLEMENTATION	3.286555859059035E-7	TEST	3.1622798077647605E-7	DEFECT	1.587887661184624E-7	DOCUMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999933321809682	WITHOUT_CLASSIFICATION	5.5224662272385936E-6	DESIGN	3.416804716823814E-7	IMPLEMENTATION	3.286555859059035E-7	TEST	3.1622798077647605E-7	DEFECT	1.587887661184624E-7	DOCUMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999921268532855	WITHOUT_CLASSIFICATION	6.675400510635507E-6	DESIGN	5.601701692231146E-7	DOCUMENTATION	5.420252238959087E-7	IMPLEMENTATION	6.982487279613943E-8	TEST	2.5725937856308012E-8	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999997210384332	WITHOUT_CLASSIFICATION	1.5980641488890106E-7	DESIGN	5.901369025985461E-8	DEFECT	2.895476308176656E-8	DOCUMENTATION	2.2099801630389046E-8	TEST	9.086897010423568E-9	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999972064067265	WITHOUT_CLASSIFICATION	1.645439180191372E-6	DEFECT	5.434060712918945E-7	DESIGN	2.4095245433359684E-7	TEST	2.2046960264268908E-7	DOCUMENTATION	1.4332596506473743E-7	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999972064067265	WITHOUT_CLASSIFICATION	1.645439180191372E-6	DEFECT	5.434060712918945E-7	DESIGN	2.4095245433359684E-7	TEST	2.2046960264268908E-7	DOCUMENTATION	1.4332596506473743E-7	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999461285862795	WITHOUT_CLASSIFICATION	3.219207281928359E-5	DEFECT	1.6005915255524402E-5	DESIGN	2.146299858527595E-6	DOCUMENTATION	1.9403827783688452E-6	IMPLEMENTATION	1.586743008735004E-6	TEST
// bad type	WITHOUT_CLASSIFICATION	0.9999924732070267	WITHOUT_CLASSIFICATION	5.066395006411706E-6	IMPLEMENTATION	1.128868911944766E-6	DESIGN	8.067837397404906E-7	DOCUMENTATION	3.1421037871160064E-7	TEST	2.1053493644471422E-7	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999924732070267	WITHOUT_CLASSIFICATION	5.066395006411706E-6	IMPLEMENTATION	1.128868911944766E-6	DESIGN	8.067837397404906E-7	DOCUMENTATION	3.1421037871160064E-7	TEST	2.1053493644471422E-7	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999933321809682	WITHOUT_CLASSIFICATION	5.5224662272385936E-6	DESIGN	3.416804716823814E-7	IMPLEMENTATION	3.286555859059035E-7	TEST	3.1622798077647605E-7	DEFECT	1.587887661184624E-7	DOCUMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999906170172752	WITHOUT_CLASSIFICATION	7.203855378821335E-6	IMPLEMENTATION	1.4276260917710257E-6	DESIGN	4.267848691652664E-7	DOCUMENTATION	2.931782198586342E-7	TEST	3.153816508056102E-8	DEFECT
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999484701405436	WITHOUT_CLASSIFICATION	4.424584880023991E-5	DESIGN	2.6503729650196657E-6	IMPLEMENTATION	2.3115664314678353E-6	DEFECT	1.6073093379805994E-6	DOCUMENTATION	7.147619217785945E-7	TEST
//decrement the lock	WITHOUT_CLASSIFICATION	0.9994996520053575	WITHOUT_CLASSIFICATION	3.233164637113632E-4	IMPLEMENTATION	8.477895727103002E-5	DESIGN	4.463329097239221E-5	DOCUMENTATION	2.6611188329039754E-5	DEFECT	2.1008094358569535E-5	TEST
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9998918078091396	WITHOUT_CLASSIFICATION	5.387630401004645E-5	DESIGN	1.8970920929284237E-5	DEFECT	1.763255421962625E-5	IMPLEMENTATION	1.645597028904097E-5	TEST	1.2564414125052632E-6	DOCUMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999885174322456	WITHOUT_CLASSIFICATION	1.0107941091479327E-5	IMPLEMENTATION	5.446266307580857E-7	DEFECT	4.183085259043613E-7	TEST	3.374224059930305E-7	DOCUMENTATION	7.426910021667404E-8	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9999719630115587	WITHOUT_CLASSIFICATION	1.0398815284397116E-5	IMPLEMENTATION	8.365182041920618E-6	DEFECT	4.8121476228914524E-6	DESIGN	3.100274853260938E-6	DOCUMENTATION	1.360568638862554E-6	TEST
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9985177663888406	WITHOUT_CLASSIFICATION	0.0010903042833713377	DESIGN	2.2236187355779613E-4	DEFECT	1.606314895822464E-4	IMPLEMENTATION	6.8646656193494735E-6	DOCUMENTATION	2.071299028674999E-6	TEST
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9073590217840568	WITHOUT_CLASSIFICATION	0.0924290308606989	DEFECT	1.9240477389530921E-4	DESIGN	1.762167388933359E-5	TEST	1.796118293124549E-6	IMPLEMENTATION	1.247891664695479E-7	DOCUMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9956497338626444	WITHOUT_CLASSIFICATION	0.004034490253644974	DEFECT	2.838969742300248E-4	IMPLEMENTATION	1.9104234872376094E-5	DESIGN	7.668642110972232E-6	TEST	5.106032497251963E-6	DOCUMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999996370226485	WITHOUT_CLASSIFICATION	2.1486303673552774E-7	DEFECT	6.461103692260719E-8	IMPLEMENTATION	4.6268808275658694E-8	TEST	3.3501507410313966E-8	DESIGN	3.7329622648780136E-9	DOCUMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999489556136182	WITHOUT_CLASSIFICATION	4.9063792072491174E-5	IMPLEMENTATION	1.0554068536584551E-6	DEFECT	5.680709053797066E-7	DESIGN	1.8395655551822938E-7	DOCUMENTATION	1.7315999482987018E-7	TEST
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999995419923268	WITHOUT_CLASSIFICATION	2.772931826343206E-7	IMPLEMENTATION	1.0873809931362851E-7	DESIGN	4.410004468078555E-8	TEST	2.0031908058561357E-8	DEFECT	7.844438524826937E-9	DOCUMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999734221080042	WITHOUT_CLASSIFICATION	1.0309870350296754E-5	IMPLEMENTATION	6.761407097446305E-6	DESIGN	4.899204221188073E-6	DOCUMENTATION	3.508460486683725E-6	DEFECT	1.0989498401298912E-6	TEST
// noop	WITHOUT_CLASSIFICATION	0.9999719630115587	WITHOUT_CLASSIFICATION	1.0398815284397116E-5	IMPLEMENTATION	8.365182041920618E-6	DEFECT	4.8121476228914524E-6	DESIGN	3.100274853260938E-6	DOCUMENTATION	1.360568638862554E-6	TEST
//noop	WITHOUT_CLASSIFICATION	0.9998137060810482	WITHOUT_CLASSIFICATION	7.965868862622931E-5	DEFECT	4.414034366580625E-5	DESIGN	3.340589576784113E-5	DOCUMENTATION	1.4904462602246043E-5	IMPLEMENTATION	1.418452828954555E-5	TEST
//noop	WITHOUT_CLASSIFICATION	0.9998137060810482	WITHOUT_CLASSIFICATION	7.965868862622931E-5	DEFECT	4.414034366580625E-5	DESIGN	3.340589576784113E-5	DOCUMENTATION	1.4904462602246043E-5	IMPLEMENTATION	1.418452828954555E-5	TEST
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9998330114560172	WITHOUT_CLASSIFICATION	1.6662549627422026E-4	DESIGN	2.1651456887150346E-7	DEFECT	1.0448978489258853E-7	TEST	2.539295270733329E-8	DOCUMENTATION	1.665040217080611E-8	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999991192736953	WITHOUT_CLASSIFICATION	3.640750605265799E-7	IMPLEMENTATION	2.470656035052003E-7	DESIGN	1.1608868139053988E-7	TEST	8.920937698197544E-8	DOCUMENTATION	6.428758247791182E-8	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999991192736953	WITHOUT_CLASSIFICATION	3.640750605265799E-7	IMPLEMENTATION	2.470656035052003E-7	DESIGN	1.1608868139053988E-7	TEST	8.920937698197544E-8	DOCUMENTATION	6.428758247791182E-8	DEFECT
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9990207740914375	WITHOUT_CLASSIFICATION	9.354966005463793E-4	DESIGN	3.402460619215257E-5	DEFECT	7.190018967923886E-6	TEST	2.2328160012929323E-6	DOCUMENTATION	2.818668546767781E-7	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999795305311929	WITHOUT_CLASSIFICATION	1.4898651095971446E-5	DEFECT	5.2270518390703366E-6	DESIGN	2.580861203361977E-7	TEST	6.0406127773257E-8	DOCUMENTATION	2.5273623884832994E-8	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999990981712192	WITHOUT_CLASSIFICATION	4.267277711990038E-7	DEFECT	3.382746417146804E-7	IMPLEMENTATION	1.0844891904400969E-7	DESIGN	1.9260904908799168E-8	TEST	9.116543877040768E-9	DOCUMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999762690582286	WITHOUT_CLASSIFICATION	1.545785824408928E-5	DESIGN	4.3074987471733254E-6	DEFECT	3.3611954725306265E-6	IMPLEMENTATION	4.7395299530137643E-7	DOCUMENTATION	1.3043631250892647E-7	TEST
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999762690582286	WITHOUT_CLASSIFICATION	1.545785824408928E-5	DESIGN	4.3074987471733254E-6	DEFECT	3.3611954725306265E-6	IMPLEMENTATION	4.7395299530137643E-7	DOCUMENTATION	1.3043631250892647E-7	TEST
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999912150275	WITHOUT_CLASSIFICATION	6.987933547849675E-9	DEFECT	8.552350581237185E-10	IMPLEMENTATION	5.596768525447622E-10	DESIGN	3.566973768223931E-10	TEST	2.5429729316584847E-11	DOCUMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999977289664083	WITHOUT_CLASSIFICATION	2.2135285666233884E-6	DEFECT	2.318951687679769E-8	IMPLEMENTATION	2.0561480194651174E-8	DESIGN	1.1309421292384071E-8	TEST	2.444606841128862E-9	DOCUMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999977289664083	WITHOUT_CLASSIFICATION	2.2135285666233884E-6	DEFECT	2.318951687679769E-8	IMPLEMENTATION	2.0561480194651174E-8	DESIGN	1.1309421292384071E-8	TEST	2.444606841128862E-9	DOCUMENTATION
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.997249440928914	WITHOUT_CLASSIFICATION	0.0024908527461521483	DESIGN	2.360451033787362E-4	TEST	1.2155548149445217E-5	DEFECT	9.856849687608977E-6	DOCUMENTATION	1.6488237180176514E-6	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999915993774952	WITHOUT_CLASSIFICATION	6.775344543905834E-6	DESIGN	1.1442483364005496E-6	DEFECT	2.2485181165440615E-7	IMPLEMENTATION	2.0697498499240067E-7	TEST	4.9202827901009184E-8	DOCUMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.999997503444567	WITHOUT_CLASSIFICATION	2.4392620853600602E-6	DESIGN	2.739012689986565E-8	DEFECT	2.326443154109489E-8	TEST	5.868445303841269E-9	DOCUMENTATION	7.70343750137138E-10	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999217146349146	WITHOUT_CLASSIFICATION	4.147390359864924E-5	IMPLEMENTATION	1.3525675884510162E-5	DESIGN	9.318703642390937E-6	DOCUMENTATION	7.07241028119662E-6	DEFECT	6.894671678763722E-6	TEST
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999975820734464	WITHOUT_CLASSIFICATION	8.34872031566039E-7	DESIGN	4.983557226546367E-7	DEFECT	4.1233244481561164E-7	TEST	3.8655390357763984E-7	DOCUMENTATION	2.858124510528515E-7	IMPLEMENTATION
// WHERE	WITHOUT_CLASSIFICATION	0.9999925668537951	WITHOUT_CLASSIFICATION	2.5916380503330267E-6	DEFECT	1.5428288343677854E-6	DESIGN	1.255728924551037E-6	TEST	1.0941344773287647E-6	IMPLEMENTATION	9.488159181518539E-7	DOCUMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.999997803686035	WITHOUT_CLASSIFICATION	1.3038796321698629E-6	DESIGN	3.663736261695293E-7	TEST	2.5874892333942423E-7	DOCUMENTATION	1.8071135641041383E-7	DEFECT	8.660042694768295E-8	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.999993029165983	WITHOUT_CLASSIFICATION	2.478449632150385E-6	IMPLEMENTATION	1.4760660123871287E-6	DEFECT	1.3853969691625626E-6	DESIGN	9.723983335839606E-7	DOCUMENTATION	6.585230697076958E-7	TEST
// TODO:	WITHOUT_CLASSIFICATION	0.985385783880135	WITHOUT_CLASSIFICATION	0.008152029218974038	IMPLEMENTATION	0.003687621405196448	DESIGN	0.0011758981611956114	DEFECT	8.593067918933391E-4	DOCUMENTATION	7.393605426056469E-4	TEST
// ID	WITHOUT_CLASSIFICATION	0.9999870499861286	WITHOUT_CLASSIFICATION	4.847230669287093E-6	IMPLEMENTATION	4.054236571181745E-6	DESIGN	1.6299611876032674E-6	DOCUMENTATION	1.3568690660032144E-6	TEST	1.0617163773570392E-6	DEFECT
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999862365630394	WITHOUT_CLASSIFICATION	5.6072385961520146E-6	IMPLEMENTATION	3.466167132886754E-6	DEFECT	1.752297045758395E-6	DOCUMENTATION	1.7013449113950412E-6	TEST	1.2363892742453988E-6	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998991601507293	WITHOUT_CLASSIFICATION	7.456388253480148E-5	IMPLEMENTATION	7.740273010552859E-6	DEFECT	7.720734177546534E-6	DOCUMENTATION	6.691038325530262E-6	DESIGN	4.123921222221172E-6	TEST
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999995135082311	WITHOUT_CLASSIFICATION	2.927146343938679E-7	DESIGN	7.895936991082346E-8	DOCUMENTATION	5.438539802283956E-8	IMPLEMENTATION	5.2505742367402636E-8	TEST	7.926624228289444E-9	DEFECT
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999948152472666	WITHOUT_CLASSIFICATION	3.0946620500444662E-6	TEST	1.2841774833167792E-6	IMPLEMENTATION	5.430756980230314E-7	DEFECT	1.9083619501199525E-7	DESIGN	7.200130702930612E-8	DOCUMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9996555107066516	WITHOUT_CLASSIFICATION	3.3119436396547954E-4	DESIGN	8.743636489501103E-6	DEFECT	4.327882868836117E-6	TEST	1.8965049656324041E-7	IMPLEMENTATION	3.3759528073870876E-8	DOCUMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998991601507293	WITHOUT_CLASSIFICATION	7.456388253480148E-5	IMPLEMENTATION	7.740273010552859E-6	DEFECT	7.720734177546534E-6	DOCUMENTATION	6.691038325530262E-6	DESIGN	4.123921222221172E-6	TEST
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999883289518072	WITHOUT_CLASSIFICATION	9.806321897599329E-6	DESIGN	9.721847235231902E-7	IMPLEMENTATION	7.875147673741301E-7	DEFECT	6.454294562239699E-8	DOCUMENTATION	4.0483858685932967E-8	TEST
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.999997722574196	WITHOUT_CLASSIFICATION	2.0839580504702286E-6	IMPLEMENTATION	1.1391251025559E-7	DESIGN	5.0845544190052995E-8	DEFECT	1.5931810397527573E-8	DOCUMENTATION	1.2777888835335743E-8	TEST
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999758531468563	WITHOUT_CLASSIFICATION	1.6182649826521835E-5	IMPLEMENTATION	2.8183511925398717E-6	DESIGN	2.003837432872342E-6	DOCUMENTATION	1.649618549577543E-6	DEFECT	1.4923961420389107E-6	TEST
// IMPORT	WITHOUT_CLASSIFICATION	0.9999913880076806	WITHOUT_CLASSIFICATION	2.817701607744327E-6	IMPLEMENTATION	2.0931269997774887E-6	DEFECT	1.8267240867252181E-6	DESIGN	1.1058924589628779E-6	DOCUMENTATION	7.685471662468372E-7	TEST
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999843506754779	WITHOUT_CLASSIFICATION	5.509978132943461E-6	IMPLEMENTATION	5.021788210357438E-6	DESIGN	2.064408313440709E-6	DEFECT	1.9333689725713547E-6	DOCUMENTATION	1.1197808928250209E-6	TEST
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999945255544449	WITHOUT_CLASSIFICATION	3.924439452469801E-6	IMPLEMENTATION	6.078597169003166E-7	DOCUMENTATION	4.357761337980285E-7	TEST	2.998984425578439E-7	DESIGN	2.064718092261135E-7	DEFECT
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999950277972801	WITHOUT_CLASSIFICATION	1.6826466746946487E-6	IMPLEMENTATION	1.2158898753340104E-6	DESIGN	1.184476264351623E-6	DOCUMENTATION	6.893618661703632E-7	TEST	1.998280393214593E-7	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999921100495431	WITHOUT_CLASSIFICATION	2.6772406679072813E-6	IMPLEMENTATION	1.9342686699774286E-6	DESIGN	1.1195651977030883E-6	DOCUMENTATION	1.1177655007027857E-6	DEFECT	1.0411104204923156E-6	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999969407400447	WITHOUT_CLASSIFICATION	1.646475481541535E-6	DESIGN	5.244342423295615E-7	DOCUMENTATION	3.493906627354245E-7	DEFECT	3.253050910283725E-7	TEST	2.1365447766823027E-7	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999985133588635	WITHOUT_CLASSIFICATION	1.439391241421207E-6	DESIGN	3.4782374376010836E-8	DEFECT	9.206735583314605E-9	TEST	2.906527453376281E-9	DOCUMENTATION	3.542578520441275E-10	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.999997395088134	WITHOUT_CLASSIFICATION	1.2870834745789361E-6	DEFECT	9.221214517325775E-7	IMPLEMENTATION	1.6110898513687443E-7	DOCUMENTATION	1.3295255455526756E-7	DESIGN	1.0164540007854612E-7	TEST
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999993255165736	WITHOUT_CLASSIFICATION	5.24378484976953E-7	DESIGN	4.17937391760258E-8	DEFECT	4.165843234646467E-8	DOCUMENTATION	3.368338943097717E-8	TEST	3.296938065146088E-8	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999923871753361	WITHOUT_CLASSIFICATION	3.7915654437113103E-6	DESIGN	1.1983066797791596E-6	TEST	1.0151761890320968E-6	DOCUMENTATION	9.620975298549746E-7	DEFECT	6.456788214861895E-7	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.999997803686035	WITHOUT_CLASSIFICATION	1.3038796321698629E-6	DESIGN	3.663736261695293E-7	TEST	2.5874892333942423E-7	DOCUMENTATION	1.8071135641041383E-7	DEFECT	8.660042694768295E-8	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999969407400447	WITHOUT_CLASSIFICATION	1.646475481541535E-6	DESIGN	5.244342423295615E-7	DOCUMENTATION	3.493906627354245E-7	DEFECT	3.253050910283725E-7	TEST	2.1365447766823027E-7	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.999997395088134	WITHOUT_CLASSIFICATION	1.2870834745789361E-6	DEFECT	9.221214517325775E-7	IMPLEMENTATION	1.6110898513687443E-7	DOCUMENTATION	1.3295255455526756E-7	DESIGN	1.0164540007854612E-7	TEST
// KEY	WITHOUT_CLASSIFICATION	0.9999923871753361	WITHOUT_CLASSIFICATION	3.7915654437113103E-6	DESIGN	1.1983066797791596E-6	TEST	1.0151761890320968E-6	DOCUMENTATION	9.620975298549746E-7	DEFECT	6.456788214861895E-7	IMPLEMENTATION
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999940909296559	WITHOUT_CLASSIFICATION	3.98267542393936E-6	IMPLEMENTATION	1.457072141519675E-6	DESIGN	2.7427208887458395E-7	DEFECT	1.6128062071582984E-7	DOCUMENTATION	3.37700691785274E-8	TEST
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999395112119736	WITHOUT_CLASSIFICATION	2.107931847703562E-5	IMPLEMENTATION	1.4495697631926414E-5	DESIGN	1.4482260842832463E-5	DEFECT	5.276565577484276E-6	DOCUMENTATION	5.1549454972093575E-6	TEST
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999945065355448	WITHOUT_CLASSIFICATION	4.904113770194028E-6	IMPLEMENTATION	3.178130841462881E-7	DESIGN	1.866068251625659E-7	DEFECT	7.494673496305398E-8	DOCUMENTATION	9.984040865413352E-9	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999901784277917	WITHOUT_CLASSIFICATION	4.160119311834365E-6	IMPLEMENTATION	1.652908137388332E-6	DESIGN	1.4336985985061021E-6	DOCUMENTATION	1.353998308545204E-6	DEFECT	1.220847852112589E-6	TEST
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.999996793941307	WITHOUT_CLASSIFICATION	1.1115410627444585E-6	DESIGN	7.748371887699891E-7	IMPLEMENTATION	5.514502056291351E-7	DOCUMENTATION	4.0338946817862743E-7	TEST	3.6484076759418557E-7	DEFECT
// column index	WITHOUT_CLASSIFICATION	0.9998567105333804	WITHOUT_CLASSIFICATION	1.0265265008653092E-4	DEFECT	3.3743928701370925E-5	DESIGN	3.677093331114652E-6	DOCUMENTATION	1.618487881354829E-6	TEST	1.5973066191936289E-6	IMPLEMENTATION
//column unique-key	WITHOUT_CLASSIFICATION	0.9997114829524064	WITHOUT_CLASSIFICATION	1.2485671707662335E-4	DESIGN	6.552266219225761E-5	IMPLEMENTATION	4.419290222789193E-5	DOCUMENTATION	4.110508090599523E-5	DEFECT	1.2839685190968226E-5	TEST
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9975172972172387	WITHOUT_CLASSIFICATION	0.0015312748727027948	DESIGN	7.015678883014303E-4	DEFECT	1.2854917066936578E-4	IMPLEMENTATION	7.746611921830878E-5	TEST	4.384473186935339E-5	DOCUMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.9999949918264454	WITHOUT_CLASSIFICATION	2.4823266901355197E-6	DEFECT	1.344561582814092E-6	DESIGN	7.296922881787989E-7	TEST	2.555049418804041E-7	IMPLEMENTATION	1.9608805150316817E-7	DOCUMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999938837462	WITHOUT_CLASSIFICATION	2.873525540978098E-9	DEFECT	2.557104779651463E-9	IMPLEMENTATION	4.5704098660580453E-10	TEST	1.385888264806601E-10	DESIGN	8.999378530494599E-11	DOCUMENTATION
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999924727458448	WITHOUT_CLASSIFICATION	5.464717023935036E-6	DESIGN	1.1947589950056675E-6	TEST	4.295719469486231E-7	DOCUMENTATION	4.08486329919125E-7	DEFECT	2.9719859401063584E-8	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.999999510390015	WITHOUT_CLASSIFICATION	2.6807882551455137E-7	DEFECT	1.616508529180278E-7	IMPLEMENTATION	3.2185902393257945E-8	DESIGN	2.4605682449861643E-8	TEST	3.0887218821647666E-9	DOCUMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999997411837603	WITHOUT_CLASSIFICATION	1.7973573224635688E-7	IMPLEMENTATION	6.913939431543714E-8	DEFECT	4.895400179079646E-9	TEST	4.792562620094664E-9	DOCUMENTATION	2.5315046504594285E-10	DESIGN
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999974234755514	WITHOUT_CLASSIFICATION	1.2418213041196257E-6	DEFECT	4.192967204403445E-7	TEST	3.78445108141956E-7	DESIGN	2.9165899548649646E-7	IMPLEMENTATION	2.45302320365963E-7	DOCUMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.999976212426364	WITHOUT_CLASSIFICATION	9.937774628553501E-6	IMPLEMENTATION	7.773369170804149E-6	DEFECT	2.1629177786143195E-6	TEST	2.1351602358612946E-6	DESIGN	1.7783518220284454E-6	DOCUMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999871548070521	WITHOUT_CLASSIFICATION	5.730441171792276E-6	DESIGN	3.2813722236989358E-6	IMPLEMENTATION	1.4422912302813743E-6	DOCUMENTATION	1.3140571088135215E-6	TEST	1.0770312131786643E-6	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9999840615420568	WITHOUT_CLASSIFICATION	5.344989701246169E-6	DESIGN	3.218681419905353E-6	IMPLEMENTATION	3.0872353626551275E-6	DEFECT	2.2637373622618626E-6	DOCUMENTATION	2.023814097159134E-6	TEST
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999997906292792	WITHOUT_CLASSIFICATION	9.383992658882517E-8	IMPLEMENTATION	5.5486949552602514E-8	DESIGN	4.0453343383992605E-8	TEST	1.0884267185163231E-8	DOCUMENTATION	8.706234058396604E-9	DEFECT
// SORT	WITHOUT_CLASSIFICATION	0.9999964147284691	WITHOUT_CLASSIFICATION	9.042847462414679E-7	IMPLEMENTATION	8.080982995619711E-7	DOCUMENTATION	6.723386534999127E-7	DESIGN	6.521512856359957E-7	DEFECT	5.48398545926624E-7	TEST
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999969407400447	WITHOUT_CLASSIFICATION	1.646475481541535E-6	DESIGN	5.244342423295615E-7	DOCUMENTATION	3.493906627354245E-7	DEFECT	3.253050910283725E-7	TEST	2.1365447766823027E-7	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999758428077438	WITHOUT_CLASSIFICATION	2.391148179662753E-5	DESIGN	1.1514940750165837E-7	IMPLEMENTATION	5.3893423856179266E-8	TEST	4.9869598094657414E-8	DOCUMENTATION	2.6798030127711408E-8	DEFECT
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999803737921484	WITHOUT_CLASSIFICATION	1.6798928121369592E-5	DESIGN	1.513725687679984E-6	IMPLEMENTATION	1.089188492173226E-6	DEFECT	1.541699472862871E-7	DOCUMENTATION	7.019560301897714E-8	TEST
// set up second pass	WITHOUT_CLASSIFICATION	0.9999957991806726	WITHOUT_CLASSIFICATION	3.4445425208011397E-6	IMPLEMENTATION	3.665252885082653E-7	DESIGN	1.7851169629862158E-7	DOCUMENTATION	1.2795807438888401E-7	DEFECT	8.328174724140966E-8	TEST
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9996812680024898	WITHOUT_CLASSIFICATION	2.1624807077124677E-4	TEST	8.717796124874154E-5	DESIGN	1.4310215096882995E-5	IMPLEMENTATION	4.998697599854545E-7	DEFECT	4.958806334584507E-7	DOCUMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999987286989533	WITHOUT_CLASSIFICATION	9.615572294830377E-7	IMPLEMENTATION	1.1648288680212562E-7	TEST	1.1007628576683926E-7	DESIGN	6.209720001228288E-8	DOCUMENTATION	2.1087444684922473E-8	DEFECT
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999423594184569	WITHOUT_CLASSIFICATION	4.1338567409522053E-5	DEFECT	1.4605992835612563E-5	DESIGN	7.58619556371502E-7	IMPLEMENTATION	6.329086711607545E-7	TEST	3.044930704020664E-7	DOCUMENTATION
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999837211010661	WITHOUT_CLASSIFICATION	1.4024262314423287E-5	IMPLEMENTATION	2.155020713969046E-6	DESIGN	5.509740584921936E-8	DEFECT	4.273501104800416E-8	DOCUMENTATION	1.7834885982737057E-9	TEST
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999998655383769	WITHOUT_CLASSIFICATION	4.006094503795635E-8	IMPLEMENTATION	3.453778430816689E-8	DESIGN	2.952822894858409E-8	DEFECT	2.4625852857289594E-8	DOCUMENTATION	5.708811986328027E-9	TEST
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999725580727259	WITHOUT_CLASSIFICATION	1.786919196718269E-5	DEFECT	4.092445567329247E-6	DOCUMENTATION	2.2736696502663886E-6	DESIGN	2.1473033853488095E-6	IMPLEMENTATION	1.0593167038387376E-6	TEST
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999655669688452	WITHOUT_CLASSIFICATION	1.1412839601010873E-5	DESIGN	9.504192224354666E-6	IMPLEMENTATION	5.563397329998633E-6	DEFECT	4.233114395356001E-6	DOCUMENTATION	3.7194876041421805E-6	TEST
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999550006552355	WITHOUT_CLASSIFICATION	3.663744839258997E-5	IMPLEMENTATION	3.1944502026758087E-6	DESIGN	2.085969537000934E-6	DOCUMENTATION	1.8214515289532314E-6	DEFECT	1.2600251032149864E-6	TEST
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999803288247263	WITHOUT_CLASSIFICATION	1.531873316026722E-5	IMPLEMENTATION	1.5125630547806693E-6	DOCUMENTATION	1.2421638606638527E-6	DEFECT	9.590612328451557E-7	TEST	6.386539651103159E-7	DESIGN
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9961203533899599	WITHOUT_CLASSIFICATION	0.0036809084275220903	IMPLEMENTATION	1.4296590121005658E-4	DEFECT	4.994080910347233E-5	DESIGN	4.55314537970665E-6	DOCUMENTATION	1.2783268246908608E-6	TEST
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999331553988196	WITHOUT_CLASSIFICATION	3.053090177200303E-5	DESIGN	3.026745410366212E-5	IMPLEMENTATION	5.707490981662188E-6	DEFECT	1.7656336147676724E-7	DOCUMENTATION	1.6219096170418912E-7	TEST
// contained elements:	WITHOUT_CLASSIFICATION	0.9999975961201346	WITHOUT_CLASSIFICATION	1.1102273494035123E-6	DESIGN	1.0615854121038377E-6	IMPLEMENTATION	1.5746037145126027E-7	DOCUMENTATION	4.746755888705911E-8	TEST	2.7139173672751446E-8	DEFECT
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9997612080829352	WITHOUT_CLASSIFICATION	2.0723709606514738E-4	IMPLEMENTATION	2.9390720921907605E-5	DEFECT	1.3661970796410665E-6	DESIGN	6.23691159627602E-7	DOCUMENTATION	1.7421183852548044E-7	TEST
// Bind the where	WITHOUT_CLASSIFICATION	0.9996132248561573	WITHOUT_CLASSIFICATION	3.158183927808722E-4	IMPLEMENTATION	3.1841093843439796E-5	DESIGN	1.548620038429766E-5	TEST	1.331331744159024E-5	DOCUMENTATION	1.0316139392482184E-5	DEFECT
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9997578291949271	WITHOUT_CLASSIFICATION	2.2647249324825403E-4	IMPLEMENTATION	5.9980442402911426E-6	DOCUMENTATION	5.556368657748151E-6	DEFECT	3.3355714975834013E-6	DESIGN	8.08327428941339E-7	TEST
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999886830015747	WITHOUT_CLASSIFICATION	9.062794681052673E-6	IMPLEMENTATION	1.588346964337812E-6	DESIGN	2.6022518300142057E-7	DOCUMENTATION	2.387051564028955E-7	TEST	1.669264404947428E-7	DEFECT
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9998757238014473	WITHOUT_CLASSIFICATION	5.909171200624484E-5	IMPLEMENTATION	4.955354034014978E-5	DESIGN	7.711458519447121E-6	TEST	7.362033514693312E-6	DEFECT	5.574541720853694E-7	DOCUMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999860917993	WITHOUT_CLASSIFICATION	1.325358308208726E-8	IMPLEMENTATION	5.024360956593613E-10	TEST	1.4820606081109203E-10	DESIGN	3.5431990497852387E-12	DOCUMENTATION	4.3231188600127155E-13	DEFECT
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9944669926137791	WITHOUT_CLASSIFICATION	0.005485234644914436	DESIGN	3.396896329137844E-5	IMPLEMENTATION	7.684830836578087E-6	TEST	3.263975563620383E-6	DOCUMENTATION	2.8549716148395527E-6	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.999523405768745	WITHOUT_CLASSIFICATION	4.6665734868417587E-4	DESIGN	7.467561011197916E-6	DEFECT	1.4279679995576645E-6	IMPLEMENTATION	6.504075521616346E-7	DOCUMENTATION	3.90946007948618E-7	TEST
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999797879718465	WITHOUT_CLASSIFICATION	1.0627400108722463E-5	DESIGN	3.551944382824068E-6	DEFECT	2.68453492556953E-6	DOCUMENTATION	2.0247549919912526E-6	IMPLEMENTATION	1.3233937442566674E-6	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.999554577704639	WITHOUT_CLASSIFICATION	1.670386123188044E-4	IMPLEMENTATION	1.3459009919014904E-4	DESIGN	9.393533120612381E-5	DEFECT	3.81766812000734E-5	DOCUMENTATION	1.1681571445914851E-5	TEST
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.999554577704639	WITHOUT_CLASSIFICATION	1.670386123188044E-4	IMPLEMENTATION	1.3459009919014904E-4	DESIGN	9.393533120612381E-5	DEFECT	3.81766812000734E-5	DOCUMENTATION	1.1681571445914851E-5	TEST
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9998480698603787	WITHOUT_CLASSIFICATION	8.777446352333486E-5	IMPLEMENTATION	3.106884432438684E-5	DESIGN	1.7703285641265733E-5	DOCUMENTATION	8.43600798781826E-6	DEFECT	6.947538144743046E-6	TEST
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9996838200430558	WITHOUT_CLASSIFICATION	2.4366998587210502E-4	IMPLEMENTATION	6.9459132180636E-5	DESIGN	1.2404992302040856E-6	DOCUMENTATION	1.217935927442109E-6	DEFECT	5.924037338422924E-7	TEST
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999931110598094	WITHOUT_CLASSIFICATION	3.975562960117856E-6	IMPLEMENTATION	1.9483752583191058E-6	DESIGN	5.998817894720129E-7	DEFECT	2.72858744884845E-7	DOCUMENTATION	9.22614376563943E-8	TEST
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999941337892186	WITHOUT_CLASSIFICATION	1.99778672555117E-6	DESIGN	1.7549258052934163E-6	IMPLEMENTATION	1.1338206933111532E-6	DEFECT	6.782663019163259E-7	DOCUMENTATION	3.014112553767464E-7	TEST
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999944402784822	WITHOUT_CLASSIFICATION	3.05240808274005E-6	DESIGN	8.437183687672609E-7	DEFECT	6.992273670937712E-7	TEST	5.327452060999827E-7	DOCUMENTATION	4.316224931020462E-7	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999482632649574	WITHOUT_CLASSIFICATION	3.3047661405237074E-5	DEFECT	1.3631579152224674E-5	DESIGN	3.0052307257964223E-6	IMPLEMENTATION	1.301771066638618E-6	DOCUMENTATION	7.504926926304191E-7	TEST
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999653511740731	WITHOUT_CLASSIFICATION	2.7962371895111428E-5	DESIGN	4.899591102833032E-6	IMPLEMENTATION	1.033134777308979E-6	DEFECT	5.032231851810461E-7	DOCUMENTATION	2.5050496659119023E-7	TEST
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9995850161254756	WITHOUT_CLASSIFICATION	1.7939124407037127E-4	DEFECT	1.7740265768988113E-4	DESIGN	5.526886731218766E-5	IMPLEMENTATION	2.211220431004511E-6	TEST	7.098850210312979E-7	DOCUMENTATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999974814747532	WITHOUT_CLASSIFICATION	6.788198498429442E-7	DESIGN	6.004440620651714E-7	TEST	5.572201255926431E-7	DEFECT	4.938929609398578E-7	DOCUMENTATION	1.8814824839971916E-7	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999947515857337	WITHOUT_CLASSIFICATION	2.996527438513271E-6	IMPLEMENTATION	1.1925134735419159E-6	DEFECT	4.2516050972677303E-7	DESIGN	3.976626853365283E-7	DOCUMENTATION	2.3655015924311482E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
//Schema export:	WITHOUT_CLASSIFICATION	0.9998035259832608	WITHOUT_CLASSIFICATION	8.52139679050137E-5	DEFECT	7.541241885898366E-5	DESIGN	1.81535536443248E-5	IMPLEMENTATION	1.1457250185556019E-5	DOCUMENTATION	6.236826145240364E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999338758280918	WITHOUT_CLASSIFICATION	6.172983824631235E-5	DESIGN	3.3216309564382842E-6	IMPLEMENTATION	4.565890653770859E-7	DEFECT	3.769836716047329E-7	DOCUMENTATION	2.39129968684434E-7	TEST
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9998370665800441	WITHOUT_CLASSIFICATION	1.5902659389448247E-4	DESIGN	3.016955528070584E-6	DEFECT	5.95548218940798E-7	DOCUMENTATION	2.8532309158946887E-7	TEST	8.999222783518416E-9	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9990160044605565	WITHOUT_CLASSIFICATION	7.744348122767396E-4	DESIGN	2.044211064462805E-4	DEFECT	4.1931198012133116E-6	IMPLEMENTATION	5.621059596457473E-7	DOCUMENTATION	3.843949597394853E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999926597446541	WITHOUT_CLASSIFICATION	7.091599968278295E-6	DESIGN	1.5531079715669973E-7	DEFECT	3.708813127136152E-8	DOCUMENTATION	3.379000327495921E-8	TEST	2.24664458492119E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999333077640564	WITHOUT_CLASSIFICATION	4.5004197664180635E-5	DESIGN	1.7491880080923705E-5	IMPLEMENTATION	3.4691106216031944E-6	DEFECT	4.334168218112433E-7	DOCUMENTATION	2.9363075510232354E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999819658376728	WITHOUT_CLASSIFICATION	1.1194961289680476E-5	DEFECT	6.027019295006738E-6	DESIGN	5.012479193143827E-7	IMPLEMENTATION	2.8766513607220704E-7	TEST	2.3268687149489087E-8	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999861944681137	WITHOUT_CLASSIFICATION	1.294968183950679E-5	DESIGN	4.6133189005580114E-7	DEFECT	3.5263689463937993E-7	TEST	2.6917698628766853E-8	DOCUMENTATION	1.4963563495457924E-8	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9943648933026005	WITHOUT_CLASSIFICATION	0.0047458594854502874	DESIGN	8.525368079247636E-4	IMPLEMENTATION	1.4723034711466875E-5	TEST	1.1185532343850815E-5	DEFECT	1.0801836969147694E-5	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9987040878001868	WITHOUT_CLASSIFICATION	0.0011617734766865902	IMPLEMENTATION	1.2921588708749741E-4	DESIGN	2.4618114603670295E-6	TEST	1.3784243337000368E-6	DOCUMENTATION	1.0826002450123757E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9999952541434963	WITHOUT_CLASSIFICATION	2.322451314596248E-6	DEFECT	1.1959197606532093E-6	DESIGN	5.589599650456471E-7	IMPLEMENTATION	4.522803089604729E-7	DOCUMENTATION	2.162451542626843E-7	TEST
// found	WITHOUT_CLASSIFICATION	0.9999952541434963	WITHOUT_CLASSIFICATION	2.322451314596248E-6	DEFECT	1.1959197606532093E-6	DESIGN	5.589599650456471E-7	IMPLEMENTATION	4.522803089604729E-7	DOCUMENTATION	2.162451542626843E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9999807500856001	WITHOUT_CLASSIFICATION	7.37663034778715E-6	DESIGN	4.383254764618661E-6	DOCUMENTATION	3.3580327827381134E-6	DEFECT	2.8923097915861467E-6	TEST	1.239686713280241E-6	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999807500856001	WITHOUT_CLASSIFICATION	7.37663034778715E-6	DESIGN	4.383254764618661E-6	DOCUMENTATION	3.3580327827381134E-6	DEFECT	2.8923097915861467E-6	TEST	1.239686713280241E-6	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.999523405768745	WITHOUT_CLASSIFICATION	4.6665734868417587E-4	DESIGN	7.467561011197916E-6	DEFECT	1.4279679995576645E-6	IMPLEMENTATION	6.504075521616346E-7	DOCUMENTATION	3.90946007948618E-7	TEST
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999894946944833	WITHOUT_CLASSIFICATION	4.4695483943534916E-6	IMPLEMENTATION	3.1091919954537103E-6	DEFECT	1.8549949611309139E-6	DESIGN	7.44616090867352E-7	DOCUMENTATION	3.2695407486359255E-7	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.984526472808358	WITHOUT_CLASSIFICATION	0.015151712374073877	DESIGN	2.018801267695722E-4	DEFECT	6.134109690220105E-5	TEST	4.725673613553749E-5	IMPLEMENTATION	1.1336857760805993E-5	DOCUMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999909620841121	WITHOUT_CLASSIFICATION	7.598951881253699E-5	IMPLEMENTATION	1.1812917112531332E-5	DESIGN	1.8653157459345096E-6	TEST	3.735220470200799E-7	DEFECT	3.378851609063119E-7	DOCUMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999071650721638	WITHOUT_CLASSIFICATION	6.431814165245869E-5	DESIGN	1.0317724617154375E-5	DOCUMENTATION	9.59076314889583E-6	IMPLEMENTATION	7.794790088960924E-6	DEFECT	8.135083288030416E-7	TEST
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.984526472808358	WITHOUT_CLASSIFICATION	0.015151712374073877	DESIGN	2.018801267695722E-4	DEFECT	6.134109690220105E-5	TEST	4.725673613553749E-5	IMPLEMENTATION	1.1336857760805993E-5	DOCUMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999909620841121	WITHOUT_CLASSIFICATION	7.598951881253699E-5	IMPLEMENTATION	1.1812917112531332E-5	DESIGN	1.8653157459345096E-6	TEST	3.735220470200799E-7	DEFECT	3.378851609063119E-7	DOCUMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9994251576028734	WITHOUT_CLASSIFICATION	5.275465418170589E-4	IMPLEMENTATION	3.6495850148458916E-5	DESIGN	4.163441119928694E-6	TEST	3.357645588265517E-6	DEFECT	3.278918452870658E-6	DOCUMENTATION
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9979405008157203	WITHOUT_CLASSIFICATION	0.002052298542547201	DESIGN	4.754240117294611E-6	TEST	2.1571290860615297E-6	DEFECT	2.876931304349326E-7	DOCUMENTATION	1.5793988572067774E-9	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999911301986208	WITHOUT_CLASSIFICATION	7.458078097610608E-6	DESIGN	1.011656387102719E-6	IMPLEMENTATION	2.9343713250328393E-7	DEFECT	9.06950035747257E-8	TEST	1.5934758244471965E-8	DOCUMENTATION
// the element has changed	WITHOUT_CLASSIFICATION	0.9999971504410362	WITHOUT_CLASSIFICATION	2.69438937851138E-6	IMPLEMENTATION	9.644327618374457E-8	TEST	3.577622172984998E-8	DESIGN	1.823447459593871E-8	DOCUMENTATION	4.715612953687026E-9	DEFECT
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9631264013433732	WITHOUT_CLASSIFICATION	0.03660749098889567	DESIGN	1.276378515908442E-4	IMPLEMENTATION	1.1738009656084616E-4	TEST	1.848318825141606E-5	DEFECT	2.6065313280675874E-6	DOCUMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9026835628852615	DESIGN	0.0970271638759364	WITHOUT_CLASSIFICATION	2.1149940154712804E-4	TEST	4.4636634807029396E-5	IMPLEMENTATION	1.731348199768497E-5	DEFECT	1.5823720450094687E-5	DOCUMENTATION
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999997287496559	WITHOUT_CLASSIFICATION	2.0356132656254692E-7	DESIGN	2.4436428729506595E-8	DOCUMENTATION	2.4341082358049055E-8	IMPLEMENTATION	1.764067476198411E-8	TEST	1.270831694176962E-9	DEFECT
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999980377650847	WITHOUT_CLASSIFICATION	1.4588317561245085E-6	DESIGN	2.1285113513881863E-7	DOCUMENTATION	1.4557928749386737E-7	TEST	1.3614729754140483E-7	IMPLEMENTATION	8.825439084762796E-9	DEFECT
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.999901677448865	WITHOUT_CLASSIFICATION	8.92308933335775E-5	DESIGN	5.6810931828869855E-6	TEST	1.933013748367688E-6	IMPLEMENTATION	9.461365591634665E-7	DOCUMENTATION	5.314143110821284E-7	DEFECT
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.999999964086899	WITHOUT_CLASSIFICATION	1.3655947902661278E-8	TEST	1.0682218283915544E-8	DESIGN	6.568773119044278E-9	IMPLEMENTATION	4.784268994858569E-9	DOCUMENTATION	2.2189267103553624E-10	DEFECT
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999953637826035	WITHOUT_CLASSIFICATION	2.9720996484693743E-6	IMPLEMENTATION	6.96664318033815E-7	DESIGN	5.659713424423519E-7	TEST	3.646208002926732E-7	DEFECT	3.6861287320018415E-8	DOCUMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999968474211302	WITHOUT_CLASSIFICATION	2.9764889441607E-6	DESIGN	7.496073134651233E-8	IMPLEMENTATION	5.394251522005661E-8	TEST	2.395437184570315E-8	DEFECT	2.323230727543536E-8	DOCUMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999999435679321	WITHOUT_CLASSIFICATION	2.8051887777449908E-8	DESIGN	1.415061225827852E-8	TEST	1.2633527859415823E-8	IMPLEMENTATION	1.4777163379694606E-9	DOCUMENTATION	1.1832359598164134E-10	DEFECT
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.999957449357844	WITHOUT_CLASSIFICATION	3.7262310270959705E-5	IMPLEMENTATION	2.3962223855754037E-6	DESIGN	1.8369322998171036E-6	TEST	6.130127054989124E-7	DOCUMENTATION	4.421644940842499E-7	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999071650721638	WITHOUT_CLASSIFICATION	6.431814165245869E-5	DESIGN	1.0317724617154375E-5	DOCUMENTATION	9.59076314889583E-6	IMPLEMENTATION	7.794790088960924E-6	DEFECT	8.135083288030416E-7	TEST
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.999957999836672	WITHOUT_CLASSIFICATION	1.9675311146938608E-5	DESIGN	1.7252905877039383E-5	IMPLEMENTATION	2.9660022002210476E-6	TEST	1.2323307199992242E-6	DEFECT	8.73613383752622E-7	DOCUMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999932600542424	WITHOUT_CLASSIFICATION	4.403968251233242E-6	TEST	1.0513829908503958E-6	DOCUMENTATION	5.978999112830411E-7	DEFECT	3.917756442221585E-7	IMPLEMENTATION	2.9491895994185244E-7	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999932600542424	WITHOUT_CLASSIFICATION	4.403968251233242E-6	TEST	1.0513829908503958E-6	DOCUMENTATION	5.978999112830411E-7	DEFECT	3.917756442221585E-7	IMPLEMENTATION	2.9491895994185244E-7	DESIGN
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999746596756376	WITHOUT_CLASSIFICATION	1.4767574854008004E-5	DESIGN	6.997938328662118E-6	IMPLEMENTATION	2.271227443993333E-6	DEFECT	6.555332051900727E-7	DOCUMENTATION	6.480505305061992E-7	TEST
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9994251576028734	WITHOUT_CLASSIFICATION	5.275465418170589E-4	IMPLEMENTATION	3.6495850148458916E-5	DESIGN	4.163441119928694E-6	TEST	3.357645588265517E-6	DEFECT	3.278918452870658E-6	DOCUMENTATION
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9986920929937386	WITHOUT_CLASSIFICATION	6.303413188850013E-4	DESIGN	3.7099463460937696E-4	DEFECT	2.7903012016354474E-4	IMPLEMENTATION	1.7707354187216884E-5	TEST	9.833578416142068E-6	DOCUMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.8927193954871959	DESIGN	0.10709311755625484	WITHOUT_CLASSIFICATION	1.825767429729382E-4	TEST	2.8112337865625906E-6	DEFECT	1.3017253470245977E-6	IMPLEMENTATION	7.972544425652482E-7	DOCUMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9710950375157504	WITHOUT_CLASSIFICATION	0.020018651804772893	DESIGN	0.0060805455318104435	DEFECT	0.002745373819000837	IMPLEMENTATION	4.540270868841064E-5	TEST	1.4988619976981248E-5	DOCUMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999005759846017	WITHOUT_CLASSIFICATION	8.047966573139515E-5	DEFECT	1.6780819095456235E-5	DESIGN	1.7784383954342965E-6	TEST	2.5320107068576574E-7	DOCUMENTATION	1.3189110534048558E-7	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.7339853402204372	WITHOUT_CLASSIFICATION	0.25637172503786315	DESIGN	0.0072107767360211315	TEST	0.0015589968714665593	IMPLEMENTATION	8.192817733873491E-4	DEFECT	5.3879360824593515E-5	DOCUMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9994251576028734	WITHOUT_CLASSIFICATION	5.275465418170589E-4	IMPLEMENTATION	3.6495850148458916E-5	DESIGN	4.163441119928694E-6	TEST	3.357645588265517E-6	DEFECT	3.278918452870658E-6	DOCUMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999005759846017	WITHOUT_CLASSIFICATION	8.047966573139515E-5	DEFECT	1.6780819095456235E-5	DESIGN	1.7784383954342965E-6	TEST	2.5320107068576574E-7	DOCUMENTATION	1.3189110534048558E-7	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.7339853402204372	WITHOUT_CLASSIFICATION	0.25637172503786315	DESIGN	0.0072107767360211315	TEST	0.0015589968714665593	IMPLEMENTATION	8.192817733873491E-4	DEFECT	5.3879360824593515E-5	DOCUMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9902420419305511	WITHOUT_CLASSIFICATION	0.009338105750263635	DESIGN	2.1435665748536505E-4	IMPLEMENTATION	1.1933377199693551E-4	TEST	6.710067872502213E-5	DOCUMENTATION	1.9061210977914425E-5	DEFECT
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999769204501846	WITHOUT_CLASSIFICATION	1.949976530276812E-5	IMPLEMENTATION	2.061852101365031E-6	TEST	9.114008530142718E-7	DEFECT	4.090850515313005E-7	DOCUMENTATION	1.974465068746403E-7	DESIGN
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999899976759432	WITHOUT_CLASSIFICATION	5.705718399806625E-6	DESIGN	3.014054806033732E-6	DEFECT	8.362522208419909E-7	DOCUMENTATION	2.4719713201333194E-7	TEST	1.9910149801024966E-7	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9994251576028734	WITHOUT_CLASSIFICATION	5.275465418170589E-4	IMPLEMENTATION	3.6495850148458916E-5	DESIGN	4.163441119928694E-6	TEST	3.357645588265517E-6	DEFECT	3.278918452870658E-6	DOCUMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9994251576028734	WITHOUT_CLASSIFICATION	5.275465418170589E-4	IMPLEMENTATION	3.6495850148458916E-5	DESIGN	4.163441119928694E-6	TEST	3.357645588265517E-6	DEFECT	3.278918452870658E-6	DOCUMENTATION
// from Map	WITHOUT_CLASSIFICATION	0.9999923369068039	WITHOUT_CLASSIFICATION	3.1317576537094933E-6	DESIGN	3.0989404738230393E-6	DEFECT	7.548860091906206E-7	IMPLEMENTATION	3.423006274762988E-7	TEST	3.3520843193014887E-7	DOCUMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999890280768305	WITHOUT_CLASSIFICATION	4.394459258455012E-6	DEFECT	4.2805458131263654E-6	DESIGN	1.5092076516225766E-6	IMPLEMENTATION	4.1464298591239513E-7	DOCUMENTATION	3.7306746024259425E-7	TEST
//inject the data	WITHOUT_CLASSIFICATION	0.999922362089455	WITHOUT_CLASSIFICATION	6.674744290160545E-5	IMPLEMENTATION	4.457768948793872E-6	DOCUMENTATION	2.9987180274701906E-6	TEST	2.17200554457277E-6	DEFECT	1.26197512256919E-6	DESIGN
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999114083933454	WITHOUT_CLASSIFICATION	7.415042511706996E-5	DESIGN	1.234583011859011E-5	IMPLEMENTATION	1.1392426335249034E-6	DEFECT	5.508438173729312E-7	TEST	4.0526496822492646E-7	DOCUMENTATION
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999863137051037	WITHOUT_CLASSIFICATION	1.223074399189301E-5	IMPLEMENTATION	7.285467755555037E-7	DEFECT	4.7081474210662495E-7	DOCUMENTATION	1.5643355273373213E-7	TEST	9.975583383739649E-8	DESIGN
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999948767054385	WITHOUT_CLASSIFICATION	4.770537278768378E-6	DESIGN	1.7464938978261366E-7	DEFECT	1.1226352240582323E-7	IMPLEMENTATION	4.8085602702834704E-8	TEST	1.7758767912057707E-8	DOCUMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.999982804020495	WITHOUT_CLASSIFICATION	1.553366835417825E-5	IMPLEMENTATION	6.00733263439854E-7	DESIGN	5.228549180100767E-7	DEFECT	5.199125206748227E-7	TEST	1.8810448621653542E-8	DOCUMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999866589301117	WITHOUT_CLASSIFICATION	1.289405495812969E-5	DESIGN	1.8508306218902618E-7	IMPLEMENTATION	1.539888677725438E-7	TEST	7.86937820883922E-8	DOCUMENTATION	2.924921827705644E-8	DEFECT
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999519906313219	WITHOUT_CLASSIFICATION	1.8671878146352412E-5	DEFECT	1.4570893272169823E-5	DESIGN	1.279376070640947E-5	IMPLEMENTATION	1.4585827880607256E-6	DOCUMENTATION	5.142537651361276E-7	TEST
// then bind it	WITHOUT_CLASSIFICATION	0.9999691434964638	WITHOUT_CLASSIFICATION	8.075024055003747E-6	DEFECT	7.461142889920188E-6	IMPLEMENTATION	6.382365165244524E-6	TEST	4.775183011168097E-6	DESIGN	4.162788414795443E-6	DOCUMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999920318529428	WITHOUT_CLASSIFICATION	4.712079706384748E-6	DEFECT	1.7754927438876615E-6	DESIGN	6.951950492155016E-7	DOCUMENTATION	6.83192972867799E-7	IMPLEMENTATION	1.0218658478738845E-7	TEST
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999404522765754	WITHOUT_CLASSIFICATION	3.177209569521189E-5	DESIGN	2.3006792356827574E-5	IMPLEMENTATION	3.931347434264601E-6	DEFECT	4.863459243715394E-7	TEST	3.511420139375531E-7	DOCUMENTATION
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999221280922487	WITHOUT_CLASSIFICATION	7.453967364195899E-5	DESIGN	2.9680443182291853E-6	TEST	3.081454627462562E-7	IMPLEMENTATION	4.7420771692750086E-8	DOCUMENTATION	8.623556817894811E-9	DEFECT
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.999122982699367	WITHOUT_CLASSIFICATION	7.686261273099455E-4	DESIGN	1.0534584106628632E-4	IMPLEMENTATION	1.92043228099888E-6	TEST	7.936915707820842E-7	DOCUMENTATION	3.312084051974755E-7	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999990098006319	WITHOUT_CLASSIFICATION	8.25173058075565E-6	DEFECT	6.993177072602226E-7	IMPLEMENTATION	5.24778738119636E-7	DESIGN	2.418900101304596E-7	TEST	1.842766447396761E-7	DOCUMENTATION
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9840430361527792	WITHOUT_CLASSIFICATION	0.01540885509249346	DESIGN	4.694777128659135E-4	TEST	7.240405584911241E-5	DEFECT	5.284226199122723E-6	IMPLEMENTATION	9.42759813097515E-7	DOCUMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9990813427442118	WITHOUT_CLASSIFICATION	7.970551261037608E-4	DESIGN	1.0386162347112267E-4	IMPLEMENTATION	6.025061604868317E-6	TEST	6.015699896671957E-6	DEFECT	5.699744711897432E-6	DOCUMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999115769909053	WITHOUT_CLASSIFICATION	6.637415635912671E-5	DESIGN	1.0949436374959194E-5	DOCUMENTATION	4.345634761547405E-6	DEFECT	3.37756742514543E-6	TEST	3.376214173931096E-6	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9879317838253159	WITHOUT_CLASSIFICATION	0.010865674179964159	DESIGN	6.566131911980999E-4	DEFECT	3.763439794174124E-4	IMPLEMENTATION	1.4272391585549085E-4	DOCUMENTATION	2.6860908248997482E-5	TEST
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9996425702365173	WITHOUT_CLASSIFICATION	2.7105728154792316E-4	DESIGN	4.3824794081529873E-5	IMPLEMENTATION	3.5786159961470515E-5	DEFECT	4.346553752005407E-6	TEST	2.414974139827818E-6	DOCUMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.999901107195547	WITHOUT_CLASSIFICATION	6.131257457863746E-5	DESIGN	1.5189796695682944E-5	IMPLEMENTATION	9.962605771824335E-6	DEFECT	9.234781180156242E-6	TEST	3.1930462265540916E-6	DOCUMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9988483995054994	WITHOUT_CLASSIFICATION	7.930865484858196E-4	IMPLEMENTATION	1.9792100418279538E-4	DESIGN	8.738630821468731E-5	DEFECT	4.2587379960313013E-5	DOCUMENTATION	3.061925365707245E-5	TEST
//unsupported	WITHOUT_CLASSIFICATION	0.9988483995054994	WITHOUT_CLASSIFICATION	7.930865484858196E-4	IMPLEMENTATION	1.9792100418279538E-4	DESIGN	8.738630821468731E-5	DEFECT	4.2587379960313013E-5	DOCUMENTATION	3.061925365707245E-5	TEST
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9990813427442118	WITHOUT_CLASSIFICATION	7.970551261037608E-4	DESIGN	1.0386162347112267E-4	IMPLEMENTATION	6.025061604868317E-6	TEST	6.015699896671957E-6	DEFECT	5.699744711897432E-6	DOCUMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9991315441338374	WITHOUT_CLASSIFICATION	4.436085344085343E-4	IMPLEMENTATION	3.8450328834850156E-4	TEST	3.6200779618363416E-5	DEFECT	3.121188725701236E-6	DESIGN	1.0220750614234491E-6	DOCUMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9921968233110167	WITHOUT_CLASSIFICATION	0.007638488094927815	DESIGN	1.5932993355696504E-4	TEST	4.888557334405686E-6	IMPLEMENTATION	4.046744236706487E-7	DEFECT	6.542874040032277E-8	DOCUMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.5117078298820203	DESIGN	0.32104957506760834	WITHOUT_CLASSIFICATION	0.1452570261702287	IMPLEMENTATION	0.018967393070850658	DEFECT	0.0022615581087455923	TEST	7.566177005462801E-4	DOCUMENTATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999977951978731	WITHOUT_CLASSIFICATION	1.1702139163113406E-6	IMPLEMENTATION	4.606881711616302E-7	TEST	2.427571273696946E-7	DOCUMENTATION	2.2485635236839106E-7	DESIGN	1.0628655969358216E-7	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998714752689979	WITHOUT_CLASSIFICATION	7.653520868709691E-5	DEFECT	2.909992367200348E-5	DESIGN	1.2071552617012406E-5	DOCUMENTATION	7.575577521032144E-6	TEST	3.2424685049198993E-6	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.999996099067102	WITHOUT_CLASSIFICATION	2.489040137352932E-6	IMPLEMENTATION	8.318651101669808E-7	DOCUMENTATION	3.554101020721451E-7	DEFECT	1.212015872109008E-7	TEST	1.0341596109657709E-7	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9977302739143947	WITHOUT_CLASSIFICATION	0.0017986085004922895	DESIGN	3.9201962616567396E-4	DEFECT	6.19745488057974E-5	IMPLEMENTATION	1.559734300365604E-5	DOCUMENTATION	1.5260671378467528E-6	TEST
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.999967621726185	WITHOUT_CLASSIFICATION	2.647369542377625E-5	IMPLEMENTATION	4.981691271830337E-6	DESIGN	7.397481949248512E-7	TEST	1.5208694871738148E-7	DOCUMENTATION	3.1051975808859145E-8	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.999998181361631	WITHOUT_CLASSIFICATION	1.7051381088094435E-6	DESIGN	1.000568031352513E-7	DOCUMENTATION	7.034578267729402E-9	TEST	5.9967364957696125E-9	DEFECT	4.1214225931186806E-10	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979217918429542	WITHOUT_CLASSIFICATION	0.0015495023733948787	IMPLEMENTATION	4.116778463240922E-4	DEFECT	6.974650955987165E-5	DESIGN	4.3283380286399124E-5	DOCUMENTATION	3.998047480523398E-6	TEST
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999852204672125	WITHOUT_CLASSIFICATION	1.3202431486955923E-5	IMPLEMENTATION	8.306533472892424E-7	DESIGN	3.9059556893927937E-7	DEFECT	2.0161683380326588E-7	TEST	1.5423555035445625E-7	DOCUMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.999712185564684	WITHOUT_CLASSIFICATION	1.7340257096642902E-4	DEFECT	5.401273678012151E-5	IMPLEMENTATION	4.613456812665647E-5	DESIGN	7.557807936476804E-6	DOCUMENTATION	6.7067515062303675E-6	TEST
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999815827166935	WITHOUT_CLASSIFICATION	1.5099708780694261E-5	DESIGN	1.572646493720929E-6	DEFECT	8.187222856484973E-7	TEST	4.6311917902389567E-7	DOCUMENTATION	4.630865674045636E-7	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.999885853999231	WITHOUT_CLASSIFICATION	4.7570524137868145E-5	DESIGN	4.1202311443172056E-5	IMPLEMENTATION	1.127390655727718E-5	DEFECT	7.824564774160536E-6	TEST	6.274693856422317E-6	DOCUMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999998453967904	WITHOUT_CLASSIFICATION	8.645533863344641E-8	DESIGN	3.652063658053981E-8	IMPLEMENTATION	2.669871017332921E-8	DEFECT	3.3812434420174516E-9	DOCUMENTATION	1.547280711461535E-9	TEST
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945277356446	WITHOUT_CLASSIFICATION	3.2635906796392157E-6	IMPLEMENTATION	1.894325840681929E-6	DEFECT	1.7848442404806547E-7	DESIGN	7.318739275599455E-8	TEST	6.267601840171735E-8	DOCUMENTATION
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9997814792048063	WITHOUT_CLASSIFICATION	1.9334190770597763E-4	DESIGN	2.472366082052211E-5	DEFECT	1.9328405148047303E-7	IMPLEMENTATION	1.772211911724716E-7	DOCUMENTATION	8.472142428994786E-8	TEST
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999380129113772	WITHOUT_CLASSIFICATION	5.9945567778416564E-5	DESIGN	1.7812768162005138E-6	DEFECT	2.135959431856767E-7	IMPLEMENTATION	3.270991620424927E-8	DOCUMENTATION	1.3938168838169496E-8	TEST
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999744592223155	WITHOUT_CLASSIFICATION	1.7391294992516163E-5	IMPLEMENTATION	3.5297935452344547E-6	DESIGN	2.12341318513063E-6	DOCUMENTATION	1.3723560719075788E-6	DEFECT	1.1239198897677117E-6	TEST
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999932994111627	WITHOUT_CLASSIFICATION	4.968305185184023E-6	DESIGN	1.4348927786276631E-6	IMPLEMENTATION	2.0763470718038137E-7	TEST	5.769351398254603E-8	DOCUMENTATION	3.206265232369515E-8	DEFECT
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999633826566088	WITHOUT_CLASSIFICATION	1.9209990531040754E-5	DEFECT	1.0536928218536534E-5	DESIGN	6.567929213130135E-6	IMPLEMENTATION	1.5944397337928475E-7	DOCUMENTATION	1.4305145500715453E-7	TEST
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9988904432556803	WITHOUT_CLASSIFICATION	6.93019039203462E-4	DESIGN	3.968302656206223E-4	IMPLEMENTATION	1.264282710275186E-5	DOCUMENTATION	3.5578855394713213E-6	TEST	3.50672685352437E-6	DEFECT
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9316216149435771	WITHOUT_CLASSIFICATION	0.06836808193355573	DESIGN	9.341625493982397E-6	IMPLEMENTATION	6.487965663104514E-7	DOCUMENTATION	2.789569129999193E-7	TEST	3.3743893825350456E-8	DEFECT
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999134795909859	WITHOUT_CLASSIFICATION	4.08429664325427E-5	DESIGN	3.474731780456666E-5	IMPLEMENTATION	7.638577667606414E-6	DEFECT	2.4119135142071947E-6	DOCUMENTATION	8.79633595155521E-7	TEST
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9971621249487657	WITHOUT_CLASSIFICATION	0.0023484288385261978	DESIGN	4.5402594238211006E-4	IMPLEMENTATION	1.4913222357590278E-5	TEST	1.3729218285280739E-5	DOCUMENTATION	6.777829683362555E-6	DEFECT
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998306110263628	WITHOUT_CLASSIFICATION	1.4202966093891222E-4	IMPLEMENTATION	1.738011231793851E-5	DEFECT	5.063900172235398E-6	DESIGN	3.1867318822485666E-6	DOCUMENTATION	1.7285683256806298E-6	TEST
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999811193851608	WITHOUT_CLASSIFICATION	1.30822630633605E-5	IMPLEMENTATION	3.4490745708587445E-6	DESIGN	1.5234500721084321E-6	DEFECT	4.618758225097267E-7	DOCUMENTATION	3.639513103999292E-7	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991125520062436	WITHOUT_CLASSIFICATION	7.505882688353542E-4	IMPLEMENTATION	8.588323415405376E-5	DESIGN	3.545242592159176E-5	DEFECT	8.057382517014502E-6	TEST	7.466682328514298E-6	DOCUMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998351280364675	WITHOUT_CLASSIFICATION	9.951103487015512E-5	IMPLEMENTATION	3.836998813422275E-5	DESIGN	1.9098470754442456E-5	DEFECT	4.165727666446524E-6	DOCUMENTATION	3.7267421073023588E-6	TEST
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997923079927618	WITHOUT_CLASSIFICATION	1.404570621302293E-4	IMPLEMENTATION	3.95123666369285E-5	DESIGN	1.957986228811403E-5	DEFECT	5.154256228705909E-6	DOCUMENTATION	2.988459954415445E-6	TEST
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998574060338159	WITHOUT_CLASSIFICATION	7.331274032028506E-5	DESIGN	4.443292705525149E-5	IMPLEMENTATION	2.2179628214817374E-5	DEFECT	1.524221813868408E-6	TEST	1.144448779928397E-6	DOCUMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.999218338849398	WITHOUT_CLASSIFICATION	4.823253108530257E-4	IMPLEMENTATION	1.9813262518243607E-4	DESIGN	8.518512498457383E-5	DEFECT	1.3623071498281057E-5	DOCUMENTATION	2.395018083770594E-6	TEST
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9740006389085474	WITHOUT_CLASSIFICATION	0.015285952313605109	DESIGN	0.005395622666319809	IMPLEMENTATION	0.005218412681832195	DEFECT	9.093262672537763E-5	DOCUMENTATION	8.44080297013631E-6	TEST
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999847993858693	WITHOUT_CLASSIFICATION	1.2581984551661437E-5	IMPLEMENTATION	1.181494680608672E-6	DESIGN	9.451477640488855E-7	DEFECT	3.3568256660081285E-7	TEST	1.563045678066869E-7	DOCUMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997991050171492	WITHOUT_CLASSIFICATION	1.815020917708379E-4	DESIGN	1.692689678302567E-5	IMPLEMENTATION	1.5763772801898116E-6	TEST	4.6534901007336335E-7	DEFECT	4.242680065246457E-7	DOCUMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998728998239882	WITHOUT_CLASSIFICATION	1.2274306306564586E-4	IMPLEMENTATION	2.818406149215663E-6	DESIGN	9.304847413901118E-7	DEFECT	3.8274632578461664E-7	DOCUMENTATION	2.2547572981862224E-7	TEST
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988822764792913	WITHOUT_CLASSIFICATION	9.720451310054461E-4	IMPLEMENTATION	6.401076512132505E-5	DESIGN	3.577977394690485E-5	DOCUMENTATION	2.601176265870113E-5	TEST	1.987608797628241E-5	DEFECT
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999952165049037	WITHOUT_CLASSIFICATION	2.5049624589118432E-5	DEFECT	1.6491128118030523E-5	DESIGN	3.739244933120841E-6	IMPLEMENTATION	1.4430268462908652E-6	DOCUMENTATION	1.111926476676675E-6	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998571262545218	WITHOUT_CLASSIFICATION	1.2896317564102224E-4	DESIGN	9.699915390836355E-6	IMPLEMENTATION	2.2814512453032134E-6	DEFECT	1.02821873704272E-6	TEST	9.00984463911521E-7	DOCUMENTATION
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994475648946395	WITHOUT_CLASSIFICATION	4.4079570364837444E-4	IMPLEMENTATION	6.0967420756180325E-5	DEFECT	4.219094115868969E-5	DESIGN	4.730235079867283E-6	DOCUMENTATION	3.7508047173859626E-6	TEST
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997533334745644	WITHOUT_CLASSIFICATION	1.9437802538666154E-4	IMPLEMENTATION	2.1769497240884387E-5	DEFECT	1.836383880859652E-5	DESIGN	7.180930769509933E-6	DOCUMENTATION	4.97423322988171E-6	TEST
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9993035238037725	WITHOUT_CLASSIFICATION	5.748934265430705E-4	DESIGN	7.39622889919615E-5	IMPLEMENTATION	3.392721182562947E-5	DEFECT	9.636531607408283E-6	TEST	4.056737259540724E-6	DOCUMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984739032383806	WITHOUT_CLASSIFICATION	0.0011889893165236106	IMPLEMENTATION	2.5902598653755024E-4	DEFECT	5.178231940558142E-5	DESIGN	2.4730069995943238E-5	DOCUMENTATION	1.5690691567348026E-6	TEST
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.957218288673	WITHOUT_CLASSIFICATION	0.041469294720713985	DESIGN	0.0011913936651242454	IMPLEMENTATION	6.363147623481717E-5	DEFECT	5.630528792844176E-5	TEST	1.0861769987591322E-6	DOCUMENTATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9967923239216578	WITHOUT_CLASSIFICATION	0.0020511697681051063	IMPLEMENTATION	6.843234721254276E-4	DESIGN	4.376602549177507E-4	DEFECT	1.9855959889953003E-5	DOCUMENTATION	1.4666623303940022E-5	TEST
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.999520878417412	WITHOUT_CLASSIFICATION	4.7584523124544583E-4	DESIGN	3.026553757035118E-6	DOCUMENTATION	1.2588556361758347E-7	TEST	7.292423216337466E-8	DEFECT	5.098778977683417E-8	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999762125256636	WITHOUT_CLASSIFICATION	1.2629335599910899E-5	TEST	7.405334105788565E-6	DESIGN	1.998297131778752E-6	IMPLEMENTATION	9.533873405563006E-7	DEFECT	8.011201581958271E-7	DOCUMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.9999730409749609	WITHOUT_CLASSIFICATION	1.4941197371467251E-5	IMPLEMENTATION	7.975154269246636E-6	DESIGN	2.004274727680631E-6	DOCUMENTATION	1.416441164954936E-6	TEST	6.219575056283416E-7	DEFECT
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999970624118388	WITHOUT_CLASSIFICATION	1.6611343311531457E-6	DESIGN	7.448610584078055E-7	IMPLEMENTATION	1.9581037665699903E-7	DEFECT	1.8456793042442695E-7	DOCUMENTATION	1.512144645348419E-7	TEST
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.7372060036904337	WITHOUT_CLASSIFICATION	0.2627447989481344	DESIGN	2.0383186189348466E-5	DEFECT	1.5072744926290507E-5	TEST	9.246180104091936E-6	DOCUMENTATION	4.4952502122242175E-6	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999979001665642	WITHOUT_CLASSIFICATION	7.187826329689772E-7	IMPLEMENTATION	4.6413340821311835E-7	DESIGN	3.1036079917336554E-7	TEST	3.037930142311695E-7	DOCUMENTATION	3.027635810963124E-7	DEFECT
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999646246141689	WITHOUT_CLASSIFICATION	2.5626134045946657E-5	IMPLEMENTATION	4.527491210773106E-6	DEFECT	2.3690938678966456E-6	DOCUMENTATION	1.4982449162849307E-6	TEST	1.3544217900365073E-6	DESIGN
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999782550021328	WITHOUT_CLASSIFICATION	1.6888976071272013E-5	IMPLEMENTATION	1.4869457839261404E-6	TEST	1.4461791328458796E-6	DOCUMENTATION	1.088493202605041E-6	DEFECT	8.344036766203985E-7	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979217918429542	WITHOUT_CLASSIFICATION	0.0015495023733948787	IMPLEMENTATION	4.116778463240922E-4	DEFECT	6.974650955987165E-5	DESIGN	4.3283380286399124E-5	DOCUMENTATION	3.998047480523398E-6	TEST
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999970768003947	WITHOUT_CLASSIFICATION	1.4855905527727867E-6	IMPLEMENTATION	5.138885037740687E-7	DOCUMENTATION	3.4358807212447204E-7	TEST	3.33281162502066E-7	DEFECT	2.4685131411456085E-7	DESIGN
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999890598299183	WITHOUT_CLASSIFICATION	4.032512269431175E-6	IMPLEMENTATION	3.765645691110058E-6	DEFECT	1.2489649633258145E-6	DOCUMENTATION	9.564466831250666E-7	TEST	9.366004747671342E-7	DESIGN
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9996882891465523	WITHOUT_CLASSIFICATION	3.1065586595376075E-4	DESIGN	7.331193445132559E-7	TEST	1.4116108102473996E-7	DEFECT	1.342938859624463E-7	DOCUMENTATION	4.6413182348127496E-8	IMPLEMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.999858803100828	WITHOUT_CLASSIFICATION	1.2561035167832016E-4	DEFECT	1.3577367952355758E-5	DESIGN	9.854702005000343E-7	IMPLEMENTATION	7.603065426516102E-7	TEST	2.634027982405338E-7	DOCUMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9995900916644431	WITHOUT_CLASSIFICATION	2.988043186241389E-4	DESIGN	7.750267034043002E-5	DEFECT	2.809522208330896E-5	IMPLEMENTATION	4.494381553718939E-6	DOCUMENTATION	1.0117429552410074E-6	TEST
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999852672853268	WITHOUT_CLASSIFICATION	7.277827888484688E-6	DESIGN	3.0033482491915596E-6	DEFECT	1.8923091084121693E-6	DOCUMENTATION	1.7114361014283003E-6	TEST	8.477933256655538E-7	IMPLEMENTATION
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999031966001835	WITHOUT_CLASSIFICATION	5.259974886272417E-5	DESIGN	4.3733402901352576E-5	DEFECT	2.1906410935634007E-7	DOCUMENTATION	1.9996232942556582E-7	IMPLEMENTATION	5.122161379655048E-8	TEST
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999341178440834	WITHOUT_CLASSIFICATION	4.4907705637879714E-5	IMPLEMENTATION	1.1374898446581014E-5	DESIGN	5.135155079369292E-6	DEFECT	3.2213317481882594E-6	DOCUMENTATION	1.2430650045532323E-6	TEST
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999814270685495	WITHOUT_CLASSIFICATION	1.0796377977753308E-5	IMPLEMENTATION	3.9578040464612544E-6	DESIGN	2.3373438190743465E-6	DEFECT	1.039350100882534E-6	DOCUMENTATION	4.420555063562676E-7	TEST
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999495164759968	WITHOUT_CLASSIFICATION	3.694939646658305E-5	IMPLEMENTATION	8.457381662875797E-6	DESIGN	3.5339489166509014E-6	DOCUMENTATION	9.761611387753116E-7	DEFECT	5.666358182262533E-7	TEST
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999376884453606	WITHOUT_CLASSIFICATION	5.228018356430352E-5	IMPLEMENTATION	4.419496628430508E-6	DEFECT	2.7285679741069185E-6	DESIGN	1.9036706055363716E-6	DOCUMENTATION	9.796358669072688E-7	TEST
// not null is implicit	WITHOUT_CLASSIFICATION	0.9995918123533503	WITHOUT_CLASSIFICATION	2.133712505639163E-4	DESIGN	1.3066221903729276E-4	IMPLEMENTATION	5.2648836118952376E-5	DEFECT	9.326943199044379E-6	TEST	2.17839773063319E-6	DOCUMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999990274773158	WITHOUT_CLASSIFICATION	4.603777625342564E-7	DEFECT	3.240884672632855E-7	DESIGN	1.294154303871586E-7	IMPLEMENTATION	4.0567461453681335E-8	DOCUMENTATION	1.8073562479398423E-8	TEST
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9964530114809003	WITHOUT_CLASSIFICATION	0.0035445808629827884	IMPLEMENTATION	8.79894082056734E-7	DESIGN	8.30180892743011E-7	DOCUMENTATION	4.1485620559890057E-7	TEST	2.8272493666900287E-7	DEFECT
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9997361365119395	WITHOUT_CLASSIFICATION	1.98539913473001E-4	IMPLEMENTATION	3.5640720683330576E-5	DESIGN	2.7363001122117036E-5	DEFECT	1.4509528965014731E-6	DOCUMENTATION	8.688998855006589E-7	TEST
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999314267379702	WITHOUT_CLASSIFICATION	5.2819860721097196E-5	IMPLEMENTATION	9.380153371190288E-6	DESIGN	6.154714990483558E-6	TEST	1.7575202708516206E-7	DOCUMENTATION	4.2780919837039376E-8	DEFECT
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999455187451695	WITHOUT_CLASSIFICATION	5.3225216923460585E-5	DESIGN	8.321153566652443E-7	DEFECT	3.7582197283867394E-7	IMPLEMENTATION	2.895227921971981E-8	DOCUMENTATION	1.9148298342514597E-8	TEST
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.999741455931305	WITHOUT_CLASSIFICATION	2.2863826812742272E-4	DESIGN	1.7580789035975515E-5	TEST	9.867877768180519E-6	DEFECT	2.0990875058997123E-6	DOCUMENTATION	3.580462573514422E-7	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999701656711206	WITHOUT_CLASSIFICATION	2.8938865165262077E-5	DESIGN	6.395844006391695E-7	IMPLEMENTATION	1.6209262005292555E-7	DEFECT	5.1796511126397456E-8	DOCUMENTATION	4.1990182240290356E-8	TEST
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999999758335744	WITHOUT_CLASSIFICATION	1.1016332984774305E-7	DESIGN	6.895934935139414E-8	DOCUMENTATION	5.020234833330681E-8	IMPLEMENTATION	1.087790641084829E-8	DEFECT	1.4613220296837643E-9	TEST
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9990827562092297	WITHOUT_CLASSIFICATION	5.760115210310511E-4	IMPLEMENTATION	2.619134463885433E-4	DESIGN	4.946721638853517E-5	TEST	2.557293009507615E-5	DOCUMENTATION	4.278676867060252E-6	DEFECT
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.999976025073009	WITHOUT_CLASSIFICATION	1.9151782451849688E-5	IMPLEMENTATION	4.135646590290788E-6	DESIGN	5.918539084237014E-7	TEST	5.0735671323192624E-8	DEFECT	4.4908369218061124E-8	DOCUMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.997349860915555	WITHOUT_CLASSIFICATION	0.0026115652963823476	DESIGN	2.307187557418895E-5	DEFECT	7.967160155990602E-6	DOCUMENTATION	5.680529828111069E-6	TEST	1.854222504472124E-6	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9992800619689055	WITHOUT_CLASSIFICATION	5.517132848180354E-4	DESIGN	1.1763232660513537E-4	IMPLEMENTATION	3.0929800049582466E-5	DOCUMENTATION	1.9317237006328888E-5	TEST	3.4538261540007E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979217918429542	WITHOUT_CLASSIFICATION	0.0015495023733948787	IMPLEMENTATION	4.116778463240922E-4	DEFECT	6.974650955987165E-5	DESIGN	4.3283380286399124E-5	DOCUMENTATION	3.998047480523398E-6	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999762125256636	WITHOUT_CLASSIFICATION	1.2629335599910899E-5	TEST	7.405334105788565E-6	DESIGN	1.998297131778752E-6	IMPLEMENTATION	9.533873405563006E-7	DEFECT	8.011201581958271E-7	DOCUMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9930094556055413	WITHOUT_CLASSIFICATION	0.006959599508565152	DESIGN	2.5991202999289635E-5	DEFECT	3.592286767018431E-6	TEST	7.671187878530264E-7	IMPLEMENTATION	5.942773394343924E-7	DOCUMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999263818289323	WITHOUT_CLASSIFICATION	7.251619327395356E-5	IMPLEMENTATION	5.100953509430156E-7	DEFECT	4.4818430246746056E-7	DESIGN	8.25627435456243E-8	TEST	6.113539672977016E-8	DOCUMENTATION
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999981826666625	WITHOUT_CLASSIFICATION	1.1465510799081236E-6	IMPLEMENTATION	4.109808011431491E-7	DEFECT	1.936349190211425E-7	DESIGN	4.982623919679101E-8	DOCUMENTATION	1.6340298221936445E-8	TEST
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.993252184775395	WITHOUT_CLASSIFICATION	0.0042425470869637385	IMPLEMENTATION	0.0016835293945257302	DEFECT	7.694410306019413E-4	DESIGN	2.8818915237189284E-5	DOCUMENTATION	2.3478797276483055E-5	TEST
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999965997590022	WITHOUT_CLASSIFICATION	2.320251773932304E-6	IMPLEMENTATION	6.639573041941867E-7	DESIGN	3.129667182530492E-7	DEFECT	6.246220311273371E-8	DOCUMENTATION	4.060299832060917E-8	TEST
// function templates	WITHOUT_CLASSIFICATION	0.9999854537956201	WITHOUT_CLASSIFICATION	1.184867487375444E-5	IMPLEMENTATION	1.0229403636442647E-6	DESIGN	8.153195550409748E-7	TEST	5.323723689228102E-7	DEFECT	3.268972186285377E-7	DOCUMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.9997326576634737	WITHOUT_CLASSIFICATION	1.7802034832581267E-4	DESIGN	5.8996208459402E-5	DEFECT	1.5496028200356975E-5	IMPLEMENTATION	1.1424610121987086E-5	TEST	3.4051414187342657E-6	DOCUMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9957994015127646	WITHOUT_CLASSIFICATION	0.0040415355430515314	DESIGN	7.286356914922945E-5	DEFECT	4.171045966675699E-5	DOCUMENTATION	4.0746080092696024E-5	TEST	3.7428352752185664E-6	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.999936924500648	WITHOUT_CLASSIFICATION	4.020008534028601E-5	DEFECT	2.0011624000440266E-5	DESIGN	1.5970735281521346E-6	IMPLEMENTATION	9.486348296955219E-7	DOCUMENTATION	3.180816535069789E-7	TEST
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999985287686466	WITHOUT_CLASSIFICATION	8.049422316650982E-7	IMPLEMENTATION	3.8314411165010537E-7	DESIGN	1.9131812250827944E-7	DEFECT	4.613504303843213E-8	DOCUMENTATION	4.569184454222812E-8	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999699278380745	WITHOUT_CLASSIFICATION	1.9206662989583977E-5	IMPLEMENTATION	8.304436816400133E-6	DESIGN	1.7215883028217893E-6	DEFECT	6.384639913917258E-7	DOCUMENTATION	2.010098252344524E-7	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999979349272043	WITHOUT_CLASSIFICATION	1.4415451735709916E-6	IMPLEMENTATION	3.8782038782400616E-7	DESIGN	1.753587354313066E-7	DEFECT	3.681435529530505E-8	DOCUMENTATION	2.3534143476138978E-8	TEST
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999996705764542	WITHOUT_CLASSIFICATION	2.0024250988327637E-7	DESIGN	1.0414852874617451E-7	IMPLEMENTATION	1.334261318120721E-8	DOCUMENTATION	8.134000740576996E-9	TEST	3.5558932319956236E-9	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979217918429542	WITHOUT_CLASSIFICATION	0.0015495023733948787	IMPLEMENTATION	4.116778463240922E-4	DEFECT	6.974650955987165E-5	DESIGN	4.3283380286399124E-5	DOCUMENTATION	3.998047480523398E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979217918429542	WITHOUT_CLASSIFICATION	0.0015495023733948787	IMPLEMENTATION	4.116778463240922E-4	DEFECT	6.974650955987165E-5	DESIGN	4.3283380286399124E-5	DOCUMENTATION	3.998047480523398E-6	TEST
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9995618090596634	WITHOUT_CLASSIFICATION	4.3164138212631477E-4	DESIGN	5.45182051670921E-6	DEFECT	7.581584218924703E-7	IMPLEMENTATION	2.37275304391289E-7	DOCUMENTATION	1.023039672321524E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9998271220758166	WITHOUT_CLASSIFICATION	1.701054487648051E-4	IMPLEMENTATION	2.197363706612574E-6	TEST	2.762456789366417E-7	DOCUMENTATION	2.7013085598406337E-7	DESIGN	2.8735177140928888E-8	DEFECT
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9997470294375733	WITHOUT_CLASSIFICATION	2.22737727004086E-4	DESIGN	2.194191733552572E-5	IMPLEMENTATION	6.410850777569128E-6	TEST	1.6268693516544358E-6	DOCUMENTATION	2.5319795785831137E-7	DEFECT
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9990312985471463	WITHOUT_CLASSIFICATION	9.087862516516244E-4	DESIGN	3.333897295643741E-5	DEFECT	1.208522949004433E-5	TEST	7.94159318115343E-6	IMPLEMENTATION	6.54940557434527E-6	DOCUMENTATION
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9337457949561142	WITHOUT_CLASSIFICATION	0.06357708450207346	IMPLEMENTATION	0.0011874967334921673	DESIGN	0.0011838746833167867	DEFECT	1.9157557079728352E-4	TEST	1.1417355420612237E-4	DOCUMENTATION
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999742062845847	WITHOUT_CLASSIFICATION	1.5490777749972825E-5	DESIGN	9.280324452188965E-6	IMPLEMENTATION	7.205620863648856E-7	TEST	1.9035047015920825E-7	DEFECT	1.1170065665535398E-7	DOCUMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.999973169369019	WITHOUT_CLASSIFICATION	2.3780617534278714E-5	IMPLEMENTATION	1.351626540935626E-6	DESIGN	7.346739710745548E-7	TEST	5.775396046965389E-7	DOCUMENTATION	3.861733298804794E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979217918429542	WITHOUT_CLASSIFICATION	0.0015495023733948787	IMPLEMENTATION	4.116778463240922E-4	DEFECT	6.974650955987165E-5	DESIGN	4.3283380286399124E-5	DOCUMENTATION	3.998047480523398E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999982193352929	WITHOUT_CLASSIFICATION	1.1579975082014146E-5	IMPLEMENTATION	5.319834111509546E-6	DESIGN	8.671707864952643E-7	DEFECT	2.5968236966897837E-8	TEST	1.3698853887298546E-8	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9981483260556224	WITHOUT_CLASSIFICATION	0.001844913582282801	DESIGN	2.276674785644211E-6	IMPLEMENTATION	2.0252478611612357E-6	TEST	1.2309270833694404E-6	DOCUMENTATION	1.2275123645940895E-6	DEFECT
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9997863997697376	WITHOUT_CLASSIFICATION	2.088928713924835E-4	DESIGN	1.7893716946570415E-6	IMPLEMENTATION	1.2716618746263406E-6	DOCUMENTATION	8.938599204028921E-7	DEFECT	7.524653802640342E-7	TEST
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9997373248399907	WITHOUT_CLASSIFICATION	2.356364191617751E-4	IMPLEMENTATION	1.950997054294136E-5	DESIGN	4.005624433648856E-6	DOCUMENTATION	3.0892358381707536E-6	DEFECT	4.339100328422349E-7	TEST
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9748629728995913	WITHOUT_CLASSIFICATION	0.025076345813951403	DESIGN	2.3655525338306734E-5	DEFECT	1.840190682320252E-5	IMPLEMENTATION	1.3359228954036984E-5	TEST	5.264625341624599E-6	DOCUMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.9999997392928873	WITHOUT_CLASSIFICATION	1.095731341899151E-7	DOCUMENTATION	8.866927080452182E-8	IMPLEMENTATION	3.459290437586381E-8	TEST	1.8193568391316703E-8	DEFECT	9.678234929941734E-9	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9967552008360161	WITHOUT_CLASSIFICATION	0.002240573261620505	DESIGN	3.059997711743128E-4	TEST	3.0513762412901315E-4	DOCUMENTATION	2.1112684642552555E-4	DEFECT	1.8196166063468014E-4	IMPLEMENTATION
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999915384102254	WITHOUT_CLASSIFICATION	5.096958105729642E-6	IMPLEMENTATION	1.8285920728811247E-6	DOCUMENTATION	1.2326842632041079E-6	DEFECT	1.6968377700298842E-7	DESIGN	1.3367155570155383E-7	TEST
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999949960080158	WITHOUT_CLASSIFICATION	3.189270314359943E-6	IMPLEMENTATION	1.2897690703766605E-6	DOCUMENTATION	3.4378207619387566E-7	DEFECT	1.1654109672493926E-7	TEST	6.462942658673525E-8	DESIGN
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9985162814816072	WITHOUT_CLASSIFICATION	0.0012000737806110108	IMPLEMENTATION	1.7409330105105122E-4	DEFECT	9.144657724673666E-5	DESIGN	1.278324716991335E-5	DOCUMENTATION	5.321612314032921E-6	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999762125256636	WITHOUT_CLASSIFICATION	1.2629335599910899E-5	TEST	7.405334105788565E-6	DESIGN	1.998297131778752E-6	IMPLEMENTATION	9.533873405563006E-7	DEFECT	8.011201581958271E-7	DOCUMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9929567023987934	WITHOUT_CLASSIFICATION	0.005023903234624163	DEFECT	0.0017714238868897587	DESIGN	1.690874871967015E-4	IMPLEMENTATION	4.3781204022689395E-5	DOCUMENTATION	3.5101788473259355E-5	TEST
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.999997957076265	WITHOUT_CLASSIFICATION	1.5519937217389267E-6	DESIGN	3.155994416803398E-7	TEST	1.3522405342491667E-7	DEFECT	3.1072769640037734E-8	DOCUMENTATION	9.033748558791228E-9	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9862936504425607	WITHOUT_CLASSIFICATION	0.013533783859048612	DEFECT	1.249005784181366E-4	TEST	4.301382727049108E-5	DESIGN	4.6182046669855845E-6	DOCUMENTATION	3.30880350017071E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999762125256636	WITHOUT_CLASSIFICATION	1.2629335599910899E-5	TEST	7.405334105788565E-6	DESIGN	1.998297131778752E-6	IMPLEMENTATION	9.533873405563006E-7	DEFECT	8.011201581958271E-7	DOCUMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999991066323071	WITHOUT_CLASSIFICATION	6.6815981326388E-7	DESIGN	1.1882905917328042E-7	DOCUMENTATION	6.437351902669493E-8	IMPLEMENTATION	3.503481450583187E-8	TEST	6.970487076847159E-9	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999982193352929	WITHOUT_CLASSIFICATION	1.1579975082014146E-5	IMPLEMENTATION	5.319834111509546E-6	DESIGN	8.671707864952643E-7	DEFECT	2.5968236966897837E-8	TEST	1.3698853887298546E-8	DOCUMENTATION
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9976884191375464	WITHOUT_CLASSIFICATION	0.0022536772593631	DESIGN	2.7534322968454556E-5	DEFECT	2.631737463375897E-5	IMPLEMENTATION	2.914293910127462E-6	DOCUMENTATION	1.1376115782655048E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979217918429542	WITHOUT_CLASSIFICATION	0.0015495023733948787	IMPLEMENTATION	4.116778463240922E-4	DEFECT	6.974650955987165E-5	DESIGN	4.3283380286399124E-5	DOCUMENTATION	3.998047480523398E-6	TEST
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9928243525192839	WITHOUT_CLASSIFICATION	0.004342719315256609	DESIGN	0.002146231218709465	DEFECT	4.692179943042273E-4	TEST	1.9657189361984396E-4	IMPLEMENTATION	2.0907058825935332E-5	DOCUMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979217918429542	WITHOUT_CLASSIFICATION	0.0015495023733948787	IMPLEMENTATION	4.116778463240922E-4	DEFECT	6.974650955987165E-5	DESIGN	4.3283380286399124E-5	DOCUMENTATION	3.998047480523398E-6	TEST
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9774715734058141	DESIGN	0.022238037699632677	WITHOUT_CLASSIFICATION	2.414939218018459E-4	DEFECT	4.754490900511364E-5	TEST	1.1436328639790132E-6	IMPLEMENTATION	2.064308822839125E-7	DOCUMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999985287686466	WITHOUT_CLASSIFICATION	8.049422316650982E-7	IMPLEMENTATION	3.8314411165010537E-7	DESIGN	1.9131812250827944E-7	DEFECT	4.613504303843213E-8	DOCUMENTATION	4.569184454222812E-8	TEST
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999699278380745	WITHOUT_CLASSIFICATION	1.9206662989583977E-5	IMPLEMENTATION	8.304436816400133E-6	DESIGN	1.7215883028217893E-6	DEFECT	6.384639913917258E-7	DOCUMENTATION	2.010098252344524E-7	TEST
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999979349272043	WITHOUT_CLASSIFICATION	1.4415451735709916E-6	IMPLEMENTATION	3.8782038782400616E-7	DESIGN	1.753587354313066E-7	DEFECT	3.681435529530505E-8	DOCUMENTATION	2.3534143476138978E-8	TEST
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999998322822641	WITHOUT_CLASSIFICATION	1.3510128760230024E-7	TEST	1.0562264197333307E-8	DOCUMENTATION	1.0466225829141745E-8	DEFECT	8.93947451206317E-9	DESIGN	2.6484837154318926E-9	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.9999856147837154	WITHOUT_CLASSIFICATION	8.848451291818611E-6	IMPLEMENTATION	2.029495694915433E-6	DESIGN	1.809911172837046E-6	DOCUMENTATION	1.4620437224095734E-6	TEST	2.3531440261180355E-7	DEFECT
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.999994350988404	WITHOUT_CLASSIFICATION	1.755725587529046E-6	DESIGN	1.61556299866006E-6	TEST	1.0986407314883592E-6	IMPLEMENTATION	6.893603438820251E-7	DEFECT	4.897219346479781E-7	DOCUMENTATION
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999837013557878	WITHOUT_CLASSIFICATION	1.606463110817227E-5	DEFECT	1.0462001149260536E-7	DESIGN	7.728518680905017E-8	TEST	3.045738255525782E-8	IMPLEMENTATION	2.1650523019913013E-8	DOCUMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999087575208246	WITHOUT_CLASSIFICATION	8.783790032513802E-5	DEFECT	3.3478913680784134E-6	DESIGN	3.183146090002253E-8	TEST	2.341659839258523E-8	IMPLEMENTATION	1.439422918456329E-9	DOCUMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979217918429542	WITHOUT_CLASSIFICATION	0.0015495023733948787	IMPLEMENTATION	4.116778463240922E-4	DEFECT	6.974650955987165E-5	DESIGN	4.3283380286399124E-5	DOCUMENTATION	3.998047480523398E-6	TEST
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999762125256636	WITHOUT_CLASSIFICATION	1.2629335599910899E-5	TEST	7.405334105788565E-6	DESIGN	1.998297131778752E-6	IMPLEMENTATION	9.533873405563006E-7	DEFECT	8.011201581958271E-7	DOCUMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999996705764542	WITHOUT_CLASSIFICATION	2.0024250988327637E-7	DESIGN	1.0414852874617451E-7	IMPLEMENTATION	1.334261318120721E-8	DOCUMENTATION	8.134000740576996E-9	TEST	3.5558932319956236E-9	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9995618090596634	WITHOUT_CLASSIFICATION	4.3164138212631477E-4	DESIGN	5.45182051670921E-6	DEFECT	7.581584218924703E-7	IMPLEMENTATION	2.37275304391289E-7	DOCUMENTATION	1.023039672321524E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989213479206	WITHOUT_CLASSIFICATION	3.2827269397733355E-7	DEFECT	2.8302265265787904E-7	DESIGN	2.606142366858316E-7	IMPLEMENTATION	1.3236185803627934E-7	DOCUMENTATION	7.438063811561938E-8	TEST
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999791602817282	WITHOUT_CLASSIFICATION	1.3539228457709646E-5	DEFECT	6.866627478498688E-6	DESIGN	2.486738067565536E-7	DOCUMENTATION	1.572762915983274E-7	TEST	2.791223740481961E-8	IMPLEMENTATION
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999938377556893	WITHOUT_CLASSIFICATION	5.58384060109578E-6	DESIGN	1.917417073749404E-7	TEST	1.863715159499405E-7	DEFECT	1.3601649906427736E-7	DOCUMENTATION	6.427398742948062E-8	IMPLEMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999946991063999	WITHOUT_CLASSIFICATION	4.002314415971068E-6	DEFECT	4.056267251816635E-7	DOCUMENTATION	3.7427949110272757E-7	IMPLEMENTATION	3.0787550934410744E-7	DESIGN	2.1079745833156226E-7	TEST
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9998490503032982	WITHOUT_CLASSIFICATION	1.463531103398425E-4	DESIGN	3.203685844290015E-6	TEST	8.886757963795713E-7	DEFECT	3.7015135296979025E-7	IMPLEMENTATION	1.3407336833348428E-7	DOCUMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999714948263299	WITHOUT_CLASSIFICATION	2.742643903062357E-5	DESIGN	1.022375135045218E-6	IMPLEMENTATION	3.808003873097283E-8	DEFECT	1.6932826408735988E-8	TEST	1.3466393442133594E-9	DOCUMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997533334745644	WITHOUT_CLASSIFICATION	1.9437802538666154E-4	IMPLEMENTATION	2.1769497240884387E-5	DEFECT	1.836383880859652E-5	DESIGN	7.180930769509933E-6	DOCUMENTATION	4.97423322988171E-6	TEST
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9805157359487229	WITHOUT_CLASSIFICATION	0.019464493106389234	DESIGN	1.7303888201280167E-5	DEFECT	2.1950050194581464E-6	TEST	1.726129981326655E-7	IMPLEMENTATION	9.94386689739298E-8	DOCUMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9971379845795328	WITHOUT_CLASSIFICATION	0.001872928473559625	DESIGN	9.40539094394743E-4	IMPLEMENTATION	4.406952385325545E-5	TEST	3.2844008502768686E-6	DOCUMENTATION	1.1939278093759228E-6	DEFECT
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999684501243689	WITHOUT_CLASSIFICATION	2.8616080451866166E-5	DESIGN	9.97549352449681E-7	DEFECT	8.98016720225712E-7	TEST	8.452215456523672E-7	IMPLEMENTATION	1.9300756098227668E-7	DOCUMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999988784824101	WITHOUT_CLASSIFICATION	5.706293460367745E-7	DESIGN	4.2271358695406307E-7	DEFECT	5.4937208962537124E-8	IMPLEMENTATION	4.914048541773923E-8	DOCUMENTATION	2.4096962436235257E-8	TEST
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999993967294097	WITHOUT_CLASSIFICATION	4.1742760923430414E-7	IMPLEMENTATION	1.050719372840489E-7	DESIGN	3.740040161318895E-8	DOCUMENTATION	2.2585703397962184E-8	DEFECT	2.0784938645565096E-8	TEST
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991125520062436	WITHOUT_CLASSIFICATION	7.505882688353542E-4	IMPLEMENTATION	8.588323415405376E-5	DESIGN	3.545242592159176E-5	DEFECT	8.057382517014502E-6	TEST	7.466682328514298E-6	DOCUMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998351280364675	WITHOUT_CLASSIFICATION	9.951103487015512E-5	IMPLEMENTATION	3.836998813422275E-5	DESIGN	1.9098470754442456E-5	DEFECT	4.165727666446524E-6	DOCUMENTATION	3.7267421073023588E-6	TEST
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997991050171492	WITHOUT_CLASSIFICATION	1.815020917708379E-4	DESIGN	1.692689678302567E-5	IMPLEMENTATION	1.5763772801898116E-6	TEST	4.6534901007336335E-7	DEFECT	4.242680065246457E-7	DOCUMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999993967294097	WITHOUT_CLASSIFICATION	4.1742760923430414E-7	IMPLEMENTATION	1.050719372840489E-7	DESIGN	3.740040161318895E-8	DOCUMENTATION	2.2585703397962184E-8	DEFECT	2.0784938645565096E-8	TEST
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.999968370218169	WITHOUT_CLASSIFICATION	1.81452522030091E-5	DESIGN	9.769349274206514E-6	DEFECT	1.6012176473823845E-6	DOCUMENTATION	1.5843856202549643E-6	IMPLEMENTATION	5.295770862258718E-7	TEST
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999459851324084	WITHOUT_CLASSIFICATION	2.8715813564457416E-5	DESIGN	1.8084454003956406E-5	IMPLEMENTATION	6.550773299049181E-6	DEFECT	5.115350361928691E-7	DOCUMENTATION	1.5229168776968243E-7	TEST
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998301783311329	WITHOUT_CLASSIFICATION	9.120149850243161E-4	DEFECT	4.430637825459217E-4	DESIGN	3.1391840631627793E-4	IMPLEMENTATION	1.8277954189851926E-5	DOCUMENTATION	1.0941560594592253E-5	TEST
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992290478264604	WITHOUT_CLASSIFICATION	4.4298314280773773E-4	IMPLEMENTATION	2.4226843553220694E-4	DESIGN	7.258096109607721E-5	DEFECT	8.660454093832896E-6	DOCUMENTATION	4.459180009821652E-6	TEST
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9995527996455997	WITHOUT_CLASSIFICATION	2.335074962615936E-4	DEFECT	1.9354615009266996E-4	DESIGN	1.786414870816202E-5	IMPLEMENTATION	1.730024447451711E-6	TEST	5.525348903903681E-7	DOCUMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979217918429542	WITHOUT_CLASSIFICATION	0.0015495023733948787	IMPLEMENTATION	4.116778463240922E-4	DEFECT	6.974650955987165E-5	DESIGN	4.3283380286399124E-5	DOCUMENTATION	3.998047480523398E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979217918429542	WITHOUT_CLASSIFICATION	0.0015495023733948787	IMPLEMENTATION	4.116778463240922E-4	DEFECT	6.974650955987165E-5	DESIGN	4.3283380286399124E-5	DOCUMENTATION	3.998047480523398E-6	TEST
/*<String>*/	WITHOUT_CLASSIFICATION	0.999565755929935	WITHOUT_CLASSIFICATION	2.381715455600765E-4	DESIGN	6.125572299535553E-5	DOCUMENTATION	5.8850724522384796E-5	DEFECT	3.8507121313477095E-5	TEST	3.745895567374059E-5	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998728998239882	WITHOUT_CLASSIFICATION	1.2274306306564586E-4	IMPLEMENTATION	2.818406149215663E-6	DESIGN	9.304847413901118E-7	DEFECT	3.8274632578461664E-7	DOCUMENTATION	2.2547572981862224E-7	TEST
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998571262545218	WITHOUT_CLASSIFICATION	1.2896317564102224E-4	DESIGN	9.699915390836355E-6	IMPLEMENTATION	2.2814512453032134E-6	DEFECT	1.02821873704272E-6	TEST	9.00984463911521E-7	DOCUMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999999758335744	WITHOUT_CLASSIFICATION	1.1016332984774305E-7	DESIGN	6.895934935139414E-8	DOCUMENTATION	5.020234833330681E-8	IMPLEMENTATION	1.087790641084829E-8	DEFECT	1.4613220296837643E-9	TEST
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999168603493205	WITHOUT_CLASSIFICATION	7.533203838596695E-5	DESIGN	4.661633105160634E-6	TEST	2.0421795902012372E-6	DOCUMENTATION	6.274548098073231E-7	DEFECT	4.763447883193444E-7	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9996839399729377	WITHOUT_CLASSIFICATION	2.140184286368589E-4	DESIGN	9.02275500786806E-5	DEFECT	8.405184924476568E-6	IMPLEMENTATION	2.6579750536637564E-6	DOCUMENTATION	7.508883685100455E-7	TEST
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999941288137494	WITHOUT_CLASSIFICATION	3.6669273247289456E-6	DEFECT	1.0998915592922607E-6	IMPLEMENTATION	8.859665716098297E-7	DESIGN	1.2964681181845358E-7	DOCUMENTATION	8.875398312657066E-8	TEST
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999799531384947	WITHOUT_CLASSIFICATION	1.832943398521778E-5	DESIGN	1.6806618657952427E-6	TEST	1.8168361267606064E-8	IMPLEMENTATION	1.650050951120292E-8	DOCUMENTATION	2.0967832832788794E-9	DEFECT
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999979078357938	WITHOUT_CLASSIFICATION	1.1705030947844248E-6	DEFECT	4.125121558600171E-7	DESIGN	3.0381778284314155E-7	TEST	1.1045200453378926E-7	DOCUMENTATION	9.487916809063332E-8	IMPLEMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999285149539786	WITHOUT_CLASSIFICATION	6.354862291581566E-5	IMPLEMENTATION	5.9849103133700286E-6	DESIGN	1.0866780972805826E-6	DEFECT	5.624055464408598E-7	DOCUMENTATION	3.024291484869041E-7	TEST
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999246925254266	WITHOUT_CLASSIFICATION	6.570022738779716E-5	IMPLEMENTATION	3.1400671686192867E-6	DOCUMENTATION	2.49220191441394E-6	DESIGN	2.350237679412099E-6	DEFECT	1.6247404231713892E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9986516789934132	WITHOUT_CLASSIFICATION	0.0011729718643430907	DESIGN	8.954263502556767E-5	IMPLEMENTATION	4.855496646078607E-5	DOCUMENTATION	2.8591379952871772E-5	TEST	8.660160804398131E-6	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.999998181361631	WITHOUT_CLASSIFICATION	1.7051381088094435E-6	DESIGN	1.000568031352513E-7	DOCUMENTATION	7.034578267729402E-9	TEST	5.9967364957696125E-9	DEFECT	4.1214225931186806E-10	IMPLEMENTATION
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9996784403990636	WITHOUT_CLASSIFICATION	3.1879348711425203E-4	IMPLEMENTATION	1.2043622390385739E-6	DEFECT	1.144885512036769E-6	DOCUMENTATION	2.645663250468781E-7	DESIGN	1.522997460354898E-7	TEST
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999988855573412	WITHOUT_CLASSIFICATION	9.029346884634288E-7	DESIGN	1.1110205501500405E-7	IMPLEMENTATION	5.034623363283634E-8	TEST	4.563520361007966E-8	DEFECT	4.424478055126566E-9	DOCUMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999357962475063	WITHOUT_CLASSIFICATION	4.3512966099918306E-5	IMPLEMENTATION	1.8875218266302044E-5	DESIGN	8.306511968463494E-7	DEFECT	8.118329685158564E-7	TEST	1.7308396209309653E-7	DOCUMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9997271141885555	WITHOUT_CLASSIFICATION	2.667461693545234E-4	DESIGN	3.1324212557618794E-6	DEFECT	1.9656205082421533E-6	TEST	5.987833360748623E-7	IMPLEMENTATION	4.42816989896986E-7	DOCUMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999934716156319	WITHOUT_CLASSIFICATION	5.7939400380203715E-6	IMPLEMENTATION	5.45039219942134E-7	DESIGN	1.1706573968942114E-7	DEFECT	4.25217485607932E-8	TEST	2.9817621869351575E-8	DOCUMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9998621855373521	WITHOUT_CLASSIFICATION	6.497587877175317E-5	IMPLEMENTATION	6.123337053611054E-5	DESIGN	6.451689285241031E-6	TEST	4.7436289853381375E-6	DOCUMENTATION	4.0989506955711214E-7	DEFECT
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99991579954803	WITHOUT_CLASSIFICATION	7.46383151303487E-5	IMPLEMENTATION	5.081965888386445E-6	DESIGN	2.587647897316826E-6	DOCUMENTATION	1.7985312415451565E-6	TEST	9.399181244392226E-8	DEFECT
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9973607536935433	WITHOUT_CLASSIFICATION	0.0026237384705162857	IMPLEMENTATION	1.2269517511903221E-5	DESIGN	1.2286248933534272E-6	DOCUMENTATION	1.2067793464674147E-6	TEST	8.02914188678434E-7	DEFECT
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999997368713493	WITHOUT_CLASSIFICATION	1.7012597941012E-6	DESIGN	5.425722037770248E-7	IMPLEMENTATION	2.593851826017496E-7	TEST	8.991026049161617E-8	DOCUMENTATION	3.8159066067231505E-8	DEFECT
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999735316321298	WITHOUT_CLASSIFICATION	2.3449752769600545E-5	DESIGN	1.7862380385416618E-6	DEFECT	9.599774050766059E-7	IMPLEMENTATION	2.1500177246589396E-7	TEST	5.739788445411288E-8	DOCUMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999165192004678	WITHOUT_CLASSIFICATION	2.939783523261161E-5	IMPLEMENTATION	2.057833561279529E-5	DOCUMENTATION	1.7632283065069153E-5	DESIGN	1.282785857779553E-5	TEST	3.0444870439951815E-6	DEFECT
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999072442694912	WITHOUT_CLASSIFICATION	9.051230600269355E-5	IMPLEMENTATION	1.01902651916533E-6	TEST	6.332331918822414E-7	DOCUMENTATION	4.191773346627375E-7	DESIGN	1.7198746050822196E-7	DEFECT
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999958485611364	WITHOUT_CLASSIFICATION	3.1094297833001796E-6	IMPLEMENTATION	7.120240478011311E-7	DESIGN	2.717672984353329E-7	TEST	3.83121368416415E-8	DOCUMENTATION	1.9905597152953928E-8	DEFECT
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999983660911682	WITHOUT_CLASSIFICATION	7.260522867280733E-7	IMPLEMENTATION	6.702889745178706E-7	DESIGN	9.14209362222466E-8	TEST	7.935766414179869E-8	DEFECT	6.678897014923351E-8	DOCUMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999998063339637	WITHOUT_CLASSIFICATION	1.5142694202528892E-6	IMPLEMENTATION	1.800396119707418E-7	DEFECT	1.1132662945690934E-7	DESIGN	9.849524831309597E-8	TEST	3.252945290137369E-8	DOCUMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.999990631613501	WITHOUT_CLASSIFICATION	7.314697242337909E-6	DESIGN	1.6452868286846006E-6	DEFECT	3.133035572607497E-7	IMPLEMENTATION	6.924288971591426E-8	TEST	2.5855981088007283E-8	DOCUMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999603840268396	WITHOUT_CLASSIFICATION	2.638638807251617E-5	DESIGN	6.913267385284681E-6	IMPLEMENTATION	5.274311423869558E-6	DEFECT	7.103951107532927E-7	DOCUMENTATION	3.31611167992753E-7	TEST
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999980200465219	WITHOUT_CLASSIFICATION	1.6156406020811321E-6	IMPLEMENTATION	2.3055729594262827E-7	DESIGN	6.452988276385129E-8	TEST	5.1423297501045123E-8	DEFECT	1.7802399732962733E-8	DOCUMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.999777727004274	WITHOUT_CLASSIFICATION	1.0512608657462556E-4	DESIGN	6.103197741325711E-5	DEFECT	5.2414575353731106E-5	IMPLEMENTATION	2.4172775581899283E-6	DOCUMENTATION	1.2830788261920093E-6	TEST
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999023944504596	WITHOUT_CLASSIFICATION	8.972728899823637E-5	DESIGN	6.1354595987644796E-6	IMPLEMENTATION	1.2987828496333652E-6	TEST	3.8907431307270555E-7	DOCUMENTATION	5.4943780793810176E-8	DEFECT
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999723338859345	WITHOUT_CLASSIFICATION	1.5030189895319152E-5	IMPLEMENTATION	1.1096694679119687E-5	DESIGN	8.31443622661008E-7	TEST	5.803679169433794E-7	DEFECT	1.274179512941145E-7	DOCUMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9994352282507072	WITHOUT_CLASSIFICATION	5.493259841002239E-4	DESIGN	1.2456387025034368E-5	DEFECT	1.2456649070265308E-6	TEST	1.1468140967984838E-6	IMPLEMENTATION	5.968991637824824E-7	DOCUMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9916887276824236	WITHOUT_CLASSIFICATION	0.007644865223499826	DEFECT	6.121343403675653E-4	DESIGN	4.6361343247092735E-5	TEST	5.886882515321036E-6	IMPLEMENTATION	2.0245279467292918E-6	DOCUMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999933201237201	WITHOUT_CLASSIFICATION	2.11610612756294E-6	DESIGN	1.6419416187104248E-6	DEFECT	1.4455537686486997E-6	DOCUMENTATION	1.2376247417420446E-6	IMPLEMENTATION	2.3865002322707774E-7	TEST
// continue loop	WITHOUT_CLASSIFICATION	0.9999848995196465	WITHOUT_CLASSIFICATION	1.1003603570895742E-5	DEFECT	1.8878561158785918E-6	DESIGN	1.215464728517601E-6	IMPLEMENTATION	8.87487771837968E-7	DOCUMENTATION	1.0606816634811217E-7	TEST
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9997647469925267	WITHOUT_CLASSIFICATION	2.021738841428131E-4	IMPLEMENTATION	1.6197073359750235E-5	TEST	1.2856533094554886E-5	DEFECT	2.4384241258249258E-6	DOCUMENTATION	1.5870927503001709E-6	DESIGN
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.999750751577579	WITHOUT_CLASSIFICATION	2.2978761072291857E-4	IMPLEMENTATION	1.1518383126982726E-5	TEST	5.118273920388347E-6	DEFECT	2.1934753793933113E-6	DOCUMENTATION	6.306792712803901E-7	DESIGN
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999741941064606	WITHOUT_CLASSIFICATION	1.9074532978736145E-5	TEST	3.2244537732759868E-6	IMPLEMENTATION	1.3678851370003096E-6	DESIGN	1.2671097403921139E-6	DEFECT	8.719119100160004E-7	DOCUMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999573882259846	WITHOUT_CLASSIFICATION	3.10527052260691E-5	DESIGN	9.059581795483217E-6	DEFECT	1.4543981629157747E-6	IMPLEMENTATION	5.256834267057107E-7	DOCUMENTATION	5.194054043648672E-7	TEST
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9940166097218711	WITHOUT_CLASSIFICATION	0.005607366850499075	DESIGN	3.566510117199906E-4	IMPLEMENTATION	6.986628205053618E-6	TEST	6.5297087224343894E-6	DOCUMENTATION	5.856078982504159E-6	DEFECT
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9998447729309625	WITHOUT_CLASSIFICATION	1.4931561639137898E-4	DESIGN	2.4465565613233513E-6	IMPLEMENTATION	1.2116469928727573E-6	DOCUMENTATION	1.1714929993501145E-6	TEST	1.0817560924300532E-6	DEFECT
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999752419989764	WITHOUT_CLASSIFICATION	2.3220063191109356E-5	DESIGN	1.2799576862652688E-6	DEFECT	2.1300257465497827E-7	IMPLEMENTATION	3.032077331462573E-8	DOCUMENTATION	1.4656798416437765E-8	TEST
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9661330398568866	WITHOUT_CLASSIFICATION	0.03331691909915467	IMPLEMENTATION	2.2635605463162674E-4	TEST	2.087178109740978E-4	DOCUMENTATION	1.1346356811922649E-4	DESIGN	1.5036102337991648E-6	DEFECT
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999976697141839	WITHOUT_CLASSIFICATION	1.365477055918528E-6	DESIGN	9.318374768846042E-7	TEST	2.004954839674355E-8	DEFECT	1.2906985194379602E-8	DOCUMENTATION	1.4749507902163983E-11	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999925311925859	WITHOUT_CLASSIFICATION	6.790296743520695E-6	DESIGN	6.193915972963271E-7	DEFECT	3.201418367903319E-8	TEST	1.794705884466964E-8	IMPLEMENTATION	9.157830660264537E-9	DOCUMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999690093678336	WITHOUT_CLASSIFICATION	1.581902064638717E-5	DESIGN	1.4102735549579993E-5	TEST	6.283464166287683E-7	DOCUMENTATION	2.5367321015278295E-7	IMPLEMENTATION	1.8685634368907058E-7	DEFECT
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999881095917624	WITHOUT_CLASSIFICATION	7.1782306678184885E-6	DESIGN	2.9364221277870874E-6	IMPLEMENTATION	9.639920487107072E-7	DEFECT	5.446481005546404E-7	DOCUMENTATION	2.6711529264310584E-7	TEST
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9998770143601349	WITHOUT_CLASSIFICATION	4.642533550593571E-5	TEST	3.6021920839537135E-5	IMPLEMENTATION	2.1898848872693003E-5	DESIGN	1.79138558670852E-5	DOCUMENTATION	7.256787798155766E-7	DEFECT
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999959761215526	WITHOUT_CLASSIFICATION	3.6340672212103234E-6	DESIGN	2.101290050621871E-7	TEST	1.2275658043250037E-7	DOCUMENTATION	5.5317642498585514E-8	DEFECT	1.6079981708798407E-9	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999397096334498	WITHOUT_CLASSIFICATION	3.901647571224533E-5	IMPLEMENTATION	1.98619689952176E-5	TEST	8.765299306736662E-7	DESIGN	4.379738317892664E-7	DOCUMENTATION	9.741808021575527E-8	DEFECT
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9119570030547341	WITHOUT_CLASSIFICATION	0.08735966276625459	IMPLEMENTATION	6.03385007462752E-4	TEST	4.23010272254886E-5	DESIGN	2.779045733751528E-5	DEFECT	9.8576869856152E-6	DOCUMENTATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999119200274811	WITHOUT_CLASSIFICATION	5.450838426157517E-5	IMPLEMENTATION	2.9193164643307204E-5	DESIGN	2.7977741609918637E-6	DOCUMENTATION	1.060229045075497E-6	DEFECT	5.204204079539571E-7	TEST
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9923039712485563	WITHOUT_CLASSIFICATION	0.006127078538276548	DESIGN	9.810664709858708E-4	IMPLEMENTATION	5.182325928270099E-4	DEFECT	4.663497725640807E-5	TEST	2.301617209789152E-5	DOCUMENTATION
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999995108861641	WITHOUT_CLASSIFICATION	3.1968154385659166E-7	IMPLEMENTATION	8.275809002127538E-8	DEFECT	4.3354622433947855E-8	DESIGN	3.5937853723195046E-8	DOCUMENTATION	7.381725788699675E-9	TEST
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9991554062176247	WITHOUT_CLASSIFICATION	8.031302198701814E-4	DESIGN	2.76302302166646E-5	DEFECT	1.1800232639341734E-5	IMPLEMENTATION	1.0644459507165418E-6	TEST	9.686536984889024E-7	DOCUMENTATION
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.999932456371943	WITHOUT_CLASSIFICATION	5.375777613682921E-5	IMPLEMENTATION	1.1201890476394177E-5	DESIGN	1.4825514760660397E-6	DOCUMENTATION	7.627598942884042E-7	TEST	3.386500734369862E-7	DEFECT
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999701427927009	WITHOUT_CLASSIFICATION	9.930689208277814E-6	DEFECT	8.6308927763009E-6	IMPLEMENTATION	7.668425400173993E-6	DESIGN	3.242154395773803E-6	DOCUMENTATION	3.850455184668833E-7	TEST
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999712663020315	WITHOUT_CLASSIFICATION	2.520330901484658E-5	IMPLEMENTATION	2.0333769515434252E-6	DESIGN	6.954972616587526E-7	DOCUMENTATION	6.800537621741533E-7	DEFECT	1.214609782456637E-7	TEST
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999868876959811	WITHOUT_CLASSIFICATION	5.729928564201294E-6	IMPLEMENTATION	4.828361559229651E-6	DEFECT	1.035183098107832E-6	DOCUMENTATION	7.728392703562039E-7	TEST	7.459915269905655E-7	DESIGN
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.999981306083723	WITHOUT_CLASSIFICATION	9.274206971129576E-6	IMPLEMENTATION	4.328424550064186E-6	DESIGN	4.184822123533214E-6	DEFECT	7.564980168036173E-7	TEST	1.499646154668445E-7	DOCUMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999824806636647	WITHOUT_CLASSIFICATION	1.5558202903255527E-5	IMPLEMENTATION	1.3572314937289234E-6	DESIGN	3.451860724174633E-7	DEFECT	1.9115989575658641E-7	DOCUMENTATION	6.755597015760179E-8	TEST
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999995958641326	WITHOUT_CLASSIFICATION	2.037627887177264E-7	DESIGN	8.95593617328967E-8	TEST	7.587232330386141E-8	DEFECT	2.5290161806178724E-8	DOCUMENTATION	9.651231787395125E-9	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999812494746603	WITHOUT_CLASSIFICATION	1.0092507698876742E-5	DESIGN	5.95322060838222E-6	DEFECT	1.2159269639646654E-6	DOCUMENTATION	9.653295598087103E-7	TEST	5.235405087579818E-7	IMPLEMENTATION
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999833095899475	WITHOUT_CLASSIFICATION	1.6440439712074618E-5	DEFECT	1.552514516278306E-7	IMPLEMENTATION	7.514869326342417E-8	DESIGN	1.2215862090175964E-8	TEST	7.354333524389067E-9	DOCUMENTATION
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9998458443435505	WITHOUT_CLASSIFICATION	5.062975873469893E-5	DESIGN	5.0268559329039445E-5	IMPLEMENTATION	4.9585257318875836E-5	DEFECT	3.161242037002866E-6	TEST	5.108390299195586E-7	DOCUMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9944105549969862	WITHOUT_CLASSIFICATION	0.0028919642057098982	IMPLEMENTATION	0.0025773913166202197	DEFECT	6.690491079135902E-5	DESIGN	4.560678598457612E-5	TEST	7.577783907780613E-6	DOCUMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999141650848722	WITHOUT_CLASSIFICATION	7.144191355877962E-5	IMPLEMENTATION	6.595920339926018E-6	DEFECT	5.1626697176075385E-6	DOCUMENTATION	1.6141079775793212E-6	DESIGN	1.0203035339729929E-6	TEST
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999831973329497	WITHOUT_CLASSIFICATION	9.206984336447981E-6	DEFECT	6.390410679293519E-6	DESIGN	6.673338204876281E-7	IMPLEMENTATION	3.415720614591145E-7	DOCUMENTATION	1.9636615269069824E-7	TEST
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999905064557155	WITHOUT_CLASSIFICATION	3.2308516865801466E-6	IMPLEMENTATION	2.902905831524562E-6	DOCUMENTATION	1.4372488244117974E-6	DEFECT	1.2299750829186008E-6	DESIGN	6.925628589890796E-7	TEST
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999971965928695	WITHOUT_CLASSIFICATION	1.0699883168062363E-6	DOCUMENTATION	8.866548503919547E-7	IMPLEMENTATION	4.059242511670168E-7	DESIGN	2.685941889129851E-7	TEST	1.722455233991817E-7	DEFECT
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999636062495577	WITHOUT_CLASSIFICATION	1.2879270820220782E-5	DESIGN	1.1591023363264561E-5	IMPLEMENTATION	8.50563076890965E-6	DEFECT	3.1557025068935796E-6	DOCUMENTATION	2.6212298310162033E-7	TEST
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.999997868104212	WITHOUT_CLASSIFICATION	7.041749149049586E-7	DESIGN	5.700300272897639E-7	IMPLEMENTATION	4.3700801756126703E-7	DEFECT	2.1245334423002652E-7	TEST	2.0822948400026937E-7	DOCUMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.9999540235988558	WITHOUT_CLASSIFICATION	3.0478797126543804E-5	DEFECT	5.939232288993261E-6	DESIGN	5.2995279820258505E-6	IMPLEMENTATION	2.7659571661748633E-6	DOCUMENTATION	1.4928865804611876E-6	TEST
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9983190820506794	WITHOUT_CLASSIFICATION	0.001353178623664124	DESIGN	2.8064884262369845E-4	DEFECT	2.27379530213969E-5	TEST	2.1279162821493268E-5	IMPLEMENTATION	3.0733671898932657E-6	DOCUMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9996974624811895	WITHOUT_CLASSIFICATION	1.6094433070754284E-4	DESIGN	9.523521062798537E-5	IMPLEMENTATION	2.7833723145813768E-5	TEST	1.54330251213898E-5	DEFECT	3.091229207621869E-6	DOCUMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9831384559517887	WITHOUT_CLASSIFICATION	0.016783425878847964	DESIGN	6.067997183198983E-5	TEST	9.53945353412762E-6	DEFECT	5.567901539574722E-6	IMPLEMENTATION	2.330842457618355E-6	DOCUMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999986233484494	WITHOUT_CLASSIFICATION	1.1747743380055007E-6	IMPLEMENTATION	6.793042909467948E-8	DESIGN	6.128164704494067E-8	DEFECT	4.669743817102644E-8	TEST	2.5967698284070297E-8	DOCUMENTATION
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9978319868589332	WITHOUT_CLASSIFICATION	0.0020797917220484346	DESIGN	6.0331105840969895E-5	IMPLEMENTATION	2.132968077015635E-5	DEFECT	4.497628947385418E-6	TEST	2.063003459870476E-6	DOCUMENTATION
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9988578298962778	WITHOUT_CLASSIFICATION	0.0010627776107657238	DESIGN	4.887627378821536E-5	DEFECT	1.805607900278707E-5	TEST	1.1794836790744626E-5	DOCUMENTATION	6.653033746221791E-7	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.997498293549879	WITHOUT_CLASSIFICATION	0.0023666790545409425	DESIGN	7.844977650898284E-5	DEFECT	3.424192586921837E-5	TEST	1.9755103072160642E-5	DOCUMENTATION	2.5805901296419506E-6	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9995806142671616	WITHOUT_CLASSIFICATION	3.139408173137711E-4	IMPLEMENTATION	7.908075165574658E-5	DESIGN	1.5491055071535966E-5	DOCUMENTATION	1.0850081687834893E-5	TEST	2.3027109623745444E-8	DEFECT
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.999918918397432	WITHOUT_CLASSIFICATION	4.22569281306417E-5	DOCUMENTATION	2.1517320341046852E-5	TEST	1.460761741224935E-5	DESIGN	1.721301481524262E-6	IMPLEMENTATION	9.78435202602165E-7	DEFECT
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9994317046405041	WITHOUT_CLASSIFICATION	4.3936046849029145E-4	DESIGN	7.653330273015694E-5	IMPLEMENTATION	2.2962458337951344E-5	DOCUMENTATION	1.6366286545567343E-5	DEFECT	1.307284339205751E-5	TEST
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999983814443704	WITHOUT_CLASSIFICATION	1.4873745759175672E-6	DEFECT	1.1362746453447863E-7	IMPLEMENTATION	1.0610505473826918E-8	DOCUMENTATION	3.7330287898387375E-9	TEST	3.2100550298149282E-9	DESIGN
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9998230398879262	WITHOUT_CLASSIFICATION	1.7284240550680588E-4	DESIGN	2.7268298164520615E-6	IMPLEMENTATION	8.365609993163752E-7	DEFECT	4.924376007086772E-7	TEST	6.187815036917388E-8	DOCUMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.9999895975609627	WITHOUT_CLASSIFICATION	5.181340516157882E-6	DESIGN	1.936494266945124E-6	IMPLEMENTATION	1.5921012230451723E-6	TEST	1.1306822250514302E-6	DOCUMENTATION	5.618208060054752E-7	DEFECT
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9996217358221995	WITHOUT_CLASSIFICATION	3.754560607578312E-4	DESIGN	1.937984331888129E-6	DEFECT	5.622063867963771E-7	TEST	2.3756462822691462E-7	DOCUMENTATION	7.036169579314747E-8	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9969280812635146	WITHOUT_CLASSIFICATION	0.003054824432515539	DESIGN	1.1764691287675265E-5	TEST	3.874121119167111E-6	DOCUMENTATION	1.0809455742703905E-6	DEFECT	3.745459888943074E-7	IMPLEMENTATION
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999996358905239	WITHOUT_CLASSIFICATION	2.6630936551796375E-7	DESIGN	5.820777159736561E-8	DEFECT	2.9541699003121178E-8	TEST	9.995825495671274E-9	DOCUMENTATION	5.481452226812944E-11	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999846643023885	WITHOUT_CLASSIFICATION	6.53441989875179E-6	DESIGN	5.057246030516394E-6	IMPLEMENTATION	2.9665704568178383E-6	DEFECT	5.002720341320086E-7	DOCUMENTATION	2.771891913024595E-7	TEST
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.999943282614626	WITHOUT_CLASSIFICATION	3.5463983527589906E-5	IMPLEMENTATION	1.0242656574242308E-5	DESIGN	5.030295678755859E-6	DEFECT	4.615602947501481E-6	DOCUMENTATION	1.3648466459336621E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9998694517247687	WITHOUT_CLASSIFICATION	1.1703065205440283E-4	DESIGN	7.0661343661195286E-6	DEFECT	2.768702150504901E-6	TEST	2.6543803208488313E-6	IMPLEMENTATION	1.028406339340065E-6	DOCUMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9998501499979847	WITHOUT_CLASSIFICATION	9.585382153987137E-5	IMPLEMENTATION	4.399577129050879E-5	DESIGN	7.591597291990491E-6	DEFECT	1.4713870411066098E-6	TEST	9.374248516113913E-7	DOCUMENTATION
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999792572298312	WITHOUT_CLASSIFICATION	1.0181824867345089E-5	IMPLEMENTATION	3.6859054686389746E-6	TEST	2.938258605088573E-6	DESIGN	2.8188920698912038E-6	DEFECT	1.1178891577534139E-6	DOCUMENTATION
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999490971429396	WITHOUT_CLASSIFICATION	3.049617584937745E-5	DEFECT	9.081212187723333E-6	DESIGN	5.13749593364908E-6	IMPLEMENTATION	4.410493659165952E-6	DOCUMENTATION	1.777479430682889E-6	TEST
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9994384683418325	WITHOUT_CLASSIFICATION	4.838669194182331E-4	DESIGN	6.709142863825507E-5	IMPLEMENTATION	5.3104609228097505E-6	TEST	2.8158646936445338E-6	DOCUMENTATION	2.4469844943864057E-6	DEFECT
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9998583328907337	WITHOUT_CLASSIFICATION	1.261098463993019E-4	DESIGN	7.448576047989646E-6	DEFECT	3.298524889186449E-6	IMPLEMENTATION	2.7190614016658314E-6	TEST	2.0911005281024016E-6	DOCUMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999600066058953	WITHOUT_CLASSIFICATION	2.027322751612758E-5	IMPLEMENTATION	7.6001126078106215E-6	DEFECT	4.359378677426187E-6	TEST	4.0881224499796185E-6	DOCUMENTATION	3.672552853309546E-6	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9999354135708485	WITHOUT_CLASSIFICATION	3.137980157754964E-5	IMPLEMENTATION	3.0386990532794097E-5	DESIGN	1.8381555662511434E-6	DOCUMENTATION	6.874207507972406E-7	TEST	2.940607241999298E-7	DEFECT
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999962069768749	WITHOUT_CLASSIFICATION	2.87337004084805E-6	IMPLEMENTATION	4.827048148261388E-7	DESIGN	3.3243940821251194E-7	DEFECT	9.338209563507401E-8	DOCUMENTATION	1.1126765630629447E-8	TEST
// do the work	WITHOUT_CLASSIFICATION	0.9994985646153309	WITHOUT_CLASSIFICATION	2.7067500022881236E-4	IMPLEMENTATION	1.521986979401969E-4	DESIGN	3.673921692244856E-5	DOCUMENTATION	2.924637505805876E-5	DEFECT	1.257609451946269E-5	TEST
// We've been here before	WITHOUT_CLASSIFICATION	0.9999464811387303	WITHOUT_CLASSIFICATION	4.237861337459617E-5	IMPLEMENTATION	4.853037378620847E-6	DEFECT	3.763667576775536E-6	TEST	1.448725081528777E-6	DESIGN	1.0748178581653352E-6	DOCUMENTATION
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999877420913952	WITHOUT_CLASSIFICATION	9.443306072142289E-6	DESIGN	2.0321792534158595E-6	TEST	2.74932591541039E-7	IMPLEMENTATION	2.668854783722675E-7	DOCUMENTATION	2.4060520933110176E-7	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9994985646153309	WITHOUT_CLASSIFICATION	2.7067500022881236E-4	IMPLEMENTATION	1.521986979401969E-4	DESIGN	3.673921692244856E-5	DOCUMENTATION	2.924637505805876E-5	DEFECT	1.257609451946269E-5	TEST
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999996595673419	WITHOUT_CLASSIFICATION	2.1127262994704416E-7	DESIGN	8.253442551905909E-8	TEST	3.5997768682040824E-8	IMPLEMENTATION	8.042871629435106E-9	DEFECT	2.5849620723584624E-9	DOCUMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.9999996244872957	WITHOUT_CLASSIFICATION	3.171175403765139E-7	IMPLEMENTATION	2.9209983982201796E-8	TEST	1.1786565832919514E-8	DEFECT	1.089038482162084E-8	DOCUMENTATION	6.508229344008011E-9	DESIGN
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.999310285048191	WITHOUT_CLASSIFICATION	6.129518024530307E-4	IMPLEMENTATION	4.094276767741636E-5	DESIGN	1.861374157240501E-5	DOCUMENTATION	1.4251383343471247E-5	TEST	2.955256762681807E-6	DEFECT
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9027782046556271	WITHOUT_CLASSIFICATION	0.09483570060578678	IMPLEMENTATION	0.0014906920376658143	DESIGN	5.34896658045111E-4	DEFECT	2.417511145772551E-4	DOCUMENTATION	1.187549282980259E-4	TEST
// force initialize!	WITHOUT_CLASSIFICATION	0.9999991823962618	WITHOUT_CLASSIFICATION	4.74140874585226E-7	DESIGN	1.3501321767234086E-7	IMPLEMENTATION	9.052630818173035E-8	DEFECT	8.192825907770461E-8	DOCUMENTATION	3.599507857637106E-8	TEST
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999995275271298	WITHOUT_CLASSIFICATION	2.2402655195842113E-7	IMPLEMENTATION	1.3933494987710592E-7	DESIGN	6.123993045919317E-8	TEST	3.859444117218357E-8	DEFECT	9.276996606669703E-9	DOCUMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9997278212976186	WITHOUT_CLASSIFICATION	1.854124332667597E-4	IMPLEMENTATION	4.133847632034167E-5	DESIGN	2.026966487204136E-5	DEFECT	1.4276648717974375E-5	DOCUMENTATION	1.0881479204282737E-5	TEST
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.999994690107987	WITHOUT_CLASSIFICATION	2.0239119204288505E-6	DEFECT	1.8761584157549776E-6	IMPLEMENTATION	9.395825559372398E-7	DESIGN	2.8143303377408445E-7	TEST	1.888060871117233E-7	DOCUMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.99983995398085	WITHOUT_CLASSIFICATION	7.781466494213678E-5	IMPLEMENTATION	6.832221603646273E-5	DESIGN	1.2262603657319299E-5	DEFECT	1.3241288865873914E-6	TEST	3.2240562737305894E-7	DOCUMENTATION
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999298294007068	WITHOUT_CLASSIFICATION	5.3526396287245114E-5	IMPLEMENTATION	7.176183927014298E-6	DEFECT	4.2396796775554886E-6	DOCUMENTATION	3.2626707862965287E-6	DESIGN	1.9656686149147557E-6	TEST
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999986152426186	WITHOUT_CLASSIFICATION	8.104279825329412E-7	DESIGN	4.2733138524036836E-7	DEFECT	8.091256234956456E-8	DOCUMENTATION	5.422150106467291E-8	IMPLEMENTATION	1.18639502808733E-8	TEST
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9998873673404	WITHOUT_CLASSIFICATION	5.357627367511243E-5	DESIGN	3.507510135368048E-5	DEFECT	1.755684788479662E-5	IMPLEMENTATION	5.122184322198358E-6	TEST	1.3022523641874543E-6	DOCUMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9998898127354942	WITHOUT_CLASSIFICATION	9.63289063743104E-5	DESIGN	1.1123073333241437E-5	IMPLEMENTATION	1.5943131337771532E-6	TEST	1.0400545674039014E-6	DOCUMENTATION	1.0091709705889763E-7	DEFECT
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999815276459566	WITHOUT_CLASSIFICATION	1.749947544013231E-5	DESIGN	7.395714791472336E-7	TEST	2.2463038172265788E-7	DEFECT	7.023563849009407E-9	DOCUMENTATION	1.653178708204696E-9	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999722211942872	WITHOUT_CLASSIFICATION	2.709974314939658E-5	DESIGN	6.345617097611494E-7	IMPLEMENTATION	2.6256643833854346E-8	TEST	1.5780559273373752E-8	DEFECT	2.4636507415009757E-9	DOCUMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9998796437312616	WITHOUT_CLASSIFICATION	6.53600685607696E-5	DESIGN	3.145812361049311E-5	IMPLEMENTATION	2.0555733636925595E-5	DEFECT	2.4816210819875326E-6	TEST	5.007218481303704E-7	DOCUMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9922208651763387	WITHOUT_CLASSIFICATION	0.005846552685955031	IMPLEMENTATION	8.91046195445825E-4	DESIGN	5.522557216962272E-4	DEFECT	2.9277711634539E-4	DOCUMENTATION	1.965031042189672E-4	TEST
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9922208651763387	WITHOUT_CLASSIFICATION	0.005846552685955031	IMPLEMENTATION	8.91046195445825E-4	DESIGN	5.522557216962272E-4	DEFECT	2.9277711634539E-4	DOCUMENTATION	1.965031042189672E-4	TEST
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999972818749092	WITHOUT_CLASSIFICATION	2.3221743390517242E-6	DESIGN	2.1302038838267497E-7	IMPLEMENTATION	1.7320286445030358E-7	DEFECT	8.538344304775865E-9	TEST	1.1891546280410865E-9	DOCUMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.9997399111101403	WITHOUT_CLASSIFICATION	2.0219157108035087E-4	DEFECT	2.7168947782888113E-5	DOCUMENTATION	1.5120630294540546E-5	IMPLEMENTATION	7.883723726476388E-6	DESIGN	7.724016975405352E-6	TEST
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999717903911256	WITHOUT_CLASSIFICATION	2.3620408336712426E-5	DEFECT	2.520953731825211E-6	DOCUMENTATION	1.032949862268308E-6	TEST	8.009387442046326E-7	IMPLEMENTATION	2.3435819927216716E-7	DESIGN
//re-snapshot	WITHOUT_CLASSIFICATION	0.9997868917117269	WITHOUT_CLASSIFICATION	1.5080780760268114E-4	DESIGN	2.9981424527530998E-5	IMPLEMENTATION	1.1246554025314461E-5	DEFECT	1.0887954850920582E-5	DOCUMENTATION	1.0184547266786988E-5	TEST
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999933966729414	WITHOUT_CLASSIFICATION	5.00478268238556E-6	DESIGN	7.796267329071377E-7	DOCUMENTATION	6.40156804566372E-7	IMPLEMENTATION	1.276198562342165E-7	DEFECT	5.114098245349752E-8	TEST
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.5205888958672906	WITHOUT_CLASSIFICATION	0.47837532878346745	DEFECT	8.65670789966644E-4	DESIGN	1.174616995128237E-4	TEST	3.5353386631326196E-5	DOCUMENTATION	1.7289473131169368E-5	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9999491479475499	WITHOUT_CLASSIFICATION	2.7100371339367917E-5	DEFECT	1.765183032490665E-5	IMPLEMENTATION	4.264996524745526E-6	DOCUMENTATION	9.40302748336386E-7	TEST	8.945515127973546E-7	DESIGN
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999970451810796	WITHOUT_CLASSIFICATION	2.805420979028049E-6	DESIGN	8.215480710968166E-8	DEFECT	5.814882155934132E-8	DOCUMENTATION	7.663489936952791E-9	IMPLEMENTATION	1.4308228366738E-9	TEST
// copied from Session:	WITHOUT_CLASSIFICATION	0.999995727895693	WITHOUT_CLASSIFICATION	3.2075420646809975E-6	DESIGN	5.433494004592767E-7	DEFECT	2.6515540822915745E-7	IMPLEMENTATION	1.4719246401095063E-7	TEST	1.0886496960164952E-7	DOCUMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9998689594376718	WITHOUT_CLASSIFICATION	6.425300487553105E-5	DESIGN	4.852968456919423E-5	DEFECT	9.690082816208286E-6	TEST	5.676967523645169E-6	IMPLEMENTATION	2.8908225436157045E-6	DOCUMENTATION
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9496200783293957	WITHOUT_CLASSIFICATION	0.05037716579637031	DESIGN	1.0202068570638305E-6	DOCUMENTATION	8.707792876755059E-7	DEFECT	8.600241067381519E-7	TEST	4.863982549605676E-9	IMPLEMENTATION
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999888807413909	WITHOUT_CLASSIFICATION	9.452762011077818E-6	DESIGN	1.589302858440789E-6	DOCUMENTATION	6.19468591052406E-8	IMPLEMENTATION	1.3649631194348126E-8	TEST	1.5972492979887575E-9	DEFECT
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.999938133199624	WITHOUT_CLASSIFICATION	5.969850310928365E-5	DESIGN	1.0727062527737461E-6	IMPLEMENTATION	9.085991114711407E-7	DOCUMENTATION	1.0244778293243787E-7	DEFECT	8.454411958459748E-8	TEST
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.999900035776711	WITHOUT_CLASSIFICATION	5.109869120757236E-5	DESIGN	4.141241079247125E-5	IMPLEMENTATION	6.977941315925923E-6	DEFECT	2.916281185308768E-7	TEST	1.8355185455504285E-7	DOCUMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.999996162423408	WITHOUT_CLASSIFICATION	2.4266794315276884E-6	IMPLEMENTATION	1.3349156961737837E-6	DESIGN	4.701282785399424E-8	DEFECT	2.4901730713198046E-8	DOCUMENTATION	4.066905618613573E-9	TEST
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9998621855373521	WITHOUT_CLASSIFICATION	6.497587877175317E-5	IMPLEMENTATION	6.123337053611054E-5	DESIGN	6.451689285241031E-6	TEST	4.7436289853381375E-6	DOCUMENTATION	4.0989506955711214E-7	DEFECT
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9998983812193188	WITHOUT_CLASSIFICATION	5.95611081238114E-5	DESIGN	3.8894949414597684E-5	IMPLEMENTATION	2.534442817615754E-6	TEST	3.4122239969922305E-7	DOCUMENTATION	2.8705792535783735E-7	DEFECT
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999863360411546	WITHOUT_CLASSIFICATION	1.1976594549380943E-5	DESIGN	1.1139118098427952E-6	IMPLEMENTATION	3.873777594420318E-7	DEFECT	1.2001908841174233E-7	DOCUMENTATION	6.605563822963351E-8	TEST
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9977496031848964	WITHOUT_CLASSIFICATION	0.0020245918815560144	DESIGN	1.288579286773527E-4	DOCUMENTATION	5.981985921256598E-5	IMPLEMENTATION	1.901837854253359E-5	TEST	1.8108767115283103E-5	DEFECT
//do the test	WITHOUT_CLASSIFICATION	0.9996121285997511	WITHOUT_CLASSIFICATION	3.5695241408668297E-4	TEST	1.886008937300794E-5	IMPLEMENTATION	1.1164498296614139E-5	DOCUMENTATION	5.997907496918306E-7	DESIGN	2.9460774283403907E-7	DEFECT
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999996374446025	WITHOUT_CLASSIFICATION	2.77159042661282E-7	DESIGN	5.6796282818208567E-8	IMPLEMENTATION	1.3739900267256425E-8	TEST	1.062786568653827E-8	DEFECT	4.232306073450262E-9	DOCUMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.9999790877876589	WITHOUT_CLASSIFICATION	9.994321112098703E-6	DEFECT	3.918280306645379E-6	IMPLEMENTATION	2.729096683987629E-6	DESIGN	2.5218422516928156E-6	TEST	1.7486719866567126E-6	DOCUMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999887943205104	WITHOUT_CLASSIFICATION	8.943830115065526E-6	DEFECT	2.182906938991817E-6	DESIGN	4.100773911908701E-8	DOCUMENTATION	3.6664618735269314E-8	TEST	1.2700776445411976E-9	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999974712965691	WITHOUT_CLASSIFICATION	1.4242049534786525E-6	IMPLEMENTATION	6.437599325422715E-7	TEST	1.9679016202887107E-7	DOCUMENTATION	1.47699084471947E-7	DESIGN	1.1624929835584453E-7	DEFECT
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999926903126822	WITHOUT_CLASSIFICATION	3.7059804082351794E-6	IMPLEMENTATION	3.170196897044626E-6	DESIGN	2.765510707674098E-7	DOCUMENTATION	1.0658281428082762E-7	DEFECT	5.0376127389660816E-8	TEST
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9998687874271065	WITHOUT_CLASSIFICATION	1.0255362279611946E-4	IMPLEMENTATION	2.700443870954051E-5	DESIGN	1.1243671068079262E-6	DOCUMENTATION	3.4221582610217436E-7	DEFECT	1.879284548741819E-7	TEST
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999996270228533	WITHOUT_CLASSIFICATION	2.3570482623528872E-7	DEFECT	8.514763245692596E-8	TEST	4.756209975667467E-8	DESIGN	4.293996643729697E-9	DOCUMENTATION	2.6859169408594444E-10	IMPLEMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999594309556736	WITHOUT_CLASSIFICATION	2.441521694272127E-5	DESIGN	1.229344447428283E-5	IMPLEMENTATION	3.6116038467473906E-6	DEFECT	2.1599696586385172E-7	TEST	3.2782096769742924E-8	DOCUMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999178905095286	WITHOUT_CLASSIFICATION	6.0977752443350874E-5	IMPLEMENTATION	1.2404819472529358E-5	TEST	6.537523546318654E-6	DESIGN	2.1120380523398544E-6	DOCUMENTATION	7.735695680357385E-8	DEFECT
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999674630255415	WITHOUT_CLASSIFICATION	2.4997394808185136E-5	DEFECT	3.3946685244039856E-6	DOCUMENTATION	1.9641624586918817E-6	TEST	1.3985088485190486E-6	IMPLEMENTATION	7.822398186662006E-7	DESIGN
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999384775403075	WITHOUT_CLASSIFICATION	5.464200321875766E-5	IMPLEMENTATION	3.4225103011288797E-6	DESIGN	2.2272562767836427E-6	DOCUMENTATION	1.067891178196622E-6	TEST	1.6279871754835368E-7	DEFECT
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999613801702308	WITHOUT_CLASSIFICATION	3.164003185926832E-5	IMPLEMENTATION	2.939483937264189E-6	DESIGN	2.414289635539988E-6	DEFECT	1.1823563668488816E-6	DOCUMENTATION	4.4366797011909447E-7	TEST
//count++;	WITHOUT_CLASSIFICATION	0.9997189027235314	WITHOUT_CLASSIFICATION	1.7463923090213073E-4	DEFECT	5.483882603558601E-5	DESIGN	3.426313845534361E-5	DOCUMENTATION	1.1894946912823261E-5	TEST	5.4611341626154086E-6	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9990776612811673	WITHOUT_CLASSIFICATION	5.632080511032634E-4	DESIGN	1.887613591182532E-4	IMPLEMENTATION	8.755623738947987E-5	TEST	4.79330651524063E-5	DEFECT	3.4880006069231934E-5	DOCUMENTATION
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.999964997317316	WITHOUT_CLASSIFICATION	1.4925259729629929E-5	DEFECT	7.0971516212444174E-6	IMPLEMENTATION	4.876974100505067E-6	DOCUMENTATION	4.136512406449814E-6	DESIGN	3.966784826212051E-6	TEST
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999977235958523	WITHOUT_CLASSIFICATION	7.926711179149085E-7	IMPLEMENTATION	6.485182866255517E-7	DEFECT	5.313105896228355E-7	DESIGN	1.8853011419515252E-7	DOCUMENTATION	1.1537403942708658E-7	TEST
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.999875788744752	WITHOUT_CLASSIFICATION	1.1027725224956294E-4	IMPLEMENTATION	5.763144496924052E-6	DESIGN	4.611367862248353E-6	TEST	2.88900128194609E-6	DOCUMENTATION	6.704893574364561E-7	DEFECT
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9998336535122448	WITHOUT_CLASSIFICATION	7.039445363418384E-5	DEFECT	6.285681308190543E-5	IMPLEMENTATION	1.7790353675048497E-5	DESIGN	8.099852455128401E-6	TEST	7.205014908831819E-6	DOCUMENTATION
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999859640951068	WITHOUT_CLASSIFICATION	9.422204912119864E-6	DESIGN	3.217149936785271E-6	IMPLEMENTATION	9.343315668220078E-7	TEST	3.0269422673245607E-7	DEFECT	1.5952425085977296E-7	DOCUMENTATION
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9998940133402177	WITHOUT_CLASSIFICATION	1.056640430783592E-4	DEFECT	1.3638912488736703E-7	DOCUMENTATION	1.0747226604733409E-7	TEST	6.22056734223544E-8	DESIGN	1.6549639526900968E-8	IMPLEMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.999979553577645	WITHOUT_CLASSIFICATION	1.4449482290854402E-5	DESIGN	4.901901357680618E-6	TEST	6.800688746189762E-7	DOCUMENTATION	3.810363018460123E-7	IMPLEMENTATION	3.393353000050929E-8	DEFECT
// create one	WITHOUT_CLASSIFICATION	0.9999960297327672	WITHOUT_CLASSIFICATION	1.9443127247478367E-6	DESIGN	6.068091090573335E-7	IMPLEMENTATION	5.480817246194818E-7	TEST	4.6229220918082736E-7	DEFECT	4.0877146507843604E-7	DOCUMENTATION
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999868488391356	WITHOUT_CLASSIFICATION	1.138803551109877E-5	DEFECT	1.570825975719041E-6	DESIGN	1.1587650399577209E-7	DOCUMENTATION	6.736642911599841E-8	IMPLEMENTATION	9.056444532161607E-9	TEST
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999603976842159	WITHOUT_CLASSIFICATION	3.9197190989462036E-5	DESIGN	2.6104946090508745E-7	IMPLEMENTATION	5.087682948464793E-8	DEFECT	4.883423496162807E-8	TEST	4.436426946772292E-8	DOCUMENTATION
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.999964502984601	WITHOUT_CLASSIFICATION	3.4459446639201437E-5	DESIGN	8.054597781111076E-7	DEFECT	1.798105000591523E-7	TEST	3.3532873382057165E-8	DOCUMENTATION	1.8765608090793768E-8	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999258648466794	WITHOUT_CLASSIFICATION	7.259092005554311E-5	DESIGN	1.1114201454123968E-6	TEST	2.345328854258172E-7	DEFECT	1.6129986885588258E-7	IMPLEMENTATION	3.6980365459589044E-8	DOCUMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999791191922658	WITHOUT_CLASSIFICATION	1.013871463559435E-5	IMPLEMENTATION	5.816539248782522E-6	DESIGN	1.729693526104706E-6	DOCUMENTATION	1.715492915222415E-6	DEFECT	1.4803674084217017E-6	TEST
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999802647276794	WITHOUT_CLASSIFICATION	1.0040891288285185E-5	DEFECT	7.91127423223983E-6	DESIGN	1.0496199043917246E-6	IMPLEMENTATION	6.441925594341816E-7	TEST	8.929433611707957E-8	DOCUMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999866880334572	WITHOUT_CLASSIFICATION	6.260198624862128E-6	DESIGN	4.788784121197041E-6	DEFECT	9.659156013937364E-7	IMPLEMENTATION	8.828968146492932E-7	TEST	4.141713806512009E-7	DOCUMENTATION
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9094484059981326	WITHOUT_CLASSIFICATION	0.08058071390466863	DESIGN	0.00995115894788696	DEFECT	1.764751280647692E-5	IMPLEMENTATION	1.7825498419981588E-6	TEST	2.9108666337356187E-7	DOCUMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999902875250368	WITHOUT_CLASSIFICATION	7.661226218662812E-6	IMPLEMENTATION	1.4392186297554522E-6	DESIGN	4.478282686228865E-7	DOCUMENTATION	1.026623418532664E-7	DEFECT	6.153950438736951E-8	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9986516789934132	WITHOUT_CLASSIFICATION	0.0011729718643430907	DESIGN	8.954263502556767E-5	IMPLEMENTATION	4.855496646078607E-5	DOCUMENTATION	2.8591379952871772E-5	TEST	8.660160804398131E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9986516789934132	WITHOUT_CLASSIFICATION	0.0011729718643430907	DESIGN	8.954263502556767E-5	IMPLEMENTATION	4.855496646078607E-5	DOCUMENTATION	2.8591379952871772E-5	TEST	8.660160804398131E-6	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999942381091466	WITHOUT_CLASSIFICATION	4.355449305871185E-6	DESIGN	4.4532651941645476E-7	DOCUMENTATION	4.3078859763944603E-7	TEST	3.924330713308868E-7	IMPLEMENTATION	1.3789335908112038E-7	DEFECT
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9507014598706085	WITHOUT_CLASSIFICATION	0.03360658858946689	DESIGN	0.01569086081997023	DEFECT	5.956129968422761E-7	IMPLEMENTATION	2.9734305247106524E-7	TEST	1.977639050038915E-7	DOCUMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.999831371230803	WITHOUT_CLASSIFICATION	1.4945210807088655E-4	DESIGN	1.0975922620710951E-5	DEFECT	5.9996848874146195E-6	IMPLEMENTATION	1.1414105360058395E-6	TEST	1.0596430817951641E-6	DOCUMENTATION
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999196684452116	WITHOUT_CLASSIFICATION	3.450841455833624E-5	IMPLEMENTATION	1.7909390901342963E-5	DEFECT	1.6786603250196258E-5	DESIGN	5.790971671608252E-6	DOCUMENTATION	5.336174406923013E-6	TEST
// don't care...	WITHOUT_CLASSIFICATION	0.999831371230803	WITHOUT_CLASSIFICATION	1.4945210807088655E-4	DESIGN	1.0975922620710951E-5	DEFECT	5.9996848874146195E-6	IMPLEMENTATION	1.1414105360058395E-6	TEST	1.0596430817951641E-6	DOCUMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999426475176872	WITHOUT_CLASSIFICATION	4.556637306681732E-5	DEFECT	8.022732302767739E-6	IMPLEMENTATION	2.0400217412679105E-6	DESIGN	1.5780950404161013E-6	TEST	1.452601615295232E-7	DOCUMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999984075739564	WITHOUT_CLASSIFICATION	7.883644666930091E-7	DEFECT	6.401784004137204E-7	IMPLEMENTATION	6.152766088094569E-8	DOCUMENTATION	5.8811916972054194E-8	TEST	4.354359865408725E-8	DESIGN
// named parameter	WITHOUT_CLASSIFICATION	0.999748166013568	WITHOUT_CLASSIFICATION	2.16289178917019E-4	DESIGN	3.000334253987459E-5	IMPLEMENTATION	2.406574354017229E-6	TEST	1.798051507579557E-6	DEFECT	1.3368391135713197E-6	DOCUMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.999946151807014	WITHOUT_CLASSIFICATION	5.15850181242339E-5	DESIGN	1.1031100888963146E-6	DEFECT	8.665225088796314E-7	IMPLEMENTATION	1.7054674297654528E-7	TEST	1.2299552098236978E-7	DOCUMENTATION
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999958903916188	WITHOUT_CLASSIFICATION	2.628380460576016E-6	DESIGN	5.530496569081941E-7	TEST	4.30015575839779E-7	DOCUMENTATION	4.1846328186589255E-7	IMPLEMENTATION	7.969940599803231E-8	DEFECT
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999812403795675	WITHOUT_CLASSIFICATION	1.2481398569678494E-5	DESIGN	4.919286973945295E-6	TEST	1.174564995774716E-6	DEFECT	1.8144244185799877E-7	DOCUMENTATION	2.927451260444114E-9	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.999986917978839	WITHOUT_CLASSIFICATION	1.2862633789893788E-5	DESIGN	1.577543688289815E-7	IMPLEMENTATION	2.6286791679337704E-8	DOCUMENTATION	2.4005472922461457E-8	TEST	1.1340737691085615E-8	DEFECT
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999838500988304	WITHOUT_CLASSIFICATION	8.29082739008244E-6	IMPLEMENTATION	3.991407512904528E-6	DESIGN	2.3663674795987864E-6	DEFECT	1.3126966878319402E-6	DOCUMENTATION	1.8860209922102284E-7	TEST
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999939255480795	WITHOUT_CLASSIFICATION	5.8149111363355646E-6	IMPLEMENTATION	1.2870919566006994E-7	TEST	9.729430042683267E-8	DESIGN	3.216922371610651E-8	DOCUMENTATION	1.3680642668699477E-9	DEFECT
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9997391786744955	WITHOUT_CLASSIFICATION	1.6700551684858847E-4	IMPLEMENTATION	5.683293149682013E-5	DOCUMENTATION	3.1524532746940535E-5	TEST	2.8942405044919264E-6	DESIGN	2.5641039076659394E-6	DEFECT
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999905294878564	WITHOUT_CLASSIFICATION	5.000482884735203E-6	DESIGN	3.5816794286833064E-6	DEFECT	4.869046398854126E-7	DOCUMENTATION	3.5975724938962225E-7	IMPLEMENTATION	4.168794081162179E-8	TEST
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9594469215726955	WITHOUT_CLASSIFICATION	0.04054210143618347	DESIGN	5.930556843189029E-6	DEFECT	3.243051928108962E-6	IMPLEMENTATION	1.2810123826253449E-6	TEST	5.223699670731787E-7	DOCUMENTATION
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999547519385797	WITHOUT_CLASSIFICATION	2.567821009987692E-5	DEFECT	1.74187725673563E-5	DESIGN	8.960509678671617E-7	DOCUMENTATION	7.343163408394905E-7	TEST	5.207114443064095E-7	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.990640395899662	WITHOUT_CLASSIFICATION	0.009037152922338582	DESIGN	2.466083273705022E-4	DEFECT	7.578511157177812E-5	TEST	5.0073703163479506E-8	DOCUMENTATION	7.665353871334666E-9	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.5780223867684899	WITHOUT_CLASSIFICATION	0.421976377304894	DESIGN	1.175337414256869E-6	DOCUMENTATION	4.677332733653703E-8	TEST	8.01135350212818E-9	DEFECT	5.8045210955457235E-9	IMPLEMENTATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9968188781359923	WITHOUT_CLASSIFICATION	0.003149625844701892	DESIGN	2.0233187720803553E-5	DEFECT	9.8080962500856E-6	IMPLEMENTATION	1.1519544365146213E-6	DOCUMENTATION	3.027808982685628E-7	TEST
//do nothing	WITHOUT_CLASSIFICATION	0.9999882324069969	WITHOUT_CLASSIFICATION	3.6208795157907314E-6	DEFECT	2.823108386059949E-6	IMPLEMENTATION	2.612956443163893E-6	DOCUMENTATION	1.9321177261228742E-6	TEST	7.785309321378421E-7	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999882324069969	WITHOUT_CLASSIFICATION	3.6208795157907314E-6	DEFECT	2.823108386059949E-6	IMPLEMENTATION	2.612956443163893E-6	DOCUMENTATION	1.9321177261228742E-6	TEST	7.785309321378421E-7	DESIGN
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999714898566346	WITHOUT_CLASSIFICATION	1.4655086063957128E-5	DESIGN	7.884543439193095E-6	IMPLEMENTATION	2.7051478847190037E-6	DOCUMENTATION	2.5714314725207193E-6	DEFECT	6.93934505117388E-7	TEST
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999768759452866	WITHOUT_CLASSIFICATION	1.9291078185550596E-5	DEFECT	3.064622190783458E-6	DESIGN	4.2843591755142173E-7	TEST	2.6863285886582303E-7	IMPLEMENTATION	7.128556068394892E-8	DOCUMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999967462545106	WITHOUT_CLASSIFICATION	2.882880113710628E-6	DEFECT	2.533146959005544E-7	IMPLEMENTATION	6.072520623853728E-8	DESIGN	4.11474079499783E-8	TEST	1.5678065645323698E-8	DOCUMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9998909684991927	WITHOUT_CLASSIFICATION	7.434360716981339E-5	DESIGN	3.068531036437584E-5	IMPLEMENTATION	2.1163105517643738E-6	DEFECT	1.4952406284153099E-6	TEST	3.910320930622867E-7	DOCUMENTATION
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9995138713345502	WITHOUT_CLASSIFICATION	4.5748119564649866E-4	DESIGN	2.786524736468363E-5	DEFECT	7.501410417912087E-7	TEST	2.7782324375378262E-8	DOCUMENTATION	4.299072562720955E-9	IMPLEMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999471431569774	WITHOUT_CLASSIFICATION	4.323118309212344E-5	DEFECT	4.529118634550481E-6	IMPLEMENTATION	2.6093331949239762E-6	TEST	2.4070512623429643E-6	DESIGN	8.015683857898117E-8	DOCUMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9411651127208747	WITHOUT_CLASSIFICATION	0.05874040645155422	IMPLEMENTATION	8.581885109561142E-5	DESIGN	5.602557122927455E-6	DEFECT	2.833420313783483E-6	TEST	2.2599903881289666E-7	DOCUMENTATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999276566023131	WITHOUT_CLASSIFICATION	3.544525324414575E-5	DESIGN	1.5633863327549757E-5	DEFECT	1.5245164982252507E-5	IMPLEMENTATION	4.31564836338005E-6	TEST	1.703467769684592E-6	DOCUMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.9999987075611002	WITHOUT_CLASSIFICATION	5.850292053055239E-7	IMPLEMENTATION	2.6542473182913537E-7	TEST	2.194448646823958E-7	DESIGN	1.209394275766529E-7	DEFECT	1.0160067038712949E-7	DOCUMENTATION
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999032278677582	WITHOUT_CLASSIFICATION	9.50433702349299E-5	IMPLEMENTATION	9.597758465668638E-7	DEFECT	3.890797045979099E-7	DOCUMENTATION	3.218118959635692E-7	DESIGN	5.809455977560473E-8	TEST
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999857355821046	WITHOUT_CLASSIFICATION	1.2641438806729757E-5	DESIGN	1.1304062970109001E-6	DEFECT	2.840902326609759E-7	DOCUMENTATION	1.5415854583942023E-7	TEST	5.4324013084545096E-8	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.999999434882681	WITHOUT_CLASSIFICATION	4.60875788059152E-7	DESIGN	6.08642877269069E-8	DOCUMENTATION	4.0122317141449564E-8	DEFECT	1.7602452282175654E-9	TEST	1.494680867892384E-9	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999937756334979	WITHOUT_CLASSIFICATION	3.289709265444162E-6	IMPLEMENTATION	2.3405749037752657E-6	DESIGN	5.222481476086551E-7	DEFECT	4.1645427443201725E-8	TEST	3.0188757830465E-8	DOCUMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999759723353826	WITHOUT_CLASSIFICATION	1.284805859360247E-5	DESIGN	7.576108937236164E-6	DEFECT	2.1948979879371276E-6	TEST	1.3298263570955557E-6	IMPLEMENTATION	7.877274152340998E-8	DOCUMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9997803691238488	WITHOUT_CLASSIFICATION	1.1031689782186821E-4	DESIGN	6.409785495572227E-5	IMPLEMENTATION	2.6731450292705445E-5	DEFECT	1.3017951939466448E-5	DOCUMENTATION	5.466721141380011E-6	TEST
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999988769357053	WITHOUT_CLASSIFICATION	7.470596944095072E-7	DESIGN	2.999754714971394E-7	DEFECT	3.883639553840138E-8	IMPLEMENTATION	1.9905140888554996E-8	DOCUMENTATION	1.728759224433643E-8	TEST
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999997089267549	WITHOUT_CLASSIFICATION	1.68085779191979E-7	DESIGN	7.246369902788561E-8	IMPLEMENTATION	2.4629916982961422E-8	DOCUMENTATION	2.4008982438479858E-8	DEFECT	1.8848673778736146E-9	TEST
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9338490182879038	WITHOUT_CLASSIFICATION	0.05194471107613707	IMPLEMENTATION	0.013372607107731716	DESIGN	4.644888780430927E-4	DOCUMENTATION	1.9451032257287247E-4	DEFECT	1.7466432761147408E-4	TEST
//use the current version	WITHOUT_CLASSIFICATION	0.9999868204013243	WITHOUT_CLASSIFICATION	9.067585029699884E-6	IMPLEMENTATION	1.995090136217535E-6	DOCUMENTATION	1.8310630875795943E-6	DESIGN	1.6092917370437554E-7	DEFECT	1.2493124868120994E-7	TEST
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.999999223437187	WITHOUT_CLASSIFICATION	5.612444201237253E-7	IMPLEMENTATION	2.1160968998251074E-7	DESIGN	2.4830604892876554E-9	DOCUMENTATION	8.366608311429206E-10	DEFECT	3.8898153248718163E-10	TEST
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999819145237638	WITHOUT_CLASSIFICATION	1.5373362824997484E-5	IMPLEMENTATION	2.2266197888237897E-6	DEFECT	3.3698630035407123E-7	DOCUMENTATION	1.0809775655306854E-7	TEST	4.0409565401098595E-8	DESIGN
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9946167209368749	WITHOUT_CLASSIFICATION	0.005369526932670272	IMPLEMENTATION	4.652557653972809E-6	DOCUMENTATION	4.286455261326446E-6	DESIGN	2.9321755981445155E-6	DEFECT	1.8809419413483383E-6	TEST
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9959810867893261	WITHOUT_CLASSIFICATION	0.004017244049377791	IMPLEMENTATION	5.50372730815576E-7	DOCUMENTATION	4.968773292954669E-7	DEFECT	4.906352413950667E-7	TEST	1.312759948087033E-7	DESIGN
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999777910831618	WITHOUT_CLASSIFICATION	2.178274789536262E-5	IMPLEMENTATION	2.527248170308334E-7	DESIGN	1.0211853409145159E-7	DOCUMENTATION	4.813893831352372E-8	DEFECT	2.3186653419737356E-8	TEST
//even process null collections	WITHOUT_CLASSIFICATION	0.9999972869350445	WITHOUT_CLASSIFICATION	1.2471910464469063E-6	IMPLEMENTATION	9.080274390913285E-7	DESIGN	3.347205479904249E-7	DEFECT	1.7034188281944593E-7	DOCUMENTATION	5.278403913327609E-8	TEST
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999975245352618	WITHOUT_CLASSIFICATION	1.995757478928362E-6	DESIGN	1.5035158032586232E-7	DEFECT	1.4460422842639575E-7	DOCUMENTATION	1.3535258538070048E-7	TEST	4.9398865122657714E-8	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999663690369441	WITHOUT_CLASSIFICATION	2.9686782649705163E-5	DESIGN	3.424138522434503E-6	DEFECT	3.815851703018106E-7	TEST	1.3295320840043496E-7	DOCUMENTATION	5.503504980850366E-9	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9985475117167115	WITHOUT_CLASSIFICATION	7.12733694601301E-4	DESIGN	4.333120275002294E-4	IMPLEMENTATION	2.900289863484358E-4	DEFECT	1.2227417318383772E-5	TEST	4.186157520042671E-6	DOCUMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999837906923055	WITHOUT_CLASSIFICATION	5.4663849002323536E-6	DESIGN	4.059390736218638E-6	DEFECT	2.465376236931571E-6	DOCUMENTATION	2.1188621598165667E-6	IMPLEMENTATION	2.0992936613430383E-6	TEST
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999911614409482	WITHOUT_CLASSIFICATION	4.520731524027291E-6	DEFECT	2.100762281710201E-6	DESIGN	1.5951657932175108E-6	IMPLEMENTATION	4.4827895025615885E-7	TEST	1.736205024638614E-7	DOCUMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999100893751321	WITHOUT_CLASSIFICATION	6.659490840576617E-5	DESIGN	1.2370458296837926E-5	DOCUMENTATION	4.554848051162267E-6	TEST	3.910827754515814E-6	DEFECT	2.4795823596318192E-6	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9998494974367643	WITHOUT_CLASSIFICATION	9.478299332191976E-5	DESIGN	2.211834015990001E-5	DEFECT	1.837468844677928E-5	TEST	9.364652142529059E-6	IMPLEMENTATION	5.86188916454377E-6	DOCUMENTATION
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9979384181975599	WITHOUT_CLASSIFICATION	0.0010085683526220941	DESIGN	4.0659061423055267E-4	TEST	3.2884227087413544E-4	IMPLEMENTATION	3.050492130293424E-4	DEFECT	1.2531351683957706E-5	DOCUMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999931451748912	WITHOUT_CLASSIFICATION	3.394790068116655E-6	DESIGN	2.445587595561608E-6	DEFECT	7.831650451241566E-7	TEST	1.2203635189057076E-7	DOCUMENTATION	1.0924604800750142E-7	IMPLEMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.999018167718777	WITHOUT_CLASSIFICATION	7.758212697225136E-4	DESIGN	1.1154423539923243E-4	IMPLEMENTATION	8.580282965206142E-5	DEFECT	4.345370899327736E-6	DOCUMENTATION	4.3185755499254984E-6	TEST
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999970647655653	WITHOUT_CLASSIFICATION	1.8500082311981938E-6	DESIGN	7.045506269194364E-7	IMPLEMENTATION	2.5491324326993385E-7	DEFECT	6.479578628519741E-8	TEST	6.096654689327844E-8	DOCUMENTATION
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999964505261945	WITHOUT_CLASSIFICATION	2.356503395653031E-6	DESIGN	9.450546012832631E-7	IMPLEMENTATION	1.3648010270691508E-7	DEFECT	8.697888695791947E-8	DOCUMENTATION	2.4456818927275376E-8	TEST
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999807234167043	WITHOUT_CLASSIFICATION	5.304691015489658E-6	DEFECT	4.930391395217631E-6	DESIGN	4.51562702094848E-6	IMPLEMENTATION	3.121108767462364E-6	TEST	1.4047650966876195E-6	DOCUMENTATION
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9998171683047749	WITHOUT_CLASSIFICATION	1.605515597443618E-4	DESIGN	2.0444598849107658E-5	DEFECT	1.1065194250927117E-6	DOCUMENTATION	3.7379429792395893E-7	TEST	3.552229087387422E-7	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999903277823328	WITHOUT_CLASSIFICATION	4.033993081009257E-6	DEFECT	2.3585540055891437E-6	DESIGN	1.7907538467846343E-6	IMPLEMENTATION	8.520438720565409E-7	TEST	6.368728619424812E-7	DOCUMENTATION
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999985165862095	WITHOUT_CLASSIFICATION	8.71621936141776E-7	DESIGN	5.829312268179436E-7	DEFECT	1.3997073354905251E-8	TEST	1.3672522205854307E-8	DOCUMENTATION	1.1910319974420029E-9	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999761899923013	WITHOUT_CLASSIFICATION	1.1918136457511037E-5	DEFECT	9.810800225380762E-6	DESIGN	1.2826133743341655E-6	TEST	5.619792026960993E-7	DOCUMENTATION	2.3647843869031254E-7	IMPLEMENTATION
//some statistics	WITHOUT_CLASSIFICATION	0.9999704315149461	WITHOUT_CLASSIFICATION	1.856750628293326E-5	IMPLEMENTATION	5.500291720391545E-6	DOCUMENTATION	3.0914210661302264E-6	DESIGN	1.7178991030561375E-6	TEST	6.913668814963481E-7	DEFECT
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9995118421766354	WITHOUT_CLASSIFICATION	3.592567543264784E-4	IMPLEMENTATION	7.149627432700437E-5	DESIGN	4.827830504703053E-5	DEFECT	8.441188798548104E-6	DOCUMENTATION	6.853008656058185E-7	TEST
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.999996020780013	WITHOUT_CLASSIFICATION	3.847538745306222E-6	IMPLEMENTATION	1.253140335513081E-7	DEFECT	2.691341671433832E-9	TEST	2.6609719983475396E-9	DESIGN	1.014894430797135E-9	DOCUMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9914046153311455	WITHOUT_CLASSIFICATION	0.007837305417590642	DESIGN	7.294504196333815E-4	DEFECT	2.6747901511325175E-5	IMPLEMENTATION	1.7005136862449392E-6	TEST	1.8041643288748922E-7	DOCUMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.95833354977228	WITHOUT_CLASSIFICATION	0.021160041663846038	DESIGN	0.01290464165328555	IMPLEMENTATION	0.006170433605931599	DEFECT	0.0014105873706879769	DOCUMENTATION	2.0745933968751918E-5	TEST
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999995999788669	WITHOUT_CLASSIFICATION	2.388085969490903E-7	DEFECT	1.3251397909678418E-7	IMPLEMENTATION	1.1944693167669375E-8	DOCUMENTATION	1.1487995270415126E-8	TEST	5.265868540369096E-9	DESIGN
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999977880851583	WITHOUT_CLASSIFICATION	1.574265290436769E-6	IMPLEMENTATION	4.5098076983588056E-7	DEFECT	1.04530521711167E-7	TEST	4.597845032439345E-8	DESIGN	3.6159809375624095E-8	DOCUMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999726533123996	WITHOUT_CLASSIFICATION	1.1164408983749443E-5	DEFECT	8.474262396371072E-6	TEST	5.5754268076795275E-6	IMPLEMENTATION	1.4016119542620987E-6	DESIGN	7.309774584548879E-7	DOCUMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999875971189417	WITHOUT_CLASSIFICATION	6.735633710207322E-6	DEFECT	2.653781756443926E-6	DESIGN	1.5053742967954543E-6	TEST	1.0432371622378633E-6	DOCUMENTATION	4.648541326162E-7	IMPLEMENTATION
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999925937809905	WITHOUT_CLASSIFICATION	7.21242903996852E-6	IMPLEMENTATION	1.0240578552060401E-7	TEST	4.3465735301974444E-8	DEFECT	3.241885402616683E-8	DOCUMENTATION	1.549959486850422E-8	DESIGN
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9998892757115002	WITHOUT_CLASSIFICATION	6.481745678842303E-5	DESIGN	4.550467725440324E-5	DEFECT	3.9853365042026325E-7	TEST	3.3588752719623633E-9	DOCUMENTATION	2.619312582672191E-10	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9998482151311722	WITHOUT_CLASSIFICATION	1.0145628012714567E-4	DESIGN	4.517826755990832E-5	IMPLEMENTATION	4.319097853420496E-6	TEST	5.616331963258609E-7	DEFECT	2.6959009109556525E-7	DOCUMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999786415706742	WITHOUT_CLASSIFICATION	1.2233493154014993E-5	DESIGN	4.74141916148509E-6	IMPLEMENTATION	1.9726506294964343E-6	TEST	1.4313022883466798E-6	DEFECT	9.79564092514136E-7	DOCUMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999991066323071	WITHOUT_CLASSIFICATION	6.6815981326388E-7	DESIGN	1.1882905917328042E-7	DOCUMENTATION	6.437351902669493E-8	IMPLEMENTATION	3.503481450583187E-8	TEST	6.970487076847159E-9	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999991066323071	WITHOUT_CLASSIFICATION	6.6815981326388E-7	DESIGN	1.1882905917328042E-7	DOCUMENTATION	6.437351902669493E-8	IMPLEMENTATION	3.503481450583187E-8	TEST	6.970487076847159E-9	DEFECT
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999984164493917	WITHOUT_CLASSIFICATION	9.825533713665358E-7	TEST	3.9570149246734894E-7	DEFECT	1.6889165225569302E-7	DESIGN	2.9359124637521483E-8	DOCUMENTATION	7.044967538840396E-9	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.999954102910429	WITHOUT_CLASSIFICATION	2.2307086026957176E-5	DEFECT	1.4876670045458553E-5	IMPLEMENTATION	4.192655318794578E-6	DOCUMENTATION	2.5558152664594424E-6	TEST	1.9648629134507385E-6	DESIGN
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9996558505626888	WITHOUT_CLASSIFICATION	2.7511448569044963E-4	DESIGN	3.2189225089636837E-5	IMPLEMENTATION	1.9412061058709764E-5	DEFECT	1.5772284238519417E-5	DOCUMENTATION	1.6613812338293974E-6	TEST
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999510009475608	WITHOUT_CLASSIFICATION	4.851930842550224E-5	DESIGN	3.4121656577219834E-7	IMPLEMENTATION	6.627803715536716E-8	DEFECT	5.837647240509149E-8	TEST	1.3872938294469467E-8	DOCUMENTATION
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999984476307134	WITHOUT_CLASSIFICATION	1.0922078758976747E-6	IMPLEMENTATION	2.9071392360175654E-7	DESIGN	1.4676945563961392E-7	DEFECT	1.268719237066625E-8	TEST	9.990839131832802E-9	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.999927309175815	WITHOUT_CLASSIFICATION	6.970448087423543E-5	IMPLEMENTATION	1.5982717365906818E-6	DESIGN	7.18677275660189E-7	DEFECT	6.304421863285278E-7	TEST	3.895211212289983E-8	DOCUMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.999647523107123	WITHOUT_CLASSIFICATION	2.76370491511369E-4	IMPLEMENTATION	5.391315938735646E-5	DESIGN	1.783884931561361E-5	DEFECT	3.2321386640801636E-6	DOCUMENTATION	1.1222539986058713E-6	TEST
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999633359627114	WITHOUT_CLASSIFICATION	3.282598390676876E-5	DESIGN	2.3969690763336363E-6	TEST	1.1310749167613644E-6	IMPLEMENTATION	2.730024142959414E-7	DEFECT	3.700697453121581E-8	DOCUMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9998146373954663	WITHOUT_CLASSIFICATION	9.836370649589664E-5	DEFECT	6.182253357542532E-5	TEST	1.2608037469051947E-5	DOCUMENTATION	8.82034853645867E-6	IMPLEMENTATION	3.7479784569661035E-6	DESIGN
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999863134951663	WITHOUT_CLASSIFICATION	1.3254928659285596E-5	DESIGN	2.832639232136027E-7	DEFECT	8.493813800289803E-8	IMPLEMENTATION	4.293761270426806E-8	DOCUMENTATION	2.0436500560280417E-8	TEST
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999471297094766	WITHOUT_CLASSIFICATION	4.407680092960048E-5	DEFECT	2.7931882526154914E-6	TEST	2.564216641290485E-6	IMPLEMENTATION	2.456408678221056E-6	DOCUMENTATION	9.796760216237316E-7	DESIGN
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9997001040219113	WITHOUT_CLASSIFICATION	2.461338171975497E-4	DESIGN	3.693323548814257E-5	DEFECT	1.2389904879369142E-5	DOCUMENTATION	2.917333570635302E-6	IMPLEMENTATION	1.521686953096609E-6	TEST
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.99999081470279	WITHOUT_CLASSIFICATION	3.311030653825187E-6	IMPLEMENTATION	2.5399651019556355E-6	DEFECT	1.7372998121447002E-6	DOCUMENTATION	8.227765131043393E-7	TEST	7.742251287971036E-7	DESIGN
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999952996471709	WITHOUT_CLASSIFICATION	2.799895534456539E-6	DESIGN	9.12864432122546E-7	IMPLEMENTATION	8.978607141724948E-7	DOCUMENTATION	5.350506724795529E-8	TEST	3.622708118448467E-8	DEFECT
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.99417963679687	WITHOUT_CLASSIFICATION	0.005750488283010423	DESIGN	3.3599475364782336E-5	DEFECT	1.9032394889168758E-5	TEST	1.3959731803064864E-5	DOCUMENTATION	3.283318062537685E-6	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9996109033652679	WITHOUT_CLASSIFICATION	2.929506983964403E-4	DEFECT	4.514226227886296E-5	DESIGN	3.6202949163684014E-5	IMPLEMENTATION	1.1718977221967535E-5	TEST	3.081747671021201E-6	DOCUMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.999995813903449	WITHOUT_CLASSIFICATION	3.3280120720968666E-6	IMPLEMENTATION	8.233322065756912E-7	DEFECT	2.1492289466902495E-8	DESIGN	1.0350026055870363E-8	TEST	2.909956713910026E-9	DOCUMENTATION
//cachedState,	WITHOUT_CLASSIFICATION	0.9999349257934874	WITHOUT_CLASSIFICATION	3.634412005667076E-5	IMPLEMENTATION	1.3477223227883721E-5	DESIGN	7.080931419516722E-6	DOCUMENTATION	4.657136299251635E-6	TEST	3.5147955089830847E-6	DEFECT
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999961071847895	WITHOUT_CLASSIFICATION	2.181118452073633E-6	DEFECT	7.880061423437711E-7	DOCUMENTATION	4.498901441550097E-7	DESIGN	3.972295694456479E-7	TEST	7.657090245834647E-8	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9994192138947819	WITHOUT_CLASSIFICATION	3.7927556401460834E-4	DESIGN	1.0949379443437945E-4	DEFECT	7.2792911229044E-5	IMPLEMENTATION	1.1351981650596173E-5	DOCUMENTATION	7.871853889505093E-6	TEST
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999988703364159	WITHOUT_CLASSIFICATION	6.693560694449593E-7	DESIGN	2.6054503861859355E-7	DEFECT	1.705801747178244E-7	TEST	2.4462203136915788E-8	DOCUMENTATION	4.7200983198563235E-9	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999836563937156	WITHOUT_CLASSIFICATION	8.274903586858762E-6	DESIGN	4.828303202022886E-6	DEFECT	1.97279493195203E-6	IMPLEMENTATION	9.83106639142344E-7	DOCUMENTATION	2.8449792445248084E-7	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999868849008968	WITHOUT_CLASSIFICATION	5.066471909090167E-5	DEFECT	4.401695374438339E-5	IMPLEMENTATION	1.5547753002717507E-5	DOCUMENTATION	1.1428759272447522E-5	DESIGN	9.492805921573136E-6	TEST
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9395502701974902	WITHOUT_CLASSIFICATION	0.026925809649133003	DEFECT	0.024084581295454478	DESIGN	0.009372282301595503	IMPLEMENTATION	3.819094069370271E-5	TEST	2.8865615633220562E-5	DOCUMENTATION
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9882650320028868	WITHOUT_CLASSIFICATION	0.011602512037398944	DESIGN	1.2079460372355659E-4	DEFECT	1.0512533540254598E-5	IMPLEMENTATION	8.780996353671958E-7	TEST	2.707228151833012E-7	DOCUMENTATION
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9429548244415016	DESIGN	0.03388378304160682	WITHOUT_CLASSIFICATION	0.022921181081323953	DEFECT	2.2509931570262724E-4	IMPLEMENTATION	1.0723671840932319E-5	TEST	4.388448024050461E-6	DOCUMENTATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9922254849127736	WITHOUT_CLASSIFICATION	0.005746663914920448	IMPLEMENTATION	0.0012474053634957195	DOCUMENTATION	4.5934779040690624E-4	DESIGN	2.5444963744452936E-4	DEFECT	6.664838095880017E-5	TEST
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9990166178802337	WITHOUT_CLASSIFICATION	5.56231098428187E-4	DEFECT	2.85856372864625E-4	IMPLEMENTATION	5.845175049629188E-5	DESIGN	5.208220454286922E-5	DOCUMENTATION	3.076069343434641E-5	TEST
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9991214355994761	WITHOUT_CLASSIFICATION	5.789893522022281E-4	DESIGN	2.892199623060552E-4	IMPLEMENTATION	4.358031186197608E-6	TEST	3.898004735095134E-6	DEFECT	2.099050094480013E-6	DOCUMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999868849008968	WITHOUT_CLASSIFICATION	5.066471909090167E-5	DEFECT	4.401695374438339E-5	IMPLEMENTATION	1.5547753002717507E-5	DOCUMENTATION	1.1428759272447522E-5	DESIGN	9.492805921573136E-6	TEST
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9866640524403975	WITHOUT_CLASSIFICATION	0.013293096472046712	DESIGN	2.7222874672863422E-5	IMPLEMENTATION	1.3160170715993919E-5	TEST	2.431907123370645E-6	DOCUMENTATION	3.613504354456085E-8	DEFECT
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999992350038253	WITHOUT_CLASSIFICATION	7.0747227714947E-7	DESIGN	4.9381257671019166E-8	DOCUMENTATION	8.05012235748181E-9	DEFECT	8.0578338370756E-11	TEST	1.1939233545830934E-11	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.9998762060660228	WITHOUT_CLASSIFICATION	5.1036476619321115E-5	DESIGN	2.461169637969331E-5	TEST	2.1393269363164765E-5	DOCUMENTATION	1.4548069419162325E-5	DEFECT	1.2204422195810385E-5	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999876203436561	WITHOUT_CLASSIFICATION	7.335933527550558E-6	IMPLEMENTATION	2.4871350451624315E-6	DESIGN	1.8374606124576865E-6	DEFECT	5.189968949970898E-7	DOCUMENTATION	2.0013026377430911E-7	TEST
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999936263364637	WITHOUT_CLASSIFICATION	6.1672296590749515E-6	IMPLEMENTATION	1.096898410970169E-7	DESIGN	3.903646033367216E-8	DOCUMENTATION	3.020641136917955E-8	DEFECT	2.750116445702186E-8	TEST
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.7682087266317816	WITHOUT_CLASSIFICATION	0.2286794331360241	DESIGN	0.0022479639379093526	IMPLEMENTATION	8.539138392971512E-4	TEST	9.86544685837926E-6	DOCUMENTATION	9.70081295282363E-8	DEFECT
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9997198401666882	WITHOUT_CLASSIFICATION	1.4366314534788792E-4	DESIGN	1.2611160995369949E-4	DEFECT	9.363114042878751E-6	IMPLEMENTATION	8.470602236825577E-7	TEST	1.7490374365272995E-7	DOCUMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999967601039339	WITHOUT_CLASSIFICATION	2.175525367830617E-6	IMPLEMENTATION	8.098000977746144E-7	DESIGN	9.273414148567185E-8	DOCUMENTATION	8.998472339126148E-8	TEST	7.185173564457143E-8	DEFECT
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9607858874446321	WITHOUT_CLASSIFICATION	0.039114537576538023	IMPLEMENTATION	7.602740372350642E-5	TEST	9.300301213340024E-6	DOCUMENTATION	7.219058206845176E-6	DESIGN	7.028215686134639E-6	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9999876203436561	WITHOUT_CLASSIFICATION	7.335933527550558E-6	IMPLEMENTATION	2.4871350451624315E-6	DESIGN	1.8374606124576865E-6	DEFECT	5.189968949970898E-7	DOCUMENTATION	2.0013026377430911E-7	TEST
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9998957219592812	WITHOUT_CLASSIFICATION	9.577426693948824E-5	DESIGN	3.895864211423413E-6	TEST	3.2727902818981485E-6	DEFECT	1.3162791185285355E-6	DOCUMENTATION	1.8840167523940623E-8	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999917977221373	WITHOUT_CLASSIFICATION	6.198906715803286E-6	IMPLEMENTATION	1.4906595696403185E-6	DESIGN	2.2172226254959648E-7	DOCUMENTATION	1.530188173842708E-7	TEST	1.3797049726617355E-7	DEFECT
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9391931764681672	WITHOUT_CLASSIFICATION	0.054035281743723046	DESIGN	0.0058255929388219725	DEFECT	7.015133906088816E-4	DOCUMENTATION	1.9373850504372472E-4	IMPLEMENTATION	5.0696953634980354E-5	TEST
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.999882766757388	WITHOUT_CLASSIFICATION	6.273465358246636E-5	IMPLEMENTATION	2.1386213586749685E-5	DEFECT	1.311516943120758E-5	DESIGN	1.1232289127515622E-5	DOCUMENTATION	8.764916884003357E-6	TEST
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999815359730229	WITHOUT_CLASSIFICATION	1.1651001845711525E-5	DESIGN	5.50947872944447E-6	IMPLEMENTATION	9.430140336077073E-7	DEFECT	2.3050462273230622E-7	TEST	1.3002774561131305E-7	DOCUMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999857355821046	WITHOUT_CLASSIFICATION	1.2641438806729757E-5	DESIGN	1.1304062970109001E-6	DEFECT	2.840902326609759E-7	DOCUMENTATION	1.5415854583942023E-7	TEST	5.4324013084545096E-8	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999810357782344	WITHOUT_CLASSIFICATION	1.725779562575635E-5	DESIGN	8.72262703621808E-7	IMPLEMENTATION	4.1358721160964993E-7	DEFECT	3.177796668415544E-7	DOCUMENTATION	1.0279655787353821E-7	TEST
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9995311283641776	WITHOUT_CLASSIFICATION	4.4970406536725793E-4	DESIGN	9.728825869109164E-6	IMPLEMENTATION	5.873825218956024E-6	TEST	2.9129329801471655E-6	DOCUMENTATION	6.51986387060115E-7	DEFECT
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999677390316793	WITHOUT_CLASSIFICATION	2.2910145173888247E-5	DESIGN	7.058120072209401E-6	DEFECT	1.2572001737631321E-6	DOCUMENTATION	7.093845983384948E-7	IMPLEMENTATION	3.261183023956542E-7	TEST
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.972608800473006	WITHOUT_CLASSIFICATION	0.026658475207477193	IMPLEMENTATION	4.1374199158633466E-4	DEFECT	2.3212000650936495E-4	DESIGN	5.677596998340016E-5	DOCUMENTATION	3.0086351437578623E-5	TEST
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999987008747115	WITHOUT_CLASSIFICATION	5.924866749534419E-7	TEST	3.3357072854289193E-7	DESIGN	3.084614455461943E-7	DOCUMENTATION	6.416300268648886E-8	DEFECT	4.434368375780278E-10	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999732566076519	WITHOUT_CLASSIFICATION	1.2162843469305485E-5	IMPLEMENTATION	6.028368634965023E-6	DESIGN	4.672514499788278E-6	TEST	2.432924359574432E-6	DOCUMENTATION	1.4467413844445598E-6	DEFECT
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9998327369021089	WITHOUT_CLASSIFICATION	1.484562511478276E-4	IMPLEMENTATION	1.2341750258332271E-5	TEST	5.809590991414595E-6	DOCUMENTATION	4.4103605730980413E-7	DEFECT	2.1446943617316E-7	DESIGN
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999936859157638	WITHOUT_CLASSIFICATION	4.641784406106082E-6	IMPLEMENTATION	1.2042141078327408E-6	DESIGN	2.3651757752035847E-7	DEFECT	1.361040991930577E-7	TEST	9.546404564210923E-8	DOCUMENTATION
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.999996297500195	WITHOUT_CLASSIFICATION	1.834622621874309E-6	IMPLEMENTATION	6.656487824527516E-7	DEFECT	5.339502936036085E-7	TEST	4.557208158372258E-7	DOCUMENTATION	2.1255729131289896E-7	DESIGN
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9998336380330268	WITHOUT_CLASSIFICATION	1.6081823224584437E-4	IMPLEMENTATION	2.1751512395557567E-6	DEFECT	1.2393487969058377E-6	DOCUMENTATION	1.0834268466877946E-6	DESIGN	1.04580784431363E-6	TEST
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999043190073629	WITHOUT_CLASSIFICATION	3.9784583949998664E-5	IMPLEMENTATION	3.061066321113374E-5	DEFECT	1.1375779149261518E-5	DOCUMENTATION	7.47154659022965E-6	TEST	6.4384197364902E-6	DESIGN
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999613826368858	WITHOUT_CLASSIFICATION	2.0928899513394546E-5	IMPLEMENTATION	1.720735477039528E-5	DESIGN	2.7392327209006175E-7	TEST	1.528817649731322E-7	DOCUMENTATION	5.4303793230383444E-8	DEFECT
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999938592423796	WITHOUT_CLASSIFICATION	4.186007648497648E-6	IMPLEMENTATION	1.8799957916722878E-6	DESIGN	5.53718663194706E-8	TEST	1.4762510180304154E-8	DOCUMENTATION	4.619803834541151E-9	DEFECT
// eat it and try next	WITHOUT_CLASSIFICATION	0.9998812507462368	WITHOUT_CLASSIFICATION	5.655757488970053E-5	IMPLEMENTATION	3.921150098098536E-5	DEFECT	9.188923583469693E-6	DESIGN	7.669137972828994E-6	DOCUMENTATION	6.122116336101147E-6	TEST
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999956242416159	WITHOUT_CLASSIFICATION	4.342271363142618E-6	IMPLEMENTATION	2.5435091632801356E-8	DOCUMENTATION	3.741459366141976E-9	TEST	2.9865299296048247E-9	DESIGN	1.323940048984553E-9	DEFECT
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9997567993561822	WITHOUT_CLASSIFICATION	1.9494966861369951E-4	IMPLEMENTATION	4.5574873757435444E-5	DESIGN	1.2807115713497927E-6	TEST	7.100409762332025E-7	DEFECT	6.853488991227735E-7	DOCUMENTATION
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999976961408806	WITHOUT_CLASSIFICATION	1.7456378827786755E-6	DEFECT	3.5851604879404693E-7	DESIGN	1.0679400677563156E-7	TEST	7.609125760565238E-8	IMPLEMENTATION	1.6819923497335984E-8	DOCUMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999377882635629	WITHOUT_CLASSIFICATION	5.8782512190482105E-5	DESIGN	1.8559369121017904E-6	IMPLEMENTATION	1.0520208640898892E-6	TEST	3.060054231999997E-7	DEFECT	2.152610471757664E-7	DOCUMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9998780778556574	WITHOUT_CLASSIFICATION	1.1375009025258575E-4	DESIGN	6.633318361432827E-6	IMPLEMENTATION	7.593758854313567E-7	TEST	4.657775525546431E-7	DEFECT	3.1358229063496504E-7	DOCUMENTATION
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999024294753844	WITHOUT_CLASSIFICATION	4.093593105067035E-5	DESIGN	3.507761384442469E-5	IMPLEMENTATION	1.5155192296138344E-5	DEFECT	4.887501418183384E-6	DOCUMENTATION	1.514286006241487E-6	TEST
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9998955297826045	WITHOUT_CLASSIFICATION	8.640103657898232E-5	IMPLEMENTATION	7.677414200481667E-6	DESIGN	5.369431952976109E-6	DEFECT	2.891290475773287E-6	DOCUMENTATION	2.131044187428085E-6	TEST
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999955227482512	WITHOUT_CLASSIFICATION	2.9182373563288426E-6	IMPLEMENTATION	1.3463789572947344E-6	DESIGN	1.2418881378781813E-7	TEST	5.3327373878578805E-8	DEFECT	3.51192474922109E-8	DOCUMENTATION
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999770111444581	WITHOUT_CLASSIFICATION	1.0711225826041447E-5	IMPLEMENTATION	5.773096637970196E-6	DEFECT	3.4214855875747907E-6	DESIGN	1.5820540188263572E-6	TEST	1.5009934712966094E-6	DOCUMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999778375046834	WITHOUT_CLASSIFICATION	1.2352039132709708E-5	DESIGN	9.51984091731454E-6	DEFECT	2.5826693978899315E-7	TEST	2.847013951940288E-8	DOCUMENTATION	3.878187347471967E-9	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9998531927207235	WITHOUT_CLASSIFICATION	1.0895772703525971E-4	IMPLEMENTATION	2.5252798606671666E-5	DEFECT	5.447768735229787E-6	DOCUMENTATION	4.763313059846894E-6	TEST	2.385671839498015E-6	DESIGN
// Note this!!	WITHOUT_CLASSIFICATION	0.9999809088760588	WITHOUT_CLASSIFICATION	8.772680591917208E-6	DESIGN	4.067574778491326E-6	DOCUMENTATION	3.9186265813412135E-6	TEST	1.6236464146400302E-6	IMPLEMENTATION	7.085955747788487E-7	DEFECT
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999779630788448	WITHOUT_CLASSIFICATION	1.2618762362033594E-5	IMPLEMENTATION	6.8985348083149795E-6	DEFECT	1.444616246986114E-6	TEST	7.930532489014935E-7	DOCUMENTATION	2.819544889524215E-7	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999174599380036	WITHOUT_CLASSIFICATION	7.600839195762168E-5	IMPLEMENTATION	4.590915046152762E-6	DESIGN	6.578562700700835E-7	TEST	6.450167532332116E-7	DOCUMENTATION	6.378819691785061E-7	DEFECT
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9966329437412831	WITHOUT_CLASSIFICATION	0.0032620297484981433	DESIGN	5.157800266352133E-5	DEFECT	3.122565494127378E-5	IMPLEMENTATION	1.374789838266823E-5	DOCUMENTATION	8.474954231227637E-6	TEST
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.8512226333699219	WITHOUT_CLASSIFICATION	0.14072531799124866	DEFECT	0.004943926422461884	DESIGN	0.0030892869271607775	IMPLEMENTATION	1.7898246714507843E-5	TEST	9.370424923741681E-7	DOCUMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999584736225893	WITHOUT_CLASSIFICATION	4.06603848310223E-5	IMPLEMENTATION	3.74349757289215E-7	DOCUMENTATION	2.573771209785522E-7	TEST	1.2385404780078527E-7	DEFECT	1.1041165362269065E-7	DESIGN
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9994168343271038	WITHOUT_CLASSIFICATION	5.810032127967026E-4	DESIGN	8.882876782059451E-7	TEST	6.441153369509294E-7	DOCUMENTATION	5.864719075670634E-7	IMPLEMENTATION	4.3585176612978275E-8	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999985436634126	WITHOUT_CLASSIFICATION	1.0413174289645617E-6	IMPLEMENTATION	2.69255807508177E-7	DESIGN	7.04652004665336E-8	TEST	6.968901588025794E-8	DOCUMENTATION	5.609134508142211E-9	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999985436634126	WITHOUT_CLASSIFICATION	1.0413174289645617E-6	IMPLEMENTATION	2.69255807508177E-7	DESIGN	7.04652004665336E-8	TEST	6.968901588025794E-8	DOCUMENTATION	5.609134508142211E-9	DEFECT
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999979778941004	WITHOUT_CLASSIFICATION	1.8565218245718183E-6	DESIGN	9.897774652216355E-8	DOCUMENTATION	4.5191099640705634E-8	DEFECT	1.1407746467962197E-8	TEST	1.0007482277289612E-8	IMPLEMENTATION
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9995931302765634	WITHOUT_CLASSIFICATION	2.783315350919941E-4	IMPLEMENTATION	1.0883555350100422E-4	DESIGN	1.4269879312468927E-5	DEFECT	2.7429142417841856E-6	DOCUMENTATION	2.689841289335869E-6	TEST
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999415272095741	WITHOUT_CLASSIFICATION	3.9325707033394905E-5	DESIGN	1.568437568493048E-5	IMPLEMENTATION	1.359683778930094E-6	DEFECT	1.3586842752228114E-6	TEST	7.443396532679674E-7	DOCUMENTATION
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999988096450124	WITHOUT_CLASSIFICATION	7.967788324261054E-7	IMPLEMENTATION	2.871792135251575E-7	DEFECT	8.91719794313989E-8	DESIGN	1.3331174461848205E-8	TEST	3.893787686785857E-9	DOCUMENTATION
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999974779080429	WITHOUT_CLASSIFICATION	1.2947073584999615E-6	IMPLEMENTATION	7.523393564085721E-7	DEFECT	2.5640208513827314E-7	DOCUMENTATION	1.303343800271485E-7	TEST	8.830877698288791E-8	DESIGN
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999725511948826	WITHOUT_CLASSIFICATION	1.4647806595433085E-5	DESIGN	6.9229425527593545E-6	IMPLEMENTATION	4.854597961998881E-6	DEFECT	8.578586379631859E-7	TEST	1.655993691654467E-7	DOCUMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999937608959328	WITHOUT_CLASSIFICATION	2.8033380971974158E-6	IMPLEMENTATION	2.017070488291732E-6	DEFECT	1.0833223734386862E-6	DESIGN	1.8331108011879634E-7	DOCUMENTATION	1.5206202799023625E-7	TEST
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999747996776034	WITHOUT_CLASSIFICATION	2.14756608346643E-5	DESIGN	2.1924589855001488E-6	DEFECT	1.4278693670408072E-6	TEST	6.811897211565E-8	DOCUMENTATION	3.6214237206721715E-8	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999813878891605	WITHOUT_CLASSIFICATION	1.4841903725732016E-5	IMPLEMENTATION	2.7512803154515703E-6	DEFECT	4.888159041299089E-7	DOCUMENTATION	3.006930391121352E-7	DESIGN	2.294178550305854E-7	TEST
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999881377000247	WITHOUT_CLASSIFICATION	1.17796561939019E-5	DESIGN	7.873896618498785E-8	DEFECT	3.4266110121140166E-9	DOCUMENTATION	4.691041867761968E-10	TEST	9.100004895421401E-12	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999305441368355	WITHOUT_CLASSIFICATION	6.579526578581357E-5	DESIGN	2.4264297676303296E-6	DEFECT	5.112998411824666E-7	IMPLEMENTATION	4.775880134364513E-7	TEST	2.452797565480781E-7	DOCUMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999958408195782	WITHOUT_CLASSIFICATION	3.4842328754952284E-6	IMPLEMENTATION	4.3960982418392023E-7	DESIGN	1.884553160004423E-7	TEST	3.469732064330481E-8	DOCUMENTATION	1.2185085497387918E-8	DEFECT
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9998991206203125	WITHOUT_CLASSIFICATION	9.047707477779873E-5	DESIGN	8.09852116246141E-6	TEST	1.3240381727329778E-6	IMPLEMENTATION	5.891022641034471E-7	DEFECT	3.9064331024959223E-7	DOCUMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999985436634126	WITHOUT_CLASSIFICATION	1.0413174289645617E-6	IMPLEMENTATION	2.69255807508177E-7	DESIGN	7.04652004665336E-8	TEST	6.968901588025794E-8	DOCUMENTATION	5.609134508142211E-9	DEFECT
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999682559844358	WITHOUT_CLASSIFICATION	1.1481342683576178E-5	DEFECT	9.751827906120145E-6	IMPLEMENTATION	6.9283977536282785E-6	DESIGN	1.8889643469168963E-6	DOCUMENTATION	1.6934828739930631E-6	TEST
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9997480363423956	WITHOUT_CLASSIFICATION	1.0147145195412062E-4	IMPLEMENTATION	1.0077279851841047E-4	DESIGN	4.077688573366295E-5	DOCUMENTATION	6.885850665174733E-6	TEST	2.05667073301001E-6	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9994605410589936	WITHOUT_CLASSIFICATION	3.9013528143076883E-4	DESIGN	8.305957067647842E-5	IMPLEMENTATION	6.57090383013434E-5	DEFECT	3.4348621881889965E-7	DOCUMENTATION	2.1156437896487095E-7	TEST
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9998784208523835	WITHOUT_CLASSIFICATION	1.0548901485428782E-4	DESIGN	7.844696949885795E-6	TEST	6.77527277255449E-6	IMPLEMENTATION	1.2397719345425687E-6	DOCUMENTATION	2.3039110512097573E-7	DEFECT
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999981630322314	WITHOUT_CLASSIFICATION	6.732804575340426E-7	DESIGN	5.801214496570413E-7	DEFECT	3.299811054432084E-7	IMPLEMENTATION	2.3928919851542937E-7	TEST	1.4295557458203165E-8	DOCUMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999202458273667	WITHOUT_CLASSIFICATION	7.821738441590029E-5	DESIGN	6.283447106075074E-7	IMPLEMENTATION	4.324268207659332E-7	DOCUMENTATION	3.2088499389045E-7	DEFECT	1.5513169202777517E-7	TEST
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9979017291604968	WITHOUT_CLASSIFICATION	8.504621292525041E-4	IMPLEMENTATION	7.915220733823612E-4	DESIGN	3.4085240332410306E-4	DEFECT	1.1199549251387667E-4	TEST	3.438741030442302E-6	DOCUMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999941915535259	WITHOUT_CLASSIFICATION	5.565994489495547E-6	IMPLEMENTATION	2.3145932704569703E-7	DESIGN	5.994209010778971E-9	TEST	4.4161359074688925E-9	DOCUMENTATION	5.823126806448514E-10	DEFECT
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999850445417919	WITHOUT_CLASSIFICATION	6.463974766822442E-6	DESIGN	5.886053921647555E-6	DEFECT	1.558754939478246E-6	TEST	1.0295965875960438E-6	IMPLEMENTATION	1.7077992541032157E-8	DOCUMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9987527436531046	WITHOUT_CLASSIFICATION	8.568674038769299E-4	IMPLEMENTATION	3.254701241437308E-4	DESIGN	5.709168319909664E-5	TEST	4.486379885279293E-6	DOCUMENTATION	3.34075579012157E-6	DEFECT
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.999732999070525	WITHOUT_CLASSIFICATION	2.6465108361245656E-4	IMPLEMENTATION	1.2944260261067804E-6	TEST	4.912577674465076E-7	DESIGN	4.7030630439218543E-7	DEFECT	9.3855764620199E-8	DOCUMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999174599380036	WITHOUT_CLASSIFICATION	7.600839195762168E-5	IMPLEMENTATION	4.590915046152762E-6	DESIGN	6.578562700700835E-7	TEST	6.450167532332116E-7	DOCUMENTATION	6.378819691785061E-7	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999985436634126	WITHOUT_CLASSIFICATION	1.0413174289645617E-6	IMPLEMENTATION	2.69255807508177E-7	DESIGN	7.04652004665336E-8	TEST	6.968901588025794E-8	DOCUMENTATION	5.609134508142211E-9	DEFECT
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999078695857138	WITHOUT_CLASSIFICATION	5.774322423467133E-5	DEFECT	3.0115866514484676E-5	IMPLEMENTATION	3.4701805976987277E-6	DOCUMENTATION	6.131485516733345E-7	DESIGN	1.8799438752209034E-7	TEST
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999991982151946	WITHOUT_CLASSIFICATION	4.680881631054523E-7	DESIGN	2.746366010954256E-7	IMPLEMENTATION	4.573945735356285E-8	DOCUMENTATION	1.0702211346956004E-8	DEFECT	2.618372446872019E-9	TEST
// switch	WITHOUT_CLASSIFICATION	0.9999986110329424	WITHOUT_CLASSIFICATION	4.0394331892794627E-7	DESIGN	3.009301155316793E-7	TEST	2.4326684547006673E-7	DOCUMENTATION	2.2298701234364394E-7	IMPLEMENTATION	2.1783976524450775E-7	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999803933963354	WITHOUT_CLASSIFICATION	6.1632512007036006E-6	DESIGN	5.2266917103527325E-6	TEST	3.210618075431736E-6	IMPLEMENTATION	2.6562915365867483E-6	DOCUMENTATION	2.3497511414864744E-6	DEFECT
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9628186764490424	WITHOUT_CLASSIFICATION	0.0368472196091397	DESIGN	3.2348878537157065E-4	IMPLEMENTATION	8.744150909806037E-6	TEST	1.6157826555807412E-6	DOCUMENTATION	2.552228809130461E-7	DEFECT
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999962874647452	WITHOUT_CLASSIFICATION	1.6108629691011103E-6	IMPLEMENTATION	1.2255385391287123E-6	DESIGN	6.864470677040502E-7	TEST	9.560807015525739E-8	DOCUMENTATION	9.407860872636937E-8	DEFECT
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999122443028551	WITHOUT_CLASSIFICATION	6.365174078989826E-5	DESIGN	2.002629303354703E-5	DEFECT	2.6025052508558356E-6	DOCUMENTATION	8.103119243127927E-7	TEST	6.64846146388829E-7	IMPLEMENTATION
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999989295552643	WITHOUT_CLASSIFICATION	7.77582697888817E-7	IMPLEMENTATION	2.0409753735190526E-7	DEFECT	7.686035156162055E-8	TEST	6.467046155583096E-9	DOCUMENTATION	5.4371029826102365E-9	DESIGN
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999998863715768	WITHOUT_CLASSIFICATION	6.741646749357277E-8	DESIGN	1.9444377404895986E-8	IMPLEMENTATION	1.1396161964848694E-8	DOCUMENTATION	8.084456905618613E-9	TEST	7.286959452389009E-9	DEFECT
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9996231887109995	WITHOUT_CLASSIFICATION	3.5590681580072934E-4	DESIGN	1.3339861608609028E-5	IMPLEMENTATION	5.026409880592758E-6	TEST	2.2177872997446868E-6	DEFECT	3.204144107911341E-7	DOCUMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999637464162642	WITHOUT_CLASSIFICATION	3.441034988595346E-5	IMPLEMENTATION	1.2400037994565996E-6	DEFECT	3.40558141676457E-7	DOCUMENTATION	1.4234214800130062E-7	DESIGN	1.2032976080828375E-7	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999227767335308	WITHOUT_CLASSIFICATION	1.84400314390861E-5	DOCUMENTATION	1.7546467016277187E-5	TEST	1.728892098211053E-5	IMPLEMENTATION	1.2504246436311495E-5	DEFECT	1.144360059549775E-5	DESIGN
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999983427928428	WITHOUT_CLASSIFICATION	1.595516887186143E-6	IMPLEMENTATION	2.609351975256313E-8	TEST	2.553418649779045E-8	DESIGN	9.768175757569244E-9	DOCUMENTATION	2.9438797843048223E-10	DEFECT
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999469628322253	WITHOUT_CLASSIFICATION	4.2464666732773895E-5	DESIGN	9.094516617298558E-6	IMPLEMENTATION	1.1791703072874792E-6	TEST	2.0100014066850783E-7	DOCUMENTATION	9.781397662436197E-8	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999426475176872	WITHOUT_CLASSIFICATION	4.556637306681732E-5	DEFECT	8.022732302767739E-6	IMPLEMENTATION	2.0400217412679105E-6	DESIGN	1.5780950404161013E-6	TEST	1.452601615295232E-7	DOCUMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999989621084687	WITHOUT_CLASSIFICATION	8.197188982334858E-7	DESIGN	1.486738594558875E-7	DEFECT	6.428835089383436E-8	IMPLEMENTATION	2.6596842088481733E-9	DOCUMENTATION	2.550738405700721E-9	TEST
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999959203259874	WITHOUT_CLASSIFICATION	2.3973886129598636E-6	DESIGN	1.6698933628216175E-6	DEFECT	8.158756413124434E-9	TEST	2.8832036387787057E-9	DOCUMENTATION	1.3500767564359416E-9	IMPLEMENTATION
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999888741437551	WITHOUT_CLASSIFICATION	9.597774675684959E-6	DESIGN	1.1416501606606193E-6	DEFECT	3.006840371385202E-7	IMPLEMENTATION	5.488352522932453E-8	TEST	3.0863846024340896E-8	DOCUMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.999995784481147	WITHOUT_CLASSIFICATION	3.3911028136575106E-6	IMPLEMENTATION	4.6645330062353653E-7	DESIGN	1.2904853752714375E-7	DEFECT	1.2022610035365608E-7	DOCUMENTATION	1.0868810088118242E-7	TEST
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999979222612756	WITHOUT_CLASSIFICATION	2.0521969490387025E-6	DESIGN	2.1795503611260568E-8	DOCUMENTATION	2.804685477487586E-9	IMPLEMENTATION	6.784915372405788E-10	DEFECT	2.630948127087864E-10	TEST
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9980403085028543	WITHOUT_CLASSIFICATION	0.0016245726858641531	DESIGN	1.5532836853128433E-4	IMPLEMENTATION	9.056521058435847E-5	TEST	4.5995915621007354E-5	DEFECT	4.322931654504182E-5	DOCUMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9980403085028543	WITHOUT_CLASSIFICATION	0.0016245726858641531	DESIGN	1.5532836853128433E-4	IMPLEMENTATION	9.056521058435847E-5	TEST	4.5995915621007354E-5	DEFECT	4.322931654504182E-5	DOCUMENTATION
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9880636195724332	WITHOUT_CLASSIFICATION	0.011894650350345697	DESIGN	2.1318214498553534E-5	IMPLEMENTATION	1.3049290684725619E-5	DEFECT	4.9475625042370915E-6	TEST	2.4150095337683194E-6	DOCUMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.95509732515276	WITHOUT_CLASSIFICATION	0.04490220782187837	DESIGN	4.127781125300871E-7	TEST	3.463857738236228E-8	DEFECT	1.8663900176939153E-8	DOCUMENTATION	9.447716463677924E-10	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9983972234019327	WITHOUT_CLASSIFICATION	0.0015982444805416247	IMPLEMENTATION	2.6040428110118237E-6	DEFECT	1.0854695671222216E-6	DESIGN	5.399630074365429E-7	TEST	3.0264214009945416E-7	DOCUMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9997347705381135	WITHOUT_CLASSIFICATION	1.3954335616325238E-4	DESIGN	1.1803200692798944E-4	IMPLEMENTATION	5.4920037733166E-6	DEFECT	1.9493816593095134E-6	TEST	2.1271336259502158E-7	DOCUMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9997571666795296	WITHOUT_CLASSIFICATION	2.1057125194217922E-4	DESIGN	1.2042531230611945E-5	IMPLEMENTATION	1.0133721778866546E-5	DEFECT	5.411249431375451E-6	TEST	4.6745660872933135E-6	DOCUMENTATION
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999926748162685	WITHOUT_CLASSIFICATION	2.733519692157938E-6	DESIGN	2.4159658743004154E-6	IMPLEMENTATION	1.556011539294256E-6	DEFECT	5.671157040565547E-7	DOCUMENTATION	5.2570921623935645E-8	TEST
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9997584136006744	WITHOUT_CLASSIFICATION	1.834181992965822E-4	IMPLEMENTATION	4.019305031232055E-5	DESIGN	1.1776118125847058E-5	TEST	5.891465024711041E-6	DOCUMENTATION	3.075665661399544E-7	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999998994989411	WITHOUT_CLASSIFICATION	6.394741082022561E-8	DEFECT	3.200858166712188E-8	DESIGN	2.438460033204568E-9	IMPLEMENTATION	1.9370116329654158E-9	TEST	1.6959475468869651E-10	DOCUMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999998994989411	WITHOUT_CLASSIFICATION	6.394741082022561E-8	DEFECT	3.200858166712188E-8	DESIGN	2.438460033204568E-9	IMPLEMENTATION	1.9370116329654158E-9	TEST	1.6959475468869651E-10	DOCUMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9996899977739376	WITHOUT_CLASSIFICATION	1.732167164187359E-4	IMPLEMENTATION	7.308860674911711E-5	DESIGN	4.447232577445049E-5	DEFECT	1.2170709600733549E-5	DOCUMENTATION	7.053867519196192E-6	TEST
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999895343228812	WITHOUT_CLASSIFICATION	7.497301044755507E-6	IMPLEMENTATION	1.4509725736389668E-6	DESIGN	8.985462162121488E-7	DOCUMENTATION	5.291615873566086E-7	TEST	8.969569689118309E-8	DEFECT
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9997995029550788	WITHOUT_CLASSIFICATION	1.783372913431119E-4	DESIGN	7.837152955400114E-6	TEST	7.146256186135098E-6	IMPLEMENTATION	3.7020955765260165E-6	DOCUMENTATION	3.4742488600790145E-6	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999839585453526	WITHOUT_CLASSIFICATION	8.172155097830035E-6	DESIGN	4.8697425136837475E-6	IMPLEMENTATION	1.7712429234882832E-6	DOCUMENTATION	9.67822080435323E-7	TEST	2.60492031907556E-7	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999839585453526	WITHOUT_CLASSIFICATION	8.172155097830035E-6	DESIGN	4.8697425136837475E-6	IMPLEMENTATION	1.7712429234882832E-6	DOCUMENTATION	9.67822080435323E-7	TEST	2.60492031907556E-7	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999839585453526	WITHOUT_CLASSIFICATION	8.172155097830035E-6	DESIGN	4.8697425136837475E-6	IMPLEMENTATION	1.7712429234882832E-6	DOCUMENTATION	9.67822080435323E-7	TEST	2.60492031907556E-7	DEFECT
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9994801064500011	WITHOUT_CLASSIFICATION	3.661257873926695E-4	DEFECT	8.883844849145463E-5	IMPLEMENTATION	4.9766413125802954E-5	DESIGN	1.2380791319157575E-5	TEST	2.7821096699544E-6	DOCUMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.999335077573045	WITHOUT_CLASSIFICATION	6.624050971393726E-4	DESIGN	1.879033782256836E-6	IMPLEMENTATION	3.595268276400653E-7	TEST	1.8998823870449266E-7	DOCUMENTATION	8.878096716438732E-8	DEFECT
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9638823324902903	WITHOUT_CLASSIFICATION	0.036049446992796906	IMPLEMENTATION	3.540981688333907E-5	TEST	1.416692259703242E-5	DESIGN	1.0808215719966693E-5	DEFECT	7.835561712405832E-6	DOCUMENTATION
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9975283205695911	WITHOUT_CLASSIFICATION	0.0018322242224014253	DEFECT	3.407071745175146E-4	IMPLEMENTATION	2.2559893883325441E-4	DESIGN	6.880843155823713E-5	TEST	4.3406630985614655E-6	DOCUMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9998505984107318	WITHOUT_CLASSIFICATION	7.695938074015904E-5	IMPLEMENTATION	3.543407869752234E-5	DESIGN	3.3770102901402416E-5	DEFECT	2.6937357123763754E-6	TEST	5.442912167271495E-7	DOCUMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999985436634126	WITHOUT_CLASSIFICATION	1.0413174289645617E-6	IMPLEMENTATION	2.69255807508177E-7	DESIGN	7.04652004665336E-8	TEST	6.968901588025794E-8	DOCUMENTATION	5.609134508142211E-9	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999985436634126	WITHOUT_CLASSIFICATION	1.0413174289645617E-6	IMPLEMENTATION	2.69255807508177E-7	DESIGN	7.04652004665336E-8	TEST	6.968901588025794E-8	DOCUMENTATION	5.609134508142211E-9	DEFECT
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9991556527023796	WITHOUT_CLASSIFICATION	6.798846400144727E-4	DEFECT	1.5592073548483304E-4	DESIGN	8.469313282104976E-6	IMPLEMENTATION	6.627854339067551E-8	TEST	6.330295545072544E-9	DOCUMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999955112976092	WITHOUT_CLASSIFICATION	4.2126605890114676E-6	IMPLEMENTATION	2.0893465016114393E-7	DEFECT	4.455362074680906E-8	DESIGN	2.124207510902151E-8	TEST	1.3114557923765859E-9	DOCUMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9903578356244988	WITHOUT_CLASSIFICATION	0.008184159036329453	DESIGN	0.0013985924327384247	IMPLEMENTATION	4.137700516671317E-5	DEFECT	1.4518209485396085E-5	TEST	3.5176917812854234E-6	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999997031617027	WITHOUT_CLASSIFICATION	8.112299147141923E-8	DEFECT	7.190095892310791E-8	DESIGN	6.848973223380855E-8	DOCUMENTATION	6.770399009956994E-8	IMPLEMENTATION	7.620624638513497E-9	TEST
// igndore it...	WITHOUT_CLASSIFICATION	0.999879992507375	WITHOUT_CLASSIFICATION	6.107514138789749E-5	DESIGN	3.453969093940485E-5	DEFECT	1.7837050783355113E-5	IMPLEMENTATION	4.4074198928243885E-6	DOCUMENTATION	2.148189621592219E-6	TEST
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999972814890515	WITHOUT_CLASSIFICATION	9.917972532756746E-7	DESIGN	9.195437252618711E-7	DEFECT	3.33638656461407E-7	TEST	2.412015842494269E-7	IMPLEMENTATION	2.3232972918305503E-7	DOCUMENTATION
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9994916138000421	WITHOUT_CLASSIFICATION	4.29653840963724E-4	DESIGN	6.619890336663762E-5	DEFECT	4.9119152170630285E-6	IMPLEMENTATION	4.366687567982856E-6	TEST	3.254852842363818E-6	DOCUMENTATION
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999994850662745	WITHOUT_CLASSIFICATION	2.8523010933839733E-7	IMPLEMENTATION	1.892489310681599E-7	DESIGN	3.367645176185779E-8	TEST	4.662494146486295E-9	DEFECT	2.1157392295543954E-9	DOCUMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.999998800928563	WITHOUT_CLASSIFICATION	4.4441709030612484E-7	DESIGN	3.7464665977722455E-7	DEFECT	2.477315075600015E-7	DOCUMENTATION	6.627634447908207E-8	IMPLEMENTATION	6.599983491293477E-8	TEST
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999998369226258	WITHOUT_CLASSIFICATION	1.297274523913356E-7	IMPLEMENTATION	1.3171393502654637E-8	TEST	8.574303970194896E-9	DOCUMENTATION	6.948494794256865E-9	DEFECT	4.6557294995432386E-9	DESIGN
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999641415529943	WITHOUT_CLASSIFICATION	2.097118626335298E-5	IMPLEMENTATION	1.2081082327041841E-5	DOCUMENTATION	2.008973833683815E-6	TEST	6.089401875270503E-7	DEFECT	1.8826439424648862E-7	DESIGN
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999973842963481	WITHOUT_CLASSIFICATION	1.5531966673309977E-6	IMPLEMENTATION	3.3359718069287916E-7	DESIGN	3.2560417881861025E-7	TEST	2.3356270869788205E-7	DOCUMENTATION	1.6974291641741336E-7	DEFECT
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999973842963481	WITHOUT_CLASSIFICATION	1.553196667330997E-6	IMPLEMENTATION	3.3359718069287916E-7	DESIGN	3.2560417881861025E-7	TEST	2.3356270869788205E-7	DOCUMENTATION	1.6974291641741336E-7	DEFECT
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999982313061245	WITHOUT_CLASSIFICATION	9.927293129851845E-7	IMPLEMENTATION	2.813220159326274E-7	DESIGN	2.092019188056351E-7	TEST	1.6610751766044405E-7	DOCUMENTATION	1.1933311003189476E-7	DEFECT
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999982313061245	WITHOUT_CLASSIFICATION	9.927293129851845E-7	IMPLEMENTATION	2.813220159326274E-7	DESIGN	2.092019188056351E-7	TEST	1.6610751766044412E-7	DOCUMENTATION	1.1933311003189476E-7	DEFECT
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999982023537767	WITHOUT_CLASSIFICATION	1.2249102271782717E-6	IMPLEMENTATION	1.8268787194447473E-7	TEST	1.5314505833621883E-7	DESIGN	1.3816069959773695E-7	DOCUMENTATION	9.874236626724256E-8	DEFECT
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999970541786962	WITHOUT_CLASSIFICATION	1.7999685440684156E-6	IMPLEMENTATION	4.757947527665898E-7	DESIGN	2.7379685743385696E-7	DEFECT	2.0925793076146474E-7	TEST	1.8700321872285558E-7	DOCUMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999970541786962	WITHOUT_CLASSIFICATION	1.7999685440684156E-6	IMPLEMENTATION	4.757947527665898E-7	DESIGN	2.7379685743385696E-7	DEFECT	2.0925793076146474E-7	TEST	1.8700321872285558E-7	DOCUMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999981211565311	WITHOUT_CLASSIFICATION	1.0607146973851013E-6	IMPLEMENTATION	3.7663935083678595E-7	DESIGN	1.7586460075351508E-7	DEFECT	1.6081779034465465E-7	DOCUMENTATION	1.04807029549994E-7	TEST
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999923363488776	WITHOUT_CLASSIFICATION	4.768114642966926E-6	IMPLEMENTATION	1.0671893969150514E-6	DESIGN	7.52338243346516E-7	DEFECT	6.11257341774485E-7	TEST	4.6475149722352327E-7	DOCUMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999904984312711	WITHOUT_CLASSIFICATION	4.623136829542421E-6	IMPLEMENTATION	3.779046095227607E-6	DESIGN	6.894385851517939E-7	DEFECT	2.2833077078438006E-7	TEST	1.8161644815312163E-7	DOCUMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9980403085028543	WITHOUT_CLASSIFICATION	0.0016245726858641531	DESIGN	1.5532836853128433E-4	IMPLEMENTATION	9.056521058435847E-5	TEST	4.5995915621007354E-5	DEFECT	4.322931654504182E-5	DOCUMENTATION
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999718185986263	WITHOUT_CLASSIFICATION	2.1002700977351766E-5	IMPLEMENTATION	6.201274456700592E-6	DEFECT	5.448711392066386E-7	DESIGN	2.8577206060362946E-7	TEST	1.4678273979009796E-7	DOCUMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999923363488776	WITHOUT_CLASSIFICATION	4.768114642966926E-6	IMPLEMENTATION	1.0671893969150514E-6	DESIGN	7.52338243346516E-7	DEFECT	6.11257341774485E-7	TEST	4.6475149722352327E-7	DOCUMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9890602330284548	WITHOUT_CLASSIFICATION	0.010798093290857286	DESIGN	8.593323697648376E-5	IMPLEMENTATION	4.540162521883903E-5	DEFECT	7.146099607097951E-6	DOCUMENTATION	3.1927188856257872E-6	TEST
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.999862102087744	WITHOUT_CLASSIFICATION	1.3498364923957164E-4	IMPLEMENTATION	8.904962916521608E-7	DESIGN	7.088078650084354E-7	DEFECT	6.683731450205935E-7	TEST	6.465857147348221E-7	DOCUMENTATION
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999994376777859	WITHOUT_CLASSIFICATION	2.758788228613458E-7	IMPLEMENTATION	1.1067366225040358E-7	DOCUMENTATION	7.469982525859936E-8	TEST	5.242658545941011E-8	DEFECT	4.864331823939305E-8	DESIGN
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999991550317417	WITHOUT_CLASSIFICATION	4.3563513015156195E-7	IMPLEMENTATION	1.8164016704744989E-7	DESIGN	1.0103839865714785E-7	DOCUMENTATION	7.916027669312032E-8	TEST	4.749428586804402E-8	DEFECT
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999976584597162	WITHOUT_CLASSIFICATION	1.043326384163518E-6	IMPLEMENTATION	9.840910567542553E-7	DESIGN	1.980937275850562E-7	DEFECT	1.0076256910462129E-7	TEST	1.5266546177627734E-8	DOCUMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999437256350843	WITHOUT_CLASSIFICATION	3.9805951593915105E-5	IMPLEMENTATION	1.0766311013925719E-5	TEST	2.209120407958481E-6	DESIGN	1.8114415434077404E-6	DEFECT	1.681540356532216E-6	DOCUMENTATION
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9980754917841096	WITHOUT_CLASSIFICATION	0.0019054341810590101	DESIGN	8.369555165375406E-6	TEST	7.3444606445096535E-6	IMPLEMENTATION	2.3647181856932217E-6	DOCUMENTATION	9.953008359386497E-7	DEFECT
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9995671436803503	WITHOUT_CLASSIFICATION	2.1446842766371398E-4	DEFECT	2.1387970115370437E-4	DESIGN	2.0529920217666E-6	TEST	2.0438794991878294E-6	IMPLEMENTATION	4.113193112783026E-7	DOCUMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999645329563955	WITHOUT_CLASSIFICATION	3.336141305818652E-5	DEFECT	1.2147293369004446E-6	IMPLEMENTATION	6.23001696421548E-7	DESIGN	1.9369235501995258E-7	DOCUMENTATION	7.420715790530589E-8	TEST
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999523256247671	WITHOUT_CLASSIFICATION	4.004521488217923E-5	DESIGN	3.765060595005823E-6	DEFECT	3.0529444252929456E-6	TEST	5.072513051207079E-7	IMPLEMENTATION	3.0390402522596166E-7	DOCUMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999262376662	WITHOUT_CLASSIFICATION	3.753864723825678E-8	DESIGN	1.7286250725787712E-8	IMPLEMENTATION	1.3973864027372056E-8	DEFECT	2.5330758595981563E-9	DOCUMENTATION	2.4304959307572107E-9	TEST
// Set it!	WITHOUT_CLASSIFICATION	0.9999725013642118	WITHOUT_CLASSIFICATION	1.494746099544363E-5	DEFECT	4.618875836092891E-6	TEST	2.8802315597680956E-6	IMPLEMENTATION	2.6304551185942043E-6	DOCUMENTATION	2.4216122782126553E-6	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999964936313608	WITHOUT_CLASSIFICATION	1.280804084814178E-6	DEFECT	9.190653780455359E-7	DESIGN	6.928963260542798E-7	IMPLEMENTATION	4.038019667626665E-7	DOCUMENTATION	2.0980088342161424E-7	TEST
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999954434982211	WITHOUT_CLASSIFICATION	3.3496342445106544E-6	IMPLEMENTATION	6.349168431915867E-7	TEST	2.0886721549906983E-7	DEFECT	2.048116086795875E-7	DOCUMENTATION	1.5827186706761483E-7	DESIGN
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9925531509355148	WITHOUT_CLASSIFICATION	0.007274787550786324	DEFECT	8.341091160440628E-5	DESIGN	6.911459781657661E-5	TEST	1.9154872914654622E-5	IMPLEMENTATION	3.811313632545028E-7	DOCUMENTATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999407833683174	WITHOUT_CLASSIFICATION	5.657109403140493E-5	IMPLEMENTATION	1.3403360274972884E-6	DESIGN	6.384213862381381E-7	TEST	3.417881044787416E-7	DOCUMENTATION	3.249921331301136E-7	DEFECT
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999986378102063	WITHOUT_CLASSIFICATION	1.2349435715003157E-6	DESIGN	6.635516786937222E-8	IMPLEMENTATION	3.8571385280087275E-8	DEFECT	1.222654047278083E-8	DOCUMENTATION	1.0093128862446304E-8	TEST
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999944716153846	WITHOUT_CLASSIFICATION	3.88239588994021E-6	DESIGN	1.2101453311402802E-6	IMPLEMENTATION	2.9486817780018863E-7	TEST	9.540236668896126E-8	DOCUMENTATION	4.5572849743058365E-8	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999944716153846	WITHOUT_CLASSIFICATION	3.88239588994021E-6	DESIGN	1.2101453311402802E-6	IMPLEMENTATION	2.9486817780018863E-7	TEST	9.540236668896126E-8	DOCUMENTATION	4.5572849743058365E-8	DEFECT
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999727507237536	WITHOUT_CLASSIFICATION	1.2733542652677845E-5	IMPLEMENTATION	1.1090331540714006E-5	DEFECT	1.3337802625631615E-6	DESIGN	1.272347555703986E-6	TEST	8.192742347206965E-7	DOCUMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999923264409588	WITHOUT_CLASSIFICATION	4.130377961111119E-6	DESIGN	3.0265866894381433E-6	DEFECT	2.1282401135193612E-7	TEST	1.7003891129931108E-7	IMPLEMENTATION	1.3373146809656583E-7	DOCUMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999724926949519	WITHOUT_CLASSIFICATION	2.038485741362288E-5	DESIGN	4.306211256121938E-6	IMPLEMENTATION	1.5507726984632354E-6	DEFECT	9.009002943730006E-7	TEST	3.645633854231015E-7	DOCUMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.999868335109965	WITHOUT_CLASSIFICATION	1.2977735849508274E-4	IMPLEMENTATION	8.358297010946398E-7	TEST	4.7320780557882856E-7	DESIGN	4.207196587208067E-7	DOCUMENTATION	1.577743743911151E-7	DEFECT
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999940406169137	WITHOUT_CLASSIFICATION	2.466417611877795E-6	IMPLEMENTATION	1.3789933791086551E-6	DEFECT	1.3110873238433146E-6	TEST	4.246033939050965E-7	DOCUMENTATION	3.782813776244878E-7	DESIGN
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999590448905636	WITHOUT_CLASSIFICATION	3.441495272729218E-5	DESIGN	5.887561941164943E-6	IMPLEMENTATION	3.6673720593556053E-7	DEFECT	1.6997352766028774E-7	TEST	1.1588403424482603E-7	DOCUMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9977932365520156	WITHOUT_CLASSIFICATION	0.002028310762789242	DESIGN	1.7606758203667967E-4	IMPLEMENTATION	1.4444817008473406E-6	DOCUMENTATION	5.961379500017126E-7	DEFECT	3.444835076419702E-7	TEST
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999869443410488	WITHOUT_CLASSIFICATION	5.140786224448469E-6	DEFECT	3.347075114776754E-6	TEST	2.95540071489616E-6	DESIGN	1.3482415117308624E-6	IMPLEMENTATION	2.6415538543601534E-7	DOCUMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999685250961419	WITHOUT_CLASSIFICATION	2.573316587440185E-5	IMPLEMENTATION	3.738140120740385E-6	DESIGN	7.885132407077148E-7	DOCUMENTATION	6.139872895926121E-7	DEFECT	6.010973326635578E-7	TEST
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.999999085212241	WITHOUT_CLASSIFICATION	8.353952284393973E-7	DESIGN	5.271988772422561E-8	IMPLEMENTATION	1.6795960304191168E-8	DEFECT	6.024503378247571E-9	TEST	3.852179234321164E-9	DOCUMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999522383958502	WITHOUT_CLASSIFICATION	4.727415524476479E-5	DESIGN	1.734572509705099E-7	DEFECT	1.643425555613142E-7	TEST	1.1612806242325063E-7	IMPLEMENTATION	3.352103599723705E-8	DOCUMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999227767335308	WITHOUT_CLASSIFICATION	1.84400314390861E-5	DOCUMENTATION	1.7546467016277187E-5	TEST	1.728892098211053E-5	IMPLEMENTATION	1.2504246436311495E-5	DEFECT	1.144360059549775E-5	DESIGN
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999986945837459	WITHOUT_CLASSIFICATION	7.336454039006332E-7	IMPLEMENTATION	2.6145620922806735E-7	DEFECT	1.8619589181950137E-7	DESIGN	1.0385213042388868E-7	DOCUMENTATION	2.0266618739218193E-8	TEST
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999872369683347	WITHOUT_CLASSIFICATION	1.066573456276048E-5	DEFECT	7.096117568977759E-7	DESIGN	6.89015676688182E-7	IMPLEMENTATION	4.6883833817718406E-7	DOCUMENTATION	2.2983133084986243E-7	TEST
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999984730456236	WITHOUT_CLASSIFICATION	7.528795475310942E-7	DEFECT	7.504760571780774E-7	IMPLEMENTATION	1.3293031670428174E-8	TEST	7.666856135736569E-9	DOCUMENTATION	2.638883827411452E-9	DESIGN
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999895349512135	WITHOUT_CLASSIFICATION	7.354330907162384E-6	DEFECT	2.129685305502566E-6	IMPLEMENTATION	6.518742812204545E-7	DESIGN	1.703460679952902E-7	DOCUMENTATION	1.58812224652066E-7	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999988445414907	WITHOUT_CLASSIFICATION	4.4539507308646107E-7	DEFECT	3.677239358881131E-7	DESIGN	3.0150510704437245E-7	IMPLEMENTATION	2.7796472902127124E-8	TEST	1.3037920244609862E-8	DOCUMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999988445414907	WITHOUT_CLASSIFICATION	4.4539507308646107E-7	DEFECT	3.677239358881131E-7	DESIGN	3.0150510704437245E-7	IMPLEMENTATION	2.7796472902127124E-8	TEST	1.3037920244609862E-8	DOCUMENTATION
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999635603297022	WITHOUT_CLASSIFICATION	3.064510366549298E-5	IMPLEMENTATION	3.3503990919452662E-6	DESIGN	1.3763511586168803E-6	TEST	8.590840330667985E-7	DEFECT	2.0873234865840322E-7	DOCUMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9981104769452528	WITHOUT_CLASSIFICATION	0.0018590786910496911	DESIGN	2.088067445412567E-5	DEFECT	7.561292372544209E-6	IMPLEMENTATION	1.4568840073999646E-6	TEST	5.45512863365516E-7	DOCUMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9998626169530831	WITHOUT_CLASSIFICATION	1.1172210490348695E-4	DEFECT	1.604221001979939E-5	IMPLEMENTATION	7.995678850760873E-6	DESIGN	1.1270958461681023E-6	TEST	4.959572966841691E-7	DOCUMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.9998302288819179	WITHOUT_CLASSIFICATION	1.1990289566738144E-4	DEFECT	3.6754770029955375E-5	DESIGN	9.78400148660375E-6	IMPLEMENTATION	1.795486613911185E-6	DOCUMENTATION	1.5339642844043344E-6	TEST
// The property is another class..	WITHOUT_CLASSIFICATION	0.999991632636036	WITHOUT_CLASSIFICATION	7.655057184873036E-6	DEFECT	4.1026738974452564E-7	DESIGN	1.3101297505037675E-7	TEST	8.617185976384786E-8	IMPLEMENTATION	8.485455476071869E-8	DOCUMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999984637435564	WITHOUT_CLASSIFICATION	1.1034264034218123E-6	IMPLEMENTATION	2.518825412844051E-7	DESIGN	1.2484182015940573E-7	TEST	4.3442431494898774E-8	DOCUMENTATION	1.266324721228888E-8	DEFECT
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9964490919973659	WITHOUT_CLASSIFICATION	0.00346014374057517	DESIGN	3.348328191971761E-5	IMPLEMENTATION	3.309903446273344E-5	DEFECT	1.4167326676950112E-5	DOCUMENTATION	1.0014618999710109E-5	TEST
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999948270054433	WITHOUT_CLASSIFICATION	4.120377381651942E-6	DEFECT	1.0387675260088069E-6	DESIGN	5.42120429878646E-9	DOCUMENTATION	5.00966322818218E-9	IMPLEMENTATION	3.4187814863343E-9	TEST
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9991714530912894	WITHOUT_CLASSIFICATION	8.242216404607732E-4	IMPLEMENTATION	2.166328408882172E-6	DEFECT	1.0934044214146095E-6	DOCUMENTATION	6.503419180753393E-7	TEST	4.1519350134964794E-7	DESIGN
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999937586006333	WITHOUT_CLASSIFICATION	4.25857068851956E-6	DESIGN	9.685980759317176E-7	DEFECT	6.696257182049982E-7	TEST	2.70243815252354E-7	IMPLEMENTATION	7.43610686653402E-8	DOCUMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9997402810759609	WITHOUT_CLASSIFICATION	2.580227793328913E-4	DESIGN	1.549653507432901E-6	DEFECT	8.081180812310623E-8	DOCUMENTATION	6.45149867068129E-8	TEST	1.164403872984018E-9	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999948270054433	WITHOUT_CLASSIFICATION	4.120377381651942E-6	DEFECT	1.0387675260088069E-6	DESIGN	5.42120429878646E-9	DOCUMENTATION	5.00966322818218E-9	IMPLEMENTATION	3.4187814863343E-9	TEST
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9683226245120804	WITHOUT_CLASSIFICATION	0.03167013208792792	DESIGN	3.7273801765231565E-6	IMPLEMENTATION	2.1641657672342508E-6	DEFECT	8.655359697972256E-7	DOCUMENTATION	4.863180781910049E-7	TEST
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9990736920561901	WITHOUT_CLASSIFICATION	6.138799713626921E-4	IMPLEMENTATION	2.737269096792307E-4	DESIGN	2.211659453420939E-5	DEFECT	1.467710667493657E-5	DOCUMENTATION	1.90736155889514E-6	TEST
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9988332757502325	WITHOUT_CLASSIFICATION	0.001163751417267594	DESIGN	2.2399696343391566E-6	DEFECT	3.813918097122543E-7	TEST	2.9654603429197184E-7	IMPLEMENTATION	5.49250215670719E-8	DOCUMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.999991875382484	WITHOUT_CLASSIFICATION	3.976871714722938E-6	IMPLEMENTATION	1.8483494530804917E-6	TEST	1.7631668516951682E-6	DESIGN	3.790339318902795E-7	DEFECT	1.5719556454074618E-7	DOCUMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.999918823656121	WITHOUT_CLASSIFICATION	8.090624802080733E-5	DESIGN	2.246833247072772E-7	DEFECT	2.1682787667798285E-8	DOCUMENTATION	1.9001360598953784E-8	TEST	4.728385198943235E-9	IMPLEMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999342258288352	WITHOUT_CLASSIFICATION	6.143734402850337E-5	DESIGN	3.2130504764806308E-6	DEFECT	7.157253169291698E-7	IMPLEMENTATION	3.6889146403476735E-7	DOCUMENTATION	3.9159878779973225E-8	TEST
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999884106982498	WITHOUT_CLASSIFICATION	8.435438507850714E-6	IMPLEMENTATION	2.6118731761420436E-6	DOCUMENTATION	4.1396209126725986E-7	DESIGN	1.031680998335294E-7	TEST	2.4859875084587726E-8	DEFECT
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.999992753277081	WITHOUT_CLASSIFICATION	5.909287507893561E-6	IMPLEMENTATION	8.357000634928317E-7	DEFECT	3.1628158770809414E-7	DOCUMENTATION	1.3331217449584318E-7	TEST	5.2141585393047065E-8	DESIGN
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999043675248259	WITHOUT_CLASSIFICATION	9.526206014552776E-5	DESIGN	1.766486608325552E-7	IMPLEMENTATION	1.0221808064171775E-7	DOCUMENTATION	8.759888087715367E-8	TEST	3.94940622718843E-9	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9996688730662407	WITHOUT_CLASSIFICATION	2.63340450281008E-4	DEFECT	4.24392996683852E-5	DESIGN	1.5171185892099524E-5	TEST	7.20752463955607E-6	DOCUMENTATION	2.968473278287645E-6	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9940382745757864	WITHOUT_CLASSIFICATION	0.005667519084604109	IMPLEMENTATION	1.8488649176505114E-4	DEFECT	7.150441503363047E-5	DOCUMENTATION	2.5807901526776268E-5	DESIGN	1.200753128397821E-5	TEST
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999993936073773	WITHOUT_CLASSIFICATION	3.462785119065179E-7	DEFECT	2.3649589687874003E-7	DESIGN	1.0922563048401508E-8	IMPLEMENTATION	9.46706041026891E-9	TEST	3.2285902548880667E-9	DOCUMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999480495851745	WITHOUT_CLASSIFICATION	4.66368023108401E-5	DESIGN	1.9671363219820946E-6	DOCUMENTATION	1.6064026886022385E-6	TEST	1.348701776830384E-6	DEFECT	3.9137172733714766E-7	IMPLEMENTATION
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999985068171552	WITHOUT_CLASSIFICATION	1.3559956715487197E-6	DESIGN	5.139155469040776E-8	DEFECT	4.6624452315108836E-8	IMPLEMENTATION	2.641719681192379E-8	TEST	1.2753969456302867E-8	DOCUMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9998036265915062	WITHOUT_CLASSIFICATION	1.7969633369526442E-4	IMPLEMENTATION	7.700877445754937E-6	TEST	5.6281355461834245E-6	DESIGN	2.242680932149901E-6	DOCUMENTATION	1.1053808744349102E-6	DEFECT
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9997645499317043	WITHOUT_CLASSIFICATION	2.3361057777429228E-4	DESIGN	1.098139856871254E-6	DOCUMENTATION	6.527425348221573E-7	TEST	5.488965164947901E-8	IMPLEMENTATION	3.3718478058455515E-8	DEFECT
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999977364447536	WITHOUT_CLASSIFICATION	1.172197845483062E-6	DESIGN	5.863190055197914E-7	TEST	2.1679333798032693E-7	IMPLEMENTATION	2.0660519604463942E-7	DOCUMENTATION	8.163986131136373E-8	DEFECT
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9973484930059858	WITHOUT_CLASSIFICATION	0.0018426170747935624	DESIGN	6.186117077404112E-4	IMPLEMENTATION	1.0195935031842312E-4	TEST	5.074135984459125E-5	DOCUMENTATION	3.757750131711724E-5	DEFECT
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9983510619392614	WITHOUT_CLASSIFICATION	0.001131466968835706	DESIGN	2.944062932890419E-4	IMPLEMENTATION	1.2357515986166347E-4	TEST	5.2541318835754684E-5	DEFECT	4.6948319916424506E-5	DOCUMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999883157712512	WITHOUT_CLASSIFICATION	9.479684126236894E-6	IMPLEMENTATION	1.6025608298243155E-6	DOCUMENTATION	4.933362669576586E-7	DESIGN	8.52880888241877E-8	TEST	2.3359436849218366E-8	DEFECT
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9998435394832005	WITHOUT_CLASSIFICATION	8.097905917387007E-5	DESIGN	6.602405437756701E-5	DEFECT	5.961467925475638E-6	IMPLEMENTATION	2.8899556581994777E-6	TEST	6.05979664275785E-7	DOCUMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.7236421804138973	DESIGN	0.2763250847158544	WITHOUT_CLASSIFICATION	1.870294455202312E-5	IMPLEMENTATION	1.2037474143864414E-5	TEST	1.5971916140255963E-6	DOCUMENTATION	3.972599382712847E-7	DEFECT
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9114049744099001	WITHOUT_CLASSIFICATION	0.08677315739654742	DESIGN	0.0013716802670228959	IMPLEMENTATION	2.910587189887569E-4	TEST	1.2177874777346999E-4	DOCUMENTATION	3.735045976746587E-5	DEFECT
// #2	WITHOUT_CLASSIFICATION	0.9999950452770281	WITHOUT_CLASSIFICATION	1.4208222995450408E-6	DEFECT	1.1048622189306238E-6	DESIGN	9.251017721498699E-7	TEST	8.973873453243564E-7	DOCUMENTATION	6.065493358814163E-7	IMPLEMENTATION
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.999981269460165	WITHOUT_CLASSIFICATION	1.6449560324680044E-5	DESIGN	1.916057529741576E-6	IMPLEMENTATION	2.0142225812681666E-7	TEST	1.249434363856983E-7	DOCUMENTATION	3.85562860285465E-8	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9986654133675629	WITHOUT_CLASSIFICATION	0.0011281938544500305	IMPLEMENTATION	8.119661858629513E-5	DESIGN	6.95989731976675E-5	DEFECT	3.450919155494094E-5	DOCUMENTATION	2.1087994648257353E-5	TEST
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999958653079857	WITHOUT_CLASSIFICATION	2.217015886492431E-6	DEFECT	1.4811941803151447E-6	DESIGN	3.440321090916768E-7	IMPLEMENTATION	7.070762226255403E-8	TEST	2.1742215995622262E-8	DOCUMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999793257272618	WITHOUT_CLASSIFICATION	1.4508931768130414E-5	IMPLEMENTATION	3.0815274485011755E-6	DESIGN	1.612537723099628E-6	DOCUMENTATION	1.044937015183221E-6	DEFECT	4.2633878332269554E-7	TEST
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999846148741153	WITHOUT_CLASSIFICATION	6.945696902643085E-6	IMPLEMENTATION	6.784417488449343E-6	DESIGN	7.707069124033941E-7	DOCUMENTATION	6.257434935686108E-7	TEST	2.585610876703697E-7	DEFECT
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999446483634828	WITHOUT_CLASSIFICATION	3.6226110709832105E-5	IMPLEMENTATION	1.7640503514926104E-5	DESIGN	1.3075674312784192E-6	TEST	1.0569741193489612E-7	DEFECT	7.175744922304204E-8	DOCUMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999998571631187	WITHOUT_CLASSIFICATION	6.843187646165011E-8	DESIGN	5.7049738657047613E-8	IMPLEMENTATION	1.228702559376893E-8	DOCUMENTATION	3.188868909496419E-9	DEFECT	1.8793716465994713E-9	TEST
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999762961242996	WITHOUT_CLASSIFICATION	7.929123814400206E-6	DEFECT	7.769107305917854E-6	DESIGN	6.998917944924184E-6	IMPLEMENTATION	5.073174214672187E-7	DOCUMENTATION	4.99409213705639E-7	TEST
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.99984351125578	WITHOUT_CLASSIFICATION	7.553728875179645E-5	DESIGN	4.128320420296826E-5	IMPLEMENTATION	2.9740515654487598E-5	DEFECT	7.541691752362985E-6	TEST	2.3860438582756806E-6	DOCUMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999909072070334	WITHOUT_CLASSIFICATION	8.850057103191919E-6	DESIGN	1.9408103778150468E-7	TEST	4.8024042420565114E-8	IMPLEMENTATION	4.3402532683429804E-10	DOCUMENTATION	1.967578525812045E-10	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999943405406555	WITHOUT_CLASSIFICATION	5.1509074877350466E-6	DESIGN	3.623146008575504E-7	IMPLEMENTATION	9.029829893929171E-8	TEST	4.5902902181252245E-8	DEFECT	1.0036054726975861E-8	DOCUMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999973043717445	WITHOUT_CLASSIFICATION	1.3967790859876251E-6	IMPLEMENTATION	1.1264758769178835E-6	DESIGN	9.980114545172425E-8	TEST	4.081144895902728E-8	DEFECT	3.176069821103934E-8	DOCUMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.999979445566595	WITHOUT_CLASSIFICATION	2.047392414322102E-5	DESIGN	2.7080128294986727E-8	DOCUMENTATION	2.1495713323146296E-8	IMPLEMENTATION	2.101134352643705E-8	DEFECT	1.0922076561976644E-8	TEST
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999966319356534	WITHOUT_CLASSIFICATION	3.290205465617038E-6	DESIGN	4.8042180171999654E-8	DEFECT	1.9241297749839753E-8	DOCUMENTATION	6.073246723462096E-9	TEST	4.502156409128743E-9	IMPLEMENTATION
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.999995560084752	WITHOUT_CLASSIFICATION	3.589538797955854E-6	IMPLEMENTATION	4.5693660890130875E-7	TEST	2.2649093922965546E-7	DOCUMENTATION	1.486602571368378E-7	DESIGN	1.8288644748598462E-8	DEFECT
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999569305881197	WITHOUT_CLASSIFICATION	3.65788415109128E-5	IMPLEMENTATION	4.405777521707343E-6	DESIGN	1.0443548547916663E-6	DOCUMENTATION	6.147343513670327E-7	DEFECT	4.2570364143066965E-7	TEST
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999595194162709	WITHOUT_CLASSIFICATION	2.096178667242173E-5	IMPLEMENTATION	9.821876375207958E-6	TEST	6.319007955892602E-6	DESIGN	3.170797992079225E-6	DOCUMENTATION	2.0711473369445494E-7	DEFECT
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.999983026102971	WITHOUT_CLASSIFICATION	1.6792859905844638E-5	DESIGN	1.1472512316498476E-7	IMPLEMENTATION	4.0195783118585365E-8	TEST	1.9328210625646557E-8	DOCUMENTATION	6.788006341226671E-9	DEFECT
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999949016286432	WITHOUT_CLASSIFICATION	2.728175327245225E-6	DESIGN	1.1767283910901881E-6	IMPLEMENTATION	6.927899910841269E-7	DOCUMENTATION	4.106345509608889E-7	DEFECT	9.004309651368935E-8	TEST
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999899930715	WITHOUT_CLASSIFICATION	8.525764412976155E-9	DESIGN	1.0605917927696328E-9	DEFECT	3.837461050620505E-10	TEST	2.469655405682127E-11	DOCUMENTATION	1.2129712937300674E-11	IMPLEMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999935475765842	WITHOUT_CLASSIFICATION	6.401216867050442E-6	DESIGN	1.950350649690712E-8	DOCUMENTATION	1.6377516593241145E-8	TEST	9.133424828968166E-9	IMPLEMENTATION	6.192100900177922E-9	DEFECT
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999937446185171	WITHOUT_CLASSIFICATION	4.858814225592763E-6	DESIGN	8.200883676134817E-7	IMPLEMENTATION	4.162003122480879E-7	DEFECT	1.1318515335578845E-7	TEST	4.709342408483685E-8	DOCUMENTATION
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9997956455186161	WITHOUT_CLASSIFICATION	2.0285342125515724E-4	DESIGN	1.3655260730397569E-6	DEFECT	1.1801659099062791E-7	TEST	1.6891167693836073E-8	IMPLEMENTATION	6.262969630772809E-10	DOCUMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999327076175538	WITHOUT_CLASSIFICATION	3.3132226513098284E-5	TEST	2.1612471812844323E-5	DESIGN	7.290414495645191E-6	DEFECT	4.352872637991261E-6	IMPLEMENTATION	9.043969866473454E-7	DOCUMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999902679807375	WITHOUT_CLASSIFICATION	2.9969313445465923E-6	DESIGN	2.358254802033965E-6	DEFECT	2.093902664712147E-6	TEST	2.0586838473080352E-6	IMPLEMENTATION	2.2424660409123779E-7	DOCUMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999935877181384	WITHOUT_CLASSIFICATION	2.2515043684240337E-6	IMPLEMENTATION	1.553652221856669E-6	DEFECT	1.400260418093645E-6	DOCUMENTATION	6.340610174782672E-7	DESIGN	5.728038357741677E-7	TEST
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996542510546474	WITHOUT_CLASSIFICATION	1.8910828171482481E-4	IMPLEMENTATION	1.4116823955014337E-4	DESIGN	9.24944591839366E-6	TEST	3.7508658380989787E-6	DEFECT	2.4721123313141984E-6	DOCUMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999845524376445	WITHOUT_CLASSIFICATION	1.3693830168329693E-5	DESIGN	1.1299680024132398E-6	IMPLEMENTATION	4.206471895410215E-7	TEST	1.6964494688343974E-7	DEFECT	3.3472048367890535E-8	DOCUMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.99999938999142	WITHOUT_CLASSIFICATION	5.519774248293614E-7	IMPLEMENTATION	2.884475928161855E-8	TEST	1.4617912743686724E-8	DESIGN	9.220115157339066E-9	DEFECT	5.348368050199269E-9	DOCUMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999098082397015	WITHOUT_CLASSIFICATION	8.791438978475308E-5	DESIGN	1.736791353120844E-6	DEFECT	4.0377268843284583E-7	TEST	1.3446506119362328E-7	DOCUMENTATION	2.3414108529807755E-9	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999874508859786	WITHOUT_CLASSIFICATION	6.589172331338407E-6	DESIGN	5.707499511642107E-6	IMPLEMENTATION	2.1002271142098984E-7	TEST	3.0572350491829115E-8	DOCUMENTATION	1.1847116489992646E-8	DEFECT
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999787966710245	WITHOUT_CLASSIFICATION	1.9382793726156908E-5	IMPLEMENTATION	1.2163116289993053E-6	DEFECT	4.7642952177776137E-7	DOCUMENTATION	6.93941615456292E-8	DESIGN	5.8399937138514395E-8	TEST
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9959717723194171	WITHOUT_CLASSIFICATION	0.003006672987605735	DESIGN	7.810179499904469E-4	DEFECT	1.700870676724098E-4	IMPLEMENTATION	5.534269353490212E-5	TEST	1.510698177935572E-5	DOCUMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999735582162794	WITHOUT_CLASSIFICATION	2.0126823673251265E-5	IMPLEMENTATION	5.778463667196928E-6	DEFECT	4.3716549283376687E-7	DESIGN	4.984822583874603E-8	DOCUMENTATION	4.9482661386009876E-8	TEST
// Collection of components.	WITHOUT_CLASSIFICATION	0.999993073128025	WITHOUT_CLASSIFICATION	5.173740794705707E-6	DESIGN	6.703790878829954E-7	IMPLEMENTATION	5.517127066652009E-7	TEST	3.312215191002029E-7	DOCUMENTATION	1.9981786671398415E-7	DEFECT
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999979934734556	WITHOUT_CLASSIFICATION	1.172560316521962E-6	DESIGN	4.747109398590763E-7	DEFECT	3.0010422111265846E-7	TEST	3.355023473636912E-8	DOCUMENTATION	2.5600832204944262E-8	IMPLEMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999729973172338	WITHOUT_CLASSIFICATION	2.5373680548684924E-5	DESIGN	5.105012625338453E-7	IMPLEMENTATION	4.560615674829273E-7	DOCUMENTATION	4.2653895337860347E-7	DEFECT	2.359004342717238E-7	TEST
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999378716943119	WITHOUT_CLASSIFICATION	5.825280659082975E-5	IMPLEMENTATION	2.6565674667759203E-6	DESIGN	1.045941192686779E-6	TEST	1.0930055297366383E-7	DOCUMENTATION	6.368988491225864E-8	DEFECT
// currently allowed...	WITHOUT_CLASSIFICATION	0.9998620320047241	WITHOUT_CLASSIFICATION	7.157229090621149E-5	DESIGN	4.681931883497047E-5	IMPLEMENTATION	1.0761803739578218E-5	DOCUMENTATION	7.959782446286957E-6	DEFECT	8.547993488798891E-7	TEST
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.8336538907098195	WITHOUT_CLASSIFICATION	0.1656391286817967	DEFECT	6.836884972983574E-4	DESIGN	2.2959484701826268E-5	TEST	3.210682352731659E-7	DOCUMENTATION	1.1558148373956959E-8	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9988615034609433	WITHOUT_CLASSIFICATION	0.0011368853899579156	DESIGN	6.107941030001814E-7	DEFECT	3.9721728752639557E-7	IMPLEMENTATION	3.742589069338405E-7	DOCUMENTATION	2.2887880133771917E-7	TEST
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9993107377001899	WITHOUT_CLASSIFICATION	6.76385768457866E-4	DESIGN	5.881678661932639E-6	TEST	5.6919763486556925E-6	DEFECT	9.88420685875441E-7	DOCUMENTATION	3.144556558276404E-7	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996542510546474	WITHOUT_CLASSIFICATION	1.8910828171482481E-4	IMPLEMENTATION	1.4116823955014337E-4	DESIGN	9.24944591839366E-6	TEST	3.7508658380989787E-6	DEFECT	2.4721123313141984E-6	DOCUMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999821763613537	WITHOUT_CLASSIFICATION	1.5578560080530032E-5	IMPLEMENTATION	1.6561542047599125E-6	DESIGN	3.3617968963912407E-7	TEST	2.1588984472633605E-7	DEFECT	3.6854826613604675E-8	DOCUMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9997283099614434	WITHOUT_CLASSIFICATION	1.7252323568547198E-4	DEFECT	9.837928143877718E-5	IMPLEMENTATION	4.405614475569074E-7	DESIGN	3.0473636094306234E-7	TEST	4.222362380486971E-8	DOCUMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999926431166904	WITHOUT_CLASSIFICATION	7.317018056236771E-6	DESIGN	1.9349270470138034E-8	TEST	1.2252331279528662E-8	DOCUMENTATION	7.491381661006153E-9	DEFECT	7.722700471027408E-10	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999933107357533	WITHOUT_CLASSIFICATION	5.158137770839915E-6	DESIGN	6.000715018451528E-7	DEFECT	3.503783224020727E-7	IMPLEMENTATION	3.4240620190518683E-7	DOCUMENTATION	2.382704498995597E-7	TEST
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9998473652779494	WITHOUT_CLASSIFICATION	8.738941124826846E-5	DESIGN	5.009678300224933E-5	IMPLEMENTATION	8.834664829158184E-6	TEST	4.157680865194978E-6	DEFECT	2.156182105843086E-6	DOCUMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999938171022014	WITHOUT_CLASSIFICATION	4.102938421760428E-6	DEFECT	1.5948825463863853E-6	DESIGN	3.2377665395859125E-7	IMPLEMENTATION	8.521549722929791E-8	TEST	7.60846792888319E-8	DOCUMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9991714530912894	WITHOUT_CLASSIFICATION	8.242216404607732E-4	IMPLEMENTATION	2.166328408882172E-6	DEFECT	1.0934044214146095E-6	DOCUMENTATION	6.503419180753393E-7	TEST	4.1519350134964794E-7	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.999968021850376	WITHOUT_CLASSIFICATION	2.4189655770923645E-5	DESIGN	7.088783293636865E-6	TEST	3.248265057307044E-7	IMPLEMENTATION	3.1753852569313825E-7	DEFECT	5.7345527888673386E-8	DOCUMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999943405406555	WITHOUT_CLASSIFICATION	5.1509074877350466E-6	DESIGN	3.623146008575504E-7	IMPLEMENTATION	9.029829893929171E-8	TEST	4.5902902181252245E-8	DEFECT	1.0036054726975861E-8	DOCUMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9995173686407927	WITHOUT_CLASSIFICATION	3.086610126981353E-4	IMPLEMENTATION	1.3420062056206585E-4	DESIGN	1.940040744873077E-5	TEST	1.5396101994476138E-5	DEFECT	4.973216503771786E-6	DOCUMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999467047621234	WITHOUT_CLASSIFICATION	5.052885600043265E-5	DESIGN	1.2559583981872553E-6	DEFECT	1.0598738149177556E-6	IMPLEMENTATION	3.896581770116631E-7	DOCUMENTATION	6.089148585041446E-8	TEST
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999982049737239	WITHOUT_CLASSIFICATION	6.982169091171579E-7	DEFECT	4.333356437955411E-7	DESIGN	3.9479730406005694E-7	DOCUMENTATION	1.7523016203764997E-7	IMPLEMENTATION	9.344625712531508E-8	TEST
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999967433590177	WITHOUT_CLASSIFICATION	1.3281081166773539E-6	DEFECT	6.645732366829416E-7	IMPLEMENTATION	6.183496176808754E-7	DOCUMENTATION	4.948179400589684E-7	DESIGN	1.5079207118861688E-7	TEST
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999721658529761	WITHOUT_CLASSIFICATION	1.5887105210177436E-5	IMPLEMENTATION	8.995744307228502E-6	DESIGN	2.4127145537480787E-6	DEFECT	3.2187921832120664E-7	DOCUMENTATION	2.1670373436376266E-7	TEST
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9910874363290523	WITHOUT_CLASSIFICATION	0.008873158073537188	DESIGN	2.0909284037610644E-5	DEFECT	1.1852595672035739E-5	DOCUMENTATION	4.816140242743544E-6	TEST	1.8275774581861243E-6	IMPLEMENTATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999515926076455	WITHOUT_CLASSIFICATION	3.206210073593267E-5	DESIGN	1.3193433446588193E-5	DEFECT	1.9757543563645967E-6	TEST	1.0715243241576699E-6	DOCUMENTATION	1.0457949126402208E-7	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999958277500193	WITHOUT_CLASSIFICATION	1.7208285618945384E-6	DESIGN	1.2688999288472197E-6	DEFECT	1.064347235349397E-6	IMPLEMENTATION	1.1168219003191518E-7	TEST	6.492064559464963E-9	DOCUMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9772318964835847	WITHOUT_CLASSIFICATION	0.022745011346441198	DESIGN	2.0658113786847177E-5	DEFECT	2.052359147574079E-6	IMPLEMENTATION	2.8128789312875216E-7	DOCUMENTATION	1.0040914663100776E-7	TEST
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999643617689886	WITHOUT_CLASSIFICATION	3.4498912483173E-5	DESIGN	1.0715027017208974E-6	DEFECT	3.453904277113714E-8	DOCUMENTATION	2.0886044037294206E-8	IMPLEMENTATION	1.2390739597908637E-8	TEST
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.999793516448568	WITHOUT_CLASSIFICATION	1.9692599681979492E-4	DESIGN	7.956583920548635E-6	IMPLEMENTATION	7.534928423414589E-7	TEST	7.341598746873173E-7	DOCUMENTATION	1.1331797468466876E-7	DEFECT
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9987074501664035	WITHOUT_CLASSIFICATION	0.001260310059453416	DESIGN	1.853566471115822E-5	IMPLEMENTATION	9.98249019094601E-6	DOCUMENTATION	2.047979144233316E-6	DEFECT	1.6736400968154754E-6	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999946571692424	WITHOUT_CLASSIFICATION	4.208172177802272E-6	DESIGN	5.774718550658646E-7	DEFECT	3.8021920136483166E-7	DOCUMENTATION	1.222238387620911E-7	IMPLEMENTATION	5.474368453564011E-8	TEST
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999946571692424	WITHOUT_CLASSIFICATION	4.208172177802272E-6	DESIGN	5.774718550658646E-7	DEFECT	3.8021920136483166E-7	DOCUMENTATION	1.222238387620911E-7	IMPLEMENTATION	5.474368453564011E-8	TEST
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9995022935301977	WITHOUT_CLASSIFICATION	4.952780263743709E-4	DESIGN	1.9114042005749647E-6	DEFECT	3.1892450254911004E-7	TEST	1.3015176520076802E-7	IMPLEMENTATION	6.79629597069827E-8	DOCUMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.999839471270089	WITHOUT_CLASSIFICATION	1.5629059084204197E-4	DESIGN	1.981492895484764E-6	IMPLEMENTATION	1.314180260579902E-6	TEST	7.7581294933529E-7	DOCUMENTATION	1.666529635932845E-7	DEFECT
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999998969646703	WITHOUT_CLASSIFICATION	8.485860162633765E-8	DESIGN	1.1261559591036426E-8	TEST	5.99709155334388E-9	IMPLEMENTATION	6.351707283347158E-10	DOCUMENTATION	2.829062455686326E-10	DEFECT
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9962080840817974	WITHOUT_CLASSIFICATION	0.0037830170175677355	DESIGN	8.848950353313896E-6	TEST	4.008565464399483E-8	IMPLEMENTATION	8.44729768317905E-9	DOCUMENTATION	1.4173291968350976E-9	DEFECT
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999998041583954	WITHOUT_CLASSIFICATION	9.726872743296186E-8	IMPLEMENTATION	6.350960551397091E-8	DEFECT	1.5902197918726414E-8	DESIGN	1.376394210140915E-8	TEST	5.3971314363816284E-9	DOCUMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9997794370255324	WITHOUT_CLASSIFICATION	2.1610752632263922E-4	IMPLEMENTATION	3.0532832693574808E-6	DOCUMENTATION	8.670021105986416E-7	TEST	2.8093153443418874E-7	DEFECT	2.5423123058592745E-7	DESIGN
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999931852959164	WITHOUT_CLASSIFICATION	5.648340858861035E-6	DESIGN	1.1186959829282342E-6	DEFECT	2.126669498033296E-8	DOCUMENTATION	2.0881723884239984E-8	TEST	5.518823069070278E-9	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9995786781183192	WITHOUT_CLASSIFICATION	4.208911020505036E-4	DESIGN	2.447390794329604E-7	TEST	1.6917946342748003E-7	DEFECT	1.6628558854983577E-8	DOCUMENTATION	2.3252853134165794E-10	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999928700065153	WITHOUT_CLASSIFICATION	5.04913633238614E-6	DEFECT	1.5182668344929439E-6	DESIGN	3.7102839429206057E-7	TEST	1.646742431680799E-7	IMPLEMENTATION	2.688768039829723E-8	DOCUMENTATION
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9972962392564025	WITHOUT_CLASSIFICATION	0.0026947258634447014	DESIGN	6.061572117634714E-6	TEST	1.4733547045838865E-6	DEFECT	1.2374656974367723E-6	DOCUMENTATION	2.624876331436353E-7	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999108713088063	WITHOUT_CLASSIFICATION	5.5972414300072505E-5	IMPLEMENTATION	1.6181298526930775E-5	DEFECT	7.587855250259808E-6	DESIGN	6.5286722389925305E-6	TEST	2.858450877421572E-6	DOCUMENTATION
// A collection of components...	WITHOUT_CLASSIFICATION	0.9998073336857378	WITHOUT_CLASSIFICATION	7.65807805861348E-5	DESIGN	7.114602612626651E-5	IMPLEMENTATION	3.24758600217855E-5	DEFECT	7.034267381435264E-6	TEST	5.429380146595789E-6	DOCUMENTATION
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9998854036248584	WITHOUT_CLASSIFICATION	7.769924940492095E-5	DESIGN	1.8733232607504294E-5	DEFECT	1.5689745074159777E-5	IMPLEMENTATION	1.2751760622196042E-6	DOCUMENTATION	1.19897199281335E-6	TEST
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999984017509519	WITHOUT_CLASSIFICATION	7.551386036212425E-7	DEFECT	4.5688809780107293E-7	DOCUMENTATION	2.1869437522606488E-7	IMPLEMENTATION	1.2870650842516414E-7	DESIGN	3.8821463136331534E-8	TEST
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9981345823029397	WITHOUT_CLASSIFICATION	0.0010942042021951175	IMPLEMENTATION	7.519647790065529E-4	DESIGN	1.2556058902504918E-5	DEFECT	4.783794105202228E-6	TEST	1.908862850851466E-6	DOCUMENTATION
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9994941074445194	WITHOUT_CLASSIFICATION	4.3990870972853856E-4	DEFECT	6.306566285707909E-5	DESIGN	1.8860187525328505E-6	DOCUMENTATION	8.250816831262933E-7	TEST	2.070824594073844E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9989418367192779	WITHOUT_CLASSIFICATION	0.0010507812872022552	DESIGN	3.6012736602040196E-6	TEST	2.6561014125912988E-6	DEFECT	1.0211328269500395E-6	DOCUMENTATION	1.0348561999653678E-7	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999127433133	WITHOUT_CLASSIFICATION	4.703901230177107E-8	DESIGN	2.6459268706627444E-8	IMPLEMENTATION	1.1116967393994656E-8	TEST	1.902182138044346E-9	DEFECT	7.392561788274838E-10	DOCUMENTATION
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.999992553396914	WITHOUT_CLASSIFICATION	6.3626143977677705E-6	DESIGN	9.210937049560751E-7	DEFECT	8.479400826306854E-8	IMPLEMENTATION	4.216634843938194E-8	DOCUMENTATION	3.5934626659496786E-8	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979217918429542	WITHOUT_CLASSIFICATION	0.0015495023733948787	IMPLEMENTATION	4.116778463240922E-4	DEFECT	6.974650955987165E-5	DESIGN	4.3283380286399124E-5	DOCUMENTATION	3.998047480523398E-6	TEST
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9996989755507321	WITHOUT_CLASSIFICATION	2.864783656911054E-4	DESIGN	1.3045207363551885E-5	TEST	1.108121048971609E-6	IMPLEMENTATION	2.171573344177689E-7	DOCUMENTATION	1.7559782991500657E-7	DEFECT
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999278378569136	WITHOUT_CLASSIFICATION	5.868791513628738E-5	DESIGN	1.1309909889214054E-5	DEFECT	1.0556717644053787E-6	TEST	5.60928337389455E-7	IMPLEMENTATION	5.477179590215106E-7	DOCUMENTATION
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999966258737546	WITHOUT_CLASSIFICATION	2.2520169881214035E-6	DESIGN	5.998921877740334E-7	TEST	4.466623653605361E-7	DOCUMENTATION	6.798570550747725E-8	IMPLEMENTATION	7.568998683818117E-9	DEFECT
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9998685562365455	WITHOUT_CLASSIFICATION	1.1764265502218213E-4	DESIGN	9.991191941974111E-6	IMPLEMENTATION	1.9716242444586524E-6	DEFECT	1.1020005687791152E-6	DOCUMENTATION	7.362916770616097E-7	TEST
/*implied*/	WITHOUT_CLASSIFICATION	0.9992924187805021	WITHOUT_CLASSIFICATION	3.7369586319100555E-4	IMPLEMENTATION	2.739699226239646E-4	DESIGN	3.0745809786539085E-5	TEST	2.2070018968392114E-5	DOCUMENTATION	7.099604927938064E-6	DEFECT
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.8800613943497131	WITHOUT_CLASSIFICATION	0.11991948758241142	IMPLEMENTATION	1.0832181846188844E-5	TEST	3.827874129208863E-6	DEFECT	3.3378564591479614E-6	DOCUMENTATION	1.1201554410103204E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979217918429542	WITHOUT_CLASSIFICATION	0.0015495023733948787	IMPLEMENTATION	4.116778463240922E-4	DEFECT	6.974650955987165E-5	DESIGN	4.3283380286399124E-5	DOCUMENTATION	3.998047480523398E-6	TEST
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979217918429542	WITHOUT_CLASSIFICATION	0.0015495023733948787	IMPLEMENTATION	4.116778463240922E-4	DEFECT	6.974650955987165E-5	DESIGN	4.3283380286399124E-5	DOCUMENTATION	3.998047480523398E-6	TEST
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.999712185564684	WITHOUT_CLASSIFICATION	1.7340257096642902E-4	DEFECT	5.401273678012151E-5	IMPLEMENTATION	4.613456812665647E-5	DESIGN	7.557807936476804E-6	DOCUMENTATION	6.7067515062303675E-6	TEST
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9997083793023174	WITHOUT_CLASSIFICATION	2.9153334537707244E-4	DESIGN	6.023975610319244E-8	DEFECT	1.3481346319858469E-8	TEST	1.3393450971323525E-8	DOCUMENTATION	2.377524363317159E-10	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999984387595315	WITHOUT_CLASSIFICATION	1.325254311749893E-6	DESIGN	9.049098164665605E-8	DEFECT	6.87896123256817E-8	DOCUMENTATION	5.467288691030314E-8	TEST	2.2032675867083284E-8	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9953266162136792	WITHOUT_CLASSIFICATION	0.0037221226883756876	IMPLEMENTATION	7.072383192045944E-4	DEFECT	2.0371034374270527E-4	DESIGN	3.085698820315167E-5	DOCUMENTATION	9.455446794472735E-6	TEST
/*	WITHOUT_CLASSIFICATION	0.9967552008360161	WITHOUT_CLASSIFICATION	0.002240573261620505	DESIGN	3.059997711743128E-4	TEST	3.0513762412901315E-4	DOCUMENTATION	2.1112684642552555E-4	DEFECT	1.8196166063468014E-4	IMPLEMENTATION
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9997553686309338	WITHOUT_CLASSIFICATION	2.3838535472757723E-4	DESIGN	2.585133934887226E-6	DEFECT	2.3098605319419995E-6	DOCUMENTATION	1.189285074402394E-6	TEST	1.6173479749163165E-7	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.999992829799156	WITHOUT_CLASSIFICATION	6.6507511412450064E-6	DESIGN	3.74568063813408E-7	DEFECT	1.2630651131115006E-7	IMPLEMENTATION	1.5973874735169674E-8	TEST	2.6012526753738425E-9	DOCUMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9995997066550191	WITHOUT_CLASSIFICATION	3.9566076445046966E-4	IMPLEMENTATION	4.605618624537177E-6	DESIGN	2.284811984537486E-8	DOCUMENTATION	2.6749509741342153E-9	TEST	1.438834967583126E-9	DEFECT
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999814851572858	WITHOUT_CLASSIFICATION	1.7416327940628677E-5	IMPLEMENTATION	4.1001514318091943E-7	DOCUMENTATION	3.419842358260164E-7	DEFECT	2.7455005876153464E-7	TEST	7.196533580417158E-8	DESIGN
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999996567707437	WITHOUT_CLASSIFICATION	1.371440244188783E-7	TEST	1.2205862137216875E-7	DESIGN	5.975924022755212E-8	DEFECT	2.1472164168842394E-8	IMPLEMENTATION	2.7952061713606505E-9	DOCUMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.999998830775055	WITHOUT_CLASSIFICATION	6.49475982874207E-7	IMPLEMENTATION	1.6661891843725033E-7	DESIGN	1.6589387388275064E-7	TEST	1.133004838020753E-7	DOCUMENTATION	7.393568607811487E-8	DEFECT
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999876027878752	WITHOUT_CLASSIFICATION	1.0263403691115087E-5	IMPLEMENTATION	1.7017423160099437E-6	DESIGN	2.607939414352674E-7	DOCUMENTATION	1.2611480505916633E-7	DEFECT	4.5157371240154336E-8	TEST
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999977956969546	WITHOUT_CLASSIFICATION	2.0045654895362997E-6	IMPLEMENTATION	1.3017167833319984E-7	DOCUMENTATION	5.208191835507242E-8	TEST	8.897888044890725E-9	DEFECT	8.586071062216465E-9	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999976990594215	WITHOUT_CLASSIFICATION	1.0720579139045844E-6	DEFECT	5.926939656249021E-7	IMPLEMENTATION	3.761585082361712E-7	TEST	2.3793274447098228E-7	DOCUMENTATION	2.2097446330308918E-8	DESIGN
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994521118097767	WITHOUT_CLASSIFICATION	3.110375487552849E-4	IMPLEMENTATION	1.8359225904247288E-4	DEFECT	3.902583614736705E-5	DESIGN	9.952127688336525E-6	DOCUMENTATION	4.2804185900459604E-6	TEST
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999334985100099	WITHOUT_CLASSIFICATION	5.9520248458945515E-5	IMPLEMENTATION	5.828069823728072E-6	DESIGN	6.6341314537848E-7	TEST	3.164092074073887E-7	DEFECT	1.7334935471653504E-7	DOCUMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999933219832121	WITHOUT_CLASSIFICATION	2.2490304012479215E-6	IMPLEMENTATION	1.8004515373860651E-6	TEST	1.122029430612742E-6	DEFECT	8.934044909576311E-7	DOCUMENTATION	6.131009277493781E-7	DESIGN
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999947300409189	WITHOUT_CLASSIFICATION	2.751274258514222E-6	IMPLEMENTATION	1.0540425671973476E-6	TEST	8.767166349622249E-7	DEFECT	4.0829476148294136E-7	DESIGN	1.7963085917901885E-7	DOCUMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999992541748861	WITHOUT_CLASSIFICATION	3.0690156703621134E-7	DEFECT	3.017493236501704E-7	IMPLEMENTATION	6.337637577963695E-8	TEST	4.061956764558528E-8	DESIGN	3.3178279868622143E-8	DOCUMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998301783311329	WITHOUT_CLASSIFICATION	9.120149850243161E-4	DEFECT	4.430637825459217E-4	DESIGN	3.1391840631627793E-4	IMPLEMENTATION	1.8277954189851926E-5	DOCUMENTATION	1.0941560594592253E-5	TEST
//TODO:	WITHOUT_CLASSIFICATION	0.9989041677573722	WITHOUT_CLASSIFICATION	2.8895543312642185E-4	DEFECT	2.8891909828764826E-4	DESIGN	2.512995214789088E-4	IMPLEMENTATION	1.3974299256527828E-4	DOCUMENTATION	1.2691519716939492E-4	TEST
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999995892662781	WITHOUT_CLASSIFICATION	3.1601099310757026E-7	IMPLEMENTATION	4.199587585490542E-8	DESIGN	2.692315632786846E-8	DOCUMENTATION	1.9790356382885003E-8	TEST	6.013340190025598E-9	DEFECT
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999962735979495	WITHOUT_CLASSIFICATION	3.7118506404308205E-6	DESIGN	7.204130787285102E-9	DEFECT	4.38733515672187E-9	TEST	2.679048122350547E-9	IMPLEMENTATION	2.8089584165717267E-10	DOCUMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999934750096244	WITHOUT_CLASSIFICATION	3.146069264830349E-6	IMPLEMENTATION	2.653581220821572E-6	DESIGN	4.04831114244644E-7	TEST	2.3627551858531056E-7	DEFECT	8.42332571680379E-8	DOCUMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999128418441421	WITHOUT_CLASSIFICATION	6.293329313011972E-5	DESIGN	1.6333271615591998E-5	DEFECT	6.159767355485937E-6	IMPLEMENTATION	8.967597395419623E-7	TEST	8.35064017177717E-7	DOCUMENTATION
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.999998531932812	WITHOUT_CLASSIFICATION	1.1928374197115527E-6	IMPLEMENTATION	1.1927995930219703E-7	DESIGN	9.986713689853053E-8	DEFECT	3.6503363691515494E-8	DOCUMENTATION	1.9579308498092638E-8	TEST
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999906323834219	WITHOUT_CLASSIFICATION	7.542171574962788E-6	DESIGN	1.0203765486098043E-6	IMPLEMENTATION	7.256702572936574E-7	TEST	5.337900169574453E-8	DOCUMENTATION	2.6019195509889282E-8	DEFECT
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999604189075769	WITHOUT_CLASSIFICATION	3.884285416831992E-5	IMPLEMENTATION	2.579415059488432E-7	TEST	2.4037745141097033E-7	DOCUMENTATION	1.3234838559081438E-7	DESIGN	1.0757091168181591E-7	DEFECT
// Get the function name node.	WITHOUT_CLASSIFICATION	0.999993142612789	WITHOUT_CLASSIFICATION	5.8171915112445776E-6	IMPLEMENTATION	4.3880038953415117E-7	DOCUMENTATION	3.4975188119742354E-7	TEST	1.8676859003391874E-7	DEFECT	6.487483883089623E-8	DESIGN
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9993499333808805	WITHOUT_CLASSIFICATION	6.486107226269226E-4	DESIGN	1.1346821220748238E-6	DEFECT	1.8624473070076059E-7	IMPLEMENTATION	1.0184497496840879E-7	TEST	3.312466474370489E-8	DOCUMENTATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999995121825811	WITHOUT_CLASSIFICATION	3.155608498494494E-7	DESIGN	1.207563025913033E-7	TEST	2.627452781881391E-8	DEFECT	1.4419263902120757E-8	IMPLEMENTATION	1.0806474647709482E-8	DOCUMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999964160353498	WITHOUT_CLASSIFICATION	1.344457399809734E-6	DEFECT	1.2757917102969292E-6	DESIGN	4.531909922402269E-7	IMPLEMENTATION	2.64300001067405E-7	TEST	2.462245467707269E-7	DOCUMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.999991599533538	WITHOUT_CLASSIFICATION	5.254655931557885E-6	IMPLEMENTATION	2.1977636668756674E-6	DEFECT	6.011814163302329E-7	DOCUMENTATION	2.0922546582268577E-7	TEST	1.3763998138552926E-7	DESIGN
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999756238060861	WITHOUT_CLASSIFICATION	2.3325835265111316E-5	DEFECT	5.52647446222295E-7	IMPLEMENTATION	2.8705664268971455E-7	DESIGN	1.4340698131424802E-7	DOCUMENTATION	6.724757868341936E-8	TEST
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999430009658545	WITHOUT_CLASSIFICATION	3.870679693672123E-5	DESIGN	8.583515732085343E-6	DEFECT	8.314109518487443E-6	TEST	1.0787018980255275E-6	IMPLEMENTATION	3.1591006017721394E-7	DOCUMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999929697058891	WITHOUT_CLASSIFICATION	6.841616664146594E-6	DESIGN	7.096058480094031E-8	IMPLEMENTATION	5.752059983780118E-8	TEST	3.11813991303608E-8	DOCUMENTATION	2.9014863015617234E-8	DEFECT
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9996827015239457	WITHOUT_CLASSIFICATION	2.934836410307937E-4	DESIGN	9.685174782225156E-6	IMPLEMENTATION	6.971296975498155E-6	TEST	5.040788811558671E-6	DOCUMENTATION	2.117574454151276E-6	DEFECT
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.999977266686437	WITHOUT_CLASSIFICATION	2.1964602183361198E-5	IMPLEMENTATION	4.6882265438422254E-7	DESIGN	2.3675029999449926E-7	TEST	4.24756605830274E-8	DOCUMENTATION	2.0662764638756915E-8	DEFECT
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999931058862871	WITHOUT_CLASSIFICATION	6.298724082123348E-6	DESIGN	3.92207886472615E-7	DOCUMENTATION	1.762447006568171E-7	TEST	1.6478015133615972E-8	IMPLEMENTATION	1.0459028596964213E-8	DEFECT
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999878481529695	WITHOUT_CLASSIFICATION	1.1812083894302788E-5	DESIGN	2.794625491171363E-7	DEFECT	3.4724474862450594E-8	DOCUMENTATION	2.0431962572015598E-8	TEST	5.1441496110358005E-9	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999853664808339	WITHOUT_CLASSIFICATION	9.250428903148193E-6	TEST	4.677964258581969E-6	IMPLEMENTATION	3.2522259141469973E-7	DEFECT	2.6485788585608795E-7	DOCUMENTATION	1.150455271118449E-7	DESIGN
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999627368684182	WITHOUT_CLASSIFICATION	3.711351067410074E-5	IMPLEMENTATION	6.584694034469359E-8	DEFECT	5.968391796767734E-8	DOCUMENTATION	1.2637519417405198E-8	TEST	1.1452530131157949E-8	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999813755414327	WITHOUT_CLASSIFICATION	1.4335010920231402E-5	IMPLEMENTATION	1.846737248449519E-6	DESIGN	1.4947686951718053E-6	DEFECT	6.532925997044178E-7	TEST	2.946491036010719E-7	DOCUMENTATION
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999976226648633	WITHOUT_CLASSIFICATION	2.081511868149091E-6	IMPLEMENTATION	1.7721787279601907E-7	DESIGN	4.465558534173505E-8	DEFECT	4.0939225089341894E-8	TEST	3.3010585302388996E-8	DOCUMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999813755414327	WITHOUT_CLASSIFICATION	1.4335010920231402E-5	IMPLEMENTATION	1.846737248449519E-6	DESIGN	1.4947686951718053E-6	DEFECT	6.532925997044178E-7	TEST	2.946491036010719E-7	DOCUMENTATION
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999997533609912	WITHOUT_CLASSIFICATION	2.2902840610737246E-7	DESIGN	8.072389909316495E-9	IMPLEMENTATION	5.981560025496431E-9	DEFECT	2.3056151741934917E-9	DOCUMENTATION	1.2510375143416666E-9	TEST
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999571832862024	WITHOUT_CLASSIFICATION	3.61032706219663E-5	IMPLEMENTATION	5.957398258365769E-6	DESIGN	5.568952818780143E-7	DEFECT	1.3199392666675308E-7	DOCUMENTATION	6.715570865474263E-8	TEST
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9986619202739593	WITHOUT_CLASSIFICATION	0.0012993134603844713	IMPLEMENTATION	2.8921624832624564E-5	DOCUMENTATION	5.054348092620123E-6	DESIGN	3.4766594382985958E-6	TEST	1.3136332926378E-6	DEFECT
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999939748410035	WITHOUT_CLASSIFICATION	5.5250977934573207E-5	IMPLEMENTATION	4.630468824674408E-6	DESIGN	2.1094433756518347E-7	DEFECT	9.924624606036898E-8	TEST	5.995262213433699E-8	DOCUMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999838666133293	WITHOUT_CLASSIFICATION	1.1863450749143058E-5	IMPLEMENTATION	4.09276463335281E-6	DESIGN	9.628023933819842E-8	TEST	4.2712685475107525E-8	DEFECT	3.817836345382432E-8	DOCUMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.999218537409681	WITHOUT_CLASSIFICATION	7.395232559174848E-4	IMPLEMENTATION	3.3308731537623765E-5	DOCUMENTATION	4.52199239714246E-6	DESIGN	3.3551475543140165E-6	TEST	7.534629125181671E-7	DEFECT
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999994947182632	WITHOUT_CLASSIFICATION	2.426641405882431E-7	DESIGN	1.0340909120901955E-7	IMPLEMENTATION	7.361892820960158E-8	TEST	6.283591753263589E-8	DOCUMENTATION	2.275365918326641E-8	DEFECT
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999244422367788	WITHOUT_CLASSIFICATION	6.832061032323344E-5	DESIGN	6.309858916761354E-6	TEST	4.045993516697372E-7	DEFECT	3.928846414094339E-7	DOCUMENTATION	1.298099881030783E-7	IMPLEMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9996971729141039	WITHOUT_CLASSIFICATION	2.871139342019257E-4	DEFECT	7.801055948494009E-6	DESIGN	5.254307830959994E-6	IMPLEMENTATION	1.8447625127444724E-6	DOCUMENTATION	8.130254020879577E-7	TEST
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9998225409630215	WITHOUT_CLASSIFICATION	9.300719946769028E-5	DESIGN	8.257262403320869E-5	IMPLEMENTATION	9.857851474571009E-7	DEFECT	6.102569963050309E-7	DOCUMENTATION	2.831713339896977E-7	TEST
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999926874986214	WITHOUT_CLASSIFICATION	3.522791530915916E-6	DESIGN	3.1417490776462298E-6	IMPLEMENTATION	2.546466282026572E-7	DEFECT	2.1413439252850207E-7	TEST	1.7917974938479318E-7	DOCUMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999286196005336	WITHOUT_CLASSIFICATION	7.03374154960437E-5	DESIGN	7.691917329025858E-7	DOCUMENTATION	1.8328618882018927E-7	TEST	5.5148440181442736E-8	IMPLEMENTATION	3.53576084420838E-8	DEFECT
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999957630977219	WITHOUT_CLASSIFICATION	3.2123535602592815E-6	IMPLEMENTATION	6.948109483386814E-7	TEST	2.840971008151477E-7	DESIGN	2.969595320235033E-8	DOCUMENTATION	1.594471555789992E-8	DEFECT
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9742790634584699	WITHOUT_CLASSIFICATION	0.02383652627556641	DEFECT	8.784299654097329E-4	DESIGN	5.213061478309056E-4	TEST	4.517128083765277E-4	IMPLEMENTATION	3.296134434655381E-5	DOCUMENTATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9842667115822418	WITHOUT_CLASSIFICATION	0.012867497535890766	IMPLEMENTATION	0.002345921190245618	DEFECT	4.022867739583137E-4	DOCUMENTATION	6.768872953683366E-5	TEST	4.9894188126882054E-5	DESIGN
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999972304831147	WITHOUT_CLASSIFICATION	1.6746805569700863E-6	IMPLEMENTATION	1.009447564921047E-6	DESIGN	4.513961933188054E-8	TEST	2.0589513694361047E-8	DOCUMENTATION	1.9659630595287234E-8	DEFECT
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.999983136801505	WITHOUT_CLASSIFICATION	1.6194658435935723E-5	DESIGN	3.148907853233728E-7	DEFECT	2.6683953463811E-7	IMPLEMENTATION	5.4846092714176024E-8	TEST	3.196364644191293E-8	DOCUMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.999999348354445	WITHOUT_CLASSIFICATION	5.090925985378408E-7	IMPLEMENTATION	5.295536248641921E-8	DESIGN	4.714087087578121E-8	DOCUMENTATION	4.0956416550691224E-8	TEST	1.5003065430165023E-9	DEFECT
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999813425110281	WITHOUT_CLASSIFICATION	1.7774504622020723E-5	DESIGN	4.0714687957182225E-7	DEFECT	3.211570683974959E-7	IMPLEMENTATION	1.3427496291376532E-7	TEST	2.0405439063374003E-8	DOCUMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999189999683711	WITHOUT_CLASSIFICATION	8.031454353358694E-5	DESIGN	3.6285793351213997E-7	TEST	1.4997847366024306E-7	DOCUMENTATION	1.1720939907356824E-7	DEFECT	5.544228902729423E-8	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999901554851545	WITHOUT_CLASSIFICATION	5.3603327509664804E-6	DESIGN	3.6355673255788097E-6	DEFECT	6.272986526175843E-7	TEST	1.1864368299861639E-7	IMPLEMENTATION	1.0267243333825815E-7	DOCUMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9986687526454977	WITHOUT_CLASSIFICATION	9.592641101748278E-4	DESIGN	3.159173414034513E-4	IMPLEMENTATION	3.543703411061449E-5	DEFECT	1.2868279679991727E-5	TEST	7.7605891333808E-6	DOCUMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9824275859868431	WITHOUT_CLASSIFICATION	0.01654106149885108	DESIGN	7.653038692441147E-4	TEST	2.374078385525741E-4	DEFECT	1.5945860340681276E-5	IMPLEMENTATION	1.2694946168311547E-5	DOCUMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9977690256065805	WITHOUT_CLASSIFICATION	0.002225217558483207	DESIGN	5.606420420253249E-6	DEFECT	7.005398655082817E-8	IMPLEMENTATION	6.166227849769995E-8	TEST	1.8698250989451376E-8	DOCUMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999261064245935	WITHOUT_CLASSIFICATION	5.9965953943601364E-5	IMPLEMENTATION	1.025937514964073E-5	DESIGN	1.9321753774849635E-6	TEST	1.349729065808833E-6	DEFECT	3.8634187026514827E-7	DOCUMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999885794758797	WITHOUT_CLASSIFICATION	1.0036674934904234E-5	DESIGN	1.366697959475835E-6	DEFECT	1.6556177925323964E-8	TEST	5.929265532089601E-10	DOCUMENTATION	2.121526071401509E-12	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9997790935379782	WITHOUT_CLASSIFICATION	1.40078552039765E-4	DESIGN	5.9570272660359826E-5	IMPLEMENTATION	7.311351240374632E-6	DEFECT	7.268909927642587E-6	DOCUMENTATION	6.67737615351536E-6	TEST
//default mode	WITHOUT_CLASSIFICATION	0.9999661337551257	WITHOUT_CLASSIFICATION	1.7076160815812697E-5	DESIGN	1.2199077451947856E-5	IMPLEMENTATION	1.796974941940547E-6	TEST	1.7080140126150474E-6	DOCUMENTATION	1.0860176519572796E-6	DEFECT
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999417204785309	WITHOUT_CLASSIFICATION	4.324849538385468E-5	IMPLEMENTATION	4.757759658624682E-6	DEFECT	3.855675588143977E-6	DESIGN	3.6370202327741875E-6	TEST	2.7805706058814954E-6	DOCUMENTATION
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999457109199127	WITHOUT_CLASSIFICATION	4.70006131367704E-5	DEFECT	6.28328151669291E-6	IMPLEMENTATION	6.140994180081263E-7	TEST	2.2107931145679993E-7	DOCUMENTATION	1.70006704375605E-7	DESIGN
//after reset!	WITHOUT_CLASSIFICATION	0.9999717586112846	WITHOUT_CLASSIFICATION	1.1519261361203638E-5	DEFECT	1.0761031236658484E-5	IMPLEMENTATION	3.015728399154913E-6	TEST	1.9627360415939853E-6	DESIGN	9.82631676675691E-7	DOCUMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.8885262805197951	WITHOUT_CLASSIFICATION	0.11098222095131993	DESIGN	3.0079913736423785E-4	IMPLEMENTATION	9.960940649516286E-5	TEST	5.659953151625407E-5	DOCUMENTATION	3.4490453509432024E-5	DEFECT
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999957881286057	WITHOUT_CLASSIFICATION	3.040947817682132E-6	IMPLEMENTATION	1.1411053590441571E-6	DESIGN	1.6064122706314606E-8	TEST	1.329735436458984E-8	DOCUMENTATION	4.5674068286287794E-10	DEFECT
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999839475955694	WITHOUT_CLASSIFICATION	1.3230199810743655E-5	DEFECT	1.1540640287761505E-6	DESIGN	9.725653366005803E-7	DOCUMENTATION	4.1421441259814197E-7	IMPLEMENTATION	2.813608418553554E-7	TEST
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999355546411989	WITHOUT_CLASSIFICATION	5.530345450817658E-5	IMPLEMENTATION	5.194094872158249E-6	DOCUMENTATION	1.8809786000016252E-6	TEST	1.3715223777760862E-6	DEFECT	6.953084429906936E-7	DESIGN
//if its "id"	WITHOUT_CLASSIFICATION	0.9999711993604	WITHOUT_CLASSIFICATION	1.0325819088062725E-5	DESIGN	7.801334063868389E-6	DEFECT	5.4444742271003445E-6	TEST	3.5829561614746933E-6	IMPLEMENTATION	1.6460560594447092E-6	DOCUMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999898222347234	WITHOUT_CLASSIFICATION	4.304379166519655E-6	DEFECT	2.260189193261866E-6	IMPLEMENTATION	2.011152631719156E-6	DESIGN	9.114917573306636E-7	DOCUMENTATION	6.90552527884699E-7	TEST
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999809599076053	WITHOUT_CLASSIFICATION	1.1180903204220648E-5	IMPLEMENTATION	3.4723121691508767E-6	DEFECT	1.6945080188490295E-6	DOCUMENTATION	1.4106108718673105E-6	TEST	1.2817581306915915E-6	DESIGN
//important!!	WITHOUT_CLASSIFICATION	0.9983411548186313	WITHOUT_CLASSIFICATION	0.0012292177774048312	DEFECT	2.0066174715446068E-4	DESIGN	1.179283398734413E-4	DOCUMENTATION	8.563663358386187E-5	IMPLEMENTATION	2.5400683352181425E-5	TEST
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999690185227268	WITHOUT_CLASSIFICATION	2.6137463237758967E-5	DESIGN	1.8486084059895476E-6	TEST	1.6088367764634538E-6	IMPLEMENTATION	1.0931264389666191E-6	DEFECT	2.9344241397233525E-7	DOCUMENTATION
// an association	WITHOUT_CLASSIFICATION	0.9999972192871571	WITHOUT_CLASSIFICATION	1.991794630530561E-6	TEST	5.261720941276629E-7	DOCUMENTATION	1.6846529030885787E-7	DESIGN	7.310313594573549E-8	DEFECT	2.117769180499837E-8	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.9996789914787104	WITHOUT_CLASSIFICATION	3.0498273526016707E-4	DEFECT	8.932452986932234E-6	IMPLEMENTATION	3.245497097119688E-6	DESIGN	2.967655657548294E-6	DOCUMENTATION	8.801802878882807E-7	TEST
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9862936504425607	WITHOUT_CLASSIFICATION	0.013533783859048612	DEFECT	1.249005784181366E-4	TEST	4.301382727049108E-5	DESIGN	4.6182046669855845E-6	DOCUMENTATION	3.30880350017071E-8	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999885794758797	WITHOUT_CLASSIFICATION	1.0036674934904234E-5	DESIGN	1.366697959475835E-6	DEFECT	1.6556177925323964E-8	TEST	5.929265532089601E-10	DOCUMENTATION	2.121526071401509E-12	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9971972977040857	WITHOUT_CLASSIFICATION	0.0011251577828131731	DEFECT	8.562429340873636E-4	IMPLEMENTATION	3.9108360266300535E-4	DOCUMENTATION	2.9209383591125005E-4	DESIGN	1.3812414043951898E-4	TEST
// collections of values	WITHOUT_CLASSIFICATION	0.999999677699157	WITHOUT_CLASSIFICATION	1.44962235244857E-7	DESIGN	1.0456490449484782E-7	DEFECT	2.920217332879965E-8	IMPLEMENTATION	2.6524248938950348E-8	TEST	1.704728099975836E-8	DOCUMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9923208640616309	WITHOUT_CLASSIFICATION	0.0061156402129410115	DESIGN	5.233133031010189E-4	DEFECT	4.567592689066956E-4	IMPLEMENTATION	3.83680124537444E-4	DOCUMENTATION	1.9974302888293638E-4	TEST
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999937842634695	WITHOUT_CLASSIFICATION	5.26819851603248E-6	DEFECT	4.552282985368417E-7	TEST	3.538426637699004E-7	DESIGN	7.088798033703822E-8	IMPLEMENTATION	6.757907176379374E-8	DOCUMENTATION
//special case	WITHOUT_CLASSIFICATION	0.999936786806989	WITHOUT_CLASSIFICATION	5.84355287994037E-5	IMPLEMENTATION	2.249162198261792E-6	DOCUMENTATION	1.1412166116017462E-6	DEFECT	8.753289406113731E-7	DESIGN	5.119564610148892E-7	TEST
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999995557757227	WITHOUT_CLASSIFICATION	2.6028382878056105E-7	DOCUMENTATION	7.397238828644366E-8	TEST	5.5099450684043003E-8	DESIGN	4.399742235406896E-8	DEFECT	1.08711872719505E-8	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.999994719342255	WITHOUT_CLASSIFICATION	5.098174656463223E-6	DESIGN	1.029970029936816E-7	DEFECT	5.3447075748136235E-8	DOCUMENTATION	1.645430101978422E-8	IMPLEMENTATION	9.584708770745696E-9	TEST
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9993978908392585	DESIGN	5.974878875535191E-4	WITHOUT_CLASSIFICATION	3.572650647257674E-6	DEFECT	8.134320349537958E-7	TEST	1.5883644725954322E-7	IMPLEMENTATION	7.63540586591033E-8	DOCUMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998634364056772	WITHOUT_CLASSIFICATION	8.189091930646292E-5	IMPLEMENTATION	4.944552074446815E-5	DESIGN	2.3515979460716806E-6	DEFECT	2.3212875486409594E-6	TEST	5.542687771720765E-7	DOCUMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9987729207118852	WITHOUT_CLASSIFICATION	0.0012221222022591029	DESIGN	4.555433076114209E-6	DEFECT	2.2667382308230818E-7	TEST	1.1793386869226468E-7	DOCUMENTATION	5.704508784126592E-8	IMPLEMENTATION
//register collection role	WITHOUT_CLASSIFICATION	0.999261556942592	WITHOUT_CLASSIFICATION	6.541338311032985E-4	DESIGN	5.383818590412155E-5	IMPLEMENTATION	2.519188446427398E-5	TEST	3.30495197183798E-6	DEFECT	1.9742039646182083E-6	DOCUMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9998150737255208	WITHOUT_CLASSIFICATION	1.8113395456433257E-4	DESIGN	2.274285170676308E-6	TEST	1.2620392130006287E-6	DOCUMENTATION	2.2694516728842056E-7	DEFECT	2.9050363968202683E-8	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9994986743592443	WITHOUT_CLASSIFICATION	3.7216278126740834E-4	IMPLEMENTATION	1.0601388220978655E-4	DEFECT	8.485841511955151E-6	DESIGN	8.148614440635884E-6	DOCUMENTATION	6.514521325885188E-6	TEST
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9998648040740541	WITHOUT_CLASSIFICATION	8.028240227927422E-5	IMPLEMENTATION	2.3367743811891652E-5	DOCUMENTATION	1.540427281315841E-5	DESIGN	9.151997992042824E-6	DEFECT	6.989509049596207E-6	TEST
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999996596342678	WITHOUT_CLASSIFICATION	1.7630221633578144E-7	DESIGN	1.1156519905587344E-7	DOCUMENTATION	2.5566513531698625E-8	DEFECT	1.724584473397293E-8	TEST	9.685958484930129E-9	IMPLEMENTATION
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999996031896194	WITHOUT_CLASSIFICATION	1.6687104531636722E-7	IMPLEMENTATION	1.5650060760981828E-7	DESIGN	4.2346467365813526E-8	TEST	2.1039808218710984E-8	DOCUMENTATION	1.0052451991680088E-8	DEFECT
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999996239778985	WITHOUT_CLASSIFICATION	1.1210219573227465E-7	DOCUMENTATION	1.0379976630131814E-7	IMPLEMENTATION	7.1916649251312E-8	DESIGN	5.634409886756194E-8	TEST	3.1859391305324557E-8	DEFECT
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999993907775578	WITHOUT_CLASSIFICATION	2.645808877407062E-7	IMPLEMENTATION	1.874044733825831E-7	DESIGN	1.2953819600202028E-7	TEST	1.8447850836190048E-8	DEFECT	9.251034268746541E-9	DOCUMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999996555116614	WITHOUT_CLASSIFICATION	1.8353260312276972E-7	IMPLEMENTATION	1.2436778083028707E-7	DESIGN	3.088175342508888E-8	DEFECT	3.2866522493803043E-9	TEST	2.419548841923705E-9	DOCUMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9971972977040857	WITHOUT_CLASSIFICATION	0.0011251577828131731	DEFECT	8.562429340873636E-4	IMPLEMENTATION	3.9108360266300535E-4	DOCUMENTATION	2.9209383591125005E-4	DESIGN	1.3812414043951898E-4	TEST
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999323768396859	WITHOUT_CLASSIFICATION	2.962613395463042E-5	IMPLEMENTATION	1.8988453776109504E-5	DESIGN	8.5176140917544E-6	TEST	6.220043264908863E-6	DEFECT	4.270915226644151E-6	DOCUMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.998641608092726	WITHOUT_CLASSIFICATION	0.0010451689002827027	DEFECT	3.0699887157342287E-4	DESIGN	2.51719558020993E-6	IMPLEMENTATION	2.3907290163396963E-6	TEST	1.3162108212566812E-6	DOCUMENTATION
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999770272283387	WITHOUT_CLASSIFICATION	1.9482370408992694E-5	DESIGN	2.3827402801228906E-6	DEFECT	6.067619943567498E-7	DOCUMENTATION	4.689702626233788E-7	TEST	3.192871513781003E-8	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999668314785103	WITHOUT_CLASSIFICATION	3.023667775254353E-5	DESIGN	2.5846265723005337E-6	DEFECT	1.9088444646341337E-7	DOCUMENTATION	1.0937515815606308E-7	IMPLEMENTATION	4.695756034183114E-8	TEST
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9998874235179138	WITHOUT_CLASSIFICATION	1.0684346883285636E-4	DESIGN	5.494238415620697E-6	DEFECT	1.3699779118231972E-7	TEST	6.595072273298333E-8	IMPLEMENTATION	3.5826323854801834E-8	DOCUMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9713925165595654	WITHOUT_CLASSIFICATION	0.020678503165998178	IMPLEMENTATION	0.00712909949872356	DEFECT	3.0591331628464994E-4	DESIGN	3.029467338253496E-4	DOCUMENTATION	1.9102072560290385E-4	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9713925165595654	WITHOUT_CLASSIFICATION	0.020678503165998178	IMPLEMENTATION	0.00712909949872356	DEFECT	3.0591331628464994E-4	DESIGN	3.029467338253496E-4	DOCUMENTATION	1.9102072560290385E-4	TEST
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999823996202455	WITHOUT_CLASSIFICATION	7.763832011011631E-6	DEFECT	7.487212692455602E-6	IMPLEMENTATION	1.922332615857156E-6	DOCUMENTATION	2.4958645304545083E-7	TEST	1.774159822156327E-7	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9713925165595654	WITHOUT_CLASSIFICATION	0.020678503165998178	IMPLEMENTATION	0.00712909949872356	DEFECT	3.0591331628464994E-4	DESIGN	3.029467338253496E-4	DOCUMENTATION	1.9102072560290385E-4	TEST
// not known!	WITHOUT_CLASSIFICATION	0.9713925165595654	WITHOUT_CLASSIFICATION	0.020678503165998178	IMPLEMENTATION	0.00712909949872356	DEFECT	3.0591331628464994E-4	DESIGN	3.029467338253496E-4	DOCUMENTATION	1.9102072560290385E-4	TEST
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9998139010918784	WITHOUT_CLASSIFICATION	1.2284620559765302E-4	DESIGN	2.7124902933424677E-5	DOCUMENTATION	2.4511692553800555E-5	IMPLEMENTATION	9.625337782259713E-6	TEST	1.9907692544921483E-6	DEFECT
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.999978989265882	WITHOUT_CLASSIFICATION	1.650863014167783E-5	DEFECT	3.7506104599637093E-6	DESIGN	6.472165891660016E-7	TEST	8.185160665008373E-8	DOCUMENTATION	2.2425320581392596E-8	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999983911740646	WITHOUT_CLASSIFICATION	9.949697723086012E-7	DESIGN	5.200990923457927E-7	DEFECT	3.962855272544036E-8	TEST	2.9406055636311442E-8	IMPLEMENTATION	2.4722462566072062E-8	DOCUMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999982293766048	WITHOUT_CLASSIFICATION	1.105178857470342E-6	DESIGN	3.804109299693607E-7	IMPLEMENTATION	1.7885032565954298E-7	DEFECT	5.584961183321006E-8	TEST	5.033367037876777E-8	DOCUMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9958167907796509	WITHOUT_CLASSIFICATION	0.0033903620962096466	DEFECT	6.250140213973292E-4	DESIGN	1.4627254745440066E-4	IMPLEMENTATION	2.022345992700757E-5	DOCUMENTATION	1.33709536069371E-6	TEST
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.6159857594401799	WITHOUT_CLASSIFICATION	0.3838394188923507	DESIGN	1.3332035110081878E-4	DOCUMENTATION	2.9075505216384805E-5	IMPLEMENTATION	1.1542593556209143E-5	TEST	8.832175959223422E-7	DEFECT
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9961940645142544	WITHOUT_CLASSIFICATION	0.0028056921814059773	DESIGN	6.405414075965954E-4	DEFECT	3.2536721271699676E-4	IMPLEMENTATION	2.72971238831882E-5	DOCUMENTATION	7.037560142987672E-6	TEST
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999664080537513	WITHOUT_CLASSIFICATION	1.81470154308965E-5	DEFECT	1.385291036288687E-5	DESIGN	1.0208737343127068E-6	TEST	5.629143493196339E-7	DOCUMENTATION	8.232371291766823E-9	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9997182034908085	WITHOUT_CLASSIFICATION	1.0826029305313692E-4	IMPLEMENTATION	7.333419242391625E-5	DEFECT	6.574694728752844E-5	DESIGN	2.5760915497329815E-5	DOCUMENTATION	8.694160929631207E-6	TEST
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999353864339608	WITHOUT_CLASSIFICATION	1.876560263121733E-5	IMPLEMENTATION	1.7255919577918315E-5	TEST	1.6179586522889967E-5	DESIGN	9.767124239304274E-6	DOCUMENTATION	2.645333067719443E-6	DEFECT
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999651718750024	WITHOUT_CLASSIFICATION	3.31566891802415E-5	DESIGN	5.667228260497244E-7	DEFECT	4.1808248169993175E-7	TEST	3.8751066605400247E-7	DOCUMENTATION	2.9911984348432445E-7	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9997847187572614	WITHOUT_CLASSIFICATION	1.073458008819283E-4	DEFECT	5.833057811990533E-5	DESIGN	4.5411744721801496E-5	IMPLEMENTATION	3.1356297772592188E-6	DOCUMENTATION	1.057489237809494E-6	TEST
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999976542315434	WITHOUT_CLASSIFICATION	1.1429074972620708E-6	DESIGN	5.221675737508214E-7	IMPLEMENTATION	4.579855657623054E-7	TEST	1.309527878489818E-7	DOCUMENTATION	9.175503212467062E-8	DEFECT
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9998411592179941	WITHOUT_CLASSIFICATION	1.0531993087502557E-4	IMPLEMENTATION	1.8834810376125382E-5	DOCUMENTATION	1.6693553651567373E-5	DEFECT	1.408259543441156E-5	TEST	3.909891668705273E-6	DESIGN
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999956129054076	WITHOUT_CLASSIFICATION	1.4604511765010242E-6	DESIGN	1.3036582173115076E-6	IMPLEMENTATION	9.226803051257412E-7	DEFECT	4.894546838420039E-7	DOCUMENTATION	2.1085020958694767E-7	TEST
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9979621119039238	WITHOUT_CLASSIFICATION	0.0010579313591466673	DESIGN	8.235871638675366E-4	DEFECT	1.417540948255155E-4	TEST	1.2953920954828357E-5	DOCUMENTATION	1.6615572816131448E-6	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999942381091466	WITHOUT_CLASSIFICATION	4.355449305871185E-6	DESIGN	4.4532651941645476E-7	DOCUMENTATION	4.3078859763944603E-7	TEST	3.924330713308868E-7	IMPLEMENTATION	1.3789335908112038E-7	DEFECT
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999987926545844	WITHOUT_CLASSIFICATION	6.846325314835586E-7	DEFECT	2.2420832222925015E-7	DESIGN	1.4146773285631774E-7	DOCUMENTATION	1.2726526767547768E-7	IMPLEMENTATION	2.9771561320951354E-8	TEST
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9445308125110514	WITHOUT_CLASSIFICATION	0.05345710769591611	DESIGN	7.281500601330825E-4	IMPLEMENTATION	5.450841707346082E-4	DOCUMENTATION	4.954996783907952E-4	TEST	2.4334588377402264E-4	DEFECT
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9998264758820143	WITHOUT_CLASSIFICATION	1.0994624815680787E-4	IMPLEMENTATION	2.0641049436219913E-5	DOCUMENTATION	1.9904996436031337E-5	DEFECT	1.7973730162356317E-5	TEST	5.058093794206941E-6	DESIGN
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9998538815526479	WITHOUT_CLASSIFICATION	7.859171031762997E-5	IMPLEMENTATION	3.7265598957187575E-5	DESIGN	1.4695626693690617E-5	DOCUMENTATION	1.2738213090192338E-5	TEST	2.8272982934001634E-6	DEFECT
// Add any joins	WITHOUT_CLASSIFICATION	0.999987723944466	WITHOUT_CLASSIFICATION	6.676250931703062E-6	IMPLEMENTATION	3.1770837870840496E-6	DEFECT	1.281969278019278E-6	DOCUMENTATION	6.283078573141775E-7	DESIGN	5.124436800380645E-7	TEST
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999942381091466	WITHOUT_CLASSIFICATION	4.355449305871185E-6	DESIGN	4.4532651941645476E-7	DOCUMENTATION	4.3078859763944603E-7	TEST	3.924330713308868E-7	IMPLEMENTATION	1.3789335908112038E-7	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9997790935379782	WITHOUT_CLASSIFICATION	1.40078552039765E-4	DESIGN	5.9570272660359826E-5	IMPLEMENTATION	7.311351240374632E-6	DEFECT	7.268909927642587E-6	DOCUMENTATION	6.67737615351536E-6	TEST
//path expression	WITHOUT_CLASSIFICATION	0.9999871565362288	WITHOUT_CLASSIFICATION	5.324771661048852E-6	DEFECT	5.031343511033038E-6	DESIGN	1.054528917778069E-6	DOCUMENTATION	8.22252311151226E-7	TEST	6.105673701218907E-7	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999998063339637	WITHOUT_CLASSIFICATION	1.5142694202528892E-6	IMPLEMENTATION	1.800396119707418E-7	DEFECT	1.1132662945690934E-7	DESIGN	9.849524831309597E-8	TEST	3.252945290137369E-8	DOCUMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999980200465219	WITHOUT_CLASSIFICATION	1.6156406020811321E-6	IMPLEMENTATION	2.3055729594262827E-7	DESIGN	6.452988276385129E-8	TEST	5.1423297501045123E-8	DEFECT	1.7802399732962733E-8	DOCUMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.9997092090564096	WITHOUT_CLASSIFICATION	2.5920368122787246E-4	IMPLEMENTATION	1.132206504534894E-5	TEST	9.605102875881015E-6	DESIGN	5.743905756016134E-6	DEFECT	4.916188685361149E-6	DOCUMENTATION
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999986934849661	WITHOUT_CLASSIFICATION	1.1264409858950917E-6	DESIGN	1.2414127410179842E-7	DEFECT	2.7018123713366622E-8	IMPLEMENTATION	1.7416188040855902E-8	DOCUMENTATION	1.1498462258956443E-8	TEST
// careful with this!	WITHOUT_CLASSIFICATION	0.9999955340128572	WITHOUT_CLASSIFICATION	3.3102923559544954E-6	DESIGN	8.162189805608086E-7	TEST	1.2906188017336065E-7	DOCUMENTATION	1.197193779643095E-7	DEFECT	9.069454791306871E-8	IMPLEMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9998531508405234	WITHOUT_CLASSIFICATION	1.1658115354368318E-4	IMPLEMENTATION	1.7729109713572394E-5	DEFECT	9.1164163335603E-6	DESIGN	2.5824007544000084E-6	TEST	8.400791312651976E-7	DOCUMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999862203918736	WITHOUT_CLASSIFICATION	9.429147979945386E-6	IMPLEMENTATION	2.2321537639246577E-6	DOCUMENTATION	9.589870142534733E-7	TEST	6.292787725632945E-7	DEFECT	5.300405956324017E-7	DESIGN
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9989922716875539	WITHOUT_CLASSIFICATION	8.106564508052542E-4	DESIGN	1.6807477216785178E-4	IMPLEMENTATION	1.6709543355094112E-5	DEFECT	1.092453272518553E-5	DOCUMENTATION	1.3630133927610439E-6	TEST
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9945175056291632	WITHOUT_CLASSIFICATION	0.0046166554588354235	DESIGN	6.87631350259041E-4	DEFECT	9.906159662708365E-5	IMPLEMENTATION	4.159812420023887E-5	DOCUMENTATION	3.75478409150555E-5	TEST
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999813169182659	WITHOUT_CLASSIFICATION	1.7992489884245718E-5	DEFECT	3.157183435905762E-7	IMPLEMENTATION	2.3743413514772505E-7	DESIGN	9.825116388106846E-8	TEST	3.918820719832829E-8	DOCUMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999927273570468	WITHOUT_CLASSIFICATION	5.794571315045243E-6	DESIGN	7.837978436685367E-7	IMPLEMENTATION	3.9355596832174935E-7	DEFECT	2.424599329661515E-7	TEST	5.825789314051493E-8	DOCUMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.999999105885721	WITHOUT_CLASSIFICATION	6.99927231126202E-7	IMPLEMENTATION	1.6142991186694564E-7	DEFECT	1.8317183447158586E-8	DESIGN	7.656576089614757E-9	TEST	6.783376415113416E-9	DOCUMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9992430627571255	WITHOUT_CLASSIFICATION	3.9782418149889335E-4	IMPLEMENTATION	3.1309251575352745E-4	DEFECT	2.6749838947615213E-5	DESIGN	1.8508231203719872E-5	TEST	7.624754706992139E-7	DOCUMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999990847785255	WITHOUT_CLASSIFICATION	4.361620242608502E-7	DESIGN	3.485423729385652E-7	DEFECT	1.1662981362510905E-7	IMPLEMENTATION	7.586195336708208E-9	DOCUMENTATION	6.301068279204244E-9	TEST
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999973999026148	WITHOUT_CLASSIFICATION	1.444040717600082E-6	DESIGN	7.173373197416474E-7	TEST	2.1652330832523248E-7	DEFECT	1.6117681750782864E-7	IMPLEMENTATION	6.101922200146908E-8	DOCUMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999864532976678	WITHOUT_CLASSIFICATION	9.263324405299093E-6	DEFECT	2.443135877881923E-6	IMPLEMENTATION	1.2128246165584323E-6	TEST	4.936032942516089E-7	DESIGN	1.338141383022495E-7	DOCUMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999906967884101	WITHOUT_CLASSIFICATION	8.991290911722731E-6	DESIGN	1.751851618731425E-7	TEST	6.305547709608134E-8	DEFECT	5.6889410769264244E-8	DOCUMENTATION	1.6790628385632543E-8	IMPLEMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999930538779727	WITHOUT_CLASSIFICATION	3.910564785384391E-6	DEFECT	2.3034739250108804E-6	DESIGN	5.791951063487732E-7	TEST	1.0106966490162737E-7	IMPLEMENTATION	5.1818545720331396E-8	DOCUMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9847921011491129	WITHOUT_CLASSIFICATION	0.012954064032088135	DESIGN	0.001957690849971657	DEFECT	2.5850758505238414E-4	IMPLEMENTATION	2.4702618917921398E-5	TEST	1.2933764857003173E-5	DOCUMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999884537385488	WITHOUT_CLASSIFICATION	5.463857545675348E-6	IMPLEMENTATION	2.9798918119042556E-6	DESIGN	1.8375555942195798E-6	TEST	6.545930739757549E-7	DEFECT	6.103634254884029E-7	DOCUMENTATION
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9995650458869635	WITHOUT_CLASSIFICATION	2.985433894245295E-4	DESIGN	1.3483474390534557E-4	DEFECT	6.021550158058808E-7	TEST	4.946131454575847E-7	DOCUMENTATION	4.792115453377172E-7	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999862203918736	WITHOUT_CLASSIFICATION	9.429147979945386E-6	IMPLEMENTATION	2.2321537639246577E-6	DOCUMENTATION	9.589870142534733E-7	TEST	6.292787725632945E-7	DEFECT	5.300405956324017E-7	DESIGN
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999965483508381	WITHOUT_CLASSIFICATION	1.5919244735445762E-6	DESIGN	8.758360434450631E-7	DOCUMENTATION	5.485661568246327E-7	IMPLEMENTATION	2.953691127492095E-7	TEST	1.3995337548156117E-7	DEFECT
//do replacements	WITHOUT_CLASSIFICATION	0.9996989355913102	WITHOUT_CLASSIFICATION	2.54837103078931E-4	DESIGN	3.984637671168773E-5	IMPLEMENTATION	4.921325317743713E-6	DOCUMENTATION	1.0018189212369998E-6	TEST	4.5778466006654294E-7	DEFECT
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9994067584994911	WITHOUT_CLASSIFICATION	2.0893015986581074E-4	DESIGN	1.8433004751790432E-4	DEFECT	1.6839624562002466E-4	IMPLEMENTATION	1.8332292005701882E-5	DOCUMENTATION	1.3252755499439079E-5	TEST
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999456865824053	WITHOUT_CLASSIFICATION	5.060185035852634E-5	DESIGN	1.5001374251086275E-6	TEST	1.3824572621769664E-6	IMPLEMENTATION	4.721850786826392E-7	DEFECT	3.567874702546044E-7	DOCUMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999773828770362	WITHOUT_CLASSIFICATION	1.3770340853890296E-5	IMPLEMENTATION	6.644455325308578E-6	DESIGN	1.641618797943099E-6	TEST	4.4089103282140883E-7	DOCUMENTATION	1.198169537683374E-7	DEFECT
//hilo params	WITHOUT_CLASSIFICATION	0.9999533794840336	WITHOUT_CLASSIFICATION	3.8260857126069145E-5	DESIGN	3.533758784204689E-6	IMPLEMENTATION	2.1452965548074172E-6	TEST	1.496703497734533E-6	DOCUMENTATION	1.1839000037335031E-6	DEFECT
//sql = query;	WITHOUT_CLASSIFICATION	0.9999282068236017	WITHOUT_CLASSIFICATION	4.6610298139749504E-5	IMPLEMENTATION	9.93413080177755E-6	DEFECT	9.834854708170009E-6	DESIGN	3.322692390215168E-6	TEST	2.091200358273975E-6	DOCUMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.9999814266513075	WITHOUT_CLASSIFICATION	6.258002316778727E-6	DESIGN	5.8566483570995416E-6	DOCUMENTATION	4.450616607631318E-6	IMPLEMENTATION	1.775363554554466E-6	DEFECT	2.327178564043523E-7	TEST
//sql = update;	WITHOUT_CLASSIFICATION	0.9999828972959698	WITHOUT_CLASSIFICATION	1.2788395726813455E-5	IMPLEMENTATION	2.8201937034245742E-6	DEFECT	5.162668196915916E-7	TEST	4.98140379780016E-7	DESIGN	4.7970740053483E-7	DOCUMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.9999142254995155	WITHOUT_CLASSIFICATION	5.150966291606669E-5	DESIGN	1.6027618517145542E-5	DOCUMENTATION	8.28298026979947E-6	DEFECT	6.530957608507614E-6	TEST	3.4232811729468484E-6	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999950786146367	WITHOUT_CLASSIFICATION	1.4303961677792975E-6	DESIGN	1.333557690532867E-6	DOCUMENTATION	1.1009509348311477E-6	TEST	5.351065321671283E-7	IMPLEMENTATION	5.21374038205031E-7	DEFECT
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.999996846095309	WITHOUT_CLASSIFICATION	2.420312728856874E-6	DEFECT	6.958906882769591E-7	DESIGN	3.1096476252650005E-8	TEST	4.921132748863162E-9	IMPLEMENTATION	1.683664756704124E-9	DOCUMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9973456257763855	WITHOUT_CLASSIFICATION	0.00197484934849086	IMPLEMENTATION	3.987359631762154E-4	DESIGN	2.3969789598379365E-4	DEFECT	2.7859773263292914E-5	DOCUMENTATION	1.3231242700353601E-5	TEST
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999911344485921	WITHOUT_CLASSIFICATION	8.61595541193568E-6	IMPLEMENTATION	2.062042804220301E-7	TEST	2.5638290029641985E-8	DOCUMENTATION	1.6705987392893784E-8	DESIGN	1.0474380901667822E-9	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999071650721638	WITHOUT_CLASSIFICATION	6.431814165245869E-5	DESIGN	1.0317724617154375E-5	DOCUMENTATION	9.59076314889583E-6	IMPLEMENTATION	7.794790088960924E-6	DEFECT	8.135083288030416E-7	TEST
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999896094224825	WITHOUT_CLASSIFICATION	9.072902074766514E-6	DEFECT	5.351545801358144E-7	DESIGN	4.2265662646196737E-7	DOCUMENTATION	2.425947292798629E-7	TEST	1.1726950682601148E-7	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999234667613933	WITHOUT_CLASSIFICATION	4.584632371001046E-5	DESIGN	1.8109444940906556E-5	IMPLEMENTATION	8.59195733597449E-6	DEFECT	2.2252070167171145E-6	TEST	1.7603056031472397E-6	DOCUMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999950786146367	WITHOUT_CLASSIFICATION	1.4303961677792975E-6	DESIGN	1.333557690532867E-6	DOCUMENTATION	1.1009509348311477E-6	TEST	5.351065321671283E-7	IMPLEMENTATION	5.21374038205031E-7	DEFECT
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999985590989702	WITHOUT_CLASSIFICATION	1.3655671077122496E-6	IMPLEMENTATION	6.028972688216497E-8	TEST	7.854149057251435E-9	DESIGN	6.893200427102695E-9	DOCUMENTATION	2.9684572902832393E-10	DEFECT
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9989893487908524	WITHOUT_CLASSIFICATION	6.481041111546609E-4	DEFECT	1.852857556154467E-4	IMPLEMENTATION	1.4255153279447757E-4	DESIGN	2.243776454264908E-5	TEST	1.2272045040327876E-5	DOCUMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999852750054766	WITHOUT_CLASSIFICATION	4.607372515868966E-6	DEFECT	4.136977934355032E-6	IMPLEMENTATION	3.4279154013468686E-6	DESIGN	2.260186822774831E-6	DOCUMENTATION	2.92541848957139E-7	TEST
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9975170161793254	WITHOUT_CLASSIFICATION	0.001962800124147013	IMPLEMENTATION	2.0470007369113687E-4	DOCUMENTATION	1.7954313403760846E-4	DESIGN	6.92743600503533E-5	DEFECT	6.666612874830127E-5	TEST
// the default...	WITHOUT_CLASSIFICATION	0.99998764035207	WITHOUT_CLASSIFICATION	9.050638383713799E-6	IMPLEMENTATION	2.020659632035476E-6	DESIGN	5.705154633185539E-7	DOCUMENTATION	5.106718294084782E-7	TEST	2.0716262141559183E-7	DEFECT
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999838420521218	WITHOUT_CLASSIFICATION	1.0842230007272835E-5	DESIGN	4.154903446720243E-6	IMPLEMENTATION	8.232674440432947E-7	TEST	2.510379480780581E-7	DEFECT	8.650903218931227E-8	DOCUMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999071650721638	WITHOUT_CLASSIFICATION	6.431814165245869E-5	DESIGN	1.0317724617154375E-5	DOCUMENTATION	9.59076314889583E-6	IMPLEMENTATION	7.794790088960924E-6	DEFECT	8.135083288030416E-7	TEST
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999939800183456	WITHOUT_CLASSIFICATION	3.127877634375527E-6	IMPLEMENTATION	2.2186852033836803E-6	DESIGN	4.280100725325401E-7	DEFECT	1.5883324668705732E-7	TEST	8.65754974270376E-8	DOCUMENTATION
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999357760945042	WITHOUT_CLASSIFICATION	5.9309760669487106E-5	DESIGN	3.1898876849188554E-6	IMPLEMENTATION	8.152860714097373E-7	DOCUMENTATION	6.681173231335438E-7	DEFECT	2.4085374681251273E-7	TEST
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968175329818	WITHOUT_CLASSIFICATION	3.000414558418152E-6	DESIGN	7.975054291045007E-8	IMPLEMENTATION	5.66959485698835E-8	DOCUMENTATION	3.641339222076975E-8	TEST	9.192576052606376E-9	DEFECT
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998178142689733	WITHOUT_CLASSIFICATION	1.3662310418315345E-4	IMPLEMENTATION	3.8971264541913864E-5	DESIGN	4.017776219237587E-6	DEFECT	1.3053172428046566E-6	TEST	1.2682688395962006E-6	DOCUMENTATION
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9460240640718227	WITHOUT_CLASSIFICATION	0.05395316838299074	IMPLEMENTATION	1.5519441160665367E-5	DESIGN	4.988718890871197E-6	DEFECT	1.130637752236131E-6	TEST	1.1287473828040456E-6	DOCUMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9751071422156029	WITHOUT_CLASSIFICATION	0.02486225393723397	IMPLEMENTATION	2.6419347081470656E-5	DESIGN	2.5044340087382064E-6	TEST	1.1217367002384333E-6	DEFECT	5.583293726857291E-7	DOCUMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999991938340091	WITHOUT_CLASSIFICATION	3.593079634698553E-7	DESIGN	2.8569859239267177E-7	DEFECT	8.013985916541086E-8	DOCUMENTATION	5.544787070007304E-8	IMPLEMENTATION	2.55717051158239E-8	TEST
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999991938340091	WITHOUT_CLASSIFICATION	3.593079634698553E-7	DESIGN	2.8569859239267177E-7	DEFECT	8.013985916541086E-8	DOCUMENTATION	5.544787070007304E-8	IMPLEMENTATION	2.55717051158239E-8	TEST
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9992225475026242	WITHOUT_CLASSIFICATION	7.559700886915148E-4	DESIGN	9.396393574529627E-6	TEST	8.426719199211972E-6	IMPLEMENTATION	2.117224923316225E-6	DOCUMENTATION	1.5420709873518769E-6	DEFECT
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999969501008734	WITHOUT_CLASSIFICATION	1.0289166210152047E-6	DEFECT	8.70895830487165E-7	IMPLEMENTATION	5.64868574675844E-7	DOCUMENTATION	3.138138521028306E-7	DESIGN	2.714042485631969E-7	TEST
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999963266548019	WITHOUT_CLASSIFICATION	2.8822330038533447E-6	IMPLEMENTATION	4.82622606366694E-7	DESIGN	1.0940741943040185E-7	TEST	1.0554983420937332E-7	DEFECT	9.35323344379318E-8	DOCUMENTATION
// scroll backward	WITHOUT_CLASSIFICATION	0.9999940466912706	WITHOUT_CLASSIFICATION	2.9030803296621234E-6	DEFECT	1.4825952316430771E-6	DESIGN	1.290920728834806E-6	IMPLEMENTATION	1.5578285308020384E-7	DOCUMENTATION	1.2092958640195257E-7	TEST
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9998687969683594	WITHOUT_CLASSIFICATION	9.811924105947795E-5	DEFECT	1.724946610442484E-5	TEST	9.329650543806063E-6	IMPLEMENTATION	5.5714345335212E-6	DESIGN	9.33239399397361E-7	DOCUMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967690152081	WITHOUT_CLASSIFICATION	1.6818318701870013E-6	DESIGN	6.353402836615517E-7	IMPLEMENTATION	5.269283134227276E-7	DEFECT	2.6371906713676177E-7	TEST	1.2316525755796811E-7	DOCUMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999931117035183	WITHOUT_CLASSIFICATION	5.072987702108671E-6	IMPLEMENTATION	6.854470604186384E-7	DOCUMENTATION	4.469160106236612E-7	DEFECT	4.4574987489132266E-7	TEST	2.3719583345499635E-7	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999879015100407	WITHOUT_CLASSIFICATION	1.0379248117698474E-4	IMPLEMENTATION	1.0774750400046394E-5	DESIGN	3.2012335883354765E-6	TEST	2.8016776863839964E-6	DEFECT	4.1475674131136584E-7	DOCUMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999158795560574	WITHOUT_CLASSIFICATION	5.802143799827197E-5	DESIGN	2.2749751230696812E-5	DEFECT	1.3565228433670554E-6	IMPLEMENTATION	1.3162890711134474E-6	DOCUMENTATION	6.764427989667792E-7	TEST
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978635520154	WITHOUT_CLASSIFICATION	1.4967831337450355E-6	DESIGN	2.899619838564992E-7	IMPLEMENTATION	2.1167921232848629E-7	TEST	8.329065257011859E-8	DEFECT	5.473300210187609E-8	DOCUMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967690152081	WITHOUT_CLASSIFICATION	1.6818318701870013E-6	DESIGN	6.353402836615517E-7	IMPLEMENTATION	5.269283134227276E-7	DEFECT	2.6371906713676177E-7	TEST	1.2316525755796811E-7	DOCUMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999931117035183	WITHOUT_CLASSIFICATION	5.072987702108671E-6	IMPLEMENTATION	6.854470604186384E-7	DOCUMENTATION	4.469160106236612E-7	DEFECT	4.4574987489132266E-7	TEST	2.3719583345499635E-7	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999879015100407	WITHOUT_CLASSIFICATION	1.0379248117698474E-4	IMPLEMENTATION	1.0774750400046394E-5	DESIGN	3.2012335883354765E-6	TEST	2.8016776863839964E-6	DEFECT	4.1475674131136584E-7	DOCUMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.9999989254484145	WITHOUT_CLASSIFICATION	8.181387563735357E-7	DESIGN	1.282790585883288E-7	TEST	7.265294813410214E-8	DOCUMENTATION	4.146334914846467E-8	IMPLEMENTATION	1.4017473299327404E-8	DEFECT
//Generators:	WITHOUT_CLASSIFICATION	0.9994674111170022	WITHOUT_CLASSIFICATION	2.573055060195862E-4	IMPLEMENTATION	2.2161017424215888E-4	DESIGN	2.832827498525186E-5	TEST	1.6833095545368143E-5	DOCUMENTATION	8.51183220536536E-6	DEFECT
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999738818020096	WITHOUT_CLASSIFICATION	2.609231687912533E-5	DESIGN	1.7178878999176286E-8	DEFECT	6.527692047866712E-9	TEST	1.4886563951621316E-9	DOCUMENTATION	6.858838324332764E-10	IMPLEMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9995154419384595	WITHOUT_CLASSIFICATION	4.4219678204566E-4	DESIGN	1.9936843761593736E-5	IMPLEMENTATION	1.4640245617991746E-5	DEFECT	3.922196115475244E-6	TEST	3.861993999650028E-6	DOCUMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999519949836011	WITHOUT_CLASSIFICATION	4.323709355441208E-5	DESIGN	4.315882106225657E-6	IMPLEMENTATION	2.222251033673815E-7	TEST	1.9309594373781615E-7	DEFECT	3.67196912911291E-8	DOCUMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9998600130291927	WITHOUT_CLASSIFICATION	9.456146272270037E-5	DESIGN	4.042590634539729E-5	DEFECT	4.9278040933989915E-6	TEST	4.657751090382537E-8	IMPLEMENTATION	2.5220134874908692E-8	DOCUMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999848909245526	WITHOUT_CLASSIFICATION	7.107812948546325E-6	DEFECT	4.193794093939855E-6	IMPLEMENTATION	1.5655471941310152E-6	DESIGN	1.472456810663351E-6	DOCUMENTATION	7.694644001689201E-7	TEST
//checking for named queries	WITHOUT_CLASSIFICATION	0.9994549609698943	WITHOUT_CLASSIFICATION	4.6947271770504407E-4	IMPLEMENTATION	4.302704716431389E-5	DESIGN	1.5260848034089853E-5	DEFECT	1.3148885084138999E-5	TEST	4.129532118245209E-6	DOCUMENTATION
//stats	WITHOUT_CLASSIFICATION	0.9999638576978088	WITHOUT_CLASSIFICATION	1.092883224487831E-5	IMPLEMENTATION	8.512372693882172E-6	TEST	6.0580726922451094E-6	DEFECT	5.5731139221524E-6	DESIGN	5.069910637977566E-6	DOCUMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999891018003643	WITHOUT_CLASSIFICATION	4.163338922564952E-6	DESIGN	2.8904066398148105E-6	IMPLEMENTATION	1.7650175355915443E-6	DEFECT	1.3200128020108036E-6	TEST	7.594237357011558E-7	DOCUMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999767613246496	WITHOUT_CLASSIFICATION	1.949154326634988E-5	IMPLEMENTATION	2.721336881928928E-6	DESIGN	6.62172431498817E-7	TEST	2.750563803481562E-7	DOCUMENTATION	8.856639031302739E-8	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9782143835692533	WITHOUT_CLASSIFICATION	0.01666060405618641	DEFECT	0.0031042423525332887	TEST	0.0019935846611482994	DESIGN	1.5792415952507617E-5	IMPLEMENTATION	1.1392944926276018E-5	DOCUMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9960922208288453	WITHOUT_CLASSIFICATION	0.003387702885180432	DESIGN	4.84376882947928E-4	DEFECT	2.8644609294440875E-5	TEST	6.590136551214064E-6	DOCUMENTATION	4.6465718048992435E-7	IMPLEMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9993615220206012	WITHOUT_CLASSIFICATION	6.347919905072651E-4	DESIGN	2.1434024303631135E-6	DEFECT	8.222696951200608E-7	DOCUMENTATION	5.868687471237085E-7	TEST	1.3344801878015486E-7	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9998710341488187	WITHOUT_CLASSIFICATION	1.1205252214084261E-4	IMPLEMENTATION	1.4325170432733797E-5	DESIGN	1.7440034236099808E-6	DEFECT	7.395750387263076E-7	DOCUMENTATION	1.0458014529892187E-7	TEST
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999376578584995	WITHOUT_CLASSIFICATION	6.120994822769411E-5	DESIGN	6.862531192389046E-7	DEFECT	3.033904236241004E-7	DOCUMENTATION	1.0250115931801442E-7	TEST	4.0048570496866435E-8	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.8949197259576772	WITHOUT_CLASSIFICATION	0.057071905079546105	DESIGN	0.04738223814114973	TEST	5.623675012341873E-4	DOCUMENTATION	4.851236998151277E-5	DEFECT	1.5250950411197735E-5	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999078718895569	WITHOUT_CLASSIFICATION	5.67019297562394E-5	IMPLEMENTATION	1.2921011050957482E-5	DEFECT	8.2182110739722E-6	DOCUMENTATION	7.388386470287669E-6	DESIGN	6.898572091591982E-6	TEST
// for backward-compatability	WITHOUT_CLASSIFICATION	0.999993657287129	WITHOUT_CLASSIFICATION	4.175185740004463E-6	DEFECT	1.4936187427195697E-6	IMPLEMENTATION	5.377702444795876E-7	DESIGN	7.282146461949445E-8	DOCUMENTATION	6.331667918492344E-8	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999957884274387	WITHOUT_CLASSIFICATION	2.702101621200256E-6	DEFECT	8.917548851917608E-7	IMPLEMENTATION	3.7501392429678363E-7	TEST	1.3734030868561596E-7	DOCUMENTATION	1.0536182185870163E-7	DESIGN
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.999990163253972	WITHOUT_CLASSIFICATION	8.637064153813076E-6	DESIGN	5.414764302753201E-7	IMPLEMENTATION	3.408089962217661E-7	DEFECT	1.8314320131214313E-7	TEST	1.3425324637441098E-7	DOCUMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999524196873529	WITHOUT_CLASSIFICATION	2.3630072615888104E-5	DESIGN	2.2885100558892507E-5	IMPLEMENTATION	5.726288758235632E-7	DOCUMENTATION	2.834927342293904E-7	TEST	2.0901786229340406E-7	DEFECT
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999977979099324	WITHOUT_CLASSIFICATION	1.7982121286567982E-6	DESIGN	1.5501473071030472E-7	IMPLEMENTATION	1.4788897330053493E-7	DOCUMENTATION	8.938214811761808E-8	TEST	1.1592086949038051E-8	DEFECT
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.999998035825627	WITHOUT_CLASSIFICATION	1.2119398907604338E-6	DESIGN	7.374326503690339E-7	IMPLEMENTATION	7.751788567891818E-9	DOCUMENTATION	4.722496213311962E-9	DEFECT	2.327547014663097E-9	TEST
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.999997212991272	WITHOUT_CLASSIFICATION	2.6332534079104185E-6	DESIGN	1.341367393887082E-7	DEFECT	1.4735487281224842E-8	TEST	3.1015236165459054E-9	IMPLEMENTATION	1.7815697443203316E-9	DOCUMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9989583334094511	WITHOUT_CLASSIFICATION	7.210507728705286E-4	IMPLEMENTATION	1.63520213133974E-4	DOCUMENTATION	1.2879638556032721E-4	DEFECT	1.592317093114963E-5	DESIGN	1.237604805291189E-5	TEST
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999920414040422	WITHOUT_CLASSIFICATION	3.320101296236247E-6	DEFECT	2.267445717855071E-6	DESIGN	1.4931598745037458E-6	TEST	5.160106282696397E-7	IMPLEMENTATION	3.618784410004812E-7	DOCUMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999924061187563	WITHOUT_CLASSIFICATION	2.2608093760817604E-6	DESIGN	2.0633664447701785E-6	IMPLEMENTATION	1.688290645581474E-6	TEST	1.284828726680034E-6	DEFECT	2.965860505993817E-7	DOCUMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999829715502583	WITHOUT_CLASSIFICATION	1.6868199463946782E-5	DESIGN	1.4715110846344461E-7	DOCUMENTATION	1.0763444943755505E-8	TEST	1.6808137845519108E-9	IMPLEMENTATION	6.54910594204228E-10	DEFECT
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922238609529	WITHOUT_CLASSIFICATION	4.054984593764477E-6	IMPLEMENTATION	2.046425681810427E-6	DEFECT	1.107133323720711E-6	TEST	2.83995278674576E-7	DESIGN	2.836001692221961E-7	DOCUMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999733803546876	WITHOUT_CLASSIFICATION	1.856317464627933E-5	DEFECT	2.747826913776484E-6	DESIGN	2.5958095289878975E-6	IMPLEMENTATION	1.4545061096028228E-6	DOCUMENTATION	1.258328113772433E-6	TEST
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9998694517247687	WITHOUT_CLASSIFICATION	1.1703065205440283E-4	DESIGN	7.0661343661195286E-6	DEFECT	2.768702150504901E-6	TEST	2.6543803208488313E-6	IMPLEMENTATION	1.028406339340065E-6	DOCUMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9998694517247687	WITHOUT_CLASSIFICATION	1.1703065205440283E-4	DESIGN	7.0661343661195286E-6	DEFECT	2.768702150504901E-6	TEST	2.6543803208488313E-6	IMPLEMENTATION	1.028406339340065E-6	DOCUMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999988977319365	WITHOUT_CLASSIFICATION	9.879005081541268E-7	TEST	5.689193762826087E-8	DESIGN	3.913019151876311E-8	IMPLEMENTATION	1.8154526420030636E-8	DOCUMENTATION	1.9089967451169877E-10	DEFECT
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999939241964055	WITHOUT_CLASSIFICATION	3.3215914448194095E-6	TEST	2.262467725978266E-6	DEFECT	4.691286908547155E-7	IMPLEMENTATION	2.129922075749543E-8	DESIGN	1.3165120532434081E-9	DOCUMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999965943916227	WITHOUT_CLASSIFICATION	2.6902298511684804E-6	IMPLEMENTATION	4.680157429945298E-7	DESIGN	1.198432520387046E-7	DEFECT	8.287973306038597E-8	TEST	4.463979793363871E-8	DOCUMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999227767335308	WITHOUT_CLASSIFICATION	1.84400314390861E-5	DOCUMENTATION	1.7546467016277187E-5	TEST	1.728892098211053E-5	IMPLEMENTATION	1.2504246436311495E-5	DEFECT	1.144360059549775E-5	DESIGN
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9959170133708495	WITHOUT_CLASSIFICATION	0.0033681015872537075	DESIGN	5.746258894632727E-4	DEFECT	1.0630866297368693E-4	IMPLEMENTATION	2.283599740993213E-5	TEST	1.1114492049838785E-5	DOCUMENTATION
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999507266158029	WITHOUT_CLASSIFICATION	4.517904929335925E-5	DESIGN	3.2767232495262635E-6	DEFECT	6.537124181130841E-7	DOCUMENTATION	1.2857655053242777E-7	TEST	3.532268571682134E-8	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.9998858707110633	WITHOUT_CLASSIFICATION	6.22292612679877E-5	DESIGN	2.3139085202662423E-5	DEFECT	1.1328765950183588E-5	IMPLEMENTATION	9.109641948394062E-6	TEST	8.32253456752358E-6	DOCUMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.9999912846195942	WITHOUT_CLASSIFICATION	3.68062849951872E-6	IMPLEMENTATION	2.524235472307524E-6	DEFECT	1.651421012905018E-6	DESIGN	5.130050094820501E-7	TEST	3.460904115701524E-7	DOCUMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999354135708485	WITHOUT_CLASSIFICATION	3.137980157754964E-5	IMPLEMENTATION	3.0386990532794097E-5	DESIGN	1.8381555662511434E-6	DOCUMENTATION	6.874207507972406E-7	TEST	2.940607241999298E-7	DEFECT
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994889857943	WITHOUT_CLASSIFICATION	2.4430227030409834E-7	IMPLEMENTATION	2.0536115141163543E-7	DEFECT	2.4821121877627953E-8	TEST	2.1637395976257045E-8	DESIGN	1.4892266088427696E-8	DOCUMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992513920097	WITHOUT_CLASSIFICATION	4.6876060671946655E-7	IMPLEMENTATION	2.147933962435631E-7	DEFECT	2.9427560635533465E-8	TEST	2.0687899997889837E-8	DESIGN	1.4938526663920627E-8	DOCUMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990469785572	WITHOUT_CLASSIFICATION	4.3715444748110905E-7	DEFECT	3.560460000119834E-7	IMPLEMENTATION	8.129269487731729E-8	DESIGN	4.694042623848363E-8	TEST	3.158787409128117E-8	DOCUMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995530293266	WITHOUT_CLASSIFICATION	2.8176956269465136E-7	IMPLEMENTATION	8.560122224168196E-8	DEFECT	4.536911588459108E-8	TEST	1.887276177949011E-8	DESIGN	1.5358010795864988E-8	DOCUMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998217721843	WITHOUT_CLASSIFICATION	7.087073928835911E-8	IMPLEMENTATION	4.158542634263617E-8	DEFECT	3.599273971310302E-8	DESIGN	2.2793994453582755E-8	TEST	6.9849159650933825E-9	DOCUMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999796229134	WITHOUT_CLASSIFICATION	9.89894005180163E-8	IMPLEMENTATION	3.540030841034976E-8	DESIGN	3.31691169540168E-8	TEST	2.3744093325714225E-8	DEFECT	1.2467946801384246E-8	DOCUMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986903202395	WITHOUT_CLASSIFICATION	7.640688234083569E-7	DEFECT	4.142778447352714E-7	IMPLEMENTATION	5.0374257446299494E-8	TEST	5.0297741034383646E-8	DESIGN	3.066109407832737E-8	DOCUMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997724718498	WITHOUT_CLASSIFICATION	1.194038019883315E-7	IMPLEMENTATION	4.4873789491293526E-8	DESIGN	4.286950100960424E-8	DEFECT	1.5440364086373844E-8	TEST	4.9406937075455715E-9	DOCUMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994109845246	WITHOUT_CLASSIFICATION	3.576360972769225E-7	IMPLEMENTATION	1.4881838461351133E-7	DEFECT	4.8481913639093425E-8	DESIGN	2.5654072353531136E-8	TEST	8.425007418326737E-9	DOCUMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999129172114	WITHOUT_CLASSIFICATION	3.2831588885779104E-7	IMPLEMENTATION	2.2077025308161216E-7	DEFECT	1.6805470325019012E-7	DESIGN	1.35035833424159E-7	TEST	1.8651207411562495E-8	DOCUMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999932151876978	WITHOUT_CLASSIFICATION	6.150061296302008E-6	DESIGN	3.9779024299369156E-7	IMPLEMENTATION	1.2742602817625322E-7	TEST	5.593780608742823E-8	DOCUMENTATION	5.3596928662222717E-8	DEFECT
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999959848990259	WITHOUT_CLASSIFICATION	1.4152298039535035E-6	IMPLEMENTATION	1.1939490776294509E-6	DESIGN	1.1381434545413553E-6	DEFECT	2.2340491791862555E-7	DOCUMENTATION	4.4373720173381094E-8	TEST
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9997029740471611	WITHOUT_CLASSIFICATION	2.6786603315927157E-4	DESIGN	1.768605997696376E-5	TEST	6.448887893603006E-6	DEFECT	4.7577996591563345E-6	DOCUMENTATION	2.6717214990392396E-7	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9946852389671473	WITHOUT_CLASSIFICATION	0.005305391727120656	DESIGN	8.444360267419857E-6	TEST	3.633057268531164E-7	DEFECT	2.8715090429274223E-7	IMPLEMENTATION	2.744888333653606E-7	DOCUMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.997665646587117	WITHOUT_CLASSIFICATION	0.0022066759707367184	DESIGN	1.0927031975852747E-4	DEFECT	1.1941377233838945E-5	IMPLEMENTATION	3.906374482768175E-6	DOCUMENTATION	2.559370671195318E-6	TEST
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9975798681637906	WITHOUT_CLASSIFICATION	0.0022327307221889745	DESIGN	8.30148532289972E-5	DOCUMENTATION	4.7007550455045713E-5	DEFECT	3.3114135416305355E-5	IMPLEMENTATION	2.4264574920221717E-5	TEST
// not for internal use:	WITHOUT_CLASSIFICATION	0.9995754437194304	WITHOUT_CLASSIFICATION	3.0458892049564396E-4	IMPLEMENTATION	6.191793373696413E-5	DESIGN	5.419327669681089E-5	DEFECT	2.37568046872404E-6	TEST	1.4804691715093306E-6	DOCUMENTATION
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999758221271884	WITHOUT_CLASSIFICATION	1.98373829422507E-5	IMPLEMENTATION	3.290462744970748E-6	TEST	7.595155257004083E-7	DESIGN	1.9843739070054496E-7	DOCUMENTATION	9.2074208040186E-8	DEFECT
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.999813615633943	WITHOUT_CLASSIFICATION	1.3127540523798006E-4	DESIGN	5.425945967735162E-5	IMPLEMENTATION	4.5686008182096996E-7	DOCUMENTATION	3.1756432133731324E-7	TEST	7.507673862570532E-8	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9946852389671473	WITHOUT_CLASSIFICATION	0.005305391727120656	DESIGN	8.444360267419857E-6	TEST	3.633057268531164E-7	DEFECT	2.8715090429274223E-7	IMPLEMENTATION	2.744888333653606E-7	DOCUMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9946852389671473	WITHOUT_CLASSIFICATION	0.005305391727120656	DESIGN	8.444360267419857E-6	TEST	3.633057268531164E-7	DEFECT	2.8715090429274223E-7	IMPLEMENTATION	2.744888333653606E-7	DOCUMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9977301085675373	WITHOUT_CLASSIFICATION	0.001331927702858267	DESIGN	7.142192200205483E-4	IMPLEMENTATION	1.9018773774370058E-4	TEST	3.0907287972033854E-5	DOCUMENTATION	2.649483868101382E-6	DEFECT
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999343966525028	WITHOUT_CLASSIFICATION	4.4242660841396824E-5	IMPLEMENTATION	1.7133129286556104E-5	DESIGN	2.413606735192434E-6	DEFECT	1.7129033096235706E-6	TEST	1.0104732444134406E-7	DOCUMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999990383547434	WITHOUT_CLASSIFICATION	7.219332265055727E-7	DESIGN	2.367971260878864E-7	TEST	2.496432039046944E-9	DOCUMENTATION	2.345321202077694E-10	IMPLEMENTATION	1.8393991050742262E-10	DEFECT
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.999889502138677	WITHOUT_CLASSIFICATION	7.924034882027443E-5	IMPLEMENTATION	1.572739696937119E-5	DEFECT	1.3459560847656766E-5	DESIGN	1.4058797397113282E-6	TEST	6.646749459342488E-7	DOCUMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999964936313608	WITHOUT_CLASSIFICATION	1.280804084814178E-6	DEFECT	9.190653780455359E-7	DESIGN	6.928963260542798E-7	IMPLEMENTATION	4.038019667626665E-7	DOCUMENTATION	2.0980088342161424E-7	TEST
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999957884274387	WITHOUT_CLASSIFICATION	2.702101621200256E-6	DEFECT	8.917548851917608E-7	IMPLEMENTATION	3.7501392429678363E-7	TEST	1.3734030868561596E-7	DOCUMENTATION	1.0536182185870163E-7	DESIGN
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999964091196103	WITHOUT_CLASSIFICATION	1.509714007308049E-6	DOCUMENTATION	9.310793034974346E-7	DESIGN	9.112948781952258E-7	TEST	1.3895547671594242E-7	DEFECT	9.983672405871192E-8	IMPLEMENTATION
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999043187237685	WITHOUT_CLASSIFICATION	8.696373859023209E-5	IMPLEMENTATION	3.4000679520587172E-6	DEFECT	2.52841280699161E-6	DOCUMENTATION	1.9594993534941443E-6	DESIGN	8.295575286845879E-7	TEST
// parameter bind values...	WITHOUT_CLASSIFICATION	0.999998646218032	WITHOUT_CLASSIFICATION	6.080168804888603E-7	DESIGN	4.0135580279724155E-7	IMPLEMENTATION	2.2182236906943397E-7	DEFECT	7.709097439386112E-8	TEST	4.549594125952115E-8	DOCUMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991082352379392	WITHOUT_CLASSIFICATION	8.613001498316981E-4	DESIGN	1.549009806165266E-5	IMPLEMENTATION	1.1769015308559688E-5	TEST	1.6461897959388108E-6	DOCUMENTATION	1.559309063054128E-6	DEFECT
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999320382903304	WITHOUT_CLASSIFICATION	6.689302858971267E-5	IMPLEMENTATION	6.448015134064428E-7	DESIGN	3.666254526490909E-7	DEFECT	2.886982789136657E-8	TEST	2.8384286028719678E-8	DOCUMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998746934204428	WITHOUT_CLASSIFICATION	7.838760802656434E-5	DESIGN	1.9085825293018496E-5	IMPLEMENTATION	1.3068978290694074E-5	TEST	9.290698780540516E-6	DEFECT	5.473469166498913E-6	DOCUMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9997318860440324	WITHOUT_CLASSIFICATION	1.4550064038675918E-4	DESIGN	9.628832098409734E-5	IMPLEMENTATION	1.837828659293322E-5	DOCUMENTATION	6.395631182693197E-6	DEFECT	1.551076821064513E-6	TEST
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9997318860440324	WITHOUT_CLASSIFICATION	1.4550064038675918E-4	DESIGN	9.628832098409734E-5	IMPLEMENTATION	1.837828659293322E-5	DOCUMENTATION	6.395631182693197E-6	DEFECT	1.551076821064513E-6	TEST
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999483650481181	WITHOUT_CLASSIFICATION	2.539120045813718E-5	IMPLEMENTATION	1.6982256868952728E-5	DESIGN	5.787505649045593E-6	DOCUMENTATION	3.080328632021739E-6	TEST	3.936602737752567E-7	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999483650481181	WITHOUT_CLASSIFICATION	2.539120045813718E-5	IMPLEMENTATION	1.6982256868952728E-5	DESIGN	5.787505649045593E-6	DOCUMENTATION	3.080328632021739E-6	TEST	3.936602737752567E-7	DEFECT
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999102797130182	WITHOUT_CLASSIFICATION	7.438845185635559E-5	IMPLEMENTATION	1.2292943260810775E-5	DESIGN	2.091389199257468E-6	DEFECT	5.846080181066968E-7	TEST	3.628946473289233E-7	DOCUMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987830928488	WITHOUT_CLASSIFICATION	1.0332846202762903E-6	DESIGN	6.389819185694584E-8	DEFECT	5.454673301292662E-8	TEST	3.3675807106913655E-8	IMPLEMENTATION	3.1501798929918795E-8	DOCUMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.999983615501351	WITHOUT_CLASSIFICATION	1.578501108761994E-5	DEFECT	4.291623713269565E-7	TEST	1.0316184284011366E-7	DESIGN	4.413226025820495E-8	DOCUMENTATION	2.3031086852906555E-8	IMPLEMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997598886462735	WITHOUT_CLASSIFICATION	2.1676734865047373E-4	IMPLEMENTATION	1.7360721042477746E-5	DESIGN	3.385442996131203E-6	TEST	2.1636424329957907E-6	DEFECT	4.341986043950053E-7	DOCUMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9991267648212441	WITHOUT_CLASSIFICATION	5.523424130459109E-4	DEFECT	2.394905450142489E-4	DESIGN	7.859686542330832E-5	IMPLEMENTATION	2.0245860359549017E-6	DOCUMENTATION	7.807692364329054E-7	TEST
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9934184358038922	WITHOUT_CLASSIFICATION	0.0038954756721460847	DESIGN	0.002513987839628375	IMPLEMENTATION	1.209188052712349E-4	DEFECT	4.2166952869386526E-5	TEST	9.0149261927277E-6	DOCUMENTATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999081944256012	WITHOUT_CLASSIFICATION	6.720200841551085E-5	IMPLEMENTATION	2.2389809782566427E-5	DEFECT	9.90217439569711E-7	DOCUMENTATION	9.155638396088922E-7	TEST	3.0797492169914156E-7	DESIGN
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998762018363668	WITHOUT_CLASSIFICATION	1.168778119332443E-4	DEFECT	3.108005913889886E-6	IMPLEMENTATION	2.1713553429487854E-6	DESIGN	1.2071133941994535E-6	DOCUMENTATION	4.3387704891786815E-7	TEST
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9967965908765574	WITHOUT_CLASSIFICATION	0.003087682732368542	DESIGN	5.852550101183719E-5	DEFECT	4.851895352013827E-5	DOCUMENTATION	5.486064204695422E-6	IMPLEMENTATION	3.195872337274622E-6	TEST
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999946694526671	WITHOUT_CLASSIFICATION	4.901407530809892E-6	TEST	1.188478320741253E-7	DEFECT	1.1822238695668402E-7	DOCUMENTATION	1.0475903414014499E-7	DESIGN	8.73105487180399E-8	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999995137948042	WITHOUT_CLASSIFICATION	2.534091631229752E-7	TEST	1.0081309755836936E-7	DEFECT	7.385103653617162E-8	DOCUMENTATION	5.656480890513313E-8	DESIGN	1.56708968453252E-9	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9986516789934132	WITHOUT_CLASSIFICATION	0.0011729718643430907	DESIGN	8.954263502556767E-5	IMPLEMENTATION	4.855496646078607E-5	DOCUMENTATION	2.8591379952871772E-5	TEST	8.660160804398131E-6	DEFECT
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9997840496694791	WITHOUT_CLASSIFICATION	1.2525661105055165E-4	IMPLEMENTATION	7.62011960228751E-5	DESIGN	5.436850455594253E-6	DEFECT	5.087672443583158E-6	DOCUMENTATION	3.9680005483988244E-6	TEST
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9997444695032919	WITHOUT_CLASSIFICATION	1.9715222282214238E-4	DESIGN	3.1658649073581484E-5	DEFECT	2.1804039866313653E-5	IMPLEMENTATION	2.56967049994606E-6	DOCUMENTATION	2.345914446107123E-6	TEST
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999987083054171	WITHOUT_CLASSIFICATION	4.7420546549436466E-7	DESIGN	3.752362273274323E-7	IMPLEMENTATION	2.2455893698510008E-7	DEFECT	1.3896986637670104E-7	DOCUMENTATION	7.872408663140763E-8	TEST
//no big deal	WITHOUT_CLASSIFICATION	0.9999592028184662	WITHOUT_CLASSIFICATION	1.310540753209899E-5	DEFECT	1.0081702391642144E-5	IMPLEMENTATION	8.220084545727055E-6	DOCUMENTATION	8.104480395552184E-6	DESIGN	1.2855066686711231E-6	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999598532613777	WITHOUT_CLASSIFICATION	2.5796612842026182E-5	IMPLEMENTATION	5.186639500109852E-6	DEFECT	5.147525369207523E-6	DESIGN	3.4695723192205312E-6	DOCUMENTATION	5.463885918217816E-7	TEST
// no big deal	WITHOUT_CLASSIFICATION	0.9999598532613777	WITHOUT_CLASSIFICATION	2.5796612842026182E-5	IMPLEMENTATION	5.186639500109852E-6	DEFECT	5.147525369207523E-6	DESIGN	3.4695723192205312E-6	DOCUMENTATION	5.463885918217816E-7	TEST
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9998155639475526	WITHOUT_CLASSIFICATION	8.252306934134023E-5	DEFECT	4.512795037405184E-5	IMPLEMENTATION	4.266111309931212E-5	DESIGN	1.3409899853166019E-5	TEST	7.140197794011612E-7	DOCUMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999950580324852	WITHOUT_CLASSIFICATION	2.4905931000741928E-6	DESIGN	1.1087592289309078E-6	DEFECT	6.054813292770526E-7	TEST	5.714847977901718E-7	DOCUMENTATION	1.6564905865163322E-7	IMPLEMENTATION
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.999999980692495	WITHOUT_CLASSIFICATION	1.525344100613572E-8	DEFECT	3.252874014149789E-9	DOCUMENTATION	5.216391878295043E-10	IMPLEMENTATION	1.9419233735444428E-10	TEST	8.535842918601134E-11	DESIGN
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999954182740476	WITHOUT_CLASSIFICATION	2.2264866083614835E-5	DEFECT	1.4853624948436828E-5	IMPLEMENTATION	4.1863892034249685E-6	DOCUMENTATION	2.5518699703164936E-6	TEST	1.960509318421565E-6	DESIGN
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999294461124355	WITHOUT_CLASSIFICATION	5.617736216300406E-5	IMPLEMENTATION	6.431521558596862E-6	DEFECT	6.09624867948159E-6	DESIGN	1.520161306285038E-6	TEST	3.2859385705167665E-7	DOCUMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999613697455737	WITHOUT_CLASSIFICATION	2.8187144782388796E-5	IMPLEMENTATION	4.288838039068181E-6	TEST	3.321123371059878E-6	DESIGN	2.4808674015868397E-6	DEFECT	3.522808321950246E-7	DOCUMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999948169147647	WITHOUT_CLASSIFICATION	3.539705388534578E-6	DESIGN	9.562539576331065E-7	IMPLEMENTATION	2.893215788236679E-7	DOCUMENTATION	2.1041191122064701E-7	TEST	1.8739239915030434E-7	DEFECT
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9120034254458329	WITHOUT_CLASSIFICATION	0.08715774245233723	IMPLEMENTATION	5.540710591177991E-4	DESIGN	2.618278569678971E-4	DEFECT	1.6346093743599305E-5	DOCUMENTATION	6.587092000590512E-6	TEST
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.999987947083498	WITHOUT_CLASSIFICATION	1.0661295487017416E-5	IMPLEMENTATION	5.709986833043724E-7	DEFECT	4.40740727985133E-7	DESIGN	3.457955970663691E-7	DOCUMENTATION	3.4086006529317784E-8	TEST
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999998041666041	WITHOUT_CLASSIFICATION	8.354905690090916E-8	DESIGN	5.8606213589479895E-8	IMPLEMENTATION	4.2910244795256255E-8	DEFECT	9.049867902618932E-9	DOCUMENTATION	1.718012654719979E-9	TEST
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9997175556240749	WITHOUT_CLASSIFICATION	2.8028813964642285E-4	DESIGN	1.0143476661280852E-6	DOCUMENTATION	9.661039261270954E-7	IMPLEMENTATION	1.1031762237202684E-7	TEST	6.546706411977465E-8	DEFECT
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999816387356424	WITHOUT_CLASSIFICATION	1.0157659441034303E-5	IMPLEMENTATION	4.104372857631541E-6	DESIGN	3.4013683275224056E-6	DEFECT	5.73198831563328E-7	DOCUMENTATION	1.2466489996755826E-7	TEST
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999990098006319	WITHOUT_CLASSIFICATION	8.25173058075565E-6	DEFECT	6.993177072602226E-7	IMPLEMENTATION	5.24778738119636E-7	DESIGN	2.418900101304596E-7	TEST	1.842766447396761E-7	DOCUMENTATION
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999984327455286	WITHOUT_CLASSIFICATION	1.4512210254439432E-6	IMPLEMENTATION	7.192523860297169E-8	DESIGN	2.0030748585089575E-8	DEFECT	1.511372549486187E-8	DOCUMENTATION	8.963733433466344E-9	TEST
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.999984332209872	WITHOUT_CLASSIFICATION	8.93355863512553E-6	IMPLEMENTATION	4.498499769322574E-6	DEFECT	1.1180284579878826E-6	DESIGN	9.519398279570853E-7	TEST	1.657634377313288E-7	DOCUMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999261052201763	WITHOUT_CLASSIFICATION	3.147532603921995E-5	DESIGN	1.8742523253131743E-5	DEFECT	1.7432609145551266E-5	IMPLEMENTATION	4.06850722770711E-6	TEST	2.1758141581442627E-6	DOCUMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9931968832966412	WITHOUT_CLASSIFICATION	0.006683101804222527	DESIGN	5.658377387584882E-5	TEST	4.969715873384033E-5	DEFECT	1.3285367152049244E-5	IMPLEMENTATION	4.485993746016665E-7	DOCUMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9996512052440161	WITHOUT_CLASSIFICATION	2.6234478204247816E-4	DEFECT	6.894653972615166E-5	DESIGN	1.327429639383206E-5	IMPLEMENTATION	2.3582149164094757E-6	DOCUMENTATION	1.8709229050601249E-6	TEST
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9993998439450611	WITHOUT_CLASSIFICATION	4.666316001141079E-4	DEFECT	1.0564071190685973E-4	DESIGN	2.1830738389689144E-5	IMPLEMENTATION	3.0526357888243587E-6	DOCUMENTATION	3.0003687394895527E-6	TEST
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999991329222515	WITHOUT_CLASSIFICATION	3.661338317510373E-7	IMPLEMENTATION	3.115672520564568E-7	DEFECT	8.615402424662375E-8	DOCUMENTATION	5.986513724049054E-8	DESIGN	4.3357503153661736E-8	TEST
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999970398498	WITHOUT_CLASSIFICATION	1.908130507318062E-9	DEFECT	3.464628052537059E-10	DOCUMENTATION	3.29562051315695E-10	TEST	3.2303670315796484E-10	IMPLEMENTATION	5.295821143937907E-11	DESIGN
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999369679550655	WITHOUT_CLASSIFICATION	5.474409699176599E-5	DEFECT	6.494176941793954E-6	TEST	1.7378951049515313E-6	IMPLEMENTATION	4.703274776482726E-8	DOCUMENTATION	8.843148237630586E-9	DESIGN
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999888529094283	WITHOUT_CLASSIFICATION	5.5825382626279144E-6	DEFECT	2.612162550503007E-6	IMPLEMENTATION	1.7022628220198375E-6	TEST	8.977333739486128E-7	DESIGN	3.5239356265044623E-7	DOCUMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999878407547104	WITHOUT_CLASSIFICATION	1.0988458148503272E-5	DESIGN	8.630075160458032E-7	DEFECT	2.759539880842571E-7	TEST	2.0027673919708898E-8	DOCUMENTATION	1.179796312456071E-8	IMPLEMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999960673950178	WITHOUT_CLASSIFICATION	2.2405128463489104E-6	IMPLEMENTATION	1.514660356987457E-6	DESIGN	8.271915671693884E-8	DEFECT	5.497422122153538E-8	DOCUMENTATION	3.973840096041985E-8	TEST
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9949806577623989	WITHOUT_CLASSIFICATION	0.004917689842267217	DESIGN	7.960795989021759E-5	DEFECT	1.1687788742123345E-5	TEST	6.450869163464298E-6	DOCUMENTATION	3.905777538154426E-6	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999655934291704	WITHOUT_CLASSIFICATION	1.913506387399244E-5	DEFECT	1.2126536758867576E-5	DESIGN	2.8710363461499825E-6	IMPLEMENTATION	1.5221361013022756E-7	TEST	1.2172024026324202E-7	DOCUMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999092390735517	WITHOUT_CLASSIFICATION	3.554269264891784E-5	DESIGN	3.405418506605052E-5	IMPLEMENTATION	1.044380093511699E-5	DEFECT	6.568386146987669E-6	DOCUMENTATION	4.151861651295114E-6	TEST
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999907174414	WITHOUT_CLASSIFICATION	7.3025145838743175E-9	DESIGN	9.675579418368404E-10	DOCUMENTATION	7.071564044868489E-10	TEST	3.042784553212334E-10	DEFECT	1.0510440404510198E-12	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9990776612811673	WITHOUT_CLASSIFICATION	5.632080511032634E-4	DESIGN	1.887613591182532E-4	IMPLEMENTATION	8.755623738947987E-5	TEST	4.79330651524063E-5	DEFECT	3.4880006069231934E-5	DOCUMENTATION
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999901709435532	WITHOUT_CLASSIFICATION	9.44194347440171E-6	DESIGN	3.8466472963622636E-7	DEFECT	1.7290189550383744E-9	TEST	6.940956416279906E-10	DOCUMENTATION	2.512821655373369E-11	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999910254585572	WITHOUT_CLASSIFICATION	7.84733067530539E-6	DESIGN	5.568926537381077E-7	DEFECT	2.6802980002327373E-7	IMPLEMENTATION	2.039600035364096E-7	TEST	9.832831002833478E-8	DOCUMENTATION
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9997238983931798	WITHOUT_CLASSIFICATION	2.699686800069074E-4	DESIGN	2.7129702023671344E-6	TEST	2.022561010238857E-6	DEFECT	9.663267915624285E-7	DOCUMENTATION	4.310688092033654E-7	IMPLEMENTATION
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9517747453822285	WITHOUT_CLASSIFICATION	0.03165250459559276	IMPLEMENTATION	0.010856553501524216	DOCUMENTATION	0.00566480523280592	DESIGN	4.173889296033987E-5	TEST	9.652394888348041E-6	DEFECT
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999975377013511	WITHOUT_CLASSIFICATION	1.6466485285194109E-6	DEFECT	4.5505736377297073E-7	TEST	2.5101494792747516E-7	IMPLEMENTATION	6.069020189965225E-8	DOCUMENTATION	4.888760681719386E-8	DESIGN
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9912736295091241	WITHOUT_CLASSIFICATION	0.008663171635903619	DESIGN	4.247061630154191E-5	IMPLEMENTATION	1.279799264186157E-5	DOCUMENTATION	5.144316101644453E-6	DEFECT	2.785929927206476E-6	TEST
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.999995813903449	WITHOUT_CLASSIFICATION	3.3280120720968666E-6	IMPLEMENTATION	8.233322065756912E-7	DEFECT	2.1492289466902495E-8	DESIGN	1.0350026055870363E-8	TEST	2.909956713910026E-9	DOCUMENTATION
// handle empty collection	WITHOUT_CLASSIFICATION	0.999503754139543	WITHOUT_CLASSIFICATION	3.2708917143257124E-4	IMPLEMENTATION	1.6006423329029004E-4	DESIGN	3.697609931249077E-6	DEFECT	2.792215853889357E-6	DOCUMENTATION	2.6026299490806185E-6	TEST
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999979061879704	WITHOUT_CLASSIFICATION	1.2208411450881394E-6	DESIGN	5.827747725671044E-7	IMPLEMENTATION	1.2169811916543212E-7	DOCUMENTATION	9.62262319769217E-8	DEFECT	7.227176079154971E-8	TEST
//handle empty collections	WITHOUT_CLASSIFICATION	0.999853482564477	WITHOUT_CLASSIFICATION	1.1430515034505052E-4	IMPLEMENTATION	3.064984243645189E-5	DESIGN	7.386812631304306E-7	TEST	5.863568621477162E-7	DOCUMENTATION	2.3740461640159787E-7	DEFECT
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9992075435705996	WITHOUT_CLASSIFICATION	7.626549588993246E-4	DESIGN	1.9725460497024063E-5	DEFECT	9.999966398388812E-6	IMPLEMENTATION	7.318098958608728E-8	TEST	2.862616174647418E-9	DOCUMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999965514773772	WITHOUT_CLASSIFICATION	2.054039891025905E-6	DEFECT	7.629491628047691E-7	DESIGN	4.960452819782942E-7	IMPLEMENTATION	8.907925187433675E-8	DOCUMENTATION	4.640903520439701E-8	TEST
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.940959294936049	WITHOUT_CLASSIFICATION	0.055357855833174374	DEFECT	0.00305191798691958	DESIGN	3.6279609362261E-4	TEST	2.560085095409379E-4	IMPLEMENTATION	1.2126640693548788E-5	DOCUMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9985756709267204	WITHOUT_CLASSIFICATION	0.0014186349888827899	DESIGN	5.245662832773456E-6	IMPLEMENTATION	2.7330710944239366E-7	DEFECT	1.459769376055742E-7	TEST	2.913751700203047E-8	DOCUMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999700069578764	WITHOUT_CLASSIFICATION	2.3677543227070437E-5	DEFECT	5.009096283730261E-6	DESIGN	1.0787835606617549E-6	IMPLEMENTATION	1.6928645832981787E-7	DOCUMENTATION	5.833259381480188E-8	TEST
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9994115786546031	WITHOUT_CLASSIFICATION	5.570571091587692E-4	DEFECT	1.4228255224350477E-5	IMPLEMENTATION	1.0737633776146265E-5	DESIGN	5.59183503274505E-6	DOCUMENTATION	8.065122049118189E-7	TEST
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999961286621457	WITHOUT_CLASSIFICATION	3.274724387514173E-6	IMPLEMENTATION	2.7465633913374926E-7	TEST	2.500543230564637E-7	DOCUMENTATION	3.7576519972804385E-8	DESIGN	3.432628457621509E-8	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999882324069969	WITHOUT_CLASSIFICATION	3.6208795157907314E-6	DEFECT	2.823108386059949E-6	IMPLEMENTATION	2.612956443163893E-6	DOCUMENTATION	1.9321177261228742E-6	TEST	7.785309321378421E-7	DESIGN
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999963059977565	WITHOUT_CLASSIFICATION	1.5952427206278307E-6	DEFECT	1.1758015638411347E-6	IMPLEMENTATION	6.679452083215425E-7	DESIGN	1.719629302973723E-7	DOCUMENTATION	8.304982043171638E-8	TEST
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.997940146329598	WITHOUT_CLASSIFICATION	0.0019153182622410024	TEST	5.610376751639441E-5	IMPLEMENTATION	4.361737859874552E-5	DESIGN	2.684158379790811E-5	DEFECT	1.7972678247948825E-5	DOCUMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999505296039594	WITHOUT_CLASSIFICATION	2.6007671321955565E-5	IMPLEMENTATION	2.059111096889905E-5	DEFECT	2.0443749143942554E-6	DESIGN	5.209654928980166E-7	DOCUMENTATION	3.0627334248568086E-7	TEST
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9994163664875715	WITHOUT_CLASSIFICATION	3.8057724071644244E-4	DESIGN	9.517523922801072E-5	DEFECT	4.8732907864665254E-5	IMPLEMENTATION	3.450208606421081E-5	TEST	2.4646038555112405E-5	DOCUMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9994630425064007	WITHOUT_CLASSIFICATION	4.88974400391827E-4	IMPLEMENTATION	3.299940340494018E-5	DESIGN	7.691214541547432E-6	DEFECT	3.979826333333277E-6	TEST	3.3126489278207753E-6	DOCUMENTATION
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.999492295773616	WITHOUT_CLASSIFICATION	1.5667393808507047E-4	IMPLEMENTATION	1.5435114544984596E-4	TEST	1.538344224256932E-4	DEFECT	2.1686705050878593E-5	DESIGN	2.1158015372578173E-5	DOCUMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9996577877015926	WITHOUT_CLASSIFICATION	3.0740060501517125E-4	IMPLEMENTATION	2.0479521119130312E-5	DEFECT	1.2135933194400188E-5	DOCUMENTATION	1.9229350810590144E-6	TEST	2.7330399750247793E-7	DESIGN
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999760275676357	WITHOUT_CLASSIFICATION	1.3006159795824944E-5	DEFECT	7.759802008214675E-6	IMPLEMENTATION	3.0099903336886894E-6	DESIGN	1.2994277004887997E-7	DOCUMENTATION	6.653745637244333E-8	TEST
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.8978626515176257	WITHOUT_CLASSIFICATION	0.0992379576742702	IMPLEMENTATION	0.0022345145903682577	TEST	4.7932232551753547E-4	DOCUMENTATION	1.6920502329109737E-4	DESIGN	1.6348868927344818E-5	DEFECT
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999035327260175	WITHOUT_CLASSIFICATION	5.118262971517968E-5	IMPLEMENTATION	2.7335730800282687E-5	DOCUMENTATION	1.2059140058695879E-5	DEFECT	4.0107118182440165E-6	DESIGN	1.8790615899767002E-6	TEST
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999921262204396	WITHOUT_CLASSIFICATION	7.550578729108127E-6	DESIGN	1.8765722063626158E-7	DOCUMENTATION	5.388901844015748E-8	TEST	4.244019858348581E-8	DEFECT	3.921439352764956E-8	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9983997525201025	WITHOUT_CLASSIFICATION	0.0010737146939238215	IMPLEMENTATION	3.6951080359264927E-4	DESIGN	7.88209348372079E-5	DOCUMENTATION	7.601195933463024E-5	TEST	2.189088209247795E-6	DEFECT
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.999976242623896	WITHOUT_CLASSIFICATION	2.2209592970549368E-5	DESIGN	1.371406482243072E-6	DEFECT	1.035965090103067E-7	DOCUMENTATION	5.707414907854394E-8	IMPLEMENTATION	1.5705993022466142E-8	TEST
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999954652405632	WITHOUT_CLASSIFICATION	2.2131950319222128E-6	IMPLEMENTATION	1.7506852886363932E-6	DESIGN	3.6093473179090976E-7	DEFECT	1.6275321946350842E-7	DOCUMENTATION	4.7191165025036095E-8	TEST
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999564488317	WITHOUT_CLASSIFICATION	3.904894003398014E-8	DESIGN	2.5504792357401427E-9	TEST	1.0116658477374342E-9	IMPLEMENTATION	8.434023126164768E-10	DEFECT	9.668094313985897E-11	DOCUMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.999988189483667	WITHOUT_CLASSIFICATION	5.31673211181722E-6	IMPLEMENTATION	2.502856448940451E-6	DOCUMENTATION	2.1969310059611603E-6	TEST	1.7109721866807173E-6	DESIGN	8.30245797511275E-8	DEFECT
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.999999705329733	WITHOUT_CLASSIFICATION	2.643882434596826E-7	DESIGN	1.590082428435312E-8	IMPLEMENTATION	8.667525983609454E-9	TEST	3.0510912036982034E-9	DOCUMENTATION	2.662581991605558E-9	DEFECT
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.999197813728439	WITHOUT_CLASSIFICATION	7.85592208395694E-4	DEFECT	1.6028525438824364E-5	DESIGN	3.4925044956036637E-7	IMPLEMENTATION	1.339795262866368E-7	DOCUMENTATION	8.230775074437564E-8	TEST
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9640797478769931	WITHOUT_CLASSIFICATION	0.035497997539456726	DESIGN	3.7400203202378213E-4	DEFECT	4.772296073385974E-5	IMPLEMENTATION	3.9989913725733975E-7	TEST	1.2969165528696503E-7	DOCUMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999933756239351	WITHOUT_CLASSIFICATION	3.1155604208058628E-6	DESIGN	2.547493270353174E-6	IMPLEMENTATION	3.689858510127473E-7	TEST	3.10864156129149E-7	DEFECT	2.8147236662568397E-7	DOCUMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999868849008968	WITHOUT_CLASSIFICATION	5.066471909090167E-5	DEFECT	4.401695374438339E-5	IMPLEMENTATION	1.5547753002717507E-5	DOCUMENTATION	1.1428759272447522E-5	DESIGN	9.492805921573136E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999868849008968	WITHOUT_CLASSIFICATION	5.066471909090167E-5	DEFECT	4.401695374438339E-5	IMPLEMENTATION	1.5547753002717507E-5	DOCUMENTATION	1.1428759272447522E-5	DESIGN	9.492805921573136E-6	TEST
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999971657899986	WITHOUT_CLASSIFICATION	7.955845294700003E-7	TEST	7.165043495134587E-7	DOCUMENTATION	6.25962407255576E-7	IMPLEMENTATION	4.395275399407528E-7	DESIGN	2.5663117509101016E-7	DEFECT
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999550585509684	WITHOUT_CLASSIFICATION	3.871389006544428E-5	DESIGN	3.841568047117912E-6	IMPLEMENTATION	1.8445857849219502E-6	TEST	3.894362933547119E-7	DEFECT	1.5196884095093684E-7	DOCUMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999667820800948	WITHOUT_CLASSIFICATION	3.215607018160944E-5	DESIGN	6.363578471386122E-7	DEFECT	2.3614063459103682E-7	TEST	1.1009119497378623E-7	DOCUMENTATION	7.92600469172851E-8	IMPLEMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9998948654945352	WITHOUT_CLASSIFICATION	9.901712133594993E-5	DESIGN	4.546795560961156E-6	DEFECT	8.100968032169619E-7	TEST	5.233668990939167E-7	DOCUMENTATION	2.371248656720676E-7	IMPLEMENTATION
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9998860398262069	WITHOUT_CLASSIFICATION	5.622699016920683E-5	DEFECT	3.5307458688579136E-5	DESIGN	1.5775910176448564E-5	IMPLEMENTATION	4.4900172770178945E-6	TEST	2.1597974817740536E-6	DOCUMENTATION
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9995822718688843	WITHOUT_CLASSIFICATION	3.335955269219399E-4	IMPLEMENTATION	4.9467348639145486E-5	DESIGN	1.566035727854428E-5	TEST	1.378748091255872E-5	DOCUMENTATION	5.217417363518221E-6	DEFECT
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999688443234723	WITHOUT_CLASSIFICATION	2.8424286656126913E-5	DESIGN	1.403140595572488E-6	DEFECT	1.0808431777704562E-6	DOCUMENTATION	1.6349013986396597E-7	TEST	8.391595835301742E-8	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999799633039768	WITHOUT_CLASSIFICATION	9.211592620465325E-6	IMPLEMENTATION	7.992373451193642E-6	DEFECT	2.264205355758286E-6	DESIGN	5.150431179179659E-7	TEST	5.3481477913757164E-8	DOCUMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999442526690392	WITHOUT_CLASSIFICATION	3.713425091648783E-5	DEFECT	1.2214563875437024E-5	IMPLEMENTATION	3.890740255114591E-6	DESIGN	1.4850736990176922E-6	DOCUMENTATION	1.0227022147066823E-6	TEST
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999595941894972	WITHOUT_CLASSIFICATION	3.395328396194378E-5	DESIGN	5.336962336842113E-6	DEFECT	1.032959856905663E-6	TEST	5.8698213973654743E-8	IMPLEMENTATION	2.390613299492352E-8	DOCUMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999997684035278	WITHOUT_CLASSIFICATION	8.787984129715582E-8	DESIGN	6.024313629938145E-8	IMPLEMENTATION	3.7227192639523866E-8	DEFECT	2.918253640342561E-8	DOCUMENTATION	1.7063765723740163E-8	TEST
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999971497801188	WITHOUT_CLASSIFICATION	2.117949650168079E-6	DEFECT	5.625669305386432E-7	DESIGN	1.5014657330571514E-7	IMPLEMENTATION	1.5450674294354645E-8	DOCUMENTATION	4.1060529672033186E-9	TEST
//a composite key	WITHOUT_CLASSIFICATION	0.999996231103897	WITHOUT_CLASSIFICATION	1.5985481532072445E-6	IMPLEMENTATION	1.254632276796598E-6	DESIGN	5.01861810265629E-7	DOCUMENTATION	2.2805357817294752E-7	TEST	1.858002846027688E-7	DEFECT
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999996964585235	WITHOUT_CLASSIFICATION	2.4036480859246163E-7	DESIGN	2.4367110794633495E-8	DOCUMENTATION	2.3982214719733826E-8	DEFECT	1.1189499966272863E-8	IMPLEMENTATION	3.6378424491655947E-9	TEST
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9997155817338728	WITHOUT_CLASSIFICATION	2.7626687069838817E-4	DESIGN	3.7986980095355243E-6	TEST	2.4146839914008613E-6	IMPLEMENTATION	1.5962161470478807E-6	DEFECT	3.417972808775539E-7	DOCUMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.5858451412608762	WITHOUT_CLASSIFICATION	0.2926033027818008	IMPLEMENTATION	0.11888098358143706	DESIGN	0.0017372545323195519	DEFECT	7.874971318907833E-4	DOCUMENTATION	1.4582071167580662E-4	TEST
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999616563236379	WITHOUT_CLASSIFICATION	3.273384503831939E-5	DESIGN	2.835129973025363E-6	IMPLEMENTATION	1.829940891434429E-6	DOCUMENTATION	5.440371650633366E-7	DEFECT	4.0072329433674005E-7	TEST
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.6934898575961164	WITHOUT_CLASSIFICATION	0.21710978404407097	IMPLEMENTATION	0.08721504525992711	DESIGN	0.001061395253220365	TEST	9.626467358377963E-4	DEFECT	1.6127111082743875E-4	DOCUMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9969117626218893	WITHOUT_CLASSIFICATION	0.0028737234985676237	IMPLEMENTATION	2.0626051466863488E-4	DESIGN	7.3829958946792035E-6	DEFECT	4.563372388812375E-7	TEST	4.14031740956684E-7	DOCUMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.99792082572964	WITHOUT_CLASSIFICATION	0.0020560918443745897	DESIGN	7.655516731444097E-6	TEST	7.217528720448888E-6	DEFECT	7.202860413867829E-6	IMPLEMENTATION	1.0065201195304362E-6	DOCUMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.9999868825132341	WITHOUT_CLASSIFICATION	8.474348382820009E-6	DEFECT	2.438815834651051E-6	DESIGN	1.188459611281917E-6	DOCUMENTATION	6.216320397130517E-7	IMPLEMENTATION	3.9423089730331363E-7	TEST
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9995307091628463	WITHOUT_CLASSIFICATION	4.6059884669968866E-4	DESIGN	3.4058452031922365E-6	IMPLEMENTATION	2.366170291508276E-6	DOCUMENTATION	1.7263282309674345E-6	DEFECT	1.1936467283794263E-6	TEST
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9950877580736414	WITHOUT_CLASSIFICATION	0.0027483956907890187	DESIGN	0.0010177732198671267	DOCUMENTATION	7.847948632580637E-4	TEST	3.203663262324473E-4	IMPLEMENTATION	4.09118262120028E-5	DEFECT
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9990360908219033	WITHOUT_CLASSIFICATION	4.8396439660767013E-4	IMPLEMENTATION	4.3942083222673923E-4	DESIGN	3.114203259757454E-5	TEST	5.901119440328921E-6	DEFECT	3.48079722432815E-6	DOCUMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999948991789482	WITHOUT_CLASSIFICATION	2.5746383062142766E-6	DEFECT	1.7203447867199356E-6	DESIGN	7.720664614129873E-7	DOCUMENTATION	2.422972959326739E-8	TEST	9.541767854493336E-9	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9998386757560455	WITHOUT_CLASSIFICATION	1.50374112747853E-4	DESIGN	3.3872113690247126E-6	TEST	3.1528237138924132E-6	DEFECT	2.8976484954186704E-6	IMPLEMENTATION	1.5124476282605049E-6	DOCUMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999791280880523	WITHOUT_CLASSIFICATION	1.0441402146038343E-5	DESIGN	5.7795442460943104E-6	DEFECT	4.221718956190748E-6	IMPLEMENTATION	3.807263953689735E-7	DOCUMENTATION	4.852020396563337E-8	TEST
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999948527784132	WITHOUT_CLASSIFICATION	2.637606255578815E-6	IMPLEMENTATION	1.6488376098888702E-6	DESIGN	5.972434805969441E-7	DEFECT	2.0085718228581929E-7	DOCUMENTATION	6.267705853988187E-8	TEST
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999971352686552	WITHOUT_CLASSIFICATION	1.269193521518843E-6	DESIGN	7.232490053283817E-7	IMPLEMENTATION	6.599541154041572E-7	TEST	1.8121097465093188E-7	DEFECT	3.112372798295636E-8	DOCUMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999634871865111	WITHOUT_CLASSIFICATION	3.449656039679862E-5	IMPLEMENTATION	1.0607551875187222E-6	DESIGN	7.709287964860123E-7	TEST	1.227798732727767E-7	DOCUMENTATION	6.178923468916843E-8	DEFECT
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999924192282237	WITHOUT_CLASSIFICATION	6.264990521582396E-6	DESIGN	8.371426526195519E-7	TEST	2.110562425446323E-7	IMPLEMENTATION	2.0502376665520036E-7	DEFECT	6.255859305478387E-8	DOCUMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999886802190269	WITHOUT_CLASSIFICATION	6.356953840891456E-6	IMPLEMENTATION	4.433643547292792E-6	DESIGN	2.263318721419111E-7	TEST	1.9752549602777685E-7	DOCUMENTATION	1.05326216713414E-7	DEFECT
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999884743077075	WITHOUT_CLASSIFICATION	7.01247449094203E-6	DESIGN	3.535390589042572E-6	IMPLEMENTATION	4.747656054656287E-7	TEST	3.548780916783259E-7	DOCUMENTATION	1.481835152707094E-7	DEFECT
// the entity name	WITHOUT_CLASSIFICATION	0.9999271055291943	WITHOUT_CLASSIFICATION	4.66486205168548E-5	IMPLEMENTATION	1.2156608217358534E-5	DESIGN	8.250424953905273E-6	DOCUMENTATION	3.668410505614083E-6	TEST	2.1704066120478818E-6	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9995368396001304	WITHOUT_CLASSIFICATION	2.289618503872089E-4	IMPLEMENTATION	1.496777088462027E-4	DESIGN	6.49189802594153E-5	DEFECT	1.0432828074375997E-5	TEST	9.169032302464871E-6	DOCUMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9995368396001304	WITHOUT_CLASSIFICATION	2.289618503872089E-4	IMPLEMENTATION	1.496777088462027E-4	DESIGN	6.49189802594153E-5	DEFECT	1.0432828074375997E-5	TEST	9.169032302464871E-6	DOCUMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999215690449075	WITHOUT_CLASSIFICATION	4.582027409308126E-5	DESIGN	2.7313550254734512E-5	DEFECT	2.9805730926378447E-6	IMPLEMENTATION	1.3859171376477066E-6	TEST	9.306405143269967E-7	DOCUMENTATION
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9991909695175151	WITHOUT_CLASSIFICATION	5.748465626902585E-4	DESIGN	1.6073481703565286E-4	IMPLEMENTATION	3.478709428834575E-5	TEST	2.1454700585809094E-5	DOCUMENTATION	1.720730788485229E-5	DEFECT
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999949880153254	WITHOUT_CLASSIFICATION	1.8780397247791271E-6	DEFECT	1.5453749938146167E-6	IMPLEMENTATION	1.1101251695507005E-6	DESIGN	2.8117187271114333E-7	TEST	1.9727291389120317E-7	DOCUMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999775110327558	WITHOUT_CLASSIFICATION	1.1057065589161882E-5	DESIGN	4.702474805476798E-6	IMPLEMENTATION	4.427771617593512E-6	DEFECT	1.4687495832029586E-6	DOCUMENTATION	8.329056486851086E-7	TEST
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9989589110584676	WITHOUT_CLASSIFICATION	0.0010256762536936497	DESIGN	1.0737809761348165E-5	TEST	1.8189360709717099E-6	IMPLEMENTATION	1.7907052630664698E-6	DOCUMENTATION	1.0652367435284645E-6	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9971250720619655	WITHOUT_CLASSIFICATION	0.0019324093690898372	DEFECT	9.172775052433907E-4	DESIGN	2.0201916309522523E-5	TEST	2.9451041561228768E-6	IMPLEMENTATION	2.0940432355663843E-6	DOCUMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999955001724656	WITHOUT_CLASSIFICATION	3.143024529490702E-6	DESIGN	9.431736977824681E-7	DEFECT	2.0082748608302367E-7	TEST	1.1181158619196145E-7	DOCUMENTATION	1.0099023484211414E-7	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9996825498614377	WITHOUT_CLASSIFICATION	3.173466156893337E-4	DESIGN	6.289597717391944E-8	TEST	2.3722879546538925E-8	DEFECT	1.2529133530750934E-8	DOCUMENTATION	4.374882769445351E-9	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9970349808045704	WITHOUT_CLASSIFICATION	0.0028962761440376136	DESIGN	3.010746076296901E-5	TEST	1.7399140594338093E-5	DOCUMENTATION	1.3144004360188204E-5	IMPLEMENTATION	8.09244567438068E-6	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999446746134948	WITHOUT_CLASSIFICATION	5.460539926825454E-5	DESIGN	5.208815474541313E-7	TEST	9.84310452109543E-8	IMPLEMENTATION	8.479115301183041E-8	DEFECT	1.5883491498746785E-8	DOCUMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999237219440954	WITHOUT_CLASSIFICATION	6.625332689643962E-5	DESIGN	7.193007854015243E-6	IMPLEMENTATION	2.554971772124201E-6	DEFECT	2.2776048375726823E-7	TEST	4.8988898182297256E-8	DOCUMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9400627462794579	WITHOUT_CLASSIFICATION	0.05954409756277991	DESIGN	2.2969996347357E-4	IMPLEMENTATION	8.740274533782915E-5	TEST	4.994973279126202E-5	DEFECT	2.61037161595379E-5	DOCUMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999967209231281	WITHOUT_CLASSIFICATION	1.900602314623286E-6	DEFECT	1.1108492694674382E-6	TEST	1.8317758982602708E-7	DESIGN	6.066983727522443E-8	DOCUMENTATION	2.377786081850372E-8	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999559048853786	WITHOUT_CLASSIFICATION	1.9290260660536737E-5	IMPLEMENTATION	1.8818632912896102E-5	DESIGN	4.0641622667396005E-6	DEFECT	1.0756162706364087E-6	DOCUMENTATION	8.464425106080537E-7	TEST
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999971308093841	WITHOUT_CLASSIFICATION	2.5550104843439894E-6	IMPLEMENTATION	1.4244225506833838E-7	TEST	1.0033671247211735E-7	DEFECT	6.288093291315193E-8	DESIGN	8.520231024540325E-9	DOCUMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9664535343785658	WITHOUT_CLASSIFICATION	0.02498459664881714	IMPLEMENTATION	0.004365590296458327	DEFECT	0.0039580212194701	DESIGN	1.4295445307401772E-4	TEST	9.530300361453337E-5	DOCUMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9664535343785658	WITHOUT_CLASSIFICATION	0.02498459664881714	IMPLEMENTATION	0.004365590296458327	DEFECT	0.0039580212194701	DESIGN	1.4295445307401772E-4	TEST	9.530300361453337E-5	DOCUMENTATION
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999506135085934	WITHOUT_CLASSIFICATION	2.7318020898978445E-5	DESIGN	1.8039322092009457E-5	DEFECT	3.6312734096490655E-6	IMPLEMENTATION	2.666730141906674E-7	DOCUMENTATION	1.3120199183756736E-7	TEST
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999966273782162	WITHOUT_CLASSIFICATION	2.032640570009777E-6	DEFECT	8.858784554855707E-7	DESIGN	2.528033031578507E-7	IMPLEMENTATION	1.1221174357231903E-7	TEST	8.908771161465778E-8	DOCUMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9945517689448302	WITHOUT_CLASSIFICATION	0.004798866827358215	DESIGN	6.334729677233233E-4	IMPLEMENTATION	1.1470381124744635E-5	TEST	2.6260473474817198E-6	DEFECT	1.7948316159937502E-6	DOCUMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999957937364528	WITHOUT_CLASSIFICATION	3.024614630148228E-6	DESIGN	9.473815220647468E-7	IMPLEMENTATION	2.089733231242029E-7	DEFECT	1.6524853132182244E-8	TEST	8.769218829855628E-9	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9986516789934132	WITHOUT_CLASSIFICATION	0.0011729718643430907	DESIGN	8.954263502556767E-5	IMPLEMENTATION	4.855496646078607E-5	DOCUMENTATION	2.8591379952871772E-5	TEST	8.660160804398131E-6	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9990166178802337	WITHOUT_CLASSIFICATION	5.56231098428187E-4	DEFECT	2.85856372864625E-4	IMPLEMENTATION	5.845175049629188E-5	DESIGN	5.208220454286922E-5	DOCUMENTATION	3.076069343434641E-5	TEST
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
// Now, process the returns	WITHOUT_CLASSIFICATION	0.999999932499714	WITHOUT_CLASSIFICATION	3.447044435588362E-8	IMPLEMENTATION	1.4107827595008993E-8	DESIGN	1.1202069561602518E-8	DEFECT	6.150158279254454E-9	DOCUMENTATION	1.5697863015023207E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999967985577469	WITHOUT_CLASSIFICATION	2.416142391615562E-6	IMPLEMENTATION	4.4734928183405744E-7	DESIGN	2.2058481409544285E-7	DOCUMENTATION	8.67540279114137E-8	TEST	3.061173756287857E-8	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999967985577469	WITHOUT_CLASSIFICATION	2.416142391615562E-6	IMPLEMENTATION	4.4734928183405744E-7	DESIGN	2.2058481409544285E-7	DOCUMENTATION	8.67540279114137E-8	TEST	3.061173756287857E-8	DEFECT
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999764455758425	WITHOUT_CLASSIFICATION	2.053966531428282E-5	IMPLEMENTATION	1.448453947201128E-6	DEFECT	7.671195939045155E-7	DESIGN	5.293067825855425E-7	TEST	2.698785196405076E-7	DOCUMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999587156475992	WITHOUT_CLASSIFICATION	3.344897489176895E-5	IMPLEMENTATION	6.428412636095455E-6	DESIGN	1.3518508724466121E-6	DEFECT	4.145534905192913E-8	TEST	1.3658651506362178E-8	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999633572234706	WITHOUT_CLASSIFICATION	2.967285706718005E-5	DESIGN	3.813657158534283E-6	IMPLEMENTATION	2.091273186183757E-6	DEFECT	8.508599612742478E-7	TEST	2.1412915624249543E-7	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999987212419609	WITHOUT_CLASSIFICATION	5.760499724989573E-7	DESIGN	3.532866707288795E-7	DEFECT	3.0928765418477087E-7	IMPLEMENTATION	3.063841799245798E-8	DOCUMENTATION	9.495323742075788E-9	TEST
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9948549471621979	WITHOUT_CLASSIFICATION	0.005141182857617452	DESIGN	2.208533676924593E-6	TEST	1.4046572692626302E-6	DOCUMENTATION	2.4583994477583437E-7	IMPLEMENTATION	1.0949293641610983E-8	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.999882766757388	WITHOUT_CLASSIFICATION	6.273465358246636E-5	IMPLEMENTATION	2.1386213586749685E-5	DEFECT	1.311516943120758E-5	DESIGN	1.1232289127515622E-5	DOCUMENTATION	8.764916884003357E-6	TEST
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9998113932099559	WITHOUT_CLASSIFICATION	1.8488764334048964E-4	IMPLEMENTATION	1.8730989663170037E-6	DEFECT	1.4606474330899914E-6	DESIGN	2.6102372200709013E-7	TEST	1.243765822373819E-7	DOCUMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999904984312711	WITHOUT_CLASSIFICATION	4.623136829542421E-6	IMPLEMENTATION	3.779046095227607E-6	DESIGN	6.894385851517939E-7	DEFECT	2.2833077078438006E-7	TEST	1.8161644815312163E-7	DOCUMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999985436634126	WITHOUT_CLASSIFICATION	1.0413174289645617E-6	IMPLEMENTATION	2.69255807508177E-7	DESIGN	7.04652004665336E-8	TEST	6.968901588025794E-8	DOCUMENTATION	5.609134508142211E-9	DEFECT
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9975719698293782	WITHOUT_CLASSIFICATION	0.0018289672788810805	DESIGN	3.399507592977123E-4	IMPLEMENTATION	2.0275160605384693E-4	TEST	3.610914878642399E-5	DOCUMENTATION	2.025137760279676E-5	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9994605410589936	WITHOUT_CLASSIFICATION	3.9013528143076883E-4	DESIGN	8.305957067647842E-5	IMPLEMENTATION	6.57090383013434E-5	DEFECT	3.4348621881889965E-7	DOCUMENTATION	2.1156437896487095E-7	TEST
// make a new one	WITHOUT_CLASSIFICATION	0.9999803933963354	WITHOUT_CLASSIFICATION	6.1632512007036006E-6	DESIGN	5.2266917103527325E-6	TEST	3.210618075431736E-6	IMPLEMENTATION	2.6562915365867483E-6	DOCUMENTATION	2.3497511414864744E-6	DEFECT
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999972958495216	WITHOUT_CLASSIFICATION	1.7307787127459413E-6	IMPLEMENTATION	6.131723715248184E-7	TEST	2.2417211633443296E-7	DESIGN	9.055262382022658E-8	DEFECT	4.5474654043899194E-8	DOCUMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999982023537767	WITHOUT_CLASSIFICATION	1.2249102271782717E-6	IMPLEMENTATION	1.8268787194447473E-7	TEST	1.5314505833621883E-7	DESIGN	1.3816069959773695E-7	DOCUMENTATION	9.874236626724256E-8	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999984387595315	WITHOUT_CLASSIFICATION	1.325254311749893E-6	DESIGN	9.049098164665605E-8	DEFECT	6.87896123256817E-8	DOCUMENTATION	5.467288691030314E-8	TEST	2.2032675867083284E-8	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999915429897571	WITHOUT_CLASSIFICATION	7.992485794200737E-6	DESIGN	2.878526180775839E-7	DEFECT	9.6442439411413E-8	IMPLEMENTATION	4.9174824628710263E-8	TEST	3.1054566472628056E-8	DOCUMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999998691520957	WITHOUT_CLASSIFICATION	1.0380106929526464E-7	DEFECT	9.447169129892217E-9	TEST	6.539040332006468E-9	IMPLEMENTATION	5.737398372494842E-9	DESIGN	5.3232273696068536E-9	DOCUMENTATION
//by default	WITHOUT_CLASSIFICATION	0.9999680454183321	WITHOUT_CLASSIFICATION	2.0061720318713164E-5	IMPLEMENTATION	4.996589671688485E-6	DEFECT	3.5469512985384083E-6	DESIGN	2.3633221041428106E-6	DOCUMENTATION	9.859982747773213E-7	TEST
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9992446336716964	WITHOUT_CLASSIFICATION	7.082508776338408E-4	DESIGN	2.082140214631845E-5	IMPLEMENTATION	1.5044340238859353E-5	TEST	1.0169956248617804E-5	DEFECT	1.079752036046769E-6	DOCUMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9994739022248548	WITHOUT_CLASSIFICATION	5.195812985382008E-4	IMPLEMENTATION	3.547808074036699E-6	DEFECT	1.6526654796496316E-6	DESIGN	8.952275079380858E-7	DOCUMENTATION	4.2077554533287386E-7	TEST
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999992614182804	WITHOUT_CLASSIFICATION	2.689208042876712E-7	IMPLEMENTATION	2.331881009254348E-7	DESIGN	1.1302229372569606E-7	TEST	6.95679487476266E-8	DOCUMENTATION	5.3882571714362864E-8	DEFECT
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999981211565311	WITHOUT_CLASSIFICATION	1.0607146973851013E-6	IMPLEMENTATION	3.7663935083678595E-7	DESIGN	1.7586460075351508E-7	DEFECT	1.6081779034465465E-7	DOCUMENTATION	1.04807029549994E-7	TEST
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999361552287784	WITHOUT_CLASSIFICATION	4.445922397894344E-5	IMPLEMENTATION	1.1683005555065483E-5	DEFECT	6.306251187237426E-6	TEST	9.131307400164846E-7	DESIGN	4.83159760233153E-7	DOCUMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9695470809339366	WITHOUT_CLASSIFICATION	0.029301199286571645	DESIGN	6.559284231620596E-4	DEFECT	3.454833549014993E-4	IMPLEMENTATION	1.1350999654696428E-4	TEST	3.679800488131751E-5	DOCUMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999448221712275	WITHOUT_CLASSIFICATION	4.0749051588440977E-5	IMPLEMENTATION	1.2483509705407627E-5	DESIGN	1.0989201011601705E-6	TEST	5.775879762956255E-7	DOCUMENTATION	2.6875940114387985E-7	DEFECT
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9994169655442423	WITHOUT_CLASSIFICATION	4.1524181585313966E-4	DESIGN	1.665223773762017E-4	IMPLEMENTATION	6.273499528136873E-7	DOCUMENTATION	5.308314227824795E-7	TEST	1.1208115276122169E-7	DEFECT
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.8050807536428957	WITHOUT_CLASSIFICATION	0.1573117620444534	IMPLEMENTATION	0.031880688922552136	DESIGN	0.003156710807826403	TEST	0.002512008587670618	DEFECT	5.80759946017443E-5	DOCUMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999604186300126	WITHOUT_CLASSIFICATION	3.487242828916769E-5	DESIGN	3.6999218543044823E-6	IMPLEMENTATION	9.092503851737375E-7	TEST	8.465888007404401E-8	DOCUMENTATION	1.511057860233208E-8	DEFECT
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9980381426495687	WITHOUT_CLASSIFICATION	0.0012779761141167168	DESIGN	6.486694724073011E-4	IMPLEMENTATION	2.7559695561403516E-5	DEFECT	4.562686417400978E-6	DOCUMENTATION	3.089381928468627E-6	TEST
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999988445414907	WITHOUT_CLASSIFICATION	4.4539507308646107E-7	DEFECT	3.677239358881131E-7	DESIGN	3.0150510704437245E-7	IMPLEMENTATION	2.7796472902127124E-8	TEST	1.3037920244609862E-8	DOCUMENTATION
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9995253109504798	WITHOUT_CLASSIFICATION	3.257911772569134E-4	DESIGN	8.008809792508771E-5	IMPLEMENTATION	3.238703134574843E-5	DEFECT	2.4659768758077777E-5	TEST	1.1762974234319996E-5	DOCUMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.9999798942864057	WITHOUT_CLASSIFICATION	1.7765302468719566E-5	DESIGN	7.675404367364625E-7	DEFECT	6.422330183790534E-7	IMPLEMENTATION	5.463469841988097E-7	DOCUMENTATION	3.842906861877958E-7	TEST
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999174682745142	WITHOUT_CLASSIFICATION	6.792567496426101E-5	DESIGN	1.3905512415207626E-5	IMPLEMENTATION	5.848103237486688E-7	TEST	8.102383391608375E-8	DOCUMENTATION	3.47039484810855E-8	DEFECT
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999862100656323	WITHOUT_CLASSIFICATION	1.3432244216173786E-5	IMPLEMENTATION	1.2440308319160644E-7	DESIGN	1.0029549487041164E-7	DOCUMENTATION	8.976842670376725E-8	TEST	4.322314677617229E-8	DEFECT
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999603038571508	WITHOUT_CLASSIFICATION	3.641669540027255E-5	IMPLEMENTATION	1.153705829608564E-6	TEST	1.041880739858818E-6	DEFECT	6.129422335111777E-7	DOCUMENTATION	4.709186457805112E-7	DESIGN
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999632279917359	WITHOUT_CLASSIFICATION	1.6027278269007596E-5	DEFECT	1.3706597200216158E-5	DESIGN	3.6984887099250013E-6	IMPLEMENTATION	2.456062063358857E-6	DOCUMENTATION	8.83582021666683E-7	TEST
//may be final	WITHOUT_CLASSIFICATION	0.999986032114222	WITHOUT_CLASSIFICATION	5.911747214325251E-6	DESIGN	4.505009597743431E-6	DEFECT	1.6393249275060444E-6	IMPLEMENTATION	1.5279283093728107E-6	DOCUMENTATION	3.8387572902777494E-7	TEST
// may be final	WITHOUT_CLASSIFICATION	0.9999964781095622	WITHOUT_CLASSIFICATION	1.4741134617039625E-6	DESIGN	1.3581917050947627E-6	DEFECT	3.6292860001273624E-7	IMPLEMENTATION	2.531178206346864E-7	DOCUMENTATION	7.353885035129858E-8	TEST
// Custom SQL	WITHOUT_CLASSIFICATION	0.999997920678541	WITHOUT_CLASSIFICATION	1.1804076035826802E-6	DESIGN	3.2558317043507497E-7	DEFECT	2.8458807132660614E-7	DOCUMENTATION	2.0869262313581245E-7	TEST	8.004999050961822E-8	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999983478308458	WITHOUT_CLASSIFICATION	1.0492158328944303E-6	DESIGN	2.978954809330077E-7	DOCUMENTATION	1.4878679547829763E-7	TEST	1.2807096482031087E-7	IMPLEMENTATION	2.8200079980057665E-8	DEFECT
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999997684131896	WITHOUT_CLASSIFICATION	2.173775098195236E-7	DEFECT	6.523168054900331E-9	DESIGN	2.906182240699024E-9	TEST	2.899107083919824E-9	IMPLEMENTATION	1.8808432616082516E-9	DOCUMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.9999801065414387	WITHOUT_CLASSIFICATION	9.708361848465224E-6	DESIGN	4.5781915687693824E-6	DEFECT	3.6867416620216425E-6	IMPLEMENTATION	1.2564424886219895E-6	DOCUMENTATION	6.637209933386481E-7	TEST
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999760209348767	WITHOUT_CLASSIFICATION	1.4175124140011846E-5	IMPLEMENTATION	5.846491501434981E-6	DESIGN	1.7070044131279307E-6	DEFECT	1.383133667405055E-6	DOCUMENTATION	8.673114013320741E-7	TEST
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9998744251417031	WITHOUT_CLASSIFICATION	1.0821635973320307E-4	DESIGN	7.72719822593145E-6	DEFECT	6.566288973305462E-6	IMPLEMENTATION	2.571004123061438E-6	DOCUMENTATION	4.940072413383191E-7	TEST
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999998777625935	WITHOUT_CLASSIFICATION	1.036313426899551E-7	IMPLEMENTATION	1.2365025054537384E-8	DESIGN	2.538226352710254E-9	DOCUMENTATION	2.260591417602786E-9	DEFECT	1.4422211356731296E-9	TEST
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999046160824516	WITHOUT_CLASSIFICATION	7.404535251236606E-5	IMPLEMENTATION	1.4370827031570345E-5	DESIGN	3.8917158876414285E-6	DEFECT	2.6833547187684807E-6	TEST	3.926673979265953E-7	DOCUMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.999997920678541	WITHOUT_CLASSIFICATION	1.1804076035826802E-6	DESIGN	3.2558317043507497E-7	DEFECT	2.8458807132660614E-7	DOCUMENTATION	2.0869262313581245E-7	TEST	8.004999050961822E-8	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999983478308458	WITHOUT_CLASSIFICATION	1.0492158328944303E-6	DESIGN	2.978954809330077E-7	DOCUMENTATION	1.4878679547829763E-7	TEST	1.2807096482031087E-7	IMPLEMENTATION	2.8200079980057665E-8	DEFECT
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9993966966700822	WITHOUT_CLASSIFICATION	4.133340190250858E-4	IMPLEMENTATION	1.5628129645154704E-4	DESIGN	2.4086897435372617E-5	TEST	8.07117949634147E-6	DEFECT	1.5299375093206193E-6	DOCUMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9852216474994662	WITHOUT_CLASSIFICATION	0.010704428826061005	IMPLEMENTATION	0.003026802955119895	DESIGN	8.130779495830715E-4	DOCUMENTATION	1.6612519701532749E-4	DEFECT	6.791757275447141E-5	TEST
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999939838115376	WITHOUT_CLASSIFICATION	3.473924493542471E-6	DESIGN	1.7869475894511204E-6	IMPLEMENTATION	4.4423574043956665E-7	DOCUMENTATION	1.621191366636489E-7	TEST	1.4896150226593547E-7	DEFECT
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9993819760823416	WITHOUT_CLASSIFICATION	3.370165892486944E-4	DESIGN	1.777837671719037E-4	IMPLEMENTATION	5.699974508361006E-5	TEST	4.300024997733937E-5	DEFECT	3.2235661768271896E-6	DOCUMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.999996629904212	WITHOUT_CLASSIFICATION	1.677950324706009E-6	DESIGN	1.0755597103082055E-6	IMPLEMENTATION	4.7649032087975616E-7	DEFECT	7.68222709378092E-8	TEST	6.327316119897521E-8	DOCUMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.999984937345119	WITHOUT_CLASSIFICATION	1.1370057745886374E-5	DESIGN	1.5366509279146846E-6	DEFECT	1.0862665003726419E-6	IMPLEMENTATION	9.772706303514335E-7	TEST	9.240907652181198E-8	DOCUMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9979828371052437	WITHOUT_CLASSIFICATION	0.001936515427963711	IMPLEMENTATION	2.5491383578977446E-5	TEST	2.5432760611701975E-5	DEFECT	2.1065980611505566E-5	DESIGN	8.657341990286496E-6	DOCUMENTATION
// }	WITHOUT_CLASSIFICATION	0.9999939081791517	WITHOUT_CLASSIFICATION	1.7698198655193415E-6	DESIGN	1.1716265005535033E-6	DEFECT	1.1273062723249113E-6	DOCUMENTATION	1.1047693247406186E-6	TEST	9.182988852861427E-7	IMPLEMENTATION
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9998208931289008	WITHOUT_CLASSIFICATION	7.285957606705556E-5	IMPLEMENTATION	6.714575672556812E-5	DEFECT	3.420770994899911E-5	DESIGN	4.29844431180124E-6	DOCUMENTATION	5.953840456748518E-7	TEST
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9975648894580582	WITHOUT_CLASSIFICATION	0.0016286068808210332	IMPLEMENTATION	7.53445122659161E-4	DESIGN	4.745175486615233E-5	DEFECT	3.181768188121175E-6	TEST	2.4250154072822146E-6	DOCUMENTATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999533088674	WITHOUT_CLASSIFICATION	3.5151772120244343E-8	DESIGN	1.1027239533294582E-8	TEST	2.895126798357894E-10	DEFECT	1.9099753607932048E-10	DOCUMENTATION	3.1610798014220524E-11	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9975648894580582	WITHOUT_CLASSIFICATION	0.0016286068808210332	IMPLEMENTATION	7.53445122659161E-4	DESIGN	4.745175486615233E-5	DEFECT	3.181768188121175E-6	TEST	2.4250154072822146E-6	DOCUMENTATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999746152755865	WITHOUT_CLASSIFICATION	1.7784801295192557E-5	DEFECT	5.738675166360861E-6	IMPLEMENTATION	1.8217720227185118E-6	TEST	2.2895956043626423E-8	DOCUMENTATION	1.657997317117055E-8	DESIGN
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9997987077353254	WITHOUT_CLASSIFICATION	1.1509139879639901E-4	IMPLEMENTATION	4.061726499907311E-5	DESIGN	1.6576793253491412E-5	DOCUMENTATION	1.6549842004471938E-5	DEFECT	1.2456965621241794E-5	TEST
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999734184215061	WITHOUT_CLASSIFICATION	1.9451051700804178E-5	DEFECT	5.718298249262709E-6	TEST	1.1400176888418225E-6	IMPLEMENTATION	2.3358805321727493E-7	DESIGN	3.8622801654953576E-8	DOCUMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999896187647987	WITHOUT_CLASSIFICATION	8.753752263725842E-6	DESIGN	9.772091553572078E-7	TEST	2.4757597326329903E-7	DEFECT	2.0468436186836417E-7	IMPLEMENTATION	1.980134469672939E-7	DOCUMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9991398704387183	WITHOUT_CLASSIFICATION	8.490782337313258E-4	DESIGN	5.959594232107599E-6	TEST	2.0585153701165423E-6	DOCUMENTATION	1.9001676032371427E-6	DEFECT	1.1330503450726707E-6	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9998341156996022	WITHOUT_CLASSIFICATION	5.9609785850295866E-5	DESIGN	3.299349666132256E-5	DOCUMENTATION	3.1096899390066764E-5	TEST	2.4961134567884525E-5	DEFECT	1.7222983928164197E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9998341156996022	WITHOUT_CLASSIFICATION	5.9609785850295866E-5	DESIGN	3.299349666132256E-5	DOCUMENTATION	3.1096899390066764E-5	TEST	2.4961134567884525E-5	DEFECT	1.7222983928164197E-5	IMPLEMENTATION
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9998417457127102	WITHOUT_CLASSIFICATION	1.442687084194786E-4	DESIGN	8.306297342980167E-6	DEFECT	3.348085126861759E-6	IMPLEMENTATION	1.8117882990480136E-6	TEST	5.194081014356026E-7	DOCUMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9964201852260272	WITHOUT_CLASSIFICATION	0.003552876765815725	DESIGN	1.7684097183131113E-5	DEFECT	5.6821705846300684E-6	IMPLEMENTATION	2.2520216503779577E-6	TEST	1.3197187389121313E-6	DOCUMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999755666980219	WITHOUT_CLASSIFICATION	1.7000643462449014E-5	DESIGN	6.357221172133429E-6	IMPLEMENTATION	4.52200217622642E-7	DEFECT	4.385446706514528E-7	TEST	1.846924550944975E-7	DOCUMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999691671672746	WITHOUT_CLASSIFICATION	1.5099609014351743E-5	DEFECT	8.328743928186091E-6	DESIGN	3.571490766436835E-6	IMPLEMENTATION	2.9995768383053525E-6	DOCUMENTATION	8.334121781043827E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999370688942995	WITHOUT_CLASSIFICATION	2.924143709072016E-5	DOCUMENTATION	1.5208846935349075E-5	DESIGN	9.242184435410333E-6	IMPLEMENTATION	7.632607194206923E-6	DEFECT	1.6060300446261686E-6	TEST
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9126764163009975	WITHOUT_CLASSIFICATION	0.04826585638104738	IMPLEMENTATION	0.037397309983718555	DESIGN	0.001492209925304194	TEST	1.5241563485229395E-4	DOCUMENTATION	1.579177408012412E-5	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999977248207952	WITHOUT_CLASSIFICATION	1.5333957831136941E-6	IMPLEMENTATION	2.9571060794449645E-7	TEST	1.8297249285807166E-7	DOCUMENTATION	1.6193234588875324E-7	DEFECT	1.0116797498353445E-7	DESIGN
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999924208422479	WITHOUT_CLASSIFICATION	5.199695706881722E-6	DESIGN	1.0202348674235929E-6	DEFECT	7.175960039585094E-7	TEST	3.412949553345894E-7	DOCUMENTATION	3.0033621844500395E-7	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999923871753361	WITHOUT_CLASSIFICATION	3.7915654437113103E-6	DESIGN	1.1983066797791596E-6	TEST	1.0151761890320968E-6	DOCUMENTATION	9.620975298549746E-7	DEFECT	6.456788214861895E-7	IMPLEMENTATION
//columns	WITHOUT_CLASSIFICATION	0.9996168746730542	WITHOUT_CLASSIFICATION	3.336978564877953E-4	DESIGN	2.078008401186847E-5	DOCUMENTATION	1.1996824811443104E-5	DEFECT	8.447839927854533E-6	TEST	8.20272170682125E-6	IMPLEMENTATION
//SQL statements	WITHOUT_CLASSIFICATION	0.9999941555133218	WITHOUT_CLASSIFICATION	3.1445771586780785E-6	IMPLEMENTATION	1.3927327993108576E-6	DOCUMENTATION	6.546535153587643E-7	TEST	3.569888003257333E-7	DEFECT	2.955344043318701E-7	DESIGN
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999159710757225	WITHOUT_CLASSIFICATION	5.5169960933443114E-5	DESIGN	1.0936787849203304E-5	IMPLEMENTATION	1.0539674764762635E-5	DEFECT	5.148265514426569E-6	DOCUMENTATION	2.234235215614779E-6	TEST
//types	WITHOUT_CLASSIFICATION	0.9999186363255557	WITHOUT_CLASSIFICATION	3.4183601579399435E-5	IMPLEMENTATION	2.3132131797530292E-5	DESIGN	1.1640124042178319E-5	DOCUMENTATION	9.765046018845358E-6	TEST	2.6427710063994552E-6	DEFECT
// custom sql	WITHOUT_CLASSIFICATION	0.999998217652121	WITHOUT_CLASSIFICATION	6.174964409195232E-7	DESIGN	6.063172120221486E-7	DEFECT	2.1761420829184117E-7	DOCUMENTATION	2.0271049161997221E-7	TEST	1.3820952601970592E-7	IMPLEMENTATION
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9970040860855535	WITHOUT_CLASSIFICATION	0.0027463319400711284	DESIGN	2.251865647416845E-4	IMPLEMENTATION	1.4806033090801324E-5	DOCUMENTATION	6.7996483824132534E-6	DEFECT	2.789728160493904E-6	TEST
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9997541279218257	WITHOUT_CLASSIFICATION	2.4259134345416957E-4	DESIGN	1.5235732666262855E-6	DOCUMENTATION	1.1243034859623334E-6	IMPLEMENTATION	5.712093480696051E-7	DEFECT	6.164861963773453E-8	TEST
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999901403540645	WITHOUT_CLASSIFICATION	9.38619762479562E-6	DESIGN	2.6486223591496887E-7	IMPLEMENTATION	1.2236766461944718E-7	TEST	4.588258842551966E-8	DEFECT	4.0335821899300674E-8	DOCUMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998988084886568	WITHOUT_CLASSIFICATION	6.280260443113933E-5	IMPLEMENTATION	3.088970749129881E-5	DESIGN	3.983496524077686E-6	DEFECT	2.531544884921536E-6	DOCUMENTATION	9.841580119185067E-7	TEST
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9996237440702311	WITHOUT_CLASSIFICATION	2.5134233783584355E-4	DESIGN	9.342626972588435E-5	DEFECT	1.8899877778984772E-5	IMPLEMENTATION	9.403495292947379E-6	TEST	3.1839491352488E-6	DOCUMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.999859768484183	WITHOUT_CLASSIFICATION	5.669742222671791E-5	DESIGN	2.7437497913788533E-5	DEFECT	2.3344351717830593E-5	TEST	1.966572364520842E-5	DOCUMENTATION	1.3086520313306863E-5	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998836816819668	WITHOUT_CLASSIFICATION	9.29877121155643E-5	IMPLEMENTATION	1.7594229189670997E-5	DESIGN	3.0172124587027957E-6	DEFECT	2.231671743040273E-6	DOCUMENTATION	4.87492526120063E-7	TEST
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9998530601346721	WITHOUT_CLASSIFICATION	1.3621215094334978E-4	IMPLEMENTATION	3.5429511991320693E-6	DOCUMENTATION	3.091825147110878E-6	DEFECT	2.088235677457026E-6	TEST	2.004702360822762E-6	DESIGN
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9991324302683663	WITHOUT_CLASSIFICATION	3.382965034433081E-4	DESIGN	2.889626460779572E-4	DEFECT	2.171624314379855E-4	IMPLEMENTATION	1.2684453456226384E-5	DOCUMENTATION	1.0463697218206857E-5	TEST
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9992645725005547	WITHOUT_CLASSIFICATION	3.989792495545659E-4	IMPLEMENTATION	3.0195283099366247E-4	DESIGN	1.4304302203929084E-5	DEFECT	1.1385689817945165E-5	DOCUMENTATION	8.805426875181212E-6	TEST
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999055477269352	WITHOUT_CLASSIFICATION	6.553582067563261E-5	IMPLEMENTATION	1.5031233987604014E-5	DESIGN	9.75986986560586E-6	DEFECT	3.1458222666586254E-6	DOCUMENTATION	9.795262692973264E-7	TEST
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.999949937066313	WITHOUT_CLASSIFICATION	2.149654211491912E-5	DESIGN	1.1067251287456354E-5	DEFECT	6.867502868509249E-6	DOCUMENTATION	5.592891928345358E-6	TEST	5.038745487951203E-6	IMPLEMENTATION
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.999979980658299	WITHOUT_CLASSIFICATION	1.4252134923097294E-5	IMPLEMENTATION	5.34653909732509E-6	DESIGN	2.532107110362913E-7	DEFECT	1.459227110726697E-7	DOCUMENTATION	2.153425875418499E-8	TEST
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9980278585357919	WITHOUT_CLASSIFICATION	0.00153441102733119	IMPLEMENTATION	3.9198574271728315E-4	DESIGN	3.325911924733338E-5	DEFECT	7.450499711928915E-6	TEST	5.035075200290826E-6	DOCUMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9987628665843453	WITHOUT_CLASSIFICATION	0.00117851962478603	DESIGN	4.6735894803740956E-5	IMPLEMENTATION	9.66979483448303E-6	TEST	1.8746474803575319E-6	DOCUMENTATION	3.3345375007523427E-7	DEFECT
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9687071978240701	WITHOUT_CLASSIFICATION	0.02993412180926947	DESIGN	0.0012755182759227163	IMPLEMENTATION	7.376672030551196E-5	TEST	6.640957504892866E-6	DOCUMENTATION	2.7544129272541665E-6	DEFECT
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9923612335806576	WITHOUT_CLASSIFICATION	0.007573833703451887	DESIGN	3.4989564229782816E-5	IMPLEMENTATION	2.6493582390445513E-5	DEFECT	2.589308112331048E-6	TEST	8.602611580143955E-7	DOCUMENTATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9986181760895918	WITHOUT_CLASSIFICATION	0.0013505423477245184	DESIGN	1.4434682420788023E-5	TEST	1.433441685216626E-5	DEFECT	2.1541197947001675E-6	DOCUMENTATION	3.583436160084206E-7	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999977248207952	WITHOUT_CLASSIFICATION	1.5333957831136941E-6	IMPLEMENTATION	2.9571060794449645E-7	TEST	1.8297249285807166E-7	DOCUMENTATION	1.6193234588875324E-7	DEFECT	1.0116797498353445E-7	DESIGN
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999903895474799	WITHOUT_CLASSIFICATION	5.256648804808741E-6	IMPLEMENTATION	3.979429996859143E-6	DEFECT	2.2256351377912104E-7	DESIGN	8.296340260054798E-8	DOCUMENTATION	6.884680201455507E-8	TEST
//needed by arrays	WITHOUT_CLASSIFICATION	0.9979379855829325	WITHOUT_CLASSIFICATION	0.001766049946944828	IMPLEMENTATION	1.5846785939787575E-4	DESIGN	5.632301191069662E-5	DOCUMENTATION	4.7558388318859586E-5	DEFECT	3.361521049540312E-5	TEST
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9767534984354487	WITHOUT_CLASSIFICATION	0.010556704389554968	DESIGN	0.008835995766691062	IMPLEMENTATION	0.001744330935532885	DEFECT	0.0017287426155669489	TEST	3.8072785720529847E-4	DOCUMENTATION
//an assertion	WITHOUT_CLASSIFICATION	0.9999851212771225	WITHOUT_CLASSIFICATION	1.1906115734132866E-5	TEST	1.7537187069685095E-6	DEFECT	7.707019292070769E-7	DOCUMENTATION	2.393710504273381E-7	IMPLEMENTATION	2.0881545670991242E-7	DESIGN
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999653393827281	WITHOUT_CLASSIFICATION	3.166064918011459E-5	IMPLEMENTATION	2.416602575645074E-6	DESIGN	2.5761079520515547E-7	TEST	2.1751283464606123E-7	DOCUMENTATION	1.0824188615406038E-7	DEFECT
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999794241700338	WITHOUT_CLASSIFICATION	1.7715068871479526E-5	IMPLEMENTATION	1.0936763095479004E-6	DESIGN	1.003256756345466E-6	TEST	7.331070905921961E-7	DOCUMENTATION	3.072093825804701E-8	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999691671672746	WITHOUT_CLASSIFICATION	1.5099609014351743E-5	DEFECT	8.328743928186091E-6	DESIGN	3.571490766436835E-6	IMPLEMENTATION	2.9995768383053525E-6	DOCUMENTATION	8.334121781043827E-7	TEST
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999691671672746	WITHOUT_CLASSIFICATION	1.5099609014351743E-5	DEFECT	8.328743928186091E-6	DESIGN	3.571490766436835E-6	IMPLEMENTATION	2.9995768383053525E-6	DOCUMENTATION	8.334121781043827E-7	TEST
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9998729965061061	WITHOUT_CLASSIFICATION	1.1250205921072174E-4	IMPLEMENTATION	1.2197256989707508E-5	DESIGN	1.16194898867879E-6	DOCUMENTATION	8.6679231058055E-7	TEST	2.754363941909819E-7	DEFECT
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999349287344454	WITHOUT_CLASSIFICATION	5.9641118153610336E-5	IMPLEMENTATION	3.3776806497452648E-6	TEST	1.3534008269841173E-6	DESIGN	6.669922857270616E-7	DOCUMENTATION	3.207363844825526E-8	DEFECT
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999176762742805	WITHOUT_CLASSIFICATION	7.067682832465608E-5	DESIGN	6.834452632601807E-6	IMPLEMENTATION	3.576689845345999E-6	DOCUMENTATION	8.710962072841238E-7	TEST	3.646587095154651E-7	DEFECT
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9998904296596697	WITHOUT_CLASSIFICATION	1.0762809081755998E-4	IMPLEMENTATION	1.1966023173265536E-6	DESIGN	3.404952649153415E-7	DOCUMENTATION	2.6700466874872666E-7	DEFECT	1.3814726179544998E-7	TEST
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9961376136950896	WITHOUT_CLASSIFICATION	0.003456254007208267	IMPLEMENTATION	2.786122611983658E-4	DEFECT	1.1695720166947348E-4	DESIGN	8.42338118805764E-6	TEST	2.1394536463666575E-6	DOCUMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9998272806830143	WITHOUT_CLASSIFICATION	1.649839607830881E-4	DEFECT	4.516241445032272E-6	DESIGN	2.930867006729919E-6	IMPLEMENTATION	1.62934903132731E-7	TEST	1.2531284767669328E-7	DOCUMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9994028137300477	WITHOUT_CLASSIFICATION	5.212629863089809E-4	DEFECT	4.804068755972974E-5	IMPLEMENTATION	1.2008185574707032E-5	DOCUMENTATION	1.1229054918236314E-5	DESIGN	4.645355590535694E-6	TEST
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.999998653297983	WITHOUT_CLASSIFICATION	8.798884308240952E-7	IMPLEMENTATION	4.530381439012668E-7	DEFECT	7.134762105492641E-9	DESIGN	3.3629326020735835E-9	DOCUMENTATION	3.277747543618973E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9994079927582962	WITHOUT_CLASSIFICATION	5.258288846245998E-4	DESIGN	5.128513905105917E-5	IMPLEMENTATION	7.724999923862581E-6	DOCUMENTATION	5.897216672689633E-6	DEFECT	1.2710014317269321E-6	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999991290901856	WITHOUT_CLASSIFICATION	7.752641185568356E-7	DESIGN	5.102322367876356E-8	IMPLEMENTATION	3.660411855510074E-8	TEST	4.416948061515207E-9	DOCUMENTATION	3.6014055388052165E-9	DEFECT
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9995264140425082	WITHOUT_CLASSIFICATION	4.678021644483786E-4	DESIGN	2.0739798658290145E-6	IMPLEMENTATION	1.4052440501996315E-6	DEFECT	1.2620620558190943E-6	DOCUMENTATION	1.0425070714858802E-6	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9994374957645167	WITHOUT_CLASSIFICATION	3.478321194891618E-4	IMPLEMENTATION	7.72291643893434E-5	DEFECT	5.289052473653836E-5	DOCUMENTATION	4.316467234671545E-5	TEST	4.138775452165459E-5	DESIGN
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999872340117706	WITHOUT_CLASSIFICATION	5.810091014739269E-6	DESIGN	2.3638269441817585E-6	DOCUMENTATION	2.358920525188656E-6	DEFECT	1.4513986872855337E-6	TEST	7.817510580137441E-7	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999991290901856	WITHOUT_CLASSIFICATION	7.752641185568356E-7	DESIGN	5.102322367876356E-8	IMPLEMENTATION	3.660411855510074E-8	TEST	4.416948061515207E-9	DOCUMENTATION	3.6014055388052165E-9	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999967742352758	WITHOUT_CLASSIFICATION	1.1442945229107682E-6	DOCUMENTATION	8.079151446172175E-7	IMPLEMENTATION	6.551497892218372E-7	TEST	3.551512682794665E-7	DEFECT	2.632539990380478E-7	DESIGN
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9987153123833441	WITHOUT_CLASSIFICATION	9.85947466977704E-4	DESIGN	2.964232606618718E-4	IMPLEMENTATION	1.6867709124352109E-6	TEST	4.996425672441311E-7	DOCUMENTATION	1.3047553675271416E-7	DEFECT
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999796967909821	WITHOUT_CLASSIFICATION	1.611803814821489E-5	IMPLEMENTATION	1.3488303758365408E-6	TEST	1.225371531847677E-6	DOCUMENTATION	1.1821251182281821E-6	DEFECT	4.2884384367748865E-7	DESIGN
//TODO: check this....	WITHOUT_CLASSIFICATION	0.6997778198360458	WITHOUT_CLASSIFICATION	0.27071120402515136	IMPLEMENTATION	0.02095659117644972	DESIGN	0.005546832818905887	DOCUMENTATION	0.0023607400375947013	TEST	6.468121058524951E-4	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9994374957645167	WITHOUT_CLASSIFICATION	3.478321194891618E-4	IMPLEMENTATION	7.72291643893434E-5	DEFECT	5.289052473653836E-5	DOCUMENTATION	4.316467234671545E-5	TEST	4.138775452165459E-5	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999822574294468	WITHOUT_CLASSIFICATION	1.5916188495178716E-5	DESIGN	9.025350399610378E-7	DEFECT	8.062372979707148E-7	TEST	1.161541666777731E-7	DOCUMENTATION	1.4555533502991114E-9	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999981651665333	WITHOUT_CLASSIFICATION	9.797910593830154E-7	DEFECT	8.355674926525834E-7	DESIGN	9.401675976177623E-9	DOCUMENTATION	5.423688860405763E-9	TEST	4.649549982308936E-9	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999894165607555	WITHOUT_CLASSIFICATION	1.0345003290071481E-5	DESIGN	1.6769611504594983E-7	DEFECT	2.9746668347719964E-8	IMPLEMENTATION	2.1303898326272086E-8	TEST	1.968927273937235E-8	DOCUMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999945754461839	WITHOUT_CLASSIFICATION	5.3214521250871475E-6	DEFECT	1.00532114614567E-7	DESIGN	1.4644204708192087E-9	DOCUMENTATION	1.1012309157127112E-9	TEST	3.924938781926682E-12	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9997497942439509	WITHOUT_CLASSIFICATION	1.0087633927221562E-4	DESIGN	5.510173628558422E-5	IMPLEMENTATION	4.385766977639242E-5	DEFECT	3.186967548872907E-5	DOCUMENTATION	1.850033522618867E-5	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999962813167237	WITHOUT_CLASSIFICATION	1.8892985445854447E-6	DESIGN	7.879686810070216E-7	DEFECT	4.4917883258348447E-7	TEST	3.0773765638569105E-7	DOCUMENTATION	2.844995617780787E-7	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999997041574635	WITHOUT_CLASSIFICATION	1.5123964387978766E-7	DESIGN	1.375132051005362E-7	DEFECT	2.5708225660570137E-9	DOCUMENTATION	2.436515697758287E-9	IMPLEMENTATION	2.0823492313641325E-9	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999905022984876	WITHOUT_CLASSIFICATION	3.5488433742160788E-6	IMPLEMENTATION	2.217936096277431E-6	DESIGN	1.4667947000771553E-6	DEFECT	1.3113013163064796E-6	DOCUMENTATION	9.528260254576897E-7	TEST
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9958566673162699	WITHOUT_CLASSIFICATION	0.003884388214351346	DESIGN	2.069039618818219E-4	IMPLEMENTATION	2.6161681786038056E-5	DEFECT	1.696136512113615E-5	TEST	8.917460589722826E-6	DOCUMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9996958343795428	WITHOUT_CLASSIFICATION	2.59073033275103E-4	DESIGN	3.749806417445258E-5	IMPLEMENTATION	3.1290341960255787E-6	TEST	2.816130561651574E-6	DEFECT	1.6493582500560935E-6	DOCUMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999971283516216	WITHOUT_CLASSIFICATION	2.4278325060472363E-6	DESIGN	2.2456933559102394E-7	DEFECT	1.505785156756594E-7	IMPLEMENTATION	4.874723127280088E-8	DOCUMENTATION	1.992078993000749E-8	TEST
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.999911678296307	WITHOUT_CLASSIFICATION	7.548609720629964E-5	IMPLEMENTATION	8.963675464592217E-6	DESIGN	3.7633167400373006E-6	DOCUMENTATION	9.295315471049928E-8	DEFECT	1.5661127404033873E-8	TEST
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999991290901856	WITHOUT_CLASSIFICATION	7.752641185568356E-7	DESIGN	5.102322367876356E-8	IMPLEMENTATION	3.660411855510074E-8	TEST	4.416948061515207E-9	DOCUMENTATION	3.6014055388052165E-9	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999822574294468	WITHOUT_CLASSIFICATION	1.5916188495178716E-5	DESIGN	9.025350399610378E-7	DEFECT	8.062372979707148E-7	TEST	1.161541666777731E-7	DOCUMENTATION	1.4555533502991114E-9	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999894165607555	WITHOUT_CLASSIFICATION	1.0345003290071481E-5	DESIGN	1.6769611504594983E-7	DEFECT	2.9746668347719964E-8	IMPLEMENTATION	2.1303898326272086E-8	TEST	1.968927273937235E-8	DOCUMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999882869681994	WITHOUT_CLASSIFICATION	6.8786767858444485E-6	IMPLEMENTATION	2.0396772947330974E-6	DEFECT	1.0822447672974886E-6	DESIGN	1.030492603534842E-6	DOCUMENTATION	6.819403491843883E-7	TEST
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9909415254575663	WITHOUT_CLASSIFICATION	0.00791335176429169	DEFECT	8.928498876922742E-4	DESIGN	1.6733163428440373E-4	TEST	5.325601360712021E-5	IMPLEMENTATION	3.1685242558243645E-5	DOCUMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.999990398102166	WITHOUT_CLASSIFICATION	4.607502316241855E-6	DEFECT	3.7145816637333337E-6	DESIGN	6.358315966615357E-7	IMPLEMENTATION	3.8505195798703063E-7	DOCUMENTATION	2.589302995065821E-7	TEST
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9994374957645167	WITHOUT_CLASSIFICATION	3.478321194891618E-4	IMPLEMENTATION	7.72291643893434E-5	DEFECT	5.289052473653836E-5	DOCUMENTATION	4.316467234671545E-5	TEST	4.138775452165459E-5	DESIGN
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9996598401224667	WITHOUT_CLASSIFICATION	3.250231022544931E-4	DESIGN	7.362699599663301E-6	IMPLEMENTATION	3.83869216784968E-6	DEFECT	2.345467834266011E-6	DOCUMENTATION	1.589915677129206E-6	TEST
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999933371796267	WITHOUT_CLASSIFICATION	2.283218524379277E-6	DESIGN	1.4349470699762622E-6	IMPLEMENTATION	1.017116380069894E-6	TEST	9.687867559142919E-7	DOCUMENTATION	9.58751642923762E-7	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998991601507293	WITHOUT_CLASSIFICATION	7.456388253480148E-5	IMPLEMENTATION	7.740273010552859E-6	DEFECT	7.720734177546534E-6	DOCUMENTATION	6.691038325530262E-6	DESIGN	4.123921222221172E-6	TEST
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999901784277917	WITHOUT_CLASSIFICATION	4.160119311834365E-6	IMPLEMENTATION	1.652908137388332E-6	DESIGN	1.4336985985061021E-6	DOCUMENTATION	1.353998308545204E-6	DEFECT	1.220847852112589E-6	TEST
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999905022984876	WITHOUT_CLASSIFICATION	3.5488433742160788E-6	IMPLEMENTATION	2.217936096277431E-6	DESIGN	1.4667947000771553E-6	DEFECT	1.3113013163064796E-6	DOCUMENTATION	9.528260254576897E-7	TEST
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999967742352758	WITHOUT_CLASSIFICATION	1.1442945229107682E-6	DOCUMENTATION	8.079151446172175E-7	IMPLEMENTATION	6.551497892218372E-7	TEST	3.551512682794665E-7	DEFECT	2.632539990380478E-7	DESIGN
// JOINS	WITHOUT_CLASSIFICATION	0.9999907760768455	WITHOUT_CLASSIFICATION	3.85262218607099E-6	IMPLEMENTATION	1.7989408831681568E-6	DESIGN	1.6137516159391334E-6	DOCUMENTATION	1.0643763414386485E-6	TEST	8.942321276496092E-7	DEFECT
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999792207151746	WITHOUT_CLASSIFICATION	7.0386667415723355E-6	DEFECT	5.569268257590638E-6	IMPLEMENTATION	5.514325257586296E-6	DESIGN	1.344021147816117E-6	TEST	1.3130034209788549E-6	DOCUMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999844008245323	WITHOUT_CLASSIFICATION	1.2570361304762848E-5	DESIGN	9.416055321666466E-7	IMPLEMENTATION	8.658404155994996E-7	TEST	7.038243090205825E-7	DOCUMENTATION	5.175439062126591E-7	DEFECT
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9998010001343483	WITHOUT_CLASSIFICATION	1.407543320724907E-4	DESIGN	4.4217067586929767E-5	DEFECT	5.772940607730916E-6	DOCUMENTATION	4.925977438488238E-6	TEST	3.3295479460933177E-6	IMPLEMENTATION
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.5155751499944259	DESIGN	0.4793992453280614	WITHOUT_CLASSIFICATION	0.003811470069634022	IMPLEMENTATION	7.619822558344842E-4	DOCUMENTATION	3.402082102406251E-4	TEST	1.1194414180371535E-4	DEFECT
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.8734931868660484	WITHOUT_CLASSIFICATION	0.12576931445733353	DESIGN	3.2810052645255967E-4	IMPLEMENTATION	2.776185450468609E-4	DOCUMENTATION	7.431028123523874E-5	TEST	5.746932388341177E-5	DEFECT
//render the SQL	WITHOUT_CLASSIFICATION	0.9998977849664262	WITHOUT_CLASSIFICATION	5.393057123317435E-5	IMPLEMENTATION	2.9342081335842715E-5	DESIGN	9.844622578355981E-6	DOCUMENTATION	5.478900248838911E-6	TEST	3.6188581775779518E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999896187647987	WITHOUT_CLASSIFICATION	8.753752263725842E-6	DESIGN	9.772091553572078E-7	TEST	2.4757597326329903E-7	DEFECT	2.0468436186836417E-7	IMPLEMENTATION	1.980134469672939E-7	DOCUMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996560414122228	WITHOUT_CLASSIFICATION	3.327569322630348E-4	DESIGN	9.032168015846872E-6	IMPLEMENTATION	9.71801295373481E-7	TEST	6.27815282277141E-7	DEFECT	5.69870920827033E-7	DOCUMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999805682480623	WITHOUT_CLASSIFICATION	5.66130659067975E-6	IMPLEMENTATION	4.622049603472307E-6	DEFECT	3.1441336702575493E-6	DOCUMENTATION	3.0435866699880205E-6	DESIGN	2.960675403166546E-6	TEST
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999898463692773	WITHOUT_CLASSIFICATION	8.763152614061905E-6	IMPLEMENTATION	6.057605977324068E-7	DESIGN	5.821634392940579E-7	DEFECT	1.1110041643996187E-7	TEST	9.145365508011194E-8	DOCUMENTATION
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9998619491322913	WITHOUT_CLASSIFICATION	6.920475696287908E-5	DEFECT	6.037929293142762E-5	DESIGN	6.579048079857431E-6	TEST	1.8573290114450498E-6	DOCUMENTATION	3.044072298563006E-8	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999795770310252	WITHOUT_CLASSIFICATION	1.5700197547895067E-5	DESIGN	4.181545047370177E-6	DEFECT	2.522196709357648E-7	TEST	1.7684795370030094E-7	DOCUMENTATION	1.1215875487371721E-7	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9998325390793562	WITHOUT_CLASSIFICATION	1.6408208819548612E-4	DESIGN	1.5736024345936382E-6	DEFECT	9.778088790344403E-7	IMPLEMENTATION	4.619909393061437E-7	TEST	3.6543019546141763E-7	DOCUMENTATION
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999990189986897	WITHOUT_CLASSIFICATION	9.326460414326356E-7	DESIGN	1.960802565515153E-8	DEFECT	1.5932279069625188E-8	DOCUMENTATION	9.544377478773218E-9	TEST	3.2705865245656443E-9	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.9999993421125674	WITHOUT_CLASSIFICATION	1.8327612101116892E-7	IMPLEMENTATION	1.667852810789618E-7	DEFECT	1.0891818858837954E-7	DOCUMENTATION	1.0167365619496344E-7	DESIGN	9.723418555084954E-8	TEST
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999782769659569	WITHOUT_CLASSIFICATION	1.8262231721639526E-5	DESIGN	2.392750898277924E-6	IMPLEMENTATION	5.808742689794384E-7	DEFECT	2.451712901296581E-7	TEST	2.4200586400416323E-7	DOCUMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999901784277917	WITHOUT_CLASSIFICATION	4.160119311834365E-6	IMPLEMENTATION	1.652908137388332E-6	DESIGN	1.4336985985061021E-6	DOCUMENTATION	1.353998308545204E-6	DEFECT	1.220847852112589E-6	TEST
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999805682480623	WITHOUT_CLASSIFICATION	5.66130659067975E-6	IMPLEMENTATION	4.622049603472307E-6	DEFECT	3.1441336702575493E-6	DOCUMENTATION	3.0435866699880205E-6	DESIGN	2.960675403166546E-6	TEST
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999503258013475	WITHOUT_CLASSIFICATION	3.646773117996746E-5	IMPLEMENTATION	5.289601195045042E-6	DESIGN	2.8271415034556774E-6	DEFECT	2.7852021626067573E-6	TEST	2.304522611514837E-6	DOCUMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.9999905571279984	WITHOUT_CLASSIFICATION	3.899052560689589E-6	IMPLEMENTATION	1.7470407937565154E-6	DEFECT	1.3896592415434755E-6	DESIGN	1.2503969862256502E-6	DOCUMENTATION	1.1567224192563636E-6	TEST
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999594804490203	WITHOUT_CLASSIFICATION	1.2689648703694894E-5	IMPLEMENTATION	9.877821400103022E-6	DESIGN	8.121033510904667E-6	DEFECT	6.0385575380599505E-6	DOCUMENTATION	3.792489827062738E-6	TEST
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999941347370344	WITHOUT_CLASSIFICATION	3.918402567190521E-6	IMPLEMENTATION	6.858444480846727E-7	DOCUMENTATION	5.475751955685086E-7	TEST	3.634813015687883E-7	DESIGN	3.4995945328857377E-7	DEFECT
//before add :-)	WITHOUT_CLASSIFICATION	0.9999715020997592	WITHOUT_CLASSIFICATION	1.8770225910093927E-5	IMPLEMENTATION	6.047314374400948E-6	DEFECT	1.7442077565214347E-6	DOCUMENTATION	1.3513481438985528E-6	DESIGN	5.848040558938656E-7	TEST
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999789138877624	WITHOUT_CLASSIFICATION	2.04773928869539E-5	DESIGN	5.288866284416003E-7	IMPLEMENTATION	4.515426055152592E-8	TEST	2.7190528069017178E-8	DOCUMENTATION	7.487933706462467E-9	DEFECT
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999921246359401	WITHOUT_CLASSIFICATION	5.555736133211754E-6	DEFECT	1.633943006782974E-6	IMPLEMENTATION	2.590803386343414E-7	DESIGN	2.46466422435213E-7	DOCUMENTATION	1.8013815879584633E-7	TEST
//note early exit here:	WITHOUT_CLASSIFICATION	0.9976216570986527	WITHOUT_CLASSIFICATION	0.0011638592397354142	IMPLEMENTATION	9.440587459093079E-4	DEFECT	1.294547763661439E-4	TEST	1.1018680148174923E-4	DESIGN	3.078333785473569E-5	DOCUMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9998446443915397	WITHOUT_CLASSIFICATION	1.2667750047110237E-4	IMPLEMENTATION	2.4180001050446326E-5	DEFECT	1.628432721095611E-6	DESIGN	1.5032061743459967E-6	TEST	1.3664680434587636E-6	DOCUMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9998362138936533	WITHOUT_CLASSIFICATION	9.192212550095324E-5	DEFECT	5.6951374608348774E-5	TEST	1.2602618503001643E-5	DESIGN	1.254323165058552E-6	DOCUMENTATION	1.0556645692625442E-6	IMPLEMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999977503547528	WITHOUT_CLASSIFICATION	1.3285495898365946E-6	IMPLEMENTATION	3.460070267082295E-7	TEST	2.0629732337501128E-7	DESIGN	2.006804617781599E-7	DOCUMENTATION	1.6811084555841336E-7	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999988786938668	WITHOUT_CLASSIFICATION	9.238949594879408E-7	DEFECT	1.1057705309617305E-7	DESIGN	6.595020704347054E-8	TEST	1.1019637374633232E-8	DOCUMENTATION	9.864276212392329E-9	IMPLEMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9997299321156747	WITHOUT_CLASSIFICATION	1.901647875094547E-4	IMPLEMENTATION	6.883995043886275E-5	DESIGN	6.565433353422275E-6	TEST	3.7577441205682697E-6	DEFECT	7.399689031365111E-7	DOCUMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999177446946091	WITHOUT_CLASSIFICATION	4.0204893306093786E-5	IMPLEMENTATION	3.1875516134231595E-5	DESIGN	5.959931443491888E-6	DEFECT	3.117157613543449E-6	DOCUMENTATION	1.0978068934248338E-6	TEST
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999590883911074	WITHOUT_CLASSIFICATION	4.0197201707391974E-5	DESIGN	6.031989270065075E-7	DOCUMENTATION	8.456325207184508E-8	TEST	2.23760827532948E-8	IMPLEMENTATION	4.2689233225457435E-9	DEFECT
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999958051051431	WITHOUT_CLASSIFICATION	3.970267513636104E-6	DESIGN	1.7718199114682474E-7	IMPLEMENTATION	3.509422039657E-8	TEST	1.1211538134774013E-8	DOCUMENTATION	1.139593456378551E-9	DEFECT
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9917553134756306	WITHOUT_CLASSIFICATION	0.008221124249806921	DESIGN	1.128090942505588E-5	IMPLEMENTATION	5.670716376188823E-6	DOCUMENTATION	4.986807928041559E-6	DEFECT	1.6238408331878808E-6	TEST
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999773331388407	WITHOUT_CLASSIFICATION	1.1490494605715686E-5	DOCUMENTATION	5.954673900615454E-6	DESIGN	2.5118611974228937E-6	IMPLEMENTATION	2.470900083075831E-6	DEFECT	2.3893137235497863E-7	TEST
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999981479355274	WITHOUT_CLASSIFICATION	1.3173237957221285E-6	IMPLEMENTATION	3.0917628649359336E-7	DESIGN	1.0221878901650651E-7	DEFECT	6.47472158933833E-8	DOCUMENTATION	5.8598385511175013E-8	TEST
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9994134090258947	WITHOUT_CLASSIFICATION	5.521874612655604E-4	DESIGN	1.8790452050139198E-5	DEFECT	7.587238441540948E-6	DOCUMENTATION	4.422680921402216E-6	IMPLEMENTATION	3.6031414266678008E-6	TEST
// ALIASES	WITHOUT_CLASSIFICATION	0.9999862859361701	WITHOUT_CLASSIFICATION	4.385602214985298E-6	DEFECT	3.89205217486871E-6	IMPLEMENTATION	2.5402505290890114E-6	DESIGN	1.7066438459466697E-6	DOCUMENTATION	1.1895150649899937E-6	TEST
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999855603451526	WITHOUT_CLASSIFICATION	7.1714838257931735E-6	IMPLEMENTATION	6.279353842773062E-6	DESIGN	4.442209784724114E-7	TEST	2.924482038510616E-7	DEFECT	2.5214799647664294E-7	DOCUMENTATION
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999975971634473	WITHOUT_CLASSIFICATION	1.4261417636471162E-6	IMPLEMENTATION	8.348348811196411E-7	DESIGN	7.081924704838474E-8	DEFECT	5.457699687854164E-8	TEST	1.6463663949065705E-8	DOCUMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999910539999655	WITHOUT_CLASSIFICATION	7.337023024363111E-6	DESIGN	1.524612941170725E-6	DEFECT	3.4905799429832475E-8	DOCUMENTATION	2.9093408044509542E-8	IMPLEMENTATION	2.0364861632391264E-8	TEST
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999973631444944	WITHOUT_CLASSIFICATION	1.3760094281335863E-6	IMPLEMENTATION	8.72694490903095E-7	DESIGN	2.1150469518275553E-7	DEFECT	1.1096838881555439E-7	TEST	6.567850261944441E-8	DOCUMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.7120671813594945	WITHOUT_CLASSIFICATION	0.22164971828886815	IMPLEMENTATION	0.061201263131713944	DESIGN	0.003000346382227805	DEFECT	0.0017766557545386276	DOCUMENTATION	3.048350831568651E-4	TEST
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9998020777042367	WITHOUT_CLASSIFICATION	1.6848980375644749E-4	IMPLEMENTATION	2.3891943133980583E-5	DESIGN	3.1621233102372546E-6	DEFECT	1.3564674435559499E-6	TEST	1.0219581190320703E-6	DOCUMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9998177164176729	WITHOUT_CLASSIFICATION	1.4172891158870666E-4	IMPLEMENTATION	2.7806714824239566E-5	DEFECT	9.295600567740304E-6	TEST	2.479323390038922E-6	DESIGN	9.730319563841478E-7	DOCUMENTATION
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999913696245799	WITHOUT_CLASSIFICATION	6.227992483631628E-6	DEFECT	1.5362289380958714E-6	IMPLEMENTATION	4.874923950987492E-7	TEST	3.4032503093824394E-7	DESIGN	3.8336572483891325E-8	DOCUMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.5812792148111665	IMPLEMENTATION	0.2092559106697565	WITHOUT_CLASSIFICATION	0.11315748314007634	DEFECT	0.09378166837894292	DESIGN	0.0022669133047261885	DOCUMENTATION	2.5880969533165915E-4	TEST
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999934655640055	WITHOUT_CLASSIFICATION	6.407886765543274E-6	DEFECT	6.493184853583286E-8	DOCUMENTATION	2.7915377458057316E-8	DESIGN	2.3015698907809426E-8	TEST	1.0686304041342968E-8	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9996688730662407	WITHOUT_CLASSIFICATION	2.63340450281008E-4	DEFECT	4.24392996683852E-5	DESIGN	1.5171185892099524E-5	TEST	7.20752463955607E-6	DOCUMENTATION	2.968473278287645E-6	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9986050618927984	WITHOUT_CLASSIFICATION	0.0013710834400851378	DEFECT	1.6434795019111815E-5	IMPLEMENTATION	3.978224300801941E-6	DESIGN	2.6745045975184634E-6	DOCUMENTATION	7.671431990386442E-7	TEST
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.999968021850376	WITHOUT_CLASSIFICATION	2.4189655770923645E-5	DESIGN	7.088783293636865E-6	TEST	3.248265057307044E-7	IMPLEMENTATION	3.1753852569313825E-7	DEFECT	5.7345527888673386E-8	DOCUMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999937513131397	WITHOUT_CLASSIFICATION	3.0829715654966925E-6	DESIGN	2.83740751755768E-6	DEFECT	2.691373811289633E-7	TEST	3.2849644187653015E-8	IMPLEMENTATION	2.6320751706228987E-8	DOCUMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999957150236594	WITHOUT_CLASSIFICATION	3.613475004719558E-6	IMPLEMENTATION	5.240564598175344E-7	DEFECT	1.1240782583699759E-7	DOCUMENTATION	2.0758097080141676E-8	TEST	1.427895326491064E-8	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999995947458376	WITHOUT_CLASSIFICATION	2.778777738999667E-7	IMPLEMENTATION	6.824874711261114E-8	DOCUMENTATION	2.608361401372296E-8	DESIGN	2.120117818794364E-8	TEST	1.1842849217089555E-8	DEFECT
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9803488339464297	WITHOUT_CLASSIFICATION	0.019614522147547	DESIGN	2.743431882108158E-5	DOCUMENTATION	4.6810832819888896E-6	DEFECT	3.9404591871269915E-6	IMPLEMENTATION	5.88044733047986E-7	TEST
// add normal properties	WITHOUT_CLASSIFICATION	0.9999957150236594	WITHOUT_CLASSIFICATION	3.613475004719558E-6	IMPLEMENTATION	5.240564598175344E-7	DEFECT	1.1240782583699759E-7	DOCUMENTATION	2.0758097080141676E-8	TEST	1.427895326491064E-8	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999937513131397	WITHOUT_CLASSIFICATION	3.0829715654966925E-6	DESIGN	2.83740751755768E-6	DEFECT	2.691373811289633E-7	TEST	3.2849644187653015E-8	IMPLEMENTATION	2.6320751706228987E-8	DOCUMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999995947458376	WITHOUT_CLASSIFICATION	2.778777738999667E-7	IMPLEMENTATION	6.824874711261114E-8	DOCUMENTATION	2.608361401372296E-8	DESIGN	2.120117818794364E-8	TEST	1.1842849217089555E-8	DEFECT
// add the primary key	WITHOUT_CLASSIFICATION	0.9999920218409177	WITHOUT_CLASSIFICATION	7.604706707566945E-6	IMPLEMENTATION	2.8503473615446935E-7	DOCUMENTATION	5.169545067885689E-8	TEST	1.968021484527647E-8	DEFECT	1.7041972858185664E-8	DESIGN
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999811107053156	WITHOUT_CLASSIFICATION	1.8345534910030784E-5	DESIGN	1.854887115573545E-7	TEST	1.3158704357608672E-7	DOCUMENTATION	1.2522368815185256E-7	DEFECT	1.0146033104231689E-7	IMPLEMENTATION
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9993450947514165	WITHOUT_CLASSIFICATION	6.336246523945852E-4	DEFECT	1.0578203569095111E-5	DESIGN	1.04760364075342E-5	TEST	1.3904754255761955E-7	IMPLEMENTATION	8.730866987599238E-8	DOCUMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9998435698389319	WITHOUT_CLASSIFICATION	1.4021858075996898E-4	IMPLEMENTATION	5.913649143975038E-6	DESIGN	4.568417625494142E-6	DOCUMENTATION	3.6186486623290986E-6	DEFECT	2.110864876330554E-6	TEST
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999997382213103	WITHOUT_CLASSIFICATION	1.9068874402113084E-7	DEFECT	4.311163717536375E-8	DESIGN	2.6423029592299214E-8	DOCUMENTATION	8.695954238978721E-10	TEST	6.856835202091447E-10	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.6219372005148257	IMPLEMENTATION	0.27692200194469124	DESIGN	0.04700331610586729	DEFECT	0.04626727941211902	WITHOUT_CLASSIFICATION	0.007150509286633732	TEST	7.196927358629672E-4	DOCUMENTATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9837987526175705	WITHOUT_CLASSIFICATION	0.013173811053314827	DEFECT	0.0026344109555592227	IMPLEMENTATION	2.988877315953963E-4	DESIGN	7.998970297114571E-5	TEST	1.4147938988712014E-5	DOCUMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9447955407926917	WITHOUT_CLASSIFICATION	0.05479705500555865	DESIGN	2.7636044897345825E-4	IMPLEMENTATION	5.573461093472144E-5	DOCUMENTATION	4.1997750098716604E-5	DEFECT	3.331139174267053E-5	TEST
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.999987848298058	WITHOUT_CLASSIFICATION	8.17440067561628E-6	DESIGN	3.3268077368991206E-6	DEFECT	4.852144204473804E-7	IMPLEMENTATION	1.1657119815408316E-7	TEST	4.870791100403266E-8	DOCUMENTATION
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9997857419090667	WITHOUT_CLASSIFICATION	1.2161522463710683E-4	DESIGN	8.553446888980173E-5	DEFECT	4.317438945852754E-6	IMPLEMENTATION	2.2370630486420704E-6	TEST	5.538954117302825E-7	DOCUMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.9999790776163139	WITHOUT_CLASSIFICATION	1.8849935748345707E-5	DEFECT	6.291186330973501E-7	IMPLEMENTATION	5.238706295570558E-7	DESIGN	4.855266229161712E-7	TEST	4.339320521820919E-7	DOCUMENTATION
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999851072278201	WITHOUT_CLASSIFICATION	7.274070060959671E-6	DEFECT	4.2377022235474546E-6	IMPLEMENTATION	1.467082388294975E-6	DESIGN	9.76322689542515E-7	DOCUMENTATION	9.375948175580461E-7	TEST
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9988586602517565	WITHOUT_CLASSIFICATION	9.46172710315237E-4	IMPLEMENTATION	1.682945113631964E-4	DESIGN	2.2510813919812505E-5	DEFECT	2.800185055541775E-6	DOCUMENTATION	1.5615275896713304E-6	TEST
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9994620658433243	WITHOUT_CLASSIFICATION	4.5890084843304587E-4	IMPLEMENTATION	3.395282161124917E-5	DESIGN	2.643795123333362E-5	DOCUMENTATION	9.98787616690887E-6	TEST	8.654659231114325E-6	DEFECT
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999340399659735	WITHOUT_CLASSIFICATION	5.9383957862827484E-5	IMPLEMENTATION	2.9431661180954464E-6	DOCUMENTATION	2.662337213748022E-6	DEFECT	5.096545928940716E-7	DESIGN	4.60918238832916E-7	TEST
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999994846010563	WITHOUT_CLASSIFICATION	3.232446574387358E-7	DEFECT	1.2872382345819723E-7	IMPLEMENTATION	2.783480420394686E-8	DOCUMENTATION	1.8041283595286963E-8	DESIGN	1.7554375009435133E-8	TEST
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999052951215551	WITHOUT_CLASSIFICATION	6.690706957587397E-5	DEFECT	2.6699095961153848E-5	DESIGN	7.254300586993723E-7	DOCUMENTATION	2.6820759125941373E-7	TEST	1.050752578993151E-7	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999998901711761	WITHOUT_CLASSIFICATION	6.099502044683983E-8	DEFECT	2.5123613921125E-8	DESIGN	2.2378519373950577E-8	IMPLEMENTATION	7.852466566931993E-10	TEST	5.464236001562052E-10	DOCUMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9982981753835432	WITHOUT_CLASSIFICATION	0.0016194546725852442	DESIGN	7.869855763048058E-5	DEFECT	3.3124418959643706E-6	DOCUMENTATION	2.8498314097091375E-7	TEST	7.396120401578731E-8	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999947236879304	WITHOUT_CLASSIFICATION	3.318534662353664E-6	IMPLEMENTATION	1.1576489107665611E-6	DOCUMENTATION	5.335916644370483E-7	DESIGN	2.4083084291762796E-7	TEST	2.570598892896345E-8	DEFECT
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.6523717735423501	WITHOUT_CLASSIFICATION	0.3464695143675441	IMPLEMENTATION	5.714749165911956E-4	DESIGN	4.0879555769121926E-4	DEFECT	1.2134644947026363E-4	DOCUMENTATION	5.7095166352943466E-5	TEST
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999997947269629	WITHOUT_CLASSIFICATION	1.1515139620686632E-7	DEFECT	4.6826064381724125E-8	IMPLEMENTATION	3.978348600449159E-8	DOCUMENTATION	2.6167850054301604E-9	DESIGN	8.95305641982983E-10	TEST
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999674999254998	WITHOUT_CLASSIFICATION	1.4743879209840685E-5	DEFECT	8.08113870514023E-6	IMPLEMENTATION	6.040827908169205E-6	TEST	2.5792768994667166E-6	DESIGN	1.0549517774715527E-6	DOCUMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.999999052117814	WITHOUT_CLASSIFICATION	5.549850710350439E-7	DEFECT	2.932770642438205E-7	IMPLEMENTATION	3.8286452159618874E-8	DESIGN	3.356669484284602E-8	DOCUMENTATION	2.776690358845295E-8	TEST
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999829429081911	WITHOUT_CLASSIFICATION	9.942341297817633E-6	DESIGN	3.2488706595265948E-6	DOCUMENTATION	2.780702090015223E-6	IMPLEMENTATION	1.0628104483604265E-6	TEST	2.2367313173270835E-8	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999829429081911	WITHOUT_CLASSIFICATION	9.942341297817633E-6	DESIGN	3.2488706595265948E-6	DOCUMENTATION	2.780702090015223E-6	IMPLEMENTATION	1.0628104483604265E-6	TEST	2.2367313173270835E-8	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999269397797	WITHOUT_CLASSIFICATION	2.3147500521182257E-8	DEFECT	2.097424654726819E-8	DESIGN	1.512734393184071E-8	DOCUMENTATION	1.2032496401887218E-8	IMPLEMENTATION	1.7786329622704427E-9	TEST
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999269397797	WITHOUT_CLASSIFICATION	2.3147500521182257E-8	DEFECT	2.097424654726819E-8	DESIGN	1.512734393184071E-8	DOCUMENTATION	1.2032496401887218E-8	IMPLEMENTATION	1.7786329622704427E-9	TEST
// not supported	WITHOUT_CLASSIFICATION	0.9947737825105323	WITHOUT_CLASSIFICATION	0.004745251778768911	IMPLEMENTATION	2.8053813709280487E-4	DEFECT	1.6407919925315957E-4	DESIGN	2.329037410585703E-5	TEST	1.3058000246999413E-5	DOCUMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999052951215551	WITHOUT_CLASSIFICATION	6.690706957587397E-5	DEFECT	2.6699095961153848E-5	DESIGN	7.254300586993723E-7	DOCUMENTATION	2.6820759125941373E-7	TEST	1.050752578993151E-7	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999694727350015	WITHOUT_CLASSIFICATION	1.8825984275342166E-5	DOCUMENTATION	8.00603157483979E-6	DESIGN	2.568510952635661E-6	IMPLEMENTATION	7.933304060038499E-7	DEFECT	3.3340778975589373E-7	TEST
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999992457522208	WITHOUT_CLASSIFICATION	7.080772073454992E-7	IMPLEMENTATION	2.553011249797761E-8	DESIGN	9.362373271043705E-9	DOCUMENTATION	7.610993880665542E-9	DEFECT	3.6670921681103997E-9	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.999952465878716	WITHOUT_CLASSIFICATION	1.7921368998535283E-5	DESIGN	1.4191690657741959E-5	IMPLEMENTATION	1.1087592515199821E-5	DOCUMENTATION	3.0518711367074346E-6	DEFECT	1.2815979758484506E-6	TEST
//just a performance opt!	WITHOUT_CLASSIFICATION	0.999952465878716	WITHOUT_CLASSIFICATION	1.7921368998535283E-5	DESIGN	1.4191690657741959E-5	IMPLEMENTATION	1.1087592515199821E-5	DOCUMENTATION	3.0518711367074346E-6	DEFECT	1.2815979758484506E-6	TEST
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999560328603225	WITHOUT_CLASSIFICATION	3.873975807641768E-5	IMPLEMENTATION	3.2659298202522025E-6	DEFECT	1.0294667849655524E-6	DESIGN	6.345322288084991E-7	DOCUMENTATION	2.9745276703251335E-7	TEST
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999947656886269	WITHOUT_CLASSIFICATION	2.2536469347408465E-6	DEFECT	1.4126344585898819E-6	IMPLEMENTATION	1.195207513688974E-6	TEST	2.680786760827535E-7	DESIGN	1.0474379012779008E-7	DOCUMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9997900522461904	WITHOUT_CLASSIFICATION	2.08589441749612E-4	DESIGN	1.3134922464805875E-6	DEFECT	2.084805191267854E-8	TEST	1.5644592383533965E-8	DOCUMENTATION	8.32716914385987E-9	IMPLEMENTATION
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999950817779101	WITHOUT_CLASSIFICATION	4.378250873683805E-6	IMPLEMENTATION	3.05314247407699E-7	TEST	1.0147439923439944E-7	DEFECT	9.553953014321168E-8	DOCUMENTATION	3.764303942918121E-8	DESIGN
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9541819854409418	WITHOUT_CLASSIFICATION	0.032984992839104034	DESIGN	0.01162740068399976	DEFECT	0.0011208202044515525	IMPLEMENTATION	6.217572243282276E-5	TEST	2.2625109070084986E-5	DOCUMENTATION
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.995118278347891	WITHOUT_CLASSIFICATION	0.004775501518514964	DEFECT	7.338602385424015E-5	IMPLEMENTATION	3.24518208308666E-5	DESIGN	2.5310639310802255E-7	DOCUMENTATION	1.2918251589758508E-7	TEST
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9998518342831313	WITHOUT_CLASSIFICATION	1.1581017258997613E-4	DESIGN	1.68010079439511E-5	IMPLEMENTATION	8.244296415052078E-6	DEFECT	4.465211139220216E-6	DOCUMENTATION	2.8450287805178858E-6	TEST
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9985586842071001	WITHOUT_CLASSIFICATION	0.0014390921241051419	DESIGN	1.4016977731398559E-6	TEST	5.327557164478186E-7	IMPLEMENTATION	1.7538660920558598E-7	DOCUMENTATION	1.1382869586142038E-7	DEFECT
//now render the joins	WITHOUT_CLASSIFICATION	0.9998700544419473	WITHOUT_CLASSIFICATION	9.833843344180981E-5	IMPLEMENTATION	2.2616002387727272E-5	DESIGN	4.0550412760953415E-6	DOCUMENTATION	2.6919249367570355E-6	DEFECT	2.2441560103833658E-6	TEST
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999878828921067	WITHOUT_CLASSIFICATION	6.573792446874489E-6	IMPLEMENTATION	2.658477036546809E-6	DEFECT	1.6498430701189667E-6	DESIGN	9.782611090040576E-7	DOCUMENTATION	2.56734230792258E-7	TEST
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999961582300471	WITHOUT_CLASSIFICATION	2.1562166881468986E-6	IMPLEMENTATION	1.0325856237402815E-6	DESIGN	3.272352895156535E-7	DEFECT	2.1152978047150667E-7	TEST	1.1420257111369236E-7	DOCUMENTATION
//now tie it all together	WITHOUT_CLASSIFICATION	0.999514174341484	WITHOUT_CLASSIFICATION	4.6689001006712164E-4	IMPLEMENTATION	1.4022089957459366E-5	DESIGN	3.183041477345891E-6	TEST	8.902109580043467E-7	DOCUMENTATION	8.403060560251829E-7	DEFECT
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999991730236111	WITHOUT_CLASSIFICATION	3.5725839731107123E-7	DEFECT	2.78426740125736E-7	DESIGN	6.808593307294623E-8	TEST	6.291381989339546E-8	IMPLEMENTATION	6.029149849188357E-8	DOCUMENTATION
//select SQL	WITHOUT_CLASSIFICATION	0.9999959951244569	WITHOUT_CLASSIFICATION	2.1729679779423923E-6	IMPLEMENTATION	7.219623646836318E-7	TEST	4.6837348487349176E-7	DESIGN	3.5496407909397547E-7	DOCUMENTATION	2.8660763646797035E-7	DEFECT
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9996678918843309	WITHOUT_CLASSIFICATION	3.243384345099312E-4	IMPLEMENTATION	3.914793703877274E-6	DOCUMENTATION	1.4824088815648688E-6	TEST	1.420198998391861E-6	DEFECT	9.522795753490551E-7	DESIGN
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999777902590854	WITHOUT_CLASSIFICATION	1.5209603204561263E-5	DESIGN	6.240303181965895E-6	IMPLEMENTATION	6.073993326107894E-7	TEST	1.1877304037395008E-7	DOCUMENTATION	3.366215517725093E-8	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984088388512504	WITHOUT_CLASSIFICATION	0.001539620208391176	DESIGN	2.8442738581630662E-5	IMPLEMENTATION	8.61733168838834E-6	DOCUMENTATION	7.710110821733354E-6	TEST	6.770759266553057E-6	DEFECT
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999939793891505	WITHOUT_CLASSIFICATION	3.1062467418092142E-6	DESIGN	1.5598880415393385E-6	IMPLEMENTATION	1.0988374232426528E-6	DEFECT	2.2195573976023133E-7	DOCUMENTATION	3.36829033498676E-8	TEST
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9993521483397552	WITHOUT_CLASSIFICATION	5.274608074427771E-4	DEFECT	6.261326579276684E-5	DESIGN	5.3775897538703955E-5	IMPLEMENTATION	2.951732084082986E-6	TEST	1.0499573864803326E-6	DOCUMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999987208397011	WITHOUT_CLASSIFICATION	1.236504574622288E-6	DESIGN	2.252864453150771E-8	IMPLEMENTATION	1.4887197184843281E-8	TEST	2.9078234359834144E-9	DOCUMENTATION	2.332059149411326E-9	DEFECT
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9992667780766186	WITHOUT_CLASSIFICATION	7.316658988345642E-4	IMPLEMENTATION	1.1140626144406174E-6	DESIGN	3.085386937026225E-7	DEFECT	9.88281903799924E-8	DOCUMENTATION	3.4595048321661E-8	TEST
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999477370193202	WITHOUT_CLASSIFICATION	4.9125989538038615E-5	DESIGN	2.5570132261886594E-6	TEST	4.4195600270007466E-7	DEFECT	7.073055776148001E-8	IMPLEMENTATION	6.729135512971204E-8	DOCUMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999793334993192	WITHOUT_CLASSIFICATION	2.0371995026897945E-5	IMPLEMENTATION	1.7646891659299427E-7	DOCUMENTATION	7.793932543194375E-8	DESIGN	2.163577344200313E-8	DEFECT	1.8461638392074605E-8	TEST
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999233090082892	WITHOUT_CLASSIFICATION	6.904117052751118E-5	DESIGN	4.130608348154911E-6	DEFECT	2.3418826820603075E-6	IMPLEMENTATION	6.337429779104985E-7	DOCUMENTATION	5.435871752393514E-7	TEST
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999227767335308	WITHOUT_CLASSIFICATION	1.84400314390861E-5	DOCUMENTATION	1.7546467016277187E-5	TEST	1.728892098211053E-5	IMPLEMENTATION	1.2504246436311495E-5	DEFECT	1.144360059549775E-5	DESIGN
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999396503173106	WITHOUT_CLASSIFICATION	5.113284517729974E-5	DESIGN	7.87515126208653E-6	IMPLEMENTATION	5.973738016685553E-7	DOCUMENTATION	4.5158024178838624E-7	TEST	2.927322066833394E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999805682480623	WITHOUT_CLASSIFICATION	5.66130659067975E-6	IMPLEMENTATION	4.622049603472307E-6	DEFECT	3.1441336702575493E-6	DOCUMENTATION	3.0435866699880205E-6	DESIGN	2.960675403166546E-6	TEST
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999988786938668	WITHOUT_CLASSIFICATION	9.238949594879408E-7	DEFECT	1.1057705309617305E-7	DESIGN	6.595020704347054E-8	TEST	1.1019637374633232E-8	DOCUMENTATION	9.864276212392329E-9	IMPLEMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999856199391068	WITHOUT_CLASSIFICATION	6.994093820626877E-6	DESIGN	5.625966991864316E-6	DEFECT	1.0498857050400854E-6	DOCUMENTATION	5.657221165339836E-7	TEST	1.443922591590715E-7	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999954468464095	WITHOUT_CLASSIFICATION	2.8303549290361238E-6	DEFECT	1.154656721190001E-6	DESIGN	3.479840252443799E-7	IMPLEMENTATION	1.6471952419586285E-7	TEST	5.543839070077227E-8	DOCUMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999567150413267	WITHOUT_CLASSIFICATION	1.7104848230198666E-5	DESIGN	1.19505235459898E-5	IMPLEMENTATION	4.991505949700126E-6	DEFECT	4.942676562114176E-6	TEST	4.295404385316434E-6	DOCUMENTATION
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999895423145051	WITHOUT_CLASSIFICATION	4.685597346452644E-6	IMPLEMENTATION	3.142231495462086E-6	DESIGN	1.714538479817914E-6	DEFECT	5.774742956283432E-7	TEST	3.3784387744321147E-7	DOCUMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999419443154406	WITHOUT_CLASSIFICATION	2.33930176396713E-5	DEFECT	2.297116021491286E-5	DESIGN	6.75727282002861E-6	DOCUMENTATION	2.94198708084414E-6	IMPLEMENTATION	1.9922468040458924E-6	TEST
//cannot occur	WITHOUT_CLASSIFICATION	0.9999419443154406	WITHOUT_CLASSIFICATION	2.33930176396713E-5	DEFECT	2.297116021491286E-5	DESIGN	6.75727282002861E-6	DOCUMENTATION	2.94198708084414E-6	IMPLEMENTATION	1.9922468040458924E-6	TEST
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9975082015174881	WITHOUT_CLASSIFICATION	0.0024779479288957714	DESIGN	6.6381314488900865E-6	TEST	5.416657894101726E-6	IMPLEMENTATION	1.1222853604088066E-6	DEFECT	6.734789124806532E-7	DOCUMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.9999931265502231	WITHOUT_CLASSIFICATION	3.498631815405178E-6	IMPLEMENTATION	1.3973052444161012E-6	DEFECT	9.71069634343512E-7	DESIGN	5.75058662993182E-7	DOCUMENTATION	4.3138441965791413E-7	TEST
// do nothing...	WITHOUT_CLASSIFICATION	0.9999915721192738	WITHOUT_CLASSIFICATION	3.657852045332475E-6	DESIGN	1.445196191748927E-6	IMPLEMENTATION	1.2715323326224847E-6	DOCUMENTATION	1.1731040495495952E-6	TEST	8.801961068332153E-7	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9999915721192738	WITHOUT_CLASSIFICATION	3.657852045332475E-6	DESIGN	1.445196191748927E-6	IMPLEMENTATION	1.2715323326224847E-6	DOCUMENTATION	1.1731040495495952E-6	TEST	8.801961068332153E-7	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9959717723194171	WITHOUT_CLASSIFICATION	0.003006672987605735	DESIGN	7.810179499904469E-4	DEFECT	1.700870676724098E-4	IMPLEMENTATION	5.534269353490212E-5	TEST	1.510698177935572E-5	DOCUMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9993993656258544	WITHOUT_CLASSIFICATION	5.059720191676534E-4	DESIGN	4.2327562678688056E-5	DOCUMENTATION	3.5570598853366364E-5	IMPLEMENTATION	1.0654322379565864E-5	DEFECT	6.109871066318365E-6	TEST
// do not do anything	WITHOUT_CLASSIFICATION	0.9999776477422108	WITHOUT_CLASSIFICATION	1.192013958965924E-5	IMPLEMENTATION	4.419898285053496E-6	DEFECT	3.6746851072780204E-6	TEST	1.5135751057035583E-6	DOCUMENTATION	8.239597014264063E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999964936313608	WITHOUT_CLASSIFICATION	1.280804084814178E-6	DEFECT	9.190653780455359E-7	DESIGN	6.928963260542798E-7	IMPLEMENTATION	4.038019667626665E-7	DOCUMENTATION	2.0980088342161424E-7	TEST
//cant instantiate	WITHOUT_CLASSIFICATION	0.9989554365585758	WITHOUT_CLASSIFICATION	9.380348708076521E-4	DESIGN	3.699083307403868E-5	IMPLEMENTATION	2.7473472943504776E-5	DEFECT	2.304428281342763E-5	TEST	1.9019981785631565E-5	DOCUMENTATION
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999918067030412	WITHOUT_CLASSIFICATION	3.7024902509699486E-6	DEFECT	3.0003058052652756E-6	DESIGN	1.1871594039568839E-6	TEST	1.6277143510905347E-7	IMPLEMENTATION	1.405700634970984E-7	DOCUMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.9998901765263518	WITHOUT_CLASSIFICATION	1.0027007033943834E-4	IMPLEMENTATION	5.060747396913489E-6	DESIGN	2.121596853690232E-6	TEST	1.5525878702923666E-6	DEFECT	8.184711878194274E-7	DOCUMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999906170172752	WITHOUT_CLASSIFICATION	7.203855378821335E-6	IMPLEMENTATION	1.4276260917710257E-6	DESIGN	4.267848691652664E-7	DOCUMENTATION	2.931782198586342E-7	TEST	3.153816508056102E-8	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9997343804060613	WITHOUT_CLASSIFICATION	2.4369554045032026E-4	DESIGN	1.9101160002109278E-5	DEFECT	1.3827574472182463E-6	DOCUMENTATION	8.515030366766838E-7	IMPLEMENTATION	5.886330024492203E-7	TEST
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9997343804060613	WITHOUT_CLASSIFICATION	2.4369554045032026E-4	DESIGN	1.9101160002109278E-5	DEFECT	1.3827574472182463E-6	DOCUMENTATION	8.515030366766838E-7	IMPLEMENTATION	5.886330024492203E-7	TEST
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9998282378512738	WITHOUT_CLASSIFICATION	6.705668826321254E-5	DEFECT	6.336382998205628E-5	DESIGN	4.0727118028169525E-5	IMPLEMENTATION	5.55417713742316E-7	DOCUMENTATION	5.909473907697985E-8	TEST
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999994884785016	WITHOUT_CLASSIFICATION	2.93746764788781E-7	IMPLEMENTATION	9.593236584990047E-8	DEFECT	9.442860154225411E-8	TEST	1.5570871565705012E-8	DOCUMENTATION	1.1842894703294665E-8	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999994884785016	WITHOUT_CLASSIFICATION	2.93746764788781E-7	IMPLEMENTATION	9.593236584990047E-8	DEFECT	9.442860154225411E-8	TEST	1.5570871565705012E-8	DOCUMENTATION	1.1842894703294665E-8	DESIGN
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9998331161399613	WITHOUT_CLASSIFICATION	1.6058283750886268E-4	DESIGN	5.097453903680387E-6	DEFECT	7.634909184414182E-7	DOCUMENTATION	2.482057386254517E-7	IMPLEMENTATION	1.918719690719596E-7	TEST
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999997460047099	WITHOUT_CLASSIFICATION	1.4959328326315736E-7	DESIGN	5.3748564102945566E-8	DOCUMENTATION	2.7686499520326183E-8	DEFECT	2.2827085225740376E-8	TEST	1.398581152535123E-10	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.997578599429515	WITHOUT_CLASSIFICATION	6.501575676307534E-4	DEFECT	5.922431657052281E-4	DESIGN	4.5633003567448096E-4	DOCUMENTATION	4.083896098986347E-4	IMPLEMENTATION	3.142801915757715E-4	TEST
// Get the caller	WITHOUT_CLASSIFICATION	0.9999975329258265	WITHOUT_CLASSIFICATION	2.2379634761073776E-6	IMPLEMENTATION	1.1755109574034494E-7	DESIGN	8.327461977743652E-8	TEST	1.581116804759119E-8	DOCUMENTATION	1.2473813796622765E-8	DEFECT
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999982279745178	WITHOUT_CLASSIFICATION	1.7195749391694126E-6	IMPLEMENTATION	2.4529170340947936E-8	DESIGN	1.4699391261099179E-8	TEST	1.0446495256777835E-8	DOCUMENTATION	2.7754862185433825E-9	DEFECT
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999998305911478	WITHOUT_CLASSIFICATION	8.147156311540945E-8	DESIGN	5.9993980275747E-8	DEFECT	1.4174702828738328E-8	IMPLEMENTATION	1.2578042120045917E-8	DOCUMENTATION	1.1905638106428367E-9	TEST
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999850174970585	WITHOUT_CLASSIFICATION	4.961431708960137E-6	TEST	4.553183751861483E-6	DOCUMENTATION	3.5011544539632593E-6	DESIGN	1.706950738060146E-6	IMPLEMENTATION	2.597822886618952E-7	DEFECT
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9997014307801948	WITHOUT_CLASSIFICATION	1.268130650494668E-4	DESIGN	9.696351517813613E-5	IMPLEMENTATION	6.849902730867982E-5	TEST	5.140011294215775E-6	DEFECT	1.1536009747799193E-6	DOCUMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999854603777429	WITHOUT_CLASSIFICATION	1.2360307818344402E-5	DESIGN	1.5093288340132847E-6	IMPLEMENTATION	4.5473250618382413E-7	DOCUMENTATION	1.1229996170258287E-7	DEFECT	1.0295313683332535E-7	TEST
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9849529866701744	WITHOUT_CLASSIFICATION	0.010815534198620752	DEFECT	0.0035034633767943484	DESIGN	6.345036748788104E-4	IMPLEMENTATION	6.18840944118589E-5	TEST	3.1627985120081545E-5	DOCUMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999969271646795	WITHOUT_CLASSIFICATION	2.492996125764623E-6	DESIGN	3.185842554189362E-7	IMPLEMENTATION	2.470266558047932E-7	DEFECT	8.545308575292728E-9	TEST	5.6829749013293584E-9	DOCUMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9998722059400795	WITHOUT_CLASSIFICATION	1.1774951301042327E-4	DESIGN	8.692351707217341E-6	IMPLEMENTATION	9.113669879623982E-7	DEFECT	4.0474138669202524E-7	DOCUMENTATION	3.608682822758324E-8	TEST
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998714752689979	WITHOUT_CLASSIFICATION	7.653520868709691E-5	DEFECT	2.909992367200348E-5	DESIGN	1.2071552617012406E-5	DOCUMENTATION	7.575577521032144E-6	TEST	3.2424685049198993E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998714752689979	WITHOUT_CLASSIFICATION	7.653520868709691E-5	DEFECT	2.909992367200348E-5	DESIGN	1.2071552617012406E-5	DOCUMENTATION	7.575577521032144E-6	TEST	3.2424685049198993E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998714752689979	WITHOUT_CLASSIFICATION	7.653520868709691E-5	DEFECT	2.909992367200348E-5	DESIGN	1.2071552617012406E-5	DOCUMENTATION	7.575577521032144E-6	TEST	3.2424685049198993E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998714752689979	WITHOUT_CLASSIFICATION	7.653520868709691E-5	DEFECT	2.909992367200348E-5	DESIGN	1.2071552617012406E-5	DOCUMENTATION	7.575577521032144E-6	TEST	3.2424685049198993E-6	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999965139286996	WITHOUT_CLASSIFICATION	1.672553593746295E-6	DEFECT	1.5552214192951046E-6	IMPLEMENTATION	1.5188413929647687E-7	DOCUMENTATION	9.9381874233336E-8	TEST	7.030273891905636E-9	DESIGN
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999759877340106	WITHOUT_CLASSIFICATION	9.4600564020843E-6	DESIGN	7.707434408477397E-6	DEFECT	3.942157613503622E-6	TEST	2.8296298802971425E-6	IMPLEMENTATION	7.298768492642083E-8	DOCUMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999177853926731	WITHOUT_CLASSIFICATION	6.947817097300615E-5	IMPLEMENTATION	8.163681079704605E-6	DOCUMENTATION	2.070431031642386E-6	DEFECT	1.393982610612345E-6	DESIGN	1.108341632129692E-6	TEST
//for MySQL	WITHOUT_CLASSIFICATION	0.9998918374460067	WITHOUT_CLASSIFICATION	4.438989539298201E-5	DESIGN	3.9809542205378405E-5	DEFECT	1.1098713845273829E-5	IMPLEMENTATION	8.622276553476833E-6	DOCUMENTATION	4.242125996203283E-6	TEST
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999268187424016	WITHOUT_CLASSIFICATION	5.23175965389188E-5	IMPLEMENTATION	1.5926015413793027E-5	DESIGN	1.9316803042199747E-6	DOCUMENTATION	1.7246043327174759E-6	TEST	1.281361008832379E-6	DEFECT
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999881390744009	WITHOUT_CLASSIFICATION	9.281108616980913E-6	IMPLEMENTATION	8.517552829967805E-7	DOCUMENTATION	8.407490840006515E-7	DEFECT	7.308425078124101E-7	DESIGN	1.5647010729080331E-7	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9986516789934132	WITHOUT_CLASSIFICATION	0.0011729718643430907	DESIGN	8.954263502556767E-5	IMPLEMENTATION	4.855496646078607E-5	DOCUMENTATION	2.8591379952871772E-5	TEST	8.660160804398131E-6	DEFECT
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9998728821993458	WITHOUT_CLASSIFICATION	1.1948499420439516E-4	DESIGN	4.925778826771464E-6	DEFECT	2.4265564346255837E-6	TEST	1.9832965527579212E-7	IMPLEMENTATION	8.21415331843582E-8	DOCUMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9997482829253973	WITHOUT_CLASSIFICATION	2.015868972193527E-4	IMPLEMENTATION	1.695285537695249E-5	DOCUMENTATION	1.6833109590450094E-5	DEFECT	1.0918404899179722E-5	DESIGN	5.4258075166417456E-6	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9986516789934132	WITHOUT_CLASSIFICATION	0.0011729718643430907	DESIGN	8.954263502556767E-5	IMPLEMENTATION	4.855496646078607E-5	DOCUMENTATION	2.8591379952871772E-5	TEST	8.660160804398131E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9986516789934132	WITHOUT_CLASSIFICATION	0.0011729718643430907	DESIGN	8.954263502556767E-5	IMPLEMENTATION	4.855496646078607E-5	DOCUMENTATION	2.8591379952871772E-5	TEST	8.660160804398131E-6	DEFECT
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999952191601179	WITHOUT_CLASSIFICATION	4.739450883969517E-6	IMPLEMENTATION	1.413034382011044E-8	TEST	1.3997935920909528E-8	DEFECT	1.0576122673545827E-8	DOCUMENTATION	2.684595707532592E-9	DESIGN
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999906896329595	WITHOUT_CLASSIFICATION	3.686643243947609E-6	DOCUMENTATION	3.1861904694614535E-6	IMPLEMENTATION	1.4597015556587358E-6	DESIGN	6.301716776566885E-7	TEST	3.476600937855512E-7	DEFECT
// deprecated option...	WITHOUT_CLASSIFICATION	0.9997619702266887	WITHOUT_CLASSIFICATION	1.3329152207942557E-4	IMPLEMENTATION	9.45245277967883E-5	DESIGN	5.673173137774893E-6	DOCUMENTATION	2.3616634782734502E-6	TEST	2.1788868189886207E-6	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998791881509553	WITHOUT_CLASSIFICATION	1.0067450074729685E-4	DESIGN	1.733472688538989E-5	DEFECT	1.5512822489589993E-6	TEST	1.0282367349893745E-6	IMPLEMENTATION	2.231024281940178E-7	DOCUMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.8346672428400479	WITHOUT_CLASSIFICATION	0.16175752582689085	DESIGN	0.0034270833263556244	TEST	7.263138449035133E-5	DEFECT	5.131363791965354E-5	IMPLEMENTATION	2.4202984295479666E-5	DOCUMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999552342401263	WITHOUT_CLASSIFICATION	2.756741170452315E-5	DESIGN	1.3736296536603556E-5	IMPLEMENTATION	2.3654563314014328E-6	TEST	8.497863271180097E-7	DOCUMENTATION	2.4680897401637543E-7	DEFECT
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999871772923674	WITHOUT_CLASSIFICATION	9.413871501011717E-6	DESIGN	2.240047289452802E-6	IMPLEMENTATION	9.196442345591213E-7	TEST	1.5596633346402633E-7	DOCUMENTATION	9.317827413130808E-8	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998791881509553	WITHOUT_CLASSIFICATION	1.0067450074729685E-4	DESIGN	1.733472688538989E-5	DEFECT	1.5512822489589993E-6	TEST	1.0282367349893745E-6	IMPLEMENTATION	2.231024281940178E-7	DOCUMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.8919417949285131	WITHOUT_CLASSIFICATION	0.10718219238864896	DESIGN	4.2346409999276225E-4	TEST	3.1483749355438063E-4	DEFECT	8.171311447031789E-5	DOCUMENTATION	5.5997974820282675E-5	IMPLEMENTATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999371153302274	WITHOUT_CLASSIFICATION	2.624186478102713E-5	DESIGN	1.9426819708876483E-5	IMPLEMENTATION	1.5451806492329467E-5	DEFECT	1.693332532280097E-6	DOCUMENTATION	7.08462579960781E-8	TEST
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999969193917435	WITHOUT_CLASSIFICATION	2.6838972249987267E-6	IMPLEMENTATION	2.622389706833119E-7	DOCUMENTATION	4.6640649540408256E-8	DEFECT	4.5576582245229965E-8	TEST	4.2254829129081024E-8	DESIGN
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999900282026347	WITHOUT_CLASSIFICATION	5.3191967350589784E-6	DESIGN	2.387738208038483E-6	TEST	1.8425073933997974E-6	DEFECT	3.782223591453784E-7	DOCUMENTATION	4.413266970519891E-8	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9983845708523755	WITHOUT_CLASSIFICATION	0.0015662811418096835	DESIGN	4.106553599722437E-5	DEFECT	4.5746820358311915E-6	DOCUMENTATION	3.475964058239392E-6	TEST	3.182372356406375E-8	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999146461490364	WITHOUT_CLASSIFICATION	4.400819213302128E-5	DESIGN	2.6688789416023618E-5	IMPLEMENTATION	1.2659484774509005E-5	DEFECT	1.8933489268602922E-6	TEST	1.0403571318282485E-7	DOCUMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999795758405922	WITHOUT_CLASSIFICATION	1.9462165206750845E-5	IMPLEMENTATION	9.258174355128925E-7	DESIGN	2.639871396662108E-8	TEST	8.087015574040091E-9	DOCUMENTATION	1.6910359724132585E-9	DEFECT
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9987743933759493	WITHOUT_CLASSIFICATION	0.0011626244484043823	IMPLEMENTATION	4.2909995004407194E-5	DEFECT	8.168535385899321E-6	TEST	7.365764488846642E-6	DESIGN	4.537880767242882E-6	DOCUMENTATION
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999360626406192	WITHOUT_CLASSIFICATION	5.841668871802294E-5	IMPLEMENTATION	5.332115704567407E-6	DESIGN	9.674173848903307E-8	DEFECT	5.5281324103344314E-8	DOCUMENTATION	3.65318956669218E-8	TEST
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999953945460217	WITHOUT_CLASSIFICATION	3.808180324449522E-6	DESIGN	3.7855976316142845E-7	DEFECT	2.200187907222269E-7	IMPLEMENTATION	1.1497363942295466E-7	TEST	8.372146045158029E-8	DOCUMENTATION
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960837361808	WITHOUT_CLASSIFICATION	3.1049530953871725E-6	DESIGN	7.342386970351361E-7	IMPLEMENTATION	2.7391469181498965E-8	DEFECT	2.6728708266105773E-8	DOCUMENTATION	2.295184948272613E-8	TEST
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999802031546947	WITHOUT_CLASSIFICATION	1.6831778523124608E-5	DESIGN	1.7437586304949233E-6	DEFECT	6.419045945420393E-7	DOCUMENTATION	3.163259160603472E-7	IMPLEMENTATION	2.630776412564823E-7	TEST
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9994468459263609	WITHOUT_CLASSIFICATION	5.3815499279374E-4	DESIGN	8.723849628937959E-6	DEFECT	3.8107190543618894E-6	IMPLEMENTATION	1.6387580287069975E-6	TEST	8.257541332966542E-7	DOCUMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9508963683840693	WITHOUT_CLASSIFICATION	0.0444004107162339	DESIGN	0.0018414252837240929	IMPLEMENTATION	0.0016255919105565145	TEST	9.757830702689579E-4	DOCUMENTATION	2.60420635147331E-4	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999851248446627	WITHOUT_CLASSIFICATION	1.03709114396519E-5	IMPLEMENTATION	3.983973938585951E-6	DEFECT	2.919742935363277E-7	TEST	1.303336689428897E-7	DESIGN	9.796199672947872E-8	DOCUMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.5316478973715273	WITHOUT_CLASSIFICATION	0.46833374238492875	DESIGN	9.57743587030464E-6	DEFECT	4.648397779627508E-6	DOCUMENTATION	4.0088527189126285E-6	TEST	1.2555717515319233E-7	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999890825116496	WITHOUT_CLASSIFICATION	9.693882244639335E-6	DESIGN	9.300062179160004E-7	DEFECT	2.6433742491356344E-7	TEST	2.437743453769568E-8	DOCUMENTATION	4.885028345018827E-9	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999991641444573	WITHOUT_CLASSIFICATION	4.489282632318141E-6	DESIGN	2.1669138916658573E-6	IMPLEMENTATION	9.476518575639177E-7	DOCUMENTATION	4.465498636419759E-7	DEFECT	3.081571819434196E-7	TEST
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9997709974934742	WITHOUT_CLASSIFICATION	2.2640291856261175E-4	DESIGN	2.2583517642554577E-6	TEST	1.7658940850711158E-7	DEFECT	1.1314171034815718E-7	IMPLEMENTATION	5.1505080156818465E-8	DOCUMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999991641444573	WITHOUT_CLASSIFICATION	4.489282632318141E-6	DESIGN	2.1669138916658573E-6	IMPLEMENTATION	9.476518575639177E-7	DOCUMENTATION	4.465498636419759E-7	DEFECT	3.081571819434196E-7	TEST
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999976108445034	WITHOUT_CLASSIFICATION	1.0502433966995196E-6	DESIGN	7.436884263468073E-7	DEFECT	4.1318910374448583E-7	IMPLEMENTATION	9.556828212301985E-8	TEST	8.646628750509742E-8	DOCUMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999738605725642	WITHOUT_CLASSIFICATION	1.6171506990573314E-5	DESIGN	7.643479704102881E-6	DEFECT	2.037852019344396E-6	TEST	1.7417653607810353E-7	IMPLEMENTATION	1.1241218580594622E-7	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9978791838304502	WITHOUT_CLASSIFICATION	0.0021134697954531766	DESIGN	3.1414099656154717E-6	IMPLEMENTATION	2.8977762140697323E-6	DOCUMENTATION	9.238156640467594E-7	TEST	3.833722529326328E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999702186377748	WITHOUT_CLASSIFICATION	1.6328823705449135E-5	DEFECT	1.0659870150754421E-5	TEST	2.244464575186755E-6	DOCUMENTATION	4.821203128490323E-7	DESIGN	6.608348081101082E-8	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999890825116496	WITHOUT_CLASSIFICATION	9.693882244639335E-6	DESIGN	9.300062179160004E-7	DEFECT	2.6433742491356344E-7	TEST	2.437743453769568E-8	DOCUMENTATION	4.885028345018827E-9	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9997709974934742	WITHOUT_CLASSIFICATION	2.2640291856261175E-4	DESIGN	2.2583517642554577E-6	TEST	1.7658940850711158E-7	DEFECT	1.1314171034815718E-7	IMPLEMENTATION	5.1505080156818465E-8	DOCUMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999976108445034	WITHOUT_CLASSIFICATION	1.0502433966995196E-6	DESIGN	7.436884263468073E-7	DEFECT	4.1318910374448583E-7	IMPLEMENTATION	9.556828212301985E-8	TEST	8.646628750509742E-8	DOCUMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999721570528612	WITHOUT_CLASSIFICATION	1.697608730840122E-5	IMPLEMENTATION	8.196888561086501E-6	DESIGN	1.944439838357228E-6	TEST	3.744823353652323E-7	DOCUMENTATION	3.510490956516958E-7	DEFECT
//return currentId;	WITHOUT_CLASSIFICATION	0.9999207325959844	WITHOUT_CLASSIFICATION	4.608822145510749E-5	DESIGN	2.1274638552477147E-5	IMPLEMENTATION	6.138967670596222E-6	DOCUMENTATION	5.198035655628141E-6	DEFECT	5.675406818867364E-7	TEST
//reset the id	WITHOUT_CLASSIFICATION	0.9997558785633699	WITHOUT_CLASSIFICATION	2.2728162709142793E-4	IMPLEMENTATION	1.0601901431798034E-5	TEST	2.653140694435782E-6	DESIGN	2.1770228443959544E-6	DEFECT	1.4077445680628056E-6	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
//reset the version	WITHOUT_CLASSIFICATION	0.9998941035718523	WITHOUT_CLASSIFICATION	9.212416807521111E-5	IMPLEMENTATION	5.166948791763654E-6	DEFECT	3.886879528403991E-6	TEST	2.958935700287592E-6	DESIGN	1.7594960521734481E-6	DOCUMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9973320719031241	WITHOUT_CLASSIFICATION	0.0024994109423794276	DEFECT	8.914330112006523E-5	IMPLEMENTATION	7.687166502713612E-5	DESIGN	1.3662075636255187E-6	TEST	1.135980785564434E-6	DOCUMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999957536401127	WITHOUT_CLASSIFICATION	3.3643831998634036E-6	IMPLEMENTATION	4.2421880246240335E-7	DEFECT	2.363861911936346E-7	TEST	1.7175297720343207E-7	DOCUMENTATION	4.961871666002004E-8	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984088388512504	WITHOUT_CLASSIFICATION	0.001539620208391176	DESIGN	2.8442738581630662E-5	IMPLEMENTATION	8.61733168838834E-6	DOCUMENTATION	7.710110821733354E-6	TEST	6.770759266553057E-6	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999738605725642	WITHOUT_CLASSIFICATION	1.6171506990573314E-5	DESIGN	7.643479704102881E-6	DEFECT	2.037852019344396E-6	TEST	1.7417653607810353E-7	IMPLEMENTATION	1.1241218580594622E-7	DOCUMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9998839646056681	WITHOUT_CLASSIFICATION	1.1553211047300316E-4	DESIGN	4.809399478585148E-7	DEFECT	1.382334046197845E-8	DOCUMENTATION	4.505028124254632E-9	IMPLEMENTATION	4.015542323615956E-9	TEST
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9958849650720527	WITHOUT_CLASSIFICATION	0.004026550831899373	DEFECT	8.053873831925219E-5	DESIGN	3.865744423884594E-6	IMPLEMENTATION	2.5824629358010778E-6	DOCUMENTATION	1.4971503689383846E-6	TEST
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999386927899537	WITHOUT_CLASSIFICATION	6.0398742280101744E-5	DESIGN	3.2785448889691937E-7	DOCUMENTATION	2.3337362633622724E-7	DEFECT	2.045674110257124E-7	IMPLEMENTATION	1.4267223994944626E-7	TEST
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984088388512504	WITHOUT_CLASSIFICATION	0.001539620208391176	DESIGN	2.8442738581630662E-5	IMPLEMENTATION	8.61733168838834E-6	DOCUMENTATION	7.710110821733354E-6	TEST	6.770759266553057E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999805682480623	WITHOUT_CLASSIFICATION	5.66130659067975E-6	IMPLEMENTATION	4.622049603472307E-6	DEFECT	3.1441336702575493E-6	DOCUMENTATION	3.0435866699880205E-6	DESIGN	2.960675403166546E-6	TEST
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999566478949335	WITHOUT_CLASSIFICATION	3.840983988253698E-5	IMPLEMENTATION	2.754764227879475E-6	TEST	2.01482140805254E-6	DESIGN	1.4651793876269676E-7	DOCUMENTATION	2.6161609215480666E-8	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984088388512504	WITHOUT_CLASSIFICATION	0.001539620208391176	DESIGN	2.8442738581630662E-5	IMPLEMENTATION	8.61733168838834E-6	DOCUMENTATION	7.710110821733354E-6	TEST	6.770759266553057E-6	DEFECT
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.999993728605757	WITHOUT_CLASSIFICATION	3.759782257202409E-6	DESIGN	1.8180218919172284E-6	IMPLEMENTATION	4.081939508445903E-7	DOCUMENTATION	2.7160289406182016E-7	TEST	1.3793249049713007E-8	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999976990594215	WITHOUT_CLASSIFICATION	1.0720579139045844E-6	DEFECT	5.926939656249021E-7	IMPLEMENTATION	3.761585082361712E-7	TEST	2.3793274447098228E-7	DOCUMENTATION	2.2097446330308918E-8	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999805682480623	WITHOUT_CLASSIFICATION	5.66130659067975E-6	IMPLEMENTATION	4.622049603472307E-6	DEFECT	3.1441336702575493E-6	DOCUMENTATION	3.0435866699880205E-6	DESIGN	2.960675403166546E-6	TEST
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.999938217154416	WITHOUT_CLASSIFICATION	3.3557253494047555E-5	DEFECT	2.146211491872201E-5	DESIGN	4.880866849713256E-6	IMPLEMENTATION	1.2003758591707142E-6	DOCUMENTATION	6.822344623510454E-7	TEST
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999830466380357	WITHOUT_CLASSIFICATION	1.2147740549546658E-5	IMPLEMENTATION	2.9312616967087275E-6	DEFECT	9.528568241547869E-7	DESIGN	8.028436188221923E-7	TEST	1.1865927506326892E-7	DOCUMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999995892662781	WITHOUT_CLASSIFICATION	3.1601099310757026E-7	IMPLEMENTATION	4.199587585490542E-8	DESIGN	2.692315632786846E-8	DOCUMENTATION	1.9790356382885003E-8	TEST	6.013340190025598E-9	DEFECT
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999954037055186	WITHOUT_CLASSIFICATION	2.5934100677666705E-6	DESIGN	8.393891135568002E-7	DEFECT	5.227080814628946E-7	IMPLEMENTATION	3.9172532283203803E-7	TEST	2.490618956311274E-7	DOCUMENTATION
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999135139885165	WITHOUT_CLASSIFICATION	8.433867884674998E-5	DESIGN	1.1657392055982635E-6	TEST	7.052843192801111E-7	DOCUMENTATION	1.3886058415267514E-7	IMPLEMENTATION	1.3744852782587375E-7	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998020934548376	WITHOUT_CLASSIFICATION	1.775389314425589E-4	DESIGN	1.7861767551330014E-5	IMPLEMENTATION	1.4458541171764316E-6	DEFECT	8.900723897887617E-7	TEST	1.699196614478086E-7	DOCUMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999961938957282	WITHOUT_CLASSIFICATION	2.9257807247387325E-6	DESIGN	4.7204211693247897E-7	IMPLEMENTATION	1.6040954501078793E-7	DOCUMENTATION	1.503341220349989E-7	DEFECT	9.753776327807643E-8	TEST
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999740851662666	WITHOUT_CLASSIFICATION	1.5512766408240728E-5	DESIGN	3.52604790202156E-6	IMPLEMENTATION	2.898265997880682E-6	DOCUMENTATION	2.3042350408715896E-6	DEFECT	1.6735183843515607E-6	TEST
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999868849008968	WITHOUT_CLASSIFICATION	5.066471909090167E-5	DEFECT	4.401695374438339E-5	IMPLEMENTATION	1.5547753002717507E-5	DOCUMENTATION	1.1428759272447522E-5	DESIGN	9.492805921573136E-6	TEST
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999879302680591	WITHOUT_CLASSIFICATION	1.0525054101928465E-5	DESIGN	7.372201897993504E-7	DEFECT	5.894546288077558E-7	TEST	2.0127809758109522E-7	DOCUMENTATION	1.6724922802268716E-8	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.997578599429515	WITHOUT_CLASSIFICATION	6.501575676307534E-4	DEFECT	5.922431657052281E-4	DESIGN	4.5633003567448096E-4	DOCUMENTATION	4.083896098986347E-4	IMPLEMENTATION	3.142801915757715E-4	TEST
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999788558844598	WITHOUT_CLASSIFICATION	9.160408946824418E-6	DESIGN	4.639595476218428E-6	TEST	3.5860909013741427E-6	IMPLEMENTATION	2.516142447657407E-6	DOCUMENTATION	1.241877768016679E-6	DEFECT
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9985875109679196	WITHOUT_CLASSIFICATION	6.461117597043045E-4	DEFECT	5.942621125780116E-4	DESIGN	7.72786291671376E-5	DOCUMENTATION	5.088278181509597E-5	TEST	4.395374881584015E-5	IMPLEMENTATION
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999947641661078	WITHOUT_CLASSIFICATION	1.6172440588944457E-6	IMPLEMENTATION	1.4909600242507133E-6	DESIGN	1.2984458723769041E-6	TEST	6.837095569956102E-7	DEFECT	1.4547437966234392E-7	DOCUMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999933219832121	WITHOUT_CLASSIFICATION	2.2490304012479215E-6	IMPLEMENTATION	1.8004515373860651E-6	TEST	1.122029430612742E-6	DEFECT	8.934044909576311E-7	DOCUMENTATION	6.131009277493781E-7	DESIGN
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999979505075671	WITHOUT_CLASSIFICATION	1.8143739808037752E-6	DESIGN	1.8790133172022488E-7	DEFECT	2.343420287815541E-8	TEST	2.2254470317340708E-8	DOCUMENTATION	1.5284471453520493E-9	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999897857981525	WITHOUT_CLASSIFICATION	9.731833682078384E-6	DESIGN	3.671269704509427E-7	IMPLEMENTATION	5.964841721311578E-8	TEST	4.7328721383077434E-8	DEFECT	8.264056323295694E-9	DOCUMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9995910028896234	WITHOUT_CLASSIFICATION	3.3022619497330706E-4	IMPLEMENTATION	4.676987735141325E-5	DEFECT	3.0195363318779685E-5	DESIGN	1.5714949200046946E-6	TEST	2.3417981302491686E-7	DOCUMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9966101490437913	WITHOUT_CLASSIFICATION	0.0033231632171743944	DESIGN	4.604882650448854E-5	IMPLEMENTATION	1.2401722813964009E-5	TEST	4.868099413323352E-6	DOCUMENTATION	3.369090302671747E-6	DEFECT
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999996281030868	WITHOUT_CLASSIFICATION	3.518216404056978E-7	DEFECT	1.5775228290845727E-8	DESIGN	2.8187125563261723E-9	IMPLEMENTATION	1.0584629980357362E-9	DOCUMENTATION	4.228690126228542E-10	TEST
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9997805751883911	WITHOUT_CLASSIFICATION	2.189722422631289E-4	DESIGN	1.5851730693752191E-7	DOCUMENTATION	1.4110891636941633E-7	TEST	1.319325628156741E-7	IMPLEMENTATION	2.1010559485396287E-8	DEFECT
//TODO!!!	WITHOUT_CLASSIFICATION	0.9971985491380829	WITHOUT_CLASSIFICATION	7.383576289691456E-4	DEFECT	6.989097108684952E-4	DESIGN	6.213657361245655E-4	DOCUMENTATION	3.9699131472985814E-4	IMPLEMENTATION	3.4582647122510747E-4	TEST
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9994273084667447	WITHOUT_CLASSIFICATION	3.6819047462607787E-4	DEFECT	7.931224503234092E-5	DESIGN	7.210907290830614E-5	IMPLEMENTATION	3.417025825654026E-5	TEST	1.890948243211034E-5	DOCUMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9997640862033436	WITHOUT_CLASSIFICATION	1.3739631801972378E-4	DESIGN	6.602319630298622E-5	DEFECT	1.4992848699492896E-5	IMPLEMENTATION	1.0347162672904352E-5	DOCUMENTATION	7.154270961320737E-6	TEST
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999969403360128	WITHOUT_CLASSIFICATION	1.1277222521170746E-6	TEST	9.758108086282046E-7	DESIGN	8.355564959238972E-7	IMPLEMENTATION	9.606713007166557E-8	DOCUMENTATION	2.4507300334914507E-8	DEFECT
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999569228362432	WITHOUT_CLASSIFICATION	2.5792700644696635E-5	DESIGN	8.227006824520759E-6	IMPLEMENTATION	6.728023171241317E-6	TEST	1.774543632099895E-6	DOCUMENTATION	5.548894841667639E-7	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9998137060810482	WITHOUT_CLASSIFICATION	7.965868862622931E-5	DEFECT	4.414034366580625E-5	DESIGN	3.340589576784113E-5	DOCUMENTATION	1.4904462602246043E-5	IMPLEMENTATION	1.418452828954555E-5	TEST
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999782847884096	WITHOUT_CLASSIFICATION	2.0588358419717998E-5	DEFECT	6.359253236795334E-7	TEST	3.1143035838883064E-7	DESIGN	1.5058366771027464E-7	IMPLEMENTATION	2.8913820914134205E-8	DOCUMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.964826734817196	WITHOUT_CLASSIFICATION	0.0341734808250501	IMPLEMENTATION	9.000147803583937E-4	DESIGN	9.191208970209193E-5	DOCUMENTATION	6.319299679412936E-6	TEST	1.5381880138707954E-6	DEFECT
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999859707887824	WITHOUT_CLASSIFICATION	1.2253346315675264E-5	IMPLEMENTATION	1.6121545042310807E-6	DESIGN	7.67688755185761E-8	DEFECT	6.024863859435331E-8	DOCUMENTATION	2.6692883786564E-8	TEST
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999421412567482	WITHOUT_CLASSIFICATION	5.028160720944447E-5	IMPLEMENTATION	2.739274114833575E-6	DESIGN	2.2889281957616094E-6	DOCUMENTATION	1.9272182195309843E-6	TEST	6.217155122741498E-7	DEFECT
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999699317067758	WITHOUT_CLASSIFICATION	9.772701678662455E-6	IMPLEMENTATION	8.376627069306713E-6	DESIGN	6.3053340473854575E-6	DEFECT	5.432343185757621E-6	TEST	1.812872428846036E-7	DOCUMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.9978331185889721	WITHOUT_CLASSIFICATION	6.997902023233789E-4	DESIGN	5.838397827918286E-4	IMPLEMENTATION	3.2952605655743833E-4	DOCUMENTATION	2.900739960246275E-4	TEST	2.636513733306158E-4	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999853664808339	WITHOUT_CLASSIFICATION	9.250428903148193E-6	TEST	4.677964258581969E-6	IMPLEMENTATION	3.2522259141469973E-7	DEFECT	2.6485788585608795E-7	DOCUMENTATION	1.150455271118449E-7	DESIGN
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999143700303804	WITHOUT_CLASSIFICATION	7.272232932445634E-5	DESIGN	8.368953193495067E-6	IMPLEMENTATION	2.5440722815903147E-6	DEFECT	1.0377382414426824E-6	DOCUMENTATION	9.568765784931115E-7	TEST
//cache this	WITHOUT_CLASSIFICATION	0.9999209279929303	WITHOUT_CLASSIFICATION	3.906370021736536E-5	DESIGN	1.866633623572529E-5	IMPLEMENTATION	1.1544450973737801E-5	DOCUMENTATION	9.138987061635406E-6	TEST	6.585325811888792E-7	DEFECT
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9997258654739989	WITHOUT_CLASSIFICATION	1.0973678181487824E-4	DESIGN	7.640205028668454E-5	IMPLEMENTATION	6.542163917598836E-5	DEFECT	1.1756608528901974E-5	DOCUMENTATION	1.0817446194663531E-5	TEST
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999839954240453	WITHOUT_CLASSIFICATION	8.19090734212066E-6	DESIGN	6.432590817014894E-6	DEFECT	7.069423312106292E-7	TEST	5.710716781133116E-7	IMPLEMENTATION	1.0306378620534729E-7	DOCUMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.995407796290173	WITHOUT_CLASSIFICATION	0.0012495496564533472	DEFECT	0.001144493932862694	IMPLEMENTATION	9.134192515730334E-4	DOCUMENTATION	7.858746188905185E-4	DESIGN	4.988662500475124E-4	TEST
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999352769447533	WITHOUT_CLASSIFICATION	5.8829555389954894E-5	IMPLEMENTATION	5.443060536018505E-6	DESIGN	3.0913210528040404E-7	DEFECT	9.472313724077622E-8	TEST	4.658407827052061E-8	DOCUMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999805682480623	WITHOUT_CLASSIFICATION	5.66130659067975E-6	IMPLEMENTATION	4.622049603472307E-6	DEFECT	3.1441336702575493E-6	DOCUMENTATION	3.0435866699880205E-6	DESIGN	2.960675403166546E-6	TEST
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.712296138566061	DESIGN	0.2867141064776776	WITHOUT_CLASSIFICATION	9.371424014389586E-4	DEFECT	1.8888356311437592E-5	IMPLEMENTATION	1.8467395857360686E-5	TEST	1.5256802653539751E-5	DOCUMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9995293556431036	WITHOUT_CLASSIFICATION	2.1040359198223348E-4	IMPLEMENTATION	9.041419749170706E-5	DESIGN	7.674759192395918E-5	DEFECT	6.040860470346115E-5	DOCUMENTATION	3.267037079508031E-5	TEST
//nothing to do	WITHOUT_CLASSIFICATION	0.9995293556431036	WITHOUT_CLASSIFICATION	2.1040359198223348E-4	IMPLEMENTATION	9.041419749170706E-5	DESIGN	7.674759192395918E-5	DEFECT	6.040860470346115E-5	DOCUMENTATION	3.267037079508031E-5	TEST
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999497580741893	WITHOUT_CLASSIFICATION	4.124201550041467E-5	DESIGN	6.193363606738227E-6	DEFECT	2.7080084087371615E-6	IMPLEMENTATION	6.035064055747279E-8	DOCUMENTATION	3.8187654269020635E-8	TEST
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998020934548376	WITHOUT_CLASSIFICATION	1.775389314425589E-4	DESIGN	1.7861767551330014E-5	IMPLEMENTATION	1.4458541171764316E-6	DEFECT	8.900723897887617E-7	TEST	1.699196614478086E-7	DOCUMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9974249785607956	WITHOUT_CLASSIFICATION	0.0013393156375427547	DESIGN	6.967387341211464E-4	IMPLEMENTATION	5.0040217788134E-4	DEFECT	2.4540823664579733E-5	DOCUMENTATION	1.4024065994602454E-5	TEST
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999998724392731	WITHOUT_CLASSIFICATION	5.75700468658702E-8	DESIGN	3.5738339383454486E-8	DEFECT	1.3004508560116556E-8	DOCUMENTATION	1.0806717231304506E-8	TEST	1.0441114888367608E-8	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999931584811077	WITHOUT_CLASSIFICATION	4.145701073861819E-6	DESIGN	1.6571646902341125E-6	IMPLEMENTATION	7.220186708879445E-7	DEFECT	2.65595746540719E-7	TEST	5.1038710673153215E-8	DOCUMENTATION
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9998966515475192	WITHOUT_CLASSIFICATION	8.352500756431629E-5	DESIGN	1.7879310740453523E-5	IMPLEMENTATION	1.665635024191195E-6	DEFECT	2.5449289511912816E-7	TEST	2.4006256972076972E-8	DOCUMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999897289419285	WITHOUT_CLASSIFICATION	5.251091007638402E-6	IMPLEMENTATION	2.7948328021624005E-6	DESIGN	1.1249852191316197E-6	TEST	5.79548232534149E-7	DOCUMENTATION	5.206008101740733E-7	DEFECT
//NOOP	WITHOUT_CLASSIFICATION	0.9998697901811106	WITHOUT_CLASSIFICATION	3.444686245308629E-5	DESIGN	2.9231855774713824E-5	TEST	2.8069122990169557E-5	DOCUMENTATION	2.2316176682745973E-5	IMPLEMENTATION	1.6145800988636528E-5	DEFECT
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.999960385159942	WITHOUT_CLASSIFICATION	1.966622629176801E-5	DESIGN	1.3923844699238748E-5	DEFECT	5.0802447505524146E-6	TEST	6.802359411454428E-7	DOCUMENTATION	2.642883752488739E-7	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9995008845562914	WITHOUT_CLASSIFICATION	4.945900623844154E-4	DESIGN	4.133184107743369E-6	TEST	3.3706446644959374E-7	DEFECT	4.110061437741563E-8	DOCUMENTATION	1.4032135653263686E-8	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999846851177456	WITHOUT_CLASSIFICATION	7.708187887077791E-6	IMPLEMENTATION	6.926391083148732E-6	DESIGN	5.268472702271908E-7	DEFECT	9.584627675535323E-8	TEST	5.760973731880201E-8	DOCUMENTATION
// return false;	WITHOUT_CLASSIFICATION	0.99999290969674	WITHOUT_CLASSIFICATION	6.057668201721209E-6	DESIGN	5.793529054548892E-7	IMPLEMENTATION	3.657890939789584E-7	DEFECT	4.9909344779955195E-8	DOCUMENTATION	3.7583713847133114E-8	TEST
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9983868529940687	WITHOUT_CLASSIFICATION	0.0015186288551936465	DESIGN	9.353755387788295E-5	DEFECT	6.304097278079419E-7	TEST	2.892372378499668E-7	DOCUMENTATION	6.094989414967301E-8	IMPLEMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999755935685868	WITHOUT_CLASSIFICATION	1.1185972807731024E-5	DEFECT	1.0936983598766165E-5	DESIGN	1.991124579207806E-6	TEST	2.0537956229474163E-7	DOCUMENTATION	8.697086533774539E-8	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999978166386541	WITHOUT_CLASSIFICATION	1.7489330454788443E-6	DESIGN	1.9090796270179986E-7	TEST	1.2598153615703113E-7	IMPLEMENTATION	7.29238461865048E-8	DOCUMENTATION	4.461495541459393E-8	DEFECT
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999628312310327	WITHOUT_CLASSIFICATION	2.673114735251426E-5	DEFECT	5.4160221530837365E-6	DESIGN	4.8347947507154155E-6	IMPLEMENTATION	1.7362967551147027E-7	TEST	1.3175035346355332E-8	DOCUMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999997059768725	WITHOUT_CLASSIFICATION	1.9195048450494922E-7	IMPLEMENTATION	7.320961061296789E-8	DEFECT	1.9138955994954297E-8	DOCUMENTATION	5.3592286770476714E-9	DESIGN	4.364847737814814E-9	TEST
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.999999744963261	WITHOUT_CLASSIFICATION	2.092010173607158E-7	DESIGN	2.253005610418494E-8	DEFECT	9.629380022816935E-9	DOCUMENTATION	9.096212070924753E-9	IMPLEMENTATION	4.580073285909624E-9	TEST
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999977095856541	WITHOUT_CLASSIFICATION	2.195023037938834E-6	DESIGN	5.3263647629474894E-8	DEFECT	3.627859931584886E-8	DOCUMENTATION	5.003953525450909E-9	TEST	8.451073049334978E-10	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9972343583679547	WITHOUT_CLASSIFICATION	0.0016773634011184309	DESIGN	0.0010707425508373223	IMPLEMENTATION	7.945933567123825E-6	TEST	5.430364753123251E-6	DOCUMENTATION	4.159381769139831E-6	DEFECT
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.999929482050648	WITHOUT_CLASSIFICATION	5.5674308890306456E-5	IMPLEMENTATION	9.054311268795783E-6	DEFECT	5.363119808485393E-6	DESIGN	2.3198264999321177E-7	TEST	1.9422673434895603E-7	DOCUMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.999119821665504	WITHOUT_CLASSIFICATION	5.034004898663367E-4	IMPLEMENTATION	3.071360180766599E-4	DESIGN	6.14770975678347E-5	DEFECT	4.581175529056616E-6	TEST	3.5835534561884593E-6	DOCUMENTATION
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9988896644818358	WITHOUT_CLASSIFICATION	0.0010988386110904458	IMPLEMENTATION	5.680900180314343E-6	DEFECT	3.3757401479382874E-6	DESIGN	2.24577123912383E-6	TEST	1.944955063686442E-7	DOCUMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999994357283754	WITHOUT_CLASSIFICATION	4.72868681732774E-7	DEFECT	5.5605984739149964E-8	DESIGN	2.5164227549450777E-8	DOCUMENTATION	8.229520554214283E-9	IMPLEMENTATION	2.4032101539709253E-9	TEST
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.995407796290173	WITHOUT_CLASSIFICATION	0.0012495496564533472	DEFECT	0.001144493932862694	IMPLEMENTATION	9.134192515730334E-4	DOCUMENTATION	7.858746188905185E-4	DESIGN	4.988662500475124E-4	TEST
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999965075806676	WITHOUT_CLASSIFICATION	2.046078054547663E-6	DESIGN	6.998311722436216E-7	IMPLEMENTATION	3.9236342964475846E-7	DEFECT	3.15051648871397E-7	TEST	3.909502724520889E-8	DOCUMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999222479521997	WITHOUT_CLASSIFICATION	7.697465312475838E-5	DESIGN	6.61863827459991E-7	IMPLEMENTATION	1.054437197016629E-7	DEFECT	6.1512241149855765E-9	DOCUMENTATION	3.93590430242208E-9	TEST
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.999999723589607	WITHOUT_CLASSIFICATION	1.4070223766030204E-7	DEFECT	1.1331365567335432E-7	DESIGN	1.082234360366411E-8	DOCUMENTATION	9.468727917096577E-9	TEST	2.103428024046022E-9	IMPLEMENTATION
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999747297023878	WITHOUT_CLASSIFICATION	9.001540623334129E-6	DESIGN	7.399318440751318E-6	IMPLEMENTATION	4.842148392530189E-6	DEFECT	2.394719647275369E-6	TEST	1.632570508320232E-6	DOCUMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.997630872297373	WITHOUT_CLASSIFICATION	0.0014579363779899047	IMPLEMENTATION	7.950008927507155E-4	DEFECT	6.154990665963087E-5	DOCUMENTATION	4.636324788039618E-5	DESIGN	8.277277346314931E-6	TEST
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999717236747451	WITHOUT_CLASSIFICATION	2.1661520114588586E-5	IMPLEMENTATION	5.2112065696916615E-6	DEFECT	9.163514228565693E-7	DESIGN	4.5688048823402363E-7	TEST	3.036665971372364E-8	DOCUMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999579506268224	WITHOUT_CLASSIFICATION	1.9480475667125683E-5	DEFECT	1.6866692484332203E-5	TEST	4.1621553731619505E-6	IMPLEMENTATION	8.054597895880048E-7	DOCUMENTATION	7.345898634467693E-7	DESIGN
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999972071296528	WITHOUT_CLASSIFICATION	1.0386701492490626E-6	IMPLEMENTATION	9.153313546250925E-7	DESIGN	4.503409665000722E-7	DEFECT	1.9767286607805156E-7	DOCUMENTATION	1.908550107023513E-7	TEST
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999918727676281	WITHOUT_CLASSIFICATION	5.393238014525059E-6	IMPLEMENTATION	1.292003195061093E-6	DESIGN	1.0514473370350988E-6	DEFECT	2.8454477671605136E-7	DOCUMENTATION	1.0599904857382803E-7	TEST
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999829937529798	WITHOUT_CLASSIFICATION	1.5814745241249914E-5	DESIGN	4.931730438929811E-7	IMPLEMENTATION	3.7120609400314E-7	DOCUMENTATION	2.1913203397830616E-7	TEST	1.079906069920473E-7	DEFECT
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999682478225567	WITHOUT_CLASSIFICATION	2.5896969086323423E-5	DESIGN	4.8405954947715376E-6	IMPLEMENTATION	5.285222775158296E-7	DEFECT	3.847667098459584E-7	TEST	1.0132387478567345E-7	DOCUMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999580049974294	WITHOUT_CLASSIFICATION	2.95267223082588E-5	TEST	8.556299518390391E-6	DEFECT	3.6233074295903987E-6	DOCUMENTATION	2.0347997128820235E-7	IMPLEMENTATION	8.51933428883849E-8	DESIGN
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9992690205134611	WITHOUT_CLASSIFICATION	5.810693137630006E-4	DESIGN	6.072377741827625E-5	TEST	5.819912716063579E-5	DEFECT	2.362000149986994E-5	DOCUMENTATION	7.367266697161266E-6	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9928259773051081	WITHOUT_CLASSIFICATION	0.006988454347230115	DESIGN	1.850897279286562E-4	DEFECT	3.571334443961635E-7	TEST	1.114734610142313E-7	DOCUMENTATION	1.0012827726384576E-8	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999731360512122	WITHOUT_CLASSIFICATION	1.8045970849053576E-5	DESIGN	7.778561764504305E-6	IMPLEMENTATION	8.85512023296593E-7	DOCUMENTATION	1.0682930312687263E-7	TEST	4.707484773512268E-8	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999731360512122	WITHOUT_CLASSIFICATION	1.8045970849053576E-5	DESIGN	7.778561764504305E-6	IMPLEMENTATION	8.85512023296593E-7	DOCUMENTATION	1.0682930312687263E-7	TEST	4.707484773512268E-8	DEFECT
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999964393078038	WITHOUT_CLASSIFICATION	1.3761018414344418E-6	DEFECT	7.528649443485147E-7	DESIGN	6.813903769950548E-7	IMPLEMENTATION	6.214595665715583E-7	DOCUMENTATION	1.288754668722773E-7	TEST
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999701467744541	WITHOUT_CLASSIFICATION	2.790054469330246E-5	IMPLEMENTATION	1.0230990451641787E-6	TEST	6.929603710105212E-7	DESIGN	1.4760973689998945E-7	DOCUMENTATION	8.901169954310693E-8	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999194758525767	WITHOUT_CLASSIFICATION	7.838085653426132E-5	DESIGN	1.13951083192014E-6	TEST	6.428204696579417E-7	DEFECT	3.2618545694390145E-7	DOCUMENTATION	3.477413055033366E-8	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999194758525767	WITHOUT_CLASSIFICATION	7.838085653426132E-5	DESIGN	1.13951083192014E-6	TEST	6.428204696579417E-7	DEFECT	3.2618545694390145E-7	DOCUMENTATION	3.477413055033366E-8	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.9999959011259478	WITHOUT_CLASSIFICATION	4.00538250520144E-6	DESIGN	3.686490038954392E-8	IMPLEMENTATION	2.565782962096753E-8	DEFECT	2.3298098202487494E-8	DOCUMENTATION	7.670718704056265E-9	TEST
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9997847187572614	WITHOUT_CLASSIFICATION	1.073458008819283E-4	DEFECT	5.833057811990533E-5	DESIGN	4.5411744721801496E-5	IMPLEMENTATION	3.1356297772592188E-6	DOCUMENTATION	1.057489237809494E-6	TEST
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.7196609865634552	WITHOUT_CLASSIFICATION	0.18042797288090667	DESIGN	0.09989868553316933	IMPLEMENTATION	6.49411663620069E-6	TEST	3.005007271182105E-6	DOCUMENTATION	2.855898561439547E-6	DEFECT
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9995007729936359	WITHOUT_CLASSIFICATION	4.969111879293852E-4	DESIGN	1.7421725309964708E-6	TEST	3.90633553785113E-7	DEFECT	1.0906361733274896E-7	DOCUMENTATION	7.394873243805582E-8	IMPLEMENTATION
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999983344114387	WITHOUT_CLASSIFICATION	8.616734042436035E-7	DESIGN	3.978538006120689E-7	DEFECT	1.949876363372877E-7	DOCUMENTATION	1.3597741459326063E-7	TEST	7.509630559626424E-8	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999996134421587	WITHOUT_CLASSIFICATION	1.2905398928500417E-7	IMPLEMENTATION	8.70384594313739E-8	DEFECT	6.790775623134933E-8	DESIGN	5.2676901114262753E-8	TEST	4.988073531115101E-8	DOCUMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999952157639813	WITHOUT_CLASSIFICATION	2.6465250383377675E-6	DESIGN	1.8723558047078926E-6	DEFECT	1.0418312686038115E-7	IMPLEMENTATION	8.985140803849586E-8	DOCUMENTATION	7.13206406535701E-8	TEST
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999952157639813	WITHOUT_CLASSIFICATION	2.6465250383377675E-6	DESIGN	1.8723558047078926E-6	DEFECT	1.0418312686038115E-7	IMPLEMENTATION	8.985140803849586E-8	DOCUMENTATION	7.13206406535701E-8	TEST
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999995370115511	WITHOUT_CLASSIFICATION	2.8613273105971285E-7	IMPLEMENTATION	8.734111876315284E-8	TEST	4.870842681761508E-8	DEFECT	3.130506597105076E-8	DOCUMENTATION	9.501106362685281E-9	DESIGN
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.999979075013128	WITHOUT_CLASSIFICATION	1.942482375201769E-5	IMPLEMENTATION	7.020291274321216E-7	DESIGN	5.110006306402669E-7	TEST	2.402855214521341E-7	DOCUMENTATION	4.6847840491623414E-8	DEFECT
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999948648367852	WITHOUT_CLASSIFICATION	2.1329724249954328E-6	IMPLEMENTATION	1.2738435402000513E-6	TEST	8.67432922367865E-7	DOCUMENTATION	7.5168327525115E-7	DESIGN	1.0923105197510869E-7	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999981706927681	WITHOUT_CLASSIFICATION	8.611406521190741E-7	DESIGN	7.109654238885115E-7	DEFECT	1.534649435953872E-7	IMPLEMENTATION	8.696745054746461E-8	DOCUMENTATION	1.676876186248018E-8	TEST
// returnign null!	WITHOUT_CLASSIFICATION	0.9999981706927681	WITHOUT_CLASSIFICATION	8.611406521190741E-7	DESIGN	7.109654238885115E-7	DEFECT	1.534649435953872E-7	IMPLEMENTATION	8.696745054746461E-8	DOCUMENTATION	1.676876186248018E-8	TEST
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999968164286073	WITHOUT_CLASSIFICATION	1.701744923555648E-6	DESIGN	5.871252116429349E-7	TEST	5.491646276697516E-7	DEFECT	2.475317107619515E-7	DOCUMENTATION	9.800491910972463E-8	IMPLEMENTATION
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999792893560886	WITHOUT_CLASSIFICATION	1.5037827637693771E-5	DEFECT	3.473323175752151E-6	IMPLEMENTATION	9.584673634701868E-7	DOCUMENTATION	9.298460075065364E-7	DESIGN	3.1117972702517543E-7	TEST
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9997837602391523	WITHOUT_CLASSIFICATION	2.057086021236001E-4	DESIGN	5.4590624413657086E-6	IMPLEMENTATION	4.4983207823385176E-6	TEST	5.445869348341228E-7	DEFECT	2.9188565438404237E-8	DOCUMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999878752960807	WITHOUT_CLASSIFICATION	7.430910252310733E-6	IMPLEMENTATION	2.706723965625717E-6	DESIGN	1.0548500458540394E-6	DOCUMENTATION	8.000231967307883E-7	TEST	1.3219645873879926E-7	DEFECT
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9998785279231802	WITHOUT_CLASSIFICATION	1.2116672298136184E-4	DESIGN	1.0781086485504317E-7	DEFECT	1.0471908186194968E-7	IMPLEMENTATION	5.13803953559705E-8	TEST	4.1443496471667255E-8	DOCUMENTATION
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999991238028948	WITHOUT_CLASSIFICATION	3.6871045684312874E-7	IMPLEMENTATION	2.558829217039092E-7	DESIGN	1.2653440080906867E-7	TEST	9.485630478362612E-8	DEFECT	3.0213021137680194E-8	DOCUMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999854772893408	WITHOUT_CLASSIFICATION	8.496248574732554E-6	DESIGN	4.463217587237908E-6	DEFECT	8.316451863274722E-7	TEST	3.7016974969442887E-7	DOCUMENTATION	3.614295612653522E-7	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.9999912727230734	WITHOUT_CLASSIFICATION	4.932590309532659E-6	DESIGN	2.1972781686656473E-6	IMPLEMENTATION	8.675174744013754E-7	TEST	6.246312465147821E-7	DOCUMENTATION	1.0525972737483718E-7	DEFECT
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999994562736061	WITHOUT_CLASSIFICATION	4.0655487817105487E-7	DESIGN	1.0554565506232945E-7	TEST	2.0827148036980287E-8	IMPLEMENTATION	6.543120685136479E-9	DOCUMENTATION	4.255591805647432E-9	DEFECT
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999642892269974	WITHOUT_CLASSIFICATION	2.6108599087202902E-5	DEFECT	7.8216859759792E-6	DESIGN	1.4717291448482496E-6	TEST	2.514771519490351E-7	DOCUMENTATION	5.7281642491647524E-8	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9996274171980262	WITHOUT_CLASSIFICATION	3.7162774103623284E-4	DESIGN	4.76977315349382E-7	DEFECT	4.0680629317828077E-7	DOCUMENTATION	5.2473390371524785E-8	TEST	1.8803938775383205E-8	IMPLEMENTATION
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9998154537849807	WITHOUT_CLASSIFICATION	7.806416846634831E-5	DESIGN	4.448075425955658E-5	IMPLEMENTATION	3.653009167264726E-5	DEFECT	2.5089092238349096E-5	TEST	3.821083823293062E-7	DOCUMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.9662373302558408	WITHOUT_CLASSIFICATION	0.027769425022174884	IMPLEMENTATION	0.005365434175389913	DESIGN	4.169075697217974E-4	TEST	1.7319886645779023E-4	DOCUMENTATION	3.77041104149324E-5	DEFECT
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999788200909057	WITHOUT_CLASSIFICATION	1.908918223421087E-5	DESIGN	1.0440745116954095E-6	TEST	5.818746032766246E-7	DEFECT	4.6151419039995277E-7	IMPLEMENTATION	3.263554640215265E-9	DOCUMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.9999899825929702	WITHOUT_CLASSIFICATION	8.922965653219502E-6	IMPLEMENTATION	5.938507103394062E-7	DOCUMENTATION	2.5549657835806524E-7	TEST	1.3593780241174645E-7	DESIGN	1.0915628542702006E-7	DEFECT
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999970873615016	WITHOUT_CLASSIFICATION	2.4707894194988926E-6	DEFECT	3.248301552954833E-7	TEST	9.571548508471022E-8	DESIGN	1.923868456510067E-8	DOCUMENTATION	2.064753917640594E-9	IMPLEMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9983170607030039	WITHOUT_CLASSIFICATION	0.001648795374239437	IMPLEMENTATION	2.920682137427566E-5	DESIGN	2.532913629504952E-6	DOCUMENTATION	2.1895609629118875E-6	DEFECT	2.1462678980154027E-7	TEST
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999281667241735	WITHOUT_CLASSIFICATION	2.445477788057236E-5	DEFECT	2.429551501180564E-5	IMPLEMENTATION	1.969769822002633E-5	DESIGN	3.0274849886849617E-6	TEST	3.5779972548414465E-7	DOCUMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999951470756081	WITHOUT_CLASSIFICATION	3.41301293662536E-6	DESIGN	7.092124355868368E-7	DOCUMENTATION	4.418696775060629E-7	IMPLEMENTATION	2.8328804239664275E-7	TEST	5.541299791809931E-9	DEFECT
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999944452256192	WITHOUT_CLASSIFICATION	5.3203781469917765E-6	DESIGN	1.2914978373154919E-7	TEST	8.102497430300315E-8	DOCUMENTATION	1.6245202300223025E-8	IMPLEMENTATION	7.976273376842426E-9	DEFECT
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.999997944034331	WITHOUT_CLASSIFICATION	1.5105798790744325E-6	DESIGN	1.7685391828307875E-7	TEST	1.593450823300402E-7	DEFECT	1.3386036475275837E-7	DOCUMENTATION	7.53264246186052E-8	IMPLEMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9972839748681627	WITHOUT_CLASSIFICATION	0.0022964511693442397	DESIGN	2.6986573762552765E-4	DEFECT	1.3821892833446273E-4	IMPLEMENTATION	6.6061922587773865E-6	DOCUMENTATION	4.8831042741696555E-6	TEST
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9778523148374768	WITHOUT_CLASSIFICATION	0.020868091057099507	DESIGN	7.810627705617488E-4	IMPLEMENTATION	3.5881976305330345E-4	TEST	1.1275838866346325E-4	DOCUMENTATION	2.6953183145273623E-5	DEFECT
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999931465113255	WITHOUT_CLASSIFICATION	3.985200199983241E-6	IMPLEMENTATION	1.8685288326341104E-6	TEST	5.378843535582179E-7	DOCUMENTATION	2.5136696357703897E-7	DESIGN	2.1050832469815778E-7	DEFECT
//faster?	WITHOUT_CLASSIFICATION	0.9996754526553621	WITHOUT_CLASSIFICATION	2.837623735069331E-4	DESIGN	2.1466165950865887E-5	IMPLEMENTATION	1.4430702341340487E-5	TEST	3.947477356593006E-6	DOCUMENTATION	9.406254822874933E-7	DEFECT
// the name of a class	WITHOUT_CLASSIFICATION	0.9999974681601663	WITHOUT_CLASSIFICATION	2.3986350335491667E-6	DESIGN	7.056086664547354E-8	DOCUMENTATION	5.02311366179444E-8	TEST	7.40077803388468E-9	IMPLEMENTATION	5.0120188542047574E-9	DEFECT
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999977743975871	WITHOUT_CLASSIFICATION	2.0496483507293446E-6	DESIGN	9.187924662018998E-8	IMPLEMENTATION	6.739647578755172E-8	TEST	1.4676895996724497E-8	DOCUMENTATION	2.0014438311538503E-9	DEFECT
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9998607501756207	WITHOUT_CLASSIFICATION	6.369789811940558E-5	DEFECT	3.041426922216983E-5	DESIGN	2.429691933596097E-5	IMPLEMENTATION	1.194978157170243E-5	TEST	8.890956130042685E-6	DOCUMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999989655980633	WITHOUT_CLASSIFICATION	7.924280155863029E-7	IMPLEMENTATION	1.5945067019153044E-7	DOCUMENTATION	6.594960396992335E-8	DESIGN	1.0310846160628275E-8	TEST	6.2628008183299855E-9	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9998710341488187	WITHOUT_CLASSIFICATION	1.1205252214084261E-4	IMPLEMENTATION	1.4325170432733797E-5	DESIGN	1.7440034236099808E-6	DEFECT	7.395750387263076E-7	DOCUMENTATION	1.0458014529892187E-7	TEST
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999524196873529	WITHOUT_CLASSIFICATION	2.3630072615888104E-5	DESIGN	2.2885100558892507E-5	IMPLEMENTATION	5.726288758235632E-7	DOCUMENTATION	2.834927342293904E-7	TEST	2.0901786229340406E-7	DEFECT
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9890241734585432	WITHOUT_CLASSIFICATION	0.01096916218832323	DESIGN	2.8666073149530208E-6	DOCUMENTATION	1.8160727345744082E-6	TEST	1.2774311257929291E-6	DEFECT	7.04241958286567E-7	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999996050003147	WITHOUT_CLASSIFICATION	3.219539243802345E-7	DESIGN	3.7515747111839264E-8	DEFECT	2.8455038487472386E-8	IMPLEMENTATION	4.297451624450037E-9	DOCUMENTATION	2.7775237421624874E-9	TEST
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9993518277063044	WITHOUT_CLASSIFICATION	3.5137012744066684E-4	DEFECT	1.7199800966187867E-4	IMPLEMENTATION	5.965223560925836E-5	DOCUMENTATION	5.897936914958E-5	DESIGN	6.1725518343060436E-6	TEST
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999341447363868	WITHOUT_CLASSIFICATION	6.22069056235325E-5	DESIGN	3.359271075597041E-6	IMPLEMENTATION	1.9207250068899546E-7	DOCUMENTATION	5.449904715914547E-8	TEST	4.2515366154107095E-8	DEFECT
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9987666286930139	WITHOUT_CLASSIFICATION	3.7761293624405135E-4	DESIGN	3.100988796043924E-4	IMPLEMENTATION	3.005541471196795E-4	DEFECT	1.682848639652128E-4	DOCUMENTATION	7.682048005274979E-5	TEST
//readResolveObject	WITHOUT_CLASSIFICATION	0.9998463895886334	WITHOUT_CLASSIFICATION	1.2620218937319473E-4	DESIGN	8.448731091673287E-6	IMPLEMENTATION	7.608218919404357E-6	DOCUMENTATION	5.7734792574575735E-6	TEST	5.5777927249935735E-6	DEFECT
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999954388070531	WITHOUT_CLASSIFICATION	3.506396664277665E-6	DEFECT	5.561280139023544E-7	IMPLEMENTATION	2.462680313610637E-7	DESIGN	1.6838092025172165E-7	TEST	8.401931721519557E-8	DOCUMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999934926263782	WITHOUT_CLASSIFICATION	5.215031866995438E-6	IMPLEMENTATION	5.920362490989396E-7	DOCUMENTATION	5.592245347955471E-7	DESIGN	1.3753865692878634E-7	TEST	3.542314027490768E-9	DEFECT
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999903747337169	WITHOUT_CLASSIFICATION	8.565490616637057E-6	DESIGN	3.616392810920443E-7	DEFECT	3.2724680065353034E-7	TEST	2.3966264999711087E-7	IMPLEMENTATION	1.312269347339558E-7	DOCUMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.999994996479046	WITHOUT_CLASSIFICATION	4.172461935774496E-6	DEFECT	4.067567166922932E-7	IMPLEMENTATION	3.894143611438472E-7	DESIGN	2.7651169405883936E-8	TEST	7.236771025446778E-9	DOCUMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9995078375695882	WITHOUT_CLASSIFICATION	3.7701131628986107E-4	DEFECT	4.4240585282280936E-5	DESIGN	3.0332384102623565E-5	IMPLEMENTATION	2.2895079505531035E-5	DOCUMENTATION	1.7683065231472892E-5	TEST
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999837269052317	WITHOUT_CLASSIFICATION	1.2518447903925527E-5	IMPLEMENTATION	1.6894282028996662E-6	DESIGN	8.199106554130378E-7	DEFECT	7.327339116026698E-7	TEST	5.125740944742798E-7	DOCUMENTATION
// Handle actions	WITHOUT_CLASSIFICATION	0.9999894914201188	WITHOUT_CLASSIFICATION	7.365122473830439E-6	DESIGN	2.7555545524571897E-6	IMPLEMENTATION	2.534578694879361E-7	DOCUMENTATION	7.320072886405744E-8	DEFECT	6.124425665264485E-8	TEST
// Print page	WITHOUT_CLASSIFICATION	0.9999859275885221	WITHOUT_CLASSIFICATION	9.174291172963306E-6	IMPLEMENTATION	1.7858255973822246E-6	DESIGN	1.2805053096619708E-6	TEST	1.0040106470704317E-6	DEFECT	8.277787507206883E-7	DOCUMENTATION
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999970292955134	WITHOUT_CLASSIFICATION	1.2357938549622165E-6	DEFECT	1.1416395694085567E-6	DESIGN	3.899980305268521E-7	IMPLEMENTATION	1.108079805794615E-7	TEST	9.246505113453129E-8	DOCUMENTATION
// End unit of work	WITHOUT_CLASSIFICATION	0.9951691656656367	WITHOUT_CLASSIFICATION	0.004617013934690387	DEFECT	1.2582715348773583E-4	DESIGN	3.990521340015323E-5	IMPLEMENTATION	2.466849259147751E-5	DOCUMENTATION	2.3419540193407906E-5	TEST
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999599162183194	WITHOUT_CLASSIFICATION	3.355542635746394E-5	DESIGN	3.8011679033148123E-6	TEST	2.3453553505505706E-6	DEFECT	2.6286587307035126E-7	IMPLEMENTATION	1.189661961347804E-7	DOCUMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999173552439713	WITHOUT_CLASSIFICATION	6.884291745434827E-5	DESIGN	6.942112555328497E-6	DEFECT	5.111686554421748E-6	TEST	1.3691998183507349E-6	DOCUMENTATION	3.7883964632497595E-7	IMPLEMENTATION
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999966734962037	WITHOUT_CLASSIFICATION	2.1656247374631563E-6	IMPLEMENTATION	5.72466252451231E-7	TEST	3.733946420848658E-7	DEFECT	1.1621846073001193E-7	DESIGN	9.879970350632646E-8	DOCUMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9994099628698193	WITHOUT_CLASSIFICATION	4.943916691425212E-4	DESIGN	8.710149594395393E-5	DEFECT	4.525329056603416E-6	DOCUMENTATION	2.108083683391976E-6	TEST	1.910552354271008E-6	IMPLEMENTATION
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999748631654333	WITHOUT_CLASSIFICATION	1.3670243063373732E-5	IMPLEMENTATION	9.206275664723644E-6	DESIGN	1.1497153698071787E-6	TEST	8.046473940719503E-7	DEFECT	3.0595307470667376E-7	DOCUMENTATION
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.99139074041461	WITHOUT_CLASSIFICATION	0.007702831817234148	DESIGN	6.284429701227327E-4	IMPLEMENTATION	1.637964783565676E-4	TEST	1.0901422932396E-4	DEFECT	5.174090352729523E-6	DOCUMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999991976856	WITHOUT_CLASSIFICATION	4.795913953504536E-10	TEST	1.2038403114913755E-10	DEFECT	1.182673354701474E-10	DESIGN	6.239377024162332E-11	IMPLEMENTATION	2.167791318196921E-11	DOCUMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9995079093460225	WITHOUT_CLASSIFICATION	4.034535239669735E-4	DEFECT	3.186464487766711E-5	IMPLEMENTATION	2.4497233673994335E-5	TEST	2.358466909694637E-5	DESIGN	8.690582361717582E-6	DOCUMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9908464326185379	WITHOUT_CLASSIFICATION	0.009020205566044088	IMPLEMENTATION	9.51664193877305E-5	DESIGN	3.085344761518678E-5	DEFECT	5.096148208159119E-6	TEST	2.2458002068922377E-6	DOCUMENTATION
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9990493500259553	WITHOUT_CLASSIFICATION	7.148102946529563E-4	DEFECT	1.2856023461152186E-4	DESIGN	5.030897643933136E-5	IMPLEMENTATION	4.541670548746732E-5	DOCUMENTATION	1.1553762853519792E-5	TEST
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999907798318148	WITHOUT_CLASSIFICATION	4.592940112664661E-6	IMPLEMENTATION	2.3215389770105345E-6	DEFECT	1.381060704303853E-6	DOCUMENTATION	6.315360929337072E-7	TEST	2.930922982790932E-7	DESIGN
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9994170599544967	WITHOUT_CLASSIFICATION	5.68520395604368E-4	DEFECT	7.995395922687072E-6	DESIGN	3.749937935006134E-6	IMPLEMENTATION	2.3806761634962948E-6	TEST	2.936398775937428E-7	DOCUMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999628181365805	WITHOUT_CLASSIFICATION	2.6931117357448768E-5	DEFECT	6.37907234260916E-6	TEST	3.7653186096028632E-6	DESIGN	6.559065561440104E-8	IMPLEMENTATION	4.07644542553961E-8	DOCUMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999963186254589	WITHOUT_CLASSIFICATION	1.6268792767090573E-6	DEFECT	1.4885618498389103E-6	IMPLEMENTATION	2.953525307781427E-7	DESIGN	1.7710306278700828E-7	TEST	9.34778210091292E-8	DOCUMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999963186254589	WITHOUT_CLASSIFICATION	1.6268792767090573E-6	DEFECT	1.4885618498389103E-6	IMPLEMENTATION	2.953525307781427E-7	DESIGN	1.7710306278700828E-7	TEST	9.34778210091292E-8	DOCUMENTATION
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999929099014325	WITHOUT_CLASSIFICATION	6.601976061562649E-6	TEST	2.3876492737988473E-7	IMPLEMENTATION	1.2782742199621627E-7	DESIGN	9.666009115808665E-8	DEFECT	2.4870065434594445E-8	DOCUMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9885411031224332	WITHOUT_CLASSIFICATION	0.011439605744818714	DESIGN	9.344629853559405E-6	TEST	5.626070138381354E-6	DOCUMENTATION	3.6307136002921197E-6	IMPLEMENTATION	6.897191560998477E-7	DEFECT
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999807882879	WITHOUT_CLASSIFICATION	1.2006270599857216E-8	DESIGN	2.5042760613533243E-9	TEST	2.442109738921857E-9	DOCUMENTATION	1.86732130550081E-9	IMPLEMENTATION	3.917343862918267E-10	DEFECT
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9995350780116268	WITHOUT_CLASSIFICATION	4.647142587705956E-4	DESIGN	1.3510023730442782E-7	TEST	3.7250427053454396E-8	DOCUMENTATION	3.436510245343844E-8	DEFECT	1.013835835596472E-9	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999751218840206	WITHOUT_CLASSIFICATION	2.4797986361212972E-5	DEFECT	3.800778847442488E-8	TEST	2.9450864818238724E-8	IMPLEMENTATION	1.1432845131704188E-8	DESIGN	1.2381197111174563E-9	DOCUMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9995432484639217	WITHOUT_CLASSIFICATION	4.1355582944026297E-4	IMPLEMENTATION	2.710175576801363E-5	DESIGN	9.114399887806178E-6	TEST	3.978356760529657E-6	DOCUMENTATION	3.0011942217353634E-6	DEFECT
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999967283487876	WITHOUT_CLASSIFICATION	3.2561730621383427E-6	DESIGN	9.734587415779658E-9	DEFECT	4.495111436269056E-9	DOCUMENTATION	1.236056060901816E-9	TEST	1.2395209301500731E-11	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999987180866164	WITHOUT_CLASSIFICATION	1.2734970324412603E-6	DESIGN	6.840895378919647E-9	DEFECT	1.26326848845284E-9	IMPLEMENTATION	2.9208901275933303E-10	TEST	2.009819092849766E-11	DOCUMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999999810285057	WITHOUT_CLASSIFICATION	6.720235596768725E-9	DOCUMENTATION	3.98152322574779E-9	TEST	3.576471999228957E-9	DESIGN	3.4100237331058486E-9	DEFECT	1.2832397262051847E-9	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.999999923143456	WITHOUT_CLASSIFICATION	3.7932136188582855E-8	DESIGN	1.768416997015873E-8	DOCUMENTATION	8.015914876734435E-9	DEFECT	7.028092540843625E-9	TEST	6.1962302930331105E-9	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999411698835488	WITHOUT_CLASSIFICATION	5.419878004568119E-5	DESIGN	4.575279189628465E-6	DEFECT	3.98874919801291E-8	TEST	9.730504502746589E-9	DOCUMENTATION	6.439219407276342E-9	IMPLEMENTATION
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9994346535017107	WITHOUT_CLASSIFICATION	3.4844666750512244E-4	DESIGN	1.905875564282322E-4	DEFECT	1.469337123259458E-5	TEST	6.2716317883944056E-6	DOCUMENTATION	5.347271334872019E-6	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999945212839899	WITHOUT_CLASSIFICATION	5.411461934363149E-6	DEFECT	4.8669743286628676E-8	IMPLEMENTATION	1.6801203177028448E-8	TEST	1.437415206879246E-9	DOCUMENTATION	3.4571421511539686E-10	DESIGN
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.999995286920077	WITHOUT_CLASSIFICATION	3.1873639649662896E-6	DESIGN	1.3742014664916513E-6	IMPLEMENTATION	8.849224211610953E-8	TEST	5.6133637410911934E-8	DOCUMENTATION	6.888612054397431E-9	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999234667613933	WITHOUT_CLASSIFICATION	4.584632371001046E-5	DESIGN	1.8109444940906556E-5	IMPLEMENTATION	8.59195733597449E-6	DEFECT	2.2252070167171145E-6	TEST	1.7603056031472397E-6	DOCUMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999234667613933	WITHOUT_CLASSIFICATION	4.584632371001046E-5	DESIGN	1.8109444940906556E-5	IMPLEMENTATION	8.59195733597449E-6	DEFECT	2.2252070167171145E-6	TEST	1.7603056031472397E-6	DOCUMENTATION
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999973071964923	WITHOUT_CLASSIFICATION	2.6310403372658082E-6	DESIGN	5.509062847839978E-8	DEFECT	4.838514324754534E-9	TEST	1.7070822710369748E-9	DOCUMENTATION	1.2694548310131752E-10	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999518687014448	WITHOUT_CLASSIFICATION	3.193085651569083E-5	DESIGN	1.3514877374910993E-5	DEFECT	1.9069215386672537E-6	IMPLEMENTATION	6.199903524567114E-7	TEST	1.5865277355001312E-7	DOCUMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999948968200248	WITHOUT_CLASSIFICATION	4.323030282996817E-6	DESIGN	3.9649375601518406E-7	IMPLEMENTATION	1.8358504189342026E-7	DEFECT	1.1367776194964203E-7	TEST	8.639313226016377E-8	DOCUMENTATION
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999959972541445	WITHOUT_CLASSIFICATION	1.5862935346658014E-6	DESIGN	1.1378340318273746E-6	IMPLEMENTATION	1.0434575433241E-6	DEFECT	2.1178874829267667E-7	DOCUMENTATION	2.3371997350815925E-8	TEST
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999950786146367	WITHOUT_CLASSIFICATION	1.4303961677792975E-6	DESIGN	1.333557690532867E-6	DOCUMENTATION	1.1009509348311477E-6	TEST	5.351065321671283E-7	IMPLEMENTATION	5.21374038205031E-7	DEFECT
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999893022304398	WITHOUT_CLASSIFICATION	7.0122097382867155E-6	IMPLEMENTATION	1.1993281839157455E-6	DEFECT	1.169161618428092E-6	TEST	8.525154608922524E-7	DOCUMENTATION	4.645545587189419E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999901129351392	WITHOUT_CLASSIFICATION	3.2269450928152142E-6	DEFECT	3.1512852234262724E-6	IMPLEMENTATION	1.798969037105449E-6	DOCUMENTATION	1.008602634393636E-6	TEST	7.012628731391404E-7	DESIGN
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9387008747729897	WITHOUT_CLASSIFICATION	0.04083394618052425	DEFECT	0.01805784583379204	DESIGN	0.0021427104488342228	IMPLEMENTATION	2.2203940603294294E-4	TEST	4.258335782679483E-5	DOCUMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999994055241057	WITHOUT_CLASSIFICATION	2.824108959564651E-7	DESIGN	2.601377028558773E-7	IMPLEMENTATION	3.2541867902931916E-8	DOCUMENTATION	1.6532294478463117E-8	DEFECT	2.853133089682054E-9	TEST
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9996227741959874	WITHOUT_CLASSIFICATION	3.4083857536459743E-4	DESIGN	1.830365258616472E-5	TEST	1.4356664354085895E-5	DEFECT	3.7049090258127356E-6	IMPLEMENTATION	2.2002681937981697E-8	DOCUMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999940767702103	WITHOUT_CLASSIFICATION	5.821753991531215E-6	DESIGN	4.537831227151602E-8	IMPLEMENTATION	4.4028967998424016E-8	DEFECT	6.7525900529180485E-9	DOCUMENTATION	5.315927637449483E-9	TEST
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.999985081110695	WITHOUT_CLASSIFICATION	9.304743790113672E-6	DEFECT	2.22615005443037E-6	IMPLEMENTATION	2.0395443071961936E-6	DOCUMENTATION	9.012803336801477E-7	TEST	4.471708196343055E-7	DESIGN
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9972954087280624	WITHOUT_CLASSIFICATION	0.0026440492380970593	DEFECT	5.4198085277073365E-5	DESIGN	3.5099389931956963E-6	DOCUMENTATION	2.003202674795055E-6	IMPLEMENTATION	8.308068954976608E-7	TEST
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.999990713548603	WITHOUT_CLASSIFICATION	4.479790895183756E-6	DESIGN	4.163553045968613E-6	IMPLEMENTATION	3.6046849839540335E-7	TEST	1.6115502991375086E-7	DEFECT	1.214839275668245E-7	DOCUMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9997724261412154	WITHOUT_CLASSIFICATION	2.096555238429221E-4	DESIGN	7.143914044528958E-6	DOCUMENTATION	6.990150641013739E-6	DEFECT	2.3394073574182313E-6	IMPLEMENTATION	1.444862898757171E-6	TEST
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9930094556055413	WITHOUT_CLASSIFICATION	0.006959599508565152	DESIGN	2.5991202999289635E-5	DEFECT	3.592286767018431E-6	TEST	7.671187878530264E-7	IMPLEMENTATION	5.942773394343924E-7	DOCUMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9774715734058141	DESIGN	0.022238037699632677	WITHOUT_CLASSIFICATION	2.414939218018459E-4	DEFECT	4.754490900511364E-5	TEST	1.1436328639790132E-6	IMPLEMENTATION	2.064308822839125E-7	DOCUMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999707313650519	WITHOUT_CLASSIFICATION	2.12115140127727E-5	TEST	7.081109774235606E-6	DESIGN	6.884381734160796E-7	DOCUMENTATION	2.362831525404909E-7	IMPLEMENTATION	5.128983506212278E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999970513986796	WITHOUT_CLASSIFICATION	1.9589077015888686E-6	DEFECT	8.261399766202905E-7	DESIGN	7.8034654094324E-8	IMPLEMENTATION	4.746172666697842E-8	TEST	3.805726147919386E-8	DOCUMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999988234353574	WITHOUT_CLASSIFICATION	7.296638207855915E-7	DESIGN	3.7013371710595056E-7	IMPLEMENTATION	7.15198030499072E-8	DEFECT	3.712299047515441E-9	DOCUMENTATION	1.535002584606481E-9	TEST
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999988144345318	WITHOUT_CLASSIFICATION	1.173345963634795E-6	DESIGN	5.378637486180304E-9	TEST	2.5078297890836676E-9	DEFECT	2.2459705758360927E-9	IMPLEMENTATION	2.08706672639192E-9	DOCUMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999955528421062	WITHOUT_CLASSIFICATION	3.0835722172082527E-6	DEFECT	7.070234962525912E-7	DOCUMENTATION	2.767050448743896E-7	IMPLEMENTATION	1.9221959848181175E-7	DESIGN	1.8763753691941653E-7	TEST
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999793797070866	WITHOUT_CLASSIFICATION	2.0381869923642138E-5	DESIGN	8.272453853812908E-8	TEST	7.910606994771677E-8	DOCUMENTATION	5.0812669046247645E-8	DEFECT	2.577971229083666E-8	IMPLEMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.999912102749522	WITHOUT_CLASSIFICATION	4.28370425913086E-5	IMPLEMENTATION	2.437658790402513E-5	DESIGN	1.4714516045089722E-5	TEST	3.4614373207529283E-6	DEFECT	2.5076666166916597E-6	DOCUMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9782143835692533	WITHOUT_CLASSIFICATION	0.01666060405618641	DEFECT	0.0031042423525332887	TEST	0.0019935846611482994	DESIGN	1.5792415952507617E-5	IMPLEMENTATION	1.1392944926276018E-5	DOCUMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9997666904843504	WITHOUT_CLASSIFICATION	1.8450305881265603E-4	DESIGN	4.4665650172547054E-5	DEFECT	3.2891493507790463E-6	TEST	4.871836626466518E-7	IMPLEMENTATION	3.644736508600695E-7	DOCUMENTATION
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.999973155405005	WITHOUT_CLASSIFICATION	2.5110569379202364E-5	DEFECT	1.7196585474258154E-6	IMPLEMENTATION	8.107947286214238E-9	TEST	5.724942818016603E-9	DOCUMENTATION	5.341782254537449E-10	DESIGN
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9122975938996291	WITHOUT_CLASSIFICATION	0.07783592932196953	DESIGN	0.007415067815076995	DEFECT	0.002391971882015725	IMPLEMENTATION	4.3319321098827354E-5	TEST	1.6117760210039628E-5	DOCUMENTATION
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999914367412966	WITHOUT_CLASSIFICATION	7.104616809411401E-6	IMPLEMENTATION	7.31511120543951E-7	TEST	6.129431189972779E-7	DEFECT	1.1217514202847665E-7	DESIGN	2.012512308000966E-9	DOCUMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999427944568903	WITHOUT_CLASSIFICATION	5.383375254415534E-5	DESIGN	3.025396427121013E-6	DEFECT	2.1501094803203073E-7	DOCUMENTATION	1.197400598604457E-7	TEST	1.1643130568512277E-8	IMPLEMENTATION
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9537313185533631	WITHOUT_CLASSIFICATION	0.04622187969505105	DESIGN	2.4409904580807892E-5	TEST	1.0265633514743173E-5	DEFECT	8.364169085421701E-6	DOCUMENTATION	3.762044404909026E-6	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999998358950888	WITHOUT_CLASSIFICATION	1.3788857802817272E-7	DESIGN	1.8207237838584156E-8	IMPLEMENTATION	3.6985506498900458E-9	DEFECT	3.0114885628658616E-9	DOCUMENTATION	1.2990560912794882E-9	TEST
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999873025292222	WITHOUT_CLASSIFICATION	1.187280439702173E-5	DESIGN	8.067889787960853E-7	DEFECT	1.1339722325321646E-8	TEST	4.328638964121439E-9	DOCUMENTATION	2.2090406421555545E-9	IMPLEMENTATION
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999917559713012	WITHOUT_CLASSIFICATION	3.68894728767606E-6	DESIGN	2.956666847413839E-6	DEFECT	1.538214935463589E-6	IMPLEMENTATION	5.6085101279482946E-8	TEST	4.114527082284549E-9	DOCUMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.8492995415009605	WITHOUT_CLASSIFICATION	0.15045054875826605	DESIGN	1.0440010612739876E-4	DEFECT	9.895014763364181E-5	IMPLEMENTATION	2.8431396344411646E-5	TEST	1.812809066808896E-5	DOCUMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999674224796954	WITHOUT_CLASSIFICATION	2.154129387381784E-5	DESIGN	1.0365324468953231E-5	DEFECT	5.308660020104424E-7	IMPLEMENTATION	9.294901708357897E-8	TEST	4.7086942641248025E-8	DOCUMENTATION
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999956037182578	WITHOUT_CLASSIFICATION	4.207275579098771E-6	DESIGN	9.71750080518257E-8	IMPLEMENTATION	5.071067906342816E-8	DOCUMENTATION	2.3478608860792603E-8	TEST	1.7641867092655343E-8	DEFECT
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999648764983415	WITHOUT_CLASSIFICATION	2.0933326518255414E-5	DESIGN	1.3918609854406183E-5	DEFECT	2.378726834101276E-7	TEST	3.114090717170783E-8	DOCUMENTATION	2.551695202585606E-9	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999861961954496	WITHOUT_CLASSIFICATION	9.699899877286143E-6	DEFECT	1.835671103400178E-6	DESIGN	9.491266500838871E-7	TEST	7.158188595705852E-7	DOCUMENTATION	6.032880600581042E-7	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.5247426922917852	WITHOUT_CLASSIFICATION	0.47525428793376784	DESIGN	2.4361349052159216E-6	TEST	3.0652524286006103E-7	DEFECT	1.6947242234597912E-7	DOCUMENTATION	1.076418764631419E-7	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9997503785776841	WITHOUT_CLASSIFICATION	1.8181824531026376E-4	DESIGN	3.391848206791132E-5	IMPLEMENTATION	3.0006473040623488E-5	DEFECT	2.1237216931977546E-6	TEST	1.7545002037002604E-6	DOCUMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9997503785776841	WITHOUT_CLASSIFICATION	1.8181824531026376E-4	DESIGN	3.391848206791132E-5	IMPLEMENTATION	3.0006473040623488E-5	DEFECT	2.1237216931977546E-6	TEST	1.7545002037002604E-6	DOCUMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999998336985588	WITHOUT_CLASSIFICATION	1.48718407559456E-7	DESIGN	7.862286213951175E-9	IMPLEMENTATION	5.805743793304469E-9	TEST	2.077281659836268E-9	DEFECT	1.8377220066659276E-9	DOCUMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.989074912273163	WITHOUT_CLASSIFICATION	0.0104200675348279	DESIGN	5.028635484780192E-4	DEFECT	8.105087942265566E-7	TEST	6.856961800399816E-7	DOCUMENTATION	6.604385568151346E-7	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9986433961998109	WITHOUT_CLASSIFICATION	0.0012423524814965802	DESIGN	1.043293460001344E-4	IMPLEMENTATION	7.425645314435396E-6	DEFECT	1.6833739642430064E-6	DOCUMENTATION	8.129534138522335E-7	TEST
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9998254536041848	WITHOUT_CLASSIFICATION	6.148628386593374E-5	DEFECT	5.765041327793925E-5	IMPLEMENTATION	5.162210201669601E-5	DESIGN	2.48643242454497E-6	DOCUMENTATION	1.3011642300202195E-6	TEST
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999765151569665	WITHOUT_CLASSIFICATION	1.4815604773113412E-5	DESIGN	4.743328991326642E-6	DEFECT	3.0714520312899516E-6	IMPLEMENTATION	7.754498389531498E-7	TEST	7.900739866193895E-8	DOCUMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9998598934379201	WITHOUT_CLASSIFICATION	6.988808230739409E-5	IMPLEMENTATION	6.137729859659148E-5	DESIGN	8.460381560516695E-6	DEFECT	2.662542886715455E-7	DOCUMENTATION	1.1454532666973769E-7	TEST
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9997662074152971	WITHOUT_CLASSIFICATION	1.5577230565029366E-4	IMPLEMENTATION	4.747692337826584E-5	DESIGN	2.680564682718537E-5	DEFECT	2.3634285835096078E-6	DOCUMENTATION	1.3742802635718309E-6	TEST
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999984559118611	WITHOUT_CLASSIFICATION	5.615808225767493E-7	DESIGN	3.6631219971333757E-7	DEFECT	3.1903691293625066E-7	TEST	1.8520904876054166E-7	IMPLEMENTATION	1.1194915497784151E-7	DOCUMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.83910499030495	WITHOUT_CLASSIFICATION	0.15805158615830578	DESIGN	0.0021555518965705556	IMPLEMENTATION	6.819718451299532E-4	DEFECT	3.057360686878661E-6	TEST	2.8424343568958345E-6	DOCUMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995973740308	WITHOUT_CLASSIFICATION	1.5848536467963243E-7	IMPLEMENTATION	1.5346593036693694E-7	DEFECT	3.775161398451518E-8	TEST	2.8842303493515308E-8	DESIGN	2.408075670374867E-8	DOCUMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998250179012	WITHOUT_CLASSIFICATION	5.458791774330919E-8	IMPLEMENTATION	5.307844038799014E-8	DEFECT	2.962419665730162E-8	TEST	2.526124676262046E-8	DESIGN	1.2430297342611809E-8	DOCUMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9946852389671473	WITHOUT_CLASSIFICATION	0.005305391727120656	DESIGN	8.444360267419857E-6	TEST	3.633057268531164E-7	DEFECT	2.8715090429274223E-7	IMPLEMENTATION	2.744888333653606E-7	DOCUMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999691250789372	WITHOUT_CLASSIFICATION	1.389606672876952E-5	IMPLEMENTATION	1.0791342615444752E-5	DEFECT	4.516303360133774E-6	TEST	8.878201695874564E-7	DOCUMENTATION	7.833881889048738E-7	DESIGN
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999967587552387	WITHOUT_CLASSIFICATION	3.0493989743831594E-6	DESIGN	1.5897899398917202E-7	TEST	2.3971275195879028E-8	IMPLEMENTATION	6.6041379569519916E-9	DEFECT	2.291379751744672E-9	DOCUMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.8433285327003329	WITHOUT_CLASSIFICATION	0.15649046064893615	DESIGN	9.82778266524623E-5	IMPLEMENTATION	5.014676064339831E-5	TEST	3.117189584592595E-5	DEFECT	1.4101675892110255E-6	DOCUMENTATION
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9949832603815574	WITHOUT_CLASSIFICATION	0.0036961863657577537	DESIGN	7.003161541153682E-4	IMPLEMENTATION	3.0821366649404344E-4	TEST	2.817308110018513E-4	DOCUMENTATION	3.0292621073625214E-5	DEFECT
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999991207287657	WITHOUT_CLASSIFICATION	4.929607165267047E-7	DEFECT	3.6650702323767286E-7	DESIGN	8.19879708425298E-9	TEST	6.930548609442519E-9	DOCUMENTATION	4.674148844218958E-9	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999737959649355	WITHOUT_CLASSIFICATION	2.5865753658295216E-5	DESIGN	1.6300383930482386E-7	DEFECT	1.3815926124806951E-7	IMPLEMENTATION	2.5426675107490022E-8	DOCUMENTATION	1.1691630524773033E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9991213724339155	WITHOUT_CLASSIFICATION	7.92998274008759E-4	DESIGN	4.728898243948232E-5	IMPLEMENTATION	1.8130947630868467E-5	DEFECT	1.7205325231995993E-5	TEST	3.0040367733716245E-6	DOCUMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999985641567714	WITHOUT_CLASSIFICATION	1.3269446100902107E-6	DESIGN	6.969419516972736E-8	IMPLEMENTATION	3.0917068419923783E-8	TEST	5.122992187681058E-9	DEFECT	3.1643628417079533E-9	DOCUMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9998878797383542	WITHOUT_CLASSIFICATION	1.0749701444482856E-4	DEFECT	4.460009656377435E-6	DESIGN	9.163225171239274E-8	IMPLEMENTATION	4.75943604188346E-8	TEST	2.4010932511194727E-8	DOCUMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999870384033486	WITHOUT_CLASSIFICATION	9.162301945592318E-6	DESIGN	2.229095885155525E-6	DEFECT	1.300495671638665E-6	IMPLEMENTATION	2.322357930895112E-7	TEST	3.7467356186440814E-8	DOCUMENTATION
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999409901625722	WITHOUT_CLASSIFICATION	5.3145651120669826E-5	IMPLEMENTATION	4.309081581896046E-6	TEST	1.0310290237083011E-6	DESIGN	5.228634787921632E-7	DOCUMENTATION	1.2122227661964892E-9	DEFECT
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.708897995490916	WITHOUT_CLASSIFICATION	0.2889529666224515	DESIGN	0.0018817971882615814	DEFECT	1.4336067457501768E-4	DOCUMENTATION	8.948184125422703E-5	TEST	3.439818254156011E-5	IMPLEMENTATION
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9997299290875659	WITHOUT_CLASSIFICATION	2.4199699616763798E-4	IMPLEMENTATION	1.1963853675387195E-5	DESIGN	7.977755347998865E-6	TEST	6.814199505919978E-6	DEFECT	1.3181077372390555E-6	DOCUMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999751076797202	WITHOUT_CLASSIFICATION	2.0537418835613137E-5	IMPLEMENTATION	2.5063876397815094E-6	TEST	9.75352725684507E-7	DEFECT	5.997888413185042E-7	DESIGN	2.733722374510874E-7	DOCUMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9995734695439334	WITHOUT_CLASSIFICATION	4.2650943360789215E-4	DESIGN	1.2473580450382339E-8	DOCUMENTATION	6.584655488908052E-9	TEST	1.5685920208593316E-9	DEFECT	3.9563076346382645E-10	IMPLEMENTATION
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999956915853497	WITHOUT_CLASSIFICATION	4.2429382190093744E-6	DESIGN	2.7877599217800587E-8	IMPLEMENTATION	2.284873803429156E-8	DOCUMENTATION	1.2493645229378539E-8	DEFECT	2.256448710941504E-9	TEST
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9950298813919191	WITHOUT_CLASSIFICATION	0.004926318227272662	DESIGN	3.342542331765936E-5	DEFECT	9.127833913814557E-6	IMPLEMENTATION	9.4709701610185E-7	DOCUMENTATION	3.0002656068646984E-7	TEST
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999744802805883	WITHOUT_CLASSIFICATION	1.2746511138929217E-5	DEFECT	8.241730211619921E-6	IMPLEMENTATION	4.3574504708644466E-6	DESIGN	1.3022502862244059E-7	TEST	4.3802561697650945E-8	DOCUMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9988731009079681	WITHOUT_CLASSIFICATION	7.983508577917445E-4	IMPLEMENTATION	2.6616747702487364E-4	DESIGN	3.9125770336129354E-5	DEFECT	1.542735848598666E-5	DOCUMENTATION	7.827628393293053E-6	TEST
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999210855796232	WITHOUT_CLASSIFICATION	6.243701073052176E-5	DEFECT	1.544044855518312E-5	IMPLEMENTATION	5.982887775954456E-7	DESIGN	3.479933565895599E-7	DOCUMENTATION	9.067895692641718E-8	TEST
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999999835192478	WITHOUT_CLASSIFICATION	8.712422185144115E-9	DEFECT	5.322989835788097E-9	DESIGN	2.0929161811667124E-9	TEST	2.780529269159968E-10	IMPLEMENTATION	7.437109786606104E-11	DOCUMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999643617689886	WITHOUT_CLASSIFICATION	3.4498912483173E-5	DESIGN	1.0715027017208974E-6	DEFECT	3.453904277113714E-8	DOCUMENTATION	2.0886044037294206E-8	IMPLEMENTATION	1.2390739597908637E-8	TEST
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999939614699042	WITHOUT_CLASSIFICATION	5.230536368011007E-6	DESIGN	7.186368377034126E-7	TEST	5.6901259337128756E-8	DEFECT	2.1660237271960656E-8	IMPLEMENTATION	1.0795393401116905E-8	DOCUMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9977690256065805	WITHOUT_CLASSIFICATION	0.002225217558483207	DESIGN	5.606420420253249E-6	DEFECT	7.005398655082817E-8	IMPLEMENTATION	6.166227849769995E-8	TEST	1.8698250989451376E-8	DOCUMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999966928304557	WITHOUT_CLASSIFICATION	2.8908577403381997E-6	DESIGN	2.4351391468733727E-7	TEST	1.1594562866014E-7	DEFECT	3.7228509807227264E-8	IMPLEMENTATION	1.9623750852905325E-8	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999995163116164	WITHOUT_CLASSIFICATION	3.803076033107059E-7	DEFECT	6.37209075006486E-8	DESIGN	3.644791581566009E-8	TEST	3.126058506449587E-9	DOCUMENTATION	8.589854141822337E-11	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9990230393288372	WITHOUT_CLASSIFICATION	7.696858063239624E-4	DESIGN	1.8442657198620524E-4	TEST	1.239908418452553E-5	IMPLEMENTATION	9.69831818662932E-6	DEFECT	7.508904814961922E-7	DOCUMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999400784728522	WITHOUT_CLASSIFICATION	2.761727808417851E-5	DEFECT	1.644305796060041E-5	DESIGN	6.122983902528643E-6	TEST	5.042354037767654E-6	IMPLEMENTATION	4.695853162915929E-6	DOCUMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999997242925227	WITHOUT_CLASSIFICATION	2.0367894536244902E-7	DESIGN	3.680536938382019E-8	IMPLEMENTATION	2.6401756724464248E-8	TEST	5.904157764521426E-9	DEFECT	2.9172479281914628E-9	DOCUMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999139574915589	WITHOUT_CLASSIFICATION	8.491059545431442E-5	DESIGN	1.0612702525803268E-6	DEFECT	4.826909580126975E-8	DOCUMENTATION	2.075877861200201E-8	TEST	1.6148598193918092E-9	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999871970737934	WITHOUT_CLASSIFICATION	1.0971121715654608E-5	DEFECT	8.194580245600201E-7	IMPLEMENTATION	7.096922660216105E-7	DESIGN	1.707039091614077E-7	DOCUMENTATION	1.3195029114308844E-7	TEST
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9998884510111259	WITHOUT_CLASSIFICATION	3.9221461477152427E-5	TEST	3.71570588373767E-5	DESIGN	3.5020664544692434E-5	DEFECT	1.4975339832978285E-7	DOCUMENTATION	5.061654658521654E-11	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9933895217898855	WITHOUT_CLASSIFICATION	0.006604487673894119	DESIGN	4.57302013607202E-6	IMPLEMENTATION	5.517160895018814E-7	DEFECT	4.6047732485701056E-7	DOCUMENTATION	4.053226701213315E-7	TEST
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9927715595588773	WITHOUT_CLASSIFICATION	0.006060578243507821	DESIGN	0.0011365957195964421	DEFECT	1.6680723327185857E-5	IMPLEMENTATION	1.2774393328688811E-5	TEST	1.8113613624160306E-6	DOCUMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.999981221998982	WITHOUT_CLASSIFICATION	1.646246973301732E-5	DEFECT	2.2012374743722227E-6	DESIGN	8.926890546461945E-8	DOCUMENTATION	2.2484637251726237E-8	TEST	2.5402678594860524E-9	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999945212839899	WITHOUT_CLASSIFICATION	5.411461934363149E-6	DEFECT	4.8669743286628676E-8	IMPLEMENTATION	1.6801203177028448E-8	TEST	1.437415206879246E-9	DOCUMENTATION	3.4571421511539686E-10	DESIGN
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999984453905435	WITHOUT_CLASSIFICATION	1.0522901457374714E-6	DESIGN	3.416785619836471E-7	DEFECT	1.597291665202973E-7	TEST	5.235973779465433E-10	DOCUMENTATION	3.8798496538906976E-10	IMPLEMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999988131395565	WITHOUT_CLASSIFICATION	1.1822811594751531E-6	DESIGN	3.802134579171507E-9	TEST	3.297372463592488E-10	DEFECT	2.6244924684276873E-10	DOCUMENTATION	1.849629304430212E-10	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9970933672964094	WITHOUT_CLASSIFICATION	0.0022174850919669843	DESIGN	6.418959966170777E-4	DEFECT	3.457481221616895E-5	IMPLEMENTATION	9.825870925495171E-6	DOCUMENTATION	2.8509318649191032E-6	TEST
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9847450383353271	DESIGN	0.015240627270497178	WITHOUT_CLASSIFICATION	6.704905561437782E-6	TEST	5.434296892541601E-6	IMPLEMENTATION	1.1411838251853324E-6	DOCUMENTATION	1.054007896395505E-6	DEFECT
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999814918904	WITHOUT_CLASSIFICATION	1.4410955114874894E-8	DESIGN	3.280887945222048E-9	DOCUMENTATION	5.249158049331044E-10	DEFECT	2.6822870414211293E-10	TEST	2.3121963997490828E-11	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999703664547583	WITHOUT_CLASSIFICATION	2.5126558537597743E-5	DEFECT	3.059427287129008E-6	DESIGN	1.331222036963803E-6	IMPLEMENTATION	6.828861057576757E-8	DOCUMENTATION	4.8048769536618465E-8	TEST
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.7232617491748256	WITHOUT_CLASSIFICATION	0.2480826918760333	IMPLEMENTATION	0.028397966163278197	DESIGN	1.1931804490986062E-4	DEFECT	8.836307481156898E-5	TEST	4.991166614150587E-5	DOCUMENTATION
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999634942052802	WITHOUT_CLASSIFICATION	1.625410882687034E-5	DOCUMENTATION	7.83321728684178E-6	DESIGN	7.72096171923654E-6	DEFECT	4.528856880244477E-6	TEST	1.6865000672756084E-7	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999995137948042	WITHOUT_CLASSIFICATION	2.534091631229752E-7	TEST	1.0081309755836936E-7	DEFECT	7.385103653617162E-8	DOCUMENTATION	5.656480890513313E-8	DESIGN	1.56708968453252E-9	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9963728910271016	WITHOUT_CLASSIFICATION	0.0035113994239657086	IMPLEMENTATION	6.0006646703508474E-5	DEFECT	3.9975439475686375E-5	DESIGN	1.113977796111863E-5	TEST	4.587684792548264E-6	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9982096218328573	WITHOUT_CLASSIFICATION	0.001596590271509105	DESIGN	1.9116633043169914E-4	DEFECT	1.6175949186253777E-6	DOCUMENTATION	8.55390068948785E-7	IMPLEMENTATION	1.485802143075948E-7	TEST
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999668314785103	WITHOUT_CLASSIFICATION	3.023667775254353E-5	DESIGN	2.5846265723005337E-6	DEFECT	1.9088444646341337E-7	DOCUMENTATION	1.0937515815606308E-7	IMPLEMENTATION	4.695756034183114E-8	TEST
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.999863936762483	WITHOUT_CLASSIFICATION	1.0934982267478137E-4	DESIGN	2.509909351285356E-5	DEFECT	9.062941972242453E-7	TEST	7.064222258093642E-7	DOCUMENTATION	1.604906411738917E-9	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999882783239601	WITHOUT_CLASSIFICATION	1.0431263055216152E-5	DESIGN	5.320681396260734E-7	DEFECT	5.318300150698538E-7	TEST	2.0391071235590908E-7	IMPLEMENTATION	2.260411765288978E-8	DOCUMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998634183839504	WITHOUT_CLASSIFICATION	1.1750549092450848E-4	DESIGN	1.0666391911857704E-5	IMPLEMENTATION	4.730957204791602E-6	DEFECT	2.415924166943503E-6	TEST	1.2628518415929717E-6	DOCUMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.999982166308811	WITHOUT_CLASSIFICATION	1.3668411741135241E-5	IMPLEMENTATION	1.948651450319377E-6	TEST	1.6051866865077758E-6	DEFECT	3.163509582698492E-7	DOCUMENTATION	2.950903528138821E-7	DESIGN
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999991611936083	WITHOUT_CLASSIFICATION	2.69990705585801E-7	DEFECT	2.2734755002981634E-7	DESIGN	2.2280336855612297E-7	TEST	8.519241380930492E-8	IMPLEMENTATION	3.347235376879603E-8	DOCUMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999783187711432	WITHOUT_CLASSIFICATION	1.7686825765272506E-5	DESIGN	1.871375901911661E-6	TEST	1.2164492814754602E-6	DEFECT	8.675733554042922E-7	IMPLEMENTATION	3.900455276812769E-8	DOCUMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9895069457395336	WITHOUT_CLASSIFICATION	0.009259851547548024	DESIGN	0.0012238673108234302	DEFECT	6.632144979098646E-6	DOCUMENTATION	2.3971636434517934E-6	TEST	3.0609347250032177E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998634183839504	WITHOUT_CLASSIFICATION	1.1750549092450848E-4	DESIGN	1.0666391911857704E-5	IMPLEMENTATION	4.730957204791602E-6	DEFECT	2.415924166943503E-6	TEST	1.2628518415929717E-6	DOCUMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9909476847087016	WITHOUT_CLASSIFICATION	0.006485071606750614	DESIGN	0.0018605484400644396	DEFECT	6.844908020081532E-4	TEST	1.906577566537791E-5	DOCUMENTATION	3.1386668097090313E-6	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999938966932741	WITHOUT_CLASSIFICATION	4.155294493153711E-6	DESIGN	1.8443444348487631E-6	DEFECT	8.91135829457398E-8	TEST	1.1125692215890576E-8	DOCUMENTATION	3.4285228098800865E-9	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9924582509778435	WITHOUT_CLASSIFICATION	0.007539285164983492	DESIGN	2.1253236432376945E-6	IMPLEMENTATION	1.925619694815814E-7	TEST	1.2615838579158633E-7	DEFECT	1.981317452144132E-8	DOCUMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999854766620323	WITHOUT_CLASSIFICATION	1.0453669161974194E-5	DEFECT	3.988697242464951E-6	DESIGN	5.114811250331842E-8	TEST	2.0067707495754286E-8	DOCUMENTATION	9.755743193002994E-9	IMPLEMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999026075645311	WITHOUT_CLASSIFICATION	3.494646921874431E-5	DEFECT	3.1757645856347476E-5	DESIGN	1.7652120300814188E-5	IMPLEMENTATION	9.14386532168353E-6	DOCUMENTATION	3.8923347713123595E-6	TEST
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999313444985379	WITHOUT_CLASSIFICATION	4.7516088928715713E-5	DEFECT	2.051710451252248E-5	DESIGN	4.215421171860487E-7	DOCUMENTATION	1.6353974858192252E-7	TEST	3.722615501932409E-8	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999414801489381	WITHOUT_CLASSIFICATION	5.84158976337116E-5	DESIGN	5.9598084607642645E-8	TEST	3.9677486180298455E-8	DOCUMENTATION	3.612762402967909E-9	IMPLEMENTATION	1.0650949798515154E-9	DEFECT
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.8944297669624085	DESIGN	0.1001554121956386	WITHOUT_CLASSIFICATION	0.002845142810367155	DEFECT	0.0016538549954031548	IMPLEMENTATION	8.319472400469087E-4	TEST	8.387579613573381E-5	DOCUMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999997418458334	WITHOUT_CLASSIFICATION	2.2344773719020564E-7	DEFECT	1.7981690284484696E-8	DOCUMENTATION	1.3746305056021724E-8	DESIGN	2.221103557835712E-9	TEST	7.573307177714704E-10	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999995274726752	WITHOUT_CLASSIFICATION	3.569748942810662E-7	DEFECT	8.964729227239675E-8	DESIGN	1.4942830211594954E-8	IMPLEMENTATION	6.660053604389898E-9	TEST	4.302254402020084E-9	DOCUMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.998977640348111	WITHOUT_CLASSIFICATION	6.114027998975722E-4	DESIGN	2.959261125879709E-4	DEFECT	9.652778292378156E-5	IMPLEMENTATION	1.5119934269767566E-5	TEST	3.3830222098623503E-6	DOCUMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9996713146448513	WITHOUT_CLASSIFICATION	1.7229709968519298E-4	IMPLEMENTATION	8.457348079180346E-5	TEST	6.567224667911927E-5	DEFECT	5.0609823786717045E-6	DESIGN	1.081545613966992E-6	DOCUMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999186954906027	WITHOUT_CLASSIFICATION	5.582282657970312E-5	DESIGN	2.5242802388577713E-5	DEFECT	1.4781897324898903E-7	IMPLEMENTATION	6.462572814020013E-8	DOCUMENTATION	2.643572762380452E-8	TEST
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9992281391026592	WITHOUT_CLASSIFICATION	7.531543081967105E-4	IMPLEMENTATION	1.4285590749756695E-5	DOCUMENTATION	3.2311538604369187E-6	DESIGN	8.576004967241689E-7	TEST	3.322440372162953E-7	DEFECT
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999943859325843	WITHOUT_CLASSIFICATION	2.9450898493363524E-6	IMPLEMENTATION	1.936920043072806E-6	DESIGN	5.64756573212889E-7	DEFECT	1.0883016358184052E-7	DOCUMENTATION	5.8470786585379996E-8	TEST
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999994357283754	WITHOUT_CLASSIFICATION	4.72868681732774E-7	DEFECT	5.5605984739149964E-8	DESIGN	2.5164227549450777E-8	DOCUMENTATION	8.229520554214283E-9	IMPLEMENTATION	2.4032101539709253E-9	TEST
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999002980621	WITHOUT_CLASSIFICATION	9.021437863078472E-8	DESIGN	7.586549975434396E-9	DOCUMENTATION	1.2653324359930061E-9	DEFECT	5.957207607880178E-10	IMPLEMENTATION	3.995610184721383E-11	TEST
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999957492871283	WITHOUT_CLASSIFICATION	2.1019391684636543E-6	DESIGN	1.748220413495355E-6	DEFECT	2.9288840938921404E-7	DOCUMENTATION	8.026841589905331E-8	TEST	2.7396464441017837E-8	IMPLEMENTATION
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9881046489039759	WITHOUT_CLASSIFICATION	0.010265666200861454	IMPLEMENTATION	0.001603215483031059	DESIGN	2.2569571861351045E-5	TEST	2.1685375210723537E-6	DEFECT	1.7313027491464873E-6	DOCUMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999705827139975	WITHOUT_CLASSIFICATION	2.677922390818054E-5	DESIGN	1.781897872824353E-6	IMPLEMENTATION	8.061893948186597E-7	DEFECT	4.5120547470524204E-8	DOCUMENTATION	4.854279192347017E-9	TEST
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9997598982159845	WITHOUT_CLASSIFICATION	2.3135751368783355E-4	IMPLEMENTATION	6.443241208382568E-6	DESIGN	1.1936173523564956E-6	DEFECT	1.0258251668847115E-6	DOCUMENTATION	8.158660000032826E-8	TEST
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.999983249125021	WITHOUT_CLASSIFICATION	1.004909068364874E-5	DESIGN	6.2351146589060214E-6	IMPLEMENTATION	2.285743112937858E-7	DEFECT	2.015586114804605E-7	TEST	3.653671365654025E-8	DOCUMENTATION
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999997152807382	WITHOUT_CLASSIFICATION	2.263837912528096E-7	DESIGN	3.996397182053995E-8	DEFECT	1.228086304427454E-8	IMPLEMENTATION	5.9124119714046906E-9	DOCUMENTATION	1.7822386386355585E-10	TEST
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999992149515138	WITHOUT_CLASSIFICATION	7.768880275264105E-7	DESIGN	6.309030086323833E-9	IMPLEMENTATION	9.638406136686578E-10	TEST	4.6012141921209106E-10	DOCUMENTATION	4.2746658281741024E-10	DEFECT
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999998000921307	WITHOUT_CLASSIFICATION	1.932923159072016E-7	DESIGN	3.656288462156381E-9	DEFECT	1.967803732961543E-9	TEST	6.544749067126652E-10	DOCUMENTATION	3.3698633351007127E-10	IMPLEMENTATION
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999730674174534	WITHOUT_CLASSIFICATION	2.457297509114839E-5	DEFECT	1.1778481069266466E-6	DESIGN	1.1195781174560461E-6	TEST	5.878130724837807E-8	DOCUMENTATION	3.3999237631446414E-9	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.7725595910620947	WITHOUT_CLASSIFICATION	0.19783494276379032	DESIGN	0.02939492070731353	DEFECT	2.058588286530528E-4	TEST	2.6483864416222026E-6	IMPLEMENTATION	2.03825170675015E-6	DOCUMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9931968832966412	WITHOUT_CLASSIFICATION	0.006683101804222527	DESIGN	5.658377387584882E-5	TEST	4.969715873384033E-5	DEFECT	1.3285367152049244E-5	IMPLEMENTATION	4.485993746016665E-7	DOCUMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.8172064327551829	WITHOUT_CLASSIFICATION	0.17815638827466163	DESIGN	0.004567192231394872	IMPLEMENTATION	5.507896518438225E-5	TEST	1.3815181434735187E-5	DOCUMENTATION	1.0925921414620136E-6	DEFECT
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9694702070421026	DESIGN	0.017225203645589736	DEFECT	0.00788644333995662	WITHOUT_CLASSIFICATION	0.005348002288496487	IMPLEMENTATION	6.830109800804223E-5	DOCUMENTATION	1.8425858464736122E-6	TEST
// and perform the load	WITHOUT_CLASSIFICATION	0.9999959245870947	WITHOUT_CLASSIFICATION	2.6921035898769504E-6	IMPLEMENTATION	1.0048819129628134E-6	DESIGN	2.127246634182591E-7	DOCUMENTATION	1.2293147157088257E-7	DEFECT	4.2771267300054065E-8	TEST
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.4750679231664115	DESIGN	0.43383658016151616	WITHOUT_CLASSIFICATION	0.06689668986722956	DEFECT	0.022106631974959837	IMPLEMENTATION	0.001992598080576446	DOCUMENTATION	9.957674930647879E-5	TEST
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9981083555227783	WITHOUT_CLASSIFICATION	0.0010262093535144986	DEFECT	7.546961807965662E-4	DESIGN	9.9404059504575E-5	IMPLEMENTATION	7.64132792216421E-6	DOCUMENTATION	3.6935554839515175E-6	TEST
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999644936649733	WITHOUT_CLASSIFICATION	3.376090913673016E-5	DESIGN	1.4263807112611206E-6	DEFECT	2.3998615512470934E-7	IMPLEMENTATION	5.0942779970847645E-8	TEST	2.8116243670409928E-8	DOCUMENTATION
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999171401209	WITHOUT_CLASSIFICATION	6.779847481200067E-8	DESIGN	6.045478966948601E-9	DEFECT	5.895559022358084E-9	IMPLEMENTATION	3.034543107041606E-9	TEST	8.582319394919012E-11	DOCUMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999990917455426	WITHOUT_CLASSIFICATION	3.2796620507550165E-7	TEST	2.8726659485113755E-7	DESIGN	2.8674119663189614E-7	DEFECT	5.31068417874475E-9	IMPLEMENTATION	9.697765062469723E-10	DOCUMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9998452003731644	WITHOUT_CLASSIFICATION	1.0793843398999652E-4	DESIGN	3.3056211111880246E-5	DEFECT	1.3432075042857871E-5	TEST	2.0782824944341656E-7	IMPLEMENTATION	1.6507844152645493E-7	DOCUMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9990859861521125	WITHOUT_CLASSIFICATION	4.912822187703707E-4	DEFECT	3.998265794255956E-4	DESIGN	1.6710995483960788E-5	TEST	3.256600757079277E-6	IMPLEMENTATION	2.9374534503496325E-6	DOCUMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999295168677	WITHOUT_CLASSIFICATION	5.371751345340178E-8	DESIGN	1.4613604992163308E-8	DEFECT	9.552068330894855E-10	TEST	6.770139640510853E-10	DOCUMENTATION	5.197931723372434E-10	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999948991789482	WITHOUT_CLASSIFICATION	2.5746383062142766E-6	DEFECT	1.7203447867199356E-6	DESIGN	7.720664614129873E-7	DOCUMENTATION	2.422972959326739E-8	TEST	9.541767854493336E-9	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9845658483111879	WITHOUT_CLASSIFICATION	0.008288396197859545	IMPLEMENTATION	0.007118764094308658	DESIGN	1.3212881900879575E-5	DOCUMENTATION	1.0041303127905026E-5	DEFECT	3.737211615202436E-6	TEST
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9845658483111879	WITHOUT_CLASSIFICATION	0.008288396197859545	IMPLEMENTATION	0.007118764094308658	DESIGN	1.3212881900879575E-5	DOCUMENTATION	1.0041303127905026E-5	DEFECT	3.737211615202436E-6	TEST
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9971250720619655	WITHOUT_CLASSIFICATION	0.0019324093690898372	DEFECT	9.172775052433907E-4	DESIGN	2.0201916309522523E-5	TEST	2.9451041561228768E-6	IMPLEMENTATION	2.0940432355663843E-6	DOCUMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999446746134948	WITHOUT_CLASSIFICATION	5.460539926825454E-5	DESIGN	5.208815474541313E-7	TEST	9.84310452109543E-8	IMPLEMENTATION	8.479115301183041E-8	DEFECT	1.5883491498746785E-8	DOCUMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999957937364528	WITHOUT_CLASSIFICATION	3.024614630148228E-6	DESIGN	9.473815220647468E-7	IMPLEMENTATION	2.089733231242029E-7	DEFECT	1.6524853132182244E-8	TEST	8.769218829855628E-9	DOCUMENTATION
/**	WITHOUT_CLASSIFICATION	0.9471215356924972	DESIGN	0.047295764984962636	WITHOUT_CLASSIFICATION	0.001798892598532828	DOCUMENTATION	0.0015183353542191267	TEST	0.0013744368199287416	IMPLEMENTATION	8.910345498594567E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999964936313608	WITHOUT_CLASSIFICATION	1.280804084814178E-6	DEFECT	9.190653780455359E-7	DESIGN	6.928963260542798E-7	IMPLEMENTATION	4.038019667626665E-7	DOCUMENTATION	2.0980088342161424E-7	TEST
// ignore	WITHOUT_CLASSIFICATION	0.9999964936313608	WITHOUT_CLASSIFICATION	1.280804084814178E-6	DEFECT	9.190653780455359E-7	DESIGN	6.928963260542798E-7	IMPLEMENTATION	4.038019667626665E-7	DOCUMENTATION	2.0980088342161424E-7	TEST
//        }	WITHOUT_CLASSIFICATION	0.9999819540020556	WITHOUT_CLASSIFICATION	5.651560529495596E-6	DEFECT	3.983518532405183E-6	IMPLEMENTATION	3.618185102148811E-6	DOCUMENTATION	3.371647222171962E-6	TEST	1.4210865582854982E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999915429897571	WITHOUT_CLASSIFICATION	7.992485794200737E-6	DESIGN	2.878526180775839E-7	DEFECT	9.6442439411413E-8	IMPLEMENTATION	4.9174824628710263E-8	TEST	3.1054566472628056E-8	DOCUMENTATION
//	WITHOUT_CLASSIFICATION	0.9999315521395652	WITHOUT_CLASSIFICATION	1.7550753858834037E-5	DESIGN	1.5944276763583692E-5	TEST	1.5816164288043736E-5	DOCUMENTATION	9.767414401283011E-6	IMPLEMENTATION	9.369251123028106E-6	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999361552287784	WITHOUT_CLASSIFICATION	4.445922397894344E-5	IMPLEMENTATION	1.1683005555065483E-5	DEFECT	6.306251187237426E-6	TEST	9.131307400164846E-7	DESIGN	4.83159760233153E-7	DOCUMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9998446853811167	WITHOUT_CLASSIFICATION	1.5466318962355466E-4	DEFECT	3.1749604301829075E-7	DESIGN	1.4946675196178558E-7	IMPLEMENTATION	1.0402481861981645E-7	TEST	8.044164610500878E-8	DOCUMENTATION
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999576302810124	WITHOUT_CLASSIFICATION	1.815503518888808E-5	IMPLEMENTATION	1.554740777432823E-5	TEST	3.8091962631830375E-6	DESIGN	2.8618559714675954E-6	DOCUMENTATION	1.9962237899679074E-6	DEFECT
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999952743269543	WITHOUT_CLASSIFICATION	4.289809926879999E-6	DEFECT	3.204692906263885E-7	DESIGN	7.610810320844376E-8	DOCUMENTATION	2.1735688017884555E-8	IMPLEMENTATION	1.7550036917420687E-8	TEST
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999994323311281	WITHOUT_CLASSIFICATION	2.156722046206398E-7	DESIGN	1.7522814760138258E-7	IMPLEMENTATION	9.81632240597604E-8	DEFECT	5.2908545663428714E-8	TEST	2.5696749910009805E-8	DOCUMENTATION
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999969210294855	WITHOUT_CLASSIFICATION	1.7585551075036029E-6	DESIGN	1.012035170813039E-6	DEFECT	3.0061232180353907E-7	TEST	7.631095052475171E-9	DOCUMENTATION	1.3681947567387679E-10	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988992745135	WITHOUT_CLASSIFICATION	3.792885321368638E-7	DESIGN	3.709991767163704E-7	TEST	2.1714853563335892E-7	IMPLEMENTATION	1.227220326752909E-7	DEFECT	1.0567209105739464E-8	DOCUMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988992745135	WITHOUT_CLASSIFICATION	3.792885321368638E-7	DESIGN	3.709991767163704E-7	TEST	2.1714853563335892E-7	IMPLEMENTATION	1.227220326752909E-7	DEFECT	1.0567209105739464E-8	DOCUMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9995010389196098	WITHOUT_CLASSIFICATION	4.698278522527012E-4	DESIGN	2.2777137287613697E-5	IMPLEMENTATION	3.5281459542171346E-6	TEST	1.4362166219673673E-6	DOCUMENTATION	1.3917282736798764E-6	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999905022984876	WITHOUT_CLASSIFICATION	3.5488433742160788E-6	IMPLEMENTATION	2.217936096277431E-6	DESIGN	1.4667947000771553E-6	DEFECT	1.3113013163064796E-6	DOCUMENTATION	9.528260254576897E-7	TEST
// Custom sql	WITHOUT_CLASSIFICATION	0.9999962813167237	WITHOUT_CLASSIFICATION	1.8892985445854447E-6	DESIGN	7.879686810070216E-7	DEFECT	4.4917883258348447E-7	TEST	3.0773765638569105E-7	DOCUMENTATION	2.844995617780787E-7	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9990119416259859	WITHOUT_CLASSIFICATION	7.88417241287145E-4	DESIGN	9.307401056367992E-5	TEST	4.4123776512593095E-5	IMPLEMENTATION	3.816554964082596E-5	DEFECT	2.4277796009662656E-5	DOCUMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999805682480623	WITHOUT_CLASSIFICATION	5.66130659067975E-6	IMPLEMENTATION	4.622049603472307E-6	DEFECT	3.1441336702575493E-6	DOCUMENTATION	3.0435866699880205E-6	DESIGN	2.960675403166546E-6	TEST
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9987460629896185	WITHOUT_CLASSIFICATION	0.001235042540260055	DESIGN	1.2966226203775918E-5	IMPLEMENTATION	4.1930348135183955E-6	TEST	1.2369914088344259E-6	DOCUMENTATION	4.982176952900848E-7	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996560414122228	WITHOUT_CLASSIFICATION	3.327569322630348E-4	DESIGN	9.032168015846872E-6	IMPLEMENTATION	9.71801295373481E-7	TEST	6.27815282277141E-7	DEFECT	5.69870920827033E-7	DOCUMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999805682480623	WITHOUT_CLASSIFICATION	5.66130659067975E-6	IMPLEMENTATION	4.622049603472307E-6	DEFECT	3.1441336702575493E-6	DOCUMENTATION	3.0435866699880205E-6	DESIGN	2.960675403166546E-6	TEST
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999793590633276	WITHOUT_CLASSIFICATION	2.014879984023378E-5	IMPLEMENTATION	3.298664877492051E-7	DEFECT	1.1360257355730072E-7	DESIGN	3.198004232690058E-8	TEST	1.668772866127216E-8	DOCUMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9998307726076411	WITHOUT_CLASSIFICATION	1.2413979845752143E-4	DEFECT	3.972160482494438E-5	DESIGN	4.1827867285428254E-6	DOCUMENTATION	7.07780670488784E-7	TEST	4.754216774510573E-7	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9997445210627239	WITHOUT_CLASSIFICATION	2.4117367156726807E-4	DESIGN	1.3449763328396593E-5	IMPLEMENTATION	5.954999561668366E-7	DEFECT	2.2525284305514475E-7	TEST	3.474958132412971E-8	DOCUMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9911265651873654	WITHOUT_CLASSIFICATION	0.008871512026331503	DESIGN	1.2561383647249382E-6	DOCUMENTATION	4.169428243917905E-7	TEST	2.3983905706526323E-7	IMPLEMENTATION	9.866056946708418E-9	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999995274726752	WITHOUT_CLASSIFICATION	3.569748942810662E-7	DEFECT	8.964729227239675E-8	DESIGN	1.4942830211594954E-8	IMPLEMENTATION	6.660053604389898E-9	TEST	4.302254402020084E-9	DOCUMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9996502413383697	WITHOUT_CLASSIFICATION	3.484774878446265E-4	DESIGN	4.982496676989252E-7	DEFECT	4.284767437852687E-7	TEST	3.197404447986721E-7	DOCUMENTATION	3.470692935204005E-8	IMPLEMENTATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9984189345585063	WITHOUT_CLASSIFICATION	0.0013047892124318828	DEFECT	1.8827660762201328E-4	DESIGN	6.130224749537112E-5	TEST	1.5382981206796595E-5	DOCUMENTATION	1.1314392737791804E-5	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9986317343599205	WITHOUT_CLASSIFICATION	0.0013261394970238208	DESIGN	2.8124744706318185E-5	DOCUMENTATION	1.1969345202670829E-5	IMPLEMENTATION	1.5424485578209379E-6	TEST	4.896045888303546E-7	DEFECT
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999556753096286	WITHOUT_CLASSIFICATION	2.3578581291856284E-5	IMPLEMENTATION	1.6534949210479648E-5	DESIGN	2.723127107757814E-6	DOCUMENTATION	1.2803708302452248E-6	TEST	2.0766193106202773E-7	DEFECT
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999952211922489	WITHOUT_CLASSIFICATION	3.7772585342041857E-6	IMPLEMENTATION	5.816045551002995E-7	TEST	1.9345859347393578E-7	DESIGN	1.549152377339571E-7	DEFECT	7.157083049602478E-8	DOCUMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9998940842938925	WITHOUT_CLASSIFICATION	5.980728174671154E-5	IMPLEMENTATION	2.1095746435750016E-5	DEFECT	1.001057223658457E-5	DESIGN	9.998012178741332E-6	TEST	5.004093509622251E-6	DOCUMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9963068978269665	WITHOUT_CLASSIFICATION	0.0034610682157488496	DESIGN	1.1231240665432342E-4	IMPLEMENTATION	6.683048949357062E-5	TEST	3.878389234701475E-5	DEFECT	1.4107168789895507E-5	DOCUMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9989690653315341	WITHOUT_CLASSIFICATION	0.001016609902247338	DESIGN	1.3061095734466713E-5	IMPLEMENTATION	9.522544926908283E-7	TEST	3.008363998123032E-7	DOCUMENTATION	1.05795916602494E-8	DEFECT
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999865552001355	WITHOUT_CLASSIFICATION	9.13322745919862E-6	DESIGN	3.4245392721865727E-6	DEFECT	7.0275315225745E-7	DOCUMENTATION	1.260503020160488E-7	IMPLEMENTATION	5.822967883172418E-8	TEST
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9947835945458604	WITHOUT_CLASSIFICATION	0.0032832140856678066	DESIGN	0.0012306311937970852	IMPLEMENTATION	3.0092571379877243E-4	DEFECT	2.231946276318087E-4	TEST	1.7843983324408236E-4	DOCUMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9947835945458604	WITHOUT_CLASSIFICATION	0.0032832140856678066	DESIGN	0.0012306311937970852	IMPLEMENTATION	3.0092571379877243E-4	DEFECT	2.231946276318087E-4	TEST	1.7843983324408236E-4	DOCUMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998791881509553	WITHOUT_CLASSIFICATION	1.0067450074729685E-4	DESIGN	1.733472688538989E-5	DEFECT	1.5512822489589993E-6	TEST	1.0282367349893745E-6	IMPLEMENTATION	2.231024281940178E-7	DOCUMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999919748233274	WITHOUT_CLASSIFICATION	4.3228768854719266E-6	DESIGN	3.390165145479168E-6	IMPLEMENTATION	2.9836860606540245E-7	DEFECT	1.3300071733164369E-8	DOCUMENTATION	4.659637777505817E-10	TEST
/*package*/	WITHOUT_CLASSIFICATION	0.9986516789934132	WITHOUT_CLASSIFICATION	0.0011729718643430907	DESIGN	8.954263502556767E-5	IMPLEMENTATION	4.855496646078607E-5	DOCUMENTATION	2.8591379952871772E-5	TEST	8.660160804398131E-6	DEFECT
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9997850192680128	WITHOUT_CLASSIFICATION	1.5696995849764879E-4	IMPLEMENTATION	3.234957433454966E-5	DESIGN	2.3577211185625487E-5	DEFECT	1.210785508689706E-6	TEST	8.732024607099872E-7	DOCUMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999968569591545	WITHOUT_CLASSIFICATION	1.5432234816758993E-6	DEFECT	8.832336307697387E-7	DESIGN	3.1599068126430726E-7	IMPLEMENTATION	2.961219892715876E-7	DOCUMENTATION	1.0447106247446291E-7	TEST
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9995852947325572	WITHOUT_CLASSIFICATION	2.6944684751496804E-4	DEFECT	1.006917604454543E-4	IMPLEMENTATION	2.9358724693980216E-5	DESIGN	1.5006678407920638E-5	DOCUMENTATION	2.0125638036742004E-7	TEST
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999851248446627	WITHOUT_CLASSIFICATION	1.03709114396519E-5	IMPLEMENTATION	3.983973938585951E-6	DEFECT	2.919742935363277E-7	TEST	1.303336689428897E-7	DESIGN	9.796199672947872E-8	DOCUMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9153024014514152	WITHOUT_CLASSIFICATION	0.05997411821277235	DESIGN	0.02471617168827331	DEFECT	4.974601273019182E-6	TEST	1.2568426400772186E-6	IMPLEMENTATION	1.077203626015029E-6	DOCUMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999721570528612	WITHOUT_CLASSIFICATION	1.697608730840122E-5	IMPLEMENTATION	8.196888561086501E-6	DESIGN	1.944439838357228E-6	TEST	3.744823353652323E-7	DOCUMENTATION	3.510490956516958E-7	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9985241741047081	WITHOUT_CLASSIFICATION	0.001316247797751196	IMPLEMENTATION	1.1442852405795226E-4	DEFECT	3.146637673386782E-5	DESIGN	1.2891973955135216E-5	TEST	7.912227938261873E-7	DOCUMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984088388512504	WITHOUT_CLASSIFICATION	0.001539620208391176	DESIGN	2.8442738581630662E-5	IMPLEMENTATION	8.61733168838834E-6	DOCUMENTATION	7.710110821733354E-6	TEST	6.770759266553057E-6	DEFECT
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9964907769668483	DESIGN	0.0034585866609427415	WITHOUT_CLASSIFICATION	4.9188347773766434E-5	DEFECT	1.4339784841653188E-6	TEST	7.548734162294548E-9	IMPLEMENTATION	6.497217000325391E-9	DOCUMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.5882281661790134	WITHOUT_CLASSIFICATION	0.3107937786153199	IMPLEMENTATION	0.10086920884212101	DESIGN	9.470490801703535E-5	DOCUMENTATION	9.476893975700138E-6	TEST	4.664561552793807E-6	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999885915224838	WITHOUT_CLASSIFICATION	1.1350879998124696E-5	DESIGN	3.910131809723538E-8	DEFECT	1.6498220647476634E-8	TEST	1.129707530891081E-9	IMPLEMENTATION	8.682719296666843E-10	DOCUMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9516006361277631	WITHOUT_CLASSIFICATION	0.04839703260721842	DESIGN	1.5603885034752222E-6	TEST	6.003708314861205E-7	DEFECT	1.2456980252453818E-7	DOCUMENTATION	4.593588094006639E-8	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999298208825471	WITHOUT_CLASSIFICATION	6.971185171794767E-5	DESIGN	2.3012752152949953E-7	DOCUMENTATION	1.2041055331055327E-7	DEFECT	8.000743155512443E-8	IMPLEMENTATION	3.672022842637616E-8	TEST
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9627162911875284	WITHOUT_CLASSIFICATION	0.03715728676479451	DESIGN	1.1905236767657756E-4	DEFECT	4.1202978643012295E-6	TEST	2.2656437509641997E-6	IMPLEMENTATION	9.837383851292843E-7	DOCUMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999979708954859	WITHOUT_CLASSIFICATION	9.272728098188288E-7	IMPLEMENTATION	7.700009319754427E-7	DEFECT	1.7298283966475554E-7	TEST	8.559258239063531E-8	DESIGN	7.325535034810209E-8	DOCUMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9998739205045933	WITHOUT_CLASSIFICATION	9.75961622032092E-5	DESIGN	2.0570439547317493E-5	IMPLEMENTATION	4.1678388553864115E-6	TEST	2.9189744205218298E-6	DEFECT	8.260803802269727E-7	DOCUMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999911898446537	WITHOUT_CLASSIFICATION	8.614439058743402E-6	DESIGN	1.9451439554047888E-7	DEFECT	6.088706290808775E-10	DOCUMENTATION	5.87044944761541E-10	TEST	5.976385582451093E-12	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999999652412396	WITHOUT_CLASSIFICATION	3.086420050983406E-8	DEFECT	2.429850683074581E-9	DESIGN	8.368399037964004E-10	IMPLEMENTATION	3.2555353639431803E-10	DOCUMENTATION	3.023157517533787E-10	TEST
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9930969792022585	WITHOUT_CLASSIFICATION	0.0033383725580226798	DESIGN	0.00263245358287223	DEFECT	9.242255981898234E-4	IMPLEMENTATION	6.608979703087392E-6	TEST	1.3600789536904586E-6	DOCUMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9997837602391523	WITHOUT_CLASSIFICATION	2.057086021236001E-4	DESIGN	5.4590624413657086E-6	IMPLEMENTATION	4.4983207823385176E-6	TEST	5.445869348341228E-7	DEFECT	2.9188565438404237E-8	DOCUMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999999354621	WITHOUT_CLASSIFICATION	4.5909069860252727E-11	TEST	7.67686921228731E-12	DEFECT	7.184914276271497E-12	DESIGN	2.6250092128797267E-12	IMPLEMENTATION	1.1421568404721597E-12	DOCUMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999768799536273	WITHOUT_CLASSIFICATION	1.5501534476698146E-5	DEFECT	6.986074455755338E-6	DOCUMENTATION	5.506241133268934E-7	DESIGN	5.5417320245125414E-8	IMPLEMENTATION	2.6396006667211395E-8	TEST
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999768799536273	WITHOUT_CLASSIFICATION	1.5501534476698146E-5	DEFECT	6.986074455755338E-6	DOCUMENTATION	5.506241133268934E-7	DESIGN	5.5417320245125414E-8	IMPLEMENTATION	2.6396006667211395E-8	TEST
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9812850722817524	WITHOUT_CLASSIFICATION	0.007002791652713267	DESIGN	0.0064583220256561324	IMPLEMENTATION	0.0027827483829357316	TEST	0.0019696568929113045	DEFECT	5.014087640310532E-4	DOCUMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9883673488234048	WITHOUT_CLASSIFICATION	0.006543670647035123	IMPLEMENTATION	0.004995732002028615	DESIGN	5.692538184798973E-5	DEFECT	2.625996383902866E-5	TEST	1.0063181844556098E-5	DOCUMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.999993088950112	WITHOUT_CLASSIFICATION	2.9547236064893146E-6	DOCUMENTATION	2.7979615332008377E-6	IMPLEMENTATION	4.768037944683967E-7	DEFECT	3.4930828325753943E-7	TEST	3.322526706309954E-7	DESIGN
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.889609673006624	WITHOUT_CLASSIFICATION	0.11038927133023375	DESIGN	9.691187525804175E-7	DEFECT	4.8171327862367754E-8	TEST	2.4679945221648732E-8	DOCUMENTATION	1.3693116511386985E-8	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999071650721638	WITHOUT_CLASSIFICATION	6.431814165245869E-5	DESIGN	1.0317724617154375E-5	DOCUMENTATION	9.59076314889583E-6	IMPLEMENTATION	7.794790088960924E-6	DEFECT	8.135083288030416E-7	TEST
//TODO find a decent name before documenting	DOCUMENTATION	0.853719149459129	WITHOUT_CLASSIFICATION	0.12353158642030221	DOCUMENTATION	0.014432046736837264	IMPLEMENTATION	0.004881963666888511	DESIGN	0.0033297977361555157	DEFECT	1.0545598068759065E-4	TEST
//FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9812607066136131	WITHOUT_CLASSIFICATION	0.01249388114862689	DESIGN	0.006186815372809504	IMPLEMENTATION	2.743986400332108E-5	TEST	1.98070022255417E-5	DEFECT	1.1349998721685126E-5	DOCUMENTATION
// For a one-to-many, a <bag> is not really a bag; // it is *really* a set, since it can't contain the // same element twice. It could be considered a bug // in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9998706954019343	WITHOUT_CLASSIFICATION	6.633371867117036E-5	IMPLEMENTATION	4.0258132912736216E-5	DEFECT	2.268487393579377E-5	DESIGN	1.9929244296325958E-8	TEST	7.943301709855168E-9	DOCUMENTATION
// RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9999152601239079	WITHOUT_CLASSIFICATION	4.1612381168531526E-5	IMPLEMENTATION	3.584512719716469E-5	DEFECT	5.586278090038887E-6	DESIGN	1.2508681084516938E-6	DOCUMENTATION	4.452215279679876E-7	TEST
/*         * The following types are not supported in RDMS/JDBC and therefore commented out.         * However, in some cases, mapping them to CHARACTER columns works         * for many applications, but does not work for all cases.         */	DEFECT	0.9055802882172519	WITHOUT_CLASSIFICATION	0.09403069985030087	DEFECT	1.9318497337922602E-4	DESIGN	1.2404984316442559E-4	TEST	6.6079962510094E-5	DOCUMENTATION	5.6971533935015656E-6	IMPLEMENTATION
// The preference here would be //   SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) // but this appears not to work. // Jay Nance 2006-09-22	DEFECT	0.8715216842987102	DEFECT	0.07697844976080602	WITHOUT_CLASSIFICATION	0.04707585392329818	IMPLEMENTATION	0.0036741084295099044	DESIGN	4.363706995547911E-4	DOCUMENTATION	3.1353288812086867E-4	TEST
// note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.6656239898458277	DESIGN	0.29706684139742207	DEFECT	0.03358103978478073	WITHOUT_CLASSIFICATION	0.0034897464261545697	TEST	1.7443655750171345E-4	IMPLEMENTATION	6.394598831323984E-5	DOCUMENTATION
// note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.58595128877082	DESIGN	0.3653017891605979	DEFECT	0.04343328716670111	WITHOUT_CLASSIFICATION	0.004529606696708944	IMPLEMENTATION	6.712039492291282E-4	TEST	1.1282425594288818E-4	DOCUMENTATION
/*	DEFECT	0.9967552008360161	WITHOUT_CLASSIFICATION	0.002240573261620505	DESIGN	3.059997711743128E-4	TEST	3.0513762412901315E-4	DOCUMENTATION	2.1112684642552555E-4	DEFECT	1.8196166063468014E-4	IMPLEMENTATION
//Don't need this, because we should never ever be selecting no columns in an insert ... select... //and because it causes a bug on DB2	DEFECT	0.9934315511053771	WITHOUT_CLASSIFICATION	0.006127582169503736	DESIGN	3.5614758162101715E-4	TEST	4.6927625173739566E-5	DEFECT	3.6061926923240236E-5	DOCUMENTATION	1.7295914010799211E-6	IMPLEMENTATION
// TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.9372550097818763	DESIGN	0.025658444838522552	DEFECT	0.02176256930246011	WITHOUT_CLASSIFICATION	0.013081740622720502	TEST	0.001779905619245673	IMPLEMENTATION	4.623298351748032E-4	DOCUMENTATION
// TODO : should this be an error?	DEFECT	0.9898952792653933	DESIGN	0.0037716368116216523	WITHOUT_CLASSIFICATION	0.0036720764260447666	IMPLEMENTATION	0.001520871397465473	TEST	9.42966801540951E-4	DEFECT	1.971692979337363E-4	DOCUMENTATION
// TODO : not sure which (either?) is correct, could not find docs on how to do this. // did find various blogs and forums mentioning that select CURRENT_TIMESTAMP // does not work...	DEFECT	0.8093637881488577	DESIGN	0.1743119622576585	DEFECT	0.014317965400423328	TEST	0.0017060110986553253	WITHOUT_CLASSIFICATION	2.2552010861941448E-4	DOCUMENTATION	7.4752985785791E-5	IMPLEMENTATION
// TODO: figure out how this should be set. /////////////////////////////////////////////////////////////////////////////// // This was the reason for failures regarding INDEX_OP and subclass joins on // theta-join dialects; not sure what behaviour we were trying to emulate ;) //	DEFECT	0.7512763933204486	DESIGN	0.24848560001674627	DEFECT	2.2654621834849526E-4	WITHOUT_CLASSIFICATION	7.672919576718734E-6	IMPLEMENTATION	3.560070554110119E-6	TEST	2.2745432584801662E-7	DOCUMENTATION
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.735411173943814	WITHOUT_CLASSIFICATION	0.1730724256964373	DEFECT	0.06583746200619632	DESIGN	0.021776337321488377	IMPLEMENTATION	0.002923378273945919	TEST	9.79222758118148E-4	DOCUMENTATION
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.735411173943814	WITHOUT_CLASSIFICATION	0.1730724256964373	DEFECT	0.06583746200619632	DESIGN	0.021776337321488377	IMPLEMENTATION	0.002923378273945919	TEST	9.79222758118148E-4	DOCUMENTATION
// TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.9997604176590381	DESIGN	1.489320728277559E-4	WITHOUT_CLASSIFICATION	8.184178086641248E-5	IMPLEMENTATION	4.18628287502913E-6	DEFECT	2.4817476816921233E-6	TEST	2.1404567111173775E-6	DOCUMENTATION
// starts with an alias (old style) // semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9978204178722977	WITHOUT_CLASSIFICATION	0.002064619998239989	DESIGN	8.39380443149837E-5	DEFECT	3.086599219856834E-5	TEST	1.5002248608901637E-7	DOCUMENTATION	8.07046269518189E-9	IMPLEMENTATION
//TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.6758520457434027	DESIGN	0.2473558940538157	IMPLEMENTATION	0.04766871157453744	WITHOUT_CLASSIFICATION	0.025889807575622144	DEFECT	0.0017835190910215298	TEST	0.0014500219616004422	DOCUMENTATION
// this call is side-effecty	DEFECT	0.9999164606003775	WITHOUT_CLASSIFICATION	7.466482576093272E-5	DESIGN	4.38032570554011E-6	IMPLEMENTATION	2.887128477402564E-6	TEST	8.553935313488153E-7	DEFECT	7.517261473481027E-7	DOCUMENTATION
//TODO: old version did not require hashmap lookup: //keys[collectionOwner].getIdentifier()	DEFECT	0.7700506820648299	WITHOUT_CLASSIFICATION	0.16874514546577665	DEFECT	0.05436462119010301	IMPLEMENTATION	0.006817183653591502	DESIGN	1.533941390897846E-5	TEST	7.028211790135431E-6	DOCUMENTATION
//TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.9842546198915968	WITHOUT_CLASSIFICATION	0.014663488511898354	DEFECT	9.603811355039985E-4	DESIGN	9.7702476676855E-5	IMPLEMENTATION	1.7567210826918128E-5	DOCUMENTATION	6.240773497188297E-6	TEST
// this is only needed (afaict) for processing results from the query cache; // however, this cannot possibly work in the case of discovered types...	DEFECT	0.9986044878307906	WITHOUT_CLASSIFICATION	0.0011667602845388302	DEFECT	2.2603672091101834E-4	DESIGN	1.864903605044478E-6	TEST	7.895474883304269E-7	DOCUMENTATION	6.071266598890539E-8	IMPLEMENTATION
//TODO: this requires that the collection is defined after the //      referenced property in the mapping file (ok?)	DEFECT	0.9601232962788169	WITHOUT_CLASSIFICATION	0.03959814115946155	DESIGN	1.0420799768322025E-4	DEFECT	1.0119520446359221E-4	IMPLEMENTATION	6.648896776432276E-5	TEST	6.670391810519455E-6	DOCUMENTATION
//TODO: is this completely correct?	DEFECT	0.6068723268566373	DESIGN	0.39233500477165545	WITHOUT_CLASSIFICATION	3.463315722642607E-4	DEFECT	2.264260844935316E-4	IMPLEMENTATION	1.8538697473609132E-4	TEST	3.452374021348423E-5	DOCUMENTATION
// three general cases we check here as to whether to render a physical SQL join: // 1) is our parent a DotNode as well?  If so, our property reference is // 	DEFECT	0.9972950364600194	WITHOUT_CLASSIFICATION	0.002676441437252623	DESIGN	2.1890441372409906E-5	DEFECT	5.677773615083034E-6	DOCUMENTATION	8.4147325235079E-7	IMPLEMENTATION	1.1241448812806183E-7	TEST
// TODO : currently we really do not handle ValueInclusion.PARTIAL... // ValueInclusion.PARTIAL would indicate parts of a component need to // be included in the select; currently we then just render the entire // component into the select clause in that case.	DEFECT	0.8915527262312078	IMPLEMENTATION	0.09488726969661883	DESIGN	0.01344371423219704	DEFECT	6.997017179107543E-5	WITHOUT_CLASSIFICATION	4.150511178178178E-5	DOCUMENTATION	4.814556403365422E-6	TEST
//TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9993180970077439	DESIGN	2.6455412887645645E-4	WITHOUT_CLASSIFICATION	2.500233075046526E-4	IMPLEMENTATION	1.0596282504411248E-4	DEFECT	5.4892872974000815E-5	DOCUMENTATION	6.469857856791508E-6	TEST
// todo : this call will not work for anything other than pojos!	DEFECT	0.6756253596618406	DEFECT	0.18081043269429026	WITHOUT_CLASSIFICATION	0.09978861037584844	IMPLEMENTATION	0.043166349734870824	DESIGN	5.81126337481181E-4	TEST	2.812119566874178E-5	DOCUMENTATION
//TODO: currently we don't know a SessionFactory reference when building the Tuplizer //      THIS IS A BUG (embedded-xml=false on component) // TODO : fix this after HHH-1907 is complete	DEFECT	0.9999913727721192	DESIGN	6.41746317264851E-6	DEFECT	1.2610379247061729E-6	DOCUMENTATION	6.938841548803078E-7	IMPLEMENTATION	1.586972547477002E-7	WITHOUT_CLASSIFICATION	9.614537380311937E-8	TEST
// TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.7036503578365444	IMPLEMENTATION	0.22983887293982017	DESIGN	0.046116674126805625	WITHOUT_CLASSIFICATION	0.013160233342358189	DEFECT	0.004606227223454632	DOCUMENTATION	0.002627634531016983	TEST
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object) //the owner of the association is not the owner of the id	DEFECT	0.9948880289145813	WITHOUT_CLASSIFICATION	0.003153689233859958	DEFECT	0.0017732233329006456	IMPLEMENTATION	1.1701918176453108E-4	DOCUMENTATION	5.675302192440482E-5	TEST	1.1286314969265122E-5	DESIGN
//TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.907899158052771	DESIGN	0.059247289341710675	WITHOUT_CLASSIFICATION	0.02474609265766912	IMPLEMENTATION	0.005208979954531517	DEFECT	0.002056901972020026	TEST	8.415780212979376E-4	DOCUMENTATION
//TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.832225088755935	DESIGN	0.15727688723887345	WITHOUT_CLASSIFICATION	0.006822070879393277	IMPLEMENTATION	0.0030208959173283357	DEFECT	3.4158988976495377E-4	TEST	3.134673187049839E-4	DOCUMENTATION
//TODO: this is kinda inconsistent with CollectionType	DEFECT	0.9595313975586809	DESIGN	0.02565918183323773	WITHOUT_CLASSIFICATION	0.007982377277119966	IMPLEMENTATION	0.004064463693803404	TEST	0.0023259132304832703	DEFECT	4.3666640667466486E-4	DOCUMENTATION
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.735411173943814	WITHOUT_CLASSIFICATION	0.1730724256964373	DEFECT	0.06583746200619632	DESIGN	0.021776337321488377	IMPLEMENTATION	0.002923378273945919	TEST	9.79222758118148E-4	DOCUMENTATION
// TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.9931981016794886	DEFECT	0.004162044586588833	IMPLEMENTATION	0.002544749700597685	DESIGN	7.154504456305387E-5	TEST	2.1511108899215716E-5	DOCUMENTATION	2.047879862635699E-6	WITHOUT_CLASSIFICATION
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object)	DEFECT	0.9933965973953255	WITHOUT_CLASSIFICATION	0.0049534956446636285	IMPLEMENTATION	0.0010908944458966718	DEFECT	4.229194359352106E-4	DOCUMENTATION	7.409817112750178E-5	TEST	6.199490705136177E-5	DESIGN
//TODO: not really completely correct, since //      the uoe could occur while resolving //      associations, leaving the PC in an //      inconsistent state	DEFECT	0.937494456942279	WITHOUT_CLASSIFICATION	0.06118785469637702	DEFECT	8.995455119085758E-4	TEST	3.0650640750055436E-4	DESIGN	7.120981724206283E-5	IMPLEMENTATION	4.042662469273541E-5	DOCUMENTATION
// could happen for custom Criteria impls.  Not likely, but... // 	DEFECT	0.9232892445756273	WITHOUT_CLASSIFICATION	0.07338678399296253	DESIGN	0.0022224886168691962	DEFECT	6.287282532970442E-4	IMPLEMENTATION	4.673780346036993E-4	TEST	5.376526640300722E-6	DOCUMENTATION
// This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, // but this extension is not supported through Hibernate anyway.	DEFECT	0.9999828008482122	WITHOUT_CLASSIFICATION	1.067268485480371E-5	DESIGN	4.652522524873127E-6	DEFECT	1.792267555638263E-6	TEST	5.684887280309004E-8	DOCUMENTATION	2.4827979550184698E-8	IMPLEMENTATION
// note that this timestamp is not correct if the connection provider // returns an older JDBC connection that was associated with a // transaction that was already begun before openSession() was called // (don't know any possible solution to this!)	DEFECT	0.8499473464378368	WITHOUT_CLASSIFICATION	0.1452129271407517	IMPLEMENTATION	0.004186843635653313	DESIGN	5.3661666896649E-4	TEST	1.1119384390831332E-4	DEFECT	5.072272883479118E-6	DOCUMENTATION
//no need to take a snapshot - this is a  //performance optimization, but not really //important, except for entities with huge  //mutable property values	DEFECT	0.9651744625855049	WITHOUT_CLASSIFICATION	0.03289925062446317	DEFECT	0.0011780772395559315	DESIGN	2.720267471275242E-4	DOCUMENTATION	2.47395640815315E-4	IMPLEMENTATION	2.2878716253305664E-4	TEST
// TODO : this really needs to be delayed unitl after we definitively know the operand node type; // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DEFECT	0.9384897596844177	DESIGN	0.04311543424299622	IMPLEMENTATION	0.015407819279653514	DEFECT	0.001651148368297	WITHOUT_CLASSIFICATION	0.0011721526638683697	DOCUMENTATION	1.6368576076708277E-4	TEST
// First, validate all the enabled filters... //TODO: this implementation has bad performance	DEFECT	0.878967530060758	IMPLEMENTATION	0.11242322183134928	WITHOUT_CLASSIFICATION	0.0083921738804213	DESIGN	1.693840063214529E-4	DEFECT	2.7637351670725008E-5	DOCUMENTATION	2.0052869479158757E-5	TEST
// TODO: what if batchUpdate is a callablestatement ? // calls executeBatch()	DEFECT	0.5615813216170781	WITHOUT_CLASSIFICATION	0.2892281761604965	DESIGN	0.07146094797181476	IMPLEMENTATION	0.0701432015719721	DEFECT	0.006801629508547523	TEST	7.847231700910811E-4	DOCUMENTATION
// assume that the row was not there since it previously had only null // values, so do an INSERT instead //TODO: does not respect dynamic-insert	DEFECT	0.9998769716280212	WITHOUT_CLASSIFICATION	8.632587624459217E-5	DEFECT	2.8901541142271133E-5	DESIGN	5.565653912878414E-6	TEST	1.4515195589804286E-6	DOCUMENTATION	7.837811200264943E-7	IMPLEMENTATION
//TODO: passing null here, because this method is not really used for DOM4J at the moment //      but it is still a bug, if we don't get rid of this!	DEFECT	0.8004481529836016	DESIGN	0.08911918616450706	DEFECT	0.08852331774627746	WITHOUT_CLASSIFICATION	0.019895174213367617	IMPLEMENTATION	0.0019042200810507005	TEST	1.0994881119538311E-4	DOCUMENTATION
//note that this implementation is kinda broken //for components with many-to-one associations	DEFECT	0.9971905363808682	WITHOUT_CLASSIFICATION	0.0011820310193610172	IMPLEMENTATION	0.0010460798456612228	DESIGN	4.7473642688368597E-4	TEST	9.526269983213952E-5	DEFECT	1.1353627393791472E-5	DOCUMENTATION
// TODO: at the point where we are resolving collection references, we don't // know if the uk value has been resolved (depends if it was earlier or // later in the mapping document) - now, we could try and use e.getStatus() // to decide to semiResolve(), trouble is that initializeEntity() reuses // the same array for resolved and hydrated values	DEFECT	0.7665271119880702	WITHOUT_CLASSIFICATION	0.1284164675724091	IMPLEMENTATION	0.06130948086976238	DESIGN	0.03814734278139568	DEFECT	0.00557250394698809	DOCUMENTATION	2.709284137456597E-5	TEST
//TODO: This is assertion is disabled because there is a bug that means the //	DEFECT	0.9974382480369516	WITHOUT_CLASSIFICATION	0.002346985652867929	DEFECT	1.0047247979294201E-4	IMPLEMENTATION	7.816495638563023E-5	DESIGN	3.5432598055624035E-5	TEST	6.962759464220004E-7	DOCUMENTATION
// This doesn't actually seem to work but it *might* // work on some dbs. Also it doesn't work if there // are multiple columns of results because it // is not accounting for the suffix: // return new String[] { getDiscriminatorColumnName() };	DEFECT	0.6647602524636658	DESIGN	0.33523089666486294	WITHOUT_CLASSIFICATION	8.6176916561988E-6	DEFECT	2.1854211916413225E-7	TEST	1.4582616160065933E-8	DOCUMENTATION	5.5079762309157045E-11	IMPLEMENTATION
// TODO: Deal with the "optional" attribute in the <join> mapping; // this code assumes that optional defaults to "true" because it // doesn't actually seem to work in the fetch="join" code // // Note that actual proper handling of optional-ality here is actually // more involved than this patch assumes.  Remember that we might have // multiple <join/> mappings associated with a single entity.  Really // a couple of things need to happen to properly handle optional here: //  1) First and foremost, when handling multiple <join/>s, we really //      should be using the entity root table as the driving table; //      another option here would be to choose some non-optional joined //      table to use as the driving table.  In all likelihood, just using //      the root table is much simplier //  2) Need to add the FK columns corresponding to each joined table //      to the generated select list; these would then be used when //      iterating the result set to determine whether all non-optional //      data is present // My initial thoughts on the best way to deal with this would be // to introduce a new SequentialSelect abstraction that actually gets // generated in the persisters (ok, SingleTable...) and utilized here. // It would encapsulated all this required optional-ality checking...	DEFECT	0.9901233878284211	WITHOUT_CLASSIFICATION	0.009813564267393243	DESIGN	2.898520215345206E-5	TEST	1.943994217920299E-5	IMPLEMENTATION	1.0362196827110881E-5	DEFECT	4.260563025786545E-6	DOCUMENTATION
// todo : what else to do here?	DESIGN	0.8174474556598387	WITHOUT_CLASSIFICATION	0.14945043716090714	IMPLEMENTATION	0.03281619425539487	DESIGN	1.3109364074278214E-4	TEST	1.2222916091851764E-4	DEFECT	3.25901221980841E-5	DOCUMENTATION
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.8114839200191033	DESIGN	0.1643104315970128	WITHOUT_CLASSIFICATION	0.01875821923436848	DEFECT	0.004851917970690813	IMPLEMENTATION	3.487944275540865E-4	TEST	2.4671675127033545E-4	DOCUMENTATION
// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. // The need for it is intended to be alleviated with future developement, thus it is // not defined as an Environment constant... // // it is used to control whether we should consult the JDBC metadata to determine // certain Settings default values; it is useful to *not* do this when the database // may not be available (mainly in tools usage).	DESIGN	0.9535792497815045	WITHOUT_CLASSIFICATION	0.046420555538174486	DESIGN	1.6245854652137044E-7	TEST	2.097164115172641E-8	DEFECT	1.1235050288657485E-8	DOCUMENTATION	1.508285938192837E-11	IMPLEMENTATION
//TODO: get SQL rendering out of this package!	DESIGN	0.7033785966108613	DESIGN	0.29579716858877314	WITHOUT_CLASSIFICATION	6.043493408807574E-4	DEFECT	9.106761032963202E-5	IMPLEMENTATION	8.649300848331903E-5	TEST	4.232484067183802E-5	DOCUMENTATION
//TODO: get SQL rendering out of this package!	DESIGN	0.7033785966108613	DESIGN	0.29579716858877314	WITHOUT_CLASSIFICATION	6.043493408807574E-4	DEFECT	9.106761032963202E-5	IMPLEMENTATION	8.649300848331903E-5	TEST	4.232484067183802E-5	DOCUMENTATION
// todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9181222552950399	WITHOUT_CLASSIFICATION	0.08053186965197857	IMPLEMENTATION	0.0011392310813442264	DESIGN	7.802248585536358E-5	DEFECT	6.444517108405722E-5	DOCUMENTATION	6.417631469781494E-5	TEST
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9999923802674648	WITHOUT_CLASSIFICATION	7.485547347624943E-6	DESIGN	8.327470536588549E-8	DEFECT	2.2762538190863607E-8	IMPLEMENTATION	1.9179698452897532E-8	DOCUMENTATION	8.968245582904963E-9	TEST
// work around the "feature" where tree cache is validating the // inserted node during the next transaction.  no idea...	DESIGN	0.9936870647844651	WITHOUT_CLASSIFICATION	0.004034729585934331	DEFECT	0.0022631049369980973	DESIGN	6.841104783988733E-6	TEST	5.414996900807733E-6	DOCUMENTATION	2.844590917590197E-6	IMPLEMENTATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.990341240348871	DESIGN	0.009584312433792796	WITHOUT_CLASSIFICATION	5.307544381413691E-5	DOCUMENTATION	1.0638646805702011E-5	TEST	6.700401550628062E-6	IMPLEMENTATION	4.032725165473051E-6	DEFECT
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.990341240348871	DESIGN	0.009584312433792796	WITHOUT_CLASSIFICATION	5.307544381413691E-5	DOCUMENTATION	1.0638646805702011E-5	TEST	6.700401550628062E-6	IMPLEMENTATION	4.032725165473051E-6	DEFECT
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9927401622269248	DESIGN	0.007174738950769682	DEFECT	7.179360382143595E-5	IMPLEMENTATION	1.0073090387342288E-5	DOCUMENTATION	2.7181587904105877E-6	WITHOUT_CLASSIFICATION	5.139693062827561E-7	TEST
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9927401622269248	DESIGN	0.007174738950769682	DEFECT	7.179360382143595E-5	IMPLEMENTATION	1.0073090387342288E-5	DOCUMENTATION	2.7181587904105877E-6	WITHOUT_CLASSIFICATION	5.139693062827561E-7	TEST
// TODO: I considered validating TS cache config here, // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used	DESIGN	0.790784453032094	IMPLEMENTATION	0.2071993800350629	WITHOUT_CLASSIFICATION	0.0010351194337439391	DEFECT	9.623777266446562E-4	DESIGN	1.5456176519046063E-5	DOCUMENTATION	3.2135959354744255E-6	TEST
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9828836520896016	DESIGN	0.014934424205587478	IMPLEMENTATION	0.0016968474378375427	WITHOUT_CLASSIFICATION	4.347218243374279E-4	TEST	3.910200190225235E-5	DOCUMENTATION	1.1252440733590682E-5	DEFECT
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9828836520896016	DESIGN	0.014934424205587478	IMPLEMENTATION	0.0016968474378375427	WITHOUT_CLASSIFICATION	4.347218243374279E-4	TEST	3.910200190225235E-5	DOCUMENTATION	1.1252440733590682E-5	DEFECT
// TODO Why not use the timestamp in a DataVersion?	DESIGN	0.9974889624855716	IMPLEMENTATION	0.0016068927643409206	DESIGN	3.512458159890317E-4	WITHOUT_CLASSIFICATION	3.1401462185491114E-4	DEFECT	1.3161494274504797E-4	TEST	1.0726936949849002E-4	DOCUMENTATION
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9999923802674648	WITHOUT_CLASSIFICATION	7.485547347624943E-6	DESIGN	8.327470536588549E-8	DEFECT	2.2762538190863607E-8	IMPLEMENTATION	1.9179698452897532E-8	DOCUMENTATION	8.968245582904963E-9	TEST
// work around the "feature" where tree cache is validating the // inserted node during the next transaction. no idea...	DESIGN	0.995515174779863	WITHOUT_CLASSIFICATION	0.0028659388452159664	DEFECT	0.0016031315116799515	DESIGN	6.4378550005415235E-6	TEST	5.080506607718923E-6	DOCUMENTATION	4.236501632897135E-6	IMPLEMENTATION
//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9999504663548856	WITHOUT_CLASSIFICATION	3.872337321059142E-5	DESIGN	9.637124818458133E-6	DEFECT	5.282731368043586E-7	DOCUMENTATION	3.2493036751983576E-7	IMPLEMENTATION	3.1994358094106595E-7	TEST
// turn hibernate.c3p0.* into c3p0.*, so c3p0 // gets a chance to see all hibernate.c3p0.*	DESIGN	0.9999994325598843	WITHOUT_CLASSIFICATION	5.654634460327229E-7	DESIGN	7.627034200941276E-10	DOCUMENTATION	6.878581527359193E-10	TEST	2.9656533612281997E-10	DEFECT	2.29542859167428E-10	IMPLEMENTATION
//TODO: this bit actually has to be called after all cascades! //      but since identity insert is called *synchronously*, //      instead of asynchronously as other actions, it isn't	DESIGN	0.9768073496537448	WITHOUT_CLASSIFICATION	0.02301611599007425	DESIGN	7.900414364641662E-5	DEFECT	6.059353532074278E-5	TEST	1.9345943432648364E-5	DOCUMENTATION	1.7590733781237702E-5	IMPLEMENTATION
//TODO: reenable if we also fix the above todo	DESIGN	0.9830739415920872	WITHOUT_CLASSIFICATION	0.014313072164645366	DESIGN	0.001613448595748655	IMPLEMENTATION	6.260143372678126E-4	TEST	2.3794658280226473E-4	DOCUMENTATION	1.355767274487503E-4	DEFECT
//TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.948801401148505	WITHOUT_CLASSIFICATION	0.04169001953932326	IMPLEMENTATION	0.006990434719203391	DESIGN	0.002320813609167175	DEFECT	1.1348385568509239E-4	TEST	8.384712811611736E-5	DOCUMENTATION
// we may be screwed here since the collection action is about to execute // and we do not know the final owner key value	DESIGN	0.9996430408669223	WITHOUT_CLASSIFICATION	3.551292104823922E-4	DESIGN	9.78644321367347E-7	IMPLEMENTATION	6.469369051966324E-7	DEFECT	1.811078271512863E-7	TEST	2.3233541572762376E-8	DOCUMENTATION
/** Create an action that will evict collection and entity regions based on queryspaces (table names).	DESIGN	0.5389472125755119	DESIGN	0.3825103591246195	WITHOUT_CLASSIFICATION	0.07475764439952708	IMPLEMENTATION	0.003272329762272392	TEST	2.929473499686318E-4	DEFECT	2.1950678810056228E-4	DOCUMENTATION
// todo : what else to do here?	DESIGN	0.8174474556598387	WITHOUT_CLASSIFICATION	0.14945043716090714	IMPLEMENTATION	0.03281619425539487	DESIGN	1.3109364074278214E-4	TEST	1.2222916091851764E-4	DEFECT	3.25901221980841E-5	DOCUMENTATION
// todo : modify the class definition if not already transformed...	DESIGN	0.9928168266923268	WITHOUT_CLASSIFICATION	0.0068740992671592884	DESIGN	2.905124271680948E-4	IMPLEMENTATION	1.3259709009456781E-5	TEST	3.606577313293122E-6	DEFECT	1.6953270231188328E-6	DOCUMENTATION
// todo : what else to do here?	DESIGN	0.8174474556598387	WITHOUT_CLASSIFICATION	0.14945043716090714	IMPLEMENTATION	0.03281619425539487	DESIGN	1.3109364074278214E-4	TEST	1.2222916091851764E-4	DEFECT	3.25901221980841E-5	DOCUMENTATION
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call start	DESIGN	0.9992918413940206	WITHOUT_CLASSIFICATION	6.808287091230811E-4	DESIGN	1.1434603266892938E-5	IMPLEMENTATION	8.69051890719049E-6	TEST	5.580455446177519E-6	DOCUMENTATION	1.6243192361931885E-6	DEFECT
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.9990340861524412	WITHOUT_CLASSIFICATION	9.109971809905166E-4	DESIGN	3.482874177919877E-5	IMPLEMENTATION	1.1434312664696352E-5	TEST	5.957820277332662E-6	DOCUMENTATION	2.695791847149771E-6	DEFECT
//TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9977852346552142	DESIGN	7.337826983969783E-4	WITHOUT_CLASSIFICATION	7.035099569142132E-4	IMPLEMENTATION	3.518599057436371E-4	DEFECT	2.9128766834566504E-4	TEST	1.3432511538532637E-4	DOCUMENTATION
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.8114839200191033	DESIGN	0.1643104315970128	WITHOUT_CLASSIFICATION	0.01875821923436848	DEFECT	0.004851917970690813	IMPLEMENTATION	3.487944275540865E-4	TEST	2.4671675127033545E-4	DOCUMENTATION
//TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.9145926285470467	DESIGN	0.06702808417589717	WITHOUT_CLASSIFICATION	0.013883436513330743	IMPLEMENTATION	0.0024506607973081044	DEFECT	0.0016073942817703298	TEST	4.3779568464702033E-4	DOCUMENTATION
//TODO: assumes all collections disassemble to an array!	DESIGN	0.9992835449040554	WITHOUT_CLASSIFICATION	6.205230557644938E-4	DEFECT	3.599954790722491E-5	IMPLEMENTATION	2.8729569087652852E-5	DESIGN	2.7214117025324443E-5	TEST	3.9888061598744775E-6	DOCUMENTATION
//TODO: reuse the PreLoadEvent	DESIGN	0.968515423439123	WITHOUT_CLASSIFICATION	0.021882628068083106	IMPLEMENTATION	0.009146362926036315	DESIGN	2.9232305048940594E-4	DOCUMENTATION	1.1379509111565933E-4	DEFECT	4.9467425152527014E-5	TEST
// todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; // this should be refactored to instead expose a method to assemble a EntityEntry based on this // state for return.	DESIGN	0.9811814176043714	DESIGN	0.018748907136984915	WITHOUT_CLASSIFICATION	3.6429751910435045E-5	DEFECT	3.3087161971626876E-5	TEST	1.4749954420943104E-7	DOCUMENTATION	1.0845217311869542E-8	IMPLEMENTATION
// todo : what is the implication of this?	DESIGN	0.9880105710197492	WITHOUT_CLASSIFICATION	0.00967698071121666	DESIGN	0.0014579942330040516	DOCUMENTATION	4.4863829862770265E-4	DEFECT	2.6911050986602584E-4	TEST	1.3670522753640686E-4	IMPLEMENTATION
// use COUNT as the default.  This mimics the old behavior, although // NONE might be a better option moving forward in the case of callable	DESIGN	0.9604921051349659	WITHOUT_CLASSIFICATION	0.039506600815805565	DESIGN	1.2481663930066246E-6	DEFECT	2.6788470076837306E-8	TEST	1.6494461066798113E-8	IMPLEMENTATION	2.599904436979116E-9	DOCUMENTATION
/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a	DESIGN	0.988952838465763	DESIGN	0.009853469913728421	IMPLEMENTATION	9.692465930620575E-4	WITHOUT_CLASSIFICATION	1.4031662450220722E-4	DEFECT	7.550665062176444E-5	TEST	8.621752322558676E-6	DOCUMENTATION
//TODO: suck this into initLaziness!	DESIGN	0.5149330303235413	WITHOUT_CLASSIFICATION	0.4551243804214468	DESIGN	0.014245245952087815	DEFECT	0.006892986919845922	DOCUMENTATION	0.005273744815613519	IMPLEMENTATION	0.003530611567464636	TEST
// we have to set up the table later!! yuck	DESIGN	0.999982884326387	WITHOUT_CLASSIFICATION	8.330266985523138E-6	DESIGN	4.622220318508026E-6	IMPLEMENTATION	3.3812604245420775E-6	DEFECT	4.788809890799024E-7	TEST	3.030448953331592E-7	DOCUMENTATION
//TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.624834714350521	WITHOUT_CLASSIFICATION	0.34468784132515884	IMPLEMENTATION	0.025894960629483314	DESIGN	0.0029857656344259792	DOCUMENTATION	0.001301896456437083	DEFECT	2.9482160397383147E-4	TEST
// todo : again, how *should* this work for non-pojo entities?	DESIGN	0.9327971468446623	WITHOUT_CLASSIFICATION	0.060685715375772976	IMPLEMENTATION	0.004422470694037223	DESIGN	0.0012725528965122116	DEFECT	6.856810476969244E-4	TEST	1.3643314131834086E-4	DOCUMENTATION
// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9562846831405061	DESIGN	0.03989786377854778	IMPLEMENTATION	0.0030663612798162267	DEFECT	4.8451276560933834E-4	TEST	2.589604960382181E-4	WITHOUT_CLASSIFICATION	7.618539482359267E-6	DOCUMENTATION
// This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.9701555149491056	WITHOUT_CLASSIFICATION	0.028276399905765238	DESIGN	0.0015299407869739038	IMPLEMENTATION	2.302920812282228E-5	TEST	1.4191191507475792E-5	DEFECT	9.239585252579373E-7	DOCUMENTATION
//TODO: bad implementation, cos it depends upon ordering of mapping doc //      fixing this requires that Collection/PersistentClass gain access //      to the Mappings reference from Configuration (or the filterDefinitions //      map directly) sometime during Configuration.buildSessionFactory //      (after all the types/filter-defs are known and before building //      persisters).	DESIGN	0.997257362742828	DESIGN	0.0025396897023454027	WITHOUT_CLASSIFICATION	1.5788839816629523E-4	IMPLEMENTATION	3.27356361993939E-5	DOCUMENTATION	9.971799633182231E-6	TEST	2.3517208277653266E-6	DEFECT
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.6105663142127729	DESIGN	0.3813933992469193	WITHOUT_CLASSIFICATION	0.00644152802230119	DEFECT	9.526494903539924E-4	IMPLEMENTATION	5.978791886501171E-4	DOCUMENTATION	4.82298390025416E-5	TEST
// hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9999303300696315	DESIGN	2.7793210822396666E-5	IMPLEMENTATION	2.1077444828541445E-5	DEFECT	2.0291317637095502E-5	WITHOUT_CLASSIFICATION	3.2327830511666234E-7	TEST	1.8467877508387795E-7	DOCUMENTATION
//FIXME: get the PersistentClass	DESIGN	0.5069804582297898	DESIGN	0.4759710404608381	WITHOUT_CLASSIFICATION	0.013566206234097104	IMPLEMENTATION	0.0018748802047803144	DEFECT	0.0014409043399840713	TEST	1.6651053051051004E-4	DOCUMENTATION
//FIXME: get the PersistentClass	DESIGN	0.5069804582297898	DESIGN	0.4759710404608381	WITHOUT_CLASSIFICATION	0.013566206234097104	IMPLEMENTATION	0.0018748802047803144	DEFECT	0.0014409043399840713	TEST	1.6651053051051004E-4	DOCUMENTATION
//Icky workaround for MySQL bug:	DESIGN	0.5964019703544436	DESIGN	0.35157794820279153	WITHOUT_CLASSIFICATION	0.05067828680702295	DEFECT	7.689142363760171E-4	IMPLEMENTATION	4.80368158083577E-4	DOCUMENTATION	9.251224128221399E-5	TEST
//TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.9681556400197597	WITHOUT_CLASSIFICATION	0.02390945072826746	IMPLEMENTATION	0.00634708296139523	DEFECT	7.740976009031307E-4	DOCUMENTATION	6.935173598830217E-4	DESIGN	1.202113297913752E-4	TEST
//TODO possibly relax that	DESIGN	0.9973443502927373	WITHOUT_CLASSIFICATION	0.002177471808167257	IMPLEMENTATION	3.4609779325118193E-4	DESIGN	5.109060274196042E-5	TEST	4.509452782941815E-5	DOCUMENTATION	3.589497527289985E-5	DEFECT
//TODO possibly relax that	DESIGN	0.9973443502927373	WITHOUT_CLASSIFICATION	0.002177471808167257	IMPLEMENTATION	3.4609779325118193E-4	DESIGN	5.109060274196042E-5	TEST	4.509452782941815E-5	DOCUMENTATION	3.589497527289985E-5	DEFECT
//TODO possibly relax that	DESIGN	0.9973443502927373	WITHOUT_CLASSIFICATION	0.002177471808167257	IMPLEMENTATION	3.4609779325118193E-4	DESIGN	5.109060274196042E-5	TEST	4.509452782941815E-5	DOCUMENTATION	3.589497527289985E-5	DEFECT
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.6105663142127729	DESIGN	0.3813933992469193	WITHOUT_CLASSIFICATION	0.00644152802230119	DEFECT	9.526494903539924E-4	IMPLEMENTATION	5.978791886501171E-4	DOCUMENTATION	4.82298390025416E-5	TEST
//use a degenerated strategy for backward compatibility	DESIGN	0.9999865748019756	WITHOUT_CLASSIFICATION	7.325052882965518E-6	IMPLEMENTATION	5.386369889434982E-6	DESIGN	3.593375435946604E-7	DEFECT	2.3615344064733396E-7	TEST	1.1828426780470449E-7	DOCUMENTATION
// Sets can be just a view of a part of another collection. // do we need to copy it to be sure it won't be changing // underneath us? // ie. this.set.addAll(set);	DESIGN	0.9999729993380327	WITHOUT_CLASSIFICATION	2.410787245886688E-5	IMPLEMENTATION	1.436876065010456E-6	TEST	1.070465871737423E-6	DEFECT	3.4945373199685437E-7	DESIGN	3.59938395739078E-8	DOCUMENTATION
//note that i parameter is now unused (delete it?)	DESIGN	0.9990308231545142	WITHOUT_CLASSIFICATION	8.257606367185299E-4	DESIGN	1.198152784387853E-4	IMPLEMENTATION	1.75043882562936E-5	TEST	5.330045525164888E-6	DEFECT	7.664965470584272E-7	DOCUMENTATION
//just to help out during the load (ugly, i know)	DESIGN	0.9759464273974198	WITHOUT_CLASSIFICATION	0.021103835092982595	IMPLEMENTATION	0.0016918312541003022	DESIGN	9.432255638753146E-4	DEFECT	1.7991485455602223E-4	TEST	1.3476583706588814E-4	DOCUMENTATION
// TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.5174646689270013	IMPLEMENTATION	0.3981919335956334	WITHOUT_CLASSIFICATION	0.04585915938784165	DESIGN	0.037652302669014336	DEFECT	4.3939177326703766E-4	DOCUMENTATION	3.9254364724222935E-4	TEST
// yick!  need this for proper serialization/deserialization handling...	DESIGN	0.9808202774793042	WITHOUT_CLASSIFICATION	0.011209229651314866	DESIGN	0.006984345670611022	DEFECT	4.241878316496943E-4	IMPLEMENTATION	3.7077736609012797E-4	TEST	1.9118200103005224E-4	DOCUMENTATION
//TODO: get SQL rendering out of this package!	DESIGN	0.7033785966108613	DESIGN	0.29579716858877314	WITHOUT_CLASSIFICATION	6.043493408807574E-4	DEFECT	9.106761032963202E-5	IMPLEMENTATION	8.649300848331903E-5	TEST	4.232484067183802E-5	DOCUMENTATION
//TODO: get SQL rendering out of this package!	DESIGN	0.7033785966108613	DESIGN	0.29579716858877314	WITHOUT_CLASSIFICATION	6.043493408807574E-4	DEFECT	9.106761032963202E-5	IMPLEMENTATION	8.649300848331903E-5	TEST	4.232484067183802E-5	DOCUMENTATION
//yuck!	DESIGN	0.9991304187990859	WITHOUT_CLASSIFICATION	5.392603553244851E-4	DESIGN	1.734422199126755E-4	DEFECT	1.0491791091805852E-4	DOCUMENTATION	3.799877055379677E-5	TEST	1.3961944205118903E-5	IMPLEMENTATION
//TODO: get SQL rendering out of this package!	DESIGN	0.7033785966108613	DESIGN	0.29579716858877314	WITHOUT_CLASSIFICATION	6.043493408807574E-4	DEFECT	9.106761032963202E-5	IMPLEMENTATION	8.649300848331903E-5	TEST	4.232484067183802E-5	DOCUMENTATION
// TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9617630593535269	DESIGN	0.03417025292079575	DEFECT	0.002888763462564043	IMPLEMENTATION	8.417235972613621E-4	TEST	2.2669122184169408E-4	WITHOUT_CLASSIFICATION	1.0950944401025591E-4	DOCUMENTATION
//HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9985795114386423	WITHOUT_CLASSIFICATION	7.516309929063097E-4	DESIGN	5.037079788334304E-4	IMPLEMENTATION	9.310833773368292E-5	DEFECT	6.856844267523501E-5	TEST	3.4728092090622725E-6	DOCUMENTATION
// does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.9982444277251113	WITHOUT_CLASSIFICATION	0.0016606411491374654	DESIGN	4.7585301496973355E-5	IMPLEMENTATION	3.3652897622210883E-5	TEST	9.996844776806438E-6	DOCUMENTATION	3.6960818551271667E-6	DEFECT
// sql-server, at least needed this dropped after use; strange!	DESIGN	0.9983266753003742	WITHOUT_CLASSIFICATION	0.0014851645701589766	DESIGN	1.2266962126577624E-4	TEST	4.7937555596908906E-5	IMPLEMENTATION	1.6289390274759232E-5	DOCUMENTATION	1.263562329468329E-6	DEFECT
// todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.9972488799000736	WITHOUT_CLASSIFICATION	0.002310937040287785	DESIGN	3.634791984884511E-4	DEFECT	7.106593796788432E-5	TEST	3.349992575879391E-6	DOCUMENTATION	2.287930606337093E-6	IMPLEMENTATION
// TBD should this be varbinary($1)? //	DESIGN	0.9993778726645873	WITHOUT_CLASSIFICATION	6.046163759963133E-4	DESIGN	7.233698495073174E-6	IMPLEMENTATION	5.130197061742038E-6	TEST	2.6113514631576255E-6	DOCUMENTATION	2.5357123964414153E-6	DEFECT
// is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9871373557304319	WITHOUT_CLASSIFICATION	0.012430053059669228	DESIGN	3.382434149351622E-4	IMPLEMENTATION	4.613065367752164E-5	TEST	3.46725881074194E-5	DEFECT	1.3544553178683645E-5	DOCUMENTATION
// xmlforest requires a new kind of function constructor	DESIGN	0.9998536191272255	WITHOUT_CLASSIFICATION	1.0869042580204748E-4	IMPLEMENTATION	3.029603977535665E-5	DEFECT	6.793224426618847E-6	TEST	4.809289257938052E-7	DESIGN	1.2025384455349352E-7	DOCUMENTATION
// Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9995012748642319	WITHOUT_CLASSIFICATION	2.8556779444943817E-4	IMPLEMENTATION	1.0974858210085953E-4	DESIGN	4.173466042982754E-5	DEFECT	3.554634264708199E-5	DOCUMENTATION	2.6127756140865137E-5	TEST
// Do we need to qualify index names with the schema name?	DESIGN	0.9033975908128554	WITHOUT_CLASSIFICATION	0.08614379870889523	IMPLEMENTATION	0.006542883438091877	DOCUMENTATION	0.0023430830827465814	DESIGN	9.947586847416274E-4	DEFECT	5.778852726692681E-4	TEST
// Does this dialect support the UNIQUE column syntax?	DESIGN	0.9952583642584627	WITHOUT_CLASSIFICATION	0.002257166664344203	IMPLEMENTATION	0.002012418042076219	DESIGN	1.8597546464319144E-4	DOCUMENTATION	1.59645114962376E-4	TEST	1.2643045551148774E-4	DEFECT
// Does this dialect support check constraints?	DESIGN	0.9989968807191875	WITHOUT_CLASSIFICATION	9.146739018294261E-4	IMPLEMENTATION	4.045325620992185E-5	DOCUMENTATION	2.3837787255383583E-5	TEST	2.355629325363576E-5	DESIGN	5.98042264144976E-7	DEFECT
// Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9999953870844889	WITHOUT_CLASSIFICATION	2.834821227646636E-6	DESIGN	7.610967739284351E-7	TEST	7.24331445930552E-7	DOCUMENTATION	2.4704774686567345E-7	IMPLEMENTATION	4.56183168229931E-8	DEFECT
// Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9991998867567491	WITHOUT_CLASSIFICATION	5.399769996124792E-4	IMPLEMENTATION	1.5718243180420634E-4	DESIGN	3.748582630890768E-5	DOCUMENTATION	3.3020014152648094E-5	TEST	3.2447971372634905E-5	DEFECT
// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9969937624378121	WITHOUT_CLASSIFICATION	0.0024146959793647405	IMPLEMENTATION	4.5174379052545234E-4	DESIGN	6.773922822741644E-5	DOCUMENTATION	5.3152261964643244E-5	TEST	1.8906302105573242E-5	DEFECT
// Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.8430349226453591	WITHOUT_CLASSIFICATION	0.1513921818744747	DESIGN	0.0043539306496219185	DEFECT	7.149204277588885E-4	IMPLEMENTATION	2.8295479460895256E-4	DOCUMENTATION	2.210896081765203E-4	TEST
//note there is a wierd implementation in the client side	DESIGN	0.9987275566983839	WITHOUT_CLASSIFICATION	8.707547932281141E-4	DESIGN	3.8857874530429386E-4	IMPLEMENTATION	9.807008263410592E-6	DEFECT	3.073867132202332E-6	TEST	2.288876880317759E-7	DOCUMENTATION
//TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.7637918313610229	WITHOUT_CLASSIFICATION	0.21045647925508085	DEFECT	0.025203867350060326	DESIGN	3.2307563230570295E-4	IMPLEMENTATION	1.6061621372637344E-4	DOCUMENTATION	6.413018780391517E-5	TEST
// todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.684783509384484	IMPLEMENTATION	0.207890881772978	WITHOUT_CLASSIFICATION	0.09208194225181825	DESIGN	0.009167872770832107	DEFECT	0.005932234864297062	DOCUMENTATION	1.435589555906953E-4	TEST
// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.7983894535928899	WITHOUT_CLASSIFICATION	0.2015502330357191	DESIGN	4.050510994148426E-5	IMPLEMENTATION	1.3449054944193265E-5	TEST	5.254489395676187E-6	DEFECT	1.104717109685795E-6	DOCUMENTATION
//TODO: should orphans really be deleted during lock???	DESIGN	0.7659306548545558	WITHOUT_CLASSIFICATION	0.21815127624615877	DESIGN	0.014870075322636102	DEFECT	0.0010080226468818852	IMPLEMENTATION	2.4965853138033803E-5	DOCUMENTATION	1.5005076629359758E-5	TEST
// orphans should not be deleted during merge??	DESIGN	0.9927007013419813	WITHOUT_CLASSIFICATION	0.0072922086346108375	DESIGN	4.008622454881889E-6	IMPLEMENTATION	2.1306829934590277E-6	DEFECT	8.728381011990486E-7	TEST	7.787985828843355E-8	DOCUMENTATION
// orphans should not be deleted during copy??	DESIGN	0.9981952563486082	WITHOUT_CLASSIFICATION	0.0017982855654534863	DESIGN	3.203403163730133E-6	DEFECT	2.682491747176256E-6	IMPLEMENTATION	5.066958730057922E-7	TEST	6.54951544399377E-8	DOCUMENTATION
//I suppose?	DESIGN	0.99851457419991	WITHOUT_CLASSIFICATION	0.0010249501422762918	IMPLEMENTATION	3.9353047948010667E-4	DESIGN	4.0769637565097615E-5	DOCUMENTATION	1.691217896132464E-5	DEFECT	9.26336180722198E-6	TEST
//TODO: suck this logic into the collection!	DESIGN	0.9628825421300237	WITHOUT_CLASSIFICATION	0.028809739427760918	DESIGN	0.0038935891099588266	IMPLEMENTATION	0.0031714974173120596	DEFECT	9.630255689506917E-4	DOCUMENTATION	2.796063459937354E-4	TEST
// TODO: an alternative is to check if the owner has changed; if it hasn't then // get the ID from collection.getOwner()	DESIGN	0.7137187336599639	IMPLEMENTATION	0.26284938171871763	WITHOUT_CLASSIFICATION	0.016842550697338105	DEFECT	0.004024353154446932	DESIGN	0.0025304268086246266	TEST	3.455396090891921E-5	DOCUMENTATION
//TODO:refactor + make this method private	DESIGN	0.906420114714541	WITHOUT_CLASSIFICATION	0.09246252764315924	DESIGN	7.416416702610475E-4	TEST	3.141455547718369E-4	IMPLEMENTATION	5.1635322562045904E-5	DOCUMENTATION	9.935094704860801E-6	DEFECT
// todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9932255233991706	WITHOUT_CLASSIFICATION	0.0067727382664165645	DESIGN	6.450408632765241E-7	TEST	6.010806821915473E-7	IMPLEMENTATION	3.042951236711494E-7	DOCUMENTATION	1.879177436526949E-7	DEFECT
//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.8627711017753741	DESIGN	0.1347339706658968	WITHOUT_CLASSIFICATION	0.002321687266171161	IMPLEMENTATION	9.546617471971661E-5	DOCUMENTATION	6.895410376819722E-5	TEST	8.820014070065141E-6	DEFECT
//TODO: better to pass the id in as an argument?	DESIGN	0.9743217311200555	WITHOUT_CLASSIFICATION	0.025567672148451934	DESIGN	5.76246043880974E-5	DOCUMENTATION	2.5305885355354614E-5	DEFECT	2.1366204801646723E-5	TEST	6.300036947297028E-6	IMPLEMENTATION
// todo : potentially look at optimizing these two arrays	DESIGN	0.9954063948457313	WITHOUT_CLASSIFICATION	0.0043302140863132445	IMPLEMENTATION	1.5938657500817686E-4	DESIGN	8.451119957155927E-5	DEFECT	1.3708044745137972E-5	DOCUMENTATION	5.7852486304337305E-6	TEST
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.8481952853947563	WITHOUT_CLASSIFICATION	0.1505396158867704	DESIGN	9.18473728792726E-4	IMPLEMENTATION	2.4363235125505312E-4	DEFECT	8.67420924835616E-5	TEST	1.6250545941720734E-5	DOCUMENTATION
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.8481952853947563	WITHOUT_CLASSIFICATION	0.1505396158867704	DESIGN	9.18473728792726E-4	IMPLEMENTATION	2.4363235125505312E-4	DEFECT	8.67420924835616E-5	TEST	1.6250545941720734E-5	DOCUMENTATION
//TODO: temporary	DESIGN	0.8358887785112556	DESIGN	0.14424389720998568	WITHOUT_CLASSIFICATION	0.01695052076085088	IMPLEMENTATION	0.0019364283307776308	DEFECT	5.435094213008579E-4	DOCUMENTATION	4.368657658292666E-4	TEST
//TODO: not quite sure about the full implications of this!	DESIGN	0.545465543558495	DEFECT	0.3275205581467705	WITHOUT_CLASSIFICATION	0.11809079692436286	DESIGN	0.00833693900643767	IMPLEMENTATION	4.638085645714088E-4	TEST	1.2235379936243544E-4	DOCUMENTATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.545465543558495	DEFECT	0.3275205581467705	WITHOUT_CLASSIFICATION	0.11809079692436286	DESIGN	0.00833693900643767	IMPLEMENTATION	4.638085645714088E-4	TEST	1.2235379936243544E-4	DOCUMENTATION
//TODO: ugly here:	DESIGN	0.7779944660843773	WITHOUT_CLASSIFICATION	0.15411277742711219	DESIGN	0.04404299382313051	IMPLEMENTATION	0.019999818789254036	DEFECT	0.002370869930595184	TEST	0.0014790739455308249	DOCUMENTATION
//this is kinda the best we can do...	DESIGN	0.9781297691988492	WITHOUT_CLASSIFICATION	0.016170633367040582	DESIGN	0.004760907926412689	TEST	3.9133106539667963E-4	IMPLEMENTATION	2.8899074483844194E-4	DEFECT	2.5836769746242485E-4	DOCUMENTATION
//TODO: this needn't exclude subclasses...	DESIGN	0.5186094405054724	WITHOUT_CLASSIFICATION	0.44517109757112444	DESIGN	0.01739698281459622	IMPLEMENTATION	0.012487116612715784	DEFECT	0.0039993154718464255	TEST	0.0023360470242446037	DOCUMENTATION
// todo : need map? the prob is a proper key, right?	DESIGN	0.9922597207363435	WITHOUT_CLASSIFICATION	0.004687502269549501	IMPLEMENTATION	0.002356950555193773	DESIGN	6.234522322834501E-4	DEFECT	5.091892858669741E-5	DOCUMENTATION	2.145527804309319E-5	TEST
// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.772025376444558	WITHOUT_CLASSIFICATION	0.22795074758123052	DESIGN	1.5013942717888873E-5	TEST	8.092791910718165E-6	DEFECT	5.870851727725572E-7	DOCUMENTATION	1.8215441012834662E-7	IMPLEMENTATION
// todo : hack!!! // NOTE : here we cleanup the load context when we have no more local // LCE entries.  This "works" for the time being because really // only the collection load contexts are implemented.  Long term, // this cleanup should become part of the "close result set" // processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.6732640671589601	DESIGN	0.3264139519071025	WITHOUT_CLASSIFICATION	1.8888183006513976E-4	DEFECT	1.0153884347639958E-4	IMPLEMENTATION	3.0088640794501778E-5	TEST	1.4716196013408182E-6	DOCUMENTATION
// todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.7737223620813701	WITHOUT_CLASSIFICATION	0.22583397411687278	DESIGN	2.706657935418479E-4	DEFECT	8.619249007892909E-5	IMPLEMENTATION	8.306928245568968E-5	TEST	3.7362356806740647E-6	DOCUMENTATION
// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.7436012033742667	DESIGN	0.2193221701088736	IMPLEMENTATION	0.030458269222374615	DEFECT	0.004340275539796569	WITHOUT_CLASSIFICATION	0.0022254919833891887	TEST	5.2589771299289825E-5	DOCUMENTATION
// TODO : add this info to the translator and aggregate it here...	DESIGN	0.9970338053585405	IMPLEMENTATION	0.0014189125556090003	DESIGN	0.0012035604722298468	TEST	2.1868124262263233E-4	WITHOUT_CLASSIFICATION	1.0460685522276075E-4	DOCUMENTATION	2.0433515775346056E-5	DEFECT
//TODO: move into collection type, so we can use polymorphism!	DESIGN	0.5814930253917777	DESIGN	0.4180225557412646	WITHOUT_CLASSIFICATION	2.3189363413707323E-4	DEFECT	1.4749037947703534E-4	IMPLEMENTATION	8.784058452351891E-5	DOCUMENTATION	1.7194268820076806E-5	TEST
// todo : should we check the current isolation mode explicitly?	DESIGN	0.4375169401041477	IMPLEMENTATION	0.33065957518888556	DESIGN	0.19929313950301797	WITHOUT_CLASSIFICATION	0.027192470611766592	DEFECT	0.004685313269312303	DOCUMENTATION	6.525613228698747E-4	TEST
//TODO: suck into event class	DESIGN	0.9022818017404757	WITHOUT_CLASSIFICATION	0.08509005076577168	DESIGN	0.007760806072841864	IMPLEMENTATION	0.003045838840617424	DEFECT	0.0017050281276746301	DOCUMENTATION	1.164744526186956E-4	TEST
//do we even really need this? the update will fail anyway....	DESIGN	0.9893904059251556	WITHOUT_CLASSIFICATION	0.004590763032964307	IMPLEMENTATION	0.003788075882359622	DOCUMENTATION	0.0011352912307173782	DESIGN	8.006983067076868E-4	DEFECT	2.9476562209542433E-4	TEST
//hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9532950149542022	DESIGN	0.04295114589567907	WITHOUT_CLASSIFICATION	0.0014730018590612302	DEFECT	8.620481570957527E-4	DOCUMENTATION	7.513030329363882E-4	TEST	6.674861010253097E-4	IMPLEMENTATION
//TODO: would it be better to do a refresh from db?	DESIGN	0.9874091854049328	DESIGN	0.010693057292147548	IMPLEMENTATION	0.001559275209396147	WITHOUT_CLASSIFICATION	2.714927079975557E-4	DEFECT	6.382159047367288E-5	TEST	3.1677950523498346E-6	DOCUMENTATION
//TODO: we use two visitors here, inefficient!	DESIGN	0.7161615510601809	WITHOUT_CLASSIFICATION	0.2814372145975677	DESIGN	0.0014196680116498569	IMPLEMENTATION	5.846709916964252E-4	DOCUMENTATION	2.837498810505787E-4	DEFECT	1.1314545785463148E-4	TEST
// this class has no proxies (so do a shortcut)	DESIGN	0.9982775974511298	WITHOUT_CLASSIFICATION	0.0017196276961405587	DESIGN	1.1909354376732612E-6	TEST	8.005666144209198E-7	DEFECT	6.22314113496036E-7	DOCUMENTATION	1.6103656426223967E-7	IMPLEMENTATION
//PostLoad is needed for EJB3 //TODO: reuse the PostLoadEvent...	DESIGN	0.6266727947444225	DESIGN	0.30083502811576746	IMPLEMENTATION	0.06960393359637808	WITHOUT_CLASSIFICATION	0.0013070994423877629	TEST	0.0010857335032033414	DEFECT	4.954105978408571E-4	DOCUMENTATION
//TODO: put this stuff back in to read snapshot from //      the second-level cache (needs some extra work)	DESIGN	0.8992405510070471	DESIGN	0.08969602235148628	DEFECT	0.005627183099423188	IMPLEMENTATION	0.004981155443724071	WITHOUT_CLASSIFICATION	3.187331328738105E-4	DOCUMENTATION	1.3635496544543198E-4	TEST
// null or brand new collection // this will also (inefficiently) handle arrays, which have // no snapshot, so we can't do any better	DESIGN	0.9733410423225092	WITHOUT_CLASSIFICATION	0.026657846406368303	DESIGN	8.201379809946133E-7	DOCUMENTATION	1.7434132059918212E-7	TEST	1.0637618935092507E-7	IMPLEMENTATION	1.0415631402027127E-8	DEFECT
//TODO: is this 100% correct?	DESIGN	0.9488676053167625	WITHOUT_CLASSIFICATION	0.050082754190595026	DESIGN	6.270864964087045E-4	DEFECT	2.817809925640426E-4	TEST	9.087897971554759E-5	DOCUMENTATION	4.989402395400756E-5	IMPLEMENTATION
// TODO: iteratively get transient entities and retry merge until one of the following conditions: //       1) transientCopyCache.size() == 0 //       2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing // TODO: find out if retrying can add entities to copyCache (don't think it can...) // For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.8733904532124862	DEFECT	0.12602274912502662	WITHOUT_CLASSIFICATION	5.046241387532237E-4	IMPLEMENTATION	7.187474855135555E-5	TEST	9.08183857421498E-6	DESIGN	1.2169366083873714E-6	DOCUMENTATION
// entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9995549618037037	DESIGN	2.737591677558312E-4	WITHOUT_CLASSIFICATION	1.0560624552795474E-4	DEFECT	4.749402960675118E-5	TEST	1.6451033751220384E-5	IMPLEMENTATION	1.7277196545897852E-6	DOCUMENTATION
//TODO: we should throw an exception if we really *know* for sure   //      that this is a detached instance, rather than just assuming //throw new StaleObjectStateException(entityName, id);	DESIGN	0.9359691231148689	WITHOUT_CLASSIFICATION	0.061035527305389733	DESIGN	0.002886433648847614	DEFECT	1.0553857488201935E-4	TEST	1.8932909786333651E-6	DOCUMENTATION	1.4840650330760422E-6	IMPLEMENTATION
// TODO : perhaps we should additionally require that the incoming entity // version be equivalent to the defined unsaved-value?	DESIGN	0.9487087156064395	IMPLEMENTATION	0.051279465917543454	DESIGN	9.19398537502421E-6	WITHOUT_CLASSIFICATION	1.3793800798820272E-6	DOCUMENTATION	9.906561695110336E-7	DEFECT	2.5445439262658325E-7	TEST
// perhaps this should be an exception since it is only ever used // in the above method?	DESIGN	0.9989512426931121	WITHOUT_CLASSIFICATION	0.0010464784746748916	DESIGN	2.105709386130081E-6	TEST	1.5278248395536944E-7	DEFECT	2.032400412625538E-8	DOCUMENTATION	1.633881012037909E-11	IMPLEMENTATION
// Put a placeholder in entries, so we don't recurse back and try to save() the // same object again. QUESTION: should this be done before onSave() is called? // likewise, should it be done before onUpdate()?	DESIGN	0.9130071185584716	DESIGN	0.08680439038043017	WITHOUT_CLASSIFICATION	1.847706004648501E-4	IMPLEMENTATION	2.5338832162641274E-6	DOCUMENTATION	1.1492897486429355E-6	TEST	3.7287668298996797E-8	DEFECT
//TODO: merge into one method!	DESIGN	0.6472164466881929	WITHOUT_CLASSIFICATION	0.34542454248550497	DESIGN	0.004131173953898798	IMPLEMENTATION	0.0015017141944180536	DEFECT	0.0010633417414440088	DOCUMENTATION	6.627809365413054E-4	TEST
//TODO: refactor to .sql package	DESIGN	0.8705103192412817	DESIGN	0.1227935876001067	WITHOUT_CLASSIFICATION	0.006500222579050156	IMPLEMENTATION	1.1865678773170658E-4	DEFECT	4.706751767168394E-5	DOCUMENTATION	3.0146274157860885E-5	TEST
/** * Provides query splitting methods, which were originally in QueryTranslator. * <br> * TODO: This will need to be refactored at some point. * * @author josh */	DESIGN	0.9604151563203702	DESIGN	0.02917439070866287	IMPLEMENTATION	0.008004542548466657	DOCUMENTATION	9.314001930889777E-4	WITHOUT_CLASSIFICATION	8.873247023200872E-4	TEST	5.87185527091109E-4	DEFECT
//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.9227133940934493	DESIGN	0.03901567885568668	WITHOUT_CLASSIFICATION	0.026277860494446484	IMPLEMENTATION	0.009063492564479206	TEST	0.0025156346647930657	DEFECT	4.139393271451968E-4	DOCUMENTATION
// todo : temporary //      needed because currently persister is the one that //      creates and renders the join fragments for inheritence //      hierarchies...	DESIGN	0.8077405781095108	WITHOUT_CLASSIFICATION	0.19167232144739757	DESIGN	3.905730151140627E-4	IMPLEMENTATION	9.695530130550234E-5	TEST	8.136538130658252E-5	DOCUMENTATION	1.8206745365506168E-5	DEFECT
// TODO : better way?!?	DESIGN	0.7018142830974758	DESIGN	0.29343014468074213	IMPLEMENTATION	0.0014781891525488299	DOCUMENTATION	0.0012028252854298777	TEST	0.0010915286017718093	WITHOUT_CLASSIFICATION	9.830291820315698E-4	DEFECT
// Not possible to simply re-use the versionPropertyNode here as it causes // OOM errors due to circularity :(	DESIGN	0.9999988964777505	WITHOUT_CLASSIFICATION	5.261392571126209E-7	DEFECT	4.957950023775914E-7	IMPLEMENTATION	7.507619931121016E-8	DESIGN	5.150849733531955E-9	TEST	1.360941022789421E-9	DOCUMENTATION
//TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9991052103350875	DESIGN	6.734192650024231E-4	WITHOUT_CLASSIFICATION	1.417103920396494E-4	IMPLEMENTATION	4.8095470667528836E-5	DEFECT	1.7041793566808195E-5	DOCUMENTATION	1.4522743636204587E-5	TEST
// TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9763748791525133	DESIGN	0.023041975770800843	IMPLEMENTATION	4.074132574945208E-4	TEST	1.3213448620758762E-4	DOCUMENTATION	3.970963583796923E-5	WITHOUT_CLASSIFICATION	3.887697145914687E-6	DEFECT
// even here, if only properties mapped to the "base table" are referenced // in the set and where clauses, this could be handled by the BasicDelegate. // TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9998853224072055	DESIGN	1.1411240182195075E-4	WITHOUT_CLASSIFICATION	2.3865831335431003E-7	DOCUMENTATION	2.1194060582633075E-7	DEFECT	1.0967346398357044E-7	TEST	4.918589410148812E-9	IMPLEMENTATION
//TODO: switch statements are always evil! We already had bugs because  //      of forgotten token types. Use polymorphism for this!	DESIGN	0.9068300960774525	WITHOUT_CLASSIFICATION	0.09284946609624935	DEFECT	2.080274624844713E-4	DOCUMENTATION	8.394414227082355E-5	DESIGN	1.742851323098278E-5	IMPLEMENTATION	1.1037708312024806E-5	TEST
// TODO : we really need to be able to deal with component paths here also; // this is difficult because the hql-sql grammar expects all those node types // to be FromReferenceNodes.  One potential fix here would be to convert the // IntoClause to just use a FromClause/FromElement combo (as a child of the // InsertStatement) and move all this logic into the InsertStatement.  That's // probably the easiest approach (read: least amount of changes to the grammar // and code), but just doesn't feel right as then an insert would contain // 2 from-clauses	DESIGN	0.9951112262189022	DESIGN	0.0048639332653693116	WITHOUT_CLASSIFICATION	1.6870935977796054E-5	TEST	7.514108921522507E-6	DOCUMENTATION	3.449605341032784E-7	IMPLEMENTATION	1.1051029498262297E-7	DEFECT
// really there are two situations where it should be ok to allow the insertion // into properties defined on a superclass: //      1) union-subclass with an abstract root entity //      2) discrim-subclass // // #1 is handled already because of the fact that // UnionSubclassPersister alreay always returns 0 // for this call... // // we may want to disallow it for discrim-subclass just for // consistency-sake (currently does not work anyway)...	DESIGN	0.6870625488004276	WITHOUT_CLASSIFICATION	0.31292928648724005	DESIGN	5.616370168211865E-6	TEST	2.204398454359146E-6	DEFECT	2.490212595624551E-7	DOCUMENTATION	9.492245037133601E-8	IMPLEMENTATION
//yuck!	DESIGN	0.9991304187990859	WITHOUT_CLASSIFICATION	5.392603553244851E-4	DESIGN	1.734422199126755E-4	DEFECT	1.0491791091805852E-4	DOCUMENTATION	3.799877055379677E-5	TEST	1.3961944205118903E-5	IMPLEMENTATION
// implicit joins are always(?) ok to reuse	DESIGN	0.990076674839668	WITHOUT_CLASSIFICATION	0.009194898464106495	DESIGN	6.620492011088192E-4	IMPLEMENTATION	2.7939292065181283E-5	DEFECT	2.788682324567533E-5	DOCUMENTATION	1.0551379805801226E-5	TEST
// TODO : we may also want to check that the types here map to exactly one column/JDBC-type //      can't think of a situation where arithmetic expression between multi-column mappings //      makes any sense.	DESIGN	0.9833469196644482	DESIGN	0.016549991419512466	IMPLEMENTATION	7.077848143982429E-5	DOCUMENTATION	1.923477380025765E-5	DEFECT	1.234373489454987E-5	TEST	7.319259046233327E-7	WITHOUT_CLASSIFICATION
// we do not know either type //BLIND GUESS!	DESIGN	0.9997275434176724	WITHOUT_CLASSIFICATION	1.1814439537144289E-4	DESIGN	9.662547072961085E-5	IMPLEMENTATION	3.931684343004459E-5	DEFECT	1.1545950915232509E-5	DOCUMENTATION	6.823921881135731E-6	TEST
//TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999323827618702	DESIGN	3.315651755519085E-5	IMPLEMENTATION	1.397845708577719E-5	DEFECT	1.003444957158845E-5	DOCUMENTATION	9.609127462521007E-6	WITHOUT_CLASSIFICATION	8.386864546225315E-7	TEST
// TODO: Replace this with a more elegant solution.	DESIGN	0.9969544668831511	DESIGN	0.0030292107955467436	IMPLEMENTATION	9.794303704533527E-6	TEST	5.101106961015065E-6	DEFECT	9.233627813264694E-7	DOCUMENTATION	5.035478552339784E-7	WITHOUT_CLASSIFICATION
// TODO: Should this really return null?  If not, figure out something better to do here.	DESIGN	0.9932002196086103	DESIGN	0.006607351374686172	IMPLEMENTATION	1.7380660870076095E-4	WITHOUT_CLASSIFICATION	8.39483639952306E-6	DEFECT	5.801712615359991E-6	TEST	4.425858987901416E-6	DOCUMENTATION
//TODO: get SQL rendering out of this package!	DESIGN	0.7033785966108613	DESIGN	0.29579716858877314	WITHOUT_CLASSIFICATION	6.043493408807574E-4	DEFECT	9.106761032963202E-5	IMPLEMENTATION	8.649300848331903E-5	TEST	4.232484067183802E-5	DOCUMENTATION
// yuck!	DESIGN	0.9999585754755241	WITHOUT_CLASSIFICATION	2.040961562327105E-5	DESIGN	1.2685788906398014E-5	DEFECT	5.0424062749502565E-6	DOCUMENTATION	1.9926882299628227E-6	TEST	1.2940254413217576E-6	IMPLEMENTATION
// ignore it; the incoming property could not be found so we // cannot be sure what to do here.  At the very least, the // safest is to simply not apply any dereference toggling...	DESIGN	0.9999569032330614	WITHOUT_CLASSIFICATION	3.279481488802407E-5	DESIGN	8.309795825204653E-6	IMPLEMENTATION	1.620537600443334E-6	DEFECT	2.526442067422952E-7	TEST	1.1897441804115587E-7	DOCUMENTATION
// TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.9956778347853517	DESIGN	0.0017183424330065302	DEFECT	0.0011128657603824482	WITHOUT_CLASSIFICATION	7.880337359090823E-4	IMPLEMENTATION	6.543050105755757E-4	TEST	4.8618274774709456E-5	DOCUMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character // the trim-source	DESIGN	0.8145205931775582	WITHOUT_CLASSIFICATION	0.183556192160069	DESIGN	0.0015385944590474488	IMPLEMENTATION	3.729548887818129E-4	DOCUMENTATION	1.155117192554233E-5	TEST	1.1414261795503714E-7	DEFECT
// todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.9968181341437329	WITHOUT_CLASSIFICATION	0.003161795274138752	DESIGN	1.424076436350453E-5	TEST	3.358891662721412E-6	DEFECT	2.433230062996389E-6	IMPLEMENTATION	3.769603919228954E-8	DOCUMENTATION
//TODO: is this a bit ugly?	DESIGN	0.6811054487085556	DESIGN	0.3079827948469893	WITHOUT_CLASSIFICATION	0.007318362304283643	IMPLEMENTATION	0.0017874782927047713	TEST	0.0011402610711323663	DEFECT	6.656547763343629E-4	DOCUMENTATION
// Need a better way to define the suffixes here...	DESIGN	0.9504005751723865	WITHOUT_CLASSIFICATION	0.04879965621013265	DESIGN	7.595072664873269E-4	IMPLEMENTATION	2.276839146790712E-5	TEST	9.109013170412857E-6	DOCUMENTATION	8.383946355009203E-6	DEFECT
// TODO: something much better - look at the type of the other expression! // TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9999954837724528	DESIGN	2.8297821100197495E-6	DEFECT	7.338754939756662E-7	TEST	6.186730782132754E-7	IMPLEMENTATION	3.041913712221317E-7	WITHOUT_CLASSIFICATION	2.9705493696400316E-8	DOCUMENTATION
// TODO : what amount of significant digits need to be supported here? //      - from the DecimalFormat docs: //          [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9934523487951733	DESIGN	0.003296831179952233	DOCUMENTATION	0.0022281567760170204	DEFECT	7.49864595943901E-4	IMPLEMENTATION	2.636872839774327E-4	TEST	9.111368936347225E-6	WITHOUT_CLASSIFICATION
// Needed the "clazz_" check to work around union-subclasses // TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.988966544891266	DESIGN	0.009956966956112022	IMPLEMENTATION	6.334807756813444E-4	DEFECT	3.5530141971325436E-4	WITHOUT_CLASSIFICATION	4.956887509201598E-5	DOCUMENTATION	3.813708213555095E-5	TEST
//We should actually rework this class to not implement Parser //and just process path expressions in the most convenient way.	DESIGN	0.8900282115059122	DESIGN	0.08163129299885266	WITHOUT_CLASSIFICATION	0.028056566679949112	DEFECT	2.459221845618901E-4	IMPLEMENTATION	3.211362457229674E-5	DOCUMENTATION	5.893006151876835E-6	TEST
//The class is now way to complex!	DESIGN	0.9999784148108765	WITHOUT_CLASSIFICATION	1.1205276349038173E-5	DEFECT	6.6193014094566E-6	DESIGN	1.6967220736226477E-6	IMPLEMENTATION	1.1713991041083612E-6	DOCUMENTATION	8.92490187429876E-7	TEST
//TODO: get SQL rendering out of here	DESIGN	0.6840421397114311	WITHOUT_CLASSIFICATION	0.27450354081015405	DESIGN	0.01991719430694697	DEFECT	0.01962154112184552	IMPLEMENTATION	0.00167896644338899	TEST	2.3661760623334816E-4	DOCUMENTATION
//TODO: is there a better way?	DESIGN	0.6490189230786454	DESIGN	0.3263870913812782	WITHOUT_CLASSIFICATION	0.023945947483974554	IMPLEMENTATION	2.8128639780570656E-4	TEST	2.7770917995876063E-4	DEFECT	8.9042478337443E-5	DOCUMENTATION
//Must be done here because of side-effect! yuck...	DESIGN	0.7352457548745815	WITHOUT_CLASSIFICATION	0.2639545125931634	DESIGN	4.415925955123071E-4	DEFECT	1.6049200800312736E-4	IMPLEMENTATION	1.0234263087491526E-4	DOCUMENTATION	9.53052978647042E-5	TEST
//name from a super query (a bit inelegant that it shows up here)	DESIGN	0.8534632278208849	DESIGN	0.1448334504953714	WITHOUT_CLASSIFICATION	9.780541808762575E-4	TEST	4.337226960737894E-4	IMPLEMENTATION	2.8080657889557013E-4	DEFECT	1.073822789807689E-5	DOCUMENTATION
// We should reengineer this class so that, rather than the current ad - // hoc linear approach to processing a stream of tokens, we instead // build up a tree of expressions.	DESIGN	0.9134298847040959	WITHOUT_CLASSIFICATION	0.08627578291897602	DESIGN	2.3427132204597833E-4	DEFECT	3.618643099414259E-5	DOCUMENTATION	2.3821606538079823E-5	TEST	5.3017349847848587E-8	IMPLEMENTATION
// this is ugly here, but needed because its a subquery	DESIGN	0.9249717899658176	WITHOUT_CLASSIFICATION	0.0654643238970156	DESIGN	0.008970215519893755	IMPLEMENTATION	3.9832697422859803E-4	TEST	1.1528931943847334E-4	DEFECT	8.005432360577377E-5	DOCUMENTATION
// unhappy about this being public ... is there a better way?	DESIGN	0.9645429781345194	DESIGN	0.03544438076891455	WITHOUT_CLASSIFICATION	6.6888100061031935E-6	TEST	2.6762913639414545E-6	IMPLEMENTATION	2.2030738546874104E-6	DEFECT	1.072921341258846E-6	DOCUMENTATION
// Make sure this is a defined parameter and check the incoming value type // TODO: what should be the actual exception type here?	DESIGN	0.8948352632005909	DESIGN	0.09972786081394462	IMPLEMENTATION	0.005418159082802626	WITHOUT_CLASSIFICATION	1.5032253799211171E-5	DEFECT	2.3632868421331936E-6	TEST	1.3213620204982094E-6	DOCUMENTATION
// TODO : this constructor form is *only* used from constructor directly below us; can it go away?	DESIGN	0.9993298996613378	DESIGN	2.9714818469165797E-4	WITHOUT_CLASSIFICATION	2.6951613004668666E-4	IMPLEMENTATION	9.448298926986227E-5	TEST	6.997783403601767E-6	DEFECT	1.9552512503744493E-6	DOCUMENTATION
//TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.9689300955117996	WITHOUT_CLASSIFICATION	0.019673522684042277	DESIGN	0.009258208909700211	IMPLEMENTATION	0.0018646501551462802	DEFECT	2.002875033591746E-4	DOCUMENTATION	7.323523595238102E-5	TEST
// TODO : should remove this exposure //  and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9939115215414747	DESIGN	0.0024410603607950467	DEFECT	0.00209177023245019	IMPLEMENTATION	0.0015085758095885141	WITHOUT_CLASSIFICATION	3.588337459779836E-5	DOCUMENTATION	1.1188681093784684E-5	TEST
// todo : should this get moved to PersistentContext? // logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.8815612167877668	WITHOUT_CLASSIFICATION	0.11832547326548466	DESIGN	7.527855481409914E-5	DEFECT	3.688480121063248E-5	TEST	1.0821964681563188E-6	DOCUMENTATION	6.439425556842622E-8	IMPLEMENTATION
// TODO: what type?	DESIGN	0.9350435581785199	IMPLEMENTATION	0.05841793347561092	DESIGN	0.004806166665510476	WITHOUT_CLASSIFICATION	9.271052169805006E-4	DOCUMENTATION	4.4222843152029315E-4	TEST	3.6300803185792044E-4	DEFECT
// todo : should seriously consider not allowing a txn to begin from a child session //      can always route the request to the root session...	DESIGN	0.5914527229679478	WITHOUT_CLASSIFICATION	0.38377763536568094	DEFECT	0.022318731547404175	DESIGN	0.0021443143507504743	TEST	3.044825045019441E-4	IMPLEMENTATION	2.1132637146968515E-6	DOCUMENTATION
// short-circuit for performance...	DESIGN	0.9993938197273089	WITHOUT_CLASSIFICATION	5.539515053593551E-4	DESIGN	2.120103626140799E-5	DEFECT	1.7368216795321973E-5	DOCUMENTATION	7.403634838200774E-6	IMPLEMENTATION	6.255879436749214E-6	TEST
// not absolutely necessary, but does help with aggressive release	DESIGN	0.99556429555475	WITHOUT_CLASSIFICATION	0.003562062026325862	DESIGN	4.780824538713081E-4	IMPLEMENTATION	3.5434727012916554E-4	TEST	3.664220581265874E-5	DEFECT	4.570489111031316E-6	DOCUMENTATION
// TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.9194727764604447	DESIGN	0.03664834430895329	IMPLEMENTATION	0.03541773747135815	WITHOUT_CLASSIFICATION	0.007878049509211449	TEST	4.984025476247895E-4	DEFECT	8.468970240759135E-5	DOCUMENTATION
//work around a bug in all known connection pools....	DESIGN	0.7346311641302	IMPLEMENTATION	0.19330616397313405	WITHOUT_CLASSIFICATION	0.03833286921029716	DESIGN	0.03300532483807089	DEFECT	6.787472956318552E-4	DOCUMENTATION	4.5730552666090305E-5	TEST
// TODO : make this the factory for "entity mode related" sessions; // also means making this the target of transaction-synch and the // thing that knows how to cascade things between related sessions // // At that point, perhaps this thing is a "SessionContext", and // ConnectionManager is a "JDBCContext"?  A "SessionContext" should // live in the impl package...	DESIGN	0.9998225099680109	DESIGN	1.7718660742995737E-4	IMPLEMENTATION	2.1096892970829178E-7	TEST	4.798599144166402E-8	DEFECT	4.345982550258698E-8	DOCUMENTATION	1.009812432755415E-9	WITHOUT_CLASSIFICATION
//TODO: does this really need to be here? //      does the collection already have //      it's own up-to-date snapshot?	DESIGN	0.81177023657435	WITHOUT_CLASSIFICATION	0.14020190292210996	DESIGN	0.028480009444003487	DEFECT	0.018215167826725966	IMPLEMENTATION	0.0011118789376660552	TEST	2.208042951446298E-4	DOCUMENTATION
//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.5570463196198291	IMPLEMENTATION	0.38244191096247354	DESIGN	0.05975419420147276	WITHOUT_CLASSIFICATION	6.422533262566812E-4	DEFECT	1.051785718264769E-4	DOCUMENTATION	1.014331814141328E-5	TEST
/**	DESIGN	0.9471215356924972	DESIGN	0.047295764984962636	WITHOUT_CLASSIFICATION	0.001798892598532828	DOCUMENTATION	0.0015183353542191267	TEST	0.0013744368199287416	IMPLEMENTATION	8.910345498594567E-4	DEFECT
// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; //      but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; //      currently this works in conjuction with the check on //      DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from //      cache with enabled filters). // EARLY EXIT!!!!!	DESIGN	0.9999999150623565	WITHOUT_CLASSIFICATION	7.558182374206972E-8	DESIGN	4.52222399260609E-9	TEST	3.4693653788987998E-9	DOCUMENTATION	1.0253140297778875E-9	DEFECT	3.389163331791297E-10	IMPLEMENTATION
//for sets, we should end the collection load after resolving //the entities, since we might call hashCode() on the elements //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.8533497682022152	WITHOUT_CLASSIFICATION	0.13340061890953878	DESIGN	0.013198838796285937	IMPLEMENTATION	3.158045022835102E-5	DEFECT	1.0173302281880805E-5	DOCUMENTATION	9.020339449965053E-6	TEST
//This is not very nice (and quite slow):	DESIGN	0.988853981762762	WITHOUT_CLASSIFICATION	0.008926438640444402	DEFECT	0.0021327354900874847	DESIGN	7.007557639221592E-5	IMPLEMENTATION	1.003629438903205E-5	DOCUMENTATION	6.732235924918019E-6	TEST
//use of trim() here is ugly?	DESIGN	0.9994764454052238	WITHOUT_CLASSIFICATION	5.03855361329563E-4	DESIGN	6.8101777635410105E-6	DEFECT	5.546581945594765E-6	TEST	3.9490096652256305E-6	IMPLEMENTATION	3.3934640721645818E-6	DOCUMENTATION
//TODO: this is too conservative; if all preceding joins were  //      also inner joins, we could use an inner join here	DESIGN	0.996728591900084	WITHOUT_CLASSIFICATION	0.003199412479846799	DESIGN	3.242762694856094E-5	DEFECT	3.0509382565559617E-5	TEST	4.723664308963933E-6	IMPLEMENTATION	4.334946245989221E-6	DOCUMENTATION
//TODO: look at the owning property and check that it  //      isn't lazy (by instrumentation)	DESIGN	0.6739938539899754	WITHOUT_CLASSIFICATION	0.29061649837577447	IMPLEMENTATION	0.034542004128432294	DEFECT	8.167283385071773E-4	DOCUMENTATION	2.0470560779202072E-5	TEST	1.0444606531596156E-5	DESIGN
//TODO: inefficient	DESIGN	0.6699944116384395	DESIGN	0.32357013533251106	WITHOUT_CLASSIFICATION	0.00434828623240228	IMPLEMENTATION	0.0014423081056073746	DOCUMENTATION	4.8296118718939085E-4	DEFECT	1.6189750385043513E-4	TEST
// why does this matter?	DESIGN	0.9996171442016182	WITHOUT_CLASSIFICATION	2.596549506855482E-4	DESIGN	8.92436992498147E-5	TEST	1.7315642468375588E-5	DOCUMENTATION	1.4253240031991198E-5	IMPLEMENTATION	2.3882659461011806E-6	DEFECT
// from the collection of associations, locate OJA for the // ManyToOne corresponding to this persister to fully // define the many-to-many; we need that OJA so that we can // use its alias here // TODO : is there a better way here?	DESIGN	0.9998143126655004	DESIGN	1.5605710810624596E-4	IMPLEMENTATION	1.9335609899705728E-5	WITHOUT_CLASSIFICATION	9.247588652707407E-6	TEST	9.715252800891989E-7	DOCUMENTATION	7.550256088218454E-8	DEFECT
//TODO: this class depends directly upon CriteriaImpl,  //      in the impl package ... add a CriteriaImplementor  //      interface	DESIGN	0.9998932336512464	DESIGN	8.004110422634185E-5	WITHOUT_CLASSIFICATION	1.5022465570694653E-5	IMPLEMENTATION	1.1035816328313559E-5	DEFECT	3.9169773177013127E-7	DOCUMENTATION	2.752648967076239E-7	TEST
//TODO: add a CriteriaImplementor interface //      this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.9975584002874485	DESIGN	0.0023617535715976194	WITHOUT_CLASSIFICATION	5.870034349825474E-5	IMPLEMENTATION	1.9070286505135763E-5	DEFECT	1.5622346613245003E-6	DOCUMENTATION	5.132762889504127E-7	TEST
// TODO : not so sure this is needed...	DESIGN	0.9213476229591367	DESIGN	0.07827674813327386	IMPLEMENTATION	1.9973396898211173E-4	TEST	1.0333107551643053E-4	DEFECT	7.218996382082293E-5	DOCUMENTATION	3.738992700334886E-7	WITHOUT_CLASSIFICATION
// meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9753716340794463	WITHOUT_CLASSIFICATION	0.024151106469233442	DESIGN	4.263466067214053E-4	DEFECT	2.6064101587063434E-5	IMPLEMENTATION	1.2995229279746102E-5	DOCUMENTATION	1.1853513732159896E-5	TEST
// TODO: The order in which entities are saved may matter (e.g., a particular transient entity //       may need to be saved before other transient entities can be saved; //       Keep retrying the batch of transient entities until either: //       1) there are no transient entities left in transientCopyCache //       or 2) no transient entities were saved in the last batch // For now, just run through the transient entities and retry the merge	DESIGN	0.5316679319255201	DEFECT	0.39833378524644497	WITHOUT_CLASSIFICATION	0.04840386694107829	IMPLEMENTATION	0.021255579389769547	DESIGN	2.2033652061761996E-4	DOCUMENTATION	1.1849997656934876E-4	TEST
// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.5419830151876125	DESIGN	0.45781883254461764	WITHOUT_CLASSIFICATION	1.2122885525457832E-4	IMPLEMENTATION	6.360998131947485E-5	DEFECT	9.682362781445036E-6	DOCUMENTATION	3.6310684143147145E-6	TEST
// todo : currently expects that the individual with expressions apply to the same sql table join. //      This may not be the case for joined-subclass where the property values //      might be coming from different tables in the joined hierarchy.  At some //      point we should expand this to support that capability.  However, that has //      some difficulties: //          1) the biggest is how to handle ORs when the individual comparisons are //              linked to different sql joins. //          2) here we would need to track each comparison individually, along with //              the join alias to which it applies and then pass that information //              back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.9926437240994304	WITHOUT_CLASSIFICATION	0.006598012984039641	IMPLEMENTATION	5.225103494481259E-4	DEFECT	1.3027663439168382E-4	DESIGN	1.0486446712057337E-4	DOCUMENTATION	6.114655697190137E-7	TEST
// this function has a template -> restore output, apply the template and write the result out // TODO: Downcast to avoid using an interface?  Yuck.	DESIGN	0.9891483046339647	DESIGN	0.005348835178491658	WITHOUT_CLASSIFICATION	0.002297269885125515	IMPLEMENTATION	0.0022310987077053556	TEST	6.772857911497376E-4	DEFECT	2.972058035629162E-4	DOCUMENTATION
// at some point the generate phase needs to be moved out of here, // because a single object-level DML might spawn multiple SQL DML // command executions. // // Possible to just move the sql generation for dml stuff, but for // consistency-sake probably best to just move responsiblity for // the generation phase completely into the delegates // (QueryLoader/StatementExecutor) themselves.  Also, not sure why // QueryLoader currently even has a dependency on this at all; does // it need it?  Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.971036556951169	DESIGN	0.028956125447570258	WITHOUT_CLASSIFICATION	3.5852810680006943E-6	DOCUMENTATION	3.534039534897146E-6	DEFECT	1.337566207953678E-7	TEST	6.452403703888649E-8	IMPLEMENTATION
// get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.9298536553510364	WITHOUT_CLASSIFICATION	0.0672117476109169	DESIGN	0.0028993270752735783	IMPLEMENTATION	2.7827397560658567E-5	DEFECT	5.7086240623933885E-6	TEST	1.733941150031224E-6	DOCUMENTATION
// TODO should we just collect these like with the collections above?	DESIGN	0.99254530287059	IMPLEMENTATION	0.006589349097302633	DESIGN	7.114956358066646E-4	TEST	1.4866847902082276E-4	WITHOUT_CLASSIFICATION	5.089030684473459E-6	DOCUMENTATION	9.488659546912273E-8	DEFECT
// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification // see the discussion there in DynamicFilterParameterSpecification's javadocs as to why // it is currently not done that way.	DESIGN	0.967363104432661	DESIGN	0.03263251758272274	WITHOUT_CLASSIFICATION	3.1703794671237963E-6	DOCUMENTATION	6.481801575308345E-7	TEST	5.572085224337226E-7	DEFECT	2.2164692601849476E-9	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////// // USED ONLY FOR REGRESSION TESTING!!!! // // todo : obviously get rid of all this junk ;) ///////////////////////////////////////////////////////////////////////////	DESIGN	0.9998822576548293	WITHOUT_CLASSIFICATION	8.766216565679152E-5	DESIGN	2.5312506103879445E-5	IMPLEMENTATION	2.993056342344322E-6	DEFECT	9.526510022814032E-7	DOCUMENTATION	8.219660653169466E-7	TEST
//create an index on the key columns??	DESIGN	0.9996105204914092	WITHOUT_CLASSIFICATION	3.4315495915634693E-4	DESIGN	2.6809446232481488E-5	DEFECT	9.893125556757796E-6	TEST	4.879730799683727E-6	IMPLEMENTATION	4.74224684553278E-6	DOCUMENTATION
//TODO: deprecated, remove eventually	DESIGN	0.9387523760334071	DESIGN	0.032574203893311726	WITHOUT_CLASSIFICATION	0.025812589172620425	IMPLEMENTATION	0.0026781701026331794	DEFECT	1.5888626847383042E-4	DOCUMENTATION	2.3774529553664926E-5	TEST
//create an index on the key columns??	DESIGN	0.9996105204914092	WITHOUT_CLASSIFICATION	3.4315495915634693E-4	DESIGN	2.6809446232481488E-5	DEFECT	9.893125556757796E-6	TEST	4.879730799683727E-6	IMPLEMENTATION	4.74224684553278E-6	DOCUMENTATION
//TODO: improve this hack!	DESIGN	0.9454683182421824	DESIGN	0.03341628706866237	WITHOUT_CLASSIFICATION	0.01952474242493284	IMPLEMENTATION	7.718505969854483E-4	TEST	5.609244665394556E-4	DEFECT	2.578772006974888E-4	DOCUMENTATION
// inheritance cycle detection (paranoid check)	DESIGN	0.991550131818558	WITHOUT_CLASSIFICATION	0.0068723737934288315	IMPLEMENTATION	0.001537554883714162	DESIGN	1.7636510501447015E-5	DOCUMENTATION	1.666438075792827E-5	DEFECT	5.63861303970646E-6	TEST
//TODO: remove use of instanceof!	DESIGN	0.8211210088473447	WITHOUT_CLASSIFICATION	0.1692385082457973	DESIGN	0.009162794002325097	DEFECT	2.2982728178074798E-4	DOCUMENTATION	2.2786192098767072E-4	IMPLEMENTATION	1.999970176447968E-5	TEST
//shortcut	DESIGN	0.9997863692693589	WITHOUT_CLASSIFICATION	1.8203900158462156E-4	DESIGN	1.1716676956438035E-5	DOCUMENTATION	1.1661047582884753E-5	DEFECT	7.016905515868347E-6	TEST	1.1970990012274646E-6	IMPLEMENTATION
//TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.9628651752159203	WITHOUT_CLASSIFICATION	0.019295334574729133	DESIGN	0.01759477346061465	IMPLEMENTATION	1.6277026624728864E-4	DEFECT	4.3153726986240614E-5	DOCUMENTATION	3.879275550241002E-5	TEST
// create an index on the key columns??	DESIGN	0.9999426043523937	WITHOUT_CLASSIFICATION	4.9230291358474586E-5	DESIGN	5.459529668760506E-6	DEFECT	1.6168868477648453E-6	TEST	5.781064208289722E-7	DOCUMENTATION	5.10833310499711E-7	IMPLEMENTATION
// todo : remove	DESIGN	0.9877496789739356	WITHOUT_CLASSIFICATION	0.011995314769570973	DESIGN	1.7371330050624847E-4	IMPLEMENTATION	3.902982738714179E-5	DEFECT	2.925508510988963E-5	TEST	1.300804349006205E-5	DOCUMENTATION
// todo : remove	DESIGN	0.9877496789739356	WITHOUT_CLASSIFICATION	0.011995314769570973	DESIGN	1.7371330050624847E-4	IMPLEMENTATION	3.902982738714179E-5	DEFECT	2.925508510988963E-5	TEST	1.300804349006205E-5	DOCUMENTATION
// todo : remove	DESIGN	0.9877496789739356	WITHOUT_CLASSIFICATION	0.011995314769570973	DESIGN	1.7371330050624847E-4	IMPLEMENTATION	3.902982738714179E-5	DEFECT	2.925508510988963E-5	TEST	1.300804349006205E-5	DOCUMENTATION
// todo : throw exception?	DESIGN	0.9900786626481121	WITHOUT_CLASSIFICATION	0.00862765543825709	DESIGN	8.036901827360209E-4	DEFECT	3.4789367264776187E-4	IMPLEMENTATION	9.025680241887005E-5	DOCUMENTATION	5.184125582812216E-5	TEST
// todo : throw exception?  maybe warn if not the same?	DESIGN	0.6609567143643896	DESIGN	0.20313776233600286	DEFECT	0.11999391653154338	WITHOUT_CLASSIFICATION	0.015324194010539425	IMPLEMENTATION	3.4260726285204187E-4	DOCUMENTATION	2.4480549467257884E-4	TEST
//TODO: make EntityPersister *not* depend on SessionFactoryImplementor //interface, if possible	DESIGN	0.8590170343348797	DESIGN	0.13063543638270814	WITHOUT_CLASSIFICATION	0.007690364111320534	IMPLEMENTATION	0.002475026013036229	DEFECT	1.2118031298071769E-4	TEST	6.095884507455609E-5	DOCUMENTATION
//TODO: is there a more elegant way than downcasting?	DESIGN	0.9958838916621674	DESIGN	0.0033328705576890754	WITHOUT_CLASSIFICATION	5.813959992031949E-4	IMPLEMENTATION	1.661446107156131E-4	DEFECT	3.0478728156150395E-5	TEST	5.218442068694557E-6	DOCUMENTATION
// TODO: encapsulate the protected instance variables!	DESIGN	0.8730479357654806	IMPLEMENTATION	0.06174700881951626	WITHOUT_CLASSIFICATION	0.042709678920910814	DESIGN	0.021905616584456757	DEFECT	4.974570655390758E-4	DOCUMENTATION	9.230284409649836E-5	TEST
// should indicate that we are processing an INSERT/UPDATE/DELETE // query with a subquery implied via a collection property // function. Here, we need to use the table name itself as the // qualification alias. // TODO : verify this works for all databases... // TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9967986288231683	IMPLEMENTATION	0.0028725716148366004	DESIGN	1.7440099825244727E-4	DEFECT	7.173614424298086E-5	WITHOUT_CLASSIFICATION	7.108674973720192E-5	TEST	1.1575669762461746E-5	DOCUMENTATION
//TODO: copy/paste from insertRows()	DESIGN	0.9256188169099878	WITHOUT_CLASSIFICATION	0.05959711036949084	DESIGN	0.013037328692601841	DEFECT	0.0013922771262769953	IMPLEMENTATION	2.4451656252684755E-4	TEST	1.0995033911558204E-4	DOCUMENTATION
//TODO: copy/paste from recreate()	DESIGN	0.9610053270000772	WITHOUT_CLASSIFICATION	0.03527592649407162	DESIGN	0.0023624358190801045	IMPLEMENTATION	0.0011440201907978347	DEFECT	1.4698141038570984E-4	TEST	6.530908558750232E-5	DOCUMENTATION
//should this interface extend PropertyMapping?	DESIGN	0.9803227794494579	DESIGN	0.019638830452195614	WITHOUT_CLASSIFICATION	1.9953477191103513E-5	TEST	9.286946772784184E-6	DOCUMENTATION	8.90368136531074E-6	DEFECT	2.459930172826879E-7	IMPLEMENTATION
//ie. the subquery! yuck!	DESIGN	0.9997921327154454	WITHOUT_CLASSIFICATION	1.4685536901153697E-4	IMPLEMENTATION	2.145672544605819E-5	DEFECT	1.999929925399047E-5	DESIGN	1.3124715686631759E-5	DOCUMENTATION	6.431175156522891E-6	TEST
//TODO: move to .sql package!!	DESIGN	0.5532606501027437	WITHOUT_CLASSIFICATION	0.42424243671175554	DESIGN	0.02078235816375337	IMPLEMENTATION	7.634797561379332E-4	DEFECT	6.721898572876379E-4	DOCUMENTATION	2.7888540832188676E-4	TEST
//TODO: code duplication with SingleTableEntityPersister	DESIGN	0.9363083821748663	DESIGN	0.062261793491579155	WITHOUT_CLASSIFICATION	7.347740573900892E-4	IMPLEMENTATION	4.009469208241859E-4	TEST	1.6855989776206338E-4	DEFECT	1.2554345757808164E-4	DOCUMENTATION
// TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9976169469836638	DESIGN	0.002257989005339721	IMPLEMENTATION	6.666185878094324E-5	DEFECT	4.269591030789231E-5	WITHOUT_CLASSIFICATION	1.2028886771808818E-5	DOCUMENTATION	3.6773551357621456E-6	TEST
//TODO: *two* hashmap lookups here is one too many...	DESIGN	0.8745312667140696	WITHOUT_CLASSIFICATION	0.06673736136340709	DESIGN	0.05734453349281822	DEFECT	0.0010486468250437858	IMPLEMENTATION	2.9340089699334107E-4	TEST	4.47907076680718E-5	DOCUMENTATION
//TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.9849275544717024	DESIGN	0.014976988891130276	WITHOUT_CLASSIFICATION	3.6270178180354596E-5	IMPLEMENTATION	3.392791497002652E-5	TEST	1.4514953933348609E-5	DOCUMENTATION	1.0743590083606188E-5	DEFECT
//perhaps not really necessary...	DESIGN	0.995400251350237	WITHOUT_CLASSIFICATION	0.002775497746181738	DESIGN	0.001118513908899673	IMPLEMENTATION	6.68249326243527E-4	DEFECT	2.3021667245075688E-5	TEST	1.4466001193017812E-5	DOCUMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.9008224135792039	WITHOUT_CLASSIFICATION	0.09674195152204143	DESIGN	0.0021537819369219706	DEFECT	1.6574160387874232E-4	TEST	1.0909183167637957E-4	IMPLEMENTATION	7.019526277629733E-6	DOCUMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.9073208984157618	WITHOUT_CLASSIFICATION	0.08965562336683289	DESIGN	0.002878725224544401	DEFECT	1.2934829973077703E-4	TEST	1.153805694809289E-5	IMPLEMENTATION	3.866636182048133E-6	DOCUMENTATION
//TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.7373177531807924	WITHOUT_CLASSIFICATION	0.18446240060377875	DESIGN	0.07002733860540616	IMPLEMENTATION	0.005026506376169597	DEFECT	0.0024761502684367697	DOCUMENTATION	6.898509654163209E-4	TEST
//TODO: optimize this better!	DESIGN	0.7223293192648954	WITHOUT_CLASSIFICATION	0.2278576659728692	IMPLEMENTATION	0.04714808725789203	DESIGN	0.0013832798378940957	TEST	9.406228503328879E-4	DOCUMENTATION	3.4102481611650374E-4	DEFECT
//TODO: should we allow suffixes on these ?	DESIGN	0.6070136788582363	DESIGN	0.34511999186249187	WITHOUT_CLASSIFICATION	0.03906753049175326	DEFECT	0.007569161429892817	IMPLEMENTATION	6.515376823906054E-4	DOCUMENTATION	5.780996752351632E-4	TEST
//This is really ugly, but necessary:	DESIGN	0.9808565326619535	WITHOUT_CLASSIFICATION	0.01777621793320125	DESIGN	0.0012580639172950932	DEFECT	4.400784426658482E-5	TEST	3.2887836574585334E-5	DOCUMENTATION	3.228980670896153E-5	IMPLEMENTATION
//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.9997766627885901	DESIGN	1.859113282080345E-4	WITHOUT_CLASSIFICATION	2.436672548493995E-5	IMPLEMENTATION	9.327901198781038E-6	TEST	2.7986046928685623E-6	DEFECT	9.326518252410042E-7	DOCUMENTATION
//TODO: disable batch loading if lockMode > READ?	DESIGN	0.9848202472286568	WITHOUT_CLASSIFICATION	0.006830510857131939	DESIGN	0.005829585143990622	DEFECT	0.0022349099713315315	IMPLEMENTATION	1.6515377778459316E-4	TEST	1.1959302110450977E-4	DOCUMENTATION
// append the SQL to return the generated identifier //TODO: suck into Insert	DESIGN	0.9317465834903723	WITHOUT_CLASSIFICATION	0.05021616008762644	DESIGN	0.017922557738195403	IMPLEMENTATION	6.592551761956566E-5	DEFECT	4.086052147885645E-5	DOCUMENTATION	7.912644707544224E-6	TEST
//TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.6350321590565068	DESIGN	0.29502180003377304	WITHOUT_CLASSIFICATION	0.06930621843829664	DEFECT	4.3315593563335585E-4	IMPLEMENTATION	1.5883789820326914E-4	TEST	4.7828637587148636E-5	DOCUMENTATION
//TODO: is this really necessary????	DESIGN	0.7885397970832603	WITHOUT_CLASSIFICATION	0.20683005161286389	DESIGN	0.0022790363583289047	IMPLEMENTATION	0.0017933557376845868	DEFECT	3.2760152299413835E-4	DOCUMENTATION	2.3015768486808494E-4	TEST
//TODO: move to .sql package, and refactor with similar things!	DESIGN	0.9805379277445525	DESIGN	0.01934047617885397	WITHOUT_CLASSIFICATION	7.1917691773419E-5	IMPLEMENTATION	2.582762167036926E-5	DEFECT	1.8367001415845714E-5	TEST	5.483761733808727E-6	DOCUMENTATION
//TODO: implement functionality //  this might be painful to do here, as the "join post processing" for //  the subquery has already been performed (meaning that for //  theta-join dialects, the join conditions have already been moved //  over to the where clause).  A "simple" solution here might to //  perform "join post processing" once for the entire query (including //  any subqueries) at one fell swoop	DESIGN	0.9573811750252582	DESIGN	0.042059087208424745	IMPLEMENTATION	5.525348842402086E-4	WITHOUT_CLASSIFICATION	5.372936782795247E-6	DEFECT	1.3665292331896268E-6	DOCUMENTATION	4.6341606080442497E-7	TEST
// todo : this eventually needs to be removed	DESIGN	0.8844012182336266	WITHOUT_CLASSIFICATION	0.08272538078923806	DESIGN	0.030519462334346138	IMPLEMENTATION	0.00204152068510234	DEFECT	1.588710819657719E-4	TEST	1.5354687572119444E-4	DOCUMENTATION
//kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.6261422804410027	IMPLEMENTATION	0.28616865711832373	WITHOUT_CLASSIFICATION	0.08216390631659816	DESIGN	0.0030544479223600534	TEST	0.0023472565311069313	DEFECT	1.2345167060838141E-4	DOCUMENTATION
//is this ok?	DESIGN	0.9998591332431083	WITHOUT_CLASSIFICATION	9.758863265125928E-5	DESIGN	1.97885680759373E-5	TEST	1.679560598038458E-5	DOCUMENTATION	4.570054494337503E-6	IMPLEMENTATION	2.123895689915621E-6	DEFECT
//TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9793687962638861	DESIGN	0.018625160733868388	WITHOUT_CLASSIFICATION	0.0010624369163618563	DEFECT	6.585675471052646E-4	IMPLEMENTATION	2.3964572836652245E-4	TEST	4.539281041187771E-5	DOCUMENTATION
//TODO: make this a bit nicer	DESIGN	0.6755857196610994	WITHOUT_CLASSIFICATION	0.3019333020657589	DESIGN	0.011014113591237187	TEST	0.010041382223013401	IMPLEMENTATION	8.286100225880628E-4	DEFECT	5.968724363029945E-4	DOCUMENTATION
//Yuck:	DESIGN	0.9990697383441131	WITHOUT_CLASSIFICATION	6.594051138909161E-4	DESIGN	1.0167619965861143E-4	DEFECT	8.365339235912634E-5	DOCUMENTATION	5.4824171220405234E-5	TEST	3.070277875781397E-5	IMPLEMENTATION
//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.8211665221381637	DESIGN	0.177032774711945	WITHOUT_CLASSIFICATION	0.001489830180720133	DEFECT	2.3272691571453544E-4	IMPLEMENTATION	5.461759223414965E-5	TEST	2.3528461222466455E-5	DOCUMENTATION
/**	DESIGN	0.9471215356924972	DESIGN	0.047295764984962636	WITHOUT_CLASSIFICATION	0.001798892598532828	DOCUMENTATION	0.0015183353542191267	TEST	0.0013744368199287416	IMPLEMENTATION	8.910345498594567E-4	DEFECT
// TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.9830024076256814	DESIGN	0.015163599787847554	IMPLEMENTATION	0.0011589406134280683	WITHOUT_CLASSIFICATION	4.6459326111736104E-4	DEFECT	1.9642575233960583E-4	DOCUMENTATION	1.4032959586122805E-5	TEST
//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.9966347872628567	DESIGN	0.0033075057099123915	WITHOUT_CLASSIFICATION	4.2396382729627754E-5	DOCUMENTATION	1.0183692421216735E-5	DEFECT	4.904837845967328E-6	IMPLEMENTATION	2.2211423433736592E-7	TEST
//TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.7690458013750807	DESIGN	0.1878246418078042	WITHOUT_CLASSIFICATION	0.038348801088328756	DEFECT	0.003331655104174919	IMPLEMENTATION	8.867371358112784E-4	TEST	5.623634888001466E-4	DOCUMENTATION
// todo : YUCK!!!	DESIGN	0.9996993369842574	WITHOUT_CLASSIFICATION	1.2924795709668986E-4	DESIGN	9.050919501526838E-5	DEFECT	4.0636964933314954E-5	IMPLEMENTATION	3.0617151518429315E-5	DOCUMENTATION	9.651747178970033E-6	TEST
// TODO : YUCK!!!  fix after HHH-1907 is complete	DESIGN	0.9886310713977303	DESIGN	0.005809397096127936	IMPLEMENTATION	0.00286079261147467	WITHOUT_CLASSIFICATION	0.0021429668578834327	DEFECT	5.121947078372387E-4	TEST	4.3577328946455815E-5	DOCUMENTATION
//TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9771195812641071	DESIGN	0.022219360430130553	IMPLEMENTATION	3.219685684667965E-4	WITHOUT_CLASSIFICATION	1.5523521658009765E-4	TEST	1.1102300920577008E-4	DEFECT	7.283151150981916E-5	DOCUMENTATION
//TODO: design new lifecycle for ProxyFactory	DESIGN	0.9547932420887513	WITHOUT_CLASSIFICATION	0.036841046858592914	DESIGN	0.005965573643637266	DEFECT	0.0020390335457004527	IMPLEMENTATION	2.5193826743311683E-4	DOCUMENTATION	1.0916559588495805E-4	TEST
//TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.7889023175924046	DESIGN	0.20440212433725294	WITHOUT_CLASSIFICATION	0.004753438333602709	DEFECT	0.001642451015786873	IMPLEMENTATION	2.1225231817875495E-4	DOCUMENTATION	8.741640277419722E-5	TEST
// TODO: copy/paste from ManyToOneType	DESIGN	0.7184335828518437	DESIGN	0.18844882745306735	WITHOUT_CLASSIFICATION	0.08882250902376415	IMPLEMENTATION	0.0030970457411776766	DEFECT	6.175944845856357E-4	DOCUMENTATION	5.804404455616696E-4	TEST
//TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9684393265718279	DESIGN	0.0310090775207298	WITHOUT_CLASSIFICATION	2.3147838476034928E-4	IMPLEMENTATION	1.8786733526633995E-4	DEFECT	1.1026461264541488E-4	TEST	2.1985574770116227E-5	DOCUMENTATION
//TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.6428681334937479	WITHOUT_CLASSIFICATION	0.32047605089550246	DESIGN	0.03296970027411274	DEFECT	0.002081146387892809	IMPLEMENTATION	9.978650901534116E-4	DOCUMENTATION	6.071038585906777E-4	TEST
//TODO: implement caching?! proxies?!	DESIGN	0.9725881029380399	IMPLEMENTATION	0.02102688346619467	WITHOUT_CLASSIFICATION	0.004596767353696244	DESIGN	0.0015490133689092071	DEFECT	1.681879068296666E-4	DOCUMENTATION	7.10449663304232E-5	TEST
//TODO: is this right??	DESIGN	0.7399660503581648	WITHOUT_CLASSIFICATION	0.25739448369057083	DESIGN	9.95682139728073E-4	IMPLEMENTATION	6.772071678453833E-4	DEFECT	5.997752505530789E-4	TEST	3.6680139313789305E-4	DOCUMENTATION
// is this really necessary?	DESIGN	0.9999298679924565	WITHOUT_CLASSIFICATION	6.703279707152343E-5	DESIGN	1.1609162398373195E-6	TEST	8.660756469345308E-7	DOCUMENTATION	6.124920443634651E-7	IMPLEMENTATION	4.597265408817458E-7	DEFECT
//TODO: move these to a new JoinableType abstract class, //extended by EntityType and PersistentCollectionType:	DESIGN	0.765905027360187	DESIGN	0.2339777908927596	WITHOUT_CLASSIFICATION	1.1159153140205141E-4	TEST	2.77933751462652E-6	DOCUMENTATION	2.0560152072358585E-6	IMPLEMENTATION	7.548629294501286E-7	DEFECT
// TODO: this is very suboptimal for some subclasses (namely components), // since it does not take advantage of two-phase-load	DESIGN	0.9298811013245288	DESIGN	0.05278589482589297	WITHOUT_CLASSIFICATION	0.013475569065414009	DEFECT	0.003576540179381545	TEST	1.5361193140686397E-4	DOCUMENTATION	1.27282673375888E-4	IMPLEMENTATION
// worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.8018819604071472	DESIGN	0.18757316411673164	WITHOUT_CLASSIFICATION	0.008217079684632825	DEFECT	0.0018823228148970458	IMPLEMENTATION	4.3847006352189276E-4	TEST	7.002913069308056E-6	DOCUMENTATION
// NOTE VERY HACKISH WORKAROUND!! // TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.8747220228233734	DESIGN	0.08930064422487058	IMPLEMENTATION	0.035082030307771406	DEFECT	7.774158720566804E-4	TEST	1.1138407492252297E-4	DOCUMENTATION	6.502697005407229E-6	WITHOUT_CLASSIFICATION
// TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.8540514535674648	IMPLEMENTATION	0.12498384891529933	DESIGN	0.01853387261599881	DEFECT	0.002064880066467992	TEST	3.354343888116105E-4	DOCUMENTATION	3.0510445957364435E-5	WITHOUT_CLASSIFICATION
// We would probably refactor to have LogicParser (builds a tree of simple // expressions connected by and, or, not), ExpressionParser (translates // from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like // FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much // the same thing it does now)	DESIGN	0.47675812679885177	WITHOUT_CLASSIFICATION	0.47108995582069435	DESIGN	0.04422380114219564	IMPLEMENTATION	0.006631337409778731	DEFECT	0.0012735366666262425	TEST	2.3242161853215115E-5	DOCUMENTATION
//TODO: this is a little inefficient, don't need to do a whole //      deep replaceElements() call	DESIGN	0.9999916149642354	DESIGN	6.090339892762929E-6	IMPLEMENTATION	2.1953914748305852E-6	WITHOUT_CLASSIFICATION	4.664718897223486E-8	TEST	4.589312205690612E-8	DOCUMENTATION	6.764086054916098E-9	DEFECT
//workaround for WebLogic	DESIGN	0.9800975792375707	WITHOUT_CLASSIFICATION	0.019372780359653976	DESIGN	2.8960917338695223E-4	DEFECT	1.813164678837164E-4	IMPLEMENTATION	4.5160852651774985E-5	DOCUMENTATION	1.35539088529274E-5	TEST
//TODO: this dependency is kinda Bad	DESIGN	0.86507668922586	DESIGN	0.0807106220022149	WITHOUT_CLASSIFICATION	0.03142957194604938	IMPLEMENTATION	0.015874440135425095	DEFECT	0.005376500788331625	DOCUMENTATION	0.0015321759021188896	TEST
//ick!	DESIGN	0.9996977263694956	WITHOUT_CLASSIFICATION	1.4849940545869672E-4	DESIGN	6.360662400758799E-5	DEFECT	5.9167740617288564E-5	DOCUMENTATION	2.3865682248000146E-5	TEST	7.134178172790048E-6	IMPLEMENTATION
// short cut check...	DESIGN	0.9999004185681512	WITHOUT_CLASSIFICATION	7.139590953542986E-5	IMPLEMENTATION	1.8073542155184205E-5	DESIGN	5.049653535922E-6	TEST	3.3995788130565222E-6	DOCUMENTATION	1.6627478091048185E-6	DEFECT
// todo : move to StringHelper?	DESIGN	0.9662558624069456	WITHOUT_CLASSIFICATION	0.033674310505631584	DESIGN	3.6755191582439986E-5	IMPLEMENTATION	1.8662412753943893E-5	DEFECT	7.745255901340707E-6	DOCUMENTATION	6.664227185122092E-6	TEST
//yukky! Don't you have subclasses for that! //TODO race conditions can happen here	DESIGN	0.8845277613734137	DESIGN	0.11156217707020978	WITHOUT_CLASSIFICATION	0.0019287892858802283	IMPLEMENTATION	0.0010914068573569555	TEST	8.380511755002303E-4	DEFECT	5.181423763892959E-5	DOCUMENTATION
//TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.685722893680281	DESIGN	0.16579879344296178	WITHOUT_CLASSIFICATION	0.14233081219397695	DEFECT	0.005403612310213906	IMPLEMENTATION	6.518963495038464E-4	TEST	9.199202306241462E-5	DOCUMENTATION
// FIXME hack to work around fact that calling // Node added = root.addChild( fqn ); doesn't  // properly set the version on the node	DESIGN	0.7321520273630316	DESIGN	0.17687758669719914	DEFECT	0.08937078672731706	WITHOUT_CLASSIFICATION	0.0015702238163358615	IMPLEMENTATION	1.783539237696161E-5	TEST	1.154000373952388E-5	DOCUMENTATION
// TODO: I considered validating the presence of the TS cache here, // but decided to defer unti getQueryCacheInstance() in case the  // cache is never actually used	DESIGN	0.9056960910920573	WITHOUT_CLASSIFICATION	0.07600318586296913	IMPLEMENTATION	0.009188756446370802	DESIGN	0.00906729134808689	DEFECT	4.3689268452961766E-5	DOCUMENTATION	9.85982062837646E-7	TEST
//need to do that here rather than in the save event listener to let //the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.8229455702005021	WITHOUT_CLASSIFICATION	0.1702041651697588	DESIGN	0.005411460787754153	IMPLEMENTATION	7.160676929855347E-4	DEFECT	6.612035016272396E-4	TEST	6.153264737215352E-5	DOCUMENTATION
//TODO: simply remove this override //      if we fix the above todos	DESIGN	0.9985706009902154	WITHOUT_CLASSIFICATION	0.0010832427830655027	DESIGN	2.1712499737313055E-4	DEFECT	9.138880588082588E-5	TEST	3.585109996080473E-5	IMPLEMENTATION	1.7913235043467952E-6	DOCUMENTATION
// This, is used by SessionFactoryImpl to hand to the generated SessionImpl; // was the only reason I could see that we cannot just use null as // Settings.cacheProvider	DESIGN	0.9999028194479879	WITHOUT_CLASSIFICATION	9.710267048439166E-5	DESIGN	3.969277822560182E-8	DEFECT	3.5120948177151585E-8	TEST	1.7499075582247801E-9	DOCUMENTATION	1.31789392252246E-9	IMPLEMENTATION
// this is done here 'cos we might only know the type here (ugly!) // TODO: improve this a lot:	DESIGN	0.9987640899830919	DESIGN	0.0010037180142801856	IMPLEMENTATION	1.5887317139874683E-4	DEFECT	4.606419140217305E-5	TEST	2.1863266272396395E-5	WITHOUT_CLASSIFICATION	5.391373554547048E-6	DOCUMENTATION
// todo : would love to have this work on a notification basis //    where the successful binding of an entity/subclass would //    emit a notification which the extendsQueue entries could //    react to...	DESIGN	0.9170254846854294	WITHOUT_CLASSIFICATION	0.06980525011313908	DESIGN	0.012901802676340064	DEFECT	2.5812058505966307E-4	TEST	5.2958792130965705E-6	DOCUMENTATION	4.046060818718648E-6	IMPLEMENTATION
// TODO : not sure the best way to handle this. // The non-performant way :	DESIGN	0.6120846534430405	DESIGN	0.3392681738300068	IMPLEMENTATION	0.025230395675089928	DEFECT	0.019081668285258608	TEST	0.003754484848739208	DOCUMENTATION	5.806239178648889E-4	WITHOUT_CLASSIFICATION
// would be better to use the element-type to determine // whether the old and the new are equal here; the problem being // we do not necessarily have access to the element type in all // cases	DESIGN	0.9998081227944365	WITHOUT_CLASSIFICATION	1.7189188102211146E-4	DESIGN	1.5131342067009998E-5	IMPLEMENTATION	4.542593176420366E-6	DEFECT	3.032102050063759E-7	DOCUMENTATION	8.179092839972381E-9	TEST
// This next bit is to allow for both unsaved-value="negative" // and for "older" behavior where version number did not get // seeded if it was already set in the object // TODO: shift it into unsaved-value strategy	DESIGN	0.9962966749978813	DESIGN	0.0035211446560148955	DEFECT	1.8165320205826E-4	WITHOUT_CLASSIFICATION	2.7019537318373105E-7	TEST	2.3158167680691316E-7	IMPLEMENTATION	2.5366995582783357E-8	DOCUMENTATION
// merges don't cascade to uninitialized collections //	DESIGN	0.9999983256285838	WITHOUT_CLASSIFICATION	8.844947504539089E-7	IMPLEMENTATION	6.095746843665726E-7	DESIGN	1.3258133109954612E-7	TEST	2.900974351179601E-8	DEFECT	1.871090672253328E-8	DOCUMENTATION
// TODO: an alternative is to check if the owner has changed; if it hasn't then // return collection.getOwner()	DESIGN	0.6077911472756305	WITHOUT_CLASSIFICATION	0.37530519539113033	IMPLEMENTATION	0.013686764579263709	DESIGN	0.0023017898764963133	DEFECT	8.937656174118352E-4	TEST	2.1337260067233474E-5	DOCUMENTATION
//it is possible that the tree-walking in OuterJoinLoader can get to //an association defined by a subclass, in which case the property-ref //might refer to a property defined on a subclass of the current class //in this case, the table name is not known - this temporary solution  //assumes that the property-ref refers to a property of the subclass //table that the association belongs to (a reasonable guess) //TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.8525735465350557	DESIGN	0.1473352035262405	DEFECT	3.991080022828854E-5	DOCUMENTATION	2.423233496087511E-5	IMPLEMENTATION	1.748537490829826E-5	TEST	9.621428606381985E-6	WITHOUT_CLASSIFICATION
// this only works because collection entries are kept in a sequenced // map by persistence context (maybe we should do like entities and // keep a separate sequences set...) //TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.9999971743539882	DESIGN	9.653027106425407E-7	IMPLEMENTATION	7.542300627113901E-7	WITHOUT_CLASSIFICATION	7.440110205472273E-7	DEFECT	2.800887727492851E-7	TEST	8.201344534160702E-8	DOCUMENTATION
// important, to account for newly saved entities in query // todo : some kind of check for new status...	DESIGN	0.8678735530932596	WITHOUT_CLASSIFICATION	0.10593358223658993	IMPLEMENTATION	0.015129464944446907	DEFECT	0.010466904332255217	DESIGN	3.723769048869046E-4	TEST	2.2411848856131587E-4	DOCUMENTATION
// brand new collection //TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.9264188991549984	WITHOUT_CLASSIFICATION	0.03288446085656379	DEFECT	0.02680244487205023	IMPLEMENTATION	0.01333881953979515	DESIGN	3.6852303252884485E-4	TEST	1.868525440636093E-4	DOCUMENTATION
//TODO: if object was an uninitialized proxy, this is inefficient, //      resulting in two SQL selects	DESIGN	0.9991717319089367	WITHOUT_CLASSIFICATION	8.148923917613741E-4	DESIGN	7.95201706177105E-6	TEST	3.852221148979946E-6	DEFECT	1.4189340875787376E-6	DOCUMENTATION	1.5252700348597254E-7	IMPLEMENTATION
//before cascade! //TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9573843858176104	DESIGN	0.04170052325766881	WITHOUT_CLASSIFICATION	5.957461836064065E-4	DEFECT	2.559244801446338E-4	IMPLEMENTATION	5.066931219501181E-5	TEST	1.2750948774704741E-5	DOCUMENTATION
// TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.8081410908990188	DESIGN	0.18544139421956335	IMPLEMENTATION	0.004421038845262048	TEST	0.001842473325503761	WITHOUT_CLASSIFICATION	1.3417450433015233E-4	DOCUMENTATION	1.982820632200377E-5	DEFECT
// todo : need to find a clean way to handle the "event source" role // a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... // passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.9811129671528254	DESIGN	0.018885081879509682	WITHOUT_CLASSIFICATION	1.8143962150022771E-6	TEST	5.680783699364349E-8	DOCUMENTATION	4.482023340865218E-8	DEFECT	3.4943379613150503E-8	IMPLEMENTATION
// todo : remove	DESIGN	0.9877496789739356	WITHOUT_CLASSIFICATION	0.011995314769570973	DESIGN	1.7371330050624847E-4	IMPLEMENTATION	3.902982738714179E-5	DEFECT	2.925508510988963E-5	TEST	1.300804349006205E-5	DOCUMENTATION
//aliasRefNode.resolve( false, false, aliasRefNode.getText() ); //TODO: is it kosher to do it here? //TODO: is it kosher to do it here?	DESIGN	0.8188391043167607	IMPLEMENTATION	0.14391917897631384	DESIGN	0.03518040999093918	WITHOUT_CLASSIFICATION	0.0019012041856700682	TEST	1.5192655317280399E-4	DEFECT	8.175977143436437E-6	DOCUMENTATION
// No explicit select expression; render the id and properties // projection lists for every persister in the from clause into // a single 'token node'. //TODO: the only reason we need this stuff now is collection filters, //      we should get rid of derived select clause completely!	DESIGN	0.9986622655738739	DESIGN	8.835042848972137E-4	WITHOUT_CLASSIFICATION	4.46392561458112E-4	DEFECT	7.435780386790517E-6	TEST	3.9964708868626263E-7	DOCUMENTATION	2.152295187415327E-9	IMPLEMENTATION
// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; //      the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> //          the table info gotten here should really be self-contained (i.e., a class representation //          defining all the needed attributes), then we could then get an array of those	DESIGN	0.8180615440083616	DESIGN	0.13907665206213288	WITHOUT_CLASSIFICATION	0.042588138780816784	IMPLEMENTATION	2.1095685467890647E-4	DEFECT	3.158488115465648E-5	DOCUMENTATION	3.1123412855260565E-5	TEST
// TODO: get SQL rendering out of here, create an AST for the join expressions. // Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9227875502563883	WITHOUT_CLASSIFICATION	0.06729615924931413	DESIGN	0.00891283293195609	IMPLEMENTATION	9.035673832595577E-4	TEST	8.283876483607876E-5	DEFECT	1.7051414245821317E-5	DOCUMENTATION
// TODO : this really needs to be delayed unitl after we definitively know all node types // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DESIGN	0.9985243272228582	DESIGN	7.520587375164212E-4	IMPLEMENTATION	6.323116232973861E-4	DEFECT	7.437367752479973E-5	DOCUMENTATION	1.149845484971689E-5	TEST	5.430283953478104E-6	WITHOUT_CLASSIFICATION
// TODO: Figure out a better way to get the FROM elements in a proper tree structure. // If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.5963794758035699	WITHOUT_CLASSIFICATION	0.3950258860445325	DEFECT	0.0056193250666203695	DESIGN	0.0026664624276802494	IMPLEMENTATION	2.512557056302446E-4	TEST	5.759495196672901E-5	DOCUMENTATION
// work around that crazy issue where the tree contains // "empty" FromElements (no text); afaict, this is caused // by FromElementFactory.createCollectionJoin()	DESIGN	0.9510675100640865	WITHOUT_CLASSIFICATION	0.037141148586526194	DESIGN	0.007095136703543998	DEFECT	0.0035086132116515026	IMPLEMENTATION	0.0010499192076582878	TEST	1.3767222653349274E-4	DOCUMENTATION
//TODO: this class does too many things! we need a different //kind of path expression parser for each of the diffferent //ways in which path expressions can occur	DESIGN	0.8767216068635086	DESIGN	0.10087908479026639	WITHOUT_CLASSIFICATION	0.02054931788974521	DEFECT	0.001810095257447148	DOCUMENTATION	3.2486070015676213E-5	TEST	7.4091290169088275E-6	IMPLEMENTATION
//real hacky... // used to count the nesting of parentheses	DESIGN	0.9335059535668417	DESIGN	0.06458753159668369	WITHOUT_CLASSIFICATION	0.0012562828351083749	IMPLEMENTATION	2.4654247015284156E-4	TEST	2.403140361242138E-4	DEFECT	1.6337549508920339E-4	DOCUMENTATION
// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; // currently not doable though because of the resultset-ref stuff...	DESIGN	0.8264115035618335	WITHOUT_CLASSIFICATION	0.15169910997435526	DESIGN	0.0145386423379935	IMPLEMENTATION	0.0060360927967300065	DEFECT	0.0010960184067894427	DOCUMENTATION	2.1863292229822923E-4	TEST
//for arrays, we should end the collection load before resolving //the entities, since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.8099291677833029	IMPLEMENTATION	0.1453149895473062	WITHOUT_CLASSIFICATION	0.03165579368664747	DEFECT	0.013038241001243456	DESIGN	4.9938001482104196E-5	DOCUMENTATION	1.1869980017872734E-5	TEST
// polymorphism not really handled completely correctly, // perhaps...well, actually its ok, assuming that the // entity name used in the lookup is the same as the // the one used here, which it will be	DESIGN	0.9944195233259263	WITHOUT_CLASSIFICATION	0.0028182624065985497	DEFECT	0.0027588433773210763	DESIGN	1.970579555542255E-6	TEST	9.581882194492188E-7	IMPLEMENTATION	4.421223791242143E-7	DOCUMENTATION
// TODO: should "record" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9858249941933154	DEFECT	0.014142530794152272	DESIGN	2.222687296298498E-5	WITHOUT_CLASSIFICATION	7.629817338479193E-6	IMPLEMENTATION	2.0407283801637093E-6	TEST	5.775938508192955E-7	DOCUMENTATION
// VERY IMPORTANT!!!! - This class needs to be free of any static references // to any CGLIB or Javassist classes.  Otherwise, users will always need both // on their classpaths no matter which (if either) they use. // // Another option here would be to remove the Hibernate.isPropertyInitialized() // method and have the users go through the SessionFactory to get this information.	DESIGN	0.9953306420539716	WITHOUT_CLASSIFICATION	0.004548639364900148	DESIGN	1.0396531935293547E-4	DEFECT	7.219291577533522E-6	DOCUMENTATION	7.096623147760467E-6	IMPLEMENTATION	2.437347050053936E-6	TEST
// TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).	DESIGN	0.999800944301806	DESIGN	1.010884249209904E-4	WITHOUT_CLASSIFICATION	4.7681508116676115E-5	DEFECT	3.557077602608727E-5	IMPLEMENTATION	1.3593223068027207E-5	TEST	1.121766062137765E-6	DOCUMENTATION
//for backward compatibility, allow a set with no not-null  //element columns, using all columns in the row locater SQL //TODO: create an implicit not null constraint on all cols?	DESIGN	0.7997062925268527	WITHOUT_CLASSIFICATION	0.07298648892723131	DESIGN	0.0693324155239576	DEFECT	0.056292678484484375	IMPLEMENTATION	0.0015589051692963328	TEST	1.2321936817784426E-4	DOCUMENTATION
//SPACES //TODO: i'm not sure, but perhaps we should exclude //      abstract denormalized tables?	DESIGN	0.8382921889730527	WITHOUT_CLASSIFICATION	0.13639865741759508	DESIGN	0.020214663194270826	DEFECT	0.003826641762620029	IMPLEMENTATION	8.482449098275602E-4	TEST	4.196037426337476E-4	DOCUMENTATION
//workaround, for backward compatibility of sets with no //not-null columns, assume all columns are used in the //row locator SQL	DESIGN	0.9993268908309737	WITHOUT_CLASSIFICATION	4.132808145867321E-4	DEFECT	2.5896397171550913E-4	DESIGN	4.433285422131605E-7	TEST	3.285456532790907E-7	DOCUMENTATION	9.250852859279983E-8	IMPLEMENTATION
//note that this method could easily be moved up to BasicEntityPersister, //if we ever needed to reuse it from other subclasses	DESIGN	0.9486826656415013	DESIGN	0.051204594585649146	WITHOUT_CLASSIFICATION	6.564333276320905E-5	TEST	4.590463479559892E-5	IMPLEMENTATION	8.794105047377778E-7	DOCUMENTATION	3.1239478621141953E-7	DEFECT
//index += getPropertyColumnSpan( i ); //TODO:  this is kinda slow...	DESIGN	0.8949315352351563	DEFECT	0.10147014088931493	DESIGN	0.002907673860222784	WITHOUT_CLASSIFICATION	3.521211954761773E-4	TEST	2.411636335798225E-4	IMPLEMENTATION	9.736518624989165E-5	DOCUMENTATION
//TODO: need some caching scheme? really comes down to decision  //      regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.7619770213197186	DESIGN	0.19698491672225166	DEFECT	0.03611932534103977	WITHOUT_CLASSIFICATION	0.0031082983388700546	IMPLEMENTATION	0.00126976968191758	TEST	5.406685962023758E-4	DOCUMENTATION
// TODO: here is why we need to make bytecode provider global :( // TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9914285678436086	DESIGN	0.008236434784730781	IMPLEMENTATION	3.164206142443929E-4	TEST	9.990898647342915E-6	DEFECT	8.573894858362446E-6	DOCUMENTATION	1.1963910572968188E-8	WITHOUT_CLASSIFICATION
//TODO: Yuck! This is not quite good enough, it's a quick //hack around the problem of having a to-one association //that refers to an embedded component:	DESIGN	0.5471686591883598	DESIGN	0.45240113268012705	DEFECT	3.2510665514635115E-4	IMPLEMENTATION	6.641184367139586E-5	WITHOUT_CLASSIFICATION	3.3851198725883255E-5	TEST	4.838433969481298E-6	DOCUMENTATION
// for DOM4J "collections" only // TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.9954598222588947	DESIGN	0.00217265165037002	WITHOUT_CLASSIFICATION	0.0012676926753405755	TEST	8.516956246435834E-4	IMPLEMENTATION	2.346734195609329E-4	DEFECT	1.346437119005309E-5	DOCUMENTATION
// would be great to move all this below here into another method that could also be used // from the new scrolling stuff. // // Would need to change the way the max-row stuff is handled (i.e. behind an interface) so // that I could do the control breaking at the means to know when to stop	DESIGN	0.999931346423591	DESIGN	6.802978645242599E-5	WITHOUT_CLASSIFICATION	6.082378700341523E-7	TEST	6.915185358305579E-9	DOCUMENTATION	6.016348206295481E-9	IMPLEMENTATION	2.6205528106621443E-9	DEFECT
//TODO: can we *always* use the "null property" approach for everything?	DESIGN	0.8066447627420116	DESIGN	0.17129308906178647	WITHOUT_CLASSIFICATION	0.018000217249143666	IMPLEMENTATION	0.003935581049392048	DEFECT	1.196960712502797E-4	DOCUMENTATION	6.653826416066173E-6	TEST
//polymorphism comment above	DESIGN	0.9999903817512928	WITHOUT_CLASSIFICATION	5.1929622420376965E-6	DESIGN	1.484596155407922E-6	IMPLEMENTATION	1.4746807306287992E-6	TEST	9.95185366759945E-7	DOCUMENTATION	4.7082421235143133E-7	DEFECT
// some messy, complex stuff here, since createCriteria() can take an // aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999861216132149	WITHOUT_CLASSIFICATION	6.106445791983205E-6	IMPLEMENTATION	5.47910479338134E-6	DESIGN	2.0711124627559905E-6	TEST	1.9340662499924383E-7	DEFECT	2.831711203678669E-8	DOCUMENTATION
//TODO: really bad, evil hack to fix!!!	DESIGN	0.981320698086581	DESIGN	0.013053729821173643	DEFECT	0.004500110315380337	IMPLEMENTATION	0.0010061411487122507	WITHOUT_CLASSIFICATION	1.1092394622318274E-4	DOCUMENTATION	8.396681929746277E-6	TEST
// ugly hack for cases like "elements(foo.bar.collection)" // (multi-part path expression ending in elements or indices)	DESIGN	0.9675675989050919	DESIGN	0.03215882366727709	WITHOUT_CLASSIFICATION	2.7007956626866065E-4	DEFECT	2.2163010238242544E-6	TEST	8.254057627703375E-7	DOCUMENTATION	4.5615457566725814E-7	IMPLEMENTATION
// try block is a hack around fact that currently tuplizers are not // given the opportunity to resolve a subclass entity name.  this // allows the (we assume custom) interceptor the ability to // influence this decision if we were not able to based on the // given entityName	DESIGN	0.9999044322001881	DESIGN	9.549905157847409E-5	WITHOUT_CLASSIFICATION	4.064078940217551E-8	DOCUMENTATION	2.6961877912414296E-8	TEST	9.062316902565055E-10	DEFECT	2.3933424166273256E-10	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around "ghost" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially, look-ahead to the next FromElement that actually // writes something to the SQL	DESIGN	0.9913369103938288	DESIGN	0.008624404744356039	WITHOUT_CLASSIFICATION	2.1507092223311903E-5	TEST	1.6498768036704697E-5	DEFECT	6.497403699344108E-7	DOCUMENTATION	2.9261185439313184E-8	IMPLEMENTATION
//init the table here instead of earlier, so that we can get a quoted table name //TODO: would it be better to simply pass the qualified table name, instead of //      splitting it up into schema/catalog/table names	DESIGN	0.5018290961143883	DESIGN	0.4964243449548943	WITHOUT_CLASSIFICATION	0.0016934411226772255	IMPLEMENTATION	5.156069428922349E-5	TEST	8.812192228235962E-7	DOCUMENTATION	6.758945280135313E-7	DEFECT
// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method // I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so // if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.9972397912382834	DESIGN	0.0013951982253484047	WITHOUT_CLASSIFICATION	0.001307399101591496	IMPLEMENTATION	4.7322422528900484E-5	DEFECT	9.994174158985987E-6	TEST	2.9483808882002886E-7	DOCUMENTATION
//TODO: is this really necessary????	DESIGN	0.7885397970832603	WITHOUT_CLASSIFICATION	0.20683005161286389	DESIGN	0.0022790363583289047	IMPLEMENTATION	0.0017933557376845868	DEFECT	3.2760152299413835E-4	DOCUMENTATION	2.3015768486808494E-4	TEST
//TODO: ideally we need the construction of PropertyAccessor to take the following: //      1) EntityMode //      2) EntityMode-specific data (i.e., the classname for pojo entities) //      3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) // The easiest way, with the introduction of the new runtime-metamodel classes, would be the // the following predicates: //      1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a //          org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property //      2) What is now termed a "PropertyAccessor" stores any values needed from those two //          pieces of information //      3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with //          PropertyAccessor.getSetter()	DESIGN	0.8927628186670065	DESIGN	0.05657906405138987	IMPLEMENTATION	0.047887838221086804	WITHOUT_CLASSIFICATION	0.002033064476196558	DEFECT	6.309114996142171E-4	DOCUMENTATION	1.0630308470616167E-4	TEST
//TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9976823650940999	DESIGN	0.0013049743858149301	DEFECT	0.0010078106076140646	WITHOUT_CLASSIFICATION	3.0158321272846113E-6	IMPLEMENTATION	9.18105731870245E-7	TEST	9.159746117005803E-7	DOCUMENTATION
// todo : this eventually needs to be removed	DESIGN	0.8844012182336266	WITHOUT_CLASSIFICATION	0.08272538078923806	DESIGN	0.030519462334346138	IMPLEMENTATION	0.00204152068510234	DEFECT	1.588710819657719E-4	TEST	1.5354687572119444E-4	DOCUMENTATION
//TODO: make this a bit nicer	DESIGN	0.6755857196610994	WITHOUT_CLASSIFICATION	0.3019333020657589	DESIGN	0.011014113591237187	TEST	0.010041382223013401	IMPLEMENTATION	8.286100225880628E-4	DEFECT	5.968724363029945E-4	DOCUMENTATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8241836926628143	WITHOUT_CLASSIFICATION	0.17550184484957396	DESIGN	2.55511212464439E-4	IMPLEMENTATION	4.1645065956078684E-5	TEST	1.5841810992618634E-5	DOCUMENTATION	1.4643981985200506E-6	DEFECT
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8241836926628143	WITHOUT_CLASSIFICATION	0.17550184484957396	DESIGN	2.55511212464439E-4	IMPLEMENTATION	4.1645065956078684E-5	TEST	1.5841810992618634E-5	DOCUMENTATION	1.4643981985200506E-6	DEFECT
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8241836926628143	WITHOUT_CLASSIFICATION	0.17550184484957396	DESIGN	2.55511212464439E-4	IMPLEMENTATION	4.1645065956078684E-5	TEST	1.5841810992618634E-5	DOCUMENTATION	1.4643981985200506E-6	DEFECT
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8241836926628143	WITHOUT_CLASSIFICATION	0.17550184484957396	DESIGN	2.55511212464439E-4	IMPLEMENTATION	4.1645065956078684E-5	TEST	1.5841810992618634E-5	DOCUMENTATION	1.4643981985200506E-6	DEFECT
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8241836926628143	WITHOUT_CLASSIFICATION	0.17550184484957396	DESIGN	2.55511212464439E-4	IMPLEMENTATION	4.1645065956078684E-5	TEST	1.5841810992618634E-5	DOCUMENTATION	1.4643981985200506E-6	DEFECT
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8241836926628143	WITHOUT_CLASSIFICATION	0.17550184484957396	DESIGN	2.55511212464439E-4	IMPLEMENTATION	4.1645065956078684E-5	TEST	1.5841810992618634E-5	DOCUMENTATION	1.4643981985200506E-6	DEFECT
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8241836926628143	WITHOUT_CLASSIFICATION	0.17550184484957396	DESIGN	2.55511212464439E-4	IMPLEMENTATION	4.1645065956078684E-5	TEST	1.5841810992618634E-5	DOCUMENTATION	1.4643981985200506E-6	DEFECT
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8241836926628143	WITHOUT_CLASSIFICATION	0.17550184484957396	DESIGN	2.55511212464439E-4	IMPLEMENTATION	4.1645065956078684E-5	TEST	1.5841810992618634E-5	DOCUMENTATION	1.4643981985200506E-6	DEFECT
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.990341240348871	DESIGN	0.009584312433792796	WITHOUT_CLASSIFICATION	5.307544381413691E-5	DOCUMENTATION	1.0638646805702011E-5	TEST	6.700401550628062E-6	IMPLEMENTATION	4.032725165473051E-6	DEFECT
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.990341240348871	DESIGN	0.009584312433792796	WITHOUT_CLASSIFICATION	5.307544381413691E-5	DOCUMENTATION	1.0638646805702011E-5	TEST	6.700401550628062E-6	IMPLEMENTATION	4.032725165473051E-6	DEFECT
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.990341240348871	DESIGN	0.009584312433792796	WITHOUT_CLASSIFICATION	5.307544381413691E-5	DOCUMENTATION	1.0638646805702011E-5	TEST	6.700401550628062E-6	IMPLEMENTATION	4.032725165473051E-6	DEFECT
// TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9960934190229997	DESIGN	0.0038170373117172923	IMPLEMENTATION	6.297681772316086E-5	DEFECT	2.040770643604317E-5	WITHOUT_CLASSIFICATION	6.035050193034546E-6	DOCUMENTATION	1.2409093067295866E-7	TEST
