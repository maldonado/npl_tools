// set constants now that they're initialized	WITHOUT_CLASSIFICATION	0.9999938134961581	WITHOUT_CLASSIFICATION	6.186503841915637E-6	DEFECT
// line 335	WITHOUT_CLASSIFICATION	0.999993447173197	WITHOUT_CLASSIFICATION	6.5528268029689775E-6	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999575392681723	WITHOUT_CLASSIFICATION	4.246073182774047E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999575392681723	WITHOUT_CLASSIFICATION	4.246073182774047E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999294764826551	WITHOUT_CLASSIFICATION	7.052351734500539E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999294764826551	WITHOUT_CLASSIFICATION	7.052351734500539E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999545219565106	WITHOUT_CLASSIFICATION	4.5478043489457065E-5	DEFECT
// Figure end-char.  '\0' is special to indicate begin=end and that no nesting?	WITHOUT_CLASSIFICATION	0.9999994448025108	WITHOUT_CLASSIFICATION	5.551974891401087E-7	DEFECT
// line 362	WITHOUT_CLASSIFICATION	0.9999935246073353	WITHOUT_CLASSIFICATION	6.4753926646508046E-6	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.999993829486999	WITHOUT_CLASSIFICATION	6.1705130008999015E-6	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999139010969954	WITHOUT_CLASSIFICATION	8.609890300468157E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999139010969954	WITHOUT_CLASSIFICATION	8.609890300468157E-5	DEFECT
// line 391	WITHOUT_CLASSIFICATION	0.9999941285544338	WITHOUT_CLASSIFICATION	5.871445566168483E-6	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999349591810075	WITHOUT_CLASSIFICATION	6.504081899248318E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999349591810075	WITHOUT_CLASSIFICATION	6.504081899248318E-5	DEFECT
/* ^D */	WITHOUT_CLASSIFICATION	0.9999760155871684	WITHOUT_CLASSIFICATION	2.3984412831632767E-5	DEFECT
/* ^Z */	WITHOUT_CLASSIFICATION	0.9999824009057565	WITHOUT_CLASSIFICATION	1.7599094243481615E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999490625897685	WITHOUT_CLASSIFICATION	5.093741023147941E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999490625897685	WITHOUT_CLASSIFICATION	5.093741023147941E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999490625897685	WITHOUT_CLASSIFICATION	5.093741023147941E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999490625897685	WITHOUT_CLASSIFICATION	5.093741023147941E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999490625897685	WITHOUT_CLASSIFICATION	5.093741023147941E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999490625897685	WITHOUT_CLASSIFICATION	5.093741023147941E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999490625897685	WITHOUT_CLASSIFICATION	5.093741023147941E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999492786512384	WITHOUT_CLASSIFICATION	5.072134876154573E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999492786512384	WITHOUT_CLASSIFICATION	5.072134876154573E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999492786512384	WITHOUT_CLASSIFICATION	5.072134876154573E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999492786512384	WITHOUT_CLASSIFICATION	5.072134876154573E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999492786512384	WITHOUT_CLASSIFICATION	5.072134876154573E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999492786512384	WITHOUT_CLASSIFICATION	5.072134876154573E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999492786512384	WITHOUT_CLASSIFICATION	5.072134876154573E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999511363029604	WITHOUT_CLASSIFICATION	4.886369703954642E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999511363029604	WITHOUT_CLASSIFICATION	4.886369703954642E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999511363029604	WITHOUT_CLASSIFICATION	4.886369703954642E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999511363029604	WITHOUT_CLASSIFICATION	4.886369703954642E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999511363029604	WITHOUT_CLASSIFICATION	4.886369703954642E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999511363029604	WITHOUT_CLASSIFICATION	4.886369703954642E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999380688107493	WITHOUT_CLASSIFICATION	6.193118925070026E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999380688107493	WITHOUT_CLASSIFICATION	6.193118925070026E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999380688107493	WITHOUT_CLASSIFICATION	6.193118925070026E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999380688107493	WITHOUT_CLASSIFICATION	6.193118925070026E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999380688107493	WITHOUT_CLASSIFICATION	6.193118925070026E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999380688107493	WITHOUT_CLASSIFICATION	6.193118925070026E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999532162278734	WITHOUT_CLASSIFICATION	4.6783772126674964E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999532162278734	WITHOUT_CLASSIFICATION	4.6783772126674964E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999532162278734	WITHOUT_CLASSIFICATION	4.6783772126674964E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999532162278734	WITHOUT_CLASSIFICATION	4.6783772126674964E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999532162278734	WITHOUT_CLASSIFICATION	4.6783772126674964E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999532162278734	WITHOUT_CLASSIFICATION	4.6783772126674964E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999532162278734	WITHOUT_CLASSIFICATION	4.6783772126674964E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999309453761458	WITHOUT_CLASSIFICATION	6.905462385414291E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999309453761458	WITHOUT_CLASSIFICATION	6.905462385414291E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999309453761458	WITHOUT_CLASSIFICATION	6.905462385414291E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999309453761458	WITHOUT_CLASSIFICATION	6.905462385414291E-5	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999460376093148	WITHOUT_CLASSIFICATION	5.3962390685155155E-5	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999460376093148	WITHOUT_CLASSIFICATION	5.3962390685155155E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114707	WITHOUT_CLASSIFICATION	2.359588529392597E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114707	WITHOUT_CLASSIFICATION	2.359588529392597E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114707	WITHOUT_CLASSIFICATION	2.359588529392597E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114707	WITHOUT_CLASSIFICATION	2.359588529392597E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114707	WITHOUT_CLASSIFICATION	2.359588529392597E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114707	WITHOUT_CLASSIFICATION	2.359588529392597E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114707	WITHOUT_CLASSIFICATION	2.359588529392597E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114707	WITHOUT_CLASSIFICATION	2.359588529392597E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114707	WITHOUT_CLASSIFICATION	2.359588529392597E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114707	WITHOUT_CLASSIFICATION	2.359588529392597E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114707	WITHOUT_CLASSIFICATION	2.359588529392597E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114707	WITHOUT_CLASSIFICATION	2.359588529392597E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114707	WITHOUT_CLASSIFICATION	2.359588529392597E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114707	WITHOUT_CLASSIFICATION	2.359588529392597E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114707	WITHOUT_CLASSIFICATION	2.359588529392597E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114707	WITHOUT_CLASSIFICATION	2.359588529392597E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114707	WITHOUT_CLASSIFICATION	2.359588529392597E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114707	WITHOUT_CLASSIFICATION	2.359588529392597E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114707	WITHOUT_CLASSIFICATION	2.359588529392597E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114707	WITHOUT_CLASSIFICATION	2.359588529392597E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114707	WITHOUT_CLASSIFICATION	2.359588529392597E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114707	WITHOUT_CLASSIFICATION	2.359588529392597E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114707	WITHOUT_CLASSIFICATION	2.359588529392597E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114707	WITHOUT_CLASSIFICATION	2.359588529392597E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114707	WITHOUT_CLASSIFICATION	2.359588529392597E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114707	WITHOUT_CLASSIFICATION	2.359588529392597E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114707	WITHOUT_CLASSIFICATION	2.359588529392597E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114707	WITHOUT_CLASSIFICATION	2.359588529392597E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114707	WITHOUT_CLASSIFICATION	2.359588529392597E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114707	WITHOUT_CLASSIFICATION	2.359588529392597E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114707	WITHOUT_CLASSIFICATION	2.359588529392597E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114707	WITHOUT_CLASSIFICATION	2.359588529392597E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114707	WITHOUT_CLASSIFICATION	2.359588529392597E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114707	WITHOUT_CLASSIFICATION	2.359588529392597E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114707	WITHOUT_CLASSIFICATION	2.359588529392597E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999976404114707	WITHOUT_CLASSIFICATION	2.359588529392597E-6	DEFECT
// return result	WITHOUT_CLASSIFICATION	0.9999904091972526	WITHOUT_CLASSIFICATION	9.590802747497172E-6	DEFECT
// name	WITHOUT_CLASSIFICATION	0.9999941062972986	WITHOUT_CLASSIFICATION	5.893702701450838E-6	DEFECT
// Define System.getProperties() in ENV_JAVA	WITHOUT_CLASSIFICATION	0.9999953389728314	WITHOUT_CLASSIFICATION	4.661027168523172E-6	DEFECT
// Accessor methods.	WITHOUT_CLASSIFICATION	0.9999979016176253	WITHOUT_CLASSIFICATION	2.0983823747041824E-6	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999961063061862	WITHOUT_CLASSIFICATION	3.893693813805189E-6	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999961063061862	WITHOUT_CLASSIFICATION	3.893693813805189E-6	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999961063061862	WITHOUT_CLASSIFICATION	3.893693813805189E-6	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999961063061862	WITHOUT_CLASSIFICATION	3.893693813805189E-6	DEFECT
// call getpwent to fail early if unsupported	WITHOUT_CLASSIFICATION	0.9999998655648107	WITHOUT_CLASSIFICATION	1.3443518934188182E-7	DEFECT
// fall back on env entry for USER	WITHOUT_CLASSIFICATION	0.9999964179609359	WITHOUT_CLASSIFICATION	3.582039064238681E-6	DEFECT
// try to read grent to fail fast	WITHOUT_CLASSIFICATION	0.9999988984212036	WITHOUT_CLASSIFICATION	1.1015787963837704E-6	DEFECT
// define ARGV and $* for this runtime	WITHOUT_CLASSIFICATION	0.9999982548747836	WITHOUT_CLASSIFICATION	1.7451252164613444E-6	DEFECT
// Version information:	WITHOUT_CLASSIFICATION	0.9999547972988145	WITHOUT_CLASSIFICATION	4.520270118548938E-5	DEFECT
// after defn of $stderr as the call may produce warnings	WITHOUT_CLASSIFICATION	0.9999997459352095	WITHOUT_CLASSIFICATION	2.5406479048145585E-7	DEFECT
// ARGF, $< object	WITHOUT_CLASSIFICATION	0.9999964173654963	WITHOUT_CLASSIFICATION	3.5826345036919604E-6	DEFECT
// if the environment variables can't be obtained, define an empty ENV	WITHOUT_CLASSIFICATION	0.9999903316387184	WITHOUT_CLASSIFICATION	9.668361281596991E-6	DEFECT
// On platforms without a c-library accessable through JNA, getpid will return hashCode  // as $$ used to. Using $$ to kill processes could take down many runtimes, but by basing // $$ on getpid() where available, we have the same semantics as MRI.	WITHOUT_CLASSIFICATION	0.9999918622588659	WITHOUT_CLASSIFICATION	8.137741134009449E-6	DEFECT
//$@ returns nil if $!.backtrace is not an array	WITHOUT_CLASSIFICATION	0.9998811639940446	WITHOUT_CLASSIFICATION	1.1883600595539866E-4	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.999997624141782	WITHOUT_CLASSIFICATION	2.3758582181672156E-6	DEFECT
// MRI behavior: just plain '//' or '\\\\' are considered illegal on Windows.	WITHOUT_CLASSIFICATION	0.9999976892081665	WITHOUT_CLASSIFICATION	2.3107918334838878E-6	DEFECT
// this _is_ legal (when removing an undef)	WITHOUT_CLASSIFICATION	0.9999979941772531	WITHOUT_CLASSIFICATION	2.0058227468828316E-6	DEFECT
// What we passed to the constructor for method 'path'	WITHOUT_CLASSIFICATION	0.9999983355696238	WITHOUT_CLASSIFICATION	1.6644303760956552E-6	DEFECT
// ----- Ruby Class Methods ----------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999992425979074	WITHOUT_CLASSIFICATION	7.574020926768556E-7	DEFECT
// // CONSTANT TABLE METHODS - pass to delegate //	WITHOUT_CLASSIFICATION	0.9999987138102973	WITHOUT_CLASSIFICATION	1.2861897027456213E-6	DEFECT
// We get canonical path to try and flatten the path out. // a dir '/subdir/..' should return as '/' // cnutter: Do we want to flatten path out?	WITHOUT_CLASSIFICATION	0.9999994594654774	WITHOUT_CLASSIFICATION	5.40534522589694E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999961063061862	WITHOUT_CLASSIFICATION	3.893693813805189E-6	DEFECT
// ----- Ruby Instance Methods -------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999992766035256	WITHOUT_CLASSIFICATION	7.233964742926959E-7	DEFECT
// Make sure any read()s after close fail.	WITHOUT_CLASSIFICATION	0.9999981241445527	WITHOUT_CLASSIFICATION	1.875855447368621E-6	DEFECT
// ----- Helper Methods --------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999998705081413	WITHOUT_CLASSIFICATION	1.2949185869781902E-6	DEFECT
// try to use POSIX for this first	WITHOUT_CLASSIFICATION	0.9999760122691984	WITHOUT_CLASSIFICATION	2.3987730801571686E-5	DEFECT
// otherwise fall back on the old way	WITHOUT_CLASSIFICATION	0.9999960488736015	WITHOUT_CLASSIFICATION	3.951126398521602E-6	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999985272393757	WITHOUT_CLASSIFICATION	1.4727606243598425E-6	DEFECT
// No passed in block, lets check next outer frame for one ('Proc.new')	WITHOUT_CLASSIFICATION	0.9999995280698155	WITHOUT_CLASSIFICATION	4.7193018436421527E-7	DEFECT
// modify the block with a new backref/lastline-grabbing scope	WITHOUT_CLASSIFICATION	0.9999998780440342	WITHOUT_CLASSIFICATION	1.2195596579644678E-7	DEFECT
// for future compatibility as constructors move toward not accepting metaclass?	WITHOUT_CLASSIFICATION	0.9999970268886129	WITHOUT_CLASSIFICATION	2.97311138707254E-6	DEFECT
//        case RUBY_HYBRID: //            backtrace = ThreadContext.createRubyHybridBacktrace(getRuntime(), backtraceFrames, javaStackTrace, getRuntime().getDebug().isTrue()); //            break;	WITHOUT_CLASSIFICATION	0.9999949459500622	WITHOUT_CLASSIFICATION	5.054049937703702E-6	DEFECT
// This looks wrong, but it's the way MRI does it.	WITHOUT_CLASSIFICATION	0.9999758113406013	WITHOUT_CLASSIFICATION	2.418865939868242E-5	DEFECT
// rb_exc_new3	WITHOUT_CLASSIFICATION	0.9999927134579141	WITHOUT_CLASSIFICATION	7.286542085877082E-6	DEFECT
// NOTE: The indicies here match exactly the signal values; do not reorder	WITHOUT_CLASSIFICATION	0.9999915006445227	WITHOUT_CLASSIFICATION	8.499355477361894E-6	DEFECT
//registerThreadDumpSignalHandler(runtime);	WITHOUT_CLASSIFICATION	0.9999896578928431	WITHOUT_CLASSIFICATION	1.0342107156932094E-5	DEFECT
// IOT is also 6	WITHOUT_CLASSIFICATION	0.9999479687619545	WITHOUT_CLASSIFICATION	5.2031238045615504E-5	DEFECT
// CLD is also 20	WITHOUT_CLASSIFICATION	0.9999901749296296	WITHOUT_CLASSIFICATION	9.82507037039482E-6	DEFECT
// RubySignal	WITHOUT_CLASSIFICATION	0.9999979664208214	WITHOUT_CLASSIFICATION	2.033579178624411E-6	DEFECT
// ZStream actually *isn't* allocatable	WITHOUT_CLASSIFICATION	0.9999981806599572	WITHOUT_CLASSIFICATION	1.8193400428669593E-6	DEFECT
// MRI behavior, enforced by tests	WITHOUT_CLASSIFICATION	0.9999995381630449	WITHOUT_CLASSIFICATION	4.61836955144484E-7	DEFECT
// it's safe since adler.update doesn't modify the array	WITHOUT_CLASSIFICATION	0.999996669969688	WITHOUT_CLASSIFICATION	3.3300303121410146E-6	DEFECT
// MRI behavior: in finished mode, we work as pass-through	WITHOUT_CLASSIFICATION	0.9999643848394583	WITHOUT_CLASSIFICATION	3.561516054163289E-5	DEFECT
// SYNC_FLUSH	WITHOUT_CLASSIFICATION	0.9999912545687235	WITHOUT_CLASSIFICATION	8.745431276425398E-6	DEFECT
// By default, NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999878338234909	WITHOUT_CLASSIFICATION	1.2166176509075058E-5	DEFECT
//io.finish();	WITHOUT_CLASSIFICATION	0.9999717016666037	WITHOUT_CLASSIFICATION	2.8298333396371826E-5	DEFECT
// should invoke seek on realIo	WITHOUT_CLASSIFICATION	0.9999944504177096	WITHOUT_CLASSIFICATION	5.549582290267444E-6	DEFECT
// hmm...	WITHOUT_CLASSIFICATION	0.9999888341719794	WITHOUT_CLASSIFICATION	1.1165828020607758E-5	DEFECT
// Called before any write to make sure the // header is always written before the first bytes	WITHOUT_CLASSIFICATION	0.9999993516796039	WITHOUT_CLASSIFICATION	6.483203961854456E-7	DEFECT
// For JDK 1.4 we can use "cal.getTimeInMillis()"	WITHOUT_CLASSIFICATION	0.990422691395064	WITHOUT_CLASSIFICATION	0.00957730860493605	DEFECT
// We can just use dt, since it is immutable	WITHOUT_CLASSIFICATION	0.9999994625310092	WITHOUT_CLASSIFICATION	5.374689907665756E-7	DEFECT
// float number of seconds	WITHOUT_CLASSIFICATION	0.9999985004338989	WITHOUT_CLASSIFICATION	1.4995661011386546E-6	DEFECT
// modified to match how hash is calculated in 1.8.2	WITHOUT_CLASSIFICATION	0.9999976521694226	WITHOUT_CLASSIFICATION	2.347830577439772E-6	DEFECT
// dump usec, not msec	WITHOUT_CLASSIFICATION	0.9999871991906708	WITHOUT_CLASSIFICATION	1.2800809329286099E-5	DEFECT
/* Time class methods */	WITHOUT_CLASSIFICATION	0.999985472346229	WITHOUT_CLASSIFICATION	1.4527653771064376E-5	DEFECT
// marsaling dumps usec, not msec	WITHOUT_CLASSIFICATION	0.9999965771667885	WITHOUT_CLASSIFICATION	3.4228332115557188E-6	DEFECT
// MRI accepts additional wday argument which appears to be ignored.	WITHOUT_CLASSIFICATION	0.9999986075700352	WITHOUT_CLASSIFICATION	1.3924299648215845E-6	DEFECT
// set up with min values and then add to allow rolling over	WITHOUT_CLASSIFICATION	0.9999999246237289	WITHOUT_CLASSIFICATION	7.537627113038367E-8	DEFECT
// the instant at which we will ask dtz what the difference between DST and // standard time is	WITHOUT_CLASSIFICATION	0.9999708616176265	WITHOUT_CLASSIFICATION	2.913838237346336E-5	DEFECT
// if we might be moving this time from !DST -> DST, the offset is assumed // to be the same as it was just before we last moved from DST -> !DST	WITHOUT_CLASSIFICATION	0.9999874913126234	WITHOUT_CLASSIFICATION	1.2508687376625535E-5	DEFECT
// Ignores usec if 8 args (for compatibility with parsedate) or if not supplied.	WITHOUT_CLASSIFICATION	0.999997817242708	WITHOUT_CLASSIFICATION	2.1827572921245094E-6	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999905073772994	WITHOUT_CLASSIFICATION	9.492622700463231E-6	DEFECT
/* If the value will fit in a Fixnum, return one of those. */	WITHOUT_CLASSIFICATION	0.9999913410070952	WITHOUT_CLASSIFICATION	8.658992904800482E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999962967861804	WITHOUT_CLASSIFICATION	3.7032138195390787E-6	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9999934302835484	WITHOUT_CLASSIFICATION	6.569716451632185E-6	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999936743086743	WITHOUT_CLASSIFICATION	6.325691325672761E-6	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999936743086743	WITHOUT_CLASSIFICATION	6.325691325672761E-6	DEFECT
// no bignorm here needed	WITHOUT_CLASSIFICATION	0.9999942946799122	WITHOUT_CLASSIFICATION	5.705320087883489E-6	DEFECT
// wow, the only time we can use the java protocol ;)	WITHOUT_CLASSIFICATION	0.9999996042258105	WITHOUT_CLASSIFICATION	3.957741895882086E-7	DEFECT
// Pad with a 0	WITHOUT_CLASSIFICATION	0.9999959708546333	WITHOUT_CLASSIFICATION	4.0291453666430265E-6	DEFECT
// BigInteger required a sign byte in incoming array	WITHOUT_CLASSIFICATION	0.9999998331019654	WITHOUT_CLASSIFICATION	1.6689803460002878E-7	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9999811327213385	WITHOUT_CLASSIFICATION	1.8867278661470456E-5	DEFECT
// We do this b/c make_tmpname might be overridden	WITHOUT_CLASSIFICATION	0.9999704550259664	WITHOUT_CLASSIFICATION	2.9544974033566277E-5	DEFECT
// ???	WITHOUT_CLASSIFICATION	0.9998211828467687	WITHOUT_CLASSIFICATION	1.788171532312916E-4	DEFECT
// PID	WITHOUT_CLASSIFICATION	0.9999883239185484	WITHOUT_CLASSIFICATION	1.1676081451518295E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999962967861804	WITHOUT_CLASSIFICATION	3.7032138195390787E-6	DEFECT
// elements and trailing nils	WITHOUT_CLASSIFICATION	0.9999975832532357	WITHOUT_CLASSIFICATION	2.416746764198768E-6	DEFECT
// Dir::tmpdir	WITHOUT_CLASSIFICATION	0.9999896124075821	WITHOUT_CLASSIFICATION	1.0387592417872952E-5	DEFECT
// volatile to ensure that initial nil-fill is visible to other threads	WITHOUT_CLASSIFICATION	0.9999990952093306	WITHOUT_CLASSIFICATION	9.047906692967747E-7	DEFECT
/* Ruby arrays default to holding 16 elements, so we create an         * ArrayList of the same size if we're not told otherwise         */	WITHOUT_CLASSIFICATION	0.9999964900699708	WITHOUT_CLASSIFICATION	3.5099300291106056E-6	DEFECT
/* rb_ary_new2     * just allocates the internal array     */	WITHOUT_CLASSIFICATION	0.999999215892953	WITHOUT_CLASSIFICATION	7.841070469326804E-7	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999992146917891	WITHOUT_CLASSIFICATION	7.853082108997012E-7	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999992146917891	WITHOUT_CLASSIFICATION	7.853082108997012E-7	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999992146917891	WITHOUT_CLASSIFICATION	7.853082108997012E-7	DEFECT
/* Array constructors taking the MetaClass to fulfil MRI Array subclass behaviour     *      */	WITHOUT_CLASSIFICATION	0.9999988622571321	WITHOUT_CLASSIFICATION	1.1377428679557508E-6	DEFECT
/* NEWOBJ and OBJSETUP equivalent     * fastest one, for shared arrays, optional objectspace     */	WITHOUT_CLASSIFICATION	0.9999999525515031	WITHOUT_CLASSIFICATION	4.74484969167628E-8	DEFECT
// Create global constants and variables	WITHOUT_CLASSIFICATION	0.9999998935685624	WITHOUT_CLASSIFICATION	1.0643143748712873E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999928251794077	WITHOUT_CLASSIFICATION	7.174820592332061E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999928251794077	WITHOUT_CLASSIFICATION	7.174820592332061E-6	DEFECT
// Windows does not support these functions, so we won't even try // This also matches Ruby behavior for JRUBY-2353.	WITHOUT_CLASSIFICATION	0.9999429937528833	WITHOUT_CLASSIFICATION	5.700624711672301E-5	DEFECT
// There are two different popular TZ formats: legacy (AST+3:00:00, GMT-3), and // newer one (US/Pacific, America/Los_Angeles). This pattern is to detect // the legacy TZ format in order to convert it to the newer format // understood by Java API.	WITHOUT_CLASSIFICATION	0.9999799603870877	WITHOUT_CLASSIFICATION	2.003961291229307E-5	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999928251794077	WITHOUT_CLASSIFICATION	7.174820592332061E-6	DEFECT
// 1.9 seems to just do inspect for to_s now	WITHOUT_CLASSIFICATION	0.9999869583335633	WITHOUT_CLASSIFICATION	1.3041666436565202E-5	DEFECT
// possibly should not in object space	WITHOUT_CLASSIFICATION	0.9999247485255028	WITHOUT_CLASSIFICATION	7.525147449719168E-5	DEFECT
// only fill if there actually will remain trailing storage	WITHOUT_CLASSIFICATION	0.9999981613105601	WITHOUT_CLASSIFICATION	1.8386894399078565E-6	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999939064662204	WITHOUT_CLASSIFICATION	6.093533779542709E-6	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999939064662204	WITHOUT_CLASSIFICATION	6.093533779542709E-6	DEFECT
// from DUP_SETUP	WITHOUT_CLASSIFICATION	0.9999723379006238	WITHOUT_CLASSIFICATION	2.766209937625005E-5	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999989982231339	WITHOUT_CLASSIFICATION	1.0017768660772518E-6	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999851180130548	WITHOUT_CLASSIFICATION	1.4881986945095174E-5	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999851180130548	WITHOUT_CLASSIFICATION	1.4881986945095174E-5	DEFECT
// Satisfy java.util.List interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999998371113733	WITHOUT_CLASSIFICATION	1.628886267902219E-7	DEFECT
// pre-set for the sake of terminating recursive calls	WITHOUT_CLASSIFICATION	0.9999977706103994	WITHOUT_CLASSIFICATION	2.229389600667362E-6	DEFECT
/* root fiber */	WITHOUT_CLASSIFICATION	0.9999537850724171	WITHOUT_CLASSIFICATION	4.621492758292326E-5	DEFECT
// GMT+00:00 --> Etc/GMT, see "MRI behavior" // comment below.	WITHOUT_CLASSIFICATION	0.9999983585155853	WITHOUT_CLASSIFICATION	1.641484414749111E-6	DEFECT
//  See http://www.gzip.org/zlib/rfc-gzip.html	WITHOUT_CLASSIFICATION	0.9999958539717869	WITHOUT_CLASSIFICATION	4.146028213103568E-6	DEFECT
// extras flag	WITHOUT_CLASSIFICATION	0.9999985982648572	WITHOUT_CLASSIFICATION	1.4017351427681397E-6	DEFECT
// Zlib::NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999770514998413	WITHOUT_CLASSIFICATION	2.2948500158665516E-5	DEFECT
// ...nothing	WITHOUT_CLASSIFICATION	0.9999927211278812	WITHOUT_CLASSIFICATION	7.278872118765028E-6	DEFECT
// utility method	WITHOUT_CLASSIFICATION	0.9999978107848012	WITHOUT_CLASSIFICATION	2.189215198731736E-6	DEFECT
// Prepare LoadService and load path	WITHOUT_CLASSIFICATION	0.9999996153933978	WITHOUT_CLASSIFICATION	3.846066022057007E-7	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999962967861804	WITHOUT_CLASSIFICATION	3.7032138195390787E-6	DEFECT
// flags // 4 bytes of modified time	WITHOUT_CLASSIFICATION	0.9999980563356737	WITHOUT_CLASSIFICATION	1.943664326216549E-6	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9999996033679216	WITHOUT_CLASSIFICATION	3.966320783647143E-7	DEFECT
// 1.8 "include?"	WITHOUT_CLASSIFICATION	0.9999932851060769	WITHOUT_CLASSIFICATION	6.714893923173946E-6	DEFECT
// any BigInteger is bigger than Fixnum and we don't have FIXABLE	WITHOUT_CLASSIFICATION	0.9995728179430272	WITHOUT_CLASSIFICATION	4.271820569728743E-4	DEFECT
// beneath are rewritten coercions that reflect MRI logic, the aboves are used only by RubyBigDecimal	WITHOUT_CLASSIFICATION	0.9999996041042324	WITHOUT_CLASSIFICATION	3.9589576768000296E-7	DEFECT
// MRI does it!	WITHOUT_CLASSIFICATION	0.9999889664518244	WITHOUT_CLASSIFICATION	1.1033548175519043E-5	DEFECT
// won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9996901382233244	WITHOUT_CLASSIFICATION	3.098617766756858E-4	DEFECT
// it won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9987477077220033	WITHOUT_CLASSIFICATION	0.001252292277996758	DEFECT
// RubyClassPathVariable	WITHOUT_CLASSIFICATION	0.9999983390790618	WITHOUT_CLASSIFICATION	1.6609209382710181E-6	DEFECT
// not to be confused with RubyObject's flags	WITHOUT_CLASSIFICATION	0.9999853629348043	WITHOUT_CLASSIFICATION	1.4637065195554029E-5	DEFECT
// second argument is allowed, but ignored (MRI)	WITHOUT_CLASSIFICATION	0.9999988757975932	WITHOUT_CLASSIFICATION	1.1242024067869442E-6	DEFECT
// we are presumably running a precompiled class; load directly	WITHOUT_CLASSIFICATION	0.9999990793964025	WITHOUT_CLASSIFICATION	9.206035974282774E-7	DEFECT
// terminate; tryCompile will have printed out an error and we're done	WITHOUT_CLASSIFICATION	0.9998540762366129	WITHOUT_CLASSIFICATION	1.4592376338707028E-4	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999966458769532	WITHOUT_CLASSIFICATION	3.354123046880683E-6	DEFECT
// do nothing, this iteration restarts	WITHOUT_CLASSIFICATION	0.9999898995773547	WITHOUT_CLASSIFICATION	1.0100422645147956E-5	DEFECT
// recheck condition	WITHOUT_CLASSIFICATION	0.999981319773538	WITHOUT_CLASSIFICATION	1.8680226462024278E-5	DEFECT
// Get the main threadcontext (gets constructed for us)	WITHOUT_CLASSIFICATION	0.9999994750893605	WITHOUT_CLASSIFICATION	5.249106395606611E-7	DEFECT
// Construct key services	WITHOUT_CLASSIFICATION	0.9999869270567388	WITHOUT_CLASSIFICATION	1.307294326122271E-5	DEFECT
// initialize the root of the class hierarchy completely	WITHOUT_CLASSIFICATION	0.9999928249542163	WITHOUT_CLASSIFICATION	7.175045783802801E-6	DEFECT
// Construct the top-level execution frame and scope for the main thread	WITHOUT_CLASSIFICATION	0.9999999248119049	WITHOUT_CLASSIFICATION	7.518809511518518E-8	DEFECT
// Initialize all the core classes	WITHOUT_CLASSIFICATION	0.9999923481025513	WITHOUT_CLASSIFICATION	7.651897448680392E-6	DEFECT
// Initialize the "dummy" class used as a marker	WITHOUT_CLASSIFICATION	0.9999992191115283	WITHOUT_CLASSIFICATION	7.808884717013082E-7	DEFECT
// Initialize Kernel and include into Object	WITHOUT_CLASSIFICATION	0.9999915017313323	WITHOUT_CLASSIFICATION	8.49826866774048E-6	DEFECT
// Object is ready, create top self	WITHOUT_CLASSIFICATION	0.9999875015925032	WITHOUT_CLASSIFICATION	1.249840749696622E-5	DEFECT
// Pre-create all the core classes potentially referenced during startup	WITHOUT_CLASSIFICATION	0.9999998325127729	WITHOUT_CLASSIFICATION	1.6748722714017823E-7	DEFECT
// Math depends on all numeric types	WITHOUT_CLASSIFICATION	0.9999977626058559	WITHOUT_CLASSIFICATION	2.237394144083187E-6	DEFECT
// depends on IO, FileTest	WITHOUT_CLASSIFICATION	0.9999940614129258	WITHOUT_CLASSIFICATION	5.938587074184269E-6	DEFECT
// initialize builtin libraries	WITHOUT_CLASSIFICATION	0.9999807266998431	WITHOUT_CLASSIFICATION	1.9273300156892007E-5	DEFECT
// Require in all libraries specified on command line	WITHOUT_CLASSIFICATION	0.9999997934905265	WITHOUT_CLASSIFICATION	2.0650947341038215E-7	DEFECT
// Bootstrap the top of the hierarchy	WITHOUT_CLASSIFICATION	0.9999988947801532	WITHOUT_CLASSIFICATION	1.1052198467471788E-6	DEFECT
// we try to get the classloader that loaded JRuby, falling back on System	WITHOUT_CLASSIFICATION	0.9999995170040663	WITHOUT_CLASSIFICATION	4.829959336653632E-7	DEFECT
// determine spacing	WITHOUT_CLASSIFICATION	0.9999989084705008	WITHOUT_CLASSIFICATION	1.0915294991557747E-6	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.999998735127534	WITHOUT_CLASSIFICATION	1.2648724659724285E-6	DEFECT
// For JSR 223 support: see http://scripting.java.net/	WITHOUT_CLASSIFICATION	0.9999983937077271	WITHOUT_CLASSIFICATION	1.60629227285799E-6	DEFECT
// use this for JRuby-internal finalizers	WITHOUT_CLASSIFICATION	0.9999920115690747	WITHOUT_CLASSIFICATION	7.988430925260897E-6	DEFECT
// this method is for finalizers registered via ObjectSpace	WITHOUT_CLASSIFICATION	0.9999284293583767	WITHOUT_CLASSIFICATION	7.157064162328037E-5	DEFECT
// new factory methods ------------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999987795268881	WITHOUT_CLASSIFICATION	1.2204731119185865E-6	DEFECT
//        assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9998316148844383	WITHOUT_CLASSIFICATION	1.683851155616891E-4	DEFECT
// Equivalent of Data_Wrap_Struct	WITHOUT_CLASSIFICATION	0.9999942205316649	WITHOUT_CLASSIFICATION	5.77946833517831E-6	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9999326152705227	WITHOUT_CLASSIFICATION	6.738472947727883E-5	DEFECT
// ChannelDescriptors opened by sysopen are cached to avoid collection	WITHOUT_CLASSIFICATION	0.9999987523455234	WITHOUT_CLASSIFICATION	1.2476544765931363E-6	DEFECT
// Default objects	WITHOUT_CLASSIFICATION	0.9999984932460786	WITHOUT_CLASSIFICATION	1.5067539214280728E-6	DEFECT
// record separator var, to speed up io ops that use it	WITHOUT_CLASSIFICATION	0.9999994295564365	WITHOUT_CLASSIFICATION	5.704435635972836E-7	DEFECT
// former java.lang.System concepts now internalized for MVM	WITHOUT_CLASSIFICATION	0.9999885995739946	WITHOUT_CLASSIFICATION	1.1400426005367873E-5	DEFECT
// Java support	WITHOUT_CLASSIFICATION	0.9999985553245359	WITHOUT_CLASSIFICATION	1.4446754641259702E-6	DEFECT
// Parser stats	WITHOUT_CLASSIFICATION	0.9999970511728128	WITHOUT_CLASSIFICATION	2.9488271872228816E-6	DEFECT
// Compilation	WITHOUT_CLASSIFICATION	0.9999937475989638	WITHOUT_CLASSIFICATION	6.252401036284084E-6	DEFECT
// can't read non-standard properties	WITHOUT_CLASSIFICATION	0.9999974763078806	WITHOUT_CLASSIFICATION	2.5236921193104587E-6	DEFECT
// can't create custom classloaders	WITHOUT_CLASSIFICATION	0.9999959109097761	WITHOUT_CLASSIFICATION	4.08909022384489E-6	DEFECT
// mutex that controls modifications of user-defined finalizers	WITHOUT_CLASSIFICATION	0.9999792299020804	WITHOUT_CLASSIFICATION	2.077009791957712E-5	DEFECT
// mutex that controls modifications of internal finalizers	WITHOUT_CLASSIFICATION	0.9999622473707247	WITHOUT_CLASSIFICATION	3.775262927538678E-5	DEFECT
// A thread pool to use for executing this runtime's Ruby threads	WITHOUT_CLASSIFICATION	0.9999985340284476	WITHOUT_CLASSIFICATION	1.4659715523376267E-6	DEFECT
// A global object lock for class hierarchy mutations	WITHOUT_CLASSIFICATION	0.9999989332948719	WITHOUT_CLASSIFICATION	1.0667051281352511E-6	DEFECT
// initial spaces // spaces before "at"	WITHOUT_CLASSIFICATION	0.9999993665668213	WITHOUT_CLASSIFICATION	6.334331787485741E-7	DEFECT
// event name // filename // line numbers should be 1-based	WITHOUT_CLASSIFICATION	0.9999970963335245	WITHOUT_CLASSIFICATION	2.9036664755349008E-6	DEFECT
// The method is intentionally not public, since it typically should // not be used outside of the core.	WITHOUT_CLASSIFICATION	0.9999679501111498	WITHOUT_CLASSIFICATION	3.204988885019365E-5	DEFECT
// Note: this field and the following static initializer // must be located be in this order!	WITHOUT_CLASSIFICATION	0.999856521584861	WITHOUT_CLASSIFICATION	1.4347841513902117E-4	DEFECT
// Contains a list of all blocks (as Procs) that should be called when // the runtime environment exits.	WITHOUT_CLASSIFICATION	0.9999979766168048	WITHOUT_CLASSIFICATION	2.0233831952167025E-6	DEFECT
// quoted-printable	WITHOUT_CLASSIFICATION	0.9999997294271403	WITHOUT_CLASSIFICATION	2.705728597229086E-7	DEFECT
// default options	WITHOUT_CLASSIFICATION	0.9999992648271766	WITHOUT_CLASSIFICATION	7.351728233838111E-7	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999812799458604	WITHOUT_CLASSIFICATION	1.8720054139577282E-5	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999812799458604	WITHOUT_CLASSIFICATION	1.8720054139577282E-5	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999809378698771	WITHOUT_CLASSIFICATION	1.9062130122965793E-5	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999809378698771	WITHOUT_CLASSIFICATION	1.9062130122965793E-5	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9999830807655911	WITHOUT_CLASSIFICATION	1.6919234408936447E-5	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9999830807655911	WITHOUT_CLASSIFICATION	1.6919234408936447E-5	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9999893451582064	WITHOUT_CLASSIFICATION	1.0654841793563703E-5	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9999893451582064	WITHOUT_CLASSIFICATION	1.0654841793563703E-5	DEFECT
// long name option	WITHOUT_CLASSIFICATION	0.999998923955907	WITHOUT_CLASSIFICATION	1.0760440930995638E-6	DEFECT
// conversion	WITHOUT_CLASSIFICATION	0.999994472441448	WITHOUT_CLASSIFICATION	5.527558551954804E-6	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999954592275349	WITHOUT_CLASSIFICATION	4.54077246514929E-6	DEFECT
// string doesn't share any resources	WITHOUT_CLASSIFICATION	0.9999961530918884	WITHOUT_CLASSIFICATION	3.846908111594379E-6	DEFECT
// string has it's own ByteList, but it's pointing to a shared buffer (byte[])	WITHOUT_CLASSIFICATION	0.9999995387071021	WITHOUT_CLASSIFICATION	4.6129289797086964E-7	DEFECT
// string doesn't have it's own ByteList (values)	WITHOUT_CLASSIFICATION	0.9999981456293416	WITHOUT_CLASSIFICATION	1.8543706584228645E-6	DEFECT
// ENC_CODERANGE_ASCIIONLY	WITHOUT_CLASSIFICATION	0.999898754518671	WITHOUT_CLASSIFICATION	1.0124548132893875E-4	DEFECT
// rb_enc_str_asciionly_p	WITHOUT_CLASSIFICATION	0.9999987295342964	WITHOUT_CLASSIFICATION	1.2704657036845525E-6	DEFECT
// rb_enc_str_coderange	WITHOUT_CLASSIFICATION	0.9999933346377009	WITHOUT_CLASSIFICATION	6.665362299022877E-6	DEFECT
// rb_str_hash_cmp	WITHOUT_CLASSIFICATION	0.9999979207747304	WITHOUT_CLASSIFICATION	2.0792252695282517E-6	DEFECT
// Deprecated String construction routines	WITHOUT_CLASSIFICATION	0.9999967617304747	WITHOUT_CLASSIFICATION	3.2382695252899765E-6	DEFECT
// String construction routines by NOT byte[] buffer and NOT making the target String shared 	WITHOUT_CLASSIFICATION	0.9999950175234729	WITHOUT_CLASSIFICATION	4.982476527100156E-6	DEFECT
/* rb_str_subseq */	WITHOUT_CLASSIFICATION	0.9999938205152297	WITHOUT_CLASSIFICATION	6.179484770343271E-6	DEFECT
// no need to assign encoding, same bytelist shared	WITHOUT_CLASSIFICATION	0.9999996365288499	WITHOUT_CLASSIFICATION	3.6347115010325723E-7	DEFECT
// if len == 0 then shared empty	WITHOUT_CLASSIFICATION	0.9999987976253183	WITHOUT_CLASSIFICATION	1.2023746816577601E-6	DEFECT
/* rb_str_cmp_m */	WITHOUT_CLASSIFICATION	0.9999912967695733	WITHOUT_CLASSIFICATION	8.703230426599616E-6	DEFECT
// we limit to int because ByteBuffer can only allocate int sizes	WITHOUT_CLASSIFICATION	0.9999981236184171	WITHOUT_CLASSIFICATION	1.8763815828860319E-6	DEFECT
// // rb_str_buf_append	WITHOUT_CLASSIFICATION	0.9999944948914271	WITHOUT_CLASSIFICATION	5.505108572988321E-6	DEFECT
// encoding doesn't have to be copied.	WITHOUT_CLASSIFICATION	0.9999813343499404	WITHOUT_CLASSIFICATION	1.866565005959108E-5	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9997898196393296	WITHOUT_CLASSIFICATION	2.1018036067029644E-4	DEFECT
// must not reallocate	WITHOUT_CLASSIFICATION	0.9999431916110514	WITHOUT_CLASSIFICATION	5.6808388948546035E-5	DEFECT
// Illegal combination	WITHOUT_CLASSIFICATION	0.9999878914116083	WITHOUT_CLASSIFICATION	1.2108588391587641E-5	DEFECT
// use 1.8 impl	WITHOUT_CLASSIFICATION	0.999996498029913	WITHOUT_CLASSIFICATION	3.5019700870888352E-6	DEFECT
/* RubyString aka rb_string_value */	WITHOUT_CLASSIFICATION	0.9999960152227158	WITHOUT_CLASSIFICATION	3.984777284229611E-6	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999945445599091	WITHOUT_CLASSIFICATION	5.4554400909222154E-6	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999941018676	WITHOUT_CLASSIFICATION	5.8981323999346846E-6	DEFECT
/* len + margin */	WITHOUT_CLASSIFICATION	0.999997295575701	WITHOUT_CLASSIFICATION	2.7044242989108824E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999941139956956	WITHOUT_CLASSIFICATION	5.886004304466906E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999941139956956	WITHOUT_CLASSIFICATION	5.886004304466906E-6	DEFECT
/* copy pre-match substr */	WITHOUT_CLASSIFICATION	0.9999971646840071	WITHOUT_CLASSIFICATION	2.835315992824842E-6	DEFECT
// string given	WITHOUT_CLASSIFICATION	0.9999952968350618	WITHOUT_CLASSIFICATION	4.703164938101257E-6	DEFECT
// hash given	WITHOUT_CLASSIFICATION	0.9999974731692527	WITHOUT_CLASSIFICATION	2.526830747270258E-6	DEFECT
// This represents left most digit in a set of incremented // values?  Therefore leftmost numeric must be '1' and not '0' // 999 -> 1000, not 999 -> 0000.  whereas chars should be // zzz -> aaaa and non-alnum byte values should be "\377" -> "\001\000"	WITHOUT_CLASSIFICATION	0.9999931561994678	WITHOUT_CLASSIFICATION	6.843800532163901E-6	DEFECT
/* substring longer than string */	WITHOUT_CLASSIFICATION	0.9999963042947803	WITHOUT_CLASSIFICATION	3.6957052198362413E-6	DEFECT
/* rb_str_substr */	WITHOUT_CLASSIFICATION	0.999992702378365	WITHOUT_CLASSIFICATION	7.297621635011196E-6	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.999993109454967	WITHOUT_CLASSIFICATION	6.890545032915803E-6	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.999993109454967	WITHOUT_CLASSIFICATION	6.890545032915803E-6	DEFECT
/* rb_str_splice */	WITHOUT_CLASSIFICATION	0.999995966583857	WITHOUT_CLASSIFICATION	4.0334161429402545E-6	DEFECT
// TODO: keep cr // TODO: rb_str_splice_0	WITHOUT_CLASSIFICATION	0.8132001028609764	WITHOUT_CLASSIFICATION	0.1867998971390235	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999807418825237	WITHOUT_CLASSIFICATION	1.9258117476288697E-5	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999807418825237	WITHOUT_CLASSIFICATION	1.9258117476288697E-5	DEFECT
/* wrapped to \0...\0.  search next valid char. */	WITHOUT_CLASSIFICATION	0.9999982933662265	WITHOUT_CLASSIFICATION	1.706633773543188E-6	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9999935573286322	WITHOUT_CLASSIFICATION	6.442671367878571E-6	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9999935573286322	WITHOUT_CLASSIFICATION	6.442671367878571E-6	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999955147099668	WITHOUT_CLASSIFICATION	4.485290033213821E-6	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999955147099668	WITHOUT_CLASSIFICATION	4.485290033213821E-6	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999893490250976	WITHOUT_CLASSIFICATION	1.0650974902288183E-5	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999893490250976	WITHOUT_CLASSIFICATION	1.0650974902288183E-5	DEFECT
// QTRUE	WITHOUT_CLASSIFICATION	0.99998744956614	WITHOUT_CLASSIFICATION	1.2550433859999808E-5	DEFECT
/* retrieve last replacer */	WITHOUT_CLASSIFICATION	0.9999964299966335	WITHOUT_CLASSIFICATION	3.5700033665626974E-6	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999931454102228	WITHOUT_CLASSIFICATION	6.854589777232218E-6	DEFECT
// long size * bits in byte	WITHOUT_CLASSIFICATION	0.99999795978284	WITHOUT_CLASSIFICATION	2.0402171599745513E-6	DEFECT
// from encoding, special-casing ASCII* to ASCII	WITHOUT_CLASSIFICATION	0.9999995670322935	WITHOUT_CLASSIFICATION	4.32967706407195E-7	DEFECT
// to encoding, same special-casing	WITHOUT_CLASSIFICATION	0.9999988932013667	WITHOUT_CLASSIFICATION	1.1067986333739351E-6	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999976823006818	WITHOUT_CLASSIFICATION	2.317699318218524E-6	DEFECT
// decode from "from" and encode to "to"	WITHOUT_CLASSIFICATION	0.9999974370796958	WITHOUT_CLASSIFICATION	2.5629203042757393E-6	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999976823006818	WITHOUT_CLASSIFICATION	2.317699318218524E-6	DEFECT
//Kernel is the only Module that doesn't need an implementor	WITHOUT_CLASSIFICATION	0.9998184574422152	WITHOUT_CLASSIFICATION	1.8154255778491876E-4	DEFECT
// no binding given, use (eval)	WITHOUT_CLASSIFICATION	0.9999995170097569	WITHOUT_CLASSIFICATION	4.82990243096637E-7	DEFECT
// interned, OK for "fast" methods	WITHOUT_CLASSIFICATION	0.9999956560625748	WITHOUT_CLASSIFICATION	4.343937425209333E-6	DEFECT
// File to be loaded by autoload has already been or is being loaded.	WITHOUT_CLASSIFICATION	0.9999912848777704	WITHOUT_CLASSIFICATION	8.715122229482182E-6	DEFECT
// rb_cstr_to_dbl case	WITHOUT_CLASSIFICATION	0.9999982695710675	WITHOUT_CLASSIFICATION	1.7304289324939904E-6	DEFECT
// We break if we know this sleep was explicitly woken up/interrupted	WITHOUT_CLASSIFICATION	0.9999944634500183	WITHOUT_CLASSIFICATION	5.536549981688014E-6	DEFECT
// exec process, create IO with process	WITHOUT_CLASSIFICATION	0.9999991477882427	WITHOUT_CLASSIFICATION	8.522117572432579E-7	DEFECT
// Zero sleeps forever	WITHOUT_CLASSIFICATION	0.9999955147326474	WITHOUT_CLASSIFICATION	4.485267352594462E-6	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9999996954176661	WITHOUT_CLASSIFICATION	3.045823338678226E-7	DEFECT
// Explicit zero in MRI returns immediately	WITHOUT_CLASSIFICATION	0.9999866794908361	WITHOUT_CLASSIFICATION	1.3320509163910998E-5	DEFECT
// Spurious wakeup-loop	WITHOUT_CLASSIFICATION	0.9999986980841812	WITHOUT_CLASSIFICATION	1.3019158188930279E-6	DEFECT
// adjusts paths started with '/' or '\\', on windows.	WITHOUT_CLASSIFICATION	0.9999992399866446	WITHOUT_CLASSIFICATION	7.600133552710753E-7	DEFECT
// file not given	WITHOUT_CLASSIFICATION	0.9999496215498891	WITHOUT_CLASSIFICATION	5.037845011087737E-5	DEFECT
// string to eval	WITHOUT_CLASSIFICATION	0.9999978177575645	WITHOUT_CLASSIFICATION	2.1822424355193675E-6	DEFECT
// binding given, use binding's file	WITHOUT_CLASSIFICATION	0.9999981774961368	WITHOUT_CLASSIFICATION	1.8225038631337385E-6	DEFECT
// ?g  | boolean | True if file1 has the \CF{setgid} bit	WITHOUT_CLASSIFICATION	0.9999966862673126	WITHOUT_CLASSIFICATION	3.3137326872430402E-6	DEFECT
// bomb out, it's not a binding or a proc	WITHOUT_CLASSIFICATION	0.9999934347650986	WITHOUT_CLASSIFICATION	6.565234901410837E-6	DEFECT
// Ordering of array traversal not important, just intuitive	WITHOUT_CLASSIFICATION	0.9999739249621744	WITHOUT_CLASSIFICATION	2.6075037825578987E-5	DEFECT
//Catch active, throw for catch to handle	WITHOUT_CLASSIFICATION	0.9999975661522365	WITHOUT_CLASSIFICATION	2.4338477636241706E-6	DEFECT
// No catch active for this throw	WITHOUT_CLASSIFICATION	0.9999582896071874	WITHOUT_CLASSIFICATION	4.171039281263434E-5	DEFECT
// without full tracing, many events will not fire	WITHOUT_CLASSIFICATION	0.9999951605614535	WITHOUT_CLASSIFICATION	4.839438546378424E-6	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9999980968787082	WITHOUT_CLASSIFICATION	1.9031212917722792E-6	DEFECT
// MRI behavior: use first byte of string value if len > 0	WITHOUT_CLASSIFICATION	0.9999989995741702	WITHOUT_CLASSIFICATION	1.0004258298279827E-6	DEFECT
// MRI behavior: now check arg count	WITHOUT_CLASSIFICATION	0.9998991206746567	WITHOUT_CLASSIFICATION	1.0087932534319173E-4	DEFECT
// ?A  | Time    | Last access time for file1	WITHOUT_CLASSIFICATION	0.9999916623741769	WITHOUT_CLASSIFICATION	8.337625823082853E-6	DEFECT
// ?b  | boolean | True if file1 is a block device	WITHOUT_CLASSIFICATION	0.999991959885105	WITHOUT_CLASSIFICATION	8.040114894976667E-6	DEFECT
// ?c  | boolean | True if file1 is a character device	WITHOUT_CLASSIFICATION	0.9999986086688395	WITHOUT_CLASSIFICATION	1.391331160590524E-6	DEFECT
// ?C  | Time    | Last change time for file1	WITHOUT_CLASSIFICATION	0.9999970035918669	WITHOUT_CLASSIFICATION	2.9964081330280613E-6	DEFECT
// ?d  | boolean | True if file1 exists and is a directory	WITHOUT_CLASSIFICATION	0.9999951773852539	WITHOUT_CLASSIFICATION	4.822614746159585E-6	DEFECT
// ?e  | boolean | True if file1 exists	WITHOUT_CLASSIFICATION	0.9999981401756335	WITHOUT_CLASSIFICATION	1.8598243663814795E-6	DEFECT
// ?f  | boolean | True if file1 exists and is a regular file	WITHOUT_CLASSIFICATION	0.9999978907916502	WITHOUT_CLASSIFICATION	2.1092083496998654E-6	DEFECT
// ?G  | boolean | True if file1 exists and has a group ownership equal to the caller's group	WITHOUT_CLASSIFICATION	0.9999999539801082	WITHOUT_CLASSIFICATION	4.601989173159599E-8	DEFECT
// ?k  | boolean | True if file1 exists and has the sticky bit set	WITHOUT_CLASSIFICATION	0.9999946445091423	WITHOUT_CLASSIFICATION	5.355490857715091E-6	DEFECT
// ?M  | Time    | Last modification time for file1	WITHOUT_CLASSIFICATION	0.9999926041159071	WITHOUT_CLASSIFICATION	7.395884092874549E-6	DEFECT
// ?o  | boolean | True if file1 exists and is owned by the caller's effective uid	WITHOUT_CLASSIFICATION	0.9999977367482801	WITHOUT_CLASSIFICATION	2.2632517198950113E-6	DEFECT
// ?O  | boolean | True if file1 exists and is owned by the caller's real uid 	WITHOUT_CLASSIFICATION	0.9999945168034279	WITHOUT_CLASSIFICATION	5.4831965720703225E-6	DEFECT
// ?p  | boolean | True if file1 exists and is a fifo	WITHOUT_CLASSIFICATION	0.9999978851888992	WITHOUT_CLASSIFICATION	2.114811100782719E-6	DEFECT
// ?r  | boolean | True if file1 is readable by the effective uid/gid of the caller	WITHOUT_CLASSIFICATION	0.9999935957913805	WITHOUT_CLASSIFICATION	6.404208619605072E-6	DEFECT
// ?s  | int/nil | If file1 has nonzero size, return the size, otherwise nil	WITHOUT_CLASSIFICATION	0.9999991154455394	WITHOUT_CLASSIFICATION	8.845544605083795E-7	DEFECT
// ?S  | boolean | True if file1 exists and is a socket	WITHOUT_CLASSIFICATION	0.9999899917299706	WITHOUT_CLASSIFICATION	1.0008270029350117E-5	DEFECT
// ?u  | boolean | True if file1 has the setuid bit set	WITHOUT_CLASSIFICATION	0.9999915168790234	WITHOUT_CLASSIFICATION	8.483120976615081E-6	DEFECT
// ?x  | boolean | True if file1 exists and is executable by the effective uid/gid	WITHOUT_CLASSIFICATION	0.9999991837258568	WITHOUT_CLASSIFICATION	8.162741431076859E-7	DEFECT
// ?X  | boolean | True if file1 exists and is executable by the real uid/gid	WITHOUT_CLASSIFICATION	0.9999996729520134	WITHOUT_CLASSIFICATION	3.270479865814826E-7	DEFECT
// ?z  | boolean | True if file1 exists and has a zero length	WITHOUT_CLASSIFICATION	0.9999994919645199	WITHOUT_CLASSIFICATION	5.080354801531101E-7	DEFECT
// ?=  | boolean | True if the modification times of file1 and file2 are equal	WITHOUT_CLASSIFICATION	0.9999997404276194	WITHOUT_CLASSIFICATION	2.595723805721521E-7	DEFECT
// ?<  | boolean | True if the modification time of file1 is prior to that of file2	WITHOUT_CLASSIFICATION	0.9999991194884673	WITHOUT_CLASSIFICATION	8.805115326647133E-7	DEFECT
// ?>  | boolean | True if the modification time of file1 is after that of file2	WITHOUT_CLASSIFICATION	0.9999976374805295	WITHOUT_CLASSIFICATION	2.3625194704676134E-6	DEFECT
// ?-  | boolean | True if file1 and file2 are identical	WITHOUT_CLASSIFICATION	0.9999995417898755	WITHOUT_CLASSIFICATION	4.5821012455680404E-7	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999993610300333	WITHOUT_CLASSIFICATION	6.389699667258216E-7	DEFECT
// Error info is per-thread	WITHOUT_CLASSIFICATION	0.9998678989259332	WITHOUT_CLASSIFICATION	1.321010740668099E-4	DEFECT
// init errorInfo to nil	WITHOUT_CLASSIFICATION	0.9996827337329331	WITHOUT_CLASSIFICATION	3.1726626706688615E-4	DEFECT
// if we're already aborting, we can receive no further mail	WITHOUT_CLASSIFICATION	0.9999882766840787	WITHOUT_CLASSIFICATION	1.1723315921216104E-5	DEFECT
// If this thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9999677486439388	WITHOUT_CLASSIFICATION	3.225135606112582E-5	DEFECT
// new interrupt, to hopefully wake it out of any blocking IO	WITHOUT_CLASSIFICATION	0.9999978106597841	WITHOUT_CLASSIFICATION	2.189340215914473E-6	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999978440474945	WITHOUT_CLASSIFICATION	2.155952505488878E-6	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999978440474945	WITHOUT_CLASSIFICATION	2.155952505488878E-6	DEFECT
// JRUBY-2380, associate future early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9999992213695296	WITHOUT_CLASSIFICATION	7.786304703604234E-7	DEFECT
// JRUBY-2380, associate thread early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9999977428014364	WITHOUT_CLASSIFICATION	2.257198563534742E-6	DEFECT
// for Thread::start, which does not call the subclass's initialize	WITHOUT_CLASSIFICATION	0.999920741842141	WITHOUT_CLASSIFICATION	7.925815785901723E-5	DEFECT
// JRUBY-3568, inherit threadgroup or use default	WITHOUT_CLASSIFICATION	0.9999989025874204	WITHOUT_CLASSIFICATION	1.0974125796750008E-6	DEFECT
// MRI behavior: value given in seconds; converted to Float; less // than or equal to zero returns immediately; returns nil	WITHOUT_CLASSIFICATION	0.9999960381643944	WITHOUT_CLASSIFICATION	3.96183560555332E-6	DEFECT
// If the target thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9999980663277601	WITHOUT_CLASSIFICATION	1.9336722399251633E-6	DEFECT
// We need this loop in order to be able to "unblock" the // join call without actually calling interrupt.	WITHOUT_CLASSIFICATION	0.9999955835983471	WITHOUT_CLASSIFICATION	4.416401652946191E-6	DEFECT
// attempt to decriticalize all if we're the critical thread	WITHOUT_CLASSIFICATION	0.9999964410426735	WITHOUT_CLASSIFICATION	3.5589573265067245E-6	DEFECT
// not valid for "dead" state	WITHOUT_CLASSIFICATION	0.9999930933654115	WITHOUT_CLASSIFICATION	6.90663458852098E-6	DEFECT
// If the killee thread is the same as the killer thread, just die	WITHOUT_CLASSIFICATION	0.999991581689899	WITHOUT_CLASSIFICATION	8.418310101011341E-6	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999960158802774	WITHOUT_CLASSIFICATION	3.984119722586657E-6	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999960158802774	WITHOUT_CLASSIFICATION	3.984119722586657E-6	DEFECT
// ignore; I don't like doing it, but it seems like we // really just need to make all channels non-blocking by // default and use select when implementing blocking ops, // so if this remains set non-blocking, perhaps it's not // such a big deal...	WITHOUT_CLASSIFICATION	0.9996863164156913	WITHOUT_CLASSIFICATION	3.136835843087462E-4	DEFECT
// can't select, just have to do a blocking call	WITHOUT_CLASSIFICATION	0.9999920772592725	WITHOUT_CLASSIFICATION	7.922740727458052E-6	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9999996167499815	WITHOUT_CLASSIFICATION	3.832500185165404E-7	DEFECT
// Create Constants class	WITHOUT_CLASSIFICATION	0.9999995659321735	WITHOUT_CLASSIFICATION	4.340678264372254E-7	DEFECT
// Create constants for open flags	WITHOUT_CLASSIFICATION	0.9999997820535123	WITHOUT_CLASSIFICATION	2.179464877040613E-7	DEFECT
// Strip off the O_ prefix, so they become File::RDONLY, and so on	WITHOUT_CLASSIFICATION	0.9999981359083531	WITHOUT_CLASSIFICATION	1.8640916469174109E-6	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999974217218255	WITHOUT_CLASSIFICATION	2.578278174525799E-6	DEFECT
// File::Constants module is included in IO.	WITHOUT_CLASSIFICATION	0.9999849372909679	WITHOUT_CLASSIFICATION	1.5062709032046262E-5	DEFECT
// Make sure any existing lock is released before we try and close the file	WITHOUT_CLASSIFICATION	0.9999993363222872	WITHOUT_CLASSIFICATION	6.636777127601296E-7	DEFECT
// null channel always succeeds for all locking operations	WITHOUT_CLASSIFICATION	0.9999996979222537	WITHOUT_CLASSIFICATION	3.0207774620312225E-7	DEFECT
// Paths which end in "/" or "\\" must be stripped off.	WITHOUT_CLASSIFICATION	0.9999779249548167	WITHOUT_CLASSIFICATION	2.2075045183317E-5	DEFECT
// Special case for handling ACCMODE, since constantine will generate // an invalid value if it is not defined by the platform.	WITHOUT_CLASSIFICATION	0.9999794364713082	WITHOUT_CLASSIFICATION	2.0563528691851833E-5	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999968815295701	WITHOUT_CLASSIFICATION	3.118470429820277E-6	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999968815295701	WITHOUT_CLASSIFICATION	3.118470429820277E-6	DEFECT
// We're not actually a real file, so we can't flock	WITHOUT_CLASSIFICATION	0.9996447568782202	WITHOUT_CLASSIFICATION	3.5524312177979923E-4	DEFECT
// Should we do anything?	WITHOUT_CLASSIFICATION	0.9999404248631194	WITHOUT_CLASSIFICATION	5.957513688053228E-5	DEFECT
/* File class methods */	WITHOUT_CLASSIFICATION	0.9999914620548698	WITHOUT_CLASSIFICATION	8.53794513016479E-6	DEFECT
// MRI-compatible basename handling for windows drive letter paths	WITHOUT_CLASSIFICATION	0.9999998543716694	WITHOUT_CLASSIFICATION	1.4562833068135533E-7	DEFECT
// strip c: away from relative-pathed name	WITHOUT_CLASSIFICATION	0.9999977418996927	WITHOUT_CLASSIFICATION	2.2581003073149065E-6	DEFECT
// C:\ is returned unchanged	WITHOUT_CLASSIFICATION	0.9999890957695183	WITHOUT_CLASSIFICATION	1.0904230481623415E-5	DEFECT
// -1 no match; 0 it is dot file not extension	WITHOUT_CLASSIFICATION	0.9999856636461114	WITHOUT_CLASSIFICATION	1.4336353888658625E-5	DEFECT
// trim trailing slashes	WITHOUT_CLASSIFICATION	0.9999976195208999	WITHOUT_CLASSIFICATION	2.380479100048101E-6	DEFECT
// Dot is not at beginning and not at end of filename. 	WITHOUT_CLASSIFICATION	0.9999045380652959	WITHOUT_CLASSIFICATION	9.546193470422221E-5	DEFECT
// Handle ~user paths 	WITHOUT_CLASSIFICATION	0.9999982395153868	WITHOUT_CLASSIFICATION	1.7604846131747674E-6	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9999996167499815	WITHOUT_CLASSIFICATION	3.832500185165404E-7	DEFECT
// Include additional path separator // (so that dirname of "C:\file.txt" is  "C:\", not "C:")	WITHOUT_CLASSIFICATION	0.999995824174566	WITHOUT_CLASSIFICATION	4.175825433961374E-6	DEFECT
// FNFException can be thrown in both cases, when the file // is not found, or when permission is denied.	WITHOUT_CLASSIFICATION	0.9998514878956559	WITHOUT_CLASSIFICATION	1.4851210434400376E-4	DEFECT
// No directory delimeter.  Rest of string is username	WITHOUT_CLASSIFICATION	0.9999917190146052	WITHOUT_CLASSIFICATION	8.280985394928793E-6	DEFECT
// If there's a second argument, it's the path to which the first  // argument is relative.	WITHOUT_CLASSIFICATION	0.9999996952767214	WITHOUT_CLASSIFICATION	3.0472327860688907E-7	DEFECT
// Handle ~user paths.	WITHOUT_CLASSIFICATION	0.9999978716392443	WITHOUT_CLASSIFICATION	2.1283607558106726E-6	DEFECT
// If there's no second argument, simply use the working directory  // of the runtime.	WITHOUT_CLASSIFICATION	0.9999989799733396	WITHOUT_CLASSIFICATION	1.0200266603288175E-6	DEFECT
// Find out which string to check.	WITHOUT_CLASSIFICATION	0.9999940897316638	WITHOUT_CLASSIFICATION	5.910268336216252E-6	DEFECT
// Single '~' as whole path to expand	WITHOUT_CLASSIFICATION	0.9999995572443449	WITHOUT_CLASSIFICATION	4.4275565513524346E-7	DEFECT
// Count number of extra slashes in the beginning of the string.	WITHOUT_CLASSIFICATION	0.9999998486739647	WITHOUT_CLASSIFICATION	1.513260353347915E-7	DEFECT
// '~user/...' as path to expand	WITHOUT_CLASSIFICATION	0.999999133255384	WITHOUT_CLASSIFICATION	8.667446160100961E-7	DEFECT
// '~/...' as path to expand	WITHOUT_CLASSIFICATION	0.9999985725887292	WITHOUT_CLASSIFICATION	1.4274112708371179E-6	DEFECT
// Prepare a string with the same number of redundant slashes so that  // we easily can prepend it to the result.	WITHOUT_CLASSIFICATION	0.9999966299207299	WITHOUT_CLASSIFICATION	3.3700792700897877E-6	DEFECT
// If there are N slashes, then we want N-1.	WITHOUT_CLASSIFICATION	0.9999990572867029	WITHOUT_CLASSIFICATION	9.427132970677564E-7	DEFECT
// no canonical path yet or length is zero, and we have a / followed by a dot...	WITHOUT_CLASSIFICATION	0.9999923653248665	WITHOUT_CLASSIFICATION	7.634675133431794E-6	DEFECT
// we don't have another slash after this, so replace /. with /	WITHOUT_CLASSIFICATION	0.9999959633225878	WITHOUT_CLASSIFICATION	4.036677412245726E-6	DEFECT
// we do have another slash; omit both / and . (JRUBY-1606)	WITHOUT_CLASSIFICATION	0.9999997010505617	WITHOUT_CLASSIFICATION	2.9894943833778857E-7	DEFECT
// do nothing, we should not delete the drive letter	WITHOUT_CLASSIFICATION	0.9999779581350697	WITHOUT_CLASSIFICATION	2.2041864930316623E-5	DEFECT
/* rb: check_modifiable */	WITHOUT_CLASSIFICATION	0.9999696706435008	WITHOUT_CLASSIFICATION	3.0329356499167782E-5	DEFECT
/* rb: readable */	WITHOUT_CLASSIFICATION	0.9999708653266748	WITHOUT_CLASSIFICATION	2.9134673325249407E-5	DEFECT
// rename is successful	WITHOUT_CLASSIFICATION	0.999996283792642	WITHOUT_CLASSIFICATION	3.716207358006689E-6	DEFECT
// rename via Java API call wasn't successful, let's try some tricks, similar to MRI 	WITHOUT_CLASSIFICATION	0.9999996822386119	WITHOUT_CLASSIFICATION	3.177613880819464E-7	DEFECT
// try to rename one more time	WITHOUT_CLASSIFICATION	0.9999944786994768	WITHOUT_CLASSIFICATION	5.521300523159653E-6	DEFECT
// Can we produce IOError which bypasses a close?	WITHOUT_CLASSIFICATION	0.9999687665916347	WITHOUT_CLASSIFICATION	3.12334083652373E-5	DEFECT
// Fast path since JNA stat is about 10x slower than this	WITHOUT_CLASSIFICATION	0.9999929965801934	WITHOUT_CLASSIFICATION	7.003419806605646E-6	DEFECT
// RubyContinuation	WITHOUT_CLASSIFICATION	0.9999956172987332	WITHOUT_CLASSIFICATION	4.382701266716556E-6	DEFECT
/*     *  Constructor for internal usage (mainly for Array#|, Array#&, Array#- and Array#uniq)     *  it doesn't initialize ifNone field     */	WITHOUT_CLASSIFICATION	0.9999982914589333	WITHOUT_CLASSIFICATION	1.7085410668338458E-6	DEFECT
// 16 ?	WITHOUT_CLASSIFICATION	0.9999721588658805	WITHOUT_CLASSIFICATION	2.784113411945613E-5	DEFECT
// generation count for O(1) clears	WITHOUT_CLASSIFICATION	0.9999942295090123	WITHOUT_CLASSIFICATION	5.770490987670577E-6	DEFECT
// size + 1;	WITHOUT_CLASSIFICATION	0.9999934913516141	WITHOUT_CLASSIFICATION	6.5086483858918794E-6	DEFECT
// suboptimal for large hashes (> 1073741824 + 85 entries) not very likely to happen	WITHOUT_CLASSIFICATION	0.9999992278524024	WITHOUT_CLASSIFICATION	7.721475976677478E-7	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9999909608084487	WITHOUT_CLASSIFICATION	9.039191551276368E-6	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9999909608084487	WITHOUT_CLASSIFICATION	9.039191551276368E-6	DEFECT
// put implementation	WITHOUT_CLASSIFICATION	0.9999678803778719	WITHOUT_CLASSIFICATION	3.211962212814289E-5	DEFECT
// get implementation	WITHOUT_CLASSIFICATION	0.9999855880087974	WITHOUT_CLASSIFICATION	1.4411991202508387E-5	DEFECT
// specialized for value	WITHOUT_CLASSIFICATION	0.9999900847979325	WITHOUT_CLASSIFICATION	9.915202067491282E-6	DEFECT
// delete implementation	WITHOUT_CLASSIFICATION	0.9999935645639481	WITHOUT_CLASSIFICATION	6.435436051984427E-6	DEFECT
// n.b. we need to recompute the hash in case the key object was modified	WITHOUT_CLASSIFICATION	0.9999992849127846	WITHOUT_CLASSIFICATION	7.150872154063836E-7	DEFECT
/* ============================     * End of hash internals     * ============================     */	WITHOUT_CLASSIFICATION	0.9999974184068873	WITHOUT_CLASSIFICATION	2.5815931126157226E-6	DEFECT
/*  ================     *  Instance Methods     *  ================     */	WITHOUT_CLASSIFICATION	0.9999962967861804	WITHOUT_CLASSIFICATION	3.7032138195390787E-6	DEFECT
// update the hash value	WITHOUT_CLASSIFICATION	0.9999990982976497	WITHOUT_CLASSIFICATION	9.017023503513017E-7	DEFECT
// other hash does not contain key	WITHOUT_CLASSIFICATION	0.9999750647030379	WITHOUT_CLASSIFICATION	2.4935296962147954E-5	DEFECT
// rb_yield_values(2,...) equivalent	WITHOUT_CLASSIFICATION	0.9999994487838685	WITHOUT_CLASSIFICATION	5.512161315662564E-7	DEFECT
// Satisfy java.util.Set interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999994582051722	WITHOUT_CLASSIFICATION	5.417948277526581E-7	DEFECT
// remain where we are	WITHOUT_CLASSIFICATION	0.9999737961906551	WITHOUT_CLASSIFICATION	2.6203809344932642E-5	DEFECT
// We use file test since it is faster than a stat; also euid == uid in Java always	WITHOUT_CLASSIFICATION	0.9999999322228322	WITHOUT_CLASSIFICATION	6.777716775862004E-8	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9999326152705227	WITHOUT_CLASSIFICATION	6.738472947727883E-5	DEFECT
// once hasNext has been called, we commit to next() returning // the entry it found, even if it were subsequently deleted	WITHOUT_CLASSIFICATION	0.9999996867772034	WITHOUT_CLASSIFICATION	3.132227965782045E-7	DEFECT
// Not exposed by filetest, but so similiar in nature that it is stored here	WITHOUT_CLASSIFICATION	0.9999969664914828	WITHOUT_CLASSIFICATION	3.0335085172331515E-6	DEFECT
// We do both writable and writable_real through the same method because // in our java process effective and real userid will always be the same.	WITHOUT_CLASSIFICATION	0.9999999327073856	WITHOUT_CLASSIFICATION	6.729261438399776E-8	DEFECT
// first try as directory	WITHOUT_CLASSIFICATION	0.9999895090343408	WITHOUT_CLASSIFICATION	1.0490965659166323E-5	DEFECT
// next as regular file	WITHOUT_CLASSIFICATION	0.9999955087989212	WITHOUT_CLASSIFICATION	4.491201078809471E-6	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9999934171684537	WITHOUT_CLASSIFICATION	6.5828315462552E-6	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999968681627198	WITHOUT_CLASSIFICATION	3.1318372802345294E-6	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999968681627198	WITHOUT_CLASSIFICATION	3.1318372802345294E-6	DEFECT
// Stream-based	WITHOUT_CLASSIFICATION	0.999998972545458	WITHOUT_CLASSIFICATION	1.027454541984083E-6	DEFECT
// special constructor that accepts stream, not channel	WITHOUT_CLASSIFICATION	0.9999959306092442	WITHOUT_CLASSIFICATION	4.06939075578021E-6	DEFECT
/*     * We use FILE versus IO to match T_FILE in MRI.     */	WITHOUT_CLASSIFICATION	0.999979353418483	WITHOUT_CLASSIFICATION	2.064658151696957E-5	DEFECT
// Constants for seek	WITHOUT_CLASSIFICATION	0.9999977358134531	WITHOUT_CLASSIFICATION	2.2641865469975786E-6	DEFECT
// confirm we're not reopening self's channel	WITHOUT_CLASSIFICATION	0.9999968163439027	WITHOUT_CLASSIFICATION	3.183656097356788E-6	DEFECT
// check if we're a stdio IO, and ensure we're not badly mutilated	WITHOUT_CLASSIFICATION	0.9999939296781	WITHOUT_CLASSIFICATION	6.070321900066898E-6	DEFECT
// dup2 new fd into self to preserve fileno and references to it	WITHOUT_CLASSIFICATION	0.9999998557452621	WITHOUT_CLASSIFICATION	1.442547378780277E-7	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.999999874911299	WITHOUT_CLASSIFICATION	1.2508870100302819E-7	DEFECT
// re-register the descriptor	WITHOUT_CLASSIFICATION	0.9999995782462321	WITHOUT_CLASSIFICATION	4.217537678951133E-7	DEFECT
// since we're not actually duping the incoming channel into our handler, we need to // copy the original sync behavior from the other handler	WITHOUT_CLASSIFICATION	0.9999998499224777	WITHOUT_CLASSIFICATION	1.500775224064604E-7	DEFECT
// re-register	WITHOUT_CLASSIFICATION	0.9999979002349672	WITHOUT_CLASSIFICATION	2.099765032783046E-6	DEFECT
// A potentially previously close IO is being 'reopened'.	WITHOUT_CLASSIFICATION	0.9999963650525777	WITHOUT_CLASSIFICATION	3.6349474223753758E-6	DEFECT
/*     * Ensure that separator is valid otherwise give it the default paragraph separator.     */	WITHOUT_CLASSIFICATION	0.9999990745128774	WITHOUT_CLASSIFICATION	9.254871225551179E-7	DEFECT
// loop until we see the nth separator char	WITHOUT_CLASSIFICATION	0.9999998630159757	WITHOUT_CLASSIFICATION	1.3698402437054852E-7	DEFECT
// if we hit EOF or reached limit then we're done	WITHOUT_CLASSIFICATION	0.9999553179131936	WITHOUT_CLASSIFICATION	4.4682086806394636E-5	DEFECT
// this is for a range check, near as I can tell	WITHOUT_CLASSIFICATION	0.9999354433565273	WITHOUT_CLASSIFICATION	6.455664347268496E-5	DEFECT
// IO class methods.	WITHOUT_CLASSIFICATION	0.9999967680923553	WITHOUT_CLASSIFICATION	3.2319076446079055E-6	DEFECT
// use original modes	WITHOUT_CLASSIFICATION	0.9999995374332269	WITHOUT_CLASSIFICATION	4.625667731668987E-7	DEFECT
// See if we already have this descriptor open. // If so then we can mostly share the handler (keep open // file, but possibly change the mode).	WITHOUT_CLASSIFICATION	0.9999990131129697	WITHOUT_CLASSIFICATION	9.86887030389608E-7	DEFECT
// redundant, done above as well	WITHOUT_CLASSIFICATION	0.999999166592801	WITHOUT_CLASSIFICATION	8.33407198885356E-7	DEFECT
// MRI behavior: swallow StandardErorrs	WITHOUT_CLASSIFICATION	0.9999954335831224	WITHOUT_CLASSIFICATION	4.566416877585975E-6	DEFECT
// -1 == don't set permissions	WITHOUT_CLASSIFICATION	0.9999870297796077	WITHOUT_CLASSIFICATION	1.297022039235429E-5	DEFECT
// isRetained=true	WITHOUT_CLASSIFICATION	0.9999888801554243	WITHOUT_CLASSIFICATION	1.1119844575591868E-5	DEFECT
// This appears to be some windows-only mode.  On a java platform this is a no-op	WITHOUT_CLASSIFICATION	0.9997256164181686	WITHOUT_CLASSIFICATION	2.743835818313692E-4	DEFECT
// if not sync, we switch to write buffered mode	WITHOUT_CLASSIFICATION	0.9999364539325184	WITHOUT_CLASSIFICATION	6.354606748157605E-5	DEFECT
/*     * Throw bad file descriptor is we can not read on supplied descriptor.     */	WITHOUT_CLASSIFICATION	0.999330613059381	WITHOUT_CLASSIFICATION	6.693869406190864E-4	DEFECT
//Everything written	WITHOUT_CLASSIFICATION	0.9999747728355118	WITHOUT_CLASSIFICATION	2.5227164488150735E-5	DEFECT
//            return len - n;	WITHOUT_CLASSIFICATION	0.9999961895618035	WITHOUT_CLASSIFICATION	3.8104381965779573E-6	DEFECT
// Claims conversion is done via 'to_s' in docs.	WITHOUT_CLASSIFICATION	0.9999864326841775	WITHOUT_CLASSIFICATION	1.3567315822395848E-5	DEFECT
// Of course this isn't particularly useful.	WITHOUT_CLASSIFICATION	0.9998987285503428	WITHOUT_CLASSIFICATION	1.0127144965718882E-4	DEFECT
// Must be back on first line on rewind.	WITHOUT_CLASSIFICATION	0.999994715327026	WITHOUT_CLASSIFICATION	5.28467297402725E-6	DEFECT
// Register the new descriptor	WITHOUT_CLASSIFICATION	0.9999996888539117	WITHOUT_CLASSIFICATION	3.111460883893072E-7	DEFECT
// cleanup, raising errors if any	WITHOUT_CLASSIFICATION	0.999996416967642	WITHOUT_CLASSIFICATION	3.583032358118611E-6	DEFECT
// hmmmm	WITHOUT_CLASSIFICATION	0.9999903138151255	WITHOUT_CLASSIFICATION	9.686184874487008E-6	DEFECT
// I believe Ruby bails out with a "bug" if closing fails	WITHOUT_CLASSIFICATION	0.999998967955631	WITHOUT_CLASSIFICATION	1.0320443690014937E-6	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec. // And why the hell does webrick pass this in as a first argument!!!!!	WITHOUT_CLASSIFICATION	0.9998286361706543	WITHOUT_CLASSIFICATION	1.7136382934579E-4	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec.	WITHOUT_CLASSIFICATION	0.9996826638508752	WITHOUT_CLASSIFICATION	3.173361491247815E-4	DEFECT
// Length to read	WITHOUT_CLASSIFICATION	0.9999985624048577	WITHOUT_CLASSIFICATION	1.4375951422488468E-6	DEFECT
// String/Buffer to read it into	WITHOUT_CLASSIFICATION	0.9999800645451727	WITHOUT_CLASSIFICATION	1.9935454827243395E-5	DEFECT
// cryptic for the uninitiated...	WITHOUT_CLASSIFICATION	0.9999997954239092	WITHOUT_CLASSIFICATION	2.045760908881001E-7	DEFECT
// select until read is ready	WITHOUT_CLASSIFICATION	0.9999745975922171	WITHOUT_CLASSIFICATION	2.540240778301333E-5	DEFECT
//        ByteList buffer = null;	WITHOUT_CLASSIFICATION	0.9999838672725853	WITHOUT_CLASSIFICATION	1.613272741470159E-5	DEFECT
//            buffer = str.getByteList();	WITHOUT_CLASSIFICATION	0.9999930013644248	WITHOUT_CLASSIFICATION	6.998635575245817E-6	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9998970676344808	WITHOUT_CLASSIFICATION	1.0293236551909807E-4	DEFECT
/* rb: writable */	WITHOUT_CLASSIFICATION	0.9999807556733489	WITHOUT_CLASSIFICATION	1.9244326651089316E-5	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9998970676344808	WITHOUT_CLASSIFICATION	1.0293236551909807E-4	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9988030972045314	WITHOUT_CLASSIFICATION	0.0011969027954685967	DEFECT
// TODO: read into buffer using all the fread logic //        int read = openFile.getMainStream().fread(buffer);	WITHOUT_CLASSIFICATION	0.9867832646033887	WITHOUT_CLASSIFICATION	0.013216735396611161	DEFECT
// truncate buffer string to zero, if provided	WITHOUT_CLASSIFICATION	0.9999994291840332	WITHOUT_CLASSIFICATION	5.708159668144454E-7	DEFECT
// TODO: READ_CHECK from MRI	WITHOUT_CLASSIFICATION	0.7395349553962748	DEFECT	0.2604650446037251	WITHOUT_CLASSIFICATION
/* class methods for IO */	WITHOUT_CLASSIFICATION	0.9999919420388815	WITHOUT_CLASSIFICATION	8.057961118464627E-6	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999957414694463	WITHOUT_CLASSIFICATION	4.258530553792218E-6	DEFECT
// write	WITHOUT_CLASSIFICATION	0.9999972591395746	WITHOUT_CLASSIFICATION	2.7408604253792495E-6	DEFECT
// Java's select doesn't do anything about this, so we leave it be.	WITHOUT_CLASSIFICATION	0.9999931362086497	WITHOUT_CLASSIFICATION	6.863791350234005E-6	DEFECT
// make all sockets blocking as configured again // close unregisters all channels, so we can safely reset blocking modes	WITHOUT_CLASSIFICATION	0.9999907690683286	WITHOUT_CLASSIFICATION	9.230931671387069E-6	DEFECT
// FIXME: process options	WITHOUT_CLASSIFICATION	0.9925432741790033	WITHOUT_CLASSIFICATION	0.007456725820996546	DEFECT
// Enebo: annotation processing forced me to do pangea method here...	WITHOUT_CLASSIFICATION	0.9999659348738241	WITHOUT_CLASSIFICATION	3.406512617588619E-5	DEFECT
// NIO based pipe	WITHOUT_CLASSIFICATION	0.9999922005580648	WITHOUT_CLASSIFICATION	7.799441935180092E-6	DEFECT
// not using remove(Object) here to avoid the equals() call	WITHOUT_CLASSIFICATION	0.9999986659343598	WITHOUT_CLASSIFICATION	1.3340656401801814E-6	DEFECT
// raise will also wake the thread from selection	WITHOUT_CLASSIFICATION	0.9999935926926362	WITHOUT_CLASSIFICATION	6.407307363676894E-6	DEFECT
/* may need to handle ENC_CODERANGE_BROKEN */	WITHOUT_CLASSIFICATION	0.9999926591980005	WITHOUT_CLASSIFICATION	7.340801999378751E-6	DEFECT
// TODO: rb_usascii_str_new2	WITHOUT_CLASSIFICATION	0.8486445890909403	WITHOUT_CLASSIFICATION	0.15135541090905966	DEFECT
// If we know what method was being called, strip everything // before the call. This hides the JRuby and reflection internals.	WITHOUT_CLASSIFICATION	0.9999975417208774	WITHOUT_CLASSIFICATION	2.4582791225598038E-6	DEFECT
// The class of this object	WITHOUT_CLASSIFICATION	0.9999454980454123	WITHOUT_CLASSIFICATION	5.4501954587763055E-5	DEFECT
// zeroed by jvm	WITHOUT_CLASSIFICATION	0.9999929851884823	WITHOUT_CLASSIFICATION	7.0148115177275E-6	DEFECT
//objectClass.defineAnnotatedMethods(BasicObjectMethods.class);	WITHOUT_CLASSIFICATION	0.9999866970361246	WITHOUT_CLASSIFICATION	1.3302963875332869E-5	DEFECT
// JRUBY-4113: callers should not call setTaint on immediate objects	WITHOUT_CLASSIFICATION	0.9999714140868223	WITHOUT_CLASSIFICATION	2.8585913177693935E-5	DEFECT
// rb_class_boot	WITHOUT_CLASSIFICATION	0.9999981973256276	WITHOUT_CLASSIFICATION	1.802674372464832E-6	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.999982698809357	WITHOUT_CLASSIFICATION	1.730119064307777E-5	DEFECT
// 1.9 rb_check_to_integer	WITHOUT_CLASSIFICATION	0.9999957303582634	WITHOUT_CLASSIFICATION	4.269641736580909E-6	DEFECT
// for interface impls	WITHOUT_CLASSIFICATION	0.9999978491114447	WITHOUT_CLASSIFICATION	2.1508885551965113E-6	DEFECT
// We're cloning ourselves, so we know the result should be a RubyObject	WITHOUT_CLASSIFICATION	0.9999916951257839	WITHOUT_CLASSIFICATION	8.304874216168632E-6	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.999994963808383	WITHOUT_CLASSIFICATION	5.036191617004601E-6	DEFECT
// can't use -v and stdin	WITHOUT_CLASSIFICATION	0.9999974345123381	WITHOUT_CLASSIFICATION	2.5654876618277874E-6	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.999997624141782	WITHOUT_CLASSIFICATION	2.3758582181672156E-6	DEFECT
// Equivalent of Data_Get_Struct // This will first check that the object in question is actually a T_DATA equivalent.	WITHOUT_CLASSIFICATION	0.9989096519333761	WITHOUT_CLASSIFICATION	0.0010903480666238875	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999208951388234	WITHOUT_CLASSIFICATION	7.910486117663354E-5	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999302082466692	WITHOUT_CLASSIFICATION	6.979175333073863E-5	DEFECT
// // INSTANCE VARIABLE API METHODS //	WITHOUT_CLASSIFICATION	0.9999371084332793	WITHOUT_CLASSIFICATION	6.289156672068846E-5	DEFECT
// Struct methods	WITHOUT_CLASSIFICATION	0.9999964174812606	WITHOUT_CLASSIFICATION	3.582518739365495E-6	DEFECT
//runtime.getWarnings().warn(ID.STRUCT_CONSTANT_REDEFINED, frame.getFile(), frame.getLine(), "redefining constant Struct::" + name, name);	WITHOUT_CLASSIFICATION	0.9999839147583904	WITHOUT_CLASSIFICATION	1.6085241609506527E-5	DEFECT
// define access methods.	WITHOUT_CLASSIFICATION	0.9999980957301329	WITHOUT_CLASSIFICATION	1.9042698671861382E-6	DEFECT
// if we are storing a name as well, index is one too high for values	WITHOUT_CLASSIFICATION	0.9999962212889568	WITHOUT_CLASSIFICATION	3.778711043182237E-6	DEFECT
// Struct bodies should be public by default, so set block visibility to public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999996234475806	WITHOUT_CLASSIFICATION	3.7655241930794026E-7	DEFECT
// For binding purposes on the newly created struct types	WITHOUT_CLASSIFICATION	0.9999985398624569	WITHOUT_CLASSIFICATION	1.4601375431779054E-6	DEFECT
// OBJ_INFECT        	WITHOUT_CLASSIFICATION	0.9998431055702267	WITHOUT_CLASSIFICATION	1.5689442977329899E-4	DEFECT
// These call* assume ThreadContext = receiver.getRuntime().getCurrentContext()	WITHOUT_CLASSIFICATION	0.9999869821226852	WITHOUT_CLASSIFICATION	1.3017877314823107E-5	DEFECT
// Execute iterateMethod again.	WITHOUT_CLASSIFICATION	0.9999880797315988	WITHOUT_CLASSIFICATION	1.192026840130375E-5	DEFECT
/*     * @param nv number of times to cycle or -1 to cycle indefinitely     */	WITHOUT_CLASSIFICATION	0.9999996947588691	WITHOUT_CLASSIFICATION	3.052411309402993E-7	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.999979436062462	WITHOUT_CLASSIFICATION	2.056393753799036E-5	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.999979436062462	WITHOUT_CLASSIFICATION	2.056393753799036E-5	DEFECT
// MUST NOT be used across threads	WITHOUT_CLASSIFICATION	0.9999705808719278	WITHOUT_CLASSIFICATION	2.9419128072183064E-5	DEFECT
// superClass may be null.	WITHOUT_CLASSIFICATION	0.9999945324397772	WITHOUT_CLASSIFICATION	5.467560222818757E-6	DEFECT
// Containing class...The parent of Object is null. Object should always be last in chain.	WITHOUT_CLASSIFICATION	0.9999944401517136	WITHOUT_CLASSIFICATION	5.559848286429243E-6	DEFECT
// ClassId is the name of the class/module sans where it is located. // If it is null, then it an anonymous class.	WITHOUT_CLASSIFICATION	0.9999963683597282	WITHOUT_CLASSIFICATION	3.6316402718804486E-6	DEFECT
// ClassProviders return Java class/module (in #defineOrGetClassUnder and // #defineOrGetModuleUnder) when class/module is opened using colon syntax. 	WITHOUT_CLASSIFICATION	0.9999989947213928	WITHOUT_CLASSIFICATION	1.005278607200788E-6	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.999999299645663	WITHOUT_CLASSIFICATION	7.003543369458842E-7	DEFECT
// Make sure the module we include does not already exist	WITHOUT_CLASSIFICATION	0.9999489664279746	WITHOUT_CLASSIFICATION	5.103357202536311E-5	DEFECT
// MRI checks all types first:	WITHOUT_CLASSIFICATION	0.9999644125202124	WITHOUT_CLASSIFICATION	3.558747978754704E-5	DEFECT
// we need full traces, use default (slow) populator	WITHOUT_CLASSIFICATION	0.9999999144084826	WITHOUT_CLASSIFICATION	8.559151738398858E-8	DEFECT
// module/singleton methods are all defined public	WITHOUT_CLASSIFICATION	0.9999992701590497	WITHOUT_CLASSIFICATION	7.298409503407987E-7	DEFECT
// See if module is in chain...Cannot match against itself so start at superClass.	WITHOUT_CLASSIFICATION	0.9999995787271045	WITHOUT_CLASSIFICATION	4.2127289538204424E-7	DEFECT
// We can safely reference methods here instead of doing getMethods() since if we // are adding we are not using a IncludedModuleWrapper.	WITHOUT_CLASSIFICATION	0.9995158913287022	WITHOUT_CLASSIFICATION	4.841086712977652E-4	DEFECT
// we grab serial number first; the worst that will happen is we cache a later // update with an earlier serial number, which would just flush anyway	WITHOUT_CLASSIFICATION	0.9999372886661443	WITHOUT_CLASSIFICATION	6.271133385572555E-5	DEFECT
// update all hierarchies into which this module has been included	WITHOUT_CLASSIFICATION	0.9999995156246793	WITHOUT_CLASSIFICATION	4.843753206792706E-7	DEFECT
// This method is intended only for defining new classes in Ruby code, // so it uses the allocator of the specified superclass or default to // the Object allocator. It should NOT be used to define classes that require a native allocator.	WITHOUT_CLASSIFICATION	0.999999694400728	WITHOUT_CLASSIFICATION	3.0559927204660755E-7	DEFECT
// need to skip IncludedModuleWrappers	WITHOUT_CLASSIFICATION	0.9999973513803475	WITHOUT_CLASSIFICATION	2.6486196524356833E-6	DEFECT
// superClazz = null;	WITHOUT_CLASSIFICATION	0.9999953608166054	WITHOUT_CLASSIFICATION	4.639183394500771E-6	DEFECT
// reopen a java class	WITHOUT_CLASSIFICATION	0.9999994517606673	WITHOUT_CLASSIFICATION	5.482393326562227E-7	DEFECT
// This method is intended only for defining new modules in Ruby code	WITHOUT_CLASSIFICATION	0.999996293450851	WITHOUT_CLASSIFICATION	3.706549149016702E-6	DEFECT
// reopen a java module	WITHOUT_CLASSIFICATION	0.9999991762100852	WITHOUT_CLASSIFICATION	8.237899148840344E-7	DEFECT
//FIXME warning	WITHOUT_CLASSIFICATION	0.9933597262896727	WITHOUT_CLASSIFICATION	0.0066402737103272505	DEFECT
// FIXME warning	WITHOUT_CLASSIFICATION	0.9904152977741043	WITHOUT_CLASSIFICATION	0.00958470222589565	DEFECT
// a normal block passed to define_method changes to do arity checking; make it a lambda	WITHOUT_CLASSIFICATION	0.9999963413450207	WITHOUT_CLASSIFICATION	3.658654979336766E-6	DEFECT
// for zsupers in define_method (blech!) we tell the proc scope to act as the "argument" scope	WITHOUT_CLASSIFICATION	0.9999996817218607	WITHOUT_CLASSIFICATION	3.1827813923290107E-7	DEFECT
// just using required is broken...but no more broken than before zsuper refactoring	WITHOUT_CLASSIFICATION	0.9999992363119099	WITHOUT_CLASSIFICATION	7.636880899841497E-7	DEFECT
// class and module bodies default to public, so make the block's visibility public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999999919001135	WITHOUT_CLASSIFICATION	8.099886522640549E-9	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999983563976784	WITHOUT_CLASSIFICATION	1.6436023216121214E-6	DEFECT
// MRI error message says Class, even though Module is ok 	WITHOUT_CLASSIFICATION	0.9999906372470747	WITHOUT_CLASSIFICATION	9.362752925328294E-6	DEFECT
// scan class hierarchy for module	WITHOUT_CLASSIFICATION	0.9999988199659331	WITHOUT_CLASSIFICATION	1.1800340668755903E-6	DEFECT
/* Module class methods */	WITHOUT_CLASSIFICATION	0.9999946979681972	WITHOUT_CLASSIFICATION	5.302031802818021E-6	DEFECT
// Note: we change current frames visibility here because the methods which call // this method are all "fast" (e.g. they do not created their own frame).	WITHOUT_CLASSIFICATION	0.9999946484590889	WITHOUT_CLASSIFICATION	5.35154091113061E-6	DEFECT
// next in hierarchy is an included version of the module we're attempting, // so we skip including it	WITHOUT_CLASSIFICATION	0.9999500273262384	WITHOUT_CLASSIFICATION	4.997267376162757E-5	DEFECT
// if we haven't encountered a real superclass, use the found module as the new inclusion point	WITHOUT_CLASSIFICATION	0.9999999138091223	WITHOUT_CLASSIFICATION	8.619087771504532E-8	DEFECT
// build a list of all modules to consider for inclusion	WITHOUT_CLASSIFICATION	0.9999986347469595	WITHOUT_CLASSIFICATION	1.365253040457278E-6	DEFECT
// if the insertion point is a class, update subclass lists	WITHOUT_CLASSIFICATION	0.999999784488084	WITHOUT_CLASSIFICATION	2.1551191602256074E-7	DEFECT
// if there's a non-null superclass, we're including into a normal class hierarchy; // update subclass relationships to avoid stale parent/child relationships	WITHOUT_CLASSIFICATION	0.9999987865562372	WITHOUT_CLASSIFICATION	1.2134437628111478E-6	DEFECT
// ////////////////// CLASS VARIABLE RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999370156783031	WITHOUT_CLASSIFICATION	6.298432169687201E-5	DEFECT
// ////////////////// CONSTANT RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999687111011584	WITHOUT_CLASSIFICATION	3.128889884156837E-5	DEFECT
// Note: includes part of fix for JRUBY-1339	WITHOUT_CLASSIFICATION	0.9997586682943431	WITHOUT_CLASSIFICATION	2.4133170565685476E-4	DEFECT
// ////////////////// CLASS VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999482034354571	WITHOUT_CLASSIFICATION	5.179656454286246E-5	DEFECT
// Wrong Parameter ?	WITHOUT_CLASSIFICATION	0.9999968331026531	WITHOUT_CLASSIFICATION	3.166897346932881E-6	DEFECT
// not actually called anywhere (all known uses call the fast version)	WITHOUT_CLASSIFICATION	0.9999958027658157	WITHOUT_CLASSIFICATION	4.197234184295498E-6	DEFECT
// Not that is loaded loop around to resolve it next pass	WITHOUT_CLASSIFICATION	0.9999989546233351	WITHOUT_CLASSIFICATION	1.0453766649525862E-6	DEFECT
// if adding a module under a constant name, set that module's basename to the constant name	WITHOUT_CLASSIFICATION	0.9999998597581967	WITHOUT_CLASSIFICATION	1.4024180331835195E-7	DEFECT
// Fix for JRUBY-1339 - search hierarchy for constant	WITHOUT_CLASSIFICATION	0.9999860076682165	WITHOUT_CLASSIFICATION	1.3992331783364294E-5	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999998581915462	WITHOUT_CLASSIFICATION	1.4180845371089815E-7	DEFECT
// removes and returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999999036288871	WITHOUT_CLASSIFICATION	9.637111285222468E-8	DEFECT
// we can't rename a file while it's open in windows	WITHOUT_CLASSIFICATION	0.9999759652833554	WITHOUT_CLASSIFICATION	2.4034716644603683E-5	DEFECT
//reopen	WITHOUT_CLASSIFICATION	0.9999590561923241	WITHOUT_CLASSIFICATION	4.094380767597876E-5	DEFECT
// ARGF methods	WITHOUT_CLASSIFICATION	0.9999975812884224	WITHOUT_CLASSIFICATION	2.41871157751704E-6	DEFECT
//         data.currentFile.callMethod(context, "lineno=", line);	WITHOUT_CLASSIFICATION	0.999999140048131	WITHOUT_CLASSIFICATION	8.599518689811713E-7	DEFECT
// one optional, one required args	WITHOUT_CLASSIFICATION	0.9999998421906341	WITHOUT_CLASSIFICATION	1.5780936589563015E-7	DEFECT
// one optional and no required args	WITHOUT_CLASSIFICATION	0.9999998930020053	WITHOUT_CLASSIFICATION	1.0699799473542914E-7	DEFECT
// try to get errno value out of the class	WITHOUT_CLASSIFICATION	0.9999994755860256	WITHOUT_CLASSIFICATION	5.244139744215311E-7	DEFECT
// we got a valid errno value	WITHOUT_CLASSIFICATION	0.9999873348991513	WITHOUT_CLASSIFICATION	1.2665100848707979E-5	DEFECT
// Ensure we're not running on GCJ, since it's not supported and leads to weird errors	WITHOUT_CLASSIFICATION	0.9999630349674603	WITHOUT_CLASSIFICATION	3.696503253960412E-5	DEFECT
// print out as a nice Ruby backtrace	WITHOUT_CLASSIFICATION	0.9999995384911471	WITHOUT_CLASSIFICATION	4.615088529312851E-7	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999501889716843	WITHOUT_CLASSIFICATION	4.981102831575784E-5	DEFECT
// set thread context JRuby classloader here, for the main thread	WITHOUT_CLASSIFICATION	0.9999996466980372	WITHOUT_CLASSIFICATION	3.5330196279187124E-7	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.999969277846317	WITHOUT_CLASSIFICATION	3.072215368309548E-5	DEFECT
// no script to run, return success below	WITHOUT_CLASSIFICATION	0.999999638512106	WITHOUT_CLASSIFICATION	3.614878939562599E-7	DEFECT
// Skip /usr/bin/env if it's first	WITHOUT_CLASSIFICATION	0.9999975109833745	WITHOUT_CLASSIFICATION	2.4890166254993597E-6	DEFECT
// Skip any assignments if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9999997370395365	WITHOUT_CLASSIFICATION	2.629604634317675E-7	DEFECT
// Skip any commandline args if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9999993364402197	WITHOUT_CLASSIFICATION	6.635597803687571E-7	DEFECT
// ignore error	WITHOUT_CLASSIFICATION	0.9999445407888888	WITHOUT_CLASSIFICATION	5.545921111113909E-5	DEFECT
// ////////////////// COMMON CONSTANT / CVAR METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999663108208444	WITHOUT_CLASSIFICATION	3.368917915564631E-5	DEFECT
// ////////////////// INTERNAL MODULE VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999668860376049	WITHOUT_CLASSIFICATION	3.311396239510135E-5	DEFECT
// ////////////////// LOW-LEVEL CONSTANT INTERFACE //////////////// // // fetch/store/list constants for this module //	WITHOUT_CLASSIFICATION	0.9999967775925717	WITHOUT_CLASSIFICATION	3.2224074283780114E-6	DEFECT
// odd	WITHOUT_CLASSIFICATION	0.9999953417784966	WITHOUT_CLASSIFICATION	4.658221503467689E-6	DEFECT
// JRubyClient	WITHOUT_CLASSIFICATION	0.9999953203506775	WITHOUT_CLASSIFICATION	4.679649322416724E-6	DEFECT
/*     * x = mantissa * 2 ** exponent     *     * Where mantissa is in the range of [.5, 1)     *     */	WITHOUT_CLASSIFICATION	0.9999967417446315	WITHOUT_CLASSIFICATION	3.258255368574639E-6	DEFECT
// Make mantissa same sign so we only have one code path.	WITHOUT_CLASSIFICATION	0.9999976602396347	WITHOUT_CLASSIFICATION	2.339760365303692E-6	DEFECT
// Increase value to hit lower range.	WITHOUT_CLASSIFICATION	0.9999997862232474	WITHOUT_CLASSIFICATION	2.1377675249071353E-7	DEFECT
/*     * r = x * 2 ** y     */	WITHOUT_CLASSIFICATION	0.9998969290468911	WITHOUT_CLASSIFICATION	1.0307095310899231E-4	DEFECT
/*  0! */	WITHOUT_CLASSIFICATION	0.9999715265423732	WITHOUT_CLASSIFICATION	2.847345762677552E-5	DEFECT
/*  1! */	WITHOUT_CLASSIFICATION	0.9999651222670807	WITHOUT_CLASSIFICATION	3.487773291927857E-5	DEFECT
/*  2! */	WITHOUT_CLASSIFICATION	0.9999718977134157	WITHOUT_CLASSIFICATION	2.8102286584357756E-5	DEFECT
/*  3! */	WITHOUT_CLASSIFICATION	0.9999696591439651	WITHOUT_CLASSIFICATION	3.0340856034866176E-5	DEFECT
/*  4! */	WITHOUT_CLASSIFICATION	0.999964564370915	WITHOUT_CLASSIFICATION	3.54356290850236E-5	DEFECT
/*  5! */	WITHOUT_CLASSIFICATION	0.9999652216756488	WITHOUT_CLASSIFICATION	3.4778324351183313E-5	DEFECT
/*  6! */	WITHOUT_CLASSIFICATION	0.9999629741281356	WITHOUT_CLASSIFICATION	3.7025871864328365E-5	DEFECT
/*  7! */	WITHOUT_CLASSIFICATION	0.9999652769980517	WITHOUT_CLASSIFICATION	3.472300194831005E-5	DEFECT
/*  8! */	WITHOUT_CLASSIFICATION	0.9999718279632609	WITHOUT_CLASSIFICATION	2.8172036739128847E-5	DEFECT
/*  9! */	WITHOUT_CLASSIFICATION	0.9999653030329301	WITHOUT_CLASSIFICATION	3.469696706985375E-5	DEFECT
/* 11! */	WITHOUT_CLASSIFICATION	0.9999676003764262	WITHOUT_CLASSIFICATION	3.239962357379549E-5	DEFECT
/* 12! */	WITHOUT_CLASSIFICATION	0.9999645003359979	WITHOUT_CLASSIFICATION	3.5499664002074184E-5	DEFECT
/* 13! */	WITHOUT_CLASSIFICATION	0.999967377750825	WITHOUT_CLASSIFICATION	3.262224917497924E-5	DEFECT
/* 15! */	WITHOUT_CLASSIFICATION	0.9999626057609582	WITHOUT_CLASSIFICATION	3.7394239041771615E-5	DEFECT
/* 16! */	WITHOUT_CLASSIFICATION	0.9999618121014028	WITHOUT_CLASSIFICATION	3.8187898597258966E-5	DEFECT
/* 17! */	WITHOUT_CLASSIFICATION	0.9999639180810177	WITHOUT_CLASSIFICATION	3.60819189822756E-5	DEFECT
/* 19! */	WITHOUT_CLASSIFICATION	0.9999639955866919	WITHOUT_CLASSIFICATION	3.600441330808242E-5	DEFECT
/* 20! */	WITHOUT_CLASSIFICATION	0.9999757791336228	WITHOUT_CLASSIFICATION	2.4220866377259087E-5	DEFECT
/* 21! */	WITHOUT_CLASSIFICATION	0.9999756755454784	WITHOUT_CLASSIFICATION	2.432445452168979E-5	DEFECT
// Static constants	WITHOUT_CLASSIFICATION	0.9999977408819283	WITHOUT_CLASSIFICATION	2.25911807175754E-6	DEFECT
// Clean-up string representation so that it could be understood // by Java's BigDecimal. Not terribly efficient for now. // 1. MRI allows d and D as exponent separators	WITHOUT_CLASSIFICATION	0.9999996710126654	WITHOUT_CLASSIFICATION	3.289873345425013E-7	DEFECT
// 2. MRI allows underscores anywhere	WITHOUT_CLASSIFICATION	0.9999981040790036	WITHOUT_CLASSIFICATION	1.8959209963463347E-6	DEFECT
// 3. MRI ignores the trailing junk	WITHOUT_CLASSIFICATION	0.9999987057498213	WITHOUT_CLASSIFICATION	1.2942501786503959E-6	DEFECT
// MRI behavior: -0 and +0 are two different things	WITHOUT_CLASSIFICATION	0.9999963718995422	WITHOUT_CLASSIFICATION	3.6281004577740584E-6	DEFECT
// Java and MRI definitions of modulo are different.	WITHOUT_CLASSIFICATION	0.9999996869871058	WITHOUT_CLASSIFICATION	3.1301289409016617E-7	DEFECT
// Java and MRI definitions of remainder are the same.	WITHOUT_CLASSIFICATION	0.9999997235642866	WITHOUT_CLASSIFICATION	2.764357134559456E-7	DEFECT
// Note: MRI has a very non-trivial way of calculating the precision, // so we use very simple approximation here:	WITHOUT_CLASSIFICATION	0.9999936636832348	WITHOUT_CLASSIFICATION	6.33631676520814E-6	DEFECT
// Iteration variables, for the square root x and the reciprocal v // initial x:  x0 ~ sqrt() // initial v:  v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9999987835245175	WITHOUT_CLASSIFICATION	1.2164754824108727E-6	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9999984671115941	WITHOUT_CLASSIFICATION	1.5328884058502317E-6	DEFECT
// TODO: why this: .setResult();	WITHOUT_CLASSIFICATION	0.5337152485635017	WITHOUT_CLASSIFICATION	0.4662847514364983	DEFECT
// integer division	WITHOUT_CLASSIFICATION	0.9999987561273159	WITHOUT_CLASSIFICATION	1.2438726840631773E-6	DEFECT
// MRI behavior: "If digits is 0, the result is the same as the / operator."	WITHOUT_CLASSIFICATION	0.9999966976518644	WITHOUT_CLASSIFICATION	3.3023481356811703E-6	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999980471483962	WITHOUT_CLASSIFICATION	1.9528516037019627E-6	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999980471483962	WITHOUT_CLASSIFICATION	1.9528516037019627E-6	DEFECT
// Java and MRI definitions of divmod are different.        	WITHOUT_CLASSIFICATION	0.9999995437577355	WITHOUT_CLASSIFICATION	4.562422646107413E-7	DEFECT
// JRUBY-914: Java 1.4 BigDecimal does not allow a negative scale, so we have to simulate it	WITHOUT_CLASSIFICATION	0.9999889251843667	WITHOUT_CLASSIFICATION	1.1074815633451059E-5	DEFECT
// shift the decimal point just to the right of the digit to be rounded to (divide by 10**(abs(scale))) // -1 -> 10's digit, -2 -> 100's digit, etc.	WITHOUT_CLASSIFICATION	0.999999996735409	WITHOUT_CLASSIFICATION	3.2645909386819157E-9	DEFECT
// ...round to that digit	WITHOUT_CLASSIFICATION	0.9999980591262483	WITHOUT_CLASSIFICATION	1.940873751685425E-6	DEFECT
// ...and shift the result back to the left (multiply by 10**(abs(scale)))	WITHOUT_CLASSIFICATION	0.9999998588300765	WITHOUT_CLASSIFICATION	1.4116992361852903E-7	DEFECT
//this relies on the Ruby rounding enumerations == Java ones, which they (currently) all are	WITHOUT_CLASSIFICATION	0.9999982869414042	WITHOUT_CLASSIFICATION	1.71305859579871E-6	DEFECT
// sign	WITHOUT_CLASSIFICATION	0.9999983062609626	WITHOUT_CLASSIFICATION	1.6937390373099434E-6	DEFECT
// significant digits and exponent	WITHOUT_CLASSIFICATION	0.9999997264636207	WITHOUT_CLASSIFICATION	2.7353637935932413E-7	DEFECT
// normalize the value	WITHOUT_CLASSIFICATION	0.9999584987161653	WITHOUT_CLASSIFICATION	4.15012838346911E-5	DEFECT
// base	WITHOUT_CLASSIFICATION	0.999996395669368	WITHOUT_CLASSIFICATION	3.60433063186858E-6	DEFECT
// NOTE: MRI's sqrt precision is limited by 100, // but we allow values more than 100.	WITHOUT_CLASSIFICATION	0.9998791584203611	WITHOUT_CLASSIFICATION	1.208415796388565E-4	DEFECT
// just in case, add a bit of extra precision	WITHOUT_CLASSIFICATION	0.9999989309821387	WITHOUT_CLASSIFICATION	1.0690178613632555E-6	DEFECT
// eh?!	WITHOUT_CLASSIFICATION	0.9999854955585944	WITHOUT_CLASSIFICATION	1.4504441405606736E-5	DEFECT
// Note: #fix has only no-arg form, but truncate allows optional parameter.	WITHOUT_CLASSIFICATION	0.9998909139593067	WITHOUT_CLASSIFICATION	1.0908604069321337E-4	DEFECT
// General number and precision checking	WITHOUT_CLASSIFICATION	0.9999991604309146	WITHOUT_CLASSIFICATION	8.395690854940085E-7	DEFECT
// the requested precision	WITHOUT_CLASSIFICATION	0.9999976002603458	WITHOUT_CLASSIFICATION	2.399739654259668E-6	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999985272393757	WITHOUT_CLASSIFICATION	1.4727606243598425E-6	DEFECT
//.append("  -x[directory]   strip off text before #!ruby line and perhaps cd to directory\n")	WITHOUT_CLASSIFICATION	0.9999980857927143	WITHOUT_CLASSIFICATION	1.9142072856903482E-6	DEFECT
// even shift.. // ..floors to 62 or 63 bit BigInteger	WITHOUT_CLASSIFICATION	0.99999838714564	WITHOUT_CLASSIFICATION	1.6128543599882943E-6	DEFECT
// 5 -> 2, -5 -> -3 need half a scale more..	WITHOUT_CLASSIFICATION	0.9999997905037817	WITHOUT_CLASSIFICATION	2.09496218317331E-7	DEFECT
// ..where 100 -> 10 shifts the scale	WITHOUT_CLASSIFICATION	0.9999987516936434	WITHOUT_CLASSIFICATION	1.2483063566787122E-6	DEFECT
// Initial x - use double root - multiply by halfBack to unshift - set new scale	WITHOUT_CLASSIFICATION	0.9999998766932968	WITHOUT_CLASSIFICATION	1.2330670311774747E-7	DEFECT
// x0 ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999923933517542	WITHOUT_CLASSIFICATION	7.606648245919989E-6	DEFECT
// for prec 15 root x0 must surely be OK // return small prec roots without iterations	WITHOUT_CLASSIFICATION	0.9999322478891193	WITHOUT_CLASSIFICATION	6.775211088065321E-5	DEFECT
// Initial v - the reciprocal // v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9999996482459867	WITHOUT_CLASSIFICATION	3.517540132108258E-7	DEFECT
// Collect iteration precisions beforehand	WITHOUT_CLASSIFICATION	0.9999977159249284	WITHOUT_CLASSIFICATION	2.284075071683134E-6	DEFECT
// assume nInit = 16 <= prec	WITHOUT_CLASSIFICATION	0.9999938986505488	WITHOUT_CLASSIFICATION	6.101349451124172E-6	DEFECT
// The loop of "Square Root by Coupled Newton Iteration"	WITHOUT_CLASSIFICATION	0.9999980715474039	WITHOUT_CLASSIFICATION	1.928452596072245E-6	DEFECT
// Increase precision - next iteration supplies n exact digits	WITHOUT_CLASSIFICATION	0.9999998217002402	WITHOUT_CLASSIFICATION	1.782997599853911E-7	DEFECT
// Next x                                        // e = d - x^2	WITHOUT_CLASSIFICATION	0.9999884367782399	WITHOUT_CLASSIFICATION	1.1563221760025833E-5	DEFECT
// x += e*v     ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999896669478907	WITHOUT_CLASSIFICATION	1.0333052109264275E-5	DEFECT
// root x is ready!	WITHOUT_CLASSIFICATION	0.9999079143088998	WITHOUT_CLASSIFICATION	9.208569110021014E-5	DEFECT
// Next v                                        // g = 1 - 2*x*v	WITHOUT_CLASSIFICATION	0.9999949996965583	WITHOUT_CLASSIFICATION	5.000303441777397E-6	DEFECT
// v += g*v     ~ 1/2/sqrt()	WITHOUT_CLASSIFICATION	0.9999943075118812	WITHOUT_CLASSIFICATION	5.6924881187845825E-6	DEFECT
// RubyBigdecimal	WITHOUT_CLASSIFICATION	0.9999984542374821	WITHOUT_CLASSIFICATION	1.545762517877596E-6	DEFECT
// c: bind_eval	WITHOUT_CLASSIFICATION	0.9999918026303986	WITHOUT_CLASSIFICATION	8.197369601413183E-6	DEFECT
/*  ================     *  Module Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999942825211424	WITHOUT_CLASSIFICATION	5.717478857591127E-6	DEFECT
// from CommandlineParser	WITHOUT_CLASSIFICATION	0.9999965820065535	WITHOUT_CLASSIFICATION	3.417993446470699E-6	DEFECT
// This property is a Boolean, to allow three values, so it can match MRI's nil, false and true	WITHOUT_CLASSIFICATION	0.9999975279017707	WITHOUT_CLASSIFICATION	2.4720982293551104E-6	DEFECT
// default ClassCache using jitMax as a soft upper bound	WITHOUT_CLASSIFICATION	0.9999999424532388	WITHOUT_CLASSIFICATION	5.754676114760449E-8	DEFECT
// Until we get a little more solid on 1.9 support we will only run interpreted mode	WITHOUT_CLASSIFICATION	0.9999972118153654	WITHOUT_CLASSIFICATION	2.7881846347244383E-6	DEFECT
// Setting the loader needs to reset the class cache	WITHOUT_CLASSIFICATION	0.9999996947345119	WITHOUT_CLASSIFICATION	3.0526548810538384E-7	DEFECT
// try the normal property first	WITHOUT_CLASSIFICATION	0.9999903038711835	WITHOUT_CLASSIFICATION	9.696128816565442E-6	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999671156353742	WITHOUT_CLASSIFICATION	3.288436462570978E-5	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999671156353742	WITHOUT_CLASSIFICATION	3.288436462570978E-5	DEFECT
// try loading from classloader resources	WITHOUT_CLASSIFICATION	0.9999993125764287	WITHOUT_CLASSIFICATION	6.874235714167021E-7	DEFECT
// otherwise fall back on system temp location	WITHOUT_CLASSIFICATION	0.9999984167620576	WITHOUT_CLASSIFICATION	1.5832379424193645E-6	DEFECT
// We require the home directory to be absolute	WITHOUT_CLASSIFICATION	0.9999995138506169	WITHOUT_CLASSIFICATION	4.861493830055688E-7	DEFECT
//consume the file name	WITHOUT_CLASSIFICATION	0.9999723338850073	WITHOUT_CLASSIFICATION	2.766611499266455E-5	DEFECT
// Specify something that can't separate	WITHOUT_CLASSIFICATION	0.9999819092419767	WITHOUT_CLASSIFICATION	1.8090758023233465E-5	DEFECT
// try cwd first	WITHOUT_CLASSIFICATION	0.9999884546885967	WITHOUT_CLASSIFICATION	1.1545311403478362E-5	DEFECT
// ruby interpreter compatibilty // Usage: ruby [switches] [--] [programfile] [arguments])	WITHOUT_CLASSIFICATION	0.9999994781550063	WITHOUT_CLASSIFICATION	5.218449935587627E-7	DEFECT
// KCode.NONE is used because KCODE does not affect parse in Ruby 1.8 // if Ruby 2.0 encoding pragmas are implemented, this will need to change	WITHOUT_CLASSIFICATION	0.9985139014968926	WITHOUT_CLASSIFICATION	0.0014860985031074087	DEFECT
// @JRubyMethod(name = "complex?")	WITHOUT_CLASSIFICATION	0.9999966200901999	WITHOUT_CLASSIFICATION	3.3799098001002743E-6	DEFECT
// @JRubyMethod(name = "exact?")	WITHOUT_CLASSIFICATION	0.9999953236691955	WITHOUT_CLASSIFICATION	4.676330804527056E-6	DEFECT
// @JRubyMethod(name = "inexact?")	WITHOUT_CLASSIFICATION	0.9999958670646067	WITHOUT_CLASSIFICATION	4.132935393356722E-6	DEFECT
// symbol string *must* be interned	WITHOUT_CLASSIFICATION	0.9999955952447535	WITHOUT_CLASSIFICATION	4.404755246550561E-6	DEFECT
//        assert internedSymbol == internedSymbol.intern() : internedSymbol + " is not interned";	WITHOUT_CLASSIFICATION	0.9999085782647958	WITHOUT_CLASSIFICATION	9.142173520423853E-5	DEFECT
/* Symbol class methods.     *      */	WITHOUT_CLASSIFICATION	0.9999982819706711	WITHOUT_CLASSIFICATION	1.7180293289229716E-6	DEFECT
// TODO: 1.9 rb_enc_symname_p	WITHOUT_CLASSIFICATION	0.7314530623285127	WITHOUT_CLASSIFICATION	0.26854693767148724	DEFECT
// This is needed to unpack stuff	WITHOUT_CLASSIFICATION	0.9999708790869904	WITHOUT_CLASSIFICATION	2.9120913009537093E-5	DEFECT
// we already confirmed above that length > 0	WITHOUT_CLASSIFICATION	0.9999970347324478	WITHOUT_CLASSIFICATION	2.965267552084316E-6	DEFECT
// *must* be power of 2!	WITHOUT_CLASSIFICATION	0.9999923117838048	WITHOUT_CLASSIFICATION	7.688216195275756E-6	DEFECT
// note all fields are final -- rehash creates new entries when necessary. // as documented in java.util.concurrent.ConcurrentHashMap.java, that will // statistically affect only a small percentage (< 20%) of entries for a given rehash.	WITHOUT_CLASSIFICATION	0.9999979712465621	WITHOUT_CLASSIFICATION	2.0287534378646435E-6	DEFECT
//            assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9998316148844383	WITHOUT_CLASSIFICATION	1.683851155616891E-4	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999980579644345	WITHOUT_CLASSIFICATION	1.9420355653741225E-6	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999980579644345	WITHOUT_CLASSIFICATION	1.9420355653741225E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999991013095211	WITHOUT_CLASSIFICATION	8.986904790272999E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999991013095211	WITHOUT_CLASSIFICATION	8.986904790272999E-7	DEFECT
// backwards-compatibility, but threadsafe now	WITHOUT_CLASSIFICATION	0.9999756922185757	WITHOUT_CLASSIFICATION	2.430778142426285E-5	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999804751740423	WITHOUT_CLASSIFICATION	1.9524825957679572E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999983205169373	WITHOUT_CLASSIFICATION	1.6794830628296384E-6	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999986998127786	WITHOUT_CLASSIFICATION	1.30018722143783E-6	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999931454102228	WITHOUT_CLASSIFICATION	6.854589777232218E-6	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999994923180512	WITHOUT_CLASSIFICATION	5.076819489301447E-7	DEFECT
// not so backwards-compatible here, but no one should have been // calling this anyway.	WITHOUT_CLASSIFICATION	0.9999449046978147	WITHOUT_CLASSIFICATION	5.509530218520602E-5	DEFECT
// Profile	WITHOUT_CLASSIFICATION	0.9999974821196382	WITHOUT_CLASSIFICATION	2.5178803617807453E-6	DEFECT
//static private final String TRANSLIT = "//translit";	WITHOUT_CLASSIFICATION	0.9999961731146536	WITHOUT_CLASSIFICATION	3.8268853462912274E-6	DEFECT
// treat start and end as start...end for end >= 0, start..end for end < 0	WITHOUT_CLASSIFICATION	0.9999994982013107	WITHOUT_CLASSIFICATION	5.017986892817457E-7	DEFECT
// invalid ranges result in an empty string	WITHOUT_CLASSIFICATION	0.9999480031522298	WITHOUT_CLASSIFICATION	5.199684777011414E-5	DEFECT
// Methods of the Nil Class (nil_*):	WITHOUT_CLASSIFICATION	0.9999988243822296	WITHOUT_CLASSIFICATION	1.1756177703784659E-6	DEFECT
// Has read/write been closed or is it still open for business	WITHOUT_CLASSIFICATION	0.9999994111735064	WITHOUT_CLASSIFICATION	5.888264934827361E-7	DEFECT
// Support IO modes that this object was opened with	WITHOUT_CLASSIFICATION	0.999972312168322	WITHOUT_CLASSIFICATION	2.7687831677845303E-5	DEFECT
// must let original string know we're modifying, so shared buffers aren't damaged	WITHOUT_CLASSIFICATION	0.9998975248658266	WITHOUT_CLASSIFICATION	1.0247513417342695E-4	DEFECT
// reset the state	WITHOUT_CLASSIFICATION	0.9999977053993767	WITHOUT_CLASSIFICATION	2.2946006233029937E-6	DEFECT
// Tainting here if we ever want it. (secure 4)	WITHOUT_CLASSIFICATION	0.9999923531126886	WITHOUT_CLASSIFICATION	7.64688731140906E-6	DEFECT
// rb_match_busy	WITHOUT_CLASSIFICATION	0.9999958962906679	WITHOUT_CLASSIFICATION	4.10370933218776E-6	DEFECT
//str is frozen	WITHOUT_CLASSIFICATION	0.9999396973621686	WITHOUT_CLASSIFICATION	6.0302637831374136E-5	DEFECT
// MRI also does a pointer comparison here	WITHOUT_CLASSIFICATION	0.9999985796927077	WITHOUT_CLASSIFICATION	1.420307292340489E-6	DEFECT
// JRubyServer	WITHOUT_CLASSIFICATION	0.9999918064127304	WITHOUT_CLASSIFICATION	8.193587269466847E-6	DEFECT
// Class.allocate object is not allocatable before it is initialized	WITHOUT_CLASSIFICATION	0.9999947678692678	WITHOUT_CLASSIFICATION	5.232130732177718E-6	DEFECT
// boot the Object class 	WITHOUT_CLASSIFICATION	0.9999748421252139	WITHOUT_CLASSIFICATION	2.515787478602112E-5	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.999994963808383	WITHOUT_CLASSIFICATION	5.036191617004601E-6	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.999999299645663	WITHOUT_CLASSIFICATION	7.003543369458842E-7	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999955668767626	WITHOUT_CLASSIFICATION	4.433123237410635E-6	DEFECT
// This is a non-standard method; have we decided to start extending Ruby? //classClass.defineFastMethod("subclasses", callbackFactory.getFastOptMethod("subclasses"));	WITHOUT_CLASSIFICATION	0.9999824815174095	WITHOUT_CLASSIFICATION	1.7518482590560196E-5	DEFECT
// boot the Module and Class classes	WITHOUT_CLASSIFICATION	0.9999990687016691	WITHOUT_CLASSIFICATION	9.312983309728753E-7	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9999555433470664	WITHOUT_CLASSIFICATION	4.445665293357835E-5	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.99999893857824	WITHOUT_CLASSIFICATION	1.061421760040447E-6	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.99999893857824	WITHOUT_CLASSIFICATION	1.061421760040447E-6	DEFECT
// could be pulled down to RubyClass in future // rb_class_boot	WITHOUT_CLASSIFICATION	0.9999989852487207	WITHOUT_CLASSIFICATION	1.0147512793421477E-6	DEFECT
// remove us from old superclass's child classes	WITHOUT_CLASSIFICATION	0.9999994155132133	WITHOUT_CLASSIFICATION	5.844867866942429E-7	DEFECT
// add us to new superclass's child classes	WITHOUT_CLASSIFICATION	0.9999995534567774	WITHOUT_CLASSIFICATION	4.46543222572935E-7	DEFECT
// update all subclasses	WITHOUT_CLASSIFICATION	0.9999993232014426	WITHOUT_CLASSIFICATION	6.767985574915585E-7	DEFECT
// fields to hold Ruby and RubyClass references	WITHOUT_CLASSIFICATION	0.9999984335187838	WITHOUT_CLASSIFICATION	1.5664812161365985E-6	DEFECT
// static initializing method	WITHOUT_CLASSIFICATION	0.9999974067984367	WITHOUT_CLASSIFICATION	2.5932015632158476E-6	DEFECT
// standard constructor that accepts Ruby, RubyClass	WITHOUT_CLASSIFICATION	0.999999770977567	WITHOUT_CLASSIFICATION	2.290224329983581E-7	DEFECT
// no-arg constructor using static references to Ruby and RubyClass	WITHOUT_CLASSIFICATION	0.9999999589926517	WITHOUT_CLASSIFICATION	4.100734815250767E-8	DEFECT
// non-signature signature with just IRubyObject	WITHOUT_CLASSIFICATION	0.9999975783637559	WITHOUT_CLASSIFICATION	2.421636244095175E-6	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999989076495397	WITHOUT_CLASSIFICATION	1.092350460393678E-6	DEFECT
// self // method name	WITHOUT_CLASSIFICATION	0.9999955035540873	WITHOUT_CLASSIFICATION	4.4964459127570335E-6	DEFECT
// the default allocator	WITHOUT_CLASSIFICATION	0.9999982517498481	WITHOUT_CLASSIFICATION	1.748250151925926E-6	DEFECT
// Equivalent of T_DATA	WITHOUT_CLASSIFICATION	0.9999468597525172	WITHOUT_CLASSIFICATION	5.31402474827213E-5	DEFECT
// do nothing, leave empty	WITHOUT_CLASSIFICATION	0.9999950069216649	WITHOUT_CLASSIFICATION	4.993078335117848E-6	DEFECT
// Double.MAX_EXPONENT since Java 1.6	WITHOUT_CLASSIFICATION	0.9999982187404848	WITHOUT_CLASSIFICATION	1.7812595152379233E-6	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999954592275349	WITHOUT_CLASSIFICATION	4.54077246514929E-6	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999999063005043	WITHOUT_CLASSIFICATION	9.369949570341476E-8	DEFECT
// Make sure all arguments are modules before calling the callbacks	WITHOUT_CLASSIFICATION	0.999999787433827	WITHOUT_CLASSIFICATION	2.1256617309360677E-7	DEFECT
// MRI extends in order from last to first	WITHOUT_CLASSIFICATION	0.9999986526388376	WITHOUT_CLASSIFICATION	1.347361162369847E-6	DEFECT
// NOTE: Serialization is primarily supported for testing purposes, and there is no general // guarantee that serialization will work correctly. Specifically, instance variables pointing // at symbols, threads, modules, classes, and other unserializable types are not detected.	WITHOUT_CLASSIFICATION	0.9951412797126261	WITHOUT_CLASSIFICATION	0.004858720287373842	DEFECT
// write out ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999997315786893	WITHOUT_CLASSIFICATION	2.6842131083561066E-7	DEFECT
// rest in ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999994356166326	WITHOUT_CLASSIFICATION	5.643833674106196E-7	DEFECT
// 0x3fff_ffff // -0x4000_0000	WITHOUT_CLASSIFICATION	0.9999729004245931	WITHOUT_CLASSIFICATION	2.7099575406805634E-5	DEFECT
// a gotcha	WITHOUT_CLASSIFICATION	0.999997974985305	WITHOUT_CLASSIFICATION	2.025014695019723E-6	DEFECT
// Java / and % are not the same as ruby	WITHOUT_CLASSIFICATION	0.9999899308731115	WITHOUT_CLASSIFICATION	1.006912688838694E-5	DEFECT
// A gotcha for Long.MIN_VALUE: value = -value	WITHOUT_CLASSIFICATION	0.999998468677763	WITHOUT_CLASSIFICATION	1.5313222370294453E-6	DEFECT
// Piece of mri rb_to_id	WITHOUT_CLASSIFICATION	0.9999931195584033	WITHOUT_CLASSIFICATION	6.880441596736101E-6	DEFECT
// Java Doubles are 64 bit long:            	WITHOUT_CLASSIFICATION	0.9999902424576352	WITHOUT_CLASSIFICATION	9.757542364796181E-6	DEFECT
// Double.MAX_EXPONENT since Java 1.6            	WITHOUT_CLASSIFICATION	0.9999983003347624	WITHOUT_CLASSIFICATION	1.6996652375475035E-6	DEFECT
// don't override Numeric#div !	WITHOUT_CLASSIFICATION	0.9999336505621677	WITHOUT_CLASSIFICATION	6.6349437832338E-5	DEFECT
// Modelled after c ruby implementation (java /,% not same as ruby)	WITHOUT_CLASSIFICATION	0.9999951279565561	WITHOUT_CLASSIFICATION	4.872043443860999E-6	DEFECT
// MRI behavior:	WITHOUT_CLASSIFICATION	0.9999917463716418	WITHOUT_CLASSIFICATION	8.25362835829784E-6	DEFECT
// Numeric.equal            	WITHOUT_CLASSIFICATION	0.9999913310512458	WITHOUT_CLASSIFICATION	8.668948754167938E-6	DEFECT
// provider is not available	WITHOUT_CLASSIFICATION	0.999987797289527	WITHOUT_CLASSIFICATION	1.2202710473043688E-5	DEFECT
// bouncy castle doesn't support algorithm	WITHOUT_CLASSIFICATION	0.9999987301030596	WITHOUT_CLASSIFICATION	1.2698969404753674E-6	DEFECT
// fall back to system JCA providers	WITHOUT_CLASSIFICATION	0.999998887877634	WITHOUT_CLASSIFICATION	1.1121223658950058E-6	DEFECT
// RubyDigest	WITHOUT_CLASSIFICATION	0.9999967727268724	WITHOUT_CLASSIFICATION	3.2272731275867876E-6	DEFECT
// ENEBO: Can these be fast?	WITHOUT_CLASSIFICATION	0.9986415135154634	WITHOUT_CLASSIFICATION	0.00135848648453653	DEFECT
// synchronize on the RubyThread for threadgroup updates	WITHOUT_CLASSIFICATION	0.9999995819941288	WITHOUT_CLASSIFICATION	4.1800587127413615E-7	DEFECT
// we only add live threads	WITHOUT_CLASSIFICATION	0.999987993861679	WITHOUT_CLASSIFICATION	1.2006138321044548E-5	DEFECT
// use same ClassIndex as metaclass, since we're technically still of that type	WITHOUT_CLASSIFICATION	0.9999993272050149	WITHOUT_CLASSIFICATION	6.727949850599953E-7	DEFECT
// handle everything after -- as arguments to the jruby process	WITHOUT_CLASSIFICATION	0.9999999870047172	WITHOUT_CLASSIFICATION	1.2995282724403629E-8	DEFECT
// JRubyService	WITHOUT_CLASSIFICATION	0.9999909292080478	WITHOUT_CLASSIFICATION	9.070791952143863E-6	DEFECT
// while	WITHOUT_CLASSIFICATION	0.9999933468951147	WITHOUT_CLASSIFICATION	6.653104885421891E-6	DEFECT
/* \OOO */	WITHOUT_CLASSIFICATION	0.9999691673169578	WITHOUT_CLASSIFICATION	3.0832683042205186E-5	DEFECT
// CRuby uses sprintf(buf, "%.*g", FLOAT_DIG, d); // This pattern adjusts the output of String.pattern("%g") to mimic // the C version.	WITHOUT_CLASSIFICATION	0.9999947627934832	WITHOUT_CLASSIFICATION	5.237206516753788E-6	DEFECT
// mask off "once" flag	WITHOUT_CLASSIFICATION	0.9999945920441395	WITHOUT_CLASSIFICATION	5.4079558604372995E-6	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999997463277395	WITHOUT_CLASSIFICATION	2.536722605805864E-7	DEFECT
// internal usage (Complex/Rational)	WITHOUT_CLASSIFICATION	0.9999992379661198	WITHOUT_CLASSIFICATION	7.620338801868027E-7	DEFECT
// silent ?	WITHOUT_CLASSIFICATION	0.9999949800449863	WITHOUT_CLASSIFICATION	5.019955013590433E-6	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9999831282575934	WITHOUT_CLASSIFICATION	1.6871742406635488E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9999266429732677	WITHOUT_CLASSIFICATION	7.335702673227806E-5	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999643437174931	WITHOUT_CLASSIFICATION	3.565628250688599E-5	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999671026702351	WITHOUT_CLASSIFICATION	3.289732976485765E-5	DEFECT
/* \O, \OO, \OOO or backref */	WITHOUT_CLASSIFICATION	0.9999749187799405	WITHOUT_CLASSIFICATION	2.508122005961933E-5	DEFECT
// MBCLEN_NEEDMORE_P	WITHOUT_CLASSIFICATION	0.999984270545831	WITHOUT_CLASSIFICATION	1.5729454168957652E-5	DEFECT
// MBCLEN_INVALID_P	WITHOUT_CLASSIFICATION	0.9999770881521287	WITHOUT_CLASSIFICATION	2.291184787130299E-5	DEFECT
// Unicode is can be only 21 bits long, int is enough	WITHOUT_CLASSIFICATION	0.9999965983691363	WITHOUT_CLASSIFICATION	3.401630863720119E-6	DEFECT
/* Surrogates */	WITHOUT_CLASSIFICATION	0.999995086683569	WITHOUT_CLASSIFICATION	4.913316431023874E-6	DEFECT
// do not load the class if not used	WITHOUT_CLASSIFICATION	0.9999984818085536	WITHOUT_CLASSIFICATION	1.5181914464162574E-6	DEFECT
/* \0, \0O, \0OO */	WITHOUT_CLASSIFICATION	0.999961144043224	WITHOUT_CLASSIFICATION	3.885595677588785E-5	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9999831282575934	WITHOUT_CLASSIFICATION	1.6871742406635488E-5	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999643437174931	WITHOUT_CLASSIFICATION	3.565628250688599E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9999266429732677	WITHOUT_CLASSIFICATION	7.335702673227806E-5	DEFECT
/* \\u{H HH HHH HHHH HHHHH HHHHHH ...} */	WITHOUT_CLASSIFICATION	0.9999783022440292	WITHOUT_CLASSIFICATION	2.1697755970834125E-5	DEFECT
/* \\uHHHH */	WITHOUT_CLASSIFICATION	0.9999795221629382	WITHOUT_CLASSIFICATION	2.0477837061830712E-5	DEFECT
/* \p{Hiragana} */	WITHOUT_CLASSIFICATION	0.9999932084239824	WITHOUT_CLASSIFICATION	6.791576017667641E-6	DEFECT
// inner switch	WITHOUT_CLASSIFICATION	0.9999939258627988	WITHOUT_CLASSIFICATION	6.074137201287454E-6	DEFECT
// newInstance here	WITHOUT_CLASSIFICATION	0.9999980610696788	WITHOUT_CLASSIFICATION	1.9389303210646468E-6	DEFECT
// rb_reg_raise	WITHOUT_CLASSIFICATION	0.999996556397785	WITHOUT_CLASSIFICATION	3.4436022149057697E-6	DEFECT
// rb_reg_desc	WITHOUT_CLASSIFICATION	0.9999973620314365	WITHOUT_CLASSIFICATION	2.637968563402453E-6	DEFECT
// rb_enc_reg_raise	WITHOUT_CLASSIFICATION	0.999998056590699	WITHOUT_CLASSIFICATION	1.9434093010182375E-6	DEFECT
// rb_enc_reg_error_desc	WITHOUT_CLASSIFICATION	0.9999771826545815	WITHOUT_CLASSIFICATION	2.2817345418608052E-5	DEFECT
// rb_reg_initialize_str	WITHOUT_CLASSIFICATION	0.9999922562981632	WITHOUT_CLASSIFICATION	7.743701836804904E-6	DEFECT
// rb_reg_initialize	WITHOUT_CLASSIFICATION	0.9999924271925019	WITHOUT_CLASSIFICATION	7.572807498107484E-6	DEFECT
// JRUBY-3625: delay setting backref until the MatchData is completely initialized	WITHOUT_CLASSIFICATION	0.9999967854836639	WITHOUT_CLASSIFICATION	3.214516336072793E-6	DEFECT
// rb_reg_expr_str	WITHOUT_CLASSIFICATION	0.9999978935629271	WITHOUT_CLASSIFICATION	2.1064370728951847E-6	DEFECT
// option_to_str	WITHOUT_CLASSIFICATION	0.999997688746975	WITHOUT_CLASSIFICATION	2.3112530248642096E-6	DEFECT
// Don't initialize with class // Don't put in object space and don't taint	WITHOUT_CLASSIFICATION	0.9999758363169008	WITHOUT_CLASSIFICATION	2.416368309918737E-5	DEFECT
// args should be before block	WITHOUT_CLASSIFICATION	0.9999956405116108	WITHOUT_CLASSIFICATION	4.359488389200344E-6	DEFECT
// args should be at end	WITHOUT_CLASSIFICATION	0.9999945061017727	WITHOUT_CLASSIFICATION	5.4938982272624435E-6	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999969183279919	WITHOUT_CLASSIFICATION	3.0816720080752747E-6	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999969183279919	WITHOUT_CLASSIFICATION	3.0816720080752747E-6	DEFECT
// skip anything not related to jruby	WITHOUT_CLASSIFICATION	0.9999983370730807	WITHOUT_CLASSIFICATION	1.6629269193357856E-6	DEFECT
// start a new populator	WITHOUT_CLASSIFICATION	0.9999990688896468	WITHOUT_CLASSIFICATION	9.311103532475708E-7	DEFECT
// check for frame field reads or writes	WITHOUT_CLASSIFICATION	0.9999968002058989	WITHOUT_CLASSIFICATION	3.1997941010041788E-6	DEFECT
// add all names for this annotation	WITHOUT_CLASSIFICATION	0.9998460100286206	WITHOUT_CLASSIFICATION	1.539899713793847E-4	DEFECT
// no annotated methods found, skip	WITHOUT_CLASSIFICATION	0.9999987772444707	WITHOUT_CLASSIFICATION	1.222755529221032E-6	DEFECT
// write out a static initializer for frame names, so it only fires once	WITHOUT_CLASSIFICATION	0.9999998214556378	WITHOUT_CLASSIFICATION	1.785443621941491E-7	DEFECT
// single method, use normal logic	WITHOUT_CLASSIFICATION	0.9999997144512496	WITHOUT_CLASSIFICATION	2.8554875042397877E-7	DEFECT
// multimethod, new logic	WITHOUT_CLASSIFICATION	0.9999976661779629	WITHOUT_CLASSIFICATION	2.333822036997046E-6	DEFECT
// declared type returns the qualified name without $ for inner classes!!!	WITHOUT_CLASSIFICATION	0.9999980804576566	WITHOUT_CLASSIFICATION	1.9195423433950134E-6	DEFECT
// inner class, use $ to delimit	WITHOUT_CLASSIFICATION	0.9999995298765627	WITHOUT_CLASSIFICATION	4.7012343721938117E-7	DEFECT
//                        RubyModule singletonClass = module.getSingletonClass();	WITHOUT_CLASSIFICATION	0.9999998564049394	WITHOUT_CLASSIFICATION	1.4359506067606296E-7	DEFECT
//                }	WITHOUT_CLASSIFICATION	0.9999866453124383	WITHOUT_CLASSIFICATION	1.3354687561767073E-5	DEFECT
// fallback on non-pregenerated logic	WITHOUT_CLASSIFICATION	0.9999966405785822	WITHOUT_CLASSIFICATION	3.359421417790114E-6	DEFECT
// refresh call adapter, since it matters if this is iter-based or not	WITHOUT_CLASSIFICATION	0.9999909920582338	WITHOUT_CLASSIFICATION	9.007941766103243E-6	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9999940722474455	WITHOUT_CLASSIFICATION	5.927752554431668E-6	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999963011810162	WITHOUT_CLASSIFICATION	3.6988189837237837E-6	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.999994788598269	WITHOUT_CLASSIFICATION	5.211401731137508E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999992785679025	WITHOUT_CLASSIFICATION	7.214320975782537E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999992785679025	WITHOUT_CLASSIFICATION	7.214320975782537E-7	DEFECT
// colon3	WITHOUT_CLASSIFICATION	0.9999972062169995	WITHOUT_CLASSIFICATION	2.793783000479254E-6	DEFECT
// Colon3	WITHOUT_CLASSIFICATION	0.9999972995384497	WITHOUT_CLASSIFICATION	2.700461550256544E-6	DEFECT
// array created for rescue args doesn't need to be in ObjectSpace.	WITHOUT_CLASSIFICATION	0.9999927699899938	WITHOUT_CLASSIFICATION	7.23001000621134E-6	DEFECT
// For b.foo	WITHOUT_CLASSIFICATION	0.9999853761902202	WITHOUT_CLASSIFICATION	1.4623809779873318E-5	DEFECT
// instance config for the script run	WITHOUT_CLASSIFICATION	0.9999959109586756	WITHOUT_CLASSIFICATION	4.0890413244633335E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999992785679025	WITHOUT_CLASSIFICATION	7.214320975782537E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999992785679025	WITHOUT_CLASSIFICATION	7.214320975782537E-7	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999996546441134	WITHOUT_CLASSIFICATION	3.453558864740138E-7	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999996546441134	WITHOUT_CLASSIFICATION	3.453558864740138E-7	DEFECT
//RubyModule module = context.getRubyClass();	WITHOUT_CLASSIFICATION	0.9999986872777948	WITHOUT_CLASSIFICATION	1.3127222051213774E-6	DEFECT
// For 'b.foo'	WITHOUT_CLASSIFICATION	0.9999865737732534	WITHOUT_CLASSIFICATION	1.3426226746699413E-5	DEFECT
// We define an actual list to get around bug in java integration (1387115)	WITHOUT_CLASSIFICATION	0.9999995856607381	WITHOUT_CLASSIFICATION	4.1433926194025216E-7	DEFECT
// something in here is used to build up ruby stack trace...	WITHOUT_CLASSIFICATION	0.9999983707747085	WITHOUT_CLASSIFICATION	1.629225291485502E-6	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999985610451247	WITHOUT_CLASSIFICATION	1.4389548753137404E-6	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999985610451247	WITHOUT_CLASSIFICATION	1.4389548753137404E-6	DEFECT
// do nothing, allow loop to retry	WITHOUT_CLASSIFICATION	0.9999994697641824	WITHOUT_CLASSIFICATION	5.302358175038764E-7	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999961443130727	WITHOUT_CLASSIFICATION	3.8556869272828056E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999996905416357	WITHOUT_CLASSIFICATION	3.0945836430982656E-7	DEFECT
// never visited, should be fine	WITHOUT_CLASSIFICATION	0.9999983445542715	WITHOUT_CLASSIFICATION	1.655445728567616E-6	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999996434631813	WITHOUT_CLASSIFICATION	3.565368187347118E-7	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999743308293151	WITHOUT_CLASSIFICATION	2.566917068495009E-5	DEFECT
// If we have more than one argument, then make sure the array is not ObjectSpaced.	WITHOUT_CLASSIFICATION	0.999981383742932	WITHOUT_CLASSIFICATION	1.8616257067947142E-5	DEFECT
// Only in ruby 1.9 methods	WITHOUT_CLASSIFICATION	0.9999933466774641	WITHOUT_CLASSIFICATION	6.653322535825805E-6	DEFECT
// Bind 'normal' parameter values to the local scope for this method.	WITHOUT_CLASSIFICATION	0.9999995703463143	WITHOUT_CLASSIFICATION	4.2965368583943973E-7	DEFECT
// no arg grouping, just use bulk assignment methods	WITHOUT_CLASSIFICATION	0.999999936753003	WITHOUT_CLASSIFICATION	6.324699695869886E-8	DEFECT
// optArgs and restArgs require more work, so isolate them and ArrayList creation here	WITHOUT_CLASSIFICATION	0.9999989628712582	WITHOUT_CLASSIFICATION	1.0371287418814875E-6	DEFECT
//        arity.checkArity(runtime, argsLength);	WITHOUT_CLASSIFICATION	0.9999992032966668	WITHOUT_CLASSIFICATION	7.967033332222369E-7	DEFECT
// no more values to stick in rest arg	WITHOUT_CLASSIFICATION	0.9999983546073911	WITHOUT_CLASSIFICATION	1.6453926089964212E-6	DEFECT
// set argv from main's args	WITHOUT_CLASSIFICATION	0.9999954237082799	WITHOUT_CLASSIFICATION	4.576291720121292E-6	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999963011810162	WITHOUT_CLASSIFICATION	3.6988189837237837E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999992785679025	WITHOUT_CLASSIFICATION	7.214320975782537E-7	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999996546441134	WITHOUT_CLASSIFICATION	3.453558864740138E-7	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999743308293151	WITHOUT_CLASSIFICATION	2.566917068495009E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999847664079877	WITHOUT_CLASSIFICATION	1.523359201227569E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999847664079877	WITHOUT_CLASSIFICATION	1.523359201227569E-5	DEFECT
// block.yield depends on null to represent empty and nil to represent nil - [nil] vs [] //assert argsNode != null : "argsNode is not null";	WITHOUT_CLASSIFICATION	0.999980707410823	WITHOUT_CLASSIFICATION	1.929258917692573E-5	DEFECT
// assign given optional arguments to their variables	WITHOUT_CLASSIFICATION	0.999999962538924	WITHOUT_CLASSIFICATION	3.746107598870575E-8	DEFECT
// in-frame EvalState should already have receiver set as self, continue to use it	WITHOUT_CLASSIFICATION	0.9999954773548021	WITHOUT_CLASSIFICATION	4.5226451978563275E-6	DEFECT
// assign the default values, adding to the end of allArgs	WITHOUT_CLASSIFICATION	0.9999999316188471	WITHOUT_CLASSIFICATION	6.83811528687562E-8	DEFECT
// Make sure the appropriate scope has proper size. See JRUBY-2046.	WITHOUT_CLASSIFICATION	0.9999992296713851	WITHOUT_CLASSIFICATION	7.703286149302238E-7	DEFECT
// Experimental class reification support, to create real Java classes // for Ruby classes after the first opening	WITHOUT_CLASSIFICATION	0.9999999312479446	WITHOUT_CLASSIFICATION	6.875205537531172E-8	DEFECT
// This should never happen past parse, but just bulletproof this just in case	WITHOUT_CLASSIFICATION	0.9998528680416007	WITHOUT_CLASSIFICATION	1.4713195839923457E-4	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.999801288203185	WITHOUT_CLASSIFICATION	1.9871179681496217E-4	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999999950105922	WITHOUT_CLASSIFICATION	4.989407724845035E-9	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999985646322758	WITHOUT_CLASSIFICATION	1.4353677242928632E-6	DEFECT
// never visited, should be ok	WITHOUT_CLASSIFICATION	0.9999977631424652	WITHOUT_CLASSIFICATION	2.236857534736723E-6	DEFECT
// If no explicit block passed to super, then use the one passed in, unless it's explicitly cleared with nil	WITHOUT_CLASSIFICATION	0.9999999161403588	WITHOUT_CLASSIFICATION	8.385964115896304E-8	DEFECT
// JRUBY-530 until case	WITHOUT_CLASSIFICATION	0.9999978640392275	WITHOUT_CLASSIFICATION	2.135960772490773E-6	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.999994788598269	WITHOUT_CLASSIFICATION	5.211401731137508E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999996546441134	WITHOUT_CLASSIFICATION	3.453558864740138E-7	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999961443130727	WITHOUT_CLASSIFICATION	3.8556869272828056E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999996905416357	WITHOUT_CLASSIFICATION	3.0945836430982656E-7	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999996905416357	WITHOUT_CLASSIFICATION	3.0945836430982656E-7	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999996434631813	WITHOUT_CLASSIFICATION	3.565368187347118E-7	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999743308293151	WITHOUT_CLASSIFICATION	2.566917068495009E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999743308293151	WITHOUT_CLASSIFICATION	2.566917068495009E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999847664079877	WITHOUT_CLASSIFICATION	1.523359201227569E-5	DEFECT
// Empirical Observations: // null -> Some arity // argsNode == this.argsNode then check for arity changes // newline(splatnode) -> argspushnode	WITHOUT_CLASSIFICATION	0.9999895427174682	WITHOUT_CLASSIFICATION	1.0457282531834281E-5	DEFECT
//assert !(value instanceof RubyArray)  : "Not an array";	WITHOUT_CLASSIFICATION	0.9998979270328516	WITHOUT_CLASSIFICATION	1.0207296714835978E-4	DEFECT
// Serialization killed our dynamic scope.  We can just create an empty one // since serialization cannot serialize an eval (which is the only thing // which is capable of having a non-empty dynamic scope).	WITHOUT_CLASSIFICATION	0.9998808704518523	WITHOUT_CLASSIFICATION	1.1912954814778751E-4	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999966700902455	WITHOUT_CLASSIFICATION	3.32990975452549E-6	DEFECT
// We could probably also detect if LHS value came out of cache and avoid some of this	WITHOUT_CLASSIFICATION	0.9999998256001152	WITHOUT_CLASSIFICATION	1.7439988474945534E-7	DEFECT
//        assert thenBody != null : "thenBody is not null"; //        assert elseBody != null : "elseBody is not null";	WITHOUT_CLASSIFICATION	0.9996382771121525	WITHOUT_CLASSIFICATION	3.617228878476009E-4	DEFECT
// add in reverse order	WITHOUT_CLASSIFICATION	0.999995615410846	WITHOUT_CLASSIFICATION	4.3845891540341775E-6	DEFECT
// in order to make pragma's noops we set location to a special value	WITHOUT_CLASSIFICATION	0.9999979762363639	WITHOUT_CLASSIFICATION	2.0237636361355687E-6	DEFECT
// ignore compiler pragmas	WITHOUT_CLASSIFICATION	0.9999909994440535	WITHOUT_CLASSIFICATION	9.00055594654617E-6	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999961443130727	WITHOUT_CLASSIFICATION	3.8556869272828056E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999996905416357	WITHOUT_CLASSIFICATION	3.0945836430982656E-7	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999996905416357	WITHOUT_CLASSIFICATION	3.0945836430982656E-7	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999996434631813	WITHOUT_CLASSIFICATION	3.565368187347118E-7	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.999801288203185	WITHOUT_CLASSIFICATION	1.9871179681496217E-4	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999985646322758	WITHOUT_CLASSIFICATION	1.4353677242928632E-6	DEFECT
// No actual test, so do 'when' if when expression is not nil	WITHOUT_CLASSIFICATION	0.9999960795150546	WITHOUT_CLASSIFICATION	3.920484945355914E-6	DEFECT
// save entering the try if there's nothing to ensure	WITHOUT_CLASSIFICATION	0.9999990260573479	WITHOUT_CLASSIFICATION	9.739426520482758E-7	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999831115449478	WITHOUT_CLASSIFICATION	1.6888455052317667E-5	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999831115449478	WITHOUT_CLASSIFICATION	1.6888455052317667E-5	DEFECT
// admittedly inefficient	WITHOUT_CLASSIFICATION	0.9999795542024443	WITHOUT_CLASSIFICATION	2.044579755564725E-5	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9999907756507331	WITHOUT_CLASSIFICATION	9.224349266833244E-6	DEFECT
// What static scoping relationship exists when it comes into being.	WITHOUT_CLASSIFICATION	0.9999995472793783	WITHOUT_CLASSIFICATION	4.527206216710473E-7	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999952374790251	WITHOUT_CLASSIFICATION	4.762520974936438E-6	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999973657337006	WITHOUT_CLASSIFICATION	2.6342662994758646E-6	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999973657337006	WITHOUT_CLASSIFICATION	2.6342662994758646E-6	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999989105556127	WITHOUT_CLASSIFICATION	1.0894443872293542E-6	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999989105556127	WITHOUT_CLASSIFICATION	1.0894443872293542E-6	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999932782402337	WITHOUT_CLASSIFICATION	6.721759766399031E-6	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999932782402337	WITHOUT_CLASSIFICATION	6.721759766399031E-6	DEFECT
// Execute rescue block	WITHOUT_CLASSIFICATION	0.9999884212391487	WITHOUT_CLASSIFICATION	1.1578760851427107E-5	DEFECT
// If no exception is thrown execute else block	WITHOUT_CLASSIFICATION	0.9999846487153918	WITHOUT_CLASSIFICATION	1.5351284608216483E-5	DEFECT
// index of variable for this arg	WITHOUT_CLASSIFICATION	0.999901709510947	WITHOUT_CLASSIFICATION	9.829048905302637E-5	DEFECT
// only a marker interface	WITHOUT_CLASSIFICATION	0.9999990736434055	WITHOUT_CLASSIFICATION	9.263565946558002E-7	DEFECT
// don't attempt to coerce to array, just wrap and return	WITHOUT_CLASSIFICATION	0.9999765360316303	WITHOUT_CLASSIFICATION	2.3463968369742126E-5	DEFECT
// pragmas	WITHOUT_CLASSIFICATION	0.9999974293446471	WITHOUT_CLASSIFICATION	2.5706553528241296E-6	DEFECT
// The method also needs a scope, do both	WITHOUT_CLASSIFICATION	0.9999985653680894	WITHOUT_CLASSIFICATION	1.4346319106879364E-6	DEFECT
// We're doing normal framed compilation or the method needs a frame	WITHOUT_CLASSIFICATION	0.999994197144684	WITHOUT_CLASSIFICATION	5.80285531599727E-6	DEFECT
// The method doesn't need a scope or static scope; frame only	WITHOUT_CLASSIFICATION	0.9999974406387921	WITHOUT_CLASSIFICATION	2.559361207937202E-6	DEFECT
// The method doesn't need a scope, but has static scope needs; use a dummy scope	WITHOUT_CLASSIFICATION	0.9999964178244513	WITHOUT_CLASSIFICATION	3.5821755486903204E-6	DEFECT
// Proc.new needs the caller's block to instantiate a proc	WITHOUT_CLASSIFICATION	0.9999998314007327	WITHOUT_CLASSIFICATION	1.6859926727540175E-7	DEFECT
// check for Proc.new, an especially magic method	WITHOUT_CLASSIFICATION	0.9999985807569266	WITHOUT_CLASSIFICATION	1.4192430734007732E-6	DEFECT
// long, slow way causes disabling	WITHOUT_CLASSIFICATION	0.9999998944920352	WITHOUT_CLASSIFICATION	1.0550796485200722E-7	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.999991429441156	WITHOUT_CLASSIFICATION	8.5705588439305E-6	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.999991429441156	WITHOUT_CLASSIFICATION	8.5705588439305E-6	DEFECT
// long, slow way causes disabling for defined	WITHOUT_CLASSIFICATION	0.9999999372798842	WITHOUT_CLASSIFICATION	6.2720115798267E-8	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999994923180512	WITHOUT_CLASSIFICATION	5.076819489301447E-7	DEFECT
// Because Regexp#=== sets backref, we have to make this backref-aware	WITHOUT_CLASSIFICATION	0.9999986599599076	WITHOUT_CLASSIFICATION	1.3400400925067566E-6	DEFECT
// encountered a node we don't recognize, set everything to true to disable optz	WITHOUT_CLASSIFICATION	0.9999978061855068	WITHOUT_CLASSIFICATION	2.193814493165917E-6	DEFECT
// only arrays that are "lightweight" are being used as args arrays	WITHOUT_CLASSIFICATION	0.9999989345024006	WITHOUT_CLASSIFICATION	1.065497599445651E-6	DEFECT
// otherwise, it's a literal array	WITHOUT_CLASSIFICATION	0.999998905828127	WITHOUT_CLASSIFICATION	1.0941718730280747E-6	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9999993828687963	WITHOUT_CLASSIFICATION	6.171312037961499E-7	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999966330035994	WITHOUT_CLASSIFICATION	3.366996400640028E-6	DEFECT
// compile first node as non-expr and then second node	WITHOUT_CLASSIFICATION	0.9999993746122575	WITHOUT_CLASSIFICATION	6.253877423597493E-7	DEFECT
// last node, either !instanceof WhenNode or null, is the else	WITHOUT_CLASSIFICATION	0.9999963829950295	WITHOUT_CLASSIFICATION	3.617004970670695E-6	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999873330385629	WITHOUT_CLASSIFICATION	1.266696143714985E-5	DEFECT
// splatted when, can't do it yet	WITHOUT_CLASSIFICATION	0.9998428492844559	WITHOUT_CLASSIFICATION	1.5715071554406104E-4	DEFECT
// if __send__ with a literal symbol, compile it as a direct fcall	WITHOUT_CLASSIFICATION	0.9999939533241319	WITHOUT_CLASSIFICATION	6.046675868226205E-6	DEFECT
// NOTE: Currently this optimization is limited to the following situations: // * All expressions must be int-ranged literal fixnums // It also still emits the code for the "safe" when logic, which is rather // wasteful (since it essentially doubles each code body). As such it is // normally disabled, but it serves as an example of how this optimization // could be done. Ideally, it should be combined with the when processing // to improve code reuse before it's generally available.	WITHOUT_CLASSIFICATION	0.9948409226097833	WITHOUT_CLASSIFICATION	0.005159077390216643	DEFECT
// aggregate when nodes into a list, unfortunately, this is no	WITHOUT_CLASSIFICATION	0.9999973371686361	WITHOUT_CLASSIFICATION	2.6628313637570773E-6	DEFECT
// one arg but it's an array, treat it as a proper array	WITHOUT_CLASSIFICATION	0.9999969702349307	WITHOUT_CLASSIFICATION	3.029765069238393E-6	DEFECT
// can't do it	WITHOUT_CLASSIFICATION	0.9999747973811822	WITHOUT_CLASSIFICATION	2.5202618817757514E-5	DEFECT
// otherwise, use normal args compiler	WITHOUT_CLASSIFICATION	0.9999975332409143	WITHOUT_CLASSIFICATION	2.466759085713997E-6	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999956524710546	WITHOUT_CLASSIFICATION	4.347528945484188E-6	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999956524710546	WITHOUT_CLASSIFICATION	4.347528945484188E-6	DEFECT
// these are all simple cases that don't require the heavier defined logic	WITHOUT_CLASSIFICATION	0.9999996008314618	WITHOUT_CLASSIFICATION	3.991685382234652E-7	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9999917061410757	WITHOUT_CLASSIFICATION	8.293858924361528E-6	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9999067123256864	WITHOUT_CLASSIFICATION	9.328767431369966E-5	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9999067123256864	WITHOUT_CLASSIFICATION	9.328767431369966E-5	DEFECT
//          context.swapValues(); //context.consumeCurrentValue();	WITHOUT_CLASSIFICATION	0.9999993655666186	WITHOUT_CLASSIFICATION	6.344333813392984E-7	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[] //[self] //[RubyClass] //[RubyClass, RubyClass]	WITHOUT_CLASSIFICATION	0.99999462975834	WITHOUT_CLASSIFICATION	5.370241659988568E-6	DEFECT
//[RubyClass]	WITHOUT_CLASSIFICATION	0.9999774979766365	WITHOUT_CLASSIFICATION	2.250202336347621E-5	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9999913238517409	WITHOUT_CLASSIFICATION	8.676148258978051E-6	DEFECT
// if root of method is rescue, compile as a light rescue	WITHOUT_CLASSIFICATION	0.9999932975635454	WITHOUT_CLASSIFICATION	6.7024364545696295E-6	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999901446444373	WITHOUT_CLASSIFICATION	9.855355562693967E-6	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999901446444373	WITHOUT_CLASSIFICATION	9.855355562693967E-6	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999995462917324	WITHOUT_CLASSIFICATION	4.5370826751660287E-7	DEFECT
// if root of method is rescue, compile as light rescue	WITHOUT_CLASSIFICATION	0.9999941403811645	WITHOUT_CLASSIFICATION	5.859618835415793E-6	DEFECT
// invoke run with threadcontext and topself	WITHOUT_CLASSIFICATION	0.9999979257414933	WITHOUT_CLASSIFICATION	2.074258506691225E-6	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9999932755722016	WITHOUT_CLASSIFICATION	6.724427798304103E-6	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9999917061410757	WITHOUT_CLASSIFICATION	8.293858924361528E-6	DEFECT
//[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9999898371237865	WITHOUT_CLASSIFICATION	1.0162876213528444E-5	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.999991542237904	WITHOUT_CLASSIFICATION	8.457762096037476E-6	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.999991542237904	WITHOUT_CLASSIFICATION	8.457762096037476E-6	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999971564196093	WITHOUT_CLASSIFICATION	2.8435803907572542E-6	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999356219474	WITHOUT_CLASSIFICATION	6.437805254059514E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999356219474	WITHOUT_CLASSIFICATION	6.437805254059514E-8	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.999993224339609	WITHOUT_CLASSIFICATION	6.775660390888606E-6	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.999993224339609	WITHOUT_CLASSIFICATION	6.775660390888606E-6	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.999993224339609	WITHOUT_CLASSIFICATION	6.775660390888606E-6	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999356219474	WITHOUT_CLASSIFICATION	6.437805254059514E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999356219474	WITHOUT_CLASSIFICATION	6.437805254059514E-8	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999971564196093	WITHOUT_CLASSIFICATION	2.8435803907572542E-6	DEFECT
// force heap-scope behavior, since it uses parent's scope	WITHOUT_CLASSIFICATION	0.9999999187513902	WITHOUT_CLASSIFICATION	8.124860976497049E-8	DEFECT
// always false or nil	WITHOUT_CLASSIFICATION	0.9999957877888064	WITHOUT_CLASSIFICATION	4.21221119361962E-6	DEFECT
// optimizations if we know ahead of time it will always be true or false	WITHOUT_CLASSIFICATION	0.9999793062638702	WITHOUT_CLASSIFICATION	2.0693736129827315E-5	DEFECT
// normal	WITHOUT_CLASSIFICATION	0.9999901552474306	WITHOUT_CLASSIFICATION	9.844752569351932E-6	DEFECT
// compile condition as non-expr and just compile "then" body	WITHOUT_CLASSIFICATION	0.9999997176916637	WITHOUT_CLASSIFICATION	2.82308336241887E-7	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9999994183027751	WITHOUT_CLASSIFICATION	5.81697224868025E-7	DEFECT
// just push nil for pragmas	WITHOUT_CLASSIFICATION	0.9999987140012847	WITHOUT_CLASSIFICATION	1.285998715314012E-6	DEFECT
// "assignment" means the value is already on the stack	WITHOUT_CLASSIFICATION	0.9999982266402869	WITHOUT_CLASSIFICATION	1.7733597130979372E-6	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999873330385629	WITHOUT_CLASSIFICATION	1.266696143714985E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999356219474	WITHOUT_CLASSIFICATION	6.437805254059514E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999356219474	WITHOUT_CLASSIFICATION	6.437805254059514E-8	DEFECT
// eval new value, call operator on old value, and assign	WITHOUT_CLASSIFICATION	0.9999998117096627	WITHOUT_CLASSIFICATION	1.8829033726743568E-7	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999932525980779	WITHOUT_CLASSIFICATION	6.747401922008039E-6	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999907413799305	WITHOUT_CLASSIFICATION	9.258620069589804E-6	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.999994308889663	WITHOUT_CLASSIFICATION	5.691110336981375E-6	DEFECT
// normal items at the "head" of the masgn	WITHOUT_CLASSIFICATION	0.9999976034330247	WITHOUT_CLASSIFICATION	2.3965669753471753E-6	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9999588267336192	WITHOUT_CLASSIFICATION	4.117326638067792E-5	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999997542414248	WITHOUT_CLASSIFICATION	2.457585751495323E-7	DEFECT
// only supports simple parallel assignment of up to 10 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999999774140255	WITHOUT_CLASSIFICATION	2.2585974505104685E-8	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.999998560775154	WITHOUT_CLASSIFICATION	1.4392248459909182E-6	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9999813818916478	WITHOUT_CLASSIFICATION	1.8618108352322222E-5	DEFECT
//RedoNode redoNode = (RedoNode)node;	WITHOUT_CLASSIFICATION	0.9999820367775237	WITHOUT_CLASSIFICATION	1.7963222476246858E-5	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999983925069901	WITHOUT_CLASSIFICATION	1.6074930099112355E-6	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.999997352050745	WITHOUT_CLASSIFICATION	2.647949254930076E-6	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999997150135987	WITHOUT_CLASSIFICATION	2.849864012158494E-7	DEFECT
// if arity 1, just compile the one element to save us the array cost	WITHOUT_CLASSIFICATION	0.9999965513389261	WITHOUT_CLASSIFICATION	3.448661073980595E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999921698456032	WITHOUT_CLASSIFICATION	7.830154396868018E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999921698456032	WITHOUT_CLASSIFICATION	7.830154396868018E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999921698456032	WITHOUT_CLASSIFICATION	7.830154396868018E-6	DEFECT
// compile into array	WITHOUT_CLASSIFICATION	0.9999938803412991	WITHOUT_CLASSIFICATION	6.119658700869611E-6	DEFECT
// compile first node as non-expr and compile second node	WITHOUT_CLASSIFICATION	0.9999992051026437	WITHOUT_CLASSIFICATION	7.948973563567576E-7	DEFECT
// check if it's an immediate, and don't outline	WITHOUT_CLASSIFICATION	0.9999919171618216	WITHOUT_CLASSIFICATION	8.082838178509243E-6	DEFECT
// condition is always true, just compile it and not body	WITHOUT_CLASSIFICATION	0.9999803847568779	WITHOUT_CLASSIFICATION	1.9615243122103603E-5	DEFECT
// force static scope to claim restarg at 0, so it only implements the [] version of __file__	WITHOUT_CLASSIFICATION	0.9999998561600139	WITHOUT_CLASSIFICATION	1.4383998613275328E-7	DEFECT
// create method for toplevel of script	WITHOUT_CLASSIFICATION	0.9999997864614609	WITHOUT_CLASSIFICATION	2.1353853910630085E-7	DEFECT
// it's a multiple-statement body, iterate over all elements in turn and chain if it get too long	WITHOUT_CLASSIFICATION	0.9999999944976313	WITHOUT_CLASSIFICATION	5.502368712330869E-9	DEFECT
// send it along as arity-specific, we don't need the array	WITHOUT_CLASSIFICATION	0.9999986269109057	WITHOUT_CLASSIFICATION	1.3730890942505456E-6	DEFECT
// single-statement body, just compile it	WITHOUT_CLASSIFICATION	0.9999992668679075	WITHOUT_CLASSIFICATION	7.331320925052294E-7	DEFECT
// leave as a normal array	WITHOUT_CLASSIFICATION	0.9999875537300231	WITHOUT_CLASSIFICATION	1.2446269976847323E-5	DEFECT
// This method has JITed already or has been abandoned. Bail out.	WITHOUT_CLASSIFICATION	0.9999915007887399	WITHOUT_CLASSIFICATION	8.49921126010712E-6	DEFECT
// The cache is full. Abandon JIT for this method and bail out.	WITHOUT_CLASSIFICATION	0.9999771181572891	WITHOUT_CLASSIFICATION	2.2881842710934346E-5	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999995462917324	WITHOUT_CLASSIFICATION	4.5370826751660287E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999356219474	WITHOUT_CLASSIFICATION	6.437805254059514E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999356219474	WITHOUT_CLASSIFICATION	6.437805254059514E-8	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999971564196093	WITHOUT_CLASSIFICATION	2.8435803907572542E-6	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9999994183027751	WITHOUT_CLASSIFICATION	5.81697224868025E-7	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999932525980779	WITHOUT_CLASSIFICATION	6.747401922008039E-6	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.999994308889663	WITHOUT_CLASSIFICATION	5.691110336981375E-6	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9999588267336192	WITHOUT_CLASSIFICATION	4.117326638067792E-5	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999907413799305	WITHOUT_CLASSIFICATION	9.258620069589804E-6	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999997542414248	WITHOUT_CLASSIFICATION	2.457585751495323E-7	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9999813818916478	WITHOUT_CLASSIFICATION	1.8618108352322222E-5	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.999998560775154	WITHOUT_CLASSIFICATION	1.4392248459909182E-6	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999983925069901	WITHOUT_CLASSIFICATION	1.6074930099112355E-6	DEFECT
// Check if the method has been explicitly excluded	WITHOUT_CLASSIFICATION	0.9999990674042045	WITHOUT_CLASSIFICATION	9.325957955187491E-7	DEFECT
// class could not be found nor generated; give up on JIT and bail out	WITHOUT_CLASSIFICATION	0.9999839430950628	WITHOUT_CLASSIFICATION	1.6056904937182874E-5	DEFECT
// successfully got back a jitted method	WITHOUT_CLASSIFICATION	0.999998760550047	WITHOUT_CLASSIFICATION	1.23944995296786E-6	DEFECT
// finally, grab the script	WITHOUT_CLASSIFICATION	0.9999971359676801	WITHOUT_CLASSIFICATION	2.864032319848298E-6	DEFECT
// logEvery n methods based on configuration	WITHOUT_CLASSIFICATION	0.9999971390500169	WITHOUT_CLASSIFICATION	2.8609499830654953E-6	DEFECT
// Time the compilation	WITHOUT_CLASSIFICATION	0.9998648734505908	WITHOUT_CLASSIFICATION	1.3512654940924865E-4	DEFECT
// we have a body, do a full-on method	WITHOUT_CLASSIFICATION	0.9999990360527737	WITHOUT_CLASSIFICATION	9.639472262678255E-7	DEFECT
// If we don't have a body, check for required or opt args // if opt args, they could have side effects // if required args, need to raise errors if too few args passed // otherwise, method does nothing, make it a nop	WITHOUT_CLASSIFICATION	0.9999795292465191	WITHOUT_CLASSIFICATION	2.0470753480868612E-5	DEFECT
// if we haven't already decided on a do-nothing call	WITHOUT_CLASSIFICATION	0.9999308023704977	WITHOUT_CLASSIFICATION	6.919762950239206E-5	DEFECT
// only supports simple parallel assignment of up to 4 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999999738123873	WITHOUT_CLASSIFICATION	2.6187612658178496E-8	DEFECT
// normal items at the front or back of the masgn	WITHOUT_CLASSIFICATION	0.9999978177975571	WITHOUT_CLASSIFICATION	2.1822024429356574E-6	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999996155275507	WITHOUT_CLASSIFICATION	3.844724493521119E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999994189904489	WITHOUT_CLASSIFICATION	5.810095511416776E-7	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999996315551881	WITHOUT_CLASSIFICATION	3.6844481189564344E-7	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999985852000158	WITHOUT_CLASSIFICATION	1.4147999842630752E-6	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999957268749676	WITHOUT_CLASSIFICATION	4.273125032326924E-6	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999984704799516	WITHOUT_CLASSIFICATION	1.529520048397294E-6	DEFECT
// Define the annotation for the method	WITHOUT_CLASSIFICATION	0.9999975653704278	WITHOUT_CLASSIFICATION	2.434629572267812E-6	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9999975467236037	WITHOUT_CLASSIFICATION	2.45327639624654E-6	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999981018977602	WITHOUT_CLASSIFICATION	1.8981022399161403E-6	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999996845813371	WITHOUT_CLASSIFICATION	3.1541866277783445E-7	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999976876799805	WITHOUT_CLASSIFICATION	2.312320019493588E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999976876799805	WITHOUT_CLASSIFICATION	2.312320019493588E-6	DEFECT
// value is already on stack, save it for later	WITHOUT_CLASSIFICATION	0.9999937194122044	WITHOUT_CLASSIFICATION	6.2805877956302725E-6	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9999975792917103	WITHOUT_CLASSIFICATION	2.420708289761016E-6	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9997696481215874	WITHOUT_CLASSIFICATION	2.303518784125733E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9997696481215874	WITHOUT_CLASSIFICATION	2.303518784125733E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9997696481215874	WITHOUT_CLASSIFICATION	2.303518784125733E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999728455669233	WITHOUT_CLASSIFICATION	2.7154433076693174E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999728455669233	WITHOUT_CLASSIFICATION	2.7154433076693174E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999728455669233	WITHOUT_CLASSIFICATION	2.7154433076693174E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999728455669233	WITHOUT_CLASSIFICATION	2.7154433076693174E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.999969894085778	WITHOUT_CLASSIFICATION	3.010591422205859E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.999969894085778	WITHOUT_CLASSIFICATION	3.010591422205859E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.999969894085778	WITHOUT_CLASSIFICATION	3.010591422205859E-5	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.99997030065457	WITHOUT_CLASSIFICATION	2.9699345429940092E-5	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.99997030065457	WITHOUT_CLASSIFICATION	2.9699345429940092E-5	DEFECT
/*arg2*/	WITHOUT_CLASSIFICATION	0.9999692133394809	WITHOUT_CLASSIFICATION	3.078666051917753E-5	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9999763804765057	WITHOUT_CLASSIFICATION	2.361952349429309E-5	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9999975792917103	WITHOUT_CLASSIFICATION	2.420708289761016E-6	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9999991139685696	WITHOUT_CLASSIFICATION	8.860314305097351E-7	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9997696481215874	WITHOUT_CLASSIFICATION	2.303518784125733E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9997696481215874	WITHOUT_CLASSIFICATION	2.303518784125733E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999728455669233	WITHOUT_CLASSIFICATION	2.7154433076693174E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999728455669233	WITHOUT_CLASSIFICATION	2.7154433076693174E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999728455669233	WITHOUT_CLASSIFICATION	2.7154433076693174E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.999969894085778	WITHOUT_CLASSIFICATION	3.010591422205859E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.999969894085778	WITHOUT_CLASSIFICATION	3.010591422205859E-5	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.99997030065457	WITHOUT_CLASSIFICATION	2.9699345429940092E-5	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9999763804765057	WITHOUT_CLASSIFICATION	2.361952349429309E-5	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9999981060456985	WITHOUT_CLASSIFICATION	1.8939543014815712E-6	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9999981060456985	WITHOUT_CLASSIFICATION	1.8939543014815712E-6	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999994466097751	WITHOUT_CLASSIFICATION	5.533902247668368E-7	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999994466097751	WITHOUT_CLASSIFICATION	5.533902247668368E-7	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.999990364016115	WITHOUT_CLASSIFICATION	9.635983885055827E-6	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.999990364016115	WITHOUT_CLASSIFICATION	9.635983885055827E-6	DEFECT
// check if it's true, ending if so	WITHOUT_CLASSIFICATION	0.9999966255785703	WITHOUT_CLASSIFICATION	3.3744214296687303E-6	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9999991887343944	WITHOUT_CLASSIFICATION	8.112656055950344E-7	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9999991887343944	WITHOUT_CLASSIFICATION	8.112656055950344E-7	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999963312777745	WITHOUT_CLASSIFICATION	3.66872222554425E-6	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999963312777745	WITHOUT_CLASSIFICATION	3.66872222554425E-6	DEFECT
// eval value for assignment	WITHOUT_CLASSIFICATION	0.999999529892131	WITHOUT_CLASSIFICATION	4.701078689036231E-7	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9999987262356864	WITHOUT_CLASSIFICATION	1.2737643136050124E-6	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9999987262356864	WITHOUT_CLASSIFICATION	1.2737643136050124E-6	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9999997138579075	WITHOUT_CLASSIFICATION	2.8614209249026443E-7	DEFECT
// check if it's true, ending if not	WITHOUT_CLASSIFICATION	0.9999836189439476	WITHOUT_CLASSIFICATION	1.638105605243937E-5	DEFECT
// eval value and save it	WITHOUT_CLASSIFICATION	0.9999978969503984	WITHOUT_CLASSIFICATION	2.1030496015217027E-6	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999728455669233	WITHOUT_CLASSIFICATION	2.7154433076693174E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999728455669233	WITHOUT_CLASSIFICATION	2.7154433076693174E-5	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9999997138579075	WITHOUT_CLASSIFICATION	2.8614209249026443E-7	DEFECT
// receiver, args, result, value	WITHOUT_CLASSIFICATION	0.9999929618109609	WITHOUT_CLASSIFICATION	7.038189039165725E-6	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999933771135523	WITHOUT_CLASSIFICATION	6.62288644767374E-6	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999933771135523	WITHOUT_CLASSIFICATION	6.62288644767374E-6	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999933771135523	WITHOUT_CLASSIFICATION	6.62288644767374E-6	DEFECT
// super uses current block if none given	WITHOUT_CLASSIFICATION	0.9999989716193817	WITHOUT_CLASSIFICATION	1.028380618262321E-6	DEFECT
// args	WITHOUT_CLASSIFICATION	0.999997496557185	WITHOUT_CLASSIFICATION	2.5034428151375726E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999920168382573	WITHOUT_CLASSIFICATION	7.983161742574342E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999920168382573	WITHOUT_CLASSIFICATION	7.983161742574342E-6	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999982833158177	WITHOUT_CLASSIFICATION	1.716684182202752E-6	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999959528713935	WITHOUT_CLASSIFICATION	4.047128606434897E-6	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.999996829063796	WITHOUT_CLASSIFICATION	3.1709362040671816E-6	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999967780753668	WITHOUT_CLASSIFICATION	3.2219246331356463E-6	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9999966341570106	WITHOUT_CLASSIFICATION	3.3658429893957016E-6	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9999980627302545	WITHOUT_CLASSIFICATION	1.9372697454596415E-6	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9999980627302545	WITHOUT_CLASSIFICATION	1.9372697454596415E-6	DEFECT
// arg and receiver already present on the stack	WITHOUT_CLASSIFICATION	0.9999993782174302	WITHOUT_CLASSIFICATION	6.217825697626771E-7	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9999670731033198	WITHOUT_CLASSIFICATION	3.2926896680168175E-5	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9999670731033198	WITHOUT_CLASSIFICATION	3.2926896680168175E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999728455669233	WITHOUT_CLASSIFICATION	2.7154433076693174E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999933771135523	WITHOUT_CLASSIFICATION	6.62288644767374E-6	DEFECT
// args	WITHOUT_CLASSIFICATION	0.999997496557185	WITHOUT_CLASSIFICATION	2.5034428151375726E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999920168382573	WITHOUT_CLASSIFICATION	7.983161742574342E-6	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999982833158177	WITHOUT_CLASSIFICATION	1.716684182202752E-6	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999959528713935	WITHOUT_CLASSIFICATION	4.047128606434897E-6	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.999996829063796	WITHOUT_CLASSIFICATION	3.1709362040671816E-6	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999967780753668	WITHOUT_CLASSIFICATION	3.2219246331356463E-6	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9999670731033198	WITHOUT_CLASSIFICATION	3.2926896680168175E-5	DEFECT
// retrieve scope from scopes array	WITHOUT_CLASSIFICATION	0.9999946238951019	WITHOUT_CLASSIFICATION	5.3761048982015674E-6	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999992402583632	WITHOUT_CLASSIFICATION	7.59741636795834E-7	DEFECT
// retrieve call site from sites array	WITHOUT_CLASSIFICATION	0.9999972076004153	WITHOUT_CLASSIFICATION	2.7923995846482884E-6	DEFECT
// add name to call site list	WITHOUT_CLASSIFICATION	0.9999988819008113	WITHOUT_CLASSIFICATION	1.118099188666294E-6	DEFECT
// module is on top of stack	WITHOUT_CLASSIFICATION	0.9999956681113509	WITHOUT_CLASSIFICATION	4.331888649151264E-6	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999934452252701	WITHOUT_CLASSIFICATION	6.5547747298443254E-6	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999956854900477	WITHOUT_CLASSIFICATION	4.314509952266911E-6	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999956854900477	WITHOUT_CLASSIFICATION	4.314509952266911E-6	DEFECT
// generate call sites initialization code	WITHOUT_CLASSIFICATION	0.9999937822272241	WITHOUT_CLASSIFICATION	6.2177727757961254E-6	DEFECT
// generate symbols initialization code	WITHOUT_CLASSIFICATION	0.9999877332517656	WITHOUT_CLASSIFICATION	1.2266748234457006E-5	DEFECT
// generate fixnums initialization code	WITHOUT_CLASSIFICATION	0.9999120723390008	WITHOUT_CLASSIFICATION	8.792766099923492E-5	DEFECT
// generate constants initialization code	WITHOUT_CLASSIFICATION	0.9999933936698938	WITHOUT_CLASSIFICATION	6.606330106224845E-6	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9999918479999421	WITHOUT_CLASSIFICATION	8.152000057878413E-6	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9999918479999421	WITHOUT_CLASSIFICATION	8.152000057878413E-6	DEFECT
// generate variable readers initialization code	WITHOUT_CLASSIFICATION	0.9999807303640441	WITHOUT_CLASSIFICATION	1.9269635955932733E-5	DEFECT
// generate variable writers initialization code	WITHOUT_CLASSIFICATION	0.9999851547969586	WITHOUT_CLASSIFICATION	1.4845203041288626E-5	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9999892753138095	WITHOUT_CLASSIFICATION	1.0724686190326803E-5	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9999892753138095	WITHOUT_CLASSIFICATION	1.0724686190326803E-5	DEFECT
// generate bytelists initialization code	WITHOUT_CLASSIFICATION	0.9999934250719639	WITHOUT_CLASSIFICATION	6.574928036235637E-6	DEFECT
// generate method cache initialization code	WITHOUT_CLASSIFICATION	0.9999931248208197	WITHOUT_CLASSIFICATION	6.8751791802669985E-6	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9999966341570106	WITHOUT_CLASSIFICATION	3.3658429893957016E-6	DEFECT
// use IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999958961326246	WITHOUT_CLASSIFICATION	4.103867375436099E-6	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999941568410682	WITHOUT_CLASSIFICATION	5.8431589317924455E-6	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999969873439429	WITHOUT_CLASSIFICATION	3.0126560570700616E-6	DEFECT
// No point in updating number if last number was same value.	WITHOUT_CLASSIFICATION	0.9999999503038872	WITHOUT_CLASSIFICATION	4.969611269105259E-8	DEFECT
// load Object under value	WITHOUT_CLASSIFICATION	0.9999948307337515	WITHOUT_CLASSIFICATION	5.169266248533101E-6	DEFECT
// put under object array already present	WITHOUT_CLASSIFICATION	0.9999985076173269	WITHOUT_CLASSIFICATION	1.4923826731273025E-6	DEFECT
// if element count is less than 6, use helper methods	WITHOUT_CLASSIFICATION	0.9999988569548954	WITHOUT_CLASSIFICATION	1.1430451045168945E-6	DEFECT
// This is pretty inefficient for building an array, so just raise an error if someone's using it for a lot of elements	WITHOUT_CLASSIFICATION	0.9999925325410607	WITHOUT_CLASSIFICATION	7.467458939321337E-6	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9999987860344671	WITHOUT_CLASSIFICATION	1.2139655328963504E-6	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9999987860344671	WITHOUT_CLASSIFICATION	1.2139655328963504E-6	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9999945155433955	WITHOUT_CLASSIFICATION	5.484456604505481E-6	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9999945155433955	WITHOUT_CLASSIFICATION	5.484456604505481E-6	DEFECT
// use specific-arity for as much as possible	WITHOUT_CLASSIFICATION	0.9999999011443538	WITHOUT_CLASSIFICATION	9.885564622076052E-8	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999906932375453	WITHOUT_CLASSIFICATION	9.306762454738974E-6	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999906932375453	WITHOUT_CLASSIFICATION	9.306762454738974E-6	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999906932375453	WITHOUT_CLASSIFICATION	9.306762454738974E-6	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999683273112282	WITHOUT_CLASSIFICATION	3.167268877184265E-5	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999991803878011	WITHOUT_CLASSIFICATION	8.196121989392779E-7	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999991803878011	WITHOUT_CLASSIFICATION	8.196121989392779E-7	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999998300046529	WITHOUT_CLASSIFICATION	1.6999534707347243E-7	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9999656421928302	WITHOUT_CLASSIFICATION	3.435780716983709E-5	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999636179578424	WITHOUT_CLASSIFICATION	3.638204215771294E-5	DEFECT
// skip catch block	WITHOUT_CLASSIFICATION	0.9999987965948818	WITHOUT_CLASSIFICATION	1.203405118215796E-6	DEFECT
// catch logic for flow-control: next, break	WITHOUT_CLASSIFICATION	0.9999972803055079	WITHOUT_CLASSIFICATION	2.719694492131514E-6	DEFECT
// next jump	WITHOUT_CLASSIFICATION	0.9999958716182461	WITHOUT_CLASSIFICATION	4.1283817538554596E-6	DEFECT
// exceptionNext target is for a next that doesn't push a new value, like this one	WITHOUT_CLASSIFICATION	0.9999945323191841	WITHOUT_CLASSIFICATION	5.467680815936308E-6	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999994189904489	WITHOUT_CLASSIFICATION	5.810095511416776E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999994189904489	WITHOUT_CLASSIFICATION	5.810095511416776E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999683273112282	WITHOUT_CLASSIFICATION	3.167268877184265E-5	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999998300046529	WITHOUT_CLASSIFICATION	1.6999534707347243E-7	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999976711854359	WITHOUT_CLASSIFICATION	2.3288145640689713E-6	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9999656421928302	WITHOUT_CLASSIFICATION	3.435780716983709E-5	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999636179578424	WITHOUT_CLASSIFICATION	3.638204215771294E-5	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9999997933621009	WITHOUT_CLASSIFICATION	2.0663789921915263E-7	DEFECT
// break jump	WITHOUT_CLASSIFICATION	0.9999931763416923	WITHOUT_CLASSIFICATION	6.823658307788914E-6	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999860460823415	WITHOUT_CLASSIFICATION	1.3953917658355339E-5	DEFECT
//[reg]	WITHOUT_CLASSIFICATION	0.9999510059678371	WITHOUT_CLASSIFICATION	4.899403216290153E-5	DEFECT
// for regular expressions with the /o flag	WITHOUT_CLASSIFICATION	0.9999994852652686	WITHOUT_CLASSIFICATION	5.147347313536444E-7	DEFECT
// inside a loop, jump to body	WITHOUT_CLASSIFICATION	0.9999996497805985	WITHOUT_CLASSIFICATION	3.5021940149338274E-7	DEFECT
// inside a loop, jump to conditional	WITHOUT_CLASSIFICATION	0.9999998389732107	WITHOUT_CLASSIFICATION	1.6102678924797192E-7	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9999997933621009	WITHOUT_CLASSIFICATION	2.0663789921915263E-7	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9999992170872961	WITHOUT_CLASSIFICATION	7.82912703907346E-7	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9999992170872961	WITHOUT_CLASSIFICATION	7.82912703907346E-7	DEFECT
// if more than 4 vars, get values array too	WITHOUT_CLASSIFICATION	0.9999971286456922	WITHOUT_CLASSIFICATION	2.871354307740053E-6	DEFECT
// retry handling in the rescue block	WITHOUT_CLASSIFICATION	0.9999994452987833	WITHOUT_CLASSIFICATION	5.547012167056258E-7	DEFECT
// any exceptions raised must continue to be raised, skipping $! restoration	WITHOUT_CLASSIFICATION	0.9999587553008842	WITHOUT_CLASSIFICATION	4.124469911579648E-5	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9999993499621376	WITHOUT_CLASSIFICATION	6.50037862512049E-7	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9999992733947614	WITHOUT_CLASSIFICATION	7.266052386004894E-7	DEFECT
// Handle Flow exceptions, just propagating them	WITHOUT_CLASSIFICATION	0.9999998222060325	WITHOUT_CLASSIFICATION	1.777939675507122E-7	DEFECT
// rethrow to outer flow catcher	WITHOUT_CLASSIFICATION	0.9999996475753942	WITHOUT_CLASSIFICATION	3.5242460583928493E-7	DEFECT
// Handle Ruby exceptions (RaiseException)	WITHOUT_CLASSIFICATION	0.9999989106105136	WITHOUT_CLASSIFICATION	1.0893894863507179E-6	DEFECT
// inside a loop, break out of it // go to end of loop, leaving break value on stack	WITHOUT_CLASSIFICATION	0.9999998900364253	WITHOUT_CLASSIFICATION	1.099635746311364E-7	DEFECT
// false // zero	WITHOUT_CLASSIFICATION	0.9999869584855632	WITHOUT_CLASSIFICATION	1.3041514436763107E-5	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999994902580519	WITHOUT_CLASSIFICATION	5.097419480585853E-7	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9999993499621376	WITHOUT_CLASSIFICATION	6.50037862512049E-7	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9999992733947614	WITHOUT_CLASSIFICATION	7.266052386004894E-7	DEFECT
// retry handling in the rescue blocks	WITHOUT_CLASSIFICATION	0.9999995899839054	WITHOUT_CLASSIFICATION	4.1001609473414043E-7	DEFECT
// push false	WITHOUT_CLASSIFICATION	0.9999933971364181	WITHOUT_CLASSIFICATION	6.602863581923322E-6	DEFECT
//method.invokeinterface(p(IRubyObject.class), "getInstanceVariable", sig(IRubyObject.class, params(String.class)));	WITHOUT_CLASSIFICATION	0.9999998662594165	WITHOUT_CLASSIFICATION	1.3374058342550944E-7	DEFECT
//method.ifnonnull(trueLabel);	WITHOUT_CLASSIFICATION	0.9999882802808938	WITHOUT_CLASSIFICATION	1.1719719106256303E-5	DEFECT
// EQ == 0 (i.e. false)   //[C]	WITHOUT_CLASSIFICATION	0.9999658834546946	WITHOUT_CLASSIFICATION	3.4116545305384415E-5	DEFECT
//[C, C] //[C, C, String] //[C, null|C]	WITHOUT_CLASSIFICATION	0.9999062435411901	WITHOUT_CLASSIFICATION	9.375645880991849E-5	DEFECT
//[C]	WITHOUT_CLASSIFICATION	0.9999050682399813	WITHOUT_CLASSIFICATION	9.493176001872683E-5	DEFECT
// push true	WITHOUT_CLASSIFICATION	0.9999911426713523	WITHOUT_CLASSIFICATION	8.8573286476677E-6	DEFECT
// EQ != 0 (i.e. true)	WITHOUT_CLASSIFICATION	0.9999403785143123	WITHOUT_CLASSIFICATION	5.962148568765852E-5	DEFECT
//[?, ?] //[?, boolean]	WITHOUT_CLASSIFICATION	0.9999836895129598	WITHOUT_CLASSIFICATION	1.631048704018912E-5	DEFECT
//[RubyModule] //[RubyModule, String]	WITHOUT_CLASSIFICATION	0.999976575413409	WITHOUT_CLASSIFICATION	2.3424586590919936E-5	DEFECT
//[boolean]	WITHOUT_CLASSIFICATION	0.999986167398927	WITHOUT_CLASSIFICATION	1.3832601073117388E-5	DEFECT
// no receiver for singleton class	WITHOUT_CLASSIFICATION	0.9999993011776044	WITHOUT_CLASSIFICATION	6.98822395687266E-7	DEFECT
// but there's a superclass passed in, use it	WITHOUT_CLASSIFICATION	0.9999979193966889	WITHOUT_CLASSIFICATION	2.0806033111461978E-6	DEFECT
// we re-set self to the class, but store the old self in a temporary local variable // this is to prevent it GCing in case the singleton is short-lived	WITHOUT_CLASSIFICATION	0.9999993796679234	WITHOUT_CLASSIFICATION	6.203320765640522E-7	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999986873853736	WITHOUT_CLASSIFICATION	1.3126146264060793E-6	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.999967855575043	WITHOUT_CLASSIFICATION	3.214442495709162E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999976443048231	WITHOUT_CLASSIFICATION	2.355695176808187E-6	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999998880827996	WITHOUT_CLASSIFICATION	1.1191720037242985E-7	DEFECT
// new instance to invoke run against	WITHOUT_CLASSIFICATION	0.999999220944741	WITHOUT_CLASSIFICATION	7.790552589154023E-7	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.999967855575043	WITHOUT_CLASSIFICATION	3.214442495709162E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999976443048231	WITHOUT_CLASSIFICATION	2.355695176808187E-6	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999998880827996	WITHOUT_CLASSIFICATION	1.1191720037242985E-7	DEFECT
// finally with exception	WITHOUT_CLASSIFICATION	0.9999254161281641	WITHOUT_CLASSIFICATION	7.458387183589296E-5	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9999996320151329	WITHOUT_CLASSIFICATION	3.679848671476724E-7	DEFECT
// otherwise, there's a receiver, so we pass that in directly for the sclass logic	WITHOUT_CLASSIFICATION	0.9999992178458772	WITHOUT_CLASSIFICATION	7.821541228140025E-7	DEFECT
// original exception is on stack	WITHOUT_CLASSIFICATION	0.99999604234178	WITHOUT_CLASSIFICATION	3.957658220066793E-6	DEFECT
// RaiseException is on stack, get RubyException out	WITHOUT_CLASSIFICATION	0.9999945665809119	WITHOUT_CLASSIFICATION	5.4334190880064766E-6	DEFECT
// updating position for same line; skip	WITHOUT_CLASSIFICATION	0.9999991511347109	WITHOUT_CLASSIFICATION	8.488652890552074E-7	DEFECT
// callbacks to fill in method body	WITHOUT_CLASSIFICATION	0.9999976829092609	WITHOUT_CLASSIFICATION	2.3170907390911655E-6	DEFECT
// prepare to call "def" utility method to handle def logic	WITHOUT_CLASSIFICATION	0.999999894123358	WITHOUT_CLASSIFICATION	1.0587664207613126E-7	DEFECT
// script object	WITHOUT_CLASSIFICATION	0.9999969645473904	WITHOUT_CLASSIFICATION	3.035452609585719E-6	DEFECT
// arities	WITHOUT_CLASSIFICATION	0.9999983301115539	WITHOUT_CLASSIFICATION	1.6698884460342213E-6	DEFECT
// TODO assuming case is a fixnum	WITHOUT_CLASSIFICATION	0.9105497654213802	WITHOUT_CLASSIFICATION	0.08945023457861978	DEFECT
// we have an input case, prepare branching logic	WITHOUT_CLASSIFICATION	0.9999984322066512	WITHOUT_CLASSIFICATION	1.5677933488342748E-6	DEFECT
// we have optimized switch cases, build a lookupswitch	WITHOUT_CLASSIFICATION	0.9999995525589999	WITHOUT_CLASSIFICATION	4.474410000880194E-7	DEFECT
// checkcast the value; if match, fast path; otherwise proceed to slow logic	WITHOUT_CLASSIFICATION	0.9999999775059458	WITHOUT_CLASSIFICATION	2.2494054196918696E-8	DEFECT
// expression-based tests + bodies	WITHOUT_CLASSIFICATION	0.99999982590764	WITHOUT_CLASSIFICATION	1.7409236004372673E-7	DEFECT
// normal case, create a new label	WITHOUT_CLASSIFICATION	0.9999997583979501	WITHOUT_CLASSIFICATION	2.4160204988202183E-7	DEFECT
// last conditional case, use defaultCase	WITHOUT_CLASSIFICATION	0.9999997911567483	WITHOUT_CLASSIFICATION	2.0884325167685436E-7	DEFECT
// do nothing; arity check is done before call	WITHOUT_CLASSIFICATION	0.9999660552829065	WITHOUT_CLASSIFICATION	3.3944717093405705E-5	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999991174968806	WITHOUT_CLASSIFICATION	8.825031194376935E-7	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999994507294065	WITHOUT_CLASSIFICATION	5.492705934169514E-7	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999884836089677	WITHOUT_CLASSIFICATION	1.1516391032264233E-5	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999850417383258	WITHOUT_CLASSIFICATION	1.4958261674266704E-5	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999850417383258	WITHOUT_CLASSIFICATION	1.4958261674266704E-5	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.99999877856645	WITHOUT_CLASSIFICATION	1.2214335500419796E-6	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.99999877856645	WITHOUT_CLASSIFICATION	1.2214335500419796E-6	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999999691666803	WITHOUT_CLASSIFICATION	3.083331962797055E-8	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999999691666803	WITHOUT_CLASSIFICATION	3.083331962797055E-8	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999997227377118	WITHOUT_CLASSIFICATION	2.772622882573862E-7	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999997892958966	WITHOUT_CLASSIFICATION	2.1070410336132473E-7	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999989136147963	WITHOUT_CLASSIFICATION	1.0863852036836588E-6	DEFECT
// if there's args left and we want them, assign to rest arg	WITHOUT_CLASSIFICATION	0.9999998450776207	WITHOUT_CLASSIFICATION	1.549223792161381E-7	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999994889767613	WITHOUT_CLASSIFICATION	5.110232387367674E-7	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999996504052263	WITHOUT_CLASSIFICATION	3.4959477367293665E-7	DEFECT
// first, iterate over all pre args	WITHOUT_CLASSIFICATION	0.9999995394230902	WITHOUT_CLASSIFICATION	4.605769098042132E-7	DEFECT
// then optional args	WITHOUT_CLASSIFICATION	0.9999981855172947	WITHOUT_CLASSIFICATION	1.8144827053040298E-6	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999994189904489	WITHOUT_CLASSIFICATION	5.810095511416776E-7	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999997227377118	WITHOUT_CLASSIFICATION	2.772622882573862E-7	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999997892958966	WITHOUT_CLASSIFICATION	2.1070410336132473E-7	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999989136147963	WITHOUT_CLASSIFICATION	1.0863852036836588E-6	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999994889767613	WITHOUT_CLASSIFICATION	5.110232387367674E-7	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999996504052263	WITHOUT_CLASSIFICATION	3.4959477367293665E-7	DEFECT
// if rest args, excluding post args	WITHOUT_CLASSIFICATION	0.9999977602314196	WITHOUT_CLASSIFICATION	2.2397685803082146E-6	DEFECT
// finally, post args	WITHOUT_CLASSIFICATION	0.9999938675628606	WITHOUT_CLASSIFICATION	6.132437139368128E-6	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9999659265866286	WITHOUT_CLASSIFICATION	3.407341337128167E-5	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9999659265866286	WITHOUT_CLASSIFICATION	3.407341337128167E-5	DEFECT
// unwrap scopes to appropriate depth	WITHOUT_CLASSIFICATION	0.9999990138222326	WITHOUT_CLASSIFICATION	9.861777675014243E-7	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999965324262904	WITHOUT_CLASSIFICATION	3.4675737096459607E-6	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999997653694161	WITHOUT_CLASSIFICATION	2.3463058375492754E-7	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.999997566541977	WITHOUT_CLASSIFICATION	2.4334580228906438E-6	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.999997566541977	WITHOUT_CLASSIFICATION	2.4334580228906438E-6	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9999995938724195	WITHOUT_CLASSIFICATION	4.061275804671271E-7	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999998357744979	WITHOUT_CLASSIFICATION	1.6422550211536602E-7	DEFECT
// store the local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999996492749187	WITHOUT_CLASSIFICATION	3.507250812983132E-7	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999990860325239	WITHOUT_CLASSIFICATION	9.139674761670774E-7	DEFECT
// return in a class body raises error	WITHOUT_CLASSIFICATION	0.9999893558158934	WITHOUT_CLASSIFICATION	1.0644184106665192E-5	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999996315551881	WITHOUT_CLASSIFICATION	3.6844481189564344E-7	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999985852000158	WITHOUT_CLASSIFICATION	1.4147999842630752E-6	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999957268749676	WITHOUT_CLASSIFICATION	4.273125032326924E-6	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999984704799516	WITHOUT_CLASSIFICATION	1.529520048397294E-6	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999981018977602	WITHOUT_CLASSIFICATION	1.8981022399161403E-6	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999996845813371	WITHOUT_CLASSIFICATION	3.1541866277783445E-7	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9999995938724195	WITHOUT_CLASSIFICATION	4.061275804671271E-7	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999998357744979	WITHOUT_CLASSIFICATION	1.6422550211536602E-7	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999990860325239	WITHOUT_CLASSIFICATION	9.139674761670774E-7	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999996365436572	WITHOUT_CLASSIFICATION	3.6345634270923023E-7	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999997653694161	WITHOUT_CLASSIFICATION	2.3463058375492754E-7	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999997653694161	WITHOUT_CLASSIFICATION	2.3463058375492754E-7	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999994902580519	WITHOUT_CLASSIFICATION	5.097419480585853E-7	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999994902580519	WITHOUT_CLASSIFICATION	5.097419480585853E-7	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9998665225750736	WITHOUT_CLASSIFICATION	1.334774249264001E-4	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9998665225750736	WITHOUT_CLASSIFICATION	1.334774249264001E-4	DEFECT
// store the local vars in a local variable if there are any	WITHOUT_CLASSIFICATION	0.9999997867157276	WITHOUT_CLASSIFICATION	2.1328427242651555E-7	DEFECT
// if more than 4 locals, get and populate the locals array too	WITHOUT_CLASSIFICATION	0.9999997002138463	WITHOUT_CLASSIFICATION	2.997861536639045E-7	DEFECT
// fill local vars with nil, to avoid checking every access.	WITHOUT_CLASSIFICATION	0.9999897072683139	WITHOUT_CLASSIFICATION	1.0292731686093588E-5	DEFECT
// default for starting tempVariableIndex is ok	WITHOUT_CLASSIFICATION	0.999997698602686	WITHOUT_CLASSIFICATION	2.3013973140792627E-6	DEFECT
// store the local vars in a local variable for preparing the class (using previous scope)	WITHOUT_CLASSIFICATION	0.9999999698265992	WITHOUT_CLASSIFICATION	3.0173400736541334E-8	DEFECT
// store the new local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999996939681748	WITHOUT_CLASSIFICATION	3.06031825210672E-7	DEFECT
// in 1.8 mode, this will be a RubyArray containing the arguments // in 1.9 mode, this will be an IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999448525552622	WITHOUT_CLASSIFICATION	5.5147444737752795E-5	DEFECT
// no variable initialization, because we're reusing parent's scope (flat)	WITHOUT_CLASSIFICATION	0.9999997049824737	WITHOUT_CLASSIFICATION	2.950175264133621E-7	DEFECT
// for specific-index cases, clean up non-expression values	WITHOUT_CLASSIFICATION	0.9999999470125347	WITHOUT_CLASSIFICATION	5.298746536452841E-8	DEFECT
// set up a local Ruby variable	WITHOUT_CLASSIFICATION	0.9999996876674799	WITHOUT_CLASSIFICATION	3.123325201021987E-7	DEFECT
// if that succeeds, the others should as well	WITHOUT_CLASSIFICATION	0.9999969720731452	WITHOUT_CLASSIFICATION	3.0279268547693025E-6	DEFECT
// verify the class	WITHOUT_CLASSIFICATION	0.9999983091597733	WITHOUT_CLASSIFICATION	1.6908402267137044E-6	DEFECT
// create dir if necessary	WITHOUT_CLASSIFICATION	0.9999995042848291	WITHOUT_CLASSIFICATION	4.957151709529045E-7	DEFECT
// Create the class with the appropriate class name and source file	WITHOUT_CLASSIFICATION	0.9999998822060003	WITHOUT_CLASSIFICATION	1.1779399970970559E-7	DEFECT
// add setPosition impl, which stores filename as constant to speed updates	WITHOUT_CLASSIFICATION	0.9999999845838756	WITHOUT_CLASSIFICATION	1.541612447001689E-8	DEFECT
// thread context	WITHOUT_CLASSIFICATION	0.999980374021826	WITHOUT_CLASSIFICATION	1.9625978173961646E-5	DEFECT
// line number	WITHOUT_CLASSIFICATION	0.9999956245061646	WITHOUT_CLASSIFICATION	4.375493835450997E-6	DEFECT
// invoke __file__ with threadcontext, self, args (null), and block (null)	WITHOUT_CLASSIFICATION	0.9999984528945899	WITHOUT_CLASSIFICATION	1.5471054101438596E-6	DEFECT
// load always uses IRubyObject[], so simple closure offset calculation here	WITHOUT_CLASSIFICATION	0.9999997122619191	WITHOUT_CLASSIFICATION	2.877380810066067E-7	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999985852000158	WITHOUT_CLASSIFICATION	1.4147999842630752E-6	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999984704799516	WITHOUT_CLASSIFICATION	1.529520048397294E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999976876799805	WITHOUT_CLASSIFICATION	2.312320019493588E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999920168382573	WITHOUT_CLASSIFICATION	7.983161742574342E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999920168382573	WITHOUT_CLASSIFICATION	7.983161742574342E-6	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999996365436572	WITHOUT_CLASSIFICATION	3.6345634270923023E-7	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999997653694161	WITHOUT_CLASSIFICATION	2.3463058375492754E-7	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999994902580519	WITHOUT_CLASSIFICATION	5.097419480585853E-7	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9998665225750736	WITHOUT_CLASSIFICATION	1.334774249264001E-4	DEFECT
// add Script#run impl, used for running this script with a specified threadcontext and self // root method of a script is always in __file__ method	WITHOUT_CLASSIFICATION	0.9999993891142205	WITHOUT_CLASSIFICATION	6.108857794433791E-7	DEFECT
// add main impl, used for detached or command-line execution of this script with a new runtime // root method of a script is always in stub0, method0	WITHOUT_CLASSIFICATION	0.9999994682764975	WITHOUT_CLASSIFICATION	5.317235024592978E-7	DEFECT
// construct static scope list of names	WITHOUT_CLASSIFICATION	0.9999992966706912	WITHOUT_CLASSIFICATION	7.033293088488194E-7	DEFECT
// JRUBY-3014: make __FILE__ dynamically determined at load time, but // we provide a reasonable default here	WITHOUT_CLASSIFICATION	0.9999984873049397	WITHOUT_CLASSIFICATION	1.5126950603383145E-6	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999801604641954	WITHOUT_CLASSIFICATION	1.9839535804659332E-5	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999801604641954	WITHOUT_CLASSIFICATION	1.9839535804659332E-5	DEFECT
// lazily create class init only if necessary	WITHOUT_CLASSIFICATION	0.9999998703793567	WITHOUT_CLASSIFICATION	1.2962064324668347E-7	DEFECT
// boxed arg list __file__	WITHOUT_CLASSIFICATION	0.999994152199792	WITHOUT_CLASSIFICATION	5.847800207912666E-6	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999937439643236	WITHOUT_CLASSIFICATION	6.256035676423071E-6	DEFECT
// exact arg list __file__	WITHOUT_CLASSIFICATION	0.9999888902062168	WITHOUT_CLASSIFICATION	1.1109793783073851E-5	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999970471372422	WITHOUT_CLASSIFICATION	2.952862757696868E-6	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999970471372422	WITHOUT_CLASSIFICATION	2.952862757696868E-6	DEFECT
// not using a new scope, use saved one for a flat closure	WITHOUT_CLASSIFICATION	0.9999997935305132	WITHOUT_CLASSIFICATION	2.0646948683777581E-7	DEFECT
// normal closure	WITHOUT_CLASSIFICATION	0.999995235636174	WITHOUT_CLASSIFICATION	4.764363826016306E-6	DEFECT
// end of scoping for closure's vars	WITHOUT_CLASSIFICATION	0.9999992166980528	WITHOUT_CLASSIFICATION	7.833019472084895E-7	DEFECT
// we only need full-on redo exception handling if there's logic that might produce it	WITHOUT_CLASSIFICATION	0.9999997394530081	WITHOUT_CLASSIFICATION	2.605469919193346E-7	DEFECT
// handle redos by restarting the block	WITHOUT_CLASSIFICATION	0.999999628430007	WITHOUT_CLASSIFICATION	3.715699930430133E-7	DEFECT
// jump back to the top of the main body of this closure	WITHOUT_CLASSIFICATION	0.9999995283203071	WITHOUT_CLASSIFICATION	4.716796928415237E-7	DEFECT
// Ruby name 	WITHOUT_CLASSIFICATION	0.9999948655064903	WITHOUT_CLASSIFICATION	5.134493509681167E-6	DEFECT
// Accumulate call arguments	WITHOUT_CLASSIFICATION	0.9999987894464235	WITHOUT_CLASSIFICATION	1.2105535764987299E-6	DEFECT
// Fix FileNameCompletor to work mid-line	WITHOUT_CLASSIFICATION	0.99985278737209	WITHOUT_CLASSIFICATION	1.4721262790987703E-4	DEFECT
// We need to ensure that the variable names generated here cannot conflict with ruby variable names! // Hence the "%" tthat is appended to the beginning!	WITHOUT_CLASSIFICATION	0.9998841287027043	WITHOUT_CLASSIFICATION	1.1587129729583938E-4	DEFECT
// Does this method define code?  // Default is yes -- which basically leads to pessimistic but safe optimizations // But, for library and internal methods, this might be false.	WITHOUT_CLASSIFICATION	0.999925080289634	WITHOUT_CLASSIFICATION	7.491971036602843E-5	DEFECT
// Map of constants defined in this scope (not valid for methods!)	WITHOUT_CLASSIFICATION	0.9999945756189553	WITHOUT_CLASSIFICATION	5.424381044721475E-6	DEFECT
// NOTE: Since we are processing ASTs, loop bodies are processed in depth-first manner // with outer loops encountered before inner loops, and inner loops finished before outer ones. // // So, we can keep track of loops in a loop stack which  keeps track of loops as they are encountered. // This lets us implement next/redo/break/retry easily for the non-closure cases	WITHOUT_CLASSIFICATION	0.9999999124086061	WITHOUT_CLASSIFICATION	8.759139391036593E-8	DEFECT
// Map keep track of the next available variable index for a particular prefix	WITHOUT_CLASSIFICATION	0.9999964484325852	WITHOUT_CLASSIFICATION	3.5515674147552385E-6	DEFECT
// Control flow graph for this scope	WITHOUT_CLASSIFICATION	0.9999977303292845	WITHOUT_CLASSIFICATION	2.269670715600494E-6	DEFECT
//        _lexicalNestingLevel = lexicalParent == null ? 0 : ((IR_ScopeImpl)lexicalParent)._lexicalNestingLevel + 1;	WITHOUT_CLASSIFICATION	0.9999997371245479	WITHOUT_CLASSIFICATION	2.628754520274575E-7	DEFECT
// List of modules, classes, and methods defined in this scope!	WITHOUT_CLASSIFICATION	0.9999993036043777	WITHOUT_CLASSIFICATION	6.96395622207946E-7	DEFECT
// Returns the containing parent scope!	WITHOUT_CLASSIFICATION	0.9999972012593791	WITHOUT_CLASSIFICATION	2.7987406209755757E-6	DEFECT
// Insert nesting level to ensure variable names don't conflict across nested scopes! // i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! //        return new Variable(prefix + _lexicalNestingLevel + "_" + idx);	WITHOUT_CLASSIFICATION	0.999981591160329	WITHOUT_CLASSIFICATION	1.8408839671023084E-5	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999970516632257	WITHOUT_CLASSIFICATION	2.948336774266016E-6	DEFECT
// variable is never read, variable is never live	WITHOUT_CLASSIFICATION	0.999988622346727	WITHOUT_CLASSIFICATION	1.1377653273026342E-5	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999932399201477	WITHOUT_CLASSIFICATION	6.760079852346066E-6	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999932399201477	WITHOUT_CLASSIFICATION	6.760079852346066E-6	DEFECT
// This method is called to build assignments for a multiple-assignment instruction	WITHOUT_CLASSIFICATION	0.9999982553817547	WITHOUT_CLASSIFICATION	1.7446182452899053E-6	DEFECT
// Build the class body!	WITHOUT_CLASSIFICATION	0.9999962713615403	WITHOUT_CLASSIFICATION	3.7286384596765125E-6	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999966330035994	WITHOUT_CLASSIFICATION	3.366996400640028E-6	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999966330035994	WITHOUT_CLASSIFICATION	3.366996400640028E-6	DEFECT
// SSS FIXME: Can this ever be null?	WITHOUT_CLASSIFICATION	0.7390706377711368	WITHOUT_CLASSIFICATION	0.2609293622288633	DEFECT
// Run the pass on the passed in scope!	WITHOUT_CLASSIFICATION	0.9999987265465924	WITHOUT_CLASSIFICATION	1.2734534076024656E-6	DEFECT
// done // done // done // done	WITHOUT_CLASSIFICATION	0.9999746262770437	WITHOUT_CLASSIFICATION	2.5373722956301394E-5	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999918356754486	WITHOUT_CLASSIFICATION	8.164324551329723E-6	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999918356754486	WITHOUT_CLASSIFICATION	8.164324551329723E-6	DEFECT
// This method is called to build arguments for a block!	WITHOUT_CLASSIFICATION	0.9999940934367619	WITHOUT_CLASSIFICATION	5.9065632380669674E-6	DEFECT
// build first node (and ignore its result) and then second node	WITHOUT_CLASSIFICATION	0.9999955834360459	WITHOUT_CLASSIFICATION	4.416563954073456E-6	DEFECT
// build first node only and return false	WITHOUT_CLASSIFICATION	0.9999935605400271	WITHOUT_CLASSIFICATION	6.439459973016248E-6	DEFECT
// Value of the last expression in the block 	WITHOUT_CLASSIFICATION	0.999999668140394	WITHOUT_CLASSIFICATION	3.318596060007025E-7	DEFECT
// If this is not a closure, the break is equivalent to jumping to the loop end label	WITHOUT_CLASSIFICATION	0.9999998509025979	WITHOUT_CLASSIFICATION	1.4909740207152238E-7	DEFECT
// get the incoming case value	WITHOUT_CLASSIFICATION	0.9999976427142481	WITHOUT_CLASSIFICATION	2.357285751860344E-6	DEFECT
// the CASE instruction	WITHOUT_CLASSIFICATION	0.9999831926878328	WITHOUT_CLASSIFICATION	1.680731216726077E-5	DEFECT
// lists to aggregate variables and bodies for whens	WITHOUT_CLASSIFICATION	0.999999684242189	WITHOUT_CLASSIFICATION	3.1575781098514406E-7	DEFECT
// build each "when"	WITHOUT_CLASSIFICATION	0.9999977361145633	WITHOUT_CLASSIFICATION	2.263885436633797E-6	DEFECT
// multiple conditions for when	WITHOUT_CLASSIFICATION	0.9999979210579866	WITHOUT_CLASSIFICATION	2.0789420134428758E-6	DEFECT
// build "else" if it exists	WITHOUT_CLASSIFICATION	0.9999958217273298	WITHOUT_CLASSIFICATION	4.178272670145131E-6	DEFECT
// now emit bodies	WITHOUT_CLASSIFICATION	0.9999944057690193	WITHOUT_CLASSIFICATION	5.594230980736328E-6	DEFECT
// close it out	WITHOUT_CLASSIFICATION	0.9999991851273818	WITHOUT_CLASSIFICATION	8.148726181728771E-7	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9999972449097233	WITHOUT_CLASSIFICATION	2.7550902767154667E-6	DEFECT
// Do we have a dynamic container?	WITHOUT_CLASSIFICATION	0.9999868195395458	WITHOUT_CLASSIFICATION	1.3180460454193324E-5	DEFECT
// Return a meta object corresponding to the class	WITHOUT_CLASSIFICATION	0.9999993064913621	WITHOUT_CLASSIFICATION	6.935086378378378E-7	DEFECT
// 1. Load the module first (lhs of node) // 2. Then load the constant from the module	WITHOUT_CLASSIFICATION	0.999994518781366	WITHOUT_CLASSIFICATION	5.481218634020449E-6	DEFECT
// Build IR for args	WITHOUT_CLASSIFICATION	0.9999985135880163	WITHOUT_CLASSIFICATION	1.4864119837828772E-6	DEFECT
// Build IR for body	WITHOUT_CLASSIFICATION	0.9999953568739773	WITHOUT_CLASSIFICATION	4.643126022713685E-6	DEFECT
// if root of method is rescue, build as a light rescue	WITHOUT_CLASSIFICATION	0.999995111593184	WITHOUT_CLASSIFICATION	4.8884068160767994E-6	DEFECT
// Instance method	WITHOUT_CLASSIFICATION	0.99999909361252	WITHOUT_CLASSIFICATION	9.063874800751615E-7	DEFECT
// Class method	WITHOUT_CLASSIFICATION	0.9999992050958565	WITHOUT_CLASSIFICATION	7.949041435242778E-7	DEFECT
// Other args begin at index 1	WITHOUT_CLASSIFICATION	0.9999914492454698	WITHOUT_CLASSIFICATION	8.550754530197058E-6	DEFECT
// Both for fixed arity and variable arity methods	WITHOUT_CLASSIFICATION	0.9999970397507012	WITHOUT_CLASSIFICATION	2.960249298748058E-6	DEFECT
// Now for the rest	WITHOUT_CLASSIFICATION	0.9999977663066517	WITHOUT_CLASSIFICATION	2.233693348221024E-6	DEFECT
// Jump to 'l' if this arg is not null.  If null, fall through and build the default value!	WITHOUT_CLASSIFICATION	0.9999900251110059	WITHOUT_CLASSIFICATION	9.97488899406858E-6	DEFECT
// This is not an expression that computes anything	WITHOUT_CLASSIFICATION	0.9994609680536654	WITHOUT_CLASSIFICATION	5.390319463345793E-4	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9999994347890748	WITHOUT_CLASSIFICATION	5.652109251480094E-7	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.99999772002425	WITHOUT_CLASSIFICATION	2.279975749933107E-6	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999989774029429	WITHOUT_CLASSIFICATION	1.0225970570977283E-6	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999998626019387	WITHOUT_CLASSIFICATION	1.3739806125132598E-7	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9999972449097233	WITHOUT_CLASSIFICATION	2.7550902767154667E-6	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9999994347890748	WITHOUT_CLASSIFICATION	5.652109251480094E-7	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.99999772002425	WITHOUT_CLASSIFICATION	2.279975749933107E-6	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999998626019387	WITHOUT_CLASSIFICATION	1.3739806125132598E-7	DEFECT
// Get the container for this new module	WITHOUT_CLASSIFICATION	0.9999952574428574	WITHOUT_CLASSIFICATION	4.742557142659577E-6	DEFECT
// Build the new module	WITHOUT_CLASSIFICATION	0.9999952186805101	WITHOUT_CLASSIFICATION	4.781319489834807E-6	DEFECT
// Build the module body	WITHOUT_CLASSIFICATION	0.9999948282186009	WITHOUT_CLASSIFICATION	5.171781399194489E-6	DEFECT
// First, build an assignment for a splat, if any, with the rest of the args!	WITHOUT_CLASSIFICATION	0.9999999555552921	WITHOUT_CLASSIFICATION	4.4444707943591866E-8	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999991075513942	WITHOUT_CLASSIFICATION	8.924486057218083E-7	DEFECT
// If a closure, the next is simply a return from the closure! // If a regular loop, the next is simply a jump to the end of the iteration	WITHOUT_CLASSIFICATION	0.9999994847071857	WITHOUT_CLASSIFICATION	5.152928143453976E-7	DEFECT
// get attr	WITHOUT_CLASSIFICATION	0.999994863165859	WITHOUT_CLASSIFICATION	5.1368341410847445E-6	DEFECT
// call operator	WITHOUT_CLASSIFICATION	0.9999987965697359	WITHOUT_CLASSIFICATION	1.203430264117896E-6	DEFECT
// set attr	WITHOUT_CLASSIFICATION	0.9999954849694371	WITHOUT_CLASSIFICATION	4.5150305628735795E-6	DEFECT
// Translate "x &&= y" --> "x = (is_true(x) ? y : false)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, false, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9999219205103019	WITHOUT_CLASSIFICATION	7.80794896980789E-5	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9999882088325439	WITHOUT_CLASSIFICATION	1.1791167456056523E-5	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9999882088325439	WITHOUT_CLASSIFICATION	1.1791167456056523E-5	DEFECT
// if v1 is defined and true, we are done! 	WITHOUT_CLASSIFICATION	0.9999803776888667	WITHOUT_CLASSIFICATION	1.962231113329779E-5	DEFECT
// build first node only and return true	WITHOUT_CLASSIFICATION	0.9999927919180305	WITHOUT_CLASSIFICATION	7.208081969555057E-6	DEFECT
// build first node as non-expr and build second node	WITHOUT_CLASSIFICATION	0.9999992190738136	WITHOUT_CLASSIFICATION	7.809261862947142E-7	DEFECT
// Top-level script!	WITHOUT_CLASSIFICATION	0.9999918740664855	WITHOUT_CLASSIFICATION	8.125933514468447E-6	DEFECT
// we won't enter the loop -- just build the condition node	WITHOUT_CLASSIFICATION	0.9999941449043774	WITHOUT_CLASSIFICATION	5.855095622585183E-6	DEFECT
/* ----------- Private Interface ------------ */	WITHOUT_CLASSIFICATION	0.9999984062782976	WITHOUT_CLASSIFICATION	1.5937217024591976E-6	DEFECT
// What handles warnings	WITHOUT_CLASSIFICATION	0.9999988373551595	WITHOUT_CLASSIFICATION	1.162644840544834E-6	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.999998134075236	WITHOUT_CLASSIFICATION	1.8659247641071559E-6	DEFECT
// For closures, a redo is a jump to the beginning of the closure // For non-closures, a redo is a jump to the beginning of the loop	WITHOUT_CLASSIFICATION	0.9999996785091089	WITHOUT_CLASSIFICATION	3.214908912162809E-7	DEFECT
// The "root" method of a class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999999912593373	WITHOUT_CLASSIFICATION	8.740662757037272E-9	DEFECT
// Dummy top-level method for the class	WITHOUT_CLASSIFICATION	0.9999998709829008	WITHOUT_CLASSIFICATION	1.290170992796635E-7	DEFECT
// Build a dummy static method for the class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999999988274985	WITHOUT_CLASSIFICATION	1.1725015694331958E-9	DEFECT
// ------ Define the operations below ----	WITHOUT_CLASSIFICATION	0.9999997499486954	WITHOUT_CLASSIFICATION	2.500513046294353E-7	DEFECT
// value copy and type conversion operations	WITHOUT_CLASSIFICATION	0.9999988460680684	WITHOUT_CLASSIFICATION	1.15393193156988E-6	DEFECT
// alu operations	WITHOUT_CLASSIFICATION	0.999998705262607	WITHOUT_CLASSIFICATION	1.2947373929252784E-6	DEFECT
// method handle, arg receive, return value, and  call instructions	WITHOUT_CLASSIFICATION	0.9999997787420338	WITHOUT_CLASSIFICATION	2.2125796616616514E-7	DEFECT
// closure instructions	WITHOUT_CLASSIFICATION	0.9999988893120504	WITHOUT_CLASSIFICATION	1.1106879497003476E-6	DEFECT
// eval instructions	WITHOUT_CLASSIFICATION	0.999999224578732	WITHOUT_CLASSIFICATION	7.754212679118966E-7	DEFECT
// def instructions	WITHOUT_CLASSIFICATION	0.9999987757410048	WITHOUT_CLASSIFICATION	1.2242589951719857E-6	DEFECT
// exception instructions	WITHOUT_CLASSIFICATION	0.99999197538424	WITHOUT_CLASSIFICATION	8.024615759884865E-6	DEFECT
// Loads	WITHOUT_CLASSIFICATION	0.9999980495236659	WITHOUT_CLASSIFICATION	1.9504763341539213E-6	DEFECT
// Stores	WITHOUT_CLASSIFICATION	0.9999977845164381	WITHOUT_CLASSIFICATION	2.2154835620041247E-6	DEFECT
// jump and branch operations	WITHOUT_CLASSIFICATION	0.9999994913965953	WITHOUT_CLASSIFICATION	5.086034047401438E-7	DEFECT
// others	WITHOUT_CLASSIFICATION	0.9999980459478419	WITHOUT_CLASSIFICATION	1.9540521580898867E-6	DEFECT
// a case/when branch	WITHOUT_CLASSIFICATION	0.9999981066859204	WITHOUT_CLASSIFICATION	1.8933140796364295E-6	DEFECT
// optimization guards	WITHOUT_CLASSIFICATION	0.9999978470149659	WITHOUT_CLASSIFICATION	2.1529850341377865E-6	DEFECT
// By default, call instructions cannot be deleted even if their results aren't used by anyone // unless we know more about what the call is, what it does, etc. // Similarly for evals, stores, returns.	WITHOUT_CLASSIFICATION	0.9999854664421058	WITHOUT_CLASSIFICATION	1.4533557894228268E-5	DEFECT
// Returns the containing parent scope -- can be a dynamic value (hence Operand)!	WITHOUT_CLASSIFICATION	0.9999991846479204	WITHOUT_CLASSIFICATION	8.153520795933673E-7	DEFECT
// scripts	WITHOUT_CLASSIFICATION	0.9999978722392421	WITHOUT_CLASSIFICATION	2.127760757928685E-6	DEFECT
// scripts and modules	WITHOUT_CLASSIFICATION	0.999998968801013	WITHOUT_CLASSIFICATION	1.0311989869847134E-6	DEFECT
// scripts, classes, and modules	WITHOUT_CLASSIFICATION	0.9999998505900254	WITHOUT_CLASSIFICATION	1.494099746651179E-7	DEFECT
// methods and closures	WITHOUT_CLASSIFICATION	0.9999983124996703	WITHOUT_CLASSIFICATION	1.687500329607038E-6	DEFECT
// create a new variable using the prefix	WITHOUT_CLASSIFICATION	0.9999998909470249	WITHOUT_CLASSIFICATION	1.0905297507851101E-7	DEFECT
// create a new temporary variable	WITHOUT_CLASSIFICATION	0.9999994769857188	WITHOUT_CLASSIFICATION	5.230142812397882E-7	DEFECT
// Get a new label using a generic prefix	WITHOUT_CLASSIFICATION	0.9999983551560978	WITHOUT_CLASSIFICATION	1.6448439021689699E-6	DEFECT
// Build the CFG for this scope -- supported only by methods & closures	WITHOUT_CLASSIFICATION	0.9999998380051339	WITHOUT_CLASSIFICATION	1.6199486617185198E-7	DEFECT
// Get the control flow graph for this scope -- only valid for methods & closures	WITHOUT_CLASSIFICATION	0.9999999084234957	WITHOUT_CLASSIFICATION	9.157650423530366E-8	DEFECT
// While processing loops, this returns the loop that we are processing.	WITHOUT_CLASSIFICATION	0.9999902960480023	WITHOUT_CLASSIFICATION	9.703951997813445E-6	DEFECT
// Record the loop we are beginning to process	WITHOUT_CLASSIFICATION	0.9999998582865645	WITHOUT_CLASSIFICATION	1.4171343547211926E-7	DEFECT
// Indicate that we are done processing the loop	WITHOUT_CLASSIFICATION	0.9999997494388255	WITHOUT_CLASSIFICATION	2.505611744676245E-7	DEFECT
// Run the passed in compiler pass on this scope!	WITHOUT_CLASSIFICATION	0.9999955689722854	WITHOUT_CLASSIFICATION	4.431027714561699E-6	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999934763872702	WITHOUT_CLASSIFICATION	6.523612729798988E-6	DEFECT
// Readline	WITHOUT_CLASSIFICATION	0.9999961807177268	WITHOUT_CLASSIFICATION	3.8192822732434605E-6	DEFECT
// If the cfg of the method is around, print the CFG!	WITHOUT_CLASSIFICATION	0.9999987888785424	WITHOUT_CLASSIFICATION	1.2111214575239027E-6	DEFECT
// Optimize some core class method calls for constant values	WITHOUT_CLASSIFICATION	0.9999994853757116	WITHOUT_CLASSIFICATION	5.146242883120433E-7	DEFECT
// If 'r' is not a constant, it could actually be a compound value! // Look in our value map to see if we have a simplified value for the receiver.	WITHOUT_CLASSIFICATION	0.9999701184877737	WITHOUT_CLASSIFICATION	2.9881512226265138E-5	DEFECT
// Check if we can optimize this call based on the receiving method and receiver type // Use the simplified receiver!	WITHOUT_CLASSIFICATION	0.9999625538285839	WITHOUT_CLASSIFICATION	3.7446171416131296E-5	DEFECT
// If we got a simplified value, mark the call dead and insert a copy in its place!	WITHOUT_CLASSIFICATION	0.9999991443333849	WITHOUT_CLASSIFICATION	8.556666150645506E-7	DEFECT
// If the call has been optimized away in the previous step, it is no longer a hard boundary for opts!	WITHOUT_CLASSIFICATION	0.9999999741339122	WITHOUT_CLASSIFICATION	2.586608774989447E-8	DEFECT
/* ----------- Public abstract methods ---------- */	WITHOUT_CLASSIFICATION	0.9999992928462627	WITHOUT_CLASSIFICATION	7.071537372673075E-7	DEFECT
/* ----------- Public methods with a default implementation ---------- */	WITHOUT_CLASSIFICATION	0.9999992856456086	WITHOUT_CLASSIFICATION	7.143543914132893E-7	DEFECT
// Compute meet over all "sources" and compute "destination" basic blocks that should then be processed.  // sources & targets depends on direction of the data flow problem	WITHOUT_CLASSIFICATION	0.9999999938641253	WITHOUT_CLASSIFICATION	6.13587466331954E-9	DEFECT
// If the solution has changed, add "dsts" to the work list. // No duplicates please which is why we have bbset.	WITHOUT_CLASSIFICATION	0.9999998346143204	WITHOUT_CLASSIFICATION	1.6538567958800789E-7	DEFECT
/* --------- Protected fields/methods below --------- */	WITHOUT_CLASSIFICATION	0.9999962072154911	WITHOUT_CLASSIFICATION	3.7927845087515063E-6	DEFECT
// Dataflow problem with which this node is associated // CFG node for which this node contains info.	WITHOUT_CLASSIFICATION	0.9999632935905903	WITHOUT_CLASSIFICATION	3.670640940975195E-5	DEFECT
/* -------------- Public fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999979466376179	WITHOUT_CLASSIFICATION	2.053362382145366E-6	DEFECT
// ------- Abstract methods without a default implementation -------	WITHOUT_CLASSIFICATION	0.9999998902651107	WITHOUT_CLASSIFICATION	1.0973488933128336E-7	DEFECT
// ------- Default implementation methods below -------	WITHOUT_CLASSIFICATION	0.99999942067732	WITHOUT_CLASSIFICATION	5.793226799981288E-7	DEFECT
/* Compute Meet Over All Paths solution for this dataflow problem on the input CFG.     * This implements a standard worklist algorithm. */	WITHOUT_CLASSIFICATION	0.9999990049675803	WITHOUT_CLASSIFICATION	9.950324195836006E-7	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9999656058728407	WITHOUT_CLASSIFICATION	3.439412715923723E-5	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9999656058728407	WITHOUT_CLASSIFICATION	3.439412715923723E-5	DEFECT
/* -------------- Packaged/protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999994244029826	WITHOUT_CLASSIFICATION	5.755970173877355E-7	DEFECT
// We want unique ids for dataflow variables	WITHOUT_CLASSIFICATION	0.9999997366113413	WITHOUT_CLASSIFICATION	2.63388658712576E-7	DEFECT
/* -------------- Protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999976415469233	WITHOUT_CLASSIFICATION	2.3584530767013433E-6	DEFECT
/* -------------- Private fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999988398792891	WITHOUT_CLASSIFICATION	1.1601207109789624E-6	DEFECT
// Initialize all flow graph nodes 	WITHOUT_CLASSIFICATION	0.9999980291046469	WITHOUT_CLASSIFICATION	1.9708953531964244E-6	DEFECT
/* Lattice TOP, BOTTOM, ANY values -- these will be used during dataflow analyses */	WITHOUT_CLASSIFICATION	0.9999926383368188	WITHOUT_CLASSIFICATION	7.361663181138775E-6	DEFECT
/* ******************** PUBLIC INTERFACE ******************* */	WITHOUT_CLASSIFICATION	0.9999427857920454	WITHOUT_CLASSIFICATION	5.72142079545919E-5	DEFECT
// Unique ID assigned to this variable	WITHOUT_CLASSIFICATION	0.999996129413376	WITHOUT_CLASSIFICATION	3.870586623970215E-6	DEFECT
// start out with a default RubyObject allocator	WITHOUT_CLASSIFICATION	0.9999995709248761	WITHOUT_CLASSIFICATION	4.2907512397463964E-7	DEFECT
// switch to an allocator based on a default constructor	WITHOUT_CLASSIFICATION	0.9999996366385876	WITHOUT_CLASSIFICATION	3.6336141239256587E-7	DEFECT
/* ----------- Public Interface ------------ */	WITHOUT_CLASSIFICATION	0.9999989208196953	WITHOUT_CLASSIFICATION	1.0791803046736518E-6	DEFECT
// class or module	WITHOUT_CLASSIFICATION	0.9999995014974299	WITHOUT_CLASSIFICATION	4.985025701475187E-7	DEFECT
// OUT = UNION(IN(succs))	WITHOUT_CLASSIFICATION	0.9999727630739124	WITHOUT_CLASSIFICATION	2.723692608762984E-5	DEFECT
// Traverse the instructions in this basic block in reverse order!	WITHOUT_CLASSIFICATION	0.9999870891852005	WITHOUT_CLASSIFICATION	1.2910814799489244E-5	DEFECT
// v is defined => It is no longer live before 'i'	WITHOUT_CLASSIFICATION	0.9999965607669515	WITHOUT_CLASSIFICATION	3.4392330483495053E-6	DEFECT
// IN is the same!	WITHOUT_CLASSIFICATION	0.9999426659841898	WITHOUT_CLASSIFICATION	5.7334015810127774E-5	DEFECT
// IN changed!	WITHOUT_CLASSIFICATION	0.9999977752439563	WITHOUT_CLASSIFICATION	2.224756043804499E-6	DEFECT
/* ---------- Protected / package fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999986785844123	WITHOUT_CLASSIFICATION	1.321415587682563E-6	DEFECT
// If 'v' is not live at the instruction site, and it has no side effects, mark it dead!	WITHOUT_CLASSIFICATION	0.9999982594828506	WITHOUT_CLASSIFICATION	1.7405171494125014E-6	DEFECT
// Do not mark this instruction's operands live if the instruction itself is dead!	WITHOUT_CLASSIFICATION	0.9999874563477694	WITHOUT_CLASSIFICATION	1.2543652230577385E-5	DEFECT
/* ---------- Private fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999984163172644	WITHOUT_CLASSIFICATION	1.5836827356628072E-6	DEFECT
// Variables live at entry of this node // Variables live at exit of node // Temporary set of live variables // Size of the "_in" and "_out" bit sets 	WITHOUT_CLASSIFICATION	0.9999877773603116	WITHOUT_CLASSIFICATION	1.222263968842525E-5	DEFECT
// Used during optimization passes to propagate type and other information	WITHOUT_CLASSIFICATION	0.9999964166076646	WITHOUT_CLASSIFICATION	3.5833923354075106E-6	DEFECT
// Does this instruction have side effects as a result of its operation // This information is used in optimization phases to impact dead code elimination // and other optimization passes	WITHOUT_CLASSIFICATION	0.9999194720504558	WITHOUT_CLASSIFICATION	8.05279495441883E-5	DEFECT
/* --------- "Abstract"/"please-override" methods --------- */	WITHOUT_CLASSIFICATION	0.9999996525220367	WITHOUT_CLASSIFICATION	3.4747796330370394E-7	DEFECT
/* Array of all operands for this instruction */	WITHOUT_CLASSIFICATION	0.9999885074318206	WITHOUT_CLASSIFICATION	1.1492568179386865E-5	DEFECT
/* List of all variables used by all operands of this instruction */	WITHOUT_CLASSIFICATION	0.999999003492326	WITHOUT_CLASSIFICATION	9.965076740085688E-7	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     *     * If the value map provides a value for any of the instruction's operands     * this method is expected to replace the original operands with the simplified values.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify     */	WITHOUT_CLASSIFICATION	0.9999999534848876	WITHOUT_CLASSIFICATION	4.651511238983713E-8	DEFECT
// By default, no simplifications!	WITHOUT_CLASSIFICATION	0.9999991346567063	WITHOUT_CLASSIFICATION	8.653432936511801E-7	DEFECT
// Can this call lead to ruby code getting modified?   // If we don't know what method we are calling, we assume it can (pessimistic, but safe!) // If we do know the target method, we ask the method itself whether it modifies ruby code	WITHOUT_CLASSIFICATION	0.9997777147005088	WITHOUT_CLASSIFICATION	2.2228529949104534E-4	DEFECT
// By default, return instructions cannot be deleted	WITHOUT_CLASSIFICATION	0.9999934692405077	WITHOUT_CLASSIFICATION	6.530759492303485E-6	DEFECT
// If true, returns the rest of the array starting at the index	WITHOUT_CLASSIFICATION	0.9999991385446414	WITHOUT_CLASSIFICATION	8.614553586489716E-7	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999988824622724	WITHOUT_CLASSIFICATION	1.1175377275349147E-6	DEFECT
// Map of label & basic blocks with that label	WITHOUT_CLASSIFICATION	0.9999982488044713	WITHOUT_CLASSIFICATION	1.7511955287878388E-6	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999988824622724	WITHOUT_CLASSIFICATION	1.1175377275349147E-6	DEFECT
// You can only value-replace atomic values	WITHOUT_CLASSIFICATION	0.9999997552287841	WITHOUT_CLASSIFICATION	2.4477121581406224E-7	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999673767017131	WITHOUT_CLASSIFICATION	3.2623298287007564E-5	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999673767017131	WITHOUT_CLASSIFICATION	3.2623298287007564E-5	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999673767017131	WITHOUT_CLASSIFICATION	3.2623298287007564E-5	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999997123072143	WITHOUT_CLASSIFICATION	2.876927857119576E-7	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999997123072143	WITHOUT_CLASSIFICATION	2.876927857119576E-7	DEFECT
// The operand that this attribute targets //    DEFERRED //    AttributeValue _val;       // Attribute value	WITHOUT_CLASSIFICATION	0.9999759700916651	WITHOUT_CLASSIFICATION	2.4029908335065238E-5	DEFECT
// Arrays, Ranges, etc. are compound values // Variables, fixnums, floats, etc. are "atomic" values	WITHOUT_CLASSIFICATION	0.9999991327399539	WITHOUT_CLASSIFICATION	8.672600460693698E-7	DEFECT
// Get the target class of this operand, if we know it!	WITHOUT_CLASSIFICATION	0.9999978265825493	WITHOUT_CLASSIFICATION	2.1734174506842474E-6	DEFECT
// The following constants capture pre-known static call sites -- used to implement ruby internals	WITHOUT_CLASSIFICATION	0.9999998087991605	WITHOUT_CLASSIFICATION	1.912008395694146E-7	DEFECT
/* Nothing to do by default */	WITHOUT_CLASSIFICATION	0.9999941564408307	WITHOUT_CLASSIFICATION	5.8435591693426586E-6	DEFECT
// Map of label & basic blocks which are waiting for a bb with that label	WITHOUT_CLASSIFICATION	0.999999250866795	WITHOUT_CLASSIFICATION	7.491332050698404E-7	DEFECT
// Init before building basic blocks below!	WITHOUT_CLASSIFICATION	0.9999990121819569	WITHOUT_CLASSIFICATION	9.878180431373106E-7	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999945215265147	WITHOUT_CLASSIFICATION	5.478473485274165E-6	DEFECT
// Scope (method/closure) to which this cfg belongs // Entry BB -- dummy // Exit BB -- dummy // The actual graph // Next available basic block id	WITHOUT_CLASSIFICATION	0.9999996275385269	WITHOUT_CLASSIFICATION	3.7246147309895117E-7	DEFECT
// Jump instruction bbs dont add an edge to the succeeding bb by default	WITHOUT_CLASSIFICATION	0.9999986070521724	WITHOUT_CLASSIFICATION	1.3929478277051013E-6	DEFECT
// Add forward ref. edges	WITHOUT_CLASSIFICATION	0.9999982711865524	WITHOUT_CLASSIFICATION	1.7288134475491503E-6	DEFECT
// currBB cannot be null!	WITHOUT_CLASSIFICATION	0.999766336390204	WITHOUT_CLASSIFICATION	2.3366360979611633E-4	DEFECT
// Add a forward reference from tgt -> currBB	WITHOUT_CLASSIFICATION	0.9999994930151718	WITHOUT_CLASSIFICATION	5.069848282268067E-7	DEFECT
// root-level logic	WITHOUT_CLASSIFICATION	0.9999994417411366	WITHOUT_CLASSIFICATION	5.582588632770145E-7	DEFECT
// root-level methods	WITHOUT_CLASSIFICATION	0.9999987880584411	WITHOUT_CLASSIFICATION	1.211941558869459E-6	DEFECT
// root-level classes	WITHOUT_CLASSIFICATION	0.9999990485174537	WITHOUT_CLASSIFICATION	9.51482546373045E-7	DEFECT
//        case 4: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class); //            break; //        case 5: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class, Object.class); //            break;	WITHOUT_CLASSIFICATION	0.999997633844463	WITHOUT_CLASSIFICATION	2.3661555369326103E-6	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999947899547009	WITHOUT_CLASSIFICATION	5.210045298978589E-6	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999947899547009	WITHOUT_CLASSIFICATION	5.210045298978589E-6	DEFECT
// receiver	WITHOUT_CLASSIFICATION	0.9999800028701346	WITHOUT_CLASSIFICATION	1.999712986542119E-5	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999996975304862	WITHOUT_CLASSIFICATION	3.024695138180442E-7	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999996975304862	WITHOUT_CLASSIFICATION	3.024695138180442E-7	DEFECT
//        case 4: //        case 5:	WITHOUT_CLASSIFICATION	0.9999732319826793	WITHOUT_CLASSIFICATION	2.67680173206667E-5	DEFECT
// Object[] args	WITHOUT_CLASSIFICATION	0.9999942821579662	WITHOUT_CLASSIFICATION	5.717842033777138E-6	DEFECT
// load handle	WITHOUT_CLASSIFICATION	0.999999107205188	WITHOUT_CLASSIFICATION	8.927948120230538E-7	DEFECT
// args array	WITHOUT_CLASSIFICATION	0.9999893609739282	WITHOUT_CLASSIFICATION	1.0639026071750391E-5	DEFECT
// i'th argument	WITHOUT_CLASSIFICATION	0.9999929869021772	WITHOUT_CLASSIFICATION	7.013097822760566E-6	DEFECT
// invoke specific arity version	WITHOUT_CLASSIFICATION	0.9999957660215733	WITHOUT_CLASSIFICATION	4.2339784267539854E-6	DEFECT
// Object arg0	WITHOUT_CLASSIFICATION	0.9999800289677467	WITHOUT_CLASSIFICATION	1.997103225323326E-5	DEFECT
// useful for code completion inside the IRB	WITHOUT_CLASSIFICATION	0.9999986962551577	WITHOUT_CLASSIFICATION	1.303744842324085E-6	DEFECT
// No editing before startPos	WITHOUT_CLASSIFICATION	0.9999988017012171	WITHOUT_CLASSIFICATION	1.198298782923015E-6	DEFECT
// no silly ticks!	WITHOUT_CLASSIFICATION	0.9999910066130149	WITHOUT_CLASSIFICATION	8.99338698516997E-6	DEFECT
// no candidates? Fail.	WITHOUT_CLASSIFICATION	0.999995335487393	WITHOUT_CLASSIFICATION	4.664512606989734E-6	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9999967556925462	WITHOUT_CLASSIFICATION	3.2443074538189325E-6	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999955668767626	WITHOUT_CLASSIFICATION	4.433123237410635E-6	DEFECT
// Explicit reference to these vars as symbols...	WITHOUT_CLASSIFICATION	0.9999984663976161	WITHOUT_CLASSIFICATION	1.533602383814228E-6	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999945215265147	WITHOUT_CLASSIFICATION	5.478473485274165E-6	DEFECT
//\t\n\"\\'`@$><=;|&{(	WITHOUT_CLASSIFICATION	0.9998488587420733	WITHOUT_CLASSIFICATION	1.5114125792673407E-4	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999990057575163	WITHOUT_CLASSIFICATION	9.942424837009003E-7	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999945644335497	WITHOUT_CLASSIFICATION	5.435566450320087E-6	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999945644335497	WITHOUT_CLASSIFICATION	5.435566450320087E-6	DEFECT
// Binding provided for scope, use it	WITHOUT_CLASSIFICATION	0.999999631024128	WITHOUT_CLASSIFICATION	3.689758719455094E-7	DEFECT
// this is ensured by the callers	WITHOUT_CLASSIFICATION	0.9999917410204217	WITHOUT_CLASSIFICATION	8.25897957839535E-6	DEFECT
// no binding, just eval in "current" frame (caller's frame)	WITHOUT_CLASSIFICATION	0.9999989511635049	WITHOUT_CLASSIFICATION	1.0488364951518732E-6	DEFECT
// restore position	WITHOUT_CLASSIFICATION	0.9999972554437517	WITHOUT_CLASSIFICATION	2.7445562483737732E-6	DEFECT
/* Something like cvar_cbase() from eval.c, factored out for the benefit     * of all the classvar-related node evaluations */	WITHOUT_CLASSIFICATION	0.9999994528870986	WITHOUT_CLASSIFICATION	5.47112901453361E-7	DEFECT
// Used by the compiler to simplify arg processing	WITHOUT_CLASSIFICATION	0.9999996568158848	WITHOUT_CLASSIFICATION	3.4318411522823163E-7	DEFECT
// JRUBY-2673: if wrapping a NativeException, use the actual Java exception's trace as our Java trace	WITHOUT_CLASSIFICATION	0.9999989958666606	WITHOUT_CLASSIFICATION	1.0041333393861894E-6	DEFECT
// MRI does similar thing on MacOS X with 'EditLine wrapper'.	WITHOUT_CLASSIFICATION	0.9999712122114378	WITHOUT_CLASSIFICATION	2.878778856209268E-5	DEFECT
// We lazily initialize this in case Readline.readline has been overridden in ruby (s_readline)	WITHOUT_CLASSIFICATION	0.9999931172043638	WITHOUT_CLASSIFICATION	6.8827956362940325E-6	DEFECT
// JRUBY-852, ignore escape key (it causes IRB to quit if we pass it out through readline)	WITHOUT_CLASSIFICATION	0.9999995814325878	WITHOUT_CLASSIFICATION	4.18567412226498E-7	DEFECT
// not overridden, let's go	WITHOUT_CLASSIFICATION	0.999992082123056	WITHOUT_CLASSIFICATION	7.917876943966129E-6	DEFECT
/* Explicitly use UTF-8 here. c.f. history.addToHistory using line.asUTF8() */	WITHOUT_CLASSIFICATION	0.9999950351350098	WITHOUT_CLASSIFICATION	4.964864990247817E-6	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.9563068580042492	WITHOUT_CLASSIFICATION	0.04369314199575071	DEFECT
// Complete using a Proc object	WITHOUT_CLASSIFICATION	0.9999998593411923	WITHOUT_CLASSIFICATION	1.4065880775282282E-7	DEFECT
// clear basename so it's anonymous when raising	WITHOUT_CLASSIFICATION	0.9999998168254507	WITHOUT_CLASSIFICATION	1.8317454931623536E-7	DEFECT
// These are not really used by timeout, but exposed for compatibility	WITHOUT_CLASSIFICATION	0.9999264906500369	WITHOUT_CLASSIFICATION	7.350934996302312E-5	DEFECT
// Timeout module methods	WITHOUT_CLASSIFICATION	0.9999816789995438	WITHOUT_CLASSIFICATION	1.8321000456125866E-5	DEFECT
// Toplevel defines	WITHOUT_CLASSIFICATION	0.9999966806832974	WITHOUT_CLASSIFICATION	3.3193167026250882E-6	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999928457400948	WITHOUT_CLASSIFICATION	7.154259905085824E-6	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9999961112298118	WITHOUT_CLASSIFICATION	3.888770188191719E-6	DEFECT
// if it's the exception we're expecting	WITHOUT_CLASSIFICATION	0.9999935937755098	WITHOUT_CLASSIFICATION	6.406224490211599E-6	DEFECT
// and we were given a specific exception	WITHOUT_CLASSIFICATION	0.9999981191965374	WITHOUT_CLASSIFICATION	1.8808034626010875E-6	DEFECT
// otherwise, rethrow	WITHOUT_CLASSIFICATION	0.9999962304056991	WITHOUT_CLASSIFICATION	3.769594300857454E-6	DEFECT
// // Remove the Executor task now, to avoid cancelled tasks accumulating // until an Executor thread can schedule and remove them //	WITHOUT_CLASSIFICATION	0.999999484997661	WITHOUT_CLASSIFICATION	5.150023390356417E-7	DEFECT
// // If the task was scheduled, wait for it to finish before polling // for the exception it would have thrown. //	WITHOUT_CLASSIFICATION	0.9999999216417107	WITHOUT_CLASSIFICATION	7.835828930319131E-8	DEFECT
// NetProtocolBufferedIO	WITHOUT_CLASSIFICATION	0.9999717674588551	WITHOUT_CLASSIFICATION	2.823254114490224E-5	DEFECT
/* When a length is given, read_string acts like get_bytes */	WITHOUT_CLASSIFICATION	0.999998771090208	WITHOUT_CLASSIFICATION	1.2289097920481713E-6	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.999994779114349	WITHOUT_CLASSIFICATION	5.220885650947023E-6	DEFECT
// ARRAY and STRUCT are only used internally	WITHOUT_CLASSIFICATION	0.9999994863658095	WITHOUT_CLASSIFICATION	5.136341904505768E-7	DEFECT
// If no release method is defined, then memory leaks will result.	WITHOUT_CLASSIFICATION	0.9999966953628796	WITHOUT_CLASSIFICATION	3.304637120460165E-6	DEFECT
/*     * This variant of newStruct is called from StructLayoutBuilder     */	WITHOUT_CLASSIFICATION	0.9999890910668278	WITHOUT_CLASSIFICATION	1.0908933172283525E-5	DEFECT
// This also handles unsigned int -> negative signed int conversion	WITHOUT_CLASSIFICATION	0.9999977312583354	WITHOUT_CLASSIFICATION	2.268741664595764E-6	DEFECT
// Windows is LLP64	WITHOUT_CLASSIFICATION	0.9999937178635095	WITHOUT_CLASSIFICATION	6.28213649040758E-6	DEFECT
// Older JDK on linux map 'c' to 'libc.so' which doesn't work	WITHOUT_CLASSIFICATION	0.9990810626941402	WITHOUT_CLASSIFICATION	9.189373058598164E-4	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999971431742873	WITHOUT_CLASSIFICATION	2.8568257127408324E-6	DEFECT
// $blah	WITHOUT_CLASSIFICATION	0.9999972019243143	WITHOUT_CLASSIFICATION	2.798075685798717E-6	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.999994779114349	WITHOUT_CLASSIFICATION	5.220885650947023E-6	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9999999764640873	WITHOUT_CLASSIFICATION	2.3535912769756363E-8	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999971431742873	WITHOUT_CLASSIFICATION	2.8568257127408324E-6	DEFECT
// // Keep a reference to the temporary memory in the cache so it does // not get freed by the GC until the struct is freed //	WITHOUT_CLASSIFICATION	0.9999998168092564	WITHOUT_CLASSIFICATION	1.831907435806125E-7	DEFECT
// Add Pointer::NULL as a constant	WITHOUT_CLASSIFICATION	0.9999992033961559	WITHOUT_CLASSIFICATION	7.966038442259407E-7	DEFECT
// Create the ordered list of field names from the map	WITHOUT_CLASSIFICATION	0.9999985132769114	WITHOUT_CLASSIFICATION	1.4867230885714408E-6	DEFECT
// Assemble a [ :name, offset ] array	WITHOUT_CLASSIFICATION	0.999997849989524	WITHOUT_CLASSIFICATION	2.1500104759822403E-6	DEFECT
//                case FLOAT:	WITHOUT_CLASSIFICATION	0.9999720618903557	WITHOUT_CLASSIFICATION	2.7938109644216255E-5	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9999992778809877	WITHOUT_CLASSIFICATION	7.221190121786373E-7	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9999992778809877	WITHOUT_CLASSIFICATION	7.221190121786373E-7	DEFECT
// No auto cleanup needed	WITHOUT_CLASSIFICATION	0.9999986981085216	WITHOUT_CLASSIFICATION	1.301891478343568E-6	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9999999044224333	WITHOUT_CLASSIFICATION	9.557756672508347E-8	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999978961979158	WITHOUT_CLASSIFICATION	2.1038020843039315E-6	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999978961979158	WITHOUT_CLASSIFICATION	2.1038020843039315E-6	DEFECT
/*         * If there is exactly _one_ callback argument to the function,         * then a block can be given and automatically subsituted for the callback         * parameter.         */	WITHOUT_CLASSIFICATION	0.9999999728060914	WITHOUT_CLASSIFICATION	2.7193908609126928E-8	DEFECT
/*------------------------------------------------------------------------*/	WITHOUT_CLASSIFICATION	0.9998834033370186	WITHOUT_CLASSIFICATION	1.1659666298131784E-4	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9997676065590111	WITHOUT_CLASSIFICATION	2.3239344098889247E-4	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9997676065590111	WITHOUT_CLASSIFICATION	2.3239344098889247E-4	DEFECT
// RubyUNIXServer	WITHOUT_CLASSIFICATION	0.9999900620721366	WITHOUT_CLASSIFICATION	9.937927863366462E-6	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999949276520914	WITHOUT_CLASSIFICATION	5.072347908600281E-6	DEFECT
// // Set up for potentially fast-int operations //	WITHOUT_CLASSIFICATION	0.9999995489041221	WITHOUT_CLASSIFICATION	4.510958778894272E-7	DEFECT
// // Hook up the MemoryPointer class if its not already there //	WITHOUT_CLASSIFICATION	0.9999995794442601	WITHOUT_CLASSIFICATION	4.205557399163255E-7	DEFECT
// This is a bit convoluted because (1) SocketChannel.bind is only in jdk 7 and // (2) Socket.getChannel() seems to return null in some cases	WITHOUT_CLASSIFICATION	0.9999552985767536	WITHOUT_CLASSIFICATION	4.470142324645884E-5	DEFECT
// no UNIXSockets on Windows	WITHOUT_CLASSIFICATION	0.999977429942539	WITHOUT_CLASSIFICATION	2.257005746093715E-5	DEFECT
// Sockaddr_un has different structure on different platforms. // See JRUBY-2213 for more details.	WITHOUT_CLASSIFICATION	0.9999998559181607	WITHOUT_CLASSIFICATION	1.4408183941403042E-7	DEFECT
// There is something valid in the sun_path component	WITHOUT_CLASSIFICATION	0.9999927684337102	WITHOUT_CLASSIFICATION	7.2315662897091245E-6	DEFECT
// RubyIPSocket	WITHOUT_CLASSIFICATION	0.999986966448964	WITHOUT_CLASSIFICATION	1.3033551035950822E-5	DEFECT
// host is nil or the empty string, bind to INADDR_ANY	WITHOUT_CLASSIFICATION	0.9999937025187277	WITHOUT_CLASSIFICATION	6.297481272397032E-6	DEFECT
// host and port given	WITHOUT_CLASSIFICATION	0.9999983334046364	WITHOUT_CLASSIFICATION	1.666595363655311E-6	DEFECT
// RubyUDPSocket	WITHOUT_CLASSIFICATION	0.9999837923725577	WITHOUT_CLASSIFICATION	1.620762744225747E-5	DEFECT
// By default we always reverse lookup unless do_not_reverse_lookup set.	WITHOUT_CLASSIFICATION	0.9999992431152462	WITHOUT_CLASSIFICATION	7.568847537802094E-7	DEFECT
// make sure descriptor is registered	WITHOUT_CLASSIFICATION	0.9999991109191236	WITHOUT_CLASSIFICATION	8.890808763712748E-7	DEFECT
// continue with normal initialization	WITHOUT_CLASSIFICATION	0.9999617999078727	WITHOUT_CLASSIFICATION	3.820009212734367E-5	DEFECT
// recv returns nil on EOF	WITHOUT_CLASSIFICATION	0.9999730537474528	WITHOUT_CLASSIFICATION	2.6946252547139782E-5	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9999957612852938	WITHOUT_CLASSIFICATION	4.238714706270945E-6	DEFECT
// RubyBasicSocket	WITHOUT_CLASSIFICATION	0.9999954069411966	WITHOUT_CLASSIFICATION	4.5930588033259305E-6	DEFECT
// we don't have to define any that we don't support; see socket.c	WITHOUT_CLASSIFICATION	0.9999896136390694	WITHOUT_CLASSIFICATION	1.0386360930611599E-5	DEFECT
// mandatory constants we haven't implemented	WITHOUT_CLASSIFICATION	0.9999928471195398	WITHOUT_CLASSIFICATION	7.1528804601912105E-6	DEFECT
// constants webrick crashes without	WITHOUT_CLASSIFICATION	0.9999989697616727	WITHOUT_CLASSIFICATION	1.0302383273429646E-6	DEFECT
// More constants needed by specs	WITHOUT_CLASSIFICATION	0.9999991846321525	WITHOUT_CLASSIFICATION	8.153678475287475E-7	DEFECT
// normal file descriptor..try to work with it	WITHOUT_CLASSIFICATION	0.9999757901911006	WITHOUT_CLASSIFICATION	2.4209808899319337E-5	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9999803591261532	WITHOUT_CLASSIFICATION	1.964087384675837E-5	DEFECT
// 255.255.255.255	WITHOUT_CLASSIFICATION	0.9999873424060076	WITHOUT_CLASSIFICATION	1.2657593992296775E-5	DEFECT
// 0.0.0.0	WITHOUT_CLASSIFICATION	0.999993842636396	WITHOUT_CLASSIFICATION	6.157363604020272E-6	DEFECT
//def self.getaddrinfo(host, port, family = nil, socktype = nil, protocol = nil, flags = nil)	WITHOUT_CLASSIFICATION	0.9999975214340915	WITHOUT_CLASSIFICATION	2.4785659086037662E-6	DEFECT
// line 323	WITHOUT_CLASSIFICATION	0.9999939960689456	WITHOUT_CLASSIFICATION	6.003931054354948E-6	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.999969277846317	WITHOUT_CLASSIFICATION	3.072215368309548E-5	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.999969277846317	WITHOUT_CLASSIFICATION	3.072215368309548E-5	DEFECT
// ok, it's a socket...set values accordingly // just using AF_INET since we can't tell from SocketChannel...	WITHOUT_CLASSIFICATION	0.9999735513478937	WITHOUT_CLASSIFICATION	2.644865210624972E-5	DEFECT
// datagram, set accordingly // again, AF_INET	WITHOUT_CLASSIFICATION	0.9999844568866105	WITHOUT_CLASSIFICATION	1.554311338942653E-5	DEFECT
//IRubyObject family = args[2];	WITHOUT_CLASSIFICATION	0.9999451299780714	WITHOUT_CLASSIFICATION	5.487002192860952E-5	DEFECT
// When Socket::AI_PASSIVE and host is nil, return 'any' address. 	WITHOUT_CLASSIFICATION	0.9999919117989325	WITHOUT_CLASSIFICATION	8.088201067506399E-6	DEFECT
// The value of 1 is for Socket::AI_PASSIVE.	WITHOUT_CLASSIFICATION	0.9999324523797385	WITHOUT_CLASSIFICATION	6.754762026152836E-5	DEFECT
// RubySocket	WITHOUT_CLASSIFICATION	0.9999844017848193	WITHOUT_CLASSIFICATION	1.5598215180786887E-5	DEFECT
// numeric host, use it for port	WITHOUT_CLASSIFICATION	0.9999971693211263	WITHOUT_CLASSIFICATION	2.8306788736411414E-6	DEFECT
//            e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999976298993172	WITHOUT_CLASSIFICATION	2.370100682899221E-6	DEFECT
// we were woken up without being selected...poll for thread events and go back to sleep	WITHOUT_CLASSIFICATION	0.9999990649149445	WITHOUT_CLASSIFICATION	9.350850555306784E-7	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999996165721203	WITHOUT_CLASSIFICATION	3.8342787965890383E-7	DEFECT
// no connection immediately accepted, let them try again	WITHOUT_CLASSIFICATION	0.9999972904279286	WITHOUT_CLASSIFICATION	2.709572071351532E-6	DEFECT
// do nothing, just exit	WITHOUT_CLASSIFICATION	0.9999886523873519	WITHOUT_CLASSIFICATION	1.1347612648182086E-5	DEFECT
//nativeThread.setPriority(priority);	WITHOUT_CLASSIFICATION	0.9999799167540684	WITHOUT_CLASSIFICATION	2.0083245931634755E-5	DEFECT
// set thread context JRuby classloader here, for Ruby-owned thread	WITHOUT_CLASSIFICATION	0.9999983746680927	WITHOUT_CLASSIFICATION	1.6253319073516946E-6	DEFECT
// uber-ThreadKill catcher, since it should always just mean "be dead"	WITHOUT_CLASSIFICATION	0.9999989346737196	WITHOUT_CLASSIFICATION	1.0653262803566979E-6	DEFECT
// Call the thread's code	WITHOUT_CLASSIFICATION	0.9999806377005913	WITHOUT_CLASSIFICATION	1.9362299408599722E-5	DEFECT
// Someone called exit!, so we need to kill the main thread	WITHOUT_CLASSIFICATION	0.9999990877782148	WITHOUT_CLASSIFICATION	9.122217851145717E-7	DEFECT
// restore context classloader, in case we're using a thread pool	WITHOUT_CLASSIFICATION	0.9999991919224465	WITHOUT_CLASSIFICATION	8.080775535980466E-7	DEFECT
// be dead	WITHOUT_CLASSIFICATION	0.9999938235227057	WITHOUT_CLASSIFICATION	6.176477294242166E-6	DEFECT
// loop until a context is available, to clean up softrefs that might have been collected	WITHOUT_CLASSIFICATION	0.999999892200277	WITHOUT_CLASSIFICATION	1.0779972298182975E-7	DEFECT
// all threads in ruby thread group plus main thread	WITHOUT_CLASSIFICATION	0.9999989104733797	WITHOUT_CLASSIFICATION	1.0895266202469718E-6	DEFECT
// thread is not alive, skip it	WITHOUT_CLASSIFICATION	0.9997898407613478	WITHOUT_CLASSIFICATION	2.1015923865220145E-4	DEFECT
// future is done or cancelled, skip it	WITHOUT_CLASSIFICATION	0.9999976314770456	WITHOUT_CLASSIFICATION	2.3685229543812507E-6	DEFECT
// first, check if the sender has unreceived mail	WITHOUT_CLASSIFICATION	0.9999987085161027	WITHOUT_CLASSIFICATION	1.2914838973479217E-6	DEFECT
// then deliver mail to the target	WITHOUT_CLASSIFICATION	0.9999995763744239	WITHOUT_CLASSIFICATION	4.236255760150949E-7	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999940150370022	WITHOUT_CLASSIFICATION	5.984962997784198E-6	DEFECT
// Define a second version that doesn't take a block, so we have unique code paths for both cases.	WITHOUT_CLASSIFICATION	0.9999957930797908	WITHOUT_CLASSIFICATION	4.206920209171485E-6	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999962800203082	WITHOUT_CLASSIFICATION	3.719979691993931E-6	DEFECT
// main body	WITHOUT_CLASSIFICATION	0.99999659099512	WITHOUT_CLASSIFICATION	3.40900487998755E-6	DEFECT
// return jump handling	WITHOUT_CLASSIFICATION	0.9999989198205294	WITHOUT_CLASSIFICATION	1.0801794706723287E-6	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9999914204003921	WITHOUT_CLASSIFICATION	8.57959960789583E-6	DEFECT
// return result if we're still good	WITHOUT_CLASSIFICATION	0.999995999733363	WITHOUT_CLASSIFICATION	4.000266637081868E-6	DEFECT
// redo jump handling	WITHOUT_CLASSIFICATION	0.9999992189264679	WITHOUT_CLASSIFICATION	7.810735320270138E-7	DEFECT
// clear the redo	WITHOUT_CLASSIFICATION	0.9999984576133144	WITHOUT_CLASSIFICATION	1.542386685630485E-6	DEFECT
// get runtime, create jump error, and throw it	WITHOUT_CLASSIFICATION	0.9999978114554603	WITHOUT_CLASSIFICATION	2.188544539635465E-6	DEFECT
// throw redo error if we're still good	WITHOUT_CLASSIFICATION	0.9999499719344499	WITHOUT_CLASSIFICATION	5.002806555002015E-5	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9999955761191984	WITHOUT_CLASSIFICATION	4.4238808016100605E-6	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.999994511573723	WITHOUT_CLASSIFICATION	5.488426277020918E-6	DEFECT
// No required specified, check actual number of required args	WITHOUT_CLASSIFICATION	0.9999999021841319	WITHOUT_CLASSIFICATION	9.781586801882026E-8	DEFECT
// actual required is less than 3, so we use specific arity	WITHOUT_CLASSIFICATION	0.9999993422759756	WITHOUT_CLASSIFICATION	6.577240243154698E-7	DEFECT
// actual required is greater than 3, raise error (we don't support actual required > 3)	WITHOUT_CLASSIFICATION	0.9999838071240197	WITHOUT_CLASSIFICATION	1.6192875980310417E-5	DEFECT
// simple path, no multimethod	WITHOUT_CLASSIFICATION	0.9999977124775373	WITHOUT_CLASSIFICATION	2.28752246275834E-6	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9999952201508819	WITHOUT_CLASSIFICATION	4.7798491180585605E-6	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9999952201508819	WITHOUT_CLASSIFICATION	4.7798491180585605E-6	DEFECT
// normal all-rest method	WITHOUT_CLASSIFICATION	0.9999949047777816	WITHOUT_CLASSIFICATION	5.095222218397145E-6	DEFECT
// for zero, one, two, three arities, JavaMethod.JavaMethod*.call(...IRubyObject[] args...) will check	WITHOUT_CLASSIFICATION	0.9999975039276054	WITHOUT_CLASSIFICATION	2.496072394595791E-6	DEFECT
// promise to implement zero to N	WITHOUT_CLASSIFICATION	0.9999900322052266	WITHOUT_CLASSIFICATION	9.967794773319439E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999957246185113	WITHOUT_CLASSIFICATION	4.2753814886333565E-6	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999991174968806	WITHOUT_CLASSIFICATION	8.825031194376935E-7	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999994507294065	WITHOUT_CLASSIFICATION	5.492705934169514E-7	DEFECT
// confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999996485648047	WITHOUT_CLASSIFICATION	3.5143519524880435E-7	DEFECT
// confirm maximum not greater than optional	WITHOUT_CLASSIFICATION	0.9999937226550316	WITHOUT_CLASSIFICATION	6.277344968333869E-6	DEFECT
// Raise an error if arity does not match requirements	WITHOUT_CLASSIFICATION	0.9999186950643025	WITHOUT_CLASSIFICATION	8.130493569748766E-5	DEFECT
// tc	WITHOUT_CLASSIFICATION	0.9999865016349929	WITHOUT_CLASSIFICATION	1.349836500717367E-5	DEFECT
// self // name	WITHOUT_CLASSIFICATION	0.9999955358596858	WITHOUT_CLASSIFICATION	4.464140314188634E-6	DEFECT
// no args	WITHOUT_CLASSIFICATION	0.9999983911582422	WITHOUT_CLASSIFICATION	1.6088417577265583E-6	DEFECT
// variable args with block	WITHOUT_CLASSIFICATION	0.9999930322994096	WITHOUT_CLASSIFICATION	6.967700590378459E-6	DEFECT
// variable args no block, load null block	WITHOUT_CLASSIFICATION	0.9999970817391103	WITHOUT_CLASSIFICATION	2.9182608897531385E-6	DEFECT
// zero args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999941820508641	WITHOUT_CLASSIFICATION	5.8179491358748265E-6	DEFECT
// one arg with block	WITHOUT_CLASSIFICATION	0.9999931185563359	WITHOUT_CLASSIFICATION	6.881443664126933E-6	DEFECT
// one arg, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999967333548259	WITHOUT_CLASSIFICATION	3.266645174153591E-6	DEFECT
// two args with block	WITHOUT_CLASSIFICATION	0.999986659779738	WITHOUT_CLASSIFICATION	1.3340220261996479E-5	DEFECT
// two args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999954624851832	WITHOUT_CLASSIFICATION	4.537514816720886E-6	DEFECT
// three args with block	WITHOUT_CLASSIFICATION	0.999985036878147	WITHOUT_CLASSIFICATION	1.4963121853027055E-5	DEFECT
// three args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999948533770919	WITHOUT_CLASSIFICATION	5.14662290801819E-6	DEFECT
// load block if it accepts block	WITHOUT_CLASSIFICATION	0.9999958292947858	WITHOUT_CLASSIFICATION	4.170705214186777E-6	DEFECT
// all other arg cases with block	WITHOUT_CLASSIFICATION	0.9999987512160914	WITHOUT_CLASSIFICATION	1.2487839086448632E-6	DEFECT
// all other arg cases without block	WITHOUT_CLASSIFICATION	0.9999991029648948	WITHOUT_CLASSIFICATION	8.970351051598685E-7	DEFECT
// one arg, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999975286882832	WITHOUT_CLASSIFICATION	2.4713117167591225E-6	DEFECT
// two args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999963389271302	WITHOUT_CLASSIFICATION	3.6610728697399978E-6	DEFECT
// three args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999958680372487	WITHOUT_CLASSIFICATION	4.131962751232125E-6	DEFECT
// load target for invocations	WITHOUT_CLASSIFICATION	0.9999983197597127	WITHOUT_CLASSIFICATION	1.6802402872810042E-6	DEFECT
// load receiver as original type for virtual invocation	WITHOUT_CLASSIFICATION	0.9999989422006987	WITHOUT_CLASSIFICATION	1.0577993013511351E-6	DEFECT
// static invocation	WITHOUT_CLASSIFICATION	0.9999966087515284	WITHOUT_CLASSIFICATION	3.3912484715026653E-6	DEFECT
// virtual invocation	WITHOUT_CLASSIFICATION	0.9999938327469682	WITHOUT_CLASSIFICATION	6.1672530318162626E-6	DEFECT
// void return type, so we need to load a nil for returning below	WITHOUT_CLASSIFICATION	0.9999995817173747	WITHOUT_CLASSIFICATION	4.182826252969512E-7	DEFECT
// normal finally and exit	WITHOUT_CLASSIFICATION	0.9999782706576857	WITHOUT_CLASSIFICATION	2.1729342314337447E-5	DEFECT
// promise to implement one to N	WITHOUT_CLASSIFICATION	0.9999946650387203	WITHOUT_CLASSIFICATION	5.334961279706608E-6	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.999994511573723	WITHOUT_CLASSIFICATION	5.488426277020918E-6	DEFECT
// these are only needed if we have a non-noop call config	WITHOUT_CLASSIFICATION	0.9999990558910834	WITHOUT_CLASSIFICATION	9.441089165259716E-7	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.999980235353732	WITHOUT_CLASSIFICATION	1.9764646267965405E-5	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.999980235353732	WITHOUT_CLASSIFICATION	1.9764646267965405E-5	DEFECT
// singleton classes don't get their own visibility domain	WITHOUT_CLASSIFICATION	0.9999994408775424	WITHOUT_CLASSIFICATION	5.591224574481807E-7	DEFECT
// For visibility we need real meta class and not anonymous one from class << self	WITHOUT_CLASSIFICATION	0.9999984963362278	WITHOUT_CLASSIFICATION	1.5036637721000744E-6	DEFECT
// SimpleInvocationMethod	WITHOUT_CLASSIFICATION	0.9999916986650408	WITHOUT_CLASSIFICATION	8.301334959267902E-6	DEFECT
// never reached	WITHOUT_CLASSIFICATION	0.9999986622979665	WITHOUT_CLASSIFICATION	1.3377020335124968E-6	DEFECT
// promise to implement N with block	WITHOUT_CLASSIFICATION	0.999993142497724	WITHOUT_CLASSIFICATION	6.857502276002226E-6	DEFECT
// promise to implement zero to N with block	WITHOUT_CLASSIFICATION	0.9999879866510758	WITHOUT_CLASSIFICATION	1.2013348924177754E-5	DEFECT
// promise to implement one to N with block	WITHOUT_CLASSIFICATION	0.999993570211492	WITHOUT_CLASSIFICATION	6.429788508036269E-6	DEFECT
// promise to implement two to N with block	WITHOUT_CLASSIFICATION	0.9999929739249106	WITHOUT_CLASSIFICATION	7.026075089426081E-6	DEFECT
// promise to implement zero to three with block	WITHOUT_CLASSIFICATION	0.9999779116692751	WITHOUT_CLASSIFICATION	2.2088330724883067E-5	DEFECT
// promise to implement one to three with block	WITHOUT_CLASSIFICATION	0.9999887912250391	WITHOUT_CLASSIFICATION	1.1208774960727663E-5	DEFECT
// promise to implement two to three with block	WITHOUT_CLASSIFICATION	0.9999870814607672	WITHOUT_CLASSIFICATION	1.2918539232839459E-5	DEFECT
// promise to implement three with block	WITHOUT_CLASSIFICATION	0.9999817665175349	WITHOUT_CLASSIFICATION	1.8233482465093836E-5	DEFECT
// promise to implement N	WITHOUT_CLASSIFICATION	0.9999905874821866	WITHOUT_CLASSIFICATION	9.412517813445155E-6	DEFECT
// DumpingInvocationMethodFactory	WITHOUT_CLASSIFICATION	0.9999945643410191	WITHOUT_CLASSIFICATION	5.435658980904397E-6	DEFECT
// We promote our box to being its own box since we're changing // visibilities, and need it to be reflected on this method object // independent of any other sharing the box.	WITHOUT_CLASSIFICATION	0.9999999934239895	WITHOUT_CLASSIFICATION	6.57601049593549E-9	DEFECT
// Normally we could leave these to fall back on the superclass, but // since it dispatches through the [] version below, which may // dispatch through the []+block version, we can save it a couple hops // by overriding these here.	WITHOUT_CLASSIFICATION	0.9999976235648927	WITHOUT_CLASSIFICATION	2.3764351072655603E-6	DEFECT
// promise to implement two to N	WITHOUT_CLASSIFICATION	0.9999952330068193	WITHOUT_CLASSIFICATION	4.766993180677646E-6	DEFECT
// promise to implement three to N	WITHOUT_CLASSIFICATION	0.9999884700249043	WITHOUT_CLASSIFICATION	1.1529975095738678E-5	DEFECT
// promise to implement zero to three	WITHOUT_CLASSIFICATION	0.9999876438318122	WITHOUT_CLASSIFICATION	1.2356168187856982E-5	DEFECT
// promise to implement one to three	WITHOUT_CLASSIFICATION	0.9999937298636817	WITHOUT_CLASSIFICATION	6.270136318260082E-6	DEFECT
// promise to implement two to three	WITHOUT_CLASSIFICATION	0.9999940907849497	WITHOUT_CLASSIFICATION	5.909215050280666E-6	DEFECT
// promise to implement three	WITHOUT_CLASSIFICATION	0.9999831269437276	WITHOUT_CLASSIFICATION	1.6873056272457244E-5	DEFECT
// all other arities use "n" dispatch path	WITHOUT_CLASSIFICATION	0.9999999599847365	WITHOUT_CLASSIFICATION	4.001526357643772E-8	DEFECT
// load up object and add a few useful methods	WITHOUT_CLASSIFICATION	0.9999999384442013	WITHOUT_CLASSIFICATION	6.155579869437215E-8	DEFECT
// open up the 'to_java' and 'as' coercion methods on Ruby Objects, via Kernel	WITHOUT_CLASSIFICATION	0.999999780631092	WITHOUT_CLASSIFICATION	2.1936890811522726E-7	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999993197321629	WITHOUT_CLASSIFICATION	6.802678370819213E-7	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9999994318895153	WITHOUT_CLASSIFICATION	5.681104847316127E-7	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999979333062311	WITHOUT_CLASSIFICATION	2.066693768863999E-6	DEFECT
// wrap self and store the wrapper	WITHOUT_CLASSIFICATION	0.999999570098592	WITHOUT_CLASSIFICATION	4.2990140795892417E-7	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999975434328003	WITHOUT_CLASSIFICATION	2.4565671997116305E-6	DEFECT
// start setup method	WITHOUT_CLASSIFICATION	0.9999983063396716	WITHOUT_CLASSIFICATION	1.6936603284181597E-6	DEFECT
// set RubyClass	WITHOUT_CLASSIFICATION	0.9999989311058463	WITHOUT_CLASSIFICATION	1.0688941537368578E-6	DEFECT
// set Ruby	WITHOUT_CLASSIFICATION	0.9999960790181549	WITHOUT_CLASSIFICATION	3.920981845039391E-6	DEFECT
// all methods dispatch to the simple version by default, which is method_missing normally	WITHOUT_CLASSIFICATION	0.9999993676418096	WITHOUT_CLASSIFICATION	6.323581903544669E-7	DEFECT
// try specific name first, falling back on simple name	WITHOUT_CLASSIFICATION	0.9999975282097533	WITHOUT_CLASSIFICATION	2.471790246764488E-6	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999876354349899	WITHOUT_CLASSIFICATION	1.2364565010107742E-5	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999994945213293	WITHOUT_CLASSIFICATION	5.054786707168654E-7	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999993197321629	WITHOUT_CLASSIFICATION	6.802678370819213E-7	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9999994318895153	WITHOUT_CLASSIFICATION	5.681104847316127E-7	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999979333062311	WITHOUT_CLASSIFICATION	2.066693768863999E-6	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999975434328003	WITHOUT_CLASSIFICATION	2.4565671997116305E-6	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9999984520736598	WITHOUT_CLASSIFICATION	1.547926340130556E-6	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9999999180419139	WITHOUT_CLASSIFICATION	8.195808609315177E-8	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999699962960654	WITHOUT_CLASSIFICATION	3.0003703934556977E-5	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999946153168723	WITHOUT_CLASSIFICATION	5.384683127757501E-6	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999946821280855	WITHOUT_CLASSIFICATION	5.31787191449094E-6	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999932119175323	WITHOUT_CLASSIFICATION	6.788082467610018E-6	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999993539235417	WITHOUT_CLASSIFICATION	6.460764583011714E-7	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999985775063481	WITHOUT_CLASSIFICATION	1.4224936518554566E-6	DEFECT
// create static init, for a monitor object	WITHOUT_CLASSIFICATION	0.9999998304273582	WITHOUT_CLASSIFICATION	1.6957264182892614E-7	DEFECT
// store the wrapper	WITHOUT_CLASSIFICATION	0.9999971756252911	WITHOUT_CLASSIFICATION	2.824374708978478E-6	DEFECT
// prepare temp locals	WITHOUT_CLASSIFICATION	0.9999937863082815	WITHOUT_CLASSIFICATION	6.2136917185005255E-6	DEFECT
// Try to look up field for simple name // get field; if nonnull, go straight to dispatch	WITHOUT_CLASSIFICATION	0.999998124461197	WITHOUT_CLASSIFICATION	1.8755388030985698E-6	DEFECT
// field is null, lock class and try to populate	WITHOUT_CLASSIFICATION	0.9999943685142024	WITHOUT_CLASSIFICATION	5.631485797534292E-6	DEFECT
// try/finally block to ensure unlock	WITHOUT_CLASSIFICATION	0.9999939919423195	WITHOUT_CLASSIFICATION	6.008057680501429E-6	DEFECT
// store it	WITHOUT_CLASSIFICATION	0.9999954840776041	WITHOUT_CLASSIFICATION	4.515922395969514E-6	DEFECT
// end of try block	WITHOUT_CLASSIFICATION	0.999994560048485	WITHOUT_CLASSIFICATION	5.439951515013661E-6	DEFECT
// finally block to release monitor	WITHOUT_CLASSIFICATION	0.9999971930462357	WITHOUT_CLASSIFICATION	2.806953764205632E-6	DEFECT
// exception handling for monitor release	WITHOUT_CLASSIFICATION	0.9999996722839095	WITHOUT_CLASSIFICATION	3.277160905093987E-7	DEFECT
// re-get, re-check method; if not null now, go to dispatch	WITHOUT_CLASSIFICATION	0.9999985391351831	WITHOUT_CLASSIFICATION	1.4608648168565984E-6	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999994945213293	WITHOUT_CLASSIFICATION	5.054786707168654E-7	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9999999180419139	WITHOUT_CLASSIFICATION	8.195808609315177E-8	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999699962960654	WITHOUT_CLASSIFICATION	3.0003703934556977E-5	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999946821280855	WITHOUT_CLASSIFICATION	5.31787191449094E-6	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999932119175323	WITHOUT_CLASSIFICATION	6.788082467610018E-6	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999993539235417	WITHOUT_CLASSIFICATION	6.460764583011714E-7	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999985775063481	WITHOUT_CLASSIFICATION	1.4224936518554566E-6	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999996861351411	WITHOUT_CLASSIFICATION	3.1386485887043363E-7	DEFECT
// method still not available, call method_missing	WITHOUT_CLASSIFICATION	0.9999988884086685	WITHOUT_CLASSIFICATION	1.1115913316071317E-6	DEFECT
// perform the dispatch	WITHOUT_CLASSIFICATION	0.9999925999496271	WITHOUT_CLASSIFICATION	7.400050372964047E-6	DEFECT
// try to load the specified name; only if that fails, try to define the class	WITHOUT_CLASSIFICATION	0.9999999734925037	WITHOUT_CLASSIFICATION	2.650749629793018E-8	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999998671805516	WITHOUT_CLASSIFICATION	1.328194484474602E-7	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999998671805516	WITHOUT_CLASSIFICATION	1.328194484474602E-7	DEFECT
// setup the class	WITHOUT_CLASSIFICATION	0.9999995836219621	WITHOUT_CLASSIFICATION	4.1637803794048E-7	DEFECT
// now, create a method_added that can replace the DynamicMethod fields as they're redefined	WITHOUT_CLASSIFICATION	0.9999989263025263	WITHOUT_CLASSIFICATION	1.0736974737102441E-6	DEFECT
// do nothing, it's a non-impl method	WITHOUT_CLASSIFICATION	0.9999986039570634	WITHOUT_CLASSIFICATION	1.396042936640291E-6	DEFECT
// probably a primitive	WITHOUT_CLASSIFICATION	0.9999933500159331	WITHOUT_CLASSIFICATION	6.649984066902815E-6	DEFECT
// interfaces are handled as modules	WITHOUT_CLASSIFICATION	0.9999995597978619	WITHOUT_CLASSIFICATION	4.402021381178905E-7	DEFECT
// construct the mirror class and parent classes	WITHOUT_CLASSIFICATION	0.9999983775090311	WITHOUT_CLASSIFICATION	1.6224909688178158E-6	DEFECT
// set the full name	WITHOUT_CLASSIFICATION	0.9999964410463538	WITHOUT_CLASSIFICATION	3.558953646292504E-6	DEFECT
// include all interfaces	WITHOUT_CLASSIFICATION	0.999998261683037	WITHOUT_CLASSIFICATION	1.7383169629942361E-6	DEFECT
// if it's an array, only add methods for aref, aset, and length	WITHOUT_CLASSIFICATION	0.9999997124247685	WITHOUT_CLASSIFICATION	2.8757523153980954E-7	DEFECT
// add array construction methods	WITHOUT_CLASSIFICATION	0.9999980058443774	WITHOUT_CLASSIFICATION	1.9941556225863218E-6	DEFECT
// add all public constructors (note: getConstructors only returns public ones)	WITHOUT_CLASSIFICATION	0.999998585030747	WITHOUT_CLASSIFICATION	1.4149692531050289E-6	DEFECT
// add all instance and static methods	WITHOUT_CLASSIFICATION	0.9999998069434206	WITHOUT_CLASSIFICATION	1.9305657943513063E-7	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.999984229075999	WITHOUT_CLASSIFICATION	1.5770924000896765E-5	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999822295252813	WITHOUT_CLASSIFICATION	1.77704747187095E-5	DEFECT
// only include static methods if specified	WITHOUT_CLASSIFICATION	0.9999998866448632	WITHOUT_CLASSIFICATION	1.1335513685024418E-7	DEFECT
// add a few type-specific special methods	WITHOUT_CLASSIFICATION	0.9999995016565856	WITHOUT_CLASSIFICATION	4.983434144576361E-7	DEFECT
// add all static variables	WITHOUT_CLASSIFICATION	0.9999989562925113	WITHOUT_CLASSIFICATION	1.043707488635541E-6	DEFECT
// only public static fields that are valid constants	WITHOUT_CLASSIFICATION	0.9999957171186139	WITHOUT_CLASSIFICATION	4.282881386047642E-6	DEFECT
// looks like someone's trying to raise a Java exception. Let them.	WITHOUT_CLASSIFICATION	0.9999996695889023	WITHOUT_CLASSIFICATION	3.3041109764569307E-7	DEFECT
// NOTE: The five match methods are arity-split to avoid the cost of boxing arguments // when there's already a cached match. Do not condense them into a single // method.	WITHOUT_CLASSIFICATION	0.9999829196070311	WITHOUT_CLASSIFICATION	1.708039296886615E-5	DEFECT
// TODO: This is where we would want to do precision checks to see // if it's non-destructive to coerce a given type into the target // integral primitive	WITHOUT_CLASSIFICATION	0.9135853019698289	WITHOUT_CLASSIFICATION	0.08641469803017109	DEFECT
// long first because it's what Fixnum claims to be	WITHOUT_CLASSIFICATION	0.9999990138527889	WITHOUT_CLASSIFICATION	9.861472110611528E-7	DEFECT
// double first because it's what float claims to be	WITHOUT_CLASSIFICATION	0.9999973725534489	WITHOUT_CLASSIFICATION	2.6274465509890864E-6	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.7281020068217553	WITHOUT_CLASSIFICATION	0.2718979931782447	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999966512692446	WITHOUT_CLASSIFICATION	3.3487307552868283E-6	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999957831580343	WITHOUT_CLASSIFICATION	4.216841965761434E-6	DEFECT
// we set all Java methods to optional, since many/most have overloads	WITHOUT_CLASSIFICATION	0.9999998575544564	WITHOUT_CLASSIFICATION	1.424455435583035E-7	DEFECT
// If we hold a Java object, we need a java_class accessor	WITHOUT_CLASSIFICATION	0.9999992763540579	WITHOUT_CLASSIFICATION	7.236459420427692E-7	DEFECT
// line 326	WITHOUT_CLASSIFICATION	0.999993375267215	WITHOUT_CLASSIFICATION	6.624732784978632E-6	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999966512692446	WITHOUT_CLASSIFICATION	3.3487307552868283E-6	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999957831580343	WITHOUT_CLASSIFICATION	4.216841965761434E-6	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999822295252813	WITHOUT_CLASSIFICATION	1.77704747187095E-5	DEFECT
// construct new array proxy (ArrayJavaProxy)	WITHOUT_CLASSIFICATION	0.9999987034539379	WITHOUT_CLASSIFICATION	1.296546062104972E-6	DEFECT
// Get map of all fields we want to define.  	WITHOUT_CLASSIFICATION	0.9999955850964849	WITHOUT_CLASSIFICATION	4.414903515077698E-6	DEFECT
// Look through all mappings to find a match entry for this field	WITHOUT_CLASSIFICATION	0.9999992283668286	WITHOUT_CLASSIFICATION	7.716331713750003E-7	DEFECT
// Hit a non-java proxy class (included Modules can be a cause of this...skip)	WITHOUT_CLASSIFICATION	0.9999984556621673	WITHOUT_CLASSIFICATION	1.5443378326807492E-6	DEFECT
// We could not find all of them print out first one (we could print them all?)	WITHOUT_CLASSIFICATION	0.9999961708082118	WITHOUT_CLASSIFICATION	3.829191788136537E-6	DEFECT
// dummy bodies for default impls	WITHOUT_CLASSIFICATION	0.9999982581270355	WITHOUT_CLASSIFICATION	1.7418729645361549E-6	DEFECT
// initialize this if it hasn't been	WITHOUT_CLASSIFICATION	0.9996537056398979	WITHOUT_CLASSIFICATION	3.46294360102221E-4	DEFECT
// initialize these if they haven't been	WITHOUT_CLASSIFICATION	0.9999729450417209	WITHOUT_CLASSIFICATION	2.705495827914419E-5	DEFECT
// not allowed for original (non-generated) Java classes // note: not allowing for any previously created class right now; // this restriction might be loosened later for generated classes	WITHOUT_CLASSIFICATION	0.9999838363313185	WITHOUT_CLASSIFICATION	1.6163668681516785E-5	DEFECT
// setup new, etc unless this is a ConcreteJavaProxy subclass	WITHOUT_CLASSIFICATION	0.99999841258064	WITHOUT_CLASSIFICATION	1.5874193598812267E-6	DEFECT
// First we make modifications to the class, to adapt it to being // both a Ruby class and a proxy for a Java type	WITHOUT_CLASSIFICATION	0.9999950741551614	WITHOUT_CLASSIFICATION	4.925844838568414E-6	DEFECT
// list of interfaces we implement	WITHOUT_CLASSIFICATION	0.9999977720508821	WITHOUT_CLASSIFICATION	2.227949117872354E-6	DEFECT
// We capture the original "new" and make it private	WITHOUT_CLASSIFICATION	0.9999999295857925	WITHOUT_CLASSIFICATION	7.041420740945936E-8	DEFECT
// The replacement "new" allocates and inits the Ruby object as before, but // also instantiates our proxified Java object by calling __jcreate!	WITHOUT_CLASSIFICATION	0.9999999609745337	WITHOUT_CLASSIFICATION	3.902546625071962E-8	DEFECT
// Next, we define a few private methods that we'll use to manipulate // the Java object contained within this Ruby object	WITHOUT_CLASSIFICATION	0.9999982046047797	WITHOUT_CLASSIFICATION	1.7953952202963677E-6	DEFECT
// jcreate instantiates the proxy object which implements all interfaces // and which is wrapped and implemented by this object	WITHOUT_CLASSIFICATION	0.999997533199162	WITHOUT_CLASSIFICATION	2.466800838141465E-6	DEFECT
// Now we add an "implement" and "implement_all" methods to the class	WITHOUT_CLASSIFICATION	0.9999994143159767	WITHOUT_CLASSIFICATION	5.85684023370468E-7	DEFECT
// implement all forces implementation of all interfaces we intend // for this class to implement	WITHOUT_CLASSIFICATION	0.9999876274967432	WITHOUT_CLASSIFICATION	1.2372503256754211E-5	DEFECT
// we've already done the above priming logic, just add another interface // to the list of intentions unless we're past the point of no return or // already intend to implement the given interface	WITHOUT_CLASSIFICATION	0.9999999098755573	WITHOUT_CLASSIFICATION	9.01244426579857E-8	DEFECT
// walk all superclasses aggregating interfaces	WITHOUT_CLASSIFICATION	0.999999819936377	WITHOUT_CLASSIFICATION	1.8006362300406184E-7	DEFECT
// construct the new interface impl and set it into the object	WITHOUT_CLASSIFICATION	0.9999999329265026	WITHOUT_CLASSIFICATION	6.707349744480341E-8	DEFECT
// assuming the user wants a collection of interfaces that can be // included together. make it so.	WITHOUT_CLASSIFICATION	0.9999981910519361	WITHOUT_CLASSIFICATION	1.8089480638463739E-6	DEFECT
// not allowed for existing Java interface modules	WITHOUT_CLASSIFICATION	0.9999997232797341	WITHOUT_CLASSIFICATION	2.7672026590236745E-7	DEFECT
// To turn a module into an "interface collection" we add a class instance // variable to hold the list of interfaces, and modify append_features // for this module to call append_features on each of those interfaces as // well	WITHOUT_CLASSIFICATION	0.9999995351983963	WITHOUT_CLASSIFICATION	4.648016036103312E-7	DEFECT
// already set up append_features, just add the interface if we haven't already	WITHOUT_CLASSIFICATION	0.9999994640819473	WITHOUT_CLASSIFICATION	5.359180527798474E-7	DEFECT
// array-of-interface-type creation/identity	WITHOUT_CLASSIFICATION	0.9999994378964557	WITHOUT_CLASSIFICATION	5.621035441666939E-7	DEFECT
// keep this variant for kind_of? testing	WITHOUT_CLASSIFICATION	0.9999911416831121	WITHOUT_CLASSIFICATION	8.858316887983983E-6	DEFECT
// array creation should use this variant	WITHOUT_CLASSIFICATION	0.9999861047826749	WITHOUT_CLASSIFICATION	1.3895217325153907E-5	DEFECT
// parent.setConstant(name, proxyClass); // where the name should come from ?	WITHOUT_CLASSIFICATION	0.9999906383483985	WITHOUT_CLASSIFICATION	9.3616516015329E-6	DEFECT
// including interface module so old-style interface "subclasses" will // respond correctly to #kind_of?, etc.	WITHOUT_CLASSIFICATION	0.9998840945866561	WITHOUT_CLASSIFICATION	1.1590541334388277E-4	DEFECT
// add reference to interface module	WITHOUT_CLASSIFICATION	0.9999997532684357	WITHOUT_CLASSIFICATION	2.467315643510329E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999826817543317	WITHOUT_CLASSIFICATION	1.7318245668364496E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999826817543317	WITHOUT_CLASSIFICATION	1.7318245668364496E-5	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.999984229075999	WITHOUT_CLASSIFICATION	1.5770924000896765E-5	DEFECT
// same as argument_types, but matches name in java.lang.reflect.Constructor/Method	WITHOUT_CLASSIFICATION	0.999999413205626	WITHOUT_CLASSIFICATION	5.867943738702362E-7	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999960857241968	WITHOUT_CLASSIFICATION	3.914275803083161E-6	DEFECT
// weakly reserved names	WITHOUT_CLASSIFICATION	0.9999853079859456	WITHOUT_CLASSIFICATION	1.4692014054250521E-5	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999994464139793	WITHOUT_CLASSIFICATION	5.53586020711461E-7	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999994464139793	WITHOUT_CLASSIFICATION	5.53586020711461E-7	DEFECT
// modified only by addMethod; no synchronization required	WITHOUT_CLASSIFICATION	0.9999996827339133	WITHOUT_CLASSIFICATION	3.1726608674244817E-7	DEFECT
// if there's no constructor, we must prevent construction	WITHOUT_CLASSIFICATION	0.9999813261580285	WITHOUT_CLASSIFICATION	1.8673841971541284E-5	DEFECT
// caching constructors, as they're accessed for each new instance	WITHOUT_CLASSIFICATION	0.9999997928349691	WITHOUT_CLASSIFICATION	2.0716503080862862E-7	DEFECT
// proxy module for interfaces	WITHOUT_CLASSIFICATION	0.9999991091751933	WITHOUT_CLASSIFICATION	8.908248066994731E-7	DEFECT
// proxy class for concrete classes.  also used for // "concrete" interfaces, which is why we have two fields	WITHOUT_CLASSIFICATION	0.9999983089739302	WITHOUT_CLASSIFICATION	1.6910260698417007E-6	DEFECT
// readable only by thread building proxy, so don't need to be // volatile. used to handle recursive calls to getProxyClass/Module // while proxy is being constructed (usually when a constant // defined by a class is of the same type as that class).	WITHOUT_CLASSIFICATION	0.9999979791117697	WITHOUT_CLASSIFICATION	2.020888230302686E-6	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999969255094969	WITHOUT_CLASSIFICATION	3.0744905030530314E-6	DEFECT
// Now add all aliases for the static methods (fields) as appropriate	WITHOUT_CLASSIFICATION	0.9999990589441315	WITHOUT_CLASSIFICATION	9.410558684652727E-7	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9999073581359695	WITHOUT_CLASSIFICATION	9.264186403044226E-5	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999984054320071	WITHOUT_CLASSIFICATION	1.5945679928107487E-6	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9999958542260108	WITHOUT_CLASSIFICATION	4.145773989219277E-6	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999881393268912	WITHOUT_CLASSIFICATION	1.1860673108777585E-5	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.999967892219753	WITHOUT_CLASSIFICATION	3.2107780247047164E-5	DEFECT
// Additionally add ?-postfixed aliases to any boolean methods and properties.	WITHOUT_CLASSIFICATION	0.9999993336187862	WITHOUT_CLASSIFICATION	6.663812136941798E-7	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9999365968726748	WITHOUT_CLASSIFICATION	6.340312732524291E-5	DEFECT
// something?	WITHOUT_CLASSIFICATION	0.999989893337987	WITHOUT_CLASSIFICATION	1.010666201301647E-5	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999996363953252	WITHOUT_CLASSIFICATION	3.636046748753527E-7	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999996363953252	WITHOUT_CLASSIFICATION	3.636046748753527E-7	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9999988752964574	WITHOUT_CLASSIFICATION	1.1247035426450416E-6	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9999988752964574	WITHOUT_CLASSIFICATION	1.1247035426450416E-6	DEFECT
// create constructorInstaller; if there are no constructors, it will disable construction	WITHOUT_CLASSIFICATION	0.9999992975132703	WITHOUT_CLASSIFICATION	7.024867296636562E-7	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9999949254421561	WITHOUT_CLASSIFICATION	5.074557843981449E-6	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9999991346397293	WITHOUT_CLASSIFICATION	8.653602706906517E-7	DEFECT
// now iterate over all installers and make sure they also have appropriate aliases	WITHOUT_CLASSIFICATION	0.9999999224800827	WITHOUT_CLASSIFICATION	7.751991721601885E-8	DEFECT
// old (quasi-deprecated) interface class	WITHOUT_CLASSIFICATION	0.9999996282674729	WITHOUT_CLASSIFICATION	3.717325270572757E-7	DEFECT
// 1.9 support for encodings	WITHOUT_CLASSIFICATION	0.999995037148071	WITHOUT_CLASSIFICATION	4.962851928955506E-6	DEFECT
// double-check the cache now that we're synchronized	WITHOUT_CLASSIFICATION	0.9999772565441677	WITHOUT_CLASSIFICATION	2.2743455832353253E-5	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999881393268912	WITHOUT_CLASSIFICATION	1.1860673108777585E-5	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.999967892219753	WITHOUT_CLASSIFICATION	3.2107780247047164E-5	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9999365968726748	WITHOUT_CLASSIFICATION	6.340312732524291E-5	DEFECT
// one word type name that starts lower-case...it may be a primitive type	WITHOUT_CLASSIFICATION	0.9999951777345867	WITHOUT_CLASSIFICATION	4.822265413293024E-6	DEFECT
// Java.getProxyClass deals with sync issues, so we won't duplicate the logic here	WITHOUT_CLASSIFICATION	0.9999993898615271	WITHOUT_CLASSIFICATION	6.101384729076076E-7	DEFECT
// note: intentionally returning the actual array returned from Java, rather // than wrapping it in a RubyArray. wave of the future, when java_class will // return the actual class, rather than a JavaClass wrapper.	WITHOUT_CLASSIFICATION	0.9999973218901796	WITHOUT_CLASSIFICATION	2.678109820367785E-6	DEFECT
// see note above re: return type	WITHOUT_CLASSIFICATION	0.999953434154582	WITHOUT_CLASSIFICATION	4.6565845417960944E-5	DEFECT
// restrictive security policy; no matter, we only want public // classes anyway	WITHOUT_CLASSIFICATION	0.9999985908355036	WITHOUT_CLASSIFICATION	1.4091644963840487E-6	DEFECT
// very restrictive policy (disallows Member.PUBLIC) // we'd never actually get this far in that case	WITHOUT_CLASSIFICATION	0.9999779221799427	WITHOUT_CLASSIFICATION	2.207782005731193E-5	DEFECT
// one-dimensional array	WITHOUT_CLASSIFICATION	0.9999979752022358	WITHOUT_CLASSIFICATION	2.0247977641589254E-6	DEFECT
// n-dimensional array	WITHOUT_CLASSIFICATION	0.99999783159796	WITHOUT_CLASSIFICATION	2.168402039991603E-6	DEFECT
// if it's an array of arrays, recurse with the component type	WITHOUT_CLASSIFICATION	0.9999495127787609	WITHOUT_CLASSIFICATION	5.048722123901588E-5	DEFECT
// we all all superclasses, but avoid adding superclass methods with same name+signature as subclass methods // see JRUBY-3130	WITHOUT_CLASSIFICATION	0.9999997488443824	WITHOUT_CLASSIFICATION	2.5115561763083453E-7	DEFECT
// Proc implementing an interface, pull in the catch-all code that lets the proc get invoked // no matter what method is called on the interface	WITHOUT_CLASSIFICATION	0.9999904340042413	WITHOUT_CLASSIFICATION	9.565995758801222E-6	DEFECT
// can't be converted any more, return it	WITHOUT_CLASSIFICATION	0.9999360267276118	WITHOUT_CLASSIFICATION	6.397327238814307E-5	DEFECT
// getFooBar() => fooBar?, foo_bar?(*)	WITHOUT_CLASSIFICATION	0.9999941513389247	WITHOUT_CLASSIFICATION	5.848661075294418E-6	DEFECT
// If not a property, but is boolean add ?-postfixed aliases.	WITHOUT_CLASSIFICATION	0.999987166285982	WITHOUT_CLASSIFICATION	1.2833714017894676E-5	DEFECT
// many cases are ok to convert to float; if not one of these, error	WITHOUT_CLASSIFICATION	0.9999104253513201	WITHOUT_CLASSIFICATION	8.957464867984144E-5	DEFECT
// for Object, default to natural wrapper type	WITHOUT_CLASSIFICATION	0.9999890195287707	WITHOUT_CLASSIFICATION	1.0980471229223248E-5	DEFECT
// rubyObject is already of the required jruby class (or subclass)	WITHOUT_CLASSIFICATION	0.9999945020989317	WITHOUT_CLASSIFICATION	5.497901068377994E-6	DEFECT
// the converters handle not only primitive types but also their boxed versions, so we should check // if we have a converter before checking for isPrimitive()	WITHOUT_CLASSIFICATION	0.9999247386852048	WITHOUT_CLASSIFICATION	7.526131479518902E-5	DEFECT
// it's not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999769924631996	WITHOUT_CLASSIFICATION	2.3007536800413123E-5	DEFECT
// we've found a Java type to which we've coerced the Ruby value, wrap it	WITHOUT_CLASSIFICATION	0.9999985388081644	WITHOUT_CLASSIFICATION	1.4611918356711658E-6	DEFECT
// set of utility methods for Java-based proxy objects	WITHOUT_CLASSIFICATION	0.9999998865424837	WITHOUT_CLASSIFICATION	1.1345751635453535E-7	DEFECT
// the proxy (wrapper) type hierarchy	WITHOUT_CLASSIFICATION	0.9999913903756282	WITHOUT_CLASSIFICATION	8.609624371844552E-6	DEFECT
//InterfaceJavaProxy.createInterfaceJavaProxy(context);	WITHOUT_CLASSIFICATION	0.9999919494977747	WITHOUT_CLASSIFICATION	8.050502225385836E-6	DEFECT
// also create the JavaProxy* classes	WITHOUT_CLASSIFICATION	0.9999998701520633	WITHOUT_CLASSIFICATION	1.2984793668422238E-7	DEFECT
// The template for interface modules	WITHOUT_CLASSIFICATION	0.9999994642363622	WITHOUT_CLASSIFICATION	5.357636378239835E-7	DEFECT
// Now attach Java-related extras to core classes	WITHOUT_CLASSIFICATION	0.9999997214018375	WITHOUT_CLASSIFICATION	2.785981624680991E-7	DEFECT
// add all name-to-class mappings	WITHOUT_CLASSIFICATION	0.9999994150769063	WITHOUT_CLASSIFICATION	5.849230938450428E-7	DEFECT
// add some base Java classes everyone will need	WITHOUT_CLASSIFICATION	0.9999990049576798	WITHOUT_CLASSIFICATION	9.950423202008078E-7	DEFECT
// finally, set JavaSupport.isEnabled to true	WITHOUT_CLASSIFICATION	0.9999991575699801	WITHOUT_CLASSIFICATION	8.424300198568877E-7	DEFECT
// shouldn't happen, but if a superclass is specified, it's not ours	WITHOUT_CLASSIFICATION	0.9999923120748281	WITHOUT_CLASSIFICATION	7.687925171874972E-6	DEFECT
// include any interfaces we extend	WITHOUT_CLASSIFICATION	0.9999989633958676	WITHOUT_CLASSIFICATION	1.0366041324941178E-6	DEFECT
// java.lang.Object is added at root of java proxy classes	WITHOUT_CLASSIFICATION	0.9999939938267921	WITHOUT_CLASSIFICATION	6.006173207877409E-6	DEFECT
// other java proxy classes added under their superclass' java proxy	WITHOUT_CLASSIFICATION	0.999999808494448	WITHOUT_CLASSIFICATION	1.9150555186879352E-7	DEFECT
// include interface modules into the proxy class	WITHOUT_CLASSIFICATION	0.9999998639699169	WITHOUT_CLASSIFICATION	1.3603008310077523E-7	DEFECT
// JRUBY-2938 the proxy class might already exist	WITHOUT_CLASSIFICATION	0.9999994566964701	WITHOUT_CLASSIFICATION	5.433035299093431E-7	DEFECT
// add java_method for unbound use	WITHOUT_CLASSIFICATION	0.9999997960019271	WITHOUT_CLASSIFICATION	2.039980729891529E-7	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999979248458387	WITHOUT_CLASSIFICATION	2.075154161225324E-6	DEFECT
// we'll only map conventional class names to modules 	WITHOUT_CLASSIFICATION	0.9999994798504894	WITHOUT_CLASSIFICATION	5.201495105503524E-7	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999858159681985	WITHOUT_CLASSIFICATION	1.4184031801460616E-5	DEFECT
// Haven't found a class, continue on as though it were a package	WITHOUT_CLASSIFICATION	0.9999987510253642	WITHOUT_CLASSIFICATION	1.2489746358276535E-6	DEFECT
// upper case name, so most likely a class	WITHOUT_CLASSIFICATION	0.9999994870445319	WITHOUT_CLASSIFICATION	5.129554680483863E-7	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999960857241968	WITHOUT_CLASSIFICATION	3.914275803083161E-6	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999979248458387	WITHOUT_CLASSIFICATION	2.075154161225324E-6	DEFECT
// this is where we'll get connected when classes are opened using // package module syntax.	WITHOUT_CLASSIFICATION	0.9997560262820128	WITHOUT_CLASSIFICATION	2.439737179873789E-4	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9999991292973993	WITHOUT_CLASSIFICATION	8.707026006782717E-7	DEFECT
// this covers primitives and (unlikely) lower-case class names	WITHOUT_CLASSIFICATION	0.9999973923576378	WITHOUT_CLASSIFICATION	2.607642362167169E-6	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9999766954945163	WITHOUT_CLASSIFICATION	2.3304505483700882E-5	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9999766954945163	WITHOUT_CLASSIFICATION	2.3304505483700882E-5	DEFECT
// Is there a supplied proc argument or do we assume a block was supplied	WITHOUT_CLASSIFICATION	0.9999997604059305	WITHOUT_CLASSIFICATION	2.3959406945186135E-7	DEFECT
// Create list of interfaces to proxy (and make sure they really are interfaces)	WITHOUT_CLASSIFICATION	0.9999998746458801	WITHOUT_CLASSIFICATION	1.2535411985845511E-7	DEFECT
// hashcode is a combination of the interfaces and the Ruby class we're using // to implement them	WITHOUT_CLASSIFICATION	0.9999976611580436	WITHOUT_CLASSIFICATION	2.3388419564846025E-6	DEFECT
// if it's a singleton class and the real class is proc, we're doing closure conversion // so just use Proc's hashcode	WITHOUT_CLASSIFICATION	0.9999998842135561	WITHOUT_CLASSIFICATION	1.1578644387922583E-7	DEFECT
// normal new class implementing interfaces	WITHOUT_CLASSIFICATION	0.9999993197252626	WITHOUT_CLASSIFICATION	6.802747374546697E-7	DEFECT
/*         * Initialize some components.         */	WITHOUT_CLASSIFICATION	0.9999893492374546	WITHOUT_CLASSIFICATION	1.0650762545396652E-5	DEFECT
// not synchronizing these methods, no harm if these values get set more // than once. // (also note that there's no chance of getting a partially initialized // class/module, as happens-before is guaranteed by volatile write/read // of constants table.)	WITHOUT_CLASSIFICATION	0.9999996742608085	WITHOUT_CLASSIFICATION	3.257391914418588E-7	DEFECT
// Java reflection does not allow retrieving constructors like methods	WITHOUT_CLASSIFICATION	0.9999974054634363	WITHOUT_CLASSIFICATION	2.594536563608391E-6	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999967605781866	WITHOUT_CLASSIFICATION	3.2394218133466322E-6	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999967605781866	WITHOUT_CLASSIFICATION	3.2394218133466322E-6	DEFECT
// no matching ctor found	WITHOUT_CLASSIFICATION	0.9999977678508426	WITHOUT_CLASSIFICATION	2.23214915738392E-6	DEFECT
// Create Ruby proxies for any input arguments that are not primitives.	WITHOUT_CLASSIFICATION	0.9999971755307865	WITHOUT_CLASSIFICATION	2.824469213552348E-6	DEFECT
// prepare a faster handle if handles are enabled and the method and class are public	WITHOUT_CLASSIFICATION	0.9999999587251338	WITHOUT_CLASSIFICATION	4.127486613972287E-8	DEFECT
// must be a public method	WITHOUT_CLASSIFICATION	0.999986750001732	WITHOUT_CLASSIFICATION	1.3249998268019703E-5	DEFECT
// must be a public class	WITHOUT_CLASSIFICATION	0.9999859262465759	WITHOUT_CLASSIFICATION	1.4073753424150499E-5	DEFECT
// must have been loaded from our known classloader hierarchy	WITHOUT_CLASSIFICATION	0.9999978122045572	WITHOUT_CLASSIFICATION	2.187795442892315E-6	DEFECT
// Special classes like Collections.EMPTY_LIST are inner classes that are private but  // implement public interfaces.  Their methods are all public methods for the public  // interface.  Let these public methods execute via setAccessible(true). 	WITHOUT_CLASSIFICATION	0.9999993149380445	WITHOUT_CLASSIFICATION	6.850619554502632E-7	DEFECT
// search through all declared methods to find a closest match	WITHOUT_CLASSIFICATION	0.9999999057686794	WITHOUT_CLASSIFICATION	9.423132063075767E-8	DEFECT
// no matching method found	WITHOUT_CLASSIFICATION	0.9999984291208045	WITHOUT_CLASSIFICATION	1.5708791955046107E-6	DEFECT
// this test really means, that this is a ruby-defined subclass of a java class	WITHOUT_CLASSIFICATION	0.9999955475044316	WITHOUT_CLASSIFICATION	4.452495568351658E-6	DEFECT
/*         * First we need to register the JRuby engine.         */	WITHOUT_CLASSIFICATION	0.999998246838158	WITHOUT_CLASSIFICATION	1.7531618421002358E-6	DEFECT
/*         * Now we create a new BSFManager.         */	WITHOUT_CLASSIFICATION	0.9999888101054017	WITHOUT_CLASSIFICATION	1.118989459832277E-5	DEFECT
/*         * Initialize a simple Frame.          */	WITHOUT_CLASSIFICATION	0.9999919051364953	WITHOUT_CLASSIFICATION	8.094863504722349E-6	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.999957921880146	WITHOUT_CLASSIFICATION	4.2078119854061056E-5	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.999957921880146	WITHOUT_CLASSIFICATION	4.2078119854061056E-5	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9999907756507331	WITHOUT_CLASSIFICATION	9.224349266833244E-6	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999985775063481	WITHOUT_CLASSIFICATION	1.4224936518554566E-6	DEFECT
// // this test really means, that this is a ruby-defined subclass of a java class //	WITHOUT_CLASSIFICATION	0.9999973595554053	WITHOUT_CLASSIFICATION	2.6404445946706755E-6	DEFECT
// for our purposes, Accessibles are also Members, and vice-versa, // so we'll include Member methods here.	WITHOUT_CLASSIFICATION	0.9999999432300396	WITHOUT_CLASSIFICATION	5.676996034186094E-8	DEFECT
/*             * Declare those components as beans in BSF. Then it will be             * possible to access those components in Ruby as global             * variables ($frame, $menubar, ...)             */	WITHOUT_CLASSIFICATION	0.9999983248714264	WITHOUT_CLASSIFICATION	1.6751285735937924E-6	DEFECT
/*              * Execute a Ruby script (add the menubar to the frame).             */	WITHOUT_CLASSIFICATION	0.9999996412701848	WITHOUT_CLASSIFICATION	3.587298152823478E-7	DEFECT
/*                     * Execute Ruby statements.                     */	WITHOUT_CLASSIFICATION	0.9999984698020827	WITHOUT_CLASSIFICATION	1.530197917269246E-6	DEFECT
/*                     * Evaluates a Ruby expression and display the result.                     */	WITHOUT_CLASSIFICATION	0.9999999186123388	WITHOUT_CLASSIFICATION	8.138766108992057E-8	DEFECT
// Populate values for the parameter names	WITHOUT_CLASSIFICATION	0.9999997263141038	WITHOUT_CLASSIFICATION	2.736858962033308E-7	DEFECT
/* package scope */	WITHOUT_CLASSIFICATION	0.9999968374189323	WITHOUT_CLASSIFICATION	3.1625810677413025E-6	DEFECT
// This point is only reached if there was an exception handler // installed.	WITHOUT_CLASSIFICATION	0.9999906031672701	WITHOUT_CLASSIFICATION	9.396832729900375E-6	DEFECT
// // Ruby-level methods //	WITHOUT_CLASSIFICATION	0.9999991661485348	WITHOUT_CLASSIFICATION	8.338514653478703E-7	DEFECT
// need names ordered for key generation later	WITHOUT_CLASSIFICATION	0.9999985462478745	WITHOUT_CLASSIFICATION	1.4537521255002151E-6	DEFECT
// we only collect methods and interfaces for  // user-defined proxy classes.	WITHOUT_CLASSIFICATION	0.9999980705960922	WITHOUT_CLASSIFICATION	1.929403907809641E-6	DEFECT
// get JavaClass if this is the new proxy class; verify it // matches if this is a superclass proxy.	WITHOUT_CLASSIFICATION	0.9999989011124142	WITHOUT_CLASSIFICATION	1.0988875857704613E-6	DEFECT
// get any included interfaces	WITHOUT_CLASSIFICATION	0.9999993330688159	WITHOUT_CLASSIFICATION	6.669311840373917E-7	DEFECT
// lock in the overridden methods for the new class, and any as-yet // uninstantiated ancestor class.	WITHOUT_CLASSIFICATION	0.9999999616175221	WITHOUT_CLASSIFICATION	3.838247784049551E-8	DEFECT
// statically initialized below	WITHOUT_CLASSIFICATION	0.9999966283475689	WITHOUT_CLASSIFICATION	3.3716524310248314E-6	DEFECT
// finish class initializer	WITHOUT_CLASSIFICATION	0.9999855589784711	WITHOUT_CLASSIFICATION	1.4441021529040697E-5	DEFECT
// trigger class initialization for the class	WITHOUT_CLASSIFICATION	0.9999986512725267	WITHOUT_CLASSIFICATION	1.3487274732365616E-6	DEFECT
// should not happen!	WITHOUT_CLASSIFICATION	0.9999175355827311	WITHOUT_CLASSIFICATION	8.246441726887493E-5	DEFECT
// start class	WITHOUT_CLASSIFICATION	0.9999980802369893	WITHOUT_CLASSIFICATION	1.9197630106444024E-6	DEFECT
// make getter for handler	WITHOUT_CLASSIFICATION	0.9999988025171329	WITHOUT_CLASSIFICATION	1.197482867182712E-6	DEFECT
// make getter for proxy class	WITHOUT_CLASSIFICATION	0.9999978960049279	WITHOUT_CLASSIFICATION	2.1039950721732754E-6	DEFECT
// add (potentially) overridden names to the key. // TODO: see note above re: optimizations	WITHOUT_CLASSIFICATION	0.9518359928953203	WITHOUT_CLASSIFICATION	0.048164007104679774	DEFECT
// We generate all constructors and let some fail during invocation later	WITHOUT_CLASSIFICATION	0.9999972227985785	WITHOUT_CLASSIFICATION	2.7772014214847377E-6	DEFECT
// create static private method field	WITHOUT_CLASSIFICATION	0.9999996475696382	WITHOUT_CLASSIFICATION	3.524303617690912E-7	DEFECT
// load static empty array	WITHOUT_CLASSIFICATION	0.9999983663915856	WITHOUT_CLASSIFICATION	1.6336084144451083E-6	DEFECT
// box arguments	WITHOUT_CLASSIFICATION	0.999998425588176	WITHOUT_CLASSIFICATION	1.574411823992392E-6	DEFECT
// this is a simple rethrow handler	WITHOUT_CLASSIFICATION	0.9999895187950234	WITHOUT_CLASSIFICATION	1.0481204976695167E-5	DEFECT
// // construct the super-proxy method //	WITHOUT_CLASSIFICATION	0.9999989103812005	WITHOUT_CLASSIFICATION	1.0896187994913236E-6	DEFECT
// do a void return	WITHOUT_CLASSIFICATION	0.9999974900793223	WITHOUT_CLASSIFICATION	2.5099206778109555E-6	DEFECT
// // utility methods //	WITHOUT_CLASSIFICATION	0.9999975442063682	WITHOUT_CLASSIFICATION	2.4557936318341772E-6	DEFECT
// Is there a supplied proc argument or do we assume a block was // supplied	WITHOUT_CLASSIFICATION	0.999999685619855	WITHOUT_CLASSIFICATION	3.143801450284211E-7	DEFECT
// store call information so method_missing impl can use it	WITHOUT_CLASSIFICATION	0.9999989255680344	WITHOUT_CLASSIFICATION	1.07443196569586E-6	DEFECT
// use the same logic as in EvaluationState	WITHOUT_CLASSIFICATION	0.999999793707934	WITHOUT_CLASSIFICATION	2.062920660439204E-7	DEFECT
// no opt, no rest, exact match	WITHOUT_CLASSIFICATION	0.9999988624914121	WITHOUT_CLASSIFICATION	1.1375085878282746E-6	DEFECT
// only rest, must be at least required	WITHOUT_CLASSIFICATION	0.9999991539440496	WITHOUT_CLASSIFICATION	8.460559505291809E-7	DEFECT
// opt but no rest, must be at least required and no more than required + opt	WITHOUT_CLASSIFICATION	0.9999984135994889	WITHOUT_CLASSIFICATION	1.5864005110149256E-6	DEFECT
// opt and rest, must be at least required	WITHOUT_CLASSIFICATION	0.9999996092552903	WITHOUT_CLASSIFICATION	3.9074470962162456E-7	DEFECT
// No block from a nil proc	WITHOUT_CLASSIFICATION	0.9999916467234826	WITHOUT_CLASSIFICATION	8.353276517327481E-6	DEFECT
// If not already a proc then we should try and make it one.	WITHOUT_CLASSIFICATION	0.9999814328641587	WITHOUT_CLASSIFICATION	1.856713584123008E-5	DEFECT
// The current block is already associated with proc.  No need to create a new one	WITHOUT_CLASSIFICATION	0.9999767798153993	WITHOUT_CLASSIFICATION	2.3220184600725166E-5	DEFECT
// Has the method that is calling super received a block argument	WITHOUT_CLASSIFICATION	0.999999211053087	WITHOUT_CLASSIFICATION	7.889469129384405E-7	DEFECT
/* NUL */	WITHOUT_CLASSIFICATION	0.9999873091579286	WITHOUT_CLASSIFICATION	1.2690842071535016E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999983205169373	WITHOUT_CLASSIFICATION	1.6794830628296384E-6	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999986998127786	WITHOUT_CLASSIFICATION	1.30018722143783E-6	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999999950105922	WITHOUT_CLASSIFICATION	4.989407724845035E-9	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999966700902455	WITHOUT_CLASSIFICATION	3.32990975452549E-6	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999966512692446	WITHOUT_CLASSIFICATION	3.3487307552868283E-6	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999966512692446	WITHOUT_CLASSIFICATION	3.3487307552868283E-6	DEFECT
// classes are directly in the hierarchy, so no special logic is necessary for implementer	WITHOUT_CLASSIFICATION	0.9999998085338893	WITHOUT_CLASSIFICATION	1.9146611075313686E-7	DEFECT
// must be power of 2 // must be power of 2	WITHOUT_CLASSIFICATION	0.9999731949896357	WITHOUT_CLASSIFICATION	2.6805010364248205E-5	DEFECT
// Find power-of-two sizes best matching arguments	WITHOUT_CLASSIFICATION	0.9999997501754005	WITHOUT_CLASSIFICATION	2.498245994685876E-7	DEFECT
// note segmentShift differs from ConcurrentHashMap's calculation due to // issues with System.identityHashCode (upper n bits always 0, at least  // under Java 1.6 / WinXP)	WITHOUT_CLASSIFICATION	0.9999912360672043	WITHOUT_CLASSIFICATION	8.763932795610527E-6	DEFECT
//      System.err.println("***ObjectProxyCache " + id + " started at "+ new java.util.Date());	WITHOUT_CLASSIFICATION	0.9999999299854966	WITHOUT_CLASSIFICATION	7.001450340641813E-8	DEFECT
//    protected void finalize() throws Throwable { //        System.err.println("***ObjectProxyCache " + id + " finalized at "+ new java.util.Date()); //    }	WITHOUT_CLASSIFICATION	0.9999887045958873	WITHOUT_CLASSIFICATION	1.1295404112680332E-5	DEFECT
// EntryRefs include hash with key to facilitate lookup by Segment#expunge // after ref is removed from ReferenceQueue	WITHOUT_CLASSIFICATION	0.999999807357044	WITHOUT_CLASSIFICATION	1.9264295607540535E-7	DEFECT
// Unlike WeakHashMap, our Entry does not subclass WeakReference, but rather // makes it a final field.  The theory is that doing so should force a happens-before // relationship WRT the WeakReference constructor, guaranteeing that the key will be // visibile to other threads (unless it's been GC'ed).  See JLS 17.5 (final fields) and // 17.4.5 (Happens-before order) to confirm or refute my reasoning here.	WITHOUT_CLASSIFICATION	0.9999391865095313	WITHOUT_CLASSIFICATION	6.081349046858876E-5	DEFECT
// references to the Java object and its proxy will either both be // weak or both be soft, since the proxy contains a strong reference // to the object, so it wouldn't make sense for the reference types // to differ.	WITHOUT_CLASSIFICATION	0.9999996614357399	WITHOUT_CLASSIFICATION	3.3856425998226364E-7	DEFECT
// ctor used by remove/rehash	WITHOUT_CLASSIFICATION	0.9999996172564245	WITHOUT_CLASSIFICATION	3.8274357543847285E-7	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999827286465351	WITHOUT_CLASSIFICATION	1.7271353464819715E-5	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999827286465351	WITHOUT_CLASSIFICATION	1.7271353464819715E-5	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999827286465351	WITHOUT_CLASSIFICATION	1.7271353464819715E-5	DEFECT
// note that we'll potentially see the refs for both the java object and // proxy -- whichever we see first will cause the entry to be removed; // the other will not match an entry and will be ignored.	WITHOUT_CLASSIFICATION	0.9999995261473592	WITHOUT_CLASSIFICATION	4.738526408067973E-7	DEFECT
// temp method to verify tableSize value // must be called under lock	WITHOUT_CLASSIFICATION	0.9999947356970849	WITHOUT_CLASSIFICATION	5.264302915218648E-6	DEFECT
// Single node in list	WITHOUT_CLASSIFICATION	0.9999821232133407	WITHOUT_CLASSIFICATION	1.7876786659352777E-5	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9999909118212978	WITHOUT_CLASSIFICATION	9.088178702073433E-6	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9999909118212978	WITHOUT_CLASSIFICATION	9.088178702073433E-6	DEFECT
// entry exists, proxy has been gc'ed. replace entry.	WITHOUT_CLASSIFICATION	0.9999999307739589	WITHOUT_CLASSIFICATION	6.92260411184116E-8	DEFECT
// Where we get new positions from.	WITHOUT_CLASSIFICATION	0.9999898395623473	WITHOUT_CLASSIFICATION	1.0160437652660158E-5	DEFECT
// Start of string ([, (, {, <, ', ", \n) 	WITHOUT_CLASSIFICATION	0.9999948307796611	WITHOUT_CLASSIFICATION	5.169220338962234E-6	DEFECT
// Number of newlines read from the reader	WITHOUT_CLASSIFICATION	0.9999992004729804	WITHOUT_CLASSIFICATION	7.995270197181415E-7	DEFECT
// How many bytes into the source are we?	WITHOUT_CLASSIFICATION	0.9999994419344643	WITHOUT_CLASSIFICATION	5.58065535704808E-7	DEFECT
// For 'list' and only populated if list is not null.	WITHOUT_CLASSIFICATION	0.9999899239426564	WITHOUT_CLASSIFICATION	1.0076057343637966E-5	DEFECT
// Last full line read.	WITHOUT_CLASSIFICATION	0.9999954726669587	WITHOUT_CLASSIFICATION	4.527333041403525E-6	DEFECT
// Save sourceLine for error reporting to display line where error occurred	WITHOUT_CLASSIFICATION	0.9999994481987847	WITHOUT_CLASSIFICATION	5.518012152667309E-7	DEFECT
// Get rest of line. lineBuffer filled as side-effect...	WITHOUT_CLASSIFICATION	0.9999982913195228	WITHOUT_CLASSIFICATION	1.708680477146177E-6	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999985378615635	WITHOUT_CLASSIFICATION	1.4621384365636941E-6	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999985378615635	WITHOUT_CLASSIFICATION	1.4621384365636941E-6	DEFECT
// End of string (], ), }, >, ', ", \0)	WITHOUT_CLASSIFICATION	0.9999905355565497	WITHOUT_CLASSIFICATION	9.464443450270026E-6	DEFECT
// How many strings are nested in the current string term	WITHOUT_CLASSIFICATION	0.9999955939025686	WITHOUT_CLASSIFICATION	4.406097431373733E-6	DEFECT
// Single-quote fast path	WITHOUT_CLASSIFICATION	0.9999990537813014	WITHOUT_CLASSIFICATION	9.462186984881636E-7	DEFECT
// Regexp engine 'java'	WITHOUT_CLASSIFICATION	0.9999982796193357	WITHOUT_CLASSIFICATION	1.720380664290221E-6	DEFECT
// Was a goto in original ruby lexer	WITHOUT_CLASSIFICATION	0.9999993316214576	WITHOUT_CLASSIFICATION	6.68378542488551E-7	DEFECT
/* just ignore */	WITHOUT_CLASSIFICATION	0.999995510188293	WITHOUT_CLASSIFICATION	4.489811706974974E-6	DEFECT
/* octal constant */	WITHOUT_CLASSIFICATION	0.9999924684249731	WITHOUT_CLASSIFICATION	7.531575026848038E-6	DEFECT
/* hex constant */	WITHOUT_CLASSIFICATION	0.9999918589069907	WITHOUT_CLASSIFICATION	8.141093009353088E-6	DEFECT
// PUSH(1)	WITHOUT_CLASSIFICATION	0.9999955488884439	WITHOUT_CLASSIFICATION	4.451111556114989E-6	DEFECT
// POP	WITHOUT_CLASSIFICATION	0.9999914011801013	WITHOUT_CLASSIFICATION	8.5988198987305E-6	DEFECT
// PUSH(0).  If you look at original macro: stack |= (n&1) => stack |= 0 => no-change.	WITHOUT_CLASSIFICATION	0.9999993706454251	WITHOUT_CLASSIFICATION	6.293545748579981E-7	DEFECT
// LEXPOP	WITHOUT_CLASSIFICATION	0.9999894034791869	WITHOUT_CLASSIFICATION	1.0596520813097405E-5	DEFECT
// SET_P	WITHOUT_CLASSIFICATION	0.9999882948797376	WITHOUT_CLASSIFICATION	1.170512026244952E-5	DEFECT
// Marker delimiting heredoc boundary	WITHOUT_CLASSIFICATION	0.9999989202826801	WITHOUT_CLASSIFICATION	1.0797173198683105E-6	DEFECT
// Found end marker for this heredoc	WITHOUT_CLASSIFICATION	0.999959342725041	WITHOUT_CLASSIFICATION	4.065727495909473E-5	DEFECT
// Put back lastLine for any elements past start of heredoc marker	WITHOUT_CLASSIFICATION	0.9999998677696819	WITHOUT_CLASSIFICATION	1.3223031805473233E-7	DEFECT
// Last token read via yylex().	WITHOUT_CLASSIFICATION	0.9999965210681689	WITHOUT_CLASSIFICATION	3.4789318311219446E-6	DEFECT
// Value of last token which had a value associated with it.	WITHOUT_CLASSIFICATION	0.9999994767838296	WITHOUT_CLASSIFICATION	5.23216170388658E-7	DEFECT
// Stream of data that yylex() examines.	WITHOUT_CLASSIFICATION	0.9999940518792804	WITHOUT_CLASSIFICATION	5.948120719557608E-6	DEFECT
// Used for tiny smidgen of grammar in lexer (see setParserSupport())	WITHOUT_CLASSIFICATION	0.9999996780509974	WITHOUT_CLASSIFICATION	3.219490025695024E-7	DEFECT
// Give a name to a value.  Enebo: This should be used more.	WITHOUT_CLASSIFICATION	0.9998636859728331	WITHOUT_CLASSIFICATION	1.3631402716674963E-4	DEFECT
// When the heredoc identifier specifies <<-EOF that indents before ident. are ok (the '-').	WITHOUT_CLASSIFICATION	0.9999995563935836	WITHOUT_CLASSIFICATION	4.4360641635471184E-7	DEFECT
// Are we lexing Ruby 1.8 or 1.9+ syntax	WITHOUT_CLASSIFICATION	0.9999987675382873	WITHOUT_CLASSIFICATION	1.2324617127366047E-6	DEFECT
// Count of nested parentheses (1.9 only)	WITHOUT_CLASSIFICATION	0.999999650115371	WITHOUT_CLASSIFICATION	3.498846290362415E-7	DEFECT
// 1.9 only	WITHOUT_CLASSIFICATION	0.9999937627704301	WITHOUT_CLASSIFICATION	6.237229569894742E-6	DEFECT
// Short-hand (e.g. %{,%.,%!,... versus %Q{).	WITHOUT_CLASSIFICATION	0.9999993558300246	WITHOUT_CLASSIFICATION	6.44169975366375E-7	DEFECT
// Long-hand (e.g. %Q{}).	WITHOUT_CLASSIFICATION	0.9999987835698632	WITHOUT_CLASSIFICATION	1.2164301367656786E-6	DEFECT
/* no mb || ismbchar(term)*/	WITHOUT_CLASSIFICATION	0.999983243511081	WITHOUT_CLASSIFICATION	1.675648891891189E-5	DEFECT
/*     * Not normally used, but is left in here since it can be useful in debugging     * grammar and lexing problems.     *     */	WITHOUT_CLASSIFICATION	0.9999925403559434	WITHOUT_CLASSIFICATION	7.459644056543004E-6	DEFECT
// DEBUGGING HELP 	WITHOUT_CLASSIFICATION	0.99999229893041	WITHOUT_CLASSIFICATION	7.701069590063644E-6	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9999866375755562	WITHOUT_CLASSIFICATION	1.336242444376675E-5	DEFECT
/* end of script. */	WITHOUT_CLASSIFICATION	0.9999936476561099	WITHOUT_CLASSIFICATION	6.352343890207372E-6	DEFECT
/* white spaces */	WITHOUT_CLASSIFICATION	0.9999938749862567	WITHOUT_CLASSIFICATION	6.12501374321083E-6	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9999866375755562	WITHOUT_CLASSIFICATION	1.336242444376675E-5	DEFECT
/* it's a comment */	WITHOUT_CLASSIFICATION	0.9999758817524899	WITHOUT_CLASSIFICATION	2.4118247510195223E-5	DEFECT
// Replace a string of newlines with a single one	WITHOUT_CLASSIFICATION	0.9999995417881016	WITHOUT_CLASSIFICATION	4.5821189841594244E-7	DEFECT
/* $\: output record separator */	WITHOUT_CLASSIFICATION	0.9999935081612253	WITHOUT_CLASSIFICATION	6.491838774737095E-6	DEFECT
// EOF (ENEBO: After default?	WITHOUT_CLASSIFICATION	0.9997423270297457	WITHOUT_CLASSIFICATION	2.5767297025430807E-4	DEFECT
// documentation nodes	WITHOUT_CLASSIFICATION	0.9999847645098614	WITHOUT_CLASSIFICATION	1.5235490138631022E-5	DEFECT
// In case last next was the newline.	WITHOUT_CLASSIFICATION	0.9999989854436105	WITHOUT_CLASSIFICATION	1.0145563894788068E-6	DEFECT
// Just a plain bang	WITHOUT_CLASSIFICATION	0.9999978831952783	WITHOUT_CLASSIFICATION	2.116804721654677E-6	DEFECT
/* $_: last read line string */	WITHOUT_CLASSIFICATION	0.9999550587644522	WITHOUT_CLASSIFICATION	4.4941235547770635E-5	DEFECT
/* $~: match-data */	WITHOUT_CLASSIFICATION	0.9999817912462993	WITHOUT_CLASSIFICATION	1.820875370073338E-5	DEFECT
/* $*: argv */	WITHOUT_CLASSIFICATION	0.9999580191454543	WITHOUT_CLASSIFICATION	4.1980854545540003E-5	DEFECT
/* $$: pid */	WITHOUT_CLASSIFICATION	0.999896491785222	WITHOUT_CLASSIFICATION	1.0350821477810359E-4	DEFECT
/* $?: last status */	WITHOUT_CLASSIFICATION	0.9999455360121838	WITHOUT_CLASSIFICATION	5.446398781619151E-5	DEFECT
/* $!: error string */	WITHOUT_CLASSIFICATION	0.9985379462394294	WITHOUT_CLASSIFICATION	0.0014620537605706404	DEFECT
/* $@: error position */	WITHOUT_CLASSIFICATION	0.9993136086419188	WITHOUT_CLASSIFICATION	6.863913580812585E-4	DEFECT
/* $/: input record separator */	WITHOUT_CLASSIFICATION	0.9999908457775536	WITHOUT_CLASSIFICATION	9.154222446470868E-6	DEFECT
/* $;: field separator */	WITHOUT_CLASSIFICATION	0.9999643603728973	WITHOUT_CLASSIFICATION	3.5639627102753435E-5	DEFECT
/* $,: output field separator */	WITHOUT_CLASSIFICATION	0.9999868057444186	WITHOUT_CLASSIFICATION	1.3194255581496945E-5	DEFECT
/* $.: last read line number */	WITHOUT_CLASSIFICATION	0.9999862435165149	WITHOUT_CLASSIFICATION	1.3756483485154983E-5	DEFECT
/* $=: ignorecase */	WITHOUT_CLASSIFICATION	0.9999900197200761	WITHOUT_CLASSIFICATION	9.980279923855567E-6	DEFECT
/* $:: load path */	WITHOUT_CLASSIFICATION	0.999979796904268	WITHOUT_CLASSIFICATION	2.0203095732098494E-5	DEFECT
/* $<: reading filename */	WITHOUT_CLASSIFICATION	0.9998785572494876	WITHOUT_CLASSIFICATION	1.2144275051240868E-4	DEFECT
/* $": already loaded files */	WITHOUT_CLASSIFICATION	0.9999292867539225	WITHOUT_CLASSIFICATION	7.07132460775618E-5	DEFECT
/* $&: last match */	WITHOUT_CLASSIFICATION	0.9999890534091515	WITHOUT_CLASSIFICATION	1.0946590848512923E-5	DEFECT
/* $`: string before last match */	WITHOUT_CLASSIFICATION	0.9999943247335787	WITHOUT_CLASSIFICATION	5.675266421255965E-6	DEFECT
/* $': string after last match */	WITHOUT_CLASSIFICATION	0.9999901790761481	WITHOUT_CLASSIFICATION	9.820923851865576E-6	DEFECT
// methods 'foo!' and 'foo?' are possible but if followed by '=' it is relop	WITHOUT_CLASSIFICATION	0.9999983827772132	WITHOUT_CLASSIFICATION	1.6172227868038269E-6	DEFECT
/* See if it is a reserved word.  */	WITHOUT_CLASSIFICATION	0.9999529655047986	WITHOUT_CLASSIFICATION	4.7034495201452703E-5	DEFECT
// enum lex_state	WITHOUT_CLASSIFICATION	0.999998853338432	WITHOUT_CLASSIFICATION	1.14666156802863E-6	DEFECT
// block (primary)	WITHOUT_CLASSIFICATION	0.9999939672584951	WITHOUT_CLASSIFICATION	6.0327415049349715E-6	DEFECT
// block (expr)	WITHOUT_CLASSIFICATION	0.9999931737227782	WITHOUT_CLASSIFICATION	6.826277221845722E-6	DEFECT
// hash	WITHOUT_CLASSIFICATION	0.999995591278072	WITHOUT_CLASSIFICATION	4.408721927918908E-6	DEFECT
// ENEBO: 1.9 is IS_ARG, but we need to break apart for 1.8 support.	WITHOUT_CLASSIFICATION	0.9979791243963761	WITHOUT_CLASSIFICATION	0.002020875603623771	DEFECT
// FIXME: peek('u') utf8 stuff for 1.9	WITHOUT_CLASSIFICATION	0.9827997806344143	WITHOUT_CLASSIFICATION	0.017200219365585696	DEFECT
// We don't append '+' since Java number parser gets confused	WITHOUT_CLASSIFICATION	0.9999976990404531	WITHOUT_CLASSIFICATION	2.3009595468403237E-6	DEFECT
//  hexadecimal	WITHOUT_CLASSIFICATION	0.9999961815775158	WITHOUT_CLASSIFICATION	3.818422484245681E-6	DEFECT
// binary	WITHOUT_CLASSIFICATION	0.9999944156789136	WITHOUT_CLASSIFICATION	5.5843210863780305E-6	DEFECT
// decimal	WITHOUT_CLASSIFICATION	0.9999977356096627	WITHOUT_CLASSIFICATION	2.2643903373301826E-6	DEFECT
//Octal	WITHOUT_CLASSIFICATION	0.9999271437348162	WITHOUT_CLASSIFICATION	7.285626518383291E-5	DEFECT
//  '_' in number just ignored	WITHOUT_CLASSIFICATION	0.999997070971658	WITHOUT_CLASSIFICATION	2.9290283418487046E-6	DEFECT
// backslash	WITHOUT_CLASSIFICATION	0.9999963491139354	WITHOUT_CLASSIFICATION	3.650886064512007E-6	DEFECT
// newline	WITHOUT_CLASSIFICATION	0.9999968046422554	WITHOUT_CLASSIFICATION	3.19535774457337E-6	DEFECT
// horizontal tab	WITHOUT_CLASSIFICATION	0.9999945580019982	WITHOUT_CLASSIFICATION	5.441998001858386E-6	DEFECT
// form feed	WITHOUT_CLASSIFICATION	0.9999896833103391	WITHOUT_CLASSIFICATION	1.0316689660923687E-5	DEFECT
// vertical tab	WITHOUT_CLASSIFICATION	0.9999968034020785	WITHOUT_CLASSIFICATION	3.1965979214224378E-6	DEFECT
// alarm(bell)	WITHOUT_CLASSIFICATION	0.9999965978900099	WITHOUT_CLASSIFICATION	3.4021099900914017E-6	DEFECT
// escape	WITHOUT_CLASSIFICATION	0.9999970567146284	WITHOUT_CLASSIFICATION	2.9432853716082724E-6	DEFECT
// hex constant	WITHOUT_CLASSIFICATION	0.9999934689679861	WITHOUT_CLASSIFICATION	6.531032013880524E-6	DEFECT
//char hexValue = scanHex(2);	WITHOUT_CLASSIFICATION	0.9999965877803373	WITHOUT_CLASSIFICATION	3.4122196627067568E-6	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9999993114425354	WITHOUT_CLASSIFICATION	6.885574646127E-7	DEFECT
// space	WITHOUT_CLASSIFICATION	0.9999971787024071	WITHOUT_CLASSIFICATION	2.8212975927933558E-6	DEFECT
// Where we started this marker match	WITHOUT_CLASSIFICATION	0.9999682665191368	WITHOUT_CLASSIFICATION	3.173348086323103E-5	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9995829787835369	WITHOUT_CLASSIFICATION	4.170212164631269E-4	DEFECT
// We use offset here to keep track of extra newlines for windows	WITHOUT_CLASSIFICATION	0.9999998358511524	WITHOUT_CLASSIFICATION	1.641488476599256E-7	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9999993114425354	WITHOUT_CLASSIFICATION	6.885574646127E-7	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.8441199736960919	WITHOUT_CLASSIFICATION	0.15588002630390815	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.8441199736960919	WITHOUT_CLASSIFICATION	0.15588002630390815	DEFECT
// Where we get our newest char's	WITHOUT_CLASSIFICATION	0.9999987550562628	WITHOUT_CLASSIFICATION	1.2449437371297577E-6	DEFECT
// Our readback/pushback buffer.	WITHOUT_CLASSIFICATION	0.9999578823198393	WITHOUT_CLASSIFICATION	4.211768016080438E-5	DEFECT
// index of last character in pushback buffer	WITHOUT_CLASSIFICATION	0.9999953735718324	WITHOUT_CLASSIFICATION	4.626428167546852E-6	DEFECT
// Character read before previous read	WITHOUT_CLASSIFICATION	0.9999996890240835	WITHOUT_CLASSIFICATION	3.109759164463864E-7	DEFECT
// keep value of twoAgo around so we can restore after we unread	WITHOUT_CLASSIFICATION	0.9999994696924704	WITHOUT_CLASSIFICATION	5.303075296434562E-7	DEFECT
// NetProtocolBufferedIOLibrary	WITHOUT_CLASSIFICATION	0.9999895412487761	WITHOUT_CLASSIFICATION	1.04587512238762E-5	DEFECT
// BigDecimalLibrary	WITHOUT_CLASSIFICATION	0.9999966856090154	WITHOUT_CLASSIFICATION	3.3143909845458986E-6	DEFECT
// TODO: FD_CLOEXEC is mysterious and we are not sure how constantine should include this. // We did it here for now	WITHOUT_CLASSIFICATION	0.977878547304949	DEFECT	0.022121452695050937	WITHOUT_CLASSIFICATION
// Ruby's designation for some platforms, minus version numbers in some cases	WITHOUT_CLASSIFICATION	0.9999999604777045	WITHOUT_CLASSIFICATION	3.9522295578220675E-8	DEFECT
// that's what JDK5 produces on Windows Vista	WITHOUT_CLASSIFICATION	0.9999783015743742	WITHOUT_CLASSIFICATION	2.1698425625852425E-5	DEFECT
// Rubygems is too specific on host cpu so until we have real need lets default to universal //setConfig(configHash, "arch", System.getProperty("os.arch") + "-java" + System.getProperty("java.specification.version"));	WITHOUT_CLASSIFICATION	0.9999999872550459	WITHOUT_CLASSIFICATION	1.2744954091213939E-8	DEFECT
// Our shell scripts pass in non-canonicalized paths, but even if we didn't // anyone who did would become unhappy because Ruby apps expect no relative // operators in the pathname (rubygems, for example).	WITHOUT_CLASSIFICATION	0.9999712747762534	WITHOUT_CLASSIFICATION	2.8725223746695495E-5	DEFECT
// this set is only for darwin	WITHOUT_CLASSIFICATION	0.9999753749860222	WITHOUT_CLASSIFICATION	2.462501397786927E-5	DEFECT
// DigestLibrary	WITHOUT_CLASSIFICATION	0.9999983254469104	WITHOUT_CLASSIFICATION	1.6745530896559417E-6	DEFECT
// all errors, just info; do not prevent loading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9995250909251315	WITHOUT_CLASSIFICATION	4.749090748684671E-4	DEFECT
// all errors, just info; do not prevent unloading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9995998652395496	WITHOUT_CLASSIFICATION	4.001347604503691E-4	DEFECT
// do nothing, return dummy version below	WITHOUT_CLASSIFICATION	0.9999986601533806	WITHOUT_CLASSIFICATION	1.3398466193662834E-6	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999477568897341	WITHOUT_CLASSIFICATION	5.224311026576903E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999477568897341	WITHOUT_CLASSIFICATION	5.224311026576903E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999477568897341	WITHOUT_CLASSIFICATION	5.224311026576903E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999477568897341	WITHOUT_CLASSIFICATION	5.224311026576903E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999477568897341	WITHOUT_CLASSIFICATION	5.224311026576903E-5	DEFECT
// line 329	WITHOUT_CLASSIFICATION	0.9999939642412514	WITHOUT_CLASSIFICATION	6.0357587485240065E-6	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999687745948119	WITHOUT_CLASSIFICATION	3.12254051881552E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999357044058326	WITHOUT_CLASSIFICATION	6.429559416734893E-5	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9999951675304876	WITHOUT_CLASSIFICATION	4.832469512375777E-6	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.999989898425456	WITHOUT_CLASSIFICATION	1.0101574543981119E-5	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999973745749798	WITHOUT_CLASSIFICATION	2.6254250201756946E-6	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999896808901825	WITHOUT_CLASSIFICATION	1.0319109817489028E-5	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999951460383877	WITHOUT_CLASSIFICATION	4.853961612407697E-6	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9999988414112425	WITHOUT_CLASSIFICATION	1.158588757452876E-6	DEFECT
// line 271	WITHOUT_CLASSIFICATION	0.9999946081650756	WITHOUT_CLASSIFICATION	5.391834924389962E-6	DEFECT
// line 274	WITHOUT_CLASSIFICATION	0.9999933277125956	WITHOUT_CLASSIFICATION	6.6722874044175204E-6	DEFECT
// line 303	WITHOUT_CLASSIFICATION	0.9999938130231799	WITHOUT_CLASSIFICATION	6.186976820093129E-6	DEFECT
// line 311	WITHOUT_CLASSIFICATION	0.9999947383032438	WITHOUT_CLASSIFICATION	5.261696756205128E-6	DEFECT
// line 314	WITHOUT_CLASSIFICATION	0.9999939687897379	WITHOUT_CLASSIFICATION	6.031210262179046E-6	DEFECT
// line 317	WITHOUT_CLASSIFICATION	0.9999941054157924	WITHOUT_CLASSIFICATION	5.894584207721717E-6	DEFECT
// line 332	WITHOUT_CLASSIFICATION	0.9999943683412448	WITHOUT_CLASSIFICATION	5.631658755247599E-6	DEFECT
// line 338	WITHOUT_CLASSIFICATION	0.9999946855603338	WITHOUT_CLASSIFICATION	5.314439666274555E-6	DEFECT
// line 341	WITHOUT_CLASSIFICATION	0.9999939933230418	WITHOUT_CLASSIFICATION	6.006676958233727E-6	DEFECT
// line 344	WITHOUT_CLASSIFICATION	0.9999932743869653	WITHOUT_CLASSIFICATION	6.72561303469437E-6	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999940678865973	WITHOUT_CLASSIFICATION	5.932113402749893E-6	DEFECT
// line 358	WITHOUT_CLASSIFICATION	0.9999941268975344	WITHOUT_CLASSIFICATION	5.8731024655930794E-6	DEFECT
// line 367	WITHOUT_CLASSIFICATION	0.9999923988752052	WITHOUT_CLASSIFICATION	7.6011247948514594E-6	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.999993829486999	WITHOUT_CLASSIFICATION	6.1705130008999015E-6	DEFECT
// line 378	WITHOUT_CLASSIFICATION	0.9999941831112494	WITHOUT_CLASSIFICATION	5.816888750601942E-6	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999949962721749	WITHOUT_CLASSIFICATION	5.003727825109336E-6	DEFECT
// line 407	WITHOUT_CLASSIFICATION	0.9999932435483939	WITHOUT_CLASSIFICATION	6.756451606107611E-6	DEFECT
// line 411	WITHOUT_CLASSIFICATION	0.99999383495661	WITHOUT_CLASSIFICATION	6.165043389999643E-6	DEFECT
// line 414	WITHOUT_CLASSIFICATION	0.999993658744668	WITHOUT_CLASSIFICATION	6.3412553321720476E-6	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.9999930933906338	WITHOUT_CLASSIFICATION	6.906609366214185E-6	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999946805136234	WITHOUT_CLASSIFICATION	5.3194863766218155E-6	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9999922273025185	WITHOUT_CLASSIFICATION	7.772697481504411E-6	DEFECT
// line 434	WITHOUT_CLASSIFICATION	0.9999926605250619	WITHOUT_CLASSIFICATION	7.339474938155874E-6	DEFECT
// line 443	WITHOUT_CLASSIFICATION	0.9999921020729294	WITHOUT_CLASSIFICATION	7.897927070523379E-6	DEFECT
// line 446	WITHOUT_CLASSIFICATION	0.9999917106112305	WITHOUT_CLASSIFICATION	8.289388769524375E-6	DEFECT
// line 452	WITHOUT_CLASSIFICATION	0.9999927642939662	WITHOUT_CLASSIFICATION	7.23570603379106E-6	DEFECT
// line 457	WITHOUT_CLASSIFICATION	0.9999916751333607	WITHOUT_CLASSIFICATION	8.324866639283774E-6	DEFECT
// line 464	WITHOUT_CLASSIFICATION	0.9999918935660814	WITHOUT_CLASSIFICATION	8.106433918558538E-6	DEFECT
// line 467	WITHOUT_CLASSIFICATION	0.9999911145699342	WITHOUT_CLASSIFICATION	8.885430065815412E-6	DEFECT
// line 470	WITHOUT_CLASSIFICATION	0.9999938358927631	WITHOUT_CLASSIFICATION	6.164107236867579E-6	DEFECT
// line 479	WITHOUT_CLASSIFICATION	0.9999917489315605	WITHOUT_CLASSIFICATION	8.251068439605365E-6	DEFECT
// line 484	WITHOUT_CLASSIFICATION	0.9999937913240307	WITHOUT_CLASSIFICATION	6.2086759693474765E-6	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999927353587187	WITHOUT_CLASSIFICATION	7.2646412811863E-6	DEFECT
// line 492	WITHOUT_CLASSIFICATION	0.9999927951014704	WITHOUT_CLASSIFICATION	7.204898529552406E-6	DEFECT
// line 498	WITHOUT_CLASSIFICATION	0.9999931945429014	WITHOUT_CLASSIFICATION	6.805457098697303E-6	DEFECT
// line 501	WITHOUT_CLASSIFICATION	0.9999943125084212	WITHOUT_CLASSIFICATION	5.6874915787895735E-6	DEFECT
// line 504	WITHOUT_CLASSIFICATION	0.9999931584538712	WITHOUT_CLASSIFICATION	6.8415461288482934E-6	DEFECT
// line 507	WITHOUT_CLASSIFICATION	0.9999932598386402	WITHOUT_CLASSIFICATION	6.7401613598561855E-6	DEFECT
// line 510	WITHOUT_CLASSIFICATION	0.9999950380394627	WITHOUT_CLASSIFICATION	4.961960537333124E-6	DEFECT
// line 519	WITHOUT_CLASSIFICATION	0.9999932868758038	WITHOUT_CLASSIFICATION	6.713124196169451E-6	DEFECT
// line 525	WITHOUT_CLASSIFICATION	0.9999935317428069	WITHOUT_CLASSIFICATION	6.468257193123019E-6	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999357044058326	WITHOUT_CLASSIFICATION	6.429559416734893E-5	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999926365218337	WITHOUT_CLASSIFICATION	7.363478166307497E-6	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999937797050032	WITHOUT_CLASSIFICATION	6.220294996814557E-6	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999913374998156	WITHOUT_CLASSIFICATION	8.662500184517446E-6	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999909081423032	WITHOUT_CLASSIFICATION	9.091857696725837E-6	DEFECT
// line 556	WITHOUT_CLASSIFICATION	0.9999908674434888	WITHOUT_CLASSIFICATION	9.132556511169822E-6	DEFECT
// line 559	WITHOUT_CLASSIFICATION	0.9999926309996909	WITHOUT_CLASSIFICATION	7.36900030907962E-6	DEFECT
// line 563	WITHOUT_CLASSIFICATION	0.9999906088973247	WITHOUT_CLASSIFICATION	9.391102675315287E-6	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999908065111818	WITHOUT_CLASSIFICATION	9.1934888181486E-6	DEFECT
// line 569	WITHOUT_CLASSIFICATION	0.9999902625576295	WITHOUT_CLASSIFICATION	9.737442370455778E-6	DEFECT
// line 575	WITHOUT_CLASSIFICATION	0.9999913133857702	WITHOUT_CLASSIFICATION	8.686614229848039E-6	DEFECT
// line 578	WITHOUT_CLASSIFICATION	0.9999933066975275	WITHOUT_CLASSIFICATION	6.693302472395285E-6	DEFECT
// line 587	WITHOUT_CLASSIFICATION	0.9999933849339567	WITHOUT_CLASSIFICATION	6.615066043270276E-6	DEFECT
// line 596	WITHOUT_CLASSIFICATION	0.9999913746905675	WITHOUT_CLASSIFICATION	8.625309432447526E-6	DEFECT
// line 604	WITHOUT_CLASSIFICATION	0.9999916793741838	WITHOUT_CLASSIFICATION	8.320625816280525E-6	DEFECT
// line 607	WITHOUT_CLASSIFICATION	0.9999918288680081	WITHOUT_CLASSIFICATION	8.1711319918902E-6	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9999947062324755	WITHOUT_CLASSIFICATION	5.293767524384634E-6	DEFECT
// line 613	WITHOUT_CLASSIFICATION	0.9999930407558432	WITHOUT_CLASSIFICATION	6.959244156853267E-6	DEFECT
// line 616	WITHOUT_CLASSIFICATION	0.9999932306059636	WITHOUT_CLASSIFICATION	6.7693940364323035E-6	DEFECT
// line 634	WITHOUT_CLASSIFICATION	0.9999920093674716	WITHOUT_CLASSIFICATION	7.990632528467625E-6	DEFECT
// line 638	WITHOUT_CLASSIFICATION	0.9999935604169266	WITHOUT_CLASSIFICATION	6.4395830735313345E-6	DEFECT
// line 643	WITHOUT_CLASSIFICATION	0.9999908763501796	WITHOUT_CLASSIFICATION	9.123649820387641E-6	DEFECT
// line 646	WITHOUT_CLASSIFICATION	0.9999916076737182	WITHOUT_CLASSIFICATION	8.392326281804021E-6	DEFECT
// line 655	WITHOUT_CLASSIFICATION	0.999991889733295	WITHOUT_CLASSIFICATION	8.11026670495861E-6	DEFECT
// line 660	WITHOUT_CLASSIFICATION	0.999993120026116	WITHOUT_CLASSIFICATION	6.879973884074585E-6	DEFECT
// line 667	WITHOUT_CLASSIFICATION	0.9999918988700977	WITHOUT_CLASSIFICATION	8.101129902304404E-6	DEFECT
// line 670	WITHOUT_CLASSIFICATION	0.9999935564681072	WITHOUT_CLASSIFICATION	6.443531892771932E-6	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999924400006778	WITHOUT_CLASSIFICATION	7.5599993221813E-6	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999919099031356	WITHOUT_CLASSIFICATION	8.090096864433169E-6	DEFECT
// line 701	WITHOUT_CLASSIFICATION	0.999994341619255	WITHOUT_CLASSIFICATION	5.6583807449159835E-6	DEFECT
// line 717	WITHOUT_CLASSIFICATION	0.9999936321952521	WITHOUT_CLASSIFICATION	6.367804747955339E-6	DEFECT
// line 720	WITHOUT_CLASSIFICATION	0.999994793617038	WITHOUT_CLASSIFICATION	5.2063829619921095E-6	DEFECT
// line 726	WITHOUT_CLASSIFICATION	0.9999923968100404	WITHOUT_CLASSIFICATION	7.603189959629858E-6	DEFECT
// line 729	WITHOUT_CLASSIFICATION	0.9999930722821492	WITHOUT_CLASSIFICATION	6.927717850846741E-6	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999935951468508	WITHOUT_CLASSIFICATION	6.404853149192657E-6	DEFECT
// line 735	WITHOUT_CLASSIFICATION	0.9999925465457763	WITHOUT_CLASSIFICATION	7.4534542236429865E-6	DEFECT
// line 738	WITHOUT_CLASSIFICATION	0.9999939556191794	WITHOUT_CLASSIFICATION	6.044380820618228E-6	DEFECT
// line 751	WITHOUT_CLASSIFICATION	0.9999922773498646	WITHOUT_CLASSIFICATION	7.722650135334652E-6	DEFECT
// line 754	WITHOUT_CLASSIFICATION	0.9999904377664772	WITHOUT_CLASSIFICATION	9.562233522661543E-6	DEFECT
// line 757	WITHOUT_CLASSIFICATION	0.9999913045005786	WITHOUT_CLASSIFICATION	8.695499421510783E-6	DEFECT
// line 760	WITHOUT_CLASSIFICATION	0.9999925901604609	WITHOUT_CLASSIFICATION	7.409839539068969E-6	DEFECT
// line 763	WITHOUT_CLASSIFICATION	0.9999916758756828	WITHOUT_CLASSIFICATION	8.324124317156602E-6	DEFECT
// line 769	WITHOUT_CLASSIFICATION	0.999991368885336	WITHOUT_CLASSIFICATION	8.631114664034534E-6	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999934010269875	WITHOUT_CLASSIFICATION	6.598973012449734E-6	DEFECT
// line 775	WITHOUT_CLASSIFICATION	0.9999912776203741	WITHOUT_CLASSIFICATION	8.722379625957501E-6	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.999994257253912	WITHOUT_CLASSIFICATION	5.742746088026315E-6	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.999993782691164	WITHOUT_CLASSIFICATION	6.2173088360325015E-6	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999932493799805	WITHOUT_CLASSIFICATION	6.7506200195982535E-6	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.999991646523605	WITHOUT_CLASSIFICATION	8.353476395073863E-6	DEFECT
// line 797	WITHOUT_CLASSIFICATION	0.9999914120987901	WITHOUT_CLASSIFICATION	8.58790121003135E-6	DEFECT
// line 803	WITHOUT_CLASSIFICATION	0.9999948003740243	WITHOUT_CLASSIFICATION	5.199625975713216E-6	DEFECT
// line 806	WITHOUT_CLASSIFICATION	0.9999937771950664	WITHOUT_CLASSIFICATION	6.222804933538714E-6	DEFECT
// line 809	WITHOUT_CLASSIFICATION	0.999994551880665	WITHOUT_CLASSIFICATION	5.448119334963408E-6	DEFECT
// line 815	WITHOUT_CLASSIFICATION	0.9999943336140054	WITHOUT_CLASSIFICATION	5.666385994625518E-6	DEFECT
// line 818	WITHOUT_CLASSIFICATION	0.9999952312742679	WITHOUT_CLASSIFICATION	4.7687257320899764E-6	DEFECT
// line 821	WITHOUT_CLASSIFICATION	0.9999953371105402	WITHOUT_CLASSIFICATION	4.662889459721271E-6	DEFECT
// line 824	WITHOUT_CLASSIFICATION	0.999993779263274	WITHOUT_CLASSIFICATION	6.220736725979344E-6	DEFECT
// line 830	WITHOUT_CLASSIFICATION	0.999995239909512	WITHOUT_CLASSIFICATION	4.7600904880471626E-6	DEFECT
// line 833	WITHOUT_CLASSIFICATION	0.9999942167933078	WITHOUT_CLASSIFICATION	5.78320669217895E-6	DEFECT
// line 836	WITHOUT_CLASSIFICATION	0.9999935858236736	WITHOUT_CLASSIFICATION	6.414176326483291E-6	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999940901646373	WITHOUT_CLASSIFICATION	5.909835362810553E-6	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999940340902304	WITHOUT_CLASSIFICATION	5.9659097695870685E-6	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999936028014609	WITHOUT_CLASSIFICATION	6.397198539153121E-6	DEFECT
// line 852	WITHOUT_CLASSIFICATION	0.9999942098286787	WITHOUT_CLASSIFICATION	5.790171321278882E-6	DEFECT
// line 858	WITHOUT_CLASSIFICATION	0.9999937833417414	WITHOUT_CLASSIFICATION	6.2166582586531235E-6	DEFECT
// line 861	WITHOUT_CLASSIFICATION	0.999994146955399	WITHOUT_CLASSIFICATION	5.853044601015352E-6	DEFECT
// line 868	WITHOUT_CLASSIFICATION	0.9999933980705996	WITHOUT_CLASSIFICATION	6.601929400371374E-6	DEFECT
// line 871	WITHOUT_CLASSIFICATION	0.9999945524598557	WITHOUT_CLASSIFICATION	5.447540144310184E-6	DEFECT
// line 876	WITHOUT_CLASSIFICATION	0.9999929290100372	WITHOUT_CLASSIFICATION	7.070989962843506E-6	DEFECT
// line 879	WITHOUT_CLASSIFICATION	0.9999934726521894	WITHOUT_CLASSIFICATION	6.527347810704497E-6	DEFECT
// line 883	WITHOUT_CLASSIFICATION	0.9999941200401357	WITHOUT_CLASSIFICATION	5.8799598642643045E-6	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999936836184726	WITHOUT_CLASSIFICATION	6.316381527377169E-6	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999929453832678	WITHOUT_CLASSIFICATION	7.0546167321655554E-6	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.999993076821482	WITHOUT_CLASSIFICATION	6.9231785180485E-6	DEFECT
// line 903	WITHOUT_CLASSIFICATION	0.9999934235988759	WITHOUT_CLASSIFICATION	6.576401124232176E-6	DEFECT
// line 907	WITHOUT_CLASSIFICATION	0.9999931826424259	WITHOUT_CLASSIFICATION	6.8173575740877685E-6	DEFECT
// line 915	WITHOUT_CLASSIFICATION	0.9999930249725848	WITHOUT_CLASSIFICATION	6.975027415235317E-6	DEFECT
// line 920	WITHOUT_CLASSIFICATION	0.9999948046540005	WITHOUT_CLASSIFICATION	5.195345999508921E-6	DEFECT
// line 923	WITHOUT_CLASSIFICATION	0.9999933140789913	WITHOUT_CLASSIFICATION	6.685921008710079E-6	DEFECT
// line 926	WITHOUT_CLASSIFICATION	0.9999924156567999	WITHOUT_CLASSIFICATION	7.584343200015928E-6	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999935992572125	WITHOUT_CLASSIFICATION	6.400742787440198E-6	DEFECT
// line 936	WITHOUT_CLASSIFICATION	0.9999920946581704	WITHOUT_CLASSIFICATION	7.905341829664842E-6	DEFECT
// line 940	WITHOUT_CLASSIFICATION	0.9999937986727699	WITHOUT_CLASSIFICATION	6.201327229985769E-6	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.999992246488851	WITHOUT_CLASSIFICATION	7.753511149024578E-6	DEFECT
// line 948	WITHOUT_CLASSIFICATION	0.9999930818837932	WITHOUT_CLASSIFICATION	6.9181162068263006E-6	DEFECT
// line 956	WITHOUT_CLASSIFICATION	0.9999901522994923	WITHOUT_CLASSIFICATION	9.847700507800359E-6	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.999992641857763	WITHOUT_CLASSIFICATION	7.358142236944067E-6	DEFECT
// line 964	WITHOUT_CLASSIFICATION	0.9999911880422215	WITHOUT_CLASSIFICATION	8.811957778463039E-6	DEFECT
// line 967	WITHOUT_CLASSIFICATION	0.9999913358303322	WITHOUT_CLASSIFICATION	8.664169667837875E-6	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9999919944999004	WITHOUT_CLASSIFICATION	8.005500099638495E-6	DEFECT
// line 978	WITHOUT_CLASSIFICATION	0.9999924532841332	WITHOUT_CLASSIFICATION	7.54671586670379E-6	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.999995090956353	WITHOUT_CLASSIFICATION	4.909043647026882E-6	DEFECT
// line 984	WITHOUT_CLASSIFICATION	0.9999932045091994	WITHOUT_CLASSIFICATION	6.795490800552138E-6	DEFECT
// line 986	WITHOUT_CLASSIFICATION	0.9999928680047159	WITHOUT_CLASSIFICATION	7.131995284054034E-6	DEFECT
// line 996	WITHOUT_CLASSIFICATION	0.9999908231039025	WITHOUT_CLASSIFICATION	9.176896097423391E-6	DEFECT
// line 1001	WITHOUT_CLASSIFICATION	0.9999942879830677	WITHOUT_CLASSIFICATION	5.712016932311511E-6	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999939544836063	WITHOUT_CLASSIFICATION	6.045516393707826E-6	DEFECT
// line 1008	WITHOUT_CLASSIFICATION	0.9999949417323079	WITHOUT_CLASSIFICATION	5.058267692155365E-6	DEFECT
// line 1014	WITHOUT_CLASSIFICATION	0.9999932892073327	WITHOUT_CLASSIFICATION	6.710792667343013E-6	DEFECT
// line 1029	WITHOUT_CLASSIFICATION	0.9999940564750857	WITHOUT_CLASSIFICATION	5.943524914341437E-6	DEFECT
// line 1032	WITHOUT_CLASSIFICATION	0.9999945160344857	WITHOUT_CLASSIFICATION	5.483965514241618E-6	DEFECT
// line 1034	WITHOUT_CLASSIFICATION	0.9999935889146706	WITHOUT_CLASSIFICATION	6.4110853294939345E-6	DEFECT
// line 1045	WITHOUT_CLASSIFICATION	0.9999928451570121	WITHOUT_CLASSIFICATION	7.1548429878904805E-6	DEFECT
// line 1048	WITHOUT_CLASSIFICATION	0.9999941574727442	WITHOUT_CLASSIFICATION	5.842527255842053E-6	DEFECT
// line 1051	WITHOUT_CLASSIFICATION	0.9999934971503576	WITHOUT_CLASSIFICATION	6.502849642414015E-6	DEFECT
// line 1058	WITHOUT_CLASSIFICATION	0.9999941875472681	WITHOUT_CLASSIFICATION	5.8124527319499945E-6	DEFECT
// line 1070	WITHOUT_CLASSIFICATION	0.999994412617754	WITHOUT_CLASSIFICATION	5.587382246025492E-6	DEFECT
// line 1073	WITHOUT_CLASSIFICATION	0.9999933674715159	WITHOUT_CLASSIFICATION	6.632528484204119E-6	DEFECT
// line 1076	WITHOUT_CLASSIFICATION	0.9999925463703404	WITHOUT_CLASSIFICATION	7.453629659675728E-6	DEFECT
// line 1079	WITHOUT_CLASSIFICATION	0.9999931218744811	WITHOUT_CLASSIFICATION	6.878125518887245E-6	DEFECT
// line 1082	WITHOUT_CLASSIFICATION	0.9999950028571564	WITHOUT_CLASSIFICATION	4.9971428435593455E-6	DEFECT
// line 1089	WITHOUT_CLASSIFICATION	0.9999942690796432	WITHOUT_CLASSIFICATION	5.7309203567407475E-6	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.999992033291032	WITHOUT_CLASSIFICATION	7.966708967977483E-6	DEFECT
// line 1100	WITHOUT_CLASSIFICATION	0.999995192893781	WITHOUT_CLASSIFICATION	4.807106218990594E-6	DEFECT
// line 1103	WITHOUT_CLASSIFICATION	0.999994005086712	WITHOUT_CLASSIFICATION	5.9949132880002955E-6	DEFECT
// line 1107	WITHOUT_CLASSIFICATION	0.9999937720024602	WITHOUT_CLASSIFICATION	6.227997539783726E-6	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999935112825282	WITHOUT_CLASSIFICATION	6.488717471735275E-6	DEFECT
// line 1113	WITHOUT_CLASSIFICATION	0.999993170251631	WITHOUT_CLASSIFICATION	6.8297483689532984E-6	DEFECT
// line 1115	WITHOUT_CLASSIFICATION	0.9999926937345924	WITHOUT_CLASSIFICATION	7.306265407575057E-6	DEFECT
// line 1119	WITHOUT_CLASSIFICATION	0.9999929757169272	WITHOUT_CLASSIFICATION	7.024283072760194E-6	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999943739193639	WITHOUT_CLASSIFICATION	5.626080636116341E-6	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999931574000948	WITHOUT_CLASSIFICATION	6.842599905253249E-6	DEFECT
// line 1135	WITHOUT_CLASSIFICATION	0.9999928502495474	WITHOUT_CLASSIFICATION	7.14975045258514E-6	DEFECT
// line 1137	WITHOUT_CLASSIFICATION	0.9999929410092772	WITHOUT_CLASSIFICATION	7.058990722894224E-6	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999940433223503	WITHOUT_CLASSIFICATION	5.956677649637145E-6	DEFECT
// line 1151	WITHOUT_CLASSIFICATION	0.9999926955037604	WITHOUT_CLASSIFICATION	7.304496239609315E-6	DEFECT
// line 1154	WITHOUT_CLASSIFICATION	0.9999918389577535	WITHOUT_CLASSIFICATION	8.161042246581073E-6	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999934717545348	WITHOUT_CLASSIFICATION	6.52824546511468E-6	DEFECT
// line 1164	WITHOUT_CLASSIFICATION	0.9999916753280157	WITHOUT_CLASSIFICATION	8.324671984276687E-6	DEFECT
// line 1175	WITHOUT_CLASSIFICATION	0.9999910059334974	WITHOUT_CLASSIFICATION	8.99406650261701E-6	DEFECT
// line 1178	WITHOUT_CLASSIFICATION	0.999993588503369	WITHOUT_CLASSIFICATION	6.41149663102892E-6	DEFECT
// line 1187	WITHOUT_CLASSIFICATION	0.9999941663294654	WITHOUT_CLASSIFICATION	5.833670534575002E-6	DEFECT
// line 1189	WITHOUT_CLASSIFICATION	0.9999941807954671	WITHOUT_CLASSIFICATION	5.819204532983506E-6	DEFECT
// line 1193	WITHOUT_CLASSIFICATION	0.9999925265320968	WITHOUT_CLASSIFICATION	7.473467903247174E-6	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999929191756722	WITHOUT_CLASSIFICATION	7.080824327647212E-6	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.99999302902491	WITHOUT_CLASSIFICATION	6.970975089965055E-6	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999942685504563	WITHOUT_CLASSIFICATION	5.731449543683869E-6	DEFECT
// line 1214	WITHOUT_CLASSIFICATION	0.9999919139112654	WITHOUT_CLASSIFICATION	8.086088734552111E-6	DEFECT
// line 1234	WITHOUT_CLASSIFICATION	0.9999923797219039	WITHOUT_CLASSIFICATION	7.62027809607185E-6	DEFECT
// line 1239	WITHOUT_CLASSIFICATION	0.9999925337408626	WITHOUT_CLASSIFICATION	7.4662591373302246E-6	DEFECT
// line 1243	WITHOUT_CLASSIFICATION	0.9999870686435061	WITHOUT_CLASSIFICATION	1.2931356493931038E-5	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999890014220408	WITHOUT_CLASSIFICATION	1.0998577959184348E-5	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999923042922281	WITHOUT_CLASSIFICATION	7.695707771979254E-6	DEFECT
// line 1263	WITHOUT_CLASSIFICATION	0.9999912595586962	WITHOUT_CLASSIFICATION	8.740441303741188E-6	DEFECT
// line 1269	WITHOUT_CLASSIFICATION	0.9999909372148861	WITHOUT_CLASSIFICATION	9.06278511399517E-6	DEFECT
// line 1280	WITHOUT_CLASSIFICATION	0.999994877011291	WITHOUT_CLASSIFICATION	5.1229887089636194E-6	DEFECT
// line 1283	WITHOUT_CLASSIFICATION	0.9999933750989946	WITHOUT_CLASSIFICATION	6.624901005443955E-6	DEFECT
// line 1290	WITHOUT_CLASSIFICATION	0.9999936090340965	WITHOUT_CLASSIFICATION	6.390965903458729E-6	DEFECT
// line 1296	WITHOUT_CLASSIFICATION	0.9999909777620237	WITHOUT_CLASSIFICATION	9.022237976246893E-6	DEFECT
// line 1299	WITHOUT_CLASSIFICATION	0.9999911458596826	WITHOUT_CLASSIFICATION	8.854140317354844E-6	DEFECT
// line 1302	WITHOUT_CLASSIFICATION	0.9999939029404598	WITHOUT_CLASSIFICATION	6.09705954015571E-6	DEFECT
// line 1309	WITHOUT_CLASSIFICATION	0.9999930101715953	WITHOUT_CLASSIFICATION	6.989828404674074E-6	DEFECT
// line 1313	WITHOUT_CLASSIFICATION	0.9999928608486255	WITHOUT_CLASSIFICATION	7.139151374547707E-6	DEFECT
// line 1315	WITHOUT_CLASSIFICATION	0.999992598266706	WITHOUT_CLASSIFICATION	7.401733293987158E-6	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999949680134559	WITHOUT_CLASSIFICATION	5.031986544070813E-6	DEFECT
// line 1328	WITHOUT_CLASSIFICATION	0.9999943988974245	WITHOUT_CLASSIFICATION	5.601102575477432E-6	DEFECT
// line 1335	WITHOUT_CLASSIFICATION	0.9999926611094123	WITHOUT_CLASSIFICATION	7.338890587719625E-6	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999933470938427	WITHOUT_CLASSIFICATION	6.652906157328841E-6	DEFECT
// line 1352	WITHOUT_CLASSIFICATION	0.9999930834497623	WITHOUT_CLASSIFICATION	6.916550237690774E-6	DEFECT
// line 1358	WITHOUT_CLASSIFICATION	0.9999934888497619	WITHOUT_CLASSIFICATION	6.511150238074754E-6	DEFECT
// line 1374	WITHOUT_CLASSIFICATION	0.9999919398409479	WITHOUT_CLASSIFICATION	8.060159052113505E-6	DEFECT
// line 1381	WITHOUT_CLASSIFICATION	0.9999940905489885	WITHOUT_CLASSIFICATION	5.909451011499212E-6	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999936077272402	WITHOUT_CLASSIFICATION	6.392272759796969E-6	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9999931756351926	WITHOUT_CLASSIFICATION	6.824364807425961E-6	DEFECT
// line 1415	WITHOUT_CLASSIFICATION	0.9999915019632164	WITHOUT_CLASSIFICATION	8.498036783475075E-6	DEFECT
// line 1431	WITHOUT_CLASSIFICATION	0.9999920469107237	WITHOUT_CLASSIFICATION	7.953089276350638E-6	DEFECT
// line 1434	WITHOUT_CLASSIFICATION	0.9999920014264954	WITHOUT_CLASSIFICATION	7.998573504594967E-6	DEFECT
// line 1440	WITHOUT_CLASSIFICATION	0.9999938233326054	WITHOUT_CLASSIFICATION	6.176667394456431E-6	DEFECT
// line 1443	WITHOUT_CLASSIFICATION	0.9999913903085863	WITHOUT_CLASSIFICATION	8.609691413801443E-6	DEFECT
// line 1453	WITHOUT_CLASSIFICATION	0.9999913503672286	WITHOUT_CLASSIFICATION	8.649632771353686E-6	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999890972586902	WITHOUT_CLASSIFICATION	1.090274130966207E-5	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999917442970722	WITHOUT_CLASSIFICATION	8.2557029278852E-6	DEFECT
// line 1465	WITHOUT_CLASSIFICATION	0.9999902382195248	WITHOUT_CLASSIFICATION	9.761780475142004E-6	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999932789939758	WITHOUT_CLASSIFICATION	6.721006024205192E-6	DEFECT
// line 1477	WITHOUT_CLASSIFICATION	0.9999915408573782	WITHOUT_CLASSIFICATION	8.459142621817522E-6	DEFECT
// line 1480	WITHOUT_CLASSIFICATION	0.9999945375887327	WITHOUT_CLASSIFICATION	5.462411267371728E-6	DEFECT
// line 1485	WITHOUT_CLASSIFICATION	0.9999925460213152	WITHOUT_CLASSIFICATION	7.453978684842072E-6	DEFECT
// line 1488	WITHOUT_CLASSIFICATION	0.9999930928472073	WITHOUT_CLASSIFICATION	6.907152792741015E-6	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999903319218448	WITHOUT_CLASSIFICATION	9.668078155177335E-6	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999934586185542	WITHOUT_CLASSIFICATION	6.5413814457724645E-6	DEFECT
// line 1510	WITHOUT_CLASSIFICATION	0.9999939052671081	WITHOUT_CLASSIFICATION	6.0947328920112034E-6	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999919809227952	WITHOUT_CLASSIFICATION	8.019077204817028E-6	DEFECT
// line 1516	WITHOUT_CLASSIFICATION	0.99999105671699	WITHOUT_CLASSIFICATION	8.94328301007046E-6	DEFECT
// line 1533	WITHOUT_CLASSIFICATION	0.9999920917807583	WITHOUT_CLASSIFICATION	7.908219241730884E-6	DEFECT
// line 1550	WITHOUT_CLASSIFICATION	0.9999937750415493	WITHOUT_CLASSIFICATION	6.2249584506843725E-6	DEFECT
// line 1553	WITHOUT_CLASSIFICATION	0.9999920151026058	WITHOUT_CLASSIFICATION	7.984897394117448E-6	DEFECT
// line 1556	WITHOUT_CLASSIFICATION	0.9999898759854887	WITHOUT_CLASSIFICATION	1.0124014511299843E-5	DEFECT
// line 1565	WITHOUT_CLASSIFICATION	0.9999898243943015	WITHOUT_CLASSIFICATION	1.017560569856472E-5	DEFECT
// line 1568	WITHOUT_CLASSIFICATION	0.999991072432288	WITHOUT_CLASSIFICATION	8.927567711932494E-6	DEFECT
// line 1571	WITHOUT_CLASSIFICATION	0.9999916978689604	WITHOUT_CLASSIFICATION	8.30213103965833E-6	DEFECT
// line 1574	WITHOUT_CLASSIFICATION	0.999990725817524	WITHOUT_CLASSIFICATION	9.274182475994653E-6	DEFECT
// line 1577	WITHOUT_CLASSIFICATION	0.999991560544543	WITHOUT_CLASSIFICATION	8.439455456974554E-6	DEFECT
// line 1587	WITHOUT_CLASSIFICATION	0.999992669758556	WITHOUT_CLASSIFICATION	7.3302414439672805E-6	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999918714878212	WITHOUT_CLASSIFICATION	8.128512178676365E-6	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999927188242898	WITHOUT_CLASSIFICATION	7.281175710126149E-6	DEFECT
// line 1600	WITHOUT_CLASSIFICATION	0.9999931359512606	WITHOUT_CLASSIFICATION	6.864048739414528E-6	DEFECT
// line 1609	WITHOUT_CLASSIFICATION	0.9999912435710254	WITHOUT_CLASSIFICATION	8.75642897453721E-6	DEFECT
// line 1623	WITHOUT_CLASSIFICATION	0.9999925498389636	WITHOUT_CLASSIFICATION	7.45016103638425E-6	DEFECT
// line 1626	WITHOUT_CLASSIFICATION	0.9999926255642962	WITHOUT_CLASSIFICATION	7.374435703809324E-6	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999924082393256	WITHOUT_CLASSIFICATION	7.591760674482771E-6	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999927405227285	WITHOUT_CLASSIFICATION	7.259477271617381E-6	DEFECT
// line 1638	WITHOUT_CLASSIFICATION	0.999993150048545	WITHOUT_CLASSIFICATION	6.8499514550370164E-6	DEFECT
// line 1641	WITHOUT_CLASSIFICATION	0.9999913888913621	WITHOUT_CLASSIFICATION	8.611108637939913E-6	DEFECT
// line 1644	WITHOUT_CLASSIFICATION	0.9999913042566663	WITHOUT_CLASSIFICATION	8.695743333823265E-6	DEFECT
// line 1649	WITHOUT_CLASSIFICATION	0.9999906079865506	WITHOUT_CLASSIFICATION	9.392013449394206E-6	DEFECT
// line 1655	WITHOUT_CLASSIFICATION	0.9999913823657098	WITHOUT_CLASSIFICATION	8.617634290141326E-6	DEFECT
// line 1658	WITHOUT_CLASSIFICATION	0.9999923867563278	WITHOUT_CLASSIFICATION	7.613243672203462E-6	DEFECT
// line 1661	WITHOUT_CLASSIFICATION	0.9999921143207717	WITHOUT_CLASSIFICATION	7.885679228246947E-6	DEFECT
// line 1672	WITHOUT_CLASSIFICATION	0.9999919736264059	WITHOUT_CLASSIFICATION	8.026373594163503E-6	DEFECT
// line 1677	WITHOUT_CLASSIFICATION	0.9999913897913584	WITHOUT_CLASSIFICATION	8.610208641608368E-6	DEFECT
// line 1687	WITHOUT_CLASSIFICATION	0.9999925204529369	WITHOUT_CLASSIFICATION	7.479547063125071E-6	DEFECT
// line 1694	WITHOUT_CLASSIFICATION	0.9999905486582613	WITHOUT_CLASSIFICATION	9.451341738712779E-6	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999926302713655	WITHOUT_CLASSIFICATION	7.369728634410041E-6	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9999939927502853	WITHOUT_CLASSIFICATION	6.007249714683767E-6	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9999925569704311	WITHOUT_CLASSIFICATION	7.4430295689074826E-6	DEFECT
// line 1733	WITHOUT_CLASSIFICATION	0.9999923600997367	WITHOUT_CLASSIFICATION	7.639900263364906E-6	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999921107345686	WITHOUT_CLASSIFICATION	7.88926543129921E-6	DEFECT
// line 1745	WITHOUT_CLASSIFICATION	0.9999909118693475	WITHOUT_CLASSIFICATION	9.088130652511418E-6	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999910300234974	WITHOUT_CLASSIFICATION	8.96997650258174E-6	DEFECT
// line 1757	WITHOUT_CLASSIFICATION	0.9999906867641744	WITHOUT_CLASSIFICATION	9.31323582573874E-6	DEFECT
// line 1769	WITHOUT_CLASSIFICATION	0.9999907566329632	WITHOUT_CLASSIFICATION	9.243367036772387E-6	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999929329517535	WITHOUT_CLASSIFICATION	7.067048246433309E-6	DEFECT
// line 1775	WITHOUT_CLASSIFICATION	0.9999906589121048	WITHOUT_CLASSIFICATION	9.34108789515072E-6	DEFECT
// line 1784	WITHOUT_CLASSIFICATION	0.99999272009321	WITHOUT_CLASSIFICATION	7.279906790010398E-6	DEFECT
// line 1808	WITHOUT_CLASSIFICATION	0.9999948878435307	WITHOUT_CLASSIFICATION	5.112156469214918E-6	DEFECT
// line 1814	WITHOUT_CLASSIFICATION	0.9999937657008268	WITHOUT_CLASSIFICATION	6.234299173328437E-6	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.999994294687716	WITHOUT_CLASSIFICATION	5.705312283963501E-6	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999948485050942	WITHOUT_CLASSIFICATION	5.151494905753104E-6	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999944683047799	WITHOUT_CLASSIFICATION	5.531695220103696E-6	DEFECT
/*XXX 0;*/	WITHOUT_CLASSIFICATION	0.999975605463452	WITHOUT_CLASSIFICATION	2.4394536547927782E-5	DEFECT
/*                      $$ = $3;*/	WITHOUT_CLASSIFICATION	0.999982513600571	WITHOUT_CLASSIFICATION	1.7486399428935587E-5	DEFECT
/*                  }*/	WITHOUT_CLASSIFICATION	0.9999424308358753	WITHOUT_CLASSIFICATION	5.756916412469637E-5	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9999839562218907	WITHOUT_CLASSIFICATION	1.60437781093233E-5	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9999921813009681	WITHOUT_CLASSIFICATION	7.818699031970929E-6	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9999684923204124	WITHOUT_CLASSIFICATION	3.150767958759483E-5	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9999608513304002	WITHOUT_CLASSIFICATION	3.914866959982736E-5	DEFECT
/* NOEX_PRIVATE for toplevel */	WITHOUT_CLASSIFICATION	0.9999381710897468	WITHOUT_CLASSIFICATION	6.182891025318528E-5	DEFECT
/*mirko: check*/	WITHOUT_CLASSIFICATION	0.9997537191472782	WITHOUT_CLASSIFICATION	2.462808527218991E-4	DEFECT
/* Include pipes on multiple arg type*/	WITHOUT_CLASSIFICATION	0.9999935947754466	WITHOUT_CLASSIFICATION	6.405224553509159E-6	DEFECT
// line 529	WITHOUT_CLASSIFICATION	0.9999930509896892	WITHOUT_CLASSIFICATION	6.949010310819642E-6	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9999958923137059	WITHOUT_CLASSIFICATION	4.107686294085377E-6	DEFECT
/* XXX*/	WITHOUT_CLASSIFICATION	0.9999673260880244	WITHOUT_CLASSIFICATION	3.267391197558128E-5	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9999871496220407	WITHOUT_CLASSIFICATION	1.2850377959244776E-5	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9999815526542285	WITHOUT_CLASSIFICATION	1.8447345771430122E-5	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9999360689690642	WITHOUT_CLASSIFICATION	6.393103093578502E-5	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9999913323440128	WITHOUT_CLASSIFICATION	8.667655987110438E-6	DEFECT
// line 1827 "DefaultRubyParser.y"	WITHOUT_CLASSIFICATION	0.9999967533148663	WITHOUT_CLASSIFICATION	3.2466851336777097E-6	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.99999722451727	WITHOUT_CLASSIFICATION	2.775482730077964E-6	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9999959330953566	WITHOUT_CLASSIFICATION	4.066904643386768E-6	DEFECT
// line 7713 "-"	WITHOUT_CLASSIFICATION	0.9999967403189997	WITHOUT_CLASSIFICATION	3.259681000377572E-6	DEFECT
// local scopes are argument scopes by default	WITHOUT_CLASSIFICATION	0.9999997359972412	WITHOUT_CLASSIFICATION	2.6400275872194167E-7	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999993275681027	WITHOUT_CLASSIFICATION	6.724318972998849E-7	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999993275681027	WITHOUT_CLASSIFICATION	6.724318972998849E-7	DEFECT
// We know this is a block scope because a local scope cannot be within a local scope // If topScope was itself it would have created a LocalAsgnNode above.	WITHOUT_CLASSIFICATION	0.9999729254313225	WITHOUT_CLASSIFICATION	2.707456867743919E-5	DEFECT
// ENEBO: 1.9 has CURR nodes for local/block variables.  We don't.  I believe we follow proper logic	WITHOUT_CLASSIFICATION	0.9998220715343713	WITHOUT_CLASSIFICATION	1.779284656286887E-4	DEFECT
// odd...but it is odd in ruby too.	WITHOUT_CLASSIFICATION	0.9999822704450904	WITHOUT_CLASSIFICATION	1.772955490961152E-5	DEFECT
// What linenumber will the source think it starts from?	WITHOUT_CLASSIFICATION	0.9999965668004343	WITHOUT_CLASSIFICATION	3.4331995658025205E-6	DEFECT
// Is this inline source (aka -e "...source...")	WITHOUT_CLASSIFICATION	0.9999955025019153	WITHOUT_CLASSIFICATION	4.4974980848109205E-6	DEFECT
// We parse evals more often in source so assume an eval parse.	WITHOUT_CLASSIFICATION	0.9999990322159305	WITHOUT_CLASSIFICATION	9.67784069546063E-7	DEFECT
// Should positions added extra IDE-friendly information and leave in all newline nodes	WITHOUT_CLASSIFICATION	0.9999957612559415	WITHOUT_CLASSIFICATION	4.238744058591819E-6	DEFECT
// Will parser parse Duby grammar Extensions	WITHOUT_CLASSIFICATION	0.9999971487904804	WITHOUT_CLASSIFICATION	2.851209519552447E-6	DEFECT
// Should we display extra debug information while parsing?	WITHOUT_CLASSIFICATION	0.9999410509286343	WITHOUT_CLASSIFICATION	5.894907136568783E-5	DEFECT
// __END__ marker offset (-1 means none present)	WITHOUT_CLASSIFICATION	0.9999972510823705	WITHOUT_CLASSIFICATION	2.7489176294570594E-6	DEFECT
// Parser states:	WITHOUT_CLASSIFICATION	0.9999970689539586	WITHOUT_CLASSIFICATION	2.93104604133096E-6	DEFECT
// Is the parser current within a singleton (value is number of nested singletons)	WITHOUT_CLASSIFICATION	0.9999992116467951	WITHOUT_CLASSIFICATION	7.883532048675821E-7	DEFECT
// Is the parser currently within a method definition	WITHOUT_CLASSIFICATION	0.9999966320983321	WITHOUT_CLASSIFICATION	3.3679016678070706E-6	DEFECT
// LOCALVAR	WITHOUT_CLASSIFICATION	0.9999862921751037	WITHOUT_CLASSIFICATION	1.3707824896161436E-5	DEFECT
// CONSTANT	WITHOUT_CLASSIFICATION	0.999981048993759	WITHOUT_CLASSIFICATION	1.895100624111358E-5	DEFECT
// INSTANCE VARIABLE	WITHOUT_CLASSIFICATION	0.9999786401289036	WITHOUT_CLASSIFICATION	2.1359871096320436E-5	DEFECT
// Add real top to new top (unless this top is empty [only begin/end nodes or truly empty])	WITHOUT_CLASSIFICATION	0.9999976376378252	WITHOUT_CLASSIFICATION	2.3623621746923557E-6	DEFECT
/* MRI: block_append */	WITHOUT_CLASSIFICATION	0.9999012270147631	WITHOUT_CLASSIFICATION	9.877298523682598E-5	DEFECT
// Reduces overhead in interp by not set position every single line we encounter. 	WITHOUT_CLASSIFICATION	0.9999962693708992	WITHOUT_CLASSIFICATION	3.730629100634925E-6	DEFECT
// Assumption: tail is never a list node	WITHOUT_CLASSIFICATION	0.9999914550185129	WITHOUT_CLASSIFICATION	8.54498148704309E-6	DEFECT
//        return new CallOneArgNode(firstNode.getPosition(), firstNode, operator, new ArrayNode(secondNode.getPosition(), secondNode));	WITHOUT_CLASSIFICATION	0.9999995205251567	WITHOUT_CLASSIFICATION	4.794748432988015E-7	DEFECT
// Node	WITHOUT_CLASSIFICATION	0.9999919076317174	WITHOUT_CLASSIFICATION	8.092368282559171E-6	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9971915304239043	WITHOUT_CLASSIFICATION	0.002808469576095804	DEFECT
/*case CONSTNODE:                handleUselessWarn(node, "a constant"); return;*/	WITHOUT_CLASSIFICATION	0.9999964859019213	WITHOUT_CLASSIFICATION	3.5140980786748273E-6	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9971915304239043	WITHOUT_CLASSIFICATION	0.002808469576095804	DEFECT
/*case CLASSNODE: case COLON2NODE:                handleUselessWarn(node, "::"); return;*/	WITHOUT_CLASSIFICATION	0.999998092560306	WITHOUT_CLASSIFICATION	1.9074396939306135E-6	DEFECT
/*case SELFNODE:                handleUselessWarn(node, "self"); return;*/	WITHOUT_CLASSIFICATION	0.9999967597710853	WITHOUT_CLASSIFICATION	3.2402289146773337E-6	DEFECT
// FIXME: DSTR,EVSTR,STR: warning "string literal in condition"	WITHOUT_CLASSIFICATION	0.9831344764104887	WITHOUT_CLASSIFICATION	0.01686552358951133	DEFECT
/* MRI: range_op */	WITHOUT_CLASSIFICATION	0.9999706201946014	WITHOUT_CLASSIFICATION	2.9379805398641023E-5	DEFECT
// Block and block pass passed in at same time....uh oh	WITHOUT_CLASSIFICATION	0.9999988134837927	WITHOUT_CLASSIFICATION	1.1865162073055947E-6	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999926597407569	WITHOUT_CLASSIFICATION	7.340259243041722E-6	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999926597407569	WITHOUT_CLASSIFICATION	7.340259243041722E-6	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999926597407569	WITHOUT_CLASSIFICATION	7.340259243041722E-6	DEFECT
// tail must be EvStrNode at this point 	WITHOUT_CLASSIFICATION	0.9999426479337076	WITHOUT_CLASSIFICATION	5.7352066292366666E-5	DEFECT
//Do not add an empty string node	WITHOUT_CLASSIFICATION	0.9996822364797119	WITHOUT_CLASSIFICATION	3.177635202880982E-4	DEFECT
// Zero-Argument declaration	WITHOUT_CLASSIFICATION	0.9999986914808024	WITHOUT_CLASSIFICATION	1.3085191976113366E-6	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999565192057459	WITHOUT_CLASSIFICATION	4.348079425403065E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999565192057459	WITHOUT_CLASSIFICATION	4.348079425403065E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999565192057459	WITHOUT_CLASSIFICATION	4.348079425403065E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999565192057459	WITHOUT_CLASSIFICATION	4.348079425403065E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999565192057459	WITHOUT_CLASSIFICATION	4.348079425403065E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999565192057459	WITHOUT_CLASSIFICATION	4.348079425403065E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999575392681723	WITHOUT_CLASSIFICATION	4.246073182774047E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999575392681723	WITHOUT_CLASSIFICATION	4.246073182774047E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999575392681723	WITHOUT_CLASSIFICATION	4.246073182774047E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999575392681723	WITHOUT_CLASSIFICATION	4.246073182774047E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999575392681723	WITHOUT_CLASSIFICATION	4.246073182774047E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999294764826551	WITHOUT_CLASSIFICATION	7.052351734500539E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999294764826551	WITHOUT_CLASSIFICATION	7.052351734500539E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999294764826551	WITHOUT_CLASSIFICATION	7.052351734500539E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999294764826551	WITHOUT_CLASSIFICATION	7.052351734500539E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999294764826551	WITHOUT_CLASSIFICATION	7.052351734500539E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999545219565106	WITHOUT_CLASSIFICATION	4.5478043489457065E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999545219565106	WITHOUT_CLASSIFICATION	4.5478043489457065E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999545219565106	WITHOUT_CLASSIFICATION	4.5478043489457065E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999545219565106	WITHOUT_CLASSIFICATION	4.5478043489457065E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999545219565106	WITHOUT_CLASSIFICATION	4.5478043489457065E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999545219565106	WITHOUT_CLASSIFICATION	4.5478043489457065E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999139010969954	WITHOUT_CLASSIFICATION	8.609890300468157E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999139010969954	WITHOUT_CLASSIFICATION	8.609890300468157E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999139010969954	WITHOUT_CLASSIFICATION	8.609890300468157E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999139010969954	WITHOUT_CLASSIFICATION	8.609890300468157E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999139010969954	WITHOUT_CLASSIFICATION	8.609890300468157E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999349591810075	WITHOUT_CLASSIFICATION	6.504081899248318E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999349591810075	WITHOUT_CLASSIFICATION	6.504081899248318E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999349591810075	WITHOUT_CLASSIFICATION	6.504081899248318E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999349591810075	WITHOUT_CLASSIFICATION	6.504081899248318E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999349591810075	WITHOUT_CLASSIFICATION	6.504081899248318E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999357044058326	WITHOUT_CLASSIFICATION	6.429559416734893E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999357044058326	WITHOUT_CLASSIFICATION	6.429559416734893E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999357044058326	WITHOUT_CLASSIFICATION	6.429559416734893E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999357044058326	WITHOUT_CLASSIFICATION	6.429559416734893E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999357044058326	WITHOUT_CLASSIFICATION	6.429559416734893E-5	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9999951675304876	WITHOUT_CLASSIFICATION	4.832469512375777E-6	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999973745749798	WITHOUT_CLASSIFICATION	2.6254250201756946E-6	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999896808901825	WITHOUT_CLASSIFICATION	1.0319109817489028E-5	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999951460383877	WITHOUT_CLASSIFICATION	4.853961612407697E-6	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9999988414112425	WITHOUT_CLASSIFICATION	1.158588757452876E-6	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999949276520914	WITHOUT_CLASSIFICATION	5.072347908600281E-6	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999940678865973	WITHOUT_CLASSIFICATION	5.932113402749893E-6	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999949962721749	WITHOUT_CLASSIFICATION	5.003727825109336E-6	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.9999930933906338	WITHOUT_CLASSIFICATION	6.906609366214185E-6	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999946805136234	WITHOUT_CLASSIFICATION	5.3194863766218155E-6	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.999993150986833	WITHOUT_CLASSIFICATION	6.849013167041943E-6	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9999922273025185	WITHOUT_CLASSIFICATION	7.772697481504411E-6	DEFECT
// line 280	WITHOUT_CLASSIFICATION	0.9999960718910188	WITHOUT_CLASSIFICATION	3.928108981285603E-6	DEFECT
// line 283	WITHOUT_CLASSIFICATION	0.9999949199208326	WITHOUT_CLASSIFICATION	5.080079167541807E-6	DEFECT
// line 296	WITHOUT_CLASSIFICATION	0.9999931172461825	WITHOUT_CLASSIFICATION	6.882753817602936E-6	DEFECT
// line 324	WITHOUT_CLASSIFICATION	0.9999932325277853	WITHOUT_CLASSIFICATION	6.767472214777468E-6	DEFECT
// line 327	WITHOUT_CLASSIFICATION	0.9999938440179689	WITHOUT_CLASSIFICATION	6.155982031099533E-6	DEFECT
// line 331	WITHOUT_CLASSIFICATION	0.9999946909219433	WITHOUT_CLASSIFICATION	5.3090780567984045E-6	DEFECT
// line 333	WITHOUT_CLASSIFICATION	0.9999936515771013	WITHOUT_CLASSIFICATION	6.3484228986134415E-6	DEFECT
// line 336	WITHOUT_CLASSIFICATION	0.9999930439013305	WITHOUT_CLASSIFICATION	6.956098669513371E-6	DEFECT
// line 342	WITHOUT_CLASSIFICATION	0.9999936169077478	WITHOUT_CLASSIFICATION	6.383092252135099E-6	DEFECT
// line 345	WITHOUT_CLASSIFICATION	0.9999926885877205	WITHOUT_CLASSIFICATION	7.311412279491787E-6	DEFECT
// line 348	WITHOUT_CLASSIFICATION	0.9999939990326332	WITHOUT_CLASSIFICATION	6.000967366757313E-6	DEFECT
// line 354	WITHOUT_CLASSIFICATION	0.9999926553380756	WITHOUT_CLASSIFICATION	7.3446619243501496E-6	DEFECT
// line 368	WITHOUT_CLASSIFICATION	0.9999937797183991	WITHOUT_CLASSIFICATION	6.220281600829775E-6	DEFECT
// line 377	WITHOUT_CLASSIFICATION	0.999993380645579	WITHOUT_CLASSIFICATION	6.6193544210770515E-6	DEFECT
// line 388	WITHOUT_CLASSIFICATION	0.9999945838885171	WITHOUT_CLASSIFICATION	5.416111482860701E-6	DEFECT
// line 392	WITHOUT_CLASSIFICATION	0.9999938479054155	WITHOUT_CLASSIFICATION	6.152094584580837E-6	DEFECT
// line 397	WITHOUT_CLASSIFICATION	0.9999919726284962	WITHOUT_CLASSIFICATION	8.027371503860667E-6	DEFECT
// line 429	WITHOUT_CLASSIFICATION	0.9999929183360092	WITHOUT_CLASSIFICATION	7.081663990748917E-6	DEFECT
// line 432	WITHOUT_CLASSIFICATION	0.9999930114935618	WITHOUT_CLASSIFICATION	6.988506438301347E-6	DEFECT
// line 436	WITHOUT_CLASSIFICATION	0.9999913685685051	WITHOUT_CLASSIFICATION	8.631431494894886E-6	DEFECT
// line 445	WITHOUT_CLASSIFICATION	0.999992247676301	WITHOUT_CLASSIFICATION	7.752323698972206E-6	DEFECT
// line 448	WITHOUT_CLASSIFICATION	0.9999936732018216	WITHOUT_CLASSIFICATION	6.326798178432379E-6	DEFECT
// line 454	WITHOUT_CLASSIFICATION	0.9999923587709094	WITHOUT_CLASSIFICATION	7.641229090499168E-6	DEFECT
// line 459	WITHOUT_CLASSIFICATION	0.9999918806793241	WITHOUT_CLASSIFICATION	8.119320675831927E-6	DEFECT
// line 466	WITHOUT_CLASSIFICATION	0.9999917020014157	WITHOUT_CLASSIFICATION	8.2979985841835E-6	DEFECT
// line 469	WITHOUT_CLASSIFICATION	0.9999912102247407	WITHOUT_CLASSIFICATION	8.789775259385002E-6	DEFECT
// line 478	WITHOUT_CLASSIFICATION	0.9999931823061803	WITHOUT_CLASSIFICATION	6.8176938196782384E-6	DEFECT
// line 481	WITHOUT_CLASSIFICATION	0.9999943919192494	WITHOUT_CLASSIFICATION	5.608080750546234E-6	DEFECT
// line 488	WITHOUT_CLASSIFICATION	0.9999936730568341	WITHOUT_CLASSIFICATION	6.32694316582926E-6	DEFECT
// line 494	WITHOUT_CLASSIFICATION	0.9999923683613254	WITHOUT_CLASSIFICATION	7.631638674470452E-6	DEFECT
// line 497	WITHOUT_CLASSIFICATION	0.9999905989126486	WITHOUT_CLASSIFICATION	9.401087351391252E-6	DEFECT
// line 503	WITHOUT_CLASSIFICATION	0.9999934980666421	WITHOUT_CLASSIFICATION	6.501933357874794E-6	DEFECT
// line 506	WITHOUT_CLASSIFICATION	0.9999922583156747	WITHOUT_CLASSIFICATION	7.741684325238692E-6	DEFECT
// line 509	WITHOUT_CLASSIFICATION	0.999993221619639	WITHOUT_CLASSIFICATION	6.7783803609992084E-6	DEFECT
// line 512	WITHOUT_CLASSIFICATION	0.9999936831277657	WITHOUT_CLASSIFICATION	6.3168722343041605E-6	DEFECT
// line 521	WITHOUT_CLASSIFICATION	0.9999941593509117	WITHOUT_CLASSIFICATION	5.840649088357838E-6	DEFECT
// line 526	WITHOUT_CLASSIFICATION	0.9999923722922451	WITHOUT_CLASSIFICATION	7.62770775487926E-6	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999937797050032	WITHOUT_CLASSIFICATION	6.220294996814557E-6	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999913374998156	WITHOUT_CLASSIFICATION	8.662500184517446E-6	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999909081423032	WITHOUT_CLASSIFICATION	9.091857696725837E-6	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999908065111818	WITHOUT_CLASSIFICATION	9.1934888181486E-6	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9999947062324755	WITHOUT_CLASSIFICATION	5.293767524384634E-6	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999924400006778	WITHOUT_CLASSIFICATION	7.5599993221813E-6	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999928065019457	WITHOUT_CLASSIFICATION	7.193498054365362E-6	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999919099031356	WITHOUT_CLASSIFICATION	8.090096864433169E-6	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999934010269875	WITHOUT_CLASSIFICATION	6.598973012449734E-6	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.999994257253912	WITHOUT_CLASSIFICATION	5.742746088026315E-6	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999932905055429	WITHOUT_CLASSIFICATION	6.709494457129591E-6	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.999993782691164	WITHOUT_CLASSIFICATION	6.2173088360325015E-6	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999932493799805	WITHOUT_CLASSIFICATION	6.7506200195982535E-6	DEFECT
// line 534	WITHOUT_CLASSIFICATION	0.999992500365873	WITHOUT_CLASSIFICATION	7.499634127043619E-6	DEFECT
// line 549	WITHOUT_CLASSIFICATION	0.9999916077428559	WITHOUT_CLASSIFICATION	8.39225714415653E-6	DEFECT
// line 552	WITHOUT_CLASSIFICATION	0.9999934319072902	WITHOUT_CLASSIFICATION	6.568092709862014E-6	DEFECT
// line 558	WITHOUT_CLASSIFICATION	0.9999938173763503	WITHOUT_CLASSIFICATION	6.182623649618744E-6	DEFECT
// line 561	WITHOUT_CLASSIFICATION	0.9999918555705601	WITHOUT_CLASSIFICATION	8.144429439949716E-6	DEFECT
// line 571	WITHOUT_CLASSIFICATION	0.9999932362350512	WITHOUT_CLASSIFICATION	6.763764948908106E-6	DEFECT
// line 574	WITHOUT_CLASSIFICATION	0.9999916299794773	WITHOUT_CLASSIFICATION	8.370020522563674E-6	DEFECT
// line 579	WITHOUT_CLASSIFICATION	0.9999918994751463	WITHOUT_CLASSIFICATION	8.100524853673798E-6	DEFECT
// line 586	WITHOUT_CLASSIFICATION	0.9999928487457752	WITHOUT_CLASSIFICATION	7.1512542247601905E-6	DEFECT
// line 589	WITHOUT_CLASSIFICATION	0.9999934013376053	WITHOUT_CLASSIFICATION	6.598662394700628E-6	DEFECT
// line 592	WITHOUT_CLASSIFICATION	0.9999929940233283	WITHOUT_CLASSIFICATION	7.005976671617976E-6	DEFECT
// line 595	WITHOUT_CLASSIFICATION	0.9999925571553877	WITHOUT_CLASSIFICATION	7.442844612315792E-6	DEFECT
// line 598	WITHOUT_CLASSIFICATION	0.9999933796099487	WITHOUT_CLASSIFICATION	6.620390051372586E-6	DEFECT
// line 623	WITHOUT_CLASSIFICATION	0.9999929833111145	WITHOUT_CLASSIFICATION	7.016688885522446E-6	DEFECT
// line 627	WITHOUT_CLASSIFICATION	0.9999926355342547	WITHOUT_CLASSIFICATION	7.3644657454034334E-6	DEFECT
// line 630	WITHOUT_CLASSIFICATION	0.9999937445742707	WITHOUT_CLASSIFICATION	6.255425729295349E-6	DEFECT
// line 633	WITHOUT_CLASSIFICATION	0.9999924002028941	WITHOUT_CLASSIFICATION	7.599797105967059E-6	DEFECT
// line 639	WITHOUT_CLASSIFICATION	0.9999922337986016	WITHOUT_CLASSIFICATION	7.76620139848726E-6	DEFECT
// line 648	WITHOUT_CLASSIFICATION	0.9999926560657822	WITHOUT_CLASSIFICATION	7.343934217832039E-6	DEFECT
// line 657	WITHOUT_CLASSIFICATION	0.9999912439133851	WITHOUT_CLASSIFICATION	8.756086614818188E-6	DEFECT
// line 661	WITHOUT_CLASSIFICATION	0.999993297133762	WITHOUT_CLASSIFICATION	6.7028662379959736E-6	DEFECT
// line 666	WITHOUT_CLASSIFICATION	0.9999924269155644	WITHOUT_CLASSIFICATION	7.573084435587065E-6	DEFECT
// line 678	WITHOUT_CLASSIFICATION	0.9999928732540541	WITHOUT_CLASSIFICATION	7.126745945942034E-6	DEFECT
// line 682	WITHOUT_CLASSIFICATION	0.999993878349099	WITHOUT_CLASSIFICATION	6.121650900966211E-6	DEFECT
// line 688	WITHOUT_CLASSIFICATION	0.9999933745534367	WITHOUT_CLASSIFICATION	6.625446563243749E-6	DEFECT
// line 699	WITHOUT_CLASSIFICATION	0.999990897290707	WITHOUT_CLASSIFICATION	9.102709292932484E-6	DEFECT
// line 706	WITHOUT_CLASSIFICATION	0.9999923363963633	WITHOUT_CLASSIFICATION	7.663603636656862E-6	DEFECT
// line 708	WITHOUT_CLASSIFICATION	0.9999943912649142	WITHOUT_CLASSIFICATION	5.60873508588282E-6	DEFECT
// line 727	WITHOUT_CLASSIFICATION	0.9999934247869589	WITHOUT_CLASSIFICATION	6.575213041083351E-6	DEFECT
// line 737	WITHOUT_CLASSIFICATION	0.9999931485427644	WITHOUT_CLASSIFICATION	6.851457235549164E-6	DEFECT
// line 753	WITHOUT_CLASSIFICATION	0.9999910917273159	WITHOUT_CLASSIFICATION	8.908272684009292E-6	DEFECT
// line 779	WITHOUT_CLASSIFICATION	0.9999924707756086	WITHOUT_CLASSIFICATION	7.5292243914847975E-6	DEFECT
// line 801	WITHOUT_CLASSIFICATION	0.9999954273402728	WITHOUT_CLASSIFICATION	4.572659727289825E-6	DEFECT
// line 808	WITHOUT_CLASSIFICATION	0.9999948301997816	WITHOUT_CLASSIFICATION	5.169800218457523E-6	DEFECT
// line 811	WITHOUT_CLASSIFICATION	0.9999950424461135	WITHOUT_CLASSIFICATION	4.957553886445757E-6	DEFECT
// line 817	WITHOUT_CLASSIFICATION	0.999994446456233	WITHOUT_CLASSIFICATION	5.553543767004136E-6	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999940340902304	WITHOUT_CLASSIFICATION	5.9659097695870685E-6	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999931274991612	WITHOUT_CLASSIFICATION	6.872500838802946E-6	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999936028014609	WITHOUT_CLASSIFICATION	6.397198539153121E-6	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999936836184726	WITHOUT_CLASSIFICATION	6.316381527377169E-6	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.999993076821482	WITHOUT_CLASSIFICATION	6.9231785180485E-6	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999935992572125	WITHOUT_CLASSIFICATION	6.400742787440198E-6	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.999992246488851	WITHOUT_CLASSIFICATION	7.753511149024578E-6	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.999992641857763	WITHOUT_CLASSIFICATION	7.358142236944067E-6	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.999995090956353	WITHOUT_CLASSIFICATION	4.909043647026882E-6	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999939544836063	WITHOUT_CLASSIFICATION	6.045516393707826E-6	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999948175649648	WITHOUT_CLASSIFICATION	5.182435035301281E-6	DEFECT
// line 820	WITHOUT_CLASSIFICATION	0.9999958304138009	WITHOUT_CLASSIFICATION	4.169586199130021E-6	DEFECT
// line 826	WITHOUT_CLASSIFICATION	0.9999939104710368	WITHOUT_CLASSIFICATION	6.089528963280238E-6	DEFECT
// line 829	WITHOUT_CLASSIFICATION	0.9999944518628662	WITHOUT_CLASSIFICATION	5.548137133764525E-6	DEFECT
// line 832	WITHOUT_CLASSIFICATION	0.9999948068123858	WITHOUT_CLASSIFICATION	5.1931876141431476E-6	DEFECT
// line 851	WITHOUT_CLASSIFICATION	0.999994494879883	WITHOUT_CLASSIFICATION	5.505120116992101E-6	DEFECT
// line 857	WITHOUT_CLASSIFICATION	0.9999933393231473	WITHOUT_CLASSIFICATION	6.6606768527196815E-6	DEFECT
// line 860	WITHOUT_CLASSIFICATION	0.9999939927283017	WITHOUT_CLASSIFICATION	6.007271698216544E-6	DEFECT
// line 863	WITHOUT_CLASSIFICATION	0.9999932510235989	WITHOUT_CLASSIFICATION	6.7489764011034815E-6	DEFECT
// line 866	WITHOUT_CLASSIFICATION	0.9999933930404369	WITHOUT_CLASSIFICATION	6.606959563004381E-6	DEFECT
// line 869	WITHOUT_CLASSIFICATION	0.9999930021236652	WITHOUT_CLASSIFICATION	6.9978763347653394E-6	DEFECT
// line 875	WITHOUT_CLASSIFICATION	0.999992438263009	WITHOUT_CLASSIFICATION	7.561736991042833E-6	DEFECT
// line 884	WITHOUT_CLASSIFICATION	0.9999937030864584	WITHOUT_CLASSIFICATION	6.296913541520314E-6	DEFECT
// line 887	WITHOUT_CLASSIFICATION	0.9999938867816374	WITHOUT_CLASSIFICATION	6.1132183626270615E-6	DEFECT
// line 890	WITHOUT_CLASSIFICATION	0.9999950039378418	WITHOUT_CLASSIFICATION	4.996062158217555E-6	DEFECT
// line 902	WITHOUT_CLASSIFICATION	0.9999940273012079	WITHOUT_CLASSIFICATION	5.97269879203815E-6	DEFECT
// line 909	WITHOUT_CLASSIFICATION	0.9999936111219527	WITHOUT_CLASSIFICATION	6.388878047388239E-6	DEFECT
// line 912	WITHOUT_CLASSIFICATION	0.9999936895474488	WITHOUT_CLASSIFICATION	6.310452551187182E-6	DEFECT
// line 916	WITHOUT_CLASSIFICATION	0.9999927284361351	WITHOUT_CLASSIFICATION	7.271563864951468E-6	DEFECT
// line 922	WITHOUT_CLASSIFICATION	0.9999935066033898	WITHOUT_CLASSIFICATION	6.493396610172226E-6	DEFECT
// line 928	WITHOUT_CLASSIFICATION	0.9999942280566816	WITHOUT_CLASSIFICATION	5.771943318342834E-6	DEFECT
// line 941	WITHOUT_CLASSIFICATION	0.9999930753015909	WITHOUT_CLASSIFICATION	6.924698409103293E-6	DEFECT
// line 947	WITHOUT_CLASSIFICATION	0.9999915342531183	WITHOUT_CLASSIFICATION	8.465746881731286E-6	DEFECT
// line 951	WITHOUT_CLASSIFICATION	0.999993266373889	WITHOUT_CLASSIFICATION	6.733626111148565E-6	DEFECT
// line 955	WITHOUT_CLASSIFICATION	0.999992453705343	WITHOUT_CLASSIFICATION	7.54629465707381E-6	DEFECT
// line 965	WITHOUT_CLASSIFICATION	0.9999912768432431	WITHOUT_CLASSIFICATION	8.723156756966903E-6	DEFECT
// line 969	WITHOUT_CLASSIFICATION	0.9999920158645577	WITHOUT_CLASSIFICATION	7.984135442274212E-6	DEFECT
// line 977	WITHOUT_CLASSIFICATION	0.9999914121831691	WITHOUT_CLASSIFICATION	8.587816830889195E-6	DEFECT
// line 983	WITHOUT_CLASSIFICATION	0.9999936544762412	WITHOUT_CLASSIFICATION	6.34552375872632E-6	DEFECT
// line 1013	WITHOUT_CLASSIFICATION	0.9999937483846776	WITHOUT_CLASSIFICATION	6.251615322405889E-6	DEFECT
// line 1023	WITHOUT_CLASSIFICATION	0.9999942519237031	WITHOUT_CLASSIFICATION	5.748076296821161E-6	DEFECT
// line 1035	WITHOUT_CLASSIFICATION	0.9999936094281267	WITHOUT_CLASSIFICATION	6.390571873390686E-6	DEFECT
// line 1041	WITHOUT_CLASSIFICATION	0.9999935217532943	WITHOUT_CLASSIFICATION	6.4782467057566795E-6	DEFECT
// line 1043	WITHOUT_CLASSIFICATION	0.9999927066015982	WITHOUT_CLASSIFICATION	7.293398401851821E-6	DEFECT
// line 1054	WITHOUT_CLASSIFICATION	0.9999927254912869	WITHOUT_CLASSIFICATION	7.274508712953194E-6	DEFECT
// line 1057	WITHOUT_CLASSIFICATION	0.9999928912567599	WITHOUT_CLASSIFICATION	7.108743240019702E-6	DEFECT
// line 1060	WITHOUT_CLASSIFICATION	0.9999926389785203	WITHOUT_CLASSIFICATION	7.361021479721594E-6	DEFECT
// line 1069	WITHOUT_CLASSIFICATION	0.999992135994694	WITHOUT_CLASSIFICATION	7.86400530596302E-6	DEFECT
// line 1075	WITHOUT_CLASSIFICATION	0.9999920290672291	WITHOUT_CLASSIFICATION	7.970932771010723E-6	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999936113152527	WITHOUT_CLASSIFICATION	6.388684747349114E-6	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999935112825282	WITHOUT_CLASSIFICATION	6.488717471735275E-6	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999933634054422	WITHOUT_CLASSIFICATION	6.636594557765873E-6	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999943739193639	WITHOUT_CLASSIFICATION	5.626080636116341E-6	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999940433223503	WITHOUT_CLASSIFICATION	5.956677649637145E-6	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999934717545348	WITHOUT_CLASSIFICATION	6.52824546511468E-6	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999929191756722	WITHOUT_CLASSIFICATION	7.080824327647212E-6	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.99999302902491	WITHOUT_CLASSIFICATION	6.970975089965055E-6	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999890014220408	WITHOUT_CLASSIFICATION	1.0998577959184348E-5	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999923042922281	WITHOUT_CLASSIFICATION	7.695707771979254E-6	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999916029008086	WITHOUT_CLASSIFICATION	8.397099191388992E-6	DEFECT
// line 1078	WITHOUT_CLASSIFICATION	0.9999943201911277	WITHOUT_CLASSIFICATION	5.67980887230338E-6	DEFECT
// line 1084	WITHOUT_CLASSIFICATION	0.9999940821973855	WITHOUT_CLASSIFICATION	5.917802614448191E-6	DEFECT
// line 1087	WITHOUT_CLASSIFICATION	0.9999942549840821	WITHOUT_CLASSIFICATION	5.74501591786886E-6	DEFECT
// line 1090	WITHOUT_CLASSIFICATION	0.9999941784945795	WITHOUT_CLASSIFICATION	5.821505420591618E-6	DEFECT
// line 1093	WITHOUT_CLASSIFICATION	0.9999932667015575	WITHOUT_CLASSIFICATION	6.733298442401586E-6	DEFECT
// line 1114	WITHOUT_CLASSIFICATION	0.9999926696348408	WITHOUT_CLASSIFICATION	7.330365159135557E-6	DEFECT
// line 1116	WITHOUT_CLASSIFICATION	0.9999924196695147	WITHOUT_CLASSIFICATION	7.580330485237078E-6	DEFECT
// line 1118	WITHOUT_CLASSIFICATION	0.9999946095021833	WITHOUT_CLASSIFICATION	5.3904978167270906E-6	DEFECT
// line 1124	WITHOUT_CLASSIFICATION	0.9999914904675796	WITHOUT_CLASSIFICATION	8.509532420409099E-6	DEFECT
// line 1126	WITHOUT_CLASSIFICATION	0.9999922444886493	WITHOUT_CLASSIFICATION	7.755511350691787E-6	DEFECT
// line 1138	WITHOUT_CLASSIFICATION	0.9999942019081717	WITHOUT_CLASSIFICATION	5.798091828278601E-6	DEFECT
// line 1144	WITHOUT_CLASSIFICATION	0.9999925461361243	WITHOUT_CLASSIFICATION	7.453863875725483E-6	DEFECT
// line 1149	WITHOUT_CLASSIFICATION	0.9999919566770907	WITHOUT_CLASSIFICATION	8.043322909257272E-6	DEFECT
// line 1155	WITHOUT_CLASSIFICATION	0.999992610503164	WITHOUT_CLASSIFICATION	7.38949683600549E-6	DEFECT
// line 1162	WITHOUT_CLASSIFICATION	0.999992960652103	WITHOUT_CLASSIFICATION	7.0393478969631855E-6	DEFECT
// line 1173	WITHOUT_CLASSIFICATION	0.9999925156006553	WITHOUT_CLASSIFICATION	7.484399344643205E-6	DEFECT
// line 1179	WITHOUT_CLASSIFICATION	0.9999922357024248	WITHOUT_CLASSIFICATION	7.764297575278189E-6	DEFECT
// line 1182	WITHOUT_CLASSIFICATION	0.9999949262161486	WITHOUT_CLASSIFICATION	5.073783851356288E-6	DEFECT
// line 1190	WITHOUT_CLASSIFICATION	0.9999939861993987	WITHOUT_CLASSIFICATION	6.013800601250611E-6	DEFECT
// line 1196	WITHOUT_CLASSIFICATION	0.9999916599804809	WITHOUT_CLASSIFICATION	8.3400195192159E-6	DEFECT
// line 1213	WITHOUT_CLASSIFICATION	0.9999924635549757	WITHOUT_CLASSIFICATION	7.536445024309889E-6	DEFECT
// line 1217	WITHOUT_CLASSIFICATION	0.9999920947730642	WITHOUT_CLASSIFICATION	7.905226935844822E-6	DEFECT
// line 1231	WITHOUT_CLASSIFICATION	0.9999931294178581	WITHOUT_CLASSIFICATION	6.870582141895246E-6	DEFECT
// line 1236	WITHOUT_CLASSIFICATION	0.9999918704951146	WITHOUT_CLASSIFICATION	8.129504885294106E-6	DEFECT
// line 1244	WITHOUT_CLASSIFICATION	0.9999899369499162	WITHOUT_CLASSIFICATION	1.0063050083673362E-5	DEFECT
// line 1254	WITHOUT_CLASSIFICATION	0.9999913975167628	WITHOUT_CLASSIFICATION	8.602483237142823E-6	DEFECT
// line 1258	WITHOUT_CLASSIFICATION	0.9999931258995446	WITHOUT_CLASSIFICATION	6.874100455435729E-6	DEFECT
// line 1264	WITHOUT_CLASSIFICATION	0.9999906816584607	WITHOUT_CLASSIFICATION	9.318341539273705E-6	DEFECT
// line 1270	WITHOUT_CLASSIFICATION	0.9999936822930426	WITHOUT_CLASSIFICATION	6.317706957310367E-6	DEFECT
// line 1273	WITHOUT_CLASSIFICATION	0.9999918435165359	WITHOUT_CLASSIFICATION	8.15648346398393E-6	DEFECT
// line 1276	WITHOUT_CLASSIFICATION	0.9999908328232773	WITHOUT_CLASSIFICATION	9.167176722774251E-6	DEFECT
// line 1279	WITHOUT_CLASSIFICATION	0.9999915374655852	WITHOUT_CLASSIFICATION	8.462534414851252E-6	DEFECT
// line 1282	WITHOUT_CLASSIFICATION	0.9999936013178203	WITHOUT_CLASSIFICATION	6.398682179638084E-6	DEFECT
// line 1289	WITHOUT_CLASSIFICATION	0.9999931309007679	WITHOUT_CLASSIFICATION	6.869099232165542E-6	DEFECT
// line 1292	WITHOUT_CLASSIFICATION	0.9999921790920778	WITHOUT_CLASSIFICATION	7.820907922195638E-6	DEFECT
// line 1295	WITHOUT_CLASSIFICATION	0.9999915302280172	WITHOUT_CLASSIFICATION	8.469771982815509E-6	DEFECT
// line 1298	WITHOUT_CLASSIFICATION	0.9999930749452507	WITHOUT_CLASSIFICATION	6.92505474939062E-6	DEFECT
// line 1305	WITHOUT_CLASSIFICATION	0.9999928585674774	WITHOUT_CLASSIFICATION	7.1414325225861645E-6	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999933470938427	WITHOUT_CLASSIFICATION	6.652906157328841E-6	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999936077272402	WITHOUT_CLASSIFICATION	6.392272759796969E-6	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9999931756351926	WITHOUT_CLASSIFICATION	6.824364807425961E-6	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999931030272652	WITHOUT_CLASSIFICATION	6.896972734752925E-6	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999917442970722	WITHOUT_CLASSIFICATION	8.2557029278852E-6	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999932789939758	WITHOUT_CLASSIFICATION	6.721006024205192E-6	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999903319218448	WITHOUT_CLASSIFICATION	9.668078155177335E-6	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999934586185542	WITHOUT_CLASSIFICATION	6.5413814457724645E-6	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999918714878212	WITHOUT_CLASSIFICATION	8.128512178676365E-6	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999927188242898	WITHOUT_CLASSIFICATION	7.281175710126149E-6	DEFECT
// line 1308	WITHOUT_CLASSIFICATION	0.9999941788952541	WITHOUT_CLASSIFICATION	5.821104745950859E-6	DEFECT
// line 1311	WITHOUT_CLASSIFICATION	0.9999935241086072	WITHOUT_CLASSIFICATION	6.475891392807835E-6	DEFECT
// line 1317	WITHOUT_CLASSIFICATION	0.9999927451644041	WITHOUT_CLASSIFICATION	7.254835595875119E-6	DEFECT
// line 1323	WITHOUT_CLASSIFICATION	0.9999933353264298	WITHOUT_CLASSIFICATION	6.664673570294007E-6	DEFECT
// line 1326	WITHOUT_CLASSIFICATION	0.9999926462049471	WITHOUT_CLASSIFICATION	7.353795052961158E-6	DEFECT
// line 1329	WITHOUT_CLASSIFICATION	0.9999932999960687	WITHOUT_CLASSIFICATION	6.700003931237571E-6	DEFECT
// line 1337	WITHOUT_CLASSIFICATION	0.9999927486742624	WITHOUT_CLASSIFICATION	7.251325737704916E-6	DEFECT
// line 1342	WITHOUT_CLASSIFICATION	0.9999929234556049	WITHOUT_CLASSIFICATION	7.076544395048246E-6	DEFECT
// line 1345	WITHOUT_CLASSIFICATION	0.9999918942847253	WITHOUT_CLASSIFICATION	8.10571527475056E-6	DEFECT
// line 1354	WITHOUT_CLASSIFICATION	0.9999918574229085	WITHOUT_CLASSIFICATION	8.142577091436108E-6	DEFECT
// line 1359	WITHOUT_CLASSIFICATION	0.9999922427464005	WITHOUT_CLASSIFICATION	7.75725359948916E-6	DEFECT
// line 1366	WITHOUT_CLASSIFICATION	0.9999921275556737	WITHOUT_CLASSIFICATION	7.872444326346216E-6	DEFECT
// line 1369	WITHOUT_CLASSIFICATION	0.9999916623554809	WITHOUT_CLASSIFICATION	8.337644519070082E-6	DEFECT
// line 1373	WITHOUT_CLASSIFICATION	0.9999922662820441	WITHOUT_CLASSIFICATION	7.733717955986787E-6	DEFECT
// line 1377	WITHOUT_CLASSIFICATION	0.9999926653000369	WITHOUT_CLASSIFICATION	7.334699963001651E-6	DEFECT
// line 1383	WITHOUT_CLASSIFICATION	0.9999936834777075	WITHOUT_CLASSIFICATION	6.3165222924762625E-6	DEFECT
// line 1399	WITHOUT_CLASSIFICATION	0.9999917583360154	WITHOUT_CLASSIFICATION	8.241663984618418E-6	DEFECT
// line 1401	WITHOUT_CLASSIFICATION	0.9999931086464898	WITHOUT_CLASSIFICATION	6.891353510167732E-6	DEFECT
// line 1406	WITHOUT_CLASSIFICATION	0.9999916505615226	WITHOUT_CLASSIFICATION	8.349438477399948E-6	DEFECT
// line 1417	WITHOUT_CLASSIFICATION	0.9999916634874869	WITHOUT_CLASSIFICATION	8.336512513013128E-6	DEFECT
// line 1424	WITHOUT_CLASSIFICATION	0.9999922413696466	WITHOUT_CLASSIFICATION	7.758630353376536E-6	DEFECT
// line 1427	WITHOUT_CLASSIFICATION	0.9999921277174367	WITHOUT_CLASSIFICATION	7.872282563341413E-6	DEFECT
// line 1430	WITHOUT_CLASSIFICATION	0.9999925020565709	WITHOUT_CLASSIFICATION	7.49794342911395E-6	DEFECT
// line 1433	WITHOUT_CLASSIFICATION	0.9999915194574327	WITHOUT_CLASSIFICATION	8.480542567293607E-6	DEFECT
// line 1436	WITHOUT_CLASSIFICATION	0.9999905934509166	WITHOUT_CLASSIFICATION	9.406549083353508E-6	DEFECT
// line 1442	WITHOUT_CLASSIFICATION	0.9999926638476726	WITHOUT_CLASSIFICATION	7.3361523274482995E-6	DEFECT
// line 1445	WITHOUT_CLASSIFICATION	0.9999915490336808	WITHOUT_CLASSIFICATION	8.450966319122102E-6	DEFECT
// line 1458	WITHOUT_CLASSIFICATION	0.999992575618277	WITHOUT_CLASSIFICATION	7.4243817230433676E-6	DEFECT
// line 1464	WITHOUT_CLASSIFICATION	0.9999911616006828	WITHOUT_CLASSIFICATION	8.838399317219763E-6	DEFECT
// line 1489	WITHOUT_CLASSIFICATION	0.9999926819902322	WITHOUT_CLASSIFICATION	7.318009767902127E-6	DEFECT
// line 1493	WITHOUT_CLASSIFICATION	0.99999134302811	WITHOUT_CLASSIFICATION	8.656971890029684E-6	DEFECT
// line 1507	WITHOUT_CLASSIFICATION	0.9999925346938774	WITHOUT_CLASSIFICATION	7.465306122609774E-6	DEFECT
// line 1519	WITHOUT_CLASSIFICATION	0.99999175342182	WITHOUT_CLASSIFICATION	8.246578180115627E-6	DEFECT
// line 1532	WITHOUT_CLASSIFICATION	0.9999928984633358	WITHOUT_CLASSIFICATION	7.101536664093716E-6	DEFECT
// line 1538	WITHOUT_CLASSIFICATION	0.9999932989651221	WITHOUT_CLASSIFICATION	6.7010348778340954E-6	DEFECT
// line 1542	WITHOUT_CLASSIFICATION	0.9999918273452252	WITHOUT_CLASSIFICATION	8.172654774895117E-6	DEFECT
// line 1557	WITHOUT_CLASSIFICATION	0.9999916241934399	WITHOUT_CLASSIFICATION	8.375806560045838E-6	DEFECT
// line 1573	WITHOUT_CLASSIFICATION	0.9999913479885699	WITHOUT_CLASSIFICATION	8.652011430054334E-6	DEFECT
// line 1591	WITHOUT_CLASSIFICATION	0.9999918502173218	WITHOUT_CLASSIFICATION	8.14978267817273E-6	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999912312823735	WITHOUT_CLASSIFICATION	8.768717626363578E-6	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999924082393256	WITHOUT_CLASSIFICATION	7.591760674482771E-6	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999927405227285	WITHOUT_CLASSIFICATION	7.259477271617381E-6	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999926302713655	WITHOUT_CLASSIFICATION	7.369728634410041E-6	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.999991364549345	WITHOUT_CLASSIFICATION	8.635450654914991E-6	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9999925569704311	WITHOUT_CLASSIFICATION	7.4430295689074826E-6	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999921107345686	WITHOUT_CLASSIFICATION	7.88926543129921E-6	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999910300234974	WITHOUT_CLASSIFICATION	8.96997650258174E-6	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.999994294687716	WITHOUT_CLASSIFICATION	5.705312283963501E-6	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999948485050942	WITHOUT_CLASSIFICATION	5.151494905753104E-6	DEFECT
// line 1607	WITHOUT_CLASSIFICATION	0.999991314965471	WITHOUT_CLASSIFICATION	8.685034528970927E-6	DEFECT
// line 1610	WITHOUT_CLASSIFICATION	0.9999937648299025	WITHOUT_CLASSIFICATION	6.235170097384877E-6	DEFECT
// line 1622	WITHOUT_CLASSIFICATION	0.9999927642986038	WITHOUT_CLASSIFICATION	7.235701396248116E-6	DEFECT
// line 1625	WITHOUT_CLASSIFICATION	0.9999922544129808	WITHOUT_CLASSIFICATION	7.74558701914115E-6	DEFECT
// line 1636	WITHOUT_CLASSIFICATION	0.999992179780629	WITHOUT_CLASSIFICATION	7.820219370976542E-6	DEFECT
// line 1639	WITHOUT_CLASSIFICATION	0.9999917388909398	WITHOUT_CLASSIFICATION	8.261109060141464E-6	DEFECT
// line 1647	WITHOUT_CLASSIFICATION	0.9999904959092852	WITHOUT_CLASSIFICATION	9.50409071471965E-6	DEFECT
// line 1651	WITHOUT_CLASSIFICATION	0.9999914814933204	WITHOUT_CLASSIFICATION	8.518506679538272E-6	DEFECT
// line 1657	WITHOUT_CLASSIFICATION	0.9999906961445343	WITHOUT_CLASSIFICATION	9.303855465637068E-6	DEFECT
// line 1660	WITHOUT_CLASSIFICATION	0.9999926934319474	WITHOUT_CLASSIFICATION	7.306568052651955E-6	DEFECT
// line 1663	WITHOUT_CLASSIFICATION	0.9999917920452573	WITHOUT_CLASSIFICATION	8.20795474264574E-6	DEFECT
// line 1678	WITHOUT_CLASSIFICATION	0.999992433606861	WITHOUT_CLASSIFICATION	7.566393138932181E-6	DEFECT
// line 1702	WITHOUT_CLASSIFICATION	0.9999937081741299	WITHOUT_CLASSIFICATION	6.291825869973877E-6	DEFECT
// line 1711	WITHOUT_CLASSIFICATION	0.9999927528158059	WITHOUT_CLASSIFICATION	7.247184194113323E-6	DEFECT
// line 1719	WITHOUT_CLASSIFICATION	0.9999920380662016	WITHOUT_CLASSIFICATION	7.961933798325723E-6	DEFECT
// line 1722	WITHOUT_CLASSIFICATION	0.9999930318170877	WITHOUT_CLASSIFICATION	6.96818291236292E-6	DEFECT
// line 1731	WITHOUT_CLASSIFICATION	0.9999928358404329	WITHOUT_CLASSIFICATION	7.164159567142465E-6	DEFECT
// line 1734	WITHOUT_CLASSIFICATION	0.9999919672019421	WITHOUT_CLASSIFICATION	8.032798057839585E-6	DEFECT
// line 1738	WITHOUT_CLASSIFICATION	0.999993526313201	WITHOUT_CLASSIFICATION	6.47368679894737E-6	DEFECT
// line 1746	WITHOUT_CLASSIFICATION	0.9999902829524864	WITHOUT_CLASSIFICATION	9.717047513634829E-6	DEFECT
// line 1756	WITHOUT_CLASSIFICATION	0.99998624329423	WITHOUT_CLASSIFICATION	1.3756705769951174E-5	DEFECT
// line 1758	WITHOUT_CLASSIFICATION	0.9999918104241734	WITHOUT_CLASSIFICATION	8.189575826583051E-6	DEFECT
// line 1761	WITHOUT_CLASSIFICATION	0.9999914355829997	WITHOUT_CLASSIFICATION	8.564417000230729E-6	DEFECT
// line 1767	WITHOUT_CLASSIFICATION	0.9999913048539576	WITHOUT_CLASSIFICATION	8.695146042434169E-6	DEFECT
// line 1776	WITHOUT_CLASSIFICATION	0.999991265135715	WITHOUT_CLASSIFICATION	8.734864285061515E-6	DEFECT
// line 1782	WITHOUT_CLASSIFICATION	0.9999938537107439	WITHOUT_CLASSIFICATION	6.1462892560459E-6	DEFECT
// line 1785	WITHOUT_CLASSIFICATION	0.9999928190293874	WITHOUT_CLASSIFICATION	7.1809706126216706E-6	DEFECT
// line 1788	WITHOUT_CLASSIFICATION	0.9999933458006605	WITHOUT_CLASSIFICATION	6.654199339540883E-6	DEFECT
// line 1791	WITHOUT_CLASSIFICATION	0.999991990779898	WITHOUT_CLASSIFICATION	8.009220102101588E-6	DEFECT
// line 1797	WITHOUT_CLASSIFICATION	0.9999908015965537	WITHOUT_CLASSIFICATION	9.198403446368877E-6	DEFECT
// line 1800	WITHOUT_CLASSIFICATION	0.9999957815643457	WITHOUT_CLASSIFICATION	4.2184356543468076E-6	DEFECT
// line 1803	WITHOUT_CLASSIFICATION	0.9999948583503318	WITHOUT_CLASSIFICATION	5.141649668236324E-6	DEFECT
// line 1806	WITHOUT_CLASSIFICATION	0.9999938465798431	WITHOUT_CLASSIFICATION	6.153420156853393E-6	DEFECT
// line 1809	WITHOUT_CLASSIFICATION	0.9999946126276813	WITHOUT_CLASSIFICATION	5.387372318621231E-6	DEFECT
// line 1815	WITHOUT_CLASSIFICATION	0.9999937861971078	WITHOUT_CLASSIFICATION	6.213802892159936E-6	DEFECT
// line 1825	WITHOUT_CLASSIFICATION	0.9999944429982514	WITHOUT_CLASSIFICATION	5.557001748567342E-6	DEFECT
// line 1828	WITHOUT_CLASSIFICATION	0.9999947306550134	WITHOUT_CLASSIFICATION	5.269344986510971E-6	DEFECT
// line 1831	WITHOUT_CLASSIFICATION	0.999994634085987	WITHOUT_CLASSIFICATION	5.3659140129959855E-6	DEFECT
// line 1847	WITHOUT_CLASSIFICATION	0.9999932004495264	WITHOUT_CLASSIFICATION	6.799550473571704E-6	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9999684923204124	WITHOUT_CLASSIFICATION	3.150767958759483E-5	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9999608513304002	WITHOUT_CLASSIFICATION	3.914866959982736E-5	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9999958923137059	WITHOUT_CLASSIFICATION	4.107686294085377E-6	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9999871496220407	WITHOUT_CLASSIFICATION	1.2850377959244776E-5	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9999815526542285	WITHOUT_CLASSIFICATION	1.8447345771430122E-5	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9999360689690642	WITHOUT_CLASSIFICATION	6.393103093578502E-5	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9999913323440128	WITHOUT_CLASSIFICATION	8.667655987110438E-6	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999122550850189	WITHOUT_CLASSIFICATION	8.774491498110029E-5	DEFECT
// line 1854	WITHOUT_CLASSIFICATION	0.9999932540772449	WITHOUT_CLASSIFICATION	6.745922755108126E-6	DEFECT
// line 1869	WITHOUT_CLASSIFICATION	0.9999930759866915	WITHOUT_CLASSIFICATION	6.924013308415506E-6	DEFECT
// line 1872	WITHOUT_CLASSIFICATION	0.9999943375210065	WITHOUT_CLASSIFICATION	5.662478993436185E-6	DEFECT
// line 1877	WITHOUT_CLASSIFICATION	0.999993925633616	WITHOUT_CLASSIFICATION	6.074366383980971E-6	DEFECT
// line 1886	WITHOUT_CLASSIFICATION	0.9999934602553752	WITHOUT_CLASSIFICATION	6.539744624782752E-6	DEFECT
// line 1898	WITHOUT_CLASSIFICATION	0.9999938867278652	WITHOUT_CLASSIFICATION	6.11327213483111E-6	DEFECT
// line 1902	WITHOUT_CLASSIFICATION	0.9999934824444832	WITHOUT_CLASSIFICATION	6.517555516763271E-6	DEFECT
// line 1905	WITHOUT_CLASSIFICATION	0.9999923646877378	WITHOUT_CLASSIFICATION	7.635312262268948E-6	DEFECT
// line 1911	WITHOUT_CLASSIFICATION	0.9999927648541357	WITHOUT_CLASSIFICATION	7.23514586422039E-6	DEFECT
// line 1918	WITHOUT_CLASSIFICATION	0.9999939013865139	WITHOUT_CLASSIFICATION	6.098613486108193E-6	DEFECT
// line 1935	WITHOUT_CLASSIFICATION	0.9999920254914862	WITHOUT_CLASSIFICATION	7.974508513786198E-6	DEFECT
// line 1938	WITHOUT_CLASSIFICATION	0.9999935330694177	WITHOUT_CLASSIFICATION	6.46693058230216E-6	DEFECT
// line 1942	WITHOUT_CLASSIFICATION	0.999992121118996	WITHOUT_CLASSIFICATION	7.87888100401264E-6	DEFECT
// line 1948	WITHOUT_CLASSIFICATION	0.9999925911246482	WITHOUT_CLASSIFICATION	7.408875351701589E-6	DEFECT
// line 1960	WITHOUT_CLASSIFICATION	0.9999921281842707	WITHOUT_CLASSIFICATION	7.87181572935409E-6	DEFECT
// line 1963	WITHOUT_CLASSIFICATION	0.9999911568977098	WITHOUT_CLASSIFICATION	8.843102290170219E-6	DEFECT
// line 1968	WITHOUT_CLASSIFICATION	0.9999924148187254	WITHOUT_CLASSIFICATION	7.585181274644115E-6	DEFECT
// line 1972	WITHOUT_CLASSIFICATION	0.9999914649379446	WITHOUT_CLASSIFICATION	8.535062055517353E-6	DEFECT
// line 1982	WITHOUT_CLASSIFICATION	0.9999938546464453	WITHOUT_CLASSIFICATION	6.145353554688409E-6	DEFECT
// line 1995	WITHOUT_CLASSIFICATION	0.9999907728500866	WITHOUT_CLASSIFICATION	9.22714991332216E-6	DEFECT
// line 2000	WITHOUT_CLASSIFICATION	0.9999960191492087	WITHOUT_CLASSIFICATION	3.980850791353631E-6	DEFECT
// line 2006	WITHOUT_CLASSIFICATION	0.9999943212993716	WITHOUT_CLASSIFICATION	5.678700628479228E-6	DEFECT
// line 2010	WITHOUT_CLASSIFICATION	0.999996124940037	WITHOUT_CLASSIFICATION	3.8750599629934026E-6	DEFECT
/* We may need to subtract addition offset off of first */	WITHOUT_CLASSIFICATION	0.9999978832394325	WITHOUT_CLASSIFICATION	2.1167605674668054E-6	DEFECT
/* string fragment (we optimistically take one off in*/	WITHOUT_CLASSIFICATION	0.9999821888783792	WITHOUT_CLASSIFICATION	1.781112162072604E-5	DEFECT
/* ParserSupport.literal_concat).  Check token length*/	WITHOUT_CLASSIFICATION	0.9999919721037405	WITHOUT_CLASSIFICATION	8.027896259445152E-6	DEFECT
/* and subtract as neeeded.*/	WITHOUT_CLASSIFICATION	0.9999976486059975	WITHOUT_CLASSIFICATION	2.3513940024203334E-6	DEFECT
/*                    $$ = new ArgAuxiliaryNode($1.getPosition(), (String) $1.getValue(), 1);  */	WITHOUT_CLASSIFICATION	0.9999981187731977	WITHOUT_CLASSIFICATION	1.8812268023826991E-6	DEFECT
/* ENEBO: arg surrounded by in_defined set/unset*/	WITHOUT_CLASSIFICATION	0.9999452918509745	WITHOUT_CLASSIFICATION	5.4708149025525405E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.99999722451727	WITHOUT_CLASSIFICATION	2.775482730077964E-6	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9999959330953566	WITHOUT_CLASSIFICATION	4.066904643386768E-6	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999993275681027	WITHOUT_CLASSIFICATION	6.724318972998849E-7	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999993275681027	WITHOUT_CLASSIFICATION	6.724318972998849E-7	DEFECT
/* ENEBO: Removed !compile_for_eval which probably is to reduce warnings*/	WITHOUT_CLASSIFICATION	0.9999614866437634	WITHOUT_CLASSIFICATION	3.851335623659854E-5	DEFECT
/* was $$ = null;*/	WITHOUT_CLASSIFICATION	0.9999948458840107	WITHOUT_CLASSIFICATION	5.154115989390822E-6	DEFECT
// line 2019 "Ruby19Parser.y"	WITHOUT_CLASSIFICATION	0.9999956567431402	WITHOUT_CLASSIFICATION	4.343256859772896E-6	DEFECT
// line 8143 "-"	WITHOUT_CLASSIFICATION	0.9999968561956263	WITHOUT_CLASSIFICATION	3.143804373780101E-6	DEFECT
// we know variables cannot be null since localstaticscope will create a 0 length one.	WITHOUT_CLASSIFICATION	0.9999948643208028	WITHOUT_CLASSIFICATION	5.1356791972773606E-6	DEFECT
// No bit math to store level since we know level is zero for this case	WITHOUT_CLASSIFICATION	0.9999700893090834	WITHOUT_CLASSIFICATION	2.9910690916530422E-5	DEFECT
// Next immediate scope.  Variable and constant scoping rules make use of this variable // in different ways.	WITHOUT_CLASSIFICATION	0.9999980711597185	WITHOUT_CLASSIFICATION	1.928840281575484E-6	DEFECT
// Live reference to module	WITHOUT_CLASSIFICATION	0.9999974768722211	WITHOUT_CLASSIFICATION	2.5231277789924187E-6	DEFECT
// Next CRef down the lexical structure	WITHOUT_CLASSIFICATION	0.9999997295333054	WITHOUT_CLASSIFICATION	2.704666946313373E-7	DEFECT
// Our name holder (offsets are assigned as variables are added	WITHOUT_CLASSIFICATION	0.9999968248482518	WITHOUT_CLASSIFICATION	3.175151748305129E-6	DEFECT
// number of variables in this scope representing required arguments	WITHOUT_CLASSIFICATION	0.9999998855053059	WITHOUT_CLASSIFICATION	1.1449469406835747E-7	DEFECT
// number of variables in this scope representing optional arguments	WITHOUT_CLASSIFICATION	0.9999995825192284	WITHOUT_CLASSIFICATION	4.1748077158951174E-7	DEFECT
// index of variable that represents a "rest" arg	WITHOUT_CLASSIFICATION	0.999999317400013	WITHOUT_CLASSIFICATION	6.825999869519825E-7	DEFECT
// Note that this object equality check is intentional, to ensure // the string and its interned version are the same object.	WITHOUT_CLASSIFICATION	0.9999789586724562	WITHOUT_CLASSIFICATION	2.1041327543769174E-5	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999964681535284	WITHOUT_CLASSIFICATION	3.531846471661639E-6	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999964681535284	WITHOUT_CLASSIFICATION	3.531846471661639E-6	DEFECT
/* Note: Only used by compiler until it can use getConstant again or use some other refactoring */	WITHOUT_CLASSIFICATION	0.999995362564592	WITHOUT_CLASSIFICATION	4.6374354080136715E-6	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9999982230878242	WITHOUT_CLASSIFICATION	1.776912175821288E-6	DEFECT
/* Try and unload the autoload specified from internedName */	WITHOUT_CLASSIFICATION	0.9999995691664979	WITHOUT_CLASSIFICATION	4.3083350217581577E-7	DEFECT
// We override that the logic which uses this	WITHOUT_CLASSIFICATION	0.9999993903452571	WITHOUT_CLASSIFICATION	6.096547429510073E-7	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999936872464569	WITHOUT_CLASSIFICATION	6.312753543129165E-6	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999993257939519	WITHOUT_CLASSIFICATION	6.742060481069031E-7	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999996728147934	WITHOUT_CLASSIFICATION	3.2718520660357046E-7	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999993257939519	WITHOUT_CLASSIFICATION	6.742060481069031E-7	DEFECT
// . Array given to rest should pass itself // . Array with rest + other args should extract array // . Array with multiple values and NO rest should extract args if there are more than one argument	WITHOUT_CLASSIFICATION	0.9999998682209026	WITHOUT_CLASSIFICATION	1.31779097436161E-7	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999948574603845	WITHOUT_CLASSIFICATION	5.142539615513627E-6	DEFECT
// Is this thread currently with in a function trace?	WITHOUT_CLASSIFICATION	0.9998291770625268	WITHOUT_CLASSIFICATION	1.7082293747312902E-4	DEFECT
// Is this thread currently doing an defined? defined should set things like $!	WITHOUT_CLASSIFICATION	0.9986734780547529	WITHOUT_CLASSIFICATION	0.0013265219452469718	DEFECT
//private UnsynchronizedStack parentStack;	WITHOUT_CLASSIFICATION	0.9999943409917459	WITHOUT_CLASSIFICATION	5.659008254059262E-6	DEFECT
//private UnsynchronizedStack frameStack;	WITHOUT_CLASSIFICATION	0.999991441869299	WITHOUT_CLASSIFICATION	8.55813070093409E-6	DEFECT
// List of active dynamic scopes.  Each of these may have captured other dynamic scopes // to implement closures.	WITHOUT_CLASSIFICATION	0.9999995093545611	WITHOUT_CLASSIFICATION	4.906454389293822E-7	DEFECT
// File where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.999996704839625	WITHOUT_CLASSIFICATION	3.295160374904303E-6	DEFECT
// Line where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999992486655827	WITHOUT_CLASSIFICATION	7.513344173847856E-7	DEFECT
// In certain places, like grep, we don't use real frames for the // call blocks. This has the effect of not setting the backref in // the correct frame - this delta is activated to the place where // the grep is running in so that the backref will be set in an // appropriate place.	WITHOUT_CLASSIFICATION	0.9958892054945652	WITHOUT_CLASSIFICATION	0.004110794505434865	DEFECT
// TOPLEVEL self and a few others want a top-level scope.  We create this one right // away and then pass it into top-level parse so it ends up being the top level.	WITHOUT_CLASSIFICATION	0.9999994793375008	WITHOUT_CLASSIFICATION	5.206624991805981E-7	DEFECT
//////////////////// CATCH MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9999708977755729	WITHOUT_CLASSIFICATION	2.9102224427115574E-5	DEFECT
//////////////////// FRAME MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9999015269673032	WITHOUT_CLASSIFICATION	9.847303269693474E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999169207175841	WITHOUT_CLASSIFICATION	8.307928241595066E-5	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999955845186383	WITHOUT_CLASSIFICATION	4.41548136163981E-6	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999955845186383	WITHOUT_CLASSIFICATION	4.41548136163981E-6	DEFECT
// look for mangling markers for compiled Ruby in method name	WITHOUT_CLASSIFICATION	0.9999974583204164	WITHOUT_CLASSIFICATION	2.541679583638714E-6	DEFECT
// if it's not a rescue or ensure, there's a frame associated, so decrement	WITHOUT_CLASSIFICATION	0.999998708024292	WITHOUT_CLASSIFICATION	1.2919757079418758E-6	DEFECT
// look for __file__ method name for compiled roots	WITHOUT_CLASSIFICATION	0.9999985301684008	WITHOUT_CLASSIFICATION	1.4698315991588753E-6	DEFECT
// All entries following removed node can stay // in list, but all preceding ones need to be // cloned.	WITHOUT_CLASSIFICATION	0.9999813577558284	WITHOUT_CLASSIFICATION	1.8642244171599327E-5	DEFECT
// required and optional only	WITHOUT_CLASSIFICATION	0.9999996754516596	WITHOUT_CLASSIFICATION	3.2454834042574257E-7	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999993257939519	WITHOUT_CLASSIFICATION	6.742060481069031E-7	DEFECT
// look for mangling markers for bound, unframed methods in class name	WITHOUT_CLASSIFICATION	0.9999997902586766	WITHOUT_CLASSIFICATION	2.0974132340948853E-7	DEFECT
// set the binding's frame's "previous" file and line to current, so // trace will show who called the block	WITHOUT_CLASSIFICATION	0.9999979647868331	WITHOUT_CLASSIFICATION	2.035213166802151E-6	DEFECT
// framed invokers will have Ruby frames associated with them	WITHOUT_CLASSIFICATION	0.9999967702574646	WITHOUT_CLASSIFICATION	3.2297425353552194E-6	DEFECT
// look for mangling markers for bound, framed methods in class name	WITHOUT_CLASSIFICATION	0.9999997360444833	WITHOUT_CLASSIFICATION	2.6395551664054127E-7	DEFECT
// unframed invokers have no Ruby frames, so pull from class name // but use current frame as file and line	WITHOUT_CLASSIFICATION	0.9999994931600628	WITHOUT_CLASSIFICATION	5.068399372542792E-7	DEFECT
// try to mine out a Ruby frame using our list of interpreter entry-point markers	WITHOUT_CLASSIFICATION	0.9999999698019785	WITHOUT_CLASSIFICATION	3.019802147365969E-8	DEFECT
// Frame matches one of our markers for "interpreted" calls	WITHOUT_CLASSIFICATION	0.9999996764342828	WITHOUT_CLASSIFICATION	3.2356571716943084E-7	DEFECT
// Frame is extraneous runtime information, skip it unless debug	WITHOUT_CLASSIFICATION	0.9999987094204876	WITHOUT_CLASSIFICATION	1.2905795124460655E-6	DEFECT
/*     * Determine what sort of assigner should be used for the provided 'iter' (e.g. block).     * Assigner provides just the right logic for assigning values to local parameters of the     * block.     *     * This method also has a second optimization which is to set 'noargblock' in the case that     * the block is a block which accepts no arguments.  The primary reason for this second     * optimization is that in the case of a yield with a RubyArray we will bypass some logic     * processing the RubyArray into a proper form (only to then not do anythign with it).  A     * secondary benefit is that a simple boolean seems to optimize by hotspot much faster     * than the zero arg assigner.     */	WITHOUT_CLASSIFICATION	0.9999986128957674	WITHOUT_CLASSIFICATION	1.3871042324865198E-6	DEFECT
// new scope for this invocation of the block, based on parent scope	WITHOUT_CLASSIFICATION	0.9999986804310619	WITHOUT_CLASSIFICATION	1.3195689380960116E-6	DEFECT
// No argument blocks	WITHOUT_CLASSIFICATION	0.9999969433148175	WITHOUT_CLASSIFICATION	3.0566851825410636E-6	DEFECT
// just push the same empty scope, since we won't use one	WITHOUT_CLASSIFICATION	0.9999952445290078	WITHOUT_CLASSIFICATION	4.755470992237757E-6	DEFECT
// Not sure if this is actually possible, but better safe than sorry	WITHOUT_CLASSIFICATION	0.9996391166277292	WITHOUT_CLASSIFICATION	3.608833722708161E-4	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999909146257354	WITHOUT_CLASSIFICATION	9.085374264480264E-6	DEFECT
// This should only be called by 1.8 (1.9 subclasses this to handle unusedBlock).	WITHOUT_CLASSIFICATION	0.999961718253964	WITHOUT_CLASSIFICATION	3.828174603608786E-5	DEFECT
// Highest reserved id	WITHOUT_CLASSIFICATION	0.9999954193696059	WITHOUT_CLASSIFICATION	4.58063039403301E-6	DEFECT
// binary typed calls	WITHOUT_CLASSIFICATION	0.9999895701737621	WITHOUT_CLASSIFICATION	1.0429826237861913E-5	DEFECT
// id must always be even	WITHOUT_CLASSIFICATION	0.9999623510020971	WITHOUT_CLASSIFICATION	3.764899790290893E-5	DEFECT
// with block pass	WITHOUT_CLASSIFICATION	0.9999975918583824	WITHOUT_CLASSIFICATION	2.4081416175650916E-6	DEFECT
// no block	WITHOUT_CLASSIFICATION	0.9999925988022377	WITHOUT_CLASSIFICATION	7.40119776240833E-6	DEFECT
// with block literal (iter)	WITHOUT_CLASSIFICATION	0.9999938007286537	WITHOUT_CLASSIFICATION	6.1992713462620425E-6	DEFECT
//            assert false : "can this happen?";	WITHOUT_CLASSIFICATION	0.9996514046750458	WITHOUT_CLASSIFICATION	3.48595324954244E-4	DEFECT
// if we have multiple asgn with just *args, need a special type for that	WITHOUT_CLASSIFICATION	0.9999990411477993	WITHOUT_CLASSIFICATION	9.5885220076099E-7	DEFECT
// && args.getMaxArgumentsCount() != 1) {	WITHOUT_CLASSIFICATION	0.9999943365382467	WITHOUT_CLASSIFICATION	5.663461753398604E-6	DEFECT
//            return warnMultiReturnNil(ruby);	WITHOUT_CLASSIFICATION	0.9999971661482513	WITHOUT_CLASSIFICATION	2.8338517486828394E-6	DEFECT
// ensure zero is devoted to no method name	WITHOUT_CLASSIFICATION	0.999994841153757	WITHOUT_CLASSIFICATION	5.158846242864632E-6	DEFECT
// predefine a few other methods we invoke directly elsewhere	WITHOUT_CLASSIFICATION	0.9999982186963744	WITHOUT_CLASSIFICATION	1.7813036255820973E-6	DEFECT
// fast and safe respond_to? call site logic	WITHOUT_CLASSIFICATION	0.9999997833190779	WITHOUT_CLASSIFICATION	2.1668092205105741E-7	DEFECT
// Static scoping information for this scope	WITHOUT_CLASSIFICATION	0.9999601574471677	WITHOUT_CLASSIFICATION	3.984255283222017E-5	DEFECT
// Captured dynamic scopes	WITHOUT_CLASSIFICATION	0.9999982217008726	WITHOUT_CLASSIFICATION	1.7782991273900535E-6	DEFECT
// Backref for $~, $1, etc	WITHOUT_CLASSIFICATION	0.9999906623234556	WITHOUT_CLASSIFICATION	9.337676544432319E-6	DEFECT
// Lastline	WITHOUT_CLASSIFICATION	0.9999982627920971	WITHOUT_CLASSIFICATION	1.7372079028749824E-6	DEFECT
// No binding scope so we should create one	WITHOUT_CLASSIFICATION	0.9999945944645585	WITHOUT_CLASSIFICATION	5.405535441432917E-6	DEFECT
// bindings scopes must always be ManyVars scopes since evals can grow them	WITHOUT_CLASSIFICATION	0.9999977655717845	WITHOUT_CLASSIFICATION	2.2344282154651178E-6	DEFECT
// Helper function to give a good view of current dynamic scope with captured scopes	WITHOUT_CLASSIFICATION	0.9999999100474215	WITHOUT_CLASSIFICATION	8.995257850408654E-8	DEFECT
// try count specific args to determine required	WITHOUT_CLASSIFICATION	0.9999998016142476	WITHOUT_CLASSIFICATION	1.9838575249125107E-7	DEFECT
// Some helper functions:	WITHOUT_CLASSIFICATION	0.9999981466881376	WITHOUT_CLASSIFICATION	1.85331186243493E-6	DEFECT
// silently ignore	WITHOUT_CLASSIFICATION	0.9999990658787904	WITHOUT_CLASSIFICATION	9.341212096027706E-7	DEFECT
// used by compiler	WITHOUT_CLASSIFICATION	0.9999969834516825	WITHOUT_CLASSIFICATION	3.0165483174665695E-6	DEFECT
// initialize the static settings to determine which factory to use	WITHOUT_CLASSIFICATION	0.9999987236492547	WITHOUT_CLASSIFICATION	1.276350745347811E-6	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999122550850189	WITHOUT_CLASSIFICATION	8.774491498110029E-5	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9999705993744485	WITHOUT_CLASSIFICATION	2.9400625551423425E-5	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999804751740423	WITHOUT_CLASSIFICATION	1.9524825957679572E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999983205169373	WITHOUT_CLASSIFICATION	1.6794830628296384E-6	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999986998127786	WITHOUT_CLASSIFICATION	1.30018722143783E-6	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999948574603845	WITHOUT_CLASSIFICATION	5.142539615513627E-6	DEFECT
// Note: In Ruby 1.9 all of this logic can go away since they will require explicit // bindings for evals.	WITHOUT_CLASSIFICATION	0.9999976032950612	WITHOUT_CLASSIFICATION	2.3967049389043065E-6	DEFECT
// We only define one special dynamic scope per 'logical' binding.  So all bindings for // the same scope should share the same dynamic scope.  This allows multiple evals with // different different bindings in the same scope to see the same stuff.	WITHOUT_CLASSIFICATION	0.999997762151666	WITHOUT_CLASSIFICATION	2.2378483339978407E-6	DEFECT
// If the next scope out has the same binding scope as this scope it means // we are evaling within an eval and in that case we should be sharing the same // binding scope.	WITHOUT_CLASSIFICATION	0.9999836595105621	WITHOUT_CLASSIFICATION	1.6340489437912195E-5	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999999161478208	WITHOUT_CLASSIFICATION	8.38521792969733E-8	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999999161478208	WITHOUT_CLASSIFICATION	8.38521792969733E-8	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999992472634444	WITHOUT_CLASSIFICATION	7.527365556201957E-7	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999992472634444	WITHOUT_CLASSIFICATION	7.527365556201957E-7	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999992472634444	WITHOUT_CLASSIFICATION	7.527365556201957E-7	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999982874073994	WITHOUT_CLASSIFICATION	1.7125926005372965E-6	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999982874073994	WITHOUT_CLASSIFICATION	1.7125926005372965E-6	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999979015748276	WITHOUT_CLASSIFICATION	2.098425172479414E-6	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999979015748276	WITHOUT_CLASSIFICATION	2.098425172479414E-6	DEFECT
/*     * This is the proper behavior for all non-expanded assigners which have a pre > 0.  The rest     * override this.     */	WITHOUT_CLASSIFICATION	0.9999994098720956	WITHOUT_CLASSIFICATION	5.901279044242824E-7	DEFECT
/*     * This is the proper behavior for all non-expanded assigners.     */	WITHOUT_CLASSIFICATION	0.9999991760179568	WITHOUT_CLASSIFICATION	8.239820432291862E-7	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999630896500169	WITHOUT_CLASSIFICATION	3.691034998297733E-5	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999630896500169	WITHOUT_CLASSIFICATION	3.691034998297733E-5	DEFECT
// MUST be called from synchronized/locked block! // should only be called by variableTableStore/variableTableFastStore	WITHOUT_CLASSIFICATION	0.9999889180259777	WITHOUT_CLASSIFICATION	1.1081974022261427E-5	DEFECT
// retrieve method // module // name	WITHOUT_CLASSIFICATION	0.9999963574053059	WITHOUT_CLASSIFICATION	3.6425946941711406E-6	DEFECT
// call is ok, punch it!	WITHOUT_CLASSIFICATION	0.9999976663420775	WITHOUT_CLASSIFICATION	2.3336579224838644E-6	DEFECT
// if undefined, branch to method_missing	WITHOUT_CLASSIFICATION	0.999999422514269	WITHOUT_CLASSIFICATION	5.774857309987117E-7	DEFECT
// if we're not attempting to invoke method_missing and method is not visible, branch to method_missing	WITHOUT_CLASSIFICATION	0.9999977140883506	WITHOUT_CLASSIFICATION	2.285911649362759E-6	DEFECT
// method object already present, push various args // tc // self // klazz // name	WITHOUT_CLASSIFICATION	0.9999982355630944	WITHOUT_CLASSIFICATION	1.7644369056621129E-6	DEFECT
// if it's method_missing, just invoke it	WITHOUT_CLASSIFICATION	0.9999984903606328	WITHOUT_CLASSIFICATION	1.5096393671825833E-6	DEFECT
// invoke callMethodMissing	WITHOUT_CLASSIFICATION	0.9999902805678819	WITHOUT_CLASSIFICATION	9.719432118045952E-6	DEFECT
// caller	WITHOUT_CLASSIFICATION	0.9999980890844234	WITHOUT_CLASSIFICATION	1.9109155764336736E-6	DEFECT
// calltype // block	WITHOUT_CLASSIFICATION	0.9999918180106115	WITHOUT_CLASSIFICATION	8.181989388490386E-6	DEFECT
// if no exception raised, jump to end to leave result on stack for return	WITHOUT_CLASSIFICATION	0.9999986141257818	WITHOUT_CLASSIFICATION	1.385874218103189E-6	DEFECT
// load arity for check	WITHOUT_CLASSIFICATION	0.9999910303305184	WITHOUT_CLASSIFICATION	8.969669481625489E-6	DEFECT
// throw	WITHOUT_CLASSIFICATION	0.9999923367101322	WITHOUT_CLASSIFICATION	7.663289867870742E-6	DEFECT
// load arity for error	WITHOUT_CLASSIFICATION	0.9999417708421139	WITHOUT_CLASSIFICATION	5.822915788615881E-5	DEFECT
// arity ok, continue	WITHOUT_CLASSIFICATION	0.9999886620661169	WITHOUT_CLASSIFICATION	1.1337933883121562E-5	DEFECT
//InvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9998763877962068	WITHOUT_CLASSIFICATION	1.236122037931499E-4	DEFECT
// ENEBO: Perhaps slow but simple for now	WITHOUT_CLASSIFICATION	0.9999048211706615	WITHOUT_CLASSIFICATION	9.517882933847618E-5	DEFECT
// FastInvocationCallback	WITHOUT_CLASSIFICATION	0.9999846878464742	WITHOUT_CLASSIFICATION	1.5312153525814754E-5	DEFECT
// InvocationCallback	WITHOUT_CLASSIFICATION	0.999989875600523	WITHOUT_CLASSIFICATION	1.0124399477091204E-5	DEFECT
//DumpingInvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9999531055752683	WITHOUT_CLASSIFICATION	4.689442473169418E-5	DEFECT
// for fast lookup: encoding entry => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9999990747881655	WITHOUT_CLASSIFICATION	9.25211834549697E-7	DEFECT
// for fast lookup: org.joni.encoding.Encoding => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9999984792292229	WITHOUT_CLASSIFICATION	1.5207707769971507E-6	DEFECT
// load the encoding	WITHOUT_CLASSIFICATION	0.9999976919072088	WITHOUT_CLASSIFICATION	2.308092791141284E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999948665688425	WITHOUT_CLASSIFICATION	5.133431157511456E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999974374361265	WITHOUT_CLASSIFICATION	2.562563873520785E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999894758980352	WITHOUT_CLASSIFICATION	1.0524101964680427E-5	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyModule, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999782660577036	WITHOUT_CLASSIFICATION	2.1733942296427617E-5	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyClass, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999885944688136	WITHOUT_CLASSIFICATION	1.1405531186345305E-5	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999931214180534	WITHOUT_CLASSIFICATION	6.878581946583471E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999965662691361	WITHOUT_CLASSIFICATION	3.4337308638614466E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999858981716336	WITHOUT_CLASSIFICATION	1.4101828366438043E-5	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999966734727013	WITHOUT_CLASSIFICATION	3.326527298839293E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999983394282099	WITHOUT_CLASSIFICATION	1.6605717900594818E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999947698940469	WITHOUT_CLASSIFICATION	5.23010595318565E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999983394282099	WITHOUT_CLASSIFICATION	1.6605717900594818E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999983394282099	WITHOUT_CLASSIFICATION	1.6605717900594818E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999983394282099	WITHOUT_CLASSIFICATION	1.6605717900594818E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999983394282099	WITHOUT_CLASSIFICATION	1.6605717900594818E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999983394282099	WITHOUT_CLASSIFICATION	1.6605717900594818E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999983394282099	WITHOUT_CLASSIFICATION	1.6605717900594818E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999947698940469	WITHOUT_CLASSIFICATION	5.23010595318565E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999947698940469	WITHOUT_CLASSIFICATION	5.23010595318565E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999947698940469	WITHOUT_CLASSIFICATION	5.23010595318565E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999947698940469	WITHOUT_CLASSIFICATION	5.23010595318565E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999947698940469	WITHOUT_CLASSIFICATION	5.23010595318565E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999947698940469	WITHOUT_CLASSIFICATION	5.23010595318565E-6	DEFECT
// If we're running in 1.9 compat mode, add Ruby 1.9 libs to path before 1.8 libs	WITHOUT_CLASSIFICATION	0.9999991365008885	WITHOUT_CLASSIFICATION	8.634991115890032E-7	DEFECT
// BreakJump, ThreadContext	WITHOUT_CLASSIFICATION	0.9999809220963601	WITHOUT_CLASSIFICATION	1.9077903639936072E-5	DEFECT
// ThreadContext	WITHOUT_CLASSIFICATION	0.9999734179607059	WITHOUT_CLASSIFICATION	2.6582039294069277E-5	DEFECT
// BreakJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9999894081103101	WITHOUT_CLASSIFICATION	1.0591889689867615E-5	DEFECT
// Make Java class files in the jar reachable from Ruby	WITHOUT_CLASSIFICATION	0.9999998511469713	WITHOUT_CLASSIFICATION	1.4885302861394238E-7	DEFECT
// RetryJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9999927443027571	WITHOUT_CLASSIFICATION	7.25569724281599E-6	DEFECT
// add all startup load paths to the list first	WITHOUT_CLASSIFICATION	0.9999992633436832	WITHOUT_CLASSIFICATION	7.366563169277567E-7	DEFECT
// if it's a compiled JRuby script, instantiate and run it	WITHOUT_CLASSIFICATION	0.9999992888815453	WITHOUT_CLASSIFICATION	7.111184546434126E-7	DEFECT
// wrap in try/catch for security exceptions in an applet	WITHOUT_CLASSIFICATION	0.9999978170220972	WITHOUT_CLASSIFICATION	2.1829779027969443E-6	DEFECT
// add $RUBYLIB paths	WITHOUT_CLASSIFICATION	0.9999966096236701	WITHOUT_CLASSIFICATION	3.390376329857312E-6	DEFECT
// Empty paths do not need to be added	WITHOUT_CLASSIFICATION	0.9998938551102013	WITHOUT_CLASSIFICATION	1.0614488979857321E-4	DEFECT
// "." dir is used for relative path loads from a given file, as in require '../foo/bar'	WITHOUT_CLASSIFICATION	0.9999999778423618	WITHOUT_CLASSIFICATION	2.215763813132047E-8	DEFECT
// Add 1.8 libs	WITHOUT_CLASSIFICATION	0.9999962750902406	WITHOUT_CLASSIFICATION	3.724909759481894E-6	DEFECT
// Create package name, by splitting on / and joining all but the last elements with a ".", and downcasing them.	WITHOUT_CLASSIFICATION	0.999999982879274	WITHOUT_CLASSIFICATION	1.712072595214188E-8	DEFECT
// Library has already been loaded in some form, bail out	WITHOUT_CLASSIFICATION	0.9999988232028012	WITHOUT_CLASSIFICATION	1.1767971988664415E-6	DEFECT
// We don't want a package name beginning with dots, so we remove them	WITHOUT_CLASSIFICATION	0.9999985973051813	WITHOUT_CLASSIFICATION	1.4026948187325895E-6	DEFECT
// If there is a jar-file with the required name, we add this to the class path.	WITHOUT_CLASSIFICATION	0.9999959321575055	WITHOUT_CLASSIFICATION	4.067842494486468E-6	DEFECT
// quietly try to load the class	WITHOUT_CLASSIFICATION	0.99999937814433	WITHOUT_CLASSIFICATION	6.218556700003776E-7	DEFECT
// If there was a good library before, we go back to that	WITHOUT_CLASSIFICATION	0.9999992542454127	WITHOUT_CLASSIFICATION	7.457545873715919E-7	DEFECT
// no library or extension found, try to load directly as a class	WITHOUT_CLASSIFICATION	0.9999997300267023	WITHOUT_CLASSIFICATION	2.6997329765597707E-7	DEFECT
// if an extension is specified, try more targetted searches	WITHOUT_CLASSIFICATION	0.9999997339054371	WITHOUT_CLASSIFICATION	2.660945628702528E-7	DEFECT
// signed short, big-endian	WITHOUT_CLASSIFICATION	0.9999951537855277	WITHOUT_CLASSIFICATION	4.84621447235098E-6	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999996728147934	WITHOUT_CLASSIFICATION	3.2718520660357046E-7	DEFECT
// We don't support .so, but some stdlib require .so directly // replace it with .jar to look for an extension type we do support	WITHOUT_CLASSIFICATION	0.9999871965031524	WITHOUT_CLASSIFICATION	1.2803496847609661E-5	DEFECT
// This code exploits the fact that all .jar files will be found for the JarredScript feature. // This is where the basic extension mechanism gets fixed	WITHOUT_CLASSIFICATION	0.9999841527590569	WITHOUT_CLASSIFICATION	1.584724094309797E-5	DEFECT
// Make the class name look nice, by splitting on _ and capitalize each segment, then joining // the, together without anything separating them, and last put on "Service" at the end.	WITHOUT_CLASSIFICATION	0.9999999919020134	WITHOUT_CLASSIFICATION	8.097986536342299E-9	DEFECT
// It's _really_ expensive to check that the class actually exists in the Jar, so // we don't do that now.	WITHOUT_CLASSIFICATION	0.9999833314610115	WITHOUT_CLASSIFICATION	1.666853898850497E-5	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999995898334131	WITHOUT_CLASSIFICATION	4.1016658688791423E-7	DEFECT
// extension extensions	WITHOUT_CLASSIFICATION	0.9999964212086628	WITHOUT_CLASSIFICATION	3.5787913371299943E-6	DEFECT
// unknown extension, fall back to search with extensions	WITHOUT_CLASSIFICATION	0.9999994630923108	WITHOUT_CLASSIFICATION	5.369076892687161E-7	DEFECT
// try all extensions	WITHOUT_CLASSIFICATION	0.9999982213592196	WITHOUT_CLASSIFICATION	1.7786407804212288E-6	DEFECT
// if a source extension is specified, try all source extensions	WITHOUT_CLASSIFICATION	0.9999999287272182	WITHOUT_CLASSIFICATION	7.127278180424921E-8	DEFECT
// unknown extension, fall back to exact search	WITHOUT_CLASSIFICATION	0.9999984152888802	WITHOUT_CLASSIFICATION	1.5847111197970966E-6	DEFECT
// try only literal search	WITHOUT_CLASSIFICATION	0.9999977956087598	WITHOUT_CLASSIFICATION	2.2043912402546537E-6	DEFECT
// attempt to load the found library	WITHOUT_CLASSIFICATION	0.9999989234375071	WITHOUT_CLASSIFICATION	1.076562492887378E-6	DEFECT
// otherwise load the library we've found	WITHOUT_CLASSIFICATION	0.9999969840551327	WITHOUT_CLASSIFICATION	3.01594486736649E-6	DEFECT
// allow MainExitException to propagate out for exec and friends	WITHOUT_CLASSIFICATION	0.9999998574779329	WITHOUT_CLASSIFICATION	1.4252206711110906E-7	DEFECT
// Remove any relative prefix, e.g. "./foo/bar" becomes "foo/bar".	WITHOUT_CLASSIFICATION	0.9999995205223977	WITHOUT_CLASSIFICATION	4.794776022630669E-7	DEFECT
// check current directory; if file exists, retrieve URL and return resource	WITHOUT_CLASSIFICATION	0.9999997758681423	WITHOUT_CLASSIFICATION	2.2413185775560016E-7	DEFECT
// if a jar or file URL, return load service resource directly without further searching	WITHOUT_CLASSIFICATION	0.9999998450663661	WITHOUT_CLASSIFICATION	1.5493363385386474E-7	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999099177253131	WITHOUT_CLASSIFICATION	9.00822746869147E-5	DEFECT
// if it's a ./ baseName, use CWD logic	WITHOUT_CLASSIFICATION	0.9999993724238607	WITHOUT_CLASSIFICATION	6.275761392766544E-7	DEFECT
// if given path is absolute, just try it as-is (with extensions) and no load path	WITHOUT_CLASSIFICATION	0.9999998413264516	WITHOUT_CLASSIFICATION	1.5867354852268072E-7	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9999967741231013	WITHOUT_CLASSIFICATION	3.2258768987198604E-6	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9999967741231013	WITHOUT_CLASSIFICATION	3.2258768987198604E-6	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.999999234990268	WITHOUT_CLASSIFICATION	7.650097320067708E-7	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.999999234990268	WITHOUT_CLASSIFICATION	7.650097320067708E-7	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999645983099251	WITHOUT_CLASSIFICATION	3.540169007480985E-5	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999645983099251	WITHOUT_CLASSIFICATION	3.540169007480985E-5	DEFECT
//                    actualPath = new File(RubyFile.expandUserPath(runtime.getCurrentContext(), reportedPath));	WITHOUT_CLASSIFICATION	0.9999999129188368	WITHOUT_CLASSIFICATION	8.70811632543236E-8	DEFECT
// handle security-sensitive case	WITHOUT_CLASSIFICATION	0.9999992859000036	WITHOUT_CLASSIFICATION	7.140999963140732E-7	DEFECT
// if entry is an empty string, skip it	WITHOUT_CLASSIFICATION	0.9999479000115516	WITHOUT_CLASSIFICATION	5.209998844834041E-5	DEFECT
// if entry starts with a slash, skip it since classloader resources never start with a /	WITHOUT_CLASSIFICATION	0.9999999835448757	WITHOUT_CLASSIFICATION	1.6455124195379535E-8	DEFECT
// otherwise, try to load from classpath (Note: Jar resources always uses '/')	WITHOUT_CLASSIFICATION	0.9999998263938734	WITHOUT_CLASSIFICATION	1.7360612655823763E-7	DEFECT
// Make sure this is not a directory or unavailable in some way	WITHOUT_CLASSIFICATION	0.9999888931937368	WITHOUT_CLASSIFICATION	1.110680626314132E-5	DEFECT
// signed short, native	WITHOUT_CLASSIFICATION	0.9999937532189072	WITHOUT_CLASSIFICATION	6.246781092787408E-6	DEFECT
// If we fail to find as a normal Ruby script, we try to find as an extension, // checking for a builtin first.	WITHOUT_CLASSIFICATION	0.9999990441491117	WITHOUT_CLASSIFICATION	9.558508882705783E-7	DEFECT
// write `I' instance var signet if class is NOT a direct subclass of Object	WITHOUT_CLASSIFICATION	0.9999994543749972	WITHOUT_CLASSIFICATION	5.456250029218223E-7	DEFECT
// if name starts with a / we're done (classloader resources won't load with an initial /)	WITHOUT_CLASSIFICATION	0.9999975653467607	WITHOUT_CLASSIFICATION	2.434653239385309E-6	DEFECT
// Look in classpath next (we do not use File as a test since UNC names will match) // Note: Jar resources must NEVER begin with an '/'. (previous code said "always begin with a /")	WITHOUT_CLASSIFICATION	0.9999870886930942	WITHOUT_CLASSIFICATION	1.2911306905752147E-5	DEFECT
/* Directories and unavailable resources are not able to open a stream. */	WITHOUT_CLASSIFICATION	0.999998978464469	WITHOUT_CLASSIFICATION	1.0215355310759046E-6	DEFECT
// Try to load from classpath without prefix. "A/b.rb" will not load as  // "./A/b.rb" in a jar file.	WITHOUT_CLASSIFICATION	0.9999737724584851	WITHOUT_CLASSIFICATION	2.622754151493295E-5	DEFECT
// object has instance vars and isn't a class, get a snapshot to be marshalled // and output the ivar header here	WITHOUT_CLASSIFICATION	0.9999986025936515	WITHOUT_CLASSIFICATION	1.3974063485558627E-6	DEFECT
// flush afer whole dump is complete	WITHOUT_CLASSIFICATION	0.9999924439962857	WITHOUT_CLASSIFICATION	7.556003714240672E-6	DEFECT
//            write('S');	WITHOUT_CLASSIFICATION	0.9999915329536816	WITHOUT_CLASSIFICATION	8.467046318430129E-6	DEFECT
// switch on the object's *native type*. This allows use-defined // classes that have extended core native types to piggyback on their // marshalling logic.	WITHOUT_CLASSIFICATION	0.9999992522192503	WITHOUT_CLASSIFICATION	7.47780749542939E-7	DEFECT
// object is a custom class that extended one of the native types other than Object	WITHOUT_CLASSIFICATION	0.999990782344234	WITHOUT_CLASSIFICATION	9.217655765977407E-6	DEFECT
// We do not want to capture cached methods	WITHOUT_CLASSIFICATION	0.9999983095231183	WITHOUT_CLASSIFICATION	1.6904768817543399E-6	DEFECT
// w_symbol	WITHOUT_CLASSIFICATION	0.9999960085357839	WITHOUT_CLASSIFICATION	3.991464216117183E-6	DEFECT
// w_unique	WITHOUT_CLASSIFICATION	0.9999952571280292	WITHOUT_CLASSIFICATION	4.742871970751138E-6	DEFECT
// call the proc, but not for symbols	WITHOUT_CLASSIFICATION	0.9999950902774164	WITHOUT_CLASSIFICATION	4.909722583617748E-6	DEFECT
// Major // Minor	WITHOUT_CLASSIFICATION	0.9999932455128706	WITHOUT_CLASSIFICATION	6.754487129366477E-6	DEFECT
// any ivars, since we don't have __attached__ ivar now	WITHOUT_CLASSIFICATION	0.9999895379739875	WITHOUT_CLASSIFICATION	1.0462026012468877E-5	DEFECT
// "hashdef" object, a hash with a default	WITHOUT_CLASSIFICATION	0.999999586459779	WITHOUT_CLASSIFICATION	4.1354022093519106E-7	DEFECT
// All "C" marshalled objects descend from core classes, which are all RubyObject	WITHOUT_CLASSIFICATION	0.999999625978166	WITHOUT_CLASSIFICATION	3.74021834003528E-7	DEFECT
// sic	WITHOUT_CLASSIFICATION	0.9999969103403274	WITHOUT_CLASSIFICATION	3.0896596725349344E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999897680715569	WITHOUT_CLASSIFICATION	1.0231928443151628E-5	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999897680715569	WITHOUT_CLASSIFICATION	1.0231928443151628E-5	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999897680715569	WITHOUT_CLASSIFICATION	1.0231928443151628E-5	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999821696824	WITHOUT_CLASSIFICATION	1.7830317536324904E-8	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999821696824	WITHOUT_CLASSIFICATION	1.7830317536324904E-8	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999909146257354	WITHOUT_CLASSIFICATION	9.085374264480264E-6	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999909146257354	WITHOUT_CLASSIFICATION	9.085374264480264E-6	DEFECT
/*     * If we are setting post arguments we can assume there are no pre or others     */	WITHOUT_CLASSIFICATION	0.999996929836399	WITHOUT_CLASSIFICATION	3.070163601111671E-6	DEFECT
// XXX: 0xffff0000 on BE?	WITHOUT_CLASSIFICATION	0.998878584192873	WITHOUT_CLASSIFICATION	0.0011214158071269876	DEFECT
// unsigned short, native	WITHOUT_CLASSIFICATION	0.9999943730389111	WITHOUT_CLASSIFICATION	5.626961088777464E-6	DEFECT
// int, native // long, native	WITHOUT_CLASSIFICATION	0.9999941430427811	WITHOUT_CLASSIFICATION	5.85695721887807E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999897680715569	WITHOUT_CLASSIFICATION	1.0231928443151628E-5	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999897680715569	WITHOUT_CLASSIFICATION	1.0231928443151628E-5	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999897680715569	WITHOUT_CLASSIFICATION	1.0231928443151628E-5	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999821696824	WITHOUT_CLASSIFICATION	1.7830317536324904E-8	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999821696824	WITHOUT_CLASSIFICATION	1.7830317536324904E-8	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999821696824	WITHOUT_CLASSIFICATION	1.7830317536324904E-8	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999909146257354	WITHOUT_CLASSIFICATION	9.085374264480264E-6	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999909146257354	WITHOUT_CLASSIFICATION	9.085374264480264E-6	DEFECT
// Look for slash, starting from 'start' position, until 'end'.	WITHOUT_CLASSIFICATION	0.9999999460364776	WITHOUT_CLASSIFICATION	5.396352244705702E-8	DEFECT
// Our values holder (name of variables are kept in staticScope)	WITHOUT_CLASSIFICATION	0.9999923224397899	WITHOUT_CLASSIFICATION	7.677560210190323E-6	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999992940375618	WITHOUT_CLASSIFICATION	7.059624382820913E-7	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999992940375618	WITHOUT_CLASSIFICATION	7.059624382820913E-7	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999992940375618	WITHOUT_CLASSIFICATION	7.059624382820913E-7	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999992940375618	WITHOUT_CLASSIFICATION	7.059624382820913E-7	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999992940375618	WITHOUT_CLASSIFICATION	7.059624382820913E-7	DEFECT
// SunSignalFacade	WITHOUT_CLASSIFICATION	0.9999980714699781	WITHOUT_CLASSIFICATION	1.9285300218661503E-6	DEFECT
// All braces pushed..	WITHOUT_CLASSIFICATION	0.9999979586951395	WITHOUT_CLASSIFICATION	2.0413048604379945E-6	DEFECT
/* failed : try next recursion */	WITHOUT_CLASSIFICATION	0.9999749858789724	WITHOUT_CLASSIFICATION	2.5014121027624708E-5	DEFECT
// leftToken made us start as nest 1	WITHOUT_CLASSIFICATION	0.999999594099299	WITHOUT_CLASSIFICATION	4.059007011046546E-7	DEFECT
// are we at '**/'	WITHOUT_CLASSIFICATION	0.9999826666892531	WITHOUT_CLASSIFICATION	1.7333310746971288E-5	DEFECT
// No or mismatched braces..Move along..nothing to see here	WITHOUT_CLASSIFICATION	0.9999994554425207	WITHOUT_CLASSIFICATION	5.445574793590874E-7	DEFECT
// not enough bytes	WITHOUT_CLASSIFICATION	0.9999948278211822	WITHOUT_CLASSIFICATION	5.1721788177967056E-6	DEFECT
// Get index of last read byte	WITHOUT_CLASSIFICATION	0.9999952630452523	WITHOUT_CLASSIFICATION	4.736954747688605E-6	DEFECT
// skip inner braces	WITHOUT_CLASSIFICATION	0.9999987866802885	WITHOUT_CLASSIFICATION	1.2133197115368054E-6	DEFECT
/*     * Process {}'s (example: Dir.glob("{jruby,jython}/README*")      */	WITHOUT_CLASSIFICATION	0.9999955339715257	WITHOUT_CLASSIFICATION	4.466028474235795E-6	DEFECT
/* complete, according to Posix.2 */	WITHOUT_CLASSIFICATION	0.9999973265519801	WITHOUT_CLASSIFICATION	2.6734480197821383E-6	DEFECT
/* Only accept an open brace if there is a close */	WITHOUT_CLASSIFICATION	0.9999814643507943	WITHOUT_CLASSIFICATION	1.8535649205630187E-5	DEFECT
/* brace to match it.  Bracket expressions must be */	WITHOUT_CLASSIFICATION	0.9999879270234903	WITHOUT_CLASSIFICATION	1.2072976509612254E-5	DEFECT
// index of left-most brace // index of right-most brace	WITHOUT_CLASSIFICATION	0.9999953741055982	WITHOUT_CLASSIFICATION	4.6258944017319825E-6	DEFECT
// Length check is a hack.  We should not be reeiving "" as a filename ever. 	WITHOUT_CLASSIFICATION	0.9998797359437507	WITHOUT_CLASSIFICATION	1.2026405624924922E-4	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999546480725593	WITHOUT_CLASSIFICATION	4.5351927440629666E-5	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999546480725593	WITHOUT_CLASSIFICATION	4.5351927440629666E-5	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999546480725593	WITHOUT_CLASSIFICATION	4.5351927440629666E-5	DEFECT
// Pickaxe says @ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9999361529026339	WITHOUT_CLASSIFICATION	6.384709736610762E-5	DEFECT
// Pickaxe says @@ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9999361521739242	WITHOUT_CLASSIFICATION	6.384782607581523E-5	DEFECT
// SimpleSampler	WITHOUT_CLASSIFICATION	0.9999950026283823	WITHOUT_CLASSIFICATION	4.997371617808616E-6	DEFECT
/*     * convert into longs, returning unsigned 64-bit values as signed longs     * ( num2long raises a RangeError on values > Long.MAX_VALUE )     */	WITHOUT_CLASSIFICATION	0.9999992852903503	WITHOUT_CLASSIFICATION	7.147096498244112E-7	DEFECT
// b64_xtable for decoding Base 64	WITHOUT_CLASSIFICATION	0.9999982882833064	WITHOUT_CLASSIFICATION	1.711716693653382E-6	DEFECT
// single precision, little-endian	WITHOUT_CLASSIFICATION	0.9999997650875514	WITHOUT_CLASSIFICATION	2.3491244862593995E-7	DEFECT
// single precision, big-endian	WITHOUT_CLASSIFICATION	0.9999995819202553	WITHOUT_CLASSIFICATION	4.180797447366626E-7	DEFECT
// single precision, native	WITHOUT_CLASSIFICATION	0.9999984651145143	WITHOUT_CLASSIFICATION	1.5348854856019657E-6	DEFECT
// single precision, native // single precision, native	WITHOUT_CLASSIFICATION	0.9999979989975886	WITHOUT_CLASSIFICATION	2.0010024114957484E-6	DEFECT
// double precision, little-endian	WITHOUT_CLASSIFICATION	0.9999994218746603	WITHOUT_CLASSIFICATION	5.781253396449849E-7	DEFECT
// double precision, big-endian	WITHOUT_CLASSIFICATION	0.9999991162641595	WITHOUT_CLASSIFICATION	8.837358405148287E-7	DEFECT
// double precision, native	WITHOUT_CLASSIFICATION	0.9999971958418516	WITHOUT_CLASSIFICATION	2.8041581482133024E-6	DEFECT
// signed short, little-endian	WITHOUT_CLASSIFICATION	0.9999986528077479	WITHOUT_CLASSIFICATION	1.3471922521221623E-6	DEFECT
// signed char	WITHOUT_CLASSIFICATION	0.999999089957375	WITHOUT_CLASSIFICATION	9.10042624958118E-7	DEFECT
// unsigned char	WITHOUT_CLASSIFICATION	0.9999990059575408	WITHOUT_CLASSIFICATION	9.940424592091753E-7	DEFECT
// long, little-endian	WITHOUT_CLASSIFICATION	0.9999993872194557	WITHOUT_CLASSIFICATION	6.12780544185231E-7	DEFECT
// long, big-endian	WITHOUT_CLASSIFICATION	0.9999994809283135	WITHOUT_CLASSIFICATION	5.190716865343939E-7	DEFECT
// unsigned int, native	WITHOUT_CLASSIFICATION	0.9999967612435927	WITHOUT_CLASSIFICATION	3.2387564072788633E-6	DEFECT
// int, native	WITHOUT_CLASSIFICATION	0.9999889006300353	WITHOUT_CLASSIFICATION	1.1099369964584589E-5	DEFECT
// 64-bit number, native (as fixnum)	WITHOUT_CLASSIFICATION	0.9999685244917603	WITHOUT_CLASSIFICATION	3.1475508239634764E-5	DEFECT
// How many occurrences of 'type' we want	WITHOUT_CLASSIFICATION	0.9999955859654017	WITHOUT_CLASSIFICATION	4.414034598216749E-6	DEFECT
// See if we have a converter for the job...	WITHOUT_CLASSIFICATION	0.9999966124851324	WITHOUT_CLASSIFICATION	3.3875148676206066E-6	DEFECT
// Otherwise the unpack should be here...	WITHOUT_CLASSIFICATION	0.9999928728895905	WITHOUT_CLASSIFICATION	7.127110409391761E-6	DEFECT
// Possible Checksum Byte	WITHOUT_CLASSIFICATION	0.9999978675475705	WITHOUT_CLASSIFICATION	2.132452429581675E-6	DEFECT
// obtain a	WITHOUT_CLASSIFICATION	0.9999969738637258	WITHOUT_CLASSIFICATION	3.0261362741901896E-6	DEFECT
// obtain b	WITHOUT_CLASSIFICATION	0.9999958032562534	WITHOUT_CLASSIFICATION	4.196743746557647E-6	DEFECT
// obtain c	WITHOUT_CLASSIFICATION	0.9999968581593278	WITHOUT_CLASSIFICATION	3.14184067217206E-6	DEFECT
// obtain d	WITHOUT_CLASSIFICATION	0.9999977473494147	WITHOUT_CLASSIFICATION	2.2526505853559006E-6	DEFECT
/*encode.limit() - */	WITHOUT_CLASSIFICATION	0.9999722005773696	WITHOUT_CLASSIFICATION	2.7799422630396756E-5	DEFECT
/* 1 */	WITHOUT_CLASSIFICATION	0.9999816809819846	WITHOUT_CLASSIFICATION	1.8319018015387822E-5	DEFECT
/* 2 */	WITHOUT_CLASSIFICATION	0.9999857570209354	WITHOUT_CLASSIFICATION	1.4242979064587182E-5	DEFECT
/* 3 */	WITHOUT_CLASSIFICATION	0.9999845879390802	WITHOUT_CLASSIFICATION	1.541206091978573E-5	DEFECT
/* 4 */	WITHOUT_CLASSIFICATION	0.999979187369274	WITHOUT_CLASSIFICATION	2.0812630725975473E-5	DEFECT
/* 5 */	WITHOUT_CLASSIFICATION	0.9999807162091665	WITHOUT_CLASSIFICATION	1.9283790833501443E-5	DEFECT
/* 6 */	WITHOUT_CLASSIFICATION	0.9999799405870744	WITHOUT_CLASSIFICATION	2.0059412925666013E-5	DEFECT
/* 7 */	WITHOUT_CLASSIFICATION	0.9999811156843579	WITHOUT_CLASSIFICATION	1.8884315642108016E-5	DEFECT
// Skip all whitespace in pack format string	WITHOUT_CLASSIFICATION	0.9999794463355522	WITHOUT_CLASSIFICATION	2.055366444775593E-5	DEFECT
// Skip embedded comments in pack format string	WITHOUT_CLASSIFICATION	0.9999670161345056	WITHOUT_CLASSIFICATION	3.298386549447139E-5	DEFECT
// In case when the number of occurences is // explicitly specified, we have to read up // the remaining garbage after the '\0' to // satisfy the requested pattern.	WITHOUT_CLASSIFICATION	0.9999999436832523	WITHOUT_CLASSIFICATION	5.631674772586933E-8	DEFECT
//normal exit, this should be faster than a test at each iterations for string with more than //about 40 char	WITHOUT_CLASSIFICATION	0.9999899580238305	WITHOUT_CLASSIFICATION	1.004197616942681E-5	DEFECT
// We encountered '\0' when // were reading the buffer above, // increment the number of read bytes.	WITHOUT_CLASSIFICATION	0.9999982784692123	WITHOUT_CLASSIFICATION	1.7215307877169824E-6	DEFECT
// MRI behavior: Contrary to what seems to be logical, // when '*' is given, MRI calculates the distance // to the end, in order to go backwards.	WITHOUT_CLASSIFICATION	0.9999990281201725	WITHOUT_CLASSIFICATION	9.718798275063592E-7	DEFECT
// Determine how many of type are needed (default: 1)	WITHOUT_CLASSIFICATION	0.9999914377981083	WITHOUT_CLASSIFICATION	8.562201891724445E-6	DEFECT
// 'Z' adds extra null pad (versus 'a')	WITHOUT_CLASSIFICATION	0.9999980347047044	WITHOUT_CLASSIFICATION	1.965295295691989E-6	DEFECT
//if the low bit is set //set the high bit of the result	WITHOUT_CLASSIFICATION	0.9999886291513586	WITHOUT_CLASSIFICATION	1.1370848641524783E-5	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary //shift the byte	WITHOUT_CLASSIFICATION	0.9998143498292636	WITHOUT_CLASSIFICATION	1.856501707362736E-4	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9999955517994352	WITHOUT_CLASSIFICATION	4.448200564775074E-6	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9999955517994352	WITHOUT_CLASSIFICATION	4.448200564775074E-6	DEFECT
//do some padding, I don't understand the padding strategy	WITHOUT_CLASSIFICATION	0.9999937013778735	WITHOUT_CLASSIFICATION	6.298622126524572E-6	DEFECT
// we filled up current byte; append it and create next one	WITHOUT_CLASSIFICATION	0.9999990395425626	WITHOUT_CLASSIFICATION	9.604574373848113E-7	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary	WITHOUT_CLASSIFICATION	0.9999141559880912	WITHOUT_CLASSIFICATION	8.584401190889806E-5	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9999526916069809	WITHOUT_CLASSIFICATION	4.730839301921447E-5	DEFECT
// we don't deal with negatives.	WITHOUT_CLASSIFICATION	0.999982359256178	WITHOUT_CLASSIFICATION	1.7640743822133363E-5	DEFECT
// populate commandline with NG-provided stuff	WITHOUT_CLASSIFICATION	0.9999991508666054	WITHOUT_CLASSIFICATION	8.491333946699356E-7	DEFECT
// are we recursing?	WITHOUT_CLASSIFICATION	0.9999642239729191	WITHOUT_CLASSIFICATION	3.577602708090711E-5	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999996348279182	WITHOUT_CLASSIFICATION	3.6517208179238647E-7	DEFECT
// default PidGetter	WITHOUT_CLASSIFICATION	0.9999979974691502	WITHOUT_CLASSIFICATION	2.0025308499149784E-6	DEFECT
// ignore and try windows version	WITHOUT_CLASSIFICATION	0.9999987292753568	WITHOUT_CLASSIFICATION	1.270724643140249E-6	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999984041105713	WITHOUT_CLASSIFICATION	1.5958894287063791E-6	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999984041105713	WITHOUT_CLASSIFICATION	1.5958894287063791E-6	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999984041105713	WITHOUT_CLASSIFICATION	1.5958894287063791E-6	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999984041105713	WITHOUT_CLASSIFICATION	1.5958894287063791E-6	DEFECT
// try both	WITHOUT_CLASSIFICATION	0.9999900342630254	WITHOUT_CLASSIFICATION	9.965736974573599E-6	DEFECT
// just unix	WITHOUT_CLASSIFICATION	0.9999911052181751	WITHOUT_CLASSIFICATION	8.89478182478649E-6	DEFECT
// just windows	WITHOUT_CLASSIFICATION	0.9999973321182991	WITHOUT_CLASSIFICATION	2.667881701015856E-6	DEFECT
// neither	WITHOUT_CLASSIFICATION	0.9999974502555312	WITHOUT_CLASSIFICATION	2.5497444688258053E-6	DEFECT
// CON: popen is a case where I think we should just always shell out.	WITHOUT_CLASSIFICATION	0.9997852550952413	WITHOUT_CLASSIFICATION	2.147449047586208E-4	DEFECT
// single string command, pass to sh to expand wildcards	WITHOUT_CLASSIFICATION	0.9999988623193462	WITHOUT_CLASSIFICATION	1.1376806537664568E-6	DEFECT
// direct invocation of the command	WITHOUT_CLASSIFICATION	0.9999917744146655	WITHOUT_CLASSIFICATION	8.225585334620327E-6	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999873948084483	WITHOUT_CLASSIFICATION	1.2605191551607457E-5	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999873948084483	WITHOUT_CLASSIFICATION	1.2605191551607457E-5	DEFECT
// close process output // See JRUBY-3405; hooking up to parent process stdin caused // problems for IRB etc using stdin.	WITHOUT_CLASSIFICATION	0.9999999641196902	WITHOUT_CLASSIFICATION	3.5880309775686684E-8	DEFECT
// ignore, we're on the way out	WITHOUT_CLASSIFICATION	0.9999979068445408	WITHOUT_CLASSIFICATION	2.093155459151719E-6	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999813276028097	WITHOUT_CLASSIFICATION	1.8672397190246567E-5	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9999997709993977	WITHOUT_CLASSIFICATION	2.2900060221398335E-7	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9999997709993977	WITHOUT_CLASSIFICATION	2.2900060221398335E-7	DEFECT
// popen caller wants to be able to write, provide subprocess out directly	WITHOUT_CLASSIFICATION	0.9999999675727623	WITHOUT_CLASSIFICATION	3.2427237651925204E-8	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999997887273236	WITHOUT_CLASSIFICATION	2.112726764109787E-7	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999997887273236	WITHOUT_CLASSIFICATION	2.112726764109787E-7	DEFECT
// execute command with sh -c // this does shell expansion of wildcards	WITHOUT_CLASSIFICATION	0.9999972539622073	WITHOUT_CLASSIFICATION	2.7460377927871675E-6	DEFECT
// We need to close the out, since some // processes would just wait for the stream // to be closed before they process its content, // and produce the output. E.g.: "cat".	WITHOUT_CLASSIFICATION	0.9999999360955861	WITHOUT_CLASSIFICATION	6.390441378141364E-8	DEFECT
// we only close out if it's the slave stream, to avoid // closing a directly-mapped stream from parent process	WITHOUT_CLASSIFICATION	0.9999999681973246	WITHOUT_CLASSIFICATION	3.1802675343675223E-8	DEFECT
// The assumption here is that the 'in' stream provides // proper available() support. If available() always // returns 0, we'll hang!	WITHOUT_CLASSIFICATION	0.9999994489526256	WITHOUT_CLASSIFICATION	5.510473744091696E-7	DEFECT
// Force t3 to quit, just in case if it's stuck. // Note: On some platforms, even interrupt might not // have an effect if the thread is IO blocked.	WITHOUT_CLASSIFICATION	0.9998089478866002	WITHOUT_CLASSIFICATION	1.910521133998488E-4	DEFECT
// Check for special shell characters [<>|] at the beginning // and end of each command word and don't run in process if we find them.	WITHOUT_CLASSIFICATION	0.9999836023475285	WITHOUT_CLASSIFICATION	1.6397652471533412E-5	DEFECT
// Note: this method produces meaningful results // only for RubyIO objects. For everything else returns 0.	WITHOUT_CLASSIFICATION	0.999995461627933	WITHOUT_CLASSIFICATION	4.538372067003988E-6	DEFECT
//sequential	WITHOUT_CLASSIFICATION	0.9999886961631772	WITHOUT_CLASSIFICATION	1.1303836822793726E-5	DEFECT
// reverse the entire area of the array selected if it's reversed.	WITHOUT_CLASSIFICATION	0.99999985110185	WITHOUT_CLASSIFICATION	1.48898150027988E-7	DEFECT
// do median of 7 if the array is over 200 elements.	WITHOUT_CLASSIFICATION	0.9999985303368688	WITHOUT_CLASSIFICATION	1.4696631311027121E-6	DEFECT
// if it's less than 200 do median of 3	WITHOUT_CLASSIFICATION	0.999995109406868	WITHOUT_CLASSIFICATION	4.8905931319978785E-6	DEFECT
// SignalFacade	WITHOUT_CLASSIFICATION	0.9999978045979416	WITHOUT_CLASSIFICATION	2.1954020584257584E-6	DEFECT
// this is the order in which MRI does these two tests	WITHOUT_CLASSIFICATION	0.9999893012382328	WITHOUT_CLASSIFICATION	1.0698761767201323E-5	DEFECT
// this is the order in which MRI does these tests	WITHOUT_CLASSIFICATION	0.9999863875586289	WITHOUT_CLASSIFICATION	1.3612441371113209E-5	DEFECT
// basically just forcing a TypeError here to match MRI	WITHOUT_CLASSIFICATION	0.9999903581651295	WITHOUT_CLASSIFICATION	9.641834870511106E-6	DEFECT
// not saving DFS instance, as it will only be used once (at most) per call	WITHOUT_CLASSIFICATION	0.9999962290450333	WITHOUT_CLASSIFICATION	3.770954966761033E-6	DEFECT
// Args	WITHOUT_CLASSIFICATION	0.9999969579752629	WITHOUT_CLASSIFICATION	3.042024737050318E-6	DEFECT
// static methods only	WITHOUT_CLASSIFICATION	0.9999989403880452	WITHOUT_CLASSIFICATION	1.0596119549196774E-6	DEFECT
//System.err.println(" calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9999989446973048	WITHOUT_CLASSIFICATION	1.0553026952617955E-6	DEFECT
// MRI 1.8.6 behavior: null byte after '%' // leads to "%" string. Null byte in // other places, like "%5\0", leads to error.	WITHOUT_CLASSIFICATION	0.9999826509515958	WITHOUT_CLASSIFICATION	1.7349048404203852E-5	DEFECT
// last index (+1) accessed by next() // last index (+1) accessed by get()	WITHOUT_CLASSIFICATION	0.9999967317377207	WITHOUT_CLASSIFICATION	3.2682622792638992E-6	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly.	WITHOUT_CLASSIFICATION	0.999996746176283	WITHOUT_CLASSIFICATION	3.253823717041881E-6	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly. Version for 1.9.	WITHOUT_CLASSIFICATION	0.9999969164614096	WITHOUT_CLASSIFICATION	3.0835385903608587E-6	DEFECT
// MRI doesn't flag it as an error if width is given multiple // times as a number (but it does for *)	WITHOUT_CLASSIFICATION	0.9998009165101202	WITHOUT_CLASSIFICATION	1.990834898798954E-4	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9999972192024231	WITHOUT_CLASSIFICATION	2.780797576996547E-6	DEFECT
// MRI 1.8.5-p12 doesn't support 1-char strings, but // YARV 0.4.1 does. I don't think it hurts to include // this; sprintf('%c','a') is nicer than sprintf('%c','a'[0])	WITHOUT_CLASSIFICATION	0.9999521753523343	WITHOUT_CLASSIFICATION	4.782464766560562E-5	DEFECT
// 'd' and 'i' are the same	WITHOUT_CLASSIFICATION	0.9999956171897305	WITHOUT_CLASSIFICATION	4.382810269469797E-6	DEFECT
// 'u' with space or plus flags is same as 'd'	WITHOUT_CLASSIFICATION	0.9999987034089797	WITHOUT_CLASSIFICATION	1.2965910203171213E-6	DEFECT
// We depart here from strict adherence to MRI code, as MRI // uses C-sprintf, in part, to format numeric output, while // we'll use Java's numeric formatting code (and our own).	WITHOUT_CLASSIFICATION	0.9999814661964246	WITHOUT_CLASSIFICATION	1.8533803575412893E-5	DEFECT
// skip '-' in bytes, will add where appropriate	WITHOUT_CLASSIFICATION	0.9999993873704797	WITHOUT_CLASSIFICATION	6.126295203057851E-7	DEFECT
// ..	WITHOUT_CLASSIFICATION	0.9999895362480069	WITHOUT_CLASSIFICATION	1.0463751992979657E-5	DEFECT
// the 1 is for the stripped sign char	WITHOUT_CLASSIFICATION	0.9999986182156153	WITHOUT_CLASSIFICATION	1.381784384659556E-6	DEFECT
// FIXME: what is correct 'recv' argument? // (this does produce the desired behavior)	WITHOUT_CLASSIFICATION	0.8218135472095945	WITHOUT_CLASSIFICATION	0.17818645279040538	DEFECT
// gotta have at least a zero...	WITHOUT_CLASSIFICATION	0.9999991250111504	WITHOUT_CLASSIFICATION	8.749888495932519E-7	DEFECT
// OK, we now have the significand in digits[0...nDigits] // and the exponent in exponent.  We're ready to format.	WITHOUT_CLASSIFICATION	0.9999948768642929	WITHOUT_CLASSIFICATION	5.123135707145998E-6	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9999742785818649	WITHOUT_CLASSIFICATION	2.5721418135106512E-5	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999924746478933	WITHOUT_CLASSIFICATION	7.525352106679936E-6	DEFECT
//System.err.println(" stringToLong/reading c=" + data[s]);	WITHOUT_CLASSIFICATION	0.9999936123781149	WITHOUT_CLASSIFICATION	6.38762188503053E-6	DEFECT
//System.err.println(" stringToLong/converted c=" + c);	WITHOUT_CLASSIFICATION	0.9999969141751021	WITHOUT_CLASSIFICATION	3.0858248979116202E-6	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9999742785818649	WITHOUT_CLASSIFICATION	2.5721418135106512E-5	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999924746478933	WITHOUT_CLASSIFICATION	7.525352106679936E-6	DEFECT
// precision for G/g includes integer digits	WITHOUT_CLASSIFICATION	0.9999994462320911	WITHOUT_CLASSIFICATION	5.537679088959957E-7	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999978424787959	WITHOUT_CLASSIFICATION	2.157521204150732E-6	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999978424787959	WITHOUT_CLASSIFICATION	2.157521204150732E-6	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9999982454124665	WITHOUT_CLASSIFICATION	1.7545875334207559E-6	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9999996652818492	WITHOUT_CLASSIFICATION	3.3471815075311577E-7	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.999986284924003	WITHOUT_CLASSIFICATION	1.3715075996885339E-5	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.999993207170855	WITHOUT_CLASSIFICATION	6.792829144913534E-6	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9999873465447483	WITHOUT_CLASSIFICATION	1.2653455251642205E-5	DEFECT
// MRI behavior: In this mode // trailing zeroes are removed: // 1.500E+05 -> 1.5E+05 	WITHOUT_CLASSIFICATION	0.9999412932094738	WITHOUT_CLASSIFICATION	5.870679052617339E-5	DEFECT
// '.' is printed	WITHOUT_CLASSIFICATION	0.9999971548830415	WITHOUT_CLASSIFICATION	2.8451169585760103E-6	DEFECT
// all precision numebers printed	WITHOUT_CLASSIFICATION	0.9999989470503058	WITHOUT_CLASSIFICATION	1.0529496942517053E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999976128681304	WITHOUT_CLASSIFICATION	2.3871318695067797E-6	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9999915938835249	WITHOUT_CLASSIFICATION	8.406116475228844E-6	DEFECT
// decimal form, like (but not *just* like!) 'f'	WITHOUT_CLASSIFICATION	0.9999917034920527	WITHOUT_CLASSIFICATION	8.296507947355169E-6	DEFECT
// digits array shifted, update all	WITHOUT_CLASSIFICATION	0.999999031196435	WITHOUT_CLASSIFICATION	9.688035650816951E-7	DEFECT
// will have a trailing '.' // g fills trailing zeroes if #	WITHOUT_CLASSIFICATION	0.9999961015294052	WITHOUT_CLASSIFICATION	3.898470594819444E-6	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999997427224357	WITHOUT_CLASSIFICATION	2.572775642501874E-7	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999997427224357	WITHOUT_CLASSIFICATION	2.572775642501874E-7	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999992929281062	WITHOUT_CLASSIFICATION	7.070718938671458E-7	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999992929281062	WITHOUT_CLASSIFICATION	7.070718938671458E-7	DEFECT
// digits arr shifted, update all	WITHOUT_CLASSIFICATION	0.9999990290535932	WITHOUT_CLASSIFICATION	9.709464068464992E-7	DEFECT
// (1|intlen).prec	WITHOUT_CLASSIFICATION	0.9999979576123794	WITHOUT_CLASSIFICATION	2.042387620632284E-6	DEFECT
// (1|intlen)	WITHOUT_CLASSIFICATION	0.9999979113637659	WITHOUT_CLASSIFICATION	2.0886362341211915E-6	DEFECT
// will have a trailing '.'	WITHOUT_CLASSIFICATION	0.9999959328873224	WITHOUT_CLASSIFICATION	4.067112677696235E-6	DEFECT
// fill up the rest with zeroes	WITHOUT_CLASSIFICATION	0.9999946979549331	WITHOUT_CLASSIFICATION	5.30204506686261E-6	DEFECT
//System.err.println(" main/len=" + len);	WITHOUT_CLASSIFICATION	0.9999986236007864	WITHOUT_CLASSIFICATION	1.3763992136565944E-6	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.999986284924003	WITHOUT_CLASSIFICATION	1.3715075996885339E-5	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.999993207170855	WITHOUT_CLASSIFICATION	6.792829144913534E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999976128681304	WITHOUT_CLASSIFICATION	2.3871318695067797E-6	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9999915938835249	WITHOUT_CLASSIFICATION	8.406116475228844E-6	DEFECT
// equivalent to MRI case '\0':	WITHOUT_CLASSIFICATION	0.9999994238084869	WITHOUT_CLASSIFICATION	5.761915130422913E-7	DEFECT
// '.' and all precision digits printed	WITHOUT_CLASSIFICATION	0.9999997938413071	WITHOUT_CLASSIFICATION	2.0615869293466367E-7	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9999923587319257	WITHOUT_CLASSIFICATION	7.641268074351468E-6	DEFECT
// dangling '%' char	WITHOUT_CLASSIFICATION	0.9999980998490534	WITHOUT_CLASSIFICATION	1.9001509465809928E-6	DEFECT
// main while loop (offset < length)	WITHOUT_CLASSIFICATION	0.9999991879094126	WITHOUT_CLASSIFICATION	8.120905874554727E-7	DEFECT
// debugging code, keeping for now	WITHOUT_CLASSIFICATION	0.9999647929543414	WITHOUT_CLASSIFICATION	3.520704565867268E-5	DEFECT
// MRI rounds up on nnn5nnn, but not nnn5 -- // except for when they do	WITHOUT_CLASSIFICATION	0.999963206423742	WITHOUT_CLASSIFICATION	3.679357625808983E-5	DEFECT
// "%.0f" % 0.99	WITHOUT_CLASSIFICATION	0.9999896612198049	WITHOUT_CLASSIFICATION	1.0338780195121317E-5	DEFECT
// limit the length of negatives if possible (also faster)	WITHOUT_CLASSIFICATION	0.9999998903943974	WITHOUT_CLASSIFICATION	1.0960560254054168E-7	DEFECT
// negative values	WITHOUT_CLASSIFICATION	0.9999987284582176	WITHOUT_CLASSIFICATION	1.2715417824531118E-6	DEFECT
// calculation for negatives when %u specified // for values >= Integer.MIN_VALUE * 2, MRI uses (the equivalent of) //   long neg_u = (((long)Integer.MAX_VALUE + 1) << 1) + val // for smaller values, BigInteger math is required to conform to MRI's // result.	WITHOUT_CLASSIFICATION	0.9999998929947451	WITHOUT_CLASSIFICATION	1.0700525492593604E-7	DEFECT
// relatively cheap test for 32-bit values	WITHOUT_CLASSIFICATION	0.9999994909679509	WITHOUT_CLASSIFICATION	5.09032049141546E-7	DEFECT
// no such luck...	WITHOUT_CLASSIFICATION	0.9999978595429813	WITHOUT_CLASSIFICATION	2.140457018707226E-6	DEFECT
// ok, now it gets expensive...	WITHOUT_CLASSIFICATION	0.999997744475285	WITHOUT_CLASSIFICATION	2.255524714971503E-6	DEFECT
// go through negated powers of 32 until we find one small enough 	WITHOUT_CLASSIFICATION	0.9999992301890958	WITHOUT_CLASSIFICATION	7.698109041900262E-7	DEFECT
// add to the corresponding positive power of 32 for the result. // meaningful? no. conformant? yes. I just write the code...	WITHOUT_CLASSIFICATION	0.9998643248201208	WITHOUT_CLASSIFICATION	1.3567517987918685E-4	DEFECT
/* constant vector a */	WITHOUT_CLASSIFICATION	0.9999918741190029	WITHOUT_CLASSIFICATION	8.125880997177977E-6	DEFECT
/* most significant w-r bits */	WITHOUT_CLASSIFICATION	0.9999974747691683	WITHOUT_CLASSIFICATION	2.5252308316679733E-6	DEFECT
/* least significant r bits */	WITHOUT_CLASSIFICATION	0.9999979023452591	WITHOUT_CLASSIFICATION	2.097654740948298E-6	DEFECT
// state[j] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999977286199984	WITHOUT_CLASSIFICATION	2.2713800016089288E-6	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999973958118165	WITHOUT_CLASSIFICATION	2.6041881835631596E-6	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999973958118165	WITHOUT_CLASSIFICATION	2.6041881835631596E-6	DEFECT
/* MSB is 1; assuring non-zero initial array */	WITHOUT_CLASSIFICATION	0.9999898798417843	WITHOUT_CLASSIFICATION	1.0120158215545714E-5	DEFECT
/* Tempering */	WITHOUT_CLASSIFICATION	0.9999445670711651	WITHOUT_CLASSIFICATION	5.543292883499383E-5	DEFECT
// MRI behavior: Week values are monotonous. // So, weeks that effectively belong to previous year, // will get the value of 0, not 52 or 53, as in Java.	WITHOUT_CLASSIFICATION	0.9999491205182492	WITHOUT_CLASSIFICATION	5.087948175070287E-5	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9999984535733196	WITHOUT_CLASSIFICATION	1.5464266803943389E-6	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9999984535733196	WITHOUT_CLASSIFICATION	1.5464266803943389E-6	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9999923587319257	WITHOUT_CLASSIFICATION	7.641268074351468E-6	DEFECT
//System.err.println("getSign()");	WITHOUT_CLASSIFICATION	0.9999922732395004	WITHOUT_CLASSIFICATION	7.726760499672648E-6	DEFECT
//System.err.println(" getSign/" + sign);	WITHOUT_CLASSIFICATION	0.999999040419936	WITHOUT_CLASSIFICATION	9.59580063987803E-7	DEFECT
//System.err.println("figureOutBase()/base=" + base);	WITHOUT_CLASSIFICATION	0.9999990496214797	WITHOUT_CLASSIFICATION	9.503785202483503E-7	DEFECT
//System.err.println(" figureOutBase/base=" + base);	WITHOUT_CLASSIFICATION	0.9999986145941105	WITHOUT_CLASSIFICATION	1.3854058894361868E-6	DEFECT
//System.err.println("calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9999990332983759	WITHOUT_CLASSIFICATION	9.667016240652666E-7	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999681417584079	WITHOUT_CLASSIFICATION	3.185824159205155E-5	DEFECT
//System.err.println(" stringToLong=" + val);	WITHOUT_CLASSIFICATION	0.9999978652140865	WITHOUT_CLASSIFICATION	2.134785913534533E-6	DEFECT
// no number	WITHOUT_CLASSIFICATION	0.9999968834253115	WITHOUT_CLASSIFICATION	3.116574688618679E-6	DEFECT
// trailing garbage	WITHOUT_CLASSIFICATION	0.9999964918858857	WITHOUT_CLASSIFICATION	3.5081141143576873E-6	DEFECT
//System.err.println("ADDING CHAR: " + (char)cx + " with number: " + cx);	WITHOUT_CLASSIFICATION	0.9999923453561614	WITHOUT_CLASSIFICATION	7.654643838514646E-6	DEFECT
// it was not found at all!	WITHOUT_CLASSIFICATION	0.9999739702971928	WITHOUT_CLASSIFICATION	2.602970280722201E-5	DEFECT
// can be overridden to be informed when objects are removed	WITHOUT_CLASSIFICATION	0.9999972858552206	WITHOUT_CLASSIFICATION	2.7141447794026307E-6	DEFECT
// we reached the end of a list	WITHOUT_CLASSIFICATION	0.9999981640666717	WITHOUT_CLASSIFICATION	1.8359333283070823E-6	DEFECT
// goto next bucket	WITHOUT_CLASSIFICATION	0.9999828614214004	WITHOUT_CLASSIFICATION	1.713857859964078E-5	DEFECT
// we reached the end	WITHOUT_CLASSIFICATION	0.999993442331929	WITHOUT_CLASSIFICATION	6.5576680709597674E-6	DEFECT
// entry is the first element of this bucket	WITHOUT_CLASSIFICATION	0.9999388965667745	WITHOUT_CLASSIFICATION	6.11034332255105E-5	DEFECT
// states	WITHOUT_CLASSIFICATION	0.999999202226242	WITHOUT_CLASSIFICATION	7.977737580076516E-7	DEFECT
// remove leading whitespace (includes _ for lax) // get sign, if any	WITHOUT_CLASSIFICATION	0.9999998168837013	WITHOUT_CLASSIFICATION	1.831162987360397E-7	DEFECT
// optimistic pass - calculate value as digits are processed // digits - lax rules // decimal digits - lax rules // exponent sign/digits - lax rules // digits - strict rules // decimal digits - strict rules // exponent sign/digits - strict rules // complete calculation if possible	WITHOUT_CLASSIFICATION	0.9999999144945193	WITHOUT_CLASSIFICATION	8.550548065983792E-8	DEFECT
// fields used for direct (optimistic) calculation // number of significant digits, updated as parsed // zeroes that may go to significand or exponent // offset of decimal pt from start (-1 -> no decimal) // significand, updated as parsed // exponent, updated as parsed	WITHOUT_CLASSIFICATION	0.9999999542156864	WITHOUT_CLASSIFICATION	4.5784313523361414E-8	DEFECT
// drop through for sign	WITHOUT_CLASSIFICATION	0.9999984160449445	WITHOUT_CLASSIFICATION	1.5839550553707683E-6	DEFECT
// switch // will use this if we have to go back the slow way	WITHOUT_CLASSIFICATION	0.9999988043818422	WITHOUT_CLASSIFICATION	1.1956181577782824E-6	DEFECT
// drop through for non-strict digits	WITHOUT_CLASSIFICATION	0.9999972512460835	WITHOUT_CLASSIFICATION	2.7487539165217447E-6	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999985948866345	WITHOUT_CLASSIFICATION	1.405113365621967E-6	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999971691653016	WITHOUT_CLASSIFICATION	2.8308346984195087E-6	DEFECT
// no digits, go calc (will return +/- 0.0 for lax)	WITHOUT_CLASSIFICATION	0.9999995680606597	WITHOUT_CLASSIFICATION	4.319393402552462E-7	DEFECT
// ignore leading zeroes	WITHOUT_CLASSIFICATION	0.9999917548680158	WITHOUT_CLASSIFICATION	8.245131984134782E-6	DEFECT
// just save a count of zeroes for now; if no digit // ends up following them, they'll be applied to the // exponent rather than the significand (and our max // length for optimistic calc).	WITHOUT_CLASSIFICATION	0.9999999962430072	WITHOUT_CLASSIFICATION	3.7569928085401794E-9	DEFECT
// ok, got a non-zero, have to own up to our horded zeroes	WITHOUT_CLASSIFICATION	0.9999995140243846	WITHOUT_CLASSIFICATION	4.859756153276499E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999991789401765	WITHOUT_CLASSIFICATION	8.21059823509383E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999991789401765	WITHOUT_CLASSIFICATION	8.21059823509383E-7	DEFECT
// oh, well, it was worth a try. go let // Double/FloatingDecimal handle it 	WITHOUT_CLASSIFICATION	0.9999997843080966	WITHOUT_CLASSIFICATION	2.1569190347489113E-7	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999970103949826	WITHOUT_CLASSIFICATION	2.989605017447011E-6	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999970103949826	WITHOUT_CLASSIFICATION	2.989605017447011E-6	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999990468767054	WITHOUT_CLASSIFICATION	9.531232945951891E-7	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999990468767054	WITHOUT_CLASSIFICATION	9.531232945951891E-7	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999962079363894	WITHOUT_CLASSIFICATION	3.792063610562928E-6	DEFECT
// first non_underscore char must be digit	WITHOUT_CLASSIFICATION	0.9999748292035175	WITHOUT_CLASSIFICATION	2.517079648251497E-5	DEFECT
// no dec digits, end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999993551134408	WITHOUT_CLASSIFICATION	6.448865591317232E-7	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999930292419489	WITHOUT_CLASSIFICATION	6.970758051044519E-6	DEFECT
// difficult case, send to Double/FloatingDecimal	WITHOUT_CLASSIFICATION	0.999999783742269	WITHOUT_CLASSIFICATION	2.1625773105606205E-7	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999920168382573	WITHOUT_CLASSIFICATION	7.983161742574342E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999920168382573	WITHOUT_CLASSIFICATION	7.983161742574342E-6	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999985948866345	WITHOUT_CLASSIFICATION	1.405113365621967E-6	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999985948866345	WITHOUT_CLASSIFICATION	1.405113365621967E-6	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999985948866345	WITHOUT_CLASSIFICATION	1.405113365621967E-6	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999971691653016	WITHOUT_CLASSIFICATION	2.8308346984195087E-6	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999991789401765	WITHOUT_CLASSIFICATION	8.21059823509383E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999991789401765	WITHOUT_CLASSIFICATION	8.21059823509383E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999991789401765	WITHOUT_CLASSIFICATION	8.21059823509383E-7	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999962079363894	WITHOUT_CLASSIFICATION	3.792063610562928E-6	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999962079363894	WITHOUT_CLASSIFICATION	3.792063610562928E-6	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999962079363894	WITHOUT_CLASSIFICATION	3.792063610562928E-6	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999930292419489	WITHOUT_CLASSIFICATION	6.970758051044519E-6	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999930292419489	WITHOUT_CLASSIFICATION	6.970758051044519E-6	DEFECT
// lax (str.to_f) allows underscores between e/E and sign	WITHOUT_CLASSIFICATION	0.9999994846181178	WITHOUT_CLASSIFICATION	5.153818820914884E-7	DEFECT
// switch // for // no exponent, so drop through for calculation	WITHOUT_CLASSIFICATION	0.9999993276080272	WITHOUT_CLASSIFICATION	6.723919727220146E-7	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999975786233388	WITHOUT_CLASSIFICATION	2.421376661238517E-6	DEFECT
// TODO: it's not clear to me why, in FloatingDecimal, the // "slop" calculation performed above for positive exponents // isn't used for negative exponents as well. Will find out...	WITHOUT_CLASSIFICATION	0.7231911906960092	DEFECT	0.2768088093039907	WITHOUT_CLASSIFICATION
// no digits, error	WITHOUT_CLASSIFICATION	0.9999861911482227	WITHOUT_CLASSIFICATION	1.3808851777282662E-5	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999952371402645	WITHOUT_CLASSIFICATION	4.7628597354792384E-6	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999952371402645	WITHOUT_CLASSIFICATION	4.7628597354792384E-6	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9999951698382185	WITHOUT_CLASSIFICATION	4.830161781474905E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999681417584079	WITHOUT_CLASSIFICATION	3.185824159205155E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999681417584079	WITHOUT_CLASSIFICATION	3.185824159205155E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999681417584079	WITHOUT_CLASSIFICATION	3.185824159205155E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999681417584079	WITHOUT_CLASSIFICATION	3.185824159205155E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999681417584079	WITHOUT_CLASSIFICATION	3.185824159205155E-5	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999994965631022	WITHOUT_CLASSIFICATION	5.034368978966697E-7	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999994965631022	WITHOUT_CLASSIFICATION	5.034368978966697E-7	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999994965631022	WITHOUT_CLASSIFICATION	5.034368978966697E-7	DEFECT
// first char must be digit	WITHOUT_CLASSIFICATION	0.9999721554811417	WITHOUT_CLASSIFICATION	2.7844518858318045E-5	DEFECT
// no dec digits after '.', error for strict	WITHOUT_CLASSIFICATION	0.9999826314932655	WITHOUT_CLASSIFICATION	1.736850673447724E-5	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999971691653016	WITHOUT_CLASSIFICATION	2.8308346984195087E-6	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999962079363894	WITHOUT_CLASSIFICATION	3.792063610562928E-6	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999962079363894	WITHOUT_CLASSIFICATION	3.792063610562928E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999681417584079	WITHOUT_CLASSIFICATION	3.185824159205155E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999681417584079	WITHOUT_CLASSIFICATION	3.185824159205155E-5	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999994965631022	WITHOUT_CLASSIFICATION	5.034368978966697E-7	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9999951698382185	WITHOUT_CLASSIFICATION	4.830161781474905E-6	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999994046062692	WITHOUT_CLASSIFICATION	5.953937306709645E-7	DEFECT
// switch //while	WITHOUT_CLASSIFICATION	0.9999956907686113	WITHOUT_CLASSIFICATION	4.309231388772119E-6	DEFECT
/*     * All the positive powers of 10 that can be     * represented exactly in double/float.     * (From sun.misc.FloatingDecimal.java)     */	WITHOUT_CLASSIFICATION	0.9999981177314341	WITHOUT_CLASSIFICATION	1.8822685657955636E-6	DEFECT
// Zlib behavior: negative win_bits means no header and no checksum.	WITHOUT_CLASSIFICATION	0.9999944614982628	WITHOUT_CLASSIFICATION	5.538501737299568E-6	DEFECT
// rb_enc_mbclen	WITHOUT_CLASSIFICATION	0.9999966610858102	WITHOUT_CLASSIFICATION	3.3389141898002844E-6	DEFECT
// rb_enc_precise_mbclen	WITHOUT_CLASSIFICATION	0.999994102353702	WITHOUT_CLASSIFICATION	5.8976462980876595E-6	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999938960795273	WITHOUT_CLASSIFICATION	6.103920472660692E-6	DEFECT
// arg cannot be negative	WITHOUT_CLASSIFICATION	0.9998620172658282	WITHOUT_CLASSIFICATION	1.3798273417168916E-4	DEFECT
// NoFunctionalitySignalFacade	WITHOUT_CLASSIFICATION	0.9999960389507757	WITHOUT_CLASSIFICATION	3.961049224252316E-6	DEFECT
// Change visibility so others can see it	WITHOUT_CLASSIFICATION	0.9999994293933383	WITHOUT_CLASSIFICATION	5.706066617800267E-7	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999988188683377	WITHOUT_CLASSIFICATION	1.1811316622696918E-6	DEFECT
// strip off "_dot_rb" for .rb files	WITHOUT_CLASSIFICATION	0.999998283539262	WITHOUT_CLASSIFICATION	1.7164607378790404E-6	DEFECT
// Makes sure the key is not already in the hashtable.	WITHOUT_CLASSIFICATION	0.9999871995311994	WITHOUT_CLASSIFICATION	1.2800468800489335E-5	DEFECT
// Rehash the table if the threshold is exceeded	WITHOUT_CLASSIFICATION	0.9999991718057334	WITHOUT_CLASSIFICATION	8.28194266604955E-7	DEFECT
// Creates the new entry.	WITHOUT_CLASSIFICATION	0.9999983178543128	WITHOUT_CLASSIFICATION	1.6821456871620111E-6	DEFECT
// next entry to return // current slot // current entry	WITHOUT_CLASSIFICATION	0.9999978588066633	WITHOUT_CLASSIFICATION	2.1411933366855744E-6	DEFECT
// advance to first entry	WITHOUT_CLASSIFICATION	0.9999978060644341	WITHOUT_CLASSIFICATION	2.1939355658850923E-6	DEFECT
// The reason why we need the stream is to be able to invoke available() on it. // STDIN in Java is non-interruptible, non-selectable, and attempt to read // on such stream might lead to thread being blocked without *any* way to unblock it. // That's where available() comes it, so at least we could check whether // anything is available to be read without blocking.	WITHOUT_CLASSIFICATION	0.9999752692815388	WITHOUT_CLASSIFICATION	2.4730718461213214E-5	DEFECT
/*package-protected*/	WITHOUT_CLASSIFICATION	0.9999806194467429	WITHOUT_CLASSIFICATION	1.938055325720201E-5	DEFECT
// raw file URL, just open directly	WITHOUT_CLASSIFICATION	0.9999995344467675	WITHOUT_CLASSIFICATION	4.6555323259570573E-7	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9999912968619522	WITHOUT_CLASSIFICATION	8.703138047729069E-6	DEFECT
// if refcount is at or below zero, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999984694789298	WITHOUT_CLASSIFICATION	1.530521070185855E-6	DEFECT
// if channel is already closed, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999975380337504	WITHOUT_CLASSIFICATION	2.461966249629514E-6	DEFECT
// otherwise decrement and possibly close as normal	WITHOUT_CLASSIFICATION	0.9999995655993792	WITHOUT_CLASSIFICATION	4.3440062092909837E-7	DEFECT
// r/w buffer // are we reading or writing?	WITHOUT_CLASSIFICATION	0.9997475783199304	WITHOUT_CLASSIFICATION	2.524216800696061E-4	DEFECT
// this constructor is used by fdopen, so we don't increment descriptor ref count	WITHOUT_CLASSIFICATION	0.9999862954878698	WITHOUT_CLASSIFICATION	1.370451213032432E-5	DEFECT
// unread back	WITHOUT_CLASSIFICATION	0.9999944911941289	WITHOUT_CLASSIFICATION	5.508805871087289E-6	DEFECT
// iterate over remainder of buffer until we find a match	WITHOUT_CLASSIFICATION	0.9999990831258833	WITHOUT_CLASSIFICATION	9.168741166445603E-7	DEFECT
// terminate and advance buffer when we find our char	WITHOUT_CLASSIFICATION	0.9999980460873902	WITHOUT_CLASSIFICATION	1.9539126098008586E-6	DEFECT
// no match, append remainder of buffer and continue with next block	WITHOUT_CLASSIFICATION	0.9999975207382237	WITHOUT_CLASSIFICATION	2.479261776402105E-6	DEFECT
// found a match above, check if remaining separator characters match, appending as we go	WITHOUT_CLASSIFICATION	0.999999923104796	WITHOUT_CLASSIFICATION	7.689520394326196E-8	DEFECT
// // Check file size - special files in /proc have zero size and need to be // handled by the generic read path. //	WITHOUT_CLASSIFICATION	0.9999995986758596	WITHOUT_CLASSIFICATION	4.013241403258018E-7	DEFECT
// // Copy any buffered data (including ungetc byte) //	WITHOUT_CLASSIFICATION	0.9999980178269218	WITHOUT_CLASSIFICATION	1.982173078211079E-6	DEFECT
// // Now read unbuffered directly from the file //	WITHOUT_CLASSIFICATION	0.9999919003283911	WITHOUT_CLASSIFICATION	8.099671608911242E-6	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999994046062692	WITHOUT_CLASSIFICATION	5.953937306709645E-7	DEFECT
// // Need to clamp source (buffer) size to avoid overrun //	WITHOUT_CLASSIFICATION	0.9999991536586904	WITHOUT_CLASSIFICATION	8.463413095823665E-7	DEFECT
// not closing from finalize	WITHOUT_CLASSIFICATION	0.9998252526659304	WITHOUT_CLASSIFICATION	1.7474733406956335E-4	DEFECT
// clear runtime so it doesn't get stuck in memory (JRUBY-2933)	WITHOUT_CLASSIFICATION	0.9999990440014573	WITHOUT_CLASSIFICATION	9.559985426758296E-7	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9999987390297764	WITHOUT_CLASSIFICATION	1.2609702235561084E-6	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9999987390297764	WITHOUT_CLASSIFICATION	1.2609702235561084E-6	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999738110320754	WITHOUT_CLASSIFICATION	2.6188967924593836E-5	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999738110320754	WITHOUT_CLASSIFICATION	2.6188967924593836E-5	DEFECT
// For Sockets, only write as much as will fit.	WITHOUT_CLASSIFICATION	0.9999885132537478	WITHOUT_CLASSIFICATION	1.148674625216468E-5	DEFECT
// Correct position for read / write buffering (we could invalidate, but expensive)	WITHOUT_CLASSIFICATION	0.9998894258997164	WITHOUT_CLASSIFICATION	1.1057410028355428E-4	DEFECT
// Adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999740734107443	WITHOUT_CLASSIFICATION	2.592658925570534E-5	DEFECT
// for SEEK_CUR, need to adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999818959306229	WITHOUT_CLASSIFICATION	1.8104069377056205E-5	DEFECT
// libc flushes writes on any read from the actual file, so we flush here	WITHOUT_CLASSIFICATION	0.9999993018228729	WITHOUT_CLASSIFICATION	6.98177127086293E-7	DEFECT
// we have read ahead, and need to back up	WITHOUT_CLASSIFICATION	0.9999994532953559	WITHOUT_CLASSIFICATION	5.467046440755965E-7	DEFECT
// 128K seems to be the minimum at which the stat+seek is faster than reallocation	WITHOUT_CLASSIFICATION	0.9999943233825571	WITHOUT_CLASSIFICATION	5.676617442936871E-6	DEFECT
// // limit each iteration to a max of BULK_READ_SIZE to avoid over-size allocations //	WITHOUT_CLASSIFICATION	0.9999988364685493	WITHOUT_CLASSIFICATION	1.1635314506744903E-6	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.999997535720576	WITHOUT_CLASSIFICATION	2.464279423978169E-6	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9999991996685987	WITHOUT_CLASSIFICATION	8.003314013432204E-7	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size //	WITHOUT_CLASSIFICATION	0.9999972943565895	WITHOUT_CLASSIFICATION	2.705643410497399E-6	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999995170945863	WITHOUT_CLASSIFICATION	4.829054135932029E-7	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999995170945863	WITHOUT_CLASSIFICATION	4.829054135932029E-7	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size, or // the destination is a direct buffer. //	WITHOUT_CLASSIFICATION	0.9999841512479305	WITHOUT_CLASSIFICATION	1.584875206940374E-5	DEFECT
// // We limit reads to BULK_READ_SIZED chunks to avoid NIO allocating // a huge temporary native buffer, when doing reads into a heap buffer // If the dst buffer is direct, then no need to limit. //	WITHOUT_CLASSIFICATION	0.9999986806836163	WITHOUT_CLASSIFICATION	1.319316383714531E-6	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999996323740233	WITHOUT_CLASSIFICATION	3.676259767481754E-7	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999996323740233	WITHOUT_CLASSIFICATION	3.676259767481754E-7	DEFECT
// Doesn't fit in buffer. Write immediately. // ensure nothing left to write	WITHOUT_CLASSIFICATION	0.999669682390397	WITHOUT_CLASSIFICATION	3.303176096030018E-4	DEFECT
// truncate can't lengthen files, so we save position, seek/write, and go back	WITHOUT_CLASSIFICATION	0.9999995318399546	WITHOUT_CLASSIFICATION	4.6816004550168966E-7	DEFECT
// how far ahead we are when reading	WITHOUT_CLASSIFICATION	0.9999507378170075	WITHOUT_CLASSIFICATION	4.926218299250886E-5	DEFECT
// if the read buffer is ahead, back up	WITHOUT_CLASSIFICATION	0.9999835630514374	WITHOUT_CLASSIFICATION	1.6436948562560005E-5	DEFECT
// close without removing from finalizers	WITHOUT_CLASSIFICATION	0.9999978657189267	WITHOUT_CLASSIFICATION	2.1342810734080474E-6	DEFECT
// putting a bit back, so we're not at EOF anymore	WITHOUT_CLASSIFICATION	0.9999691004126728	WITHOUT_CLASSIFICATION	3.0899587327146245E-5	DEFECT
// save the ungot	WITHOUT_CLASSIFICATION	0.9999985235025539	WITHOUT_CLASSIFICATION	1.476497446073414E-6	DEFECT
// otherwise, we try an unbuffered read to get whatever's available	WITHOUT_CLASSIFICATION	0.9999979761147814	WITHOUT_CLASSIFICATION	2.023885218685551E-6	DEFECT
// ignore this; select() will set the correct mode when it is finished	WITHOUT_CLASSIFICATION	0.9988754833275371	WITHOUT_CLASSIFICATION	0.001124516672462904	DEFECT
// flush first	WITHOUT_CLASSIFICATION	0.999993326179244	WITHOUT_CLASSIFICATION	6.6738207560464046E-6	DEFECT
// // Wake up any channels that became unblocked //	WITHOUT_CLASSIFICATION	0.9999951092554363	WITHOUT_CLASSIFICATION	4.890744563626798E-6	DEFECT
// // Register any new blocking I/O requests //	WITHOUT_CLASSIFICATION	0.9999995545614663	WITHOUT_CLASSIFICATION	4.454385337444972E-7	DEFECT
// Now clear out any previously selected channels	WITHOUT_CLASSIFICATION	0.9999998063283402	WITHOUT_CLASSIFICATION	1.936716598647307E-7	DEFECT
// // Wait for I/O on any channel //	WITHOUT_CLASSIFICATION	0.9999967877875277	WITHOUT_CLASSIFICATION	3.2122124722848414E-6	DEFECT
// Do not open as 'rw' by default since a file with read-only permissions will fail on 'rw'	WITHOUT_CLASSIFICATION	0.9999979844557088	WITHOUT_CLASSIFICATION	2.015544291201099E-6	DEFECT
// Java requires "w" for creating a file that does not exist	WITHOUT_CLASSIFICATION	0.9999985080997602	WITHOUT_CLASSIFICATION	1.4919002397584032E-6	DEFECT
// seek to force underlying buffer to flush	WITHOUT_CLASSIFICATION	0.9999922004217311	WITHOUT_CLASSIFICATION	7.799578268801781E-6	DEFECT
// seek to force read buffer to invalidate	WITHOUT_CLASSIFICATION	0.9999967310726252	WITHOUT_CLASSIFICATION	3.268927374704552E-6	DEFECT
/*        result = eval("arr = Array::['c', 200]; p arr");        assertEquals("[\"c\", 200]", result);        result = eval("arr = Array.['d', 200]; p arr");        assertEquals("[\"d\", 200]", result);        */	WITHOUT_CLASSIFICATION	0.9999884711135032	WITHOUT_CLASSIFICATION	1.1528886496791494E-5	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999839841596273	WITHOUT_CLASSIFICATION	1.60158403727802E-5	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.9795030106332981	WITHOUT_CLASSIFICATION	0.020496989366701836	DEFECT
// make sure the pipe stream is set to null	WITHOUT_CLASSIFICATION	0.9999975901081688	WITHOUT_CLASSIFICATION	2.4098918312968644E-6	DEFECT
// make sure the main stream is set to null	WITHOUT_CLASSIFICATION	0.9999977906298604	WITHOUT_CLASSIFICATION	2.20937013961179E-6	DEFECT
// first try our custom-generated Unsafe	WITHOUT_CLASSIFICATION	0.9999883579883964	WITHOUT_CLASSIFICATION	1.164201160371975E-5	DEFECT
// then try Sun's Unsafe	WITHOUT_CLASSIFICATION	0.9999686704068446	WITHOUT_CLASSIFICATION	3.1329593155444105E-5	DEFECT
// if we get here, the class and field exist; construct our Unsafe impl // that calls it directly	WITHOUT_CLASSIFICATION	0.9999967661918174	WITHOUT_CLASSIFICATION	3.2338081825518006E-6	DEFECT
// else leave it null	WITHOUT_CLASSIFICATION	0.9999885285911918	WITHOUT_CLASSIFICATION	1.147140880816416E-5	DEFECT
// TypeMatcher	WITHOUT_CLASSIFICATION	0.999969231756704	WITHOUT_CLASSIFICATION	3.076824329583638E-5	DEFECT
// This is now needed, since module Java // isn't in by default	WITHOUT_CLASSIFICATION	0.9999659040410336	WITHOUT_CLASSIFICATION	3.4095958966385065E-5	DEFECT
// Iterate over the RubyHash keySet, simultaneously iterating over the values()	WITHOUT_CLASSIFICATION	0.9999998183732515	WITHOUT_CLASSIFICATION	1.8162674862131992E-7	DEFECT
// Get the value from the map via the key	WITHOUT_CLASSIFICATION	0.999998035847478	WITHOUT_CLASSIFICATION	1.964152521999624E-6	DEFECT
// Get the value from the map via the values iterator	WITHOUT_CLASSIFICATION	0.9999995497758686	WITHOUT_CLASSIFICATION	4.5022413143004304E-7	DEFECT
// Check the 2 values obtained via different means	WITHOUT_CLASSIFICATION	0.9999995467795585	WITHOUT_CLASSIFICATION	4.5322044154644455E-7	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999975069415538	WITHOUT_CLASSIFICATION	2.4930584461723383E-6	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999975069415538	WITHOUT_CLASSIFICATION	2.4930584461723383E-6	DEFECT
// Check the entry.setValue values come back out ok	WITHOUT_CLASSIFICATION	0.999999074855038	WITHOUT_CLASSIFICATION	9.251449618842668E-7	DEFECT
// If we're running from within an IDE we may not have // the .rb files in our classpath. Try to find them // in the filesystem instead.	WITHOUT_CLASSIFICATION	0.9999912525040799	WITHOUT_CLASSIFICATION	8.747495920162794E-6	DEFECT
//assertEquals("\"foo\"\n\"bar\"", eval("$h.each {|val| p val}")); //assertEquals("[\"foo\", \"bar\"]", eval("p $h.each {|val| }"));	WITHOUT_CLASSIFICATION	0.9999958533165072	WITHOUT_CLASSIFICATION	4.14668349283871E-6	DEFECT
// Init	WITHOUT_CLASSIFICATION	0.9999935191231473	WITHOUT_CLASSIFICATION	6.480876852727542E-6	DEFECT
// Block	WITHOUT_CLASSIFICATION	0.9999921957620518	WITHOUT_CLASSIFICATION	7.804237948230906E-6	DEFECT
// Copy constructor	WITHOUT_CLASSIFICATION	0.9999969371209044	WITHOUT_CLASSIFICATION	3.0628790954654954E-6	DEFECT
// presumably this require should fail	WITHOUT_CLASSIFICATION	0.9999549941703386	WITHOUT_CLASSIFICATION	4.5005829661441274E-5	DEFECT
// JRUBY-646 // presumably this require should fail	WITHOUT_CLASSIFICATION	0.9999433971816385	WITHOUT_CLASSIFICATION	5.660281836160908E-5	DEFECT
// Test that requiring a normal Java class raises an error (JRUBY-3214	WITHOUT_CLASSIFICATION	0.9996420215659733	WITHOUT_CLASSIFICATION	3.579784340267822E-4	DEFECT
// ok	WITHOUT_CLASSIFICATION	0.9999927236204549	WITHOUT_CLASSIFICATION	7.2763795451079215E-6	DEFECT
// Function not used...but it gets rid of unused warnings in Eclipse (we do call those methods // from Ruby so they are not really unused).	WITHOUT_CLASSIFICATION	0.9999774155522767	WITHOUT_CLASSIFICATION	2.2584447723276804E-5	DEFECT
//load should work several times in a row	WITHOUT_CLASSIFICATION	0.9999201745919684	WITHOUT_CLASSIFICATION	7.982540803169041E-5	DEFECT
//reset the $loadTestvar	WITHOUT_CLASSIFICATION	0.9999834446830241	WITHOUT_CLASSIFICATION	1.655531697581886E-5	DEFECT
//call throwException via JRuby	WITHOUT_CLASSIFICATION	0.9999786458410801	WITHOUT_CLASSIFICATION	2.1354158919887625E-5	DEFECT
// Notify the calling thread that we're about to go to sleep the first time	WITHOUT_CLASSIFICATION	0.9999996342170568	WITHOUT_CLASSIFICATION	3.657829431162817E-7	DEFECT
// wait for the go signal	WITHOUT_CLASSIFICATION	0.9999995794097019	WITHOUT_CLASSIFICATION	4.2059029808273305E-7	DEFECT
// run ten separate calls into Ruby, with delay and explicit GC	WITHOUT_CLASSIFICATION	0.9999999840152425	WITHOUT_CLASSIFICATION	1.5984757510188596E-8	DEFECT
// wait until thread has initialized	WITHOUT_CLASSIFICATION	0.9999941910708727	WITHOUT_CLASSIFICATION	5.808929127234856E-6	DEFECT
// notify thread to proceed	WITHOUT_CLASSIFICATION	0.9999841857466932	WITHOUT_CLASSIFICATION	1.5814253306704884E-5	DEFECT
// wait until thread has completed	WITHOUT_CLASSIFICATION	0.9999987293068034	WITHOUT_CLASSIFICATION	1.2706931965209221E-6	DEFECT
// we do preand post load outside the "body" versions to pre-prepare // and pre-push the dynamic scope we need for lastline	WITHOUT_CLASSIFICATION	0.999999927369835	WITHOUT_CLASSIFICATION	7.263016507289194E-8	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999941018676	WITHOUT_CLASSIFICATION	5.8981323999346846E-6	DEFECT
// MRI behavior: raise ArgumentError for 'unknown command' before // checking number of args.	WITHOUT_CLASSIFICATION	0.9999893353323885	WITHOUT_CLASSIFICATION	1.0664667611578469E-5	DEFECT
// if any exceptions were raised, we fail	WITHOUT_CLASSIFICATION	0.9999918406812984	WITHOUT_CLASSIFICATION	8.159318701543533E-6	DEFECT
// there should only be one more thread in thread group than before we started	WITHOUT_CLASSIFICATION	0.999994269291054	WITHOUT_CLASSIFICATION	5.730708945947592E-6	DEFECT
// construct a new cache with thread's classloader and no limit	WITHOUT_CLASSIFICATION	0.9999986430491833	WITHOUT_CLASSIFICATION	1.3569508166397227E-6	DEFECT
//        Class<?> script1 = ((DefaultMethod) runtime1.getObject().getMethods().get("foo")).getJITCompilerScript().getClass(); //        Class<?> script2 = ((DefaultMethod) runtime2.getObject().getMethods().get("foo")).getJITCompilerScript().getClass();	WITHOUT_CLASSIFICATION	0.9999873039591455	WITHOUT_CLASSIFICATION	1.2696040854501079E-5	DEFECT
//        assertSame(script1, script2);	WITHOUT_CLASSIFICATION	0.9999970183086528	WITHOUT_CLASSIFICATION	2.9816913471145682E-6	DEFECT
// void methods should work	WITHOUT_CLASSIFICATION	0.9999277068287301	WITHOUT_CLASSIFICATION	7.229317126994048E-5	DEFECT
// methods with required = 4 or higher should bind and be callable using reflection // JRUBY-3649	WITHOUT_CLASSIFICATION	0.9999998440411212	WITHOUT_CLASSIFICATION	1.5595887886688323E-7	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.999998980322231	WITHOUT_CLASSIFICATION	1.0196777689972085E-6	DEFECT
// Ensure we have a new interpreter for each test. Previous we were using the //  same interpreter which caused problems as soon as one test failed.	WITHOUT_CLASSIFICATION	0.9999999797810306	WITHOUT_CLASSIFICATION	2.0218969375163483E-8	DEFECT
// Without a flush Ant will miss some of our output	WITHOUT_CLASSIFICATION	0.9999989436681502	WITHOUT_CLASSIFICATION	1.05633184971774E-6	DEFECT
// assertTrue(rubyObject.kind_of(ruby.getClasses().getStringClass()).isFalse());	WITHOUT_CLASSIFICATION	0.9999832634549756	WITHOUT_CLASSIFICATION	1.673654502436288E-5	DEFECT
//        int n = 10;	WITHOUT_CLASSIFICATION	0.9999878214324229	WITHOUT_CLASSIFICATION	1.2178567576984905E-5	DEFECT
// there might be more test classes in a single file, so we iterate over them	WITHOUT_CLASSIFICATION	0.9999998478775926	WITHOUT_CLASSIFICATION	1.5212240746199267E-7	DEFECT
//No ClassCastException!	WITHOUT_CLASSIFICATION	0.9999482601883054	WITHOUT_CLASSIFICATION	5.173981169454734E-5	DEFECT
// value equality	WITHOUT_CLASSIFICATION	0.9999974583181986	WITHOUT_CLASSIFICATION	2.5416818013198673E-6	DEFECT
// identity equality	WITHOUT_CLASSIFICATION	0.9999966743764912	WITHOUT_CLASSIFICATION	3.3256235088952957E-6	DEFECT
// bench straight-up integer fib(30)	WITHOUT_CLASSIFICATION	0.9999997680641346	WITHOUT_CLASSIFICATION	2.3193586545264716E-7	DEFECT
// bench Integer fib	WITHOUT_CLASSIFICATION	0.9999970230121988	WITHOUT_CLASSIFICATION	2.976987801263148E-6	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999913412489653	WITHOUT_CLASSIFICATION	8.658751034772971E-6	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999913412489653	WITHOUT_CLASSIFICATION	8.658751034772971E-6	DEFECT
// bench fixnum-boxed fib	WITHOUT_CLASSIFICATION	0.9999747571968493	WITHOUT_CLASSIFICATION	2.5242803150734998E-5	DEFECT
// bench straight-up long fib(30)	WITHOUT_CLASSIFICATION	0.9999998086196685	WITHOUT_CLASSIFICATION	1.913803314455641E-7	DEFECT
// bench Long fib	WITHOUT_CLASSIFICATION	0.9999955336880983	WITHOUT_CLASSIFICATION	4.4663119015991E-6	DEFECT
// skip this one, probably no 'ls' (windows)	WITHOUT_CLASSIFICATION	0.9999976790727375	WITHOUT_CLASSIFICATION	2.3209272625093947E-6	DEFECT
// start off with a neutral parent	WITHOUT_CLASSIFICATION	0.9999987955919154	WITHOUT_CLASSIFICATION	1.2044080846754014E-6	DEFECT
/*            public class Hello {                public static String getMessage() {                    return ".....";                }            }            */	WITHOUT_CLASSIFICATION	0.9999976273602466	WITHOUT_CLASSIFICATION	2.3726397534725953E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999976876799805	WITHOUT_CLASSIFICATION	2.312320019493588E-6	DEFECT
// Note: We can't use file.exists() to check whether the symlink // exists or not, because that method returns false for existing // but broken symlink. So, we try without the existence check, // but in the try-catch block. // MRI behavior: symlink? on broken symlink should return true.	WITHOUT_CLASSIFICATION	0.9998507930875609	WITHOUT_CLASSIFICATION	1.492069124391439E-4	DEFECT
// We are creating a new IO object that shares the same // IOHandler (and fileno).	WITHOUT_CLASSIFICATION	0.9999984633081564	WITHOUT_CLASSIFICATION	1.5366918436692483E-6	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999850346972506	WITHOUT_CLASSIFICATION	1.4965302749243035E-5	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9999932755722016	WITHOUT_CLASSIFICATION	6.724427798304103E-6	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9999991139685696	WITHOUT_CLASSIFICATION	8.860314305097351E-7	DEFECT
// Translate "x || y" --> "x = (is_true(x) ? x : y)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, true, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9998873935057179	WITHOUT_CLASSIFICATION	1.1260649428217267E-4	DEFECT
// // Force the client socket to be blocking //	WITHOUT_CLASSIFICATION	0.9999964381651673	WITHOUT_CLASSIFICATION	3.5618348328517527E-6	DEFECT
// Additional context surrounding tokens that both the lexer and // grammar use.	WITHOUT_CLASSIFICATION	0.9999999070716354	WITHOUT_CLASSIFICATION	9.292836463707653E-8	DEFECT
// Enebo:  c can never be antrhign but '.' // Why did I put this here?	WITHOUT_CLASSIFICATION	0.9960575125745335	WITHOUT_CLASSIFICATION	0.003942487425466487	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9999991292973993	WITHOUT_CLASSIFICATION	8.707026006782717E-7	DEFECT
//[C,C] //[C, boolean]	WITHOUT_CLASSIFICATION	0.9999897730295457	WITHOUT_CLASSIFICATION	1.0226970454305991E-5	DEFECT
// Label for the start of the closure (used to implement redo) // Label for the end of the closure (used to implement retry)	WITHOUT_CLASSIFICATION	0.9999997468228992	WITHOUT_CLASSIFICATION	2.5317710083120567E-7	DEFECT
// ignore; job was cancelled // FIXME: is this ok?	WITHOUT_CLASSIFICATION	0.7020989312779663	WITHOUT_CLASSIFICATION	0.2979010687220336	DEFECT
//                    // check arity //                    checkArity(mv, scope);	WITHOUT_CLASSIFICATION	0.9999960033837766	WITHOUT_CLASSIFICATION	3.996616223448026E-6	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9999813689043716	WITHOUT_CLASSIFICATION	1.8631095628403527E-5	DEFECT
// we take the first method found as our "n" method, since for any non-specific // arity they'll all error the same. If an actual "n" method is created, we // use that.	WITHOUT_CLASSIFICATION	0.9999997802015855	WITHOUT_CLASSIFICATION	2.1979841453403057E-7	DEFECT
// Used by our duck-typification of Proc into interface types, to allow // coercing a simple proc into an interface parameter.	WITHOUT_CLASSIFICATION	0.9999999440186628	WITHOUT_CLASSIFICATION	5.598133712931114E-8	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9999073581359695	WITHOUT_CLASSIFICATION	9.264186403044226E-5	DEFECT
// it's either as converted as we can make it via above logic or it's // not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999969820597818	WITHOUT_CLASSIFICATION	3.0179402181855925E-6	DEFECT
// package scheme 2: separate module for each full package name, constructed  // from the camel-cased package segments: Java::JavaLang::Object, 	WITHOUT_CLASSIFICATION	0.9999997283768975	WITHOUT_CLASSIFICATION	2.716231024725256E-7	DEFECT
// // construct the proxy method //	WITHOUT_CLASSIFICATION	0.9999984944801392	WITHOUT_CLASSIFICATION	1.5055198607621792E-6	DEFECT
// line 159 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9999986049419559	WITHOUT_CLASSIFICATION	1.3950580441015703E-6	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999941436337876	WITHOUT_CLASSIFICATION	5.856366212450943E-6	DEFECT
// line 152 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9999988095507151	WITHOUT_CLASSIFICATION	1.1904492848467112E-6	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.9999991243137082	WITHOUT_CLASSIFICATION	8.756862919223316E-7	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999941436337876	WITHOUT_CLASSIFICATION	5.856366212450943E-6	DEFECT
// We only need to pass in current scope if we are evaluating as a block (which // is only done for evals).  We need to pass this in so that we can appropriately scope // down to captured scopes when we are parsing.	WITHOUT_CLASSIFICATION	0.9999618552851424	WITHOUT_CLASSIFICATION	3.8144714857686724E-5	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9999972192024231	WITHOUT_CLASSIFICATION	2.780797576996547E-6	DEFECT
// A place to store that special hiding space that bindings need to implement things like: // eval("a = 1", binding); eval("p a").  All binding instances must get access to this // hidden shared scope.  We store it here.  This will be null if no binding has yet // been called.	WITHOUT_CLASSIFICATION	0.998830586392309	WITHOUT_CLASSIFICATION	0.001169413607690968	DEFECT
// TODO: make it 16 now ? // MUST be power of 2!	WITHOUT_CLASSIFICATION	0.6985621439590564	DEFECT	0.3014378560409438	WITHOUT_CLASSIFICATION
// check visibility // dup method	WITHOUT_CLASSIFICATION	0.99999884811741	WITHOUT_CLASSIFICATION	1.151882589985497E-6	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999992940375618	WITHOUT_CLASSIFICATION	7.059624382820913E-7	DEFECT
// unsigned int, native // unsigned long, native	WITHOUT_CLASSIFICATION	0.9999992125021048	WITHOUT_CLASSIFICATION	7.874978951648889E-7	DEFECT
//need padding //I'm fairly sure there is a library call to create a //string filled with a given char with a given length but I couldn't find it	WITHOUT_CLASSIFICATION	0.99986687250131	WITHOUT_CLASSIFICATION	1.331274986900461E-4	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9999996652818492	WITHOUT_CLASSIFICATION	3.3471815075311577E-7	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999839841596273	WITHOUT_CLASSIFICATION	1.60158403727802E-5	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999975786233388	WITHOUT_CLASSIFICATION	2.421376661238517E-6	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999847664079877	WITHOUT_CLASSIFICATION	1.523359201227569E-5	DEFECT
// Estimate the square root with the foremost 62 bits of squarD // bi and scale are a tandem	WITHOUT_CLASSIFICATION	0.9999971014121489	WITHOUT_CLASSIFICATION	2.898587851144229E-6	DEFECT
// captures // begin and end are used when not groups defined // source string	WITHOUT_CLASSIFICATION	0.9999983326716854	WITHOUT_CLASSIFICATION	1.6673283146404415E-6	DEFECT
// // INSTANCE VARIABLE RUBY METHODS //	WITHOUT_CLASSIFICATION	0.9999235244033644	WITHOUT_CLASSIFICATION	7.647559663554705E-5	DEFECT
// switch // while	WITHOUT_CLASSIFICATION	0.9999947795700971	WITHOUT_CLASSIFICATION	5.220429902994604E-6	DEFECT
// For nodes do not have their own scope so we pass null to indicate this. // 'For's are implemented as blocks in evaluation, but they have no scope so we // just deal with this lack of scope throughout its lifespan.  We should probably // change the way this works to get rid of multiple null checks.	WITHOUT_CLASSIFICATION	0.9997168836558996	WITHOUT_CLASSIFICATION	2.831163441003765E-4	DEFECT
// This field is used during argument processing to avoid putting RubyArray // instances that are purely for utility purposes into ObjectSpace.	WITHOUT_CLASSIFICATION	0.9999926706801628	WITHOUT_CLASSIFICATION	7.329319837173615E-6	DEFECT
// Parent container for this context (can be dynamic!!) // If dynamic, at runtime, this will be the meta-object corresponding to a class/script/module/method/closure // List of IR instructions for this method	WITHOUT_CLASSIFICATION	0.9999997898579471	WITHOUT_CLASSIFICATION	2.1014205291041667E-7	DEFECT
// Translate "ret = (a && b)" --> "ret = (a ? b : false)" --> //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is false if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = false    //    beq(v1, false, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9999784505118405	WITHOUT_CLASSIFICATION	2.154948815939066E-5	DEFECT
// expected	WITHOUT_CLASSIFICATION	0.9999966490782025	WITHOUT_CLASSIFICATION	3.350921797444044E-6	DEFECT
// Do nothing	WITHOUT_CLASSIFICATION	0.999988693010244	WITHOUT_CLASSIFICATION	1.1306989756004097E-5	DEFECT
// constructor	WITHOUT_CLASSIFICATION	0.9999974463223942	WITHOUT_CLASSIFICATION	2.5536776057789897E-6	DEFECT
// If a line is followed by a blank line put // it back.	WITHOUT_CLASSIFICATION	0.9999988255742752	WITHOUT_CLASSIFICATION	1.1744257247190226E-6	DEFECT
/* $>: default output handle */	WITHOUT_CLASSIFICATION	0.9999980522641199	WITHOUT_CLASSIFICATION	1.9477358801309684E-6	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.999993150986833	WITHOUT_CLASSIFICATION	6.849013167041943E-6	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999927353587187	WITHOUT_CLASSIFICATION	7.2646412811863E-6	DEFECT
// Signal uses sun.misc.* classes, this is not allowed // in the security-sensitive environments	WITHOUT_CLASSIFICATION	0.9999977016955081	WITHOUT_CLASSIFICATION	2.298304491861509E-6	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.999999874911299	WITHOUT_CLASSIFICATION	1.2508870100302819E-7	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999501889716843	WITHOUT_CLASSIFICATION	4.981102831575784E-5	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999501889716843	WITHOUT_CLASSIFICATION	4.981102831575784E-5	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999956524710546	WITHOUT_CLASSIFICATION	4.347528945484188E-6	DEFECT
// if there's no receiver, evaluate and pass in the superclass, or // pass self if it no superclass	WITHOUT_CLASSIFICATION	0.9999999175585622	WITHOUT_CLASSIFICATION	8.244143775085675E-8	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9999999044224333	WITHOUT_CLASSIFICATION	9.557756672508347E-8	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.7281020068217553	WITHOUT_CLASSIFICATION	0.2718979931782447	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.7281020068217553	WITHOUT_CLASSIFICATION	0.2718979931782447	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.7281020068217553	WITHOUT_CLASSIFICATION	0.2718979931782447	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.7281020068217553	WITHOUT_CLASSIFICATION	0.2718979931782447	DEFECT
// Decrease value to hit upper range.  	WITHOUT_CLASSIFICATION	0.9999993027395724	WITHOUT_CLASSIFICATION	6.972604276894967E-7	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999997150135987	WITHOUT_CLASSIFICATION	2.849864012158494E-7	DEFECT
// "else" body	WITHOUT_CLASSIFICATION	0.9999975342877029	WITHOUT_CLASSIFICATION	2.4657122971383823E-6	DEFECT
// done // done // done // Nothing to do for 1.8 // done // done // done // done // done // done // done? // done // done // done // done // done // done // done // done // done // done // done //            case DEFINEDNODE: return buildDefined(node, m); // Incomplete // done // done // done // done // done // done // done // done //            case ENSURENODE: return buildEnsureNode(node, m); // DEFERRED // done // done // done // done //            case FLIPNODE: return buildFlip(node, m); // SSS FIXME: What code generates this AST? // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done? // done // done // done // done // done // done -- partially //            case OPELEMENTASGNNODE: return buildOpElementAsgn(node, m); // DEFERRED SSS FIXME: What code generates this AST? // done //            case POSTEXENODE: return buildPostExe(node, m); // DEFERRED //            case PREEXENODE: return buildPreExe(node, m); // DEFERRED // done?? // done	WITHOUT_CLASSIFICATION	0.9684854261208251	WITHOUT_CLASSIFICATION	0.03151457387917498	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999966512692446	WITHOUT_CLASSIFICATION	3.3487307552868283E-6	DEFECT
/* $+: string matches last paren. */	WITHOUT_CLASSIFICATION	0.9999907620704379	WITHOUT_CLASSIFICATION	9.237929562082117E-6	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.999998735127534	WITHOUT_CLASSIFICATION	1.2648724659724285E-6	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.999998735127534	WITHOUT_CLASSIFICATION	1.2648724659724285E-6	DEFECT
// Ruby code frequently uses a platform check to choose "NUL:" on windows // but since that check doesn't work well on JRuby, we help it out	WITHOUT_CLASSIFICATION	0.9999246175889622	WITHOUT_CLASSIFICATION	7.53824110377592E-5	DEFECT
/* 10! */	WITHOUT_CLASSIFICATION	0.9999707105068797	WITHOUT_CLASSIFICATION	2.9289493120423737E-5	DEFECT
//            case RESCUENODE: return buildRescue(node, m); // DEFERRED //            case RETRYNODE: return buildRetry(node, m); // DEFERRED // done	WITHOUT_CLASSIFICATION	0.9999744190299931	WITHOUT_CLASSIFICATION	2.5580970006826526E-5	DEFECT
// Is this instruction live or dead?  During optimization passes, if this instruction // causes no side-effects and the result of the instruction is not needed by anyone else, // we can remove this instruction altogether without affecting program correctness.	WITHOUT_CLASSIFICATION	0.9999577584630099	WITHOUT_CLASSIFICATION	4.224153699003364E-5	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.999997352050745	WITHOUT_CLASSIFICATION	2.647949254930076E-6	DEFECT
// first, iterate over all required args	WITHOUT_CLASSIFICATION	0.9999997943769634	WITHOUT_CLASSIFICATION	2.056230364986896E-7	DEFECT
// // Determine if the parameter might be passed as a 32bit int parameter. // This just applies to buffer/pointer types. //	WITHOUT_CLASSIFICATION	0.9999982533467893	WITHOUT_CLASSIFICATION	1.7466532107619468E-6	DEFECT
//Keyword keyword = Keyword.getKeyword(tempVal, tempVal.length());	WITHOUT_CLASSIFICATION	0.9999927419342104	WITHOUT_CLASSIFICATION	7.258065789637475E-6	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999477568897341	WITHOUT_CLASSIFICATION	5.224311026576903E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999477568897341	WITHOUT_CLASSIFICATION	5.224311026576903E-5	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.9999991243137082	WITHOUT_CLASSIFICATION	8.756862919223316E-7	DEFECT
// line 449	WITHOUT_CLASSIFICATION	0.9999923484638512	WITHOUT_CLASSIFICATION	7.651536148780004E-6	DEFECT
// line 495	WITHOUT_CLASSIFICATION	0.9999916770935302	WITHOUT_CLASSIFICATION	8.322906469755707E-6	DEFECT
// Management/monitoring	WITHOUT_CLASSIFICATION	0.9999943855883761	WITHOUT_CLASSIFICATION	5.614411623937444E-6	DEFECT
// if we've found the last char of the separator, // and we've found at least as many characters as separator length, // and the last n characters of our buffer match the separator, we're done	WITHOUT_CLASSIFICATION	0.9999997254037325	WITHOUT_CLASSIFICATION	2.745962675414007E-7	DEFECT
/* 14! */	WITHOUT_CLASSIFICATION	0.9999625234359094	WITHOUT_CLASSIFICATION	3.7476564090554376E-5	DEFECT
// Process any set of annotations // No supported options	WITHOUT_CLASSIFICATION	0.9999961519168612	WITHOUT_CLASSIFICATION	3.848083138821458E-6	DEFECT
// add to the jitted methods set	WITHOUT_CLASSIFICATION	0.9999989544825404	WITHOUT_CLASSIFICATION	1.045517459603774E-6	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999884836089677	WITHOUT_CLASSIFICATION	1.1516391032264233E-5	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999884836089677	WITHOUT_CLASSIFICATION	1.1516391032264233E-5	DEFECT
//            case SCLASSNODE: return buildSClass(node, m); // DEFERRED // done // done // done // done // done // done // done // done //            case UNDEFNODE: return buildUndef(node, m); // DEFERRED // done //            case VALIASNODE: return buildVAlias(node, m); // DEFERRED // done // done	WITHOUT_CLASSIFICATION	0.9999840419980602	WITHOUT_CLASSIFICATION	1.5958001939752617E-5	DEFECT
// // Adding a post-invoke for the cb result serves to both keep it alive // until after the function returns, and allows us to clean up the native // trampoline early, instead of letting them accumulate until a GC run //	WITHOUT_CLASSIFICATION	0.9999999243871639	WITHOUT_CLASSIFICATION	7.561283602377439E-8	DEFECT
/* The Java method doesn't care what class it is, but we need to               know what to convert it to, so we use the object's own class.               If that doesn't help, we use String to force a call to the               object's "to_s" method. */	WITHOUT_CLASSIFICATION	0.9999877971863933	WITHOUT_CLASSIFICATION	1.2202813606756222E-5	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999850417383258	WITHOUT_CLASSIFICATION	1.4958261674266704E-5	DEFECT
// Atomic integers for symbol and method IDs	WITHOUT_CLASSIFICATION	0.9999996882323955	WITHOUT_CLASSIFICATION	3.1176760455193205E-7	DEFECT
/* 18! */	WITHOUT_CLASSIFICATION	0.9999729529630245	WITHOUT_CLASSIFICATION	2.704703697559872E-5	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9999940722474455	WITHOUT_CLASSIFICATION	5.927752554431668E-6	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999996155275507	WITHOUT_CLASSIFICATION	3.844724493521119E-7	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999996155275507	WITHOUT_CLASSIFICATION	3.844724493521119E-7	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999996155275507	WITHOUT_CLASSIFICATION	3.844724493521119E-7	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999996155275507	WITHOUT_CLASSIFICATION	3.844724493521119E-7	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999918356754486	WITHOUT_CLASSIFICATION	8.164324551329723E-6	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     * the result of this instruction.     *     * If the value map provides a value for any of the instruction's operands     * the expectation is that the operand will be replaced with the simplified value.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify.     *     * @param valueMap Mapping from operands to their simplified values     * @returns simplified result / output of this instruction     */	WITHOUT_CLASSIFICATION	0.9999861258139554	WITHOUT_CLASSIFICATION	1.3874186044592878E-5	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9999957612852938	WITHOUT_CLASSIFICATION	4.238714706270945E-6	DEFECT
// An atomic long for generating DynamicMethod serial numbers	WITHOUT_CLASSIFICATION	0.9999973626311928	WITHOUT_CLASSIFICATION	2.6373688071493852E-6	DEFECT
// MRI behavior: always check whether the file is writable // or not, even if we are to write 0 bytes.	WITHOUT_CLASSIFICATION	0.9999635423906389	WITHOUT_CLASSIFICATION	3.6457609361190616E-5	DEFECT
/* 22! */	WITHOUT_CLASSIFICATION	0.9999731574378092	WITHOUT_CLASSIFICATION	2.6842562190648043E-5	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999963011810162	WITHOUT_CLASSIFICATION	3.6988189837237837E-6	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999994189904489	WITHOUT_CLASSIFICATION	5.810095511416776E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999994189904489	WITHOUT_CLASSIFICATION	5.810095511416776E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999994189904489	WITHOUT_CLASSIFICATION	5.810095511416776E-7	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999965324262904	WITHOUT_CLASSIFICATION	3.4675737096459607E-6	DEFECT
// Build a new class and add it to the current scope (could be a script / module / class)	WITHOUT_CLASSIFICATION	0.9999998870730348	WITHOUT_CLASSIFICATION	1.1292696510330866E-7	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999988824622724	WITHOUT_CLASSIFICATION	1.1175377275349147E-6	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999988824622724	WITHOUT_CLASSIFICATION	1.1175377275349147E-6	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9999803591261532	WITHOUT_CLASSIFICATION	1.964087384675837E-5	DEFECT
//////////////////////////////////////////////////////////////////////////// // Now we provide default impls of a number of signatures. For each arity, // we first generate a non-block version of the method, which just adds // NULL_BLOCK and re-calls, allowing e.g. compiled code, which always can // potentially take a block, to only generate the block-receiving signature // and still avoid arg boxing. // // We then provide default implementations of each block-accepting method // that in turn call the IRubyObject[]+Block version of call. This then // finally falls back on the minimum implementation requirement for // dynamic method handles. ////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999998592205963	WITHOUT_CLASSIFICATION	1.4077940370096174E-7	DEFECT
// Because we implement Java interfaces now, we need a new === that's // aware of those additional "virtual" supertypes	WITHOUT_CLASSIFICATION	0.999999950760309	WITHOUT_CLASSIFICATION	4.923969102998978E-8	DEFECT
// BASE64	WITHOUT_CLASSIFICATION	0.9999819600699316	WITHOUT_CLASSIFICATION	1.803993006844272E-5	DEFECT
/* note nemes_gamma can return Double.POSITIVE_INFINITY or Double.NEGATIVE_INFINITY         * when value is an integer less than 1.         * We treat 0 as a special case to avoid Domain error.         */	WITHOUT_CLASSIFICATION	0.9999680739975197	WITHOUT_CLASSIFICATION	3.192600248015324E-5	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.999994788598269	WITHOUT_CLASSIFICATION	5.211401731137508E-6	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999996315551881	WITHOUT_CLASSIFICATION	3.6844481189564344E-7	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999996315551881	WITHOUT_CLASSIFICATION	3.6844481189564344E-7	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.999997566541977	WITHOUT_CLASSIFICATION	2.4334580228906438E-6	DEFECT
// SSS: Looks like we receive the arg in buildBlockArgsAssignment via the IterNode // We won't get here for argument receives!  So, buildDasgn is called for // assignments to block variables within a block.  As far as the IR is concerned, // this is just a simple copy	WITHOUT_CLASSIFICATION	0.9998976778879661	WITHOUT_CLASSIFICATION	1.0232211203382437E-4	DEFECT
// getSimplifiedOperand returns the value of this operand, fully simplified // getSimplifiedOperand returns the operand in a form that can be materialized into bytecode, if it cannot be completely optimized away // // The value is used during optimizations and propagated through the IR.  But, it is thrown away after that. // But, the operand form is used for constructing the compound objects represented by the operand. // // Example: a = [1], b = [3,4], c = [a,b], d = [2,c] //   -- getValue(c) = [1,[3,4]];     getSimplifiedOperand(c) = [1, b] //   -- getValue(d) = [2,[1,[3,4]]]; getSimplifiedOperand(d) = [2, c] // // Note that a,b,c,d are all objects, and c has a reference to objects a and b, and d has a reference to c. // So, if contents of a or b is modified, the "simplified value"s of c and d also change!  This difference // is captured by these two methods.	WITHOUT_CLASSIFICATION	0.9999897651998941	WITHOUT_CLASSIFICATION	1.0234800105926926E-5	DEFECT
//IRubyObject protocol = args[4];	WITHOUT_CLASSIFICATION	0.9999845926978511	WITHOUT_CLASSIFICATION	1.540730214882608E-5	DEFECT
// promise to implement three to N with block	WITHOUT_CLASSIFICATION	0.9999861727143289	WITHOUT_CLASSIFICATION	1.3827285671242643E-5	DEFECT
// Ruby's OMG capture all source in a Hash feature // Add each line to buffer when encountering newline or EOF for first time.	WITHOUT_CLASSIFICATION	0.9999992676229394	WITHOUT_CLASSIFICATION	7.323770606939097E-7	DEFECT
// carriage return	WITHOUT_CLASSIFICATION	0.9999969803519869	WITHOUT_CLASSIFICATION	3.0196480130954414E-6	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999511363029604	WITHOUT_CLASSIFICATION	4.886369703954642E-5	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.999989898425456	WITHOUT_CLASSIFICATION	1.0101574543981119E-5	DEFECT
// String construction routines by NOT byte[] buffer and making the target String shared 	WITHOUT_CLASSIFICATION	0.999995118339815	WITHOUT_CLASSIFICATION	4.8816601849678425E-6	DEFECT
// insert all nodes in sequence, hash them in the final instruction // KEY	WITHOUT_CLASSIFICATION	0.9999975025039524	WITHOUT_CLASSIFICATION	2.497496047697867E-6	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999985852000158	WITHOUT_CLASSIFICATION	1.4147999842630752E-6	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9998665225750736	WITHOUT_CLASSIFICATION	1.334774249264001E-4	DEFECT
// Basic Block id // CFG that this basic block belongs to // All basic blocks have a starting label // List of non-label instructions	WITHOUT_CLASSIFICATION	0.999999154010495	WITHOUT_CLASSIFICATION	8.459895049473243E-7	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999996165721203	WITHOUT_CLASSIFICATION	3.8342787965890383E-7	DEFECT
// For all uninitialized specific arities, we defer to the "n" method which // should raise appropriate error in all cases.	WITHOUT_CLASSIFICATION	0.9999844238640574	WITHOUT_CLASSIFICATION	1.557613594259818E-5	DEFECT
// implement is called to force this class to create stubs for all // methods in the given interface, so they'll show up in the list // of methods and be invocable without passing through method_missing	WITHOUT_CLASSIFICATION	0.9999998795229047	WITHOUT_CLASSIFICATION	1.2047709528605568E-7	DEFECT
// CASE IR instructions are dummy instructions  // -- all when/then clauses have been converted into if-then-else blocks	WITHOUT_CLASSIFICATION	0.9999997464850865	WITHOUT_CLASSIFICATION	2.5351491354324673E-7	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9999975467236037	WITHOUT_CLASSIFICATION	2.45327639624654E-6	DEFECT
// leave it null and fall back on our normal invocation logic	WITHOUT_CLASSIFICATION	0.9999984418742512	WITHOUT_CLASSIFICATION	1.5581257486500825E-6	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999989774029429	WITHOUT_CLASSIFICATION	1.0225970570977283E-6	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9999984520736598	WITHOUT_CLASSIFICATION	1.547926340130556E-6	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999826817543317	WITHOUT_CLASSIFICATION	1.7318245668364496E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999826817543317	WITHOUT_CLASSIFICATION	1.7318245668364496E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999826817543317	WITHOUT_CLASSIFICATION	1.7318245668364496E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999826817543317	WITHOUT_CLASSIFICATION	1.7318245668364496E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999826817543317	WITHOUT_CLASSIFICATION	1.7318245668364496E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999826817543317	WITHOUT_CLASSIFICATION	1.7318245668364496E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999826817543317	WITHOUT_CLASSIFICATION	1.7318245668364496E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999826817543317	WITHOUT_CLASSIFICATION	1.7318245668364496E-5	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9999991346397293	WITHOUT_CLASSIFICATION	8.653602706906517E-7	DEFECT
/* fall through */	WITHOUT_CLASSIFICATION	0.9999900496969055	WITHOUT_CLASSIFICATION	9.950303094482524E-6	DEFECT
// deal with case when "other" is not a string	WITHOUT_CLASSIFICATION	0.9999932172531213	WITHOUT_CLASSIFICATION	6.782746878599134E-6	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9988030972045314	WITHOUT_CLASSIFICATION	0.0011969027954685967	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999976876799805	WITHOUT_CLASSIFICATION	2.312320019493588E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999976876799805	WITHOUT_CLASSIFICATION	2.312320019493588E-6	DEFECT
// store argument count information into scope	WITHOUT_CLASSIFICATION	0.9999986580485148	WITHOUT_CLASSIFICATION	1.3419514851388451E-6	DEFECT
// the load method is used for loading as a top-level script, and prepares appropriate scoping around the code	WITHOUT_CLASSIFICATION	0.9999998059293322	WITHOUT_CLASSIFICATION	1.94070667809681E-7	DEFECT
// First, build assignments for specific named arguments	WITHOUT_CLASSIFICATION	0.9999998127869599	WITHOUT_CLASSIFICATION	1.8721304011868804E-7	DEFECT
//        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3) { throw fail(); } //        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { throw fail(); }	WITHOUT_CLASSIFICATION	0.9999777490546354	WITHOUT_CLASSIFICATION	2.2250945364475764E-5	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999876354349899	WITHOUT_CLASSIFICATION	1.2364565010107742E-5	DEFECT
// octal constant	WITHOUT_CLASSIFICATION	0.9999959825043018	WITHOUT_CLASSIFICATION	4.0174956981536996E-6	DEFECT
// read	WITHOUT_CLASSIFICATION	0.9999954834931261	WITHOUT_CLASSIFICATION	4.5165068739024015E-6	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9997898196393296	WITHOUT_CLASSIFICATION	2.1018036067029644E-4	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9999984671115941	WITHOUT_CLASSIFICATION	1.5328884058502317E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999992785679025	WITHOUT_CLASSIFICATION	7.214320975782537E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999992785679025	WITHOUT_CLASSIFICATION	7.214320975782537E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999992785679025	WITHOUT_CLASSIFICATION	7.214320975782537E-7	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9997696481215874	WITHOUT_CLASSIFICATION	2.303518784125733E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9997696481215874	WITHOUT_CLASSIFICATION	2.303518784125733E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9997696481215874	WITHOUT_CLASSIFICATION	2.303518784125733E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9997696481215874	WITHOUT_CLASSIFICATION	2.303518784125733E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9997696481215874	WITHOUT_CLASSIFICATION	2.303518784125733E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9997696481215874	WITHOUT_CLASSIFICATION	2.303518784125733E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9997696481215874	WITHOUT_CLASSIFICATION	2.303518784125733E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9997696481215874	WITHOUT_CLASSIFICATION	2.303518784125733E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9997696481215874	WITHOUT_CLASSIFICATION	2.303518784125733E-4	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999801604641954	WITHOUT_CLASSIFICATION	1.9839535804659332E-5	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9999967556925462	WITHOUT_CLASSIFICATION	3.2443074538189325E-6	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999945445599091	WITHOUT_CLASSIFICATION	5.4554400909222154E-6	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999957414694463	WITHOUT_CLASSIFICATION	4.258530553792218E-6	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9997696481215874	WITHOUT_CLASSIFICATION	2.303518784125733E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9997696481215874	WITHOUT_CLASSIFICATION	2.303518784125733E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9997696481215874	WITHOUT_CLASSIFICATION	2.303518784125733E-4	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999937439643236	WITHOUT_CLASSIFICATION	6.256035676423071E-6	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999991075513942	WITHOUT_CLASSIFICATION	8.924486057218083E-7	DEFECT
// fall back on empty env when security disallows environment var access (like in an applet)	WITHOUT_CLASSIFICATION	0.9999995282945744	WITHOUT_CLASSIFICATION	4.7170542552080743E-7	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999940150370022	WITHOUT_CLASSIFICATION	5.984962997784198E-6	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999940150370022	WITHOUT_CLASSIFICATION	5.984962997784198E-6	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999946153168723	WITHOUT_CLASSIFICATION	5.384683127757501E-6	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999960857241968	WITHOUT_CLASSIFICATION	3.914275803083161E-6	DEFECT
// nothing else to here - the module version will be // included in the class.	WITHOUT_CLASSIFICATION	0.9999963426018952	WITHOUT_CLASSIFICATION	3.657398104839502E-6	DEFECT
// JRUBY-1000, fail early when attempting to subclass a final Java class; // solved here by adding an exception-throwing "inherited"	WITHOUT_CLASSIFICATION	0.9999995420221206	WITHOUT_CLASSIFICATION	4.579778793977718E-7	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999941139956956	WITHOUT_CLASSIFICATION	5.886004304466906E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999941139956956	WITHOUT_CLASSIFICATION	5.886004304466906E-6	DEFECT
// Translate ret = (a || b) to ret = (a ? true : b) as follows //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is true if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = true //    beq(v1, true, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9999576353436075	WITHOUT_CLASSIFICATION	4.236465639254837E-5	DEFECT
// Initial precision is that of double numbers 2^63/2 ~ 4E18 // 63-1 an even number of number bits // precision seems 16 to 18 digits	WITHOUT_CLASSIFICATION	0.9999797526221492	WITHOUT_CLASSIFICATION	2.0247377850755412E-5	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999961443130727	WITHOUT_CLASSIFICATION	3.8556869272828056E-6	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999728455669233	WITHOUT_CLASSIFICATION	2.7154433076693174E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999728455669233	WITHOUT_CLASSIFICATION	2.7154433076693174E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999728455669233	WITHOUT_CLASSIFICATION	2.7154433076693174E-5	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999970471372422	WITHOUT_CLASSIFICATION	2.952862757696868E-6	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999990057575163	WITHOUT_CLASSIFICATION	9.942424837009003E-7	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999990057575163	WITHOUT_CLASSIFICATION	9.942424837009003E-7	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999918100627123	WITHOUT_CLASSIFICATION	8.189937287719237E-6	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999918100627123	WITHOUT_CLASSIFICATION	8.189937287719237E-6	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999996861351411	WITHOUT_CLASSIFICATION	3.1386485887043363E-7	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999994464139793	WITHOUT_CLASSIFICATION	5.53586020711461E-7	DEFECT
// No hex value after the 'x'.	WITHOUT_CLASSIFICATION	0.9999955106209951	WITHOUT_CLASSIFICATION	4.489379004789659E-6	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999893490250976	WITHOUT_CLASSIFICATION	1.0650974902288183E-5	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.999982698809357	WITHOUT_CLASSIFICATION	1.730119064307777E-5	DEFECT
// Let m be the exact digits precision in an earlier! loop	WITHOUT_CLASSIFICATION	0.9999972458269054	WITHOUT_CLASSIFICATION	2.7541730946322142E-6	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999996434631813	WITHOUT_CLASSIFICATION	3.565368187347118E-7	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999920168382573	WITHOUT_CLASSIFICATION	7.983161742574342E-6	DEFECT
// Label for the start of the method // Label for the end of the method	WITHOUT_CLASSIFICATION	0.9999993876308257	WITHOUT_CLASSIFICATION	6.123691742403932E-7	DEFECT
// comparisons & checks // checks if the operand is non-null and non-false // EQQ a === call used only for its conditional results, as in case/when, begin/rescue, ...	WITHOUT_CLASSIFICATION	0.9999998788301085	WITHOUT_CLASSIFICATION	1.2116989137551823E-7	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.9563068580042492	WITHOUT_CLASSIFICATION	0.04369314199575071	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999962800203082	WITHOUT_CLASSIFICATION	3.719979691993931E-6	DEFECT
// all done with lookup attempts, release monitor	WITHOUT_CLASSIFICATION	0.9999996595346983	WITHOUT_CLASSIFICATION	3.40465301735654E-7	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999969255094969	WITHOUT_CLASSIFICATION	3.0744905030530314E-6	DEFECT
// Create list of interface names to proxy (and make sure they really are interfaces) // Also build a hashcode from all classes to use for retrieving previously-created impl	WITHOUT_CLASSIFICATION	0.9999998211360223	WITHOUT_CLASSIFICATION	1.7886397784195274E-7	DEFECT
// Construct local variables based on parameter names passed in	WITHOUT_CLASSIFICATION	0.999999200323465	WITHOUT_CLASSIFICATION	7.996765350026245E-7	DEFECT
// Value of "TZ" property is of a bit different format, // which confuses the Java's TimeZone.getTimeZone(id) method, // and so, we need to convert it.	WITHOUT_CLASSIFICATION	0.9999968217603273	WITHOUT_CLASSIFICATION	3.1782396726825305E-6	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9999996954176661	WITHOUT_CLASSIFICATION	3.045823338678226E-7	DEFECT
// ensure the object is associated with the wrapper we found it in, // so that if it comes back we don't re-wrap it	WITHOUT_CLASSIFICATION	0.9999729034196592	WITHOUT_CLASSIFICATION	2.709658034086666E-5	DEFECT
// return sqrt(squarD) with precision of rootMC	WITHOUT_CLASSIFICATION	0.9999908838925088	WITHOUT_CLASSIFICATION	9.116107491264769E-6	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999847664079877	WITHOUT_CLASSIFICATION	1.523359201227569E-5	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9999670731033198	WITHOUT_CLASSIFICATION	3.2926896680168175E-5	DEFECT
// Get a new label using the provided label prefix	WITHOUT_CLASSIFICATION	0.9999999202191986	WITHOUT_CLASSIFICATION	7.978080139893519E-8	DEFECT
// normal exit, perform finally and return	WITHOUT_CLASSIFICATION	0.9999872329387084	WITHOUT_CLASSIFICATION	1.2767061291613052E-5	DEFECT
// coerce arguments	WITHOUT_CLASSIFICATION	0.9999992220220748	WITHOUT_CLASSIFICATION	7.779779251442022E-7	DEFECT
// 0.0 is ok // float range // inverted float range? // NaN // +infinity // -infinity	WITHOUT_CLASSIFICATION	0.9999917273096329	WITHOUT_CLASSIFICATION	8.27269036714717E-6	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999858159681985	WITHOUT_CLASSIFICATION	1.4184031801460616E-5	DEFECT
// set this class's method names in var @__java_ovrd_methods if this // is the new class; otherwise, get method names from there if this is // a proxy superclass.	WITHOUT_CLASSIFICATION	0.9999992839207595	WITHOUT_CLASSIFICATION	7.160792405219097E-7	DEFECT
/* ignore backslashed spaces in %w */	WITHOUT_CLASSIFICATION	0.9999996854878341	WITHOUT_CLASSIFICATION	3.145121658270478E-7	DEFECT
// Invert the sign, since TZ format and Java format // use opposite signs, sigh... Also, Java API requires // the sign to be always present, be it "+" or "-".	WITHOUT_CLASSIFICATION	0.9999999955506319	WITHOUT_CLASSIFICATION	4.449368057474413E-9	DEFECT
// no binding given, use 0 for both	WITHOUT_CLASSIFICATION	0.9999994253455126	WITHOUT_CLASSIFICATION	5.746544874287915E-7	DEFECT
// <=> may return nil in many circumstances, e.g. 3 <=> NaN        	WITHOUT_CLASSIFICATION	0.9999995660033066	WITHOUT_CLASSIFICATION	4.3399669330908726E-7	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999992402583632	WITHOUT_CLASSIFICATION	7.59741636795834E-7	DEFECT
// Always use "GMT" since that's required by Java API.	WITHOUT_CLASSIFICATION	0.9999999471504161	WITHOUT_CLASSIFICATION	5.2849583923001244E-8	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9999980968787082	WITHOUT_CLASSIFICATION	1.9031212917722792E-6	DEFECT
// The dataStruct is a place where custom information can be // contained for core implementations that doesn't necessarily // want to go to the trouble of creating a subclass of // RubyObject. The OpenSSL implementation uses this heavily to // save holder objects containing Java cryptography objects. // Java integration uses this to store the Java object ref. //protected transient Object dataStruct;	WITHOUT_CLASSIFICATION	0.9999569146944043	WITHOUT_CLASSIFICATION	4.3085305595705234E-5	DEFECT
// Remaining arguments are for the script itself	WITHOUT_CLASSIFICATION	0.9999995005956069	WITHOUT_CLASSIFICATION	4.994043930053668E-7	DEFECT
// arg grouping, use slower arg walking logic	WITHOUT_CLASSIFICATION	0.9999998237559399	WITHOUT_CLASSIFICATION	1.7624406010762796E-7	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999934452252701	WITHOUT_CLASSIFICATION	6.5547747298443254E-6	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.999998134075236	WITHOUT_CLASSIFICATION	1.8659247641071559E-6	DEFECT
// Here we create an "anonymous" exception type used for unrolling the stack. // MRI creates a new one for *every call* to timeout, which can be costly. // We opt to use a single exception type for all cases to avoid this overhead.	WITHOUT_CLASSIFICATION	0.9999997672976013	WITHOUT_CLASSIFICATION	2.3270239871527226E-7	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9999914204003921	WITHOUT_CLASSIFICATION	8.57959960789583E-6	DEFECT
// MRI behavior: With TZ equal to "GMT" or "UTC", Time.now // is *NOT* considered as a proper GMT/UTC time: //   ENV['TZ']="GMT" //   Time.now.gmt? ==> false //   ENV['TZ']="UTC" //   Time.now.utc? ==> false // Hence, we need to adjust for that.	WITHOUT_CLASSIFICATION	0.9999760296140295	WITHOUT_CLASSIFICATION	2.3970385970451667E-5	DEFECT
// ?l  | boolean | True if file1 exists and is a symbolic link	WITHOUT_CLASSIFICATION	0.9999973478414768	WITHOUT_CLASSIFICATION	2.6521585231797774E-6	DEFECT
// This try/catch is to allow failing over to the "commands" logic // when running from within a jruby-complete jar file, which has // jruby.home = a jar file URL that does not resolve correctly with // JRubyFile.create.	WITHOUT_CLASSIFICATION	0.9999908821962528	WITHOUT_CLASSIFICATION	9.117803747227878E-6	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999966700902455	WITHOUT_CLASSIFICATION	3.32990975452549E-6	DEFECT
// specific arity	WITHOUT_CLASSIFICATION	0.9999980289603285	WITHOUT_CLASSIFICATION	1.9710396715006357E-6	DEFECT
// In the case of two arguments, MRI will discard the portion of // the first argument after a decimal point (i.e., "floor"). // However in the case of a single argument, any portion after // the decimal point is honored.	WITHOUT_CLASSIFICATION	0.9999999971020763	WITHOUT_CLASSIFICATION	2.897923663224805E-9	DEFECT
// ?w  | boolean | True if file1 exists and is writable by effective uid/gid	WITHOUT_CLASSIFICATION	0.9999987634050804	WITHOUT_CLASSIFICATION	1.2365949195127677E-6	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999208951388234	WITHOUT_CLASSIFICATION	7.910486117663354E-5	DEFECT
/*    @JRubyMethod    public IRubyObject to_proc() {        return RubyProc.newProc(getRuntime(),                                CallBlock.newCallClosure(this, getRuntime().getSymbol(), Arity.noArguments(), new ToProcCallback(this), getRuntime().getCurrentContext()),                                Block.Type.PROC);    }    */	WITHOUT_CLASSIFICATION	0.999980638621971	WITHOUT_CLASSIFICATION	1.9361378029110422E-5	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999952374790251	WITHOUT_CLASSIFICATION	4.762520974936438E-6	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999952374790251	WITHOUT_CLASSIFICATION	4.762520974936438E-6	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999941568410682	WITHOUT_CLASSIFICATION	5.8431589317924455E-6	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999941568410682	WITHOUT_CLASSIFICATION	5.8431589317924455E-6	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999934763872702	WITHOUT_CLASSIFICATION	6.523612729798988E-6	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999934763872702	WITHOUT_CLASSIFICATION	6.523612729798988E-6	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999905073772994	WITHOUT_CLASSIFICATION	9.492622700463231E-6	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999905073772994	WITHOUT_CLASSIFICATION	9.492622700463231E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999991013095211	WITHOUT_CLASSIFICATION	8.986904790272999E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999991013095211	WITHOUT_CLASSIFICATION	8.986904790272999E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999991013095211	WITHOUT_CLASSIFICATION	8.986904790272999E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999991013095211	WITHOUT_CLASSIFICATION	8.986904790272999E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999991013095211	WITHOUT_CLASSIFICATION	8.986904790272999E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999991013095211	WITHOUT_CLASSIFICATION	8.986904790272999E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999991013095211	WITHOUT_CLASSIFICATION	8.986904790272999E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999991013095211	WITHOUT_CLASSIFICATION	8.986904790272999E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999991013095211	WITHOUT_CLASSIFICATION	8.986904790272999E-7	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999969873439429	WITHOUT_CLASSIFICATION	3.0126560570700616E-6	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999969873439429	WITHOUT_CLASSIFICATION	3.0126560570700616E-6	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999969873439429	WITHOUT_CLASSIFICATION	3.0126560570700616E-6	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999984054320071	WITHOUT_CLASSIFICATION	1.5945679928107487E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999962967861804	WITHOUT_CLASSIFICATION	3.7032138195390787E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999962967861804	WITHOUT_CLASSIFICATION	3.7032138195390787E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999962967861804	WITHOUT_CLASSIFICATION	3.7032138195390787E-6	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999993610300333	WITHOUT_CLASSIFICATION	6.389699667258216E-7	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999993610300333	WITHOUT_CLASSIFICATION	6.389699667258216E-7	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999993610300333	WITHOUT_CLASSIFICATION	6.389699667258216E-7	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999302082466692	WITHOUT_CLASSIFICATION	6.979175333073863E-5	DEFECT
// backspace	WITHOUT_CLASSIFICATION	0.9999920281699907	WITHOUT_CLASSIFICATION	7.971830009269501E-6	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999380688107493	WITHOUT_CLASSIFICATION	6.193118925070026E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999309453761458	WITHOUT_CLASSIFICATION	6.905462385414291E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999309453761458	WITHOUT_CLASSIFICATION	6.905462385414291E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999309453761458	WITHOUT_CLASSIFICATION	6.905462385414291E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999958744037568	WITHOUT_CLASSIFICATION	4.125596243152424E-6	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999938648440027	WITHOUT_CLASSIFICATION	6.135155997371731E-6	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999938648440027	WITHOUT_CLASSIFICATION	6.135155997371731E-6	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9999934302835484	WITHOUT_CLASSIFICATION	6.569716451632185E-6	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9998679113291865	WITHOUT_CLASSIFICATION	1.3208867081344737E-4	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9998679113291865	WITHOUT_CLASSIFICATION	1.3208867081344737E-4	DEFECT
/**      * Nested class whose instances act as thunks reacting to to_str method     * called from (Exception#to_str, Exception#message)     * MRI equivalent: rb_cNameErrorMesg, class name: "message", construction method: "!",     * to_str implementation: "name_err_mesg_to_str"     *     * TODO: this class should not be lookupable     */	WITHOUT_CLASSIFICATION	0.9509960703095266	DEFECT	0.049003929690473444	WITHOUT_CLASSIFICATION
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9999705993744485	WITHOUT_CLASSIFICATION	2.9400625551423425E-5	DEFECT
// The name of this source (e.g. a filename: foo.rb)	WITHOUT_CLASSIFICATION	0.999976289052546	WITHOUT_CLASSIFICATION	2.3710947454037123E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999683273112282	WITHOUT_CLASSIFICATION	3.167268877184265E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999683273112282	WITHOUT_CLASSIFICATION	3.167268877184265E-5	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9999811327213385	WITHOUT_CLASSIFICATION	1.8867278661470456E-5	DEFECT
// We yield here to hopefully permit the target thread to schedule // MRI immediately schedules it, so this is close but not exact	WITHOUT_CLASSIFICATION	0.9997670714956991	WITHOUT_CLASSIFICATION	2.3292850430090827E-4	DEFECT
// note that addMethod now does its own put, so any change made to // functionality here should be made there as well 	WITHOUT_CLASSIFICATION	0.9999966684510073	WITHOUT_CLASSIFICATION	3.331548992724745E-6	DEFECT
/* Currently dead code, but useful when we figure out how to actually perform translit.    private static boolean isTranslit(String encoding) {        return encoding.toLowerCase().indexOf(TRANSLIT) != -1 ? true : false;    }*/	WITHOUT_CLASSIFICATION	0.9990104148597067	WITHOUT_CLASSIFICATION	9.89585140293364E-4	DEFECT
// empirically it appears that to_ary coersions always return array or nil, so this // should always be an array by now.	WITHOUT_CLASSIFICATION	0.9997167245122736	WITHOUT_CLASSIFICATION	2.832754877264505E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999683273112282	WITHOUT_CLASSIFICATION	3.167268877184265E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999683273112282	WITHOUT_CLASSIFICATION	3.167268877184265E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999683273112282	WITHOUT_CLASSIFICATION	3.167268877184265E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999683273112282	WITHOUT_CLASSIFICATION	3.167268877184265E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999683273112282	WITHOUT_CLASSIFICATION	3.167268877184265E-5	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999928457400948	WITHOUT_CLASSIFICATION	7.154259905085824E-6	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9999955761191984	WITHOUT_CLASSIFICATION	4.4238808016100605E-6	DEFECT
// if it's an inner class and it's not public, we can't access it; // skip population of declared elements	WITHOUT_CLASSIFICATION	0.999981015306968	WITHOUT_CLASSIFICATION	1.8984693031940497E-5	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9999958542260108	WITHOUT_CLASSIFICATION	4.145773989219277E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999928251794077	WITHOUT_CLASSIFICATION	7.174820592332061E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999928251794077	WITHOUT_CLASSIFICATION	7.174820592332061E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999928251794077	WITHOUT_CLASSIFICATION	7.174820592332061E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999928251794077	WITHOUT_CLASSIFICATION	7.174820592332061E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999928251794077	WITHOUT_CLASSIFICATION	7.174820592332061E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999928251794077	WITHOUT_CLASSIFICATION	7.174820592332061E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999928251794077	WITHOUT_CLASSIFICATION	7.174820592332061E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999928251794077	WITHOUT_CLASSIFICATION	7.174820592332061E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999928251794077	WITHOUT_CLASSIFICATION	7.174820592332061E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999928251794077	WITHOUT_CLASSIFICATION	7.174820592332061E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999928251794077	WITHOUT_CLASSIFICATION	7.174820592332061E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999928251794077	WITHOUT_CLASSIFICATION	7.174820592332061E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999928251794077	WITHOUT_CLASSIFICATION	7.174820592332061E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999928251794077	WITHOUT_CLASSIFICATION	7.174820592332061E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999928251794077	WITHOUT_CLASSIFICATION	7.174820592332061E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999928251794077	WITHOUT_CLASSIFICATION	7.174820592332061E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999928251794077	WITHOUT_CLASSIFICATION	7.174820592332061E-6	DEFECT
// MRI behavior on Windows: it treats '/' as a root of // a current drive (but only if SINGLE slash is present!): // E.g., if current work directory is // 'D:/home/directory', then '/' means 'D:/'. // // Basically, '/path' is treated as a *RELATIVE* path, // relative to the current drive. '//path' is treated // as absolute one.	WITHOUT_CLASSIFICATION	0.9999983819661091	WITHOUT_CLASSIFICATION	1.6180338909446473E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999928251794077	WITHOUT_CLASSIFICATION	7.174820592332061E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999928251794077	WITHOUT_CLASSIFICATION	7.174820592332061E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999928251794077	WITHOUT_CLASSIFICATION	7.174820592332061E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999928251794077	WITHOUT_CLASSIFICATION	7.174820592332061E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999928251794077	WITHOUT_CLASSIFICATION	7.174820592332061E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999928251794077	WITHOUT_CLASSIFICATION	7.174820592332061E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999928251794077	WITHOUT_CLASSIFICATION	7.174820592332061E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999928251794077	WITHOUT_CLASSIFICATION	7.174820592332061E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999928251794077	WITHOUT_CLASSIFICATION	7.174820592332061E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999928251794077	WITHOUT_CLASSIFICATION	7.174820592332061E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999928251794077	WITHOUT_CLASSIFICATION	7.174820592332061E-6	DEFECT
// This is needed when the enclosing class or module is a singleton. // In that case, we generated a name such as null::Foo, which broke  // Marshalling, among others. The correct thing to do in this situation  // is to insert the generate the name of form #<Class:01xasdfasd> if  // it's a singleton module/class, which this code accomplishes.	WITHOUT_CLASSIFICATION	0.9973033878719915	WITHOUT_CLASSIFICATION	0.0026966121280086073	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9999555433470664	WITHOUT_CLASSIFICATION	4.445665293357835E-5	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999976711854359	WITHOUT_CLASSIFICATION	2.3288145640689713E-6	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999970516632257	WITHOUT_CLASSIFICATION	2.948336774266016E-6	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9999961112298118	WITHOUT_CLASSIFICATION	3.888770188191719E-6	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9999813689043716	WITHOUT_CLASSIFICATION	1.8631095628403527E-5	DEFECT
// only public methods	WITHOUT_CLASSIFICATION	0.9999985619875382	WITHOUT_CLASSIFICATION	1.4380124616777706E-6	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999989982231339	WITHOUT_CLASSIFICATION	1.0017768660772518E-6	DEFECT
// First try to use drive letter from supplied dir value, // then try current work dir.	WITHOUT_CLASSIFICATION	0.9999958340117496	WITHOUT_CLASSIFICATION	4.165988250343358E-6	DEFECT
// JRUBY-2435: Aliasing eval and other "special" methods should display a warning // We warn because we treat certain method names as "special" for purposes of // optimization. Hopefully this will be enough to convince people not to alias // them.	WITHOUT_CLASSIFICATION	0.9999877050501718	WITHOUT_CLASSIFICATION	1.2294949828222692E-5	DEFECT
// generate a real method signature for the method, with to/from coercions	WITHOUT_CLASSIFICATION	0.9999999140142787	WITHOUT_CLASSIFICATION	8.598572128773838E-8	DEFECT
// block argument to the method // closure present // class present // method table mutations, def, defs, undef, alias // likely call to eval // makes calls that are aware of the frame // makes calls that are aware of the frame's self // makes calls that are aware of the frame's visibility // makes calls that are aware of the frame's block // makes calls that are aware of the frame's name // makes calls that set or get backref // makes calls that set or get lastline // makes calls that are aware of the frame's class // optional arguments to the method // rest arg to the method // makes calls that are aware of the scope // makes a zero-argument super call // accesses or sets constants // accesses or sets class variables // makes normal super call // contains a retry	WITHOUT_CLASSIFICATION	0.9999999941284982	WITHOUT_CLASSIFICATION	5.871501868167865E-9	DEFECT
// // Add aliases in Type::*, NativeType::* and FFI::TYPE_* //	WITHOUT_CLASSIFICATION	0.9999959471587077	WITHOUT_CLASSIFICATION	4.052841292336987E-6	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999974217218255	WITHOUT_CLASSIFICATION	2.578278174525799E-6	DEFECT
// double-testing args.length here, but it avoids duplicating the proc-setup code in two places	WITHOUT_CLASSIFICATION	0.9999999035878134	WITHOUT_CLASSIFICATION	9.641218665945459E-8	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999989076495397	WITHOUT_CLASSIFICATION	1.092350460393678E-6	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999850346972506	WITHOUT_CLASSIFICATION	1.4965302749243035E-5	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999860460823415	WITHOUT_CLASSIFICATION	1.3953917658355339E-5	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999860460823415	WITHOUT_CLASSIFICATION	1.3953917658355339E-5	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999860460823415	WITHOUT_CLASSIFICATION	1.3953917658355339E-5	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999860460823415	WITHOUT_CLASSIFICATION	1.3953917658355339E-5	DEFECT
// snapshot of contents of directory // current position in directory	WITHOUT_CLASSIFICATION	0.9999948393519466	WITHOUT_CLASSIFICATION	5.160648053447549E-6	DEFECT
// Exclusive locks in Java require the channel to be writable, otherwise // an exception is thrown (terminating JRuby execution). // But flock behavior of MRI is that it allows // exclusive locks even on non-writable file. So we convert exclusive // lock to shared lock if the channel is not writable, to better match // the MRI behavior.	WITHOUT_CLASSIFICATION	0.9999146356770237	WITHOUT_CLASSIFICATION	8.536432297636792E-5	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999988973685985	WITHOUT_CLASSIFICATION	1.1026314015715187E-6	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999988973685985	WITHOUT_CLASSIFICATION	1.1026314015715187E-6	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999986873853736	WITHOUT_CLASSIFICATION	1.3126146264060793E-6	DEFECT
/* ---------- Public fields, methods --------- */	WITHOUT_CLASSIFICATION	0.999996812486729	WITHOUT_CLASSIFICATION	3.1875132710500007E-6	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9999999764640873	WITHOUT_CLASSIFICATION	2.3535912769756363E-8	DEFECT
// zero args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999955985501848	WITHOUT_CLASSIFICATION	4.401449815221245E-6	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9999949254421561	WITHOUT_CLASSIFICATION	5.074557843981449E-6	DEFECT
// Store each line into this list if not null.	WITHOUT_CLASSIFICATION	0.9999847169945675	WITHOUT_CLASSIFICATION	1.5283005432495117E-5	DEFECT
// Portion of line right after beginning marker	WITHOUT_CLASSIFICATION	0.9999985619863501	WITHOUT_CLASSIFICATION	1.4380136499302102E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999866955602322	WITHOUT_CLASSIFICATION	1.3304439767891773E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999866955602322	WITHOUT_CLASSIFICATION	1.3304439767891773E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999866955602322	WITHOUT_CLASSIFICATION	1.3304439767891773E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999866955602322	WITHOUT_CLASSIFICATION	1.3304439767891773E-5	DEFECT
// If an IO exception occurs (something odd, but possible) // A directory may return null.	WITHOUT_CLASSIFICATION	0.9999722636711917	WITHOUT_CLASSIFICATION	2.7736328808230836E-5	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999983563976784	WITHOUT_CLASSIFICATION	1.6436023216121214E-6	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999983563976784	WITHOUT_CLASSIFICATION	1.6436023216121214E-6	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999983563976784	WITHOUT_CLASSIFICATION	1.6436023216121214E-6	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9999993828687963	WITHOUT_CLASSIFICATION	6.171312037961499E-7	DEFECT
// finally with no exception	WITHOUT_CLASSIFICATION	0.9999119692484089	WITHOUT_CLASSIFICATION	8.803075159115877E-5	DEFECT
// Now, for all variables used by 'i' mark them live before 'i'	WITHOUT_CLASSIFICATION	0.9999996046875045	WITHOUT_CLASSIFICATION	3.95312495434629E-7	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.7281020068217553	WITHOUT_CLASSIFICATION	0.2718979931782447	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.7281020068217553	WITHOUT_CLASSIFICATION	0.2718979931782447	DEFECT
/* The counting of slashes that follows is simply a way to adhere to          * Ruby's UNC (or something) compatibility. When Ruby's expand_path is          * called with "//foo//bar" it will return "//foo/bar". JRuby uses          * java.io.File, and hence returns "/foo/bar". In order to retain          * java.io.File in the lower layers and provide full Ruby          * compatibility, the number of extra slashes must be counted and          * prepended to the result.         */	WITHOUT_CLASSIFICATION	0.9999999715211941	WITHOUT_CLASSIFICATION	2.8478805974867514E-8	DEFECT
// This is almost always already interned, since it will be called with a symbol in most cases // but when created from Java code, we might get an argument that needs to be interned. // addAccessor has as a precondition that the string MUST be interned	WITHOUT_CLASSIFICATION	0.9999611362547234	WITHOUT_CLASSIFICATION	3.8863745276674044E-5	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9999763920624544	WITHOUT_CLASSIFICATION	2.360793754564356E-5	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9999763920624544	WITHOUT_CLASSIFICATION	2.360793754564356E-5	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999999063005043	WITHOUT_CLASSIFICATION	9.369949570341476E-8	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999999063005043	WITHOUT_CLASSIFICATION	9.369949570341476E-8	DEFECT
// io.available() only returns 0 after EOF is encountered // so we need to differentiate between the empty string and EOF	WITHOUT_CLASSIFICATION	0.9999993727739612	WITHOUT_CLASSIFICATION	6.272260386835864E-7	DEFECT
// In the current logic, if we get here we know that module is not an // IncludedModuleWrapper, so there's no need to fish out the delegate. But just // in case the logic should change later, let's do it anyway	WITHOUT_CLASSIFICATION	0.9999991957324142	WITHOUT_CLASSIFICATION	8.042675856774883E-7	DEFECT
// rb_iterate((VALUE(*)_((VALUE)))str_step, (VALUE)args, step_i, (VALUE)iter);	WITHOUT_CLASSIFICATION	0.9999995651458004	WITHOUT_CLASSIFICATION	4.348541997129155E-7	DEFECT
// Broken symlinks considered by exists() as non-existing, // so we need to check for symlinks explicitly.	WITHOUT_CLASSIFICATION	0.9999998292552538	WITHOUT_CLASSIFICATION	1.7074474621651434E-7	DEFECT
// ////////////////// CONSTANT API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999586450263633	WITHOUT_CLASSIFICATION	4.135497363666747E-5	DEFECT
// create the default thread group	WITHOUT_CLASSIFICATION	0.999999649676821	WITHOUT_CLASSIFICATION	3.5032317899478034E-7	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9999996033679216	WITHOUT_CLASSIFICATION	3.966320783647143E-7	DEFECT
/* ============================     * Here are hash internals     * (This could be extracted to a separate class but it's not too large though)     * ============================     */	WITHOUT_CLASSIFICATION	0.9999944281642885	WITHOUT_CLASSIFICATION	5.571835711543249E-6	DEFECT
// ////////////////// LOW-LEVEL CLASS VARIABLE INTERFACE //////////////// // // fetch/store/list class variables for this module //	WITHOUT_CLASSIFICATION	0.9999972851820356	WITHOUT_CLASSIFICATION	2.714817964485871E-6	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999997463277395	WITHOUT_CLASSIFICATION	2.536722605805864E-7	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999997463277395	WITHOUT_CLASSIFICATION	2.536722605805864E-7	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999966458769532	WITHOUT_CLASSIFICATION	3.354123046880683E-6	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999966458769532	WITHOUT_CLASSIFICATION	3.354123046880683E-6	DEFECT
// retuns null when not found to avoid unnecessary getRuntime().getNil() call	WITHOUT_CLASSIFICATION	0.999995500426012	WITHOUT_CLASSIFICATION	4.499573988054018E-6	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999998581915462	WITHOUT_CLASSIFICATION	1.4180845371089815E-7	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999671026702351	WITHOUT_CLASSIFICATION	3.289732976485765E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999687745948119	WITHOUT_CLASSIFICATION	3.12254051881552E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999687745948119	WITHOUT_CLASSIFICATION	3.12254051881552E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999687745948119	WITHOUT_CLASSIFICATION	3.12254051881552E-5	DEFECT
// line 286	WITHOUT_CLASSIFICATION	0.9999942902798459	WITHOUT_CLASSIFICATION	5.709720154056225E-6	DEFECT
// line 476	WITHOUT_CLASSIFICATION	0.9999910617274527	WITHOUT_CLASSIFICATION	8.938272547313817E-6	DEFECT
// line 513	WITHOUT_CLASSIFICATION	0.999993471353122	WITHOUT_CLASSIFICATION	6.5286468779959966E-6	DEFECT
// line 530	WITHOUT_CLASSIFICATION	0.999994133350378	WITHOUT_CLASSIFICATION	5.866649622022754E-6	DEFECT
// line 533	WITHOUT_CLASSIFICATION	0.9999928671859002	WITHOUT_CLASSIFICATION	7.132814099843639E-6	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999926365218337	WITHOUT_CLASSIFICATION	7.363478166307497E-6	DEFECT
// line 551	WITHOUT_CLASSIFICATION	0.999993755255469	WITHOUT_CLASSIFICATION	6.244744530997453E-6	DEFECT
// end loop	WITHOUT_CLASSIFICATION	0.9999986376287594	WITHOUT_CLASSIFICATION	1.362371240558448E-6	DEFECT
// MRI behavior: we don't print errno for actual Errno errors	WITHOUT_CLASSIFICATION	0.9996991937384034	WITHOUT_CLASSIFICATION	3.0080626159660905E-4	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9999996320151329	WITHOUT_CLASSIFICATION	3.679848671476724E-7	DEFECT
// Traverse the instructions in this basic block in reverse order! // Mark as dead all instructions whose results are not used! 	WITHOUT_CLASSIFICATION	0.9988586851598344	WITHOUT_CLASSIFICATION	0.0011413148401655088	DEFECT
// // fields should really be an immutable map as it is never modified after construction //	WITHOUT_CLASSIFICATION	0.9999833120202883	WITHOUT_CLASSIFICATION	1.6687979711604325E-5	DEFECT
// load self object as IRubyObject, for recv param	WITHOUT_CLASSIFICATION	0.9999990270019609	WITHOUT_CLASSIFICATION	9.72998039149057E-7	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.7281020068217553	WITHOUT_CLASSIFICATION	0.2718979931782447	DEFECT
// If we define a class in Ruby, but later want to allow it to be defined in Java, // the allocator needs to be updated	WITHOUT_CLASSIFICATION	0.9999999186605486	WITHOUT_CLASSIFICATION	8.133945146070063E-8	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9999934171684537	WITHOUT_CLASSIFICATION	6.5828315462552E-6	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999501889716843	WITHOUT_CLASSIFICATION	4.981102831575784E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999803246080174	WITHOUT_CLASSIFICATION	1.967539198261358E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999803246080174	WITHOUT_CLASSIFICATION	1.967539198261358E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999803246080174	WITHOUT_CLASSIFICATION	1.967539198261358E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999803246080174	WITHOUT_CLASSIFICATION	1.967539198261358E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999803246080174	WITHOUT_CLASSIFICATION	1.967539198261358E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999565192057459	WITHOUT_CLASSIFICATION	4.348079425403065E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999803246080174	WITHOUT_CLASSIFICATION	1.967539198261358E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999803246080174	WITHOUT_CLASSIFICATION	1.967539198261358E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999803246080174	WITHOUT_CLASSIFICATION	1.967539198261358E-5	DEFECT
// MRI has extra pointer which makes our code look a little bit // more strange in // comparison	WITHOUT_CLASSIFICATION	0.9999998073790257	WITHOUT_CLASSIFICATION	1.9262097433714077E-7	DEFECT
// Tempory buffer to build up a potential token.  Consumer takes responsibility to reset  // this before use.	WITHOUT_CLASSIFICATION	0.9999922784582597	WITHOUT_CLASSIFICATION	7.721541740433547E-6	DEFECT
//tmpPosition is required because getPosition()'s side effects. //if the warning is generated, the getPosition() on line 954 (this line + 18) will create //a wrong position if the "inclusive" flag is not set.	WITHOUT_CLASSIFICATION	0.9999800519875611	WITHOUT_CLASSIFICATION	1.9948012438850395E-5	DEFECT
/* What is \v in C?                    case '\v':                        c2 = 'v';                        break;                        */	WITHOUT_CLASSIFICATION	0.9999291898343875	WITHOUT_CLASSIFICATION	7.081016561245698E-5	DEFECT
/* Consider Thread aspects of this */	WITHOUT_CLASSIFICATION	0.9999516313741758	WITHOUT_CLASSIFICATION	4.836862582419563E-5	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9995829787835369	WITHOUT_CLASSIFICATION	4.170212164631269E-4	DEFECT
// An interrupt or timeout may have caused us to miss // a notify that we consumed, so do another notify in // case someone else is available to pick it up.	WITHOUT_CLASSIFICATION	0.9999990885833255	WITHOUT_CLASSIFICATION	9.114166743924693E-7	DEFECT
// line 572	WITHOUT_CLASSIFICATION	0.9999928997941177	WITHOUT_CLASSIFICATION	7.1002058824109365E-6	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999930843490799	WITHOUT_CLASSIFICATION	6.9156509201624605E-6	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999930843490799	WITHOUT_CLASSIFICATION	6.9156509201624605E-6	DEFECT
// line 625	WITHOUT_CLASSIFICATION	0.9999927050737537	WITHOUT_CLASSIFICATION	7.2949262462679165E-6	DEFECT
// line 649	WITHOUT_CLASSIFICATION	0.9999911183564593	WITHOUT_CLASSIFICATION	8.881643540648068E-6	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999928065019457	WITHOUT_CLASSIFICATION	7.193498054365362E-6	DEFECT
// line 723	WITHOUT_CLASSIFICATION	0.9999932998754812	WITHOUT_CLASSIFICATION	6.7001245187589845E-6	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999935951468508	WITHOUT_CLASSIFICATION	6.404853149192657E-6	DEFECT
// line 745	WITHOUT_CLASSIFICATION	0.9999915130910201	WITHOUT_CLASSIFICATION	8.48690897979955E-6	DEFECT
// line 766	WITHOUT_CLASSIFICATION	0.9999918511922667	WITHOUT_CLASSIFICATION	8.148807733256796E-6	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999932905055429	WITHOUT_CLASSIFICATION	6.709494457129591E-6	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.999991646523605	WITHOUT_CLASSIFICATION	8.353476395073863E-6	DEFECT
// line 800	WITHOUT_CLASSIFICATION	0.9999957300841579	WITHOUT_CLASSIFICATION	4.269915842097212E-6	DEFECT
// line 812	WITHOUT_CLASSIFICATION	0.999994873600501	WITHOUT_CLASSIFICATION	5.126399499005011E-6	DEFECT
// line 827	WITHOUT_CLASSIFICATION	0.9999943412448543	WITHOUT_CLASSIFICATION	5.658755145711173E-6	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999940901646373	WITHOUT_CLASSIFICATION	5.909835362810553E-6	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999931274991612	WITHOUT_CLASSIFICATION	6.872500838802946E-6	DEFECT
// line 864	WITHOUT_CLASSIFICATION	0.9999928047940326	WITHOUT_CLASSIFICATION	7.195205967445464E-6	DEFECT
// line 886	WITHOUT_CLASSIFICATION	0.9999933912707545	WITHOUT_CLASSIFICATION	6.608729245479517E-6	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999929453832678	WITHOUT_CLASSIFICATION	7.0546167321655554E-6	DEFECT
// line 911	WITHOUT_CLASSIFICATION	0.9999938978733847	WITHOUT_CLASSIFICATION	6.102126615286671E-6	DEFECT
// line 929	WITHOUT_CLASSIFICATION	0.9999935580016548	WITHOUT_CLASSIFICATION	6.441998345257568E-6	DEFECT
// line 952	WITHOUT_CLASSIFICATION	0.9999929180799426	WITHOUT_CLASSIFICATION	7.081920057386735E-6	DEFECT
// line 970	WITHOUT_CLASSIFICATION	0.9999932057410313	WITHOUT_CLASSIFICATION	6.7942589686271285E-6	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9999919944999004	WITHOUT_CLASSIFICATION	8.005500099638495E-6	DEFECT
// line 991	WITHOUT_CLASSIFICATION	0.9999928772340568	WITHOUT_CLASSIFICATION	7.122765943053878E-6	DEFECT
// line 1011	WITHOUT_CLASSIFICATION	0.9999942199777045	WITHOUT_CLASSIFICATION	5.780022295397531E-6	DEFECT
// line 1026	WITHOUT_CLASSIFICATION	0.9999934762522827	WITHOUT_CLASSIFICATION	6.523747717245712E-6	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999948175649648	WITHOUT_CLASSIFICATION	5.182435035301281E-6	DEFECT
// line 1067	WITHOUT_CLASSIFICATION	0.9999920504145071	WITHOUT_CLASSIFICATION	7.949585492837875E-6	DEFECT
// line 1085	WITHOUT_CLASSIFICATION	0.9999941625987395	WITHOUT_CLASSIFICATION	5.837401260480887E-6	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.999992033291032	WITHOUT_CLASSIFICATION	7.966708967977483E-6	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999936113152527	WITHOUT_CLASSIFICATION	6.388684747349114E-6	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999933634054422	WITHOUT_CLASSIFICATION	6.636594557765873E-6	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999931574000948	WITHOUT_CLASSIFICATION	6.842599905253249E-6	DEFECT
// line 1145	WITHOUT_CLASSIFICATION	0.9999918515855793	WITHOUT_CLASSIFICATION	8.148414420708419E-6	DEFECT
// line 1169	WITHOUT_CLASSIFICATION	0.9999918314406212	WITHOUT_CLASSIFICATION	8.168559378803252E-6	DEFECT
// line 1201	WITHOUT_CLASSIFICATION	0.9999934796390167	WITHOUT_CLASSIFICATION	6.520360983273505E-6	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999942685504563	WITHOUT_CLASSIFICATION	5.731449543683869E-6	DEFECT
// line 1229	WITHOUT_CLASSIFICATION	0.9999923061581939	WITHOUT_CLASSIFICATION	7.693841805983714E-6	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999916029008086	WITHOUT_CLASSIFICATION	8.397099191388992E-6	DEFECT
// line 1287	WITHOUT_CLASSIFICATION	0.9999931122776928	WITHOUT_CLASSIFICATION	6.887722307189915E-6	DEFECT
// line 1293	WITHOUT_CLASSIFICATION	0.9999919218986394	WITHOUT_CLASSIFICATION	8.078101360630758E-6	DEFECT
// line 1307	WITHOUT_CLASSIFICATION	0.9999930425512558	WITHOUT_CLASSIFICATION	6.957448744272999E-6	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999949680134559	WITHOUT_CLASSIFICATION	5.031986544070813E-6	DEFECT
// line 1325	WITHOUT_CLASSIFICATION	0.9999932632232894	WITHOUT_CLASSIFICATION	6.7367767104958286E-6	DEFECT
// line 1363	WITHOUT_CLASSIFICATION	0.9999917290199375	WITHOUT_CLASSIFICATION	8.270980062532822E-6	DEFECT
// line 1398	WITHOUT_CLASSIFICATION	0.9999935539798718	WITHOUT_CLASSIFICATION	6.44602012817996E-6	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999931030272652	WITHOUT_CLASSIFICATION	6.896972734752925E-6	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999890972586902	WITHOUT_CLASSIFICATION	1.090274130966207E-5	DEFECT
// line 1473	WITHOUT_CLASSIFICATION	0.9999913279701116	WITHOUT_CLASSIFICATION	8.672029888372457E-6	DEFECT
// line 1492	WITHOUT_CLASSIFICATION	0.9999921431129681	WITHOUT_CLASSIFICATION	7.856887031975243E-6	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999919809227952	WITHOUT_CLASSIFICATION	8.019077204817028E-6	DEFECT
// line 1523	WITHOUT_CLASSIFICATION	0.999992551178934	WITHOUT_CLASSIFICATION	7.4488210659121895E-6	DEFECT
// line 1562	WITHOUT_CLASSIFICATION	0.9999907025739022	WITHOUT_CLASSIFICATION	9.29742609782445E-6	DEFECT
// line 1582	WITHOUT_CLASSIFICATION	0.9999936241332275	WITHOUT_CLASSIFICATION	6.375866772519014E-6	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999916036954702	WITHOUT_CLASSIFICATION	8.39630452973133E-6	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999916036954702	WITHOUT_CLASSIFICATION	8.39630452973133E-6	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999912312823735	WITHOUT_CLASSIFICATION	8.768717626363578E-6	DEFECT
// line 1620	WITHOUT_CLASSIFICATION	0.9999942107374402	WITHOUT_CLASSIFICATION	5.789262559755637E-6	DEFECT
// line 1635	WITHOUT_CLASSIFICATION	0.9999915530208533	WITHOUT_CLASSIFICATION	8.446979146827639E-6	DEFECT
// line 1652	WITHOUT_CLASSIFICATION	0.9999919120928856	WITHOUT_CLASSIFICATION	8.087907114434082E-6	DEFECT
// line 1681	WITHOUT_CLASSIFICATION	0.9999930852670248	WITHOUT_CLASSIFICATION	6.914732975229692E-6	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9999939927502853	WITHOUT_CLASSIFICATION	6.007249714683767E-6	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.999991364549345	WITHOUT_CLASSIFICATION	8.635450654914991E-6	DEFECT
// line 1755	WITHOUT_CLASSIFICATION	0.9999907300006229	WITHOUT_CLASSIFICATION	9.269999377065985E-6	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999929329517535	WITHOUT_CLASSIFICATION	7.067048246433309E-6	DEFECT
// line 1789	WITHOUT_CLASSIFICATION	0.9999929499899658	WITHOUT_CLASSIFICATION	7.050010034264808E-6	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999545700432069	WITHOUT_CLASSIFICATION	4.542995679312829E-5	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999545700432069	WITHOUT_CLASSIFICATION	4.542995679312829E-5	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999944683047799	WITHOUT_CLASSIFICATION	5.531695220103696E-6	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9999839562218907	WITHOUT_CLASSIFICATION	1.60437781093233E-5	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9999921813009681	WITHOUT_CLASSIFICATION	7.818699031970929E-6	DEFECT
// We can assign if we already have variable of that name here or we are the only // scope in the chain (which Local scopes always are).	WITHOUT_CLASSIFICATION	0.9999995591472208	WITHOUT_CLASSIFICATION	4.408527791321513E-7	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.99999722451727	WITHOUT_CLASSIFICATION	2.775482730077964E-6	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.99999722451727	WITHOUT_CLASSIFICATION	2.775482730077964E-6	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.99999722451727	WITHOUT_CLASSIFICATION	2.775482730077964E-6	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.99999722451727	WITHOUT_CLASSIFICATION	2.775482730077964E-6	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9971915304239043	WITHOUT_CLASSIFICATION	0.002808469576095804	DEFECT
/*     * This method exists for us to break up multiple expression when nodes (e.g. when 1,2,3:)     * into individual whenNodes.  The primary reason for this is to ensure lazy evaluation of     * the arguments (when foo,bar,gar:) to prevent side-effects.  In the old code this was done     * using nested when statements, which was awful for interpreter and compilation.     *     * Notes: This has semantic equivalence but will not be lexically equivalent.  Compiler     * needs to detect same bodies to simplify bytecode generated.     */	WITHOUT_CLASSIFICATION	0.9999932801545964	WITHOUT_CLASSIFICATION	6.719845403629267E-6	DEFECT
// line 313	WITHOUT_CLASSIFICATION	0.9999942217127727	WITHOUT_CLASSIFICATION	5.778287227280983E-6	DEFECT
// line 339	WITHOUT_CLASSIFICATION	0.9999935908528916	WITHOUT_CLASSIFICATION	6.4091471084561285E-6	DEFECT
// line 361	WITHOUT_CLASSIFICATION	0.9999937108379973	WITHOUT_CLASSIFICATION	6.289162002781533E-6	DEFECT
// line 413	WITHOUT_CLASSIFICATION	0.9999934131270941	WITHOUT_CLASSIFICATION	6.586872905806683E-6	DEFECT
// line 451	WITHOUT_CLASSIFICATION	0.9999931194073737	WITHOUT_CLASSIFICATION	6.880592626319109E-6	DEFECT
// line 472	WITHOUT_CLASSIFICATION	0.9999927678407488	WITHOUT_CLASSIFICATION	7.232159251212349E-6	DEFECT
// line 500	WITHOUT_CLASSIFICATION	0.9999946835411289	WITHOUT_CLASSIFICATION	5.316458871041634E-6	DEFECT
// line 515	WITHOUT_CLASSIFICATION	0.9999935352818609	WITHOUT_CLASSIFICATION	6.464718139078764E-6	DEFECT
// line 555	WITHOUT_CLASSIFICATION	0.9999929445623987	WITHOUT_CLASSIFICATION	7.0554376012790115E-6	DEFECT
// line 582	WITHOUT_CLASSIFICATION	0.9999942461955478	WITHOUT_CLASSIFICATION	5.753804452206126E-6	DEFECT
// line 619	WITHOUT_CLASSIFICATION	0.9999928517053627	WITHOUT_CLASSIFICATION	7.148294637383543E-6	DEFECT
// line 636	WITHOUT_CLASSIFICATION	0.9999926482756045	WITHOUT_CLASSIFICATION	7.351724395484271E-6	DEFECT
// line 669	WITHOUT_CLASSIFICATION	0.9999919866501259	WITHOUT_CLASSIFICATION	8.013349874080584E-6	DEFECT
// line 703	WITHOUT_CLASSIFICATION	0.999993532799103	WITHOUT_CLASSIFICATION	6.467200897087923E-6	DEFECT
// line 776	WITHOUT_CLASSIFICATION	0.9999918436910057	WITHOUT_CLASSIFICATION	8.156308994353409E-6	DEFECT
// line 814	WITHOUT_CLASSIFICATION	0.9999943149233732	WITHOUT_CLASSIFICATION	5.685076626812873E-6	DEFECT
// line 823	WITHOUT_CLASSIFICATION	0.9999946345142696	WITHOUT_CLASSIFICATION	5.3654857303783445E-6	DEFECT
// line 854	WITHOUT_CLASSIFICATION	0.9999931840058545	WITHOUT_CLASSIFICATION	6.815994145456722E-6	DEFECT
// line 872	WITHOUT_CLASSIFICATION	0.9999942787035216	WITHOUT_CLASSIFICATION	5.721296478404263E-6	DEFECT
// line 905	WITHOUT_CLASSIFICATION	0.9999930029864005	WITHOUT_CLASSIFICATION	6.997013599611844E-6	DEFECT
// line 925	WITHOUT_CLASSIFICATION	0.9999930490261593	WITHOUT_CLASSIFICATION	6.950973840747642E-6	DEFECT
// line 958	WITHOUT_CLASSIFICATION	0.9999933332314951	WITHOUT_CLASSIFICATION	6.666768504957421E-6	DEFECT
// line 992	WITHOUT_CLASSIFICATION	0.9999925367736666	WITHOUT_CLASSIFICATION	7.4632263333966576E-6	DEFECT
// line 1047	WITHOUT_CLASSIFICATION	0.999992849899044	WITHOUT_CLASSIFICATION	7.150100956030374E-6	DEFECT
// line 1072	WITHOUT_CLASSIFICATION	0.9999939827787848	WITHOUT_CLASSIFICATION	6.017221215239707E-6	DEFECT
// line 1081	WITHOUT_CLASSIFICATION	0.9999946886770781	WITHOUT_CLASSIFICATION	5.311322921996805E-6	DEFECT
// line 1108	WITHOUT_CLASSIFICATION	0.999994789076886	WITHOUT_CLASSIFICATION	5.210923113982571E-6	DEFECT
// line 1136	WITHOUT_CLASSIFICATION	0.9999924137360455	WITHOUT_CLASSIFICATION	7.58626395445026E-6	DEFECT
// line 1168	WITHOUT_CLASSIFICATION	0.9999932426192456	WITHOUT_CLASSIFICATION	6.757380754405772E-6	DEFECT
// line 1192	WITHOUT_CLASSIFICATION	0.999993230085587	WITHOUT_CLASSIFICATION	6.769914412931983E-6	DEFECT
// line 1241	WITHOUT_CLASSIFICATION	0.9999900348212352	WITHOUT_CLASSIFICATION	9.9651787647463E-6	DEFECT
// line 1267	WITHOUT_CLASSIFICATION	0.9999908385890746	WITHOUT_CLASSIFICATION	9.161410925346189E-6	DEFECT
// line 1286	WITHOUT_CLASSIFICATION	0.9999925539893575	WITHOUT_CLASSIFICATION	7.446010642599596E-6	DEFECT
// line 1301	WITHOUT_CLASSIFICATION	0.9999934997678402	WITHOUT_CLASSIFICATION	6.500232159753516E-6	DEFECT
// line 1314	WITHOUT_CLASSIFICATION	0.9999925770226793	WITHOUT_CLASSIFICATION	7.422977320649308E-6	DEFECT
// line 1333	WITHOUT_CLASSIFICATION	0.9999928894475145	WITHOUT_CLASSIFICATION	7.110552485484773E-6	DEFECT
// line 1362	WITHOUT_CLASSIFICATION	0.999992822092855	WITHOUT_CLASSIFICATION	7.177907144909372E-6	DEFECT
// line 1395	WITHOUT_CLASSIFICATION	0.9999921161162629	WITHOUT_CLASSIFICATION	7.883883736952341E-6	DEFECT
// line 1420	WITHOUT_CLASSIFICATION	0.9999942022240206	WITHOUT_CLASSIFICATION	5.797775979471774E-6	DEFECT
// line 1439	WITHOUT_CLASSIFICATION	0.999991333077442	WITHOUT_CLASSIFICATION	8.666922557972732E-6	DEFECT
// line 1476	WITHOUT_CLASSIFICATION	0.9999902541980094	WITHOUT_CLASSIFICATION	9.745801990677923E-6	DEFECT
// line 1535	WITHOUT_CLASSIFICATION	0.9999923543293026	WITHOUT_CLASSIFICATION	7.645670697440713E-6	DEFECT
// line 1588	WITHOUT_CLASSIFICATION	0.9999930984588239	WITHOUT_CLASSIFICATION	6.901541176033473E-6	DEFECT
// line 1618	WITHOUT_CLASSIFICATION	0.9999935300565153	WITHOUT_CLASSIFICATION	6.469943484641083E-6	DEFECT
// line 1643	WITHOUT_CLASSIFICATION	0.9999903983743149	WITHOUT_CLASSIFICATION	9.601625685066214E-6	DEFECT
// line 1669	WITHOUT_CLASSIFICATION	0.9999914903849741	WITHOUT_CLASSIFICATION	8.5096150258427E-6	DEFECT
// line 1728	WITHOUT_CLASSIFICATION	0.999993797872466	WITHOUT_CLASSIFICATION	6.2021275339549705E-6	DEFECT
// line 1753	WITHOUT_CLASSIFICATION	0.9999904588754446	WITHOUT_CLASSIFICATION	9.541124555405392E-6	DEFECT
// line 1779	WITHOUT_CLASSIFICATION	0.9999919367012453	WITHOUT_CLASSIFICATION	8.06329875466199E-6	DEFECT
// line 1794	WITHOUT_CLASSIFICATION	0.9999910533207896	WITHOUT_CLASSIFICATION	8.946679210406312E-6	DEFECT
// line 1812	WITHOUT_CLASSIFICATION	0.9999943783501998	WITHOUT_CLASSIFICATION	5.621649800287957E-6	DEFECT
// line 1837	WITHOUT_CLASSIFICATION	0.9999940982704416	WITHOUT_CLASSIFICATION	5.901729558429832E-6	DEFECT
// line 1895	WITHOUT_CLASSIFICATION	0.9999934447340009	WITHOUT_CLASSIFICATION	6.555265999132977E-6	DEFECT
// line 1925	WITHOUT_CLASSIFICATION	0.9999925710822684	WITHOUT_CLASSIFICATION	7.428917731614165E-6	DEFECT
// line 1950	WITHOUT_CLASSIFICATION	0.9999935163425058	WITHOUT_CLASSIFICATION	6.4836574942386105E-6	DEFECT
// line 1992	WITHOUT_CLASSIFICATION	0.9999920128897622	WITHOUT_CLASSIFICATION	7.987110237768885E-6	DEFECT
// line 2014	WITHOUT_CLASSIFICATION	0.9999949923394655	WITHOUT_CLASSIFICATION	5.007660534366314E-6	DEFECT
// Whether this scope is used as the "argument scope" for e.g. zsuper	WITHOUT_CLASSIFICATION	0.9999994117813437	WITHOUT_CLASSIFICATION	5.882186562399397E-7	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9999982230878242	WITHOUT_CLASSIFICATION	1.776912175821288E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999936872464569	WITHOUT_CLASSIFICATION	6.312753543129165E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999936872464569	WITHOUT_CLASSIFICATION	6.312753543129165E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999936872464569	WITHOUT_CLASSIFICATION	6.312753543129165E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999936872464569	WITHOUT_CLASSIFICATION	6.312753543129165E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999936872464569	WITHOUT_CLASSIFICATION	6.312753543129165E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999936872464569	WITHOUT_CLASSIFICATION	6.312753543129165E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999936872464569	WITHOUT_CLASSIFICATION	6.312753543129165E-6	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999948574603845	WITHOUT_CLASSIFICATION	5.142539615513627E-6	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999948574603845	WITHOUT_CLASSIFICATION	5.142539615513627E-6	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999948574603845	WITHOUT_CLASSIFICATION	5.142539615513627E-6	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999948574603845	WITHOUT_CLASSIFICATION	5.142539615513627E-6	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999169207175841	WITHOUT_CLASSIFICATION	8.307928241595066E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999169207175841	WITHOUT_CLASSIFICATION	8.307928241595066E-5	DEFECT
// We create one extra dynamicScope on a binding so that when we 'eval "b=1", binding' the // 'b' will get put into this new dynamic scope.  The original scope does not see the new // 'b' and successive evals with this binding will.  I take it having the ability to have  // succesive binding evals be able to share same scope makes sense from a programmers  // perspective.   One crappy outcome of this design is it requires Dynamic and Static  // scopes to be mutable for this one case.	WITHOUT_CLASSIFICATION	0.999993539169561	WITHOUT_CLASSIFICATION	6.460830438998873E-6	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999999161478208	WITHOUT_CLASSIFICATION	8.38521792969733E-8	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999999161478208	WITHOUT_CLASSIFICATION	8.38521792969733E-8	DEFECT
// tc // under method // self // under method // name // args	WITHOUT_CLASSIFICATION	0.9999989443653546	WITHOUT_CLASSIFICATION	1.0556346454389487E-6	DEFECT
// allow it to bubble up	WITHOUT_CLASSIFICATION	0.9999976129284133	WITHOUT_CLASSIFICATION	2.3870715866656294E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999966734727013	WITHOUT_CLASSIFICATION	3.326527298839293E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999966734727013	WITHOUT_CLASSIFICATION	3.326527298839293E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999966734727013	WITHOUT_CLASSIFICATION	3.326527298839293E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999966734727013	WITHOUT_CLASSIFICATION	3.326527298839293E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999966734727013	WITHOUT_CLASSIFICATION	3.326527298839293E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999966734727013	WITHOUT_CLASSIFICATION	3.326527298839293E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999966734727013	WITHOUT_CLASSIFICATION	3.326527298839293E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999983394282099	WITHOUT_CLASSIFICATION	1.6605717900594818E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999947698940469	WITHOUT_CLASSIFICATION	5.23010595318565E-6	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999995898334131	WITHOUT_CLASSIFICATION	4.1016658688791423E-7	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999995898334131	WITHOUT_CLASSIFICATION	4.1016658688791423E-7	DEFECT
// Check for a builtin first.	WITHOUT_CLASSIFICATION	0.9999915405620488	WITHOUT_CLASSIFICATION	8.459437951179599E-6	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999099177253131	WITHOUT_CLASSIFICATION	9.00822746869147E-5	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999099177253131	WITHOUT_CLASSIFICATION	9.00822746869147E-5	DEFECT
// Unfortunately, the number of digits in the exponent is // not clearly defined in Ruby documentation. This is a // platform/version-dependent behavior. On Linux/Mac/Cygwin/*nix, // two digits are used. On Windows, 3 digits are used. // It is desirable for JRuby to have consistent behavior, and // the two digits behavior was selected. This is also in sync // with "Java-native" sprintf behavior (java.util.Formatter). // E or e	WITHOUT_CLASSIFICATION	0.9999995732209721	WITHOUT_CLASSIFICATION	4.2677902796328285E-7	DEFECT
/** * Represents the the dynamic portion of scoping information.  The variableValues are the * values of assigned local or block variables.  The staticScope identifies which sort of * scope this is (block or local). *  * Properties of Dynamic Scopes: * 1. static and dynamic scopes have the same number of names to values * 2. size of variables (and thus names) is determined during parsing.  So those structured do *    not need to change * * FIXME: When creating dynamic scopes we sometimes accidentally pass in extra parents.  This * is harmless (other than wasting memory), but we should not do that.  We can fix this in two * ways: * 1. Fix all callers * 2. Check parent that is passed in and make if new instance is local, then its parent is not local */	WITHOUT_CLASSIFICATION	0.6594731143602893	DEFECT	0.3405268856397107	WITHOUT_CLASSIFICATION
// This method handles '**/' patterns and delegates to // fnmatch_helper for the main work.	WITHOUT_CLASSIFICATION	0.9999965529897258	WITHOUT_CLASSIFICATION	3.44701027426456E-6	DEFECT
// Peel onion...make subpatterns out of outer layer of glob and recall with each subpattern  // Example: foo{a{c},b}bar -> fooa{c}bar, foobbar	WITHOUT_CLASSIFICATION	0.9999984944954119	WITHOUT_CLASSIFICATION	1.5055045881194856E-6	DEFECT
// double precision, native // double precision, native	WITHOUT_CLASSIFICATION	0.9999963442712132	WITHOUT_CLASSIFICATION	3.6557287866654316E-6	DEFECT
// 64-bit number, native (as bignum)	WITHOUT_CLASSIFICATION	0.9999970809283234	WITHOUT_CLASSIFICATION	2.919071676590007E-6	DEFECT
// Next indicates to decode using native encoding format	WITHOUT_CLASSIFICATION	0.9999941755997992	WITHOUT_CLASSIFICATION	5.824400200808338E-6	DEFECT
// calculate based on a, b, c and d	WITHOUT_CLASSIFICATION	0.9999995619450817	WITHOUT_CLASSIFICATION	4.3805491826360976E-7	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999813276028097	WITHOUT_CLASSIFICATION	1.8672397190246567E-5	DEFECT
// MRI behavior:  for 'Q', do not add trailing nils	WITHOUT_CLASSIFICATION	0.9999817212474542	WITHOUT_CLASSIFICATION	1.8278752545682816E-5	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9999526916069809	WITHOUT_CLASSIFICATION	4.730839301921447E-5	DEFECT
// exec needs to behave differently in-process, because it's technically // supposed to replace the calling process. So if we're supposed to run // in-process, we allow it to use the default streams and not use // pumpers at all. See JRUBY-2156 and JRUBY-2154.	WITHOUT_CLASSIFICATION	0.9999999760031462	WITHOUT_CLASSIFICATION	2.399685391066596E-8	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999996348279182	WITHOUT_CLASSIFICATION	3.6517208179238647E-7	DEFECT
// The problem we trying to solve below: STDIN in Java // is blocked and non-interruptible, so if we invoke read // on it, we might never be able to interrupt such thread. // So, we use in.available() to see if there is any input // ready, and only then read it. But this approach can't // tell whether the end of stream reached or not, so we // might end up looping right at the end of the stream. // Well, at least, we can improve the situation by checking // if some input was ever available, and if so, not // checking for available anymore, and just go to read.	WITHOUT_CLASSIFICATION	0.9999856854902445	WITHOUT_CLASSIFICATION	1.4314509755494028E-5	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9999982454124665	WITHOUT_CLASSIFICATION	1.7545875334207559E-6	DEFECT
// an empirically derived rule: precision applies to // significand length, irrespective of exponent	WITHOUT_CLASSIFICATION	0.9999953311069278	WITHOUT_CLASSIFICATION	4.6688930722254935E-6	DEFECT
// an official rule, clarified: if the exponent // <clarif>after adjusting for exponent form</clarif> // is < -4,  or the exponent <clarif>after adjusting  // for exponent form</clarif> is greater than the // precision, use exponent form	WITHOUT_CLASSIFICATION	0.9999990792249857	WITHOUT_CLASSIFICATION	9.207750144265069E-7	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9999873465447483	WITHOUT_CLASSIFICATION	1.2653455251642205E-5	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999976128681304	WITHOUT_CLASSIFICATION	2.3871318695067797E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999976128681304	WITHOUT_CLASSIFICATION	2.3871318695067797E-6	DEFECT
// MRI behavior: validate only the unnumbered arguments	WITHOUT_CLASSIFICATION	0.9999996660665871	WITHOUT_CLASSIFICATION	3.3393341289834786E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999991789401765	WITHOUT_CLASSIFICATION	8.21059823509383E-7	DEFECT
// calculation for simple (and typical) case, // adapted from sun.misc.FloatingDecimal	WITHOUT_CLASSIFICATION	0.999999467475746	WITHOUT_CLASSIFICATION	5.325242540481208E-7	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999681417584079	WITHOUT_CLASSIFICATION	3.185824159205155E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999938960795273	WITHOUT_CLASSIFICATION	6.103920472660692E-6	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999938960795273	WITHOUT_CLASSIFICATION	6.103920472660692E-6	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999938960795273	WITHOUT_CLASSIFICATION	6.103920472660692E-6	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999988188683377	WITHOUT_CLASSIFICATION	1.1811316622696918E-6	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9999912968619522	WITHOUT_CLASSIFICATION	8.703138047729069E-6	DEFECT
// call chmod after we created the RandomAccesFile // because otherwise, the file could be read-only	WITHOUT_CLASSIFICATION	0.9999993356662791	WITHOUT_CLASSIFICATION	6.643337209549301E-7	DEFECT
// attempt to set the permissions, if we have been passed a POSIX instance, // and only if the file was created in this call.	WITHOUT_CLASSIFICATION	0.9999987991190807	WITHOUT_CLASSIFICATION	1.200880919258077E-6	DEFECT
// // When reading into a heap buffer, the jvm allocates a temporary // direct ByteBuffer of the requested size.  To avoid allocating // a huge direct buffer when doing ludicrous reads (e.g. 1G or more) // we split the read up into chunks of no more than 1M //	WITHOUT_CLASSIFICATION	0.9999890923166285	WITHOUT_CLASSIFICATION	1.0907683371513317E-5	DEFECT
// // If it is a file channel, then we can pre-allocate the output buffer // to the total size of buffered + remaining bytes in file //	WITHOUT_CLASSIFICATION	0.9999995464503161	WITHOUT_CLASSIFICATION	4.5354968399103114E-7	DEFECT
// // Cannot discern the total read length - allocate at least enough for the buffered data //	WITHOUT_CLASSIFICATION	0.9999996868440894	WITHOUT_CLASSIFICATION	3.131559107269021E-7	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9999991996685987	WITHOUT_CLASSIFICATION	8.003314013432204E-7	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.999997535720576	WITHOUT_CLASSIFICATION	2.464279423978169E-6	DEFECT
// already have some bytes buffered, just return those	WITHOUT_CLASSIFICATION	0.9999978161327597	WITHOUT_CLASSIFICATION	2.1838672402204167E-6	DEFECT
// reset buffer	WITHOUT_CLASSIFICATION	0.99996949908863	WITHOUT_CLASSIFICATION	3.0500911370060473E-5	DEFECT
// // Synchronize and re-check to avoid creating more than one Selector per provider //	WITHOUT_CLASSIFICATION	0.9999997865132236	WITHOUT_CLASSIFICATION	2.134867763213791E-7	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.9795030106332981	WITHOUT_CLASSIFICATION	0.020496989366701836	DEFECT
// Is there something built into JRuby to do this?	WITHOUT_CLASSIFICATION	0.9999766137673058	WITHOUT_CLASSIFICATION	2.338623269414768E-5	DEFECT
// Note that WE CAN'T say the following, because of the on-the-fly conversion of Fixnum to Long // assertTrue(value == valueViaValuesIterator);	WITHOUT_CLASSIFICATION	0.9999997890497399	WITHOUT_CLASSIFICATION	2.109502600798526E-7	DEFECT
// value equality //result = eval("key = 3; arr = []; arr[key] = 'one'; arr.store(3, 'two'); puts arr[key]"); //assertEquals("two", result);	WITHOUT_CLASSIFICATION	0.9999735981766037	WITHOUT_CLASSIFICATION	2.640182339630798E-5	DEFECT
// Uncomment the "puts" lines if you want to see more detail	WITHOUT_CLASSIFICATION	0.9999999159850546	WITHOUT_CLASSIFICATION	8.401494546193744E-8	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.999998980322231	WITHOUT_CLASSIFICATION	1.0196777689972085E-6	DEFECT
// change the thread context to include the class	WITHOUT_CLASSIFICATION	0.9999998319262325	WITHOUT_CLASSIFICATION	1.6807376757555262E-7	DEFECT
// FIXME: This is a system error based on errno	DEFECT	0.5093895571827229	DEFECT	0.490610442817277	WITHOUT_CLASSIFICATION
// TODO: In MRI 1.9, an explicit check for negative length is // added here. IndexError is raised when length is negative. // See [ruby-core:12953] for more details. // // New note: This is actually under re-evaluation, // see [ruby-core:17483].	DEFECT	0.8744207828258017	DEFECT	0.12557921717419832	WITHOUT_CLASSIFICATION
// TODO: make sure it's really safe to not to copy it	DEFECT	0.7565385735169822	DEFECT	0.2434614264830179	WITHOUT_CLASSIFICATION
// TODO: Numeric.new works in Ruby and it does here too.  However trying to use //   that instance in a numeric operation should generate an ArgumentError. Doing //   this seems so pathological I do not see the need to fix this now.	DEFECT	0.932101027908465	DEFECT	0.06789897209153502	WITHOUT_CLASSIFICATION
// FIXME: We can't guarantee this will always be a RubyIO...so the old code here is not safe	DEFECT	0.9035268028175919	DEFECT	0.09647319718240807	WITHOUT_CLASSIFICATION
// dump the trace and continue // this is currently only here for Android, which seems to have // bugs in its enumeration logic // http://code.google.com/p/android/issues/detail?id=2812	DEFECT	0.9999949579918563	WITHOUT_CLASSIFICATION	5.04200814363931E-6	DEFECT
// FIXME: Add at_exit and finalizers to exit, then make exit_bang not call those.	DEFECT	0.9581601759792013	WITHOUT_CLASSIFICATION	0.04183982402079876	DEFECT
// TODO: need to isolate the "current" thread from class creation	DEFECT	0.9345829284117445	WITHOUT_CLASSIFICATION	0.06541707158825562	DEFECT
// FIXME: not correct exception	DEFECT	0.9774525061197095	DEFECT	0.022547493880290564	WITHOUT_CLASSIFICATION
// XXX actually only on windows...	DEFECT	0.9999893694668076	WITHOUT_CLASSIFICATION	1.0630533192400398E-5	DEFECT
// Enebo : Should ~frogger\\foo work (it doesnt in linux ruby)?	DEFECT	0.9992907994020815	WITHOUT_CLASSIFICATION	7.092005979185399E-4	DEFECT
// FIXME can't use static; would interfere with other runtimes in the same JVM	DEFECT	0.985708055180279	WITHOUT_CLASSIFICATION	0.0142919448197211	DEFECT
// TODO: anything threads attached to original fd are notified of the close... // see rb_thread_fd_close	DEFECT	0.8639729036476241	WITHOUT_CLASSIFICATION	0.13602709635237584	DEFECT
// TODO: This is an freopen in MRI, this is close, but not quite the same	DEFECT	0.9089479299165053	DEFECT	0.09105207008349477	WITHOUT_CLASSIFICATION
// TODO: sys fail	DEFECT	0.7452926945256614	WITHOUT_CLASSIFICATION	0.2547073054743386	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.7795512113595038	WITHOUT_CLASSIFICATION	0.22044878864049616	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.7795512113595038	WITHOUT_CLASSIFICATION	0.22044878864049616	DEFECT
//      FIXME: check how ruby 1.9 handles this	DEFECT	0.9947180615589776	WITHOUT_CLASSIFICATION	0.005281938441022491	DEFECT
// FIXME: MRI has special case for constants here 	DEFECT	0.9990950302858619	WITHOUT_CLASSIFICATION	9.049697141380781E-4	DEFECT
// FIXME: Throw the right ArgumentError's if the class is missing // or if it's a module.	DEFECT	0.9895628482625466	WITHOUT_CLASSIFICATION	0.0104371517374535	DEFECT
// ENEBO: Very wrong	DEFECT	0.9997365926178692	WITHOUT_CLASSIFICATION	2.634073821308309E-4	DEFECT
// ENEBO: Very wrong	DEFECT	0.9997365926178692	WITHOUT_CLASSIFICATION	2.634073821308309E-4	DEFECT
// synchronized method per JRUBY-1173 (unsafe Double-Checked Locking) // FIXME: synchronization is still wrong in CP code	DEFECT	0.8661959658321233	WITHOUT_CLASSIFICATION	0.13380403416787667	DEFECT
// FIXME: I'm not sure this is right, but the old code returned // the undef, which definitely isn't right...	DEFECT	0.9643202874743404	DEFECT	0.03567971252565956	WITHOUT_CLASSIFICATION
// FIXME: Errno descriptions from Constantine // on Windows are not useful at the moment.	DEFECT	0.974916617322778	WITHOUT_CLASSIFICATION	0.025083382677222	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.8942769207062418	WITHOUT_CLASSIFICATION	0.10572307929375827	DEFECT
// TODO: take BigDecimal.mode into account.	DEFECT	0.8463003803908159	WITHOUT_CLASSIFICATION	0.15369961960918413	DEFECT
// TODO: full-precision divmod is 1000x slower than MRI!	DEFECT	0.7777150943214794	WITHOUT_CLASSIFICATION	0.22228490567852066	DEFECT
// TODO: proper sign	DEFECT	0.9688386713761007	WITHOUT_CLASSIFICATION	0.031161328623899396	DEFECT
// FIXME: No argument seems to work for -K in MRI plus this should not // siphon off additional args 'jruby -K ~/scripts/foo'.  Also better error // processing.	DEFECT	0.8747057597571297	DEFECT	0.12529424024287017	WITHOUT_CLASSIFICATION
// FIXME: -x flag not supported //                    case 'x' : //                        break;	DEFECT	0.9831778363698664	WITHOUT_CLASSIFICATION	0.016822163630133478	DEFECT
// FIXME: We are assuming that original string will be raw bytes.  If -Ku is provided // this will not be true, but that is ok for now.  Deal with that when someone needs it.	DEFECT	0.7354878343778712	WITHOUT_CLASSIFICATION	0.2645121656221287	DEFECT
// FIXME: This is causing a verification error for some reason //nilClass.dispatcher = callbackFactory.createDispatcher(nilClass);	DEFECT	0.9908646117727464	WITHOUT_CLASSIFICATION	0.009135388227253599	DEFECT
// FIXME: for some reason this dispatcher causes a VerifyError... //classClass.dispatcher = callbackFactory.createDispatcher(classClass);	DEFECT	0.995733832327727	WITHOUT_CLASSIFICATION	0.004266167672272924	DEFECT
// TODO: Rewriter and compiler assume case when empty expression.  In MRI this is just // a when. //        assert caseNode != null : "caseNode is not null";	DEFECT	0.585905158883036	WITHOUT_CLASSIFICATION	0.41409484111696393	DEFECT
// TODO: This code effectively disables all inspection-based optimizations; none of them are 100% safe yet	DEFECT	0.6693563657774402	DEFECT	0.33064363422255993	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// FIXME: this should reset to what it was before	DEFECT	0.9515604897767462	WITHOUT_CLASSIFICATION	0.04843951022325376	DEFECT
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9818759586922612	WITHOUT_CLASSIFICATION	0.018124041307738818	DEFECT
// SSS FIXME: Incorect!	DEFECT	0.9427029835348425	WITHOUT_CLASSIFICATION	0.057297016465157634	DEFECT
// SSS FIXME: // // There are also differences in variable scoping between 1.8 and 1.9  // Ruby 1.8 is the buggy semantics if I understand correctly. // // The semantics of how this shadows other variables outside the block needs // to be figured out during live var analysis.	DEFECT	0.5468664877674512	WITHOUT_CLASSIFICATION	0.4531335122325487	DEFECT
// SSS FIXME: This doesn't preserve original order of when clauses.  We could consider // preserving the order (or maybe not, since we would have to sort the constants first // in any case) for outputing jump tables in certain situations. // // add body to map for emitting later	DEFECT	0.999781144169654	WITHOUT_CLASSIFICATION	2.1885583034582547E-4	DEFECT
// IMPORTANT: Receive the block argument before the opt and splat args // This is so that the *arg can be encoded as 'rest of the array'.  This // won't work if the block argument hasn't been received yet!	DEFECT	0.9993725338876535	WITHOUT_CLASSIFICATION	6.274661123465768E-4	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.9936155599572684	WITHOUT_CLASSIFICATION	0.006384440042731625	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.9936155599572684	WITHOUT_CLASSIFICATION	0.006384440042731625	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.9991734170332986	WITHOUT_CLASSIFICATION	8.26582966701265E-4	DEFECT
// SSS FIXME: Verify semantics of this instruction	DEFECT	0.9873139208779217	WITHOUT_CLASSIFICATION	0.012686079122078217	DEFECT
// The following constants capture pre-known static call sites -- JRuby implementations of methods of ruby classes // SSS FIXME: Note that compiler/impl/BaseBodyCompiler is using op_match2 for match() and and op_match for match2 ... Is this a bug there?	DEFECT	0.8480076569231799	WITHOUT_CLASSIFICATION	0.15199234307682	DEFECT
// SSS FIXME: For constant arrays, we should never get here!	DEFECT	0.994643019438207	WITHOUT_CLASSIFICATION	0.005356980561793003	DEFECT
// FIXME: This is wrong	DEFECT	0.8342920181536756	WITHOUT_CLASSIFICATION	0.16570798184632435	DEFECT
// FIXME: may need to broaden for IPV6 IP address strings	DEFECT	0.9978668237718008	WITHOUT_CLASSIFICATION	0.0021331762281992326	DEFECT
// XXX Wrong, but will have to do for now	DEFECT	0.9999813137399464	WITHOUT_CLASSIFICATION	1.8686260053722605E-5	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.9591450105179858	WITHOUT_CLASSIFICATION	0.04085498948201423	DEFECT
// FIXME: vulture daemon thread prevents finalization, // find alternative approach. // vulture.start();	DEFECT	0.9941675453847019	WITHOUT_CLASSIFICATION	0.0058324546152981474	DEFECT
// If we outgrow our pushback stack then grow it (this should only happen in pretty  // pathological cases).	DEFECT	0.9999937980849845	WITHOUT_CLASSIFICATION	6.201915015642597E-6	DEFECT
// FIXME: Broken but behaving	DEFECT	0.960519495373234	WITHOUT_CLASSIFICATION	0.039480504626766035	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.990656581788553	WITHOUT_CLASSIFICATION	0.009343418211447114	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.990656581788553	WITHOUT_CLASSIFICATION	0.009343418211447114	DEFECT
// FIXME: this seems like a good assertion, but it breaks compiled code and the code seems // to run without it... //assert currentModule != null : "Can't push null RubyClass";	DEFECT	0.9337963242110516	WITHOUT_CLASSIFICATION	0.06620367578894835	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.6720982671408232	WITHOUT_CLASSIFICATION	0.3279017328591768	DEFECT
// FIXME: I got a bunch of NPEs when I didn't check for nulls here...HOW?!	DEFECT	0.6085557923823347	WITHOUT_CLASSIFICATION	0.39144420761766535	DEFECT
// MRI 1.8 behavior: this combination of flags is not allowed	DEFECT	0.9995584586453548	WITHOUT_CLASSIFICATION	4.4154135464521027E-4	DEFECT
// FIXME: Arg may also be true, false, and nil and still be valid.  Strangely enough,  // protocol conversion is not happening in Ruby on this arg?	DEFECT	0.8099872085403592	DEFECT	0.1900127914596409	WITHOUT_CLASSIFICATION
// TODO: Rubicon TestKernel dies without this line.  A cursory glance implies we // falsely set $! to nil and this sets it back to something valid.  This should  // get fixed at the same time we address bug #1296484.	DEFECT	0.9773863004512953	DEFECT	0.02261369954870478	WITHOUT_CLASSIFICATION
// This is the result of a bug that left off all trailing arguments. E.g.: //   system "ls", "-1", "dir" // would be seen as //   system "ls"	DEFECT	0.9999536712084935	WITHOUT_CLASSIFICATION	4.6328791506420546E-5	DEFECT
// We are in eval with binding break out early // FIXME: This is broken with the new backtrace stuff	DEFECT	0.9503659322724451	WITHOUT_CLASSIFICATION	0.04963406772755498	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.9991734170332986	WITHOUT_CLASSIFICATION	8.26582966701265E-4	DEFECT
// This was a getOpt with one mandatory arg, but it did not work // so I am parsing it for now.	DEFECT	0.9992829337625065	WITHOUT_CLASSIFICATION	7.170662374934228E-4	DEFECT
// FIXME: I doubt any of the constants referenced in this method // are ever redefined -- should compare to the known values, rather // than do an expensive constant lookup.	DEFECT	0.9963391619904511	WITHOUT_CLASSIFICATION	0.003660838009548759	DEFECT
// SSS FIXME: Why is the for node being built using closures and not as a "regular" loop with branches? // // This has implications on inlining, implementations of closures, next, break, etc. // When "each" and the block it consumes are inlined together in the caller, the "loop" // from the each should become a normal loop without any closures.  But, in this implementation // of for, we replace one closure with another! //	DEFECT	0.9232966048834149	WITHOUT_CLASSIFICATION	0.07670339511658508	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.8942769207062418	WITHOUT_CLASSIFICATION	0.10572307929375827	DEFECT
// TODO: Adding implicit nils caused multiple problems in compiler -- revist after landing //assert bodyNode != null : "bodyNode is not null";	DEFECT	0.7371329017792408	WITHOUT_CLASSIFICATION	0.262867098220759	DEFECT
// FIXME: It may be possible to killpg on systems which support it.  POSIX library // needs to tell whether a particular method works or not	DEFECT	0.9884090633229168	WITHOUT_CLASSIFICATION	0.011590936677083231	DEFECT
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9818759586922612	WITHOUT_CLASSIFICATION	0.018124041307738818	DEFECT
// zero args with block // FIXME: omit args index; subtract one from normal block index	DEFECT	0.9456945149114853	WITHOUT_CLASSIFICATION	0.05430548508851486	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// FIXME: Broken but behaving	DEFECT	0.960519495373234	WITHOUT_CLASSIFICATION	0.039480504626766035	DEFECT
// TODO: we loose encoding information here, fix it	DEFECT	0.9480378674658496	DEFECT	0.05196213253415042	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// TODO: don't require pop	DEFECT	0.5995818858827714	WITHOUT_CLASSIFICATION	0.40041811411722855	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.9591450105179858	WITHOUT_CLASSIFICATION	0.04085498948201423	DEFECT
// vulture thread will periodically expunge dead // entries.  entries are also expunged during 'put' // operations; this is designed to cover the case where // many objects are created initially, followed by limited // put activity. // // FIXME: DISABLED (below) pending resolution of finalization issue //	DEFECT	0.9997714693517112	WITHOUT_CLASSIFICATION	2.2853064828880554E-4	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.990656581788553	WITHOUT_CLASSIFICATION	0.009343418211447114	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.990656581788553	WITHOUT_CLASSIFICATION	0.009343418211447114	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.6720982671408232	WITHOUT_CLASSIFICATION	0.3279017328591768	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.6720982671408232	WITHOUT_CLASSIFICATION	0.3279017328591768	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.6720982671408232	WITHOUT_CLASSIFICATION	0.3279017328591768	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.6720982671408232	WITHOUT_CLASSIFICATION	0.3279017328591768	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.6720982671408232	WITHOUT_CLASSIFICATION	0.3279017328591768	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.6720982671408232	WITHOUT_CLASSIFICATION	0.3279017328591768	DEFECT
// TODO: We overflow on large files...We could increase to long to limit // this, but then the impl gets more involved since java io APIs based on // int (means we have to chunk up a long into a series of int ops).	DEFECT	0.98781076571763	WITHOUT_CLASSIFICATION	0.012189234282369926	DEFECT
