// set constants now that they're initialized	WITHOUT_CLASSIFICATION	0.9999989439028323	WITHOUT_CLASSIFICATION	1.056097167764107E-6	DEFECT
// line 335	WITHOUT_CLASSIFICATION	0.9999938618757224	WITHOUT_CLASSIFICATION	6.138124277614946E-6	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999640320264604	WITHOUT_CLASSIFICATION	3.596797353956174E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999640320264604	WITHOUT_CLASSIFICATION	3.596797353956174E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999736480538083	WITHOUT_CLASSIFICATION	2.6351946191630335E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999736480538083	WITHOUT_CLASSIFICATION	2.6351946191630335E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999756087034153	WITHOUT_CLASSIFICATION	2.4391296584744012E-5	DEFECT
// Figure end-char.  '\0' is special to indicate begin=end and that no nesting?	WITHOUT_CLASSIFICATION	0.9999997455721876	WITHOUT_CLASSIFICATION	2.54427812404664E-7	DEFECT
// line 362	WITHOUT_CLASSIFICATION	0.9999925356882975	WITHOUT_CLASSIFICATION	7.4643117025272155E-6	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999928467095567	WITHOUT_CLASSIFICATION	7.153290443368988E-6	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999557162859682	WITHOUT_CLASSIFICATION	4.428371403173917E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999557162859682	WITHOUT_CLASSIFICATION	4.428371403173917E-5	DEFECT
// line 391	WITHOUT_CLASSIFICATION	0.9999938664871905	WITHOUT_CLASSIFICATION	6.133512809450143E-6	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999630684346396	WITHOUT_CLASSIFICATION	3.693156536048857E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999630684346396	WITHOUT_CLASSIFICATION	3.693156536048857E-5	DEFECT
/* ^D */	WITHOUT_CLASSIFICATION	0.9999721869550987	WITHOUT_CLASSIFICATION	2.7813044901296958E-5	DEFECT
/* ^Z */	WITHOUT_CLASSIFICATION	0.9999793146462782	WITHOUT_CLASSIFICATION	2.0685353721836533E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999569892272152	WITHOUT_CLASSIFICATION	4.301077278482479E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999569892272152	WITHOUT_CLASSIFICATION	4.301077278482479E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999569892272152	WITHOUT_CLASSIFICATION	4.301077278482479E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999569892272152	WITHOUT_CLASSIFICATION	4.301077278482479E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999569892272152	WITHOUT_CLASSIFICATION	4.301077278482479E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999569892272152	WITHOUT_CLASSIFICATION	4.301077278482479E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999569892272152	WITHOUT_CLASSIFICATION	4.301077278482479E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999857260412786	WITHOUT_CLASSIFICATION	1.4273958721400396E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999857260412786	WITHOUT_CLASSIFICATION	1.4273958721400396E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999857260412786	WITHOUT_CLASSIFICATION	1.4273958721400396E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999857260412786	WITHOUT_CLASSIFICATION	1.4273958721400396E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999857260412786	WITHOUT_CLASSIFICATION	1.4273958721400396E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999857260412786	WITHOUT_CLASSIFICATION	1.4273958721400396E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999857260412786	WITHOUT_CLASSIFICATION	1.4273958721400396E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999741841403644	WITHOUT_CLASSIFICATION	2.581585963563342E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999741841403644	WITHOUT_CLASSIFICATION	2.581585963563342E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999741841403644	WITHOUT_CLASSIFICATION	2.581585963563342E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999741841403644	WITHOUT_CLASSIFICATION	2.581585963563342E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999741841403644	WITHOUT_CLASSIFICATION	2.581585963563342E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999741841403644	WITHOUT_CLASSIFICATION	2.581585963563342E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999769353743735	WITHOUT_CLASSIFICATION	2.3064625626522764E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999769353743735	WITHOUT_CLASSIFICATION	2.3064625626522764E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999769353743735	WITHOUT_CLASSIFICATION	2.3064625626522764E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999769353743735	WITHOUT_CLASSIFICATION	2.3064625626522764E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999769353743735	WITHOUT_CLASSIFICATION	2.3064625626522764E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999769353743735	WITHOUT_CLASSIFICATION	2.3064625626522764E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.999980764717989	WITHOUT_CLASSIFICATION	1.923528201090766E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.999980764717989	WITHOUT_CLASSIFICATION	1.923528201090766E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.999980764717989	WITHOUT_CLASSIFICATION	1.923528201090766E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.999980764717989	WITHOUT_CLASSIFICATION	1.923528201090766E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.999980764717989	WITHOUT_CLASSIFICATION	1.923528201090766E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.999980764717989	WITHOUT_CLASSIFICATION	1.923528201090766E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.999980764717989	WITHOUT_CLASSIFICATION	1.923528201090766E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999660970540083	WITHOUT_CLASSIFICATION	3.390294599170135E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999660970540083	WITHOUT_CLASSIFICATION	3.390294599170135E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999660970540083	WITHOUT_CLASSIFICATION	3.390294599170135E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999660970540083	WITHOUT_CLASSIFICATION	3.390294599170135E-5	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999799211707644	WITHOUT_CLASSIFICATION	2.007882923555596E-5	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999799211707644	WITHOUT_CLASSIFICATION	2.007882923555596E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532841765	WITHOUT_CLASSIFICATION	8.467158235029037E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532841765	WITHOUT_CLASSIFICATION	8.467158235029037E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532841765	WITHOUT_CLASSIFICATION	8.467158235029037E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532841765	WITHOUT_CLASSIFICATION	8.467158235029037E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532841765	WITHOUT_CLASSIFICATION	8.467158235029037E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532841765	WITHOUT_CLASSIFICATION	8.467158235029037E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532841765	WITHOUT_CLASSIFICATION	8.467158235029037E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532841765	WITHOUT_CLASSIFICATION	8.467158235029037E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532841765	WITHOUT_CLASSIFICATION	8.467158235029037E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532841765	WITHOUT_CLASSIFICATION	8.467158235029037E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532841765	WITHOUT_CLASSIFICATION	8.467158235029037E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532841765	WITHOUT_CLASSIFICATION	8.467158235029037E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532841765	WITHOUT_CLASSIFICATION	8.467158235029037E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532841765	WITHOUT_CLASSIFICATION	8.467158235029037E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532841765	WITHOUT_CLASSIFICATION	8.467158235029037E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532841765	WITHOUT_CLASSIFICATION	8.467158235029037E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532841765	WITHOUT_CLASSIFICATION	8.467158235029037E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532841765	WITHOUT_CLASSIFICATION	8.467158235029037E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532841765	WITHOUT_CLASSIFICATION	8.467158235029037E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532841765	WITHOUT_CLASSIFICATION	8.467158235029037E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532841765	WITHOUT_CLASSIFICATION	8.467158235029037E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532841765	WITHOUT_CLASSIFICATION	8.467158235029037E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532841765	WITHOUT_CLASSIFICATION	8.467158235029037E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532841765	WITHOUT_CLASSIFICATION	8.467158235029037E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532841765	WITHOUT_CLASSIFICATION	8.467158235029037E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532841765	WITHOUT_CLASSIFICATION	8.467158235029037E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532841765	WITHOUT_CLASSIFICATION	8.467158235029037E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532841765	WITHOUT_CLASSIFICATION	8.467158235029037E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532841765	WITHOUT_CLASSIFICATION	8.467158235029037E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532841765	WITHOUT_CLASSIFICATION	8.467158235029037E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532841765	WITHOUT_CLASSIFICATION	8.467158235029037E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532841765	WITHOUT_CLASSIFICATION	8.467158235029037E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532841765	WITHOUT_CLASSIFICATION	8.467158235029037E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532841765	WITHOUT_CLASSIFICATION	8.467158235029037E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532841765	WITHOUT_CLASSIFICATION	8.467158235029037E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532841765	WITHOUT_CLASSIFICATION	8.467158235029037E-7	DEFECT
// return result	WITHOUT_CLASSIFICATION	0.9999944904055401	WITHOUT_CLASSIFICATION	5.509594459913099E-6	DEFECT
// name	WITHOUT_CLASSIFICATION	0.9999969131841082	WITHOUT_CLASSIFICATION	3.0868158917817944E-6	DEFECT
// Define System.getProperties() in ENV_JAVA	WITHOUT_CLASSIFICATION	0.9999867863987444	WITHOUT_CLASSIFICATION	1.3213601255597287E-5	DEFECT
// Accessor methods.	WITHOUT_CLASSIFICATION	0.999998064159305	WITHOUT_CLASSIFICATION	1.935840695031249E-6	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999992728173316	WITHOUT_CLASSIFICATION	7.271826683093141E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999992728173316	WITHOUT_CLASSIFICATION	7.271826683093141E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999992728173316	WITHOUT_CLASSIFICATION	7.271826683093141E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999992728173316	WITHOUT_CLASSIFICATION	7.271826683093141E-7	DEFECT
// call getpwent to fail early if unsupported	WITHOUT_CLASSIFICATION	0.9999998049114988	WITHOUT_CLASSIFICATION	1.950885012169625E-7	DEFECT
// fall back on env entry for USER	WITHOUT_CLASSIFICATION	0.9999983042724689	WITHOUT_CLASSIFICATION	1.6957275310452552E-6	DEFECT
// try to read grent to fail fast	WITHOUT_CLASSIFICATION	0.9999983249689608	WITHOUT_CLASSIFICATION	1.6750310391679926E-6	DEFECT
// define ARGV and $* for this runtime	WITHOUT_CLASSIFICATION	0.9999900244323289	WITHOUT_CLASSIFICATION	9.975567671128912E-6	DEFECT
// Version information:	WITHOUT_CLASSIFICATION	0.9999812743026675	WITHOUT_CLASSIFICATION	1.872569733251398E-5	DEFECT
// after defn of $stderr as the call may produce warnings	WITHOUT_CLASSIFICATION	0.999996191759924	WITHOUT_CLASSIFICATION	3.808240075909338E-6	DEFECT
// ARGF, $< object	WITHOUT_CLASSIFICATION	0.9999989763074103	WITHOUT_CLASSIFICATION	1.0236925897443033E-6	DEFECT
// if the environment variables can't be obtained, define an empty ENV	WITHOUT_CLASSIFICATION	0.9999984503946077	WITHOUT_CLASSIFICATION	1.549605392334888E-6	DEFECT
// On platforms without a c-library accessable through JNA, getpid will return hashCode  // as $$ used to. Using $$ to kill processes could take down many runtimes, but by basing // $$ on getpid() where available, we have the same semantics as MRI.	WITHOUT_CLASSIFICATION	0.9999652670517319	WITHOUT_CLASSIFICATION	3.4732948268099276E-5	DEFECT
//$@ returns nil if $!.backtrace is not an array	WITHOUT_CLASSIFICATION	0.9999764426967098	WITHOUT_CLASSIFICATION	2.3557303290201986E-5	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9999986709593336	WITHOUT_CLASSIFICATION	1.329040666479234E-6	DEFECT
// MRI behavior: just plain '//' or '\\\\' are considered illegal on Windows.	WITHOUT_CLASSIFICATION	0.9999996534829579	WITHOUT_CLASSIFICATION	3.4651704201245506E-7	DEFECT
// this _is_ legal (when removing an undef)	WITHOUT_CLASSIFICATION	0.9999928387709498	WITHOUT_CLASSIFICATION	7.161229050214696E-6	DEFECT
// What we passed to the constructor for method 'path'	WITHOUT_CLASSIFICATION	0.9999995808786741	WITHOUT_CLASSIFICATION	4.1912132584974716E-7	DEFECT
// ----- Ruby Class Methods ----------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999981580637558	WITHOUT_CLASSIFICATION	1.8419362442115442E-6	DEFECT
// // CONSTANT TABLE METHODS - pass to delegate //	WITHOUT_CLASSIFICATION	0.9999994072888335	WITHOUT_CLASSIFICATION	5.927111664225126E-7	DEFECT
// We get canonical path to try and flatten the path out. // a dir '/subdir/..' should return as '/' // cnutter: Do we want to flatten path out?	WITHOUT_CLASSIFICATION	0.9999973053380017	WITHOUT_CLASSIFICATION	2.6946619982395835E-6	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999992728173316	WITHOUT_CLASSIFICATION	7.271826683093141E-7	DEFECT
// ----- Ruby Instance Methods -------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999941085677259	WITHOUT_CLASSIFICATION	5.891432274166967E-6	DEFECT
// Make sure any read()s after close fail.	WITHOUT_CLASSIFICATION	0.9999927744202849	WITHOUT_CLASSIFICATION	7.225579715090905E-6	DEFECT
// ----- Helper Methods --------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999958943547815	WITHOUT_CLASSIFICATION	4.105645218432322E-6	DEFECT
// try to use POSIX for this first	WITHOUT_CLASSIFICATION	0.9999809173494398	WITHOUT_CLASSIFICATION	1.9082650560227428E-5	DEFECT
// otherwise fall back on the old way	WITHOUT_CLASSIFICATION	0.9999891578811843	WITHOUT_CLASSIFICATION	1.0842118815734424E-5	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999998545738794	WITHOUT_CLASSIFICATION	1.4542612062615291E-7	DEFECT
// No passed in block, lets check next outer frame for one ('Proc.new')	WITHOUT_CLASSIFICATION	0.9999999876611202	WITHOUT_CLASSIFICATION	1.2338879763071579E-8	DEFECT
// modify the block with a new backref/lastline-grabbing scope	WITHOUT_CLASSIFICATION	0.9999998249358503	WITHOUT_CLASSIFICATION	1.7506414964153777E-7	DEFECT
// for future compatibility as constructors move toward not accepting metaclass?	WITHOUT_CLASSIFICATION	0.9999991095399667	WITHOUT_CLASSIFICATION	8.904600332744726E-7	DEFECT
//        case RUBY_HYBRID: //            backtrace = ThreadContext.createRubyHybridBacktrace(getRuntime(), backtraceFrames, javaStackTrace, getRuntime().getDebug().isTrue()); //            break;	WITHOUT_CLASSIFICATION	0.9999803244784298	WITHOUT_CLASSIFICATION	1.967552157021995E-5	DEFECT
// This looks wrong, but it's the way MRI does it.	WITHOUT_CLASSIFICATION	0.999977670709529	WITHOUT_CLASSIFICATION	2.232929047102582E-5	DEFECT
// rb_exc_new3	WITHOUT_CLASSIFICATION	0.9999976695769484	WITHOUT_CLASSIFICATION	2.3304230516362624E-6	DEFECT
// NOTE: The indicies here match exactly the signal values; do not reorder	WITHOUT_CLASSIFICATION	0.9999953671664876	WITHOUT_CLASSIFICATION	4.632833512375179E-6	DEFECT
//registerThreadDumpSignalHandler(runtime);	WITHOUT_CLASSIFICATION	0.9999910213411133	WITHOUT_CLASSIFICATION	8.9786588867039E-6	DEFECT
// IOT is also 6	WITHOUT_CLASSIFICATION	0.9998953772647932	WITHOUT_CLASSIFICATION	1.0462273520682237E-4	DEFECT
// CLD is also 20	WITHOUT_CLASSIFICATION	0.9999805532714675	WITHOUT_CLASSIFICATION	1.9446728532529974E-5	DEFECT
// RubySignal	WITHOUT_CLASSIFICATION	0.9999991562596745	WITHOUT_CLASSIFICATION	8.437403256090345E-7	DEFECT
// ZStream actually *isn't* allocatable	WITHOUT_CLASSIFICATION	0.9999923841212696	WITHOUT_CLASSIFICATION	7.6158787305202255E-6	DEFECT
// MRI behavior, enforced by tests	WITHOUT_CLASSIFICATION	0.9999998308751218	WITHOUT_CLASSIFICATION	1.6912487820851988E-7	DEFECT
// it's safe since adler.update doesn't modify the array	WITHOUT_CLASSIFICATION	0.9999960824232446	WITHOUT_CLASSIFICATION	3.917576755408038E-6	DEFECT
// MRI behavior: in finished mode, we work as pass-through	WITHOUT_CLASSIFICATION	0.9997371254475581	WITHOUT_CLASSIFICATION	2.628745524418346E-4	DEFECT
// SYNC_FLUSH	WITHOUT_CLASSIFICATION	0.9999955555288642	WITHOUT_CLASSIFICATION	4.4444711358425856E-6	DEFECT
// By default, NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999759652353128	WITHOUT_CLASSIFICATION	2.403476468718495E-5	DEFECT
//io.finish();	WITHOUT_CLASSIFICATION	0.9999788791579025	WITHOUT_CLASSIFICATION	2.1120842097416898E-5	DEFECT
// should invoke seek on realIo	WITHOUT_CLASSIFICATION	0.9999960543393622	WITHOUT_CLASSIFICATION	3.945660637813896E-6	DEFECT
// hmm...	WITHOUT_CLASSIFICATION	0.9999920979852278	WITHOUT_CLASSIFICATION	7.902014772191045E-6	DEFECT
// Called before any write to make sure the // header is always written before the first bytes	WITHOUT_CLASSIFICATION	0.9999977288645117	WITHOUT_CLASSIFICATION	2.2711354883369808E-6	DEFECT
// For JDK 1.4 we can use "cal.getTimeInMillis()"	WITHOUT_CLASSIFICATION	0.9965922286492429	WITHOUT_CLASSIFICATION	0.0034077713507571503	DEFECT
// We can just use dt, since it is immutable	WITHOUT_CLASSIFICATION	0.9999998484008868	WITHOUT_CLASSIFICATION	1.5159911314620995E-7	DEFECT
// float number of seconds	WITHOUT_CLASSIFICATION	0.9999999135583363	WITHOUT_CLASSIFICATION	8.644166374153482E-8	DEFECT
// modified to match how hash is calculated in 1.8.2	WITHOUT_CLASSIFICATION	0.9999971330069377	WITHOUT_CLASSIFICATION	2.866993062172141E-6	DEFECT
// dump usec, not msec	WITHOUT_CLASSIFICATION	0.99999860776155	WITHOUT_CLASSIFICATION	1.3922384499745112E-6	DEFECT
/* Time class methods */	WITHOUT_CLASSIFICATION	0.9999705164343148	WITHOUT_CLASSIFICATION	2.9483565685136814E-5	DEFECT
// marsaling dumps usec, not msec	WITHOUT_CLASSIFICATION	0.9999995677678747	WITHOUT_CLASSIFICATION	4.3223212528597593E-7	DEFECT
// MRI accepts additional wday argument which appears to be ignored.	WITHOUT_CLASSIFICATION	0.9999996729752306	WITHOUT_CLASSIFICATION	3.2702476946424755E-7	DEFECT
// set up with min values and then add to allow rolling over	WITHOUT_CLASSIFICATION	0.9999997499304799	WITHOUT_CLASSIFICATION	2.500695200651927E-7	DEFECT
// the instant at which we will ask dtz what the difference between DST and // standard time is	WITHOUT_CLASSIFICATION	0.999991720105577	WITHOUT_CLASSIFICATION	8.279894422985195E-6	DEFECT
// if we might be moving this time from !DST -> DST, the offset is assumed // to be the same as it was just before we last moved from DST -> !DST	WITHOUT_CLASSIFICATION	0.9999990990610841	WITHOUT_CLASSIFICATION	9.009389159453069E-7	DEFECT
// Ignores usec if 8 args (for compatibility with parsedate) or if not supplied.	WITHOUT_CLASSIFICATION	0.9999999904745814	WITHOUT_CLASSIFICATION	9.525418592932606E-9	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999858332350444	WITHOUT_CLASSIFICATION	1.4166764955488307E-5	DEFECT
/* If the value will fit in a Fixnum, return one of those. */	WITHOUT_CLASSIFICATION	0.9999855412046144	WITHOUT_CLASSIFICATION	1.4458795385776796E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999842639970068	WITHOUT_CLASSIFICATION	1.5736002993151964E-5	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9999923454036405	WITHOUT_CLASSIFICATION	7.654596359581582E-6	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999693542376845	WITHOUT_CLASSIFICATION	3.064576231543085E-5	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999693542376845	WITHOUT_CLASSIFICATION	3.064576231543085E-5	DEFECT
// no bignorm here needed	WITHOUT_CLASSIFICATION	0.999999011735211	WITHOUT_CLASSIFICATION	9.882647889428064E-7	DEFECT
// wow, the only time we can use the java protocol ;)	WITHOUT_CLASSIFICATION	0.9999998179757037	WITHOUT_CLASSIFICATION	1.8202429626343742E-7	DEFECT
// Pad with a 0	WITHOUT_CLASSIFICATION	0.999998684706	WITHOUT_CLASSIFICATION	1.3152940000858616E-6	DEFECT
// BigInteger required a sign byte in incoming array	WITHOUT_CLASSIFICATION	0.9999957873128238	WITHOUT_CLASSIFICATION	4.212687176238678E-6	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9999683413785332	WITHOUT_CLASSIFICATION	3.165862146684443E-5	DEFECT
// We do this b/c make_tmpname might be overridden	WITHOUT_CLASSIFICATION	0.9999393512190629	WITHOUT_CLASSIFICATION	6.064878093724576E-5	DEFECT
// ???	WITHOUT_CLASSIFICATION	0.9999260744873993	WITHOUT_CLASSIFICATION	7.392551260064908E-5	DEFECT
// PID	WITHOUT_CLASSIFICATION	0.9999938706516692	WITHOUT_CLASSIFICATION	6.12934833076538E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999842639970068	WITHOUT_CLASSIFICATION	1.5736002993151964E-5	DEFECT
// elements and trailing nils	WITHOUT_CLASSIFICATION	0.9999984964684921	WITHOUT_CLASSIFICATION	1.503531507888333E-6	DEFECT
// Dir::tmpdir	WITHOUT_CLASSIFICATION	0.9999965156227322	WITHOUT_CLASSIFICATION	3.4843772677930383E-6	DEFECT
// volatile to ensure that initial nil-fill is visible to other threads	WITHOUT_CLASSIFICATION	0.9999999410323159	WITHOUT_CLASSIFICATION	5.896768412985374E-8	DEFECT
/* Ruby arrays default to holding 16 elements, so we create an         * ArrayList of the same size if we're not told otherwise         */	WITHOUT_CLASSIFICATION	0.9999972874377061	WITHOUT_CLASSIFICATION	2.712562293850486E-6	DEFECT
/* rb_ary_new2     * just allocates the internal array     */	WITHOUT_CLASSIFICATION	0.9999988285033939	WITHOUT_CLASSIFICATION	1.1714966060328663E-6	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999989848849409	WITHOUT_CLASSIFICATION	1.0151150590622266E-6	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999989848849409	WITHOUT_CLASSIFICATION	1.0151150590622266E-6	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999989848849409	WITHOUT_CLASSIFICATION	1.0151150590622266E-6	DEFECT
/* Array constructors taking the MetaClass to fulfil MRI Array subclass behaviour     *      */	WITHOUT_CLASSIFICATION	0.9999993326178634	WITHOUT_CLASSIFICATION	6.673821365528063E-7	DEFECT
/* NEWOBJ and OBJSETUP equivalent     * fastest one, for shared arrays, optional objectspace     */	WITHOUT_CLASSIFICATION	0.9999999488915604	WITHOUT_CLASSIFICATION	5.110843972263922E-8	DEFECT
// Create global constants and variables	WITHOUT_CLASSIFICATION	0.9999999589760039	WITHOUT_CLASSIFICATION	4.102399602155532E-8	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.999999641219649	WITHOUT_CLASSIFICATION	3.587803509893064E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.999999641219649	WITHOUT_CLASSIFICATION	3.587803509893064E-7	DEFECT
// Windows does not support these functions, so we won't even try // This also matches Ruby behavior for JRUBY-2353.	WITHOUT_CLASSIFICATION	0.9999521691081092	WITHOUT_CLASSIFICATION	4.783089189078596E-5	DEFECT
// There are two different popular TZ formats: legacy (AST+3:00:00, GMT-3), and // newer one (US/Pacific, America/Los_Angeles). This pattern is to detect // the legacy TZ format in order to convert it to the newer format // understood by Java API.	WITHOUT_CLASSIFICATION	0.9999940336973482	WITHOUT_CLASSIFICATION	5.966302651804538E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.999999641219649	WITHOUT_CLASSIFICATION	3.587803509893064E-7	DEFECT
// 1.9 seems to just do inspect for to_s now	WITHOUT_CLASSIFICATION	0.9999987104035432	WITHOUT_CLASSIFICATION	1.2895964567853539E-6	DEFECT
// possibly should not in object space	WITHOUT_CLASSIFICATION	0.999962882193892	WITHOUT_CLASSIFICATION	3.711780610816025E-5	DEFECT
// only fill if there actually will remain trailing storage	WITHOUT_CLASSIFICATION	0.9999994653276083	WITHOUT_CLASSIFICATION	5.346723917409367E-7	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999978132456679	WITHOUT_CLASSIFICATION	2.1867543321123893E-6	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999978132456679	WITHOUT_CLASSIFICATION	2.1867543321123893E-6	DEFECT
// from DUP_SETUP	WITHOUT_CLASSIFICATION	0.9999965740791931	WITHOUT_CLASSIFICATION	3.42592080703593E-6	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999999105568095	WITHOUT_CLASSIFICATION	8.944319048539705E-8	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999685218073084	WITHOUT_CLASSIFICATION	3.147819269162249E-5	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999685218073084	WITHOUT_CLASSIFICATION	3.147819269162249E-5	DEFECT
// Satisfy java.util.List interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999996113979362	WITHOUT_CLASSIFICATION	3.886020636923042E-7	DEFECT
// pre-set for the sake of terminating recursive calls	WITHOUT_CLASSIFICATION	0.999999692956388	WITHOUT_CLASSIFICATION	3.0704361201226514E-7	DEFECT
/* root fiber */	WITHOUT_CLASSIFICATION	0.9999774040319728	WITHOUT_CLASSIFICATION	2.2595968027262898E-5	DEFECT
// GMT+00:00 --> Etc/GMT, see "MRI behavior" // comment below.	WITHOUT_CLASSIFICATION	0.9999999249561272	WITHOUT_CLASSIFICATION	7.504387272727049E-8	DEFECT
//  See http://www.gzip.org/zlib/rfc-gzip.html	WITHOUT_CLASSIFICATION	0.9999954024452286	WITHOUT_CLASSIFICATION	4.597554771444489E-6	DEFECT
// extras flag	WITHOUT_CLASSIFICATION	0.9999994178115952	WITHOUT_CLASSIFICATION	5.821884048235792E-7	DEFECT
// Zlib::NO_FLUSH	WITHOUT_CLASSIFICATION	0.999993012716819	WITHOUT_CLASSIFICATION	6.987283181006585E-6	DEFECT
// ...nothing	WITHOUT_CLASSIFICATION	0.999994946515698	WITHOUT_CLASSIFICATION	5.053484301976344E-6	DEFECT
// utility method	WITHOUT_CLASSIFICATION	0.9999809610381989	WITHOUT_CLASSIFICATION	1.9038961801092264E-5	DEFECT
// Prepare LoadService and load path	WITHOUT_CLASSIFICATION	0.9999977583055465	WITHOUT_CLASSIFICATION	2.2416944535872418E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999842639970068	WITHOUT_CLASSIFICATION	1.5736002993151964E-5	DEFECT
// flags // 4 bytes of modified time	WITHOUT_CLASSIFICATION	0.9999995007817014	WITHOUT_CLASSIFICATION	4.992182985656149E-7	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9999998808581841	WITHOUT_CLASSIFICATION	1.1914181578390963E-7	DEFECT
// 1.8 "include?"	WITHOUT_CLASSIFICATION	0.9999972614507938	WITHOUT_CLASSIFICATION	2.7385492062018726E-6	DEFECT
// any BigInteger is bigger than Fixnum and we don't have FIXABLE	WITHOUT_CLASSIFICATION	0.9920662923973138	WITHOUT_CLASSIFICATION	0.00793370760268609	DEFECT
// beneath are rewritten coercions that reflect MRI logic, the aboves are used only by RubyBigDecimal	WITHOUT_CLASSIFICATION	0.9999984752129946	WITHOUT_CLASSIFICATION	1.5247870053628564E-6	DEFECT
// MRI does it!	WITHOUT_CLASSIFICATION	0.999992636615569	WITHOUT_CLASSIFICATION	7.363384430863387E-6	DEFECT
// won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9998523559775244	WITHOUT_CLASSIFICATION	1.4764402247555836E-4	DEFECT
// it won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9991245920712172	WITHOUT_CLASSIFICATION	8.7540792878275E-4	DEFECT
// RubyClassPathVariable	WITHOUT_CLASSIFICATION	0.9999985266313145	WITHOUT_CLASSIFICATION	1.4733686854890863E-6	DEFECT
// not to be confused with RubyObject's flags	WITHOUT_CLASSIFICATION	0.999999461443183	WITHOUT_CLASSIFICATION	5.38556816945924E-7	DEFECT
// second argument is allowed, but ignored (MRI)	WITHOUT_CLASSIFICATION	0.9999998111026779	WITHOUT_CLASSIFICATION	1.8889732213772955E-7	DEFECT
// we are presumably running a precompiled class; load directly	WITHOUT_CLASSIFICATION	0.9999982574212865	WITHOUT_CLASSIFICATION	1.7425787134685335E-6	DEFECT
// terminate; tryCompile will have printed out an error and we're done	WITHOUT_CLASSIFICATION	0.9999706519422713	WITHOUT_CLASSIFICATION	2.934805772865479E-5	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999995240629559	WITHOUT_CLASSIFICATION	4.759370441731627E-7	DEFECT
// do nothing, this iteration restarts	WITHOUT_CLASSIFICATION	0.9999961494238775	WITHOUT_CLASSIFICATION	3.85057612250803E-6	DEFECT
// recheck condition	WITHOUT_CLASSIFICATION	0.9999962852375587	WITHOUT_CLASSIFICATION	3.714762441365829E-6	DEFECT
// Get the main threadcontext (gets constructed for us)	WITHOUT_CLASSIFICATION	0.9999999380739323	WITHOUT_CLASSIFICATION	6.192606776978733E-8	DEFECT
// Construct key services	WITHOUT_CLASSIFICATION	0.9999900813228325	WITHOUT_CLASSIFICATION	9.918677167498869E-6	DEFECT
// initialize the root of the class hierarchy completely	WITHOUT_CLASSIFICATION	0.9999998776797728	WITHOUT_CLASSIFICATION	1.2232022713545987E-7	DEFECT
// Construct the top-level execution frame and scope for the main thread	WITHOUT_CLASSIFICATION	0.9999999750169234	WITHOUT_CLASSIFICATION	2.4983076685693477E-8	DEFECT
// Initialize all the core classes	WITHOUT_CLASSIFICATION	0.9999970276367983	WITHOUT_CLASSIFICATION	2.972363201704011E-6	DEFECT
// Initialize the "dummy" class used as a marker	WITHOUT_CLASSIFICATION	0.9999997179590908	WITHOUT_CLASSIFICATION	2.820409092125712E-7	DEFECT
// Initialize Kernel and include into Object	WITHOUT_CLASSIFICATION	0.9999863888206616	WITHOUT_CLASSIFICATION	1.3611179338377999E-5	DEFECT
// Object is ready, create top self	WITHOUT_CLASSIFICATION	0.9999984146496366	WITHOUT_CLASSIFICATION	1.5853503634046612E-6	DEFECT
// Pre-create all the core classes potentially referenced during startup	WITHOUT_CLASSIFICATION	0.9999997782553647	WITHOUT_CLASSIFICATION	2.2174463532455585E-7	DEFECT
// Math depends on all numeric types	WITHOUT_CLASSIFICATION	0.9999952611707487	WITHOUT_CLASSIFICATION	4.738829251307499E-6	DEFECT
// depends on IO, FileTest	WITHOUT_CLASSIFICATION	0.9999965803552308	WITHOUT_CLASSIFICATION	3.4196447691966263E-6	DEFECT
// initialize builtin libraries	WITHOUT_CLASSIFICATION	0.9999856168368949	WITHOUT_CLASSIFICATION	1.4383163105002257E-5	DEFECT
// Require in all libraries specified on command line	WITHOUT_CLASSIFICATION	0.9999991476718458	WITHOUT_CLASSIFICATION	8.523281542189231E-7	DEFECT
// Bootstrap the top of the hierarchy	WITHOUT_CLASSIFICATION	0.9999995789244793	WITHOUT_CLASSIFICATION	4.210755206883417E-7	DEFECT
// we try to get the classloader that loaded JRuby, falling back on System	WITHOUT_CLASSIFICATION	0.9999991119298182	WITHOUT_CLASSIFICATION	8.880701819145436E-7	DEFECT
// determine spacing	WITHOUT_CLASSIFICATION	0.9999987754837495	WITHOUT_CLASSIFICATION	1.2245162504545843E-6	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999950126989128	WITHOUT_CLASSIFICATION	4.987301087268897E-6	DEFECT
// For JSR 223 support: see http://scripting.java.net/	WITHOUT_CLASSIFICATION	0.9999988264428249	WITHOUT_CLASSIFICATION	1.1735571750707049E-6	DEFECT
// use this for JRuby-internal finalizers	WITHOUT_CLASSIFICATION	0.9999818607998942	WITHOUT_CLASSIFICATION	1.8139200105856568E-5	DEFECT
// this method is for finalizers registered via ObjectSpace	WITHOUT_CLASSIFICATION	0.9997622941240408	WITHOUT_CLASSIFICATION	2.3770587595908687E-4	DEFECT
// new factory methods ------------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999945444149653	WITHOUT_CLASSIFICATION	5.4555850347848265E-6	DEFECT
//        assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9999838836815518	WITHOUT_CLASSIFICATION	1.6116318448261595E-5	DEFECT
// Equivalent of Data_Wrap_Struct	WITHOUT_CLASSIFICATION	0.9999973996735975	WITHOUT_CLASSIFICATION	2.6003264025801534E-6	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9998702183952572	WITHOUT_CLASSIFICATION	1.297816047427221E-4	DEFECT
// ChannelDescriptors opened by sysopen are cached to avoid collection	WITHOUT_CLASSIFICATION	0.9999998067965644	WITHOUT_CLASSIFICATION	1.932034355196626E-7	DEFECT
// Default objects	WITHOUT_CLASSIFICATION	0.9999995439250936	WITHOUT_CLASSIFICATION	4.5607490627286027E-7	DEFECT
// record separator var, to speed up io ops that use it	WITHOUT_CLASSIFICATION	0.9999998844274836	WITHOUT_CLASSIFICATION	1.1557251645195006E-7	DEFECT
// former java.lang.System concepts now internalized for MVM	WITHOUT_CLASSIFICATION	0.9999977451882338	WITHOUT_CLASSIFICATION	2.2548117663039456E-6	DEFECT
// Java support	WITHOUT_CLASSIFICATION	0.9999991400287873	WITHOUT_CLASSIFICATION	8.599712127811796E-7	DEFECT
// Parser stats	WITHOUT_CLASSIFICATION	0.9999996813449347	WITHOUT_CLASSIFICATION	3.1865506531719755E-7	DEFECT
// Compilation	WITHOUT_CLASSIFICATION	0.9999961585015211	WITHOUT_CLASSIFICATION	3.841498478858187E-6	DEFECT
// can't read non-standard properties	WITHOUT_CLASSIFICATION	0.9999993211896533	WITHOUT_CLASSIFICATION	6.78810346661198E-7	DEFECT
// can't create custom classloaders	WITHOUT_CLASSIFICATION	0.9999994592092069	WITHOUT_CLASSIFICATION	5.407907931226105E-7	DEFECT
// mutex that controls modifications of user-defined finalizers	WITHOUT_CLASSIFICATION	0.9999990604082216	WITHOUT_CLASSIFICATION	9.395917782851841E-7	DEFECT
// mutex that controls modifications of internal finalizers	WITHOUT_CLASSIFICATION	0.9999958900143141	WITHOUT_CLASSIFICATION	4.109985685918892E-6	DEFECT
// A thread pool to use for executing this runtime's Ruby threads	WITHOUT_CLASSIFICATION	0.9999993096505219	WITHOUT_CLASSIFICATION	6.903494780476507E-7	DEFECT
// A global object lock for class hierarchy mutations	WITHOUT_CLASSIFICATION	0.9999998673560843	WITHOUT_CLASSIFICATION	1.3264391565850304E-7	DEFECT
// initial spaces // spaces before "at"	WITHOUT_CLASSIFICATION	0.9999994386367607	WITHOUT_CLASSIFICATION	5.613632393074595E-7	DEFECT
// event name // filename // line numbers should be 1-based	WITHOUT_CLASSIFICATION	0.9999984813920868	WITHOUT_CLASSIFICATION	1.518607913265686E-6	DEFECT
// The method is intentionally not public, since it typically should // not be used outside of the core.	WITHOUT_CLASSIFICATION	0.9999990438112354	WITHOUT_CLASSIFICATION	9.561887646544564E-7	DEFECT
// Note: this field and the following static initializer // must be located be in this order!	WITHOUT_CLASSIFICATION	0.9996910522786944	WITHOUT_CLASSIFICATION	3.089477213057134E-4	DEFECT
// Contains a list of all blocks (as Procs) that should be called when // the runtime environment exits.	WITHOUT_CLASSIFICATION	0.9999923013013315	WITHOUT_CLASSIFICATION	7.69869866856057E-6	DEFECT
// quoted-printable	WITHOUT_CLASSIFICATION	0.9999996476871348	WITHOUT_CLASSIFICATION	3.5231286528955157E-7	DEFECT
// default options	WITHOUT_CLASSIFICATION	0.9999995731310078	WITHOUT_CLASSIFICATION	4.268689921668101E-7	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999913777790425	WITHOUT_CLASSIFICATION	8.622220957583452E-6	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999913777790425	WITHOUT_CLASSIFICATION	8.622220957583452E-6	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999902154221746	WITHOUT_CLASSIFICATION	9.784577825375789E-6	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999902154221746	WITHOUT_CLASSIFICATION	9.784577825375789E-6	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9999894688696815	WITHOUT_CLASSIFICATION	1.053113031852008E-5	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9999894688696815	WITHOUT_CLASSIFICATION	1.053113031852008E-5	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.999995492923996	WITHOUT_CLASSIFICATION	4.507076003932346E-6	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.999995492923996	WITHOUT_CLASSIFICATION	4.507076003932346E-6	DEFECT
// long name option	WITHOUT_CLASSIFICATION	0.9999989976417784	WITHOUT_CLASSIFICATION	1.0023582215493007E-6	DEFECT
// conversion	WITHOUT_CLASSIFICATION	0.9999980974545912	WITHOUT_CLASSIFICATION	1.9025454087812727E-6	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999829663254435	WITHOUT_CLASSIFICATION	1.703367455645707E-5	DEFECT
// string doesn't share any resources	WITHOUT_CLASSIFICATION	0.9999938618366896	WITHOUT_CLASSIFICATION	6.138163310434596E-6	DEFECT
// string has it's own ByteList, but it's pointing to a shared buffer (byte[])	WITHOUT_CLASSIFICATION	0.9999989942023783	WITHOUT_CLASSIFICATION	1.005797621746446E-6	DEFECT
// string doesn't have it's own ByteList (values)	WITHOUT_CLASSIFICATION	0.9999594736523687	WITHOUT_CLASSIFICATION	4.052634763131923E-5	DEFECT
// ENC_CODERANGE_ASCIIONLY	WITHOUT_CLASSIFICATION	0.9999727303468526	WITHOUT_CLASSIFICATION	2.7269653147398917E-5	DEFECT
// rb_enc_str_asciionly_p	WITHOUT_CLASSIFICATION	0.9999989938899622	WITHOUT_CLASSIFICATION	1.0061100377564003E-6	DEFECT
// rb_enc_str_coderange	WITHOUT_CLASSIFICATION	0.999996926495987	WITHOUT_CLASSIFICATION	3.073504012937029E-6	DEFECT
// rb_str_hash_cmp	WITHOUT_CLASSIFICATION	0.9999996222635639	WITHOUT_CLASSIFICATION	3.777364361301066E-7	DEFECT
// Deprecated String construction routines	WITHOUT_CLASSIFICATION	0.9999989514067209	WITHOUT_CLASSIFICATION	1.0485932791065151E-6	DEFECT
// String construction routines by NOT byte[] buffer and NOT making the target String shared 	WITHOUT_CLASSIFICATION	0.9999979294870985	WITHOUT_CLASSIFICATION	2.0705129013936213E-6	DEFECT
/* rb_str_subseq */	WITHOUT_CLASSIFICATION	0.9999966513319758	WITHOUT_CLASSIFICATION	3.3486680242343866E-6	DEFECT
// no need to assign encoding, same bytelist shared	WITHOUT_CLASSIFICATION	0.9999999733602887	WITHOUT_CLASSIFICATION	2.6639711242501476E-8	DEFECT
// if len == 0 then shared empty	WITHOUT_CLASSIFICATION	0.999999879103872	WITHOUT_CLASSIFICATION	1.2089612800651907E-7	DEFECT
/* rb_str_cmp_m */	WITHOUT_CLASSIFICATION	0.9999972633456452	WITHOUT_CLASSIFICATION	2.736654354720803E-6	DEFECT
// we limit to int because ByteBuffer can only allocate int sizes	WITHOUT_CLASSIFICATION	0.9999990213227519	WITHOUT_CLASSIFICATION	9.786772480918778E-7	DEFECT
// // rb_str_buf_append	WITHOUT_CLASSIFICATION	0.9999950528920997	WITHOUT_CLASSIFICATION	4.9471079004097606E-6	DEFECT
// encoding doesn't have to be copied.	WITHOUT_CLASSIFICATION	0.9999902863558492	WITHOUT_CLASSIFICATION	9.713644150823286E-6	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9999462612869725	WITHOUT_CLASSIFICATION	5.373871302745435E-5	DEFECT
// must not reallocate	WITHOUT_CLASSIFICATION	0.999993067374321	WITHOUT_CLASSIFICATION	6.932625679054527E-6	DEFECT
// Illegal combination	WITHOUT_CLASSIFICATION	0.9999910467230129	WITHOUT_CLASSIFICATION	8.953276987151635E-6	DEFECT
// use 1.8 impl	WITHOUT_CLASSIFICATION	0.9999979584481075	WITHOUT_CLASSIFICATION	2.0415518924860864E-6	DEFECT
/* RubyString aka rb_string_value */	WITHOUT_CLASSIFICATION	0.9999580046194297	WITHOUT_CLASSIFICATION	4.1995380570298494E-5	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999913453446904	WITHOUT_CLASSIFICATION	8.654655309711126E-6	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999999580540141	WITHOUT_CLASSIFICATION	4.194598585307353E-8	DEFECT
/* len + margin */	WITHOUT_CLASSIFICATION	0.9999968680732102	WITHOUT_CLASSIFICATION	3.1319267898455037E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999975760088773	WITHOUT_CLASSIFICATION	2.4239911226679873E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999975760088773	WITHOUT_CLASSIFICATION	2.4239911226679873E-6	DEFECT
/* copy pre-match substr */	WITHOUT_CLASSIFICATION	0.999998058792574	WITHOUT_CLASSIFICATION	1.941207426066168E-6	DEFECT
// string given	WITHOUT_CLASSIFICATION	0.9999983711175106	WITHOUT_CLASSIFICATION	1.6288824894246302E-6	DEFECT
// hash given	WITHOUT_CLASSIFICATION	0.999999057893015	WITHOUT_CLASSIFICATION	9.421069849582671E-7	DEFECT
// This represents left most digit in a set of incremented // values?  Therefore leftmost numeric must be '1' and not '0' // 999 -> 1000, not 999 -> 0000.  whereas chars should be // zzz -> aaaa and non-alnum byte values should be "\377" -> "\001\000"	WITHOUT_CLASSIFICATION	0.9999917523872309	WITHOUT_CLASSIFICATION	8.247612769116131E-6	DEFECT
/* substring longer than string */	WITHOUT_CLASSIFICATION	0.9999935179348244	WITHOUT_CLASSIFICATION	6.4820651756170785E-6	DEFECT
/* rb_str_substr */	WITHOUT_CLASSIFICATION	0.9999970257625935	WITHOUT_CLASSIFICATION	2.974237406555842E-6	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999954716424748	WITHOUT_CLASSIFICATION	4.528357525137943E-6	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999954716424748	WITHOUT_CLASSIFICATION	4.528357525137943E-6	DEFECT
/* rb_str_splice */	WITHOUT_CLASSIFICATION	0.9999968589255169	WITHOUT_CLASSIFICATION	3.141074483017172E-6	DEFECT
// TODO: keep cr // TODO: rb_str_splice_0	WITHOUT_CLASSIFICATION	0.9087905194089549	WITHOUT_CLASSIFICATION	0.0912094805910451	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.999997298029327	WITHOUT_CLASSIFICATION	2.7019706731047597E-6	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.999997298029327	WITHOUT_CLASSIFICATION	2.7019706731047597E-6	DEFECT
/* wrapped to \0...\0.  search next valid char. */	WITHOUT_CLASSIFICATION	0.999999858184503	WITHOUT_CLASSIFICATION	1.4181549701216128E-7	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.999971718850839	WITHOUT_CLASSIFICATION	2.8281149160958073E-5	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.999971718850839	WITHOUT_CLASSIFICATION	2.8281149160958073E-5	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999983307090976	WITHOUT_CLASSIFICATION	1.669290902436624E-6	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999983307090976	WITHOUT_CLASSIFICATION	1.669290902436624E-6	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999940193849212	WITHOUT_CLASSIFICATION	5.980615078849918E-6	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999940193849212	WITHOUT_CLASSIFICATION	5.980615078849918E-6	DEFECT
// QTRUE	WITHOUT_CLASSIFICATION	0.99999562636143	WITHOUT_CLASSIFICATION	4.373638570057136E-6	DEFECT
/* retrieve last replacer */	WITHOUT_CLASSIFICATION	0.9999962451153623	WITHOUT_CLASSIFICATION	3.7548846376183517E-6	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999941499190766	WITHOUT_CLASSIFICATION	5.850080923289915E-6	DEFECT
// long size * bits in byte	WITHOUT_CLASSIFICATION	0.999986648597845	WITHOUT_CLASSIFICATION	1.3351402155096875E-5	DEFECT
// from encoding, special-casing ASCII* to ASCII	WITHOUT_CLASSIFICATION	0.9999998527027991	WITHOUT_CLASSIFICATION	1.4729720096214934E-7	DEFECT
// to encoding, same special-casing	WITHOUT_CLASSIFICATION	0.9999994613381481	WITHOUT_CLASSIFICATION	5.386618519218913E-7	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999970001217171	WITHOUT_CLASSIFICATION	2.9998782828228824E-6	DEFECT
// decode from "from" and encode to "to"	WITHOUT_CLASSIFICATION	0.9999992998631095	WITHOUT_CLASSIFICATION	7.001368903804139E-7	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999970001217171	WITHOUT_CLASSIFICATION	2.9998782828228824E-6	DEFECT
//Kernel is the only Module that doesn't need an implementor	WITHOUT_CLASSIFICATION	0.99957678245348	WITHOUT_CLASSIFICATION	4.2321754652000995E-4	DEFECT
// no binding given, use (eval)	WITHOUT_CLASSIFICATION	0.9999998412047504	WITHOUT_CLASSIFICATION	1.5879524972732034E-7	DEFECT
// interned, OK for "fast" methods	WITHOUT_CLASSIFICATION	0.9999947832400494	WITHOUT_CLASSIFICATION	5.216759950586125E-6	DEFECT
// File to be loaded by autoload has already been or is being loaded.	WITHOUT_CLASSIFICATION	0.9999590259014365	WITHOUT_CLASSIFICATION	4.097409856359848E-5	DEFECT
// rb_cstr_to_dbl case	WITHOUT_CLASSIFICATION	0.9999990331838083	WITHOUT_CLASSIFICATION	9.66816191673141E-7	DEFECT
// We break if we know this sleep was explicitly woken up/interrupted	WITHOUT_CLASSIFICATION	0.9999802708228165	WITHOUT_CLASSIFICATION	1.972917718360077E-5	DEFECT
// exec process, create IO with process	WITHOUT_CLASSIFICATION	0.9999998781798093	WITHOUT_CLASSIFICATION	1.218201906728993E-7	DEFECT
// Zero sleeps forever	WITHOUT_CLASSIFICATION	0.9999977559817605	WITHOUT_CLASSIFICATION	2.244018239576595E-6	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9999999497613414	WITHOUT_CLASSIFICATION	5.023865847317212E-8	DEFECT
// Explicit zero in MRI returns immediately	WITHOUT_CLASSIFICATION	0.9999942157184418	WITHOUT_CLASSIFICATION	5.7842815582118515E-6	DEFECT
// Spurious wakeup-loop	WITHOUT_CLASSIFICATION	0.999998700360461	WITHOUT_CLASSIFICATION	1.2996395389358082E-6	DEFECT
// adjusts paths started with '/' or '\\', on windows.	WITHOUT_CLASSIFICATION	0.999999802454983	WITHOUT_CLASSIFICATION	1.9754501709397205E-7	DEFECT
// file not given	WITHOUT_CLASSIFICATION	0.9999929819010551	WITHOUT_CLASSIFICATION	7.018098944845391E-6	DEFECT
// string to eval	WITHOUT_CLASSIFICATION	0.9999984537903674	WITHOUT_CLASSIFICATION	1.5462096326143366E-6	DEFECT
// binding given, use binding's file	WITHOUT_CLASSIFICATION	0.9999985851034824	WITHOUT_CLASSIFICATION	1.4148965176011098E-6	DEFECT
// ?g  | boolean | True if file1 has the \CF{setgid} bit	WITHOUT_CLASSIFICATION	0.999994804984608	WITHOUT_CLASSIFICATION	5.1950153919711434E-6	DEFECT
// bomb out, it's not a binding or a proc	WITHOUT_CLASSIFICATION	0.9999979988767002	WITHOUT_CLASSIFICATION	2.001123299864359E-6	DEFECT
// Ordering of array traversal not important, just intuitive	WITHOUT_CLASSIFICATION	0.999998514336013	WITHOUT_CLASSIFICATION	1.485663986993688E-6	DEFECT
//Catch active, throw for catch to handle	WITHOUT_CLASSIFICATION	0.9999993379281933	WITHOUT_CLASSIFICATION	6.620718067266446E-7	DEFECT
// No catch active for this throw	WITHOUT_CLASSIFICATION	0.9999933549353928	WITHOUT_CLASSIFICATION	6.64506460722701E-6	DEFECT
// without full tracing, many events will not fire	WITHOUT_CLASSIFICATION	0.999999542610233	WITHOUT_CLASSIFICATION	4.57389766994484E-7	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9999997766927572	WITHOUT_CLASSIFICATION	2.2330724275109446E-7	DEFECT
// MRI behavior: use first byte of string value if len > 0	WITHOUT_CLASSIFICATION	0.9999995505723198	WITHOUT_CLASSIFICATION	4.4942768011200615E-7	DEFECT
// MRI behavior: now check arg count	WITHOUT_CLASSIFICATION	0.9999757783149484	WITHOUT_CLASSIFICATION	2.4221685051522325E-5	DEFECT
// ?A  | Time    | Last access time for file1	WITHOUT_CLASSIFICATION	0.999995029492224	WITHOUT_CLASSIFICATION	4.970507776036494E-6	DEFECT
// ?b  | boolean | True if file1 is a block device	WITHOUT_CLASSIFICATION	0.9999861783075512	WITHOUT_CLASSIFICATION	1.382169244874149E-5	DEFECT
// ?c  | boolean | True if file1 is a character device	WITHOUT_CLASSIFICATION	0.9999995901390425	WITHOUT_CLASSIFICATION	4.098609574124069E-7	DEFECT
// ?C  | Time    | Last change time for file1	WITHOUT_CLASSIFICATION	0.9999991617661356	WITHOUT_CLASSIFICATION	8.382338644761097E-7	DEFECT
// ?d  | boolean | True if file1 exists and is a directory	WITHOUT_CLASSIFICATION	0.9999962717675289	WITHOUT_CLASSIFICATION	3.7282324710950984E-6	DEFECT
// ?e  | boolean | True if file1 exists	WITHOUT_CLASSIFICATION	0.9999990655959473	WITHOUT_CLASSIFICATION	9.344040527963013E-7	DEFECT
// ?f  | boolean | True if file1 exists and is a regular file	WITHOUT_CLASSIFICATION	0.9999982961202702	WITHOUT_CLASSIFICATION	1.7038797297180785E-6	DEFECT
// ?G  | boolean | True if file1 exists and has a group ownership equal to the caller's group	WITHOUT_CLASSIFICATION	0.9999999809185213	WITHOUT_CLASSIFICATION	1.908147876156486E-8	DEFECT
// ?k  | boolean | True if file1 exists and has the sticky bit set	WITHOUT_CLASSIFICATION	0.9999932010843978	WITHOUT_CLASSIFICATION	6.79891560217068E-6	DEFECT
// ?M  | Time    | Last modification time for file1	WITHOUT_CLASSIFICATION	0.9999972048516785	WITHOUT_CLASSIFICATION	2.7951483214155827E-6	DEFECT
// ?o  | boolean | True if file1 exists and is owned by the caller's effective uid	WITHOUT_CLASSIFICATION	0.999997769184229	WITHOUT_CLASSIFICATION	2.2308157709695386E-6	DEFECT
// ?O  | boolean | True if file1 exists and is owned by the caller's real uid 	WITHOUT_CLASSIFICATION	0.9999939932786559	WITHOUT_CLASSIFICATION	6.006721344186035E-6	DEFECT
// ?p  | boolean | True if file1 exists and is a fifo	WITHOUT_CLASSIFICATION	0.9999981916251482	WITHOUT_CLASSIFICATION	1.808374851789854E-6	DEFECT
// ?r  | boolean | True if file1 is readable by the effective uid/gid of the caller	WITHOUT_CLASSIFICATION	0.9999991493106211	WITHOUT_CLASSIFICATION	8.506893789255229E-7	DEFECT
// ?s  | int/nil | If file1 has nonzero size, return the size, otherwise nil	WITHOUT_CLASSIFICATION	0.999998890720327	WITHOUT_CLASSIFICATION	1.1092796730200196E-6	DEFECT
// ?S  | boolean | True if file1 exists and is a socket	WITHOUT_CLASSIFICATION	0.9999893367232296	WITHOUT_CLASSIFICATION	1.0663276770335008E-5	DEFECT
// ?u  | boolean | True if file1 has the setuid bit set	WITHOUT_CLASSIFICATION	0.9999924305822632	WITHOUT_CLASSIFICATION	7.569417736851197E-6	DEFECT
// ?x  | boolean | True if file1 exists and is executable by the effective uid/gid	WITHOUT_CLASSIFICATION	0.9999995613519097	WITHOUT_CLASSIFICATION	4.38648090289965E-7	DEFECT
// ?X  | boolean | True if file1 exists and is executable by the real uid/gid	WITHOUT_CLASSIFICATION	0.9999998005834204	WITHOUT_CLASSIFICATION	1.994165795323531E-7	DEFECT
// ?z  | boolean | True if file1 exists and has a zero length	WITHOUT_CLASSIFICATION	0.9999982903192338	WITHOUT_CLASSIFICATION	1.7096807662205862E-6	DEFECT
// ?=  | boolean | True if the modification times of file1 and file2 are equal	WITHOUT_CLASSIFICATION	0.9999998892554768	WITHOUT_CLASSIFICATION	1.1074452324004001E-7	DEFECT
// ?<  | boolean | True if the modification time of file1 is prior to that of file2	WITHOUT_CLASSIFICATION	0.9999998941470634	WITHOUT_CLASSIFICATION	1.058529366604405E-7	DEFECT
// ?>  | boolean | True if the modification time of file1 is after that of file2	WITHOUT_CLASSIFICATION	0.999998654411816	WITHOUT_CLASSIFICATION	1.3455881840037164E-6	DEFECT
// ?-  | boolean | True if file1 and file2 are identical	WITHOUT_CLASSIFICATION	0.9999997506087055	WITHOUT_CLASSIFICATION	2.493912945345544E-7	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999872271439715	WITHOUT_CLASSIFICATION	1.2772856028498577E-5	DEFECT
// Error info is per-thread	WITHOUT_CLASSIFICATION	0.99985474093168	WITHOUT_CLASSIFICATION	1.4525906832000104E-4	DEFECT
// init errorInfo to nil	WITHOUT_CLASSIFICATION	0.9999634941009999	WITHOUT_CLASSIFICATION	3.650589900008849E-5	DEFECT
// if we're already aborting, we can receive no further mail	WITHOUT_CLASSIFICATION	0.9999977506271803	WITHOUT_CLASSIFICATION	2.249372819660353E-6	DEFECT
// If this thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9999511746001732	WITHOUT_CLASSIFICATION	4.882539982680639E-5	DEFECT
// new interrupt, to hopefully wake it out of any blocking IO	WITHOUT_CLASSIFICATION	0.9999988256481951	WITHOUT_CLASSIFICATION	1.174351804885147E-6	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999993909217101	WITHOUT_CLASSIFICATION	6.090782899908292E-7	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999993909217101	WITHOUT_CLASSIFICATION	6.090782899908292E-7	DEFECT
// JRUBY-2380, associate future early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9999979569040076	WITHOUT_CLASSIFICATION	2.043095992469649E-6	DEFECT
// JRUBY-2380, associate thread early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9999907757033758	WITHOUT_CLASSIFICATION	9.224296624164457E-6	DEFECT
// for Thread::start, which does not call the subclass's initialize	WITHOUT_CLASSIFICATION	0.9999851685524742	WITHOUT_CLASSIFICATION	1.4831447525760478E-5	DEFECT
// JRUBY-3568, inherit threadgroup or use default	WITHOUT_CLASSIFICATION	0.9999983832203427	WITHOUT_CLASSIFICATION	1.6167796572068615E-6	DEFECT
// MRI behavior: value given in seconds; converted to Float; less // than or equal to zero returns immediately; returns nil	WITHOUT_CLASSIFICATION	0.9999997635191212	WITHOUT_CLASSIFICATION	2.364808787979461E-7	DEFECT
// If the target thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9999990501488943	WITHOUT_CLASSIFICATION	9.49851105700186E-7	DEFECT
// We need this loop in order to be able to "unblock" the // join call without actually calling interrupt.	WITHOUT_CLASSIFICATION	0.9999933242288573	WITHOUT_CLASSIFICATION	6.675771142763939E-6	DEFECT
// attempt to decriticalize all if we're the critical thread	WITHOUT_CLASSIFICATION	0.9999989829769453	WITHOUT_CLASSIFICATION	1.0170230546894833E-6	DEFECT
// not valid for "dead" state	WITHOUT_CLASSIFICATION	0.9999993872278004	WITHOUT_CLASSIFICATION	6.127721996674687E-7	DEFECT
// If the killee thread is the same as the killer thread, just die	WITHOUT_CLASSIFICATION	0.9999891144882441	WITHOUT_CLASSIFICATION	1.0885511756002995E-5	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999988415801028	WITHOUT_CLASSIFICATION	1.1584198972223096E-6	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999988415801028	WITHOUT_CLASSIFICATION	1.1584198972223096E-6	DEFECT
// ignore; I don't like doing it, but it seems like we // really just need to make all channels non-blocking by // default and use select when implementing blocking ops, // so if this remains set non-blocking, perhaps it's not // such a big deal...	WITHOUT_CLASSIFICATION	0.9999375010029077	WITHOUT_CLASSIFICATION	6.249899709229832E-5	DEFECT
// can't select, just have to do a blocking call	WITHOUT_CLASSIFICATION	0.9999885995961388	WITHOUT_CLASSIFICATION	1.1400403861140947E-5	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.999999624816785	WITHOUT_CLASSIFICATION	3.7518321493002986E-7	DEFECT
// Create Constants class	WITHOUT_CLASSIFICATION	0.9999999038648737	WITHOUT_CLASSIFICATION	9.613512636978171E-8	DEFECT
// Create constants for open flags	WITHOUT_CLASSIFICATION	0.999999926011587	WITHOUT_CLASSIFICATION	7.3988412986199E-8	DEFECT
// Strip off the O_ prefix, so they become File::RDONLY, and so on	WITHOUT_CLASSIFICATION	0.999998856954829	WITHOUT_CLASSIFICATION	1.1430451709267365E-6	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999994276695372	WITHOUT_CLASSIFICATION	5.723304627310423E-7	DEFECT
// File::Constants module is included in IO.	WITHOUT_CLASSIFICATION	0.9999799115344076	WITHOUT_CLASSIFICATION	2.0088465592485737E-5	DEFECT
// Make sure any existing lock is released before we try and close the file	WITHOUT_CLASSIFICATION	0.999999575458371	WITHOUT_CLASSIFICATION	4.2454162905601825E-7	DEFECT
// null channel always succeeds for all locking operations	WITHOUT_CLASSIFICATION	0.9999993076654765	WITHOUT_CLASSIFICATION	6.923345234960692E-7	DEFECT
// Paths which end in "/" or "\\" must be stripped off.	WITHOUT_CLASSIFICATION	0.9999944345027014	WITHOUT_CLASSIFICATION	5.565497298534481E-6	DEFECT
// Special case for handling ACCMODE, since constantine will generate // an invalid value if it is not defined by the platform.	WITHOUT_CLASSIFICATION	0.9999973113396906	WITHOUT_CLASSIFICATION	2.6886603093518576E-6	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999925516202286	WITHOUT_CLASSIFICATION	7.448379771477406E-6	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999925516202286	WITHOUT_CLASSIFICATION	7.448379771477406E-6	DEFECT
// We're not actually a real file, so we can't flock	WITHOUT_CLASSIFICATION	0.9998915719466083	WITHOUT_CLASSIFICATION	1.0842805339171222E-4	DEFECT
// Should we do anything?	WITHOUT_CLASSIFICATION	0.9989960970276266	WITHOUT_CLASSIFICATION	0.0010039029723734102	DEFECT
/* File class methods */	WITHOUT_CLASSIFICATION	0.9999671200105507	WITHOUT_CLASSIFICATION	3.287998944940278E-5	DEFECT
// MRI-compatible basename handling for windows drive letter paths	WITHOUT_CLASSIFICATION	0.999999823455812	WITHOUT_CLASSIFICATION	1.7654418807289022E-7	DEFECT
// strip c: away from relative-pathed name	WITHOUT_CLASSIFICATION	0.9999994897082565	WITHOUT_CLASSIFICATION	5.102917434402683E-7	DEFECT
// C:\ is returned unchanged	WITHOUT_CLASSIFICATION	0.9999928321084617	WITHOUT_CLASSIFICATION	7.167891538207896E-6	DEFECT
// -1 no match; 0 it is dot file not extension	WITHOUT_CLASSIFICATION	0.9999944113092241	WITHOUT_CLASSIFICATION	5.588690775869808E-6	DEFECT
// trim trailing slashes	WITHOUT_CLASSIFICATION	0.9999994485122007	WITHOUT_CLASSIFICATION	5.514877993313304E-7	DEFECT
// Dot is not at beginning and not at end of filename. 	WITHOUT_CLASSIFICATION	0.9999877587328511	WITHOUT_CLASSIFICATION	1.2241267148923002E-5	DEFECT
// Handle ~user paths 	WITHOUT_CLASSIFICATION	0.9999984992895816	WITHOUT_CLASSIFICATION	1.500710418391567E-6	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.999999624816785	WITHOUT_CLASSIFICATION	3.7518321493002986E-7	DEFECT
// Include additional path separator // (so that dirname of "C:\file.txt" is  "C:\", not "C:")	WITHOUT_CLASSIFICATION	0.9999996843532555	WITHOUT_CLASSIFICATION	3.156467445385931E-7	DEFECT
// FNFException can be thrown in both cases, when the file // is not found, or when permission is denied.	WITHOUT_CLASSIFICATION	0.9999882164582584	WITHOUT_CLASSIFICATION	1.1783541741534518E-5	DEFECT
// No directory delimeter.  Rest of string is username	WITHOUT_CLASSIFICATION	0.999998426393822	WITHOUT_CLASSIFICATION	1.5736061780469305E-6	DEFECT
// If there's a second argument, it's the path to which the first  // argument is relative.	WITHOUT_CLASSIFICATION	0.9999999888821092	WITHOUT_CLASSIFICATION	1.1117890807996814E-8	DEFECT
// Handle ~user paths.	WITHOUT_CLASSIFICATION	0.9999987016434354	WITHOUT_CLASSIFICATION	1.2983565646419768E-6	DEFECT
// If there's no second argument, simply use the working directory  // of the runtime.	WITHOUT_CLASSIFICATION	0.9999999325380482	WITHOUT_CLASSIFICATION	6.746195184285164E-8	DEFECT
// Find out which string to check.	WITHOUT_CLASSIFICATION	0.9999977860316396	WITHOUT_CLASSIFICATION	2.2139683604348878E-6	DEFECT
// Single '~' as whole path to expand	WITHOUT_CLASSIFICATION	0.9999944501149942	WITHOUT_CLASSIFICATION	5.549885005780071E-6	DEFECT
// Count number of extra slashes in the beginning of the string.	WITHOUT_CLASSIFICATION	0.9999999179027314	WITHOUT_CLASSIFICATION	8.209726870398313E-8	DEFECT
// '~user/...' as path to expand	WITHOUT_CLASSIFICATION	0.9999988275802688	WITHOUT_CLASSIFICATION	1.1724197312148883E-6	DEFECT
// '~/...' as path to expand	WITHOUT_CLASSIFICATION	0.9999977118136314	WITHOUT_CLASSIFICATION	2.2881863685811002E-6	DEFECT
// Prepare a string with the same number of redundant slashes so that  // we easily can prepend it to the result.	WITHOUT_CLASSIFICATION	0.9999995864487784	WITHOUT_CLASSIFICATION	4.1355122161757186E-7	DEFECT
// If there are N slashes, then we want N-1.	WITHOUT_CLASSIFICATION	0.9999998245049936	WITHOUT_CLASSIFICATION	1.7549500648151644E-7	DEFECT
// no canonical path yet or length is zero, and we have a / followed by a dot...	WITHOUT_CLASSIFICATION	0.9999164798643609	WITHOUT_CLASSIFICATION	8.35201356390577E-5	DEFECT
// we don't have another slash after this, so replace /. with /	WITHOUT_CLASSIFICATION	0.9999993830987027	WITHOUT_CLASSIFICATION	6.169012972126667E-7	DEFECT
// we do have another slash; omit both / and . (JRUBY-1606)	WITHOUT_CLASSIFICATION	0.9999997690819462	WITHOUT_CLASSIFICATION	2.3091805372519365E-7	DEFECT
// do nothing, we should not delete the drive letter	WITHOUT_CLASSIFICATION	0.9999978664229832	WITHOUT_CLASSIFICATION	2.133577016952699E-6	DEFECT
/* rb: check_modifiable */	WITHOUT_CLASSIFICATION	0.9999808072526072	WITHOUT_CLASSIFICATION	1.919274739277595E-5	DEFECT
/* rb: readable */	WITHOUT_CLASSIFICATION	0.9999798555906536	WITHOUT_CLASSIFICATION	2.0144409346366783E-5	DEFECT
// rename is successful	WITHOUT_CLASSIFICATION	0.9999979566475239	WITHOUT_CLASSIFICATION	2.0433524761533686E-6	DEFECT
// rename via Java API call wasn't successful, let's try some tricks, similar to MRI 	WITHOUT_CLASSIFICATION	0.9999945891984724	WITHOUT_CLASSIFICATION	5.410801527634319E-6	DEFECT
// try to rename one more time	WITHOUT_CLASSIFICATION	0.9999974742129828	WITHOUT_CLASSIFICATION	2.525787017282065E-6	DEFECT
// Can we produce IOError which bypasses a close?	WITHOUT_CLASSIFICATION	0.9999346996346181	WITHOUT_CLASSIFICATION	6.53003653819376E-5	DEFECT
// Fast path since JNA stat is about 10x slower than this	WITHOUT_CLASSIFICATION	0.9997108691663601	WITHOUT_CLASSIFICATION	2.8913083363985037E-4	DEFECT
// RubyContinuation	WITHOUT_CLASSIFICATION	0.9999950821345771	WITHOUT_CLASSIFICATION	4.917865422833994E-6	DEFECT
/*     *  Constructor for internal usage (mainly for Array#|, Array#&, Array#- and Array#uniq)     *  it doesn't initialize ifNone field     */	WITHOUT_CLASSIFICATION	0.9999989967627114	WITHOUT_CLASSIFICATION	1.0032372885727797E-6	DEFECT
// 16 ?	WITHOUT_CLASSIFICATION	0.9999786842310302	WITHOUT_CLASSIFICATION	2.131576896979721E-5	DEFECT
// generation count for O(1) clears	WITHOUT_CLASSIFICATION	0.9999996346093507	WITHOUT_CLASSIFICATION	3.6539064927599276E-7	DEFECT
// size + 1;	WITHOUT_CLASSIFICATION	0.9999948049833925	WITHOUT_CLASSIFICATION	5.1950166074073365E-6	DEFECT
// suboptimal for large hashes (> 1073741824 + 85 entries) not very likely to happen	WITHOUT_CLASSIFICATION	0.9999971423313786	WITHOUT_CLASSIFICATION	2.857668621410181E-6	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9999959677189868	WITHOUT_CLASSIFICATION	4.032281013207549E-6	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9999959677189868	WITHOUT_CLASSIFICATION	4.032281013207549E-6	DEFECT
// put implementation	WITHOUT_CLASSIFICATION	0.9999620637470842	WITHOUT_CLASSIFICATION	3.793625291580569E-5	DEFECT
// get implementation	WITHOUT_CLASSIFICATION	0.99998662587526	WITHOUT_CLASSIFICATION	1.337412473998433E-5	DEFECT
// specialized for value	WITHOUT_CLASSIFICATION	0.9999907170229112	WITHOUT_CLASSIFICATION	9.282977088811043E-6	DEFECT
// delete implementation	WITHOUT_CLASSIFICATION	0.9999903410341625	WITHOUT_CLASSIFICATION	9.658965837431747E-6	DEFECT
// n.b. we need to recompute the hash in case the key object was modified	WITHOUT_CLASSIFICATION	0.9999998068093329	WITHOUT_CLASSIFICATION	1.9319066709285187E-7	DEFECT
/* ============================     * End of hash internals     * ============================     */	WITHOUT_CLASSIFICATION	0.9999987264498442	WITHOUT_CLASSIFICATION	1.2735501556639797E-6	DEFECT
/*  ================     *  Instance Methods     *  ================     */	WITHOUT_CLASSIFICATION	0.9999842639970068	WITHOUT_CLASSIFICATION	1.5736002993151964E-5	DEFECT
// update the hash value	WITHOUT_CLASSIFICATION	0.9999990433738136	WITHOUT_CLASSIFICATION	9.566261863735187E-7	DEFECT
// other hash does not contain key	WITHOUT_CLASSIFICATION	0.9999955354225676	WITHOUT_CLASSIFICATION	4.4645774324011445E-6	DEFECT
// rb_yield_values(2,...) equivalent	WITHOUT_CLASSIFICATION	0.9999995506779659	WITHOUT_CLASSIFICATION	4.4932203412040104E-7	DEFECT
// Satisfy java.util.Set interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999992905500699	WITHOUT_CLASSIFICATION	7.094499302383014E-7	DEFECT
// remain where we are	WITHOUT_CLASSIFICATION	0.9999882322731032	WITHOUT_CLASSIFICATION	1.176772689682956E-5	DEFECT
// We use file test since it is faster than a stat; also euid == uid in Java always	WITHOUT_CLASSIFICATION	0.9999957796675838	WITHOUT_CLASSIFICATION	4.220332416148431E-6	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9998702183952572	WITHOUT_CLASSIFICATION	1.297816047427221E-4	DEFECT
// once hasNext has been called, we commit to next() returning // the entry it found, even if it were subsequently deleted	WITHOUT_CLASSIFICATION	0.9999996830849431	WITHOUT_CLASSIFICATION	3.169150568815051E-7	DEFECT
// Not exposed by filetest, but so similiar in nature that it is stored here	WITHOUT_CLASSIFICATION	0.9999994290996767	WITHOUT_CLASSIFICATION	5.709003233608265E-7	DEFECT
// We do both writable and writable_real through the same method because // in our java process effective and real userid will always be the same.	WITHOUT_CLASSIFICATION	0.9999990575768346	WITHOUT_CLASSIFICATION	9.424231654781277E-7	DEFECT
// first try as directory	WITHOUT_CLASSIFICATION	0.9999947167869002	WITHOUT_CLASSIFICATION	5.283213099837529E-6	DEFECT
// next as regular file	WITHOUT_CLASSIFICATION	0.9999984564025289	WITHOUT_CLASSIFICATION	1.5435974710997747E-6	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9999997164644783	WITHOUT_CLASSIFICATION	2.8353552175686853E-7	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999995530541314	WITHOUT_CLASSIFICATION	4.4694586857819E-7	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999995530541314	WITHOUT_CLASSIFICATION	4.4694586857819E-7	DEFECT
// Stream-based	WITHOUT_CLASSIFICATION	0.9999994362921898	WITHOUT_CLASSIFICATION	5.637078101275755E-7	DEFECT
// special constructor that accepts stream, not channel	WITHOUT_CLASSIFICATION	0.9999994753721307	WITHOUT_CLASSIFICATION	5.246278692374492E-7	DEFECT
/*     * We use FILE versus IO to match T_FILE in MRI.     */	WITHOUT_CLASSIFICATION	0.9999842733313026	WITHOUT_CLASSIFICATION	1.5726668697487087E-5	DEFECT
// Constants for seek	WITHOUT_CLASSIFICATION	0.9999990934854153	WITHOUT_CLASSIFICATION	9.065145847675785E-7	DEFECT
// confirm we're not reopening self's channel	WITHOUT_CLASSIFICATION	0.9999997891391929	WITHOUT_CLASSIFICATION	2.108608071588272E-7	DEFECT
// check if we're a stdio IO, and ensure we're not badly mutilated	WITHOUT_CLASSIFICATION	0.9999997730328596	WITHOUT_CLASSIFICATION	2.269671402999221E-7	DEFECT
// dup2 new fd into self to preserve fileno and references to it	WITHOUT_CLASSIFICATION	0.9999996113266231	WITHOUT_CLASSIFICATION	3.886733769578211E-7	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999992708960512	WITHOUT_CLASSIFICATION	7.291039487015889E-7	DEFECT
// re-register the descriptor	WITHOUT_CLASSIFICATION	0.9999996378619127	WITHOUT_CLASSIFICATION	3.621380873534329E-7	DEFECT
// since we're not actually duping the incoming channel into our handler, we need to // copy the original sync behavior from the other handler	WITHOUT_CLASSIFICATION	0.99999999689722	WITHOUT_CLASSIFICATION	3.1027799560435167E-9	DEFECT
// re-register	WITHOUT_CLASSIFICATION	0.9999990578007885	WITHOUT_CLASSIFICATION	9.42199211502137E-7	DEFECT
// A potentially previously close IO is being 'reopened'.	WITHOUT_CLASSIFICATION	0.9999877395110338	WITHOUT_CLASSIFICATION	1.2260488966088828E-5	DEFECT
/*     * Ensure that separator is valid otherwise give it the default paragraph separator.     */	WITHOUT_CLASSIFICATION	0.999999777522488	WITHOUT_CLASSIFICATION	2.2247751185544892E-7	DEFECT
// loop until we see the nth separator char	WITHOUT_CLASSIFICATION	0.9999999838137029	WITHOUT_CLASSIFICATION	1.618629705790231E-8	DEFECT
// if we hit EOF or reached limit then we're done	WITHOUT_CLASSIFICATION	0.9999982925742351	WITHOUT_CLASSIFICATION	1.7074257648224775E-6	DEFECT
// this is for a range check, near as I can tell	WITHOUT_CLASSIFICATION	0.999957281585448	WITHOUT_CLASSIFICATION	4.2718414551977124E-5	DEFECT
// IO class methods.	WITHOUT_CLASSIFICATION	0.999997623140919	WITHOUT_CLASSIFICATION	2.376859081046396E-6	DEFECT
// use original modes	WITHOUT_CLASSIFICATION	0.9999996980633011	WITHOUT_CLASSIFICATION	3.01936698926301E-7	DEFECT
// See if we already have this descriptor open. // If so then we can mostly share the handler (keep open // file, but possibly change the mode).	WITHOUT_CLASSIFICATION	0.9999960863341928	WITHOUT_CLASSIFICATION	3.913665807237997E-6	DEFECT
// redundant, done above as well	WITHOUT_CLASSIFICATION	0.9999702755554146	WITHOUT_CLASSIFICATION	2.9724444585477223E-5	DEFECT
// MRI behavior: swallow StandardErorrs	WITHOUT_CLASSIFICATION	0.999998059404104	WITHOUT_CLASSIFICATION	1.940595896083582E-6	DEFECT
// -1 == don't set permissions	WITHOUT_CLASSIFICATION	0.9999868279838972	WITHOUT_CLASSIFICATION	1.3172016102850414E-5	DEFECT
// isRetained=true	WITHOUT_CLASSIFICATION	0.9999875198815869	WITHOUT_CLASSIFICATION	1.2480118413202874E-5	DEFECT
// This appears to be some windows-only mode.  On a java platform this is a no-op	WITHOUT_CLASSIFICATION	0.9977230583610662	WITHOUT_CLASSIFICATION	0.0022769416389337533	DEFECT
// if not sync, we switch to write buffered mode	WITHOUT_CLASSIFICATION	0.9999986922546406	WITHOUT_CLASSIFICATION	1.3077453594539687E-6	DEFECT
/*     * Throw bad file descriptor is we can not read on supplied descriptor.     */	WITHOUT_CLASSIFICATION	0.9999878495803333	WITHOUT_CLASSIFICATION	1.2150419666756526E-5	DEFECT
//Everything written	WITHOUT_CLASSIFICATION	0.9999849503818398	WITHOUT_CLASSIFICATION	1.5049618160185118E-5	DEFECT
//            return len - n;	WITHOUT_CLASSIFICATION	0.9999950756055832	WITHOUT_CLASSIFICATION	4.9243944168251125E-6	DEFECT
// Claims conversion is done via 'to_s' in docs.	WITHOUT_CLASSIFICATION	0.9999965413523302	WITHOUT_CLASSIFICATION	3.458647669871188E-6	DEFECT
// Of course this isn't particularly useful.	WITHOUT_CLASSIFICATION	0.9999563704118855	WITHOUT_CLASSIFICATION	4.3629588114558354E-5	DEFECT
// Must be back on first line on rewind.	WITHOUT_CLASSIFICATION	0.9999958133681428	WITHOUT_CLASSIFICATION	4.186631857123482E-6	DEFECT
// Register the new descriptor	WITHOUT_CLASSIFICATION	0.9999996661584295	WITHOUT_CLASSIFICATION	3.338415704727815E-7	DEFECT
// cleanup, raising errors if any	WITHOUT_CLASSIFICATION	0.9999991505155272	WITHOUT_CLASSIFICATION	8.49484472884118E-7	DEFECT
// hmmmm	WITHOUT_CLASSIFICATION	0.9999927108134885	WITHOUT_CLASSIFICATION	7.289186511451745E-6	DEFECT
// I believe Ruby bails out with a "bug" if closing fails	WITHOUT_CLASSIFICATION	0.9999864556125511	WITHOUT_CLASSIFICATION	1.3544387448885623E-5	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec. // And why the hell does webrick pass this in as a first argument!!!!!	WITHOUT_CLASSIFICATION	0.9954914108620316	WITHOUT_CLASSIFICATION	0.004508589137968351	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec.	WITHOUT_CLASSIFICATION	0.9990130144765345	WITHOUT_CLASSIFICATION	9.869855234656286E-4	DEFECT
// Length to read	WITHOUT_CLASSIFICATION	0.999999089017108	WITHOUT_CLASSIFICATION	9.109828920020906E-7	DEFECT
// String/Buffer to read it into	WITHOUT_CLASSIFICATION	0.9999946757988245	WITHOUT_CLASSIFICATION	5.324201175500592E-6	DEFECT
// cryptic for the uninitiated...	WITHOUT_CLASSIFICATION	0.9999999130599663	WITHOUT_CLASSIFICATION	8.694003383004214E-8	DEFECT
// select until read is ready	WITHOUT_CLASSIFICATION	0.9999974862644058	WITHOUT_CLASSIFICATION	2.513735594200622E-6	DEFECT
//        ByteList buffer = null;	WITHOUT_CLASSIFICATION	0.9999904570966108	WITHOUT_CLASSIFICATION	9.54290338912856E-6	DEFECT
//            buffer = str.getByteList();	WITHOUT_CLASSIFICATION	0.9999975862600522	WITHOUT_CLASSIFICATION	2.413739947696768E-6	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999829999011858	WITHOUT_CLASSIFICATION	1.7000098814175822E-5	DEFECT
/* rb: writable */	WITHOUT_CLASSIFICATION	0.9999814382264857	WITHOUT_CLASSIFICATION	1.8561773514391456E-5	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999829999011858	WITHOUT_CLASSIFICATION	1.7000098814175822E-5	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9995751547076703	WITHOUT_CLASSIFICATION	4.24845292329636E-4	DEFECT
// TODO: read into buffer using all the fread logic //        int read = openFile.getMainStream().fread(buffer);	WITHOUT_CLASSIFICATION	0.979435831191872	WITHOUT_CLASSIFICATION	0.020564168808127916	DEFECT
// truncate buffer string to zero, if provided	WITHOUT_CLASSIFICATION	0.9999995157093307	WITHOUT_CLASSIFICATION	4.842906693893839E-7	DEFECT
// TODO: READ_CHECK from MRI	WITHOUT_CLASSIFICATION	0.5892421514804188	DEFECT	0.4107578485195812	WITHOUT_CLASSIFICATION
/* class methods for IO */	WITHOUT_CLASSIFICATION	0.9999896054264117	WITHOUT_CLASSIFICATION	1.0394573588310826E-5	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999929547056796	WITHOUT_CLASSIFICATION	7.04529432037278E-6	DEFECT
// write	WITHOUT_CLASSIFICATION	0.9999991118004784	WITHOUT_CLASSIFICATION	8.881995216571331E-7	DEFECT
// Java's select doesn't do anything about this, so we leave it be.	WITHOUT_CLASSIFICATION	0.9999665150417815	WITHOUT_CLASSIFICATION	3.348495821856902E-5	DEFECT
// make all sockets blocking as configured again // close unregisters all channels, so we can safely reset blocking modes	WITHOUT_CLASSIFICATION	0.9999967168956392	WITHOUT_CLASSIFICATION	3.283104360903164E-6	DEFECT
// FIXME: process options	WITHOUT_CLASSIFICATION	0.9895044001642702	WITHOUT_CLASSIFICATION	0.010495599835729681	DEFECT
// Enebo: annotation processing forced me to do pangea method here...	WITHOUT_CLASSIFICATION	0.9992493159752518	WITHOUT_CLASSIFICATION	7.506840247482004E-4	DEFECT
// NIO based pipe	WITHOUT_CLASSIFICATION	0.9999992963149916	WITHOUT_CLASSIFICATION	7.036850083196048E-7	DEFECT
// not using remove(Object) here to avoid the equals() call	WITHOUT_CLASSIFICATION	0.999999634892175	WITHOUT_CLASSIFICATION	3.651078249414812E-7	DEFECT
// raise will also wake the thread from selection	WITHOUT_CLASSIFICATION	0.9999924596941528	WITHOUT_CLASSIFICATION	7.540305847220387E-6	DEFECT
/* may need to handle ENC_CODERANGE_BROKEN */	WITHOUT_CLASSIFICATION	0.9999944435093269	WITHOUT_CLASSIFICATION	5.556490673114977E-6	DEFECT
// TODO: rb_usascii_str_new2	WITHOUT_CLASSIFICATION	0.8535486925569611	WITHOUT_CLASSIFICATION	0.14645130744303897	DEFECT
// If we know what method was being called, strip everything // before the call. This hides the JRuby and reflection internals.	WITHOUT_CLASSIFICATION	0.9999521030649059	WITHOUT_CLASSIFICATION	4.7896935094106236E-5	DEFECT
// The class of this object	WITHOUT_CLASSIFICATION	0.9999930312523774	WITHOUT_CLASSIFICATION	6.968747622583022E-6	DEFECT
// zeroed by jvm	WITHOUT_CLASSIFICATION	0.9999960432807631	WITHOUT_CLASSIFICATION	3.956719236987425E-6	DEFECT
//objectClass.defineAnnotatedMethods(BasicObjectMethods.class);	WITHOUT_CLASSIFICATION	0.9999786135726394	WITHOUT_CLASSIFICATION	2.138642736056572E-5	DEFECT
// JRUBY-4113: callers should not call setTaint on immediate objects	WITHOUT_CLASSIFICATION	0.9999863561559206	WITHOUT_CLASSIFICATION	1.3643844079486585E-5	DEFECT
// rb_class_boot	WITHOUT_CLASSIFICATION	0.9999997158608612	WITHOUT_CLASSIFICATION	2.8413913879109484E-7	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999763921907794	WITHOUT_CLASSIFICATION	2.3607809220613013E-5	DEFECT
// 1.9 rb_check_to_integer	WITHOUT_CLASSIFICATION	0.9999982089482229	WITHOUT_CLASSIFICATION	1.791051777122839E-6	DEFECT
// for interface impls	WITHOUT_CLASSIFICATION	0.9999990249764984	WITHOUT_CLASSIFICATION	9.750235016898889E-7	DEFECT
// We're cloning ourselves, so we know the result should be a RubyObject	WITHOUT_CLASSIFICATION	0.9999716924333885	WITHOUT_CLASSIFICATION	2.8307566611546438E-5	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9999987730331795	WITHOUT_CLASSIFICATION	1.226966820488553E-6	DEFECT
// can't use -v and stdin	WITHOUT_CLASSIFICATION	0.9999977441868565	WITHOUT_CLASSIFICATION	2.255813143527299E-6	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9999986709593336	WITHOUT_CLASSIFICATION	1.329040666479234E-6	DEFECT
// Equivalent of Data_Get_Struct // This will first check that the object in question is actually a T_DATA equivalent.	WITHOUT_CLASSIFICATION	0.9998575974595828	WITHOUT_CLASSIFICATION	1.4240254041715183E-4	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999833587329754	WITHOUT_CLASSIFICATION	1.6641267024611605E-5	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.999984835847804	WITHOUT_CLASSIFICATION	1.5164152196035476E-5	DEFECT
// // INSTANCE VARIABLE API METHODS //	WITHOUT_CLASSIFICATION	0.9999886464297695	WITHOUT_CLASSIFICATION	1.1353570230521345E-5	DEFECT
// Struct methods	WITHOUT_CLASSIFICATION	0.9999896560296588	WITHOUT_CLASSIFICATION	1.0343970341111499E-5	DEFECT
//runtime.getWarnings().warn(ID.STRUCT_CONSTANT_REDEFINED, frame.getFile(), frame.getLine(), "redefining constant Struct::" + name, name);	WITHOUT_CLASSIFICATION	0.9999975036569392	WITHOUT_CLASSIFICATION	2.496343060827459E-6	DEFECT
// define access methods.	WITHOUT_CLASSIFICATION	0.9999827418371199	WITHOUT_CLASSIFICATION	1.7258162880120852E-5	DEFECT
// if we are storing a name as well, index is one too high for values	WITHOUT_CLASSIFICATION	0.9999887419232535	WITHOUT_CLASSIFICATION	1.125807674648601E-5	DEFECT
// Struct bodies should be public by default, so set block visibility to public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999963396715964	WITHOUT_CLASSIFICATION	3.6603284035434887E-6	DEFECT
// For binding purposes on the newly created struct types	WITHOUT_CLASSIFICATION	0.9999993592574437	WITHOUT_CLASSIFICATION	6.407425563564662E-7	DEFECT
// OBJ_INFECT        	WITHOUT_CLASSIFICATION	0.9999702851885237	WITHOUT_CLASSIFICATION	2.971481147631429E-5	DEFECT
// These call* assume ThreadContext = receiver.getRuntime().getCurrentContext()	WITHOUT_CLASSIFICATION	0.999974834906842	WITHOUT_CLASSIFICATION	2.5165093158079138E-5	DEFECT
// Execute iterateMethod again.	WITHOUT_CLASSIFICATION	0.9999923390110055	WITHOUT_CLASSIFICATION	7.660988994499871E-6	DEFECT
/*     * @param nv number of times to cycle or -1 to cycle indefinitely     */	WITHOUT_CLASSIFICATION	0.9999999750059773	WITHOUT_CLASSIFICATION	2.4994022666723372E-8	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999906392195071	WITHOUT_CLASSIFICATION	9.360780492908249E-6	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999906392195071	WITHOUT_CLASSIFICATION	9.360780492908249E-6	DEFECT
// MUST NOT be used across threads	WITHOUT_CLASSIFICATION	0.9999968563236152	WITHOUT_CLASSIFICATION	3.143676384852616E-6	DEFECT
// superClass may be null.	WITHOUT_CLASSIFICATION	0.9999940971178316	WITHOUT_CLASSIFICATION	5.90288216841792E-6	DEFECT
// Containing class...The parent of Object is null. Object should always be last in chain.	WITHOUT_CLASSIFICATION	0.9999609830844581	WITHOUT_CLASSIFICATION	3.901691554188697E-5	DEFECT
// ClassId is the name of the class/module sans where it is located. // If it is null, then it an anonymous class.	WITHOUT_CLASSIFICATION	0.9999998263817945	WITHOUT_CLASSIFICATION	1.7361820549319146E-7	DEFECT
// ClassProviders return Java class/module (in #defineOrGetClassUnder and // #defineOrGetModuleUnder) when class/module is opened using colon syntax. 	WITHOUT_CLASSIFICATION	0.9999989951020108	WITHOUT_CLASSIFICATION	1.004897989178393E-6	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999997699530329	WITHOUT_CLASSIFICATION	2.300469671617157E-7	DEFECT
// Make sure the module we include does not already exist	WITHOUT_CLASSIFICATION	0.999991892564211	WITHOUT_CLASSIFICATION	8.107435789173176E-6	DEFECT
// MRI checks all types first:	WITHOUT_CLASSIFICATION	0.9999874957631987	WITHOUT_CLASSIFICATION	1.2504236801398922E-5	DEFECT
// we need full traces, use default (slow) populator	WITHOUT_CLASSIFICATION	0.9999999602077085	WITHOUT_CLASSIFICATION	3.979229152190457E-8	DEFECT
// module/singleton methods are all defined public	WITHOUT_CLASSIFICATION	0.9999919136534657	WITHOUT_CLASSIFICATION	8.086346534292598E-6	DEFECT
// See if module is in chain...Cannot match against itself so start at superClass.	WITHOUT_CLASSIFICATION	0.999999877125343	WITHOUT_CLASSIFICATION	1.2287465696032418E-7	DEFECT
// We can safely reference methods here instead of doing getMethods() since if we // are adding we are not using a IncludedModuleWrapper.	WITHOUT_CLASSIFICATION	0.9989005119000605	WITHOUT_CLASSIFICATION	0.0010994880999395465	DEFECT
// we grab serial number first; the worst that will happen is we cache a later // update with an earlier serial number, which would just flush anyway	WITHOUT_CLASSIFICATION	0.9999791703285096	WITHOUT_CLASSIFICATION	2.0829671490392837E-5	DEFECT
// update all hierarchies into which this module has been included	WITHOUT_CLASSIFICATION	0.999999313524317	WITHOUT_CLASSIFICATION	6.864756830493737E-7	DEFECT
// This method is intended only for defining new classes in Ruby code, // so it uses the allocator of the specified superclass or default to // the Object allocator. It should NOT be used to define classes that require a native allocator.	WITHOUT_CLASSIFICATION	0.9999998704388523	WITHOUT_CLASSIFICATION	1.2956114769745903E-7	DEFECT
// need to skip IncludedModuleWrappers	WITHOUT_CLASSIFICATION	0.9999997022875851	WITHOUT_CLASSIFICATION	2.977124149200047E-7	DEFECT
// superClazz = null;	WITHOUT_CLASSIFICATION	0.9999972082454942	WITHOUT_CLASSIFICATION	2.791754505820452E-6	DEFECT
// reopen a java class	WITHOUT_CLASSIFICATION	0.9999996135724494	WITHOUT_CLASSIFICATION	3.864275506885752E-7	DEFECT
// This method is intended only for defining new modules in Ruby code	WITHOUT_CLASSIFICATION	0.9999846549337646	WITHOUT_CLASSIFICATION	1.5345066235404083E-5	DEFECT
// reopen a java module	WITHOUT_CLASSIFICATION	0.9999965548757123	WITHOUT_CLASSIFICATION	3.4451242876845047E-6	DEFECT
//FIXME warning	WITHOUT_CLASSIFICATION	0.9842956936040269	WITHOUT_CLASSIFICATION	0.015704306395973148	DEFECT
// FIXME warning	WITHOUT_CLASSIFICATION	0.9617985292223434	WITHOUT_CLASSIFICATION	0.03820147077765649	DEFECT
// a normal block passed to define_method changes to do arity checking; make it a lambda	WITHOUT_CLASSIFICATION	0.999997971399494	WITHOUT_CLASSIFICATION	2.0286005059649E-6	DEFECT
// for zsupers in define_method (blech!) we tell the proc scope to act as the "argument" scope	WITHOUT_CLASSIFICATION	0.9999992129787784	WITHOUT_CLASSIFICATION	7.870212215600969E-7	DEFECT
// just using required is broken...but no more broken than before zsuper refactoring	WITHOUT_CLASSIFICATION	0.9999970628210892	WITHOUT_CLASSIFICATION	2.9371789107787853E-6	DEFECT
// class and module bodies default to public, so make the block's visibility public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999999741242517	WITHOUT_CLASSIFICATION	2.5875748268152822E-8	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.999999222596176	WITHOUT_CLASSIFICATION	7.774038240669156E-7	DEFECT
// MRI error message says Class, even though Module is ok 	WITHOUT_CLASSIFICATION	0.9999843106352455	WITHOUT_CLASSIFICATION	1.5689364754513772E-5	DEFECT
// scan class hierarchy for module	WITHOUT_CLASSIFICATION	0.9999997302479191	WITHOUT_CLASSIFICATION	2.6975208093078155E-7	DEFECT
/* Module class methods */	WITHOUT_CLASSIFICATION	0.999979400609573	WITHOUT_CLASSIFICATION	2.0599390426967117E-5	DEFECT
// Note: we change current frames visibility here because the methods which call // this method are all "fast" (e.g. they do not created their own frame).	WITHOUT_CLASSIFICATION	0.9999960787383148	WITHOUT_CLASSIFICATION	3.92126168528836E-6	DEFECT
// next in hierarchy is an included version of the module we're attempting, // so we skip including it	WITHOUT_CLASSIFICATION	0.9999950161940973	WITHOUT_CLASSIFICATION	4.983805902802535E-6	DEFECT
// if we haven't encountered a real superclass, use the found module as the new inclusion point	WITHOUT_CLASSIFICATION	0.9999998366950343	WITHOUT_CLASSIFICATION	1.6330496577396346E-7	DEFECT
// build a list of all modules to consider for inclusion	WITHOUT_CLASSIFICATION	0.9999979688513568	WITHOUT_CLASSIFICATION	2.0311486432033776E-6	DEFECT
// if the insertion point is a class, update subclass lists	WITHOUT_CLASSIFICATION	0.99999998574195	WITHOUT_CLASSIFICATION	1.425804990140901E-8	DEFECT
// if there's a non-null superclass, we're including into a normal class hierarchy; // update subclass relationships to avoid stale parent/child relationships	WITHOUT_CLASSIFICATION	0.9999999812621732	WITHOUT_CLASSIFICATION	1.8737826809730996E-8	DEFECT
// ////////////////// CLASS VARIABLE RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999824342077239	WITHOUT_CLASSIFICATION	1.7565792276088507E-5	DEFECT
// ////////////////// CONSTANT RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.999993419904624	WITHOUT_CLASSIFICATION	6.5800953759597524E-6	DEFECT
// Note: includes part of fix for JRUBY-1339	WITHOUT_CLASSIFICATION	0.9998773384044217	WITHOUT_CLASSIFICATION	1.2266159557834278E-4	DEFECT
// ////////////////// CLASS VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999835673855356	WITHOUT_CLASSIFICATION	1.643261446444718E-5	DEFECT
// Wrong Parameter ?	WITHOUT_CLASSIFICATION	0.999997192689659	WITHOUT_CLASSIFICATION	2.8073103409297568E-6	DEFECT
// not actually called anywhere (all known uses call the fast version)	WITHOUT_CLASSIFICATION	0.999987781253238	WITHOUT_CLASSIFICATION	1.2218746761957356E-5	DEFECT
// Not that is loaded loop around to resolve it next pass	WITHOUT_CLASSIFICATION	0.9999998723910198	WITHOUT_CLASSIFICATION	1.276089802382033E-7	DEFECT
// if adding a module under a constant name, set that module's basename to the constant name	WITHOUT_CLASSIFICATION	0.9999998102460248	WITHOUT_CLASSIFICATION	1.897539751995084E-7	DEFECT
// Fix for JRUBY-1339 - search hierarchy for constant	WITHOUT_CLASSIFICATION	0.9999737865260055	WITHOUT_CLASSIFICATION	2.6213473994431146E-5	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999991813577075	WITHOUT_CLASSIFICATION	8.186422924525657E-7	DEFECT
// removes and returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999988353952639	WITHOUT_CLASSIFICATION	1.1646047360026583E-6	DEFECT
// we can't rename a file while it's open in windows	WITHOUT_CLASSIFICATION	0.9999921006046695	WITHOUT_CLASSIFICATION	7.899395330530419E-6	DEFECT
//reopen	WITHOUT_CLASSIFICATION	0.9999345256447542	WITHOUT_CLASSIFICATION	6.547435524583918E-5	DEFECT
// ARGF methods	WITHOUT_CLASSIFICATION	0.9999949656977623	WITHOUT_CLASSIFICATION	5.034302237793376E-6	DEFECT
//         data.currentFile.callMethod(context, "lineno=", line);	WITHOUT_CLASSIFICATION	0.9999984609713292	WITHOUT_CLASSIFICATION	1.539028670881664E-6	DEFECT
// one optional, one required args	WITHOUT_CLASSIFICATION	0.9999997478214883	WITHOUT_CLASSIFICATION	2.5217851167140646E-7	DEFECT
// one optional and no required args	WITHOUT_CLASSIFICATION	0.999999913516066	WITHOUT_CLASSIFICATION	8.648393391716667E-8	DEFECT
// try to get errno value out of the class	WITHOUT_CLASSIFICATION	0.9999999756581397	WITHOUT_CLASSIFICATION	2.4341860342782778E-8	DEFECT
// we got a valid errno value	WITHOUT_CLASSIFICATION	0.9999879159389027	WITHOUT_CLASSIFICATION	1.2084061097420046E-5	DEFECT
// Ensure we're not running on GCJ, since it's not supported and leads to weird errors	WITHOUT_CLASSIFICATION	0.9999995755003986	WITHOUT_CLASSIFICATION	4.244996013542311E-7	DEFECT
// print out as a nice Ruby backtrace	WITHOUT_CLASSIFICATION	0.9999989870926985	WITHOUT_CLASSIFICATION	1.012907301501746E-6	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999414217322886	WITHOUT_CLASSIFICATION	5.8578267711401266E-5	DEFECT
// set thread context JRuby classloader here, for the main thread	WITHOUT_CLASSIFICATION	0.9999999105320354	WITHOUT_CLASSIFICATION	8.94679645895475E-8	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999970989730534	WITHOUT_CLASSIFICATION	2.9010269466172473E-6	DEFECT
// no script to run, return success below	WITHOUT_CLASSIFICATION	0.9999999548466302	WITHOUT_CLASSIFICATION	4.5153369786289616E-8	DEFECT
// Skip /usr/bin/env if it's first	WITHOUT_CLASSIFICATION	0.9999982992495994	WITHOUT_CLASSIFICATION	1.7007504006504874E-6	DEFECT
// Skip any assignments if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9999988134351936	WITHOUT_CLASSIFICATION	1.1865648064604607E-6	DEFECT
// Skip any commandline args if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9999984712113311	WITHOUT_CLASSIFICATION	1.528788668831301E-6	DEFECT
// ignore error	WITHOUT_CLASSIFICATION	0.9999903470845075	WITHOUT_CLASSIFICATION	9.652915492509712E-6	DEFECT
// ////////////////// COMMON CONSTANT / CVAR METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999921506860179	WITHOUT_CLASSIFICATION	7.849313982092417E-6	DEFECT
// ////////////////// INTERNAL MODULE VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999936619015806	WITHOUT_CLASSIFICATION	6.3380984193802625E-6	DEFECT
// ////////////////// LOW-LEVEL CONSTANT INTERFACE //////////////// // // fetch/store/list constants for this module //	WITHOUT_CLASSIFICATION	0.9999993990192443	WITHOUT_CLASSIFICATION	6.0098075567209E-7	DEFECT
// odd	WITHOUT_CLASSIFICATION	0.9999953479303234	WITHOUT_CLASSIFICATION	4.6520696765806805E-6	DEFECT
// JRubyClient	WITHOUT_CLASSIFICATION	0.9999962005310385	WITHOUT_CLASSIFICATION	3.799468961463211E-6	DEFECT
/*     * x = mantissa * 2 ** exponent     *     * Where mantissa is in the range of [.5, 1)     *     */	WITHOUT_CLASSIFICATION	0.9999944608146101	WITHOUT_CLASSIFICATION	5.539185389912032E-6	DEFECT
// Make mantissa same sign so we only have one code path.	WITHOUT_CLASSIFICATION	0.9999979349795803	WITHOUT_CLASSIFICATION	2.065020419562604E-6	DEFECT
// Increase value to hit lower range.	WITHOUT_CLASSIFICATION	0.9999995575514175	WITHOUT_CLASSIFICATION	4.424485825178116E-7	DEFECT
/*     * r = x * 2 ** y     */	WITHOUT_CLASSIFICATION	0.9998579167346131	WITHOUT_CLASSIFICATION	1.420832653869472E-4	DEFECT
/*  0! */	WITHOUT_CLASSIFICATION	0.999969798736787	WITHOUT_CLASSIFICATION	3.0201263212997314E-5	DEFECT
/*  1! */	WITHOUT_CLASSIFICATION	0.9999545526383066	WITHOUT_CLASSIFICATION	4.544736169336258E-5	DEFECT
/*  2! */	WITHOUT_CLASSIFICATION	0.9999646306421821	WITHOUT_CLASSIFICATION	3.536935781786055E-5	DEFECT
/*  3! */	WITHOUT_CLASSIFICATION	0.9999621878449102	WITHOUT_CLASSIFICATION	3.781215508983125E-5	DEFECT
/*  4! */	WITHOUT_CLASSIFICATION	0.9999595235359422	WITHOUT_CLASSIFICATION	4.0476464057847816E-5	DEFECT
/*  5! */	WITHOUT_CLASSIFICATION	0.9999592218860763	WITHOUT_CLASSIFICATION	4.077811392372613E-5	DEFECT
/*  6! */	WITHOUT_CLASSIFICATION	0.9999435855657162	WITHOUT_CLASSIFICATION	5.641443428382825E-5	DEFECT
/*  7! */	WITHOUT_CLASSIFICATION	0.999955074383844	WITHOUT_CLASSIFICATION	4.492561615605858E-5	DEFECT
/*  8! */	WITHOUT_CLASSIFICATION	0.9999706197129454	WITHOUT_CLASSIFICATION	2.9380287054522035E-5	DEFECT
/*  9! */	WITHOUT_CLASSIFICATION	0.9999557683802756	WITHOUT_CLASSIFICATION	4.42316197244218E-5	DEFECT
/* 11! */	WITHOUT_CLASSIFICATION	0.9999571339173691	WITHOUT_CLASSIFICATION	4.286608263089093E-5	DEFECT
/* 12! */	WITHOUT_CLASSIFICATION	0.9999515909536607	WITHOUT_CLASSIFICATION	4.840904633924387E-5	DEFECT
/* 13! */	WITHOUT_CLASSIFICATION	0.9999533959637872	WITHOUT_CLASSIFICATION	4.660403621273938E-5	DEFECT
/* 15! */	WITHOUT_CLASSIFICATION	0.9999473470912138	WITHOUT_CLASSIFICATION	5.265290878625619E-5	DEFECT
/* 16! */	WITHOUT_CLASSIFICATION	0.9999430800260124	WITHOUT_CLASSIFICATION	5.6919973987468066E-5	DEFECT
/* 17! */	WITHOUT_CLASSIFICATION	0.9999240269243729	WITHOUT_CLASSIFICATION	7.597307562716496E-5	DEFECT
/* 19! */	WITHOUT_CLASSIFICATION	0.9999485379517733	WITHOUT_CLASSIFICATION	5.146204822675197E-5	DEFECT
/* 20! */	WITHOUT_CLASSIFICATION	0.9999693918268551	WITHOUT_CLASSIFICATION	3.060817314484791E-5	DEFECT
/* 21! */	WITHOUT_CLASSIFICATION	0.9999669965100852	WITHOUT_CLASSIFICATION	3.300348991466427E-5	DEFECT
// Static constants	WITHOUT_CLASSIFICATION	0.9999989937279008	WITHOUT_CLASSIFICATION	1.0062720991656548E-6	DEFECT
// Clean-up string representation so that it could be understood // by Java's BigDecimal. Not terribly efficient for now. // 1. MRI allows d and D as exponent separators	WITHOUT_CLASSIFICATION	0.9999993139338826	WITHOUT_CLASSIFICATION	6.860661172937233E-7	DEFECT
// 2. MRI allows underscores anywhere	WITHOUT_CLASSIFICATION	0.99999479803275	WITHOUT_CLASSIFICATION	5.201967250036827E-6	DEFECT
// 3. MRI ignores the trailing junk	WITHOUT_CLASSIFICATION	0.9999990174506868	WITHOUT_CLASSIFICATION	9.825493132289417E-7	DEFECT
// MRI behavior: -0 and +0 are two different things	WITHOUT_CLASSIFICATION	0.9999993773827702	WITHOUT_CLASSIFICATION	6.226172298661522E-7	DEFECT
// Java and MRI definitions of modulo are different.	WITHOUT_CLASSIFICATION	0.9999998723006112	WITHOUT_CLASSIFICATION	1.276993887802946E-7	DEFECT
// Java and MRI definitions of remainder are the same.	WITHOUT_CLASSIFICATION	0.9999999027426065	WITHOUT_CLASSIFICATION	9.725739351743647E-8	DEFECT
// Note: MRI has a very non-trivial way of calculating the precision, // so we use very simple approximation here:	WITHOUT_CLASSIFICATION	0.9999983071404341	WITHOUT_CLASSIFICATION	1.6928595658680164E-6	DEFECT
// Iteration variables, for the square root x and the reciprocal v // initial x:  x0 ~ sqrt() // initial v:  v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9999992878410201	WITHOUT_CLASSIFICATION	7.121589799793296E-7	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.999997717068936	WITHOUT_CLASSIFICATION	2.282931063940942E-6	DEFECT
// TODO: why this: .setResult();	WITHOUT_CLASSIFICATION	0.8877394871300176	DEFECT	0.11226051286998243	WITHOUT_CLASSIFICATION
// integer division	WITHOUT_CLASSIFICATION	0.999998543617934	WITHOUT_CLASSIFICATION	1.4563820658311797E-6	DEFECT
// MRI behavior: "If digits is 0, the result is the same as the / operator."	WITHOUT_CLASSIFICATION	0.9999970286564195	WITHOUT_CLASSIFICATION	2.971343580564765E-6	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999973893384542	WITHOUT_CLASSIFICATION	2.610661545914053E-6	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999973893384542	WITHOUT_CLASSIFICATION	2.610661545914053E-6	DEFECT
// Java and MRI definitions of divmod are different.        	WITHOUT_CLASSIFICATION	0.9999998928721993	WITHOUT_CLASSIFICATION	1.0712780077510282E-7	DEFECT
// JRUBY-914: Java 1.4 BigDecimal does not allow a negative scale, so we have to simulate it	WITHOUT_CLASSIFICATION	0.9999254504434331	WITHOUT_CLASSIFICATION	7.454955656696005E-5	DEFECT
// shift the decimal point just to the right of the digit to be rounded to (divide by 10**(abs(scale))) // -1 -> 10's digit, -2 -> 100's digit, etc.	WITHOUT_CLASSIFICATION	0.9999999994905847	WITHOUT_CLASSIFICATION	5.094152132278091E-10	DEFECT
// ...round to that digit	WITHOUT_CLASSIFICATION	0.9999989928506366	WITHOUT_CLASSIFICATION	1.0071493633491619E-6	DEFECT
// ...and shift the result back to the left (multiply by 10**(abs(scale)))	WITHOUT_CLASSIFICATION	0.999999595706731	WITHOUT_CLASSIFICATION	4.042932688711435E-7	DEFECT
//this relies on the Ruby rounding enumerations == Java ones, which they (currently) all are	WITHOUT_CLASSIFICATION	0.9999776118437746	WITHOUT_CLASSIFICATION	2.2388156225325668E-5	DEFECT
// sign	WITHOUT_CLASSIFICATION	0.9999986273751784	WITHOUT_CLASSIFICATION	1.3726248215563888E-6	DEFECT
// significant digits and exponent	WITHOUT_CLASSIFICATION	0.9999998920169405	WITHOUT_CLASSIFICATION	1.0798305944400109E-7	DEFECT
// normalize the value	WITHOUT_CLASSIFICATION	0.9999746790975539	WITHOUT_CLASSIFICATION	2.5320902446118944E-5	DEFECT
// base	WITHOUT_CLASSIFICATION	0.9999982224220056	WITHOUT_CLASSIFICATION	1.7775779943454943E-6	DEFECT
// NOTE: MRI's sqrt precision is limited by 100, // but we allow values more than 100.	WITHOUT_CLASSIFICATION	0.9999031630128811	WITHOUT_CLASSIFICATION	9.683698711890884E-5	DEFECT
// just in case, add a bit of extra precision	WITHOUT_CLASSIFICATION	0.9999986703723653	WITHOUT_CLASSIFICATION	1.3296276346023935E-6	DEFECT
// eh?!	WITHOUT_CLASSIFICATION	0.9999905620073491	WITHOUT_CLASSIFICATION	9.437992650877123E-6	DEFECT
// Note: #fix has only no-arg form, but truncate allows optional parameter.	WITHOUT_CLASSIFICATION	0.9992867907869618	WITHOUT_CLASSIFICATION	7.132092130381757E-4	DEFECT
// General number and precision checking	WITHOUT_CLASSIFICATION	0.9999996057715287	WITHOUT_CLASSIFICATION	3.9422847129077716E-7	DEFECT
// the requested precision	WITHOUT_CLASSIFICATION	0.9999963400531965	WITHOUT_CLASSIFICATION	3.65994680359678E-6	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999998545738794	WITHOUT_CLASSIFICATION	1.4542612062615291E-7	DEFECT
//.append("  -x[directory]   strip off text before #!ruby line and perhaps cd to directory\n")	WITHOUT_CLASSIFICATION	0.9999988278483593	WITHOUT_CLASSIFICATION	1.1721516406794613E-6	DEFECT
// even shift.. // ..floors to 62 or 63 bit BigInteger	WITHOUT_CLASSIFICATION	0.9999991323417601	WITHOUT_CLASSIFICATION	8.676582400314521E-7	DEFECT
// 5 -> 2, -5 -> -3 need half a scale more..	WITHOUT_CLASSIFICATION	0.999999887596347	WITHOUT_CLASSIFICATION	1.1240365308292655E-7	DEFECT
// ..where 100 -> 10 shifts the scale	WITHOUT_CLASSIFICATION	0.9999991184822379	WITHOUT_CLASSIFICATION	8.815177621013025E-7	DEFECT
// Initial x - use double root - multiply by halfBack to unshift - set new scale	WITHOUT_CLASSIFICATION	0.9999997399145911	WITHOUT_CLASSIFICATION	2.600854087897948E-7	DEFECT
// x0 ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999986295705464	WITHOUT_CLASSIFICATION	1.3704294535997748E-6	DEFECT
// for prec 15 root x0 must surely be OK // return small prec roots without iterations	WITHOUT_CLASSIFICATION	0.9999961846661106	WITHOUT_CLASSIFICATION	3.815333889462799E-6	DEFECT
// Initial v - the reciprocal // v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9999991653449376	WITHOUT_CLASSIFICATION	8.346550624580297E-7	DEFECT
// Collect iteration precisions beforehand	WITHOUT_CLASSIFICATION	0.9999969468142783	WITHOUT_CLASSIFICATION	3.053185721706804E-6	DEFECT
// assume nInit = 16 <= prec	WITHOUT_CLASSIFICATION	0.9999973240142741	WITHOUT_CLASSIFICATION	2.675985725842188E-6	DEFECT
// The loop of "Square Root by Coupled Newton Iteration"	WITHOUT_CLASSIFICATION	0.9999998841068344	WITHOUT_CLASSIFICATION	1.1589316557942526E-7	DEFECT
// Increase precision - next iteration supplies n exact digits	WITHOUT_CLASSIFICATION	0.9999998009632873	WITHOUT_CLASSIFICATION	1.9903671264734265E-7	DEFECT
// Next x                                        // e = d - x^2	WITHOUT_CLASSIFICATION	0.9999951163796607	WITHOUT_CLASSIFICATION	4.88362033942514E-6	DEFECT
// x += e*v     ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999958170982096	WITHOUT_CLASSIFICATION	4.182901790377664E-6	DEFECT
// root x is ready!	WITHOUT_CLASSIFICATION	0.9999796347859227	WITHOUT_CLASSIFICATION	2.0365214077416946E-5	DEFECT
// Next v                                        // g = 1 - 2*x*v	WITHOUT_CLASSIFICATION	0.9999953256585876	WITHOUT_CLASSIFICATION	4.674341412371934E-6	DEFECT
// v += g*v     ~ 1/2/sqrt()	WITHOUT_CLASSIFICATION	0.9999967805960691	WITHOUT_CLASSIFICATION	3.2194039307953585E-6	DEFECT
// RubyBigdecimal	WITHOUT_CLASSIFICATION	0.9999993916258031	WITHOUT_CLASSIFICATION	6.08374196933E-7	DEFECT
// c: bind_eval	WITHOUT_CLASSIFICATION	0.99999717514738	WITHOUT_CLASSIFICATION	2.8248526200964854E-6	DEFECT
/*  ================     *  Module Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999723144145327	WITHOUT_CLASSIFICATION	2.7685585467247863E-5	DEFECT
// from CommandlineParser	WITHOUT_CLASSIFICATION	0.9999995433959418	WITHOUT_CLASSIFICATION	4.566040583053585E-7	DEFECT
// This property is a Boolean, to allow three values, so it can match MRI's nil, false and true	WITHOUT_CLASSIFICATION	0.999527405882075	WITHOUT_CLASSIFICATION	4.7259411792500164E-4	DEFECT
// default ClassCache using jitMax as a soft upper bound	WITHOUT_CLASSIFICATION	0.9999998856624749	WITHOUT_CLASSIFICATION	1.1433752515074746E-7	DEFECT
// Until we get a little more solid on 1.9 support we will only run interpreted mode	WITHOUT_CLASSIFICATION	0.9999984311776174	WITHOUT_CLASSIFICATION	1.5688223824760096E-6	DEFECT
// Setting the loader needs to reset the class cache	WITHOUT_CLASSIFICATION	0.9999998203109258	WITHOUT_CLASSIFICATION	1.7968907422654695E-7	DEFECT
// try the normal property first	WITHOUT_CLASSIFICATION	0.9999684666952428	WITHOUT_CLASSIFICATION	3.1533304757322484E-5	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.999996713393645	WITHOUT_CLASSIFICATION	3.2866063548554656E-6	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.999996713393645	WITHOUT_CLASSIFICATION	3.2866063548554656E-6	DEFECT
// try loading from classloader resources	WITHOUT_CLASSIFICATION	0.9999994952355535	WITHOUT_CLASSIFICATION	5.047644464019939E-7	DEFECT
// otherwise fall back on system temp location	WITHOUT_CLASSIFICATION	0.9999961513228809	WITHOUT_CLASSIFICATION	3.848677119154715E-6	DEFECT
// We require the home directory to be absolute	WITHOUT_CLASSIFICATION	0.9999982214535831	WITHOUT_CLASSIFICATION	1.7785464169653942E-6	DEFECT
//consume the file name	WITHOUT_CLASSIFICATION	0.9999926311171881	WITHOUT_CLASSIFICATION	7.368882811929319E-6	DEFECT
// Specify something that can't separate	WITHOUT_CLASSIFICATION	0.9999601461327257	WITHOUT_CLASSIFICATION	3.985386727426458E-5	DEFECT
// try cwd first	WITHOUT_CLASSIFICATION	0.9999981876065472	WITHOUT_CLASSIFICATION	1.8123934526961E-6	DEFECT
// ruby interpreter compatibilty // Usage: ruby [switches] [--] [programfile] [arguments])	WITHOUT_CLASSIFICATION	0.9999999397866602	WITHOUT_CLASSIFICATION	6.021333982386929E-8	DEFECT
// KCode.NONE is used because KCODE does not affect parse in Ruby 1.8 // if Ruby 2.0 encoding pragmas are implemented, this will need to change	WITHOUT_CLASSIFICATION	0.9999793816667584	WITHOUT_CLASSIFICATION	2.06183332416013E-5	DEFECT
// @JRubyMethod(name = "complex?")	WITHOUT_CLASSIFICATION	0.9999899438884987	WITHOUT_CLASSIFICATION	1.0056111501319564E-5	DEFECT
// @JRubyMethod(name = "exact?")	WITHOUT_CLASSIFICATION	0.9999873688804016	WITHOUT_CLASSIFICATION	1.2631119598271465E-5	DEFECT
// @JRubyMethod(name = "inexact?")	WITHOUT_CLASSIFICATION	0.9999864337595475	WITHOUT_CLASSIFICATION	1.3566240452361E-5	DEFECT
// symbol string *must* be interned	WITHOUT_CLASSIFICATION	0.9999885990721276	WITHOUT_CLASSIFICATION	1.140092787240107E-5	DEFECT
//        assert internedSymbol == internedSymbol.intern() : internedSymbol + " is not interned";	WITHOUT_CLASSIFICATION	0.9999888243701597	WITHOUT_CLASSIFICATION	1.1175629840298867E-5	DEFECT
/* Symbol class methods.     *      */	WITHOUT_CLASSIFICATION	0.9999961383659248	WITHOUT_CLASSIFICATION	3.861634075222732E-6	DEFECT
// TODO: 1.9 rb_enc_symname_p	WITHOUT_CLASSIFICATION	0.8034655787635254	WITHOUT_CLASSIFICATION	0.19653442123647466	DEFECT
// This is needed to unpack stuff	WITHOUT_CLASSIFICATION	0.999994093543587	WITHOUT_CLASSIFICATION	5.906456412950334E-6	DEFECT
// we already confirmed above that length > 0	WITHOUT_CLASSIFICATION	0.9999543022418437	WITHOUT_CLASSIFICATION	4.5697758156326456E-5	DEFECT
// *must* be power of 2!	WITHOUT_CLASSIFICATION	0.9999972546655915	WITHOUT_CLASSIFICATION	2.7453344084166014E-6	DEFECT
// note all fields are final -- rehash creates new entries when necessary. // as documented in java.util.concurrent.ConcurrentHashMap.java, that will // statistically affect only a small percentage (< 20%) of entries for a given rehash.	WITHOUT_CLASSIFICATION	0.9999998871228589	WITHOUT_CLASSIFICATION	1.1287714108247265E-7	DEFECT
//            assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9999838836815518	WITHOUT_CLASSIFICATION	1.6116318448261595E-5	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999936279732546	WITHOUT_CLASSIFICATION	6.372026745312986E-6	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999936279732546	WITHOUT_CLASSIFICATION	6.372026745312986E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998569659315	WITHOUT_CLASSIFICATION	1.4303406844963793E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998569659315	WITHOUT_CLASSIFICATION	1.4303406844963793E-7	DEFECT
// backwards-compatibility, but threadsafe now	WITHOUT_CLASSIFICATION	0.9999931745859515	WITHOUT_CLASSIFICATION	6.825414048493121E-6	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999740353275481	WITHOUT_CLASSIFICATION	2.596467245192256E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999968850723863	WITHOUT_CLASSIFICATION	3.1149276138415354E-6	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999988755446134	WITHOUT_CLASSIFICATION	1.1244553866002833E-6	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999941499190766	WITHOUT_CLASSIFICATION	5.850080923289915E-6	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.999999784164259	WITHOUT_CLASSIFICATION	2.158357409111214E-7	DEFECT
// not so backwards-compatible here, but no one should have been // calling this anyway.	WITHOUT_CLASSIFICATION	0.9998054842434811	WITHOUT_CLASSIFICATION	1.9451575651879976E-4	DEFECT
// Profile	WITHOUT_CLASSIFICATION	0.9999982494158012	WITHOUT_CLASSIFICATION	1.7505841988289686E-6	DEFECT
//static private final String TRANSLIT = "//translit";	WITHOUT_CLASSIFICATION	0.9999978990161627	WITHOUT_CLASSIFICATION	2.100983837325701E-6	DEFECT
// treat start and end as start...end for end >= 0, start..end for end < 0	WITHOUT_CLASSIFICATION	0.9999998376368716	WITHOUT_CLASSIFICATION	1.6236312839907518E-7	DEFECT
// invalid ranges result in an empty string	WITHOUT_CLASSIFICATION	0.9999618644052635	WITHOUT_CLASSIFICATION	3.813559473649886E-5	DEFECT
// Methods of the Nil Class (nil_*):	WITHOUT_CLASSIFICATION	0.9999995592720506	WITHOUT_CLASSIFICATION	4.4072794931749603E-7	DEFECT
// Has read/write been closed or is it still open for business	WITHOUT_CLASSIFICATION	0.9999997231887946	WITHOUT_CLASSIFICATION	2.768112053202655E-7	DEFECT
// Support IO modes that this object was opened with	WITHOUT_CLASSIFICATION	0.999992525154124	WITHOUT_CLASSIFICATION	7.474845876021801E-6	DEFECT
// must let original string know we're modifying, so shared buffers aren't damaged	WITHOUT_CLASSIFICATION	0.9999529749105612	WITHOUT_CLASSIFICATION	4.7025089438878996E-5	DEFECT
// reset the state	WITHOUT_CLASSIFICATION	0.9999992665587454	WITHOUT_CLASSIFICATION	7.334412545951646E-7	DEFECT
// Tainting here if we ever want it. (secure 4)	WITHOUT_CLASSIFICATION	0.9999993761044039	WITHOUT_CLASSIFICATION	6.238955960227188E-7	DEFECT
// rb_match_busy	WITHOUT_CLASSIFICATION	0.9999992522687594	WITHOUT_CLASSIFICATION	7.477312406659803E-7	DEFECT
//str is frozen	WITHOUT_CLASSIFICATION	0.9999501160450541	WITHOUT_CLASSIFICATION	4.9883954945925134E-5	DEFECT
// MRI also does a pointer comparison here	WITHOUT_CLASSIFICATION	0.9999976797644443	WITHOUT_CLASSIFICATION	2.320235555701348E-6	DEFECT
// JRubyServer	WITHOUT_CLASSIFICATION	0.9999952933227614	WITHOUT_CLASSIFICATION	4.706677238615484E-6	DEFECT
// Class.allocate object is not allocatable before it is initialized	WITHOUT_CLASSIFICATION	0.9999996965045554	WITHOUT_CLASSIFICATION	3.034954445343206E-7	DEFECT
// boot the Object class 	WITHOUT_CLASSIFICATION	0.9999959301075217	WITHOUT_CLASSIFICATION	4.069892478202634E-6	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9999987730331795	WITHOUT_CLASSIFICATION	1.226966820488553E-6	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999997699530329	WITHOUT_CLASSIFICATION	2.300469671617157E-7	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999975482528622	WITHOUT_CLASSIFICATION	2.4517471377754802E-6	DEFECT
// This is a non-standard method; have we decided to start extending Ruby? //classClass.defineFastMethod("subclasses", callbackFactory.getFastOptMethod("subclasses"));	WITHOUT_CLASSIFICATION	0.9999088261334304	WITHOUT_CLASSIFICATION	9.117386656967638E-5	DEFECT
// boot the Module and Class classes	WITHOUT_CLASSIFICATION	0.9999996987217962	WITHOUT_CLASSIFICATION	3.0127820383706814E-7	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9999466520029089	WITHOUT_CLASSIFICATION	5.334799709117303E-5	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9999993279185422	WITHOUT_CLASSIFICATION	6.720814577608255E-7	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9999993279185422	WITHOUT_CLASSIFICATION	6.720814577608255E-7	DEFECT
// could be pulled down to RubyClass in future // rb_class_boot	WITHOUT_CLASSIFICATION	0.9999994934089207	WITHOUT_CLASSIFICATION	5.065910792461139E-7	DEFECT
// remove us from old superclass's child classes	WITHOUT_CLASSIFICATION	0.999999873284168	WITHOUT_CLASSIFICATION	1.2671583207691063E-7	DEFECT
// add us to new superclass's child classes	WITHOUT_CLASSIFICATION	0.9999999539071229	WITHOUT_CLASSIFICATION	4.609287710222982E-8	DEFECT
// update all subclasses	WITHOUT_CLASSIFICATION	0.9999998125482187	WITHOUT_CLASSIFICATION	1.874517812888717E-7	DEFECT
// fields to hold Ruby and RubyClass references	WITHOUT_CLASSIFICATION	0.999999179488941	WITHOUT_CLASSIFICATION	8.205110590161908E-7	DEFECT
// static initializing method	WITHOUT_CLASSIFICATION	0.9998938337093033	WITHOUT_CLASSIFICATION	1.0616629069665703E-4	DEFECT
// standard constructor that accepts Ruby, RubyClass	WITHOUT_CLASSIFICATION	0.9999999361223554	WITHOUT_CLASSIFICATION	6.387764460123978E-8	DEFECT
// no-arg constructor using static references to Ruby and RubyClass	WITHOUT_CLASSIFICATION	0.9999999614874068	WITHOUT_CLASSIFICATION	3.851259324622839E-8	DEFECT
// non-signature signature with just IRubyObject	WITHOUT_CLASSIFICATION	0.9999997250054029	WITHOUT_CLASSIFICATION	2.749945971594536E-7	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999983736037418	WITHOUT_CLASSIFICATION	1.6263962582309018E-6	DEFECT
// self // method name	WITHOUT_CLASSIFICATION	0.9999962515705633	WITHOUT_CLASSIFICATION	3.748429436674093E-6	DEFECT
// the default allocator	WITHOUT_CLASSIFICATION	0.9999985454358337	WITHOUT_CLASSIFICATION	1.4545641662276552E-6	DEFECT
// Equivalent of T_DATA	WITHOUT_CLASSIFICATION	0.999986654442605	WITHOUT_CLASSIFICATION	1.3345557394965087E-5	DEFECT
// do nothing, leave empty	WITHOUT_CLASSIFICATION	0.9999950384676493	WITHOUT_CLASSIFICATION	4.961532350788082E-6	DEFECT
// Double.MAX_EXPONENT since Java 1.6	WITHOUT_CLASSIFICATION	0.9999869060196468	WITHOUT_CLASSIFICATION	1.3093980353085566E-5	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999829663254435	WITHOUT_CLASSIFICATION	1.703367455645707E-5	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999999862584839	WITHOUT_CLASSIFICATION	1.3741516216586815E-8	DEFECT
// Make sure all arguments are modules before calling the callbacks	WITHOUT_CLASSIFICATION	0.9999996273453995	WITHOUT_CLASSIFICATION	3.7265460055032366E-7	DEFECT
// MRI extends in order from last to first	WITHOUT_CLASSIFICATION	0.9999993642373196	WITHOUT_CLASSIFICATION	6.357626803424037E-7	DEFECT
// NOTE: Serialization is primarily supported for testing purposes, and there is no general // guarantee that serialization will work correctly. Specifically, instance variables pointing // at symbols, threads, modules, classes, and other unserializable types are not detected.	WITHOUT_CLASSIFICATION	0.9997724998637998	WITHOUT_CLASSIFICATION	2.2750013620022598E-4	DEFECT
// write out ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999997700916813	WITHOUT_CLASSIFICATION	2.2990831872934101E-7	DEFECT
// rest in ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999973990861214	WITHOUT_CLASSIFICATION	2.6009138786830212E-6	DEFECT
// 0x3fff_ffff // -0x4000_0000	WITHOUT_CLASSIFICATION	0.9999919396503452	WITHOUT_CLASSIFICATION	8.06034965483886E-6	DEFECT
// a gotcha	WITHOUT_CLASSIFICATION	0.9999994600102629	WITHOUT_CLASSIFICATION	5.399897370977863E-7	DEFECT
// Java / and % are not the same as ruby	WITHOUT_CLASSIFICATION	0.9999849191294521	WITHOUT_CLASSIFICATION	1.5080870547971944E-5	DEFECT
// A gotcha for Long.MIN_VALUE: value = -value	WITHOUT_CLASSIFICATION	0.9999995050962787	WITHOUT_CLASSIFICATION	4.949037214443431E-7	DEFECT
// Piece of mri rb_to_id	WITHOUT_CLASSIFICATION	0.9999984405501589	WITHOUT_CLASSIFICATION	1.5594498411478226E-6	DEFECT
// Java Doubles are 64 bit long:            	WITHOUT_CLASSIFICATION	0.9999335574418086	WITHOUT_CLASSIFICATION	6.644255819137982E-5	DEFECT
// Double.MAX_EXPONENT since Java 1.6            	WITHOUT_CLASSIFICATION	0.9999889839159254	WITHOUT_CLASSIFICATION	1.1016084074738834E-5	DEFECT
// don't override Numeric#div !	WITHOUT_CLASSIFICATION	0.9998992636541814	WITHOUT_CLASSIFICATION	1.0073634581865874E-4	DEFECT
// Modelled after c ruby implementation (java /,% not same as ruby)	WITHOUT_CLASSIFICATION	0.9999935593390222	WITHOUT_CLASSIFICATION	6.44066097786868E-6	DEFECT
// MRI behavior:	WITHOUT_CLASSIFICATION	0.9999989767184091	WITHOUT_CLASSIFICATION	1.023281590906525E-6	DEFECT
// Numeric.equal            	WITHOUT_CLASSIFICATION	0.9999977261137447	WITHOUT_CLASSIFICATION	2.2738862552474833E-6	DEFECT
// provider is not available	WITHOUT_CLASSIFICATION	0.9999937513210302	WITHOUT_CLASSIFICATION	6.248678969812391E-6	DEFECT
// bouncy castle doesn't support algorithm	WITHOUT_CLASSIFICATION	0.9999979013617155	WITHOUT_CLASSIFICATION	2.0986382843569605E-6	DEFECT
// fall back to system JCA providers	WITHOUT_CLASSIFICATION	0.9999989165066524	WITHOUT_CLASSIFICATION	1.083493347611111E-6	DEFECT
// RubyDigest	WITHOUT_CLASSIFICATION	0.999998189890153	WITHOUT_CLASSIFICATION	1.810109847092783E-6	DEFECT
// ENEBO: Can these be fast?	WITHOUT_CLASSIFICATION	0.9925664157477841	WITHOUT_CLASSIFICATION	0.007433584252215936	DEFECT
// synchronize on the RubyThread for threadgroup updates	WITHOUT_CLASSIFICATION	0.9999999292507129	WITHOUT_CLASSIFICATION	7.074928707615213E-8	DEFECT
// we only add live threads	WITHOUT_CLASSIFICATION	0.9999925145096175	WITHOUT_CLASSIFICATION	7.485490382621217E-6	DEFECT
// use same ClassIndex as metaclass, since we're technically still of that type	WITHOUT_CLASSIFICATION	0.9999999604276208	WITHOUT_CLASSIFICATION	3.9572379175684914E-8	DEFECT
// handle everything after -- as arguments to the jruby process	WITHOUT_CLASSIFICATION	0.9999999504985482	WITHOUT_CLASSIFICATION	4.950145185346279E-8	DEFECT
// JRubyService	WITHOUT_CLASSIFICATION	0.9999951473594868	WITHOUT_CLASSIFICATION	4.852640513254307E-6	DEFECT
// while	WITHOUT_CLASSIFICATION	0.9999962844825536	WITHOUT_CLASSIFICATION	3.7155174462674805E-6	DEFECT
/* \OOO */	WITHOUT_CLASSIFICATION	0.9999630659476044	WITHOUT_CLASSIFICATION	3.693405239558322E-5	DEFECT
// CRuby uses sprintf(buf, "%.*g", FLOAT_DIG, d); // This pattern adjusts the output of String.pattern("%g") to mimic // the C version.	WITHOUT_CLASSIFICATION	0.9999960000825818	WITHOUT_CLASSIFICATION	3.999917418159877E-6	DEFECT
// mask off "once" flag	WITHOUT_CLASSIFICATION	0.9999969205876439	WITHOUT_CLASSIFICATION	3.079412356227541E-6	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.999999928140148	WITHOUT_CLASSIFICATION	7.185985185710966E-8	DEFECT
// internal usage (Complex/Rational)	WITHOUT_CLASSIFICATION	0.9999991443799487	WITHOUT_CLASSIFICATION	8.556200512147499E-7	DEFECT
// silent ?	WITHOUT_CLASSIFICATION	0.999998780333934	WITHOUT_CLASSIFICATION	1.2196660660315974E-6	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9999789142629625	WITHOUT_CLASSIFICATION	2.1085737037546296E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9999574150822435	WITHOUT_CLASSIFICATION	4.2584917756524894E-5	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999824027809349	WITHOUT_CLASSIFICATION	1.7597219065175194E-5	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999880814065936	WITHOUT_CLASSIFICATION	1.191859340644979E-5	DEFECT
/* \O, \OO, \OOO or backref */	WITHOUT_CLASSIFICATION	0.9999899046408155	WITHOUT_CLASSIFICATION	1.0095359184552551E-5	DEFECT
// MBCLEN_NEEDMORE_P	WITHOUT_CLASSIFICATION	0.9999963761321259	WITHOUT_CLASSIFICATION	3.6238678741722504E-6	DEFECT
// MBCLEN_INVALID_P	WITHOUT_CLASSIFICATION	0.9999953060663411	WITHOUT_CLASSIFICATION	4.693933658871704E-6	DEFECT
// Unicode is can be only 21 bits long, int is enough	WITHOUT_CLASSIFICATION	0.9999982679052069	WITHOUT_CLASSIFICATION	1.732094793232488E-6	DEFECT
/* Surrogates */	WITHOUT_CLASSIFICATION	0.9999959052388184	WITHOUT_CLASSIFICATION	4.09476118156398E-6	DEFECT
// do not load the class if not used	WITHOUT_CLASSIFICATION	0.9999997987870174	WITHOUT_CLASSIFICATION	2.0121298258155334E-7	DEFECT
/* \0, \0O, \0OO */	WITHOUT_CLASSIFICATION	0.9999818726013496	WITHOUT_CLASSIFICATION	1.812739865040174E-5	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9999789142629625	WITHOUT_CLASSIFICATION	2.1085737037546296E-5	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999824027809349	WITHOUT_CLASSIFICATION	1.7597219065175194E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9999574150822435	WITHOUT_CLASSIFICATION	4.2584917756524894E-5	DEFECT
/* \\u{H HH HHH HHHH HHHHH HHHHHH ...} */	WITHOUT_CLASSIFICATION	0.9999600382367344	WITHOUT_CLASSIFICATION	3.9961763265516246E-5	DEFECT
/* \\uHHHH */	WITHOUT_CLASSIFICATION	0.999984553527904	WITHOUT_CLASSIFICATION	1.5446472095893256E-5	DEFECT
/* \p{Hiragana} */	WITHOUT_CLASSIFICATION	0.999996759282576	WITHOUT_CLASSIFICATION	3.240717423996378E-6	DEFECT
// inner switch	WITHOUT_CLASSIFICATION	0.9999984829669003	WITHOUT_CLASSIFICATION	1.5170330996652535E-6	DEFECT
// newInstance here	WITHOUT_CLASSIFICATION	0.9999993372369821	WITHOUT_CLASSIFICATION	6.627630178092203E-7	DEFECT
// rb_reg_raise	WITHOUT_CLASSIFICATION	0.9999991535421134	WITHOUT_CLASSIFICATION	8.464578865803141E-7	DEFECT
// rb_reg_desc	WITHOUT_CLASSIFICATION	0.9999992497262384	WITHOUT_CLASSIFICATION	7.502737615424404E-7	DEFECT
// rb_enc_reg_raise	WITHOUT_CLASSIFICATION	0.9999995028513687	WITHOUT_CLASSIFICATION	4.971486312587525E-7	DEFECT
// rb_enc_reg_error_desc	WITHOUT_CLASSIFICATION	0.9999918884675787	WITHOUT_CLASSIFICATION	8.111532421335644E-6	DEFECT
// rb_reg_initialize_str	WITHOUT_CLASSIFICATION	0.9999966498653474	WITHOUT_CLASSIFICATION	3.3501346525359138E-6	DEFECT
// rb_reg_initialize	WITHOUT_CLASSIFICATION	0.9999971530135675	WITHOUT_CLASSIFICATION	2.846986432486158E-6	DEFECT
// JRUBY-3625: delay setting backref until the MatchData is completely initialized	WITHOUT_CLASSIFICATION	0.9999831792110463	WITHOUT_CLASSIFICATION	1.6820788953731465E-5	DEFECT
// rb_reg_expr_str	WITHOUT_CLASSIFICATION	0.9999988890665827	WITHOUT_CLASSIFICATION	1.110933417210846E-6	DEFECT
// option_to_str	WITHOUT_CLASSIFICATION	0.9999995565401627	WITHOUT_CLASSIFICATION	4.434598372777111E-7	DEFECT
// Don't initialize with class // Don't put in object space and don't taint	WITHOUT_CLASSIFICATION	0.9999813113173798	WITHOUT_CLASSIFICATION	1.8688682620235983E-5	DEFECT
// args should be before block	WITHOUT_CLASSIFICATION	0.9999931795250382	WITHOUT_CLASSIFICATION	6.8204749617814585E-6	DEFECT
// args should be at end	WITHOUT_CLASSIFICATION	0.9999903188041216	WITHOUT_CLASSIFICATION	9.681195878459477E-6	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.999998738772667	WITHOUT_CLASSIFICATION	1.2612273330398756E-6	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.999998738772667	WITHOUT_CLASSIFICATION	1.2612273330398756E-6	DEFECT
// skip anything not related to jruby	WITHOUT_CLASSIFICATION	0.999999404893341	WITHOUT_CLASSIFICATION	5.951066589420456E-7	DEFECT
// start a new populator	WITHOUT_CLASSIFICATION	0.9999993254726728	WITHOUT_CLASSIFICATION	6.745273271969495E-7	DEFECT
// check for frame field reads or writes	WITHOUT_CLASSIFICATION	0.9999999655155093	WITHOUT_CLASSIFICATION	3.448449069695216E-8	DEFECT
// add all names for this annotation	WITHOUT_CLASSIFICATION	0.9998081584172062	WITHOUT_CLASSIFICATION	1.9184158279382594E-4	DEFECT
// no annotated methods found, skip	WITHOUT_CLASSIFICATION	0.9999940608021943	WITHOUT_CLASSIFICATION	5.939197805700927E-6	DEFECT
// write out a static initializer for frame names, so it only fires once	WITHOUT_CLASSIFICATION	0.9999998719624269	WITHOUT_CLASSIFICATION	1.2803757309328624E-7	DEFECT
// single method, use normal logic	WITHOUT_CLASSIFICATION	0.9999975342002199	WITHOUT_CLASSIFICATION	2.4657997800658096E-6	DEFECT
// multimethod, new logic	WITHOUT_CLASSIFICATION	0.9999906976848736	WITHOUT_CLASSIFICATION	9.302315126437672E-6	DEFECT
// declared type returns the qualified name without $ for inner classes!!!	WITHOUT_CLASSIFICATION	0.9999997012850327	WITHOUT_CLASSIFICATION	2.9871496732544046E-7	DEFECT
// inner class, use $ to delimit	WITHOUT_CLASSIFICATION	0.9999998979328674	WITHOUT_CLASSIFICATION	1.0206713270187825E-7	DEFECT
//                        RubyModule singletonClass = module.getSingletonClass();	WITHOUT_CLASSIFICATION	0.9999999131076801	WITHOUT_CLASSIFICATION	8.689231995059656E-8	DEFECT
//                }	WITHOUT_CLASSIFICATION	0.9999967446571112	WITHOUT_CLASSIFICATION	3.2553428888483477E-6	DEFECT
// fallback on non-pregenerated logic	WITHOUT_CLASSIFICATION	0.9999942610780918	WITHOUT_CLASSIFICATION	5.7389219082718346E-6	DEFECT
// refresh call adapter, since it matters if this is iter-based or not	WITHOUT_CLASSIFICATION	0.9999911937215398	WITHOUT_CLASSIFICATION	8.80627846023532E-6	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.999999440863547	WITHOUT_CLASSIFICATION	5.591364529891508E-7	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.999999097189162	WITHOUT_CLASSIFICATION	9.028108379158957E-7	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999989560411988	WITHOUT_CLASSIFICATION	1.043958801276873E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999987195319631	WITHOUT_CLASSIFICATION	1.280468036930786E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999987195319631	WITHOUT_CLASSIFICATION	1.280468036930786E-6	DEFECT
// colon3	WITHOUT_CLASSIFICATION	0.9999980611018496	WITHOUT_CLASSIFICATION	1.9388981503790778E-6	DEFECT
// Colon3	WITHOUT_CLASSIFICATION	0.9999965984194169	WITHOUT_CLASSIFICATION	3.4015805830819747E-6	DEFECT
// array created for rescue args doesn't need to be in ObjectSpace.	WITHOUT_CLASSIFICATION	0.9999960188902501	WITHOUT_CLASSIFICATION	3.981109749861039E-6	DEFECT
// For b.foo	WITHOUT_CLASSIFICATION	0.9999966323957522	WITHOUT_CLASSIFICATION	3.367604247748127E-6	DEFECT
// instance config for the script run	WITHOUT_CLASSIFICATION	0.9999969677656851	WITHOUT_CLASSIFICATION	3.0322343147787707E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999987195319631	WITHOUT_CLASSIFICATION	1.280468036930786E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999987195319631	WITHOUT_CLASSIFICATION	1.280468036930786E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999997713175078	WITHOUT_CLASSIFICATION	2.2868249211535926E-7	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999997713175078	WITHOUT_CLASSIFICATION	2.2868249211535926E-7	DEFECT
//RubyModule module = context.getRubyClass();	WITHOUT_CLASSIFICATION	0.9999992310805753	WITHOUT_CLASSIFICATION	7.689194247360237E-7	DEFECT
// For 'b.foo'	WITHOUT_CLASSIFICATION	0.999996536292388	WITHOUT_CLASSIFICATION	3.4637076120578346E-6	DEFECT
// We define an actual list to get around bug in java integration (1387115)	WITHOUT_CLASSIFICATION	0.9999000563637689	WITHOUT_CLASSIFICATION	9.994363623120918E-5	DEFECT
// something in here is used to build up ruby stack trace...	WITHOUT_CLASSIFICATION	0.9999941638807069	WITHOUT_CLASSIFICATION	5.836119293006408E-6	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999991277095572	WITHOUT_CLASSIFICATION	8.722904427880609E-7	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999991277095572	WITHOUT_CLASSIFICATION	8.722904427880609E-7	DEFECT
// do nothing, allow loop to retry	WITHOUT_CLASSIFICATION	0.9999995756752171	WITHOUT_CLASSIFICATION	4.243247829026889E-7	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999978444174461	WITHOUT_CLASSIFICATION	2.1555825539860297E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999996542280901	WITHOUT_CLASSIFICATION	3.457719099034166E-7	DEFECT
// never visited, should be fine	WITHOUT_CLASSIFICATION	0.9999969338272355	WITHOUT_CLASSIFICATION	3.0661727644828095E-6	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999997604607678	WITHOUT_CLASSIFICATION	2.395392322266285E-7	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999950912077735	WITHOUT_CLASSIFICATION	4.908792226531183E-6	DEFECT
// If we have more than one argument, then make sure the array is not ObjectSpaced.	WITHOUT_CLASSIFICATION	0.9999954711766195	WITHOUT_CLASSIFICATION	4.528823380601386E-6	DEFECT
// Only in ruby 1.9 methods	WITHOUT_CLASSIFICATION	0.999901632452462	WITHOUT_CLASSIFICATION	9.836754753801927E-5	DEFECT
// Bind 'normal' parameter values to the local scope for this method.	WITHOUT_CLASSIFICATION	0.9999885683625876	WITHOUT_CLASSIFICATION	1.1431637412321414E-5	DEFECT
// no arg grouping, just use bulk assignment methods	WITHOUT_CLASSIFICATION	0.9999998972512624	WITHOUT_CLASSIFICATION	1.0274873764148939E-7	DEFECT
// optArgs and restArgs require more work, so isolate them and ArrayList creation here	WITHOUT_CLASSIFICATION	0.9999939082957301	WITHOUT_CLASSIFICATION	6.091704269890212E-6	DEFECT
//        arity.checkArity(runtime, argsLength);	WITHOUT_CLASSIFICATION	0.99999954947498	WITHOUT_CLASSIFICATION	4.505250200007161E-7	DEFECT
// no more values to stick in rest arg	WITHOUT_CLASSIFICATION	0.999996211663164	WITHOUT_CLASSIFICATION	3.7883368359474255E-6	DEFECT
// set argv from main's args	WITHOUT_CLASSIFICATION	0.9999990534339696	WITHOUT_CLASSIFICATION	9.465660304317634E-7	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.999999097189162	WITHOUT_CLASSIFICATION	9.028108379158957E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999987195319631	WITHOUT_CLASSIFICATION	1.280468036930786E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999997713175078	WITHOUT_CLASSIFICATION	2.2868249211535926E-7	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999950912077735	WITHOUT_CLASSIFICATION	4.908792226531183E-6	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999755596859481	WITHOUT_CLASSIFICATION	2.4440314051980835E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999755596859481	WITHOUT_CLASSIFICATION	2.4440314051980835E-5	DEFECT
// block.yield depends on null to represent empty and nil to represent nil - [nil] vs [] //assert argsNode != null : "argsNode is not null";	WITHOUT_CLASSIFICATION	0.9999986674257177	WITHOUT_CLASSIFICATION	1.332574282239963E-6	DEFECT
// assign given optional arguments to their variables	WITHOUT_CLASSIFICATION	0.9999999966425998	WITHOUT_CLASSIFICATION	3.357400289695882E-9	DEFECT
// in-frame EvalState should already have receiver set as self, continue to use it	WITHOUT_CLASSIFICATION	0.9999991929749498	WITHOUT_CLASSIFICATION	8.070250502027817E-7	DEFECT
// assign the default values, adding to the end of allArgs	WITHOUT_CLASSIFICATION	0.9999997300770741	WITHOUT_CLASSIFICATION	2.6992292586114726E-7	DEFECT
// Make sure the appropriate scope has proper size. See JRUBY-2046.	WITHOUT_CLASSIFICATION	0.9999865580224448	WITHOUT_CLASSIFICATION	1.3441977555202898E-5	DEFECT
// Experimental class reification support, to create real Java classes // for Ruby classes after the first opening	WITHOUT_CLASSIFICATION	0.9999999745610761	WITHOUT_CLASSIFICATION	2.543892377743204E-8	DEFECT
// This should never happen past parse, but just bulletproof this just in case	WITHOUT_CLASSIFICATION	0.9998348580154478	WITHOUT_CLASSIFICATION	1.6514198455221178E-4	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9999749315526039	WITHOUT_CLASSIFICATION	2.5068447396158106E-5	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999999991979982	WITHOUT_CLASSIFICATION	8.020018128597724E-10	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.999999189599636	WITHOUT_CLASSIFICATION	8.104003641177622E-7	DEFECT
// never visited, should be ok	WITHOUT_CLASSIFICATION	0.9999965450741248	WITHOUT_CLASSIFICATION	3.454925875078164E-6	DEFECT
// If no explicit block passed to super, then use the one passed in, unless it's explicitly cleared with nil	WITHOUT_CLASSIFICATION	0.9999999881639489	WITHOUT_CLASSIFICATION	1.1836051017301224E-8	DEFECT
// JRUBY-530 until case	WITHOUT_CLASSIFICATION	0.9999978948860465	WITHOUT_CLASSIFICATION	2.105113953503737E-6	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999989560411988	WITHOUT_CLASSIFICATION	1.043958801276873E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999997713175078	WITHOUT_CLASSIFICATION	2.2868249211535926E-7	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999978444174461	WITHOUT_CLASSIFICATION	2.1555825539860297E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999996542280901	WITHOUT_CLASSIFICATION	3.457719099034166E-7	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999996542280901	WITHOUT_CLASSIFICATION	3.457719099034166E-7	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999997604607678	WITHOUT_CLASSIFICATION	2.395392322266285E-7	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999950912077735	WITHOUT_CLASSIFICATION	4.908792226531183E-6	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999950912077735	WITHOUT_CLASSIFICATION	4.908792226531183E-6	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999755596859481	WITHOUT_CLASSIFICATION	2.4440314051980835E-5	DEFECT
// Empirical Observations: // null -> Some arity // argsNode == this.argsNode then check for arity changes // newline(splatnode) -> argspushnode	WITHOUT_CLASSIFICATION	0.9999877304897825	WITHOUT_CLASSIFICATION	1.2269510217521563E-5	DEFECT
//assert !(value instanceof RubyArray)  : "Not an array";	WITHOUT_CLASSIFICATION	0.9999106837483267	WITHOUT_CLASSIFICATION	8.931625167332725E-5	DEFECT
// Serialization killed our dynamic scope.  We can just create an empty one // since serialization cannot serialize an eval (which is the only thing // which is capable of having a non-empty dynamic scope).	WITHOUT_CLASSIFICATION	0.9999395678545814	WITHOUT_CLASSIFICATION	6.04321454186476E-5	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999996095835134	WITHOUT_CLASSIFICATION	3.9041648656926335E-7	DEFECT
// We could probably also detect if LHS value came out of cache and avoid some of this	WITHOUT_CLASSIFICATION	0.999999672459633	WITHOUT_CLASSIFICATION	3.2754036706370105E-7	DEFECT
//        assert thenBody != null : "thenBody is not null"; //        assert elseBody != null : "elseBody is not null";	WITHOUT_CLASSIFICATION	0.9999618674898563	WITHOUT_CLASSIFICATION	3.81325101437289E-5	DEFECT
// add in reverse order	WITHOUT_CLASSIFICATION	0.9999955455171121	WITHOUT_CLASSIFICATION	4.4544828878760495E-6	DEFECT
// in order to make pragma's noops we set location to a special value	WITHOUT_CLASSIFICATION	0.9999957794901394	WITHOUT_CLASSIFICATION	4.220509860604513E-6	DEFECT
// ignore compiler pragmas	WITHOUT_CLASSIFICATION	0.999999075382789	WITHOUT_CLASSIFICATION	9.246172110333705E-7	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999978444174461	WITHOUT_CLASSIFICATION	2.1555825539860297E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999996542280901	WITHOUT_CLASSIFICATION	3.457719099034166E-7	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999996542280901	WITHOUT_CLASSIFICATION	3.457719099034166E-7	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999997604607678	WITHOUT_CLASSIFICATION	2.395392322266285E-7	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9999749315526039	WITHOUT_CLASSIFICATION	2.5068447396158106E-5	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.999999189599636	WITHOUT_CLASSIFICATION	8.104003641177622E-7	DEFECT
// No actual test, so do 'when' if when expression is not nil	WITHOUT_CLASSIFICATION	0.9999968957022254	WITHOUT_CLASSIFICATION	3.1042977746251517E-6	DEFECT
// save entering the try if there's nothing to ensure	WITHOUT_CLASSIFICATION	0.9999996397358327	WITHOUT_CLASSIFICATION	3.602641672936494E-7	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999951421856962	WITHOUT_CLASSIFICATION	4.8578143037923834E-6	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999951421856962	WITHOUT_CLASSIFICATION	4.8578143037923834E-6	DEFECT
// admittedly inefficient	WITHOUT_CLASSIFICATION	0.9999859626133798	WITHOUT_CLASSIFICATION	1.4037386620184158E-5	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.99999303895152	WITHOUT_CLASSIFICATION	6.9610484799630385E-6	DEFECT
// What static scoping relationship exists when it comes into being.	WITHOUT_CLASSIFICATION	0.9999994414647247	WITHOUT_CLASSIFICATION	5.585352752493933E-7	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999966238342919	WITHOUT_CLASSIFICATION	3.3761657081293547E-6	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999995016949358	WITHOUT_CLASSIFICATION	4.983050641583263E-7	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999995016949358	WITHOUT_CLASSIFICATION	4.983050641583263E-7	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999996108524498	WITHOUT_CLASSIFICATION	3.8914755016022424E-7	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999996108524498	WITHOUT_CLASSIFICATION	3.8914755016022424E-7	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999974434535378	WITHOUT_CLASSIFICATION	2.5565464622344996E-6	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999974434535378	WITHOUT_CLASSIFICATION	2.5565464622344996E-6	DEFECT
// Execute rescue block	WITHOUT_CLASSIFICATION	0.9999951092361248	WITHOUT_CLASSIFICATION	4.890763875268669E-6	DEFECT
// If no exception is thrown execute else block	WITHOUT_CLASSIFICATION	0.9999975518728721	WITHOUT_CLASSIFICATION	2.4481271279326127E-6	DEFECT
// index of variable for this arg	WITHOUT_CLASSIFICATION	0.999965878229129	WITHOUT_CLASSIFICATION	3.412177087109244E-5	DEFECT
// only a marker interface	WITHOUT_CLASSIFICATION	0.9999973127247356	WITHOUT_CLASSIFICATION	2.687275264306608E-6	DEFECT
// don't attempt to coerce to array, just wrap and return	WITHOUT_CLASSIFICATION	0.9999899892021706	WITHOUT_CLASSIFICATION	1.0010797829360299E-5	DEFECT
// pragmas	WITHOUT_CLASSIFICATION	0.9999991682676946	WITHOUT_CLASSIFICATION	8.317323054329577E-7	DEFECT
// The method also needs a scope, do both	WITHOUT_CLASSIFICATION	0.9999417464282883	WITHOUT_CLASSIFICATION	5.825357171173726E-5	DEFECT
// We're doing normal framed compilation or the method needs a frame	WITHOUT_CLASSIFICATION	0.9999974658764171	WITHOUT_CLASSIFICATION	2.534123582782528E-6	DEFECT
// The method doesn't need a scope or static scope; frame only	WITHOUT_CLASSIFICATION	0.9999487934876314	WITHOUT_CLASSIFICATION	5.120651236848652E-5	DEFECT
// The method doesn't need a scope, but has static scope needs; use a dummy scope	WITHOUT_CLASSIFICATION	0.9996398373976348	WITHOUT_CLASSIFICATION	3.601626023651393E-4	DEFECT
// Proc.new needs the caller's block to instantiate a proc	WITHOUT_CLASSIFICATION	0.9999995909655183	WITHOUT_CLASSIFICATION	4.0903448181581185E-7	DEFECT
// check for Proc.new, an especially magic method	WITHOUT_CLASSIFICATION	0.9999878314805446	WITHOUT_CLASSIFICATION	1.2168519455354813E-5	DEFECT
// long, slow way causes disabling	WITHOUT_CLASSIFICATION	0.9999999074533754	WITHOUT_CLASSIFICATION	9.25466245539659E-8	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999882554190708	WITHOUT_CLASSIFICATION	1.174458092924944E-5	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999882554190708	WITHOUT_CLASSIFICATION	1.174458092924944E-5	DEFECT
// long, slow way causes disabling for defined	WITHOUT_CLASSIFICATION	0.99999996778525	WITHOUT_CLASSIFICATION	3.2214749977490716E-8	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.999999784164259	WITHOUT_CLASSIFICATION	2.158357409111214E-7	DEFECT
// Because Regexp#=== sets backref, we have to make this backref-aware	WITHOUT_CLASSIFICATION	0.9999966652404672	WITHOUT_CLASSIFICATION	3.334759532816732E-6	DEFECT
// encountered a node we don't recognize, set everything to true to disable optz	WITHOUT_CLASSIFICATION	0.9999931996843642	WITHOUT_CLASSIFICATION	6.800315635809995E-6	DEFECT
// only arrays that are "lightweight" are being used as args arrays	WITHOUT_CLASSIFICATION	0.9999993019124791	WITHOUT_CLASSIFICATION	6.980875208392369E-7	DEFECT
// otherwise, it's a literal array	WITHOUT_CLASSIFICATION	0.9999989157742419	WITHOUT_CLASSIFICATION	1.0842257581435911E-6	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9999986934324256	WITHOUT_CLASSIFICATION	1.3065675743391378E-6	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999979197834692	WITHOUT_CLASSIFICATION	2.0802165308015444E-6	DEFECT
// compile first node as non-expr and then second node	WITHOUT_CLASSIFICATION	0.999999867158137	WITHOUT_CLASSIFICATION	1.328418629050954E-7	DEFECT
// last node, either !instanceof WhenNode or null, is the else	WITHOUT_CLASSIFICATION	0.9999991497618549	WITHOUT_CLASSIFICATION	8.502381450487925E-7	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999982977195013	WITHOUT_CLASSIFICATION	1.7022804985552091E-6	DEFECT
// splatted when, can't do it yet	WITHOUT_CLASSIFICATION	0.9998625645497864	WITHOUT_CLASSIFICATION	1.3743545021365747E-4	DEFECT
// if __send__ with a literal symbol, compile it as a direct fcall	WITHOUT_CLASSIFICATION	0.9999981148246656	WITHOUT_CLASSIFICATION	1.8851753345045096E-6	DEFECT
// NOTE: Currently this optimization is limited to the following situations: // * All expressions must be int-ranged literal fixnums // It also still emits the code for the "safe" when logic, which is rather // wasteful (since it essentially doubles each code body). As such it is // normally disabled, but it serves as an example of how this optimization // could be done. Ideally, it should be combined with the when processing // to improve code reuse before it's generally available.	WITHOUT_CLASSIFICATION	0.9906633688620072	WITHOUT_CLASSIFICATION	0.009336631137992777	DEFECT
// aggregate when nodes into a list, unfortunately, this is no	WITHOUT_CLASSIFICATION	0.9999898225693724	WITHOUT_CLASSIFICATION	1.0177430627647142E-5	DEFECT
// one arg but it's an array, treat it as a proper array	WITHOUT_CLASSIFICATION	0.9999836625744587	WITHOUT_CLASSIFICATION	1.633742554129719E-5	DEFECT
// can't do it	WITHOUT_CLASSIFICATION	0.9999905150779367	WITHOUT_CLASSIFICATION	9.48492206334812E-6	DEFECT
// otherwise, use normal args compiler	WITHOUT_CLASSIFICATION	0.9999994704273563	WITHOUT_CLASSIFICATION	5.295726437786727E-7	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999948200182841	WITHOUT_CLASSIFICATION	5.179981715999548E-6	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999948200182841	WITHOUT_CLASSIFICATION	5.179981715999548E-6	DEFECT
// these are all simple cases that don't require the heavier defined logic	WITHOUT_CLASSIFICATION	0.9999981767717857	WITHOUT_CLASSIFICATION	1.8232282143410415E-6	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9999975900779585	WITHOUT_CLASSIFICATION	2.4099220415796045E-6	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9999310830643515	WITHOUT_CLASSIFICATION	6.891693564853516E-5	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9999310830643515	WITHOUT_CLASSIFICATION	6.891693564853516E-5	DEFECT
//          context.swapValues(); //context.consumeCurrentValue();	WITHOUT_CLASSIFICATION	0.9999996845397211	WITHOUT_CLASSIFICATION	3.1546027885890115E-7	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[] //[self] //[RubyClass] //[RubyClass, RubyClass]	WITHOUT_CLASSIFICATION	0.9999990487044349	WITHOUT_CLASSIFICATION	9.512955650452628E-7	DEFECT
//[RubyClass]	WITHOUT_CLASSIFICATION	0.9999923440038802	WITHOUT_CLASSIFICATION	7.655996119815323E-6	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9999980195826607	WITHOUT_CLASSIFICATION	1.9804173393520494E-6	DEFECT
// if root of method is rescue, compile as a light rescue	WITHOUT_CLASSIFICATION	0.9999875103896876	WITHOUT_CLASSIFICATION	1.2489610312333024E-5	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999933203874484	WITHOUT_CLASSIFICATION	6.679612551637262E-6	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999933203874484	WITHOUT_CLASSIFICATION	6.679612551637262E-6	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999991524893325	WITHOUT_CLASSIFICATION	8.475106676069769E-7	DEFECT
// if root of method is rescue, compile as light rescue	WITHOUT_CLASSIFICATION	0.9999895903937055	WITHOUT_CLASSIFICATION	1.0409606294520116E-5	DEFECT
// invoke run with threadcontext and topself	WITHOUT_CLASSIFICATION	0.9999993915478488	WITHOUT_CLASSIFICATION	6.084521513019649E-7	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9999981501311187	WITHOUT_CLASSIFICATION	1.849868881333727E-6	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9999975900779585	WITHOUT_CLASSIFICATION	2.4099220415796045E-6	DEFECT
//[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9999979603367891	WITHOUT_CLASSIFICATION	2.0396632109901615E-6	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9999979811761764	WITHOUT_CLASSIFICATION	2.018823823461094E-6	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9999979811761764	WITHOUT_CLASSIFICATION	2.018823823461094E-6	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.999999622925661	WITHOUT_CLASSIFICATION	3.7707433897374827E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999922815224	WITHOUT_CLASSIFICATION	7.718477723253784E-9	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999922815224	WITHOUT_CLASSIFICATION	7.718477723253784E-9	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999988244876095	WITHOUT_CLASSIFICATION	1.1755123905897785E-6	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999988244876095	WITHOUT_CLASSIFICATION	1.1755123905897785E-6	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999988244876095	WITHOUT_CLASSIFICATION	1.1755123905897785E-6	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999922815224	WITHOUT_CLASSIFICATION	7.718477723253784E-9	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999922815224	WITHOUT_CLASSIFICATION	7.718477723253784E-9	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.999999622925661	WITHOUT_CLASSIFICATION	3.7707433897374827E-7	DEFECT
// force heap-scope behavior, since it uses parent's scope	WITHOUT_CLASSIFICATION	0.9999999140224987	WITHOUT_CLASSIFICATION	8.597750138460784E-8	DEFECT
// always false or nil	WITHOUT_CLASSIFICATION	0.9999470800389235	WITHOUT_CLASSIFICATION	5.291996107645005E-5	DEFECT
// optimizations if we know ahead of time it will always be true or false	WITHOUT_CLASSIFICATION	0.999748670495524	WITHOUT_CLASSIFICATION	2.513295044760099E-4	DEFECT
// normal	WITHOUT_CLASSIFICATION	0.9999976326009716	WITHOUT_CLASSIFICATION	2.367399028359569E-6	DEFECT
// compile condition as non-expr and just compile "then" body	WITHOUT_CLASSIFICATION	0.9999998072035291	WITHOUT_CLASSIFICATION	1.927964709200044E-7	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9999995104217768	WITHOUT_CLASSIFICATION	4.895782231268928E-7	DEFECT
// just push nil for pragmas	WITHOUT_CLASSIFICATION	0.999999734352633	WITHOUT_CLASSIFICATION	2.6564736697847264E-7	DEFECT
// "assignment" means the value is already on the stack	WITHOUT_CLASSIFICATION	0.9999961365790359	WITHOUT_CLASSIFICATION	3.863420964197953E-6	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999982977195013	WITHOUT_CLASSIFICATION	1.7022804985552091E-6	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999922815224	WITHOUT_CLASSIFICATION	7.718477723253784E-9	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999922815224	WITHOUT_CLASSIFICATION	7.718477723253784E-9	DEFECT
// eval new value, call operator on old value, and assign	WITHOUT_CLASSIFICATION	0.9999995021604905	WITHOUT_CLASSIFICATION	4.978395094855188E-7	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.999994238739481	WITHOUT_CLASSIFICATION	5.761260519017885E-6	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999962769602329	WITHOUT_CLASSIFICATION	3.7230397672017003E-6	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9999980860526976	WITHOUT_CLASSIFICATION	1.9139473024105754E-6	DEFECT
// normal items at the "head" of the masgn	WITHOUT_CLASSIFICATION	0.9999997264669386	WITHOUT_CLASSIFICATION	2.735330613945456E-7	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.999958163862901	WITHOUT_CLASSIFICATION	4.1836137098993566E-5	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999998842809075	WITHOUT_CLASSIFICATION	1.1571909260651391E-7	DEFECT
// only supports simple parallel assignment of up to 10 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999999943821573	WITHOUT_CLASSIFICATION	5.617842738877263E-9	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9999993180545487	WITHOUT_CLASSIFICATION	6.819454512971498E-7	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9999688161758399	WITHOUT_CLASSIFICATION	3.118382416015511E-5	DEFECT
//RedoNode redoNode = (RedoNode)node;	WITHOUT_CLASSIFICATION	0.9999918442123386	WITHOUT_CLASSIFICATION	8.155787661340205E-6	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999962361019459	WITHOUT_CLASSIFICATION	3.763898054156793E-6	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999983560305599	WITHOUT_CLASSIFICATION	1.6439694402115803E-6	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999992203991582	WITHOUT_CLASSIFICATION	7.796008417029548E-7	DEFECT
// if arity 1, just compile the one element to save us the array cost	WITHOUT_CLASSIFICATION	0.9999998466738149	WITHOUT_CLASSIFICATION	1.5332618512053842E-7	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999977191084944	WITHOUT_CLASSIFICATION	2.2808915055327435E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999977191084944	WITHOUT_CLASSIFICATION	2.2808915055327435E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999977191084944	WITHOUT_CLASSIFICATION	2.2808915055327435E-6	DEFECT
// compile into array	WITHOUT_CLASSIFICATION	0.9999976384756608	WITHOUT_CLASSIFICATION	2.36152433916274E-6	DEFECT
// compile first node as non-expr and compile second node	WITHOUT_CLASSIFICATION	0.9999998329431254	WITHOUT_CLASSIFICATION	1.670568744509888E-7	DEFECT
// check if it's an immediate, and don't outline	WITHOUT_CLASSIFICATION	0.9999918482149978	WITHOUT_CLASSIFICATION	8.151785002201841E-6	DEFECT
// condition is always true, just compile it and not body	WITHOUT_CLASSIFICATION	0.9999642673635007	WITHOUT_CLASSIFICATION	3.573263649926433E-5	DEFECT
// force static scope to claim restarg at 0, so it only implements the [] version of __file__	WITHOUT_CLASSIFICATION	0.9999999510617463	WITHOUT_CLASSIFICATION	4.893825358364831E-8	DEFECT
// create method for toplevel of script	WITHOUT_CLASSIFICATION	0.9999997726500347	WITHOUT_CLASSIFICATION	2.2734996516759054E-7	DEFECT
// it's a multiple-statement body, iterate over all elements in turn and chain if it get too long	WITHOUT_CLASSIFICATION	0.9999999974996494	WITHOUT_CLASSIFICATION	2.500350698854311E-9	DEFECT
// send it along as arity-specific, we don't need the array	WITHOUT_CLASSIFICATION	0.9999986463568501	WITHOUT_CLASSIFICATION	1.3536431499046695E-6	DEFECT
// single-statement body, just compile it	WITHOUT_CLASSIFICATION	0.9999996341390807	WITHOUT_CLASSIFICATION	3.65860919400891E-7	DEFECT
// leave as a normal array	WITHOUT_CLASSIFICATION	0.9999895871304152	WITHOUT_CLASSIFICATION	1.0412869584715536E-5	DEFECT
// This method has JITed already or has been abandoned. Bail out.	WITHOUT_CLASSIFICATION	0.9997577141491425	WITHOUT_CLASSIFICATION	2.4228585085749705E-4	DEFECT
// The cache is full. Abandon JIT for this method and bail out.	WITHOUT_CLASSIFICATION	0.9997324693084891	WITHOUT_CLASSIFICATION	2.6753069151084276E-4	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999991524893325	WITHOUT_CLASSIFICATION	8.475106676069769E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999922815224	WITHOUT_CLASSIFICATION	7.718477723253784E-9	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999922815224	WITHOUT_CLASSIFICATION	7.718477723253784E-9	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.999999622925661	WITHOUT_CLASSIFICATION	3.7707433897374827E-7	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9999995104217768	WITHOUT_CLASSIFICATION	4.895782231268928E-7	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.999994238739481	WITHOUT_CLASSIFICATION	5.761260519017885E-6	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9999980860526976	WITHOUT_CLASSIFICATION	1.9139473024105754E-6	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.999958163862901	WITHOUT_CLASSIFICATION	4.1836137098993566E-5	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999962769602329	WITHOUT_CLASSIFICATION	3.7230397672017003E-6	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999998842809075	WITHOUT_CLASSIFICATION	1.1571909260651391E-7	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9999688161758399	WITHOUT_CLASSIFICATION	3.118382416015511E-5	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9999993180545487	WITHOUT_CLASSIFICATION	6.819454512971498E-7	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999962361019459	WITHOUT_CLASSIFICATION	3.763898054156793E-6	DEFECT
// Check if the method has been explicitly excluded	WITHOUT_CLASSIFICATION	0.99999275594341	WITHOUT_CLASSIFICATION	7.244056589995704E-6	DEFECT
// class could not be found nor generated; give up on JIT and bail out	WITHOUT_CLASSIFICATION	0.9999983136208086	WITHOUT_CLASSIFICATION	1.6863791915095577E-6	DEFECT
// successfully got back a jitted method	WITHOUT_CLASSIFICATION	0.9999896682639623	WITHOUT_CLASSIFICATION	1.0331736037663311E-5	DEFECT
// finally, grab the script	WITHOUT_CLASSIFICATION	0.9999988541678902	WITHOUT_CLASSIFICATION	1.1458321097746207E-6	DEFECT
// logEvery n methods based on configuration	WITHOUT_CLASSIFICATION	0.9999907772973764	WITHOUT_CLASSIFICATION	9.222702623667831E-6	DEFECT
// Time the compilation	WITHOUT_CLASSIFICATION	0.9999535929986225	WITHOUT_CLASSIFICATION	4.640700137744165E-5	DEFECT
// we have a body, do a full-on method	WITHOUT_CLASSIFICATION	0.9998996003234336	WITHOUT_CLASSIFICATION	1.0039967656639691E-4	DEFECT
// If we don't have a body, check for required or opt args // if opt args, they could have side effects // if required args, need to raise errors if too few args passed // otherwise, method does nothing, make it a nop	WITHOUT_CLASSIFICATION	0.9999878886271204	WITHOUT_CLASSIFICATION	1.211137287959129E-5	DEFECT
// if we haven't already decided on a do-nothing call	WITHOUT_CLASSIFICATION	0.9999452652434899	WITHOUT_CLASSIFICATION	5.473475650998726E-5	DEFECT
// only supports simple parallel assignment of up to 4 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999999940334586	WITHOUT_CLASSIFICATION	5.96654145167196E-9	DEFECT
// normal items at the front or back of the masgn	WITHOUT_CLASSIFICATION	0.9999997509344101	WITHOUT_CLASSIFICATION	2.49065590013281E-7	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999998254488494	WITHOUT_CLASSIFICATION	1.7455115058311712E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999998489051473	WITHOUT_CLASSIFICATION	1.5109485283494654E-7	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999794089821151	WITHOUT_CLASSIFICATION	2.059101788480828E-5	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.999997869652748	WITHOUT_CLASSIFICATION	2.130347252052346E-6	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999991435036705	WITHOUT_CLASSIFICATION	8.56496329573225E-7	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999954059001406	WITHOUT_CLASSIFICATION	4.594099859433083E-6	DEFECT
// Define the annotation for the method	WITHOUT_CLASSIFICATION	0.9999437461341717	WITHOUT_CLASSIFICATION	5.625386582829765E-5	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9999961846766448	WITHOUT_CLASSIFICATION	3.81532335524007E-6	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999868619275994	WITHOUT_CLASSIFICATION	1.3138072400517692E-5	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999992539382369	WITHOUT_CLASSIFICATION	7.460617632628028E-7	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999973678510596	WITHOUT_CLASSIFICATION	2.6321489403293597E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999973678510596	WITHOUT_CLASSIFICATION	2.6321489403293597E-6	DEFECT
// value is already on stack, save it for later	WITHOUT_CLASSIFICATION	0.9999762883003331	WITHOUT_CLASSIFICATION	2.3711699666787978E-5	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9999995846600381	WITHOUT_CLASSIFICATION	4.1533996178931186E-7	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9996632329626031	WITHOUT_CLASSIFICATION	3.36767037397003E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9996632329626031	WITHOUT_CLASSIFICATION	3.36767037397003E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9996632329626031	WITHOUT_CLASSIFICATION	3.36767037397003E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.999910878423591	WITHOUT_CLASSIFICATION	8.912157640892159E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.999910878423591	WITHOUT_CLASSIFICATION	8.912157640892159E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.999910878423591	WITHOUT_CLASSIFICATION	8.912157640892159E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.999910878423591	WITHOUT_CLASSIFICATION	8.912157640892159E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9998861948298257	WITHOUT_CLASSIFICATION	1.1380517017427018E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9998861948298257	WITHOUT_CLASSIFICATION	1.1380517017427018E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9998861948298257	WITHOUT_CLASSIFICATION	1.1380517017427018E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.999877642022407	WITHOUT_CLASSIFICATION	1.223579775929624E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.999877642022407	WITHOUT_CLASSIFICATION	1.223579775929624E-4	DEFECT
/*arg2*/	WITHOUT_CLASSIFICATION	0.9998658380694002	WITHOUT_CLASSIFICATION	1.3416193059982844E-4	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9999306097883929	WITHOUT_CLASSIFICATION	6.939021160710532E-5	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9999995846600381	WITHOUT_CLASSIFICATION	4.1533996178931186E-7	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9999989384464941	WITHOUT_CLASSIFICATION	1.0615535059204387E-6	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9996632329626031	WITHOUT_CLASSIFICATION	3.36767037397003E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9996632329626031	WITHOUT_CLASSIFICATION	3.36767037397003E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.999910878423591	WITHOUT_CLASSIFICATION	8.912157640892159E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.999910878423591	WITHOUT_CLASSIFICATION	8.912157640892159E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.999910878423591	WITHOUT_CLASSIFICATION	8.912157640892159E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9998861948298257	WITHOUT_CLASSIFICATION	1.1380517017427018E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9998861948298257	WITHOUT_CLASSIFICATION	1.1380517017427018E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.999877642022407	WITHOUT_CLASSIFICATION	1.223579775929624E-4	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9999306097883929	WITHOUT_CLASSIFICATION	6.939021160710532E-5	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9999987860837312	WITHOUT_CLASSIFICATION	1.2139162687891862E-6	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9999987860837312	WITHOUT_CLASSIFICATION	1.2139162687891862E-6	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999997737458493	WITHOUT_CLASSIFICATION	2.2625415080603255E-7	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999997737458493	WITHOUT_CLASSIFICATION	2.2625415080603255E-7	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9999913269645616	WITHOUT_CLASSIFICATION	8.673035438399544E-6	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9999913269645616	WITHOUT_CLASSIFICATION	8.673035438399544E-6	DEFECT
// check if it's true, ending if so	WITHOUT_CLASSIFICATION	0.9999951362264322	WITHOUT_CLASSIFICATION	4.863773567755026E-6	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9999978953953584	WITHOUT_CLASSIFICATION	2.1046046415860718E-6	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9999978953953584	WITHOUT_CLASSIFICATION	2.1046046415860718E-6	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999998774800316	WITHOUT_CLASSIFICATION	1.2251996844278155E-7	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999998774800316	WITHOUT_CLASSIFICATION	1.2251996844278155E-7	DEFECT
// eval value for assignment	WITHOUT_CLASSIFICATION	0.9999989424076327	WITHOUT_CLASSIFICATION	1.0575923673231676E-6	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9999995483730916	WITHOUT_CLASSIFICATION	4.5162690843973E-7	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9999995483730916	WITHOUT_CLASSIFICATION	4.5162690843973E-7	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9999939232138875	WITHOUT_CLASSIFICATION	6.076786112463375E-6	DEFECT
// check if it's true, ending if not	WITHOUT_CLASSIFICATION	0.9999832786353338	WITHOUT_CLASSIFICATION	1.6721364666294226E-5	DEFECT
// eval value and save it	WITHOUT_CLASSIFICATION	0.9999949465203968	WITHOUT_CLASSIFICATION	5.0534796031776785E-6	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.999910878423591	WITHOUT_CLASSIFICATION	8.912157640892159E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.999910878423591	WITHOUT_CLASSIFICATION	8.912157640892159E-5	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9999939232138875	WITHOUT_CLASSIFICATION	6.076786112463375E-6	DEFECT
// receiver, args, result, value	WITHOUT_CLASSIFICATION	0.9999867954300956	WITHOUT_CLASSIFICATION	1.3204569904373197E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999979703629208	WITHOUT_CLASSIFICATION	2.029637079256895E-6	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999979703629208	WITHOUT_CLASSIFICATION	2.029637079256895E-6	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999979703629208	WITHOUT_CLASSIFICATION	2.029637079256895E-6	DEFECT
// super uses current block if none given	WITHOUT_CLASSIFICATION	0.9999995531287934	WITHOUT_CLASSIFICATION	4.468712066694225E-7	DEFECT
// args	WITHOUT_CLASSIFICATION	0.999999098178891	WITHOUT_CLASSIFICATION	9.018211090207836E-7	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999944528741538	WITHOUT_CLASSIFICATION	5.547125846152534E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999944528741538	WITHOUT_CLASSIFICATION	5.547125846152534E-6	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999997894713402	WITHOUT_CLASSIFICATION	2.1052865973901991E-7	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999994622448417	WITHOUT_CLASSIFICATION	5.377551582568345E-7	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999996296370338	WITHOUT_CLASSIFICATION	3.7036296612601103E-7	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999993531929755	WITHOUT_CLASSIFICATION	6.468070244432433E-7	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9999975263894224	WITHOUT_CLASSIFICATION	2.473610577660091E-6	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.99999625654106	WITHOUT_CLASSIFICATION	3.7434589400784348E-6	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.99999625654106	WITHOUT_CLASSIFICATION	3.7434589400784348E-6	DEFECT
// arg and receiver already present on the stack	WITHOUT_CLASSIFICATION	0.9999990499319514	WITHOUT_CLASSIFICATION	9.50068048558874E-7	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9998757979711348	WITHOUT_CLASSIFICATION	1.2420202886514523E-4	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9998757979711348	WITHOUT_CLASSIFICATION	1.2420202886514523E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.999910878423591	WITHOUT_CLASSIFICATION	8.912157640892159E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999979703629208	WITHOUT_CLASSIFICATION	2.029637079256895E-6	DEFECT
// args	WITHOUT_CLASSIFICATION	0.999999098178891	WITHOUT_CLASSIFICATION	9.018211090207836E-7	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999944528741538	WITHOUT_CLASSIFICATION	5.547125846152534E-6	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999997894713402	WITHOUT_CLASSIFICATION	2.1052865973901991E-7	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999994622448417	WITHOUT_CLASSIFICATION	5.377551582568345E-7	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999996296370338	WITHOUT_CLASSIFICATION	3.7036296612601103E-7	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999993531929755	WITHOUT_CLASSIFICATION	6.468070244432433E-7	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9998757979711348	WITHOUT_CLASSIFICATION	1.2420202886514523E-4	DEFECT
// retrieve scope from scopes array	WITHOUT_CLASSIFICATION	0.999995380898536	WITHOUT_CLASSIFICATION	4.61910146402521E-6	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999826062901989	WITHOUT_CLASSIFICATION	1.739370980113457E-5	DEFECT
// retrieve call site from sites array	WITHOUT_CLASSIFICATION	0.999997995128451	WITHOUT_CLASSIFICATION	2.0048715490153348E-6	DEFECT
// add name to call site list	WITHOUT_CLASSIFICATION	0.9999984928538235	WITHOUT_CLASSIFICATION	1.5071461765353006E-6	DEFECT
// module is on top of stack	WITHOUT_CLASSIFICATION	0.9999973640586072	WITHOUT_CLASSIFICATION	2.6359413927530198E-6	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999880635565302	WITHOUT_CLASSIFICATION	1.1936443469777416E-5	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999978624053277	WITHOUT_CLASSIFICATION	2.1375946722178203E-6	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999978624053277	WITHOUT_CLASSIFICATION	2.1375946722178203E-6	DEFECT
// generate call sites initialization code	WITHOUT_CLASSIFICATION	0.9999962823499472	WITHOUT_CLASSIFICATION	3.71765005292221E-6	DEFECT
// generate symbols initialization code	WITHOUT_CLASSIFICATION	0.9999934689349667	WITHOUT_CLASSIFICATION	6.531065033333429E-6	DEFECT
// generate fixnums initialization code	WITHOUT_CLASSIFICATION	0.9999678115304663	WITHOUT_CLASSIFICATION	3.218846953365043E-5	DEFECT
// generate constants initialization code	WITHOUT_CLASSIFICATION	0.9999977436090828	WITHOUT_CLASSIFICATION	2.2563909172485357E-6	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9999971181237189	WITHOUT_CLASSIFICATION	2.8818762810943202E-6	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9999971181237189	WITHOUT_CLASSIFICATION	2.8818762810943202E-6	DEFECT
// generate variable readers initialization code	WITHOUT_CLASSIFICATION	0.9999971621121536	WITHOUT_CLASSIFICATION	2.837887846441091E-6	DEFECT
// generate variable writers initialization code	WITHOUT_CLASSIFICATION	0.99999802932396	WITHOUT_CLASSIFICATION	1.97067603994772E-6	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9999951315673202	WITHOUT_CLASSIFICATION	4.868432679784665E-6	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9999951315673202	WITHOUT_CLASSIFICATION	4.868432679784665E-6	DEFECT
// generate bytelists initialization code	WITHOUT_CLASSIFICATION	0.999997394495443	WITHOUT_CLASSIFICATION	2.6055045569659554E-6	DEFECT
// generate method cache initialization code	WITHOUT_CLASSIFICATION	0.9999910247072574	WITHOUT_CLASSIFICATION	8.975292742510559E-6	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9999975263894224	WITHOUT_CLASSIFICATION	2.473610577660091E-6	DEFECT
// use IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999981531456343	WITHOUT_CLASSIFICATION	1.8468543656973635E-6	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999979540659413	WITHOUT_CLASSIFICATION	2.045934058742778E-6	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999993327378169	WITHOUT_CLASSIFICATION	6.672621830861634E-7	DEFECT
// No point in updating number if last number was same value.	WITHOUT_CLASSIFICATION	0.9999999814428611	WITHOUT_CLASSIFICATION	1.8557138949432537E-8	DEFECT
// load Object under value	WITHOUT_CLASSIFICATION	0.9999623593979525	WITHOUT_CLASSIFICATION	3.76406020474797E-5	DEFECT
// put under object array already present	WITHOUT_CLASSIFICATION	0.9999963498177901	WITHOUT_CLASSIFICATION	3.6501822099926997E-6	DEFECT
// if element count is less than 6, use helper methods	WITHOUT_CLASSIFICATION	0.9999976634510752	WITHOUT_CLASSIFICATION	2.3365489248094022E-6	DEFECT
// This is pretty inefficient for building an array, so just raise an error if someone's using it for a lot of elements	WITHOUT_CLASSIFICATION	0.9999989766937722	WITHOUT_CLASSIFICATION	1.023306227777047E-6	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9999989263271936	WITHOUT_CLASSIFICATION	1.0736728064550759E-6	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9999989263271936	WITHOUT_CLASSIFICATION	1.0736728064550759E-6	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9999983195614403	WITHOUT_CLASSIFICATION	1.6804385597450888E-6	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9999983195614403	WITHOUT_CLASSIFICATION	1.6804385597450888E-6	DEFECT
// use specific-arity for as much as possible	WITHOUT_CLASSIFICATION	0.9999998634423581	WITHOUT_CLASSIFICATION	1.365576419405156E-7	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999733034810203	WITHOUT_CLASSIFICATION	2.669651897963171E-5	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999733034810203	WITHOUT_CLASSIFICATION	2.669651897963171E-5	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999733034810203	WITHOUT_CLASSIFICATION	2.669651897963171E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999884879275706	WITHOUT_CLASSIFICATION	1.1512072429422863E-5	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999983179103803	WITHOUT_CLASSIFICATION	1.6820896198075732E-6	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999983179103803	WITHOUT_CLASSIFICATION	1.6820896198075732E-6	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999999169877344	WITHOUT_CLASSIFICATION	8.301226562860714E-8	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9999901320100654	WITHOUT_CLASSIFICATION	9.867989934762314E-6	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999802935255985	WITHOUT_CLASSIFICATION	1.970647440150918E-5	DEFECT
// skip catch block	WITHOUT_CLASSIFICATION	0.9999998086849752	WITHOUT_CLASSIFICATION	1.9131502481164743E-7	DEFECT
// catch logic for flow-control: next, break	WITHOUT_CLASSIFICATION	0.9999987773373099	WITHOUT_CLASSIFICATION	1.222662690068303E-6	DEFECT
// next jump	WITHOUT_CLASSIFICATION	0.9999993275387558	WITHOUT_CLASSIFICATION	6.724612442872573E-7	DEFECT
// exceptionNext target is for a next that doesn't push a new value, like this one	WITHOUT_CLASSIFICATION	0.9999241853967565	WITHOUT_CLASSIFICATION	7.581460324337423E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999998489051473	WITHOUT_CLASSIFICATION	1.5109485283494654E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999998489051473	WITHOUT_CLASSIFICATION	1.5109485283494654E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999884879275706	WITHOUT_CLASSIFICATION	1.1512072429422863E-5	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999999169877344	WITHOUT_CLASSIFICATION	8.301226562860714E-8	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999990612037697	WITHOUT_CLASSIFICATION	9.387962303644881E-7	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9999901320100654	WITHOUT_CLASSIFICATION	9.867989934762314E-6	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999802935255985	WITHOUT_CLASSIFICATION	1.970647440150918E-5	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9999908748424449	WITHOUT_CLASSIFICATION	9.125157555137095E-6	DEFECT
// break jump	WITHOUT_CLASSIFICATION	0.9999984611477682	WITHOUT_CLASSIFICATION	1.538852231687356E-6	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999980909979734	WITHOUT_CLASSIFICATION	1.9090020265130146E-6	DEFECT
//[reg]	WITHOUT_CLASSIFICATION	0.9999572383324878	WITHOUT_CLASSIFICATION	4.276166751210699E-5	DEFECT
// for regular expressions with the /o flag	WITHOUT_CLASSIFICATION	0.9999992461587424	WITHOUT_CLASSIFICATION	7.538412576143017E-7	DEFECT
// inside a loop, jump to body	WITHOUT_CLASSIFICATION	0.9999995368072438	WITHOUT_CLASSIFICATION	4.631927562704276E-7	DEFECT
// inside a loop, jump to conditional	WITHOUT_CLASSIFICATION	0.9999999599417189	WITHOUT_CLASSIFICATION	4.0058281080074935E-8	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9999908748424449	WITHOUT_CLASSIFICATION	9.125157555137095E-6	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9999987932042829	WITHOUT_CLASSIFICATION	1.2067957171403185E-6	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9999987932042829	WITHOUT_CLASSIFICATION	1.2067957171403185E-6	DEFECT
// if more than 4 vars, get values array too	WITHOUT_CLASSIFICATION	0.9999985251662071	WITHOUT_CLASSIFICATION	1.4748337929418907E-6	DEFECT
// retry handling in the rescue block	WITHOUT_CLASSIFICATION	0.9999842444342341	WITHOUT_CLASSIFICATION	1.5755565765872615E-5	DEFECT
// any exceptions raised must continue to be raised, skipping $! restoration	WITHOUT_CLASSIFICATION	0.9999716092400437	WITHOUT_CLASSIFICATION	2.8390759956274563E-5	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9999995789378876	WITHOUT_CLASSIFICATION	4.210621124716215E-7	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9999996837124102	WITHOUT_CLASSIFICATION	3.162875898892064E-7	DEFECT
// Handle Flow exceptions, just propagating them	WITHOUT_CLASSIFICATION	0.9999996438726501	WITHOUT_CLASSIFICATION	3.5612734997013417E-7	DEFECT
// rethrow to outer flow catcher	WITHOUT_CLASSIFICATION	0.9999998277732859	WITHOUT_CLASSIFICATION	1.7222671407635948E-7	DEFECT
// Handle Ruby exceptions (RaiseException)	WITHOUT_CLASSIFICATION	0.999999358848505	WITHOUT_CLASSIFICATION	6.411514949055756E-7	DEFECT
// inside a loop, break out of it // go to end of loop, leaving break value on stack	WITHOUT_CLASSIFICATION	0.9999999614947783	WITHOUT_CLASSIFICATION	3.850522155690679E-8	DEFECT
// false // zero	WITHOUT_CLASSIFICATION	0.999991065124706	WITHOUT_CLASSIFICATION	8.934875293993321E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999992938453317	WITHOUT_CLASSIFICATION	7.061546682706358E-7	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9999995789378876	WITHOUT_CLASSIFICATION	4.210621124716215E-7	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9999996837124102	WITHOUT_CLASSIFICATION	3.162875898892064E-7	DEFECT
// retry handling in the rescue blocks	WITHOUT_CLASSIFICATION	0.9999894201247518	WITHOUT_CLASSIFICATION	1.0579875248178373E-5	DEFECT
// push false	WITHOUT_CLASSIFICATION	0.9999949374973872	WITHOUT_CLASSIFICATION	5.062502612780078E-6	DEFECT
//method.invokeinterface(p(IRubyObject.class), "getInstanceVariable", sig(IRubyObject.class, params(String.class)));	WITHOUT_CLASSIFICATION	0.999999829046296	WITHOUT_CLASSIFICATION	1.7095370404758154E-7	DEFECT
//method.ifnonnull(trueLabel);	WITHOUT_CLASSIFICATION	0.9998165389402704	WITHOUT_CLASSIFICATION	1.8346105972959177E-4	DEFECT
// EQ == 0 (i.e. false)   //[C]	WITHOUT_CLASSIFICATION	0.9999899672214199	WITHOUT_CLASSIFICATION	1.003277858021743E-5	DEFECT
//[C, C] //[C, C, String] //[C, null|C]	WITHOUT_CLASSIFICATION	0.9999563203748532	WITHOUT_CLASSIFICATION	4.3679625146767685E-5	DEFECT
//[C]	WITHOUT_CLASSIFICATION	0.9999219853110859	WITHOUT_CLASSIFICATION	7.80146889140799E-5	DEFECT
// push true	WITHOUT_CLASSIFICATION	0.999990541735703	WITHOUT_CLASSIFICATION	9.458264297057618E-6	DEFECT
// EQ != 0 (i.e. true)	WITHOUT_CLASSIFICATION	0.9999545477233766	WITHOUT_CLASSIFICATION	4.545227662334038E-5	DEFECT
//[?, ?] //[?, boolean]	WITHOUT_CLASSIFICATION	0.9999947747683327	WITHOUT_CLASSIFICATION	5.225231667296235E-6	DEFECT
//[RubyModule] //[RubyModule, String]	WITHOUT_CLASSIFICATION	0.9999575362885852	WITHOUT_CLASSIFICATION	4.2463711414751595E-5	DEFECT
//[boolean]	WITHOUT_CLASSIFICATION	0.9999926893002469	WITHOUT_CLASSIFICATION	7.310699753100857E-6	DEFECT
// no receiver for singleton class	WITHOUT_CLASSIFICATION	0.9999999705487734	WITHOUT_CLASSIFICATION	2.945122644266639E-8	DEFECT
// but there's a superclass passed in, use it	WITHOUT_CLASSIFICATION	0.9999998110766983	WITHOUT_CLASSIFICATION	1.8892330172508952E-7	DEFECT
// we re-set self to the class, but store the old self in a temporary local variable // this is to prevent it GCing in case the singleton is short-lived	WITHOUT_CLASSIFICATION	0.9999998811263319	WITHOUT_CLASSIFICATION	1.188736681089108E-7	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999999596082794	WITHOUT_CLASSIFICATION	4.039172066059527E-8	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999754539395073	WITHOUT_CLASSIFICATION	2.4546060492774955E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999985124445754	WITHOUT_CLASSIFICATION	1.4875554245801899E-6	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999999754635445	WITHOUT_CLASSIFICATION	2.4536455475366363E-8	DEFECT
// new instance to invoke run against	WITHOUT_CLASSIFICATION	0.9999976644388692	WITHOUT_CLASSIFICATION	2.3355611307235562E-6	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999754539395073	WITHOUT_CLASSIFICATION	2.4546060492774955E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999985124445754	WITHOUT_CLASSIFICATION	1.4875554245801899E-6	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999999754635445	WITHOUT_CLASSIFICATION	2.4536455475366363E-8	DEFECT
// finally with exception	WITHOUT_CLASSIFICATION	0.9999693365216619	WITHOUT_CLASSIFICATION	3.066347833814605E-5	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.999998622929229	WITHOUT_CLASSIFICATION	1.3770707709332274E-6	DEFECT
// otherwise, there's a receiver, so we pass that in directly for the sclass logic	WITHOUT_CLASSIFICATION	0.9999986171906261	WITHOUT_CLASSIFICATION	1.3828093739244445E-6	DEFECT
// original exception is on stack	WITHOUT_CLASSIFICATION	0.9999990808505448	WITHOUT_CLASSIFICATION	9.191494553001353E-7	DEFECT
// RaiseException is on stack, get RubyException out	WITHOUT_CLASSIFICATION	0.9999985336430668	WITHOUT_CLASSIFICATION	1.4663569332568174E-6	DEFECT
// updating position for same line; skip	WITHOUT_CLASSIFICATION	0.9999989041280081	WITHOUT_CLASSIFICATION	1.0958719918746046E-6	DEFECT
// callbacks to fill in method body	WITHOUT_CLASSIFICATION	0.9999506367201212	WITHOUT_CLASSIFICATION	4.9363279878790115E-5	DEFECT
// prepare to call "def" utility method to handle def logic	WITHOUT_CLASSIFICATION	0.9999996074397843	WITHOUT_CLASSIFICATION	3.9256021561712793E-7	DEFECT
// script object	WITHOUT_CLASSIFICATION	0.9999992392640366	WITHOUT_CLASSIFICATION	7.607359634230047E-7	DEFECT
// arities	WITHOUT_CLASSIFICATION	0.9999996049065518	WITHOUT_CLASSIFICATION	3.950934482630002E-7	DEFECT
// TODO assuming case is a fixnum	WITHOUT_CLASSIFICATION	0.7767224090416583	WITHOUT_CLASSIFICATION	0.22327759095834157	DEFECT
// we have an input case, prepare branching logic	WITHOUT_CLASSIFICATION	0.9999944257248735	WITHOUT_CLASSIFICATION	5.574275126515439E-6	DEFECT
// we have optimized switch cases, build a lookupswitch	WITHOUT_CLASSIFICATION	0.999999589461379	WITHOUT_CLASSIFICATION	4.105386210072356E-7	DEFECT
// checkcast the value; if match, fast path; otherwise proceed to slow logic	WITHOUT_CLASSIFICATION	0.9999999662461634	WITHOUT_CLASSIFICATION	3.375383670880247E-8	DEFECT
// expression-based tests + bodies	WITHOUT_CLASSIFICATION	0.9999997417819994	WITHOUT_CLASSIFICATION	2.582180005679639E-7	DEFECT
// normal case, create a new label	WITHOUT_CLASSIFICATION	0.9999998075283842	WITHOUT_CLASSIFICATION	1.924716157736251E-7	DEFECT
// last conditional case, use defaultCase	WITHOUT_CLASSIFICATION	0.9999996939351642	WITHOUT_CLASSIFICATION	3.060648358561725E-7	DEFECT
// do nothing; arity check is done before call	WITHOUT_CLASSIFICATION	0.9999856199439199	WITHOUT_CLASSIFICATION	1.4380056080043205E-5	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.999999836707794	WITHOUT_CLASSIFICATION	1.6329220599535665E-7	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999993322108112	WITHOUT_CLASSIFICATION	6.677891888400852E-7	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999976344468015	WITHOUT_CLASSIFICATION	2.365553198439565E-6	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999942345964887	WITHOUT_CLASSIFICATION	5.765403511321376E-6	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999942345964887	WITHOUT_CLASSIFICATION	5.765403511321376E-6	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999990101138121	WITHOUT_CLASSIFICATION	9.898861878545862E-7	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999990101138121	WITHOUT_CLASSIFICATION	9.898861878545862E-7	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999999957406114	WITHOUT_CLASSIFICATION	4.2593885870867785E-9	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999999957406114	WITHOUT_CLASSIFICATION	4.2593885870867785E-9	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999998939037684	WITHOUT_CLASSIFICATION	1.0609623153887932E-7	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999998961236533	WITHOUT_CLASSIFICATION	1.038763466390167E-7	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999992488289244	WITHOUT_CLASSIFICATION	7.511710755709159E-7	DEFECT
// if there's args left and we want them, assign to rest arg	WITHOUT_CLASSIFICATION	0.9999999594665847	WITHOUT_CLASSIFICATION	4.053341521166743E-8	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999998897316605	WITHOUT_CLASSIFICATION	1.102683393849957E-7	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.999999877550008	WITHOUT_CLASSIFICATION	1.2244999214131134E-7	DEFECT
// first, iterate over all pre args	WITHOUT_CLASSIFICATION	0.9999994823371846	WITHOUT_CLASSIFICATION	5.176628153788193E-7	DEFECT
// then optional args	WITHOUT_CLASSIFICATION	0.9999995789374876	WITHOUT_CLASSIFICATION	4.210625124277583E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999998489051473	WITHOUT_CLASSIFICATION	1.5109485283494654E-7	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999998939037684	WITHOUT_CLASSIFICATION	1.0609623153887932E-7	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999998961236533	WITHOUT_CLASSIFICATION	1.038763466390167E-7	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999992488289244	WITHOUT_CLASSIFICATION	7.511710755709159E-7	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999998897316605	WITHOUT_CLASSIFICATION	1.102683393849957E-7	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.999999877550008	WITHOUT_CLASSIFICATION	1.2244999214131134E-7	DEFECT
// if rest args, excluding post args	WITHOUT_CLASSIFICATION	0.9999986402163848	WITHOUT_CLASSIFICATION	1.3597836151848146E-6	DEFECT
// finally, post args	WITHOUT_CLASSIFICATION	0.9999968911319582	WITHOUT_CLASSIFICATION	3.108868041846774E-6	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.999912788086623	WITHOUT_CLASSIFICATION	8.721191337703525E-5	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.999912788086623	WITHOUT_CLASSIFICATION	8.721191337703525E-5	DEFECT
// unwrap scopes to appropriate depth	WITHOUT_CLASSIFICATION	0.9999973939331321	WITHOUT_CLASSIFICATION	2.6060668678207344E-6	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999959989497033	WITHOUT_CLASSIFICATION	4.0010502967840914E-6	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.99999955682623	WITHOUT_CLASSIFICATION	4.4317377004752546E-7	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999967629466289	WITHOUT_CLASSIFICATION	3.2370533711744518E-6	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999967629466289	WITHOUT_CLASSIFICATION	3.2370533711744518E-6	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9999955503556508	WITHOUT_CLASSIFICATION	4.449644349174618E-6	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999999360792285	WITHOUT_CLASSIFICATION	6.392077150220779E-8	DEFECT
// store the local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999993577791512	WITHOUT_CLASSIFICATION	6.422208488496914E-7	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999990259817141	WITHOUT_CLASSIFICATION	9.740182859327028E-7	DEFECT
// return in a class body raises error	WITHOUT_CLASSIFICATION	0.9999908722759132	WITHOUT_CLASSIFICATION	9.127724086708523E-6	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999794089821151	WITHOUT_CLASSIFICATION	2.059101788480828E-5	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.999997869652748	WITHOUT_CLASSIFICATION	2.130347252052346E-6	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999991435036705	WITHOUT_CLASSIFICATION	8.56496329573225E-7	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999954059001406	WITHOUT_CLASSIFICATION	4.594099859433083E-6	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999868619275994	WITHOUT_CLASSIFICATION	1.3138072400517692E-5	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999992539382369	WITHOUT_CLASSIFICATION	7.460617632628028E-7	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9999955503556508	WITHOUT_CLASSIFICATION	4.449644349174618E-6	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999999360792285	WITHOUT_CLASSIFICATION	6.392077150220779E-8	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999990259817141	WITHOUT_CLASSIFICATION	9.740182859327028E-7	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999979048760554	WITHOUT_CLASSIFICATION	2.095123944523441E-6	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.99999955682623	WITHOUT_CLASSIFICATION	4.4317377004752546E-7	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.99999955682623	WITHOUT_CLASSIFICATION	4.4317377004752546E-7	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999992938453317	WITHOUT_CLASSIFICATION	7.061546682706358E-7	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999992938453317	WITHOUT_CLASSIFICATION	7.061546682706358E-7	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.999960234733291	WITHOUT_CLASSIFICATION	3.976526670901231E-5	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.999960234733291	WITHOUT_CLASSIFICATION	3.976526670901231E-5	DEFECT
// store the local vars in a local variable if there are any	WITHOUT_CLASSIFICATION	0.9999999105016059	WITHOUT_CLASSIFICATION	8.949839409865007E-8	DEFECT
// if more than 4 locals, get and populate the locals array too	WITHOUT_CLASSIFICATION	0.9999999334311149	WITHOUT_CLASSIFICATION	6.656888504976351E-8	DEFECT
// fill local vars with nil, to avoid checking every access.	WITHOUT_CLASSIFICATION	0.9999985701389646	WITHOUT_CLASSIFICATION	1.4298610353933704E-6	DEFECT
// default for starting tempVariableIndex is ok	WITHOUT_CLASSIFICATION	0.9999947722178011	WITHOUT_CLASSIFICATION	5.227782198884494E-6	DEFECT
// store the local vars in a local variable for preparing the class (using previous scope)	WITHOUT_CLASSIFICATION	0.999999920218928	WITHOUT_CLASSIFICATION	7.978107200559637E-8	DEFECT
// store the new local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999993941497733	WITHOUT_CLASSIFICATION	6.058502266300778E-7	DEFECT
// in 1.8 mode, this will be a RubyArray containing the arguments // in 1.9 mode, this will be an IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999081132273193	WITHOUT_CLASSIFICATION	9.1886772680716E-5	DEFECT
// no variable initialization, because we're reusing parent's scope (flat)	WITHOUT_CLASSIFICATION	0.9999999674148128	WITHOUT_CLASSIFICATION	3.258518712437509E-8	DEFECT
// for specific-index cases, clean up non-expression values	WITHOUT_CLASSIFICATION	0.9999999009733835	WITHOUT_CLASSIFICATION	9.902661648880949E-8	DEFECT
// set up a local Ruby variable	WITHOUT_CLASSIFICATION	0.9999998304002148	WITHOUT_CLASSIFICATION	1.6959978523780405E-7	DEFECT
// if that succeeds, the others should as well	WITHOUT_CLASSIFICATION	0.9999993838287552	WITHOUT_CLASSIFICATION	6.1617124476111E-7	DEFECT
// verify the class	WITHOUT_CLASSIFICATION	0.9999998348437668	WITHOUT_CLASSIFICATION	1.6515623326105746E-7	DEFECT
// create dir if necessary	WITHOUT_CLASSIFICATION	0.9999998886295205	WITHOUT_CLASSIFICATION	1.1137047946447891E-7	DEFECT
// Create the class with the appropriate class name and source file	WITHOUT_CLASSIFICATION	0.9999999938163718	WITHOUT_CLASSIFICATION	6.1836280923918424E-9	DEFECT
// add setPosition impl, which stores filename as constant to speed updates	WITHOUT_CLASSIFICATION	0.9999999977875158	WITHOUT_CLASSIFICATION	2.212484204771876E-9	DEFECT
// thread context	WITHOUT_CLASSIFICATION	0.9999983275434552	WITHOUT_CLASSIFICATION	1.6724565447975116E-6	DEFECT
// line number	WITHOUT_CLASSIFICATION	0.9999976506378583	WITHOUT_CLASSIFICATION	2.3493621417450422E-6	DEFECT
// invoke __file__ with threadcontext, self, args (null), and block (null)	WITHOUT_CLASSIFICATION	0.9999998219331335	WITHOUT_CLASSIFICATION	1.7806686658105835E-7	DEFECT
// load always uses IRubyObject[], so simple closure offset calculation here	WITHOUT_CLASSIFICATION	0.9999999069695792	WITHOUT_CLASSIFICATION	9.303042082344895E-8	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.999997869652748	WITHOUT_CLASSIFICATION	2.130347252052346E-6	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999954059001406	WITHOUT_CLASSIFICATION	4.594099859433083E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999973678510596	WITHOUT_CLASSIFICATION	2.6321489403293597E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999944528741538	WITHOUT_CLASSIFICATION	5.547125846152534E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999944528741538	WITHOUT_CLASSIFICATION	5.547125846152534E-6	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999979048760554	WITHOUT_CLASSIFICATION	2.095123944523441E-6	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.99999955682623	WITHOUT_CLASSIFICATION	4.4317377004752546E-7	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999992938453317	WITHOUT_CLASSIFICATION	7.061546682706358E-7	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.999960234733291	WITHOUT_CLASSIFICATION	3.976526670901231E-5	DEFECT
// add Script#run impl, used for running this script with a specified threadcontext and self // root method of a script is always in __file__ method	WITHOUT_CLASSIFICATION	0.9999944102063255	WITHOUT_CLASSIFICATION	5.589793674477723E-6	DEFECT
// add main impl, used for detached or command-line execution of this script with a new runtime // root method of a script is always in stub0, method0	WITHOUT_CLASSIFICATION	0.9999996340045142	WITHOUT_CLASSIFICATION	3.6599548585257916E-7	DEFECT
// construct static scope list of names	WITHOUT_CLASSIFICATION	0.9999994205450926	WITHOUT_CLASSIFICATION	5.79454907420177E-7	DEFECT
// JRUBY-3014: make __FILE__ dynamically determined at load time, but // we provide a reasonable default here	WITHOUT_CLASSIFICATION	0.9999837973729816	WITHOUT_CLASSIFICATION	1.6202627018414696E-5	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999972125751594	WITHOUT_CLASSIFICATION	2.7874248405847417E-6	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999972125751594	WITHOUT_CLASSIFICATION	2.7874248405847417E-6	DEFECT
// lazily create class init only if necessary	WITHOUT_CLASSIFICATION	0.9999999721279335	WITHOUT_CLASSIFICATION	2.7872066524415866E-8	DEFECT
// boxed arg list __file__	WITHOUT_CLASSIFICATION	0.999995595843193	WITHOUT_CLASSIFICATION	4.40415680698842E-6	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999957849734104	WITHOUT_CLASSIFICATION	4.21502658965949E-6	DEFECT
// exact arg list __file__	WITHOUT_CLASSIFICATION	0.9999947091901553	WITHOUT_CLASSIFICATION	5.290809844657008E-6	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999997882248841	WITHOUT_CLASSIFICATION	2.1177511597222706E-7	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999997882248841	WITHOUT_CLASSIFICATION	2.1177511597222706E-7	DEFECT
// not using a new scope, use saved one for a flat closure	WITHOUT_CLASSIFICATION	0.9999999332290183	WITHOUT_CLASSIFICATION	6.677098172815948E-8	DEFECT
// normal closure	WITHOUT_CLASSIFICATION	0.9999996891702866	WITHOUT_CLASSIFICATION	3.10829713327819E-7	DEFECT
// end of scoping for closure's vars	WITHOUT_CLASSIFICATION	0.999999964699724	WITHOUT_CLASSIFICATION	3.530027599798376E-8	DEFECT
// we only need full-on redo exception handling if there's logic that might produce it	WITHOUT_CLASSIFICATION	0.9999988896681538	WITHOUT_CLASSIFICATION	1.1103318462020172E-6	DEFECT
// handle redos by restarting the block	WITHOUT_CLASSIFICATION	0.9999969383592147	WITHOUT_CLASSIFICATION	3.0616407853774316E-6	DEFECT
// jump back to the top of the main body of this closure	WITHOUT_CLASSIFICATION	0.9999999538568487	WITHOUT_CLASSIFICATION	4.6143151287741814E-8	DEFECT
// Ruby name 	WITHOUT_CLASSIFICATION	0.9999964941851357	WITHOUT_CLASSIFICATION	3.5058148644594286E-6	DEFECT
// Accumulate call arguments	WITHOUT_CLASSIFICATION	0.9999994790515283	WITHOUT_CLASSIFICATION	5.209484716497669E-7	DEFECT
// Fix FileNameCompletor to work mid-line	WITHOUT_CLASSIFICATION	0.9994516342524942	WITHOUT_CLASSIFICATION	5.483657475057694E-4	DEFECT
// We need to ensure that the variable names generated here cannot conflict with ruby variable names! // Hence the "%" tthat is appended to the beginning!	WITHOUT_CLASSIFICATION	0.9999945120438598	WITHOUT_CLASSIFICATION	5.4879561401883085E-6	DEFECT
// Does this method define code?  // Default is yes -- which basically leads to pessimistic but safe optimizations // But, for library and internal methods, this might be false.	WITHOUT_CLASSIFICATION	0.9824633270958972	WITHOUT_CLASSIFICATION	0.017536672904102806	DEFECT
// Map of constants defined in this scope (not valid for methods!)	WITHOUT_CLASSIFICATION	0.9999952851403495	WITHOUT_CLASSIFICATION	4.714859650476412E-6	DEFECT
// NOTE: Since we are processing ASTs, loop bodies are processed in depth-first manner // with outer loops encountered before inner loops, and inner loops finished before outer ones. // // So, we can keep track of loops in a loop stack which  keeps track of loops as they are encountered. // This lets us implement next/redo/break/retry easily for the non-closure cases	WITHOUT_CLASSIFICATION	0.9999999751524818	WITHOUT_CLASSIFICATION	2.4847518149617683E-8	DEFECT
// Map keep track of the next available variable index for a particular prefix	WITHOUT_CLASSIFICATION	0.9999994263216716	WITHOUT_CLASSIFICATION	5.736783283046885E-7	DEFECT
// Control flow graph for this scope	WITHOUT_CLASSIFICATION	0.9999988363898517	WITHOUT_CLASSIFICATION	1.163610148345398E-6	DEFECT
//        _lexicalNestingLevel = lexicalParent == null ? 0 : ((IR_ScopeImpl)lexicalParent)._lexicalNestingLevel + 1;	WITHOUT_CLASSIFICATION	0.9999998985263456	WITHOUT_CLASSIFICATION	1.0147365437568742E-7	DEFECT
// List of modules, classes, and methods defined in this scope!	WITHOUT_CLASSIFICATION	0.9999940918770769	WITHOUT_CLASSIFICATION	5.908122923144278E-6	DEFECT
// Returns the containing parent scope!	WITHOUT_CLASSIFICATION	0.9999974752692025	WITHOUT_CLASSIFICATION	2.5247307975135387E-6	DEFECT
// Insert nesting level to ensure variable names don't conflict across nested scopes! // i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! //        return new Variable(prefix + _lexicalNestingLevel + "_" + idx);	WITHOUT_CLASSIFICATION	0.9999871632011957	WITHOUT_CLASSIFICATION	1.2836798804233463E-5	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999995792801991	WITHOUT_CLASSIFICATION	4.207198009140209E-7	DEFECT
// variable is never read, variable is never live	WITHOUT_CLASSIFICATION	0.9999918234034344	WITHOUT_CLASSIFICATION	8.176596565664004E-6	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.999996322131135	WITHOUT_CLASSIFICATION	3.6778688649986515E-6	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.999996322131135	WITHOUT_CLASSIFICATION	3.6778688649986515E-6	DEFECT
// This method is called to build assignments for a multiple-assignment instruction	WITHOUT_CLASSIFICATION	0.9999888213882278	WITHOUT_CLASSIFICATION	1.1178611772211352E-5	DEFECT
// Build the class body!	WITHOUT_CLASSIFICATION	0.9999782146524171	WITHOUT_CLASSIFICATION	2.1785347582902638E-5	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999979197834692	WITHOUT_CLASSIFICATION	2.0802165308015444E-6	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999979197834692	WITHOUT_CLASSIFICATION	2.0802165308015444E-6	DEFECT
// SSS FIXME: Can this ever be null?	WITHOUT_CLASSIFICATION	0.90718104310104	DEFECT	0.0928189568989601	WITHOUT_CLASSIFICATION
// Run the pass on the passed in scope!	WITHOUT_CLASSIFICATION	0.9999986495040193	WITHOUT_CLASSIFICATION	1.3504959806314557E-6	DEFECT
// done // done // done // done	WITHOUT_CLASSIFICATION	0.9999789718792195	WITHOUT_CLASSIFICATION	2.102812078047567E-5	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999983084934853	WITHOUT_CLASSIFICATION	1.6915065146944564E-6	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999983084934853	WITHOUT_CLASSIFICATION	1.6915065146944564E-6	DEFECT
// This method is called to build arguments for a block!	WITHOUT_CLASSIFICATION	0.9999722235221249	WITHOUT_CLASSIFICATION	2.7776477875014435E-5	DEFECT
// build first node (and ignore its result) and then second node	WITHOUT_CLASSIFICATION	0.9999993362594243	WITHOUT_CLASSIFICATION	6.637405757612155E-7	DEFECT
// build first node only and return false	WITHOUT_CLASSIFICATION	0.9999904146524554	WITHOUT_CLASSIFICATION	9.58534754460537E-6	DEFECT
// Value of the last expression in the block 	WITHOUT_CLASSIFICATION	0.9999988159396793	WITHOUT_CLASSIFICATION	1.1840603206977365E-6	DEFECT
// If this is not a closure, the break is equivalent to jumping to the loop end label	WITHOUT_CLASSIFICATION	0.9999999329192474	WITHOUT_CLASSIFICATION	6.708075264502819E-8	DEFECT
// get the incoming case value	WITHOUT_CLASSIFICATION	0.9999918677932358	WITHOUT_CLASSIFICATION	8.132206764265526E-6	DEFECT
// the CASE instruction	WITHOUT_CLASSIFICATION	0.9999779421879577	WITHOUT_CLASSIFICATION	2.205781204235792E-5	DEFECT
// lists to aggregate variables and bodies for whens	WITHOUT_CLASSIFICATION	0.99999921388838	WITHOUT_CLASSIFICATION	7.86111620046076E-7	DEFECT
// build each "when"	WITHOUT_CLASSIFICATION	0.9999994739713981	WITHOUT_CLASSIFICATION	5.260286019242428E-7	DEFECT
// multiple conditions for when	WITHOUT_CLASSIFICATION	0.9999992912927734	WITHOUT_CLASSIFICATION	7.08707226613523E-7	DEFECT
// build "else" if it exists	WITHOUT_CLASSIFICATION	0.9999993865295626	WITHOUT_CLASSIFICATION	6.134704374826032E-7	DEFECT
// now emit bodies	WITHOUT_CLASSIFICATION	0.9999991013451023	WITHOUT_CLASSIFICATION	8.986548976341366E-7	DEFECT
// close it out	WITHOUT_CLASSIFICATION	0.9999997122619234	WITHOUT_CLASSIFICATION	2.877380765787088E-7	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9999967167736935	WITHOUT_CLASSIFICATION	3.2832263066067556E-6	DEFECT
// Do we have a dynamic container?	WITHOUT_CLASSIFICATION	0.9999699450495948	WITHOUT_CLASSIFICATION	3.0054950405119124E-5	DEFECT
// Return a meta object corresponding to the class	WITHOUT_CLASSIFICATION	0.9999985561244897	WITHOUT_CLASSIFICATION	1.4438755103862425E-6	DEFECT
// 1. Load the module first (lhs of node) // 2. Then load the constant from the module	WITHOUT_CLASSIFICATION	0.9999990671436997	WITHOUT_CLASSIFICATION	9.328563002574545E-7	DEFECT
// Build IR for args	WITHOUT_CLASSIFICATION	0.9999967112493847	WITHOUT_CLASSIFICATION	3.2887506153046137E-6	DEFECT
// Build IR for body	WITHOUT_CLASSIFICATION	0.9999747477218867	WITHOUT_CLASSIFICATION	2.5252278113447045E-5	DEFECT
// if root of method is rescue, build as a light rescue	WITHOUT_CLASSIFICATION	0.9999743252088475	WITHOUT_CLASSIFICATION	2.5674791152444838E-5	DEFECT
// Instance method	WITHOUT_CLASSIFICATION	0.9999712866882152	WITHOUT_CLASSIFICATION	2.871331178478166E-5	DEFECT
// Class method	WITHOUT_CLASSIFICATION	0.9999967120843599	WITHOUT_CLASSIFICATION	3.2879156401107236E-6	DEFECT
// Other args begin at index 1	WITHOUT_CLASSIFICATION	0.9999896390212217	WITHOUT_CLASSIFICATION	1.0360978778288337E-5	DEFECT
// Both for fixed arity and variable arity methods	WITHOUT_CLASSIFICATION	0.9999644168379281	WITHOUT_CLASSIFICATION	3.558316207190369E-5	DEFECT
// Now for the rest	WITHOUT_CLASSIFICATION	0.9999994672494598	WITHOUT_CLASSIFICATION	5.327505402321066E-7	DEFECT
// Jump to 'l' if this arg is not null.  If null, fall through and build the default value!	WITHOUT_CLASSIFICATION	0.9999375104762852	WITHOUT_CLASSIFICATION	6.2489523714756E-5	DEFECT
// This is not an expression that computes anything	WITHOUT_CLASSIFICATION	0.9992715060974918	WITHOUT_CLASSIFICATION	7.284939025081693E-4	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9999998086985344	WITHOUT_CLASSIFICATION	1.9130146549949265E-7	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999931367574865	WITHOUT_CLASSIFICATION	6.86324251346282E-6	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999946142126394	WITHOUT_CLASSIFICATION	5.3857873606616234E-6	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999999493896622	WITHOUT_CLASSIFICATION	5.0610337733198475E-8	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9999967167736935	WITHOUT_CLASSIFICATION	3.2832263066067556E-6	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9999998086985344	WITHOUT_CLASSIFICATION	1.9130146549949265E-7	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999931367574865	WITHOUT_CLASSIFICATION	6.86324251346282E-6	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999999493896622	WITHOUT_CLASSIFICATION	5.0610337733198475E-8	DEFECT
// Get the container for this new module	WITHOUT_CLASSIFICATION	0.9999990754828766	WITHOUT_CLASSIFICATION	9.245171233421676E-7	DEFECT
// Build the new module	WITHOUT_CLASSIFICATION	0.9999003391639213	WITHOUT_CLASSIFICATION	9.96608360787018E-5	DEFECT
// Build the module body	WITHOUT_CLASSIFICATION	0.9998584038083105	WITHOUT_CLASSIFICATION	1.4159619168951373E-4	DEFECT
// First, build an assignment for a splat, if any, with the rest of the args!	WITHOUT_CLASSIFICATION	0.9999999630724055	WITHOUT_CLASSIFICATION	3.69275945415555E-8	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999996328197633	WITHOUT_CLASSIFICATION	3.6718023660643847E-7	DEFECT
// If a closure, the next is simply a return from the closure! // If a regular loop, the next is simply a jump to the end of the iteration	WITHOUT_CLASSIFICATION	0.9999999648190722	WITHOUT_CLASSIFICATION	3.5180927855234194E-8	DEFECT
// get attr	WITHOUT_CLASSIFICATION	0.9999980822138389	WITHOUT_CLASSIFICATION	1.9177861610359165E-6	DEFECT
// call operator	WITHOUT_CLASSIFICATION	0.9999994492876977	WITHOUT_CLASSIFICATION	5.507123023905076E-7	DEFECT
// set attr	WITHOUT_CLASSIFICATION	0.9999991000034771	WITHOUT_CLASSIFICATION	8.999965227648396E-7	DEFECT
// Translate "x &&= y" --> "x = (is_true(x) ? y : false)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, false, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9984427921373885	WITHOUT_CLASSIFICATION	0.0015572078626114741	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9999556888937426	WITHOUT_CLASSIFICATION	4.4311106257269114E-5	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9999556888937426	WITHOUT_CLASSIFICATION	4.4311106257269114E-5	DEFECT
// if v1 is defined and true, we are done! 	WITHOUT_CLASSIFICATION	0.9999758741424711	WITHOUT_CLASSIFICATION	2.4125857528961506E-5	DEFECT
// build first node only and return true	WITHOUT_CLASSIFICATION	0.999978173145595	WITHOUT_CLASSIFICATION	2.1826854405043495E-5	DEFECT
// build first node as non-expr and build second node	WITHOUT_CLASSIFICATION	0.999999534403229	WITHOUT_CLASSIFICATION	4.655967710171094E-7	DEFECT
// Top-level script!	WITHOUT_CLASSIFICATION	0.9999981128202242	WITHOUT_CLASSIFICATION	1.8871797757356684E-6	DEFECT
// we won't enter the loop -- just build the condition node	WITHOUT_CLASSIFICATION	0.9999992184707129	WITHOUT_CLASSIFICATION	7.815292869806886E-7	DEFECT
/* ----------- Private Interface ------------ */	WITHOUT_CLASSIFICATION	0.9999968474749462	WITHOUT_CLASSIFICATION	3.1525250537490266E-6	DEFECT
// What handles warnings	WITHOUT_CLASSIFICATION	0.9999985255116215	WITHOUT_CLASSIFICATION	1.4744883785913897E-6	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.999994371391352	WITHOUT_CLASSIFICATION	5.628608647913524E-6	DEFECT
// For closures, a redo is a jump to the beginning of the closure // For non-closures, a redo is a jump to the beginning of the loop	WITHOUT_CLASSIFICATION	0.9999999640406682	WITHOUT_CLASSIFICATION	3.595933198112497E-8	DEFECT
// The "root" method of a class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999999932807612	WITHOUT_CLASSIFICATION	6.719238799735074E-9	DEFECT
// Dummy top-level method for the class	WITHOUT_CLASSIFICATION	0.9999999169986391	WITHOUT_CLASSIFICATION	8.30013608920902E-8	DEFECT
// Build a dummy static method for the class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999999729010325	WITHOUT_CLASSIFICATION	2.70989674768809E-8	DEFECT
// ------ Define the operations below ----	WITHOUT_CLASSIFICATION	0.9999996568780833	WITHOUT_CLASSIFICATION	3.4312191668346536E-7	DEFECT
// value copy and type conversion operations	WITHOUT_CLASSIFICATION	0.999999010351445	WITHOUT_CLASSIFICATION	9.89648554990884E-7	DEFECT
// alu operations	WITHOUT_CLASSIFICATION	0.999999082229614	WITHOUT_CLASSIFICATION	9.177703859332112E-7	DEFECT
// method handle, arg receive, return value, and  call instructions	WITHOUT_CLASSIFICATION	0.9999834488947285	WITHOUT_CLASSIFICATION	1.6551105271562258E-5	DEFECT
// closure instructions	WITHOUT_CLASSIFICATION	0.9999994117308607	WITHOUT_CLASSIFICATION	5.88269139202239E-7	DEFECT
// eval instructions	WITHOUT_CLASSIFICATION	0.9999993526837618	WITHOUT_CLASSIFICATION	6.473162380672949E-7	DEFECT
// def instructions	WITHOUT_CLASSIFICATION	0.9999989859644738	WITHOUT_CLASSIFICATION	1.0140355262075507E-6	DEFECT
// exception instructions	WITHOUT_CLASSIFICATION	0.9999951197672708	WITHOUT_CLASSIFICATION	4.880232729180251E-6	DEFECT
// Loads	WITHOUT_CLASSIFICATION	0.9999988817501679	WITHOUT_CLASSIFICATION	1.118249831991282E-6	DEFECT
// Stores	WITHOUT_CLASSIFICATION	0.9999983787526305	WITHOUT_CLASSIFICATION	1.6212473693805459E-6	DEFECT
// jump and branch operations	WITHOUT_CLASSIFICATION	0.9999998087702049	WITHOUT_CLASSIFICATION	1.9122979504999056E-7	DEFECT
// others	WITHOUT_CLASSIFICATION	0.9999994939375585	WITHOUT_CLASSIFICATION	5.060624415260336E-7	DEFECT
// a case/when branch	WITHOUT_CLASSIFICATION	0.9999985615989654	WITHOUT_CLASSIFICATION	1.4384010345918156E-6	DEFECT
// optimization guards	WITHOUT_CLASSIFICATION	0.9999993957516291	WITHOUT_CLASSIFICATION	6.042483709775168E-7	DEFECT
// By default, call instructions cannot be deleted even if their results aren't used by anyone // unless we know more about what the call is, what it does, etc. // Similarly for evals, stores, returns.	WITHOUT_CLASSIFICATION	0.9998400476563105	WITHOUT_CLASSIFICATION	1.5995234368954616E-4	DEFECT
// Returns the containing parent scope -- can be a dynamic value (hence Operand)!	WITHOUT_CLASSIFICATION	0.9999966180693933	WITHOUT_CLASSIFICATION	3.381930606639368E-6	DEFECT
// scripts	WITHOUT_CLASSIFICATION	0.9999992019332096	WITHOUT_CLASSIFICATION	7.980667903773471E-7	DEFECT
// scripts and modules	WITHOUT_CLASSIFICATION	0.9999990795942711	WITHOUT_CLASSIFICATION	9.204057287701044E-7	DEFECT
// scripts, classes, and modules	WITHOUT_CLASSIFICATION	0.9999999262231625	WITHOUT_CLASSIFICATION	7.377683751382644E-8	DEFECT
// methods and closures	WITHOUT_CLASSIFICATION	0.9999962566158889	WITHOUT_CLASSIFICATION	3.7433841110901066E-6	DEFECT
// create a new variable using the prefix	WITHOUT_CLASSIFICATION	0.9999998139387357	WITHOUT_CLASSIFICATION	1.8606126432249678E-7	DEFECT
// create a new temporary variable	WITHOUT_CLASSIFICATION	0.9999995083650024	WITHOUT_CLASSIFICATION	4.916349976096805E-7	DEFECT
// Get a new label using a generic prefix	WITHOUT_CLASSIFICATION	0.9999972799758557	WITHOUT_CLASSIFICATION	2.720024144242377E-6	DEFECT
// Build the CFG for this scope -- supported only by methods & closures	WITHOUT_CLASSIFICATION	0.9999895427321328	WITHOUT_CLASSIFICATION	1.0457267867190814E-5	DEFECT
// Get the control flow graph for this scope -- only valid for methods & closures	WITHOUT_CLASSIFICATION	0.9999998814086335	WITHOUT_CLASSIFICATION	1.1859136648971346E-7	DEFECT
// While processing loops, this returns the loop that we are processing.	WITHOUT_CLASSIFICATION	0.9999914475532576	WITHOUT_CLASSIFICATION	8.55244674230732E-6	DEFECT
// Record the loop we are beginning to process	WITHOUT_CLASSIFICATION	0.9999998657322038	WITHOUT_CLASSIFICATION	1.3426779618758624E-7	DEFECT
// Indicate that we are done processing the loop	WITHOUT_CLASSIFICATION	0.9999997136204382	WITHOUT_CLASSIFICATION	2.8637956191137335E-7	DEFECT
// Run the passed in compiler pass on this scope!	WITHOUT_CLASSIFICATION	0.9999967933215292	WITHOUT_CLASSIFICATION	3.206678470804382E-6	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999361605656876	WITHOUT_CLASSIFICATION	6.383943431244371E-5	DEFECT
// Readline	WITHOUT_CLASSIFICATION	0.9999989716765261	WITHOUT_CLASSIFICATION	1.0283234738957038E-6	DEFECT
// If the cfg of the method is around, print the CFG!	WITHOUT_CLASSIFICATION	0.9999936247284529	WITHOUT_CLASSIFICATION	6.375271547169288E-6	DEFECT
// Optimize some core class method calls for constant values	WITHOUT_CLASSIFICATION	0.9999968964759324	WITHOUT_CLASSIFICATION	3.1035240677436595E-6	DEFECT
// If 'r' is not a constant, it could actually be a compound value! // Look in our value map to see if we have a simplified value for the receiver.	WITHOUT_CLASSIFICATION	0.9999976819022147	WITHOUT_CLASSIFICATION	2.318097785252617E-6	DEFECT
// Check if we can optimize this call based on the receiving method and receiver type // Use the simplified receiver!	WITHOUT_CLASSIFICATION	0.9998815906767886	WITHOUT_CLASSIFICATION	1.1840932321137719E-4	DEFECT
// If we got a simplified value, mark the call dead and insert a copy in its place!	WITHOUT_CLASSIFICATION	0.9999972532874966	WITHOUT_CLASSIFICATION	2.7467125033613807E-6	DEFECT
// If the call has been optimized away in the previous step, it is no longer a hard boundary for opts!	WITHOUT_CLASSIFICATION	0.9999999409566627	WITHOUT_CLASSIFICATION	5.904333723781416E-8	DEFECT
/* ----------- Public abstract methods ---------- */	WITHOUT_CLASSIFICATION	0.999980169920313	WITHOUT_CLASSIFICATION	1.9830079687041445E-5	DEFECT
/* ----------- Public methods with a default implementation ---------- */	WITHOUT_CLASSIFICATION	0.9999686912655767	WITHOUT_CLASSIFICATION	3.130873442332524E-5	DEFECT
// Compute meet over all "sources" and compute "destination" basic blocks that should then be processed.  // sources & targets depends on direction of the data flow problem	WITHOUT_CLASSIFICATION	0.9999999932492322	WITHOUT_CLASSIFICATION	6.7507678823971325E-9	DEFECT
// If the solution has changed, add "dsts" to the work list. // No duplicates please which is why we have bbset.	WITHOUT_CLASSIFICATION	0.9999995665454402	WITHOUT_CLASSIFICATION	4.3345455976502266E-7	DEFECT
/* --------- Protected fields/methods below --------- */	WITHOUT_CLASSIFICATION	0.9999929498600132	WITHOUT_CLASSIFICATION	7.050139986802159E-6	DEFECT
// Dataflow problem with which this node is associated // CFG node for which this node contains info.	WITHOUT_CLASSIFICATION	0.9999914961671406	WITHOUT_CLASSIFICATION	8.503832859507641E-6	DEFECT
/* -------------- Public fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999508120294007	WITHOUT_CLASSIFICATION	4.918797059936362E-5	DEFECT
// ------- Abstract methods without a default implementation -------	WITHOUT_CLASSIFICATION	0.9999991589331543	WITHOUT_CLASSIFICATION	8.410668458104047E-7	DEFECT
// ------- Default implementation methods below -------	WITHOUT_CLASSIFICATION	0.9999942431767137	WITHOUT_CLASSIFICATION	5.756823286217303E-6	DEFECT
/* Compute Meet Over All Paths solution for this dataflow problem on the input CFG.     * This implements a standard worklist algorithm. */	WITHOUT_CLASSIFICATION	0.9999546957798446	WITHOUT_CLASSIFICATION	4.530422015535954E-5	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9998960983063842	WITHOUT_CLASSIFICATION	1.039016936159722E-4	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9998960983063842	WITHOUT_CLASSIFICATION	1.039016936159722E-4	DEFECT
/* -------------- Packaged/protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999942839948305	WITHOUT_CLASSIFICATION	5.716005169552911E-6	DEFECT
// We want unique ids for dataflow variables	WITHOUT_CLASSIFICATION	0.9999996188045258	WITHOUT_CLASSIFICATION	3.811954741646058E-7	DEFECT
/* -------------- Protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999896048019664	WITHOUT_CLASSIFICATION	1.0395198033677211E-5	DEFECT
/* -------------- Private fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999794789751673	WITHOUT_CLASSIFICATION	2.0521024832744038E-5	DEFECT
// Initialize all flow graph nodes 	WITHOUT_CLASSIFICATION	0.9999937695393915	WITHOUT_CLASSIFICATION	6.23046060855576E-6	DEFECT
/* Lattice TOP, BOTTOM, ANY values -- these will be used during dataflow analyses */	WITHOUT_CLASSIFICATION	0.9998678105097318	WITHOUT_CLASSIFICATION	1.3218949026813222E-4	DEFECT
/* ******************** PUBLIC INTERFACE ******************* */	WITHOUT_CLASSIFICATION	0.9999004632125951	WITHOUT_CLASSIFICATION	9.953678740490096E-5	DEFECT
// Unique ID assigned to this variable	WITHOUT_CLASSIFICATION	0.9999967442730147	WITHOUT_CLASSIFICATION	3.255726985237404E-6	DEFECT
// start out with a default RubyObject allocator	WITHOUT_CLASSIFICATION	0.9999995246507762	WITHOUT_CLASSIFICATION	4.753492237570081E-7	DEFECT
// switch to an allocator based on a default constructor	WITHOUT_CLASSIFICATION	0.9999998177050295	WITHOUT_CLASSIFICATION	1.8229497033712962E-7	DEFECT
/* ----------- Public Interface ------------ */	WITHOUT_CLASSIFICATION	0.9999956648785877	WITHOUT_CLASSIFICATION	4.335121412252853E-6	DEFECT
// class or module	WITHOUT_CLASSIFICATION	0.9999999481076415	WITHOUT_CLASSIFICATION	5.18923585400586E-8	DEFECT
// OUT = UNION(IN(succs))	WITHOUT_CLASSIFICATION	0.999997243229144	WITHOUT_CLASSIFICATION	2.756770856004737E-6	DEFECT
// Traverse the instructions in this basic block in reverse order!	WITHOUT_CLASSIFICATION	0.9999549964387062	WITHOUT_CLASSIFICATION	4.500356129375695E-5	DEFECT
// v is defined => It is no longer live before 'i'	WITHOUT_CLASSIFICATION	0.9999992288022275	WITHOUT_CLASSIFICATION	7.711977723951712E-7	DEFECT
// IN is the same!	WITHOUT_CLASSIFICATION	0.9999642844859317	WITHOUT_CLASSIFICATION	3.571551406841413E-5	DEFECT
// IN changed!	WITHOUT_CLASSIFICATION	0.9999996330521883	WITHOUT_CLASSIFICATION	3.6694781170677603E-7	DEFECT
/* ---------- Protected / package fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999956461851063	WITHOUT_CLASSIFICATION	4.353814893662401E-6	DEFECT
// If 'v' is not live at the instruction site, and it has no side effects, mark it dead!	WITHOUT_CLASSIFICATION	0.9999960539750065	WITHOUT_CLASSIFICATION	3.946024993545514E-6	DEFECT
// Do not mark this instruction's operands live if the instruction itself is dead!	WITHOUT_CLASSIFICATION	0.9999944926812286	WITHOUT_CLASSIFICATION	5.507318771335892E-6	DEFECT
/* ---------- Private fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999891632094504	WITHOUT_CLASSIFICATION	1.0836790549672848E-5	DEFECT
// Variables live at entry of this node // Variables live at exit of node // Temporary set of live variables // Size of the "_in" and "_out" bit sets 	WITHOUT_CLASSIFICATION	0.9999997236064201	WITHOUT_CLASSIFICATION	2.763935798934645E-7	DEFECT
// Used during optimization passes to propagate type and other information	WITHOUT_CLASSIFICATION	0.9999970365433793	WITHOUT_CLASSIFICATION	2.9634566206681077E-6	DEFECT
// Does this instruction have side effects as a result of its operation // This information is used in optimization phases to impact dead code elimination // and other optimization passes	WITHOUT_CLASSIFICATION	0.9999974560893347	WITHOUT_CLASSIFICATION	2.5439106652982745E-6	DEFECT
/* --------- "Abstract"/"please-override" methods --------- */	WITHOUT_CLASSIFICATION	0.9999974476910846	WITHOUT_CLASSIFICATION	2.5523089154924865E-6	DEFECT
/* Array of all operands for this instruction */	WITHOUT_CLASSIFICATION	0.9999426411781659	WITHOUT_CLASSIFICATION	5.735882183406757E-5	DEFECT
/* List of all variables used by all operands of this instruction */	WITHOUT_CLASSIFICATION	0.9999936007260056	WITHOUT_CLASSIFICATION	6.399273994374147E-6	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     *     * If the value map provides a value for any of the instruction's operands     * this method is expected to replace the original operands with the simplified values.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify     */	WITHOUT_CLASSIFICATION	0.9999998435909677	WITHOUT_CLASSIFICATION	1.564090323949956E-7	DEFECT
// By default, no simplifications!	WITHOUT_CLASSIFICATION	0.9999988701635206	WITHOUT_CLASSIFICATION	1.1298364793362406E-6	DEFECT
// Can this call lead to ruby code getting modified?   // If we don't know what method we are calling, we assume it can (pessimistic, but safe!) // If we do know the target method, we ask the method itself whether it modifies ruby code	WITHOUT_CLASSIFICATION	0.9968437033975011	WITHOUT_CLASSIFICATION	0.003156296602498938	DEFECT
// By default, return instructions cannot be deleted	WITHOUT_CLASSIFICATION	0.9999865430596235	WITHOUT_CLASSIFICATION	1.3456940376576177E-5	DEFECT
// If true, returns the rest of the array starting at the index	WITHOUT_CLASSIFICATION	0.9999978836620003	WITHOUT_CLASSIFICATION	2.1163379996318623E-6	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999967711876968	WITHOUT_CLASSIFICATION	3.2288123031480492E-6	DEFECT
// Map of label & basic blocks with that label	WITHOUT_CLASSIFICATION	0.9999994462114021	WITHOUT_CLASSIFICATION	5.537885977720471E-7	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999967711876968	WITHOUT_CLASSIFICATION	3.2288123031480492E-6	DEFECT
// You can only value-replace atomic values	WITHOUT_CLASSIFICATION	0.9999990438687737	WITHOUT_CLASSIFICATION	9.561312262805693E-7	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999799654286149	WITHOUT_CLASSIFICATION	2.003457138518429E-5	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999799654286149	WITHOUT_CLASSIFICATION	2.003457138518429E-5	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999799654286149	WITHOUT_CLASSIFICATION	2.003457138518429E-5	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999998940840001	WITHOUT_CLASSIFICATION	1.0591599989036665E-7	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999998940840001	WITHOUT_CLASSIFICATION	1.0591599989036665E-7	DEFECT
// The operand that this attribute targets //    DEFERRED //    AttributeValue _val;       // Attribute value	WITHOUT_CLASSIFICATION	0.999979963891764	WITHOUT_CLASSIFICATION	2.0036108235983425E-5	DEFECT
// Arrays, Ranges, etc. are compound values // Variables, fixnums, floats, etc. are "atomic" values	WITHOUT_CLASSIFICATION	0.9999994339278998	WITHOUT_CLASSIFICATION	5.660721001017516E-7	DEFECT
// Get the target class of this operand, if we know it!	WITHOUT_CLASSIFICATION	0.9999997320166844	WITHOUT_CLASSIFICATION	2.6798331570116784E-7	DEFECT
// The following constants capture pre-known static call sites -- used to implement ruby internals	WITHOUT_CLASSIFICATION	0.9999985215877272	WITHOUT_CLASSIFICATION	1.47841227280217E-6	DEFECT
/* Nothing to do by default */	WITHOUT_CLASSIFICATION	0.9999670717126888	WITHOUT_CLASSIFICATION	3.292828731106282E-5	DEFECT
// Map of label & basic blocks which are waiting for a bb with that label	WITHOUT_CLASSIFICATION	0.999999759833578	WITHOUT_CLASSIFICATION	2.40166421996924E-7	DEFECT
// Init before building basic blocks below!	WITHOUT_CLASSIFICATION	0.9999968485892438	WITHOUT_CLASSIFICATION	3.1514107562729687E-6	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999968704385801	WITHOUT_CLASSIFICATION	3.1295614198934664E-6	DEFECT
// Scope (method/closure) to which this cfg belongs // Entry BB -- dummy // Exit BB -- dummy // The actual graph // Next available basic block id	WITHOUT_CLASSIFICATION	0.9999988385676574	WITHOUT_CLASSIFICATION	1.161432342657967E-6	DEFECT
// Jump instruction bbs dont add an edge to the succeeding bb by default	WITHOUT_CLASSIFICATION	0.9999910741308277	WITHOUT_CLASSIFICATION	8.925869172284271E-6	DEFECT
// Add forward ref. edges	WITHOUT_CLASSIFICATION	0.9999996935169618	WITHOUT_CLASSIFICATION	3.0648303825022723E-7	DEFECT
// currBB cannot be null!	WITHOUT_CLASSIFICATION	0.9998968728854398	WITHOUT_CLASSIFICATION	1.0312711456022992E-4	DEFECT
// Add a forward reference from tgt -> currBB	WITHOUT_CLASSIFICATION	0.9999990869416481	WITHOUT_CLASSIFICATION	9.130583518381704E-7	DEFECT
// root-level logic	WITHOUT_CLASSIFICATION	0.9999994608519374	WITHOUT_CLASSIFICATION	5.391480626537213E-7	DEFECT
// root-level methods	WITHOUT_CLASSIFICATION	0.9999958834773675	WITHOUT_CLASSIFICATION	4.116522632528343E-6	DEFECT
// root-level classes	WITHOUT_CLASSIFICATION	0.9999998237616101	WITHOUT_CLASSIFICATION	1.7623838991123593E-7	DEFECT
//        case 4: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class); //            break; //        case 5: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class, Object.class); //            break;	WITHOUT_CLASSIFICATION	0.999999379622281	WITHOUT_CLASSIFICATION	6.203777190506721E-7	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.999998879470253	WITHOUT_CLASSIFICATION	1.1205297470222589E-6	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.999998879470253	WITHOUT_CLASSIFICATION	1.1205297470222589E-6	DEFECT
// receiver	WITHOUT_CLASSIFICATION	0.9999965097668816	WITHOUT_CLASSIFICATION	3.490233118349316E-6	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999998674150422	WITHOUT_CLASSIFICATION	1.325849578138752E-7	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999998674150422	WITHOUT_CLASSIFICATION	1.325849578138752E-7	DEFECT
//        case 4: //        case 5:	WITHOUT_CLASSIFICATION	0.999989835673847	WITHOUT_CLASSIFICATION	1.0164326152981646E-5	DEFECT
// Object[] args	WITHOUT_CLASSIFICATION	0.9999990970637715	WITHOUT_CLASSIFICATION	9.029362284757597E-7	DEFECT
// load handle	WITHOUT_CLASSIFICATION	0.9999992903633877	WITHOUT_CLASSIFICATION	7.096366123047907E-7	DEFECT
// args array	WITHOUT_CLASSIFICATION	0.9999981460894993	WITHOUT_CLASSIFICATION	1.8539105007790115E-6	DEFECT
// i'th argument	WITHOUT_CLASSIFICATION	0.999996318762487	WITHOUT_CLASSIFICATION	3.6812375128977195E-6	DEFECT
// invoke specific arity version	WITHOUT_CLASSIFICATION	0.99999282787391	WITHOUT_CLASSIFICATION	7.172126090006761E-6	DEFECT
// Object arg0	WITHOUT_CLASSIFICATION	0.9999932940844654	WITHOUT_CLASSIFICATION	6.705915534645439E-6	DEFECT
// useful for code completion inside the IRB	WITHOUT_CLASSIFICATION	0.9999996959796398	WITHOUT_CLASSIFICATION	3.0402036025483465E-7	DEFECT
// No editing before startPos	WITHOUT_CLASSIFICATION	0.9999993037073148	WITHOUT_CLASSIFICATION	6.962926852269737E-7	DEFECT
// no silly ticks!	WITHOUT_CLASSIFICATION	0.9999977461249075	WITHOUT_CLASSIFICATION	2.253875092460034E-6	DEFECT
// no candidates? Fail.	WITHOUT_CLASSIFICATION	0.9999979411610651	WITHOUT_CLASSIFICATION	2.058838934833282E-6	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9999969608319165	WITHOUT_CLASSIFICATION	3.0391680834631284E-6	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999975482528622	WITHOUT_CLASSIFICATION	2.4517471377754802E-6	DEFECT
// Explicit reference to these vars as symbols...	WITHOUT_CLASSIFICATION	0.9999990058183265	WITHOUT_CLASSIFICATION	9.94181673578514E-7	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999968704385801	WITHOUT_CLASSIFICATION	3.1295614198934664E-6	DEFECT
//\t\n\"\\'`@$><=;|&{(	WITHOUT_CLASSIFICATION	0.9999190154879734	WITHOUT_CLASSIFICATION	8.098451202661517E-5	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999983270612804	WITHOUT_CLASSIFICATION	1.6729387194769535E-6	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.999999588287928	WITHOUT_CLASSIFICATION	4.1171207202333774E-7	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.999999588287928	WITHOUT_CLASSIFICATION	4.1171207202333774E-7	DEFECT
// Binding provided for scope, use it	WITHOUT_CLASSIFICATION	0.9999984947374253	WITHOUT_CLASSIFICATION	1.5052625746496275E-6	DEFECT
// this is ensured by the callers	WITHOUT_CLASSIFICATION	0.9999946397911605	WITHOUT_CLASSIFICATION	5.360208839397637E-6	DEFECT
// no binding, just eval in "current" frame (caller's frame)	WITHOUT_CLASSIFICATION	0.9999996054367193	WITHOUT_CLASSIFICATION	3.945632807275809E-7	DEFECT
// restore position	WITHOUT_CLASSIFICATION	0.9999974179785592	WITHOUT_CLASSIFICATION	2.582021440700181E-6	DEFECT
/* Something like cvar_cbase() from eval.c, factored out for the benefit     * of all the classvar-related node evaluations */	WITHOUT_CLASSIFICATION	0.9999982313742687	WITHOUT_CLASSIFICATION	1.7686257313708128E-6	DEFECT
// Used by the compiler to simplify arg processing	WITHOUT_CLASSIFICATION	0.9999996877217883	WITHOUT_CLASSIFICATION	3.122782116896416E-7	DEFECT
// JRUBY-2673: if wrapping a NativeException, use the actual Java exception's trace as our Java trace	WITHOUT_CLASSIFICATION	0.9999954290636925	WITHOUT_CLASSIFICATION	4.570936307395579E-6	DEFECT
// MRI does similar thing on MacOS X with 'EditLine wrapper'.	WITHOUT_CLASSIFICATION	0.9999487967542848	WITHOUT_CLASSIFICATION	5.120324571519678E-5	DEFECT
// We lazily initialize this in case Readline.readline has been overridden in ruby (s_readline)	WITHOUT_CLASSIFICATION	0.999962108094582	WITHOUT_CLASSIFICATION	3.789190541802094E-5	DEFECT
// JRUBY-852, ignore escape key (it causes IRB to quit if we pass it out through readline)	WITHOUT_CLASSIFICATION	0.9999999494954331	WITHOUT_CLASSIFICATION	5.0504566800659285E-8	DEFECT
// not overridden, let's go	WITHOUT_CLASSIFICATION	0.999999027682373	WITHOUT_CLASSIFICATION	9.723176269262864E-7	DEFECT
/* Explicitly use UTF-8 here. c.f. history.addToHistory using line.asUTF8() */	WITHOUT_CLASSIFICATION	0.9999765626621654	WITHOUT_CLASSIFICATION	2.3437337834616496E-5	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.9235621318899052	WITHOUT_CLASSIFICATION	0.07643786811009486	DEFECT
// Complete using a Proc object	WITHOUT_CLASSIFICATION	0.9999995083443863	WITHOUT_CLASSIFICATION	4.916556136823414E-7	DEFECT
// clear basename so it's anonymous when raising	WITHOUT_CLASSIFICATION	0.9999993976012796	WITHOUT_CLASSIFICATION	6.023987204042292E-7	DEFECT
// These are not really used by timeout, but exposed for compatibility	WITHOUT_CLASSIFICATION	0.9999895447541328	WITHOUT_CLASSIFICATION	1.045524586726538E-5	DEFECT
// Timeout module methods	WITHOUT_CLASSIFICATION	0.9999345728917725	WITHOUT_CLASSIFICATION	6.542710822750298E-5	DEFECT
// Toplevel defines	WITHOUT_CLASSIFICATION	0.9999988573353864	WITHOUT_CLASSIFICATION	1.142664613493631E-6	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999997555191975	WITHOUT_CLASSIFICATION	2.4448080240617175E-7	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9999986685198062	WITHOUT_CLASSIFICATION	1.3314801937774421E-6	DEFECT
// if it's the exception we're expecting	WITHOUT_CLASSIFICATION	0.999998409949835	WITHOUT_CLASSIFICATION	1.5900501649460436E-6	DEFECT
// and we were given a specific exception	WITHOUT_CLASSIFICATION	0.9999985702327707	WITHOUT_CLASSIFICATION	1.4297672293325528E-6	DEFECT
// otherwise, rethrow	WITHOUT_CLASSIFICATION	0.9999983736178433	WITHOUT_CLASSIFICATION	1.6263821568339171E-6	DEFECT
// // Remove the Executor task now, to avoid cancelled tasks accumulating // until an Executor thread can schedule and remove them //	WITHOUT_CLASSIFICATION	0.9999999875414607	WITHOUT_CLASSIFICATION	1.245853922771066E-8	DEFECT
// // If the task was scheduled, wait for it to finish before polling // for the exception it would have thrown. //	WITHOUT_CLASSIFICATION	0.9999999905484316	WITHOUT_CLASSIFICATION	9.451568400204936E-9	DEFECT
// NetProtocolBufferedIO	WITHOUT_CLASSIFICATION	0.9999963225330173	WITHOUT_CLASSIFICATION	3.677466982651131E-6	DEFECT
/* When a length is given, read_string acts like get_bytes */	WITHOUT_CLASSIFICATION	0.999980426637945	WITHOUT_CLASSIFICATION	1.9573362055128134E-5	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9999976048800592	WITHOUT_CLASSIFICATION	2.395119940770398E-6	DEFECT
// ARRAY and STRUCT are only used internally	WITHOUT_CLASSIFICATION	0.9999997828025554	WITHOUT_CLASSIFICATION	2.171974444635755E-7	DEFECT
// If no release method is defined, then memory leaks will result.	WITHOUT_CLASSIFICATION	0.9999776010949075	WITHOUT_CLASSIFICATION	2.2398905092426653E-5	DEFECT
/*     * This variant of newStruct is called from StructLayoutBuilder     */	WITHOUT_CLASSIFICATION	0.9999765450588254	WITHOUT_CLASSIFICATION	2.345494117465126E-5	DEFECT
// This also handles unsigned int -> negative signed int conversion	WITHOUT_CLASSIFICATION	0.9999856072246087	WITHOUT_CLASSIFICATION	1.4392775391250885E-5	DEFECT
// Windows is LLP64	WITHOUT_CLASSIFICATION	0.9999918943711377	WITHOUT_CLASSIFICATION	8.105628862304342E-6	DEFECT
// Older JDK on linux map 'c' to 'libc.so' which doesn't work	WITHOUT_CLASSIFICATION	0.9959370846949426	WITHOUT_CLASSIFICATION	0.004062915305057461	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999995697672679	WITHOUT_CLASSIFICATION	4.3023273206168345E-7	DEFECT
// $blah	WITHOUT_CLASSIFICATION	0.999998351493916	WITHOUT_CLASSIFICATION	1.648506083933804E-6	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9999976048800592	WITHOUT_CLASSIFICATION	2.395119940770398E-6	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9999999068443818	WITHOUT_CLASSIFICATION	9.315561819816266E-8	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999995697672679	WITHOUT_CLASSIFICATION	4.3023273206168345E-7	DEFECT
// // Keep a reference to the temporary memory in the cache so it does // not get freed by the GC until the struct is freed //	WITHOUT_CLASSIFICATION	0.9999998641058329	WITHOUT_CLASSIFICATION	1.3589416714742837E-7	DEFECT
// Add Pointer::NULL as a constant	WITHOUT_CLASSIFICATION	0.9999997278961887	WITHOUT_CLASSIFICATION	2.721038112505203E-7	DEFECT
// Create the ordered list of field names from the map	WITHOUT_CLASSIFICATION	0.9999997858628286	WITHOUT_CLASSIFICATION	2.1413717148034205E-7	DEFECT
// Assemble a [ :name, offset ] array	WITHOUT_CLASSIFICATION	0.9999995446942471	WITHOUT_CLASSIFICATION	4.5530575288412686E-7	DEFECT
//                case FLOAT:	WITHOUT_CLASSIFICATION	0.9999830005247723	WITHOUT_CLASSIFICATION	1.6999475227708603E-5	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9999972801058343	WITHOUT_CLASSIFICATION	2.719894165598624E-6	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9999972801058343	WITHOUT_CLASSIFICATION	2.719894165598624E-6	DEFECT
// No auto cleanup needed	WITHOUT_CLASSIFICATION	0.9999998356055667	WITHOUT_CLASSIFICATION	1.6439443321266164E-7	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9999998959684052	WITHOUT_CLASSIFICATION	1.0403159481666316E-7	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999996348433793	WITHOUT_CLASSIFICATION	3.6515662070223726E-7	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999996348433793	WITHOUT_CLASSIFICATION	3.6515662070223726E-7	DEFECT
/*         * If there is exactly _one_ callback argument to the function,         * then a block can be given and automatically subsituted for the callback         * parameter.         */	WITHOUT_CLASSIFICATION	0.9999999942421709	WITHOUT_CLASSIFICATION	5.757829119453775E-9	DEFECT
/*------------------------------------------------------------------------*/	WITHOUT_CLASSIFICATION	0.9996076719712117	WITHOUT_CLASSIFICATION	3.9232802878826306E-4	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.999850543770673	WITHOUT_CLASSIFICATION	1.4945622932699122E-4	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.999850543770673	WITHOUT_CLASSIFICATION	1.4945622932699122E-4	DEFECT
// RubyUNIXServer	WITHOUT_CLASSIFICATION	0.9999977158187368	WITHOUT_CLASSIFICATION	2.284181263278973E-6	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999945422337956	WITHOUT_CLASSIFICATION	5.457766204395789E-6	DEFECT
// // Set up for potentially fast-int operations //	WITHOUT_CLASSIFICATION	0.9999998122818606	WITHOUT_CLASSIFICATION	1.8771813938954658E-7	DEFECT
// // Hook up the MemoryPointer class if its not already there //	WITHOUT_CLASSIFICATION	0.9999999894200559	WITHOUT_CLASSIFICATION	1.0579944252261294E-8	DEFECT
// This is a bit convoluted because (1) SocketChannel.bind is only in jdk 7 and // (2) Socket.getChannel() seems to return null in some cases	WITHOUT_CLASSIFICATION	0.9998718776744913	WITHOUT_CLASSIFICATION	1.2812232550869567E-4	DEFECT
// no UNIXSockets on Windows	WITHOUT_CLASSIFICATION	0.999993697274745	WITHOUT_CLASSIFICATION	6.302725255066164E-6	DEFECT
// Sockaddr_un has different structure on different platforms. // See JRUBY-2213 for more details.	WITHOUT_CLASSIFICATION	0.9999993157139284	WITHOUT_CLASSIFICATION	6.842860715608208E-7	DEFECT
// There is something valid in the sun_path component	WITHOUT_CLASSIFICATION	0.9999930420827745	WITHOUT_CLASSIFICATION	6.9579172255442195E-6	DEFECT
// RubyIPSocket	WITHOUT_CLASSIFICATION	0.9999904349467041	WITHOUT_CLASSIFICATION	9.565053295797342E-6	DEFECT
// host is nil or the empty string, bind to INADDR_ANY	WITHOUT_CLASSIFICATION	0.9999990627143759	WITHOUT_CLASSIFICATION	9.372856240038445E-7	DEFECT
// host and port given	WITHOUT_CLASSIFICATION	0.9999982598782815	WITHOUT_CLASSIFICATION	1.7401217184787802E-6	DEFECT
// RubyUDPSocket	WITHOUT_CLASSIFICATION	0.9999878895417252	WITHOUT_CLASSIFICATION	1.2110458274823223E-5	DEFECT
// By default we always reverse lookup unless do_not_reverse_lookup set.	WITHOUT_CLASSIFICATION	0.9999881601501094	WITHOUT_CLASSIFICATION	1.1839849890552411E-5	DEFECT
// make sure descriptor is registered	WITHOUT_CLASSIFICATION	0.9999993074965067	WITHOUT_CLASSIFICATION	6.925034932901341E-7	DEFECT
// continue with normal initialization	WITHOUT_CLASSIFICATION	0.9999865234206478	WITHOUT_CLASSIFICATION	1.34765793522475E-5	DEFECT
// recv returns nil on EOF	WITHOUT_CLASSIFICATION	0.9999891528518835	WITHOUT_CLASSIFICATION	1.084714811641262E-5	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9999960053613607	WITHOUT_CLASSIFICATION	3.994638639343964E-6	DEFECT
// RubyBasicSocket	WITHOUT_CLASSIFICATION	0.9999949387484902	WITHOUT_CLASSIFICATION	5.061251509887455E-6	DEFECT
// we don't have to define any that we don't support; see socket.c	WITHOUT_CLASSIFICATION	0.999992489370385	WITHOUT_CLASSIFICATION	7.510629614994512E-6	DEFECT
// mandatory constants we haven't implemented	WITHOUT_CLASSIFICATION	0.9999940890952267	WITHOUT_CLASSIFICATION	5.910904773319023E-6	DEFECT
// constants webrick crashes without	WITHOUT_CLASSIFICATION	0.9999994985661758	WITHOUT_CLASSIFICATION	5.01433824290319E-7	DEFECT
// More constants needed by specs	WITHOUT_CLASSIFICATION	0.9999998639316673	WITHOUT_CLASSIFICATION	1.360683327726522E-7	DEFECT
// normal file descriptor..try to work with it	WITHOUT_CLASSIFICATION	0.9999920150501419	WITHOUT_CLASSIFICATION	7.984949858060259E-6	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9999937398679037	WITHOUT_CLASSIFICATION	6.260132096277723E-6	DEFECT
// 255.255.255.255	WITHOUT_CLASSIFICATION	0.9999960841431755	WITHOUT_CLASSIFICATION	3.91585682442426E-6	DEFECT
// 0.0.0.0	WITHOUT_CLASSIFICATION	0.9999968372581657	WITHOUT_CLASSIFICATION	3.1627418344095876E-6	DEFECT
//def self.getaddrinfo(host, port, family = nil, socktype = nil, protocol = nil, flags = nil)	WITHOUT_CLASSIFICATION	0.99999773731103	WITHOUT_CLASSIFICATION	2.262688970092333E-6	DEFECT
// line 323	WITHOUT_CLASSIFICATION	0.9999935819704031	WITHOUT_CLASSIFICATION	6.418029596852486E-6	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999970989730534	WITHOUT_CLASSIFICATION	2.9010269466172473E-6	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999970989730534	WITHOUT_CLASSIFICATION	2.9010269466172473E-6	DEFECT
// ok, it's a socket...set values accordingly // just using AF_INET since we can't tell from SocketChannel...	WITHOUT_CLASSIFICATION	0.9999731804165439	WITHOUT_CLASSIFICATION	2.6819583456037236E-5	DEFECT
// datagram, set accordingly // again, AF_INET	WITHOUT_CLASSIFICATION	0.9999975127917862	WITHOUT_CLASSIFICATION	2.487208213817118E-6	DEFECT
//IRubyObject family = args[2];	WITHOUT_CLASSIFICATION	0.9999648752203115	WITHOUT_CLASSIFICATION	3.512477968842937E-5	DEFECT
// When Socket::AI_PASSIVE and host is nil, return 'any' address. 	WITHOUT_CLASSIFICATION	0.9999774730044603	WITHOUT_CLASSIFICATION	2.2526995539651314E-5	DEFECT
// The value of 1 is for Socket::AI_PASSIVE.	WITHOUT_CLASSIFICATION	0.9999470467979624	WITHOUT_CLASSIFICATION	5.295320203754283E-5	DEFECT
// RubySocket	WITHOUT_CLASSIFICATION	0.9999865471397897	WITHOUT_CLASSIFICATION	1.345286021033747E-5	DEFECT
// numeric host, use it for port	WITHOUT_CLASSIFICATION	0.9999978304008279	WITHOUT_CLASSIFICATION	2.169599172089941E-6	DEFECT
//            e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999994441184507	WITHOUT_CLASSIFICATION	5.558815493695278E-7	DEFECT
// we were woken up without being selected...poll for thread events and go back to sleep	WITHOUT_CLASSIFICATION	0.9999999814591574	WITHOUT_CLASSIFICATION	1.8540842667894263E-8	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999999633820033	WITHOUT_CLASSIFICATION	3.661799673150433E-8	DEFECT
// no connection immediately accepted, let them try again	WITHOUT_CLASSIFICATION	0.99999923835938	WITHOUT_CLASSIFICATION	7.616406199103457E-7	DEFECT
// do nothing, just exit	WITHOUT_CLASSIFICATION	0.999997969087172	WITHOUT_CLASSIFICATION	2.030912827910204E-6	DEFECT
//nativeThread.setPriority(priority);	WITHOUT_CLASSIFICATION	0.9999933097946436	WITHOUT_CLASSIFICATION	6.6902053564120005E-6	DEFECT
// set thread context JRuby classloader here, for Ruby-owned thread	WITHOUT_CLASSIFICATION	0.9999997957830413	WITHOUT_CLASSIFICATION	2.0421695874997683E-7	DEFECT
// uber-ThreadKill catcher, since it should always just mean "be dead"	WITHOUT_CLASSIFICATION	0.9999931845279145	WITHOUT_CLASSIFICATION	6.815472085419296E-6	DEFECT
// Call the thread's code	WITHOUT_CLASSIFICATION	0.9999898165841782	WITHOUT_CLASSIFICATION	1.0183415821718074E-5	DEFECT
// Someone called exit!, so we need to kill the main thread	WITHOUT_CLASSIFICATION	0.9999985969715295	WITHOUT_CLASSIFICATION	1.403028470575684E-6	DEFECT
// restore context classloader, in case we're using a thread pool	WITHOUT_CLASSIFICATION	0.999998391304478	WITHOUT_CLASSIFICATION	1.6086955219976205E-6	DEFECT
// be dead	WITHOUT_CLASSIFICATION	0.9999938882379314	WITHOUT_CLASSIFICATION	6.111762068503236E-6	DEFECT
// loop until a context is available, to clean up softrefs that might have been collected	WITHOUT_CLASSIFICATION	0.9999997004141756	WITHOUT_CLASSIFICATION	2.9958582441429524E-7	DEFECT
// all threads in ruby thread group plus main thread	WITHOUT_CLASSIFICATION	0.9999965726387327	WITHOUT_CLASSIFICATION	3.4273612674120877E-6	DEFECT
// thread is not alive, skip it	WITHOUT_CLASSIFICATION	0.9999746028836805	WITHOUT_CLASSIFICATION	2.5397116319562215E-5	DEFECT
// future is done or cancelled, skip it	WITHOUT_CLASSIFICATION	0.999999642870207	WITHOUT_CLASSIFICATION	3.57129792886132E-7	DEFECT
// first, check if the sender has unreceived mail	WITHOUT_CLASSIFICATION	0.9999994756083556	WITHOUT_CLASSIFICATION	5.243916444494555E-7	DEFECT
// then deliver mail to the target	WITHOUT_CLASSIFICATION	0.9999997819264598	WITHOUT_CLASSIFICATION	2.180735403283483E-7	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999878525405329	WITHOUT_CLASSIFICATION	1.214745946719625E-5	DEFECT
// Define a second version that doesn't take a block, so we have unique code paths for both cases.	WITHOUT_CLASSIFICATION	0.9999677868217691	WITHOUT_CLASSIFICATION	3.2213178230803134E-5	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999773104710394	WITHOUT_CLASSIFICATION	2.2689528960604223E-5	DEFECT
// main body	WITHOUT_CLASSIFICATION	0.9999976386971288	WITHOUT_CLASSIFICATION	2.3613028712105877E-6	DEFECT
// return jump handling	WITHOUT_CLASSIFICATION	0.9999989935137387	WITHOUT_CLASSIFICATION	1.0064862613455878E-6	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9999953859065621	WITHOUT_CLASSIFICATION	4.614093437894473E-6	DEFECT
// return result if we're still good	WITHOUT_CLASSIFICATION	0.9999947328367114	WITHOUT_CLASSIFICATION	5.267163288660336E-6	DEFECT
// redo jump handling	WITHOUT_CLASSIFICATION	0.9999992498931908	WITHOUT_CLASSIFICATION	7.501068092215252E-7	DEFECT
// clear the redo	WITHOUT_CLASSIFICATION	0.999999493398898	WITHOUT_CLASSIFICATION	5.066011019770579E-7	DEFECT
// get runtime, create jump error, and throw it	WITHOUT_CLASSIFICATION	0.9999993834748474	WITHOUT_CLASSIFICATION	6.165251525401795E-7	DEFECT
// throw redo error if we're still good	WITHOUT_CLASSIFICATION	0.9999954263794192	WITHOUT_CLASSIFICATION	4.573620580821322E-6	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.999997372592173	WITHOUT_CLASSIFICATION	2.627407826912877E-6	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9999910247469329	WITHOUT_CLASSIFICATION	8.97525306715329E-6	DEFECT
// No required specified, check actual number of required args	WITHOUT_CLASSIFICATION	0.9999999848871561	WITHOUT_CLASSIFICATION	1.5112843884690636E-8	DEFECT
// actual required is less than 3, so we use specific arity	WITHOUT_CLASSIFICATION	0.9999983983856058	WITHOUT_CLASSIFICATION	1.601614394221329E-6	DEFECT
// actual required is greater than 3, raise error (we don't support actual required > 3)	WITHOUT_CLASSIFICATION	0.9999788946344745	WITHOUT_CLASSIFICATION	2.1105365525502717E-5	DEFECT
// simple path, no multimethod	WITHOUT_CLASSIFICATION	0.9999867628663814	WITHOUT_CLASSIFICATION	1.3237133618590238E-5	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9999970684559926	WITHOUT_CLASSIFICATION	2.9315440075059983E-6	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9999970684559926	WITHOUT_CLASSIFICATION	2.9315440075059983E-6	DEFECT
// normal all-rest method	WITHOUT_CLASSIFICATION	0.9999584401112135	WITHOUT_CLASSIFICATION	4.1559888786498994E-5	DEFECT
// for zero, one, two, three arities, JavaMethod.JavaMethod*.call(...IRubyObject[] args...) will check	WITHOUT_CLASSIFICATION	0.9999912638672219	WITHOUT_CLASSIFICATION	8.736132778030997E-6	DEFECT
// promise to implement zero to N	WITHOUT_CLASSIFICATION	0.9999910876921063	WITHOUT_CLASSIFICATION	8.912307893600979E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999955727641181	WITHOUT_CLASSIFICATION	4.42723588183813E-6	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.999999836707794	WITHOUT_CLASSIFICATION	1.6329220599535665E-7	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999993322108112	WITHOUT_CLASSIFICATION	6.677891888400852E-7	DEFECT
// confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999998687997695	WITHOUT_CLASSIFICATION	1.312002304907279E-7	DEFECT
// confirm maximum not greater than optional	WITHOUT_CLASSIFICATION	0.9999997583538542	WITHOUT_CLASSIFICATION	2.416461456588797E-7	DEFECT
// Raise an error if arity does not match requirements	WITHOUT_CLASSIFICATION	0.9999669509249113	WITHOUT_CLASSIFICATION	3.304907508873116E-5	DEFECT
// tc	WITHOUT_CLASSIFICATION	0.9999948290963039	WITHOUT_CLASSIFICATION	5.170903696143512E-6	DEFECT
// self // name	WITHOUT_CLASSIFICATION	0.999999593198064	WITHOUT_CLASSIFICATION	4.0680193602802324E-7	DEFECT
// no args	WITHOUT_CLASSIFICATION	0.999999594215248	WITHOUT_CLASSIFICATION	4.057847519247471E-7	DEFECT
// variable args with block	WITHOUT_CLASSIFICATION	0.9999971166484255	WITHOUT_CLASSIFICATION	2.8833515746401435E-6	DEFECT
// variable args no block, load null block	WITHOUT_CLASSIFICATION	0.9999971024593226	WITHOUT_CLASSIFICATION	2.8975406773913223E-6	DEFECT
// zero args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.999998671303408	WITHOUT_CLASSIFICATION	1.3286965919095744E-6	DEFECT
// one arg with block	WITHOUT_CLASSIFICATION	0.9999949751964756	WITHOUT_CLASSIFICATION	5.024803524382518E-6	DEFECT
// one arg, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999988925293213	WITHOUT_CLASSIFICATION	1.1074706787497386E-6	DEFECT
// two args with block	WITHOUT_CLASSIFICATION	0.9999969565621203	WITHOUT_CLASSIFICATION	3.0434378797015028E-6	DEFECT
// two args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999992448099262	WITHOUT_CLASSIFICATION	7.55190073711524E-7	DEFECT
// three args with block	WITHOUT_CLASSIFICATION	0.9999946161063891	WITHOUT_CLASSIFICATION	5.38389361087736E-6	DEFECT
// three args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999985228667558	WITHOUT_CLASSIFICATION	1.4771332442565651E-6	DEFECT
// load block if it accepts block	WITHOUT_CLASSIFICATION	0.9999958616604501	WITHOUT_CLASSIFICATION	4.138339549917971E-6	DEFECT
// all other arg cases with block	WITHOUT_CLASSIFICATION	0.9999994346851719	WITHOUT_CLASSIFICATION	5.653148279944894E-7	DEFECT
// all other arg cases without block	WITHOUT_CLASSIFICATION	0.9999994870962994	WITHOUT_CLASSIFICATION	5.129037006491426E-7	DEFECT
// one arg, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999987429119702	WITHOUT_CLASSIFICATION	1.2570880297558963E-6	DEFECT
// two args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999991343330525	WITHOUT_CLASSIFICATION	8.65666947595571E-7	DEFECT
// three args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999984221647993	WITHOUT_CLASSIFICATION	1.5778352007720489E-6	DEFECT
// load target for invocations	WITHOUT_CLASSIFICATION	0.9999994338982315	WITHOUT_CLASSIFICATION	5.661017683395076E-7	DEFECT
// load receiver as original type for virtual invocation	WITHOUT_CLASSIFICATION	0.9999986780925313	WITHOUT_CLASSIFICATION	1.3219074686743557E-6	DEFECT
// static invocation	WITHOUT_CLASSIFICATION	0.9999974889745268	WITHOUT_CLASSIFICATION	2.5110254731772685E-6	DEFECT
// virtual invocation	WITHOUT_CLASSIFICATION	0.9999915482153908	WITHOUT_CLASSIFICATION	8.451784609196992E-6	DEFECT
// void return type, so we need to load a nil for returning below	WITHOUT_CLASSIFICATION	0.9999998410382763	WITHOUT_CLASSIFICATION	1.5896172369459538E-7	DEFECT
// normal finally and exit	WITHOUT_CLASSIFICATION	0.9999953318884718	WITHOUT_CLASSIFICATION	4.6681115282344855E-6	DEFECT
// promise to implement one to N	WITHOUT_CLASSIFICATION	0.9999947994466976	WITHOUT_CLASSIFICATION	5.2005533024841835E-6	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9999910247469329	WITHOUT_CLASSIFICATION	8.97525306715329E-6	DEFECT
// these are only needed if we have a non-noop call config	WITHOUT_CLASSIFICATION	0.9999997002407147	WITHOUT_CLASSIFICATION	2.997592852419028E-7	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999953357446908	WITHOUT_CLASSIFICATION	4.664255309181142E-6	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999953357446908	WITHOUT_CLASSIFICATION	4.664255309181142E-6	DEFECT
// singleton classes don't get their own visibility domain	WITHOUT_CLASSIFICATION	0.999999612789299	WITHOUT_CLASSIFICATION	3.872107008603727E-7	DEFECT
// For visibility we need real meta class and not anonymous one from class << self	WITHOUT_CLASSIFICATION	0.9999998042264334	WITHOUT_CLASSIFICATION	1.9577356658749586E-7	DEFECT
// SimpleInvocationMethod	WITHOUT_CLASSIFICATION	0.9999497947839175	WITHOUT_CLASSIFICATION	5.020521608242334E-5	DEFECT
// never reached	WITHOUT_CLASSIFICATION	0.9999998330326044	WITHOUT_CLASSIFICATION	1.6696739563779277E-7	DEFECT
// promise to implement N with block	WITHOUT_CLASSIFICATION	0.9999950180990318	WITHOUT_CLASSIFICATION	4.981900968171201E-6	DEFECT
// promise to implement zero to N with block	WITHOUT_CLASSIFICATION	0.9999937275572338	WITHOUT_CLASSIFICATION	6.272442766186669E-6	DEFECT
// promise to implement one to N with block	WITHOUT_CLASSIFICATION	0.9999963398776762	WITHOUT_CLASSIFICATION	3.6601223238273505E-6	DEFECT
// promise to implement two to N with block	WITHOUT_CLASSIFICATION	0.9999959299465806	WITHOUT_CLASSIFICATION	4.070053419463209E-6	DEFECT
// promise to implement zero to three with block	WITHOUT_CLASSIFICATION	0.999986666439419	WITHOUT_CLASSIFICATION	1.3333560580978888E-5	DEFECT
// promise to implement one to three with block	WITHOUT_CLASSIFICATION	0.9999930613200304	WITHOUT_CLASSIFICATION	6.938679969638874E-6	DEFECT
// promise to implement two to three with block	WITHOUT_CLASSIFICATION	0.9999913481174069	WITHOUT_CLASSIFICATION	8.651882593160171E-6	DEFECT
// promise to implement three with block	WITHOUT_CLASSIFICATION	0.999984775869765	WITHOUT_CLASSIFICATION	1.5224130234920249E-5	DEFECT
// promise to implement N	WITHOUT_CLASSIFICATION	0.9999882310781757	WITHOUT_CLASSIFICATION	1.176892182427155E-5	DEFECT
// DumpingInvocationMethodFactory	WITHOUT_CLASSIFICATION	0.9999903634993486	WITHOUT_CLASSIFICATION	9.636500651457055E-6	DEFECT
// We promote our box to being its own box since we're changing // visibilities, and need it to be reflected on this method object // independent of any other sharing the box.	WITHOUT_CLASSIFICATION	0.9999999932870748	WITHOUT_CLASSIFICATION	6.7129252600031196E-9	DEFECT
// Normally we could leave these to fall back on the superclass, but // since it dispatches through the [] version below, which may // dispatch through the []+block version, we can save it a couple hops // by overriding these here.	WITHOUT_CLASSIFICATION	0.9999985868845805	WITHOUT_CLASSIFICATION	1.4131154194106583E-6	DEFECT
// promise to implement two to N	WITHOUT_CLASSIFICATION	0.9999954176190551	WITHOUT_CLASSIFICATION	4.582380944833172E-6	DEFECT
// promise to implement three to N	WITHOUT_CLASSIFICATION	0.9999879131600923	WITHOUT_CLASSIFICATION	1.2086839907695152E-5	DEFECT
// promise to implement zero to three	WITHOUT_CLASSIFICATION	0.9999863282235207	WITHOUT_CLASSIFICATION	1.3671776479205733E-5	DEFECT
// promise to implement one to three	WITHOUT_CLASSIFICATION	0.9999928853139852	WITHOUT_CLASSIFICATION	7.114686014865346E-6	DEFECT
// promise to implement two to three	WITHOUT_CLASSIFICATION	0.9999929704590961	WITHOUT_CLASSIFICATION	7.029540904039739E-6	DEFECT
// promise to implement three	WITHOUT_CLASSIFICATION	0.999974046454022	WITHOUT_CLASSIFICATION	2.5953545977954867E-5	DEFECT
// all other arities use "n" dispatch path	WITHOUT_CLASSIFICATION	0.9999999651070942	WITHOUT_CLASSIFICATION	3.489290585942282E-8	DEFECT
// load up object and add a few useful methods	WITHOUT_CLASSIFICATION	0.9999997308645358	WITHOUT_CLASSIFICATION	2.6913546423332173E-7	DEFECT
// open up the 'to_java' and 'as' coercion methods on Ruby Objects, via Kernel	WITHOUT_CLASSIFICATION	0.9999975317850248	WITHOUT_CLASSIFICATION	2.46821497516883E-6	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.999999335991087	WITHOUT_CLASSIFICATION	6.640089129293394E-7	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9999999562835232	WITHOUT_CLASSIFICATION	4.371647670711655E-8	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999993016256725	WITHOUT_CLASSIFICATION	6.983743273809525E-7	DEFECT
// wrap self and store the wrapper	WITHOUT_CLASSIFICATION	0.9999999072732441	WITHOUT_CLASSIFICATION	9.272675584652517E-8	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999996435492454	WITHOUT_CLASSIFICATION	3.564507545916661E-7	DEFECT
// start setup method	WITHOUT_CLASSIFICATION	0.9999818529911102	WITHOUT_CLASSIFICATION	1.8147008889786325E-5	DEFECT
// set RubyClass	WITHOUT_CLASSIFICATION	0.9999998633990537	WITHOUT_CLASSIFICATION	1.3660094632847835E-7	DEFECT
// set Ruby	WITHOUT_CLASSIFICATION	0.9999991395952799	WITHOUT_CLASSIFICATION	8.604047202470671E-7	DEFECT
// all methods dispatch to the simple version by default, which is method_missing normally	WITHOUT_CLASSIFICATION	0.9999967484984718	WITHOUT_CLASSIFICATION	3.251501528291684E-6	DEFECT
// try specific name first, falling back on simple name	WITHOUT_CLASSIFICATION	0.9999965590632112	WITHOUT_CLASSIFICATION	3.440936788735169E-6	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999937321098962	WITHOUT_CLASSIFICATION	6.267890103718499E-6	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999998590388529	WITHOUT_CLASSIFICATION	1.4096114711922758E-7	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.999999335991087	WITHOUT_CLASSIFICATION	6.640089129293394E-7	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9999999562835232	WITHOUT_CLASSIFICATION	4.371647670711655E-8	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999993016256725	WITHOUT_CLASSIFICATION	6.983743273809525E-7	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999996435492454	WITHOUT_CLASSIFICATION	3.564507545916661E-7	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9999963909577841	WITHOUT_CLASSIFICATION	3.609042215843344E-6	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9999999091514022	WITHOUT_CLASSIFICATION	9.084859772686833E-8	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999904320945129	WITHOUT_CLASSIFICATION	9.567905487217016E-6	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.999995335684547	WITHOUT_CLASSIFICATION	4.664315453087358E-6	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9998616637437121	WITHOUT_CLASSIFICATION	1.3833625628778098E-4	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999882690310904	WITHOUT_CLASSIFICATION	1.1730968909493718E-5	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999949649555483	WITHOUT_CLASSIFICATION	5.035044451735056E-6	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999999151141052	WITHOUT_CLASSIFICATION	8.488589483893147E-8	DEFECT
// create static init, for a monitor object	WITHOUT_CLASSIFICATION	0.9999998699396025	WITHOUT_CLASSIFICATION	1.3006039738503248E-7	DEFECT
// store the wrapper	WITHOUT_CLASSIFICATION	0.9999993751379032	WITHOUT_CLASSIFICATION	6.248620968827662E-7	DEFECT
// prepare temp locals	WITHOUT_CLASSIFICATION	0.9999970355727094	WITHOUT_CLASSIFICATION	2.9644272906778784E-6	DEFECT
// Try to look up field for simple name // get field; if nonnull, go straight to dispatch	WITHOUT_CLASSIFICATION	0.9999998982682583	WITHOUT_CLASSIFICATION	1.0173174170077508E-7	DEFECT
// field is null, lock class and try to populate	WITHOUT_CLASSIFICATION	0.9999981572340557	WITHOUT_CLASSIFICATION	1.8427659443564711E-6	DEFECT
// try/finally block to ensure unlock	WITHOUT_CLASSIFICATION	0.9999991118384436	WITHOUT_CLASSIFICATION	8.881615564614319E-7	DEFECT
// store it	WITHOUT_CLASSIFICATION	0.9999987418799293	WITHOUT_CLASSIFICATION	1.25812007066768E-6	DEFECT
// end of try block	WITHOUT_CLASSIFICATION	0.9999989368171852	WITHOUT_CLASSIFICATION	1.0631828146998997E-6	DEFECT
// finally block to release monitor	WITHOUT_CLASSIFICATION	0.9999994885928173	WITHOUT_CLASSIFICATION	5.114071827064334E-7	DEFECT
// exception handling for monitor release	WITHOUT_CLASSIFICATION	0.9999999355996085	WITHOUT_CLASSIFICATION	6.440039156133507E-8	DEFECT
// re-get, re-check method; if not null now, go to dispatch	WITHOUT_CLASSIFICATION	0.9999980282238324	WITHOUT_CLASSIFICATION	1.9717761674855303E-6	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999998590388529	WITHOUT_CLASSIFICATION	1.4096114711922758E-7	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9999999091514022	WITHOUT_CLASSIFICATION	9.084859772686833E-8	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999904320945129	WITHOUT_CLASSIFICATION	9.567905487217016E-6	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9998616637437121	WITHOUT_CLASSIFICATION	1.3833625628778098E-4	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999882690310904	WITHOUT_CLASSIFICATION	1.1730968909493718E-5	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999949649555483	WITHOUT_CLASSIFICATION	5.035044451735056E-6	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999999151141052	WITHOUT_CLASSIFICATION	8.488589483893147E-8	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999999840477429	WITHOUT_CLASSIFICATION	1.5952257019143354E-8	DEFECT
// method still not available, call method_missing	WITHOUT_CLASSIFICATION	0.9999903096778239	WITHOUT_CLASSIFICATION	9.690322176188216E-6	DEFECT
// perform the dispatch	WITHOUT_CLASSIFICATION	0.9999957126727641	WITHOUT_CLASSIFICATION	4.287327235802667E-6	DEFECT
// try to load the specified name; only if that fails, try to define the class	WITHOUT_CLASSIFICATION	0.9999999723921237	WITHOUT_CLASSIFICATION	2.7607876347114924E-8	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999999130861728	WITHOUT_CLASSIFICATION	8.691382730282885E-8	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999999130861728	WITHOUT_CLASSIFICATION	8.691382730282885E-8	DEFECT
// setup the class	WITHOUT_CLASSIFICATION	0.9999999268927613	WITHOUT_CLASSIFICATION	7.310723871328684E-8	DEFECT
// now, create a method_added that can replace the DynamicMethod fields as they're redefined	WITHOUT_CLASSIFICATION	0.9999995121574726	WITHOUT_CLASSIFICATION	4.878425274378654E-7	DEFECT
// do nothing, it's a non-impl method	WITHOUT_CLASSIFICATION	0.9999800191325325	WITHOUT_CLASSIFICATION	1.998086746739381E-5	DEFECT
// probably a primitive	WITHOUT_CLASSIFICATION	0.9999915731558306	WITHOUT_CLASSIFICATION	8.426844169394815E-6	DEFECT
// interfaces are handled as modules	WITHOUT_CLASSIFICATION	0.9999992354039485	WITHOUT_CLASSIFICATION	7.645960515904143E-7	DEFECT
// construct the mirror class and parent classes	WITHOUT_CLASSIFICATION	0.9999996449047966	WITHOUT_CLASSIFICATION	3.5509520326719804E-7	DEFECT
// set the full name	WITHOUT_CLASSIFICATION	0.9999993185007932	WITHOUT_CLASSIFICATION	6.814992068144025E-7	DEFECT
// include all interfaces	WITHOUT_CLASSIFICATION	0.9999972053605908	WITHOUT_CLASSIFICATION	2.794639409172966E-6	DEFECT
// if it's an array, only add methods for aref, aset, and length	WITHOUT_CLASSIFICATION	0.9999984806567125	WITHOUT_CLASSIFICATION	1.5193432875086613E-6	DEFECT
// add array construction methods	WITHOUT_CLASSIFICATION	0.9999959167624698	WITHOUT_CLASSIFICATION	4.083237530168088E-6	DEFECT
// add all public constructors (note: getConstructors only returns public ones)	WITHOUT_CLASSIFICATION	0.9999962747152116	WITHOUT_CLASSIFICATION	3.7252847885675553E-6	DEFECT
// add all instance and static methods	WITHOUT_CLASSIFICATION	0.9999940046287938	WITHOUT_CLASSIFICATION	5.995371206117573E-6	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9999829048544212	WITHOUT_CLASSIFICATION	1.7095145578861034E-5	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999961875107233	WITHOUT_CLASSIFICATION	3.8124892766836543E-6	DEFECT
// only include static methods if specified	WITHOUT_CLASSIFICATION	0.9999989293710929	WITHOUT_CLASSIFICATION	1.0706289070884945E-6	DEFECT
// add a few type-specific special methods	WITHOUT_CLASSIFICATION	0.9999967511342458	WITHOUT_CLASSIFICATION	3.2488657541978034E-6	DEFECT
// add all static variables	WITHOUT_CLASSIFICATION	0.9999994035962008	WITHOUT_CLASSIFICATION	5.964037991869843E-7	DEFECT
// only public static fields that are valid constants	WITHOUT_CLASSIFICATION	0.999998282710976	WITHOUT_CLASSIFICATION	1.7172890239299924E-6	DEFECT
// looks like someone's trying to raise a Java exception. Let them.	WITHOUT_CLASSIFICATION	0.9999908171832006	WITHOUT_CLASSIFICATION	9.182816799412148E-6	DEFECT
// NOTE: The five match methods are arity-split to avoid the cost of boxing arguments // when there's already a cached match. Do not condense them into a single // method.	WITHOUT_CLASSIFICATION	0.9999990540373801	WITHOUT_CLASSIFICATION	9.459626199342211E-7	DEFECT
// TODO: This is where we would want to do precision checks to see // if it's non-destructive to coerce a given type into the target // integral primitive	WITHOUT_CLASSIFICATION	0.9943394680788668	WITHOUT_CLASSIFICATION	0.005660531921133211	DEFECT
// long first because it's what Fixnum claims to be	WITHOUT_CLASSIFICATION	0.9999998652523551	WITHOUT_CLASSIFICATION	1.3474764497019457E-7	DEFECT
// double first because it's what float claims to be	WITHOUT_CLASSIFICATION	0.9999995499098584	WITHOUT_CLASSIFICATION	4.5009014158163366E-7	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.8107916349200498	WITHOUT_CLASSIFICATION	0.18920836507995023	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999988429866117	WITHOUT_CLASSIFICATION	1.1570133883675547E-6	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999890461344771	WITHOUT_CLASSIFICATION	1.0953865522818782E-5	DEFECT
// we set all Java methods to optional, since many/most have overloads	WITHOUT_CLASSIFICATION	0.9999884739692115	WITHOUT_CLASSIFICATION	1.152603078855417E-5	DEFECT
// If we hold a Java object, we need a java_class accessor	WITHOUT_CLASSIFICATION	0.9999990326183508	WITHOUT_CLASSIFICATION	9.673816492729323E-7	DEFECT
// line 326	WITHOUT_CLASSIFICATION	0.9999926117938811	WITHOUT_CLASSIFICATION	7.388206118823552E-6	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999988429866117	WITHOUT_CLASSIFICATION	1.1570133883675547E-6	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999890461344771	WITHOUT_CLASSIFICATION	1.0953865522818782E-5	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999961875107233	WITHOUT_CLASSIFICATION	3.8124892766836543E-6	DEFECT
// construct new array proxy (ArrayJavaProxy)	WITHOUT_CLASSIFICATION	0.9999979053015348	WITHOUT_CLASSIFICATION	2.094698465282354E-6	DEFECT
// Get map of all fields we want to define.  	WITHOUT_CLASSIFICATION	0.9999988415749022	WITHOUT_CLASSIFICATION	1.1584250978532882E-6	DEFECT
// Look through all mappings to find a match entry for this field	WITHOUT_CLASSIFICATION	0.9999989154364874	WITHOUT_CLASSIFICATION	1.0845635124923018E-6	DEFECT
// Hit a non-java proxy class (included Modules can be a cause of this...skip)	WITHOUT_CLASSIFICATION	0.9999995955458792	WITHOUT_CLASSIFICATION	4.044541207011842E-7	DEFECT
// We could not find all of them print out first one (we could print them all?)	WITHOUT_CLASSIFICATION	0.9999997253730009	WITHOUT_CLASSIFICATION	2.746269992238787E-7	DEFECT
// dummy bodies for default impls	WITHOUT_CLASSIFICATION	0.9999985714613936	WITHOUT_CLASSIFICATION	1.4285386064125167E-6	DEFECT
// initialize this if it hasn't been	WITHOUT_CLASSIFICATION	0.9997370329985276	WITHOUT_CLASSIFICATION	2.6296700147242E-4	DEFECT
// initialize these if they haven't been	WITHOUT_CLASSIFICATION	0.9999863889855484	WITHOUT_CLASSIFICATION	1.3611014451591967E-5	DEFECT
// not allowed for original (non-generated) Java classes // note: not allowing for any previously created class right now; // this restriction might be loosened later for generated classes	WITHOUT_CLASSIFICATION	0.9999840612896045	WITHOUT_CLASSIFICATION	1.5938710395444095E-5	DEFECT
// setup new, etc unless this is a ConcreteJavaProxy subclass	WITHOUT_CLASSIFICATION	0.9999972610504917	WITHOUT_CLASSIFICATION	2.7389495082782056E-6	DEFECT
// First we make modifications to the class, to adapt it to being // both a Ruby class and a proxy for a Java type	WITHOUT_CLASSIFICATION	0.9999955558304032	WITHOUT_CLASSIFICATION	4.444169596771602E-6	DEFECT
// list of interfaces we implement	WITHOUT_CLASSIFICATION	0.9999983429202914	WITHOUT_CLASSIFICATION	1.6570797086131018E-6	DEFECT
// We capture the original "new" and make it private	WITHOUT_CLASSIFICATION	0.9999999537505526	WITHOUT_CLASSIFICATION	4.624944749146049E-8	DEFECT
// The replacement "new" allocates and inits the Ruby object as before, but // also instantiates our proxified Java object by calling __jcreate!	WITHOUT_CLASSIFICATION	0.9999994230239231	WITHOUT_CLASSIFICATION	5.76976076856006E-7	DEFECT
// Next, we define a few private methods that we'll use to manipulate // the Java object contained within this Ruby object	WITHOUT_CLASSIFICATION	0.9999960635658087	WITHOUT_CLASSIFICATION	3.9364341912654594E-6	DEFECT
// jcreate instantiates the proxy object which implements all interfaces // and which is wrapped and implemented by this object	WITHOUT_CLASSIFICATION	0.999982863948829	WITHOUT_CLASSIFICATION	1.7136051170965855E-5	DEFECT
// Now we add an "implement" and "implement_all" methods to the class	WITHOUT_CLASSIFICATION	0.9999995507796612	WITHOUT_CLASSIFICATION	4.4922033883277516E-7	DEFECT
// implement all forces implementation of all interfaces we intend // for this class to implement	WITHOUT_CLASSIFICATION	0.9999972300887726	WITHOUT_CLASSIFICATION	2.7699112273401148E-6	DEFECT
// we've already done the above priming logic, just add another interface // to the list of intentions unless we're past the point of no return or // already intend to implement the given interface	WITHOUT_CLASSIFICATION	0.9999999259665704	WITHOUT_CLASSIFICATION	7.403342959100132E-8	DEFECT
// walk all superclasses aggregating interfaces	WITHOUT_CLASSIFICATION	0.9999994608225785	WITHOUT_CLASSIFICATION	5.391774214602957E-7	DEFECT
// construct the new interface impl and set it into the object	WITHOUT_CLASSIFICATION	0.9999999866110766	WITHOUT_CLASSIFICATION	1.338892354455904E-8	DEFECT
// assuming the user wants a collection of interfaces that can be // included together. make it so.	WITHOUT_CLASSIFICATION	0.9999999208437408	WITHOUT_CLASSIFICATION	7.91562592259573E-8	DEFECT
// not allowed for existing Java interface modules	WITHOUT_CLASSIFICATION	0.9999994683449668	WITHOUT_CLASSIFICATION	5.316550332511392E-7	DEFECT
// To turn a module into an "interface collection" we add a class instance // variable to hold the list of interfaces, and modify append_features // for this module to call append_features on each of those interfaces as // well	WITHOUT_CLASSIFICATION	0.9999998119683885	WITHOUT_CLASSIFICATION	1.880316113758248E-7	DEFECT
// already set up append_features, just add the interface if we haven't already	WITHOUT_CLASSIFICATION	0.9999998610826523	WITHOUT_CLASSIFICATION	1.3891734774140046E-7	DEFECT
// array-of-interface-type creation/identity	WITHOUT_CLASSIFICATION	0.9999998423276056	WITHOUT_CLASSIFICATION	1.576723944276218E-7	DEFECT
// keep this variant for kind_of? testing	WITHOUT_CLASSIFICATION	0.9999948129046109	WITHOUT_CLASSIFICATION	5.1870953891588025E-6	DEFECT
// array creation should use this variant	WITHOUT_CLASSIFICATION	0.9999862493218552	WITHOUT_CLASSIFICATION	1.3750678144743945E-5	DEFECT
// parent.setConstant(name, proxyClass); // where the name should come from ?	WITHOUT_CLASSIFICATION	0.9999963411081096	WITHOUT_CLASSIFICATION	3.658891890352381E-6	DEFECT
// including interface module so old-style interface "subclasses" will // respond correctly to #kind_of?, etc.	WITHOUT_CLASSIFICATION	0.9998667530889116	WITHOUT_CLASSIFICATION	1.3324691108840235E-4	DEFECT
// add reference to interface module	WITHOUT_CLASSIFICATION	0.9999991191464792	WITHOUT_CLASSIFICATION	8.808535208115943E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999961221594706	WITHOUT_CLASSIFICATION	3.877840529382561E-6	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999961221594706	WITHOUT_CLASSIFICATION	3.877840529382561E-6	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9999829048544212	WITHOUT_CLASSIFICATION	1.7095145578861034E-5	DEFECT
// same as argument_types, but matches name in java.lang.reflect.Constructor/Method	WITHOUT_CLASSIFICATION	0.9999957401875059	WITHOUT_CLASSIFICATION	4.259812494039028E-6	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999989102079252	WITHOUT_CLASSIFICATION	1.0897920747346348E-6	DEFECT
// weakly reserved names	WITHOUT_CLASSIFICATION	0.9999960936333321	WITHOUT_CLASSIFICATION	3.906366667898468E-6	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999970077981951	WITHOUT_CLASSIFICATION	2.9922018047676635E-6	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999970077981951	WITHOUT_CLASSIFICATION	2.9922018047676635E-6	DEFECT
// modified only by addMethod; no synchronization required	WITHOUT_CLASSIFICATION	0.9999986565094167	WITHOUT_CLASSIFICATION	1.343490583342735E-6	DEFECT
// if there's no constructor, we must prevent construction	WITHOUT_CLASSIFICATION	0.9999980485028175	WITHOUT_CLASSIFICATION	1.9514971825907653E-6	DEFECT
// caching constructors, as they're accessed for each new instance	WITHOUT_CLASSIFICATION	0.9999999017364165	WITHOUT_CLASSIFICATION	9.826358348004038E-8	DEFECT
// proxy module for interfaces	WITHOUT_CLASSIFICATION	0.9999986459873218	WITHOUT_CLASSIFICATION	1.3540126782253763E-6	DEFECT
// proxy class for concrete classes.  also used for // "concrete" interfaces, which is why we have two fields	WITHOUT_CLASSIFICATION	0.9999997602454634	WITHOUT_CLASSIFICATION	2.397545364592786E-7	DEFECT
// readable only by thread building proxy, so don't need to be // volatile. used to handle recursive calls to getProxyClass/Module // while proxy is being constructed (usually when a constant // defined by a class is of the same type as that class).	WITHOUT_CLASSIFICATION	0.9999985440877733	WITHOUT_CLASSIFICATION	1.4559122266149237E-6	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999981791881348	WITHOUT_CLASSIFICATION	1.8208118651250821E-6	DEFECT
// Now add all aliases for the static methods (fields) as appropriate	WITHOUT_CLASSIFICATION	0.9999920475174967	WITHOUT_CLASSIFICATION	7.952482503231828E-6	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9993128662265045	WITHOUT_CLASSIFICATION	6.871337734955116E-4	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999929956080836	WITHOUT_CLASSIFICATION	7.004391916406932E-6	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.999997602333438	WITHOUT_CLASSIFICATION	2.3976665618808915E-6	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999945229720633	WITHOUT_CLASSIFICATION	5.477027936765309E-6	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.999969754719853	WITHOUT_CLASSIFICATION	3.0245280146944917E-5	DEFECT
// Additionally add ?-postfixed aliases to any boolean methods and properties.	WITHOUT_CLASSIFICATION	0.999993865852454	WITHOUT_CLASSIFICATION	6.134147546093524E-6	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9999467063181111	WITHOUT_CLASSIFICATION	5.3293681888803234E-5	DEFECT
// something?	WITHOUT_CLASSIFICATION	0.9999849366327498	WITHOUT_CLASSIFICATION	1.5063367250198608E-5	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999997098069374	WITHOUT_CLASSIFICATION	2.901930626308624E-7	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999997098069374	WITHOUT_CLASSIFICATION	2.901930626308624E-7	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.999999236664802	WITHOUT_CLASSIFICATION	7.633351980455802E-7	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.999999236664802	WITHOUT_CLASSIFICATION	7.633351980455802E-7	DEFECT
// create constructorInstaller; if there are no constructors, it will disable construction	WITHOUT_CLASSIFICATION	0.9999999447056228	WITHOUT_CLASSIFICATION	5.529437712968968E-8	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9999961584598346	WITHOUT_CLASSIFICATION	3.8415401654320295E-6	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9999851178057276	WITHOUT_CLASSIFICATION	1.4882194272362436E-5	DEFECT
// now iterate over all installers and make sure they also have appropriate aliases	WITHOUT_CLASSIFICATION	0.9999990856067401	WITHOUT_CLASSIFICATION	9.143932598728366E-7	DEFECT
// old (quasi-deprecated) interface class	WITHOUT_CLASSIFICATION	0.9999998607160916	WITHOUT_CLASSIFICATION	1.392839084251732E-7	DEFECT
// 1.9 support for encodings	WITHOUT_CLASSIFICATION	0.9999995838313486	WITHOUT_CLASSIFICATION	4.161686514749148E-7	DEFECT
// double-check the cache now that we're synchronized	WITHOUT_CLASSIFICATION	0.9999870737458011	WITHOUT_CLASSIFICATION	1.2926254199002516E-5	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999945229720633	WITHOUT_CLASSIFICATION	5.477027936765309E-6	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.999969754719853	WITHOUT_CLASSIFICATION	3.0245280146944917E-5	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9999467063181111	WITHOUT_CLASSIFICATION	5.3293681888803234E-5	DEFECT
// one word type name that starts lower-case...it may be a primitive type	WITHOUT_CLASSIFICATION	0.9999976239445517	WITHOUT_CLASSIFICATION	2.3760554482709406E-6	DEFECT
// Java.getProxyClass deals with sync issues, so we won't duplicate the logic here	WITHOUT_CLASSIFICATION	0.9999993167404154	WITHOUT_CLASSIFICATION	6.832595845645094E-7	DEFECT
// note: intentionally returning the actual array returned from Java, rather // than wrapping it in a RubyArray. wave of the future, when java_class will // return the actual class, rather than a JavaClass wrapper.	WITHOUT_CLASSIFICATION	0.9999939191373448	WITHOUT_CLASSIFICATION	6.080862655148288E-6	DEFECT
// see note above re: return type	WITHOUT_CLASSIFICATION	0.9996624183460033	WITHOUT_CLASSIFICATION	3.3758165399675675E-4	DEFECT
// restrictive security policy; no matter, we only want public // classes anyway	WITHOUT_CLASSIFICATION	0.999996660151915	WITHOUT_CLASSIFICATION	3.339848085035008E-6	DEFECT
// very restrictive policy (disallows Member.PUBLIC) // we'd never actually get this far in that case	WITHOUT_CLASSIFICATION	0.9994442062246877	WITHOUT_CLASSIFICATION	5.557937753123493E-4	DEFECT
// one-dimensional array	WITHOUT_CLASSIFICATION	0.9999973042128321	WITHOUT_CLASSIFICATION	2.6957871679172404E-6	DEFECT
// n-dimensional array	WITHOUT_CLASSIFICATION	0.9999969130483415	WITHOUT_CLASSIFICATION	3.086951658496639E-6	DEFECT
// if it's an array of arrays, recurse with the component type	WITHOUT_CLASSIFICATION	0.9999997103546229	WITHOUT_CLASSIFICATION	2.8964537707368606E-7	DEFECT
// we all all superclasses, but avoid adding superclass methods with same name+signature as subclass methods // see JRUBY-3130	WITHOUT_CLASSIFICATION	0.9999996344302962	WITHOUT_CLASSIFICATION	3.655697038139491E-7	DEFECT
// Proc implementing an interface, pull in the catch-all code that lets the proc get invoked // no matter what method is called on the interface	WITHOUT_CLASSIFICATION	0.999979633226349	WITHOUT_CLASSIFICATION	2.0366773651044765E-5	DEFECT
// can't be converted any more, return it	WITHOUT_CLASSIFICATION	0.999970424398258	WITHOUT_CLASSIFICATION	2.957560174195084E-5	DEFECT
// getFooBar() => fooBar?, foo_bar?(*)	WITHOUT_CLASSIFICATION	0.9999909537025822	WITHOUT_CLASSIFICATION	9.046297417891516E-6	DEFECT
// If not a property, but is boolean add ?-postfixed aliases.	WITHOUT_CLASSIFICATION	0.9999347318837425	WITHOUT_CLASSIFICATION	6.526811625756266E-5	DEFECT
// many cases are ok to convert to float; if not one of these, error	WITHOUT_CLASSIFICATION	0.9999974359649588	WITHOUT_CLASSIFICATION	2.5640350411647787E-6	DEFECT
// for Object, default to natural wrapper type	WITHOUT_CLASSIFICATION	0.9999962616180801	WITHOUT_CLASSIFICATION	3.738381919981369E-6	DEFECT
// rubyObject is already of the required jruby class (or subclass)	WITHOUT_CLASSIFICATION	0.999998957978985	WITHOUT_CLASSIFICATION	1.0420210150455795E-6	DEFECT
// the converters handle not only primitive types but also their boxed versions, so we should check // if we have a converter before checking for isPrimitive()	WITHOUT_CLASSIFICATION	0.9999953490476943	WITHOUT_CLASSIFICATION	4.65095230569972E-6	DEFECT
// it's not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.999999797591845	WITHOUT_CLASSIFICATION	2.0240815496911305E-7	DEFECT
// we've found a Java type to which we've coerced the Ruby value, wrap it	WITHOUT_CLASSIFICATION	0.9999966184493471	WITHOUT_CLASSIFICATION	3.3815506528966997E-6	DEFECT
// set of utility methods for Java-based proxy objects	WITHOUT_CLASSIFICATION	0.9999998765269311	WITHOUT_CLASSIFICATION	1.234730689905725E-7	DEFECT
// the proxy (wrapper) type hierarchy	WITHOUT_CLASSIFICATION	0.9999962440590622	WITHOUT_CLASSIFICATION	3.7559409377519036E-6	DEFECT
//InterfaceJavaProxy.createInterfaceJavaProxy(context);	WITHOUT_CLASSIFICATION	0.9999956638681714	WITHOUT_CLASSIFICATION	4.336131828608938E-6	DEFECT
// also create the JavaProxy* classes	WITHOUT_CLASSIFICATION	0.9999998438203936	WITHOUT_CLASSIFICATION	1.5617960638353044E-7	DEFECT
// The template for interface modules	WITHOUT_CLASSIFICATION	0.9999994800805772	WITHOUT_CLASSIFICATION	5.199194227800336E-7	DEFECT
// Now attach Java-related extras to core classes	WITHOUT_CLASSIFICATION	0.9999999735372656	WITHOUT_CLASSIFICATION	2.646273441364223E-8	DEFECT
// add all name-to-class mappings	WITHOUT_CLASSIFICATION	0.9999997194579398	WITHOUT_CLASSIFICATION	2.805420601823821E-7	DEFECT
// add some base Java classes everyone will need	WITHOUT_CLASSIFICATION	0.999996327577644	WITHOUT_CLASSIFICATION	3.6724223559888496E-6	DEFECT
// finally, set JavaSupport.isEnabled to true	WITHOUT_CLASSIFICATION	0.9999997065640901	WITHOUT_CLASSIFICATION	2.9343590994836704E-7	DEFECT
// shouldn't happen, but if a superclass is specified, it's not ours	WITHOUT_CLASSIFICATION	0.9999993862338672	WITHOUT_CLASSIFICATION	6.137661329038571E-7	DEFECT
// include any interfaces we extend	WITHOUT_CLASSIFICATION	0.9999980811233523	WITHOUT_CLASSIFICATION	1.918876647654973E-6	DEFECT
// java.lang.Object is added at root of java proxy classes	WITHOUT_CLASSIFICATION	0.9999984950522064	WITHOUT_CLASSIFICATION	1.504947793613409E-6	DEFECT
// other java proxy classes added under their superclass' java proxy	WITHOUT_CLASSIFICATION	0.9999997414226962	WITHOUT_CLASSIFICATION	2.585773038682191E-7	DEFECT
// include interface modules into the proxy class	WITHOUT_CLASSIFICATION	0.9999999499356191	WITHOUT_CLASSIFICATION	5.006438092988075E-8	DEFECT
// JRUBY-2938 the proxy class might already exist	WITHOUT_CLASSIFICATION	0.9999988397512225	WITHOUT_CLASSIFICATION	1.1602487775369542E-6	DEFECT
// add java_method for unbound use	WITHOUT_CLASSIFICATION	0.9999993902935161	WITHOUT_CLASSIFICATION	6.097064838020491E-7	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999979447331893	WITHOUT_CLASSIFICATION	2.0552668106519093E-6	DEFECT
// we'll only map conventional class names to modules 	WITHOUT_CLASSIFICATION	0.999999952519608	WITHOUT_CLASSIFICATION	4.748039180162328E-8	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999958438785137	WITHOUT_CLASSIFICATION	4.156121486335011E-6	DEFECT
// Haven't found a class, continue on as though it were a package	WITHOUT_CLASSIFICATION	0.9999964236600101	WITHOUT_CLASSIFICATION	3.5763399898382955E-6	DEFECT
// upper case name, so most likely a class	WITHOUT_CLASSIFICATION	0.9999943711152411	WITHOUT_CLASSIFICATION	5.628884758960981E-6	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999989102079252	WITHOUT_CLASSIFICATION	1.0897920747346348E-6	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999979447331893	WITHOUT_CLASSIFICATION	2.0552668106519093E-6	DEFECT
// this is where we'll get connected when classes are opened using // package module syntax.	WITHOUT_CLASSIFICATION	0.999944201867888	WITHOUT_CLASSIFICATION	5.57981321119939E-5	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9999881488575693	WITHOUT_CLASSIFICATION	1.185114243062932E-5	DEFECT
// this covers primitives and (unlikely) lower-case class names	WITHOUT_CLASSIFICATION	0.9999977907911299	WITHOUT_CLASSIFICATION	2.209208869973566E-6	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.999995643320602	WITHOUT_CLASSIFICATION	4.3566793980413405E-6	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.999995643320602	WITHOUT_CLASSIFICATION	4.3566793980413405E-6	DEFECT
// Is there a supplied proc argument or do we assume a block was supplied	WITHOUT_CLASSIFICATION	0.999999938318097	WITHOUT_CLASSIFICATION	6.168190293781501E-8	DEFECT
// Create list of interfaces to proxy (and make sure they really are interfaces)	WITHOUT_CLASSIFICATION	0.9999999390204686	WITHOUT_CLASSIFICATION	6.097953139690826E-8	DEFECT
// hashcode is a combination of the interfaces and the Ruby class we're using // to implement them	WITHOUT_CLASSIFICATION	0.9999998332709037	WITHOUT_CLASSIFICATION	1.6672909635107069E-7	DEFECT
// if it's a singleton class and the real class is proc, we're doing closure conversion // so just use Proc's hashcode	WITHOUT_CLASSIFICATION	0.9999999883507233	WITHOUT_CLASSIFICATION	1.1649276582359794E-8	DEFECT
// normal new class implementing interfaces	WITHOUT_CLASSIFICATION	0.9999994956927449	WITHOUT_CLASSIFICATION	5.043072550263088E-7	DEFECT
/*         * Initialize some components.         */	WITHOUT_CLASSIFICATION	0.999995312580078	WITHOUT_CLASSIFICATION	4.6874199220930045E-6	DEFECT
// not synchronizing these methods, no harm if these values get set more // than once. // (also note that there's no chance of getting a partially initialized // class/module, as happens-before is guaranteed by volatile write/read // of constants table.)	WITHOUT_CLASSIFICATION	0.9999999222916071	WITHOUT_CLASSIFICATION	7.770839296937197E-8	DEFECT
// Java reflection does not allow retrieving constructors like methods	WITHOUT_CLASSIFICATION	0.9998416631955368	WITHOUT_CLASSIFICATION	1.5833680446326689E-4	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999981006950348	WITHOUT_CLASSIFICATION	1.8993049652108816E-6	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999981006950348	WITHOUT_CLASSIFICATION	1.8993049652108816E-6	DEFECT
// no matching ctor found	WITHOUT_CLASSIFICATION	0.9999994510497245	WITHOUT_CLASSIFICATION	5.489502755298761E-7	DEFECT
// Create Ruby proxies for any input arguments that are not primitives.	WITHOUT_CLASSIFICATION	0.9999995107280675	WITHOUT_CLASSIFICATION	4.892719325434599E-7	DEFECT
// prepare a faster handle if handles are enabled and the method and class are public	WITHOUT_CLASSIFICATION	0.9999996841731447	WITHOUT_CLASSIFICATION	3.1582685528591027E-7	DEFECT
// must be a public method	WITHOUT_CLASSIFICATION	0.9992281715210352	WITHOUT_CLASSIFICATION	7.718284789647388E-4	DEFECT
// must be a public class	WITHOUT_CLASSIFICATION	0.9999876612540831	WITHOUT_CLASSIFICATION	1.2338745916948498E-5	DEFECT
// must have been loaded from our known classloader hierarchy	WITHOUT_CLASSIFICATION	0.9999992763435314	WITHOUT_CLASSIFICATION	7.236564687404845E-7	DEFECT
// Special classes like Collections.EMPTY_LIST are inner classes that are private but  // implement public interfaces.  Their methods are all public methods for the public  // interface.  Let these public methods execute via setAccessible(true). 	WITHOUT_CLASSIFICATION	0.9998103444263967	WITHOUT_CLASSIFICATION	1.8965557360329951E-4	DEFECT
// search through all declared methods to find a closest match	WITHOUT_CLASSIFICATION	0.9999995641307026	WITHOUT_CLASSIFICATION	4.358692973361729E-7	DEFECT
// no matching method found	WITHOUT_CLASSIFICATION	0.9999940466392404	WITHOUT_CLASSIFICATION	5.953360759510097E-6	DEFECT
// this test really means, that this is a ruby-defined subclass of a java class	WITHOUT_CLASSIFICATION	0.9999990375756015	WITHOUT_CLASSIFICATION	9.624243984634406E-7	DEFECT
/*         * First we need to register the JRuby engine.         */	WITHOUT_CLASSIFICATION	0.9999957688915099	WITHOUT_CLASSIFICATION	4.231108490206829E-6	DEFECT
/*         * Now we create a new BSFManager.         */	WITHOUT_CLASSIFICATION	0.9999850210060276	WITHOUT_CLASSIFICATION	1.4978993972414482E-5	DEFECT
/*         * Initialize a simple Frame.          */	WITHOUT_CLASSIFICATION	0.9999881192258103	WITHOUT_CLASSIFICATION	1.1880774189694969E-5	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999757265138411	WITHOUT_CLASSIFICATION	2.4273486158843525E-5	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999757265138411	WITHOUT_CLASSIFICATION	2.4273486158843525E-5	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.99999303895152	WITHOUT_CLASSIFICATION	6.9610484799630385E-6	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999999151141052	WITHOUT_CLASSIFICATION	8.488589483893147E-8	DEFECT
// // this test really means, that this is a ruby-defined subclass of a java class //	WITHOUT_CLASSIFICATION	0.9999996686511625	WITHOUT_CLASSIFICATION	3.3134883746491714E-7	DEFECT
// for our purposes, Accessibles are also Members, and vice-versa, // so we'll include Member methods here.	WITHOUT_CLASSIFICATION	0.9999995034083727	WITHOUT_CLASSIFICATION	4.965916272408509E-7	DEFECT
/*             * Declare those components as beans in BSF. Then it will be             * possible to access those components in Ruby as global             * variables ($frame, $menubar, ...)             */	WITHOUT_CLASSIFICATION	0.999996075018924	WITHOUT_CLASSIFICATION	3.924981076073015E-6	DEFECT
/*              * Execute a Ruby script (add the menubar to the frame).             */	WITHOUT_CLASSIFICATION	0.9999998153914862	WITHOUT_CLASSIFICATION	1.846085136731183E-7	DEFECT
/*                     * Execute Ruby statements.                     */	WITHOUT_CLASSIFICATION	0.9999994179916045	WITHOUT_CLASSIFICATION	5.820083954275949E-7	DEFECT
/*                     * Evaluates a Ruby expression and display the result.                     */	WITHOUT_CLASSIFICATION	0.9999888996599996	WITHOUT_CLASSIFICATION	1.1100340000403319E-5	DEFECT
// Populate values for the parameter names	WITHOUT_CLASSIFICATION	0.9999994434197358	WITHOUT_CLASSIFICATION	5.565802642790571E-7	DEFECT
/* package scope */	WITHOUT_CLASSIFICATION	0.9999942031236868	WITHOUT_CLASSIFICATION	5.79687631318737E-6	DEFECT
// This point is only reached if there was an exception handler // installed.	WITHOUT_CLASSIFICATION	0.9999987908963889	WITHOUT_CLASSIFICATION	1.2091036111048814E-6	DEFECT
// // Ruby-level methods //	WITHOUT_CLASSIFICATION	0.9999973386623341	WITHOUT_CLASSIFICATION	2.6613376659677593E-6	DEFECT
// need names ordered for key generation later	WITHOUT_CLASSIFICATION	0.9999987069335833	WITHOUT_CLASSIFICATION	1.2930664167634241E-6	DEFECT
// we only collect methods and interfaces for  // user-defined proxy classes.	WITHOUT_CLASSIFICATION	0.9999955220770136	WITHOUT_CLASSIFICATION	4.477922986414505E-6	DEFECT
// get JavaClass if this is the new proxy class; verify it // matches if this is a superclass proxy.	WITHOUT_CLASSIFICATION	0.9999983899732592	WITHOUT_CLASSIFICATION	1.610026740894381E-6	DEFECT
// get any included interfaces	WITHOUT_CLASSIFICATION	0.9999995762631295	WITHOUT_CLASSIFICATION	4.23736870412314E-7	DEFECT
// lock in the overridden methods for the new class, and any as-yet // uninstantiated ancestor class.	WITHOUT_CLASSIFICATION	0.9999995613258745	WITHOUT_CLASSIFICATION	4.3867412549108215E-7	DEFECT
// statically initialized below	WITHOUT_CLASSIFICATION	0.9999975271655026	WITHOUT_CLASSIFICATION	2.4728344974073648E-6	DEFECT
// finish class initializer	WITHOUT_CLASSIFICATION	0.9999981429841511	WITHOUT_CLASSIFICATION	1.857015848896721E-6	DEFECT
// trigger class initialization for the class	WITHOUT_CLASSIFICATION	0.9999998464812719	WITHOUT_CLASSIFICATION	1.5351872801691449E-7	DEFECT
// should not happen!	WITHOUT_CLASSIFICATION	0.9999536046913493	WITHOUT_CLASSIFICATION	4.6395308650691647E-5	DEFECT
// start class	WITHOUT_CLASSIFICATION	0.9999998883359634	WITHOUT_CLASSIFICATION	1.1166403649924867E-7	DEFECT
// make getter for handler	WITHOUT_CLASSIFICATION	0.9999988866969791	WITHOUT_CLASSIFICATION	1.1133030208532567E-6	DEFECT
// make getter for proxy class	WITHOUT_CLASSIFICATION	0.9999992842195301	WITHOUT_CLASSIFICATION	7.157804699527981E-7	DEFECT
// add (potentially) overridden names to the key. // TODO: see note above re: optimizations	WITHOUT_CLASSIFICATION	0.7427913407567144	WITHOUT_CLASSIFICATION	0.2572086592432857	DEFECT
// We generate all constructors and let some fail during invocation later	WITHOUT_CLASSIFICATION	0.9996699993800893	WITHOUT_CLASSIFICATION	3.300006199107713E-4	DEFECT
// create static private method field	WITHOUT_CLASSIFICATION	0.999998734467376	WITHOUT_CLASSIFICATION	1.2655326240339918E-6	DEFECT
// load static empty array	WITHOUT_CLASSIFICATION	0.9999991370129702	WITHOUT_CLASSIFICATION	8.629870298251295E-7	DEFECT
// box arguments	WITHOUT_CLASSIFICATION	0.9999995449118994	WITHOUT_CLASSIFICATION	4.550881006126849E-7	DEFECT
// this is a simple rethrow handler	WITHOUT_CLASSIFICATION	0.9999827634724787	WITHOUT_CLASSIFICATION	1.7236527521259834E-5	DEFECT
// // construct the super-proxy method //	WITHOUT_CLASSIFICATION	0.9999964368581953	WITHOUT_CLASSIFICATION	3.563141804844167E-6	DEFECT
// do a void return	WITHOUT_CLASSIFICATION	0.999997341538354	WITHOUT_CLASSIFICATION	2.6584616459503233E-6	DEFECT
// // utility methods //	WITHOUT_CLASSIFICATION	0.9999961209838724	WITHOUT_CLASSIFICATION	3.879016127635812E-6	DEFECT
// Is there a supplied proc argument or do we assume a block was // supplied	WITHOUT_CLASSIFICATION	0.9999999393601043	WITHOUT_CLASSIFICATION	6.063989573668072E-8	DEFECT
// store call information so method_missing impl can use it	WITHOUT_CLASSIFICATION	0.9999919196567456	WITHOUT_CLASSIFICATION	8.080343254452067E-6	DEFECT
// use the same logic as in EvaluationState	WITHOUT_CLASSIFICATION	0.9999973494423026	WITHOUT_CLASSIFICATION	2.6505576973933763E-6	DEFECT
// no opt, no rest, exact match	WITHOUT_CLASSIFICATION	0.9999999127618572	WITHOUT_CLASSIFICATION	8.723814283346191E-8	DEFECT
// only rest, must be at least required	WITHOUT_CLASSIFICATION	0.9999848878716463	WITHOUT_CLASSIFICATION	1.5112128353698408E-5	DEFECT
// opt but no rest, must be at least required and no more than required + opt	WITHOUT_CLASSIFICATION	0.9999963719155448	WITHOUT_CLASSIFICATION	3.628084455203649E-6	DEFECT
// opt and rest, must be at least required	WITHOUT_CLASSIFICATION	0.9999962577573447	WITHOUT_CLASSIFICATION	3.7422426554333088E-6	DEFECT
// No block from a nil proc	WITHOUT_CLASSIFICATION	0.9999951317653535	WITHOUT_CLASSIFICATION	4.868234646487583E-6	DEFECT
// If not already a proc then we should try and make it one.	WITHOUT_CLASSIFICATION	0.9999856538505991	WITHOUT_CLASSIFICATION	1.4346149400866242E-5	DEFECT
// The current block is already associated with proc.  No need to create a new one	WITHOUT_CLASSIFICATION	0.9999984425224542	WITHOUT_CLASSIFICATION	1.5574775458817457E-6	DEFECT
// Has the method that is calling super received a block argument	WITHOUT_CLASSIFICATION	0.9999808086806719	WITHOUT_CLASSIFICATION	1.919131932813572E-5	DEFECT
/* NUL */	WITHOUT_CLASSIFICATION	0.9999891853668798	WITHOUT_CLASSIFICATION	1.081463312032863E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999968850723863	WITHOUT_CLASSIFICATION	3.1149276138415354E-6	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999988755446134	WITHOUT_CLASSIFICATION	1.1244553866002833E-6	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999999991979982	WITHOUT_CLASSIFICATION	8.020018128597724E-10	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999996095835134	WITHOUT_CLASSIFICATION	3.9041648656926335E-7	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999988429866117	WITHOUT_CLASSIFICATION	1.1570133883675547E-6	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999988429866117	WITHOUT_CLASSIFICATION	1.1570133883675547E-6	DEFECT
// classes are directly in the hierarchy, so no special logic is necessary for implementer	WITHOUT_CLASSIFICATION	0.9999998739708783	WITHOUT_CLASSIFICATION	1.2602912160778615E-7	DEFECT
// must be power of 2 // must be power of 2	WITHOUT_CLASSIFICATION	0.999994798631532	WITHOUT_CLASSIFICATION	5.201368468024069E-6	DEFECT
// Find power-of-two sizes best matching arguments	WITHOUT_CLASSIFICATION	0.9999997875287443	WITHOUT_CLASSIFICATION	2.1247125568946425E-7	DEFECT
// note segmentShift differs from ConcurrentHashMap's calculation due to // issues with System.identityHashCode (upper n bits always 0, at least  // under Java 1.6 / WinXP)	WITHOUT_CLASSIFICATION	0.9996559600537777	WITHOUT_CLASSIFICATION	3.440399462223522E-4	DEFECT
//      System.err.println("***ObjectProxyCache " + id + " started at "+ new java.util.Date());	WITHOUT_CLASSIFICATION	0.9999999096808625	WITHOUT_CLASSIFICATION	9.031913743884168E-8	DEFECT
//    protected void finalize() throws Throwable { //        System.err.println("***ObjectProxyCache " + id + " finalized at "+ new java.util.Date()); //    }	WITHOUT_CLASSIFICATION	0.999984002372593	WITHOUT_CLASSIFICATION	1.5997627407077673E-5	DEFECT
// EntryRefs include hash with key to facilitate lookup by Segment#expunge // after ref is removed from ReferenceQueue	WITHOUT_CLASSIFICATION	0.9999988668798389	WITHOUT_CLASSIFICATION	1.1331201612140899E-6	DEFECT
// Unlike WeakHashMap, our Entry does not subclass WeakReference, but rather // makes it a final field.  The theory is that doing so should force a happens-before // relationship WRT the WeakReference constructor, guaranteeing that the key will be // visibile to other threads (unless it's been GC'ed).  See JLS 17.5 (final fields) and // 17.4.5 (Happens-before order) to confirm or refute my reasoning here.	WITHOUT_CLASSIFICATION	0.9998663139369796	WITHOUT_CLASSIFICATION	1.3368606302046961E-4	DEFECT
// references to the Java object and its proxy will either both be // weak or both be soft, since the proxy contains a strong reference // to the object, so it wouldn't make sense for the reference types // to differ.	WITHOUT_CLASSIFICATION	0.9999993464393561	WITHOUT_CLASSIFICATION	6.53560644035836E-7	DEFECT
// ctor used by remove/rehash	WITHOUT_CLASSIFICATION	0.9999998583231412	WITHOUT_CLASSIFICATION	1.416768587729808E-7	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.999937901200905	WITHOUT_CLASSIFICATION	6.209879909501375E-5	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.999937901200905	WITHOUT_CLASSIFICATION	6.209879909501375E-5	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.999937901200905	WITHOUT_CLASSIFICATION	6.209879909501375E-5	DEFECT
// note that we'll potentially see the refs for both the java object and // proxy -- whichever we see first will cause the entry to be removed; // the other will not match an entry and will be ignored.	WITHOUT_CLASSIFICATION	0.9999999958579963	WITHOUT_CLASSIFICATION	4.142003674362361E-9	DEFECT
// temp method to verify tableSize value // must be called under lock	WITHOUT_CLASSIFICATION	0.999953428411259	WITHOUT_CLASSIFICATION	4.657158874096751E-5	DEFECT
// Single node in list	WITHOUT_CLASSIFICATION	0.9999293523545348	WITHOUT_CLASSIFICATION	7.064764546522066E-5	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9999976092032	WITHOUT_CLASSIFICATION	2.3907967999508965E-6	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9999976092032	WITHOUT_CLASSIFICATION	2.3907967999508965E-6	DEFECT
// entry exists, proxy has been gc'ed. replace entry.	WITHOUT_CLASSIFICATION	0.9999998418219205	WITHOUT_CLASSIFICATION	1.581780796412601E-7	DEFECT
// Where we get new positions from.	WITHOUT_CLASSIFICATION	0.9999961541272275	WITHOUT_CLASSIFICATION	3.845872772501611E-6	DEFECT
// Start of string ([, (, {, <, ', ", \n) 	WITHOUT_CLASSIFICATION	0.9999988163401118	WITHOUT_CLASSIFICATION	1.1836598881397155E-6	DEFECT
// Number of newlines read from the reader	WITHOUT_CLASSIFICATION	0.9999999328155484	WITHOUT_CLASSIFICATION	6.718445154463075E-8	DEFECT
// How many bytes into the source are we?	WITHOUT_CLASSIFICATION	0.9999989389436272	WITHOUT_CLASSIFICATION	1.0610563727453642E-6	DEFECT
// For 'list' and only populated if list is not null.	WITHOUT_CLASSIFICATION	0.9999959029639803	WITHOUT_CLASSIFICATION	4.097036019777483E-6	DEFECT
// Last full line read.	WITHOUT_CLASSIFICATION	0.9999951668477737	WITHOUT_CLASSIFICATION	4.83315222629317E-6	DEFECT
// Save sourceLine for error reporting to display line where error occurred	WITHOUT_CLASSIFICATION	0.9999977661430006	WITHOUT_CLASSIFICATION	2.2338569993078756E-6	DEFECT
// Get rest of line. lineBuffer filled as side-effect...	WITHOUT_CLASSIFICATION	0.9999991905344147	WITHOUT_CLASSIFICATION	8.094655853272924E-7	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999997206668466	WITHOUT_CLASSIFICATION	2.7933315340798666E-7	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999997206668466	WITHOUT_CLASSIFICATION	2.7933315340798666E-7	DEFECT
// End of string (], ), }, >, ', ", \0)	WITHOUT_CLASSIFICATION	0.9999990842862655	WITHOUT_CLASSIFICATION	9.157137345714882E-7	DEFECT
// How many strings are nested in the current string term	WITHOUT_CLASSIFICATION	0.9999894943485943	WITHOUT_CLASSIFICATION	1.0505651405645406E-5	DEFECT
// Single-quote fast path	WITHOUT_CLASSIFICATION	0.9999929393148331	WITHOUT_CLASSIFICATION	7.060685166877241E-6	DEFECT
// Regexp engine 'java'	WITHOUT_CLASSIFICATION	0.9999977598814862	WITHOUT_CLASSIFICATION	2.2401185138579322E-6	DEFECT
// Was a goto in original ruby lexer	WITHOUT_CLASSIFICATION	0.999998911974372	WITHOUT_CLASSIFICATION	1.088025628018917E-6	DEFECT
/* just ignore */	WITHOUT_CLASSIFICATION	0.9999984650801309	WITHOUT_CLASSIFICATION	1.5349198690781804E-6	DEFECT
/* octal constant */	WITHOUT_CLASSIFICATION	0.9999969858635446	WITHOUT_CLASSIFICATION	3.01413645535182E-6	DEFECT
/* hex constant */	WITHOUT_CLASSIFICATION	0.9999958697604419	WITHOUT_CLASSIFICATION	4.130239558059721E-6	DEFECT
// PUSH(1)	WITHOUT_CLASSIFICATION	0.9999971548935003	WITHOUT_CLASSIFICATION	2.8451064997634114E-6	DEFECT
// POP	WITHOUT_CLASSIFICATION	0.9999944393466206	WITHOUT_CLASSIFICATION	5.5606533794062255E-6	DEFECT
// PUSH(0).  If you look at original macro: stack |= (n&1) => stack |= 0 => no-change.	WITHOUT_CLASSIFICATION	0.9999999129857332	WITHOUT_CLASSIFICATION	8.70142668217136E-8	DEFECT
// LEXPOP	WITHOUT_CLASSIFICATION	0.9999931467600933	WITHOUT_CLASSIFICATION	6.853239906592602E-6	DEFECT
// SET_P	WITHOUT_CLASSIFICATION	0.9999930393074755	WITHOUT_CLASSIFICATION	6.960692524502537E-6	DEFECT
// Marker delimiting heredoc boundary	WITHOUT_CLASSIFICATION	0.9999989927924392	WITHOUT_CLASSIFICATION	1.0072075607940923E-6	DEFECT
// Found end marker for this heredoc	WITHOUT_CLASSIFICATION	0.9999457309014508	WITHOUT_CLASSIFICATION	5.426909854931158E-5	DEFECT
// Put back lastLine for any elements past start of heredoc marker	WITHOUT_CLASSIFICATION	0.9999998486753825	WITHOUT_CLASSIFICATION	1.5132461754113613E-7	DEFECT
// Last token read via yylex().	WITHOUT_CLASSIFICATION	0.9999984585387669	WITHOUT_CLASSIFICATION	1.5414612331594875E-6	DEFECT
// Value of last token which had a value associated with it.	WITHOUT_CLASSIFICATION	0.9999996074964269	WITHOUT_CLASSIFICATION	3.925035731693569E-7	DEFECT
// Stream of data that yylex() examines.	WITHOUT_CLASSIFICATION	0.9999976380602442	WITHOUT_CLASSIFICATION	2.3619397558047127E-6	DEFECT
// Used for tiny smidgen of grammar in lexer (see setParserSupport())	WITHOUT_CLASSIFICATION	0.9999999849811059	WITHOUT_CLASSIFICATION	1.5018894128360193E-8	DEFECT
// Give a name to a value.  Enebo: This should be used more.	WITHOUT_CLASSIFICATION	0.9997762003231246	WITHOUT_CLASSIFICATION	2.2379967687538753E-4	DEFECT
// When the heredoc identifier specifies <<-EOF that indents before ident. are ok (the '-').	WITHOUT_CLASSIFICATION	0.9999998579930094	WITHOUT_CLASSIFICATION	1.420069906212526E-7	DEFECT
// Are we lexing Ruby 1.8 or 1.9+ syntax	WITHOUT_CLASSIFICATION	0.9999993069855924	WITHOUT_CLASSIFICATION	6.930144075789195E-7	DEFECT
// Count of nested parentheses (1.9 only)	WITHOUT_CLASSIFICATION	0.9999999224345273	WITHOUT_CLASSIFICATION	7.756547275886695E-8	DEFECT
// 1.9 only	WITHOUT_CLASSIFICATION	0.9999963362881479	WITHOUT_CLASSIFICATION	3.6637118521822522E-6	DEFECT
// Short-hand (e.g. %{,%.,%!,... versus %Q{).	WITHOUT_CLASSIFICATION	0.9999993227333118	WITHOUT_CLASSIFICATION	6.772666880874312E-7	DEFECT
// Long-hand (e.g. %Q{}).	WITHOUT_CLASSIFICATION	0.9999995513071532	WITHOUT_CLASSIFICATION	4.4869284672879655E-7	DEFECT
/* no mb || ismbchar(term)*/	WITHOUT_CLASSIFICATION	0.9999942243793014	WITHOUT_CLASSIFICATION	5.775620698622078E-6	DEFECT
/*     * Not normally used, but is left in here since it can be useful in debugging     * grammar and lexing problems.     *     */	WITHOUT_CLASSIFICATION	0.9999955934378012	WITHOUT_CLASSIFICATION	4.406562198897025E-6	DEFECT
// DEBUGGING HELP 	WITHOUT_CLASSIFICATION	0.9999987816954455	WITHOUT_CLASSIFICATION	1.218304554414795E-6	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9999848840003925	WITHOUT_CLASSIFICATION	1.5115999607408026E-5	DEFECT
/* end of script. */	WITHOUT_CLASSIFICATION	0.9999991056029626	WITHOUT_CLASSIFICATION	8.943970374524694E-7	DEFECT
/* white spaces */	WITHOUT_CLASSIFICATION	0.9999919628735523	WITHOUT_CLASSIFICATION	8.037126447659768E-6	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9999848840003925	WITHOUT_CLASSIFICATION	1.5115999607408026E-5	DEFECT
/* it's a comment */	WITHOUT_CLASSIFICATION	0.999981074845509	WITHOUT_CLASSIFICATION	1.892515449103706E-5	DEFECT
// Replace a string of newlines with a single one	WITHOUT_CLASSIFICATION	0.9999998551866328	WITHOUT_CLASSIFICATION	1.4481336730579776E-7	DEFECT
/* $\: output record separator */	WITHOUT_CLASSIFICATION	0.9999979943359258	WITHOUT_CLASSIFICATION	2.0056640741406935E-6	DEFECT
// EOF (ENEBO: After default?	WITHOUT_CLASSIFICATION	0.9997730153756614	WITHOUT_CLASSIFICATION	2.2698462433860735E-4	DEFECT
// documentation nodes	WITHOUT_CLASSIFICATION	0.9999936347937689	WITHOUT_CLASSIFICATION	6.3652062311259E-6	DEFECT
// In case last next was the newline.	WITHOUT_CLASSIFICATION	0.9999969944976339	WITHOUT_CLASSIFICATION	3.0055023660861663E-6	DEFECT
// Just a plain bang	WITHOUT_CLASSIFICATION	0.999995340234812	WITHOUT_CLASSIFICATION	4.659765188086663E-6	DEFECT
/* $_: last read line string */	WITHOUT_CLASSIFICATION	0.9999303974220606	WITHOUT_CLASSIFICATION	6.960257793943836E-5	DEFECT
/* $~: match-data */	WITHOUT_CLASSIFICATION	0.9999908647968819	WITHOUT_CLASSIFICATION	9.135203118019655E-6	DEFECT
/* $*: argv */	WITHOUT_CLASSIFICATION	0.9999733894702924	WITHOUT_CLASSIFICATION	2.6610529707671075E-5	DEFECT
/* $$: pid */	WITHOUT_CLASSIFICATION	0.9999595122660068	WITHOUT_CLASSIFICATION	4.0487733993172306E-5	DEFECT
/* $?: last status */	WITHOUT_CLASSIFICATION	0.9999091805431942	WITHOUT_CLASSIFICATION	9.081945680580481E-5	DEFECT
/* $!: error string */	WITHOUT_CLASSIFICATION	0.9993074239366233	WITHOUT_CLASSIFICATION	6.925760633767539E-4	DEFECT
/* $@: error position */	WITHOUT_CLASSIFICATION	0.999808917613348	WITHOUT_CLASSIFICATION	1.910823866520711E-4	DEFECT
/* $/: input record separator */	WITHOUT_CLASSIFICATION	0.9999947277134734	WITHOUT_CLASSIFICATION	5.272286526535148E-6	DEFECT
/* $;: field separator */	WITHOUT_CLASSIFICATION	0.9999878882189424	WITHOUT_CLASSIFICATION	1.2111781057698798E-5	DEFECT
/* $,: output field separator */	WITHOUT_CLASSIFICATION	0.999996540602781	WITHOUT_CLASSIFICATION	3.4593972189569564E-6	DEFECT
/* $.: last read line number */	WITHOUT_CLASSIFICATION	0.9999872289601082	WITHOUT_CLASSIFICATION	1.2771039891773897E-5	DEFECT
/* $=: ignorecase */	WITHOUT_CLASSIFICATION	0.9999919549032366	WITHOUT_CLASSIFICATION	8.045096763558024E-6	DEFECT
/* $:: load path */	WITHOUT_CLASSIFICATION	0.999941875086734	WITHOUT_CLASSIFICATION	5.8124913265916336E-5	DEFECT
/* $<: reading filename */	WITHOUT_CLASSIFICATION	0.9997940720554047	WITHOUT_CLASSIFICATION	2.0592794459536683E-4	DEFECT
/* $": already loaded files */	WITHOUT_CLASSIFICATION	0.9999246820323691	WITHOUT_CLASSIFICATION	7.531796763082213E-5	DEFECT
/* $&: last match */	WITHOUT_CLASSIFICATION	0.9999946491735765	WITHOUT_CLASSIFICATION	5.350826423473059E-6	DEFECT
/* $`: string before last match */	WITHOUT_CLASSIFICATION	0.9999899240308898	WITHOUT_CLASSIFICATION	1.0075969110210149E-5	DEFECT
/* $': string after last match */	WITHOUT_CLASSIFICATION	0.9999691568285914	WITHOUT_CLASSIFICATION	3.084317140847409E-5	DEFECT
// methods 'foo!' and 'foo?' are possible but if followed by '=' it is relop	WITHOUT_CLASSIFICATION	0.9999850181954748	WITHOUT_CLASSIFICATION	1.4981804525302231E-5	DEFECT
/* See if it is a reserved word.  */	WITHOUT_CLASSIFICATION	0.9999496031249865	WITHOUT_CLASSIFICATION	5.039687501351647E-5	DEFECT
// enum lex_state	WITHOUT_CLASSIFICATION	0.9999996808626985	WITHOUT_CLASSIFICATION	3.191373015301099E-7	DEFECT
// block (primary)	WITHOUT_CLASSIFICATION	0.9999985892570359	WITHOUT_CLASSIFICATION	1.410742964095993E-6	DEFECT
// block (expr)	WITHOUT_CLASSIFICATION	0.9999976183086418	WITHOUT_CLASSIFICATION	2.3816913582903766E-6	DEFECT
// hash	WITHOUT_CLASSIFICATION	0.9999969453360429	WITHOUT_CLASSIFICATION	3.0546639571152284E-6	DEFECT
// ENEBO: 1.9 is IS_ARG, but we need to break apart for 1.8 support.	WITHOUT_CLASSIFICATION	0.999632771303221	WITHOUT_CLASSIFICATION	3.672286967788786E-4	DEFECT
// FIXME: peek('u') utf8 stuff for 1.9	WITHOUT_CLASSIFICATION	0.9877733136604124	WITHOUT_CLASSIFICATION	0.012226686339587633	DEFECT
// We don't append '+' since Java number parser gets confused	WITHOUT_CLASSIFICATION	0.9999848942951465	WITHOUT_CLASSIFICATION	1.5105704853605694E-5	DEFECT
//  hexadecimal	WITHOUT_CLASSIFICATION	0.9999992000326945	WITHOUT_CLASSIFICATION	7.999673055273845E-7	DEFECT
// binary	WITHOUT_CLASSIFICATION	0.9999978534453383	WITHOUT_CLASSIFICATION	2.1465546617010397E-6	DEFECT
// decimal	WITHOUT_CLASSIFICATION	0.9999987371174114	WITHOUT_CLASSIFICATION	1.2628825885651691E-6	DEFECT
//Octal	WITHOUT_CLASSIFICATION	0.9999633742060291	WITHOUT_CLASSIFICATION	3.662579397099121E-5	DEFECT
//  '_' in number just ignored	WITHOUT_CLASSIFICATION	0.9999994694938705	WITHOUT_CLASSIFICATION	5.305061295513392E-7	DEFECT
// backslash	WITHOUT_CLASSIFICATION	0.9999992596513441	WITHOUT_CLASSIFICATION	7.403486560130722E-7	DEFECT
// newline	WITHOUT_CLASSIFICATION	0.9999980893571373	WITHOUT_CLASSIFICATION	1.9106428626668612E-6	DEFECT
// horizontal tab	WITHOUT_CLASSIFICATION	0.9999950733846888	WITHOUT_CLASSIFICATION	4.926615311048768E-6	DEFECT
// form feed	WITHOUT_CLASSIFICATION	0.999997940321	WITHOUT_CLASSIFICATION	2.059678999965087E-6	DEFECT
// vertical tab	WITHOUT_CLASSIFICATION	0.9999988439230021	WITHOUT_CLASSIFICATION	1.1560769979169641E-6	DEFECT
// alarm(bell)	WITHOUT_CLASSIFICATION	0.9999985117695678	WITHOUT_CLASSIFICATION	1.48823043221964E-6	DEFECT
// escape	WITHOUT_CLASSIFICATION	0.999998309290251	WITHOUT_CLASSIFICATION	1.6907097488754136E-6	DEFECT
// hex constant	WITHOUT_CLASSIFICATION	0.9999981052960587	WITHOUT_CLASSIFICATION	1.8947039413693695E-6	DEFECT
//char hexValue = scanHex(2);	WITHOUT_CLASSIFICATION	0.9999977114453207	WITHOUT_CLASSIFICATION	2.288554679266205E-6	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9999995578363186	WITHOUT_CLASSIFICATION	4.421636813467103E-7	DEFECT
// space	WITHOUT_CLASSIFICATION	0.9999985012872873	WITHOUT_CLASSIFICATION	1.4987127126932686E-6	DEFECT
// Where we started this marker match	WITHOUT_CLASSIFICATION	0.9999930915570314	WITHOUT_CLASSIFICATION	6.908442968536689E-6	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999995122285293	WITHOUT_CLASSIFICATION	4.877714706152193E-7	DEFECT
// We use offset here to keep track of extra newlines for windows	WITHOUT_CLASSIFICATION	0.9999999879104392	WITHOUT_CLASSIFICATION	1.2089560774250271E-8	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9999995578363186	WITHOUT_CLASSIFICATION	4.421636813467103E-7	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.8616860678776388	WITHOUT_CLASSIFICATION	0.1383139321223612	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.8616860678776388	WITHOUT_CLASSIFICATION	0.1383139321223612	DEFECT
// Where we get our newest char's	WITHOUT_CLASSIFICATION	0.9999999521937152	WITHOUT_CLASSIFICATION	4.78062847366604E-8	DEFECT
// Our readback/pushback buffer.	WITHOUT_CLASSIFICATION	0.9999946327884972	WITHOUT_CLASSIFICATION	5.367211502840745E-6	DEFECT
// index of last character in pushback buffer	WITHOUT_CLASSIFICATION	0.9999995383411672	WITHOUT_CLASSIFICATION	4.6165883283143517E-7	DEFECT
// Character read before previous read	WITHOUT_CLASSIFICATION	0.9999998894127918	WITHOUT_CLASSIFICATION	1.1058720822730002E-7	DEFECT
// keep value of twoAgo around so we can restore after we unread	WITHOUT_CLASSIFICATION	0.9999996584737797	WITHOUT_CLASSIFICATION	3.4152622030018203E-7	DEFECT
// NetProtocolBufferedIOLibrary	WITHOUT_CLASSIFICATION	0.999998117868991	WITHOUT_CLASSIFICATION	1.8821310090052299E-6	DEFECT
// BigDecimalLibrary	WITHOUT_CLASSIFICATION	0.9999965303332484	WITHOUT_CLASSIFICATION	3.4696667515362504E-6	DEFECT
// TODO: FD_CLOEXEC is mysterious and we are not sure how constantine should include this. // We did it here for now	WITHOUT_CLASSIFICATION	0.9605445290289429	DEFECT	0.039455470971057	WITHOUT_CLASSIFICATION
// Ruby's designation for some platforms, minus version numbers in some cases	WITHOUT_CLASSIFICATION	0.9999999552993308	WITHOUT_CLASSIFICATION	4.470066918836406E-8	DEFECT
// that's what JDK5 produces on Windows Vista	WITHOUT_CLASSIFICATION	0.9998637879820701	WITHOUT_CLASSIFICATION	1.362120179298126E-4	DEFECT
// Rubygems is too specific on host cpu so until we have real need lets default to universal //setConfig(configHash, "arch", System.getProperty("os.arch") + "-java" + System.getProperty("java.specification.version"));	WITHOUT_CLASSIFICATION	0.9999999402266169	WITHOUT_CLASSIFICATION	5.977338309175749E-8	DEFECT
// Our shell scripts pass in non-canonicalized paths, but even if we didn't // anyone who did would become unhappy because Ruby apps expect no relative // operators in the pathname (rubygems, for example).	WITHOUT_CLASSIFICATION	0.9999971989159147	WITHOUT_CLASSIFICATION	2.8010840853704807E-6	DEFECT
// this set is only for darwin	WITHOUT_CLASSIFICATION	0.9999934958517088	WITHOUT_CLASSIFICATION	6.504148291155287E-6	DEFECT
// DigestLibrary	WITHOUT_CLASSIFICATION	0.9999991536192823	WITHOUT_CLASSIFICATION	8.463807177881399E-7	DEFECT
// all errors, just info; do not prevent loading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9998311061431101	WITHOUT_CLASSIFICATION	1.6889385688989732E-4	DEFECT
// all errors, just info; do not prevent unloading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9999104479447432	WITHOUT_CLASSIFICATION	8.95520552569133E-5	DEFECT
// do nothing, return dummy version below	WITHOUT_CLASSIFICATION	0.9999996543618987	WITHOUT_CLASSIFICATION	3.4563810133786637E-7	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999772631072026	WITHOUT_CLASSIFICATION	2.273689279745091E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999772631072026	WITHOUT_CLASSIFICATION	2.273689279745091E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999772631072026	WITHOUT_CLASSIFICATION	2.273689279745091E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999772631072026	WITHOUT_CLASSIFICATION	2.273689279745091E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999772631072026	WITHOUT_CLASSIFICATION	2.273689279745091E-5	DEFECT
// line 329	WITHOUT_CLASSIFICATION	0.9999935277574648	WITHOUT_CLASSIFICATION	6.472242535355074E-6	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999912029849178	WITHOUT_CLASSIFICATION	8.797015082168183E-6	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.999967962020762	WITHOUT_CLASSIFICATION	3.203797923802179E-5	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9999965889017406	WITHOUT_CLASSIFICATION	3.4110982592729072E-6	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9999858158282554	WITHOUT_CLASSIFICATION	1.418417174457498E-5	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999993431949216	WITHOUT_CLASSIFICATION	6.568050785026358E-7	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999983713259725	WITHOUT_CLASSIFICATION	1.6286740275514243E-6	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999981553340813	WITHOUT_CLASSIFICATION	1.8446659186463928E-6	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.999998453336487	WITHOUT_CLASSIFICATION	1.5466635129521954E-6	DEFECT
// line 271	WITHOUT_CLASSIFICATION	0.9999941069989355	WITHOUT_CLASSIFICATION	5.89300106450066E-6	DEFECT
// line 274	WITHOUT_CLASSIFICATION	0.9999926929381399	WITHOUT_CLASSIFICATION	7.3070618600545235E-6	DEFECT
// line 303	WITHOUT_CLASSIFICATION	0.9999940335893706	WITHOUT_CLASSIFICATION	5.966410629459625E-6	DEFECT
// line 311	WITHOUT_CLASSIFICATION	0.9999950224299583	WITHOUT_CLASSIFICATION	4.977570041732553E-6	DEFECT
// line 314	WITHOUT_CLASSIFICATION	0.9999935909325518	WITHOUT_CLASSIFICATION	6.409067448236031E-6	DEFECT
// line 317	WITHOUT_CLASSIFICATION	0.999992351452206	WITHOUT_CLASSIFICATION	7.648547794053996E-6	DEFECT
// line 332	WITHOUT_CLASSIFICATION	0.9999945622400778	WITHOUT_CLASSIFICATION	5.437759922182656E-6	DEFECT
// line 338	WITHOUT_CLASSIFICATION	0.9999960201526544	WITHOUT_CLASSIFICATION	3.979847345606838E-6	DEFECT
// line 341	WITHOUT_CLASSIFICATION	0.9999942364736336	WITHOUT_CLASSIFICATION	5.763526366366633E-6	DEFECT
// line 344	WITHOUT_CLASSIFICATION	0.9999937422449257	WITHOUT_CLASSIFICATION	6.257755074393521E-6	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.999994020323269	WITHOUT_CLASSIFICATION	5.979676730988843E-6	DEFECT
// line 358	WITHOUT_CLASSIFICATION	0.9999952323940005	WITHOUT_CLASSIFICATION	4.7676059995402725E-6	DEFECT
// line 367	WITHOUT_CLASSIFICATION	0.999991409741476	WITHOUT_CLASSIFICATION	8.590258523945394E-6	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999928467095567	WITHOUT_CLASSIFICATION	7.153290443368988E-6	DEFECT
// line 378	WITHOUT_CLASSIFICATION	0.9999949872549518	WITHOUT_CLASSIFICATION	5.0127450481621605E-6	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999956430341616	WITHOUT_CLASSIFICATION	4.356965838455491E-6	DEFECT
// line 407	WITHOUT_CLASSIFICATION	0.9999939335567594	WITHOUT_CLASSIFICATION	6.066443240641034E-6	DEFECT
// line 411	WITHOUT_CLASSIFICATION	0.999994767383225	WITHOUT_CLASSIFICATION	5.2326167750466225E-6	DEFECT
// line 414	WITHOUT_CLASSIFICATION	0.9999942507483291	WITHOUT_CLASSIFICATION	5.749251670885225E-6	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.999991959323476	WITHOUT_CLASSIFICATION	8.04067652403423E-6	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999950708826298	WITHOUT_CLASSIFICATION	4.9291173701238295E-6	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9999921188829066	WITHOUT_CLASSIFICATION	7.881117093329115E-6	DEFECT
// line 434	WITHOUT_CLASSIFICATION	0.9999937337677761	WITHOUT_CLASSIFICATION	6.266232223840974E-6	DEFECT
// line 443	WITHOUT_CLASSIFICATION	0.9999926715331471	WITHOUT_CLASSIFICATION	7.3284668528911615E-6	DEFECT
// line 446	WITHOUT_CLASSIFICATION	0.9999927870157229	WITHOUT_CLASSIFICATION	7.212984277052794E-6	DEFECT
// line 452	WITHOUT_CLASSIFICATION	0.9999930070565445	WITHOUT_CLASSIFICATION	6.992943455478249E-6	DEFECT
// line 457	WITHOUT_CLASSIFICATION	0.999991601686342	WITHOUT_CLASSIFICATION	8.398313657979613E-6	DEFECT
// line 464	WITHOUT_CLASSIFICATION	0.9999925435894077	WITHOUT_CLASSIFICATION	7.456410592212652E-6	DEFECT
// line 467	WITHOUT_CLASSIFICATION	0.9999912269515953	WITHOUT_CLASSIFICATION	8.773048404693638E-6	DEFECT
// line 470	WITHOUT_CLASSIFICATION	0.9999932335856386	WITHOUT_CLASSIFICATION	6.766414361373552E-6	DEFECT
// line 479	WITHOUT_CLASSIFICATION	0.9999920114362911	WITHOUT_CLASSIFICATION	7.988563708937887E-6	DEFECT
// line 484	WITHOUT_CLASSIFICATION	0.9999953891870458	WITHOUT_CLASSIFICATION	4.6108129542945914E-6	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999942218712848	WITHOUT_CLASSIFICATION	5.778128715251971E-6	DEFECT
// line 492	WITHOUT_CLASSIFICATION	0.9999929616856599	WITHOUT_CLASSIFICATION	7.038314340219845E-6	DEFECT
// line 498	WITHOUT_CLASSIFICATION	0.9999948809874718	WITHOUT_CLASSIFICATION	5.119012528166421E-6	DEFECT
// line 501	WITHOUT_CLASSIFICATION	0.9999950193147459	WITHOUT_CLASSIFICATION	4.980685254015926E-6	DEFECT
// line 504	WITHOUT_CLASSIFICATION	0.9999938796536373	WITHOUT_CLASSIFICATION	6.120346362737336E-6	DEFECT
// line 507	WITHOUT_CLASSIFICATION	0.9999936097921812	WITHOUT_CLASSIFICATION	6.3902078188401E-6	DEFECT
// line 510	WITHOUT_CLASSIFICATION	0.9999954252551938	WITHOUT_CLASSIFICATION	4.574744806280758E-6	DEFECT
// line 519	WITHOUT_CLASSIFICATION	0.9999936050369947	WITHOUT_CLASSIFICATION	6.394963005228027E-6	DEFECT
// line 525	WITHOUT_CLASSIFICATION	0.9999933899290777	WITHOUT_CLASSIFICATION	6.610070922273745E-6	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.999967962020762	WITHOUT_CLASSIFICATION	3.203797923802179E-5	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999924861625926	WITHOUT_CLASSIFICATION	7.513837407459655E-6	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999945890167491	WITHOUT_CLASSIFICATION	5.410983250828794E-6	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999910115680981	WITHOUT_CLASSIFICATION	8.988431901895151E-6	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999911534506207	WITHOUT_CLASSIFICATION	8.846549379333734E-6	DEFECT
// line 556	WITHOUT_CLASSIFICATION	0.9999918593160625	WITHOUT_CLASSIFICATION	8.140683937558613E-6	DEFECT
// line 559	WITHOUT_CLASSIFICATION	0.9999934670685543	WITHOUT_CLASSIFICATION	6.532931445783152E-6	DEFECT
// line 563	WITHOUT_CLASSIFICATION	0.9999896997549401	WITHOUT_CLASSIFICATION	1.0300245059886564E-5	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999918110216908	WITHOUT_CLASSIFICATION	8.188978309287881E-6	DEFECT
// line 569	WITHOUT_CLASSIFICATION	0.9999905413017761	WITHOUT_CLASSIFICATION	9.458698223848606E-6	DEFECT
// line 575	WITHOUT_CLASSIFICATION	0.9999905428020016	WITHOUT_CLASSIFICATION	9.457197998405118E-6	DEFECT
// line 578	WITHOUT_CLASSIFICATION	0.9999940778514438	WITHOUT_CLASSIFICATION	5.9221485562316635E-6	DEFECT
// line 587	WITHOUT_CLASSIFICATION	0.9999945188204997	WITHOUT_CLASSIFICATION	5.481179500260665E-6	DEFECT
// line 596	WITHOUT_CLASSIFICATION	0.9999912703868922	WITHOUT_CLASSIFICATION	8.729613107898783E-6	DEFECT
// line 604	WITHOUT_CLASSIFICATION	0.9999903677655261	WITHOUT_CLASSIFICATION	9.632234473972487E-6	DEFECT
// line 607	WITHOUT_CLASSIFICATION	0.9999899688147275	WITHOUT_CLASSIFICATION	1.0031185272461863E-5	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9999936342982779	WITHOUT_CLASSIFICATION	6.36570172212571E-6	DEFECT
// line 613	WITHOUT_CLASSIFICATION	0.9999900722734008	WITHOUT_CLASSIFICATION	9.927726599210593E-6	DEFECT
// line 616	WITHOUT_CLASSIFICATION	0.9999921150481742	WITHOUT_CLASSIFICATION	7.884951825866826E-6	DEFECT
// line 634	WITHOUT_CLASSIFICATION	0.9999899295797805	WITHOUT_CLASSIFICATION	1.0070420219457648E-5	DEFECT
// line 638	WITHOUT_CLASSIFICATION	0.9999934014917191	WITHOUT_CLASSIFICATION	6.5985082809058644E-6	DEFECT
// line 643	WITHOUT_CLASSIFICATION	0.9999877635375662	WITHOUT_CLASSIFICATION	1.2236462433679614E-5	DEFECT
// line 646	WITHOUT_CLASSIFICATION	0.9999907444922975	WITHOUT_CLASSIFICATION	9.255507702425372E-6	DEFECT
// line 655	WITHOUT_CLASSIFICATION	0.9999902125746661	WITHOUT_CLASSIFICATION	9.787425333885904E-6	DEFECT
// line 660	WITHOUT_CLASSIFICATION	0.9999926753947783	WITHOUT_CLASSIFICATION	7.324605221681463E-6	DEFECT
// line 667	WITHOUT_CLASSIFICATION	0.9999903183859001	WITHOUT_CLASSIFICATION	9.681614099903273E-6	DEFECT
// line 670	WITHOUT_CLASSIFICATION	0.9999904311447239	WITHOUT_CLASSIFICATION	9.568855276231577E-6	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.999989469737111	WITHOUT_CLASSIFICATION	1.0530262889069784E-5	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999905722287541	WITHOUT_CLASSIFICATION	9.427771245844705E-6	DEFECT
// line 701	WITHOUT_CLASSIFICATION	0.9999932893534726	WITHOUT_CLASSIFICATION	6.71064652734135E-6	DEFECT
// line 717	WITHOUT_CLASSIFICATION	0.9999924129578727	WITHOUT_CLASSIFICATION	7.587042127337285E-6	DEFECT
// line 720	WITHOUT_CLASSIFICATION	0.999994313205747	WITHOUT_CLASSIFICATION	5.68679425292601E-6	DEFECT
// line 726	WITHOUT_CLASSIFICATION	0.9999909620927346	WITHOUT_CLASSIFICATION	9.037907265263946E-6	DEFECT
// line 729	WITHOUT_CLASSIFICATION	0.9999920756717022	WITHOUT_CLASSIFICATION	7.924328297761327E-6	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999928652948641	WITHOUT_CLASSIFICATION	7.134705135829937E-6	DEFECT
// line 735	WITHOUT_CLASSIFICATION	0.9999919477781288	WITHOUT_CLASSIFICATION	8.052221871061976E-6	DEFECT
// line 738	WITHOUT_CLASSIFICATION	0.999994779453619	WITHOUT_CLASSIFICATION	5.220546380970959E-6	DEFECT
// line 751	WITHOUT_CLASSIFICATION	0.9999917434045492	WITHOUT_CLASSIFICATION	8.25659545082955E-6	DEFECT
// line 754	WITHOUT_CLASSIFICATION	0.9999896160117492	WITHOUT_CLASSIFICATION	1.0383988250831021E-5	DEFECT
// line 757	WITHOUT_CLASSIFICATION	0.999990514800821	WITHOUT_CLASSIFICATION	9.485199178942231E-6	DEFECT
// line 760	WITHOUT_CLASSIFICATION	0.9999920940726343	WITHOUT_CLASSIFICATION	7.905927365577662E-6	DEFECT
// line 763	WITHOUT_CLASSIFICATION	0.9999890941300498	WITHOUT_CLASSIFICATION	1.0905869950169529E-5	DEFECT
// line 769	WITHOUT_CLASSIFICATION	0.9999899866927485	WITHOUT_CLASSIFICATION	1.001330725136689E-5	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999930842461262	WITHOUT_CLASSIFICATION	6.915753873846425E-6	DEFECT
// line 775	WITHOUT_CLASSIFICATION	0.9999911351238172	WITHOUT_CLASSIFICATION	8.864876182789722E-6	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999948719226315	WITHOUT_CLASSIFICATION	5.128077368461858E-6	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999952342567643	WITHOUT_CLASSIFICATION	4.765743235752143E-6	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999926301760474	WITHOUT_CLASSIFICATION	7.369823952511165E-6	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999907420617956	WITHOUT_CLASSIFICATION	9.257938204496634E-6	DEFECT
// line 797	WITHOUT_CLASSIFICATION	0.9999916732503912	WITHOUT_CLASSIFICATION	8.326749608770518E-6	DEFECT
// line 803	WITHOUT_CLASSIFICATION	0.9999950611849119	WITHOUT_CLASSIFICATION	4.938815088178368E-6	DEFECT
// line 806	WITHOUT_CLASSIFICATION	0.9999949435488773	WITHOUT_CLASSIFICATION	5.056451122729748E-6	DEFECT
// line 809	WITHOUT_CLASSIFICATION	0.9999948886016748	WITHOUT_CLASSIFICATION	5.111398325203464E-6	DEFECT
// line 815	WITHOUT_CLASSIFICATION	0.9999950014237057	WITHOUT_CLASSIFICATION	4.9985762943442465E-6	DEFECT
// line 818	WITHOUT_CLASSIFICATION	0.9999965464423279	WITHOUT_CLASSIFICATION	3.453557672105586E-6	DEFECT
// line 821	WITHOUT_CLASSIFICATION	0.9999957130824713	WITHOUT_CLASSIFICATION	4.28691752873545E-6	DEFECT
// line 824	WITHOUT_CLASSIFICATION	0.9999941830942538	WITHOUT_CLASSIFICATION	5.81690574613868E-6	DEFECT
// line 830	WITHOUT_CLASSIFICATION	0.9999963013585169	WITHOUT_CLASSIFICATION	3.6986414830908416E-6	DEFECT
// line 833	WITHOUT_CLASSIFICATION	0.9999949398744509	WITHOUT_CLASSIFICATION	5.060125549238391E-6	DEFECT
// line 836	WITHOUT_CLASSIFICATION	0.9999941686921144	WITHOUT_CLASSIFICATION	5.8313078855307696E-6	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999949445534213	WITHOUT_CLASSIFICATION	5.0554465786703886E-6	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999947301407927	WITHOUT_CLASSIFICATION	5.2698592073392385E-6	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999949933304969	WITHOUT_CLASSIFICATION	5.006669503121172E-6	DEFECT
// line 852	WITHOUT_CLASSIFICATION	0.9999946634899005	WITHOUT_CLASSIFICATION	5.3365100994118714E-6	DEFECT
// line 858	WITHOUT_CLASSIFICATION	0.999995216630237	WITHOUT_CLASSIFICATION	4.783369762979645E-6	DEFECT
// line 861	WITHOUT_CLASSIFICATION	0.9999946739407304	WITHOUT_CLASSIFICATION	5.3260592696786285E-6	DEFECT
// line 868	WITHOUT_CLASSIFICATION	0.9999945689402174	WITHOUT_CLASSIFICATION	5.431059782586518E-6	DEFECT
// line 871	WITHOUT_CLASSIFICATION	0.9999949781165548	WITHOUT_CLASSIFICATION	5.021883445242227E-6	DEFECT
// line 876	WITHOUT_CLASSIFICATION	0.9999930211185803	WITHOUT_CLASSIFICATION	6.978881419686568E-6	DEFECT
// line 879	WITHOUT_CLASSIFICATION	0.9999940440949816	WITHOUT_CLASSIFICATION	5.9559050183836765E-6	DEFECT
// line 883	WITHOUT_CLASSIFICATION	0.9999948299605468	WITHOUT_CLASSIFICATION	5.170039453267977E-6	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999917527426737	WITHOUT_CLASSIFICATION	8.24725732632472E-6	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.999993786448677	WITHOUT_CLASSIFICATION	6.213551323049897E-6	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999947063358468	WITHOUT_CLASSIFICATION	5.293664153256072E-6	DEFECT
// line 903	WITHOUT_CLASSIFICATION	0.9999930152743338	WITHOUT_CLASSIFICATION	6.984725666099629E-6	DEFECT
// line 907	WITHOUT_CLASSIFICATION	0.9999932306147845	WITHOUT_CLASSIFICATION	6.769385215480981E-6	DEFECT
// line 915	WITHOUT_CLASSIFICATION	0.9999924735883744	WITHOUT_CLASSIFICATION	7.526411625528237E-6	DEFECT
// line 920	WITHOUT_CLASSIFICATION	0.999994496202503	WITHOUT_CLASSIFICATION	5.503797497052182E-6	DEFECT
// line 923	WITHOUT_CLASSIFICATION	0.999991938972522	WITHOUT_CLASSIFICATION	8.061027477984246E-6	DEFECT
// line 926	WITHOUT_CLASSIFICATION	0.9999912815787373	WITHOUT_CLASSIFICATION	8.718421262676493E-6	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999917453188352	WITHOUT_CLASSIFICATION	8.254681164766728E-6	DEFECT
// line 936	WITHOUT_CLASSIFICATION	0.9999895872563981	WITHOUT_CLASSIFICATION	1.0412743601894872E-5	DEFECT
// line 940	WITHOUT_CLASSIFICATION	0.9999941347380292	WITHOUT_CLASSIFICATION	5.865261970767927E-6	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999923705474777	WITHOUT_CLASSIFICATION	7.629452522354879E-6	DEFECT
// line 948	WITHOUT_CLASSIFICATION	0.9999941484893963	WITHOUT_CLASSIFICATION	5.851510603686416E-6	DEFECT
// line 956	WITHOUT_CLASSIFICATION	0.9999897892737277	WITHOUT_CLASSIFICATION	1.0210726272224836E-5	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999925761048154	WITHOUT_CLASSIFICATION	7.4238951846078525E-6	DEFECT
// line 964	WITHOUT_CLASSIFICATION	0.9999901941563684	WITHOUT_CLASSIFICATION	9.805843631703668E-6	DEFECT
// line 967	WITHOUT_CLASSIFICATION	0.9999901871454059	WITHOUT_CLASSIFICATION	9.812854594026914E-6	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.999990638583763	WITHOUT_CLASSIFICATION	9.361416236940217E-6	DEFECT
// line 978	WITHOUT_CLASSIFICATION	0.9999934382285994	WITHOUT_CLASSIFICATION	6.56177140054513E-6	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999960086422892	WITHOUT_CLASSIFICATION	3.991357710797456E-6	DEFECT
// line 984	WITHOUT_CLASSIFICATION	0.999994033830894	WITHOUT_CLASSIFICATION	5.9661691059892004E-6	DEFECT
// line 986	WITHOUT_CLASSIFICATION	0.9999936464564256	WITHOUT_CLASSIFICATION	6.353543574428801E-6	DEFECT
// line 996	WITHOUT_CLASSIFICATION	0.9999908419372504	WITHOUT_CLASSIFICATION	9.158062749475862E-6	DEFECT
// line 1001	WITHOUT_CLASSIFICATION	0.9999947012405664	WITHOUT_CLASSIFICATION	5.298759433451234E-6	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999937920592747	WITHOUT_CLASSIFICATION	6.207940725211029E-6	DEFECT
// line 1008	WITHOUT_CLASSIFICATION	0.9999958586493476	WITHOUT_CLASSIFICATION	4.1413506523778275E-6	DEFECT
// line 1014	WITHOUT_CLASSIFICATION	0.9999933073958281	WITHOUT_CLASSIFICATION	6.692604171848372E-6	DEFECT
// line 1029	WITHOUT_CLASSIFICATION	0.9999933227638332	WITHOUT_CLASSIFICATION	6.677236166829319E-6	DEFECT
// line 1032	WITHOUT_CLASSIFICATION	0.99999381483051	WITHOUT_CLASSIFICATION	6.185169490109824E-6	DEFECT
// line 1034	WITHOUT_CLASSIFICATION	0.9999931018176684	WITHOUT_CLASSIFICATION	6.8981823314793815E-6	DEFECT
// line 1045	WITHOUT_CLASSIFICATION	0.9999927945123931	WITHOUT_CLASSIFICATION	7.2054876068615215E-6	DEFECT
// line 1048	WITHOUT_CLASSIFICATION	0.9999950887254013	WITHOUT_CLASSIFICATION	4.911274598711624E-6	DEFECT
// line 1051	WITHOUT_CLASSIFICATION	0.9999938313248534	WITHOUT_CLASSIFICATION	6.168675146622917E-6	DEFECT
// line 1058	WITHOUT_CLASSIFICATION	0.9999951402866459	WITHOUT_CLASSIFICATION	4.859713354092033E-6	DEFECT
// line 1070	WITHOUT_CLASSIFICATION	0.9999928038805376	WITHOUT_CLASSIFICATION	7.1961194624177E-6	DEFECT
// line 1073	WITHOUT_CLASSIFICATION	0.9999915026188534	WITHOUT_CLASSIFICATION	8.497381146705089E-6	DEFECT
// line 1076	WITHOUT_CLASSIFICATION	0.9999904652647325	WITHOUT_CLASSIFICATION	9.534735267541487E-6	DEFECT
// line 1079	WITHOUT_CLASSIFICATION	0.9999921540653804	WITHOUT_CLASSIFICATION	7.845934619532414E-6	DEFECT
// line 1082	WITHOUT_CLASSIFICATION	0.9999955051568902	WITHOUT_CLASSIFICATION	4.494843109870024E-6	DEFECT
// line 1089	WITHOUT_CLASSIFICATION	0.9999952573296702	WITHOUT_CLASSIFICATION	4.7426703298463415E-6	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999897533408121	WITHOUT_CLASSIFICATION	1.0246659187958159E-5	DEFECT
// line 1100	WITHOUT_CLASSIFICATION	0.9999950795342349	WITHOUT_CLASSIFICATION	4.920465765116234E-6	DEFECT
// line 1103	WITHOUT_CLASSIFICATION	0.9999930072581621	WITHOUT_CLASSIFICATION	6.992741837911363E-6	DEFECT
// line 1107	WITHOUT_CLASSIFICATION	0.9999932159523928	WITHOUT_CLASSIFICATION	6.784047607148206E-6	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999939553759153	WITHOUT_CLASSIFICATION	6.044624084718599E-6	DEFECT
// line 1113	WITHOUT_CLASSIFICATION	0.9999923275736918	WITHOUT_CLASSIFICATION	7.6724263081938E-6	DEFECT
// line 1115	WITHOUT_CLASSIFICATION	0.999992569583984	WITHOUT_CLASSIFICATION	7.430416016064261E-6	DEFECT
// line 1119	WITHOUT_CLASSIFICATION	0.9999931244167182	WITHOUT_CLASSIFICATION	6.87558328185062E-6	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999944810686049	WITHOUT_CLASSIFICATION	5.518931395127252E-6	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999924281270115	WITHOUT_CLASSIFICATION	7.571872988460542E-6	DEFECT
// line 1135	WITHOUT_CLASSIFICATION	0.9999921466346526	WITHOUT_CLASSIFICATION	7.853365347475469E-6	DEFECT
// line 1137	WITHOUT_CLASSIFICATION	0.9999919205346911	WITHOUT_CLASSIFICATION	8.07946530892487E-6	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999940539920917	WITHOUT_CLASSIFICATION	5.946007908186291E-6	DEFECT
// line 1151	WITHOUT_CLASSIFICATION	0.9999928539809014	WITHOUT_CLASSIFICATION	7.146019098578807E-6	DEFECT
// line 1154	WITHOUT_CLASSIFICATION	0.9999911272666815	WITHOUT_CLASSIFICATION	8.872733318527203E-6	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999943687331558	WITHOUT_CLASSIFICATION	5.631266844095569E-6	DEFECT
// line 1164	WITHOUT_CLASSIFICATION	0.9999903561264613	WITHOUT_CLASSIFICATION	9.6438735387327E-6	DEFECT
// line 1175	WITHOUT_CLASSIFICATION	0.9999866554522375	WITHOUT_CLASSIFICATION	1.3344547762569493E-5	DEFECT
// line 1178	WITHOUT_CLASSIFICATION	0.9999929494120728	WITHOUT_CLASSIFICATION	7.050587927115382E-6	DEFECT
// line 1187	WITHOUT_CLASSIFICATION	0.9999950833708936	WITHOUT_CLASSIFICATION	4.916629106292371E-6	DEFECT
// line 1189	WITHOUT_CLASSIFICATION	0.999995446736788	WITHOUT_CLASSIFICATION	4.553263212054573E-6	DEFECT
// line 1193	WITHOUT_CLASSIFICATION	0.9999875266318425	WITHOUT_CLASSIFICATION	1.2473368157574179E-5	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999924653746457	WITHOUT_CLASSIFICATION	7.534625354199398E-6	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999921573494872	WITHOUT_CLASSIFICATION	7.842650512755986E-6	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999944659220966	WITHOUT_CLASSIFICATION	5.534077903402975E-6	DEFECT
// line 1214	WITHOUT_CLASSIFICATION	0.9999913989584085	WITHOUT_CLASSIFICATION	8.601041591490351E-6	DEFECT
// line 1234	WITHOUT_CLASSIFICATION	0.9999925481923557	WITHOUT_CLASSIFICATION	7.451807644269599E-6	DEFECT
// line 1239	WITHOUT_CLASSIFICATION	0.999992369444104	WITHOUT_CLASSIFICATION	7.630555896110339E-6	DEFECT
// line 1243	WITHOUT_CLASSIFICATION	0.9999862185414937	WITHOUT_CLASSIFICATION	1.3781458506237027E-5	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999883491192522	WITHOUT_CLASSIFICATION	1.1650880747816337E-5	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999922911567094	WITHOUT_CLASSIFICATION	7.708843290524423E-6	DEFECT
// line 1263	WITHOUT_CLASSIFICATION	0.9999885011008018	WITHOUT_CLASSIFICATION	1.1498899198137728E-5	DEFECT
// line 1269	WITHOUT_CLASSIFICATION	0.9999894421979321	WITHOUT_CLASSIFICATION	1.0557802067879218E-5	DEFECT
// line 1280	WITHOUT_CLASSIFICATION	0.9999954867789274	WITHOUT_CLASSIFICATION	4.513221072637991E-6	DEFECT
// line 1283	WITHOUT_CLASSIFICATION	0.999993129036544	WITHOUT_CLASSIFICATION	6.8709634560206925E-6	DEFECT
// line 1290	WITHOUT_CLASSIFICATION	0.9999935372084138	WITHOUT_CLASSIFICATION	6.462791586324796E-6	DEFECT
// line 1296	WITHOUT_CLASSIFICATION	0.9999894074089889	WITHOUT_CLASSIFICATION	1.0592591011171441E-5	DEFECT
// line 1299	WITHOUT_CLASSIFICATION	0.999990975586623	WITHOUT_CLASSIFICATION	9.02441337701665E-6	DEFECT
// line 1302	WITHOUT_CLASSIFICATION	0.999993272273438	WITHOUT_CLASSIFICATION	6.727726561930213E-6	DEFECT
// line 1309	WITHOUT_CLASSIFICATION	0.9999915247481644	WITHOUT_CLASSIFICATION	8.475251835619855E-6	DEFECT
// line 1313	WITHOUT_CLASSIFICATION	0.9999921265854341	WITHOUT_CLASSIFICATION	7.873414565843469E-6	DEFECT
// line 1315	WITHOUT_CLASSIFICATION	0.9999919895333761	WITHOUT_CLASSIFICATION	8.010466623872845E-6	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999940886231475	WITHOUT_CLASSIFICATION	5.911376852385922E-6	DEFECT
// line 1328	WITHOUT_CLASSIFICATION	0.999994330101817	WITHOUT_CLASSIFICATION	5.669898183008881E-6	DEFECT
// line 1335	WITHOUT_CLASSIFICATION	0.9999920618121094	WITHOUT_CLASSIFICATION	7.938187890571932E-6	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999939172305341	WITHOUT_CLASSIFICATION	6.082769465921966E-6	DEFECT
// line 1352	WITHOUT_CLASSIFICATION	0.9999913235695919	WITHOUT_CLASSIFICATION	8.676430408193388E-6	DEFECT
// line 1358	WITHOUT_CLASSIFICATION	0.9999939576110883	WITHOUT_CLASSIFICATION	6.042388911595916E-6	DEFECT
// line 1374	WITHOUT_CLASSIFICATION	0.9999898490141454	WITHOUT_CLASSIFICATION	1.015098585464294E-5	DEFECT
// line 1381	WITHOUT_CLASSIFICATION	0.9999948067223241	WITHOUT_CLASSIFICATION	5.193277675931653E-6	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999936197991186	WITHOUT_CLASSIFICATION	6.380200881424578E-6	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9999915365365158	WITHOUT_CLASSIFICATION	8.46346348418275E-6	DEFECT
// line 1415	WITHOUT_CLASSIFICATION	0.9999906029436879	WITHOUT_CLASSIFICATION	9.397056312126945E-6	DEFECT
// line 1431	WITHOUT_CLASSIFICATION	0.9999913431358038	WITHOUT_CLASSIFICATION	8.65686419622963E-6	DEFECT
// line 1434	WITHOUT_CLASSIFICATION	0.9999909878217887	WITHOUT_CLASSIFICATION	9.012178211261938E-6	DEFECT
// line 1440	WITHOUT_CLASSIFICATION	0.9999936621060436	WITHOUT_CLASSIFICATION	6.337893956535711E-6	DEFECT
// line 1443	WITHOUT_CLASSIFICATION	0.9999894555138577	WITHOUT_CLASSIFICATION	1.0544486142395077E-5	DEFECT
// line 1453	WITHOUT_CLASSIFICATION	0.9999887350204179	WITHOUT_CLASSIFICATION	1.1264979582127375E-5	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999876433883025	WITHOUT_CLASSIFICATION	1.2356611697481628E-5	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999890252196547	WITHOUT_CLASSIFICATION	1.0974780345249913E-5	DEFECT
// line 1465	WITHOUT_CLASSIFICATION	0.9999871652316888	WITHOUT_CLASSIFICATION	1.283476831115754E-5	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999903488182105	WITHOUT_CLASSIFICATION	9.651181789540443E-6	DEFECT
// line 1477	WITHOUT_CLASSIFICATION	0.9999901919476677	WITHOUT_CLASSIFICATION	9.808052332268032E-6	DEFECT
// line 1480	WITHOUT_CLASSIFICATION	0.9999945885625412	WITHOUT_CLASSIFICATION	5.411437458800087E-6	DEFECT
// line 1485	WITHOUT_CLASSIFICATION	0.9999923739521008	WITHOUT_CLASSIFICATION	7.626047899146993E-6	DEFECT
// line 1488	WITHOUT_CLASSIFICATION	0.9999936590733236	WITHOUT_CLASSIFICATION	6.340926676495591E-6	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999876600588485	WITHOUT_CLASSIFICATION	1.2339941151435309E-5	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999926984874178	WITHOUT_CLASSIFICATION	7.301512582163918E-6	DEFECT
// line 1510	WITHOUT_CLASSIFICATION	0.999993871831875	WITHOUT_CLASSIFICATION	6.128168125025745E-6	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.999990437411904	WITHOUT_CLASSIFICATION	9.562588095931468E-6	DEFECT
// line 1516	WITHOUT_CLASSIFICATION	0.9999901153369805	WITHOUT_CLASSIFICATION	9.884663019550661E-6	DEFECT
// line 1533	WITHOUT_CLASSIFICATION	0.9999907008427431	WITHOUT_CLASSIFICATION	9.299157256963163E-6	DEFECT
// line 1550	WITHOUT_CLASSIFICATION	0.9999938532865253	WITHOUT_CLASSIFICATION	6.1467134746245025E-6	DEFECT
// line 1553	WITHOUT_CLASSIFICATION	0.9999904768265041	WITHOUT_CLASSIFICATION	9.523173495854812E-6	DEFECT
// line 1556	WITHOUT_CLASSIFICATION	0.9999892426314887	WITHOUT_CLASSIFICATION	1.0757368511206234E-5	DEFECT
// line 1565	WITHOUT_CLASSIFICATION	0.9999884274310216	WITHOUT_CLASSIFICATION	1.1572568978506746E-5	DEFECT
// line 1568	WITHOUT_CLASSIFICATION	0.9999916312184673	WITHOUT_CLASSIFICATION	8.368781532637226E-6	DEFECT
// line 1571	WITHOUT_CLASSIFICATION	0.9999897847490032	WITHOUT_CLASSIFICATION	1.0215250996792577E-5	DEFECT
// line 1574	WITHOUT_CLASSIFICATION	0.9999874808722287	WITHOUT_CLASSIFICATION	1.2519127771472417E-5	DEFECT
// line 1577	WITHOUT_CLASSIFICATION	0.999989693721227	WITHOUT_CLASSIFICATION	1.0306278772987714E-5	DEFECT
// line 1587	WITHOUT_CLASSIFICATION	0.9999927583237374	WITHOUT_CLASSIFICATION	7.241676262646576E-6	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999908623540499	WITHOUT_CLASSIFICATION	9.137645949978864E-6	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999931777471596	WITHOUT_CLASSIFICATION	6.822252840498673E-6	DEFECT
// line 1600	WITHOUT_CLASSIFICATION	0.9999922158425731	WITHOUT_CLASSIFICATION	7.784157426786393E-6	DEFECT
// line 1609	WITHOUT_CLASSIFICATION	0.9999887530044568	WITHOUT_CLASSIFICATION	1.1246995543132895E-5	DEFECT
// line 1623	WITHOUT_CLASSIFICATION	0.9999895225609882	WITHOUT_CLASSIFICATION	1.0477439011795607E-5	DEFECT
// line 1626	WITHOUT_CLASSIFICATION	0.9999912552897158	WITHOUT_CLASSIFICATION	8.744710284272426E-6	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999901979656105	WITHOUT_CLASSIFICATION	9.802034389554328E-6	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999906871960761	WITHOUT_CLASSIFICATION	9.312803923986495E-6	DEFECT
// line 1638	WITHOUT_CLASSIFICATION	0.999993190145999	WITHOUT_CLASSIFICATION	6.809854001009233E-6	DEFECT
// line 1641	WITHOUT_CLASSIFICATION	0.9999908155177161	WITHOUT_CLASSIFICATION	9.184482284014668E-6	DEFECT
// line 1644	WITHOUT_CLASSIFICATION	0.9999901933140866	WITHOUT_CLASSIFICATION	9.806685913439137E-6	DEFECT
// line 1649	WITHOUT_CLASSIFICATION	0.9999889643572232	WITHOUT_CLASSIFICATION	1.1035642776874672E-5	DEFECT
// line 1655	WITHOUT_CLASSIFICATION	0.9999899075696201	WITHOUT_CLASSIFICATION	1.0092430379798576E-5	DEFECT
// line 1658	WITHOUT_CLASSIFICATION	0.9999924197097196	WITHOUT_CLASSIFICATION	7.580290280384829E-6	DEFECT
// line 1661	WITHOUT_CLASSIFICATION	0.9999918462847439	WITHOUT_CLASSIFICATION	8.153715255998677E-6	DEFECT
// line 1672	WITHOUT_CLASSIFICATION	0.9999891542001589	WITHOUT_CLASSIFICATION	1.0845799841167799E-5	DEFECT
// line 1677	WITHOUT_CLASSIFICATION	0.9999899853785366	WITHOUT_CLASSIFICATION	1.001462146346599E-5	DEFECT
// line 1687	WITHOUT_CLASSIFICATION	0.9999922045566	WITHOUT_CLASSIFICATION	7.795443399921538E-6	DEFECT
// line 1694	WITHOUT_CLASSIFICATION	0.9999880191135205	WITHOUT_CLASSIFICATION	1.1980886479502855E-5	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999803518887088	WITHOUT_CLASSIFICATION	1.9648111291182903E-5	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9999872358787151	WITHOUT_CLASSIFICATION	1.2764121285021992E-5	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9999860720979634	WITHOUT_CLASSIFICATION	1.3927902036672677E-5	DEFECT
// line 1733	WITHOUT_CLASSIFICATION	0.9999865612450514	WITHOUT_CLASSIFICATION	1.3438754948547466E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999862380969277	WITHOUT_CLASSIFICATION	1.3761903072203161E-5	DEFECT
// line 1745	WITHOUT_CLASSIFICATION	0.9999850859355104	WITHOUT_CLASSIFICATION	1.4914064489671426E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999851643134586	WITHOUT_CLASSIFICATION	1.4835686541397752E-5	DEFECT
// line 1757	WITHOUT_CLASSIFICATION	0.9999827199596472	WITHOUT_CLASSIFICATION	1.7280040352851185E-5	DEFECT
// line 1769	WITHOUT_CLASSIFICATION	0.9999826744284154	WITHOUT_CLASSIFICATION	1.7325571584574276E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999880342744446	WITHOUT_CLASSIFICATION	1.1965725555343279E-5	DEFECT
// line 1775	WITHOUT_CLASSIFICATION	0.9999846616968828	WITHOUT_CLASSIFICATION	1.533830311719528E-5	DEFECT
// line 1784	WITHOUT_CLASSIFICATION	0.9999897439528818	WITHOUT_CLASSIFICATION	1.0256047118365444E-5	DEFECT
// line 1808	WITHOUT_CLASSIFICATION	0.999996199452599	WITHOUT_CLASSIFICATION	3.8005474011116446E-6	DEFECT
// line 1814	WITHOUT_CLASSIFICATION	0.9999947564155771	WITHOUT_CLASSIFICATION	5.243584422796151E-6	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999957910490245	WITHOUT_CLASSIFICATION	4.208950975539487E-6	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999956599116849	WITHOUT_CLASSIFICATION	4.340088315003948E-6	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999974743906149	WITHOUT_CLASSIFICATION	2.525609385119801E-6	DEFECT
/*XXX 0;*/	WITHOUT_CLASSIFICATION	0.9999486804294612	WITHOUT_CLASSIFICATION	5.1319570538871824E-5	DEFECT
/*                      $$ = $3;*/	WITHOUT_CLASSIFICATION	0.9999863341358196	WITHOUT_CLASSIFICATION	1.366586418032039E-5	DEFECT
/*                  }*/	WITHOUT_CLASSIFICATION	0.9999390315274779	WITHOUT_CLASSIFICATION	6.096847252202264E-5	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9999755965053302	WITHOUT_CLASSIFICATION	2.4403494669839138E-5	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9999843120431826	WITHOUT_CLASSIFICATION	1.5687956817417676E-5	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9999493370367466	WITHOUT_CLASSIFICATION	5.0662963253405706E-5	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9999210857074526	WITHOUT_CLASSIFICATION	7.89142925473485E-5	DEFECT
/* NOEX_PRIVATE for toplevel */	WITHOUT_CLASSIFICATION	0.999978914233103	WITHOUT_CLASSIFICATION	2.1085766897020916E-5	DEFECT
/*mirko: check*/	WITHOUT_CLASSIFICATION	0.9996698050843392	WITHOUT_CLASSIFICATION	3.301949156607368E-4	DEFECT
/* Include pipes on multiple arg type*/	WITHOUT_CLASSIFICATION	0.9999929693280803	WITHOUT_CLASSIFICATION	7.03067191958723E-6	DEFECT
// line 529	WITHOUT_CLASSIFICATION	0.9999925603751358	WITHOUT_CLASSIFICATION	7.439624864213426E-6	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9999931621723959	WITHOUT_CLASSIFICATION	6.83782760423189E-6	DEFECT
/* XXX*/	WITHOUT_CLASSIFICATION	0.9999454537672682	WITHOUT_CLASSIFICATION	5.454623273178512E-5	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9999569004031889	WITHOUT_CLASSIFICATION	4.309959681125928E-5	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9996295513731038	WITHOUT_CLASSIFICATION	3.704486268961959E-4	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.999799418024492	WITHOUT_CLASSIFICATION	2.005819755079783E-4	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9998697585035825	WITHOUT_CLASSIFICATION	1.302414964175049E-4	DEFECT
// line 1827 "DefaultRubyParser.y"	WITHOUT_CLASSIFICATION	0.9999978224482547	WITHOUT_CLASSIFICATION	2.1775517453148746E-6	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999965666569489	WITHOUT_CLASSIFICATION	3.433343050984236E-6	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.999995891891817	WITHOUT_CLASSIFICATION	4.108108182928754E-6	DEFECT
// line 7713 "-"	WITHOUT_CLASSIFICATION	0.9999967117132034	WITHOUT_CLASSIFICATION	3.288286796493631E-6	DEFECT
// local scopes are argument scopes by default	WITHOUT_CLASSIFICATION	0.9999994876579718	WITHOUT_CLASSIFICATION	5.123420282506366E-7	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999988971902198	WITHOUT_CLASSIFICATION	1.1028097801903535E-6	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999988971902198	WITHOUT_CLASSIFICATION	1.1028097801903535E-6	DEFECT
// We know this is a block scope because a local scope cannot be within a local scope // If topScope was itself it would have created a LocalAsgnNode above.	WITHOUT_CLASSIFICATION	0.999224440566116	WITHOUT_CLASSIFICATION	7.755594338840193E-4	DEFECT
// ENEBO: 1.9 has CURR nodes for local/block variables.  We don't.  I believe we follow proper logic	WITHOUT_CLASSIFICATION	0.9970144894321485	WITHOUT_CLASSIFICATION	0.002985510567851409	DEFECT
// odd...but it is odd in ruby too.	WITHOUT_CLASSIFICATION	0.9999814869807598	WITHOUT_CLASSIFICATION	1.8513019240160115E-5	DEFECT
// What linenumber will the source think it starts from?	WITHOUT_CLASSIFICATION	0.9999967523458226	WITHOUT_CLASSIFICATION	3.247654177327428E-6	DEFECT
// Is this inline source (aka -e "...source...")	WITHOUT_CLASSIFICATION	0.9999945721142592	WITHOUT_CLASSIFICATION	5.427885740769132E-6	DEFECT
// We parse evals more often in source so assume an eval parse.	WITHOUT_CLASSIFICATION	0.9999996653280994	WITHOUT_CLASSIFICATION	3.346719006732409E-7	DEFECT
// Should positions added extra IDE-friendly information and leave in all newline nodes	WITHOUT_CLASSIFICATION	0.9999763502877649	WITHOUT_CLASSIFICATION	2.3649712235108365E-5	DEFECT
// Will parser parse Duby grammar Extensions	WITHOUT_CLASSIFICATION	0.9999948992202978	WITHOUT_CLASSIFICATION	5.1007797021907906E-6	DEFECT
// Should we display extra debug information while parsing?	WITHOUT_CLASSIFICATION	0.9870115395487338	WITHOUT_CLASSIFICATION	0.01298846045126636	DEFECT
// __END__ marker offset (-1 means none present)	WITHOUT_CLASSIFICATION	0.999999448793732	WITHOUT_CLASSIFICATION	5.51206267995624E-7	DEFECT
// Parser states:	WITHOUT_CLASSIFICATION	0.9999996689028392	WITHOUT_CLASSIFICATION	3.310971607996426E-7	DEFECT
// Is the parser current within a singleton (value is number of nested singletons)	WITHOUT_CLASSIFICATION	0.9999998207809871	WITHOUT_CLASSIFICATION	1.7921901283219918E-7	DEFECT
// Is the parser currently within a method definition	WITHOUT_CLASSIFICATION	0.9999701142695636	WITHOUT_CLASSIFICATION	2.988573043629855E-5	DEFECT
// LOCALVAR	WITHOUT_CLASSIFICATION	0.9999922398144226	WITHOUT_CLASSIFICATION	7.760185577331466E-6	DEFECT
// CONSTANT	WITHOUT_CLASSIFICATION	0.9999964674014705	WITHOUT_CLASSIFICATION	3.5325985294517632E-6	DEFECT
// INSTANCE VARIABLE	WITHOUT_CLASSIFICATION	0.9999937383126184	WITHOUT_CLASSIFICATION	6.261687381633008E-6	DEFECT
// Add real top to new top (unless this top is empty [only begin/end nodes or truly empty])	WITHOUT_CLASSIFICATION	0.9999993872801839	WITHOUT_CLASSIFICATION	6.12719816096485E-7	DEFECT
/* MRI: block_append */	WITHOUT_CLASSIFICATION	0.9998264370600025	WITHOUT_CLASSIFICATION	1.7356293999745264E-4	DEFECT
// Reduces overhead in interp by not set position every single line we encounter. 	WITHOUT_CLASSIFICATION	0.9999952323468752	WITHOUT_CLASSIFICATION	4.767653124833706E-6	DEFECT
// Assumption: tail is never a list node	WITHOUT_CLASSIFICATION	0.9999903146980498	WITHOUT_CLASSIFICATION	9.685301950208871E-6	DEFECT
//        return new CallOneArgNode(firstNode.getPosition(), firstNode, operator, new ArrayNode(secondNode.getPosition(), secondNode));	WITHOUT_CLASSIFICATION	0.9999998699449119	WITHOUT_CLASSIFICATION	1.300550882223056E-7	DEFECT
// Node	WITHOUT_CLASSIFICATION	0.9999964561812481	WITHOUT_CLASSIFICATION	3.5438187517763576E-6	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9670120170508975	WITHOUT_CLASSIFICATION	0.032987982949102546	DEFECT
/*case CONSTNODE:                handleUselessWarn(node, "a constant"); return;*/	WITHOUT_CLASSIFICATION	0.9999940026945083	WITHOUT_CLASSIFICATION	5.997305491688616E-6	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9670120170508975	WITHOUT_CLASSIFICATION	0.032987982949102546	DEFECT
/*case CLASSNODE: case COLON2NODE:                handleUselessWarn(node, "::"); return;*/	WITHOUT_CLASSIFICATION	0.9999908173435059	WITHOUT_CLASSIFICATION	9.182656494137358E-6	DEFECT
/*case SELFNODE:                handleUselessWarn(node, "self"); return;*/	WITHOUT_CLASSIFICATION	0.9999897556486286	WITHOUT_CLASSIFICATION	1.0244351371488812E-5	DEFECT
// FIXME: DSTR,EVSTR,STR: warning "string literal in condition"	WITHOUT_CLASSIFICATION	0.8998581202503753	WITHOUT_CLASSIFICATION	0.10014187974962477	DEFECT
/* MRI: range_op */	WITHOUT_CLASSIFICATION	0.9999798070543061	WITHOUT_CLASSIFICATION	2.019294569383854E-5	DEFECT
// Block and block pass passed in at same time....uh oh	WITHOUT_CLASSIFICATION	0.9999820451372828	WITHOUT_CLASSIFICATION	1.7954862717107162E-5	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999951982567336	WITHOUT_CLASSIFICATION	4.80174326638558E-6	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999951982567336	WITHOUT_CLASSIFICATION	4.80174326638558E-6	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999951982567336	WITHOUT_CLASSIFICATION	4.80174326638558E-6	DEFECT
// tail must be EvStrNode at this point 	WITHOUT_CLASSIFICATION	0.99995870211056	WITHOUT_CLASSIFICATION	4.129788943997452E-5	DEFECT
//Do not add an empty string node	WITHOUT_CLASSIFICATION	0.9999267082530628	WITHOUT_CLASSIFICATION	7.329174693710772E-5	DEFECT
// Zero-Argument declaration	WITHOUT_CLASSIFICATION	0.9999993909477304	WITHOUT_CLASSIFICATION	6.090522696667408E-7	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999809922045078	WITHOUT_CLASSIFICATION	1.9007795492205713E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999809922045078	WITHOUT_CLASSIFICATION	1.9007795492205713E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999809922045078	WITHOUT_CLASSIFICATION	1.9007795492205713E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999809922045078	WITHOUT_CLASSIFICATION	1.9007795492205713E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999809922045078	WITHOUT_CLASSIFICATION	1.9007795492205713E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999809922045078	WITHOUT_CLASSIFICATION	1.9007795492205713E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999640320264604	WITHOUT_CLASSIFICATION	3.596797353956174E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999640320264604	WITHOUT_CLASSIFICATION	3.596797353956174E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999640320264604	WITHOUT_CLASSIFICATION	3.596797353956174E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999640320264604	WITHOUT_CLASSIFICATION	3.596797353956174E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999640320264604	WITHOUT_CLASSIFICATION	3.596797353956174E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999736480538083	WITHOUT_CLASSIFICATION	2.6351946191630335E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999736480538083	WITHOUT_CLASSIFICATION	2.6351946191630335E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999736480538083	WITHOUT_CLASSIFICATION	2.6351946191630335E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999736480538083	WITHOUT_CLASSIFICATION	2.6351946191630335E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999736480538083	WITHOUT_CLASSIFICATION	2.6351946191630335E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999756087034153	WITHOUT_CLASSIFICATION	2.4391296584744012E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999756087034153	WITHOUT_CLASSIFICATION	2.4391296584744012E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999756087034153	WITHOUT_CLASSIFICATION	2.4391296584744012E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999756087034153	WITHOUT_CLASSIFICATION	2.4391296584744012E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999756087034153	WITHOUT_CLASSIFICATION	2.4391296584744012E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999756087034153	WITHOUT_CLASSIFICATION	2.4391296584744012E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999557162859682	WITHOUT_CLASSIFICATION	4.428371403173917E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999557162859682	WITHOUT_CLASSIFICATION	4.428371403173917E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999557162859682	WITHOUT_CLASSIFICATION	4.428371403173917E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999557162859682	WITHOUT_CLASSIFICATION	4.428371403173917E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999557162859682	WITHOUT_CLASSIFICATION	4.428371403173917E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999630684346396	WITHOUT_CLASSIFICATION	3.693156536048857E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999630684346396	WITHOUT_CLASSIFICATION	3.693156536048857E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999630684346396	WITHOUT_CLASSIFICATION	3.693156536048857E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999630684346396	WITHOUT_CLASSIFICATION	3.693156536048857E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999630684346396	WITHOUT_CLASSIFICATION	3.693156536048857E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.999967962020762	WITHOUT_CLASSIFICATION	3.203797923802179E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.999967962020762	WITHOUT_CLASSIFICATION	3.203797923802179E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.999967962020762	WITHOUT_CLASSIFICATION	3.203797923802179E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.999967962020762	WITHOUT_CLASSIFICATION	3.203797923802179E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.999967962020762	WITHOUT_CLASSIFICATION	3.203797923802179E-5	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9999965889017406	WITHOUT_CLASSIFICATION	3.4110982592729072E-6	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999993431949216	WITHOUT_CLASSIFICATION	6.568050785026358E-7	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999983713259725	WITHOUT_CLASSIFICATION	1.6286740275514243E-6	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999981553340813	WITHOUT_CLASSIFICATION	1.8446659186463928E-6	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.999998453336487	WITHOUT_CLASSIFICATION	1.5466635129521954E-6	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999945422337956	WITHOUT_CLASSIFICATION	5.457766204395789E-6	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.999994020323269	WITHOUT_CLASSIFICATION	5.979676730988843E-6	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999956430341616	WITHOUT_CLASSIFICATION	4.356965838455491E-6	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.999991959323476	WITHOUT_CLASSIFICATION	8.04067652403423E-6	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999950708826298	WITHOUT_CLASSIFICATION	4.9291173701238295E-6	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999927434475314	WITHOUT_CLASSIFICATION	7.2565524686437875E-6	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9999921188829066	WITHOUT_CLASSIFICATION	7.881117093329115E-6	DEFECT
// line 280	WITHOUT_CLASSIFICATION	0.9999968440239398	WITHOUT_CLASSIFICATION	3.1559760600432393E-6	DEFECT
// line 283	WITHOUT_CLASSIFICATION	0.9999951911220977	WITHOUT_CLASSIFICATION	4.808877902393709E-6	DEFECT
// line 296	WITHOUT_CLASSIFICATION	0.9999925941096637	WITHOUT_CLASSIFICATION	7.405890336284663E-6	DEFECT
// line 324	WITHOUT_CLASSIFICATION	0.9999925879156275	WITHOUT_CLASSIFICATION	7.412084372556217E-6	DEFECT
// line 327	WITHOUT_CLASSIFICATION	0.9999930640021872	WITHOUT_CLASSIFICATION	6.935997812645E-6	DEFECT
// line 331	WITHOUT_CLASSIFICATION	0.9999950997436039	WITHOUT_CLASSIFICATION	4.900256396058527E-6	DEFECT
// line 333	WITHOUT_CLASSIFICATION	0.9999939393919203	WITHOUT_CLASSIFICATION	6.060608079647043E-6	DEFECT
// line 336	WITHOUT_CLASSIFICATION	0.9999931344597951	WITHOUT_CLASSIFICATION	6.8655402048727305E-6	DEFECT
// line 342	WITHOUT_CLASSIFICATION	0.9999934988063308	WITHOUT_CLASSIFICATION	6.501193669190643E-6	DEFECT
// line 345	WITHOUT_CLASSIFICATION	0.9999931603979979	WITHOUT_CLASSIFICATION	6.839602002101273E-6	DEFECT
// line 348	WITHOUT_CLASSIFICATION	0.9999952005326253	WITHOUT_CLASSIFICATION	4.799467374726041E-6	DEFECT
// line 354	WITHOUT_CLASSIFICATION	0.9999924861515189	WITHOUT_CLASSIFICATION	7.5138484811377826E-6	DEFECT
// line 368	WITHOUT_CLASSIFICATION	0.9999944839013936	WITHOUT_CLASSIFICATION	5.516098606461012E-6	DEFECT
// line 377	WITHOUT_CLASSIFICATION	0.9999933949107687	WITHOUT_CLASSIFICATION	6.60508923136572E-6	DEFECT
// line 388	WITHOUT_CLASSIFICATION	0.999995927326124	WITHOUT_CLASSIFICATION	4.0726738760734035E-6	DEFECT
// line 392	WITHOUT_CLASSIFICATION	0.9999933279965559	WITHOUT_CLASSIFICATION	6.672003444083716E-6	DEFECT
// line 397	WITHOUT_CLASSIFICATION	0.999991396790626	WITHOUT_CLASSIFICATION	8.603209374031505E-6	DEFECT
// line 429	WITHOUT_CLASSIFICATION	0.9999930959554222	WITHOUT_CLASSIFICATION	6.9040445778468285E-6	DEFECT
// line 432	WITHOUT_CLASSIFICATION	0.9999933925126567	WITHOUT_CLASSIFICATION	6.60748734326387E-6	DEFECT
// line 436	WITHOUT_CLASSIFICATION	0.9999916648737532	WITHOUT_CLASSIFICATION	8.33512624668169E-6	DEFECT
// line 445	WITHOUT_CLASSIFICATION	0.9999935404041541	WITHOUT_CLASSIFICATION	6.4595958459474445E-6	DEFECT
// line 448	WITHOUT_CLASSIFICATION	0.9999955985317446	WITHOUT_CLASSIFICATION	4.4014682554175236E-6	DEFECT
// line 454	WITHOUT_CLASSIFICATION	0.9999934774157483	WITHOUT_CLASSIFICATION	6.522584251726459E-6	DEFECT
// line 459	WITHOUT_CLASSIFICATION	0.9999928980671937	WITHOUT_CLASSIFICATION	7.101932806351274E-6	DEFECT
// line 466	WITHOUT_CLASSIFICATION	0.9999927287714084	WITHOUT_CLASSIFICATION	7.271228591674952E-6	DEFECT
// line 469	WITHOUT_CLASSIFICATION	0.9999915935670591	WITHOUT_CLASSIFICATION	8.406432940945391E-6	DEFECT
// line 478	WITHOUT_CLASSIFICATION	0.9999948121681757	WITHOUT_CLASSIFICATION	5.1878318243761325E-6	DEFECT
// line 481	WITHOUT_CLASSIFICATION	0.999995676010715	WITHOUT_CLASSIFICATION	4.323989284968429E-6	DEFECT
// line 488	WITHOUT_CLASSIFICATION	0.9999956162174851	WITHOUT_CLASSIFICATION	4.383782514908329E-6	DEFECT
// line 494	WITHOUT_CLASSIFICATION	0.9999931021147928	WITHOUT_CLASSIFICATION	6.89788520726409E-6	DEFECT
// line 497	WITHOUT_CLASSIFICATION	0.9999909296688031	WITHOUT_CLASSIFICATION	9.070331196957898E-6	DEFECT
// line 503	WITHOUT_CLASSIFICATION	0.9999934065136372	WITHOUT_CLASSIFICATION	6.593486362729929E-6	DEFECT
// line 506	WITHOUT_CLASSIFICATION	0.9999931316387463	WITHOUT_CLASSIFICATION	6.868361253816588E-6	DEFECT
// line 509	WITHOUT_CLASSIFICATION	0.9999930506078076	WITHOUT_CLASSIFICATION	6.949392192384305E-6	DEFECT
// line 512	WITHOUT_CLASSIFICATION	0.999993883432337	WITHOUT_CLASSIFICATION	6.1165676629407925E-6	DEFECT
// line 521	WITHOUT_CLASSIFICATION	0.9999937214938469	WITHOUT_CLASSIFICATION	6.278506153153887E-6	DEFECT
// line 526	WITHOUT_CLASSIFICATION	0.9999915069046257	WITHOUT_CLASSIFICATION	8.49309537424568E-6	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999945890167491	WITHOUT_CLASSIFICATION	5.410983250828794E-6	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999910115680981	WITHOUT_CLASSIFICATION	8.988431901895151E-6	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999911534506207	WITHOUT_CLASSIFICATION	8.846549379333734E-6	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999918110216908	WITHOUT_CLASSIFICATION	8.188978309287881E-6	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9999936342982779	WITHOUT_CLASSIFICATION	6.36570172212571E-6	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.999989469737111	WITHOUT_CLASSIFICATION	1.0530262889069784E-5	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999907442514351	WITHOUT_CLASSIFICATION	9.255748564920044E-6	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999905722287541	WITHOUT_CLASSIFICATION	9.427771245844705E-6	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999930842461262	WITHOUT_CLASSIFICATION	6.915753873846425E-6	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999948719226315	WITHOUT_CLASSIFICATION	5.128077368461858E-6	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999942347716957	WITHOUT_CLASSIFICATION	5.765228304321286E-6	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999952342567643	WITHOUT_CLASSIFICATION	4.765743235752143E-6	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999926301760474	WITHOUT_CLASSIFICATION	7.369823952511165E-6	DEFECT
// line 534	WITHOUT_CLASSIFICATION	0.9999927885409106	WITHOUT_CLASSIFICATION	7.211459089431088E-6	DEFECT
// line 549	WITHOUT_CLASSIFICATION	0.9999921200182638	WITHOUT_CLASSIFICATION	7.879981736171515E-6	DEFECT
// line 552	WITHOUT_CLASSIFICATION	0.9999935665827984	WITHOUT_CLASSIFICATION	6.433417201612431E-6	DEFECT
// line 558	WITHOUT_CLASSIFICATION	0.9999955199980454	WITHOUT_CLASSIFICATION	4.480001954692859E-6	DEFECT
// line 561	WITHOUT_CLASSIFICATION	0.9999920029798745	WITHOUT_CLASSIFICATION	7.997020125534589E-6	DEFECT
// line 571	WITHOUT_CLASSIFICATION	0.9999923555088486	WITHOUT_CLASSIFICATION	7.644491151496488E-6	DEFECT
// line 574	WITHOUT_CLASSIFICATION	0.9999905211715313	WITHOUT_CLASSIFICATION	9.478828468678884E-6	DEFECT
// line 579	WITHOUT_CLASSIFICATION	0.9999909340139062	WITHOUT_CLASSIFICATION	9.065986093975648E-6	DEFECT
// line 586	WITHOUT_CLASSIFICATION	0.9999941073086708	WITHOUT_CLASSIFICATION	5.8926913292103095E-6	DEFECT
// line 589	WITHOUT_CLASSIFICATION	0.9999949228486149	WITHOUT_CLASSIFICATION	5.077151385090766E-6	DEFECT
// line 592	WITHOUT_CLASSIFICATION	0.9999928628356802	WITHOUT_CLASSIFICATION	7.137164319706517E-6	DEFECT
// line 595	WITHOUT_CLASSIFICATION	0.9999929837988826	WITHOUT_CLASSIFICATION	7.016201117483055E-6	DEFECT
// line 598	WITHOUT_CLASSIFICATION	0.9999947874096078	WITHOUT_CLASSIFICATION	5.212590392275704E-6	DEFECT
// line 623	WITHOUT_CLASSIFICATION	0.9999898339896077	WITHOUT_CLASSIFICATION	1.0166010392164421E-5	DEFECT
// line 627	WITHOUT_CLASSIFICATION	0.999989676250197	WITHOUT_CLASSIFICATION	1.0323749803121732E-5	DEFECT
// line 630	WITHOUT_CLASSIFICATION	0.9999928270824655	WITHOUT_CLASSIFICATION	7.1729175344583615E-6	DEFECT
// line 633	WITHOUT_CLASSIFICATION	0.9999901869603268	WITHOUT_CLASSIFICATION	9.813039673172932E-6	DEFECT
// line 639	WITHOUT_CLASSIFICATION	0.9999901960341543	WITHOUT_CLASSIFICATION	9.803965845787113E-6	DEFECT
// line 648	WITHOUT_CLASSIFICATION	0.999992639218789	WITHOUT_CLASSIFICATION	7.360781210975797E-6	DEFECT
// line 657	WITHOUT_CLASSIFICATION	0.9999873233916053	WITHOUT_CLASSIFICATION	1.2676608394751586E-5	DEFECT
// line 661	WITHOUT_CLASSIFICATION	0.9999921564562732	WITHOUT_CLASSIFICATION	7.84354372676884E-6	DEFECT
// line 666	WITHOUT_CLASSIFICATION	0.9999919354296936	WITHOUT_CLASSIFICATION	8.064570306554583E-6	DEFECT
// line 678	WITHOUT_CLASSIFICATION	0.9999927839544377	WITHOUT_CLASSIFICATION	7.2160455623224425E-6	DEFECT
// line 682	WITHOUT_CLASSIFICATION	0.999993415209934	WITHOUT_CLASSIFICATION	6.5847900659305715E-6	DEFECT
// line 688	WITHOUT_CLASSIFICATION	0.9999938572830024	WITHOUT_CLASSIFICATION	6.142716997656233E-6	DEFECT
// line 699	WITHOUT_CLASSIFICATION	0.9999895472831841	WITHOUT_CLASSIFICATION	1.0452716815820604E-5	DEFECT
// line 706	WITHOUT_CLASSIFICATION	0.9999907896254172	WITHOUT_CLASSIFICATION	9.210374582875124E-6	DEFECT
// line 708	WITHOUT_CLASSIFICATION	0.9999946008680497	WITHOUT_CLASSIFICATION	5.3991319503192465E-6	DEFECT
// line 727	WITHOUT_CLASSIFICATION	0.9999931534259608	WITHOUT_CLASSIFICATION	6.846574039096131E-6	DEFECT
// line 737	WITHOUT_CLASSIFICATION	0.9999933131465686	WITHOUT_CLASSIFICATION	6.6868534313967185E-6	DEFECT
// line 753	WITHOUT_CLASSIFICATION	0.9999894003276932	WITHOUT_CLASSIFICATION	1.0599672306748094E-5	DEFECT
// line 779	WITHOUT_CLASSIFICATION	0.9999925744314189	WITHOUT_CLASSIFICATION	7.4255685812039655E-6	DEFECT
// line 801	WITHOUT_CLASSIFICATION	0.9999963310243528	WITHOUT_CLASSIFICATION	3.668975647282073E-6	DEFECT
// line 808	WITHOUT_CLASSIFICATION	0.9999962005024757	WITHOUT_CLASSIFICATION	3.7994975243986104E-6	DEFECT
// line 811	WITHOUT_CLASSIFICATION	0.9999960007476039	WITHOUT_CLASSIFICATION	3.999252396119064E-6	DEFECT
// line 817	WITHOUT_CLASSIFICATION	0.9999938597268633	WITHOUT_CLASSIFICATION	6.140273136729276E-6	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999947301407927	WITHOUT_CLASSIFICATION	5.2698592073392385E-6	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999942912623802	WITHOUT_CLASSIFICATION	5.7087376198042835E-6	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999949933304969	WITHOUT_CLASSIFICATION	5.006669503121172E-6	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999917527426737	WITHOUT_CLASSIFICATION	8.24725732632472E-6	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999947063358468	WITHOUT_CLASSIFICATION	5.293664153256072E-6	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999917453188352	WITHOUT_CLASSIFICATION	8.254681164766728E-6	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999923705474777	WITHOUT_CLASSIFICATION	7.629452522354879E-6	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999925761048154	WITHOUT_CLASSIFICATION	7.4238951846078525E-6	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999960086422892	WITHOUT_CLASSIFICATION	3.991357710797456E-6	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999937920592747	WITHOUT_CLASSIFICATION	6.207940725211029E-6	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999954665014312	WITHOUT_CLASSIFICATION	4.53349856873808E-6	DEFECT
// line 820	WITHOUT_CLASSIFICATION	0.9999963548863363	WITHOUT_CLASSIFICATION	3.6451136637176133E-6	DEFECT
// line 826	WITHOUT_CLASSIFICATION	0.9999942018336213	WITHOUT_CLASSIFICATION	5.798166378746433E-6	DEFECT
// line 829	WITHOUT_CLASSIFICATION	0.9999949212550069	WITHOUT_CLASSIFICATION	5.078744993182112E-6	DEFECT
// line 832	WITHOUT_CLASSIFICATION	0.9999953469765017	WITHOUT_CLASSIFICATION	4.653023498240049E-6	DEFECT
// line 851	WITHOUT_CLASSIFICATION	0.9999953390854264	WITHOUT_CLASSIFICATION	4.660914573622237E-6	DEFECT
// line 857	WITHOUT_CLASSIFICATION	0.9999935917507858	WITHOUT_CLASSIFICATION	6.4082492140434874E-6	DEFECT
// line 860	WITHOUT_CLASSIFICATION	0.9999950307437583	WITHOUT_CLASSIFICATION	4.969256241662695E-6	DEFECT
// line 863	WITHOUT_CLASSIFICATION	0.9999931391475341	WITHOUT_CLASSIFICATION	6.860852465960955E-6	DEFECT
// line 866	WITHOUT_CLASSIFICATION	0.9999945462737911	WITHOUT_CLASSIFICATION	5.453726208885299E-6	DEFECT
// line 869	WITHOUT_CLASSIFICATION	0.9999937015542408	WITHOUT_CLASSIFICATION	6.298445759155885E-6	DEFECT
// line 875	WITHOUT_CLASSIFICATION	0.9999928896521515	WITHOUT_CLASSIFICATION	7.110347848471774E-6	DEFECT
// line 884	WITHOUT_CLASSIFICATION	0.9999949201788559	WITHOUT_CLASSIFICATION	5.0798211440417965E-6	DEFECT
// line 887	WITHOUT_CLASSIFICATION	0.9999949681322535	WITHOUT_CLASSIFICATION	5.031867746538332E-6	DEFECT
// line 890	WITHOUT_CLASSIFICATION	0.999996295470655	WITHOUT_CLASSIFICATION	3.704529344817305E-6	DEFECT
// line 902	WITHOUT_CLASSIFICATION	0.9999941743099287	WITHOUT_CLASSIFICATION	5.825690071335505E-6	DEFECT
// line 909	WITHOUT_CLASSIFICATION	0.9999937531932975	WITHOUT_CLASSIFICATION	6.246806702535145E-6	DEFECT
// line 912	WITHOUT_CLASSIFICATION	0.9999933386445733	WITHOUT_CLASSIFICATION	6.661355426728373E-6	DEFECT
// line 916	WITHOUT_CLASSIFICATION	0.999991966699617	WITHOUT_CLASSIFICATION	8.033300382987861E-6	DEFECT
// line 922	WITHOUT_CLASSIFICATION	0.9999934240457319	WITHOUT_CLASSIFICATION	6.575954268157477E-6	DEFECT
// line 928	WITHOUT_CLASSIFICATION	0.9999947341305304	WITHOUT_CLASSIFICATION	5.265869469593784E-6	DEFECT
// line 941	WITHOUT_CLASSIFICATION	0.9999929731101627	WITHOUT_CLASSIFICATION	7.026889837420094E-6	DEFECT
// line 947	WITHOUT_CLASSIFICATION	0.9999910040683578	WITHOUT_CLASSIFICATION	8.995931642126802E-6	DEFECT
// line 951	WITHOUT_CLASSIFICATION	0.9999929524069517	WITHOUT_CLASSIFICATION	7.047593048238629E-6	DEFECT
// line 955	WITHOUT_CLASSIFICATION	0.999992518571054	WITHOUT_CLASSIFICATION	7.481428946079023E-6	DEFECT
// line 965	WITHOUT_CLASSIFICATION	0.9999900347489004	WITHOUT_CLASSIFICATION	9.965251099717835E-6	DEFECT
// line 969	WITHOUT_CLASSIFICATION	0.999992025258634	WITHOUT_CLASSIFICATION	7.974741366035099E-6	DEFECT
// line 977	WITHOUT_CLASSIFICATION	0.9999913538263221	WITHOUT_CLASSIFICATION	8.646173677973455E-6	DEFECT
// line 983	WITHOUT_CLASSIFICATION	0.9999939278710209	WITHOUT_CLASSIFICATION	6.07212897907883E-6	DEFECT
// line 1013	WITHOUT_CLASSIFICATION	0.999993290901415	WITHOUT_CLASSIFICATION	6.709098584993388E-6	DEFECT
// line 1023	WITHOUT_CLASSIFICATION	0.9999929877482053	WITHOUT_CLASSIFICATION	7.0122517947268585E-6	DEFECT
// line 1035	WITHOUT_CLASSIFICATION	0.999993007484798	WITHOUT_CLASSIFICATION	6.9925152019846774E-6	DEFECT
// line 1041	WITHOUT_CLASSIFICATION	0.9999940329526821	WITHOUT_CLASSIFICATION	5.967047317835616E-6	DEFECT
// line 1043	WITHOUT_CLASSIFICATION	0.9999918224818027	WITHOUT_CLASSIFICATION	8.17751819719396E-6	DEFECT
// line 1054	WITHOUT_CLASSIFICATION	0.9999923331667216	WITHOUT_CLASSIFICATION	7.666833278309257E-6	DEFECT
// line 1057	WITHOUT_CLASSIFICATION	0.9999916112100316	WITHOUT_CLASSIFICATION	8.388789968518375E-6	DEFECT
// line 1060	WITHOUT_CLASSIFICATION	0.9999928071339179	WITHOUT_CLASSIFICATION	7.192866081994094E-6	DEFECT
// line 1069	WITHOUT_CLASSIFICATION	0.9999916191845416	WITHOUT_CLASSIFICATION	8.380815458417083E-6	DEFECT
// line 1075	WITHOUT_CLASSIFICATION	0.999990618748873	WITHOUT_CLASSIFICATION	9.381251126933032E-6	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999934391068362	WITHOUT_CLASSIFICATION	6.560893163783295E-6	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999939553759153	WITHOUT_CLASSIFICATION	6.044624084718599E-6	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999934348723162	WITHOUT_CLASSIFICATION	6.565127683863304E-6	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999944810686049	WITHOUT_CLASSIFICATION	5.518931395127252E-6	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999940539920917	WITHOUT_CLASSIFICATION	5.946007908186291E-6	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999943687331558	WITHOUT_CLASSIFICATION	5.631266844095569E-6	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999924653746457	WITHOUT_CLASSIFICATION	7.534625354199398E-6	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999921573494872	WITHOUT_CLASSIFICATION	7.842650512755986E-6	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999883491192522	WITHOUT_CLASSIFICATION	1.1650880747816337E-5	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999922911567094	WITHOUT_CLASSIFICATION	7.708843290524423E-6	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.999990969085668	WITHOUT_CLASSIFICATION	9.030914332000771E-6	DEFECT
// line 1078	WITHOUT_CLASSIFICATION	0.9999949052339111	WITHOUT_CLASSIFICATION	5.094766088876853E-6	DEFECT
// line 1084	WITHOUT_CLASSIFICATION	0.9999947999103457	WITHOUT_CLASSIFICATION	5.200089654309105E-6	DEFECT
// line 1087	WITHOUT_CLASSIFICATION	0.9999948493618646	WITHOUT_CLASSIFICATION	5.150638135368859E-6	DEFECT
// line 1090	WITHOUT_CLASSIFICATION	0.9999935640246038	WITHOUT_CLASSIFICATION	6.435975396212539E-6	DEFECT
// line 1093	WITHOUT_CLASSIFICATION	0.9999824209417367	WITHOUT_CLASSIFICATION	1.7579058263336564E-5	DEFECT
// line 1114	WITHOUT_CLASSIFICATION	0.9999923132825327	WITHOUT_CLASSIFICATION	7.686717467421507E-6	DEFECT
// line 1116	WITHOUT_CLASSIFICATION	0.9999920818350071	WITHOUT_CLASSIFICATION	7.91816499297362E-6	DEFECT
// line 1118	WITHOUT_CLASSIFICATION	0.9999960151232699	WITHOUT_CLASSIFICATION	3.984876730203851E-6	DEFECT
// line 1124	WITHOUT_CLASSIFICATION	0.9999908869052182	WITHOUT_CLASSIFICATION	9.113094781698651E-6	DEFECT
// line 1126	WITHOUT_CLASSIFICATION	0.9999912520438188	WITHOUT_CLASSIFICATION	8.747956181238303E-6	DEFECT
// line 1138	WITHOUT_CLASSIFICATION	0.9999949083798444	WITHOUT_CLASSIFICATION	5.0916201556054185E-6	DEFECT
// line 1144	WITHOUT_CLASSIFICATION	0.9999922530873612	WITHOUT_CLASSIFICATION	7.746912638796597E-6	DEFECT
// line 1149	WITHOUT_CLASSIFICATION	0.9999913264851121	WITHOUT_CLASSIFICATION	8.673514887809058E-6	DEFECT
// line 1155	WITHOUT_CLASSIFICATION	0.9999925025027826	WITHOUT_CLASSIFICATION	7.497497217334893E-6	DEFECT
// line 1162	WITHOUT_CLASSIFICATION	0.999991588412832	WITHOUT_CLASSIFICATION	8.41158716794113E-6	DEFECT
// line 1173	WITHOUT_CLASSIFICATION	0.999988316995641	WITHOUT_CLASSIFICATION	1.168300435905048E-5	DEFECT
// line 1179	WITHOUT_CLASSIFICATION	0.999989198187842	WITHOUT_CLASSIFICATION	1.080181215796854E-5	DEFECT
// line 1182	WITHOUT_CLASSIFICATION	0.9999957133344733	WITHOUT_CLASSIFICATION	4.286665526652185E-6	DEFECT
// line 1190	WITHOUT_CLASSIFICATION	0.9999942189294023	WITHOUT_CLASSIFICATION	5.781070597650908E-6	DEFECT
// line 1196	WITHOUT_CLASSIFICATION	0.9999906088642914	WITHOUT_CLASSIFICATION	9.391135708551412E-6	DEFECT
// line 1213	WITHOUT_CLASSIFICATION	0.9999913506568081	WITHOUT_CLASSIFICATION	8.649343192009206E-6	DEFECT
// line 1217	WITHOUT_CLASSIFICATION	0.999989696653415	WITHOUT_CLASSIFICATION	1.0303346585059625E-5	DEFECT
// line 1231	WITHOUT_CLASSIFICATION	0.9999935497035377	WITHOUT_CLASSIFICATION	6.45029646241046E-6	DEFECT
// line 1236	WITHOUT_CLASSIFICATION	0.9999910755995057	WITHOUT_CLASSIFICATION	8.924400494361251E-6	DEFECT
// line 1244	WITHOUT_CLASSIFICATION	0.9999901432941105	WITHOUT_CLASSIFICATION	9.8567058894367E-6	DEFECT
// line 1254	WITHOUT_CLASSIFICATION	0.9999904201253255	WITHOUT_CLASSIFICATION	9.579874674563592E-6	DEFECT
// line 1258	WITHOUT_CLASSIFICATION	0.9999939276196836	WITHOUT_CLASSIFICATION	6.072380316419081E-6	DEFECT
// line 1264	WITHOUT_CLASSIFICATION	0.999988980026337	WITHOUT_CLASSIFICATION	1.1019973663098383E-5	DEFECT
// line 1270	WITHOUT_CLASSIFICATION	0.9999915567299558	WITHOUT_CLASSIFICATION	8.44327004433025E-6	DEFECT
// line 1273	WITHOUT_CLASSIFICATION	0.9999892664280474	WITHOUT_CLASSIFICATION	1.0733571952547829E-5	DEFECT
// line 1276	WITHOUT_CLASSIFICATION	0.9999882936096981	WITHOUT_CLASSIFICATION	1.1706390301999014E-5	DEFECT
// line 1279	WITHOUT_CLASSIFICATION	0.999990009297456	WITHOUT_CLASSIFICATION	9.990702544028021E-6	DEFECT
// line 1282	WITHOUT_CLASSIFICATION	0.9999946018706389	WITHOUT_CLASSIFICATION	5.398129361114531E-6	DEFECT
// line 1289	WITHOUT_CLASSIFICATION	0.9999938099854108	WITHOUT_CLASSIFICATION	6.190014589164281E-6	DEFECT
// line 1292	WITHOUT_CLASSIFICATION	0.9999919590431969	WITHOUT_CLASSIFICATION	8.04095680302027E-6	DEFECT
// line 1295	WITHOUT_CLASSIFICATION	0.9999902085611542	WITHOUT_CLASSIFICATION	9.791438845808557E-6	DEFECT
// line 1298	WITHOUT_CLASSIFICATION	0.9999936749912174	WITHOUT_CLASSIFICATION	6.3250087826750695E-6	DEFECT
// line 1305	WITHOUT_CLASSIFICATION	0.9999924656979162	WITHOUT_CLASSIFICATION	7.534302083708432E-6	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999939172305341	WITHOUT_CLASSIFICATION	6.082769465921966E-6	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999936197991186	WITHOUT_CLASSIFICATION	6.380200881424578E-6	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9999915365365158	WITHOUT_CLASSIFICATION	8.46346348418275E-6	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999936669863463	WITHOUT_CLASSIFICATION	6.333013653739162E-6	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999890252196547	WITHOUT_CLASSIFICATION	1.0974780345249913E-5	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999903488182105	WITHOUT_CLASSIFICATION	9.651181789540443E-6	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999876600588485	WITHOUT_CLASSIFICATION	1.2339941151435309E-5	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999926984874178	WITHOUT_CLASSIFICATION	7.301512582163918E-6	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999908623540499	WITHOUT_CLASSIFICATION	9.137645949978864E-6	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999931777471596	WITHOUT_CLASSIFICATION	6.822252840498673E-6	DEFECT
// line 1308	WITHOUT_CLASSIFICATION	0.999995100961265	WITHOUT_CLASSIFICATION	4.899038735079754E-6	DEFECT
// line 1311	WITHOUT_CLASSIFICATION	0.9999935907944069	WITHOUT_CLASSIFICATION	6.409205593151744E-6	DEFECT
// line 1317	WITHOUT_CLASSIFICATION	0.9999901514672739	WITHOUT_CLASSIFICATION	9.848532726146353E-6	DEFECT
// line 1323	WITHOUT_CLASSIFICATION	0.9999918216753708	WITHOUT_CLASSIFICATION	8.17832462926773E-6	DEFECT
// line 1326	WITHOUT_CLASSIFICATION	0.9999905867703383	WITHOUT_CLASSIFICATION	9.41322966168676E-6	DEFECT
// line 1329	WITHOUT_CLASSIFICATION	0.9999917537870862	WITHOUT_CLASSIFICATION	8.24621291382157E-6	DEFECT
// line 1337	WITHOUT_CLASSIFICATION	0.9999918156838352	WITHOUT_CLASSIFICATION	8.1843161647579E-6	DEFECT
// line 1342	WITHOUT_CLASSIFICATION	0.9999917604931419	WITHOUT_CLASSIFICATION	8.239506858090838E-6	DEFECT
// line 1345	WITHOUT_CLASSIFICATION	0.9999913316007226	WITHOUT_CLASSIFICATION	8.668399277303527E-6	DEFECT
// line 1354	WITHOUT_CLASSIFICATION	0.9999904770735225	WITHOUT_CLASSIFICATION	9.522926477480917E-6	DEFECT
// line 1359	WITHOUT_CLASSIFICATION	0.9999912252620942	WITHOUT_CLASSIFICATION	8.77473790577762E-6	DEFECT
// line 1366	WITHOUT_CLASSIFICATION	0.9999909507203749	WITHOUT_CLASSIFICATION	9.04927962501208E-6	DEFECT
// line 1369	WITHOUT_CLASSIFICATION	0.9999895567207642	WITHOUT_CLASSIFICATION	1.0443279235706213E-5	DEFECT
// line 1373	WITHOUT_CLASSIFICATION	0.9999900925239281	WITHOUT_CLASSIFICATION	9.907476071828611E-6	DEFECT
// line 1377	WITHOUT_CLASSIFICATION	0.999991643279935	WITHOUT_CLASSIFICATION	8.356720065146675E-6	DEFECT
// line 1383	WITHOUT_CLASSIFICATION	0.9999938172192918	WITHOUT_CLASSIFICATION	6.182780708267913E-6	DEFECT
// line 1399	WITHOUT_CLASSIFICATION	0.9999912154136986	WITHOUT_CLASSIFICATION	8.784586301472889E-6	DEFECT
// line 1401	WITHOUT_CLASSIFICATION	0.9999930688086732	WITHOUT_CLASSIFICATION	6.931191326749879E-6	DEFECT
// line 1406	WITHOUT_CLASSIFICATION	0.9999907137721588	WITHOUT_CLASSIFICATION	9.286227841214712E-6	DEFECT
// line 1417	WITHOUT_CLASSIFICATION	0.9999883501677458	WITHOUT_CLASSIFICATION	1.1649832254150378E-5	DEFECT
// line 1424	WITHOUT_CLASSIFICATION	0.9999903124231867	WITHOUT_CLASSIFICATION	9.687576813217208E-6	DEFECT
// line 1427	WITHOUT_CLASSIFICATION	0.9999893316328766	WITHOUT_CLASSIFICATION	1.0668367123354664E-5	DEFECT
// line 1430	WITHOUT_CLASSIFICATION	0.99999209631407	WITHOUT_CLASSIFICATION	7.90368592997552E-6	DEFECT
// line 1433	WITHOUT_CLASSIFICATION	0.9999896665858573	WITHOUT_CLASSIFICATION	1.0333414142636455E-5	DEFECT
// line 1436	WITHOUT_CLASSIFICATION	0.9999880123218607	WITHOUT_CLASSIFICATION	1.1987678139246747E-5	DEFECT
// line 1442	WITHOUT_CLASSIFICATION	0.9999914202061276	WITHOUT_CLASSIFICATION	8.57979387242778E-6	DEFECT
// line 1445	WITHOUT_CLASSIFICATION	0.9999907056760682	WITHOUT_CLASSIFICATION	9.294323931828809E-6	DEFECT
// line 1458	WITHOUT_CLASSIFICATION	0.9999929976083365	WITHOUT_CLASSIFICATION	7.002391663489013E-6	DEFECT
// line 1464	WITHOUT_CLASSIFICATION	0.9999892655872704	WITHOUT_CLASSIFICATION	1.0734412729565174E-5	DEFECT
// line 1489	WITHOUT_CLASSIFICATION	0.999992798926537	WITHOUT_CLASSIFICATION	7.201073462964789E-6	DEFECT
// line 1493	WITHOUT_CLASSIFICATION	0.999983610621447	WITHOUT_CLASSIFICATION	1.6389378552991676E-5	DEFECT
// line 1507	WITHOUT_CLASSIFICATION	0.9999915267341657	WITHOUT_CLASSIFICATION	8.473265834369019E-6	DEFECT
// line 1519	WITHOUT_CLASSIFICATION	0.9999914320492556	WITHOUT_CLASSIFICATION	8.567950744371793E-6	DEFECT
// line 1532	WITHOUT_CLASSIFICATION	0.9999914487721702	WITHOUT_CLASSIFICATION	8.551227829799997E-6	DEFECT
// line 1538	WITHOUT_CLASSIFICATION	0.9999937469663871	WITHOUT_CLASSIFICATION	6.25303361286085E-6	DEFECT
// line 1542	WITHOUT_CLASSIFICATION	0.9999903456736049	WITHOUT_CLASSIFICATION	9.654326395055324E-6	DEFECT
// line 1557	WITHOUT_CLASSIFICATION	0.9999897913365111	WITHOUT_CLASSIFICATION	1.0208663488750248E-5	DEFECT
// line 1573	WITHOUT_CLASSIFICATION	0.9999870520316371	WITHOUT_CLASSIFICATION	1.2947968362977248E-5	DEFECT
// line 1591	WITHOUT_CLASSIFICATION	0.999991279353176	WITHOUT_CLASSIFICATION	8.72064682398586E-6	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999899604326075	WITHOUT_CLASSIFICATION	1.0039567392544257E-5	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999901979656105	WITHOUT_CLASSIFICATION	9.802034389554328E-6	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999906871960761	WITHOUT_CLASSIFICATION	9.312803923986495E-6	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999803518887088	WITHOUT_CLASSIFICATION	1.9648111291182903E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999856954082211	WITHOUT_CLASSIFICATION	1.4304591778926649E-5	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9999860720979634	WITHOUT_CLASSIFICATION	1.3927902036672677E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999862380969277	WITHOUT_CLASSIFICATION	1.3761903072203161E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999851643134586	WITHOUT_CLASSIFICATION	1.4835686541397752E-5	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999957910490245	WITHOUT_CLASSIFICATION	4.208950975539487E-6	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999956599116849	WITHOUT_CLASSIFICATION	4.340088315003948E-6	DEFECT
// line 1607	WITHOUT_CLASSIFICATION	0.9999896827528969	WITHOUT_CLASSIFICATION	1.0317247103137439E-5	DEFECT
// line 1610	WITHOUT_CLASSIFICATION	0.9999933529169761	WITHOUT_CLASSIFICATION	6.647083023917271E-6	DEFECT
// line 1622	WITHOUT_CLASSIFICATION	0.9999914520881379	WITHOUT_CLASSIFICATION	8.547911862058543E-6	DEFECT
// line 1625	WITHOUT_CLASSIFICATION	0.9999898635798756	WITHOUT_CLASSIFICATION	1.0136420124446272E-5	DEFECT
// line 1636	WITHOUT_CLASSIFICATION	0.9999909728080378	WITHOUT_CLASSIFICATION	9.02719196211409E-6	DEFECT
// line 1639	WITHOUT_CLASSIFICATION	0.9999898820208531	WITHOUT_CLASSIFICATION	1.011797914678937E-5	DEFECT
// line 1647	WITHOUT_CLASSIFICATION	0.9999884876151381	WITHOUT_CLASSIFICATION	1.1512384861808202E-5	DEFECT
// line 1651	WITHOUT_CLASSIFICATION	0.9999903806954604	WITHOUT_CLASSIFICATION	9.619304539631964E-6	DEFECT
// line 1657	WITHOUT_CLASSIFICATION	0.9999869283522692	WITHOUT_CLASSIFICATION	1.3071647730890509E-5	DEFECT
// line 1660	WITHOUT_CLASSIFICATION	0.9999924743045313	WITHOUT_CLASSIFICATION	7.52569546866559E-6	DEFECT
// line 1663	WITHOUT_CLASSIFICATION	0.9999896188990671	WITHOUT_CLASSIFICATION	1.0381100932801158E-5	DEFECT
// line 1678	WITHOUT_CLASSIFICATION	0.999992567726522	WITHOUT_CLASSIFICATION	7.432273477937019E-6	DEFECT
// line 1702	WITHOUT_CLASSIFICATION	0.999982473151685	WITHOUT_CLASSIFICATION	1.7526848314962823E-5	DEFECT
// line 1711	WITHOUT_CLASSIFICATION	0.9999892769962897	WITHOUT_CLASSIFICATION	1.0723003710256696E-5	DEFECT
// line 1719	WITHOUT_CLASSIFICATION	0.9999875993971764	WITHOUT_CLASSIFICATION	1.240060282350215E-5	DEFECT
// line 1722	WITHOUT_CLASSIFICATION	0.9999882457898586	WITHOUT_CLASSIFICATION	1.175421014145233E-5	DEFECT
// line 1731	WITHOUT_CLASSIFICATION	0.9999887424153999	WITHOUT_CLASSIFICATION	1.1257584600057018E-5	DEFECT
// line 1734	WITHOUT_CLASSIFICATION	0.9999862894097086	WITHOUT_CLASSIFICATION	1.3710590291451569E-5	DEFECT
// line 1738	WITHOUT_CLASSIFICATION	0.9999909632442112	WITHOUT_CLASSIFICATION	9.036755788764939E-6	DEFECT
// line 1746	WITHOUT_CLASSIFICATION	0.9999833610268484	WITHOUT_CLASSIFICATION	1.6638973151624763E-5	DEFECT
// line 1756	WITHOUT_CLASSIFICATION	0.9999764907727221	WITHOUT_CLASSIFICATION	2.3509227277813765E-5	DEFECT
// line 1758	WITHOUT_CLASSIFICATION	0.9999884082488772	WITHOUT_CLASSIFICATION	1.1591751122699737E-5	DEFECT
// line 1761	WITHOUT_CLASSIFICATION	0.9999851789178349	WITHOUT_CLASSIFICATION	1.4821082165096236E-5	DEFECT
// line 1767	WITHOUT_CLASSIFICATION	0.9999854228397427	WITHOUT_CLASSIFICATION	1.457716025735786E-5	DEFECT
// line 1776	WITHOUT_CLASSIFICATION	0.9999849452913977	WITHOUT_CLASSIFICATION	1.5054708602183854E-5	DEFECT
// line 1782	WITHOUT_CLASSIFICATION	0.9999911357991362	WITHOUT_CLASSIFICATION	8.864200863842435E-6	DEFECT
// line 1785	WITHOUT_CLASSIFICATION	0.9999900344487183	WITHOUT_CLASSIFICATION	9.965551281820627E-6	DEFECT
// line 1788	WITHOUT_CLASSIFICATION	0.9999917621140588	WITHOUT_CLASSIFICATION	8.237885941211227E-6	DEFECT
// line 1791	WITHOUT_CLASSIFICATION	0.9999870923524833	WITHOUT_CLASSIFICATION	1.2907647516778877E-5	DEFECT
// line 1797	WITHOUT_CLASSIFICATION	0.9999855734292744	WITHOUT_CLASSIFICATION	1.4426570725590018E-5	DEFECT
// line 1800	WITHOUT_CLASSIFICATION	0.9999964676564511	WITHOUT_CLASSIFICATION	3.5323435488687916E-6	DEFECT
// line 1803	WITHOUT_CLASSIFICATION	0.9999950598202205	WITHOUT_CLASSIFICATION	4.940179779432571E-6	DEFECT
// line 1806	WITHOUT_CLASSIFICATION	0.999994942151681	WITHOUT_CLASSIFICATION	5.057848318957859E-6	DEFECT
// line 1809	WITHOUT_CLASSIFICATION	0.9999948871892956	WITHOUT_CLASSIFICATION	5.112810704339434E-6	DEFECT
// line 1815	WITHOUT_CLASSIFICATION	0.9999949312550296	WITHOUT_CLASSIFICATION	5.0687449705154235E-6	DEFECT
// line 1825	WITHOUT_CLASSIFICATION	0.9999948297123777	WITHOUT_CLASSIFICATION	5.170287622212029E-6	DEFECT
// line 1828	WITHOUT_CLASSIFICATION	0.9999955005803545	WITHOUT_CLASSIFICATION	4.499419645470536E-6	DEFECT
// line 1831	WITHOUT_CLASSIFICATION	0.9999957659832417	WITHOUT_CLASSIFICATION	4.234016758350571E-6	DEFECT
// line 1847	WITHOUT_CLASSIFICATION	0.9999939999766748	WITHOUT_CLASSIFICATION	6.000023325129009E-6	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9999493370367466	WITHOUT_CLASSIFICATION	5.0662963253405706E-5	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9999210857074526	WITHOUT_CLASSIFICATION	7.89142925473485E-5	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9999931621723959	WITHOUT_CLASSIFICATION	6.83782760423189E-6	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9999569004031889	WITHOUT_CLASSIFICATION	4.309959681125928E-5	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9996295513731038	WITHOUT_CLASSIFICATION	3.704486268961959E-4	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.999799418024492	WITHOUT_CLASSIFICATION	2.005819755079783E-4	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9998697585035825	WITHOUT_CLASSIFICATION	1.302414964175049E-4	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.999981067742209	WITHOUT_CLASSIFICATION	1.893225779102116E-5	DEFECT
// line 1854	WITHOUT_CLASSIFICATION	0.9999941338671595	WITHOUT_CLASSIFICATION	5.866132840491528E-6	DEFECT
// line 1869	WITHOUT_CLASSIFICATION	0.999993697699445	WITHOUT_CLASSIFICATION	6.302300554948614E-6	DEFECT
// line 1872	WITHOUT_CLASSIFICATION	0.9999944391923791	WITHOUT_CLASSIFICATION	5.560807620862108E-6	DEFECT
// line 1877	WITHOUT_CLASSIFICATION	0.9999948653523378	WITHOUT_CLASSIFICATION	5.134647662142127E-6	DEFECT
// line 1886	WITHOUT_CLASSIFICATION	0.9999945901597108	WITHOUT_CLASSIFICATION	5.4098402891892765E-6	DEFECT
// line 1898	WITHOUT_CLASSIFICATION	0.9999952448129013	WITHOUT_CLASSIFICATION	4.755187098773744E-6	DEFECT
// line 1902	WITHOUT_CLASSIFICATION	0.9999929426660702	WITHOUT_CLASSIFICATION	7.057333929801926E-6	DEFECT
// line 1905	WITHOUT_CLASSIFICATION	0.9999920782350206	WITHOUT_CLASSIFICATION	7.921764979389995E-6	DEFECT
// line 1911	WITHOUT_CLASSIFICATION	0.9999927515492637	WITHOUT_CLASSIFICATION	7.248450736263938E-6	DEFECT
// line 1918	WITHOUT_CLASSIFICATION	0.999995137535437	WITHOUT_CLASSIFICATION	4.8624645630436535E-6	DEFECT
// line 1935	WITHOUT_CLASSIFICATION	0.9999888938110685	WITHOUT_CLASSIFICATION	1.1106188931597408E-5	DEFECT
// line 1938	WITHOUT_CLASSIFICATION	0.9999927995428414	WITHOUT_CLASSIFICATION	7.200457158667994E-6	DEFECT
// line 1942	WITHOUT_CLASSIFICATION	0.999990544121298	WITHOUT_CLASSIFICATION	9.455878702022675E-6	DEFECT
// line 1948	WITHOUT_CLASSIFICATION	0.9999930152708301	WITHOUT_CLASSIFICATION	6.98472916984768E-6	DEFECT
// line 1960	WITHOUT_CLASSIFICATION	0.9999911508237679	WITHOUT_CLASSIFICATION	8.84917623202834E-6	DEFECT
// line 1963	WITHOUT_CLASSIFICATION	0.9999877929651833	WITHOUT_CLASSIFICATION	1.2207034816737636E-5	DEFECT
// line 1968	WITHOUT_CLASSIFICATION	0.9999924890919253	WITHOUT_CLASSIFICATION	7.510908074795915E-6	DEFECT
// line 1972	WITHOUT_CLASSIFICATION	0.9999888753954607	WITHOUT_CLASSIFICATION	1.1124604539287635E-5	DEFECT
// line 1982	WITHOUT_CLASSIFICATION	0.9999938475206929	WITHOUT_CLASSIFICATION	6.152479307111229E-6	DEFECT
// line 1995	WITHOUT_CLASSIFICATION	0.9999896752419584	WITHOUT_CLASSIFICATION	1.0324758041651978E-5	DEFECT
// line 2000	WITHOUT_CLASSIFICATION	0.9999955659695156	WITHOUT_CLASSIFICATION	4.434030484433512E-6	DEFECT
// line 2006	WITHOUT_CLASSIFICATION	0.9999941114970949	WITHOUT_CLASSIFICATION	5.888502905025941E-6	DEFECT
// line 2010	WITHOUT_CLASSIFICATION	0.9999962861502367	WITHOUT_CLASSIFICATION	3.713849763291672E-6	DEFECT
/* We may need to subtract addition offset off of first */	WITHOUT_CLASSIFICATION	0.999999585767492	WITHOUT_CLASSIFICATION	4.142325079767733E-7	DEFECT
/* string fragment (we optimistically take one off in*/	WITHOUT_CLASSIFICATION	0.9999781966181316	WITHOUT_CLASSIFICATION	2.1803381868445666E-5	DEFECT
/* ParserSupport.literal_concat).  Check token length*/	WITHOUT_CLASSIFICATION	0.9999970523582231	WITHOUT_CLASSIFICATION	2.947641776891434E-6	DEFECT
/* and subtract as neeeded.*/	WITHOUT_CLASSIFICATION	0.9999989300746424	WITHOUT_CLASSIFICATION	1.0699253576119522E-6	DEFECT
/*                    $$ = new ArgAuxiliaryNode($1.getPosition(), (String) $1.getValue(), 1);  */	WITHOUT_CLASSIFICATION	0.9999959984028051	WITHOUT_CLASSIFICATION	4.0015971949541815E-6	DEFECT
/* ENEBO: arg surrounded by in_defined set/unset*/	WITHOUT_CLASSIFICATION	0.99974913385532	WITHOUT_CLASSIFICATION	2.508661446799182E-4	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999965666569489	WITHOUT_CLASSIFICATION	3.433343050984236E-6	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.999995891891817	WITHOUT_CLASSIFICATION	4.108108182928754E-6	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999988971902198	WITHOUT_CLASSIFICATION	1.1028097801903535E-6	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999988971902198	WITHOUT_CLASSIFICATION	1.1028097801903535E-6	DEFECT
/* ENEBO: Removed !compile_for_eval which probably is to reduce warnings*/	WITHOUT_CLASSIFICATION	0.9996634053787439	WITHOUT_CLASSIFICATION	3.3659462125610777E-4	DEFECT
/* was $$ = null;*/	WITHOUT_CLASSIFICATION	0.9999961799241947	WITHOUT_CLASSIFICATION	3.820075805294218E-6	DEFECT
// line 2019 "Ruby19Parser.y"	WITHOUT_CLASSIFICATION	0.9999973697354388	WITHOUT_CLASSIFICATION	2.6302645611736876E-6	DEFECT
// line 8143 "-"	WITHOUT_CLASSIFICATION	0.9999972804190064	WITHOUT_CLASSIFICATION	2.7195809935901547E-6	DEFECT
// we know variables cannot be null since localstaticscope will create a 0 length one.	WITHOUT_CLASSIFICATION	0.999986782737758	WITHOUT_CLASSIFICATION	1.3217262241961557E-5	DEFECT
// No bit math to store level since we know level is zero for this case	WITHOUT_CLASSIFICATION	0.9999749215985759	WITHOUT_CLASSIFICATION	2.507840142409155E-5	DEFECT
// Next immediate scope.  Variable and constant scoping rules make use of this variable // in different ways.	WITHOUT_CLASSIFICATION	0.9999990205399758	WITHOUT_CLASSIFICATION	9.794600242237289E-7	DEFECT
// Live reference to module	WITHOUT_CLASSIFICATION	0.9999929160166343	WITHOUT_CLASSIFICATION	7.083983365672516E-6	DEFECT
// Next CRef down the lexical structure	WITHOUT_CLASSIFICATION	0.9999998371918757	WITHOUT_CLASSIFICATION	1.6280812424742524E-7	DEFECT
// Our name holder (offsets are assigned as variables are added	WITHOUT_CLASSIFICATION	0.9999970638676279	WITHOUT_CLASSIFICATION	2.9361323720470106E-6	DEFECT
// number of variables in this scope representing required arguments	WITHOUT_CLASSIFICATION	0.99999942371218	WITHOUT_CLASSIFICATION	5.762878199874107E-7	DEFECT
// number of variables in this scope representing optional arguments	WITHOUT_CLASSIFICATION	0.9999996688809687	WITHOUT_CLASSIFICATION	3.31119031351704E-7	DEFECT
// index of variable that represents a "rest" arg	WITHOUT_CLASSIFICATION	0.999999639539361	WITHOUT_CLASSIFICATION	3.604606390407732E-7	DEFECT
// Note that this object equality check is intentional, to ensure // the string and its interned version are the same object.	WITHOUT_CLASSIFICATION	0.9999993779018382	WITHOUT_CLASSIFICATION	6.220981617642078E-7	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999993571433906	WITHOUT_CLASSIFICATION	6.428566094370778E-7	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999993571433906	WITHOUT_CLASSIFICATION	6.428566094370778E-7	DEFECT
/* Note: Only used by compiler until it can use getConstant again or use some other refactoring */	WITHOUT_CLASSIFICATION	0.9999913343707102	WITHOUT_CLASSIFICATION	8.665629289845623E-6	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.999999551876143	WITHOUT_CLASSIFICATION	4.4812385702010727E-7	DEFECT
/* Try and unload the autoload specified from internedName */	WITHOUT_CLASSIFICATION	0.9999992527377324	WITHOUT_CLASSIFICATION	7.472622677030164E-7	DEFECT
// We override that the logic which uses this	WITHOUT_CLASSIFICATION	0.9999997039500192	WITHOUT_CLASSIFICATION	2.96049980694321E-7	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9998818782699412	WITHOUT_CLASSIFICATION	1.1812173005869777E-4	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999995773979524	WITHOUT_CLASSIFICATION	4.226020475504454E-7	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999998244743951	WITHOUT_CLASSIFICATION	1.7552560499764446E-7	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999995773979524	WITHOUT_CLASSIFICATION	4.226020475504454E-7	DEFECT
// . Array given to rest should pass itself // . Array with rest + other args should extract array // . Array with multiple values and NO rest should extract args if there are more than one argument	WITHOUT_CLASSIFICATION	0.9999999982509228	WITHOUT_CLASSIFICATION	1.7490771799614366E-9	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999777282501898	WITHOUT_CLASSIFICATION	2.2271749810186106E-5	DEFECT
// Is this thread currently with in a function trace?	WITHOUT_CLASSIFICATION	0.9990467200143146	WITHOUT_CLASSIFICATION	9.532799856854516E-4	DEFECT
// Is this thread currently doing an defined? defined should set things like $!	WITHOUT_CLASSIFICATION	0.9854270965396538	WITHOUT_CLASSIFICATION	0.014572903460346285	DEFECT
//private UnsynchronizedStack parentStack;	WITHOUT_CLASSIFICATION	0.9999931499558207	WITHOUT_CLASSIFICATION	6.850044179262473E-6	DEFECT
//private UnsynchronizedStack frameStack;	WITHOUT_CLASSIFICATION	0.9999942398842696	WITHOUT_CLASSIFICATION	5.760115730322568E-6	DEFECT
// List of active dynamic scopes.  Each of these may have captured other dynamic scopes // to implement closures.	WITHOUT_CLASSIFICATION	0.9999998879933439	WITHOUT_CLASSIFICATION	1.1200665600662015E-7	DEFECT
// File where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999957695727036	WITHOUT_CLASSIFICATION	4.230427296440234E-6	DEFECT
// Line where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999984474249646	WITHOUT_CLASSIFICATION	1.5525750354308638E-6	DEFECT
// In certain places, like grep, we don't use real frames for the // call blocks. This has the effect of not setting the backref in // the correct frame - this delta is activated to the place where // the grep is running in so that the backref will be set in an // appropriate place.	WITHOUT_CLASSIFICATION	0.9764424049342385	WITHOUT_CLASSIFICATION	0.023557595065761404	DEFECT
// TOPLEVEL self and a few others want a top-level scope.  We create this one right // away and then pass it into top-level parse so it ends up being the top level.	WITHOUT_CLASSIFICATION	0.9999999033630771	WITHOUT_CLASSIFICATION	9.663692300168486E-8	DEFECT
//////////////////// CATCH MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9999937352805581	WITHOUT_CLASSIFICATION	6.264719441918812E-6	DEFECT
//////////////////// FRAME MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9999665282124511	WITHOUT_CLASSIFICATION	3.3471787548859154E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999823927656017	WITHOUT_CLASSIFICATION	1.760723439822053E-5	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999986152482973	WITHOUT_CLASSIFICATION	1.3847517026823869E-6	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999986152482973	WITHOUT_CLASSIFICATION	1.3847517026823869E-6	DEFECT
// look for mangling markers for compiled Ruby in method name	WITHOUT_CLASSIFICATION	0.9999947386457082	WITHOUT_CLASSIFICATION	5.2613542918090414E-6	DEFECT
// if it's not a rescue or ensure, there's a frame associated, so decrement	WITHOUT_CLASSIFICATION	0.9999999739498535	WITHOUT_CLASSIFICATION	2.6050146457156485E-8	DEFECT
// look for __file__ method name for compiled roots	WITHOUT_CLASSIFICATION	0.9999996461608355	WITHOUT_CLASSIFICATION	3.5383916457888453E-7	DEFECT
// All entries following removed node can stay // in list, but all preceding ones need to be // cloned.	WITHOUT_CLASSIFICATION	0.9999740323435446	WITHOUT_CLASSIFICATION	2.5967656455346906E-5	DEFECT
// required and optional only	WITHOUT_CLASSIFICATION	0.9999985409256749	WITHOUT_CLASSIFICATION	1.459074325166458E-6	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999995773979524	WITHOUT_CLASSIFICATION	4.226020475504454E-7	DEFECT
// look for mangling markers for bound, unframed methods in class name	WITHOUT_CLASSIFICATION	0.9999995987158417	WITHOUT_CLASSIFICATION	4.012841584306298E-7	DEFECT
// set the binding's frame's "previous" file and line to current, so // trace will show who called the block	WITHOUT_CLASSIFICATION	0.9999990642878718	WITHOUT_CLASSIFICATION	9.357121282369885E-7	DEFECT
// framed invokers will have Ruby frames associated with them	WITHOUT_CLASSIFICATION	0.9999988204195944	WITHOUT_CLASSIFICATION	1.179580405512397E-6	DEFECT
// look for mangling markers for bound, framed methods in class name	WITHOUT_CLASSIFICATION	0.9999996211654236	WITHOUT_CLASSIFICATION	3.788345764442087E-7	DEFECT
// unframed invokers have no Ruby frames, so pull from class name // but use current frame as file and line	WITHOUT_CLASSIFICATION	0.9999999164432556	WITHOUT_CLASSIFICATION	8.355674440740408E-8	DEFECT
// try to mine out a Ruby frame using our list of interpreter entry-point markers	WITHOUT_CLASSIFICATION	0.9999999631876396	WITHOUT_CLASSIFICATION	3.681236041438925E-8	DEFECT
// Frame matches one of our markers for "interpreted" calls	WITHOUT_CLASSIFICATION	0.9999998556469716	WITHOUT_CLASSIFICATION	1.443530285386292E-7	DEFECT
// Frame is extraneous runtime information, skip it unless debug	WITHOUT_CLASSIFICATION	0.9999975015209472	WITHOUT_CLASSIFICATION	2.498479052694248E-6	DEFECT
/*     * Determine what sort of assigner should be used for the provided 'iter' (e.g. block).     * Assigner provides just the right logic for assigning values to local parameters of the     * block.     *     * This method also has a second optimization which is to set 'noargblock' in the case that     * the block is a block which accepts no arguments.  The primary reason for this second     * optimization is that in the case of a yield with a RubyArray we will bypass some logic     * processing the RubyArray into a proper form (only to then not do anythign with it).  A     * secondary benefit is that a simple boolean seems to optimize by hotspot much faster     * than the zero arg assigner.     */	WITHOUT_CLASSIFICATION	0.9999989417381965	WITHOUT_CLASSIFICATION	1.0582618035570367E-6	DEFECT
// new scope for this invocation of the block, based on parent scope	WITHOUT_CLASSIFICATION	0.9999997216336537	WITHOUT_CLASSIFICATION	2.783663464061502E-7	DEFECT
// No argument blocks	WITHOUT_CLASSIFICATION	0.9999994184230488	WITHOUT_CLASSIFICATION	5.815769511850609E-7	DEFECT
// just push the same empty scope, since we won't use one	WITHOUT_CLASSIFICATION	0.999998270480035	WITHOUT_CLASSIFICATION	1.7295199649147635E-6	DEFECT
// Not sure if this is actually possible, but better safe than sorry	WITHOUT_CLASSIFICATION	0.9997276857953058	WITHOUT_CLASSIFICATION	2.7231420469411713E-4	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999730291350934	WITHOUT_CLASSIFICATION	2.6970864906514526E-5	DEFECT
// This should only be called by 1.8 (1.9 subclasses this to handle unusedBlock).	WITHOUT_CLASSIFICATION	0.9999410308573139	WITHOUT_CLASSIFICATION	5.8969142686018116E-5	DEFECT
// Highest reserved id	WITHOUT_CLASSIFICATION	0.9999979340818684	WITHOUT_CLASSIFICATION	2.0659181315867446E-6	DEFECT
// binary typed calls	WITHOUT_CLASSIFICATION	0.9999980383671798	WITHOUT_CLASSIFICATION	1.961632820167889E-6	DEFECT
// id must always be even	WITHOUT_CLASSIFICATION	0.9997431113839982	WITHOUT_CLASSIFICATION	2.568886160017312E-4	DEFECT
// with block pass	WITHOUT_CLASSIFICATION	0.9999997140287582	WITHOUT_CLASSIFICATION	2.8597124170773E-7	DEFECT
// no block	WITHOUT_CLASSIFICATION	0.9999987420174298	WITHOUT_CLASSIFICATION	1.2579825702526944E-6	DEFECT
// with block literal (iter)	WITHOUT_CLASSIFICATION	0.9999981559505821	WITHOUT_CLASSIFICATION	1.8440494179282355E-6	DEFECT
//            assert false : "can this happen?";	WITHOUT_CLASSIFICATION	0.9967321566903854	WITHOUT_CLASSIFICATION	0.0032678433096146394	DEFECT
// if we have multiple asgn with just *args, need a special type for that	WITHOUT_CLASSIFICATION	0.9999998630321316	WITHOUT_CLASSIFICATION	1.3696786841500695E-7	DEFECT
// && args.getMaxArgumentsCount() != 1) {	WITHOUT_CLASSIFICATION	0.9999972928262905	WITHOUT_CLASSIFICATION	2.707173709502293E-6	DEFECT
//            return warnMultiReturnNil(ruby);	WITHOUT_CLASSIFICATION	0.9999986857287488	WITHOUT_CLASSIFICATION	1.3142712511317779E-6	DEFECT
// ensure zero is devoted to no method name	WITHOUT_CLASSIFICATION	0.9999986078268764	WITHOUT_CLASSIFICATION	1.3921731235635952E-6	DEFECT
// predefine a few other methods we invoke directly elsewhere	WITHOUT_CLASSIFICATION	0.9999920789250483	WITHOUT_CLASSIFICATION	7.921074951812273E-6	DEFECT
// fast and safe respond_to? call site logic	WITHOUT_CLASSIFICATION	0.9999990613394362	WITHOUT_CLASSIFICATION	9.38660563889531E-7	DEFECT
// Static scoping information for this scope	WITHOUT_CLASSIFICATION	0.9994528869863855	WITHOUT_CLASSIFICATION	5.4711301361441E-4	DEFECT
// Captured dynamic scopes	WITHOUT_CLASSIFICATION	0.999998861972831	WITHOUT_CLASSIFICATION	1.1380271689929511E-6	DEFECT
// Backref for $~, $1, etc	WITHOUT_CLASSIFICATION	0.9999902350333387	WITHOUT_CLASSIFICATION	9.764966661338557E-6	DEFECT
// Lastline	WITHOUT_CLASSIFICATION	0.9999991809480894	WITHOUT_CLASSIFICATION	8.190519106762677E-7	DEFECT
// No binding scope so we should create one	WITHOUT_CLASSIFICATION	0.9999988235782094	WITHOUT_CLASSIFICATION	1.176421790668542E-6	DEFECT
// bindings scopes must always be ManyVars scopes since evals can grow them	WITHOUT_CLASSIFICATION	0.9998829246478702	WITHOUT_CLASSIFICATION	1.1707535212981107E-4	DEFECT
// Helper function to give a good view of current dynamic scope with captured scopes	WITHOUT_CLASSIFICATION	0.9999999749045998	WITHOUT_CLASSIFICATION	2.5095400114859583E-8	DEFECT
// try count specific args to determine required	WITHOUT_CLASSIFICATION	0.9999993453235536	WITHOUT_CLASSIFICATION	6.54676446347561E-7	DEFECT
// Some helper functions:	WITHOUT_CLASSIFICATION	0.9999748850294696	WITHOUT_CLASSIFICATION	2.5114970530326404E-5	DEFECT
// silently ignore	WITHOUT_CLASSIFICATION	0.999999312902506	WITHOUT_CLASSIFICATION	6.870974939466888E-7	DEFECT
// used by compiler	WITHOUT_CLASSIFICATION	0.9999995365675489	WITHOUT_CLASSIFICATION	4.634324511669361E-7	DEFECT
// initialize the static settings to determine which factory to use	WITHOUT_CLASSIFICATION	0.9999990982767275	WITHOUT_CLASSIFICATION	9.017232726005129E-7	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.999981067742209	WITHOUT_CLASSIFICATION	1.893225779102116E-5	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9999992479806837	WITHOUT_CLASSIFICATION	7.520193162979071E-7	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999740353275481	WITHOUT_CLASSIFICATION	2.596467245192256E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999968850723863	WITHOUT_CLASSIFICATION	3.1149276138415354E-6	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999988755446134	WITHOUT_CLASSIFICATION	1.1244553866002833E-6	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999777282501898	WITHOUT_CLASSIFICATION	2.2271749810186106E-5	DEFECT
// Note: In Ruby 1.9 all of this logic can go away since they will require explicit // bindings for evals.	WITHOUT_CLASSIFICATION	0.9999977469188183	WITHOUT_CLASSIFICATION	2.253081181765168E-6	DEFECT
// We only define one special dynamic scope per 'logical' binding.  So all bindings for // the same scope should share the same dynamic scope.  This allows multiple evals with // different different bindings in the same scope to see the same stuff.	WITHOUT_CLASSIFICATION	0.9999998132912461	WITHOUT_CLASSIFICATION	1.8670875390215236E-7	DEFECT
// If the next scope out has the same binding scope as this scope it means // we are evaling within an eval and in that case we should be sharing the same // binding scope.	WITHOUT_CLASSIFICATION	0.9999733511213914	WITHOUT_CLASSIFICATION	2.664887860855641E-5	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999998491959446	WITHOUT_CLASSIFICATION	1.5080405529759848E-7	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999998491959446	WITHOUT_CLASSIFICATION	1.5080405529759848E-7	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999984162791262	WITHOUT_CLASSIFICATION	1.5837208737061241E-6	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999984162791262	WITHOUT_CLASSIFICATION	1.5837208737061241E-6	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999984162791262	WITHOUT_CLASSIFICATION	1.5837208737061241E-6	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999995670269923	WITHOUT_CLASSIFICATION	4.3297300759073803E-7	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999995670269923	WITHOUT_CLASSIFICATION	4.3297300759073803E-7	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999988717552295	WITHOUT_CLASSIFICATION	1.1282447704884842E-6	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999988717552295	WITHOUT_CLASSIFICATION	1.1282447704884842E-6	DEFECT
/*     * This is the proper behavior for all non-expanded assigners which have a pre > 0.  The rest     * override this.     */	WITHOUT_CLASSIFICATION	0.9999970717367338	WITHOUT_CLASSIFICATION	2.9282632661030953E-6	DEFECT
/*     * This is the proper behavior for all non-expanded assigners.     */	WITHOUT_CLASSIFICATION	0.9999940543506322	WITHOUT_CLASSIFICATION	5.945649367850795E-6	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999900181230476	WITHOUT_CLASSIFICATION	9.981876952475259E-6	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999900181230476	WITHOUT_CLASSIFICATION	9.981876952475259E-6	DEFECT
// MUST be called from synchronized/locked block! // should only be called by variableTableStore/variableTableFastStore	WITHOUT_CLASSIFICATION	0.9999910608808036	WITHOUT_CLASSIFICATION	8.939119196349462E-6	DEFECT
// retrieve method // module // name	WITHOUT_CLASSIFICATION	0.9999842152393298	WITHOUT_CLASSIFICATION	1.578476067020006E-5	DEFECT
// call is ok, punch it!	WITHOUT_CLASSIFICATION	0.999997754821009	WITHOUT_CLASSIFICATION	2.2451789910545458E-6	DEFECT
// if undefined, branch to method_missing	WITHOUT_CLASSIFICATION	0.9999983485197301	WITHOUT_CLASSIFICATION	1.6514802697549906E-6	DEFECT
// if we're not attempting to invoke method_missing and method is not visible, branch to method_missing	WITHOUT_CLASSIFICATION	0.9999779316871895	WITHOUT_CLASSIFICATION	2.2068312810576605E-5	DEFECT
// method object already present, push various args // tc // self // klazz // name	WITHOUT_CLASSIFICATION	0.999998086493514	WITHOUT_CLASSIFICATION	1.9135064860250455E-6	DEFECT
// if it's method_missing, just invoke it	WITHOUT_CLASSIFICATION	0.9999986000319396	WITHOUT_CLASSIFICATION	1.3999680603909007E-6	DEFECT
// invoke callMethodMissing	WITHOUT_CLASSIFICATION	0.999947662256085	WITHOUT_CLASSIFICATION	5.233774391496598E-5	DEFECT
// caller	WITHOUT_CLASSIFICATION	0.9999987186034355	WITHOUT_CLASSIFICATION	1.2813965644814943E-6	DEFECT
// calltype // block	WITHOUT_CLASSIFICATION	0.9999957224851215	WITHOUT_CLASSIFICATION	4.277514878529605E-6	DEFECT
// if no exception raised, jump to end to leave result on stack for return	WITHOUT_CLASSIFICATION	0.9999999453035044	WITHOUT_CLASSIFICATION	5.4696495535904165E-8	DEFECT
// load arity for check	WITHOUT_CLASSIFICATION	0.9999976541298655	WITHOUT_CLASSIFICATION	2.3458701344142103E-6	DEFECT
// throw	WITHOUT_CLASSIFICATION	0.9999972366119905	WITHOUT_CLASSIFICATION	2.7633880095386106E-6	DEFECT
// load arity for error	WITHOUT_CLASSIFICATION	0.9999845192605378	WITHOUT_CLASSIFICATION	1.548073946218216E-5	DEFECT
// arity ok, continue	WITHOUT_CLASSIFICATION	0.9999958421598688	WITHOUT_CLASSIFICATION	4.1578401312117475E-6	DEFECT
//InvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9998356772847768	WITHOUT_CLASSIFICATION	1.6432271522315276E-4	DEFECT
// ENEBO: Perhaps slow but simple for now	WITHOUT_CLASSIFICATION	0.9999275714399034	WITHOUT_CLASSIFICATION	7.242856009649787E-5	DEFECT
// FastInvocationCallback	WITHOUT_CLASSIFICATION	0.9999802413257164	WITHOUT_CLASSIFICATION	1.9758674283534975E-5	DEFECT
// InvocationCallback	WITHOUT_CLASSIFICATION	0.9999860156819319	WITHOUT_CLASSIFICATION	1.398431806814549E-5	DEFECT
//DumpingInvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9999292595444431	WITHOUT_CLASSIFICATION	7.074045555696436E-5	DEFECT
// for fast lookup: encoding entry => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9999992425247746	WITHOUT_CLASSIFICATION	7.574752253396769E-7	DEFECT
// for fast lookup: org.joni.encoding.Encoding => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9999985482286444	WITHOUT_CLASSIFICATION	1.4517713555223946E-6	DEFECT
// load the encoding	WITHOUT_CLASSIFICATION	0.9999979275492981	WITHOUT_CLASSIFICATION	2.0724507018588625E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.999991200842556	WITHOUT_CLASSIFICATION	8.799157443954523E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.999998811359681	WITHOUT_CLASSIFICATION	1.1886403190168381E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999910929172221	WITHOUT_CLASSIFICATION	8.907082777921742E-6	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyModule, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9998293279075571	WITHOUT_CLASSIFICATION	1.706720924430253E-4	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyClass, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999756402288272	WITHOUT_CLASSIFICATION	2.435977117278622E-5	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999914318818648	WITHOUT_CLASSIFICATION	8.568118135178753E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999988425700185	WITHOUT_CLASSIFICATION	1.1574299815955518E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999913267902997	WITHOUT_CLASSIFICATION	8.673209700293686E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999996644605593	WITHOUT_CLASSIFICATION	3.3553944068835574E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999999546736341	WITHOUT_CLASSIFICATION	4.5326365902841203E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999978849779266	WITHOUT_CLASSIFICATION	2.115022073404925E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999999546736341	WITHOUT_CLASSIFICATION	4.5326365902841203E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999999546736341	WITHOUT_CLASSIFICATION	4.5326365902841203E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999999546736341	WITHOUT_CLASSIFICATION	4.5326365902841203E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999999546736341	WITHOUT_CLASSIFICATION	4.5326365902841203E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999999546736341	WITHOUT_CLASSIFICATION	4.5326365902841203E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999999546736341	WITHOUT_CLASSIFICATION	4.5326365902841203E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999978849779266	WITHOUT_CLASSIFICATION	2.115022073404925E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999978849779266	WITHOUT_CLASSIFICATION	2.115022073404925E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999978849779266	WITHOUT_CLASSIFICATION	2.115022073404925E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999978849779266	WITHOUT_CLASSIFICATION	2.115022073404925E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999978849779266	WITHOUT_CLASSIFICATION	2.115022073404925E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999978849779266	WITHOUT_CLASSIFICATION	2.115022073404925E-6	DEFECT
// If we're running in 1.9 compat mode, add Ruby 1.9 libs to path before 1.8 libs	WITHOUT_CLASSIFICATION	0.9999842343656465	WITHOUT_CLASSIFICATION	1.576563435345013E-5	DEFECT
// BreakJump, ThreadContext	WITHOUT_CLASSIFICATION	0.9999213434852535	WITHOUT_CLASSIFICATION	7.865651474651439E-5	DEFECT
// ThreadContext	WITHOUT_CLASSIFICATION	0.9999870450216609	WITHOUT_CLASSIFICATION	1.2954978339095148E-5	DEFECT
// BreakJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.999973078441134	WITHOUT_CLASSIFICATION	2.692155886597202E-5	DEFECT
// Make Java class files in the jar reachable from Ruby	WITHOUT_CLASSIFICATION	0.9999998713186956	WITHOUT_CLASSIFICATION	1.2868130442628117E-7	DEFECT
// RetryJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.999997259236442	WITHOUT_CLASSIFICATION	2.740763557957913E-6	DEFECT
// add all startup load paths to the list first	WITHOUT_CLASSIFICATION	0.999997099481067	WITHOUT_CLASSIFICATION	2.9005189330877856E-6	DEFECT
// if it's a compiled JRuby script, instantiate and run it	WITHOUT_CLASSIFICATION	0.9999993692571796	WITHOUT_CLASSIFICATION	6.307428204635743E-7	DEFECT
// wrap in try/catch for security exceptions in an applet	WITHOUT_CLASSIFICATION	0.9999980762107039	WITHOUT_CLASSIFICATION	1.9237892960931324E-6	DEFECT
// add $RUBYLIB paths	WITHOUT_CLASSIFICATION	0.9999979679905792	WITHOUT_CLASSIFICATION	2.03200942089935E-6	DEFECT
// Empty paths do not need to be added	WITHOUT_CLASSIFICATION	0.9999659190292155	WITHOUT_CLASSIFICATION	3.4080970784507E-5	DEFECT
// "." dir is used for relative path loads from a given file, as in require '../foo/bar'	WITHOUT_CLASSIFICATION	0.9999998453363974	WITHOUT_CLASSIFICATION	1.546636025910489E-7	DEFECT
// Add 1.8 libs	WITHOUT_CLASSIFICATION	0.9999991608701055	WITHOUT_CLASSIFICATION	8.391298944583096E-7	DEFECT
// Create package name, by splitting on / and joining all but the last elements with a ".", and downcasing them.	WITHOUT_CLASSIFICATION	0.9999999194937726	WITHOUT_CLASSIFICATION	8.050622742350173E-8	DEFECT
// Library has already been loaded in some form, bail out	WITHOUT_CLASSIFICATION	0.9999848801977235	WITHOUT_CLASSIFICATION	1.5119802276584614E-5	DEFECT
// We don't want a package name beginning with dots, so we remove them	WITHOUT_CLASSIFICATION	0.9999967469801251	WITHOUT_CLASSIFICATION	3.253019874965491E-6	DEFECT
// If there is a jar-file with the required name, we add this to the class path.	WITHOUT_CLASSIFICATION	0.9999994449470083	WITHOUT_CLASSIFICATION	5.550529915877039E-7	DEFECT
// quietly try to load the class	WITHOUT_CLASSIFICATION	0.9999996560886882	WITHOUT_CLASSIFICATION	3.4391131168591903E-7	DEFECT
// If there was a good library before, we go back to that	WITHOUT_CLASSIFICATION	0.9999998135295487	WITHOUT_CLASSIFICATION	1.8647045136671846E-7	DEFECT
// no library or extension found, try to load directly as a class	WITHOUT_CLASSIFICATION	0.9999997701634512	WITHOUT_CLASSIFICATION	2.2983654876228968E-7	DEFECT
// if an extension is specified, try more targetted searches	WITHOUT_CLASSIFICATION	0.9999999194397655	WITHOUT_CLASSIFICATION	8.056023451874097E-8	DEFECT
// signed short, big-endian	WITHOUT_CLASSIFICATION	0.9999969059927064	WITHOUT_CLASSIFICATION	3.0940072936164698E-6	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999998244743951	WITHOUT_CLASSIFICATION	1.7552560499764446E-7	DEFECT
// We don't support .so, but some stdlib require .so directly // replace it with .jar to look for an extension type we do support	WITHOUT_CLASSIFICATION	0.9999798598766786	WITHOUT_CLASSIFICATION	2.014012332148064E-5	DEFECT
// This code exploits the fact that all .jar files will be found for the JarredScript feature. // This is where the basic extension mechanism gets fixed	WITHOUT_CLASSIFICATION	0.9999744445846215	WITHOUT_CLASSIFICATION	2.5555415378564317E-5	DEFECT
// Make the class name look nice, by splitting on _ and capitalize each segment, then joining // the, together without anything separating them, and last put on "Service" at the end.	WITHOUT_CLASSIFICATION	0.9999999979764158	WITHOUT_CLASSIFICATION	2.023584213587549E-9	DEFECT
// It's _really_ expensive to check that the class actually exists in the Jar, so // we don't do that now.	WITHOUT_CLASSIFICATION	0.9999981278732631	WITHOUT_CLASSIFICATION	1.8721267368001548E-6	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999998975250951	WITHOUT_CLASSIFICATION	1.0247490483475615E-7	DEFECT
// extension extensions	WITHOUT_CLASSIFICATION	0.9999960506044671	WITHOUT_CLASSIFICATION	3.949395532898182E-6	DEFECT
// unknown extension, fall back to search with extensions	WITHOUT_CLASSIFICATION	0.999999314184923	WITHOUT_CLASSIFICATION	6.85815076906666E-7	DEFECT
// try all extensions	WITHOUT_CLASSIFICATION	0.9999952381862465	WITHOUT_CLASSIFICATION	4.761813753475198E-6	DEFECT
// if a source extension is specified, try all source extensions	WITHOUT_CLASSIFICATION	0.9999999027607577	WITHOUT_CLASSIFICATION	9.723924224798548E-8	DEFECT
// unknown extension, fall back to exact search	WITHOUT_CLASSIFICATION	0.9999981281457787	WITHOUT_CLASSIFICATION	1.8718542212681406E-6	DEFECT
// try only literal search	WITHOUT_CLASSIFICATION	0.9999983440170849	WITHOUT_CLASSIFICATION	1.6559829150900592E-6	DEFECT
// attempt to load the found library	WITHOUT_CLASSIFICATION	0.9999980407334522	WITHOUT_CLASSIFICATION	1.959266547784247E-6	DEFECT
// otherwise load the library we've found	WITHOUT_CLASSIFICATION	0.9999910699708945	WITHOUT_CLASSIFICATION	8.9300291056244E-6	DEFECT
// allow MainExitException to propagate out for exec and friends	WITHOUT_CLASSIFICATION	0.999999965917848	WITHOUT_CLASSIFICATION	3.40821521073538E-8	DEFECT
// Remove any relative prefix, e.g. "./foo/bar" becomes "foo/bar".	WITHOUT_CLASSIFICATION	0.9999991950886363	WITHOUT_CLASSIFICATION	8.049113635609864E-7	DEFECT
// check current directory; if file exists, retrieve URL and return resource	WITHOUT_CLASSIFICATION	0.9999997160679709	WITHOUT_CLASSIFICATION	2.839320291557446E-7	DEFECT
// if a jar or file URL, return load service resource directly without further searching	WITHOUT_CLASSIFICATION	0.9999997908503505	WITHOUT_CLASSIFICATION	2.0914964951707146E-7	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999679463554231	WITHOUT_CLASSIFICATION	3.205364457686019E-5	DEFECT
// if it's a ./ baseName, use CWD logic	WITHOUT_CLASSIFICATION	0.9999991136519433	WITHOUT_CLASSIFICATION	8.863480567346867E-7	DEFECT
// if given path is absolute, just try it as-is (with extensions) and no load path	WITHOUT_CLASSIFICATION	0.9999995088284845	WITHOUT_CLASSIFICATION	4.911715154722736E-7	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9999990889758633	WITHOUT_CLASSIFICATION	9.110241367173001E-7	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9999990889758633	WITHOUT_CLASSIFICATION	9.110241367173001E-7	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999987915013835	WITHOUT_CLASSIFICATION	1.2084986165300082E-6	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999987915013835	WITHOUT_CLASSIFICATION	1.2084986165300082E-6	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999900273445174	WITHOUT_CLASSIFICATION	9.972655482621691E-6	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999900273445174	WITHOUT_CLASSIFICATION	9.972655482621691E-6	DEFECT
//                    actualPath = new File(RubyFile.expandUserPath(runtime.getCurrentContext(), reportedPath));	WITHOUT_CLASSIFICATION	0.9999997038177469	WITHOUT_CLASSIFICATION	2.9618225307018374E-7	DEFECT
// handle security-sensitive case	WITHOUT_CLASSIFICATION	0.9999995422409667	WITHOUT_CLASSIFICATION	4.577590333239174E-7	DEFECT
// if entry is an empty string, skip it	WITHOUT_CLASSIFICATION	0.9999920581019152	WITHOUT_CLASSIFICATION	7.941898084870637E-6	DEFECT
// if entry starts with a slash, skip it since classloader resources never start with a /	WITHOUT_CLASSIFICATION	0.999999997010876	WITHOUT_CLASSIFICATION	2.9891239977358037E-9	DEFECT
// otherwise, try to load from classpath (Note: Jar resources always uses '/')	WITHOUT_CLASSIFICATION	0.9999995462224491	WITHOUT_CLASSIFICATION	4.537775507590599E-7	DEFECT
// Make sure this is not a directory or unavailable in some way	WITHOUT_CLASSIFICATION	0.9999850172002241	WITHOUT_CLASSIFICATION	1.4982799775951263E-5	DEFECT
// signed short, native	WITHOUT_CLASSIFICATION	0.9999985192928295	WITHOUT_CLASSIFICATION	1.4807071705000176E-6	DEFECT
// If we fail to find as a normal Ruby script, we try to find as an extension, // checking for a builtin first.	WITHOUT_CLASSIFICATION	0.9999962290914625	WITHOUT_CLASSIFICATION	3.7709085373819366E-6	DEFECT
// write `I' instance var signet if class is NOT a direct subclass of Object	WITHOUT_CLASSIFICATION	0.9999999159498983	WITHOUT_CLASSIFICATION	8.405010166437533E-8	DEFECT
// if name starts with a / we're done (classloader resources won't load with an initial /)	WITHOUT_CLASSIFICATION	0.9999995006062827	WITHOUT_CLASSIFICATION	4.993937172658006E-7	DEFECT
// Look in classpath next (we do not use File as a test since UNC names will match) // Note: Jar resources must NEVER begin with an '/'. (previous code said "always begin with a /")	WITHOUT_CLASSIFICATION	0.9999936977791598	WITHOUT_CLASSIFICATION	6.302220840084939E-6	DEFECT
/* Directories and unavailable resources are not able to open a stream. */	WITHOUT_CLASSIFICATION	0.9999988895097002	WITHOUT_CLASSIFICATION	1.1104902998142306E-6	DEFECT
// Try to load from classpath without prefix. "A/b.rb" will not load as  // "./A/b.rb" in a jar file.	WITHOUT_CLASSIFICATION	0.9999880612477834	WITHOUT_CLASSIFICATION	1.1938752216662619E-5	DEFECT
// object has instance vars and isn't a class, get a snapshot to be marshalled // and output the ivar header here	WITHOUT_CLASSIFICATION	0.9999978104268535	WITHOUT_CLASSIFICATION	2.189573146526428E-6	DEFECT
// flush afer whole dump is complete	WITHOUT_CLASSIFICATION	0.9999898605673957	WITHOUT_CLASSIFICATION	1.0139432604297571E-5	DEFECT
//            write('S');	WITHOUT_CLASSIFICATION	0.9999983487755085	WITHOUT_CLASSIFICATION	1.6512244914280055E-6	DEFECT
// switch on the object's *native type*. This allows use-defined // classes that have extended core native types to piggyback on their // marshalling logic.	WITHOUT_CLASSIFICATION	0.999999944090049	WITHOUT_CLASSIFICATION	5.5909951005926296E-8	DEFECT
// object is a custom class that extended one of the native types other than Object	WITHOUT_CLASSIFICATION	0.9999995948751742	WITHOUT_CLASSIFICATION	4.0512482575663843E-7	DEFECT
// We do not want to capture cached methods	WITHOUT_CLASSIFICATION	0.9999994083588434	WITHOUT_CLASSIFICATION	5.916411565860438E-7	DEFECT
// w_symbol	WITHOUT_CLASSIFICATION	0.9999990247839939	WITHOUT_CLASSIFICATION	9.752160060698032E-7	DEFECT
// w_unique	WITHOUT_CLASSIFICATION	0.9999970885481938	WITHOUT_CLASSIFICATION	2.911451806063618E-6	DEFECT
// call the proc, but not for symbols	WITHOUT_CLASSIFICATION	0.9999978183134938	WITHOUT_CLASSIFICATION	2.1816865061895416E-6	DEFECT
// Major // Minor	WITHOUT_CLASSIFICATION	0.999999350508046	WITHOUT_CLASSIFICATION	6.494919539673381E-7	DEFECT
// any ivars, since we don't have __attached__ ivar now	WITHOUT_CLASSIFICATION	0.9999915773318235	WITHOUT_CLASSIFICATION	8.422668176484782E-6	DEFECT
// "hashdef" object, a hash with a default	WITHOUT_CLASSIFICATION	0.9999996959370615	WITHOUT_CLASSIFICATION	3.040629384900402E-7	DEFECT
// All "C" marshalled objects descend from core classes, which are all RubyObject	WITHOUT_CLASSIFICATION	0.9999999034647689	WITHOUT_CLASSIFICATION	9.653523117632377E-8	DEFECT
// sic	WITHOUT_CLASSIFICATION	0.9999982308968189	WITHOUT_CLASSIFICATION	1.7691031810434724E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999990880579145	WITHOUT_CLASSIFICATION	9.11942085510835E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999990880579145	WITHOUT_CLASSIFICATION	9.11942085510835E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999990880579145	WITHOUT_CLASSIFICATION	9.11942085510835E-7	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999903834745	WITHOUT_CLASSIFICATION	9.616525379832581E-9	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999903834745	WITHOUT_CLASSIFICATION	9.616525379832581E-9	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999730291350934	WITHOUT_CLASSIFICATION	2.6970864906514526E-5	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999730291350934	WITHOUT_CLASSIFICATION	2.6970864906514526E-5	DEFECT
/*     * If we are setting post arguments we can assume there are no pre or others     */	WITHOUT_CLASSIFICATION	0.9999997103861943	WITHOUT_CLASSIFICATION	2.8961380568732345E-7	DEFECT
// XXX: 0xffff0000 on BE?	WITHOUT_CLASSIFICATION	0.998815561873598	WITHOUT_CLASSIFICATION	0.0011844381264020996	DEFECT
// unsigned short, native	WITHOUT_CLASSIFICATION	0.999997556875581	WITHOUT_CLASSIFICATION	2.443124419087113E-6	DEFECT
// int, native // long, native	WITHOUT_CLASSIFICATION	0.9999973671464508	WITHOUT_CLASSIFICATION	2.632853549059092E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999990880579145	WITHOUT_CLASSIFICATION	9.11942085510835E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999990880579145	WITHOUT_CLASSIFICATION	9.11942085510835E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999990880579145	WITHOUT_CLASSIFICATION	9.11942085510835E-7	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999903834745	WITHOUT_CLASSIFICATION	9.616525379832581E-9	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999903834745	WITHOUT_CLASSIFICATION	9.616525379832581E-9	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999903834745	WITHOUT_CLASSIFICATION	9.616525379832581E-9	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999730291350934	WITHOUT_CLASSIFICATION	2.6970864906514526E-5	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999730291350934	WITHOUT_CLASSIFICATION	2.6970864906514526E-5	DEFECT
// Look for slash, starting from 'start' position, until 'end'.	WITHOUT_CLASSIFICATION	0.9999999855013194	WITHOUT_CLASSIFICATION	1.4498680451564954E-8	DEFECT
// Our values holder (name of variables are kept in staticScope)	WITHOUT_CLASSIFICATION	0.9999917834276729	WITHOUT_CLASSIFICATION	8.216572327076367E-6	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999995967293235	WITHOUT_CLASSIFICATION	4.0327067649812647E-7	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999995967293235	WITHOUT_CLASSIFICATION	4.0327067649812647E-7	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999995967293235	WITHOUT_CLASSIFICATION	4.0327067649812647E-7	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999995967293235	WITHOUT_CLASSIFICATION	4.0327067649812647E-7	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999995967293235	WITHOUT_CLASSIFICATION	4.0327067649812647E-7	DEFECT
// SunSignalFacade	WITHOUT_CLASSIFICATION	0.9999984518211039	WITHOUT_CLASSIFICATION	1.548178896039539E-6	DEFECT
// All braces pushed..	WITHOUT_CLASSIFICATION	0.9999991000740089	WITHOUT_CLASSIFICATION	8.999259910491959E-7	DEFECT
/* failed : try next recursion */	WITHOUT_CLASSIFICATION	0.9999297797680363	WITHOUT_CLASSIFICATION	7.02202319637129E-5	DEFECT
// leftToken made us start as nest 1	WITHOUT_CLASSIFICATION	0.9999995924728806	WITHOUT_CLASSIFICATION	4.075271193565934E-7	DEFECT
// are we at '**/'	WITHOUT_CLASSIFICATION	0.9999935504468358	WITHOUT_CLASSIFICATION	6.449553164219236E-6	DEFECT
// No or mismatched braces..Move along..nothing to see here	WITHOUT_CLASSIFICATION	0.9999995614167312	WITHOUT_CLASSIFICATION	4.385832687158255E-7	DEFECT
// not enough bytes	WITHOUT_CLASSIFICATION	0.9999993183785393	WITHOUT_CLASSIFICATION	6.816214608054192E-7	DEFECT
// Get index of last read byte	WITHOUT_CLASSIFICATION	0.9999990519671411	WITHOUT_CLASSIFICATION	9.480328588896288E-7	DEFECT
// skip inner braces	WITHOUT_CLASSIFICATION	0.9999996965834752	WITHOUT_CLASSIFICATION	3.0341652486879803E-7	DEFECT
/*     * Process {}'s (example: Dir.glob("{jruby,jython}/README*")      */	WITHOUT_CLASSIFICATION	0.9999931433840253	WITHOUT_CLASSIFICATION	6.856615974609797E-6	DEFECT
/* complete, according to Posix.2 */	WITHOUT_CLASSIFICATION	0.9999820819004342	WITHOUT_CLASSIFICATION	1.791809956577984E-5	DEFECT
/* Only accept an open brace if there is a close */	WITHOUT_CLASSIFICATION	0.9999926993678605	WITHOUT_CLASSIFICATION	7.300632139485996E-6	DEFECT
/* brace to match it.  Bracket expressions must be */	WITHOUT_CLASSIFICATION	0.9999578957196349	WITHOUT_CLASSIFICATION	4.210428036516146E-5	DEFECT
// index of left-most brace // index of right-most brace	WITHOUT_CLASSIFICATION	0.9999982536810397	WITHOUT_CLASSIFICATION	1.7463189603570583E-6	DEFECT
// Length check is a hack.  We should not be reeiving "" as a filename ever. 	WITHOUT_CLASSIFICATION	0.9998602276583173	WITHOUT_CLASSIFICATION	1.3977234168281304E-4	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999907420009267	WITHOUT_CLASSIFICATION	9.257999073206282E-6	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999907420009267	WITHOUT_CLASSIFICATION	9.257999073206282E-6	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999907420009267	WITHOUT_CLASSIFICATION	9.257999073206282E-6	DEFECT
// Pickaxe says @ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9997640702813152	WITHOUT_CLASSIFICATION	2.359297186848956E-4	DEFECT
// Pickaxe says @@ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9997640434607026	WITHOUT_CLASSIFICATION	2.3595653929750165E-4	DEFECT
// SimpleSampler	WITHOUT_CLASSIFICATION	0.9999987172391666	WITHOUT_CLASSIFICATION	1.2827608334971494E-6	DEFECT
/*     * convert into longs, returning unsigned 64-bit values as signed longs     * ( num2long raises a RangeError on values > Long.MAX_VALUE )     */	WITHOUT_CLASSIFICATION	0.9999993288633581	WITHOUT_CLASSIFICATION	6.711366420200229E-7	DEFECT
// b64_xtable for decoding Base 64	WITHOUT_CLASSIFICATION	0.9999978513651021	WITHOUT_CLASSIFICATION	2.148634897959153E-6	DEFECT
// single precision, little-endian	WITHOUT_CLASSIFICATION	0.9999993892017505	WITHOUT_CLASSIFICATION	6.107982496433469E-7	DEFECT
// single precision, big-endian	WITHOUT_CLASSIFICATION	0.9999994603522661	WITHOUT_CLASSIFICATION	5.396477339471103E-7	DEFECT
// single precision, native	WITHOUT_CLASSIFICATION	0.9999991843565869	WITHOUT_CLASSIFICATION	8.15643413127582E-7	DEFECT
// single precision, native // single precision, native	WITHOUT_CLASSIFICATION	0.9999991723635828	WITHOUT_CLASSIFICATION	8.276364172077583E-7	DEFECT
// double precision, little-endian	WITHOUT_CLASSIFICATION	0.9999961025563557	WITHOUT_CLASSIFICATION	3.897443644230004E-6	DEFECT
// double precision, big-endian	WITHOUT_CLASSIFICATION	0.9999966617624231	WITHOUT_CLASSIFICATION	3.3382375768383665E-6	DEFECT
// double precision, native	WITHOUT_CLASSIFICATION	0.9999960795380418	WITHOUT_CLASSIFICATION	3.920461958243663E-6	DEFECT
// signed short, little-endian	WITHOUT_CLASSIFICATION	0.9999982897016768	WITHOUT_CLASSIFICATION	1.7102983232407919E-6	DEFECT
// signed char	WITHOUT_CLASSIFICATION	0.9999999462312682	WITHOUT_CLASSIFICATION	5.3768731868323895E-8	DEFECT
// unsigned char	WITHOUT_CLASSIFICATION	0.9999998938632794	WITHOUT_CLASSIFICATION	1.0613672061967825E-7	DEFECT
// long, little-endian	WITHOUT_CLASSIFICATION	0.9999991861946244	WITHOUT_CLASSIFICATION	8.13805375742483E-7	DEFECT
// long, big-endian	WITHOUT_CLASSIFICATION	0.9999996965539647	WITHOUT_CLASSIFICATION	3.034460352971665E-7	DEFECT
// unsigned int, native	WITHOUT_CLASSIFICATION	0.9999986523425527	WITHOUT_CLASSIFICATION	1.3476574473041009E-6	DEFECT
// int, native	WITHOUT_CLASSIFICATION	0.9999980188751734	WITHOUT_CLASSIFICATION	1.9811248265301804E-6	DEFECT
// 64-bit number, native (as fixnum)	WITHOUT_CLASSIFICATION	0.9999721551143395	WITHOUT_CLASSIFICATION	2.784488566061132E-5	DEFECT
// How many occurrences of 'type' we want	WITHOUT_CLASSIFICATION	0.999992414405396	WITHOUT_CLASSIFICATION	7.5855946040239585E-6	DEFECT
// See if we have a converter for the job...	WITHOUT_CLASSIFICATION	0.999998400735993	WITHOUT_CLASSIFICATION	1.5992640070219897E-6	DEFECT
// Otherwise the unpack should be here...	WITHOUT_CLASSIFICATION	0.9999862862856823	WITHOUT_CLASSIFICATION	1.3713714317686426E-5	DEFECT
// Possible Checksum Byte	WITHOUT_CLASSIFICATION	0.9999951750162722	WITHOUT_CLASSIFICATION	4.82498372779121E-6	DEFECT
// obtain a	WITHOUT_CLASSIFICATION	0.9999967761319222	WITHOUT_CLASSIFICATION	3.223868077835471E-6	DEFECT
// obtain b	WITHOUT_CLASSIFICATION	0.999998382619345	WITHOUT_CLASSIFICATION	1.6173806549067211E-6	DEFECT
// obtain c	WITHOUT_CLASSIFICATION	0.9999990114082917	WITHOUT_CLASSIFICATION	9.88591708349411E-7	DEFECT
// obtain d	WITHOUT_CLASSIFICATION	0.9999987024890148	WITHOUT_CLASSIFICATION	1.297510985174806E-6	DEFECT
/*encode.limit() - */	WITHOUT_CLASSIFICATION	0.9999213144967601	WITHOUT_CLASSIFICATION	7.86855032398746E-5	DEFECT
/* 1 */	WITHOUT_CLASSIFICATION	0.9999746321139706	WITHOUT_CLASSIFICATION	2.536788602946963E-5	DEFECT
/* 2 */	WITHOUT_CLASSIFICATION	0.9999796227751863	WITHOUT_CLASSIFICATION	2.0377224813758516E-5	DEFECT
/* 3 */	WITHOUT_CLASSIFICATION	0.9999805957345823	WITHOUT_CLASSIFICATION	1.9404265417689786E-5	DEFECT
/* 4 */	WITHOUT_CLASSIFICATION	0.9999758464811501	WITHOUT_CLASSIFICATION	2.4153518849967724E-5	DEFECT
/* 5 */	WITHOUT_CLASSIFICATION	0.9999758341097608	WITHOUT_CLASSIFICATION	2.4165890239202377E-5	DEFECT
/* 6 */	WITHOUT_CLASSIFICATION	0.9999523462670183	WITHOUT_CLASSIFICATION	4.765373298158783E-5	DEFECT
/* 7 */	WITHOUT_CLASSIFICATION	0.9999734465073207	WITHOUT_CLASSIFICATION	2.6553492679385487E-5	DEFECT
// Skip all whitespace in pack format string	WITHOUT_CLASSIFICATION	0.9998860459656806	WITHOUT_CLASSIFICATION	1.13954034319346E-4	DEFECT
// Skip embedded comments in pack format string	WITHOUT_CLASSIFICATION	0.9999793606920682	WITHOUT_CLASSIFICATION	2.0639307931828518E-5	DEFECT
// In case when the number of occurences is // explicitly specified, we have to read up // the remaining garbage after the '\0' to // satisfy the requested pattern.	WITHOUT_CLASSIFICATION	0.9999999453646633	WITHOUT_CLASSIFICATION	5.463533670133342E-8	DEFECT
//normal exit, this should be faster than a test at each iterations for string with more than //about 40 char	WITHOUT_CLASSIFICATION	0.9999947465320272	WITHOUT_CLASSIFICATION	5.253467972722965E-6	DEFECT
// We encountered '\0' when // were reading the buffer above, // increment the number of read bytes.	WITHOUT_CLASSIFICATION	0.9999858612404854	WITHOUT_CLASSIFICATION	1.413875951462075E-5	DEFECT
// MRI behavior: Contrary to what seems to be logical, // when '*' is given, MRI calculates the distance // to the end, in order to go backwards.	WITHOUT_CLASSIFICATION	0.9999996919242294	WITHOUT_CLASSIFICATION	3.0807577050637885E-7	DEFECT
// Determine how many of type are needed (default: 1)	WITHOUT_CLASSIFICATION	0.9999919712496339	WITHOUT_CLASSIFICATION	8.028750366105893E-6	DEFECT
// 'Z' adds extra null pad (versus 'a')	WITHOUT_CLASSIFICATION	0.9999991473072041	WITHOUT_CLASSIFICATION	8.526927958414717E-7	DEFECT
//if the low bit is set //set the high bit of the result	WITHOUT_CLASSIFICATION	0.9999974494026094	WITHOUT_CLASSIFICATION	2.5505973906031254E-6	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary //shift the byte	WITHOUT_CLASSIFICATION	0.9999921208315325	WITHOUT_CLASSIFICATION	7.879168467379465E-6	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9999996203732098	WITHOUT_CLASSIFICATION	3.7962679022076423E-7	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9999996203732098	WITHOUT_CLASSIFICATION	3.7962679022076423E-7	DEFECT
//do some padding, I don't understand the padding strategy	WITHOUT_CLASSIFICATION	0.999945009821411	WITHOUT_CLASSIFICATION	5.499017858907052E-5	DEFECT
// we filled up current byte; append it and create next one	WITHOUT_CLASSIFICATION	0.9999991255368568	WITHOUT_CLASSIFICATION	8.744631431202048E-7	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary	WITHOUT_CLASSIFICATION	0.9999948700061345	WITHOUT_CLASSIFICATION	5.129993865461963E-6	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9995826800334319	WITHOUT_CLASSIFICATION	4.1731996656818235E-4	DEFECT
// we don't deal with negatives.	WITHOUT_CLASSIFICATION	0.9999914128586662	WITHOUT_CLASSIFICATION	8.58714133377626E-6	DEFECT
// populate commandline with NG-provided stuff	WITHOUT_CLASSIFICATION	0.9999999420685004	WITHOUT_CLASSIFICATION	5.793149967068112E-8	DEFECT
// are we recursing?	WITHOUT_CLASSIFICATION	0.9999964259893261	WITHOUT_CLASSIFICATION	3.5740106738739246E-6	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.999999969599919	WITHOUT_CLASSIFICATION	3.040008094273689E-8	DEFECT
// default PidGetter	WITHOUT_CLASSIFICATION	0.9999992733879475	WITHOUT_CLASSIFICATION	7.266120525149248E-7	DEFECT
// ignore and try windows version	WITHOUT_CLASSIFICATION	0.9999966201385656	WITHOUT_CLASSIFICATION	3.379861434363777E-6	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999987746185138	WITHOUT_CLASSIFICATION	1.2253814861618757E-6	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999987746185138	WITHOUT_CLASSIFICATION	1.2253814861618757E-6	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999987746185138	WITHOUT_CLASSIFICATION	1.2253814861618757E-6	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999987746185138	WITHOUT_CLASSIFICATION	1.2253814861618757E-6	DEFECT
// try both	WITHOUT_CLASSIFICATION	0.9999945934363963	WITHOUT_CLASSIFICATION	5.406563603812107E-6	DEFECT
// just unix	WITHOUT_CLASSIFICATION	0.9999976938052662	WITHOUT_CLASSIFICATION	2.306194733760263E-6	DEFECT
// just windows	WITHOUT_CLASSIFICATION	0.999999459083784	WITHOUT_CLASSIFICATION	5.409162159400798E-7	DEFECT
// neither	WITHOUT_CLASSIFICATION	0.9999990795076636	WITHOUT_CLASSIFICATION	9.204923364114979E-7	DEFECT
// CON: popen is a case where I think we should just always shell out.	WITHOUT_CLASSIFICATION	0.9994642375178325	WITHOUT_CLASSIFICATION	5.357624821674925E-4	DEFECT
// single string command, pass to sh to expand wildcards	WITHOUT_CLASSIFICATION	0.999999871505975	WITHOUT_CLASSIFICATION	1.284940249509498E-7	DEFECT
// direct invocation of the command	WITHOUT_CLASSIFICATION	0.9999989091936673	WITHOUT_CLASSIFICATION	1.0908063326527245E-6	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999546657088977	WITHOUT_CLASSIFICATION	4.5334291102304666E-5	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999546657088977	WITHOUT_CLASSIFICATION	4.5334291102304666E-5	DEFECT
// close process output // See JRUBY-3405; hooking up to parent process stdin caused // problems for IRB etc using stdin.	WITHOUT_CLASSIFICATION	0.9999999511064108	WITHOUT_CLASSIFICATION	4.8893589202190006E-8	DEFECT
// ignore, we're on the way out	WITHOUT_CLASSIFICATION	0.9999990448572115	WITHOUT_CLASSIFICATION	9.551427884866568E-7	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999887161014299	WITHOUT_CLASSIFICATION	1.1283898570097058E-5	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9999990493343355	WITHOUT_CLASSIFICATION	9.506656645770047E-7	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9999990493343355	WITHOUT_CLASSIFICATION	9.506656645770047E-7	DEFECT
// popen caller wants to be able to write, provide subprocess out directly	WITHOUT_CLASSIFICATION	0.9999999492039547	WITHOUT_CLASSIFICATION	5.079604530254999E-8	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999999515337115	WITHOUT_CLASSIFICATION	4.8466288622603856E-8	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999999515337115	WITHOUT_CLASSIFICATION	4.8466288622603856E-8	DEFECT
// execute command with sh -c // this does shell expansion of wildcards	WITHOUT_CLASSIFICATION	0.9999995508037601	WITHOUT_CLASSIFICATION	4.491962399387242E-7	DEFECT
// We need to close the out, since some // processes would just wait for the stream // to be closed before they process its content, // and produce the output. E.g.: "cat".	WITHOUT_CLASSIFICATION	0.9999999670766156	WITHOUT_CLASSIFICATION	3.292338429523333E-8	DEFECT
// we only close out if it's the slave stream, to avoid // closing a directly-mapped stream from parent process	WITHOUT_CLASSIFICATION	0.9999999513882941	WITHOUT_CLASSIFICATION	4.861170590744392E-8	DEFECT
// The assumption here is that the 'in' stream provides // proper available() support. If available() always // returns 0, we'll hang!	WITHOUT_CLASSIFICATION	0.999995492054212	WITHOUT_CLASSIFICATION	4.507945788023909E-6	DEFECT
// Force t3 to quit, just in case if it's stuck. // Note: On some platforms, even interrupt might not // have an effect if the thread is IO blocked.	WITHOUT_CLASSIFICATION	0.9999842408336711	WITHOUT_CLASSIFICATION	1.5759166328828636E-5	DEFECT
// Check for special shell characters [<>|] at the beginning // and end of each command word and don't run in process if we find them.	WITHOUT_CLASSIFICATION	0.9999976500372586	WITHOUT_CLASSIFICATION	2.34996274139967E-6	DEFECT
// Note: this method produces meaningful results // only for RubyIO objects. For everything else returns 0.	WITHOUT_CLASSIFICATION	0.9999498992780919	WITHOUT_CLASSIFICATION	5.010072190805637E-5	DEFECT
//sequential	WITHOUT_CLASSIFICATION	0.9999917301666608	WITHOUT_CLASSIFICATION	8.269833339253343E-6	DEFECT
// reverse the entire area of the array selected if it's reversed.	WITHOUT_CLASSIFICATION	0.9999999971309724	WITHOUT_CLASSIFICATION	2.8690274712464033E-9	DEFECT
// do median of 7 if the array is over 200 elements.	WITHOUT_CLASSIFICATION	0.9999981830439764	WITHOUT_CLASSIFICATION	1.8169560236133833E-6	DEFECT
// if it's less than 200 do median of 3	WITHOUT_CLASSIFICATION	0.999996931107619	WITHOUT_CLASSIFICATION	3.068892381016198E-6	DEFECT
// SignalFacade	WITHOUT_CLASSIFICATION	0.9999987546958814	WITHOUT_CLASSIFICATION	1.2453041186335415E-6	DEFECT
// this is the order in which MRI does these two tests	WITHOUT_CLASSIFICATION	0.999986503063607	WITHOUT_CLASSIFICATION	1.349693639299857E-5	DEFECT
// this is the order in which MRI does these tests	WITHOUT_CLASSIFICATION	0.999980170412578	WITHOUT_CLASSIFICATION	1.9829587422045135E-5	DEFECT
// basically just forcing a TypeError here to match MRI	WITHOUT_CLASSIFICATION	0.9999978073371055	WITHOUT_CLASSIFICATION	2.1926628944727347E-6	DEFECT
// not saving DFS instance, as it will only be used once (at most) per call	WITHOUT_CLASSIFICATION	0.9999875862933577	WITHOUT_CLASSIFICATION	1.2413706642351846E-5	DEFECT
// Args	WITHOUT_CLASSIFICATION	0.999998964642538	WITHOUT_CLASSIFICATION	1.0353574620055444E-6	DEFECT
// static methods only	WITHOUT_CLASSIFICATION	0.9999919243002989	WITHOUT_CLASSIFICATION	8.075699701067883E-6	DEFECT
//System.err.println(" calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.999999146452966	WITHOUT_CLASSIFICATION	8.535470339582123E-7	DEFECT
// MRI 1.8.6 behavior: null byte after '%' // leads to "%" string. Null byte in // other places, like "%5\0", leads to error.	WITHOUT_CLASSIFICATION	0.9999821291525778	WITHOUT_CLASSIFICATION	1.7870847422295483E-5	DEFECT
// last index (+1) accessed by next() // last index (+1) accessed by get()	WITHOUT_CLASSIFICATION	0.9999949236402325	WITHOUT_CLASSIFICATION	5.076359767561143E-6	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly.	WITHOUT_CLASSIFICATION	0.9999966313775566	WITHOUT_CLASSIFICATION	3.3686224434456914E-6	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly. Version for 1.9.	WITHOUT_CLASSIFICATION	0.9999942832242218	WITHOUT_CLASSIFICATION	5.71677577822682E-6	DEFECT
// MRI doesn't flag it as an error if width is given multiple // times as a number (but it does for *)	WITHOUT_CLASSIFICATION	0.9999594800633339	WITHOUT_CLASSIFICATION	4.051993666600879E-5	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9999978044602161	WITHOUT_CLASSIFICATION	2.195539783811878E-6	DEFECT
// MRI 1.8.5-p12 doesn't support 1-char strings, but // YARV 0.4.1 does. I don't think it hurts to include // this; sprintf('%c','a') is nicer than sprintf('%c','a'[0])	WITHOUT_CLASSIFICATION	0.9999912001602587	WITHOUT_CLASSIFICATION	8.799839741331328E-6	DEFECT
// 'd' and 'i' are the same	WITHOUT_CLASSIFICATION	0.9999979213227059	WITHOUT_CLASSIFICATION	2.0786772939642655E-6	DEFECT
// 'u' with space or plus flags is same as 'd'	WITHOUT_CLASSIFICATION	0.9999981070744605	WITHOUT_CLASSIFICATION	1.892925539437124E-6	DEFECT
// We depart here from strict adherence to MRI code, as MRI // uses C-sprintf, in part, to format numeric output, while // we'll use Java's numeric formatting code (and our own).	WITHOUT_CLASSIFICATION	0.9999748928720371	WITHOUT_CLASSIFICATION	2.5107127962936954E-5	DEFECT
// skip '-' in bytes, will add where appropriate	WITHOUT_CLASSIFICATION	0.9999956452263249	WITHOUT_CLASSIFICATION	4.3547736750758075E-6	DEFECT
// ..	WITHOUT_CLASSIFICATION	0.9999937496168188	WITHOUT_CLASSIFICATION	6.25038318131752E-6	DEFECT
// the 1 is for the stripped sign char	WITHOUT_CLASSIFICATION	0.9999997606944105	WITHOUT_CLASSIFICATION	2.3930558946647346E-7	DEFECT
// FIXME: what is correct 'recv' argument? // (this does produce the desired behavior)	WITHOUT_CLASSIFICATION	0.860124132025615	DEFECT	0.13987586797438512	WITHOUT_CLASSIFICATION
// gotta have at least a zero...	WITHOUT_CLASSIFICATION	0.9999971646372116	WITHOUT_CLASSIFICATION	2.8353627883890453E-6	DEFECT
// OK, we now have the significand in digits[0...nDigits] // and the exponent in exponent.  We're ready to format.	WITHOUT_CLASSIFICATION	0.9999998435659161	WITHOUT_CLASSIFICATION	1.564340839852279E-7	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9999749380634403	WITHOUT_CLASSIFICATION	2.5061936559686734E-5	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999934843802797	WITHOUT_CLASSIFICATION	6.515619720386369E-6	DEFECT
//System.err.println(" stringToLong/reading c=" + data[s]);	WITHOUT_CLASSIFICATION	0.9999978378060466	WITHOUT_CLASSIFICATION	2.1621939535107585E-6	DEFECT
//System.err.println(" stringToLong/converted c=" + c);	WITHOUT_CLASSIFICATION	0.9999995400927798	WITHOUT_CLASSIFICATION	4.5990722012976886E-7	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9999749380634403	WITHOUT_CLASSIFICATION	2.5061936559686734E-5	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999934843802797	WITHOUT_CLASSIFICATION	6.515619720386369E-6	DEFECT
// precision for G/g includes integer digits	WITHOUT_CLASSIFICATION	0.9999981830834631	WITHOUT_CLASSIFICATION	1.8169165367688096E-6	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.999997165255433	WITHOUT_CLASSIFICATION	2.8347445669312096E-6	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.999997165255433	WITHOUT_CLASSIFICATION	2.8347445669312096E-6	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9999965294962673	WITHOUT_CLASSIFICATION	3.4705037327464288E-6	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9999982541456003	WITHOUT_CLASSIFICATION	1.7458543996538609E-6	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999894000085265	WITHOUT_CLASSIFICATION	1.0599991473575959E-5	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.999996809956284	WITHOUT_CLASSIFICATION	3.1900437159507274E-6	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9998411223259723	WITHOUT_CLASSIFICATION	1.588776740277242E-4	DEFECT
// MRI behavior: In this mode // trailing zeroes are removed: // 1.500E+05 -> 1.5E+05 	WITHOUT_CLASSIFICATION	0.9999273383229925	WITHOUT_CLASSIFICATION	7.266167700749064E-5	DEFECT
// '.' is printed	WITHOUT_CLASSIFICATION	0.9999987340997569	WITHOUT_CLASSIFICATION	1.2659002430627573E-6	DEFECT
// all precision numebers printed	WITHOUT_CLASSIFICATION	0.9999979427997306	WITHOUT_CLASSIFICATION	2.0572002692554838E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999975378620306	WITHOUT_CLASSIFICATION	2.462137969489749E-6	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9999957151743692	WITHOUT_CLASSIFICATION	4.2848256307531885E-6	DEFECT
// decimal form, like (but not *just* like!) 'f'	WITHOUT_CLASSIFICATION	0.9999958964429722	WITHOUT_CLASSIFICATION	4.1035570278280705E-6	DEFECT
// digits array shifted, update all	WITHOUT_CLASSIFICATION	0.9999996879497228	WITHOUT_CLASSIFICATION	3.120502771789323E-7	DEFECT
// will have a trailing '.' // g fills trailing zeroes if #	WITHOUT_CLASSIFICATION	0.9999924652635888	WITHOUT_CLASSIFICATION	7.534736411256084E-6	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999958998066274	WITHOUT_CLASSIFICATION	4.100193372555659E-6	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999958998066274	WITHOUT_CLASSIFICATION	4.100193372555659E-6	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999960915413187	WITHOUT_CLASSIFICATION	3.90845868116753E-6	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999960915413187	WITHOUT_CLASSIFICATION	3.90845868116753E-6	DEFECT
// digits arr shifted, update all	WITHOUT_CLASSIFICATION	0.9999996817602075	WITHOUT_CLASSIFICATION	3.1823979248998554E-7	DEFECT
// (1|intlen).prec	WITHOUT_CLASSIFICATION	0.9999992434619347	WITHOUT_CLASSIFICATION	7.565380652552506E-7	DEFECT
// (1|intlen)	WITHOUT_CLASSIFICATION	0.9999988023958845	WITHOUT_CLASSIFICATION	1.1976041155299885E-6	DEFECT
// will have a trailing '.'	WITHOUT_CLASSIFICATION	0.9999923717809155	WITHOUT_CLASSIFICATION	7.6282190845760835E-6	DEFECT
// fill up the rest with zeroes	WITHOUT_CLASSIFICATION	0.9999984870623276	WITHOUT_CLASSIFICATION	1.5129376722597793E-6	DEFECT
//System.err.println(" main/len=" + len);	WITHOUT_CLASSIFICATION	0.9999995065950266	WITHOUT_CLASSIFICATION	4.934049733661772E-7	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999894000085265	WITHOUT_CLASSIFICATION	1.0599991473575959E-5	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.999996809956284	WITHOUT_CLASSIFICATION	3.1900437159507274E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999975378620306	WITHOUT_CLASSIFICATION	2.462137969489749E-6	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9999957151743692	WITHOUT_CLASSIFICATION	4.2848256307531885E-6	DEFECT
// equivalent to MRI case '\0':	WITHOUT_CLASSIFICATION	0.9999995174640502	WITHOUT_CLASSIFICATION	4.825359497360754E-7	DEFECT
// '.' and all precision digits printed	WITHOUT_CLASSIFICATION	0.9999994605202336	WITHOUT_CLASSIFICATION	5.394797664183694E-7	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9999954268534227	WITHOUT_CLASSIFICATION	4.5731465772932015E-6	DEFECT
// dangling '%' char	WITHOUT_CLASSIFICATION	0.9999996684992781	WITHOUT_CLASSIFICATION	3.3150072185381016E-7	DEFECT
// main while loop (offset < length)	WITHOUT_CLASSIFICATION	0.999999689130325	WITHOUT_CLASSIFICATION	3.1086967505772706E-7	DEFECT
// debugging code, keeping for now	WITHOUT_CLASSIFICATION	0.999981220298951	WITHOUT_CLASSIFICATION	1.8779701048987224E-5	DEFECT
// MRI rounds up on nnn5nnn, but not nnn5 -- // except for when they do	WITHOUT_CLASSIFICATION	0.9999946528561809	WITHOUT_CLASSIFICATION	5.347143819003252E-6	DEFECT
// "%.0f" % 0.99	WITHOUT_CLASSIFICATION	0.9999980256968034	WITHOUT_CLASSIFICATION	1.9743031966438683E-6	DEFECT
// limit the length of negatives if possible (also faster)	WITHOUT_CLASSIFICATION	0.9999996201025352	WITHOUT_CLASSIFICATION	3.798974648096146E-7	DEFECT
// negative values	WITHOUT_CLASSIFICATION	0.9999989374653732	WITHOUT_CLASSIFICATION	1.0625346268561606E-6	DEFECT
// calculation for negatives when %u specified // for values >= Integer.MIN_VALUE * 2, MRI uses (the equivalent of) //   long neg_u = (((long)Integer.MAX_VALUE + 1) << 1) + val // for smaller values, BigInteger math is required to conform to MRI's // result.	WITHOUT_CLASSIFICATION	0.9999999289376867	WITHOUT_CLASSIFICATION	7.106231330586034E-8	DEFECT
// relatively cheap test for 32-bit values	WITHOUT_CLASSIFICATION	0.9999998651269751	WITHOUT_CLASSIFICATION	1.348730248034534E-7	DEFECT
// no such luck...	WITHOUT_CLASSIFICATION	0.9999997387114608	WITHOUT_CLASSIFICATION	2.612885391941649E-7	DEFECT
// ok, now it gets expensive...	WITHOUT_CLASSIFICATION	0.9999987382342802	WITHOUT_CLASSIFICATION	1.261765719790672E-6	DEFECT
// go through negated powers of 32 until we find one small enough 	WITHOUT_CLASSIFICATION	0.9999998808176539	WITHOUT_CLASSIFICATION	1.1918234620394765E-7	DEFECT
// add to the corresponding positive power of 32 for the result. // meaningful? no. conformant? yes. I just write the code...	WITHOUT_CLASSIFICATION	0.9999960318815609	WITHOUT_CLASSIFICATION	3.968118439070931E-6	DEFECT
/* constant vector a */	WITHOUT_CLASSIFICATION	0.9999958963156654	WITHOUT_CLASSIFICATION	4.103684334568246E-6	DEFECT
/* most significant w-r bits */	WITHOUT_CLASSIFICATION	0.9999955841204834	WITHOUT_CLASSIFICATION	4.415879516600532E-6	DEFECT
/* least significant r bits */	WITHOUT_CLASSIFICATION	0.9999983807206042	WITHOUT_CLASSIFICATION	1.6192793957796917E-6	DEFECT
// state[j] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999994996675495	WITHOUT_CLASSIFICATION	5.003324503715826E-7	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999993936634756	WITHOUT_CLASSIFICATION	6.063365243255395E-7	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999993936634756	WITHOUT_CLASSIFICATION	6.063365243255395E-7	DEFECT
/* MSB is 1; assuring non-zero initial array */	WITHOUT_CLASSIFICATION	0.9999809555885435	WITHOUT_CLASSIFICATION	1.904441145649669E-5	DEFECT
/* Tempering */	WITHOUT_CLASSIFICATION	0.9999323214098672	WITHOUT_CLASSIFICATION	6.767859013283393E-5	DEFECT
// MRI behavior: Week values are monotonous. // So, weeks that effectively belong to previous year, // will get the value of 0, not 52 or 53, as in Java.	WITHOUT_CLASSIFICATION	0.9999299263291433	WITHOUT_CLASSIFICATION	7.007367085669671E-5	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9999991495326584	WITHOUT_CLASSIFICATION	8.504673415439066E-7	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9999991495326584	WITHOUT_CLASSIFICATION	8.504673415439066E-7	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9999954268534227	WITHOUT_CLASSIFICATION	4.5731465772932015E-6	DEFECT
//System.err.println("getSign()");	WITHOUT_CLASSIFICATION	0.9999922119788782	WITHOUT_CLASSIFICATION	7.78802112173275E-6	DEFECT
//System.err.println(" getSign/" + sign);	WITHOUT_CLASSIFICATION	0.9999995025895959	WITHOUT_CLASSIFICATION	4.974104039815954E-7	DEFECT
//System.err.println("figureOutBase()/base=" + base);	WITHOUT_CLASSIFICATION	0.9999996812319456	WITHOUT_CLASSIFICATION	3.187680544110745E-7	DEFECT
//System.err.println(" figureOutBase/base=" + base);	WITHOUT_CLASSIFICATION	0.9999994974876606	WITHOUT_CLASSIFICATION	5.025123393722868E-7	DEFECT
//System.err.println("calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9999991529636053	WITHOUT_CLASSIFICATION	8.470363945897494E-7	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.999983014492879	WITHOUT_CLASSIFICATION	1.6985507121123663E-5	DEFECT
//System.err.println(" stringToLong=" + val);	WITHOUT_CLASSIFICATION	0.9999988167541931	WITHOUT_CLASSIFICATION	1.1832458069796492E-6	DEFECT
// no number	WITHOUT_CLASSIFICATION	0.9999995591973558	WITHOUT_CLASSIFICATION	4.408026442213943E-7	DEFECT
// trailing garbage	WITHOUT_CLASSIFICATION	0.999998981329794	WITHOUT_CLASSIFICATION	1.0186702060138825E-6	DEFECT
//System.err.println("ADDING CHAR: " + (char)cx + " with number: " + cx);	WITHOUT_CLASSIFICATION	0.999999637162619	WITHOUT_CLASSIFICATION	3.628373810013108E-7	DEFECT
// it was not found at all!	WITHOUT_CLASSIFICATION	0.9999843117641691	WITHOUT_CLASSIFICATION	1.5688235830798144E-5	DEFECT
// can be overridden to be informed when objects are removed	WITHOUT_CLASSIFICATION	0.9999994071066912	WITHOUT_CLASSIFICATION	5.928933088521317E-7	DEFECT
// we reached the end of a list	WITHOUT_CLASSIFICATION	0.9999997129024131	WITHOUT_CLASSIFICATION	2.8709758688483635E-7	DEFECT
// goto next bucket	WITHOUT_CLASSIFICATION	0.9999925841468769	WITHOUT_CLASSIFICATION	7.415853123103002E-6	DEFECT
// we reached the end	WITHOUT_CLASSIFICATION	0.9999993714335699	WITHOUT_CLASSIFICATION	6.285664301282808E-7	DEFECT
// entry is the first element of this bucket	WITHOUT_CLASSIFICATION	0.9999425402932857	WITHOUT_CLASSIFICATION	5.74597067144056E-5	DEFECT
// states	WITHOUT_CLASSIFICATION	0.9999995929167999	WITHOUT_CLASSIFICATION	4.07083200195398E-7	DEFECT
// remove leading whitespace (includes _ for lax) // get sign, if any	WITHOUT_CLASSIFICATION	0.999999351491031	WITHOUT_CLASSIFICATION	6.485089689055346E-7	DEFECT
// optimistic pass - calculate value as digits are processed // digits - lax rules // decimal digits - lax rules // exponent sign/digits - lax rules // digits - strict rules // decimal digits - strict rules // exponent sign/digits - strict rules // complete calculation if possible	WITHOUT_CLASSIFICATION	0.9999999740463679	WITHOUT_CLASSIFICATION	2.595363206702668E-8	DEFECT
// fields used for direct (optimistic) calculation // number of significant digits, updated as parsed // zeroes that may go to significand or exponent // offset of decimal pt from start (-1 -> no decimal) // significand, updated as parsed // exponent, updated as parsed	WITHOUT_CLASSIFICATION	0.9999999999888575	WITHOUT_CLASSIFICATION	1.1142517424495494E-11	DEFECT
// drop through for sign	WITHOUT_CLASSIFICATION	0.9999989253023963	WITHOUT_CLASSIFICATION	1.0746976036846906E-6	DEFECT
// switch // will use this if we have to go back the slow way	WITHOUT_CLASSIFICATION	0.9999995351436781	WITHOUT_CLASSIFICATION	4.6485632195612935E-7	DEFECT
// drop through for non-strict digits	WITHOUT_CLASSIFICATION	0.9999995743953137	WITHOUT_CLASSIFICATION	4.2560468627475605E-7	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.999999937924659	WITHOUT_CLASSIFICATION	6.207534094536191E-8	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999984250575418	WITHOUT_CLASSIFICATION	1.5749424583204502E-6	DEFECT
// no digits, go calc (will return +/- 0.0 for lax)	WITHOUT_CLASSIFICATION	0.9999999072529316	WITHOUT_CLASSIFICATION	9.274706836528338E-8	DEFECT
// ignore leading zeroes	WITHOUT_CLASSIFICATION	0.9999944291695376	WITHOUT_CLASSIFICATION	5.570830462439975E-6	DEFECT
// just save a count of zeroes for now; if no digit // ends up following them, they'll be applied to the // exponent rather than the significand (and our max // length for optimistic calc).	WITHOUT_CLASSIFICATION	0.9999999996653179	WITHOUT_CLASSIFICATION	3.3468209698515044E-10	DEFECT
// ok, got a non-zero, have to own up to our horded zeroes	WITHOUT_CLASSIFICATION	0.9999998812105675	WITHOUT_CLASSIFICATION	1.1878943245513825E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999995637807565	WITHOUT_CLASSIFICATION	4.3621924353248613E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999995637807565	WITHOUT_CLASSIFICATION	4.3621924353248613E-7	DEFECT
// oh, well, it was worth a try. go let // Double/FloatingDecimal handle it 	WITHOUT_CLASSIFICATION	0.9999993500817665	WITHOUT_CLASSIFICATION	6.499182334335016E-7	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999996189227539	WITHOUT_CLASSIFICATION	3.8107724614919515E-7	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999996189227539	WITHOUT_CLASSIFICATION	3.8107724614919515E-7	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999999509643444	WITHOUT_CLASSIFICATION	4.903565572135682E-8	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999999509643444	WITHOUT_CLASSIFICATION	4.903565572135682E-8	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999996397021255	WITHOUT_CLASSIFICATION	3.6029787450770597E-7	DEFECT
// first non_underscore char must be digit	WITHOUT_CLASSIFICATION	0.9999981028350833	WITHOUT_CLASSIFICATION	1.8971649167391123E-6	DEFECT
// no dec digits, end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.999999987331504	WITHOUT_CLASSIFICATION	1.2668496004224536E-8	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999994311160632	WITHOUT_CLASSIFICATION	5.688839368991018E-7	DEFECT
// difficult case, send to Double/FloatingDecimal	WITHOUT_CLASSIFICATION	0.9999997393176866	WITHOUT_CLASSIFICATION	2.606823133530919E-7	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999944528741538	WITHOUT_CLASSIFICATION	5.547125846152534E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999944528741538	WITHOUT_CLASSIFICATION	5.547125846152534E-6	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.999999937924659	WITHOUT_CLASSIFICATION	6.207534094536191E-8	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.999999937924659	WITHOUT_CLASSIFICATION	6.207534094536191E-8	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.999999937924659	WITHOUT_CLASSIFICATION	6.207534094536191E-8	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999984250575418	WITHOUT_CLASSIFICATION	1.5749424583204502E-6	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999995637807565	WITHOUT_CLASSIFICATION	4.3621924353248613E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999995637807565	WITHOUT_CLASSIFICATION	4.3621924353248613E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999995637807565	WITHOUT_CLASSIFICATION	4.3621924353248613E-7	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999996397021255	WITHOUT_CLASSIFICATION	3.6029787450770597E-7	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999996397021255	WITHOUT_CLASSIFICATION	3.6029787450770597E-7	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999996397021255	WITHOUT_CLASSIFICATION	3.6029787450770597E-7	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999994311160632	WITHOUT_CLASSIFICATION	5.688839368991018E-7	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999994311160632	WITHOUT_CLASSIFICATION	5.688839368991018E-7	DEFECT
// lax (str.to_f) allows underscores between e/E and sign	WITHOUT_CLASSIFICATION	0.9999986773035245	WITHOUT_CLASSIFICATION	1.3226964754122313E-6	DEFECT
// switch // for // no exponent, so drop through for calculation	WITHOUT_CLASSIFICATION	0.999999991013644	WITHOUT_CLASSIFICATION	8.986355963442807E-9	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999999683691358	WITHOUT_CLASSIFICATION	3.1630864188751475E-8	DEFECT
// TODO: it's not clear to me why, in FloatingDecimal, the // "slop" calculation performed above for positive exponents // isn't used for negative exponents as well. Will find out...	WITHOUT_CLASSIFICATION	0.8707686319667051	DEFECT	0.12923136803329496	WITHOUT_CLASSIFICATION
// no digits, error	WITHOUT_CLASSIFICATION	0.9999989922101462	WITHOUT_CLASSIFICATION	1.007789853837063E-6	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999990435050817	WITHOUT_CLASSIFICATION	9.564949182997386E-7	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999990435050817	WITHOUT_CLASSIFICATION	9.564949182997386E-7	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9999953600541076	WITHOUT_CLASSIFICATION	4.639945892322506E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.999983014492879	WITHOUT_CLASSIFICATION	1.6985507121123663E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.999983014492879	WITHOUT_CLASSIFICATION	1.6985507121123663E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.999983014492879	WITHOUT_CLASSIFICATION	1.6985507121123663E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.999983014492879	WITHOUT_CLASSIFICATION	1.6985507121123663E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.999983014492879	WITHOUT_CLASSIFICATION	1.6985507121123663E-5	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999969230048218	WITHOUT_CLASSIFICATION	3.0769951782303388E-6	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999969230048218	WITHOUT_CLASSIFICATION	3.0769951782303388E-6	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999969230048218	WITHOUT_CLASSIFICATION	3.0769951782303388E-6	DEFECT
// first char must be digit	WITHOUT_CLASSIFICATION	0.9999979361750829	WITHOUT_CLASSIFICATION	2.063824916981349E-6	DEFECT
// no dec digits after '.', error for strict	WITHOUT_CLASSIFICATION	0.9999988402586049	WITHOUT_CLASSIFICATION	1.1597413951941675E-6	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999984250575418	WITHOUT_CLASSIFICATION	1.5749424583204502E-6	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999996397021255	WITHOUT_CLASSIFICATION	3.6029787450770597E-7	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999996397021255	WITHOUT_CLASSIFICATION	3.6029787450770597E-7	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.999983014492879	WITHOUT_CLASSIFICATION	1.6985507121123663E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.999983014492879	WITHOUT_CLASSIFICATION	1.6985507121123663E-5	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999969230048218	WITHOUT_CLASSIFICATION	3.0769951782303388E-6	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9999953600541076	WITHOUT_CLASSIFICATION	4.639945892322506E-6	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999995413943207	WITHOUT_CLASSIFICATION	4.5860567934406563E-7	DEFECT
// switch //while	WITHOUT_CLASSIFICATION	0.999999418427621	WITHOUT_CLASSIFICATION	5.815723790980176E-7	DEFECT
/*     * All the positive powers of 10 that can be     * represented exactly in double/float.     * (From sun.misc.FloatingDecimal.java)     */	WITHOUT_CLASSIFICATION	0.9999854395765493	WITHOUT_CLASSIFICATION	1.4560423450807912E-5	DEFECT
// Zlib behavior: negative win_bits means no header and no checksum.	WITHOUT_CLASSIFICATION	0.9999988035407281	WITHOUT_CLASSIFICATION	1.196459271874913E-6	DEFECT
// rb_enc_mbclen	WITHOUT_CLASSIFICATION	0.9999989467848182	WITHOUT_CLASSIFICATION	1.0532151818625847E-6	DEFECT
// rb_enc_precise_mbclen	WITHOUT_CLASSIFICATION	0.9999976414174784	WITHOUT_CLASSIFICATION	2.3585825217297534E-6	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999882985372311	WITHOUT_CLASSIFICATION	1.1701462768952865E-5	DEFECT
// arg cannot be negative	WITHOUT_CLASSIFICATION	0.9999671327185065	WITHOUT_CLASSIFICATION	3.2867281493566204E-5	DEFECT
// NoFunctionalitySignalFacade	WITHOUT_CLASSIFICATION	0.9999990593940843	WITHOUT_CLASSIFICATION	9.406059156555774E-7	DEFECT
// Change visibility so others can see it	WITHOUT_CLASSIFICATION	0.9999998153903326	WITHOUT_CLASSIFICATION	1.8460966748023173E-7	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.999999892050798	WITHOUT_CLASSIFICATION	1.0794920209179626E-7	DEFECT
// strip off "_dot_rb" for .rb files	WITHOUT_CLASSIFICATION	0.9999999267669984	WITHOUT_CLASSIFICATION	7.323300155159676E-8	DEFECT
// Makes sure the key is not already in the hashtable.	WITHOUT_CLASSIFICATION	0.9999931122039952	WITHOUT_CLASSIFICATION	6.887796004807784E-6	DEFECT
// Rehash the table if the threshold is exceeded	WITHOUT_CLASSIFICATION	0.9999999160577306	WITHOUT_CLASSIFICATION	8.394226926518413E-8	DEFECT
// Creates the new entry.	WITHOUT_CLASSIFICATION	0.9999993880411339	WITHOUT_CLASSIFICATION	6.119588661045964E-7	DEFECT
// next entry to return // current slot // current entry	WITHOUT_CLASSIFICATION	0.9999996513256606	WITHOUT_CLASSIFICATION	3.4867433934823465E-7	DEFECT
// advance to first entry	WITHOUT_CLASSIFICATION	0.9999988267813911	WITHOUT_CLASSIFICATION	1.1732186089694353E-6	DEFECT
// The reason why we need the stream is to be able to invoke available() on it. // STDIN in Java is non-interruptible, non-selectable, and attempt to read // on such stream might lead to thread being blocked without *any* way to unblock it. // That's where available() comes it, so at least we could check whether // anything is available to be read without blocking.	WITHOUT_CLASSIFICATION	0.9999632649490151	WITHOUT_CLASSIFICATION	3.6735050984946184E-5	DEFECT
/*package-protected*/	WITHOUT_CLASSIFICATION	0.9999364269428312	WITHOUT_CLASSIFICATION	6.357305716883459E-5	DEFECT
// raw file URL, just open directly	WITHOUT_CLASSIFICATION	0.9999994379197589	WITHOUT_CLASSIFICATION	5.620802411576915E-7	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9999488729986981	WITHOUT_CLASSIFICATION	5.1127001301978694E-5	DEFECT
// if refcount is at or below zero, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999998651264483	WITHOUT_CLASSIFICATION	1.348735515837341E-7	DEFECT
// if channel is already closed, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999997887892952	WITHOUT_CLASSIFICATION	2.112107047351945E-7	DEFECT
// otherwise decrement and possibly close as normal	WITHOUT_CLASSIFICATION	0.9999995581247574	WITHOUT_CLASSIFICATION	4.4187524257328967E-7	DEFECT
// r/w buffer // are we reading or writing?	WITHOUT_CLASSIFICATION	0.9999527916276374	WITHOUT_CLASSIFICATION	4.720837236258538E-5	DEFECT
// this constructor is used by fdopen, so we don't increment descriptor ref count	WITHOUT_CLASSIFICATION	0.9999939792324443	WITHOUT_CLASSIFICATION	6.020767555722995E-6	DEFECT
// unread back	WITHOUT_CLASSIFICATION	0.9999977274739004	WITHOUT_CLASSIFICATION	2.2725260996373006E-6	DEFECT
// iterate over remainder of buffer until we find a match	WITHOUT_CLASSIFICATION	0.999999701889737	WITHOUT_CLASSIFICATION	2.981102631242301E-7	DEFECT
// terminate and advance buffer when we find our char	WITHOUT_CLASSIFICATION	0.9999996176782522	WITHOUT_CLASSIFICATION	3.8232174786110236E-7	DEFECT
// no match, append remainder of buffer and continue with next block	WITHOUT_CLASSIFICATION	0.999999855639857	WITHOUT_CLASSIFICATION	1.4436014292146855E-7	DEFECT
// found a match above, check if remaining separator characters match, appending as we go	WITHOUT_CLASSIFICATION	0.999999302850616	WITHOUT_CLASSIFICATION	6.97149383941762E-7	DEFECT
// // Check file size - special files in /proc have zero size and need to be // handled by the generic read path. //	WITHOUT_CLASSIFICATION	0.9999965348539528	WITHOUT_CLASSIFICATION	3.46514604723488E-6	DEFECT
// // Copy any buffered data (including ungetc byte) //	WITHOUT_CLASSIFICATION	0.999994548338675	WITHOUT_CLASSIFICATION	5.451661325056688E-6	DEFECT
// // Now read unbuffered directly from the file //	WITHOUT_CLASSIFICATION	0.999999055054549	WITHOUT_CLASSIFICATION	9.44945450889051E-7	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999995413943207	WITHOUT_CLASSIFICATION	4.5860567934406563E-7	DEFECT
// // Need to clamp source (buffer) size to avoid overrun //	WITHOUT_CLASSIFICATION	0.9999999619343126	WITHOUT_CLASSIFICATION	3.8065687475061454E-8	DEFECT
// not closing from finalize	WITHOUT_CLASSIFICATION	0.9999770602818282	WITHOUT_CLASSIFICATION	2.2939718171752236E-5	DEFECT
// clear runtime so it doesn't get stuck in memory (JRUBY-2933)	WITHOUT_CLASSIFICATION	0.999995070878743	WITHOUT_CLASSIFICATION	4.929121257040038E-6	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9999988189940219	WITHOUT_CLASSIFICATION	1.1810059781056304E-6	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9999988189940219	WITHOUT_CLASSIFICATION	1.1810059781056304E-6	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999875218154828	WITHOUT_CLASSIFICATION	1.2478184517211646E-5	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999875218154828	WITHOUT_CLASSIFICATION	1.2478184517211646E-5	DEFECT
// For Sockets, only write as much as will fit.	WITHOUT_CLASSIFICATION	0.9999917940593231	WITHOUT_CLASSIFICATION	8.205940676762589E-6	DEFECT
// Correct position for read / write buffering (we could invalidate, but expensive)	WITHOUT_CLASSIFICATION	0.999979033244635	WITHOUT_CLASSIFICATION	2.0966755365030164E-5	DEFECT
// Adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999955946710929	WITHOUT_CLASSIFICATION	4.405328907020245E-6	DEFECT
// for SEEK_CUR, need to adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999983514565991	WITHOUT_CLASSIFICATION	1.648543400877534E-6	DEFECT
// libc flushes writes on any read from the actual file, so we flush here	WITHOUT_CLASSIFICATION	0.9999986852787225	WITHOUT_CLASSIFICATION	1.3147212775120861E-6	DEFECT
// we have read ahead, and need to back up	WITHOUT_CLASSIFICATION	0.9999997331815319	WITHOUT_CLASSIFICATION	2.668184680912704E-7	DEFECT
// 128K seems to be the minimum at which the stat+seek is faster than reallocation	WITHOUT_CLASSIFICATION	0.9999947878935294	WITHOUT_CLASSIFICATION	5.212106470677864E-6	DEFECT
// // limit each iteration to a max of BULK_READ_SIZE to avoid over-size allocations //	WITHOUT_CLASSIFICATION	0.9999997965449472	WITHOUT_CLASSIFICATION	2.0345505284775824E-7	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9999975798584927	WITHOUT_CLASSIFICATION	2.4201415073173564E-6	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9999989681869279	WITHOUT_CLASSIFICATION	1.0318130721987455E-6	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size //	WITHOUT_CLASSIFICATION	0.9999973464788433	WITHOUT_CLASSIFICATION	2.6535211566172377E-6	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999996458752065	WITHOUT_CLASSIFICATION	3.5412479338444186E-7	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999996458752065	WITHOUT_CLASSIFICATION	3.5412479338444186E-7	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size, or // the destination is a direct buffer. //	WITHOUT_CLASSIFICATION	0.9999953818090273	WITHOUT_CLASSIFICATION	4.618190972798028E-6	DEFECT
// // We limit reads to BULK_READ_SIZED chunks to avoid NIO allocating // a huge temporary native buffer, when doing reads into a heap buffer // If the dst buffer is direct, then no need to limit. //	WITHOUT_CLASSIFICATION	0.9999999118898152	WITHOUT_CLASSIFICATION	8.811018486756438E-8	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999999108795355	WITHOUT_CLASSIFICATION	8.912046457053921E-8	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999999108795355	WITHOUT_CLASSIFICATION	8.912046457053921E-8	DEFECT
// Doesn't fit in buffer. Write immediately. // ensure nothing left to write	WITHOUT_CLASSIFICATION	0.9999118010471905	WITHOUT_CLASSIFICATION	8.819895280955199E-5	DEFECT
// truncate can't lengthen files, so we save position, seek/write, and go back	WITHOUT_CLASSIFICATION	0.9999990026188585	WITHOUT_CLASSIFICATION	9.973811414012317E-7	DEFECT
// how far ahead we are when reading	WITHOUT_CLASSIFICATION	0.9996085099232191	WITHOUT_CLASSIFICATION	3.914900767808758E-4	DEFECT
// if the read buffer is ahead, back up	WITHOUT_CLASSIFICATION	0.9999964715347489	WITHOUT_CLASSIFICATION	3.5284652511175678E-6	DEFECT
// close without removing from finalizers	WITHOUT_CLASSIFICATION	0.9999992937066253	WITHOUT_CLASSIFICATION	7.062933747463541E-7	DEFECT
// putting a bit back, so we're not at EOF anymore	WITHOUT_CLASSIFICATION	0.9999919484734199	WITHOUT_CLASSIFICATION	8.051526580158507E-6	DEFECT
// save the ungot	WITHOUT_CLASSIFICATION	0.9999986405901283	WITHOUT_CLASSIFICATION	1.3594098717214548E-6	DEFECT
// otherwise, we try an unbuffered read to get whatever's available	WITHOUT_CLASSIFICATION	0.99999824605356	WITHOUT_CLASSIFICATION	1.7539464399540224E-6	DEFECT
// ignore this; select() will set the correct mode when it is finished	WITHOUT_CLASSIFICATION	0.9997501880539691	WITHOUT_CLASSIFICATION	2.4981194603088363E-4	DEFECT
// flush first	WITHOUT_CLASSIFICATION	0.9999987404551126	WITHOUT_CLASSIFICATION	1.2595448873742986E-6	DEFECT
// // Wake up any channels that became unblocked //	WITHOUT_CLASSIFICATION	0.9999982547533331	WITHOUT_CLASSIFICATION	1.7452466667906376E-6	DEFECT
// // Register any new blocking I/O requests //	WITHOUT_CLASSIFICATION	0.9999994586532404	WITHOUT_CLASSIFICATION	5.413467595107705E-7	DEFECT
// Now clear out any previously selected channels	WITHOUT_CLASSIFICATION	0.9999999743016611	WITHOUT_CLASSIFICATION	2.5698338921536997E-8	DEFECT
// // Wait for I/O on any channel //	WITHOUT_CLASSIFICATION	0.9999995203511751	WITHOUT_CLASSIFICATION	4.796488249230258E-7	DEFECT
// Do not open as 'rw' by default since a file with read-only permissions will fail on 'rw'	WITHOUT_CLASSIFICATION	0.9999781252285618	WITHOUT_CLASSIFICATION	2.1874771438184526E-5	DEFECT
// Java requires "w" for creating a file that does not exist	WITHOUT_CLASSIFICATION	0.9999968357228703	WITHOUT_CLASSIFICATION	3.1642771296886864E-6	DEFECT
// seek to force underlying buffer to flush	WITHOUT_CLASSIFICATION	0.9999836363204918	WITHOUT_CLASSIFICATION	1.6363679508203576E-5	DEFECT
// seek to force read buffer to invalidate	WITHOUT_CLASSIFICATION	0.9999988019364184	WITHOUT_CLASSIFICATION	1.198063581573726E-6	DEFECT
/*        result = eval("arr = Array::['c', 200]; p arr");        assertEquals("[\"c\", 200]", result);        result = eval("arr = Array.['d', 200]; p arr");        assertEquals("[\"d\", 200]", result);        */	WITHOUT_CLASSIFICATION	0.9999941219436518	WITHOUT_CLASSIFICATION	5.878056348212361E-6	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999955104256707	WITHOUT_CLASSIFICATION	4.489574329313278E-6	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.9152087367244971	WITHOUT_CLASSIFICATION	0.08479126327550292	DEFECT
// make sure the pipe stream is set to null	WITHOUT_CLASSIFICATION	0.9999991994563107	WITHOUT_CLASSIFICATION	8.005436892265542E-7	DEFECT
// make sure the main stream is set to null	WITHOUT_CLASSIFICATION	0.9999992642401688	WITHOUT_CLASSIFICATION	7.35759831182422E-7	DEFECT
// first try our custom-generated Unsafe	WITHOUT_CLASSIFICATION	0.9999969349851439	WITHOUT_CLASSIFICATION	3.0650148560695634E-6	DEFECT
// then try Sun's Unsafe	WITHOUT_CLASSIFICATION	0.9999782702160234	WITHOUT_CLASSIFICATION	2.1729783976566518E-5	DEFECT
// if we get here, the class and field exist; construct our Unsafe impl // that calls it directly	WITHOUT_CLASSIFICATION	0.999999775058596	WITHOUT_CLASSIFICATION	2.2494140394669776E-7	DEFECT
// else leave it null	WITHOUT_CLASSIFICATION	0.9999917261237782	WITHOUT_CLASSIFICATION	8.27387622184528E-6	DEFECT
// TypeMatcher	WITHOUT_CLASSIFICATION	0.9999959729807402	WITHOUT_CLASSIFICATION	4.0270192597881856E-6	DEFECT
// This is now needed, since module Java // isn't in by default	WITHOUT_CLASSIFICATION	0.9996349681628952	WITHOUT_CLASSIFICATION	3.6503183710482603E-4	DEFECT
// Iterate over the RubyHash keySet, simultaneously iterating over the values()	WITHOUT_CLASSIFICATION	0.9999994083316687	WITHOUT_CLASSIFICATION	5.916683313435142E-7	DEFECT
// Get the value from the map via the key	WITHOUT_CLASSIFICATION	0.9999976701756892	WITHOUT_CLASSIFICATION	2.3298243108294435E-6	DEFECT
// Get the value from the map via the values iterator	WITHOUT_CLASSIFICATION	0.9999996291186326	WITHOUT_CLASSIFICATION	3.708813674812861E-7	DEFECT
// Check the 2 values obtained via different means	WITHOUT_CLASSIFICATION	0.9999993230715776	WITHOUT_CLASSIFICATION	6.769284224380719E-7	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999576190789767	WITHOUT_CLASSIFICATION	4.2380921023150674E-5	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999576190789767	WITHOUT_CLASSIFICATION	4.2380921023150674E-5	DEFECT
// Check the entry.setValue values come back out ok	WITHOUT_CLASSIFICATION	0.9999993095965714	WITHOUT_CLASSIFICATION	6.904034286794096E-7	DEFECT
// If we're running from within an IDE we may not have // the .rb files in our classpath. Try to find them // in the filesystem instead.	WITHOUT_CLASSIFICATION	0.9999984695623877	WITHOUT_CLASSIFICATION	1.5304376123506774E-6	DEFECT
//assertEquals("\"foo\"\n\"bar\"", eval("$h.each {|val| p val}")); //assertEquals("[\"foo\", \"bar\"]", eval("p $h.each {|val| }"));	WITHOUT_CLASSIFICATION	0.9999995302957567	WITHOUT_CLASSIFICATION	4.6970424329084953E-7	DEFECT
// Init	WITHOUT_CLASSIFICATION	0.9999931083279107	WITHOUT_CLASSIFICATION	6.8916720893720155E-6	DEFECT
// Block	WITHOUT_CLASSIFICATION	0.9999772127586652	WITHOUT_CLASSIFICATION	2.2787241334670584E-5	DEFECT
// Copy constructor	WITHOUT_CLASSIFICATION	0.9999993368860336	WITHOUT_CLASSIFICATION	6.631139665152695E-7	DEFECT
// presumably this require should fail	WITHOUT_CLASSIFICATION	0.9988364422005824	WITHOUT_CLASSIFICATION	0.0011635577994175339	DEFECT
// JRUBY-646 // presumably this require should fail	WITHOUT_CLASSIFICATION	0.9967587059236557	WITHOUT_CLASSIFICATION	0.0032412940763443796	DEFECT
// Test that requiring a normal Java class raises an error (JRUBY-3214	WITHOUT_CLASSIFICATION	0.9996402906137516	WITHOUT_CLASSIFICATION	3.597093862483654E-4	DEFECT
// ok	WITHOUT_CLASSIFICATION	0.9999945835065558	WITHOUT_CLASSIFICATION	5.416493444258476E-6	DEFECT
// Function not used...but it gets rid of unused warnings in Eclipse (we do call those methods // from Ruby so they are not really unused).	WITHOUT_CLASSIFICATION	0.9999926324971582	WITHOUT_CLASSIFICATION	7.367502841885105E-6	DEFECT
//load should work several times in a row	WITHOUT_CLASSIFICATION	0.9961933909229943	WITHOUT_CLASSIFICATION	0.0038066090770057744	DEFECT
//reset the $loadTestvar	WITHOUT_CLASSIFICATION	0.9999951500341552	WITHOUT_CLASSIFICATION	4.849965844717828E-6	DEFECT
//call throwException via JRuby	WITHOUT_CLASSIFICATION	0.9999644523859164	WITHOUT_CLASSIFICATION	3.554761408360355E-5	DEFECT
// Notify the calling thread that we're about to go to sleep the first time	WITHOUT_CLASSIFICATION	0.999999860561099	WITHOUT_CLASSIFICATION	1.3943890096207624E-7	DEFECT
// wait for the go signal	WITHOUT_CLASSIFICATION	0.9999999132332132	WITHOUT_CLASSIFICATION	8.67667867194741E-8	DEFECT
// run ten separate calls into Ruby, with delay and explicit GC	WITHOUT_CLASSIFICATION	0.9999999370767384	WITHOUT_CLASSIFICATION	6.292326159515409E-8	DEFECT
// wait until thread has initialized	WITHOUT_CLASSIFICATION	0.9999954846162294	WITHOUT_CLASSIFICATION	4.515383770630203E-6	DEFECT
// notify thread to proceed	WITHOUT_CLASSIFICATION	0.9999987145251182	WITHOUT_CLASSIFICATION	1.2854748818077023E-6	DEFECT
// wait until thread has completed	WITHOUT_CLASSIFICATION	0.999999461652572	WITHOUT_CLASSIFICATION	5.383474278899072E-7	DEFECT
// we do preand post load outside the "body" versions to pre-prepare // and pre-push the dynamic scope we need for lastline	WITHOUT_CLASSIFICATION	0.9999999367883434	WITHOUT_CLASSIFICATION	6.3211656577017E-8	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999999580540141	WITHOUT_CLASSIFICATION	4.194598585307353E-8	DEFECT
// MRI behavior: raise ArgumentError for 'unknown command' before // checking number of args.	WITHOUT_CLASSIFICATION	0.9999997680441213	WITHOUT_CLASSIFICATION	2.319558786289998E-7	DEFECT
// if any exceptions were raised, we fail	WITHOUT_CLASSIFICATION	0.9999922379063462	WITHOUT_CLASSIFICATION	7.762093653734007E-6	DEFECT
// there should only be one more thread in thread group than before we started	WITHOUT_CLASSIFICATION	0.9999982954096872	WITHOUT_CLASSIFICATION	1.7045903127785785E-6	DEFECT
// construct a new cache with thread's classloader and no limit	WITHOUT_CLASSIFICATION	0.999999548082267	WITHOUT_CLASSIFICATION	4.519177330926893E-7	DEFECT
//        Class<?> script1 = ((DefaultMethod) runtime1.getObject().getMethods().get("foo")).getJITCompilerScript().getClass(); //        Class<?> script2 = ((DefaultMethod) runtime2.getObject().getMethods().get("foo")).getJITCompilerScript().getClass();	WITHOUT_CLASSIFICATION	0.9999889831156616	WITHOUT_CLASSIFICATION	1.1016884338246635E-5	DEFECT
//        assertSame(script1, script2);	WITHOUT_CLASSIFICATION	0.9999993299807509	WITHOUT_CLASSIFICATION	6.700192490071003E-7	DEFECT
// void methods should work	WITHOUT_CLASSIFICATION	0.9996998089632118	WITHOUT_CLASSIFICATION	3.001910367882817E-4	DEFECT
// methods with required = 4 or higher should bind and be callable using reflection // JRUBY-3649	WITHOUT_CLASSIFICATION	0.9999947094949484	WITHOUT_CLASSIFICATION	5.2905050515217175E-6	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999970742187217	WITHOUT_CLASSIFICATION	2.92578127824989E-6	DEFECT
// Ensure we have a new interpreter for each test. Previous we were using the //  same interpreter which caused problems as soon as one test failed.	WITHOUT_CLASSIFICATION	0.9999999872515932	WITHOUT_CLASSIFICATION	1.2748406875830601E-8	DEFECT
// Without a flush Ant will miss some of our output	WITHOUT_CLASSIFICATION	0.9999974617574326	WITHOUT_CLASSIFICATION	2.538242567413014E-6	DEFECT
// assertTrue(rubyObject.kind_of(ruby.getClasses().getStringClass()).isFalse());	WITHOUT_CLASSIFICATION	0.9999844119665029	WITHOUT_CLASSIFICATION	1.5588033497062035E-5	DEFECT
//        int n = 10;	WITHOUT_CLASSIFICATION	0.9999922429510877	WITHOUT_CLASSIFICATION	7.757048912251066E-6	DEFECT
// there might be more test classes in a single file, so we iterate over them	WITHOUT_CLASSIFICATION	0.9999999410447327	WITHOUT_CLASSIFICATION	5.895526738726602E-8	DEFECT
//No ClassCastException!	WITHOUT_CLASSIFICATION	0.9999917782815148	WITHOUT_CLASSIFICATION	8.221718485223637E-6	DEFECT
// value equality	WITHOUT_CLASSIFICATION	0.9999976287579505	WITHOUT_CLASSIFICATION	2.3712420495444446E-6	DEFECT
// identity equality	WITHOUT_CLASSIFICATION	0.9999991712048284	WITHOUT_CLASSIFICATION	8.287951716049592E-7	DEFECT
// bench straight-up integer fib(30)	WITHOUT_CLASSIFICATION	0.9999999447580359	WITHOUT_CLASSIFICATION	5.524196409622624E-8	DEFECT
// bench Integer fib	WITHOUT_CLASSIFICATION	0.9999995512221316	WITHOUT_CLASSIFICATION	4.487778683889275E-7	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999972502194274	WITHOUT_CLASSIFICATION	2.7497805726550184E-6	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999972502194274	WITHOUT_CLASSIFICATION	2.7497805726550184E-6	DEFECT
// bench fixnum-boxed fib	WITHOUT_CLASSIFICATION	0.9999884524457499	WITHOUT_CLASSIFICATION	1.1547554250215905E-5	DEFECT
// bench straight-up long fib(30)	WITHOUT_CLASSIFICATION	0.9999999168729463	WITHOUT_CLASSIFICATION	8.312705365781939E-8	DEFECT
// bench Long fib	WITHOUT_CLASSIFICATION	0.9999976034334108	WITHOUT_CLASSIFICATION	2.3965665892015217E-6	DEFECT
// skip this one, probably no 'ls' (windows)	WITHOUT_CLASSIFICATION	0.9999972114851247	WITHOUT_CLASSIFICATION	2.7885148753090086E-6	DEFECT
// start off with a neutral parent	WITHOUT_CLASSIFICATION	0.9999996088678128	WITHOUT_CLASSIFICATION	3.9113218720506215E-7	DEFECT
/*            public class Hello {                public static String getMessage() {                    return ".....";                }            }            */	WITHOUT_CLASSIFICATION	0.9999928033601224	WITHOUT_CLASSIFICATION	7.19663987758038E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999973678510596	WITHOUT_CLASSIFICATION	2.6321489403293597E-6	DEFECT
// Note: We can't use file.exists() to check whether the symlink // exists or not, because that method returns false for existing // but broken symlink. So, we try without the existence check, // but in the try-catch block. // MRI behavior: symlink? on broken symlink should return true.	WITHOUT_CLASSIFICATION	0.9999449889474734	WITHOUT_CLASSIFICATION	5.501105252670788E-5	DEFECT
// We are creating a new IO object that shares the same // IOHandler (and fileno).	WITHOUT_CLASSIFICATION	0.9999995656840742	WITHOUT_CLASSIFICATION	4.343159257806492E-7	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999986536329442	WITHOUT_CLASSIFICATION	1.3463670558010445E-6	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9999981501311187	WITHOUT_CLASSIFICATION	1.849868881333727E-6	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9999989384464941	WITHOUT_CLASSIFICATION	1.0615535059204387E-6	DEFECT
// Translate "x || y" --> "x = (is_true(x) ? x : y)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, true, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9990556354111504	WITHOUT_CLASSIFICATION	9.44364588849611E-4	DEFECT
// // Force the client socket to be blocking //	WITHOUT_CLASSIFICATION	0.9999997527225679	WITHOUT_CLASSIFICATION	2.472774321527277E-7	DEFECT
// Additional context surrounding tokens that both the lexer and // grammar use.	WITHOUT_CLASSIFICATION	0.9999999808214549	WITHOUT_CLASSIFICATION	1.9178545019839487E-8	DEFECT
// Enebo:  c can never be antrhign but '.' // Why did I put this here?	WITHOUT_CLASSIFICATION	0.9935018083969942	WITHOUT_CLASSIFICATION	0.006498191603005789	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9999881488575693	WITHOUT_CLASSIFICATION	1.185114243062932E-5	DEFECT
//[C,C] //[C, boolean]	WITHOUT_CLASSIFICATION	0.9999958098773828	WITHOUT_CLASSIFICATION	4.1901226173150625E-6	DEFECT
// Label for the start of the closure (used to implement redo) // Label for the end of the closure (used to implement retry)	WITHOUT_CLASSIFICATION	0.9999999950518403	WITHOUT_CLASSIFICATION	4.948159628586314E-9	DEFECT
// ignore; job was cancelled // FIXME: is this ok?	WITHOUT_CLASSIFICATION	0.6974127585398422	WITHOUT_CLASSIFICATION	0.3025872414601578	DEFECT
//                    // check arity //                    checkArity(mv, scope);	WITHOUT_CLASSIFICATION	0.9999992870173099	WITHOUT_CLASSIFICATION	7.129826902522698E-7	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9999895995419611	WITHOUT_CLASSIFICATION	1.0400458038897145E-5	DEFECT
// we take the first method found as our "n" method, since for any non-specific // arity they'll all error the same. If an actual "n" method is created, we // use that.	WITHOUT_CLASSIFICATION	0.9999996886823921	WITHOUT_CLASSIFICATION	3.113176079358178E-7	DEFECT
// Used by our duck-typification of Proc into interface types, to allow // coercing a simple proc into an interface parameter.	WITHOUT_CLASSIFICATION	0.9999995378658404	WITHOUT_CLASSIFICATION	4.6213415971731363E-7	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9993128662265045	WITHOUT_CLASSIFICATION	6.871337734955116E-4	DEFECT
// it's either as converted as we can make it via above logic or it's // not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999996557465751	WITHOUT_CLASSIFICATION	3.442534249570948E-7	DEFECT
// package scheme 2: separate module for each full package name, constructed  // from the camel-cased package segments: Java::JavaLang::Object, 	WITHOUT_CLASSIFICATION	0.9999996572988826	WITHOUT_CLASSIFICATION	3.4270111738098223E-7	DEFECT
// // construct the proxy method //	WITHOUT_CLASSIFICATION	0.9999957171564919	WITHOUT_CLASSIFICATION	4.28284350801336E-6	DEFECT
// line 159 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9999992907694243	WITHOUT_CLASSIFICATION	7.092305756296026E-7	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999934979575615	WITHOUT_CLASSIFICATION	6.502042438509446E-6	DEFECT
// line 152 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9999992539524807	WITHOUT_CLASSIFICATION	7.460475193807836E-7	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.999999682267907	WITHOUT_CLASSIFICATION	3.177320930261204E-7	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999934979575615	WITHOUT_CLASSIFICATION	6.502042438509446E-6	DEFECT
// We only need to pass in current scope if we are evaluating as a block (which // is only done for evals).  We need to pass this in so that we can appropriately scope // down to captured scopes when we are parsing.	WITHOUT_CLASSIFICATION	0.9999761409652219	WITHOUT_CLASSIFICATION	2.385903477803149E-5	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9999978044602161	WITHOUT_CLASSIFICATION	2.195539783811878E-6	DEFECT
// A place to store that special hiding space that bindings need to implement things like: // eval("a = 1", binding); eval("p a").  All binding instances must get access to this // hidden shared scope.  We store it here.  This will be null if no binding has yet // been called.	WITHOUT_CLASSIFICATION	0.999255597765881	WITHOUT_CLASSIFICATION	7.444022341189312E-4	DEFECT
// TODO: make it 16 now ? // MUST be power of 2!	WITHOUT_CLASSIFICATION	0.5843840076876444	DEFECT	0.4156159923123556	WITHOUT_CLASSIFICATION
// check visibility // dup method	WITHOUT_CLASSIFICATION	0.999984864849183	WITHOUT_CLASSIFICATION	1.5135150816973358E-5	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999995967293235	WITHOUT_CLASSIFICATION	4.0327067649812647E-7	DEFECT
// unsigned int, native // unsigned long, native	WITHOUT_CLASSIFICATION	0.9999994818103707	WITHOUT_CLASSIFICATION	5.181896293559794E-7	DEFECT
//need padding //I'm fairly sure there is a library call to create a //string filled with a given char with a given length but I couldn't find it	WITHOUT_CLASSIFICATION	0.9999926535356997	WITHOUT_CLASSIFICATION	7.346464300270615E-6	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9999982541456003	WITHOUT_CLASSIFICATION	1.7458543996538609E-6	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999955104256707	WITHOUT_CLASSIFICATION	4.489574329313278E-6	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999999683691358	WITHOUT_CLASSIFICATION	3.1630864188751475E-8	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999755596859481	WITHOUT_CLASSIFICATION	2.4440314051980835E-5	DEFECT
// Estimate the square root with the foremost 62 bits of squarD // bi and scale are a tandem	WITHOUT_CLASSIFICATION	0.9999995766964789	WITHOUT_CLASSIFICATION	4.233035212018402E-7	DEFECT
// captures // begin and end are used when not groups defined // source string	WITHOUT_CLASSIFICATION	0.9999998097748947	WITHOUT_CLASSIFICATION	1.9022510538669085E-7	DEFECT
// // INSTANCE VARIABLE RUBY METHODS //	WITHOUT_CLASSIFICATION	0.999987863493874	WITHOUT_CLASSIFICATION	1.2136506125980956E-5	DEFECT
// switch // while	WITHOUT_CLASSIFICATION	0.9999994843535025	WITHOUT_CLASSIFICATION	5.156464975400443E-7	DEFECT
// For nodes do not have their own scope so we pass null to indicate this. // 'For's are implemented as blocks in evaluation, but they have no scope so we // just deal with this lack of scope throughout its lifespan.  We should probably // change the way this works to get rid of multiple null checks.	WITHOUT_CLASSIFICATION	0.99987400527084	WITHOUT_CLASSIFICATION	1.2599472915988605E-4	DEFECT
// This field is used during argument processing to avoid putting RubyArray // instances that are purely for utility purposes into ObjectSpace.	WITHOUT_CLASSIFICATION	0.9999983895878938	WITHOUT_CLASSIFICATION	1.6104121061974306E-6	DEFECT
// Parent container for this context (can be dynamic!!) // If dynamic, at runtime, this will be the meta-object corresponding to a class/script/module/method/closure // List of IR instructions for this method	WITHOUT_CLASSIFICATION	0.9999892272637284	WITHOUT_CLASSIFICATION	1.0772736271525645E-5	DEFECT
// Translate "ret = (a && b)" --> "ret = (a ? b : false)" --> //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is false if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = false    //    beq(v1, false, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.999918049556825	WITHOUT_CLASSIFICATION	8.19504431749524E-5	DEFECT
// expected	WITHOUT_CLASSIFICATION	0.9999993305141415	WITHOUT_CLASSIFICATION	6.69485858483583E-7	DEFECT
// Do nothing	WITHOUT_CLASSIFICATION	0.9999957001904578	WITHOUT_CLASSIFICATION	4.299809542208941E-6	DEFECT
// constructor	WITHOUT_CLASSIFICATION	0.9999993613698386	WITHOUT_CLASSIFICATION	6.38630161354171E-7	DEFECT
// If a line is followed by a blank line put // it back.	WITHOUT_CLASSIFICATION	0.9999891740884073	WITHOUT_CLASSIFICATION	1.0825911592804488E-5	DEFECT
/* $>: default output handle */	WITHOUT_CLASSIFICATION	0.9999931803372666	WITHOUT_CLASSIFICATION	6.819662733412477E-6	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999927434475314	WITHOUT_CLASSIFICATION	7.2565524686437875E-6	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999942218712848	WITHOUT_CLASSIFICATION	5.778128715251971E-6	DEFECT
// Signal uses sun.misc.* classes, this is not allowed // in the security-sensitive environments	WITHOUT_CLASSIFICATION	0.9999994467877958	WITHOUT_CLASSIFICATION	5.53212204094776E-7	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999992708960512	WITHOUT_CLASSIFICATION	7.291039487015889E-7	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999414217322886	WITHOUT_CLASSIFICATION	5.8578267711401266E-5	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999414217322886	WITHOUT_CLASSIFICATION	5.8578267711401266E-5	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999948200182841	WITHOUT_CLASSIFICATION	5.179981715999548E-6	DEFECT
// if there's no receiver, evaluate and pass in the superclass, or // pass self if it no superclass	WITHOUT_CLASSIFICATION	0.9999999960994145	WITHOUT_CLASSIFICATION	3.900585553506727E-9	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9999998959684052	WITHOUT_CLASSIFICATION	1.0403159481666316E-7	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.8107916349200498	WITHOUT_CLASSIFICATION	0.18920836507995023	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.8107916349200498	WITHOUT_CLASSIFICATION	0.18920836507995023	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.8107916349200498	WITHOUT_CLASSIFICATION	0.18920836507995023	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.8107916349200498	WITHOUT_CLASSIFICATION	0.18920836507995023	DEFECT
// Decrease value to hit upper range.  	WITHOUT_CLASSIFICATION	0.9999992586730452	WITHOUT_CLASSIFICATION	7.413269549084312E-7	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999992203991582	WITHOUT_CLASSIFICATION	7.796008417029548E-7	DEFECT
// "else" body	WITHOUT_CLASSIFICATION	0.9999988033138075	WITHOUT_CLASSIFICATION	1.1966861924806652E-6	DEFECT
// done // done // done // Nothing to do for 1.8 // done // done // done // done // done // done // done? // done // done // done // done // done // done // done // done // done // done // done //            case DEFINEDNODE: return buildDefined(node, m); // Incomplete // done // done // done // done // done // done // done // done //            case ENSURENODE: return buildEnsureNode(node, m); // DEFERRED // done // done // done // done //            case FLIPNODE: return buildFlip(node, m); // SSS FIXME: What code generates this AST? // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done? // done // done // done // done // done // done -- partially //            case OPELEMENTASGNNODE: return buildOpElementAsgn(node, m); // DEFERRED SSS FIXME: What code generates this AST? // done //            case POSTEXENODE: return buildPostExe(node, m); // DEFERRED //            case PREEXENODE: return buildPreExe(node, m); // DEFERRED // done?? // done	WITHOUT_CLASSIFICATION	0.92325627446534	WITHOUT_CLASSIFICATION	0.07674372553466008	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999988429866117	WITHOUT_CLASSIFICATION	1.1570133883675547E-6	DEFECT
/* $+: string matches last paren. */	WITHOUT_CLASSIFICATION	0.9999873308820243	WITHOUT_CLASSIFICATION	1.266911797571937E-5	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999950126989128	WITHOUT_CLASSIFICATION	4.987301087268897E-6	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999950126989128	WITHOUT_CLASSIFICATION	4.987301087268897E-6	DEFECT
// Ruby code frequently uses a platform check to choose "NUL:" on windows // but since that check doesn't work well on JRuby, we help it out	WITHOUT_CLASSIFICATION	0.9996892228593699	WITHOUT_CLASSIFICATION	3.1077714063010243E-4	DEFECT
/* 10! */	WITHOUT_CLASSIFICATION	0.9999621768847353	WITHOUT_CLASSIFICATION	3.782311526460347E-5	DEFECT
//            case RESCUENODE: return buildRescue(node, m); // DEFERRED //            case RETRYNODE: return buildRetry(node, m); // DEFERRED // done	WITHOUT_CLASSIFICATION	0.9999628774813583	WITHOUT_CLASSIFICATION	3.712251864176407E-5	DEFECT
// Is this instruction live or dead?  During optimization passes, if this instruction // causes no side-effects and the result of the instruction is not needed by anyone else, // we can remove this instruction altogether without affecting program correctness.	WITHOUT_CLASSIFICATION	0.999994334824747	WITHOUT_CLASSIFICATION	5.665175253017569E-6	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999983560305599	WITHOUT_CLASSIFICATION	1.6439694402115803E-6	DEFECT
// first, iterate over all required args	WITHOUT_CLASSIFICATION	0.9999994131280148	WITHOUT_CLASSIFICATION	5.868719851583305E-7	DEFECT
// // Determine if the parameter might be passed as a 32bit int parameter. // This just applies to buffer/pointer types. //	WITHOUT_CLASSIFICATION	0.9999996783630636	WITHOUT_CLASSIFICATION	3.216369364171337E-7	DEFECT
//Keyword keyword = Keyword.getKeyword(tempVal, tempVal.length());	WITHOUT_CLASSIFICATION	0.9999935556287046	WITHOUT_CLASSIFICATION	6.444371295394869E-6	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999772631072026	WITHOUT_CLASSIFICATION	2.273689279745091E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999772631072026	WITHOUT_CLASSIFICATION	2.273689279745091E-5	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.999999682267907	WITHOUT_CLASSIFICATION	3.177320930261204E-7	DEFECT
// line 449	WITHOUT_CLASSIFICATION	0.9999935747018426	WITHOUT_CLASSIFICATION	6.42529815736869E-6	DEFECT
// line 495	WITHOUT_CLASSIFICATION	0.999992082407376	WITHOUT_CLASSIFICATION	7.917592624048995E-6	DEFECT
// Management/monitoring	WITHOUT_CLASSIFICATION	0.9999954906815791	WITHOUT_CLASSIFICATION	4.5093184209441526E-6	DEFECT
// if we've found the last char of the separator, // and we've found at least as many characters as separator length, // and the last n characters of our buffer match the separator, we're done	WITHOUT_CLASSIFICATION	0.9999999363051639	WITHOUT_CLASSIFICATION	6.369483608849205E-8	DEFECT
/* 14! */	WITHOUT_CLASSIFICATION	0.9999443814107832	WITHOUT_CLASSIFICATION	5.561858921664006E-5	DEFECT
// Process any set of annotations // No supported options	WITHOUT_CLASSIFICATION	0.9999999559555602	WITHOUT_CLASSIFICATION	4.404443966784123E-8	DEFECT
// add to the jitted methods set	WITHOUT_CLASSIFICATION	0.9999976926381072	WITHOUT_CLASSIFICATION	2.3073618928150786E-6	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999976344468015	WITHOUT_CLASSIFICATION	2.365553198439565E-6	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999976344468015	WITHOUT_CLASSIFICATION	2.365553198439565E-6	DEFECT
//            case SCLASSNODE: return buildSClass(node, m); // DEFERRED // done // done // done // done // done // done // done // done //            case UNDEFNODE: return buildUndef(node, m); // DEFERRED // done //            case VALIASNODE: return buildVAlias(node, m); // DEFERRED // done // done	WITHOUT_CLASSIFICATION	0.9999862970537394	WITHOUT_CLASSIFICATION	1.3702946260517575E-5	DEFECT
// // Adding a post-invoke for the cb result serves to both keep it alive // until after the function returns, and allows us to clean up the native // trampoline early, instead of letting them accumulate until a GC run //	WITHOUT_CLASSIFICATION	0.999999983034355	WITHOUT_CLASSIFICATION	1.6965644962797007E-8	DEFECT
/* The Java method doesn't care what class it is, but we need to               know what to convert it to, so we use the object's own class.               If that doesn't help, we use String to force a call to the               object's "to_s" method. */	WITHOUT_CLASSIFICATION	0.9999830031746297	WITHOUT_CLASSIFICATION	1.699682537021001E-5	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999942345964887	WITHOUT_CLASSIFICATION	5.765403511321376E-6	DEFECT
// Atomic integers for symbol and method IDs	WITHOUT_CLASSIFICATION	0.9999983023493432	WITHOUT_CLASSIFICATION	1.6976506568175662E-6	DEFECT
/* 18! */	WITHOUT_CLASSIFICATION	0.9999712549068577	WITHOUT_CLASSIFICATION	2.8745093142303058E-5	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.999999440863547	WITHOUT_CLASSIFICATION	5.591364529891508E-7	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999998254488494	WITHOUT_CLASSIFICATION	1.7455115058311712E-7	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999998254488494	WITHOUT_CLASSIFICATION	1.7455115058311712E-7	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999998254488494	WITHOUT_CLASSIFICATION	1.7455115058311712E-7	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999998254488494	WITHOUT_CLASSIFICATION	1.7455115058311712E-7	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999983084934853	WITHOUT_CLASSIFICATION	1.6915065146944564E-6	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     * the result of this instruction.     *     * If the value map provides a value for any of the instruction's operands     * the expectation is that the operand will be replaced with the simplified value.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify.     *     * @param valueMap Mapping from operands to their simplified values     * @returns simplified result / output of this instruction     */	WITHOUT_CLASSIFICATION	0.9998961804180586	WITHOUT_CLASSIFICATION	1.038195819413677E-4	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9999960053613607	WITHOUT_CLASSIFICATION	3.994638639343964E-6	DEFECT
// An atomic long for generating DynamicMethod serial numbers	WITHOUT_CLASSIFICATION	0.9999962097088753	WITHOUT_CLASSIFICATION	3.790291124838324E-6	DEFECT
// MRI behavior: always check whether the file is writable // or not, even if we are to write 0 bytes.	WITHOUT_CLASSIFICATION	0.9999992998452982	WITHOUT_CLASSIFICATION	7.0015470175933E-7	DEFECT
/* 22! */	WITHOUT_CLASSIFICATION	0.9999665374840198	WITHOUT_CLASSIFICATION	3.346251598030341E-5	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.999999097189162	WITHOUT_CLASSIFICATION	9.028108379158957E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999998489051473	WITHOUT_CLASSIFICATION	1.5109485283494654E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999998489051473	WITHOUT_CLASSIFICATION	1.5109485283494654E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999998489051473	WITHOUT_CLASSIFICATION	1.5109485283494654E-7	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999959989497033	WITHOUT_CLASSIFICATION	4.0010502967840914E-6	DEFECT
// Build a new class and add it to the current scope (could be a script / module / class)	WITHOUT_CLASSIFICATION	0.9999994577559811	WITHOUT_CLASSIFICATION	5.422440188739766E-7	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999967711876968	WITHOUT_CLASSIFICATION	3.2288123031480492E-6	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999967711876968	WITHOUT_CLASSIFICATION	3.2288123031480492E-6	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9999937398679037	WITHOUT_CLASSIFICATION	6.260132096277723E-6	DEFECT
//////////////////////////////////////////////////////////////////////////// // Now we provide default impls of a number of signatures. For each arity, // we first generate a non-block version of the method, which just adds // NULL_BLOCK and re-calls, allowing e.g. compiled code, which always can // potentially take a block, to only generate the block-receiving signature // and still avoid arg boxing. // // We then provide default implementations of each block-accepting method // that in turn call the IRubyObject[]+Block version of call. This then // finally falls back on the minimum implementation requirement for // dynamic method handles. ////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999999758343987	WITHOUT_CLASSIFICATION	2.4165601216052047E-8	DEFECT
// Because we implement Java interfaces now, we need a new === that's // aware of those additional "virtual" supertypes	WITHOUT_CLASSIFICATION	0.999999942680644	WITHOUT_CLASSIFICATION	5.731935601733097E-8	DEFECT
// BASE64	WITHOUT_CLASSIFICATION	0.9999492906116434	WITHOUT_CLASSIFICATION	5.070938835656989E-5	DEFECT
/* note nemes_gamma can return Double.POSITIVE_INFINITY or Double.NEGATIVE_INFINITY         * when value is an integer less than 1.         * We treat 0 as a special case to avoid Domain error.         */	WITHOUT_CLASSIFICATION	0.9999432613590054	WITHOUT_CLASSIFICATION	5.673864099466603E-5	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999989560411988	WITHOUT_CLASSIFICATION	1.043958801276873E-6	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999794089821151	WITHOUT_CLASSIFICATION	2.059101788480828E-5	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999794089821151	WITHOUT_CLASSIFICATION	2.059101788480828E-5	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999967629466289	WITHOUT_CLASSIFICATION	3.2370533711744518E-6	DEFECT
// SSS: Looks like we receive the arg in buildBlockArgsAssignment via the IterNode // We won't get here for argument receives!  So, buildDasgn is called for // assignments to block variables within a block.  As far as the IR is concerned, // this is just a simple copy	WITHOUT_CLASSIFICATION	0.9986991795352752	WITHOUT_CLASSIFICATION	0.001300820464724859	DEFECT
// getSimplifiedOperand returns the value of this operand, fully simplified // getSimplifiedOperand returns the operand in a form that can be materialized into bytecode, if it cannot be completely optimized away // // The value is used during optimizations and propagated through the IR.  But, it is thrown away after that. // But, the operand form is used for constructing the compound objects represented by the operand. // // Example: a = [1], b = [3,4], c = [a,b], d = [2,c] //   -- getValue(c) = [1,[3,4]];     getSimplifiedOperand(c) = [1, b] //   -- getValue(d) = [2,[1,[3,4]]]; getSimplifiedOperand(d) = [2, c] // // Note that a,b,c,d are all objects, and c has a reference to objects a and b, and d has a reference to c. // So, if contents of a or b is modified, the "simplified value"s of c and d also change!  This difference // is captured by these two methods.	WITHOUT_CLASSIFICATION	0.9997697747227964	WITHOUT_CLASSIFICATION	2.302252772037631E-4	DEFECT
//IRubyObject protocol = args[4];	WITHOUT_CLASSIFICATION	0.9999915283679165	WITHOUT_CLASSIFICATION	8.471632083523518E-6	DEFECT
// promise to implement three to N with block	WITHOUT_CLASSIFICATION	0.999992073027407	WITHOUT_CLASSIFICATION	7.926972593004972E-6	DEFECT
// Ruby's OMG capture all source in a Hash feature // Add each line to buffer when encountering newline or EOF for first time.	WITHOUT_CLASSIFICATION	0.9999998454998796	WITHOUT_CLASSIFICATION	1.5450012039365033E-7	DEFECT
// carriage return	WITHOUT_CLASSIFICATION	0.9999988198330424	WITHOUT_CLASSIFICATION	1.180166957600076E-6	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999741841403644	WITHOUT_CLASSIFICATION	2.581585963563342E-5	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9999858158282554	WITHOUT_CLASSIFICATION	1.418417174457498E-5	DEFECT
// String construction routines by NOT byte[] buffer and making the target String shared 	WITHOUT_CLASSIFICATION	0.9999979048823526	WITHOUT_CLASSIFICATION	2.0951176473835736E-6	DEFECT
// insert all nodes in sequence, hash them in the final instruction // KEY	WITHOUT_CLASSIFICATION	0.9999912603857102	WITHOUT_CLASSIFICATION	8.739614289797957E-6	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.999997869652748	WITHOUT_CLASSIFICATION	2.130347252052346E-6	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.999960234733291	WITHOUT_CLASSIFICATION	3.976526670901231E-5	DEFECT
// Basic Block id // CFG that this basic block belongs to // All basic blocks have a starting label // List of non-label instructions	WITHOUT_CLASSIFICATION	0.999944900449283	WITHOUT_CLASSIFICATION	5.509955071700016E-5	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999999633820033	WITHOUT_CLASSIFICATION	3.661799673150433E-8	DEFECT
// For all uninitialized specific arities, we defer to the "n" method which // should raise appropriate error in all cases.	WITHOUT_CLASSIFICATION	0.9999257615825702	WITHOUT_CLASSIFICATION	7.423841742985947E-5	DEFECT
// implement is called to force this class to create stubs for all // methods in the given interface, so they'll show up in the list // of methods and be invocable without passing through method_missing	WITHOUT_CLASSIFICATION	0.9999998679325077	WITHOUT_CLASSIFICATION	1.320674922431141E-7	DEFECT
// CASE IR instructions are dummy instructions  // -- all when/then clauses have been converted into if-then-else blocks	WITHOUT_CLASSIFICATION	0.9999998194935806	WITHOUT_CLASSIFICATION	1.8050641937518332E-7	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9999961846766448	WITHOUT_CLASSIFICATION	3.81532335524007E-6	DEFECT
// leave it null and fall back on our normal invocation logic	WITHOUT_CLASSIFICATION	0.999997263718039	WITHOUT_CLASSIFICATION	2.736281960903575E-6	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999946142126394	WITHOUT_CLASSIFICATION	5.3857873606616234E-6	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9999963909577841	WITHOUT_CLASSIFICATION	3.609042215843344E-6	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999961221594706	WITHOUT_CLASSIFICATION	3.877840529382561E-6	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999961221594706	WITHOUT_CLASSIFICATION	3.877840529382561E-6	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999961221594706	WITHOUT_CLASSIFICATION	3.877840529382561E-6	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999961221594706	WITHOUT_CLASSIFICATION	3.877840529382561E-6	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999961221594706	WITHOUT_CLASSIFICATION	3.877840529382561E-6	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999961221594706	WITHOUT_CLASSIFICATION	3.877840529382561E-6	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999961221594706	WITHOUT_CLASSIFICATION	3.877840529382561E-6	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999961221594706	WITHOUT_CLASSIFICATION	3.877840529382561E-6	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9999851178057276	WITHOUT_CLASSIFICATION	1.4882194272362436E-5	DEFECT
/* fall through */	WITHOUT_CLASSIFICATION	0.9999740552886462	WITHOUT_CLASSIFICATION	2.5944711353773393E-5	DEFECT
// deal with case when "other" is not a string	WITHOUT_CLASSIFICATION	0.9999874000836948	WITHOUT_CLASSIFICATION	1.2599916305272834E-5	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9995751547076703	WITHOUT_CLASSIFICATION	4.24845292329636E-4	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999973678510596	WITHOUT_CLASSIFICATION	2.6321489403293597E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999973678510596	WITHOUT_CLASSIFICATION	2.6321489403293597E-6	DEFECT
// store argument count information into scope	WITHOUT_CLASSIFICATION	0.9999996481327017	WITHOUT_CLASSIFICATION	3.518672983028147E-7	DEFECT
// the load method is used for loading as a top-level script, and prepares appropriate scoping around the code	WITHOUT_CLASSIFICATION	0.9999973863803855	WITHOUT_CLASSIFICATION	2.613619614550066E-6	DEFECT
// First, build assignments for specific named arguments	WITHOUT_CLASSIFICATION	0.9999999240494017	WITHOUT_CLASSIFICATION	7.595059823602449E-8	DEFECT
//        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3) { throw fail(); } //        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { throw fail(); }	WITHOUT_CLASSIFICATION	0.9997199425966382	WITHOUT_CLASSIFICATION	2.800574033617591E-4	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999937321098962	WITHOUT_CLASSIFICATION	6.267890103718499E-6	DEFECT
// octal constant	WITHOUT_CLASSIFICATION	0.9999990477197982	WITHOUT_CLASSIFICATION	9.522802019163843E-7	DEFECT
// read	WITHOUT_CLASSIFICATION	0.9999973102263522	WITHOUT_CLASSIFICATION	2.689773647896535E-6	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9999462612869725	WITHOUT_CLASSIFICATION	5.373871302745435E-5	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.999997717068936	WITHOUT_CLASSIFICATION	2.282931063940942E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999987195319631	WITHOUT_CLASSIFICATION	1.280468036930786E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999987195319631	WITHOUT_CLASSIFICATION	1.280468036930786E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999987195319631	WITHOUT_CLASSIFICATION	1.280468036930786E-6	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9996632329626031	WITHOUT_CLASSIFICATION	3.36767037397003E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9996632329626031	WITHOUT_CLASSIFICATION	3.36767037397003E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9996632329626031	WITHOUT_CLASSIFICATION	3.36767037397003E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9996632329626031	WITHOUT_CLASSIFICATION	3.36767037397003E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9996632329626031	WITHOUT_CLASSIFICATION	3.36767037397003E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9996632329626031	WITHOUT_CLASSIFICATION	3.36767037397003E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9996632329626031	WITHOUT_CLASSIFICATION	3.36767037397003E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9996632329626031	WITHOUT_CLASSIFICATION	3.36767037397003E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9996632329626031	WITHOUT_CLASSIFICATION	3.36767037397003E-4	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999972125751594	WITHOUT_CLASSIFICATION	2.7874248405847417E-6	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9999969608319165	WITHOUT_CLASSIFICATION	3.0391680834631284E-6	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999913453446904	WITHOUT_CLASSIFICATION	8.654655309711126E-6	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999929547056796	WITHOUT_CLASSIFICATION	7.04529432037278E-6	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9996632329626031	WITHOUT_CLASSIFICATION	3.36767037397003E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9996632329626031	WITHOUT_CLASSIFICATION	3.36767037397003E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9996632329626031	WITHOUT_CLASSIFICATION	3.36767037397003E-4	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999957849734104	WITHOUT_CLASSIFICATION	4.21502658965949E-6	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999996328197633	WITHOUT_CLASSIFICATION	3.6718023660643847E-7	DEFECT
// fall back on empty env when security disallows environment var access (like in an applet)	WITHOUT_CLASSIFICATION	0.9999933616943937	WITHOUT_CLASSIFICATION	6.638305606242708E-6	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999878525405329	WITHOUT_CLASSIFICATION	1.214745946719625E-5	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999878525405329	WITHOUT_CLASSIFICATION	1.214745946719625E-5	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.999995335684547	WITHOUT_CLASSIFICATION	4.664315453087358E-6	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999989102079252	WITHOUT_CLASSIFICATION	1.0897920747346348E-6	DEFECT
// nothing else to here - the module version will be // included in the class.	WITHOUT_CLASSIFICATION	0.9999994892588514	WITHOUT_CLASSIFICATION	5.107411486029705E-7	DEFECT
// JRUBY-1000, fail early when attempting to subclass a final Java class; // solved here by adding an exception-throwing "inherited"	WITHOUT_CLASSIFICATION	0.9999851261633916	WITHOUT_CLASSIFICATION	1.4873836608499875E-5	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999975760088773	WITHOUT_CLASSIFICATION	2.4239911226679873E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999975760088773	WITHOUT_CLASSIFICATION	2.4239911226679873E-6	DEFECT
// Translate ret = (a || b) to ret = (a ? true : b) as follows //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is true if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = true //    beq(v1, true, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9998626561702672	WITHOUT_CLASSIFICATION	1.3734382973287632E-4	DEFECT
// Initial precision is that of double numbers 2^63/2 ~ 4E18 // 63-1 an even number of number bits // precision seems 16 to 18 digits	WITHOUT_CLASSIFICATION	0.999997037565573	WITHOUT_CLASSIFICATION	2.9624344270579835E-6	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999978444174461	WITHOUT_CLASSIFICATION	2.1555825539860297E-6	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.999910878423591	WITHOUT_CLASSIFICATION	8.912157640892159E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.999910878423591	WITHOUT_CLASSIFICATION	8.912157640892159E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.999910878423591	WITHOUT_CLASSIFICATION	8.912157640892159E-5	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999997882248841	WITHOUT_CLASSIFICATION	2.1177511597222706E-7	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999983270612804	WITHOUT_CLASSIFICATION	1.6729387194769535E-6	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999983270612804	WITHOUT_CLASSIFICATION	1.6729387194769535E-6	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.999998819191734	WITHOUT_CLASSIFICATION	1.180808266127608E-6	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.999998819191734	WITHOUT_CLASSIFICATION	1.180808266127608E-6	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999999840477429	WITHOUT_CLASSIFICATION	1.5952257019143354E-8	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999970077981951	WITHOUT_CLASSIFICATION	2.9922018047676635E-6	DEFECT
// No hex value after the 'x'.	WITHOUT_CLASSIFICATION	0.9999917736757116	WITHOUT_CLASSIFICATION	8.226324288468153E-6	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999940193849212	WITHOUT_CLASSIFICATION	5.980615078849918E-6	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999763921907794	WITHOUT_CLASSIFICATION	2.3607809220613013E-5	DEFECT
// Let m be the exact digits precision in an earlier! loop	WITHOUT_CLASSIFICATION	0.9999959133811007	WITHOUT_CLASSIFICATION	4.086618899289708E-6	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999997604607678	WITHOUT_CLASSIFICATION	2.395392322266285E-7	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999944528741538	WITHOUT_CLASSIFICATION	5.547125846152534E-6	DEFECT
// Label for the start of the method // Label for the end of the method	WITHOUT_CLASSIFICATION	0.9999987623292076	WITHOUT_CLASSIFICATION	1.2376707923402165E-6	DEFECT
// comparisons & checks // checks if the operand is non-null and non-false // EQQ a === call used only for its conditional results, as in case/when, begin/rescue, ...	WITHOUT_CLASSIFICATION	0.9999998306508355	WITHOUT_CLASSIFICATION	1.693491643711176E-7	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.9235621318899052	WITHOUT_CLASSIFICATION	0.07643786811009486	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999773104710394	WITHOUT_CLASSIFICATION	2.2689528960604223E-5	DEFECT
// all done with lookup attempts, release monitor	WITHOUT_CLASSIFICATION	0.9999997160996795	WITHOUT_CLASSIFICATION	2.839003204795343E-7	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999981791881348	WITHOUT_CLASSIFICATION	1.8208118651250821E-6	DEFECT
// Create list of interface names to proxy (and make sure they really are interfaces) // Also build a hashcode from all classes to use for retrieving previously-created impl	WITHOUT_CLASSIFICATION	0.9999999566517234	WITHOUT_CLASSIFICATION	4.334827657649746E-8	DEFECT
// Construct local variables based on parameter names passed in	WITHOUT_CLASSIFICATION	0.9999990044659327	WITHOUT_CLASSIFICATION	9.95534067244003E-7	DEFECT
// Value of "TZ" property is of a bit different format, // which confuses the Java's TimeZone.getTimeZone(id) method, // and so, we need to convert it.	WITHOUT_CLASSIFICATION	0.9999983534779668	WITHOUT_CLASSIFICATION	1.6465220331567731E-6	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9999999497613414	WITHOUT_CLASSIFICATION	5.023865847317212E-8	DEFECT
// ensure the object is associated with the wrapper we found it in, // so that if it comes back we don't re-wrap it	WITHOUT_CLASSIFICATION	0.9999986823895324	WITHOUT_CLASSIFICATION	1.3176104676169924E-6	DEFECT
// return sqrt(squarD) with precision of rootMC	WITHOUT_CLASSIFICATION	0.9999973050401259	WITHOUT_CLASSIFICATION	2.694959874196093E-6	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999755596859481	WITHOUT_CLASSIFICATION	2.4440314051980835E-5	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9998757979711348	WITHOUT_CLASSIFICATION	1.2420202886514523E-4	DEFECT
// Get a new label using the provided label prefix	WITHOUT_CLASSIFICATION	0.9999997117748824	WITHOUT_CLASSIFICATION	2.8822511755717176E-7	DEFECT
// normal exit, perform finally and return	WITHOUT_CLASSIFICATION	0.9999978115309461	WITHOUT_CLASSIFICATION	2.188469053828937E-6	DEFECT
// coerce arguments	WITHOUT_CLASSIFICATION	0.999999792614793	WITHOUT_CLASSIFICATION	2.0738520711695845E-7	DEFECT
// 0.0 is ok // float range // inverted float range? // NaN // +infinity // -infinity	WITHOUT_CLASSIFICATION	0.9999952972218211	WITHOUT_CLASSIFICATION	4.702778178903686E-6	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999958438785137	WITHOUT_CLASSIFICATION	4.156121486335011E-6	DEFECT
// set this class's method names in var @__java_ovrd_methods if this // is the new class; otherwise, get method names from there if this is // a proxy superclass.	WITHOUT_CLASSIFICATION	0.9999991369834528	WITHOUT_CLASSIFICATION	8.630165471752737E-7	DEFECT
/* ignore backslashed spaces in %w */	WITHOUT_CLASSIFICATION	0.9999987462152553	WITHOUT_CLASSIFICATION	1.2537847446409031E-6	DEFECT
// Invert the sign, since TZ format and Java format // use opposite signs, sigh... Also, Java API requires // the sign to be always present, be it "+" or "-".	WITHOUT_CLASSIFICATION	0.9999998352294456	WITHOUT_CLASSIFICATION	1.6477055436938102E-7	DEFECT
// no binding given, use 0 for both	WITHOUT_CLASSIFICATION	0.999999866492444	WITHOUT_CLASSIFICATION	1.335075559461551E-7	DEFECT
// <=> may return nil in many circumstances, e.g. 3 <=> NaN        	WITHOUT_CLASSIFICATION	0.9999997291545999	WITHOUT_CLASSIFICATION	2.70845400108878E-7	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999826062901989	WITHOUT_CLASSIFICATION	1.739370980113457E-5	DEFECT
// Always use "GMT" since that's required by Java API.	WITHOUT_CLASSIFICATION	0.9999990718273818	WITHOUT_CLASSIFICATION	9.281726182332608E-7	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9999997766927572	WITHOUT_CLASSIFICATION	2.2330724275109446E-7	DEFECT
// The dataStruct is a place where custom information can be // contained for core implementations that doesn't necessarily // want to go to the trouble of creating a subclass of // RubyObject. The OpenSSL implementation uses this heavily to // save holder objects containing Java cryptography objects. // Java integration uses this to store the Java object ref. //protected transient Object dataStruct;	WITHOUT_CLASSIFICATION	0.9999807027742003	WITHOUT_CLASSIFICATION	1.9297225799807307E-5	DEFECT
// Remaining arguments are for the script itself	WITHOUT_CLASSIFICATION	0.9999999186039015	WITHOUT_CLASSIFICATION	8.139609859924957E-8	DEFECT
// arg grouping, use slower arg walking logic	WITHOUT_CLASSIFICATION	0.9999997964090206	WITHOUT_CLASSIFICATION	2.0359097948552748E-7	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999880635565302	WITHOUT_CLASSIFICATION	1.1936443469777416E-5	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.999994371391352	WITHOUT_CLASSIFICATION	5.628608647913524E-6	DEFECT
// Here we create an "anonymous" exception type used for unrolling the stack. // MRI creates a new one for *every call* to timeout, which can be costly. // We opt to use a single exception type for all cases to avoid this overhead.	WITHOUT_CLASSIFICATION	0.9999995976763375	WITHOUT_CLASSIFICATION	4.0232366255357596E-7	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9999953859065621	WITHOUT_CLASSIFICATION	4.614093437894473E-6	DEFECT
// MRI behavior: With TZ equal to "GMT" or "UTC", Time.now // is *NOT* considered as a proper GMT/UTC time: //   ENV['TZ']="GMT" //   Time.now.gmt? ==> false //   ENV['TZ']="UTC" //   Time.now.utc? ==> false // Hence, we need to adjust for that.	WITHOUT_CLASSIFICATION	0.9999897090015322	WITHOUT_CLASSIFICATION	1.0290998467866783E-5	DEFECT
// ?l  | boolean | True if file1 exists and is a symbolic link	WITHOUT_CLASSIFICATION	0.9999955155705537	WITHOUT_CLASSIFICATION	4.4844294463834595E-6	DEFECT
// This try/catch is to allow failing over to the "commands" logic // when running from within a jruby-complete jar file, which has // jruby.home = a jar file URL that does not resolve correctly with // JRubyFile.create.	WITHOUT_CLASSIFICATION	0.9983754783742725	WITHOUT_CLASSIFICATION	0.0016245216257274038	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999996095835134	WITHOUT_CLASSIFICATION	3.9041648656926335E-7	DEFECT
// specific arity	WITHOUT_CLASSIFICATION	0.9999995091834432	WITHOUT_CLASSIFICATION	4.908165568202618E-7	DEFECT
// In the case of two arguments, MRI will discard the portion of // the first argument after a decimal point (i.e., "floor"). // However in the case of a single argument, any portion after // the decimal point is honored.	WITHOUT_CLASSIFICATION	0.9999999937107473	WITHOUT_CLASSIFICATION	6.289252635402461E-9	DEFECT
// ?w  | boolean | True if file1 exists and is writable by effective uid/gid	WITHOUT_CLASSIFICATION	0.9999992645210112	WITHOUT_CLASSIFICATION	7.354789887803739E-7	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999833587329754	WITHOUT_CLASSIFICATION	1.6641267024611605E-5	DEFECT
/*    @JRubyMethod    public IRubyObject to_proc() {        return RubyProc.newProc(getRuntime(),                                CallBlock.newCallClosure(this, getRuntime().getSymbol(), Arity.noArguments(), new ToProcCallback(this), getRuntime().getCurrentContext()),                                Block.Type.PROC);    }    */	WITHOUT_CLASSIFICATION	0.9993051915640795	WITHOUT_CLASSIFICATION	6.948084359206146E-4	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999966238342919	WITHOUT_CLASSIFICATION	3.3761657081293547E-6	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999966238342919	WITHOUT_CLASSIFICATION	3.3761657081293547E-6	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999979540659413	WITHOUT_CLASSIFICATION	2.045934058742778E-6	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999979540659413	WITHOUT_CLASSIFICATION	2.045934058742778E-6	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999361605656876	WITHOUT_CLASSIFICATION	6.383943431244371E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999361605656876	WITHOUT_CLASSIFICATION	6.383943431244371E-5	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999858332350444	WITHOUT_CLASSIFICATION	1.4166764955488307E-5	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999858332350444	WITHOUT_CLASSIFICATION	1.4166764955488307E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998569659315	WITHOUT_CLASSIFICATION	1.4303406844963793E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998569659315	WITHOUT_CLASSIFICATION	1.4303406844963793E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998569659315	WITHOUT_CLASSIFICATION	1.4303406844963793E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998569659315	WITHOUT_CLASSIFICATION	1.4303406844963793E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998569659315	WITHOUT_CLASSIFICATION	1.4303406844963793E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998569659315	WITHOUT_CLASSIFICATION	1.4303406844963793E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998569659315	WITHOUT_CLASSIFICATION	1.4303406844963793E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998569659315	WITHOUT_CLASSIFICATION	1.4303406844963793E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998569659315	WITHOUT_CLASSIFICATION	1.4303406844963793E-7	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999993327378169	WITHOUT_CLASSIFICATION	6.672621830861634E-7	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999993327378169	WITHOUT_CLASSIFICATION	6.672621830861634E-7	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999993327378169	WITHOUT_CLASSIFICATION	6.672621830861634E-7	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999929956080836	WITHOUT_CLASSIFICATION	7.004391916406932E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999842639970068	WITHOUT_CLASSIFICATION	1.5736002993151964E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999842639970068	WITHOUT_CLASSIFICATION	1.5736002993151964E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999842639970068	WITHOUT_CLASSIFICATION	1.5736002993151964E-5	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999872271439715	WITHOUT_CLASSIFICATION	1.2772856028498577E-5	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999872271439715	WITHOUT_CLASSIFICATION	1.2772856028498577E-5	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999872271439715	WITHOUT_CLASSIFICATION	1.2772856028498577E-5	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.999984835847804	WITHOUT_CLASSIFICATION	1.5164152196035476E-5	DEFECT
// backspace	WITHOUT_CLASSIFICATION	0.9999976554351355	WITHOUT_CLASSIFICATION	2.344564864537799E-6	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999769353743735	WITHOUT_CLASSIFICATION	2.3064625626522764E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999660970540083	WITHOUT_CLASSIFICATION	3.390294599170135E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999660970540083	WITHOUT_CLASSIFICATION	3.390294599170135E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999660970540083	WITHOUT_CLASSIFICATION	3.390294599170135E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999918069946943	WITHOUT_CLASSIFICATION	8.1930053057655E-6	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999930993546057	WITHOUT_CLASSIFICATION	6.90064539438565E-6	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999930993546057	WITHOUT_CLASSIFICATION	6.90064539438565E-6	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9999923454036405	WITHOUT_CLASSIFICATION	7.654596359581582E-6	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.999999196234375	WITHOUT_CLASSIFICATION	8.037656249453398E-7	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.999999196234375	WITHOUT_CLASSIFICATION	8.037656249453398E-7	DEFECT
/**      * Nested class whose instances act as thunks reacting to to_str method     * called from (Exception#to_str, Exception#message)     * MRI equivalent: rb_cNameErrorMesg, class name: "message", construction method: "!",     * to_str implementation: "name_err_mesg_to_str"     *     * TODO: this class should not be lookupable     */	WITHOUT_CLASSIFICATION	0.998422442518849	DEFECT	0.0015775574811508907	WITHOUT_CLASSIFICATION
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9999992479806837	WITHOUT_CLASSIFICATION	7.520193162979071E-7	DEFECT
// The name of this source (e.g. a filename: foo.rb)	WITHOUT_CLASSIFICATION	0.9999967678610221	WITHOUT_CLASSIFICATION	3.2321389779815543E-6	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999884879275706	WITHOUT_CLASSIFICATION	1.1512072429422863E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999884879275706	WITHOUT_CLASSIFICATION	1.1512072429422863E-5	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9999683413785332	WITHOUT_CLASSIFICATION	3.165862146684443E-5	DEFECT
// We yield here to hopefully permit the target thread to schedule // MRI immediately schedules it, so this is close but not exact	WITHOUT_CLASSIFICATION	0.9999954586263526	WITHOUT_CLASSIFICATION	4.54137364729368E-6	DEFECT
// note that addMethod now does its own put, so any change made to // functionality here should be made there as well 	WITHOUT_CLASSIFICATION	0.9999973157656635	WITHOUT_CLASSIFICATION	2.684234336379486E-6	DEFECT
/* Currently dead code, but useful when we figure out how to actually perform translit.    private static boolean isTranslit(String encoding) {        return encoding.toLowerCase().indexOf(TRANSLIT) != -1 ? true : false;    }*/	WITHOUT_CLASSIFICATION	0.9373509378761797	WITHOUT_CLASSIFICATION	0.06264906212382014	DEFECT
// empirically it appears that to_ary coersions always return array or nil, so this // should always be an array by now.	WITHOUT_CLASSIFICATION	0.9978559655280677	WITHOUT_CLASSIFICATION	0.00214403447193236	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999884879275706	WITHOUT_CLASSIFICATION	1.1512072429422863E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999884879275706	WITHOUT_CLASSIFICATION	1.1512072429422863E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999884879275706	WITHOUT_CLASSIFICATION	1.1512072429422863E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999884879275706	WITHOUT_CLASSIFICATION	1.1512072429422863E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999884879275706	WITHOUT_CLASSIFICATION	1.1512072429422863E-5	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999997555191975	WITHOUT_CLASSIFICATION	2.4448080240617175E-7	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.999997372592173	WITHOUT_CLASSIFICATION	2.627407826912877E-6	DEFECT
// if it's an inner class and it's not public, we can't access it; // skip population of declared elements	WITHOUT_CLASSIFICATION	0.9999997416160196	WITHOUT_CLASSIFICATION	2.5838398042919027E-7	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.999997602333438	WITHOUT_CLASSIFICATION	2.3976665618808915E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.999999641219649	WITHOUT_CLASSIFICATION	3.587803509893064E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.999999641219649	WITHOUT_CLASSIFICATION	3.587803509893064E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.999999641219649	WITHOUT_CLASSIFICATION	3.587803509893064E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.999999641219649	WITHOUT_CLASSIFICATION	3.587803509893064E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.999999641219649	WITHOUT_CLASSIFICATION	3.587803509893064E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.999999641219649	WITHOUT_CLASSIFICATION	3.587803509893064E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.999999641219649	WITHOUT_CLASSIFICATION	3.587803509893064E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.999999641219649	WITHOUT_CLASSIFICATION	3.587803509893064E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.999999641219649	WITHOUT_CLASSIFICATION	3.587803509893064E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.999999641219649	WITHOUT_CLASSIFICATION	3.587803509893064E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.999999641219649	WITHOUT_CLASSIFICATION	3.587803509893064E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.999999641219649	WITHOUT_CLASSIFICATION	3.587803509893064E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.999999641219649	WITHOUT_CLASSIFICATION	3.587803509893064E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.999999641219649	WITHOUT_CLASSIFICATION	3.587803509893064E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.999999641219649	WITHOUT_CLASSIFICATION	3.587803509893064E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.999999641219649	WITHOUT_CLASSIFICATION	3.587803509893064E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.999999641219649	WITHOUT_CLASSIFICATION	3.587803509893064E-7	DEFECT
// MRI behavior on Windows: it treats '/' as a root of // a current drive (but only if SINGLE slash is present!): // E.g., if current work directory is // 'D:/home/directory', then '/' means 'D:/'. // // Basically, '/path' is treated as a *RELATIVE* path, // relative to the current drive. '//path' is treated // as absolute one.	WITHOUT_CLASSIFICATION	0.9999895346799323	WITHOUT_CLASSIFICATION	1.0465320067671111E-5	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.999999641219649	WITHOUT_CLASSIFICATION	3.587803509893064E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.999999641219649	WITHOUT_CLASSIFICATION	3.587803509893064E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.999999641219649	WITHOUT_CLASSIFICATION	3.587803509893064E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.999999641219649	WITHOUT_CLASSIFICATION	3.587803509893064E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.999999641219649	WITHOUT_CLASSIFICATION	3.587803509893064E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.999999641219649	WITHOUT_CLASSIFICATION	3.587803509893064E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.999999641219649	WITHOUT_CLASSIFICATION	3.587803509893064E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.999999641219649	WITHOUT_CLASSIFICATION	3.587803509893064E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.999999641219649	WITHOUT_CLASSIFICATION	3.587803509893064E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.999999641219649	WITHOUT_CLASSIFICATION	3.587803509893064E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.999999641219649	WITHOUT_CLASSIFICATION	3.587803509893064E-7	DEFECT
// This is needed when the enclosing class or module is a singleton. // In that case, we generated a name such as null::Foo, which broke  // Marshalling, among others. The correct thing to do in this situation  // is to insert the generate the name of form #<Class:01xasdfasd> if  // it's a singleton module/class, which this code accomplishes.	WITHOUT_CLASSIFICATION	0.99990739443682	WITHOUT_CLASSIFICATION	9.260556318001851E-5	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9999466520029089	WITHOUT_CLASSIFICATION	5.334799709117303E-5	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999990612037697	WITHOUT_CLASSIFICATION	9.387962303644881E-7	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999995792801991	WITHOUT_CLASSIFICATION	4.207198009140209E-7	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9999986685198062	WITHOUT_CLASSIFICATION	1.3314801937774421E-6	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9999895995419611	WITHOUT_CLASSIFICATION	1.0400458038897145E-5	DEFECT
// only public methods	WITHOUT_CLASSIFICATION	0.9999824506256146	WITHOUT_CLASSIFICATION	1.7549374385450194E-5	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999999105568095	WITHOUT_CLASSIFICATION	8.944319048539705E-8	DEFECT
// First try to use drive letter from supplied dir value, // then try current work dir.	WITHOUT_CLASSIFICATION	0.9999887070654593	WITHOUT_CLASSIFICATION	1.1292934540799769E-5	DEFECT
// JRUBY-2435: Aliasing eval and other "special" methods should display a warning // We warn because we treat certain method names as "special" for purposes of // optimization. Hopefully this will be enough to convince people not to alias // them.	WITHOUT_CLASSIFICATION	0.9999599540287039	WITHOUT_CLASSIFICATION	4.0045971296129166E-5	DEFECT
// generate a real method signature for the method, with to/from coercions	WITHOUT_CLASSIFICATION	0.9999999488423338	WITHOUT_CLASSIFICATION	5.115766620629029E-8	DEFECT
// block argument to the method // closure present // class present // method table mutations, def, defs, undef, alias // likely call to eval // makes calls that are aware of the frame // makes calls that are aware of the frame's self // makes calls that are aware of the frame's visibility // makes calls that are aware of the frame's block // makes calls that are aware of the frame's name // makes calls that set or get backref // makes calls that set or get lastline // makes calls that are aware of the frame's class // optional arguments to the method // rest arg to the method // makes calls that are aware of the scope // makes a zero-argument super call // accesses or sets constants // accesses or sets class variables // makes normal super call // contains a retry	WITHOUT_CLASSIFICATION	0.9999999965601051	WITHOUT_CLASSIFICATION	3.4398948086567455E-9	DEFECT
// // Add aliases in Type::*, NativeType::* and FFI::TYPE_* //	WITHOUT_CLASSIFICATION	0.9999978142411776	WITHOUT_CLASSIFICATION	2.185758822294176E-6	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999994276695372	WITHOUT_CLASSIFICATION	5.723304627310423E-7	DEFECT
// double-testing args.length here, but it avoids duplicating the proc-setup code in two places	WITHOUT_CLASSIFICATION	0.9999994420765552	WITHOUT_CLASSIFICATION	5.579234447493212E-7	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999983736037418	WITHOUT_CLASSIFICATION	1.6263962582309018E-6	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999986536329442	WITHOUT_CLASSIFICATION	1.3463670558010445E-6	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999980909979734	WITHOUT_CLASSIFICATION	1.9090020265130146E-6	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999980909979734	WITHOUT_CLASSIFICATION	1.9090020265130146E-6	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999980909979734	WITHOUT_CLASSIFICATION	1.9090020265130146E-6	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999980909979734	WITHOUT_CLASSIFICATION	1.9090020265130146E-6	DEFECT
// snapshot of contents of directory // current position in directory	WITHOUT_CLASSIFICATION	0.9999989895178109	WITHOUT_CLASSIFICATION	1.0104821891685953E-6	DEFECT
// Exclusive locks in Java require the channel to be writable, otherwise // an exception is thrown (terminating JRuby execution). // But flock behavior of MRI is that it allows // exclusive locks even on non-writable file. So we convert exclusive // lock to shared lock if the channel is not writable, to better match // the MRI behavior.	WITHOUT_CLASSIFICATION	0.9999929047151117	WITHOUT_CLASSIFICATION	7.0952848883016275E-6	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999993904976104	WITHOUT_CLASSIFICATION	6.095023896918325E-7	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999993904976104	WITHOUT_CLASSIFICATION	6.095023896918325E-7	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999999596082794	WITHOUT_CLASSIFICATION	4.039172066059527E-8	DEFECT
/* ---------- Public fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999652995486368	WITHOUT_CLASSIFICATION	3.470045136322007E-5	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9999999068443818	WITHOUT_CLASSIFICATION	9.315561819816266E-8	DEFECT
// zero args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999984917988683	WITHOUT_CLASSIFICATION	1.5082011316383297E-6	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9999961584598346	WITHOUT_CLASSIFICATION	3.8415401654320295E-6	DEFECT
// Store each line into this list if not null.	WITHOUT_CLASSIFICATION	0.9999981936654823	WITHOUT_CLASSIFICATION	1.8063345177567087E-6	DEFECT
// Portion of line right after beginning marker	WITHOUT_CLASSIFICATION	0.9999968485936628	WITHOUT_CLASSIFICATION	3.151406337236538E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999925190792295	WITHOUT_CLASSIFICATION	7.480920770547164E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999925190792295	WITHOUT_CLASSIFICATION	7.480920770547164E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999925190792295	WITHOUT_CLASSIFICATION	7.480920770547164E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999925190792295	WITHOUT_CLASSIFICATION	7.480920770547164E-6	DEFECT
// If an IO exception occurs (something odd, but possible) // A directory may return null.	WITHOUT_CLASSIFICATION	0.9997971460255495	WITHOUT_CLASSIFICATION	2.028539744504986E-4	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.999999222596176	WITHOUT_CLASSIFICATION	7.774038240669156E-7	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.999999222596176	WITHOUT_CLASSIFICATION	7.774038240669156E-7	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.999999222596176	WITHOUT_CLASSIFICATION	7.774038240669156E-7	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9999986934324256	WITHOUT_CLASSIFICATION	1.3065675743391378E-6	DEFECT
// finally with no exception	WITHOUT_CLASSIFICATION	0.999987031053089	WITHOUT_CLASSIFICATION	1.2968946911037006E-5	DEFECT
// Now, for all variables used by 'i' mark them live before 'i'	WITHOUT_CLASSIFICATION	0.9999992604666446	WITHOUT_CLASSIFICATION	7.39533355451091E-7	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.8107916349200498	WITHOUT_CLASSIFICATION	0.18920836507995023	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.8107916349200498	WITHOUT_CLASSIFICATION	0.18920836507995023	DEFECT
/* The counting of slashes that follows is simply a way to adhere to          * Ruby's UNC (or something) compatibility. When Ruby's expand_path is          * called with "//foo//bar" it will return "//foo/bar". JRuby uses          * java.io.File, and hence returns "/foo/bar". In order to retain          * java.io.File in the lower layers and provide full Ruby          * compatibility, the number of extra slashes must be counted and          * prepended to the result.         */	WITHOUT_CLASSIFICATION	0.9999999750700258	WITHOUT_CLASSIFICATION	2.4929974122573156E-8	DEFECT
// This is almost always already interned, since it will be called with a symbol in most cases // but when created from Java code, we might get an argument that needs to be interned. // addAccessor has as a precondition that the string MUST be interned	WITHOUT_CLASSIFICATION	0.9994588318361618	WITHOUT_CLASSIFICATION	5.41168163838228E-4	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9999965422867931	WITHOUT_CLASSIFICATION	3.4577132069435365E-6	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9999965422867931	WITHOUT_CLASSIFICATION	3.4577132069435365E-6	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999999862584839	WITHOUT_CLASSIFICATION	1.3741516216586815E-8	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999999862584839	WITHOUT_CLASSIFICATION	1.3741516216586815E-8	DEFECT
// io.available() only returns 0 after EOF is encountered // so we need to differentiate between the empty string and EOF	WITHOUT_CLASSIFICATION	0.9999998539569394	WITHOUT_CLASSIFICATION	1.4604306053448945E-7	DEFECT
// In the current logic, if we get here we know that module is not an // IncludedModuleWrapper, so there's no need to fish out the delegate. But just // in case the logic should change later, let's do it anyway	WITHOUT_CLASSIFICATION	0.9999914571684624	WITHOUT_CLASSIFICATION	8.542831537519336E-6	DEFECT
// rb_iterate((VALUE(*)_((VALUE)))str_step, (VALUE)args, step_i, (VALUE)iter);	WITHOUT_CLASSIFICATION	0.9999998269985811	WITHOUT_CLASSIFICATION	1.7300141883976523E-7	DEFECT
// Broken symlinks considered by exists() as non-existing, // so we need to check for symlinks explicitly.	WITHOUT_CLASSIFICATION	0.9999999074767345	WITHOUT_CLASSIFICATION	9.252326542485559E-8	DEFECT
// ////////////////// CONSTANT API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999943682164726	WITHOUT_CLASSIFICATION	5.631783527427188E-6	DEFECT
// create the default thread group	WITHOUT_CLASSIFICATION	0.9999998658689354	WITHOUT_CLASSIFICATION	1.3413106457098644E-7	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9999998808581841	WITHOUT_CLASSIFICATION	1.1914181578390963E-7	DEFECT
/* ============================     * Here are hash internals     * (This could be extracted to a separate class but it's not too large though)     * ============================     */	WITHOUT_CLASSIFICATION	0.9999970026709403	WITHOUT_CLASSIFICATION	2.9973290598465604E-6	DEFECT
// ////////////////// LOW-LEVEL CLASS VARIABLE INTERFACE //////////////// // // fetch/store/list class variables for this module //	WITHOUT_CLASSIFICATION	0.9999994991666099	WITHOUT_CLASSIFICATION	5.008333900373238E-7	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.999999928140148	WITHOUT_CLASSIFICATION	7.185985185710966E-8	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.999999928140148	WITHOUT_CLASSIFICATION	7.185985185710966E-8	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999995240629559	WITHOUT_CLASSIFICATION	4.759370441731627E-7	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999995240629559	WITHOUT_CLASSIFICATION	4.759370441731627E-7	DEFECT
// retuns null when not found to avoid unnecessary getRuntime().getNil() call	WITHOUT_CLASSIFICATION	0.9999939441862399	WITHOUT_CLASSIFICATION	6.055813760071047E-6	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999991813577075	WITHOUT_CLASSIFICATION	8.186422924525657E-7	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999880814065936	WITHOUT_CLASSIFICATION	1.191859340644979E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999912029849178	WITHOUT_CLASSIFICATION	8.797015082168183E-6	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999912029849178	WITHOUT_CLASSIFICATION	8.797015082168183E-6	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999912029849178	WITHOUT_CLASSIFICATION	8.797015082168183E-6	DEFECT
// line 286	WITHOUT_CLASSIFICATION	0.9999949681772244	WITHOUT_CLASSIFICATION	5.0318227756046705E-6	DEFECT
// line 476	WITHOUT_CLASSIFICATION	0.999990639337061	WITHOUT_CLASSIFICATION	9.360662939030112E-6	DEFECT
// line 513	WITHOUT_CLASSIFICATION	0.999992861416753	WITHOUT_CLASSIFICATION	7.1385832469515315E-6	DEFECT
// line 530	WITHOUT_CLASSIFICATION	0.9999948684254412	WITHOUT_CLASSIFICATION	5.131574558793164E-6	DEFECT
// line 533	WITHOUT_CLASSIFICATION	0.9999929728524299	WITHOUT_CLASSIFICATION	7.027147570108747E-6	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999924861625926	WITHOUT_CLASSIFICATION	7.513837407459655E-6	DEFECT
// line 551	WITHOUT_CLASSIFICATION	0.9999943810446156	WITHOUT_CLASSIFICATION	5.618955384442799E-6	DEFECT
// end loop	WITHOUT_CLASSIFICATION	0.9999995436182403	WITHOUT_CLASSIFICATION	4.5638175978729334E-7	DEFECT
// MRI behavior: we don't print errno for actual Errno errors	WITHOUT_CLASSIFICATION	0.9999238738961486	WITHOUT_CLASSIFICATION	7.612610385134938E-5	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.999998622929229	WITHOUT_CLASSIFICATION	1.3770707709332274E-6	DEFECT
// Traverse the instructions in this basic block in reverse order! // Mark as dead all instructions whose results are not used! 	WITHOUT_CLASSIFICATION	0.9988816086830854	WITHOUT_CLASSIFICATION	0.0011183913169145467	DEFECT
// // fields should really be an immutable map as it is never modified after construction //	WITHOUT_CLASSIFICATION	0.9999980190416865	WITHOUT_CLASSIFICATION	1.980958313521354E-6	DEFECT
// load self object as IRubyObject, for recv param	WITHOUT_CLASSIFICATION	0.9999996681083653	WITHOUT_CLASSIFICATION	3.3189163480230674E-7	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.8107916349200498	WITHOUT_CLASSIFICATION	0.18920836507995023	DEFECT
// If we define a class in Ruby, but later want to allow it to be defined in Java, // the allocator needs to be updated	WITHOUT_CLASSIFICATION	0.9999998839713815	WITHOUT_CLASSIFICATION	1.160286184690447E-7	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9999997164644783	WITHOUT_CLASSIFICATION	2.8353552175686853E-7	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999414217322886	WITHOUT_CLASSIFICATION	5.8578267711401266E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9997492127839683	WITHOUT_CLASSIFICATION	2.5078721603170813E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9997492127839683	WITHOUT_CLASSIFICATION	2.5078721603170813E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9997492127839683	WITHOUT_CLASSIFICATION	2.5078721603170813E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9997492127839683	WITHOUT_CLASSIFICATION	2.5078721603170813E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9997492127839683	WITHOUT_CLASSIFICATION	2.5078721603170813E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999809922045078	WITHOUT_CLASSIFICATION	1.9007795492205713E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9997492127839683	WITHOUT_CLASSIFICATION	2.5078721603170813E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9997492127839683	WITHOUT_CLASSIFICATION	2.5078721603170813E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9997492127839683	WITHOUT_CLASSIFICATION	2.5078721603170813E-4	DEFECT
// MRI has extra pointer which makes our code look a little bit // more strange in // comparison	WITHOUT_CLASSIFICATION	0.9999999434377688	WITHOUT_CLASSIFICATION	5.656223124373947E-8	DEFECT
// Tempory buffer to build up a potential token.  Consumer takes responsibility to reset  // this before use.	WITHOUT_CLASSIFICATION	0.9999992307920397	WITHOUT_CLASSIFICATION	7.692079604148194E-7	DEFECT
//tmpPosition is required because getPosition()'s side effects. //if the warning is generated, the getPosition() on line 954 (this line + 18) will create //a wrong position if the "inclusive" flag is not set.	WITHOUT_CLASSIFICATION	0.9999959668639848	WITHOUT_CLASSIFICATION	4.033136015163646E-6	DEFECT
/* What is \v in C?                    case '\v':                        c2 = 'v';                        break;                        */	WITHOUT_CLASSIFICATION	0.999600907119026	WITHOUT_CLASSIFICATION	3.990928809738722E-4	DEFECT
/* Consider Thread aspects of this */	WITHOUT_CLASSIFICATION	0.9999629011517364	WITHOUT_CLASSIFICATION	3.709884826367558E-5	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999995122285293	WITHOUT_CLASSIFICATION	4.877714706152193E-7	DEFECT
// An interrupt or timeout may have caused us to miss // a notify that we consumed, so do another notify in // case someone else is available to pick it up.	WITHOUT_CLASSIFICATION	0.9999999615450047	WITHOUT_CLASSIFICATION	3.845499533467808E-8	DEFECT
// line 572	WITHOUT_CLASSIFICATION	0.9999914880403097	WITHOUT_CLASSIFICATION	8.511959690344505E-6	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999921587517067	WITHOUT_CLASSIFICATION	7.841248293332687E-6	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999921587517067	WITHOUT_CLASSIFICATION	7.841248293332687E-6	DEFECT
// line 625	WITHOUT_CLASSIFICATION	0.9999901648722398	WITHOUT_CLASSIFICATION	9.835127760125604E-6	DEFECT
// line 649	WITHOUT_CLASSIFICATION	0.9999892541022608	WITHOUT_CLASSIFICATION	1.0745897739111727E-5	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999907442514351	WITHOUT_CLASSIFICATION	9.255748564920044E-6	DEFECT
// line 723	WITHOUT_CLASSIFICATION	0.9999916710704243	WITHOUT_CLASSIFICATION	8.328929575627108E-6	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999928652948641	WITHOUT_CLASSIFICATION	7.134705135829937E-6	DEFECT
// line 745	WITHOUT_CLASSIFICATION	0.9999913745280273	WITHOUT_CLASSIFICATION	8.625471972717481E-6	DEFECT
// line 766	WITHOUT_CLASSIFICATION	0.9999913310770717	WITHOUT_CLASSIFICATION	8.668922928202988E-6	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999942347716957	WITHOUT_CLASSIFICATION	5.765228304321286E-6	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999907420617956	WITHOUT_CLASSIFICATION	9.257938204496634E-6	DEFECT
// line 800	WITHOUT_CLASSIFICATION	0.9999964664630913	WITHOUT_CLASSIFICATION	3.5335369087663228E-6	DEFECT
// line 812	WITHOUT_CLASSIFICATION	0.9999955760515756	WITHOUT_CLASSIFICATION	4.423948424321202E-6	DEFECT
// line 827	WITHOUT_CLASSIFICATION	0.99999458841531	WITHOUT_CLASSIFICATION	5.411584690016464E-6	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999949445534213	WITHOUT_CLASSIFICATION	5.0554465786703886E-6	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999942912623802	WITHOUT_CLASSIFICATION	5.7087376198042835E-6	DEFECT
// line 864	WITHOUT_CLASSIFICATION	0.9999934249011515	WITHOUT_CLASSIFICATION	6.575098848439414E-6	DEFECT
// line 886	WITHOUT_CLASSIFICATION	0.9999945982817299	WITHOUT_CLASSIFICATION	5.401718270132055E-6	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.999993786448677	WITHOUT_CLASSIFICATION	6.213551323049897E-6	DEFECT
// line 911	WITHOUT_CLASSIFICATION	0.9999939833381774	WITHOUT_CLASSIFICATION	6.01666182256189E-6	DEFECT
// line 929	WITHOUT_CLASSIFICATION	0.9999935098349394	WITHOUT_CLASSIFICATION	6.490165060623866E-6	DEFECT
// line 952	WITHOUT_CLASSIFICATION	0.9999919377003567	WITHOUT_CLASSIFICATION	8.062299643308479E-6	DEFECT
// line 970	WITHOUT_CLASSIFICATION	0.9999915186200579	WITHOUT_CLASSIFICATION	8.48137994214436E-6	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.999990638583763	WITHOUT_CLASSIFICATION	9.361416236940217E-6	DEFECT
// line 991	WITHOUT_CLASSIFICATION	0.9999930871172661	WITHOUT_CLASSIFICATION	6.912882733844228E-6	DEFECT
// line 1011	WITHOUT_CLASSIFICATION	0.9999948227452998	WITHOUT_CLASSIFICATION	5.177254700179375E-6	DEFECT
// line 1026	WITHOUT_CLASSIFICATION	0.9999923775661955	WITHOUT_CLASSIFICATION	7.622433804504605E-6	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999954665014312	WITHOUT_CLASSIFICATION	4.53349856873808E-6	DEFECT
// line 1067	WITHOUT_CLASSIFICATION	0.9999912536862797	WITHOUT_CLASSIFICATION	8.746313720236857E-6	DEFECT
// line 1085	WITHOUT_CLASSIFICATION	0.9999949471075381	WITHOUT_CLASSIFICATION	5.052892461824876E-6	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999897533408121	WITHOUT_CLASSIFICATION	1.0246659187958159E-5	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999934391068362	WITHOUT_CLASSIFICATION	6.560893163783295E-6	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999934348723162	WITHOUT_CLASSIFICATION	6.565127683863304E-6	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999924281270115	WITHOUT_CLASSIFICATION	7.571872988460542E-6	DEFECT
// line 1145	WITHOUT_CLASSIFICATION	0.9999912822670972	WITHOUT_CLASSIFICATION	8.717732902794682E-6	DEFECT
// line 1169	WITHOUT_CLASSIFICATION	0.999990727810229	WITHOUT_CLASSIFICATION	9.272189771015485E-6	DEFECT
// line 1201	WITHOUT_CLASSIFICATION	0.9999938214992241	WITHOUT_CLASSIFICATION	6.1785007759122115E-6	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999944659220966	WITHOUT_CLASSIFICATION	5.534077903402975E-6	DEFECT
// line 1229	WITHOUT_CLASSIFICATION	0.9999921208355839	WITHOUT_CLASSIFICATION	7.879164416124421E-6	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.999990969085668	WITHOUT_CLASSIFICATION	9.030914332000771E-6	DEFECT
// line 1287	WITHOUT_CLASSIFICATION	0.9999933125652914	WITHOUT_CLASSIFICATION	6.6874347084910155E-6	DEFECT
// line 1293	WITHOUT_CLASSIFICATION	0.9999859404559375	WITHOUT_CLASSIFICATION	1.4059544062508264E-5	DEFECT
// line 1307	WITHOUT_CLASSIFICATION	0.9999922429432649	WITHOUT_CLASSIFICATION	7.757056734975615E-6	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999940886231475	WITHOUT_CLASSIFICATION	5.911376852385922E-6	DEFECT
// line 1325	WITHOUT_CLASSIFICATION	0.999991615553758	WITHOUT_CLASSIFICATION	8.384446241931053E-6	DEFECT
// line 1363	WITHOUT_CLASSIFICATION	0.9999892565352839	WITHOUT_CLASSIFICATION	1.0743464715973348E-5	DEFECT
// line 1398	WITHOUT_CLASSIFICATION	0.9999938430810733	WITHOUT_CLASSIFICATION	6.156918926666658E-6	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999936669863463	WITHOUT_CLASSIFICATION	6.333013653739162E-6	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999876433883025	WITHOUT_CLASSIFICATION	1.2356611697481628E-5	DEFECT
// line 1473	WITHOUT_CLASSIFICATION	0.9999876782671061	WITHOUT_CLASSIFICATION	1.232173289389219E-5	DEFECT
// line 1492	WITHOUT_CLASSIFICATION	0.9999898601126002	WITHOUT_CLASSIFICATION	1.013988739979725E-5	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.999990437411904	WITHOUT_CLASSIFICATION	9.562588095931468E-6	DEFECT
// line 1523	WITHOUT_CLASSIFICATION	0.9999896696015776	WITHOUT_CLASSIFICATION	1.0330398422384864E-5	DEFECT
// line 1562	WITHOUT_CLASSIFICATION	0.9999886737918025	WITHOUT_CLASSIFICATION	1.1326208197576771E-5	DEFECT
// line 1582	WITHOUT_CLASSIFICATION	0.9999936806836633	WITHOUT_CLASSIFICATION	6.319316336727155E-6	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999893487331648	WITHOUT_CLASSIFICATION	1.0651266835230945E-5	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999893487331648	WITHOUT_CLASSIFICATION	1.0651266835230945E-5	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999899604326075	WITHOUT_CLASSIFICATION	1.0039567392544257E-5	DEFECT
// line 1620	WITHOUT_CLASSIFICATION	0.9999928456516677	WITHOUT_CLASSIFICATION	7.154348332378923E-6	DEFECT
// line 1635	WITHOUT_CLASSIFICATION	0.9999894961627268	WITHOUT_CLASSIFICATION	1.0503837273267495E-5	DEFECT
// line 1652	WITHOUT_CLASSIFICATION	0.9999891144904731	WITHOUT_CLASSIFICATION	1.0885509526927757E-5	DEFECT
// line 1681	WITHOUT_CLASSIFICATION	0.9999936546013417	WITHOUT_CLASSIFICATION	6.345398658318286E-6	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9999872358787151	WITHOUT_CLASSIFICATION	1.2764121285021992E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999856954082211	WITHOUT_CLASSIFICATION	1.4304591778926649E-5	DEFECT
// line 1755	WITHOUT_CLASSIFICATION	0.9999845667142906	WITHOUT_CLASSIFICATION	1.543328570947993E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999880342744446	WITHOUT_CLASSIFICATION	1.1965725555343279E-5	DEFECT
// line 1789	WITHOUT_CLASSIFICATION	0.9999907976883083	WITHOUT_CLASSIFICATION	9.202311691576023E-6	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999944114761915	WITHOUT_CLASSIFICATION	5.588523808517316E-6	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999944114761915	WITHOUT_CLASSIFICATION	5.588523808517316E-6	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999974743906149	WITHOUT_CLASSIFICATION	2.525609385119801E-6	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9999755965053302	WITHOUT_CLASSIFICATION	2.4403494669839138E-5	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9999843120431826	WITHOUT_CLASSIFICATION	1.5687956817417676E-5	DEFECT
// We can assign if we already have variable of that name here or we are the only // scope in the chain (which Local scopes always are).	WITHOUT_CLASSIFICATION	0.9999999617313458	WITHOUT_CLASSIFICATION	3.826865431679756E-8	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999965666569489	WITHOUT_CLASSIFICATION	3.433343050984236E-6	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999965666569489	WITHOUT_CLASSIFICATION	3.433343050984236E-6	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999965666569489	WITHOUT_CLASSIFICATION	3.433343050984236E-6	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999965666569489	WITHOUT_CLASSIFICATION	3.433343050984236E-6	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9670120170508975	WITHOUT_CLASSIFICATION	0.032987982949102546	DEFECT
/*     * This method exists for us to break up multiple expression when nodes (e.g. when 1,2,3:)     * into individual whenNodes.  The primary reason for this is to ensure lazy evaluation of     * the arguments (when foo,bar,gar:) to prevent side-effects.  In the old code this was done     * using nested when statements, which was awful for interpreter and compilation.     *     * Notes: This has semantic equivalence but will not be lexically equivalent.  Compiler     * needs to detect same bodies to simplify bytecode generated.     */	WITHOUT_CLASSIFICATION	0.9999998587748334	WITHOUT_CLASSIFICATION	1.4122516654178278E-7	DEFECT
// line 313	WITHOUT_CLASSIFICATION	0.999993941740599	WITHOUT_CLASSIFICATION	6.0582594009482044E-6	DEFECT
// line 339	WITHOUT_CLASSIFICATION	0.9999940869410832	WITHOUT_CLASSIFICATION	5.913058916832889E-6	DEFECT
// line 361	WITHOUT_CLASSIFICATION	0.9999930404939246	WITHOUT_CLASSIFICATION	6.959506075504352E-6	DEFECT
// line 413	WITHOUT_CLASSIFICATION	0.9999932470695375	WITHOUT_CLASSIFICATION	6.752930462547253E-6	DEFECT
// line 451	WITHOUT_CLASSIFICATION	0.9999938916477098	WITHOUT_CLASSIFICATION	6.108352290249103E-6	DEFECT
// line 472	WITHOUT_CLASSIFICATION	0.9999925533148194	WITHOUT_CLASSIFICATION	7.446685180605979E-6	DEFECT
// line 500	WITHOUT_CLASSIFICATION	0.9999951873833753	WITHOUT_CLASSIFICATION	4.8126166246201235E-6	DEFECT
// line 515	WITHOUT_CLASSIFICATION	0.999993960068419	WITHOUT_CLASSIFICATION	6.039931580942133E-6	DEFECT
// line 555	WITHOUT_CLASSIFICATION	0.999993971917124	WITHOUT_CLASSIFICATION	6.02808287604356E-6	DEFECT
// line 582	WITHOUT_CLASSIFICATION	0.9999952169500351	WITHOUT_CLASSIFICATION	4.78304996487704E-6	DEFECT
// line 619	WITHOUT_CLASSIFICATION	0.9999911113365432	WITHOUT_CLASSIFICATION	8.888663456824957E-6	DEFECT
// line 636	WITHOUT_CLASSIFICATION	0.9999912529688587	WITHOUT_CLASSIFICATION	8.74703114128634E-6	DEFECT
// line 669	WITHOUT_CLASSIFICATION	0.9999907310550519	WITHOUT_CLASSIFICATION	9.268944948113831E-6	DEFECT
// line 703	WITHOUT_CLASSIFICATION	0.9999911227975091	WITHOUT_CLASSIFICATION	8.877202490767321E-6	DEFECT
// line 776	WITHOUT_CLASSIFICATION	0.9999912990302295	WITHOUT_CLASSIFICATION	8.700969770442955E-6	DEFECT
// line 814	WITHOUT_CLASSIFICATION	0.9999948290046137	WITHOUT_CLASSIFICATION	5.170995386251547E-6	DEFECT
// line 823	WITHOUT_CLASSIFICATION	0.9999946659823226	WITHOUT_CLASSIFICATION	5.334017677389876E-6	DEFECT
// line 854	WITHOUT_CLASSIFICATION	0.999994143259023	WITHOUT_CLASSIFICATION	5.856740976933545E-6	DEFECT
// line 872	WITHOUT_CLASSIFICATION	0.9999944480954102	WITHOUT_CLASSIFICATION	5.551904589889571E-6	DEFECT
// line 905	WITHOUT_CLASSIFICATION	0.9999934607381471	WITHOUT_CLASSIFICATION	6.539261852867104E-6	DEFECT
// line 925	WITHOUT_CLASSIFICATION	0.9999922019949803	WITHOUT_CLASSIFICATION	7.798005019716009E-6	DEFECT
// line 958	WITHOUT_CLASSIFICATION	0.9999943808018356	WITHOUT_CLASSIFICATION	5.619198164501988E-6	DEFECT
// line 992	WITHOUT_CLASSIFICATION	0.9999924768215909	WITHOUT_CLASSIFICATION	7.523178409144958E-6	DEFECT
// line 1047	WITHOUT_CLASSIFICATION	0.9999924431940316	WITHOUT_CLASSIFICATION	7.556805968386757E-6	DEFECT
// line 1072	WITHOUT_CLASSIFICATION	0.9999926811088217	WITHOUT_CLASSIFICATION	7.318891178332073E-6	DEFECT
// line 1081	WITHOUT_CLASSIFICATION	0.9999958072165223	WITHOUT_CLASSIFICATION	4.192783477714646E-6	DEFECT
// line 1108	WITHOUT_CLASSIFICATION	0.9999957355656055	WITHOUT_CLASSIFICATION	4.264434394539859E-6	DEFECT
// line 1136	WITHOUT_CLASSIFICATION	0.9999912176704502	WITHOUT_CLASSIFICATION	8.78232954981159E-6	DEFECT
// line 1168	WITHOUT_CLASSIFICATION	0.999993786346612	WITHOUT_CLASSIFICATION	6.213653388082202E-6	DEFECT
// line 1192	WITHOUT_CLASSIFICATION	0.9999922992318997	WITHOUT_CLASSIFICATION	7.700768100373311E-6	DEFECT
// line 1241	WITHOUT_CLASSIFICATION	0.9999909398278249	WITHOUT_CLASSIFICATION	9.060172175023382E-6	DEFECT
// line 1267	WITHOUT_CLASSIFICATION	0.9999889829801711	WITHOUT_CLASSIFICATION	1.1017019828914459E-5	DEFECT
// line 1286	WITHOUT_CLASSIFICATION	0.9999928104918019	WITHOUT_CLASSIFICATION	7.1895081981357945E-6	DEFECT
// line 1301	WITHOUT_CLASSIFICATION	0.9999938642098707	WITHOUT_CLASSIFICATION	6.135790129280604E-6	DEFECT
// line 1314	WITHOUT_CLASSIFICATION	0.9999917475768941	WITHOUT_CLASSIFICATION	8.252423105907132E-6	DEFECT
// line 1333	WITHOUT_CLASSIFICATION	0.9999921615635674	WITHOUT_CLASSIFICATION	7.838436432579302E-6	DEFECT
// line 1362	WITHOUT_CLASSIFICATION	0.9999905227185105	WITHOUT_CLASSIFICATION	9.47728148944035E-6	DEFECT
// line 1395	WITHOUT_CLASSIFICATION	0.9999904687720169	WITHOUT_CLASSIFICATION	9.53122798308169E-6	DEFECT
// line 1420	WITHOUT_CLASSIFICATION	0.999992875287851	WITHOUT_CLASSIFICATION	7.124712148917237E-6	DEFECT
// line 1439	WITHOUT_CLASSIFICATION	0.9999896754085811	WITHOUT_CLASSIFICATION	1.032459141881293E-5	DEFECT
// line 1476	WITHOUT_CLASSIFICATION	0.999986647792037	WITHOUT_CLASSIFICATION	1.3352207962797973E-5	DEFECT
// line 1535	WITHOUT_CLASSIFICATION	0.9999916074008067	WITHOUT_CLASSIFICATION	8.39259919331472E-6	DEFECT
// line 1588	WITHOUT_CLASSIFICATION	0.9999940933571106	WITHOUT_CLASSIFICATION	5.906642889288366E-6	DEFECT
// line 1618	WITHOUT_CLASSIFICATION	0.9999946111512176	WITHOUT_CLASSIFICATION	5.388848782406582E-6	DEFECT
// line 1643	WITHOUT_CLASSIFICATION	0.9999874536854382	WITHOUT_CLASSIFICATION	1.2546314561815399E-5	DEFECT
// line 1669	WITHOUT_CLASSIFICATION	0.9999904848861609	WITHOUT_CLASSIFICATION	9.515113839084079E-6	DEFECT
// line 1728	WITHOUT_CLASSIFICATION	0.9999905057282262	WITHOUT_CLASSIFICATION	9.49427177366288E-6	DEFECT
// line 1753	WITHOUT_CLASSIFICATION	0.9999813517708815	WITHOUT_CLASSIFICATION	1.8648229118370494E-5	DEFECT
// line 1779	WITHOUT_CLASSIFICATION	0.9999871520211816	WITHOUT_CLASSIFICATION	1.284797881848257E-5	DEFECT
// line 1794	WITHOUT_CLASSIFICATION	0.9999839740833898	WITHOUT_CLASSIFICATION	1.6025916610196337E-5	DEFECT
// line 1812	WITHOUT_CLASSIFICATION	0.9999955139493356	WITHOUT_CLASSIFICATION	4.4860506644366166E-6	DEFECT
// line 1837	WITHOUT_CLASSIFICATION	0.9999945887174102	WITHOUT_CLASSIFICATION	5.411282589882243E-6	DEFECT
// line 1895	WITHOUT_CLASSIFICATION	0.9999942467740386	WITHOUT_CLASSIFICATION	5.753225961394665E-6	DEFECT
// line 1925	WITHOUT_CLASSIFICATION	0.9999906992490979	WITHOUT_CLASSIFICATION	9.300750902107796E-6	DEFECT
// line 1950	WITHOUT_CLASSIFICATION	0.9999930390152821	WITHOUT_CLASSIFICATION	6.960984717851327E-6	DEFECT
// line 1992	WITHOUT_CLASSIFICATION	0.9999909606660377	WITHOUT_CLASSIFICATION	9.039333962284733E-6	DEFECT
// line 2014	WITHOUT_CLASSIFICATION	0.9999947275960042	WITHOUT_CLASSIFICATION	5.272403995861554E-6	DEFECT
// Whether this scope is used as the "argument scope" for e.g. zsuper	WITHOUT_CLASSIFICATION	0.9999998330515472	WITHOUT_CLASSIFICATION	1.6694845290183674E-7	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.999999551876143	WITHOUT_CLASSIFICATION	4.4812385702010727E-7	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9998818782699412	WITHOUT_CLASSIFICATION	1.1812173005869777E-4	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9998818782699412	WITHOUT_CLASSIFICATION	1.1812173005869777E-4	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9998818782699412	WITHOUT_CLASSIFICATION	1.1812173005869777E-4	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9998818782699412	WITHOUT_CLASSIFICATION	1.1812173005869777E-4	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9998818782699412	WITHOUT_CLASSIFICATION	1.1812173005869777E-4	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9998818782699412	WITHOUT_CLASSIFICATION	1.1812173005869777E-4	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9998818782699412	WITHOUT_CLASSIFICATION	1.1812173005869777E-4	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999777282501898	WITHOUT_CLASSIFICATION	2.2271749810186106E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999777282501898	WITHOUT_CLASSIFICATION	2.2271749810186106E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999777282501898	WITHOUT_CLASSIFICATION	2.2271749810186106E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999777282501898	WITHOUT_CLASSIFICATION	2.2271749810186106E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999823927656017	WITHOUT_CLASSIFICATION	1.760723439822053E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999823927656017	WITHOUT_CLASSIFICATION	1.760723439822053E-5	DEFECT
// We create one extra dynamicScope on a binding so that when we 'eval "b=1", binding' the // 'b' will get put into this new dynamic scope.  The original scope does not see the new // 'b' and successive evals with this binding will.  I take it having the ability to have  // succesive binding evals be able to share same scope makes sense from a programmers  // perspective.   One crappy outcome of this design is it requires Dynamic and Static  // scopes to be mutable for this one case.	WITHOUT_CLASSIFICATION	0.9999991196553997	WITHOUT_CLASSIFICATION	8.803446002109833E-7	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999998491959446	WITHOUT_CLASSIFICATION	1.5080405529759848E-7	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999998491959446	WITHOUT_CLASSIFICATION	1.5080405529759848E-7	DEFECT
// tc // under method // self // under method // name // args	WITHOUT_CLASSIFICATION	0.9999978949975125	WITHOUT_CLASSIFICATION	2.1050024875498235E-6	DEFECT
// allow it to bubble up	WITHOUT_CLASSIFICATION	0.9999969067514054	WITHOUT_CLASSIFICATION	3.093248594701906E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999996644605593	WITHOUT_CLASSIFICATION	3.3553944068835574E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999996644605593	WITHOUT_CLASSIFICATION	3.3553944068835574E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999996644605593	WITHOUT_CLASSIFICATION	3.3553944068835574E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999996644605593	WITHOUT_CLASSIFICATION	3.3553944068835574E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999996644605593	WITHOUT_CLASSIFICATION	3.3553944068835574E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999996644605593	WITHOUT_CLASSIFICATION	3.3553944068835574E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999996644605593	WITHOUT_CLASSIFICATION	3.3553944068835574E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999999546736341	WITHOUT_CLASSIFICATION	4.5326365902841203E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999978849779266	WITHOUT_CLASSIFICATION	2.115022073404925E-6	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999998975250951	WITHOUT_CLASSIFICATION	1.0247490483475615E-7	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999998975250951	WITHOUT_CLASSIFICATION	1.0247490483475615E-7	DEFECT
// Check for a builtin first.	WITHOUT_CLASSIFICATION	0.9999964323753576	WITHOUT_CLASSIFICATION	3.5676246423977258E-6	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999679463554231	WITHOUT_CLASSIFICATION	3.205364457686019E-5	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999679463554231	WITHOUT_CLASSIFICATION	3.205364457686019E-5	DEFECT
// Unfortunately, the number of digits in the exponent is // not clearly defined in Ruby documentation. This is a // platform/version-dependent behavior. On Linux/Mac/Cygwin/*nix, // two digits are used. On Windows, 3 digits are used. // It is desirable for JRuby to have consistent behavior, and // the two digits behavior was selected. This is also in sync // with "Java-native" sprintf behavior (java.util.Formatter). // E or e	WITHOUT_CLASSIFICATION	0.9999999912282354	WITHOUT_CLASSIFICATION	8.771764560326E-9	DEFECT
/** * Represents the the dynamic portion of scoping information.  The variableValues are the * values of assigned local or block variables.  The staticScope identifies which sort of * scope this is (block or local). *  * Properties of Dynamic Scopes: * 1. static and dynamic scopes have the same number of names to values * 2. size of variables (and thus names) is determined during parsing.  So those structured do *    not need to change * * FIXME: When creating dynamic scopes we sometimes accidentally pass in extra parents.  This * is harmless (other than wasting memory), but we should not do that.  We can fix this in two * ways: * 1. Fix all callers * 2. Check parent that is passed in and make if new instance is local, then its parent is not local */	WITHOUT_CLASSIFICATION	0.9448491622312283	DEFECT	0.05515083776877167	WITHOUT_CLASSIFICATION
// This method handles '**/' patterns and delegates to // fnmatch_helper for the main work.	WITHOUT_CLASSIFICATION	0.9999742392326765	WITHOUT_CLASSIFICATION	2.5760767323575936E-5	DEFECT
// Peel onion...make subpatterns out of outer layer of glob and recall with each subpattern  // Example: foo{a{c},b}bar -> fooa{c}bar, foobbar	WITHOUT_CLASSIFICATION	0.9999983736585385	WITHOUT_CLASSIFICATION	1.6263414613992072E-6	DEFECT
// double precision, native // double precision, native	WITHOUT_CLASSIFICATION	0.9999960218927921	WITHOUT_CLASSIFICATION	3.97810720784088E-6	DEFECT
// 64-bit number, native (as bignum)	WITHOUT_CLASSIFICATION	0.9999982621559916	WITHOUT_CLASSIFICATION	1.7378440083459838E-6	DEFECT
// Next indicates to decode using native encoding format	WITHOUT_CLASSIFICATION	0.9999994931232582	WITHOUT_CLASSIFICATION	5.068767417039228E-7	DEFECT
// calculate based on a, b, c and d	WITHOUT_CLASSIFICATION	0.9999994652236351	WITHOUT_CLASSIFICATION	5.347763648916852E-7	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999887161014299	WITHOUT_CLASSIFICATION	1.1283898570097058E-5	DEFECT
// MRI behavior:  for 'Q', do not add trailing nils	WITHOUT_CLASSIFICATION	0.9999972758893138	WITHOUT_CLASSIFICATION	2.7241106863494637E-6	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9995826800334319	WITHOUT_CLASSIFICATION	4.1731996656818235E-4	DEFECT
// exec needs to behave differently in-process, because it's technically // supposed to replace the calling process. So if we're supposed to run // in-process, we allow it to use the default streams and not use // pumpers at all. See JRUBY-2156 and JRUBY-2154.	WITHOUT_CLASSIFICATION	0.9999999957338607	WITHOUT_CLASSIFICATION	4.266139288628802E-9	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.999999969599919	WITHOUT_CLASSIFICATION	3.040008094273689E-8	DEFECT
// The problem we trying to solve below: STDIN in Java // is blocked and non-interruptible, so if we invoke read // on it, we might never be able to interrupt such thread. // So, we use in.available() to see if there is any input // ready, and only then read it. But this approach can't // tell whether the end of stream reached or not, so we // might end up looping right at the end of the stream. // Well, at least, we can improve the situation by checking // if some input was ever available, and if so, not // checking for available anymore, and just go to read.	WITHOUT_CLASSIFICATION	0.9999696755100753	WITHOUT_CLASSIFICATION	3.0324489924775475E-5	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9999965294962673	WITHOUT_CLASSIFICATION	3.4705037327464288E-6	DEFECT
// an empirically derived rule: precision applies to // significand length, irrespective of exponent	WITHOUT_CLASSIFICATION	0.9999943382605972	WITHOUT_CLASSIFICATION	5.6617394027014965E-6	DEFECT
// an official rule, clarified: if the exponent // <clarif>after adjusting for exponent form</clarif> // is < -4,  or the exponent <clarif>after adjusting  // for exponent form</clarif> is greater than the // precision, use exponent form	WITHOUT_CLASSIFICATION	0.999999884778738	WITHOUT_CLASSIFICATION	1.1522126199527364E-7	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9998411223259723	WITHOUT_CLASSIFICATION	1.588776740277242E-4	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999975378620306	WITHOUT_CLASSIFICATION	2.462137969489749E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999975378620306	WITHOUT_CLASSIFICATION	2.462137969489749E-6	DEFECT
// MRI behavior: validate only the unnumbered arguments	WITHOUT_CLASSIFICATION	0.9999998645714249	WITHOUT_CLASSIFICATION	1.3542857506311278E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999995637807565	WITHOUT_CLASSIFICATION	4.3621924353248613E-7	DEFECT
// calculation for simple (and typical) case, // adapted from sun.misc.FloatingDecimal	WITHOUT_CLASSIFICATION	0.99999990473404	WITHOUT_CLASSIFICATION	9.526596007869934E-8	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.999983014492879	WITHOUT_CLASSIFICATION	1.6985507121123663E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999882985372311	WITHOUT_CLASSIFICATION	1.1701462768952865E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999882985372311	WITHOUT_CLASSIFICATION	1.1701462768952865E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999882985372311	WITHOUT_CLASSIFICATION	1.1701462768952865E-5	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.999999892050798	WITHOUT_CLASSIFICATION	1.0794920209179626E-7	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9999488729986981	WITHOUT_CLASSIFICATION	5.1127001301978694E-5	DEFECT
// call chmod after we created the RandomAccesFile // because otherwise, the file could be read-only	WITHOUT_CLASSIFICATION	0.9999996795030415	WITHOUT_CLASSIFICATION	3.2049695853024254E-7	DEFECT
// attempt to set the permissions, if we have been passed a POSIX instance, // and only if the file was created in this call.	WITHOUT_CLASSIFICATION	0.999998963591933	WITHOUT_CLASSIFICATION	1.0364080669826692E-6	DEFECT
// // When reading into a heap buffer, the jvm allocates a temporary // direct ByteBuffer of the requested size.  To avoid allocating // a huge direct buffer when doing ludicrous reads (e.g. 1G or more) // we split the read up into chunks of no more than 1M //	WITHOUT_CLASSIFICATION	0.9999989005536292	WITHOUT_CLASSIFICATION	1.0994463707969857E-6	DEFECT
// // If it is a file channel, then we can pre-allocate the output buffer // to the total size of buffered + remaining bytes in file //	WITHOUT_CLASSIFICATION	0.9999999838108927	WITHOUT_CLASSIFICATION	1.6189107298619147E-8	DEFECT
// // Cannot discern the total read length - allocate at least enough for the buffered data //	WITHOUT_CLASSIFICATION	0.9999994439349706	WITHOUT_CLASSIFICATION	5.560650293953636E-7	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9999989681869279	WITHOUT_CLASSIFICATION	1.0318130721987455E-6	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9999975798584927	WITHOUT_CLASSIFICATION	2.4201415073173564E-6	DEFECT
// already have some bytes buffered, just return those	WITHOUT_CLASSIFICATION	0.9999838808978639	WITHOUT_CLASSIFICATION	1.6119102136036546E-5	DEFECT
// reset buffer	WITHOUT_CLASSIFICATION	0.9999959658037172	WITHOUT_CLASSIFICATION	4.034196282795636E-6	DEFECT
// // Synchronize and re-check to avoid creating more than one Selector per provider //	WITHOUT_CLASSIFICATION	0.9999999632080402	WITHOUT_CLASSIFICATION	3.67919598395644E-8	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.9152087367244971	WITHOUT_CLASSIFICATION	0.08479126327550292	DEFECT
// Is there something built into JRuby to do this?	WITHOUT_CLASSIFICATION	0.9997370765836577	WITHOUT_CLASSIFICATION	2.6292341634227655E-4	DEFECT
// Note that WE CAN'T say the following, because of the on-the-fly conversion of Fixnum to Long // assertTrue(value == valueViaValuesIterator);	WITHOUT_CLASSIFICATION	0.9999999593591998	WITHOUT_CLASSIFICATION	4.0640800190077623E-8	DEFECT
// value equality //result = eval("key = 3; arr = []; arr[key] = 'one'; arr.store(3, 'two'); puts arr[key]"); //assertEquals("two", result);	WITHOUT_CLASSIFICATION	0.9999901217513109	WITHOUT_CLASSIFICATION	9.878248689180127E-6	DEFECT
// Uncomment the "puts" lines if you want to see more detail	WITHOUT_CLASSIFICATION	0.9999999703372222	WITHOUT_CLASSIFICATION	2.9662777787774235E-8	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999970742187217	WITHOUT_CLASSIFICATION	2.92578127824989E-6	DEFECT
// change the thread context to include the class	WITHOUT_CLASSIFICATION	0.9999999861468588	WITHOUT_CLASSIFICATION	1.3853141238572073E-8	DEFECT
// FIXME: This is a system error based on errno	DEFECT	0.6614804769058038	WITHOUT_CLASSIFICATION	0.33851952309419625	DEFECT
// TODO: In MRI 1.9, an explicit check for negative length is // added here. IndexError is raised when length is negative. // See [ruby-core:12953] for more details. // // New note: This is actually under re-evaluation, // see [ruby-core:17483].	DEFECT	0.946899575699667	DEFECT	0.05310042430033299	WITHOUT_CLASSIFICATION
// TODO: make sure it's really safe to not to copy it	DEFECT	0.7576046624506656	WITHOUT_CLASSIFICATION	0.24239533754933448	DEFECT
// TODO: Numeric.new works in Ruby and it does here too.  However trying to use //   that instance in a numeric operation should generate an ArgumentError. Doing //   this seems so pathological I do not see the need to fix this now.	DEFECT	0.9934611400763409	DEFECT	0.006538859923659104	WITHOUT_CLASSIFICATION
// FIXME: We can't guarantee this will always be a RubyIO...so the old code here is not safe	DEFECT	0.9471072470916234	DEFECT	0.052892752908376604	WITHOUT_CLASSIFICATION
// dump the trace and continue // this is currently only here for Android, which seems to have // bugs in its enumeration logic // http://code.google.com/p/android/issues/detail?id=2812	DEFECT	0.9999932056575825	WITHOUT_CLASSIFICATION	6.794342417419946E-6	DEFECT
// FIXME: Add at_exit and finalizers to exit, then make exit_bang not call those.	DEFECT	0.9248205303516361	WITHOUT_CLASSIFICATION	0.07517946964836386	DEFECT
// TODO: need to isolate the "current" thread from class creation	DEFECT	0.9805527307188889	WITHOUT_CLASSIFICATION	0.0194472692811111	DEFECT
// FIXME: not correct exception	DEFECT	0.9413404297948168	DEFECT	0.0586595702051831	WITHOUT_CLASSIFICATION
// XXX actually only on windows...	DEFECT	0.9999905978005601	WITHOUT_CLASSIFICATION	9.402199439919716E-6	DEFECT
// Enebo : Should ~frogger\\foo work (it doesnt in linux ruby)?	DEFECT	0.9905929649092645	WITHOUT_CLASSIFICATION	0.009407035090735512	DEFECT
// FIXME can't use static; would interfere with other runtimes in the same JVM	DEFECT	0.9767270914002381	WITHOUT_CLASSIFICATION	0.02327290859976193	DEFECT
// TODO: anything threads attached to original fd are notified of the close... // see rb_thread_fd_close	DEFECT	0.9870671070806235	WITHOUT_CLASSIFICATION	0.012932892919376535	DEFECT
// TODO: This is an freopen in MRI, this is close, but not quite the same	DEFECT	0.9813201193444753	DEFECT	0.01867988065552469	WITHOUT_CLASSIFICATION
// TODO: sys fail	DEFECT	0.5405551831557583	DEFECT	0.4594448168442417	WITHOUT_CLASSIFICATION
// TODO: Ruby locks the string here	DEFECT	0.7459375807741234	DEFECT	0.2540624192258765	WITHOUT_CLASSIFICATION
// TODO: Ruby locks the string here	DEFECT	0.7459375807741234	DEFECT	0.2540624192258765	WITHOUT_CLASSIFICATION
//      FIXME: check how ruby 1.9 handles this	DEFECT	0.9843425602372947	WITHOUT_CLASSIFICATION	0.015657439762705314	DEFECT
// FIXME: MRI has special case for constants here 	DEFECT	0.9974266333620031	WITHOUT_CLASSIFICATION	0.002573366637997009	DEFECT
// FIXME: Throw the right ArgumentError's if the class is missing // or if it's a module.	DEFECT	0.9959748245697936	WITHOUT_CLASSIFICATION	0.004025175430206406	DEFECT
// ENEBO: Very wrong	DEFECT	0.9996910970887178	WITHOUT_CLASSIFICATION	3.089029112821995E-4	DEFECT
// ENEBO: Very wrong	DEFECT	0.9996910970887178	WITHOUT_CLASSIFICATION	3.089029112821995E-4	DEFECT
// synchronized method per JRUBY-1173 (unsafe Double-Checked Locking) // FIXME: synchronization is still wrong in CP code	DEFECT	0.9678724974250603	DEFECT	0.0321275025749397	WITHOUT_CLASSIFICATION
// FIXME: I'm not sure this is right, but the old code returned // the undef, which definitely isn't right...	DEFECT	0.7323556231161563	DEFECT	0.2676443768838437	WITHOUT_CLASSIFICATION
// FIXME: Errno descriptions from Constantine // on Windows are not useful at the moment.	DEFECT	0.9926235382878862	WITHOUT_CLASSIFICATION	0.0073764617121137846	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.7301539415730164	WITHOUT_CLASSIFICATION	0.26984605842698367	DEFECT
// TODO: take BigDecimal.mode into account.	DEFECT	0.5237328499398599	WITHOUT_CLASSIFICATION	0.47626715006014014	DEFECT
// TODO: full-precision divmod is 1000x slower than MRI!	DEFECT	0.5071858055963577	WITHOUT_CLASSIFICATION	0.4928141944036423	DEFECT
// TODO: proper sign	DEFECT	0.857869900259148	WITHOUT_CLASSIFICATION	0.14213009974085206	DEFECT
// FIXME: No argument seems to work for -K in MRI plus this should not // siphon off additional args 'jruby -K ~/scripts/foo'.  Also better error // processing.	DEFECT	0.6419690499116636	WITHOUT_CLASSIFICATION	0.3580309500883364	DEFECT
// FIXME: -x flag not supported //                    case 'x' : //                        break;	DEFECT	0.9868271076620451	WITHOUT_CLASSIFICATION	0.013172892337954831	DEFECT
// FIXME: We are assuming that original string will be raw bytes.  If -Ku is provided // this will not be true, but that is ok for now.  Deal with that when someone needs it.	DEFECT	0.8221150694451206	WITHOUT_CLASSIFICATION	0.1778849305548795	DEFECT
// FIXME: This is causing a verification error for some reason //nilClass.dispatcher = callbackFactory.createDispatcher(nilClass);	DEFECT	0.9264222713891044	WITHOUT_CLASSIFICATION	0.07357772861089563	DEFECT
// FIXME: for some reason this dispatcher causes a VerifyError... //classClass.dispatcher = callbackFactory.createDispatcher(classClass);	DEFECT	0.9747262433525078	WITHOUT_CLASSIFICATION	0.025273756647492256	DEFECT
// TODO: Rewriter and compiler assume case when empty expression.  In MRI this is just // a when. //        assert caseNode != null : "caseNode is not null";	DEFECT	0.7657613927661261	WITHOUT_CLASSIFICATION	0.23423860723387402	DEFECT
// TODO: This code effectively disables all inspection-based optimizations; none of them are 100% safe yet	DEFECT	0.5430193339723056	DEFECT	0.45698066602769444	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// FIXME: this should reset to what it was before	DEFECT	0.9285143804554363	WITHOUT_CLASSIFICATION	0.0714856195445637	DEFECT
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9817130306475943	WITHOUT_CLASSIFICATION	0.018286969352405702	DEFECT
// SSS FIXME: Incorect!	DEFECT	0.9068913707433717	WITHOUT_CLASSIFICATION	0.09310862925662837	DEFECT
// SSS FIXME: // // There are also differences in variable scoping between 1.8 and 1.9  // Ruby 1.8 is the buggy semantics if I understand correctly. // // The semantics of how this shadows other variables outside the block needs // to be figured out during live var analysis.	DEFECT	0.9845740120425027	DEFECT	0.015425987957497174	WITHOUT_CLASSIFICATION
// SSS FIXME: This doesn't preserve original order of when clauses.  We could consider // preserving the order (or maybe not, since we would have to sort the constants first // in any case) for outputing jump tables in certain situations. // // add body to map for emitting later	DEFECT	0.9997417407314126	WITHOUT_CLASSIFICATION	2.582592685872765E-4	DEFECT
// IMPORTANT: Receive the block argument before the opt and splat args // This is so that the *arg can be encoded as 'rest of the array'.  This // won't work if the block argument hasn't been received yet!	DEFECT	0.9994255000665535	WITHOUT_CLASSIFICATION	5.744999334465467E-4	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.7089597312265998	DEFECT	0.2910402687734002	WITHOUT_CLASSIFICATION
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.7089597312265998	DEFECT	0.2910402687734002	WITHOUT_CLASSIFICATION
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.9183327476089947	WITHOUT_CLASSIFICATION	0.08166725239100535	DEFECT
// SSS FIXME: Verify semantics of this instruction	DEFECT	0.9738083998736643	WITHOUT_CLASSIFICATION	0.026191600126335816	DEFECT
// The following constants capture pre-known static call sites -- JRuby implementations of methods of ruby classes // SSS FIXME: Note that compiler/impl/BaseBodyCompiler is using op_match2 for match() and and op_match for match2 ... Is this a bug there?	DEFECT	0.9874930441526404	DEFECT	0.012506955847359686	WITHOUT_CLASSIFICATION
// SSS FIXME: For constant arrays, we should never get here!	DEFECT	0.9941593520170297	WITHOUT_CLASSIFICATION	0.00584064798297031	DEFECT
// FIXME: This is wrong	DEFECT	0.7121424834916619	WITHOUT_CLASSIFICATION	0.28785751650833824	DEFECT
// FIXME: may need to broaden for IPV6 IP address strings	DEFECT	0.9957443461566046	WITHOUT_CLASSIFICATION	0.00425565384339541	DEFECT
// XXX Wrong, but will have to do for now	DEFECT	0.9999892253399327	WITHOUT_CLASSIFICATION	1.0774660067344228E-5	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.8951728379369148	WITHOUT_CLASSIFICATION	0.10482716206308522	DEFECT
// FIXME: vulture daemon thread prevents finalization, // find alternative approach. // vulture.start();	DEFECT	0.9883202536437772	WITHOUT_CLASSIFICATION	0.011679746356222898	DEFECT
// If we outgrow our pushback stack then grow it (this should only happen in pretty  // pathological cases).	DEFECT	0.9999111734814154	WITHOUT_CLASSIFICATION	8.882651858447843E-5	DEFECT
// FIXME: Broken but behaving	DEFECT	0.8528836057778115	WITHOUT_CLASSIFICATION	0.1471163942221884	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.7219050708696187	WITHOUT_CLASSIFICATION	0.27809492913038125	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.7219050708696187	WITHOUT_CLASSIFICATION	0.27809492913038125	DEFECT
// FIXME: this seems like a good assertion, but it breaks compiled code and the code seems // to run without it... //assert currentModule != null : "Can't push null RubyClass";	DEFECT	0.8077924727937376	WITHOUT_CLASSIFICATION	0.1922075272062624	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.963862295057364	DEFECT	0.03613770494263595	WITHOUT_CLASSIFICATION
// FIXME: I got a bunch of NPEs when I didn't check for nulls here...HOW?!	DEFECT	0.5930751192802348	WITHOUT_CLASSIFICATION	0.40692488071976507	DEFECT
// MRI 1.8 behavior: this combination of flags is not allowed	DEFECT	0.9999762614050863	WITHOUT_CLASSIFICATION	2.3738594913688586E-5	DEFECT
// FIXME: Arg may also be true, false, and nil and still be valid.  Strangely enough,  // protocol conversion is not happening in Ruby on this arg?	DEFECT	0.9985741512264993	DEFECT	0.0014258487735007036	WITHOUT_CLASSIFICATION
// TODO: Rubicon TestKernel dies without this line.  A cursory glance implies we // falsely set $! to nil and this sets it back to something valid.  This should  // get fixed at the same time we address bug #1296484.	DEFECT	0.9985212127802522	DEFECT	0.001478787219747829	WITHOUT_CLASSIFICATION
// This is the result of a bug that left off all trailing arguments. E.g.: //   system "ls", "-1", "dir" // would be seen as //   system "ls"	DEFECT	0.9993723398549972	WITHOUT_CLASSIFICATION	6.276601450027469E-4	DEFECT
// We are in eval with binding break out early // FIXME: This is broken with the new backtrace stuff	DEFECT	0.9270256700067854	WITHOUT_CLASSIFICATION	0.07297432999321456	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.9183327476089947	WITHOUT_CLASSIFICATION	0.08166725239100535	DEFECT
// This was a getOpt with one mandatory arg, but it did not work // so I am parsing it for now.	DEFECT	0.9998311546544897	WITHOUT_CLASSIFICATION	1.6884534551025624E-4	DEFECT
// FIXME: I doubt any of the constants referenced in this method // are ever redefined -- should compare to the known values, rather // than do an expensive constant lookup.	DEFECT	0.9522024890272508	WITHOUT_CLASSIFICATION	0.047797510972749244	DEFECT
// SSS FIXME: Why is the for node being built using closures and not as a "regular" loop with branches? // // This has implications on inlining, implementations of closures, next, break, etc. // When "each" and the block it consumes are inlined together in the caller, the "loop" // from the each should become a normal loop without any closures.  But, in this implementation // of for, we replace one closure with another! //	DEFECT	0.9196013403394294	WITHOUT_CLASSIFICATION	0.08039865966057065	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.7301539415730164	WITHOUT_CLASSIFICATION	0.26984605842698367	DEFECT
// TODO: Adding implicit nils caused multiple problems in compiler -- revist after landing //assert bodyNode != null : "bodyNode is not null";	DEFECT	0.6006838491807159	WITHOUT_CLASSIFICATION	0.399316150819284	DEFECT
// FIXME: It may be possible to killpg on systems which support it.  POSIX library // needs to tell whether a particular method works or not	DEFECT	0.9855088795841882	WITHOUT_CLASSIFICATION	0.0144911204158118	DEFECT
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9817130306475943	WITHOUT_CLASSIFICATION	0.018286969352405702	DEFECT
// zero args with block // FIXME: omit args index; subtract one from normal block index	DEFECT	0.9890321005674358	WITHOUT_CLASSIFICATION	0.010967899432564172	DEFECT
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// FIXME: Broken but behaving	DEFECT	0.8528836057778115	WITHOUT_CLASSIFICATION	0.1471163942221884	DEFECT
// TODO: we loose encoding information here, fix it	DEFECT	0.9963315583028964	DEFECT	0.003668441697103476	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.8970856983844421	DEFECT	0.10291430161555795	WITHOUT_CLASSIFICATION
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.8951728379369148	WITHOUT_CLASSIFICATION	0.10482716206308522	DEFECT
// vulture thread will periodically expunge dead // entries.  entries are also expunged during 'put' // operations; this is designed to cover the case where // many objects are created initially, followed by limited // put activity. // // FIXME: DISABLED (below) pending resolution of finalization issue //	DEFECT	0.9998577921053394	WITHOUT_CLASSIFICATION	1.4220789466055415E-4	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.7219050708696187	WITHOUT_CLASSIFICATION	0.27809492913038125	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.7219050708696187	WITHOUT_CLASSIFICATION	0.27809492913038125	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.963862295057364	DEFECT	0.03613770494263595	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.963862295057364	DEFECT	0.03613770494263595	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.963862295057364	DEFECT	0.03613770494263595	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.963862295057364	DEFECT	0.03613770494263595	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.963862295057364	DEFECT	0.03613770494263595	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.963862295057364	DEFECT	0.03613770494263595	WITHOUT_CLASSIFICATION
// TODO: We overflow on large files...We could increase to long to limit // this, but then the impl gets more involved since java io APIs based on // int (means we have to chunk up a long into a series of int ops).	DEFECT	0.9833318444158774	WITHOUT_CLASSIFICATION	0.01666815558412268	DEFECT
